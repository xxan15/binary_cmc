.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 876438C6A0E0E976649EAF089797A132976B1DFBB4B5F87C41D81A94A88EC54B
.text:00401000 ; Input MD5    : 3BB52B710750F9CF48EC473341DABD55
.text:00401000 ; Input CRC32  : 196AFC39
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/tr.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A261 (Wed Apr 20 18:41:37 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000088D0 (  35024.)
.text:00401000 ; Section size in file          : 00008A00 (  35328.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_402390+6F↓p
.text:00401040                                         ; .text:00408FD0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_408F70
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40A000
.text:004010A2                 mov     edx, dword_40A050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40A004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40A070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40A070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_408F40
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40A000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40A004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_402390
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_408F70
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aAlnum          db 'alnum',0            ; DATA XREF: .text:Str↓o
.text:00401286 aAlpha          db 'alpha',0            ; DATA XREF: .text:004012E4↓o
.text:0040128C aBlank          db 'blank',0            ; DATA XREF: .text:004012E8↓o
.text:00401292 aCntrl          db 'cntrl',0            ; DATA XREF: .text:004012EC↓o
.text:00401298 aDigit          db 'digit',0            ; DATA XREF: .text:004012F0↓o
.text:0040129E aGraph          db 'graph',0            ; DATA XREF: .text:004012F4↓o
.text:004012A4 aLower          db 'lower',0            ; DATA XREF: .text:004012F8↓o
.text:004012AA aPrint          db 'print',0            ; DATA XREF: .text:004012FC↓o
.text:004012B0 aPunct          db 'punct',0            ; DATA XREF: .text:00401300↓o
.text:004012B6 aSpace          db 'space',0            ; DATA XREF: .text:00401304↓o
.text:004012BC aUpper          db 'upper',0            ; DATA XREF: .text:00401308↓o
.text:004012C2 aXdigit         db 'xdigit',0           ; DATA XREF: .text:0040130C↓o
.text:004012C9                 align 20h
.text:004012E0 ; char *const Str
.text:004012E0 Str             dd offset aAlnum        ; DATA XREF: sub_403910+55D↓r
.text:004012E0                                         ; "alnum"
.text:004012E4                 dd offset aAlpha        ; "alpha"
.text:004012E8                 dd offset aBlank        ; "blank"
.text:004012EC                 dd offset aCntrl        ; "cntrl"
.text:004012F0                 dd offset aDigit        ; "digit"
.text:004012F4                 dd offset aGraph        ; "graph"
.text:004012F8                 dd offset aLower        ; "lower"
.text:004012FC                 dd offset aPrint        ; "print"
.text:00401300                 dd offset aPunct        ; "punct"
.text:00401304                 dd offset aSpace        ; "space"
.text:00401308                 dd offset aUpper        ; "upper"
.text:0040130C                 dd offset aXdigit       ; "xdigit"
.text:00401310 aComplement     db 'complement',0       ; DATA XREF: .text:off_401360↓o
.text:0040131B aDelete         db 'delete',0           ; DATA XREF: .text:00401370↓o
.text:00401322 aSqueezeRepeats db 'squeeze-repeats',0  ; DATA XREF: .text:00401380↓o
.text:00401332 aTruncateSet1   db 'truncate-set1',0    ; DATA XREF: .text:00401390↓o
.text:00401340 aHelp           db 'help',0             ; DATA XREF: .text:004013A0↓o
.text:00401345 aVersion        db 'version',0          ; DATA XREF: .text:004013B0↓o
.text:0040134D                 align 20h
.text:00401360 off_401360      dd offset aComplement   ; DATA XREF: sub_402390+88↓o
.text:00401360                                         ; "complement"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 63h
.text:00401370                 dd offset aDelete       ; "delete"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 64h
.text:00401380                 dd offset aSqueezeRepeats ; "squeeze-repeats"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 73h
.text:00401390                 dd offset aTruncateSet1 ; "truncate-set1"
.text:00401394                 dd 2 dup(0)
.text:0040139C                 dd 74h
.text:004013A0                 dd offset aHelp         ; "help"
.text:004013A4                 dd 2 dup(0)
.text:004013AC                 dd 0FFFFFF7Eh
.text:004013B0                 dd offset aVersion      ; "version"
.text:004013B4                 dd 2 dup(0)
.text:004013BC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004013D0                 align 20h
.text:004013E0 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/tr.c',0
.text:004013E0                                         ; DATA XREF: sub_401460+137↓o
.text:004013E0                                         ; sub_401460+1D8↓o ...
.text:00401403 aINChars        db 'i < N_CHARS',0      ; DATA XREF: sub_401460+13F↓o
.text:0040140F                 align 20h
.text:00401420 aIsCharClassMem db 'is_char_class_member (p->u.char_class, s->state)',0
.text:00401420                                         ; DATA XREF: sub_401460+1E0↓o
.text:00401451 ; ---------------------------------------------------------------------------
.text:00401451                 jmp     short sub_401460
.text:00401451 ; ---------------------------------------------------------------------------
.text:00401453                 align 10h
.text:00401460
.text:00401460 ; =============== S U B R O U T I N E =======================================
.text:00401460
.text:00401460
.text:00401460 sub_401460      proc near               ; CODE XREF: .text:00401451↑j
.text:00401460                                         ; sub_401460+29D↓p ...
.text:00401460
.text:00401460 var_2C          = dword ptr -2Ch
.text:00401460 var_28          = dword ptr -28h
.text:00401460 var_24          = dword ptr -24h
.text:00401460 var_14          = dword ptr -14h
.text:00401460 arg_0           = dword ptr  4
.text:00401460 arg_4           = dword ptr  8
.text:00401460
.text:00401460                 push    ebp
.text:00401461                 push    edi
.text:00401462                 push    esi
.text:00401463                 push    ebx
.text:00401464                 sub     esp, 1Ch
.text:00401467                 mov     ebx, [esp+2Ch+arg_4]
.text:0040146B                 mov     ebp, [esp+2Ch+arg_0]
.text:0040146F                 test    ebx, ebx
.text:00401471                 jz      short loc_401479
.text:00401473                 mov     dword ptr [ebx], 2
.text:00401479
.text:00401479 loc_401479:                             ; CODE XREF: sub_401460+11↑j
.text:00401479                 mov     ecx, [ebp+0Ch]
.text:0040147C                 mov     esi, [ebp+8]
.text:0040147F                 mov     eax, ecx
.text:00401481                 not     eax
.text:00401483                 xor     esi, 0FFFFFFFEh
.text:00401486                 or      eax, esi
.text:00401488                 jnz     short loc_4014A1
.text:0040148A                 mov     dword ptr [ebp+8], 0FFFFFFFFh
.text:00401491                 mov     esi, [ebp+0]
.text:00401494                 mov     dword ptr [ebp+0Ch], 0FFFFFFFFh
.text:0040149B                 mov     edx, [esi+4]
.text:0040149E                 mov     [ebp+4], edx
.text:004014A1
.text:004014A1 loc_4014A1:                             ; CODE XREF: sub_401460+28↑j
.text:004014A1                 mov     edi, [ebp+4]
.text:004014A4                 mov     eax, 0FFFFFFFFh
.text:004014A9                 test    edi, edi
.text:004014AB                 jz      short loc_401528
.text:004014AD                 mov     eax, [edi]
.text:004014AF                 cmp     eax, 4          ; switch 5 cases
.text:004014B2                 ja      def_4014B8      ; jumptable 004014B8 default case
.text:004014B8                 jmp     ds:jpt_4014B8[eax*4] ; switch jump
.text:004014B8 ; ---------------------------------------------------------------------------
.text:004014BF                 align 10h
.text:004014C0 jpt_4014B8      dd offset loc_401680    ; DATA XREF: sub_401460+58↑r
.text:004014C0                 dd offset loc_4014D4    ; jump table for switch statement
.text:004014C0                 dd offset loc_401540
.text:004014C0                 dd offset loc_401680
.text:004014C0                 dd offset loc_401690
.text:004014D4 ; ---------------------------------------------------------------------------
.text:004014D4
.text:004014D4 loc_4014D4:                             ; CODE XREF: sub_401460+58↑j
.text:004014D4                                         ; DATA XREF: sub_401460:jpt_4014B8↑o
.text:004014D4                 mov     edx, [ebp+8]    ; jumptable 004014B8 case 1
.text:004014D7                 mov     ecx, [ebp+0Ch]
.text:004014DA                 mov     esi, edx
.text:004014DC                 and     esi, ecx
.text:004014DE                 inc     esi
.text:004014DF                 jnz     short loc_401530
.text:004014E1                 movzx   ecx, byte ptr [edi+8]
.text:004014E5                 mov     dword ptr [ebp+0Ch], 0
.text:004014EC                 mov     [ebp+8], ecx
.text:004014EF
.text:004014EF loc_4014EF:                             ; CODE XREF: sub_401460+DC↓j
.text:004014EF                 mov     eax, [ebp+8]
.text:004014F2                 xor     edx, edx
.text:004014F4                 mov     ebx, [ebp+0Ch]
.text:004014F7                 mov     ecx, [ebp+8]
.text:004014FA                 mov     [esp+2Ch+var_14], eax
.text:004014FE                 mov     esi, ebx
.text:00401500                 xor     esi, edx
.text:00401502                 movzx   eax, byte ptr [edi+9]
.text:00401506
.text:00401506 loc_401506:                             ; CODE XREF: sub_401460+27D↓j
.text:00401506                 xor     eax, ecx
.text:00401508                 or      esi, eax
.text:0040150A                 jnz     short loc_401524
.text:0040150C                 lea     esi, [esi+0]
.text:00401510
.text:00401510 loc_401510:                             ; CODE XREF: sub_401460+18A↓j
.text:00401510                                         ; sub_401460+1AF↓j ...
.text:00401510                 mov     dword ptr [ebp+8], 0FFFFFFFFh
.text:00401517                 mov     ecx, [edi+4]
.text:0040151A                 mov     dword ptr [ebp+0Ch], 0FFFFFFFFh
.text:00401521                 mov     [ebp+4], ecx
.text:00401524
.text:00401524 loc_401524:                             ; CODE XREF: sub_401460+AA↑j
.text:00401524                                         ; sub_401460+1CB↓j ...
.text:00401524                 mov     eax, [esp+2Ch+var_14]
.text:00401528
.text:00401528 loc_401528:                             ; CODE XREF: sub_401460+4B↑j
.text:00401528                 add     esp, 1Ch
.text:0040152B                 pop     ebx
.text:0040152C                 pop     esi
.text:0040152D                 pop     edi
.text:0040152E                 pop     ebp
.text:0040152F                 retn
.text:00401530 ; ---------------------------------------------------------------------------
.text:00401530
.text:00401530 loc_401530:                             ; CODE XREF: sub_401460+7F↑j
.text:00401530                 add     edx, 1
.text:00401533                 adc     ecx, 0
.text:00401536                 mov     [ebp+8], edx
.text:00401539                 mov     [ebp+0Ch], ecx
.text:0040153C                 jmp     short loc_4014EF
.text:0040153C ; ---------------------------------------------------------------------------
.text:0040153E                 align 10h
.text:00401540
.text:00401540 loc_401540:                             ; CODE XREF: sub_401460+58↑j
.text:00401540                                         ; DATA XREF: sub_401460:jpt_4014B8↑o
.text:00401540                 test    ebx, ebx        ; jumptable 004014B8 case 2
.text:00401542                 jz      short loc_401559
.text:00401544                 mov     eax, [edi+8]
.text:00401547                 cmp     eax, 6
.text:0040154A                 jz      loc_401677
.text:00401550                 cmp     eax, 0Ah
.text:00401553                 jz      loc_401650
.text:00401559
.text:00401559 loc_401559:                             ; CODE XREF: sub_401460+E2↑j
.text:00401559                 mov     ebx, [ebp+8]
.text:0040155C                 mov     esi, [ebp+0Ch]
.text:0040155F                 and     ebx, esi
.text:00401561                 inc     ebx
.text:00401562                 jnz     short loc_4015C3
.text:00401564                 xor     ebx, ebx
.text:00401566                 lea     esi, [esi+0]
.text:00401569                 lea     edi, [edi+0]
.text:00401570
.text:00401570 loc_401570:                             ; CODE XREF: sub_401460+12D↓j
.text:00401570                 movzx   edx, bl
.text:00401573                 mov     [esp+2Ch+var_28], edx
.text:00401577                 mov     ecx, [edi+8]
.text:0040157A                 mov     [esp+2Ch+var_2C], ecx
.text:0040157D                 call    sub_4032B0
.text:00401582                 test    al, al
.text:00401584                 jnz     short loc_4015B0
.text:00401586                 inc     ebx
.text:00401587                 cmp     ebx, 0FFh
.text:0040158D                 jle     short loc_401570
.text:0040158F
.text:0040158F loc_40158F:                             ; CODE XREF: sub_401460+156↓j
.text:0040158F                 mov     [esp+2Ch+var_24], 455h
.text:00401597                 mov     [esp+2Ch+var_28], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:0040159F                 mov     [esp+2Ch+var_2C], offset aINChars ; "i < N_CHARS"
.text:004015A6
.text:004015A6 loc_4015A6:                             ; CODE XREF: sub_401460+1E7↓j
.text:004015A6                 call    _assert
.text:004015A6 ; ---------------------------------------------------------------------------
.text:004015AB                 align 10h
.text:004015B0
.text:004015B0 loc_4015B0:                             ; CODE XREF: sub_401460+124↑j
.text:004015B0                 cmp     ebx, 0FFh
.text:004015B6                 jg      short loc_40158F
.text:004015B8                 mov     [ebp+8], ebx
.text:004015BB                 mov     esi, ebx
.text:004015BD                 sar     esi, 1Fh
.text:004015C0                 mov     [ebp+0Ch], esi
.text:004015C3
.text:004015C3 loc_4015C3:                             ; CODE XREF: sub_401460+102↑j
.text:004015C3                 movzx   ecx, byte ptr [ebp+8]
.text:004015C7                 mov     [esp+2Ch+var_28], ecx
.text:004015CB                 mov     ebx, [edi+8]
.text:004015CE                 mov     [esp+2Ch+var_2C], ebx
.text:004015D1                 call    sub_4032B0
.text:004015D6                 test    al, al
.text:004015D8                 jz      short loc_401630
.text:004015DA                 mov     eax, [ebp+8]
.text:004015DD                 mov     ebx, eax
.text:004015DF                 inc     ebx
.text:004015E0                 mov     [esp+2Ch+var_14], eax
.text:004015E4                 cmp     ebx, 0FFh
.text:004015EA                 jg      loc_401510
.text:004015F0
.text:004015F0 loc_4015F0:                             ; CODE XREF: sub_401460+1AD↓j
.text:004015F0                 movzx   esi, bl
.text:004015F3                 mov     [esp+2Ch+var_28], esi
.text:004015F7                 mov     edx, [edi+8]
.text:004015FA                 mov     [esp+2Ch+var_2C], edx
.text:004015FD                 call    sub_4032B0
.text:00401602                 test    al, al
.text:00401604                 jnz     short loc_401614
.text:00401606                 inc     ebx
.text:00401607                 cmp     ebx, 0FFh
.text:0040160D                 jle     short loc_4015F0
.text:0040160F                 jmp     loc_401510
.text:00401614 ; ---------------------------------------------------------------------------
.text:00401614
.text:00401614 loc_401614:                             ; CODE XREF: sub_401460+1A4↑j
.text:00401614                 cmp     ebx, 0FFh
.text:0040161A                 jg      loc_401510
.text:00401620                 mov     [ebp+8], ebx
.text:00401623                 mov     edi, ebx
.text:00401625                 sar     edi, 1Fh
.text:00401628                 mov     [ebp+0Ch], edi
.text:0040162B                 jmp     loc_401524
.text:00401630 ; ---------------------------------------------------------------------------
.text:00401630
.text:00401630 loc_401630:                             ; CODE XREF: sub_401460+178↑j
.text:00401630                 mov     [esp+2Ch+var_24], 458h
.text:00401638                 mov     [esp+2Ch+var_28], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00401640                 mov     [esp+2Ch+var_2C], offset aIsCharClassMem ; "is_char_class_member (p->u.char_class, "...
.text:00401647                 jmp     loc_4015A6
.text:00401647 ; ---------------------------------------------------------------------------
.text:0040164C                 align 10h
.text:00401650
.text:00401650 loc_401650:                             ; CODE XREF: sub_401460+F3↑j
.text:00401650                 mov     dword ptr [ebx], 1
.text:00401656
.text:00401656 loc_401656:                             ; CODE XREF: sub_401460+21D↓j
.text:00401656                 mov     dword ptr [ebp+8], 0FFFFFFFFh
.text:0040165D                 mov     edx, [edi+4]
.text:00401660                 mov     dword ptr [ebp+0Ch], 0FFFFFFFFh
.text:00401667                 mov     [esp+2Ch+var_14], 0
.text:0040166F                 mov     [ebp+4], edx
.text:00401672                 jmp     loc_401524
.text:00401677 ; ---------------------------------------------------------------------------
.text:00401677
.text:00401677 loc_401677:                             ; CODE XREF: sub_401460+EA↑j
.text:00401677                 mov     dword ptr [ebx], 0
.text:0040167D                 jmp     short loc_401656
.text:0040167D ; ---------------------------------------------------------------------------
.text:0040167F                 align 10h
.text:00401680
.text:00401680 loc_401680:                             ; CODE XREF: sub_401460+58↑j
.text:00401680                                         ; DATA XREF: sub_401460:jpt_4014B8↑o
.text:00401680                 movzx   ebx, byte ptr [edi+8] ; jumptable 004014B8 cases 0,3
.text:00401684                 mov     [esp+2Ch+var_14], ebx
.text:00401688                 jmp     loc_401510
.text:00401688 ; ---------------------------------------------------------------------------
.text:0040168D                 align 10h
.text:00401690
.text:00401690 loc_401690:                             ; CODE XREF: sub_401460+58↑j
.text:00401690                                         ; DATA XREF: sub_401460:jpt_4014B8↑o
.text:00401690                 mov     ecx, [edi+14h]  ; jumptable 004014B8 case 4
.text:00401693                 mov     esi, [edi+10h]
.text:00401696                 mov     eax, ecx
.text:00401698                 or      eax, esi
.text:0040169A                 jz      short loc_4016E2
.text:0040169C                 mov     edx, [ebp+8]
.text:0040169F                 mov     ecx, [ebp+0Ch]
.text:004016A2                 mov     ebx, edx
.text:004016A4                 and     ebx, ecx
.text:004016A6                 inc     ebx
.text:004016A7                 jnz     short loc_4016BB
.text:004016A9                 mov     dword ptr [ebp+8], 0
.text:004016B0                 xor     edx, edx
.text:004016B2                 xor     ecx, ecx
.text:004016B4                 mov     dword ptr [ebp+0Ch], 0
.text:004016BB
.text:004016BB loc_4016BB:                             ; CODE XREF: sub_401460+247↑j
.text:004016BB                 mov     eax, edx
.text:004016BD                 add     eax, 1
.text:004016C0                 mov     edx, ecx
.text:004016C2                 adc     edx, 0
.text:004016C5                 mov     [ebp+8], eax
.text:004016C8                 mov     [ebp+0Ch], edx
.text:004016CB                 movzx   esi, byte ptr [edi+8]
.text:004016CF                 mov     [esp+2Ch+var_14], esi
.text:004016D3                 mov     ebx, [edi+14h]
.text:004016D6                 mov     esi, edx
.text:004016D8                 mov     ecx, [edi+10h]
.text:004016DB                 xor     esi, ebx
.text:004016DD                 jmp     loc_401506
.text:004016E2 ; ---------------------------------------------------------------------------
.text:004016E2
.text:004016E2 loc_4016E2:                             ; CODE XREF: sub_401460+23A↑j
.text:004016E2                 mov     dword ptr [ebp+8], 0FFFFFFFFh
.text:004016E9                 mov     edx, [edi+4]
.text:004016EC                 mov     dword ptr [ebp+0Ch], 0FFFFFFFFh
.text:004016F3                 mov     [ebp+4], edx
.text:004016F6                 mov     [esp+2Ch+var_28], ebx
.text:004016FA                 mov     [esp+2Ch+var_2C], ebp
.text:004016FD                 call    sub_401460
.text:00401702                 mov     [esp+2Ch+var_14], eax
.text:00401706                 jmp     loc_401524
.text:0040170B ; ---------------------------------------------------------------------------
.text:0040170B
.text:0040170B def_4014B8:                             ; CODE XREF: sub_401460+52↑j
.text:0040170B                 call    abort           ; jumptable 004014B8 default case
.text:0040170B sub_401460      endp
.text:0040170B
.text:0040170B ; ---------------------------------------------------------------------------
.text:00401710 ; const char Locale
.text:00401710 Locale          db 0                    ; DATA XREF: sub_402390+2C↓o
.text:00401711 ; ---------------------------------------------------------------------------
.text:00401711                 jmp     short loc_401720
.text:00401711 ; ---------------------------------------------------------------------------
.text:00401713                 align 10h
.text:00401720
.text:00401720 loc_401720:                             ; CODE XREF: .text:00401711↑j
.text:00401720                                         ; DATA XREF: sub_402390+46↓o
.text:00401720                 arpl    [edx], di
.text:00401722                 das
.text:00401723                 jo      short near ptr a530+3 ; ".0"
.text:00401725                 outsd
.text:00401726                 db      67h
.text:00401726                 jb      near ptr aJimMeyering+3 ; " Meyering"
.text:00401729                 jle     short near ptr algn_401754+8
.text:0040172B                 das
.text:0040172C                 inc     ebx
.text:0040172D                 outsd
.text:0040172E                 jb      short near ptr a530+1 ; ".3.0"
.text:00401730                 push    ebp
.text:00401731                 jz      short near ptr aGnuCoreutils+2 ; "U coreutils"
.text:00401733                 insb
.text:00401734                 jnb     short near ptr aTrySHelpForMor+5 ; "%s --help' for more information.\n"
.text:00401736                 jnb     short near ptr aGnuCoreutils+6 ; "reutils"
.text:00401738                 popa
.text:00401739                 jb      short near ptr aGnuCoreutils+6 ; "reutils"
.text:0040173B                 das
.text:0040173C                 insb
.text:0040173D                 outsd
.text:0040173E                 arpl    [ecx+6Ch], sp
.text:0040173E ; ---------------------------------------------------------------------------
.text:00401741                 db 65h, 0
.text:00401743 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_402390+4E↓o
.text:00401743                                         ; sub_402390+5B↓o
.text:0040174D aCcdst          db '+cCdst',0           ; DATA XREF: sub_402390+90↓o
.text:00401754 algn_401754:                            ; CODE XREF: .text:00401729↑j
.text:00401754                 align 10h
.text:00401760 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401760                                         ; CODE XREF: .text:00401734↑j
.text:00401760                                         ; DATA XREF: sub_402390:loc_40246B↓o ...
.text:00401787 aJimMeyering    db 'Jim Meyering',0     ; CODE XREF: .text:00401726↑j
.text:00401787                                         ; DATA XREF: sub_402390+128↓o
.text:00401794 a530            db '5.3.0',0            ; CODE XREF: .text:0040172E↑j
.text:00401794                                         ; .text:00401723↑j
.text:00401794                                         ; DATA XREF: ...
.text:0040179A aGnuCoreutils   db 'GNU coreutils',0    ; CODE XREF: .text:00401731↑j
.text:0040179A                                         ; .text:00401736↑j ...
.text:004017A8 ; const FILE stru_4017A8
.text:004017A8 stru_4017A8     FILE <90007274h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:004017A8                                         ; DATA XREF: sub_402390+143↓o
.text:004017A8                       90909090h, 67617355h, 25203A65h>
.text:004017C8                 db  73h ; s
.text:004017C9                 db  20h
.text:004017CA                 db  5Bh ; [
.text:004017CB                 db  4Fh ; O
.text:004017CC                 db  50h ; P
.text:004017CD                 db  54h ; T
.text:004017CE                 db  49h ; I
.text:004017CF                 db  4Fh ; O
.text:004017D0                 db  4Eh ; N
.text:004017D1                 db  5Dh ; ]
.text:004017D2                 db  2Eh ; .
.text:004017D3                 db  2Eh ; .
.text:004017D4                 db  2Eh ; .
.text:004017D5                 db  20h
.text:004017D6                 db  53h ; S
.text:004017D7                 db  45h ; E
.text:004017D8                 db  54h ; T
.text:004017D9                 db  31h ; 1
.text:004017DA                 db  20h
.text:004017DB                 db  5Bh ; [
.text:004017DC                 db  53h ; S
.text:004017DD                 db  45h ; E
.text:004017DE                 db  54h ; T
.text:004017DF                 db  32h ; 2
.text:004017E0                 db  5Dh ; ]
.text:004017E1                 db  0Ah
.text:004017E2                 db    0
.text:004017E3                 align 20h
.text:00401800 aTranslateSquee db 'Translate, squeeze, and/or delete characters from standard input,'
.text:00401800                                         ; DATA XREF: sub_402390+17B↓o
.text:00401800                                         ; .text:0040314F↓o
.text:00401800                 db 0Ah
.text:00401800                 db 'writing to standard output.',0Ah
.text:00401800                 db 0Ah
.text:00401800                 db '  -c, -C, --complement    first complement SET1',0Ah
.text:00401800                 db '  -d, --delete            delete characters in SET1, do not trans'
.text:00401800                 db 'late',0Ah
.text:00401800                 db '  -s, --squeeze-repeats   replace each input sequence of a repeat'
.text:00401800                 db 'ed character',0Ah
.text:00401800                 db '                            that is listed in SET1 with a single '
.text:00401800                 db 'occurrence',0Ah
.text:00401800                 db '                            of that character',0Ah
.text:00401800                 db '  -t, --truncate-set1     first truncate SET1 to length of SET2',0Ah
.text:00401800                 db 0
.text:004019DE                 align 10h
.text:004019E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004019E0                                         ; DATA XREF: sub_402390+19D↓o
.text:004019E0                                         ; .text:00403171↓o
.text:00401A0D                 align 20h
.text:00401A20 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401A20                                         ; DATA XREF: sub_402390+1BF↓o
.text:00401A20                                         ; .text:00403193↓o
.text:00401A56                 align 10h
.text:00401A60 aSetsAreSpecifi db 0Ah                  ; DATA XREF: sub_402390+1E1↓o
.text:00401A60                                         ; .text:004031B5↓o
.text:00401A60                 db 'SETs are specified as strings of characters.  Most represent them'
.text:00401A60                 db 'selves.',0Ah
.text:00401A60                 db 'Interpreted sequences are:',0Ah
.text:00401A60                 db 0Ah
.text:00401A60                 db '  \NNN            character with octal value NNN (1 to 3 octal di'
.text:00401A60                 db 'gits)',0Ah
.text:00401A60                 db '  \\              backslash',0Ah
.text:00401A60                 db '  \a              audible BEL',0Ah
.text:00401A60                 db '  \b              backspace',0Ah
.text:00401A60                 db '  \f              form feed',0Ah
.text:00401A60                 db '  \n              new line',0Ah
.text:00401A60                 db '  \r              return',0Ah
.text:00401A60                 db '  \t              horizontal tab',0Ah,0
.text:00401BD5                 align 10h
.text:00401BE0 aVVerticalTabCh db '  \v              vertical tab',0Ah
.text:00401BE0                                         ; DATA XREF: sub_402390+203↓o
.text:00401BE0                                         ; .text:004031D7↓o
.text:00401BE0                 db '  CHAR1-CHAR2     all characters from CHAR1 to CHAR2 in ascending'
.text:00401BE0                 db ' order',0Ah
.text:00401BE0                 db '  [CHAR*]         in SET2, copies of CHAR until length of SET1',0Ah
.text:00401BE0                 db '  [CHAR*REPEAT]   REPEAT copies of CHAR, REPEAT octal if starting'
.text:00401BE0                 db ' with 0',0Ah
.text:00401BE0                 db '  [:alnum:]       all letters and digits',0Ah
.text:00401BE0                 db '  [:alpha:]       all letters',0Ah
.text:00401BE0                 db '  [:blank:]       all horizontal whitespace',0Ah
.text:00401BE0                 db '  [:cntrl:]       all control characters',0Ah
.text:00401BE0                 db '  [:digit:]       all digits',0Ah,0
.text:00401D89                 align 20h
.text:00401DA0 aGraphAllPrinta db '  [:graph:]       all printable characters, not including space',0Ah
.text:00401DA0                                         ; DATA XREF: sub_402390+225↓o
.text:00401DA0                                         ; .text:004031F9↓o
.text:00401DA0                 db '  [:lower:]       all lower case letters',0Ah
.text:00401DA0                 db '  [:print:]       all printable characters, including space',0Ah
.text:00401DA0                 db '  [:punct:]       all punctuation characters',0Ah
.text:00401DA0                 db '  [:space:]       all horizontal or vertical whitespace',0Ah
.text:00401DA0                 db '  [:upper:]       all upper case letters',0Ah
.text:00401DA0                 db '  [:xdigit:]      all hexadecimal digits',0Ah
.text:00401DA0                 db '  [=CHAR=]        all characters which are equivalent to CHAR',0Ah
.text:00401DA0                 db 0
.text:00401F3B                 align 10h
.text:00401F40 aTranslationOcc db 0Ah                  ; DATA XREF: sub_402390+247↓o
.text:00401F40                                         ; .text:0040321B↓o
.text:00401F40                 db 'Translation occurs if -d is not given and both SET1 and SET2 appe'
.text:00401F40                 db 'ar.',0Ah
.text:00401F40                 db '-t may be used only when translating.  SET2 is extended to length'
.text:00401F40                 db ' of',0Ah
.text:00401F40                 db 'SET1 by repeating its last character as necessary.  ',0
.text:00402000 aExcessCharacte db 'Excess characters',0Ah
.text:00402000                                         ; DATA XREF: sub_402390+269↓o
.text:00402000                                         ; .text:0040323D↓o
.text:00402000                 db 'of SET2 are ignored.  Only [:lower:] and [:upper:] are guaranteed'
.text:00402000                 db ' to',0Ah
.text:00402000                 db 'expand in ascending order; used in SET2 while translating, they m'
.text:00402000                 db 'ay',0Ah
.text:00402000                 db 'only be used in pairs to specify case conversion.  ',0
.text:004020CF                 align 20h
.text:004020E0 aSUsesSet1IfNot db '-s uses SET1 if not',0Ah
.text:004020E0                                         ; DATA XREF: sub_402390+28B↓o
.text:004020E0                                         ; .text:0040325F↓o
.text:004020E0                 db 'translating nor deleting; else squeezing uses SET2 and occurs aft'
.text:004020E0                 db 'er',0Ah
.text:004020E0                 db 'translation or deletion.',0Ah,0
.text:00402152 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_402390+2AD↓o
.text:00402152                                         ; .text:00403281↓o
.text:00402152                 db 'Report bugs to <%s>.',0Ah,0
.text:00402169 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00402169                                         ; DATA XREF: sub_402390+2BA↓o
.text:00402169                                         ; .text:0040328E↓o
.text:0040217F aStandardInput  db 'standard input',0   ; DATA XREF: sub_402390+572↓o
.text:0040218E aWriteError     db 'write error',0      ; DATA XREF: sub_402390+614↓o
.text:0040218E                                         ; sub_402390+A8D↓o ...
.text:0040219A aReadError      db 'read error',0       ; DATA XREF: sub_402390:loc_4029D3↓o
.text:0040219A                                         ; sub_402390:loc_402E4C↓o ...
.text:004021A5                 align 20h
.text:004021C0 aGetNextS2Null1 db 'get_next (s2, NULL) == -1 || truncate_set1',0
.text:004021C0                                         ; DATA XREF: sub_402390+682↓o
.text:004021EB aCh1TruncateSet db 'ch != -1 || truncate_set1',0
.text:004021EB                                         ; DATA XREF: sub_402390+6D3↓o
.text:00402205 aC11TruncateSet db 'c1 == -1 || truncate_set1',0
.text:00402205                                         ; DATA XREF: sub_402390+7CF↓o
.text:0040221F                 align 10h
.text:00402220 aMisalignedUppe db 'misaligned [:upper:] and/or [:lower:] construct',0
.text:00402220                                         ; DATA XREF: sub_402390:loc_402C41↓o
.text:00402250 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_402390+C5C↓o
.text:00402261                 align 20h
.text:00402280 aOnlyOneStringM db 'Only one string may be given when deleting without squeezing repe'
.text:00402280                                         ; DATA XREF: sub_402390+C90↓o
.text:00402280                 db 'ats.',0
.text:004022C6 ; const char Format[]
.text:004022C6 Format          db '%s',0Ah,0           ; DATA XREF: sub_402390+C9D↓o
.text:004022CA aMissingOperand db 'missing operand',0  ; DATA XREF: sub_402390+CC4↓o
.text:004022DA aMissingOperand_0 db 'missing operand after %s',0
.text:004022DA                                         ; DATA XREF: sub_402390+CFA↓o
.text:004022F3                 align 10h
.text:00402300 aTwoStringsMust db 'Two strings must be given when both deleting and squeezing repeat'
.text:00402300                                         ; DATA XREF: sub_402390+D2E↓o
.text:00402300                 db 's.',0
.text:00402344                 align 20h
.text:00402360 aTwoStringsMust_0 db 'Two strings must be given when translating.',0
.text:00402360                                         ; DATA XREF: sub_402390:loc_4030CB↓o
.text:0040238C                 align 10h
.text:00402390
.text:00402390 ; =============== S U B R O U T I N E =======================================
.text:00402390
.text:00402390 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00402390
.text:00402390 sub_402390      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00402390
.text:00402390 Category        = dword ptr -0D8h
.text:00402390 Locale          = dword ptr -0D4h
.text:00402390 ElementCount    = dword ptr -0D0h
.text:00402390 Stream          = dword ptr -0CCh
.text:00402390 var_C8          = byte ptr -0C8h
.text:00402390 var_C4          = dword ptr -0C4h
.text:00402390 var_AB          = byte ptr -0ABh
.text:00402390 var_AA          = byte ptr -0AAh
.text:00402390 var_A9          = byte ptr -0A9h
.text:00402390 var_A8          = dword ptr -0A8h
.text:00402390 var_A4          = dword ptr -0A4h
.text:00402390 var_A0          = dword ptr -0A0h
.text:00402390 var_9C          = dword ptr -9Ch
.text:00402390 var_98          = dword ptr -98h
.text:00402390 var_94          = dword ptr -94h
.text:00402390 Block           = dword ptr -88h
.text:00402390 var_84          = dword ptr -84h
.text:00402390 var_78          = byte ptr -78h
.text:00402390 var_48          = dword ptr -48h
.text:00402390 var_44          = dword ptr -44h
.text:00402390 var_40          = dword ptr -40h
.text:00402390 var_3C          = dword ptr -3Ch
.text:00402390 arg_0           = dword ptr  8
.text:00402390 arg_4           = dword ptr  0Ch
.text:00402390
.text:00402390                 push    ebp
.text:00402391                 xor     eax, eax
.text:00402393                 mov     ebp, esp
.text:00402395                 push    edi
.text:00402396                 push    esi
.text:00402397                 push    ebx
.text:00402398                 sub     esp, 0CCh
.text:0040239E                 mov     esi, [ebp+arg_4]
.text:004023A1                 and     esp, 0FFFFFFF0h
.text:004023A4                 mov     ebx, [ebp+arg_0]
.text:004023A7                 call    __alloca
.text:004023AC                 call    sub_409010
.text:004023B1                 lea     edx, [ebp+var_78]
.text:004023B4                 mov     [ebp+var_A4], edx
.text:004023BA                 mov     edx, [esi]
.text:004023BC                 mov     [esp+0D8h+Locale], offset Locale ; Locale
.text:004023C4                 mov     [esp+0D8h+Category], 0 ; Category
.text:004023CB                 mov     ds:dword_40B6E0, edx
.text:004023D1                 call    setlocale
.text:004023D6                 mov     [esp+0D8h+Locale], offset loc_401720
.text:004023DE                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:004023E5                 call    ds:__imp_libintl_bindtextdomain
.text:004023EB                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:004023F2                 call    ds:libintl_textdomain
.text:004023F8                 mov     [esp+0D8h+Category], offset sub_4066F0 ; void (__cdecl *)()
.text:004023FF                 call    sub_401040
.text:00402404                 lea     esi, [esi+0]
.text:0040240A                 lea     edi, [edi+0]
.text:00402410
.text:00402410 loc_402410:                             ; CODE XREF: sub_402390+D9↓j
.text:00402410                                         ; sub_402390+2EA↓j ...
.text:00402410                 mov     dword ptr [esp+0D8h+var_C8], 0
.text:00402418                 mov     [esp+0D8h+Stream], offset off_401360 ; char
.text:00402420                 mov     [esp+0D8h+ElementCount], offset aCcdst ; "+cCdst"
.text:00402428                 mov     [esp+0D8h+Locale], esi
.text:0040242C                 mov     [esp+0D8h+Category], ebx
.text:0040242F                 call    sub_406580
.text:00402434                 cmp     eax, 0FFFFFFFFh
.text:00402437                 jz      loc_4026A0
.text:0040243D                 cmp     eax, 63h ; 'c'
.text:00402440                 jz      short loc_402462
.text:00402442                 cmp     eax, 63h ; 'c'
.text:00402445                 jg      loc_402660
.text:0040244B                 cmp     eax, 0FFFFFF7Eh
.text:00402450                 jz      loc_4024EC
.text:00402456                 cmp     eax, 0FFFFFF7Eh
.text:0040245B                 jle     short loc_4024A3
.text:0040245D                 cmp     eax, 43h ; 'C'
.text:00402460                 jnz     short loc_40246B
.text:00402462
.text:00402462 loc_402462:                             ; CODE XREF: sub_402390+B0↑j
.text:00402462                 mov     ds:byte_40B020, 1
.text:00402469                 jmp     short loc_402410
.text:0040246B ; ---------------------------------------------------------------------------
.text:0040246B
.text:0040246B loc_40246B:                             ; CODE XREF: sub_402390+D0↑j
.text:0040246B                                         ; sub_402390+118↓j ...
.text:0040246B                 mov     [esp+0D8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402472                 call    ds:libintl_gettext
.text:00402478                 mov     edi, ds:_iob
.text:0040247E                 mov     esi, ds:dword_40B6E0
.text:00402484                 add     edi, 40h ; '@'
.text:00402487                 mov     [esp+0D8h+ElementCount], esi
.text:0040248B                 mov     [esp+0D8h+Locale], eax ; Format
.text:0040248F                 mov     [esp+0D8h+Category], edi ; Stream
.text:00402492                 call    fprintf
.text:00402497
.text:00402497 loc_402497:                             ; CODE XREF: sub_402390+3D1↓j
.text:00402497                                         ; sub_402390+C02↓j
.text:00402497                 mov     [esp+0D8h+Category], 1 ; Code
.text:0040249E
.text:0040249E loc_40249E:                             ; CODE XREF: sub_402390+15A↓j
.text:0040249E                 call    exit
.text:004024A3 ; ---------------------------------------------------------------------------
.text:004024A3
.text:004024A3 loc_4024A3:                             ; CODE XREF: sub_402390+CB↑j
.text:004024A3                 cmp     eax, 0FFFFFF7Dh
.text:004024A8                 jnz     short loc_40246B
.text:004024AA                 mov     [esp+0D8h+var_C4], 0
.text:004024B2                 mov     edx, ds:_iob
.text:004024B8                 mov     dword ptr [esp+0D8h+var_C8], offset aJimMeyering ; "Jim Meyering"
.text:004024C0                 mov     [esp+0D8h+Stream], offset a530 ; "5.3.0"
.text:004024C8                 add     edx, 20h ; ' '
.text:004024CB                 mov     [esp+0D8h+ElementCount], offset aGnuCoreutils ; "GNU coreutils"
.text:004024D3                 mov     [esp+0D8h+Locale], offset stru_4017A8 ; FILE *
.text:004024DB                 mov     [esp+0D8h+Category], edx ; FILE *
.text:004024DE                 call    sub_406540
.text:004024E3
.text:004024E3 loc_4024E3:                             ; CODE XREF: sub_402390+2CA↓j
.text:004024E3                                         ; sub_402390+56C↓j ...
.text:004024E3                 mov     [esp+0D8h+Category], 0
.text:004024EA                 jmp     short loc_40249E
.text:004024EC ; ---------------------------------------------------------------------------
.text:004024EC
.text:004024EC loc_4024EC:                             ; CODE XREF: sub_402390+C0↑j
.text:004024EC                 mov     [esp+0D8h+Category], offset stru_4017A8._bufsiz
.text:004024F3                 call    ds:libintl_gettext
.text:004024F9                 mov     ebx, ds:dword_40B6E0
.text:004024FF                 mov     [esp+0D8h+Category], eax ; Format
.text:00402502                 mov     [esp+0D8h+Locale], ebx
.text:00402506                 call    printf
.text:0040250B                 mov     [esp+0D8h+Category], offset aTranslateSquee ; "Translate, squeeze, and/or delete chara"...
.text:00402512                 call    ds:libintl_gettext
.text:00402518                 mov     ecx, ds:_iob
.text:0040251E                 add     ecx, 20h ; ' '
.text:00402521                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:00402525                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402528                 call    fputs
.text:0040252D                 mov     [esp+0D8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402534                 call    ds:libintl_gettext
.text:0040253A                 mov     edi, ds:_iob
.text:00402540                 add     edi, 20h ; ' '
.text:00402543                 mov     [esp+0D8h+Locale], edi ; Stream
.text:00402547                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040254A                 call    fputs
.text:0040254F                 mov     [esp+0D8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402556                 call    ds:libintl_gettext
.text:0040255C                 mov     esi, ds:_iob
.text:00402562                 add     esi, 20h ; ' '
.text:00402565                 mov     [esp+0D8h+Locale], esi ; Stream
.text:00402569                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040256C                 call    fputs
.text:00402571                 mov     [esp+0D8h+Category], offset aSetsAreSpecifi ; "\nSETs are specified as strings of char"...
.text:00402578                 call    ds:libintl_gettext
.text:0040257E                 mov     ebx, ds:_iob
.text:00402584                 add     ebx, 20h ; ' '
.text:00402587                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:0040258B                 mov     [esp+0D8h+Category], eax ; Buffer
.text:0040258E                 call    fputs
.text:00402593                 mov     [esp+0D8h+Category], offset aVVerticalTabCh ; "  \\v              vertical tab\n  CHAR"...
.text:0040259A                 call    ds:libintl_gettext
.text:004025A0                 mov     ecx, ds:_iob
.text:004025A6                 add     ecx, 20h ; ' '
.text:004025A9                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:004025AD                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004025B0                 call    fputs
.text:004025B5                 mov     [esp+0D8h+Category], offset aGraphAllPrinta ; "  [:graph:]       all printable charact"...
.text:004025BC                 call    ds:libintl_gettext
.text:004025C2                 mov     edi, ds:_iob
.text:004025C8                 add     edi, 20h ; ' '
.text:004025CB                 mov     [esp+0D8h+Locale], edi ; Stream
.text:004025CF                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004025D2                 call    fputs
.text:004025D7                 mov     [esp+0D8h+Category], offset aTranslationOcc ; "\nTranslation occurs if -d is not given"...
.text:004025DE                 call    ds:libintl_gettext
.text:004025E4                 mov     esi, ds:_iob
.text:004025EA                 add     esi, 20h ; ' '
.text:004025ED                 mov     [esp+0D8h+Locale], esi ; Stream
.text:004025F1                 mov     [esp+0D8h+Category], eax ; Buffer
.text:004025F4                 call    fputs
.text:004025F9                 mov     [esp+0D8h+Category], offset aExcessCharacte ; "Excess characters\nof SET2 are ignored."...
.text:00402600                 call    ds:libintl_gettext
.text:00402606                 mov     ebx, ds:_iob
.text:0040260C                 add     ebx, 20h ; ' '
.text:0040260F                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00402613                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402616                 call    fputs
.text:0040261B                 mov     [esp+0D8h+Category], offset aSUsesSet1IfNot ; "-s uses SET1 if not\ntranslating nor de"...
.text:00402622                 call    ds:libintl_gettext
.text:00402628                 mov     ecx, ds:_iob
.text:0040262E                 add     ecx, 20h ; ' '
.text:00402631                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:00402635                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00402638                 call    fputs
.text:0040263D                 mov     [esp+0D8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402644                 call    ds:libintl_gettext
.text:0040264A                 mov     [esp+0D8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402652                 mov     [esp+0D8h+Category], eax ; Format
.text:00402655                 call    printf
.text:0040265A                 jmp     loc_4024E3
.text:0040265A ; ---------------------------------------------------------------------------
.text:0040265F                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402390+B5↑j
.text:00402660                 cmp     eax, 73h ; 's'
.text:00402663                 jz      short loc_402694
.text:00402665                 cmp     eax, 73h ; 's'
.text:00402668                 jg      short loc_40267F
.text:0040266A                 cmp     eax, 64h ; 'd'
.text:0040266D                 jnz     loc_40246B
.text:00402673                 mov     ds:byte_40B010, 1
.text:0040267A                 jmp     loc_402410
.text:0040267F ; ---------------------------------------------------------------------------
.text:0040267F
.text:0040267F loc_40267F:                             ; CODE XREF: sub_402390+2D8↑j
.text:0040267F                 cmp     eax, 74h ; 't'
.text:00402682                 jnz     loc_40246B
.text:00402688                 mov     ds:byte_40B030, 1
.text:0040268F                 jmp     loc_402410
.text:00402694 ; ---------------------------------------------------------------------------
.text:00402694
.text:00402694 loc_402694:                             ; CODE XREF: sub_402390+2D3↑j
.text:00402694                 mov     ds:byte_40B000, 1
.text:0040269B                 jmp     loc_402410
.text:004026A0 ; ---------------------------------------------------------------------------
.text:004026A0
.text:004026A0 loc_4026A0:                             ; CODE XREF: sub_402390+A7↑j
.text:004026A0                 mov     eax, dword_40A010
.text:004026A5                 mov     edi, ebx
.text:004026A7                 sub     edi, eax
.text:004026A9                 mov     [ebp+var_A8], eax
.text:004026AF                 xor     eax, eax
.text:004026B1                 cmp     edi, 2
.text:004026B4                 jz      loc_4030D2
.text:004026BA                 movzx   ecx, ds:byte_40B010
.text:004026C1                 mov     [ebp+var_AB], cl
.text:004026C7
.text:004026C7 loc_4026C7:                             ; CODE XREF: sub_402390+D51↓j
.text:004026C7                                         ; sub_402390+D59↓j
.text:004026C7                 movzx   ecx, ds:byte_40B000
.text:004026CE                 xor     edx, edx
.text:004026D0                 mov     ds:byte_40B040, al
.text:004026D5                 cmp     [ebp+var_AB], cl
.text:004026DB                 setz    dl
.text:004026DE                 xor     eax, eax
.text:004026E0                 inc     edx
.text:004026E1                 cmp     [ebp+var_AB], cl
.text:004026E7                 setbe   al
.text:004026EA                 inc     eax
.text:004026EB                 cmp     edi, edx
.text:004026ED                 jl      loc_403050
.text:004026F3                 cmp     eax, edi
.text:004026F5                 jl      loc_402FD9
.text:004026FB                 mov     [esp+0D8h+Category], 18h ; size_t
.text:00402702                 call    sub_407580
.text:00402707                 mov     [ebp+var_44], eax
.text:0040270A                 mov     ebx, dword_40A010
.text:00402710                 mov     [ebp+var_48], eax
.text:00402713                 mov     dword ptr [eax+4], 0
.text:0040271A                 mov     edx, [esi+ebx*4]
.text:0040271D                 lea     ebx, [ebp+Block]
.text:00402723                 mov     [ebp+var_A9], 0
.text:0040272A                 mov     [esp+0D8h+Locale], ebx ; int
.text:0040272E                 mov     [esp+0D8h+Category], edx ; char *
.text:00402731                 call    sub_4035F0
.text:00402736                 test    al, al
.text:00402738                 jnz     loc_402FB6
.text:0040273E
.text:0040273E loc_40273E:                             ; CODE XREF: sub_402390+C37↓j
.text:0040273E                                         ; sub_402390+C44↓j
.text:0040273E                 mov     ebx, [ebp+Block]
.text:00402744                 mov     [esp+0D8h+Category], ebx ; Block
.text:00402747                 call    free
.text:0040274C                 mov     edx, [ebp+var_84]
.text:00402752                 mov     [esp+0D8h+Category], edx ; Block
.text:00402755                 call    free
.text:0040275A                 cmp     [ebp+var_A9], 0
.text:00402761                 jz      loc_402497
.text:00402767                 cmp     edi, 2
.text:0040276A                 jz      loc_402F24
.text:00402770                 xor     eax, eax
.text:00402772                 mov     [ebp+var_A4], eax
.text:00402778
.text:00402778 loc_402778:                             ; CODE XREF: sub_402390+BFC↓j
.text:00402778                 mov     esi, [ebp+var_A4]
.text:0040277E                 lea     ebx, [ebp+var_48]
.text:00402781                 mov     [esp+0D8h+Category], ebx
.text:00402784                 mov     [esp+0D8h+Locale], esi
.text:00402788                 call    sub_404260
.text:0040278D                 mov     [esp+0D8h+Category], 0 ; FileHandle
.text:00402794                 call    _isatty
.text:00402799                 test    eax, eax
.text:0040279B                 jz      loc_402EE3
.text:004027A1
.text:004027A1 loc_4027A1:                             ; CODE XREF: sub_402390+B75↓j
.text:004027A1                                         ; sub_402390+B8F↓j
.text:004027A1                 movzx   edx, ds:byte_40B000
.text:004027A8                 test    dl, dl
.text:004027AA                 jz      short loc_4027B5
.text:004027AC                 cmp     edi, 1
.text:004027AF                 jz      loc_402E7B
.text:004027B5
.text:004027B5 loc_4027B5:                             ; CODE XREF: sub_402390+41A↑j
.text:004027B5                 movzx   eax, ds:byte_40B010
.text:004027BC                 test    al, al
.text:004027BE                 jz      short loc_4027C9
.text:004027C0                 cmp     edi, 1
.text:004027C3                 jz      loc_402D08
.text:004027C9
.text:004027C9 loc_4027C9:                             ; CODE XREF: sub_402390+42E↑j
.text:004027C9                 test    dl, dl
.text:004027CB                 jz      short loc_4027DA
.text:004027CD                 test    al, al
.text:004027CF                 jz      short loc_4027DA
.text:004027D1                 cmp     edi, 2
.text:004027D4                 jz      loc_402C71
.text:004027DA
.text:004027DA loc_4027DA:                             ; CODE XREF: sub_402390+43B↑j
.text:004027DA                                         ; sub_402390+43F↑j
.text:004027DA                 cmp     ds:byte_40B040, 0
.text:004027E1                 jz      loc_4028EE
.text:004027E7                 cmp     ds:byte_40B020, 0
.text:004027EE                 jz      loc_402A70
.text:004027F4                 mov     [ebp+var_40], 0FFFFFFFEh
.text:004027FB                 mov     [ebp+var_3C], 0FFFFFFFFh
.text:00402802
.text:00402802 loc_402802:                             ; CODE XREF: sub_402390+491↓j
.text:00402802                 mov     [esp+0D8h+Locale], 0
.text:0040280A                 lea     edx, [ebp+var_48]
.text:0040280D                 mov     [esp+0D8h+Category], edx
.text:00402810                 call    sub_401460
.text:00402815                 cmp     eax, 0FFFFFFFFh
.text:00402818                 jz      short loc_402823
.text:0040281A                 mov     ds:byte_40B350[eax], 1
.text:00402821                 jmp     short loc_402802
.text:00402823 ; ---------------------------------------------------------------------------
.text:00402823
.text:00402823 loc_402823:                             ; CODE XREF: sub_402390+488↑j
.text:00402823                 mov     ecx, [ebp+var_A4]
.text:00402829                 xor     ebx, ebx
.text:0040282B                 mov     dword ptr [ecx+8], 0FFFFFFFEh
.text:00402832                 mov     dword ptr [ecx+0Ch], 0FFFFFFFFh
.text:00402839                 lea     esi, [esi+0]
.text:00402840
.text:00402840 loc_402840:                             ; CODE XREF: sub_402390+4BD↓j
.text:00402840                 mov     ds:byte_40B450[ebx], bl
.text:00402846                 inc     ebx
.text:00402847                 cmp     ebx, 0FFh
.text:0040284D                 jle     short loc_402840
.text:0040284F                 xor     ebx, ebx
.text:00402851
.text:00402851 loc_402851:                             ; CODE XREF: sub_402390+4D5↓j
.text:00402851                 cmp     ds:byte_40B350[ebx], 0
.text:00402858                 jz      loc_402A20
.text:0040285E
.text:0040285E loc_40285E:                             ; CODE XREF: sub_402390+6B1↓j
.text:0040285E                 inc     ebx
.text:0040285F                 cmp     ebx, 0FFh
.text:00402865                 jle     short loc_402851
.text:00402867
.text:00402867 loc_402867:                             ; CODE XREF: sub_402390+6BD↓j
.text:00402867                 mov     [esp+0D8h+Locale], 0
.text:0040286F                 mov     eax, [ebp+var_A4]
.text:00402875                 mov     [esp+0D8h+Category], eax
.text:00402878                 call    sub_401460
.text:0040287D                 inc     eax
.text:0040287E                 jz      short loc_40288D
.text:00402880                 cmp     ds:byte_40B030, 0
.text:00402887                 jz      loc_402A02
.text:0040288D
.text:0040288D loc_40288D:                             ; CODE XREF: sub_402390+4EE↑j
.text:0040288D                                         ; sub_402390+79C↓j ...
.text:0040288D                 cmp     ds:byte_40B000, 0
.text:00402894                 jz      loc_402931
.text:0040289A                 mov     edi, [ebp+var_A4]
.text:004028A0                 mov     dword ptr [edi+8], 0FFFFFFFEh
.text:004028A7                 mov     dword ptr [edi+0Ch], 0FFFFFFFFh
.text:004028AE
.text:004028AE loc_4028AE:                             ; CODE XREF: sub_402390+540↓j
.text:004028AE                 mov     [esp+0D8h+Locale], 0
.text:004028B6                 mov     ebx, [ebp+var_A4]
.text:004028BC                 mov     [esp+0D8h+Category], ebx
.text:004028BF                 call    sub_401460
.text:004028C4                 cmp     eax, 0FFFFFFFFh
.text:004028C7                 jz      short loc_4028D2
.text:004028C9                 mov     ds:byte_40B250[eax], 1
.text:004028D0                 jmp     short loc_4028AE
.text:004028D2 ; ---------------------------------------------------------------------------
.text:004028D2
.text:004028D2 loc_4028D2:                             ; CODE XREF: sub_402390+537↑j
.text:004028D2                 mov     [esp+0D8h+ElementCount], offset sub_404830
.text:004028DA
.text:004028DA loc_4028DA:                             ; CODE XREF: sub_402390+973↓j
.text:004028DA                                         ; sub_402390+B4E↓j
.text:004028DA                 mov     [esp+0D8h+Locale], 200h
.text:004028E2                 mov     [esp+0D8h+Category], offset byte_40B050
.text:004028E9                 call    sub_4045A0
.text:004028EE
.text:004028EE loc_4028EE:                             ; CODE XREF: sub_402390+451↑j
.text:004028EE                                         ; sub_402390+5E5↓j ...
.text:004028EE                 mov     [esp+0D8h+Category], 0 ; FileHandle
.text:004028F5                 call    _close
.text:004028FA                 test    eax, eax
.text:004028FC                 jz      loc_4024E3
.text:00402902                 mov     [esp+0D8h+Category], offset aStandardInput ; "standard input"
.text:00402909                 call    ds:libintl_gettext
.text:0040290F                 mov     esi, eax
.text:00402911                 call    _errno
.text:00402916                 mov     [esp+0D8h+ElementCount], esi ; char *
.text:0040291A                 mov     ebx, [eax]
.text:0040291C                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402923                 mov     [esp+0D8h+Locale], ebx ; ErrorMessage
.text:00402927                 call    sub_408C60
.text:0040292C                 jmp     loc_4024E3
.text:00402931 ; ---------------------------------------------------------------------------
.text:00402931
.text:00402931 loc_402931:                             ; CODE XREF: sub_402390+504↑j
.text:00402931                                         ; sub_402390+612↓j ...
.text:00402931                 mov     [esp+0D8h+ElementCount], 200h
.text:00402939                 mov     [esp+0D8h+Locale], offset byte_40B050
.text:00402941                 mov     [esp+0D8h+Category], 0
.text:00402948                 call    sub_4067D0
.text:0040294D                 cmp     eax, 0FFFFFFFFh
.text:00402950                 mov     esi, eax
.text:00402952                 jz      short loc_4029D3
.text:00402954
.text:00402954 loc_402954:                             ; CODE XREF: sub_402390+66D↓j
.text:00402954                 xor     edx, edx
.text:00402956                 cmp     edx, esi
.text:00402958                 jnb     short loc_402973
.text:0040295A
.text:0040295A loc_40295A:                             ; CODE XREF: sub_402390+5E1↓j
.text:0040295A                 movzx   ecx, ds:byte_40B050[edx]
.text:00402961                 movzx   ebx, ds:byte_40B450[ecx]
.text:00402968                 mov     ds:byte_40B050[edx], bl
.text:0040296E                 inc     edx
.text:0040296F                 cmp     edx, esi
.text:00402971                 jb      short loc_40295A
.text:00402973
.text:00402973 loc_402973:                             ; CODE XREF: sub_402390+5C8↑j
.text:00402973                 test    esi, esi
.text:00402975                 jz      loc_4028EE
.text:0040297B                 mov     [esp+0D8h+ElementCount], esi ; ElementCount
.text:0040297F                 mov     edx, ds:_iob
.text:00402985                 mov     [esp+0D8h+Locale], 1 ; ElementSize
.text:0040298D                 mov     [esp+0D8h+Category], offset byte_40B050 ; Buffer
.text:00402994                 add     edx, 20h ; ' '
.text:00402997                 mov     [esp+0D8h+Stream], edx ; char
.text:0040299B                 call    fwrite
.text:004029A0                 cmp     eax, esi
.text:004029A2                 jz      short loc_402931
.text:004029A4                 mov     [esp+0D8h+Category], offset aWriteError ; "write error"
.text:004029AB                 call    ds:libintl_gettext
.text:004029B1                 mov     edi, eax
.text:004029B3                 call    _errno
.text:004029B8                 mov     [esp+0D8h+ElementCount], edi ; char *
.text:004029BC                 mov     esi, [eax]
.text:004029BE                 mov     [esp+0D8h+Category], 1 ; Code
.text:004029C5                 mov     [esp+0D8h+Locale], esi ; ErrorMessage
.text:004029C9                 call    sub_408C60
.text:004029CE                 jmp     loc_402931
.text:004029D3 ; ---------------------------------------------------------------------------
.text:004029D3
.text:004029D3 loc_4029D3:                             ; CODE XREF: sub_402390+5C2↑j
.text:004029D3                 mov     [esp+0D8h+Category], offset aReadError ; "read error"
.text:004029DA                 call    ds:libintl_gettext
.text:004029E0                 mov     edi, eax
.text:004029E2                 call    _errno
.text:004029E7                 mov     [esp+0D8h+ElementCount], edi ; char *
.text:004029EB                 mov     ecx, [eax]
.text:004029ED                 mov     [esp+0D8h+Category], 1 ; Code
.text:004029F4                 mov     [esp+0D8h+Locale], ecx ; ErrorMessage
.text:004029F8                 call    sub_408C60
.text:004029FD                 jmp     loc_402954
.text:00402A02 ; ---------------------------------------------------------------------------
.text:00402A02
.text:00402A02 loc_402A02:                             ; CODE XREF: sub_402390+4F7↑j
.text:00402A02                 mov     [esp+0D8h+ElementCount], 718h
.text:00402A0A                 mov     [esp+0D8h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00402A12                 mov     [esp+0D8h+Category], offset aGetNextS2Null1 ; "get_next (s2, NULL) == -1 || truncate_s"...
.text:00402A19
.text:00402A19 loc_402A19:                             ; CODE XREF: sub_402390+6DA↓j
.text:00402A19                                         ; sub_402390+7D6↓j
.text:00402A19                 call    _assert
.text:00402A19 ; ---------------------------------------------------------------------------
.text:00402A1E                 align 10h
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_402390+4C8↑j
.text:00402A20                 mov     [esp+0D8h+Locale], 0
.text:00402A28                 mov     edi, [ebp+var_A4]
.text:00402A2E                 mov     [esp+0D8h+Category], edi
.text:00402A31                 call    sub_401460
.text:00402A36                 cmp     eax, 0FFFFFFFFh
.text:00402A39                 jz      short loc_402A46
.text:00402A3B                 mov     ds:byte_40B450[ebx], al
.text:00402A41                 jmp     loc_40285E
.text:00402A46 ; ---------------------------------------------------------------------------
.text:00402A46
.text:00402A46 loc_402A46:                             ; CODE XREF: sub_402390+6A9↑j
.text:00402A46                 cmp     ds:byte_40B030, 0
.text:00402A4D                 jnz     loc_402867
.text:00402A53                 mov     [esp+0D8h+ElementCount], 70Eh
.text:00402A5B                 mov     [esp+0D8h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00402A63                 mov     [esp+0D8h+Category], offset aCh1TruncateSet ; "ch != -1 || truncate_set1"
.text:00402A6A                 jmp     short loc_402A19
.text:00402A6A ; ---------------------------------------------------------------------------
.text:00402A6C                 align 10h
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_402390+45E↑j
.text:00402A70                 xor     ebx, ebx
.text:00402A72                 lea     esi, [esi+0]
.text:00402A79                 lea     edi, [edi+0]
.text:00402A80
.text:00402A80 loc_402A80:                             ; CODE XREF: sub_402390+6FD↓j
.text:00402A80                 mov     ds:byte_40B450[ebx], bl
.text:00402A86                 inc     ebx
.text:00402A87                 cmp     ebx, 0FFh
.text:00402A8D                 jle     short loc_402A80
.text:00402A8F                 mov     [ebp+var_40], 0FFFFFFFEh
.text:00402A96                 mov     ebx, [ebp+var_A4]
.text:00402A9C                 lea     edi, [ebp+var_A0]
.text:00402AA2                 mov     [ebp+var_3C], 0FFFFFFFFh
.text:00402AA9                 mov     dword ptr [ebx+8], 0FFFFFFFEh
.text:00402AB0                 mov     dword ptr [ebx+0Ch], 0FFFFFFFFh
.text:00402AB7
.text:00402AB7 loc_402AB7:                             ; CODE XREF: sub_402390+794↓j
.text:00402AB7                                         ; sub_402390+7AD↓j ...
.text:00402AB7                 lea     eax, [ebp+var_9C]
.text:00402ABD                 lea     esi, [ebp+var_48]
.text:00402AC0                 mov     [esp+0D8h+Category], esi
.text:00402AC3                 mov     [esp+0D8h+Locale], eax
.text:00402AC7                 call    sub_401460
.text:00402ACC                 mov     [esp+0D8h+Locale], edi
.text:00402AD0                 mov     ecx, [ebp+var_A4]
.text:00402AD6                 mov     esi, eax
.text:00402AD8                 mov     [esp+0D8h+Category], ecx
.text:00402ADB                 call    sub_401460
.text:00402AE0                 mov     ecx, [ebp+var_9C]
.text:00402AE6                 mov     ebx, eax
.text:00402AE8                 cmp     ecx, 2
.text:00402AEB                 setz    al
.text:00402AEE                 cmp     [ebp+var_A0], 2
.text:00402AF5                 setz    dl
.text:00402AF8                 xor     eax, edx
.text:00402AFA                 test    al, 1
.text:00402AFC                 jnz     loc_402C41
.text:00402B02
.text:00402B02 loc_402B02:                             ; CODE XREF: sub_402390+8DC↓j
.text:00402B02                 test    ecx, ecx
.text:00402B04                 jnz     short loc_402B13
.text:00402B06                 cmp     [ebp+var_A0], 1
.text:00402B0D                 jz      loc_402BE1
.text:00402B13
.text:00402B13 loc_402B13:                             ; CODE XREF: sub_402390+774↑j
.text:00402B13                 cmp     ecx, 1
.text:00402B16                 jz      short loc_402B7E
.text:00402B18
.text:00402B18 loc_402B18:                             ; CODE XREF: sub_402390+7F6↓j
.text:00402B18                 test    ecx, ecx
.text:00402B1A                 jnz     short loc_402B26
.text:00402B1C                 mov     edx, [ebp+var_A0]
.text:00402B22                 test    edx, edx
.text:00402B24                 jz      short loc_402AB7
.text:00402B26
.text:00402B26 loc_402B26:                             ; CODE XREF: sub_402390+78A↑j
.text:00402B26                 dec     ecx
.text:00402B27                 jz      short loc_402B70
.text:00402B29
.text:00402B29 loc_402B29:                             ; CODE XREF: sub_402390+7E7↓j
.text:00402B29                 cmp     esi, 0FFFFFFFFh
.text:00402B2C                 jz      loc_40288D
.text:00402B32                 cmp     ebx, 0FFFFFFFFh
.text:00402B35                 jz      short loc_402B42
.text:00402B37                 mov     ds:byte_40B450[esi], bl
.text:00402B3D                 jmp     loc_402AB7
.text:00402B42 ; ---------------------------------------------------------------------------
.text:00402B42
.text:00402B42 loc_402B42:                             ; CODE XREF: sub_402390+7A5↑j
.text:00402B42                 cmp     ds:byte_40B030, 0
.text:00402B49                 jnz     loc_40288D
.text:00402B4F                 mov     [esp+0D8h+ElementCount], 74Dh
.text:00402B57                 mov     [esp+0D8h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00402B5F                 mov     [esp+0D8h+Category], offset aC11TruncateSet ; "c1 == -1 || truncate_set1"
.text:00402B66                 jmp     loc_402A19
.text:00402B66 ; ---------------------------------------------------------------------------
.text:00402B6B                 align 10h
.text:00402B70
.text:00402B70 loc_402B70:                             ; CODE XREF: sub_402390+797↑j
.text:00402B70                 cmp     [ebp+var_A0], 1
.text:00402B77                 jnz     short loc_402B29
.text:00402B79                 jmp     loc_402AB7
.text:00402B7E ; ---------------------------------------------------------------------------
.text:00402B7E
.text:00402B7E loc_402B7E:                             ; CODE XREF: sub_402390+786↑j
.text:00402B7E                 mov     eax, [ebp+var_A0]
.text:00402B84                 test    eax, eax
.text:00402B86                 jnz     short loc_402B18
.text:00402B88                 xor     ebx, ebx
.text:00402B8A                 lea     esi, [esi+0]
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_402390+826↓j
.text:00402B90                 mov     edx, ds:__mb_cur_max
.text:00402B96                 cmp     dword ptr [edx], 1
.text:00402B99                 jz      short loc_402BD0
.text:00402B9B                 mov     [esp+0D8h+Locale], 1 ; Type
.text:00402BA3                 mov     [esp+0D8h+Category], ebx ; C
.text:00402BA6                 call    _isctype
.text:00402BAB
.text:00402BAB loc_402BAB:                             ; CODE XREF: sub_402390+84F↓j
.text:00402BAB                 test    eax, eax
.text:00402BAD                 jnz     short loc_402BC0
.text:00402BAF
.text:00402BAF loc_402BAF:                             ; CODE XREF: sub_402390+83E↓j
.text:00402BAF                 inc     ebx
.text:00402BB0                 cmp     ebx, 0FFh
.text:00402BB6                 jle     short loc_402B90
.text:00402BB8                 jmp     loc_402AB7
.text:00402BB8 ; ---------------------------------------------------------------------------
.text:00402BBD                 align 10h
.text:00402BC0
.text:00402BC0 loc_402BC0:                             ; CODE XREF: sub_402390+81D↑j
.text:00402BC0                 mov     [esp+0D8h+Category], ebx ; C
.text:00402BC3                 call    tolower
.text:00402BC8                 mov     ds:byte_40B450[ebx], al
.text:00402BCE                 jmp     short loc_402BAF
.text:00402BD0 ; ---------------------------------------------------------------------------
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_402390+809↑j
.text:00402BD0                 mov     esi, ds:_pctype
.text:00402BD6                 mov     ecx, [esi]
.text:00402BD8                 movzx   eax, word ptr [ecx+ebx*2]
.text:00402BDC                 and     eax, 1
.text:00402BDF                 jmp     short loc_402BAB
.text:00402BE1 ; ---------------------------------------------------------------------------
.text:00402BE1
.text:00402BE1 loc_402BE1:                             ; CODE XREF: sub_402390+77D↑j
.text:00402BE1                 xor     ebx, ebx
.text:00402BE3                 lea     esi, [esi+0]
.text:00402BE9                 lea     edi, [edi+0]
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402390+886↓j
.text:00402BF0                 mov     edx, ds:__mb_cur_max
.text:00402BF6                 cmp     dword ptr [edx], 1
.text:00402BF9                 jz      short loc_402C30
.text:00402BFB                 mov     [esp+0D8h+Locale], 2 ; Type
.text:00402C03                 mov     [esp+0D8h+Category], ebx ; C
.text:00402C06                 call    _isctype
.text:00402C0B
.text:00402C0B loc_402C0B:                             ; CODE XREF: sub_402390+8AF↓j
.text:00402C0B                 test    eax, eax
.text:00402C0D                 jnz     short loc_402C20
.text:00402C0F
.text:00402C0F loc_402C0F:                             ; CODE XREF: sub_402390+89E↓j
.text:00402C0F                 inc     ebx
.text:00402C10                 cmp     ebx, 0FFh
.text:00402C16                 jle     short loc_402BF0
.text:00402C18                 jmp     loc_402AB7
.text:00402C18 ; ---------------------------------------------------------------------------
.text:00402C1D                 align 10h
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402390+87D↑j
.text:00402C20                 mov     [esp+0D8h+Category], ebx ; C
.text:00402C23                 call    toupper
.text:00402C28                 mov     ds:byte_40B450[ebx], al
.text:00402C2E                 jmp     short loc_402C0F
.text:00402C30 ; ---------------------------------------------------------------------------
.text:00402C30
.text:00402C30 loc_402C30:                             ; CODE XREF: sub_402390+869↑j
.text:00402C30                 mov     esi, ds:_pctype
.text:00402C36                 mov     ecx, [esi]
.text:00402C38                 movzx   eax, word ptr [ecx+ebx*2]
.text:00402C3C                 and     eax, 2
.text:00402C3F                 jmp     short loc_402C0B
.text:00402C41 ; ---------------------------------------------------------------------------
.text:00402C41
.text:00402C41 loc_402C41:                             ; CODE XREF: sub_402390+76C↑j
.text:00402C41                 mov     [esp+0D8h+Category], offset aMisalignedUppe ; "misaligned [:upper:] and/or [:lower:] c"...
.text:00402C48                 call    ds:libintl_gettext
.text:00402C4E                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402C56                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402C5D                 mov     [esp+0D8h+ElementCount], eax ; char *
.text:00402C61                 call    sub_408C60
.text:00402C66                 mov     ecx, [ebp+var_9C]
.text:00402C6C                 jmp     loc_402B02
.text:00402C71 ; ---------------------------------------------------------------------------
.text:00402C71
.text:00402C71 loc_402C71:                             ; CODE XREF: sub_402390+444↑j
.text:00402C71                 movzx   ebx, ds:byte_40B020
.text:00402C78                 mov     [ebp+var_40], 0FFFFFFFEh
.text:00402C7F                 mov     [ebp+var_3C], 0FFFFFFFFh
.text:00402C86
.text:00402C86 loc_402C86:                             ; CODE XREF: sub_402390+915↓j
.text:00402C86                 mov     [esp+0D8h+Locale], 0
.text:00402C8E                 lea     eax, [ebp+var_48]
.text:00402C91                 mov     [esp+0D8h+Category], eax
.text:00402C94                 call    sub_401460
.text:00402C99                 cmp     eax, 0FFFFFFFFh
.text:00402C9C                 jz      short loc_402CA7
.text:00402C9E                 mov     ds:byte_40B350[eax], 1
.text:00402CA5                 jmp     short loc_402C86
.text:00402CA7 ; ---------------------------------------------------------------------------
.text:00402CA7
.text:00402CA7 loc_402CA7:                             ; CODE XREF: sub_402390+90C↑j
.text:00402CA7                 test    bl, bl
.text:00402CA9                 jz      short loc_402CC3
.text:00402CAB                 xor     eax, eax
.text:00402CAD
.text:00402CAD loc_402CAD:                             ; CODE XREF: sub_402390+931↓j
.text:00402CAD                 cmp     ds:byte_40B350[eax], 0
.text:00402CB4                 setz    ds:byte_40B350[eax]
.text:00402CBB                 inc     eax
.text:00402CBC                 cmp     eax, 0FFh
.text:00402CC1                 jbe     short loc_402CAD
.text:00402CC3
.text:00402CC3 loc_402CC3:                             ; CODE XREF: sub_402390+919↑j
.text:00402CC3                 mov     ebx, [ebp+var_A4]
.text:00402CC9                 mov     dword ptr [ebx+8], 0FFFFFFFEh
.text:00402CD0                 mov     dword ptr [ebx+0Ch], 0FFFFFFFFh
.text:00402CD7
.text:00402CD7 loc_402CD7:                             ; CODE XREF: sub_402390+969↓j
.text:00402CD7                 mov     [esp+0D8h+Locale], 0
.text:00402CDF                 mov     esi, [ebp+var_A4]
.text:00402CE5                 mov     [esp+0D8h+Category], esi
.text:00402CE8                 call    sub_401460
.text:00402CED                 cmp     eax, 0FFFFFFFFh
.text:00402CF0                 jz      short loc_402CFB
.text:00402CF2                 mov     ds:byte_40B250[eax], 1
.text:00402CF9                 jmp     short loc_402CD7
.text:00402CFB ; ---------------------------------------------------------------------------
.text:00402CFB
.text:00402CFB loc_402CFB:                             ; CODE XREF: sub_402390+960↑j
.text:00402CFB                 mov     [esp+0D8h+ElementCount], offset sub_404770
.text:00402D03                 jmp     loc_4028DA
.text:00402D08 ; ---------------------------------------------------------------------------
.text:00402D08
.text:00402D08 loc_402D08:                             ; CODE XREF: sub_402390+433↑j
.text:00402D08                 movzx   ebx, ds:byte_40B020
.text:00402D0F                 mov     [ebp+var_40], 0FFFFFFFEh
.text:00402D16                 mov     [ebp+var_3C], 0FFFFFFFFh
.text:00402D1D
.text:00402D1D loc_402D1D:                             ; CODE XREF: sub_402390+9AC↓j
.text:00402D1D                 mov     [esp+0D8h+Locale], 0
.text:00402D25                 lea     ecx, [ebp+var_48]
.text:00402D28                 mov     [esp+0D8h+Category], ecx
.text:00402D2B                 call    sub_401460
.text:00402D30                 cmp     eax, 0FFFFFFFFh
.text:00402D33                 jz      short loc_402D3E
.text:00402D35                 mov     ds:byte_40B350[eax], 1
.text:00402D3C                 jmp     short loc_402D1D
.text:00402D3E ; ---------------------------------------------------------------------------
.text:00402D3E
.text:00402D3E loc_402D3E:                             ; CODE XREF: sub_402390+9A3↑j
.text:00402D3E                 test    bl, bl
.text:00402D40                 jz      short loc_402D66
.text:00402D42                 xor     eax, eax
.text:00402D44                 lea     esi, [esi+0]
.text:00402D4A                 lea     edi, [edi+0]
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_402390+9D4↓j
.text:00402D50                 cmp     ds:byte_40B350[eax], 0
.text:00402D57                 setz    ds:byte_40B350[eax]
.text:00402D5E                 inc     eax
.text:00402D5F                 cmp     eax, 0FFh
.text:00402D64                 jbe     short loc_402D50
.text:00402D66
.text:00402D66 loc_402D66:                             ; CODE XREF: sub_402390+9B0↑j
.text:00402D66                                         ; sub_402390+A5A↓j ...
.text:00402D66                 mov     [esp+0D8h+ElementCount], 200h
.text:00402D6E                 mov     [esp+0D8h+Locale], offset byte_40B050
.text:00402D76                 mov     [esp+0D8h+Category], 0
.text:00402D7D                 call    sub_4067D0
.text:00402D82                 cmp     eax, 0FFFFFFFFh
.text:00402D85                 mov     esi, eax
.text:00402D87                 jz      loc_402E4C
.text:00402D8D
.text:00402D8D loc_402D8D:                             ; CODE XREF: sub_402390+AE6↓j
.text:00402D8D                 test    esi, esi
.text:00402D8F                 jz      loc_4028EE
.text:00402D95                 xor     ecx, ecx
.text:00402D97                 cmp     ecx, esi
.text:00402D99                 jnb     short loc_402DC0
.text:00402D9B                 movzx   ebx, ds:byte_40B050
.text:00402DA2                 cmp     ds:byte_40B350[ebx], 0
.text:00402DA9                 jnz     short loc_402DC0
.text:00402DAB
.text:00402DAB loc_402DAB:                             ; CODE XREF: sub_402390+A2E↓j
.text:00402DAB                 inc     ecx
.text:00402DAC                 cmp     ecx, esi
.text:00402DAE                 jnb     short loc_402DC0
.text:00402DB0                 movzx   edx, ds:byte_40B050[ecx]
.text:00402DB7                 cmp     ds:byte_40B350[edx], 0
.text:00402DBE                 jz      short loc_402DAB
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_402390+A09↑j
.text:00402DC0                                         ; sub_402390+A19↑j ...
.text:00402DC0                 mov     ebx, ecx
.text:00402DC2                 lea     ecx, [ecx+1]
.text:00402DC5                 cmp     ecx, esi
.text:00402DC7                 jnb     short loc_402DE8
.text:00402DC9
.text:00402DC9 loc_402DC9:                             ; CODE XREF: sub_402390+A56↓j
.text:00402DC9                 movzx   edx, ds:byte_40B050[ecx]
.text:00402DD0                 movzx   edi, dl
.text:00402DD3                 cmp     ds:byte_40B350[edi], 0
.text:00402DDA                 jnz     short loc_402DE3
.text:00402DDC                 mov     ds:byte_40B050[ebx], dl
.text:00402DE2                 inc     ebx
.text:00402DE3
.text:00402DE3 loc_402DE3:                             ; CODE XREF: sub_402390+A4A↑j
.text:00402DE3                 inc     ecx
.text:00402DE4                 cmp     ecx, esi
.text:00402DE6                 jb      short loc_402DC9
.text:00402DE8
.text:00402DE8 loc_402DE8:                             ; CODE XREF: sub_402390+A37↑j
.text:00402DE8                 test    ebx, ebx
.text:00402DEA                 jz      loc_402D66
.text:00402DF0                 mov     [esp+0D8h+ElementCount], ebx ; ElementCount
.text:00402DF4                 mov     esi, ds:_iob
.text:00402DFA                 mov     [esp+0D8h+Locale], 1 ; ElementSize
.text:00402E02                 mov     [esp+0D8h+Category], offset byte_40B050 ; Buffer
.text:00402E09                 add     esi, 20h ; ' '
.text:00402E0C                 mov     [esp+0D8h+Stream], esi ; char
.text:00402E10                 call    fwrite
.text:00402E15                 cmp     eax, ebx
.text:00402E17                 jz      loc_402D66
.text:00402E1D                 mov     [esp+0D8h+Category], offset aWriteError ; "write error"
.text:00402E24                 call    ds:libintl_gettext
.text:00402E2A                 mov     edi, eax
.text:00402E2C                 call    _errno
.text:00402E31                 mov     [esp+0D8h+ElementCount], edi ; char *
.text:00402E35                 mov     ecx, [eax]
.text:00402E37                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402E3E                 mov     [esp+0D8h+Locale], ecx ; ErrorMessage
.text:00402E42                 call    sub_408C60
.text:00402E47                 jmp     loc_402D66
.text:00402E4C ; ---------------------------------------------------------------------------
.text:00402E4C
.text:00402E4C loc_402E4C:                             ; CODE XREF: sub_402390+9F7↑j
.text:00402E4C                 mov     [esp+0D8h+Category], offset aReadError ; "read error"
.text:00402E53                 call    ds:libintl_gettext
.text:00402E59                 mov     edi, eax
.text:00402E5B                 call    _errno
.text:00402E60                 mov     [esp+0D8h+ElementCount], edi ; char *
.text:00402E64                 mov     edx, [eax]
.text:00402E66                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402E6D                 mov     [esp+0D8h+Locale], edx ; ErrorMessage
.text:00402E71                 call    sub_408C60
.text:00402E76                 jmp     loc_402D8D
.text:00402E7B ; ---------------------------------------------------------------------------
.text:00402E7B
.text:00402E7B loc_402E7B:                             ; CODE XREF: sub_402390+41F↑j
.text:00402E7B                 movzx   ebx, ds:byte_40B020
.text:00402E82                 mov     [ebp+var_40], 0FFFFFFFEh
.text:00402E89                 mov     [ebp+var_3C], 0FFFFFFFFh
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402390+B1F↓j
.text:00402E90                 mov     [esp+0D8h+Locale], 0
.text:00402E98                 lea     edi, [ebp+var_48]
.text:00402E9B                 mov     [esp+0D8h+Category], edi
.text:00402E9E                 call    sub_401460
.text:00402EA3                 cmp     eax, 0FFFFFFFFh
.text:00402EA6                 jz      short loc_402EB1
.text:00402EA8                 mov     ds:byte_40B250[eax], 1
.text:00402EAF                 jmp     short loc_402E90
.text:00402EB1 ; ---------------------------------------------------------------------------
.text:00402EB1
.text:00402EB1 loc_402EB1:                             ; CODE XREF: sub_402390+B16↑j
.text:00402EB1                 test    bl, bl
.text:00402EB3                 jz      short loc_402ED6
.text:00402EB5                 xor     eax, eax
.text:00402EB7                 mov     esi, esi
.text:00402EB9                 lea     edi, [edi+0]
.text:00402EC0
.text:00402EC0 loc_402EC0:                             ; CODE XREF: sub_402390+B44↓j
.text:00402EC0                 cmp     ds:byte_40B250[eax], 0
.text:00402EC7                 setz    ds:byte_40B250[eax]
.text:00402ECE                 inc     eax
.text:00402ECF                 cmp     eax, 0FFh
.text:00402ED4                 jbe     short loc_402EC0
.text:00402ED6
.text:00402ED6 loc_402ED6:                             ; CODE XREF: sub_402390+B23↑j
.text:00402ED6                 mov     [esp+0D8h+ElementCount], offset sub_404700
.text:00402EDE                 jmp     loc_4028DA
.text:00402EE3 ; ---------------------------------------------------------------------------
.text:00402EE3
.text:00402EE3 loc_402EE3:                             ; CODE XREF: sub_402390+40B↑j
.text:00402EE3                 mov     [esp+0D8h+Locale], 8000h ; Mode
.text:00402EEB                 mov     [esp+0D8h+Category], 0 ; FileHandle
.text:00402EF2                 call    _setmode
.text:00402EF7                 mov     [esp+0D8h+Category], 1 ; FileHandle
.text:00402EFE                 call    _isatty
.text:00402F03                 test    eax, eax
.text:00402F05                 jnz     loc_4027A1
.text:00402F0B                 mov     [esp+0D8h+Locale], 8000h ; Mode
.text:00402F13                 mov     [esp+0D8h+Category], 1 ; FileHandle
.text:00402F1A                 call    _setmode
.text:00402F1F                 jmp     loc_4027A1
.text:00402F24 ; ---------------------------------------------------------------------------
.text:00402F24
.text:00402F24 loc_402F24:                             ; CODE XREF: sub_402390+3DA↑j
.text:00402F24                 mov     [esp+0D8h+Category], 18h ; size_t
.text:00402F2B                 call    sub_407580
.text:00402F30                 mov     [ebp+var_AA], 0
.text:00402F37                 mov     edx, dword_40A010
.text:00402F3D                 mov     ebx, [ebp+var_A4]
.text:00402F43                 mov     ecx, [esi+edx*4+4]
.text:00402F47                 mov     [ebx+4], eax
.text:00402F4A                 mov     [ebx], eax
.text:00402F4C                 lea     ebx, [ebp+var_98]
.text:00402F52                 mov     dword ptr [eax+4], 0
.text:00402F59                 mov     [esp+0D8h+Locale], ebx ; int
.text:00402F5D                 mov     [esp+0D8h+Category], ecx ; char *
.text:00402F60                 call    sub_4035F0
.text:00402F65                 test    al, al
.text:00402F67                 jnz     short loc_402F97
.text:00402F69
.text:00402F69 loc_402F69:                             ; CODE XREF: sub_402390+C1B↓j
.text:00402F69                                         ; sub_402390+C24↓j
.text:00402F69                 mov     edx, [ebp+var_98]
.text:00402F6F                 mov     [esp+0D8h+Category], edx ; Block
.text:00402F72                 call    free
.text:00402F77                 mov     ecx, [ebp+var_94]
.text:00402F7D                 mov     [esp+0D8h+Category], ecx ; Block
.text:00402F80                 call    free
.text:00402F85                 cmp     [ebp+var_AA], 0
.text:00402F8C                 jnz     loc_402778
.text:00402F92                 jmp     loc_402497
.text:00402F97 ; ---------------------------------------------------------------------------
.text:00402F97
.text:00402F97 loc_402F97:                             ; CODE XREF: sub_402390+BD7↑j
.text:00402F97                 mov     [esp+0D8h+Category], ebx
.text:00402F9A                 mov     esi, [ebp+var_A4]
.text:00402FA0                 mov     [esp+0D8h+Locale], esi
.text:00402FA4                 call    sub_403910
.text:00402FA9                 test    al, al
.text:00402FAB                 jz      short loc_402F69
.text:00402FAD                 mov     [ebp+var_AA], 1
.text:00402FB4                 jmp     short loc_402F69
.text:00402FB6 ; ---------------------------------------------------------------------------
.text:00402FB6
.text:00402FB6 loc_402FB6:                             ; CODE XREF: sub_402390+3A8↑j
.text:00402FB6                 mov     [esp+0D8h+Category], ebx
.text:00402FB9                 lea     ecx, [ebp+var_48]
.text:00402FBC                 mov     [esp+0D8h+Locale], ecx
.text:00402FC0                 call    sub_403910
.text:00402FC5                 test    al, al
.text:00402FC7                 jz      loc_40273E
.text:00402FCD                 mov     [ebp+var_A9], 1
.text:00402FD4                 jmp     loc_40273E
.text:00402FD9 ; ---------------------------------------------------------------------------
.text:00402FD9
.text:00402FD9 loc_402FD9:                             ; CODE XREF: sub_402390+365↑j
.text:00402FD9                 mov     edx, [ebp+var_A8]
.text:00402FDF                 add     eax, edx
.text:00402FE1                 mov     ebx, [esi+eax*4]
.text:00402FE4                 mov     [esp+0D8h+Category], ebx ; char *
.text:00402FE7                 call    sub_406050
.text:00402FEC                 mov     [esp+0D8h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00402FF3                 mov     esi, eax
.text:00402FF5                 call    ds:libintl_gettext
.text:00402FFB                 mov     [esp+0D8h+Stream], esi ; char
.text:00402FFF                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00403007                 mov     [esp+0D8h+Category], 0 ; Code
.text:0040300E                 mov     [esp+0D8h+ElementCount], eax ; char *
.text:00403012                 call    sub_408C60
.text:00403017                 cmp     edi, 2
.text:0040301A                 jnz     loc_40246B
.text:00403020                 mov     [esp+0D8h+Category], offset aOnlyOneStringM ; "Only one string may be given when delet"...
.text:00403027
.text:00403027 loc_403027:                             ; CODE XREF: sub_402390+D36↓j
.text:00403027                 call    ds:libintl_gettext
.text:0040302D                 mov     [esp+0D8h+Locale], offset Format ; "%s\n"
.text:00403035                 mov     ecx, ds:_iob
.text:0040303B                 add     ecx, 40h ; '@'
.text:0040303E                 mov     [esp+0D8h+ElementCount], eax
.text:00403042                 mov     [esp+0D8h+Category], ecx ; Stream
.text:00403045                 call    fprintf
.text:0040304A                 jmp     loc_40246B
.text:0040304A ; ---------------------------------------------------------------------------
.text:0040304F                 align 10h
.text:00403050
.text:00403050 loc_403050:                             ; CODE XREF: sub_402390+35D↑j
.text:00403050                 test    edi, edi
.text:00403052                 jnz     short loc_40307E
.text:00403054                 mov     [esp+0D8h+Category], offset aMissingOperand ; "missing operand"
.text:0040305B                 call    ds:libintl_gettext
.text:00403061                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00403069                 mov     [esp+0D8h+Category], 0 ; Code
.text:00403070                 mov     [esp+0D8h+ElementCount], eax ; char *
.text:00403074                 call    sub_408C60
.text:00403079                 jmp     loc_40246B
.text:0040307E ; ---------------------------------------------------------------------------
.text:0040307E
.text:0040307E loc_40307E:                             ; CODE XREF: sub_402390+CC2↑j
.text:0040307E                 mov     edi, [esi+ebx*4-4]
.text:00403082                 mov     [esp+0D8h+Category], edi ; char *
.text:00403085                 call    sub_406050
.text:0040308A                 mov     [esp+0D8h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:00403091                 mov     esi, eax
.text:00403093                 call    ds:libintl_gettext
.text:00403099                 mov     [esp+0D8h+Stream], esi ; char
.text:0040309D                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004030A5                 mov     [esp+0D8h+Category], 0 ; Code
.text:004030AC                 mov     [esp+0D8h+ElementCount], eax ; char *
.text:004030B0                 call    sub_408C60
.text:004030B5                 cmp     ds:byte_40B000, 0
.text:004030BC                 jz      short loc_4030CB
.text:004030BE                 mov     eax, offset aTwoStringsMust ; "Two strings must be given when both del"...
.text:004030C3
.text:004030C3 loc_4030C3:                             ; CODE XREF: sub_402390+D40↓j
.text:004030C3                 mov     [esp+0D8h+Category], eax
.text:004030C6                 jmp     loc_403027
.text:004030CB ; ---------------------------------------------------------------------------
.text:004030CB
.text:004030CB loc_4030CB:                             ; CODE XREF: sub_402390+D2C↑j
.text:004030CB                 mov     eax, offset aTwoStringsMust_0 ; "Two strings must be given when translat"...
.text:004030D0                 jmp     short loc_4030C3
.text:004030D2 ; ---------------------------------------------------------------------------
.text:004030D2
.text:004030D2 loc_4030D2:                             ; CODE XREF: sub_402390+324↑j
.text:004030D2                 movzx   ecx, ds:byte_40B010
.text:004030D9                 test    cl, cl
.text:004030DB                 mov     [ebp+var_AB], cl
.text:004030E1                 jnz     loc_4026C7
.text:004030E7                 mov     al, 1
.text:004030E9                 jmp     loc_4026C7
.text:004030E9 sub_402390      endp
.text:004030E9
.text:004030E9 ; ---------------------------------------------------------------------------
.text:004030EE                 align 10h
.text:004030F0                 push    ebx
.text:004030F1                 sub     esp, 18h
.text:004030F4                 mov     ebx, [esp+20h]
.text:004030F8                 test    ebx, ebx
.text:004030FA                 jz      short loc_403130
.text:004030FC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403103                 call    ds:libintl_gettext
.text:00403109                 mov     edx, ds:_iob
.text:0040310F                 mov     ecx, ds:dword_40B6E0
.text:00403115                 add     edx, 40h ; '@'
.text:00403118                 mov     [esp+8], ecx
.text:0040311C                 mov     [esp+4], eax
.text:00403120                 mov     [esp], edx
.text:00403123                 call    fprintf
.text:00403128
.text:00403128 loc_403128:                             ; CODE XREF: .text:0040329E↓j
.text:00403128                 mov     [esp], ebx
.text:0040312B                 call    exit
.text:00403130 ; ---------------------------------------------------------------------------
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: .text:004030FA↑j
.text:00403130                 mov     dword ptr [esp], offset stru_4017A8._bufsiz
.text:00403137                 call    ds:libintl_gettext
.text:0040313D                 mov     ecx, ds:dword_40B6E0
.text:00403143                 mov     [esp], eax
.text:00403146                 mov     [esp+4], ecx
.text:0040314A                 call    printf
.text:0040314F                 mov     dword ptr [esp], offset aTranslateSquee ; "Translate, squeeze, and/or delete chara"...
.text:00403156                 call    ds:libintl_gettext
.text:0040315C                 mov     ecx, ds:_iob
.text:00403162                 add     ecx, 20h ; ' '
.text:00403165                 mov     [esp+4], ecx
.text:00403169                 mov     [esp], eax
.text:0040316C                 call    fputs
.text:00403171                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00403178                 call    ds:libintl_gettext
.text:0040317E                 mov     ecx, ds:_iob
.text:00403184                 add     ecx, 20h ; ' '
.text:00403187                 mov     [esp+4], ecx
.text:0040318B                 mov     [esp], eax
.text:0040318E                 call    fputs
.text:00403193                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040319A                 call    ds:libintl_gettext
.text:004031A0                 mov     ecx, ds:_iob
.text:004031A6                 add     ecx, 20h ; ' '
.text:004031A9                 mov     [esp+4], ecx
.text:004031AD                 mov     [esp], eax
.text:004031B0                 call    fputs
.text:004031B5                 mov     dword ptr [esp], offset aSetsAreSpecifi ; "\nSETs are specified as strings of char"...
.text:004031BC                 call    ds:libintl_gettext
.text:004031C2                 mov     ecx, ds:_iob
.text:004031C8                 add     ecx, 20h ; ' '
.text:004031CB                 mov     [esp+4], ecx
.text:004031CF                 mov     [esp], eax
.text:004031D2                 call    fputs
.text:004031D7                 mov     dword ptr [esp], offset aVVerticalTabCh ; "  \\v              vertical tab\n  CHAR"...
.text:004031DE                 call    ds:libintl_gettext
.text:004031E4                 mov     ecx, ds:_iob
.text:004031EA                 add     ecx, 20h ; ' '
.text:004031ED                 mov     [esp+4], ecx
.text:004031F1                 mov     [esp], eax
.text:004031F4                 call    fputs
.text:004031F9                 mov     dword ptr [esp], offset aGraphAllPrinta ; "  [:graph:]       all printable charact"...
.text:00403200                 call    ds:libintl_gettext
.text:00403206                 mov     ecx, ds:_iob
.text:0040320C                 add     ecx, 20h ; ' '
.text:0040320F                 mov     [esp+4], ecx
.text:00403213                 mov     [esp], eax
.text:00403216                 call    fputs
.text:0040321B                 mov     dword ptr [esp], offset aTranslationOcc ; "\nTranslation occurs if -d is not given"...
.text:00403222                 call    ds:libintl_gettext
.text:00403228                 mov     ecx, ds:_iob
.text:0040322E                 add     ecx, 20h ; ' '
.text:00403231                 mov     [esp+4], ecx
.text:00403235                 mov     [esp], eax
.text:00403238                 call    fputs
.text:0040323D                 mov     dword ptr [esp], offset aExcessCharacte ; "Excess characters\nof SET2 are ignored."...
.text:00403244                 call    ds:libintl_gettext
.text:0040324A                 mov     ecx, ds:_iob
.text:00403250                 add     ecx, 20h ; ' '
.text:00403253                 mov     [esp+4], ecx
.text:00403257                 mov     [esp], eax
.text:0040325A                 call    fputs
.text:0040325F                 mov     dword ptr [esp], offset aSUsesSet1IfNot ; "-s uses SET1 if not\ntranslating nor de"...
.text:00403266                 call    ds:libintl_gettext
.text:0040326C                 mov     ecx, ds:_iob
.text:00403272                 add     ecx, 20h ; ' '
.text:00403275                 mov     [esp+4], ecx
.text:00403279                 mov     [esp], eax
.text:0040327C                 call    fputs
.text:00403281                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00403288                 call    ds:libintl_gettext
.text:0040328E                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403296                 mov     [esp], eax
.text:00403299                 call    printf
.text:0040329E                 jmp     loc_403128
.text:0040329E ; ---------------------------------------------------------------------------
.text:004032A3                 align 10h
.text:004032B0
.text:004032B0 ; =============== S U B R O U T I N E =======================================
.text:004032B0
.text:004032B0
.text:004032B0 sub_4032B0      proc near               ; CODE XREF: sub_401460+11D↑p
.text:004032B0                                         ; sub_401460+171↑p ...
.text:004032B0
.text:004032B0 C               = dword ptr -1Ch
.text:004032B0 Type            = dword ptr -18h
.text:004032B0 var_5           = byte ptr -5
.text:004032B0 var_4           = dword ptr -4
.text:004032B0 arg_0           = dword ptr  4
.text:004032B0 arg_4           = byte ptr  8
.text:004032B0
.text:004032B0                 sub     esp, 1Ch
.text:004032B3                 mov     eax, [esp+1Ch+arg_0]
.text:004032B7                 mov     [esp+1Ch+var_4], ebx
.text:004032BB                 movzx   ebx, [esp+1Ch+arg_4]
.text:004032C0                 cmp     eax, 0Bh        ; switch 12 cases
.text:004032C3                 ja      def_4032C9      ; jumptable 004032C9 default case
.text:004032C9                 jmp     ds:jpt_4032C9[eax*4] ; switch jump
.text:004032C9 ; ---------------------------------------------------------------------------
.text:004032D0 jpt_4032C9      dd offset loc_403300    ; DATA XREF: sub_4032B0+19↑r
.text:004032D0                 dd offset loc_40334B    ; jump table for switch statement
.text:004032D0                 dd offset loc_403376
.text:004032D0                 dd offset loc_403386
.text:004032D0                 dd offset loc_4033B2
.text:004032D0                 dd offset loc_4033E1
.text:004032D0                 dd offset loc_40345C
.text:004032D0                 dd offset loc_40348B
.text:004032D0                 dd offset loc_4034BC
.text:004032D0                 dd offset loc_4034EB
.text:004032D0                 dd offset loc_40351A
.text:004032D0                 dd offset loc_403549
.text:00403300 ; ---------------------------------------------------------------------------
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_4032B0+19↑j
.text:00403300                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:00403300                 mov     ecx, ds:__mb_cur_max ; jumptable 004032C9 case 0
.text:00403306                 movzx   edx, bl
.text:00403309                 cmp     dword ptr [ecx], 1
.text:0040330C                 jz      short loc_403338
.text:0040330E                 mov     [esp+1Ch+Type], 107h ; Type
.text:00403316                 lea     esi, [esi+0]
.text:00403319                 lea     edi, [edi+0]
.text:00403320
.text:00403320 loc_403320:                             ; CODE XREF: sub_4032B0+B1↓j
.text:00403320                                         ; sub_4032B0+EC↓j ...
.text:00403320                 mov     [esp+1Ch+C], edx ; C
.text:00403323                 call    _isctype
.text:00403328
.text:00403328 loc_403328:                             ; CODE XREF: sub_4032B0+99↓j
.text:00403328                                         ; sub_4032B0+C4↓j ...
.text:00403328                 test    eax, eax
.text:0040332A                 setnz   al
.text:0040332D
.text:0040332D loc_40332D:                             ; CODE XREF: sub_4032B0+D0↓j
.text:0040332D                                         ; sub_4032B0+D4↓j ...
.text:0040332D                 mov     ebx, [esp+1Ch+var_4]
.text:00403331                 movzx   eax, al
.text:00403334                 add     esp, 1Ch
.text:00403337                 retn
.text:00403338 ; ---------------------------------------------------------------------------
.text:00403338
.text:00403338 loc_403338:                             ; CODE XREF: sub_4032B0+5C↑j
.text:00403338                 mov     ebx, ds:_pctype
.text:0040333E                 mov     ecx, [ebx]
.text:00403340                 movzx   eax, word ptr [ecx+edx*2]
.text:00403344                 and     eax, 107h
.text:00403349                 jmp     short loc_403328
.text:0040334B ; ---------------------------------------------------------------------------
.text:0040334B
.text:0040334B loc_40334B:                             ; CODE XREF: sub_4032B0+19↑j
.text:0040334B                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:0040334B                 mov     ecx, ds:__mb_cur_max ; jumptable 004032C9 case 1
.text:00403351                 movzx   edx, bl
.text:00403354                 cmp     dword ptr [ecx], 1
.text:00403357                 jz      short loc_403363
.text:00403359                 mov     [esp+1Ch+Type], 103h
.text:00403361                 jmp     short loc_403320
.text:00403363 ; ---------------------------------------------------------------------------
.text:00403363
.text:00403363 loc_403363:                             ; CODE XREF: sub_4032B0+A7↑j
.text:00403363                 mov     ecx, ds:_pctype
.text:00403369                 mov     ebx, [ecx]
.text:0040336B                 movzx   eax, word ptr [ebx+edx*2]
.text:0040336F                 and     eax, 103h
.text:00403374                 jmp     short loc_403328
.text:00403376 ; ---------------------------------------------------------------------------
.text:00403376
.text:00403376 loc_403376:                             ; CODE XREF: sub_4032B0+19↑j
.text:00403376                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:00403376                 xor     eax, eax        ; jumptable 004032C9 case 2
.text:00403378                 cmp     bl, 20h ; ' '
.text:0040337B                 jz      short loc_403382
.text:0040337D                 cmp     bl, 9
.text:00403380                 jnz     short loc_40332D
.text:00403382
.text:00403382 loc_403382:                             ; CODE XREF: sub_4032B0+CB↑j
.text:00403382                 mov     al, 1
.text:00403384                 jmp     short loc_40332D
.text:00403386 ; ---------------------------------------------------------------------------
.text:00403386
.text:00403386 loc_403386:                             ; CODE XREF: sub_4032B0+19↑j
.text:00403386                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:00403386                 movzx   edx, bl         ; jumptable 004032C9 case 3
.text:00403389                 mov     ebx, ds:__mb_cur_max
.text:0040338F                 cmp     dword ptr [ebx], 1
.text:00403392                 jz      short loc_40339E
.text:00403394                 mov     [esp+1Ch+Type], 20h ; ' '
.text:0040339C                 jmp     short loc_403320
.text:0040339E ; ---------------------------------------------------------------------------
.text:0040339E
.text:0040339E loc_40339E:                             ; CODE XREF: sub_4032B0+E2↑j
.text:0040339E                 mov     ebx, ds:_pctype
.text:004033A4                 mov     ecx, [ebx]
.text:004033A6                 movzx   eax, word ptr [ecx+edx*2]
.text:004033AA                 and     eax, 20h
.text:004033AD                 jmp     loc_403328
.text:004033B2 ; ---------------------------------------------------------------------------
.text:004033B2
.text:004033B2 loc_4033B2:                             ; CODE XREF: sub_4032B0+19↑j
.text:004033B2                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:004033B2                 mov     ecx, ds:__mb_cur_max ; jumptable 004032C9 case 4
.text:004033B8                 movzx   edx, bl
.text:004033BB                 cmp     dword ptr [ecx], 1
.text:004033BE                 jz      short loc_4033CD
.text:004033C0                 mov     [esp+1Ch+Type], 4
.text:004033C8                 jmp     loc_403320
.text:004033CD ; ---------------------------------------------------------------------------
.text:004033CD
.text:004033CD loc_4033CD:                             ; CODE XREF: sub_4032B0+10E↑j
.text:004033CD                 mov     ecx, ds:_pctype
.text:004033D3                 mov     ebx, [ecx]
.text:004033D5                 movzx   eax, word ptr [ebx+edx*2]
.text:004033D9                 and     eax, 4
.text:004033DC                 jmp     loc_403328
.text:004033E1 ; ---------------------------------------------------------------------------
.text:004033E1
.text:004033E1 loc_4033E1:                             ; CODE XREF: sub_4032B0+19↑j
.text:004033E1                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:004033E1                 mov     [esp+1Ch+var_5], 0 ; jumptable 004032C9 case 5
.text:004033E6                 mov     ecx, ds:__mb_cur_max
.text:004033EC                 movzx   edx, bl
.text:004033EF                 cmp     dword ptr [ecx], 1
.text:004033F2                 jz      short loc_40344A
.text:004033F4                 mov     [esp+1Ch+Type], 157h ; Type
.text:004033FC                 mov     [esp+1Ch+C], edx ; C
.text:004033FF                 call    _isctype
.text:00403404
.text:00403404 loc_403404:                             ; CODE XREF: sub_4032B0+1AA↓j
.text:00403404                 test    eax, eax
.text:00403406                 jz      short loc_40342F
.text:00403408                 movzx   edx, bl
.text:0040340B                 mov     ebx, ds:__mb_cur_max
.text:00403411                 cmp     dword ptr [ebx], 1
.text:00403414                 jz      short loc_403439
.text:00403416                 mov     [esp+1Ch+Type], 8 ; Type
.text:0040341E                 mov     [esp+1Ch+C], edx ; C
.text:00403421                 call    _isctype
.text:00403426
.text:00403426 loc_403426:                             ; CODE XREF: sub_4032B0+198↓j
.text:00403426                 test    eax, eax
.text:00403428                 jnz     short loc_40342F
.text:0040342A                 mov     [esp+1Ch+var_5], 1
.text:0040342F
.text:0040342F loc_40342F:                             ; CODE XREF: sub_4032B0+156↑j
.text:0040342F                                         ; sub_4032B0+178↑j
.text:0040342F                 movzx   eax, [esp+1Ch+var_5]
.text:00403434                 jmp     loc_40332D
.text:00403439 ; ---------------------------------------------------------------------------
.text:00403439
.text:00403439 loc_403439:                             ; CODE XREF: sub_4032B0+164↑j
.text:00403439                 mov     ebx, ds:_pctype
.text:0040343F                 mov     ecx, [ebx]
.text:00403441                 movzx   eax, word ptr [ecx+edx*2]
.text:00403445                 and     eax, 8
.text:00403448                 jmp     short loc_403426
.text:0040344A ; ---------------------------------------------------------------------------
.text:0040344A
.text:0040344A loc_40344A:                             ; CODE XREF: sub_4032B0+142↑j
.text:0040344A                 mov     eax, ds:_pctype
.text:0040344F                 mov     ecx, [eax]
.text:00403451                 movzx   eax, word ptr [ecx+edx*2]
.text:00403455                 and     eax, 157h
.text:0040345A                 jmp     short loc_403404
.text:0040345C ; ---------------------------------------------------------------------------
.text:0040345C
.text:0040345C loc_40345C:                             ; CODE XREF: sub_4032B0+19↑j
.text:0040345C                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:0040345C                 mov     ecx, ds:__mb_cur_max ; jumptable 004032C9 case 6
.text:00403462                 movzx   edx, bl
.text:00403465                 cmp     dword ptr [ecx], 1
.text:00403468                 jz      short loc_403477
.text:0040346A                 mov     [esp+1Ch+Type], 2
.text:00403472                 jmp     loc_403320
.text:00403477 ; ---------------------------------------------------------------------------
.text:00403477
.text:00403477 loc_403477:                             ; CODE XREF: sub_4032B0+1B8↑j
.text:00403477                 mov     ecx, ds:_pctype
.text:0040347D                 mov     ebx, [ecx]
.text:0040347F                 movzx   eax, word ptr [ebx+edx*2]
.text:00403483                 and     eax, 2
.text:00403486                 jmp     loc_403328
.text:0040348B ; ---------------------------------------------------------------------------
.text:0040348B
.text:0040348B loc_40348B:                             ; CODE XREF: sub_4032B0+19↑j
.text:0040348B                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:0040348B                 movzx   edx, bl         ; jumptable 004032C9 case 7
.text:0040348E                 mov     ebx, ds:__mb_cur_max
.text:00403494                 cmp     dword ptr [ebx], 1
.text:00403497                 jz      short loc_4034A6
.text:00403499                 mov     [esp+1Ch+Type], 157h
.text:004034A1                 jmp     loc_403320
.text:004034A6 ; ---------------------------------------------------------------------------
.text:004034A6
.text:004034A6 loc_4034A6:                             ; CODE XREF: sub_4032B0+1E7↑j
.text:004034A6                 mov     ebx, ds:_pctype
.text:004034AC                 mov     ecx, [ebx]
.text:004034AE                 movzx   eax, word ptr [ecx+edx*2]
.text:004034B2                 and     eax, 157h
.text:004034B7                 jmp     loc_403328
.text:004034BC ; ---------------------------------------------------------------------------
.text:004034BC
.text:004034BC loc_4034BC:                             ; CODE XREF: sub_4032B0+19↑j
.text:004034BC                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:004034BC                 mov     ecx, ds:__mb_cur_max ; jumptable 004032C9 case 8
.text:004034C2                 movzx   edx, bl
.text:004034C5                 cmp     dword ptr [ecx], 1
.text:004034C8                 jz      short loc_4034D7
.text:004034CA                 mov     [esp+1Ch+Type], 10h
.text:004034D2                 jmp     loc_403320
.text:004034D7 ; ---------------------------------------------------------------------------
.text:004034D7
.text:004034D7 loc_4034D7:                             ; CODE XREF: sub_4032B0+218↑j
.text:004034D7                 mov     ecx, ds:_pctype
.text:004034DD                 mov     ebx, [ecx]
.text:004034DF                 movzx   eax, word ptr [ebx+edx*2]
.text:004034E3                 and     eax, 10h
.text:004034E6                 jmp     loc_403328
.text:004034EB ; ---------------------------------------------------------------------------
.text:004034EB
.text:004034EB loc_4034EB:                             ; CODE XREF: sub_4032B0+19↑j
.text:004034EB                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:004034EB                 movzx   edx, bl         ; jumptable 004032C9 case 9
.text:004034EE                 mov     ebx, ds:__mb_cur_max
.text:004034F4                 cmp     dword ptr [ebx], 1
.text:004034F7                 jz      short loc_403506
.text:004034F9                 mov     [esp+1Ch+Type], 8
.text:00403501                 jmp     loc_403320
.text:00403506 ; ---------------------------------------------------------------------------
.text:00403506
.text:00403506 loc_403506:                             ; CODE XREF: sub_4032B0+247↑j
.text:00403506                 mov     ebx, ds:_pctype
.text:0040350C                 mov     ecx, [ebx]
.text:0040350E                 movzx   eax, word ptr [ecx+edx*2]
.text:00403512                 and     eax, 8
.text:00403515                 jmp     loc_403328
.text:0040351A ; ---------------------------------------------------------------------------
.text:0040351A
.text:0040351A loc_40351A:                             ; CODE XREF: sub_4032B0+19↑j
.text:0040351A                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:0040351A                 mov     ecx, ds:__mb_cur_max ; jumptable 004032C9 case 10
.text:00403520                 movzx   edx, bl
.text:00403523                 cmp     dword ptr [ecx], 1
.text:00403526                 jz      short loc_403535
.text:00403528                 mov     [esp+1Ch+Type], 1
.text:00403530                 jmp     loc_403320
.text:00403535 ; ---------------------------------------------------------------------------
.text:00403535
.text:00403535 loc_403535:                             ; CODE XREF: sub_4032B0+276↑j
.text:00403535                 mov     ecx, ds:_pctype
.text:0040353B                 mov     ebx, [ecx]
.text:0040353D                 movzx   eax, word ptr [ebx+edx*2]
.text:00403541                 and     eax, 1
.text:00403544                 jmp     loc_403328
.text:00403549 ; ---------------------------------------------------------------------------
.text:00403549
.text:00403549 loc_403549:                             ; CODE XREF: sub_4032B0+19↑j
.text:00403549                                         ; DATA XREF: sub_4032B0:jpt_4032C9↑o
.text:00403549                 movzx   edx, bl         ; jumptable 004032C9 case 11
.text:0040354C                 mov     ebx, ds:__mb_cur_max
.text:00403552                 cmp     dword ptr [ebx], 1
.text:00403555                 jz      short loc_403564
.text:00403557                 mov     [esp+1Ch+Type], 80h ; '€'
.text:0040355F                 jmp     loc_403320
.text:00403564 ; ---------------------------------------------------------------------------
.text:00403564
.text:00403564 loc_403564:                             ; CODE XREF: sub_4032B0+2A5↑j
.text:00403564                 mov     ebx, ds:_pctype
.text:0040356A                 mov     ecx, [ebx]
.text:0040356C                 movzx   eax, word ptr [ecx+edx*2]
.text:00403570                 and     eax, 80h
.text:00403575                 jmp     loc_403328
.text:0040357A ; ---------------------------------------------------------------------------
.text:0040357A
.text:0040357A def_4032C9:                             ; CODE XREF: sub_4032B0+13↑j
.text:0040357A                 call    abort           ; jumptable 004032C9 default case
.text:0040357A sub_4032B0      endp
.text:0040357A
.text:0040357A ; ---------------------------------------------------------------------------
.text:0040357F                 align 10h
.text:00403580
.text:00403580 loc_403580:                             ; DATA XREF: sub_4035F0:loc_40370B↓o
.text:00403580                 ja      short loc_4035E3
.text:00403582                 jb      short loc_4035F2
.text:00403584                 imul    ebp, [esi+67h], 6874203Ah
.text:0040358B                 and     gs:[ecx+6Dh], ah
.text:0040358F                 bound   ebp, [ecx+67h]
.text:00403592                 jnz     short near ptr loc_403601+2
.text:00403594                 jnz     short loc_403609
.text:00403596                 and     [edi+63h], ch
.text:00403599                 jz      short near ptr loc_4035F9+3
.text:0040359B                 insb
.text:0040359C                 and     [ebp+73h], ah
.text:0040359F                 arpl    [ecx+70h], sp
.text:004035A2                 and     gs:[ebp+63h], bl
.text:004035A7                 and     eax, 20632563h
.text:004035AC                 imul    esi, [ebx+20h], 6E696562h
.text:004035B3                 or      cl, [bx+di]
.text:004035B6                 imul    ebp, [esi+74h], 72707265h
.text:004035BD                 db      65h
.text:004035BD                 jz      short near ptr loc_403623+2
.text:004035C0                 and     fs:[ecx+73h], ah
.text:004035C4                 and     [eax+ebp*2+65h], dh
.text:004035C8                 and     [edx], dh
.text:004035CA                 sub     eax, 65747962h
.text:004035CF                 and     [ebx+65h], dh
.text:004035D2                 jno     short near ptr loc_403648+1
.text:004035D4                 outs    dx, byte ptr gs:[esi]
.text:004035D6                 arpl    [ebp+20h], sp
.text:004035D9                 pop     esp
.text:004035DA                 xor     ds:2C632563h, ah
.text:004035E0                 and     [eax+25h], ah
.text:004035E3
.text:004035E3 loc_4035E3:                             ; CODE XREF: .text:loc_403580↑j
.text:004035E3                 arpl    [edi], sp
.text:004035E5                 add     [ebp-4372FF8Ah], cl
.text:004035EB                 daa
.text:004035EB ; ---------------------------------------------------------------------------
.text:004035EC                 dd 0
.text:004035F0
.text:004035F0 ; =============== S U B R O U T I N E =======================================
.text:004035F0
.text:004035F0
.text:004035F0 ; int __cdecl sub_4035F0(char *, int)
.text:004035F0 sub_4035F0      proc near               ; CODE XREF: sub_402390+3A1↑p
.text:004035F0                                         ; sub_402390+BD0↑p
.text:004035F0
.text:004035F0 Str             = dword ptr -3Ch
.text:004035F0 ErrorMessage    = dword ptr -38h
.text:004035F0 var_34          = dword ptr -34h
.text:004035F0 var_30          = byte ptr -30h
.text:004035F0 var_2C          = dword ptr -2Ch
.text:004035F0 var_28          = dword ptr -28h
.text:004035F0 var_24          = dword ptr -24h
.text:004035F0 var_20          = dword ptr -20h
.text:004035F0 var_1C          = dword ptr -1Ch
.text:004035F0 var_11          = byte ptr -11h
.text:004035F0 arg_0           = dword ptr  4
.text:004035F0 arg_4           = dword ptr  8
.text:004035F0
.text:004035F0                 push    ebp
.text:004035F1                 push    edi
.text:004035F2
.text:004035F2 loc_4035F2:                             ; CODE XREF: .text:00403582↑j
.text:004035F2                 push    esi
.text:004035F3                 push    ebx
.text:004035F4                 sub     esp, 2Ch
.text:004035F7                 xor     ebx, ebx
.text:004035F9
.text:004035F9 loc_4035F9:                             ; CODE XREF: .text:00403599↑j
.text:004035F9                 mov     edi, [esp+3Ch+arg_0]
.text:004035FD                 mov     ebp, [esp+3Ch+arg_4]
.text:00403601
.text:00403601 loc_403601:                             ; CODE XREF: .text:00403592↑j
.text:00403601                 mov     [esp+3Ch+Str], edi ; Str
.text:00403604                 call    strlen
.text:00403609
.text:00403609 loc_403609:                             ; CODE XREF: .text:00403594↑j
.text:00403609                 mov     [esp+3Ch+Str], eax ; size_t
.text:0040360C                 mov     esi, eax
.text:0040360E                 call    sub_407580
.text:00403613                 mov     [ebp+0], eax
.text:00403616                 mov     [esp+3Ch+Str], esi ; size_t
.text:00403619                 xor     esi, esi
.text:0040361B                 mov     [esp+3Ch+ErrorMessage], 1 ; size_t
.text:00403623
.text:00403623 loc_403623:                             ; CODE XREF: .text:004035BD↑j
.text:00403623                 call    sub_4076C0
.text:00403628                 mov     [ebp+4], eax
.text:0040362B                 movzx   eax, byte ptr [edi]
.text:0040362E                 test    al, al
.text:00403630                 jz      short loc_403657
.text:00403632                 mov     dl, al
.text:00403634                 lea     esi, [esi+0]
.text:0040363A                 lea     edi, [edi+0]
.text:00403640
.text:00403640 loc_403640:                             ; CODE XREF: sub_4035F0+65↓j
.text:00403640                 cmp     dl, 5Ch ; '\'
.text:00403643                 jz      short loc_403667
.text:00403645
.text:00403645 loc_403645:                             ; CODE XREF: sub_4035F0+116↓j
.text:00403645                 mov     eax, [ebp+0]
.text:00403648
.text:00403648 loc_403648:                             ; CODE XREF: .text:004035D2↑j
.text:00403648                 mov     [esi+eax], dl
.text:0040364B                 inc     ebx
.text:0040364C                 inc     esi
.text:0040364D                 movzx   ecx, byte ptr [ebx+edi]
.text:00403651                 test    cl, cl
.text:00403653                 mov     dl, cl
.text:00403655                 jnz     short loc_403640
.text:00403657
.text:00403657 loc_403657:                             ; CODE XREF: sub_4035F0+40↑j
.text:00403657                 mov     [ebp+8], esi
.text:0040365A                 mov     eax, 1
.text:0040365F                 add     esp, 2Ch
.text:00403662                 pop     ebx
.text:00403663                 pop     esi
.text:00403664                 pop     edi
.text:00403665                 pop     ebp
.text:00403666                 retn
.text:00403667 ; ---------------------------------------------------------------------------
.text:00403667
.text:00403667 loc_403667:                             ; CODE XREF: sub_4035F0+53↑j
.text:00403667                 mov     edx, [ebp+4]
.text:0040366A                 mov     byte ptr [esi+edx], 1
.text:0040366E                 movzx   ecx, byte ptr [ebx+edi+1]
.text:00403673                 mov     [esp+3Ch+var_11], 0Ch
.text:00403678                 movsx   eax, cl
.text:0040367B                 cmp     eax, 66h ; 'f'
.text:0040367E                 jz      loc_403700
.text:00403684                 cmp     eax, 66h ; 'f'
.text:00403687                 jg      loc_403790
.text:0040368D                 mov     [esp+3Ch+var_11], 5Ch ; '\'
.text:00403692                 cmp     eax, 5Ch ; '\'
.text:00403695                 jz      short loc_403700
.text:00403697                 cmp     eax, 5Ch ; '\'
.text:0040369A                 jg      loc_40376E
.text:004036A0                 test    eax, eax
.text:004036A2                 jz      loc_403762
.text:004036A8                 test    eax, eax
.text:004036AA                 js      short loc_4036F8
.text:004036AC                 sub     eax, 30h ; '0'
.text:004036AF                 cmp     eax, 7
.text:004036B2                 ja      short loc_4036F8
.text:004036B4                 sub     cl, 30h ; '0'
.text:004036B7                 mov     [esp+3Ch+var_11], cl
.text:004036BB                 movsx   ecx, byte ptr [ebx+edi+2]
.text:004036C0                 lea     edx, [ecx-30h]
.text:004036C3                 cmp     edx, 7
.text:004036C6                 ja      short loc_403700
.text:004036C8                 shl     [esp+3Ch+var_11], 3
.text:004036CD                 inc     ebx
.text:004036CE                 add     [esp+3Ch+var_11], dl
.text:004036D2                 movsx   ecx, byte ptr [ebx+edi+2]
.text:004036D7                 lea     edx, [ecx-30h]
.text:004036DA                 cmp     edx, 7
.text:004036DD                 ja      short loc_403700
.text:004036DF                 movzx   eax, [esp+3Ch+var_11]
.text:004036E4                 lea     ecx, ds:0[eax*8]
.text:004036EB                 lea     eax, [edx+ecx]
.text:004036EE                 cmp     eax, 0FFh
.text:004036F3                 jg      short loc_40370B
.text:004036F5                 add     cl, dl
.text:004036F7                 inc     ebx
.text:004036F8
.text:004036F8 loc_4036F8:                             ; CODE XREF: sub_4035F0+BA↑j
.text:004036F8                                         ; sub_4035F0+C2↑j ...
.text:004036F8                 mov     [esp+3Ch+var_11], cl
.text:004036FC                 lea     esi, [esi+0]
.text:00403700
.text:00403700 loc_403700:                             ; CODE XREF: sub_4035F0+8E↑j
.text:00403700                                         ; sub_4035F0+A5↑j ...
.text:00403700                 movzx   edx, [esp+3Ch+var_11]
.text:00403705                 inc     ebx
.text:00403706                 jmp     loc_403645
.text:0040370B ; ---------------------------------------------------------------------------
.text:0040370B
.text:0040370B loc_40370B:                             ; CODE XREF: sub_4035F0+103↑j
.text:0040370B                 mov     [esp+3Ch+Str], offset loc_403580
.text:00403712                 call    ds:libintl_gettext
.text:00403718                 movsx   ecx, byte ptr [ebx+edi+2]
.text:0040371D                 mov     [esp+3Ch+var_1C], ecx
.text:00403721                 movsx   ecx, byte ptr [ebx+edi+1]
.text:00403726                 mov     [esp+3Ch+var_20], ecx
.text:0040372A                 movsx   ecx, byte ptr [ebx+edi]
.text:0040372E                 mov     [esp+3Ch+var_24], ecx
.text:00403732                 movsx   edx, byte ptr [ebx+edi+2]
.text:00403737                 mov     [esp+3Ch+var_28], edx
.text:0040373B                 movsx   edx, byte ptr [ebx+edi+1]
.text:00403740                 mov     dword ptr [esp+3Ch+var_30], ecx ; char
.text:00403744                 mov     [esp+3Ch+var_34], eax ; char *
.text:00403748                 mov     [esp+3Ch+ErrorMessage], 0 ; ErrorMessage
.text:00403750                 mov     [esp+3Ch+var_2C], edx
.text:00403754                 mov     [esp+3Ch+Str], 0 ; Code
.text:0040375B                 call    sub_408C60
.text:00403760                 jmp     short loc_403700
.text:00403762 ; ---------------------------------------------------------------------------
.text:00403762
.text:00403762 loc_403762:                             ; CODE XREF: sub_4035F0+B2↑j
.text:00403762                 mov     byte ptr [esi+edx], 0
.text:00403766                 dec     ebx
.text:00403767                 mov     [esp+3Ch+var_11], 5Ch ; '\'
.text:0040376C                 jmp     short loc_403700
.text:0040376E ; ---------------------------------------------------------------------------
.text:0040376E
.text:0040376E loc_40376E:                             ; CODE XREF: sub_4035F0+AA↑j
.text:0040376E                 mov     [esp+3Ch+var_11], 7
.text:00403773                 cmp     eax, 61h ; 'a'
.text:00403776                 jz      short loc_403700
.text:00403778                 mov     [esp+3Ch+var_11], 8
.text:0040377D                 cmp     eax, 62h ; 'b'
.text:00403780
.text:00403780 loc_403780:                             ; CODE XREF: sub_4035F0+1BB↓j
.text:00403780                                         ; sub_4035F0+1D3↓j
.text:00403780                 jnz     loc_4036F8
.text:00403786                 jmp     loc_403700
.text:00403786 ; ---------------------------------------------------------------------------
.text:0040378B                 align 10h
.text:00403790
.text:00403790 loc_403790:                             ; CODE XREF: sub_4035F0+97↑j
.text:00403790                 mov     [esp+3Ch+var_11], 0Dh
.text:00403795                 cmp     eax, 72h ; 'r'
.text:00403798                 jz      loc_403700
.text:0040379E                 cmp     eax, 72h ; 'r'
.text:004037A1                 jg      short loc_4037AD
.text:004037A3                 mov     [esp+3Ch+var_11], 0Ah
.text:004037A8                 cmp     eax, 6Eh ; 'n'
.text:004037AB                 jmp     short loc_403780
.text:004037AD ; ---------------------------------------------------------------------------
.text:004037AD
.text:004037AD loc_4037AD:                             ; CODE XREF: sub_4035F0+1B1↑j
.text:004037AD                 mov     [esp+3Ch+var_11], 9
.text:004037B2                 cmp     eax, 74h ; 't'
.text:004037B5                 jz      loc_403700
.text:004037BB                 mov     [esp+3Ch+var_11], 0Bh
.text:004037C0                 cmp     eax, 76h ; 'v'
.text:004037C3                 jmp     short loc_403780
.text:004037C3 sub_4035F0      endp
.text:004037C3
.text:004037C3 ; ---------------------------------------------------------------------------
.text:004037C5 aListTail       db 'list->tail',0       ; DATA XREF: sub_403910+1C7↓o
.text:004037C5                                         ; sub_404E30+108↓o
.text:004037D0                 align 20h
.text:004037E0 aRangeEndpoints db 'range-endpoints of `%s-%s',27h,' are in reverse collating sequenc'
.text:004037E0                                         ; DATA XREF: sub_403910:loc_403B77↓o
.text:004037E0                 db 'e order',0
.text:00403823 ; const char a03o[]
.text:00403823 a03o            db '\%03o',0            ; DATA XREF: sub_403910+2B0↓o
.text:00403823                                         ; sub_403910:loc_403BED↓o ...
.text:00403829                 align 20h
.text:00403840 aSEquivalenceCl db '%s: equivalence class operand must be a single character',0
.text:00403840                                         ; DATA XREF: sub_403910+4A2↓o
.text:00403879 aInvalidCharact db 'invalid character class `%s',27h,0
.text:00403879                                         ; DATA XREF: sub_403910+639↓o
.text:00403896                 align 10h
.text:004038A0 aMissingEquival db 'missing equivalence class character `[==]',27h,0
.text:004038A0                                         ; DATA XREF: sub_403910+6A4↓o
.text:004038CB                 align 20h
.text:004038E0 aMissingCharact db 'missing character class name `[::]',27h,0
.text:004038E0                                         ; DATA XREF: sub_403910:loc_403FDE↓o
.text:00403904                 align 10h
.text:00403910
.text:00403910 ; =============== S U B R O U T I N E =======================================
.text:00403910
.text:00403910
.text:00403910 sub_403910      proc near               ; CODE XREF: sub_402390+C14↑p
.text:00403910                                         ; sub_402390+C30↑p
.text:00403910
.text:00403910 C               = dword ptr -6Ch
.text:00403910 Type            = dword ptr -68h
.text:00403910 MaxCount        = dword ptr -64h
.text:00403910 var_60          = byte ptr -60h
.text:00403910 var_5C          = dword ptr -5Ch
.text:00403910 var_48          = dword ptr -48h
.text:00403910 var_3E          = byte ptr -3Eh
.text:00403910 var_3D          = byte ptr -3Dh
.text:00403910 var_3C          = dword ptr -3Ch
.text:00403910 Str1            = dword ptr -38h
.text:00403910 var_34          = dword ptr -34h
.text:00403910 var_30          = dword ptr -30h
.text:00403910 var_2C          = dword ptr -2Ch
.text:00403910 var_25          = byte ptr -25h
.text:00403910 var_24          = dword ptr -24h
.text:00403910 var_20          = dword ptr -20h
.text:00403910 var_1C          = dword ptr -1Ch
.text:00403910 var_18          = dword ptr -18h
.text:00403910 arg_0           = dword ptr  4
.text:00403910 arg_4           = dword ptr  8
.text:00403910
.text:00403910                 push    ebp
.text:00403911                 push    edi
.text:00403912                 xor     edi, edi
.text:00403914                 push    esi
.text:00403915                 push    ebx
.text:00403916                 sub     esp, 5Ch
.text:00403919                 mov     edx, [esp+6Ch+arg_0]
.text:0040391D                 mov     eax, [esp+6Ch+arg_0]
.text:00403921                 mov     ecx, [edx]
.text:00403923                 mov     edx, ecx
.text:00403925                 mov     [esp+6Ch+var_2C], ecx
.text:00403929                 mov     ecx, [eax+8]
.text:0040392C                 cmp     ecx, 2
.text:0040392F                 jbe     loc_403A80
.text:00403935                 lea     esi, [esi+0]
.text:00403939                 lea     edi, [edi+0]
.text:00403940
.text:00403940 loc_403940:                             ; CODE XREF: sub_403910+165↓j
.text:00403940                 xor     ebx, ebx
.text:00403942                 cmp     byte ptr [edi+edx], 5Bh ; '['
.text:00403946                 jz      loc_404020
.text:0040394C
.text:0040394C loc_40394C:                             ; CODE XREF: sub_403910+71B↓j
.text:0040394C                                         ; sub_403910+723↓j
.text:0040394C                 test    bl, bl
.text:0040394E                 jz      loc_4039F1
.text:00403954                 lea     ebp, [edi+1]
.text:00403957                 xor     ebx, ebx
.text:00403959                 mov     [esp+6Ch+var_30], ebp
.text:0040395D                 cmp     byte ptr [ebp+edx+0], 3Ah ; ':'
.text:00403962                 jz      loc_404000
.text:00403968
.text:00403968 loc_403968:                             ; CODE XREF: sub_403910+6FC↓j
.text:00403968                                         ; sub_403910+704↓j
.text:00403968                 test    bl, bl
.text:0040396A                 jnz     short loc_403981
.text:0040396C                 mov     ebp, [esp+6Ch+var_30]
.text:00403970                 xor     ebx, ebx
.text:00403972                 cmp     byte ptr [ebp+edx+0], 3Dh ; '='
.text:00403977                 jz      loc_403FE7
.text:0040397D
.text:0040397D loc_40397D:                             ; CODE XREF: sub_403910+6E3↓j
.text:0040397D                                         ; sub_403910+6EB↓j
.text:0040397D                 test    bl, bl
.text:0040397F                 jz      short loc_4039AE
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: sub_403910+5A↑j
.text:00403981                 mov     eax, [esp+6Ch+var_2C]
.text:00403985                 lea     esi, [edi+2]
.text:00403988                 dec     ecx
.text:00403989                 cmp     esi, ecx
.text:0040398B                 movzx   ebx, byte ptr [edi+eax+1]
.text:00403990                 mov     eax, esi
.text:00403992                 jnb     short loc_4039AE
.text:00403994                 lea     esi, [esi+0]
.text:0040399A                 lea     edi, [edi+0]
.text:004039A0
.text:004039A0 loc_4039A0:                             ; CODE XREF: sub_403910+9C↓j
.text:004039A0                 cmp     [eax+edx], bl
.text:004039A3                 jz      loc_403CE0
.text:004039A9
.text:004039A9 loc_4039A9:                             ; CODE XREF: sub_403910+3D5↓j
.text:004039A9                                         ; sub_403910+3EA↓j ...
.text:004039A9                 inc     eax
.text:004039AA                 cmp     eax, ecx
.text:004039AC                 jb      short loc_4039A0
.text:004039AE
.text:004039AE loc_4039AE:                             ; CODE XREF: sub_403910+6F↑j
.text:004039AE                                         ; sub_403910+82↑j ...
.text:004039AE                 mov     eax, [esp+6Ch+var_30]
.text:004039B2                 lea     edx, [esp+6Ch+var_1C]
.text:004039B6                 mov     ebp, [esp+6Ch+arg_0]
.text:004039BA                 mov     [esp+6Ch+var_5C], edx
.text:004039BE                 lea     ecx, [esp+6Ch+var_25]
.text:004039C2                 lea     esi, [esp+6Ch+var_24]
.text:004039C6                 mov     dword ptr [esp+6Ch+var_60], esi
.text:004039CA                 mov     [esp+6Ch+MaxCount], ecx
.text:004039CE                 mov     [esp+6Ch+Type], eax
.text:004039D2                 mov     [esp+6Ch+C], ebp
.text:004039D5                 call    sub_404A30
.text:004039DA                 test    eax, eax
.text:004039DC                 jz      loc_403C7C
.text:004039E2                 xor     edx, edx
.text:004039E4                 inc     eax
.text:004039E5                 jnz     loc_403AE8
.text:004039EB                 mov     eax, [esp+6Ch+arg_0]
.text:004039EF                 mov     edx, [eax]
.text:004039F1
.text:004039F1 loc_4039F1:                             ; CODE XREF: sub_403910+3E↑j
.text:004039F1                 lea     esi, [edi+1]
.text:004039F4                 xor     ecx, ecx
.text:004039F6                 cmp     byte ptr [esi+edx], 2Dh ; '-'
.text:004039FA                 jz      loc_403C64
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_403910+35F↓j
.text:00403A00                                         ; sub_403910+367↓j
.text:00403A00                 test    cl, cl
.text:00403A02                 jz      loc_403C20
.text:00403A08                 mov     esi, [esp+6Ch+var_2C]
.text:00403A0C                 movzx   ebx, byte ptr [edi+esi]
.text:00403A10                 movzx   edx, byte ptr [edi+esi+2]
.text:00403A15                 cmp     dl, bl
.text:00403A17                 mov     [esp+6Ch+var_3E], dl
.text:00403A1B                 jb      loc_403AFC
.text:00403A21                 mov     [esp+6Ch+C], 18h ; size_t
.text:00403A28                 call    sub_407580
.text:00403A2D                 mov     [eax+8], bl
.text:00403A30                 movzx   edx, [esp+6Ch+var_3E]
.text:00403A35                 mov     dword ptr [eax+4], 0
.text:00403A3C                 mov     dword ptr [eax], 1
.text:00403A42                 mov     [eax+9], dl
.text:00403A45                 mov     ebx, [esp+6Ch+arg_4]
.text:00403A49                 mov     edx, [ebx+4]
.text:00403A4C                 test    edx, edx
.text:00403A4E                 jz      loc_403AF2
.text:00403A54                 mov     [edx+4], eax
.text:00403A57                 mov     esi, [esp+6Ch+arg_4]
.text:00403A5B                 add     edi, 3
.text:00403A5E                 mov     [esi+4], eax
.text:00403A61
.text:00403A61 loc_403A61:                             ; CODE XREF: sub_403910+34F↓j
.text:00403A61                                         ; sub_403910+3BE↓j ...
.text:00403A61                 mov     eax, [esp+6Ch+arg_0]
.text:00403A65                 lea     ebp, [edi+2]
.text:00403A68                 mov     ecx, [eax+8]
.text:00403A6B                 cmp     ebp, ecx
.text:00403A6D                 jnb     short loc_403A80
.text:00403A6F                 mov     eax, [esp+6Ch+arg_0]
.text:00403A73                 mov     edx, [eax]
.text:00403A75                 jmp     loc_403940
.text:00403A75 ; ---------------------------------------------------------------------------
.text:00403A7A                 align 10h
.text:00403A80
.text:00403A80 loc_403A80:                             ; CODE XREF: sub_403910+1F↑j
.text:00403A80                                         ; sub_403910+15D↑j ...
.text:00403A80                 cmp     edi, ecx
.text:00403A82                 jnb     short loc_403AE3
.text:00403A84                 mov     edx, [esp+6Ch+var_2C]
.text:00403A88                 movzx   ebx, byte ptr [edi+edx]
.text:00403A8C                 mov     [esp+6Ch+C], 18h ; size_t
.text:00403A93                 call    sub_407580
.text:00403A98                 mov     dword ptr [eax+4], 0
.text:00403A9F                 mov     [eax+8], bl
.text:00403AA2                 mov     ecx, [esp+6Ch+arg_4]
.text:00403AA6                 mov     dword ptr [eax], 0
.text:00403AAC                 mov     edx, [ecx+4]
.text:00403AAF                 test    edx, edx
.text:00403AB1                 jz      short loc_403AC7
.text:00403AB3                 mov     [edx+4], eax
.text:00403AB6                 mov     esi, [esp+6Ch+arg_0]
.text:00403ABA                 inc     edi
.text:00403ABB                 mov     ebx, [esp+6Ch+arg_4]
.text:00403ABF                 mov     ecx, [esi+8]
.text:00403AC2                 mov     [ebx+4], eax
.text:00403AC5                 jmp     short loc_403A80
.text:00403AC7 ; ---------------------------------------------------------------------------
.text:00403AC7
.text:00403AC7 loc_403AC7:                             ; CODE XREF: sub_403910+1A1↑j
.text:00403AC7                                         ; sub_403910+33D↓j
.text:00403AC7                 mov     [esp+6Ch+MaxCount], 294h
.text:00403ACF
.text:00403ACF loc_403ACF:                             ; CODE XREF: sub_403910+1EA↓j
.text:00403ACF                                         ; sub_403910+3CB↓j ...
.text:00403ACF                 mov     [esp+6Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00403AD7                 mov     [esp+6Ch+C], offset aListTail ; "list->tail"
.text:00403ADE                 call    _assert
.text:00403AE3 ; ---------------------------------------------------------------------------
.text:00403AE3
.text:00403AE3 loc_403AE3:                             ; CODE XREF: sub_403910+172↑j
.text:00403AE3                 mov     edx, 1
.text:00403AE8
.text:00403AE8 loc_403AE8:                             ; CODE XREF: sub_403910+D5↑j
.text:00403AE8                                         ; sub_403910+2A6↓j
.text:00403AE8                 add     esp, 5Ch
.text:00403AEB                 mov     eax, edx
.text:00403AED                 pop     ebx
.text:00403AEE                 pop     esi
.text:00403AEF                 pop     edi
.text:00403AF0                 pop     ebp
.text:00403AF1                 retn
.text:00403AF2 ; ---------------------------------------------------------------------------
.text:00403AF2
.text:00403AF2 loc_403AF2:                             ; CODE XREF: sub_403910+13E↑j
.text:00403AF2                 mov     [esp+6Ch+MaxCount], 2B4h
.text:00403AFA                 jmp     short loc_403ACF
.text:00403AFC ; ---------------------------------------------------------------------------
.text:00403AFC
.text:00403AFC loc_403AFC:                             ; CODE XREF: sub_403910+10B↑j
.text:00403AFC                 mov     [esp+6Ch+C], 5  ; size_t
.text:00403B03                 call    sub_407580
.text:00403B08                 mov     edi, ds:__mb_cur_max
.text:00403B0E                 mov     esi, eax
.text:00403B10                 movzx   edx, bl
.text:00403B13                 cmp     dword ptr [edi], 1
.text:00403B16                 jz      loc_403C09
.text:00403B1C                 mov     [esp+6Ch+Type], 157h ; Type
.text:00403B24                 mov     [esp+6Ch+C], edx ; C
.text:00403B27                 call    _isctype
.text:00403B2C
.text:00403B2C loc_403B2C:                             ; CODE XREF: sub_403910+30B↓j
.text:00403B2C                 test    eax, eax
.text:00403B2E                 jz      loc_403BED
.text:00403B34                 mov     [esi], bl
.text:00403B36                 mov     byte ptr [esi+1], 0
.text:00403B3A
.text:00403B3A loc_403B3A:                             ; CODE XREF: sub_403910+2F4↓j
.text:00403B3A                 mov     [esp+6Ch+C], 5  ; size_t
.text:00403B41                 call    sub_407580
.text:00403B46                 movzx   edx, [esp+6Ch+var_3E]
.text:00403B4B                 mov     ebx, eax
.text:00403B4D                 mov     edi, ds:__mb_cur_max
.text:00403B53                 cmp     dword ptr [edi], 1
.text:00403B56                 jz      short loc_403BD6
.text:00403B58                 mov     [esp+6Ch+Type], 157h ; Type
.text:00403B60                 mov     [esp+6Ch+C], edx ; C
.text:00403B63                 call    _isctype
.text:00403B68
.text:00403B68 loc_403B68:                             ; CODE XREF: sub_403910+2D8↓j
.text:00403B68                 test    eax, eax
.text:00403B6A                 jz      short loc_403BBB
.text:00403B6C                 movzx   eax, [esp+6Ch+var_3E]
.text:00403B71                 mov     byte ptr [ebx+1], 0
.text:00403B75                 mov     [ebx], al
.text:00403B77
.text:00403B77 loc_403B77:                             ; CODE XREF: sub_403910+2C4↓j
.text:00403B77                 mov     [esp+6Ch+C], offset aRangeEndpoints ; "range-endpoints of `%s-%s' are in rever"...
.text:00403B7E                 call    ds:libintl_gettext
.text:00403B84                 mov     [esp+6Ch+var_5C], ebx
.text:00403B88                 mov     dword ptr [esp+6Ch+var_60], esi ; char
.text:00403B8C                 mov     [esp+6Ch+Type], 0 ; ErrorMessage
.text:00403B94                 mov     [esp+6Ch+MaxCount], eax ; char *
.text:00403B98                 mov     [esp+6Ch+C], 0  ; Code
.text:00403B9F                 call    sub_408C60
.text:00403BA4                 mov     [esp+6Ch+C], esi ; Block
.text:00403BA7                 call    free
.text:00403BAC
.text:00403BAC loc_403BAC:                             ; CODE XREF: sub_403910+4CD↓j
.text:00403BAC                 mov     [esp+6Ch+C], ebx ; Block
.text:00403BAF                 call    free
.text:00403BB4
.text:00403BB4 loc_403BB4:                             ; CODE XREF: sub_403910+6C9↓j
.text:00403BB4                 xor     edx, edx
.text:00403BB6                 jmp     loc_403AE8
.text:00403BBB ; ---------------------------------------------------------------------------
.text:00403BBB
.text:00403BBB loc_403BBB:                             ; CODE XREF: sub_403910+25A↑j
.text:00403BBB                 movzx   edx, [esp+6Ch+var_3E]
.text:00403BC0                 mov     [esp+6Ch+Type], offset a03o ; "\\%03o"
.text:00403BC8                 mov     [esp+6Ch+C], ebx ; Buffer
.text:00403BCB                 mov     [esp+6Ch+MaxCount], edx
.text:00403BCF                 call    sprintf
.text:00403BD4                 jmp     short loc_403B77
.text:00403BD6 ; ---------------------------------------------------------------------------
.text:00403BD6
.text:00403BD6 loc_403BD6:                             ; CODE XREF: sub_403910+246↑j
.text:00403BD6                 mov     ebp, ds:_pctype
.text:00403BDC                 mov     ecx, [ebp+0]
.text:00403BDF                 movzx   eax, word ptr [ecx+edx*2]
.text:00403BE3                 and     eax, 157h
.text:00403BE8                 jmp     loc_403B68
.text:00403BED ; ---------------------------------------------------------------------------
.text:00403BED
.text:00403BED loc_403BED:                             ; CODE XREF: sub_403910+21E↑j
.text:00403BED                 mov     [esp+6Ch+Type], offset a03o ; "\\%03o"
.text:00403BF5                 movzx   edx, bl
.text:00403BF8                 mov     [esp+6Ch+MaxCount], edx
.text:00403BFC                 mov     [esp+6Ch+C], esi ; Buffer
.text:00403BFF                 call    sprintf
.text:00403C04                 jmp     loc_403B3A
.text:00403C09 ; ---------------------------------------------------------------------------
.text:00403C09
.text:00403C09 loc_403C09:                             ; CODE XREF: sub_403910+206↑j
.text:00403C09                 mov     ebp, ds:_pctype
.text:00403C0F                 mov     ecx, [ebp+0]
.text:00403C12                 movzx   eax, word ptr [ecx+edx*2]
.text:00403C16                 and     eax, 157h
.text:00403C1B                 jmp     loc_403B2C
.text:00403C20 ; ---------------------------------------------------------------------------
.text:00403C20
.text:00403C20 loc_403C20:                             ; CODE XREF: sub_403910+F2↑j
.text:00403C20                 mov     ecx, [esp+6Ch+var_2C]
.text:00403C24                 movzx   ebx, byte ptr [edi+ecx]
.text:00403C28                 mov     [esp+6Ch+C], 18h ; size_t
.text:00403C2F                 call    sub_407580
.text:00403C34                 mov     dword ptr [eax+4], 0
.text:00403C3B                 mov     [eax+8], bl
.text:00403C3E                 mov     edi, [esp+6Ch+arg_4]
.text:00403C42                 mov     dword ptr [eax], 0
.text:00403C48                 mov     edx, [edi+4]
.text:00403C4B                 test    edx, edx
.text:00403C4D                 jz      loc_403AC7
.text:00403C53                 mov     [edx+4], eax
.text:00403C56                 mov     ebx, [esp+6Ch+arg_4]
.text:00403C5A                 mov     edi, esi
.text:00403C5C                 mov     [ebx+4], eax
.text:00403C5F                 jmp     loc_403A61
.text:00403C64 ; ---------------------------------------------------------------------------
.text:00403C64
.text:00403C64 loc_403C64:                             ; CODE XREF: sub_403910+EA↑j
.text:00403C64                 mov     ebx, [esp+6Ch+arg_0]
.text:00403C68                 mov     ebp, [ebx+4]
.text:00403C6B                 cmp     byte ptr [esi+ebp], 0
.text:00403C6F                 jnz     loc_403A00
.text:00403C75                 mov     cl, 1
.text:00403C77                 jmp     loc_403A00
.text:00403C7C ; ---------------------------------------------------------------------------
.text:00403C7C
.text:00403C7C loc_403C7C:                             ; CODE XREF: sub_403910+CC↑j
.text:00403C7C                 movzx   ecx, [esp+6Ch+var_25]
.text:00403C81                 mov     [esp+6Ch+C], 18h ; size_t
.text:00403C88                 mov     esi, [esp+6Ch+var_24]
.text:00403C8C                 mov     ebp, [esp+6Ch+var_20]
.text:00403C90                 mov     [esp+6Ch+var_3D], cl
.text:00403C94                 call    sub_407580
.text:00403C99                 movzx   ebx, [esp+6Ch+var_3D]
.text:00403C9E                 mov     [eax+10h], esi
.text:00403CA1                 mov     [eax+14h], ebp
.text:00403CA4                 mov     dword ptr [eax+4], 0
.text:00403CAB                 mov     [eax+8], bl
.text:00403CAE                 mov     edi, [esp+6Ch+arg_4]
.text:00403CB2                 mov     dword ptr [eax], 4
.text:00403CB8                 mov     edx, [edi+4]
.text:00403CBB                 test    edx, edx
.text:00403CBD                 jz      short loc_403CD3
.text:00403CBF                 mov     [edx+4], eax
.text:00403CC2                 mov     edi, [esp+6Ch+var_1C]
.text:00403CC6                 mov     edx, [esp+6Ch+arg_4]
.text:00403CCA                 inc     edi
.text:00403CCB                 mov     [edx+4], eax
.text:00403CCE                 jmp     loc_403A61
.text:00403CD3 ; ---------------------------------------------------------------------------
.text:00403CD3
.text:00403CD3 loc_403CD3:                             ; CODE XREF: sub_403910+3AD↑j
.text:00403CD3                 mov     [esp+6Ch+MaxCount], 2E3h
.text:00403CDB                 jmp     loc_403ACF
.text:00403CE0 ; ---------------------------------------------------------------------------
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: sub_403910+93↑j
.text:00403CE0                 cmp     byte ptr [eax+edx+1], 5Dh ; ']'
.text:00403CE5                 jnz     loc_4039A9
.text:00403CEB                 mov     ebp, [esp+6Ch+arg_0]
.text:00403CEF                 mov     ebp, [ebp+4]
.text:00403CF2                 cmp     byte ptr [eax+ebp], 0
.text:00403CF6                 mov     [esp+6Ch+var_48], ebp
.text:00403CFA                 jnz     loc_4039A9
.text:00403D00                 cmp     byte ptr [eax+ebp+1], 0
.text:00403D05                 jnz     loc_4039A9
.text:00403D0B                 mov     [esp+6Ch+var_18], eax
.text:00403D0F                 mov     ebx, [esp+6Ch+var_2C]
.text:00403D13                 sub     eax, edi
.text:00403D15                 add     ebx, edi
.text:00403D17                 lea     ecx, [ebx+2]
.text:00403D1A                 sub     eax, 2
.text:00403D1D                 mov     [esp+6Ch+Str1], ecx
.text:00403D21                 mov     [esp+6Ch+var_34], eax
.text:00403D25                 jz      loc_403FA9
.text:00403D2B                 mov     edx, [esp+6Ch+var_2C]
.text:00403D2F                 cmp     byte ptr [edi+edx+1], 3Ah ; ':'
.text:00403D34                 jz      loc_403E67
.text:00403D3A                 cmp     [esp+6Ch+var_34], 1
.text:00403D3F                 jz      loc_403E17
.text:00403D45                 mov     edx, [esp+6Ch+arg_0]
.text:00403D49                 xor     eax, eax
.text:00403D4B                 mov     ebx, [edx]
.text:00403D4D                 mov     [esp+6Ch+var_3C], ebx
.text:00403D51                 cmp     byte ptr [esi+ebx], 2Ah ; '*'
.text:00403D55                 jz      loc_403E02
.text:00403D5B
.text:00403D5B loc_403D5B:                             ; CODE XREF: sub_403910+4FA↓j
.text:00403D5B                                         ; sub_403910+502↓j
.text:00403D5B                 test    al, al
.text:00403D5D                 jz      short loc_403D9E
.text:00403D5F                 mov     ecx, [esp+6Ch+arg_0]
.text:00403D63                 lea     edx, [esi+1]
.text:00403D66                 mov     eax, [ecx+8]
.text:00403D69                 cmp     edx, eax
.text:00403D6B                 mov     ebx, eax
.text:00403D6D                 jnb     short loc_403D94
.text:00403D6F
.text:00403D6F loc_403D6F:                             ; CODE XREF: sub_403910+482↓j
.text:00403D6F                 mov     eax, [esp+6Ch+var_3C]
.text:00403D73                 movzx   ecx, byte ptr [edx+eax]
.text:00403D77                 movzx   esi, cl
.text:00403D7A                 sub     esi, 30h ; '0'
.text:00403D7D                 cmp     esi, 9
.text:00403D80                 ja      short loc_403DE2
.text:00403D82                 mov     eax, [esp+6Ch+arg_0]
.text:00403D86                 mov     ebp, [eax+4]
.text:00403D89                 cmp     byte ptr [edx+ebp], 0
.text:00403D8D                 jnz     short loc_403DE2
.text:00403D8F                 inc     edx
.text:00403D90                 cmp     edx, ebx
.text:00403D92                 jb      short loc_403D6F
.text:00403D94
.text:00403D94 loc_403D94:                             ; CODE XREF: sub_403910+45D↑j
.text:00403D94                 xor     eax, eax
.text:00403D96
.text:00403D96 loc_403D96:                             ; CODE XREF: sub_403910+4DF↓j
.text:00403D96                 test    al, al
.text:00403D98                 jnz     loc_4039AE
.text:00403D9E
.text:00403D9E loc_403D9E:                             ; CODE XREF: sub_403910+44D↑j
.text:00403D9E                 mov     ebx, [esp+6Ch+var_34]
.text:00403DA2                 mov     edi, [esp+6Ch+Str1]
.text:00403DA6                 mov     [esp+6Ch+Type], ebx
.text:00403DAA                 mov     [esp+6Ch+C], edi
.text:00403DAD                 call    sub_4048C0
.text:00403DB2                 mov     [esp+6Ch+C], offset aSEquivalenceCl ; "%s: equivalence class operand must be a"...
.text:00403DB9
.text:00403DB9 loc_403DB9:                             ; CODE XREF: sub_403910+640↓j
.text:00403DB9                 mov     ebx, eax
.text:00403DBB                 call    ds:libintl_gettext
.text:00403DC1                 mov     dword ptr [esp+6Ch+var_60], ebx ; char
.text:00403DC5                 mov     [esp+6Ch+Type], 0 ; ErrorMessage
.text:00403DCD                 mov     [esp+6Ch+C], 0  ; Code
.text:00403DD4                 mov     [esp+6Ch+MaxCount], eax ; char *
.text:00403DD8                 call    sub_408C60
.text:00403DDD                 jmp     loc_403BAC
.text:00403DE2 ; ---------------------------------------------------------------------------
.text:00403DE2
.text:00403DE2 loc_403DE2:                             ; CODE XREF: sub_403910+470↑j
.text:00403DE2                                         ; sub_403910+47D↑j
.text:00403DE2                 xor     ebx, ebx
.text:00403DE4                 cmp     cl, 5Dh ; ']'
.text:00403DE7                 jz      short loc_403DF1
.text:00403DE9
.text:00403DE9 loc_403DE9:                             ; CODE XREF: sub_403910+4EC↓j
.text:00403DE9                                         ; sub_403910+4F0↓j
.text:00403DE9                 movzx   edx, bl
.text:00403DEC                 movzx   eax, dl
.text:00403DEF                 jmp     short loc_403D96
.text:00403DF1 ; ---------------------------------------------------------------------------
.text:00403DF1
.text:00403DF1 loc_403DF1:                             ; CODE XREF: sub_403910+4D7↑j
.text:00403DF1                 mov     esi, [esp+6Ch+arg_0]
.text:00403DF5                 mov     ecx, [esi+4]
.text:00403DF8                 cmp     byte ptr [edx+ecx], 0
.text:00403DFC                 jnz     short loc_403DE9
.text:00403DFE                 mov     bl, 1
.text:00403E00                 jmp     short loc_403DE9
.text:00403E02 ; ---------------------------------------------------------------------------
.text:00403E02
.text:00403E02 loc_403E02:                             ; CODE XREF: sub_403910+445↑j
.text:00403E02                 mov     ebp, [esp+6Ch+var_48]
.text:00403E06                 cmp     byte ptr [esi+ebp], 0
.text:00403E0A                 jnz     loc_403D5B
.text:00403E10                 mov     al, 1
.text:00403E12                 jmp     loc_403D5B
.text:00403E17 ; ---------------------------------------------------------------------------
.text:00403E17
.text:00403E17 loc_403E17:                             ; CODE XREF: sub_403910+42F↑j
.text:00403E17                 mov     [esp+6Ch+C], 18h ; size_t
.text:00403E1E                 call    sub_407580
.text:00403E23                 mov     dword ptr [eax+4], 0
.text:00403E2A                 mov     edx, eax
.text:00403E2C                 mov     dword ptr [eax], 3
.text:00403E32                 movzx   ecx, byte ptr [ebx+2]
.text:00403E36                 mov     [eax+8], cl
.text:00403E39                 mov     ebx, [esp+6Ch+arg_4]
.text:00403E3D                 mov     eax, [ebx+4]
.text:00403E40                 test    eax, eax
.text:00403E42                 jz      short loc_403E5A
.text:00403E44                 mov     [eax+4], edx
.text:00403E47                 mov     eax, [esp+6Ch+arg_4]
.text:00403E4B                 mov     [eax+4], edx
.text:00403E4E
.text:00403E4E loc_403E4E:                             ; CODE XREF: sub_403910+5C4↓j
.text:00403E4E                 mov     edi, [esp+6Ch+var_18]
.text:00403E52                 add     edi, 2
.text:00403E55                 jmp     loc_403A61
.text:00403E5A ; ---------------------------------------------------------------------------
.text:00403E5A
.text:00403E5A loc_403E5A:                             ; CODE XREF: sub_403910+532↑j
.text:00403E5A                 mov     [esp+6Ch+MaxCount], 2FAh
.text:00403E62                 jmp     loc_403ACF
.text:00403E67 ; ---------------------------------------------------------------------------
.text:00403E67
.text:00403E67 loc_403E67:                             ; CODE XREF: sub_403910+424↑j
.text:00403E67                 xor     ebp, ebp
.text:00403E69
.text:00403E69 loc_403E69:                             ; CODE XREF: sub_403910+584↓j
.text:00403E69                 mov     ecx, [esp+6Ch+var_34]
.text:00403E6D                 mov     ebx, ds:Str[ebp*4]
.text:00403E74                 mov     eax, [esp+6Ch+Str1]
.text:00403E78                 mov     [esp+6Ch+MaxCount], ecx ; MaxCount
.text:00403E7C                 mov     [esp+6Ch+Type], ebx ; Str2
.text:00403E80                 mov     [esp+6Ch+C], eax ; Str1
.text:00403E83                 call    strncmp
.text:00403E88                 test    eax, eax
.text:00403E8A                 jz      loc_403F90
.text:00403E90
.text:00403E90 loc_403E90:                             ; CODE XREF: sub_403910+68E↓j
.text:00403E90                 inc     ebp
.text:00403E91                 cmp     ebp, 0Bh
.text:00403E94                 jbe     short loc_403E69
.text:00403E96                 mov     ebx, 270Fh
.text:00403E9B
.text:00403E9B loc_403E9B:                             ; CODE XREF: sub_403910+694↓j
.text:00403E9B                 cmp     ebx, 270Fh
.text:00403EA1                 jz      short loc_403EE6
.text:00403EA3                 mov     [esp+6Ch+C], 18h ; size_t
.text:00403EAA                 call    sub_407580
.text:00403EAF                 mov     [eax+8], ebx
.text:00403EB2                 mov     esi, [esp+6Ch+arg_4]
.text:00403EB6                 mov     dword ptr [eax+4], 0
.text:00403EBD                 mov     dword ptr [eax], 2
.text:00403EC3                 mov     edx, [esi+4]
.text:00403EC6                 test    edx, edx
.text:00403EC8                 jz      short loc_403ED9
.text:00403ECA                 mov     [edx+4], eax
.text:00403ECD                 mov     edi, [esp+6Ch+arg_4]
.text:00403ED1                 mov     [edi+4], eax
.text:00403ED4                 jmp     loc_403E4E
.text:00403ED9 ; ---------------------------------------------------------------------------
.text:00403ED9
.text:00403ED9 loc_403ED9:                             ; CODE XREF: sub_403910+5B8↑j
.text:00403ED9                 mov     [esp+6Ch+MaxCount], 2CDh
.text:00403EE1                 jmp     loc_403ACF
.text:00403EE6 ; ---------------------------------------------------------------------------
.text:00403EE6
.text:00403EE6 loc_403EE6:                             ; CODE XREF: sub_403910+591↑j
.text:00403EE6                 mov     edx, [esp+6Ch+arg_0]
.text:00403EEA                 xor     ecx, ecx
.text:00403EEC                 mov     ebx, [edx]
.text:00403EEE                 cmp     byte ptr [esi+ebx], 2Ah ; '*'
.text:00403EF2                 mov     ebp, ebx
.text:00403EF4                 jz      short loc_403F75
.text:00403EF6
.text:00403EF6 loc_403EF6:                             ; CODE XREF: sub_403910+670↓j
.text:00403EF6                                         ; sub_403910+678↓j
.text:00403EF6                 test    cl, cl
.text:00403EF8                 jz      short loc_403F35
.text:00403EFA                 mov     ecx, [esp+6Ch+arg_0]
.text:00403EFE                 lea     edx, [esi+1]
.text:00403F01                 mov     eax, [ecx+8]
.text:00403F04                 cmp     edx, eax
.text:00403F06                 mov     ebx, eax
.text:00403F08                 jnb     short loc_403F2B
.text:00403F0A
.text:00403F0A loc_403F0A:                             ; CODE XREF: sub_403910+619↓j
.text:00403F0A                 movzx   ecx, byte ptr [edx+ebp]
.text:00403F0E                 movzx   esi, cl
.text:00403F11                 sub     esi, 30h ; '0'
.text:00403F14                 cmp     esi, 9
.text:00403F17                 ja      short loc_403F55
.text:00403F19                 mov     esi, [esp+6Ch+arg_0]
.text:00403F1D                 mov     eax, [esi+4]
.text:00403F20                 cmp     byte ptr [edx+eax], 0
.text:00403F24                 jnz     short loc_403F55
.text:00403F26                 inc     edx
.text:00403F27                 cmp     edx, ebx
.text:00403F29                 jb      short loc_403F0A
.text:00403F2B
.text:00403F2B loc_403F2B:                             ; CODE XREF: sub_403910+5F8↑j
.text:00403F2B                 xor     eax, eax
.text:00403F2D
.text:00403F2D loc_403F2D:                             ; CODE XREF: sub_403910+652↓j
.text:00403F2D                 test    al, al
.text:00403F2F                 jnz     loc_4039AE
.text:00403F35
.text:00403F35 loc_403F35:                             ; CODE XREF: sub_403910+5E8↑j
.text:00403F35                 mov     edi, [esp+6Ch+var_34]
.text:00403F39                 mov     ebp, [esp+6Ch+Str1]
.text:00403F3D                 mov     [esp+6Ch+Type], edi
.text:00403F41                 mov     [esp+6Ch+C], ebp
.text:00403F44                 call    sub_4048C0
.text:00403F49                 mov     [esp+6Ch+C], offset aInvalidCharact ; "invalid character class `%s'"
.text:00403F50                 jmp     loc_403DB9
.text:00403F55 ; ---------------------------------------------------------------------------
.text:00403F55
.text:00403F55 loc_403F55:                             ; CODE XREF: sub_403910+607↑j
.text:00403F55                                         ; sub_403910+614↑j
.text:00403F55                 xor     ebx, ebx
.text:00403F57                 cmp     cl, 5Dh ; ']'
.text:00403F5A                 jz      short loc_403F64
.text:00403F5C
.text:00403F5C loc_403F5C:                             ; CODE XREF: sub_403910+65F↓j
.text:00403F5C                                         ; sub_403910+663↓j
.text:00403F5C                 movzx   edx, bl
.text:00403F5F                 movzx   eax, dl
.text:00403F62                 jmp     short loc_403F2D
.text:00403F64 ; ---------------------------------------------------------------------------
.text:00403F64
.text:00403F64 loc_403F64:                             ; CODE XREF: sub_403910+64A↑j
.text:00403F64                 mov     eax, [esp+6Ch+arg_0]
.text:00403F68                 mov     ecx, [eax+4]
.text:00403F6B                 cmp     byte ptr [edx+ecx], 0
.text:00403F6F                 jnz     short loc_403F5C
.text:00403F71                 mov     bl, 1
.text:00403F73                 jmp     short loc_403F5C
.text:00403F75 ; ---------------------------------------------------------------------------
.text:00403F75
.text:00403F75 loc_403F75:                             ; CODE XREF: sub_403910+5E4↑j
.text:00403F75                 mov     eax, [esp+6Ch+arg_0]
.text:00403F79                 mov     ebx, [eax+4]
.text:00403F7C                 cmp     byte ptr [esi+ebx], 0
.text:00403F80                 jnz     loc_403EF6
.text:00403F86                 mov     cl, 1
.text:00403F88                 jmp     loc_403EF6
.text:00403F88 ; ---------------------------------------------------------------------------
.text:00403F8D                 align 10h
.text:00403F90
.text:00403F90 loc_403F90:                             ; CODE XREF: sub_403910+57A↑j
.text:00403F90                 mov     [esp+6Ch+C], ebx ; Str
.text:00403F93                 mov     ebx, ebp
.text:00403F95                 call    strlen
.text:00403F9A                 cmp     eax, [esp+6Ch+var_34]
.text:00403F9E                 jnz     loc_403E90
.text:00403FA4                 jmp     loc_403E9B
.text:00403FA9 ; ---------------------------------------------------------------------------
.text:00403FA9
.text:00403FA9 loc_403FA9:                             ; CODE XREF: sub_403910+415↑j
.text:00403FA9                 mov     ebx, [esp+6Ch+var_2C]
.text:00403FAD                 cmp     byte ptr [edi+ebx+1], 3Ah ; ':'
.text:00403FB2                 jz      short loc_403FDE
.text:00403FB4                 mov     [esp+6Ch+C], offset aMissingEquival ; "missing equivalence class character `[="...
.text:00403FBB
.text:00403FBB loc_403FBB:                             ; CODE XREF: sub_403910+6D5↓j
.text:00403FBB                 call    ds:libintl_gettext
.text:00403FC1                 mov     [esp+6Ch+Type], 0 ; ErrorMessage
.text:00403FC9                 mov     [esp+6Ch+C], 0  ; Code
.text:00403FD0                 mov     [esp+6Ch+MaxCount], eax ; char *
.text:00403FD4                 call    sub_408C60
.text:00403FD9                 jmp     loc_403BB4
.text:00403FDE ; ---------------------------------------------------------------------------
.text:00403FDE
.text:00403FDE loc_403FDE:                             ; CODE XREF: sub_403910+6A2↑j
.text:00403FDE                 mov     [esp+6Ch+C], offset aMissingCharact ; "missing character class name `[::]'"
.text:00403FE5                 jmp     short loc_403FBB
.text:00403FE7 ; ---------------------------------------------------------------------------
.text:00403FE7
.text:00403FE7 loc_403FE7:                             ; CODE XREF: sub_403910+67↑j
.text:00403FE7                 mov     esi, [esp+6Ch+arg_0]
.text:00403FEB                 mov     eax, [esi+4]
.text:00403FEE                 cmp     byte ptr [ebp+eax+0], 0
.text:00403FF3                 jnz     loc_40397D
.text:00403FF9                 mov     bl, 1
.text:00403FFB                 jmp     loc_40397D
.text:00404000 ; ---------------------------------------------------------------------------
.text:00404000
.text:00404000 loc_404000:                             ; CODE XREF: sub_403910+52↑j
.text:00404000                 mov     esi, [esp+6Ch+arg_0]
.text:00404004                 mov     eax, [esi+4]
.text:00404007                 cmp     byte ptr [ebp+eax+0], 0
.text:0040400C                 jnz     loc_403968
.text:00404012                 mov     bl, 1
.text:00404014                 jmp     loc_403968
.text:00404014 ; ---------------------------------------------------------------------------
.text:00404019                 align 10h
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_403910+36↑j
.text:00404020                 mov     eax, [esp+6Ch+arg_0]
.text:00404024                 mov     ebp, [eax+4]
.text:00404027                 cmp     byte ptr [edi+ebp], 0
.text:0040402B                 jnz     loc_40394C
.text:00404031                 mov     bl, 1
.text:00404033                 jmp     loc_40394C
.text:00404033 sub_403910      endp
.text:00404033
.text:00404033 ; ---------------------------------------------------------------------------
.text:00404038                 align 10h
.text:00404040 aWhenTranslatin db 'when translating with complemented character classes,',0Ah
.text:00404040                                         ; DATA XREF: sub_404260:loc_40442A↓o
.text:00404040                 db 'string2 must map all characters in the domain to one',0
.text:004040AB                 align 20h
.text:004040C0 aWhenTranslatin_0 db 'when translating, the only character classes that may appear in',0Ah
.text:004040C0                                         ; DATA XREF: sub_404260:loc_40446B↓o
.text:004040C0                 db 'string2 are `upper',27h,' and `lower',27h,0
.text:00404120 aWhenNotTruncat db 'when not truncating set1, string2 must be non-empty',0
.text:00404120                                         ; DATA XREF: sub_404260:loc_404492↓o
.text:00404154                 align 10h
.text:00404160 aCExpressionsMa db '[=c=] expressions may not appear in string2 when translating',0
.text:00404160                                         ; DATA XREF: sub_404260:loc_4044BC↓o
.text:0040419D                 align 10h
.text:004041A0 aTheCConstructM db 'the [c*] construct may appear in string2 only when translating',0
.text:004041A0                                         ; DATA XREF: sub_404260+298↓o
.text:004041DF                 align 10h
.text:004041E0 aOnlyOneCRepeat db 'only one [c*] repeat construct may appear in string2',0
.text:004041E0                                         ; DATA XREF: sub_404260:loc_404504↓o
.text:00404215                 align 10h
.text:00404220 aTheCRepeatCons db 'the [c*] repeat construct may not appear in string1',0
.text:00404220                                         ; DATA XREF: sub_404260:loc_404576↓o
.text:00404254                 align 10h
.text:00404260
.text:00404260 ; =============== S U B R O U T I N E =======================================
.text:00404260
.text:00404260
.text:00404260 sub_404260      proc near               ; CODE XREF: sub_402390+3F8↑p
.text:00404260
.text:00404260 Code            = dword ptr -13Ch
.text:00404260 ErrorMessage    = dword ptr -138h
.text:00404260 var_134         = dword ptr -134h
.text:00404260 var_120         = dword ptr -120h
.text:00404260 var_11C         = byte ptr -11Ch
.text:00404260 arg_0           = dword ptr  4
.text:00404260 arg_4           = dword ptr  8
.text:00404260
.text:00404260                 push    ebp
.text:00404261                 push    edi
.text:00404262                 push    esi
.text:00404263                 push    ebx
.text:00404264                 sub     esp, 12Ch
.text:0040426A                 mov     ebp, [esp+13Ch+arg_0]
.text:00404271                 mov     [esp+13Ch+Code], ebp
.text:00404274                 call    sub_404C10
.text:00404279                 cmp     ds:byte_40B020, 0
.text:00404280                 jz      short loc_4042DF
.text:00404282                 cld
.text:00404283                 mov     ecx, 40h ; '@'
.text:00404288                 lea     edi, [esp+13Ch+var_11C]
.text:0040428C                 xor     eax, eax
.text:0040428E                 mov     esi, 100h
.text:00404293                 rep stosd
.text:00404295                 mov     dword ptr [ebp+8], 0FFFFFFFEh
.text:0040429C                 mov     dword ptr [ebp+0Ch], 0FFFFFFFFh
.text:004042A3                 lea     esi, [esi+0]
.text:004042A9                 lea     edi, [edi+0]
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_404260+72↓j
.text:004042B0                 mov     [esp+13Ch+ErrorMessage], 0
.text:004042B8                 mov     [esp+13Ch+Code], ebp
.text:004042BB                 call    sub_401460
.text:004042C0                 cmp     eax, 0FFFFFFFFh
.text:004042C3                 jz      short loc_4042D4
.text:004042C5                 cmp     [esp+eax+13Ch+var_11C], 0
.text:004042CA                 jnz     short loc_4042CD
.text:004042CC                 dec     esi
.text:004042CD
.text:004042CD loc_4042CD:                             ; CODE XREF: sub_404260+6A↑j
.text:004042CD                 mov     [esp+eax+13Ch+var_11C], 1
.text:004042D2                 jmp     short loc_4042B0
.text:004042D4 ; ---------------------------------------------------------------------------
.text:004042D4
.text:004042D4 loc_4042D4:                             ; CODE XREF: sub_404260+63↑j
.text:004042D4                 mov     [ebp+10h], esi
.text:004042D7                 mov     edx, esi
.text:004042D9                 sar     edx, 1Fh
.text:004042DC                 mov     [ebp+14h], edx
.text:004042DF
.text:004042DF loc_4042DF:                             ; CODE XREF: sub_404260+20↑j
.text:004042DF                 mov     edx, [ebp+18h]
.text:004042E2                 test    edx, edx
.text:004042E4                 jnz     loc_404576
.text:004042EA
.text:004042EA loc_4042EA:                             ; CODE XREF: sub_404260+33B↓j
.text:004042EA                 mov     eax, [esp+13Ch+arg_4]
.text:004042F1                 test    eax, eax
.text:004042F3                 jz      loc_404460
.text:004042F9                 mov     ebx, [esp+13Ch+arg_4]
.text:00404300                 mov     edi, [ebp+14h]
.text:00404303                 mov     esi, [ebp+10h]
.text:00404306                 mov     [esp+13Ch+Code], ebx
.text:00404309                 call    sub_404C10
.text:0040430E                 mov     ecx, [esp+13Ch+arg_4]
.text:00404315                 mov     edx, [ecx+14h]
.text:00404318                 mov     eax, [ecx+10h]
.text:0040431B                 cmp     edi, edx
.text:0040431D                 jb      loc_404567
.text:00404323                 ja      short loc_40432D
.text:00404325                 cmp     esi, eax
.text:00404327                 jb      loc_40455E
.text:0040432D
.text:0040432D loc_40432D:                             ; CODE XREF: sub_404260+C3↑j
.text:0040432D                 mov     ebx, [esp+13Ch+arg_4]
.text:00404334                 mov     ecx, [ebx+18h]
.text:00404337                 cmp     ecx, 1
.text:0040433A                 jz      loc_40452E
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_404260+2F9↓j
.text:00404340                                         ; sub_404260+311↓j
.text:00404340                 cmp     ecx, 1
.text:00404343                 ja      loc_404504
.text:00404349
.text:00404349 loc_404349:                             ; CODE XREF: sub_404260+2C9↓j
.text:00404349                 cmp     ds:byte_40B040, 0
.text:00404350                 jz      loc_4044E6
.text:00404356                 mov     edi, [esp+13Ch+arg_4]
.text:0040435D                 cmp     byte ptr [edi+20h], 0
.text:00404361                 jnz     loc_4044BC
.text:00404367
.text:00404367 loc_404367:                             ; CODE XREF: sub_404260+281↓j
.text:00404367                 mov     edx, [esp+13Ch+arg_4]
.text:0040436E                 mov     ecx, [ebp+14h]
.text:00404371                 mov     eax, [ebp+10h]
.text:00404374                 mov     edi, [edx+14h]
.text:00404377                 mov     esi, [edx+10h]
.text:0040437A                 cmp     ecx, edi
.text:0040437C                 jb      short loc_4043AA
.text:0040437E                 ja      short loc_404384
.text:00404380                 cmp     eax, esi
.text:00404382                 jbe     short loc_4043AA
.text:00404384
.text:00404384 loc_404384:                             ; CODE XREF: sub_404260+11E↑j
.text:00404384                 cmp     ds:byte_40B030, 0
.text:0040438B                 jnz     short loc_4043AA
.text:0040438D                 mov     ebx, edi
.text:0040438F                 or      ebx, esi
.text:00404391                 jz      loc_404492
.text:00404397
.text:00404397 loc_404397:                             ; CODE XREF: sub_404260+257↓j
.text:00404397                 mov     [esp+13Ch+Code], ebp
.text:0040439A                 mov     eax, [esp+13Ch+arg_4]
.text:004043A1                 mov     [esp+13Ch+ErrorMessage], eax
.text:004043A5                 call    sub_404E30
.text:004043AA
.text:004043AA loc_4043AA:                             ; CODE XREF: sub_404260+11C↑j
.text:004043AA                                         ; sub_404260+122↑j ...
.text:004043AA                 cmp     ds:byte_40B020, 0
.text:004043B1                 jz      loc_40444F
.text:004043B7                 cmp     byte ptr [ebp+21h], 0
.text:004043BB                 jz      loc_40444F
.text:004043C1                 mov     ebx, [esp+13Ch+arg_4]
.text:004043C8                 mov     edi, [ebp+10h]
.text:004043CB                 mov     ecx, [ebp+14h]
.text:004043CE                 mov     edx, [ebx+14h]
.text:004043D1                 mov     esi, [ebx+10h]
.text:004043D4                 mov     ebp, edx
.text:004043D6                 xor     ebp, ecx
.text:004043D8                 xor     edi, esi
.text:004043DA                 or      ebp, edi
.text:004043DC                 jnz     short loc_40442A
.text:004043DE                 mov     eax, [esp+13Ch+arg_4]
.text:004043E5                 mov     dword ptr [eax+8], 0FFFFFFFEh
.text:004043EC                 mov     dword ptr [eax+0Ch], 0FFFFFFFFh
.text:004043F3                 mov     [esp+13Ch+ErrorMessage], 0
.text:004043FB                 mov     [esp+13Ch+Code], eax
.text:004043FE                 call    sub_401460
.text:00404403                 cmp     eax, 0FFFFFFFFh
.text:00404406                 mov     esi, eax
.text:00404408                 jz      short loc_40442A
.text:0040440A
.text:0040440A loc_40440A:                             ; CODE XREF: sub_404260+1C8↓j
.text:0040440A                 mov     [esp+13Ch+ErrorMessage], 0
.text:00404412                 mov     edi, [esp+13Ch+arg_4]
.text:00404419                 mov     [esp+13Ch+Code], edi
.text:0040441C                 call    sub_401460
.text:00404421                 cmp     eax, 0FFFFFFFFh
.text:00404424                 jz      short loc_40444F
.text:00404426                 cmp     eax, esi
.text:00404428                 jz      short loc_40440A
.text:0040442A
.text:0040442A loc_40442A:                             ; CODE XREF: sub_404260+17C↑j
.text:0040442A                                         ; sub_404260+1A8↑j
.text:0040442A                 mov     [esp+13Ch+Code], offset aWhenTranslatin ; "when translating with complemented char"...
.text:00404431                 call    ds:libintl_gettext
.text:00404437                 mov     [esp+13Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040443F                 mov     [esp+13Ch+Code], 1 ; Code
.text:00404446                 mov     [esp+13Ch+var_134], eax ; char *
.text:0040444A                 call    sub_408C60
.text:0040444F
.text:0040444F loc_40444F:                             ; CODE XREF: sub_404260+151↑j
.text:0040444F                                         ; sub_404260+15B↑j ...
.text:0040444F                 mov     ebp, [esp+13Ch+arg_4]
.text:00404456                 cmp     byte ptr [ebp+22h], 0
.text:0040445A                 jnz     short loc_40446B
.text:0040445C                 lea     esi, [esi+0]
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_404260+93↑j
.text:00404460                                         ; sub_404260+230↓j ...
.text:00404460                 add     esp, 12Ch
.text:00404466                 pop     ebx
.text:00404467                 pop     esi
.text:00404468                 pop     edi
.text:00404469                 pop     ebp
.text:0040446A                 retn
.text:0040446B ; ---------------------------------------------------------------------------
.text:0040446B
.text:0040446B loc_40446B:                             ; CODE XREF: sub_404260+1FA↑j
.text:0040446B                 mov     [esp+13Ch+Code], offset aWhenTranslatin_0 ; "when translating, the only character cl"...
.text:00404472
.text:00404472 loc_404472:                             ; CODE XREF: sub_404260+29F↓j
.text:00404472                 call    ds:libintl_gettext
.text:00404478                 mov     [esp+13Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404480                 mov     [esp+13Ch+Code], 1 ; Code
.text:00404487                 mov     [esp+13Ch+var_134], eax ; char *
.text:0040448B                 call    sub_408C60
.text:00404490                 jmp     short loc_404460
.text:00404492 ; ---------------------------------------------------------------------------
.text:00404492
.text:00404492 loc_404492:                             ; CODE XREF: sub_404260+131↑j
.text:00404492                 mov     [esp+13Ch+Code], offset aWhenNotTruncat ; "when not truncating set1, string2 must "...
.text:00404499                 call    ds:libintl_gettext
.text:0040449F                 mov     [esp+13Ch+ErrorMessage], 0 ; ErrorMessage
.text:004044A7                 mov     [esp+13Ch+Code], 1 ; Code
.text:004044AE                 mov     [esp+13Ch+var_134], eax ; char *
.text:004044B2                 call    sub_408C60
.text:004044B7                 jmp     loc_404397
.text:004044BC ; ---------------------------------------------------------------------------
.text:004044BC
.text:004044BC loc_4044BC:                             ; CODE XREF: sub_404260+101↑j
.text:004044BC                 mov     [esp+13Ch+Code], offset aCExpressionsMa ; "[=c=] expressions may not appear in str"...
.text:004044C3                 call    ds:libintl_gettext
.text:004044C9                 mov     [esp+13Ch+ErrorMessage], 0 ; ErrorMessage
.text:004044D1                 mov     [esp+13Ch+Code], 1 ; Code
.text:004044D8                 mov     [esp+13Ch+var_134], eax ; char *
.text:004044DC                 call    sub_408C60
.text:004044E1                 jmp     loc_404367
.text:004044E6 ; ---------------------------------------------------------------------------
.text:004044E6
.text:004044E6 loc_4044E6:                             ; CODE XREF: sub_404260+F0↑j
.text:004044E6                 mov     esi, [esp+13Ch+arg_4]
.text:004044ED                 mov     edx, [esi+18h]
.text:004044F0                 test    edx, edx
.text:004044F2                 jz      loc_404460
.text:004044F8                 mov     [esp+13Ch+Code], offset aTheCConstructM ; "the [c*] construct may appear in string"...
.text:004044FF                 jmp     loc_404472
.text:00404504 ; ---------------------------------------------------------------------------
.text:00404504
.text:00404504 loc_404504:                             ; CODE XREF: sub_404260+E3↑j
.text:00404504                 mov     [esp+13Ch+Code], offset aOnlyOneCRepeat ; "only one [c*] repeat construct may appe"...
.text:0040450B                 call    ds:libintl_gettext
.text:00404511                 mov     [esp+13Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404519                 mov     [esp+13Ch+Code], 1 ; Code
.text:00404520                 mov     [esp+13Ch+var_134], eax ; char *
.text:00404524                 call    sub_408C60
.text:00404529                 jmp     loc_404349
.text:0040452E ; ---------------------------------------------------------------------------
.text:0040452E
.text:0040452E loc_40452E:                             ; CODE XREF: sub_404260+DA↑j
.text:0040452E                 mov     ecx, [ebx+1Ch]
.text:00404531                 mov     ebx, edi
.text:00404533                 mov     [esp+13Ch+var_120], ecx
.text:00404537                 mov     ecx, esi
.text:00404539                 sub     ecx, eax
.text:0040453B                 sbb     ebx, edx
.text:0040453D                 mov     eax, ecx
.text:0040453F                 mov     ecx, [esp+13Ch+var_120]
.text:00404543                 mov     [ecx+10h], eax
.text:00404546                 mov     [ecx+14h], ebx
.text:00404549                 mov     eax, [esp+13Ch+arg_4]
.text:00404550                 mov     [eax+10h], esi
.text:00404553                 mov     [eax+14h], edi
.text:00404556
.text:00404556 loc_404556:                             ; CODE XREF: sub_404260+305↓j
.text:00404556                 mov     ecx, [eax+18h]
.text:00404559                 jmp     loc_404340
.text:0040455E ; ---------------------------------------------------------------------------
.text:0040455E
.text:0040455E loc_40455E:                             ; CODE XREF: sub_404260+C7↑j
.text:0040455E                 mov     eax, [esp+13Ch+arg_4]
.text:00404565                 jmp     short loc_404556
.text:00404567 ; ---------------------------------------------------------------------------
.text:00404567
.text:00404567 loc_404567:                             ; CODE XREF: sub_404260+BD↑j
.text:00404567                 mov     esi, [esp+13Ch+arg_4]
.text:0040456E                 mov     ecx, [esi+18h]
.text:00404571                 jmp     loc_404340
.text:00404576 ; ---------------------------------------------------------------------------
.text:00404576
.text:00404576 loc_404576:                             ; CODE XREF: sub_404260+84↑j
.text:00404576                 mov     [esp+13Ch+Code], offset aTheCRepeatCons ; "the [c*] repeat construct may not appea"...
.text:0040457D                 call    ds:libintl_gettext
.text:00404583                 mov     [esp+13Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040458B                 mov     [esp+13Ch+Code], 1 ; Code
.text:00404592                 mov     [esp+13Ch+var_134], eax ; char *
.text:00404596                 call    sub_408C60
.text:0040459B                 jmp     loc_4042EA
.text:0040459B sub_404260      endp
.text:0040459B
.text:004045A0
.text:004045A0 ; =============== S U B R O U T I N E =======================================
.text:004045A0
.text:004045A0
.text:004045A0 sub_4045A0      proc near               ; CODE XREF: sub_402390+559↑p
.text:004045A0
.text:004045A0 Buffer          = dword ptr -2Ch
.text:004045A0 ElementSize     = dword ptr -28h
.text:004045A0 ElementCount    = dword ptr -24h
.text:004045A0 Stream          = dword ptr -20h
.text:004045A0 arg_0           = dword ptr  4
.text:004045A0 arg_4           = dword ptr  8
.text:004045A0 arg_8           = dword ptr  0Ch
.text:004045A0
.text:004045A0                 push    ebp
.text:004045A1                 mov     ebp, 80h ; '€'
.text:004045A6                 push    edi
.text:004045A7                 xor     edi, edi
.text:004045A9                 push    esi
.text:004045AA                 xor     esi, esi
.text:004045AC                 push    ebx
.text:004045AD                 sub     esp, 1Ch
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_4045A0+56↓j
.text:004045B0                                         ; sub_4045A0+A7↓j
.text:004045B0                 cmp     edi, esi
.text:004045B2                 jb      short loc_4045D3
.text:004045B4
.text:004045B4 loc_4045B4:                             ; CODE XREF: sub_4045A0+3F↓j
.text:004045B4                                         ; sub_4045A0+4F↓j ...
.text:004045B4                 mov     edx, [esp+2Ch+arg_4]
.text:004045B8                 mov     eax, [esp+2Ch+arg_0]
.text:004045BC                 mov     [esp+2Ch+ElementSize], edx
.text:004045C0                 mov     [esp+2Ch+Buffer], eax
.text:004045C3                 call    [esp+2Ch+arg_8]
.text:004045C7                 test    eax, eax
.text:004045C9                 mov     esi, eax
.text:004045CB                 jz      loc_4046F8
.text:004045D1                 xor     edi, edi
.text:004045D3
.text:004045D3 loc_4045D3:                             ; CODE XREF: sub_4045A0+12↑j
.text:004045D3                 cmp     ebp, 80h ; '€'
.text:004045D9                 mov     edx, edi
.text:004045DB                 jz      short loc_404600
.text:004045DD
.text:004045DD loc_4045DD:                             ; CODE XREF: sub_4045A0+59↓j
.text:004045DD                 cmp     edi, esi
.text:004045DF                 jnb     short loc_4045B4
.text:004045E1                 mov     edx, [esp+2Ch+arg_0]
.text:004045E5                 movsx   eax, byte ptr [edi+edx]
.text:004045E9
.text:004045E9 loc_4045E9:                             ; CODE XREF: sub_4045A0+BD↓j
.text:004045E9                 cmp     eax, ebp
.text:004045EB                 jz      short loc_4045F8
.text:004045ED                 cmp     edi, esi
.text:004045EF                 jnb     short loc_4045B4
.text:004045F1                 mov     ebp, 80h ; '€'
.text:004045F6                 jmp     short loc_4045B0
.text:004045F8 ; ---------------------------------------------------------------------------
.text:004045F8
.text:004045F8 loc_4045F8:                             ; CODE XREF: sub_4045A0+4B↑j
.text:004045F8                 inc     edi
.text:004045F9                 jmp     short loc_4045DD
.text:004045F9 ; ---------------------------------------------------------------------------
.text:004045FB                 align 10h
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_4045A0+3B↑j
.text:00404600                 cmp     edi, esi
.text:00404602                 jnb     short loc_40462D
.text:00404604                 mov     eax, [esp+2Ch+arg_0]
.text:00404608                 movzx   ebx, byte ptr [edi+eax]
.text:0040460C                 cmp     ds:byte_40B250[ebx], 0
.text:00404613                 jnz     short loc_40462D
.text:00404615
.text:00404615 loc_404615:                             ; CODE XREF: sub_4045A0+8B↓j
.text:00404615                 add     edi, 2
.text:00404618                 cmp     edi, esi
.text:0040461A                 jnb     short loc_40462D
.text:0040461C                 mov     eax, [esp+2Ch+arg_0]
.text:00404620                 movzx   ebx, byte ptr [edi+eax]
.text:00404624                 cmp     ds:byte_40B250[ebx], 0
.text:0040462B                 jz      short loc_404615
.text:0040462D
.text:0040462D loc_40462D:                             ; CODE XREF: sub_4045A0+62↑j
.text:0040462D                                         ; sub_4045A0+73↑j ...
.text:0040462D                 cmp     edi, esi
.text:0040462F                 jz      loc_4046DC
.text:00404635
.text:00404635 loc_404635:                             ; CODE XREF: sub_4045A0+14C↓j
.text:00404635                                         ; sub_4045A0+153↓j
.text:00404635                 cmp     edi, esi
.text:00404637                 jb      short loc_4046B6
.text:00404639                 mov     ebx, esi
.text:0040463B                 sub     ebx, edx
.text:0040463D
.text:0040463D loc_40463D:                             ; CODE XREF: sub_4045A0+133↓j
.text:0040463D                 test    ebx, ebx
.text:0040463F                 jnz     short loc_40465F
.text:00404641
.text:00404641 loc_404641:                             ; CODE XREF: sub_4045A0+E8↓j
.text:00404641                                         ; sub_4045A0+114↓j
.text:00404641                 cmp     ebp, 80h ; '€'
.text:00404647                 jz      loc_4045B0
.text:0040464D                 cmp     edi, esi
.text:0040464F                 jnb     loc_4045B4
.text:00404655                 mov     ebx, [esp+2Ch+arg_0]
.text:00404659                 movsx   eax, byte ptr [edi+ebx]
.text:0040465D                 jmp     short loc_4045E9
.text:0040465F ; ---------------------------------------------------------------------------
.text:0040465F
.text:0040465F loc_40465F:                             ; CODE XREF: sub_4045A0+9F↑j
.text:0040465F                 mov     [esp+2Ch+ElementCount], ebx ; ElementCount
.text:00404663                 mov     ecx, ds:_iob
.text:00404669                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00404671                 add     ecx, 20h ; ' '
.text:00404674                 mov     [esp+2Ch+Stream], ecx ; char
.text:00404678                 mov     ecx, [esp+2Ch+arg_0]
.text:0040467C                 add     ecx, edx
.text:0040467E                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:00404681                 call    fwrite
.text:00404686                 cmp     eax, ebx
.text:00404688                 jz      short loc_404641
.text:0040468A                 mov     [esp+2Ch+Buffer], offset aWriteError ; "write error"
.text:00404691                 call    ds:libintl_gettext
.text:00404697                 mov     ebx, eax
.text:00404699                 call    _errno
.text:0040469E                 mov     [esp+2Ch+ElementCount], ebx ; char *
.text:004046A2                 mov     edx, [eax]
.text:004046A4                 mov     [esp+2Ch+Buffer], 1 ; Code
.text:004046AB                 mov     [esp+2Ch+ElementSize], edx ; ErrorMessage
.text:004046AF                 call    sub_408C60
.text:004046B4                 jmp     short loc_404641
.text:004046B6 ; ---------------------------------------------------------------------------
.text:004046B6
.text:004046B6 loc_4046B6:                             ; CODE XREF: sub_4045A0+97↑j
.text:004046B6                 mov     eax, [esp+2Ch+arg_0]
.text:004046BA                 mov     ecx, edi
.text:004046BC                 sub     ecx, edx
.text:004046BE                 test    edi, edi
.text:004046C0                 lea     ebx, [ecx+1]
.text:004046C3                 movsx   ebp, byte ptr [edi+eax]
.text:004046C7                 jz      short loc_4046D2
.text:004046C9                 movsx   eax, byte ptr [edi+eax-1]
.text:004046CE                 cmp     eax, ebp
.text:004046D0                 jz      short loc_4046D8
.text:004046D2
.text:004046D2 loc_4046D2:                             ; CODE XREF: sub_4045A0+127↑j
.text:004046D2                                         ; sub_4045A0+13A↓j
.text:004046D2                 inc     edi
.text:004046D3                 jmp     loc_40463D
.text:004046D8 ; ---------------------------------------------------------------------------
.text:004046D8
.text:004046D8 loc_4046D8:                             ; CODE XREF: sub_4045A0+130↑j
.text:004046D8                 mov     ebx, ecx
.text:004046DA                 jmp     short loc_4046D2
.text:004046DC ; ---------------------------------------------------------------------------
.text:004046DC
.text:004046DC loc_4046DC:                             ; CODE XREF: sub_4045A0+8F↑j
.text:004046DC                 mov     eax, [esp+2Ch+arg_0]
.text:004046E0                 movzx   ebx, byte ptr [edi+eax-1]
.text:004046E5                 cmp     ds:byte_40B250[ebx], 0
.text:004046EC                 jz      loc_404635
.text:004046F2                 dec     edi
.text:004046F3                 jmp     loc_404635
.text:004046F8 ; ---------------------------------------------------------------------------
.text:004046F8
.text:004046F8 loc_4046F8:                             ; CODE XREF: sub_4045A0+2B↑j
.text:004046F8                 add     esp, 1Ch
.text:004046FB                 pop     ebx
.text:004046FC                 pop     esi
.text:004046FD                 pop     edi
.text:004046FE                 pop     ebp
.text:004046FF                 retn
.text:004046FF sub_4045A0      endp
.text:004046FF
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700
.text:00404700 sub_404700      proc near               ; DATA XREF: sub_402390:loc_402ED6↑o
.text:00404700
.text:00404700 Code            = dword ptr -1Ch
.text:00404700 ErrorMessage    = dword ptr -18h
.text:00404700 var_14          = dword ptr -14h
.text:00404700 var_8           = dword ptr -8
.text:00404700 var_4           = dword ptr -4
.text:00404700 arg_0           = dword ptr  4
.text:00404700 arg_4           = dword ptr  8
.text:00404700
.text:00404700                 sub     esp, 1Ch
.text:00404703                 mov     edx, [esp+1Ch+arg_4]
.text:00404707                 mov     [esp+1Ch+var_4], esi
.text:0040470B                 mov     [esp+1Ch+var_8], ebx
.text:0040470F                 mov     [esp+1Ch+var_14], edx
.text:00404713                 mov     edx, [esp+1Ch+arg_0]
.text:00404717                 mov     [esp+1Ch+Code], 0
.text:0040471E                 mov     [esp+1Ch+ErrorMessage], edx
.text:00404722                 call    sub_4067D0
.text:00404727                 cmp     eax, 0FFFFFFFFh
.text:0040472A                 mov     esi, eax
.text:0040472C                 jz      short loc_404740
.text:0040472E
.text:0040472E loc_40472E:                             ; CODE XREF: sub_404700+6A↓j
.text:0040472E                 mov     eax, esi
.text:00404730                 mov     ebx, [esp+1Ch+var_8]
.text:00404734                 mov     esi, [esp+1Ch+var_4]
.text:00404738                 add     esp, 1Ch
.text:0040473B                 retn
.text:0040473B ; ---------------------------------------------------------------------------
.text:0040473C                 align 10h
.text:00404740
.text:00404740 loc_404740:                             ; CODE XREF: sub_404700+2C↑j
.text:00404740                 mov     [esp+1Ch+Code], offset aReadError ; "read error"
.text:00404747                 call    ds:libintl_gettext
.text:0040474D                 mov     ebx, eax
.text:0040474F                 call    _errno
.text:00404754                 mov     [esp+1Ch+var_14], ebx ; char *
.text:00404758                 mov     ecx, [eax]
.text:0040475A                 mov     [esp+1Ch+Code], 1 ; Code
.text:00404761                 mov     [esp+1Ch+ErrorMessage], ecx ; ErrorMessage
.text:00404765                 call    sub_408C60
.text:0040476A                 jmp     short loc_40472E
.text:0040476A sub_404700      endp
.text:0040476A
.text:0040476A ; ---------------------------------------------------------------------------
.text:0040476C                 align 10h
.text:00404770
.text:00404770 ; =============== S U B R O U T I N E =======================================
.text:00404770
.text:00404770
.text:00404770 sub_404770      proc near               ; DATA XREF: sub_402390:loc_402CFB↑o
.text:00404770
.text:00404770 Code            = dword ptr -1Ch
.text:00404770 ErrorMessage    = dword ptr -18h
.text:00404770 var_14          = dword ptr -14h
.text:00404770 arg_0           = dword ptr  4
.text:00404770 arg_4           = dword ptr  8
.text:00404770
.text:00404770                 push    ebp
.text:00404771                 push    edi
.text:00404772                 push    esi
.text:00404773                 push    ebx             ; char
.text:00404774                 sub     esp, 0Ch
.text:00404777                 mov     edi, [esp+1Ch+arg_0]
.text:0040477B                 mov     ebp, [esp+1Ch+arg_4]
.text:0040477F                 nop
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_404770+7B↓j
.text:00404780                 mov     [esp+1Ch+var_14], ebp
.text:00404784                 mov     [esp+1Ch+ErrorMessage], edi
.text:00404788                 mov     [esp+1Ch+Code], 0
.text:0040478F                 call    sub_4067D0
.text:00404794                 cmp     eax, 0FFFFFFFFh
.text:00404797                 mov     esi, eax
.text:00404799                 jz      short loc_4047F7
.text:0040479B
.text:0040479B loc_40479B:                             ; CODE XREF: sub_404770+B1↓j
.text:0040479B                 xor     eax, eax
.text:0040479D                 test    esi, esi
.text:0040479F                 jz      short loc_4047EF
.text:004047A1                 xor     ecx, ecx
.text:004047A3                 cmp     ecx, esi
.text:004047A5                 jnb     short loc_4047C5
.text:004047A7                 movzx   edx, byte ptr [edi]
.text:004047AA                 cmp     ds:byte_40B350[edx], 0
.text:004047B1                 jnz     short loc_4047C5
.text:004047B3
.text:004047B3 loc_4047B3:                             ; CODE XREF: sub_404770+53↓j
.text:004047B3                 inc     ecx
.text:004047B4                 cmp     ecx, esi
.text:004047B6                 jnb     short loc_4047C5
.text:004047B8                 movzx   ebx, byte ptr [ecx+edi]
.text:004047BC                 cmp     ds:byte_40B350[ebx], 0
.text:004047C3                 jz      short loc_4047B3
.text:004047C5
.text:004047C5 loc_4047C5:                             ; CODE XREF: sub_404770+35↑j
.text:004047C5                                         ; sub_404770+41↑j ...
.text:004047C5                 mov     ebx, ecx
.text:004047C7                 lea     ecx, [ecx+1]
.text:004047CA                 cmp     ecx, esi
.text:004047CC                 jnb     short loc_4047E9
.text:004047CE                 mov     esi, esi
.text:004047D0
.text:004047D0 loc_4047D0:                             ; CODE XREF: sub_404770+77↓j
.text:004047D0                 movzx   edx, byte ptr [ecx+edi]
.text:004047D4                 movzx   eax, dl
.text:004047D7                 cmp     ds:byte_40B350[eax], 0
.text:004047DE                 jnz     short loc_4047E4
.text:004047E0                 mov     [ebx+edi], dl
.text:004047E3                 inc     ebx
.text:004047E4
.text:004047E4 loc_4047E4:                             ; CODE XREF: sub_404770+6E↑j
.text:004047E4                 inc     ecx
.text:004047E5                 cmp     ecx, esi
.text:004047E7                 jb      short loc_4047D0
.text:004047E9
.text:004047E9 loc_4047E9:                             ; CODE XREF: sub_404770+5C↑j
.text:004047E9                 test    ebx, ebx
.text:004047EB                 jz      short loc_404780
.text:004047ED                 mov     eax, ebx
.text:004047EF
.text:004047EF loc_4047EF:                             ; CODE XREF: sub_404770+2F↑j
.text:004047EF                 add     esp, 0Ch
.text:004047F2                 pop     ebx
.text:004047F3                 pop     esi
.text:004047F4                 pop     edi
.text:004047F5                 pop     ebp
.text:004047F6                 retn
.text:004047F7 ; ---------------------------------------------------------------------------
.text:004047F7
.text:004047F7 loc_4047F7:                             ; CODE XREF: sub_404770+29↑j
.text:004047F7                 mov     [esp+1Ch+Code], offset aReadError ; "read error"
.text:004047FE                 call    ds:libintl_gettext
.text:00404804                 mov     ebx, eax
.text:00404806                 call    _errno
.text:0040480B                 mov     [esp+1Ch+var_14], ebx ; char *
.text:0040480F                 mov     edx, [eax]
.text:00404811                 mov     [esp+1Ch+Code], 1 ; Code
.text:00404818                 mov     [esp+1Ch+ErrorMessage], edx ; ErrorMessage
.text:0040481C                 call    sub_408C60
.text:00404821                 jmp     loc_40479B
.text:00404821 sub_404770      endp
.text:00404821
.text:00404821 ; ---------------------------------------------------------------------------
.text:00404826                 align 10h
.text:00404830
.text:00404830 ; =============== S U B R O U T I N E =======================================
.text:00404830
.text:00404830
.text:00404830 sub_404830      proc near               ; DATA XREF: sub_402390:loc_4028D2↑o
.text:00404830
.text:00404830 Code            = dword ptr -1Ch
.text:00404830 ErrorMessage    = dword ptr -18h
.text:00404830 var_14          = dword ptr -14h
.text:00404830 arg_0           = dword ptr  4
.text:00404830 arg_4           = dword ptr  8
.text:00404830
.text:00404830                 push    edi
.text:00404831                 push    esi
.text:00404832                 push    ebx
.text:00404833                 sub     esp, 10h
.text:00404836                 mov     edi, [esp+1Ch+arg_0]
.text:0040483A                 mov     [esp+1Ch+Code], 0
.text:00404841                 mov     edx, [esp+1Ch+arg_4]
.text:00404845                 mov     [esp+1Ch+ErrorMessage], edi
.text:00404849                 mov     [esp+1Ch+var_14], edx
.text:0040484D                 call    sub_4067D0
.text:00404852                 cmp     eax, 0FFFFFFFFh
.text:00404855                 mov     esi, eax
.text:00404857                 jz      short loc_40487C
.text:00404859
.text:00404859 loc_404859:                             ; CODE XREF: sub_404830+76↓j
.text:00404859                 xor     edx, edx
.text:0040485B                 cmp     edx, esi
.text:0040485D                 jnb     short loc_404873
.text:0040485F                 nop
.text:00404860
.text:00404860 loc_404860:                             ; CODE XREF: sub_404830+41↓j
.text:00404860                 movzx   ebx, byte ptr [edx+edi]
.text:00404864                 movzx   ecx, ds:byte_40B450[ebx]
.text:0040486B                 mov     [edx+edi], cl
.text:0040486E                 inc     edx
.text:0040486F                 cmp     edx, esi
.text:00404871                 jb      short loc_404860
.text:00404873
.text:00404873 loc_404873:                             ; CODE XREF: sub_404830+2D↑j
.text:00404873                 add     esp, 10h
.text:00404876                 mov     eax, esi
.text:00404878                 pop     ebx
.text:00404879                 pop     esi
.text:0040487A                 pop     edi
.text:0040487B                 retn
.text:0040487C ; ---------------------------------------------------------------------------
.text:0040487C
.text:0040487C loc_40487C:                             ; CODE XREF: sub_404830+27↑j
.text:0040487C                 mov     [esp+1Ch+Code], offset aReadError ; "read error"
.text:00404883                 call    ds:libintl_gettext
.text:00404889                 mov     ebx, eax
.text:0040488B                 call    _errno
.text:00404890                 mov     [esp+1Ch+var_14], ebx ; char *
.text:00404894                 mov     edx, [eax]
.text:00404896                 mov     [esp+1Ch+Code], 1 ; Code
.text:0040489D                 mov     [esp+1Ch+ErrorMessage], edx ; ErrorMessage
.text:004048A1                 call    sub_408C60
.text:004048A6                 jmp     short loc_404859
.text:004048A6 sub_404830      endp
.text:004048A6
.text:004048A6 ; ---------------------------------------------------------------------------
.text:004048A8 byte_4048A8     db 5Ch, 6Eh, 0          ; DATA XREF: sub_4048C0+38↓o
.text:004048AB byte_4048AB     db 5Ch                  ; DATA XREF: sub_4048C0+51↓o
.text:004048AC                 db 62h, 0
.text:004048AE word_4048AE     dw 745Ch                ; DATA XREF: sub_4048C0+5B↓o
.text:004048B0                 db 0
.text:004048B1 byte_4048B1     db 5Ch, 61h, 0          ; DATA XREF: sub_4048C0+62↓o
.text:004048B4                 db 5Ch, 66h, 0          ; DATA XREF: sub_4048C0+F5↓o
.text:004048B7                 db 5Ch                  ; DATA XREF: sub_4048C0+FF↓o
.text:004048B8                 db 76h, 0
.text:004048BA word_4048BA     dw 725Ch                ; DATA XREF: sub_4048C0+109↓o
.text:004048BC                 db 0
.text:004048BD byte_4048BD     db 5Ch, 0, 90h          ; DATA XREF: sub_4048C0+110↓o
.text:004048C0
.text:004048C0 ; =============== S U B R O U T I N E =======================================
.text:004048C0
.text:004048C0
.text:004048C0 sub_4048C0      proc near               ; CODE XREF: sub_403910+49D↑p
.text:004048C0                                         ; sub_403910+634↑p ...
.text:004048C0
.text:004048C0 C               = dword ptr -4Ch
.text:004048C0 Type            = dword ptr -48h
.text:004048C0 var_44          = dword ptr -44h
.text:004048C0 var_30          = dword ptr -30h
.text:004048C0 Buffer          = byte ptr -2Ch
.text:004048C0 var_2B          = byte ptr -2Bh
.text:004048C0 arg_0           = dword ptr  4
.text:004048C0 arg_4           = dword ptr  8
.text:004048C0
.text:004048C0                 push    ebp
.text:004048C1                 push    edi
.text:004048C2                 push    esi
.text:004048C3                 xor     esi, esi
.text:004048C5                 push    ebx
.text:004048C6                 sub     esp, 3Ch
.text:004048C9                 mov     ebp, [esp+4Ch+arg_4]
.text:004048CD                 mov     [esp+4Ch+Type], 4
.text:004048D5                 lea     edx, [ebp+1]
.text:004048D8                 mov     [esp+4Ch+C], edx
.text:004048DB                 call    sub_407540
.text:004048E0                 mov     [esp+4Ch+var_30], eax
.text:004048E4                 cmp     esi, ebp
.text:004048E6                 mov     edi, eax
.text:004048E8                 jnb     loc_404977
.text:004048EE                 mov     esi, esi
.text:004048F0
.text:004048F0 loc_4048F0:                             ; CODE XREF: sub_4048C0+B1↓j
.text:004048F0                 mov     edx, [esp+4Ch+arg_0]
.text:004048F4                 movzx   ebx, byte ptr [esi+edx]
.text:004048F8                 mov     edx, offset byte_4048A8
.text:004048FD                 movzx   eax, bl
.text:00404900                 cmp     eax, 0Ah
.text:00404903                 jz      short loc_404960
.text:00404905                 cmp     eax, 0Ah
.text:00404908                 jg      loc_4049B2
.text:0040490E                 cmp     eax, 8
.text:00404911                 mov     edx, offset byte_4048AB
.text:00404916                 jz      short loc_404960
.text:00404918                 cmp     eax, 8
.text:0040491B                 mov     edx, offset word_4048AE
.text:00404920                 jg      short loc_404960
.text:00404922                 mov     edx, offset byte_4048B1
.text:00404927                 cmp     eax, 7
.text:0040492A
.text:0040492A loc_40492A:                             ; CODE XREF: sub_4048C0+118↓j
.text:0040492A                 jz      short loc_404960
.text:0040492C                 mov     ecx, ds:__mb_cur_max
.text:00404932                 movzx   edx, bl
.text:00404935                 cmp     dword ptr [ecx], 1
.text:00404938                 jz      short loc_4049A0
.text:0040493A                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404942                 mov     [esp+4Ch+C], edx ; C
.text:00404945                 call    _isctype
.text:0040494A
.text:0040494A loc_40494A:                             ; CODE XREF: sub_4048C0+F0↓j
.text:0040494A                 test    eax, eax
.text:0040494C                 jz      short loc_404983
.text:0040494E                 mov     [esp+4Ch+Buffer], bl
.text:00404952                 lea     ebx, [esp+4Ch+Buffer]
.text:00404956                 mov     [esp+4Ch+var_2B], 0
.text:0040495B
.text:0040495B loc_40495B:                             ; CODE XREF: sub_4048C0+DE↓j
.text:0040495B                 mov     edx, ebx
.text:0040495D                 lea     esi, [esi+0]
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_4048C0+43↑j
.text:00404960                                         ; sub_4048C0+56↑j ...
.text:00404960                 mov     [esp+4Ch+C], edi
.text:00404963                 inc     esi
.text:00404964                 mov     [esp+4Ch+Type], edx
.text:00404968                 call    sub_408F00
.text:0040496D                 cmp     esi, ebp
.text:0040496F                 mov     edi, eax
.text:00404971                 jb      loc_4048F0
.text:00404977
.text:00404977 loc_404977:                             ; CODE XREF: sub_4048C0+28↑j
.text:00404977                 mov     eax, [esp+4Ch+var_30]
.text:0040497B                 add     esp, 3Ch
.text:0040497E                 pop     ebx
.text:0040497F                 pop     esi
.text:00404980                 pop     edi
.text:00404981                 pop     ebp
.text:00404982                 retn
.text:00404983 ; ---------------------------------------------------------------------------
.text:00404983
.text:00404983 loc_404983:                             ; CODE XREF: sub_4048C0+8C↑j
.text:00404983                 mov     [esp+4Ch+Type], offset a03o ; "\\%03o"
.text:0040498B                 movzx   edx, bl
.text:0040498E                 lea     ebx, [esp+4Ch+Buffer]
.text:00404992                 mov     [esp+4Ch+var_44], edx
.text:00404996                 mov     [esp+4Ch+C], ebx ; Buffer
.text:00404999                 call    sprintf
.text:0040499E                 jmp     short loc_40495B
.text:004049A0 ; ---------------------------------------------------------------------------
.text:004049A0
.text:004049A0 loc_4049A0:                             ; CODE XREF: sub_4048C0+78↑j
.text:004049A0                 mov     eax, ds:_pctype
.text:004049A5                 mov     ecx, [eax]
.text:004049A7                 movzx   eax, word ptr [ecx+edx*2]
.text:004049AB                 and     eax, 157h
.text:004049B0                 jmp     short loc_40494A
.text:004049B2 ; ---------------------------------------------------------------------------
.text:004049B2
.text:004049B2 loc_4049B2:                             ; CODE XREF: sub_4048C0+48↑j
.text:004049B2                 cmp     eax, 0Ch
.text:004049B5                 mov     edx, offset byte_4048B4
.text:004049BA                 jz      short loc_404960
.text:004049BC                 cmp     eax, 0Ch
.text:004049BF                 mov     edx, offset byte_4048B7
.text:004049C4                 jl      short loc_404960
.text:004049C6                 cmp     eax, 0Dh
.text:004049C9                 mov     edx, offset word_4048BA
.text:004049CE                 jz      short loc_404960
.text:004049D0                 mov     edx, offset byte_4048BD
.text:004049D5                 cmp     eax, 5Ch ; '\'
.text:004049D8                 jmp     loc_40492A
.text:004049D8 sub_4048C0      endp
.text:004049D8
.text:004049D8 ; ---------------------------------------------------------------------------
.text:004049DD                 align 10h
.text:004049E0 aInvalidRepeatC db 'invalid repeat count `%s',27h,' in [c*n] construct',0
.text:004049E0                                         ; DATA XREF: sub_404A30+10F↓o
.text:00404A0D aStartIdx1EsLen db 'start_idx + 1 < es->len',0
.text:00404A0D                                         ; DATA XREF: sub_404A30+170↓o
.text:00404A25                 align 10h
.text:00404A30
.text:00404A30 ; =============== S U B R O U T I N E =======================================
.text:00404A30
.text:00404A30
.text:00404A30 sub_404A30      proc near               ; CODE XREF: sub_403910+C5↑p
.text:00404A30
.text:00404A30 Block           = dword ptr -2Ch
.text:00404A30 ErrorMessage    = dword ptr -28h
.text:00404A30 var_24          = dword ptr -24h
.text:00404A30 var_20          = byte ptr -20h
.text:00404A30 Str             = dword ptr -1Ch
.text:00404A30 var_18          = dword ptr -18h
.text:00404A30 var_14          = dword ptr -14h
.text:00404A30 arg_0           = dword ptr  4
.text:00404A30 arg_4           = dword ptr  8
.text:00404A30 arg_8           = dword ptr  0Ch
.text:00404A30 arg_C           = dword ptr  10h
.text:00404A30 arg_10          = dword ptr  14h
.text:00404A30
.text:00404A30                 push    ebp
.text:00404A31                 push    edi
.text:00404A32                 push    esi
.text:00404A33                 push    ebx
.text:00404A34                 sub     esp, 1Ch
.text:00404A37                 mov     edi, [esp+2Ch+arg_0]
.text:00404A3B                 mov     ebp, [esp+2Ch+arg_4]
.text:00404A3F                 mov     ecx, [edi+8]
.text:00404A42                 lea     edx, [ebp+1]
.text:00404A45                 cmp     edx, ecx
.text:00404A47                 jnb     loc_404B90
.text:00404A4D                 mov     esi, [edi]
.text:00404A4F                 xor     ebx, ebx
.text:00404A51                 cmp     byte ptr [edx+esi], 2Ah ; '*'
.text:00404A55                 jz      loc_404B7C
.text:00404A5B
.text:00404A5B loc_404A5B:                             ; CODE XREF: sub_404A30+153↓j
.text:00404A5B                                         ; sub_404A30+15B↓j
.text:00404A5B                 test    bl, bl
.text:00404A5D                 mov     eax, 0FFFFFFFFh
.text:00404A62                 jz      short loc_404A96
.text:00404A64                 lea     ebx, [ebp+2]
.text:00404A67                 cmp     ebx, ecx
.text:00404A69                 jnb     short loc_404A91
.text:00404A6B                 mov     eax, [edi+4]
.text:00404A6E                 cmp     byte ptr [ebx+eax], 0
.text:00404A72                 jnz     short loc_404A91
.text:00404A74                 lea     esi, [esi+0]
.text:00404A7A                 lea     edi, [edi+0]
.text:00404A80
.text:00404A80 loc_404A80:                             ; CODE XREF: sub_404A30+5F↓j
.text:00404A80                 cmp     byte ptr [ebx+esi], 5Dh ; ']'
.text:00404A84                 jz      short loc_404A9E
.text:00404A86                 inc     ebx
.text:00404A87                 cmp     ebx, ecx
.text:00404A89                 jnb     short loc_404A91
.text:00404A8B                 cmp     byte ptr [ebx+eax], 0
.text:00404A8F                 jz      short loc_404A80
.text:00404A91
.text:00404A91 loc_404A91:                             ; CODE XREF: sub_404A30+39↑j
.text:00404A91                                         ; sub_404A30+42↑j ...
.text:00404A91                 mov     eax, 0FFFFFFFFh
.text:00404A96
.text:00404A96 loc_404A96:                             ; CODE XREF: sub_404A30+32↑j
.text:00404A96                                         ; sub_404A30+9F↓j ...
.text:00404A96                 add     esp, 1Ch
.text:00404A99                 pop     ebx
.text:00404A9A                 pop     esi
.text:00404A9B                 pop     edi
.text:00404A9C                 pop     ebp
.text:00404A9D                 retn
.text:00404A9E ; ---------------------------------------------------------------------------
.text:00404A9E
.text:00404A9E loc_404A9E:                             ; CODE XREF: sub_404A30+54↑j
.text:00404A9E                 movzx   eax, byte ptr [ebp+esi+0]
.text:00404AA3                 mov     ecx, ebx
.text:00404AA5                 mov     esi, [esp+2Ch+arg_8]
.text:00404AA9                 sub     ecx, ebp
.text:00404AAB                 sub     ecx, 2
.text:00404AAE                 mov     [esi], al
.text:00404AB0                 mov     [esp+2Ch+var_18], ecx
.text:00404AB4                 jnz     short loc_404AD1
.text:00404AB6                 mov     edx, [esp+2Ch+arg_C]
.text:00404ABA                 mov     dword ptr [edx], 0
.text:00404AC0                 mov     dword ptr [edx+4], 0
.text:00404AC7
.text:00404AC7 loc_404AC7:                             ; CODE XREF: sub_404A30+FD↓j
.text:00404AC7                 mov     edx, [esp+2Ch+arg_10]
.text:00404ACB                 xor     eax, eax
.text:00404ACD                 mov     [edx], ebx
.text:00404ACF                 jmp     short loc_404A96
.text:00404AD1 ; ---------------------------------------------------------------------------
.text:00404AD1
.text:00404AD1 loc_404AD1:                             ; CODE XREF: sub_404A30+84↑j
.text:00404AD1                 mov     ecx, [edi]
.text:00404AD3                 mov     [esp+2Ch+Str], 0 ; Str
.text:00404ADB                 mov     eax, [esp+2Ch+arg_C]
.text:00404ADF                 add     ecx, ebp
.text:00404AE1                 mov     dword ptr [esp+2Ch+var_20], eax ; int
.text:00404AE5                 lea     esi, [ecx+2]
.text:00404AE8                 cmp     byte ptr [ecx+2], 30h ; '0'
.text:00404AEC                 lea     ecx, [esp+2Ch+var_14]
.text:00404AF0                 mov     [esp+2Ch+ErrorMessage], ecx ; int
.text:00404AF4                 setnz   dl
.text:00404AF7                 mov     [esp+2Ch+Block], esi ; int
.text:00404AFA                 movzx   ebp, dl
.text:00404AFD                 lea     edi, [ebp+ebp+8]
.text:00404B01                 mov     [esp+2Ch+var_24], edi ; int
.text:00404B05                 call    sub_4068B0
.text:00404B0A                 test    eax, eax
.text:00404B0C                 jnz     short loc_404B2F
.text:00404B0E                 mov     ebp, [esp+2Ch+arg_C]
.text:00404B12                 mov     edi, [ebp+4]
.text:00404B15                 mov     eax, [ebp+0]
.text:00404B18                 cmp     edi, 0FFFFFFFFh
.text:00404B1B                 jb      short loc_404B22
.text:00404B1D                 cmp     eax, 0FFFFFFFEh
.text:00404B20                 ja      short loc_404B2F
.text:00404B22
.text:00404B22 loc_404B22:                             ; CODE XREF: sub_404A30+EB↑j
.text:00404B22                 mov     eax, [esp+2Ch+var_18]
.text:00404B26                 lea     ecx, [eax+esi]
.text:00404B29                 cmp     ecx, [esp+2Ch+var_14]
.text:00404B2D                 jz      short loc_404AC7
.text:00404B2F
.text:00404B2F loc_404B2F:                             ; CODE XREF: sub_404A30+DC↑j
.text:00404B2F                                         ; sub_404A30+F0↑j
.text:00404B2F                 mov     [esp+2Ch+Block], esi
.text:00404B32                 mov     ebx, [esp+2Ch+var_18]
.text:00404B36                 mov     [esp+2Ch+ErrorMessage], ebx
.text:00404B3A                 call    sub_4048C0
.text:00404B3F                 mov     [esp+2Ch+Block], offset aInvalidRepeatC ; "invalid repeat count `%s' in [c*n] cons"...
.text:00404B46                 mov     esi, eax
.text:00404B48                 call    ds:libintl_gettext
.text:00404B4E                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00404B52                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404B5A                 mov     [esp+2Ch+Block], 0 ; Code
.text:00404B61                 mov     [esp+2Ch+var_24], eax ; char *
.text:00404B65                 call    sub_408C60
.text:00404B6A                 mov     [esp+2Ch+Block], esi ; Block
.text:00404B6D                 call    free
.text:00404B72                 mov     eax, 0FFFFFFFEh
.text:00404B77                 jmp     loc_404A96
.text:00404B7C ; ---------------------------------------------------------------------------
.text:00404B7C
.text:00404B7C loc_404B7C:                             ; CODE XREF: sub_404A30+25↑j
.text:00404B7C                 mov     eax, [edi+4]
.text:00404B7F                 cmp     byte ptr [edx+eax], 0
.text:00404B83                 jnz     loc_404A5B
.text:00404B89                 mov     bl, 1
.text:00404B8B                 jmp     loc_404A5B
.text:00404B90 ; ---------------------------------------------------------------------------
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_404A30+17↑j
.text:00404B90                 mov     [esp+2Ch+var_24], 327h
.text:00404B98                 mov     [esp+2Ch+ErrorMessage], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00404BA0                 mov     [esp+2Ch+Block], offset aStartIdx1EsLen ; "start_idx + 1 < es->len"
.text:00404BA7                 call    _assert
.text:00404BA7 sub_404A30      endp
.text:00404BA7
.text:00404BA7 ; ---------------------------------------------------------------------------
.text:00404BAC aTooManyCharact db 'too many characters in set',0
.text:00404BAC                                         ; DATA XREF: sub_404C10:loc_404CA7↓o
.text:00404BC7                 align 20h
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; DATA XREF: sub_404C10+1C8↓o
.text:00404BE0                 jo      short near ptr loc_404C0E+1
.text:00404BE2                 ht jnz  short loc_404C13
.text:00404BE5                 jb      short near ptr loc_404C45+3
.text:00404BE7                 outsb
.text:00404BE8                 db      65h, 2Eh
.text:00404BE8                 ins     byte ptr es:[di], dx
.text:00404BEC                 popa
.text:00404BED                 jnb     short near ptr algn_404C62+1
.text:00404BEF                 pop     edi
.text:00404BF0                 arpl    [eax+61h], bp
.text:00404BF3                 jb      short near ptr loc_404C14+1
.text:00404BF5                 db      3Eh
.text:00404BF5                 cmp     eax, 3E2D7020h
.text:00404BFB                 jnz     short loc_404C2B
.text:00404BFD                 jb      short near ptr loc_404C5B+5
.text:00404BFF                 outsb
.text:00404C00                 db      65h
.text:00404C00                 imul    si, cs:[bp+si+73h], 5F74h
.text:00404C09                 arpl    [eax+61h], bp
.text:00404C0C                 jb      short $+2
.text:00404C0E
.text:00404C0E loc_404C0E:                             ; CODE XREF: .text:00404C0C↑j
.text:00404C0E                                         ; .text:loc_404BE0↑j
.text:00404C0E                 mov     esi, esi
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 sub_404C10      proc near               ; CODE XREF: sub_404260+14↑p
.text:00404C10                                         ; sub_404260+A9↑p
.text:00404C10
.text:00404C10 Code            = dword ptr -2Ch
.text:00404C10 ErrorMessage    = dword ptr -28h
.text:00404C10 var_24          = dword ptr -24h
.text:00404C10 var_1C          = dword ptr -1Ch
.text:00404C10 var_18          = dword ptr -18h
.text:00404C10 arg_0           = dword ptr  4
.text:00404C10
.text:00404C10                 push    ebp
.text:00404C11                 push    edi
.text:00404C12                 push    esi
.text:00404C13
.text:00404C13 loc_404C13:                             ; CODE XREF: .text:00404BE2↑j
.text:00404C13                 push    ebx
.text:00404C14
.text:00404C14 loc_404C14:                             ; CODE XREF: .text:00404BF3↑j
.text:00404C14                 sub     esp, 1Ch
.text:00404C17                 mov     edx, [esp+2Ch+arg_0]
.text:00404C1B                 mov     [esp+2Ch+var_1C], 0
.text:00404C23                 mov     [esp+2Ch+var_18], 0
.text:00404C2B
.text:00404C2B loc_404C2B:                             ; CODE XREF: .text:00404BFB↑j
.text:00404C2B                 mov     ecx, [edx]
.text:00404C2D                 mov     dword ptr [edx+18h], 0
.text:00404C34                 mov     byte ptr [edx+20h], 0
.text:00404C38                 mov     ebp, [ecx+4]
.text:00404C3B                 mov     byte ptr [edx+22h], 0
.text:00404C3F                 mov     byte ptr [edx+21h], 0
.text:00404C43                 test    ebp, ebp
.text:00404C45
.text:00404C45 loc_404C45:                             ; CODE XREF: .text:00404BE5↑j
.text:00404C45                 jz      loc_404CDF
.text:00404C4B
.text:00404C4B loc_404C4B:                             ; CODE XREF: sub_404C10+C9↓j
.text:00404C4B                 mov     eax, [ebp+0]
.text:00404C4E                 xor     esi, esi
.text:00404C50                 xor     edi, edi
.text:00404C52                 cmp     eax, 4          ; switch 5 cases
.text:00404C55                 ja      def_404C5B      ; jumptable 00404C5B default case
.text:00404C5B
.text:00404C5B loc_404C5B:                             ; CODE XREF: .text:00404BFD↑j
.text:00404C5B                 jmp     ds:jpt_404C5B[eax*4] ; switch jump
.text:00404C5B ; ---------------------------------------------------------------------------
.text:00404C62 algn_404C62:                            ; CODE XREF: .text:00404BED↑j
.text:00404C62                 align 4
.text:00404C64 jpt_404C5B      dd offset loc_404C78    ; DATA XREF: sub_404C10:loc_404C5B↑r
.text:00404C64                 dd offset loc_404CF9    ; jump table for switch statement
.text:00404C64                 dd offset loc_404D1E
.text:00404C64                 dd offset loc_404D77
.text:00404C64                 dd offset loc_404DA0
.text:00404C78 ; ---------------------------------------------------------------------------
.text:00404C78
.text:00404C78 loc_404C78:                             ; CODE XREF: sub_404C10:loc_404C5B↑j
.text:00404C78                                         ; DATA XREF: sub_404C10:jpt_404C5B↑o
.text:00404C78                 mov     esi, 1          ; jumptable 00404C5B case 0
.text:00404C7D                 xor     edi, edi
.text:00404C7F
.text:00404C7F loc_404C7F:                             ; CODE XREF: sub_404C10+109↓j
.text:00404C7F                                         ; sub_404C10+14B↓j ...
.text:00404C7F                 mov     edx, [esp+2Ch+var_1C]
.text:00404C83                 mov     ecx, [esp+2Ch+var_18]
.text:00404C87                 add     edx, esi
.text:00404C89                 adc     ecx, edi
.text:00404C8B                 mov     ebx, edx
.text:00404C8D                 mov     esi, ecx
.text:00404C8F                 cmp     [esp+2Ch+var_18], ecx
.text:00404C93                 ja      short loc_404CA7
.text:00404C95                 jb      short loc_404C9D
.text:00404C97                 cmp     [esp+2Ch+var_1C], edx
.text:00404C9B                 ja      short loc_404CA7
.text:00404C9D
.text:00404C9D loc_404C9D:                             ; CODE XREF: sub_404C10+85↑j
.text:00404C9D                 cmp     esi, 0FFFFFFFFh
.text:00404CA0                 jb      short loc_404CCC
.text:00404CA2                 cmp     ebx, 0FFFFFFFEh
.text:00404CA5                 jbe     short loc_404CCC
.text:00404CA7
.text:00404CA7 loc_404CA7:                             ; CODE XREF: sub_404C10+83↑j
.text:00404CA7                                         ; sub_404C10+8B↑j
.text:00404CA7                 mov     [esp+2Ch+Code], offset aTooManyCharact ; "too many characters in set"
.text:00404CAE                 call    ds:libintl_gettext
.text:00404CB4                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404CBC                 mov     [esp+2Ch+Code], 1 ; Code
.text:00404CC3                 mov     [esp+2Ch+var_24], eax ; char *
.text:00404CC7                 call    sub_408C60
.text:00404CCC
.text:00404CCC loc_404CCC:                             ; CODE XREF: sub_404C10+90↑j
.text:00404CCC                                         ; sub_404C10+95↑j
.text:00404CCC                 mov     [esp+2Ch+var_1C], ebx
.text:00404CD0                 mov     ebp, [ebp+4]
.text:00404CD3                 mov     [esp+2Ch+var_18], esi
.text:00404CD7                 test    ebp, ebp
.text:00404CD9                 jnz     loc_404C4B
.text:00404CDF
.text:00404CDF loc_404CDF:                             ; CODE XREF: sub_404C10:loc_404C45↑j
.text:00404CDF                 mov     edi, [esp+2Ch+arg_0]
.text:00404CE3                 mov     esi, [esp+2Ch+var_1C]
.text:00404CE7                 mov     ebp, [esp+2Ch+var_18]
.text:00404CEB                 mov     [edi+10h], esi
.text:00404CEE                 mov     [edi+14h], ebp
.text:00404CF1                 add     esp, 1Ch
.text:00404CF4                 pop     ebx
.text:00404CF5                 pop     esi
.text:00404CF6                 pop     edi
.text:00404CF7                 pop     ebp
.text:00404CF8                 retn
.text:00404CF9 ; ---------------------------------------------------------------------------
.text:00404CF9
.text:00404CF9 loc_404CF9:                             ; CODE XREF: sub_404C10:loc_404C5B↑j
.text:00404CF9                                         ; DATA XREF: sub_404C10:jpt_404C5B↑o
.text:00404CF9                 movzx   eax, byte ptr [ebp+9] ; jumptable 00404C5B case 1
.text:00404CFD                 movzx   edx, byte ptr [ebp+8]
.text:00404D01                 cmp     al, dl
.text:00404D03                 jb      loc_404DC8
.text:00404D09                 movzx   esi, dl
.text:00404D0C                 movzx   ecx, al
.text:00404D0F                 sub     ecx, esi
.text:00404D11                 inc     ecx
.text:00404D12                 mov     edi, ecx
.text:00404D14                 mov     esi, ecx
.text:00404D16                 sar     edi, 1Fh
.text:00404D19                 jmp     loc_404C7F
.text:00404D1E ; ---------------------------------------------------------------------------
.text:00404D1E
.text:00404D1E loc_404D1E:                             ; CODE XREF: sub_404C10:loc_404C5B↑j
.text:00404D1E                                         ; DATA XREF: sub_404C10:jpt_404C5B↑o
.text:00404D1E                 mov     eax, [esp+2Ch+arg_0] ; jumptable 00404C5B case 2
.text:00404D22                 xor     ebx, ebx
.text:00404D24                 mov     byte ptr [eax+21h], 1
.text:00404D28                 nop
.text:00404D29                 lea     esi, [esi+0]
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: sub_404C10+143↓j
.text:00404D30                 movzx   ecx, bl
.text:00404D33                 mov     [esp+2Ch+ErrorMessage], ecx
.text:00404D37                 mov     edx, [ebp+8]
.text:00404D3A                 mov     [esp+2Ch+Code], edx
.text:00404D3D                 call    sub_4032B0
.text:00404D42                 test    al, al
.text:00404D44                 jz      short loc_404D4C
.text:00404D46                 add     esi, 1
.text:00404D49                 adc     edi, 0
.text:00404D4C
.text:00404D4C loc_404D4C:                             ; CODE XREF: sub_404C10+134↑j
.text:00404D4C                 inc     ebx
.text:00404D4D                 cmp     ebx, 0FFh
.text:00404D53                 jle     short loc_404D30
.text:00404D55                 mov     eax, [ebp+8]
.text:00404D58                 cmp     eax, 6
.text:00404D5B                 jz      loc_404C7F
.text:00404D61                 cmp     eax, 0Ah
.text:00404D64                 jz      loc_404C7F
.text:00404D6A                 mov     ebx, [esp+2Ch+arg_0]
.text:00404D6E                 mov     byte ptr [ebx+22h], 1
.text:00404D72                 jmp     loc_404C7F
.text:00404D77 ; ---------------------------------------------------------------------------
.text:00404D77
.text:00404D77 loc_404D77:                             ; CODE XREF: sub_404C10:loc_404C5B↑j
.text:00404D77                                         ; DATA XREF: sub_404C10:jpt_404C5B↑o
.text:00404D77                 movzx   edx, byte ptr [ebp+8] ; jumptable 00404C5B case 3
.text:00404D7B                 xor     ebx, ebx
.text:00404D7D                 lea     esi, [esi+0]
.text:00404D80
.text:00404D80 loc_404D80:                             ; CODE XREF: sub_404C10+181↓j
.text:00404D80                 cmp     dl, bl
.text:00404D82                 jnz     short loc_404D8A
.text:00404D84                 add     esi, 1
.text:00404D87                 adc     edi, 0
.text:00404D8A
.text:00404D8A loc_404D8A:                             ; CODE XREF: sub_404C10+172↑j
.text:00404D8A                 inc     ebx
.text:00404D8B                 cmp     ebx, 0FFh
.text:00404D91                 jle     short loc_404D80
.text:00404D93                 mov     eax, [esp+2Ch+arg_0]
.text:00404D97                 mov     byte ptr [eax+20h], 1
.text:00404D9B                 jmp     loc_404C7F
.text:00404DA0 ; ---------------------------------------------------------------------------
.text:00404DA0
.text:00404DA0 loc_404DA0:                             ; CODE XREF: sub_404C10:loc_404C5B↑j
.text:00404DA0                                         ; DATA XREF: sub_404C10:jpt_404C5B↑o
.text:00404DA0                 mov     edx, [ebp+14h]  ; jumptable 00404C5B case 4
.text:00404DA3                 mov     eax, [ebp+10h]
.text:00404DA6                 cmp     edx, 0
.text:00404DA9                 ja      short loc_404DB0
.text:00404DAB                 cmp     eax, 0
.text:00404DAE                 jbe     short loc_404DB9
.text:00404DB0
.text:00404DB0 loc_404DB0:                             ; CODE XREF: sub_404C10+199↑j
.text:00404DB0                 mov     esi, eax
.text:00404DB2                 mov     edi, edx
.text:00404DB4                 jmp     loc_404C7F
.text:00404DB9 ; ---------------------------------------------------------------------------
.text:00404DB9
.text:00404DB9 loc_404DB9:                             ; CODE XREF: sub_404C10+19E↑j
.text:00404DB9                 mov     edx, [esp+2Ch+arg_0]
.text:00404DBD                 inc     dword ptr [edx+18h]
.text:00404DC0                 mov     [edx+1Ch], ebp
.text:00404DC3                 jmp     loc_404C7F
.text:00404DC8 ; ---------------------------------------------------------------------------
.text:00404DC8
.text:00404DC8 loc_404DC8:                             ; CODE XREF: sub_404C10+F3↑j
.text:00404DC8                 mov     [esp+2Ch+var_24], 4CBh
.text:00404DD0                 mov     [esp+2Ch+ErrorMessage], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00404DD8                 mov     [esp+2Ch+Code], offset loc_404BE0
.text:00404DDF                 call    _assert
.text:00404DE4 ; ---------------------------------------------------------------------------
.text:00404DE4
.text:00404DE4 def_404C5B:                             ; CODE XREF: sub_404C10+45↑j
.text:00404DE4                 call    abort           ; jumptable 00404C5B default case
.text:00404DE4 sub_404C10      endp
.text:00404DE4
.text:00404DE4 ; ---------------------------------------------------------------------------
.text:00404DE9 aS1LengthS2Leng db 's1->length > s2->length',0
.text:00404DE9                                         ; DATA XREF: sub_404E30+52↓o
.text:00404E01 aI0             db 'i >= 0',0
.text:00404E08 aS2Length0      db 's2->length > 0',0
.text:00404E17 aTranslating    db 'translating',0
.text:00404E23                 align 10h
.text:00404E30
.text:00404E30 ; =============== S U B R O U T I N E =======================================
.text:00404E30
.text:00404E30
.text:00404E30 sub_404E30      proc near               ; CODE XREF: sub_404260+145↑p
.text:00404E30
.text:00404E30 var_3C          = dword ptr -3Ch
.text:00404E30 var_38          = dword ptr -38h
.text:00404E30 var_34          = dword ptr -34h
.text:00404E30 var_24          = dword ptr -24h
.text:00404E30 var_20          = dword ptr -20h
.text:00404E30 var_15          = byte ptr -15h
.text:00404E30 arg_0           = dword ptr  4
.text:00404E30 arg_4           = dword ptr  8
.text:00404E30
.text:00404E30                 push    ebp
.text:00404E31                 push    edi
.text:00404E32                 push    esi
.text:00404E33                 push    ebx
.text:00404E34                 sub     esp, 2Ch
.text:00404E37                 mov     ebp, [esp+3Ch+arg_4]
.text:00404E3B                 cmp     ds:byte_40B040, 0
.text:00404E42                 jz      loc_404FD5
.text:00404E48                 mov     eax, [esp+3Ch+arg_0]
.text:00404E4C                 mov     edx, [ebp+14h]
.text:00404E4F                 mov     ecx, [eax+14h]
.text:00404E52                 mov     ebx, [eax+10h]
.text:00404E55                 mov     edi, edx
.text:00404E57                 mov     eax, [ebp+10h]
.text:00404E5A                 mov     [esp+3Ch+var_20], ecx
.text:00404E5E                 cmp     [esp+3Ch+var_20], edx
.text:00404E62                 mov     esi, eax
.text:00404E64                 mov     [esp+3Ch+var_24], ebx
.text:00404E68                 ja      short loc_404E90
.text:00404E6A                 jb      short loc_404E72
.text:00404E6C                 cmp     [esp+3Ch+var_24], eax
.text:00404E70                 ja      short loc_404E90
.text:00404E72
.text:00404E72 loc_404E72:                             ; CODE XREF: sub_404E30+3A↑j
.text:00404E72                 mov     [esp+3Ch+var_34], 544h
.text:00404E7A                 mov     [esp+3Ch+var_38], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00404E82                 mov     [esp+3Ch+var_3C], offset aS1LengthS2Leng ; "s1->length > s2->length"
.text:00404E89
.text:00404E89 loc_404E89:                             ; CODE XREF: sub_404E30+10F↓j
.text:00404E89                                         ; sub_404E30+150↓j ...
.text:00404E89                 call    _assert
.text:00404E89 ; ---------------------------------------------------------------------------
.text:00404E8E                 align 10h
.text:00404E90
.text:00404E90 loc_404E90:                             ; CODE XREF: sub_404E30+38↑j
.text:00404E90                                         ; sub_404E30+40↑j
.text:00404E90                 cmp     edi, 0
.text:00404E93                 ja      short loc_404E9E
.text:00404E95                 cmp     esi, 0
.text:00404E98                 jbe     loc_404FB9
.text:00404E9E
.text:00404E9E loc_404E9E:                             ; CODE XREF: sub_404E30+63↑j
.text:00404E9E                 mov     edi, [ebp+4]
.text:00404EA1                 mov     esi, [edi]
.text:00404EA3                 cmp     esi, 4          ; switch 5 cases
.text:00404EA6                 ja      def_404EAC      ; jumptable 00404EAC default case, case 3
.text:00404EAC                 jmp     ds:jpt_404EAC[esi*4] ; switch jump
.text:00404EAC ; ---------------------------------------------------------------------------
.text:00404EB3                 align 4
.text:00404EB4 jpt_404EAC      dd offset loc_404FB0    ; DATA XREF: sub_404E30+7C↑r
.text:00404EB4                 dd offset loc_404EC8    ; jump table for switch statement
.text:00404EB4                 dd offset loc_404F44
.text:00404EB4                 dd offset def_404EAC
.text:00404EB4                 dd offset loc_404FB0
.text:00404EC8 ; ---------------------------------------------------------------------------
.text:00404EC8
.text:00404EC8 loc_404EC8:                             ; CODE XREF: sub_404E30+7C↑j
.text:00404EC8                                         ; DATA XREF: sub_404E30:jpt_404EAC↑o
.text:00404EC8                 movzx   ecx, byte ptr [edi+9] ; jumptable 00404EAC case 1
.text:00404ECC
.text:00404ECC loc_404ECC:                             ; CODE XREF: sub_404E30+184↓j
.text:00404ECC                 mov     [esp+3Ch+var_15], cl
.text:00404ED0
.text:00404ED0 loc_404ED0:                             ; CODE XREF: sub_404E30+175↓j
.text:00404ED0                 mov     [esp+3Ch+var_3C], 18h ; size_t
.text:00404ED7                 mov     esi, [esp+3Ch+var_24]
.text:00404EDB                 mov     edi, [esp+3Ch+var_20]
.text:00404EDF                 sub     esi, eax
.text:00404EE1                 sbb     edi, edx
.text:00404EE3                 call    sub_407580
.text:00404EE8                 movzx   ecx, [esp+3Ch+var_15]
.text:00404EED                 mov     dword ptr [eax+4], 0
.text:00404EF4                 mov     [eax+10h], esi
.text:00404EF7                 mov     [eax+14h], edi
.text:00404EFA                 mov     [eax+8], cl
.text:00404EFD                 mov     edx, [ebp+4]
.text:00404F00                 mov     dword ptr [eax], 4
.text:00404F06                 test    edx, edx
.text:00404F08                 jz      short loc_404F28
.text:00404F0A                 mov     [edx+4], eax
.text:00404F0D                 mov     [ebp+4], eax
.text:00404F10                 mov     eax, [esp+3Ch+arg_0]
.text:00404F14                 mov     ebx, [eax+14h]
.text:00404F17                 mov     edx, [eax+10h]
.text:00404F1A                 mov     [ebp+14h], ebx
.text:00404F1D                 mov     [ebp+10h], edx
.text:00404F20                 add     esp, 2Ch
.text:00404F23                 pop     ebx
.text:00404F24                 pop     esi
.text:00404F25                 pop     edi
.text:00404F26                 pop     ebp
.text:00404F27                 retn
.text:00404F28 ; ---------------------------------------------------------------------------
.text:00404F28
.text:00404F28 loc_404F28:                             ; CODE XREF: sub_404E30+D8↑j
.text:00404F28                 mov     [esp+3Ch+var_34], 2E3h
.text:00404F30                 mov     [esp+3Ch+var_38], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00404F38                 mov     [esp+3Ch+var_3C], offset aListTail ; "list->tail"
.text:00404F3F                 jmp     loc_404E89
.text:00404F44 ; ---------------------------------------------------------------------------
.text:00404F44
.text:00404F44 loc_404F44:                             ; CODE XREF: sub_404E30+7C↑j
.text:00404F44                                         ; DATA XREF: sub_404E30:jpt_404EAC↑o
.text:00404F44                 mov     ebx, 0FFh       ; jumptable 00404EAC case 2
.text:00404F49                 lea     esi, [esi+0]
.text:00404F50
.text:00404F50 loc_404F50:                             ; CODE XREF: sub_404E30+137↓j
.text:00404F50                 movzx   ecx, bl
.text:00404F53                 mov     [esp+3Ch+var_38], ecx
.text:00404F57                 mov     edx, [edi+8]
.text:00404F5A                 mov     [esp+3Ch+var_3C], edx
.text:00404F5D                 call    sub_4032B0
.text:00404F62                 test    al, al
.text:00404F64                 jnz     short loc_404F85
.text:00404F66                 dec     ebx
.text:00404F67                 jns     short loc_404F50
.text:00404F69
.text:00404F69 loc_404F69:                             ; CODE XREF: sub_404E30+157↓j
.text:00404F69                 mov     [esp+3Ch+var_34], 554h
.text:00404F71                 mov     [esp+3Ch+var_38], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00404F79                 mov     [esp+3Ch+var_3C], 404E01h
.text:00404F80                 jmp     loc_404E89
.text:00404F85 ; ---------------------------------------------------------------------------
.text:00404F85
.text:00404F85 loc_404F85:                             ; CODE XREF: sub_404E30+134↑j
.text:00404F85                 test    ebx, ebx
.text:00404F87                 js      short loc_404F69
.text:00404F89                 mov     [esp+3Ch+var_15], bl
.text:00404F8D                 mov     eax, [ebp+10h]
.text:00404F90                 mov     ebx, [esp+3Ch+arg_0]
.text:00404F94                 mov     edx, [ebp+14h]
.text:00404F97                 mov     edi, [ebx+10h]
.text:00404F9A                 mov     esi, [ebx+14h]
.text:00404F9D                 mov     [esp+3Ch+var_24], edi
.text:00404FA1                 mov     [esp+3Ch+var_20], esi
.text:00404FA5                 jmp     loc_404ED0
.text:00404FA5 ; ---------------------------------------------------------------------------
.text:00404FAA                 align 10h
.text:00404FB0
.text:00404FB0 loc_404FB0:                             ; CODE XREF: sub_404E30+7C↑j
.text:00404FB0                                         ; DATA XREF: sub_404E30:jpt_404EAC↑o
.text:00404FB0                 movzx   ecx, byte ptr [edi+8] ; jumptable 00404EAC cases 0,4
.text:00404FB4                 jmp     loc_404ECC
.text:00404FB9 ; ---------------------------------------------------------------------------
.text:00404FB9
.text:00404FB9 loc_404FB9:                             ; CODE XREF: sub_404E30+68↑j
.text:00404FB9                 mov     [esp+3Ch+var_34], 545h
.text:00404FC1                 mov     [esp+3Ch+var_38], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00404FC9                 mov     [esp+3Ch+var_3C], 404E08h
.text:00404FD0                 jmp     loc_404E89
.text:00404FD5 ; ---------------------------------------------------------------------------
.text:00404FD5
.text:00404FD5 loc_404FD5:                             ; CODE XREF: sub_404E30+12↑j
.text:00404FD5                 mov     [esp+3Ch+var_34], 543h
.text:00404FDD                 mov     [esp+3Ch+var_38], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/tr.c"
.text:00404FE5                 mov     [esp+3Ch+var_3C], 404E17h
.text:00404FEC                 jmp     loc_404E89
.text:00404FF1 ; ---------------------------------------------------------------------------
.text:00404FF1
.text:00404FF1 def_404EAC:                             ; CODE XREF: sub_404E30+76↑j
.text:00404FF1                                         ; sub_404E30+7C↑j
.text:00404FF1                                         ; DATA XREF: ...
.text:00404FF1                 call    abort           ; jumptable 00404EAC default case, case 3
.text:00404FF1 sub_404E30      endp
.text:00404FF1
.text:00404FF1 ; ---------------------------------------------------------------------------
.text:00404FF6                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000
.text:00405000 sub_405000      proc near               ; DATA XREF: sub_405180+1B4↓o
.text:00405000                 sub     eax, 9090002Dh
.text:00405005                 nop
.text:00405006                 nop
.text:00405007                 nop
.text:00405008                 nop
.text:00405009                 nop
.text:0040500A                 nop
.text:0040500B                 nop
.text:0040500C                 nop
.text:0040500D                 nop
.text:0040500E                 nop
.text:0040500F                 nop
.text:00405010                 nop
.text:00405011                 nop
.text:00405012                 nop
.text:00405013                 nop
.text:00405014                 nop
.text:00405015                 nop
.text:00405016                 nop
.text:00405017                 nop
.text:00405018                 nop
.text:00405019                 nop
.text:0040501A                 nop
.text:0040501B                 nop
.text:0040501C                 nop
.text:0040501D                 nop
.text:0040501E                 nop
.text:0040501F                 nop
.text:0040501F sub_405000      endp
.text:0040501F
.text:00405020
.text:00405020 ; =============== S U B R O U T I N E =======================================
.text:00405020
.text:00405020
.text:00405020 sub_405020      proc near               ; DATA XREF: sub_405180+3CC↓o
.text:00405020                 and     eax, 6F203A73h
.text:00405025                 jo      short loc_40509B
.text:00405027                 imul    ebp, [edi+6Eh], 63256020h
.text:0040502E                 and     eax, 64202773h
.text:00405033                 outsd
.text:00405034                 db      65h
.text:00405034                 jnb     short loc_4050A5
.text:00405037                 daa
.text:00405038                 jz      short loc_40505A
.text:0040503A                 popa
.text:0040503B                 insb
.text:0040503C                 insb
.text:0040503D                 outsd
.text:0040503E                 ja      short sub_405060
.text:00405040                 popa
.text:00405041                 outsb
.text:00405042                 and     [ecx+72h], ah
.text:00405045                 db      67h
.text:00405045                 jnz     near ptr loc_4050B4+1
.text:00405048                 outs    dx, byte ptr gs:[esi]
.text:0040504A                 jz      short loc_405056
.text:0040504C                 add     [eax-6F6F6F70h], dl
.text:00405052                 nop
.text:00405053                 nop
.text:00405054                 nop
.text:00405055                 nop
.text:00405056
.text:00405056 loc_405056:                             ; CODE XREF: sub_405020+2A↑j
.text:00405056                 nop
.text:00405057                 nop
.text:00405058                 nop
.text:00405059                 nop
.text:0040505A
.text:0040505A loc_40505A:                             ; CODE XREF: sub_405020+18↑j
.text:0040505A                 nop
.text:0040505B                 nop
.text:0040505C                 nop
.text:0040505D                 nop
.text:0040505E                 nop
.text:0040505F                 nop
.text:0040505F sub_405020      endp ; sp-analysis failed
.text:0040505F
.text:00405060
.text:00405060 ; =============== S U B R O U T I N E =======================================
.text:00405060
.text:00405060
.text:00405060 sub_405060      proc near               ; CODE XREF: sub_405020+1E↑j
.text:00405060                                         ; DATA XREF: sub_405180:loc_4055B2↓o
.text:00405060                 and     eax, 6F203A73h
.text:00405065                 jo      short loc_4050DB
.text:00405067                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:0040506E                 and     eax, 64202773h
.text:00405073                 outsd
.text:00405074                 db      65h
.text:00405074                 jnb     short loc_4050E5
.text:00405077                 daa
.text:00405078                 jz      short loc_40509A
.text:0040507A                 popa
.text:0040507B                 insb
.text:0040507C                 insb
.text:0040507D                 outsd
.text:0040507E                 ja      short sub_4050A0
.text:00405080                 popa
.text:00405081                 outsb
.text:00405082                 and     [ecx+72h], ah
.text:00405085                 db      67h
.text:00405085                 jnz     loc_4050F5
.text:00405088                 outs    dx, byte ptr gs:[esi]
.text:0040508A                 jz      short loc_405096
.text:0040508C                 add     [eax-6F6F6F70h], dl
.text:00405092                 nop
.text:00405093                 nop
.text:00405094                 nop
.text:00405095                 nop
.text:00405096
.text:00405096 loc_405096:                             ; CODE XREF: sub_405060+2A↑j
.text:00405096                 nop
.text:00405097                 nop
.text:00405098                 nop
.text:00405099                 nop
.text:0040509A
.text:0040509A loc_40509A:                             ; CODE XREF: sub_405060+18↑j
.text:0040509A                 nop
.text:0040509B
.text:0040509B loc_40509B:                             ; CODE XREF: sub_405020+5↑j
.text:0040509B                 nop
.text:0040509C                 nop
.text:0040509D                 nop
.text:0040509E                 nop
.text:0040509F                 nop
.text:0040509F sub_405060      endp ; sp-analysis failed
.text:0040509F
.text:004050A0
.text:004050A0 ; =============== S U B R O U T I N E =======================================
.text:004050A0
.text:004050A0
.text:004050A0 sub_4050A0      proc near               ; CODE XREF: sub_405060+1E↑j
.text:004050A0                                         ; DATA XREF: sub_405180:loc_405650↓o ...
.text:004050A0                 and     eax, 6F203A73h
.text:004050A5
.text:004050A5 loc_4050A5:                             ; CODE XREF: sub_405020+14↑j
.text:004050A5                 jo      short loc_40511B
.text:004050A7                 imul    ebp, [edi+6Eh], 73256020h
.text:004050AE                 daa
.text:004050AF                 and     [edx+65h], dh
.text:004050B2                 jno     short near ptr loc_405128+1
.text:004050B4
.text:004050B4 loc_4050B4:                             ; CODE XREF: sub_405020+25↑j
.text:004050B4                 imul    esi, [edx+65h], 6E612073h
.text:004050BB                 and     [ecx+72h], ah
.text:004050BE                 db      67h
.text:004050BE                 jnz     near ptr loc_40512C+2
.text:004050C1                 outs    dx, byte ptr gs:[esi]
.text:004050C3                 jz      short loc_4050CF
.text:004050C5                 add     [eax-6F6F6F70h], dl
.text:004050CB                 nop
.text:004050CC                 nop
.text:004050CD                 nop
.text:004050CE                 nop
.text:004050CF
.text:004050CF loc_4050CF:                             ; CODE XREF: sub_4050A0+23↑j
.text:004050CF                 nop
.text:004050D0                 nop
.text:004050D1                 nop
.text:004050D2                 nop
.text:004050D3                 nop
.text:004050D4                 nop
.text:004050D5                 nop
.text:004050D6                 nop
.text:004050D7                 nop
.text:004050D8                 nop
.text:004050D9                 nop
.text:004050DA                 nop
.text:004050DB
.text:004050DB loc_4050DB:                             ; CODE XREF: sub_405060+5↑j
.text:004050DB                 nop
.text:004050DC                 nop
.text:004050DD                 nop
.text:004050DE                 nop
.text:004050DF                 nop
.text:004050DF sub_4050A0      endp
.text:004050DF
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0
.text:004050E0 sub_4050E0      proc near               ; DATA XREF: sub_405180+55E↓o
.text:004050E0                 and     eax, 75203A73h
.text:004050E5
.text:004050E5 loc_4050E5:                             ; CODE XREF: sub_405060+14↑j
.text:004050E5                 outsb
.text:004050E6                 jb      short near ptr loc_405147+6
.text:004050E8                 arpl    [edi+67h], bp
.text:004050EB                 outsb
.text:004050EC                 imul    edi, [edx+65h], 706F2064h
.text:004050F3                 jz      short loc_40515E
.text:004050F5
.text:004050F5 loc_4050F5:                             ; CODE XREF: sub_405060+25↑j
.text:004050F5                 outsd
.text:004050F6                 outsb
.text:004050F7                 and     [eax+25h], ah
.text:004050FA                 arpl    ds:0A2773h, sp
.text:00405100
.text:00405100 loc_405100:                             ; DATA XREF: sub_405180:loc_405721↓o
.text:00405100                 add     [eax-6F6F6F70h], dl
.text:00405106                 nop
.text:00405107                 nop
.text:00405108                 nop
.text:00405109                 nop
.text:0040510A                 nop
.text:0040510B                 nop
.text:0040510C                 nop
.text:0040510D                 nop
.text:0040510E                 nop
.text:0040510F                 nop
.text:00405110                 nop
.text:00405111                 nop
.text:00405112                 nop
.text:00405113                 nop
.text:00405114                 nop
.text:00405115                 nop
.text:00405116                 nop
.text:00405117                 nop
.text:00405118                 nop
.text:00405119                 nop
.text:0040511A                 nop
.text:0040511B
.text:0040511B loc_40511B:                             ; CODE XREF: sub_4050A0:loc_4050A5↑j
.text:0040511B                 nop
.text:0040511C                 nop
.text:0040511D                 nop
.text:0040511E                 nop
.text:0040511F                 nop
.text:0040511F sub_4050E0      endp
.text:0040511F
.text:00405120
.text:00405120 ; =============== S U B R O U T I N E =======================================
.text:00405120
.text:00405120
.text:00405120 sub_405120      proc near               ; DATA XREF: sub_405180:loc_40573A↓o
.text:00405120                 and     eax, 75203A73h
.text:00405125                 outsb
.text:00405126                 jb      short near ptr loc_405187+6
.text:00405128
.text:00405128 loc_405128:                             ; CODE XREF: sub_4050A0+12↑j
.text:00405128                 arpl    [edi+67h], bp
.text:0040512B                 outsb
.text:0040512C
.text:0040512C loc_40512C:                             ; CODE XREF: sub_4050A0+1E↑j
.text:0040512C                 imul    edi, [edx+65h], 706F2064h
.text:00405133                 jz      short loc_40519E
.text:00405135                 outsd
.text:00405136                 outsb
.text:00405137                 and     [eax+2Dh], ah
.text:0040513A                 sub     eax, 0A277325h
.text:0040513F                 add     ds:6F203A73h, ah
.text:00405145                 jo      short loc_4051BB
.text:00405147
.text:00405147 loc_405147:                             ; CODE XREF: sub_4050E0+6↑j
.text:00405147                 imul    ebp, [edi+6Eh], 71657220h
.text:0040514E                 jnz     short loc_4051B9
.text:00405150                 jb      short loc_4051B7
.text:00405152                 jnb     short loc_405174
.text:00405154                 popa
.text:00405155                 outsb
.text:00405156                 and     [ecx+72h], ah
.text:00405159                 db      67h
.text:00405159                 jnz     near ptr loc_4051C7+2
.text:0040515C                 outs    dx, byte ptr gs:[esi]
.text:0040515E
.text:0040515E loc_40515E:                             ; CODE XREF: sub_4050E0+13↑j
.text:0040515E                 jz      short sub_405180
.text:00405160                 sub     eax, 6325202Dh
.text:00405165                 or      al, [eax]
.text:00405167                 nop
.text:00405168                 nop
.text:00405169                 nop
.text:0040516A                 nop
.text:0040516B                 nop
.text:0040516C                 nop
.text:0040516D                 nop
.text:0040516E                 nop
.text:0040516F                 nop
.text:00405170                 nop
.text:00405171                 nop
.text:00405172                 nop
.text:00405173                 nop
.text:00405174
.text:00405174 loc_405174:                             ; CODE XREF: sub_405120+32↑j
.text:00405174                 nop
.text:00405175                 nop
.text:00405176                 nop
.text:00405177                 nop
.text:00405178                 nop
.text:00405179                 nop
.text:0040517A                 nop
.text:0040517B                 nop
.text:0040517C                 nop
.text:0040517D                 nop
.text:0040517E                 nop
.text:0040517F                 nop
.text:0040517F sub_405120      endp ; sp-analysis failed
.text:0040517F
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180
.text:00405180 ; int __cdecl sub_405180(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00405180 sub_405180      proc near               ; CODE XREF: sub_405120:loc_40515E↑j
.text:00405180                                         ; DATA XREF: sub_405180:loc_405993↓o
.text:00405180
.text:00405180 Str2            = dword ptr  4
.text:00405180 MaxCount        = dword ptr  8
.text:00405180 arg_8           = dword ptr  0Ch
.text:00405180 arg_C           = dword ptr  10h
.text:00405180 arg_1C          = dword ptr  20h
.text:00405180 arg_20          = dword ptr  24h
.text:00405180 arg_24          = dword ptr  28h
.text:00405180 arg_28          = dword ptr  2Ch
.text:00405180 arg_2C          = dword ptr  30h
.text:00405180 arg_30          = dword ptr  34h
.text:00405180 arg_34          = dword ptr  38h
.text:00405180 arg_38          = dword ptr  3Ch
.text:00405180 arg_3C          = dword ptr  40h
.text:00405180 arg_40          = dword ptr  44h
.text:00405180 arg_44          = dword ptr  48h
.text:00405180 arg_5C          = dword ptr  60h
.text:00405180 arg_60          = dword ptr  64h
.text:00405180 Str             = dword ptr  68h
.text:00405180 arg_68          = dword ptr  6Ch
.text:00405180 arg_6C          = dword ptr  70h
.text:00405180 arg_70          = dword ptr  74h
.text:00405180 arg_74          = dword ptr  78h
.text:00405180
.text:00405180 ; FUNCTION CHUNK AT .text:004051FB SIZE 00000053 BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405264 SIZE 0000014B BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:004053B0 SIZE 0000023A BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:004055F0 SIZE 00000099 BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405690 SIZE 000000DF BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405770 SIZE 0000025B BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:004059D0 SIZE 000001AE BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405B80 SIZE 000000F9 BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405C80 SIZE 000000CE BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405D50 SIZE 0000003A BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405D90 SIZE 0000000B BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405DA0 SIZE 00000019 BYTES
.text:00405180 ; FUNCTION CHUNK AT .text:00405DC0 SIZE 00000011 BYTES
.text:00405180
.text:00405180                 and     eax, 6F203A73h
.text:00405185                 jo      short loc_4051FB
.text:00405187
.text:00405187 loc_405187:                             ; CODE XREF: sub_405120+6↑j
.text:00405187                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040518E                 and     ds:64202773h, ah
.text:00405194                 outsd
.text:00405195                 db      65h
.text:00405195                 jnb     short near ptr loc_405204+2
.text:00405198                 daa
.text:00405199                 jz      short loc_4051BB
.text:0040519B                 popa
.text:0040519C                 insb
.text:0040519D                 insb
.text:0040519E
.text:0040519E loc_40519E:                             ; CODE XREF: sub_405120+13↑j
.text:0040519E                 outsd
.text:0040519F                 ja      short near ptr sub_4051C0+1
.text:004051A1                 popa
.text:004051A2                 outsb
.text:004051A3                 and     [ecx+72h], ah
.text:004051A6                 db      67h
.text:004051A6                 jnz     near ptr loc_405215+1
.text:004051A9                 outs    dx, byte ptr gs:[esi]
.text:004051AB                 jz      short loc_4051B7
.text:004051AD                 add     [eax-6F6F6F70h], dl
.text:004051B3                 nop
.text:004051B4                 nop
.text:004051B5                 nop
.text:004051B6                 nop
.text:004051B7
.text:004051B7 loc_4051B7:                             ; CODE XREF: sub_405120+30↑j
.text:004051B7                                         ; sub_405180+2B↑j
.text:004051B7                 nop
.text:004051B8                 nop
.text:004051B9
.text:004051B9 loc_4051B9:                             ; CODE XREF: sub_405120+2E↑j
.text:004051B9                 nop
.text:004051BA                 nop
.text:004051BB
.text:004051BB loc_4051BB:                             ; CODE XREF: sub_405120+25↑j
.text:004051BB                                         ; sub_405180+19↑j
.text:004051BB                 nop
.text:004051BC                 nop
.text:004051BD                 nop
.text:004051BE                 nop
.text:004051BF                 nop
.text:004051BF sub_405180      endp ; sp-analysis failed
.text:004051BF
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0
.text:004051C0 sub_4051C0      proc near               ; CODE XREF: sub_405180+1F↑j
.text:004051C0                                         ; DATA XREF: sub_405180:loc_405A7F↓o
.text:004051C0
.text:004051C0 arg_A4          = dword ptr  0A8h
.text:004051C0 arg_B8          = dword ptr  0BCh
.text:004051C0
.text:004051C0 ; FUNCTION CHUNK AT .text:0040525A SIZE 0000000A BYTES
.text:004051C0
.text:004051C0                 and     eax, 6F203A73h
.text:004051C5                 jo      short loc_40523B
.text:004051C7
.text:004051C7 loc_4051C7:                             ; CODE XREF: sub_405120+39↑j
.text:004051C7                 imul    ebp, [edi+6Eh], 572D6020h
.text:004051CE                 and     ds:69202773h, ah
.text:004051D4                 jnb     short near ptr loc_4051F3+3
.text:004051D6                 popa
.text:004051D7                 insd
.text:004051D8                 bound   ebp, [ecx+67h]
.text:004051DB                 jnz     short near ptr loc_405248+4
.text:004051DD                 jnz     short near ptr loc_405251+1
.text:004051DF                 or      al, [eax]
.text:004051E1
.text:004051E1 loc_4051E1:                             ; DATA XREF: sub_405180+A0F↓o
.text:004051E1                 and     eax, 69203A73h
.text:004051E6                 insb
.text:004051E7                 insb
.text:004051E8                 db      65h, 67h
.text:004051E8                 popa
.text:004051EB                 insb
.text:004051EC                 and     [edi+70h], ch
.text:004051EF                 jz      short loc_40525A
.text:004051F1                 outsd
.text:004051F2                 outsb
.text:004051F3
.text:004051F3 loc_4051F3:                             ; CODE XREF: sub_4051C0+14↑j
.text:004051F3                 and     ds:6325202Dh, ch
.text:004051F9                 or      al, [eax]
.text:004051F9 sub_4051C0      endp ; sp-analysis failed
.text:004051F9
.text:004051FB ; START OF FUNCTION CHUNK FOR sub_405180
.text:004051FB
.text:004051FB loc_4051FB:                             ; CODE XREF: sub_405180+5↑j
.text:004051FB                                         ; DATA XREF: sub_405180:loc_405BC7↓o
.text:004051FB                 and     eax, 69203A73h
.text:00405200                 outsb
.text:00405201                 jbe     short loc_405264
.text:00405203                 insb
.text:00405204
.text:00405204 loc_405204:                             ; CODE XREF: sub_405180+15↑j
.text:00405204                 imul    esp, [eax+6Fh], 6F697470h
.text:0040520C                 outsb
.text:0040520D                 and     ds:6325202Dh, ch
.text:00405213                 or      al, [eax]
.text:00405215
.text:00405215 loc_405215:                             ; CODE XREF: sub_405180+26↑j
.text:00405215                                         ; DATA XREF: sub_405180:loc_405BEE↓o
.text:00405215                 and     eax, 6F203A73h
.text:0040521A                 jo      short near ptr loc_40528F+1
.text:0040521C                 imul    ebp, [edi+6Eh], 73256020h
.text:00405223                 daa
.text:00405224                 and     [ecx+73h], ch
.text:00405227                 and     [ecx+6Dh], ah
.text:0040522A                 bound   ebp, [ecx+67h]
.text:0040522D                 jnz     short near ptr loc_40529C+2
.text:0040522F                 jnz     short near ptr loc_4052A3+1
.text:00405231                 or      al, [eax]
.text:00405233
.text:00405233 loc_405233:                             ; DATA XREF: sub_405180:loc_405DA0↓o
.text:00405233                 push    eax
.text:00405234                 dec     edi
.text:00405235                 push    ebx
.text:00405236                 dec     ecx
.text:00405237                 pop     eax
.text:00405238                 dec     esp
.text:00405239                 pop     ecx
.text:0040523A                 pop     edi
.text:0040523B
.text:0040523B loc_40523B:                             ; CODE XREF: sub_4051C0+5↑j
.text:0040523B                 inc     ebx
.text:0040523C                 dec     edi
.text:0040523D                 push    edx
.text:0040523E                 push    edx
.text:0040523F                 inc     ebp
.text:00405240                 inc     ebx
.text:00405241                 push    esp
.text:00405242                 add     [ebp+0B6h], cl
.text:00405248
.text:00405248 loc_405248:                             ; CODE XREF: sub_4051C0+1B↑j
.text:00405248                 add     [ebp+27BCh], cl
.text:00405248 ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405248 ; ---------------------------------------------------------------------------
.text:0040524E                 dw 0
.text:00405250 ; ---------------------------------------------------------------------------
.text:00405250
.text:00405250 loc_405250:                             ; CODE XREF: sub_405DE0+5A↓p
.text:00405250                                         ; .text:00405ECA↓p ...
.text:00405250                 push    ebp
.text:00405251
.text:00405251 loc_405251:                             ; CODE XREF: sub_4051C0+1D↑j
.text:00405251                 mov     eax, 0FFFFFFFFh
.text:00405256                 push    edi
.text:00405257                 push    esi
.text:00405258                 push    ebx
.text:00405258 ; ---------------------------------------------------------------------------
.text:00405259                 db 83h
.text:0040525A ; ---------------------------------------------------------------------------
.text:0040525A ; START OF FUNCTION CHUNK FOR sub_4051C0
.text:0040525A
.text:0040525A loc_40525A:                             ; CODE XREF: sub_4051C0+2F↑j
.text:0040525A                 in      al, dx
.text:0040525B                 dec     esp
.text:0040525C                 mov     esi, [esp-40h+arg_A4]
.text:00405260                 mov     ebp, [esp-40h+arg_B8]
.text:00405260 ; END OF FUNCTION CHUNK FOR sub_4051C0
.text:00405264 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405264
.text:00405264 loc_405264:                             ; CODE XREF: sub_405180+81↑j
.text:00405264                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00405267                 mov     ebx, [ebp+4]
.text:0040526A                 setz    dl
.text:0040526D                 movzx   ecx, dl
.text:00405270                 dec     ecx
.text:00405271                 and     ecx, ebx
.text:00405273                 mov     [esp+arg_44], ecx
.text:00405277                 mov     ecx, [esp+arg_5C]
.text:0040527B                 test    ecx, ecx
.text:0040527D                 jle     loc_4053A7
.text:00405283                 mov     dword ptr [ebp+0Ch], 0
.text:0040528A                 mov     ebx, [ebp+0]
.text:0040528D                 test    ebx, ebx
.text:0040528F
.text:0040528F loc_40528F:                             ; CODE XREF: sub_405180+9A↑j
.text:0040528F                 jz      loc_405DC0
.text:00405295                 mov     edi, [ebp+10h]
.text:00405298                 test    edi, edi
.text:0040529A                 jnz     short loc_4052F3
.text:0040529C
.text:0040529C loc_40529C:                             ; CODE XREF: sub_405180+AD↑j
.text:0040529C                 lea     esi, [esi+0]
.text:004052A0
.text:004052A0 loc_4052A0:                             ; CODE XREF: sub_405180+C4C↓j
.text:004052A0                 mov     [ebp+24h], ebx
.text:004052A3
.text:004052A3 loc_4052A3:                             ; CODE XREF: sub_405180+AF↑j
.text:004052A3                 mov     esi, [esp+Str]
.text:004052A7                 mov     [ebp+20h], ebx
.text:004052AA                 mov     ecx, [esp+arg_74]
.text:004052AE                 xor     ebx, ebx
.text:004052B0                 mov     dword ptr [ebp+14h], 0
.text:004052B7                 test    ecx, ecx
.text:004052B9                 jz      loc_405DA0
.text:004052BF
.text:004052BF loc_4052BF:                             ; CODE XREF: sub_405180+C34↓j
.text:004052BF                 mov     ebx, 1
.text:004052C4
.text:004052C4 loc_4052C4:                             ; CODE XREF: sub_405180+C2E↓j
.text:004052C4                 mov     [ebp+1Ch], ebx
.text:004052C7                 mov     ecx, [esp+Str]
.text:004052CB                 movzx   eax, byte ptr [ecx]
.text:004052CE                 cmp     al, 2Dh ; '-'
.text:004052D0                 jz      loc_405D90
.text:004052D6                 cmp     al, 2Bh ; '+'
.text:004052D8                 jz      loc_405D79
.text:004052DE                 xor     edx, edx
.text:004052E0                 test    ebx, ebx
.text:004052E2                 setz    dl
.text:004052E5                 mov     [ebp+18h], edx
.text:004052E8
.text:004052E8 loc_4052E8:                             ; CODE XREF: sub_405180+C05↓j
.text:004052E8                 mov     [esp+Str], esi
.text:004052EC                 mov     dword ptr [ebp+10h], 1
.text:004052F3
.text:004052F3 loc_4052F3:                             ; CODE XREF: sub_405180+11A↑j
.text:004052F3                 mov     eax, [ebp+14h]
.text:004052F6                 test    eax, eax
.text:004052F8                 jz      short loc_405303
.text:004052FA                 cmp     byte ptr [eax], 0
.text:004052FD                 jnz     loc_4053E0
.text:00405303
.text:00405303 loc_405303:                             ; CODE XREF: sub_405180+178↑j
.text:00405303                 mov     ebx, [ebp+0]
.text:00405306                 cmp     [ebp+24h], ebx
.text:00405309                 jle     short loc_40530E
.text:0040530B                 mov     [ebp+24h], ebx
.text:0040530E
.text:0040530E loc_40530E:                             ; CODE XREF: sub_405180+189↑j
.text:0040530E                 cmp     [ebp+20h], ebx
.text:00405311                 jle     short loc_405316
.text:00405313                 mov     [ebp+20h], ebx
.text:00405316
.text:00405316 loc_405316:                             ; CODE XREF: sub_405180+191↑j
.text:00405316                 cmp     dword ptr [ebp+18h], 1
.text:0040531A                 jz      loc_405CF0
.text:00405320
.text:00405320 loc_405320:                             ; CODE XREF: sub_405180+BE3↓j
.text:00405320                 cmp     ebx, [esp+arg_5C]
.text:00405324                 jz      loc_405CD4
.text:0040532A                 cld
.text:0040532B                 mov     ecx, [esp+arg_60]
.text:0040532F                 mov     edx, 3
.text:00405334                 mov     edi, offset sub_405000
.text:00405339                 mov     esi, [ecx+ebx*4]
.text:0040533C                 mov     ecx, edx
.text:0040533E                 repe cmpsb
.text:00405340                 jnz     short loc_40537C
.text:00405342                 mov     edx, [ebp+24h]
.text:00405345                 lea     eax, [ebx+1]
.text:00405348                 cmp     [ebp+20h], edx
.text:0040534B                 mov     [ebp+0], eax
.text:0040534E                 jz      loc_405CE8
.text:00405354                 cmp     edx, eax
.text:00405356                 jz      short loc_405370
.text:00405358                 mov     [esp+Str2], ebp
.text:0040535C                 mov     ebx, [esp+arg_60]
.text:00405360                 mov     [esp+0], ebx
.text:00405363                 call    sub_405F00
.text:00405368                 nop
.text:00405369                 lea     esi, [esi+0]
.text:00405370
.text:00405370 loc_405370:                             ; CODE XREF: sub_405180+1D6↑j
.text:00405370                                         ; sub_405180+B6B↓j
.text:00405370                 mov     eax, [esp+arg_5C]
.text:00405374                 mov     ebx, eax
.text:00405376                 mov     [ebp+24h], eax
.text:00405379                 mov     [ebp+0], eax
.text:0040537C
.text:0040537C loc_40537C:                             ; CODE XREF: sub_405180+1C0↑j
.text:0040537C                 cmp     ebx, [esp+arg_5C]
.text:00405380                 jz      loc_405CD4
.text:00405386                 mov     esi, [esp+arg_60]
.text:0040538A                 mov     eax, [esi+ebx*4]
.text:0040538D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405390                 jz      short loc_4053B7
.text:00405392
.text:00405392 loc_405392:                             ; CODE XREF: sub_405180+23D↓j
.text:00405392                 mov     edx, [ebp+18h]
.text:00405395                 test    edx, edx
.text:00405397                 jz      short loc_4053B0
.text:00405399                 mov     [ebp+0Ch], eax
.text:0040539C                 lea     edi, [ebx+1]
.text:0040539F                 mov     eax, 1
.text:004053A4                 mov     [ebp+0], edi
.text:004053A7
.text:004053A7 loc_4053A7:                             ; CODE XREF: sub_405180+FD↑j
.text:004053A7                                         ; sub_405180+235↓j ...
.text:004053A7                 add     esp, 4Ch
.text:004053AA                 pop     ebx
.text:004053AB                 pop     esi
.text:004053AC                 pop     edi
.text:004053AD                 pop     ebp
.text:004053AE                 retn
.text:004053AE ; END OF FUNCTION CHUNK FOR sub_405180
.text:004053AE ; ---------------------------------------------------------------------------
.text:004053AF                 align 10h
.text:004053B0 ; START OF FUNCTION CHUNK FOR sub_405180
.text:004053B0
.text:004053B0 loc_4053B0:                             ; CODE XREF: sub_405180+217↑j
.text:004053B0                                         ; sub_405180+B5A↓j ...
.text:004053B0                 mov     eax, 0FFFFFFFFh
.text:004053B5                 jmp     short loc_4053A7
.text:004053B7 ; ---------------------------------------------------------------------------
.text:004053B7
.text:004053B7 loc_4053B7:                             ; CODE XREF: sub_405180+210↑j
.text:004053B7                 movzx   edx, byte ptr [eax+1]
.text:004053BB                 test    dl, dl
.text:004053BD                 jz      short loc_405392
.text:004053BF                 mov     ebx, [esp+arg_68]
.text:004053C3                 xor     ecx, ecx
.text:004053C5                 test    ebx, ebx
.text:004053C7                 jz      short loc_4053D2
.text:004053C9                 cmp     dl, 2Dh ; '-'
.text:004053CC                 jz      loc_405CCA
.text:004053D2
.text:004053D2 loc_4053D2:                             ; CODE XREF: sub_405180+247↑j
.text:004053D2                                         ; sub_405180+B4F↓j
.text:004053D2                 lea     esi, [ecx+eax+1]
.text:004053D6                 mov     [ebp+14h], esi
.text:004053D9                 lea     esi, [esi+0]
.text:004053E0
.text:004053E0 loc_4053E0:                             ; CODE XREF: sub_405180+17D↑j
.text:004053E0                 mov     ecx, [esp+arg_68]
.text:004053E4                 test    ecx, ecx
.text:004053E6                 jz      loc_405770
.text:004053EC                 mov     edx, [ebp+0]
.text:004053EF                 mov     edi, [esp+arg_60]
.text:004053F3                 mov     eax, [edi+edx*4]
.text:004053F6                 movzx   edx, byte ptr [eax+1]
.text:004053FA                 cmp     dl, 2Dh ; '-'
.text:004053FD                 jz      short loc_405415
.text:004053FF                 mov     ebx, [esp+arg_70]
.text:00405403                 test    ebx, ebx
.text:00405405                 jz      loc_405770
.text:0040540B                 cmp     byte ptr [eax+2], 0
.text:0040540F                 jz      loc_405CAA
.text:00405415
.text:00405415 loc_405415:                             ; CODE XREF: sub_405180+27D↑j
.text:00405415                                         ; sub_405180+B45↓j
.text:00405415                 mov     [esp+arg_40], 0
.text:0040541D                 mov     ecx, [ebp+14h]
.text:00405420                 mov     [esp+arg_3C], 0
.text:00405428                 mov     [esp+arg_38], 0
.text:00405430                 mov     edi, ecx
.text:00405432                 mov     [esp+arg_34], 0FFFFFFFFh
.text:0040543A                 movzx   eax, byte ptr [ecx]
.text:0040543D                 test    al, al
.text:0040543F                 jz      short loc_40545C
.text:00405441                 cmp     al, 3Dh ; '='
.text:00405443                 jz      short loc_40545C
.text:00405445                 lea     esi, [esi+0]
.text:00405449                 lea     edi, [edi+0]
.text:00405450
.text:00405450 loc_405450:                             ; CODE XREF: sub_405180+2DA↓j
.text:00405450                 inc     edi
.text:00405451                 movzx   eax, byte ptr [edi]
.text:00405454                 test    al, al
.text:00405456                 jz      short loc_40545C
.text:00405458                 cmp     al, 3Dh ; '='
.text:0040545A                 jnz     short loc_405450
.text:0040545C
.text:0040545C loc_40545C:                             ; CODE XREF: sub_405180+2BF↑j
.text:0040545C                                         ; sub_405180+2C3↑j ...
.text:0040545C                 mov     [esp+arg_30], 0
.text:00405464                 mov     esi, [esp+arg_68]
.text:00405468                 mov     ebx, [esi]
.text:0040546A                 test    ebx, ebx
.text:0040546C                 mov     edx, ebx
.text:0040546E                 jz      loc_405690
.text:00405474                 lea     esi, [esi+0]
.text:0040547A                 lea     edi, [edi+0]
.text:00405480
.text:00405480 loc_405480:                             ; CODE XREF: sub_405180+32E↓j
.text:00405480                 mov     [esp+Str2], ecx ; Str2
.text:00405484                 mov     ebx, edi
.text:00405486                 sub     ebx, ecx
.text:00405488                 mov     [esp+MaxCount], ebx ; MaxCount
.text:0040548C                 mov     [esp+0], edx    ; Str1
.text:0040548F                 call    strncmp
.text:00405494                 test    eax, eax
.text:00405496                 jz      loc_405C26
.text:0040549C
.text:0040549C loc_40549C:                             ; CODE XREF: sub_405180+ADF↓j
.text:0040549C                                         ; sub_405180+AF4↓j ...
.text:0040549C                 inc     [esp+arg_30]
.text:004054A0                 add     esi, 10h
.text:004054A3                 mov     ecx, [esi]
.text:004054A5                 test    ecx, ecx
.text:004054A7                 mov     edx, ecx
.text:004054A9                 jz      short loc_4054B0
.text:004054AB                 mov     ecx, [ebp+14h]
.text:004054AE                 jmp     short loc_405480
.text:004054B0 ; ---------------------------------------------------------------------------
.text:004054B0
.text:004054B0 loc_4054B0:                             ; CODE XREF: sub_405180+329↑j
.text:004054B0                                         ; sub_405180+B25↓j
.text:004054B0                 mov     esi, [esp+arg_38]
.text:004054B4                 test    esi, esi
.text:004054B6                 jz      short loc_4054C4
.text:004054B8                 mov     edx, [esp+arg_3C]
.text:004054BC                 test    edx, edx
.text:004054BE                 jz      loc_405BD0
.text:004054C4
.text:004054C4 loc_4054C4:                             ; CODE XREF: sub_405180+336↑j
.text:004054C4                 mov     eax, [esp+arg_40]
.text:004054C8                 test    eax, eax
.text:004054CA                 jz      loc_405690
.text:004054D0                 mov     ecx, [ebp+0]
.text:004054D3                 lea     eax, [ecx+1]
.text:004054D6                 mov     [ebp+0], eax
.text:004054D9                 cmp     byte ptr [edi], 0
.text:004054DC                 jz      loc_4055F0
.text:004054E2                 mov     ecx, [esp+arg_40]
.text:004054E6                 mov     esi, [ecx+4]
.text:004054E9                 test    esi, esi
.text:004054EB                 jz      short loc_405536
.text:004054ED                 lea     ebx, [edi+1]
.text:004054F0                 mov     [ebp+0Ch], ebx
.text:004054F3
.text:004054F3 loc_4054F3:                             ; CODE XREF: sub_405180+478↓j
.text:004054F3                                         ; sub_405180+494↓j
.text:004054F3                 mov     ebx, [ebp+14h]
.text:004054F6                 mov     [esp+0], ebx    ; Str
.text:004054F9                 call    strlen
.text:004054FE                 add     [ebp+14h], eax
.text:00405501                 mov     esi, [esp+arg_6C]
.text:00405505                 test    esi, esi
.text:00405507                 jz      short loc_405513
.text:00405509                 mov     ebp, [esp+arg_34]
.text:0040550D                 mov     ecx, [esp+arg_6C]
.text:00405511                 mov     [ecx], ebp
.text:00405513
.text:00405513 loc_405513:                             ; CODE XREF: sub_405180+387↑j
.text:00405513                 mov     eax, [esp+arg_40]
.text:00405517                 mov     ecx, [eax+8]
.text:0040551A                 test    ecx, ecx
.text:0040551C                 jnz     short loc_40552A
.text:0040551E                 mov     ecx, [esp+arg_40]
.text:00405522
.text:00405522 loc_405522:                             ; CODE XREF: sub_405180+7F3↓j
.text:00405522                 mov     eax, [ecx+0Ch]
.text:00405525                 jmp     loc_4053A7
.text:0040552A ; ---------------------------------------------------------------------------
.text:0040552A
.text:0040552A loc_40552A:                             ; CODE XREF: sub_405180+39C↑j
.text:0040552A                                         ; sub_405180+7E9↓j
.text:0040552A                 mov     esi, [eax+0Ch]
.text:0040552D                 xor     eax, eax
.text:0040552F                 mov     [ecx], esi
.text:00405531                 jmp     loc_4053A7
.text:00405536 ; ---------------------------------------------------------------------------
.text:00405536
.text:00405536 loc_405536:                             ; CODE XREF: sub_405180+36B↑j
.text:00405536                 mov     edi, [esp+arg_44]
.text:0040553A                 test    edi, edi
.text:0040553C                 jz      short loc_405590
.text:0040553E                 mov     esi, [esp+arg_60]
.text:00405542                 mov     edx, [esi+eax*4-4]
.text:00405546                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040554A                 jz      short loc_4055B2
.text:0040554C                 mov     dword ptr [esp+0], offset sub_405020
.text:00405553                 call    ds:libintl_gettext
.text:00405559                 mov     edx, [esp+arg_40]
.text:0040555D                 mov     edi, [edx]
.text:0040555F                 mov     [esp+arg_C], edi
.text:00405563                 mov     ebx, [ebp+0]
.text:00405566                 mov     edi, [esp+arg_60]
.text:0040556A                 mov     ecx, [edi+ebx*4-4]
.text:0040556E                 movsx   esi, byte ptr [ecx]
.text:00405571                 mov     ecx, ds:_iob
.text:00405577                 add     ecx, 40h ; '@'
.text:0040557A                 mov     [esp+arg_8], esi
.text:0040557E                 mov     ebx, [edi]
.text:00405580                 mov     [esp+Str2], eax ; Format
.text:00405584                 mov     [esp+0], ecx    ; Stream
.text:00405587                 mov     [esp+MaxCount], ebx
.text:0040558B                 call    fprintf
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: sub_405180+3BC↑j
.text:00405590                                         ; sub_405180+468↓j
.text:00405590                 mov     ecx, [ebp+14h]
.text:00405593                 mov     [esp+0], ecx    ; Str
.text:00405596                 call    strlen
.text:0040559B                 add     [ebp+14h], eax
.text:0040559E                 mov     eax, [esp+arg_40]
.text:004055A2                 mov     esi, [eax+0Ch]
.text:004055A5                 mov     [ebp+8], esi
.text:004055A8
.text:004055A8 loc_4055A8:                             ; CODE XREF: sub_405180+5B5↓j
.text:004055A8                                         ; sub_405180+80E↓j ...
.text:004055A8                 mov     eax, 3Fh ; '?'
.text:004055AD                 jmp     loc_4053A7
.text:004055B2 ; ---------------------------------------------------------------------------
.text:004055B2
.text:004055B2 loc_4055B2:                             ; CODE XREF: sub_405180+3CA↑j
.text:004055B2                 mov     dword ptr [esp+0], offset sub_405060
.text:004055B9                 call    ds:libintl_gettext
.text:004055BF                 mov     edx, [esp+arg_40]
.text:004055C3                 mov     edi, [esp+arg_60]
.text:004055C7                 mov     ecx, ds:_iob
.text:004055CD                 mov     esi, [edx]
.text:004055CF                 add     ecx, 40h ; '@'
.text:004055D2                 mov     [esp+arg_8], esi
.text:004055D6                 mov     ebx, [edi]
.text:004055D8                 mov     [esp+Str2], eax ; Format
.text:004055DC                 mov     [esp+0], ecx    ; Stream
.text:004055DF                 mov     [esp+MaxCount], ebx
.text:004055E3                 call    fprintf
.text:004055E8                 jmp     short loc_405590
.text:004055E8 ; END OF FUNCTION CHUNK FOR sub_405180
.text:004055E8 ; ---------------------------------------------------------------------------
.text:004055EA                 align 10h
.text:004055F0 ; START OF FUNCTION CHUNK FOR sub_405180
.text:004055F0
.text:004055F0 loc_4055F0:                             ; CODE XREF: sub_405180+35C↑j
.text:004055F0                 mov     ebx, [esp+arg_40]
.text:004055F4                 cmp     dword ptr [ebx+4], 1
.text:004055F8                 jnz     loc_4054F3
.text:004055FE                 cmp     eax, [esp+arg_5C]
.text:00405602                 jge     short loc_405619
.text:00405604                 mov     ebx, [esp+arg_60]
.text:00405608                 lea     edi, [ecx+2]
.text:0040560B                 mov     [ebp+0], edi
.text:0040560E                 mov     esi, [ebx+eax*4]
.text:00405611                 mov     [ebp+0Ch], esi
.text:00405614                 jmp     loc_4054F3
.text:00405619 ; ---------------------------------------------------------------------------
.text:00405619
.text:00405619 loc_405619:                             ; CODE XREF: sub_405180+482↑j
.text:00405619                 mov     edx, [esp+arg_44]
.text:0040561D                 test    edx, edx
.text:0040561F                 jnz     short loc_405650
.text:00405621
.text:00405621 loc_405621:                             ; CODE XREF: sub_405180+507↓j
.text:00405621                 mov     edx, [ebp+14h]
.text:00405624                 mov     [esp+0], edx    ; Str
.text:00405627                 call    strlen
.text:0040562C                 add     [ebp+14h], eax
.text:0040562F                 mov     eax, [esp+arg_40]
.text:00405633                 mov     edi, [eax+0Ch]
.text:00405636                 mov     [ebp+8], edi
.text:00405639
.text:00405639 loc_405639:                             ; CODE XREF: sub_405180+892↓j
.text:00405639                 mov     ebp, [esp+Str]
.text:0040563D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405641                 setnz   bl
.text:00405644                 movzx   esi, bl
.text:00405647                 lea     eax, [esi+esi*4+3Ah]
.text:0040564B                 jmp     loc_4053A7
.text:00405650 ; ---------------------------------------------------------------------------
.text:00405650
.text:00405650 loc_405650:                             ; CODE XREF: sub_405180+49F↑j
.text:00405650                 mov     dword ptr [esp+0], offset sub_4050A0
.text:00405657                 call    ds:libintl_gettext
.text:0040565D                 mov     ecx, [ebp+0]
.text:00405660                 mov     esi, [esp+arg_60]
.text:00405664                 mov     ebx, [esi+ecx*4-4]
.text:00405668                 mov     ecx, ds:_iob
.text:0040566E                 mov     [esp+arg_8], ebx
.text:00405672                 mov     edi, [esi]
.text:00405674                 add     ecx, 40h ; '@'
.text:00405677                 mov     [esp+Str2], eax ; Format
.text:0040567B                 mov     [esp+0], ecx    ; Stream
.text:0040567E                 mov     [esp+MaxCount], edi
.text:00405682                 call    fprintf
.text:00405687                 jmp     short loc_405621
.text:00405687 ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405687 ; ---------------------------------------------------------------------------
.text:00405689                 align 10h
.text:00405690 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405690
.text:00405690 loc_405690:                             ; CODE XREF: sub_405180+2EE↑j
.text:00405690                                         ; sub_405180+34A↑j
.text:00405690                 mov     eax, [esp+arg_70]
.text:00405694                 test    eax, eax
.text:00405696                 jz      short loc_4056C6
.text:00405698                 mov     ebx, [ebp+0]
.text:0040569B                 mov     esi, [esp+arg_60]
.text:0040569F                 mov     edi, [esi+ebx*4]
.text:004056A2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004056A6                 jz      short loc_4056C9
.text:004056A8                 mov     ecx, [ebp+14h]
.text:004056AB                 mov     edx, [esp+Str]
.text:004056AF                 movsx   ebx, byte ptr [ecx]
.text:004056B2                 mov     [esp+0], edx    ; Str
.text:004056B5                 mov     [esp+Str2], ebx ; Val
.text:004056B9                 call    strchr
.text:004056BE                 test    eax, eax
.text:004056C0                 jnz     loc_405770
.text:004056C6
.text:004056C6 loc_4056C6:                             ; CODE XREF: sub_405180+516↑j
.text:004056C6                 mov     ebx, [ebp+0]
.text:004056C9
.text:004056C9 loc_4056C9:                             ; CODE XREF: sub_405180+526↑j
.text:004056C9                 mov     eax, [esp+arg_44]
.text:004056CD                 test    eax, eax
.text:004056CF                 jz      short loc_405721
.text:004056D1                 mov     esi, [esp+arg_60]
.text:004056D5                 mov     edi, [esi+ebx*4]
.text:004056D8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004056DC                 jz      short loc_40573A
.text:004056DE                 mov     dword ptr [esp+0], offset sub_4050E0
.text:004056E5                 call    ds:libintl_gettext
.text:004056EB                 mov     edi, [ebp+14h]
.text:004056EE                 mov     [esp+arg_C], edi
.text:004056F2                 mov     ebx, [ebp+0]
.text:004056F5                 mov     edi, [esp+arg_60]
.text:004056F9                 mov     esi, [edi+ebx*4]
.text:004056FC                 movsx   ecx, byte ptr [esi]
.text:004056FF                 mov     esi, ds:_iob
.text:00405705                 add     esi, 40h ; '@'
.text:00405708                 mov     [esp+arg_8], ecx
.text:0040570C                 mov     ebx, [edi]
.text:0040570E                 mov     [esp+Str2], eax ; Format
.text:00405712                 mov     [esp+0], esi    ; Stream
.text:00405715                 mov     [esp+MaxCount], ebx
.text:00405719                 call    fprintf
.text:0040571E
.text:0040571E loc_40571E:                             ; CODE XREF: sub_405180+5ED↓j
.text:0040571E                 mov     ebx, [ebp+0]
.text:00405721
.text:00405721 loc_405721:                             ; CODE XREF: sub_405180+54F↑j
.text:00405721                 mov     dword ptr [ebp+14h], offset loc_405100
.text:00405728                 lea     edx, [ebx+1]
.text:0040572B                 mov     [ebp+0], edx
.text:0040572E
.text:0040572E loc_40572E:                             ; CODE XREF: sub_405180+A69↓j
.text:0040572E                 mov     dword ptr [ebp+8], 0
.text:00405735                 jmp     loc_4055A8
.text:0040573A ; ---------------------------------------------------------------------------
.text:0040573A
.text:0040573A loc_40573A:                             ; CODE XREF: sub_405180+55C↑j
.text:0040573A                 mov     dword ptr [esp+0], offset sub_405120
.text:00405741                 call    ds:libintl_gettext
.text:00405747                 mov     ecx, [ebp+14h]
.text:0040574A                 mov     edi, [esp+arg_60]
.text:0040574E                 mov     edx, ds:_iob
.text:00405754                 mov     [esp+arg_8], ecx
.text:00405758                 mov     ebx, [edi]
.text:0040575A                 add     edx, 40h ; '@'
.text:0040575D                 mov     [esp+Str2], eax ; Format
.text:00405761                 mov     [esp+MaxCount], ebx
.text:00405765                 mov     [esp+0], edx    ; Stream
.text:00405768                 call    fprintf
.text:0040576D                 jmp     short loc_40571E
.text:0040576D ; END OF FUNCTION CHUNK FOR sub_405180
.text:0040576D ; ---------------------------------------------------------------------------
.text:0040576F                 align 10h
.text:00405770 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: sub_405180+266↑j
.text:00405770                                         ; sub_405180+285↑j ...
.text:00405770                 mov     esi, [ebp+14h]
.text:00405773                 movzx   ebx, byte ptr [esi]
.text:00405776                 inc     esi
.text:00405777                 mov     [ebp+14h], esi
.text:0040577A                 mov     ecx, [esp+Str]
.text:0040577E                 movsx   esi, bl
.text:00405781                 mov     [esp+Str2], esi ; Val
.text:00405785                 mov     edi, esi
.text:00405787                 mov     [esp+0], ecx    ; Str
.text:0040578A                 call    strchr
.text:0040578F                 mov     ecx, [ebp+14h]
.text:00405792                 cmp     byte ptr [ecx], 0
.text:00405795                 jnz     short loc_40579A
.text:00405797                 inc     dword ptr [ebp+0]
.text:0040579A
.text:0040579A loc_40579A:                             ; CODE XREF: sub_405180+615↑j
.text:0040579A                 test    eax, eax
.text:0040579C                 jz      loc_405B80
.text:004057A2                 cmp     bl, 3Ah ; ':'
.text:004057A5                 jz      loc_405B80
.text:004057AB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004057AE                 jz      loc_405866
.text:004057B4                 movzx   edx, byte ptr [eax+1]
.text:004057B8
.text:004057B8 loc_4057B8:                             ; CODE XREF: sub_405180+6ED↓j
.text:004057B8                 cmp     dl, 3Ah ; ':'
.text:004057BB                 jz      short loc_4057C4
.text:004057BD
.text:004057BD loc_4057BD:                             ; CODE XREF: sub_405180+660↓j
.text:004057BD                 mov     eax, esi
.text:004057BF                 jmp     loc_4053A7
.text:004057C4 ; ---------------------------------------------------------------------------
.text:004057C4
.text:004057C4 loc_4057C4:                             ; CODE XREF: sub_405180+63B↑j
.text:004057C4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004057C8                 jz      loc_405851
.text:004057CE                 cmp     byte ptr [ecx], 0
.text:004057D1                 jz      short loc_4057E2
.text:004057D3
.text:004057D3 loc_4057D3:                             ; CODE XREF: sub_405180+6D4↓j
.text:004057D3                 inc     dword ptr [ebp+0]
.text:004057D6                 mov     [ebp+0Ch], ecx
.text:004057D9
.text:004057D9 loc_4057D9:                             ; CODE XREF: sub_405180+67B↓j
.text:004057D9                                         ; sub_405180+696↓j ...
.text:004057D9                 mov     dword ptr [ebp+14h], 0
.text:004057E0                 jmp     short loc_4057BD
.text:004057E2 ; ---------------------------------------------------------------------------
.text:004057E2
.text:004057E2 loc_4057E2:                             ; CODE XREF: sub_405180+651↑j
.text:004057E2                 mov     ecx, [ebp+0]
.text:004057E5                 cmp     ecx, [esp+arg_5C]
.text:004057E9                 jz      short loc_4057FD
.text:004057EB                 mov     eax, [esp+arg_60]
.text:004057EF                 lea     edx, [ecx+1]
.text:004057F2                 mov     [ebp+0], edx
.text:004057F5                 mov     ebx, [eax+ecx*4]
.text:004057F8                 mov     [ebp+0Ch], ebx
.text:004057FB                 jmp     short loc_4057D9
.text:004057FD ; ---------------------------------------------------------------------------
.text:004057FD
.text:004057FD loc_4057FD:                             ; CODE XREF: sub_405180+669↑j
.text:004057FD                 mov     ecx, [esp+arg_44]
.text:00405801                 test    ecx, ecx
.text:00405803                 jnz     short loc_40581F
.text:00405805
.text:00405805 loc_405805:                             ; CODE XREF: sub_405180+6CF↓j
.text:00405805                 mov     [ebp+8], edi
.text:00405808                 mov     edi, [esp+Str]
.text:0040580C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040580F                 jz      short loc_405818
.text:00405811                 mov     esi, 3Fh ; '?'
.text:00405816                 jmp     short loc_4057D9
.text:00405818 ; ---------------------------------------------------------------------------
.text:00405818
.text:00405818 loc_405818:                             ; CODE XREF: sub_405180+68F↑j
.text:00405818                 mov     esi, 3Ah ; ':'
.text:0040581D                 jmp     short loc_4057D9
.text:0040581F ; ---------------------------------------------------------------------------
.text:0040581F
.text:0040581F loc_40581F:                             ; CODE XREF: sub_405180+683↑j
.text:0040581F                 mov     dword ptr [esp+0], 405140h
.text:00405826                 call    ds:libintl_gettext
.text:0040582C                 mov     [esp+arg_8], edi
.text:00405830                 mov     ebx, [esp+arg_60]
.text:00405834                 mov     edx, ds:_iob
.text:0040583A                 mov     esi, [ebx]
.text:0040583C                 add     edx, 40h ; '@'
.text:0040583F                 mov     [esp+Str2], eax ; Format
.text:00405843                 mov     [esp+MaxCount], esi
.text:00405847                 mov     [esp+0], edx    ; Stream
.text:0040584A                 call    fprintf
.text:0040584F                 jmp     short loc_405805
.text:00405851 ; ---------------------------------------------------------------------------
.text:00405851
.text:00405851 loc_405851:                             ; CODE XREF: sub_405180+648↑j
.text:00405851                 cmp     byte ptr [ecx], 0
.text:00405854                 jnz     loc_4057D3
.text:0040585A                 mov     dword ptr [ebp+0Ch], 0
.text:00405861                 jmp     loc_4057D9
.text:00405866 ; ---------------------------------------------------------------------------
.text:00405866
.text:00405866 loc_405866:                             ; CODE XREF: sub_405180+62E↑j
.text:00405866                 movzx   edx, byte ptr [eax+1]
.text:0040586A                 cmp     dl, 3Bh ; ';'
.text:0040586D                 jnz     loc_4057B8
.text:00405873                 mov     [esp+arg_2C], 0
.text:0040587B                 mov     [esp+arg_28], 0
.text:00405883                 mov     [esp+arg_24], 0
.text:0040588B                 mov     [esp+arg_20], 0
.text:00405893                 cmp     byte ptr [ecx], 0
.text:00405896                 jz      loc_405B0B
.text:0040589C                 inc     dword ptr [ebp+0]
.text:0040589F                 mov     [ebp+0Ch], ecx
.text:004058A2
.text:004058A2 loc_4058A2:                             ; CODE XREF: sub_405180+9A4↓j
.text:004058A2                 mov     edi, [ebp+0Ch]
.text:004058A5                 mov     [ebp+14h], edi
.text:004058A8                 movzx   eax, byte ptr [edi]
.text:004058AB                 test    al, al
.text:004058AD                 jz      short loc_4058BF
.text:004058AF                 cmp     al, 3Dh ; '='
.text:004058B1                 jz      short loc_4058BF
.text:004058B3
.text:004058B3 loc_4058B3:                             ; CODE XREF: sub_405180+73D↓j
.text:004058B3                 inc     edi
.text:004058B4                 movzx   eax, byte ptr [edi]
.text:004058B7                 test    al, al
.text:004058B9                 jz      short loc_4058BF
.text:004058BB                 cmp     al, 3Dh ; '='
.text:004058BD                 jnz     short loc_4058B3
.text:004058BF
.text:004058BF loc_4058BF:                             ; CODE XREF: sub_405180+72D↑j
.text:004058BF                                         ; sub_405180+731↑j ...
.text:004058BF                 mov     [esp+arg_1C], 0
.text:004058C7                 mov     esi, [esp+arg_68]
.text:004058CB                 mov     eax, [esi]
.text:004058CD                 test    eax, eax
.text:004058CF                 jz      loc_405A50
.text:004058D5                 mov     ecx, eax
.text:004058D7
.text:004058D7 loc_4058D7:                             ; CODE XREF: sub_405180+783↓j
.text:004058D7                 mov     ebx, [ebp+14h]
.text:004058DA                 mov     eax, edi
.text:004058DC                 mov     [esp+0], ecx    ; Str1
.text:004058DF                 sub     eax, ebx
.text:004058E1                 mov     [esp+MaxCount], eax ; MaxCount
.text:004058E5                 mov     [esp+Str2], ebx ; Str2
.text:004058E9                 call    strncmp
.text:004058EE                 test    eax, eax
.text:004058F0                 jz      loc_405AB7
.text:004058F6
.text:004058F6 loc_4058F6:                             ; CODE XREF: sub_405180+95C↓j
.text:004058F6                                         ; sub_405180+96D↓j
.text:004058F6                 inc     [esp+arg_1C]
.text:004058FA                 add     esi, 10h
.text:004058FD                 mov     edx, [esi]
.text:004058FF                 test    edx, edx
.text:00405901                 mov     ecx, edx
.text:00405903                 jnz     short loc_4058D7
.text:00405905
.text:00405905 loc_405905:                             ; CODE XREF: sub_405180+986↓j
.text:00405905                 mov     esi, [esp+arg_24]
.text:00405909                 test    esi, esi
.text:0040590B                 jz      short loc_405919
.text:0040590D                 mov     ebx, [esp+arg_28]
.text:00405911                 test    ebx, ebx
.text:00405913                 jz      loc_405A61
.text:00405919
.text:00405919 loc_405919:                             ; CODE XREF: sub_405180+78B↑j
.text:00405919                 mov     esi, [esp+arg_2C]
.text:0040591D                 test    esi, esi
.text:0040591F                 jz      loc_405A50
.text:00405925                 cmp     byte ptr [edi], 0
.text:00405928                 jz      loc_4059D0
.text:0040592E                 mov     ecx, [esp+arg_2C]
.text:00405932                 mov     ebx, [ecx+4]
.text:00405935                 test    ebx, ebx
.text:00405937                 jz      short loc_405978
.text:00405939                 lea     edx, [edi+1]
.text:0040593C                 mov     [ebp+0Ch], edx
.text:0040593F
.text:0040593F loc_40593F:                             ; CODE XREF: sub_405180+858↓j
.text:0040593F                                         ; sub_405180+877↓j
.text:0040593F                 mov     edi, [ebp+14h]
.text:00405942                 mov     [esp+0], edi    ; Str
.text:00405945                 call    strlen
.text:0040594A                 add     [ebp+14h], eax
.text:0040594D                 mov     eax, [esp+arg_6C]
.text:00405951                 test    eax, eax
.text:00405953                 jz      short loc_405960
.text:00405955                 mov     edx, [esp+arg_20]
.text:00405959                 mov     ebp, [esp+arg_6C]
.text:0040595D                 mov     [ebp+0], edx
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: sub_405180+7D3↑j
.text:00405960                 mov     eax, [esp+arg_2C]
.text:00405964                 mov     ecx, [eax+8]
.text:00405967                 test    ecx, ecx
.text:00405969                 jnz     loc_40552A
.text:0040596F                 mov     ecx, [esp+arg_2C]
.text:00405973                 jmp     loc_405522
.text:00405978 ; ---------------------------------------------------------------------------
.text:00405978
.text:00405978 loc_405978:                             ; CODE XREF: sub_405180+7B7↑j
.text:00405978                 mov     eax, [esp+arg_44]
.text:0040597C                 test    eax, eax
.text:0040597E                 jnz     short loc_405993
.text:00405980
.text:00405980 loc_405980:                             ; CODE XREF: sub_405180+849↓j
.text:00405980                 mov     ecx, [ebp+14h]
.text:00405983                 mov     [esp+0], ecx    ; Str
.text:00405986                 call    strlen
.text:0040598B                 add     [ebp+14h], eax
.text:0040598E                 jmp     loc_4055A8
.text:00405993 ; ---------------------------------------------------------------------------
.text:00405993
.text:00405993 loc_405993:                             ; CODE XREF: sub_405180+7FE↑j
.text:00405993                 mov     dword ptr [esp+0], offset sub_405180
.text:0040599A                 call    ds:libintl_gettext
.text:004059A0                 mov     edx, [esp+arg_2C]
.text:004059A4                 mov     ebx, [esp+arg_60]
.text:004059A8                 mov     edi, [edx]
.text:004059AA                 mov     [esp+arg_8], edi
.text:004059AE                 mov     edi, ds:_iob
.text:004059B4                 mov     esi, [ebx]
.text:004059B6                 mov     [esp+Str2], eax ; Format
.text:004059BA                 add     edi, 40h ; '@'
.text:004059BD                 mov     [esp+MaxCount], esi
.text:004059C1                 mov     [esp+0], edi    ; Stream
.text:004059C4                 call    fprintf
.text:004059C9                 jmp     short loc_405980
.text:004059C9 ; END OF FUNCTION CHUNK FOR sub_405180
.text:004059C9 ; ---------------------------------------------------------------------------
.text:004059CB                 align 10h
.text:004059D0 ; START OF FUNCTION CHUNK FOR sub_405180
.text:004059D0
.text:004059D0 loc_4059D0:                             ; CODE XREF: sub_405180+7A8↑j
.text:004059D0                 mov     esi, [esp+arg_2C]
.text:004059D4                 cmp     dword ptr [esi+4], 1
.text:004059D8                 jnz     loc_40593F
.text:004059DE                 mov     ecx, [ebp+0]
.text:004059E1                 cmp     ecx, [esp+arg_5C]
.text:004059E5                 jge     short loc_4059FC
.text:004059E7                 mov     eax, [esp+arg_60]
.text:004059EB                 lea     ebx, [ecx+1]
.text:004059EE                 mov     [ebp+0], ebx
.text:004059F1                 mov     edi, [eax+ecx*4]
.text:004059F4                 mov     [ebp+0Ch], edi
.text:004059F7                 jmp     loc_40593F
.text:004059FC ; ---------------------------------------------------------------------------
.text:004059FC
.text:004059FC loc_4059FC:                             ; CODE XREF: sub_405180+865↑j
.text:004059FC                 mov     edx, [esp+arg_44]
.text:00405A00                 test    edx, edx
.text:00405A02                 jnz     short loc_405A17
.text:00405A04
.text:00405A04 loc_405A04:                             ; CODE XREF: sub_405180+8CE↓j
.text:00405A04                 mov     edx, [ebp+14h]
.text:00405A07                 mov     [esp+0], edx    ; Str
.text:00405A0A                 call    strlen
.text:00405A0F                 add     [ebp+14h], eax
.text:00405A12                 jmp     loc_405639
.text:00405A17 ; ---------------------------------------------------------------------------
.text:00405A17
.text:00405A17 loc_405A17:                             ; CODE XREF: sub_405180+882↑j
.text:00405A17                 mov     dword ptr [esp+0], offset sub_4050A0
.text:00405A1E                 call    ds:libintl_gettext
.text:00405A24                 mov     ecx, [ebp+0]
.text:00405A27                 mov     ebx, [esp+arg_60]
.text:00405A2B                 mov     edi, [ebx+ecx*4-4]
.text:00405A2F                 mov     ecx, ds:_iob
.text:00405A35                 mov     [esp+arg_8], edi
.text:00405A39                 mov     esi, [ebx]
.text:00405A3B                 add     ecx, 40h ; '@'
.text:00405A3E                 mov     [esp+Str2], eax ; Format
.text:00405A42                 mov     [esp+0], ecx    ; Stream
.text:00405A45                 mov     [esp+MaxCount], esi
.text:00405A49                 call    fprintf
.text:00405A4E                 jmp     short loc_405A04
.text:00405A50 ; ---------------------------------------------------------------------------
.text:00405A50
.text:00405A50 loc_405A50:                             ; CODE XREF: sub_405180+74F↑j
.text:00405A50                                         ; sub_405180+79F↑j
.text:00405A50                 mov     dword ptr [ebp+14h], 0
.text:00405A57                 mov     eax, 57h ; 'W'
.text:00405A5C                 jmp     loc_4053A7
.text:00405A61 ; ---------------------------------------------------------------------------
.text:00405A61
.text:00405A61 loc_405A61:                             ; CODE XREF: sub_405180+793↑j
.text:00405A61                 mov     edi, [esp+arg_44]
.text:00405A65                 test    edi, edi
.text:00405A67                 jnz     short loc_405A7F
.text:00405A69
.text:00405A69 loc_405A69:                             ; CODE XREF: sub_405180+935↓j
.text:00405A69                 mov     edx, [ebp+14h]
.text:00405A6C                 mov     [esp+0], edx    ; Str
.text:00405A6F                 call    strlen
.text:00405A74                 add     [ebp+14h], eax
.text:00405A77                 inc     dword ptr [ebp+0]
.text:00405A7A                 jmp     loc_4055A8
.text:00405A7F ; ---------------------------------------------------------------------------
.text:00405A7F
.text:00405A7F loc_405A7F:                             ; CODE XREF: sub_405180+8E7↑j
.text:00405A7F                 mov     dword ptr [esp+0], offset sub_4051C0
.text:00405A86                 call    ds:libintl_gettext
.text:00405A8C                 mov     ecx, [ebp+0]
.text:00405A8F                 mov     ebx, [esp+arg_60]
.text:00405A93                 mov     edi, [ebx+ecx*4]
.text:00405A96                 mov     ecx, ds:_iob
.text:00405A9C                 mov     [esp+arg_8], edi
.text:00405AA0                 mov     esi, [ebx]
.text:00405AA2                 add     ecx, 40h ; '@'
.text:00405AA5                 mov     [esp+Str2], eax ; Format
.text:00405AA9                 mov     [esp+0], ecx    ; Stream
.text:00405AAC                 mov     [esp+MaxCount], esi
.text:00405AB0                 call    fprintf
.text:00405AB5                 jmp     short loc_405A69
.text:00405AB7 ; ---------------------------------------------------------------------------
.text:00405AB7
.text:00405AB7 loc_405AB7:                             ; CODE XREF: sub_405180+770↑j
.text:00405AB7                 mov     edx, [ebp+14h]
.text:00405ABA                 mov     ebx, edi
.text:00405ABC                 mov     ecx, [esi]
.text:00405ABE                 sub     ebx, edx
.text:00405AC0                 mov     [esp+0], ecx    ; Str
.text:00405AC3                 call    strlen
.text:00405AC8                 cmp     ebx, eax
.text:00405ACA                 jz      short loc_405AF2
.text:00405ACC                 mov     ebx, [esp+arg_2C]
.text:00405AD0                 test    ebx, ebx
.text:00405AD2                 jz      short loc_405AE1
.text:00405AD4                 mov     [esp+arg_24], 1
.text:00405ADC                 jmp     loc_4058F6
.text:00405AE1 ; ---------------------------------------------------------------------------
.text:00405AE1
.text:00405AE1 loc_405AE1:                             ; CODE XREF: sub_405180+952↑j
.text:00405AE1                 mov     [esp+arg_2C], esi
.text:00405AE5                 mov     ecx, [esp+arg_1C]
.text:00405AE9                 mov     [esp+arg_20], ecx
.text:00405AED                 jmp     loc_4058F6
.text:00405AF2 ; ---------------------------------------------------------------------------
.text:00405AF2
.text:00405AF2 loc_405AF2:                             ; CODE XREF: sub_405180+94A↑j
.text:00405AF2                 mov     [esp+arg_2C], esi
.text:00405AF6                 mov     eax, [esp+arg_1C]
.text:00405AFA                 mov     [esp+arg_28], 1
.text:00405B02                 mov     [esp+arg_20], eax
.text:00405B06                 jmp     loc_405905
.text:00405B0B ; ---------------------------------------------------------------------------
.text:00405B0B
.text:00405B0B loc_405B0B:                             ; CODE XREF: sub_405180+716↑j
.text:00405B0B                 mov     edx, [ebp+0]
.text:00405B0E                 cmp     edx, [esp+arg_5C]
.text:00405B12                 jz      short loc_405B29
.text:00405B14                 mov     ebx, [esp+arg_60]
.text:00405B18                 lea     esi, [edx+1]
.text:00405B1B                 mov     [ebp+0], esi
.text:00405B1E                 mov     edi, [ebx+edx*4]
.text:00405B21                 mov     [ebp+0Ch], edi
.text:00405B24                 jmp     loc_4058A2
.text:00405B29 ; ---------------------------------------------------------------------------
.text:00405B29
.text:00405B29 loc_405B29:                             ; CODE XREF: sub_405180+992↑j
.text:00405B29                 mov     edi, [esp+arg_44]
.text:00405B2D                 test    edi, edi
.text:00405B2F                 jnz     short loc_405B4C
.text:00405B31
.text:00405B31 loc_405B31:                             ; CODE XREF: sub_405180+9FC↓j
.text:00405B31                 mov     [ebp+8], esi
.text:00405B34                 mov     ebp, [esp+Str]
.text:00405B38                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405B3C                 jz      short loc_405B48
.text:00405B3E                 mov     bl, 3Fh ; '?'
.text:00405B40
.text:00405B40 loc_405B40:                             ; CODE XREF: sub_405180+9CA↓j
.text:00405B40                 movsx   eax, bl
.text:00405B43                 jmp     loc_4053A7
.text:00405B48 ; ---------------------------------------------------------------------------
.text:00405B48
.text:00405B48 loc_405B48:                             ; CODE XREF: sub_405180+9BC↑j
.text:00405B48                 mov     bl, 3Ah ; ':'
.text:00405B4A                 jmp     short loc_405B40
.text:00405B4C ; ---------------------------------------------------------------------------
.text:00405B4C
.text:00405B4C loc_405B4C:                             ; CODE XREF: sub_405180+9AF↑j
.text:00405B4C                 mov     dword ptr [esp+0], 405140h
.text:00405B53                 call    ds:libintl_gettext
.text:00405B59                 mov     [esp+arg_8], esi
.text:00405B5D                 mov     edx, [esp+arg_60]
.text:00405B61                 mov     ecx, ds:_iob
.text:00405B67                 mov     ebx, [edx]
.text:00405B69                 add     ecx, 40h ; '@'
.text:00405B6C                 mov     [esp+Str2], eax ; Format
.text:00405B70                 mov     [esp+MaxCount], ebx
.text:00405B74                 mov     [esp+0], ecx    ; Stream
.text:00405B77                 call    fprintf
.text:00405B7C                 jmp     short loc_405B31
.text:00405B7C ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405B7C ; ---------------------------------------------------------------------------
.text:00405B7E                 align 10h
.text:00405B80 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405B80
.text:00405B80 loc_405B80:                             ; CODE XREF: sub_405180+61C↑j
.text:00405B80                                         ; sub_405180+625↑j
.text:00405B80                 mov     eax, [esp+arg_44]
.text:00405B84                 test    eax, eax
.text:00405B86                 jz      short loc_405BBF
.text:00405B88                 mov     ebx, [ebp+1Ch]
.text:00405B8B                 test    ebx, ebx
.text:00405B8D                 jz      short loc_405BC7
.text:00405B8F                 mov     dword ptr [esp+0], offset loc_4051E1
.text:00405B96
.text:00405B96 loc_405B96:                             ; CODE XREF: sub_405180+A4E↓j
.text:00405B96                 call    ds:libintl_gettext
.text:00405B9C                 mov     [esp+arg_8], esi
.text:00405BA0                 mov     ebx, [esp+arg_60]
.text:00405BA4                 mov     edx, ds:_iob
.text:00405BAA                 mov     esi, [ebx]
.text:00405BAC                 add     edx, 40h ; '@'
.text:00405BAF                 mov     [esp+Str2], eax ; Format
.text:00405BB3                 mov     [esp+MaxCount], esi
.text:00405BB7                 mov     [esp+0], edx    ; Stream
.text:00405BBA                 call    fprintf
.text:00405BBF
.text:00405BBF loc_405BBF:                             ; CODE XREF: sub_405180+A06↑j
.text:00405BBF                 mov     [ebp+8], edi
.text:00405BC2                 jmp     loc_4055A8
.text:00405BC7 ; ---------------------------------------------------------------------------
.text:00405BC7
.text:00405BC7 loc_405BC7:                             ; CODE XREF: sub_405180+A0D↑j
.text:00405BC7                 mov     dword ptr [esp+0], offset loc_4051FB
.text:00405BCE                 jmp     short loc_405B96
.text:00405BD0 ; ---------------------------------------------------------------------------
.text:00405BD0
.text:00405BD0 loc_405BD0:                             ; CODE XREF: sub_405180+33E↑j
.text:00405BD0                 mov     edi, [esp+arg_44]
.text:00405BD4                 test    edi, edi
.text:00405BD6                 jnz     short loc_405BEE
.text:00405BD8
.text:00405BD8 loc_405BD8:                             ; CODE XREF: sub_405180+AA4↓j
.text:00405BD8                 mov     edx, [ebp+14h]
.text:00405BDB                 mov     [esp+0], edx    ; Str
.text:00405BDE                 call    strlen
.text:00405BE3                 add     [ebp+14h], eax
.text:00405BE6                 inc     dword ptr [ebp+0]
.text:00405BE9                 jmp     loc_40572E
.text:00405BEE ; ---------------------------------------------------------------------------
.text:00405BEE
.text:00405BEE loc_405BEE:                             ; CODE XREF: sub_405180+A56↑j
.text:00405BEE                 mov     dword ptr [esp+0], offset loc_405215
.text:00405BF5                 call    ds:libintl_gettext
.text:00405BFB                 mov     ebx, [ebp+0]
.text:00405BFE                 mov     edi, [esp+arg_60]
.text:00405C02                 mov     ecx, [edi+ebx*4]
.text:00405C05                 mov     ebx, ds:_iob
.text:00405C0B                 mov     [esp+arg_8], ecx
.text:00405C0F                 mov     esi, [edi]
.text:00405C11                 add     ebx, 40h ; '@'
.text:00405C14                 mov     [esp+Str2], eax ; Format
.text:00405C18                 mov     [esp+0], ebx    ; Stream
.text:00405C1B                 mov     [esp+MaxCount], esi
.text:00405C1F                 call    fprintf
.text:00405C24                 jmp     short loc_405BD8
.text:00405C26 ; ---------------------------------------------------------------------------
.text:00405C26
.text:00405C26 loc_405C26:                             ; CODE XREF: sub_405180+316↑j
.text:00405C26                 mov     ecx, [ebp+14h]
.text:00405C29                 mov     ebx, edi
.text:00405C2B                 mov     edx, [esi]
.text:00405C2D                 sub     ebx, ecx
.text:00405C2F                 mov     [esp+0], edx    ; Str
.text:00405C32                 call    strlen
.text:00405C37                 cmp     ebx, eax
.text:00405C39                 jz      short loc_405C91
.text:00405C3B                 mov     ebx, [esp+arg_40]
.text:00405C3F                 test    ebx, ebx
.text:00405C41                 jz      short loc_405C80
.text:00405C43                 mov     edx, [esp+arg_70]
.text:00405C47                 test    edx, edx
.text:00405C49                 jnz     short loc_405C57
.text:00405C4B                 mov     ecx, [esp+arg_40]
.text:00405C4F                 mov     ebx, [esi+4]
.text:00405C52                 cmp     [ecx+4], ebx
.text:00405C55                 jz      short loc_405C64
.text:00405C57
.text:00405C57 loc_405C57:                             ; CODE XREF: sub_405180+AC9↑j
.text:00405C57                                         ; sub_405180+AEA↓j ...
.text:00405C57                 mov     [esp+arg_38], 1
.text:00405C5F                 jmp     loc_40549C
.text:00405C64 ; ---------------------------------------------------------------------------
.text:00405C64
.text:00405C64 loc_405C64:                             ; CODE XREF: sub_405180+AD5↑j
.text:00405C64                 mov     edx, [esi+8]
.text:00405C67                 cmp     [ecx+8], edx
.text:00405C6A                 jnz     short loc_405C57
.text:00405C6C                 mov     ebx, [esi+0Ch]
.text:00405C6F                 cmp     [ecx+0Ch], ebx
.text:00405C72                 jnz     short loc_405C57
.text:00405C74                 jmp     loc_40549C
.text:00405C74 ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405C74 ; ---------------------------------------------------------------------------
.text:00405C79                 align 10h
.text:00405C80 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405C80
.text:00405C80 loc_405C80:                             ; CODE XREF: sub_405180+AC1↑j
.text:00405C80                 mov     [esp+arg_40], esi
.text:00405C84                 mov     eax, [esp+arg_30]
.text:00405C88                 mov     [esp+arg_34], eax
.text:00405C8C                 jmp     loc_40549C
.text:00405C91 ; ---------------------------------------------------------------------------
.text:00405C91
.text:00405C91 loc_405C91:                             ; CODE XREF: sub_405180+AB9↑j
.text:00405C91                 mov     [esp+arg_40], esi
.text:00405C95                 mov     ecx, [esp+arg_30]
.text:00405C99                 mov     [esp+arg_3C], 1
.text:00405CA1                 mov     [esp+arg_34], ecx
.text:00405CA5                 jmp     loc_4054B0
.text:00405CAA ; ---------------------------------------------------------------------------
.text:00405CAA
.text:00405CAA loc_405CAA:                             ; CODE XREF: sub_405180+28F↑j
.text:00405CAA                 mov     eax, [esp+Str]
.text:00405CAE                 movsx   esi, dl
.text:00405CB1                 mov     [esp+Str2], esi ; Val
.text:00405CB5                 mov     [esp+0], eax    ; Str
.text:00405CB8                 call    strchr
.text:00405CBD                 test    eax, eax
.text:00405CBF                 jnz     loc_405770
.text:00405CC5                 jmp     loc_405415
.text:00405CCA ; ---------------------------------------------------------------------------
.text:00405CCA
.text:00405CCA loc_405CCA:                             ; CODE XREF: sub_405180+24C↑j
.text:00405CCA                 mov     ecx, 1
.text:00405CCF                 jmp     loc_4053D2
.text:00405CD4 ; ---------------------------------------------------------------------------
.text:00405CD4
.text:00405CD4 loc_405CD4:                             ; CODE XREF: sub_405180+1A4↑j
.text:00405CD4                                         ; sub_405180+200↑j
.text:00405CD4                 mov     eax, [ebp+20h]
.text:00405CD7                 cmp     eax, [ebp+24h]
.text:00405CDA                 jz      loc_4053B0
.text:00405CE0                 mov     [ebp+0], eax
.text:00405CE3                 jmp     loc_4053B0
.text:00405CE8 ; ---------------------------------------------------------------------------
.text:00405CE8
.text:00405CE8 loc_405CE8:                             ; CODE XREF: sub_405180+1CE↑j
.text:00405CE8                 mov     [ebp+20h], eax
.text:00405CEB                 jmp     loc_405370
.text:00405CF0 ; ---------------------------------------------------------------------------
.text:00405CF0
.text:00405CF0 loc_405CF0:                             ; CODE XREF: sub_405180+19A↑j
.text:00405CF0                 mov     edx, [ebp+20h]
.text:00405CF3                 mov     eax, [ebp+24h]
.text:00405CF6                 cmp     edx, eax
.text:00405CF8                 jz      short loc_405D70
.text:00405CFA                 cmp     eax, ebx
.text:00405CFC                 jz      short loc_405D11
.text:00405CFE                 mov     [esp+Str2], ebp
.text:00405D02                 mov     ebx, [esp+arg_60]
.text:00405D06                 mov     [esp+0], ebx
.text:00405D09                 call    sub_405F00
.text:00405D0E                 mov     ebx, [ebp+0]
.text:00405D11
.text:00405D11 loc_405D11:                             ; CODE XREF: sub_405180+B7C↑j
.text:00405D11                                         ; sub_405180+BF2↓j ...
.text:00405D11                 cmp     ebx, [esp+arg_5C]
.text:00405D15                 jge     short loc_405D60
.text:00405D17                 mov     esi, [esp+arg_60]
.text:00405D1B                 mov     eax, [esi+ebx*4]
.text:00405D1E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405D21                 jz      short loc_405D68
.text:00405D23                 lea     esi, [esi+0]
.text:00405D29                 lea     edi, [edi+0]
.text:00405D30
.text:00405D30 loc_405D30:                             ; CODE XREF: sub_405180+BCC↓j
.text:00405D30                                         ; sub_405180+BEC↓j
.text:00405D30                 lea     eax, [ebx+1]
.text:00405D33                 mov     ebx, eax
.text:00405D35                 mov     [ebp+0], eax
.text:00405D38                 cmp     eax, [esp+arg_5C]
.text:00405D3C                 jge     short loc_405D60
.text:00405D3E                 mov     edi, [esp+arg_60]
.text:00405D42                 mov     edx, [edi+eax*4]
.text:00405D45                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00405D48                 jz      short loc_405D50
.text:00405D4A
.text:00405D4A loc_405D4A:                             ; CODE XREF: sub_405180+BD4↓j
.text:00405D4A                 mov     ebx, eax
.text:00405D4C                 jmp     short loc_405D30
.text:00405D4C ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405D4C ; ---------------------------------------------------------------------------
.text:00405D4E                 align 10h
.text:00405D50 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405D50
.text:00405D50 loc_405D50:                             ; CODE XREF: sub_405180+BC8↑j
.text:00405D50                 cmp     byte ptr [edx+1], 0
.text:00405D54                 jz      short loc_405D4A
.text:00405D56                 lea     esi, [esi+0]
.text:00405D59                 lea     edi, [edi+0]
.text:00405D60
.text:00405D60 loc_405D60:                             ; CODE XREF: sub_405180+B95↑j
.text:00405D60                                         ; sub_405180+BBC↑j ...
.text:00405D60                 mov     [ebp+24h], ebx
.text:00405D63                 jmp     loc_405320
.text:00405D68 ; ---------------------------------------------------------------------------
.text:00405D68
.text:00405D68 loc_405D68:                             ; CODE XREF: sub_405180+BA1↑j
.text:00405D68                 cmp     byte ptr [eax+1], 0
.text:00405D6C                 jz      short loc_405D30
.text:00405D6E                 jmp     short loc_405D60
.text:00405D70 ; ---------------------------------------------------------------------------
.text:00405D70
.text:00405D70 loc_405D70:                             ; CODE XREF: sub_405180+B78↑j
.text:00405D70                 cmp     edx, ebx
.text:00405D72                 jz      short loc_405D11
.text:00405D74                 mov     [ebp+20h], ebx
.text:00405D77                 jmp     short loc_405D11
.text:00405D79 ; ---------------------------------------------------------------------------
.text:00405D79
.text:00405D79 loc_405D79:                             ; CODE XREF: sub_405180+158↑j
.text:00405D79                 mov     dword ptr [ebp+18h], 0
.text:00405D80                 mov     esi, [esp+Str]
.text:00405D84
.text:00405D84 loc_405D84:                             ; CODE XREF: sub_405180+C19↓j
.text:00405D84                 inc     esi
.text:00405D85                 jmp     loc_4052E8
.text:00405D85 ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405D85 ; ---------------------------------------------------------------------------
.text:00405D8A                 align 10h
.text:00405D90 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405D90
.text:00405D90 loc_405D90:                             ; CODE XREF: sub_405180+150↑j
.text:00405D90                 mov     dword ptr [ebp+18h], 2
.text:00405D97                 mov     esi, ecx
.text:00405D99                 jmp     short loc_405D84
.text:00405D99 ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405D99 ; ---------------------------------------------------------------------------
.text:00405D9B                 align 10h
.text:00405DA0 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405DA0
.text:00405DA0 loc_405DA0:                             ; CODE XREF: sub_405180+139↑j
.text:00405DA0                 mov     dword ptr [esp+0], offset loc_405233 ; VarName
.text:00405DA7                 call    getenv
.text:00405DAC                 test    eax, eax
.text:00405DAE                 jz      loc_4052C4
.text:00405DB4                 jmp     loc_4052BF
.text:00405DB4 ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405DB4 ; ---------------------------------------------------------------------------
.text:00405DB9                 align 10h
.text:00405DC0 ; START OF FUNCTION CHUNK FOR sub_405180
.text:00405DC0
.text:00405DC0 loc_405DC0:                             ; CODE XREF: sub_405180:loc_40528F↑j
.text:00405DC0                 mov     dword ptr [ebp+0], 1
.text:00405DC7                 mov     ebx, 1
.text:00405DCC                 jmp     loc_4052A0
.text:00405DCC ; END OF FUNCTION CHUNK FOR sub_405180
.text:00405DD1 ; ---------------------------------------------------------------------------
.text:00405DD1                 jmp     short sub_405DE0
.text:00405DD1 ; ---------------------------------------------------------------------------
.text:00405DD3                 align 10h
.text:00405DE0
.text:00405DE0 ; =============== S U B R O U T I N E =======================================
.text:00405DE0
.text:00405DE0
.text:00405DE0 sub_405DE0      proc near               ; CODE XREF: .text:00405DD1↑j
.text:00405DE0                                         ; sub_406580+3A↓p ...
.text:00405DE0
.text:00405DE0 var_2C          = dword ptr -2Ch
.text:00405DE0 var_28          = dword ptr -28h
.text:00405DE0 var_24          = dword ptr -24h
.text:00405DE0 var_20          = dword ptr -20h
.text:00405DE0 var_1C          = dword ptr -1Ch
.text:00405DE0 var_18          = dword ptr -18h
.text:00405DE0 var_14          = dword ptr -14h
.text:00405DE0 var_10          = dword ptr -10h
.text:00405DE0 arg_0           = dword ptr  4
.text:00405DE0 arg_4           = dword ptr  8
.text:00405DE0 arg_8           = dword ptr  0Ch
.text:00405DE0 arg_C           = dword ptr  10h
.text:00405DE0 arg_10          = dword ptr  14h
.text:00405DE0 arg_14          = dword ptr  18h
.text:00405DE0 arg_18          = dword ptr  1Ch
.text:00405DE0
.text:00405DE0                 sub     esp, 2Ch
.text:00405DE3                 mov     edx, dword_40A010
.text:00405DE9                 mov     [esp+2Ch+var_10], offset dword_40B550
.text:00405DF1                 mov     ecx, dword_40A014
.text:00405DF7                 mov     ds:dword_40B550, edx
.text:00405DFD                 mov     edx, [esp+2Ch+arg_18]
.text:00405E01                 mov     ds:dword_40B554, ecx
.text:00405E07                 mov     ecx, [esp+2Ch+arg_14]
.text:00405E0B                 mov     [esp+2Ch+var_14], edx
.text:00405E0F                 mov     edx, [esp+2Ch+arg_10]
.text:00405E13                 mov     [esp+2Ch+var_18], ecx
.text:00405E17                 mov     ecx, [esp+2Ch+arg_C]
.text:00405E1B                 mov     [esp+2Ch+var_1C], edx
.text:00405E1F                 mov     edx, [esp+2Ch+arg_8]
.text:00405E23                 mov     [esp+2Ch+var_20], ecx
.text:00405E27                 mov     ecx, [esp+2Ch+arg_4]
.text:00405E2B                 mov     [esp+2Ch+var_24], edx
.text:00405E2F                 mov     edx, [esp+2Ch+arg_0]
.text:00405E33                 mov     [esp+2Ch+var_28], ecx
.text:00405E37                 mov     [esp+2Ch+var_2C], edx
.text:00405E3A                 call    loc_405250
.text:00405E3F                 mov     ecx, ds:dword_40B550
.text:00405E45                 mov     dword_40A010, ecx
.text:00405E4B                 mov     ecx, ds:dword_40B55C
.text:00405E51                 mov     ds:dword_40B700, ecx
.text:00405E57                 mov     ecx, ds:dword_40B558
.text:00405E5D                 mov     dword_40A018, ecx
.text:00405E63                 add     esp, 2Ch
.text:00405E66                 retn
.text:00405E66 sub_405DE0      endp
.text:00405E66
.text:00405E66 ; ---------------------------------------------------------------------------
.text:00405E67                 align 10h
.text:00405E70                 sub     esp, 2Ch
.text:00405E73                 mov     edx, dword_40A010
.text:00405E79                 mov     dword ptr [esp+1Ch], offset dword_40B550
.text:00405E81                 mov     ecx, dword_40A014
.text:00405E87                 mov     dword ptr [esp+18h], 1
.text:00405E8F                 mov     ds:dword_40B550, edx
.text:00405E95                 mov     edx, [esp+38h]
.text:00405E99                 mov     ds:dword_40B554, ecx
.text:00405E9F                 mov     ecx, [esp+34h]
.text:00405EA3                 mov     [esp+8], edx
.text:00405EA7                 mov     edx, [esp+30h]
.text:00405EAB                 mov     [esp+4], ecx
.text:00405EAF                 mov     dword ptr [esp+14h], 0
.text:00405EB7                 mov     dword ptr [esp+10h], 0
.text:00405EBF                 mov     dword ptr [esp+0Ch], 0
.text:00405EC7                 mov     [esp], edx
.text:00405ECA                 call    loc_405250
.text:00405ECF                 mov     ecx, ds:dword_40B550
.text:00405ED5                 mov     dword_40A010, ecx
.text:00405EDB                 mov     ecx, ds:dword_40B55C
.text:00405EE1                 mov     ds:dword_40B700, ecx
.text:00405EE7                 mov     ecx, ds:dword_40B558
.text:00405EED                 mov     dword_40A018, ecx
.text:00405EF3                 add     esp, 2Ch
.text:00405EF6                 retn
.text:00405EF6 ; ---------------------------------------------------------------------------
.text:00405EF7                 align 10h
.text:00405F00
.text:00405F00 ; =============== S U B R O U T I N E =======================================
.text:00405F00
.text:00405F00
.text:00405F00 sub_405F00      proc near               ; CODE XREF: sub_405180+1E3↑p
.text:00405F00                                         ; sub_405180+B89↑p
.text:00405F00
.text:00405F00 var_2C          = dword ptr -2Ch
.text:00405F00 var_28          = dword ptr -28h
.text:00405F00 var_24          = dword ptr -24h
.text:00405F00 var_20          = dword ptr -20h
.text:00405F00 var_1C          = dword ptr -1Ch
.text:00405F00 var_18          = dword ptr -18h
.text:00405F00 var_14          = dword ptr -14h
.text:00405F00 arg_0           = dword ptr  4
.text:00405F00 arg_4           = dword ptr  8
.text:00405F00
.text:00405F00                 push    ebp
.text:00405F01                 push    edi
.text:00405F02                 push    esi
.text:00405F03                 push    ebx
.text:00405F04                 sub     esp, 1Ch
.text:00405F07                 mov     ecx, [esp+2Ch+arg_4]
.text:00405F0B                 mov     eax, [esp+2Ch+arg_4]
.text:00405F0F                 mov     ebx, [esp+2Ch+arg_4]
.text:00405F13                 mov     edx, [ecx+20h]
.text:00405F16                 mov     edi, [esp+2Ch+arg_0]
.text:00405F1A                 mov     ecx, [ebx]
.text:00405F1C                 mov     [esp+2Ch+var_2C], edx
.text:00405F1F                 mov     [esp+2Ch+var_14], edx
.text:00405F23                 mov     edx, [eax+24h]
.text:00405F26                 mov     [esp+2Ch+var_28], ecx
.text:00405F2A                 mov     [esp+2Ch+var_1C], ecx
.text:00405F2E                 cmp     ecx, edx
.text:00405F30                 mov     [esp+2Ch+var_18], edx
.text:00405F34                 jle     short loc_405FB0
.text:00405F36                 mov     esi, [esp+2Ch+var_2C]
.text:00405F39                 cmp     edx, esi
.text:00405F3B                 jle     short loc_405FB0
.text:00405F3D                 lea     esi, [esi+0]
.text:00405F40
.text:00405F40 loc_405F40:                             ; CODE XREF: sub_405F00+A1↓j
.text:00405F40                 mov     ebx, [esp+2Ch+var_1C]
.text:00405F44                 mov     edx, [esp+2Ch+var_18]
.text:00405F48                 mov     ebp, [esp+2Ch+var_18]
.text:00405F4C                 mov     eax, [esp+2Ch+var_14]
.text:00405F50                 sub     ebx, edx
.text:00405F52                 mov     [esp+2Ch+var_20], ebx
.text:00405F56                 sub     ebp, eax
.text:00405F58                 cmp     ebx, ebp
.text:00405F5A                 jle     short loc_405FD5
.text:00405F5C                 xor     esi, esi
.text:00405F5E                 cmp     esi, ebp
.text:00405F60                 jge     short loc_405F8D
.text:00405F62                 mov     ecx, [esp+2Ch+var_1C]
.text:00405F66                 sub     ecx, ebp
.text:00405F68                 mov     [esp+2Ch+var_24], ecx
.text:00405F6C                 lea     esi, [esi+0]
.text:00405F70
.text:00405F70 loc_405F70:                             ; CODE XREF: sub_405F00+8B↓j
.text:00405F70                 mov     ecx, [esp+2Ch+var_14]
.text:00405F74                 mov     edx, [esp+2Ch+var_24]
.text:00405F78                 add     ecx, esi
.text:00405F7A                 add     edx, esi
.text:00405F7C                 mov     ebx, [edi+ecx*4]
.text:00405F7F                 mov     eax, [edi+edx*4]
.text:00405F82                 inc     esi
.text:00405F83                 cmp     esi, ebp
.text:00405F85                 mov     [edi+ecx*4], eax
.text:00405F88                 mov     [edi+edx*4], ebx
.text:00405F8B                 jl      short loc_405F70
.text:00405F8D
.text:00405F8D loc_405F8D:                             ; CODE XREF: sub_405F00+60↑j
.text:00405F8D                 sub     [esp+2Ch+var_1C], ebp
.text:00405F91
.text:00405F91 loc_405F91:                             ; CODE XREF: sub_405F00+107↓j
.text:00405F91                 mov     eax, [esp+2Ch+var_18]
.text:00405F95                 cmp     [esp+2Ch+var_1C], eax
.text:00405F99                 jle     short loc_405FB0
.text:00405F9B                 mov     ebp, [esp+2Ch+var_14]
.text:00405F9F                 cmp     eax, ebp
.text:00405FA1                 jg      short loc_405F40
.text:00405FA3                 lea     esi, [esi+0]
.text:00405FA9                 lea     edi, [edi+0]
.text:00405FB0
.text:00405FB0 loc_405FB0:                             ; CODE XREF: sub_405F00+34↑j
.text:00405FB0                                         ; sub_405F00+3B↑j ...
.text:00405FB0                 mov     esi, [esp+2Ch+var_28]
.text:00405FB4                 mov     ecx, [esp+2Ch+var_18]
.text:00405FB8                 mov     eax, [esp+2Ch+var_2C]
.text:00405FBB                 mov     edi, [esp+2Ch+arg_4]
.text:00405FBF                 mov     edx, [esp+2Ch+var_28]
.text:00405FC3                 sub     esi, ecx
.text:00405FC5                 add     esi, eax
.text:00405FC7                 mov     [edi+20h], esi
.text:00405FCA                 mov     [edi+24h], edx
.text:00405FCD                 add     esp, 1Ch
.text:00405FD0                 pop     ebx
.text:00405FD1                 pop     esi
.text:00405FD2                 pop     edi
.text:00405FD3                 pop     ebp
.text:00405FD4                 retn
.text:00405FD5 ; ---------------------------------------------------------------------------
.text:00405FD5
.text:00405FD5 loc_405FD5:                             ; CODE XREF: sub_405F00+5A↑j
.text:00405FD5                 xor     esi, esi
.text:00405FD7                 cmp     esi, [esp+2Ch+var_20]
.text:00405FDB                 jge     short loc_405FFF
.text:00405FDD                 lea     esi, [esi+0]
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: sub_405F00+FD↓j
.text:00405FE0                 mov     ebx, [esp+2Ch+var_14]
.text:00405FE4                 mov     ebp, [esp+2Ch+var_18]
.text:00405FE8                 add     ebx, esi
.text:00405FEA                 add     ebp, esi
.text:00405FEC                 mov     edx, [edi+ebx*4]
.text:00405FEF                 inc     esi
.text:00405FF0                 cmp     esi, [esp+2Ch+var_20]
.text:00405FF4                 mov     ecx, [edi+ebp*4]
.text:00405FF7                 mov     [edi+ebx*4], ecx
.text:00405FFA                 mov     [edi+ebp*4], edx
.text:00405FFD                 jl      short loc_405FE0
.text:00405FFF
.text:00405FFF loc_405FFF:                             ; CODE XREF: sub_405F00+DB↑j
.text:00405FFF                 mov     esi, [esp+2Ch+var_20]
.text:00406003                 add     [esp+2Ch+var_14], esi
.text:00406007                 jmp     short loc_405F91
.text:00406007 sub_405F00      endp
.text:00406007
.text:00406007 ; ---------------------------------------------------------------------------
.text:00406009                 align 20h
.text:00406020                 sub     esp, 0Ch
.text:00406023                 mov     edx, [esp+14h]
.text:00406027                 mov     dword ptr [esp+4], 5
.text:0040602F                 mov     [esp+8], edx
.text:00406033                 mov     edx, [esp+10h]
.text:00406037                 mov     [esp], edx
.text:0040603A                 call    sub_4085D0
.text:0040603F                 add     esp, 0Ch
.text:00406042                 retn
.text:00406042 ; ---------------------------------------------------------------------------
.text:00406043                 align 10h
.text:00406050
.text:00406050 ; =============== S U B R O U T I N E =======================================
.text:00406050
.text:00406050
.text:00406050 ; int __cdecl sub_406050(char *)
.text:00406050 sub_406050      proc near               ; CODE XREF: sub_402390+C57↑p
.text:00406050                                         ; sub_402390+CF5↑p
.text:00406050
.text:00406050 var_C           = dword ptr -0Ch
.text:00406050 var_8           = dword ptr -8
.text:00406050 var_4           = dword ptr -4
.text:00406050 arg_0           = dword ptr  4
.text:00406050
.text:00406050                 sub     esp, 0Ch
.text:00406053                 mov     edx, [esp+0Ch+arg_0]
.text:00406057                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040605F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00406066                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040606A                 call    sub_4085D0
.text:0040606F                 add     esp, 0Ch
.text:00406072                 retn
.text:00406072 sub_406050      endp
.text:00406072
.text:00406072 ; ---------------------------------------------------------------------------
.text:00406073                 align 10h
.text:00406080 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00406080                                         ; DATA XREF: .data:Buffer↓o
.text:004060B2 ; const char aSSS[]
.text:004060B2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_406370+50↓o
.text:004060BE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004060BE                                         ; DATA XREF: sub_406370:loc_406411↓o
.text:004060CE                 align 20h
.text:004060E0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004060E0                                         ; DATA XREF: sub_406370+100↓o
.text:004060E0                 db 'ere is NO',0Ah
.text:004060E0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004060E0                 db 'R PURPOSE.',0Ah,0
.text:00406178 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00406178                                         ; DATA XREF: sub_406370:loc_4064B1↓o
.text:0040618F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040618F                                         ; DATA XREF: sub_406370:loc_4064BD↓o
.text:004061AB                 align 20h
.text:004061C0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004061C0                                         ; DATA XREF: sub_406370:loc_4064C9↓o
.text:004061C0                 db 'and %s.',0Ah,0
.text:004061E0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004061E0                                         ; DATA XREF: sub_406370:loc_4064D5↓o
.text:004061E0                 db '%s, and %s.',0Ah,0
.text:00406204                 align 20h
.text:00406220 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00406220                                         ; DATA XREF: sub_406370:loc_4064E1↓o
.text:00406220                 db '%s, %s, and %s.',0Ah,0
.text:00406248                 align 20h
.text:00406260 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00406260                                         ; DATA XREF: sub_406370:loc_4064ED↓o
.text:00406260                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040628C                 align 20h
.text:004062A0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004062A0                                         ; DATA XREF: sub_406370:loc_4064F9↓o
.text:004062A0                 db '%s, %s, %s, %s,',0Ah
.text:004062A0                 db 'and %s.',0Ah,0
.text:004062D0                 align 20h
.text:004062E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004062E0                                         ; DATA XREF: sub_406370:loc_406505↓o
.text:004062E0                 db '%s, %s, %s, %s,',0Ah
.text:004062E0                 db '%s, and %s.',0Ah,0
.text:00406314                 align 10h
.text:00406320 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00406320                                         ; DATA XREF: sub_406370:def_4063DD↓o
.text:00406320                 db '%s, %s, %s, %s,',0Ah
.text:00406320                 db '%s, %s, and others.',0Ah,0
.text:0040635C ; const char aSS[]
.text:0040635C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_406370+1B5↓o
.text:00406363                 align 10h
.text:00406370
.text:00406370 ; =============== S U B R O U T I N E =======================================
.text:00406370
.text:00406370
.text:00406370 ; int __cdecl sub_406370(FILE *, FILE *, int, int, va_list)
.text:00406370 sub_406370      proc near               ; CODE XREF: sub_406540+2A↓p
.text:00406370
.text:00406370 Stream          = dword ptr -2Ch
.text:00406370 Format          = dword ptr -28h
.text:00406370 ArgList         = dword ptr -24h
.text:00406370 var_20          = dword ptr -20h
.text:00406370 var_1C          = dword ptr -1Ch
.text:00406370 var_14          = dword ptr -14h
.text:00406370 arg_0           = dword ptr  4
.text:00406370 arg_4           = dword ptr  8
.text:00406370 arg_8           = dword ptr  0Ch
.text:00406370 arg_C           = dword ptr  10h
.text:00406370 arg_10          = dword ptr  14h
.text:00406370
.text:00406370                 push    ebp
.text:00406371                 push    edi
.text:00406372                 push    esi
.text:00406373                 push    ebx
.text:00406374                 sub     esp, 1Ch
.text:00406377                 xor     ebx, ebx
.text:00406379                 mov     edi, [esp+2Ch+arg_10]
.text:0040637D                 mov     edx, [esp+2Ch+arg_8]
.text:00406381                 mov     esi, [esp+2Ch+arg_0]
.text:00406385                 mov     eax, [edi]
.text:00406387                 mov     ecx, [esp+2Ch+arg_4]
.text:0040638B                 mov     [esp+2Ch+var_14], edx
.text:0040638F                 mov     ebp, [esp+2Ch+arg_C]
.text:00406393                 lea     edx, [edi+4]
.text:00406396                 test    eax, eax
.text:00406398                 jz      short loc_4063AC
.text:0040639A                 lea     esi, [esi+0]
.text:004063A0
.text:004063A0 loc_4063A0:                             ; CODE XREF: sub_406370+3A↓j
.text:004063A0                 mov     eax, edx
.text:004063A2                 inc     ebx
.text:004063A3                 mov     eax, [eax]
.text:004063A5                 add     edx, 4
.text:004063A8                 test    eax, eax
.text:004063AA                 jnz     short loc_4063A0
.text:004063AC
.text:004063AC loc_4063AC:                             ; CODE XREF: sub_406370+28↑j
.text:004063AC                 test    ecx, ecx
.text:004063AE                 jz      loc_40651D
.text:004063B4                 mov     [esp+2Ch+var_1C], ebp
.text:004063B8                 mov     edx, [esp+2Ch+var_14]
.text:004063BC                 mov     [esp+2Ch+ArgList], ecx
.text:004063C0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:004063C8                 mov     [esp+2Ch+var_20], edx
.text:004063CC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004063CF                 call    fprintf
.text:004063D4
.text:004063D4 loc_4063D4:                             ; CODE XREF: sub_406370+1C9↓j
.text:004063D4                 cmp     ebx, 9          ; switch 10 cases
.text:004063D7                 ja      def_4063DD      ; jumptable 004063DD default case
.text:004063DD                 jmp     ds:jpt_4063DD[ebx*4] ; switch jump
.text:004063DD ; ---------------------------------------------------------------------------
.text:004063E4 jpt_4063DD      dd offset loc_40640C    ; DATA XREF: sub_406370+6D↑r
.text:004063E4                 dd offset loc_406411    ; jump table for switch statement
.text:004063E4                 dd offset loc_4064B1
.text:004063E4                 dd offset loc_4064BD
.text:004063E4                 dd offset loc_4064C9
.text:004063E4                 dd offset loc_4064D5
.text:004063E4                 dd offset loc_4064E1
.text:004063E4                 dd offset loc_4064ED
.text:004063E4                 dd offset loc_4064F9
.text:004063E4                 dd offset loc_406505
.text:0040640C ; ---------------------------------------------------------------------------
.text:0040640C
.text:0040640C loc_40640C:                             ; CODE XREF: sub_406370+6D↑j
.text:0040640C                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:0040640C                 call    abort           ; jumptable 004063DD case 0
.text:00406411 ; ---------------------------------------------------------------------------
.text:00406411
.text:00406411 loc_406411:                             ; CODE XREF: sub_406370+6D↑j
.text:00406411                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:00406411                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004063DD case 1
.text:00406418                 nop
.text:00406419                 lea     esi, [esi+0]
.text:00406420
.text:00406420 loc_406420:                             ; CODE XREF: sub_406370+148↓j
.text:00406420                                         ; sub_406370+154↓j ...
.text:00406420                 call    ds:libintl_gettext
.text:00406426                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040642A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040642D                 mov     [esp+2Ch+Format], eax ; Format
.text:00406431                 call    vfprintf
.text:00406436                 mov     ebx, [esi+4]
.text:00406439                 dec     ebx
.text:0040643A                 test    ebx, ebx
.text:0040643C                 mov     [esi+4], ebx
.text:0040643F                 js      short loc_40649F
.text:00406441                 mov     edi, [esi]
.text:00406443                 mov     byte ptr [edi], 0Ah
.text:00406446                 inc     dword ptr [esi]
.text:00406448
.text:00406448 loc_406448:                             ; CODE XREF: sub_406370+13F↓j
.text:00406448                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040644C                 mov     edx, Buffer
.text:00406452                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00406455                 call    fputs
.text:0040645A                 mov     ebp, [esi+4]
.text:0040645D                 dec     ebp
.text:0040645E                 test    ebp, ebp
.text:00406460                 mov     [esi+4], ebp
.text:00406463                 js      short loc_40648D
.text:00406465                 mov     ecx, [esi]
.text:00406467                 mov     byte ptr [ecx], 0Ah
.text:0040646A                 inc     dword ptr [esi]
.text:0040646C
.text:0040646C loc_40646C:                             ; CODE XREF: sub_406370+12D↓j
.text:0040646C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00406470                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00406477                 call    ds:libintl_gettext
.text:0040647D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00406481                 add     esp, 1Ch
.text:00406484                 pop     ebx
.text:00406485                 pop     esi
.text:00406486                 pop     edi
.text:00406487                 pop     ebp
.text:00406488                 jmp     fputs
.text:0040648D ; ---------------------------------------------------------------------------
.text:0040648D
.text:0040648D loc_40648D:                             ; CODE XREF: sub_406370+F3↑j
.text:0040648D                 mov     [esp+2Ch+Format], esi ; File
.text:00406491                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00406498                 call    _flsbuf
.text:0040649D                 jmp     short loc_40646C
.text:0040649F ; ---------------------------------------------------------------------------
.text:0040649F
.text:0040649F loc_40649F:                             ; CODE XREF: sub_406370+CF↑j
.text:0040649F                 mov     [esp+2Ch+Format], esi ; File
.text:004064A3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004064AA                 call    _flsbuf
.text:004064AF                 jmp     short loc_406448
.text:004064B1 ; ---------------------------------------------------------------------------
.text:004064B1
.text:004064B1 loc_4064B1:                             ; CODE XREF: sub_406370+6D↑j
.text:004064B1                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:004064B1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004063DD case 2
.text:004064B8                 jmp     loc_406420
.text:004064BD ; ---------------------------------------------------------------------------
.text:004064BD
.text:004064BD loc_4064BD:                             ; CODE XREF: sub_406370+6D↑j
.text:004064BD                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:004064BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004063DD case 3
.text:004064C4                 jmp     loc_406420
.text:004064C9 ; ---------------------------------------------------------------------------
.text:004064C9
.text:004064C9 loc_4064C9:                             ; CODE XREF: sub_406370+6D↑j
.text:004064C9                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:004064C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004063DD case 4
.text:004064D0                 jmp     loc_406420
.text:004064D5 ; ---------------------------------------------------------------------------
.text:004064D5
.text:004064D5 loc_4064D5:                             ; CODE XREF: sub_406370+6D↑j
.text:004064D5                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:004064D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004063DD case 5
.text:004064DC                 jmp     loc_406420
.text:004064E1 ; ---------------------------------------------------------------------------
.text:004064E1
.text:004064E1 loc_4064E1:                             ; CODE XREF: sub_406370+6D↑j
.text:004064E1                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:004064E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004063DD case 6
.text:004064E8                 jmp     loc_406420
.text:004064ED ; ---------------------------------------------------------------------------
.text:004064ED
.text:004064ED loc_4064ED:                             ; CODE XREF: sub_406370+6D↑j
.text:004064ED                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:004064ED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004063DD case 7
.text:004064F4                 jmp     loc_406420
.text:004064F9 ; ---------------------------------------------------------------------------
.text:004064F9
.text:004064F9 loc_4064F9:                             ; CODE XREF: sub_406370+6D↑j
.text:004064F9                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:004064F9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004063DD case 8
.text:00406500                 jmp     loc_406420
.text:00406505 ; ---------------------------------------------------------------------------
.text:00406505
.text:00406505 loc_406505:                             ; CODE XREF: sub_406370+6D↑j
.text:00406505                                         ; DATA XREF: sub_406370:jpt_4063DD↑o
.text:00406505                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004063DD case 9
.text:0040650C                 jmp     loc_406420
.text:00406511 ; ---------------------------------------------------------------------------
.text:00406511
.text:00406511 def_4063DD:                             ; CODE XREF: sub_406370+67↑j
.text:00406511                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004063DD default case
.text:00406518                 jmp     loc_406420
.text:0040651D ; ---------------------------------------------------------------------------
.text:0040651D
.text:0040651D loc_40651D:                             ; CODE XREF: sub_406370+3E↑j
.text:0040651D                 mov     [esp+2Ch+var_20], ebp
.text:00406521                 mov     ecx, [esp+2Ch+var_14]
.text:00406525                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040652D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406530                 mov     [esp+2Ch+ArgList], ecx
.text:00406534                 call    fprintf
.text:00406539                 jmp     loc_4063D4
.text:00406539 sub_406370      endp
.text:00406539
.text:00406539 ; ---------------------------------------------------------------------------
.text:0040653E                 align 10h
.text:00406540
.text:00406540 ; =============== S U B R O U T I N E =======================================
.text:00406540
.text:00406540
.text:00406540 ; int __cdecl sub_406540(FILE *, FILE *, int, int, char)
.text:00406540 sub_406540      proc near               ; CODE XREF: sub_402390+14E↑p
.text:00406540
.text:00406540 var_1C          = dword ptr -1Ch
.text:00406540 var_18          = dword ptr -18h
.text:00406540 var_14          = dword ptr -14h
.text:00406540 var_10          = dword ptr -10h
.text:00406540 var_C           = dword ptr -0Ch
.text:00406540 arg_0           = dword ptr  4
.text:00406540 arg_4           = dword ptr  8
.text:00406540 arg_8           = dword ptr  0Ch
.text:00406540 arg_C           = dword ptr  10h
.text:00406540 arg_10          = byte ptr  14h
.text:00406540
.text:00406540                 sub     esp, 1Ch
.text:00406543                 mov     edx, [esp+1Ch+arg_C]
.text:00406547                 lea     ecx, [esp+1Ch+arg_10]
.text:0040654B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040654F                 mov     ecx, [esp+1Ch+arg_8]
.text:00406553                 mov     [esp+1Ch+var_10], edx ; int
.text:00406557                 mov     edx, [esp+1Ch+arg_4]
.text:0040655B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040655F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00406563                 mov     edx, [esp+1Ch+arg_0]
.text:00406567                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040656A                 call    sub_406370
.text:0040656F                 add     esp, 1Ch
.text:00406572                 retn
.text:00406572 sub_406540      endp
.text:00406572
.text:00406572 ; ---------------------------------------------------------------------------
.text:00406573                 align 10h
.text:00406580
.text:00406580 ; =============== S U B R O U T I N E =======================================
.text:00406580
.text:00406580
.text:00406580 sub_406580      proc near               ; CODE XREF: sub_402390+9F↑p
.text:00406580
.text:00406580 var_1C          = dword ptr -1Ch
.text:00406580 var_18          = dword ptr -18h
.text:00406580 var_14          = dword ptr -14h
.text:00406580 var_10          = dword ptr -10h
.text:00406580 var_C           = dword ptr -0Ch
.text:00406580 var_8           = dword ptr -8
.text:00406580 var_4           = dword ptr -4
.text:00406580 arg_0           = dword ptr  4
.text:00406580 arg_4           = dword ptr  8
.text:00406580 arg_8           = dword ptr  0Ch
.text:00406580 arg_C           = dword ptr  10h
.text:00406580 arg_10          = dword ptr  14h
.text:00406580
.text:00406580                 sub     esp, 1Ch
.text:00406583                 mov     edx, [esp+1Ch+arg_C]
.text:00406587                 mov     [esp+1Ch+var_4], 0
.text:0040658F                 mov     ecx, [esp+1Ch+arg_10]
.text:00406593                 mov     [esp+1Ch+var_8], 0
.text:0040659B                 mov     [esp+1Ch+var_10], edx
.text:0040659F                 mov     edx, [esp+1Ch+arg_4]
.text:004065A3                 mov     [esp+1Ch+var_C], ecx
.text:004065A7                 mov     ecx, [esp+1Ch+arg_8]
.text:004065AB                 mov     [esp+1Ch+var_18], edx
.text:004065AF                 mov     edx, [esp+1Ch+arg_0]
.text:004065B3                 mov     [esp+1Ch+var_14], ecx
.text:004065B7                 mov     [esp+1Ch+var_1C], edx
.text:004065BA                 call    sub_405DE0
.text:004065BF                 add     esp, 1Ch
.text:004065C2                 retn
.text:004065C2 sub_406580      endp
.text:004065C2
.text:004065C2 ; ---------------------------------------------------------------------------
.text:004065C3                 align 10h
.text:004065D0                 sub     esp, 2Ch
.text:004065D3                 mov     edx, [esp+44h]
.text:004065D7                 mov     dword ptr [esp+18h], 0
.text:004065DF                 mov     ecx, [esp+40h]
.text:004065E3                 mov     dword ptr [esp+14h], 0
.text:004065EB                 mov     [esp+1Ch], edx
.text:004065EF                 mov     edx, [esp+3Ch]
.text:004065F3                 mov     [esp+10h], ecx
.text:004065F7                 mov     ecx, [esp+38h]
.text:004065FB                 mov     [esp+0Ch], edx
.text:004065FF                 mov     edx, [esp+34h]
.text:00406603                 mov     [esp+8], ecx
.text:00406607                 mov     [esp+4], edx
.text:0040660B                 mov     edx, [esp+30h]
.text:0040660F                 mov     [esp], edx
.text:00406612                 call    loc_405250
.text:00406617                 add     esp, 2Ch
.text:0040661A                 retn
.text:0040661A ; ---------------------------------------------------------------------------
.text:0040661B                 align 10h
.text:00406620                 sub     esp, 1Ch
.text:00406623                 mov     edx, [esp+2Ch]
.text:00406627                 mov     dword ptr [esp+18h], 0
.text:0040662F                 mov     ecx, [esp+30h]
.text:00406633                 mov     dword ptr [esp+14h], 1
.text:0040663B                 mov     [esp+0Ch], edx
.text:0040663F                 mov     edx, [esp+24h]
.text:00406643                 mov     [esp+10h], ecx
.text:00406647                 mov     ecx, [esp+28h]
.text:0040664B                 mov     [esp+4], edx
.text:0040664F                 mov     edx, [esp+20h]
.text:00406653                 mov     [esp+8], ecx
.text:00406657                 mov     [esp], edx
.text:0040665A                 call    sub_405DE0
.text:0040665F                 add     esp, 1Ch
.text:00406662                 retn
.text:00406662 ; ---------------------------------------------------------------------------
.text:00406663                 align 10h
.text:00406670                 sub     esp, 2Ch
.text:00406673                 mov     edx, [esp+44h]
.text:00406677                 mov     dword ptr [esp+18h], 0
.text:0040667F                 mov     ecx, [esp+40h]
.text:00406683                 mov     dword ptr [esp+14h], 1
.text:0040668B                 mov     [esp+1Ch], edx
.text:0040668F                 mov     edx, [esp+3Ch]
.text:00406693                 mov     [esp+10h], ecx
.text:00406697                 mov     ecx, [esp+38h]
.text:0040669B                 mov     [esp+0Ch], edx
.text:0040669F                 mov     edx, [esp+34h]
.text:004066A3                 mov     [esp+8], ecx
.text:004066A7                 mov     [esp+4], edx
.text:004066AB                 mov     edx, [esp+30h]
.text:004066AF                 mov     [esp], edx
.text:004066B2                 call    loc_405250
.text:004066B7                 add     esp, 2Ch
.text:004066BA                 retn
.text:004066BA ; ---------------------------------------------------------------------------
.text:004066BB                 align 10h
.text:004066C0                 mov     edx, [esp+4]
.text:004066C4                 mov     ds:dword_40B580, edx
.text:004066CA                 retn
.text:004066CA ; ---------------------------------------------------------------------------
.text:004066CB aWriteError_0   db 'write error',0      ; DATA XREF: sub_4066F0:loc_406739↓o
.text:004066D7 ; const char aSS_0[]
.text:004066D7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4066F0+77↓o
.text:004066DE ; const char aS_1[]
.text:004066DE aS_1            db '%s',0               ; DATA XREF: sub_4066F0+A0↓o
.text:004066E1 ; ---------------------------------------------------------------------------
.text:004066E1                 jmp     short sub_4066F0
.text:004066E1 ; ---------------------------------------------------------------------------
.text:004066E3                 align 10h
.text:004066F0
.text:004066F0 ; =============== S U B R O U T I N E =======================================
.text:004066F0
.text:004066F0
.text:004066F0 ; void __cdecl sub_4066F0()
.text:004066F0 sub_4066F0      proc near               ; CODE XREF: .text:004066E1↑j
.text:004066F0                                         ; DATA XREF: sub_402390+68↑o
.text:004066F0
.text:004066F0 Stream          = dword ptr -2Ch
.text:004066F0 ErrorMessage    = dword ptr -28h
.text:004066F0 var_24          = dword ptr -24h
.text:004066F0 var_20          = byte ptr -20h
.text:004066F0 var_1C          = dword ptr -1Ch
.text:004066F0 var_9           = byte ptr -9
.text:004066F0
.text:004066F0                 push    esi
.text:004066F1                 push    ebx
.text:004066F2                 sub     esp, 24h
.text:004066F5                 mov     edx, ds:_iob
.text:004066FB                 mov     ecx, [edx+2Ch]
.text:004066FE                 lea     esi, [edx+20h]
.text:00406701                 shr     ecx, 5
.text:00406704                 mov     bl, cl
.text:00406706                 mov     ecx, [edx+20h]
.text:00406709                 and     bl, 1
.text:0040670C                 cmp     ecx, [esi+8]
.text:0040670F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406712                 setz    [esp+2Ch+var_9]
.text:00406717                 call    fclose
.text:0040671C                 test    eax, eax
.text:0040671E                 setnz   al
.text:00406721                 test    bl, bl
.text:00406723                 jnz     loc_4067B3
.text:00406729                 test    al, al
.text:0040672B                 jz      short loc_406780
.text:0040672D
.text:0040672D loc_40672D:                             ; CODE XREF: sub_4066F0+CD↓j
.text:0040672D                 call    _errno
.text:00406732                 mov     esi, [eax]
.text:00406734
.text:00406734 loc_406734:                             ; CODE XREF: sub_4066F0+C7↓j
.text:00406734                 cmp     esi, 9
.text:00406737                 jz      short loc_4067A6
.text:00406739
.text:00406739 loc_406739:                             ; CODE XREF: sub_4066F0+B8↓j
.text:00406739                                         ; sub_4066F0+C1↓j
.text:00406739                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:00406740                 call    ds:libintl_gettext
.text:00406746                 mov     ebx, eax
.text:00406748                 mov     eax, ds:dword_40B580
.text:0040674D                 test    eax, eax
.text:0040674F                 jz      short loc_406786
.text:00406751                 mov     [esp+2Ch+Stream], eax ; char *
.text:00406754                 call    sub_408940
.text:00406759                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040675D                 mov     edx, Code
.text:00406763                 mov     [esp+2Ch+var_1C], ebx
.text:00406767                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040676F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406773                 mov     [esp+2Ch+Stream], edx ; Code
.text:00406776                 call    sub_408C60
.text:0040677B                 nop
.text:0040677C                 lea     esi, [esi+0]
.text:00406780
.text:00406780 loc_406780:                             ; CODE XREF: sub_4066F0+3B↑j
.text:00406780                                         ; sub_4066F0+B4↓j ...
.text:00406780                 add     esp, 24h
.text:00406783                 pop     ebx
.text:00406784                 pop     esi
.text:00406785                 retn
.text:00406786 ; ---------------------------------------------------------------------------
.text:00406786
.text:00406786 loc_406786:                             ; CODE XREF: sub_4066F0+5F↑j
.text:00406786                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040678A                 mov     ebx, Code
.text:00406790                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00406798                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040679C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040679F                 call    sub_408C60
.text:004067A4                 jmp     short loc_406780
.text:004067A6 ; ---------------------------------------------------------------------------
.text:004067A6
.text:004067A6 loc_4067A6:                             ; CODE XREF: sub_4066F0+47↑j
.text:004067A6                 test    bl, bl
.text:004067A8                 jnz     short loc_406739
.text:004067AA                 cmp     [esp+2Ch+var_9], 0
.text:004067AF                 jnz     short loc_406780
.text:004067B1                 jmp     short loc_406739
.text:004067B3 ; ---------------------------------------------------------------------------
.text:004067B3
.text:004067B3 loc_4067B3:                             ; CODE XREF: sub_4066F0+33↑j
.text:004067B3                 xor     esi, esi
.text:004067B5                 test    al, al
.text:004067B7                 jz      loc_406734
.text:004067BD                 jmp     loc_40672D
.text:004067BD sub_4066F0      endp
.text:004067BD
.text:004067BD ; ---------------------------------------------------------------------------
.text:004067C2                 align 10h
.text:004067D0
.text:004067D0 ; =============== S U B R O U T I N E =======================================
.text:004067D0
.text:004067D0
.text:004067D0 sub_4067D0      proc near               ; CODE XREF: sub_402390+5B8↑p
.text:004067D0                                         ; sub_402390+9ED↑p ...
.text:004067D0
.text:004067D0 FileHandle      = dword ptr -1Ch
.text:004067D0 DstBuf          = dword ptr -18h
.text:004067D0 MaxCharCount    = dword ptr -14h
.text:004067D0 arg_0           = dword ptr  4
.text:004067D0 arg_4           = dword ptr  8
.text:004067D0 arg_8           = dword ptr  0Ch
.text:004067D0
.text:004067D0                 push    ebp
.text:004067D1                 push    edi
.text:004067D2                 push    esi
.text:004067D3                 push    ebx
.text:004067D4                 sub     esp, 0Ch
.text:004067D7                 mov     ebp, [esp+1Ch+arg_0]
.text:004067DB                 mov     edi, [esp+1Ch+arg_4]
.text:004067DF                 mov     ebx, [esp+1Ch+arg_8]
.text:004067E3                 lea     esi, [esi+0]
.text:004067E9                 lea     edi, [edi+0]
.text:004067F0
.text:004067F0 loc_4067F0:                             ; CODE XREF: sub_4067D0+3E↓j
.text:004067F0                                         ; sub_4067D0+57↓j
.text:004067F0                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:004067F4                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:004067F8                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:004067FB                 call    _read
.text:00406800                 test    eax, eax
.text:00406802                 mov     esi, eax
.text:00406804                 jns     short loc_406829
.text:00406806                 call    _errno
.text:0040680B                 cmp     dword ptr [eax], 4
.text:0040680E                 jz      short loc_4067F0
.text:00406810                 call    _errno
.text:00406815                 cmp     dword ptr [eax], 16h
.text:00406818                 jnz     short loc_406829
.text:0040681A                 cmp     ebx, 7FFFE000h
.text:00406820                 jbe     short loc_406829
.text:00406822                 mov     ebx, 7FFFE000h
.text:00406827                 jmp     short loc_4067F0
.text:00406829 ; ---------------------------------------------------------------------------
.text:00406829
.text:00406829 loc_406829:                             ; CODE XREF: sub_4067D0+34↑j
.text:00406829                                         ; sub_4067D0+48↑j ...
.text:00406829                 add     esp, 0Ch
.text:0040682C                 mov     eax, esi
.text:0040682E                 pop     ebx
.text:0040682F                 pop     esi
.text:00406830                 pop     edi
.text:00406831                 pop     ebp
.text:00406832                 retn
.text:00406832 sub_4067D0      endp
.text:00406832
.text:00406832 ; ---------------------------------------------------------------------------
.text:00406833                 align 10h
.text:00406840 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00406840                                         ; DATA XREF: sub_4068B0+C79↓o
.text:00406868                 align 20h
.text:00406880 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00406880                                         ; DATA XREF: sub_4068B0+C81↓o
.text:004068A6                 align 10h
.text:004068B0
.text:004068B0 ; =============== S U B R O U T I N E =======================================
.text:004068B0
.text:004068B0
.text:004068B0 ; int __cdecl sub_4068B0(int, int, int, int, char *Str)
.text:004068B0 sub_4068B0      proc near               ; CODE XREF: sub_404A30+D5↑p
.text:004068B0
.text:004068B0 C               = dword ptr -13Ch
.text:004068B0 Type            = dword ptr -138h
.text:004068B0 Radix           = dword ptr -134h
.text:004068B0 var_130         = dword ptr -130h
.text:004068B0 var_124         = dword ptr -124h
.text:004068B0 var_120         = dword ptr -120h
.text:004068B0 var_11C         = dword ptr -11Ch
.text:004068B0 var_118         = dword ptr -118h
.text:004068B0 var_114         = dword ptr -114h
.text:004068B0 var_110         = dword ptr -110h
.text:004068B0 var_10C         = dword ptr -10Ch
.text:004068B0 var_108         = dword ptr -108h
.text:004068B0 var_104         = dword ptr -104h
.text:004068B0 var_100         = dword ptr -100h
.text:004068B0 var_F8          = dword ptr -0F8h
.text:004068B0 var_F4          = dword ptr -0F4h
.text:004068B0 var_F0          = dword ptr -0F0h
.text:004068B0 var_EC          = dword ptr -0ECh
.text:004068B0 var_E8          = dword ptr -0E8h
.text:004068B0 var_E4          = dword ptr -0E4h
.text:004068B0 var_E0          = dword ptr -0E0h
.text:004068B0 var_D8          = dword ptr -0D8h
.text:004068B0 var_D4          = dword ptr -0D4h
.text:004068B0 var_D0          = dword ptr -0D0h
.text:004068B0 var_CC          = dword ptr -0CCh
.text:004068B0 var_C8          = dword ptr -0C8h
.text:004068B0 var_C4          = dword ptr -0C4h
.text:004068B0 var_C0          = dword ptr -0C0h
.text:004068B0 var_B8          = dword ptr -0B8h
.text:004068B0 var_B4          = dword ptr -0B4h
.text:004068B0 var_B0          = dword ptr -0B0h
.text:004068B0 var_AC          = dword ptr -0ACh
.text:004068B0 var_A8          = dword ptr -0A8h
.text:004068B0 var_A4          = dword ptr -0A4h
.text:004068B0 var_A0          = dword ptr -0A0h
.text:004068B0 var_98          = dword ptr -98h
.text:004068B0 var_94          = dword ptr -94h
.text:004068B0 var_90          = dword ptr -90h
.text:004068B0 var_8C          = dword ptr -8Ch
.text:004068B0 var_88          = dword ptr -88h
.text:004068B0 var_84          = dword ptr -84h
.text:004068B0 var_80          = dword ptr -80h
.text:004068B0 var_78          = dword ptr -78h
.text:004068B0 var_74          = dword ptr -74h
.text:004068B0 var_70          = dword ptr -70h
.text:004068B0 var_6C          = dword ptr -6Ch
.text:004068B0 var_68          = dword ptr -68h
.text:004068B0 var_64          = dword ptr -64h
.text:004068B0 var_60          = dword ptr -60h
.text:004068B0 var_5C          = dword ptr -5Ch
.text:004068B0 var_58          = dword ptr -58h
.text:004068B0 var_50          = dword ptr -50h
.text:004068B0 var_4C          = dword ptr -4Ch
.text:004068B0 var_48          = dword ptr -48h
.text:004068B0 var_44          = dword ptr -44h
.text:004068B0 var_40          = dword ptr -40h
.text:004068B0 var_3C          = dword ptr -3Ch
.text:004068B0 var_38          = dword ptr -38h
.text:004068B0 var_34          = dword ptr -34h
.text:004068B0 var_30          = dword ptr -30h
.text:004068B0 var_29          = byte ptr -29h
.text:004068B0 var_28          = dword ptr -28h
.text:004068B0 var_24          = dword ptr -24h
.text:004068B0 var_20          = dword ptr -20h
.text:004068B0 var_18          = byte ptr -18h
.text:004068B0 arg_0           = dword ptr  4
.text:004068B0 arg_4           = dword ptr  8
.text:004068B0 arg_8           = dword ptr  0Ch
.text:004068B0 arg_C           = dword ptr  10h
.text:004068B0 Str             = dword ptr  14h
.text:004068B0
.text:004068B0                 push    ebp
.text:004068B1                 xor     eax, eax
.text:004068B3                 push    edi
.text:004068B4                 push    esi
.text:004068B5                 push    ebx
.text:004068B6                 sub     esp, 12Ch
.text:004068BC                 mov     ebp, [esp+13Ch+arg_8]
.text:004068C3                 mov     [esp+13Ch+var_28], eax
.text:004068CA                 mov     esi, [esp+13Ch+arg_0]
.text:004068D1                 cmp     ebp, 24h ; '$'
.text:004068D4                 ja      loc_407521
.text:004068DA                 mov     edi, [esp+13Ch+arg_4]
.text:004068E1                 test    edi, edi
.text:004068E3                 jz      loc_407515
.text:004068E9
.text:004068E9 loc_4068E9:                             ; CODE XREF: sub_4068B0+C6C↓j
.text:004068E9                 movzx   edx, byte ptr [esi]
.text:004068EC                 mov     ebx, esi
.text:004068EE                 mov     [esp+13Ch+var_29], dl
.text:004068F5                 lea     esi, [esi+0]
.text:004068F9                 lea     edi, [edi+0]
.text:00406900
.text:00406900 loc_406900:                             ; CODE XREF: sub_4068B0+86↓j
.text:00406900                 movzx   edx, [esp+13Ch+var_29]
.text:00406908                 mov     ecx, ds:__mb_cur_max
.text:0040690E                 cmp     dword ptr [ecx], 1
.text:00406911                 jz      loc_407502
.text:00406917                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040691F                 mov     [esp+13Ch+C], edx ; C
.text:00406922                 call    _isctype
.text:00406927
.text:00406927 loc_406927:                             ; CODE XREF: sub_4068B0+C60↓j
.text:00406927                 test    eax, eax
.text:00406929                 jz      short loc_406938
.text:0040692B                 inc     ebx
.text:0040692C                 movzx   eax, byte ptr [ebx]
.text:0040692F                 mov     [esp+13Ch+var_29], al
.text:00406936                 jmp     short loc_406900
.text:00406938 ; ---------------------------------------------------------------------------
.text:00406938
.text:00406938 loc_406938:                             ; CODE XREF: sub_4068B0+79↑j
.text:00406938                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00406940                 mov     eax, 4
.text:00406945                 jz      short loc_4069C2
.text:00406947                 call    _errno
.text:0040694C                 mov     dword ptr [eax], 0
.text:00406952                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00406956                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040695A                 mov     [esp+13Ch+C], esi ; String
.text:0040695D                 call    _strtoull
.text:00406962                 mov     [esp+13Ch+var_24], eax
.text:00406969                 mov     eax, [edi]
.text:0040696B                 mov     [esp+13Ch+var_20], edx
.text:00406972                 cmp     eax, esi
.text:00406974                 jz      loc_4074BC
.text:0040697A                 call    _errno
.text:0040697F                 mov     ebx, [eax]
.text:00406981                 test    ebx, ebx
.text:00406983                 jnz     loc_407497
.text:00406989
.text:00406989 loc_406989:                             ; CODE XREF: sub_4068B0+BFD↓j
.text:00406989                                         ; sub_4068B0+C4D↓j
.text:00406989                 mov     ebp, [esp+13Ch+Str]
.text:00406990                 test    ebp, ebp
.text:00406992                 jz      loc_407478
.text:00406998                 mov     ebx, [edi]
.text:0040699A                 movzx   eax, byte ptr [ebx]
.text:0040699D                 test    al, al
.text:0040699F                 jnz     short loc_4069CD
.text:004069A1
.text:004069A1 loc_4069A1:                             ; CODE XREF: sub_4068B0+312↓j
.text:004069A1                                         ; sub_4068B0+320↓j
.text:004069A1                 mov     edx, [esp+13Ch+var_24]
.text:004069A8                 mov     edi, [esp+13Ch+var_20]
.text:004069AF                 mov     ebx, [esp+13Ch+arg_C]
.text:004069B6                 mov     [ebx], edx
.text:004069B8                 mov     [ebx+4], edi
.text:004069BB
.text:004069BB loc_4069BB:                             ; CODE XREF: sub_4068B0+BE2↓j
.text:004069BB                 mov     eax, [esp+13Ch+var_28]
.text:004069C2
.text:004069C2 loc_4069C2:                             ; CODE XREF: sub_4068B0+95↑j
.text:004069C2                                         ; sub_4068B0+16C↓j ...
.text:004069C2                 add     esp, 12Ch
.text:004069C8                 pop     ebx
.text:004069C9                 pop     esi
.text:004069CA                 pop     edi
.text:004069CB                 pop     ebp
.text:004069CC                 retn
.text:004069CD ; ---------------------------------------------------------------------------
.text:004069CD
.text:004069CD loc_4069CD:                             ; CODE XREF: sub_4068B0+EF↑j
.text:004069CD                 mov     esi, [esp+13Ch+Str]
.text:004069D4                 mov     ecx, 1
.text:004069D9                 movsx   ebp, al
.text:004069DC                 mov     [esp+13Ch+var_30], ecx
.text:004069E3                 mov     ebx, 400h
.text:004069E8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004069EC                 mov     [esp+13Ch+C], esi ; Str
.text:004069EF                 call    strchr
.text:004069F4                 test    eax, eax
.text:004069F6                 jnz     short loc_406A1E
.text:004069F8
.text:004069F8 def_406A69:                             ; CODE XREF: sub_4068B0+1B7↓j
.text:004069F8                                         ; sub_4068B0+1B9↓j
.text:004069F8                                         ; DATA XREF: ...
.text:004069F8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00406A69 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004069FF                 mov     esi, [esp+13Ch+var_24]
.text:00406A06                 mov     ebp, [esp+13Ch+var_20]
.text:00406A0D                 mov     edi, [esp+13Ch+arg_C]
.text:00406A14                 or      eax, 2
.text:00406A17                 mov     [edi], esi
.text:00406A19                 mov     [edi+4], ebp
.text:00406A1C                 jmp     short loc_4069C2
.text:00406A1E ; ---------------------------------------------------------------------------
.text:00406A1E
.text:00406A1E loc_406A1E:                             ; CODE XREF: sub_4068B0+146↑j
.text:00406A1E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00406A26                 mov     edx, [esp+13Ch+Str]
.text:00406A2D                 mov     [esp+13Ch+C], edx ; Str
.text:00406A30                 call    strchr
.text:00406A35                 test    eax, eax
.text:00406A37                 jz      loc_407471
.text:00406A3D                 mov     edx, [edi]
.text:00406A3F                 movsx   eax, byte ptr [edx+1]
.text:00406A43                 cmp     eax, 44h ; 'D'
.text:00406A46                 jz      loc_407437
.text:00406A4C                 cmp     eax, 44h ; 'D'
.text:00406A4F                 jg      loc_40744D
.text:00406A55                 cmp     eax, 42h ; 'B'
.text:00406A58                 jz      loc_407437
.text:00406A5E
.text:00406A5E loc_406A5E:                             ; CODE XREF: sub_4068B0+B98↓j
.text:00406A5E                                         ; sub_4068B0+BA0↓j ...
.text:00406A5E                 movsx   eax, byte ptr [edx]
.text:00406A61                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00406A64                 cmp     eax, 35h
.text:00406A67                 ja      short def_406A69 ; jumptable 00406A69 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00406A69                 jmp     ds:jpt_406A69[eax*4] ; switch jump
.text:00406A69 ; ---------------------------------------------------------------------------
.text:00406A70 jpt_406A69      dd offset loc_406BF4, offset def_406A69, offset def_406A69
.text:00406A70                                         ; DATA XREF: sub_4068B0+1B9↑r
.text:00406A70                 dd offset loc_406C4E, offset def_406A69, offset loc_407017 ; jump table for switch statement
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset def_406A69
.text:00406A70                 dd offset loc_407126, offset def_406A69, offset loc_4071EF
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset loc_406D5D
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset def_406A69
.text:00406A70                 dd offset loc_4072FE, offset def_406A69, offset def_406A69
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset loc_406E6C
.text:00406A70                 dd offset loc_406F3E, offset def_406A69, offset def_406A69
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset def_406A69
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset loc_406B48
.text:00406A70                 dd offset loc_407010, offset def_406A69, offset def_406A69
.text:00406A70                 dd offset def_406A69, offset loc_407017, offset def_406A69
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset loc_407126
.text:00406A70                 dd offset def_406A69, offset loc_4071EF, offset def_406A69
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset def_406A69
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset loc_4072FE
.text:00406A70                 dd offset def_406A69, offset def_406A69, offset loc_4073D7
.text:00406B48 ; ---------------------------------------------------------------------------
.text:00406B48
.text:00406B48 loc_406B48:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00406B48                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00406B48                 mov     [esp+13Ch+Radix], 200h ; jumptable 00406A69 case 98
.text:00406B50                 lea     ebp, [esp+13Ch+var_24]
.text:00406B57                 mov     [esp+13Ch+var_130], 0
.text:00406B5F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406B66                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406B6E                 call    sub_4090B0
.text:00406B73                 mov     esi, [esp+13Ch+var_20]
.text:00406B7A                 mov     ecx, [esp+13Ch+var_24]
.text:00406B81                 cmp     edx, esi
.text:00406B83                 ja      short loc_406B8B
.text:00406B85                 jb      short loc_406BD5
.text:00406B87                 cmp     eax, ecx
.text:00406B89                 jb      short loc_406BD5
.text:00406B8B
.text:00406B8B loc_406B8B:                             ; CODE XREF: sub_4068B0+2D3↑j
.text:00406B8B                 mov     esi, [ebp+0]
.text:00406B8E                 mov     eax, 200h
.text:00406B93                 mov     ebx, [ebp+4]
.text:00406B96                 mul     esi
.text:00406B98                 mov     ecx, ebx
.text:00406B9A                 shl     ecx, 9
.text:00406B9D
.text:00406B9D loc_406B9D:                             ; CODE XREF: sub_4068B0+399↓j
.text:00406B9D                 mov     esi, edx
.text:00406B9F                 lea     edx, [ecx+esi]
.text:00406BA2
.text:00406BA2 loc_406BA2:                             ; CODE XREF: sub_4068B0+B82↓j
.text:00406BA2                 mov     [ebp+0], eax
.text:00406BA5                 xor     eax, eax
.text:00406BA7                 mov     [ebp+4], edx
.text:00406BAA
.text:00406BAA loc_406BAA:                             ; CODE XREF: sub_4068B0+342↓j
.text:00406BAA                                         ; sub_4068B0+459↓j ...
.text:00406BAA                 mov     edx, [edi]
.text:00406BAC
.text:00406BAC loc_406BAC:                             ; CODE XREF: sub_4068B0+762↓j
.text:00406BAC                 or      [esp+13Ch+var_28], eax
.text:00406BB3                 mov     eax, [esp+13Ch+var_30]
.text:00406BBA                 lea     ecx, [eax+edx]
.text:00406BBD                 mov     [edi], ecx
.text:00406BBF                 cmp     byte ptr [ecx], 0
.text:00406BC2                 jz      loc_4069A1
.text:00406BC8                 or      [esp+13Ch+var_28], 2
.text:00406BD0                 jmp     loc_4069A1
.text:00406BD5 ; ---------------------------------------------------------------------------
.text:00406BD5
.text:00406BD5 loc_406BD5:                             ; CODE XREF: sub_4068B0+2D5↑j
.text:00406BD5                                         ; sub_4068B0+2D9↑j ...
.text:00406BD5                 mov     edx, 0FFFFFFFFh
.text:00406BDA                 mov     ebp, 0FFFFFFFFh
.text:00406BDF                 mov     eax, 1
.text:00406BE4                 mov     [esp+13Ch+var_24], edx
.text:00406BEB                 mov     [esp+13Ch+var_20], ebp
.text:00406BF2                 jmp     short loc_406BAA
.text:00406BF4 ; ---------------------------------------------------------------------------
.text:00406BF4
.text:00406BF4 loc_406BF4:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00406BF4                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00406BF4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00406A69 case 66
.text:00406BFC                 lea     ebp, [esp+13Ch+var_24]
.text:00406C03                 mov     [esp+13Ch+var_130], 0
.text:00406C0B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406C12                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406C1A                 call    sub_4090B0
.text:00406C1F                 mov     esi, [esp+13Ch+var_20]
.text:00406C26                 mov     ecx, [esp+13Ch+var_24]
.text:00406C2D                 cmp     edx, esi
.text:00406C2F                 ja      short loc_406C37
.text:00406C31                 jb      short loc_406BD5
.text:00406C33                 cmp     eax, ecx
.text:00406C35                 jb      short loc_406BD5
.text:00406C37
.text:00406C37 loc_406C37:                             ; CODE XREF: sub_4068B0+37F↑j
.text:00406C37                 mov     esi, [ebp+0]
.text:00406C3A                 mov     eax, 400h
.text:00406C3F                 mov     ebx, [ebp+4]
.text:00406C42                 mul     esi
.text:00406C44                 mov     ecx, ebx
.text:00406C46                 shl     ecx, 0Ah
.text:00406C49                 jmp     loc_406B9D
.text:00406C4E ; ---------------------------------------------------------------------------
.text:00406C4E
.text:00406C4E loc_406C4E:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00406C4E                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00406C4E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00406A69 case 69
.text:00406C55                 mov     ecx, ebx
.text:00406C57                 xor     ebp, ebp
.text:00406C59                 mov     [esp+13Ch+var_34], ebp
.text:00406C60                 sar     ecx, 1Fh
.text:00406C63                 mov     ebx, [esp+13Ch+var_3C]
.text:00406C6A                 mov     [esp+13Ch+var_38], ecx
.text:00406C71                 lea     esi, [esp+13Ch+var_24]
.text:00406C78                 mov     ebp, 5
.text:00406C7D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406C84                 mov     edx, [esp+13Ch+var_38]
.text:00406C8B                 mov     [esp+13Ch+Radix], ebx
.text:00406C8F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406C97                 mov     [esp+13Ch+var_130], edx
.text:00406C9B                 call    sub_4090B0
.text:00406CA0                 mov     [esp+13Ch+var_44], eax
.text:00406CA7                 mov     [esp+13Ch+var_40], edx
.text:00406CAE
.text:00406CAE loc_406CAE:                             ; CODE XREF: sub_4068B0+450↓j
.text:00406CAE                 mov     ebx, [esi+4]
.text:00406CB1                 mov     eax, [esi]
.text:00406CB3                 cmp     [esp+13Ch+var_40], ebx
.text:00406CBA                 mov     [esp+13Ch+var_48], ebx
.text:00406CC1                 mov     [esp+13Ch+var_4C], eax
.text:00406CC8                 ja      short loc_406D0E
.text:00406CCA                 mov     ecx, [esp+13Ch+var_48]
.text:00406CD1                 cmp     [esp+13Ch+var_40], ecx
.text:00406CD8                 jb      short loc_406CE3
.text:00406CDA                 cmp     [esp+13Ch+var_44], eax
.text:00406CE1                 jnb     short loc_406D0E
.text:00406CE3
.text:00406CE3 loc_406CE3:                             ; CODE XREF: sub_4068B0+428↑j
.text:00406CE3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406CE9                 mov     eax, 1
.text:00406CEE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406CF5
.text:00406CF5 loc_406CF5:                             ; CODE XREF: sub_4068B0+4AB↓j
.text:00406CF5                 or      [esp+13Ch+var_34], eax
.text:00406CFC                 dec     ebp
.text:00406CFD                 cmp     ebp, 0FFFFFFFFh
.text:00406D00                 jnz     short loc_406CAE
.text:00406D02                 mov     eax, [esp+13Ch+var_34]
.text:00406D09                 jmp     loc_406BAA
.text:00406D0E ; ---------------------------------------------------------------------------
.text:00406D0E
.text:00406D0E loc_406D0E:                             ; CODE XREF: sub_4068B0+418↑j
.text:00406D0E                                         ; sub_4068B0+431↑j
.text:00406D0E                 mov     ecx, [esp+13Ch+var_38]
.text:00406D15                 mov     eax, [esp+13Ch+var_4C]
.text:00406D1C                 mov     ebx, [esp+13Ch+var_4C]
.text:00406D23                 mul     [esp+13Ch+var_3C]
.text:00406D2A                 imul    ebx, ecx
.text:00406D2D                 mov     ecx, edx
.text:00406D2F                 mov     [esp+13Ch+var_124], eax
.text:00406D33                 add     ecx, ebx
.text:00406D35                 mov     edx, [esp+13Ch+var_3C]
.text:00406D3C                 mov     ebx, [esp+13Ch+var_48]
.text:00406D43                 imul    edx, ebx
.text:00406D46                 mov     ebx, [esp+13Ch+var_124]
.text:00406D4A                 mov     [esi], ebx
.text:00406D4C                 add     ecx, edx
.text:00406D4E                 mov     [esp+13Ch+var_120], ecx
.text:00406D52                 mov     eax, [esp+13Ch+var_120]
.text:00406D56                 mov     [esi+4], eax
.text:00406D59                 xor     eax, eax
.text:00406D5B                 jmp     short loc_406CF5
.text:00406D5D ; ---------------------------------------------------------------------------
.text:00406D5D
.text:00406D5D loc_406D5D:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00406D5D                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00406D5D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00406A69 case 80
.text:00406D64                 mov     eax, ebx
.text:00406D66                 xor     ebp, ebp
.text:00406D68                 mov     [esp+13Ch+var_98], ebp
.text:00406D6F                 sar     eax, 1Fh
.text:00406D72                 mov     edx, [esp+13Ch+var_A4]
.text:00406D79                 mov     [esp+13Ch+var_A0], eax
.text:00406D80                 lea     esi, [esp+13Ch+var_24]
.text:00406D87                 mov     ebp, 4
.text:00406D8C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406D93                 mov     ebx, [esp+13Ch+var_A0]
.text:00406D9A                 mov     [esp+13Ch+Radix], edx
.text:00406D9E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406DA6                 mov     [esp+13Ch+var_130], ebx
.text:00406DAA                 call    sub_4090B0
.text:00406DAF                 mov     [esp+13Ch+var_AC], eax
.text:00406DB6                 mov     [esp+13Ch+var_A8], edx
.text:00406DBD
.text:00406DBD loc_406DBD:                             ; CODE XREF: sub_4068B0+55F↓j
.text:00406DBD                 mov     ebx, [esi+4]
.text:00406DC0                 mov     edx, [esi]
.text:00406DC2                 cmp     [esp+13Ch+var_A8], ebx
.text:00406DC9                 mov     [esp+13Ch+var_B0], ebx
.text:00406DD0                 mov     [esp+13Ch+var_B4], edx
.text:00406DD7                 ja      short loc_406E1D
.text:00406DD9                 mov     eax, [esp+13Ch+var_B0]
.text:00406DE0                 cmp     [esp+13Ch+var_A8], eax
.text:00406DE7                 jb      short loc_406DF2
.text:00406DE9                 cmp     [esp+13Ch+var_AC], edx
.text:00406DF0                 jnb     short loc_406E1D
.text:00406DF2
.text:00406DF2 loc_406DF2:                             ; CODE XREF: sub_4068B0+537↑j
.text:00406DF2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406DF8                 mov     eax, 1
.text:00406DFD                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406E04
.text:00406E04 loc_406E04:                             ; CODE XREF: sub_4068B0+5BA↓j
.text:00406E04                 or      [esp+13Ch+var_98], eax
.text:00406E0B                 dec     ebp
.text:00406E0C                 cmp     ebp, 0FFFFFFFFh
.text:00406E0F                 jnz     short loc_406DBD
.text:00406E11                 mov     eax, [esp+13Ch+var_98]
.text:00406E18                 jmp     loc_406BAA
.text:00406E1D ; ---------------------------------------------------------------------------
.text:00406E1D
.text:00406E1D loc_406E1D:                             ; CODE XREF: sub_4068B0+527↑j
.text:00406E1D                                         ; sub_4068B0+540↑j
.text:00406E1D                 mov     ecx, [esp+13Ch+var_A0]
.text:00406E24                 mov     eax, [esp+13Ch+var_B4]
.text:00406E2B                 mov     ebx, [esp+13Ch+var_B4]
.text:00406E32                 mul     [esp+13Ch+var_A4]
.text:00406E39                 imul    ebx, ecx
.text:00406E3C                 mov     ecx, edx
.text:00406E3E                 mov     [esp+13Ch+var_124], eax
.text:00406E42                 add     ecx, ebx
.text:00406E44                 mov     edx, [esp+13Ch+var_A4]
.text:00406E4B                 mov     ebx, [esp+13Ch+var_B0]
.text:00406E52                 xor     eax, eax
.text:00406E54                 imul    edx, ebx
.text:00406E57                 add     ecx, edx
.text:00406E59                 mov     [esp+13Ch+var_120], ecx
.text:00406E5D                 mov     ebx, [esp+13Ch+var_120]
.text:00406E61                 mov     ecx, [esp+13Ch+var_124]
.text:00406E65                 mov     [esi+4], ebx
.text:00406E68                 mov     [esi], ecx
.text:00406E6A                 jmp     short loc_406E04
.text:00406E6C ; ---------------------------------------------------------------------------
.text:00406E6C
.text:00406E6C loc_406E6C:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00406E6C                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00406E6C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00406A69 case 89
.text:00406E70                 mov     eax, ebx
.text:00406E72                 lea     esi, [esp+13Ch+var_24]
.text:00406E79                 mov     [esp+13Ch+var_D8], 0
.text:00406E81                 sar     eax, 1Fh
.text:00406E84                 mov     edx, [esp+13Ch+var_E4]
.text:00406E88                 mov     [esp+13Ch+var_E0], eax
.text:00406E8C                 mov     ebp, 7
.text:00406E91                 mov     ebx, [esp+13Ch+var_E0]
.text:00406E95                 mov     [esp+13Ch+Radix], edx
.text:00406E99                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406EA0                 mov     [esp+13Ch+var_130], ebx
.text:00406EA4                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406EAC                 call    sub_4090B0
.text:00406EB1                 mov     [esp+13Ch+var_EC], eax
.text:00406EB5                 mov     [esp+13Ch+var_E8], edx
.text:00406EB9
.text:00406EB9 loc_406EB9:                             ; CODE XREF: sub_4068B0+646↓j
.text:00406EB9                 mov     ebx, [esi+4]
.text:00406EBC                 mov     edx, [esi]
.text:00406EBE                 cmp     [esp+13Ch+var_E8], ebx
.text:00406EC2                 mov     [esp+13Ch+var_F0], ebx
.text:00406EC6                 mov     [esp+13Ch+var_F4], edx
.text:00406ECA                 ja      short loc_406F01
.text:00406ECC                 mov     eax, [esp+13Ch+var_F0]
.text:00406ED0                 cmp     [esp+13Ch+var_E8], eax
.text:00406ED4                 jb      short loc_406EDC
.text:00406ED6                 cmp     [esp+13Ch+var_EC], edx
.text:00406EDA                 jnb     short loc_406F01
.text:00406EDC
.text:00406EDC loc_406EDC:                             ; CODE XREF: sub_4068B0+624↑j
.text:00406EDC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406EE2                 mov     eax, 1
.text:00406EE7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406EEE
.text:00406EEE loc_406EEE:                             ; CODE XREF: sub_4068B0+68C↓j
.text:00406EEE                 or      [esp+13Ch+var_D8], eax
.text:00406EF2                 dec     ebp
.text:00406EF3                 cmp     ebp, 0FFFFFFFFh
.text:00406EF6                 jnz     short loc_406EB9
.text:00406EF8                 mov     eax, [esp+13Ch+var_D8]
.text:00406EFC                 jmp     loc_406BAA
.text:00406F01 ; ---------------------------------------------------------------------------
.text:00406F01
.text:00406F01 loc_406F01:                             ; CODE XREF: sub_4068B0+61A↑j
.text:00406F01                                         ; sub_4068B0+62A↑j
.text:00406F01                 mov     ecx, [esp+13Ch+var_E0]
.text:00406F05                 mov     eax, [esp+13Ch+var_F4]
.text:00406F09                 mov     ebx, [esp+13Ch+var_F4]
.text:00406F0D                 mul     [esp+13Ch+var_E4]
.text:00406F11                 imul    ebx, ecx
.text:00406F14                 mov     ecx, edx
.text:00406F16                 mov     [esp+13Ch+var_124], eax
.text:00406F1A                 add     ecx, ebx
.text:00406F1C                 mov     edx, [esp+13Ch+var_E4]
.text:00406F20                 mov     ebx, [esp+13Ch+var_F0]
.text:00406F24                 xor     eax, eax
.text:00406F26                 imul    edx, ebx
.text:00406F29                 add     ecx, edx
.text:00406F2B                 mov     [esp+13Ch+var_120], ecx
.text:00406F2F                 mov     ebx, [esp+13Ch+var_120]
.text:00406F33                 mov     ecx, [esp+13Ch+var_124]
.text:00406F37                 mov     [esi+4], ebx
.text:00406F3A                 mov     [esi], ecx
.text:00406F3C                 jmp     short loc_406EEE
.text:00406F3E ; ---------------------------------------------------------------------------
.text:00406F3E
.text:00406F3E loc_406F3E:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00406F3E                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00406F3E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00406A69 case 90
.text:00406F42                 mov     eax, ebx
.text:00406F44                 lea     esi, [esp+13Ch+var_24]
.text:00406F4B                 mov     [esp+13Ch+var_F8], 0
.text:00406F53                 sar     eax, 1Fh
.text:00406F56                 mov     edx, [esp+13Ch+var_104]
.text:00406F5A                 mov     [esp+13Ch+var_100], eax
.text:00406F5E                 mov     ebp, 6
.text:00406F63                 mov     ebx, [esp+13Ch+var_100]
.text:00406F67                 mov     [esp+13Ch+Radix], edx
.text:00406F6B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00406F72                 mov     [esp+13Ch+var_130], ebx
.text:00406F76                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00406F7E                 call    sub_4090B0
.text:00406F83                 mov     [esp+13Ch+var_10C], eax
.text:00406F87                 mov     [esp+13Ch+var_108], edx
.text:00406F8B
.text:00406F8B loc_406F8B:                             ; CODE XREF: sub_4068B0+718↓j
.text:00406F8B                 mov     ebx, [esi+4]
.text:00406F8E                 mov     edx, [esi]
.text:00406F90                 cmp     [esp+13Ch+var_108], ebx
.text:00406F94                 mov     [esp+13Ch+var_110], ebx
.text:00406F98                 mov     [esp+13Ch+var_114], edx
.text:00406F9C                 ja      short loc_406FD3
.text:00406F9E                 mov     eax, [esp+13Ch+var_110]
.text:00406FA2                 cmp     [esp+13Ch+var_108], eax
.text:00406FA6                 jb      short loc_406FAE
.text:00406FA8                 cmp     [esp+13Ch+var_10C], edx
.text:00406FAC                 jnb     short loc_406FD3
.text:00406FAE
.text:00406FAE loc_406FAE:                             ; CODE XREF: sub_4068B0+6F6↑j
.text:00406FAE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00406FB4                 mov     eax, 1
.text:00406FB9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00406FC0
.text:00406FC0 loc_406FC0:                             ; CODE XREF: sub_4068B0+75E↓j
.text:00406FC0                 or      [esp+13Ch+var_F8], eax
.text:00406FC4                 dec     ebp
.text:00406FC5                 cmp     ebp, 0FFFFFFFFh
.text:00406FC8                 jnz     short loc_406F8B
.text:00406FCA                 mov     eax, [esp+13Ch+var_F8]
.text:00406FCE                 jmp     loc_406BAA
.text:00406FD3 ; ---------------------------------------------------------------------------
.text:00406FD3
.text:00406FD3 loc_406FD3:                             ; CODE XREF: sub_4068B0+6EC↑j
.text:00406FD3                                         ; sub_4068B0+6FC↑j
.text:00406FD3                 mov     eax, [esp+13Ch+var_114]
.text:00406FD7                 mov     ebx, [esp+13Ch+var_100]
.text:00406FDB                 mul     [esp+13Ch+var_104]
.text:00406FDF                 mov     ecx, edx
.text:00406FE1                 mov     edx, [esp+13Ch+var_104]
.text:00406FE5                 mov     [esp+13Ch+var_124], eax
.text:00406FE9                 mov     eax, [esp+13Ch+var_114]
.text:00406FED                 imul    eax, ebx
.text:00406FF0                 mov     ebx, [esp+13Ch+var_110]
.text:00406FF4                 imul    edx, ebx
.text:00406FF7                 add     ecx, eax
.text:00406FF9                 xor     eax, eax
.text:00406FFB                 add     ecx, edx
.text:00406FFD                 mov     [esp+13Ch+var_120], ecx
.text:00407001                 mov     ebx, [esp+13Ch+var_120]
.text:00407005                 mov     ecx, [esp+13Ch+var_124]
.text:00407009                 mov     [esi+4], ebx
.text:0040700C                 mov     [esi], ecx
.text:0040700E                 jmp     short loc_406FC0
.text:00407010 ; ---------------------------------------------------------------------------
.text:00407010
.text:00407010 loc_407010:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00407010                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00407010                 xor     eax, eax        ; jumptable 00406A69 case 99
.text:00407012                 jmp     loc_406BAC
.text:00407017 ; ---------------------------------------------------------------------------
.text:00407017
.text:00407017 loc_407017:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00407017                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00407017                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00406A69 cases 71,103
.text:0040701E                 mov     eax, ebx
.text:00407020                 xor     ebp, ebp
.text:00407022                 mov     [esp+13Ch+var_50], ebp
.text:00407029                 sar     eax, 1Fh
.text:0040702C                 mov     edx, [esp+13Ch+var_5C]
.text:00407033                 mov     [esp+13Ch+var_58], eax
.text:0040703A                 lea     esi, [esp+13Ch+var_24]
.text:00407041                 mov     ebp, 2
.text:00407046                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040704D                 mov     ebx, [esp+13Ch+var_58]
.text:00407054                 mov     [esp+13Ch+Radix], edx
.text:00407058                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407060                 mov     [esp+13Ch+var_130], ebx
.text:00407064                 call    sub_4090B0
.text:00407069                 mov     [esp+13Ch+var_64], eax
.text:00407070                 mov     [esp+13Ch+var_60], edx
.text:00407077
.text:00407077 loc_407077:                             ; CODE XREF: sub_4068B0+819↓j
.text:00407077                 mov     ebx, [esi+4]
.text:0040707A                 mov     edx, [esi]
.text:0040707C                 cmp     [esp+13Ch+var_60], ebx
.text:00407083                 mov     [esp+13Ch+var_68], ebx
.text:0040708A                 mov     [esp+13Ch+var_6C], edx
.text:00407091                 ja      short loc_4070D7
.text:00407093                 mov     eax, [esp+13Ch+var_68]
.text:0040709A                 cmp     [esp+13Ch+var_60], eax
.text:004070A1                 jb      short loc_4070AC
.text:004070A3                 cmp     [esp+13Ch+var_64], edx
.text:004070AA                 jnb     short loc_4070D7
.text:004070AC
.text:004070AC loc_4070AC:                             ; CODE XREF: sub_4068B0+7F1↑j
.text:004070AC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004070B2                 mov     eax, 1
.text:004070B7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004070BE
.text:004070BE loc_4070BE:                             ; CODE XREF: sub_4068B0+874↓j
.text:004070BE                 or      [esp+13Ch+var_50], eax
.text:004070C5                 dec     ebp
.text:004070C6                 cmp     ebp, 0FFFFFFFFh
.text:004070C9                 jnz     short loc_407077
.text:004070CB                 mov     eax, [esp+13Ch+var_50]
.text:004070D2                 jmp     loc_406BAA
.text:004070D7 ; ---------------------------------------------------------------------------
.text:004070D7
.text:004070D7 loc_4070D7:                             ; CODE XREF: sub_4068B0+7E1↑j
.text:004070D7                                         ; sub_4068B0+7FA↑j
.text:004070D7                 mov     ecx, [esp+13Ch+var_58]
.text:004070DE                 mov     eax, [esp+13Ch+var_6C]
.text:004070E5                 mov     ebx, [esp+13Ch+var_6C]
.text:004070EC                 mul     [esp+13Ch+var_5C]
.text:004070F3                 imul    ebx, ecx
.text:004070F6                 mov     ecx, edx
.text:004070F8                 mov     [esp+13Ch+var_124], eax
.text:004070FC                 add     ecx, ebx
.text:004070FE                 mov     edx, [esp+13Ch+var_5C]
.text:00407105                 mov     ebx, [esp+13Ch+var_68]
.text:0040710C                 xor     eax, eax
.text:0040710E                 imul    edx, ebx
.text:00407111                 add     ecx, edx
.text:00407113                 mov     [esp+13Ch+var_120], ecx
.text:00407117                 mov     ebx, [esp+13Ch+var_120]
.text:0040711B                 mov     ecx, [esp+13Ch+var_124]
.text:0040711F                 mov     [esi+4], ebx
.text:00407122                 mov     [esi], ecx
.text:00407124                 jmp     short loc_4070BE
.text:00407126 ; ---------------------------------------------------------------------------
.text:00407126
.text:00407126 loc_407126:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:00407126                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:00407126                 mov     [esp+13Ch+var_74], ebx ; jumptable 00406A69 cases 75,107
.text:0040712D                 mov     eax, ebx
.text:0040712F                 lea     esi, [esp+13Ch+var_24]
.text:00407136                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040713D                 sar     eax, 1Fh
.text:00407140                 mov     edx, [esp+13Ch+var_74]
.text:00407147                 mov     [esp+13Ch+var_70], eax
.text:0040714E                 mov     ebx, [esp+13Ch+var_70]
.text:00407155                 mov     [esp+13Ch+Radix], edx
.text:00407159                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407161                 mov     [esp+13Ch+var_130], ebx
.text:00407165                 call    sub_4090B0
.text:0040716A                 mov     ebp, [esp+13Ch+var_20]
.text:00407171                 mov     ecx, [esp+13Ch+var_24]
.text:00407178                 cmp     edx, ebp
.text:0040717A                 mov     [esp+13Ch+var_11C], ecx
.text:0040717E                 mov     [esp+13Ch+var_118], ebp
.text:00407182                 ja      short loc_4071A9
.text:00407184                 cmp     edx, [esp+13Ch+var_118]
.text:00407188                 jb      short loc_40718E
.text:0040718A                 cmp     eax, ecx
.text:0040718C                 jnb     short loc_4071A9
.text:0040718E
.text:0040718E loc_40718E:                             ; CODE XREF: sub_4068B0+8D8↑j
.text:0040718E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407194                 mov     edx, 1
.text:00407199                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004071A0
.text:004071A0 loc_4071A0:                             ; CODE XREF: sub_4068B0+93D↓j
.text:004071A0                 xor     eax, eax
.text:004071A2                 or      eax, edx
.text:004071A4                 jmp     loc_406BAA
.text:004071A9 ; ---------------------------------------------------------------------------
.text:004071A9
.text:004071A9 loc_4071A9:                             ; CODE XREF: sub_4068B0+8D2↑j
.text:004071A9                                         ; sub_4068B0+8DC↑j
.text:004071A9                 mov     eax, [esp+13Ch+var_11C]
.text:004071AD                 mov     ebp, [esp+13Ch+var_11C]
.text:004071B1                 mov     ebx, [esp+13Ch+var_118]
.text:004071B5                 mul     [esp+13Ch+var_74]
.text:004071BC                 mov     [esp+13Ch+var_124], eax
.text:004071C0                 mov     eax, [esp+13Ch+var_70]
.text:004071C7                 mov     ecx, [esp+13Ch+var_124]
.text:004071CB                 imul    ebp, eax
.text:004071CE                 mov     eax, edx
.text:004071D0                 xor     edx, edx
.text:004071D2                 mov     [esi], ecx
.text:004071D4                 add     eax, ebp
.text:004071D6                 mov     ebp, [esp+13Ch+var_74]
.text:004071DD                 imul    ebp, ebx
.text:004071E0                 add     eax, ebp
.text:004071E2                 mov     [esp+13Ch+var_120], eax
.text:004071E6                 mov     ebp, [esp+13Ch+var_120]
.text:004071EA                 mov     [esi+4], ebp
.text:004071ED                 jmp     short loc_4071A0
.text:004071EF ; ---------------------------------------------------------------------------
.text:004071EF
.text:004071EF loc_4071EF:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:004071EF                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:004071EF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00406A69 cases 77,109
.text:004071F6                 mov     eax, ebx
.text:004071F8                 xor     ebp, ebp
.text:004071FA                 mov     [esp+13Ch+var_78], ebp
.text:00407201                 sar     eax, 1Fh
.text:00407204                 mov     edx, [esp+13Ch+var_84]
.text:0040720B                 mov     [esp+13Ch+var_80], eax
.text:00407212                 lea     esi, [esp+13Ch+var_24]
.text:00407219                 mov     ebp, 1
.text:0040721E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00407225                 mov     ecx, [esp+13Ch+var_80]
.text:0040722C                 mov     [esp+13Ch+Radix], edx
.text:00407230                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00407238                 mov     [esp+13Ch+var_130], ecx
.text:0040723C                 call    sub_4090B0
.text:00407241                 mov     [esp+13Ch+var_8C], eax
.text:00407248                 mov     [esp+13Ch+var_88], edx
.text:0040724F
.text:0040724F loc_40724F:                             ; CODE XREF: sub_4068B0+9F1↓j
.text:0040724F                 mov     ebx, [esi+4]
.text:00407252                 mov     edx, [esi]
.text:00407254                 cmp     [esp+13Ch+var_88], ebx
.text:0040725B                 mov     [esp+13Ch+var_90], ebx
.text:00407262                 mov     [esp+13Ch+var_94], edx
.text:00407269                 ja      short loc_4072AF
.text:0040726B                 mov     eax, [esp+13Ch+var_90]
.text:00407272                 cmp     [esp+13Ch+var_88], eax
.text:00407279                 jb      short loc_407284
.text:0040727B                 cmp     [esp+13Ch+var_8C], edx
.text:00407282                 jnb     short loc_4072AF
.text:00407284
.text:00407284 loc_407284:                             ; CODE XREF: sub_4068B0+9C9↑j
.text:00407284                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040728A                 mov     eax, 1
.text:0040728F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407296
.text:00407296 loc_407296:                             ; CODE XREF: sub_4068B0+A4C↓j
.text:00407296                 or      [esp+13Ch+var_78], eax
.text:0040729D                 dec     ebp
.text:0040729E                 cmp     ebp, 0FFFFFFFFh
.text:004072A1                 jnz     short loc_40724F
.text:004072A3                 mov     eax, [esp+13Ch+var_78]
.text:004072AA                 jmp     loc_406BAA
.text:004072AF ; ---------------------------------------------------------------------------
.text:004072AF
.text:004072AF loc_4072AF:                             ; CODE XREF: sub_4068B0+9B9↑j
.text:004072AF                                         ; sub_4068B0+9D2↑j
.text:004072AF                 mov     ecx, [esp+13Ch+var_80]
.text:004072B6                 mov     eax, [esp+13Ch+var_94]
.text:004072BD                 mov     ebx, [esp+13Ch+var_94]
.text:004072C4                 mul     [esp+13Ch+var_84]
.text:004072CB                 imul    ebx, ecx
.text:004072CE                 mov     ecx, edx
.text:004072D0                 mov     [esp+13Ch+var_124], eax
.text:004072D4                 add     ecx, ebx
.text:004072D6                 mov     edx, [esp+13Ch+var_84]
.text:004072DD                 mov     ebx, [esp+13Ch+var_90]
.text:004072E4                 xor     eax, eax
.text:004072E6                 imul    edx, ebx
.text:004072E9                 add     ecx, edx
.text:004072EB                 mov     [esp+13Ch+var_120], ecx
.text:004072EF                 mov     ebx, [esp+13Ch+var_120]
.text:004072F3                 mov     ecx, [esp+13Ch+var_124]
.text:004072F7                 mov     [esi+4], ebx
.text:004072FA                 mov     [esi], ecx
.text:004072FC                 jmp     short loc_407296
.text:004072FE ; ---------------------------------------------------------------------------
.text:004072FE
.text:004072FE loc_4072FE:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:004072FE                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:004072FE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00406A69 cases 84,116
.text:00407302                 mov     eax, ebx
.text:00407304                 xor     ebp, ebp
.text:00407306                 mov     [esp+13Ch+var_B8], ebp
.text:0040730D                 sar     eax, 1Fh
.text:00407310                 mov     edx, [esp+13Ch+var_C4]
.text:00407314                 mov     [esp+13Ch+var_C0], eax
.text:00407318                 lea     esi, [esp+13Ch+var_24]
.text:0040731F                 mov     ebp, 3
.text:00407324                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040732B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040732F                 mov     [esp+13Ch+Radix], edx
.text:00407333                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040733B                 mov     [esp+13Ch+var_130], ebx
.text:0040733F                 call    sub_4090B0
.text:00407344                 mov     [esp+13Ch+var_CC], eax
.text:00407348                 mov     [esp+13Ch+var_C8], edx
.text:0040734C
.text:0040734C loc_40734C:                             ; CODE XREF: sub_4068B0+ADC↓j
.text:0040734C                 mov     ebx, [esi+4]
.text:0040734F                 mov     edx, [esi]
.text:00407351                 cmp     [esp+13Ch+var_C8], ebx
.text:00407355                 mov     [esp+13Ch+var_D0], ebx
.text:00407359                 mov     [esp+13Ch+var_D4], edx
.text:0040735D                 ja      short loc_40739A
.text:0040735F                 mov     eax, [esp+13Ch+var_D0]
.text:00407363                 cmp     [esp+13Ch+var_C8], eax
.text:00407367                 jb      short loc_40736F
.text:00407369                 cmp     [esp+13Ch+var_CC], edx
.text:0040736D                 jnb     short loc_40739A
.text:0040736F
.text:0040736F loc_40736F:                             ; CODE XREF: sub_4068B0+AB7↑j
.text:0040736F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00407375                 mov     eax, 1
.text:0040737A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00407381
.text:00407381 loc_407381:                             ; CODE XREF: sub_4068B0+B25↓j
.text:00407381                 or      [esp+13Ch+var_B8], eax
.text:00407388                 dec     ebp
.text:00407389                 cmp     ebp, 0FFFFFFFFh
.text:0040738C                 jnz     short loc_40734C
.text:0040738E                 mov     eax, [esp+13Ch+var_B8]
.text:00407395                 jmp     loc_406BAA
.text:0040739A ; ---------------------------------------------------------------------------
.text:0040739A
.text:0040739A loc_40739A:                             ; CODE XREF: sub_4068B0+AAD↑j
.text:0040739A                                         ; sub_4068B0+ABD↑j
.text:0040739A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040739E                 mov     eax, [esp+13Ch+var_D4]
.text:004073A2                 mov     ebx, [esp+13Ch+var_D4]
.text:004073A6                 mul     [esp+13Ch+var_C4]
.text:004073AA                 imul    ebx, ecx
.text:004073AD                 mov     ecx, edx
.text:004073AF                 mov     [esp+13Ch+var_124], eax
.text:004073B3                 add     ecx, ebx
.text:004073B5                 mov     edx, [esp+13Ch+var_C4]
.text:004073B9                 mov     ebx, [esp+13Ch+var_D0]
.text:004073BD                 xor     eax, eax
.text:004073BF                 imul    edx, ebx
.text:004073C2                 add     ecx, edx
.text:004073C4                 mov     [esp+13Ch+var_120], ecx
.text:004073C8                 mov     ebx, [esp+13Ch+var_120]
.text:004073CC                 mov     ecx, [esp+13Ch+var_124]
.text:004073D0                 mov     [esi+4], ebx
.text:004073D3                 mov     [esi], ecx
.text:004073D5                 jmp     short loc_407381
.text:004073D7 ; ---------------------------------------------------------------------------
.text:004073D7
.text:004073D7 loc_4073D7:                             ; CODE XREF: sub_4068B0+1B9↑j
.text:004073D7                                         ; DATA XREF: sub_4068B0:jpt_406A69↑o
.text:004073D7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00406A69 case 119
.text:004073DF                 lea     ebp, [esp+13Ch+var_24]
.text:004073E6                 mov     [esp+13Ch+var_130], 0
.text:004073EE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004073F5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004073FD                 call    sub_4090B0
.text:00407402                 mov     esi, [esp+13Ch+var_20]
.text:00407409                 mov     ecx, [esp+13Ch+var_24]
.text:00407410                 cmp     edx, esi
.text:00407412                 ja      short loc_407422
.text:00407414                 jb      loc_406BD5
.text:0040741A                 cmp     eax, ecx
.text:0040741C                 jb      loc_406BD5
.text:00407422
.text:00407422 loc_407422:                             ; CODE XREF: sub_4068B0+B62↑j
.text:00407422                 mov     esi, [ebp+0]
.text:00407425                 mov     eax, 2
.text:0040742A                 mov     ecx, [ebp+4]
.text:0040742D                 mul     esi
.text:0040742F                 lea     edx, [edx+ecx*2]
.text:00407432                 jmp     loc_406BA2
.text:00407437 ; ---------------------------------------------------------------------------
.text:00407437
.text:00407437 loc_407437:                             ; CODE XREF: sub_4068B0+196↑j
.text:00407437                                         ; sub_4068B0+1A8↑j
.text:00407437                 mov     esi, 2
.text:0040743C                 mov     ebx, 3E8h
.text:00407441                 mov     [esp+13Ch+var_30], esi
.text:00407448                 jmp     loc_406A5E
.text:0040744D ; ---------------------------------------------------------------------------
.text:0040744D
.text:0040744D loc_40744D:                             ; CODE XREF: sub_4068B0+19F↑j
.text:0040744D                 cmp     eax, 69h ; 'i'
.text:00407450                 jnz     loc_406A5E
.text:00407456                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040745A                 jnz     loc_406A5E
.text:00407460                 mov     eax, 3
.text:00407465                 mov     [esp+13Ch+var_30], eax
.text:0040746C                 jmp     loc_406A5E
.text:00407471 ; ---------------------------------------------------------------------------
.text:00407471
.text:00407471 loc_407471:                             ; CODE XREF: sub_4068B0+187↑j
.text:00407471                 mov     edx, [edi]
.text:00407473                 jmp     loc_406A5E
.text:00407478 ; ---------------------------------------------------------------------------
.text:00407478
.text:00407478 loc_407478:                             ; CODE XREF: sub_4068B0+E2↑j
.text:00407478                 mov     edx, [esp+13Ch+var_24]
.text:0040747F                 mov     ecx, [esp+13Ch+var_20]
.text:00407486                 mov     edi, [esp+13Ch+arg_C]
.text:0040748D                 mov     [edi], edx
.text:0040748F                 mov     [edi+4], ecx
.text:00407492                 jmp     loc_4069BB
.text:00407497 ; ---------------------------------------------------------------------------
.text:00407497
.text:00407497 loc_407497:                             ; CODE XREF: sub_4068B0+D3↑j
.text:00407497                 call    _errno
.text:0040749C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040749F                 jnz     short loc_4074B2
.text:004074A1                 mov     esi, 1
.text:004074A6                 mov     [esp+13Ch+var_28], esi
.text:004074AD                 jmp     loc_406989
.text:004074B2 ; ---------------------------------------------------------------------------
.text:004074B2
.text:004074B2 loc_4074B2:                             ; CODE XREF: sub_4068B0+BEF↑j
.text:004074B2                                         ; sub_4068B0+C15↓j ...
.text:004074B2                 mov     eax, 4
.text:004074B7                 jmp     loc_4069C2
.text:004074BC ; ---------------------------------------------------------------------------
.text:004074BC
.text:004074BC loc_4074BC:                             ; CODE XREF: sub_4068B0+C4↑j
.text:004074BC                 mov     ebx, [esp+13Ch+Str]
.text:004074C3                 test    ebx, ebx
.text:004074C5                 jz      short loc_4074B2
.text:004074C7                 movzx   eax, byte ptr [eax]
.text:004074CA                 test    al, al
.text:004074CC                 jz      short loc_4074B2
.text:004074CE                 mov     esi, [esp+13Ch+Str]
.text:004074D5                 movsx   ebp, al
.text:004074D8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004074DC                 mov     [esp+13Ch+C], esi ; Str
.text:004074DF                 call    strchr
.text:004074E4                 test    eax, eax
.text:004074E6                 jz      short loc_4074B2
.text:004074E8                 mov     ecx, 1
.text:004074ED                 xor     edx, edx
.text:004074EF                 mov     [esp+13Ch+var_24], ecx
.text:004074F6                 mov     [esp+13Ch+var_20], edx
.text:004074FD                 jmp     loc_406989
.text:00407502 ; ---------------------------------------------------------------------------
.text:00407502
.text:00407502 loc_407502:                             ; CODE XREF: sub_4068B0+61↑j
.text:00407502                 mov     eax, ds:_pctype
.text:00407507                 mov     ecx, [eax]
.text:00407509                 movzx   eax, word ptr [ecx+edx*2]
.text:0040750D                 and     eax, 8
.text:00407510                 jmp     loc_406927
.text:00407515 ; ---------------------------------------------------------------------------
.text:00407515
.text:00407515 loc_407515:                             ; CODE XREF: sub_4068B0+33↑j
.text:00407515                 lea     edi, [esp+13Ch+var_18]
.text:0040751C                 jmp     loc_4068E9
.text:00407521 ; ---------------------------------------------------------------------------
.text:00407521
.text:00407521 loc_407521:                             ; CODE XREF: sub_4068B0+24↑j
.text:00407521                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00407529                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00407531                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00407538                 call    _assert
.text:00407538 sub_4068B0      endp
.text:00407538
.text:00407538 ; ---------------------------------------------------------------------------
.text:0040753D                 align 10h
.text:00407540
.text:00407540 ; =============== S U B R O U T I N E =======================================
.text:00407540
.text:00407540
.text:00407540 sub_407540      proc near               ; CODE XREF: sub_4048C0+1B↑p
.text:00407540
.text:00407540 Size            = dword ptr -0Ch
.text:00407540 var_4           = dword ptr -4
.text:00407540 arg_0           = dword ptr  4
.text:00407540 arg_4           = dword ptr  8
.text:00407540
.text:00407540                 sub     esp, 0Ch
.text:00407543                 xor     edx, edx
.text:00407545                 mov     ecx, [esp+0Ch+arg_4]
.text:00407549                 mov     [esp+0Ch+var_4], ebx
.text:0040754D                 mov     eax, 0FFFFFFFFh
.text:00407552                 mov     ebx, [esp+0Ch+arg_0]
.text:00407556                 div     ecx
.text:00407558                 cmp     eax, ebx
.text:0040755A                 jb      short loc_407579
.text:0040755C                 mov     edx, ebx
.text:0040755E                 imul    edx, ecx
.text:00407561                 mov     [esp+0Ch+Size], edx ; Size
.text:00407564                 call    malloc
.text:00407569                 test    eax, eax
.text:0040756B                 jz      short loc_407575
.text:0040756D
.text:0040756D loc_40756D:                             ; CODE XREF: sub_407540+37↓j
.text:0040756D                 mov     ebx, [esp+0Ch+var_4]
.text:00407571                 add     esp, 0Ch
.text:00407574                 retn
.text:00407575 ; ---------------------------------------------------------------------------
.text:00407575
.text:00407575 loc_407575:                             ; CODE XREF: sub_407540+2B↑j
.text:00407575                 test    ebx, ebx
.text:00407577                 jz      short loc_40756D
.text:00407579
.text:00407579 loc_407579:                             ; CODE XREF: sub_407540+1A↑j
.text:00407579                 call    sub_408BD0
.text:00407579 sub_407540      endp
.text:00407579
.text:00407579 ; ---------------------------------------------------------------------------
.text:0040757E                 align 10h
.text:00407580
.text:00407580 ; =============== S U B R O U T I N E =======================================
.text:00407580
.text:00407580
.text:00407580 ; int __cdecl sub_407580(size_t)
.text:00407580 sub_407580      proc near               ; CODE XREF: sub_402390+372↑p
.text:00407580                                         ; sub_402390+B9B↑p ...
.text:00407580
.text:00407580 Size            = dword ptr -0Ch
.text:00407580 var_4           = dword ptr -4
.text:00407580 arg_0           = dword ptr  4
.text:00407580
.text:00407580                 sub     esp, 0Ch
.text:00407583                 mov     [esp+0Ch+var_4], ebx
.text:00407587                 mov     ebx, [esp+0Ch+arg_0]
.text:0040758B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040758E                 call    malloc
.text:00407593                 test    eax, eax
.text:00407595                 jz      short loc_4075A0
.text:00407597
.text:00407597 loc_407597:                             ; CODE XREF: sub_407580+22↓j
.text:00407597                 mov     ebx, [esp+0Ch+var_4]
.text:0040759B                 add     esp, 0Ch
.text:0040759E                 retn
.text:0040759E ; ---------------------------------------------------------------------------
.text:0040759F                 align 10h
.text:004075A0
.text:004075A0 loc_4075A0:                             ; CODE XREF: sub_407580+15↑j
.text:004075A0                 test    ebx, ebx
.text:004075A2                 jz      short loc_407597
.text:004075A4                 call    sub_408BD0
.text:004075A4 sub_407580      endp
.text:004075A4
.text:004075A4 ; ---------------------------------------------------------------------------
.text:004075A9                 align 10h
.text:004075B0                 sub     esp, 1Ch
.text:004075B3                 xor     edx, edx
.text:004075B5                 mov     eax, 0FFFFFFFFh
.text:004075BA                 mov     [esp+14h], ebx
.text:004075BE                 mov     ecx, [esp+20h]
.text:004075C2                 mov     ebx, [esp+28h]
.text:004075C6                 mov     [esp+18h], esi
.text:004075CA                 mov     esi, [esp+24h]
.text:004075CE                 div     ebx
.text:004075D0                 cmp     eax, esi
.text:004075D2                 jb      short loc_407604
.text:004075D4                 mov     [esp], ecx
.text:004075D7                 mov     edx, esi
.text:004075D9                 imul    edx, ebx
.text:004075DC                 mov     [esp+4], edx
.text:004075E0                 call    realloc
.text:004075E5                 test    eax, eax
.text:004075E7                 mov     ecx, eax
.text:004075E9                 jz      short loc_407600
.text:004075EB
.text:004075EB loc_4075EB:                             ; CODE XREF: .text:00407602↓j
.text:004075EB                 mov     ebx, [esp+14h]
.text:004075EF                 mov     eax, ecx
.text:004075F1                 mov     esi, [esp+18h]
.text:004075F5                 add     esp, 1Ch
.text:004075F8                 retn
.text:004075F8 ; ---------------------------------------------------------------------------
.text:004075F9                 align 10h
.text:00407600
.text:00407600 loc_407600:                             ; CODE XREF: .text:004075E9↑j
.text:00407600                 test    esi, esi
.text:00407602                 jz      short loc_4075EB
.text:00407604
.text:00407604 loc_407604:                             ; CODE XREF: .text:004075D2↑j
.text:00407604                 call    sub_408BD0
.text:00407604 ; ---------------------------------------------------------------------------
.text:00407609                 align 10h
.text:00407610
.text:00407610 ; =============== S U B R O U T I N E =======================================
.text:00407610
.text:00407610
.text:00407610 ; int __cdecl sub_407610(void *, size_t)
.text:00407610 sub_407610      proc near               ; CODE XREF: sub_4089E0+5B↓p
.text:00407610
.text:00407610 Block           = dword ptr -0Ch
.text:00407610 Size            = dword ptr -8
.text:00407610 var_4           = dword ptr -4
.text:00407610 arg_0           = dword ptr  4
.text:00407610 arg_4           = dword ptr  8
.text:00407610
.text:00407610                 sub     esp, 0Ch
.text:00407613                 mov     edx, [esp+0Ch+arg_0]
.text:00407617                 mov     [esp+0Ch+var_4], ebx
.text:0040761B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040761F                 mov     [esp+0Ch+Block], edx ; Block
.text:00407622                 mov     [esp+0Ch+Size], ebx ; Size
.text:00407626                 call    realloc
.text:0040762B                 test    eax, eax
.text:0040762D                 jz      short loc_407637
.text:0040762F
.text:0040762F loc_40762F:                             ; CODE XREF: sub_407610+29↓j
.text:0040762F                 mov     ebx, [esp+0Ch+var_4]
.text:00407633                 add     esp, 0Ch
.text:00407636                 retn
.text:00407637 ; ---------------------------------------------------------------------------
.text:00407637
.text:00407637 loc_407637:                             ; CODE XREF: sub_407610+1D↑j
.text:00407637                 test    ebx, ebx
.text:00407639                 jz      short loc_40762F
.text:0040763B                 call    sub_408BD0
.text:0040763B sub_407610      endp
.text:0040763B
.text:00407640 ; ---------------------------------------------------------------------------
.text:00407640                 jmp     sub_407790
.text:00407640 ; ---------------------------------------------------------------------------
.text:00407645                 align 10h
.text:00407650                 sub     esp, 0Ch
.text:00407653                 mov     edx, [esp+14h]
.text:00407657                 mov     dword ptr [esp+8], 1
.text:0040765F                 mov     [esp+4], edx
.text:00407663                 mov     edx, [esp+10h]
.text:00407667                 mov     [esp], edx
.text:0040766A                 call    sub_407790
.text:0040766F                 add     esp, 0Ch
.text:00407672                 retn
.text:00407672 ; ---------------------------------------------------------------------------
.text:00407673                 align 10h
.text:00407680                 sub     esp, 1Ch
.text:00407683                 mov     [esp+18h], ebx
.text:00407687                 mov     ebx, [esp+20h]
.text:0040768B                 mov     [esp], ebx
.text:0040768E                 call    malloc
.text:00407693                 test    eax, eax
.text:00407695                 jz      short loc_4076B3
.text:00407697
.text:00407697 loc_407697:                             ; CODE XREF: .text:004076B5↓j
.text:00407697                 mov     [esp+8], ebx
.text:0040769B                 mov     dword ptr [esp+4], 0
.text:004076A3                 mov     [esp], eax
.text:004076A6                 call    memset
.text:004076AB                 mov     ebx, [esp+18h]
.text:004076AF                 add     esp, 1Ch
.text:004076B2                 retn
.text:004076B3 ; ---------------------------------------------------------------------------
.text:004076B3
.text:004076B3 loc_4076B3:                             ; CODE XREF: .text:00407695↑j
.text:004076B3                 test    ebx, ebx
.text:004076B5                 jz      short loc_407697
.text:004076B7                 call    sub_408BD0
.text:004076B7 ; ---------------------------------------------------------------------------
.text:004076BC                 align 10h
.text:004076C0
.text:004076C0 ; =============== S U B R O U T I N E =======================================
.text:004076C0
.text:004076C0
.text:004076C0 ; int __cdecl sub_4076C0(size_t, size_t)
.text:004076C0 sub_4076C0      proc near               ; CODE XREF: sub_4035F0:loc_403623↑p
.text:004076C0
.text:004076C0 Count           = dword ptr -0Ch
.text:004076C0 Size            = dword ptr -8
.text:004076C0 var_4           = dword ptr -4
.text:004076C0 arg_0           = dword ptr  4
.text:004076C0 arg_4           = dword ptr  8
.text:004076C0
.text:004076C0                 sub     esp, 0Ch
.text:004076C3                 xor     edx, edx
.text:004076C5                 mov     ecx, [esp+0Ch+arg_4]
.text:004076C9                 mov     [esp+0Ch+var_4], ebx
.text:004076CD                 mov     eax, 0FFFFFFFFh
.text:004076D2                 mov     ebx, [esp+0Ch+arg_0]
.text:004076D6                 div     ecx
.text:004076D8                 cmp     eax, ebx
.text:004076DA                 jb      short loc_4076F8
.text:004076DC                 mov     [esp+0Ch+Size], ecx ; Size
.text:004076E0                 mov     [esp+0Ch+Count], ebx ; Count
.text:004076E3                 call    calloc
.text:004076E8                 test    eax, eax
.text:004076EA                 jz      short loc_4076F4
.text:004076EC
.text:004076EC loc_4076EC:                             ; CODE XREF: sub_4076C0+36↓j
.text:004076EC                 mov     ebx, [esp+0Ch+var_4]
.text:004076F0                 add     esp, 0Ch
.text:004076F3                 retn
.text:004076F4 ; ---------------------------------------------------------------------------
.text:004076F4
.text:004076F4 loc_4076F4:                             ; CODE XREF: sub_4076C0+2A↑j
.text:004076F4                 test    ebx, ebx
.text:004076F6                 jz      short loc_4076EC
.text:004076F8
.text:004076F8 loc_4076F8:                             ; CODE XREF: sub_4076C0+1A↑j
.text:004076F8                 call    sub_408BD0
.text:004076F8 sub_4076C0      endp
.text:004076F8
.text:004076F8 ; ---------------------------------------------------------------------------
.text:004076FD                 align 10h
.text:00407700                 sub     esp, 1Ch
.text:00407703                 mov     [esp+18h], ebx
.text:00407707                 mov     ebx, [esp+24h]
.text:0040770B                 mov     [esp], ebx
.text:0040770E                 call    malloc
.text:00407713                 test    eax, eax
.text:00407715                 mov     edx, eax
.text:00407717                 jz      short loc_407735
.text:00407719
.text:00407719 loc_407719:                             ; CODE XREF: .text:00407737↓j
.text:00407719                 mov     [esp+8], ebx
.text:0040771D                 mov     ecx, [esp+20h]
.text:00407721                 mov     [esp], edx
.text:00407724                 mov     [esp+4], ecx
.text:00407728                 call    memcpy
.text:0040772D                 mov     ebx, [esp+18h]
.text:00407731                 add     esp, 1Ch
.text:00407734                 retn
.text:00407735 ; ---------------------------------------------------------------------------
.text:00407735
.text:00407735 loc_407735:                             ; CODE XREF: .text:00407717↑j
.text:00407735                 test    ebx, ebx
.text:00407737                 jz      short loc_407719
.text:00407739                 call    sub_408BD0
.text:00407739 ; ---------------------------------------------------------------------------
.text:0040773E                 align 10h
.text:00407740                 sub     esp, 1Ch
.text:00407743                 mov     [esp+18h], esi
.text:00407747                 mov     esi, [esp+20h]
.text:0040774B                 mov     [esp+14h], ebx
.text:0040774F                 mov     [esp], esi
.text:00407752                 call    strlen
.text:00407757                 lea     ebx, [eax+1]
.text:0040775A                 mov     [esp], ebx
.text:0040775D                 call    malloc
.text:00407762                 test    eax, eax
.text:00407764                 jz      short loc_407782
.text:00407766
.text:00407766 loc_407766:                             ; CODE XREF: .text:00407784↓j
.text:00407766                 mov     [esp+8], ebx
.text:0040776A                 mov     [esp+4], esi
.text:0040776E                 mov     [esp], eax
.text:00407771                 call    memcpy
.text:00407776                 mov     ebx, [esp+14h]
.text:0040777A                 mov     esi, [esp+18h]
.text:0040777E                 add     esp, 1Ch
.text:00407781                 retn
.text:00407782 ; ---------------------------------------------------------------------------
.text:00407782
.text:00407782 loc_407782:                             ; CODE XREF: .text:00407764↑j
.text:00407782                 test    ebx, ebx
.text:00407784                 jz      short loc_407766
.text:00407786                 call    sub_408BD0
.text:00407786 ; ---------------------------------------------------------------------------
.text:0040778B                 align 10h
.text:00407790
.text:00407790 ; =============== S U B R O U T I N E =======================================
.text:00407790
.text:00407790
.text:00407790 ; int __cdecl sub_407790(void *, int, int)
.text:00407790 sub_407790      proc near               ; CODE XREF: .text:00407640↑j
.text:00407790                                         ; .text:0040766A↑p
.text:00407790
.text:00407790 Block           = dword ptr -1Ch
.text:00407790 Size            = dword ptr -18h
.text:00407790 var_C           = dword ptr -0Ch
.text:00407790 var_8           = dword ptr -8
.text:00407790 var_4           = dword ptr -4
.text:00407790 arg_0           = dword ptr  4
.text:00407790 arg_4           = dword ptr  8
.text:00407790 arg_8           = dword ptr  0Ch
.text:00407790
.text:00407790                 sub     esp, 1Ch
.text:00407793                 mov     [esp+1Ch+var_8], esi
.text:00407797                 mov     esi, [esp+1Ch+arg_0]
.text:0040779B                 mov     [esp+1Ch+var_4], edi
.text:0040779F                 mov     edi, [esp+1Ch+arg_4]
.text:004077A3                 test    esi, esi
.text:004077A5                 mov     [esp+1Ch+var_C], ebx
.text:004077A9                 mov     ecx, [edi]
.text:004077AB                 mov     ebx, [esp+1Ch+arg_8]
.text:004077AF                 jz      short loc_4077F0
.text:004077B1                 xor     edx, edx
.text:004077B3                 mov     eax, 7FFFFFFFh
.text:004077B8                 div     ebx
.text:004077BA                 cmp     eax, ecx
.text:004077BC                 jb      short loc_4077E9
.text:004077BE                 add     ecx, ecx
.text:004077C0
.text:004077C0 loc_4077C0:                             ; CODE XREF: sub_407790+62↓j
.text:004077C0                                         ; sub_407790+71↓j ...
.text:004077C0                 mov     [edi], ecx
.text:004077C2                 imul    ebx, ecx
.text:004077C5                 mov     [esp+1Ch+Block], esi ; Block
.text:004077C8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004077CC                 call    realloc
.text:004077D1                 test    eax, eax
.text:004077D3                 jz      short loc_4077E5
.text:004077D5
.text:004077D5 loc_4077D5:                             ; CODE XREF: sub_407790+57↓j
.text:004077D5                 mov     ebx, [esp+1Ch+var_C]
.text:004077D9                 mov     esi, [esp+1Ch+var_8]
.text:004077DD                 mov     edi, [esp+1Ch+var_4]
.text:004077E1                 add     esp, 1Ch
.text:004077E4                 retn
.text:004077E5 ; ---------------------------------------------------------------------------
.text:004077E5
.text:004077E5 loc_4077E5:                             ; CODE XREF: sub_407790+43↑j
.text:004077E5                 test    ebx, ebx
.text:004077E7                 jz      short loc_4077D5
.text:004077E9
.text:004077E9 loc_4077E9:                             ; CODE XREF: sub_407790+2C↑j
.text:004077E9                 call    sub_408BD0
.text:004077E9 ; ---------------------------------------------------------------------------
.text:004077EE                 align 10h
.text:004077F0
.text:004077F0 loc_4077F0:                             ; CODE XREF: sub_407790+1F↑j
.text:004077F0                 test    ecx, ecx
.text:004077F2                 jnz     short loc_4077C0
.text:004077F4                 xor     edx, edx
.text:004077F6                 mov     eax, 40h ; '@'
.text:004077FB                 div     ebx
.text:004077FD                 test    eax, eax
.text:004077FF                 mov     ecx, eax
.text:00407801                 jnz     short loc_4077C0
.text:00407803                 mov     ecx, 1
.text:00407808                 jmp     short loc_4077C0
.text:00407808 sub_407790      endp
.text:00407808
.text:00407808 ; ---------------------------------------------------------------------------
.text:0040780A                 align 10h
.text:00407810 aLiteral        db 'literal',0          ; DATA XREF: .text:00407850↓o
.text:00407818 aShell          db 'shell',0            ; DATA XREF: .text:00407854↓o
.text:0040781E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00407858↓o
.text:0040782B aC              db 'c',0                ; DATA XREF: .text:0040785C↓o
.text:0040782D aEscape         db 'escape',0           ; DATA XREF: .text:00407860↓o
.text:00407834 aLocale         db 'locale',0           ; DATA XREF: .text:00407864↓o
.text:0040783B aClocale        db 'clocale',0          ; DATA XREF: .text:00407868↓o
.text:00407843                 align 10h
.text:00407850                 dd offset aLiteral      ; "literal"
.text:00407854                 dd offset aShell        ; "shell"
.text:00407858                 dd offset aShellAlways  ; "shell-always"
.text:0040785C                 dd offset aC            ; "c"
.text:00407860                 dd offset aEscape       ; "escape"
.text:00407864                 dd offset aLocale       ; "locale"
.text:00407868                 dd offset aClocale      ; "clocale"
.text:0040786C                 dd 2 dup(0)
.text:00407874                 dd 1, 2, 3, 4, 5, 6
.text:0040788C asc_40788C:                             ; DATA XREF: sub_4078A0+7E↓o
.text:0040788C                                         ; sub_4078A0+A39↓o ...
.text:0040788C                 text "UTF-16LE", '"',27h,'`'
.text:00407892                 align 10h
.text:004078A0
.text:004078A0 ; =============== S U B R O U T I N E =======================================
.text:004078A0
.text:004078A0
.text:004078A0 ; int __cdecl sub_4078A0(int, int, char *Str, int, int, int)
.text:004078A0 sub_4078A0      proc near               ; CODE XREF: sub_4078A0+43A↓p
.text:004078A0                                         ; .text:00408463↓p ...
.text:004078A0
.text:004078A0 C               = dword ptr -4Ch
.text:004078A0 Type            = dword ptr -48h
.text:004078A0 SizeInBytes     = dword ptr -44h
.text:004078A0 State           = dword ptr -40h
.text:004078A0 var_3C          = dword ptr -3Ch
.text:004078A0 var_38          = dword ptr -38h
.text:004078A0 var_34          = dword ptr -34h
.text:004078A0 var_30          = dword ptr -30h
.text:004078A0 var_29          = byte ptr -29h
.text:004078A0 var_28          = dword ptr -28h
.text:004078A0 var_22          = byte ptr -22h
.text:004078A0 var_21          = byte ptr -21h
.text:004078A0 var_20          = dword ptr -20h
.text:004078A0 var_1C          = dword ptr -1Ch
.text:004078A0 var_18          = mbstate_t ptr -18h
.text:004078A0 arg_0           = dword ptr  4
.text:004078A0 arg_4           = dword ptr  8
.text:004078A0 Str             = dword ptr  0Ch
.text:004078A0 arg_C           = dword ptr  10h
.text:004078A0 arg_10          = dword ptr  14h
.text:004078A0 arg_14          = dword ptr  18h
.text:004078A0
.text:004078A0                 push    ebp
.text:004078A1                 push    edi
.text:004078A2                 push    esi
.text:004078A3                 push    ebx
.text:004078A4                 sub     esp, 3Ch
.text:004078A7                 mov     edx, ds:__mb_cur_max
.text:004078AD                 mov     [esp+4Ch+var_34], 0
.text:004078B5                 mov     [esp+4Ch+var_1C], 0
.text:004078BD                 cmp     dword ptr [edx], 1
.text:004078C0                 mov     [esp+4Ch+var_20], 0
.text:004078C8                 mov     [esp+4Ch+var_21], 0
.text:004078CD                 setz    [esp+4Ch+var_22]
.text:004078D2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004078D7                 ja      short def_4078DD ; jumptable 004078DD default case, cases 0,1
.text:004078D9                 mov     edx, [esp+4Ch+arg_10]
.text:004078DD                 jmp     ds:jpt_4078DD[edx*4] ; switch jump
.text:004078DD ; ---------------------------------------------------------------------------
.text:004078E4 jpt_4078DD      dd offset def_4078DD    ; DATA XREF: sub_4078A0+3D↑r
.text:004078E4                 dd offset def_4078DD    ; jump table for switch statement
.text:004078E4                 dd offset loc_408225
.text:004078E4                 dd offset loc_407900
.text:004078E4                 dd offset loc_40824B
.text:004078E4                 dd offset loc_408255
.text:004078E4                 dd offset loc_408255
.text:00407900 ; ---------------------------------------------------------------------------
.text:00407900
.text:00407900 loc_407900:                             ; CODE XREF: sub_4078A0+3D↑j
.text:00407900                                         ; DATA XREF: sub_4078A0:jpt_4078DD↑o
.text:00407900                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004078DD case 3
.text:00407904                 cmp     [esp+4Ch+var_34], eax
.text:00407908                 jnb     short loc_407911
.text:0040790A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040790E                 mov     byte ptr [ebx], 22h ; '"'
.text:00407911
.text:00407911 loc_407911:                             ; CODE XREF: sub_4078A0+68↑j
.text:00407911                 mov     [esp+4Ch+var_34], 1
.text:00407919                 mov     [esp+4Ch+var_21], 1
.text:0040791E                 mov     [esp+4Ch+var_1C], offset asc_40788C ; "\"'`"
.text:00407926
.text:00407926 loc_407926:                             ; CODE XREF: sub_4078A0+9A6↓j
.text:00407926                 mov     [esp+4Ch+var_20], 1
.text:0040792E
.text:0040792E def_4078DD:                             ; CODE XREF: sub_4078A0+37↑j
.text:0040792E                                         ; sub_4078A0+3D↑j ...
.text:0040792E                 xor     ebp, ebp        ; jumptable 004078DD default case, cases 0,1
.text:00407930
.text:00407930 loc_407930:                             ; CODE XREF: sub_4078A0+3DB↓j
.text:00407930                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407935                 jz      loc_408217
.text:0040793B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040793F
.text:0040793F loc_40793F:                             ; CODE XREF: sub_4078A0+980↓j
.text:0040793F                 jz      loc_4081AE
.text:00407945                 cmp     [esp+4Ch+var_21], 0
.text:0040794A                 jz      short loc_407990
.text:0040794C                 mov     esi, [esp+4Ch+var_20]
.text:00407950                 test    esi, esi
.text:00407952                 jz      short loc_407990
.text:00407954                 mov     ecx, [esp+4Ch+var_20]
.text:00407958                 lea     edi, [ecx+ebp]
.text:0040795B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040795F                 ja      short loc_407990
.text:00407961                 cld
.text:00407962                 mov     ebx, [esp+4Ch+Str]
.text:00407966                 mov     edi, [esp+4Ch+var_1C]
.text:0040796A                 add     ebx, ebp
.text:0040796C                 mov     esi, ebx
.text:0040796E                 cmp     ecx, ecx
.text:00407970                 repe cmpsb
.text:00407972                 jnz     short loc_407990
.text:00407974                 mov     edx, [esp+4Ch+arg_4]
.text:00407978                 cmp     [esp+4Ch+var_34], edx
.text:0040797C                 jnb     short loc_40798A
.text:0040797E                 mov     ecx, [esp+4Ch+arg_0]
.text:00407982                 mov     eax, [esp+4Ch+var_34]
.text:00407986                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040798A
.text:0040798A loc_40798A:                             ; CODE XREF: sub_4078A0+DC↑j
.text:0040798A                 inc     [esp+4Ch+var_34]
.text:0040798E                 mov     esi, esi
.text:00407990
.text:00407990 loc_407990:                             ; CODE XREF: sub_4078A0+AA↑j
.text:00407990                                         ; sub_4078A0+B2↑j ...
.text:00407990                 mov     edi, [esp+4Ch+Str]
.text:00407994                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00407999                 movzx   eax, bl
.text:0040799C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040799F                 ja      def_4079A5      ; jumptable 004079A5 default case, cases 1-6,14-31,64
.text:004079A5                 jmp     ds:jpt_4079A5[eax*4] ; switch jump
.text:004079A5 ; ---------------------------------------------------------------------------
.text:004079AC jpt_4079A5      dd offset loc_407BA8, offset def_4079A5, offset def_4079A5
.text:004079AC                                         ; DATA XREF: sub_4078A0+105↑r
.text:004079AC                 dd offset def_4079A5, offset def_4079A5, offset def_4079A5 ; jump table for switch statement
.text:004079AC                 dd offset def_4079A5, offset loc_407C80, offset loc_407C9E
.text:004079AC                 dd offset loc_407CA2, offset loc_407CE7, offset loc_407CEB
.text:004079AC                 dd offset loc_407CEF, offset loc_407CF3, offset def_4079A5
.text:004079AC                 dd offset def_4079A5, offset def_4079A5, offset def_4079A5
.text:004079AC                 dd offset def_4079A5, offset def_4079A5, offset def_4079A5
.text:004079AC                 dd offset def_4079A5, offset def_4079A5, offset def_4079A5
.text:004079AC                 dd offset def_4079A5, offset def_4079A5, offset def_4079A5
.text:004079AC                 dd offset def_4079A5, offset def_4079A5, offset def_4079A5
.text:004079AC                 dd offset def_4079A5, offset def_4079A5, offset loc_408178
.text:004079AC                 dd offset loc_408178, offset loc_408178, offset loc_40819A
.text:004079AC                 dd offset loc_408178, offset def_407DA2, offset loc_408178
.text:004079AC                 dd offset loc_407CF7, offset loc_408178, offset loc_408178
.text:004079AC                 dd offset loc_408178, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset loc_408178
.text:004079AC                 dd offset loc_408178, offset loc_408178, offset loc_408178
.text:004079AC                 dd offset loc_407D5C, offset def_4079A5, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset loc_408178, offset loc_408171
.text:004079AC                 dd offset def_407DA2, offset loc_408178, offset def_407DA2
.text:004079AC                 dd offset loc_408178, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset def_407DA2, offset def_407DA2, offset def_407DA2
.text:004079AC                 dd offset loc_408188, offset loc_408178, offset loc_408188
.text:004079AC                 dd offset loc_40819A
.text:00407BA8 ; ---------------------------------------------------------------------------
.text:00407BA8
.text:00407BA8 loc_407BA8:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407BA8                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407BA8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004079A5 case 0
.text:00407BAD                 lea     eax, [ebp+1]
.text:00407BB0                 jz      loc_407C60
.text:00407BB6                 mov     esi, [esp+4Ch+arg_4]
.text:00407BBA                 cmp     [esp+4Ch+var_34], esi
.text:00407BBE                 jnb     short loc_407BCC
.text:00407BC0                 mov     eax, [esp+4Ch+arg_0]
.text:00407BC4                 mov     ebx, [esp+4Ch+var_34]
.text:00407BC8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00407BCC
.text:00407BCC loc_407BCC:                             ; CODE XREF: sub_4078A0+31E↑j
.text:00407BCC                 inc     [esp+4Ch+var_34]
.text:00407BD0                 mov     edx, [esp+4Ch+arg_4]
.text:00407BD4                 cmp     [esp+4Ch+var_34], edx
.text:00407BD8                 jnb     short loc_407BE6
.text:00407BDA                 mov     edi, [esp+4Ch+arg_0]
.text:00407BDE                 mov     ecx, [esp+4Ch+var_34]
.text:00407BE2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00407BE6
.text:00407BE6 loc_407BE6:                             ; CODE XREF: sub_4078A0+338↑j
.text:00407BE6                 inc     [esp+4Ch+var_34]
.text:00407BEA                 mov     esi, [esp+4Ch+arg_4]
.text:00407BEE                 cmp     [esp+4Ch+var_34], esi
.text:00407BF2                 jnb     short loc_407C00
.text:00407BF4                 mov     ebx, [esp+4Ch+arg_0]
.text:00407BF8                 mov     eax, [esp+4Ch+var_34]
.text:00407BFC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00407C00
.text:00407C00 loc_407C00:                             ; CODE XREF: sub_4078A0+352↑j
.text:00407C00                 inc     [esp+4Ch+var_34]
.text:00407C04                 mov     bl, 30h ; '0'
.text:00407C06                 lea     esi, [esi+0]
.text:00407C09                 lea     edi, [edi+0]
.text:00407C10
.text:00407C10 def_407DA2:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407C10                                         ; sub_4078A0+463↓j ...
.text:00407C10                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407C10                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407C15                 lea     eax, [ebp+1]
.text:00407C18                 jz      short loc_407C60
.text:00407C1A                 mov     cl, bl
.text:00407C1C                 mov     edi, [esp+4Ch+arg_14]
.text:00407C20                 mov     esi, 1
.text:00407C25                 shr     cl, 5
.text:00407C28                 movzx   edx, cl
.text:00407C2B                 mov     ecx, ebx
.text:00407C2D                 and     ecx, 1Fh
.text:00407C30                 shl     esi, cl
.text:00407C32                 test    [edi+edx*4+4], esi
.text:00407C36                 jz      short loc_407C52
.text:00407C38
.text:00407C38 loc_407C38:                             ; CODE XREF: sub_4078A0+3FC↓j
.text:00407C38                 mov     edx, [esp+4Ch+arg_4]
.text:00407C3C                 cmp     [esp+4Ch+var_34], edx
.text:00407C40                 jnb     short loc_407C4E
.text:00407C42                 mov     edi, [esp+4Ch+arg_0]
.text:00407C46                 mov     esi, [esp+4Ch+var_34]
.text:00407C4A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00407C4E
.text:00407C4E loc_407C4E:                             ; CODE XREF: sub_4078A0+3A0↑j
.text:00407C4E                 inc     [esp+4Ch+var_34]
.text:00407C52
.text:00407C52 loc_407C52:                             ; CODE XREF: sub_4078A0+396↑j
.text:00407C52                 lea     eax, [ebp+1]
.text:00407C55                 lea     esi, [esi+0]
.text:00407C59                 lea     edi, [edi+0]
.text:00407C60
.text:00407C60 loc_407C60:                             ; CODE XREF: sub_4078A0+310↑j
.text:00407C60                                         ; sub_4078A0+378↑j ...
.text:00407C60                 mov     ebp, [esp+4Ch+arg_4]
.text:00407C64                 cmp     [esp+4Ch+var_34], ebp
.text:00407C68                 jnb     short loc_407C75
.text:00407C6A                 mov     edx, [esp+4Ch+arg_0]
.text:00407C6E                 mov     ecx, [esp+4Ch+var_34]
.text:00407C72                 mov     [ecx+edx], bl
.text:00407C75
.text:00407C75 loc_407C75:                             ; CODE XREF: sub_4078A0+3C8↑j
.text:00407C75                 inc     [esp+4Ch+var_34]
.text:00407C79                 mov     ebp, eax
.text:00407C7B                 jmp     loc_407930
.text:00407C80 ; ---------------------------------------------------------------------------
.text:00407C80
.text:00407C80 loc_407C80:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407C80                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407C80                 mov     dl, 61h ; 'a'   ; jumptable 004079A5 case 7
.text:00407C82                 lea     esi, [esi+0]
.text:00407C89                 lea     edi, [edi+0]
.text:00407C90
.text:00407C90 loc_407C90:                             ; CODE XREF: sub_4078A0+400↓j
.text:00407C90                                         ; sub_4078A0+409↓j ...
.text:00407C90                 cmp     [esp+4Ch+var_21], 0
.text:00407C95                 lea     eax, [ebp+1]
.text:00407C98                 jz      short loc_407C60
.text:00407C9A                 mov     bl, dl
.text:00407C9C                 jmp     short loc_407C38
.text:00407C9E ; ---------------------------------------------------------------------------
.text:00407C9E
.text:00407C9E loc_407C9E:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407C9E                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407C9E                 mov     dl, 62h ; 'b'   ; jumptable 004079A5 case 8
.text:00407CA0                 jmp     short loc_407C90
.text:00407CA2 ; ---------------------------------------------------------------------------
.text:00407CA2
.text:00407CA2 loc_407CA2:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407CA2                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407CA2                 mov     dl, 74h ; 't'   ; jumptable 004079A5 case 9
.text:00407CA4
.text:00407CA4 loc_407CA4:                             ; CODE XREF: sub_4078A0+449↓j
.text:00407CA4                                         ; sub_4078A0+455↓j ...
.text:00407CA4                 cmp     [esp+4Ch+arg_10], 1
.text:00407CA9                 jnz     short loc_407C90
.text:00407CAB
.text:00407CAB loc_407CAB:                             ; CODE XREF: sub_4078A0+45C↓j
.text:00407CAB                                         ; sub_4078A0+4C1↓j ...
.text:00407CAB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00408072 cases 91,92,94,96,124
.text:00407CB3                 mov     eax, [esp+4Ch+arg_14]
.text:00407CB7                 mov     edx, [esp+4Ch+arg_C]
.text:00407CBB                 mov     ecx, [esp+4Ch+Str]
.text:00407CBF                 mov     ebx, [esp+4Ch+arg_4]
.text:00407CC3                 mov     [esp+4Ch+var_38], eax ; int
.text:00407CC7                 mov     ebp, [esp+4Ch+arg_0]
.text:00407CCB                 mov     [esp+4Ch+State], edx ; int
.text:00407CCF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00407CD3                 mov     [esp+4Ch+Type], ebx ; int
.text:00407CD7                 mov     [esp+4Ch+C], ebp ; int
.text:00407CDA                 call    sub_4078A0
.text:00407CDF
.text:00407CDF loc_407CDF:                             ; CODE XREF: sub_4078A0+972↓j
.text:00407CDF                 add     esp, 3Ch
.text:00407CE2                 pop     ebx
.text:00407CE3                 pop     esi
.text:00407CE4                 pop     edi
.text:00407CE5                 pop     ebp
.text:00407CE6                 retn
.text:00407CE7 ; ---------------------------------------------------------------------------
.text:00407CE7
.text:00407CE7 loc_407CE7:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407CE7                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407CE7                 mov     dl, 6Eh ; 'n'   ; jumptable 004079A5 case 10
.text:00407CE9                 jmp     short loc_407CA4
.text:00407CEB ; ---------------------------------------------------------------------------
.text:00407CEB
.text:00407CEB loc_407CEB:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407CEB                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407CEB                 mov     dl, 76h ; 'v'   ; jumptable 004079A5 case 11
.text:00407CED                 jmp     short loc_407C90
.text:00407CEF ; ---------------------------------------------------------------------------
.text:00407CEF
.text:00407CEF loc_407CEF:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407CEF                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407CEF                 mov     dl, 66h ; 'f'   ; jumptable 004079A5 case 12
.text:00407CF1                 jmp     short loc_407C90
.text:00407CF3 ; ---------------------------------------------------------------------------
.text:00407CF3
.text:00407CF3 loc_407CF3:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407CF3                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407CF3                 mov     dl, 72h ; 'r'   ; jumptable 004079A5 case 13
.text:00407CF5                 jmp     short loc_407CA4
.text:00407CF7 ; ---------------------------------------------------------------------------
.text:00407CF7
.text:00407CF7 loc_407CF7:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407CF7                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407CF7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004079A5 case 39
.text:00407CFC                 jz      short loc_407CAB ; jumptable 00408072 cases 91,92,94,96,124
.text:00407CFE                 cmp     [esp+4Ch+arg_10], 2
.text:00407D03                 jnz     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407D03                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407D09                 mov     edx, [esp+4Ch+arg_4]
.text:00407D0D                 cmp     [esp+4Ch+var_34], edx
.text:00407D11                 jnb     short loc_407D1F
.text:00407D13                 mov     ecx, [esp+4Ch+arg_0]
.text:00407D17                 mov     edi, [esp+4Ch+var_34]
.text:00407D1B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00407D1F
.text:00407D1F loc_407D1F:                             ; CODE XREF: sub_4078A0+471↑j
.text:00407D1F                 inc     [esp+4Ch+var_34]
.text:00407D23                 mov     eax, [esp+4Ch+arg_4]
.text:00407D27                 cmp     [esp+4Ch+var_34], eax
.text:00407D2B                 jnb     short loc_407D39
.text:00407D2D                 mov     esi, [esp+4Ch+arg_0]
.text:00407D31                 mov     edx, [esp+4Ch+var_34]
.text:00407D35                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00407D39
.text:00407D39 loc_407D39:                             ; CODE XREF: sub_4078A0+48B↑j
.text:00407D39                 inc     [esp+4Ch+var_34]
.text:00407D3D                 mov     edi, [esp+4Ch+arg_4]
.text:00407D41                 cmp     [esp+4Ch+var_34], edi
.text:00407D45                 jnb     short loc_407D53
.text:00407D47                 mov     ecx, [esp+4Ch+arg_0]
.text:00407D4B                 mov     eax, [esp+4Ch+var_34]
.text:00407D4F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00407D53
.text:00407D53 loc_407D53:                             ; CODE XREF: sub_4078A0+4A5↑j
.text:00407D53                                         ; sub_4078A0+5C4↓j ...
.text:00407D53                 inc     [esp+4Ch+var_34]
.text:00407D57                 jmp     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407D57                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407D5C ; ---------------------------------------------------------------------------
.text:00407D5C
.text:00407D5C loc_407D5C:                             ; CODE XREF: sub_4078A0+105↑j
.text:00407D5C                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00407D5C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004079A5 case 63
.text:00407D61                 jz      loc_407CAB      ; jumptable 00408072 cases 91,92,94,96,124
.text:00407D67                 cmp     [esp+4Ch+arg_10], 3
.text:00407D6C                 jnz     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407D6C                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407D72                 lea     edx, [ebp+2]
.text:00407D75                 cmp     edx, [esp+4Ch+arg_C]
.text:00407D79                 jnb     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407D79                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407D7F                 mov     esi, [esp+4Ch+Str]
.text:00407D83                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00407D88                 jnz     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407D88                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407D8E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00407D93                 movsx   eax, cl
.text:00407D96                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00407D99                 cmp     eax, 1Dh
.text:00407D9C                 ja      def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407D9C                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407DA2                 jmp     ds:jpt_407DA2[eax*4] ; switch jump
.text:00407DA2 ; ---------------------------------------------------------------------------
.text:00407DA9                 align 4
.text:00407DAC jpt_407DA2      dd offset loc_407E24    ; DATA XREF: sub_4078A0+502↑r
.text:00407DAC                 dd offset def_407DA2    ; jump table for switch statement
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset loc_407E24
.text:00407DAC                 dd offset loc_407E24
.text:00407DAC                 dd offset loc_407E24
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset loc_407E24
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset loc_407E24
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset def_407DA2
.text:00407DAC                 dd offset loc_407E24
.text:00407DAC                 dd offset loc_407E24
.text:00407DAC                 dd offset loc_407E24
.text:00407E24 ; ---------------------------------------------------------------------------
.text:00407E24
.text:00407E24 loc_407E24:                             ; CODE XREF: sub_4078A0+502↑j
.text:00407E24                                         ; DATA XREF: sub_4078A0:jpt_407DA2↑o
.text:00407E24                 mov     ebp, edx        ; jumptable 00407DA2 cases 33,39-41,45,47,60-62
.text:00407E26                 mov     bl, cl
.text:00407E28                 mov     edx, [esp+4Ch+arg_4]
.text:00407E2C                 cmp     [esp+4Ch+var_34], edx
.text:00407E30                 jnb     short loc_407E3E
.text:00407E32                 mov     ecx, [esp+4Ch+arg_0]
.text:00407E36                 mov     edi, [esp+4Ch+var_34]
.text:00407E3A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00407E3E
.text:00407E3E loc_407E3E:                             ; CODE XREF: sub_4078A0+590↑j
.text:00407E3E                 inc     [esp+4Ch+var_34]
.text:00407E42                 mov     eax, [esp+4Ch+arg_4]
.text:00407E46                 cmp     [esp+4Ch+var_34], eax
.text:00407E4A                 jnb     short loc_407E58
.text:00407E4C                 mov     edx, [esp+4Ch+arg_0]
.text:00407E50                 mov     esi, [esp+4Ch+var_34]
.text:00407E54                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00407E58
.text:00407E58 loc_407E58:                             ; CODE XREF: sub_4078A0+5AA↑j
.text:00407E58                 inc     [esp+4Ch+var_34]
.text:00407E5C                 mov     edi, [esp+4Ch+arg_4]
.text:00407E60                 cmp     [esp+4Ch+var_34], edi
.text:00407E64                 jnb     loc_407D53
.text:00407E6A                 mov     eax, [esp+4Ch+arg_0]
.text:00407E6E                 mov     ecx, [esp+4Ch+var_34]
.text:00407E72                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00407E76                 jmp     loc_407D53
.text:00407E76 ; ---------------------------------------------------------------------------
.text:00407E7B                 align 10h
.text:00407E80
.text:00407E80 def_4079A5:                             ; CODE XREF: sub_4078A0+FF↑j
.text:00407E80                                         ; sub_4078A0+105↑j
.text:00407E80                                         ; DATA XREF: ...
.text:00407E80                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004079A5 default case, cases 1-6,14-31,64
.text:00407E85                 jz      loc_407FB0
.text:00407E8B                 mov     [esp+4Ch+var_28], 1
.text:00407E93                 mov     esi, ds:__mb_cur_max
.text:00407E99                 movzx   edx, bl
.text:00407E9C                 cmp     dword ptr [esi], 1
.text:00407E9F                 jz      loc_407F94
.text:00407EA5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407EAD                 mov     [esp+4Ch+C], edx ; C
.text:00407EB0                 call    _isctype
.text:00407EB5
.text:00407EB5 loc_407EB5:                             ; CODE XREF: sub_4078A0+705↓j
.text:00407EB5                 test    eax, eax
.text:00407EB7                 setnz   [esp+4Ch+var_29]
.text:00407EBC
.text:00407EBC loc_407EBC:                             ; CODE XREF: sub_4078A0+7A5↓j
.text:00407EBC                 cmp     [esp+4Ch+var_21], 0
.text:00407EC1                 lea     eax, [ebp+1]
.text:00407EC4                 jz      loc_407C60
.text:00407ECA                 cmp     [esp+4Ch+var_29], 0
.text:00407ECF                 jnz     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00407ECF                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00407ED5
.text:00407ED5 loc_407ED5:                             ; CODE XREF: sub_4078A0+7AB↓j
.text:00407ED5                 mov     eax, [esp+4Ch+var_28]
.text:00407ED9                 lea     edx, [eax+ebp]
.text:00407EDC                 lea     esi, [esi+0]
.text:00407EE0
.text:00407EE0 loc_407EE0:                             ; CODE XREF: sub_4078A0+6EF↓j
.text:00407EE0                 cmp     [esp+4Ch+var_21], 0
.text:00407EE5                 jz      short loc_407F60
.text:00407EE7                 cmp     [esp+4Ch+var_29], 0
.text:00407EEC                 jnz     short loc_407F60
.text:00407EEE                 mov     edi, [esp+4Ch+arg_4]
.text:00407EF2                 cmp     [esp+4Ch+var_34], edi
.text:00407EF6                 jnb     short loc_407F04
.text:00407EF8                 mov     esi, [esp+4Ch+arg_0]
.text:00407EFC                 mov     eax, [esp+4Ch+var_34]
.text:00407F00                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00407F04
.text:00407F04 loc_407F04:                             ; CODE XREF: sub_4078A0+656↑j
.text:00407F04                 inc     [esp+4Ch+var_34]
.text:00407F08                 mov     ecx, [esp+4Ch+arg_4]
.text:00407F0C                 cmp     [esp+4Ch+var_34], ecx
.text:00407F10                 jnb     short loc_407F25
.text:00407F12                 mov     cl, bl
.text:00407F14                 mov     esi, [esp+4Ch+arg_0]
.text:00407F18                 mov     edi, [esp+4Ch+var_34]
.text:00407F1C                 shr     cl, 6
.text:00407F1F                 add     cl, 30h ; '0'
.text:00407F22                 mov     [edi+esi], cl
.text:00407F25
.text:00407F25 loc_407F25:                             ; CODE XREF: sub_4078A0+670↑j
.text:00407F25                 inc     [esp+4Ch+var_34]
.text:00407F29                 mov     edi, [esp+4Ch+arg_4]
.text:00407F2D                 cmp     [esp+4Ch+var_34], edi
.text:00407F31                 jnb     short loc_407F49
.text:00407F33                 mov     cl, bl
.text:00407F35                 mov     esi, [esp+4Ch+arg_0]
.text:00407F39                 shr     cl, 3
.text:00407F3C                 mov     edi, [esp+4Ch+var_34]
.text:00407F40                 and     cl, 7
.text:00407F43                 add     cl, 30h ; '0'
.text:00407F46                 mov     [edi+esi], cl
.text:00407F49
.text:00407F49 loc_407F49:                             ; CODE XREF: sub_4078A0+691↑j
.text:00407F49                 inc     [esp+4Ch+var_34]
.text:00407F4D                 and     bl, 7
.text:00407F50                 add     bl, 30h ; '0'
.text:00407F53                 lea     esi, [esi+0]
.text:00407F59                 lea     edi, [edi+0]
.text:00407F60
.text:00407F60 loc_407F60:                             ; CODE XREF: sub_4078A0+645↑j
.text:00407F60                                         ; sub_4078A0+64C↑j
.text:00407F60                 lea     eax, [ebp+1]
.text:00407F63                 cmp     edx, eax
.text:00407F65                 jbe     loc_407C60
.text:00407F6B                 mov     ebp, [esp+4Ch+arg_4]
.text:00407F6F                 cmp     [esp+4Ch+var_34], ebp
.text:00407F73                 jnb     short loc_407F80
.text:00407F75                 mov     ecx, [esp+4Ch+arg_0]
.text:00407F79                 mov     edi, [esp+4Ch+var_34]
.text:00407F7D                 mov     [edi+ecx], bl
.text:00407F80
.text:00407F80 loc_407F80:                             ; CODE XREF: sub_4078A0+6D3↑j
.text:00407F80                 inc     [esp+4Ch+var_34]
.text:00407F84                 mov     ebp, eax
.text:00407F86                 mov     eax, [esp+4Ch+Str]
.text:00407F8A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00407F8F                 jmp     loc_407EE0
.text:00407F94 ; ---------------------------------------------------------------------------
.text:00407F94
.text:00407F94 loc_407F94:                             ; CODE XREF: sub_4078A0+5FF↑j
.text:00407F94                 mov     ecx, ds:_pctype
.text:00407F9A                 mov     edi, [ecx]
.text:00407F9C                 movzx   eax, word ptr [edi+edx*2]
.text:00407FA0                 and     eax, 157h
.text:00407FA5                 jmp     loc_407EB5
.text:00407FA5 ; ---------------------------------------------------------------------------
.text:00407FAA                 align 10h
.text:00407FB0
.text:00407FB0 loc_407FB0:                             ; CODE XREF: sub_4078A0+5E5↑j
.text:00407FB0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407FB5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00407FBD                 mov     [esp+4Ch+var_28], 0
.text:00407FC5                 mov     [esp+4Ch+var_29], 1
.text:00407FCA                 jz      loc_40815C
.text:00407FD0
.text:00407FD0 loc_407FD0:                             ; CODE XREF: sub_4078A0+8CC↓j
.text:00407FD0                 mov     ecx, [esp+4Ch+arg_C]
.text:00407FD4                 lea     edx, [esp+4Ch+var_18]
.text:00407FD8                 mov     edi, [esp+4Ch+Str]
.text:00407FDC                 mov     [esp+4Ch+State], edx ; State
.text:00407FE0                 lea     esi, [esp+4Ch+var_18._State]
.text:00407FE4                 sub     ecx, ebp
.text:00407FE6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00407FEA                 add     edi, ebp
.text:00407FEC                 mov     [esp+4Ch+var_30], edi
.text:00407FF0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00407FF4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00407FF7                 call    mbrtowc
.text:00407FFC                 test    eax, eax
.text:00407FFE                 mov     edi, eax
.text:00408000                 jz      short loc_408040
.text:00408002                 cmp     eax, 0FFFFFFFFh
.text:00408005                 jz      loc_408152
.text:0040800B                 cmp     eax, 0FFFFFFFEh
.text:0040800E                 jz      loc_408112
.text:00408014                 cmp     [esp+4Ch+arg_10], 1
.text:00408019                 jz      short loc_408050
.text:0040801B
.text:0040801B loc_40801B:                             ; CODE XREF: sub_4078A0+7B9↓j
.text:0040801B                                         ; sub_4078A0+86D↓j
.text:0040801B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00408020                 mov     [esp+4Ch+Type], 157h ; Type
.text:00408028                 mov     [esp+4Ch+C], ecx ; C
.text:0040802B                 call    iswctype
.text:00408030                 test    eax, eax
.text:00408032                 jnz     short loc_408039
.text:00408034                 mov     [esp+4Ch+var_29], 0
.text:00408039
.text:00408039 loc_408039:                             ; CODE XREF: sub_4078A0+792↑j
.text:00408039                 mov     [esp+4Ch+var_28], edi
.text:0040803D                 lea     esi, [esi+0]
.text:00408040
.text:00408040 loc_408040:                             ; CODE XREF: sub_4078A0+760↑j
.text:00408040                                         ; sub_4078A0+87B↓j ...
.text:00408040                 cmp     [esp+4Ch+var_28], 1
.text:00408045                 jbe     loc_407EBC
.text:0040804B                 jmp     loc_407ED5
.text:00408050 ; ---------------------------------------------------------------------------
.text:00408050
.text:00408050 loc_408050:                             ; CODE XREF: sub_4078A0+779↑j
.text:00408050                 cmp     [esp+4Ch+arg_10], eax
.text:00408054                 mov     edx, 1
.text:00408059                 jnb     short loc_40801B
.text:0040805B
.text:0040805B loc_40805B:                             ; CODE XREF: sub_4078A0+867↓j
.text:0040805B                 mov     ecx, [esp+4Ch+Str]
.text:0040805F                 lea     esi, [edx+ebp]
.text:00408062                 movsx   eax, byte ptr [esi+ecx]
.text:00408066                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00408069                 cmp     eax, 21h
.text:0040806C                 ja      def_408072      ; jumptable 00408072 default case, cases 93,95,97-123
.text:00408072                 jmp     ds:jpt_408072[eax*4] ; switch jump
.text:00408072 ; ---------------------------------------------------------------------------
.text:00408079                 align 4
.text:0040807C jpt_408072      dd offset loc_407CAB    ; DATA XREF: sub_4078A0+7D2↑r
.text:0040807C                 dd offset loc_407CAB    ; jump table for switch statement
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset loc_407CAB
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset loc_407CAB
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset def_408072
.text:0040807C                 dd offset loc_407CAB
.text:00408104 ; ---------------------------------------------------------------------------
.text:00408104
.text:00408104 def_408072:                             ; CODE XREF: sub_4078A0+7CC↑j
.text:00408104                                         ; sub_4078A0+7D2↑j
.text:00408104                                         ; DATA XREF: ...
.text:00408104                 inc     edx             ; jumptable 00408072 default case, cases 93,95,97-123
.text:00408105                 cmp     edx, edi
.text:00408107                 jb      loc_40805B
.text:0040810D                 jmp     loc_40801B
.text:00408112 ; ---------------------------------------------------------------------------
.text:00408112
.text:00408112 loc_408112:                             ; CODE XREF: sub_4078A0+76E↑j
.text:00408112                 cmp     ebp, [esp+4Ch+arg_C]
.text:00408116                 mov     [esp+4Ch+var_29], 0
.text:0040811B                 jnb     loc_408040
.text:00408121                 mov     eax, [esp+4Ch+var_30]
.text:00408125                 cmp     byte ptr [eax], 0
.text:00408128                 jz      loc_408040
.text:0040812E
.text:0040812E loc_40812E:                             ; CODE XREF: sub_4078A0+8AB↓j
.text:0040812E                 inc     [esp+4Ch+var_28]
.text:00408132                 mov     esi, [esp+4Ch+var_28]
.text:00408136                 lea     eax, [esi+ebp]
.text:00408139                 cmp     eax, [esp+4Ch+arg_C]
.text:0040813D                 jnb     loc_408040
.text:00408143                 mov     edi, [esp+4Ch+Str]
.text:00408147                 cmp     byte ptr [eax+edi], 0
.text:0040814B                 jnz     short loc_40812E
.text:0040814D                 jmp     loc_408040
.text:00408152 ; ---------------------------------------------------------------------------
.text:00408152
.text:00408152 loc_408152:                             ; CODE XREF: sub_4078A0+765↑j
.text:00408152                 mov     [esp+4Ch+var_29], 0
.text:00408157                 jmp     loc_408040
.text:0040815C ; ---------------------------------------------------------------------------
.text:0040815C
.text:0040815C loc_40815C:                             ; CODE XREF: sub_4078A0+72A↑j
.text:0040815C                 mov     edx, [esp+4Ch+Str]
.text:00408160                 mov     [esp+4Ch+C], edx ; Str
.text:00408163                 call    strlen
.text:00408168                 mov     [esp+4Ch+arg_C], eax
.text:0040816C                 jmp     loc_407FD0
.text:00408171 ; ---------------------------------------------------------------------------
.text:00408171
.text:00408171 loc_408171:                             ; CODE XREF: sub_4078A0+105↑j
.text:00408171                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00408171                 mov     dl, bl          ; jumptable 004079A5 case 92
.text:00408173                 jmp     loc_407CA4
.text:00408178 ; ---------------------------------------------------------------------------
.text:00408178
.text:00408178 loc_408178:                             ; CODE XREF: sub_4078A0+105↑j
.text:00408178                                         ; sub_4078A0+902↓j
.text:00408178                                         ; DATA XREF: ...
.text:00408178                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004079A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040817D                 jnz     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:0040817D                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:00408183                 jmp     loc_407CAB      ; jumptable 00408072 cases 91,92,94,96,124
.text:00408188 ; ---------------------------------------------------------------------------
.text:00408188
.text:00408188 loc_408188:                             ; CODE XREF: sub_4078A0+105↑j
.text:00408188                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:00408188                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004079A5 cases 123,125
.text:0040818D                 jz      short loc_4081A4
.text:0040818F                 cmp     [esp+4Ch+arg_C], 1
.text:00408194
.text:00408194 loc_408194:                             ; CODE XREF: sub_4078A0+90C↓j
.text:00408194                 jnz     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:00408194                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:0040819A
.text:0040819A loc_40819A:                             ; CODE XREF: sub_4078A0+105↑j
.text:0040819A                                         ; DATA XREF: sub_4078A0:jpt_4079A5↑o
.text:0040819A                 test    ebp, ebp        ; jumptable 004079A5 cases 35,126
.text:0040819C                 jnz     def_407DA2      ; jumptable 004079A5 cases 37,43-58,65-90,93,95,97-122
.text:0040819C                                         ; jumptable 00407DA2 default case, cases 34-38,42-44,46,48-59
.text:004081A2                 jmp     short loc_408178 ; jumptable 004079A5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004081A4 ; ---------------------------------------------------------------------------
.text:004081A4
.text:004081A4 loc_4081A4:                             ; CODE XREF: sub_4078A0+8ED↑j
.text:004081A4                 mov     esi, [esp+4Ch+Str]
.text:004081A8                 cmp     byte ptr [esi+1], 0
.text:004081AC                 jmp     short loc_408194
.text:004081AE ; ---------------------------------------------------------------------------
.text:004081AE
.text:004081AE loc_4081AE:                             ; CODE XREF: sub_4078A0:loc_40793F↑j
.text:004081AE                 test    ebp, ebp
.text:004081B0                 jnz     short loc_4081BD
.text:004081B2                 cmp     [esp+4Ch+arg_10], 1
.text:004081B7                 jz      loc_407CAB      ; jumptable 00408072 cases 91,92,94,96,124
.text:004081BD
.text:004081BD loc_4081BD:                             ; CODE XREF: sub_4078A0+910↑j
.text:004081BD                 mov     esi, [esp+4Ch+var_1C]
.text:004081C1                 test    esi, esi
.text:004081C3                 jz      short loc_4081F8
.text:004081C5                 mov     edi, [esp+4Ch+var_1C]
.text:004081C9                 movzx   eax, byte ptr [edi]
.text:004081CC                 test    al, al
.text:004081CE                 jz      short loc_4081F8
.text:004081D0
.text:004081D0 loc_4081D0:                             ; CODE XREF: sub_4078A0+956↓j
.text:004081D0                 mov     ebp, [esp+4Ch+arg_4]
.text:004081D4                 cmp     [esp+4Ch+var_34], ebp
.text:004081D8                 jnb     short loc_4081E5
.text:004081DA                 mov     ecx, [esp+4Ch+arg_0]
.text:004081DE                 mov     ebx, [esp+4Ch+var_34]
.text:004081E2                 mov     [ebx+ecx], al
.text:004081E5
.text:004081E5 loc_4081E5:                             ; CODE XREF: sub_4078A0+938↑j
.text:004081E5                 inc     [esp+4Ch+var_1C]
.text:004081E9                 inc     [esp+4Ch+var_34]
.text:004081ED                 mov     edx, [esp+4Ch+var_1C]
.text:004081F1                 movzx   eax, byte ptr [edx]
.text:004081F4                 test    al, al
.text:004081F6                 jnz     short loc_4081D0
.text:004081F8
.text:004081F8 loc_4081F8:                             ; CODE XREF: sub_4078A0+923↑j
.text:004081F8                                         ; sub_4078A0+92E↑j
.text:004081F8                 mov     eax, [esp+4Ch+arg_4]
.text:004081FC                 cmp     [esp+4Ch+var_34], eax
.text:00408200                 jnb     short loc_40820E
.text:00408202                 mov     edi, [esp+4Ch+arg_0]
.text:00408206                 mov     esi, [esp+4Ch+var_34]
.text:0040820A                 mov     byte ptr [esi+edi], 0
.text:0040820E
.text:0040820E loc_40820E:                             ; CODE XREF: sub_4078A0+960↑j
.text:0040820E                 mov     eax, [esp+4Ch+var_34]
.text:00408212                 jmp     loc_407CDF
.text:00408217 ; ---------------------------------------------------------------------------
.text:00408217
.text:00408217 loc_408217:                             ; CODE XREF: sub_4078A0+95↑j
.text:00408217                 mov     ebx, [esp+4Ch+Str]
.text:0040821B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00408220                 jmp     loc_40793F
.text:00408225 ; ---------------------------------------------------------------------------
.text:00408225
.text:00408225 loc_408225:                             ; CODE XREF: sub_4078A0+3D↑j
.text:00408225                                         ; DATA XREF: sub_4078A0:jpt_4078DD↑o
.text:00408225                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004078DD case 2
.text:00408229                 cmp     [esp+4Ch+var_34], edx
.text:0040822D                 jnb     short loc_408236
.text:0040822F                 mov     ecx, [esp+4Ch+arg_0]
.text:00408233                 mov     byte ptr [ecx], 27h ; '''
.text:00408236
.text:00408236 loc_408236:                             ; CODE XREF: sub_4078A0+98D↑j
.text:00408236                 mov     [esp+4Ch+var_34], 1
.text:0040823E                 mov     [esp+4Ch+var_1C], 40788Eh
.text:00408246                 jmp     loc_407926
.text:0040824B ; ---------------------------------------------------------------------------
.text:0040824B
.text:0040824B loc_40824B:                             ; CODE XREF: sub_4078A0+3D↑j
.text:0040824B                                         ; DATA XREF: sub_4078A0:jpt_4078DD↑o
.text:0040824B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004078DD case 4
.text:00408250                 jmp     def_4078DD      ; jumptable 004078DD default case, cases 0,1
.text:00408255 ; ---------------------------------------------------------------------------
.text:00408255
.text:00408255 loc_408255:                             ; CODE XREF: sub_4078A0+3D↑j
.text:00408255                                         ; DATA XREF: sub_4078A0:jpt_4078DD↑o
.text:00408255                 mov     [esp+4Ch+C], 407890h ; jumptable 004078DD cases 5,6
.text:0040825C                 call    ds:libintl_gettext
.text:00408262                 cmp     eax, 407890h
.text:00408267                 mov     edi, eax
.text:00408269                 jz      short loc_4082E0
.text:0040826B
.text:0040826B loc_40826B:                             ; CODE XREF: sub_4078A0+A45↓j
.text:0040826B                                         ; sub_4078A0+A4C↓j
.text:0040826B                 mov     [esp+4Ch+C], 40788Eh
.text:00408272                 call    ds:libintl_gettext
.text:00408278                 cmp     eax, 40788Eh
.text:0040827D                 mov     edx, eax
.text:0040827F                 jz      short loc_4082D2
.text:00408281
.text:00408281 loc_408281:                             ; CODE XREF: sub_4078A0+A37↓j
.text:00408281                                         ; sub_4078A0+A3E↓j
.text:00408281                 mov     [esp+4Ch+var_1C], edi
.text:00408285                 cmp     byte ptr [edi], 0
.text:00408288                 jz      short loc_4082B8
.text:0040828A
.text:0040828A loc_40828A:                             ; CODE XREF: sub_4078A0+A16↓j
.text:0040828A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040828E                 cmp     [esp+4Ch+var_34], ecx
.text:00408292                 jnb     short loc_4082A7
.text:00408294                 mov     ebp, [esp+4Ch+var_1C]
.text:00408298                 mov     edi, [esp+4Ch+arg_0]
.text:0040829C                 mov     esi, [esp+4Ch+var_34]
.text:004082A0                 movzx   ebx, byte ptr [ebp+0]
.text:004082A4                 mov     [esi+edi], bl
.text:004082A7
.text:004082A7 loc_4082A7:                             ; CODE XREF: sub_4078A0+9F2↑j
.text:004082A7                 inc     [esp+4Ch+var_1C]
.text:004082AB                 inc     [esp+4Ch+var_34]
.text:004082AF                 mov     eax, [esp+4Ch+var_1C]
.text:004082B3                 cmp     byte ptr [eax], 0
.text:004082B6                 jnz     short loc_40828A
.text:004082B8
.text:004082B8 loc_4082B8:                             ; CODE XREF: sub_4078A0+9E8↑j
.text:004082B8                 mov     [esp+4Ch+var_21], 1
.text:004082BD                 mov     [esp+4Ch+var_1C], edx
.text:004082C1                 mov     [esp+4Ch+C], edx ; Str
.text:004082C4                 call    strlen
.text:004082C9                 mov     [esp+4Ch+var_20], eax
.text:004082CD                 jmp     def_4078DD      ; jumptable 004078DD default case, cases 0,1
.text:004082D2 ; ---------------------------------------------------------------------------
.text:004082D2
.text:004082D2 loc_4082D2:                             ; CODE XREF: sub_4078A0+9DF↑j
.text:004082D2                 cmp     [esp+4Ch+arg_10], 6
.text:004082D7                 jnz     short loc_408281
.text:004082D9                 mov     edx, offset asc_40788C ; "\"'`"
.text:004082DE                 jmp     short loc_408281
.text:004082E0 ; ---------------------------------------------------------------------------
.text:004082E0
.text:004082E0 loc_4082E0:                             ; CODE XREF: sub_4078A0+9C9↑j
.text:004082E0                 cmp     [esp+4Ch+arg_10], 6
.text:004082E5                 jnz     short loc_40826B
.text:004082E7                 mov     edi, offset asc_40788C ; "\"'`"
.text:004082EC                 jmp     loc_40826B
.text:004082EC sub_4078A0      endp
.text:004082EC
.text:004082F1 ; ---------------------------------------------------------------------------
.text:004082F1                 jmp     short loc_408300
.text:004082F1 ; ---------------------------------------------------------------------------
.text:004082F3                 align 10h
.text:00408300
.text:00408300 loc_408300:                             ; CODE XREF: .text:004082F1↑j
.text:00408300                 sub     esp, 0Ch
.text:00408303                 mov     [esp+4], ebx
.text:00408307                 mov     [esp+8], esi
.text:0040830B                 call    _errno
.text:00408310                 mov     esi, [eax]
.text:00408312                 mov     dword ptr [esp], 24h ; '$'
.text:00408319                 call    sub_407580
.text:0040831E                 mov     edx, [esp+10h]
.text:00408322                 mov     ebx, eax
.text:00408324                 test    edx, edx
.text:00408326                 jz      short loc_408371
.text:00408328
.text:00408328 loc_408328:                             ; CODE XREF: .text:00408376↓j
.text:00408328                 mov     ecx, [edx]
.text:0040832A                 mov     [ebx], ecx
.text:0040832C                 mov     ecx, [edx+4]
.text:0040832F                 mov     [ebx+4], ecx
.text:00408332                 mov     ecx, [edx+8]
.text:00408335                 mov     [ebx+8], ecx
.text:00408338                 mov     ecx, [edx+0Ch]
.text:0040833B                 mov     [ebx+0Ch], ecx
.text:0040833E                 mov     ecx, [edx+10h]
.text:00408341                 mov     [ebx+10h], ecx
.text:00408344                 mov     ecx, [edx+14h]
.text:00408347                 mov     [ebx+14h], ecx
.text:0040834A                 mov     ecx, [edx+18h]
.text:0040834D                 mov     [ebx+18h], ecx
.text:00408350                 mov     ecx, [edx+1Ch]
.text:00408353                 mov     [ebx+1Ch], ecx
.text:00408356                 mov     ecx, [edx+20h]
.text:00408359                 mov     [ebx+20h], ecx
.text:0040835C                 call    _errno
.text:00408361                 mov     [eax], esi
.text:00408363                 mov     esi, [esp+8]
.text:00408367                 mov     eax, ebx
.text:00408369                 mov     ebx, [esp+4]
.text:0040836D                 add     esp, 0Ch
.text:00408370                 retn
.text:00408371 ; ---------------------------------------------------------------------------
.text:00408371
.text:00408371 loc_408371:                             ; CODE XREF: .text:00408326↑j
.text:00408371                 mov     edx, offset dword_40B690
.text:00408376                 jmp     short loc_408328
.text:00408376 ; ---------------------------------------------------------------------------
.text:00408378                 align 10h
.text:00408380                 mov     eax, [esp+4]
.text:00408384                 test    eax, eax
.text:00408386                 jz      short loc_408390
.text:00408388
.text:00408388 loc_408388:                             ; CODE XREF: .text:00408395↓j
.text:00408388                 mov     eax, [eax]
.text:0040838A                 retn
.text:0040838A ; ---------------------------------------------------------------------------
.text:0040838B                 align 10h
.text:00408390
.text:00408390 loc_408390:                             ; CODE XREF: .text:00408386↑j
.text:00408390                 mov     eax, offset dword_40B690
.text:00408395                 jmp     short loc_408388
.text:00408395 ; ---------------------------------------------------------------------------
.text:00408397                 align 10h
.text:004083A0                 mov     edx, [esp+4]
.text:004083A4                 test    edx, edx
.text:004083A6                 jz      short loc_4083B0
.text:004083A8
.text:004083A8 loc_4083A8:                             ; CODE XREF: .text:004083B5↓j
.text:004083A8                 mov     ecx, [esp+8]
.text:004083AC                 mov     [edx], ecx
.text:004083AE                 retn
.text:004083AE ; ---------------------------------------------------------------------------
.text:004083AF                 align 10h
.text:004083B0
.text:004083B0 loc_4083B0:                             ; CODE XREF: .text:004083A6↑j
.text:004083B0                 mov     edx, offset dword_40B690
.text:004083B5                 jmp     short loc_4083A8
.text:004083B5 ; ---------------------------------------------------------------------------
.text:004083B7                 align 10h
.text:004083C0                 sub     esp, 8
.text:004083C3                 mov     eax, [esp+0Ch]
.text:004083C7                 movzx   ecx, byte ptr [esp+10h]
.text:004083CC                 mov     [esp], ebx
.text:004083CF                 mov     ebx, [esp+14h]
.text:004083D3                 mov     [esp+4], esi
.text:004083D7                 mov     dl, cl
.text:004083D9                 shr     dl, 5
.text:004083DC                 movzx   edx, dl
.text:004083DF                 shl     edx, 2
.text:004083E2                 test    eax, eax
.text:004083E4                 lea     esi, [edx+eax+4]
.text:004083E8                 jz      short loc_408410
.text:004083EA
.text:004083EA loc_4083EA:                             ; CODE XREF: .text:00408416↓j
.text:004083EA                 mov     edx, [esi]
.text:004083EC                 and     ecx, 1Fh
.text:004083EF                 and     ebx, 1
.text:004083F2                 mov     eax, edx
.text:004083F4                 shr     eax, cl
.text:004083F6                 and     eax, 1
.text:004083F9                 xor     ebx, eax
.text:004083FB                 shl     ebx, cl
.text:004083FD                 xor     edx, ebx
.text:004083FF                 mov     [esi], edx
.text:00408401                 mov     ebx, [esp]
.text:00408404                 mov     esi, [esp+4]
.text:00408408                 add     esp, 8
.text:0040840B                 retn
.text:0040840B ; ---------------------------------------------------------------------------
.text:0040840C                 align 10h
.text:00408410
.text:00408410 loc_408410:                             ; CODE XREF: .text:004083E8↑j
.text:00408410                 lea     esi, dword_40B694[edx]
.text:00408416                 jmp     short loc_4083EA
.text:00408416 ; ---------------------------------------------------------------------------
.text:00408418                 align 10h
.text:00408420                 sub     esp, 2Ch
.text:00408423                 mov     [esp+24h], ebx
.text:00408427                 mov     ebx, [esp+40h]
.text:0040842B                 mov     [esp+28h], esi
.text:0040842F                 test    ebx, ebx
.text:00408431                 jz      short loc_408480
.text:00408433
.text:00408433 loc_408433:                             ; CODE XREF: .text:00408485↓j
.text:00408433                 call    _errno
.text:00408438                 mov     esi, [eax]
.text:0040843A                 mov     [esp+14h], ebx
.text:0040843E                 mov     edx, [ebx]
.text:00408440                 mov     ecx, [esp+38h]
.text:00408444                 mov     ebx, [esp+3Ch]
.text:00408448                 mov     [esp+10h], edx
.text:0040844C                 mov     edx, [esp+34h]
.text:00408450                 mov     [esp+0Ch], ebx
.text:00408454                 mov     [esp+8], ecx
.text:00408458                 mov     [esp+4], edx
.text:0040845C                 mov     edx, [esp+30h]
.text:00408460                 mov     [esp], edx
.text:00408463                 call    sub_4078A0
.text:00408468                 mov     ebx, eax
.text:0040846A                 call    _errno
.text:0040846F                 mov     [eax], esi
.text:00408471                 mov     esi, [esp+28h]
.text:00408475                 mov     eax, ebx
.text:00408477                 mov     ebx, [esp+24h]
.text:0040847B                 add     esp, 2Ch
.text:0040847E                 retn
.text:0040847E ; ---------------------------------------------------------------------------
.text:0040847F                 align 10h
.text:00408480
.text:00408480 loc_408480:                             ; CODE XREF: .text:00408431↑j
.text:00408480                 mov     ebx, offset dword_40B690
.text:00408485                 jmp     short loc_408433
.text:00408485 ; ---------------------------------------------------------------------------
.text:00408487                 align 10h
.text:00408490                 push    ebp
.text:00408491                 push    edi
.text:00408492                 push    esi
.text:00408493                 push    ebx
.text:00408494                 sub     esp, 2Ch
.text:00408497                 mov     ebp, [esp+48h]
.text:0040849B                 call    _errno
.text:004084A0                 mov     edx, [eax]
.text:004084A2                 test    ebp, ebp
.text:004084A4                 mov     ebx, ebp
.text:004084A6                 mov     [esp+28h], edx
.text:004084AA                 jz      loc_408560
.text:004084B0
.text:004084B0 loc_4084B0:                             ; CODE XREF: .text:00408565↓j
.text:004084B0                 call    _errno
.text:004084B5                 mov     edi, [eax]
.text:004084B7                 mov     esi, ebp
.text:004084B9                 mov     [esp+14h], ebx
.text:004084BD                 mov     ecx, [ebx]
.text:004084BF                 mov     dword ptr [esp], 0
.text:004084C6                 mov     edx, [esp+44h]
.text:004084CA                 mov     dword ptr [esp+4], 0
.text:004084D2                 mov     eax, [esp+40h]
.text:004084D6                 mov     [esp+10h], ecx
.text:004084DA                 mov     [esp+0Ch], edx
.text:004084DE                 mov     [esp+8], eax
.text:004084E2                 call    sub_4078A0
.text:004084E7                 mov     ebx, eax
.text:004084E9                 call    _errno
.text:004084EE                 mov     [eax], edi
.text:004084F0                 lea     edi, [ebx+1]
.text:004084F3                 mov     [esp], edi
.text:004084F6                 call    sub_407580
.text:004084FB                 mov     [esp+24h], eax
.text:004084FF                 test    ebp, ebp
.text:00408501                 jz      short loc_408552
.text:00408503
.text:00408503 loc_408503:                             ; CODE XREF: .text:00408557↓j
.text:00408503                 call    _errno
.text:00408508                 mov     ebp, [eax]
.text:0040850A                 mov     [esp+14h], esi
.text:0040850E                 mov     ecx, [esi]
.text:00408510                 mov     [esp+4], edi
.text:00408514                 mov     edx, [esp+44h]
.text:00408518                 mov     esi, [esp+24h]
.text:0040851C                 mov     [esp+10h], ecx
.text:00408520                 mov     eax, [esp+40h]
.text:00408524                 mov     [esp+0Ch], edx
.text:00408528                 mov     [esp], esi
.text:0040852B                 mov     [esp+8], eax
.text:0040852F                 call    sub_4078A0
.text:00408534                 call    _errno
.text:00408539                 mov     [eax], ebp
.text:0040853B                 call    _errno
.text:00408540                 mov     ebx, [esp+28h]
.text:00408544                 mov     [eax], ebx
.text:00408546                 mov     eax, [esp+24h]
.text:0040854A                 add     esp, 2Ch
.text:0040854D                 pop     ebx
.text:0040854E                 pop     esi
.text:0040854F                 pop     edi
.text:00408550                 pop     ebp
.text:00408551                 retn
.text:00408552 ; ---------------------------------------------------------------------------
.text:00408552
.text:00408552 loc_408552:                             ; CODE XREF: .text:00408501↑j
.text:00408552                 mov     esi, offset dword_40B690
.text:00408557                 jmp     short loc_408503
.text:00408557 ; ---------------------------------------------------------------------------
.text:00408559                 align 10h
.text:00408560
.text:00408560 loc_408560:                             ; CODE XREF: .text:004084AA↑j
.text:00408560                 mov     ebx, offset dword_40B690
.text:00408565                 jmp     loc_4084B0
.text:00408565 ; ---------------------------------------------------------------------------
.text:0040856A                 align 10h
.text:00408570                 sub     esp, 1Ch
.text:00408573                 mov     edx, [esp+24h]
.text:00408577                 mov     dword ptr [esp+0Ch], offset dword_40B690
.text:0040857F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408587                 mov     [esp+4], edx
.text:0040858B                 mov     edx, [esp+20h]
.text:0040858F                 mov     [esp], edx
.text:00408592                 call    sub_4089E0
.text:00408597                 add     esp, 1Ch
.text:0040859A                 retn
.text:0040859A ; ---------------------------------------------------------------------------
.text:0040859B                 align 10h
.text:004085A0                 sub     esp, 1Ch
.text:004085A3                 mov     edx, [esp+20h]
.text:004085A7                 mov     dword ptr [esp+0Ch], offset dword_40B690
.text:004085AF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004085B7                 mov     [esp+4], edx
.text:004085BB                 mov     dword ptr [esp], 0
.text:004085C2                 call    sub_4089E0
.text:004085C7                 add     esp, 1Ch
.text:004085CA                 retn
.text:004085CA ; ---------------------------------------------------------------------------
.text:004085CB                 align 10h
.text:004085D0
.text:004085D0 ; =============== S U B R O U T I N E =======================================
.text:004085D0
.text:004085D0
.text:004085D0 ; int __cdecl sub_4085D0(int, int, char *)
.text:004085D0 sub_4085D0      proc near               ; CODE XREF: .text:0040603A↑p
.text:004085D0                                         ; sub_406050+1A↑p
.text:004085D0
.text:004085D0 var_BC          = dword ptr -0BCh
.text:004085D0 var_B8          = dword ptr -0B8h
.text:004085D0 var_B4          = dword ptr -0B4h
.text:004085D0 var_B0          = dword ptr -0B0h
.text:004085D0 var_AC          = dword ptr -0ACh
.text:004085D0 var_A8          = dword ptr -0A8h
.text:004085D0 var_A4          = dword ptr -0A4h
.text:004085D0 var_A0          = dword ptr -0A0h
.text:004085D0 var_9C          = dword ptr -9Ch
.text:004085D0 var_98          = dword ptr -98h
.text:004085D0 var_94          = dword ptr -94h
.text:004085D0 var_90          = dword ptr -90h
.text:004085D0 var_8C          = dword ptr -8Ch
.text:004085D0 var_7C          = dword ptr -7Ch
.text:004085D0 var_78          = dword ptr -78h
.text:004085D0 var_74          = dword ptr -74h
.text:004085D0 var_70          = dword ptr -70h
.text:004085D0 var_6C          = dword ptr -6Ch
.text:004085D0 var_68          = dword ptr -68h
.text:004085D0 var_64          = dword ptr -64h
.text:004085D0 var_60          = dword ptr -60h
.text:004085D0 var_5C          = dword ptr -5Ch
.text:004085D0 var_4C          = dword ptr -4Ch
.text:004085D0 var_48          = dword ptr -48h
.text:004085D0 var_44          = dword ptr -44h
.text:004085D0 var_40          = dword ptr -40h
.text:004085D0 var_3C          = dword ptr -3Ch
.text:004085D0 var_38          = dword ptr -38h
.text:004085D0 var_34          = dword ptr -34h
.text:004085D0 var_30          = dword ptr -30h
.text:004085D0 var_2C          = dword ptr -2Ch
.text:004085D0 arg_0           = dword ptr  4
.text:004085D0 arg_4           = dword ptr  8
.text:004085D0 arg_8           = dword ptr  0Ch
.text:004085D0
.text:004085D0                 push    ebp
.text:004085D1                 xor     eax, eax
.text:004085D3                 mov     ecx, 8
.text:004085D8                 push    edi
.text:004085D9                 push    esi
.text:004085DA                 push    ebx
.text:004085DB                 sub     esp, 0ACh
.text:004085E1                 mov     ebp, [esp+0BCh+arg_4]
.text:004085E8                 cld
.text:004085E9                 lea     edi, [esp+0BCh+var_A8]
.text:004085ED                 mov     [esp+0BCh+var_AC], ebp
.text:004085F1                 rep stosd
.text:004085F3                 mov     eax, [esp+0BCh+var_8C]
.text:004085F7                 mov     edi, [esp+0BCh+var_AC]
.text:004085FB                 mov     esi, [esp+0BCh+var_A8]
.text:004085FF                 mov     [esp+0BCh+var_5C], eax
.text:00408603                 mov     ebp, [esp+0BCh+var_A4]
.text:00408607                 mov     eax, [esp+0BCh+var_AC]
.text:0040860B                 mov     [esp+0BCh+var_7C], edi
.text:0040860F                 mov     ecx, [esp+0BCh+var_94]
.text:00408613                 mov     edi, [esp+0BCh+var_A0]
.text:00408617                 mov     [esp+0BCh+var_78], esi
.text:0040861B                 mov     edx, [esp+0BCh+var_90]
.text:0040861F                 mov     esi, [esp+0BCh+var_9C]
.text:00408623                 mov     [esp+0BCh+var_4C], eax
.text:00408627                 mov     ebx, [esp+0BCh+var_98]
.text:0040862B                 mov     eax, [esp+0BCh+var_A8]
.text:0040862F                 mov     [esp+0BCh+var_74], ebp
.text:00408633                 mov     [esp+0BCh+var_70], edi
.text:00408637                 mov     [esp+0BCh+var_6C], esi
.text:0040863B                 mov     [esp+0BCh+var_68], ebx
.text:0040863F                 mov     [esp+0BCh+var_64], ecx
.text:00408643                 mov     [esp+0BCh+var_60], edx
.text:00408647                 mov     [esp+0BCh+var_48], eax
.text:0040864B                 mov     [esp+0BCh+var_44], ebp
.text:0040864F                 mov     [esp+0BCh+var_40], edi
.text:00408653                 mov     [esp+0BCh+var_3C], esi
.text:0040865A                 mov     [esp+0BCh+var_38], ebx
.text:00408661                 mov     ebx, [esp+0BCh+var_8C]
.text:00408665                 mov     [esp+0BCh+var_30], edx
.text:0040866C                 mov     edx, [esp+0BCh+arg_8]
.text:00408673                 mov     [esp+0BCh+var_34], ecx
.text:0040867A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040867E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00408682                 mov     edx, [esp+0BCh+arg_0]
.text:00408689                 mov     [esp+0BCh+var_2C], ebx
.text:00408690                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00408694                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040869C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040869F                 call    sub_4089E0
.text:004086A4                 add     esp, 0ACh
.text:004086AA                 pop     ebx
.text:004086AB                 pop     esi
.text:004086AC                 pop     edi
.text:004086AD                 pop     ebp
.text:004086AE                 retn
.text:004086AE sub_4085D0      endp
.text:004086AE
.text:004086AE ; ---------------------------------------------------------------------------
.text:004086AF                 align 10h
.text:004086B0                 push    ebp
.text:004086B1                 xor     eax, eax
.text:004086B3                 mov     ecx, 8
.text:004086B8                 push    edi
.text:004086B9                 push    esi
.text:004086BA                 push    ebx
.text:004086BB                 sub     esp, 0ACh
.text:004086C1                 mov     edx, [esp+0C4h]
.text:004086C8                 cld
.text:004086C9                 lea     edi, [esp+14h]
.text:004086CD                 mov     [esp+10h], edx
.text:004086D1                 rep stosd
.text:004086D3                 mov     eax, [esp+30h]
.text:004086D7                 mov     ebp, [esp+10h]
.text:004086DB                 mov     edi, [esp+14h]
.text:004086DF                 mov     [esp+60h], eax
.text:004086E3                 mov     esi, [esp+20h]
.text:004086E7                 mov     eax, [esp+10h]
.text:004086EB                 mov     [esp+40h], ebp
.text:004086EF                 mov     ecx, [esp+28h]
.text:004086F3                 mov     ebp, [esp+18h]
.text:004086F7                 mov     [esp+44h], edi
.text:004086FB                 mov     edx, [esp+2Ch]
.text:004086FF                 mov     edi, [esp+1Ch]
.text:00408703                 mov     [esp+70h], eax
.text:00408707                 mov     ebx, [esp+24h]
.text:0040870B                 mov     eax, [esp+14h]
.text:0040870F                 mov     [esp+48h], ebp
.text:00408713                 mov     [esp+4Ch], edi
.text:00408717                 mov     [esp+50h], esi
.text:0040871B                 mov     [esp+54h], ebx
.text:0040871F                 mov     [esp+58h], ecx
.text:00408723                 mov     [esp+5Ch], edx
.text:00408727                 mov     [esp+74h], eax
.text:0040872B                 mov     [esp+78h], ebp
.text:0040872F                 mov     [esp+7Ch], edi
.text:00408733                 mov     [esp+80h], esi
.text:0040873A                 mov     [esp+84h], ebx
.text:00408741                 mov     esi, [esp+30h]
.text:00408745                 lea     ebx, [esp+70h]
.text:00408749                 mov     [esp+8Ch], edx
.text:00408750                 mov     edx, [esp+0C8h]
.text:00408757                 mov     [esp+88h], ecx
.text:0040875E                 mov     ecx, [esp+0CCh]
.text:00408765                 mov     [esp+4], edx
.text:00408769                 mov     edx, [esp+0C0h]
.text:00408770                 mov     [esp+90h], esi
.text:00408777                 mov     [esp+0Ch], ebx
.text:0040877B                 mov     [esp+8], ecx
.text:0040877F                 mov     [esp], edx
.text:00408782                 call    sub_4089E0
.text:00408787                 add     esp, 0ACh
.text:0040878D                 pop     ebx
.text:0040878E                 pop     esi
.text:0040878F                 pop     edi
.text:00408790                 pop     ebp
.text:00408791                 retn
.text:00408791 ; ---------------------------------------------------------------------------
.text:00408792                 align 10h
.text:004087A0                 push    ebp
.text:004087A1                 xor     eax, eax
.text:004087A3                 mov     ecx, 8
.text:004087A8                 push    edi
.text:004087A9                 push    esi
.text:004087AA                 push    ebx
.text:004087AB                 sub     esp, 0ACh
.text:004087B1                 mov     edi, [esp+0C0h]
.text:004087B8                 cld
.text:004087B9                 mov     [esp+10h], edi
.text:004087BD                 lea     edi, [esp+14h]
.text:004087C1                 rep stosd
.text:004087C3                 mov     eax, [esp+30h]
.text:004087C7                 mov     esi, [esp+10h]
.text:004087CB                 mov     ebx, [esp+14h]
.text:004087CF                 mov     [esp+60h], eax
.text:004087D3                 mov     ebp, [esp+18h]
.text:004087D7                 mov     eax, [esp+10h]
.text:004087DB                 mov     [esp+40h], esi
.text:004087DF                 mov     edi, [esp+1Ch]
.text:004087E3                 mov     esi, [esp+20h]
.text:004087E7                 mov     [esp+44h], ebx
.text:004087EB                 mov     ecx, [esp+28h]
.text:004087EF                 mov     edx, [esp+2Ch]
.text:004087F3                 mov     [esp+70h], eax
.text:004087F7                 mov     ebx, [esp+24h]
.text:004087FB                 mov     eax, [esp+14h]
.text:004087FF                 mov     [esp+48h], ebp
.text:00408803                 mov     [esp+4Ch], edi
.text:00408807                 mov     [esp+50h], esi
.text:0040880B                 mov     [esp+54h], ebx
.text:0040880F                 mov     [esp+58h], ecx
.text:00408813                 mov     [esp+5Ch], edx
.text:00408817                 mov     [esp+74h], eax
.text:0040881B                 mov     [esp+78h], ebp
.text:0040881F                 mov     [esp+7Ch], edi
.text:00408823                 mov     [esp+80h], esi
.text:0040882A                 mov     [esp+84h], ebx
.text:00408831                 mov     [esp+8Ch], edx
.text:00408838                 lea     edx, [esp+70h]
.text:0040883C                 mov     [esp+88h], ecx
.text:00408843                 mov     ecx, [esp+30h]
.text:00408847                 mov     [esp+0Ch], edx
.text:0040884B                 mov     edx, [esp+0C4h]
.text:00408852                 mov     [esp+90h], ecx
.text:00408859                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408861                 mov     [esp+4], edx
.text:00408865                 mov     dword ptr [esp], 0
.text:0040886C                 call    sub_4089E0
.text:00408871                 add     esp, 0ACh
.text:00408877                 pop     ebx
.text:00408878                 pop     esi
.text:00408879                 pop     edi
.text:0040887A                 pop     ebp
.text:0040887B                 retn
.text:0040887B ; ---------------------------------------------------------------------------
.text:0040887C                 align 10h
.text:00408880                 push    edi
.text:00408881                 push    esi
.text:00408882                 push    ebx
.text:00408883                 sub     esp, 40h
.text:00408886                 mov     edx, ds:dword_40B69C
.text:0040888C                 mov     ebx, ds:dword_40B690
.text:00408892                 mov     esi, ds:dword_40B698
.text:00408898                 mov     edi, ds:dword_40B694
.text:0040889E                 mov     [esp+1Ch], edx
.text:004088A2                 mov     ecx, ds:dword_40B6A0
.text:004088A8                 mov     edx, ds:dword_40B6B0
.text:004088AE                 mov     [esp+10h], ebx
.text:004088B2                 mov     ebx, ds:dword_40B6A4
.text:004088B8                 mov     [esp+30h], edx
.text:004088BC                 movzx   edx, byte ptr [esp+54h]
.text:004088C1                 mov     [esp+18h], esi
.text:004088C5                 mov     esi, ds:dword_40B6AC
.text:004088CB                 mov     [esp+14h], edi
.text:004088CF                 mov     edi, ds:dword_40B6A8
.text:004088D5                 mov     [esp+20h], ecx
.text:004088D9                 mov     cl, dl
.text:004088DB                 shr     cl, 5
.text:004088DE                 mov     [esp+24h], ebx
.text:004088E2                 movzx   ebx, cl
.text:004088E5                 mov     [esp+2Ch], esi
.text:004088E9                 lea     esi, [esp+10h]
.text:004088ED                 mov     [esp+28h], edi
.text:004088F1                 lea     edi, [esi+ebx*4]
.text:004088F4                 mov     ebx, edx
.text:004088F6                 mov     edx, [edi+4]
.text:004088F9                 and     ebx, 1Fh
.text:004088FC                 mov     cl, bl
.text:004088FE                 mov     eax, edx
.text:00408900                 shr     eax, cl
.text:00408902                 and     eax, 1
.text:00408905                 xor     eax, 1
.text:00408908                 shl     eax, cl
.text:0040890A                 xor     edx, eax
.text:0040890C                 mov     [edi+4], edx
.text:0040890F                 mov     edx, [esp+50h]
.text:00408913                 mov     [esp+0Ch], esi
.text:00408917                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040891F                 mov     [esp+4], edx
.text:00408923                 mov     dword ptr [esp], 0
.text:0040892A                 call    sub_4089E0
.text:0040892F                 add     esp, 40h
.text:00408932                 pop     ebx
.text:00408933                 pop     esi
.text:00408934                 pop     edi
.text:00408935                 retn
.text:00408935 ; ---------------------------------------------------------------------------
.text:00408936                 align 10h
.text:00408940
.text:00408940 ; =============== S U B R O U T I N E =======================================
.text:00408940
.text:00408940
.text:00408940 ; int __cdecl sub_408940(char *)
.text:00408940 sub_408940      proc near               ; CODE XREF: sub_4066F0+64↑p
.text:00408940
.text:00408940 var_4C          = dword ptr -4Ch
.text:00408940 var_48          = dword ptr -48h
.text:00408940 var_44          = dword ptr -44h
.text:00408940 var_40          = dword ptr -40h
.text:00408940 var_3C          = dword ptr -3Ch
.text:00408940 var_38          = dword ptr -38h
.text:00408940 var_34          = dword ptr -34h
.text:00408940 var_30          = dword ptr -30h
.text:00408940 var_2C          = dword ptr -2Ch
.text:00408940 var_28          = dword ptr -28h
.text:00408940 var_24          = dword ptr -24h
.text:00408940 var_20          = dword ptr -20h
.text:00408940 var_1C          = dword ptr -1Ch
.text:00408940 arg_0           = dword ptr  4
.text:00408940
.text:00408940                 sub     esp, 4Ch
.text:00408943                 mov     ecx, ds:dword_40B690
.text:00408949                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00408951                 mov     edx, ds:dword_40B694
.text:00408957                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040895E                 mov     [esp+4Ch+var_3C], ecx
.text:00408962                 mov     ecx, ds:dword_40B69C
.text:00408968                 mov     [esp+4Ch+var_38], edx
.text:0040896C                 mov     edx, ds:dword_40B698
.text:00408972                 mov     [esp+4Ch+var_30], ecx
.text:00408976                 mov     ecx, ds:dword_40B6A0
.text:0040897C                 mov     eax, edx
.text:0040897E                 shr     eax, 1Ah
.text:00408981                 and     eax, 1
.text:00408984                 xor     eax, 1
.text:00408987                 mov     [esp+4Ch+var_2C], ecx
.text:0040898B                 shl     eax, 1Ah
.text:0040898E                 mov     ecx, ds:dword_40B6A4
.text:00408994                 xor     edx, eax
.text:00408996                 mov     [esp+4Ch+var_34], edx
.text:0040899A                 mov     edx, [esp+4Ch+arg_0]
.text:0040899E                 mov     [esp+4Ch+var_28], ecx
.text:004089A2                 mov     ecx, ds:dword_40B6A8
.text:004089A8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004089AC                 mov     [esp+4Ch+var_24], ecx
.text:004089B0                 mov     ecx, ds:dword_40B6AC
.text:004089B6                 mov     [esp+4Ch+var_20], ecx
.text:004089BA                 mov     ecx, ds:dword_40B6B0
.text:004089C0                 mov     [esp+4Ch+var_1C], ecx
.text:004089C4                 lea     ecx, [esp+4Ch+var_3C]
.text:004089C8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004089CC                 call    sub_4089E0
.text:004089D1                 add     esp, 4Ch
.text:004089D4                 retn
.text:004089D4 sub_408940      endp
.text:004089D4
.text:004089D4 ; ---------------------------------------------------------------------------
.text:004089D5                 align 10h
.text:004089E0
.text:004089E0 ; =============== S U B R O U T I N E =======================================
.text:004089E0
.text:004089E0
.text:004089E0 ; int __cdecl sub_4089E0(int, char *, int, int)
.text:004089E0 sub_4089E0      proc near               ; CODE XREF: .text:00408592↑p
.text:004089E0                                         ; .text:004085C2↑p ...
.text:004089E0
.text:004089E0 Block           = dword ptr -2Ch
.text:004089E0 var_28          = dword ptr -28h
.text:004089E0 Str             = dword ptr -24h
.text:004089E0 var_20          = dword ptr -20h
.text:004089E0 var_1C          = dword ptr -1Ch
.text:004089E0 var_18          = dword ptr -18h
.text:004089E0 var_14          = dword ptr -14h
.text:004089E0 arg_0           = dword ptr  4
.text:004089E0 arg_4           = dword ptr  8
.text:004089E0 arg_8           = dword ptr  0Ch
.text:004089E0 arg_C           = dword ptr  10h
.text:004089E0
.text:004089E0                 push    ebp
.text:004089E1                 push    edi
.text:004089E2                 push    esi
.text:004089E3                 push    ebx
.text:004089E4                 sub     esp, 1Ch
.text:004089E7                 call    _errno
.text:004089EC                 mov     edx, [eax]
.text:004089EE                 mov     eax, [esp+2Ch+arg_0]
.text:004089F2                 mov     [esp+2Ch+var_14], edx
.text:004089F6                 test    eax, eax
.text:004089F8                 js      loc_408B9A
.text:004089FE                 mov     eax, [esp+2Ch+arg_0]
.text:00408A02                 cmp     dword_40A030, eax
.text:00408A08                 ja      short loc_408A80
.text:00408A0A                 mov     esi, eax
.text:00408A0C                 inc     esi
.text:00408A0D                 cmp     esi, 1FFFFFFFh
.text:00408A13                 ja      loc_408B9F
.text:00408A19                 mov     ebx, off_40A03C
.text:00408A1F                 cmp     ebx, offset dword_40A034
.text:00408A25                 jz      loc_408B71
.text:00408A2B
.text:00408A2B loc_408A2B:                             ; CODE XREF: sub_4089E0+1B5↓j
.text:00408A2B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00408A2E                 lea     ecx, ds:0[esi*8]
.text:00408A35                 mov     ebp, esi
.text:00408A37                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00408A3B                 call    sub_407610
.text:00408A40                 mov     off_40A03C, eax
.text:00408A45                 mov     ebx, dword_40A030
.text:00408A4B                 sub     ebp, ebx
.text:00408A4D                 lea     edi, [eax+ebx*8]
.text:00408A50                 lea     eax, ds:0[ebp*8]
.text:00408A57                 cmp     eax, 7
.text:00408A5A                 jbe     short loc_408A70
.text:00408A5C                 test    edi, 4
.text:00408A62                 jz      short loc_408A70
.text:00408A64                 mov     dword ptr [edi], 0
.text:00408A6A                 sub     eax, 4
.text:00408A6D                 add     edi, 4
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: sub_4089E0+7A↑j
.text:00408A70                                         ; sub_4089E0+82↑j
.text:00408A70                 cld
.text:00408A71                 mov     ecx, eax
.text:00408A73                 shr     ecx, 2
.text:00408A76                 xor     eax, eax
.text:00408A78                 rep stosd
.text:00408A7A                 mov     dword_40A030, esi
.text:00408A80
.text:00408A80 loc_408A80:                             ; CODE XREF: sub_4089E0+28↑j
.text:00408A80                 mov     esi, off_40A03C
.text:00408A86                 mov     eax, [esp+2Ch+arg_0]
.text:00408A8A                 mov     ebp, [esi+eax*8]
.text:00408A8D                 mov     edi, [esi+eax*8+4]
.text:00408A91                 mov     esi, [esp+2Ch+arg_C]
.text:00408A95                 test    esi, esi
.text:00408A97                 jz      loc_408B67
.text:00408A9D
.text:00408A9D loc_408A9D:                             ; CODE XREF: sub_4089E0+18C↓j
.text:00408A9D                 call    _errno
.text:00408AA2                 mov     ebx, [eax]
.text:00408AA4                 mov     [esp+2Ch+var_18], esi ; int
.text:00408AA8                 mov     ecx, [esi]
.text:00408AAA                 mov     [esp+2Ch+Block], edi ; int
.text:00408AAD                 mov     edx, [esp+2Ch+arg_8]
.text:00408AB1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408AB5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408AB9                 mov     ecx, [esp+2Ch+arg_4]
.text:00408ABD                 mov     [esp+2Ch+var_20], edx ; int
.text:00408AC1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408AC5                 call    sub_4078A0
.text:00408ACA                 mov     esi, eax
.text:00408ACC                 call    _errno
.text:00408AD1                 mov     [eax], ebx
.text:00408AD3                 cmp     ebp, esi
.text:00408AD5                 ja      short loc_408B4B
.text:00408AD7                 lea     ebp, [esi+1]
.text:00408ADA                 mov     ebx, off_40A03C
.text:00408AE0                 cmp     edi, offset unk_40B590
.text:00408AE6                 mov     esi, [esp+2Ch+arg_0]
.text:00408AEA                 mov     [ebx+esi*8], ebp
.text:00408AED                 jz      short loc_408AFD
.text:00408AEF                 mov     [esp+2Ch+Block], edi ; Block
.text:00408AF2                 call    free
.text:00408AF7                 mov     ebx, off_40A03C
.text:00408AFD
.text:00408AFD loc_408AFD:                             ; CODE XREF: sub_4089E0+10D↑j
.text:00408AFD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408B00                 call    sub_407580
.text:00408B05                 mov     esi, [esp+2Ch+arg_C]
.text:00408B09                 mov     edi, eax
.text:00408B0B                 mov     eax, [esp+2Ch+arg_0]
.text:00408B0F                 test    esi, esi
.text:00408B11                 mov     [ebx+eax*8+4], edi
.text:00408B15                 jz      short loc_408B60
.text:00408B17
.text:00408B17 loc_408B17:                             ; CODE XREF: sub_4089E0+185↓j
.text:00408B17                 call    _errno
.text:00408B1C                 mov     ebx, [eax]
.text:00408B1E                 mov     [esp+2Ch+var_18], esi ; int
.text:00408B22                 mov     ecx, [esi]
.text:00408B24                 mov     [esp+2Ch+Block], edi ; int
.text:00408B27                 mov     edx, [esp+2Ch+arg_8]
.text:00408B2B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408B2F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408B33                 mov     ecx, [esp+2Ch+arg_4]
.text:00408B37                 mov     [esp+2Ch+var_20], edx ; int
.text:00408B3B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408B3F                 call    sub_4078A0
.text:00408B44                 call    _errno
.text:00408B49                 mov     [eax], ebx
.text:00408B4B
.text:00408B4B loc_408B4B:                             ; CODE XREF: sub_4089E0+F5↑j
.text:00408B4B                 call    _errno
.text:00408B50                 mov     ebp, [esp+2Ch+var_14]
.text:00408B54                 mov     [eax], ebp
.text:00408B56                 add     esp, 1Ch
.text:00408B59                 mov     eax, edi
.text:00408B5B                 pop     ebx
.text:00408B5C                 pop     esi
.text:00408B5D                 pop     edi
.text:00408B5E                 pop     ebp
.text:00408B5F                 retn
.text:00408B60 ; ---------------------------------------------------------------------------
.text:00408B60
.text:00408B60 loc_408B60:                             ; CODE XREF: sub_4089E0+135↑j
.text:00408B60                 mov     esi, offset dword_40B690
.text:00408B65                 jmp     short loc_408B17
.text:00408B67 ; ---------------------------------------------------------------------------
.text:00408B67
.text:00408B67 loc_408B67:                             ; CODE XREF: sub_4089E0+B7↑j
.text:00408B67                 mov     esi, offset dword_40B690
.text:00408B6C                 jmp     loc_408A9D
.text:00408B71 ; ---------------------------------------------------------------------------
.text:00408B71
.text:00408B71 loc_408B71:                             ; CODE XREF: sub_4089E0+45↑j
.text:00408B71                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00408B78                 call    sub_407580
.text:00408B7D                 mov     off_40A03C, eax
.text:00408B82                 mov     edi, dword_40A034
.text:00408B88                 mov     ebx, eax
.text:00408B8A                 mov     ecx, off_40A038
.text:00408B90                 mov     [eax], edi
.text:00408B92                 mov     [eax+4], ecx
.text:00408B95                 jmp     loc_408A2B
.text:00408B9A ; ---------------------------------------------------------------------------
.text:00408B9A
.text:00408B9A loc_408B9A:                             ; CODE XREF: sub_4089E0+18↑j
.text:00408B9A                 call    abort
.text:00408B9F ; ---------------------------------------------------------------------------
.text:00408B9F
.text:00408B9F loc_408B9F:                             ; CODE XREF: sub_4089E0+33↑j
.text:00408B9F                 call    sub_408BD0
.text:00408B9F sub_4089E0      endp
.text:00408B9F
.text:00408B9F ; ---------------------------------------------------------------------------
.text:00408BA4                 align 10h
.text:00408BB0
.text:00408BB0 loc_408BB0:                             ; DATA XREF: sub_408BD0+3↓o
.text:00408BB0                 insd
.text:00408BB1                 db      65h
.text:00408BB1                 insd
.text:00408BB3                 outsd
.text:00408BB4                 jb      short loc_408C2F
.text:00408BB6                 and     [ebp+78h], ah
.text:00408BB9                 push    74737561h
.text:00408BBE
.text:00408BBE loc_408BBE:                             ; DATA XREF: sub_408BD0+10↓o
.text:00408BBE                 db      65h
.text:00408BBE                 add     fs:0B68D0073h, ah
.text:00408BBE ; ---------------------------------------------------------------------------
.text:00408BC6                 dw 0
.text:00408BC8                 align 10h
.text:00408BD0
.text:00408BD0 ; =============== S U B R O U T I N E =======================================
.text:00408BD0
.text:00408BD0 ; Attributes: noreturn
.text:00408BD0
.text:00408BD0 sub_408BD0      proc near               ; CODE XREF: sub_407540:loc_407579↑p
.text:00408BD0                                         ; sub_407580+24↑p ...
.text:00408BD0
.text:00408BD0 Code            = dword ptr -1Ch
.text:00408BD0 ErrorMessage    = dword ptr -18h
.text:00408BD0 var_14          = dword ptr -14h
.text:00408BD0 var_10          = byte ptr -10h
.text:00408BD0
.text:00408BD0                 sub     esp, 1Ch
.text:00408BD3                 mov     [esp+1Ch+Code], offset loc_408BB0
.text:00408BDA                 call    ds:libintl_gettext
.text:00408BE0                 mov     [esp+1Ch+var_14], (offset loc_408BBE+3) ; char *
.text:00408BE8                 mov     edx, Code
.text:00408BEE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00408BF6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00408BFA                 mov     [esp+1Ch+Code], edx ; Code
.text:00408BFD                 call    sub_408C60
.text:00408C02                 call    abort
.text:00408C02 sub_408BD0      endp
.text:00408C02
.text:00408C02 ; ---------------------------------------------------------------------------
.text:00408C07                 align 10h
.text:00408C10
.text:00408C10 ; =============== S U B R O U T I N E =======================================
.text:00408C10
.text:00408C10 ; Attributes: thunk
.text:00408C10
.text:00408C10 libintl_bindtextdomain proc near
.text:00408C10                 jmp     ds:__imp_libintl_bindtextdomain
.text:00408C10 libintl_bindtextdomain endp
.text:00408C10
.text:00408C10 ; ---------------------------------------------------------------------------
.text:00408C16                 align 10h
.text:00408C20                 jmp     ds:libintl_textdomain
.text:00408C20 ; ---------------------------------------------------------------------------
.text:00408C26                 db 2 dup(90h)
.text:00408C28                 dd 0
.text:00408C2C                 db 3 dup(0)
.text:00408C2F ; ---------------------------------------------------------------------------
.text:00408C2F
.text:00408C2F loc_408C2F:                             ; CODE XREF: .text:00408BB4↑j
.text:00408C2F                 add     bh, bh
.text:00408C31                 and     eax, offset libintl_gettext
.text:00408C36                 nop
.text:00408C37                 nop
.text:00408C37 ; ---------------------------------------------------------------------------
.text:00408C38                 dd 2 dup(0)
.text:00408C40 ; const char aS[]
.text:00408C40 aS              db ': %s',0             ; DATA XREF: sub_408C60+B8↓o
.text:00408C40                                         ; sub_408D64+122↓o
.text:00408C45 aUnknownSystemE db 'Unknown system error',0
.text:00408C45                                         ; DATA XREF: sub_408C60:loc_408D2D↓o
.text:00408C45                                         ; sub_408D64:loc_408E9E↓o
.text:00408C5A ; const char aS_0[]
.text:00408C5A aS_0            db '%s: ',0             ; DATA XREF: sub_408C60:loc_408D34↓o
.text:00408C5F                 align 10h
.text:00408C60
.text:00408C60 ; =============== S U B R O U T I N E =======================================
.text:00408C60
.text:00408C60
.text:00408C60 ; int __cdecl sub_408C60(int Code, int ErrorMessage, char *, char)
.text:00408C60 sub_408C60      proc near               ; CODE XREF: sub_402390+597↑p
.text:00408C60                                         ; sub_402390+639↑p ...
.text:00408C60
.text:00408C60 Stream          = dword ptr -1Ch
.text:00408C60 Format          = dword ptr -18h
.text:00408C60 ArgList         = dword ptr -14h
.text:00408C60 Code            = dword ptr  4
.text:00408C60 ErrorMessage    = dword ptr  8
.text:00408C60 arg_8           = dword ptr  0Ch
.text:00408C60 arg_C           = byte ptr  10h
.text:00408C60
.text:00408C60                 push    esi
.text:00408C61                 push    ebx
.text:00408C62                 sub     esp, 14h
.text:00408C65                 mov     edx, ds:_iob
.text:00408C6B                 mov     esi, [esp+1Ch+Code]
.text:00408C6F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00408C73                 add     edx, 20h ; ' '
.text:00408C76                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408C79                 call    fflush
.text:00408C7E                 mov     eax, ds:dword_40B710
.text:00408C83                 test    eax, eax
.text:00408C85                 jz      loc_408D34
.text:00408C8B                 call    eax ; dword_40B710
.text:00408C8D
.text:00408C8D loc_408C8D:                             ; CODE XREF: sub_408C60+F7↓j
.text:00408C8D                 lea     edx, [esp+1Ch+arg_C]
.text:00408C91                 mov     ecx, [esp+1Ch+arg_8]
.text:00408C95                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00408C99                 mov     edx, ds:_iob
.text:00408C9F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00408CA3                 add     edx, 40h ; '@'
.text:00408CA6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408CA9                 call    vfprintf
.text:00408CAE                 inc     ds:dword_40B720
.text:00408CB4                 test    ebx, ebx
.text:00408CB6                 jnz     short loc_408D02
.text:00408CB8
.text:00408CB8 loc_408CB8:                             ; CODE XREF: sub_408C60+CB↓j
.text:00408CB8                 mov     edx, ds:_iob
.text:00408CBE                 lea     ecx, [edx+40h]
.text:00408CC1                 mov     ebx, [ecx+4]
.text:00408CC4                 dec     ebx
.text:00408CC5                 test    ebx, ebx
.text:00408CC7                 mov     [ecx+4], ebx
.text:00408CCA                 js      short loc_408CF0
.text:00408CCC                 mov     ecx, [edx+40h]
.text:00408CCF                 mov     byte ptr [ecx], 0Ah
.text:00408CD2                 inc     dword ptr [edx+40h]
.text:00408CD5
.text:00408CD5 loc_408CD5:                             ; CODE XREF: sub_408C60+A0↓j
.text:00408CD5                 mov     edx, ds:_iob
.text:00408CDB                 add     edx, 40h ; '@'
.text:00408CDE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408CE1                 call    fflush
.text:00408CE6                 test    esi, esi
.text:00408CE8                 jnz     short loc_408D5C
.text:00408CEA                 add     esp, 14h
.text:00408CED                 pop     ebx
.text:00408CEE                 pop     esi
.text:00408CEF                 retn
.text:00408CF0 ; ---------------------------------------------------------------------------
.text:00408CF0
.text:00408CF0 loc_408CF0:                             ; CODE XREF: sub_408C60+6A↑j
.text:00408CF0                 mov     [esp+1Ch+Format], ecx ; File
.text:00408CF4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00408CFB                 call    _flsbuf
.text:00408D00                 jmp     short loc_408CD5
.text:00408D02 ; ---------------------------------------------------------------------------
.text:00408D02
.text:00408D02 loc_408D02:                             ; CODE XREF: sub_408C60+56↑j
.text:00408D02                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00408D05                 call    strerror
.text:00408D0A                 test    eax, eax
.text:00408D0C                 jz      short loc_408D2D
.text:00408D0E
.text:00408D0E loc_408D0E:                             ; CODE XREF: sub_408C60+D2↓j
.text:00408D0E                 mov     [esp+1Ch+ArgList], eax
.text:00408D12                 mov     ebx, ds:_iob
.text:00408D18                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:00408D20                 add     ebx, 40h ; '@'
.text:00408D23                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00408D26                 call    fprintf
.text:00408D2B                 jmp     short loc_408CB8
.text:00408D2D ; ---------------------------------------------------------------------------
.text:00408D2D
.text:00408D2D loc_408D2D:                             ; CODE XREF: sub_408C60+AC↑j
.text:00408D2D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00408D32                 jmp     short loc_408D0E
.text:00408D34 ; ---------------------------------------------------------------------------
.text:00408D34
.text:00408D34 loc_408D34:                             ; CODE XREF: sub_408C60+25↑j
.text:00408D34                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:00408D3C                 mov     edx, ds:_iob
.text:00408D42                 mov     ecx, ds:dword_40B6E0
.text:00408D48                 add     edx, 40h ; '@'
.text:00408D4B                 mov     [esp+1Ch+ArgList], ecx
.text:00408D4F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408D52                 call    fprintf
.text:00408D57                 jmp     loc_408C8D
.text:00408D5C ; ---------------------------------------------------------------------------
.text:00408D5C
.text:00408D5C loc_408D5C:                             ; CODE XREF: sub_408C60+88↑j
.text:00408D5C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00408D5F                 call    exit
.text:00408D5F sub_408C60      endp
.text:00408D5F
.text:00408D64
.text:00408D64 ; =============== S U B R O U T I N E =======================================
.text:00408D64
.text:00408D64
.text:00408D64 ; int __cdecl sub_408D64(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00408D64 sub_408D64      proc near               ; DATA XREF: sub_408D64+77↓o
.text:00408D64
.text:00408D64 Stream          = dword ptr -28h
.text:00408D64 Format          = dword ptr -24h
.text:00408D64 ArgList         = dword ptr -20h
.text:00408D64 var_1C          = dword ptr -1Ch
.text:00408D64 Code            = dword ptr  8
.text:00408D64 ErrorMessage    = dword ptr  0Ch
.text:00408D64 Str2            = dword ptr  10h
.text:00408D64 arg_10          = dword ptr  14h
.text:00408D64 arg_14          = dword ptr  18h
.text:00408D64 arg_18          = byte ptr  1Ch
.text:00408D64
.text:00408D64                 and     eax, 64253A73h
.text:00408D69                 cmp     ah, [eax]
.text:00408D6B
.text:00408D6B loc_408D6B:                             ; DATA XREF: sub_408D64:loc_408EA5↓o
.text:00408D6B                 add     ds:55003A73h, ah
.text:00408D71                 push    edi
.text:00408D72                 push    esi
.text:00408D73                 push    ebx
.text:00408D74                 sub     esp, 1Ch
.text:00408D77                 mov     edx, ds:dword_40B750
.text:00408D7D                 mov     ebp, [esp+28h+Code]
.text:00408D81                 mov     edi, [esp+28h+ErrorMessage]
.text:00408D85                 test    edx, edx
.text:00408D87                 mov     ebx, [esp+28h+Str2]
.text:00408D8B                 mov     esi, [esp+28h+arg_10]
.text:00408D8F                 jz      short loc_408DA9
.text:00408D91                 cmp     ds:dword_40B6D0, esi
.text:00408D97                 jz      loc_408ED0
.text:00408D9D
.text:00408D9D loc_408D9D:                             ; CODE XREF: sub_408D64+18D↓j
.text:00408D9D                 mov     ds:Str1, ebx
.text:00408DA3                 mov     ds:dword_40B6D0, esi
.text:00408DA9
.text:00408DA9 loc_408DA9:                             ; CODE XREF: sub_408D64+2B↑j
.text:00408DA9                 mov     edx, ds:_iob
.text:00408DAF                 add     edx, 20h ; ' '
.text:00408DB2                 mov     [esp+28h+Stream], edx ; Stream
.text:00408DB5                 call    fflush
.text:00408DBA                 mov     eax, ds:dword_40B710
.text:00408DBF                 test    eax, eax
.text:00408DC1                 jz      loc_408EA5
.text:00408DC7                 call    eax ; dword_40B710
.text:00408DC9
.text:00408DC9 loc_408DC9:                             ; CODE XREF: sub_408D64+164↓j
.text:00408DC9                 test    ebx, ebx
.text:00408DCB                 jz      short loc_408DEE
.text:00408DCD                 mov     [esp+28h+ArgList], ebx
.text:00408DD1                 mov     ebx, ds:_iob
.text:00408DD7                 mov     [esp+28h+var_1C], esi
.text:00408DDB                 mov     [esp+28h+Format], offset sub_408D64 ; Format
.text:00408DE3                 add     ebx, 40h ; '@'
.text:00408DE6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00408DE9                 call    fprintf
.text:00408DEE
.text:00408DEE loc_408DEE:                             ; CODE XREF: sub_408D64+67↑j
.text:00408DEE                 mov     esi, ds:_iob
.text:00408DF4                 lea     edx, [esp+28h+arg_18]
.text:00408DF8                 mov     ecx, [esp+28h+arg_14]
.text:00408DFC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00408E00                 add     esi, 40h ; '@'
.text:00408E03                 mov     [esp+28h+Format], ecx ; Format
.text:00408E07                 mov     [esp+28h+Stream], esi ; Stream
.text:00408E0A                 call    vfprintf
.text:00408E0F                 inc     ds:dword_40B720
.text:00408E15                 test    edi, edi
.text:00408E17                 jnz     short loc_408E70
.text:00408E19
.text:00408E19 loc_408E19:                             ; CODE XREF: sub_408D64+135↓j
.text:00408E19                 mov     edx, ds:_iob
.text:00408E1F                 lea     ecx, [edx+40h]
.text:00408E22                 mov     ebx, [ecx+4]
.text:00408E25                 dec     ebx
.text:00408E26                 test    ebx, ebx
.text:00408E28                 mov     [ecx+4], ebx
.text:00408E2B                 js      short loc_408E57
.text:00408E2D                 mov     esi, [edx+40h]
.text:00408E30                 mov     byte ptr [esi], 0Ah
.text:00408E33                 inc     dword ptr [edx+40h]
.text:00408E36
.text:00408E36 loc_408E36:                             ; CODE XREF: sub_408D64+103↓j
.text:00408E36                 mov     ecx, ds:_iob
.text:00408E3C                 add     ecx, 40h ; '@'
.text:00408E3F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00408E42                 call    fflush
.text:00408E47                 test    ebp, ebp
.text:00408E49                 jnz     loc_408EF6
.text:00408E4F
.text:00408E4F loc_408E4F:                             ; CODE XREF: sub_408D64+173↓j
.text:00408E4F                                         ; sub_408D64+187↓j
.text:00408E4F                 add     esp, 1Ch
.text:00408E52                 pop     ebx
.text:00408E53                 pop     esi
.text:00408E54                 pop     edi
.text:00408E55                 pop     ebp
.text:00408E56                 retn
.text:00408E57 ; ---------------------------------------------------------------------------
.text:00408E57
.text:00408E57 loc_408E57:                             ; CODE XREF: sub_408D64+C7↑j
.text:00408E57                 mov     [esp+28h+Format], ecx ; File
.text:00408E5B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00408E62                 call    _flsbuf
.text:00408E67                 jmp     short loc_408E36
.text:00408E67 ; ---------------------------------------------------------------------------
.text:00408E69                 align 10h
.text:00408E70
.text:00408E70 loc_408E70:                             ; CODE XREF: sub_408D64+B3↑j
.text:00408E70                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00408E73                 call    strerror
.text:00408E78                 test    eax, eax
.text:00408E7A                 jz      short loc_408E9E
.text:00408E7C
.text:00408E7C loc_408E7C:                             ; CODE XREF: sub_408D64+13F↓j
.text:00408E7C                 mov     [esp+28h+ArgList], eax
.text:00408E80                 mov     edi, ds:_iob
.text:00408E86                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:00408E8E                 add     edi, 40h ; '@'
.text:00408E91                 mov     [esp+28h+Stream], edi ; Stream
.text:00408E94                 call    fprintf
.text:00408E99                 jmp     loc_408E19
.text:00408E9E ; ---------------------------------------------------------------------------
.text:00408E9E
.text:00408E9E loc_408E9E:                             ; CODE XREF: sub_408D64+116↑j
.text:00408E9E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00408EA3                 jmp     short loc_408E7C
.text:00408EA5 ; ---------------------------------------------------------------------------
.text:00408EA5
.text:00408EA5 loc_408EA5:                             ; CODE XREF: sub_408D64+5D↑j
.text:00408EA5                 mov     [esp+28h+Format], (offset loc_408D6B+1) ; Format
.text:00408EAD                 mov     ecx, ds:_iob
.text:00408EB3                 mov     edx, ds:dword_40B6E0
.text:00408EB9                 add     ecx, 40h ; '@'
.text:00408EBC                 mov     [esp+28h+ArgList], edx
.text:00408EC0                 mov     [esp+28h+Stream], ecx ; Stream
.text:00408EC3                 call    fprintf
.text:00408EC8                 jmp     loc_408DC9
.text:00408EC8 ; ---------------------------------------------------------------------------
.text:00408ECD                 align 10h
.text:00408ED0
.text:00408ED0 loc_408ED0:                             ; CODE XREF: sub_408D64+33↑j
.text:00408ED0                 mov     eax, ds:Str1
.text:00408ED5                 cmp     ebx, eax
.text:00408ED7                 jz      loc_408E4F
.text:00408EDD                 mov     [esp+28h+Format], ebx ; Str2
.text:00408EE1                 mov     [esp+28h+Stream], eax ; Str1
.text:00408EE4                 call    strcmp
.text:00408EE9                 test    eax, eax
.text:00408EEB                 jz      loc_408E4F
.text:00408EF1                 jmp     loc_408D9D
.text:00408EF6 ; ---------------------------------------------------------------------------
.text:00408EF6
.text:00408EF6 loc_408EF6:                             ; CODE XREF: sub_408D64+E5↑j
.text:00408EF6                 mov     [esp+28h+Stream], ebp ; Code
.text:00408EF9                 call    exit
.text:00408EF9 sub_408D64      endp ; sp-analysis failed
.text:00408EF9
.text:00408EF9 ; ---------------------------------------------------------------------------
.text:00408EFE                 align 10h
.text:00408F00
.text:00408F00 ; =============== S U B R O U T I N E =======================================
.text:00408F00
.text:00408F00
.text:00408F00 sub_408F00      proc near               ; CODE XREF: sub_4048C0+A8↑p
.text:00408F00
.text:00408F00 arg_0           = dword ptr  4
.text:00408F00 arg_4           = dword ptr  8
.text:00408F00
.text:00408F00                 mov     ecx, [esp+arg_0]
.text:00408F04                 mov     edx, [esp+arg_4]
.text:00408F08                 nop
.text:00408F09                 lea     esi, [esi+0]
.text:00408F10
.text:00408F10 loc_408F10:                             ; CODE XREF: sub_408F00+1C↓j
.text:00408F10                 movzx   eax, byte ptr [edx]
.text:00408F13                 mov     [ecx], al
.text:00408F15                 inc     ecx
.text:00408F16                 movzx   eax, byte ptr [edx]
.text:00408F19                 inc     edx
.text:00408F1A                 test    al, al
.text:00408F1C                 jnz     short loc_408F10
.text:00408F1E                 lea     eax, [ecx-1]
.text:00408F21                 retn
.text:00408F21 sub_408F00      endp
.text:00408F21
.text:00408F21 ; ---------------------------------------------------------------------------
.text:00408F22                 align 10h
.text:00408F30
.text:00408F30 ; =============== S U B R O U T I N E =======================================
.text:00408F30
.text:00408F30 ; Attributes: thunk
.text:00408F30
.text:00408F30 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00408F30 mbrtowc         proc near               ; CODE XREF: sub_4078A0+757↑p
.text:00408F30
.text:00408F30 DstCh           = dword ptr  4
.text:00408F30 SrcCh           = dword ptr  8
.text:00408F30 SizeInBytes     = dword ptr  0Ch
.text:00408F30 State           = dword ptr  10h
.text:00408F30
.text:00408F30                 jmp     ds:__imp_mbrtowc
.text:00408F30 mbrtowc         endp
.text:00408F30
.text:00408F30 ; ---------------------------------------------------------------------------
.text:00408F36                 align 10h
.text:00408F40
.text:00408F40 ; =============== S U B R O U T I N E =======================================
.text:00408F40
.text:00408F40 ; Attributes: bp-based frame
.text:00408F40
.text:00408F40 sub_408F40      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00408F40                 push    ebp
.text:00408F41                 mov     ecx, offset byte_40B000
.text:00408F46                 cmp     ecx, offset byte_40B000
.text:00408F4C                 mov     ebp, esp
.text:00408F4E                 jnb     short loc_408F66
.text:00408F50
.text:00408F50 loc_408F50:                             ; CODE XREF: sub_408F40+24↓j
.text:00408F50                 mov     edx, [ecx+4]
.text:00408F53                 mov     eax, [ecx]
.text:00408F55                 add     ecx, 8
.text:00408F58                 add     [edx+400000h], eax
.text:00408F5E                 cmp     ecx, offset byte_40B000
.text:00408F64                 jb      short loc_408F50
.text:00408F66
.text:00408F66 loc_408F66:                             ; CODE XREF: sub_408F40+E↑j
.text:00408F66                 pop     ebp
.text:00408F67                 retn
.text:00408F67 sub_408F40      endp
.text:00408F67
.text:00408F67 ; ---------------------------------------------------------------------------
.text:00408F68                 align 10h
.text:00408F70
.text:00408F70 ; =============== S U B R O U T I N E =======================================
.text:00408F70
.text:00408F70 ; Attributes: bp-based frame
.text:00408F70
.text:00408F70 sub_408F70      proc near               ; CODE XREF: sub_401080+16↑p
.text:00408F70                                         ; TopLevelExceptionFilter+D7↑p
.text:00408F70                 push    ebp
.text:00408F71                 mov     ebp, esp
.text:00408F73                 fninit
.text:00408F75                 pop     ebp
.text:00408F76                 retn
.text:00408F76 sub_408F70      endp
.text:00408F76
.text:00408F76 ; ---------------------------------------------------------------------------
.text:00408F77                 align 10h
.text:00408F80
.text:00408F80 ; =============== S U B R O U T I N E =======================================
.text:00408F80
.text:00408F80 ; Attributes: bp-based frame
.text:00408F80
.text:00408F80 ; void __cdecl sub_408F80()
.text:00408F80 sub_408F80      proc near               ; DATA XREF: .text:loc_408FC9↓o
.text:00408F80                                         ; sub_409010:loc_40903E↓o
.text:00408F80                 push    ebp
.text:00408F81                 mov     ebp, esp
.text:00408F83                 sub     esp, 8
.text:00408F86                 mov     eax, off_40A084
.text:00408F8B                 mov     edx, [eax]
.text:00408F8D                 test    edx, edx
.text:00408F8F                 jnz     short loc_408F95
.text:00408F91
.text:00408F91 loc_408F91:                             ; CODE XREF: sub_408F80+2C↓j
.text:00408F91                 mov     esp, ebp
.text:00408F93                 pop     ebp
.text:00408F94                 retn
.text:00408F95 ; ---------------------------------------------------------------------------
.text:00408F95
.text:00408F95 loc_408F95:                             ; CODE XREF: sub_408F80+F↑j
.text:00408F95                                         ; sub_408F80+2A↓j
.text:00408F95                 call    dword ptr [eax]
.text:00408F97                 mov     edx, off_40A084
.text:00408F9D                 mov     ecx, [edx+4]
.text:00408FA0                 lea     eax, [edx+4]
.text:00408FA3                 mov     off_40A084, eax
.text:00408FA8                 test    ecx, ecx
.text:00408FAA                 jnz     short loc_408F95
.text:00408FAC                 jmp     short loc_408F91
.text:00408FAC sub_408F80      endp
.text:00408FAC
.text:00408FAC ; ---------------------------------------------------------------------------
.text:00408FAE                 align 10h
.text:00408FB0                 push    ebp
.text:00408FB1                 mov     ebp, esp
.text:00408FB3                 sub     esp, 8
.text:00408FB6                 mov     [ebp-4], ebx
.text:00408FB9                 mov     eax, ds:dword_4098C0
.text:00408FBE                 cmp     eax, 0FFFFFFFFh
.text:00408FC1                 jz      short loc_408FEC
.text:00408FC3
.text:00408FC3 loc_408FC3:                             ; CODE XREF: .text:00408FF6↓j
.text:00408FC3                                         ; .text:00409009↓j
.text:00408FC3                 test    eax, eax
.text:00408FC5                 mov     ebx, eax
.text:00408FC7                 jnz     short loc_408FE0
.text:00408FC9
.text:00408FC9 loc_408FC9:                             ; CODE XREF: .text:00408FEA↓j
.text:00408FC9                 mov     dword ptr [esp], offset sub_408F80
.text:00408FD0                 call    sub_401040
.text:00408FD5                 mov     ebx, [ebp-4]
.text:00408FD8                 mov     esp, ebp
.text:00408FDA                 pop     ebp
.text:00408FDB                 retn
.text:00408FDB ; ---------------------------------------------------------------------------
.text:00408FDC                 align 10h
.text:00408FE0
.text:00408FE0 loc_408FE0:                             ; CODE XREF: .text:00408FC7↑j
.text:00408FE0                                         ; .text:00408FE8↓j
.text:00408FE0                 call    ds:dword_4098C0[ebx*4]
.text:00408FE7                 dec     ebx
.text:00408FE8                 jnz     short loc_408FE0
.text:00408FEA                 jmp     short loc_408FC9
.text:00408FEC ; ---------------------------------------------------------------------------
.text:00408FEC
.text:00408FEC loc_408FEC:                             ; CODE XREF: .text:00408FC1↑j
.text:00408FEC                 mov     ecx, ds:dword_4098C4
.text:00408FF2                 xor     eax, eax
.text:00408FF4                 test    ecx, ecx
.text:00408FF6                 jz      short loc_408FC3
.text:00408FF8                 mov     edx, offset dword_4098C0
.text:00408FFD                 lea     esi, [esi+0]
.text:00409000
.text:00409000 loc_409000:                             ; CODE XREF: .text:00409007↓j
.text:00409000                 inc     eax
.text:00409001                 mov     ecx, [edx+eax*4+4]
.text:00409005                 test    ecx, ecx
.text:00409007                 jnz     short loc_409000
.text:00409009                 jmp     short loc_408FC3
.text:00409009 ; ---------------------------------------------------------------------------
.text:0040900B                 align 10h
.text:00409010
.text:00409010 ; =============== S U B R O U T I N E =======================================
.text:00409010
.text:00409010 ; Attributes: bp-based frame
.text:00409010
.text:00409010 sub_409010      proc near               ; CODE XREF: sub_402390+1C↑p
.text:00409010
.text:00409010 var_8           = dword ptr -8
.text:00409010 var_4           = dword ptr -4
.text:00409010
.text:00409010                 push    ebp
.text:00409011                 mov     ebp, esp
.text:00409013                 sub     esp, 8
.text:00409016                 mov     [ebp+var_4], ebx
.text:00409019                 mov     edx, dword_40A080
.text:0040901F                 test    edx, edx
.text:00409021                 jnz     short loc_40904A
.text:00409023                 mov     eax, ds:dword_4098C0
.text:00409028                 mov     edx, 1
.text:0040902D                 mov     dword_40A080, edx
.text:00409033                 cmp     eax, 0FFFFFFFFh
.text:00409036                 jz      short loc_40905D
.text:00409038
.text:00409038 loc_409038:                             ; CODE XREF: sub_409010+57↓j
.text:00409038                                         ; sub_409010+69↓j
.text:00409038                 test    eax, eax
.text:0040903A                 mov     ebx, eax
.text:0040903C                 jnz     short loc_409051
.text:0040903E
.text:0040903E loc_40903E:                             ; CODE XREF: sub_409010+4B↓j
.text:0040903E                 mov     [esp+8+var_8], offset sub_408F80 ; void (__cdecl *)()
.text:00409045                 call    sub_401040
.text:0040904A
.text:0040904A loc_40904A:                             ; CODE XREF: sub_409010+11↑j
.text:0040904A                 mov     ebx, [ebp+var_4]
.text:0040904D                 mov     esp, ebp
.text:0040904F                 pop     ebp
.text:00409050                 retn
.text:00409051 ; ---------------------------------------------------------------------------
.text:00409051
.text:00409051 loc_409051:                             ; CODE XREF: sub_409010+2C↑j
.text:00409051                                         ; sub_409010+49↓j
.text:00409051                 call    ds:dword_4098C0[ebx*4]
.text:00409058                 dec     ebx
.text:00409059                 jnz     short loc_409051
.text:0040905B                 jmp     short loc_40903E
.text:0040905D ; ---------------------------------------------------------------------------
.text:0040905D
.text:0040905D loc_40905D:                             ; CODE XREF: sub_409010+26↑j
.text:0040905D                 mov     ecx, ds:dword_4098C4
.text:00409063                 xor     eax, eax
.text:00409065                 test    ecx, ecx
.text:00409067                 jz      short loc_409038
.text:00409069                 mov     edx, offset dword_4098C0
.text:0040906E                 mov     esi, esi
.text:00409070
.text:00409070 loc_409070:                             ; CODE XREF: sub_409010+67↓j
.text:00409070                 inc     eax
.text:00409071                 mov     ebx, [edx+eax*4+4]
.text:00409075                 test    ebx, ebx
.text:00409077                 jnz     short loc_409070
.text:00409079                 jmp     short loc_409038
.text:00409079 sub_409010      endp
.text:00409079
.text:00409079 ; ---------------------------------------------------------------------------
.text:0040907B                 align 10h
.text:00409080
.text:00409080 ; =============== S U B R O U T I N E =======================================
.text:00409080
.text:00409080 ; Attributes: info_from_lumina
.text:00409080
.text:00409080 ; void *__cdecl _alloca(size_t Size)
.text:00409080 __alloca        proc near               ; CODE XREF: sub_402390+17↑p
.text:00409080                 push    ecx
.text:00409081                 mov     ecx, esp
.text:00409083                 add     ecx, 8
.text:00409086
.text:00409086 loc_409086:                             ; CODE XREF: __alloca+1B↓j
.text:00409086                 cmp     eax, 1000h
.text:0040908B                 jb      short loc_40909D
.text:0040908D                 sub     ecx, 1000h
.text:00409093                 or      dword ptr [ecx], 0
.text:00409096                 sub     eax, 1000h
.text:0040909B                 jmp     short loc_409086
.text:0040909D ; ---------------------------------------------------------------------------
.text:0040909D
.text:0040909D loc_40909D:                             ; CODE XREF: __alloca+B↑j
.text:0040909D                 sub     ecx, eax
.text:0040909F                 or      dword ptr [ecx], 0
.text:004090A2                 mov     eax, esp
.text:004090A4                 mov     esp, ecx
.text:004090A6                 mov     ecx, [eax]
.text:004090A8                 mov     eax, [eax+4]
.text:004090AB                 jmp     eax
.text:004090AB __alloca        endp
.text:004090AB
.text:004090AB ; ---------------------------------------------------------------------------
.text:004090AD                 align 10h
.text:004090B0
.text:004090B0 ; =============== S U B R O U T I N E =======================================
.text:004090B0
.text:004090B0 ; Attributes: bp-based frame
.text:004090B0
.text:004090B0 sub_4090B0      proc near               ; CODE XREF: sub_4068B0+2BE↑p
.text:004090B0                                         ; sub_4068B0+36A↑p ...
.text:004090B0
.text:004090B0 var_24          = dword ptr -24h
.text:004090B0 var_20          = dword ptr -20h
.text:004090B0 var_1C          = dword ptr -1Ch
.text:004090B0 var_18          = dword ptr -18h
.text:004090B0 var_14          = dword ptr -14h
.text:004090B0 var_C           = dword ptr -0Ch
.text:004090B0 var_8           = dword ptr -8
.text:004090B0 var_4           = dword ptr -4
.text:004090B0 arg_0           = dword ptr  8
.text:004090B0 arg_4           = dword ptr  0Ch
.text:004090B0 arg_8           = dword ptr  10h
.text:004090B0 arg_C           = dword ptr  14h
.text:004090B0
.text:004090B0                 push    ebp
.text:004090B1                 mov     ebp, esp
.text:004090B3                 sub     esp, 28h
.text:004090B6                 mov     [ebp+var_C], ebx
.text:004090B9                 mov     edx, [ebp+arg_C]
.text:004090BC                 mov     ecx, [ebp+arg_0]
.text:004090BF                 mov     [ebp+var_8], esi
.text:004090C2                 mov     eax, [ebp+arg_8]
.text:004090C5                 test    edx, edx
.text:004090C7                 mov     [ebp+var_4], edi
.text:004090CA                 mov     ebx, [ebp+arg_4]
.text:004090CD                 mov     esi, eax
.text:004090CF                 mov     [ebp+var_18], 0
.text:004090D6                 mov     [ebp+var_14], 0
.text:004090DD                 mov     [ebp+var_1C], ecx
.text:004090E0                 jnz     short loc_409132
.text:004090E2                 cmp     eax, ebx
.text:004090E4                 jbe     short loc_409110
.text:004090E6                 mov     eax, ecx
.text:004090E8                 mov     edx, ebx
.text:004090EA                 div     esi
.text:004090EC                 mov     edi, eax
.text:004090EE                 mov     esi, esi
.text:004090F0
.text:004090F0 loc_4090F0:                             ; CODE XREF: sub_4090B0+88↓j
.text:004090F0                                         ; sub_4090B0+A4↓j ...
.text:004090F0                 xor     ecx, ecx
.text:004090F2
.text:004090F2 loc_4090F2:                             ; CODE XREF: sub_4090B0+80↓j
.text:004090F2                 mov     [ebp+var_18], edi
.text:004090F5                 mov     ebx, [ebp+var_C]
.text:004090F8                 mov     eax, [ebp+var_18]
.text:004090FB                 mov     [ebp+var_14], ecx
.text:004090FE                 mov     esi, [ebp+var_8]
.text:00409101                 mov     edx, [ebp+var_14]
.text:00409104                 mov     edi, [ebp+var_4]
.text:00409107                 mov     esp, ebp
.text:00409109                 pop     ebp
.text:0040910A                 retn
.text:0040910A ; ---------------------------------------------------------------------------
.text:0040910B                 align 10h
.text:00409110
.text:00409110 loc_409110:                             ; CODE XREF: sub_4090B0+34↑j
.text:00409110                 test    eax, eax
.text:00409112                 jnz     short loc_409121
.text:00409114                 mov     eax, 1
.text:00409119                 xor     ecx, ecx
.text:0040911B                 xor     edx, edx
.text:0040911D                 div     ecx
.text:0040911F                 mov     esi, eax
.text:00409121
.text:00409121 loc_409121:                             ; CODE XREF: sub_4090B0+62↑j
.text:00409121                 mov     eax, ebx
.text:00409123                 xor     edx, edx
.text:00409125                 div     esi
.text:00409127                 mov     ecx, eax
.text:00409129                 mov     eax, [ebp+var_1C]
.text:0040912C                 div     esi
.text:0040912E                 mov     edi, eax
.text:00409130                 jmp     short loc_4090F2
.text:00409132 ; ---------------------------------------------------------------------------
.text:00409132
.text:00409132 loc_409132:                             ; CODE XREF: sub_4090B0+30↑j
.text:00409132                 cmp     edx, ebx
.text:00409134                 jbe     short loc_409140
.text:00409136                 xor     edi, edi
.text:00409138                 jmp     short loc_4090F0
.text:00409138 ; ---------------------------------------------------------------------------
.text:0040913A                 align 10h
.text:00409140
.text:00409140 loc_409140:                             ; CODE XREF: sub_4090B0+84↑j
.text:00409140                 bsr     eax, edx
.text:00409143                 xor     eax, 1Fh
.text:00409146                 mov     [ebp+var_20], eax
.text:00409149                 jnz     short loc_409160
.text:0040914B                 cmp     ebx, edx
.text:0040914D                 ja      short loc_409156
.text:0040914F                 xor     edi, edi
.text:00409151                 cmp     [ebp+var_1C], esi
.text:00409154                 jb      short loc_4090F0
.text:00409156
.text:00409156 loc_409156:                             ; CODE XREF: sub_4090B0+9D↑j
.text:00409156                 mov     edi, 1
.text:0040915B                 jmp     short loc_4090F0
.text:0040915B ; ---------------------------------------------------------------------------
.text:0040915D                 align 10h
.text:00409160
.text:00409160 loc_409160:                             ; CODE XREF: sub_4090B0+99↑j
.text:00409160                 mov     eax, [ebp+var_20]
.text:00409163                 mov     ecx, 20h ; ' '
.text:00409168                 sub     ecx, eax
.text:0040916A                 mov     [ebp+var_24], ecx
.text:0040916D                 mov     eax, esi
.text:0040916F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00409173                 shl     edx, cl
.text:00409175                 mov     edi, edx
.text:00409177                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040917B                 mov     edx, ebx
.text:0040917D                 shr     eax, cl
.text:0040917F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00409183                 or      edi, eax
.text:00409185                 mov     eax, [ebp+var_1C]
.text:00409188                 shl     esi, cl
.text:0040918A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040918E                 shr     edx, cl
.text:00409190                 movzx   ecx, byte ptr [ebp+var_20]
.text:00409194                 shl     ebx, cl
.text:00409196                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040919A                 shr     eax, cl
.text:0040919C                 or      ebx, eax
.text:0040919E                 movzx   ecx, byte ptr [ebp+var_20]
.text:004091A2                 mov     eax, ebx
.text:004091A4                 div     edi
.text:004091A6                 mov     ebx, edx
.text:004091A8                 mov     edi, eax
.text:004091AA                 shl     [ebp+var_1C], cl
.text:004091AD                 mul     esi
.text:004091AF                 cmp     edx, ebx
.text:004091B1                 ja      short loc_4091C4
.text:004091B3                 cmp     edx, ebx
.text:004091B5                 jnz     loc_4090F0
.text:004091BB                 cmp     eax, [ebp+var_1C]
.text:004091BE                 jbe     loc_4090F0
.text:004091C4
.text:004091C4 loc_4091C4:                             ; CODE XREF: sub_4090B0+101↑j
.text:004091C4                 dec     edi
.text:004091C5                 jmp     loc_4090F0
.text:004091C5 sub_4090B0      endp
.text:004091C5
.text:004091C5 ; ---------------------------------------------------------------------------
.text:004091CA                 align 10h
.text:004091D0
.text:004091D0 ; =============== S U B R O U T I N E =======================================
.text:004091D0
.text:004091D0 ; Attributes: thunk
.text:004091D0
.text:004091D0 ; int __cdecl close(int FileHandle)
.text:004091D0 _close          proc near               ; CODE XREF: sub_402390+565↑p
.text:004091D0
.text:004091D0 FileHandle      = dword ptr  4
.text:004091D0
.text:004091D0                 jmp     ds:__imp__close
.text:004091D0 _close          endp
.text:004091D0
.text:004091D0 ; ---------------------------------------------------------------------------
.text:004091D6                 align 10h
.text:004091E0
.text:004091E0 ; =============== S U B R O U T I N E =======================================
.text:004091E0
.text:004091E0 ; Attributes: thunk
.text:004091E0
.text:004091E0 ; int __cdecl isatty(int FileHandle)
.text:004091E0 _isatty         proc near               ; CODE XREF: sub_402390+404↑p
.text:004091E0                                         ; sub_402390+B6E↑p
.text:004091E0
.text:004091E0 FileHandle      = dword ptr  4
.text:004091E0
.text:004091E0                 jmp     ds:__imp__isatty
.text:004091E0 _isatty         endp
.text:004091E0
.text:004091E0 ; ---------------------------------------------------------------------------
.text:004091E6                 align 10h
.text:004091F0
.text:004091F0 ; =============== S U B R O U T I N E =======================================
.text:004091F0
.text:004091F0 ; Attributes: thunk
.text:004091F0
.text:004091F0 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:004091F0 _read           proc near               ; CODE XREF: sub_4067D0+2B↑p
.text:004091F0
.text:004091F0 FileHandle      = dword ptr  4
.text:004091F0 DstBuf          = dword ptr  8
.text:004091F0 MaxCharCount    = dword ptr  0Ch
.text:004091F0
.text:004091F0                 jmp     ds:__imp__read
.text:004091F0 _read           endp
.text:004091F0
.text:004091F0 ; ---------------------------------------------------------------------------
.text:004091F6                 align 10h
.text:00409200
.text:00409200 ; =============== S U B R O U T I N E =======================================
.text:00409200
.text:00409200 ; Attributes: info_from_lumina
.text:00409200
.text:00409200 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00409200 _strtoull       proc near               ; CODE XREF: sub_4068B0+AD↑p
.text:00409200
.text:00409200 C               = dword ptr -3Ch
.text:00409200 Type            = dword ptr -38h
.text:00409200 var_34          = dword ptr -34h
.text:00409200 var_30          = dword ptr -30h
.text:00409200 var_2C          = dword ptr -2Ch
.text:00409200 var_28          = dword ptr -28h
.text:00409200 var_24          = dword ptr -24h
.text:00409200 var_20          = dword ptr -20h
.text:00409200 var_1C          = dword ptr -1Ch
.text:00409200 var_18          = dword ptr -18h
.text:00409200 String          = dword ptr  4
.text:00409200 EndPtr          = dword ptr  8
.text:00409200 Radix           = dword ptr  0Ch
.text:00409200
.text:00409200                 push    ebp
.text:00409201                 push    edi
.text:00409202                 push    esi
.text:00409203                 push    ebx
.text:00409204                 sub     esp, 2Ch
.text:00409207                 mov     edx, [esp+3Ch+EndPtr]
.text:0040920B                 test    edx, edx
.text:0040920D                 jz      short loc_409219
.text:0040920F                 mov     eax, [esp+3Ch+String]
.text:00409213                 mov     ecx, [esp+3Ch+EndPtr]
.text:00409217                 mov     [ecx], eax
.text:00409219
.text:00409219 loc_409219:                             ; CODE XREF: _strtoull+D↑j
.text:00409219                 mov     edx, [esp+3Ch+Radix]
.text:0040921D                 test    edx, edx
.text:0040921F                 js      short loc_40922F
.text:00409221                 cmp     [esp+3Ch+Radix], 1
.text:00409226                 jz      short loc_40922F
.text:00409228                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040922D                 jle     short loc_409246
.text:0040922F
.text:0040922F loc_40922F:                             ; CODE XREF: _strtoull+1F↑j
.text:0040922F                                         ; _strtoull+26↑j
.text:0040922F                 call    _errno
.text:00409234                 mov     dword ptr [eax], 21h ; '!'
.text:0040923A
.text:0040923A loc_40923A:                             ; CODE XREF: _strtoull+FF↓j
.text:0040923A                                         ; _strtoull+109↓j
.text:0040923A                 xor     eax, eax
.text:0040923C                 xor     edx, edx
.text:0040923E
.text:0040923E loc_40923E:                             ; CODE XREF: _strtoull+244↓j
.text:0040923E                                         ; _strtoull+251↓j ...
.text:0040923E                 add     esp, 2Ch
.text:00409241                 pop     ebx
.text:00409242                 pop     esi
.text:00409243                 pop     edi
.text:00409244                 pop     ebp
.text:00409245                 retn
.text:00409246 ; ---------------------------------------------------------------------------
.text:00409246
.text:00409246 loc_409246:                             ; CODE XREF: _strtoull+2D↑j
.text:00409246                 mov     ecx, ds:__mb_cur_max
.text:0040924C                 lea     esi, [esi+0]
.text:00409250
.text:00409250 loc_409250:                             ; CODE XREF: _strtoull+7E↓j
.text:00409250                 cmp     dword ptr [ecx], 1
.text:00409253                 mov     esi, [esp+3Ch+String]
.text:00409257                 movsx   edx, byte ptr [esi]
.text:0040925A                 jz      loc_409632
.text:00409260                 mov     [esp+3Ch+Type], 8 ; Type
.text:00409268                 mov     [esp+3Ch+C], edx ; C
.text:0040926B                 call    _isctype
.text:00409270                 mov     ecx, ds:__mb_cur_max
.text:00409276
.text:00409276 loc_409276:                             ; CODE XREF: _strtoull+445↓j
.text:00409276                 test    eax, eax
.text:00409278                 jz      short loc_409280
.text:0040927A                 inc     [esp+3Ch+String]
.text:0040927E                 jmp     short loc_409250
.text:00409280 ; ---------------------------------------------------------------------------
.text:00409280
.text:00409280 loc_409280:                             ; CODE XREF: _strtoull+78↑j
.text:00409280                 mov     esi, [esp+3Ch+String]
.text:00409284                 xor     ebx, ebx
.text:00409286                 movzx   edx, byte ptr [esi]
.text:00409289                 cmp     dl, 2Dh ; '-'
.text:0040928C                 setz    bl
.text:0040928F                 test    ebx, ebx
.text:00409291                 mov     [esp+3Ch+var_20], ebx
.text:00409295                 jnz     loc_409622
.text:0040929B                 cmp     dl, 2Bh ; '+'
.text:0040929E                 jz      loc_409622
.text:004092A4
.text:004092A4 loc_4092A4:                             ; CODE XREF: _strtoull+42D↓j
.text:004092A4                 mov     ebp, [esp+3Ch+Radix]
.text:004092A8                 test    ebp, ebp
.text:004092AA                 jnz     short loc_4092BD
.text:004092AC                 cmp     dl, 30h ; '0'
.text:004092AF                 jz      loc_4095F9
.text:004092B5                 mov     [esp+3Ch+Radix], 0Ah
.text:004092BD
.text:004092BD loc_4092BD:                             ; CODE XREF: _strtoull+AA↑j
.text:004092BD                                         ; _strtoull+40F↓j ...
.text:004092BD                 cmp     [esp+3Ch+Radix], 10h
.text:004092C2                 jz      loc_4095CB
.text:004092C8
.text:004092C8 loc_4092C8:                             ; CODE XREF: _strtoull+3CE↓j
.text:004092C8                                         ; _strtoull+3E2↓j ...
.text:004092C8                 cmp     dword ptr [ecx], 1
.text:004092CB                 movsx   ebx, dl
.text:004092CE                 jz      loc_4095B3
.text:004092D4                 mov     [esp+3Ch+Type], 4 ; Type
.text:004092DC                 mov     [esp+3Ch+C], ebx ; C
.text:004092DF                 call    _isctype
.text:004092E4                 mov     esi, [esp+3Ch+String]
.text:004092E8                 movzx   edx, byte ptr [esi]
.text:004092EB
.text:004092EB loc_4092EB:                             ; CODE XREF: _strtoull+3C6↓j
.text:004092EB                 test    eax, eax
.text:004092ED                 jz      loc_40951C
.text:004092F3                 movsx   eax, dl
.text:004092F6                 sub     eax, 30h ; '0'
.text:004092F9
.text:004092F9 loc_4092F9:                             ; CODE XREF: _strtoull+34B↓j
.text:004092F9                                         ; _strtoull+37C↓j ...
.text:004092F9                 inc     [esp+3Ch+String]
.text:004092FD                 test    eax, eax
.text:004092FF                 js      loc_40923A
.text:00409305                 cmp     eax, [esp+3Ch+Radix]
.text:00409309                 jge     loc_40923A
.text:0040930F                 mov     [esp+3Ch+var_1C], eax
.text:00409313                 mov     edx, eax
.text:00409315                 sar     edx, 1Fh
.text:00409318                 mov     [esp+3Ch+var_18], edx
.text:0040931C                 mov     [esp+3Ch+var_24], 0
.text:00409324                 lea     esi, [esi+0]
.text:0040932A                 lea     edi, [edi+0]
.text:00409330
.text:00409330 loc_409330:                             ; CODE XREF: _strtoull+20C↓j
.text:00409330                 mov     ebp, [esp+3Ch+String]
.text:00409334                 mov     ebx, ds:__mb_cur_max
.text:0040933A                 movzx   edx, byte ptr [ebp+0]
.text:0040933E                 cmp     dword ptr [ebx], 1
.text:00409341                 movsx   ecx, dl
.text:00409344                 jz      loc_409505
.text:0040934A                 mov     [esp+3Ch+C], ecx ; C
.text:0040934D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00409355                 call    _isctype
.text:0040935A                 mov     ecx, [esp+3Ch+String]
.text:0040935E                 movzx   edx, byte ptr [ecx]
.text:00409361
.text:00409361 loc_409361:                             ; CODE XREF: _strtoull+317↓j
.text:00409361                 test    eax, eax
.text:00409363                 jz      loc_409470
.text:00409369                 movsx   edi, dl
.text:0040936C                 lea     ebp, [edi-30h]
.text:0040936F
.text:0040936F loc_40936F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0040936F                 test    ebp, ebp
.text:00409371                 js      loc_40941B
.text:00409377                 cmp     ebp, [esp+3Ch+Radix]
.text:0040937B                 jge     loc_40941B
.text:00409381                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00409388                 mov     eax, [esp+3Ch+Radix]
.text:0040938C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00409394                 cdq
.text:00409395                 mov     esi, eax
.text:00409397                 mov     [esp+3Ch+var_34], eax
.text:0040939B                 mov     edi, edx
.text:0040939D                 mov     [esp+3Ch+var_30], edx
.text:004093A1                 call    sub_4090B0
.text:004093A6                 add     eax, 1
.text:004093A9                 adc     edx, 0
.text:004093AC                 cmp     [esp+3Ch+var_18], edx
.text:004093B0                 ja      short loc_409400
.text:004093B2                 jb      short loc_4093BA
.text:004093B4                 cmp     [esp+3Ch+var_1C], eax
.text:004093B8                 ja      short loc_409400
.text:004093BA
.text:004093BA loc_4093BA:                             ; CODE XREF: _strtoull+1B2↑j
.text:004093BA                 mov     eax, [esp+3Ch+var_1C]
.text:004093BE                 mov     ebx, ebp
.text:004093C0                 mul     esi
.text:004093C2                 mov     ecx, edx
.text:004093C4                 mov     [esp+3Ch+var_2C], eax
.text:004093C8                 mov     eax, [esp+3Ch+var_18]
.text:004093CC                 mov     [esp+3Ch+var_28], edx
.text:004093D0                 imul    eax, esi
.text:004093D3                 mov     esi, [esp+3Ch+var_1C]
.text:004093D7                 imul    esi, edi
.text:004093DA                 add     ecx, eax
.text:004093DC                 lea     edi, [esi+ecx]
.text:004093DF                 mov     esi, ebp
.text:004093E1                 sar     esi, 1Fh
.text:004093E4                 add     ebx, [esp+3Ch+var_2C]
.text:004093E8                 mov     [esp+3Ch+var_28], edi
.text:004093EC                 adc     esi, [esp+3Ch+var_28]
.text:004093F0                 cmp     esi, [esp+3Ch+var_18]
.text:004093F4                 jb      short loc_409400
.text:004093F6                 ja      short loc_409411
.text:004093F8                 cmp     ebx, [esp+3Ch+var_1C]
.text:004093FC                 jnb     short loc_409411
.text:004093FE                 mov     esi, esi
.text:00409400
.text:00409400 loc_409400:                             ; CODE XREF: _strtoull+1B0↑j
.text:00409400                                         ; _strtoull+1B8↑j ...
.text:00409400                 mov     [esp+3Ch+var_24], 1
.text:00409408
.text:00409408 loc_409408:                             ; CODE XREF: _strtoull+219↓j
.text:00409408                 inc     [esp+3Ch+String]
.text:0040940C                 jmp     loc_409330
.text:00409411 ; ---------------------------------------------------------------------------
.text:00409411
.text:00409411 loc_409411:                             ; CODE XREF: _strtoull+1F6↑j
.text:00409411                                         ; _strtoull+1FC↑j
.text:00409411                 mov     [esp+3Ch+var_1C], ebx
.text:00409415                 mov     [esp+3Ch+var_18], esi
.text:00409419                 jmp     short loc_409408
.text:0040941B ; ---------------------------------------------------------------------------
.text:0040941B
.text:0040941B loc_40941B:                             ; CODE XREF: _strtoull+171↑j
.text:0040941B                                         ; _strtoull+17B↑j
.text:0040941B                 mov     eax, [esp+3Ch+EndPtr]
.text:0040941F                 test    eax, eax
.text:00409421                 jz      short loc_40942E
.text:00409423                 mov     ecx, [esp+3Ch+String]
.text:00409427                 mov     ebp, [esp+3Ch+EndPtr]
.text:0040942B                 mov     [ebp+0], ecx
.text:0040942E
.text:0040942E loc_40942E:                             ; CODE XREF: _strtoull+221↑j
.text:0040942E                 mov     esi, [esp+3Ch+var_24]
.text:00409432                 test    esi, esi
.text:00409434                 jnz     short loc_409456
.text:00409436                 mov     ebx, [esp+3Ch+var_20]
.text:0040943A                 mov     eax, [esp+3Ch+var_1C]
.text:0040943E                 mov     edx, [esp+3Ch+var_18]
.text:00409442                 test    ebx, ebx
.text:00409444                 jz      loc_40923E
.text:0040944A                 neg     eax
.text:0040944C                 adc     edx, 0
.text:0040944F                 neg     edx
.text:00409451                 jmp     loc_40923E
.text:00409456 ; ---------------------------------------------------------------------------
.text:00409456
.text:00409456 loc_409456:                             ; CODE XREF: _strtoull+234↑j
.text:00409456                 call    _errno
.text:0040945B                 mov     edx, 0FFFFFFFFh
.text:00409460                 mov     dword ptr [eax], 22h ; '"'
.text:00409466                 mov     eax, 0FFFFFFFFh
.text:0040946B                 jmp     loc_40923E
.text:00409470 ; ---------------------------------------------------------------------------
.text:00409470
.text:00409470 loc_409470:                             ; CODE XREF: _strtoull+163↑j
.text:00409470                 mov     ebp, ds:__mb_cur_max
.text:00409476                 movsx   ecx, dl
.text:00409479                 cmp     dword ptr [ebp+0], 1
.text:0040947D                 jz      short loc_4094F1
.text:0040947F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00409487                 mov     [esp+3Ch+C], ecx ; C
.text:0040948A                 call    _isctype
.text:0040948F                 mov     ebp, [esp+3Ch+String]
.text:00409493                 movzx   edx, byte ptr [ebp+0]
.text:00409497
.text:00409497 loc_409497:                             ; CODE XREF: _strtoull+303↓j
.text:00409497                 test    eax, eax
.text:00409499                 jz      short loc_4094A8
.text:0040949B                 movsx   eax, dl
.text:0040949E                 sub     eax, 37h ; '7'
.text:004094A1
.text:004094A1 loc_4094A1:                             ; CODE XREF: _strtoull+2D4↓j
.text:004094A1                                         ; _strtoull+2DB↓j
.text:004094A1                 mov     ebp, eax
.text:004094A3                 jmp     loc_40936F
.text:004094A8 ; ---------------------------------------------------------------------------
.text:004094A8
.text:004094A8 loc_4094A8:                             ; CODE XREF: _strtoull+299↑j
.text:004094A8                 mov     ecx, ds:__mb_cur_max
.text:004094AE                 movsx   edx, dl
.text:004094B1                 cmp     dword ptr [ecx], 1
.text:004094B4                 jz      short loc_4094DD
.text:004094B6                 mov     [esp+3Ch+Type], 2 ; Type
.text:004094BE                 mov     [esp+3Ch+C], edx ; C
.text:004094C1                 call    _isctype
.text:004094C6
.text:004094C6 loc_4094C6:                             ; CODE XREF: _strtoull+2EF↓j
.text:004094C6                 test    eax, eax
.text:004094C8                 jz      short loc_4094D6
.text:004094CA                 mov     edx, [esp+3Ch+String]
.text:004094CE                 movsx   eax, byte ptr [edx]
.text:004094D1                 sub     eax, 57h ; 'W'
.text:004094D4                 jmp     short loc_4094A1
.text:004094D6 ; ---------------------------------------------------------------------------
.text:004094D6
.text:004094D6 loc_4094D6:                             ; CODE XREF: _strtoull+2C8↑j
.text:004094D6                 mov     eax, 0FFFFFFFFh
.text:004094DB                 jmp     short loc_4094A1
.text:004094DD ; ---------------------------------------------------------------------------
.text:004094DD
.text:004094DD loc_4094DD:                             ; CODE XREF: _strtoull+2B4↑j
.text:004094DD                 mov     edi, ds:_pctype
.text:004094E3                 mov     ebx, [edi]
.text:004094E5                 movzx   esi, word ptr [ebx+edx*2]
.text:004094E9                 and     esi, 2
.text:004094EC                 movzx   eax, si
.text:004094EF                 jmp     short loc_4094C6
.text:004094F1 ; ---------------------------------------------------------------------------
.text:004094F1
.text:004094F1 loc_4094F1:                             ; CODE XREF: _strtoull+27D↑j
.text:004094F1                 mov     edi, ds:_pctype
.text:004094F7                 mov     ebx, [edi]
.text:004094F9                 movzx   esi, word ptr [ebx+ecx*2]
.text:004094FD                 and     esi, 1
.text:00409500                 movzx   eax, si
.text:00409503                 jmp     short loc_409497
.text:00409505 ; ---------------------------------------------------------------------------
.text:00409505
.text:00409505 loc_409505:                             ; CODE XREF: _strtoull+144↑j
.text:00409505                 mov     ebx, ds:_pctype
.text:0040950B                 mov     esi, [ebx]
.text:0040950D                 movzx   edi, word ptr [esi+ecx*2]
.text:00409511                 and     edi, 4
.text:00409514                 movzx   eax, di
.text:00409517                 jmp     loc_409361
.text:0040951C ; ---------------------------------------------------------------------------
.text:0040951C
.text:0040951C loc_40951C:                             ; CODE XREF: _strtoull+ED↑j
.text:0040951C                 mov     ebx, ds:__mb_cur_max
.text:00409522                 movsx   ecx, dl
.text:00409525                 cmp     dword ptr [ebx], 1
.text:00409528                 jz      short loc_40959F
.text:0040952A                 mov     [esp+3Ch+C], ecx ; C
.text:0040952D                 mov     [esp+3Ch+Type], 1 ; Type
.text:00409535                 call    _isctype
.text:0040953A                 mov     ecx, [esp+3Ch+String]
.text:0040953E                 movzx   edx, byte ptr [ecx]
.text:00409541
.text:00409541 loc_409541:                             ; CODE XREF: _strtoull+3B1↓j
.text:00409541                 test    eax, eax
.text:00409543                 jz      short loc_409550
.text:00409545                 movsx   eax, dl
.text:00409548                 sub     eax, 37h ; '7'
.text:0040954B                 jmp     loc_4092F9
.text:00409550 ; ---------------------------------------------------------------------------
.text:00409550
.text:00409550 loc_409550:                             ; CODE XREF: _strtoull+343↑j
.text:00409550                 mov     ebx, ds:__mb_cur_max
.text:00409556                 movsx   edx, dl
.text:00409559                 cmp     dword ptr [ebx], 1
.text:0040955C                 jz      short loc_40958B
.text:0040955E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00409566                 mov     [esp+3Ch+C], edx ; C
.text:00409569                 call    _isctype
.text:0040956E
.text:0040956E loc_40956E:                             ; CODE XREF: _strtoull+39D↓j
.text:0040956E                 test    eax, eax
.text:00409570                 jz      short loc_409581
.text:00409572                 mov     ecx, [esp+3Ch+String]
.text:00409576                 movsx   eax, byte ptr [ecx]
.text:00409579                 sub     eax, 57h ; 'W'
.text:0040957C                 jmp     loc_4092F9
.text:00409581 ; ---------------------------------------------------------------------------
.text:00409581
.text:00409581 loc_409581:                             ; CODE XREF: _strtoull+370↑j
.text:00409581                 mov     eax, 0FFFFFFFFh
.text:00409586                 jmp     loc_4092F9
.text:0040958B ; ---------------------------------------------------------------------------
.text:0040958B
.text:0040958B loc_40958B:                             ; CODE XREF: _strtoull+35C↑j
.text:0040958B                 mov     esi, ds:_pctype
.text:00409591                 mov     edi, [esi]
.text:00409593                 movzx   ebp, word ptr [edi+edx*2]
.text:00409597                 and     ebp, 2
.text:0040959A                 movzx   eax, bp
.text:0040959D                 jmp     short loc_40956E
.text:0040959F ; ---------------------------------------------------------------------------
.text:0040959F
.text:0040959F loc_40959F:                             ; CODE XREF: _strtoull+328↑j
.text:0040959F                 mov     esi, ds:_pctype
.text:004095A5                 mov     edi, [esi]
.text:004095A7                 movzx   ebp, word ptr [edi+ecx*2]
.text:004095AB                 and     ebp, 1
.text:004095AE                 movzx   eax, bp
.text:004095B1                 jmp     short loc_409541
.text:004095B3 ; ---------------------------------------------------------------------------
.text:004095B3
.text:004095B3 loc_4095B3:                             ; CODE XREF: _strtoull+CE↑j
.text:004095B3                 mov     edi, ds:_pctype
.text:004095B9                 mov     ebp, [edi]
.text:004095BB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:004095C0                 and     ecx, 4
.text:004095C3                 movzx   eax, cx
.text:004095C6                 jmp     loc_4092EB
.text:004095CB ; ---------------------------------------------------------------------------
.text:004095CB
.text:004095CB loc_4095CB:                             ; CODE XREF: _strtoull+C2↑j
.text:004095CB                 cmp     dl, 30h ; '0'
.text:004095CE                 jnz     loc_4092C8
.text:004095D4                 mov     esi, [esp+3Ch+String]
.text:004095D8                 movzx   eax, byte ptr [esi+1]
.text:004095DC                 cmp     al, 58h ; 'X'
.text:004095DE                 jz      short loc_4095E8
.text:004095E0                 cmp     al, 78h ; 'x'
.text:004095E2                 jnz     loc_4092C8
.text:004095E8
.text:004095E8 loc_4095E8:                             ; CODE XREF: _strtoull+3DE↑j
.text:004095E8                 add     [esp+3Ch+String], 2
.text:004095ED                 mov     ebx, [esp+3Ch+String]
.text:004095F1                 movzx   edx, byte ptr [ebx]
.text:004095F4                 jmp     loc_4092C8
.text:004095F9 ; ---------------------------------------------------------------------------
.text:004095F9
.text:004095F9 loc_4095F9:                             ; CODE XREF: _strtoull+AF↑j
.text:004095F9                 mov     edi, [esp+3Ch+String]
.text:004095FD                 movzx   eax, byte ptr [edi+1]
.text:00409601                 cmp     al, 58h ; 'X'
.text:00409603                 jz      short loc_409615
.text:00409605                 mov     [esp+3Ch+Radix], 8
.text:0040960D                 cmp     al, 78h ; 'x'
.text:0040960F                 jnz     loc_4092BD
.text:00409615
.text:00409615 loc_409615:                             ; CODE XREF: _strtoull+403↑j
.text:00409615                 mov     [esp+3Ch+Radix], 10h
.text:0040961D                 jmp     loc_4092BD
.text:00409622 ; ---------------------------------------------------------------------------
.text:00409622
.text:00409622 loc_409622:                             ; CODE XREF: _strtoull+95↑j
.text:00409622                                         ; _strtoull+9E↑j
.text:00409622                 inc     [esp+3Ch+String]
.text:00409626                 mov     eax, [esp+3Ch+String]
.text:0040962A                 movzx   edx, byte ptr [eax]
.text:0040962D                 jmp     loc_4092A4
.text:00409632 ; ---------------------------------------------------------------------------
.text:00409632
.text:00409632 loc_409632:                             ; CODE XREF: _strtoull+5A↑j
.text:00409632                 mov     ebp, ds:_pctype
.text:00409638                 mov     edi, [ebp+0]
.text:0040963B                 movzx   ebx, word ptr [edi+edx*2]
.text:0040963F                 and     ebx, 8
.text:00409642                 movzx   eax, bx
.text:00409645                 jmp     loc_409276
.text:00409645 _strtoull       endp
.text:00409645
.text:00409645 ; ---------------------------------------------------------------------------
.text:0040964A                 align 10h
.text:00409650                 jmp     ds:__set_app_type
.text:00409650 ; ---------------------------------------------------------------------------
.text:00409656                 align 10h
.text:00409660
.text:00409660 ; =============== S U B R O U T I N E =======================================
.text:00409660
.text:00409660 ; Attributes: thunk
.text:00409660
.text:00409660 ; void __cdecl cexit()
.text:00409660 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00409660                 jmp     ds:__imp__cexit
.text:00409660 _cexit          endp
.text:00409660
.text:00409660 ; ---------------------------------------------------------------------------
.text:00409666                 align 10h
.text:00409670
.text:00409670 ; =============== S U B R O U T I N E =======================================
.text:00409670
.text:00409670 ; Attributes: thunk
.text:00409670
.text:00409670 ; char ***__cdecl _p__environ()
.text:00409670 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00409670                 jmp     ds:__imp___p__environ
.text:00409670 __p__environ    endp
.text:00409670
.text:00409670 ; ---------------------------------------------------------------------------
.text:00409676                 align 10h
.text:00409680
.text:00409680 ; =============== S U B R O U T I N E =======================================
.text:00409680
.text:00409680 ; Attributes: thunk
.text:00409680
.text:00409680 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00409680 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00409680                                         ; TopLevelExceptionFilter+88↑p ...
.text:00409680
.text:00409680 Signal          = dword ptr  4
.text:00409680 Function        = dword ptr  8
.text:00409680
.text:00409680                 jmp     ds:__imp_signal
.text:00409680 signal          endp
.text:00409680
.text:00409680 ; ---------------------------------------------------------------------------
.text:00409686                 align 10h
.text:00409690
.text:00409690 ; =============== S U B R O U T I N E =======================================
.text:00409690
.text:00409690 ; Attributes: thunk
.text:00409690
.text:00409690 ; int *__cdecl _p__fmode()
.text:00409690 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00409690                 jmp     ds:__imp___p__fmode
.text:00409690 __p__fmode      endp
.text:00409690
.text:00409690 ; ---------------------------------------------------------------------------
.text:00409696                 align 10h
.text:004096A0
.text:004096A0 ; =============== S U B R O U T I N E =======================================
.text:004096A0
.text:004096A0 ; Attributes: thunk
.text:004096A0
.text:004096A0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004096A0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004096A0                                         ; sub_401080+90↑p ...
.text:004096A0
.text:004096A0 FileHandle      = dword ptr  4
.text:004096A0 Mode            = dword ptr  8
.text:004096A0
.text:004096A0                 jmp     ds:__imp__setmode
.text:004096A0 _setmode        endp
.text:004096A0
.text:004096A0 ; ---------------------------------------------------------------------------
.text:004096A6                 align 10h
.text:004096B0
.text:004096B0 ; =============== S U B R O U T I N E =======================================
.text:004096B0
.text:004096B0 ; Attributes: thunk
.text:004096B0
.text:004096B0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004096B0                 jmp     ds:__imp___getmainargs
.text:004096B0 __getmainargs   endp
.text:004096B0
.text:004096B0 ; ---------------------------------------------------------------------------
.text:004096B6                 align 10h
.text:004096C0
.text:004096C0 ; =============== S U B R O U T I N E =======================================
.text:004096C0
.text:004096C0 ; Attributes: thunk
.text:004096C0
.text:004096C0 ; int __cdecl tolower(int C)
.text:004096C0 tolower         proc near               ; CODE XREF: sub_402390+833↑p
.text:004096C0
.text:004096C0 C               = dword ptr  4
.text:004096C0
.text:004096C0                 jmp     ds:__imp_tolower
.text:004096C0 tolower         endp
.text:004096C0
.text:004096C0 ; ---------------------------------------------------------------------------
.text:004096C6                 align 10h
.text:004096D0
.text:004096D0 ; =============== S U B R O U T I N E =======================================
.text:004096D0
.text:004096D0 ; Attributes: thunk
.text:004096D0
.text:004096D0 ; int __cdecl toupper(int C)
.text:004096D0 toupper         proc near               ; CODE XREF: sub_402390+893↑p
.text:004096D0
.text:004096D0 C               = dword ptr  4
.text:004096D0
.text:004096D0                 jmp     ds:__imp_toupper
.text:004096D0 toupper         endp
.text:004096D0
.text:004096D0 ; ---------------------------------------------------------------------------
.text:004096D6                 align 10h
.text:004096E0
.text:004096E0 ; =============== S U B R O U T I N E =======================================
.text:004096E0
.text:004096E0 ; Attributes: thunk
.text:004096E0
.text:004096E0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004096E0 setlocale       proc near               ; CODE XREF: sub_402390+41↑p
.text:004096E0
.text:004096E0 Category        = dword ptr  4
.text:004096E0 Locale          = dword ptr  8
.text:004096E0
.text:004096E0                 jmp     ds:__imp_setlocale
.text:004096E0 setlocale       endp
.text:004096E0
.text:004096E0 ; ---------------------------------------------------------------------------
.text:004096E6                 align 10h
.text:004096F0
.text:004096F0 ; =============== S U B R O U T I N E =======================================
.text:004096F0
.text:004096F0 ; Attributes: thunk
.text:004096F0
.text:004096F0 ; int *__cdecl errno()
.text:004096F0 _errno          proc near               ; CODE XREF: sub_402390+581↑p
.text:004096F0                                         ; sub_402390+623↑p ...
.text:004096F0                 jmp     ds:__imp__errno
.text:004096F0 _errno          endp
.text:004096F0
.text:004096F0 ; ---------------------------------------------------------------------------
.text:004096F6                 align 10h
.text:00409700
.text:00409700 ; =============== S U B R O U T I N E =======================================
.text:00409700
.text:00409700 ; Attributes: thunk
.text:00409700
.text:00409700 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00409700 fwrite          proc near               ; CODE XREF: sub_402390+60B↑p
.text:00409700                                         ; sub_402390+A80↑p ...
.text:00409700
.text:00409700 Buffer          = dword ptr  4
.text:00409700 ElementSize     = dword ptr  8
.text:00409700 ElementCount    = dword ptr  0Ch
.text:00409700 Stream          = dword ptr  10h
.text:00409700
.text:00409700                 jmp     ds:__imp_fwrite
.text:00409700 fwrite          endp
.text:00409700
.text:00409700 ; ---------------------------------------------------------------------------
.text:00409706                 align 10h
.text:00409710
.text:00409710 ; =============== S U B R O U T I N E =======================================
.text:00409710
.text:00409710 ; Attributes: noreturn thunk
.text:00409710
.text:00409710 _assert         proc near               ; CODE XREF: sub_401460:loc_4015A6↑p
.text:00409710                                         ; sub_402390:loc_402A19↑p ...
.text:00409710                 jmp     ds:__imp__assert
.text:00409710 _assert         endp
.text:00409710
.text:00409710 ; ---------------------------------------------------------------------------
.text:00409716                 align 10h
.text:00409720
.text:00409720 ; =============== S U B R O U T I N E =======================================
.text:00409720
.text:00409720 ; Attributes: thunk
.text:00409720
.text:00409720 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00409720 sprintf         proc near               ; CODE XREF: sub_403910+2BF↑p
.text:00409720                                         ; sub_403910+2EF↑p ...
.text:00409720
.text:00409720 Buffer          = dword ptr  4
.text:00409720 Format          = dword ptr  8
.text:00409720
.text:00409720                 jmp     ds:__imp_sprintf
.text:00409720 sprintf         endp
.text:00409720
.text:00409720 ; ---------------------------------------------------------------------------
.text:00409726                 align 10h
.text:00409730
.text:00409730 ; =============== S U B R O U T I N E =======================================
.text:00409730
.text:00409730 ; Attributes: thunk
.text:00409730
.text:00409730 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00409730 strncmp         proc near               ; CODE XREF: sub_403910+573↑p
.text:00409730                                         ; sub_405180+30F↑p ...
.text:00409730
.text:00409730 Str1            = dword ptr  4
.text:00409730 Str2            = dword ptr  8
.text:00409730 MaxCount        = dword ptr  0Ch
.text:00409730
.text:00409730                 jmp     ds:__imp_strncmp
.text:00409730 strncmp         endp
.text:00409730
.text:00409730 ; ---------------------------------------------------------------------------
.text:00409736                 align 10h
.text:00409740
.text:00409740 ; =============== S U B R O U T I N E =======================================
.text:00409740
.text:00409740 ; Attributes: thunk
.text:00409740
.text:00409740 ; size_t __cdecl strlen(const char *Str)
.text:00409740 strlen          proc near               ; CODE XREF: sub_4035F0+14↑p
.text:00409740                                         ; sub_403910+685↑p ...
.text:00409740
.text:00409740 Str             = dword ptr  4
.text:00409740
.text:00409740                 jmp     ds:__imp_strlen
.text:00409740 strlen          endp
.text:00409740
.text:00409740 ; ---------------------------------------------------------------------------
.text:00409746                 align 10h
.text:00409750
.text:00409750 ; =============== S U B R O U T I N E =======================================
.text:00409750
.text:00409750 ; Attributes: thunk
.text:00409750
.text:00409750 ; void __cdecl free(void *Block)
.text:00409750 free            proc near               ; CODE XREF: sub_402390+3B7↑p
.text:00409750                                         ; sub_402390+3C5↑p ...
.text:00409750
.text:00409750 Block           = dword ptr  4
.text:00409750
.text:00409750                 jmp     ds:__imp_free
.text:00409750 free            endp
.text:00409750
.text:00409750 ; ---------------------------------------------------------------------------
.text:00409756                 align 10h
.text:00409760
.text:00409760 ; =============== S U B R O U T I N E =======================================
.text:00409760
.text:00409760 ; Attributes: noreturn thunk
.text:00409760
.text:00409760 ; void __cdecl __noreturn abort()
.text:00409760 abort           proc near               ; CODE XREF: sub_401460:def_4014B8↑p
.text:00409760                                         ; sub_4032B0:def_4032C9↑p ...
.text:00409760                 jmp     ds:__imp_abort
.text:00409760 abort           endp
.text:00409760
.text:00409760 ; ---------------------------------------------------------------------------
.text:00409766                 align 10h
.text:00409770
.text:00409770 ; =============== S U B R O U T I N E =======================================
.text:00409770
.text:00409770 ; Attributes: noreturn thunk
.text:00409770
.text:00409770 ; void __cdecl __noreturn exit(int Code)
.text:00409770 exit            proc near               ; CODE XREF: sub_402390:loc_40249E↑p
.text:00409770                                         ; .text:0040312B↑p ...
.text:00409770
.text:00409770 Code            = dword ptr  4
.text:00409770
.text:00409770                 jmp     ds:__imp_exit
.text:00409770 exit            endp
.text:00409770
.text:00409770 ; ---------------------------------------------------------------------------
.text:00409776                 align 10h
.text:00409780
.text:00409780 ; =============== S U B R O U T I N E =======================================
.text:00409780
.text:00409780 ; Attributes: thunk
.text:00409780
.text:00409780 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00409780 fputs           proc near               ; CODE XREF: sub_402390+198↑p
.text:00409780                                         ; sub_402390+1BA↑p ...
.text:00409780
.text:00409780 Buffer          = dword ptr  4
.text:00409780 Stream          = dword ptr  8
.text:00409780
.text:00409780                 jmp     ds:__imp_fputs
.text:00409780 fputs           endp
.text:00409780
.text:00409780 ; ---------------------------------------------------------------------------
.text:00409786                 align 10h
.text:00409790
.text:00409790 ; =============== S U B R O U T I N E =======================================
.text:00409790
.text:00409790 ; Attributes: thunk
.text:00409790
.text:00409790 ; int printf(const char *const Format, ...)
.text:00409790 printf          proc near               ; CODE XREF: sub_402390+176↑p
.text:00409790                                         ; sub_402390+2C5↑p ...
.text:00409790
.text:00409790 Format          = dword ptr  4
.text:00409790
.text:00409790                 jmp     ds:__imp_printf
.text:00409790 printf          endp
.text:00409790
.text:00409790 ; ---------------------------------------------------------------------------
.text:00409796                 align 10h
.text:004097A0
.text:004097A0 ; =============== S U B R O U T I N E =======================================
.text:004097A0
.text:004097A0 ; Attributes: thunk
.text:004097A0
.text:004097A0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004097A0 fprintf         proc near               ; CODE XREF: sub_402390+102↑p
.text:004097A0                                         ; sub_402390+CB5↑p ...
.text:004097A0
.text:004097A0 Stream          = dword ptr  4
.text:004097A0 Format          = dword ptr  8
.text:004097A0
.text:004097A0                 jmp     ds:__imp_fprintf
.text:004097A0 fprintf         endp
.text:004097A0
.text:004097A0 ; ---------------------------------------------------------------------------
.text:004097A6                 align 10h
.text:004097B0
.text:004097B0 ; =============== S U B R O U T I N E =======================================
.text:004097B0
.text:004097B0 ; Attributes: thunk
.text:004097B0
.text:004097B0 ; int __cdecl isctype(int C, int Type)
.text:004097B0 _isctype        proc near               ; CODE XREF: sub_402390+816↑p
.text:004097B0                                         ; sub_402390+876↑p ...
.text:004097B0
.text:004097B0 C               = dword ptr  4
.text:004097B0 Type            = dword ptr  8
.text:004097B0
.text:004097B0                 jmp     ds:__imp__isctype
.text:004097B0 _isctype        endp
.text:004097B0
.text:004097B0 ; ---------------------------------------------------------------------------
.text:004097B6                 align 10h
.text:004097C0
.text:004097C0 ; =============== S U B R O U T I N E =======================================
.text:004097C0
.text:004097C0 ; Attributes: thunk
.text:004097C0
.text:004097C0 ; char *__cdecl getenv(const char *VarName)
.text:004097C0 getenv          proc near               ; CODE XREF: sub_405180+C27↑p
.text:004097C0
.text:004097C0 VarName         = dword ptr  4
.text:004097C0
.text:004097C0                 jmp     ds:__imp_getenv
.text:004097C0 getenv          endp
.text:004097C0
.text:004097C0 ; ---------------------------------------------------------------------------
.text:004097C6                 align 10h
.text:004097D0
.text:004097D0 ; =============== S U B R O U T I N E =======================================
.text:004097D0
.text:004097D0 ; Attributes: thunk
.text:004097D0
.text:004097D0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004097D0 strchr          proc near               ; CODE XREF: sub_405180+539↑p
.text:004097D0                                         ; sub_405180+60A↑p ...
.text:004097D0
.text:004097D0 Str             = dword ptr  4
.text:004097D0 Val             = dword ptr  8
.text:004097D0
.text:004097D0                 jmp     ds:__imp_strchr
.text:004097D0 strchr          endp
.text:004097D0
.text:004097D0 ; ---------------------------------------------------------------------------
.text:004097D6                 align 10h
.text:004097E0
.text:004097E0 ; =============== S U B R O U T I N E =======================================
.text:004097E0
.text:004097E0 ; Attributes: thunk
.text:004097E0
.text:004097E0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004097E0 vfprintf        proc near               ; CODE XREF: sub_406370+C1↑p
.text:004097E0                                         ; sub_408C60+49↑p ...
.text:004097E0
.text:004097E0 Stream          = dword ptr  4
.text:004097E0 Format          = dword ptr  8
.text:004097E0 ArgList         = dword ptr  0Ch
.text:004097E0
.text:004097E0                 jmp     ds:__imp_vfprintf
.text:004097E0 vfprintf        endp
.text:004097E0
.text:004097E0 ; ---------------------------------------------------------------------------
.text:004097E6                 align 10h
.text:004097F0
.text:004097F0 ; =============== S U B R O U T I N E =======================================
.text:004097F0
.text:004097F0 ; Attributes: thunk
.text:004097F0
.text:004097F0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004097F0 _flsbuf         proc near               ; CODE XREF: sub_406370+128↑p
.text:004097F0                                         ; sub_406370+13A↑p ...
.text:004097F0
.text:004097F0 File            = dword ptr  8
.text:004097F0
.text:004097F0                 jmp     ds:__imp__flsbuf
.text:004097F0 _flsbuf         endp
.text:004097F0
.text:004097F0 ; ---------------------------------------------------------------------------
.text:004097F6                 align 10h
.text:00409800
.text:00409800 ; =============== S U B R O U T I N E =======================================
.text:00409800
.text:00409800 ; Attributes: thunk
.text:00409800
.text:00409800 ; int __cdecl fclose(FILE *Stream)
.text:00409800 fclose          proc near               ; CODE XREF: sub_4066F0+27↑p
.text:00409800
.text:00409800 Stream          = dword ptr  4
.text:00409800
.text:00409800                 jmp     ds:__imp_fclose
.text:00409800 fclose          endp
.text:00409800
.text:00409800 ; ---------------------------------------------------------------------------
.text:00409806                 align 10h
.text:00409810
.text:00409810 ; =============== S U B R O U T I N E =======================================
.text:00409810
.text:00409810 ; Attributes: thunk
.text:00409810
.text:00409810 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00409810 memcpy          proc near               ; CODE XREF: .text:00407728↑p
.text:00409810                                         ; .text:00407771↑p
.text:00409810
.text:00409810 Src             = dword ptr  8
.text:00409810 Size            = dword ptr  0Ch
.text:00409810
.text:00409810                 jmp     ds:__imp_memcpy
.text:00409810 memcpy          endp
.text:00409810
.text:00409810 ; ---------------------------------------------------------------------------
.text:00409816                 align 10h
.text:00409820
.text:00409820 ; =============== S U B R O U T I N E =======================================
.text:00409820
.text:00409820 ; Attributes: thunk
.text:00409820
.text:00409820 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00409820 memset          proc near               ; CODE XREF: .text:004076A6↑p
.text:00409820
.text:00409820 Val             = dword ptr  8
.text:00409820 Size            = dword ptr  0Ch
.text:00409820
.text:00409820                 jmp     ds:__imp_memset
.text:00409820 memset          endp
.text:00409820
.text:00409820 ; ---------------------------------------------------------------------------
.text:00409826                 align 10h
.text:00409830
.text:00409830 ; =============== S U B R O U T I N E =======================================
.text:00409830
.text:00409830 ; Attributes: thunk
.text:00409830
.text:00409830 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00409830 calloc          proc near               ; CODE XREF: sub_4076C0+23↑p
.text:00409830
.text:00409830 Count           = dword ptr  4
.text:00409830 Size            = dword ptr  8
.text:00409830
.text:00409830                 jmp     ds:__imp_calloc
.text:00409830 calloc          endp
.text:00409830
.text:00409830 ; ---------------------------------------------------------------------------
.text:00409836                 align 10h
.text:00409840
.text:00409840 ; =============== S U B R O U T I N E =======================================
.text:00409840
.text:00409840 ; Attributes: thunk
.text:00409840
.text:00409840 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00409840 realloc         proc near               ; CODE XREF: .text:004075E0↑p
.text:00409840                                         ; sub_407610+16↑p ...
.text:00409840
.text:00409840 Block           = dword ptr  4
.text:00409840 Size            = dword ptr  8
.text:00409840
.text:00409840                 jmp     ds:__imp_realloc
.text:00409840 realloc         endp
.text:00409840
.text:00409840 ; ---------------------------------------------------------------------------
.text:00409846                 align 10h
.text:00409850
.text:00409850 ; =============== S U B R O U T I N E =======================================
.text:00409850
.text:00409850 ; Attributes: thunk
.text:00409850
.text:00409850 ; void *__cdecl malloc(size_t Size)
.text:00409850 malloc          proc near               ; CODE XREF: sub_407540+24↑p
.text:00409850                                         ; sub_407580+E↑p ...
.text:00409850
.text:00409850 Size            = dword ptr  4
.text:00409850
.text:00409850                 jmp     ds:__imp_malloc
.text:00409850 malloc          endp
.text:00409850
.text:00409850 ; ---------------------------------------------------------------------------
.text:00409856                 align 10h
.text:00409860
.text:00409860 ; =============== S U B R O U T I N E =======================================
.text:00409860
.text:00409860 ; Attributes: thunk
.text:00409860
.text:00409860 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00409860 iswctype        proc near               ; CODE XREF: sub_4078A0+78B↑p
.text:00409860
.text:00409860 C               = word ptr  4
.text:00409860 Type            = word ptr  8
.text:00409860
.text:00409860                 jmp     ds:__imp_iswctype
.text:00409860 iswctype        endp
.text:00409860
.text:00409860 ; ---------------------------------------------------------------------------
.text:00409866                 align 10h
.text:00409870
.text:00409870 ; =============== S U B R O U T I N E =======================================
.text:00409870
.text:00409870 ; Attributes: thunk
.text:00409870
.text:00409870 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00409870 strcmp          proc near               ; CODE XREF: sub_408D64+180↑p
.text:00409870
.text:00409870 Str1            = dword ptr  4
.text:00409870 Str2            = dword ptr  8
.text:00409870
.text:00409870                 jmp     ds:__imp_strcmp
.text:00409870 strcmp          endp
.text:00409870
.text:00409870 ; ---------------------------------------------------------------------------
.text:00409876                 align 10h
.text:00409880
.text:00409880 ; =============== S U B R O U T I N E =======================================
.text:00409880
.text:00409880 ; Attributes: thunk
.text:00409880
.text:00409880 ; int __cdecl fflush(FILE *Stream)
.text:00409880 fflush          proc near               ; CODE XREF: sub_408C60+19↑p
.text:00409880                                         ; sub_408C60+81↑p ...
.text:00409880
.text:00409880 Stream          = dword ptr  4
.text:00409880
.text:00409880                 jmp     ds:__imp_fflush
.text:00409880 fflush          endp
.text:00409880
.text:00409880 ; ---------------------------------------------------------------------------
.text:00409886                 align 10h
.text:00409890
.text:00409890 ; =============== S U B R O U T I N E =======================================
.text:00409890
.text:00409890 ; Attributes: thunk
.text:00409890
.text:00409890 ; char *__cdecl strerror(int ErrorMessage)
.text:00409890 strerror        proc near               ; CODE XREF: sub_408C60+A5↑p
.text:00409890                                         ; sub_408D64+10F↑p
.text:00409890
.text:00409890 ErrorMessage    = dword ptr  4
.text:00409890
.text:00409890                 jmp     ds:__imp_strerror
.text:00409890 strerror        endp
.text:00409890
.text:00409890 ; ---------------------------------------------------------------------------
.text:00409896                 align 10h
.text:004098A0
.text:004098A0 ; =============== S U B R O U T I N E =======================================
.text:004098A0
.text:004098A0 ; Attributes: thunk
.text:004098A0
.text:004098A0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004098A0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004098A0
.text:004098A0 lpTopLevelExceptionFilter= dword ptr  4
.text:004098A0
.text:004098A0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004098A0 SetUnhandledExceptionFilter endp
.text:004098A0
.text:004098A0 ; ---------------------------------------------------------------------------
.text:004098A6                 align 10h
.text:004098B0
.text:004098B0 ; =============== S U B R O U T I N E =======================================
.text:004098B0
.text:004098B0 ; Attributes: noreturn thunk
.text:004098B0
.text:004098B0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004098B0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004098B0
.text:004098B0 uExitCode       = dword ptr  4
.text:004098B0
.text:004098B0                 jmp     ds:__imp_ExitProcess
.text:004098B0 ExitProcess     endp
.text:004098B0
.text:004098B0 ; ---------------------------------------------------------------------------
.text:004098B6                 align 10h
.text:004098C0 dword_4098C0    dd 0FFFFFFFFh           ; DATA XREF: .text:00408FB9↑r
.text:004098C0                                         ; .text:loc_408FE0↑r ...
.text:004098C4 dword_4098C4    dd 0                    ; DATA XREF: .text:loc_408FEC↑r
.text:004098C4                                         ; sub_409010:loc_40905D↑r
.text:004098C8                 dd 0FFFFFFFFh
.text:004098CC dword_4098CC    dd 4Dh dup(0)           ; DATA XREF: .data:off_40A084↓o
.text:00409A00                 dd 180h dup(?)
.text:00409A00 _text           ends
.text:00409A00
.data:0040A000 ; Section 2. (virtual address 0000A000)
.data:0040A000 ; Virtual size                  : 000000A0 (    160.)
.data:0040A000 ; Section size in file          : 00000200 (    512.)
.data:0040A000 ; Offset to raw data for section: 00008E00
.data:0040A000 ; Flags C0000040: Data Readable Writable
.data:0040A000 ; Alignment     : default
.data:0040A000 ; ===========================================================================
.data:0040A000
.data:0040A000 ; Segment type: Pure data
.data:0040A000 ; Segment permissions: Read/Write
.data:0040A000 _data           segment para public 'DATA' use32
.data:0040A000                 assume cs:_data
.data:0040A000                 ;org 40A000h
.data:0040A000 dword_40A000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040A000                                         ; sub_401080+CC↑r
.data:0040A004 dword_40A004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040A004                                         ; sub_401080+D4↑r
.data:0040A008                 align 10h
.data:0040A010 dword_40A010    dd 1                    ; DATA XREF: sub_402390:loc_4026A0↑r
.data:0040A010                                         ; sub_402390+37A↑r ...
.data:0040A014 dword_40A014    dd 1                    ; DATA XREF: sub_405DE0+11↑r
.data:0040A014                                         ; .text:00405E81↑r
.data:0040A018 dword_40A018    dd 3Fh                  ; DATA XREF: sub_405DE0+7D↑w
.data:0040A018                                         ; .text:00405EED↑w
.data:0040A01C                 align 10h
.data:0040A020 ; char *Buffer
.data:0040A020 Buffer          dd offset aCopyrightC2005
.data:0040A020                                         ; DATA XREF: sub_406370+DC↑r
.data:0040A020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040A024                 align 10h
.data:0040A030 dword_40A030    dd 1                    ; DATA XREF: sub_4089E0+22↑r
.data:0040A030                                         ; sub_4089E0+65↑r ...
.data:0040A034 dword_40A034    dd 100h                 ; DATA XREF: sub_4089E0+3F↑o
.data:0040A034                                         ; sub_4089E0+1A2↑r ...
.data:0040A038 off_40A038      dd offset unk_40B590    ; DATA XREF: sub_4089E0+1AA↑r
.data:0040A03C ; void *off_40A03C
.data:0040A03C off_40A03C      dd offset dword_40A034  ; DATA XREF: sub_4089E0+39↑r
.data:0040A03C                                         ; sub_4089E0+60↑w ...
.data:0040A040 ; int Code
.data:0040A040 Code            dd 1                    ; DATA XREF: sub_4066F0+6D↑r
.data:0040A040                                         ; sub_4066F0+9A↑r ...
.data:0040A044                 align 10h
.data:0040A050 dword_40A050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040A054                 align 10h
.data:0040A060 ; int Mode
.data:0040A060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040A060                                         ; sub_401080+80↑r ...
.data:0040A064                 align 10h
.data:0040A070 dword_40A070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040A070                                         ; sub_401080+BA↑r
.data:0040A074                 align 10h
.data:0040A080 dword_40A080    dd 0                    ; DATA XREF: sub_409010+9↑r
.data:0040A080                                         ; sub_409010+1D↑w
.data:0040A084 off_40A084      dd offset dword_4098CC  ; DATA XREF: sub_408F80+6↑r
.data:0040A084                                         ; sub_408F80+17↑r ...
.data:0040A088                 align 1000h
.data:0040A088 _data           ends
.data:0040A088
.bss:0040B000 ; Section 3. (virtual address 0000B000)
.bss:0040B000 ; Virtual size                  : 00000780 (   1920.)
.bss:0040B000 ; Section size in file          : 00000000 (      0.)
.bss:0040B000 ; Offset to raw data for section: 00000000
.bss:0040B000 ; Flags C0000080: Bss Readable Writable
.bss:0040B000 ; Alignment     : default
.bss:0040B000 ; ===========================================================================
.bss:0040B000
.bss:0040B000 ; Segment type: Uninitialized
.bss:0040B000 ; Segment permissions: Read/Write
.bss:0040B000 _bss            segment para public 'BSS' use32
.bss:0040B000                 assume cs:_bss
.bss:0040B000                 ;org 40B000h
.bss:0040B000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040B000 byte_40B000     db ?                    ; DATA XREF: sub_402390:loc_402694↑w
.bss:0040B000                                         ; sub_402390:loc_4026C7↑r ...
.bss:0040B001                 align 10h
.bss:0040B010 byte_40B010     db ?                    ; DATA XREF: sub_402390+2E3↑w
.bss:0040B010                                         ; sub_402390+32A↑r ...
.bss:0040B011                 align 10h
.bss:0040B020 byte_40B020     db ?                    ; DATA XREF: sub_402390:loc_402462↑w
.bss:0040B020                                         ; sub_402390+457↑r ...
.bss:0040B021                 align 10h
.bss:0040B030 byte_40B030     db ?                    ; DATA XREF: sub_402390+2F8↑w
.bss:0040B030                                         ; sub_402390+4F0↑r ...
.bss:0040B031                 align 10h
.bss:0040B040 byte_40B040     db ?                    ; DATA XREF: sub_402390+340↑w
.bss:0040B040                                         ; sub_402390:loc_4027DA↑r ...
.bss:0040B041                 align 10h
.bss:0040B050 byte_40B050     db ?                    ; DATA XREF: sub_402390+552↑o
.bss:0040B050                                         ; sub_402390+5A9↑o ...
.bss:0040B051                 db    ? ;
.bss:0040B052                 db    ? ;
.bss:0040B053                 db    ? ;
.bss:0040B054                 db    ? ;
.bss:0040B055                 db    ? ;
.bss:0040B056                 db    ? ;
.bss:0040B057                 db    ? ;
.bss:0040B058                 db    ? ;
.bss:0040B059                 db    ? ;
.bss:0040B05A                 db    ? ;
.bss:0040B05B                 db    ? ;
.bss:0040B05C                 db    ? ;
.bss:0040B05D                 db    ? ;
.bss:0040B05E                 db    ? ;
.bss:0040B05F                 db    ? ;
.bss:0040B060                 db    ? ;
.bss:0040B061                 db    ? ;
.bss:0040B062                 db    ? ;
.bss:0040B063                 db    ? ;
.bss:0040B064                 db    ? ;
.bss:0040B065                 db    ? ;
.bss:0040B066                 db    ? ;
.bss:0040B067                 db    ? ;
.bss:0040B068                 db    ? ;
.bss:0040B069                 db    ? ;
.bss:0040B06A                 db    ? ;
.bss:0040B06B                 db    ? ;
.bss:0040B06C                 db    ? ;
.bss:0040B06D                 db    ? ;
.bss:0040B06E                 db    ? ;
.bss:0040B06F                 db    ? ;
.bss:0040B070                 db    ? ;
.bss:0040B071                 db    ? ;
.bss:0040B072                 db    ? ;
.bss:0040B073                 db    ? ;
.bss:0040B074                 db    ? ;
.bss:0040B075                 db    ? ;
.bss:0040B076                 db    ? ;
.bss:0040B077                 db    ? ;
.bss:0040B078                 db    ? ;
.bss:0040B079                 db    ? ;
.bss:0040B07A                 db    ? ;
.bss:0040B07B                 db    ? ;
.bss:0040B07C                 db    ? ;
.bss:0040B07D                 db    ? ;
.bss:0040B07E                 db    ? ;
.bss:0040B07F                 db    ? ;
.bss:0040B080                 db    ? ;
.bss:0040B081                 db    ? ;
.bss:0040B082                 db    ? ;
.bss:0040B083                 db    ? ;
.bss:0040B084                 db    ? ;
.bss:0040B085                 db    ? ;
.bss:0040B086                 db    ? ;
.bss:0040B087                 db    ? ;
.bss:0040B088                 db    ? ;
.bss:0040B089                 db    ? ;
.bss:0040B08A                 db    ? ;
.bss:0040B08B                 db    ? ;
.bss:0040B08C                 db    ? ;
.bss:0040B08D                 db    ? ;
.bss:0040B08E                 db    ? ;
.bss:0040B08F                 db    ? ;
.bss:0040B090                 db    ? ;
.bss:0040B091                 db    ? ;
.bss:0040B092                 db    ? ;
.bss:0040B093                 db    ? ;
.bss:0040B094                 db    ? ;
.bss:0040B095                 db    ? ;
.bss:0040B096                 db    ? ;
.bss:0040B097                 db    ? ;
.bss:0040B098                 db    ? ;
.bss:0040B099                 db    ? ;
.bss:0040B09A                 db    ? ;
.bss:0040B09B                 db    ? ;
.bss:0040B09C                 db    ? ;
.bss:0040B09D                 db    ? ;
.bss:0040B09E                 db    ? ;
.bss:0040B09F                 db    ? ;
.bss:0040B0A0                 db    ? ;
.bss:0040B0A1                 db    ? ;
.bss:0040B0A2                 db    ? ;
.bss:0040B0A3                 db    ? ;
.bss:0040B0A4                 db    ? ;
.bss:0040B0A5                 db    ? ;
.bss:0040B0A6                 db    ? ;
.bss:0040B0A7                 db    ? ;
.bss:0040B0A8                 db    ? ;
.bss:0040B0A9                 db    ? ;
.bss:0040B0AA                 db    ? ;
.bss:0040B0AB                 db    ? ;
.bss:0040B0AC                 db    ? ;
.bss:0040B0AD                 db    ? ;
.bss:0040B0AE                 db    ? ;
.bss:0040B0AF                 db    ? ;
.bss:0040B0B0                 db    ? ;
.bss:0040B0B1                 db    ? ;
.bss:0040B0B2                 db    ? ;
.bss:0040B0B3                 db    ? ;
.bss:0040B0B4                 db    ? ;
.bss:0040B0B5                 db    ? ;
.bss:0040B0B6                 db    ? ;
.bss:0040B0B7                 db    ? ;
.bss:0040B0B8                 db    ? ;
.bss:0040B0B9                 db    ? ;
.bss:0040B0BA                 db    ? ;
.bss:0040B0BB                 db    ? ;
.bss:0040B0BC                 db    ? ;
.bss:0040B0BD                 db    ? ;
.bss:0040B0BE                 db    ? ;
.bss:0040B0BF                 db    ? ;
.bss:0040B0C0                 db    ? ;
.bss:0040B0C1                 db    ? ;
.bss:0040B0C2                 db    ? ;
.bss:0040B0C3                 db    ? ;
.bss:0040B0C4                 db    ? ;
.bss:0040B0C5                 db    ? ;
.bss:0040B0C6                 db    ? ;
.bss:0040B0C7                 db    ? ;
.bss:0040B0C8                 db    ? ;
.bss:0040B0C9                 db    ? ;
.bss:0040B0CA                 db    ? ;
.bss:0040B0CB                 db    ? ;
.bss:0040B0CC                 db    ? ;
.bss:0040B0CD                 db    ? ;
.bss:0040B0CE                 db    ? ;
.bss:0040B0CF                 db    ? ;
.bss:0040B0D0                 db    ? ;
.bss:0040B0D1                 db    ? ;
.bss:0040B0D2                 db    ? ;
.bss:0040B0D3                 db    ? ;
.bss:0040B0D4                 db    ? ;
.bss:0040B0D5                 db    ? ;
.bss:0040B0D6                 db    ? ;
.bss:0040B0D7                 db    ? ;
.bss:0040B0D8                 db    ? ;
.bss:0040B0D9                 db    ? ;
.bss:0040B0DA                 db    ? ;
.bss:0040B0DB                 db    ? ;
.bss:0040B0DC                 db    ? ;
.bss:0040B0DD                 db    ? ;
.bss:0040B0DE                 db    ? ;
.bss:0040B0DF                 db    ? ;
.bss:0040B0E0                 db    ? ;
.bss:0040B0E1                 db    ? ;
.bss:0040B0E2                 db    ? ;
.bss:0040B0E3                 db    ? ;
.bss:0040B0E4                 db    ? ;
.bss:0040B0E5                 db    ? ;
.bss:0040B0E6                 db    ? ;
.bss:0040B0E7                 db    ? ;
.bss:0040B0E8                 db    ? ;
.bss:0040B0E9                 db    ? ;
.bss:0040B0EA                 db    ? ;
.bss:0040B0EB                 db    ? ;
.bss:0040B0EC                 db    ? ;
.bss:0040B0ED                 db    ? ;
.bss:0040B0EE                 db    ? ;
.bss:0040B0EF                 db    ? ;
.bss:0040B0F0                 db    ? ;
.bss:0040B0F1                 db    ? ;
.bss:0040B0F2                 db    ? ;
.bss:0040B0F3                 db    ? ;
.bss:0040B0F4                 db    ? ;
.bss:0040B0F5                 db    ? ;
.bss:0040B0F6                 db    ? ;
.bss:0040B0F7                 db    ? ;
.bss:0040B0F8                 db    ? ;
.bss:0040B0F9                 db    ? ;
.bss:0040B0FA                 db    ? ;
.bss:0040B0FB                 db    ? ;
.bss:0040B0FC                 db    ? ;
.bss:0040B0FD                 db    ? ;
.bss:0040B0FE                 db    ? ;
.bss:0040B0FF                 db    ? ;
.bss:0040B100                 db    ? ;
.bss:0040B101                 db    ? ;
.bss:0040B102                 db    ? ;
.bss:0040B103                 db    ? ;
.bss:0040B104                 db    ? ;
.bss:0040B105                 db    ? ;
.bss:0040B106                 db    ? ;
.bss:0040B107                 db    ? ;
.bss:0040B108                 db    ? ;
.bss:0040B109                 db    ? ;
.bss:0040B10A                 db    ? ;
.bss:0040B10B                 db    ? ;
.bss:0040B10C                 db    ? ;
.bss:0040B10D                 db    ? ;
.bss:0040B10E                 db    ? ;
.bss:0040B10F                 db    ? ;
.bss:0040B110                 db    ? ;
.bss:0040B111                 db    ? ;
.bss:0040B112                 db    ? ;
.bss:0040B113                 db    ? ;
.bss:0040B114                 db    ? ;
.bss:0040B115                 db    ? ;
.bss:0040B116                 db    ? ;
.bss:0040B117                 db    ? ;
.bss:0040B118                 db    ? ;
.bss:0040B119                 db    ? ;
.bss:0040B11A                 db    ? ;
.bss:0040B11B                 db    ? ;
.bss:0040B11C                 db    ? ;
.bss:0040B11D                 db    ? ;
.bss:0040B11E                 db    ? ;
.bss:0040B11F                 db    ? ;
.bss:0040B120                 db    ? ;
.bss:0040B121                 db    ? ;
.bss:0040B122                 db    ? ;
.bss:0040B123                 db    ? ;
.bss:0040B124                 db    ? ;
.bss:0040B125                 db    ? ;
.bss:0040B126                 db    ? ;
.bss:0040B127                 db    ? ;
.bss:0040B128                 db    ? ;
.bss:0040B129                 db    ? ;
.bss:0040B12A                 db    ? ;
.bss:0040B12B                 db    ? ;
.bss:0040B12C                 db    ? ;
.bss:0040B12D                 db    ? ;
.bss:0040B12E                 db    ? ;
.bss:0040B12F                 db    ? ;
.bss:0040B130                 db    ? ;
.bss:0040B131                 db    ? ;
.bss:0040B132                 db    ? ;
.bss:0040B133                 db    ? ;
.bss:0040B134                 db    ? ;
.bss:0040B135                 db    ? ;
.bss:0040B136                 db    ? ;
.bss:0040B137                 db    ? ;
.bss:0040B138                 db    ? ;
.bss:0040B139                 db    ? ;
.bss:0040B13A                 db    ? ;
.bss:0040B13B                 db    ? ;
.bss:0040B13C                 db    ? ;
.bss:0040B13D                 db    ? ;
.bss:0040B13E                 db    ? ;
.bss:0040B13F                 db    ? ;
.bss:0040B140                 db    ? ;
.bss:0040B141                 db    ? ;
.bss:0040B142                 db    ? ;
.bss:0040B143                 db    ? ;
.bss:0040B144                 db    ? ;
.bss:0040B145                 db    ? ;
.bss:0040B146                 db    ? ;
.bss:0040B147                 db    ? ;
.bss:0040B148                 db    ? ;
.bss:0040B149                 db    ? ;
.bss:0040B14A                 db    ? ;
.bss:0040B14B                 db    ? ;
.bss:0040B14C                 db    ? ;
.bss:0040B14D                 db    ? ;
.bss:0040B14E                 db    ? ;
.bss:0040B14F                 db    ? ;
.bss:0040B150                 db    ? ;
.bss:0040B151                 db    ? ;
.bss:0040B152                 db    ? ;
.bss:0040B153                 db    ? ;
.bss:0040B154                 db    ? ;
.bss:0040B155                 db    ? ;
.bss:0040B156                 db    ? ;
.bss:0040B157                 db    ? ;
.bss:0040B158                 db    ? ;
.bss:0040B159                 db    ? ;
.bss:0040B15A                 db    ? ;
.bss:0040B15B                 db    ? ;
.bss:0040B15C                 db    ? ;
.bss:0040B15D                 db    ? ;
.bss:0040B15E                 db    ? ;
.bss:0040B15F                 db    ? ;
.bss:0040B160                 db    ? ;
.bss:0040B161                 db    ? ;
.bss:0040B162                 db    ? ;
.bss:0040B163                 db    ? ;
.bss:0040B164                 db    ? ;
.bss:0040B165                 db    ? ;
.bss:0040B166                 db    ? ;
.bss:0040B167                 db    ? ;
.bss:0040B168                 db    ? ;
.bss:0040B169                 db    ? ;
.bss:0040B16A                 db    ? ;
.bss:0040B16B                 db    ? ;
.bss:0040B16C                 db    ? ;
.bss:0040B16D                 db    ? ;
.bss:0040B16E                 db    ? ;
.bss:0040B16F                 db    ? ;
.bss:0040B170                 db    ? ;
.bss:0040B171                 db    ? ;
.bss:0040B172                 db    ? ;
.bss:0040B173                 db    ? ;
.bss:0040B174                 db    ? ;
.bss:0040B175                 db    ? ;
.bss:0040B176                 db    ? ;
.bss:0040B177                 db    ? ;
.bss:0040B178                 db    ? ;
.bss:0040B179                 db    ? ;
.bss:0040B17A                 db    ? ;
.bss:0040B17B                 db    ? ;
.bss:0040B17C                 db    ? ;
.bss:0040B17D                 db    ? ;
.bss:0040B17E                 db    ? ;
.bss:0040B17F                 db    ? ;
.bss:0040B180                 db    ? ;
.bss:0040B181                 db    ? ;
.bss:0040B182                 db    ? ;
.bss:0040B183                 db    ? ;
.bss:0040B184                 db    ? ;
.bss:0040B185                 db    ? ;
.bss:0040B186                 db    ? ;
.bss:0040B187                 db    ? ;
.bss:0040B188                 db    ? ;
.bss:0040B189                 db    ? ;
.bss:0040B18A                 db    ? ;
.bss:0040B18B                 db    ? ;
.bss:0040B18C                 db    ? ;
.bss:0040B18D                 db    ? ;
.bss:0040B18E                 db    ? ;
.bss:0040B18F                 db    ? ;
.bss:0040B190                 db    ? ;
.bss:0040B191                 db    ? ;
.bss:0040B192                 db    ? ;
.bss:0040B193                 db    ? ;
.bss:0040B194                 db    ? ;
.bss:0040B195                 db    ? ;
.bss:0040B196                 db    ? ;
.bss:0040B197                 db    ? ;
.bss:0040B198                 db    ? ;
.bss:0040B199                 db    ? ;
.bss:0040B19A                 db    ? ;
.bss:0040B19B                 db    ? ;
.bss:0040B19C                 db    ? ;
.bss:0040B19D                 db    ? ;
.bss:0040B19E                 db    ? ;
.bss:0040B19F                 db    ? ;
.bss:0040B1A0                 db    ? ;
.bss:0040B1A1                 db    ? ;
.bss:0040B1A2                 db    ? ;
.bss:0040B1A3                 db    ? ;
.bss:0040B1A4                 db    ? ;
.bss:0040B1A5                 db    ? ;
.bss:0040B1A6                 db    ? ;
.bss:0040B1A7                 db    ? ;
.bss:0040B1A8                 db    ? ;
.bss:0040B1A9                 db    ? ;
.bss:0040B1AA                 db    ? ;
.bss:0040B1AB                 db    ? ;
.bss:0040B1AC                 db    ? ;
.bss:0040B1AD                 db    ? ;
.bss:0040B1AE                 db    ? ;
.bss:0040B1AF                 db    ? ;
.bss:0040B1B0                 db    ? ;
.bss:0040B1B1                 db    ? ;
.bss:0040B1B2                 db    ? ;
.bss:0040B1B3                 db    ? ;
.bss:0040B1B4                 db    ? ;
.bss:0040B1B5                 db    ? ;
.bss:0040B1B6                 db    ? ;
.bss:0040B1B7                 db    ? ;
.bss:0040B1B8                 db    ? ;
.bss:0040B1B9                 db    ? ;
.bss:0040B1BA                 db    ? ;
.bss:0040B1BB                 db    ? ;
.bss:0040B1BC                 db    ? ;
.bss:0040B1BD                 db    ? ;
.bss:0040B1BE                 db    ? ;
.bss:0040B1BF                 db    ? ;
.bss:0040B1C0                 db    ? ;
.bss:0040B1C1                 db    ? ;
.bss:0040B1C2                 db    ? ;
.bss:0040B1C3                 db    ? ;
.bss:0040B1C4                 db    ? ;
.bss:0040B1C5                 db    ? ;
.bss:0040B1C6                 db    ? ;
.bss:0040B1C7                 db    ? ;
.bss:0040B1C8                 db    ? ;
.bss:0040B1C9                 db    ? ;
.bss:0040B1CA                 db    ? ;
.bss:0040B1CB                 db    ? ;
.bss:0040B1CC                 db    ? ;
.bss:0040B1CD                 db    ? ;
.bss:0040B1CE                 db    ? ;
.bss:0040B1CF                 db    ? ;
.bss:0040B1D0                 db    ? ;
.bss:0040B1D1                 db    ? ;
.bss:0040B1D2                 db    ? ;
.bss:0040B1D3                 db    ? ;
.bss:0040B1D4                 db    ? ;
.bss:0040B1D5                 db    ? ;
.bss:0040B1D6                 db    ? ;
.bss:0040B1D7                 db    ? ;
.bss:0040B1D8                 db    ? ;
.bss:0040B1D9                 db    ? ;
.bss:0040B1DA                 db    ? ;
.bss:0040B1DB                 db    ? ;
.bss:0040B1DC                 db    ? ;
.bss:0040B1DD                 db    ? ;
.bss:0040B1DE                 db    ? ;
.bss:0040B1DF                 db    ? ;
.bss:0040B1E0                 db    ? ;
.bss:0040B1E1                 db    ? ;
.bss:0040B1E2                 db    ? ;
.bss:0040B1E3                 db    ? ;
.bss:0040B1E4                 db    ? ;
.bss:0040B1E5                 db    ? ;
.bss:0040B1E6                 db    ? ;
.bss:0040B1E7                 db    ? ;
.bss:0040B1E8                 db    ? ;
.bss:0040B1E9                 db    ? ;
.bss:0040B1EA                 db    ? ;
.bss:0040B1EB                 db    ? ;
.bss:0040B1EC                 db    ? ;
.bss:0040B1ED                 db    ? ;
.bss:0040B1EE                 db    ? ;
.bss:0040B1EF                 db    ? ;
.bss:0040B1F0                 db    ? ;
.bss:0040B1F1                 db    ? ;
.bss:0040B1F2                 db    ? ;
.bss:0040B1F3                 db    ? ;
.bss:0040B1F4                 db    ? ;
.bss:0040B1F5                 db    ? ;
.bss:0040B1F6                 db    ? ;
.bss:0040B1F7                 db    ? ;
.bss:0040B1F8                 db    ? ;
.bss:0040B1F9                 db    ? ;
.bss:0040B1FA                 db    ? ;
.bss:0040B1FB                 db    ? ;
.bss:0040B1FC                 db    ? ;
.bss:0040B1FD                 db    ? ;
.bss:0040B1FE                 db    ? ;
.bss:0040B1FF                 db    ? ;
.bss:0040B200                 db    ? ;
.bss:0040B201                 db    ? ;
.bss:0040B202                 db    ? ;
.bss:0040B203                 db    ? ;
.bss:0040B204                 db    ? ;
.bss:0040B205                 db    ? ;
.bss:0040B206                 db    ? ;
.bss:0040B207                 db    ? ;
.bss:0040B208                 db    ? ;
.bss:0040B209                 db    ? ;
.bss:0040B20A                 db    ? ;
.bss:0040B20B                 db    ? ;
.bss:0040B20C                 db    ? ;
.bss:0040B20D                 db    ? ;
.bss:0040B20E                 db    ? ;
.bss:0040B20F                 db    ? ;
.bss:0040B210                 db    ? ;
.bss:0040B211                 db    ? ;
.bss:0040B212                 db    ? ;
.bss:0040B213                 db    ? ;
.bss:0040B214                 db    ? ;
.bss:0040B215                 db    ? ;
.bss:0040B216                 db    ? ;
.bss:0040B217                 db    ? ;
.bss:0040B218                 db    ? ;
.bss:0040B219                 db    ? ;
.bss:0040B21A                 db    ? ;
.bss:0040B21B                 db    ? ;
.bss:0040B21C                 db    ? ;
.bss:0040B21D                 db    ? ;
.bss:0040B21E                 db    ? ;
.bss:0040B21F                 db    ? ;
.bss:0040B220                 db    ? ;
.bss:0040B221                 db    ? ;
.bss:0040B222                 db    ? ;
.bss:0040B223                 db    ? ;
.bss:0040B224                 db    ? ;
.bss:0040B225                 db    ? ;
.bss:0040B226                 db    ? ;
.bss:0040B227                 db    ? ;
.bss:0040B228                 db    ? ;
.bss:0040B229                 db    ? ;
.bss:0040B22A                 db    ? ;
.bss:0040B22B                 db    ? ;
.bss:0040B22C                 db    ? ;
.bss:0040B22D                 db    ? ;
.bss:0040B22E                 db    ? ;
.bss:0040B22F                 db    ? ;
.bss:0040B230                 db    ? ;
.bss:0040B231                 db    ? ;
.bss:0040B232                 db    ? ;
.bss:0040B233                 db    ? ;
.bss:0040B234                 db    ? ;
.bss:0040B235                 db    ? ;
.bss:0040B236                 db    ? ;
.bss:0040B237                 db    ? ;
.bss:0040B238                 db    ? ;
.bss:0040B239                 db    ? ;
.bss:0040B23A                 db    ? ;
.bss:0040B23B                 db    ? ;
.bss:0040B23C                 db    ? ;
.bss:0040B23D                 db    ? ;
.bss:0040B23E                 db    ? ;
.bss:0040B23F                 db    ? ;
.bss:0040B240                 db    ? ;
.bss:0040B241                 db    ? ;
.bss:0040B242                 db    ? ;
.bss:0040B243                 db    ? ;
.bss:0040B244                 db    ? ;
.bss:0040B245                 db    ? ;
.bss:0040B246                 db    ? ;
.bss:0040B247                 db    ? ;
.bss:0040B248                 db    ? ;
.bss:0040B249                 db    ? ;
.bss:0040B24A                 db    ? ;
.bss:0040B24B                 db    ? ;
.bss:0040B24C                 db    ? ;
.bss:0040B24D                 db    ? ;
.bss:0040B24E                 db    ? ;
.bss:0040B24F                 db    ? ;
.bss:0040B250 byte_40B250     db ?                    ; DATA XREF: sub_402390+539↑w
.bss:0040B250                                         ; sub_402390+962↑w ...
.bss:0040B251                 db    ? ;
.bss:0040B252                 db    ? ;
.bss:0040B253                 db    ? ;
.bss:0040B254                 db    ? ;
.bss:0040B255                 db    ? ;
.bss:0040B256                 db    ? ;
.bss:0040B257                 db    ? ;
.bss:0040B258                 db    ? ;
.bss:0040B259                 db    ? ;
.bss:0040B25A                 db    ? ;
.bss:0040B25B                 db    ? ;
.bss:0040B25C                 db    ? ;
.bss:0040B25D                 db    ? ;
.bss:0040B25E                 db    ? ;
.bss:0040B25F                 db    ? ;
.bss:0040B260                 db    ? ;
.bss:0040B261                 db    ? ;
.bss:0040B262                 db    ? ;
.bss:0040B263                 db    ? ;
.bss:0040B264                 db    ? ;
.bss:0040B265                 db    ? ;
.bss:0040B266                 db    ? ;
.bss:0040B267                 db    ? ;
.bss:0040B268                 db    ? ;
.bss:0040B269                 db    ? ;
.bss:0040B26A                 db    ? ;
.bss:0040B26B                 db    ? ;
.bss:0040B26C                 db    ? ;
.bss:0040B26D                 db    ? ;
.bss:0040B26E                 db    ? ;
.bss:0040B26F                 db    ? ;
.bss:0040B270                 db    ? ;
.bss:0040B271                 db    ? ;
.bss:0040B272                 db    ? ;
.bss:0040B273                 db    ? ;
.bss:0040B274                 db    ? ;
.bss:0040B275                 db    ? ;
.bss:0040B276                 db    ? ;
.bss:0040B277                 db    ? ;
.bss:0040B278                 db    ? ;
.bss:0040B279                 db    ? ;
.bss:0040B27A                 db    ? ;
.bss:0040B27B                 db    ? ;
.bss:0040B27C                 db    ? ;
.bss:0040B27D                 db    ? ;
.bss:0040B27E                 db    ? ;
.bss:0040B27F                 db    ? ;
.bss:0040B280                 db    ? ;
.bss:0040B281                 db    ? ;
.bss:0040B282                 db    ? ;
.bss:0040B283                 db    ? ;
.bss:0040B284                 db    ? ;
.bss:0040B285                 db    ? ;
.bss:0040B286                 db    ? ;
.bss:0040B287                 db    ? ;
.bss:0040B288                 db    ? ;
.bss:0040B289                 db    ? ;
.bss:0040B28A                 db    ? ;
.bss:0040B28B                 db    ? ;
.bss:0040B28C                 db    ? ;
.bss:0040B28D                 db    ? ;
.bss:0040B28E                 db    ? ;
.bss:0040B28F                 db    ? ;
.bss:0040B290                 db    ? ;
.bss:0040B291                 db    ? ;
.bss:0040B292                 db    ? ;
.bss:0040B293                 db    ? ;
.bss:0040B294                 db    ? ;
.bss:0040B295                 db    ? ;
.bss:0040B296                 db    ? ;
.bss:0040B297                 db    ? ;
.bss:0040B298                 db    ? ;
.bss:0040B299                 db    ? ;
.bss:0040B29A                 db    ? ;
.bss:0040B29B                 db    ? ;
.bss:0040B29C                 db    ? ;
.bss:0040B29D                 db    ? ;
.bss:0040B29E                 db    ? ;
.bss:0040B29F                 db    ? ;
.bss:0040B2A0                 db    ? ;
.bss:0040B2A1                 db    ? ;
.bss:0040B2A2                 db    ? ;
.bss:0040B2A3                 db    ? ;
.bss:0040B2A4                 db    ? ;
.bss:0040B2A5                 db    ? ;
.bss:0040B2A6                 db    ? ;
.bss:0040B2A7                 db    ? ;
.bss:0040B2A8                 db    ? ;
.bss:0040B2A9                 db    ? ;
.bss:0040B2AA                 db    ? ;
.bss:0040B2AB                 db    ? ;
.bss:0040B2AC                 db    ? ;
.bss:0040B2AD                 db    ? ;
.bss:0040B2AE                 db    ? ;
.bss:0040B2AF                 db    ? ;
.bss:0040B2B0                 db    ? ;
.bss:0040B2B1                 db    ? ;
.bss:0040B2B2                 db    ? ;
.bss:0040B2B3                 db    ? ;
.bss:0040B2B4                 db    ? ;
.bss:0040B2B5                 db    ? ;
.bss:0040B2B6                 db    ? ;
.bss:0040B2B7                 db    ? ;
.bss:0040B2B8                 db    ? ;
.bss:0040B2B9                 db    ? ;
.bss:0040B2BA                 db    ? ;
.bss:0040B2BB                 db    ? ;
.bss:0040B2BC                 db    ? ;
.bss:0040B2BD                 db    ? ;
.bss:0040B2BE                 db    ? ;
.bss:0040B2BF                 db    ? ;
.bss:0040B2C0                 db    ? ;
.bss:0040B2C1                 db    ? ;
.bss:0040B2C2                 db    ? ;
.bss:0040B2C3                 db    ? ;
.bss:0040B2C4                 db    ? ;
.bss:0040B2C5                 db    ? ;
.bss:0040B2C6                 db    ? ;
.bss:0040B2C7                 db    ? ;
.bss:0040B2C8                 db    ? ;
.bss:0040B2C9                 db    ? ;
.bss:0040B2CA                 db    ? ;
.bss:0040B2CB                 db    ? ;
.bss:0040B2CC                 db    ? ;
.bss:0040B2CD                 db    ? ;
.bss:0040B2CE                 db    ? ;
.bss:0040B2CF                 db    ? ;
.bss:0040B2D0                 db    ? ;
.bss:0040B2D1                 db    ? ;
.bss:0040B2D2                 db    ? ;
.bss:0040B2D3                 db    ? ;
.bss:0040B2D4                 db    ? ;
.bss:0040B2D5                 db    ? ;
.bss:0040B2D6                 db    ? ;
.bss:0040B2D7                 db    ? ;
.bss:0040B2D8                 db    ? ;
.bss:0040B2D9                 db    ? ;
.bss:0040B2DA                 db    ? ;
.bss:0040B2DB                 db    ? ;
.bss:0040B2DC                 db    ? ;
.bss:0040B2DD                 db    ? ;
.bss:0040B2DE                 db    ? ;
.bss:0040B2DF                 db    ? ;
.bss:0040B2E0                 db    ? ;
.bss:0040B2E1                 db    ? ;
.bss:0040B2E2                 db    ? ;
.bss:0040B2E3                 db    ? ;
.bss:0040B2E4                 db    ? ;
.bss:0040B2E5                 db    ? ;
.bss:0040B2E6                 db    ? ;
.bss:0040B2E7                 db    ? ;
.bss:0040B2E8                 db    ? ;
.bss:0040B2E9                 db    ? ;
.bss:0040B2EA                 db    ? ;
.bss:0040B2EB                 db    ? ;
.bss:0040B2EC                 db    ? ;
.bss:0040B2ED                 db    ? ;
.bss:0040B2EE                 db    ? ;
.bss:0040B2EF                 db    ? ;
.bss:0040B2F0                 db    ? ;
.bss:0040B2F1                 db    ? ;
.bss:0040B2F2                 db    ? ;
.bss:0040B2F3                 db    ? ;
.bss:0040B2F4                 db    ? ;
.bss:0040B2F5                 db    ? ;
.bss:0040B2F6                 db    ? ;
.bss:0040B2F7                 db    ? ;
.bss:0040B2F8                 db    ? ;
.bss:0040B2F9                 db    ? ;
.bss:0040B2FA                 db    ? ;
.bss:0040B2FB                 db    ? ;
.bss:0040B2FC                 db    ? ;
.bss:0040B2FD                 db    ? ;
.bss:0040B2FE                 db    ? ;
.bss:0040B2FF                 db    ? ;
.bss:0040B300                 db    ? ;
.bss:0040B301                 db    ? ;
.bss:0040B302                 db    ? ;
.bss:0040B303                 db    ? ;
.bss:0040B304                 db    ? ;
.bss:0040B305                 db    ? ;
.bss:0040B306                 db    ? ;
.bss:0040B307                 db    ? ;
.bss:0040B308                 db    ? ;
.bss:0040B309                 db    ? ;
.bss:0040B30A                 db    ? ;
.bss:0040B30B                 db    ? ;
.bss:0040B30C                 db    ? ;
.bss:0040B30D                 db    ? ;
.bss:0040B30E                 db    ? ;
.bss:0040B30F                 db    ? ;
.bss:0040B310                 db    ? ;
.bss:0040B311                 db    ? ;
.bss:0040B312                 db    ? ;
.bss:0040B313                 db    ? ;
.bss:0040B314                 db    ? ;
.bss:0040B315                 db    ? ;
.bss:0040B316                 db    ? ;
.bss:0040B317                 db    ? ;
.bss:0040B318                 db    ? ;
.bss:0040B319                 db    ? ;
.bss:0040B31A                 db    ? ;
.bss:0040B31B                 db    ? ;
.bss:0040B31C                 db    ? ;
.bss:0040B31D                 db    ? ;
.bss:0040B31E                 db    ? ;
.bss:0040B31F                 db    ? ;
.bss:0040B320                 db    ? ;
.bss:0040B321                 db    ? ;
.bss:0040B322                 db    ? ;
.bss:0040B323                 db    ? ;
.bss:0040B324                 db    ? ;
.bss:0040B325                 db    ? ;
.bss:0040B326                 db    ? ;
.bss:0040B327                 db    ? ;
.bss:0040B328                 db    ? ;
.bss:0040B329                 db    ? ;
.bss:0040B32A                 db    ? ;
.bss:0040B32B                 db    ? ;
.bss:0040B32C                 db    ? ;
.bss:0040B32D                 db    ? ;
.bss:0040B32E                 db    ? ;
.bss:0040B32F                 db    ? ;
.bss:0040B330                 db    ? ;
.bss:0040B331                 db    ? ;
.bss:0040B332                 db    ? ;
.bss:0040B333                 db    ? ;
.bss:0040B334                 db    ? ;
.bss:0040B335                 db    ? ;
.bss:0040B336                 db    ? ;
.bss:0040B337                 db    ? ;
.bss:0040B338                 db    ? ;
.bss:0040B339                 db    ? ;
.bss:0040B33A                 db    ? ;
.bss:0040B33B                 db    ? ;
.bss:0040B33C                 db    ? ;
.bss:0040B33D                 db    ? ;
.bss:0040B33E                 db    ? ;
.bss:0040B33F                 db    ? ;
.bss:0040B340                 db    ? ;
.bss:0040B341                 db    ? ;
.bss:0040B342                 db    ? ;
.bss:0040B343                 db    ? ;
.bss:0040B344                 db    ? ;
.bss:0040B345                 db    ? ;
.bss:0040B346                 db    ? ;
.bss:0040B347                 db    ? ;
.bss:0040B348                 db    ? ;
.bss:0040B349                 db    ? ;
.bss:0040B34A                 db    ? ;
.bss:0040B34B                 db    ? ;
.bss:0040B34C                 db    ? ;
.bss:0040B34D                 db    ? ;
.bss:0040B34E                 db    ? ;
.bss:0040B34F                 db    ? ;
.bss:0040B350 byte_40B350     db ?                    ; DATA XREF: sub_402390+48A↑w
.bss:0040B350                                         ; sub_402390:loc_402851↑r ...
.bss:0040B351                 db    ? ;
.bss:0040B352                 db    ? ;
.bss:0040B353                 db    ? ;
.bss:0040B354                 db    ? ;
.bss:0040B355                 db    ? ;
.bss:0040B356                 db    ? ;
.bss:0040B357                 db    ? ;
.bss:0040B358                 db    ? ;
.bss:0040B359                 db    ? ;
.bss:0040B35A                 db    ? ;
.bss:0040B35B                 db    ? ;
.bss:0040B35C                 db    ? ;
.bss:0040B35D                 db    ? ;
.bss:0040B35E                 db    ? ;
.bss:0040B35F                 db    ? ;
.bss:0040B360                 db    ? ;
.bss:0040B361                 db    ? ;
.bss:0040B362                 db    ? ;
.bss:0040B363                 db    ? ;
.bss:0040B364                 db    ? ;
.bss:0040B365                 db    ? ;
.bss:0040B366                 db    ? ;
.bss:0040B367                 db    ? ;
.bss:0040B368                 db    ? ;
.bss:0040B369                 db    ? ;
.bss:0040B36A                 db    ? ;
.bss:0040B36B                 db    ? ;
.bss:0040B36C                 db    ? ;
.bss:0040B36D                 db    ? ;
.bss:0040B36E                 db    ? ;
.bss:0040B36F                 db    ? ;
.bss:0040B370                 db    ? ;
.bss:0040B371                 db    ? ;
.bss:0040B372                 db    ? ;
.bss:0040B373                 db    ? ;
.bss:0040B374                 db    ? ;
.bss:0040B375                 db    ? ;
.bss:0040B376                 db    ? ;
.bss:0040B377                 db    ? ;
.bss:0040B378                 db    ? ;
.bss:0040B379                 db    ? ;
.bss:0040B37A                 db    ? ;
.bss:0040B37B                 db    ? ;
.bss:0040B37C                 db    ? ;
.bss:0040B37D                 db    ? ;
.bss:0040B37E                 db    ? ;
.bss:0040B37F                 db    ? ;
.bss:0040B380                 db    ? ;
.bss:0040B381                 db    ? ;
.bss:0040B382                 db    ? ;
.bss:0040B383                 db    ? ;
.bss:0040B384                 db    ? ;
.bss:0040B385                 db    ? ;
.bss:0040B386                 db    ? ;
.bss:0040B387                 db    ? ;
.bss:0040B388                 db    ? ;
.bss:0040B389                 db    ? ;
.bss:0040B38A                 db    ? ;
.bss:0040B38B                 db    ? ;
.bss:0040B38C                 db    ? ;
.bss:0040B38D                 db    ? ;
.bss:0040B38E                 db    ? ;
.bss:0040B38F                 db    ? ;
.bss:0040B390                 db    ? ;
.bss:0040B391                 db    ? ;
.bss:0040B392                 db    ? ;
.bss:0040B393                 db    ? ;
.bss:0040B394                 db    ? ;
.bss:0040B395                 db    ? ;
.bss:0040B396                 db    ? ;
.bss:0040B397                 db    ? ;
.bss:0040B398                 db    ? ;
.bss:0040B399                 db    ? ;
.bss:0040B39A                 db    ? ;
.bss:0040B39B                 db    ? ;
.bss:0040B39C                 db    ? ;
.bss:0040B39D                 db    ? ;
.bss:0040B39E                 db    ? ;
.bss:0040B39F                 db    ? ;
.bss:0040B3A0                 db    ? ;
.bss:0040B3A1                 db    ? ;
.bss:0040B3A2                 db    ? ;
.bss:0040B3A3                 db    ? ;
.bss:0040B3A4                 db    ? ;
.bss:0040B3A5                 db    ? ;
.bss:0040B3A6                 db    ? ;
.bss:0040B3A7                 db    ? ;
.bss:0040B3A8                 db    ? ;
.bss:0040B3A9                 db    ? ;
.bss:0040B3AA                 db    ? ;
.bss:0040B3AB                 db    ? ;
.bss:0040B3AC                 db    ? ;
.bss:0040B3AD                 db    ? ;
.bss:0040B3AE                 db    ? ;
.bss:0040B3AF                 db    ? ;
.bss:0040B3B0                 db    ? ;
.bss:0040B3B1                 db    ? ;
.bss:0040B3B2                 db    ? ;
.bss:0040B3B3                 db    ? ;
.bss:0040B3B4                 db    ? ;
.bss:0040B3B5                 db    ? ;
.bss:0040B3B6                 db    ? ;
.bss:0040B3B7                 db    ? ;
.bss:0040B3B8                 db    ? ;
.bss:0040B3B9                 db    ? ;
.bss:0040B3BA                 db    ? ;
.bss:0040B3BB                 db    ? ;
.bss:0040B3BC                 db    ? ;
.bss:0040B3BD                 db    ? ;
.bss:0040B3BE                 db    ? ;
.bss:0040B3BF                 db    ? ;
.bss:0040B3C0                 db    ? ;
.bss:0040B3C1                 db    ? ;
.bss:0040B3C2                 db    ? ;
.bss:0040B3C3                 db    ? ;
.bss:0040B3C4                 db    ? ;
.bss:0040B3C5                 db    ? ;
.bss:0040B3C6                 db    ? ;
.bss:0040B3C7                 db    ? ;
.bss:0040B3C8                 db    ? ;
.bss:0040B3C9                 db    ? ;
.bss:0040B3CA                 db    ? ;
.bss:0040B3CB                 db    ? ;
.bss:0040B3CC                 db    ? ;
.bss:0040B3CD                 db    ? ;
.bss:0040B3CE                 db    ? ;
.bss:0040B3CF                 db    ? ;
.bss:0040B3D0                 db    ? ;
.bss:0040B3D1                 db    ? ;
.bss:0040B3D2                 db    ? ;
.bss:0040B3D3                 db    ? ;
.bss:0040B3D4                 db    ? ;
.bss:0040B3D5                 db    ? ;
.bss:0040B3D6                 db    ? ;
.bss:0040B3D7                 db    ? ;
.bss:0040B3D8                 db    ? ;
.bss:0040B3D9                 db    ? ;
.bss:0040B3DA                 db    ? ;
.bss:0040B3DB                 db    ? ;
.bss:0040B3DC                 db    ? ;
.bss:0040B3DD                 db    ? ;
.bss:0040B3DE                 db    ? ;
.bss:0040B3DF                 db    ? ;
.bss:0040B3E0                 db    ? ;
.bss:0040B3E1                 db    ? ;
.bss:0040B3E2                 db    ? ;
.bss:0040B3E3                 db    ? ;
.bss:0040B3E4                 db    ? ;
.bss:0040B3E5                 db    ? ;
.bss:0040B3E6                 db    ? ;
.bss:0040B3E7                 db    ? ;
.bss:0040B3E8                 db    ? ;
.bss:0040B3E9                 db    ? ;
.bss:0040B3EA                 db    ? ;
.bss:0040B3EB                 db    ? ;
.bss:0040B3EC                 db    ? ;
.bss:0040B3ED                 db    ? ;
.bss:0040B3EE                 db    ? ;
.bss:0040B3EF                 db    ? ;
.bss:0040B3F0                 db    ? ;
.bss:0040B3F1                 db    ? ;
.bss:0040B3F2                 db    ? ;
.bss:0040B3F3                 db    ? ;
.bss:0040B3F4                 db    ? ;
.bss:0040B3F5                 db    ? ;
.bss:0040B3F6                 db    ? ;
.bss:0040B3F7                 db    ? ;
.bss:0040B3F8                 db    ? ;
.bss:0040B3F9                 db    ? ;
.bss:0040B3FA                 db    ? ;
.bss:0040B3FB                 db    ? ;
.bss:0040B3FC                 db    ? ;
.bss:0040B3FD                 db    ? ;
.bss:0040B3FE                 db    ? ;
.bss:0040B3FF                 db    ? ;
.bss:0040B400                 db    ? ;
.bss:0040B401                 db    ? ;
.bss:0040B402                 db    ? ;
.bss:0040B403                 db    ? ;
.bss:0040B404                 db    ? ;
.bss:0040B405                 db    ? ;
.bss:0040B406                 db    ? ;
.bss:0040B407                 db    ? ;
.bss:0040B408                 db    ? ;
.bss:0040B409                 db    ? ;
.bss:0040B40A                 db    ? ;
.bss:0040B40B                 db    ? ;
.bss:0040B40C                 db    ? ;
.bss:0040B40D                 db    ? ;
.bss:0040B40E                 db    ? ;
.bss:0040B40F                 db    ? ;
.bss:0040B410                 db    ? ;
.bss:0040B411                 db    ? ;
.bss:0040B412                 db    ? ;
.bss:0040B413                 db    ? ;
.bss:0040B414                 db    ? ;
.bss:0040B415                 db    ? ;
.bss:0040B416                 db    ? ;
.bss:0040B417                 db    ? ;
.bss:0040B418                 db    ? ;
.bss:0040B419                 db    ? ;
.bss:0040B41A                 db    ? ;
.bss:0040B41B                 db    ? ;
.bss:0040B41C                 db    ? ;
.bss:0040B41D                 db    ? ;
.bss:0040B41E                 db    ? ;
.bss:0040B41F                 db    ? ;
.bss:0040B420                 db    ? ;
.bss:0040B421                 db    ? ;
.bss:0040B422                 db    ? ;
.bss:0040B423                 db    ? ;
.bss:0040B424                 db    ? ;
.bss:0040B425                 db    ? ;
.bss:0040B426                 db    ? ;
.bss:0040B427                 db    ? ;
.bss:0040B428                 db    ? ;
.bss:0040B429                 db    ? ;
.bss:0040B42A                 db    ? ;
.bss:0040B42B                 db    ? ;
.bss:0040B42C                 db    ? ;
.bss:0040B42D                 db    ? ;
.bss:0040B42E                 db    ? ;
.bss:0040B42F                 db    ? ;
.bss:0040B430                 db    ? ;
.bss:0040B431                 db    ? ;
.bss:0040B432                 db    ? ;
.bss:0040B433                 db    ? ;
.bss:0040B434                 db    ? ;
.bss:0040B435                 db    ? ;
.bss:0040B436                 db    ? ;
.bss:0040B437                 db    ? ;
.bss:0040B438                 db    ? ;
.bss:0040B439                 db    ? ;
.bss:0040B43A                 db    ? ;
.bss:0040B43B                 db    ? ;
.bss:0040B43C                 db    ? ;
.bss:0040B43D                 db    ? ;
.bss:0040B43E                 db    ? ;
.bss:0040B43F                 db    ? ;
.bss:0040B440                 db    ? ;
.bss:0040B441                 db    ? ;
.bss:0040B442                 db    ? ;
.bss:0040B443                 db    ? ;
.bss:0040B444                 db    ? ;
.bss:0040B445                 db    ? ;
.bss:0040B446                 db    ? ;
.bss:0040B447                 db    ? ;
.bss:0040B448                 db    ? ;
.bss:0040B449                 db    ? ;
.bss:0040B44A                 db    ? ;
.bss:0040B44B                 db    ? ;
.bss:0040B44C                 db    ? ;
.bss:0040B44D                 db    ? ;
.bss:0040B44E                 db    ? ;
.bss:0040B44F                 db    ? ;
.bss:0040B450 byte_40B450     db ?                    ; DATA XREF: sub_402390:loc_402840↑w
.bss:0040B450                                         ; sub_402390+5D1↑r ...
.bss:0040B451                 db    ? ;
.bss:0040B452                 db    ? ;
.bss:0040B453                 db    ? ;
.bss:0040B454                 db    ? ;
.bss:0040B455                 db    ? ;
.bss:0040B456                 db    ? ;
.bss:0040B457                 db    ? ;
.bss:0040B458                 db    ? ;
.bss:0040B459                 db    ? ;
.bss:0040B45A                 db    ? ;
.bss:0040B45B                 db    ? ;
.bss:0040B45C                 db    ? ;
.bss:0040B45D                 db    ? ;
.bss:0040B45E                 db    ? ;
.bss:0040B45F                 db    ? ;
.bss:0040B460                 db    ? ;
.bss:0040B461                 db    ? ;
.bss:0040B462                 db    ? ;
.bss:0040B463                 db    ? ;
.bss:0040B464                 db    ? ;
.bss:0040B465                 db    ? ;
.bss:0040B466                 db    ? ;
.bss:0040B467                 db    ? ;
.bss:0040B468                 db    ? ;
.bss:0040B469                 db    ? ;
.bss:0040B46A                 db    ? ;
.bss:0040B46B                 db    ? ;
.bss:0040B46C                 db    ? ;
.bss:0040B46D                 db    ? ;
.bss:0040B46E                 db    ? ;
.bss:0040B46F                 db    ? ;
.bss:0040B470                 db    ? ;
.bss:0040B471                 db    ? ;
.bss:0040B472                 db    ? ;
.bss:0040B473                 db    ? ;
.bss:0040B474                 db    ? ;
.bss:0040B475                 db    ? ;
.bss:0040B476                 db    ? ;
.bss:0040B477                 db    ? ;
.bss:0040B478                 db    ? ;
.bss:0040B479                 db    ? ;
.bss:0040B47A                 db    ? ;
.bss:0040B47B                 db    ? ;
.bss:0040B47C                 db    ? ;
.bss:0040B47D                 db    ? ;
.bss:0040B47E                 db    ? ;
.bss:0040B47F                 db    ? ;
.bss:0040B480                 db    ? ;
.bss:0040B481                 db    ? ;
.bss:0040B482                 db    ? ;
.bss:0040B483                 db    ? ;
.bss:0040B484                 db    ? ;
.bss:0040B485                 db    ? ;
.bss:0040B486                 db    ? ;
.bss:0040B487                 db    ? ;
.bss:0040B488                 db    ? ;
.bss:0040B489                 db    ? ;
.bss:0040B48A                 db    ? ;
.bss:0040B48B                 db    ? ;
.bss:0040B48C                 db    ? ;
.bss:0040B48D                 db    ? ;
.bss:0040B48E                 db    ? ;
.bss:0040B48F                 db    ? ;
.bss:0040B490                 db    ? ;
.bss:0040B491                 db    ? ;
.bss:0040B492                 db    ? ;
.bss:0040B493                 db    ? ;
.bss:0040B494                 db    ? ;
.bss:0040B495                 db    ? ;
.bss:0040B496                 db    ? ;
.bss:0040B497                 db    ? ;
.bss:0040B498                 db    ? ;
.bss:0040B499                 db    ? ;
.bss:0040B49A                 db    ? ;
.bss:0040B49B                 db    ? ;
.bss:0040B49C                 db    ? ;
.bss:0040B49D                 db    ? ;
.bss:0040B49E                 db    ? ;
.bss:0040B49F                 db    ? ;
.bss:0040B4A0                 db    ? ;
.bss:0040B4A1                 db    ? ;
.bss:0040B4A2                 db    ? ;
.bss:0040B4A3                 db    ? ;
.bss:0040B4A4                 db    ? ;
.bss:0040B4A5                 db    ? ;
.bss:0040B4A6                 db    ? ;
.bss:0040B4A7                 db    ? ;
.bss:0040B4A8                 db    ? ;
.bss:0040B4A9                 db    ? ;
.bss:0040B4AA                 db    ? ;
.bss:0040B4AB                 db    ? ;
.bss:0040B4AC                 db    ? ;
.bss:0040B4AD                 db    ? ;
.bss:0040B4AE                 db    ? ;
.bss:0040B4AF                 db    ? ;
.bss:0040B4B0                 db    ? ;
.bss:0040B4B1                 db    ? ;
.bss:0040B4B2                 db    ? ;
.bss:0040B4B3                 db    ? ;
.bss:0040B4B4                 db    ? ;
.bss:0040B4B5                 db    ? ;
.bss:0040B4B6                 db    ? ;
.bss:0040B4B7                 db    ? ;
.bss:0040B4B8                 db    ? ;
.bss:0040B4B9                 db    ? ;
.bss:0040B4BA                 db    ? ;
.bss:0040B4BB                 db    ? ;
.bss:0040B4BC                 db    ? ;
.bss:0040B4BD                 db    ? ;
.bss:0040B4BE                 db    ? ;
.bss:0040B4BF                 db    ? ;
.bss:0040B4C0                 db    ? ;
.bss:0040B4C1                 db    ? ;
.bss:0040B4C2                 db    ? ;
.bss:0040B4C3                 db    ? ;
.bss:0040B4C4                 db    ? ;
.bss:0040B4C5                 db    ? ;
.bss:0040B4C6                 db    ? ;
.bss:0040B4C7                 db    ? ;
.bss:0040B4C8                 db    ? ;
.bss:0040B4C9                 db    ? ;
.bss:0040B4CA                 db    ? ;
.bss:0040B4CB                 db    ? ;
.bss:0040B4CC                 db    ? ;
.bss:0040B4CD                 db    ? ;
.bss:0040B4CE                 db    ? ;
.bss:0040B4CF                 db    ? ;
.bss:0040B4D0                 db    ? ;
.bss:0040B4D1                 db    ? ;
.bss:0040B4D2                 db    ? ;
.bss:0040B4D3                 db    ? ;
.bss:0040B4D4                 db    ? ;
.bss:0040B4D5                 db    ? ;
.bss:0040B4D6                 db    ? ;
.bss:0040B4D7                 db    ? ;
.bss:0040B4D8                 db    ? ;
.bss:0040B4D9                 db    ? ;
.bss:0040B4DA                 db    ? ;
.bss:0040B4DB                 db    ? ;
.bss:0040B4DC                 db    ? ;
.bss:0040B4DD                 db    ? ;
.bss:0040B4DE                 db    ? ;
.bss:0040B4DF                 db    ? ;
.bss:0040B4E0                 db    ? ;
.bss:0040B4E1                 db    ? ;
.bss:0040B4E2                 db    ? ;
.bss:0040B4E3                 db    ? ;
.bss:0040B4E4                 db    ? ;
.bss:0040B4E5                 db    ? ;
.bss:0040B4E6                 db    ? ;
.bss:0040B4E7                 db    ? ;
.bss:0040B4E8                 db    ? ;
.bss:0040B4E9                 db    ? ;
.bss:0040B4EA                 db    ? ;
.bss:0040B4EB                 db    ? ;
.bss:0040B4EC                 db    ? ;
.bss:0040B4ED                 db    ? ;
.bss:0040B4EE                 db    ? ;
.bss:0040B4EF                 db    ? ;
.bss:0040B4F0                 db    ? ;
.bss:0040B4F1                 db    ? ;
.bss:0040B4F2                 db    ? ;
.bss:0040B4F3                 db    ? ;
.bss:0040B4F4                 db    ? ;
.bss:0040B4F5                 db    ? ;
.bss:0040B4F6                 db    ? ;
.bss:0040B4F7                 db    ? ;
.bss:0040B4F8                 db    ? ;
.bss:0040B4F9                 db    ? ;
.bss:0040B4FA                 db    ? ;
.bss:0040B4FB                 db    ? ;
.bss:0040B4FC                 db    ? ;
.bss:0040B4FD                 db    ? ;
.bss:0040B4FE                 db    ? ;
.bss:0040B4FF                 db    ? ;
.bss:0040B500                 db    ? ;
.bss:0040B501                 db    ? ;
.bss:0040B502                 db    ? ;
.bss:0040B503                 db    ? ;
.bss:0040B504                 db    ? ;
.bss:0040B505                 db    ? ;
.bss:0040B506                 db    ? ;
.bss:0040B507                 db    ? ;
.bss:0040B508                 db    ? ;
.bss:0040B509                 db    ? ;
.bss:0040B50A                 db    ? ;
.bss:0040B50B                 db    ? ;
.bss:0040B50C                 db    ? ;
.bss:0040B50D                 db    ? ;
.bss:0040B50E                 db    ? ;
.bss:0040B50F                 db    ? ;
.bss:0040B510                 db    ? ;
.bss:0040B511                 db    ? ;
.bss:0040B512                 db    ? ;
.bss:0040B513                 db    ? ;
.bss:0040B514                 db    ? ;
.bss:0040B515                 db    ? ;
.bss:0040B516                 db    ? ;
.bss:0040B517                 db    ? ;
.bss:0040B518                 db    ? ;
.bss:0040B519                 db    ? ;
.bss:0040B51A                 db    ? ;
.bss:0040B51B                 db    ? ;
.bss:0040B51C                 db    ? ;
.bss:0040B51D                 db    ? ;
.bss:0040B51E                 db    ? ;
.bss:0040B51F                 db    ? ;
.bss:0040B520                 db    ? ;
.bss:0040B521                 db    ? ;
.bss:0040B522                 db    ? ;
.bss:0040B523                 db    ? ;
.bss:0040B524                 db    ? ;
.bss:0040B525                 db    ? ;
.bss:0040B526                 db    ? ;
.bss:0040B527                 db    ? ;
.bss:0040B528                 db    ? ;
.bss:0040B529                 db    ? ;
.bss:0040B52A                 db    ? ;
.bss:0040B52B                 db    ? ;
.bss:0040B52C                 db    ? ;
.bss:0040B52D                 db    ? ;
.bss:0040B52E                 db    ? ;
.bss:0040B52F                 db    ? ;
.bss:0040B530                 db    ? ;
.bss:0040B531                 db    ? ;
.bss:0040B532                 db    ? ;
.bss:0040B533                 db    ? ;
.bss:0040B534                 db    ? ;
.bss:0040B535                 db    ? ;
.bss:0040B536                 db    ? ;
.bss:0040B537                 db    ? ;
.bss:0040B538                 db    ? ;
.bss:0040B539                 db    ? ;
.bss:0040B53A                 db    ? ;
.bss:0040B53B                 db    ? ;
.bss:0040B53C                 db    ? ;
.bss:0040B53D                 db    ? ;
.bss:0040B53E                 db    ? ;
.bss:0040B53F                 db    ? ;
.bss:0040B540                 db    ? ;
.bss:0040B541                 db    ? ;
.bss:0040B542                 db    ? ;
.bss:0040B543                 db    ? ;
.bss:0040B544                 db    ? ;
.bss:0040B545                 db    ? ;
.bss:0040B546                 db    ? ;
.bss:0040B547                 db    ? ;
.bss:0040B548                 db    ? ;
.bss:0040B549                 db    ? ;
.bss:0040B54A                 db    ? ;
.bss:0040B54B                 db    ? ;
.bss:0040B54C                 db    ? ;
.bss:0040B54D                 db    ? ;
.bss:0040B54E                 db    ? ;
.bss:0040B54F                 db    ? ;
.bss:0040B550 dword_40B550    dd ?                    ; DATA XREF: sub_405DE0+9↑o
.bss:0040B550                                         ; sub_405DE0+17↑w ...
.bss:0040B554 dword_40B554    dd ?                    ; DATA XREF: sub_405DE0+21↑w
.bss:0040B554                                         ; .text:00405E99↑w
.bss:0040B558 dword_40B558    dd ?                    ; DATA XREF: sub_405DE0+77↑r
.bss:0040B558                                         ; .text:00405EE7↑r
.bss:0040B55C dword_40B55C    dd ?                    ; DATA XREF: sub_405DE0+6B↑r
.bss:0040B55C                                         ; .text:00405EDB↑r
.bss:0040B560                 align 40h
.bss:0040B580 ; char *dword_40B580
.bss:0040B580 dword_40B580    dd ?                    ; DATA XREF: .text:004066C4↑w
.bss:0040B580                                         ; sub_4066F0+58↑r
.bss:0040B584                 align 10h
.bss:0040B590 unk_40B590      db    ? ;               ; DATA XREF: sub_4089E0+100↑o
.bss:0040B590                                         ; .data:off_40A038↑o
.bss:0040B591                 db    ? ;
.bss:0040B592                 db    ? ;
.bss:0040B593                 db    ? ;
.bss:0040B594                 db    ? ;
.bss:0040B595                 db    ? ;
.bss:0040B596                 db    ? ;
.bss:0040B597                 db    ? ;
.bss:0040B598                 db    ? ;
.bss:0040B599                 db    ? ;
.bss:0040B59A                 db    ? ;
.bss:0040B59B                 db    ? ;
.bss:0040B59C                 db    ? ;
.bss:0040B59D                 db    ? ;
.bss:0040B59E                 db    ? ;
.bss:0040B59F                 db    ? ;
.bss:0040B5A0                 db    ? ;
.bss:0040B5A1                 db    ? ;
.bss:0040B5A2                 db    ? ;
.bss:0040B5A3                 db    ? ;
.bss:0040B5A4                 db    ? ;
.bss:0040B5A5                 db    ? ;
.bss:0040B5A6                 db    ? ;
.bss:0040B5A7                 db    ? ;
.bss:0040B5A8                 db    ? ;
.bss:0040B5A9                 db    ? ;
.bss:0040B5AA                 db    ? ;
.bss:0040B5AB                 db    ? ;
.bss:0040B5AC                 db    ? ;
.bss:0040B5AD                 db    ? ;
.bss:0040B5AE                 db    ? ;
.bss:0040B5AF                 db    ? ;
.bss:0040B5B0                 db    ? ;
.bss:0040B5B1                 db    ? ;
.bss:0040B5B2                 db    ? ;
.bss:0040B5B3                 db    ? ;
.bss:0040B5B4                 db    ? ;
.bss:0040B5B5                 db    ? ;
.bss:0040B5B6                 db    ? ;
.bss:0040B5B7                 db    ? ;
.bss:0040B5B8                 db    ? ;
.bss:0040B5B9                 db    ? ;
.bss:0040B5BA                 db    ? ;
.bss:0040B5BB                 db    ? ;
.bss:0040B5BC                 db    ? ;
.bss:0040B5BD                 db    ? ;
.bss:0040B5BE                 db    ? ;
.bss:0040B5BF                 db    ? ;
.bss:0040B5C0                 db    ? ;
.bss:0040B5C1                 db    ? ;
.bss:0040B5C2                 db    ? ;
.bss:0040B5C3                 db    ? ;
.bss:0040B5C4                 db    ? ;
.bss:0040B5C5                 db    ? ;
.bss:0040B5C6                 db    ? ;
.bss:0040B5C7                 db    ? ;
.bss:0040B5C8                 db    ? ;
.bss:0040B5C9                 db    ? ;
.bss:0040B5CA                 db    ? ;
.bss:0040B5CB                 db    ? ;
.bss:0040B5CC                 db    ? ;
.bss:0040B5CD                 db    ? ;
.bss:0040B5CE                 db    ? ;
.bss:0040B5CF                 db    ? ;
.bss:0040B5D0                 db    ? ;
.bss:0040B5D1                 db    ? ;
.bss:0040B5D2                 db    ? ;
.bss:0040B5D3                 db    ? ;
.bss:0040B5D4                 db    ? ;
.bss:0040B5D5                 db    ? ;
.bss:0040B5D6                 db    ? ;
.bss:0040B5D7                 db    ? ;
.bss:0040B5D8                 db    ? ;
.bss:0040B5D9                 db    ? ;
.bss:0040B5DA                 db    ? ;
.bss:0040B5DB                 db    ? ;
.bss:0040B5DC                 db    ? ;
.bss:0040B5DD                 db    ? ;
.bss:0040B5DE                 db    ? ;
.bss:0040B5DF                 db    ? ;
.bss:0040B5E0                 db    ? ;
.bss:0040B5E1                 db    ? ;
.bss:0040B5E2                 db    ? ;
.bss:0040B5E3                 db    ? ;
.bss:0040B5E4                 db    ? ;
.bss:0040B5E5                 db    ? ;
.bss:0040B5E6                 db    ? ;
.bss:0040B5E7                 db    ? ;
.bss:0040B5E8                 db    ? ;
.bss:0040B5E9                 db    ? ;
.bss:0040B5EA                 db    ? ;
.bss:0040B5EB                 db    ? ;
.bss:0040B5EC                 db    ? ;
.bss:0040B5ED                 db    ? ;
.bss:0040B5EE                 db    ? ;
.bss:0040B5EF                 db    ? ;
.bss:0040B5F0                 db    ? ;
.bss:0040B5F1                 db    ? ;
.bss:0040B5F2                 db    ? ;
.bss:0040B5F3                 db    ? ;
.bss:0040B5F4                 db    ? ;
.bss:0040B5F5                 db    ? ;
.bss:0040B5F6                 db    ? ;
.bss:0040B5F7                 db    ? ;
.bss:0040B5F8                 db    ? ;
.bss:0040B5F9                 db    ? ;
.bss:0040B5FA                 db    ? ;
.bss:0040B5FB                 db    ? ;
.bss:0040B5FC                 db    ? ;
.bss:0040B5FD                 db    ? ;
.bss:0040B5FE                 db    ? ;
.bss:0040B5FF                 db    ? ;
.bss:0040B600                 db    ? ;
.bss:0040B601                 db    ? ;
.bss:0040B602                 db    ? ;
.bss:0040B603                 db    ? ;
.bss:0040B604                 db    ? ;
.bss:0040B605                 db    ? ;
.bss:0040B606                 db    ? ;
.bss:0040B607                 db    ? ;
.bss:0040B608                 db    ? ;
.bss:0040B609                 db    ? ;
.bss:0040B60A                 db    ? ;
.bss:0040B60B                 db    ? ;
.bss:0040B60C                 db    ? ;
.bss:0040B60D                 db    ? ;
.bss:0040B60E                 db    ? ;
.bss:0040B60F                 db    ? ;
.bss:0040B610                 db    ? ;
.bss:0040B611                 db    ? ;
.bss:0040B612                 db    ? ;
.bss:0040B613                 db    ? ;
.bss:0040B614                 db    ? ;
.bss:0040B615                 db    ? ;
.bss:0040B616                 db    ? ;
.bss:0040B617                 db    ? ;
.bss:0040B618                 db    ? ;
.bss:0040B619                 db    ? ;
.bss:0040B61A                 db    ? ;
.bss:0040B61B                 db    ? ;
.bss:0040B61C                 db    ? ;
.bss:0040B61D                 db    ? ;
.bss:0040B61E                 db    ? ;
.bss:0040B61F                 db    ? ;
.bss:0040B620                 db    ? ;
.bss:0040B621                 db    ? ;
.bss:0040B622                 db    ? ;
.bss:0040B623                 db    ? ;
.bss:0040B624                 db    ? ;
.bss:0040B625                 db    ? ;
.bss:0040B626                 db    ? ;
.bss:0040B627                 db    ? ;
.bss:0040B628                 db    ? ;
.bss:0040B629                 db    ? ;
.bss:0040B62A                 db    ? ;
.bss:0040B62B                 db    ? ;
.bss:0040B62C                 db    ? ;
.bss:0040B62D                 db    ? ;
.bss:0040B62E                 db    ? ;
.bss:0040B62F                 db    ? ;
.bss:0040B630                 db    ? ;
.bss:0040B631                 db    ? ;
.bss:0040B632                 db    ? ;
.bss:0040B633                 db    ? ;
.bss:0040B634                 db    ? ;
.bss:0040B635                 db    ? ;
.bss:0040B636                 db    ? ;
.bss:0040B637                 db    ? ;
.bss:0040B638                 db    ? ;
.bss:0040B639                 db    ? ;
.bss:0040B63A                 db    ? ;
.bss:0040B63B                 db    ? ;
.bss:0040B63C                 db    ? ;
.bss:0040B63D                 db    ? ;
.bss:0040B63E                 db    ? ;
.bss:0040B63F                 db    ? ;
.bss:0040B640                 db    ? ;
.bss:0040B641                 db    ? ;
.bss:0040B642                 db    ? ;
.bss:0040B643                 db    ? ;
.bss:0040B644                 db    ? ;
.bss:0040B645                 db    ? ;
.bss:0040B646                 db    ? ;
.bss:0040B647                 db    ? ;
.bss:0040B648                 db    ? ;
.bss:0040B649                 db    ? ;
.bss:0040B64A                 db    ? ;
.bss:0040B64B                 db    ? ;
.bss:0040B64C                 db    ? ;
.bss:0040B64D                 db    ? ;
.bss:0040B64E                 db    ? ;
.bss:0040B64F                 db    ? ;
.bss:0040B650                 db    ? ;
.bss:0040B651                 db    ? ;
.bss:0040B652                 db    ? ;
.bss:0040B653                 db    ? ;
.bss:0040B654                 db    ? ;
.bss:0040B655                 db    ? ;
.bss:0040B656                 db    ? ;
.bss:0040B657                 db    ? ;
.bss:0040B658                 db    ? ;
.bss:0040B659                 db    ? ;
.bss:0040B65A                 db    ? ;
.bss:0040B65B                 db    ? ;
.bss:0040B65C                 db    ? ;
.bss:0040B65D                 db    ? ;
.bss:0040B65E                 db    ? ;
.bss:0040B65F                 db    ? ;
.bss:0040B660                 db    ? ;
.bss:0040B661                 db    ? ;
.bss:0040B662                 db    ? ;
.bss:0040B663                 db    ? ;
.bss:0040B664                 db    ? ;
.bss:0040B665                 db    ? ;
.bss:0040B666                 db    ? ;
.bss:0040B667                 db    ? ;
.bss:0040B668                 db    ? ;
.bss:0040B669                 db    ? ;
.bss:0040B66A                 db    ? ;
.bss:0040B66B                 db    ? ;
.bss:0040B66C                 db    ? ;
.bss:0040B66D                 db    ? ;
.bss:0040B66E                 db    ? ;
.bss:0040B66F                 db    ? ;
.bss:0040B670                 db    ? ;
.bss:0040B671                 db    ? ;
.bss:0040B672                 db    ? ;
.bss:0040B673                 db    ? ;
.bss:0040B674                 db    ? ;
.bss:0040B675                 db    ? ;
.bss:0040B676                 db    ? ;
.bss:0040B677                 db    ? ;
.bss:0040B678                 db    ? ;
.bss:0040B679                 db    ? ;
.bss:0040B67A                 db    ? ;
.bss:0040B67B                 db    ? ;
.bss:0040B67C                 db    ? ;
.bss:0040B67D                 db    ? ;
.bss:0040B67E                 db    ? ;
.bss:0040B67F                 db    ? ;
.bss:0040B680                 db    ? ;
.bss:0040B681                 db    ? ;
.bss:0040B682                 db    ? ;
.bss:0040B683                 db    ? ;
.bss:0040B684                 db    ? ;
.bss:0040B685                 db    ? ;
.bss:0040B686                 db    ? ;
.bss:0040B687                 db    ? ;
.bss:0040B688                 db    ? ;
.bss:0040B689                 db    ? ;
.bss:0040B68A                 db    ? ;
.bss:0040B68B                 db    ? ;
.bss:0040B68C                 db    ? ;
.bss:0040B68D                 db    ? ;
.bss:0040B68E                 db    ? ;
.bss:0040B68F                 db    ? ;
.bss:0040B690 dword_40B690    dd ?                    ; DATA XREF: .text:loc_408371↑o
.bss:0040B690                                         ; .text:loc_408390↑o ...
.bss:0040B694 dword_40B694    dd ?                    ; DATA XREF: .text:loc_408410↑o
.bss:0040B694                                         ; .text:00408898↑r ...
.bss:0040B698 dword_40B698    dd ?                    ; DATA XREF: .text:00408892↑r
.bss:0040B698                                         ; sub_408940+2C↑r
.bss:0040B69C dword_40B69C    dd ?                    ; DATA XREF: .text:00408886↑r
.bss:0040B69C                                         ; sub_408940+22↑r
.bss:0040B6A0 dword_40B6A0    dd ?                    ; DATA XREF: .text:004088A2↑r
.bss:0040B6A0                                         ; sub_408940+36↑r
.bss:0040B6A4 dword_40B6A4    dd ?                    ; DATA XREF: .text:004088B2↑r
.bss:0040B6A4                                         ; sub_408940+4E↑r
.bss:0040B6A8 dword_40B6A8    dd ?                    ; DATA XREF: .text:004088CF↑r
.bss:0040B6A8                                         ; sub_408940+62↑r
.bss:0040B6AC dword_40B6AC    dd ?                    ; DATA XREF: .text:004088C5↑r
.bss:0040B6AC                                         ; sub_408940+70↑r
.bss:0040B6B0 dword_40B6B0    dd ?                    ; DATA XREF: .text:004088A8↑r
.bss:0040B6B0                                         ; sub_408940+7A↑r
.bss:0040B6B4                 align 10h
.bss:0040B6C0 ; char *Str1
.bss:0040B6C0 Str1            dd ?                    ; DATA XREF: sub_408D64:loc_408D9D↑w
.bss:0040B6C0                                         ; sub_408D64:loc_408ED0↑r
.bss:0040B6C4                 align 10h
.bss:0040B6D0 dword_40B6D0    dd ?                    ; DATA XREF: sub_408D64+2D↑r
.bss:0040B6D0                                         ; sub_408D64+3F↑w
.bss:0040B6D4                 align 10h
.bss:0040B6E0 dword_40B6E0    dd ?                    ; DATA XREF: sub_402390+3B↑w
.bss:0040B6E0                                         ; sub_402390+EE↑r ...
.bss:0040B6E4                 align 20h
.bss:0040B700 dword_40B700    dd ?                    ; DATA XREF: sub_405DE0+71↑w
.bss:0040B700                                         ; .text:00405EE1↑w
.bss:0040B704                 align 10h
.bss:0040B710 dword_40B710    dd ?                    ; CODE XREF: sub_408D64+63↑p
.bss:0040B710                                         ; DATA XREF: sub_408C60+1E↑r ...
.bss:0040B714                 align 10h
.bss:0040B720 dword_40B720    dd ?                    ; DATA XREF: sub_408C60+4E↑w
.bss:0040B720                                         ; sub_408D64+AB↑w
.bss:0040B724                 db    ? ;
.bss:0040B725                 db    ? ;
.bss:0040B726                 db    ? ;
.bss:0040B727                 db    ? ;
.bss:0040B728                 db    ? ;
.bss:0040B729                 db    ? ;
.bss:0040B72A                 db    ? ;
.bss:0040B72B                 db    ? ;
.bss:0040B72C                 db    ? ;
.bss:0040B72D                 db    ? ;
.bss:0040B72E                 db    ? ;
.bss:0040B72F                 db    ? ;
.bss:0040B730                 db    ? ;
.bss:0040B731                 db    ? ;
.bss:0040B732                 db    ? ;
.bss:0040B733                 db    ? ;
.bss:0040B734                 db    ? ;
.bss:0040B735                 db    ? ;
.bss:0040B736                 db    ? ;
.bss:0040B737                 db    ? ;
.bss:0040B738                 db    ? ;
.bss:0040B739                 db    ? ;
.bss:0040B73A                 db    ? ;
.bss:0040B73B                 db    ? ;
.bss:0040B73C                 db    ? ;
.bss:0040B73D                 db    ? ;
.bss:0040B73E                 db    ? ;
.bss:0040B73F                 db    ? ;
.bss:0040B740                 db    ? ;
.bss:0040B741                 db    ? ;
.bss:0040B742                 db    ? ;
.bss:0040B743                 db    ? ;
.bss:0040B744                 db    ? ;
.bss:0040B745                 db    ? ;
.bss:0040B746                 db    ? ;
.bss:0040B747                 db    ? ;
.bss:0040B748                 db    ? ;
.bss:0040B749                 db    ? ;
.bss:0040B74A                 db    ? ;
.bss:0040B74B                 db    ? ;
.bss:0040B74C                 db    ? ;
.bss:0040B74D                 db    ? ;
.bss:0040B74E                 db    ? ;
.bss:0040B74F                 db    ? ;
.bss:0040B750 dword_40B750    dd ?                    ; DATA XREF: sub_408D64+13↑r
.bss:0040B754                 align 1000h
.bss:0040B754 _bss            ends
.bss:0040B754
.idata:0040C000 ; Section 4. (virtual address 0000C000)
.idata:0040C000 ; Virtual size                  : 00000610 (   1552.)
.idata:0040C000 ; Section size in file          : 00000800 (   2048.)
.idata:0040C000 ; Offset to raw data for section: 00009000
.idata:0040C000 ; Flags C0000040: Data Readable Writable
.idata:0040C000 ; Alignment     : default
.idata:0040C000 ; ===========================================================================
.idata:0040C000
.idata:0040C000 ; Segment type: Externs
.idata:0040C000 ; _idata
.idata:0040C000
.idata:0040C001
.idata:0040C170 ;
.idata:0040C170 ; Imports from libintl3.dll
.idata:0040C170 ;
.idata:0040C170                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040C170                                         ; CODE XREF: sub_402390+55↑p
.idata:0040C170                                         ; DATA XREF: sub_402390+55↑r ...
.idata:0040C174                 extrn libintl_gettext:dword
.idata:0040C174                                         ; CODE XREF: sub_402390+E2↑p
.idata:0040C174                                         ; sub_402390+163↑p ...
.idata:0040C178                 extrn libintl_textdomain:dword
.idata:0040C178                                         ; CODE XREF: sub_402390+62↑p
.idata:0040C178                                         ; DATA XREF: sub_402390+62↑r ...
.idata:0040C17C
.idata:0040C184 ;
.idata:0040C184 ; Imports from KERNEL32.dll
.idata:0040C184 ;
.idata:0040C184 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040C184                 extrn __imp_ExitProcess:dword
.idata:0040C184                                         ; DATA XREF: ExitProcess↑r
.idata:0040C188 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040C188                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040C188                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040C18C
.idata:0040C194 ;
.idata:0040C194 ; Imports from msvcrt.dll
.idata:0040C194 ;
.idata:0040C194 ; int (__cdecl *_close)(int FileHandle)
.idata:0040C194                 extrn __imp__close:dword
.idata:0040C194                                         ; DATA XREF: _close↑r
.idata:0040C198 ; int (__cdecl *_isatty)(int FileHandle)
.idata:0040C198                 extrn __imp__isatty:dword
.idata:0040C198                                         ; DATA XREF: _isatty↑r
.idata:0040C19C ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0040C19C                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:0040C1A0
.idata:0040C1A8 ;
.idata:0040C1A8 ; Imports from MSVCP60.DLL
.idata:0040C1A8 ;
.idata:0040C1A8 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040C1A8                 extrn __imp_mbrtowc:dword
.idata:0040C1A8                                         ; DATA XREF: mbrtowc↑r
.idata:0040C1AC
.idata:0040C1B4 ;
.idata:0040C1B4 ; Imports from msvcrt.dll
.idata:0040C1B4 ;
.idata:0040C1B4                 extrn __imp___getmainargs:dword
.idata:0040C1B4                                         ; DATA XREF: __getmainargs↑r
.idata:0040C1B8 ; int _mb_cur_max
.idata:0040C1B8                 extrn __mb_cur_max:dword
.idata:0040C1B8                                         ; DATA XREF: sub_402390:loc_402B90↑r
.idata:0040C1B8                                         ; sub_402390:loc_402BF0↑r ...
.idata:0040C1BC ; char ***(__cdecl *__p__environ)()
.idata:0040C1BC                 extrn __imp___p__environ:dword
.idata:0040C1BC                                         ; DATA XREF: __p__environ↑r
.idata:0040C1C0 ; int *(__cdecl *__p__fmode)()
.idata:0040C1C0                 extrn __imp___p__fmode:dword
.idata:0040C1C0                                         ; DATA XREF: __p__fmode↑r
.idata:0040C1C4 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040C1C4                 extrn __set_app_type:dword
.idata:0040C1C4                                         ; CODE XREF: start+D↑p
.idata:0040C1C4                                         ; .text:0040102D↑p
.idata:0040C1C4                                         ; DATA XREF: ...
.idata:0040C1C8                 extrn __imp__assert:dword
.idata:0040C1C8                                         ; DATA XREF: _assert↑r
.idata:0040C1CC ; void (__cdecl *_cexit)()
.idata:0040C1CC                 extrn __imp__cexit:dword
.idata:0040C1CC                                         ; DATA XREF: _cexit↑r
.idata:0040C1D0 ; int *(__cdecl *_errno)()
.idata:0040C1D0                 extrn __imp__errno:dword
.idata:0040C1D0                                         ; DATA XREF: _errno↑r
.idata:0040C1D4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040C1D4                 extrn __imp__flsbuf:dword
.idata:0040C1D4                                         ; DATA XREF: _flsbuf↑r
.idata:0040C1D8 ; FILE iob[]
.idata:0040C1D8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040C1D8                                         ; sub_401080+75↑r ...
.idata:0040C1DC ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040C1DC                 extrn __imp__isctype:dword
.idata:0040C1DC                                         ; DATA XREF: _isctype↑r
.idata:0040C1E0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040C1E0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040C1E0                                         ; DATA XREF: .text:0040106C↑r
.idata:0040C1E4 ; const unsigned __int16 *pctype
.idata:0040C1E4                 extrn _pctype:dword     ; DATA XREF: sub_402390:loc_402BD0↑r
.idata:0040C1E4                                         ; sub_402390:loc_402C30↑r ...
.idata:0040C1E8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040C1E8                 extrn __imp__setmode:dword
.idata:0040C1E8                                         ; DATA XREF: _setmode↑r
.idata:0040C1EC ; void (__cdecl __noreturn *abort)()
.idata:0040C1EC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040C1F0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040C1F0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040C1F0                                         ; DATA XREF: sub_401040+C↑r
.idata:0040C1F4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040C1F4                 extrn __imp_calloc:dword
.idata:0040C1F4                                         ; DATA XREF: calloc↑r
.idata:0040C1F8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040C1F8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040C1FC ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040C1FC                 extrn __imp_fclose:dword
.idata:0040C1FC                                         ; DATA XREF: fclose↑r
.idata:0040C200 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040C200                 extrn __imp_fflush:dword
.idata:0040C200                                         ; DATA XREF: fflush↑r
.idata:0040C204 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040C204                 extrn __imp_fprintf:dword
.idata:0040C204                                         ; DATA XREF: fprintf↑r
.idata:0040C208 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040C208                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040C20C ; void (__cdecl *free)(void *Block)
.idata:0040C20C                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040C210 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040C210                 extrn __imp_fwrite:dword
.idata:0040C210                                         ; DATA XREF: fwrite↑r
.idata:0040C214 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040C214                 extrn __imp_getenv:dword
.idata:0040C214                                         ; DATA XREF: getenv↑r
.idata:0040C218 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040C218                 extrn __imp_iswctype:dword
.idata:0040C218                                         ; DATA XREF: iswctype↑r
.idata:0040C21C ; void *(__cdecl *malloc)(size_t Size)
.idata:0040C21C                 extrn __imp_malloc:dword
.idata:0040C21C                                         ; DATA XREF: malloc↑r
.idata:0040C220 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040C220                 extrn __imp_memcpy:dword
.idata:0040C220                                         ; DATA XREF: memcpy↑r
.idata:0040C224 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040C224                 extrn __imp_memset:dword
.idata:0040C224                                         ; DATA XREF: memset↑r
.idata:0040C228 ; int (*printf)(const char *const Format, ...)
.idata:0040C228                 extrn __imp_printf:dword
.idata:0040C228                                         ; DATA XREF: printf↑r
.idata:0040C22C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040C22C                 extrn __imp_realloc:dword
.idata:0040C22C                                         ; DATA XREF: realloc↑r
.idata:0040C230 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040C230                 extrn __imp_setlocale:dword
.idata:0040C230                                         ; DATA XREF: setlocale↑r
.idata:0040C234 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040C234                 extrn __imp_signal:dword
.idata:0040C234                                         ; DATA XREF: signal↑r
.idata:0040C238 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0040C238                 extrn __imp_sprintf:dword
.idata:0040C238                                         ; DATA XREF: sprintf↑r
.idata:0040C23C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040C23C                 extrn __imp_strchr:dword
.idata:0040C23C                                         ; DATA XREF: strchr↑r
.idata:0040C240 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040C240                 extrn __imp_strcmp:dword
.idata:0040C240                                         ; DATA XREF: strcmp↑r
.idata:0040C244 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040C244                 extrn __imp_strerror:dword
.idata:0040C244                                         ; DATA XREF: strerror↑r
.idata:0040C248 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040C248                 extrn __imp_strlen:dword
.idata:0040C248                                         ; DATA XREF: strlen↑r
.idata:0040C24C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040C24C                 extrn __imp_strncmp:dword
.idata:0040C24C                                         ; DATA XREF: strncmp↑r
.idata:0040C250 ; int (__cdecl *tolower)(int C)
.idata:0040C250                 extrn __imp_tolower:dword
.idata:0040C250                                         ; DATA XREF: tolower↑r
.idata:0040C254 ; int (__cdecl *toupper)(int C)
.idata:0040C254                 extrn __imp_toupper:dword
.idata:0040C254                                         ; DATA XREF: toupper↑r
.idata:0040C258 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040C258                 extrn __imp_vfprintf:dword
.idata:0040C258                                         ; DATA XREF: vfprintf↑r
.idata:0040C25C
.idata:0040C25C
.idata:0040C25C
.idata:0040C25C                 end start
