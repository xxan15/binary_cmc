.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : E0AD47C6B35A9BAA3137017CED78B85B9AC428553A9F1EE1D085870D9802EACF
.text:00401000 ; Input MD5    : 8CA4FA52C095F1FE8C414AD8DD6458F7
.text:00401000 ; Input CRC32  : 1D887341
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/printenv.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A26D (Wed Apr 20 18:41:49 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00003D70 (  15728.)
.text:00401000 ; Section size in file          : 00003E00 (  15872.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401350+6D↓p
.text:00401040                                         ; .text:00404A50↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4049F0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_405000
.text:004010A2                 mov     edx, dword_405050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_405004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_405070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_405070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4049C0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_405000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_405004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401350
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4049F0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401350+20↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401350+3A↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401350+42↓o
.text:004012C3                                         ; sub_401350+4F↓o
.text:004012CD aRichardMlynari db 'Richard Mlynarik',0 ; DATA XREF: sub_401350+7D↓o
.text:004012DE aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401350+85↓o
.text:004012EE a530            db '5.3.0',0            ; DATA XREF: sub_401350+95↓o
.text:004012F4 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401350+9D↓o
.text:00401302 ; const FILE stru_401302
.text:00401302 stru_401302     FILE <6E697270h, 766E6574h, 90002B00h, 90909090h, 90909090h, \
.text:00401302                                         ; DATA XREF: sub_401350+A5↓o
.text:00401302                                         ; sub_401350+C9↓o
.text:00401302                       90909090h, 90909090h, 72549090h>
.text:00401322                 db  79h ; y
.text:00401323                 db  20h
.text:00401324                 db  60h ; `
.text:00401325                 db  25h ; %
.text:00401326                 db  73h ; s
.text:00401327                 db  20h
.text:00401328                 db  2Dh ; -
.text:00401329                 db  2Dh ; -
.text:0040132A                 db  68h ; h
.text:0040132B                 db  65h ; e
.text:0040132C                 db  6Ch ; l
.text:0040132D                 db  70h ; p
.text:0040132E                 db  27h ; '
.text:0040132F                 db  20h
.text:00401330                 db  66h ; f
.text:00401331                 db  6Fh ; o
.text:00401332                 db  72h ; r
.text:00401333                 db  20h
.text:00401334                 db  6Dh ; m
.text:00401335                 db  6Fh ; o
.text:00401336                 db  72h ; r
.text:00401337                 db  65h ; e
.text:00401338                 db  20h
.text:00401339                 db  69h ; i
.text:0040133A                 db  6Eh ; n
.text:0040133B                 db  66h ; f
.text:0040133C                 db  6Fh ; o
.text:0040133D                 db  72h ; r
.text:0040133E                 db  6Dh ; m
.text:0040133F                 db  61h ; a
.text:00401340                 db  74h ; t
.text:00401341                 db  69h ; i
.text:00401342                 db  6Fh ; o
.text:00401343                 db  6Eh ; n
.text:00401344                 db  2Eh ; .
.text:00401345                 db  0Ah
.text:00401346                 db    0
.text:00401347                 align 10h
.text:00401350
.text:00401350 ; =============== S U B R O U T I N E =======================================
.text:00401350
.text:00401350 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401350
.text:00401350 sub_401350      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401350
.text:00401350 Category        = dword ptr -48h
.text:00401350 Locale          = dword ptr -44h
.text:00401350 var_40          = dword ptr -40h
.text:00401350 var_3C          = dword ptr -3Ch
.text:00401350 var_38          = dword ptr -38h
.text:00401350 var_34          = dword ptr -34h
.text:00401350 var_30          = byte ptr -30h
.text:00401350 var_2C          = dword ptr -2Ch
.text:00401350 var_28          = dword ptr -28h
.text:00401350 var_16          = byte ptr -16h
.text:00401350 var_15          = byte ptr -15h
.text:00401350 var_14          = dword ptr -14h
.text:00401350 var_10          = dword ptr -10h
.text:00401350 arg_0           = dword ptr  8
.text:00401350 arg_4           = dword ptr  0Ch
.text:00401350
.text:00401350                 push    ebp
.text:00401351                 xor     eax, eax
.text:00401353                 mov     ebp, esp
.text:00401355                 push    edi
.text:00401356                 push    esi
.text:00401357                 push    ebx
.text:00401358                 sub     esp, 3Ch
.text:0040135B                 and     esp, 0FFFFFFF0h
.text:0040135E                 call    __alloca
.text:00401363                 mov     esi, [ebp+arg_0]
.text:00401366                 call    sub_404A90
.text:0040136B                 mov     ebx, [ebp+arg_4]
.text:0040136E                 mov     ecx, [ebx]
.text:00401370                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:00401378                 mov     [esp+48h+Category], 0 ; Category
.text:0040137F                 mov     ds:dword_406190, ecx
.text:00401385                 call    setlocale
.text:0040138A                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401392                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:00401399                 call    ds:__imp_libintl_bindtextdomain
.text:0040139F                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004013A6                 call    ds:libintl_textdomain
.text:004013AC                 mov     [esp+48h+Category], offset sub_402A10 ; void (__cdecl *)()
.text:004013B3                 mov     eax, 2
.text:004013B8                 mov     Code, eax
.text:004013BD                 call    sub_401040
.text:004013C2                 mov     [esp+48h+var_28], 0
.text:004013CA                 mov     edi, [ebp+arg_4]
.text:004013CD                 mov     [esp+48h+var_2C], offset aRichardMlynari ; "Richard Mlynarik"
.text:004013D5                 mov     dword ptr [esp+48h+var_30], offset aDavidMackenzie ; "David MacKenzie"
.text:004013DD                 mov     [esp+48h+var_34], offset sub_401690 ; int
.text:004013E5                 mov     [esp+48h+var_38], offset a530 ; "5.3.0"
.text:004013ED                 mov     [esp+48h+var_3C], offset aGnuCoreutils ; "GNU coreutils"
.text:004013F5                 mov     [esp+48h+var_40], offset stru_401302 ; FILE *
.text:004013FD                 mov     [esp+48h+Locale], edi ; int
.text:00401401                 mov     [esp+48h+Category], esi ; int
.text:00401404                 call    sub_402920
.text:00401409                 mov     [esp+48h+var_38], 0 ; int
.text:00401411                 mov     [esp+48h+var_3C], 0 ; int
.text:00401419                 mov     [esp+48h+var_40], (offset stru_401302._base+1) ; char *
.text:00401421                 mov     [esp+48h+Locale], edi ; int
.text:00401425                 mov     [esp+48h+Category], esi ; int
.text:00401428                 call    sub_402780
.text:0040142D                 inc     eax
.text:0040142E                 jz      short loc_401468
.text:00401430                 mov     [esp+48h+Category], (offset stru_401302._tmpfname+2)
.text:00401437                 call    ds:libintl_gettext
.text:0040143D                 mov     edx, ds:_iob
.text:00401443                 mov     esi, ds:dword_406190
.text:00401449                 add     edx, 40h ; '@'
.text:0040144C                 mov     [esp+48h+var_40], esi
.text:00401450                 mov     [esp+48h+Locale], eax ; Format
.text:00401454                 mov     [esp+48h+Category], edx ; Stream
.text:00401457                 call    fprintf
.text:0040145C                 mov     [esp+48h+Category], 2 ; Code
.text:00401463
.text:00401463 loc_401463:                             ; CODE XREF: sub_401350+19E↓j
.text:00401463                 call    exit
.text:00401468 ; ---------------------------------------------------------------------------
.text:00401468
.text:00401468 loc_401468:                             ; CODE XREF: sub_401350+DE↑j
.text:00401468                 mov     eax, dword_405020
.text:0040146D                 cmp     eax, esi
.text:0040146F                 jge     loc_401526
.text:00401475                 mov     [ebp+var_14], 0
.text:0040147C                 mov     [ebp+var_10], eax
.text:0040147F
.text:0040147F loc_40147F:                             ; CODE XREF: sub_401350+186↓j
.text:0040147F                 mov     [ebp+var_15], 0
.text:00401483                 call    __p__environ
.text:00401488                 mov     edi, [eax]
.text:0040148A                 mov     eax, [edi]
.text:0040148C                 test    eax, eax
.text:0040148E                 jz      short loc_4014C9
.text:00401490
.text:00401490 loc_401490:                             ; CODE XREF: sub_401350+177↓j
.text:00401490                 mov     ebx, [ebp+arg_4]
.text:00401493                 mov     edx, [ebp+var_10]
.text:00401496                 mov     ecx, [ebx+edx*4]
.text:00401499                 movzx   ebx, byte ptr [eax]
.text:0040149C                 test    bl, bl
.text:0040149E                 mov     [ebp+var_16], bl
.text:004014A1                 jz      short loc_4014C0
.text:004014A3                 movzx   edx, byte ptr [ecx]
.text:004014A6                 test    dl, dl
.text:004014A8                 jz      short loc_4014C0
.text:004014AA                 inc     ecx
.text:004014AB                 lea     ebx, [eax+1]
.text:004014AE                 cmp     [ebp+var_16], dl
.text:004014B1                 jz      short loc_4014F3
.text:004014B3                 lea     esi, [esi+0]
.text:004014B9                 lea     edi, [edi+0]
.text:004014C0
.text:004014C0 loc_4014C0:                             ; CODE XREF: sub_401350+151↑j
.text:004014C0                                         ; sub_401350+158↑j ...
.text:004014C0                 add     edi, 4
.text:004014C3                 mov     eax, [edi]
.text:004014C5                 test    eax, eax
.text:004014C7                 jnz     short loc_401490
.text:004014C9
.text:004014C9 loc_4014C9:                             ; CODE XREF: sub_401350+13E↑j
.text:004014C9                 movzx   edi, [ebp+var_15]
.text:004014CD                 inc     [ebp+var_10]
.text:004014D0                 add     [ebp+var_14], edi
.text:004014D3                 cmp     [ebp+var_10], esi
.text:004014D6                 jl      short loc_40147F
.text:004014D8                 mov     edx, dword_405020
.text:004014DE                 sub     esi, edx
.text:004014E0                 cmp     [ebp+var_14], esi
.text:004014E3                 setz    al
.text:004014E6
.text:004014E6 loc_4014E6:                             ; CODE XREF: sub_401350+1E5↓j
.text:004014E6                 xor     al, 1
.text:004014E8                 movzx   esi, al
.text:004014EB                 mov     [esp+48h+Category], esi
.text:004014EE                 jmp     loc_401463
.text:004014F3 ; ---------------------------------------------------------------------------
.text:004014F3
.text:004014F3 loc_4014F3:                             ; CODE XREF: sub_401350+161↑j
.text:004014F3                                         ; sub_401350+1BA↓j
.text:004014F3                 movzx   edx, byte ptr [ebx]
.text:004014F6                 cmp     dl, 3Dh ; '='
.text:004014F9                 jz      short loc_401510
.text:004014FB
.text:004014FB loc_4014FB:                             ; CODE XREF: sub_401350+1C3↓j
.text:004014FB                 test    dl, dl
.text:004014FD                 jz      short loc_4014C0
.text:004014FF                 movzx   eax, byte ptr [ecx]
.text:00401502                 test    al, al
.text:00401504                 jz      short loc_4014C0
.text:00401506                 inc     ecx
.text:00401507                 inc     ebx
.text:00401508                 cmp     dl, al
.text:0040150A                 jz      short loc_4014F3
.text:0040150C                 jmp     short loc_4014C0
.text:0040150C ; ---------------------------------------------------------------------------
.text:0040150E                 align 10h
.text:00401510
.text:00401510 loc_401510:                             ; CODE XREF: sub_401350+1A9↑j
.text:00401510                 cmp     byte ptr [ecx], 0
.text:00401513                 jnz     short loc_4014FB
.text:00401515                 lea     ecx, [ebx+1]
.text:00401518                 mov     [esp+48h+Category], ecx ; Buffer
.text:0040151B                 call    puts
.text:00401520                 mov     [ebp+var_15], 1
.text:00401524                 jmp     short loc_4014C0
.text:00401526 ; ---------------------------------------------------------------------------
.text:00401526
.text:00401526 loc_401526:                             ; CODE XREF: sub_401350+11F↑j
.text:00401526                 call    __p__environ
.text:0040152B                 mov     edi, [eax]
.text:0040152D                 mov     eax, [edi]
.text:0040152F                 test    eax, eax
.text:00401531                 jnz     short loc_401537
.text:00401533
.text:00401533 loc_401533:                             ; CODE XREF: sub_401350+1F8↓j
.text:00401533                 mov     al, 1
.text:00401535                 jmp     short loc_4014E6
.text:00401537 ; ---------------------------------------------------------------------------
.text:00401537
.text:00401537 loc_401537:                             ; CODE XREF: sub_401350+1E1↑j
.text:00401537                                         ; sub_401350+1F6↓j
.text:00401537                 mov     [esp+48h+Category], eax ; Buffer
.text:0040153A                 add     edi, 4
.text:0040153D                 call    puts
.text:00401542                 mov     eax, [edi]
.text:00401544                 test    eax, eax
.text:00401546                 jnz     short loc_401537
.text:00401548                 jmp     short loc_401533
.text:00401548 sub_401350      endp
.text:00401548
.text:00401548 ; ---------------------------------------------------------------------------
.text:0040154A                 align 20h
.text:00401560 aUsageSVariable db 'Usage: %s [VARIABLE]...',0Ah
.text:00401560                                         ; DATA XREF: sub_401690:loc_4016D3↓o
.text:00401560                 db '  or:  %s OPTION',0Ah
.text:00401560                 db 'If no environment VARIABLE specified, print them all.',0Ah
.text:00401560                 db 0Ah,0
.text:004015C1                 align 20h
.text:004015E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004015E0                                         ; DATA XREF: sub_401690+66↓o
.text:0040160D                 align 20h
.text:00401620 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_401690+88↓o
.text:00401656 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401690+AA↓o
.text:00401656                 db 'Report bugs to <%s>.',0Ah,0
.text:0040166D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040166D                                         ; DATA XREF: sub_401690+B7↓o
.text:00401683                 align 10h
.text:00401690
.text:00401690 ; =============== S U B R O U T I N E =======================================
.text:00401690
.text:00401690 ; Attributes: noreturn
.text:00401690
.text:00401690 ; void __cdecl __noreturn sub_401690(int Code)
.text:00401690 sub_401690      proc near               ; DATA XREF: sub_401350+8D↑o
.text:00401690
.text:00401690 Stream          = dword ptr -1Ch
.text:00401690 Format          = dword ptr -18h
.text:00401690 var_14          = dword ptr -14h
.text:00401690 var_4           = dword ptr -4
.text:00401690 Code            = dword ptr  4
.text:00401690
.text:00401690                 sub     esp, 1Ch
.text:00401693                 mov     [esp+1Ch+var_4], ebx
.text:00401697                 mov     ebx, [esp+1Ch+Code]
.text:0040169B                 test    ebx, ebx
.text:0040169D                 jz      short loc_4016D3
.text:0040169F                 mov     [esp+1Ch+Stream], (offset stru_401302._tmpfname+2)
.text:004016A6                 call    ds:libintl_gettext
.text:004016AC                 mov     edx, ds:_iob
.text:004016B2                 mov     ecx, ds:dword_406190
.text:004016B8                 add     edx, 40h ; '@'
.text:004016BB                 mov     [esp+1Ch+var_14], ecx
.text:004016BF                 mov     [esp+1Ch+Format], eax ; Format
.text:004016C3                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004016C6                 call    fprintf
.text:004016CB
.text:004016CB loc_4016CB:                             ; CODE XREF: sub_401690+C7↓j
.text:004016CB                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004016CE                 call    exit
.text:004016D3 ; ---------------------------------------------------------------------------
.text:004016D3
.text:004016D3 loc_4016D3:                             ; CODE XREF: sub_401690+D↑j
.text:004016D3                 mov     [esp+1Ch+Stream], offset aUsageSVariable ; "Usage: %s [VARIABLE]...\n  or:  %s OPTI"...
.text:004016DA                 call    ds:libintl_gettext
.text:004016E0                 mov     ecx, ds:dword_406190
.text:004016E6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004016E9                 mov     [esp+1Ch+var_14], ecx
.text:004016ED                 mov     [esp+1Ch+Format], ecx
.text:004016F1                 call    printf
.text:004016F6                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004016FD                 call    ds:libintl_gettext
.text:00401703                 mov     ecx, ds:_iob
.text:00401709                 add     ecx, 20h ; ' '
.text:0040170C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401710                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401713                 call    fputs
.text:00401718                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040171F                 call    ds:libintl_gettext
.text:00401725                 mov     ecx, ds:_iob
.text:0040172B                 add     ecx, 20h ; ' '
.text:0040172E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401732                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401735                 call    fputs
.text:0040173A                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401741                 call    ds:libintl_gettext
.text:00401747                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040174F                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401752                 call    printf
.text:00401757                 jmp     loc_4016CB
.text:00401757 sub_401690      endp
.text:00401757
.text:00401757 ; ---------------------------------------------------------------------------
.text:0040175C                 align 10h
.text:00401760 dword_401760    dd 90002D2Dh, 7 dup(90909090h)
.text:00401760                                         ; DATA XREF: sub_4019B0+E4↓o
.text:00401780 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401780                                         ; DATA XREF: sub_4019B0+2FC↓o
.text:004017AD                 align 20h
.text:004017C0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004017C0                                         ; DATA XREF: sub_4019B0:loc_401D12↓o
.text:004017ED                 align 20h
.text:00401800 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401800                                         ; DATA XREF: sub_4019B0:loc_401DB0↓o
.text:00401800                                         ; sub_4019B0:loc_402177↓o
.text:00401826                 align 20h
.text:00401840 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401840                                         ; DATA XREF: sub_4019B0+48E↓o
.text:00401860 dword_401860    dd 90909000h, 7 dup(90909090h)
.text:00401860                                         ; DATA XREF: sub_4019B0:loc_401E81↓o
.text:00401880 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401880                                         ; DATA XREF: sub_4019B0:loc_401E9A↓o
.text:004018A0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004018A0                                         ; DATA XREF: sub_4019B0:loc_401F7F↓o
.text:004018A0                                         ; sub_4019B0:loc_4022AC↓o
.text:004018C7                 align 20h
.text:004018E0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004018E0                                         ; DATA XREF: sub_4019B0:loc_4020F3↓o
.text:0040190E                 align 20h
.text:00401920 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401920                                         ; DATA XREF: sub_4019B0:loc_4021DF↓o
.text:00401941 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401941                                         ; DATA XREF: sub_4019B0+93F↓o
.text:0040195B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040195B                                         ; DATA XREF: sub_4019B0:loc_402327↓o
.text:00401975 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401975                                         ; DATA XREF: sub_4019B0:loc_40234E↓o
.text:00401993 ; const char VarName[]
.text:00401993 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4019B0:loc_402500↓o
.text:004019A3                 align 10h
.text:004019B0
.text:004019B0 ; =============== S U B R O U T I N E =======================================
.text:004019B0
.text:004019B0
.text:004019B0 ; int __cdecl sub_4019B0(int, int, char *Str, int, int, int, int, int)
.text:004019B0 sub_4019B0      proc near               ; CODE XREF: sub_402540+5A↓p
.text:004019B0                                         ; .text:0040262A↓p ...
.text:004019B0
.text:004019B0 Str1            = dword ptr -5Ch
.text:004019B0 Str2            = dword ptr -58h
.text:004019B0 MaxCount        = dword ptr -54h
.text:004019B0 var_50          = dword ptr -50h
.text:004019B0 var_4C          = dword ptr -4Ch
.text:004019B0 var_3C          = dword ptr -3Ch
.text:004019B0 var_38          = dword ptr -38h
.text:004019B0 var_34          = dword ptr -34h
.text:004019B0 var_30          = dword ptr -30h
.text:004019B0 var_2C          = dword ptr -2Ch
.text:004019B0 var_28          = dword ptr -28h
.text:004019B0 var_24          = dword ptr -24h
.text:004019B0 var_20          = dword ptr -20h
.text:004019B0 var_1C          = dword ptr -1Ch
.text:004019B0 var_18          = dword ptr -18h
.text:004019B0 var_14          = dword ptr -14h
.text:004019B0 arg_0           = dword ptr  4
.text:004019B0 arg_4           = dword ptr  8
.text:004019B0 Str             = dword ptr  0Ch
.text:004019B0 arg_C           = dword ptr  10h
.text:004019B0 arg_10          = dword ptr  14h
.text:004019B0 arg_14          = dword ptr  18h
.text:004019B0 arg_18          = dword ptr  1Ch
.text:004019B0 arg_1C          = dword ptr  20h
.text:004019B0
.text:004019B0                 push    ebp
.text:004019B1                 mov     eax, 0FFFFFFFFh
.text:004019B6                 push    edi
.text:004019B7                 push    esi
.text:004019B8                 push    ebx
.text:004019B9                 sub     esp, 4Ch
.text:004019BC                 mov     esi, [esp+5Ch+Str]
.text:004019C0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004019C4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004019C7                 mov     ebx, [ebp+4]
.text:004019CA                 setz    dl
.text:004019CD                 movzx   ecx, dl
.text:004019D0                 dec     ecx
.text:004019D1                 and     ecx, ebx
.text:004019D3                 mov     [esp+5Ch+var_14], ecx
.text:004019D7                 mov     ecx, [esp+5Ch+arg_0]
.text:004019DB                 test    ecx, ecx
.text:004019DD                 jle     loc_401B07
.text:004019E3                 mov     dword ptr [ebp+0Ch], 0
.text:004019EA                 mov     ebx, [ebp+0]
.text:004019ED                 test    ebx, ebx
.text:004019EF                 jz      loc_402520
.text:004019F5                 mov     edi, [ebp+10h]
.text:004019F8                 test    edi, edi
.text:004019FA                 jnz     short loc_401A53
.text:004019FC                 lea     esi, [esi+0]
.text:00401A00
.text:00401A00 loc_401A00:                             ; CODE XREF: sub_4019B0+B7C↓j
.text:00401A00                 mov     [ebp+24h], ebx
.text:00401A03                 mov     esi, [esp+5Ch+Str]
.text:00401A07                 mov     [ebp+20h], ebx
.text:00401A0A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401A0E                 xor     ebx, ebx
.text:00401A10                 mov     dword ptr [ebp+14h], 0
.text:00401A17                 test    ecx, ecx
.text:00401A19                 jz      loc_402500
.text:00401A1F
.text:00401A1F loc_401A1F:                             ; CODE XREF: sub_4019B0+B64↓j
.text:00401A1F                 mov     ebx, 1
.text:00401A24
.text:00401A24 loc_401A24:                             ; CODE XREF: sub_4019B0+B5E↓j
.text:00401A24                 mov     [ebp+1Ch], ebx
.text:00401A27                 mov     ecx, [esp+5Ch+Str]
.text:00401A2B                 movzx   eax, byte ptr [ecx]
.text:00401A2E                 cmp     al, 2Dh ; '-'
.text:00401A30                 jz      loc_4024F0
.text:00401A36                 cmp     al, 2Bh ; '+'
.text:00401A38                 jz      loc_4024D9
.text:00401A3E                 xor     edx, edx
.text:00401A40                 test    ebx, ebx
.text:00401A42                 setz    dl
.text:00401A45                 mov     [ebp+18h], edx
.text:00401A48
.text:00401A48 loc_401A48:                             ; CODE XREF: sub_4019B0+B35↓j
.text:00401A48                 mov     [esp+5Ch+Str], esi
.text:00401A4C                 mov     dword ptr [ebp+10h], 1
.text:00401A53
.text:00401A53 loc_401A53:                             ; CODE XREF: sub_4019B0+4A↑j
.text:00401A53                 mov     eax, [ebp+14h]
.text:00401A56                 test    eax, eax
.text:00401A58                 jz      short loc_401A63
.text:00401A5A                 cmp     byte ptr [eax], 0
.text:00401A5D                 jnz     loc_401B40
.text:00401A63
.text:00401A63 loc_401A63:                             ; CODE XREF: sub_4019B0+A8↑j
.text:00401A63                 mov     ebx, [ebp+0]
.text:00401A66                 cmp     [ebp+24h], ebx
.text:00401A69                 jle     short loc_401A6E
.text:00401A6B                 mov     [ebp+24h], ebx
.text:00401A6E
.text:00401A6E loc_401A6E:                             ; CODE XREF: sub_4019B0+B9↑j
.text:00401A6E                 cmp     [ebp+20h], ebx
.text:00401A71                 jle     short loc_401A76
.text:00401A73                 mov     [ebp+20h], ebx
.text:00401A76
.text:00401A76 loc_401A76:                             ; CODE XREF: sub_4019B0+C1↑j
.text:00401A76                 cmp     dword ptr [ebp+18h], 1
.text:00401A7A                 jz      loc_402450
.text:00401A80
.text:00401A80 loc_401A80:                             ; CODE XREF: sub_4019B0+B13↓j
.text:00401A80                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401A84                 jz      loc_402434
.text:00401A8A                 cld
.text:00401A8B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401A8F                 mov     edx, 3
.text:00401A94                 mov     edi, offset dword_401760
.text:00401A99                 mov     esi, [ecx+ebx*4]
.text:00401A9C                 mov     ecx, edx
.text:00401A9E                 repe cmpsb
.text:00401AA0                 jnz     short loc_401ADC
.text:00401AA2                 mov     edx, [ebp+24h]
.text:00401AA5                 lea     eax, [ebx+1]
.text:00401AA8                 cmp     [ebp+20h], edx
.text:00401AAB                 mov     [ebp+0], eax
.text:00401AAE                 jz      loc_402448
.text:00401AB4                 cmp     edx, eax
.text:00401AB6                 jz      short loc_401AD0
.text:00401AB8                 mov     [esp+5Ch+Str2], ebp
.text:00401ABC                 mov     ebx, [esp+5Ch+arg_4]
.text:00401AC0                 mov     [esp+5Ch+Str1], ebx
.text:00401AC3                 call    sub_402660
.text:00401AC8                 nop
.text:00401AC9                 lea     esi, [esi+0]
.text:00401AD0
.text:00401AD0 loc_401AD0:                             ; CODE XREF: sub_4019B0+106↑j
.text:00401AD0                                         ; sub_4019B0+A9B↓j
.text:00401AD0                 mov     eax, [esp+5Ch+arg_0]
.text:00401AD4                 mov     ebx, eax
.text:00401AD6                 mov     [ebp+24h], eax
.text:00401AD9                 mov     [ebp+0], eax
.text:00401ADC
.text:00401ADC loc_401ADC:                             ; CODE XREF: sub_4019B0+F0↑j
.text:00401ADC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401AE0                 jz      loc_402434
.text:00401AE6                 mov     esi, [esp+5Ch+arg_4]
.text:00401AEA                 mov     eax, [esi+ebx*4]
.text:00401AED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401AF0                 jz      short loc_401B17
.text:00401AF2
.text:00401AF2 loc_401AF2:                             ; CODE XREF: sub_4019B0+16D↓j
.text:00401AF2                 mov     edx, [ebp+18h]
.text:00401AF5                 test    edx, edx
.text:00401AF7                 jz      short loc_401B10
.text:00401AF9                 mov     [ebp+0Ch], eax
.text:00401AFC                 lea     edi, [ebx+1]
.text:00401AFF                 mov     eax, 1
.text:00401B04                 mov     [ebp+0], edi
.text:00401B07
.text:00401B07 loc_401B07:                             ; CODE XREF: sub_4019B0+2D↑j
.text:00401B07                                         ; sub_4019B0+165↓j ...
.text:00401B07                 add     esp, 4Ch
.text:00401B0A                 pop     ebx
.text:00401B0B                 pop     esi
.text:00401B0C                 pop     edi
.text:00401B0D                 pop     ebp
.text:00401B0E                 retn
.text:00401B0E ; ---------------------------------------------------------------------------
.text:00401B0F                 align 10h
.text:00401B10
.text:00401B10 loc_401B10:                             ; CODE XREF: sub_4019B0+147↑j
.text:00401B10                                         ; sub_4019B0+A8A↓j ...
.text:00401B10                 mov     eax, 0FFFFFFFFh
.text:00401B15                 jmp     short loc_401B07
.text:00401B17 ; ---------------------------------------------------------------------------
.text:00401B17
.text:00401B17 loc_401B17:                             ; CODE XREF: sub_4019B0+140↑j
.text:00401B17                 movzx   edx, byte ptr [eax+1]
.text:00401B1B                 test    dl, dl
.text:00401B1D                 jz      short loc_401AF2
.text:00401B1F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401B23                 xor     ecx, ecx
.text:00401B25                 test    ebx, ebx
.text:00401B27                 jz      short loc_401B32
.text:00401B29                 cmp     dl, 2Dh ; '-'
.text:00401B2C                 jz      loc_40242A
.text:00401B32
.text:00401B32 loc_401B32:                             ; CODE XREF: sub_4019B0+177↑j
.text:00401B32                                         ; sub_4019B0+A7F↓j
.text:00401B32                 lea     esi, [ecx+eax+1]
.text:00401B36                 mov     [ebp+14h], esi
.text:00401B39                 lea     esi, [esi+0]
.text:00401B40
.text:00401B40 loc_401B40:                             ; CODE XREF: sub_4019B0+AD↑j
.text:00401B40                 mov     ecx, [esp+5Ch+arg_C]
.text:00401B44                 test    ecx, ecx
.text:00401B46                 jz      loc_401ED0
.text:00401B4C                 mov     edx, [ebp+0]
.text:00401B4F                 mov     edi, [esp+5Ch+arg_4]
.text:00401B53                 mov     eax, [edi+edx*4]
.text:00401B56                 movzx   edx, byte ptr [eax+1]
.text:00401B5A                 cmp     dl, 2Dh ; '-'
.text:00401B5D                 jz      short loc_401B75
.text:00401B5F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401B63                 test    ebx, ebx
.text:00401B65                 jz      loc_401ED0
.text:00401B6B                 cmp     byte ptr [eax+2], 0
.text:00401B6F                 jz      loc_40240A
.text:00401B75
.text:00401B75 loc_401B75:                             ; CODE XREF: sub_4019B0+1AD↑j
.text:00401B75                                         ; sub_4019B0+A75↓j
.text:00401B75                 mov     [esp+5Ch+var_18], 0
.text:00401B7D                 mov     ecx, [ebp+14h]
.text:00401B80                 mov     [esp+5Ch+var_1C], 0
.text:00401B88                 mov     [esp+5Ch+var_20], 0
.text:00401B90                 mov     edi, ecx
.text:00401B92                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401B9A                 movzx   eax, byte ptr [ecx]
.text:00401B9D                 test    al, al
.text:00401B9F                 jz      short loc_401BBC
.text:00401BA1                 cmp     al, 3Dh ; '='
.text:00401BA3                 jz      short loc_401BBC
.text:00401BA5                 lea     esi, [esi+0]
.text:00401BA9                 lea     edi, [edi+0]
.text:00401BB0
.text:00401BB0 loc_401BB0:                             ; CODE XREF: sub_4019B0+20A↓j
.text:00401BB0                 inc     edi
.text:00401BB1                 movzx   eax, byte ptr [edi]
.text:00401BB4                 test    al, al
.text:00401BB6                 jz      short loc_401BBC
.text:00401BB8                 cmp     al, 3Dh ; '='
.text:00401BBA                 jnz     short loc_401BB0
.text:00401BBC
.text:00401BBC loc_401BBC:                             ; CODE XREF: sub_4019B0+1EF↑j
.text:00401BBC                                         ; sub_4019B0+1F3↑j ...
.text:00401BBC                 mov     [esp+5Ch+var_28], 0
.text:00401BC4                 mov     esi, [esp+5Ch+arg_C]
.text:00401BC8                 mov     ebx, [esi]
.text:00401BCA                 test    ebx, ebx
.text:00401BCC                 mov     edx, ebx
.text:00401BCE                 jz      loc_401DF0
.text:00401BD4                 lea     esi, [esi+0]
.text:00401BDA                 lea     edi, [edi+0]
.text:00401BE0
.text:00401BE0 loc_401BE0:                             ; CODE XREF: sub_4019B0+25E↓j
.text:00401BE0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401BE4                 mov     ebx, edi
.text:00401BE6                 sub     ebx, ecx
.text:00401BE8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401BEC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401BEF                 call    strncmp
.text:00401BF4                 test    eax, eax
.text:00401BF6                 jz      loc_402386
.text:00401BFC
.text:00401BFC loc_401BFC:                             ; CODE XREF: sub_4019B0+A0F↓j
.text:00401BFC                                         ; sub_4019B0+A24↓j ...
.text:00401BFC                 inc     [esp+5Ch+var_28]
.text:00401C00                 add     esi, 10h
.text:00401C03                 mov     ecx, [esi]
.text:00401C05                 test    ecx, ecx
.text:00401C07                 mov     edx, ecx
.text:00401C09                 jz      short loc_401C10
.text:00401C0B                 mov     ecx, [ebp+14h]
.text:00401C0E                 jmp     short loc_401BE0
.text:00401C10 ; ---------------------------------------------------------------------------
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_4019B0+259↑j
.text:00401C10                                         ; sub_4019B0+A55↓j
.text:00401C10                 mov     esi, [esp+5Ch+var_20]
.text:00401C14                 test    esi, esi
.text:00401C16                 jz      short loc_401C24
.text:00401C18                 mov     edx, [esp+5Ch+var_1C]
.text:00401C1C                 test    edx, edx
.text:00401C1E                 jz      loc_402330
.text:00401C24
.text:00401C24 loc_401C24:                             ; CODE XREF: sub_4019B0+266↑j
.text:00401C24                 mov     eax, [esp+5Ch+var_18]
.text:00401C28                 test    eax, eax
.text:00401C2A                 jz      loc_401DF0
.text:00401C30                 mov     ecx, [ebp+0]
.text:00401C33                 lea     eax, [ecx+1]
.text:00401C36                 mov     [ebp+0], eax
.text:00401C39                 cmp     byte ptr [edi], 0
.text:00401C3C                 jz      loc_401D50
.text:00401C42                 mov     ecx, [esp+5Ch+var_18]
.text:00401C46                 mov     esi, [ecx+4]
.text:00401C49                 test    esi, esi
.text:00401C4B                 jz      short loc_401C96
.text:00401C4D                 lea     ebx, [edi+1]
.text:00401C50                 mov     [ebp+0Ch], ebx
.text:00401C53
.text:00401C53 loc_401C53:                             ; CODE XREF: sub_4019B0+3A8↓j
.text:00401C53                                         ; sub_4019B0+3C4↓j
.text:00401C53                 mov     ebx, [ebp+14h]
.text:00401C56                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401C59                 call    strlen
.text:00401C5E                 add     [ebp+14h], eax
.text:00401C61                 mov     esi, [esp+5Ch+arg_10]
.text:00401C65                 test    esi, esi
.text:00401C67                 jz      short loc_401C73
.text:00401C69                 mov     ebp, [esp+5Ch+var_24]
.text:00401C6D                 mov     ecx, [esp+5Ch+arg_10]
.text:00401C71                 mov     [ecx], ebp
.text:00401C73
.text:00401C73 loc_401C73:                             ; CODE XREF: sub_4019B0+2B7↑j
.text:00401C73                 mov     eax, [esp+5Ch+var_18]
.text:00401C77                 mov     ecx, [eax+8]
.text:00401C7A                 test    ecx, ecx
.text:00401C7C                 jnz     short loc_401C8A
.text:00401C7E                 mov     ecx, [esp+5Ch+var_18]
.text:00401C82
.text:00401C82 loc_401C82:                             ; CODE XREF: sub_4019B0+723↓j
.text:00401C82                 mov     eax, [ecx+0Ch]
.text:00401C85                 jmp     loc_401B07
.text:00401C8A ; ---------------------------------------------------------------------------
.text:00401C8A
.text:00401C8A loc_401C8A:                             ; CODE XREF: sub_4019B0+2CC↑j
.text:00401C8A                                         ; sub_4019B0+719↓j
.text:00401C8A                 mov     esi, [eax+0Ch]
.text:00401C8D                 xor     eax, eax
.text:00401C8F                 mov     [ecx], esi
.text:00401C91                 jmp     loc_401B07
.text:00401C96 ; ---------------------------------------------------------------------------
.text:00401C96
.text:00401C96 loc_401C96:                             ; CODE XREF: sub_4019B0+29B↑j
.text:00401C96                 mov     edi, [esp+5Ch+var_14]
.text:00401C9A                 test    edi, edi
.text:00401C9C                 jz      short loc_401CF0
.text:00401C9E                 mov     esi, [esp+5Ch+arg_4]
.text:00401CA2                 mov     edx, [esi+eax*4-4]
.text:00401CA6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401CAA                 jz      short loc_401D12
.text:00401CAC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401CB3                 call    ds:libintl_gettext
.text:00401CB9                 mov     edx, [esp+5Ch+var_18]
.text:00401CBD                 mov     edi, [edx]
.text:00401CBF                 mov     [esp+5Ch+var_4C], edi
.text:00401CC3                 mov     ebx, [ebp+0]
.text:00401CC6                 mov     edi, [esp+5Ch+arg_4]
.text:00401CCA                 mov     ecx, [edi+ebx*4-4]
.text:00401CCE                 movsx   esi, byte ptr [ecx]
.text:00401CD1                 mov     ecx, ds:_iob
.text:00401CD7                 add     ecx, 40h ; '@'
.text:00401CDA                 mov     [esp+5Ch+var_50], esi
.text:00401CDE                 mov     ebx, [edi]
.text:00401CE0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401CE4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401CE7                 mov     [esp+5Ch+MaxCount], ebx
.text:00401CEB                 call    fprintf
.text:00401CF0
.text:00401CF0 loc_401CF0:                             ; CODE XREF: sub_4019B0+2EC↑j
.text:00401CF0                                         ; sub_4019B0+398↓j
.text:00401CF0                 mov     ecx, [ebp+14h]
.text:00401CF3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401CF6                 call    strlen
.text:00401CFB                 add     [ebp+14h], eax
.text:00401CFE                 mov     eax, [esp+5Ch+var_18]
.text:00401D02                 mov     esi, [eax+0Ch]
.text:00401D05                 mov     [ebp+8], esi
.text:00401D08
.text:00401D08 loc_401D08:                             ; CODE XREF: sub_4019B0+4E5↓j
.text:00401D08                                         ; sub_4019B0+73E↓j ...
.text:00401D08                 mov     eax, 3Fh ; '?'
.text:00401D0D                 jmp     loc_401B07
.text:00401D12 ; ---------------------------------------------------------------------------
.text:00401D12
.text:00401D12 loc_401D12:                             ; CODE XREF: sub_4019B0+2FA↑j
.text:00401D12                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401D19                 call    ds:libintl_gettext
.text:00401D1F                 mov     edx, [esp+5Ch+var_18]
.text:00401D23                 mov     edi, [esp+5Ch+arg_4]
.text:00401D27                 mov     ecx, ds:_iob
.text:00401D2D                 mov     esi, [edx]
.text:00401D2F                 add     ecx, 40h ; '@'
.text:00401D32                 mov     [esp+5Ch+var_50], esi
.text:00401D36                 mov     ebx, [edi]
.text:00401D38                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401D3C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401D3F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401D43                 call    fprintf
.text:00401D48                 jmp     short loc_401CF0
.text:00401D48 ; ---------------------------------------------------------------------------
.text:00401D4A                 align 10h
.text:00401D50
.text:00401D50 loc_401D50:                             ; CODE XREF: sub_4019B0+28C↑j
.text:00401D50                 mov     ebx, [esp+5Ch+var_18]
.text:00401D54                 cmp     dword ptr [ebx+4], 1
.text:00401D58                 jnz     loc_401C53
.text:00401D5E                 cmp     eax, [esp+5Ch+arg_0]
.text:00401D62                 jge     short loc_401D79
.text:00401D64                 mov     ebx, [esp+5Ch+arg_4]
.text:00401D68                 lea     edi, [ecx+2]
.text:00401D6B                 mov     [ebp+0], edi
.text:00401D6E                 mov     esi, [ebx+eax*4]
.text:00401D71                 mov     [ebp+0Ch], esi
.text:00401D74                 jmp     loc_401C53
.text:00401D79 ; ---------------------------------------------------------------------------
.text:00401D79
.text:00401D79 loc_401D79:                             ; CODE XREF: sub_4019B0+3B2↑j
.text:00401D79                 mov     edx, [esp+5Ch+var_14]
.text:00401D7D                 test    edx, edx
.text:00401D7F                 jnz     short loc_401DB0
.text:00401D81
.text:00401D81 loc_401D81:                             ; CODE XREF: sub_4019B0+437↓j
.text:00401D81                 mov     edx, [ebp+14h]
.text:00401D84                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401D87                 call    strlen
.text:00401D8C                 add     [ebp+14h], eax
.text:00401D8F                 mov     eax, [esp+5Ch+var_18]
.text:00401D93                 mov     edi, [eax+0Ch]
.text:00401D96                 mov     [ebp+8], edi
.text:00401D99
.text:00401D99 loc_401D99:                             ; CODE XREF: sub_4019B0+7C2↓j
.text:00401D99                 mov     ebp, [esp+5Ch+Str]
.text:00401D9D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401DA1                 setnz   bl
.text:00401DA4                 movzx   esi, bl
.text:00401DA7                 lea     eax, [esi+esi*4+3Ah]
.text:00401DAB                 jmp     loc_401B07
.text:00401DB0 ; ---------------------------------------------------------------------------
.text:00401DB0
.text:00401DB0 loc_401DB0:                             ; CODE XREF: sub_4019B0+3CF↑j
.text:00401DB0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401DB7                 call    ds:libintl_gettext
.text:00401DBD                 mov     ecx, [ebp+0]
.text:00401DC0                 mov     esi, [esp+5Ch+arg_4]
.text:00401DC4                 mov     ebx, [esi+ecx*4-4]
.text:00401DC8                 mov     ecx, ds:_iob
.text:00401DCE                 mov     [esp+5Ch+var_50], ebx
.text:00401DD2                 mov     edi, [esi]
.text:00401DD4                 add     ecx, 40h ; '@'
.text:00401DD7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401DDB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401DDE                 mov     [esp+5Ch+MaxCount], edi
.text:00401DE2                 call    fprintf
.text:00401DE7                 jmp     short loc_401D81
.text:00401DE7 ; ---------------------------------------------------------------------------
.text:00401DE9                 align 10h
.text:00401DF0
.text:00401DF0 loc_401DF0:                             ; CODE XREF: sub_4019B0+21E↑j
.text:00401DF0                                         ; sub_4019B0+27A↑j
.text:00401DF0                 mov     eax, [esp+5Ch+arg_14]
.text:00401DF4                 test    eax, eax
.text:00401DF6                 jz      short loc_401E26
.text:00401DF8                 mov     ebx, [ebp+0]
.text:00401DFB                 mov     esi, [esp+5Ch+arg_4]
.text:00401DFF                 mov     edi, [esi+ebx*4]
.text:00401E02                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E06                 jz      short loc_401E29
.text:00401E08                 mov     ecx, [ebp+14h]
.text:00401E0B                 mov     edx, [esp+5Ch+Str]
.text:00401E0F                 movsx   ebx, byte ptr [ecx]
.text:00401E12                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401E15                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401E19                 call    strchr
.text:00401E1E                 test    eax, eax
.text:00401E20                 jnz     loc_401ED0
.text:00401E26
.text:00401E26 loc_401E26:                             ; CODE XREF: sub_4019B0+446↑j
.text:00401E26                 mov     ebx, [ebp+0]
.text:00401E29
.text:00401E29 loc_401E29:                             ; CODE XREF: sub_4019B0+456↑j
.text:00401E29                 mov     eax, [esp+5Ch+var_14]
.text:00401E2D                 test    eax, eax
.text:00401E2F                 jz      short loc_401E81
.text:00401E31                 mov     esi, [esp+5Ch+arg_4]
.text:00401E35                 mov     edi, [esi+ebx*4]
.text:00401E38                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401E3C                 jz      short loc_401E9A
.text:00401E3E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401E45                 call    ds:libintl_gettext
.text:00401E4B                 mov     edi, [ebp+14h]
.text:00401E4E                 mov     [esp+5Ch+var_4C], edi
.text:00401E52                 mov     ebx, [ebp+0]
.text:00401E55                 mov     edi, [esp+5Ch+arg_4]
.text:00401E59                 mov     esi, [edi+ebx*4]
.text:00401E5C                 movsx   ecx, byte ptr [esi]
.text:00401E5F                 mov     esi, ds:_iob
.text:00401E65                 add     esi, 40h ; '@'
.text:00401E68                 mov     [esp+5Ch+var_50], ecx
.text:00401E6C                 mov     ebx, [edi]
.text:00401E6E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E72                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401E75                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E79                 call    fprintf
.text:00401E7E
.text:00401E7E loc_401E7E:                             ; CODE XREF: sub_4019B0+51D↓j
.text:00401E7E                 mov     ebx, [ebp+0]
.text:00401E81
.text:00401E81 loc_401E81:                             ; CODE XREF: sub_4019B0+47F↑j
.text:00401E81                 mov     dword ptr [ebp+14h], offset dword_401860
.text:00401E88                 lea     edx, [ebx+1]
.text:00401E8B                 mov     [ebp+0], edx
.text:00401E8E
.text:00401E8E loc_401E8E:                             ; CODE XREF: sub_4019B0+999↓j
.text:00401E8E                 mov     dword ptr [ebp+8], 0
.text:00401E95                 jmp     loc_401D08
.text:00401E9A ; ---------------------------------------------------------------------------
.text:00401E9A
.text:00401E9A loc_401E9A:                             ; CODE XREF: sub_4019B0+48C↑j
.text:00401E9A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401EA1                 call    ds:libintl_gettext
.text:00401EA7                 mov     ecx, [ebp+14h]
.text:00401EAA                 mov     edi, [esp+5Ch+arg_4]
.text:00401EAE                 mov     edx, ds:_iob
.text:00401EB4                 mov     [esp+5Ch+var_50], ecx
.text:00401EB8                 mov     ebx, [edi]
.text:00401EBA                 add     edx, 40h ; '@'
.text:00401EBD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401EC1                 mov     [esp+5Ch+MaxCount], ebx
.text:00401EC5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401EC8                 call    fprintf
.text:00401ECD                 jmp     short loc_401E7E
.text:00401ECD ; ---------------------------------------------------------------------------
.text:00401ECF                 align 10h
.text:00401ED0
.text:00401ED0 loc_401ED0:                             ; CODE XREF: sub_4019B0+196↑j
.text:00401ED0                                         ; sub_4019B0+1B5↑j ...
.text:00401ED0                 mov     esi, [ebp+14h]
.text:00401ED3                 movzx   ebx, byte ptr [esi]
.text:00401ED6                 inc     esi
.text:00401ED7                 mov     [ebp+14h], esi
.text:00401EDA                 mov     ecx, [esp+5Ch+Str]
.text:00401EDE                 movsx   esi, bl
.text:00401EE1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00401EE5                 mov     edi, esi
.text:00401EE7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401EEA                 call    strchr
.text:00401EEF                 mov     ecx, [ebp+14h]
.text:00401EF2                 cmp     byte ptr [ecx], 0
.text:00401EF5                 jnz     short loc_401EFA
.text:00401EF7                 inc     dword ptr [ebp+0]
.text:00401EFA
.text:00401EFA loc_401EFA:                             ; CODE XREF: sub_4019B0+545↑j
.text:00401EFA                 test    eax, eax
.text:00401EFC                 jz      loc_4022E0
.text:00401F02                 cmp     bl, 3Ah ; ':'
.text:00401F05                 jz      loc_4022E0
.text:00401F0B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00401F0E                 jz      loc_401FC6
.text:00401F14                 movzx   edx, byte ptr [eax+1]
.text:00401F18
.text:00401F18 loc_401F18:                             ; CODE XREF: sub_4019B0+61D↓j
.text:00401F18                 cmp     dl, 3Ah ; ':'
.text:00401F1B                 jz      short loc_401F24
.text:00401F1D
.text:00401F1D loc_401F1D:                             ; CODE XREF: sub_4019B0+590↓j
.text:00401F1D                 mov     eax, esi
.text:00401F1F                 jmp     loc_401B07
.text:00401F24 ; ---------------------------------------------------------------------------
.text:00401F24
.text:00401F24 loc_401F24:                             ; CODE XREF: sub_4019B0+56B↑j
.text:00401F24                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00401F28                 jz      loc_401FB1
.text:00401F2E                 cmp     byte ptr [ecx], 0
.text:00401F31                 jz      short loc_401F42
.text:00401F33
.text:00401F33 loc_401F33:                             ; CODE XREF: sub_4019B0+604↓j
.text:00401F33                 inc     dword ptr [ebp+0]
.text:00401F36                 mov     [ebp+0Ch], ecx
.text:00401F39
.text:00401F39 loc_401F39:                             ; CODE XREF: sub_4019B0+5AB↓j
.text:00401F39                                         ; sub_4019B0+5C6↓j ...
.text:00401F39                 mov     dword ptr [ebp+14h], 0
.text:00401F40                 jmp     short loc_401F1D
.text:00401F42 ; ---------------------------------------------------------------------------
.text:00401F42
.text:00401F42 loc_401F42:                             ; CODE XREF: sub_4019B0+581↑j
.text:00401F42                 mov     ecx, [ebp+0]
.text:00401F45                 cmp     ecx, [esp+5Ch+arg_0]
.text:00401F49                 jz      short loc_401F5D
.text:00401F4B                 mov     eax, [esp+5Ch+arg_4]
.text:00401F4F                 lea     edx, [ecx+1]
.text:00401F52                 mov     [ebp+0], edx
.text:00401F55                 mov     ebx, [eax+ecx*4]
.text:00401F58                 mov     [ebp+0Ch], ebx
.text:00401F5B                 jmp     short loc_401F39
.text:00401F5D ; ---------------------------------------------------------------------------
.text:00401F5D
.text:00401F5D loc_401F5D:                             ; CODE XREF: sub_4019B0+599↑j
.text:00401F5D                 mov     ecx, [esp+5Ch+var_14]
.text:00401F61                 test    ecx, ecx
.text:00401F63                 jnz     short loc_401F7F
.text:00401F65
.text:00401F65 loc_401F65:                             ; CODE XREF: sub_4019B0+5FF↓j
.text:00401F65                 mov     [ebp+8], edi
.text:00401F68                 mov     edi, [esp+5Ch+Str]
.text:00401F6C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00401F6F                 jz      short loc_401F78
.text:00401F71                 mov     esi, 3Fh ; '?'
.text:00401F76                 jmp     short loc_401F39
.text:00401F78 ; ---------------------------------------------------------------------------
.text:00401F78
.text:00401F78 loc_401F78:                             ; CODE XREF: sub_4019B0+5BF↑j
.text:00401F78                 mov     esi, 3Ah ; ':'
.text:00401F7D                 jmp     short loc_401F39
.text:00401F7F ; ---------------------------------------------------------------------------
.text:00401F7F
.text:00401F7F loc_401F7F:                             ; CODE XREF: sub_4019B0+5B3↑j
.text:00401F7F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00401F86                 call    ds:libintl_gettext
.text:00401F8C                 mov     [esp+5Ch+var_50], edi
.text:00401F90                 mov     ebx, [esp+5Ch+arg_4]
.text:00401F94                 mov     edx, ds:_iob
.text:00401F9A                 mov     esi, [ebx]
.text:00401F9C                 add     edx, 40h ; '@'
.text:00401F9F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401FA3                 mov     [esp+5Ch+MaxCount], esi
.text:00401FA7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00401FAA                 call    fprintf
.text:00401FAF                 jmp     short loc_401F65
.text:00401FB1 ; ---------------------------------------------------------------------------
.text:00401FB1
.text:00401FB1 loc_401FB1:                             ; CODE XREF: sub_4019B0+578↑j
.text:00401FB1                 cmp     byte ptr [ecx], 0
.text:00401FB4                 jnz     loc_401F33
.text:00401FBA                 mov     dword ptr [ebp+0Ch], 0
.text:00401FC1                 jmp     loc_401F39
.text:00401FC6 ; ---------------------------------------------------------------------------
.text:00401FC6
.text:00401FC6 loc_401FC6:                             ; CODE XREF: sub_4019B0+55E↑j
.text:00401FC6                 movzx   edx, byte ptr [eax+1]
.text:00401FCA                 cmp     dl, 3Bh ; ';'
.text:00401FCD                 jnz     loc_401F18
.text:00401FD3                 mov     [esp+5Ch+var_2C], 0
.text:00401FDB                 mov     [esp+5Ch+var_30], 0
.text:00401FE3                 mov     [esp+5Ch+var_34], 0
.text:00401FEB                 mov     [esp+5Ch+var_38], 0
.text:00401FF3                 cmp     byte ptr [ecx], 0
.text:00401FF6                 jz      loc_40226B
.text:00401FFC                 inc     dword ptr [ebp+0]
.text:00401FFF                 mov     [ebp+0Ch], ecx
.text:00402002
.text:00402002 loc_402002:                             ; CODE XREF: sub_4019B0+8D4↓j
.text:00402002                 mov     edi, [ebp+0Ch]
.text:00402005                 mov     [ebp+14h], edi
.text:00402008                 movzx   eax, byte ptr [edi]
.text:0040200B                 test    al, al
.text:0040200D                 jz      short loc_40201F
.text:0040200F                 cmp     al, 3Dh ; '='
.text:00402011                 jz      short loc_40201F
.text:00402013
.text:00402013 loc_402013:                             ; CODE XREF: sub_4019B0+66D↓j
.text:00402013                 inc     edi
.text:00402014                 movzx   eax, byte ptr [edi]
.text:00402017                 test    al, al
.text:00402019                 jz      short loc_40201F
.text:0040201B                 cmp     al, 3Dh ; '='
.text:0040201D                 jnz     short loc_402013
.text:0040201F
.text:0040201F loc_40201F:                             ; CODE XREF: sub_4019B0+65D↑j
.text:0040201F                                         ; sub_4019B0+661↑j ...
.text:0040201F                 mov     [esp+5Ch+var_3C], 0
.text:00402027                 mov     esi, [esp+5Ch+arg_C]
.text:0040202B                 mov     eax, [esi]
.text:0040202D                 test    eax, eax
.text:0040202F                 jz      loc_4021B0
.text:00402035                 mov     ecx, eax
.text:00402037
.text:00402037 loc_402037:                             ; CODE XREF: sub_4019B0+6B3↓j
.text:00402037                 mov     ebx, [ebp+14h]
.text:0040203A                 mov     eax, edi
.text:0040203C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040203F                 sub     eax, ebx
.text:00402041                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402045                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402049                 call    strncmp
.text:0040204E                 test    eax, eax
.text:00402050                 jz      loc_402217
.text:00402056
.text:00402056 loc_402056:                             ; CODE XREF: sub_4019B0+88C↓j
.text:00402056                                         ; sub_4019B0+89D↓j
.text:00402056                 inc     [esp+5Ch+var_3C]
.text:0040205A                 add     esi, 10h
.text:0040205D                 mov     edx, [esi]
.text:0040205F                 test    edx, edx
.text:00402061                 mov     ecx, edx
.text:00402063                 jnz     short loc_402037
.text:00402065
.text:00402065 loc_402065:                             ; CODE XREF: sub_4019B0+8B6↓j
.text:00402065                 mov     esi, [esp+5Ch+var_34]
.text:00402069                 test    esi, esi
.text:0040206B                 jz      short loc_402079
.text:0040206D                 mov     ebx, [esp+5Ch+var_30]
.text:00402071                 test    ebx, ebx
.text:00402073                 jz      loc_4021C1
.text:00402079
.text:00402079 loc_402079:                             ; CODE XREF: sub_4019B0+6BB↑j
.text:00402079                 mov     esi, [esp+5Ch+var_2C]
.text:0040207D                 test    esi, esi
.text:0040207F                 jz      loc_4021B0
.text:00402085                 cmp     byte ptr [edi], 0
.text:00402088                 jz      loc_402130
.text:0040208E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402092                 mov     ebx, [ecx+4]
.text:00402095                 test    ebx, ebx
.text:00402097                 jz      short loc_4020D8
.text:00402099                 lea     edx, [edi+1]
.text:0040209C                 mov     [ebp+0Ch], edx
.text:0040209F
.text:0040209F loc_40209F:                             ; CODE XREF: sub_4019B0+788↓j
.text:0040209F                                         ; sub_4019B0+7A7↓j
.text:0040209F                 mov     edi, [ebp+14h]
.text:004020A2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004020A5                 call    strlen
.text:004020AA                 add     [ebp+14h], eax
.text:004020AD                 mov     eax, [esp+5Ch+arg_10]
.text:004020B1                 test    eax, eax
.text:004020B3                 jz      short loc_4020C0
.text:004020B5                 mov     edx, [esp+5Ch+var_38]
.text:004020B9                 mov     ebp, [esp+5Ch+arg_10]
.text:004020BD                 mov     [ebp+0], edx
.text:004020C0
.text:004020C0 loc_4020C0:                             ; CODE XREF: sub_4019B0+703↑j
.text:004020C0                 mov     eax, [esp+5Ch+var_2C]
.text:004020C4                 mov     ecx, [eax+8]
.text:004020C7                 test    ecx, ecx
.text:004020C9                 jnz     loc_401C8A
.text:004020CF                 mov     ecx, [esp+5Ch+var_2C]
.text:004020D3                 jmp     loc_401C82
.text:004020D8 ; ---------------------------------------------------------------------------
.text:004020D8
.text:004020D8 loc_4020D8:                             ; CODE XREF: sub_4019B0+6E7↑j
.text:004020D8                 mov     eax, [esp+5Ch+var_14]
.text:004020DC                 test    eax, eax
.text:004020DE                 jnz     short loc_4020F3
.text:004020E0
.text:004020E0 loc_4020E0:                             ; CODE XREF: sub_4019B0+779↓j
.text:004020E0                 mov     ecx, [ebp+14h]
.text:004020E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004020E6                 call    strlen
.text:004020EB                 add     [ebp+14h], eax
.text:004020EE                 jmp     loc_401D08
.text:004020F3 ; ---------------------------------------------------------------------------
.text:004020F3
.text:004020F3 loc_4020F3:                             ; CODE XREF: sub_4019B0+72E↑j
.text:004020F3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004020FA                 call    ds:libintl_gettext
.text:00402100                 mov     edx, [esp+5Ch+var_2C]
.text:00402104                 mov     ebx, [esp+5Ch+arg_4]
.text:00402108                 mov     edi, [edx]
.text:0040210A                 mov     [esp+5Ch+var_50], edi
.text:0040210E                 mov     edi, ds:_iob
.text:00402114                 mov     esi, [ebx]
.text:00402116                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040211A                 add     edi, 40h ; '@'
.text:0040211D                 mov     [esp+5Ch+MaxCount], esi
.text:00402121                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402124                 call    fprintf
.text:00402129                 jmp     short loc_4020E0
.text:00402129 ; ---------------------------------------------------------------------------
.text:0040212B                 align 10h
.text:00402130
.text:00402130 loc_402130:                             ; CODE XREF: sub_4019B0+6D8↑j
.text:00402130                 mov     esi, [esp+5Ch+var_2C]
.text:00402134                 cmp     dword ptr [esi+4], 1
.text:00402138                 jnz     loc_40209F
.text:0040213E                 mov     ecx, [ebp+0]
.text:00402141                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402145                 jge     short loc_40215C
.text:00402147                 mov     eax, [esp+5Ch+arg_4]
.text:0040214B                 lea     ebx, [ecx+1]
.text:0040214E                 mov     [ebp+0], ebx
.text:00402151                 mov     edi, [eax+ecx*4]
.text:00402154                 mov     [ebp+0Ch], edi
.text:00402157                 jmp     loc_40209F
.text:0040215C ; ---------------------------------------------------------------------------
.text:0040215C
.text:0040215C loc_40215C:                             ; CODE XREF: sub_4019B0+795↑j
.text:0040215C                 mov     edx, [esp+5Ch+var_14]
.text:00402160                 test    edx, edx
.text:00402162                 jnz     short loc_402177
.text:00402164
.text:00402164 loc_402164:                             ; CODE XREF: sub_4019B0+7FE↓j
.text:00402164                 mov     edx, [ebp+14h]
.text:00402167                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040216A                 call    strlen
.text:0040216F                 add     [ebp+14h], eax
.text:00402172                 jmp     loc_401D99
.text:00402177 ; ---------------------------------------------------------------------------
.text:00402177
.text:00402177 loc_402177:                             ; CODE XREF: sub_4019B0+7B2↑j
.text:00402177                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040217E                 call    ds:libintl_gettext
.text:00402184                 mov     ecx, [ebp+0]
.text:00402187                 mov     ebx, [esp+5Ch+arg_4]
.text:0040218B                 mov     edi, [ebx+ecx*4-4]
.text:0040218F                 mov     ecx, ds:_iob
.text:00402195                 mov     [esp+5Ch+var_50], edi
.text:00402199                 mov     esi, [ebx]
.text:0040219B                 add     ecx, 40h ; '@'
.text:0040219E                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021A2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004021A5                 mov     [esp+5Ch+MaxCount], esi
.text:004021A9                 call    fprintf
.text:004021AE                 jmp     short loc_402164
.text:004021B0 ; ---------------------------------------------------------------------------
.text:004021B0
.text:004021B0 loc_4021B0:                             ; CODE XREF: sub_4019B0+67F↑j
.text:004021B0                                         ; sub_4019B0+6CF↑j
.text:004021B0                 mov     dword ptr [ebp+14h], 0
.text:004021B7                 mov     eax, 57h ; 'W'
.text:004021BC                 jmp     loc_401B07
.text:004021C1 ; ---------------------------------------------------------------------------
.text:004021C1
.text:004021C1 loc_4021C1:                             ; CODE XREF: sub_4019B0+6C3↑j
.text:004021C1                 mov     edi, [esp+5Ch+var_14]
.text:004021C5                 test    edi, edi
.text:004021C7                 jnz     short loc_4021DF
.text:004021C9
.text:004021C9 loc_4021C9:                             ; CODE XREF: sub_4019B0+865↓j
.text:004021C9                 mov     edx, [ebp+14h]
.text:004021CC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021CF                 call    strlen
.text:004021D4                 add     [ebp+14h], eax
.text:004021D7                 inc     dword ptr [ebp+0]
.text:004021DA                 jmp     loc_401D08
.text:004021DF ; ---------------------------------------------------------------------------
.text:004021DF
.text:004021DF loc_4021DF:                             ; CODE XREF: sub_4019B0+817↑j
.text:004021DF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004021E6                 call    ds:libintl_gettext
.text:004021EC                 mov     ecx, [ebp+0]
.text:004021EF                 mov     ebx, [esp+5Ch+arg_4]
.text:004021F3                 mov     edi, [ebx+ecx*4]
.text:004021F6                 mov     ecx, ds:_iob
.text:004021FC                 mov     [esp+5Ch+var_50], edi
.text:00402200                 mov     esi, [ebx]
.text:00402202                 add     ecx, 40h ; '@'
.text:00402205                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402209                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040220C                 mov     [esp+5Ch+MaxCount], esi
.text:00402210                 call    fprintf
.text:00402215                 jmp     short loc_4021C9
.text:00402217 ; ---------------------------------------------------------------------------
.text:00402217
.text:00402217 loc_402217:                             ; CODE XREF: sub_4019B0+6A0↑j
.text:00402217                 mov     edx, [ebp+14h]
.text:0040221A                 mov     ebx, edi
.text:0040221C                 mov     ecx, [esi]
.text:0040221E                 sub     ebx, edx
.text:00402220                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402223                 call    strlen
.text:00402228                 cmp     ebx, eax
.text:0040222A                 jz      short loc_402252
.text:0040222C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402230                 test    ebx, ebx
.text:00402232                 jz      short loc_402241
.text:00402234                 mov     [esp+5Ch+var_34], 1
.text:0040223C                 jmp     loc_402056
.text:00402241 ; ---------------------------------------------------------------------------
.text:00402241
.text:00402241 loc_402241:                             ; CODE XREF: sub_4019B0+882↑j
.text:00402241                 mov     [esp+5Ch+var_2C], esi
.text:00402245                 mov     ecx, [esp+5Ch+var_3C]
.text:00402249                 mov     [esp+5Ch+var_38], ecx
.text:0040224D                 jmp     loc_402056
.text:00402252 ; ---------------------------------------------------------------------------
.text:00402252
.text:00402252 loc_402252:                             ; CODE XREF: sub_4019B0+87A↑j
.text:00402252                 mov     [esp+5Ch+var_2C], esi
.text:00402256                 mov     eax, [esp+5Ch+var_3C]
.text:0040225A                 mov     [esp+5Ch+var_30], 1
.text:00402262                 mov     [esp+5Ch+var_38], eax
.text:00402266                 jmp     loc_402065
.text:0040226B ; ---------------------------------------------------------------------------
.text:0040226B
.text:0040226B loc_40226B:                             ; CODE XREF: sub_4019B0+646↑j
.text:0040226B                 mov     edx, [ebp+0]
.text:0040226E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402272                 jz      short loc_402289
.text:00402274                 mov     ebx, [esp+5Ch+arg_4]
.text:00402278                 lea     esi, [edx+1]
.text:0040227B                 mov     [ebp+0], esi
.text:0040227E                 mov     edi, [ebx+edx*4]
.text:00402281                 mov     [ebp+0Ch], edi
.text:00402284                 jmp     loc_402002
.text:00402289 ; ---------------------------------------------------------------------------
.text:00402289
.text:00402289 loc_402289:                             ; CODE XREF: sub_4019B0+8C2↑j
.text:00402289                 mov     edi, [esp+5Ch+var_14]
.text:0040228D                 test    edi, edi
.text:0040228F                 jnz     short loc_4022AC
.text:00402291
.text:00402291 loc_402291:                             ; CODE XREF: sub_4019B0+92C↓j
.text:00402291                 mov     [ebp+8], esi
.text:00402294                 mov     ebp, [esp+5Ch+Str]
.text:00402298                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040229C                 jz      short loc_4022A8
.text:0040229E                 mov     bl, 3Fh ; '?'
.text:004022A0
.text:004022A0 loc_4022A0:                             ; CODE XREF: sub_4019B0+8FA↓j
.text:004022A0                 movsx   eax, bl
.text:004022A3                 jmp     loc_401B07
.text:004022A8 ; ---------------------------------------------------------------------------
.text:004022A8
.text:004022A8 loc_4022A8:                             ; CODE XREF: sub_4019B0+8EC↑j
.text:004022A8                 mov     bl, 3Ah ; ':'
.text:004022AA                 jmp     short loc_4022A0
.text:004022AC ; ---------------------------------------------------------------------------
.text:004022AC
.text:004022AC loc_4022AC:                             ; CODE XREF: sub_4019B0+8DF↑j
.text:004022AC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004022B3                 call    ds:libintl_gettext
.text:004022B9                 mov     [esp+5Ch+var_50], esi
.text:004022BD                 mov     edx, [esp+5Ch+arg_4]
.text:004022C1                 mov     ecx, ds:_iob
.text:004022C7                 mov     ebx, [edx]
.text:004022C9                 add     ecx, 40h ; '@'
.text:004022CC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022D0                 mov     [esp+5Ch+MaxCount], ebx
.text:004022D4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022D7                 call    fprintf
.text:004022DC                 jmp     short loc_402291
.text:004022DC ; ---------------------------------------------------------------------------
.text:004022DE                 align 10h
.text:004022E0
.text:004022E0 loc_4022E0:                             ; CODE XREF: sub_4019B0+54C↑j
.text:004022E0                                         ; sub_4019B0+555↑j
.text:004022E0                 mov     eax, [esp+5Ch+var_14]
.text:004022E4                 test    eax, eax
.text:004022E6                 jz      short loc_40231F
.text:004022E8                 mov     ebx, [ebp+1Ch]
.text:004022EB                 test    ebx, ebx
.text:004022ED                 jz      short loc_402327
.text:004022EF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004022F6
.text:004022F6 loc_4022F6:                             ; CODE XREF: sub_4019B0+97E↓j
.text:004022F6                 call    ds:libintl_gettext
.text:004022FC                 mov     [esp+5Ch+var_50], esi
.text:00402300                 mov     ebx, [esp+5Ch+arg_4]
.text:00402304                 mov     edx, ds:_iob
.text:0040230A                 mov     esi, [ebx]
.text:0040230C                 add     edx, 40h ; '@'
.text:0040230F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402313                 mov     [esp+5Ch+MaxCount], esi
.text:00402317                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040231A                 call    fprintf
.text:0040231F
.text:0040231F loc_40231F:                             ; CODE XREF: sub_4019B0+936↑j
.text:0040231F                 mov     [ebp+8], edi
.text:00402322                 jmp     loc_401D08
.text:00402327 ; ---------------------------------------------------------------------------
.text:00402327
.text:00402327 loc_402327:                             ; CODE XREF: sub_4019B0+93D↑j
.text:00402327                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040232E                 jmp     short loc_4022F6
.text:00402330 ; ---------------------------------------------------------------------------
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_4019B0+26E↑j
.text:00402330                 mov     edi, [esp+5Ch+var_14]
.text:00402334                 test    edi, edi
.text:00402336                 jnz     short loc_40234E
.text:00402338
.text:00402338 loc_402338:                             ; CODE XREF: sub_4019B0+9D4↓j
.text:00402338                 mov     edx, [ebp+14h]
.text:0040233B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040233E                 call    strlen
.text:00402343                 add     [ebp+14h], eax
.text:00402346                 inc     dword ptr [ebp+0]
.text:00402349                 jmp     loc_401E8E
.text:0040234E ; ---------------------------------------------------------------------------
.text:0040234E
.text:0040234E loc_40234E:                             ; CODE XREF: sub_4019B0+986↑j
.text:0040234E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402355                 call    ds:libintl_gettext
.text:0040235B                 mov     ebx, [ebp+0]
.text:0040235E                 mov     edi, [esp+5Ch+arg_4]
.text:00402362                 mov     ecx, [edi+ebx*4]
.text:00402365                 mov     ebx, ds:_iob
.text:0040236B                 mov     [esp+5Ch+var_50], ecx
.text:0040236F                 mov     esi, [edi]
.text:00402371                 add     ebx, 40h ; '@'
.text:00402374                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402378                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040237B                 mov     [esp+5Ch+MaxCount], esi
.text:0040237F                 call    fprintf
.text:00402384                 jmp     short loc_402338
.text:00402386 ; ---------------------------------------------------------------------------
.text:00402386
.text:00402386 loc_402386:                             ; CODE XREF: sub_4019B0+246↑j
.text:00402386                 mov     ecx, [ebp+14h]
.text:00402389                 mov     ebx, edi
.text:0040238B                 mov     edx, [esi]
.text:0040238D                 sub     ebx, ecx
.text:0040238F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402392                 call    strlen
.text:00402397                 cmp     ebx, eax
.text:00402399                 jz      short loc_4023F1
.text:0040239B                 mov     ebx, [esp+5Ch+var_18]
.text:0040239F                 test    ebx, ebx
.text:004023A1                 jz      short loc_4023E0
.text:004023A3                 mov     edx, [esp+5Ch+arg_14]
.text:004023A7                 test    edx, edx
.text:004023A9                 jnz     short loc_4023B7
.text:004023AB                 mov     ecx, [esp+5Ch+var_18]
.text:004023AF                 mov     ebx, [esi+4]
.text:004023B2                 cmp     [ecx+4], ebx
.text:004023B5                 jz      short loc_4023C4
.text:004023B7
.text:004023B7 loc_4023B7:                             ; CODE XREF: sub_4019B0+9F9↑j
.text:004023B7                                         ; sub_4019B0+A1A↓j ...
.text:004023B7                 mov     [esp+5Ch+var_20], 1
.text:004023BF                 jmp     loc_401BFC
.text:004023C4 ; ---------------------------------------------------------------------------
.text:004023C4
.text:004023C4 loc_4023C4:                             ; CODE XREF: sub_4019B0+A05↑j
.text:004023C4                 mov     edx, [esi+8]
.text:004023C7                 cmp     [ecx+8], edx
.text:004023CA                 jnz     short loc_4023B7
.text:004023CC                 mov     ebx, [esi+0Ch]
.text:004023CF                 cmp     [ecx+0Ch], ebx
.text:004023D2                 jnz     short loc_4023B7
.text:004023D4                 jmp     loc_401BFC
.text:004023D4 ; ---------------------------------------------------------------------------
.text:004023D9                 align 10h
.text:004023E0
.text:004023E0 loc_4023E0:                             ; CODE XREF: sub_4019B0+9F1↑j
.text:004023E0                 mov     [esp+5Ch+var_18], esi
.text:004023E4                 mov     eax, [esp+5Ch+var_28]
.text:004023E8                 mov     [esp+5Ch+var_24], eax
.text:004023EC                 jmp     loc_401BFC
.text:004023F1 ; ---------------------------------------------------------------------------
.text:004023F1
.text:004023F1 loc_4023F1:                             ; CODE XREF: sub_4019B0+9E9↑j
.text:004023F1                 mov     [esp+5Ch+var_18], esi
.text:004023F5                 mov     ecx, [esp+5Ch+var_28]
.text:004023F9                 mov     [esp+5Ch+var_1C], 1
.text:00402401                 mov     [esp+5Ch+var_24], ecx
.text:00402405                 jmp     loc_401C10
.text:0040240A ; ---------------------------------------------------------------------------
.text:0040240A
.text:0040240A loc_40240A:                             ; CODE XREF: sub_4019B0+1BF↑j
.text:0040240A                 mov     eax, [esp+5Ch+Str]
.text:0040240E                 movsx   esi, dl
.text:00402411                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402415                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402418                 call    strchr
.text:0040241D                 test    eax, eax
.text:0040241F                 jnz     loc_401ED0
.text:00402425                 jmp     loc_401B75
.text:0040242A ; ---------------------------------------------------------------------------
.text:0040242A
.text:0040242A loc_40242A:                             ; CODE XREF: sub_4019B0+17C↑j
.text:0040242A                 mov     ecx, 1
.text:0040242F                 jmp     loc_401B32
.text:00402434 ; ---------------------------------------------------------------------------
.text:00402434
.text:00402434 loc_402434:                             ; CODE XREF: sub_4019B0+D4↑j
.text:00402434                                         ; sub_4019B0+130↑j
.text:00402434                 mov     eax, [ebp+20h]
.text:00402437                 cmp     eax, [ebp+24h]
.text:0040243A                 jz      loc_401B10
.text:00402440                 mov     [ebp+0], eax
.text:00402443                 jmp     loc_401B10
.text:00402448 ; ---------------------------------------------------------------------------
.text:00402448
.text:00402448 loc_402448:                             ; CODE XREF: sub_4019B0+FE↑j
.text:00402448                 mov     [ebp+20h], eax
.text:0040244B                 jmp     loc_401AD0
.text:00402450 ; ---------------------------------------------------------------------------
.text:00402450
.text:00402450 loc_402450:                             ; CODE XREF: sub_4019B0+CA↑j
.text:00402450                 mov     edx, [ebp+20h]
.text:00402453                 mov     eax, [ebp+24h]
.text:00402456                 cmp     edx, eax
.text:00402458                 jz      short loc_4024D0
.text:0040245A                 cmp     eax, ebx
.text:0040245C                 jz      short loc_402471
.text:0040245E                 mov     [esp+5Ch+Str2], ebp
.text:00402462                 mov     ebx, [esp+5Ch+arg_4]
.text:00402466                 mov     [esp+5Ch+Str1], ebx
.text:00402469                 call    sub_402660
.text:0040246E                 mov     ebx, [ebp+0]
.text:00402471
.text:00402471 loc_402471:                             ; CODE XREF: sub_4019B0+AAC↑j
.text:00402471                                         ; sub_4019B0+B22↓j ...
.text:00402471                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402475                 jge     short loc_4024C0
.text:00402477                 mov     esi, [esp+5Ch+arg_4]
.text:0040247B                 mov     eax, [esi+ebx*4]
.text:0040247E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402481                 jz      short loc_4024C8
.text:00402483                 lea     esi, [esi+0]
.text:00402489                 lea     edi, [edi+0]
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_4019B0+AFC↓j
.text:00402490                                         ; sub_4019B0+B1C↓j
.text:00402490                 lea     eax, [ebx+1]
.text:00402493                 mov     ebx, eax
.text:00402495                 mov     [ebp+0], eax
.text:00402498                 cmp     eax, [esp+5Ch+arg_0]
.text:0040249C                 jge     short loc_4024C0
.text:0040249E                 mov     edi, [esp+5Ch+arg_4]
.text:004024A2                 mov     edx, [edi+eax*4]
.text:004024A5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004024A8                 jz      short loc_4024B0
.text:004024AA
.text:004024AA loc_4024AA:                             ; CODE XREF: sub_4019B0+B04↓j
.text:004024AA                 mov     ebx, eax
.text:004024AC                 jmp     short loc_402490
.text:004024AC ; ---------------------------------------------------------------------------
.text:004024AE                 align 10h
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_4019B0+AF8↑j
.text:004024B0                 cmp     byte ptr [edx+1], 0
.text:004024B4                 jz      short loc_4024AA
.text:004024B6                 lea     esi, [esi+0]
.text:004024B9                 lea     edi, [edi+0]
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_4019B0+AC5↑j
.text:004024C0                                         ; sub_4019B0+AEC↑j ...
.text:004024C0                 mov     [ebp+24h], ebx
.text:004024C3                 jmp     loc_401A80
.text:004024C8 ; ---------------------------------------------------------------------------
.text:004024C8
.text:004024C8 loc_4024C8:                             ; CODE XREF: sub_4019B0+AD1↑j
.text:004024C8                 cmp     byte ptr [eax+1], 0
.text:004024CC                 jz      short loc_402490
.text:004024CE                 jmp     short loc_4024C0
.text:004024D0 ; ---------------------------------------------------------------------------
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_4019B0+AA8↑j
.text:004024D0                 cmp     edx, ebx
.text:004024D2                 jz      short loc_402471
.text:004024D4                 mov     [ebp+20h], ebx
.text:004024D7                 jmp     short loc_402471
.text:004024D9 ; ---------------------------------------------------------------------------
.text:004024D9
.text:004024D9 loc_4024D9:                             ; CODE XREF: sub_4019B0+88↑j
.text:004024D9                 mov     dword ptr [ebp+18h], 0
.text:004024E0                 mov     esi, [esp+5Ch+Str]
.text:004024E4
.text:004024E4 loc_4024E4:                             ; CODE XREF: sub_4019B0+B49↓j
.text:004024E4                 inc     esi
.text:004024E5                 jmp     loc_401A48
.text:004024E5 ; ---------------------------------------------------------------------------
.text:004024EA                 align 10h
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_4019B0+80↑j
.text:004024F0                 mov     dword ptr [ebp+18h], 2
.text:004024F7                 mov     esi, ecx
.text:004024F9                 jmp     short loc_4024E4
.text:004024F9 ; ---------------------------------------------------------------------------
.text:004024FB                 align 10h
.text:00402500
.text:00402500 loc_402500:                             ; CODE XREF: sub_4019B0+69↑j
.text:00402500                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402507                 call    getenv
.text:0040250C                 test    eax, eax
.text:0040250E                 jz      loc_401A24
.text:00402514                 jmp     loc_401A1F
.text:00402514 ; ---------------------------------------------------------------------------
.text:00402519                 align 10h
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_4019B0+3F↑j
.text:00402520                 mov     dword ptr [ebp+0], 1
.text:00402527                 mov     ebx, 1
.text:0040252C                 jmp     loc_401A00
.text:0040252C sub_4019B0      endp
.text:0040252C
.text:00402531 ; ---------------------------------------------------------------------------
.text:00402531                 jmp     short sub_402540
.text:00402531 ; ---------------------------------------------------------------------------
.text:00402533                 align 10h
.text:00402540
.text:00402540 ; =============== S U B R O U T I N E =======================================
.text:00402540
.text:00402540
.text:00402540 ; int __cdecl sub_402540(int, int, char *, int, int, int, int)
.text:00402540 sub_402540      proc near               ; CODE XREF: .text:00402531↑j
.text:00402540                                         ; sub_402780+3A↓p ...
.text:00402540
.text:00402540 var_2C          = dword ptr -2Ch
.text:00402540 var_28          = dword ptr -28h
.text:00402540 Str             = dword ptr -24h
.text:00402540 var_20          = dword ptr -20h
.text:00402540 var_1C          = dword ptr -1Ch
.text:00402540 var_18          = dword ptr -18h
.text:00402540 var_14          = dword ptr -14h
.text:00402540 var_10          = dword ptr -10h
.text:00402540 arg_0           = dword ptr  4
.text:00402540 arg_4           = dword ptr  8
.text:00402540 arg_8           = dword ptr  0Ch
.text:00402540 arg_C           = dword ptr  10h
.text:00402540 arg_10          = dword ptr  14h
.text:00402540 arg_14          = dword ptr  18h
.text:00402540 arg_18          = dword ptr  1Ch
.text:00402540
.text:00402540                 sub     esp, 2Ch
.text:00402543                 mov     edx, dword_405020
.text:00402549                 mov     [esp+2Ch+var_10], offset dword_406000 ; int
.text:00402551                 mov     ecx, dword_405024
.text:00402557                 mov     ds:dword_406000, edx
.text:0040255D                 mov     edx, [esp+2Ch+arg_18]
.text:00402561                 mov     ds:dword_406004, ecx
.text:00402567                 mov     ecx, [esp+2Ch+arg_14]
.text:0040256B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040256F                 mov     edx, [esp+2Ch+arg_10]
.text:00402573                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402577                 mov     ecx, [esp+2Ch+arg_C]
.text:0040257B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040257F                 mov     edx, [esp+2Ch+arg_8]
.text:00402583                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402587                 mov     ecx, [esp+2Ch+arg_4]
.text:0040258B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040258F                 mov     edx, [esp+2Ch+arg_0]
.text:00402593                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402597                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040259A                 call    sub_4019B0
.text:0040259F                 mov     ecx, ds:dword_406000
.text:004025A5                 mov     dword_405020, ecx
.text:004025AB                 mov     ecx, ds:dword_40600C
.text:004025B1                 mov     ds:dword_4061B0, ecx
.text:004025B7                 mov     ecx, ds:dword_406008
.text:004025BD                 mov     dword_405028, ecx
.text:004025C3                 add     esp, 2Ch
.text:004025C6                 retn
.text:004025C6 sub_402540      endp
.text:004025C6
.text:004025C6 ; ---------------------------------------------------------------------------
.text:004025C7                 align 10h
.text:004025D0                 sub     esp, 2Ch
.text:004025D3                 mov     edx, dword_405020
.text:004025D9                 mov     dword ptr [esp+1Ch], offset dword_406000
.text:004025E1                 mov     ecx, dword_405024
.text:004025E7                 mov     dword ptr [esp+18h], 1
.text:004025EF                 mov     ds:dword_406000, edx
.text:004025F5                 mov     edx, [esp+38h]
.text:004025F9                 mov     ds:dword_406004, ecx
.text:004025FF                 mov     ecx, [esp+34h]
.text:00402603                 mov     [esp+8], edx
.text:00402607                 mov     edx, [esp+30h]
.text:0040260B                 mov     [esp+4], ecx
.text:0040260F                 mov     dword ptr [esp+14h], 0
.text:00402617                 mov     dword ptr [esp+10h], 0
.text:0040261F                 mov     dword ptr [esp+0Ch], 0
.text:00402627                 mov     [esp], edx
.text:0040262A                 call    sub_4019B0
.text:0040262F                 mov     ecx, ds:dword_406000
.text:00402635                 mov     dword_405020, ecx
.text:0040263B                 mov     ecx, ds:dword_40600C
.text:00402641                 mov     ds:dword_4061B0, ecx
.text:00402647                 mov     ecx, ds:dword_406008
.text:0040264D                 mov     dword_405028, ecx
.text:00402653                 add     esp, 2Ch
.text:00402656                 retn
.text:00402656 ; ---------------------------------------------------------------------------
.text:00402657                 align 10h
.text:00402660
.text:00402660 ; =============== S U B R O U T I N E =======================================
.text:00402660
.text:00402660
.text:00402660 sub_402660      proc near               ; CODE XREF: sub_4019B0+113↑p
.text:00402660                                         ; sub_4019B0+AB9↑p
.text:00402660
.text:00402660 var_2C          = dword ptr -2Ch
.text:00402660 var_28          = dword ptr -28h
.text:00402660 var_24          = dword ptr -24h
.text:00402660 var_20          = dword ptr -20h
.text:00402660 var_1C          = dword ptr -1Ch
.text:00402660 var_18          = dword ptr -18h
.text:00402660 var_14          = dword ptr -14h
.text:00402660 arg_0           = dword ptr  4
.text:00402660 arg_4           = dword ptr  8
.text:00402660
.text:00402660                 push    ebp
.text:00402661                 push    edi
.text:00402662                 push    esi
.text:00402663                 push    ebx
.text:00402664                 sub     esp, 1Ch
.text:00402667                 mov     ecx, [esp+2Ch+arg_4]
.text:0040266B                 mov     eax, [esp+2Ch+arg_4]
.text:0040266F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402673                 mov     edx, [ecx+20h]
.text:00402676                 mov     edi, [esp+2Ch+arg_0]
.text:0040267A                 mov     ecx, [ebx]
.text:0040267C                 mov     [esp+2Ch+var_2C], edx
.text:0040267F                 mov     [esp+2Ch+var_14], edx
.text:00402683                 mov     edx, [eax+24h]
.text:00402686                 mov     [esp+2Ch+var_28], ecx
.text:0040268A                 mov     [esp+2Ch+var_1C], ecx
.text:0040268E                 cmp     ecx, edx
.text:00402690                 mov     [esp+2Ch+var_18], edx
.text:00402694                 jle     short loc_402710
.text:00402696                 mov     esi, [esp+2Ch+var_2C]
.text:00402699                 cmp     edx, esi
.text:0040269B                 jle     short loc_402710
.text:0040269D                 lea     esi, [esi+0]
.text:004026A0
.text:004026A0 loc_4026A0:                             ; CODE XREF: sub_402660+A1↓j
.text:004026A0                 mov     ebx, [esp+2Ch+var_1C]
.text:004026A4                 mov     edx, [esp+2Ch+var_18]
.text:004026A8                 mov     ebp, [esp+2Ch+var_18]
.text:004026AC                 mov     eax, [esp+2Ch+var_14]
.text:004026B0                 sub     ebx, edx
.text:004026B2                 mov     [esp+2Ch+var_20], ebx
.text:004026B6                 sub     ebp, eax
.text:004026B8                 cmp     ebx, ebp
.text:004026BA                 jle     short loc_402735
.text:004026BC                 xor     esi, esi
.text:004026BE                 cmp     esi, ebp
.text:004026C0                 jge     short loc_4026ED
.text:004026C2                 mov     ecx, [esp+2Ch+var_1C]
.text:004026C6                 sub     ecx, ebp
.text:004026C8                 mov     [esp+2Ch+var_24], ecx
.text:004026CC                 lea     esi, [esi+0]
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_402660+8B↓j
.text:004026D0                 mov     ecx, [esp+2Ch+var_14]
.text:004026D4                 mov     edx, [esp+2Ch+var_24]
.text:004026D8                 add     ecx, esi
.text:004026DA                 add     edx, esi
.text:004026DC                 mov     ebx, [edi+ecx*4]
.text:004026DF                 mov     eax, [edi+edx*4]
.text:004026E2                 inc     esi
.text:004026E3                 cmp     esi, ebp
.text:004026E5                 mov     [edi+ecx*4], eax
.text:004026E8                 mov     [edi+edx*4], ebx
.text:004026EB                 jl      short loc_4026D0
.text:004026ED
.text:004026ED loc_4026ED:                             ; CODE XREF: sub_402660+60↑j
.text:004026ED                 sub     [esp+2Ch+var_1C], ebp
.text:004026F1
.text:004026F1 loc_4026F1:                             ; CODE XREF: sub_402660+107↓j
.text:004026F1                 mov     eax, [esp+2Ch+var_18]
.text:004026F5                 cmp     [esp+2Ch+var_1C], eax
.text:004026F9                 jle     short loc_402710
.text:004026FB                 mov     ebp, [esp+2Ch+var_14]
.text:004026FF                 cmp     eax, ebp
.text:00402701                 jg      short loc_4026A0
.text:00402703                 lea     esi, [esi+0]
.text:00402709                 lea     edi, [edi+0]
.text:00402710
.text:00402710 loc_402710:                             ; CODE XREF: sub_402660+34↑j
.text:00402710                                         ; sub_402660+3B↑j ...
.text:00402710                 mov     esi, [esp+2Ch+var_28]
.text:00402714                 mov     ecx, [esp+2Ch+var_18]
.text:00402718                 mov     eax, [esp+2Ch+var_2C]
.text:0040271B                 mov     edi, [esp+2Ch+arg_4]
.text:0040271F                 mov     edx, [esp+2Ch+var_28]
.text:00402723                 sub     esi, ecx
.text:00402725                 add     esi, eax
.text:00402727                 mov     [edi+20h], esi
.text:0040272A                 mov     [edi+24h], edx
.text:0040272D                 add     esp, 1Ch
.text:00402730                 pop     ebx
.text:00402731                 pop     esi
.text:00402732                 pop     edi
.text:00402733                 pop     ebp
.text:00402734                 retn
.text:00402735 ; ---------------------------------------------------------------------------
.text:00402735
.text:00402735 loc_402735:                             ; CODE XREF: sub_402660+5A↑j
.text:00402735                 xor     esi, esi
.text:00402737                 cmp     esi, [esp+2Ch+var_20]
.text:0040273B                 jge     short loc_40275F
.text:0040273D                 lea     esi, [esi+0]
.text:00402740
.text:00402740 loc_402740:                             ; CODE XREF: sub_402660+FD↓j
.text:00402740                 mov     ebx, [esp+2Ch+var_14]
.text:00402744                 mov     ebp, [esp+2Ch+var_18]
.text:00402748                 add     ebx, esi
.text:0040274A                 add     ebp, esi
.text:0040274C                 mov     edx, [edi+ebx*4]
.text:0040274F                 inc     esi
.text:00402750                 cmp     esi, [esp+2Ch+var_20]
.text:00402754                 mov     ecx, [edi+ebp*4]
.text:00402757                 mov     [edi+ebx*4], ecx
.text:0040275A                 mov     [edi+ebp*4], edx
.text:0040275D                 jl      short loc_402740
.text:0040275F
.text:0040275F loc_40275F:                             ; CODE XREF: sub_402660+DB↑j
.text:0040275F                 mov     esi, [esp+2Ch+var_20]
.text:00402763                 add     [esp+2Ch+var_14], esi
.text:00402767                 jmp     short loc_4026F1
.text:00402767 sub_402660      endp
.text:00402767
.text:00402767 ; ---------------------------------------------------------------------------
.text:00402769                 align 20h
.text:00402780
.text:00402780 ; =============== S U B R O U T I N E =======================================
.text:00402780
.text:00402780
.text:00402780 ; int __cdecl sub_402780(int, int, char *, int, int)
.text:00402780 sub_402780      proc near               ; CODE XREF: sub_401350+D8↑p
.text:00402780                                         ; sub_402920+58↓p
.text:00402780
.text:00402780 var_1C          = dword ptr -1Ch
.text:00402780 var_18          = dword ptr -18h
.text:00402780 var_14          = dword ptr -14h
.text:00402780 var_10          = dword ptr -10h
.text:00402780 var_C           = dword ptr -0Ch
.text:00402780 var_8           = dword ptr -8
.text:00402780 var_4           = dword ptr -4
.text:00402780 arg_0           = dword ptr  4
.text:00402780 arg_4           = dword ptr  8
.text:00402780 arg_8           = dword ptr  0Ch
.text:00402780 arg_C           = dword ptr  10h
.text:00402780 arg_10          = dword ptr  14h
.text:00402780
.text:00402780                 sub     esp, 1Ch
.text:00402783                 mov     edx, [esp+1Ch+arg_C]
.text:00402787                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040278F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402793                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040279B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040279F                 mov     edx, [esp+1Ch+arg_4]
.text:004027A3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004027A7                 mov     ecx, [esp+1Ch+arg_8]
.text:004027AB                 mov     [esp+1Ch+var_18], edx ; int
.text:004027AF                 mov     edx, [esp+1Ch+arg_0]
.text:004027B3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004027B7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004027BA                 call    sub_402540
.text:004027BF                 add     esp, 1Ch
.text:004027C2                 retn
.text:004027C2 sub_402780      endp
.text:004027C2
.text:004027C2 ; ---------------------------------------------------------------------------
.text:004027C3                 align 10h
.text:004027D0                 sub     esp, 2Ch
.text:004027D3                 mov     edx, [esp+44h]
.text:004027D7                 mov     dword ptr [esp+18h], 0
.text:004027DF                 mov     ecx, [esp+40h]
.text:004027E3                 mov     dword ptr [esp+14h], 0
.text:004027EB                 mov     [esp+1Ch], edx
.text:004027EF                 mov     edx, [esp+3Ch]
.text:004027F3                 mov     [esp+10h], ecx
.text:004027F7                 mov     ecx, [esp+38h]
.text:004027FB                 mov     [esp+0Ch], edx
.text:004027FF                 mov     edx, [esp+34h]
.text:00402803                 mov     [esp+8], ecx
.text:00402807                 mov     [esp+4], edx
.text:0040280B                 mov     edx, [esp+30h]
.text:0040280F                 mov     [esp], edx
.text:00402812                 call    sub_4019B0
.text:00402817                 add     esp, 2Ch
.text:0040281A                 retn
.text:0040281A ; ---------------------------------------------------------------------------
.text:0040281B                 align 10h
.text:00402820                 sub     esp, 1Ch
.text:00402823                 mov     edx, [esp+2Ch]
.text:00402827                 mov     dword ptr [esp+18h], 0
.text:0040282F                 mov     ecx, [esp+30h]
.text:00402833                 mov     dword ptr [esp+14h], 1
.text:0040283B                 mov     [esp+0Ch], edx
.text:0040283F                 mov     edx, [esp+24h]
.text:00402843                 mov     [esp+10h], ecx
.text:00402847                 mov     ecx, [esp+28h]
.text:0040284B                 mov     [esp+4], edx
.text:0040284F                 mov     edx, [esp+20h]
.text:00402853                 mov     [esp+8], ecx
.text:00402857                 mov     [esp], edx
.text:0040285A                 call    sub_402540
.text:0040285F                 add     esp, 1Ch
.text:00402862                 retn
.text:00402862 ; ---------------------------------------------------------------------------
.text:00402863                 align 10h
.text:00402870                 sub     esp, 2Ch
.text:00402873                 mov     edx, [esp+44h]
.text:00402877                 mov     dword ptr [esp+18h], 0
.text:0040287F                 mov     ecx, [esp+40h]
.text:00402883                 mov     dword ptr [esp+14h], 1
.text:0040288B                 mov     [esp+1Ch], edx
.text:0040288F                 mov     edx, [esp+3Ch]
.text:00402893                 mov     [esp+10h], ecx
.text:00402897                 mov     ecx, [esp+38h]
.text:0040289B                 mov     [esp+0Ch], edx
.text:0040289F                 mov     edx, [esp+34h]
.text:004028A3                 mov     [esp+8], ecx
.text:004028A7                 mov     [esp+4], edx
.text:004028AB                 mov     edx, [esp+30h]
.text:004028AF                 mov     [esp], edx
.text:004028B2                 call    sub_4019B0
.text:004028B7                 add     esp, 2Ch
.text:004028BA                 retn
.text:004028BA ; ---------------------------------------------------------------------------
.text:004028BB                 align 10h
.text:004028C0 aHelp           db 'help',0             ; DATA XREF: .text:off_4028E0↓o
.text:004028C5 aVersion        db 'version',0          ; DATA XREF: .text:004028F0↓o
.text:004028CD                 align 20h
.text:004028E0 off_4028E0      dd offset aHelp         ; DATA XREF: sub_402920+3D↓o
.text:004028E0                                         ; "help"
.text:004028E4                 dd 2 dup(0)
.text:004028EC                 dd 68h
.text:004028F0                 dd offset aVersion      ; "version"
.text:004028F4                 dd 2 dup(0)
.text:004028FC                 dd 76h, 4 dup(0)
.text:00402910 ; ---------------------------------------------------------------------------
.text:00402910
.text:00402910 loc_402910:                             ; DATA XREF: sub_402920+45↓o
.text:00402910                 sub     eax, [eax]
.text:00402912                 lea     esi, [esi+0]
.text:00402919                 lea     edi, [edi+0]
.text:00402920
.text:00402920 ; =============== S U B R O U T I N E =======================================
.text:00402920
.text:00402920
.text:00402920 ; int __cdecl sub_402920(int, int, FILE *, int, int, int, char)
.text:00402920 sub_402920      proc near               ; CODE XREF: sub_401350+B4↑p
.text:00402920
.text:00402920 Code            = dword ptr -1Ch
.text:00402920 var_18          = dword ptr -18h
.text:00402920 var_14          = dword ptr -14h
.text:00402920 var_10          = dword ptr -10h
.text:00402920 var_C           = dword ptr -0Ch
.text:00402920 var_4           = dword ptr -4
.text:00402920 arg_0           = dword ptr  4
.text:00402920 arg_4           = dword ptr  8
.text:00402920 arg_8           = dword ptr  0Ch
.text:00402920 arg_C           = dword ptr  10h
.text:00402920 arg_10          = dword ptr  14h
.text:00402920 arg_14          = dword ptr  18h
.text:00402920 arg_18          = byte ptr  1Ch
.text:00402920
.text:00402920                 sub     esp, 1Ch
.text:00402923                 xor     eax, eax
.text:00402925                 cmp     [esp+1Ch+arg_0], 2
.text:0040292A                 mov     [esp+1Ch+var_4], ebx
.text:0040292E                 mov     ebx, dword_405024
.text:00402934                 mov     dword_405024, eax
.text:00402939                 jz      short loc_402951
.text:0040293B
.text:0040293B loc_40293B:                             ; CODE XREF: sub_402920+60↓j
.text:0040293B                                         ; sub_402920+6A↓j
.text:0040293B                 mov     dword_405024, ebx
.text:00402941                 xor     edx, edx
.text:00402943                 mov     ebx, [esp+1Ch+var_4]
.text:00402947                 mov     dword_405020, edx
.text:0040294D                 add     esp, 1Ch
.text:00402950                 retn
.text:00402951 ; ---------------------------------------------------------------------------
.text:00402951
.text:00402951 loc_402951:                             ; CODE XREF: sub_402920+19↑j
.text:00402951                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402959                 mov     edx, [esp+1Ch+arg_4]
.text:0040295D                 mov     [esp+1Ch+var_10], offset off_4028E0 ; int
.text:00402965                 mov     [esp+1Ch+var_14], offset loc_402910 ; char *
.text:0040296D                 mov     [esp+1Ch+var_18], edx ; int
.text:00402971                 mov     [esp+1Ch+Code], 2 ; int
.text:00402978                 call    sub_402780
.text:0040297D                 cmp     eax, 0FFFFFFFFh
.text:00402980                 jz      short loc_40293B
.text:00402982                 cmp     eax, 68h ; 'h'
.text:00402985                 jz      short loc_40298E
.text:00402987                 cmp     eax, 76h ; 'v'
.text:0040298A                 jnz     short loc_40293B
.text:0040298C                 jmp     short loc_402999
.text:0040298E ; ---------------------------------------------------------------------------
.text:0040298E
.text:0040298E loc_40298E:                             ; CODE XREF: sub_402920+65↑j
.text:0040298E                 mov     [esp+1Ch+Code], 0
.text:00402995                 call    [esp+1Ch+arg_14]
.text:00402999
.text:00402999 loc_402999:                             ; CODE XREF: sub_402920+6C↑j
.text:00402999                 mov     ecx, [esp+1Ch+arg_10]
.text:0040299D                 lea     ebx, [esp+1Ch+arg_18]
.text:004029A1                 mov     edx, [esp+1Ch+arg_C]
.text:004029A5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:004029A9                 mov     ebx, [esp+1Ch+arg_8]
.text:004029AD                 mov     [esp+1Ch+var_10], ecx ; int
.text:004029B1                 mov     ecx, ds:_iob
.text:004029B7                 mov     [esp+1Ch+var_14], edx ; int
.text:004029BB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:004029BF                 add     ecx, 20h ; ' '
.text:004029C2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:004029C5                 call    sub_402DE0
.text:004029CA                 mov     [esp+1Ch+Code], 0 ; Code
.text:004029D1                 call    exit
.text:004029D1 sub_402920      endp
.text:004029D1
.text:004029D1 ; ---------------------------------------------------------------------------
.text:004029D6                 align 10h
.text:004029E0                 mov     edx, [esp+4]
.text:004029E4                 mov     ds:dword_406030, edx
.text:004029EA                 retn
.text:004029EA ; ---------------------------------------------------------------------------
.text:004029EB aWriteError     db 'write error',0      ; DATA XREF: sub_402A10:loc_402A59↓o
.text:004029F7 ; const char aSS_0[]
.text:004029F7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_402A10+77↓o
.text:004029FE ; const char aS[]
.text:004029FE aS              db '%s',0               ; DATA XREF: sub_402A10+A0↓o
.text:00402A01 ; ---------------------------------------------------------------------------
.text:00402A01                 jmp     short sub_402A10
.text:00402A01 ; ---------------------------------------------------------------------------
.text:00402A03                 align 10h
.text:00402A10
.text:00402A10 ; =============== S U B R O U T I N E =======================================
.text:00402A10
.text:00402A10
.text:00402A10 ; void __cdecl sub_402A10()
.text:00402A10 sub_402A10      proc near               ; CODE XREF: .text:00402A01↑j
.text:00402A10                                         ; DATA XREF: sub_401350+5C↑o
.text:00402A10
.text:00402A10 Stream          = dword ptr -2Ch
.text:00402A10 ErrorMessage    = dword ptr -28h
.text:00402A10 var_24          = dword ptr -24h
.text:00402A10 var_20          = byte ptr -20h
.text:00402A10 var_1C          = dword ptr -1Ch
.text:00402A10 var_9           = byte ptr -9
.text:00402A10
.text:00402A10                 push    esi
.text:00402A11                 push    ebx
.text:00402A12                 sub     esp, 24h
.text:00402A15                 mov     edx, ds:_iob
.text:00402A1B                 mov     ecx, [edx+2Ch]
.text:00402A1E                 lea     esi, [edx+20h]
.text:00402A21                 shr     ecx, 5
.text:00402A24                 mov     bl, cl
.text:00402A26                 mov     ecx, [edx+20h]
.text:00402A29                 and     bl, 1
.text:00402A2C                 cmp     ecx, [esi+8]
.text:00402A2F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402A32                 setz    [esp+2Ch+var_9]
.text:00402A37                 call    fclose
.text:00402A3C                 test    eax, eax
.text:00402A3E                 setnz   al
.text:00402A41                 test    bl, bl
.text:00402A43                 jnz     loc_402AD3
.text:00402A49                 test    al, al
.text:00402A4B                 jz      short loc_402AA0
.text:00402A4D
.text:00402A4D loc_402A4D:                             ; CODE XREF: sub_402A10+CD↓j
.text:00402A4D                 call    _errno
.text:00402A52                 mov     esi, [eax]
.text:00402A54
.text:00402A54 loc_402A54:                             ; CODE XREF: sub_402A10+C7↓j
.text:00402A54                 cmp     esi, 9
.text:00402A57                 jz      short loc_402AC6
.text:00402A59
.text:00402A59 loc_402A59:                             ; CODE XREF: sub_402A10+B8↓j
.text:00402A59                                         ; sub_402A10+C1↓j
.text:00402A59                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402A60                 call    ds:libintl_gettext
.text:00402A66                 mov     ebx, eax
.text:00402A68                 mov     eax, ds:dword_406030
.text:00402A6D                 test    eax, eax
.text:00402A6F                 jz      short loc_402AA6
.text:00402A71                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402A74                 call    sub_404120
.text:00402A79                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402A7D                 mov     edx, Code
.text:00402A83                 mov     [esp+2Ch+var_1C], ebx
.text:00402A87                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00402A8F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402A93                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402A96                 call    sub_404710
.text:00402A9B                 nop
.text:00402A9C                 lea     esi, [esi+0]
.text:00402AA0
.text:00402AA0 loc_402AA0:                             ; CODE XREF: sub_402A10+3B↑j
.text:00402AA0                                         ; sub_402A10+B4↓j ...
.text:00402AA0                 add     esp, 24h
.text:00402AA3                 pop     ebx
.text:00402AA4                 pop     esi
.text:00402AA5                 retn
.text:00402AA6 ; ---------------------------------------------------------------------------
.text:00402AA6
.text:00402AA6 loc_402AA6:                             ; CODE XREF: sub_402A10+5F↑j
.text:00402AA6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402AAA                 mov     ebx, Code
.text:00402AB0                 mov     [esp+2Ch+var_24], offset aS ; "%s"
.text:00402AB8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402ABC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402ABF                 call    sub_404710
.text:00402AC4                 jmp     short loc_402AA0
.text:00402AC6 ; ---------------------------------------------------------------------------
.text:00402AC6
.text:00402AC6 loc_402AC6:                             ; CODE XREF: sub_402A10+47↑j
.text:00402AC6                 test    bl, bl
.text:00402AC8                 jnz     short loc_402A59
.text:00402ACA                 cmp     [esp+2Ch+var_9], 0
.text:00402ACF                 jnz     short loc_402AA0
.text:00402AD1                 jmp     short loc_402A59
.text:00402AD3 ; ---------------------------------------------------------------------------
.text:00402AD3
.text:00402AD3 loc_402AD3:                             ; CODE XREF: sub_402A10+33↑j
.text:00402AD3                 xor     esi, esi
.text:00402AD5                 test    al, al
.text:00402AD7                 jz      loc_402A54
.text:00402ADD                 jmp     loc_402A4D
.text:00402ADD sub_402A10      endp
.text:00402ADD
.text:00402ADD ; ---------------------------------------------------------------------------
.text:00402AE2                 align 10h
.text:00402AF0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00402AF0                                         ; DATA XREF: .data:Buffer↓o
.text:00402B22 ; const char Format[]
.text:00402B22 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_402DE0+50↓o
.text:00402B2E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00402B2E                                         ; DATA XREF: sub_402DE0:loc_402E81↓o
.text:00402B3E                 db 12h dup(90h)
.text:00402B50 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00402B50                                         ; DATA XREF: sub_402DE0+100↓o
.text:00402B50                 db 'ere is NO',0Ah
.text:00402B50                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00402B50                 db 'R PURPOSE.',0Ah,0
.text:00402BE8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00402BE8                                         ; DATA XREF: sub_402DE0:loc_402F21↓o
.text:00402BFF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00402BFF                                         ; DATA XREF: sub_402DE0:loc_402F2D↓o
.text:00402C1B                 db 15h dup(90h)
.text:00402C30 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00402C30                                         ; DATA XREF: sub_402DE0:loc_402F39↓o
.text:00402C30                 db 'and %s.',0Ah,0
.text:00402C50 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00402C50                                         ; DATA XREF: sub_402DE0:loc_402F45↓o
.text:00402C50                 db '%s, and %s.',0Ah,0
.text:00402C74                 db 1Ch dup(90h)
.text:00402C90 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00402C90                                         ; DATA XREF: sub_402DE0:loc_402F51↓o
.text:00402C90                 db '%s, %s, and %s.',0Ah,0
.text:00402CB8                 db 18h dup(90h)
.text:00402CD0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00402CD0                                         ; DATA XREF: sub_402DE0:loc_402F5D↓o
.text:00402CD0                 db '%s, %s, %s, and %s.',0Ah,0
.text:00402CFC                 db 14h dup(90h)
.text:00402D10 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00402D10                                         ; DATA XREF: sub_402DE0:loc_402F69↓o
.text:00402D10                 db '%s, %s, %s, %s,',0Ah
.text:00402D10                 db 'and %s.',0Ah,0
.text:00402D40                 db 10h dup(90h)
.text:00402D50 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00402D50                                         ; DATA XREF: sub_402DE0:loc_402F75↓o
.text:00402D50                 db '%s, %s, %s, %s,',0Ah
.text:00402D50                 db '%s, and %s.',0Ah,0
.text:00402D84                 align 10h
.text:00402D90 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00402D90                                         ; DATA XREF: sub_402DE0:def_402E4D↓o
.text:00402D90                 db '%s, %s, %s, %s,',0Ah
.text:00402D90                 db '%s, %s, and others.',0Ah,0
.text:00402DCC ; const char aSS[]
.text:00402DCC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_402DE0+1B5↓o
.text:00402DD3                 align 10h
.text:00402DE0
.text:00402DE0 ; =============== S U B R O U T I N E =======================================
.text:00402DE0
.text:00402DE0
.text:00402DE0 ; int __cdecl sub_402DE0(FILE *, FILE *, int, int, va_list)
.text:00402DE0 sub_402DE0      proc near               ; CODE XREF: sub_402920+A5↑p
.text:00402DE0                                         ; .text:00402FDA↓p
.text:00402DE0
.text:00402DE0 Stream          = dword ptr -2Ch
.text:00402DE0 Format          = dword ptr -28h
.text:00402DE0 ArgList         = dword ptr -24h
.text:00402DE0 var_20          = dword ptr -20h
.text:00402DE0 var_1C          = dword ptr -1Ch
.text:00402DE0 var_14          = dword ptr -14h
.text:00402DE0 arg_0           = dword ptr  4
.text:00402DE0 arg_4           = dword ptr  8
.text:00402DE0 arg_8           = dword ptr  0Ch
.text:00402DE0 arg_C           = dword ptr  10h
.text:00402DE0 arg_10          = dword ptr  14h
.text:00402DE0
.text:00402DE0                 push    ebp
.text:00402DE1                 push    edi
.text:00402DE2                 push    esi
.text:00402DE3                 push    ebx
.text:00402DE4                 sub     esp, 1Ch
.text:00402DE7                 xor     ebx, ebx
.text:00402DE9                 mov     edi, [esp+2Ch+arg_10]
.text:00402DED                 mov     edx, [esp+2Ch+arg_8]
.text:00402DF1                 mov     esi, [esp+2Ch+arg_0]
.text:00402DF5                 mov     eax, [edi]
.text:00402DF7                 mov     ecx, [esp+2Ch+arg_4]
.text:00402DFB                 mov     [esp+2Ch+var_14], edx
.text:00402DFF                 mov     ebp, [esp+2Ch+arg_C]
.text:00402E03                 lea     edx, [edi+4]
.text:00402E06                 test    eax, eax
.text:00402E08                 jz      short loc_402E1C
.text:00402E0A                 lea     esi, [esi+0]
.text:00402E10
.text:00402E10 loc_402E10:                             ; CODE XREF: sub_402DE0+3A↓j
.text:00402E10                 mov     eax, edx
.text:00402E12                 inc     ebx
.text:00402E13                 mov     eax, [eax]
.text:00402E15                 add     edx, 4
.text:00402E18                 test    eax, eax
.text:00402E1A                 jnz     short loc_402E10
.text:00402E1C
.text:00402E1C loc_402E1C:                             ; CODE XREF: sub_402DE0+28↑j
.text:00402E1C                 test    ecx, ecx
.text:00402E1E                 jz      loc_402F8D
.text:00402E24                 mov     [esp+2Ch+var_1C], ebp
.text:00402E28                 mov     edx, [esp+2Ch+var_14]
.text:00402E2C                 mov     [esp+2Ch+ArgList], ecx
.text:00402E30                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00402E38                 mov     [esp+2Ch+var_20], edx
.text:00402E3C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402E3F                 call    fprintf
.text:00402E44
.text:00402E44 loc_402E44:                             ; CODE XREF: sub_402DE0+1C9↓j
.text:00402E44                 cmp     ebx, 9          ; switch 10 cases
.text:00402E47                 ja      def_402E4D      ; jumptable 00402E4D default case
.text:00402E4D                 jmp     ds:jpt_402E4D[ebx*4] ; switch jump
.text:00402E4D ; ---------------------------------------------------------------------------
.text:00402E54 jpt_402E4D      dd offset loc_402E7C    ; DATA XREF: sub_402DE0+6D↑r
.text:00402E54                 dd offset loc_402E81    ; jump table for switch statement
.text:00402E54                 dd offset loc_402F21
.text:00402E54                 dd offset loc_402F2D
.text:00402E54                 dd offset loc_402F39
.text:00402E54                 dd offset loc_402F45
.text:00402E54                 dd offset loc_402F51
.text:00402E54                 dd offset loc_402F5D
.text:00402E54                 dd offset loc_402F69
.text:00402E54                 dd offset loc_402F75
.text:00402E7C ; ---------------------------------------------------------------------------
.text:00402E7C
.text:00402E7C loc_402E7C:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402E7C                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402E7C                 call    abort           ; jumptable 00402E4D case 0
.text:00402E81 ; ---------------------------------------------------------------------------
.text:00402E81
.text:00402E81 loc_402E81:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402E81                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402E81                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00402E4D case 1
.text:00402E88                 nop
.text:00402E89                 lea     esi, [esi+0]
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402DE0+148↓j
.text:00402E90                                         ; sub_402DE0+154↓j ...
.text:00402E90                 call    ds:libintl_gettext
.text:00402E96                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00402E9A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402E9D                 mov     [esp+2Ch+Format], eax ; Format
.text:00402EA1                 call    vfprintf
.text:00402EA6                 mov     ebx, [esi+4]
.text:00402EA9                 dec     ebx
.text:00402EAA                 test    ebx, ebx
.text:00402EAC                 mov     [esi+4], ebx
.text:00402EAF                 js      short loc_402F0F
.text:00402EB1                 mov     edi, [esi]
.text:00402EB3                 mov     byte ptr [edi], 0Ah
.text:00402EB6                 inc     dword ptr [esi]
.text:00402EB8
.text:00402EB8 loc_402EB8:                             ; CODE XREF: sub_402DE0+13F↓j
.text:00402EB8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00402EBC                 mov     edx, Buffer
.text:00402EC2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00402EC5                 call    fputs
.text:00402ECA                 mov     ebp, [esi+4]
.text:00402ECD                 dec     ebp
.text:00402ECE                 test    ebp, ebp
.text:00402ED0                 mov     [esi+4], ebp
.text:00402ED3                 js      short loc_402EFD
.text:00402ED5                 mov     ecx, [esi]
.text:00402ED7                 mov     byte ptr [ecx], 0Ah
.text:00402EDA                 inc     dword ptr [esi]
.text:00402EDC
.text:00402EDC loc_402EDC:                             ; CODE XREF: sub_402DE0+12D↓j
.text:00402EDC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00402EE0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00402EE7                 call    ds:libintl_gettext
.text:00402EED                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00402EF1                 add     esp, 1Ch
.text:00402EF4                 pop     ebx
.text:00402EF5                 pop     esi
.text:00402EF6                 pop     edi
.text:00402EF7                 pop     ebp
.text:00402EF8                 jmp     fputs
.text:00402EFD ; ---------------------------------------------------------------------------
.text:00402EFD
.text:00402EFD loc_402EFD:                             ; CODE XREF: sub_402DE0+F3↑j
.text:00402EFD                 mov     [esp+2Ch+Format], esi ; File
.text:00402F01                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402F08                 call    _flsbuf
.text:00402F0D                 jmp     short loc_402EDC
.text:00402F0F ; ---------------------------------------------------------------------------
.text:00402F0F
.text:00402F0F loc_402F0F:                             ; CODE XREF: sub_402DE0+CF↑j
.text:00402F0F                 mov     [esp+2Ch+Format], esi ; File
.text:00402F13                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402F1A                 call    _flsbuf
.text:00402F1F                 jmp     short loc_402EB8
.text:00402F21 ; ---------------------------------------------------------------------------
.text:00402F21
.text:00402F21 loc_402F21:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F21                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F21                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00402E4D case 2
.text:00402F28                 jmp     loc_402E90
.text:00402F2D ; ---------------------------------------------------------------------------
.text:00402F2D
.text:00402F2D loc_402F2D:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F2D                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F2D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00402E4D case 3
.text:00402F34                 jmp     loc_402E90
.text:00402F39 ; ---------------------------------------------------------------------------
.text:00402F39
.text:00402F39 loc_402F39:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F39                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F39                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00402E4D case 4
.text:00402F40                 jmp     loc_402E90
.text:00402F45 ; ---------------------------------------------------------------------------
.text:00402F45
.text:00402F45 loc_402F45:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F45                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F45                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00402E4D case 5
.text:00402F4C                 jmp     loc_402E90
.text:00402F51 ; ---------------------------------------------------------------------------
.text:00402F51
.text:00402F51 loc_402F51:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F51                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F51                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00402E4D case 6
.text:00402F58                 jmp     loc_402E90
.text:00402F5D ; ---------------------------------------------------------------------------
.text:00402F5D
.text:00402F5D loc_402F5D:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F5D                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F5D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00402E4D case 7
.text:00402F64                 jmp     loc_402E90
.text:00402F69 ; ---------------------------------------------------------------------------
.text:00402F69
.text:00402F69 loc_402F69:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F69                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F69                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00402E4D case 8
.text:00402F70                 jmp     loc_402E90
.text:00402F75 ; ---------------------------------------------------------------------------
.text:00402F75
.text:00402F75 loc_402F75:                             ; CODE XREF: sub_402DE0+6D↑j
.text:00402F75                                         ; DATA XREF: sub_402DE0:jpt_402E4D↑o
.text:00402F75                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00402E4D case 9
.text:00402F7C                 jmp     loc_402E90
.text:00402F81 ; ---------------------------------------------------------------------------
.text:00402F81
.text:00402F81 def_402E4D:                             ; CODE XREF: sub_402DE0+67↑j
.text:00402F81                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00402E4D default case
.text:00402F88                 jmp     loc_402E90
.text:00402F8D ; ---------------------------------------------------------------------------
.text:00402F8D
.text:00402F8D loc_402F8D:                             ; CODE XREF: sub_402DE0+3E↑j
.text:00402F8D                 mov     [esp+2Ch+var_20], ebp
.text:00402F91                 mov     ecx, [esp+2Ch+var_14]
.text:00402F95                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00402F9D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402FA0                 mov     [esp+2Ch+ArgList], ecx
.text:00402FA4                 call    fprintf
.text:00402FA9                 jmp     loc_402E44
.text:00402FA9 sub_402DE0      endp
.text:00402FA9
.text:00402FA9 ; ---------------------------------------------------------------------------
.text:00402FAE                 align 10h
.text:00402FB0                 sub     esp, 1Ch
.text:00402FB3                 mov     edx, [esp+2Ch]
.text:00402FB7                 lea     ecx, [esp+30h]
.text:00402FBB                 mov     [esp+10h], ecx
.text:00402FBF                 mov     ecx, [esp+28h]
.text:00402FC3                 mov     [esp+0Ch], edx
.text:00402FC7                 mov     edx, [esp+24h]
.text:00402FCB                 mov     [esp+8], ecx
.text:00402FCF                 mov     [esp+4], edx
.text:00402FD3                 mov     edx, [esp+20h]
.text:00402FD7                 mov     [esp], edx
.text:00402FDA                 call    sub_402DE0
.text:00402FDF                 add     esp, 1Ch
.text:00402FE2                 retn
.text:00402FE2 ; ---------------------------------------------------------------------------
.text:00402FE3                 align 10h
.text:00402FF0 aLiteral        db 'literal',0          ; DATA XREF: .text:00403030↓o
.text:00402FF8 aShell          db 'shell',0            ; DATA XREF: .text:00403034↓o
.text:00402FFE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403038↓o
.text:0040300B aC              db 'c',0                ; DATA XREF: .text:0040303C↓o
.text:0040300D aEscape         db 'escape',0           ; DATA XREF: .text:00403040↓o
.text:00403014 aLocale         db 'locale',0           ; DATA XREF: .text:00403044↓o
.text:0040301B aClocale        db 'clocale',0          ; DATA XREF: .text:00403048↓o
.text:00403023                 align 10h
.text:00403030                 dd offset aLiteral      ; "literal"
.text:00403034                 dd offset aShell        ; "shell"
.text:00403038                 dd offset aShellAlways  ; "shell-always"
.text:0040303C                 dd offset aC            ; "c"
.text:00403040                 dd offset aEscape       ; "escape"
.text:00403044                 dd offset aLocale       ; "locale"
.text:00403048                 dd offset aClocale      ; "clocale"
.text:0040304C                 dd 2 dup(0)
.text:00403054                 dd 1, 2, 3, 4, 5, 6
.text:0040306C asc_40306C:                             ; DATA XREF: sub_403080+7E↓o
.text:0040306C                                         ; sub_403080+A39↓o ...
.text:0040306C                 text "UTF-16LE", '"',27h,'`'
.text:00403072                 align 10h
.text:00403080
.text:00403080 ; =============== S U B R O U T I N E =======================================
.text:00403080
.text:00403080
.text:00403080 ; int __cdecl sub_403080(int, int, char *Str, int, int, int)
.text:00403080 sub_403080      proc near               ; CODE XREF: sub_403080+43A↓p
.text:00403080                                         ; .text:00403C43↓p ...
.text:00403080
.text:00403080 C               = dword ptr -4Ch
.text:00403080 Type            = dword ptr -48h
.text:00403080 SizeInBytes     = dword ptr -44h
.text:00403080 State           = dword ptr -40h
.text:00403080 var_3C          = dword ptr -3Ch
.text:00403080 var_38          = dword ptr -38h
.text:00403080 var_34          = dword ptr -34h
.text:00403080 var_30          = dword ptr -30h
.text:00403080 var_29          = byte ptr -29h
.text:00403080 var_28          = dword ptr -28h
.text:00403080 var_22          = byte ptr -22h
.text:00403080 var_21          = byte ptr -21h
.text:00403080 var_20          = dword ptr -20h
.text:00403080 var_1C          = dword ptr -1Ch
.text:00403080 var_18          = mbstate_t ptr -18h
.text:00403080 arg_0           = dword ptr  4
.text:00403080 arg_4           = dword ptr  8
.text:00403080 Str             = dword ptr  0Ch
.text:00403080 arg_C           = dword ptr  10h
.text:00403080 arg_10          = dword ptr  14h
.text:00403080 arg_14          = dword ptr  18h
.text:00403080
.text:00403080                 push    ebp
.text:00403081                 push    edi
.text:00403082                 push    esi
.text:00403083                 push    ebx
.text:00403084                 sub     esp, 3Ch
.text:00403087                 mov     edx, ds:__mb_cur_max
.text:0040308D                 mov     [esp+4Ch+var_34], 0
.text:00403095                 mov     [esp+4Ch+var_1C], 0
.text:0040309D                 cmp     dword ptr [edx], 1
.text:004030A0                 mov     [esp+4Ch+var_20], 0
.text:004030A8                 mov     [esp+4Ch+var_21], 0
.text:004030AD                 setz    [esp+4Ch+var_22]
.text:004030B2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004030B7                 ja      short def_4030BD ; jumptable 004030BD default case, cases 0,1
.text:004030B9                 mov     edx, [esp+4Ch+arg_10]
.text:004030BD                 jmp     ds:jpt_4030BD[edx*4] ; switch jump
.text:004030BD ; ---------------------------------------------------------------------------
.text:004030C4 jpt_4030BD      dd offset def_4030BD    ; DATA XREF: sub_403080+3D↑r
.text:004030C4                 dd offset def_4030BD    ; jump table for switch statement
.text:004030C4                 dd offset loc_403A05
.text:004030C4                 dd offset loc_4030E0
.text:004030C4                 dd offset loc_403A2B
.text:004030C4                 dd offset loc_403A35
.text:004030C4                 dd offset loc_403A35
.text:004030E0 ; ---------------------------------------------------------------------------
.text:004030E0
.text:004030E0 loc_4030E0:                             ; CODE XREF: sub_403080+3D↑j
.text:004030E0                                         ; DATA XREF: sub_403080:jpt_4030BD↑o
.text:004030E0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004030BD case 3
.text:004030E4                 cmp     [esp+4Ch+var_34], eax
.text:004030E8                 jnb     short loc_4030F1
.text:004030EA                 mov     ebx, [esp+4Ch+arg_0]
.text:004030EE                 mov     byte ptr [ebx], 22h ; '"'
.text:004030F1
.text:004030F1 loc_4030F1:                             ; CODE XREF: sub_403080+68↑j
.text:004030F1                 mov     [esp+4Ch+var_34], 1
.text:004030F9                 mov     [esp+4Ch+var_21], 1
.text:004030FE                 mov     [esp+4Ch+var_1C], offset asc_40306C ; "\"'`"
.text:00403106
.text:00403106 loc_403106:                             ; CODE XREF: sub_403080+9A6↓j
.text:00403106                 mov     [esp+4Ch+var_20], 1
.text:0040310E
.text:0040310E def_4030BD:                             ; CODE XREF: sub_403080+37↑j
.text:0040310E                                         ; sub_403080+3D↑j ...
.text:0040310E                 xor     ebp, ebp        ; jumptable 004030BD default case, cases 0,1
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_403080+3DB↓j
.text:00403110                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403115                 jz      loc_4039F7
.text:0040311B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040311F
.text:0040311F loc_40311F:                             ; CODE XREF: sub_403080+980↓j
.text:0040311F                 jz      loc_40398E
.text:00403125                 cmp     [esp+4Ch+var_21], 0
.text:0040312A                 jz      short loc_403170
.text:0040312C                 mov     esi, [esp+4Ch+var_20]
.text:00403130                 test    esi, esi
.text:00403132                 jz      short loc_403170
.text:00403134                 mov     ecx, [esp+4Ch+var_20]
.text:00403138                 lea     edi, [ecx+ebp]
.text:0040313B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040313F                 ja      short loc_403170
.text:00403141                 cld
.text:00403142                 mov     ebx, [esp+4Ch+Str]
.text:00403146                 mov     edi, [esp+4Ch+var_1C]
.text:0040314A                 add     ebx, ebp
.text:0040314C                 mov     esi, ebx
.text:0040314E                 cmp     ecx, ecx
.text:00403150                 repe cmpsb
.text:00403152                 jnz     short loc_403170
.text:00403154                 mov     edx, [esp+4Ch+arg_4]
.text:00403158                 cmp     [esp+4Ch+var_34], edx
.text:0040315C                 jnb     short loc_40316A
.text:0040315E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403162                 mov     eax, [esp+4Ch+var_34]
.text:00403166                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040316A
.text:0040316A loc_40316A:                             ; CODE XREF: sub_403080+DC↑j
.text:0040316A                 inc     [esp+4Ch+var_34]
.text:0040316E                 mov     esi, esi
.text:00403170
.text:00403170 loc_403170:                             ; CODE XREF: sub_403080+AA↑j
.text:00403170                                         ; sub_403080+B2↑j ...
.text:00403170                 mov     edi, [esp+4Ch+Str]
.text:00403174                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403179                 movzx   eax, bl
.text:0040317C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040317F                 ja      def_403185      ; jumptable 00403185 default case, cases 1-6,14-31,64
.text:00403185                 jmp     ds:jpt_403185[eax*4] ; switch jump
.text:00403185 ; ---------------------------------------------------------------------------
.text:0040318C jpt_403185      dd offset loc_403388, offset def_403185, offset def_403185
.text:0040318C                                         ; DATA XREF: sub_403080+105↑r
.text:0040318C                 dd offset def_403185, offset def_403185, offset def_403185 ; jump table for switch statement
.text:0040318C                 dd offset def_403185, offset loc_403460, offset loc_40347E
.text:0040318C                 dd offset loc_403482, offset loc_4034C7, offset loc_4034CB
.text:0040318C                 dd offset loc_4034CF, offset loc_4034D3, offset def_403185
.text:0040318C                 dd offset def_403185, offset def_403185, offset def_403185
.text:0040318C                 dd offset def_403185, offset def_403185, offset def_403185
.text:0040318C                 dd offset def_403185, offset def_403185, offset def_403185
.text:0040318C                 dd offset def_403185, offset def_403185, offset def_403185
.text:0040318C                 dd offset def_403185, offset def_403185, offset def_403185
.text:0040318C                 dd offset def_403185, offset def_403185, offset loc_403958
.text:0040318C                 dd offset loc_403958, offset loc_403958, offset loc_40397A
.text:0040318C                 dd offset loc_403958, offset def_403582, offset loc_403958
.text:0040318C                 dd offset loc_4034D7, offset loc_403958, offset loc_403958
.text:0040318C                 dd offset loc_403958, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset loc_403958
.text:0040318C                 dd offset loc_403958, offset loc_403958, offset loc_403958
.text:0040318C                 dd offset loc_40353C, offset def_403185, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset loc_403958, offset loc_403951
.text:0040318C                 dd offset def_403582, offset loc_403958, offset def_403582
.text:0040318C                 dd offset loc_403958, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset def_403582, offset def_403582, offset def_403582
.text:0040318C                 dd offset loc_403968, offset loc_403958, offset loc_403968
.text:0040318C                 dd offset loc_40397A
.text:00403388 ; ---------------------------------------------------------------------------
.text:00403388
.text:00403388 loc_403388:                             ; CODE XREF: sub_403080+105↑j
.text:00403388                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:00403388                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403185 case 0
.text:0040338D                 lea     eax, [ebp+1]
.text:00403390                 jz      loc_403440
.text:00403396                 mov     esi, [esp+4Ch+arg_4]
.text:0040339A                 cmp     [esp+4Ch+var_34], esi
.text:0040339E                 jnb     short loc_4033AC
.text:004033A0                 mov     eax, [esp+4Ch+arg_0]
.text:004033A4                 mov     ebx, [esp+4Ch+var_34]
.text:004033A8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004033AC
.text:004033AC loc_4033AC:                             ; CODE XREF: sub_403080+31E↑j
.text:004033AC                 inc     [esp+4Ch+var_34]
.text:004033B0                 mov     edx, [esp+4Ch+arg_4]
.text:004033B4                 cmp     [esp+4Ch+var_34], edx
.text:004033B8                 jnb     short loc_4033C6
.text:004033BA                 mov     edi, [esp+4Ch+arg_0]
.text:004033BE                 mov     ecx, [esp+4Ch+var_34]
.text:004033C2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004033C6
.text:004033C6 loc_4033C6:                             ; CODE XREF: sub_403080+338↑j
.text:004033C6                 inc     [esp+4Ch+var_34]
.text:004033CA                 mov     esi, [esp+4Ch+arg_4]
.text:004033CE                 cmp     [esp+4Ch+var_34], esi
.text:004033D2                 jnb     short loc_4033E0
.text:004033D4                 mov     ebx, [esp+4Ch+arg_0]
.text:004033D8                 mov     eax, [esp+4Ch+var_34]
.text:004033DC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004033E0
.text:004033E0 loc_4033E0:                             ; CODE XREF: sub_403080+352↑j
.text:004033E0                 inc     [esp+4Ch+var_34]
.text:004033E4                 mov     bl, 30h ; '0'
.text:004033E6                 lea     esi, [esi+0]
.text:004033E9                 lea     edi, [edi+0]
.text:004033F0
.text:004033F0 def_403582:                             ; CODE XREF: sub_403080+105↑j
.text:004033F0                                         ; sub_403080+463↓j ...
.text:004033F0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:004033F0                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:004033F5                 lea     eax, [ebp+1]
.text:004033F8                 jz      short loc_403440
.text:004033FA                 mov     cl, bl
.text:004033FC                 mov     edi, [esp+4Ch+arg_14]
.text:00403400                 mov     esi, 1
.text:00403405                 shr     cl, 5
.text:00403408                 movzx   edx, cl
.text:0040340B                 mov     ecx, ebx
.text:0040340D                 and     ecx, 1Fh
.text:00403410                 shl     esi, cl
.text:00403412                 test    [edi+edx*4+4], esi
.text:00403416                 jz      short loc_403432
.text:00403418
.text:00403418 loc_403418:                             ; CODE XREF: sub_403080+3FC↓j
.text:00403418                 mov     edx, [esp+4Ch+arg_4]
.text:0040341C                 cmp     [esp+4Ch+var_34], edx
.text:00403420                 jnb     short loc_40342E
.text:00403422                 mov     edi, [esp+4Ch+arg_0]
.text:00403426                 mov     esi, [esp+4Ch+var_34]
.text:0040342A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040342E
.text:0040342E loc_40342E:                             ; CODE XREF: sub_403080+3A0↑j
.text:0040342E                 inc     [esp+4Ch+var_34]
.text:00403432
.text:00403432 loc_403432:                             ; CODE XREF: sub_403080+396↑j
.text:00403432                 lea     eax, [ebp+1]
.text:00403435                 lea     esi, [esi+0]
.text:00403439                 lea     edi, [edi+0]
.text:00403440
.text:00403440 loc_403440:                             ; CODE XREF: sub_403080+310↑j
.text:00403440                                         ; sub_403080+378↑j ...
.text:00403440                 mov     ebp, [esp+4Ch+arg_4]
.text:00403444                 cmp     [esp+4Ch+var_34], ebp
.text:00403448                 jnb     short loc_403455
.text:0040344A                 mov     edx, [esp+4Ch+arg_0]
.text:0040344E                 mov     ecx, [esp+4Ch+var_34]
.text:00403452                 mov     [ecx+edx], bl
.text:00403455
.text:00403455 loc_403455:                             ; CODE XREF: sub_403080+3C8↑j
.text:00403455                 inc     [esp+4Ch+var_34]
.text:00403459                 mov     ebp, eax
.text:0040345B                 jmp     loc_403110
.text:00403460 ; ---------------------------------------------------------------------------
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_403080+105↑j
.text:00403460                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:00403460                 mov     dl, 61h ; 'a'   ; jumptable 00403185 case 7
.text:00403462                 lea     esi, [esi+0]
.text:00403469                 lea     edi, [edi+0]
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_403080+400↓j
.text:00403470                                         ; sub_403080+409↓j ...
.text:00403470                 cmp     [esp+4Ch+var_21], 0
.text:00403475                 lea     eax, [ebp+1]
.text:00403478                 jz      short loc_403440
.text:0040347A                 mov     bl, dl
.text:0040347C                 jmp     short loc_403418
.text:0040347E ; ---------------------------------------------------------------------------
.text:0040347E
.text:0040347E loc_40347E:                             ; CODE XREF: sub_403080+105↑j
.text:0040347E                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:0040347E                 mov     dl, 62h ; 'b'   ; jumptable 00403185 case 8
.text:00403480                 jmp     short loc_403470
.text:00403482 ; ---------------------------------------------------------------------------
.text:00403482
.text:00403482 loc_403482:                             ; CODE XREF: sub_403080+105↑j
.text:00403482                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:00403482                 mov     dl, 74h ; 't'   ; jumptable 00403185 case 9
.text:00403484
.text:00403484 loc_403484:                             ; CODE XREF: sub_403080+449↓j
.text:00403484                                         ; sub_403080+455↓j ...
.text:00403484                 cmp     [esp+4Ch+arg_10], 1
.text:00403489                 jnz     short loc_403470
.text:0040348B
.text:0040348B loc_40348B:                             ; CODE XREF: sub_403080+45C↓j
.text:0040348B                                         ; sub_403080+4C1↓j ...
.text:0040348B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403852 cases 91,92,94,96,124
.text:00403493                 mov     eax, [esp+4Ch+arg_14]
.text:00403497                 mov     edx, [esp+4Ch+arg_C]
.text:0040349B                 mov     ecx, [esp+4Ch+Str]
.text:0040349F                 mov     ebx, [esp+4Ch+arg_4]
.text:004034A3                 mov     [esp+4Ch+var_38], eax ; int
.text:004034A7                 mov     ebp, [esp+4Ch+arg_0]
.text:004034AB                 mov     [esp+4Ch+State], edx ; int
.text:004034AF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004034B3                 mov     [esp+4Ch+Type], ebx ; int
.text:004034B7                 mov     [esp+4Ch+C], ebp ; int
.text:004034BA                 call    sub_403080
.text:004034BF
.text:004034BF loc_4034BF:                             ; CODE XREF: sub_403080+972↓j
.text:004034BF                 add     esp, 3Ch
.text:004034C2                 pop     ebx
.text:004034C3                 pop     esi
.text:004034C4                 pop     edi
.text:004034C5                 pop     ebp
.text:004034C6                 retn
.text:004034C7 ; ---------------------------------------------------------------------------
.text:004034C7
.text:004034C7 loc_4034C7:                             ; CODE XREF: sub_403080+105↑j
.text:004034C7                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:004034C7                 mov     dl, 6Eh ; 'n'   ; jumptable 00403185 case 10
.text:004034C9                 jmp     short loc_403484
.text:004034CB ; ---------------------------------------------------------------------------
.text:004034CB
.text:004034CB loc_4034CB:                             ; CODE XREF: sub_403080+105↑j
.text:004034CB                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:004034CB                 mov     dl, 76h ; 'v'   ; jumptable 00403185 case 11
.text:004034CD                 jmp     short loc_403470
.text:004034CF ; ---------------------------------------------------------------------------
.text:004034CF
.text:004034CF loc_4034CF:                             ; CODE XREF: sub_403080+105↑j
.text:004034CF                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:004034CF                 mov     dl, 66h ; 'f'   ; jumptable 00403185 case 12
.text:004034D1                 jmp     short loc_403470
.text:004034D3 ; ---------------------------------------------------------------------------
.text:004034D3
.text:004034D3 loc_4034D3:                             ; CODE XREF: sub_403080+105↑j
.text:004034D3                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:004034D3                 mov     dl, 72h ; 'r'   ; jumptable 00403185 case 13
.text:004034D5                 jmp     short loc_403484
.text:004034D7 ; ---------------------------------------------------------------------------
.text:004034D7
.text:004034D7 loc_4034D7:                             ; CODE XREF: sub_403080+105↑j
.text:004034D7                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:004034D7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403185 case 39
.text:004034DC                 jz      short loc_40348B ; jumptable 00403852 cases 91,92,94,96,124
.text:004034DE                 cmp     [esp+4Ch+arg_10], 2
.text:004034E3                 jnz     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:004034E3                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:004034E9                 mov     edx, [esp+4Ch+arg_4]
.text:004034ED                 cmp     [esp+4Ch+var_34], edx
.text:004034F1                 jnb     short loc_4034FF
.text:004034F3                 mov     ecx, [esp+4Ch+arg_0]
.text:004034F7                 mov     edi, [esp+4Ch+var_34]
.text:004034FB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004034FF
.text:004034FF loc_4034FF:                             ; CODE XREF: sub_403080+471↑j
.text:004034FF                 inc     [esp+4Ch+var_34]
.text:00403503                 mov     eax, [esp+4Ch+arg_4]
.text:00403507                 cmp     [esp+4Ch+var_34], eax
.text:0040350B                 jnb     short loc_403519
.text:0040350D                 mov     esi, [esp+4Ch+arg_0]
.text:00403511                 mov     edx, [esp+4Ch+var_34]
.text:00403515                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403519
.text:00403519 loc_403519:                             ; CODE XREF: sub_403080+48B↑j
.text:00403519                 inc     [esp+4Ch+var_34]
.text:0040351D                 mov     edi, [esp+4Ch+arg_4]
.text:00403521                 cmp     [esp+4Ch+var_34], edi
.text:00403525                 jnb     short loc_403533
.text:00403527                 mov     ecx, [esp+4Ch+arg_0]
.text:0040352B                 mov     eax, [esp+4Ch+var_34]
.text:0040352F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403533
.text:00403533 loc_403533:                             ; CODE XREF: sub_403080+4A5↑j
.text:00403533                                         ; sub_403080+5C4↓j ...
.text:00403533                 inc     [esp+4Ch+var_34]
.text:00403537                 jmp     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:00403537                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:0040353C ; ---------------------------------------------------------------------------
.text:0040353C
.text:0040353C loc_40353C:                             ; CODE XREF: sub_403080+105↑j
.text:0040353C                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:0040353C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403185 case 63
.text:00403541                 jz      loc_40348B      ; jumptable 00403852 cases 91,92,94,96,124
.text:00403547                 cmp     [esp+4Ch+arg_10], 3
.text:0040354C                 jnz     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:0040354C                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:00403552                 lea     edx, [ebp+2]
.text:00403555                 cmp     edx, [esp+4Ch+arg_C]
.text:00403559                 jnb     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:00403559                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:0040355F                 mov     esi, [esp+4Ch+Str]
.text:00403563                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00403568                 jnz     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:00403568                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:0040356E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00403573                 movsx   eax, cl
.text:00403576                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00403579                 cmp     eax, 1Dh
.text:0040357C                 ja      def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:0040357C                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:00403582                 jmp     ds:jpt_403582[eax*4] ; switch jump
.text:00403582 ; ---------------------------------------------------------------------------
.text:00403589                 align 4
.text:0040358C jpt_403582      dd offset loc_403604    ; DATA XREF: sub_403080+502↑r
.text:0040358C                 dd offset def_403582    ; jump table for switch statement
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset loc_403604
.text:0040358C                 dd offset loc_403604
.text:0040358C                 dd offset loc_403604
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset loc_403604
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset loc_403604
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset def_403582
.text:0040358C                 dd offset loc_403604
.text:0040358C                 dd offset loc_403604
.text:0040358C                 dd offset loc_403604
.text:00403604 ; ---------------------------------------------------------------------------
.text:00403604
.text:00403604 loc_403604:                             ; CODE XREF: sub_403080+502↑j
.text:00403604                                         ; DATA XREF: sub_403080:jpt_403582↑o
.text:00403604                 mov     ebp, edx        ; jumptable 00403582 cases 33,39-41,45,47,60-62
.text:00403606                 mov     bl, cl
.text:00403608                 mov     edx, [esp+4Ch+arg_4]
.text:0040360C                 cmp     [esp+4Ch+var_34], edx
.text:00403610                 jnb     short loc_40361E
.text:00403612                 mov     ecx, [esp+4Ch+arg_0]
.text:00403616                 mov     edi, [esp+4Ch+var_34]
.text:0040361A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040361E
.text:0040361E loc_40361E:                             ; CODE XREF: sub_403080+590↑j
.text:0040361E                 inc     [esp+4Ch+var_34]
.text:00403622                 mov     eax, [esp+4Ch+arg_4]
.text:00403626                 cmp     [esp+4Ch+var_34], eax
.text:0040362A                 jnb     short loc_403638
.text:0040362C                 mov     edx, [esp+4Ch+arg_0]
.text:00403630                 mov     esi, [esp+4Ch+var_34]
.text:00403634                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403638
.text:00403638 loc_403638:                             ; CODE XREF: sub_403080+5AA↑j
.text:00403638                 inc     [esp+4Ch+var_34]
.text:0040363C                 mov     edi, [esp+4Ch+arg_4]
.text:00403640                 cmp     [esp+4Ch+var_34], edi
.text:00403644                 jnb     loc_403533
.text:0040364A                 mov     eax, [esp+4Ch+arg_0]
.text:0040364E                 mov     ecx, [esp+4Ch+var_34]
.text:00403652                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403656                 jmp     loc_403533
.text:00403656 ; ---------------------------------------------------------------------------
.text:0040365B                 align 10h
.text:00403660
.text:00403660 def_403185:                             ; CODE XREF: sub_403080+FF↑j
.text:00403660                                         ; sub_403080+105↑j
.text:00403660                                         ; DATA XREF: ...
.text:00403660                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403185 default case, cases 1-6,14-31,64
.text:00403665                 jz      loc_403790
.text:0040366B                 mov     [esp+4Ch+var_28], 1
.text:00403673                 mov     esi, ds:__mb_cur_max
.text:00403679                 movzx   edx, bl
.text:0040367C                 cmp     dword ptr [esi], 1
.text:0040367F                 jz      loc_403774
.text:00403685                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040368D                 mov     [esp+4Ch+C], edx ; C
.text:00403690                 call    _isctype
.text:00403695
.text:00403695 loc_403695:                             ; CODE XREF: sub_403080+705↓j
.text:00403695                 test    eax, eax
.text:00403697                 setnz   [esp+4Ch+var_29]
.text:0040369C
.text:0040369C loc_40369C:                             ; CODE XREF: sub_403080+7A5↓j
.text:0040369C                 cmp     [esp+4Ch+var_21], 0
.text:004036A1                 lea     eax, [ebp+1]
.text:004036A4                 jz      loc_403440
.text:004036AA                 cmp     [esp+4Ch+var_29], 0
.text:004036AF                 jnz     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:004036AF                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:004036B5
.text:004036B5 loc_4036B5:                             ; CODE XREF: sub_403080+7AB↓j
.text:004036B5                 mov     eax, [esp+4Ch+var_28]
.text:004036B9                 lea     edx, [eax+ebp]
.text:004036BC                 lea     esi, [esi+0]
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_403080+6EF↓j
.text:004036C0                 cmp     [esp+4Ch+var_21], 0
.text:004036C5                 jz      short loc_403740
.text:004036C7                 cmp     [esp+4Ch+var_29], 0
.text:004036CC                 jnz     short loc_403740
.text:004036CE                 mov     edi, [esp+4Ch+arg_4]
.text:004036D2                 cmp     [esp+4Ch+var_34], edi
.text:004036D6                 jnb     short loc_4036E4
.text:004036D8                 mov     esi, [esp+4Ch+arg_0]
.text:004036DC                 mov     eax, [esp+4Ch+var_34]
.text:004036E0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004036E4
.text:004036E4 loc_4036E4:                             ; CODE XREF: sub_403080+656↑j
.text:004036E4                 inc     [esp+4Ch+var_34]
.text:004036E8                 mov     ecx, [esp+4Ch+arg_4]
.text:004036EC                 cmp     [esp+4Ch+var_34], ecx
.text:004036F0                 jnb     short loc_403705
.text:004036F2                 mov     cl, bl
.text:004036F4                 mov     esi, [esp+4Ch+arg_0]
.text:004036F8                 mov     edi, [esp+4Ch+var_34]
.text:004036FC                 shr     cl, 6
.text:004036FF                 add     cl, 30h ; '0'
.text:00403702                 mov     [edi+esi], cl
.text:00403705
.text:00403705 loc_403705:                             ; CODE XREF: sub_403080+670↑j
.text:00403705                 inc     [esp+4Ch+var_34]
.text:00403709                 mov     edi, [esp+4Ch+arg_4]
.text:0040370D                 cmp     [esp+4Ch+var_34], edi
.text:00403711                 jnb     short loc_403729
.text:00403713                 mov     cl, bl
.text:00403715                 mov     esi, [esp+4Ch+arg_0]
.text:00403719                 shr     cl, 3
.text:0040371C                 mov     edi, [esp+4Ch+var_34]
.text:00403720                 and     cl, 7
.text:00403723                 add     cl, 30h ; '0'
.text:00403726                 mov     [edi+esi], cl
.text:00403729
.text:00403729 loc_403729:                             ; CODE XREF: sub_403080+691↑j
.text:00403729                 inc     [esp+4Ch+var_34]
.text:0040372D                 and     bl, 7
.text:00403730                 add     bl, 30h ; '0'
.text:00403733                 lea     esi, [esi+0]
.text:00403739                 lea     edi, [edi+0]
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: sub_403080+645↑j
.text:00403740                                         ; sub_403080+64C↑j
.text:00403740                 lea     eax, [ebp+1]
.text:00403743                 cmp     edx, eax
.text:00403745                 jbe     loc_403440
.text:0040374B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040374F                 cmp     [esp+4Ch+var_34], ebp
.text:00403753                 jnb     short loc_403760
.text:00403755                 mov     ecx, [esp+4Ch+arg_0]
.text:00403759                 mov     edi, [esp+4Ch+var_34]
.text:0040375D                 mov     [edi+ecx], bl
.text:00403760
.text:00403760 loc_403760:                             ; CODE XREF: sub_403080+6D3↑j
.text:00403760                 inc     [esp+4Ch+var_34]
.text:00403764                 mov     ebp, eax
.text:00403766                 mov     eax, [esp+4Ch+Str]
.text:0040376A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040376F                 jmp     loc_4036C0
.text:00403774 ; ---------------------------------------------------------------------------
.text:00403774
.text:00403774 loc_403774:                             ; CODE XREF: sub_403080+5FF↑j
.text:00403774                 mov     ecx, ds:_pctype
.text:0040377A                 mov     edi, [ecx]
.text:0040377C                 movzx   eax, word ptr [edi+edx*2]
.text:00403780                 and     eax, 157h
.text:00403785                 jmp     loc_403695
.text:00403785 ; ---------------------------------------------------------------------------
.text:0040378A                 align 10h
.text:00403790
.text:00403790 loc_403790:                             ; CODE XREF: sub_403080+5E5↑j
.text:00403790                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403795                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040379D                 mov     [esp+4Ch+var_28], 0
.text:004037A5                 mov     [esp+4Ch+var_29], 1
.text:004037AA                 jz      loc_40393C
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_403080+8CC↓j
.text:004037B0                 mov     ecx, [esp+4Ch+arg_C]
.text:004037B4                 lea     edx, [esp+4Ch+var_18]
.text:004037B8                 mov     edi, [esp+4Ch+Str]
.text:004037BC                 mov     [esp+4Ch+State], edx ; State
.text:004037C0                 lea     esi, [esp+4Ch+var_18._State]
.text:004037C4                 sub     ecx, ebp
.text:004037C6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004037CA                 add     edi, ebp
.text:004037CC                 mov     [esp+4Ch+var_30], edi
.text:004037D0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004037D4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004037D7                 call    mbrtowc
.text:004037DC                 test    eax, eax
.text:004037DE                 mov     edi, eax
.text:004037E0                 jz      short loc_403820
.text:004037E2                 cmp     eax, 0FFFFFFFFh
.text:004037E5                 jz      loc_403932
.text:004037EB                 cmp     eax, 0FFFFFFFEh
.text:004037EE                 jz      loc_4038F2
.text:004037F4                 cmp     [esp+4Ch+arg_10], 1
.text:004037F9                 jz      short loc_403830
.text:004037FB
.text:004037FB loc_4037FB:                             ; CODE XREF: sub_403080+7B9↓j
.text:004037FB                                         ; sub_403080+86D↓j
.text:004037FB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403800                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403808                 mov     [esp+4Ch+C], ecx ; C
.text:0040380B                 call    iswctype
.text:00403810                 test    eax, eax
.text:00403812                 jnz     short loc_403819
.text:00403814                 mov     [esp+4Ch+var_29], 0
.text:00403819
.text:00403819 loc_403819:                             ; CODE XREF: sub_403080+792↑j
.text:00403819                 mov     [esp+4Ch+var_28], edi
.text:0040381D                 lea     esi, [esi+0]
.text:00403820
.text:00403820 loc_403820:                             ; CODE XREF: sub_403080+760↑j
.text:00403820                                         ; sub_403080+87B↓j ...
.text:00403820                 cmp     [esp+4Ch+var_28], 1
.text:00403825                 jbe     loc_40369C
.text:0040382B                 jmp     loc_4036B5
.text:00403830 ; ---------------------------------------------------------------------------
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403080+779↑j
.text:00403830                 cmp     [esp+4Ch+arg_10], eax
.text:00403834                 mov     edx, 1
.text:00403839                 jnb     short loc_4037FB
.text:0040383B
.text:0040383B loc_40383B:                             ; CODE XREF: sub_403080+867↓j
.text:0040383B                 mov     ecx, [esp+4Ch+Str]
.text:0040383F                 lea     esi, [edx+ebp]
.text:00403842                 movsx   eax, byte ptr [esi+ecx]
.text:00403846                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403849                 cmp     eax, 21h
.text:0040384C                 ja      def_403852      ; jumptable 00403852 default case, cases 93,95,97-123
.text:00403852                 jmp     ds:jpt_403852[eax*4] ; switch jump
.text:00403852 ; ---------------------------------------------------------------------------
.text:00403859                 align 4
.text:0040385C jpt_403852      dd offset loc_40348B    ; DATA XREF: sub_403080+7D2↑r
.text:0040385C                 dd offset loc_40348B    ; jump table for switch statement
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset loc_40348B
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset loc_40348B
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset def_403852
.text:0040385C                 dd offset loc_40348B
.text:004038E4 ; ---------------------------------------------------------------------------
.text:004038E4
.text:004038E4 def_403852:                             ; CODE XREF: sub_403080+7CC↑j
.text:004038E4                                         ; sub_403080+7D2↑j
.text:004038E4                                         ; DATA XREF: ...
.text:004038E4                 inc     edx             ; jumptable 00403852 default case, cases 93,95,97-123
.text:004038E5                 cmp     edx, edi
.text:004038E7                 jb      loc_40383B
.text:004038ED                 jmp     loc_4037FB
.text:004038F2 ; ---------------------------------------------------------------------------
.text:004038F2
.text:004038F2 loc_4038F2:                             ; CODE XREF: sub_403080+76E↑j
.text:004038F2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004038F6                 mov     [esp+4Ch+var_29], 0
.text:004038FB                 jnb     loc_403820
.text:00403901                 mov     eax, [esp+4Ch+var_30]
.text:00403905                 cmp     byte ptr [eax], 0
.text:00403908                 jz      loc_403820
.text:0040390E
.text:0040390E loc_40390E:                             ; CODE XREF: sub_403080+8AB↓j
.text:0040390E                 inc     [esp+4Ch+var_28]
.text:00403912                 mov     esi, [esp+4Ch+var_28]
.text:00403916                 lea     eax, [esi+ebp]
.text:00403919                 cmp     eax, [esp+4Ch+arg_C]
.text:0040391D                 jnb     loc_403820
.text:00403923                 mov     edi, [esp+4Ch+Str]
.text:00403927                 cmp     byte ptr [eax+edi], 0
.text:0040392B                 jnz     short loc_40390E
.text:0040392D                 jmp     loc_403820
.text:00403932 ; ---------------------------------------------------------------------------
.text:00403932
.text:00403932 loc_403932:                             ; CODE XREF: sub_403080+765↑j
.text:00403932                 mov     [esp+4Ch+var_29], 0
.text:00403937                 jmp     loc_403820
.text:0040393C ; ---------------------------------------------------------------------------
.text:0040393C
.text:0040393C loc_40393C:                             ; CODE XREF: sub_403080+72A↑j
.text:0040393C                 mov     edx, [esp+4Ch+Str]
.text:00403940                 mov     [esp+4Ch+C], edx ; Str
.text:00403943                 call    strlen
.text:00403948                 mov     [esp+4Ch+arg_C], eax
.text:0040394C                 jmp     loc_4037B0
.text:00403951 ; ---------------------------------------------------------------------------
.text:00403951
.text:00403951 loc_403951:                             ; CODE XREF: sub_403080+105↑j
.text:00403951                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:00403951                 mov     dl, bl          ; jumptable 00403185 case 92
.text:00403953                 jmp     loc_403484
.text:00403958 ; ---------------------------------------------------------------------------
.text:00403958
.text:00403958 loc_403958:                             ; CODE XREF: sub_403080+105↑j
.text:00403958                                         ; sub_403080+902↓j
.text:00403958                                         ; DATA XREF: ...
.text:00403958                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403185 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040395D                 jnz     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:0040395D                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:00403963                 jmp     loc_40348B      ; jumptable 00403852 cases 91,92,94,96,124
.text:00403968 ; ---------------------------------------------------------------------------
.text:00403968
.text:00403968 loc_403968:                             ; CODE XREF: sub_403080+105↑j
.text:00403968                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:00403968                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403185 cases 123,125
.text:0040396D                 jz      short loc_403984
.text:0040396F                 cmp     [esp+4Ch+arg_C], 1
.text:00403974
.text:00403974 loc_403974:                             ; CODE XREF: sub_403080+90C↓j
.text:00403974                 jnz     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:00403974                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:0040397A
.text:0040397A loc_40397A:                             ; CODE XREF: sub_403080+105↑j
.text:0040397A                                         ; DATA XREF: sub_403080:jpt_403185↑o
.text:0040397A                 test    ebp, ebp        ; jumptable 00403185 cases 35,126
.text:0040397C                 jnz     def_403582      ; jumptable 00403185 cases 37,43-58,65-90,93,95,97-122
.text:0040397C                                         ; jumptable 00403582 default case, cases 34-38,42-44,46,48-59
.text:00403982                 jmp     short loc_403958 ; jumptable 00403185 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403984 ; ---------------------------------------------------------------------------
.text:00403984
.text:00403984 loc_403984:                             ; CODE XREF: sub_403080+8ED↑j
.text:00403984                 mov     esi, [esp+4Ch+Str]
.text:00403988                 cmp     byte ptr [esi+1], 0
.text:0040398C                 jmp     short loc_403974
.text:0040398E ; ---------------------------------------------------------------------------
.text:0040398E
.text:0040398E loc_40398E:                             ; CODE XREF: sub_403080:loc_40311F↑j
.text:0040398E                 test    ebp, ebp
.text:00403990                 jnz     short loc_40399D
.text:00403992                 cmp     [esp+4Ch+arg_10], 1
.text:00403997                 jz      loc_40348B      ; jumptable 00403852 cases 91,92,94,96,124
.text:0040399D
.text:0040399D loc_40399D:                             ; CODE XREF: sub_403080+910↑j
.text:0040399D                 mov     esi, [esp+4Ch+var_1C]
.text:004039A1                 test    esi, esi
.text:004039A3                 jz      short loc_4039D8
.text:004039A5                 mov     edi, [esp+4Ch+var_1C]
.text:004039A9                 movzx   eax, byte ptr [edi]
.text:004039AC                 test    al, al
.text:004039AE                 jz      short loc_4039D8
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_403080+956↓j
.text:004039B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004039B4                 cmp     [esp+4Ch+var_34], ebp
.text:004039B8                 jnb     short loc_4039C5
.text:004039BA                 mov     ecx, [esp+4Ch+arg_0]
.text:004039BE                 mov     ebx, [esp+4Ch+var_34]
.text:004039C2                 mov     [ebx+ecx], al
.text:004039C5
.text:004039C5 loc_4039C5:                             ; CODE XREF: sub_403080+938↑j
.text:004039C5                 inc     [esp+4Ch+var_1C]
.text:004039C9                 inc     [esp+4Ch+var_34]
.text:004039CD                 mov     edx, [esp+4Ch+var_1C]
.text:004039D1                 movzx   eax, byte ptr [edx]
.text:004039D4                 test    al, al
.text:004039D6                 jnz     short loc_4039B0
.text:004039D8
.text:004039D8 loc_4039D8:                             ; CODE XREF: sub_403080+923↑j
.text:004039D8                                         ; sub_403080+92E↑j
.text:004039D8                 mov     eax, [esp+4Ch+arg_4]
.text:004039DC                 cmp     [esp+4Ch+var_34], eax
.text:004039E0                 jnb     short loc_4039EE
.text:004039E2                 mov     edi, [esp+4Ch+arg_0]
.text:004039E6                 mov     esi, [esp+4Ch+var_34]
.text:004039EA                 mov     byte ptr [esi+edi], 0
.text:004039EE
.text:004039EE loc_4039EE:                             ; CODE XREF: sub_403080+960↑j
.text:004039EE                 mov     eax, [esp+4Ch+var_34]
.text:004039F2                 jmp     loc_4034BF
.text:004039F7 ; ---------------------------------------------------------------------------
.text:004039F7
.text:004039F7 loc_4039F7:                             ; CODE XREF: sub_403080+95↑j
.text:004039F7                 mov     ebx, [esp+4Ch+Str]
.text:004039FB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403A00                 jmp     loc_40311F
.text:00403A05 ; ---------------------------------------------------------------------------
.text:00403A05
.text:00403A05 loc_403A05:                             ; CODE XREF: sub_403080+3D↑j
.text:00403A05                                         ; DATA XREF: sub_403080:jpt_4030BD↑o
.text:00403A05                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004030BD case 2
.text:00403A09                 cmp     [esp+4Ch+var_34], edx
.text:00403A0D                 jnb     short loc_403A16
.text:00403A0F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A13                 mov     byte ptr [ecx], 27h ; '''
.text:00403A16
.text:00403A16 loc_403A16:                             ; CODE XREF: sub_403080+98D↑j
.text:00403A16                 mov     [esp+4Ch+var_34], 1
.text:00403A1E                 mov     [esp+4Ch+var_1C], 40306Eh
.text:00403A26                 jmp     loc_403106
.text:00403A2B ; ---------------------------------------------------------------------------
.text:00403A2B
.text:00403A2B loc_403A2B:                             ; CODE XREF: sub_403080+3D↑j
.text:00403A2B                                         ; DATA XREF: sub_403080:jpt_4030BD↑o
.text:00403A2B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004030BD case 4
.text:00403A30                 jmp     def_4030BD      ; jumptable 004030BD default case, cases 0,1
.text:00403A35 ; ---------------------------------------------------------------------------
.text:00403A35
.text:00403A35 loc_403A35:                             ; CODE XREF: sub_403080+3D↑j
.text:00403A35                                         ; DATA XREF: sub_403080:jpt_4030BD↑o
.text:00403A35                 mov     [esp+4Ch+C], 403070h ; jumptable 004030BD cases 5,6
.text:00403A3C                 call    ds:libintl_gettext
.text:00403A42                 cmp     eax, 403070h
.text:00403A47                 mov     edi, eax
.text:00403A49                 jz      short loc_403AC0
.text:00403A4B
.text:00403A4B loc_403A4B:                             ; CODE XREF: sub_403080+A45↓j
.text:00403A4B                                         ; sub_403080+A4C↓j
.text:00403A4B                 mov     [esp+4Ch+C], 40306Eh
.text:00403A52                 call    ds:libintl_gettext
.text:00403A58                 cmp     eax, 40306Eh
.text:00403A5D                 mov     edx, eax
.text:00403A5F                 jz      short loc_403AB2
.text:00403A61
.text:00403A61 loc_403A61:                             ; CODE XREF: sub_403080+A37↓j
.text:00403A61                                         ; sub_403080+A3E↓j
.text:00403A61                 mov     [esp+4Ch+var_1C], edi
.text:00403A65                 cmp     byte ptr [edi], 0
.text:00403A68                 jz      short loc_403A98
.text:00403A6A
.text:00403A6A loc_403A6A:                             ; CODE XREF: sub_403080+A16↓j
.text:00403A6A                 mov     ecx, [esp+4Ch+arg_4]
.text:00403A6E                 cmp     [esp+4Ch+var_34], ecx
.text:00403A72                 jnb     short loc_403A87
.text:00403A74                 mov     ebp, [esp+4Ch+var_1C]
.text:00403A78                 mov     edi, [esp+4Ch+arg_0]
.text:00403A7C                 mov     esi, [esp+4Ch+var_34]
.text:00403A80                 movzx   ebx, byte ptr [ebp+0]
.text:00403A84                 mov     [esi+edi], bl
.text:00403A87
.text:00403A87 loc_403A87:                             ; CODE XREF: sub_403080+9F2↑j
.text:00403A87                 inc     [esp+4Ch+var_1C]
.text:00403A8B                 inc     [esp+4Ch+var_34]
.text:00403A8F                 mov     eax, [esp+4Ch+var_1C]
.text:00403A93                 cmp     byte ptr [eax], 0
.text:00403A96                 jnz     short loc_403A6A
.text:00403A98
.text:00403A98 loc_403A98:                             ; CODE XREF: sub_403080+9E8↑j
.text:00403A98                 mov     [esp+4Ch+var_21], 1
.text:00403A9D                 mov     [esp+4Ch+var_1C], edx
.text:00403AA1                 mov     [esp+4Ch+C], edx ; Str
.text:00403AA4                 call    strlen
.text:00403AA9                 mov     [esp+4Ch+var_20], eax
.text:00403AAD                 jmp     def_4030BD      ; jumptable 004030BD default case, cases 0,1
.text:00403AB2 ; ---------------------------------------------------------------------------
.text:00403AB2
.text:00403AB2 loc_403AB2:                             ; CODE XREF: sub_403080+9DF↑j
.text:00403AB2                 cmp     [esp+4Ch+arg_10], 6
.text:00403AB7                 jnz     short loc_403A61
.text:00403AB9                 mov     edx, offset asc_40306C ; "\"'`"
.text:00403ABE                 jmp     short loc_403A61
.text:00403AC0 ; ---------------------------------------------------------------------------
.text:00403AC0
.text:00403AC0 loc_403AC0:                             ; CODE XREF: sub_403080+9C9↑j
.text:00403AC0                 cmp     [esp+4Ch+arg_10], 6
.text:00403AC5                 jnz     short loc_403A4B
.text:00403AC7                 mov     edi, offset asc_40306C ; "\"'`"
.text:00403ACC                 jmp     loc_403A4B
.text:00403ACC sub_403080      endp
.text:00403ACC
.text:00403AD1 ; ---------------------------------------------------------------------------
.text:00403AD1                 jmp     short loc_403AE0
.text:00403AD1 ; ---------------------------------------------------------------------------
.text:00403AD3                 align 10h
.text:00403AE0
.text:00403AE0 loc_403AE0:                             ; CODE XREF: .text:00403AD1↑j
.text:00403AE0                 sub     esp, 0Ch
.text:00403AE3                 mov     [esp+4], ebx
.text:00403AE7                 mov     [esp+8], esi
.text:00403AEB                 call    _errno
.text:00403AF0                 mov     esi, [eax]
.text:00403AF2                 mov     dword ptr [esp], 24h ; '$'
.text:00403AF9                 call    sub_4043D0
.text:00403AFE                 mov     edx, [esp+10h]
.text:00403B02                 mov     ebx, eax
.text:00403B04                 test    edx, edx
.text:00403B06                 jz      short loc_403B51
.text:00403B08
.text:00403B08 loc_403B08:                             ; CODE XREF: .text:00403B56↓j
.text:00403B08                 mov     ecx, [edx]
.text:00403B0A                 mov     [ebx], ecx
.text:00403B0C                 mov     ecx, [edx+4]
.text:00403B0F                 mov     [ebx+4], ecx
.text:00403B12                 mov     ecx, [edx+8]
.text:00403B15                 mov     [ebx+8], ecx
.text:00403B18                 mov     ecx, [edx+0Ch]
.text:00403B1B                 mov     [ebx+0Ch], ecx
.text:00403B1E                 mov     ecx, [edx+10h]
.text:00403B21                 mov     [ebx+10h], ecx
.text:00403B24                 mov     ecx, [edx+14h]
.text:00403B27                 mov     [ebx+14h], ecx
.text:00403B2A                 mov     ecx, [edx+18h]
.text:00403B2D                 mov     [ebx+18h], ecx
.text:00403B30                 mov     ecx, [edx+1Ch]
.text:00403B33                 mov     [ebx+1Ch], ecx
.text:00403B36                 mov     ecx, [edx+20h]
.text:00403B39                 mov     [ebx+20h], ecx
.text:00403B3C                 call    _errno
.text:00403B41                 mov     [eax], esi
.text:00403B43                 mov     esi, [esp+8]
.text:00403B47                 mov     eax, ebx
.text:00403B49                 mov     ebx, [esp+4]
.text:00403B4D                 add     esp, 0Ch
.text:00403B50                 retn
.text:00403B51 ; ---------------------------------------------------------------------------
.text:00403B51
.text:00403B51 loc_403B51:                             ; CODE XREF: .text:00403B06↑j
.text:00403B51                 mov     edx, offset dword_406140
.text:00403B56                 jmp     short loc_403B08
.text:00403B56 ; ---------------------------------------------------------------------------
.text:00403B58                 align 10h
.text:00403B60                 mov     eax, [esp+4]
.text:00403B64                 test    eax, eax
.text:00403B66                 jz      short loc_403B70
.text:00403B68
.text:00403B68 loc_403B68:                             ; CODE XREF: .text:00403B75↓j
.text:00403B68                 mov     eax, [eax]
.text:00403B6A                 retn
.text:00403B6A ; ---------------------------------------------------------------------------
.text:00403B6B                 align 10h
.text:00403B70
.text:00403B70 loc_403B70:                             ; CODE XREF: .text:00403B66↑j
.text:00403B70                 mov     eax, offset dword_406140
.text:00403B75                 jmp     short loc_403B68
.text:00403B75 ; ---------------------------------------------------------------------------
.text:00403B77                 align 10h
.text:00403B80                 mov     edx, [esp+4]
.text:00403B84                 test    edx, edx
.text:00403B86                 jz      short loc_403B90
.text:00403B88
.text:00403B88 loc_403B88:                             ; CODE XREF: .text:00403B95↓j
.text:00403B88                 mov     ecx, [esp+8]
.text:00403B8C                 mov     [edx], ecx
.text:00403B8E                 retn
.text:00403B8E ; ---------------------------------------------------------------------------
.text:00403B8F                 align 10h
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: .text:00403B86↑j
.text:00403B90                 mov     edx, offset dword_406140
.text:00403B95                 jmp     short loc_403B88
.text:00403B95 ; ---------------------------------------------------------------------------
.text:00403B97                 align 10h
.text:00403BA0                 sub     esp, 8
.text:00403BA3                 mov     eax, [esp+0Ch]
.text:00403BA7                 movzx   ecx, byte ptr [esp+10h]
.text:00403BAC                 mov     [esp], ebx
.text:00403BAF                 mov     ebx, [esp+14h]
.text:00403BB3                 mov     [esp+4], esi
.text:00403BB7                 mov     dl, cl
.text:00403BB9                 shr     dl, 5
.text:00403BBC                 movzx   edx, dl
.text:00403BBF                 shl     edx, 2
.text:00403BC2                 test    eax, eax
.text:00403BC4                 lea     esi, [edx+eax+4]
.text:00403BC8                 jz      short loc_403BF0
.text:00403BCA
.text:00403BCA loc_403BCA:                             ; CODE XREF: .text:00403BF6↓j
.text:00403BCA                 mov     edx, [esi]
.text:00403BCC                 and     ecx, 1Fh
.text:00403BCF                 and     ebx, 1
.text:00403BD2                 mov     eax, edx
.text:00403BD4                 shr     eax, cl
.text:00403BD6                 and     eax, 1
.text:00403BD9                 xor     ebx, eax
.text:00403BDB                 shl     ebx, cl
.text:00403BDD                 xor     edx, ebx
.text:00403BDF                 mov     [esi], edx
.text:00403BE1                 mov     ebx, [esp]
.text:00403BE4                 mov     esi, [esp+4]
.text:00403BE8                 add     esp, 8
.text:00403BEB                 retn
.text:00403BEB ; ---------------------------------------------------------------------------
.text:00403BEC                 align 10h
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: .text:00403BC8↑j
.text:00403BF0                 lea     esi, dword_406144[edx]
.text:00403BF6                 jmp     short loc_403BCA
.text:00403BF6 ; ---------------------------------------------------------------------------
.text:00403BF8                 align 10h
.text:00403C00                 sub     esp, 2Ch
.text:00403C03                 mov     [esp+24h], ebx
.text:00403C07                 mov     ebx, [esp+40h]
.text:00403C0B                 mov     [esp+28h], esi
.text:00403C0F                 test    ebx, ebx
.text:00403C11                 jz      short loc_403C60
.text:00403C13
.text:00403C13 loc_403C13:                             ; CODE XREF: .text:00403C65↓j
.text:00403C13                 call    _errno
.text:00403C18                 mov     esi, [eax]
.text:00403C1A                 mov     [esp+14h], ebx
.text:00403C1E                 mov     edx, [ebx]
.text:00403C20                 mov     ecx, [esp+38h]
.text:00403C24                 mov     ebx, [esp+3Ch]
.text:00403C28                 mov     [esp+10h], edx
.text:00403C2C                 mov     edx, [esp+34h]
.text:00403C30                 mov     [esp+0Ch], ebx
.text:00403C34                 mov     [esp+8], ecx
.text:00403C38                 mov     [esp+4], edx
.text:00403C3C                 mov     edx, [esp+30h]
.text:00403C40                 mov     [esp], edx
.text:00403C43                 call    sub_403080
.text:00403C48                 mov     ebx, eax
.text:00403C4A                 call    _errno
.text:00403C4F                 mov     [eax], esi
.text:00403C51                 mov     esi, [esp+28h]
.text:00403C55                 mov     eax, ebx
.text:00403C57                 mov     ebx, [esp+24h]
.text:00403C5B                 add     esp, 2Ch
.text:00403C5E                 retn
.text:00403C5E ; ---------------------------------------------------------------------------
.text:00403C5F                 align 10h
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: .text:00403C11↑j
.text:00403C60                 mov     ebx, offset dword_406140
.text:00403C65                 jmp     short loc_403C13
.text:00403C65 ; ---------------------------------------------------------------------------
.text:00403C67                 align 10h
.text:00403C70                 push    ebp
.text:00403C71                 push    edi
.text:00403C72                 push    esi
.text:00403C73                 push    ebx
.text:00403C74                 sub     esp, 2Ch
.text:00403C77                 mov     ebp, [esp+48h]
.text:00403C7B                 call    _errno
.text:00403C80                 mov     edx, [eax]
.text:00403C82                 test    ebp, ebp
.text:00403C84                 mov     ebx, ebp
.text:00403C86                 mov     [esp+28h], edx
.text:00403C8A                 jz      loc_403D40
.text:00403C90
.text:00403C90 loc_403C90:                             ; CODE XREF: .text:00403D45↓j
.text:00403C90                 call    _errno
.text:00403C95                 mov     edi, [eax]
.text:00403C97                 mov     esi, ebp
.text:00403C99                 mov     [esp+14h], ebx
.text:00403C9D                 mov     ecx, [ebx]
.text:00403C9F                 mov     dword ptr [esp], 0
.text:00403CA6                 mov     edx, [esp+44h]
.text:00403CAA                 mov     dword ptr [esp+4], 0
.text:00403CB2                 mov     eax, [esp+40h]
.text:00403CB6                 mov     [esp+10h], ecx
.text:00403CBA                 mov     [esp+0Ch], edx
.text:00403CBE                 mov     [esp+8], eax
.text:00403CC2                 call    sub_403080
.text:00403CC7                 mov     ebx, eax
.text:00403CC9                 call    _errno
.text:00403CCE                 mov     [eax], edi
.text:00403CD0                 lea     edi, [ebx+1]
.text:00403CD3                 mov     [esp], edi
.text:00403CD6                 call    sub_4043D0
.text:00403CDB                 mov     [esp+24h], eax
.text:00403CDF                 test    ebp, ebp
.text:00403CE1                 jz      short loc_403D32
.text:00403CE3
.text:00403CE3 loc_403CE3:                             ; CODE XREF: .text:00403D37↓j
.text:00403CE3                 call    _errno
.text:00403CE8                 mov     ebp, [eax]
.text:00403CEA                 mov     [esp+14h], esi
.text:00403CEE                 mov     ecx, [esi]
.text:00403CF0                 mov     [esp+4], edi
.text:00403CF4                 mov     edx, [esp+44h]
.text:00403CF8                 mov     esi, [esp+24h]
.text:00403CFC                 mov     [esp+10h], ecx
.text:00403D00                 mov     eax, [esp+40h]
.text:00403D04                 mov     [esp+0Ch], edx
.text:00403D08                 mov     [esp], esi
.text:00403D0B                 mov     [esp+8], eax
.text:00403D0F                 call    sub_403080
.text:00403D14                 call    _errno
.text:00403D19                 mov     [eax], ebp
.text:00403D1B                 call    _errno
.text:00403D20                 mov     ebx, [esp+28h]
.text:00403D24                 mov     [eax], ebx
.text:00403D26                 mov     eax, [esp+24h]
.text:00403D2A                 add     esp, 2Ch
.text:00403D2D                 pop     ebx
.text:00403D2E                 pop     esi
.text:00403D2F                 pop     edi
.text:00403D30                 pop     ebp
.text:00403D31                 retn
.text:00403D32 ; ---------------------------------------------------------------------------
.text:00403D32
.text:00403D32 loc_403D32:                             ; CODE XREF: .text:00403CE1↑j
.text:00403D32                 mov     esi, offset dword_406140
.text:00403D37                 jmp     short loc_403CE3
.text:00403D37 ; ---------------------------------------------------------------------------
.text:00403D39                 align 10h
.text:00403D40
.text:00403D40 loc_403D40:                             ; CODE XREF: .text:00403C8A↑j
.text:00403D40                 mov     ebx, offset dword_406140
.text:00403D45                 jmp     loc_403C90
.text:00403D45 ; ---------------------------------------------------------------------------
.text:00403D4A                 align 10h
.text:00403D50                 sub     esp, 1Ch
.text:00403D53                 mov     edx, [esp+24h]
.text:00403D57                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:00403D5F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403D67                 mov     [esp+4], edx
.text:00403D6B                 mov     edx, [esp+20h]
.text:00403D6F                 mov     [esp], edx
.text:00403D72                 call    sub_4041C0
.text:00403D77                 add     esp, 1Ch
.text:00403D7A                 retn
.text:00403D7A ; ---------------------------------------------------------------------------
.text:00403D7B                 align 10h
.text:00403D80                 sub     esp, 1Ch
.text:00403D83                 mov     edx, [esp+20h]
.text:00403D87                 mov     dword ptr [esp+0Ch], offset dword_406140
.text:00403D8F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403D97                 mov     [esp+4], edx
.text:00403D9B                 mov     dword ptr [esp], 0
.text:00403DA2                 call    sub_4041C0
.text:00403DA7                 add     esp, 1Ch
.text:00403DAA                 retn
.text:00403DAA ; ---------------------------------------------------------------------------
.text:00403DAB                 align 10h
.text:00403DB0                 push    ebp
.text:00403DB1                 xor     eax, eax
.text:00403DB3                 mov     ecx, 8
.text:00403DB8                 push    edi
.text:00403DB9                 push    esi
.text:00403DBA                 push    ebx
.text:00403DBB                 sub     esp, 0ACh
.text:00403DC1                 mov     ebp, [esp+0C4h]
.text:00403DC8                 cld
.text:00403DC9                 lea     edi, [esp+14h]
.text:00403DCD                 mov     [esp+10h], ebp
.text:00403DD1                 rep stosd
.text:00403DD3                 mov     eax, [esp+30h]
.text:00403DD7                 mov     edi, [esp+10h]
.text:00403DDB                 mov     esi, [esp+14h]
.text:00403DDF                 mov     [esp+60h], eax
.text:00403DE3                 mov     ebp, [esp+18h]
.text:00403DE7                 mov     eax, [esp+10h]
.text:00403DEB                 mov     [esp+40h], edi
.text:00403DEF                 mov     ecx, [esp+28h]
.text:00403DF3                 mov     edi, [esp+1Ch]
.text:00403DF7                 mov     [esp+44h], esi
.text:00403DFB                 mov     edx, [esp+2Ch]
.text:00403DFF                 mov     esi, [esp+20h]
.text:00403E03                 mov     [esp+70h], eax
.text:00403E07                 mov     ebx, [esp+24h]
.text:00403E0B                 mov     eax, [esp+14h]
.text:00403E0F                 mov     [esp+48h], ebp
.text:00403E13                 mov     [esp+4Ch], edi
.text:00403E17                 mov     [esp+50h], esi
.text:00403E1B                 mov     [esp+54h], ebx
.text:00403E1F                 mov     [esp+58h], ecx
.text:00403E23                 mov     [esp+5Ch], edx
.text:00403E27                 mov     [esp+74h], eax
.text:00403E2B                 mov     [esp+78h], ebp
.text:00403E2F                 mov     [esp+7Ch], edi
.text:00403E33                 mov     [esp+80h], esi
.text:00403E3A                 mov     [esp+84h], ebx
.text:00403E41                 mov     ebx, [esp+30h]
.text:00403E45                 mov     [esp+8Ch], edx
.text:00403E4C                 mov     edx, [esp+0C8h]
.text:00403E53                 mov     [esp+88h], ecx
.text:00403E5A                 lea     ecx, [esp+70h]
.text:00403E5E                 mov     [esp+4], edx
.text:00403E62                 mov     edx, [esp+0C0h]
.text:00403E69                 mov     [esp+90h], ebx
.text:00403E70                 mov     [esp+0Ch], ecx
.text:00403E74                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403E7C                 mov     [esp], edx
.text:00403E7F                 call    sub_4041C0
.text:00403E84                 add     esp, 0ACh
.text:00403E8A                 pop     ebx
.text:00403E8B                 pop     esi
.text:00403E8C                 pop     edi
.text:00403E8D                 pop     ebp
.text:00403E8E                 retn
.text:00403E8E ; ---------------------------------------------------------------------------
.text:00403E8F                 align 10h
.text:00403E90                 push    ebp
.text:00403E91                 xor     eax, eax
.text:00403E93                 mov     ecx, 8
.text:00403E98                 push    edi
.text:00403E99                 push    esi
.text:00403E9A                 push    ebx
.text:00403E9B                 sub     esp, 0ACh
.text:00403EA1                 mov     edx, [esp+0C4h]
.text:00403EA8                 cld
.text:00403EA9                 lea     edi, [esp+14h]
.text:00403EAD                 mov     [esp+10h], edx
.text:00403EB1                 rep stosd
.text:00403EB3                 mov     eax, [esp+30h]
.text:00403EB7                 mov     ebp, [esp+10h]
.text:00403EBB                 mov     edi, [esp+14h]
.text:00403EBF                 mov     [esp+60h], eax
.text:00403EC3                 mov     esi, [esp+20h]
.text:00403EC7                 mov     eax, [esp+10h]
.text:00403ECB                 mov     [esp+40h], ebp
.text:00403ECF                 mov     ecx, [esp+28h]
.text:00403ED3                 mov     ebp, [esp+18h]
.text:00403ED7                 mov     [esp+44h], edi
.text:00403EDB                 mov     edx, [esp+2Ch]
.text:00403EDF                 mov     edi, [esp+1Ch]
.text:00403EE3                 mov     [esp+70h], eax
.text:00403EE7                 mov     ebx, [esp+24h]
.text:00403EEB                 mov     eax, [esp+14h]
.text:00403EEF                 mov     [esp+48h], ebp
.text:00403EF3                 mov     [esp+4Ch], edi
.text:00403EF7                 mov     [esp+50h], esi
.text:00403EFB                 mov     [esp+54h], ebx
.text:00403EFF                 mov     [esp+58h], ecx
.text:00403F03                 mov     [esp+5Ch], edx
.text:00403F07                 mov     [esp+74h], eax
.text:00403F0B                 mov     [esp+78h], ebp
.text:00403F0F                 mov     [esp+7Ch], edi
.text:00403F13                 mov     [esp+80h], esi
.text:00403F1A                 mov     [esp+84h], ebx
.text:00403F21                 mov     esi, [esp+30h]
.text:00403F25                 lea     ebx, [esp+70h]
.text:00403F29                 mov     [esp+8Ch], edx
.text:00403F30                 mov     edx, [esp+0C8h]
.text:00403F37                 mov     [esp+88h], ecx
.text:00403F3E                 mov     ecx, [esp+0CCh]
.text:00403F45                 mov     [esp+4], edx
.text:00403F49                 mov     edx, [esp+0C0h]
.text:00403F50                 mov     [esp+90h], esi
.text:00403F57                 mov     [esp+0Ch], ebx
.text:00403F5B                 mov     [esp+8], ecx
.text:00403F5F                 mov     [esp], edx
.text:00403F62                 call    sub_4041C0
.text:00403F67                 add     esp, 0ACh
.text:00403F6D                 pop     ebx
.text:00403F6E                 pop     esi
.text:00403F6F                 pop     edi
.text:00403F70                 pop     ebp
.text:00403F71                 retn
.text:00403F71 ; ---------------------------------------------------------------------------
.text:00403F72                 align 10h
.text:00403F80                 push    ebp
.text:00403F81                 xor     eax, eax
.text:00403F83                 mov     ecx, 8
.text:00403F88                 push    edi
.text:00403F89                 push    esi
.text:00403F8A                 push    ebx
.text:00403F8B                 sub     esp, 0ACh
.text:00403F91                 mov     edi, [esp+0C0h]
.text:00403F98                 cld
.text:00403F99                 mov     [esp+10h], edi
.text:00403F9D                 lea     edi, [esp+14h]
.text:00403FA1                 rep stosd
.text:00403FA3                 mov     eax, [esp+30h]
.text:00403FA7                 mov     esi, [esp+10h]
.text:00403FAB                 mov     ebx, [esp+14h]
.text:00403FAF                 mov     [esp+60h], eax
.text:00403FB3                 mov     ebp, [esp+18h]
.text:00403FB7                 mov     eax, [esp+10h]
.text:00403FBB                 mov     [esp+40h], esi
.text:00403FBF                 mov     edi, [esp+1Ch]
.text:00403FC3                 mov     esi, [esp+20h]
.text:00403FC7                 mov     [esp+44h], ebx
.text:00403FCB                 mov     ecx, [esp+28h]
.text:00403FCF                 mov     edx, [esp+2Ch]
.text:00403FD3                 mov     [esp+70h], eax
.text:00403FD7                 mov     ebx, [esp+24h]
.text:00403FDB                 mov     eax, [esp+14h]
.text:00403FDF                 mov     [esp+48h], ebp
.text:00403FE3                 mov     [esp+4Ch], edi
.text:00403FE7                 mov     [esp+50h], esi
.text:00403FEB                 mov     [esp+54h], ebx
.text:00403FEF                 mov     [esp+58h], ecx
.text:00403FF3                 mov     [esp+5Ch], edx
.text:00403FF7                 mov     [esp+74h], eax
.text:00403FFB                 mov     [esp+78h], ebp
.text:00403FFF                 mov     [esp+7Ch], edi
.text:00404003                 mov     [esp+80h], esi
.text:0040400A                 mov     [esp+84h], ebx
.text:00404011                 mov     [esp+8Ch], edx
.text:00404018                 lea     edx, [esp+70h]
.text:0040401C                 mov     [esp+88h], ecx
.text:00404023                 mov     ecx, [esp+30h]
.text:00404027                 mov     [esp+0Ch], edx
.text:0040402B                 mov     edx, [esp+0C4h]
.text:00404032                 mov     [esp+90h], ecx
.text:00404039                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404041                 mov     [esp+4], edx
.text:00404045                 mov     dword ptr [esp], 0
.text:0040404C                 call    sub_4041C0
.text:00404051                 add     esp, 0ACh
.text:00404057                 pop     ebx
.text:00404058                 pop     esi
.text:00404059                 pop     edi
.text:0040405A                 pop     ebp
.text:0040405B                 retn
.text:0040405B ; ---------------------------------------------------------------------------
.text:0040405C                 align 10h
.text:00404060                 push    edi
.text:00404061                 push    esi
.text:00404062                 push    ebx
.text:00404063                 sub     esp, 40h
.text:00404066                 mov     edx, ds:dword_40614C
.text:0040406C                 mov     ebx, ds:dword_406140
.text:00404072                 mov     esi, ds:dword_406148
.text:00404078                 mov     edi, ds:dword_406144
.text:0040407E                 mov     [esp+1Ch], edx
.text:00404082                 mov     ecx, ds:dword_406150
.text:00404088                 mov     edx, ds:dword_406160
.text:0040408E                 mov     [esp+10h], ebx
.text:00404092                 mov     ebx, ds:dword_406154
.text:00404098                 mov     [esp+30h], edx
.text:0040409C                 movzx   edx, byte ptr [esp+54h]
.text:004040A1                 mov     [esp+18h], esi
.text:004040A5                 mov     esi, ds:dword_40615C
.text:004040AB                 mov     [esp+14h], edi
.text:004040AF                 mov     edi, ds:dword_406158
.text:004040B5                 mov     [esp+20h], ecx
.text:004040B9                 mov     cl, dl
.text:004040BB                 shr     cl, 5
.text:004040BE                 mov     [esp+24h], ebx
.text:004040C2                 movzx   ebx, cl
.text:004040C5                 mov     [esp+2Ch], esi
.text:004040C9                 lea     esi, [esp+10h]
.text:004040CD                 mov     [esp+28h], edi
.text:004040D1                 lea     edi, [esi+ebx*4]
.text:004040D4                 mov     ebx, edx
.text:004040D6                 mov     edx, [edi+4]
.text:004040D9                 and     ebx, 1Fh
.text:004040DC                 mov     cl, bl
.text:004040DE                 mov     eax, edx
.text:004040E0                 shr     eax, cl
.text:004040E2                 and     eax, 1
.text:004040E5                 xor     eax, 1
.text:004040E8                 shl     eax, cl
.text:004040EA                 xor     edx, eax
.text:004040EC                 mov     [edi+4], edx
.text:004040EF                 mov     edx, [esp+50h]
.text:004040F3                 mov     [esp+0Ch], esi
.text:004040F7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004040FF                 mov     [esp+4], edx
.text:00404103                 mov     dword ptr [esp], 0
.text:0040410A                 call    sub_4041C0
.text:0040410F                 add     esp, 40h
.text:00404112                 pop     ebx
.text:00404113                 pop     esi
.text:00404114                 pop     edi
.text:00404115                 retn
.text:00404115 ; ---------------------------------------------------------------------------
.text:00404116                 align 10h
.text:00404120
.text:00404120 ; =============== S U B R O U T I N E =======================================
.text:00404120
.text:00404120
.text:00404120 ; int __cdecl sub_404120(char *)
.text:00404120 sub_404120      proc near               ; CODE XREF: sub_402A10+64↑p
.text:00404120
.text:00404120 var_4C          = dword ptr -4Ch
.text:00404120 var_48          = dword ptr -48h
.text:00404120 var_44          = dword ptr -44h
.text:00404120 var_40          = dword ptr -40h
.text:00404120 var_3C          = dword ptr -3Ch
.text:00404120 var_38          = dword ptr -38h
.text:00404120 var_34          = dword ptr -34h
.text:00404120 var_30          = dword ptr -30h
.text:00404120 var_2C          = dword ptr -2Ch
.text:00404120 var_28          = dword ptr -28h
.text:00404120 var_24          = dword ptr -24h
.text:00404120 var_20          = dword ptr -20h
.text:00404120 var_1C          = dword ptr -1Ch
.text:00404120 arg_0           = dword ptr  4
.text:00404120
.text:00404120                 sub     esp, 4Ch
.text:00404123                 mov     ecx, ds:dword_406140
.text:00404129                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404131                 mov     edx, ds:dword_406144
.text:00404137                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040413E                 mov     [esp+4Ch+var_3C], ecx
.text:00404142                 mov     ecx, ds:dword_40614C
.text:00404148                 mov     [esp+4Ch+var_38], edx
.text:0040414C                 mov     edx, ds:dword_406148
.text:00404152                 mov     [esp+4Ch+var_30], ecx
.text:00404156                 mov     ecx, ds:dword_406150
.text:0040415C                 mov     eax, edx
.text:0040415E                 shr     eax, 1Ah
.text:00404161                 and     eax, 1
.text:00404164                 xor     eax, 1
.text:00404167                 mov     [esp+4Ch+var_2C], ecx
.text:0040416B                 shl     eax, 1Ah
.text:0040416E                 mov     ecx, ds:dword_406154
.text:00404174                 xor     edx, eax
.text:00404176                 mov     [esp+4Ch+var_34], edx
.text:0040417A                 mov     edx, [esp+4Ch+arg_0]
.text:0040417E                 mov     [esp+4Ch+var_28], ecx
.text:00404182                 mov     ecx, ds:dword_406158
.text:00404188                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040418C                 mov     [esp+4Ch+var_24], ecx
.text:00404190                 mov     ecx, ds:dword_40615C
.text:00404196                 mov     [esp+4Ch+var_20], ecx
.text:0040419A                 mov     ecx, ds:dword_406160
.text:004041A0                 mov     [esp+4Ch+var_1C], ecx
.text:004041A4                 lea     ecx, [esp+4Ch+var_3C]
.text:004041A8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004041AC                 call    sub_4041C0
.text:004041B1                 add     esp, 4Ch
.text:004041B4                 retn
.text:004041B4 sub_404120      endp
.text:004041B4
.text:004041B4 ; ---------------------------------------------------------------------------
.text:004041B5                 align 10h
.text:004041C0
.text:004041C0 ; =============== S U B R O U T I N E =======================================
.text:004041C0
.text:004041C0
.text:004041C0 ; int __cdecl sub_4041C0(int, char *, int, int)
.text:004041C0 sub_4041C0      proc near               ; CODE XREF: .text:00403D72↑p
.text:004041C0                                         ; .text:00403DA2↑p ...
.text:004041C0
.text:004041C0 Block           = dword ptr -2Ch
.text:004041C0 var_28          = dword ptr -28h
.text:004041C0 Str             = dword ptr -24h
.text:004041C0 var_20          = dword ptr -20h
.text:004041C0 var_1C          = dword ptr -1Ch
.text:004041C0 var_18          = dword ptr -18h
.text:004041C0 var_14          = dword ptr -14h
.text:004041C0 arg_0           = dword ptr  4
.text:004041C0 arg_4           = dword ptr  8
.text:004041C0 arg_8           = dword ptr  0Ch
.text:004041C0 arg_C           = dword ptr  10h
.text:004041C0
.text:004041C0                 push    ebp
.text:004041C1                 push    edi
.text:004041C2                 push    esi
.text:004041C3                 push    ebx
.text:004041C4                 sub     esp, 1Ch
.text:004041C7                 call    _errno
.text:004041CC                 mov     edx, [eax]
.text:004041CE                 mov     eax, [esp+2Ch+arg_0]
.text:004041D2                 mov     [esp+2Ch+var_14], edx
.text:004041D6                 test    eax, eax
.text:004041D8                 js      loc_40437A
.text:004041DE                 mov     eax, [esp+2Ch+arg_0]
.text:004041E2                 cmp     dword_405040, eax
.text:004041E8                 ja      short loc_404260
.text:004041EA                 mov     esi, eax
.text:004041EC                 inc     esi
.text:004041ED                 cmp     esi, 1FFFFFFFh
.text:004041F3                 ja      loc_40437F
.text:004041F9                 mov     ebx, off_40504C
.text:004041FF                 cmp     ebx, offset dword_405044
.text:00404205                 jz      loc_404351
.text:0040420B
.text:0040420B loc_40420B:                             ; CODE XREF: sub_4041C0+1B5↓j
.text:0040420B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040420E                 lea     ecx, ds:0[esi*8]
.text:00404215                 mov     ebp, esi
.text:00404217                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040421B                 call    sub_404460
.text:00404220                 mov     off_40504C, eax
.text:00404225                 mov     ebx, dword_405040
.text:0040422B                 sub     ebp, ebx
.text:0040422D                 lea     edi, [eax+ebx*8]
.text:00404230                 lea     eax, ds:0[ebp*8]
.text:00404237                 cmp     eax, 7
.text:0040423A                 jbe     short loc_404250
.text:0040423C                 test    edi, 4
.text:00404242                 jz      short loc_404250
.text:00404244                 mov     dword ptr [edi], 0
.text:0040424A                 sub     eax, 4
.text:0040424D                 add     edi, 4
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_4041C0+7A↑j
.text:00404250                                         ; sub_4041C0+82↑j
.text:00404250                 cld
.text:00404251                 mov     ecx, eax
.text:00404253                 shr     ecx, 2
.text:00404256                 xor     eax, eax
.text:00404258                 rep stosd
.text:0040425A                 mov     dword_405040, esi
.text:00404260
.text:00404260 loc_404260:                             ; CODE XREF: sub_4041C0+28↑j
.text:00404260                 mov     esi, off_40504C
.text:00404266                 mov     eax, [esp+2Ch+arg_0]
.text:0040426A                 mov     ebp, [esi+eax*8]
.text:0040426D                 mov     edi, [esi+eax*8+4]
.text:00404271                 mov     esi, [esp+2Ch+arg_C]
.text:00404275                 test    esi, esi
.text:00404277                 jz      loc_404347
.text:0040427D
.text:0040427D loc_40427D:                             ; CODE XREF: sub_4041C0+18C↓j
.text:0040427D                 call    _errno
.text:00404282                 mov     ebx, [eax]
.text:00404284                 mov     [esp+2Ch+var_18], esi ; int
.text:00404288                 mov     ecx, [esi]
.text:0040428A                 mov     [esp+2Ch+Block], edi ; int
.text:0040428D                 mov     edx, [esp+2Ch+arg_8]
.text:00404291                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404295                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404299                 mov     ecx, [esp+2Ch+arg_4]
.text:0040429D                 mov     [esp+2Ch+var_20], edx ; int
.text:004042A1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004042A5                 call    sub_403080
.text:004042AA                 mov     esi, eax
.text:004042AC                 call    _errno
.text:004042B1                 mov     [eax], ebx
.text:004042B3                 cmp     ebp, esi
.text:004042B5                 ja      short loc_40432B
.text:004042B7                 lea     ebp, [esi+1]
.text:004042BA                 mov     ebx, off_40504C
.text:004042C0                 cmp     edi, offset unk_406040
.text:004042C6                 mov     esi, [esp+2Ch+arg_0]
.text:004042CA                 mov     [ebx+esi*8], ebp
.text:004042CD                 jz      short loc_4042DD
.text:004042CF                 mov     [esp+2Ch+Block], edi ; Block
.text:004042D2                 call    free
.text:004042D7                 mov     ebx, off_40504C
.text:004042DD
.text:004042DD loc_4042DD:                             ; CODE XREF: sub_4041C0+10D↑j
.text:004042DD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004042E0                 call    sub_4043D0
.text:004042E5                 mov     esi, [esp+2Ch+arg_C]
.text:004042E9                 mov     edi, eax
.text:004042EB                 mov     eax, [esp+2Ch+arg_0]
.text:004042EF                 test    esi, esi
.text:004042F1                 mov     [ebx+eax*8+4], edi
.text:004042F5                 jz      short loc_404340
.text:004042F7
.text:004042F7 loc_4042F7:                             ; CODE XREF: sub_4041C0+185↓j
.text:004042F7                 call    _errno
.text:004042FC                 mov     ebx, [eax]
.text:004042FE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404302                 mov     ecx, [esi]
.text:00404304                 mov     [esp+2Ch+Block], edi ; int
.text:00404307                 mov     edx, [esp+2Ch+arg_8]
.text:0040430B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040430F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404313                 mov     ecx, [esp+2Ch+arg_4]
.text:00404317                 mov     [esp+2Ch+var_20], edx ; int
.text:0040431B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040431F                 call    sub_403080
.text:00404324                 call    _errno
.text:00404329                 mov     [eax], ebx
.text:0040432B
.text:0040432B loc_40432B:                             ; CODE XREF: sub_4041C0+F5↑j
.text:0040432B                 call    _errno
.text:00404330                 mov     ebp, [esp+2Ch+var_14]
.text:00404334                 mov     [eax], ebp
.text:00404336                 add     esp, 1Ch
.text:00404339                 mov     eax, edi
.text:0040433B                 pop     ebx
.text:0040433C                 pop     esi
.text:0040433D                 pop     edi
.text:0040433E                 pop     ebp
.text:0040433F                 retn
.text:00404340 ; ---------------------------------------------------------------------------
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_4041C0+135↑j
.text:00404340                 mov     esi, offset dword_406140
.text:00404345                 jmp     short loc_4042F7
.text:00404347 ; ---------------------------------------------------------------------------
.text:00404347
.text:00404347 loc_404347:                             ; CODE XREF: sub_4041C0+B7↑j
.text:00404347                 mov     esi, offset dword_406140
.text:0040434C                 jmp     loc_40427D
.text:00404351 ; ---------------------------------------------------------------------------
.text:00404351
.text:00404351 loc_404351:                             ; CODE XREF: sub_4041C0+45↑j
.text:00404351                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404358                 call    sub_4043D0
.text:0040435D                 mov     off_40504C, eax
.text:00404362                 mov     edi, dword_405044
.text:00404368                 mov     ebx, eax
.text:0040436A                 mov     ecx, off_405048
.text:00404370                 mov     [eax], edi
.text:00404372                 mov     [eax+4], ecx
.text:00404375                 jmp     loc_40420B
.text:0040437A ; ---------------------------------------------------------------------------
.text:0040437A
.text:0040437A loc_40437A:                             ; CODE XREF: sub_4041C0+18↑j
.text:0040437A                 call    abort
.text:0040437F ; ---------------------------------------------------------------------------
.text:0040437F
.text:0040437F loc_40437F:                             ; CODE XREF: sub_4041C0+33↑j
.text:0040437F                 call    sub_404680
.text:0040437F sub_4041C0      endp
.text:0040437F
.text:0040437F ; ---------------------------------------------------------------------------
.text:00404384                 align 10h
.text:00404390
.text:00404390 ; =============== S U B R O U T I N E =======================================
.text:00404390
.text:00404390
.text:00404390 sub_404390      proc near
.text:00404390
.text:00404390 Size            = dword ptr -0Ch
.text:00404390 var_4           = dword ptr -4
.text:00404390 arg_0           = dword ptr  4
.text:00404390 arg_4           = dword ptr  8
.text:00404390
.text:00404390                 sub     esp, 0Ch
.text:00404393                 xor     edx, edx
.text:00404395                 mov     ecx, [esp+0Ch+arg_4]
.text:00404399                 mov     [esp+0Ch+var_4], ebx
.text:0040439D                 mov     eax, 0FFFFFFFFh
.text:004043A2                 mov     ebx, [esp+0Ch+arg_0]
.text:004043A6                 div     ecx
.text:004043A8                 cmp     eax, ebx
.text:004043AA                 jb      short loc_4043C9
.text:004043AC                 mov     edx, ebx
.text:004043AE                 imul    edx, ecx
.text:004043B1                 mov     [esp+0Ch+Size], edx ; Size
.text:004043B4                 call    malloc
.text:004043B9                 test    eax, eax
.text:004043BB                 jz      short loc_4043C5
.text:004043BD
.text:004043BD loc_4043BD:                             ; CODE XREF: sub_404390+37↓j
.text:004043BD                 mov     ebx, [esp+0Ch+var_4]
.text:004043C1                 add     esp, 0Ch
.text:004043C4                 retn
.text:004043C5 ; ---------------------------------------------------------------------------
.text:004043C5
.text:004043C5 loc_4043C5:                             ; CODE XREF: sub_404390+2B↑j
.text:004043C5                 test    ebx, ebx
.text:004043C7                 jz      short loc_4043BD
.text:004043C9
.text:004043C9 loc_4043C9:                             ; CODE XREF: sub_404390+1A↑j
.text:004043C9                 call    sub_404680
.text:004043C9 sub_404390      endp
.text:004043C9
.text:004043C9 ; ---------------------------------------------------------------------------
.text:004043CE                 align 10h
.text:004043D0
.text:004043D0 ; =============== S U B R O U T I N E =======================================
.text:004043D0
.text:004043D0
.text:004043D0 ; int __cdecl sub_4043D0(size_t)
.text:004043D0 sub_4043D0      proc near               ; CODE XREF: .text:00403AF9↑p
.text:004043D0                                         ; .text:00403CD6↑p ...
.text:004043D0
.text:004043D0 Size            = dword ptr -0Ch
.text:004043D0 var_4           = dword ptr -4
.text:004043D0 arg_0           = dword ptr  4
.text:004043D0
.text:004043D0                 sub     esp, 0Ch
.text:004043D3                 mov     [esp+0Ch+var_4], ebx
.text:004043D7                 mov     ebx, [esp+0Ch+arg_0]
.text:004043DB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004043DE                 call    malloc
.text:004043E3                 test    eax, eax
.text:004043E5                 jz      short loc_4043F0
.text:004043E7
.text:004043E7 loc_4043E7:                             ; CODE XREF: sub_4043D0+22↓j
.text:004043E7                 mov     ebx, [esp+0Ch+var_4]
.text:004043EB                 add     esp, 0Ch
.text:004043EE                 retn
.text:004043EE ; ---------------------------------------------------------------------------
.text:004043EF                 align 10h
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: sub_4043D0+15↑j
.text:004043F0                 test    ebx, ebx
.text:004043F2                 jz      short loc_4043E7
.text:004043F4                 call    sub_404680
.text:004043F4 sub_4043D0      endp
.text:004043F4
.text:004043F4 ; ---------------------------------------------------------------------------
.text:004043F9                 align 10h
.text:00404400                 sub     esp, 1Ch
.text:00404403                 xor     edx, edx
.text:00404405                 mov     eax, 0FFFFFFFFh
.text:0040440A                 mov     [esp+14h], ebx
.text:0040440E                 mov     ecx, [esp+20h]
.text:00404412                 mov     ebx, [esp+28h]
.text:00404416                 mov     [esp+18h], esi
.text:0040441A                 mov     esi, [esp+24h]
.text:0040441E                 div     ebx
.text:00404420                 cmp     eax, esi
.text:00404422                 jb      short loc_404454
.text:00404424                 mov     [esp], ecx
.text:00404427                 mov     edx, esi
.text:00404429                 imul    edx, ebx
.text:0040442C                 mov     [esp+4], edx
.text:00404430                 call    realloc
.text:00404435                 test    eax, eax
.text:00404437                 mov     ecx, eax
.text:00404439                 jz      short loc_404450
.text:0040443B
.text:0040443B loc_40443B:                             ; CODE XREF: .text:00404452↓j
.text:0040443B                 mov     ebx, [esp+14h]
.text:0040443F                 mov     eax, ecx
.text:00404441                 mov     esi, [esp+18h]
.text:00404445                 add     esp, 1Ch
.text:00404448                 retn
.text:00404448 ; ---------------------------------------------------------------------------
.text:00404449                 align 10h
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: .text:00404439↑j
.text:00404450                 test    esi, esi
.text:00404452                 jz      short loc_40443B
.text:00404454
.text:00404454 loc_404454:                             ; CODE XREF: .text:00404422↑j
.text:00404454                 call    sub_404680
.text:00404454 ; ---------------------------------------------------------------------------
.text:00404459                 align 10h
.text:00404460
.text:00404460 ; =============== S U B R O U T I N E =======================================
.text:00404460
.text:00404460
.text:00404460 ; int __cdecl sub_404460(void *, size_t)
.text:00404460 sub_404460      proc near               ; CODE XREF: sub_4041C0+5B↑p
.text:00404460
.text:00404460 Block           = dword ptr -0Ch
.text:00404460 Size            = dword ptr -8
.text:00404460 var_4           = dword ptr -4
.text:00404460 arg_0           = dword ptr  4
.text:00404460 arg_4           = dword ptr  8
.text:00404460
.text:00404460                 sub     esp, 0Ch
.text:00404463                 mov     edx, [esp+0Ch+arg_0]
.text:00404467                 mov     [esp+0Ch+var_4], ebx
.text:0040446B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040446F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404472                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404476                 call    realloc
.text:0040447B                 test    eax, eax
.text:0040447D                 jz      short loc_404487
.text:0040447F
.text:0040447F loc_40447F:                             ; CODE XREF: sub_404460+29↓j
.text:0040447F                 mov     ebx, [esp+0Ch+var_4]
.text:00404483                 add     esp, 0Ch
.text:00404486                 retn
.text:00404487 ; ---------------------------------------------------------------------------
.text:00404487
.text:00404487 loc_404487:                             ; CODE XREF: sub_404460+1D↑j
.text:00404487                 test    ebx, ebx
.text:00404489                 jz      short loc_40447F
.text:0040448B                 call    sub_404680
.text:0040448B sub_404460      endp
.text:0040448B
.text:00404490 ; ---------------------------------------------------------------------------
.text:00404490                 jmp     sub_4045E0
.text:00404490 ; ---------------------------------------------------------------------------
.text:00404495                 align 10h
.text:004044A0                 sub     esp, 0Ch
.text:004044A3                 mov     edx, [esp+14h]
.text:004044A7                 mov     dword ptr [esp+8], 1
.text:004044AF                 mov     [esp+4], edx
.text:004044B3                 mov     edx, [esp+10h]
.text:004044B7                 mov     [esp], edx
.text:004044BA                 call    sub_4045E0
.text:004044BF                 add     esp, 0Ch
.text:004044C2                 retn
.text:004044C2 ; ---------------------------------------------------------------------------
.text:004044C3                 align 10h
.text:004044D0                 sub     esp, 1Ch
.text:004044D3                 mov     [esp+18h], ebx
.text:004044D7                 mov     ebx, [esp+20h]
.text:004044DB                 mov     [esp], ebx
.text:004044DE                 call    malloc
.text:004044E3                 test    eax, eax
.text:004044E5                 jz      short loc_404503
.text:004044E7
.text:004044E7 loc_4044E7:                             ; CODE XREF: .text:00404505↓j
.text:004044E7                 mov     [esp+8], ebx
.text:004044EB                 mov     dword ptr [esp+4], 0
.text:004044F3                 mov     [esp], eax
.text:004044F6                 call    memset
.text:004044FB                 mov     ebx, [esp+18h]
.text:004044FF                 add     esp, 1Ch
.text:00404502                 retn
.text:00404503 ; ---------------------------------------------------------------------------
.text:00404503
.text:00404503 loc_404503:                             ; CODE XREF: .text:004044E5↑j
.text:00404503                 test    ebx, ebx
.text:00404505                 jz      short loc_4044E7
.text:00404507                 call    sub_404680
.text:00404507 ; ---------------------------------------------------------------------------
.text:0040450C                 align 10h
.text:00404510                 sub     esp, 0Ch
.text:00404513                 xor     edx, edx
.text:00404515                 mov     ecx, [esp+14h]
.text:00404519                 mov     [esp+8], ebx
.text:0040451D                 mov     eax, 0FFFFFFFFh
.text:00404522                 mov     ebx, [esp+10h]
.text:00404526                 div     ecx
.text:00404528                 cmp     eax, ebx
.text:0040452A                 jb      short loc_404548
.text:0040452C                 mov     [esp+4], ecx
.text:00404530                 mov     [esp], ebx
.text:00404533                 call    calloc
.text:00404538                 test    eax, eax
.text:0040453A                 jz      short loc_404544
.text:0040453C
.text:0040453C loc_40453C:                             ; CODE XREF: .text:00404546↓j
.text:0040453C                 mov     ebx, [esp+8]
.text:00404540                 add     esp, 0Ch
.text:00404543                 retn
.text:00404544 ; ---------------------------------------------------------------------------
.text:00404544
.text:00404544 loc_404544:                             ; CODE XREF: .text:0040453A↑j
.text:00404544                 test    ebx, ebx
.text:00404546                 jz      short loc_40453C
.text:00404548
.text:00404548 loc_404548:                             ; CODE XREF: .text:0040452A↑j
.text:00404548                 call    sub_404680
.text:00404548 ; ---------------------------------------------------------------------------
.text:0040454D                 align 10h
.text:00404550                 sub     esp, 1Ch
.text:00404553                 mov     [esp+18h], ebx
.text:00404557                 mov     ebx, [esp+24h]
.text:0040455B                 mov     [esp], ebx
.text:0040455E                 call    malloc
.text:00404563                 test    eax, eax
.text:00404565                 mov     edx, eax
.text:00404567                 jz      short loc_404585
.text:00404569
.text:00404569 loc_404569:                             ; CODE XREF: .text:00404587↓j
.text:00404569                 mov     [esp+8], ebx
.text:0040456D                 mov     ecx, [esp+20h]
.text:00404571                 mov     [esp], edx
.text:00404574                 mov     [esp+4], ecx
.text:00404578                 call    memcpy
.text:0040457D                 mov     ebx, [esp+18h]
.text:00404581                 add     esp, 1Ch
.text:00404584                 retn
.text:00404585 ; ---------------------------------------------------------------------------
.text:00404585
.text:00404585 loc_404585:                             ; CODE XREF: .text:00404567↑j
.text:00404585                 test    ebx, ebx
.text:00404587                 jz      short loc_404569
.text:00404589                 call    sub_404680
.text:00404589 ; ---------------------------------------------------------------------------
.text:0040458E                 align 10h
.text:00404590                 sub     esp, 1Ch
.text:00404593                 mov     [esp+18h], esi
.text:00404597                 mov     esi, [esp+20h]
.text:0040459B                 mov     [esp+14h], ebx
.text:0040459F                 mov     [esp], esi
.text:004045A2                 call    strlen
.text:004045A7                 lea     ebx, [eax+1]
.text:004045AA                 mov     [esp], ebx
.text:004045AD                 call    malloc
.text:004045B2                 test    eax, eax
.text:004045B4                 jz      short loc_4045D2
.text:004045B6
.text:004045B6 loc_4045B6:                             ; CODE XREF: .text:004045D4↓j
.text:004045B6                 mov     [esp+8], ebx
.text:004045BA                 mov     [esp+4], esi
.text:004045BE                 mov     [esp], eax
.text:004045C1                 call    memcpy
.text:004045C6                 mov     ebx, [esp+14h]
.text:004045CA                 mov     esi, [esp+18h]
.text:004045CE                 add     esp, 1Ch
.text:004045D1                 retn
.text:004045D2 ; ---------------------------------------------------------------------------
.text:004045D2
.text:004045D2 loc_4045D2:                             ; CODE XREF: .text:004045B4↑j
.text:004045D2                 test    ebx, ebx
.text:004045D4                 jz      short loc_4045B6
.text:004045D6                 call    sub_404680
.text:004045D6 ; ---------------------------------------------------------------------------
.text:004045DB                 align 10h
.text:004045E0
.text:004045E0 ; =============== S U B R O U T I N E =======================================
.text:004045E0
.text:004045E0
.text:004045E0 ; int __cdecl sub_4045E0(void *, int, int)
.text:004045E0 sub_4045E0      proc near               ; CODE XREF: .text:00404490↑j
.text:004045E0                                         ; .text:004044BA↑p
.text:004045E0
.text:004045E0 Block           = dword ptr -1Ch
.text:004045E0 Size            = dword ptr -18h
.text:004045E0 var_C           = dword ptr -0Ch
.text:004045E0 var_8           = dword ptr -8
.text:004045E0 var_4           = dword ptr -4
.text:004045E0 arg_0           = dword ptr  4
.text:004045E0 arg_4           = dword ptr  8
.text:004045E0 arg_8           = dword ptr  0Ch
.text:004045E0
.text:004045E0                 sub     esp, 1Ch
.text:004045E3                 mov     [esp+1Ch+var_8], esi
.text:004045E7                 mov     esi, [esp+1Ch+arg_0]
.text:004045EB                 mov     [esp+1Ch+var_4], edi
.text:004045EF                 mov     edi, [esp+1Ch+arg_4]
.text:004045F3                 test    esi, esi
.text:004045F5                 mov     [esp+1Ch+var_C], ebx
.text:004045F9                 mov     ecx, [edi]
.text:004045FB                 mov     ebx, [esp+1Ch+arg_8]
.text:004045FF                 jz      short loc_404640
.text:00404601                 xor     edx, edx
.text:00404603                 mov     eax, 7FFFFFFFh
.text:00404608                 div     ebx
.text:0040460A                 cmp     eax, ecx
.text:0040460C                 jb      short loc_404639
.text:0040460E                 add     ecx, ecx
.text:00404610
.text:00404610 loc_404610:                             ; CODE XREF: sub_4045E0+62↓j
.text:00404610                                         ; sub_4045E0+71↓j ...
.text:00404610                 mov     [edi], ecx
.text:00404612                 imul    ebx, ecx
.text:00404615                 mov     [esp+1Ch+Block], esi ; Block
.text:00404618                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040461C                 call    realloc
.text:00404621                 test    eax, eax
.text:00404623                 jz      short loc_404635
.text:00404625
.text:00404625 loc_404625:                             ; CODE XREF: sub_4045E0+57↓j
.text:00404625                 mov     ebx, [esp+1Ch+var_C]
.text:00404629                 mov     esi, [esp+1Ch+var_8]
.text:0040462D                 mov     edi, [esp+1Ch+var_4]
.text:00404631                 add     esp, 1Ch
.text:00404634                 retn
.text:00404635 ; ---------------------------------------------------------------------------
.text:00404635
.text:00404635 loc_404635:                             ; CODE XREF: sub_4045E0+43↑j
.text:00404635                 test    ebx, ebx
.text:00404637                 jz      short loc_404625
.text:00404639
.text:00404639 loc_404639:                             ; CODE XREF: sub_4045E0+2C↑j
.text:00404639                 call    sub_404680
.text:00404639 ; ---------------------------------------------------------------------------
.text:0040463E                 align 10h
.text:00404640
.text:00404640 loc_404640:                             ; CODE XREF: sub_4045E0+1F↑j
.text:00404640                 test    ecx, ecx
.text:00404642                 jnz     short loc_404610
.text:00404644                 xor     edx, edx
.text:00404646                 mov     eax, 40h ; '@'
.text:0040464B                 div     ebx
.text:0040464D                 test    eax, eax
.text:0040464F                 mov     ecx, eax
.text:00404651                 jnz     short loc_404610
.text:00404653                 mov     ecx, 1
.text:00404658                 jmp     short loc_404610
.text:00404658 sub_4045E0      endp
.text:00404658
.text:00404658 ; ---------------------------------------------------------------------------
.text:0040465A                 align 10h
.text:00404660 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404680+3↓o
.text:00404671 ; const char aS_0[]
.text:00404671 aS_0            db '%s',0               ; DATA XREF: sub_404680+10↓o
.text:00404674                 align 10h
.text:00404680
.text:00404680 ; =============== S U B R O U T I N E =======================================
.text:00404680
.text:00404680 ; Attributes: noreturn
.text:00404680
.text:00404680 sub_404680      proc near               ; CODE XREF: sub_4041C0:loc_40437F↑p
.text:00404680                                         ; sub_404390:loc_4043C9↑p ...
.text:00404680
.text:00404680 Code            = dword ptr -1Ch
.text:00404680 ErrorMessage    = dword ptr -18h
.text:00404680 var_14          = dword ptr -14h
.text:00404680 var_10          = byte ptr -10h
.text:00404680
.text:00404680                 sub     esp, 1Ch
.text:00404683                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040468A                 call    ds:libintl_gettext
.text:00404690                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00404698                 mov     edx, Code
.text:0040469E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004046A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004046AA                 mov     [esp+1Ch+Code], edx ; Code
.text:004046AD                 call    sub_404710
.text:004046B2                 call    abort
.text:004046B2 sub_404680      endp
.text:004046B2
.text:004046B2 ; ---------------------------------------------------------------------------
.text:004046B7                 align 10h
.text:004046C0
.text:004046C0 ; =============== S U B R O U T I N E =======================================
.text:004046C0
.text:004046C0 ; Attributes: thunk
.text:004046C0
.text:004046C0 libintl_bindtextdomain proc near
.text:004046C0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004046C0 libintl_bindtextdomain endp
.text:004046C0
.text:004046C0 ; ---------------------------------------------------------------------------
.text:004046C6                 align 10h
.text:004046D0                 jmp     ds:libintl_textdomain
.text:004046D0 ; ---------------------------------------------------------------------------
.text:004046D6                 align 10h
.text:004046E0                 jmp     ds:libintl_gettext
.text:004046E0 ; ---------------------------------------------------------------------------
.text:004046E6                 align 10h
.text:004046F0 ; const char aS_1[]
.text:004046F0 aS_1            db ': %s',0             ; DATA XREF: sub_404710+B8↓o
.text:004046F0                                         ; sub_404814+122↓o
.text:004046F5 aUnknownSystemE db 'Unknown system error',0
.text:004046F5                                         ; DATA XREF: sub_404710:loc_4047DD↓o
.text:004046F5                                         ; sub_404814:loc_40494E↓o
.text:0040470A ; const char aS_2[]
.text:0040470A aS_2            db '%s: ',0             ; DATA XREF: sub_404710:loc_4047E4↓o
.text:0040470F                 align 10h
.text:00404710
.text:00404710 ; =============== S U B R O U T I N E =======================================
.text:00404710
.text:00404710
.text:00404710 ; int __cdecl sub_404710(int Code, int ErrorMessage, char *, char)
.text:00404710 sub_404710      proc near               ; CODE XREF: sub_402A10+86↑p
.text:00404710                                         ; sub_402A10+AF↑p ...
.text:00404710
.text:00404710 Stream          = dword ptr -1Ch
.text:00404710 Format          = dword ptr -18h
.text:00404710 ArgList         = dword ptr -14h
.text:00404710 Code            = dword ptr  4
.text:00404710 ErrorMessage    = dword ptr  8
.text:00404710 arg_8           = dword ptr  0Ch
.text:00404710 arg_C           = byte ptr  10h
.text:00404710
.text:00404710                 push    esi
.text:00404711                 push    ebx
.text:00404712                 sub     esp, 14h
.text:00404715                 mov     edx, ds:_iob
.text:0040471B                 mov     esi, [esp+1Ch+Code]
.text:0040471F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404723                 add     edx, 20h ; ' '
.text:00404726                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404729                 call    fflush
.text:0040472E                 mov     eax, ds:dword_4061C0
.text:00404733                 test    eax, eax
.text:00404735                 jz      loc_4047E4
.text:0040473B                 call    eax ; dword_4061C0
.text:0040473D
.text:0040473D loc_40473D:                             ; CODE XREF: sub_404710+F7↓j
.text:0040473D                 lea     edx, [esp+1Ch+arg_C]
.text:00404741                 mov     ecx, [esp+1Ch+arg_8]
.text:00404745                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404749                 mov     edx, ds:_iob
.text:0040474F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404753                 add     edx, 40h ; '@'
.text:00404756                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404759                 call    vfprintf
.text:0040475E                 inc     ds:dword_4061D0
.text:00404764                 test    ebx, ebx
.text:00404766                 jnz     short loc_4047B2
.text:00404768
.text:00404768 loc_404768:                             ; CODE XREF: sub_404710+CB↓j
.text:00404768                 mov     edx, ds:_iob
.text:0040476E                 lea     ecx, [edx+40h]
.text:00404771                 mov     ebx, [ecx+4]
.text:00404774                 dec     ebx
.text:00404775                 test    ebx, ebx
.text:00404777                 mov     [ecx+4], ebx
.text:0040477A                 js      short loc_4047A0
.text:0040477C                 mov     ecx, [edx+40h]
.text:0040477F                 mov     byte ptr [ecx], 0Ah
.text:00404782                 inc     dword ptr [edx+40h]
.text:00404785
.text:00404785 loc_404785:                             ; CODE XREF: sub_404710+A0↓j
.text:00404785                 mov     edx, ds:_iob
.text:0040478B                 add     edx, 40h ; '@'
.text:0040478E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404791                 call    fflush
.text:00404796                 test    esi, esi
.text:00404798                 jnz     short loc_40480C
.text:0040479A                 add     esp, 14h
.text:0040479D                 pop     ebx
.text:0040479E                 pop     esi
.text:0040479F                 retn
.text:004047A0 ; ---------------------------------------------------------------------------
.text:004047A0
.text:004047A0 loc_4047A0:                             ; CODE XREF: sub_404710+6A↑j
.text:004047A0                 mov     [esp+1Ch+Format], ecx ; File
.text:004047A4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004047AB                 call    _flsbuf
.text:004047B0                 jmp     short loc_404785
.text:004047B2 ; ---------------------------------------------------------------------------
.text:004047B2
.text:004047B2 loc_4047B2:                             ; CODE XREF: sub_404710+56↑j
.text:004047B2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004047B5                 call    strerror
.text:004047BA                 test    eax, eax
.text:004047BC                 jz      short loc_4047DD
.text:004047BE
.text:004047BE loc_4047BE:                             ; CODE XREF: sub_404710+D2↓j
.text:004047BE                 mov     [esp+1Ch+ArgList], eax
.text:004047C2                 mov     ebx, ds:_iob
.text:004047C8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:004047D0                 add     ebx, 40h ; '@'
.text:004047D3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004047D6                 call    fprintf
.text:004047DB                 jmp     short loc_404768
.text:004047DD ; ---------------------------------------------------------------------------
.text:004047DD
.text:004047DD loc_4047DD:                             ; CODE XREF: sub_404710+AC↑j
.text:004047DD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004047E2                 jmp     short loc_4047BE
.text:004047E4 ; ---------------------------------------------------------------------------
.text:004047E4
.text:004047E4 loc_4047E4:                             ; CODE XREF: sub_404710+25↑j
.text:004047E4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:004047EC                 mov     edx, ds:_iob
.text:004047F2                 mov     ecx, ds:dword_406190
.text:004047F8                 add     edx, 40h ; '@'
.text:004047FB                 mov     [esp+1Ch+ArgList], ecx
.text:004047FF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404802                 call    fprintf
.text:00404807                 jmp     loc_40473D
.text:0040480C ; ---------------------------------------------------------------------------
.text:0040480C
.text:0040480C loc_40480C:                             ; CODE XREF: sub_404710+88↑j
.text:0040480C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040480F                 call    exit
.text:0040480F sub_404710      endp
.text:0040480F
.text:00404814
.text:00404814 ; =============== S U B R O U T I N E =======================================
.text:00404814
.text:00404814
.text:00404814 ; int __cdecl sub_404814(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404814 sub_404814      proc near               ; DATA XREF: sub_404814+77↓o
.text:00404814
.text:00404814 Stream          = dword ptr -28h
.text:00404814 Format          = dword ptr -24h
.text:00404814 ArgList         = dword ptr -20h
.text:00404814 var_1C          = dword ptr -1Ch
.text:00404814 Code            = dword ptr  8
.text:00404814 ErrorMessage    = dword ptr  0Ch
.text:00404814 Str2            = dword ptr  10h
.text:00404814 arg_10          = dword ptr  14h
.text:00404814 arg_14          = dword ptr  18h
.text:00404814 arg_18          = byte ptr  1Ch
.text:00404814
.text:00404814                 and     eax, 64253A73h
.text:00404819                 cmp     ah, [eax]
.text:0040481B
.text:0040481B loc_40481B:                             ; DATA XREF: sub_404814:loc_404955↓o
.text:0040481B                 add     ds:55003A73h, ah
.text:00404821                 push    edi
.text:00404822                 push    esi
.text:00404823                 push    ebx
.text:00404824                 sub     esp, 1Ch
.text:00404827                 mov     edx, ds:dword_406200
.text:0040482D                 mov     ebp, [esp+28h+Code]
.text:00404831                 mov     edi, [esp+28h+ErrorMessage]
.text:00404835                 test    edx, edx
.text:00404837                 mov     ebx, [esp+28h+Str2]
.text:0040483B                 mov     esi, [esp+28h+arg_10]
.text:0040483F                 jz      short loc_404859
.text:00404841                 cmp     ds:dword_406180, esi
.text:00404847                 jz      loc_404980
.text:0040484D
.text:0040484D loc_40484D:                             ; CODE XREF: sub_404814+18D↓j
.text:0040484D                 mov     ds:Str1, ebx
.text:00404853                 mov     ds:dword_406180, esi
.text:00404859
.text:00404859 loc_404859:                             ; CODE XREF: sub_404814+2B↑j
.text:00404859                 mov     edx, ds:_iob
.text:0040485F                 add     edx, 20h ; ' '
.text:00404862                 mov     [esp+28h+Stream], edx ; Stream
.text:00404865                 call    fflush
.text:0040486A                 mov     eax, ds:dword_4061C0
.text:0040486F                 test    eax, eax
.text:00404871                 jz      loc_404955
.text:00404877                 call    eax ; dword_4061C0
.text:00404879
.text:00404879 loc_404879:                             ; CODE XREF: sub_404814+164↓j
.text:00404879                 test    ebx, ebx
.text:0040487B                 jz      short loc_40489E
.text:0040487D                 mov     [esp+28h+ArgList], ebx
.text:00404881                 mov     ebx, ds:_iob
.text:00404887                 mov     [esp+28h+var_1C], esi
.text:0040488B                 mov     [esp+28h+Format], offset sub_404814 ; Format
.text:00404893                 add     ebx, 40h ; '@'
.text:00404896                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404899                 call    fprintf
.text:0040489E
.text:0040489E loc_40489E:                             ; CODE XREF: sub_404814+67↑j
.text:0040489E                 mov     esi, ds:_iob
.text:004048A4                 lea     edx, [esp+28h+arg_18]
.text:004048A8                 mov     ecx, [esp+28h+arg_14]
.text:004048AC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004048B0                 add     esi, 40h ; '@'
.text:004048B3                 mov     [esp+28h+Format], ecx ; Format
.text:004048B7                 mov     [esp+28h+Stream], esi ; Stream
.text:004048BA                 call    vfprintf
.text:004048BF                 inc     ds:dword_4061D0
.text:004048C5                 test    edi, edi
.text:004048C7                 jnz     short loc_404920
.text:004048C9
.text:004048C9 loc_4048C9:                             ; CODE XREF: sub_404814+135↓j
.text:004048C9                 mov     edx, ds:_iob
.text:004048CF                 lea     ecx, [edx+40h]
.text:004048D2                 mov     ebx, [ecx+4]
.text:004048D5                 dec     ebx
.text:004048D6                 test    ebx, ebx
.text:004048D8                 mov     [ecx+4], ebx
.text:004048DB                 js      short loc_404907
.text:004048DD                 mov     esi, [edx+40h]
.text:004048E0                 mov     byte ptr [esi], 0Ah
.text:004048E3                 inc     dword ptr [edx+40h]
.text:004048E6
.text:004048E6 loc_4048E6:                             ; CODE XREF: sub_404814+103↓j
.text:004048E6                 mov     ecx, ds:_iob
.text:004048EC                 add     ecx, 40h ; '@'
.text:004048EF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004048F2                 call    fflush
.text:004048F7                 test    ebp, ebp
.text:004048F9                 jnz     loc_4049A6
.text:004048FF
.text:004048FF loc_4048FF:                             ; CODE XREF: sub_404814+173↓j
.text:004048FF                                         ; sub_404814+187↓j
.text:004048FF                 add     esp, 1Ch
.text:00404902                 pop     ebx
.text:00404903                 pop     esi
.text:00404904                 pop     edi
.text:00404905                 pop     ebp
.text:00404906                 retn
.text:00404907 ; ---------------------------------------------------------------------------
.text:00404907
.text:00404907 loc_404907:                             ; CODE XREF: sub_404814+C7↑j
.text:00404907                 mov     [esp+28h+Format], ecx ; File
.text:0040490B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404912                 call    _flsbuf
.text:00404917                 jmp     short loc_4048E6
.text:00404917 ; ---------------------------------------------------------------------------
.text:00404919                 align 10h
.text:00404920
.text:00404920 loc_404920:                             ; CODE XREF: sub_404814+B3↑j
.text:00404920                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404923                 call    strerror
.text:00404928                 test    eax, eax
.text:0040492A                 jz      short loc_40494E
.text:0040492C
.text:0040492C loc_40492C:                             ; CODE XREF: sub_404814+13F↓j
.text:0040492C                 mov     [esp+28h+ArgList], eax
.text:00404930                 mov     edi, ds:_iob
.text:00404936                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040493E                 add     edi, 40h ; '@'
.text:00404941                 mov     [esp+28h+Stream], edi ; Stream
.text:00404944                 call    fprintf
.text:00404949                 jmp     loc_4048C9
.text:0040494E ; ---------------------------------------------------------------------------
.text:0040494E
.text:0040494E loc_40494E:                             ; CODE XREF: sub_404814+116↑j
.text:0040494E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404953                 jmp     short loc_40492C
.text:00404955 ; ---------------------------------------------------------------------------
.text:00404955
.text:00404955 loc_404955:                             ; CODE XREF: sub_404814+5D↑j
.text:00404955                 mov     [esp+28h+Format], (offset loc_40481B+1) ; Format
.text:0040495D                 mov     ecx, ds:_iob
.text:00404963                 mov     edx, ds:dword_406190
.text:00404969                 add     ecx, 40h ; '@'
.text:0040496C                 mov     [esp+28h+ArgList], edx
.text:00404970                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404973                 call    fprintf
.text:00404978                 jmp     loc_404879
.text:00404978 ; ---------------------------------------------------------------------------
.text:0040497D                 align 10h
.text:00404980
.text:00404980 loc_404980:                             ; CODE XREF: sub_404814+33↑j
.text:00404980                 mov     eax, ds:Str1
.text:00404985                 cmp     ebx, eax
.text:00404987                 jz      loc_4048FF
.text:0040498D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404991                 mov     [esp+28h+Stream], eax ; Str1
.text:00404994                 call    strcmp
.text:00404999                 test    eax, eax
.text:0040499B                 jz      loc_4048FF
.text:004049A1                 jmp     loc_40484D
.text:004049A6 ; ---------------------------------------------------------------------------
.text:004049A6
.text:004049A6 loc_4049A6:                             ; CODE XREF: sub_404814+E5↑j
.text:004049A6                 mov     [esp+28h+Stream], ebp ; Code
.text:004049A9                 call    exit
.text:004049A9 sub_404814      endp ; sp-analysis failed
.text:004049A9
.text:004049A9 ; ---------------------------------------------------------------------------
.text:004049AE                 align 10h
.text:004049B0
.text:004049B0 ; =============== S U B R O U T I N E =======================================
.text:004049B0
.text:004049B0 ; Attributes: thunk
.text:004049B0
.text:004049B0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004049B0 mbrtowc         proc near               ; CODE XREF: sub_403080+757↑p
.text:004049B0                 jmp     ds:__imp_mbrtowc
.text:004049B0 mbrtowc         endp
.text:004049B0
.text:004049B0 ; ---------------------------------------------------------------------------
.text:004049B6                 align 10h
.text:004049C0
.text:004049C0 ; =============== S U B R O U T I N E =======================================
.text:004049C0
.text:004049C0 ; Attributes: bp-based frame
.text:004049C0
.text:004049C0 sub_4049C0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004049C0                 push    ebp
.text:004049C1                 mov     ecx, offset dword_406000
.text:004049C6                 cmp     ecx, offset dword_406000
.text:004049CC                 mov     ebp, esp
.text:004049CE                 jnb     short loc_4049E6
.text:004049D0
.text:004049D0 loc_4049D0:                             ; CODE XREF: sub_4049C0+24↓j
.text:004049D0                 mov     edx, [ecx+4]
.text:004049D3                 mov     eax, [ecx]
.text:004049D5                 add     ecx, 8
.text:004049D8                 add     [edx+400000h], eax
.text:004049DE                 cmp     ecx, offset dword_406000
.text:004049E4                 jb      short loc_4049D0
.text:004049E6
.text:004049E6 loc_4049E6:                             ; CODE XREF: sub_4049C0+E↑j
.text:004049E6                 pop     ebp
.text:004049E7                 retn
.text:004049E7 sub_4049C0      endp
.text:004049E7
.text:004049E7 ; ---------------------------------------------------------------------------
.text:004049E8                 align 10h
.text:004049F0
.text:004049F0 ; =============== S U B R O U T I N E =======================================
.text:004049F0
.text:004049F0 ; Attributes: bp-based frame
.text:004049F0
.text:004049F0 sub_4049F0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004049F0                                         ; TopLevelExceptionFilter+D7↑p
.text:004049F0                 push    ebp
.text:004049F1                 mov     ebp, esp
.text:004049F3                 fninit
.text:004049F5                 pop     ebp
.text:004049F6                 retn
.text:004049F6 sub_4049F0      endp
.text:004049F6
.text:004049F6 ; ---------------------------------------------------------------------------
.text:004049F7                 align 10h
.text:00404A00
.text:00404A00 ; =============== S U B R O U T I N E =======================================
.text:00404A00
.text:00404A00 ; Attributes: bp-based frame
.text:00404A00
.text:00404A00 ; void __cdecl sub_404A00()
.text:00404A00 sub_404A00      proc near               ; DATA XREF: .text:loc_404A49↓o
.text:00404A00                                         ; sub_404A90:loc_404ABE↓o
.text:00404A00                 push    ebp
.text:00404A01                 mov     ebp, esp
.text:00404A03                 sub     esp, 8
.text:00404A06                 mov     eax, off_405084
.text:00404A0B                 mov     edx, [eax]
.text:00404A0D                 test    edx, edx
.text:00404A0F                 jnz     short loc_404A15
.text:00404A11
.text:00404A11 loc_404A11:                             ; CODE XREF: sub_404A00+2C↓j
.text:00404A11                 mov     esp, ebp
.text:00404A13                 pop     ebp
.text:00404A14                 retn
.text:00404A15 ; ---------------------------------------------------------------------------
.text:00404A15
.text:00404A15 loc_404A15:                             ; CODE XREF: sub_404A00+F↑j
.text:00404A15                                         ; sub_404A00+2A↓j
.text:00404A15                 call    dword ptr [eax]
.text:00404A17                 mov     edx, off_405084
.text:00404A1D                 mov     ecx, [edx+4]
.text:00404A20                 lea     eax, [edx+4]
.text:00404A23                 mov     off_405084, eax
.text:00404A28                 test    ecx, ecx
.text:00404A2A                 jnz     short loc_404A15
.text:00404A2C                 jmp     short loc_404A11
.text:00404A2C sub_404A00      endp
.text:00404A2C
.text:00404A2C ; ---------------------------------------------------------------------------
.text:00404A2E                 align 10h
.text:00404A30                 push    ebp
.text:00404A31                 mov     ebp, esp
.text:00404A33                 sub     esp, 8
.text:00404A36                 mov     [ebp-4], ebx
.text:00404A39                 mov     eax, ds:dword_404D60
.text:00404A3E                 cmp     eax, 0FFFFFFFFh
.text:00404A41                 jz      short loc_404A6C
.text:00404A43
.text:00404A43 loc_404A43:                             ; CODE XREF: .text:00404A76↓j
.text:00404A43                                         ; .text:00404A89↓j
.text:00404A43                 test    eax, eax
.text:00404A45                 mov     ebx, eax
.text:00404A47                 jnz     short loc_404A60
.text:00404A49
.text:00404A49 loc_404A49:                             ; CODE XREF: .text:00404A6A↓j
.text:00404A49                 mov     dword ptr [esp], offset sub_404A00
.text:00404A50                 call    sub_401040
.text:00404A55                 mov     ebx, [ebp-4]
.text:00404A58                 mov     esp, ebp
.text:00404A5A                 pop     ebp
.text:00404A5B                 retn
.text:00404A5B ; ---------------------------------------------------------------------------
.text:00404A5C                 align 10h
.text:00404A60
.text:00404A60 loc_404A60:                             ; CODE XREF: .text:00404A47↑j
.text:00404A60                                         ; .text:00404A68↓j
.text:00404A60                 call    ds:dword_404D60[ebx*4]
.text:00404A67                 dec     ebx
.text:00404A68                 jnz     short loc_404A60
.text:00404A6A                 jmp     short loc_404A49
.text:00404A6C ; ---------------------------------------------------------------------------
.text:00404A6C
.text:00404A6C loc_404A6C:                             ; CODE XREF: .text:00404A41↑j
.text:00404A6C                 mov     ecx, ds:dword_404D64
.text:00404A72                 xor     eax, eax
.text:00404A74                 test    ecx, ecx
.text:00404A76                 jz      short loc_404A43
.text:00404A78                 mov     edx, offset dword_404D60
.text:00404A7D                 lea     esi, [esi+0]
.text:00404A80
.text:00404A80 loc_404A80:                             ; CODE XREF: .text:00404A87↓j
.text:00404A80                 inc     eax
.text:00404A81                 mov     ecx, [edx+eax*4+4]
.text:00404A85                 test    ecx, ecx
.text:00404A87                 jnz     short loc_404A80
.text:00404A89                 jmp     short loc_404A43
.text:00404A89 ; ---------------------------------------------------------------------------
.text:00404A8B                 align 10h
.text:00404A90
.text:00404A90 ; =============== S U B R O U T I N E =======================================
.text:00404A90
.text:00404A90 ; Attributes: bp-based frame
.text:00404A90
.text:00404A90 sub_404A90      proc near               ; CODE XREF: sub_401350+16↑p
.text:00404A90
.text:00404A90 var_8           = dword ptr -8
.text:00404A90 var_4           = dword ptr -4
.text:00404A90
.text:00404A90                 push    ebp
.text:00404A91                 mov     ebp, esp
.text:00404A93                 sub     esp, 8
.text:00404A96                 mov     [ebp+var_4], ebx
.text:00404A99                 mov     edx, dword_405080
.text:00404A9F                 test    edx, edx
.text:00404AA1                 jnz     short loc_404ACA
.text:00404AA3                 mov     eax, ds:dword_404D60
.text:00404AA8                 mov     edx, 1
.text:00404AAD                 mov     dword_405080, edx
.text:00404AB3                 cmp     eax, 0FFFFFFFFh
.text:00404AB6                 jz      short loc_404ADD
.text:00404AB8
.text:00404AB8 loc_404AB8:                             ; CODE XREF: sub_404A90+57↓j
.text:00404AB8                                         ; sub_404A90+69↓j
.text:00404AB8                 test    eax, eax
.text:00404ABA                 mov     ebx, eax
.text:00404ABC                 jnz     short loc_404AD1
.text:00404ABE
.text:00404ABE loc_404ABE:                             ; CODE XREF: sub_404A90+4B↓j
.text:00404ABE                 mov     [esp+8+var_8], offset sub_404A00 ; void (__cdecl *)()
.text:00404AC5                 call    sub_401040
.text:00404ACA
.text:00404ACA loc_404ACA:                             ; CODE XREF: sub_404A90+11↑j
.text:00404ACA                 mov     ebx, [ebp+var_4]
.text:00404ACD                 mov     esp, ebp
.text:00404ACF                 pop     ebp
.text:00404AD0                 retn
.text:00404AD1 ; ---------------------------------------------------------------------------
.text:00404AD1
.text:00404AD1 loc_404AD1:                             ; CODE XREF: sub_404A90+2C↑j
.text:00404AD1                                         ; sub_404A90+49↓j
.text:00404AD1                 call    ds:dword_404D60[ebx*4]
.text:00404AD8                 dec     ebx
.text:00404AD9                 jnz     short loc_404AD1
.text:00404ADB                 jmp     short loc_404ABE
.text:00404ADD ; ---------------------------------------------------------------------------
.text:00404ADD
.text:00404ADD loc_404ADD:                             ; CODE XREF: sub_404A90+26↑j
.text:00404ADD                 mov     ecx, ds:dword_404D64
.text:00404AE3                 xor     eax, eax
.text:00404AE5                 test    ecx, ecx
.text:00404AE7                 jz      short loc_404AB8
.text:00404AE9                 mov     edx, offset dword_404D60
.text:00404AEE                 mov     esi, esi
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_404A90+67↓j
.text:00404AF0                 inc     eax
.text:00404AF1                 mov     ebx, [edx+eax*4+4]
.text:00404AF5                 test    ebx, ebx
.text:00404AF7                 jnz     short loc_404AF0
.text:00404AF9                 jmp     short loc_404AB8
.text:00404AF9 sub_404A90      endp
.text:00404AF9
.text:00404AF9 ; ---------------------------------------------------------------------------
.text:00404AFB                 align 10h
.text:00404B00
.text:00404B00 ; =============== S U B R O U T I N E =======================================
.text:00404B00
.text:00404B00 ; Attributes: info_from_lumina
.text:00404B00
.text:00404B00 ; void *__cdecl _alloca(size_t Size)
.text:00404B00 __alloca        proc near               ; CODE XREF: sub_401350+E↑p
.text:00404B00                 push    ecx
.text:00404B01                 mov     ecx, esp
.text:00404B03                 add     ecx, 8
.text:00404B06
.text:00404B06 loc_404B06:                             ; CODE XREF: __alloca+1B↓j
.text:00404B06                 cmp     eax, 1000h
.text:00404B0B                 jb      short loc_404B1D
.text:00404B0D                 sub     ecx, 1000h
.text:00404B13                 or      dword ptr [ecx], 0
.text:00404B16                 sub     eax, 1000h
.text:00404B1B                 jmp     short loc_404B06
.text:00404B1D ; ---------------------------------------------------------------------------
.text:00404B1D
.text:00404B1D loc_404B1D:                             ; CODE XREF: __alloca+B↑j
.text:00404B1D                 sub     ecx, eax
.text:00404B1F                 or      dword ptr [ecx], 0
.text:00404B22                 mov     eax, esp
.text:00404B24                 mov     esp, ecx
.text:00404B26                 mov     ecx, [eax]
.text:00404B28                 mov     eax, [eax+4]
.text:00404B2B                 jmp     eax
.text:00404B2B __alloca        endp
.text:00404B2B
.text:00404B2B ; ---------------------------------------------------------------------------
.text:00404B2D                 align 10h
.text:00404B30                 jmp     ds:__set_app_type
.text:00404B30 ; ---------------------------------------------------------------------------
.text:00404B36                 align 10h
.text:00404B40
.text:00404B40 ; =============== S U B R O U T I N E =======================================
.text:00404B40
.text:00404B40 ; Attributes: thunk
.text:00404B40
.text:00404B40 ; void __cdecl cexit()
.text:00404B40 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404B40                 jmp     ds:__imp__cexit
.text:00404B40 _cexit          endp
.text:00404B40
.text:00404B40 ; ---------------------------------------------------------------------------
.text:00404B46                 align 10h
.text:00404B50
.text:00404B50 ; =============== S U B R O U T I N E =======================================
.text:00404B50
.text:00404B50 ; Attributes: thunk
.text:00404B50
.text:00404B50 ; char ***__cdecl _p__environ()
.text:00404B50 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404B50                                         ; sub_401350+133↑p ...
.text:00404B50                 jmp     ds:__imp___p__environ
.text:00404B50 __p__environ    endp
.text:00404B50
.text:00404B50 ; ---------------------------------------------------------------------------
.text:00404B56                 align 10h
.text:00404B60
.text:00404B60 ; =============== S U B R O U T I N E =======================================
.text:00404B60
.text:00404B60 ; Attributes: thunk
.text:00404B60
.text:00404B60 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404B60 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404B60                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404B60
.text:00404B60 Signal          = dword ptr  4
.text:00404B60 Function        = dword ptr  8
.text:00404B60
.text:00404B60                 jmp     ds:__imp_signal
.text:00404B60 signal          endp
.text:00404B60
.text:00404B60 ; ---------------------------------------------------------------------------
.text:00404B66                 align 10h
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70 ; Attributes: thunk
.text:00404B70
.text:00404B70 ; int *__cdecl _p__fmode()
.text:00404B70 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404B70                 jmp     ds:__imp___p__fmode
.text:00404B70 __p__fmode      endp
.text:00404B70
.text:00404B70 ; ---------------------------------------------------------------------------
.text:00404B76                 align 10h
.text:00404B80
.text:00404B80 ; =============== S U B R O U T I N E =======================================
.text:00404B80
.text:00404B80 ; Attributes: thunk
.text:00404B80
.text:00404B80 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404B80 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404B80                                         ; sub_401080+90↑p ...
.text:00404B80
.text:00404B80 FileHandle      = dword ptr  4
.text:00404B80 Mode            = dword ptr  8
.text:00404B80
.text:00404B80                 jmp     ds:__imp__setmode
.text:00404B80 _setmode        endp
.text:00404B80
.text:00404B80 ; ---------------------------------------------------------------------------
.text:00404B86                 align 10h
.text:00404B90
.text:00404B90 ; =============== S U B R O U T I N E =======================================
.text:00404B90
.text:00404B90 ; Attributes: thunk
.text:00404B90
.text:00404B90 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404B90                 jmp     ds:__imp___getmainargs
.text:00404B90 __getmainargs   endp
.text:00404B90
.text:00404B90 ; ---------------------------------------------------------------------------
.text:00404B96                 align 10h
.text:00404BA0
.text:00404BA0 ; =============== S U B R O U T I N E =======================================
.text:00404BA0
.text:00404BA0 ; Attributes: thunk
.text:00404BA0
.text:00404BA0 ; int __cdecl puts(const char *Buffer)
.text:00404BA0 puts            proc near               ; CODE XREF: sub_401350+1CB↑p
.text:00404BA0                                         ; sub_401350+1ED↑p
.text:00404BA0
.text:00404BA0 Buffer          = dword ptr  4
.text:00404BA0
.text:00404BA0                 jmp     ds:__imp_puts
.text:00404BA0 puts            endp
.text:00404BA0
.text:00404BA0 ; ---------------------------------------------------------------------------
.text:00404BA6                 align 10h
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0 ; Attributes: thunk
.text:00404BB0
.text:00404BB0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00404BB0 setlocale       proc near               ; CODE XREF: sub_401350+35↑p
.text:00404BB0
.text:00404BB0 Category        = dword ptr  4
.text:00404BB0 Locale          = dword ptr  8
.text:00404BB0
.text:00404BB0                 jmp     ds:__imp_setlocale
.text:00404BB0 setlocale       endp
.text:00404BB0
.text:00404BB0 ; ---------------------------------------------------------------------------
.text:00404BB6                 align 10h
.text:00404BC0
.text:00404BC0 ; =============== S U B R O U T I N E =======================================
.text:00404BC0
.text:00404BC0 ; Attributes: noreturn thunk
.text:00404BC0
.text:00404BC0 ; void __cdecl __noreturn exit(int Code)
.text:00404BC0 exit            proc near               ; CODE XREF: sub_401350:loc_401463↑p
.text:00404BC0                                         ; sub_401690+3E↑p ...
.text:00404BC0
.text:00404BC0 Code            = dword ptr  4
.text:00404BC0
.text:00404BC0                 jmp     ds:__imp_exit
.text:00404BC0 exit            endp
.text:00404BC0
.text:00404BC0 ; ---------------------------------------------------------------------------
.text:00404BC6                 align 10h
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0 ; Attributes: thunk
.text:00404BD0
.text:00404BD0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00404BD0 fputs           proc near               ; CODE XREF: sub_401690+83↑p
.text:00404BD0                                         ; sub_401690+A5↑p ...
.text:00404BD0
.text:00404BD0 Buffer          = dword ptr  4
.text:00404BD0 Stream          = dword ptr  8
.text:00404BD0
.text:00404BD0                 jmp     ds:__imp_fputs
.text:00404BD0 fputs           endp
.text:00404BD0
.text:00404BD0 ; ---------------------------------------------------------------------------
.text:00404BD6                 align 10h
.text:00404BE0
.text:00404BE0 ; =============== S U B R O U T I N E =======================================
.text:00404BE0
.text:00404BE0 ; Attributes: thunk
.text:00404BE0
.text:00404BE0 ; int printf(const char *const Format, ...)
.text:00404BE0 printf          proc near               ; CODE XREF: sub_401690+61↑p
.text:00404BE0                                         ; sub_401690+C2↑p
.text:00404BE0
.text:00404BE0 Format          = dword ptr  4
.text:00404BE0
.text:00404BE0                 jmp     ds:__imp_printf
.text:00404BE0 printf          endp
.text:00404BE0
.text:00404BE0 ; ---------------------------------------------------------------------------
.text:00404BE6                 align 10h
.text:00404BF0
.text:00404BF0 ; =============== S U B R O U T I N E =======================================
.text:00404BF0
.text:00404BF0 ; Attributes: thunk
.text:00404BF0
.text:00404BF0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00404BF0 fprintf         proc near               ; CODE XREF: sub_401350+107↑p
.text:00404BF0                                         ; sub_401690+36↑p ...
.text:00404BF0
.text:00404BF0 Stream          = dword ptr  4
.text:00404BF0 Format          = dword ptr  8
.text:00404BF0
.text:00404BF0                 jmp     ds:__imp_fprintf
.text:00404BF0 fprintf         endp
.text:00404BF0
.text:00404BF0 ; ---------------------------------------------------------------------------
.text:00404BF6                 align 10h
.text:00404C00
.text:00404C00 ; =============== S U B R O U T I N E =======================================
.text:00404C00
.text:00404C00 ; Attributes: thunk
.text:00404C00
.text:00404C00 ; size_t __cdecl strlen(const char *Str)
.text:00404C00 strlen          proc near               ; CODE XREF: sub_4019B0+2A9↑p
.text:00404C00                                         ; sub_4019B0+346↑p ...
.text:00404C00
.text:00404C00 Str             = dword ptr  4
.text:00404C00
.text:00404C00                 jmp     ds:__imp_strlen
.text:00404C00 strlen          endp
.text:00404C00
.text:00404C00 ; ---------------------------------------------------------------------------
.text:00404C06                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10 ; Attributes: thunk
.text:00404C10
.text:00404C10 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00404C10 strncmp         proc near               ; CODE XREF: sub_4019B0+23F↑p
.text:00404C10                                         ; sub_4019B0+699↑p
.text:00404C10
.text:00404C10 Str1            = dword ptr  4
.text:00404C10 Str2            = dword ptr  8
.text:00404C10 MaxCount        = dword ptr  0Ch
.text:00404C10
.text:00404C10                 jmp     ds:__imp_strncmp
.text:00404C10 strncmp         endp
.text:00404C10
.text:00404C10 ; ---------------------------------------------------------------------------
.text:00404C16                 align 10h
.text:00404C20
.text:00404C20 ; =============== S U B R O U T I N E =======================================
.text:00404C20
.text:00404C20 ; Attributes: thunk
.text:00404C20
.text:00404C20 ; char *__cdecl getenv(const char *VarName)
.text:00404C20 getenv          proc near               ; CODE XREF: sub_4019B0+B57↑p
.text:00404C20
.text:00404C20 VarName         = dword ptr  4
.text:00404C20
.text:00404C20                 jmp     ds:__imp_getenv
.text:00404C20 getenv          endp
.text:00404C20
.text:00404C20 ; ---------------------------------------------------------------------------
.text:00404C26                 align 10h
.text:00404C30
.text:00404C30 ; =============== S U B R O U T I N E =======================================
.text:00404C30
.text:00404C30 ; Attributes: thunk
.text:00404C30
.text:00404C30 ; char *__cdecl strchr(const char *Str, int Val)
.text:00404C30 strchr          proc near               ; CODE XREF: sub_4019B0+469↑p
.text:00404C30                                         ; sub_4019B0+53A↑p ...
.text:00404C30
.text:00404C30 Str             = dword ptr  4
.text:00404C30 Val             = dword ptr  8
.text:00404C30
.text:00404C30                 jmp     ds:__imp_strchr
.text:00404C30 strchr          endp
.text:00404C30
.text:00404C30 ; ---------------------------------------------------------------------------
.text:00404C36                 align 10h
.text:00404C40
.text:00404C40 ; =============== S U B R O U T I N E =======================================
.text:00404C40
.text:00404C40 ; Attributes: thunk
.text:00404C40
.text:00404C40 ; int *__cdecl errno()
.text:00404C40 _errno          proc near               ; CODE XREF: sub_402A10:loc_402A4D↑p
.text:00404C40                                         ; .text:00403AEB↑p ...
.text:00404C40                 jmp     ds:__imp__errno
.text:00404C40 _errno          endp
.text:00404C40
.text:00404C40 ; ---------------------------------------------------------------------------
.text:00404C46                 align 10h
.text:00404C50
.text:00404C50 ; =============== S U B R O U T I N E =======================================
.text:00404C50
.text:00404C50 ; Attributes: thunk
.text:00404C50
.text:00404C50 ; int __cdecl fclose(FILE *Stream)
.text:00404C50 fclose          proc near               ; CODE XREF: sub_402A10+27↑p
.text:00404C50
.text:00404C50 Stream          = dword ptr  4
.text:00404C50
.text:00404C50                 jmp     ds:__imp_fclose
.text:00404C50 fclose          endp
.text:00404C50
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C56                 align 10h
.text:00404C60
.text:00404C60 ; =============== S U B R O U T I N E =======================================
.text:00404C60
.text:00404C60 ; Attributes: thunk
.text:00404C60
.text:00404C60 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00404C60 vfprintf        proc near               ; CODE XREF: sub_402DE0+C1↑p
.text:00404C60                                         ; sub_404710+49↑p ...
.text:00404C60
.text:00404C60 Stream          = dword ptr  4
.text:00404C60 Format          = dword ptr  8
.text:00404C60 ArgList         = dword ptr  0Ch
.text:00404C60
.text:00404C60                 jmp     ds:__imp_vfprintf
.text:00404C60 vfprintf        endp
.text:00404C60
.text:00404C60 ; ---------------------------------------------------------------------------
.text:00404C66                 align 10h
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70 ; Attributes: noreturn thunk
.text:00404C70
.text:00404C70 ; void __cdecl __noreturn abort()
.text:00404C70 abort           proc near               ; CODE XREF: sub_402DE0:loc_402E7C↑p
.text:00404C70                                         ; sub_4041C0:loc_40437A↑p ...
.text:00404C70                 jmp     ds:__imp_abort
.text:00404C70 abort           endp
.text:00404C70
.text:00404C70 ; ---------------------------------------------------------------------------
.text:00404C76                 align 10h
.text:00404C80
.text:00404C80 ; =============== S U B R O U T I N E =======================================
.text:00404C80
.text:00404C80 ; Attributes: thunk
.text:00404C80
.text:00404C80 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00404C80 _flsbuf         proc near               ; CODE XREF: sub_402DE0+128↑p
.text:00404C80                                         ; sub_402DE0+13A↑p ...
.text:00404C80
.text:00404C80 File            = dword ptr  8
.text:00404C80
.text:00404C80                 jmp     ds:__imp__flsbuf
.text:00404C80 _flsbuf         endp
.text:00404C80
.text:00404C80 ; ---------------------------------------------------------------------------
.text:00404C86                 align 10h
.text:00404C90
.text:00404C90 ; =============== S U B R O U T I N E =======================================
.text:00404C90
.text:00404C90 ; Attributes: thunk
.text:00404C90
.text:00404C90 ; void __cdecl free(void *Block)
.text:00404C90 free            proc near               ; CODE XREF: sub_4041C0+112↑p
.text:00404C90
.text:00404C90 Block           = dword ptr  4
.text:00404C90
.text:00404C90                 jmp     ds:__imp_free
.text:00404C90 free            endp
.text:00404C90
.text:00404C90 ; ---------------------------------------------------------------------------
.text:00404C96                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0 ; Attributes: thunk
.text:00404CA0
.text:00404CA0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00404CA0 iswctype        proc near               ; CODE XREF: sub_403080+78B↑p
.text:00404CA0
.text:00404CA0 C               = word ptr  4
.text:00404CA0 Type            = word ptr  8
.text:00404CA0
.text:00404CA0                 jmp     ds:__imp_iswctype
.text:00404CA0 iswctype        endp
.text:00404CA0
.text:00404CA0 ; ---------------------------------------------------------------------------
.text:00404CA6                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0 ; Attributes: thunk
.text:00404CB0
.text:00404CB0 ; int __cdecl isctype(int C, int Type)
.text:00404CB0 _isctype        proc near               ; CODE XREF: sub_403080+610↑p
.text:00404CB0
.text:00404CB0 C               = dword ptr  4
.text:00404CB0 Type            = dword ptr  8
.text:00404CB0
.text:00404CB0                 jmp     ds:__imp__isctype
.text:00404CB0 _isctype        endp
.text:00404CB0
.text:00404CB0 ; ---------------------------------------------------------------------------
.text:00404CB6                 align 10h
.text:00404CC0
.text:00404CC0 ; =============== S U B R O U T I N E =======================================
.text:00404CC0
.text:00404CC0 ; Attributes: thunk
.text:00404CC0
.text:00404CC0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404CC0 memcpy          proc near               ; CODE XREF: .text:00404578↑p
.text:00404CC0                                         ; .text:004045C1↑p
.text:00404CC0
.text:00404CC0 Src             = dword ptr  8
.text:00404CC0 Size            = dword ptr  0Ch
.text:00404CC0
.text:00404CC0                 jmp     ds:__imp_memcpy
.text:00404CC0 memcpy          endp
.text:00404CC0
.text:00404CC0 ; ---------------------------------------------------------------------------
.text:00404CC6                 align 10h
.text:00404CD0
.text:00404CD0 ; =============== S U B R O U T I N E =======================================
.text:00404CD0
.text:00404CD0 ; Attributes: thunk
.text:00404CD0
.text:00404CD0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404CD0 memset          proc near               ; CODE XREF: .text:004044F6↑p
.text:00404CD0
.text:00404CD0 Val             = dword ptr  8
.text:00404CD0 Size            = dword ptr  0Ch
.text:00404CD0
.text:00404CD0                 jmp     ds:__imp_memset
.text:00404CD0 memset          endp
.text:00404CD0
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD6                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0 ; Attributes: thunk
.text:00404CE0
.text:00404CE0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00404CE0 calloc          proc near               ; CODE XREF: .text:00404533↑p
.text:00404CE0
.text:00404CE0 Count           = dword ptr  4
.text:00404CE0 Size            = dword ptr  8
.text:00404CE0
.text:00404CE0                 jmp     ds:__imp_calloc
.text:00404CE0 calloc          endp
.text:00404CE0
.text:00404CE0 ; ---------------------------------------------------------------------------
.text:00404CE6                 align 10h
.text:00404CF0
.text:00404CF0 ; =============== S U B R O U T I N E =======================================
.text:00404CF0
.text:00404CF0 ; Attributes: thunk
.text:00404CF0
.text:00404CF0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00404CF0 realloc         proc near               ; CODE XREF: .text:00404430↑p
.text:00404CF0                                         ; sub_404460+16↑p ...
.text:00404CF0
.text:00404CF0 Block           = dword ptr  4
.text:00404CF0 Size            = dword ptr  8
.text:00404CF0
.text:00404CF0                 jmp     ds:__imp_realloc
.text:00404CF0 realloc         endp
.text:00404CF0
.text:00404CF0 ; ---------------------------------------------------------------------------
.text:00404CF6                 align 10h
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00 ; Attributes: thunk
.text:00404D00
.text:00404D00 ; void *__cdecl malloc(size_t Size)
.text:00404D00 malloc          proc near               ; CODE XREF: sub_404390+24↑p
.text:00404D00                                         ; sub_4043D0+E↑p ...
.text:00404D00
.text:00404D00 Size            = dword ptr  4
.text:00404D00
.text:00404D00                 jmp     ds:__imp_malloc
.text:00404D00 malloc          endp
.text:00404D00
.text:00404D00 ; ---------------------------------------------------------------------------
.text:00404D06                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10 ; Attributes: thunk
.text:00404D10
.text:00404D10 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00404D10 strcmp          proc near               ; CODE XREF: sub_404814+180↑p
.text:00404D10
.text:00404D10 Str1            = dword ptr  4
.text:00404D10 Str2            = dword ptr  8
.text:00404D10
.text:00404D10                 jmp     ds:__imp_strcmp
.text:00404D10 strcmp          endp
.text:00404D10
.text:00404D10 ; ---------------------------------------------------------------------------
.text:00404D16                 align 10h
.text:00404D20
.text:00404D20 ; =============== S U B R O U T I N E =======================================
.text:00404D20
.text:00404D20 ; Attributes: thunk
.text:00404D20
.text:00404D20 ; int __cdecl fflush(FILE *Stream)
.text:00404D20 fflush          proc near               ; CODE XREF: sub_404710+19↑p
.text:00404D20                                         ; sub_404710+81↑p ...
.text:00404D20
.text:00404D20 Stream          = dword ptr  4
.text:00404D20
.text:00404D20                 jmp     ds:__imp_fflush
.text:00404D20 fflush          endp
.text:00404D20
.text:00404D20 ; ---------------------------------------------------------------------------
.text:00404D26                 align 10h
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30 ; Attributes: thunk
.text:00404D30
.text:00404D30 ; char *__cdecl strerror(int ErrorMessage)
.text:00404D30 strerror        proc near               ; CODE XREF: sub_404710+A5↑p
.text:00404D30                                         ; sub_404814+10F↑p
.text:00404D30
.text:00404D30 ErrorMessage    = dword ptr  4
.text:00404D30
.text:00404D30                 jmp     ds:__imp_strerror
.text:00404D30 strerror        endp
.text:00404D30
.text:00404D30 ; ---------------------------------------------------------------------------
.text:00404D36                 align 10h
.text:00404D40
.text:00404D40 ; =============== S U B R O U T I N E =======================================
.text:00404D40
.text:00404D40 ; Attributes: thunk
.text:00404D40
.text:00404D40 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00404D40 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00404D40
.text:00404D40 lpTopLevelExceptionFilter= dword ptr  4
.text:00404D40
.text:00404D40                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00404D40 SetUnhandledExceptionFilter endp
.text:00404D40
.text:00404D40 ; ---------------------------------------------------------------------------
.text:00404D46                 align 10h
.text:00404D50
.text:00404D50 ; =============== S U B R O U T I N E =======================================
.text:00404D50
.text:00404D50 ; Attributes: noreturn thunk
.text:00404D50
.text:00404D50 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00404D50 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00404D50
.text:00404D50 uExitCode       = dword ptr  4
.text:00404D50
.text:00404D50                 jmp     ds:__imp_ExitProcess
.text:00404D50 ExitProcess     endp
.text:00404D50
.text:00404D50 ; ---------------------------------------------------------------------------
.text:00404D56                 align 10h
.text:00404D60 dword_404D60    dd 0FFFFFFFFh           ; DATA XREF: .text:00404A39↑r
.text:00404D60                                         ; .text:loc_404A60↑r ...
.text:00404D64 dword_404D64    dd 0                    ; DATA XREF: .text:loc_404A6C↑r
.text:00404D64                                         ; sub_404A90:loc_404ADD↑r
.text:00404D68                 dd 0FFFFFFFFh
.text:00404D6C dword_404D6C    dd 25h dup(0)           ; DATA XREF: .data:off_405084↓o
.text:00404E00                 dd 80h dup(?)
.text:00404E00 _text           ends
.text:00404E00
.data:00405000 ; Section 2. (virtual address 00005000)
.data:00405000 ; Virtual size                  : 000000A0 (    160.)
.data:00405000 ; Section size in file          : 00000200 (    512.)
.data:00405000 ; Offset to raw data for section: 00004200
.data:00405000 ; Flags C0000040: Data Readable Writable
.data:00405000 ; Alignment     : default
.data:00405000 ; ===========================================================================
.data:00405000
.data:00405000 ; Segment type: Pure data
.data:00405000 ; Segment permissions: Read/Write
.data:00405000 _data           segment para public 'DATA' use32
.data:00405000                 assume cs:_data
.data:00405000                 ;org 405000h
.data:00405000 dword_405000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00405000                                         ; sub_401080+CC↑r
.data:00405004 dword_405004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00405004                                         ; sub_401080+D4↑r
.data:00405008                 align 10h
.data:00405010 ; int Code
.data:00405010 Code            dd 1                    ; DATA XREF: sub_401350+68↑w
.data:00405010                                         ; sub_402A10+6D↑r ...
.data:00405014                 align 10h
.data:00405020 dword_405020    dd 1                    ; DATA XREF: sub_401350:loc_401468↑r
.data:00405020                                         ; sub_401350+188↑r ...
.data:00405024 dword_405024    dd 1                    ; DATA XREF: sub_402540+11↑r
.data:00405024                                         ; .text:004025E1↑r ...
.data:00405028 dword_405028    dd 3Fh                  ; DATA XREF: sub_402540+7D↑w
.data:00405028                                         ; .text:0040264D↑w
.data:0040502C                 align 10h
.data:00405030 ; char *Buffer
.data:00405030 Buffer          dd offset aCopyrightC2005
.data:00405030                                         ; DATA XREF: sub_402DE0+DC↑r
.data:00405030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00405034                 align 10h
.data:00405040 dword_405040    dd 1                    ; DATA XREF: sub_4041C0+22↑r
.data:00405040                                         ; sub_4041C0+65↑r ...
.data:00405044 dword_405044    dd 100h                 ; DATA XREF: sub_4041C0+3F↑o
.data:00405044                                         ; sub_4041C0+1A2↑r ...
.data:00405048 off_405048      dd offset unk_406040    ; DATA XREF: sub_4041C0+1AA↑r
.data:0040504C ; void *off_40504C
.data:0040504C off_40504C      dd offset dword_405044  ; DATA XREF: sub_4041C0+39↑r
.data:0040504C                                         ; sub_4041C0+60↑w ...
.data:00405050 dword_405050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00405054                 align 10h
.data:00405060 ; int Mode
.data:00405060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00405060                                         ; sub_401080+80↑r ...
.data:00405064                 align 10h
.data:00405070 dword_405070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00405070                                         ; sub_401080+BA↑r
.data:00405074                 align 10h
.data:00405080 dword_405080    dd 0                    ; DATA XREF: sub_404A90+9↑r
.data:00405080                                         ; sub_404A90+1D↑w
.data:00405084 off_405084      dd offset dword_404D6C  ; DATA XREF: sub_404A00+6↑r
.data:00405084                                         ; sub_404A00+17↑r ...
.data:00405088                 align 1000h
.data:00405088 _data           ends
.data:00405088
.bss:00406000 ; Section 3. (virtual address 00006000)
.bss:00406000 ; Virtual size                  : 00000230 (    560.)
.bss:00406000 ; Section size in file          : 00000000 (      0.)
.bss:00406000 ; Offset to raw data for section: 00000000
.bss:00406000 ; Flags C0000080: Bss Readable Writable
.bss:00406000 ; Alignment     : default
.bss:00406000 ; ===========================================================================
.bss:00406000
.bss:00406000 ; Segment type: Uninitialized
.bss:00406000 ; Segment permissions: Read/Write
.bss:00406000 _bss            segment para public 'BSS' use32
.bss:00406000                 assume cs:_bss
.bss:00406000                 ;org 406000h
.bss:00406000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00406000 dword_406000    dd ?                    ; DATA XREF: sub_402540+9↑o
.bss:00406000                                         ; sub_402540+17↑w ...
.bss:00406004 dword_406004    dd ?                    ; DATA XREF: sub_402540+21↑w
.bss:00406004                                         ; .text:004025F9↑w
.bss:00406008 dword_406008    dd ?                    ; DATA XREF: sub_402540+77↑r
.bss:00406008                                         ; .text:00402647↑r
.bss:0040600C dword_40600C    dd ?                    ; DATA XREF: sub_402540+6B↑r
.bss:0040600C                                         ; .text:0040263B↑r
.bss:00406010                 db    ? ;
.bss:00406011                 db    ? ;
.bss:00406012                 db    ? ;
.bss:00406013                 db    ? ;
.bss:00406014                 db    ? ;
.bss:00406015                 db    ? ;
.bss:00406016                 db    ? ;
.bss:00406017                 db    ? ;
.bss:00406018                 db    ? ;
.bss:00406019                 db    ? ;
.bss:0040601A                 db    ? ;
.bss:0040601B                 db    ? ;
.bss:0040601C                 db    ? ;
.bss:0040601D                 db    ? ;
.bss:0040601E                 db    ? ;
.bss:0040601F                 db    ? ;
.bss:00406020                 db    ? ;
.bss:00406021                 db    ? ;
.bss:00406022                 db    ? ;
.bss:00406023                 db    ? ;
.bss:00406024                 db    ? ;
.bss:00406025                 db    ? ;
.bss:00406026                 db    ? ;
.bss:00406027                 db    ? ;
.bss:00406028                 db    ? ;
.bss:00406029                 db    ? ;
.bss:0040602A                 db    ? ;
.bss:0040602B                 db    ? ;
.bss:0040602C                 db    ? ;
.bss:0040602D                 db    ? ;
.bss:0040602E                 db    ? ;
.bss:0040602F                 db    ? ;
.bss:00406030 ; char *dword_406030
.bss:00406030 dword_406030    dd ?                    ; DATA XREF: .text:004029E4↑w
.bss:00406030                                         ; sub_402A10+58↑r
.bss:00406034                 align 10h
.bss:00406040 unk_406040      db    ? ;               ; DATA XREF: sub_4041C0+100↑o
.bss:00406040                                         ; .data:off_405048↑o
.bss:00406041                 db    ? ;
.bss:00406042                 db    ? ;
.bss:00406043                 db    ? ;
.bss:00406044                 db    ? ;
.bss:00406045                 db    ? ;
.bss:00406046                 db    ? ;
.bss:00406047                 db    ? ;
.bss:00406048                 db    ? ;
.bss:00406049                 db    ? ;
.bss:0040604A                 db    ? ;
.bss:0040604B                 db    ? ;
.bss:0040604C                 db    ? ;
.bss:0040604D                 db    ? ;
.bss:0040604E                 db    ? ;
.bss:0040604F                 db    ? ;
.bss:00406050                 db    ? ;
.bss:00406051                 db    ? ;
.bss:00406052                 db    ? ;
.bss:00406053                 db    ? ;
.bss:00406054                 db    ? ;
.bss:00406055                 db    ? ;
.bss:00406056                 db    ? ;
.bss:00406057                 db    ? ;
.bss:00406058                 db    ? ;
.bss:00406059                 db    ? ;
.bss:0040605A                 db    ? ;
.bss:0040605B                 db    ? ;
.bss:0040605C                 db    ? ;
.bss:0040605D                 db    ? ;
.bss:0040605E                 db    ? ;
.bss:0040605F                 db    ? ;
.bss:00406060                 db    ? ;
.bss:00406061                 db    ? ;
.bss:00406062                 db    ? ;
.bss:00406063                 db    ? ;
.bss:00406064                 db    ? ;
.bss:00406065                 db    ? ;
.bss:00406066                 db    ? ;
.bss:00406067                 db    ? ;
.bss:00406068                 db    ? ;
.bss:00406069                 db    ? ;
.bss:0040606A                 db    ? ;
.bss:0040606B                 db    ? ;
.bss:0040606C                 db    ? ;
.bss:0040606D                 db    ? ;
.bss:0040606E                 db    ? ;
.bss:0040606F                 db    ? ;
.bss:00406070                 db    ? ;
.bss:00406071                 db    ? ;
.bss:00406072                 db    ? ;
.bss:00406073                 db    ? ;
.bss:00406074                 db    ? ;
.bss:00406075                 db    ? ;
.bss:00406076                 db    ? ;
.bss:00406077                 db    ? ;
.bss:00406078                 db    ? ;
.bss:00406079                 db    ? ;
.bss:0040607A                 db    ? ;
.bss:0040607B                 db    ? ;
.bss:0040607C                 db    ? ;
.bss:0040607D                 db    ? ;
.bss:0040607E                 db    ? ;
.bss:0040607F                 db    ? ;
.bss:00406080                 db    ? ;
.bss:00406081                 db    ? ;
.bss:00406082                 db    ? ;
.bss:00406083                 db    ? ;
.bss:00406084                 db    ? ;
.bss:00406085                 db    ? ;
.bss:00406086                 db    ? ;
.bss:00406087                 db    ? ;
.bss:00406088                 db    ? ;
.bss:00406089                 db    ? ;
.bss:0040608A                 db    ? ;
.bss:0040608B                 db    ? ;
.bss:0040608C                 db    ? ;
.bss:0040608D                 db    ? ;
.bss:0040608E                 db    ? ;
.bss:0040608F                 db    ? ;
.bss:00406090                 db    ? ;
.bss:00406091                 db    ? ;
.bss:00406092                 db    ? ;
.bss:00406093                 db    ? ;
.bss:00406094                 db    ? ;
.bss:00406095                 db    ? ;
.bss:00406096                 db    ? ;
.bss:00406097                 db    ? ;
.bss:00406098                 db    ? ;
.bss:00406099                 db    ? ;
.bss:0040609A                 db    ? ;
.bss:0040609B                 db    ? ;
.bss:0040609C                 db    ? ;
.bss:0040609D                 db    ? ;
.bss:0040609E                 db    ? ;
.bss:0040609F                 db    ? ;
.bss:004060A0                 db    ? ;
.bss:004060A1                 db    ? ;
.bss:004060A2                 db    ? ;
.bss:004060A3                 db    ? ;
.bss:004060A4                 db    ? ;
.bss:004060A5                 db    ? ;
.bss:004060A6                 db    ? ;
.bss:004060A7                 db    ? ;
.bss:004060A8                 db    ? ;
.bss:004060A9                 db    ? ;
.bss:004060AA                 db    ? ;
.bss:004060AB                 db    ? ;
.bss:004060AC                 db    ? ;
.bss:004060AD                 db    ? ;
.bss:004060AE                 db    ? ;
.bss:004060AF                 db    ? ;
.bss:004060B0                 db    ? ;
.bss:004060B1                 db    ? ;
.bss:004060B2                 db    ? ;
.bss:004060B3                 db    ? ;
.bss:004060B4                 db    ? ;
.bss:004060B5                 db    ? ;
.bss:004060B6                 db    ? ;
.bss:004060B7                 db    ? ;
.bss:004060B8                 db    ? ;
.bss:004060B9                 db    ? ;
.bss:004060BA                 db    ? ;
.bss:004060BB                 db    ? ;
.bss:004060BC                 db    ? ;
.bss:004060BD                 db    ? ;
.bss:004060BE                 db    ? ;
.bss:004060BF                 db    ? ;
.bss:004060C0                 db    ? ;
.bss:004060C1                 db    ? ;
.bss:004060C2                 db    ? ;
.bss:004060C3                 db    ? ;
.bss:004060C4                 db    ? ;
.bss:004060C5                 db    ? ;
.bss:004060C6                 db    ? ;
.bss:004060C7                 db    ? ;
.bss:004060C8                 db    ? ;
.bss:004060C9                 db    ? ;
.bss:004060CA                 db    ? ;
.bss:004060CB                 db    ? ;
.bss:004060CC                 db    ? ;
.bss:004060CD                 db    ? ;
.bss:004060CE                 db    ? ;
.bss:004060CF                 db    ? ;
.bss:004060D0                 db    ? ;
.bss:004060D1                 db    ? ;
.bss:004060D2                 db    ? ;
.bss:004060D3                 db    ? ;
.bss:004060D4                 db    ? ;
.bss:004060D5                 db    ? ;
.bss:004060D6                 db    ? ;
.bss:004060D7                 db    ? ;
.bss:004060D8                 db    ? ;
.bss:004060D9                 db    ? ;
.bss:004060DA                 db    ? ;
.bss:004060DB                 db    ? ;
.bss:004060DC                 db    ? ;
.bss:004060DD                 db    ? ;
.bss:004060DE                 db    ? ;
.bss:004060DF                 db    ? ;
.bss:004060E0                 db    ? ;
.bss:004060E1                 db    ? ;
.bss:004060E2                 db    ? ;
.bss:004060E3                 db    ? ;
.bss:004060E4                 db    ? ;
.bss:004060E5                 db    ? ;
.bss:004060E6                 db    ? ;
.bss:004060E7                 db    ? ;
.bss:004060E8                 db    ? ;
.bss:004060E9                 db    ? ;
.bss:004060EA                 db    ? ;
.bss:004060EB                 db    ? ;
.bss:004060EC                 db    ? ;
.bss:004060ED                 db    ? ;
.bss:004060EE                 db    ? ;
.bss:004060EF                 db    ? ;
.bss:004060F0                 db    ? ;
.bss:004060F1                 db    ? ;
.bss:004060F2                 db    ? ;
.bss:004060F3                 db    ? ;
.bss:004060F4                 db    ? ;
.bss:004060F5                 db    ? ;
.bss:004060F6                 db    ? ;
.bss:004060F7                 db    ? ;
.bss:004060F8                 db    ? ;
.bss:004060F9                 db    ? ;
.bss:004060FA                 db    ? ;
.bss:004060FB                 db    ? ;
.bss:004060FC                 db    ? ;
.bss:004060FD                 db    ? ;
.bss:004060FE                 db    ? ;
.bss:004060FF                 db    ? ;
.bss:00406100                 db    ? ;
.bss:00406101                 db    ? ;
.bss:00406102                 db    ? ;
.bss:00406103                 db    ? ;
.bss:00406104                 db    ? ;
.bss:00406105                 db    ? ;
.bss:00406106                 db    ? ;
.bss:00406107                 db    ? ;
.bss:00406108                 db    ? ;
.bss:00406109                 db    ? ;
.bss:0040610A                 db    ? ;
.bss:0040610B                 db    ? ;
.bss:0040610C                 db    ? ;
.bss:0040610D                 db    ? ;
.bss:0040610E                 db    ? ;
.bss:0040610F                 db    ? ;
.bss:00406110                 db    ? ;
.bss:00406111                 db    ? ;
.bss:00406112                 db    ? ;
.bss:00406113                 db    ? ;
.bss:00406114                 db    ? ;
.bss:00406115                 db    ? ;
.bss:00406116                 db    ? ;
.bss:00406117                 db    ? ;
.bss:00406118                 db    ? ;
.bss:00406119                 db    ? ;
.bss:0040611A                 db    ? ;
.bss:0040611B                 db    ? ;
.bss:0040611C                 db    ? ;
.bss:0040611D                 db    ? ;
.bss:0040611E                 db    ? ;
.bss:0040611F                 db    ? ;
.bss:00406120                 db    ? ;
.bss:00406121                 db    ? ;
.bss:00406122                 db    ? ;
.bss:00406123                 db    ? ;
.bss:00406124                 db    ? ;
.bss:00406125                 db    ? ;
.bss:00406126                 db    ? ;
.bss:00406127                 db    ? ;
.bss:00406128                 db    ? ;
.bss:00406129                 db    ? ;
.bss:0040612A                 db    ? ;
.bss:0040612B                 db    ? ;
.bss:0040612C                 db    ? ;
.bss:0040612D                 db    ? ;
.bss:0040612E                 db    ? ;
.bss:0040612F                 db    ? ;
.bss:00406130                 db    ? ;
.bss:00406131                 db    ? ;
.bss:00406132                 db    ? ;
.bss:00406133                 db    ? ;
.bss:00406134                 db    ? ;
.bss:00406135                 db    ? ;
.bss:00406136                 db    ? ;
.bss:00406137                 db    ? ;
.bss:00406138                 db    ? ;
.bss:00406139                 db    ? ;
.bss:0040613A                 db    ? ;
.bss:0040613B                 db    ? ;
.bss:0040613C                 db    ? ;
.bss:0040613D                 db    ? ;
.bss:0040613E                 db    ? ;
.bss:0040613F                 db    ? ;
.bss:00406140 dword_406140    dd ?                    ; DATA XREF: .text:loc_403B51↑o
.bss:00406140                                         ; .text:loc_403B70↑o ...
.bss:00406144 dword_406144    dd ?                    ; DATA XREF: .text:loc_403BF0↑o
.bss:00406144                                         ; .text:00404078↑r ...
.bss:00406148 dword_406148    dd ?                    ; DATA XREF: .text:00404072↑r
.bss:00406148                                         ; sub_404120+2C↑r
.bss:0040614C dword_40614C    dd ?                    ; DATA XREF: .text:00404066↑r
.bss:0040614C                                         ; sub_404120+22↑r
.bss:00406150 dword_406150    dd ?                    ; DATA XREF: .text:00404082↑r
.bss:00406150                                         ; sub_404120+36↑r
.bss:00406154 dword_406154    dd ?                    ; DATA XREF: .text:00404092↑r
.bss:00406154                                         ; sub_404120+4E↑r
.bss:00406158 dword_406158    dd ?                    ; DATA XREF: .text:004040AF↑r
.bss:00406158                                         ; sub_404120+62↑r
.bss:0040615C dword_40615C    dd ?                    ; DATA XREF: .text:004040A5↑r
.bss:0040615C                                         ; sub_404120+70↑r
.bss:00406160 dword_406160    dd ?                    ; DATA XREF: .text:00404088↑r
.bss:00406160                                         ; sub_404120+7A↑r
.bss:00406164                 align 10h
.bss:00406170 ; char *Str1
.bss:00406170 Str1            dd ?                    ; DATA XREF: sub_404814:loc_40484D↑w
.bss:00406170                                         ; sub_404814:loc_404980↑r
.bss:00406174                 align 10h
.bss:00406180 dword_406180    dd ?                    ; DATA XREF: sub_404814+2D↑r
.bss:00406180                                         ; sub_404814+3F↑w
.bss:00406184                 align 10h
.bss:00406190 dword_406190    dd ?                    ; DATA XREF: sub_401350+2F↑w
.bss:00406190                                         ; sub_401350+F3↑r ...
.bss:00406194                 db    ? ;
.bss:00406195                 db    ? ;
.bss:00406196                 db    ? ;
.bss:00406197                 db    ? ;
.bss:00406198                 db    ? ;
.bss:00406199                 db    ? ;
.bss:0040619A                 db    ? ;
.bss:0040619B                 db    ? ;
.bss:0040619C                 db    ? ;
.bss:0040619D                 db    ? ;
.bss:0040619E                 db    ? ;
.bss:0040619F                 db    ? ;
.bss:004061A0                 db    ? ;
.bss:004061A1                 db    ? ;
.bss:004061A2                 db    ? ;
.bss:004061A3                 db    ? ;
.bss:004061A4                 db    ? ;
.bss:004061A5                 db    ? ;
.bss:004061A6                 db    ? ;
.bss:004061A7                 db    ? ;
.bss:004061A8                 db    ? ;
.bss:004061A9                 db    ? ;
.bss:004061AA                 db    ? ;
.bss:004061AB                 db    ? ;
.bss:004061AC                 db    ? ;
.bss:004061AD                 db    ? ;
.bss:004061AE                 db    ? ;
.bss:004061AF                 db    ? ;
.bss:004061B0 dword_4061B0    dd ?                    ; DATA XREF: sub_402540+71↑w
.bss:004061B0                                         ; .text:00402641↑w
.bss:004061B4                 align 10h
.bss:004061C0 dword_4061C0    dd ?                    ; CODE XREF: sub_404814+63↑p
.bss:004061C0                                         ; DATA XREF: sub_404710+1E↑r ...
.bss:004061C4                 align 10h
.bss:004061D0 dword_4061D0    dd ?                    ; DATA XREF: sub_404710+4E↑w
.bss:004061D0                                         ; sub_404814+AB↑w
.bss:004061D4                 align 40h
.bss:00406200 dword_406200    dd ?                    ; DATA XREF: sub_404814+13↑r
.bss:00406204                 align 1000h
.bss:00406204 _bss            ends
.bss:00406204
.idata:00407000 ; Section 4. (virtual address 00007000)
.idata:00407000 ; Virtual size                  : 00000538 (   1336.)
.idata:00407000 ; Section size in file          : 00000600 (   1536.)
.idata:00407000 ; Offset to raw data for section: 00004400
.idata:00407000 ; Flags C0000040: Data Readable Writable
.idata:00407000 ; Alignment     : default
.idata:00407000 ; ===========================================================================
.idata:00407000
.idata:00407000 ; Segment type: Externs
.idata:00407000 ; _idata
.idata:00407000
.idata:00407001
.idata:00407138 ;
.idata:00407138 ; Imports from libintl3.dll
.idata:00407138 ;
.idata:00407138                 extrn __imp_libintl_bindtextdomain:dword
.idata:00407138                                         ; CODE XREF: sub_401350+49↑p
.idata:00407138                                         ; DATA XREF: sub_401350+49↑r ...
.idata:0040713C                 extrn libintl_gettext:dword
.idata:0040713C                                         ; CODE XREF: sub_401350+E7↑p
.idata:0040713C                                         ; sub_401690+16↑p ...
.idata:00407140                 extrn libintl_textdomain:dword
.idata:00407140                                         ; CODE XREF: sub_401350+56↑p
.idata:00407140                                         ; DATA XREF: sub_401350+56↑r ...
.idata:00407144
.idata:0040714C ;
.idata:0040714C ; Imports from KERNEL32.dll
.idata:0040714C ;
.idata:0040714C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040714C                 extrn __imp_ExitProcess:dword
.idata:0040714C                                         ; DATA XREF: ExitProcess↑r
.idata:00407150 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00407150                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00407150                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00407154
.idata:0040715C ;
.idata:0040715C ; Imports from MSVCP60.DLL
.idata:0040715C ;
.idata:0040715C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040715C                 extrn __imp_mbrtowc:dword
.idata:0040715C                                         ; DATA XREF: mbrtowc↑r
.idata:00407160
.idata:00407168 ;
.idata:00407168 ; Imports from msvcrt.dll
.idata:00407168 ;
.idata:00407168                 extrn __imp___getmainargs:dword
.idata:00407168                                         ; DATA XREF: __getmainargs↑r
.idata:0040716C ; int _mb_cur_max
.idata:0040716C                 extrn __mb_cur_max:dword
.idata:0040716C                                         ; DATA XREF: sub_403080+7↑r
.idata:0040716C                                         ; sub_403080+5F3↑r
.idata:00407170 ; char ***(__cdecl *__p__environ)()
.idata:00407170                 extrn __imp___p__environ:dword
.idata:00407170                                         ; DATA XREF: __p__environ↑r
.idata:00407174 ; int *(__cdecl *__p__fmode)()
.idata:00407174                 extrn __imp___p__fmode:dword
.idata:00407174                                         ; DATA XREF: __p__fmode↑r
.idata:00407178 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00407178                 extrn __set_app_type:dword
.idata:00407178                                         ; CODE XREF: start+D↑p
.idata:00407178                                         ; .text:0040102D↑p
.idata:00407178                                         ; DATA XREF: ...
.idata:0040717C ; void (__cdecl *_cexit)()
.idata:0040717C                 extrn __imp__cexit:dword
.idata:0040717C                                         ; DATA XREF: _cexit↑r
.idata:00407180 ; int *(__cdecl *_errno)()
.idata:00407180                 extrn __imp__errno:dword
.idata:00407180                                         ; DATA XREF: _errno↑r
.idata:00407184 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00407184                 extrn __imp__flsbuf:dword
.idata:00407184                                         ; DATA XREF: _flsbuf↑r
.idata:00407188 ; FILE iob[]
.idata:00407188                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00407188                                         ; sub_401080+75↑r ...
.idata:0040718C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040718C                 extrn __imp__isctype:dword
.idata:0040718C                                         ; DATA XREF: _isctype↑r
.idata:00407190 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00407190                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00407190                                         ; DATA XREF: .text:0040106C↑r
.idata:00407194 ; const unsigned __int16 *pctype
.idata:00407194                 extrn _pctype:dword     ; DATA XREF: sub_403080:loc_403774↑r
.idata:00407198 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00407198                 extrn __imp__setmode:dword
.idata:00407198                                         ; DATA XREF: _setmode↑r
.idata:0040719C ; void (__cdecl __noreturn *abort)()
.idata:0040719C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004071A0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004071A0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004071A0                                         ; DATA XREF: sub_401040+C↑r
.idata:004071A4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004071A4                 extrn __imp_calloc:dword
.idata:004071A4                                         ; DATA XREF: calloc↑r
.idata:004071A8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004071A8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004071AC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004071AC                 extrn __imp_fclose:dword
.idata:004071AC                                         ; DATA XREF: fclose↑r
.idata:004071B0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004071B0                 extrn __imp_fflush:dword
.idata:004071B0                                         ; DATA XREF: fflush↑r
.idata:004071B4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004071B4                 extrn __imp_fprintf:dword
.idata:004071B4                                         ; DATA XREF: fprintf↑r
.idata:004071B8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004071B8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004071BC ; void (__cdecl *free)(void *Block)
.idata:004071BC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004071C0 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004071C0                 extrn __imp_getenv:dword
.idata:004071C0                                         ; DATA XREF: getenv↑r
.idata:004071C4 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004071C4                 extrn __imp_iswctype:dword
.idata:004071C4                                         ; DATA XREF: iswctype↑r
.idata:004071C8 ; void *(__cdecl *malloc)(size_t Size)
.idata:004071C8                 extrn __imp_malloc:dword
.idata:004071C8                                         ; DATA XREF: malloc↑r
.idata:004071CC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004071CC                 extrn __imp_memcpy:dword
.idata:004071CC                                         ; DATA XREF: memcpy↑r
.idata:004071D0 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004071D0                 extrn __imp_memset:dword
.idata:004071D0                                         ; DATA XREF: memset↑r
.idata:004071D4 ; int (*printf)(const char *const Format, ...)
.idata:004071D4                 extrn __imp_printf:dword
.idata:004071D4                                         ; DATA XREF: printf↑r
.idata:004071D8 ; int (__cdecl *puts)(const char *Buffer)
.idata:004071D8                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:004071DC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004071DC                 extrn __imp_realloc:dword
.idata:004071DC                                         ; DATA XREF: realloc↑r
.idata:004071E0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004071E0                 extrn __imp_setlocale:dword
.idata:004071E0                                         ; DATA XREF: setlocale↑r
.idata:004071E4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004071E4                 extrn __imp_signal:dword
.idata:004071E4                                         ; DATA XREF: signal↑r
.idata:004071E8 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004071E8                 extrn __imp_strchr:dword
.idata:004071E8                                         ; DATA XREF: strchr↑r
.idata:004071EC ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004071EC                 extrn __imp_strcmp:dword
.idata:004071EC                                         ; DATA XREF: strcmp↑r
.idata:004071F0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004071F0                 extrn __imp_strerror:dword
.idata:004071F0                                         ; DATA XREF: strerror↑r
.idata:004071F4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004071F4                 extrn __imp_strlen:dword
.idata:004071F4                                         ; DATA XREF: strlen↑r
.idata:004071F8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004071F8                 extrn __imp_strncmp:dword
.idata:004071F8                                         ; DATA XREF: strncmp↑r
.idata:004071FC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004071FC                 extrn __imp_vfprintf:dword
.idata:004071FC                                         ; DATA XREF: vfprintf↑r
.idata:00407200
.idata:00407200
.idata:00407200
.idata:00407200                 end start
