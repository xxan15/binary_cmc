.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : DCDC7A6F912CF4422B08476742DA5081BAD90D1E209AAD83B525530BC2CFC292
.text:00401000 ; Input MD5    : 0C01D30F9B3CC1D0041D0D0739829F38
.text:00401000 ; Input CRC32  : A04074BE
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/cut.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A254 (Wed Apr 20 18:41:24 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00007A30 (  31280.)
.text:00401000 ; Section size in file          : 00007C00 (  31744.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401CE0+67↓p
.text:00401040                                         ; .text:004086A0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_408640
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_409000
.text:004010A2                 mov     edx, dword_409050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_409004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_409070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_409070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_408610
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_409000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_409004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401CE0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_408640
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aBytes          db 'bytes',0            ; DATA XREF: .text:off_4012E0↓o
.text:00401286 aCharacters     db 'characters',0       ; DATA XREF: .text:004012F0↓o
.text:00401291 aFields         db 'fields',0           ; DATA XREF: .text:00401300↓o
.text:00401298 aDelimiter      db 'delimiter',0        ; DATA XREF: .text:00401310↓o
.text:004012A2 aOnlyDelimited  db 'only-delimited',0   ; DATA XREF: .text:00401320↓o
.text:004012B1 aOutputDelimite db 'output-delimiter',0 ; DATA XREF: .text:00401330↓o
.text:004012C2 aComplement     db 'complement',0       ; DATA XREF: .text:00401340↓o
.text:004012CD aHelp           db 'help',0             ; DATA XREF: .text:00401350↓o
.text:004012D2 aVersion        db 'version',0          ; DATA XREF: .text:00401360↓o
.text:004012DA                 align 10h
.text:004012E0 off_4012E0      dd offset aBytes        ; DATA XREF: sub_401CE0+98↓o
.text:004012E0                                         ; "bytes"
.text:004012E4                 dd 1, 0
.text:004012EC                 dd 62h
.text:004012F0                 dd offset aCharacters   ; "characters"
.text:004012F4                 dd 1, 0
.text:004012FC                 dd 63h
.text:00401300                 dd offset aFields       ; "fields"
.text:00401304                 dd 1, 0
.text:0040130C                 dd 66h
.text:00401310                 dd offset aDelimiter    ; "delimiter"
.text:00401314                 dd 1, 0
.text:0040131C                 dd 64h
.text:00401320                 dd offset aOnlyDelimited ; "only-delimited"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 73h
.text:00401330                 dd offset aOutputDelimite ; "output-delimiter"
.text:00401334                 dd 1, 0
.text:0040133C                 dd 80h
.text:00401340                 dd offset aComplement   ; "complement"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 81h
.text:00401350                 dd offset aHelp         ; "help"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 0FFFFFF7Eh
.text:00401360                 dd offset aVersion      ; "version"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401380 ; const char Locale
.text:00401380 Locale          db 0                    ; DATA XREF: sub_401CE0+24↓o
.text:00401381                 align 20h
.text:004013A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013A0                                         ; DATA XREF: sub_401CE0+3E↓o
.text:004013C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401CE0+46↓o
.text:004013C3                                         ; sub_401CE0+53↓o
.text:004013CD aBCDFNs         db 'b:c:d:f:ns',0       ; DATA XREF: sub_401CE0+A0↓o
.text:004013D8                 align 10h
.text:004013E0 aOnlyOneTypeOfL db 'only one type of list may be specified',0
.text:004013E0                                         ; DATA XREF: sub_401CE0:loc_401DE3↓o
.text:00401407                 align 20h
.text:00401420 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401420                                         ; DATA XREF: sub_401CE0:loc_401E08↓o
.text:00401420                                         ; .text:004022DC↓o ...
.text:00401447 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401CE0+175↓o
.text:00401454 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401CE0+17D↓o
.text:00401464 aDavidIhnat     db 'David Ihnat',0      ; DATA XREF: sub_401CE0+188↓o
.text:00401470 a530            db '5.3.0',0            ; DATA XREF: sub_401CE0+190↓o
.text:00401476 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401CE0+198↓o
.text:00401484 ; const FILE stru_401484
.text:00401484 stru_401484     FILE <747563h, 90909090h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:00401484                                         ; DATA XREF: sub_401CE0+1A0↓o
.text:00401484                       90909090h, 67617355h>
.text:004014A4                 db  65h ; e
.text:004014A5                 db  3Ah ; :
.text:004014A6                 db  20h
.text:004014A7                 db  25h ; %
.text:004014A8                 db  73h ; s
.text:004014A9                 db  20h
.text:004014AA                 db  5Bh ; [
.text:004014AB                 db  4Fh ; O
.text:004014AC                 db  50h ; P
.text:004014AD                 db  54h ; T
.text:004014AE                 db  49h ; I
.text:004014AF                 db  4Fh ; O
.text:004014B0                 db  4Eh ; N
.text:004014B1                 db  5Dh ; ]
.text:004014B2                 db  2Eh ; .
.text:004014B3                 db  2Eh ; .
.text:004014B4                 db  2Eh ; .
.text:004014B5                 db  20h
.text:004014B6                 db  5Bh ; [
.text:004014B7                 db  46h ; F
.text:004014B8                 db  49h ; I
.text:004014B9                 db  4Ch ; L
.text:004014BA                 db  45h ; E
.text:004014BB                 db  5Dh ; ]
.text:004014BC                 db  2Eh ; .
.text:004014BD                 db  2Eh ; .
.text:004014BE                 db  2Eh ; .
.text:004014BF                 db  0Ah
.text:004014C0                 db    0
.text:004014C1                 align 20h
.text:004014E0 aPrintSelectedP db 'Print selected parts of lines from each FILE to standard output.',0Ah
.text:004014E0                                         ; DATA XREF: sub_401CE0+1D8↓o
.text:004014E0                                         ; .text:0040232F↓o
.text:004014E0                 db 0Ah,0
.text:00401523                 align 20h
.text:00401540 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401540                                         ; DATA XREF: sub_401CE0+1FA↓o
.text:00401540                                         ; .text:00402351↓o
.text:00401540                 db 'ns too.',0Ah,0
.text:0040158A                 align 20h
.text:004015A0 aBBytesListSele db '  -b, --bytes=LIST        select only these bytes',0Ah
.text:004015A0                                         ; DATA XREF: sub_401CE0+21C↓o
.text:004015A0                                         ; .text:00402373↓o
.text:004015A0                 db '  -c, --characters=LIST   select only these characters',0Ah
.text:004015A0                 db '  -d, --delimiter=DELIM   use DELIM instead of TAB for field deli'
.text:004015A0                 db 'miter',0Ah,0
.text:00401651                 db 0EBh, 0Dh, 90h
.text:00401654                 align 10h
.text:00401660 aFFieldsListSel db '  -f, --fields=LIST       select only these fields;  also print a'
.text:00401660                                         ; DATA XREF: sub_401CE0+23E↓o
.text:00401660                                         ; .text:00402395↓o
.text:00401660                 db 'ny line',0Ah
.text:00401660                 db '                            that contains no delimiter character,'
.text:00401660                 db ' unless',0Ah
.text:00401660                 db '                            the -s option is specified',0Ah
.text:00401660                 db '  -n                      (ignored)',0Ah,0
.text:0040174E                 align 20h
.text:00401760 aComplementComp db '      --complement        complement the set of selected bytes, c'
.text:00401760                                         ; DATA XREF: sub_401CE0+260↓o
.text:00401760                                         ; .text:004023B7↓o
.text:00401760                 db 'haracters',0Ah
.text:00401760                 db '                            or fields.',0Ah,0
.text:004017D3                 align 10h
.text:004017E0 aSOnlyDelimited db '  -s, --only-delimited    do not print lines not containing delim'
.text:004017E0                                         ; DATA XREF: sub_401CE0+282↓o
.text:004017E0                                         ; .text:004023D9↓o
.text:004017E0                 db 'iters',0Ah
.text:004017E0                 db '      --output-delimiter=STRING  use STRING as the output delimit'
.text:004017E0                 db 'er',0Ah
.text:004017E0                 db '                            the default is to use the input delim'
.text:004017E0                 db 'iter',0Ah,0
.text:004018B2                 align 10h
.text:004018C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004018C0                                         ; DATA XREF: sub_401CE0+2A4↓o
.text:004018C0                                         ; .text:004023FB↓o
.text:004018ED                 align 20h
.text:00401900 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401900                                         ; DATA XREF: sub_401CE0+2C6↓o
.text:00401900                                         ; .text:0040241D↓o
.text:00401936                 align 10h
.text:00401940 aUseOneAndOnlyO db 0Ah                  ; DATA XREF: sub_401CE0+2E8↓o
.text:00401940                                         ; .text:0040243F↓o
.text:00401940                 db 'Use one, and only one of -b, -c or -f.  Each LIST is made up of o'
.text:00401940                 db 'ne',0Ah
.text:00401940                 db 'range, or many ranges separated by commas.  Selected input is wri'
.text:00401940                 db 'tten',0Ah
.text:00401940                 db 'in the same order that it is read, and is written exactly once.',0Ah
.text:00401940                 db 'Each range is one of:',0Ah
.text:00401940                 db 0Ah
.text:00401940                 db '  N     N',27h,'th byte, character or field, counted from 1',0Ah
.text:00401940                 db '  N-    from N',27h,'th byte, character or field, to end of line',0Ah
.text:00401940                 db '  N-M   from N',27h,'th to M',27h,'th (included) byte, character '
.text:00401940                 db 'or field',0Ah
.text:00401940                 db '  -M    from first to M',27h,'th (included) byte, character or fi'
.text:00401940                 db 'eld',0Ah
.text:00401940                 db 0Ah
.text:00401940                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.text:00401B48 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401CE0+30A↓o
.text:00401B48                                         ; .text:00402461↓o
.text:00401B48                 db 'Report bugs to <%s>.',0Ah,0
.text:00401B5F aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401B5F                                         ; DATA XREF: sub_401CE0+317↓o
.text:00401B5F                                         ; .text:0040246E↓o
.text:00401B75                 align 10h
.text:00401B80 aTheDelimiterMu db 'the delimiter must be a single character',0
.text:00401B80                                         ; DATA XREF: sub_401CE0:loc_4020E5↓o
.text:00401BA9 aMissingListOfF db 'missing list of fields',0
.text:00401BA9                                         ; DATA XREF: sub_401CE0+499↓o
.text:00401BC0 aMissingListOfP db 'missing list of positions',0
.text:00401BC0                                         ; DATA XREF: sub_401CE0:loc_402185↓o
.text:00401BDA ; const char FileName[]
.text:00401BDA FileName        db '-',0                ; DATA XREF: sub_401CE0+53F↓o
.text:00401BDA                                         ; sub_401CE0:loc_402288↓o ...
.text:00401BDC                 align 10h
.text:00401BE0 aSuppressingNon db 'suppressing non-delimited lines makes sense',0Ah
.text:00401BE0                                         ; DATA XREF: sub_401CE0:loc_4022A0↓o
.text:00401BE0                 db 9,'only when operating on fields',0
.text:00401C2B                 align 20h
.text:00401C40 aAnInputDelimit db 'an input delimiter may be specified only when operating on fields'
.text:00401C40                                         ; DATA XREF: sub_401CE0:loc_4022AC↓o
.text:00401C40                 db 0
.text:00401C82                 align 20h
.text:00401CA0 aYouMustSpecify db 'you must specify a list of bytes, characters, or fields',0
.text:00401CA0                                         ; DATA XREF: sub_401CE0:loc_4022B8↓o
.text:00401CD8                 align 10h
.text:00401CE0
.text:00401CE0 ; =============== S U B R O U T I N E =======================================
.text:00401CE0
.text:00401CE0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401CE0
.text:00401CE0 sub_401CE0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401CE0
.text:00401CE0 Category        = dword ptr -38h
.text:00401CE0 Locale          = dword ptr -34h
.text:00401CE0 var_30          = dword ptr -30h
.text:00401CE0 var_2C          = byte ptr -2Ch
.text:00401CE0 var_28          = byte ptr -28h
.text:00401CE0 var_24          = dword ptr -24h
.text:00401CE0 var_20          = dword ptr -20h
.text:00401CE0 var_1C          = dword ptr -1Ch
.text:00401CE0 var_F           = byte ptr -0Fh
.text:00401CE0 var_E           = byte ptr -0Eh
.text:00401CE0 var_D           = byte ptr -0Dh
.text:00401CE0 arg_0           = dword ptr  8
.text:00401CE0 arg_4           = dword ptr  0Ch
.text:00401CE0
.text:00401CE0                 push    ebp
.text:00401CE1                 xor     eax, eax
.text:00401CE3                 mov     ebp, esp
.text:00401CE5                 push    edi
.text:00401CE6                 push    esi
.text:00401CE7                 push    ebx
.text:00401CE8                 sub     esp, 2Ch
.text:00401CEB                 mov     ebx, [ebp+arg_4]
.text:00401CEE                 and     esp, 0FFFFFFF0h
.text:00401CF1                 mov     esi, [ebp+arg_0]
.text:00401CF4                 call    __alloca
.text:00401CF9                 call    sub_4086E0
.text:00401CFE                 mov     [ebp+var_E], 0
.text:00401D02                 mov     edx, [ebx]
.text:00401D04                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401D0C                 mov     [esp+38h+Category], 0 ; Category
.text:00401D13                 mov     ds:dword_40A2F0, edx
.text:00401D19                 call    setlocale
.text:00401D1E                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401D26                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401D2D                 call    ds:__imp_libintl_bindtextdomain
.text:00401D33                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401D3A                 call    ds:libintl_textdomain
.text:00401D40                 mov     [esp+38h+Category], offset sub_4059C0 ; void (__cdecl *)()
.text:00401D47                 call    sub_401040
.text:00401D4C                 mov     ds:byte_40A080, 0
.text:00401D53                 xor     edx, edx
.text:00401D55                 mov     ds:dword_40A070, edx
.text:00401D5B                 mov     ds:byte_40A0A0, 0
.text:00401D62                 mov     ds:byte_40A0E0, 0
.text:00401D69                 lea     esi, [esi+0]
.text:00401D70
.text:00401D70 loc_401D70:                             ; CODE XREF: sub_401CE0+101↓j
.text:00401D70                                         ; sub_401CE0+346↓j ...
.text:00401D70                 mov     dword ptr [esp+38h+var_28], 0
.text:00401D78                 mov     dword ptr [esp+38h+var_2C], offset off_4012E0 ; char
.text:00401D80                 mov     [esp+38h+var_30], offset aBCDFNs ; "b:c:d:f:ns"
.text:00401D88                 mov     [esp+38h+Locale], ebx
.text:00401D8C                 mov     [esp+38h+Category], esi
.text:00401D8F                 call    sub_405850
.text:00401D94                 cmp     eax, 0FFFFFFFFh
.text:00401D97                 jz      loc_4020F1
.text:00401D9D                 cmp     eax, 64h ; 'd'
.text:00401DA0                 jz      loc_4020C0
.text:00401DA6                 cmp     eax, 64h ; 'd'
.text:00401DA9                 jg      loc_402010
.text:00401DAF                 cmp     eax, 0FFFFFF7Eh
.text:00401DB4                 jz      loc_401E99
.text:00401DBA                 cmp     eax, 0FFFFFF7Eh
.text:00401DBF                 jle     short loc_401E40
.text:00401DC1                 cmp     eax, 62h ; 'b'
.text:00401DC4                 jl      short loc_401E08
.text:00401DC6                 mov     ecx, ds:dword_40A070
.text:00401DCC                 test    ecx, ecx
.text:00401DCE                 jnz     short loc_401DE3
.text:00401DD0                 mov     edi, 1
.text:00401DD5                 mov     ds:dword_40A070, edi
.text:00401DDB
.text:00401DDB loc_401DDB:                             ; CODE XREF: sub_401CE0+369↓j
.text:00401DDB                 mov     edi, ds:Str
.text:00401DE1                 jmp     short loc_401D70
.text:00401DE3 ; ---------------------------------------------------------------------------
.text:00401DE3
.text:00401DE3 loc_401DE3:                             ; CODE XREF: sub_401CE0+EE↑j
.text:00401DE3                                         ; sub_401CE0+359↓j
.text:00401DE3                 mov     [esp+38h+Category], offset aOnlyOneTypeOfL ; "only one type of list may be specified"
.text:00401DEA
.text:00401DEA loc_401DEA:                             ; CODE XREF: sub_401CE0+40C↓j
.text:00401DEA                                         ; sub_401CE0+4A0↓j ...
.text:00401DEA                 call    ds:libintl_gettext
.text:00401DF0                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401DF8                 mov     [esp+38h+Category], 0 ; Code
.text:00401DFF                 mov     [esp+38h+var_30], eax ; char *
.text:00401E03                 call    sub_407100
.text:00401E08
.text:00401E08 loc_401E08:                             ; CODE XREF: sub_401CE0+E4↑j
.text:00401E08                                         ; sub_401CE0+165↓j ...
.text:00401E08                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401E0F                 call    ds:libintl_gettext
.text:00401E15                 mov     ebx, ds:_iob
.text:00401E1B                 mov     esi, ds:dword_40A2F0
.text:00401E21                 add     ebx, 40h ; '@'
.text:00401E24                 mov     [esp+38h+var_30], esi
.text:00401E28                 mov     [esp+38h+Locale], eax ; Format
.text:00401E2C                 mov     [esp+38h+Category], ebx ; Stream
.text:00401E2F                 call    fprintf
.text:00401E34                 mov     [esp+38h+Category], 1 ; Code
.text:00401E3B
.text:00401E3B loc_401E3B:                             ; CODE XREF: sub_401CE0+1B7↓j
.text:00401E3B                                         ; sub_401CE0+524↓j
.text:00401E3B                 call    exit
.text:00401E40 ; ---------------------------------------------------------------------------
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401CE0+DF↑j
.text:00401E40                 cmp     eax, 0FFFFFF7Dh
.text:00401E45                 jnz     short loc_401E08
.text:00401E47                 mov     [esp+38h+var_1C], 0
.text:00401E4F                 mov     edx, ds:_iob
.text:00401E55                 mov     [esp+38h+var_20], offset aJimMeyering ; "Jim Meyering"
.text:00401E5D                 mov     [esp+38h+var_24], offset aDavidMackenzie ; "David MacKenzie"
.text:00401E65                 add     edx, 20h ; ' '
.text:00401E68                 mov     dword ptr [esp+38h+var_28], offset aDavidIhnat ; "David Ihnat"
.text:00401E70                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:00401E78                 mov     [esp+38h+var_30], offset aGnuCoreutils ; "GNU coreutils"
.text:00401E80                 mov     [esp+38h+Locale], offset stru_401484 ; FILE *
.text:00401E88                 mov     [esp+38h+Category], edx ; FILE *
.text:00401E8B                 call    sub_405540
.text:00401E90
.text:00401E90 loc_401E90:                             ; CODE XREF: sub_401CE0+327↓j
.text:00401E90                 mov     [esp+38h+Category], 0
.text:00401E97                 jmp     short loc_401E3B
.text:00401E99 ; ---------------------------------------------------------------------------
.text:00401E99
.text:00401E99 loc_401E99:                             ; CODE XREF: sub_401CE0+D4↑j
.text:00401E99                 mov     [esp+38h+Category], offset stru_401484._tmpfname
.text:00401EA0                 call    ds:libintl_gettext
.text:00401EA6                 mov     ebx, ds:dword_40A2F0
.text:00401EAC                 mov     [esp+38h+Category], eax ; Format
.text:00401EAF                 mov     [esp+38h+Locale], ebx
.text:00401EB3                 call    printf
.text:00401EB8                 mov     [esp+38h+Category], offset aPrintSelectedP ; "Print selected parts of lines from each"...
.text:00401EBF                 call    ds:libintl_gettext
.text:00401EC5                 mov     edi, ds:_iob
.text:00401ECB                 add     edi, 20h ; ' '
.text:00401ECE                 mov     [esp+38h+Locale], edi ; Stream
.text:00401ED2                 mov     [esp+38h+Category], eax ; Buffer
.text:00401ED5                 call    fputs
.text:00401EDA                 mov     [esp+38h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401EE1                 call    ds:libintl_gettext
.text:00401EE7                 mov     ecx, ds:_iob
.text:00401EED                 add     ecx, 20h ; ' '
.text:00401EF0                 mov     [esp+38h+Locale], ecx ; Stream
.text:00401EF4                 mov     [esp+38h+Category], eax ; Buffer
.text:00401EF7                 call    fputs
.text:00401EFC                 mov     [esp+38h+Category], offset aBBytesListSele ; "  -b, --bytes=LIST        select only t"...
.text:00401F03                 call    ds:libintl_gettext
.text:00401F09                 mov     esi, ds:_iob
.text:00401F0F                 add     esi, 20h ; ' '
.text:00401F12                 mov     [esp+38h+Locale], esi ; Stream
.text:00401F16                 mov     [esp+38h+Category], eax ; Buffer
.text:00401F19                 call    fputs
.text:00401F1E                 mov     [esp+38h+Category], offset aFFieldsListSel ; "  -f, --fields=LIST       select only t"...
.text:00401F25                 call    ds:libintl_gettext
.text:00401F2B                 mov     ebx, ds:_iob
.text:00401F31                 add     ebx, 20h ; ' '
.text:00401F34                 mov     [esp+38h+Locale], ebx ; Stream
.text:00401F38                 mov     [esp+38h+Category], eax ; Buffer
.text:00401F3B                 call    fputs
.text:00401F40                 mov     [esp+38h+Category], offset aComplementComp ; "      --complement        complement th"...
.text:00401F47                 call    ds:libintl_gettext
.text:00401F4D                 mov     edi, ds:_iob
.text:00401F53                 add     edi, 20h ; ' '
.text:00401F56                 mov     [esp+38h+Locale], edi ; Stream
.text:00401F5A                 mov     [esp+38h+Category], eax ; Buffer
.text:00401F5D                 call    fputs
.text:00401F62                 mov     [esp+38h+Category], offset aSOnlyDelimited ; "  -s, --only-delimited    do not print "...
.text:00401F69                 call    ds:libintl_gettext
.text:00401F6F                 mov     ecx, ds:_iob
.text:00401F75                 add     ecx, 20h ; ' '
.text:00401F78                 mov     [esp+38h+Locale], ecx ; Stream
.text:00401F7C                 mov     [esp+38h+Category], eax ; Buffer
.text:00401F7F                 call    fputs
.text:00401F84                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401F8B                 call    ds:libintl_gettext
.text:00401F91                 mov     esi, ds:_iob
.text:00401F97                 add     esi, 20h ; ' '
.text:00401F9A                 mov     [esp+38h+Locale], esi ; Stream
.text:00401F9E                 mov     [esp+38h+Category], eax ; Buffer
.text:00401FA1                 call    fputs
.text:00401FA6                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401FAD                 call    ds:libintl_gettext
.text:00401FB3                 mov     ebx, ds:_iob
.text:00401FB9                 add     ebx, 20h ; ' '
.text:00401FBC                 mov     [esp+38h+Locale], ebx ; Stream
.text:00401FC0                 mov     [esp+38h+Category], eax ; Buffer
.text:00401FC3                 call    fputs
.text:00401FC8                 mov     [esp+38h+Category], offset aUseOneAndOnlyO ; "\nUse one, and only one of -b, -c or -f"...
.text:00401FCF                 call    ds:libintl_gettext
.text:00401FD5                 mov     edi, ds:_iob
.text:00401FDB                 add     edi, 20h ; ' '
.text:00401FDE                 mov     [esp+38h+Locale], edi ; Stream
.text:00401FE2                 mov     [esp+38h+Category], eax ; Buffer
.text:00401FE5                 call    fputs
.text:00401FEA                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401FF1                 call    ds:libintl_gettext
.text:00401FF7                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401FFF                 mov     [esp+38h+Category], eax ; Format
.text:00402002                 call    printf
.text:00402007                 jmp     loc_401E90
.text:00402007 ; ---------------------------------------------------------------------------
.text:0040200C                 align 10h
.text:00402010
.text:00402010 loc_402010:                             ; CODE XREF: sub_401CE0+C9↑j
.text:00402010                 cmp     eax, 73h ; 's'
.text:00402013                 jz      loc_4020B0
.text:00402019                 cmp     eax, 73h ; 's'
.text:0040201C                 jg      short loc_402050
.text:0040201E                 cmp     eax, 66h ; 'f'
.text:00402021                 jz      short loc_402031
.text:00402023                 cmp     eax, 6Eh ; 'n'
.text:00402026                 jz      loc_401D70
.text:0040202C                 jmp     loc_401E08
.text:00402031 ; ---------------------------------------------------------------------------
.text:00402031
.text:00402031 loc_402031:                             ; CODE XREF: sub_401CE0+341↑j
.text:00402031                 mov     edx, ds:dword_40A070
.text:00402037                 test    edx, edx
.text:00402039                 jnz     loc_401DE3
.text:0040203F                 mov     eax, 2
.text:00402044                 mov     ds:dword_40A070, eax
.text:00402049                 jmp     loc_401DDB
.text:00402049 ; ---------------------------------------------------------------------------
.text:0040204E                 align 10h
.text:00402050
.text:00402050 loc_402050:                             ; CODE XREF: sub_401CE0+33C↑j
.text:00402050                 cmp     eax, 80h ; '€'
.text:00402055                 jz      short loc_40206E
.text:00402057                 cmp     eax, 81h
.text:0040205C                 jnz     loc_401E08
.text:00402062                 mov     ds:byte_40A090, 1
.text:00402069                 jmp     loc_401D70
.text:0040206E ; ---------------------------------------------------------------------------
.text:0040206E
.text:0040206E loc_40206E:                             ; CODE XREF: sub_401CE0+375↑j
.text:0040206E                 mov     ds:byte_40A0B0, 1
.text:00402075                 mov     edx, ds:Str
.text:0040207B                 cmp     byte ptr [edx], 0
.text:0040207E                 jnz     short loc_40209C
.text:00402080                 mov     eax, 1
.text:00402085
.text:00402085 loc_402085:                             ; CODE XREF: sub_401CE0+3CA↓j
.text:00402085                 mov     ds:ElementCount, eax
.text:0040208A                 mov     [esp+38h+Category], edx ; char *
.text:0040208D                 call    sub_405780
.text:00402092                 mov     ds:Buffer, eax
.text:00402097                 jmp     loc_401D70
.text:0040209C ; ---------------------------------------------------------------------------
.text:0040209C
.text:0040209C loc_40209C:                             ; CODE XREF: sub_401CE0+39E↑j
.text:0040209C                 mov     [esp+38h+Category], edx ; Str
.text:0040209F                 call    strlen
.text:004020A4                 mov     edx, ds:Str
.text:004020AA                 jmp     short loc_402085
.text:004020AA ; ---------------------------------------------------------------------------
.text:004020AC                 align 10h
.text:004020B0
.text:004020B0 loc_4020B0:                             ; CODE XREF: sub_401CE0+333↑j
.text:004020B0                 mov     ds:byte_40A080, 1
.text:004020B7                 jmp     loc_401D70
.text:004020B7 ; ---------------------------------------------------------------------------
.text:004020BC                 align 10h
.text:004020C0
.text:004020C0 loc_4020C0:                             ; CODE XREF: sub_401CE0+C0↑j
.text:004020C0                 mov     edx, ds:Str
.text:004020C6                 mov     eax, edx
.text:004020C8                 cmp     byte ptr [edx], 0
.text:004020CB                 jz      short loc_4020D3
.text:004020CD                 cmp     byte ptr [edx+1], 0
.text:004020D1                 jnz     short loc_4020E5
.text:004020D3
.text:004020D3 loc_4020D3:                             ; CODE XREF: sub_401CE0+3EB↑j
.text:004020D3                 movzx   ecx, byte ptr [eax]
.text:004020D6                 mov     [ebp+var_E], 1
.text:004020DA                 mov     ds:byte_40A0A0, cl
.text:004020E0                 jmp     loc_401D70
.text:004020E5 ; ---------------------------------------------------------------------------
.text:004020E5
.text:004020E5 loc_4020E5:                             ; CODE XREF: sub_401CE0+3F1↑j
.text:004020E5                 mov     [esp+38h+Category], offset aTheDelimiterMu ; "the delimiter must be a single characte"...
.text:004020EC                 jmp     loc_401DEA
.text:004020F1 ; ---------------------------------------------------------------------------
.text:004020F1
.text:004020F1 loc_4020F1:                             ; CODE XREF: sub_401CE0+B7↑j
.text:004020F1                 mov     eax, ds:dword_40A070
.text:004020F6                 test    eax, eax
.text:004020F8                 jz      loc_4022B8
.text:004020FE                 cmp     ds:byte_40A0A0, 0
.text:00402105                 jz      short loc_402110
.text:00402107                 cmp     eax, 2
.text:0040210A                 jnz     loc_4022AC
.text:00402110
.text:00402110 loc_402110:                             ; CODE XREF: sub_401CE0+425↑j
.text:00402110                 cmp     ds:byte_40A080, 0
.text:00402117                 jz      short loc_402122
.text:00402119                 cmp     eax, 2
.text:0040211C                 jnz     loc_4022A0
.text:00402122
.text:00402122 loc_402122:                             ; CODE XREF: sub_401CE0+437↑j
.text:00402122                 cmp     ds:byte_40A0B0, 0
.text:00402129                 jz      short loc_402164
.text:0040212B                 mov     dword ptr [esp+38h+var_28], 0
.text:00402133                 mov     dword ptr [esp+38h+var_2C], offset sub_4024A0 ; char
.text:0040213B                 mov     [esp+38h+var_30], offset sub_402490
.text:00402143                 mov     [esp+38h+Locale], 0
.text:0040214B                 mov     [esp+38h+Category], 1Fh
.text:00402152                 call    sub_4041D0
.text:00402157                 mov     ds:dword_40A0F0, eax
.text:0040215C                 test    eax, eax
.text:0040215E                 jz      loc_4022C4
.text:00402164
.text:00402164 loc_402164:                             ; CODE XREF: sub_401CE0+449↑j
.text:00402164                 mov     [esp+38h+Category], edi
.text:00402167                 call    sub_402570
.text:0040216C                 test    al, al
.text:0040216E                 jnz     short loc_402191
.text:00402170                 cmp     ds:dword_40A070, 2
.text:00402177                 jnz     short loc_402185
.text:00402179                 mov     [esp+38h+Category], offset aMissingListOfF ; "missing list of fields"
.text:00402180                 jmp     loc_401DEA
.text:00402185 ; ---------------------------------------------------------------------------
.text:00402185
.text:00402185 loc_402185:                             ; CODE XREF: sub_401CE0+497↑j
.text:00402185                 mov     [esp+38h+Category], offset aMissingListOfP ; "missing list of positions"
.text:0040218C                 jmp     loc_401DEA
.text:00402191 ; ---------------------------------------------------------------------------
.text:00402191
.text:00402191 loc_402191:                             ; CODE XREF: sub_401CE0+48E↑j
.text:00402191                 cmp     [ebp+var_E], 0
.text:00402195                 jnz     short loc_40219E
.text:00402197                 mov     ds:byte_40A0A0, 9
.text:0040219E
.text:0040219E loc_40219E:                             ; CODE XREF: sub_401CE0+4B5↑j
.text:0040219E                 mov     eax, ds:Buffer
.text:004021A3                 test    eax, eax
.text:004021A5                 jnz     short loc_4021D1
.text:004021A7                 movzx   edx, ds:byte_40A0A0
.text:004021AE                 mov     edi, offset byte_40A010
.text:004021B3                 mov     ds:byte_40A011, 0
.text:004021BA                 mov     ecx, 1
.text:004021BF                 mov     ds:Buffer, edi
.text:004021C5                 mov     ds:ElementCount, ecx
.text:004021CB                 mov     ds:byte_40A010, dl
.text:004021D1
.text:004021D1 loc_4021D1:                             ; CODE XREF: sub_401CE0+4C5↑j
.text:004021D1                 mov     eax, dword_409010
.text:004021D6                 cmp     eax, esi
.text:004021D8                 jz      loc_402288
.text:004021DE                 mov     [ebp+var_D], 1
.text:004021E2                 cmp     eax, esi
.text:004021E4                 jl      short loc_402250
.text:004021E6
.text:004021E6 loc_4021E6:                             ; CODE XREF: sub_401CE0+5A3↓j
.text:004021E6                                         ; sub_401CE0+5B7↓j
.text:004021E6                 mov     eax, ds:dword_40A0F0
.text:004021EB                 test    eax, eax
.text:004021ED                 jnz     short loc_40223F
.text:004021EF
.text:004021EF loc_4021EF:                             ; CODE XREF: sub_401CE0+567↓j
.text:004021EF                 cmp     ds:byte_40A0E0, 0
.text:004021F6                 jnz     short loc_402209
.text:004021F8
.text:004021F8 loc_4021F8:                             ; CODE XREF: sub_401CE0+538↓j
.text:004021F8                                         ; sub_401CE0+55D↓j
.text:004021F8                 xor     ecx, ecx
.text:004021FA                 cmp     [ebp+var_D], 0
.text:004021FE                 setz    cl
.text:00402201                 mov     [esp+38h+Category], ecx
.text:00402204                 jmp     loc_401E3B
.text:00402209 ; ---------------------------------------------------------------------------
.text:00402209
.text:00402209 loc_402209:                             ; CODE XREF: sub_401CE0+516↑j
.text:00402209                 mov     esi, ds:_iob
.text:0040220F                 mov     [esp+38h+Category], esi ; Stream
.text:00402212                 call    fclose
.text:00402217                 inc     eax
.text:00402218                 jnz     short loc_4021F8
.text:0040221A                 call    _errno
.text:0040221F                 mov     [esp+38h+var_30], offset FileName ; "-"
.text:00402227                 mov     ebx, [eax]
.text:00402229                 mov     [esp+38h+Category], 0 ; Code
.text:00402230                 mov     [esp+38h+Locale], ebx ; ErrorMessage
.text:00402234                 call    sub_407100
.text:00402239                 mov     [ebp+var_D], 0
.text:0040223D                 jmp     short loc_4021F8
.text:0040223F ; ---------------------------------------------------------------------------
.text:0040223F
.text:0040223F loc_40223F:                             ; CODE XREF: sub_401CE0+50D↑j
.text:0040223F                 mov     [esp+38h+Category], eax ; void *
.text:00402242                 call    sub_4044B0
.text:00402247                 jmp     short loc_4021EF
.text:00402247 ; ---------------------------------------------------------------------------
.text:00402249                 align 10h
.text:00402250
.text:00402250 loc_402250:                             ; CODE XREF: sub_401CE0+504↑j
.text:00402250                                         ; sub_401CE0+5A1↓j
.text:00402250                 mov     [ebp+var_F], 0
.text:00402254                 mov     ecx, [ebx+eax*4]
.text:00402257                 mov     [esp+38h+Category], ecx ; FileName
.text:0040225A                 call    sub_4029F0
.text:0040225F                 test    al, al
.text:00402261                 jz      short loc_40226D
.text:00402263                 cmp     [ebp+var_D], 0
.text:00402267                 jz      short loc_40226D
.text:00402269                 mov     [ebp+var_F], 1
.text:0040226D
.text:0040226D loc_40226D:                             ; CODE XREF: sub_401CE0+581↑j
.text:0040226D                                         ; sub_401CE0+587↑j
.text:0040226D                 movzx   edx, [ebp+var_F]
.text:00402271                 mov     eax, dword_409010
.text:00402276                 inc     eax
.text:00402277                 mov     [ebp+var_D], dl
.text:0040227A                 cmp     eax, esi
.text:0040227C                 mov     dword_409010, eax
.text:00402281                 jl      short loc_402250
.text:00402283                 jmp     loc_4021E6
.text:00402288 ; ---------------------------------------------------------------------------
.text:00402288
.text:00402288 loc_402288:                             ; CODE XREF: sub_401CE0+4F8↑j
.text:00402288                 mov     [esp+38h+Category], offset FileName ; "-"
.text:0040228F                 call    sub_4029F0
.text:00402294                 mov     [ebp+var_D], al
.text:00402297                 jmp     loc_4021E6
.text:00402297 ; ---------------------------------------------------------------------------
.text:0040229C                 align 10h
.text:004022A0
.text:004022A0 loc_4022A0:                             ; CODE XREF: sub_401CE0+43C↑j
.text:004022A0                 mov     [esp+38h+Category], offset aSuppressingNon ; "suppressing non-delimited lines makes s"...
.text:004022A7                 jmp     loc_401DEA
.text:004022AC ; ---------------------------------------------------------------------------
.text:004022AC
.text:004022AC loc_4022AC:                             ; CODE XREF: sub_401CE0+42A↑j
.text:004022AC                 mov     [esp+38h+Category], offset aAnInputDelimit ; "an input delimiter may be specified onl"...
.text:004022B3                 jmp     loc_401DEA
.text:004022B8 ; ---------------------------------------------------------------------------
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_401CE0+418↑j
.text:004022B8                 mov     [esp+38h+Category], offset aYouMustSpecify ; "you must specify a list of bytes, chara"...
.text:004022BF                 jmp     loc_401DEA
.text:004022C4 ; ---------------------------------------------------------------------------
.text:004022C4
.text:004022C4 loc_4022C4:                             ; CODE XREF: sub_401CE0+47E↑j
.text:004022C4                 call    sub_405CD0
.text:004022C4 sub_401CE0      endp
.text:004022C4
.text:004022C4 ; ---------------------------------------------------------------------------
.text:004022C9                 align 10h
.text:004022D0                 push    ebx
.text:004022D1                 sub     esp, 18h
.text:004022D4                 mov     ebx, [esp+20h]
.text:004022D8                 test    ebx, ebx
.text:004022DA                 jz      short loc_402310
.text:004022DC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004022E3                 call    ds:libintl_gettext
.text:004022E9                 mov     edx, ds:_iob
.text:004022EF                 mov     ecx, ds:dword_40A2F0
.text:004022F5                 add     edx, 40h ; '@'
.text:004022F8                 mov     [esp+8], ecx
.text:004022FC                 mov     [esp+4], eax
.text:00402300                 mov     [esp], edx
.text:00402303                 call    fprintf
.text:00402308
.text:00402308 loc_402308:                             ; CODE XREF: .text:0040247E↓j
.text:00402308                 mov     [esp], ebx
.text:0040230B                 call    exit
.text:00402310 ; ---------------------------------------------------------------------------
.text:00402310
.text:00402310 loc_402310:                             ; CODE XREF: .text:004022DA↑j
.text:00402310                 mov     dword ptr [esp], offset stru_401484._tmpfname
.text:00402317                 call    ds:libintl_gettext
.text:0040231D                 mov     ecx, ds:dword_40A2F0
.text:00402323                 mov     [esp], eax
.text:00402326                 mov     [esp+4], ecx
.text:0040232A                 call    printf
.text:0040232F                 mov     dword ptr [esp], offset aPrintSelectedP ; "Print selected parts of lines from each"...
.text:00402336                 call    ds:libintl_gettext
.text:0040233C                 mov     ecx, ds:_iob
.text:00402342                 add     ecx, 20h ; ' '
.text:00402345                 mov     [esp+4], ecx
.text:00402349                 mov     [esp], eax
.text:0040234C                 call    fputs
.text:00402351                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402358                 call    ds:libintl_gettext
.text:0040235E                 mov     ecx, ds:_iob
.text:00402364                 add     ecx, 20h ; ' '
.text:00402367                 mov     [esp+4], ecx
.text:0040236B                 mov     [esp], eax
.text:0040236E                 call    fputs
.text:00402373                 mov     dword ptr [esp], offset aBBytesListSele ; "  -b, --bytes=LIST        select only t"...
.text:0040237A                 call    ds:libintl_gettext
.text:00402380                 mov     ecx, ds:_iob
.text:00402386                 add     ecx, 20h ; ' '
.text:00402389                 mov     [esp+4], ecx
.text:0040238D                 mov     [esp], eax
.text:00402390                 call    fputs
.text:00402395                 mov     dword ptr [esp], offset aFFieldsListSel ; "  -f, --fields=LIST       select only t"...
.text:0040239C                 call    ds:libintl_gettext
.text:004023A2                 mov     ecx, ds:_iob
.text:004023A8                 add     ecx, 20h ; ' '
.text:004023AB                 mov     [esp+4], ecx
.text:004023AF                 mov     [esp], eax
.text:004023B2                 call    fputs
.text:004023B7                 mov     dword ptr [esp], offset aComplementComp ; "      --complement        complement th"...
.text:004023BE                 call    ds:libintl_gettext
.text:004023C4                 mov     ecx, ds:_iob
.text:004023CA                 add     ecx, 20h ; ' '
.text:004023CD                 mov     [esp+4], ecx
.text:004023D1                 mov     [esp], eax
.text:004023D4                 call    fputs
.text:004023D9                 mov     dword ptr [esp], offset aSOnlyDelimited ; "  -s, --only-delimited    do not print "...
.text:004023E0                 call    ds:libintl_gettext
.text:004023E6                 mov     ecx, ds:_iob
.text:004023EC                 add     ecx, 20h ; ' '
.text:004023EF                 mov     [esp+4], ecx
.text:004023F3                 mov     [esp], eax
.text:004023F6                 call    fputs
.text:004023FB                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402402                 call    ds:libintl_gettext
.text:00402408                 mov     ecx, ds:_iob
.text:0040240E                 add     ecx, 20h ; ' '
.text:00402411                 mov     [esp+4], ecx
.text:00402415                 mov     [esp], eax
.text:00402418                 call    fputs
.text:0040241D                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402424                 call    ds:libintl_gettext
.text:0040242A                 mov     ecx, ds:_iob
.text:00402430                 add     ecx, 20h ; ' '
.text:00402433                 mov     [esp+4], ecx
.text:00402437                 mov     [esp], eax
.text:0040243A                 call    fputs
.text:0040243F                 mov     dword ptr [esp], offset aUseOneAndOnlyO ; "\nUse one, and only one of -b, -c or -f"...
.text:00402446                 call    ds:libintl_gettext
.text:0040244C                 mov     ecx, ds:_iob
.text:00402452                 add     ecx, 20h ; ' '
.text:00402455                 mov     [esp+4], ecx
.text:00402459                 mov     [esp], eax
.text:0040245C                 call    fputs
.text:00402461                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402468                 call    ds:libintl_gettext
.text:0040246E                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402476                 mov     [esp], eax
.text:00402479                 call    printf
.text:0040247E                 jmp     loc_402308
.text:0040247E ; ---------------------------------------------------------------------------
.text:00402483                 align 10h
.text:00402490
.text:00402490 ; =============== S U B R O U T I N E =======================================
.text:00402490
.text:00402490
.text:00402490 sub_402490      proc near               ; DATA XREF: sub_401CE0+45B↑o
.text:00402490
.text:00402490 arg_0           = dword ptr  4
.text:00402490 arg_4           = dword ptr  8
.text:00402490
.text:00402490                 mov     eax, [esp+arg_0]
.text:00402494                 xor     edx, edx
.text:00402496                 div     [esp+arg_4]
.text:0040249A                 mov     eax, edx
.text:0040249C                 retn
.text:0040249C sub_402490      endp
.text:0040249C
.text:0040249C ; ---------------------------------------------------------------------------
.text:0040249D                 align 10h
.text:004024A0
.text:004024A0 ; =============== S U B R O U T I N E =======================================
.text:004024A0
.text:004024A0
.text:004024A0 sub_4024A0      proc near               ; DATA XREF: sub_401CE0+453↑o
.text:004024A0
.text:004024A0 arg_0           = dword ptr  4
.text:004024A0 arg_4           = dword ptr  8
.text:004024A0
.text:004024A0                 mov     edx, [esp+arg_4]
.text:004024A4                 cmp     [esp+arg_0], edx
.text:004024A8                 setz    dl
.text:004024AB                 movzx   eax, dl
.text:004024AE                 retn
.text:004024AE sub_4024A0      endp
.text:004024AE
.text:004024AE ; ---------------------------------------------------------------------------
.text:004024AF aInvalidByteOrF db 'invalid byte or field list',0
.text:004024AF                                         ; DATA XREF: sub_402570:loc_402825↓o
.text:004024CA ; const char Control[]
.text:004024CA Control         db '0123456789',0       ; DATA XREF: sub_402570:loc_402912↓o
.text:004024D5 aFieldNumberSIs db 'field number %s is too large',0
.text:004024D5                                         ; DATA XREF: sub_402570+3DD↓o
.text:004024F2 aByteOffsetSIsT db 'byte offset %s is too large',0
.text:004024F2                                         ; DATA XREF: sub_402570+41D↓o
.text:0040250E                 align 20h
.text:00402520 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/cut.c',0
.text:00402520                                         ; DATA XREF: sub_402570+45F↓o
.text:00402520                                         ; sub_402CF0+478↓o
.text:00402544 aSizeTEntFromTa db '(size_t) ent_from_table == i',0
.text:00402544                                         ; DATA XREF: sub_402570+467↓o
.text:00402561 ; ---------------------------------------------------------------------------
.text:00402561                 jmp     short sub_402570
.text:00402561 ; ---------------------------------------------------------------------------
.text:00402563                 align 10h
.text:00402570
.text:00402570 ; =============== S U B R O U T I N E =======================================
.text:00402570
.text:00402570
.text:00402570 sub_402570      proc near               ; CODE XREF: sub_401CE0+487↑p
.text:00402570                                         ; .text:00402561↑j
.text:00402570
.text:00402570 Block           = dword ptr -3Ch
.text:00402570 Format          = dword ptr -38h
.text:00402570 var_34          = dword ptr -34h
.text:00402570 var_30          = byte ptr -30h
.text:00402570 var_21          = byte ptr -21h
.text:00402570 var_20          = dword ptr -20h
.text:00402570 var_1C          = dword ptr -1Ch
.text:00402570 var_16          = byte ptr -16h
.text:00402570 var_15          = byte ptr -15h
.text:00402570 var_14          = dword ptr -14h
.text:00402570 arg_0           = dword ptr  4
.text:00402570
.text:00402570                 push    ebp
.text:00402571                 xor     ebp, ebp
.text:00402573                 push    edi
.text:00402574                 mov     edi, 1
.text:00402579                 push    esi
.text:0040257A                 xor     esi, esi
.text:0040257C                 push    ebx
.text:0040257D                 sub     esp, 2Ch
.text:00402580                 mov     ebx, [esp+3Ch+arg_0]
.text:00402584                 mov     [esp+3Ch+var_15], 0
.text:00402589                 mov     [esp+3Ch+var_16], 0
.text:0040258E                 mov     [esp+3Ch+var_1C], 0
.text:00402596                 mov     [esp+3Ch+var_14], 0
.text:0040259E                 mov     [esp+3Ch+var_21], 0
.text:004025A3                 lea     esi, [esi+0]
.text:004025A9                 lea     edi, [edi+0]
.text:004025B0
.text:004025B0 loc_4025B0:                             ; CODE XREF: sub_402570+A0↓j
.text:004025B0                                         ; sub_402570+443↓j ...
.text:004025B0                 movzx   edx, byte ptr [ebx]
.text:004025B3                 cmp     dl, 2Dh ; '-'
.text:004025B6                 jz      loc_402996
.text:004025BC                 cmp     dl, 2Ch ; ','
.text:004025BF                 jz      short loc_4025E0
.text:004025C1                 cmp     dl, 20h ; ' '
.text:004025C4                 jz      short loc_4025E0
.text:004025C6                 cmp     dl, 9
.text:004025C9                 jz      short loc_4025E0
.text:004025CB                 test    dl, dl
.text:004025CD                 jnz     loc_4028C5
.text:004025D3                 lea     esi, [esi+0]
.text:004025D9                 lea     edi, [edi+0]
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_402570+4F↑j
.text:004025E0                                         ; sub_402570+54↑j ...
.text:004025E0                 cmp     [esp+3Ch+var_15], 0
.text:004025E5                 mov     [esp+3Ch+var_21], 0
.text:004025EA                 jz      loc_402882
.text:004025F0                 mov     [esp+3Ch+var_15], 0
.text:004025F5                 test    esi, esi
.text:004025F7                 jnz     loc_4027B8
.text:004025FD                 mov     ds:dword_40A050, edi
.text:00402603
.text:00402603 loc_402603:                             ; CODE XREF: sub_402570+32E↓j
.text:00402603                 mov     [esp+3Ch+var_16], 1
.text:00402608                 movzx   edx, byte ptr [ebx]
.text:0040260B
.text:0040260B loc_40260B:                             ; CODE XREF: sub_402570+27A↓j
.text:0040260B                                         ; sub_402570+314↓j
.text:0040260B                 test    dl, dl
.text:0040260D                 jz      short loc_402612
.text:0040260F
.text:0040260F loc_40260F:                             ; CODE XREF: sub_402570+39C↓j
.text:0040260F                 inc     ebx
.text:00402610                 jmp     short loc_4025B0
.text:00402612 ; ---------------------------------------------------------------------------
.text:00402612
.text:00402612 loc_402612:                             ; CODE XREF: sub_402570+9D↑j
.text:00402612                 mov     [esp+3Ch+var_20], 0
.text:0040261A                 xor     edx, edx
.text:0040261C                 cmp     [esp+3Ch+var_20], ebp
.text:00402620                 mov     ds:dword_40A040, edx
.text:00402626                 jnb     loc_4027AE
.text:0040262C                 xor     eax, eax
.text:0040262E
.text:0040262E loc_40262E:                             ; CODE XREF: sub_402570+DE↓j
.text:0040262E                 mov     esi, [esp+3Ch+var_20]
.text:00402632                 mov     ecx, [esp+3Ch+var_1C]
.text:00402636                 mov     edx, [ecx+esi*8+4]
.text:0040263A                 cmp     edx, eax
.text:0040263C                 jbe     short loc_402646
.text:0040263E                 mov     ds:dword_40A040, edx
.text:00402644                 mov     eax, edx
.text:00402646
.text:00402646 loc_402646:                             ; CODE XREF: sub_402570+CC↑j
.text:00402646                 inc     [esp+3Ch+var_20]
.text:0040264A                 cmp     [esp+3Ch+var_20], ebp
.text:0040264E                 jb      short loc_40262E
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402570+243↓j
.text:00402650                 shr     eax, 3
.text:00402653                 inc     eax
.text:00402654                 mov     [esp+3Ch+Block], eax ; size_t
.text:00402657                 call    sub_4056C0
.text:0040265C                 mov     ds:dword_40A060, eax
.text:00402661                 mov     ebx, [esp+3Ch+var_1C]
.text:00402665                 mov     dword ptr [esp+3Ch+var_30], offset loc_402AC0 ; int
.text:0040266D                 mov     [esp+3Ch+var_34], 8 ; size_t
.text:00402675                 mov     [esp+3Ch+Format], ebp ; void *
.text:00402679                 mov     [esp+3Ch+Block], ebx ; Block
.text:0040267C                 call    sub_407590
.text:00402681                 mov     [esp+3Ch+var_20], 0
.text:00402689                 cmp     [esp+3Ch+var_20], ebp
.text:0040268D                 jnb     short loc_40270E
.text:0040268F                 mov     esi, [esp+3Ch+var_1C]
.text:00402693
.text:00402693 loc_402693:                             ; CODE XREF: sub_402570+19C↓j
.text:00402693                 cmp     ds:byte_40A090, 0
.text:0040269A                 jz      loc_4027A7
.text:004026A0                 mov     ebx, [esi+4]
.text:004026A3                 inc     ebx
.text:004026A4
.text:004026A4 loc_4026A4:                             ; CODE XREF: sub_402570+239↓j
.text:004026A4                 cmp     ds:byte_40A0B0, 0
.text:004026AB                 jz      short loc_4026CB
.text:004026AD                 mov     edi, ds:dword_40A060
.text:004026B3                 mov     ecx, ebx
.text:004026B5                 shr     ecx, 3
.text:004026B8                 movzx   eax, byte ptr [ecx+edi]
.text:004026BC                 mov     ecx, ebx
.text:004026BE                 and     ecx, 7
.text:004026C1                 sar     eax, cl
.text:004026C3                 test    al, 1
.text:004026C5                 jz      loc_402780
.text:004026CB
.text:004026CB loc_4026CB:                             ; CODE XREF: sub_402570+13B↑j
.text:004026CB                                         ; sub_402570+22C↓j
.text:004026CB                 mov     ebx, [esi]
.text:004026CD                 cmp     ebx, [esi+4]
.text:004026D0                 ja      short loc_402701
.text:004026D2                 lea     esi, [esi+0]
.text:004026D9                 lea     edi, [edi+0]
.text:004026E0
.text:004026E0 loc_4026E0:                             ; CODE XREF: sub_402570+18F↓j
.text:004026E0                 mov     ecx, ebx
.text:004026E2                 mov     eax, ds:dword_40A060
.text:004026E7                 mov     edi, 1
.text:004026EC                 and     ecx, 7
.text:004026EF                 mov     edx, ebx
.text:004026F1                 shl     edi, cl
.text:004026F3                 shr     edx, 3
.text:004026F6                 mov     ecx, edi
.text:004026F8                 inc     ebx
.text:004026F9                 or      [edx+eax], cl
.text:004026FC                 cmp     ebx, [esi+4]
.text:004026FF                 jbe     short loc_4026E0
.text:00402701
.text:00402701 loc_402701:                             ; CODE XREF: sub_402570+160↑j
.text:00402701                 inc     [esp+3Ch+var_20]
.text:00402705                 add     esi, 8
.text:00402708                 cmp     [esp+3Ch+var_20], ebp
.text:0040270C                 jb      short loc_402693
.text:0040270E
.text:0040270E loc_40270E:                             ; CODE XREF: sub_402570+11D↑j
.text:0040270E                 cmp     ds:byte_40A0B0, 0
.text:00402715                 jz      short loc_402744
.text:00402717                 cmp     ds:byte_40A090, 0
.text:0040271E                 jnz     short loc_402744
.text:00402720                 mov     ebx, ds:dword_40A050
.text:00402726                 test    ebx, ebx
.text:00402728                 jz      short loc_402744
.text:0040272A                 mov     ebp, ds:dword_40A060
.text:00402730                 mov     esi, ebx
.text:00402732                 mov     ecx, ebx
.text:00402734                 shr     esi, 3
.text:00402737                 and     ecx, 7
.text:0040273A                 movzx   eax, byte ptr [esi+ebp]
.text:0040273E                 sar     eax, cl
.text:00402740                 test    al, 1
.text:00402742                 jz      short loc_40275D
.text:00402744
.text:00402744 loc_402744:                             ; CODE XREF: sub_402570+1A5↑j
.text:00402744                                         ; sub_402570+1AE↑j ...
.text:00402744                 mov     ebx, [esp+3Ch+var_1C]
.text:00402748                 mov     [esp+3Ch+Block], ebx ; Block
.text:0040274B                 call    free
.text:00402750                 movzx   eax, [esp+3Ch+var_16]
.text:00402755                 add     esp, 2Ch
.text:00402758                 pop     ebx
.text:00402759                 pop     esi
.text:0040275A                 pop     edi
.text:0040275B                 pop     ebp
.text:0040275C                 retn
.text:0040275D ; ---------------------------------------------------------------------------
.text:0040275D
.text:0040275D loc_40275D:                             ; CODE XREF: sub_402570+1D2↑j
.text:0040275D                 mov     [esp+3Ch+Format], ebx
.text:00402761                 mov     edi, ds:dword_40A0F0
.text:00402767                 mov     [esp+3Ch+Block], edi
.text:0040276A                 call    sub_404720
.text:0040276F                 test    eax, eax
.text:00402771                 jz      loc_4029C2
.text:00402777                 cmp     eax, ebx
.text:00402779                 jz      short loc_402744
.text:0040277B                 jmp     loc_4029C7
.text:00402780 ; ---------------------------------------------------------------------------
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_402570+155↑j
.text:00402780                 mov     [esp+3Ch+Format], ebx
.text:00402784                 mov     edx, ds:dword_40A0F0
.text:0040278A                 mov     [esp+3Ch+Block], edx
.text:0040278D                 call    sub_404720
.text:00402792                 test    eax, eax
.text:00402794                 jz      loc_4029C2
.text:0040279A                 cmp     eax, ebx
.text:0040279C                 jz      loc_4026CB
.text:004027A2                 jmp     loc_4029C7
.text:004027A7 ; ---------------------------------------------------------------------------
.text:004027A7
.text:004027A7 loc_4027A7:                             ; CODE XREF: sub_402570+12A↑j
.text:004027A7                 mov     ebx, [esi]
.text:004027A9                 jmp     loc_4026A4
.text:004027AE ; ---------------------------------------------------------------------------
.text:004027AE
.text:004027AE loc_4027AE:                             ; CODE XREF: sub_402570+B6↑j
.text:004027AE                 mov     eax, ds:dword_40A040
.text:004027B3                 jmp     loc_402650
.text:004027B8 ; ---------------------------------------------------------------------------
.text:004027B8
.text:004027B8 loc_4027B8:                             ; CODE XREF: sub_402570+87↑j
.text:004027B8                 cmp     esi, edi
.text:004027BA                 jb      short loc_402825
.text:004027BC                 mov     eax, ds:dword_40A050
.text:004027C1                 test    eax, eax
.text:004027C3                 jz      short loc_4027EF
.text:004027C5                 cmp     edi, eax
.text:004027C7                 jnb     short loc_4027E8
.text:004027C9                 cmp     eax, esi
.text:004027CB                 ja      short loc_4027EF
.text:004027CD                 mov     ds:dword_40A050, edi
.text:004027D3                 lea     esi, [esi+0]
.text:004027D9                 lea     edi, [edi+0]
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: sub_402570+291↓j
.text:004027E0                 mov     [esp+3Ch+var_16], 1
.text:004027E5                 movzx   edx, byte ptr [ebx]
.text:004027E8
.text:004027E8 loc_4027E8:                             ; CODE XREF: sub_402570+257↑j
.text:004027E8                 xor     esi, esi
.text:004027EA                 jmp     loc_40260B
.text:004027EF ; ---------------------------------------------------------------------------
.text:004027EF
.text:004027EF loc_4027EF:                             ; CODE XREF: sub_402570+253↑j
.text:004027EF                                         ; sub_402570+25B↑j
.text:004027EF                 cmp     ebp, [esp+3Ch+var_14]
.text:004027F3                 jnb     short loc_402803
.text:004027F5
.text:004027F5 loc_4027F5:                             ; CODE XREF: sub_402570+2B3↓j
.text:004027F5                 mov     eax, [esp+3Ch+var_1C]
.text:004027F9                 mov     [eax+ebp*8], edi
.text:004027FC                 mov     [eax+ebp*8+4], esi
.text:00402800                 inc     ebp
.text:00402801                 jmp     short loc_4027E0
.text:00402803 ; ---------------------------------------------------------------------------
.text:00402803
.text:00402803 loc_402803:                             ; CODE XREF: sub_402570+283↑j
.text:00402803                 mov     [esp+3Ch+var_34], 8 ; int
.text:0040280B                 lea     edx, [esp+3Ch+var_14]
.text:0040280F                 mov     [esp+3Ch+Format], edx ; int
.text:00402813                 mov     edx, [esp+3Ch+var_1C]
.text:00402817                 mov     [esp+3Ch+Block], edx ; void *
.text:0040281A                 call    sub_405680
.text:0040281F                 mov     [esp+3Ch+var_1C], eax
.text:00402823                 jmp     short loc_4027F5
.text:00402825 ; ---------------------------------------------------------------------------
.text:00402825
.text:00402825 loc_402825:                             ; CODE XREF: sub_402570+24A↑j
.text:00402825                                         ; sub_402570+35E↓j ...
.text:00402825                 mov     [esp+3Ch+Block], offset aInvalidByteOrF ; "invalid byte or field list"
.text:0040282C                 call    ds:libintl_gettext
.text:00402832                 mov     [esp+3Ch+Format], 0 ; ErrorMessage
.text:0040283A                 mov     [esp+3Ch+Block], 0 ; Code
.text:00402841                 mov     [esp+3Ch+var_34], eax ; char *
.text:00402845                 call    sub_407100
.text:0040284A                 mov     [esp+3Ch+Block], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402851                 call    ds:libintl_gettext
.text:00402857                 mov     edi, ds:_iob
.text:0040285D                 mov     ebp, ds:dword_40A2F0
.text:00402863                 add     edi, 40h ; '@'
.text:00402866                 mov     [esp+3Ch+var_34], ebp
.text:0040286A                 mov     [esp+3Ch+Format], eax ; Format
.text:0040286E                 mov     [esp+3Ch+Block], edi ; Stream
.text:00402871                 call    fprintf
.text:00402876
.text:00402876 loc_402876:                             ; CODE XREF: sub_402570+410↓j
.text:00402876                 mov     [esp+3Ch+Block], 1 ; Code
.text:0040287D                 call    exit
.text:00402882 ; ---------------------------------------------------------------------------
.text:00402882
.text:00402882 loc_402882:                             ; CODE XREF: sub_402570+7A↑j
.text:00402882                 test    esi, esi
.text:00402884                 jz      loc_40260B
.text:0040288A                 cmp     ebp, [esp+3Ch+var_14]
.text:0040288E                 jnb     short loc_4028A3
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_402570+353↓j
.text:00402890                 mov     eax, [esp+3Ch+var_1C]
.text:00402894                 mov     [eax+ebp*8], esi
.text:00402897                 mov     [eax+ebp*8+4], esi
.text:0040289B                 inc     ebp
.text:0040289C                 xor     esi, esi
.text:0040289E                 jmp     loc_402603
.text:004028A3 ; ---------------------------------------------------------------------------
.text:004028A3
.text:004028A3 loc_4028A3:                             ; CODE XREF: sub_402570+31E↑j
.text:004028A3                 mov     [esp+3Ch+var_34], 8 ; int
.text:004028AB                 mov     ecx, [esp+3Ch+var_1C]
.text:004028AF                 lea     edx, [esp+3Ch+var_14]
.text:004028B3                 mov     [esp+3Ch+Format], edx ; int
.text:004028B7                 mov     [esp+3Ch+Block], ecx ; void *
.text:004028BA                 call    sub_405680
.text:004028BF                 mov     [esp+3Ch+var_1C], eax
.text:004028C3                 jmp     short loc_402890
.text:004028C5 ; ---------------------------------------------------------------------------
.text:004028C5
.text:004028C5 loc_4028C5:                             ; CODE XREF: sub_402570+5D↑j
.text:004028C5                 movsx   ecx, dl
.text:004028C8                 sub     ecx, 30h ; '0'
.text:004028CB                 cmp     ecx, 9
.text:004028CE                 ja      loc_402825
.text:004028D4                 cmp     [esp+3Ch+var_21], 0
.text:004028D9                 jz      short loc_4028E5
.text:004028DB                 mov     ecx, ds:dword_40A000
.text:004028E1                 test    ecx, ecx
.text:004028E3                 jnz     short loc_4028EE
.text:004028E5
.text:004028E5 loc_4028E5:                             ; CODE XREF: sub_402570+369↑j
.text:004028E5                 mov     ds:dword_40A000, ebx
.text:004028EB                 movzx   edx, byte ptr [ebx]
.text:004028EE
.text:004028EE loc_4028EE:                             ; CODE XREF: sub_402570+373↑j
.text:004028EE                 mov     [esp+3Ch+var_21], 1
.text:004028F3                 lea     eax, [esi+esi*4]
.text:004028F6                 cmp     esi, 19999999h
.text:004028FC                 lea     ecx, [eax+eax]
.text:004028FF                 movsx   eax, dl
.text:00402902                 lea     eax, [eax+ecx-30h]
.text:00402906                 ja      short loc_402912
.text:00402908                 cmp     eax, ecx
.text:0040290A                 mov     esi, eax
.text:0040290C                 jnb     loc_40260F
.text:00402912
.text:00402912 loc_402912:                             ; CODE XREF: sub_402570+396↑j
.text:00402912                 mov     [esp+3Ch+Format], offset Control ; "0123456789"
.text:0040291A                 mov     esi, ds:dword_40A000
.text:00402920                 mov     [esp+3Ch+Block], esi ; Str
.text:00402923                 call    strspn
.text:00402928                 mov     [esp+3Ch+Format], eax ; int
.text:0040292C                 mov     ebx, ds:dword_40A000
.text:00402932                 mov     [esp+3Ch+Block], ebx ; void *
.text:00402935                 call    sub_405C80
.text:0040293A                 cmp     ds:dword_40A070, 1
.text:00402941                 mov     esi, eax
.text:00402943                 jz      short loc_402985
.text:00402945                 mov     [esp+3Ch+Block], eax ; char *
.text:00402948                 call    sub_405C50
.text:0040294D                 mov     [esp+3Ch+Block], offset aFieldNumberSIs ; "field number %s is too large"
.text:00402954
.text:00402954 loc_402954:                             ; CODE XREF: sub_402570+424↓j
.text:00402954                 mov     ebx, eax
.text:00402956                 call    ds:libintl_gettext
.text:0040295C                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:00402960                 mov     [esp+3Ch+Format], 0 ; ErrorMessage
.text:00402968                 mov     [esp+3Ch+Block], 0 ; Code
.text:0040296F                 mov     [esp+3Ch+var_34], eax ; char *
.text:00402973                 call    sub_407100
.text:00402978                 mov     [esp+3Ch+Block], esi ; Block
.text:0040297B                 call    free
.text:00402980                 jmp     loc_402876
.text:00402985 ; ---------------------------------------------------------------------------
.text:00402985
.text:00402985 loc_402985:                             ; CODE XREF: sub_402570+3D3↑j
.text:00402985                 mov     [esp+3Ch+Block], eax ; char *
.text:00402988                 call    sub_405C50
.text:0040298D                 mov     [esp+3Ch+Block], offset aByteOffsetSIsT ; "byte offset %s is too large"
.text:00402994                 jmp     short loc_402954
.text:00402996 ; ---------------------------------------------------------------------------
.text:00402996
.text:00402996 loc_402996:                             ; CODE XREF: sub_402570+46↑j
.text:00402996                 cmp     [esp+3Ch+var_15], 0
.text:0040299B                 mov     [esp+3Ch+var_21], 0
.text:004029A0                 jnz     loc_402825
.text:004029A6                 mov     [esp+3Ch+var_15], 1
.text:004029AB                 inc     ebx
.text:004029AC                 mov     edi, 1
.text:004029B1                 test    esi, esi
.text:004029B3                 jz      loc_4025B0
.text:004029B9                 mov     edi, esi
.text:004029BB                 xor     esi, esi
.text:004029BD                 jmp     loc_4025B0
.text:004029C2 ; ---------------------------------------------------------------------------
.text:004029C2
.text:004029C2 loc_4029C2:                             ; CODE XREF: sub_402570+201↑j
.text:004029C2                                         ; sub_402570+224↑j
.text:004029C2                 call    sub_405CD0
.text:004029C7 ; ---------------------------------------------------------------------------
.text:004029C7
.text:004029C7 loc_4029C7:                             ; CODE XREF: sub_402570+20B↑j
.text:004029C7                                         ; sub_402570+232↑j
.text:004029C7                 mov     [esp+3Ch+var_34], 0FAh ; 'ú'
.text:004029CF                 mov     [esp+3Ch+Format], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/cut.c"
.text:004029D7                 mov     [esp+3Ch+Block], offset aSizeTEntFromTa ; "(size_t) ent_from_table == i"
.text:004029DE                 call    _assert
.text:004029DE sub_402570      endp
.text:004029DE
.text:004029E3
.text:004029E3 ; =============== S U B R O U T I N E =======================================
.text:004029E3
.text:004029E3
.text:004029E3 sub_4029E3      proc near               ; DATA XREF: sub_4029F0+89↓o
.text:004029E3                                         ; sub_4029F0:loc_402AA1↓o
.text:004029E3                 and     eax, 720073h
.text:004029E8                 nop
.text:004029E9                 lea     esi, [esi+0]
.text:004029E9 sub_4029E3      endp
.text:004029E9
.text:004029F0
.text:004029F0 ; =============== S U B R O U T I N E =======================================
.text:004029F0
.text:004029F0
.text:004029F0 ; int __cdecl sub_4029F0(char *FileName)
.text:004029F0 sub_4029F0      proc near               ; CODE XREF: sub_401CE0+57A↑p
.text:004029F0                                         ; sub_401CE0+5AF↑p
.text:004029F0
.text:004029F0 Stream          = dword ptr -2Ch
.text:004029F0 Mode            = dword ptr -28h
.text:004029F0 var_24          = dword ptr -24h
.text:004029F0 var_20          = byte ptr -20h
.text:004029F0 FileName        = dword ptr  4
.text:004029F0
.text:004029F0                 push    ebp
.text:004029F1                 mov     ecx, 2
.text:004029F6                 push    edi
.text:004029F7                 mov     edi, offset FileName ; "-"
.text:004029FC                 push    esi
.text:004029FD                 push    ebx
.text:004029FE                 sub     esp, 1Ch
.text:00402A01                 mov     ebp, [esp+2Ch+FileName]
.text:00402A05                 cld
.text:00402A06                 mov     esi, ebp
.text:00402A08                 repe cmpsb
.text:00402A0A                 jnz     loc_402AA1
.text:00402A10                 mov     ds:byte_40A0E0, 1
.text:00402A17                 mov     ebx, ds:_iob
.text:00402A1D
.text:00402A1D loc_402A1D:                             ; CODE XREF: sub_4029F0+C5↓j
.text:00402A1D                 cmp     ds:dword_40A070, 1
.text:00402A24                 jz      short loc_402A97
.text:00402A26                 mov     [esp+2Ch+Stream], ebx ; File
.text:00402A29                 call    sub_402CF0
.text:00402A2E
.text:00402A2E loc_402A2E:                             ; CODE XREF: sub_4029F0+AF↓j
.text:00402A2E                 test    byte ptr [ebx+0Ch], 20h
.text:00402A32                 jnz     short loc_402A70
.text:00402A34                 cld
.text:00402A35                 mov     ecx, 2
.text:00402A3A                 mov     edi, offset FileName ; "-"
.text:00402A3F                 mov     esi, ebp
.text:00402A41                 repe cmpsb
.text:00402A43                 jnz     short loc_402A60
.text:00402A45                 mov     [esp+2Ch+Stream], ebx ; Stream
.text:00402A48                 call    clearerr
.text:00402A4D
.text:00402A4D loc_402A4D:                             ; CODE XREF: sub_4029F0+79↓j
.text:00402A4D                 mov     eax, 1
.text:00402A52
.text:00402A52 loc_402A52:                             ; CODE XREF: sub_4029F0+A5↓j
.text:00402A52                 add     esp, 1Ch
.text:00402A55                 pop     ebx
.text:00402A56                 pop     esi
.text:00402A57                 pop     edi
.text:00402A58                 pop     ebp
.text:00402A59                 retn
.text:00402A59 ; ---------------------------------------------------------------------------
.text:00402A5A                 align 10h
.text:00402A60
.text:00402A60 loc_402A60:                             ; CODE XREF: sub_4029F0+53↑j
.text:00402A60                 mov     [esp+2Ch+Stream], ebx ; Stream
.text:00402A63                 call    fclose
.text:00402A68                 inc     eax
.text:00402A69                 jnz     short loc_402A4D
.text:00402A6B                 nop
.text:00402A6C                 lea     esi, [esi+0]
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_4029F0+42↑j
.text:00402A70                                         ; sub_4029F0+CB↓j
.text:00402A70                 call    _errno
.text:00402A75                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:00402A79                 mov     [esp+2Ch+var_24], offset sub_4029E3 ; char *
.text:00402A81                 mov     edx, [eax]
.text:00402A83                 mov     [esp+2Ch+Stream], 0 ; Code
.text:00402A8A                 mov     [esp+2Ch+Mode], edx ; ErrorMessage
.text:00402A8E                 call    sub_407100
.text:00402A93                 xor     eax, eax
.text:00402A95                 jmp     short loc_402A52
.text:00402A97 ; ---------------------------------------------------------------------------
.text:00402A97
.text:00402A97 loc_402A97:                             ; CODE XREF: sub_4029F0+34↑j
.text:00402A97                 mov     [esp+2Ch+Stream], ebx ; FILE *
.text:00402A9A                 call    sub_402AE0
.text:00402A9F                 jmp     short loc_402A2E
.text:00402AA1 ; ---------------------------------------------------------------------------
.text:00402AA1
.text:00402AA1 loc_402AA1:                             ; CODE XREF: sub_4029F0+1A↑j
.text:00402AA1                 mov     [esp+2Ch+Mode], (offset sub_4029E3+3) ; Mode
.text:00402AA9                 mov     [esp+2Ch+Stream], ebp ; FileName
.text:00402AAC                 call    fopen
.text:00402AB1                 test    eax, eax
.text:00402AB3                 mov     ebx, eax
.text:00402AB5                 jnz     loc_402A1D
.text:00402ABB                 jmp     short loc_402A70
.text:00402ABB sub_4029F0      endp
.text:00402ABB
.text:00402ABB ; ---------------------------------------------------------------------------
.text:00402ABD                 align 10h
.text:00402AC0
.text:00402AC0 loc_402AC0:                             ; DATA XREF: sub_402570+F5↑o
.text:00402AC0                 mov     ecx, [esp+4]
.text:00402AC4                 mov     edx, [ecx]
.text:00402AC6                 mov     ecx, [esp+8]
.text:00402ACA                 mov     eax, [ecx]
.text:00402ACC                 mov     ecx, 0FFFFFFFFh
.text:00402AD1                 cmp     edx, eax
.text:00402AD3                 jl      short loc_402ADB
.text:00402AD5                 setnle  dl
.text:00402AD8                 movzx   ecx, dl
.text:00402ADB
.text:00402ADB loc_402ADB:                             ; CODE XREF: .text:00402AD3↑j
.text:00402ADB                 mov     eax, ecx
.text:00402ADD                 retn
.text:00402ADD ; ---------------------------------------------------------------------------
.text:00402ADE                 align 10h
.text:00402AE0
.text:00402AE0 ; =============== S U B R O U T I N E =======================================
.text:00402AE0
.text:00402AE0
.text:00402AE0 ; int __cdecl sub_402AE0(FILE *)
.text:00402AE0 sub_402AE0      proc near               ; CODE XREF: sub_4029F0+AA↑p
.text:00402AE0
.text:00402AE0 Buffer          = dword ptr -2Ch
.text:00402AE0 File            = dword ptr -28h
.text:00402AE0 ElementCount    = dword ptr -24h
.text:00402AE0 Stream          = dword ptr -20h
.text:00402AE0 var_19          = byte ptr -19h
.text:00402AE0 var_18          = dword ptr -18h
.text:00402AE0 var_11          = byte ptr -11h
.text:00402AE0 arg_0           = dword ptr  4
.text:00402AE0
.text:00402AE0                 push    ebp
.text:00402AE1                 push    edi
.text:00402AE2                 push    esi
.text:00402AE3                 push    ebx
.text:00402AE4                 sub     esp, 1Ch
.text:00402AE7                 mov     ebp, [esp+2Ch+arg_0]
.text:00402AEB                 nop
.text:00402AEC                 lea     esi, [esi+0]
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_402AE0+1D0↓j
.text:00402AF0                                         ; sub_402AE0+1EE↓j
.text:00402AF0                 mov     [esp+2Ch+var_18], 0
.text:00402AF8                 mov     [esp+2Ch+var_19], 0
.text:00402AFD
.text:00402AFD loc_402AFD:                             ; CODE XREF: sub_402AE0+B4↓j
.text:00402AFD                                         ; sub_402AE0+F6↓j ...
.text:00402AFD                 mov     edx, [ebp+4]
.text:00402B00                 dec     edx
.text:00402B01                 test    edx, edx
.text:00402B03                 mov     [ebp+4], edx
.text:00402B06                 js      loc_402CD3
.text:00402B0C                 mov     edx, [ebp+0]
.text:00402B0F                 movzx   esi, byte ptr [edx]
.text:00402B12                 inc     edx
.text:00402B13                 mov     [ebp+0], edx
.text:00402B16
.text:00402B16 loc_402B16:                             ; CODE XREF: sub_402AE0+1FD↓j
.text:00402B16                 cmp     esi, 0Ah
.text:00402B19                 jz      loc_402C90
.text:00402B1F                 cmp     esi, 0FFFFFFFFh
.text:00402B22                 jz      loc_402C44
.text:00402B28                 xor     ecx, ecx
.text:00402B2A                 mov     eax, ds:dword_40A050
.text:00402B2F                 lea     edi, [esp+2Ch+var_11]
.text:00402B33                 cmp     ds:byte_40A0B0, 0
.text:00402B3A                 setz    cl
.text:00402B3D                 xor     ebx, ebx
.text:00402B3F                 inc     [esp+2Ch+var_18]
.text:00402B43                 dec     ecx
.text:00402B44                 and     edi, ecx
.text:00402B46                 test    eax, eax
.text:00402B48                 jz      short loc_402B50
.text:00402B4A                 cmp     eax, [esp+2Ch+var_18]
.text:00402B4E                 jbe     short loc_402B78
.text:00402B50
.text:00402B50 loc_402B50:                             ; CODE XREF: sub_402AE0+68↑j
.text:00402B50                 mov     eax, [esp+2Ch+var_18]
.text:00402B54                 cmp     eax, ds:dword_40A040
.text:00402B5A                 ja      short loc_402B7A
.text:00402B5C                 mov     ecx, ds:dword_40A060
.text:00402B62                 mov     edx, eax
.text:00402B64                 shr     edx, 3
.text:00402B67                 movzx   eax, byte ptr [edx+ecx]
.text:00402B6B                 mov     ecx, [esp+2Ch+var_18]
.text:00402B6F                 and     ecx, 7
.text:00402B72                 sar     eax, cl
.text:00402B74                 test    al, 1
.text:00402B76                 jz      short loc_402B7A
.text:00402B78
.text:00402B78 loc_402B78:                             ; CODE XREF: sub_402AE0+6E↑j
.text:00402B78                 mov     bl, 1
.text:00402B7A
.text:00402B7A loc_402B7A:                             ; CODE XREF: sub_402AE0+7A↑j
.text:00402B7A                                         ; sub_402AE0+96↑j
.text:00402B7A                 cmp     ds:byte_40A090, 0
.text:00402B81                 jz      short loc_402B86
.text:00402B83                 xor     bl, 1
.text:00402B86
.text:00402B86 loc_402B86:                             ; CODE XREF: sub_402AE0+A1↑j
.text:00402B86                 test    edi, edi
.text:00402B88                 jz      short loc_402B92
.text:00402B8A                 test    bl, bl
.text:00402B8C                 jnz     loc_402C24
.text:00402B92
.text:00402B92 loc_402B92:                             ; CODE XREF: sub_402AE0+A8↑j
.text:00402B92                                         ; sub_402AE0+15F↓j
.text:00402B92                 test    bl, bl
.text:00402B94                 jz      loc_402AFD
.text:00402B9A                 test    edi, edi
.text:00402B9C                 jz      short loc_402BB0
.text:00402B9E                 cmp     byte ptr [edi], 0
.text:00402BA1                 jz      short loc_402BB0
.text:00402BA3                 cmp     [esp+2Ch+var_19], 0
.text:00402BA8                 jnz     short loc_402BF5
.text:00402BAA                 lea     esi, [esi+0]
.text:00402BB0
.text:00402BB0 loc_402BB0:                             ; CODE XREF: sub_402AE0+BC↑j
.text:00402BB0                                         ; sub_402AE0+C1↑j ...
.text:00402BB0                 mov     [esp+2Ch+var_19], 1
.text:00402BB5                 mov     edx, ds:_iob
.text:00402BBB                 mov     ebx, [edx+24h]
.text:00402BBE                 dec     ebx
.text:00402BBF                 test    ebx, ebx
.text:00402BC1                 mov     [edx+24h], ebx
.text:00402BC4                 js      short loc_402BDB
.text:00402BC6                 mov     edi, ds:_iob
.text:00402BCC                 mov     ebx, esi
.text:00402BCE                 mov     eax, [edi+20h]
.text:00402BD1                 mov     [eax], bl
.text:00402BD3                 inc     dword ptr [edi+20h]
.text:00402BD6                 jmp     loc_402AFD
.text:00402BDB ; ---------------------------------------------------------------------------
.text:00402BDB
.text:00402BDB loc_402BDB:                             ; CODE XREF: sub_402AE0+E4↑j
.text:00402BDB                 mov     [esp+2Ch+Buffer], esi ; Ch
.text:00402BDE                 mov     ecx, ds:_iob
.text:00402BE4                 add     ecx, 20h ; ' '
.text:00402BE7                 mov     [esp+2Ch+File], ecx ; File
.text:00402BEB                 call    _flsbuf
.text:00402BF0                 jmp     loc_402AFD
.text:00402BF5 ; ---------------------------------------------------------------------------
.text:00402BF5
.text:00402BF5 loc_402BF5:                             ; CODE XREF: sub_402AE0+C8↑j
.text:00402BF5                 mov     [esp+2Ch+File], 1 ; ElementSize
.text:00402BFD                 mov     ecx, ds:_iob
.text:00402C03                 mov     edi, ds:ElementCount
.text:00402C09                 mov     ebx, ds:Buffer
.text:00402C0F                 add     ecx, 20h ; ' '
.text:00402C12                 mov     [esp+2Ch+Stream], ecx ; Stream
.text:00402C16                 mov     [esp+2Ch+ElementCount], edi ; ElementCount
.text:00402C1A                 mov     [esp+2Ch+Buffer], ebx ; Buffer
.text:00402C1D                 call    fwrite
.text:00402C22                 jmp     short loc_402BB0
.text:00402C24 ; ---------------------------------------------------------------------------
.text:00402C24
.text:00402C24 loc_402C24:                             ; CODE XREF: sub_402AE0+AC↑j
.text:00402C24                 mov     eax, [esp+2Ch+var_18]
.text:00402C28                 mov     edx, ds:dword_40A0F0
.text:00402C2E                 mov     [esp+2Ch+File], eax
.text:00402C32                 mov     [esp+2Ch+Buffer], edx
.text:00402C35                 call    sub_404B70
.text:00402C3A                 test    eax, eax
.text:00402C3C                 setnz   byte ptr [edi]
.text:00402C3F                 jmp     loc_402B92
.text:00402C44 ; ---------------------------------------------------------------------------
.text:00402C44
.text:00402C44 loc_402C44:                             ; CODE XREF: sub_402AE0+42↑j
.text:00402C44                 mov     ebp, [esp+2Ch+var_18]
.text:00402C48                 test    ebp, ebp
.text:00402C4A                 jz      short loc_402C6C
.text:00402C4C                 mov     edx, ds:_iob
.text:00402C52                 mov     ecx, [edx+24h]
.text:00402C55                 dec     ecx
.text:00402C56                 mov     [edx+24h], ecx
.text:00402C59                 test    ecx, ecx
.text:00402C5B                 js      short loc_402C74
.text:00402C5D                 mov     ebx, ds:_iob
.text:00402C63                 mov     esi, [ebx+20h]
.text:00402C66                 mov     byte ptr [esi], 0Ah
.text:00402C69                 inc     dword ptr [ebx+20h]
.text:00402C6C
.text:00402C6C loc_402C6C:                             ; CODE XREF: sub_402AE0+16A↑j
.text:00402C6C                                         ; sub_402AE0+1AD↓j
.text:00402C6C                 add     esp, 1Ch
.text:00402C6F                 pop     ebx
.text:00402C70                 pop     esi
.text:00402C71                 pop     edi
.text:00402C72                 pop     ebp
.text:00402C73                 retn
.text:00402C74 ; ---------------------------------------------------------------------------
.text:00402C74
.text:00402C74 loc_402C74:                             ; CODE XREF: sub_402AE0+17B↑j
.text:00402C74                 mov     [esp+2Ch+Buffer], 0Ah ; Ch
.text:00402C7B                 mov     edi, ds:_iob
.text:00402C81                 add     edi, 20h ; ' '
.text:00402C84                 mov     [esp+2Ch+File], edi ; File
.text:00402C88                 call    _flsbuf
.text:00402C8D                 jmp     short loc_402C6C
.text:00402C8D ; ---------------------------------------------------------------------------
.text:00402C8F                 align 10h
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402AE0+39↑j
.text:00402C90                 mov     ebx, ds:_iob
.text:00402C96                 mov     ecx, [ebx+24h]
.text:00402C99                 dec     ecx
.text:00402C9A                 mov     [ebx+24h], ecx
.text:00402C9D                 test    ecx, ecx
.text:00402C9F                 js      short loc_402CB5
.text:00402CA1                 mov     esi, ds:_iob
.text:00402CA7                 mov     eax, [esi+20h]
.text:00402CAA                 mov     byte ptr [eax], 0Ah
.text:00402CAD                 inc     dword ptr [esi+20h]
.text:00402CB0                 jmp     loc_402AF0
.text:00402CB5 ; ---------------------------------------------------------------------------
.text:00402CB5
.text:00402CB5 loc_402CB5:                             ; CODE XREF: sub_402AE0+1BF↑j
.text:00402CB5                 mov     [esp+2Ch+Buffer], 0Ah ; Ch
.text:00402CBC                 mov     edi, ds:_iob
.text:00402CC2                 add     edi, 20h ; ' '
.text:00402CC5                 mov     [esp+2Ch+File], edi ; File
.text:00402CC9                 call    _flsbuf
.text:00402CCE                 jmp     loc_402AF0
.text:00402CD3 ; ---------------------------------------------------------------------------
.text:00402CD3
.text:00402CD3 loc_402CD3:                             ; CODE XREF: sub_402AE0+26↑j
.text:00402CD3                 mov     [esp+2Ch+Buffer], ebp ; File
.text:00402CD6                 call    _filbuf
.text:00402CDB                 mov     esi, eax
.text:00402CDD                 jmp     loc_402B16
.text:00402CDD sub_402AE0      endp
.text:00402CDD
.text:00402CDD ; ---------------------------------------------------------------------------
.text:00402CE2 aNBytes0        db 'n_bytes != 0',0     ; DATA XREF: sub_402CF0+480↓o
.text:00402CEF                 align 10h
.text:00402CF0
.text:00402CF0 ; =============== S U B R O U T I N E =======================================
.text:00402CF0
.text:00402CF0
.text:00402CF0 ; int __cdecl sub_402CF0(FILE *File)
.text:00402CF0 sub_402CF0      proc near               ; CODE XREF: sub_4029F0+39↑p
.text:00402CF0
.text:00402CF0 Character       = dword ptr -3Ch
.text:00402CF0 Stream          = dword ptr -38h
.text:00402CF0 ElementCount    = dword ptr -34h
.text:00402CF0 var_30          = dword ptr -30h
.text:00402CF0 var_2C          = dword ptr -2Ch
.text:00402CF0 var_28          = dword ptr -28h
.text:00402CF0 var_24          = dword ptr -24h
.text:00402CF0 var_12          = byte ptr -12h
.text:00402CF0 var_11          = byte ptr -11h
.text:00402CF0 File            = dword ptr  4
.text:00402CF0
.text:00402CF0                 push    ebp
.text:00402CF1                 push    edi
.text:00402CF2                 mov     edi, 1
.text:00402CF7                 push    esi
.text:00402CF8                 push    ebx
.text:00402CF9                 sub     esp, 2Ch
.text:00402CFC                 mov     esi, [esp+3Ch+File]
.text:00402D00                 mov     [esp+3Ch+var_11], 0
.text:00402D05                 mov     edx, [esi+4]
.text:00402D08                 dec     edx
.text:00402D09                 mov     [esi+4], edx
.text:00402D0C                 test    edx, edx
.text:00402D0E                 js      loc_40314A
.text:00402D14                 mov     edx, [esi]
.text:00402D16                 movzx   ebx, byte ptr [edx]
.text:00402D19                 inc     edx
.text:00402D1A                 mov     [esi], edx
.text:00402D1C
.text:00402D1C loc_402D1C:                             ; CODE XREF: sub_402CF0+464↓j
.text:00402D1C                 cmp     ebx, 0FFFFFFFFh
.text:00402D1F                 jz      loc_403049
.text:00402D25                 mov     [esp+3Ch+Stream], esi ; Stream
.text:00402D29                 mov     [esp+3Ch+Character], ebx ; Character
.text:00402D2C                 call    ungetc
.text:00402D31                 movzx   ecx, ds:byte_40A080
.text:00402D38                 xor     edx, edx
.text:00402D3A                 mov     eax, ds:dword_40A050
.text:00402D3F                 test    eax, eax
.text:00402D41                 jz      short loc_402D48
.text:00402D43                 cmp     eax, 1
.text:00402D46                 jbe     short loc_402D61
.text:00402D48
.text:00402D48 loc_402D48:                             ; CODE XREF: sub_402CF0+51↑j
.text:00402D48                 mov     ebp, 1
.text:00402D4D                 cmp     ebp, ds:dword_40A040
.text:00402D53                 ja      short loc_402D63
.text:00402D55                 mov     ebp, ds:dword_40A060
.text:00402D5B                 test    byte ptr [ebp+0], 2
.text:00402D5F                 jz      short loc_402D63
.text:00402D61
.text:00402D61 loc_402D61:                             ; CODE XREF: sub_402CF0+56↑j
.text:00402D61                 mov     dl, 1
.text:00402D63
.text:00402D63 loc_402D63:                             ; CODE XREF: sub_402CF0+63↑j
.text:00402D63                                         ; sub_402CF0+6F↑j
.text:00402D63                 cmp     ds:byte_40A090, 0
.text:00402D6A                 jz      loc_403143
.text:00402D70                 mov     al, dl
.text:00402D72                 xor     al, 1
.text:00402D74
.text:00402D74 loc_402D74:                             ; CODE XREF: sub_402CF0+455↓j
.text:00402D74                 test    al, al
.text:00402D76                 jnz     loc_40313C
.text:00402D7C                 dec     ecx
.text:00402D7D
.text:00402D7D loc_402D7D:                             ; CODE XREF: sub_402CF0+44E↓j
.text:00402D7D                 setnz   [esp+3Ch+var_12]
.text:00402D82
.text:00402D82 loc_402D82:                             ; CODE XREF: sub_402CF0+188↓j
.text:00402D82                                         ; sub_402CF0+24E↓j ...
.text:00402D82                 cmp     edi, 1
.text:00402D85                 jz      loc_402EC8
.text:00402D8B
.text:00402D8B loc_402D8B:                             ; CODE XREF: sub_402CF0+1DD↓j
.text:00402D8B                                         ; sub_402CF0+307↓j
.text:00402D8B                 cmp     ebx, 0FFFFFFFFh
.text:00402D8E                 jz      loc_402E58
.text:00402D94                 mov     eax, ds:dword_40A050
.text:00402D99                 xor     ebx, ebx
.text:00402D9B                 test    eax, eax
.text:00402D9D                 jz      short loc_402DA3
.text:00402D9F                 cmp     eax, edi
.text:00402DA1                 jbe     short loc_402DC5
.text:00402DA3
.text:00402DA3 loc_402DA3:                             ; CODE XREF: sub_402CF0+AD↑j
.text:00402DA3                 cmp     edi, ds:dword_40A040
.text:00402DA9                 ja      short loc_402DC7
.text:00402DAB                 mov     ebp, ds:dword_40A060
.text:00402DB1                 mov     ecx, edi
.text:00402DB3                 shr     ecx, 3
.text:00402DB6                 movzx   eax, byte ptr [ecx+ebp]
.text:00402DBA                 mov     ecx, edi
.text:00402DBC                 and     ecx, 7
.text:00402DBF                 sar     eax, cl
.text:00402DC1                 test    al, 1
.text:00402DC3                 jz      short loc_402DC7
.text:00402DC5
.text:00402DC5 loc_402DC5:                             ; CODE XREF: sub_402CF0+B1↑j
.text:00402DC5                 mov     bl, 1
.text:00402DC7
.text:00402DC7 loc_402DC7:                             ; CODE XREF: sub_402CF0+B9↑j
.text:00402DC7                                         ; sub_402CF0+D3↑j
.text:00402DC7                 cmp     ds:byte_40A090, 0
.text:00402DCE                 jz      loc_403135
.text:00402DD4                 mov     al, bl
.text:00402DD6                 xor     al, 1
.text:00402DD8
.text:00402DD8 loc_402DD8:                             ; CODE XREF: sub_402CF0+447↓j
.text:00402DD8                 test    al, al
.text:00402DDA                 jz      loc_4030F4
.text:00402DE0                 cmp     [esp+3Ch+var_11], 0
.text:00402DE5                 jnz     loc_4030C2
.text:00402DEB
.text:00402DEB loc_402DEB:                             ; CODE XREF: sub_402CF0+3FF↓j
.text:00402DEB                 mov     [esp+3Ch+var_11], 1
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402CF0+14F↓j
.text:00402DF0                                         ; sub_402CF0+166↓j
.text:00402DF0                 mov     ebx, [esi+4]
.text:00402DF3                 dec     ebx
.text:00402DF4                 test    ebx, ebx
.text:00402DF6                 mov     [esi+4], ebx
.text:00402DF9                 js      loc_4030B3
.text:00402DFF                 mov     edx, [esi]
.text:00402E01                 movzx   ebx, byte ptr [edx]
.text:00402E04                 inc     edx
.text:00402E05                 mov     [esi], edx
.text:00402E07
.text:00402E07 loc_402E07:                             ; CODE XREF: sub_402CF0+3CD↓j
.text:00402E07                 movzx   ebp, ds:byte_40A0A0
.text:00402E0E                 cmp     ebx, ebp
.text:00402E10                 jz      short loc_402E58
.text:00402E12                 cmp     ebx, 0Ah
.text:00402E15                 jz      loc_403075
.text:00402E1B                 cmp     ebx, 0FFFFFFFFh
.text:00402E1E                 jz      short loc_402E58
.text:00402E20                 mov     edx, ds:_iob
.text:00402E26                 mov     ecx, [edx+24h]
.text:00402E29                 dec     ecx
.text:00402E2A                 mov     [edx+24h], ecx
.text:00402E2D                 test    ecx, ecx
.text:00402E2F                 js      short loc_402E41
.text:00402E31                 mov     ebp, ds:_iob
.text:00402E37                 mov     eax, [ebp+20h]
.text:00402E3A                 mov     [eax], bl
.text:00402E3C                 inc     dword ptr [ebp+20h]
.text:00402E3F                 jmp     short loc_402DF0
.text:00402E41 ; ---------------------------------------------------------------------------
.text:00402E41
.text:00402E41 loc_402E41:                             ; CODE XREF: sub_402CF0+13F↑j
.text:00402E41                 mov     [esp+3Ch+Character], ebx ; Ch
.text:00402E44                 mov     ecx, ds:_iob
.text:00402E4A                 add     ecx, 20h ; ' '
.text:00402E4D                 mov     [esp+3Ch+Stream], ecx ; File
.text:00402E51                 call    _flsbuf
.text:00402E56                 jmp     short loc_402DF0
.text:00402E58 ; ---------------------------------------------------------------------------
.text:00402E58
.text:00402E58 loc_402E58:                             ; CODE XREF: sub_402CF0+9E↑j
.text:00402E58                                         ; sub_402CF0+120↑j ...
.text:00402E58                 cmp     ebx, 0Ah
.text:00402E5B                 jz      loc_403075
.text:00402E61
.text:00402E61 loc_402E61:                             ; CODE XREF: sub_402CF0+39B↓j
.text:00402E61                                         ; sub_402CF0+3B2↓j
.text:00402E61                 movzx   edx, ds:byte_40A0A0
.text:00402E68                 cmp     ebx, edx
.text:00402E6A                 jz      loc_40306F
.text:00402E70                 cmp     ebx, 0Ah
.text:00402E73                 jz      short loc_402E7E
.text:00402E75                 cmp     ebx, 0FFFFFFFFh
.text:00402E78                 jnz     loc_402D82
.text:00402E7E
.text:00402E7E loc_402E7E:                             ; CODE XREF: sub_402CF0+183↑j
.text:00402E7E                 cmp     [esp+3Ch+var_11], 0
.text:00402E83                 jnz     short loc_402E91
.text:00402E85                 cmp     ds:byte_40A080, 0
.text:00402E8C                 jz      short loc_402E91
.text:00402E8E                 dec     edi
.text:00402E8F                 jz      short loc_402EB5
.text:00402E91
.text:00402E91 loc_402E91:                             ; CODE XREF: sub_402CF0+193↑j
.text:00402E91                                         ; sub_402CF0+19C↑j
.text:00402E91                 mov     ebp, ds:_iob
.text:00402E97                 mov     edi, [ebp+24h]
.text:00402E9A                 dec     edi
.text:00402E9B                 mov     [ebp+24h], edi
.text:00402E9E                 test    edi, edi
.text:00402EA0                 js      loc_403051
.text:00402EA6                 mov     ecx, ds:_iob
.text:00402EAC                 mov     eax, [ecx+20h]
.text:00402EAF                 mov     byte ptr [eax], 0Ah
.text:00402EB2                 inc     dword ptr [ecx+20h]
.text:00402EB5
.text:00402EB5 loc_402EB5:                             ; CODE XREF: sub_402CF0+19F↑j
.text:00402EB5                                         ; sub_402CF0+37A↓j
.text:00402EB5                 cmp     ebx, 0FFFFFFFFh
.text:00402EB8                 jz      loc_403049
.text:00402EBE                 mov     [esp+3Ch+var_11], 0
.text:00402EC3                 mov     edi, 1
.text:00402EC8
.text:00402EC8 loc_402EC8:                             ; CODE XREF: sub_402CF0+95↑j
.text:00402EC8                 cmp     [esp+3Ch+var_12], 0
.text:00402ECD                 jz      loc_402D8B
.text:00402ED3                 movzx   ecx, ds:byte_40A0A0
.text:00402EDA                 mov     [esp+3Ch+var_24], esi ; File
.text:00402EDE                 mov     [esp+3Ch+var_28], 0Ah ; int
.text:00402EE6                 mov     [esp+3Ch+var_30], 0FFFFFFFFh ; size_t
.text:00402EEE                 mov     [esp+3Ch+var_2C], ecx ; int
.text:00402EF2                 mov     [esp+3Ch+ElementCount], 0 ; int
.text:00402EFA                 mov     [esp+3Ch+Stream], offset unk_40A030 ; int
.text:00402F02                 mov     [esp+3Ch+Character], offset Block ; int
.text:00402F09                 call    sub_405AA0
.text:00402F0E                 test    eax, eax
.text:00402F10                 mov     ebp, eax
.text:00402F12                 js      loc_403031
.text:00402F18                 test    eax, eax
.text:00402F1A                 jz      loc_403160
.text:00402F20                 movzx   ecx, ds:byte_40A0A0
.text:00402F27                 mov     edx, ds:Block
.text:00402F2D                 cmp     [eax+edx-1], cl
.text:00402F31                 jz      loc_402FC0
.text:00402F37                 cmp     ds:byte_40A080, 0
.text:00402F3E                 jnz     loc_402D82
.text:00402F44                 mov     [esp+3Ch+Character], edx ; Buffer
.text:00402F47                 mov     ecx, ds:_iob
.text:00402F4D                 mov     [esp+3Ch+ElementCount], eax ; ElementCount
.text:00402F51                 mov     [esp+3Ch+Stream], 1 ; ElementSize
.text:00402F59                 add     ecx, 20h ; ' '
.text:00402F5C                 mov     [esp+3Ch+var_30], ecx ; Stream
.text:00402F60                 call    fwrite
.text:00402F65                 mov     edx, ds:Block
.text:00402F6B                 cmp     byte ptr [ebp+edx-1], 0Ah
.text:00402F70                 jz      loc_402D82
.text:00402F76                 mov     edx, ds:_iob
.text:00402F7C                 mov     ebp, [edx+24h]
.text:00402F7F                 dec     ebp
.text:00402F80                 mov     [edx+24h], ebp
.text:00402F83                 test    ebp, ebp
.text:00402F85                 js      short loc_402F9B
.text:00402F87                 mov     ecx, ds:_iob
.text:00402F8D                 mov     eax, [ecx+20h]
.text:00402F90                 mov     byte ptr [eax], 0Ah
.text:00402F93                 inc     dword ptr [ecx+20h]
.text:00402F96                 jmp     loc_402D82
.text:00402F9B ; ---------------------------------------------------------------------------
.text:00402F9B
.text:00402F9B loc_402F9B:                             ; CODE XREF: sub_402CF0+295↑j
.text:00402F9B                 mov     [esp+3Ch+Character], 0Ah ; Ch
.text:00402FA2                 mov     ebp, ds:_iob
.text:00402FA8                 add     ebp, 20h ; ' '
.text:00402FAB                 mov     [esp+3Ch+Stream], ebp ; File
.text:00402FAF                 call    _flsbuf
.text:00402FB4                 jmp     loc_402D82
.text:00402FB4 ; ---------------------------------------------------------------------------
.text:00402FB9                 align 10h
.text:00402FC0
.text:00402FC0 loc_402FC0:                             ; CODE XREF: sub_402CF0+241↑j
.text:00402FC0                 mov     eax, ds:dword_40A050
.text:00402FC5                 xor     edx, edx
.text:00402FC7                 test    eax, eax
.text:00402FC9                 jz      short loc_402FD0
.text:00402FCB                 cmp     eax, 1
.text:00402FCE                 jbe     short loc_402FE3
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_402CF0+2D9↑j
.text:00402FD0                 cmp     edi, ds:dword_40A040
.text:00402FD6                 ja      short loc_402FE5
.text:00402FD8                 mov     ecx, ds:dword_40A060
.text:00402FDE                 test    byte ptr [ecx], 2
.text:00402FE1                 jz      short loc_402FE5
.text:00402FE3
.text:00402FE3 loc_402FE3:                             ; CODE XREF: sub_402CF0+2DE↑j
.text:00402FE3                 mov     dl, 1
.text:00402FE5
.text:00402FE5 loc_402FE5:                             ; CODE XREF: sub_402CF0+2E6↑j
.text:00402FE5                                         ; sub_402CF0+2F1↑j
.text:00402FE5                 cmp     ds:byte_40A090, 0
.text:00402FEC                 jz      short loc_40302D
.text:00402FEE                 mov     al, dl
.text:00402FF0                 xor     al, 1
.text:00402FF2
.text:00402FF2 loc_402FF2:                             ; CODE XREF: sub_402CF0+33F↓j
.text:00402FF2                 test    al, al
.text:00402FF4                 jnz     short loc_402FFC
.text:00402FF6
.text:00402FF6 loc_402FF6:                             ; CODE XREF: sub_402CF0+33B↓j
.text:00402FF6                 inc     edi
.text:00402FF7                 jmp     loc_402D8B
.text:00402FFC ; ---------------------------------------------------------------------------
.text:00402FFC
.text:00402FFC loc_402FFC:                             ; CODE XREF: sub_402CF0+304↑j
.text:00402FFC                 mov     [esp+3Ch+Stream], 1 ; ElementSize
.text:00403004                 mov     edx, ds:_iob
.text:0040300A                 lea     ecx, [ebp-1]
.text:0040300D                 mov     [esp+3Ch+ElementCount], ecx ; ElementCount
.text:00403011                 add     edx, 20h ; ' '
.text:00403014                 mov     [esp+3Ch+var_30], edx ; Stream
.text:00403018                 mov     edx, ds:Block
.text:0040301E                 mov     [esp+3Ch+Character], edx ; Buffer
.text:00403021                 call    fwrite
.text:00403026                 mov     [esp+3Ch+var_11], 1
.text:0040302B                 jmp     short loc_402FF6
.text:0040302D ; ---------------------------------------------------------------------------
.text:0040302D
.text:0040302D loc_40302D:                             ; CODE XREF: sub_402CF0+2FC↑j
.text:0040302D                 mov     al, dl
.text:0040302F                 jmp     short loc_402FF2
.text:00403031 ; ---------------------------------------------------------------------------
.text:00403031
.text:00403031 loc_403031:                             ; CODE XREF: sub_402CF0+222↑j
.text:00403031                 mov     ebx, ds:Block
.text:00403037                 mov     [esp+3Ch+Character], ebx ; Block
.text:0040303A                 call    free
.text:0040303F                 test    byte ptr [esi+0Ch], 30h
.text:00403043                 jz      loc_403159
.text:00403049
.text:00403049 loc_403049:                             ; CODE XREF: sub_402CF0+2F↑j
.text:00403049                                         ; sub_402CF0+1C8↑j
.text:00403049                 add     esp, 2Ch
.text:0040304C                 pop     ebx
.text:0040304D                 pop     esi
.text:0040304E                 pop     edi
.text:0040304F                 pop     ebp
.text:00403050                 retn
.text:00403051 ; ---------------------------------------------------------------------------
.text:00403051
.text:00403051 loc_403051:                             ; CODE XREF: sub_402CF0+1B0↑j
.text:00403051                 mov     [esp+3Ch+Character], 0Ah ; Ch
.text:00403058                 mov     edx, ds:_iob
.text:0040305E                 add     edx, 20h ; ' '
.text:00403061                 mov     [esp+3Ch+Stream], edx ; File
.text:00403065                 call    _flsbuf
.text:0040306A                 jmp     loc_402EB5
.text:0040306F ; ---------------------------------------------------------------------------
.text:0040306F
.text:0040306F loc_40306F:                             ; CODE XREF: sub_402CF0+17A↑j
.text:0040306F                 inc     edi
.text:00403070                 jmp     loc_402D82
.text:00403075 ; ---------------------------------------------------------------------------
.text:00403075
.text:00403075 loc_403075:                             ; CODE XREF: sub_402CF0+125↑j
.text:00403075                                         ; sub_402CF0+16B↑j ...
.text:00403075                 mov     ebx, [esi+4]
.text:00403078                 dec     ebx
.text:00403079                 test    ebx, ebx
.text:0040307B                 mov     [esi+4], ebx
.text:0040307E                 js      short loc_4030A7
.text:00403080                 mov     ecx, [esi]
.text:00403082                 movzx   ebx, byte ptr [ecx]
.text:00403085                 inc     ecx
.text:00403086                 mov     [esi], ecx
.text:00403088
.text:00403088 loc_403088:                             ; CODE XREF: sub_402CF0+3C1↓j
.text:00403088                 cmp     ebx, 0FFFFFFFFh
.text:0040308B                 jz      loc_402E61
.text:00403091                 mov     [esp+3Ch+Character], ebx ; Character
.text:00403094                 mov     ebx, 0Ah
.text:00403099                 mov     [esp+3Ch+Stream], esi ; Stream
.text:0040309D                 call    ungetc
.text:004030A2                 jmp     loc_402E61
.text:004030A7 ; ---------------------------------------------------------------------------
.text:004030A7
.text:004030A7 loc_4030A7:                             ; CODE XREF: sub_402CF0+38E↑j
.text:004030A7                 mov     [esp+3Ch+Character], esi ; File
.text:004030AA                 call    _filbuf
.text:004030AF                 mov     ebx, eax
.text:004030B1                 jmp     short loc_403088
.text:004030B3 ; ---------------------------------------------------------------------------
.text:004030B3
.text:004030B3 loc_4030B3:                             ; CODE XREF: sub_402CF0+109↑j
.text:004030B3                 mov     [esp+3Ch+Character], esi ; File
.text:004030B6                 call    _filbuf
.text:004030BB                 mov     ebx, eax
.text:004030BD                 jmp     loc_402E07
.text:004030C2 ; ---------------------------------------------------------------------------
.text:004030C2
.text:004030C2 loc_4030C2:                             ; CODE XREF: sub_402CF0+F5↑j
.text:004030C2                 mov     [esp+3Ch+Stream], 1 ; ElementSize
.text:004030CA                 mov     ebp, ds:_iob
.text:004030D0                 mov     edx, ds:ElementCount
.text:004030D6                 mov     ebx, ds:Buffer
.text:004030DC                 add     ebp, 20h ; ' '
.text:004030DF                 mov     [esp+3Ch+var_30], ebp ; Stream
.text:004030E3                 mov     [esp+3Ch+ElementCount], edx ; ElementCount
.text:004030E7                 mov     [esp+3Ch+Character], ebx ; Buffer
.text:004030EA                 call    fwrite
.text:004030EF                 jmp     loc_402DEB
.text:004030F4 ; ---------------------------------------------------------------------------
.text:004030F4
.text:004030F4 loc_4030F4:                             ; CODE XREF: sub_402CF0+EA↑j
.text:004030F4                                         ; sub_402CF0+432↓j
.text:004030F4                 mov     ecx, [esi+4]
.text:004030F7                 dec     ecx
.text:004030F8                 test    ecx, ecx
.text:004030FA                 mov     [esi+4], ecx
.text:004030FD                 js      short loc_403129
.text:004030FF                 mov     edx, [esi]
.text:00403101                 movzx   ebx, byte ptr [edx]
.text:00403104                 inc     edx
.text:00403105                 mov     [esi], edx
.text:00403107
.text:00403107 loc_403107:                             ; CODE XREF: sub_402CF0+443↓j
.text:00403107                 movzx   ebp, ds:byte_40A0A0
.text:0040310E                 cmp     ebx, ebp
.text:00403110                 jz      loc_402E58
.text:00403116                 cmp     ebx, 0Ah
.text:00403119                 jz      loc_403075
.text:0040311F                 cmp     ebx, 0FFFFFFFFh
.text:00403122                 jnz     short loc_4030F4
.text:00403124                 jmp     loc_402E58
.text:00403129 ; ---------------------------------------------------------------------------
.text:00403129
.text:00403129 loc_403129:                             ; CODE XREF: sub_402CF0+40D↑j
.text:00403129                 mov     [esp+3Ch+Character], esi ; File
.text:0040312C                 call    _filbuf
.text:00403131                 mov     ebx, eax
.text:00403133                 jmp     short loc_403107
.text:00403135 ; ---------------------------------------------------------------------------
.text:00403135
.text:00403135 loc_403135:                             ; CODE XREF: sub_402CF0+DE↑j
.text:00403135                 mov     al, bl
.text:00403137                 jmp     loc_402DD8
.text:0040313C ; ---------------------------------------------------------------------------
.text:0040313C
.text:0040313C loc_40313C:                             ; CODE XREF: sub_402CF0+86↑j
.text:0040313C                 test    ecx, ecx
.text:0040313E                 jmp     loc_402D7D
.text:00403143 ; ---------------------------------------------------------------------------
.text:00403143
.text:00403143 loc_403143:                             ; CODE XREF: sub_402CF0+7A↑j
.text:00403143                 mov     al, dl
.text:00403145                 jmp     loc_402D74
.text:0040314A ; ---------------------------------------------------------------------------
.text:0040314A
.text:0040314A loc_40314A:                             ; CODE XREF: sub_402CF0+1E↑j
.text:0040314A                 mov     [esp+3Ch+Character], esi ; File
.text:0040314D                 call    _filbuf
.text:00403152                 mov     ebx, eax
.text:00403154                 jmp     loc_402D1C
.text:00403159 ; ---------------------------------------------------------------------------
.text:00403159
.text:00403159 loc_403159:                             ; CODE XREF: sub_402CF0+353↑j
.text:00403159                 call    sub_405CD0
.text:00403159 ; ---------------------------------------------------------------------------
.text:0040315E                 align 10h
.text:00403160
.text:00403160 loc_403160:                             ; CODE XREF: sub_402CF0+22A↑j
.text:00403160                 mov     [esp+3Ch+ElementCount], 268h
.text:00403168                 mov     [esp+3Ch+Stream], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/cut.c"
.text:00403170                 mov     [esp+3Ch+Character], offset aNBytes0 ; "n_bytes != 0"
.text:00403177                 call    _assert
.text:00403177 sub_402CF0      endp
.text:00403177
.text:00403177 ; ---------------------------------------------------------------------------
.text:0040317C                 align 10h
.text:00403180
.text:00403180 ; =============== S U B R O U T I N E =======================================
.text:00403180
.text:00403180
.text:00403180 sub_403180      proc near               ; DATA XREF: sub_403300+1B4↓o
.text:00403180                 sub     eax, 9090002Dh
.text:00403185                 nop
.text:00403186                 nop
.text:00403187                 nop
.text:00403188                 nop
.text:00403189                 nop
.text:0040318A                 nop
.text:0040318B                 nop
.text:0040318C                 nop
.text:0040318D                 nop
.text:0040318E                 nop
.text:0040318F                 nop
.text:00403190                 nop
.text:00403191                 nop
.text:00403192                 nop
.text:00403193                 nop
.text:00403194                 nop
.text:00403195                 nop
.text:00403196                 nop
.text:00403197                 nop
.text:00403198                 nop
.text:00403199                 nop
.text:0040319A                 nop
.text:0040319B                 nop
.text:0040319C                 nop
.text:0040319D                 nop
.text:0040319E                 nop
.text:0040319F                 nop
.text:0040319F sub_403180      endp
.text:0040319F
.text:004031A0
.text:004031A0 ; =============== S U B R O U T I N E =======================================
.text:004031A0
.text:004031A0
.text:004031A0 sub_4031A0      proc near               ; DATA XREF: sub_403300+3CC↓o
.text:004031A0                 and     eax, 6F203A73h
.text:004031A5                 jo      short loc_40321B
.text:004031A7                 imul    ebp, [edi+6Eh], 63256020h
.text:004031AE                 and     eax, 64202773h
.text:004031B3                 outsd
.text:004031B4                 db      65h
.text:004031B4                 jnb     short loc_403225
.text:004031B7                 daa
.text:004031B8                 jz      short loc_4031DA
.text:004031BA                 popa
.text:004031BB                 insb
.text:004031BC                 insb
.text:004031BD                 outsd
.text:004031BE                 ja      short sub_4031E0
.text:004031C0                 popa
.text:004031C1                 outsb
.text:004031C2                 and     [ecx+72h], ah
.text:004031C5                 db      67h
.text:004031C5                 jnz     near ptr loc_403234+1
.text:004031C8                 outs    dx, byte ptr gs:[esi]
.text:004031CA                 jz      short loc_4031D6
.text:004031CC                 add     [eax-6F6F6F70h], dl
.text:004031D2                 nop
.text:004031D3                 nop
.text:004031D4                 nop
.text:004031D5                 nop
.text:004031D6
.text:004031D6 loc_4031D6:                             ; CODE XREF: sub_4031A0+2A↑j
.text:004031D6                 nop
.text:004031D7                 nop
.text:004031D8                 nop
.text:004031D9                 nop
.text:004031DA
.text:004031DA loc_4031DA:                             ; CODE XREF: sub_4031A0+18↑j
.text:004031DA                 nop
.text:004031DB                 nop
.text:004031DC                 nop
.text:004031DD                 nop
.text:004031DE                 nop
.text:004031DF                 nop
.text:004031DF sub_4031A0      endp ; sp-analysis failed
.text:004031DF
.text:004031E0
.text:004031E0 ; =============== S U B R O U T I N E =======================================
.text:004031E0
.text:004031E0
.text:004031E0 sub_4031E0      proc near               ; CODE XREF: sub_4031A0+1E↑j
.text:004031E0                                         ; DATA XREF: sub_403300:loc_403732↓o
.text:004031E0                 and     eax, 6F203A73h
.text:004031E5                 jo      short loc_40325B
.text:004031E7                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:004031EE                 and     eax, 64202773h
.text:004031F3                 outsd
.text:004031F4                 db      65h
.text:004031F4                 jnb     short loc_403265
.text:004031F7                 daa
.text:004031F8                 jz      short loc_40321A
.text:004031FA                 popa
.text:004031FB                 insb
.text:004031FC                 insb
.text:004031FD                 outsd
.text:004031FE                 ja      short sub_403220
.text:00403200                 popa
.text:00403201                 outsb
.text:00403202                 and     [ecx+72h], ah
.text:00403205                 db      67h
.text:00403205                 jnz     loc_403275
.text:00403208                 outs    dx, byte ptr gs:[esi]
.text:0040320A                 jz      short loc_403216
.text:0040320C                 add     [eax-6F6F6F70h], dl
.text:00403212                 nop
.text:00403213                 nop
.text:00403214                 nop
.text:00403215                 nop
.text:00403216
.text:00403216 loc_403216:                             ; CODE XREF: sub_4031E0+2A↑j
.text:00403216                 nop
.text:00403217                 nop
.text:00403218                 nop
.text:00403219                 nop
.text:0040321A
.text:0040321A loc_40321A:                             ; CODE XREF: sub_4031E0+18↑j
.text:0040321A                 nop
.text:0040321B
.text:0040321B loc_40321B:                             ; CODE XREF: sub_4031A0+5↑j
.text:0040321B                 nop
.text:0040321C                 nop
.text:0040321D                 nop
.text:0040321E                 nop
.text:0040321F                 nop
.text:0040321F sub_4031E0      endp ; sp-analysis failed
.text:0040321F
.text:00403220
.text:00403220 ; =============== S U B R O U T I N E =======================================
.text:00403220
.text:00403220
.text:00403220 sub_403220      proc near               ; CODE XREF: sub_4031E0+1E↑j
.text:00403220                                         ; DATA XREF: sub_403300:loc_4037D0↓o ...
.text:00403220                 and     eax, 6F203A73h
.text:00403225
.text:00403225 loc_403225:                             ; CODE XREF: sub_4031A0+14↑j
.text:00403225                 jo      short loc_40329B
.text:00403227                 imul    ebp, [edi+6Eh], 73256020h
.text:0040322E                 daa
.text:0040322F                 and     [edx+65h], dh
.text:00403232                 jno     short near ptr loc_4032A8+1
.text:00403234
.text:00403234 loc_403234:                             ; CODE XREF: sub_4031A0+25↑j
.text:00403234                 imul    esi, [edx+65h], 6E612073h
.text:0040323B                 and     [ecx+72h], ah
.text:0040323E                 db      67h
.text:0040323E                 jnz     near ptr loc_4032AC+2
.text:00403241                 outs    dx, byte ptr gs:[esi]
.text:00403243                 jz      short loc_40324F
.text:00403245                 add     [eax-6F6F6F70h], dl
.text:0040324B                 nop
.text:0040324C                 nop
.text:0040324D                 nop
.text:0040324E                 nop
.text:0040324F
.text:0040324F loc_40324F:                             ; CODE XREF: sub_403220+23↑j
.text:0040324F                 nop
.text:00403250                 nop
.text:00403251                 nop
.text:00403252                 nop
.text:00403253                 nop
.text:00403254                 nop
.text:00403255                 nop
.text:00403256                 nop
.text:00403257                 nop
.text:00403258                 nop
.text:00403259                 nop
.text:0040325A                 nop
.text:0040325B
.text:0040325B loc_40325B:                             ; CODE XREF: sub_4031E0+5↑j
.text:0040325B                 nop
.text:0040325C                 nop
.text:0040325D                 nop
.text:0040325E                 nop
.text:0040325F                 nop
.text:0040325F sub_403220      endp
.text:0040325F
.text:00403260
.text:00403260 ; =============== S U B R O U T I N E =======================================
.text:00403260
.text:00403260
.text:00403260 sub_403260      proc near               ; DATA XREF: sub_403300+55E↓o
.text:00403260                 and     eax, 75203A73h
.text:00403265
.text:00403265 loc_403265:                             ; CODE XREF: sub_4031E0+14↑j
.text:00403265                 outsb
.text:00403266                 jb      short near ptr loc_4032C7+6
.text:00403268                 arpl    [edi+67h], bp
.text:0040326B                 outsb
.text:0040326C                 imul    edi, [edx+65h], 706F2064h
.text:00403273                 jz      short loc_4032DE
.text:00403275
.text:00403275 loc_403275:                             ; CODE XREF: sub_4031E0+25↑j
.text:00403275                 outsd
.text:00403276                 outsb
.text:00403277                 and     [eax+25h], ah
.text:0040327A                 arpl    ds:0A2773h, sp
.text:00403280
.text:00403280 loc_403280:                             ; DATA XREF: sub_403300:loc_4038A1↓o
.text:00403280                 add     [eax-6F6F6F70h], dl
.text:00403286                 nop
.text:00403287                 nop
.text:00403288                 nop
.text:00403289                 nop
.text:0040328A                 nop
.text:0040328B                 nop
.text:0040328C                 nop
.text:0040328D                 nop
.text:0040328E                 nop
.text:0040328F                 nop
.text:00403290                 nop
.text:00403291                 nop
.text:00403292                 nop
.text:00403293                 nop
.text:00403294                 nop
.text:00403295                 nop
.text:00403296                 nop
.text:00403297                 nop
.text:00403298                 nop
.text:00403299                 nop
.text:0040329A                 nop
.text:0040329B
.text:0040329B loc_40329B:                             ; CODE XREF: sub_403220:loc_403225↑j
.text:0040329B                 nop
.text:0040329C                 nop
.text:0040329D                 nop
.text:0040329E                 nop
.text:0040329F                 nop
.text:0040329F sub_403260      endp
.text:0040329F
.text:004032A0
.text:004032A0 ; =============== S U B R O U T I N E =======================================
.text:004032A0
.text:004032A0
.text:004032A0 sub_4032A0      proc near               ; DATA XREF: sub_403300:loc_4038BA↓o
.text:004032A0                 and     eax, 75203A73h
.text:004032A5                 outsb
.text:004032A6                 jb      short near ptr loc_403307+6
.text:004032A8
.text:004032A8 loc_4032A8:                             ; CODE XREF: sub_403220+12↑j
.text:004032A8                 arpl    [edi+67h], bp
.text:004032AB                 outsb
.text:004032AC
.text:004032AC loc_4032AC:                             ; CODE XREF: sub_403220+1E↑j
.text:004032AC                 imul    edi, [edx+65h], 706F2064h
.text:004032B3                 jz      short loc_40331E
.text:004032B5                 outsd
.text:004032B6                 outsb
.text:004032B7                 and     [eax+2Dh], ah
.text:004032BA                 sub     eax, 0A277325h
.text:004032BF                 add     ds:6F203A73h, ah
.text:004032C5                 jo      short loc_40333B
.text:004032C7
.text:004032C7 loc_4032C7:                             ; CODE XREF: sub_403260+6↑j
.text:004032C7                 imul    ebp, [edi+6Eh], 71657220h
.text:004032CE                 jnz     short loc_403339
.text:004032D0                 jb      short loc_403337
.text:004032D2                 jnb     short loc_4032F4
.text:004032D4                 popa
.text:004032D5                 outsb
.text:004032D6                 and     [ecx+72h], ah
.text:004032D9                 db      67h
.text:004032D9                 jnz     near ptr loc_403347+2
.text:004032DC                 outs    dx, byte ptr gs:[esi]
.text:004032DE
.text:004032DE loc_4032DE:                             ; CODE XREF: sub_403260+13↑j
.text:004032DE                 jz      short sub_403300
.text:004032E0                 sub     eax, 6325202Dh
.text:004032E5                 or      al, [eax]
.text:004032E7                 nop
.text:004032E8                 nop
.text:004032E9                 nop
.text:004032EA                 nop
.text:004032EB                 nop
.text:004032EC                 nop
.text:004032ED                 nop
.text:004032EE                 nop
.text:004032EF                 nop
.text:004032F0                 nop
.text:004032F1                 nop
.text:004032F2                 nop
.text:004032F3                 nop
.text:004032F4
.text:004032F4 loc_4032F4:                             ; CODE XREF: sub_4032A0+32↑j
.text:004032F4                 nop
.text:004032F5                 nop
.text:004032F6                 nop
.text:004032F7                 nop
.text:004032F8                 nop
.text:004032F9                 nop
.text:004032FA                 nop
.text:004032FB                 nop
.text:004032FC                 nop
.text:004032FD                 nop
.text:004032FE                 nop
.text:004032FF                 nop
.text:004032FF sub_4032A0      endp ; sp-analysis failed
.text:004032FF
.text:00403300
.text:00403300 ; =============== S U B R O U T I N E =======================================
.text:00403300
.text:00403300
.text:00403300 ; int __cdecl sub_403300(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00403300 sub_403300      proc near               ; CODE XREF: sub_4032A0:loc_4032DE↑j
.text:00403300                                         ; DATA XREF: sub_403300:loc_403B13↓o
.text:00403300
.text:00403300 Str2            = dword ptr  4
.text:00403300 MaxCount        = dword ptr  8
.text:00403300 arg_8           = dword ptr  0Ch
.text:00403300 arg_C           = dword ptr  10h
.text:00403300 arg_1C          = dword ptr  20h
.text:00403300 arg_20          = dword ptr  24h
.text:00403300 arg_24          = dword ptr  28h
.text:00403300 arg_28          = dword ptr  2Ch
.text:00403300 arg_2C          = dword ptr  30h
.text:00403300 arg_30          = dword ptr  34h
.text:00403300 arg_34          = dword ptr  38h
.text:00403300 arg_38          = dword ptr  3Ch
.text:00403300 arg_3C          = dword ptr  40h
.text:00403300 arg_40          = dword ptr  44h
.text:00403300 arg_44          = dword ptr  48h
.text:00403300 arg_5C          = dword ptr  60h
.text:00403300 arg_60          = dword ptr  64h
.text:00403300 Str             = dword ptr  68h
.text:00403300 arg_68          = dword ptr  6Ch
.text:00403300 arg_6C          = dword ptr  70h
.text:00403300 arg_70          = dword ptr  74h
.text:00403300 arg_74          = dword ptr  78h
.text:00403300
.text:00403300 ; FUNCTION CHUNK AT .text:0040337B SIZE 00000053 BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:004033E4 SIZE 0000014B BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403530 SIZE 0000023A BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403770 SIZE 00000099 BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403810 SIZE 000000DF BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:004038F0 SIZE 0000025B BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403B50 SIZE 000001AE BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403D00 SIZE 000000F9 BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403E00 SIZE 000000CE BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403ED0 SIZE 0000003A BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403F10 SIZE 0000000B BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403F20 SIZE 00000019 BYTES
.text:00403300 ; FUNCTION CHUNK AT .text:00403F40 SIZE 00000011 BYTES
.text:00403300
.text:00403300                 and     eax, 6F203A73h
.text:00403305                 jo      short loc_40337B
.text:00403307
.text:00403307 loc_403307:                             ; CODE XREF: sub_4032A0+6↑j
.text:00403307                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040330E                 and     ds:64202773h, ah
.text:00403314                 outsd
.text:00403315                 db      65h
.text:00403315                 jnb     short near ptr loc_403384+2
.text:00403318                 daa
.text:00403319                 jz      short loc_40333B
.text:0040331B                 popa
.text:0040331C                 insb
.text:0040331D                 insb
.text:0040331E
.text:0040331E loc_40331E:                             ; CODE XREF: sub_4032A0+13↑j
.text:0040331E                 outsd
.text:0040331F                 ja      short near ptr sub_403340+1
.text:00403321                 popa
.text:00403322                 outsb
.text:00403323                 and     [ecx+72h], ah
.text:00403326                 db      67h
.text:00403326                 jnz     near ptr loc_403395+1
.text:00403329                 outs    dx, byte ptr gs:[esi]
.text:0040332B                 jz      short loc_403337
.text:0040332D                 add     [eax-6F6F6F70h], dl
.text:00403333                 nop
.text:00403334                 nop
.text:00403335                 nop
.text:00403336                 nop
.text:00403337
.text:00403337 loc_403337:                             ; CODE XREF: sub_4032A0+30↑j
.text:00403337                                         ; sub_403300+2B↑j
.text:00403337                 nop
.text:00403338                 nop
.text:00403339
.text:00403339 loc_403339:                             ; CODE XREF: sub_4032A0+2E↑j
.text:00403339                 nop
.text:0040333A                 nop
.text:0040333B
.text:0040333B loc_40333B:                             ; CODE XREF: sub_4032A0+25↑j
.text:0040333B                                         ; sub_403300+19↑j
.text:0040333B                 nop
.text:0040333C                 nop
.text:0040333D                 nop
.text:0040333E                 nop
.text:0040333F                 nop
.text:0040333F sub_403300      endp ; sp-analysis failed
.text:0040333F
.text:00403340
.text:00403340 ; =============== S U B R O U T I N E =======================================
.text:00403340
.text:00403340
.text:00403340 sub_403340      proc near               ; CODE XREF: sub_403300+1F↑j
.text:00403340                                         ; DATA XREF: sub_403300:loc_403BFF↓o
.text:00403340
.text:00403340 arg_A4          = dword ptr  0A8h
.text:00403340 arg_B8          = dword ptr  0BCh
.text:00403340
.text:00403340 ; FUNCTION CHUNK AT .text:004033DA SIZE 0000000A BYTES
.text:00403340
.text:00403340                 and     eax, 6F203A73h
.text:00403345                 jo      short loc_4033BB
.text:00403347
.text:00403347 loc_403347:                             ; CODE XREF: sub_4032A0+39↑j
.text:00403347                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040334E                 and     ds:69202773h, ah
.text:00403354                 jnb     short near ptr loc_403373+3
.text:00403356                 popa
.text:00403357                 insd
.text:00403358                 bound   ebp, [ecx+67h]
.text:0040335B                 jnz     short near ptr loc_4033C8+4
.text:0040335D                 jnz     short near ptr loc_4033D1+1
.text:0040335F                 or      al, [eax]
.text:00403361
.text:00403361 loc_403361:                             ; DATA XREF: sub_403300+A0F↓o
.text:00403361                 and     eax, 69203A73h
.text:00403366                 insb
.text:00403367                 insb
.text:00403368                 db      65h, 67h
.text:00403368                 popa
.text:0040336B                 insb
.text:0040336C                 and     [edi+70h], ch
.text:0040336F                 jz      short loc_4033DA
.text:00403371                 outsd
.text:00403372                 outsb
.text:00403373
.text:00403373 loc_403373:                             ; CODE XREF: sub_403340+14↑j
.text:00403373                 and     ds:6325202Dh, ch
.text:00403379                 or      al, [eax]
.text:00403379 sub_403340      endp ; sp-analysis failed
.text:00403379
.text:0040337B ; START OF FUNCTION CHUNK FOR sub_403300
.text:0040337B
.text:0040337B loc_40337B:                             ; CODE XREF: sub_403300+5↑j
.text:0040337B                                         ; DATA XREF: sub_403300:loc_403D47↓o
.text:0040337B                 and     eax, 69203A73h
.text:00403380                 outsb
.text:00403381                 jbe     short loc_4033E4
.text:00403383                 insb
.text:00403384
.text:00403384 loc_403384:                             ; CODE XREF: sub_403300+15↑j
.text:00403384                 imul    esp, [eax+6Fh], 6F697470h
.text:0040338C                 outsb
.text:0040338D                 and     ds:6325202Dh, ch
.text:00403393                 or      al, [eax]
.text:00403395
.text:00403395 loc_403395:                             ; CODE XREF: sub_403300+26↑j
.text:00403395                                         ; DATA XREF: sub_403300:loc_403D6E↓o
.text:00403395                 and     eax, 6F203A73h
.text:0040339A                 jo      short near ptr loc_40340F+1
.text:0040339C                 imul    ebp, [edi+6Eh], 73256020h
.text:004033A3                 daa
.text:004033A4                 and     [ecx+73h], ch
.text:004033A7                 and     [ecx+6Dh], ah
.text:004033AA                 bound   ebp, [ecx+67h]
.text:004033AD                 jnz     short near ptr loc_40341C+2
.text:004033AF                 jnz     short near ptr loc_403423+1
.text:004033B1                 or      al, [eax]
.text:004033B3
.text:004033B3 loc_4033B3:                             ; DATA XREF: sub_403300:loc_403F20↓o
.text:004033B3                 push    eax
.text:004033B4                 dec     edi
.text:004033B5                 push    ebx
.text:004033B6                 dec     ecx
.text:004033B7                 pop     eax
.text:004033B8                 dec     esp
.text:004033B9                 pop     ecx
.text:004033BA                 pop     edi
.text:004033BB
.text:004033BB loc_4033BB:                             ; CODE XREF: sub_403340+5↑j
.text:004033BB                 inc     ebx
.text:004033BC                 dec     edi
.text:004033BD                 push    edx
.text:004033BE                 push    edx
.text:004033BF                 inc     ebp
.text:004033C0                 inc     ebx
.text:004033C1                 push    esp
.text:004033C2                 add     [ebp+0B6h], cl
.text:004033C8
.text:004033C8 loc_4033C8:                             ; CODE XREF: sub_403340+1B↑j
.text:004033C8                 add     [ebp+27BCh], cl
.text:004033C8 ; END OF FUNCTION CHUNK FOR sub_403300
.text:004033C8 ; ---------------------------------------------------------------------------
.text:004033CE                 dw 0
.text:004033D0 ; ---------------------------------------------------------------------------
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_403F60+5A↓p
.text:004033D0                                         ; .text:0040404A↓p ...
.text:004033D0                 push    ebp
.text:004033D1
.text:004033D1 loc_4033D1:                             ; CODE XREF: sub_403340+1D↑j
.text:004033D1                 mov     eax, 0FFFFFFFFh
.text:004033D6                 push    edi
.text:004033D7                 push    esi
.text:004033D8                 push    ebx
.text:004033D8 ; ---------------------------------------------------------------------------
.text:004033D9                 db 83h
.text:004033DA ; ---------------------------------------------------------------------------
.text:004033DA ; START OF FUNCTION CHUNK FOR sub_403340
.text:004033DA
.text:004033DA loc_4033DA:                             ; CODE XREF: sub_403340+2F↑j
.text:004033DA                 in      al, dx
.text:004033DB                 dec     esp
.text:004033DC                 mov     esi, [esp-40h+arg_A4]
.text:004033E0                 mov     ebp, [esp-40h+arg_B8]
.text:004033E0 ; END OF FUNCTION CHUNK FOR sub_403340
.text:004033E4 ; START OF FUNCTION CHUNK FOR sub_403300
.text:004033E4
.text:004033E4 loc_4033E4:                             ; CODE XREF: sub_403300+81↑j
.text:004033E4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004033E7                 mov     ebx, [ebp+4]
.text:004033EA                 setz    dl
.text:004033ED                 movzx   ecx, dl
.text:004033F0                 dec     ecx
.text:004033F1                 and     ecx, ebx
.text:004033F3                 mov     [esp+arg_44], ecx
.text:004033F7                 mov     ecx, [esp+arg_5C]
.text:004033FB                 test    ecx, ecx
.text:004033FD                 jle     loc_403527
.text:00403403                 mov     dword ptr [ebp+0Ch], 0
.text:0040340A                 mov     ebx, [ebp+0]
.text:0040340D                 test    ebx, ebx
.text:0040340F
.text:0040340F loc_40340F:                             ; CODE XREF: sub_403300+9A↑j
.text:0040340F                 jz      loc_403F40
.text:00403415                 mov     edi, [ebp+10h]
.text:00403418                 test    edi, edi
.text:0040341A                 jnz     short loc_403473
.text:0040341C
.text:0040341C loc_40341C:                             ; CODE XREF: sub_403300+AD↑j
.text:0040341C                 lea     esi, [esi+0]
.text:00403420
.text:00403420 loc_403420:                             ; CODE XREF: sub_403300+C4C↓j
.text:00403420                 mov     [ebp+24h], ebx
.text:00403423
.text:00403423 loc_403423:                             ; CODE XREF: sub_403300+AF↑j
.text:00403423                 mov     esi, [esp+Str]
.text:00403427                 mov     [ebp+20h], ebx
.text:0040342A                 mov     ecx, [esp+arg_74]
.text:0040342E                 xor     ebx, ebx
.text:00403430                 mov     dword ptr [ebp+14h], 0
.text:00403437                 test    ecx, ecx
.text:00403439                 jz      loc_403F20
.text:0040343F
.text:0040343F loc_40343F:                             ; CODE XREF: sub_403300+C34↓j
.text:0040343F                 mov     ebx, 1
.text:00403444
.text:00403444 loc_403444:                             ; CODE XREF: sub_403300+C2E↓j
.text:00403444                 mov     [ebp+1Ch], ebx
.text:00403447                 mov     ecx, [esp+Str]
.text:0040344B                 movzx   eax, byte ptr [ecx]
.text:0040344E                 cmp     al, 2Dh ; '-'
.text:00403450                 jz      loc_403F10
.text:00403456                 cmp     al, 2Bh ; '+'
.text:00403458                 jz      loc_403EF9
.text:0040345E                 xor     edx, edx
.text:00403460                 test    ebx, ebx
.text:00403462                 setz    dl
.text:00403465                 mov     [ebp+18h], edx
.text:00403468
.text:00403468 loc_403468:                             ; CODE XREF: sub_403300+C05↓j
.text:00403468                 mov     [esp+Str], esi
.text:0040346C                 mov     dword ptr [ebp+10h], 1
.text:00403473
.text:00403473 loc_403473:                             ; CODE XREF: sub_403300+11A↑j
.text:00403473                 mov     eax, [ebp+14h]
.text:00403476                 test    eax, eax
.text:00403478                 jz      short loc_403483
.text:0040347A                 cmp     byte ptr [eax], 0
.text:0040347D                 jnz     loc_403560
.text:00403483
.text:00403483 loc_403483:                             ; CODE XREF: sub_403300+178↑j
.text:00403483                 mov     ebx, [ebp+0]
.text:00403486                 cmp     [ebp+24h], ebx
.text:00403489                 jle     short loc_40348E
.text:0040348B                 mov     [ebp+24h], ebx
.text:0040348E
.text:0040348E loc_40348E:                             ; CODE XREF: sub_403300+189↑j
.text:0040348E                 cmp     [ebp+20h], ebx
.text:00403491                 jle     short loc_403496
.text:00403493                 mov     [ebp+20h], ebx
.text:00403496
.text:00403496 loc_403496:                             ; CODE XREF: sub_403300+191↑j
.text:00403496                 cmp     dword ptr [ebp+18h], 1
.text:0040349A                 jz      loc_403E70
.text:004034A0
.text:004034A0 loc_4034A0:                             ; CODE XREF: sub_403300+BE3↓j
.text:004034A0                 cmp     ebx, [esp+arg_5C]
.text:004034A4                 jz      loc_403E54
.text:004034AA                 cld
.text:004034AB                 mov     ecx, [esp+arg_60]
.text:004034AF                 mov     edx, 3
.text:004034B4                 mov     edi, offset sub_403180
.text:004034B9                 mov     esi, [ecx+ebx*4]
.text:004034BC                 mov     ecx, edx
.text:004034BE                 repe cmpsb
.text:004034C0                 jnz     short loc_4034FC
.text:004034C2                 mov     edx, [ebp+24h]
.text:004034C5                 lea     eax, [ebx+1]
.text:004034C8                 cmp     [ebp+20h], edx
.text:004034CB                 mov     [ebp+0], eax
.text:004034CE                 jz      loc_403E68
.text:004034D4                 cmp     edx, eax
.text:004034D6                 jz      short loc_4034F0
.text:004034D8                 mov     [esp+Str2], ebp
.text:004034DC                 mov     ebx, [esp+arg_60]
.text:004034E0                 mov     [esp+0], ebx
.text:004034E3                 call    sub_404080
.text:004034E8                 nop
.text:004034E9                 lea     esi, [esi+0]
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_403300+1D6↑j
.text:004034F0                                         ; sub_403300+B6B↓j
.text:004034F0                 mov     eax, [esp+arg_5C]
.text:004034F4                 mov     ebx, eax
.text:004034F6                 mov     [ebp+24h], eax
.text:004034F9                 mov     [ebp+0], eax
.text:004034FC
.text:004034FC loc_4034FC:                             ; CODE XREF: sub_403300+1C0↑j
.text:004034FC                 cmp     ebx, [esp+arg_5C]
.text:00403500                 jz      loc_403E54
.text:00403506                 mov     esi, [esp+arg_60]
.text:0040350A                 mov     eax, [esi+ebx*4]
.text:0040350D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403510                 jz      short loc_403537
.text:00403512
.text:00403512 loc_403512:                             ; CODE XREF: sub_403300+23D↓j
.text:00403512                 mov     edx, [ebp+18h]
.text:00403515                 test    edx, edx
.text:00403517                 jz      short loc_403530
.text:00403519                 mov     [ebp+0Ch], eax
.text:0040351C                 lea     edi, [ebx+1]
.text:0040351F                 mov     eax, 1
.text:00403524                 mov     [ebp+0], edi
.text:00403527
.text:00403527 loc_403527:                             ; CODE XREF: sub_403300+FD↑j
.text:00403527                                         ; sub_403300+235↓j ...
.text:00403527                 add     esp, 4Ch
.text:0040352A                 pop     ebx
.text:0040352B                 pop     esi
.text:0040352C                 pop     edi
.text:0040352D                 pop     ebp
.text:0040352E                 retn
.text:0040352E ; END OF FUNCTION CHUNK FOR sub_403300
.text:0040352E ; ---------------------------------------------------------------------------
.text:0040352F                 align 10h
.text:00403530 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403530
.text:00403530 loc_403530:                             ; CODE XREF: sub_403300+217↑j
.text:00403530                                         ; sub_403300+B5A↓j ...
.text:00403530                 mov     eax, 0FFFFFFFFh
.text:00403535                 jmp     short loc_403527
.text:00403537 ; ---------------------------------------------------------------------------
.text:00403537
.text:00403537 loc_403537:                             ; CODE XREF: sub_403300+210↑j
.text:00403537                 movzx   edx, byte ptr [eax+1]
.text:0040353B                 test    dl, dl
.text:0040353D                 jz      short loc_403512
.text:0040353F                 mov     ebx, [esp+arg_68]
.text:00403543                 xor     ecx, ecx
.text:00403545                 test    ebx, ebx
.text:00403547                 jz      short loc_403552
.text:00403549                 cmp     dl, 2Dh ; '-'
.text:0040354C                 jz      loc_403E4A
.text:00403552
.text:00403552 loc_403552:                             ; CODE XREF: sub_403300+247↑j
.text:00403552                                         ; sub_403300+B4F↓j
.text:00403552                 lea     esi, [ecx+eax+1]
.text:00403556                 mov     [ebp+14h], esi
.text:00403559                 lea     esi, [esi+0]
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: sub_403300+17D↑j
.text:00403560                 mov     ecx, [esp+arg_68]
.text:00403564                 test    ecx, ecx
.text:00403566                 jz      loc_4038F0
.text:0040356C                 mov     edx, [ebp+0]
.text:0040356F                 mov     edi, [esp+arg_60]
.text:00403573                 mov     eax, [edi+edx*4]
.text:00403576                 movzx   edx, byte ptr [eax+1]
.text:0040357A                 cmp     dl, 2Dh ; '-'
.text:0040357D                 jz      short loc_403595
.text:0040357F                 mov     ebx, [esp+arg_70]
.text:00403583                 test    ebx, ebx
.text:00403585                 jz      loc_4038F0
.text:0040358B                 cmp     byte ptr [eax+2], 0
.text:0040358F                 jz      loc_403E2A
.text:00403595
.text:00403595 loc_403595:                             ; CODE XREF: sub_403300+27D↑j
.text:00403595                                         ; sub_403300+B45↓j
.text:00403595                 mov     [esp+arg_40], 0
.text:0040359D                 mov     ecx, [ebp+14h]
.text:004035A0                 mov     [esp+arg_3C], 0
.text:004035A8                 mov     [esp+arg_38], 0
.text:004035B0                 mov     edi, ecx
.text:004035B2                 mov     [esp+arg_34], 0FFFFFFFFh
.text:004035BA                 movzx   eax, byte ptr [ecx]
.text:004035BD                 test    al, al
.text:004035BF                 jz      short loc_4035DC
.text:004035C1                 cmp     al, 3Dh ; '='
.text:004035C3                 jz      short loc_4035DC
.text:004035C5                 lea     esi, [esi+0]
.text:004035C9                 lea     edi, [edi+0]
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_403300+2DA↓j
.text:004035D0                 inc     edi
.text:004035D1                 movzx   eax, byte ptr [edi]
.text:004035D4                 test    al, al
.text:004035D6                 jz      short loc_4035DC
.text:004035D8                 cmp     al, 3Dh ; '='
.text:004035DA                 jnz     short loc_4035D0
.text:004035DC
.text:004035DC loc_4035DC:                             ; CODE XREF: sub_403300+2BF↑j
.text:004035DC                                         ; sub_403300+2C3↑j ...
.text:004035DC                 mov     [esp+arg_30], 0
.text:004035E4                 mov     esi, [esp+arg_68]
.text:004035E8                 mov     ebx, [esi]
.text:004035EA                 test    ebx, ebx
.text:004035EC                 mov     edx, ebx
.text:004035EE                 jz      loc_403810
.text:004035F4                 lea     esi, [esi+0]
.text:004035FA                 lea     edi, [edi+0]
.text:00403600
.text:00403600 loc_403600:                             ; CODE XREF: sub_403300+32E↓j
.text:00403600                 mov     [esp+Str2], ecx ; Str2
.text:00403604                 mov     ebx, edi
.text:00403606                 sub     ebx, ecx
.text:00403608                 mov     [esp+MaxCount], ebx ; MaxCount
.text:0040360C                 mov     [esp+0], edx    ; Str1
.text:0040360F                 call    strncmp
.text:00403614                 test    eax, eax
.text:00403616                 jz      loc_403DA6
.text:0040361C
.text:0040361C loc_40361C:                             ; CODE XREF: sub_403300+ADF↓j
.text:0040361C                                         ; sub_403300+AF4↓j ...
.text:0040361C                 inc     [esp+arg_30]
.text:00403620                 add     esi, 10h
.text:00403623                 mov     ecx, [esi]
.text:00403625                 test    ecx, ecx
.text:00403627                 mov     edx, ecx
.text:00403629                 jz      short loc_403630
.text:0040362B                 mov     ecx, [ebp+14h]
.text:0040362E                 jmp     short loc_403600
.text:00403630 ; ---------------------------------------------------------------------------
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: sub_403300+329↑j
.text:00403630                                         ; sub_403300+B25↓j
.text:00403630                 mov     esi, [esp+arg_38]
.text:00403634                 test    esi, esi
.text:00403636                 jz      short loc_403644
.text:00403638                 mov     edx, [esp+arg_3C]
.text:0040363C                 test    edx, edx
.text:0040363E                 jz      loc_403D50
.text:00403644
.text:00403644 loc_403644:                             ; CODE XREF: sub_403300+336↑j
.text:00403644                 mov     eax, [esp+arg_40]
.text:00403648                 test    eax, eax
.text:0040364A                 jz      loc_403810
.text:00403650                 mov     ecx, [ebp+0]
.text:00403653                 lea     eax, [ecx+1]
.text:00403656                 mov     [ebp+0], eax
.text:00403659                 cmp     byte ptr [edi], 0
.text:0040365C                 jz      loc_403770
.text:00403662                 mov     ecx, [esp+arg_40]
.text:00403666                 mov     esi, [ecx+4]
.text:00403669                 test    esi, esi
.text:0040366B                 jz      short loc_4036B6
.text:0040366D                 lea     ebx, [edi+1]
.text:00403670                 mov     [ebp+0Ch], ebx
.text:00403673
.text:00403673 loc_403673:                             ; CODE XREF: sub_403300+478↓j
.text:00403673                                         ; sub_403300+494↓j
.text:00403673                 mov     ebx, [ebp+14h]
.text:00403676                 mov     [esp+0], ebx    ; Str
.text:00403679                 call    strlen
.text:0040367E                 add     [ebp+14h], eax
.text:00403681                 mov     esi, [esp+arg_6C]
.text:00403685                 test    esi, esi
.text:00403687                 jz      short loc_403693
.text:00403689                 mov     ebp, [esp+arg_34]
.text:0040368D                 mov     ecx, [esp+arg_6C]
.text:00403691                 mov     [ecx], ebp
.text:00403693
.text:00403693 loc_403693:                             ; CODE XREF: sub_403300+387↑j
.text:00403693                 mov     eax, [esp+arg_40]
.text:00403697                 mov     ecx, [eax+8]
.text:0040369A                 test    ecx, ecx
.text:0040369C                 jnz     short loc_4036AA
.text:0040369E                 mov     ecx, [esp+arg_40]
.text:004036A2
.text:004036A2 loc_4036A2:                             ; CODE XREF: sub_403300+7F3↓j
.text:004036A2                 mov     eax, [ecx+0Ch]
.text:004036A5                 jmp     loc_403527
.text:004036AA ; ---------------------------------------------------------------------------
.text:004036AA
.text:004036AA loc_4036AA:                             ; CODE XREF: sub_403300+39C↑j
.text:004036AA                                         ; sub_403300+7E9↓j
.text:004036AA                 mov     esi, [eax+0Ch]
.text:004036AD                 xor     eax, eax
.text:004036AF                 mov     [ecx], esi
.text:004036B1                 jmp     loc_403527
.text:004036B6 ; ---------------------------------------------------------------------------
.text:004036B6
.text:004036B6 loc_4036B6:                             ; CODE XREF: sub_403300+36B↑j
.text:004036B6                 mov     edi, [esp+arg_44]
.text:004036BA                 test    edi, edi
.text:004036BC                 jz      short loc_403710
.text:004036BE                 mov     esi, [esp+arg_60]
.text:004036C2                 mov     edx, [esi+eax*4-4]
.text:004036C6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004036CA                 jz      short loc_403732
.text:004036CC                 mov     dword ptr [esp+0], offset sub_4031A0
.text:004036D3                 call    ds:libintl_gettext
.text:004036D9                 mov     edx, [esp+arg_40]
.text:004036DD                 mov     edi, [edx]
.text:004036DF                 mov     [esp+arg_C], edi
.text:004036E3                 mov     ebx, [ebp+0]
.text:004036E6                 mov     edi, [esp+arg_60]
.text:004036EA                 mov     ecx, [edi+ebx*4-4]
.text:004036EE                 movsx   esi, byte ptr [ecx]
.text:004036F1                 mov     ecx, ds:_iob
.text:004036F7                 add     ecx, 40h ; '@'
.text:004036FA                 mov     [esp+arg_8], esi
.text:004036FE                 mov     ebx, [edi]
.text:00403700                 mov     [esp+Str2], eax ; Format
.text:00403704                 mov     [esp+0], ecx    ; Stream
.text:00403707                 mov     [esp+MaxCount], ebx
.text:0040370B                 call    fprintf
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: sub_403300+3BC↑j
.text:00403710                                         ; sub_403300+468↓j
.text:00403710                 mov     ecx, [ebp+14h]
.text:00403713                 mov     [esp+0], ecx    ; Str
.text:00403716                 call    strlen
.text:0040371B                 add     [ebp+14h], eax
.text:0040371E                 mov     eax, [esp+arg_40]
.text:00403722                 mov     esi, [eax+0Ch]
.text:00403725                 mov     [ebp+8], esi
.text:00403728
.text:00403728 loc_403728:                             ; CODE XREF: sub_403300+5B5↓j
.text:00403728                                         ; sub_403300+80E↓j ...
.text:00403728                 mov     eax, 3Fh ; '?'
.text:0040372D                 jmp     loc_403527
.text:00403732 ; ---------------------------------------------------------------------------
.text:00403732
.text:00403732 loc_403732:                             ; CODE XREF: sub_403300+3CA↑j
.text:00403732                 mov     dword ptr [esp+0], offset sub_4031E0
.text:00403739                 call    ds:libintl_gettext
.text:0040373F                 mov     edx, [esp+arg_40]
.text:00403743                 mov     edi, [esp+arg_60]
.text:00403747                 mov     ecx, ds:_iob
.text:0040374D                 mov     esi, [edx]
.text:0040374F                 add     ecx, 40h ; '@'
.text:00403752                 mov     [esp+arg_8], esi
.text:00403756                 mov     ebx, [edi]
.text:00403758                 mov     [esp+Str2], eax ; Format
.text:0040375C                 mov     [esp+0], ecx    ; Stream
.text:0040375F                 mov     [esp+MaxCount], ebx
.text:00403763                 call    fprintf
.text:00403768                 jmp     short loc_403710
.text:00403768 ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403768 ; ---------------------------------------------------------------------------
.text:0040376A                 align 10h
.text:00403770 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_403300+35C↑j
.text:00403770                 mov     ebx, [esp+arg_40]
.text:00403774                 cmp     dword ptr [ebx+4], 1
.text:00403778                 jnz     loc_403673
.text:0040377E                 cmp     eax, [esp+arg_5C]
.text:00403782                 jge     short loc_403799
.text:00403784                 mov     ebx, [esp+arg_60]
.text:00403788                 lea     edi, [ecx+2]
.text:0040378B                 mov     [ebp+0], edi
.text:0040378E                 mov     esi, [ebx+eax*4]
.text:00403791                 mov     [ebp+0Ch], esi
.text:00403794                 jmp     loc_403673
.text:00403799 ; ---------------------------------------------------------------------------
.text:00403799
.text:00403799 loc_403799:                             ; CODE XREF: sub_403300+482↑j
.text:00403799                 mov     edx, [esp+arg_44]
.text:0040379D                 test    edx, edx
.text:0040379F                 jnz     short loc_4037D0
.text:004037A1
.text:004037A1 loc_4037A1:                             ; CODE XREF: sub_403300+507↓j
.text:004037A1                 mov     edx, [ebp+14h]
.text:004037A4                 mov     [esp+0], edx    ; Str
.text:004037A7                 call    strlen
.text:004037AC                 add     [ebp+14h], eax
.text:004037AF                 mov     eax, [esp+arg_40]
.text:004037B3                 mov     edi, [eax+0Ch]
.text:004037B6                 mov     [ebp+8], edi
.text:004037B9
.text:004037B9 loc_4037B9:                             ; CODE XREF: sub_403300+892↓j
.text:004037B9                 mov     ebp, [esp+Str]
.text:004037BD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004037C1                 setnz   bl
.text:004037C4                 movzx   esi, bl
.text:004037C7                 lea     eax, [esi+esi*4+3Ah]
.text:004037CB                 jmp     loc_403527
.text:004037D0 ; ---------------------------------------------------------------------------
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_403300+49F↑j
.text:004037D0                 mov     dword ptr [esp+0], offset sub_403220
.text:004037D7                 call    ds:libintl_gettext
.text:004037DD                 mov     ecx, [ebp+0]
.text:004037E0                 mov     esi, [esp+arg_60]
.text:004037E4                 mov     ebx, [esi+ecx*4-4]
.text:004037E8                 mov     ecx, ds:_iob
.text:004037EE                 mov     [esp+arg_8], ebx
.text:004037F2                 mov     edi, [esi]
.text:004037F4                 add     ecx, 40h ; '@'
.text:004037F7                 mov     [esp+Str2], eax ; Format
.text:004037FB                 mov     [esp+0], ecx    ; Stream
.text:004037FE                 mov     [esp+MaxCount], edi
.text:00403802                 call    fprintf
.text:00403807                 jmp     short loc_4037A1
.text:00403807 ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403807 ; ---------------------------------------------------------------------------
.text:00403809                 align 10h
.text:00403810 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403810
.text:00403810 loc_403810:                             ; CODE XREF: sub_403300+2EE↑j
.text:00403810                                         ; sub_403300+34A↑j
.text:00403810                 mov     eax, [esp+arg_70]
.text:00403814                 test    eax, eax
.text:00403816                 jz      short loc_403846
.text:00403818                 mov     ebx, [ebp+0]
.text:0040381B                 mov     esi, [esp+arg_60]
.text:0040381F                 mov     edi, [esi+ebx*4]
.text:00403822                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403826                 jz      short loc_403849
.text:00403828                 mov     ecx, [ebp+14h]
.text:0040382B                 mov     edx, [esp+Str]
.text:0040382F                 movsx   ebx, byte ptr [ecx]
.text:00403832                 mov     [esp+0], edx    ; Str
.text:00403835                 mov     [esp+Str2], ebx ; Val
.text:00403839                 call    strchr
.text:0040383E                 test    eax, eax
.text:00403840                 jnz     loc_4038F0
.text:00403846
.text:00403846 loc_403846:                             ; CODE XREF: sub_403300+516↑j
.text:00403846                 mov     ebx, [ebp+0]
.text:00403849
.text:00403849 loc_403849:                             ; CODE XREF: sub_403300+526↑j
.text:00403849                 mov     eax, [esp+arg_44]
.text:0040384D                 test    eax, eax
.text:0040384F                 jz      short loc_4038A1
.text:00403851                 mov     esi, [esp+arg_60]
.text:00403855                 mov     edi, [esi+ebx*4]
.text:00403858                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040385C                 jz      short loc_4038BA
.text:0040385E                 mov     dword ptr [esp+0], offset sub_403260
.text:00403865                 call    ds:libintl_gettext
.text:0040386B                 mov     edi, [ebp+14h]
.text:0040386E                 mov     [esp+arg_C], edi
.text:00403872                 mov     ebx, [ebp+0]
.text:00403875                 mov     edi, [esp+arg_60]
.text:00403879                 mov     esi, [edi+ebx*4]
.text:0040387C                 movsx   ecx, byte ptr [esi]
.text:0040387F                 mov     esi, ds:_iob
.text:00403885                 add     esi, 40h ; '@'
.text:00403888                 mov     [esp+arg_8], ecx
.text:0040388C                 mov     ebx, [edi]
.text:0040388E                 mov     [esp+Str2], eax ; Format
.text:00403892                 mov     [esp+0], esi    ; Stream
.text:00403895                 mov     [esp+MaxCount], ebx
.text:00403899                 call    fprintf
.text:0040389E
.text:0040389E loc_40389E:                             ; CODE XREF: sub_403300+5ED↓j
.text:0040389E                 mov     ebx, [ebp+0]
.text:004038A1
.text:004038A1 loc_4038A1:                             ; CODE XREF: sub_403300+54F↑j
.text:004038A1                 mov     dword ptr [ebp+14h], offset loc_403280
.text:004038A8                 lea     edx, [ebx+1]
.text:004038AB                 mov     [ebp+0], edx
.text:004038AE
.text:004038AE loc_4038AE:                             ; CODE XREF: sub_403300+A69↓j
.text:004038AE                 mov     dword ptr [ebp+8], 0
.text:004038B5                 jmp     loc_403728
.text:004038BA ; ---------------------------------------------------------------------------
.text:004038BA
.text:004038BA loc_4038BA:                             ; CODE XREF: sub_403300+55C↑j
.text:004038BA                 mov     dword ptr [esp+0], offset sub_4032A0
.text:004038C1                 call    ds:libintl_gettext
.text:004038C7                 mov     ecx, [ebp+14h]
.text:004038CA                 mov     edi, [esp+arg_60]
.text:004038CE                 mov     edx, ds:_iob
.text:004038D4                 mov     [esp+arg_8], ecx
.text:004038D8                 mov     ebx, [edi]
.text:004038DA                 add     edx, 40h ; '@'
.text:004038DD                 mov     [esp+Str2], eax ; Format
.text:004038E1                 mov     [esp+MaxCount], ebx
.text:004038E5                 mov     [esp+0], edx    ; Stream
.text:004038E8                 call    fprintf
.text:004038ED                 jmp     short loc_40389E
.text:004038ED ; END OF FUNCTION CHUNK FOR sub_403300
.text:004038ED ; ---------------------------------------------------------------------------
.text:004038EF                 align 10h
.text:004038F0 ; START OF FUNCTION CHUNK FOR sub_403300
.text:004038F0
.text:004038F0 loc_4038F0:                             ; CODE XREF: sub_403300+266↑j
.text:004038F0                                         ; sub_403300+285↑j ...
.text:004038F0                 mov     esi, [ebp+14h]
.text:004038F3                 movzx   ebx, byte ptr [esi]
.text:004038F6                 inc     esi
.text:004038F7                 mov     [ebp+14h], esi
.text:004038FA                 mov     ecx, [esp+Str]
.text:004038FE                 movsx   esi, bl
.text:00403901                 mov     [esp+Str2], esi ; Val
.text:00403905                 mov     edi, esi
.text:00403907                 mov     [esp+0], ecx    ; Str
.text:0040390A                 call    strchr
.text:0040390F                 mov     ecx, [ebp+14h]
.text:00403912                 cmp     byte ptr [ecx], 0
.text:00403915                 jnz     short loc_40391A
.text:00403917                 inc     dword ptr [ebp+0]
.text:0040391A
.text:0040391A loc_40391A:                             ; CODE XREF: sub_403300+615↑j
.text:0040391A                 test    eax, eax
.text:0040391C                 jz      loc_403D00
.text:00403922                 cmp     bl, 3Ah ; ':'
.text:00403925                 jz      loc_403D00
.text:0040392B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040392E                 jz      loc_4039E6
.text:00403934                 movzx   edx, byte ptr [eax+1]
.text:00403938
.text:00403938 loc_403938:                             ; CODE XREF: sub_403300+6ED↓j
.text:00403938                 cmp     dl, 3Ah ; ':'
.text:0040393B                 jz      short loc_403944
.text:0040393D
.text:0040393D loc_40393D:                             ; CODE XREF: sub_403300+660↓j
.text:0040393D                 mov     eax, esi
.text:0040393F                 jmp     loc_403527
.text:00403944 ; ---------------------------------------------------------------------------
.text:00403944
.text:00403944 loc_403944:                             ; CODE XREF: sub_403300+63B↑j
.text:00403944                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403948                 jz      loc_4039D1
.text:0040394E                 cmp     byte ptr [ecx], 0
.text:00403951                 jz      short loc_403962
.text:00403953
.text:00403953 loc_403953:                             ; CODE XREF: sub_403300+6D4↓j
.text:00403953                 inc     dword ptr [ebp+0]
.text:00403956                 mov     [ebp+0Ch], ecx
.text:00403959
.text:00403959 loc_403959:                             ; CODE XREF: sub_403300+67B↓j
.text:00403959                                         ; sub_403300+696↓j ...
.text:00403959                 mov     dword ptr [ebp+14h], 0
.text:00403960                 jmp     short loc_40393D
.text:00403962 ; ---------------------------------------------------------------------------
.text:00403962
.text:00403962 loc_403962:                             ; CODE XREF: sub_403300+651↑j
.text:00403962                 mov     ecx, [ebp+0]
.text:00403965                 cmp     ecx, [esp+arg_5C]
.text:00403969                 jz      short loc_40397D
.text:0040396B                 mov     eax, [esp+arg_60]
.text:0040396F                 lea     edx, [ecx+1]
.text:00403972                 mov     [ebp+0], edx
.text:00403975                 mov     ebx, [eax+ecx*4]
.text:00403978                 mov     [ebp+0Ch], ebx
.text:0040397B                 jmp     short loc_403959
.text:0040397D ; ---------------------------------------------------------------------------
.text:0040397D
.text:0040397D loc_40397D:                             ; CODE XREF: sub_403300+669↑j
.text:0040397D                 mov     ecx, [esp+arg_44]
.text:00403981                 test    ecx, ecx
.text:00403983                 jnz     short loc_40399F
.text:00403985
.text:00403985 loc_403985:                             ; CODE XREF: sub_403300+6CF↓j
.text:00403985                 mov     [ebp+8], edi
.text:00403988                 mov     edi, [esp+Str]
.text:0040398C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040398F                 jz      short loc_403998
.text:00403991                 mov     esi, 3Fh ; '?'
.text:00403996                 jmp     short loc_403959
.text:00403998 ; ---------------------------------------------------------------------------
.text:00403998
.text:00403998 loc_403998:                             ; CODE XREF: sub_403300+68F↑j
.text:00403998                 mov     esi, 3Ah ; ':'
.text:0040399D                 jmp     short loc_403959
.text:0040399F ; ---------------------------------------------------------------------------
.text:0040399F
.text:0040399F loc_40399F:                             ; CODE XREF: sub_403300+683↑j
.text:0040399F                 mov     dword ptr [esp+0], 4032C0h
.text:004039A6                 call    ds:libintl_gettext
.text:004039AC                 mov     [esp+arg_8], edi
.text:004039B0                 mov     ebx, [esp+arg_60]
.text:004039B4                 mov     edx, ds:_iob
.text:004039BA                 mov     esi, [ebx]
.text:004039BC                 add     edx, 40h ; '@'
.text:004039BF                 mov     [esp+Str2], eax ; Format
.text:004039C3                 mov     [esp+MaxCount], esi
.text:004039C7                 mov     [esp+0], edx    ; Stream
.text:004039CA                 call    fprintf
.text:004039CF                 jmp     short loc_403985
.text:004039D1 ; ---------------------------------------------------------------------------
.text:004039D1
.text:004039D1 loc_4039D1:                             ; CODE XREF: sub_403300+648↑j
.text:004039D1                 cmp     byte ptr [ecx], 0
.text:004039D4                 jnz     loc_403953
.text:004039DA                 mov     dword ptr [ebp+0Ch], 0
.text:004039E1                 jmp     loc_403959
.text:004039E6 ; ---------------------------------------------------------------------------
.text:004039E6
.text:004039E6 loc_4039E6:                             ; CODE XREF: sub_403300+62E↑j
.text:004039E6                 movzx   edx, byte ptr [eax+1]
.text:004039EA                 cmp     dl, 3Bh ; ';'
.text:004039ED                 jnz     loc_403938
.text:004039F3                 mov     [esp+arg_2C], 0
.text:004039FB                 mov     [esp+arg_28], 0
.text:00403A03                 mov     [esp+arg_24], 0
.text:00403A0B                 mov     [esp+arg_20], 0
.text:00403A13                 cmp     byte ptr [ecx], 0
.text:00403A16                 jz      loc_403C8B
.text:00403A1C                 inc     dword ptr [ebp+0]
.text:00403A1F                 mov     [ebp+0Ch], ecx
.text:00403A22
.text:00403A22 loc_403A22:                             ; CODE XREF: sub_403300+9A4↓j
.text:00403A22                 mov     edi, [ebp+0Ch]
.text:00403A25                 mov     [ebp+14h], edi
.text:00403A28                 movzx   eax, byte ptr [edi]
.text:00403A2B                 test    al, al
.text:00403A2D                 jz      short loc_403A3F
.text:00403A2F                 cmp     al, 3Dh ; '='
.text:00403A31                 jz      short loc_403A3F
.text:00403A33
.text:00403A33 loc_403A33:                             ; CODE XREF: sub_403300+73D↓j
.text:00403A33                 inc     edi
.text:00403A34                 movzx   eax, byte ptr [edi]
.text:00403A37                 test    al, al
.text:00403A39                 jz      short loc_403A3F
.text:00403A3B                 cmp     al, 3Dh ; '='
.text:00403A3D                 jnz     short loc_403A33
.text:00403A3F
.text:00403A3F loc_403A3F:                             ; CODE XREF: sub_403300+72D↑j
.text:00403A3F                                         ; sub_403300+731↑j ...
.text:00403A3F                 mov     [esp+arg_1C], 0
.text:00403A47                 mov     esi, [esp+arg_68]
.text:00403A4B                 mov     eax, [esi]
.text:00403A4D                 test    eax, eax
.text:00403A4F                 jz      loc_403BD0
.text:00403A55                 mov     ecx, eax
.text:00403A57
.text:00403A57 loc_403A57:                             ; CODE XREF: sub_403300+783↓j
.text:00403A57                 mov     ebx, [ebp+14h]
.text:00403A5A                 mov     eax, edi
.text:00403A5C                 mov     [esp+0], ecx    ; Str1
.text:00403A5F                 sub     eax, ebx
.text:00403A61                 mov     [esp+MaxCount], eax ; MaxCount
.text:00403A65                 mov     [esp+Str2], ebx ; Str2
.text:00403A69                 call    strncmp
.text:00403A6E                 test    eax, eax
.text:00403A70                 jz      loc_403C37
.text:00403A76
.text:00403A76 loc_403A76:                             ; CODE XREF: sub_403300+95C↓j
.text:00403A76                                         ; sub_403300+96D↓j
.text:00403A76                 inc     [esp+arg_1C]
.text:00403A7A                 add     esi, 10h
.text:00403A7D                 mov     edx, [esi]
.text:00403A7F                 test    edx, edx
.text:00403A81                 mov     ecx, edx
.text:00403A83                 jnz     short loc_403A57
.text:00403A85
.text:00403A85 loc_403A85:                             ; CODE XREF: sub_403300+986↓j
.text:00403A85                 mov     esi, [esp+arg_24]
.text:00403A89                 test    esi, esi
.text:00403A8B                 jz      short loc_403A99
.text:00403A8D                 mov     ebx, [esp+arg_28]
.text:00403A91                 test    ebx, ebx
.text:00403A93                 jz      loc_403BE1
.text:00403A99
.text:00403A99 loc_403A99:                             ; CODE XREF: sub_403300+78B↑j
.text:00403A99                 mov     esi, [esp+arg_2C]
.text:00403A9D                 test    esi, esi
.text:00403A9F                 jz      loc_403BD0
.text:00403AA5                 cmp     byte ptr [edi], 0
.text:00403AA8                 jz      loc_403B50
.text:00403AAE                 mov     ecx, [esp+arg_2C]
.text:00403AB2                 mov     ebx, [ecx+4]
.text:00403AB5                 test    ebx, ebx
.text:00403AB7                 jz      short loc_403AF8
.text:00403AB9                 lea     edx, [edi+1]
.text:00403ABC                 mov     [ebp+0Ch], edx
.text:00403ABF
.text:00403ABF loc_403ABF:                             ; CODE XREF: sub_403300+858↓j
.text:00403ABF                                         ; sub_403300+877↓j
.text:00403ABF                 mov     edi, [ebp+14h]
.text:00403AC2                 mov     [esp+0], edi    ; Str
.text:00403AC5                 call    strlen
.text:00403ACA                 add     [ebp+14h], eax
.text:00403ACD                 mov     eax, [esp+arg_6C]
.text:00403AD1                 test    eax, eax
.text:00403AD3                 jz      short loc_403AE0
.text:00403AD5                 mov     edx, [esp+arg_20]
.text:00403AD9                 mov     ebp, [esp+arg_6C]
.text:00403ADD                 mov     [ebp+0], edx
.text:00403AE0
.text:00403AE0 loc_403AE0:                             ; CODE XREF: sub_403300+7D3↑j
.text:00403AE0                 mov     eax, [esp+arg_2C]
.text:00403AE4                 mov     ecx, [eax+8]
.text:00403AE7                 test    ecx, ecx
.text:00403AE9                 jnz     loc_4036AA
.text:00403AEF                 mov     ecx, [esp+arg_2C]
.text:00403AF3                 jmp     loc_4036A2
.text:00403AF8 ; ---------------------------------------------------------------------------
.text:00403AF8
.text:00403AF8 loc_403AF8:                             ; CODE XREF: sub_403300+7B7↑j
.text:00403AF8                 mov     eax, [esp+arg_44]
.text:00403AFC                 test    eax, eax
.text:00403AFE                 jnz     short loc_403B13
.text:00403B00
.text:00403B00 loc_403B00:                             ; CODE XREF: sub_403300+849↓j
.text:00403B00                 mov     ecx, [ebp+14h]
.text:00403B03                 mov     [esp+0], ecx    ; Str
.text:00403B06                 call    strlen
.text:00403B0B                 add     [ebp+14h], eax
.text:00403B0E                 jmp     loc_403728
.text:00403B13 ; ---------------------------------------------------------------------------
.text:00403B13
.text:00403B13 loc_403B13:                             ; CODE XREF: sub_403300+7FE↑j
.text:00403B13                 mov     dword ptr [esp+0], offset sub_403300
.text:00403B1A                 call    ds:libintl_gettext
.text:00403B20                 mov     edx, [esp+arg_2C]
.text:00403B24                 mov     ebx, [esp+arg_60]
.text:00403B28                 mov     edi, [edx]
.text:00403B2A                 mov     [esp+arg_8], edi
.text:00403B2E                 mov     edi, ds:_iob
.text:00403B34                 mov     esi, [ebx]
.text:00403B36                 mov     [esp+Str2], eax ; Format
.text:00403B3A                 add     edi, 40h ; '@'
.text:00403B3D                 mov     [esp+MaxCount], esi
.text:00403B41                 mov     [esp+0], edi    ; Stream
.text:00403B44                 call    fprintf
.text:00403B49                 jmp     short loc_403B00
.text:00403B49 ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403B49 ; ---------------------------------------------------------------------------
.text:00403B4B                 align 10h
.text:00403B50 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403B50
.text:00403B50 loc_403B50:                             ; CODE XREF: sub_403300+7A8↑j
.text:00403B50                 mov     esi, [esp+arg_2C]
.text:00403B54                 cmp     dword ptr [esi+4], 1
.text:00403B58                 jnz     loc_403ABF
.text:00403B5E                 mov     ecx, [ebp+0]
.text:00403B61                 cmp     ecx, [esp+arg_5C]
.text:00403B65                 jge     short loc_403B7C
.text:00403B67                 mov     eax, [esp+arg_60]
.text:00403B6B                 lea     ebx, [ecx+1]
.text:00403B6E                 mov     [ebp+0], ebx
.text:00403B71                 mov     edi, [eax+ecx*4]
.text:00403B74                 mov     [ebp+0Ch], edi
.text:00403B77                 jmp     loc_403ABF
.text:00403B7C ; ---------------------------------------------------------------------------
.text:00403B7C
.text:00403B7C loc_403B7C:                             ; CODE XREF: sub_403300+865↑j
.text:00403B7C                 mov     edx, [esp+arg_44]
.text:00403B80                 test    edx, edx
.text:00403B82                 jnz     short loc_403B97
.text:00403B84
.text:00403B84 loc_403B84:                             ; CODE XREF: sub_403300+8CE↓j
.text:00403B84                 mov     edx, [ebp+14h]
.text:00403B87                 mov     [esp+0], edx    ; Str
.text:00403B8A                 call    strlen
.text:00403B8F                 add     [ebp+14h], eax
.text:00403B92                 jmp     loc_4037B9
.text:00403B97 ; ---------------------------------------------------------------------------
.text:00403B97
.text:00403B97 loc_403B97:                             ; CODE XREF: sub_403300+882↑j
.text:00403B97                 mov     dword ptr [esp+0], offset sub_403220
.text:00403B9E                 call    ds:libintl_gettext
.text:00403BA4                 mov     ecx, [ebp+0]
.text:00403BA7                 mov     ebx, [esp+arg_60]
.text:00403BAB                 mov     edi, [ebx+ecx*4-4]
.text:00403BAF                 mov     ecx, ds:_iob
.text:00403BB5                 mov     [esp+arg_8], edi
.text:00403BB9                 mov     esi, [ebx]
.text:00403BBB                 add     ecx, 40h ; '@'
.text:00403BBE                 mov     [esp+Str2], eax ; Format
.text:00403BC2                 mov     [esp+0], ecx    ; Stream
.text:00403BC5                 mov     [esp+MaxCount], esi
.text:00403BC9                 call    fprintf
.text:00403BCE                 jmp     short loc_403B84
.text:00403BD0 ; ---------------------------------------------------------------------------
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403300+74F↑j
.text:00403BD0                                         ; sub_403300+79F↑j
.text:00403BD0                 mov     dword ptr [ebp+14h], 0
.text:00403BD7                 mov     eax, 57h ; 'W'
.text:00403BDC                 jmp     loc_403527
.text:00403BE1 ; ---------------------------------------------------------------------------
.text:00403BE1
.text:00403BE1 loc_403BE1:                             ; CODE XREF: sub_403300+793↑j
.text:00403BE1                 mov     edi, [esp+arg_44]
.text:00403BE5                 test    edi, edi
.text:00403BE7                 jnz     short loc_403BFF
.text:00403BE9
.text:00403BE9 loc_403BE9:                             ; CODE XREF: sub_403300+935↓j
.text:00403BE9                 mov     edx, [ebp+14h]
.text:00403BEC                 mov     [esp+0], edx    ; Str
.text:00403BEF                 call    strlen
.text:00403BF4                 add     [ebp+14h], eax
.text:00403BF7                 inc     dword ptr [ebp+0]
.text:00403BFA                 jmp     loc_403728
.text:00403BFF ; ---------------------------------------------------------------------------
.text:00403BFF
.text:00403BFF loc_403BFF:                             ; CODE XREF: sub_403300+8E7↑j
.text:00403BFF                 mov     dword ptr [esp+0], offset sub_403340
.text:00403C06                 call    ds:libintl_gettext
.text:00403C0C                 mov     ecx, [ebp+0]
.text:00403C0F                 mov     ebx, [esp+arg_60]
.text:00403C13                 mov     edi, [ebx+ecx*4]
.text:00403C16                 mov     ecx, ds:_iob
.text:00403C1C                 mov     [esp+arg_8], edi
.text:00403C20                 mov     esi, [ebx]
.text:00403C22                 add     ecx, 40h ; '@'
.text:00403C25                 mov     [esp+Str2], eax ; Format
.text:00403C29                 mov     [esp+0], ecx    ; Stream
.text:00403C2C                 mov     [esp+MaxCount], esi
.text:00403C30                 call    fprintf
.text:00403C35                 jmp     short loc_403BE9
.text:00403C37 ; ---------------------------------------------------------------------------
.text:00403C37
.text:00403C37 loc_403C37:                             ; CODE XREF: sub_403300+770↑j
.text:00403C37                 mov     edx, [ebp+14h]
.text:00403C3A                 mov     ebx, edi
.text:00403C3C                 mov     ecx, [esi]
.text:00403C3E                 sub     ebx, edx
.text:00403C40                 mov     [esp+0], ecx    ; Str
.text:00403C43                 call    strlen
.text:00403C48                 cmp     ebx, eax
.text:00403C4A                 jz      short loc_403C72
.text:00403C4C                 mov     ebx, [esp+arg_2C]
.text:00403C50                 test    ebx, ebx
.text:00403C52                 jz      short loc_403C61
.text:00403C54                 mov     [esp+arg_24], 1
.text:00403C5C                 jmp     loc_403A76
.text:00403C61 ; ---------------------------------------------------------------------------
.text:00403C61
.text:00403C61 loc_403C61:                             ; CODE XREF: sub_403300+952↑j
.text:00403C61                 mov     [esp+arg_2C], esi
.text:00403C65                 mov     ecx, [esp+arg_1C]
.text:00403C69                 mov     [esp+arg_20], ecx
.text:00403C6D                 jmp     loc_403A76
.text:00403C72 ; ---------------------------------------------------------------------------
.text:00403C72
.text:00403C72 loc_403C72:                             ; CODE XREF: sub_403300+94A↑j
.text:00403C72                 mov     [esp+arg_2C], esi
.text:00403C76                 mov     eax, [esp+arg_1C]
.text:00403C7A                 mov     [esp+arg_28], 1
.text:00403C82                 mov     [esp+arg_20], eax
.text:00403C86                 jmp     loc_403A85
.text:00403C8B ; ---------------------------------------------------------------------------
.text:00403C8B
.text:00403C8B loc_403C8B:                             ; CODE XREF: sub_403300+716↑j
.text:00403C8B                 mov     edx, [ebp+0]
.text:00403C8E                 cmp     edx, [esp+arg_5C]
.text:00403C92                 jz      short loc_403CA9
.text:00403C94                 mov     ebx, [esp+arg_60]
.text:00403C98                 lea     esi, [edx+1]
.text:00403C9B                 mov     [ebp+0], esi
.text:00403C9E                 mov     edi, [ebx+edx*4]
.text:00403CA1                 mov     [ebp+0Ch], edi
.text:00403CA4                 jmp     loc_403A22
.text:00403CA9 ; ---------------------------------------------------------------------------
.text:00403CA9
.text:00403CA9 loc_403CA9:                             ; CODE XREF: sub_403300+992↑j
.text:00403CA9                 mov     edi, [esp+arg_44]
.text:00403CAD                 test    edi, edi
.text:00403CAF                 jnz     short loc_403CCC
.text:00403CB1
.text:00403CB1 loc_403CB1:                             ; CODE XREF: sub_403300+9FC↓j
.text:00403CB1                 mov     [ebp+8], esi
.text:00403CB4                 mov     ebp, [esp+Str]
.text:00403CB8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403CBC                 jz      short loc_403CC8
.text:00403CBE                 mov     bl, 3Fh ; '?'
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403300+9CA↓j
.text:00403CC0                 movsx   eax, bl
.text:00403CC3                 jmp     loc_403527
.text:00403CC8 ; ---------------------------------------------------------------------------
.text:00403CC8
.text:00403CC8 loc_403CC8:                             ; CODE XREF: sub_403300+9BC↑j
.text:00403CC8                 mov     bl, 3Ah ; ':'
.text:00403CCA                 jmp     short loc_403CC0
.text:00403CCC ; ---------------------------------------------------------------------------
.text:00403CCC
.text:00403CCC loc_403CCC:                             ; CODE XREF: sub_403300+9AF↑j
.text:00403CCC                 mov     dword ptr [esp+0], 4032C0h
.text:00403CD3                 call    ds:libintl_gettext
.text:00403CD9                 mov     [esp+arg_8], esi
.text:00403CDD                 mov     edx, [esp+arg_60]
.text:00403CE1                 mov     ecx, ds:_iob
.text:00403CE7                 mov     ebx, [edx]
.text:00403CE9                 add     ecx, 40h ; '@'
.text:00403CEC                 mov     [esp+Str2], eax ; Format
.text:00403CF0                 mov     [esp+MaxCount], ebx
.text:00403CF4                 mov     [esp+0], ecx    ; Stream
.text:00403CF7                 call    fprintf
.text:00403CFC                 jmp     short loc_403CB1
.text:00403CFC ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403CFC ; ---------------------------------------------------------------------------
.text:00403CFE                 align 10h
.text:00403D00 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: sub_403300+61C↑j
.text:00403D00                                         ; sub_403300+625↑j
.text:00403D00                 mov     eax, [esp+arg_44]
.text:00403D04                 test    eax, eax
.text:00403D06                 jz      short loc_403D3F
.text:00403D08                 mov     ebx, [ebp+1Ch]
.text:00403D0B                 test    ebx, ebx
.text:00403D0D                 jz      short loc_403D47
.text:00403D0F                 mov     dword ptr [esp+0], offset loc_403361
.text:00403D16
.text:00403D16 loc_403D16:                             ; CODE XREF: sub_403300+A4E↓j
.text:00403D16                 call    ds:libintl_gettext
.text:00403D1C                 mov     [esp+arg_8], esi
.text:00403D20                 mov     ebx, [esp+arg_60]
.text:00403D24                 mov     edx, ds:_iob
.text:00403D2A                 mov     esi, [ebx]
.text:00403D2C                 add     edx, 40h ; '@'
.text:00403D2F                 mov     [esp+Str2], eax ; Format
.text:00403D33                 mov     [esp+MaxCount], esi
.text:00403D37                 mov     [esp+0], edx    ; Stream
.text:00403D3A                 call    fprintf
.text:00403D3F
.text:00403D3F loc_403D3F:                             ; CODE XREF: sub_403300+A06↑j
.text:00403D3F                 mov     [ebp+8], edi
.text:00403D42                 jmp     loc_403728
.text:00403D47 ; ---------------------------------------------------------------------------
.text:00403D47
.text:00403D47 loc_403D47:                             ; CODE XREF: sub_403300+A0D↑j
.text:00403D47                 mov     dword ptr [esp+0], offset loc_40337B
.text:00403D4E                 jmp     short loc_403D16
.text:00403D50 ; ---------------------------------------------------------------------------
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403300+33E↑j
.text:00403D50                 mov     edi, [esp+arg_44]
.text:00403D54                 test    edi, edi
.text:00403D56                 jnz     short loc_403D6E
.text:00403D58
.text:00403D58 loc_403D58:                             ; CODE XREF: sub_403300+AA4↓j
.text:00403D58                 mov     edx, [ebp+14h]
.text:00403D5B                 mov     [esp+0], edx    ; Str
.text:00403D5E                 call    strlen
.text:00403D63                 add     [ebp+14h], eax
.text:00403D66                 inc     dword ptr [ebp+0]
.text:00403D69                 jmp     loc_4038AE
.text:00403D6E ; ---------------------------------------------------------------------------
.text:00403D6E
.text:00403D6E loc_403D6E:                             ; CODE XREF: sub_403300+A56↑j
.text:00403D6E                 mov     dword ptr [esp+0], offset loc_403395
.text:00403D75                 call    ds:libintl_gettext
.text:00403D7B                 mov     ebx, [ebp+0]
.text:00403D7E                 mov     edi, [esp+arg_60]
.text:00403D82                 mov     ecx, [edi+ebx*4]
.text:00403D85                 mov     ebx, ds:_iob
.text:00403D8B                 mov     [esp+arg_8], ecx
.text:00403D8F                 mov     esi, [edi]
.text:00403D91                 add     ebx, 40h ; '@'
.text:00403D94                 mov     [esp+Str2], eax ; Format
.text:00403D98                 mov     [esp+0], ebx    ; Stream
.text:00403D9B                 mov     [esp+MaxCount], esi
.text:00403D9F                 call    fprintf
.text:00403DA4                 jmp     short loc_403D58
.text:00403DA6 ; ---------------------------------------------------------------------------
.text:00403DA6
.text:00403DA6 loc_403DA6:                             ; CODE XREF: sub_403300+316↑j
.text:00403DA6                 mov     ecx, [ebp+14h]
.text:00403DA9                 mov     ebx, edi
.text:00403DAB                 mov     edx, [esi]
.text:00403DAD                 sub     ebx, ecx
.text:00403DAF                 mov     [esp+0], edx    ; Str
.text:00403DB2                 call    strlen
.text:00403DB7                 cmp     ebx, eax
.text:00403DB9                 jz      short loc_403E11
.text:00403DBB                 mov     ebx, [esp+arg_40]
.text:00403DBF                 test    ebx, ebx
.text:00403DC1                 jz      short loc_403E00
.text:00403DC3                 mov     edx, [esp+arg_70]
.text:00403DC7                 test    edx, edx
.text:00403DC9                 jnz     short loc_403DD7
.text:00403DCB                 mov     ecx, [esp+arg_40]
.text:00403DCF                 mov     ebx, [esi+4]
.text:00403DD2                 cmp     [ecx+4], ebx
.text:00403DD5                 jz      short loc_403DE4
.text:00403DD7
.text:00403DD7 loc_403DD7:                             ; CODE XREF: sub_403300+AC9↑j
.text:00403DD7                                         ; sub_403300+AEA↓j ...
.text:00403DD7                 mov     [esp+arg_38], 1
.text:00403DDF                 jmp     loc_40361C
.text:00403DE4 ; ---------------------------------------------------------------------------
.text:00403DE4
.text:00403DE4 loc_403DE4:                             ; CODE XREF: sub_403300+AD5↑j
.text:00403DE4                 mov     edx, [esi+8]
.text:00403DE7                 cmp     [ecx+8], edx
.text:00403DEA                 jnz     short loc_403DD7
.text:00403DEC                 mov     ebx, [esi+0Ch]
.text:00403DEF                 cmp     [ecx+0Ch], ebx
.text:00403DF2                 jnz     short loc_403DD7
.text:00403DF4                 jmp     loc_40361C
.text:00403DF4 ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403DF4 ; ---------------------------------------------------------------------------
.text:00403DF9                 align 10h
.text:00403E00 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403E00
.text:00403E00 loc_403E00:                             ; CODE XREF: sub_403300+AC1↑j
.text:00403E00                 mov     [esp+arg_40], esi
.text:00403E04                 mov     eax, [esp+arg_30]
.text:00403E08                 mov     [esp+arg_34], eax
.text:00403E0C                 jmp     loc_40361C
.text:00403E11 ; ---------------------------------------------------------------------------
.text:00403E11
.text:00403E11 loc_403E11:                             ; CODE XREF: sub_403300+AB9↑j
.text:00403E11                 mov     [esp+arg_40], esi
.text:00403E15                 mov     ecx, [esp+arg_30]
.text:00403E19                 mov     [esp+arg_3C], 1
.text:00403E21                 mov     [esp+arg_34], ecx
.text:00403E25                 jmp     loc_403630
.text:00403E2A ; ---------------------------------------------------------------------------
.text:00403E2A
.text:00403E2A loc_403E2A:                             ; CODE XREF: sub_403300+28F↑j
.text:00403E2A                 mov     eax, [esp+Str]
.text:00403E2E                 movsx   esi, dl
.text:00403E31                 mov     [esp+Str2], esi ; Val
.text:00403E35                 mov     [esp+0], eax    ; Str
.text:00403E38                 call    strchr
.text:00403E3D                 test    eax, eax
.text:00403E3F                 jnz     loc_4038F0
.text:00403E45                 jmp     loc_403595
.text:00403E4A ; ---------------------------------------------------------------------------
.text:00403E4A
.text:00403E4A loc_403E4A:                             ; CODE XREF: sub_403300+24C↑j
.text:00403E4A                 mov     ecx, 1
.text:00403E4F                 jmp     loc_403552
.text:00403E54 ; ---------------------------------------------------------------------------
.text:00403E54
.text:00403E54 loc_403E54:                             ; CODE XREF: sub_403300+1A4↑j
.text:00403E54                                         ; sub_403300+200↑j
.text:00403E54                 mov     eax, [ebp+20h]
.text:00403E57                 cmp     eax, [ebp+24h]
.text:00403E5A                 jz      loc_403530
.text:00403E60                 mov     [ebp+0], eax
.text:00403E63                 jmp     loc_403530
.text:00403E68 ; ---------------------------------------------------------------------------
.text:00403E68
.text:00403E68 loc_403E68:                             ; CODE XREF: sub_403300+1CE↑j
.text:00403E68                 mov     [ebp+20h], eax
.text:00403E6B                 jmp     loc_4034F0
.text:00403E70 ; ---------------------------------------------------------------------------
.text:00403E70
.text:00403E70 loc_403E70:                             ; CODE XREF: sub_403300+19A↑j
.text:00403E70                 mov     edx, [ebp+20h]
.text:00403E73                 mov     eax, [ebp+24h]
.text:00403E76                 cmp     edx, eax
.text:00403E78                 jz      short loc_403EF0
.text:00403E7A                 cmp     eax, ebx
.text:00403E7C                 jz      short loc_403E91
.text:00403E7E                 mov     [esp+Str2], ebp
.text:00403E82                 mov     ebx, [esp+arg_60]
.text:00403E86                 mov     [esp+0], ebx
.text:00403E89                 call    sub_404080
.text:00403E8E                 mov     ebx, [ebp+0]
.text:00403E91
.text:00403E91 loc_403E91:                             ; CODE XREF: sub_403300+B7C↑j
.text:00403E91                                         ; sub_403300+BF2↓j ...
.text:00403E91                 cmp     ebx, [esp+arg_5C]
.text:00403E95                 jge     short loc_403EE0
.text:00403E97                 mov     esi, [esp+arg_60]
.text:00403E9B                 mov     eax, [esi+ebx*4]
.text:00403E9E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403EA1                 jz      short loc_403EE8
.text:00403EA3                 lea     esi, [esi+0]
.text:00403EA9                 lea     edi, [edi+0]
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_403300+BCC↓j
.text:00403EB0                                         ; sub_403300+BEC↓j
.text:00403EB0                 lea     eax, [ebx+1]
.text:00403EB3                 mov     ebx, eax
.text:00403EB5                 mov     [ebp+0], eax
.text:00403EB8                 cmp     eax, [esp+arg_5C]
.text:00403EBC                 jge     short loc_403EE0
.text:00403EBE                 mov     edi, [esp+arg_60]
.text:00403EC2                 mov     edx, [edi+eax*4]
.text:00403EC5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403EC8                 jz      short loc_403ED0
.text:00403ECA
.text:00403ECA loc_403ECA:                             ; CODE XREF: sub_403300+BD4↓j
.text:00403ECA                 mov     ebx, eax
.text:00403ECC                 jmp     short loc_403EB0
.text:00403ECC ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403ECC ; ---------------------------------------------------------------------------
.text:00403ECE                 align 10h
.text:00403ED0 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403300+BC8↑j
.text:00403ED0                 cmp     byte ptr [edx+1], 0
.text:00403ED4                 jz      short loc_403ECA
.text:00403ED6                 lea     esi, [esi+0]
.text:00403ED9                 lea     edi, [edi+0]
.text:00403EE0
.text:00403EE0 loc_403EE0:                             ; CODE XREF: sub_403300+B95↑j
.text:00403EE0                                         ; sub_403300+BBC↑j ...
.text:00403EE0                 mov     [ebp+24h], ebx
.text:00403EE3                 jmp     loc_4034A0
.text:00403EE8 ; ---------------------------------------------------------------------------
.text:00403EE8
.text:00403EE8 loc_403EE8:                             ; CODE XREF: sub_403300+BA1↑j
.text:00403EE8                 cmp     byte ptr [eax+1], 0
.text:00403EEC                 jz      short loc_403EB0
.text:00403EEE                 jmp     short loc_403EE0
.text:00403EF0 ; ---------------------------------------------------------------------------
.text:00403EF0
.text:00403EF0 loc_403EF0:                             ; CODE XREF: sub_403300+B78↑j
.text:00403EF0                 cmp     edx, ebx
.text:00403EF2                 jz      short loc_403E91
.text:00403EF4                 mov     [ebp+20h], ebx
.text:00403EF7                 jmp     short loc_403E91
.text:00403EF9 ; ---------------------------------------------------------------------------
.text:00403EF9
.text:00403EF9 loc_403EF9:                             ; CODE XREF: sub_403300+158↑j
.text:00403EF9                 mov     dword ptr [ebp+18h], 0
.text:00403F00                 mov     esi, [esp+Str]
.text:00403F04
.text:00403F04 loc_403F04:                             ; CODE XREF: sub_403300+C19↓j
.text:00403F04                 inc     esi
.text:00403F05                 jmp     loc_403468
.text:00403F05 ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403F05 ; ---------------------------------------------------------------------------
.text:00403F0A                 align 10h
.text:00403F10 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403F10
.text:00403F10 loc_403F10:                             ; CODE XREF: sub_403300+150↑j
.text:00403F10                 mov     dword ptr [ebp+18h], 2
.text:00403F17                 mov     esi, ecx
.text:00403F19                 jmp     short loc_403F04
.text:00403F19 ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403F19 ; ---------------------------------------------------------------------------
.text:00403F1B                 align 10h
.text:00403F20 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_403300+139↑j
.text:00403F20                 mov     dword ptr [esp+0], offset loc_4033B3 ; VarName
.text:00403F27                 call    getenv
.text:00403F2C                 test    eax, eax
.text:00403F2E                 jz      loc_403444
.text:00403F34                 jmp     loc_40343F
.text:00403F34 ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403F34 ; ---------------------------------------------------------------------------
.text:00403F39                 align 10h
.text:00403F40 ; START OF FUNCTION CHUNK FOR sub_403300
.text:00403F40
.text:00403F40 loc_403F40:                             ; CODE XREF: sub_403300:loc_40340F↑j
.text:00403F40                 mov     dword ptr [ebp+0], 1
.text:00403F47                 mov     ebx, 1
.text:00403F4C                 jmp     loc_403420
.text:00403F4C ; END OF FUNCTION CHUNK FOR sub_403300
.text:00403F51 ; ---------------------------------------------------------------------------
.text:00403F51                 jmp     short sub_403F60
.text:00403F51 ; ---------------------------------------------------------------------------
.text:00403F53                 align 10h
.text:00403F60
.text:00403F60 ; =============== S U B R O U T I N E =======================================
.text:00403F60
.text:00403F60
.text:00403F60 sub_403F60      proc near               ; CODE XREF: .text:00403F51↑j
.text:00403F60                                         ; sub_405850+3A↓p ...
.text:00403F60
.text:00403F60 var_2C          = dword ptr -2Ch
.text:00403F60 var_28          = dword ptr -28h
.text:00403F60 var_24          = dword ptr -24h
.text:00403F60 var_20          = dword ptr -20h
.text:00403F60 var_1C          = dword ptr -1Ch
.text:00403F60 var_18          = dword ptr -18h
.text:00403F60 var_14          = dword ptr -14h
.text:00403F60 var_10          = dword ptr -10h
.text:00403F60 arg_0           = dword ptr  4
.text:00403F60 arg_4           = dword ptr  8
.text:00403F60 arg_8           = dword ptr  0Ch
.text:00403F60 arg_C           = dword ptr  10h
.text:00403F60 arg_10          = dword ptr  14h
.text:00403F60 arg_14          = dword ptr  18h
.text:00403F60 arg_18          = dword ptr  1Ch
.text:00403F60
.text:00403F60                 sub     esp, 2Ch
.text:00403F63                 mov     edx, dword_409010
.text:00403F69                 mov     [esp+2Ch+var_10], offset dword_40A100
.text:00403F71                 mov     ecx, dword_409014
.text:00403F77                 mov     ds:dword_40A100, edx
.text:00403F7D                 mov     edx, [esp+2Ch+arg_18]
.text:00403F81                 mov     ds:dword_40A104, ecx
.text:00403F87                 mov     ecx, [esp+2Ch+arg_14]
.text:00403F8B                 mov     [esp+2Ch+var_14], edx
.text:00403F8F                 mov     edx, [esp+2Ch+arg_10]
.text:00403F93                 mov     [esp+2Ch+var_18], ecx
.text:00403F97                 mov     ecx, [esp+2Ch+arg_C]
.text:00403F9B                 mov     [esp+2Ch+var_1C], edx
.text:00403F9F                 mov     edx, [esp+2Ch+arg_8]
.text:00403FA3                 mov     [esp+2Ch+var_20], ecx
.text:00403FA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00403FAB                 mov     [esp+2Ch+var_24], edx
.text:00403FAF                 mov     edx, [esp+2Ch+arg_0]
.text:00403FB3                 mov     [esp+2Ch+var_28], ecx
.text:00403FB7                 mov     [esp+2Ch+var_2C], edx
.text:00403FBA                 call    loc_4033D0
.text:00403FBF                 mov     ecx, ds:dword_40A100
.text:00403FC5                 mov     dword_409010, ecx
.text:00403FCB                 mov     ecx, ds:dword_40A10C
.text:00403FD1                 mov     ds:Str, ecx
.text:00403FD7                 mov     ecx, ds:dword_40A108
.text:00403FDD                 mov     dword_409018, ecx
.text:00403FE3                 add     esp, 2Ch
.text:00403FE6                 retn
.text:00403FE6 sub_403F60      endp
.text:00403FE6
.text:00403FE6 ; ---------------------------------------------------------------------------
.text:00403FE7                 align 10h
.text:00403FF0                 sub     esp, 2Ch
.text:00403FF3                 mov     edx, dword_409010
.text:00403FF9                 mov     dword ptr [esp+1Ch], offset dword_40A100
.text:00404001                 mov     ecx, dword_409014
.text:00404007                 mov     dword ptr [esp+18h], 1
.text:0040400F                 mov     ds:dword_40A100, edx
.text:00404015                 mov     edx, [esp+38h]
.text:00404019                 mov     ds:dword_40A104, ecx
.text:0040401F                 mov     ecx, [esp+34h]
.text:00404023                 mov     [esp+8], edx
.text:00404027                 mov     edx, [esp+30h]
.text:0040402B                 mov     [esp+4], ecx
.text:0040402F                 mov     dword ptr [esp+14h], 0
.text:00404037                 mov     dword ptr [esp+10h], 0
.text:0040403F                 mov     dword ptr [esp+0Ch], 0
.text:00404047                 mov     [esp], edx
.text:0040404A                 call    loc_4033D0
.text:0040404F                 mov     ecx, ds:dword_40A100
.text:00404055                 mov     dword_409010, ecx
.text:0040405B                 mov     ecx, ds:dword_40A10C
.text:00404061                 mov     ds:Str, ecx
.text:00404067                 mov     ecx, ds:dword_40A108
.text:0040406D                 mov     dword_409018, ecx
.text:00404073                 add     esp, 2Ch
.text:00404076                 retn
.text:00404076 ; ---------------------------------------------------------------------------
.text:00404077                 align 10h
.text:00404080
.text:00404080 ; =============== S U B R O U T I N E =======================================
.text:00404080
.text:00404080
.text:00404080 sub_404080      proc near               ; CODE XREF: sub_403300+1E3↑p
.text:00404080                                         ; sub_403300+B89↑p
.text:00404080
.text:00404080 var_2C          = dword ptr -2Ch
.text:00404080 var_28          = dword ptr -28h
.text:00404080 var_24          = dword ptr -24h
.text:00404080 var_20          = dword ptr -20h
.text:00404080 var_1C          = dword ptr -1Ch
.text:00404080 var_18          = dword ptr -18h
.text:00404080 var_14          = dword ptr -14h
.text:00404080 arg_0           = dword ptr  4
.text:00404080 arg_4           = dword ptr  8
.text:00404080
.text:00404080                 push    ebp
.text:00404081                 push    edi
.text:00404082                 push    esi
.text:00404083                 push    ebx
.text:00404084                 sub     esp, 1Ch
.text:00404087                 mov     ecx, [esp+2Ch+arg_4]
.text:0040408B                 mov     eax, [esp+2Ch+arg_4]
.text:0040408F                 mov     ebx, [esp+2Ch+arg_4]
.text:00404093                 mov     edx, [ecx+20h]
.text:00404096                 mov     edi, [esp+2Ch+arg_0]
.text:0040409A                 mov     ecx, [ebx]
.text:0040409C                 mov     [esp+2Ch+var_2C], edx
.text:0040409F                 mov     [esp+2Ch+var_14], edx
.text:004040A3                 mov     edx, [eax+24h]
.text:004040A6                 mov     [esp+2Ch+var_28], ecx
.text:004040AA                 mov     [esp+2Ch+var_1C], ecx
.text:004040AE                 cmp     ecx, edx
.text:004040B0                 mov     [esp+2Ch+var_18], edx
.text:004040B4                 jle     short loc_404130
.text:004040B6                 mov     esi, [esp+2Ch+var_2C]
.text:004040B9                 cmp     edx, esi
.text:004040BB                 jle     short loc_404130
.text:004040BD                 lea     esi, [esi+0]
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_404080+A1↓j
.text:004040C0                 mov     ebx, [esp+2Ch+var_1C]
.text:004040C4                 mov     edx, [esp+2Ch+var_18]
.text:004040C8                 mov     ebp, [esp+2Ch+var_18]
.text:004040CC                 mov     eax, [esp+2Ch+var_14]
.text:004040D0                 sub     ebx, edx
.text:004040D2                 mov     [esp+2Ch+var_20], ebx
.text:004040D6                 sub     ebp, eax
.text:004040D8                 cmp     ebx, ebp
.text:004040DA                 jle     short loc_404155
.text:004040DC                 xor     esi, esi
.text:004040DE                 cmp     esi, ebp
.text:004040E0                 jge     short loc_40410D
.text:004040E2                 mov     ecx, [esp+2Ch+var_1C]
.text:004040E6                 sub     ecx, ebp
.text:004040E8                 mov     [esp+2Ch+var_24], ecx
.text:004040EC                 lea     esi, [esi+0]
.text:004040F0
.text:004040F0 loc_4040F0:                             ; CODE XREF: sub_404080+8B↓j
.text:004040F0                 mov     ecx, [esp+2Ch+var_14]
.text:004040F4                 mov     edx, [esp+2Ch+var_24]
.text:004040F8                 add     ecx, esi
.text:004040FA                 add     edx, esi
.text:004040FC                 mov     ebx, [edi+ecx*4]
.text:004040FF                 mov     eax, [edi+edx*4]
.text:00404102                 inc     esi
.text:00404103                 cmp     esi, ebp
.text:00404105                 mov     [edi+ecx*4], eax
.text:00404108                 mov     [edi+edx*4], ebx
.text:0040410B                 jl      short loc_4040F0
.text:0040410D
.text:0040410D loc_40410D:                             ; CODE XREF: sub_404080+60↑j
.text:0040410D                 sub     [esp+2Ch+var_1C], ebp
.text:00404111
.text:00404111 loc_404111:                             ; CODE XREF: sub_404080+107↓j
.text:00404111                 mov     eax, [esp+2Ch+var_18]
.text:00404115                 cmp     [esp+2Ch+var_1C], eax
.text:00404119                 jle     short loc_404130
.text:0040411B                 mov     ebp, [esp+2Ch+var_14]
.text:0040411F                 cmp     eax, ebp
.text:00404121                 jg      short loc_4040C0
.text:00404123                 lea     esi, [esi+0]
.text:00404129                 lea     edi, [edi+0]
.text:00404130
.text:00404130 loc_404130:                             ; CODE XREF: sub_404080+34↑j
.text:00404130                                         ; sub_404080+3B↑j ...
.text:00404130                 mov     esi, [esp+2Ch+var_28]
.text:00404134                 mov     ecx, [esp+2Ch+var_18]
.text:00404138                 mov     eax, [esp+2Ch+var_2C]
.text:0040413B                 mov     edi, [esp+2Ch+arg_4]
.text:0040413F                 mov     edx, [esp+2Ch+var_28]
.text:00404143                 sub     esi, ecx
.text:00404145                 add     esi, eax
.text:00404147                 mov     [edi+20h], esi
.text:0040414A                 mov     [edi+24h], edx
.text:0040414D                 add     esp, 1Ch
.text:00404150                 pop     ebx
.text:00404151                 pop     esi
.text:00404152                 pop     edi
.text:00404153                 pop     ebp
.text:00404154                 retn
.text:00404155 ; ---------------------------------------------------------------------------
.text:00404155
.text:00404155 loc_404155:                             ; CODE XREF: sub_404080+5A↑j
.text:00404155                 xor     esi, esi
.text:00404157                 cmp     esi, [esp+2Ch+var_20]
.text:0040415B                 jge     short loc_40417F
.text:0040415D                 lea     esi, [esi+0]
.text:00404160
.text:00404160 loc_404160:                             ; CODE XREF: sub_404080+FD↓j
.text:00404160                 mov     ebx, [esp+2Ch+var_14]
.text:00404164                 mov     ebp, [esp+2Ch+var_18]
.text:00404168                 add     ebx, esi
.text:0040416A                 add     ebp, esi
.text:0040416C                 mov     edx, [edi+ebx*4]
.text:0040416F                 inc     esi
.text:00404170                 cmp     esi, [esp+2Ch+var_20]
.text:00404174                 mov     ecx, [edi+ebp*4]
.text:00404177                 mov     [edi+ebx*4], ecx
.text:0040417A                 mov     [edi+ebp*4], edx
.text:0040417D                 jl      short loc_404160
.text:0040417F
.text:0040417F loc_40417F:                             ; CODE XREF: sub_404080+DB↑j
.text:0040417F                 mov     esi, [esp+2Ch+var_20]
.text:00404183                 add     [esp+2Ch+var_14], esi
.text:00404187                 jmp     short loc_404111
.text:00404187 sub_404080      endp
.text:00404187
.text:00404187 ; ---------------------------------------------------------------------------
.text:00404189                 align 20h
.text:004041A0 dword_4041A0    dd 0                    ; DATA XREF: sub_4041D0+D2↓o
.text:004041A0                                         ; sub_4041D0:loc_404400↓o ...
.text:004041A4 dword_4041A4    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:004041A4                                         ; DATA XREF: .text:00404DBC↓r
.text:004041A4                                         ; .text:00404DC5↓r ...
.text:004041B4 flt_4041B4      dd 0.1                  ; DATA XREF: sub_4041D0:loc_40421F↓r
.text:004041B8 flt_4041B8      dd 4.2949673e9          ; DATA XREF: sub_4041D0+101↓r
.text:004041BC flt_4041BC      dd 0.89999998           ; DATA XREF: sub_4041D0+66↓r
.text:004041C0 flt_4041C0      dd 1.1                  ; DATA XREF: sub_4041D0+7A↓r
.text:004041C4                 align 10h
.text:004041D0
.text:004041D0 ; =============== S U B R O U T I N E =======================================
.text:004041D0
.text:004041D0
.text:004041D0 sub_4041D0      proc near               ; CODE XREF: sub_401CE0+472↑p
.text:004041D0                                         ; sub_4045A0+2E↓p
.text:004041D0
.text:004041D0 var_44          = qword ptr -44h
.text:004041D0 Size            = dword ptr -3Ch
.text:004041D0 var_38          = dword ptr -38h
.text:004041D0 var_28          = dword ptr -28h
.text:004041D0 var_24          = qword ptr -24h
.text:004041D0 var_18          = word ptr -18h
.text:004041D0 var_16          = word ptr -16h
.text:004041D0 var_10          = dword ptr -10h
.text:004041D0 var_C           = dword ptr -0Ch
.text:004041D0 var_8           = dword ptr -8
.text:004041D0 var_4           = dword ptr -4
.text:004041D0 arg_0           = dword ptr  4
.text:004041D0 arg_4           = dword ptr  8
.text:004041D0 arg_8           = dword ptr  0Ch
.text:004041D0 arg_C           = dword ptr  10h
.text:004041D0 arg_10          = dword ptr  14h
.text:004041D0
.text:004041D0                 sub     esp, 3Ch
.text:004041D3                 mov     [esp+3Ch+var_4], ebp
.text:004041D7                 mov     ebp, [esp+3Ch+arg_8]
.text:004041DB                 mov     [esp+3Ch+var_10], ebx
.text:004041DF                 mov     ebx, [esp+3Ch+arg_4]
.text:004041E3                 test    ebp, ebp
.text:004041E5                 mov     [esp+3Ch+var_C], esi
.text:004041E9                 mov     [esp+3Ch+var_8], edi
.text:004041ED                 jz      loc_4042B1
.text:004041F3                 mov     edx, [esp+3Ch+arg_C]
.text:004041F7                 test    edx, edx
.text:004041F9                 jz      loc_4042B1
.text:004041FF                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:00404206                 call    malloc
.text:0040420B                 mov     esi, eax
.text:0040420D                 xor     eax, eax
.text:0040420F                 test    esi, esi
.text:00404211                 jz      loc_4042B3
.text:00404217                 test    ebx, ebx
.text:00404219                 jz      loc_404400
.text:0040421F
.text:0040421F loc_40421F:                             ; CODE XREF: sub_4041D0+235↓j
.text:0040421F                 fld     ds:flt_4041B4
.text:00404225                 fld     dword ptr [ebx+8]
.text:00404228                 mov     [esi+14h], ebx
.text:0040422B                 fucom   st(1)
.text:0040422D                 fnstsw  ax
.text:0040422F                 sahf
.text:00404230                 jbe     loc_4043F0
.text:00404236                 fld     ds:flt_4041BC
.text:0040423C                 fucomp  st(1)
.text:0040423E                 fnstsw  ax
.text:00404240                 sahf
.text:00404241                 jbe     loc_4043F0
.text:00404247                 fld     dword ptr [ebx+0Ch]
.text:0040424A                 fld     ds:flt_4041C0
.text:00404250                 fxch    st(1)
.text:00404252                 fucompp
.text:00404254                 fnstsw  ax
.text:00404256                 sahf
.text:00404257                 jbe     loc_4043F0
.text:0040425D                 fld     dword ptr [ebx]
.text:0040425F                 fldz
.text:00404261                 fxch    st(1)
.text:00404263                 fucom   st(1)
.text:00404265                 fnstsw  ax
.text:00404267                 fstp    st(1)
.text:00404269                 sahf
.text:0040426A                 jb      loc_4043F7
.text:00404270                 faddp   st(2), st
.text:00404272                 fld     dword ptr [ebx+4]
.text:00404275                 fucom   st(2)
.text:00404277                 fnstsw  ax
.text:00404279                 sahf
.text:0040427A                 jbe     loc_4043F7
.text:00404280                 fld1
.text:00404282                 fucompp
.text:00404284                 fnstsw  ax
.text:00404286                 sahf
.text:00404287                 jb      loc_4043F0
.text:0040428D                 fucom   st(1)
.text:0040428F                 fnstsw  ax
.text:00404291                 fstp    st(1)
.text:00404293                 sahf
.text:00404294                 ja      short loc_4042C7
.text:00404296                 lea     esi, [esi+0]
.text:00404299                 lea     edi, [edi+0]
.text:004042A0
.text:004042A0 loc_4042A0:                             ; CODE XREF: sub_4041D0+222↓j
.text:004042A0                 fstp    st
.text:004042A2                 mov     dword ptr [esi+14h], offset dword_4041A0
.text:004042A9
.text:004042A9 loc_4042A9:                             ; CODE XREF: sub_4041D0+155↓j
.text:004042A9                                         ; sub_4041D0+1BF↓j ...
.text:004042A9                 mov     [esp+3Ch+Size], esi ; Block
.text:004042AC                 call    free
.text:004042B1
.text:004042B1 loc_4042B1:                             ; CODE XREF: sub_4041D0+1D↑j
.text:004042B1                                         ; sub_4041D0+29↑j
.text:004042B1                 xor     eax, eax
.text:004042B3
.text:004042B3 loc_4042B3:                             ; CODE XREF: sub_4041D0+41↑j
.text:004042B3                                         ; sub_4041D0+208↓j
.text:004042B3                 mov     ebx, [esp+3Ch+var_10]
.text:004042B7                 mov     esi, [esp+3Ch+var_C]
.text:004042BB                 mov     edi, [esp+3Ch+var_8]
.text:004042BF                 mov     ebp, [esp+3Ch+var_4]
.text:004042C3                 add     esp, 3Ch
.text:004042C6                 retn
.text:004042C7 ; ---------------------------------------------------------------------------
.text:004042C7
.text:004042C7 loc_4042C7:                             ; CODE XREF: sub_4041D0+C4↑j
.text:004042C7                 cmp     byte ptr [ebx+10h], 0
.text:004042CB                 jnz     loc_4043E4
.text:004042D1                 fld     ds:flt_4041B8
.text:004042D7                 xor     eax, eax
.text:004042D9                 mov     ecx, [esp+3Ch+arg_0]
.text:004042DD                 push    eax
.text:004042DE                 push    ecx
.text:004042DF                 fild    [esp+44h+var_44]
.text:004042E2                 add     esp, 8
.text:004042E5                 fdivrp  st(2), st
.text:004042E7                 fxch    st(1)
.text:004042E9                 fucom   st(1)
.text:004042EB                 fnstsw  ax
.text:004042ED                 fstp    st(1)
.text:004042EF                 sahf
.text:004042F0                 jnb     loc_4043DD
.text:004042F6                 fnstcw  [esp+3Ch+var_16]
.text:004042FA                 movzx   ebx, [esp+3Ch+var_16]
.text:004042FF                 or      bx, 0C00h
.text:00404304                 mov     [esp+3Ch+var_18], bx
.text:00404309                 fldcw   [esp+3Ch+var_18]
.text:0040430D                 fistp   [esp+3Ch+var_24]
.text:00404311                 fldcw   [esp+3Ch+var_16]
.text:00404315                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:00404319                 mov     [esp+3Ch+arg_0], edx
.text:0040431D
.text:0040431D loc_40431D:                             ; CODE XREF: sub_4041D0+216↓j
.text:0040431D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:00404325                 ja      short loc_4042A9
.text:00404327                 mov     ecx, [esp+3Ch+arg_0]
.text:0040432B                 cmp     ecx, 9
.text:0040432E                 ja      short loc_404335
.text:00404330                 mov     ecx, 0Ah
.text:00404335
.text:00404335 loc_404335:                             ; CODE XREF: sub_4041D0+15E↑j
.text:00404335                 or      ecx, 1
.text:00404338
.text:00404338 loc_404338:                             ; CODE XREF: sub_4041D0+1B4↓j
.text:00404338                 mov     [esp+3Ch+var_28], 3
.text:00404340                 mov     edi, 9
.text:00404345                 cmp     edi, ecx
.text:00404347                 jnb     short loc_404375
.text:00404349                 xor     edx, edx
.text:0040434B                 mov     eax, ecx
.text:0040434D                 div     [esp+3Ch+var_28]
.text:00404351                 test    edx, edx
.text:00404353                 jz      short loc_404375
.text:00404355
.text:00404355 loc_404355:                             ; CODE XREF: sub_4041D0+1A3↓j
.text:00404355                 inc     [esp+3Ch+var_28]
.text:00404359                 mov     edx, [esp+3Ch+var_28]
.text:0040435D                 lea     edi, [edi+edx*4]
.text:00404360                 inc     edx
.text:00404361                 cmp     edi, ecx
.text:00404363                 mov     [esp+3Ch+var_28], edx
.text:00404367                 jnb     short loc_404375
.text:00404369                 xor     edx, edx
.text:0040436B                 mov     eax, ecx
.text:0040436D                 div     [esp+3Ch+var_28]
.text:00404371                 test    edx, edx
.text:00404373                 jnz     short loc_404355
.text:00404375
.text:00404375 loc_404375:                             ; CODE XREF: sub_4041D0+177↑j
.text:00404375                                         ; sub_4041D0+183↑j ...
.text:00404375                 xor     edx, edx
.text:00404377                 mov     eax, ecx
.text:00404379                 div     [esp+3Ch+var_28]
.text:0040437D                 test    edx, edx
.text:0040437F                 jnz     short loc_404386
.text:00404381                 add     ecx, 2
.text:00404384                 jmp     short loc_404338
.text:00404386 ; ---------------------------------------------------------------------------
.text:00404386
.text:00404386 loc_404386:                             ; CODE XREF: sub_4041D0+1AF↑j
.text:00404386                 mov     [esi+8], ecx
.text:00404389                 cmp     ecx, 1FFFFFFFh
.text:0040438F                 ja      loc_4042A9
.text:00404395                 mov     [esp+3Ch+Size], ecx ; Count
.text:00404398                 mov     [esp+3Ch+var_38], 8 ; Size
.text:004043A0                 call    calloc
.text:004043A5                 mov     [esi+18h], ebp
.text:004043A8                 mov     ebx, [esi+8]
.text:004043AB                 mov     ebp, [esp+3Ch+arg_C]
.text:004043AF                 mov     [esi], eax
.text:004043B1                 mov     edi, [esp+3Ch+arg_10]
.text:004043B5                 lea     ecx, [eax+ebx*8]
.text:004043B8                 mov     [esi+4], ecx
.text:004043BB                 mov     eax, esi
.text:004043BD                 mov     dword ptr [esi+0Ch], 0
.text:004043C4                 mov     dword ptr [esi+10h], 0
.text:004043CB                 mov     [esi+1Ch], ebp
.text:004043CE                 mov     [esi+20h], edi
.text:004043D1                 mov     dword ptr [esi+24h], 0
.text:004043D8                 jmp     loc_4042B3
.text:004043DD ; ---------------------------------------------------------------------------
.text:004043DD
.text:004043DD loc_4043DD:                             ; CODE XREF: sub_4041D0+120↑j
.text:004043DD                 fstp    st
.text:004043DF                 jmp     loc_4042A9
.text:004043E4 ; ---------------------------------------------------------------------------
.text:004043E4
.text:004043E4 loc_4043E4:                             ; CODE XREF: sub_4041D0+FB↑j
.text:004043E4                 fstp    st
.text:004043E6                 jmp     loc_40431D
.text:004043E6 ; ---------------------------------------------------------------------------
.text:004043EB                 align 10h
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: sub_4041D0+60↑j
.text:004043F0                                         ; sub_4041D0+71↑j ...
.text:004043F0                 fstp    st
.text:004043F2                 jmp     loc_4042A0
.text:004043F7 ; ---------------------------------------------------------------------------
.text:004043F7
.text:004043F7 loc_4043F7:                             ; CODE XREF: sub_4041D0+9A↑j
.text:004043F7                                         ; sub_4041D0+AA↑j
.text:004043F7                 fstp    st
.text:004043F9                 jmp     short loc_4043F0
.text:004043F9 ; ---------------------------------------------------------------------------
.text:004043FB                 align 10h
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: sub_4041D0+49↑j
.text:00404400                 mov     ebx, offset dword_4041A0
.text:00404405                 jmp     loc_40421F
.text:00404405 sub_4041D0      endp
.text:00404405
.text:00404405 ; ---------------------------------------------------------------------------
.text:0040440A                 align 10h
.text:00404410                 push    edi
.text:00404411                 push    esi
.text:00404412                 push    ebx
.text:00404413                 sub     esp, 10h
.text:00404416                 mov     edi, [esp+20h]
.text:0040441A                 mov     esi, [edi]
.text:0040441C                 mov     eax, [edi+4]
.text:0040441F                 cmp     esi, eax
.text:00404421                 jnb     short loc_404477
.text:00404423                 lea     esi, [esi+0]
.text:00404429                 lea     edi, [edi+0]
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: .text:00404475↓j
.text:00404430                 mov     ecx, [esi]
.text:00404432                 test    ecx, ecx
.text:00404434                 jz      short loc_404470
.text:00404436                 mov     ebx, [esi+4]
.text:00404439                 test    ebx, ebx
.text:0040443B                 jz      short loc_4044A1
.text:0040443D                 mov     ecx, [edi+20h]
.text:00404440
.text:00404440 loc_404440:                             ; CODE XREF: .text:0040445A↓j
.text:00404440                 test    ecx, ecx
.text:00404442                 jnz     short loc_404495
.text:00404444
.text:00404444 loc_404444:                             ; CODE XREF: .text:0040449F↓j
.text:00404444                 mov     dword ptr [ebx], 0
.text:0040444A                 mov     edx, [ebx+4]
.text:0040444D                 mov     eax, [edi+24h]
.text:00404450                 test    edx, edx
.text:00404452                 mov     [ebx+4], eax
.text:00404455                 mov     [edi+24h], ebx
.text:00404458                 mov     ebx, edx
.text:0040445A                 jnz     short loc_404440
.text:0040445C
.text:0040445C loc_40445C:                             ; CODE XREF: .text:004044A4↓j
.text:0040445C                 test    ecx, ecx
.text:0040445E                 jnz     short loc_40448C
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: .text:00404493↓j
.text:00404460                 mov     dword ptr [esi+4], 0
.text:00404467                 mov     eax, [edi+4]
.text:0040446A                 mov     dword ptr [esi], 0
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: .text:00404434↑j
.text:00404470                 add     esi, 8
.text:00404473                 cmp     esi, eax
.text:00404475                 jb      short loc_404430
.text:00404477
.text:00404477 loc_404477:                             ; CODE XREF: .text:00404421↑j
.text:00404477                 mov     dword ptr [edi+0Ch], 0
.text:0040447E                 mov     dword ptr [edi+10h], 0
.text:00404485                 add     esp, 10h
.text:00404488                 pop     ebx
.text:00404489                 pop     esi
.text:0040448A                 pop     edi
.text:0040448B                 retn
.text:0040448C ; ---------------------------------------------------------------------------
.text:0040448C
.text:0040448C loc_40448C:                             ; CODE XREF: .text:0040445E↑j
.text:0040448C                 mov     ebx, [esi]
.text:0040448E                 mov     [esp], ebx
.text:00404491                 call    ecx
.text:00404493                 jmp     short loc_404460
.text:00404495 ; ---------------------------------------------------------------------------
.text:00404495
.text:00404495 loc_404495:                             ; CODE XREF: .text:00404442↑j
.text:00404495                 mov     edx, [ebx]
.text:00404497                 mov     [esp], edx
.text:0040449A                 call    ecx
.text:0040449C                 mov     ecx, [edi+20h]
.text:0040449F                 jmp     short loc_404444
.text:004044A1 ; ---------------------------------------------------------------------------
.text:004044A1
.text:004044A1 loc_4044A1:                             ; CODE XREF: .text:0040443B↑j
.text:004044A1                 mov     ecx, [edi+20h]
.text:004044A4                 jmp     short loc_40445C
.text:004044A4 ; ---------------------------------------------------------------------------
.text:004044A6                 align 10h
.text:004044B0
.text:004044B0 ; =============== S U B R O U T I N E =======================================
.text:004044B0
.text:004044B0
.text:004044B0 ; int __cdecl sub_4044B0(void *)
.text:004044B0 sub_4044B0      proc near               ; CODE XREF: sub_401CE0+562↑p
.text:004044B0
.text:004044B0 Block           = dword ptr -1Ch
.text:004044B0 arg_0           = dword ptr  4
.text:004044B0
.text:004044B0                 push    ebp
.text:004044B1                 push    edi
.text:004044B2                 push    esi
.text:004044B3                 push    ebx
.text:004044B4                 sub     esp, 0Ch
.text:004044B7                 mov     ebp, [esp+1Ch+arg_0]
.text:004044BB                 mov     eax, [ebp+20h]
.text:004044BE                 test    eax, eax
.text:004044C0                 jz      loc_40458C
.text:004044C6                 mov     eax, [ebp+10h]
.text:004044C9                 test    eax, eax
.text:004044CB                 jz      loc_40458C
.text:004044D1                 mov     edi, [ebp+0]
.text:004044D4                 mov     eax, [ebp+4]
.text:004044D7                 cmp     edi, eax
.text:004044D9                 jnb     short loc_40454B
.text:004044DB
.text:004044DB loc_4044DB:                             ; CODE XREF: sub_4044B0+57↓j
.text:004044DB                 mov     edx, [edi]
.text:004044DD                 test    edx, edx
.text:004044DF                 jz      short loc_404502
.text:004044E1                 test    edi, edi
.text:004044E3                 mov     ebx, edi
.text:004044E5                 jz      short loc_404502
.text:004044E7                 mov     esi, esi
.text:004044E9                 lea     edi, [edi+0]
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_4044B0+4D↓j
.text:004044F0                 mov     ecx, [ebx]
.text:004044F2                 mov     [esp+1Ch+Block], ecx
.text:004044F5                 call    dword ptr [ebp+20h]
.text:004044F8                 mov     ebx, [ebx+4]
.text:004044FB                 test    ebx, ebx
.text:004044FD                 jnz     short loc_4044F0
.text:004044FF                 mov     eax, [ebp+4]
.text:00404502
.text:00404502 loc_404502:                             ; CODE XREF: sub_4044B0+2F↑j
.text:00404502                                         ; sub_4044B0+35↑j
.text:00404502                 add     edi, 8
.text:00404505                 cmp     edi, eax
.text:00404507                 jb      short loc_4044DB
.text:00404509                 mov     edx, [ebp+0]
.text:0040450C
.text:0040450C loc_40450C:                             ; CODE XREF: sub_4044B0+E2↓j
.text:0040450C                 cmp     edx, eax
.text:0040450E                 mov     edi, edx
.text:00404510                 jnb     short loc_40454B
.text:00404512                 lea     esi, [esi+0]
.text:00404519                 lea     edi, [edi+0]
.text:00404520
.text:00404520 loc_404520:                             ; CODE XREF: sub_4044B0+99↓j
.text:00404520                 mov     ebx, [edi+4]
.text:00404523                 test    ebx, ebx
.text:00404525                 jz      short loc_404544
.text:00404527                 mov     esi, esi
.text:00404529                 lea     edi, [edi+0]
.text:00404530
.text:00404530 loc_404530:                             ; CODE XREF: sub_4044B0+8F↓j
.text:00404530                 mov     esi, [ebx+4]
.text:00404533                 mov     [esp+1Ch+Block], ebx ; Block
.text:00404536                 call    free
.text:0040453B                 test    esi, esi
.text:0040453D                 mov     ebx, esi
.text:0040453F                 jnz     short loc_404530
.text:00404541                 mov     eax, [ebp+4]
.text:00404544
.text:00404544 loc_404544:                             ; CODE XREF: sub_4044B0+75↑j
.text:00404544                 add     edi, 8
.text:00404547                 cmp     edi, eax
.text:00404549                 jb      short loc_404520
.text:0040454B
.text:0040454B loc_40454B:                             ; CODE XREF: sub_4044B0+29↑j
.text:0040454B                                         ; sub_4044B0+60↑j
.text:0040454B                 mov     ebx, [ebp+24h]
.text:0040454E                 test    ebx, ebx
.text:00404550                 jz      short loc_404571
.text:00404552                 lea     esi, [esi+0]
.text:00404559                 lea     edi, [edi+0]
.text:00404560
.text:00404560 loc_404560:                             ; CODE XREF: sub_4044B0+BF↓j
.text:00404560                 mov     edi, [ebx+4]
.text:00404563                 mov     [esp+1Ch+Block], ebx ; Block
.text:00404566                 call    free
.text:0040456B                 test    edi, edi
.text:0040456D                 mov     ebx, edi
.text:0040456F                 jnz     short loc_404560
.text:00404571
.text:00404571 loc_404571:                             ; CODE XREF: sub_4044B0+A0↑j
.text:00404571                 mov     ebx, [ebp+0]
.text:00404574                 mov     [esp+1Ch+Block], ebx ; Block
.text:00404577                 call    free
.text:0040457C                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:00404580                 add     esp, 0Ch
.text:00404583                 pop     ebx
.text:00404584                 pop     esi
.text:00404585                 pop     edi
.text:00404586                 pop     ebp
.text:00404587                 jmp     free
.text:0040458C ; ---------------------------------------------------------------------------
.text:0040458C
.text:0040458C loc_40458C:                             ; CODE XREF: sub_4044B0+10↑j
.text:0040458C                                         ; sub_4044B0+1B↑j
.text:0040458C                 mov     edx, [ebp+0]
.text:0040458F                 mov     eax, [ebp+4]
.text:00404592                 jmp     loc_40450C
.text:00404592 sub_4044B0      endp
.text:00404592
.text:00404592 ; ---------------------------------------------------------------------------
.text:00404597                 align 10h
.text:004045A0
.text:004045A0 ; =============== S U B R O U T I N E =======================================
.text:004045A0
.text:004045A0
.text:004045A0 sub_4045A0      proc near               ; CODE XREF: sub_404720+1B2↓p
.text:004045A0
.text:004045A0 Block           = dword ptr -2Ch
.text:004045A0 var_28          = dword ptr -28h
.text:004045A0 var_24          = dword ptr -24h
.text:004045A0 var_20          = dword ptr -20h
.text:004045A0 var_1C          = dword ptr -1Ch
.text:004045A0 var_18          = dword ptr -18h
.text:004045A0 var_14          = dword ptr -14h
.text:004045A0 arg_0           = dword ptr  4
.text:004045A0 arg_4           = dword ptr  8
.text:004045A0
.text:004045A0                 push    ebp
.text:004045A1                 push    edi
.text:004045A2                 push    esi
.text:004045A3                 push    ebx
.text:004045A4                 sub     esp, 1Ch
.text:004045A7                 mov     ebx, [esp+2Ch+arg_0]
.text:004045AB                 mov     edi, [ebx+20h]
.text:004045AE                 mov     [esp+2Ch+var_1C], edi
.text:004045B2                 mov     esi, [ebx+1Ch]
.text:004045B5                 mov     [esp+2Ch+var_20], esi
.text:004045B9                 mov     edx, [ebx+18h]
.text:004045BC                 mov     [esp+2Ch+var_24], edx
.text:004045C0                 mov     ecx, [ebx+14h]
.text:004045C3                 mov     edx, [esp+2Ch+arg_4]
.text:004045C7                 mov     [esp+2Ch+var_28], ecx
.text:004045CB                 mov     [esp+2Ch+Block], edx
.text:004045CE                 call    sub_4041D0
.text:004045D3                 mov     edi, eax
.text:004045D5                 xor     eax, eax
.text:004045D7                 test    edi, edi
.text:004045D9                 jz      loc_4046A2
.text:004045DF                 mov     ebp, [esp+2Ch+arg_0]
.text:004045E3                 mov     edx, [ebp+0]
.text:004045E6                 mov     eax, [ebp+4]
.text:004045E9                 mov     ecx, [ebp+24h]
.text:004045EC                 mov     [esp+2Ch+var_14], edx
.text:004045F0                 cmp     edx, eax
.text:004045F2                 mov     [edi+24h], ecx
.text:004045F5                 jnb     short loc_40466D
.text:004045F7                 mov     esi, esi
.text:004045F9                 lea     edi, [edi+0]
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_4045A0+C5↓j
.text:00404600                 mov     edx, [esp+2Ch+var_14]
.text:00404604                 mov     ebx, [edx]
.text:00404606                 test    ebx, ebx
.text:00404608                 jz      short loc_40465C
.text:0040460A                 mov     ebx, edx
.text:0040460C                 lea     esi, [esi+0]
.text:00404610
.text:00404610 loc_404610:                             ; CODE XREF: sub_4045A0+B3↓j
.text:00404610                 mov     ebp, [ebx]
.text:00404612                 mov     edx, [edi+8]
.text:00404615                 mov     [esp+2Ch+Block], ebp
.text:00404618                 mov     [esp+2Ch+var_28], edx
.text:0040461C                 call    dword ptr [edi+18h]
.text:0040461F                 mov     ecx, [edi]
.text:00404621                 lea     esi, [ecx+eax*8]
.text:00404624                 cmp     esi, [edi+4]
.text:00404627                 jnb     loc_404703
.text:0040462D                 mov     ecx, [esi]
.text:0040462F                 mov     eax, [ebx+4]
.text:00404632                 test    ecx, ecx
.text:00404634                 mov     [esp+2Ch+var_18], eax
.text:00404638                 jz      loc_4046E0
.text:0040463E                 cmp     ebx, [esp+2Ch+var_14]
.text:00404642                 jz      short loc_4046AA
.text:00404644                 mov     edx, [esi+4]
.text:00404647                 mov     [ebx+4], edx
.text:0040464A                 mov     [esi+4], ebx
.text:0040464D
.text:0040464D loc_40464D:                             ; CODE XREF: sub_4045A0+12A↓j
.text:0040464D                                         ; sub_4045A0+149↓j ...
.text:0040464D                 mov     ebx, [esp+2Ch+var_18]
.text:00404651                 test    ebx, ebx
.text:00404653                 jnz     short loc_404610
.text:00404655                 mov     ecx, [esp+2Ch+arg_0]
.text:00404659                 mov     eax, [ecx+4]
.text:0040465C
.text:0040465C loc_40465C:                             ; CODE XREF: sub_4045A0+68↑j
.text:0040465C                 add     [esp+2Ch+var_14], 8
.text:00404661                 cmp     [esp+2Ch+var_14], eax
.text:00404665                 jb      short loc_404600
.text:00404667                 mov     eax, [esp+2Ch+arg_0]
.text:0040466B                 mov     edx, [eax]
.text:0040466D
.text:0040466D loc_40466D:                             ; CODE XREF: sub_4045A0+55↑j
.text:0040466D                 mov     [esp+2Ch+Block], edx ; Block
.text:00404670                 call    free
.text:00404675                 mov     ebx, [esp+2Ch+arg_0]
.text:00404679                 mov     ebp, [edi]
.text:0040467B                 mov     ecx, [edi+4]
.text:0040467E                 mov     esi, [edi+8]
.text:00404681                 mov     edx, [edi+0Ch]
.text:00404684                 mov     [ebx], ebp
.text:00404686                 mov     ebp, [edi+24h]
.text:00404689                 mov     [ebx+4], ecx
.text:0040468C                 mov     [ebx+8], esi
.text:0040468F                 mov     [ebx+0Ch], edx
.text:00404692                 mov     [ebx+24h], ebp
.text:00404695                 mov     [esp+2Ch+Block], edi ; Block
.text:00404698                 call    free
.text:0040469D                 mov     eax, 1
.text:004046A2
.text:004046A2 loc_4046A2:                             ; CODE XREF: sub_4045A0+39↑j
.text:004046A2                                         ; sub_4045A0+11D↓j
.text:004046A2                 add     esp, 1Ch
.text:004046A5                 pop     ebx
.text:004046A6                 pop     esi
.text:004046A7                 pop     edi
.text:004046A8                 pop     ebp
.text:004046A9                 retn
.text:004046AA ; ---------------------------------------------------------------------------
.text:004046AA
.text:004046AA loc_4046AA:                             ; CODE XREF: sub_4045A0+A2↑j
.text:004046AA                 mov     eax, [edi+24h]
.text:004046AD                 test    eax, eax
.text:004046AF                 jz      short loc_4046CC
.text:004046B1                 mov     ebx, [eax+4]
.text:004046B4                 mov     edx, eax
.text:004046B6                 mov     [edi+24h], ebx
.text:004046B9
.text:004046B9 loc_4046B9:                             ; CODE XREF: sub_4045A0+13A↓j
.text:004046B9                 xor     eax, eax
.text:004046BB                 test    edx, edx
.text:004046BD                 jz      short loc_4046A2
.text:004046BF                 mov     [edx], ebp
.text:004046C1                 mov     ebp, [esi+4]
.text:004046C4                 mov     [edx+4], ebp
.text:004046C7                 mov     [esi+4], edx
.text:004046CA                 jmp     short loc_40464D
.text:004046CC ; ---------------------------------------------------------------------------
.text:004046CC
.text:004046CC loc_4046CC:                             ; CODE XREF: sub_4045A0+10F↑j
.text:004046CC                 mov     [esp+2Ch+Block], 8 ; Size
.text:004046D3                 call    malloc
.text:004046D8                 mov     edx, eax
.text:004046DA                 jmp     short loc_4046B9
.text:004046DA ; ---------------------------------------------------------------------------
.text:004046DC                 align 10h
.text:004046E0
.text:004046E0 loc_4046E0:                             ; CODE XREF: sub_4045A0+98↑j
.text:004046E0                 inc     dword ptr [edi+0Ch]
.text:004046E3                 cmp     ebx, [esp+2Ch+var_14]
.text:004046E7                 mov     [esi], ebp
.text:004046E9                 jz      loc_40464D
.text:004046EF                 mov     dword ptr [ebx], 0
.text:004046F5                 mov     esi, [edi+24h]
.text:004046F8                 mov     [ebx+4], esi
.text:004046FB                 mov     [edi+24h], ebx
.text:004046FE                 jmp     loc_40464D
.text:00404703 ; ---------------------------------------------------------------------------
.text:00404703
.text:00404703 loc_404703:                             ; CODE XREF: sub_4045A0+87↑j
.text:00404703                 call    abort
.text:00404703 sub_4045A0      endp
.text:00404703
.text:00404703 ; ---------------------------------------------------------------------------
.text:00404708 flt_404708      dd 0.1                  ; DATA XREF: sub_404720+C3↓r
.text:0040470C flt_40470C      dd 4.2949673e9          ; DATA XREF: sub_404720:loc_404897↓r
.text:00404710 flt_404710      dd 0.89999998           ; DATA XREF: sub_404720+D6↓r
.text:00404714 flt_404714      dd 1.1                  ; DATA XREF: sub_404720+EA↓r
.text:00404718                 align 10h
.text:00404720
.text:00404720 ; =============== S U B R O U T I N E =======================================
.text:00404720
.text:00404720
.text:00404720 sub_404720      proc near               ; CODE XREF: sub_402570+1FA↑p
.text:00404720                                         ; sub_402570+21D↑p
.text:00404720
.text:00404720 var_34          = qword ptr -34h
.text:00404720 Size            = dword ptr -2Ch
.text:00404720 var_28          = dword ptr -28h
.text:00404720 var_24          = dword ptr -24h
.text:00404720 var_20          = dword ptr -20h
.text:00404720 var_1C          = qword ptr -1Ch
.text:00404720 var_14          = word ptr -14h
.text:00404720 var_12          = word ptr -12h
.text:00404720 var_10          = dword ptr -10h
.text:00404720 var_8           = dword ptr -8
.text:00404720 var_4           = dword ptr -4
.text:00404720 arg_0           = dword ptr  4
.text:00404720 arg_4           = dword ptr  8
.text:00404720
.text:00404720                 sub     esp, 2Ch
.text:00404723                 mov     [esp+2Ch+var_8], ebx
.text:00404727                 mov     ebx, [esp+2Ch+arg_4]
.text:0040472B                 mov     [esp+2Ch+var_4], esi
.text:0040472F                 mov     esi, [esp+2Ch+arg_0]
.text:00404733                 test    ebx, ebx
.text:00404735                 jz      loc_40490A
.text:0040473B                 mov     [esp+2Ch+var_20], 0
.text:00404743                 lea     edx, [esp+2Ch+var_10]
.text:00404747                 mov     [esp+2Ch+var_24], edx
.text:0040474B                 mov     [esp+2Ch+var_28], ebx
.text:0040474F                 mov     [esp+2Ch+Size], esi
.text:00404752                 call    sub_404F80
.text:00404757                 test    eax, eax
.text:00404759                 jz      short loc_404767
.text:0040475B
.text:0040475B loc_40475B:                             ; CODE XREF: sub_404720+64↓j
.text:0040475B                                         ; sub_404720+7A↓j ...
.text:0040475B                 mov     ebx, [esp+2Ch+var_8]
.text:0040475F                 mov     esi, [esp+2Ch+var_4]
.text:00404763                 add     esp, 2Ch
.text:00404766                 retn
.text:00404767 ; ---------------------------------------------------------------------------
.text:00404767
.text:00404767 loc_404767:                             ; CODE XREF: sub_404720+39↑j
.text:00404767                 mov     eax, [esp+2Ch+var_10]
.text:0040476B                 mov     ecx, [eax]
.text:0040476D                 test    ecx, ecx
.text:0040476F                 jz      short loc_4047AC
.text:00404771                 mov     eax, [esi+24h]
.text:00404774                 test    eax, eax
.text:00404776                 jz      short loc_40479C
.text:00404778                 mov     edx, [eax+4]
.text:0040477B                 mov     ecx, eax
.text:0040477D                 mov     [esi+24h], edx
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_404720+8A↓j
.text:00404780                 xor     eax, eax
.text:00404782                 test    ecx, ecx
.text:00404784                 jz      short loc_40475B
.text:00404786                 inc     dword ptr [esi+10h]
.text:00404789                 mov     edx, [esp+2Ch+var_10]
.text:0040478D                 mov     [ecx], ebx
.text:0040478F                 mov     eax, [edx+4]
.text:00404792                 mov     [ecx+4], eax
.text:00404795                 mov     [edx+4], ecx
.text:00404798
.text:00404798 loc_404798:                             ; CODE XREF: sub_404720+1C2↓j
.text:00404798                                         ; sub_404720+1D8↓j
.text:00404798                 mov     eax, ebx
.text:0040479A                 jmp     short loc_40475B
.text:0040479C ; ---------------------------------------------------------------------------
.text:0040479C
.text:0040479C loc_40479C:                             ; CODE XREF: sub_404720+56↑j
.text:0040479C                 mov     [esp+2Ch+Size], 8 ; Size
.text:004047A3                 call    malloc
.text:004047A8                 mov     ecx, eax
.text:004047AA                 jmp     short loc_404780
.text:004047AC ; ---------------------------------------------------------------------------
.text:004047AC
.text:004047AC loc_4047AC:                             ; CODE XREF: sub_404720+4F↑j
.text:004047AC                 inc     dword ptr [esi+0Ch]
.text:004047AF                 xor     edx, edx
.text:004047B1                 mov     [eax], ebx
.text:004047B3                 xor     eax, eax
.text:004047B5                 mov     ecx, [esi+0Ch]
.text:004047B8                 inc     dword ptr [esi+10h]
.text:004047BB                 push    eax
.text:004047BC                 push    ecx
.text:004047BD                 mov     eax, [esi+8]
.text:004047C0                 mov     ecx, [esi+14h]
.text:004047C3                 fild    [esp+34h+var_34]
.text:004047C6                 add     esp, 8
.text:004047C9                 push    edx
.text:004047CA                 push    eax
.text:004047CB                 fild    [esp+34h+var_34]
.text:004047CE                 add     esp, 8
.text:004047D1                 fld     dword ptr [ecx+8]
.text:004047D4                 fmul    st(1), st
.text:004047D6                 fxch    st(2)
.text:004047D8                 fucompp
.text:004047DA                 fnstsw  ax
.text:004047DC                 sahf
.text:004047DD                 jbe     loc_4048F6
.text:004047E3                 fld     ds:flt_404708
.text:004047E9                 fxch    st(1)
.text:004047EB                 fucom   st(1)
.text:004047ED                 fnstsw  ax
.text:004047EF                 sahf
.text:004047F0                 jbe     loc_4048FD
.text:004047F6                 fld     ds:flt_404710
.text:004047FC                 fucomp  st(1)
.text:004047FE                 fnstsw  ax
.text:00404800                 sahf
.text:00404801                 jbe     loc_4048FD
.text:00404807                 fld     dword ptr [ecx+0Ch]
.text:0040480A                 fld     ds:flt_404714
.text:00404810                 fxch    st(1)
.text:00404812                 fucompp
.text:00404814                 fnstsw  ax
.text:00404816                 sahf
.text:00404817                 jbe     loc_4048FD
.text:0040481D                 fld     dword ptr [ecx]
.text:0040481F                 fldz
.text:00404821                 fxch    st(1)
.text:00404823                 fucom   st(1)
.text:00404825                 fnstsw  ax
.text:00404827                 fstp    st(1)
.text:00404829                 sahf
.text:0040482A                 jb      loc_404906
.text:00404830                 faddp   st(2), st
.text:00404832                 fld     dword ptr [ecx+4]
.text:00404835                 fucom   st(2)
.text:00404837                 fnstsw  ax
.text:00404839                 sahf
.text:0040483A                 jbe     loc_404906
.text:00404840                 fld1
.text:00404842                 fucompp
.text:00404844                 fnstsw  ax
.text:00404846                 sahf
.text:00404847                 jb      loc_4048FD
.text:0040484D                 fucompp
.text:0040484F                 fnstsw  ax
.text:00404851                 sahf
.text:00404852                 ja      short loc_404860
.text:00404854
.text:00404854 loc_404854:                             ; CODE XREF: sub_404720+1E1↓j
.text:00404854                 mov     dword ptr [esi+14h], offset dword_4041A0
.text:0040485B                 mov     ecx, offset dword_4041A0
.text:00404860
.text:00404860 loc_404860:                             ; CODE XREF: sub_404720+132↑j
.text:00404860                 mov     eax, [esi+0Ch]
.text:00404863                 xor     edx, edx
.text:00404865                 push    edx
.text:00404866                 xor     edx, edx
.text:00404868                 push    eax
.text:00404869                 mov     eax, [esi+8]
.text:0040486C                 fild    [esp+34h+var_34]
.text:0040486F                 add     esp, 8
.text:00404872                 push    edx
.text:00404873                 push    eax
.text:00404874                 fild    [esp+34h+var_34]
.text:00404877                 add     esp, 8
.text:0040487A                 fld     dword ptr [ecx+8]
.text:0040487D                 fld     st
.text:0040487F                 fmul    st, st(2)
.text:00404881                 fxch    st(3)
.text:00404883                 fucomp  st(3)
.text:00404885                 fnstsw  ax
.text:00404887                 fstp    st(2)
.text:00404889                 sahf
.text:0040488A                 jbe     short loc_4048F4
.text:0040488C                 cmp     byte ptr [ecx+10h], 0
.text:00404890                 fmul    dword ptr [ecx+0Ch]
.text:00404893                 jnz     short loc_4048F0
.text:00404895                 fmulp   st(1), st
.text:00404897
.text:00404897 loc_404897:                             ; CODE XREF: sub_404720+1D2↓j
.text:00404897                 fld     ds:flt_40470C
.text:0040489D                 fxch    st(1)
.text:0040489F                 fucom   st(1)
.text:004048A1                 fnstsw  ax
.text:004048A3                 fstp    st(1)
.text:004048A5                 sahf
.text:004048A6                 jnb     short loc_4048E7
.text:004048A8                 fnstcw  [esp+2Ch+var_12]
.text:004048AC                 movzx   edx, [esp+2Ch+var_12]
.text:004048B1                 mov     [esp+2Ch+Size], esi
.text:004048B4                 or      dx, 0C00h
.text:004048B9                 mov     [esp+2Ch+var_14], dx
.text:004048BE                 fldcw   [esp+2Ch+var_14]
.text:004048C2                 fistp   [esp+2Ch+var_1C]
.text:004048C6                 fldcw   [esp+2Ch+var_12]
.text:004048CA                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:004048CE                 mov     [esp+2Ch+var_28], ecx
.text:004048D2                 call    sub_4045A0
.text:004048D7                 test    al, al
.text:004048D9                 setz    dl
.text:004048DC                 movzx   esi, dl
.text:004048DF                 dec     esi
.text:004048E0                 and     ebx, esi
.text:004048E2                 jmp     loc_404798
.text:004048E7 ; ---------------------------------------------------------------------------
.text:004048E7
.text:004048E7 loc_4048E7:                             ; CODE XREF: sub_404720+186↑j
.text:004048E7                 fstp    st
.text:004048E9                 xor     eax, eax
.text:004048EB                 jmp     loc_40475B
.text:004048F0 ; ---------------------------------------------------------------------------
.text:004048F0
.text:004048F0 loc_4048F0:                             ; CODE XREF: sub_404720+173↑j
.text:004048F0                 fstp    st(1)
.text:004048F2                 jmp     short loc_404897
.text:004048F4 ; ---------------------------------------------------------------------------
.text:004048F4
.text:004048F4 loc_4048F4:                             ; CODE XREF: sub_404720+16A↑j
.text:004048F4                 fstp    st
.text:004048F6
.text:004048F6 loc_4048F6:                             ; CODE XREF: sub_404720+BD↑j
.text:004048F6                 fstp    st
.text:004048F8                 jmp     loc_404798
.text:004048FD ; ---------------------------------------------------------------------------
.text:004048FD
.text:004048FD loc_4048FD:                             ; CODE XREF: sub_404720+D0↑j
.text:004048FD                                         ; sub_404720+E1↑j ...
.text:004048FD                 fstp    st
.text:004048FF                 fstp    st
.text:00404901                 jmp     loc_404854
.text:00404906 ; ---------------------------------------------------------------------------
.text:00404906
.text:00404906 loc_404906:                             ; CODE XREF: sub_404720+10A↑j
.text:00404906                                         ; sub_404720+11A↑j
.text:00404906                 fstp    st
.text:00404908                 jmp     short loc_4048FD
.text:0040490A ; ---------------------------------------------------------------------------
.text:0040490A
.text:0040490A loc_40490A:                             ; CODE XREF: sub_404720+15↑j
.text:0040490A                 call    abort
.text:0040490A sub_404720      endp
.text:0040490A
.text:0040490A ; ---------------------------------------------------------------------------
.text:0040490F                 align 10h
.text:00404910                 mov     edx, [esp+4]
.text:00404914                 mov     eax, [edx+8]
.text:00404917                 retn
.text:00404917 ; ---------------------------------------------------------------------------
.text:00404918                 align 10h
.text:00404920                 mov     edx, [esp+4]
.text:00404924                 mov     eax, [edx+0Ch]
.text:00404927                 retn
.text:00404927 ; ---------------------------------------------------------------------------
.text:00404928                 align 10h
.text:00404930                 mov     edx, [esp+4]
.text:00404934                 mov     eax, [edx+10h]
.text:00404937                 retn
.text:00404937 ; ---------------------------------------------------------------------------
.text:00404938                 align 10h
.text:00404940                 push    esi
.text:00404941                 xor     esi, esi
.text:00404943                 push    ebx
.text:00404944                 mov     edx, [esp+0Ch]
.text:00404948                 mov     ecx, [edx]
.text:0040494A                 mov     ebx, [edx+4]
.text:0040494D                 cmp     ecx, ebx
.text:0040494F                 jnb     short loc_404997
.text:00404951                 jmp     short loc_404960
.text:00404951 ; ---------------------------------------------------------------------------
.text:00404953                 align 10h
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: .text:00404951↑j
.text:00404960                                         ; .text:00404995↓j
.text:00404960                 mov     edx, [ecx]
.text:00404962                 test    edx, edx
.text:00404964                 jz      short loc_404990
.text:00404966                 mov     eax, [ecx+4]
.text:00404969                 mov     edx, 1
.text:0040496E                 test    eax, eax
.text:00404970                 jz      short loc_404988
.text:00404972                 lea     esi, [esi+0]
.text:00404979                 lea     edi, [edi+0]
.text:00404980
.text:00404980 loc_404980:                             ; CODE XREF: .text:00404986↓j
.text:00404980                 mov     eax, [eax+4]
.text:00404983                 inc     edx
.text:00404984                 test    eax, eax
.text:00404986                 jnz     short loc_404980
.text:00404988
.text:00404988 loc_404988:                             ; CODE XREF: .text:00404970↑j
.text:00404988                 cmp     edx, esi
.text:0040498A                 jbe     short loc_404990
.text:0040498C                 mov     esi, edx
.text:0040498E                 mov     esi, esi
.text:00404990
.text:00404990 loc_404990:                             ; CODE XREF: .text:00404964↑j
.text:00404990                                         ; .text:0040498A↑j
.text:00404990                 add     ecx, 8
.text:00404993                 cmp     ecx, ebx
.text:00404995                 jb      short loc_404960
.text:00404997
.text:00404997 loc_404997:                             ; CODE XREF: .text:0040494F↑j
.text:00404997                 pop     ebx
.text:00404998                 mov     eax, esi
.text:0040499A                 pop     esi
.text:0040499B                 retn
.text:0040499B ; ---------------------------------------------------------------------------
.text:0040499C                 align 10h
.text:004049A0                 push    edi
.text:004049A1                 xor     ecx, ecx
.text:004049A3                 push    esi
.text:004049A4                 xor     esi, esi
.text:004049A6                 push    ebx
.text:004049A7                 mov     edi, [esp+10h]
.text:004049AB                 mov     edx, [edi]
.text:004049AD                 mov     ebx, [edi+4]
.text:004049B0                 cmp     edx, ebx
.text:004049B2                 jnb     short loc_4049DF
.text:004049B4                 lea     esi, [esi+0]
.text:004049BA                 lea     edi, [edi+0]
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: .text:004049DD↓j
.text:004049C0                 mov     eax, [edx]
.text:004049C2                 test    eax, eax
.text:004049C4                 jz      short loc_4049D8
.text:004049C6                 mov     eax, [edx+4]
.text:004049C9                 inc     esi
.text:004049CA                 inc     ecx
.text:004049CB                 test    eax, eax
.text:004049CD                 jz      short loc_4049D8
.text:004049CF                 nop
.text:004049D0
.text:004049D0 loc_4049D0:                             ; CODE XREF: .text:004049D6↓j
.text:004049D0                 mov     eax, [eax+4]
.text:004049D3                 inc     ecx
.text:004049D4                 test    eax, eax
.text:004049D6                 jnz     short loc_4049D0
.text:004049D8
.text:004049D8 loc_4049D8:                             ; CODE XREF: .text:004049C4↑j
.text:004049D8                                         ; .text:004049CD↑j
.text:004049D8                 add     edx, 8
.text:004049DB                 cmp     edx, ebx
.text:004049DD                 jb      short loc_4049C0
.text:004049DF
.text:004049DF loc_4049DF:                             ; CODE XREF: .text:004049B2↑j
.text:004049DF                 cmp     esi, [edi+0Ch]
.text:004049E2                 jz      short loc_4049EA
.text:004049E4
.text:004049E4 loc_4049E4:                             ; CODE XREF: .text:004049ED↓j
.text:004049E4                 xor     eax, eax
.text:004049E6
.text:004049E6 loc_4049E6:                             ; CODE XREF: .text:004049F4↓j
.text:004049E6                 pop     ebx
.text:004049E7                 pop     esi
.text:004049E8                 pop     edi
.text:004049E9                 retn
.text:004049EA ; ---------------------------------------------------------------------------
.text:004049EA
.text:004049EA loc_4049EA:                             ; CODE XREF: .text:004049E2↑j
.text:004049EA                 cmp     ecx, [edi+10h]
.text:004049ED                 jnz     short loc_4049E4
.text:004049EF                 mov     eax, 1
.text:004049F4                 jmp     short loc_4049E6
.text:004049F4 ; ---------------------------------------------------------------------------
.text:004049F6 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:004049F6                                         ; DATA XREF: .text:00404AEE↓o
.text:00404A0E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:00404A0E                                         ; DATA XREF: .text:00404B06↓o
.text:00404A26                 align 20h
.text:00404A40 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:00404A40                                         ; DATA XREF: .text:00404B40↓o
.text:00404A61 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:00404A61                                         ; DATA XREF: .text:00404B5A↓o
.text:00404A79                 db 8Dh, 76h, 0
.text:00404A7C flt_404A7C      dd 100.0                ; DATA XREF: .text:00404B33↓r
.text:00404A80 ; ---------------------------------------------------------------------------
.text:00404A80                 push    ebp
.text:00404A81                 push    edi
.text:00404A82                 push    esi
.text:00404A83                 xor     esi, esi
.text:00404A85                 push    ebx
.text:00404A86                 sub     esp, 1Ch
.text:00404A89                 mov     ebx, [esp+30h]
.text:00404A8D                 mov     edi, [esp+34h]
.text:00404A91                 mov     ecx, [ebx+10h]
.text:00404A94                 mov     eax, [ebx+0Ch]
.text:00404A97                 mov     ebp, [ebx+8]
.text:00404A9A                 mov     [esp+18h], ecx
.text:00404A9E                 mov     ecx, [ebx]
.text:00404AA0                 mov     [esp+14h], eax
.text:00404AA4                 mov     eax, [ebx+4]
.text:00404AA7                 cmp     ecx, eax
.text:00404AA9                 jnb     short loc_404AE7
.text:00404AAB                 mov     ebx, eax
.text:00404AAD                 lea     esi, [esi+0]
.text:00404AB0
.text:00404AB0 loc_404AB0:                             ; CODE XREF: .text:00404AE5↓j
.text:00404AB0                 mov     edx, [ecx]
.text:00404AB2                 test    edx, edx
.text:00404AB4                 jz      short loc_404AE0
.text:00404AB6                 mov     eax, [ecx+4]
.text:00404AB9                 mov     edx, 1
.text:00404ABE                 test    eax, eax
.text:00404AC0                 jz      short loc_404AD8
.text:00404AC2                 lea     esi, [esi+0]
.text:00404AC9                 lea     edi, [edi+0]
.text:00404AD0
.text:00404AD0 loc_404AD0:                             ; CODE XREF: .text:00404AD6↓j
.text:00404AD0                 mov     eax, [eax+4]
.text:00404AD3                 inc     edx
.text:00404AD4                 test    eax, eax
.text:00404AD6                 jnz     short loc_404AD0
.text:00404AD8
.text:00404AD8 loc_404AD8:                             ; CODE XREF: .text:00404AC0↑j
.text:00404AD8                 cmp     edx, esi
.text:00404ADA                 jbe     short loc_404AE0
.text:00404ADC                 mov     esi, edx
.text:00404ADE                 mov     esi, esi
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: .text:00404AB4↑j
.text:00404AE0                                         ; .text:00404ADA↑j
.text:00404AE0                 add     ecx, 8
.text:00404AE3                 cmp     ecx, ebx
.text:00404AE5                 jb      short loc_404AB0
.text:00404AE7
.text:00404AE7 loc_404AE7:                             ; CODE XREF: .text:00404AA9↑j
.text:00404AE7                 mov     [esp], edi
.text:00404AEA                 mov     edx, [esp+18h]
.text:00404AEE                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:00404AF6                 mov     [esp+8], edx
.text:00404AFA                 call    fprintf
.text:00404AFF                 mov     [esp+8], ebp
.text:00404B03                 mov     [esp], edi
.text:00404B06                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:00404B0E                 call    fprintf
.text:00404B13                 mov     ebx, [esp+14h]
.text:00404B17                 xor     eax, eax
.text:00404B19                 mov     ecx, ebp
.text:00404B1B                 push    eax
.text:00404B1C                 xor     ebp, ebp
.text:00404B1E                 push    ebx
.text:00404B1F                 fild    qword ptr [esp]
.text:00404B22                 add     esp, 8
.text:00404B25                 push    ebp
.text:00404B26                 push    ecx
.text:00404B27                 fild    qword ptr [esp]
.text:00404B2A                 fxch    st(1)
.text:00404B2C                 add     esp, 8
.text:00404B2F                 mov     ebx, [esp+14h]
.text:00404B33                 fmul    ds:flt_404A7C
.text:00404B39                 mov     [esp], edi
.text:00404B3C                 mov     [esp+8], ebx
.text:00404B40                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00404B48                 fdivrp  st(1), st
.text:00404B4A                 fstp    qword ptr [esp+0Ch]
.text:00404B4E                 call    fprintf
.text:00404B53                 mov     [esp+8], esi
.text:00404B57                 mov     [esp], edi
.text:00404B5A                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00404B62                 call    fprintf
.text:00404B67                 add     esp, 1Ch
.text:00404B6A                 pop     ebx
.text:00404B6B                 pop     esi
.text:00404B6C                 pop     edi
.text:00404B6D                 pop     ebp
.text:00404B6E                 retn
.text:00404B6E ; ---------------------------------------------------------------------------
.text:00404B6F                 align 10h
.text:00404B70
.text:00404B70 ; =============== S U B R O U T I N E =======================================
.text:00404B70
.text:00404B70
.text:00404B70 sub_404B70      proc near               ; CODE XREF: sub_402AE0+155↑p
.text:00404B70
.text:00404B70 var_1C          = dword ptr -1Ch
.text:00404B70 var_18          = dword ptr -18h
.text:00404B70 arg_0           = dword ptr  4
.text:00404B70 arg_4           = dword ptr  8
.text:00404B70
.text:00404B70                 push    edi
.text:00404B71                 push    esi
.text:00404B72                 push    ebx
.text:00404B73                 sub     esp, 10h
.text:00404B76                 mov     esi, [esp+1Ch+arg_0]
.text:00404B7A                 mov     edi, [esp+1Ch+arg_4]
.text:00404B7E                 mov     edx, [esi+8]
.text:00404B81                 mov     [esp+1Ch+var_1C], edi
.text:00404B84                 mov     [esp+1Ch+var_18], edx
.text:00404B88                 call    dword ptr [esi+18h]
.text:00404B8B                 mov     ecx, [esi]
.text:00404B8D                 lea     eax, [ecx+eax*8]
.text:00404B90                 cmp     eax, [esi+4]
.text:00404B93                 jnb     short loc_404BD4
.text:00404B95                 mov     ecx, [eax]
.text:00404B97                 test    ecx, ecx
.text:00404B99                 jz      short loc_404BC7
.text:00404B9B                 test    eax, eax
.text:00404B9D                 mov     ebx, eax
.text:00404B9F                 jz      short loc_404BC7
.text:00404BA1                 jmp     short loc_404BB0
.text:00404BA1 ; ---------------------------------------------------------------------------
.text:00404BA3                 align 10h
.text:00404BB0
.text:00404BB0 loc_404BB0:                             ; CODE XREF: sub_404B70+31↑j
.text:00404BB0                                         ; sub_404B70+55↓j
.text:00404BB0                 mov     edx, [ebx]
.text:00404BB2                 mov     [esp+1Ch+var_1C], edi
.text:00404BB5                 mov     [esp+1Ch+var_18], edx
.text:00404BB9                 call    dword ptr [esi+1Ch]
.text:00404BBC                 test    al, al
.text:00404BBE                 jnz     short loc_404BD0
.text:00404BC0                 mov     ebx, [ebx+4]
.text:00404BC3                 test    ebx, ebx
.text:00404BC5                 jnz     short loc_404BB0
.text:00404BC7
.text:00404BC7 loc_404BC7:                             ; CODE XREF: sub_404B70+29↑j
.text:00404BC7                                         ; sub_404B70+2F↑j
.text:00404BC7                 xor     eax, eax
.text:00404BC9
.text:00404BC9 loc_404BC9:                             ; CODE XREF: sub_404B70+62↓j
.text:00404BC9                 add     esp, 10h
.text:00404BCC                 pop     ebx
.text:00404BCD                 pop     esi
.text:00404BCE                 pop     edi
.text:00404BCF                 retn
.text:00404BD0 ; ---------------------------------------------------------------------------
.text:00404BD0
.text:00404BD0 loc_404BD0:                             ; CODE XREF: sub_404B70+4E↑j
.text:00404BD0                 mov     eax, [ebx]
.text:00404BD2                 jmp     short loc_404BC9
.text:00404BD4 ; ---------------------------------------------------------------------------
.text:00404BD4
.text:00404BD4 loc_404BD4:                             ; CODE XREF: sub_404B70+23↑j
.text:00404BD4                 call    abort
.text:00404BD4 sub_404B70      endp
.text:00404BD4
.text:00404BD4 ; ---------------------------------------------------------------------------
.text:00404BD9                 align 10h
.text:00404BE0                 sub     esp, 0Ch
.text:00404BE3                 mov     eax, [esp+10h]
.text:00404BE7                 mov     edx, [eax+10h]
.text:00404BEA                 test    edx, edx
.text:00404BEC                 jz      short loc_404C13
.text:00404BEE                 mov     edx, [eax]
.text:00404BF0                 mov     ecx, [eax+4]
.text:00404BF3                 lea     esi, [esi+0]
.text:00404BF9                 lea     edi, [edi+0]
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: .text:00404C0D↓j
.text:00404C00                 cmp     edx, ecx
.text:00404C02                 jnb     short loc_404C17
.text:00404C04                 mov     eax, [edx]
.text:00404C06                 test    eax, eax
.text:00404C08                 jnz     short loc_404C0F
.text:00404C0A                 add     edx, 8
.text:00404C0D                 jmp     short loc_404C00
.text:00404C0F ; ---------------------------------------------------------------------------
.text:00404C0F
.text:00404C0F loc_404C0F:                             ; CODE XREF: .text:00404C08↑j
.text:00404C0F                                         ; .text:00404C15↓j
.text:00404C0F                 add     esp, 0Ch
.text:00404C12                 retn
.text:00404C13 ; ---------------------------------------------------------------------------
.text:00404C13
.text:00404C13 loc_404C13:                             ; CODE XREF: .text:00404BEC↑j
.text:00404C13                 xor     eax, eax
.text:00404C15                 jmp     short loc_404C0F
.text:00404C17 ; ---------------------------------------------------------------------------
.text:00404C17
.text:00404C17 loc_404C17:                             ; CODE XREF: .text:00404C02↑j
.text:00404C17                 call    abort
.text:00404C17 ; ---------------------------------------------------------------------------
.text:00404C1C                 align 10h
.text:00404C20                 push    esi
.text:00404C21                 push    ebx
.text:00404C22                 sub     esp, 14h
.text:00404C25                 mov     ebx, [esp+20h]
.text:00404C29                 mov     esi, [esp+24h]
.text:00404C2D                 mov     edx, [ebx+8]
.text:00404C30                 mov     [esp], esi
.text:00404C33                 mov     [esp+4], edx
.text:00404C37                 call    dword ptr [ebx+18h]
.text:00404C3A                 mov     ecx, [ebx]
.text:00404C3C                 lea     edx, [ecx+eax*8]
.text:00404C3F                 mov     ecx, [ebx+4]
.text:00404C42                 cmp     edx, ecx
.text:00404C44                 jnb     short loc_404C90
.text:00404C46                 test    edx, edx
.text:00404C48                 mov     eax, edx
.text:00404C4A                 jz      short loc_404C5B
.text:00404C4C                 lea     esi, [esi+0]
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: .text:00404C59↓j
.text:00404C50                 cmp     [eax], esi
.text:00404C52                 jz      short loc_404C85
.text:00404C54                 mov     eax, [eax+4]
.text:00404C57
.text:00404C57 loc_404C57:                             ; CODE XREF: .text:00404C8A↓j
.text:00404C57                 test    eax, eax
.text:00404C59                 jnz     short loc_404C50
.text:00404C5B
.text:00404C5B loc_404C5B:                             ; CODE XREF: .text:00404C4A↑j
.text:00404C5B                 add     edx, 8
.text:00404C5E                 cmp     edx, ecx
.text:00404C60                 jnb     short loc_404C7D
.text:00404C62                 lea     esi, [esi+0]
.text:00404C69                 lea     edi, [edi+0]
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: .text:00404C7B↓j
.text:00404C70                 mov     eax, [edx]
.text:00404C72                 test    eax, eax
.text:00404C74                 jnz     short loc_404C7F
.text:00404C76                 add     edx, 8
.text:00404C79                 cmp     edx, ecx
.text:00404C7B                 jb      short loc_404C70
.text:00404C7D
.text:00404C7D loc_404C7D:                             ; CODE XREF: .text:00404C60↑j
.text:00404C7D                 xor     eax, eax
.text:00404C7F
.text:00404C7F loc_404C7F:                             ; CODE XREF: .text:00404C74↑j
.text:00404C7F                                         ; .text:00404C8E↓j
.text:00404C7F                 add     esp, 14h
.text:00404C82                 pop     ebx
.text:00404C83                 pop     esi
.text:00404C84                 retn
.text:00404C85 ; ---------------------------------------------------------------------------
.text:00404C85
.text:00404C85 loc_404C85:                             ; CODE XREF: .text:00404C52↑j
.text:00404C85                 mov     eax, [eax+4]
.text:00404C88                 test    eax, eax
.text:00404C8A                 jz      short loc_404C57
.text:00404C8C                 mov     eax, [eax]
.text:00404C8E                 jmp     short loc_404C7F
.text:00404C90 ; ---------------------------------------------------------------------------
.text:00404C90
.text:00404C90 loc_404C90:                             ; CODE XREF: .text:00404C44↑j
.text:00404C90                 call    abort
.text:00404C90 ; ---------------------------------------------------------------------------
.text:00404C95                 align 10h
.text:00404CA0                 push    ebp
.text:00404CA1                 xor     ecx, ecx
.text:00404CA3                 push    edi
.text:00404CA4                 push    esi
.text:00404CA5                 push    ebx
.text:00404CA6                 mov     edx, [esp+14h]
.text:00404CAA                 mov     ebp, [esp+18h]
.text:00404CAE                 mov     edi, [esp+1Ch]
.text:00404CB2                 mov     ebx, [edx]
.text:00404CB4                 mov     esi, [edx+4]
.text:00404CB7                 cmp     ebx, esi
.text:00404CB9                 jnb     short loc_404CF0
.text:00404CBB                 nop
.text:00404CBC                 lea     esi, [esi+0]
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: .text:00404CE7↓j
.text:00404CC0                 mov     edx, [ebx]
.text:00404CC2                 test    edx, edx
.text:00404CC4                 jz      short loc_404CE2
.text:00404CC6                 mov     edx, ebx
.text:00404CC8                 nop
.text:00404CC9                 lea     esi, [esi+0]
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: .text:00404CE0↓j
.text:00404CD0                 cmp     ecx, edi
.text:00404CD2                 jnb     short loc_404CF0
.text:00404CD4                 mov     eax, [edx]
.text:00404CD6                 mov     edx, [edx+4]
.text:00404CD9                 mov     [ebp+ecx*4+0], eax
.text:00404CDD                 inc     ecx
.text:00404CDE                 test    edx, edx
.text:00404CE0                 jnz     short loc_404CD0
.text:00404CE2
.text:00404CE2 loc_404CE2:                             ; CODE XREF: .text:00404CC4↑j
.text:00404CE2                 add     ebx, 8
.text:00404CE5                 cmp     ebx, esi
.text:00404CE7                 jb      short loc_404CC0
.text:00404CE9                 lea     esi, [esi+0]
.text:00404CF0
.text:00404CF0 loc_404CF0:                             ; CODE XREF: .text:00404CB9↑j
.text:00404CF0                                         ; .text:00404CD2↑j
.text:00404CF0                 pop     ebx
.text:00404CF1                 mov     eax, ecx
.text:00404CF3                 pop     esi
.text:00404CF4                 pop     edi
.text:00404CF5                 pop     ebp
.text:00404CF6                 retn
.text:00404CF6 ; ---------------------------------------------------------------------------
.text:00404CF7                 align 10h
.text:00404D00                 push    ebp
.text:00404D01                 push    edi
.text:00404D02                 xor     edi, edi
.text:00404D04                 push    esi
.text:00404D05                 push    ebx
.text:00404D06                 sub     esp, 0Ch
.text:00404D09                 mov     edx, [esp+20h]
.text:00404D0D                 mov     ebp, [esp+28h]
.text:00404D11                 mov     esi, [edx]
.text:00404D13                 mov     eax, [edx+4]
.text:00404D16                 cmp     esi, eax
.text:00404D18                 jnb     short loc_404D60
.text:00404D1A                 lea     esi, [esi+0]
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: .text:00404D55↓j
.text:00404D20                 mov     ecx, [esi]
.text:00404D22                 test    ecx, ecx
.text:00404D24                 jz      short loc_404D50
.text:00404D26                 mov     ebx, esi
.text:00404D28                 nop
.text:00404D29                 lea     esi, [esi+0]
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: .text:00404D47↓j
.text:00404D30                 mov     [esp+4], ebp
.text:00404D34                 mov     edx, [ebx]
.text:00404D36                 mov     [esp], edx
.text:00404D39                 call    dword ptr [esp+24h]
.text:00404D3D                 test    al, al
.text:00404D3F                 jz      short loc_404D60
.text:00404D41                 mov     ebx, [ebx+4]
.text:00404D44                 inc     edi
.text:00404D45                 test    ebx, ebx
.text:00404D47                 jnz     short loc_404D30
.text:00404D49                 mov     ebx, [esp+20h]
.text:00404D4D                 mov     eax, [ebx+4]
.text:00404D50
.text:00404D50 loc_404D50:                             ; CODE XREF: .text:00404D24↑j
.text:00404D50                 add     esi, 8
.text:00404D53                 cmp     esi, eax
.text:00404D55                 jb      short loc_404D20
.text:00404D57                 mov     esi, esi
.text:00404D59                 lea     edi, [edi+0]
.text:00404D60
.text:00404D60 loc_404D60:                             ; CODE XREF: .text:00404D18↑j
.text:00404D60                                         ; .text:00404D3F↑j
.text:00404D60                 add     esp, 0Ch
.text:00404D63                 mov     eax, edi
.text:00404D65                 pop     ebx
.text:00404D66                 pop     esi
.text:00404D67                 pop     edi
.text:00404D68                 pop     ebp
.text:00404D69                 retn
.text:00404D69 ; ---------------------------------------------------------------------------
.text:00404D6A                 align 10h
.text:00404D70                 push    esi
.text:00404D71                 push    ebx
.text:00404D72                 mov     ecx, [esp+0Ch]
.text:00404D76                 xor     ebx, ebx
.text:00404D78                 mov     esi, [esp+10h]
.text:00404D7C                 movzx   edx, byte ptr [ecx]
.text:00404D7F                 test    dl, dl
.text:00404D81                 jz      short loc_404DAA
.text:00404D83                 lea     esi, [esi+0]
.text:00404D89                 lea     edi, [edi+0]
.text:00404D90
.text:00404D90 loc_404D90:                             ; CODE XREF: .text:00404DA8↓j
.text:00404D90                 mov     eax, ebx
.text:00404D92                 inc     ecx
.text:00404D93                 shl     eax, 5
.text:00404D96                 sub     eax, ebx
.text:00404D98                 movzx   ebx, dl
.text:00404D9B                 add     eax, ebx
.text:00404D9D                 xor     edx, edx
.text:00404D9F                 div     esi
.text:00404DA1                 mov     ebx, edx
.text:00404DA3                 movzx   edx, byte ptr [ecx]
.text:00404DA6                 test    dl, dl
.text:00404DA8                 jnz     short loc_404D90
.text:00404DAA
.text:00404DAA loc_404DAA:                             ; CODE XREF: .text:00404D81↑j
.text:00404DAA                 mov     eax, ebx
.text:00404DAC                 pop     ebx
.text:00404DAD                 pop     esi
.text:00404DAE                 retn
.text:00404DAE ; ---------------------------------------------------------------------------
.text:00404DAF                 align 10h
.text:00404DB0                 mov     ecx, [esp+4]
.text:00404DB4                 mov     edx, ds:dword_4041A0
.text:00404DBA                 mov     [ecx], edx
.text:00404DBC                 mov     edx, ds:dword_4041A4
.text:00404DC2                 mov     [ecx+4], edx
.text:00404DC5                 mov     edx, ds:dword_4041A4+4
.text:00404DCB                 mov     [ecx+8], edx
.text:00404DCE                 mov     edx, ds:dword_4041A4+8
.text:00404DD4                 mov     [ecx+0Ch], edx
.text:00404DD7                 mov     edx, ds:dword_4041A4+0Ch
.text:00404DDD                 mov     [ecx+10h], edx
.text:00404DE0                 retn
.text:00404DE0 ; ---------------------------------------------------------------------------
.text:00404DE1                 align 4
.text:00404DE4                 dd 3DCCCCCDh, 3F666666h, 3F8CCCCDh, 0EC835356h, 24548D24h
.text:00404DE4                 dd 2454891Ch, 245C8B08h, 24548B30h, 2444C734h, 10Ch, 241C8900h
.text:00404DE4                 dd 4245489h, 167E8h, 31C68900h, 0FF685C0h, 12D84h, 104BFF00h
.text:00404DE4                 dd 1C244C8Bh, 0D285118Bh, 11A850Fh, 4BFF0000h, 31C0310Ch
.text:00404DE4                 dd 0C4B8BD2h, 438B5150h, 144B8B08h, 83242CDFh, 505208C4h
.text:00404DE4                 dd 83242CDFh, 1D908C4h, 0C9D9C9DCh, 0E0DFEADDh, 0F9ED9DDh
.text:00404DE4                 dd 0F786h, 0E405D900h, 0D900404Dh, 0E1DD0841h, 0F9EE0DFh
.text:00404DE4                 dd 0F386h, 0E805D900h, 0DD00404Dh, 9EE0DFE9h, 0E2860Fh
.text:00404DE4                 dd 41D90000h, 0EC05D90Ch, 0D900404Dh, 0DFE9DAC9h, 860F9EE0h
.text:00404DE4                 dd 0CCh, 0CBD9EED9h, 0E0DFE3DDh, 0F9EDBDDh, 0BB82h, 0DEC9D900h
.text:00404DE4                 dd 441D9C2h, 0E0DFE2DDh, 0A9860F9Eh, 0D9000000h, 0DFE9DAE8h
.text:00404DE4                 dd 820F9EE0h, 90h, 0E0DFE9DAh, 9011779Eh, 26748Dh, 0A01443C7h
.text:00404DE4                 dd 0B9004041h, 4041A0h, 310C438Bh, 0D23152D2h, 8438B50h
.text:00404DE4                 dd 83242CDFh, 505208C4h, 83242CDFh, 1D908C4h, 0EADDC9D8h
.text:00404DE4                 dd 0D9DDE0DFh, 804D769Eh, 74001079h, 449D83Fh, 1A247CD9h
.text:00404DE4                 dd 244CB70Fh, 241C891Ah, 0C98166h, 4C89660Ch, 6CD91824h
.text:00404DE4                 dd 7CDF1824h, 6CD91024h, 548B1A24h, 54891024h, 55E80424h
.text:00404DE4                 dd 90FFFFF6h, 26748Dh, 0C483F089h, 0C35E5B24h, 0D80449D8h
.text:00404DE4                 dd 0BCEB0849h, 0ECEBD8DDh, 0D8DDD8DDh, 0FFFF73E9h, 768DFFh
.text:00404DE4                 dd 0F0EBD8DDh, 0B68Dh, 0BF8D0000h, 0
.text:00404F80
.text:00404F80 ; =============== S U B R O U T I N E =======================================
.text:00404F80
.text:00404F80
.text:00404F80 sub_404F80      proc near               ; CODE XREF: sub_404720+32↑p
.text:00404F80
.text:00404F80 var_1C          = dword ptr -1Ch
.text:00404F80 var_18          = dword ptr -18h
.text:00404F80 var_D           = byte ptr -0Dh
.text:00404F80 arg_0           = dword ptr  4
.text:00404F80 arg_4           = dword ptr  8
.text:00404F80 arg_8           = dword ptr  0Ch
.text:00404F80 arg_C           = byte ptr  10h
.text:00404F80
.text:00404F80                 push    edi
.text:00404F81                 push    esi
.text:00404F82                 push    ebx
.text:00404F83                 sub     esp, 10h
.text:00404F86                 mov     esi, [esp+1Ch+arg_0]
.text:00404F8A                 movzx   ecx, [esp+1Ch+arg_C]
.text:00404F8F                 mov     edi, [esp+1Ch+arg_4]
.text:00404F93                 mov     edx, [esi+8]
.text:00404F96                 mov     [esp+1Ch+var_D], cl
.text:00404F9A                 mov     [esp+1Ch+var_18], edx
.text:00404F9E                 mov     [esp+1Ch+var_1C], edi
.text:00404FA1                 call    dword ptr [esi+18h]
.text:00404FA4                 mov     ecx, [esi]
.text:00404FA6                 lea     ebx, [ecx+eax*8]
.text:00404FA9                 cmp     ebx, [esi+4]
.text:00404FAC                 jnb     loc_405063
.text:00404FB2                 mov     edx, [esp+1Ch+arg_8]
.text:00404FB6                 xor     eax, eax
.text:00404FB8                 mov     [edx], ebx
.text:00404FBA                 mov     edx, [ebx]
.text:00404FBC                 test    edx, edx
.text:00404FBE                 jz      short loc_405002
.text:00404FC0                 mov     [esp+1Ch+var_18], edx
.text:00404FC4                 mov     [esp+1Ch+var_1C], edi
.text:00404FC7                 call    dword ptr [esi+1Ch]
.text:00404FCA                 test    al, al
.text:00404FCC                 jz      short loc_405011
.text:00404FCE                 cmp     [esp+1Ch+var_D], 0
.text:00404FD3                 mov     edi, [ebx]
.text:00404FD5                 jz      short loc_405000
.text:00404FD7                 mov     ecx, [ebx+4]
.text:00404FDA                 test    ecx, ecx
.text:00404FDC                 jz      short loc_405009
.text:00404FDE                 mov     eax, [ecx]
.text:00404FE0                 mov     edx, [ecx+4]
.text:00404FE3                 mov     [ebx], eax
.text:00404FE5                 mov     [ebx+4], edx
.text:00404FE8                 mov     ebx, [esi+24h]
.text:00404FEB                 mov     dword ptr [ecx], 0
.text:00404FF1                 mov     [ecx+4], ebx
.text:00404FF4                 mov     [esi+24h], ecx
.text:00404FF7                 mov     esi, esi
.text:00404FF9                 lea     edi, [edi+0]
.text:00405000
.text:00405000 loc_405000:                             ; CODE XREF: sub_404F80+55↑j
.text:00405000                                         ; sub_404F80+8F↓j
.text:00405000                 mov     eax, edi
.text:00405002
.text:00405002 loc_405002:                             ; CODE XREF: sub_404F80+3E↑j
.text:00405002                                         ; sub_404F80+BC↓j ...
.text:00405002                 add     esp, 10h
.text:00405005                 pop     ebx
.text:00405006                 pop     esi
.text:00405007                 pop     edi
.text:00405008                 retn
.text:00405009 ; ---------------------------------------------------------------------------
.text:00405009
.text:00405009 loc_405009:                             ; CODE XREF: sub_404F80+5C↑j
.text:00405009                 mov     dword ptr [ebx], 0
.text:0040500F                 jmp     short loc_405000
.text:00405011 ; ---------------------------------------------------------------------------
.text:00405011
.text:00405011 loc_405011:                             ; CODE XREF: sub_404F80+4C↑j
.text:00405011                 mov     eax, [ebx+4]
.text:00405014                 test    eax, eax
.text:00405016                 jz      short loc_40503A
.text:00405018                 nop
.text:00405019                 lea     esi, [esi+0]
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_404F80+B8↓j
.text:00405020                 mov     ecx, [eax]
.text:00405022                 mov     [esp+1Ch+var_1C], edi
.text:00405025                 mov     [esp+1Ch+var_18], ecx
.text:00405029                 call    dword ptr [esi+1Ch]
.text:0040502C                 test    al, al
.text:0040502E                 jnz     short loc_40503E
.text:00405030                 mov     ebx, [ebx+4]
.text:00405033                 mov     eax, [ebx+4]
.text:00405036                 test    eax, eax
.text:00405038                 jnz     short loc_405020
.text:0040503A
.text:0040503A loc_40503A:                             ; CODE XREF: sub_404F80+96↑j
.text:0040503A                 xor     eax, eax
.text:0040503C                 jmp     short loc_405002
.text:0040503E ; ---------------------------------------------------------------------------
.text:0040503E
.text:0040503E loc_40503E:                             ; CODE XREF: sub_404F80+AE↑j
.text:0040503E                 cmp     [esp+1Ch+var_D], 0
.text:00405043                 mov     edx, [ebx+4]
.text:00405046                 mov     ecx, [edx]
.text:00405048                 jz      short loc_40505F
.text:0040504A                 mov     dword ptr [edx], 0
.text:00405050                 mov     edi, [edx+4]
.text:00405053                 mov     [ebx+4], edi
.text:00405056                 mov     edi, [esi+24h]
.text:00405059                 mov     [edx+4], edi
.text:0040505C                 mov     [esi+24h], edx
.text:0040505F
.text:0040505F loc_40505F:                             ; CODE XREF: sub_404F80+C8↑j
.text:0040505F                 mov     eax, ecx
.text:00405061                 jmp     short loc_405002
.text:00405063 ; ---------------------------------------------------------------------------
.text:00405063
.text:00405063 loc_405063:                             ; CODE XREF: sub_404F80+2C↑j
.text:00405063                 call    abort
.text:00405063 sub_404F80      endp
.text:00405063
.text:00405063 ; ---------------------------------------------------------------------------
.text:00405068                 align 20h
.text:00405080 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00405080                                         ; DATA XREF: .data:off_409020↓o
.text:004050B2 ; const char Format[12]
.text:004050B2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_405370+50↓o
.text:004050BE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004050CE                 align 20h
.text:004050E0
.text:004050E0 ; =============== S U B R O U T I N E =======================================
.text:004050E0
.text:004050E0
.text:004050E0 sub_4050E0      proc near               ; DATA XREF: sub_405370+100↓o
.text:004050E0                 push    esp
.text:004050E1                 push    69207369h
.text:004050E6                 jnb     short loc_405108
.text:004050E8                 db      66h
.text:004050E8                 jb      short near ptr 5150h
.text:004050EB                 and     gs:[ebx+6Fh], dh
.text:004050EF                 db      66h
.text:004050EF                 jz      short near ptr 5169h
.text:004050F2                 popa
.text:004050F3                 jb      short loc_40515A
.text:004050F5                 cmp     esp, [eax]
.text:004050F7                 jnb     short near ptr loc_40515C+2
.text:004050F9                 and     gs:[eax+ebp*2+65h], dh
.text:004050FE                 and     [ebx+6Fh], dh
.text:00405101                 jnz     short loc_405175
.text:00405103                 arpl    [ebp+20h], sp
.text:00405106                 outsw
.text:00405108
.text:00405108 loc_405108:                             ; CODE XREF: sub_4050E0+6↑j
.text:00405108                 jb      short loc_40512A
.text:0040510A                 arpl    [edi+70h], bp
.text:0040510D                 jns     short loc_405178
.text:0040510F                 outsb
.text:00405110                 and     [bp+di+6Fh], ah
.text:00405114                 outsb
.text:00405115                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040511E                 and     [eax+ebp*2+65h], dl
.text:00405122                 jb      short near ptr loc_405188+1
.text:00405124                 and     [ecx+73h], ch
.text:00405127                 and     [esi+4Fh], cl
.text:0040512A
.text:0040512A loc_40512A:                             ; CODE XREF: sub_4050E0:loc_405108↑j
.text:0040512A                 or      dh, [edi+61h]
.text:0040512D                 jb      short loc_4051A1
.text:0040512F                 popa
.text:00405130                 outsb
.text:00405131                 jz      short loc_4051AC
.text:00405133                 cmp     esp, [eax]
.text:00405135                 outsb
.text:00405136                 outsd
.text:00405137                 jz      short loc_405159
.text:00405139                 db      65h
.text:00405139                 jbe     short loc_4051A1
.text:0040513C                 outsb
.text:0040513D                 and     [esi+6Fh], ah
.text:00405140                 jb      short near ptr loc_405160+2
.text:00405142                 dec     ebp
.text:00405143                 inc     ebp
.text:00405144                 push    edx
.text:00405145                 inc     ebx
.text:00405146                 dec     eax
.text:00405147                 inc     ecx
.text:00405148                 dec     esi
.text:00405149                 push    esp
.text:0040514A                 inc     ecx
.text:0040514B                 inc     edx
.text:0040514C                 dec     ecx
.text:0040514D                 dec     esp
.text:0040514E                 dec     ecx
.text:0040514F                 push    esp
.text:00405150                 pop     ecx
.text:00405151                 and     [edi+72h], ch
.text:00405154                 and     [esi+49h], al
.text:00405157                 push    esp
.text:00405158                 dec     esi
.text:00405159
.text:00405159 loc_405159:                             ; CODE XREF: sub_4050E0+57↑j
.text:00405159                 inc     ebp
.text:0040515A
.text:0040515A loc_40515A:                             ; CODE XREF: sub_4050E0+13↑j
.text:0040515A                 push    ebx
.text:0040515B                 push    ebx
.text:0040515C
.text:0040515C loc_40515C:                             ; CODE XREF: sub_4050E0+17↑j
.text:0040515C                 and     [esi+4Fh], al
.text:0040515F                 push    edx
.text:00405160
.text:00405160 loc_405160:                             ; CODE XREF: sub_4050E0+60↑j
.text:00405160                 and     [ecx+20h], al
.text:00405163                 push    eax
.text:00405164                 inc     ecx
.text:00405165                 push    edx
.text:00405166                 push    esp
.text:00405167                 dec     ecx
.text:00405168                 inc     ebx
.text:00405169                 push    ebp
.text:0040516A                 dec     esp
.text:0040516B                 inc     ecx
.text:0040516C                 push    edx
.text:0040516D                 and     [eax+55h], dl
.text:00405170                 push    edx
.text:00405171                 push    eax
.text:00405172                 dec     edi
.text:00405173                 push    ebx
.text:00405174                 inc     ebp
.text:00405175
.text:00405175 loc_405175:                             ; CODE XREF: sub_4050E0+21↑j
.text:00405175                 or      al, cs:[eax]
.text:00405178
.text:00405178 loc_405178:                             ; CODE XREF: sub_4050E0+2D↑j
.text:00405178                                         ; DATA XREF: sub_405370:loc_4054B1↓o
.text:00405178                 push    edi
.text:00405179                 jb      short near ptr loc_4051E3+1
.text:0040517B                 jz      short near ptr loc_4051F0+1
.text:0040517D                 outs    dx, byte ptr gs:[esi]
.text:0040517F                 and     [edx+79h], ah
.text:00405182                 and     ds:6E612073h, ah
.text:00405188
.text:00405188 loc_405188:                             ; CODE XREF: sub_4050E0+42↑j
.text:00405188                 and     fs:0A2E73h, ah
.text:0040518F
.text:0040518F loc_40518F:                             ; DATA XREF: sub_405370:loc_4054BD↓o
.text:0040518F                 push    edi
.text:00405190                 jb      short near ptr loc_4051FA+1
.text:00405192                 jz      short loc_405208
.text:00405194                 outs    dx, byte ptr gs:[esi]
.text:00405196                 and     [edx+79h], ah
.text:00405199                 and     ds:25202C73h, ah
.text:0040519F                 jnb     short near ptr loc_4051CA+3
.text:004051A1
.text:004051A1 loc_4051A1:                             ; CODE XREF: sub_4050E0+4D↑j
.text:004051A1                                         ; sub_4050E0+59↑j
.text:004051A1                 and     [ecx+6Eh], ah
.text:004051A4                 and     fs:0A2E73h, ah
.text:004051AB                 nop
.text:004051AC
.text:004051AC loc_4051AC:                             ; CODE XREF: sub_4050E0+51↑j
.text:004051AC                 nop
.text:004051AD                 nop
.text:004051AE                 nop
.text:004051AF                 nop
.text:004051B0                 nop
.text:004051B1                 nop
.text:004051B2                 nop
.text:004051B3                 nop
.text:004051B4                 nop
.text:004051B5                 nop
.text:004051B6                 nop
.text:004051B7                 nop
.text:004051B8                 nop
.text:004051B9                 nop
.text:004051BA                 nop
.text:004051BB                 nop
.text:004051BC                 nop
.text:004051BD                 nop
.text:004051BE                 nop
.text:004051BF                 nop
.text:004051BF sub_4050E0      endp ; sp-analysis failed
.text:004051BF
.text:004051C0
.text:004051C0 ; =============== S U B R O U T I N E =======================================
.text:004051C0
.text:004051C0
.text:004051C0 sub_4051C0      proc near               ; DATA XREF: sub_405370:loc_4054C9↓o
.text:004051C0                 push    edi
.text:004051C1                 jb      short near ptr loc_40522A+2
.text:004051C3                 jz      short near ptr loc_405238+1
.text:004051C5                 outs    dx, byte ptr gs:[esi]
.text:004051C7                 and     [edx+79h], ah
.text:004051CA
.text:004051CA loc_4051CA:                             ; CODE XREF: sub_4050E0+BF↑j
.text:004051CA                 and     ds:25202C73h, ah
.text:004051D0                 jnb     short near ptr loc_4051FD+1
.text:004051D2                 and     ds:610A2C73h, ah
.text:004051D8                 outsb
.text:004051D9                 and     fs:0A2E73h, ah
.text:004051E0
.text:004051E0 loc_4051E0:                             ; DATA XREF: sub_405370:loc_4054D5↓o
.text:004051E0                 push    edi
.text:004051E1                 jb      short loc_40524C
.text:004051E3
.text:004051E3 loc_4051E3:                             ; CODE XREF: sub_4050E0+99↑j
.text:004051E3                 jz      short loc_405259
.text:004051E5                 outs    dx, byte ptr gs:[esi]
.text:004051E7                 and     [edx+79h], ah
.text:004051EA                 and     ds:25202C73h, ah
.text:004051F0
.text:004051F0 loc_4051F0:                             ; CODE XREF: sub_4050E0+9B↑j
.text:004051F0                 jnb     short loc_40521E
.text:004051F2                 and     ds:250A2C73h, ah
.text:004051F8                 jnb     short near ptr loc_405225+1
.text:004051FA
.text:004051FA loc_4051FA:                             ; CODE XREF: sub_4050E0+B0↑j
.text:004051FA                 and     [ecx+6Eh], ah
.text:004051FD
.text:004051FD loc_4051FD:                             ; CODE XREF: sub_4051C0+10↑j
.text:004051FD                 and     fs:0A2E73h, ah
.text:00405204                 nop
.text:00405205                 nop
.text:00405206                 nop
.text:00405207                 nop
.text:00405208
.text:00405208 loc_405208:                             ; CODE XREF: sub_4050E0+B2↑j
.text:00405208                 nop
.text:00405209                 nop
.text:0040520A                 nop
.text:0040520B                 nop
.text:0040520C                 nop
.text:0040520D                 nop
.text:0040520E                 nop
.text:0040520F                 nop
.text:00405210                 nop
.text:00405211                 nop
.text:00405212                 nop
.text:00405213                 nop
.text:00405214                 nop
.text:00405215                 nop
.text:00405216                 nop
.text:00405217                 nop
.text:00405218                 nop
.text:00405219                 nop
.text:0040521A                 nop
.text:0040521B                 nop
.text:0040521C                 nop
.text:0040521D                 nop
.text:0040521E
.text:0040521E loc_40521E:                             ; CODE XREF: sub_4051C0:loc_4051F0↑j
.text:0040521E                 nop
.text:0040521F                 nop
.text:0040521F sub_4051C0      endp ; sp-analysis failed
.text:0040521F
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220
.text:00405220 sub_405220      proc near               ; DATA XREF: sub_405370:loc_4054E1↓o
.text:00405220                 push    edi
.text:00405221                 jb      short loc_40528C
.text:00405223                 jz      short loc_405299
.text:00405225
.text:00405225 loc_405225:                             ; CODE XREF: sub_4051C0+38↑j
.text:00405225                 outs    dx, byte ptr gs:[esi]
.text:00405227                 and     [edx+79h], ah
.text:0040522A
.text:0040522A loc_40522A:                             ; CODE XREF: sub_4051C0+1↑j
.text:0040522A                 and     ds:25202C73h, ah
.text:00405230                 jnb     short loc_40525E
.text:00405232                 and     ds:250A2C73h, ah
.text:00405238
.text:00405238 loc_405238:                             ; CODE XREF: sub_4051C0+3↑j
.text:00405238                 jnb     short near ptr loc_405265+1
.text:0040523A                 and     ds:61202C73h, ah
.text:00405240                 outsb
.text:00405241                 and     fs:0A2E73h, ah
.text:00405248                 nop
.text:00405249                 nop
.text:0040524A                 nop
.text:0040524B                 nop
.text:0040524C
.text:0040524C loc_40524C:                             ; CODE XREF: sub_4051C0+21↑j
.text:0040524C                 nop
.text:0040524D                 nop
.text:0040524E                 nop
.text:0040524F                 nop
.text:00405250                 nop
.text:00405251                 nop
.text:00405252                 nop
.text:00405253                 nop
.text:00405254                 nop
.text:00405255                 nop
.text:00405256                 nop
.text:00405257                 nop
.text:00405258                 nop
.text:00405259
.text:00405259 loc_405259:                             ; CODE XREF: sub_4051C0:loc_4051E3↑j
.text:00405259                 nop
.text:0040525A                 nop
.text:0040525B                 nop
.text:0040525C                 nop
.text:0040525D                 nop
.text:0040525E
.text:0040525E loc_40525E:                             ; CODE XREF: sub_405220+10↑j
.text:0040525E                 nop
.text:0040525F                 nop
.text:0040525F sub_405220      endp ; sp-analysis failed
.text:0040525F
.text:00405260
.text:00405260 ; =============== S U B R O U T I N E =======================================
.text:00405260
.text:00405260
.text:00405260 sub_405260      proc near               ; DATA XREF: sub_405370:loc_4054ED↓o
.text:00405260                 push    edi
.text:00405261                 jb      short near ptr loc_4052C9+3
.text:00405263                 jz      short loc_4052D9
.text:00405265
.text:00405265 loc_405265:                             ; CODE XREF: sub_405220:loc_405238↑j
.text:00405265                 outs    dx, byte ptr gs:[esi]
.text:00405267                 and     [edx+79h], ah
.text:0040526A                 and     ds:25202C73h, ah
.text:00405270                 jnb     short loc_40529E
.text:00405272                 and     ds:250A2C73h, ah
.text:00405278                 jnb     short near ptr loc_4052A5+1
.text:0040527A                 and     ds:25202C73h, ah
.text:00405280                 jnb     short near ptr loc_4052AA+4
.text:00405282                 and     [ecx+6Eh], ah
.text:00405285                 and     fs:0A2E73h, ah
.text:0040528C
.text:0040528C loc_40528C:                             ; CODE XREF: sub_405220+1↑j
.text:0040528C                 nop
.text:0040528D                 nop
.text:0040528E                 nop
.text:0040528F                 nop
.text:00405290                 nop
.text:00405291                 nop
.text:00405292                 nop
.text:00405293                 nop
.text:00405294                 nop
.text:00405295                 nop
.text:00405296                 nop
.text:00405297                 nop
.text:00405298                 nop
.text:00405299
.text:00405299 loc_405299:                             ; CODE XREF: sub_405220+3↑j
.text:00405299                 nop
.text:0040529A                 nop
.text:0040529B                 nop
.text:0040529C                 nop
.text:0040529D                 nop
.text:0040529E
.text:0040529E loc_40529E:                             ; CODE XREF: sub_405260+10↑j
.text:0040529E                 nop
.text:0040529F                 nop
.text:0040529F sub_405260      endp ; sp-analysis failed
.text:0040529F
.text:004052A0
.text:004052A0 ; =============== S U B R O U T I N E =======================================
.text:004052A0
.text:004052A0
.text:004052A0 sub_4052A0      proc near               ; DATA XREF: sub_405370:loc_4054F9↓o
.text:004052A0                 push    edi
.text:004052A1                 jb      short near ptr loc_40530A+2
.text:004052A3                 jz      short near ptr loc_405314+5
.text:004052A5
.text:004052A5 loc_4052A5:                             ; CODE XREF: sub_405260+18↑j
.text:004052A5                 outs    dx, byte ptr gs:[esi]
.text:004052A7                 and     [edx+79h], ah
.text:004052AA
.text:004052AA loc_4052AA:                             ; CODE XREF: sub_405260+20↑j
.text:004052AA                 and     ds:25202C73h, ah
.text:004052B0                 jnb     short loc_4052DE
.text:004052B2                 and     ds:250A2C73h, ah
.text:004052B8                 jnb     short near ptr loc_4052E5+1
.text:004052BA                 and     ds:25202C73h, ah
.text:004052C0                 jnb     short near ptr loc_4052EA+4
.text:004052C2                 and     ds:610A2C73h, ah
.text:004052C8                 outsb
.text:004052C9
.text:004052C9 loc_4052C9:                             ; CODE XREF: sub_405260+1↑j
.text:004052C9                 and     fs:0A2E73h, ah
.text:004052D0                 nop
.text:004052D1                 nop
.text:004052D2                 nop
.text:004052D3                 nop
.text:004052D4                 nop
.text:004052D5                 nop
.text:004052D6                 nop
.text:004052D7                 nop
.text:004052D8                 nop
.text:004052D9
.text:004052D9 loc_4052D9:                             ; CODE XREF: sub_405260+3↑j
.text:004052D9                 nop
.text:004052DA                 nop
.text:004052DB                 nop
.text:004052DC                 nop
.text:004052DD                 nop
.text:004052DE
.text:004052DE loc_4052DE:                             ; CODE XREF: sub_4052A0+10↑j
.text:004052DE                 nop
.text:004052DF                 nop
.text:004052DF sub_4052A0      endp ; sp-analysis failed
.text:004052DF
.text:004052E0
.text:004052E0 ; =============== S U B R O U T I N E =======================================
.text:004052E0
.text:004052E0
.text:004052E0 sub_4052E0      proc near               ; DATA XREF: sub_405370:loc_405505↓o
.text:004052E0                 push    edi
.text:004052E1                 jb      short near ptr loc_40534A+2
.text:004052E3                 jz      short near ptr loc_405355+4
.text:004052E5
.text:004052E5 loc_4052E5:                             ; CODE XREF: sub_4052A0+18↑j
.text:004052E5                 outs    dx, byte ptr gs:[esi]
.text:004052E7                 and     [edx+79h], ah
.text:004052EA
.text:004052EA loc_4052EA:                             ; CODE XREF: sub_4052A0+20↑j
.text:004052EA                 and     ds:25202C73h, ah
.text:004052F0                 jnb     short near ptr loc_40531A+4
.text:004052F2                 and     ds:250A2C73h, ah
.text:004052F8                 jnb     short near ptr loc_405325+1
.text:004052FA                 and     ds:25202C73h, ah
.text:00405300                 jnb     short near ptr loc_40532A+4
.text:00405302                 and     ds:250A2C73h, ah
.text:00405308                 jnb     short near ptr loc_405332+4
.text:0040530A
.text:0040530A loc_40530A:                             ; CODE XREF: sub_4052A0+1↑j
.text:0040530A                 and     [ecx+6Eh], ah
.text:0040530D                 and     fs:0A2E73h, ah
.text:00405314
.text:00405314 loc_405314:                             ; CODE XREF: sub_4052A0+3↑j
.text:00405314                 lea     esi, [esi+0]
.text:0040531A
.text:0040531A loc_40531A:                             ; CODE XREF: sub_4052E0+10↑j
.text:0040531A                 lea     edi, [edi+0]
.text:00405320
.text:00405320 loc_405320:                             ; DATA XREF: sub_405370:def_4053DD↓o
.text:00405320                 push    edi
.text:00405321                 jb      short near ptr loc_40538B+1
.text:00405323                 jz      short near ptr loc_405398+1
.text:00405325
.text:00405325 loc_405325:                             ; CODE XREF: sub_4052E0+18↑j
.text:00405325                 outs    dx, byte ptr gs:[esi]
.text:00405327                 and     [edx+79h], ah
.text:0040532A
.text:0040532A loc_40532A:                             ; CODE XREF: sub_4052E0+20↑j
.text:0040532A                 and     ds:25202C73h, ah
.text:00405330                 jnb     short near ptr loc_40535C+2
.text:00405332
.text:00405332 loc_405332:                             ; CODE XREF: sub_4052E0+28↑j
.text:00405332                 and     ds:250A2C73h, ah
.text:00405338                 jnb     short near ptr loc_405363+3
.text:0040533A                 and     ds:25202C73h, ah
.text:00405340                 jnb     short near ptr loc_405369+5
.text:00405342                 and     ds:250A2C73h, ah
.text:00405348                 jnb     short near ptr loc_405374+2
.text:0040534A
.text:0040534A loc_40534A:                             ; CODE XREF: sub_4052E0+1↑j
.text:0040534A                 and     ds:61202C73h, ah
.text:00405350                 outsb
.text:00405351                 and     fs:[edi+74h], ch
.text:00405355
.text:00405355 loc_405355:                             ; CODE XREF: sub_4052E0+3↑j
.text:00405355                 push    2E737265h
.text:0040535A                 or      al, [eax]
.text:0040535C
.text:0040535C loc_40535C:                             ; CODE XREF: sub_4052E0+50↑j
.text:0040535C                                         ; DATA XREF: sub_405370+1B5↓o
.text:0040535C                 and     eax, 73252073h
.text:00405361                 or      al, [eax]
.text:00405363
.text:00405363 loc_405363:                             ; CODE XREF: sub_4052E0+58↑j
.text:00405363                 lea     esi, [esi+0]
.text:00405369
.text:00405369 loc_405369:                             ; CODE XREF: sub_4052E0+60↑j
.text:00405369                 lea     edi, [edi+0]
.text:00405369 sub_4052E0      endp ; sp-analysis failed
.text:00405369
.text:00405370
.text:00405370 ; =============== S U B R O U T I N E =======================================
.text:00405370
.text:00405370
.text:00405370 ; int __cdecl sub_405370(FILE *, FILE *, int, int, va_list)
.text:00405370 sub_405370      proc near               ; CODE XREF: sub_405540+2A↓p
.text:00405370
.text:00405370 Stream          = dword ptr -2Ch
.text:00405370 Format          = dword ptr -28h
.text:00405370 ArgList         = dword ptr -24h
.text:00405370 var_20          = dword ptr -20h
.text:00405370 var_1C          = dword ptr -1Ch
.text:00405370 var_14          = dword ptr -14h
.text:00405370 arg_0           = dword ptr  4
.text:00405370 arg_4           = dword ptr  8
.text:00405370 arg_8           = dword ptr  0Ch
.text:00405370 arg_C           = dword ptr  10h
.text:00405370 arg_10          = dword ptr  14h
.text:00405370
.text:00405370                 push    ebp
.text:00405371                 push    edi
.text:00405372                 push    esi
.text:00405373                 push    ebx
.text:00405374
.text:00405374 loc_405374:                             ; CODE XREF: sub_4052E0+68↑j
.text:00405374                 sub     esp, 1Ch
.text:00405377                 xor     ebx, ebx
.text:00405379                 mov     edi, [esp+2Ch+arg_10]
.text:0040537D                 mov     edx, [esp+2Ch+arg_8]
.text:00405381                 mov     esi, [esp+2Ch+arg_0]
.text:00405385                 mov     eax, [edi]
.text:00405387                 mov     ecx, [esp+2Ch+arg_4]
.text:0040538B
.text:0040538B loc_40538B:                             ; CODE XREF: sub_4052E0+41↑j
.text:0040538B                 mov     [esp+2Ch+var_14], edx
.text:0040538F                 mov     ebp, [esp+2Ch+arg_C]
.text:00405393                 lea     edx, [edi+4]
.text:00405396                 test    eax, eax
.text:00405398
.text:00405398 loc_405398:                             ; CODE XREF: sub_4052E0+43↑j
.text:00405398                 jz      short loc_4053AC
.text:0040539A                 lea     esi, [esi+0]
.text:004053A0
.text:004053A0 loc_4053A0:                             ; CODE XREF: sub_405370+3A↓j
.text:004053A0                 mov     eax, edx
.text:004053A2                 inc     ebx
.text:004053A3                 mov     eax, [eax]
.text:004053A5                 add     edx, 4
.text:004053A8                 test    eax, eax
.text:004053AA                 jnz     short loc_4053A0
.text:004053AC
.text:004053AC loc_4053AC:                             ; CODE XREF: sub_405370:loc_405398↑j
.text:004053AC                 test    ecx, ecx
.text:004053AE                 jz      loc_40551D
.text:004053B4                 mov     [esp+2Ch+var_1C], ebp
.text:004053B8                 mov     edx, [esp+2Ch+var_14]
.text:004053BC                 mov     [esp+2Ch+ArgList], ecx
.text:004053C0                 mov     [esp+2Ch+Format], offset Format ; Format
.text:004053C8                 mov     [esp+2Ch+var_20], edx
.text:004053CC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004053CF                 call    fprintf
.text:004053D4
.text:004053D4 loc_4053D4:                             ; CODE XREF: sub_405370+1C9↓j
.text:004053D4                 cmp     ebx, 9          ; switch 10 cases
.text:004053D7                 ja      def_4053DD      ; jumptable 004053DD default case
.text:004053DD                 jmp     ds:jpt_4053DD[ebx*4] ; switch jump
.text:004053DD ; ---------------------------------------------------------------------------
.text:004053E4 jpt_4053DD      dd offset loc_40540C    ; DATA XREF: sub_405370+6D↑r
.text:004053E4                 dd offset loc_405411    ; jump table for switch statement
.text:004053E4                 dd offset loc_4054B1
.text:004053E4                 dd offset loc_4054BD
.text:004053E4                 dd offset loc_4054C9
.text:004053E4                 dd offset loc_4054D5
.text:004053E4                 dd offset loc_4054E1
.text:004053E4                 dd offset loc_4054ED
.text:004053E4                 dd offset loc_4054F9
.text:004053E4                 dd offset loc_405505
.text:0040540C ; ---------------------------------------------------------------------------
.text:0040540C
.text:0040540C loc_40540C:                             ; CODE XREF: sub_405370+6D↑j
.text:0040540C                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:0040540C                 call    abort           ; jumptable 004053DD case 0
.text:00405411 ; ---------------------------------------------------------------------------
.text:00405411
.text:00405411 loc_405411:                             ; CODE XREF: sub_405370+6D↑j
.text:00405411                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:00405411                 mov     [esp+2Ch+Stream], 4050BEh ; jumptable 004053DD case 1
.text:00405418                 nop
.text:00405419                 lea     esi, [esi+0]
.text:00405420
.text:00405420 loc_405420:                             ; CODE XREF: sub_405370+148↓j
.text:00405420                                         ; sub_405370+154↓j ...
.text:00405420                 call    ds:libintl_gettext
.text:00405426                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040542A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040542D                 mov     [esp+2Ch+Format], eax ; Format
.text:00405431                 call    vfprintf
.text:00405436                 mov     ebx, [esi+4]
.text:00405439                 dec     ebx
.text:0040543A                 test    ebx, ebx
.text:0040543C                 mov     [esi+4], ebx
.text:0040543F                 js      short loc_40549F
.text:00405441                 mov     edi, [esi]
.text:00405443                 mov     byte ptr [edi], 0Ah
.text:00405446                 inc     dword ptr [esi]
.text:00405448
.text:00405448 loc_405448:                             ; CODE XREF: sub_405370+13F↓j
.text:00405448                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040544C                 mov     edx, off_409020 ; "Copyright (C) 2005 Free Software Founda"...
.text:00405452                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00405455                 call    fputs
.text:0040545A                 mov     ebp, [esi+4]
.text:0040545D                 dec     ebp
.text:0040545E                 test    ebp, ebp
.text:00405460                 mov     [esi+4], ebp
.text:00405463                 js      short loc_40548D
.text:00405465                 mov     ecx, [esi]
.text:00405467                 mov     byte ptr [ecx], 0Ah
.text:0040546A                 inc     dword ptr [esi]
.text:0040546C
.text:0040546C loc_40546C:                             ; CODE XREF: sub_405370+12D↓j
.text:0040546C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405470                 mov     [esp+2Ch+Stream], offset sub_4050E0
.text:00405477                 call    ds:libintl_gettext
.text:0040547D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405481                 add     esp, 1Ch
.text:00405484                 pop     ebx
.text:00405485                 pop     esi
.text:00405486                 pop     edi
.text:00405487                 pop     ebp
.text:00405488                 jmp     fputs
.text:0040548D ; ---------------------------------------------------------------------------
.text:0040548D
.text:0040548D loc_40548D:                             ; CODE XREF: sub_405370+F3↑j
.text:0040548D                 mov     [esp+2Ch+Format], esi ; File
.text:00405491                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405498                 call    _flsbuf
.text:0040549D                 jmp     short loc_40546C
.text:0040549F ; ---------------------------------------------------------------------------
.text:0040549F
.text:0040549F loc_40549F:                             ; CODE XREF: sub_405370+CF↑j
.text:0040549F                 mov     [esp+2Ch+Format], esi ; File
.text:004054A3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004054AA                 call    _flsbuf
.text:004054AF                 jmp     short loc_405448
.text:004054B1 ; ---------------------------------------------------------------------------
.text:004054B1
.text:004054B1 loc_4054B1:                             ; CODE XREF: sub_405370+6D↑j
.text:004054B1                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:004054B1                 mov     [esp+2Ch+Stream], offset loc_405178 ; jumptable 004053DD case 2
.text:004054B8                 jmp     loc_405420
.text:004054BD ; ---------------------------------------------------------------------------
.text:004054BD
.text:004054BD loc_4054BD:                             ; CODE XREF: sub_405370+6D↑j
.text:004054BD                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:004054BD                 mov     [esp+2Ch+Stream], offset loc_40518F ; jumptable 004053DD case 3
.text:004054C4                 jmp     loc_405420
.text:004054C9 ; ---------------------------------------------------------------------------
.text:004054C9
.text:004054C9 loc_4054C9:                             ; CODE XREF: sub_405370+6D↑j
.text:004054C9                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:004054C9                 mov     [esp+2Ch+Stream], offset sub_4051C0 ; jumptable 004053DD case 4
.text:004054D0                 jmp     loc_405420
.text:004054D5 ; ---------------------------------------------------------------------------
.text:004054D5
.text:004054D5 loc_4054D5:                             ; CODE XREF: sub_405370+6D↑j
.text:004054D5                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:004054D5                 mov     [esp+2Ch+Stream], offset loc_4051E0 ; jumptable 004053DD case 5
.text:004054DC                 jmp     loc_405420
.text:004054E1 ; ---------------------------------------------------------------------------
.text:004054E1
.text:004054E1 loc_4054E1:                             ; CODE XREF: sub_405370+6D↑j
.text:004054E1                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:004054E1                 mov     [esp+2Ch+Stream], offset sub_405220 ; jumptable 004053DD case 6
.text:004054E8                 jmp     loc_405420
.text:004054ED ; ---------------------------------------------------------------------------
.text:004054ED
.text:004054ED loc_4054ED:                             ; CODE XREF: sub_405370+6D↑j
.text:004054ED                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:004054ED                 mov     [esp+2Ch+Stream], offset sub_405260 ; jumptable 004053DD case 7
.text:004054F4                 jmp     loc_405420
.text:004054F9 ; ---------------------------------------------------------------------------
.text:004054F9
.text:004054F9 loc_4054F9:                             ; CODE XREF: sub_405370+6D↑j
.text:004054F9                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:004054F9                 mov     [esp+2Ch+Stream], offset sub_4052A0 ; jumptable 004053DD case 8
.text:00405500                 jmp     loc_405420
.text:00405505 ; ---------------------------------------------------------------------------
.text:00405505
.text:00405505 loc_405505:                             ; CODE XREF: sub_405370+6D↑j
.text:00405505                                         ; DATA XREF: sub_405370:jpt_4053DD↑o
.text:00405505                 mov     [esp+2Ch+Stream], offset sub_4052E0 ; jumptable 004053DD case 9
.text:0040550C                 jmp     loc_405420
.text:00405511 ; ---------------------------------------------------------------------------
.text:00405511
.text:00405511 def_4053DD:                             ; CODE XREF: sub_405370+67↑j
.text:00405511                 mov     [esp+2Ch+Stream], offset loc_405320 ; jumptable 004053DD default case
.text:00405518                 jmp     loc_405420
.text:0040551D ; ---------------------------------------------------------------------------
.text:0040551D
.text:0040551D loc_40551D:                             ; CODE XREF: sub_405370+3E↑j
.text:0040551D                 mov     [esp+2Ch+var_20], ebp
.text:00405521                 mov     ecx, [esp+2Ch+var_14]
.text:00405525                 mov     [esp+2Ch+Format], offset loc_40535C ; Format
.text:0040552D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405530                 mov     [esp+2Ch+ArgList], ecx
.text:00405534                 call    fprintf
.text:00405539                 jmp     loc_4053D4
.text:00405539 sub_405370      endp
.text:00405539
.text:00405539 ; ---------------------------------------------------------------------------
.text:0040553E                 align 10h
.text:00405540
.text:00405540 ; =============== S U B R O U T I N E =======================================
.text:00405540
.text:00405540
.text:00405540 ; int __cdecl sub_405540(FILE *, FILE *, int, int, char)
.text:00405540 sub_405540      proc near               ; CODE XREF: sub_401CE0+1AB↑p
.text:00405540
.text:00405540 var_1C          = dword ptr -1Ch
.text:00405540 var_18          = dword ptr -18h
.text:00405540 var_14          = dword ptr -14h
.text:00405540 var_10          = dword ptr -10h
.text:00405540 var_C           = dword ptr -0Ch
.text:00405540 arg_0           = dword ptr  4
.text:00405540 arg_4           = dword ptr  8
.text:00405540 arg_8           = dword ptr  0Ch
.text:00405540 arg_C           = dword ptr  10h
.text:00405540 arg_10          = byte ptr  14h
.text:00405540
.text:00405540                 sub     esp, 1Ch
.text:00405543                 mov     edx, [esp+1Ch+arg_C]
.text:00405547                 lea     ecx, [esp+1Ch+arg_10]
.text:0040554B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040554F                 mov     ecx, [esp+1Ch+arg_8]
.text:00405553                 mov     [esp+1Ch+var_10], edx ; int
.text:00405557                 mov     edx, [esp+1Ch+arg_4]
.text:0040555B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040555F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00405563                 mov     edx, [esp+1Ch+arg_0]
.text:00405567                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040556A                 call    sub_405370
.text:0040556F                 add     esp, 1Ch
.text:00405572                 retn
.text:00405572 sub_405540      endp
.text:00405572
.text:00405572 ; ---------------------------------------------------------------------------
.text:00405573                 align 10h
.text:00405580                 sub     esp, 0Ch
.text:00405583                 xor     edx, edx
.text:00405585                 mov     ecx, [esp+14h]
.text:00405589                 mov     [esp+8], ebx
.text:0040558D                 mov     eax, 0FFFFFFFFh
.text:00405592                 mov     ebx, [esp+10h]
.text:00405596                 div     ecx
.text:00405598                 cmp     eax, ebx
.text:0040559A                 jb      short loc_4055B9
.text:0040559C                 mov     edx, ebx
.text:0040559E                 imul    edx, ecx
.text:004055A1                 mov     [esp], edx
.text:004055A4                 call    malloc
.text:004055A9                 test    eax, eax
.text:004055AB                 jz      short loc_4055B5
.text:004055AD
.text:004055AD loc_4055AD:                             ; CODE XREF: .text:004055B7↓j
.text:004055AD                 mov     ebx, [esp+8]
.text:004055B1                 add     esp, 0Ch
.text:004055B4                 retn
.text:004055B5 ; ---------------------------------------------------------------------------
.text:004055B5
.text:004055B5 loc_4055B5:                             ; CODE XREF: .text:004055AB↑j
.text:004055B5                 test    ebx, ebx
.text:004055B7                 jz      short loc_4055AD
.text:004055B9
.text:004055B9 loc_4055B9:                             ; CODE XREF: .text:0040559A↑j
.text:004055B9                 call    sub_405CD0
.text:004055B9 ; ---------------------------------------------------------------------------
.text:004055BE                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0
.text:004055C0 ; int __cdecl sub_4055C0(size_t)
.text:004055C0 sub_4055C0      proc near               ; CODE XREF: .text:00406819↓p
.text:004055C0                                         ; .text:004069F6↓p ...
.text:004055C0
.text:004055C0 Size            = dword ptr -0Ch
.text:004055C0 var_4           = dword ptr -4
.text:004055C0 arg_0           = dword ptr  4
.text:004055C0
.text:004055C0                 sub     esp, 0Ch
.text:004055C3                 mov     [esp+0Ch+var_4], ebx
.text:004055C7                 mov     ebx, [esp+0Ch+arg_0]
.text:004055CB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004055CE                 call    malloc
.text:004055D3                 test    eax, eax
.text:004055D5                 jz      short loc_4055E0
.text:004055D7
.text:004055D7 loc_4055D7:                             ; CODE XREF: sub_4055C0+22↓j
.text:004055D7                 mov     ebx, [esp+0Ch+var_4]
.text:004055DB                 add     esp, 0Ch
.text:004055DE                 retn
.text:004055DE ; ---------------------------------------------------------------------------
.text:004055DF                 align 10h
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_4055C0+15↑j
.text:004055E0                 test    ebx, ebx
.text:004055E2                 jz      short loc_4055D7
.text:004055E4                 call    sub_405CD0
.text:004055E4 sub_4055C0      endp
.text:004055E4
.text:004055E4 ; ---------------------------------------------------------------------------
.text:004055E9                 align 10h
.text:004055F0                 sub     esp, 1Ch
.text:004055F3                 xor     edx, edx
.text:004055F5                 mov     eax, 0FFFFFFFFh
.text:004055FA                 mov     [esp+14h], ebx
.text:004055FE                 mov     ecx, [esp+20h]
.text:00405602                 mov     ebx, [esp+28h]
.text:00405606                 mov     [esp+18h], esi
.text:0040560A                 mov     esi, [esp+24h]
.text:0040560E                 div     ebx
.text:00405610                 cmp     eax, esi
.text:00405612                 jb      short loc_405644
.text:00405614                 mov     [esp], ecx
.text:00405617                 mov     edx, esi
.text:00405619                 imul    edx, ebx
.text:0040561C                 mov     [esp+4], edx
.text:00405620                 call    realloc
.text:00405625                 test    eax, eax
.text:00405627                 mov     ecx, eax
.text:00405629                 jz      short loc_405640
.text:0040562B
.text:0040562B loc_40562B:                             ; CODE XREF: .text:00405642↓j
.text:0040562B                 mov     ebx, [esp+14h]
.text:0040562F                 mov     eax, ecx
.text:00405631                 mov     esi, [esp+18h]
.text:00405635                 add     esp, 1Ch
.text:00405638                 retn
.text:00405638 ; ---------------------------------------------------------------------------
.text:00405639                 align 10h
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: .text:00405629↑j
.text:00405640                 test    esi, esi
.text:00405642                 jz      short loc_40562B
.text:00405644
.text:00405644 loc_405644:                             ; CODE XREF: .text:00405612↑j
.text:00405644                 call    sub_405CD0
.text:00405644 ; ---------------------------------------------------------------------------
.text:00405649                 align 10h
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650
.text:00405650 ; int __cdecl sub_405650(void *, size_t)
.text:00405650 sub_405650      proc near               ; CODE XREF: sub_406EE0+5B↓p
.text:00405650
.text:00405650 Block           = dword ptr -0Ch
.text:00405650 Size            = dword ptr -8
.text:00405650 var_4           = dword ptr -4
.text:00405650 arg_0           = dword ptr  4
.text:00405650 arg_4           = dword ptr  8
.text:00405650
.text:00405650                 sub     esp, 0Ch
.text:00405653                 mov     edx, [esp+0Ch+arg_0]
.text:00405657                 mov     [esp+0Ch+var_4], ebx
.text:0040565B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040565F                 mov     [esp+0Ch+Block], edx ; Block
.text:00405662                 mov     [esp+0Ch+Size], ebx ; Size
.text:00405666                 call    realloc
.text:0040566B                 test    eax, eax
.text:0040566D                 jz      short loc_405677
.text:0040566F
.text:0040566F loc_40566F:                             ; CODE XREF: sub_405650+29↓j
.text:0040566F                 mov     ebx, [esp+0Ch+var_4]
.text:00405673                 add     esp, 0Ch
.text:00405676                 retn
.text:00405677 ; ---------------------------------------------------------------------------
.text:00405677
.text:00405677 loc_405677:                             ; CODE XREF: sub_405650+1D↑j
.text:00405677                 test    ebx, ebx
.text:00405679                 jz      short loc_40566F
.text:0040567B                 call    sub_405CD0
.text:0040567B sub_405650      endp
.text:0040567B
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680 ; Attributes: thunk
.text:00405680
.text:00405680 ; int __cdecl sub_405680(void *, int, int)
.text:00405680 sub_405680      proc near               ; CODE XREF: sub_402570+2AA↑p
.text:00405680                                         ; sub_402570+34A↑p
.text:00405680                 jmp     sub_4057D0
.text:00405680 sub_405680      endp
.text:00405680
.text:00405680 ; ---------------------------------------------------------------------------
.text:00405685                 align 10h
.text:00405690                 sub     esp, 0Ch
.text:00405693                 mov     edx, [esp+14h]
.text:00405697                 mov     dword ptr [esp+8], 1
.text:0040569F                 mov     [esp+4], edx
.text:004056A3                 mov     edx, [esp+10h]
.text:004056A7                 mov     [esp], edx
.text:004056AA                 call    sub_4057D0
.text:004056AF                 add     esp, 0Ch
.text:004056B2                 retn
.text:004056B2 ; ---------------------------------------------------------------------------
.text:004056B3                 align 10h
.text:004056C0
.text:004056C0 ; =============== S U B R O U T I N E =======================================
.text:004056C0
.text:004056C0
.text:004056C0 ; int __cdecl sub_4056C0(size_t)
.text:004056C0 sub_4056C0      proc near               ; CODE XREF: sub_402570+E7↑p
.text:004056C0
.text:004056C0 Size            = dword ptr -1Ch
.text:004056C0 Val             = dword ptr -18h
.text:004056C0 var_14          = dword ptr -14h
.text:004056C0 var_4           = dword ptr -4
.text:004056C0 arg_0           = dword ptr  4
.text:004056C0
.text:004056C0                 sub     esp, 1Ch
.text:004056C3                 mov     [esp+1Ch+var_4], ebx
.text:004056C7                 mov     ebx, [esp+1Ch+arg_0]
.text:004056CB                 mov     [esp+1Ch+Size], ebx ; Size
.text:004056CE                 call    malloc
.text:004056D3                 test    eax, eax
.text:004056D5                 jz      short loc_4056F3
.text:004056D7
.text:004056D7 loc_4056D7:                             ; CODE XREF: sub_4056C0+35↓j
.text:004056D7                 mov     [esp+1Ch+var_14], ebx ; Size
.text:004056DB                 mov     [esp+1Ch+Val], 0 ; Val
.text:004056E3                 mov     [esp+1Ch+Size], eax ; void *
.text:004056E6                 call    memset
.text:004056EB                 mov     ebx, [esp+1Ch+var_4]
.text:004056EF                 add     esp, 1Ch
.text:004056F2                 retn
.text:004056F3 ; ---------------------------------------------------------------------------
.text:004056F3
.text:004056F3 loc_4056F3:                             ; CODE XREF: sub_4056C0+15↑j
.text:004056F3                 test    ebx, ebx
.text:004056F5                 jz      short loc_4056D7
.text:004056F7                 call    sub_405CD0
.text:004056F7 sub_4056C0      endp
.text:004056F7
.text:004056F7 ; ---------------------------------------------------------------------------
.text:004056FC                 align 10h
.text:00405700                 sub     esp, 0Ch
.text:00405703                 xor     edx, edx
.text:00405705                 mov     ecx, [esp+14h]
.text:00405709                 mov     [esp+8], ebx
.text:0040570D                 mov     eax, 0FFFFFFFFh
.text:00405712                 mov     ebx, [esp+10h]
.text:00405716                 div     ecx
.text:00405718                 cmp     eax, ebx
.text:0040571A                 jb      short loc_405738
.text:0040571C                 mov     [esp+4], ecx
.text:00405720                 mov     [esp], ebx
.text:00405723                 call    calloc
.text:00405728                 test    eax, eax
.text:0040572A                 jz      short loc_405734
.text:0040572C
.text:0040572C loc_40572C:                             ; CODE XREF: .text:00405736↓j
.text:0040572C                 mov     ebx, [esp+8]
.text:00405730                 add     esp, 0Ch
.text:00405733                 retn
.text:00405734 ; ---------------------------------------------------------------------------
.text:00405734
.text:00405734 loc_405734:                             ; CODE XREF: .text:0040572A↑j
.text:00405734                 test    ebx, ebx
.text:00405736                 jz      short loc_40572C
.text:00405738
.text:00405738 loc_405738:                             ; CODE XREF: .text:0040571A↑j
.text:00405738                 call    sub_405CD0
.text:00405738 ; ---------------------------------------------------------------------------
.text:0040573D                 align 10h
.text:00405740                 sub     esp, 1Ch
.text:00405743                 mov     [esp+18h], ebx
.text:00405747                 mov     ebx, [esp+24h]
.text:0040574B                 mov     [esp], ebx
.text:0040574E                 call    malloc
.text:00405753                 test    eax, eax
.text:00405755                 mov     edx, eax
.text:00405757                 jz      short loc_405775
.text:00405759
.text:00405759 loc_405759:                             ; CODE XREF: .text:00405777↓j
.text:00405759                 mov     [esp+8], ebx
.text:0040575D                 mov     ecx, [esp+20h]
.text:00405761                 mov     [esp], edx
.text:00405764                 mov     [esp+4], ecx
.text:00405768                 call    memcpy
.text:0040576D                 mov     ebx, [esp+18h]
.text:00405771                 add     esp, 1Ch
.text:00405774                 retn
.text:00405775 ; ---------------------------------------------------------------------------
.text:00405775
.text:00405775 loc_405775:                             ; CODE XREF: .text:00405757↑j
.text:00405775                 test    ebx, ebx
.text:00405777                 jz      short loc_405759
.text:00405779                 call    sub_405CD0
.text:00405779 ; ---------------------------------------------------------------------------
.text:0040577E                 align 10h
.text:00405780
.text:00405780 ; =============== S U B R O U T I N E =======================================
.text:00405780
.text:00405780
.text:00405780 ; int __cdecl sub_405780(char *)
.text:00405780 sub_405780      proc near               ; CODE XREF: sub_401CE0+3AD↑p
.text:00405780
.text:00405780 Str             = dword ptr -1Ch
.text:00405780 Src             = dword ptr -18h
.text:00405780 Size            = dword ptr -14h
.text:00405780 var_8           = dword ptr -8
.text:00405780 var_4           = dword ptr -4
.text:00405780 arg_0           = dword ptr  4
.text:00405780
.text:00405780                 sub     esp, 1Ch
.text:00405783                 mov     [esp+1Ch+var_4], esi
.text:00405787                 mov     esi, [esp+1Ch+arg_0]
.text:0040578B                 mov     [esp+1Ch+var_8], ebx
.text:0040578F                 mov     [esp+1Ch+Str], esi ; Str
.text:00405792                 call    strlen
.text:00405797                 lea     ebx, [eax+1]
.text:0040579A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040579D                 call    malloc
.text:004057A2                 test    eax, eax
.text:004057A4                 jz      short loc_4057C2
.text:004057A6
.text:004057A6 loc_4057A6:                             ; CODE XREF: sub_405780+44↓j
.text:004057A6                 mov     [esp+1Ch+Size], ebx ; Size
.text:004057AA                 mov     [esp+1Ch+Src], esi ; Src
.text:004057AE                 mov     [esp+1Ch+Str], eax ; void *
.text:004057B1                 call    memcpy
.text:004057B6                 mov     ebx, [esp+1Ch+var_8]
.text:004057BA                 mov     esi, [esp+1Ch+var_4]
.text:004057BE                 add     esp, 1Ch
.text:004057C1                 retn
.text:004057C2 ; ---------------------------------------------------------------------------
.text:004057C2
.text:004057C2 loc_4057C2:                             ; CODE XREF: sub_405780+24↑j
.text:004057C2                 test    ebx, ebx
.text:004057C4                 jz      short loc_4057A6
.text:004057C6                 call    sub_405CD0
.text:004057C6 sub_405780      endp
.text:004057C6
.text:004057C6 ; ---------------------------------------------------------------------------
.text:004057CB                 align 10h
.text:004057D0
.text:004057D0 ; =============== S U B R O U T I N E =======================================
.text:004057D0
.text:004057D0
.text:004057D0 ; int __cdecl sub_4057D0(void *, int, int)
.text:004057D0 sub_4057D0      proc near               ; CODE XREF: sub_405680↑j
.text:004057D0                                         ; .text:004056AA↑p
.text:004057D0
.text:004057D0 Block           = dword ptr -1Ch
.text:004057D0 Size            = dword ptr -18h
.text:004057D0 var_C           = dword ptr -0Ch
.text:004057D0 var_8           = dword ptr -8
.text:004057D0 var_4           = dword ptr -4
.text:004057D0 arg_0           = dword ptr  4
.text:004057D0 arg_4           = dword ptr  8
.text:004057D0 arg_8           = dword ptr  0Ch
.text:004057D0
.text:004057D0                 sub     esp, 1Ch
.text:004057D3                 mov     [esp+1Ch+var_8], esi
.text:004057D7                 mov     esi, [esp+1Ch+arg_0]
.text:004057DB                 mov     [esp+1Ch+var_4], edi
.text:004057DF                 mov     edi, [esp+1Ch+arg_4]
.text:004057E3                 test    esi, esi
.text:004057E5                 mov     [esp+1Ch+var_C], ebx
.text:004057E9                 mov     ecx, [edi]
.text:004057EB                 mov     ebx, [esp+1Ch+arg_8]
.text:004057EF                 jz      short loc_405830
.text:004057F1                 xor     edx, edx
.text:004057F3                 mov     eax, 7FFFFFFFh
.text:004057F8                 div     ebx
.text:004057FA                 cmp     eax, ecx
.text:004057FC                 jb      short loc_405829
.text:004057FE                 add     ecx, ecx
.text:00405800
.text:00405800 loc_405800:                             ; CODE XREF: sub_4057D0+62↓j
.text:00405800                                         ; sub_4057D0+71↓j ...
.text:00405800                 mov     [edi], ecx
.text:00405802                 imul    ebx, ecx
.text:00405805                 mov     [esp+1Ch+Block], esi ; Block
.text:00405808                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040580C                 call    realloc
.text:00405811                 test    eax, eax
.text:00405813                 jz      short loc_405825
.text:00405815
.text:00405815 loc_405815:                             ; CODE XREF: sub_4057D0+57↓j
.text:00405815                 mov     ebx, [esp+1Ch+var_C]
.text:00405819                 mov     esi, [esp+1Ch+var_8]
.text:0040581D                 mov     edi, [esp+1Ch+var_4]
.text:00405821                 add     esp, 1Ch
.text:00405824                 retn
.text:00405825 ; ---------------------------------------------------------------------------
.text:00405825
.text:00405825 loc_405825:                             ; CODE XREF: sub_4057D0+43↑j
.text:00405825                 test    ebx, ebx
.text:00405827                 jz      short loc_405815
.text:00405829
.text:00405829 loc_405829:                             ; CODE XREF: sub_4057D0+2C↑j
.text:00405829                 call    sub_405CD0
.text:00405829 ; ---------------------------------------------------------------------------
.text:0040582E                 align 10h
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: sub_4057D0+1F↑j
.text:00405830                 test    ecx, ecx
.text:00405832                 jnz     short loc_405800
.text:00405834                 xor     edx, edx
.text:00405836                 mov     eax, 40h ; '@'
.text:0040583B                 div     ebx
.text:0040583D                 test    eax, eax
.text:0040583F                 mov     ecx, eax
.text:00405841                 jnz     short loc_405800
.text:00405843                 mov     ecx, 1
.text:00405848                 jmp     short loc_405800
.text:00405848 sub_4057D0      endp
.text:00405848
.text:00405848 ; ---------------------------------------------------------------------------
.text:0040584A                 align 10h
.text:00405850
.text:00405850 ; =============== S U B R O U T I N E =======================================
.text:00405850
.text:00405850
.text:00405850 sub_405850      proc near               ; CODE XREF: sub_401CE0+AF↑p
.text:00405850
.text:00405850 var_1C          = dword ptr -1Ch
.text:00405850 var_18          = dword ptr -18h
.text:00405850 var_14          = dword ptr -14h
.text:00405850 var_10          = dword ptr -10h
.text:00405850 var_C           = dword ptr -0Ch
.text:00405850 var_8           = dword ptr -8
.text:00405850 var_4           = dword ptr -4
.text:00405850 arg_0           = dword ptr  4
.text:00405850 arg_4           = dword ptr  8
.text:00405850 arg_8           = dword ptr  0Ch
.text:00405850 arg_C           = dword ptr  10h
.text:00405850 arg_10          = dword ptr  14h
.text:00405850
.text:00405850                 sub     esp, 1Ch
.text:00405853                 mov     edx, [esp+1Ch+arg_C]
.text:00405857                 mov     [esp+1Ch+var_4], 0
.text:0040585F                 mov     ecx, [esp+1Ch+arg_10]
.text:00405863                 mov     [esp+1Ch+var_8], 0
.text:0040586B                 mov     [esp+1Ch+var_10], edx
.text:0040586F                 mov     edx, [esp+1Ch+arg_4]
.text:00405873                 mov     [esp+1Ch+var_C], ecx
.text:00405877                 mov     ecx, [esp+1Ch+arg_8]
.text:0040587B                 mov     [esp+1Ch+var_18], edx
.text:0040587F                 mov     edx, [esp+1Ch+arg_0]
.text:00405883                 mov     [esp+1Ch+var_14], ecx
.text:00405887                 mov     [esp+1Ch+var_1C], edx
.text:0040588A                 call    sub_403F60
.text:0040588F                 add     esp, 1Ch
.text:00405892                 retn
.text:00405892 sub_405850      endp
.text:00405892
.text:00405892 ; ---------------------------------------------------------------------------
.text:00405893                 align 10h
.text:004058A0                 sub     esp, 2Ch
.text:004058A3                 mov     edx, [esp+44h]
.text:004058A7                 mov     dword ptr [esp+18h], 0
.text:004058AF                 mov     ecx, [esp+40h]
.text:004058B3                 mov     dword ptr [esp+14h], 0
.text:004058BB                 mov     [esp+1Ch], edx
.text:004058BF                 mov     edx, [esp+3Ch]
.text:004058C3                 mov     [esp+10h], ecx
.text:004058C7                 mov     ecx, [esp+38h]
.text:004058CB                 mov     [esp+0Ch], edx
.text:004058CF                 mov     edx, [esp+34h]
.text:004058D3                 mov     [esp+8], ecx
.text:004058D7                 mov     [esp+4], edx
.text:004058DB                 mov     edx, [esp+30h]
.text:004058DF                 mov     [esp], edx
.text:004058E2                 call    loc_4033D0
.text:004058E7                 add     esp, 2Ch
.text:004058EA                 retn
.text:004058EA ; ---------------------------------------------------------------------------
.text:004058EB                 align 10h
.text:004058F0                 sub     esp, 1Ch
.text:004058F3                 mov     edx, [esp+2Ch]
.text:004058F7                 mov     dword ptr [esp+18h], 0
.text:004058FF                 mov     ecx, [esp+30h]
.text:00405903                 mov     dword ptr [esp+14h], 1
.text:0040590B                 mov     [esp+0Ch], edx
.text:0040590F                 mov     edx, [esp+24h]
.text:00405913                 mov     [esp+10h], ecx
.text:00405917                 mov     ecx, [esp+28h]
.text:0040591B                 mov     [esp+4], edx
.text:0040591F                 mov     edx, [esp+20h]
.text:00405923                 mov     [esp+8], ecx
.text:00405927                 mov     [esp], edx
.text:0040592A                 call    sub_403F60
.text:0040592F                 add     esp, 1Ch
.text:00405932                 retn
.text:00405932 ; ---------------------------------------------------------------------------
.text:00405933                 align 10h
.text:00405940                 sub     esp, 2Ch
.text:00405943                 mov     edx, [esp+44h]
.text:00405947                 mov     dword ptr [esp+18h], 0
.text:0040594F                 mov     ecx, [esp+40h]
.text:00405953                 mov     dword ptr [esp+14h], 1
.text:0040595B                 mov     [esp+1Ch], edx
.text:0040595F                 mov     edx, [esp+3Ch]
.text:00405963                 mov     [esp+10h], ecx
.text:00405967                 mov     ecx, [esp+38h]
.text:0040596B                 mov     [esp+0Ch], edx
.text:0040596F                 mov     edx, [esp+34h]
.text:00405973                 mov     [esp+8], ecx
.text:00405977                 mov     [esp+4], edx
.text:0040597B                 mov     edx, [esp+30h]
.text:0040597F                 mov     [esp], edx
.text:00405982                 call    loc_4033D0
.text:00405987                 add     esp, 2Ch
.text:0040598A                 retn
.text:0040598A ; ---------------------------------------------------------------------------
.text:0040598B                 align 10h
.text:00405990                 mov     edx, [esp+4]
.text:00405994                 mov     ds:dword_40A130, edx
.text:0040599A                 retn
.text:0040599A ; ---------------------------------------------------------------------------
.text:0040599B aWriteError     db 'write error',0      ; DATA XREF: sub_4059C0:loc_405A09↓o
.text:004059A7 ; const char aSS[]
.text:004059A7 aSS             db '%s: %s',0           ; DATA XREF: sub_4059C0+77↓o
.text:004059AE ; const char aS_1[]
.text:004059AE aS_1            db '%s',0               ; DATA XREF: sub_4059C0+A0↓o
.text:004059B1 ; ---------------------------------------------------------------------------
.text:004059B1                 jmp     short sub_4059C0
.text:004059B1 ; ---------------------------------------------------------------------------
.text:004059B3                 align 10h
.text:004059C0
.text:004059C0 ; =============== S U B R O U T I N E =======================================
.text:004059C0
.text:004059C0
.text:004059C0 ; void __cdecl sub_4059C0()
.text:004059C0 sub_4059C0      proc near               ; CODE XREF: .text:004059B1↑j
.text:004059C0                                         ; DATA XREF: sub_401CE0+60↑o
.text:004059C0
.text:004059C0 Stream          = dword ptr -2Ch
.text:004059C0 ErrorMessage    = dword ptr -28h
.text:004059C0 var_24          = dword ptr -24h
.text:004059C0 var_20          = byte ptr -20h
.text:004059C0 var_1C          = dword ptr -1Ch
.text:004059C0 var_9           = byte ptr -9
.text:004059C0
.text:004059C0                 push    esi
.text:004059C1                 push    ebx
.text:004059C2                 sub     esp, 24h
.text:004059C5                 mov     edx, ds:_iob
.text:004059CB                 mov     ecx, [edx+2Ch]
.text:004059CE                 lea     esi, [edx+20h]
.text:004059D1                 shr     ecx, 5
.text:004059D4                 mov     bl, cl
.text:004059D6                 mov     ecx, [edx+20h]
.text:004059D9                 and     bl, 1
.text:004059DC                 cmp     ecx, [esi+8]
.text:004059DF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004059E2                 setz    [esp+2Ch+var_9]
.text:004059E7                 call    fclose
.text:004059EC                 test    eax, eax
.text:004059EE                 setnz   al
.text:004059F1                 test    bl, bl
.text:004059F3                 jnz     loc_405A83
.text:004059F9                 test    al, al
.text:004059FB                 jz      short loc_405A50
.text:004059FD
.text:004059FD loc_4059FD:                             ; CODE XREF: sub_4059C0+CD↓j
.text:004059FD                 call    _errno
.text:00405A02                 mov     esi, [eax]
.text:00405A04
.text:00405A04 loc_405A04:                             ; CODE XREF: sub_4059C0+C7↓j
.text:00405A04                 cmp     esi, 9
.text:00405A07                 jz      short loc_405A76
.text:00405A09
.text:00405A09 loc_405A09:                             ; CODE XREF: sub_4059C0+B8↓j
.text:00405A09                                         ; sub_4059C0+C1↓j
.text:00405A09                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00405A10                 call    ds:libintl_gettext
.text:00405A16                 mov     ebx, eax
.text:00405A18                 mov     eax, ds:dword_40A130
.text:00405A1D                 test    eax, eax
.text:00405A1F                 jz      short loc_405A56
.text:00405A21                 mov     [esp+2Ch+Stream], eax ; char *
.text:00405A24                 call    sub_406E40
.text:00405A29                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00405A2D                 mov     edx, Code
.text:00405A33                 mov     [esp+2Ch+var_1C], ebx
.text:00405A37                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00405A3F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405A43                 mov     [esp+2Ch+Stream], edx ; Code
.text:00405A46                 call    sub_407100
.text:00405A4B                 nop
.text:00405A4C                 lea     esi, [esi+0]
.text:00405A50
.text:00405A50 loc_405A50:                             ; CODE XREF: sub_4059C0+3B↑j
.text:00405A50                                         ; sub_4059C0+B4↓j ...
.text:00405A50                 add     esp, 24h
.text:00405A53                 pop     ebx
.text:00405A54                 pop     esi
.text:00405A55                 retn
.text:00405A56 ; ---------------------------------------------------------------------------
.text:00405A56
.text:00405A56 loc_405A56:                             ; CODE XREF: sub_4059C0+5F↑j
.text:00405A56                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00405A5A                 mov     ebx, Code
.text:00405A60                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00405A68                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405A6C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00405A6F                 call    sub_407100
.text:00405A74                 jmp     short loc_405A50
.text:00405A76 ; ---------------------------------------------------------------------------
.text:00405A76
.text:00405A76 loc_405A76:                             ; CODE XREF: sub_4059C0+47↑j
.text:00405A76                 test    bl, bl
.text:00405A78                 jnz     short loc_405A09
.text:00405A7A                 cmp     [esp+2Ch+var_9], 0
.text:00405A7F                 jnz     short loc_405A50
.text:00405A81                 jmp     short loc_405A09
.text:00405A83 ; ---------------------------------------------------------------------------
.text:00405A83
.text:00405A83 loc_405A83:                             ; CODE XREF: sub_4059C0+33↑j
.text:00405A83                 xor     esi, esi
.text:00405A85                 test    al, al
.text:00405A87                 jz      loc_405A04
.text:00405A8D                 jmp     loc_4059FD
.text:00405A8D sub_4059C0      endp
.text:00405A8D
.text:00405A8D ; ---------------------------------------------------------------------------
.text:00405A92                 align 10h
.text:00405AA0
.text:00405AA0 ; =============== S U B R O U T I N E =======================================
.text:00405AA0
.text:00405AA0
.text:00405AA0 ; int __cdecl sub_405AA0(int, int, int, size_t, int, int, FILE *File)
.text:00405AA0 sub_405AA0      proc near               ; CODE XREF: sub_402CF0+219↑p
.text:00405AA0
.text:00405AA0 Block           = dword ptr -2Ch
.text:00405AA0 Size            = dword ptr -28h
.text:00405AA0 var_18          = dword ptr -18h
.text:00405AA0 var_14          = dword ptr -14h
.text:00405AA0 arg_0           = dword ptr  4
.text:00405AA0 arg_4           = dword ptr  8
.text:00405AA0 arg_8           = dword ptr  0Ch
.text:00405AA0 arg_C           = dword ptr  10h
.text:00405AA0 arg_10          = dword ptr  14h
.text:00405AA0 arg_14          = dword ptr  18h
.text:00405AA0 File            = dword ptr  1Ch
.text:00405AA0
.text:00405AA0                 push    ebp
.text:00405AA1                 push    edi
.text:00405AA2                 push    esi
.text:00405AA3                 push    ebx
.text:00405AA4                 sub     esp, 1Ch
.text:00405AA7                 mov     edx, [esp+2Ch+arg_0]
.text:00405AAB                 mov     [esp+2Ch+var_14], 0FFFFFFFFh
.text:00405AB3                 mov     ebx, [esp+2Ch+arg_4]
.text:00405AB7                 mov     ecx, [edx]
.text:00405AB9                 mov     edi, [ebx]
.text:00405ABB                 test    ecx, ecx
.text:00405ABD                 mov     [esp+2Ch+var_18], ecx
.text:00405AC1                 jz      loc_405BE7
.text:00405AC7
.text:00405AC7 loc_405AC7:                             ; CODE XREF: sub_405AA0+16C↓j
.text:00405AC7                 cmp     edi, [esp+2Ch+arg_8]
.text:00405ACB                 jb      loc_405B9E
.text:00405AD1                 mov     ebp, [esp+2Ch+var_18]
.text:00405AD5                 mov     esi, edi
.text:00405AD7                 mov     eax, [esp+2Ch+arg_8]
.text:00405ADB                 add     ebp, eax
.text:00405ADD                 sub     esi, [esp+2Ch+arg_8]
.text:00405AE1                 jnz     short loc_405AF0
.text:00405AE3                 cmp     [esp+2Ch+arg_C], edi
.text:00405AE7                 jbe     loc_405B9E
.text:00405AED                 lea     esi, [esi+0]
.text:00405AF0
.text:00405AF0 loc_405AF0:                             ; CODE XREF: sub_405AA0+41↑j
.text:00405AF0                                         ; sub_405AA0+E4↓j
.text:00405AF0                 cmp     esi, 1
.text:00405AF3                 ja      short loc_405B50
.text:00405AF5                 cmp     edi, [esp+2Ch+arg_C]
.text:00405AF9                 jnb     short loc_405B50
.text:00405AFB                 cmp     edi, 3Fh ; '?'
.text:00405AFE                 lea     ebx, [edi+40h]
.text:00405B01                 jbe     short loc_405B06
.text:00405B03                 lea     ebx, [edi+edi]
.text:00405B06
.text:00405B06 loc_405B06:                             ; CODE XREF: sub_405AA0+61↑j
.text:00405B06                 cmp     edi, ebx
.text:00405B08                 jnb     short loc_405B10
.text:00405B0A                 cmp     ebx, [esp+2Ch+arg_C]
.text:00405B0E                 jbe     short loc_405B14
.text:00405B10
.text:00405B10 loc_405B10:                             ; CODE XREF: sub_405AA0+68↑j
.text:00405B10                 mov     ebx, [esp+2Ch+arg_C]
.text:00405B14
.text:00405B14 loc_405B14:                             ; CODE XREF: sub_405AA0+6E↑j
.text:00405B14                 cmp     ebx, [esp+2Ch+arg_8]
.text:00405B18                 js      loc_405BD3
.text:00405B1E
.text:00405B1E loc_405B1E:                             ; CODE XREF: sub_405AA0+142↓j
.text:00405B1E                 mov     [esp+2Ch+Size], ebx ; Size
.text:00405B22                 mov     esi, [esp+2Ch+var_18]
.text:00405B26                 sub     ebp, esi
.text:00405B28                 mov     esi, ebx
.text:00405B2A                 sub     esi, ebp
.text:00405B2C                 mov     ebp, [esp+2Ch+var_18]
.text:00405B30                 mov     [esp+2Ch+Block], ebp ; Block
.text:00405B33                 call    realloc
.text:00405B38                 test    eax, eax
.text:00405B3A                 jz      short loc_405B9E
.text:00405B3C                 mov     [esp+2Ch+var_18], eax
.text:00405B40                 mov     edi, ebx
.text:00405B42                 mov     ebp, [esp+2Ch+var_18]
.text:00405B46                 sub     ebx, esi
.text:00405B48                 add     ebp, ebx
.text:00405B4A                 lea     esi, [esi+0]
.text:00405B50
.text:00405B50 loc_405B50:                             ; CODE XREF: sub_405AA0+53↑j
.text:00405B50                                         ; sub_405AA0+59↑j
.text:00405B50                 mov     edx, [esp+2Ch+File]
.text:00405B54                 mov     ecx, [edx+4]
.text:00405B57                 dec     ecx
.text:00405B58                 mov     [edx+4], ecx
.text:00405B5B                 test    ecx, ecx
.text:00405B5D                 js      short loc_405BC3
.text:00405B5F                 mov     ecx, [edx]
.text:00405B61                 mov     ebx, [esp+2Ch+File]
.text:00405B65                 movzx   edx, byte ptr [ecx]
.text:00405B68                 inc     ecx
.text:00405B69                 mov     [ebx], ecx
.text:00405B6B
.text:00405B6B loc_405B6B:                             ; CODE XREF: sub_405AA0+131↓j
.text:00405B6B                 cmp     edx, 0FFFFFFFFh
.text:00405B6E                 jz      short loc_405BBB
.text:00405B70                 cmp     esi, 1
.text:00405B73                 jbe     short loc_405B7A
.text:00405B75                 mov     [ebp+0], dl
.text:00405B78                 dec     esi
.text:00405B79                 inc     ebp
.text:00405B7A
.text:00405B7A loc_405B7A:                             ; CODE XREF: sub_405AA0+D3↑j
.text:00405B7A                 cmp     edx, [esp+2Ch+arg_10]
.text:00405B7E                 jz      short loc_405B8A
.text:00405B80                 cmp     edx, [esp+2Ch+arg_14]
.text:00405B84                 jnz     loc_405AF0
.text:00405B8A
.text:00405B8A loc_405B8A:                             ; CODE XREF: sub_405AA0+DE↑j
.text:00405B8A                                         ; sub_405AA0+11F↓j
.text:00405B8A                 mov     byte ptr [ebp+0], 0
.text:00405B8E                 mov     esi, [esp+2Ch+var_18]
.text:00405B92                 mov     eax, [esp+2Ch+arg_8]
.text:00405B96                 add     esi, eax
.text:00405B98                 sub     ebp, esi
.text:00405B9A                 mov     [esp+2Ch+var_14], ebp
.text:00405B9E
.text:00405B9E loc_405B9E:                             ; CODE XREF: sub_405AA0+2B↑j
.text:00405B9E                                         ; sub_405AA0+47↑j ...
.text:00405B9E                 mov     edx, [esp+2Ch+var_18]
.text:00405BA2                 mov     ebx, [esp+2Ch+arg_0]
.text:00405BA6                 mov     ebp, [esp+2Ch+arg_4]
.text:00405BAA                 mov     eax, [esp+2Ch+var_14]
.text:00405BAE                 mov     [ebx], edx
.text:00405BB0                 mov     [ebp+0], edi
.text:00405BB3
.text:00405BB3 loc_405BB3:                             ; CODE XREF: sub_405AA0+172↓j
.text:00405BB3                 add     esp, 1Ch
.text:00405BB6                 pop     ebx
.text:00405BB7                 pop     esi
.text:00405BB8                 pop     edi
.text:00405BB9                 pop     ebp
.text:00405BBA                 retn
.text:00405BBB ; ---------------------------------------------------------------------------
.text:00405BBB
.text:00405BBB loc_405BBB:                             ; CODE XREF: sub_405AA0+CE↑j
.text:00405BBB                 cmp     ebp, [esp+2Ch+var_18]
.text:00405BBF                 jnz     short loc_405B8A
.text:00405BC1                 jmp     short loc_405B9E
.text:00405BC3 ; ---------------------------------------------------------------------------
.text:00405BC3
.text:00405BC3 loc_405BC3:                             ; CODE XREF: sub_405AA0+BD↑j
.text:00405BC3                 mov     edx, [esp+2Ch+File]
.text:00405BC7                 mov     [esp+2Ch+Block], edx ; File
.text:00405BCA                 call    _filbuf
.text:00405BCF                 mov     edx, eax
.text:00405BD1                 jmp     short loc_405B6B
.text:00405BD3 ; ---------------------------------------------------------------------------
.text:00405BD3
.text:00405BD3 loc_405BD3:                             ; CODE XREF: sub_405AA0+78↑j
.text:00405BD3                 mov     eax, [esp+2Ch+arg_8]
.text:00405BD7                 sub     eax, 80000000h
.text:00405BDC                 cmp     edi, eax
.text:00405BDE                 jz      short loc_405B9E
.text:00405BE0                 mov     ebx, eax
.text:00405BE2                 jmp     loc_405B1E
.text:00405BE7 ; ---------------------------------------------------------------------------
.text:00405BE7
.text:00405BE7 loc_405BE7:                             ; CODE XREF: sub_405AA0+21↑j
.text:00405BE7                 mov     edi, [esp+2Ch+arg_C]
.text:00405BEB                 cmp     edi, 40h ; '@'
.text:00405BEE                 jbe     short loc_405BF5
.text:00405BF0                 mov     edi, 40h ; '@'
.text:00405BF5
.text:00405BF5 loc_405BF5:                             ; CODE XREF: sub_405AA0+14E↑j
.text:00405BF5                 mov     [esp+2Ch+Block], edi ; Size
.text:00405BF8                 call    malloc
.text:00405BFD                 mov     [esp+2Ch+var_18], eax
.text:00405C01                 mov     ecx, [esp+2Ch+var_18]
.text:00405C05                 mov     eax, 0FFFFFFFFh
.text:00405C0A                 test    ecx, ecx
.text:00405C0C                 jnz     loc_405AC7
.text:00405C12                 jmp     short loc_405BB3
.text:00405C12 sub_405AA0      endp
.text:00405C12
.text:00405C12 ; ---------------------------------------------------------------------------
.text:00405C14                 align 10h
.text:00405C20                 sub     esp, 0Ch
.text:00405C23                 mov     edx, [esp+14h]
.text:00405C27                 mov     dword ptr [esp+4], 5
.text:00405C2F                 mov     [esp+8], edx
.text:00405C33                 mov     edx, [esp+10h]
.text:00405C37                 mov     [esp], edx
.text:00405C3A                 call    sub_406AD0
.text:00405C3F                 add     esp, 0Ch
.text:00405C42                 retn
.text:00405C42 ; ---------------------------------------------------------------------------
.text:00405C43                 align 10h
.text:00405C50
.text:00405C50 ; =============== S U B R O U T I N E =======================================
.text:00405C50
.text:00405C50
.text:00405C50 ; int __cdecl sub_405C50(char *)
.text:00405C50 sub_405C50      proc near               ; CODE XREF: sub_402570+3D8↑p
.text:00405C50                                         ; sub_402570+418↑p
.text:00405C50
.text:00405C50 var_C           = dword ptr -0Ch
.text:00405C50 var_8           = dword ptr -8
.text:00405C50 var_4           = dword ptr -4
.text:00405C50 arg_0           = dword ptr  4
.text:00405C50
.text:00405C50                 sub     esp, 0Ch
.text:00405C53                 mov     edx, [esp+0Ch+arg_0]
.text:00405C57                 mov     [esp+0Ch+var_8], 5 ; int
.text:00405C5F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00405C66                 mov     [esp+0Ch+var_4], edx ; char *
.text:00405C6A                 call    sub_406AD0
.text:00405C6F                 add     esp, 0Ch
.text:00405C72                 retn
.text:00405C72 sub_405C50      endp
.text:00405C72
.text:00405C72 ; ---------------------------------------------------------------------------
.text:00405C73                 align 10h
.text:00405C80
.text:00405C80 ; =============== S U B R O U T I N E =======================================
.text:00405C80
.text:00405C80
.text:00405C80 ; int __cdecl sub_405C80(void *, int)
.text:00405C80 sub_405C80      proc near               ; CODE XREF: sub_402570+3C5↑p
.text:00405C80
.text:00405C80 var_C           = dword ptr -0Ch
.text:00405C80 var_8           = dword ptr -8
.text:00405C80 arg_0           = dword ptr  4
.text:00405C80 arg_4           = dword ptr  8
.text:00405C80
.text:00405C80                 sub     esp, 0Ch
.text:00405C83                 mov     edx, [esp+0Ch+arg_4]
.text:00405C87                 mov     [esp+0Ch+var_8], edx ; int
.text:00405C8B                 mov     edx, [esp+0Ch+arg_0]
.text:00405C8F                 mov     [esp+0Ch+var_C], edx ; void *
.text:00405C92                 call    sub_407710
.text:00405C97                 test    eax, eax
.text:00405C99                 jz      short loc_405C9F
.text:00405C9B                 add     esp, 0Ch
.text:00405C9E                 retn
.text:00405C9F ; ---------------------------------------------------------------------------
.text:00405C9F
.text:00405C9F loc_405C9F:                             ; CODE XREF: sub_405C80+19↑j
.text:00405C9F                 call    sub_405CD0
.text:00405C9F sub_405C80      endp
.text:00405C9F
.text:00405C9F ; ---------------------------------------------------------------------------
.text:00405CA4                 align 10h
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; DATA XREF: sub_405CD0+3↓o
.text:00405CB0                 insd
.text:00405CB1                 db      65h
.text:00405CB1                 insd
.text:00405CB3                 outsd
.text:00405CB4                 jb      short loc_405D2F
.text:00405CB6                 and     [ebp+78h], ah
.text:00405CB9                 push    74737561h
.text:00405CBE
.text:00405CBE loc_405CBE:                             ; DATA XREF: sub_405CD0+10↓o
.text:00405CBE                 db      65h
.text:00405CBE                 add     fs:0B68D0073h, ah
.text:00405CBE ; ---------------------------------------------------------------------------
.text:00405CC6                 dw 0
.text:00405CC8                 align 10h
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0 ; Attributes: noreturn
.text:00405CD0
.text:00405CD0 sub_405CD0      proc near               ; CODE XREF: sub_401CE0:loc_4022C4↑p
.text:00405CD0                                         ; sub_402570:loc_4029C2↑p ...
.text:00405CD0
.text:00405CD0 Code            = dword ptr -1Ch
.text:00405CD0 ErrorMessage    = dword ptr -18h
.text:00405CD0 var_14          = dword ptr -14h
.text:00405CD0 var_10          = byte ptr -10h
.text:00405CD0
.text:00405CD0                 sub     esp, 1Ch
.text:00405CD3                 mov     [esp+1Ch+Code], offset loc_405CB0
.text:00405CDA                 call    ds:libintl_gettext
.text:00405CE0                 mov     [esp+1Ch+var_14], (offset loc_405CBE+3) ; char *
.text:00405CE8                 mov     edx, Code
.text:00405CEE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405CF6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00405CFA                 mov     [esp+1Ch+Code], edx ; Code
.text:00405CFD                 call    sub_407100
.text:00405D02                 call    abort
.text:00405D02 sub_405CD0      endp
.text:00405D02
.text:00405D02 ; ---------------------------------------------------------------------------
.text:00405D07                 align 10h
.text:00405D10 aLiteral        db 'literal',0          ; DATA XREF: .text:00405D50↓o
.text:00405D18 aShell          db 'shell',0            ; DATA XREF: .text:00405D54↓o
.text:00405D1E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00405D58↓o
.text:00405D2B aC              db 'c',0                ; DATA XREF: .text:00405D5C↓o
.text:00405D2D byte_405D2D     db 65h, 73h             ; DATA XREF: .text:00405D60↓o
.text:00405D2F ; ---------------------------------------------------------------------------
.text:00405D2F
.text:00405D2F loc_405D2F:                             ; CODE XREF: .text:00405CB4↑j
.text:00405D2F                 arpl    [ecx+70h], sp
.text:00405D32                 add     gs:[edi+ebp*2+63h], ch
.text:00405D37                 popa
.text:00405D38                 insb
.text:00405D39                 add     gs:[ebx+6Ch], ah
.text:00405D3D                 outsd
.text:00405D3E                 arpl    [ecx+6Ch], sp
.text:00405D41                 add     gs:[ebp+0B6h], cl
.text:00405D48                 add     [ebp+27BCh], cl
.text:00405D48 ; ---------------------------------------------------------------------------
.text:00405D4E                 dw 0
.text:00405D50                 dd offset aLiteral      ; "literal"
.text:00405D54                 dd offset aShell        ; "shell"
.text:00405D58                 dd offset aShellAlways  ; "shell-always"
.text:00405D5C                 dd offset aC            ; "c"
.text:00405D60                 dd offset byte_405D2D
.text:00405D64                 dd 405D34h, 405D3Bh, 2 dup(0)
.text:00405D74                 dd 1, 2, 3, 4, 5, 6
.text:00405D8C asc_405D8C:                             ; DATA XREF: sub_405DA0+7E↓o
.text:00405D8C                                         ; sub_405DA0+A39↓o ...
.text:00405D8C                 text "UTF-16LE", '"',27h,'`'
.text:00405D92                 align 10h
.text:00405DA0
.text:00405DA0 ; =============== S U B R O U T I N E =======================================
.text:00405DA0
.text:00405DA0
.text:00405DA0 ; int __cdecl sub_405DA0(int, int, char *Str, int, int, int)
.text:00405DA0 sub_405DA0      proc near               ; CODE XREF: sub_405DA0+43A↓p
.text:00405DA0                                         ; .text:00406963↓p ...
.text:00405DA0
.text:00405DA0 C               = dword ptr -4Ch
.text:00405DA0 Type            = dword ptr -48h
.text:00405DA0 SizeInBytes     = dword ptr -44h
.text:00405DA0 State           = dword ptr -40h
.text:00405DA0 var_3C          = dword ptr -3Ch
.text:00405DA0 var_38          = dword ptr -38h
.text:00405DA0 var_34          = dword ptr -34h
.text:00405DA0 var_30          = dword ptr -30h
.text:00405DA0 var_29          = byte ptr -29h
.text:00405DA0 var_28          = dword ptr -28h
.text:00405DA0 var_22          = byte ptr -22h
.text:00405DA0 var_21          = byte ptr -21h
.text:00405DA0 var_20          = dword ptr -20h
.text:00405DA0 var_1C          = dword ptr -1Ch
.text:00405DA0 var_18          = mbstate_t ptr -18h
.text:00405DA0 arg_0           = dword ptr  4
.text:00405DA0 arg_4           = dword ptr  8
.text:00405DA0 Str             = dword ptr  0Ch
.text:00405DA0 arg_C           = dword ptr  10h
.text:00405DA0 arg_10          = dword ptr  14h
.text:00405DA0 arg_14          = dword ptr  18h
.text:00405DA0
.text:00405DA0                 push    ebp
.text:00405DA1                 push    edi
.text:00405DA2                 push    esi
.text:00405DA3                 push    ebx
.text:00405DA4                 sub     esp, 3Ch
.text:00405DA7                 mov     edx, ds:__mb_cur_max
.text:00405DAD                 mov     [esp+4Ch+var_34], 0
.text:00405DB5                 mov     [esp+4Ch+var_1C], 0
.text:00405DBD                 cmp     dword ptr [edx], 1
.text:00405DC0                 mov     [esp+4Ch+var_20], 0
.text:00405DC8                 mov     [esp+4Ch+var_21], 0
.text:00405DCD                 setz    [esp+4Ch+var_22]
.text:00405DD2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00405DD7                 ja      short def_405DDD ; jumptable 00405DDD default case, cases 0,1
.text:00405DD9                 mov     edx, [esp+4Ch+arg_10]
.text:00405DDD                 jmp     ds:jpt_405DDD[edx*4] ; switch jump
.text:00405DDD ; ---------------------------------------------------------------------------
.text:00405DE4 jpt_405DDD      dd offset def_405DDD    ; DATA XREF: sub_405DA0+3D↑r
.text:00405DE4                 dd offset def_405DDD    ; jump table for switch statement
.text:00405DE4                 dd offset loc_406725
.text:00405DE4                 dd offset loc_405E00
.text:00405DE4                 dd offset loc_40674B
.text:00405DE4                 dd offset loc_406755
.text:00405DE4                 dd offset loc_406755
.text:00405E00 ; ---------------------------------------------------------------------------
.text:00405E00
.text:00405E00 loc_405E00:                             ; CODE XREF: sub_405DA0+3D↑j
.text:00405E00                                         ; DATA XREF: sub_405DA0:jpt_405DDD↑o
.text:00405E00                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00405DDD case 3
.text:00405E04                 cmp     [esp+4Ch+var_34], eax
.text:00405E08                 jnb     short loc_405E11
.text:00405E0A                 mov     ebx, [esp+4Ch+arg_0]
.text:00405E0E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405E11
.text:00405E11 loc_405E11:                             ; CODE XREF: sub_405DA0+68↑j
.text:00405E11                 mov     [esp+4Ch+var_34], 1
.text:00405E19                 mov     [esp+4Ch+var_21], 1
.text:00405E1E                 mov     [esp+4Ch+var_1C], offset asc_405D8C ; "\"'`"
.text:00405E26
.text:00405E26 loc_405E26:                             ; CODE XREF: sub_405DA0+9A6↓j
.text:00405E26                 mov     [esp+4Ch+var_20], 1
.text:00405E2E
.text:00405E2E def_405DDD:                             ; CODE XREF: sub_405DA0+37↑j
.text:00405E2E                                         ; sub_405DA0+3D↑j ...
.text:00405E2E                 xor     ebp, ebp        ; jumptable 00405DDD default case, cases 0,1
.text:00405E30
.text:00405E30 loc_405E30:                             ; CODE XREF: sub_405DA0+3DB↓j
.text:00405E30                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405E35                 jz      loc_406717
.text:00405E3B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405E3F
.text:00405E3F loc_405E3F:                             ; CODE XREF: sub_405DA0+980↓j
.text:00405E3F                 jz      loc_4066AE
.text:00405E45                 cmp     [esp+4Ch+var_21], 0
.text:00405E4A                 jz      short loc_405E90
.text:00405E4C                 mov     esi, [esp+4Ch+var_20]
.text:00405E50                 test    esi, esi
.text:00405E52                 jz      short loc_405E90
.text:00405E54                 mov     ecx, [esp+4Ch+var_20]
.text:00405E58                 lea     edi, [ecx+ebp]
.text:00405E5B                 cmp     edi, [esp+4Ch+arg_C]
.text:00405E5F                 ja      short loc_405E90
.text:00405E61                 cld
.text:00405E62                 mov     ebx, [esp+4Ch+Str]
.text:00405E66                 mov     edi, [esp+4Ch+var_1C]
.text:00405E6A                 add     ebx, ebp
.text:00405E6C                 mov     esi, ebx
.text:00405E6E                 cmp     ecx, ecx
.text:00405E70                 repe cmpsb
.text:00405E72                 jnz     short loc_405E90
.text:00405E74                 mov     edx, [esp+4Ch+arg_4]
.text:00405E78                 cmp     [esp+4Ch+var_34], edx
.text:00405E7C                 jnb     short loc_405E8A
.text:00405E7E                 mov     ecx, [esp+4Ch+arg_0]
.text:00405E82                 mov     eax, [esp+4Ch+var_34]
.text:00405E86                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00405E8A
.text:00405E8A loc_405E8A:                             ; CODE XREF: sub_405DA0+DC↑j
.text:00405E8A                 inc     [esp+4Ch+var_34]
.text:00405E8E                 mov     esi, esi
.text:00405E90
.text:00405E90 loc_405E90:                             ; CODE XREF: sub_405DA0+AA↑j
.text:00405E90                                         ; sub_405DA0+B2↑j ...
.text:00405E90                 mov     edi, [esp+4Ch+Str]
.text:00405E94                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00405E99                 movzx   eax, bl
.text:00405E9C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00405E9F                 ja      def_405EA5      ; jumptable 00405EA5 default case, cases 1-6,14-31,64
.text:00405EA5                 jmp     ds:jpt_405EA5[eax*4] ; switch jump
.text:00405EA5 ; ---------------------------------------------------------------------------
.text:00405EAC jpt_405EA5      dd offset loc_4060A8, offset def_405EA5, offset def_405EA5
.text:00405EAC                                         ; DATA XREF: sub_405DA0+105↑r
.text:00405EAC                 dd offset def_405EA5, offset def_405EA5, offset def_405EA5 ; jump table for switch statement
.text:00405EAC                 dd offset def_405EA5, offset loc_406180, offset loc_40619E
.text:00405EAC                 dd offset loc_4061A2, offset loc_4061E7, offset loc_4061EB
.text:00405EAC                 dd offset loc_4061EF, offset loc_4061F3, offset def_405EA5
.text:00405EAC                 dd offset def_405EA5, offset def_405EA5, offset def_405EA5
.text:00405EAC                 dd offset def_405EA5, offset def_405EA5, offset def_405EA5
.text:00405EAC                 dd offset def_405EA5, offset def_405EA5, offset def_405EA5
.text:00405EAC                 dd offset def_405EA5, offset def_405EA5, offset def_405EA5
.text:00405EAC                 dd offset def_405EA5, offset def_405EA5, offset def_405EA5
.text:00405EAC                 dd offset def_405EA5, offset def_405EA5, offset loc_406678
.text:00405EAC                 dd offset loc_406678, offset loc_406678, offset loc_40669A
.text:00405EAC                 dd offset loc_406678, offset def_4062A2, offset loc_406678
.text:00405EAC                 dd offset loc_4061F7, offset loc_406678, offset loc_406678
.text:00405EAC                 dd offset loc_406678, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset loc_406678
.text:00405EAC                 dd offset loc_406678, offset loc_406678, offset loc_406678
.text:00405EAC                 dd offset loc_40625C, offset def_405EA5, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset loc_406678, offset loc_406671
.text:00405EAC                 dd offset def_4062A2, offset loc_406678, offset def_4062A2
.text:00405EAC                 dd offset loc_406678, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset def_4062A2, offset def_4062A2, offset def_4062A2
.text:00405EAC                 dd offset loc_406688, offset loc_406678, offset loc_406688
.text:00405EAC                 dd offset loc_40669A
.text:004060A8 ; ---------------------------------------------------------------------------
.text:004060A8
.text:004060A8 loc_4060A8:                             ; CODE XREF: sub_405DA0+105↑j
.text:004060A8                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:004060A8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405EA5 case 0
.text:004060AD                 lea     eax, [ebp+1]
.text:004060B0                 jz      loc_406160
.text:004060B6                 mov     esi, [esp+4Ch+arg_4]
.text:004060BA                 cmp     [esp+4Ch+var_34], esi
.text:004060BE                 jnb     short loc_4060CC
.text:004060C0                 mov     eax, [esp+4Ch+arg_0]
.text:004060C4                 mov     ebx, [esp+4Ch+var_34]
.text:004060C8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004060CC
.text:004060CC loc_4060CC:                             ; CODE XREF: sub_405DA0+31E↑j
.text:004060CC                 inc     [esp+4Ch+var_34]
.text:004060D0                 mov     edx, [esp+4Ch+arg_4]
.text:004060D4                 cmp     [esp+4Ch+var_34], edx
.text:004060D8                 jnb     short loc_4060E6
.text:004060DA                 mov     edi, [esp+4Ch+arg_0]
.text:004060DE                 mov     ecx, [esp+4Ch+var_34]
.text:004060E2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004060E6
.text:004060E6 loc_4060E6:                             ; CODE XREF: sub_405DA0+338↑j
.text:004060E6                 inc     [esp+4Ch+var_34]
.text:004060EA                 mov     esi, [esp+4Ch+arg_4]
.text:004060EE                 cmp     [esp+4Ch+var_34], esi
.text:004060F2                 jnb     short loc_406100
.text:004060F4                 mov     ebx, [esp+4Ch+arg_0]
.text:004060F8                 mov     eax, [esp+4Ch+var_34]
.text:004060FC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00406100
.text:00406100 loc_406100:                             ; CODE XREF: sub_405DA0+352↑j
.text:00406100                 inc     [esp+4Ch+var_34]
.text:00406104                 mov     bl, 30h ; '0'
.text:00406106                 lea     esi, [esi+0]
.text:00406109                 lea     edi, [edi+0]
.text:00406110
.text:00406110 def_4062A2:                             ; CODE XREF: sub_405DA0+105↑j
.text:00406110                                         ; sub_405DA0+463↓j ...
.text:00406110                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:00406110                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:00406115                 lea     eax, [ebp+1]
.text:00406118                 jz      short loc_406160
.text:0040611A                 mov     cl, bl
.text:0040611C                 mov     edi, [esp+4Ch+arg_14]
.text:00406120                 mov     esi, 1
.text:00406125                 shr     cl, 5
.text:00406128                 movzx   edx, cl
.text:0040612B                 mov     ecx, ebx
.text:0040612D                 and     ecx, 1Fh
.text:00406130                 shl     esi, cl
.text:00406132                 test    [edi+edx*4+4], esi
.text:00406136                 jz      short loc_406152
.text:00406138
.text:00406138 loc_406138:                             ; CODE XREF: sub_405DA0+3FC↓j
.text:00406138                 mov     edx, [esp+4Ch+arg_4]
.text:0040613C                 cmp     [esp+4Ch+var_34], edx
.text:00406140                 jnb     short loc_40614E
.text:00406142                 mov     edi, [esp+4Ch+arg_0]
.text:00406146                 mov     esi, [esp+4Ch+var_34]
.text:0040614A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040614E
.text:0040614E loc_40614E:                             ; CODE XREF: sub_405DA0+3A0↑j
.text:0040614E                 inc     [esp+4Ch+var_34]
.text:00406152
.text:00406152 loc_406152:                             ; CODE XREF: sub_405DA0+396↑j
.text:00406152                 lea     eax, [ebp+1]
.text:00406155                 lea     esi, [esi+0]
.text:00406159                 lea     edi, [edi+0]
.text:00406160
.text:00406160 loc_406160:                             ; CODE XREF: sub_405DA0+310↑j
.text:00406160                                         ; sub_405DA0+378↑j ...
.text:00406160                 mov     ebp, [esp+4Ch+arg_4]
.text:00406164                 cmp     [esp+4Ch+var_34], ebp
.text:00406168                 jnb     short loc_406175
.text:0040616A                 mov     edx, [esp+4Ch+arg_0]
.text:0040616E                 mov     ecx, [esp+4Ch+var_34]
.text:00406172                 mov     [ecx+edx], bl
.text:00406175
.text:00406175 loc_406175:                             ; CODE XREF: sub_405DA0+3C8↑j
.text:00406175                 inc     [esp+4Ch+var_34]
.text:00406179                 mov     ebp, eax
.text:0040617B                 jmp     loc_405E30
.text:00406180 ; ---------------------------------------------------------------------------
.text:00406180
.text:00406180 loc_406180:                             ; CODE XREF: sub_405DA0+105↑j
.text:00406180                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:00406180                 mov     dl, 61h ; 'a'   ; jumptable 00405EA5 case 7
.text:00406182                 lea     esi, [esi+0]
.text:00406189                 lea     edi, [edi+0]
.text:00406190
.text:00406190 loc_406190:                             ; CODE XREF: sub_405DA0+400↓j
.text:00406190                                         ; sub_405DA0+409↓j ...
.text:00406190                 cmp     [esp+4Ch+var_21], 0
.text:00406195                 lea     eax, [ebp+1]
.text:00406198                 jz      short loc_406160
.text:0040619A                 mov     bl, dl
.text:0040619C                 jmp     short loc_406138
.text:0040619E ; ---------------------------------------------------------------------------
.text:0040619E
.text:0040619E loc_40619E:                             ; CODE XREF: sub_405DA0+105↑j
.text:0040619E                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:0040619E                 mov     dl, 62h ; 'b'   ; jumptable 00405EA5 case 8
.text:004061A0                 jmp     short loc_406190
.text:004061A2 ; ---------------------------------------------------------------------------
.text:004061A2
.text:004061A2 loc_4061A2:                             ; CODE XREF: sub_405DA0+105↑j
.text:004061A2                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:004061A2                 mov     dl, 74h ; 't'   ; jumptable 00405EA5 case 9
.text:004061A4
.text:004061A4 loc_4061A4:                             ; CODE XREF: sub_405DA0+449↓j
.text:004061A4                                         ; sub_405DA0+455↓j ...
.text:004061A4                 cmp     [esp+4Ch+arg_10], 1
.text:004061A9                 jnz     short loc_406190
.text:004061AB
.text:004061AB loc_4061AB:                             ; CODE XREF: sub_405DA0+45C↓j
.text:004061AB                                         ; sub_405DA0+4C1↓j ...
.text:004061AB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00406572 cases 91,92,94,96,124
.text:004061B3                 mov     eax, [esp+4Ch+arg_14]
.text:004061B7                 mov     edx, [esp+4Ch+arg_C]
.text:004061BB                 mov     ecx, [esp+4Ch+Str]
.text:004061BF                 mov     ebx, [esp+4Ch+arg_4]
.text:004061C3                 mov     [esp+4Ch+var_38], eax ; int
.text:004061C7                 mov     ebp, [esp+4Ch+arg_0]
.text:004061CB                 mov     [esp+4Ch+State], edx ; int
.text:004061CF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004061D3                 mov     [esp+4Ch+Type], ebx ; int
.text:004061D7                 mov     [esp+4Ch+C], ebp ; int
.text:004061DA                 call    sub_405DA0
.text:004061DF
.text:004061DF loc_4061DF:                             ; CODE XREF: sub_405DA0+972↓j
.text:004061DF                 add     esp, 3Ch
.text:004061E2                 pop     ebx
.text:004061E3                 pop     esi
.text:004061E4                 pop     edi
.text:004061E5                 pop     ebp
.text:004061E6                 retn
.text:004061E7 ; ---------------------------------------------------------------------------
.text:004061E7
.text:004061E7 loc_4061E7:                             ; CODE XREF: sub_405DA0+105↑j
.text:004061E7                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:004061E7                 mov     dl, 6Eh ; 'n'   ; jumptable 00405EA5 case 10
.text:004061E9                 jmp     short loc_4061A4
.text:004061EB ; ---------------------------------------------------------------------------
.text:004061EB
.text:004061EB loc_4061EB:                             ; CODE XREF: sub_405DA0+105↑j
.text:004061EB                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:004061EB                 mov     dl, 76h ; 'v'   ; jumptable 00405EA5 case 11
.text:004061ED                 jmp     short loc_406190
.text:004061EF ; ---------------------------------------------------------------------------
.text:004061EF
.text:004061EF loc_4061EF:                             ; CODE XREF: sub_405DA0+105↑j
.text:004061EF                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:004061EF                 mov     dl, 66h ; 'f'   ; jumptable 00405EA5 case 12
.text:004061F1                 jmp     short loc_406190
.text:004061F3 ; ---------------------------------------------------------------------------
.text:004061F3
.text:004061F3 loc_4061F3:                             ; CODE XREF: sub_405DA0+105↑j
.text:004061F3                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:004061F3                 mov     dl, 72h ; 'r'   ; jumptable 00405EA5 case 13
.text:004061F5                 jmp     short loc_4061A4
.text:004061F7 ; ---------------------------------------------------------------------------
.text:004061F7
.text:004061F7 loc_4061F7:                             ; CODE XREF: sub_405DA0+105↑j
.text:004061F7                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:004061F7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405EA5 case 39
.text:004061FC                 jz      short loc_4061AB ; jumptable 00406572 cases 91,92,94,96,124
.text:004061FE                 cmp     [esp+4Ch+arg_10], 2
.text:00406203                 jnz     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:00406203                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:00406209                 mov     edx, [esp+4Ch+arg_4]
.text:0040620D                 cmp     [esp+4Ch+var_34], edx
.text:00406211                 jnb     short loc_40621F
.text:00406213                 mov     ecx, [esp+4Ch+arg_0]
.text:00406217                 mov     edi, [esp+4Ch+var_34]
.text:0040621B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040621F
.text:0040621F loc_40621F:                             ; CODE XREF: sub_405DA0+471↑j
.text:0040621F                 inc     [esp+4Ch+var_34]
.text:00406223                 mov     eax, [esp+4Ch+arg_4]
.text:00406227                 cmp     [esp+4Ch+var_34], eax
.text:0040622B                 jnb     short loc_406239
.text:0040622D                 mov     esi, [esp+4Ch+arg_0]
.text:00406231                 mov     edx, [esp+4Ch+var_34]
.text:00406235                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00406239
.text:00406239 loc_406239:                             ; CODE XREF: sub_405DA0+48B↑j
.text:00406239                 inc     [esp+4Ch+var_34]
.text:0040623D                 mov     edi, [esp+4Ch+arg_4]
.text:00406241                 cmp     [esp+4Ch+var_34], edi
.text:00406245                 jnb     short loc_406253
.text:00406247                 mov     ecx, [esp+4Ch+arg_0]
.text:0040624B                 mov     eax, [esp+4Ch+var_34]
.text:0040624F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00406253
.text:00406253 loc_406253:                             ; CODE XREF: sub_405DA0+4A5↑j
.text:00406253                                         ; sub_405DA0+5C4↓j ...
.text:00406253                 inc     [esp+4Ch+var_34]
.text:00406257                 jmp     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:00406257                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:0040625C ; ---------------------------------------------------------------------------
.text:0040625C
.text:0040625C loc_40625C:                             ; CODE XREF: sub_405DA0+105↑j
.text:0040625C                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:0040625C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405EA5 case 63
.text:00406261                 jz      loc_4061AB      ; jumptable 00406572 cases 91,92,94,96,124
.text:00406267                 cmp     [esp+4Ch+arg_10], 3
.text:0040626C                 jnz     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:0040626C                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:00406272                 lea     edx, [ebp+2]
.text:00406275                 cmp     edx, [esp+4Ch+arg_C]
.text:00406279                 jnb     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:00406279                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:0040627F                 mov     esi, [esp+4Ch+Str]
.text:00406283                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00406288                 jnz     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:00406288                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:0040628E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00406293                 movsx   eax, cl
.text:00406296                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00406299                 cmp     eax, 1Dh
.text:0040629C                 ja      def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:0040629C                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:004062A2                 jmp     ds:jpt_4062A2[eax*4] ; switch jump
.text:004062A2 ; ---------------------------------------------------------------------------
.text:004062A9                 align 4
.text:004062AC jpt_4062A2      dd offset loc_406324    ; DATA XREF: sub_405DA0+502↑r
.text:004062AC                 dd offset def_4062A2    ; jump table for switch statement
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset loc_406324
.text:004062AC                 dd offset loc_406324
.text:004062AC                 dd offset loc_406324
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset loc_406324
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset loc_406324
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset def_4062A2
.text:004062AC                 dd offset loc_406324
.text:004062AC                 dd offset loc_406324
.text:004062AC                 dd offset loc_406324
.text:00406324 ; ---------------------------------------------------------------------------
.text:00406324
.text:00406324 loc_406324:                             ; CODE XREF: sub_405DA0+502↑j
.text:00406324                                         ; DATA XREF: sub_405DA0:jpt_4062A2↑o
.text:00406324                 mov     ebp, edx        ; jumptable 004062A2 cases 33,39-41,45,47,60-62
.text:00406326                 mov     bl, cl
.text:00406328                 mov     edx, [esp+4Ch+arg_4]
.text:0040632C                 cmp     [esp+4Ch+var_34], edx
.text:00406330                 jnb     short loc_40633E
.text:00406332                 mov     ecx, [esp+4Ch+arg_0]
.text:00406336                 mov     edi, [esp+4Ch+var_34]
.text:0040633A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040633E
.text:0040633E loc_40633E:                             ; CODE XREF: sub_405DA0+590↑j
.text:0040633E                 inc     [esp+4Ch+var_34]
.text:00406342                 mov     eax, [esp+4Ch+arg_4]
.text:00406346                 cmp     [esp+4Ch+var_34], eax
.text:0040634A                 jnb     short loc_406358
.text:0040634C                 mov     edx, [esp+4Ch+arg_0]
.text:00406350                 mov     esi, [esp+4Ch+var_34]
.text:00406354                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00406358
.text:00406358 loc_406358:                             ; CODE XREF: sub_405DA0+5AA↑j
.text:00406358                 inc     [esp+4Ch+var_34]
.text:0040635C                 mov     edi, [esp+4Ch+arg_4]
.text:00406360                 cmp     [esp+4Ch+var_34], edi
.text:00406364                 jnb     loc_406253
.text:0040636A                 mov     eax, [esp+4Ch+arg_0]
.text:0040636E                 mov     ecx, [esp+4Ch+var_34]
.text:00406372                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00406376                 jmp     loc_406253
.text:00406376 ; ---------------------------------------------------------------------------
.text:0040637B                 align 10h
.text:00406380
.text:00406380 def_405EA5:                             ; CODE XREF: sub_405DA0+FF↑j
.text:00406380                                         ; sub_405DA0+105↑j
.text:00406380                                         ; DATA XREF: ...
.text:00406380                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00405EA5 default case, cases 1-6,14-31,64
.text:00406385                 jz      loc_4064B0
.text:0040638B                 mov     [esp+4Ch+var_28], 1
.text:00406393                 mov     esi, ds:__mb_cur_max
.text:00406399                 movzx   edx, bl
.text:0040639C                 cmp     dword ptr [esi], 1
.text:0040639F                 jz      loc_406494
.text:004063A5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004063AD                 mov     [esp+4Ch+C], edx ; C
.text:004063B0                 call    _isctype
.text:004063B5
.text:004063B5 loc_4063B5:                             ; CODE XREF: sub_405DA0+705↓j
.text:004063B5                 test    eax, eax
.text:004063B7                 setnz   [esp+4Ch+var_29]
.text:004063BC
.text:004063BC loc_4063BC:                             ; CODE XREF: sub_405DA0+7A5↓j
.text:004063BC                 cmp     [esp+4Ch+var_21], 0
.text:004063C1                 lea     eax, [ebp+1]
.text:004063C4                 jz      loc_406160
.text:004063CA                 cmp     [esp+4Ch+var_29], 0
.text:004063CF                 jnz     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:004063CF                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:004063D5
.text:004063D5 loc_4063D5:                             ; CODE XREF: sub_405DA0+7AB↓j
.text:004063D5                 mov     eax, [esp+4Ch+var_28]
.text:004063D9                 lea     edx, [eax+ebp]
.text:004063DC                 lea     esi, [esi+0]
.text:004063E0
.text:004063E0 loc_4063E0:                             ; CODE XREF: sub_405DA0+6EF↓j
.text:004063E0                 cmp     [esp+4Ch+var_21], 0
.text:004063E5                 jz      short loc_406460
.text:004063E7                 cmp     [esp+4Ch+var_29], 0
.text:004063EC                 jnz     short loc_406460
.text:004063EE                 mov     edi, [esp+4Ch+arg_4]
.text:004063F2                 cmp     [esp+4Ch+var_34], edi
.text:004063F6                 jnb     short loc_406404
.text:004063F8                 mov     esi, [esp+4Ch+arg_0]
.text:004063FC                 mov     eax, [esp+4Ch+var_34]
.text:00406400                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00406404
.text:00406404 loc_406404:                             ; CODE XREF: sub_405DA0+656↑j
.text:00406404                 inc     [esp+4Ch+var_34]
.text:00406408                 mov     ecx, [esp+4Ch+arg_4]
.text:0040640C                 cmp     [esp+4Ch+var_34], ecx
.text:00406410                 jnb     short loc_406425
.text:00406412                 mov     cl, bl
.text:00406414                 mov     esi, [esp+4Ch+arg_0]
.text:00406418                 mov     edi, [esp+4Ch+var_34]
.text:0040641C                 shr     cl, 6
.text:0040641F                 add     cl, 30h ; '0'
.text:00406422                 mov     [edi+esi], cl
.text:00406425
.text:00406425 loc_406425:                             ; CODE XREF: sub_405DA0+670↑j
.text:00406425                 inc     [esp+4Ch+var_34]
.text:00406429                 mov     edi, [esp+4Ch+arg_4]
.text:0040642D                 cmp     [esp+4Ch+var_34], edi
.text:00406431                 jnb     short loc_406449
.text:00406433                 mov     cl, bl
.text:00406435                 mov     esi, [esp+4Ch+arg_0]
.text:00406439                 shr     cl, 3
.text:0040643C                 mov     edi, [esp+4Ch+var_34]
.text:00406440                 and     cl, 7
.text:00406443                 add     cl, 30h ; '0'
.text:00406446                 mov     [edi+esi], cl
.text:00406449
.text:00406449 loc_406449:                             ; CODE XREF: sub_405DA0+691↑j
.text:00406449                 inc     [esp+4Ch+var_34]
.text:0040644D                 and     bl, 7
.text:00406450                 add     bl, 30h ; '0'
.text:00406453                 lea     esi, [esi+0]
.text:00406459                 lea     edi, [edi+0]
.text:00406460
.text:00406460 loc_406460:                             ; CODE XREF: sub_405DA0+645↑j
.text:00406460                                         ; sub_405DA0+64C↑j
.text:00406460                 lea     eax, [ebp+1]
.text:00406463                 cmp     edx, eax
.text:00406465                 jbe     loc_406160
.text:0040646B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040646F                 cmp     [esp+4Ch+var_34], ebp
.text:00406473                 jnb     short loc_406480
.text:00406475                 mov     ecx, [esp+4Ch+arg_0]
.text:00406479                 mov     edi, [esp+4Ch+var_34]
.text:0040647D                 mov     [edi+ecx], bl
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: sub_405DA0+6D3↑j
.text:00406480                 inc     [esp+4Ch+var_34]
.text:00406484                 mov     ebp, eax
.text:00406486                 mov     eax, [esp+4Ch+Str]
.text:0040648A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040648F                 jmp     loc_4063E0
.text:00406494 ; ---------------------------------------------------------------------------
.text:00406494
.text:00406494 loc_406494:                             ; CODE XREF: sub_405DA0+5FF↑j
.text:00406494                 mov     ecx, ds:_pctype
.text:0040649A                 mov     edi, [ecx]
.text:0040649C                 movzx   eax, word ptr [edi+edx*2]
.text:004064A0                 and     eax, 157h
.text:004064A5                 jmp     loc_4063B5
.text:004064A5 ; ---------------------------------------------------------------------------
.text:004064AA                 align 10h
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: sub_405DA0+5E5↑j
.text:004064B0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004064B5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004064BD                 mov     [esp+4Ch+var_28], 0
.text:004064C5                 mov     [esp+4Ch+var_29], 1
.text:004064CA                 jz      loc_40665C
.text:004064D0
.text:004064D0 loc_4064D0:                             ; CODE XREF: sub_405DA0+8CC↓j
.text:004064D0                 mov     ecx, [esp+4Ch+arg_C]
.text:004064D4                 lea     edx, [esp+4Ch+var_18]
.text:004064D8                 mov     edi, [esp+4Ch+Str]
.text:004064DC                 mov     [esp+4Ch+State], edx ; State
.text:004064E0                 lea     esi, [esp+4Ch+var_18._State]
.text:004064E4                 sub     ecx, ebp
.text:004064E6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004064EA                 add     edi, ebp
.text:004064EC                 mov     [esp+4Ch+var_30], edi
.text:004064F0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004064F4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004064F7                 call    mbrtowc
.text:004064FC                 test    eax, eax
.text:004064FE                 mov     edi, eax
.text:00406500                 jz      short loc_406540
.text:00406502                 cmp     eax, 0FFFFFFFFh
.text:00406505                 jz      loc_406652
.text:0040650B                 cmp     eax, 0FFFFFFFEh
.text:0040650E                 jz      loc_406612
.text:00406514                 cmp     [esp+4Ch+arg_10], 1
.text:00406519                 jz      short loc_406550
.text:0040651B
.text:0040651B loc_40651B:                             ; CODE XREF: sub_405DA0+7B9↓j
.text:0040651B                                         ; sub_405DA0+86D↓j
.text:0040651B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00406520                 mov     [esp+4Ch+Type], 157h ; Type
.text:00406528                 mov     [esp+4Ch+C], ecx ; C
.text:0040652B                 call    iswctype
.text:00406530                 test    eax, eax
.text:00406532                 jnz     short loc_406539
.text:00406534                 mov     [esp+4Ch+var_29], 0
.text:00406539
.text:00406539 loc_406539:                             ; CODE XREF: sub_405DA0+792↑j
.text:00406539                 mov     [esp+4Ch+var_28], edi
.text:0040653D                 lea     esi, [esi+0]
.text:00406540
.text:00406540 loc_406540:                             ; CODE XREF: sub_405DA0+760↑j
.text:00406540                                         ; sub_405DA0+87B↓j ...
.text:00406540                 cmp     [esp+4Ch+var_28], 1
.text:00406545                 jbe     loc_4063BC
.text:0040654B                 jmp     loc_4063D5
.text:00406550 ; ---------------------------------------------------------------------------
.text:00406550
.text:00406550 loc_406550:                             ; CODE XREF: sub_405DA0+779↑j
.text:00406550                 cmp     [esp+4Ch+arg_10], eax
.text:00406554                 mov     edx, 1
.text:00406559                 jnb     short loc_40651B
.text:0040655B
.text:0040655B loc_40655B:                             ; CODE XREF: sub_405DA0+867↓j
.text:0040655B                 mov     ecx, [esp+4Ch+Str]
.text:0040655F                 lea     esi, [edx+ebp]
.text:00406562                 movsx   eax, byte ptr [esi+ecx]
.text:00406566                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00406569                 cmp     eax, 21h
.text:0040656C                 ja      def_406572      ; jumptable 00406572 default case, cases 93,95,97-123
.text:00406572                 jmp     ds:jpt_406572[eax*4] ; switch jump
.text:00406572 ; ---------------------------------------------------------------------------
.text:00406579                 align 4
.text:0040657C jpt_406572      dd offset loc_4061AB    ; DATA XREF: sub_405DA0+7D2↑r
.text:0040657C                 dd offset loc_4061AB    ; jump table for switch statement
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset loc_4061AB
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset loc_4061AB
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset def_406572
.text:0040657C                 dd offset loc_4061AB
.text:00406604 ; ---------------------------------------------------------------------------
.text:00406604
.text:00406604 def_406572:                             ; CODE XREF: sub_405DA0+7CC↑j
.text:00406604                                         ; sub_405DA0+7D2↑j
.text:00406604                                         ; DATA XREF: ...
.text:00406604                 inc     edx             ; jumptable 00406572 default case, cases 93,95,97-123
.text:00406605                 cmp     edx, edi
.text:00406607                 jb      loc_40655B
.text:0040660D                 jmp     loc_40651B
.text:00406612 ; ---------------------------------------------------------------------------
.text:00406612
.text:00406612 loc_406612:                             ; CODE XREF: sub_405DA0+76E↑j
.text:00406612                 cmp     ebp, [esp+4Ch+arg_C]
.text:00406616                 mov     [esp+4Ch+var_29], 0
.text:0040661B                 jnb     loc_406540
.text:00406621                 mov     eax, [esp+4Ch+var_30]
.text:00406625                 cmp     byte ptr [eax], 0
.text:00406628                 jz      loc_406540
.text:0040662E
.text:0040662E loc_40662E:                             ; CODE XREF: sub_405DA0+8AB↓j
.text:0040662E                 inc     [esp+4Ch+var_28]
.text:00406632                 mov     esi, [esp+4Ch+var_28]
.text:00406636                 lea     eax, [esi+ebp]
.text:00406639                 cmp     eax, [esp+4Ch+arg_C]
.text:0040663D                 jnb     loc_406540
.text:00406643                 mov     edi, [esp+4Ch+Str]
.text:00406647                 cmp     byte ptr [eax+edi], 0
.text:0040664B                 jnz     short loc_40662E
.text:0040664D                 jmp     loc_406540
.text:00406652 ; ---------------------------------------------------------------------------
.text:00406652
.text:00406652 loc_406652:                             ; CODE XREF: sub_405DA0+765↑j
.text:00406652                 mov     [esp+4Ch+var_29], 0
.text:00406657                 jmp     loc_406540
.text:0040665C ; ---------------------------------------------------------------------------
.text:0040665C
.text:0040665C loc_40665C:                             ; CODE XREF: sub_405DA0+72A↑j
.text:0040665C                 mov     edx, [esp+4Ch+Str]
.text:00406660                 mov     [esp+4Ch+C], edx ; Str
.text:00406663                 call    strlen
.text:00406668                 mov     [esp+4Ch+arg_C], eax
.text:0040666C                 jmp     loc_4064D0
.text:00406671 ; ---------------------------------------------------------------------------
.text:00406671
.text:00406671 loc_406671:                             ; CODE XREF: sub_405DA0+105↑j
.text:00406671                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:00406671                 mov     dl, bl          ; jumptable 00405EA5 case 92
.text:00406673                 jmp     loc_4061A4
.text:00406678 ; ---------------------------------------------------------------------------
.text:00406678
.text:00406678 loc_406678:                             ; CODE XREF: sub_405DA0+105↑j
.text:00406678                                         ; sub_405DA0+902↓j
.text:00406678                                         ; DATA XREF: ...
.text:00406678                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00405EA5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040667D                 jnz     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:0040667D                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:00406683                 jmp     loc_4061AB      ; jumptable 00406572 cases 91,92,94,96,124
.text:00406688 ; ---------------------------------------------------------------------------
.text:00406688
.text:00406688 loc_406688:                             ; CODE XREF: sub_405DA0+105↑j
.text:00406688                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:00406688                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00405EA5 cases 123,125
.text:0040668D                 jz      short loc_4066A4
.text:0040668F                 cmp     [esp+4Ch+arg_C], 1
.text:00406694
.text:00406694 loc_406694:                             ; CODE XREF: sub_405DA0+90C↓j
.text:00406694                 jnz     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:00406694                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:0040669A
.text:0040669A loc_40669A:                             ; CODE XREF: sub_405DA0+105↑j
.text:0040669A                                         ; DATA XREF: sub_405DA0:jpt_405EA5↑o
.text:0040669A                 test    ebp, ebp        ; jumptable 00405EA5 cases 35,126
.text:0040669C                 jnz     def_4062A2      ; jumptable 00405EA5 cases 37,43-58,65-90,93,95,97-122
.text:0040669C                                         ; jumptable 004062A2 default case, cases 34-38,42-44,46,48-59
.text:004066A2                 jmp     short loc_406678 ; jumptable 00405EA5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004066A4 ; ---------------------------------------------------------------------------
.text:004066A4
.text:004066A4 loc_4066A4:                             ; CODE XREF: sub_405DA0+8ED↑j
.text:004066A4                 mov     esi, [esp+4Ch+Str]
.text:004066A8                 cmp     byte ptr [esi+1], 0
.text:004066AC                 jmp     short loc_406694
.text:004066AE ; ---------------------------------------------------------------------------
.text:004066AE
.text:004066AE loc_4066AE:                             ; CODE XREF: sub_405DA0:loc_405E3F↑j
.text:004066AE                 test    ebp, ebp
.text:004066B0                 jnz     short loc_4066BD
.text:004066B2                 cmp     [esp+4Ch+arg_10], 1
.text:004066B7                 jz      loc_4061AB      ; jumptable 00406572 cases 91,92,94,96,124
.text:004066BD
.text:004066BD loc_4066BD:                             ; CODE XREF: sub_405DA0+910↑j
.text:004066BD                 mov     esi, [esp+4Ch+var_1C]
.text:004066C1                 test    esi, esi
.text:004066C3                 jz      short loc_4066F8
.text:004066C5                 mov     edi, [esp+4Ch+var_1C]
.text:004066C9                 movzx   eax, byte ptr [edi]
.text:004066CC                 test    al, al
.text:004066CE                 jz      short loc_4066F8
.text:004066D0
.text:004066D0 loc_4066D0:                             ; CODE XREF: sub_405DA0+956↓j
.text:004066D0                 mov     ebp, [esp+4Ch+arg_4]
.text:004066D4                 cmp     [esp+4Ch+var_34], ebp
.text:004066D8                 jnb     short loc_4066E5
.text:004066DA                 mov     ecx, [esp+4Ch+arg_0]
.text:004066DE                 mov     ebx, [esp+4Ch+var_34]
.text:004066E2                 mov     [ebx+ecx], al
.text:004066E5
.text:004066E5 loc_4066E5:                             ; CODE XREF: sub_405DA0+938↑j
.text:004066E5                 inc     [esp+4Ch+var_1C]
.text:004066E9                 inc     [esp+4Ch+var_34]
.text:004066ED                 mov     edx, [esp+4Ch+var_1C]
.text:004066F1                 movzx   eax, byte ptr [edx]
.text:004066F4                 test    al, al
.text:004066F6                 jnz     short loc_4066D0
.text:004066F8
.text:004066F8 loc_4066F8:                             ; CODE XREF: sub_405DA0+923↑j
.text:004066F8                                         ; sub_405DA0+92E↑j
.text:004066F8                 mov     eax, [esp+4Ch+arg_4]
.text:004066FC                 cmp     [esp+4Ch+var_34], eax
.text:00406700                 jnb     short loc_40670E
.text:00406702                 mov     edi, [esp+4Ch+arg_0]
.text:00406706                 mov     esi, [esp+4Ch+var_34]
.text:0040670A                 mov     byte ptr [esi+edi], 0
.text:0040670E
.text:0040670E loc_40670E:                             ; CODE XREF: sub_405DA0+960↑j
.text:0040670E                 mov     eax, [esp+4Ch+var_34]
.text:00406712                 jmp     loc_4061DF
.text:00406717 ; ---------------------------------------------------------------------------
.text:00406717
.text:00406717 loc_406717:                             ; CODE XREF: sub_405DA0+95↑j
.text:00406717                 mov     ebx, [esp+4Ch+Str]
.text:0040671B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00406720                 jmp     loc_405E3F
.text:00406725 ; ---------------------------------------------------------------------------
.text:00406725
.text:00406725 loc_406725:                             ; CODE XREF: sub_405DA0+3D↑j
.text:00406725                                         ; DATA XREF: sub_405DA0:jpt_405DDD↑o
.text:00406725                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00405DDD case 2
.text:00406729                 cmp     [esp+4Ch+var_34], edx
.text:0040672D                 jnb     short loc_406736
.text:0040672F                 mov     ecx, [esp+4Ch+arg_0]
.text:00406733                 mov     byte ptr [ecx], 27h ; '''
.text:00406736
.text:00406736 loc_406736:                             ; CODE XREF: sub_405DA0+98D↑j
.text:00406736                 mov     [esp+4Ch+var_34], 1
.text:0040673E                 mov     [esp+4Ch+var_1C], 405D8Eh
.text:00406746                 jmp     loc_405E26
.text:0040674B ; ---------------------------------------------------------------------------
.text:0040674B
.text:0040674B loc_40674B:                             ; CODE XREF: sub_405DA0+3D↑j
.text:0040674B                                         ; DATA XREF: sub_405DA0:jpt_405DDD↑o
.text:0040674B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00405DDD case 4
.text:00406750                 jmp     def_405DDD      ; jumptable 00405DDD default case, cases 0,1
.text:00406755 ; ---------------------------------------------------------------------------
.text:00406755
.text:00406755 loc_406755:                             ; CODE XREF: sub_405DA0+3D↑j
.text:00406755                                         ; DATA XREF: sub_405DA0:jpt_405DDD↑o
.text:00406755                 mov     [esp+4Ch+C], 405D90h ; jumptable 00405DDD cases 5,6
.text:0040675C                 call    ds:libintl_gettext
.text:00406762                 cmp     eax, 405D90h
.text:00406767                 mov     edi, eax
.text:00406769                 jz      short loc_4067E0
.text:0040676B
.text:0040676B loc_40676B:                             ; CODE XREF: sub_405DA0+A45↓j
.text:0040676B                                         ; sub_405DA0+A4C↓j
.text:0040676B                 mov     [esp+4Ch+C], 405D8Eh
.text:00406772                 call    ds:libintl_gettext
.text:00406778                 cmp     eax, 405D8Eh
.text:0040677D                 mov     edx, eax
.text:0040677F                 jz      short loc_4067D2
.text:00406781
.text:00406781 loc_406781:                             ; CODE XREF: sub_405DA0+A37↓j
.text:00406781                                         ; sub_405DA0+A3E↓j
.text:00406781                 mov     [esp+4Ch+var_1C], edi
.text:00406785                 cmp     byte ptr [edi], 0
.text:00406788                 jz      short loc_4067B8
.text:0040678A
.text:0040678A loc_40678A:                             ; CODE XREF: sub_405DA0+A16↓j
.text:0040678A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040678E                 cmp     [esp+4Ch+var_34], ecx
.text:00406792                 jnb     short loc_4067A7
.text:00406794                 mov     ebp, [esp+4Ch+var_1C]
.text:00406798                 mov     edi, [esp+4Ch+arg_0]
.text:0040679C                 mov     esi, [esp+4Ch+var_34]
.text:004067A0                 movzx   ebx, byte ptr [ebp+0]
.text:004067A4                 mov     [esi+edi], bl
.text:004067A7
.text:004067A7 loc_4067A7:                             ; CODE XREF: sub_405DA0+9F2↑j
.text:004067A7                 inc     [esp+4Ch+var_1C]
.text:004067AB                 inc     [esp+4Ch+var_34]
.text:004067AF                 mov     eax, [esp+4Ch+var_1C]
.text:004067B3                 cmp     byte ptr [eax], 0
.text:004067B6                 jnz     short loc_40678A
.text:004067B8
.text:004067B8 loc_4067B8:                             ; CODE XREF: sub_405DA0+9E8↑j
.text:004067B8                 mov     [esp+4Ch+var_21], 1
.text:004067BD                 mov     [esp+4Ch+var_1C], edx
.text:004067C1                 mov     [esp+4Ch+C], edx ; Str
.text:004067C4                 call    strlen
.text:004067C9                 mov     [esp+4Ch+var_20], eax
.text:004067CD                 jmp     def_405DDD      ; jumptable 00405DDD default case, cases 0,1
.text:004067D2 ; ---------------------------------------------------------------------------
.text:004067D2
.text:004067D2 loc_4067D2:                             ; CODE XREF: sub_405DA0+9DF↑j
.text:004067D2                 cmp     [esp+4Ch+arg_10], 6
.text:004067D7                 jnz     short loc_406781
.text:004067D9                 mov     edx, offset asc_405D8C ; "\"'`"
.text:004067DE                 jmp     short loc_406781
.text:004067E0 ; ---------------------------------------------------------------------------
.text:004067E0
.text:004067E0 loc_4067E0:                             ; CODE XREF: sub_405DA0+9C9↑j
.text:004067E0                 cmp     [esp+4Ch+arg_10], 6
.text:004067E5                 jnz     short loc_40676B
.text:004067E7                 mov     edi, offset asc_405D8C ; "\"'`"
.text:004067EC                 jmp     loc_40676B
.text:004067EC sub_405DA0      endp
.text:004067EC
.text:004067F1 ; ---------------------------------------------------------------------------
.text:004067F1                 jmp     short loc_406800
.text:004067F1 ; ---------------------------------------------------------------------------
.text:004067F3                 align 10h
.text:00406800
.text:00406800 loc_406800:                             ; CODE XREF: .text:004067F1↑j
.text:00406800                 sub     esp, 0Ch
.text:00406803                 mov     [esp+4], ebx
.text:00406807                 mov     [esp+8], esi
.text:0040680B                 call    _errno
.text:00406810                 mov     esi, [eax]
.text:00406812                 mov     dword ptr [esp], 24h ; '$'
.text:00406819                 call    sub_4055C0
.text:0040681E                 mov     edx, [esp+10h]
.text:00406822                 mov     ebx, eax
.text:00406824                 test    edx, edx
.text:00406826                 jz      short loc_406871
.text:00406828
.text:00406828 loc_406828:                             ; CODE XREF: .text:00406876↓j
.text:00406828                 mov     ecx, [edx]
.text:0040682A                 mov     [ebx], ecx
.text:0040682C                 mov     ecx, [edx+4]
.text:0040682F                 mov     [ebx+4], ecx
.text:00406832                 mov     ecx, [edx+8]
.text:00406835                 mov     [ebx+8], ecx
.text:00406838                 mov     ecx, [edx+0Ch]
.text:0040683B                 mov     [ebx+0Ch], ecx
.text:0040683E                 mov     ecx, [edx+10h]
.text:00406841                 mov     [ebx+10h], ecx
.text:00406844                 mov     ecx, [edx+14h]
.text:00406847                 mov     [ebx+14h], ecx
.text:0040684A                 mov     ecx, [edx+18h]
.text:0040684D                 mov     [ebx+18h], ecx
.text:00406850                 mov     ecx, [edx+1Ch]
.text:00406853                 mov     [ebx+1Ch], ecx
.text:00406856                 mov     ecx, [edx+20h]
.text:00406859                 mov     [ebx+20h], ecx
.text:0040685C                 call    _errno
.text:00406861                 mov     [eax], esi
.text:00406863                 mov     esi, [esp+8]
.text:00406867                 mov     eax, ebx
.text:00406869                 mov     ebx, [esp+4]
.text:0040686D                 add     esp, 0Ch
.text:00406870                 retn
.text:00406871 ; ---------------------------------------------------------------------------
.text:00406871
.text:00406871 loc_406871:                             ; CODE XREF: .text:00406826↑j
.text:00406871                 mov     edx, offset dword_40A240
.text:00406876                 jmp     short loc_406828
.text:00406876 ; ---------------------------------------------------------------------------
.text:00406878                 align 10h
.text:00406880                 mov     eax, [esp+4]
.text:00406884                 test    eax, eax
.text:00406886                 jz      short loc_406890
.text:00406888
.text:00406888 loc_406888:                             ; CODE XREF: .text:00406895↓j
.text:00406888                 mov     eax, [eax]
.text:0040688A                 retn
.text:0040688A ; ---------------------------------------------------------------------------
.text:0040688B                 align 10h
.text:00406890
.text:00406890 loc_406890:                             ; CODE XREF: .text:00406886↑j
.text:00406890                 mov     eax, offset dword_40A240
.text:00406895                 jmp     short loc_406888
.text:00406895 ; ---------------------------------------------------------------------------
.text:00406897                 align 10h
.text:004068A0                 mov     edx, [esp+4]
.text:004068A4                 test    edx, edx
.text:004068A6                 jz      short loc_4068B0
.text:004068A8
.text:004068A8 loc_4068A8:                             ; CODE XREF: .text:004068B5↓j
.text:004068A8                 mov     ecx, [esp+8]
.text:004068AC                 mov     [edx], ecx
.text:004068AE                 retn
.text:004068AE ; ---------------------------------------------------------------------------
.text:004068AF                 align 10h
.text:004068B0
.text:004068B0 loc_4068B0:                             ; CODE XREF: .text:004068A6↑j
.text:004068B0                 mov     edx, offset dword_40A240
.text:004068B5                 jmp     short loc_4068A8
.text:004068B5 ; ---------------------------------------------------------------------------
.text:004068B7                 align 10h
.text:004068C0                 sub     esp, 8
.text:004068C3                 mov     eax, [esp+0Ch]
.text:004068C7                 movzx   ecx, byte ptr [esp+10h]
.text:004068CC                 mov     [esp], ebx
.text:004068CF                 mov     ebx, [esp+14h]
.text:004068D3                 mov     [esp+4], esi
.text:004068D7                 mov     dl, cl
.text:004068D9                 shr     dl, 5
.text:004068DC                 movzx   edx, dl
.text:004068DF                 shl     edx, 2
.text:004068E2                 test    eax, eax
.text:004068E4                 lea     esi, [edx+eax+4]
.text:004068E8                 jz      short loc_406910
.text:004068EA
.text:004068EA loc_4068EA:                             ; CODE XREF: .text:00406916↓j
.text:004068EA                 mov     edx, [esi]
.text:004068EC                 and     ecx, 1Fh
.text:004068EF                 and     ebx, 1
.text:004068F2                 mov     eax, edx
.text:004068F4                 shr     eax, cl
.text:004068F6                 and     eax, 1
.text:004068F9                 xor     ebx, eax
.text:004068FB                 shl     ebx, cl
.text:004068FD                 xor     edx, ebx
.text:004068FF                 mov     [esi], edx
.text:00406901                 mov     ebx, [esp]
.text:00406904                 mov     esi, [esp+4]
.text:00406908                 add     esp, 8
.text:0040690B                 retn
.text:0040690B ; ---------------------------------------------------------------------------
.text:0040690C                 align 10h
.text:00406910
.text:00406910 loc_406910:                             ; CODE XREF: .text:004068E8↑j
.text:00406910                 lea     esi, dword_40A244[edx]
.text:00406916                 jmp     short loc_4068EA
.text:00406916 ; ---------------------------------------------------------------------------
.text:00406918                 align 10h
.text:00406920                 sub     esp, 2Ch
.text:00406923                 mov     [esp+24h], ebx
.text:00406927                 mov     ebx, [esp+40h]
.text:0040692B                 mov     [esp+28h], esi
.text:0040692F                 test    ebx, ebx
.text:00406931                 jz      short loc_406980
.text:00406933
.text:00406933 loc_406933:                             ; CODE XREF: .text:00406985↓j
.text:00406933                 call    _errno
.text:00406938                 mov     esi, [eax]
.text:0040693A                 mov     [esp+14h], ebx
.text:0040693E                 mov     edx, [ebx]
.text:00406940                 mov     ecx, [esp+38h]
.text:00406944                 mov     ebx, [esp+3Ch]
.text:00406948                 mov     [esp+10h], edx
.text:0040694C                 mov     edx, [esp+34h]
.text:00406950                 mov     [esp+0Ch], ebx
.text:00406954                 mov     [esp+8], ecx
.text:00406958                 mov     [esp+4], edx
.text:0040695C                 mov     edx, [esp+30h]
.text:00406960                 mov     [esp], edx
.text:00406963                 call    sub_405DA0
.text:00406968                 mov     ebx, eax
.text:0040696A                 call    _errno
.text:0040696F                 mov     [eax], esi
.text:00406971                 mov     esi, [esp+28h]
.text:00406975                 mov     eax, ebx
.text:00406977                 mov     ebx, [esp+24h]
.text:0040697B                 add     esp, 2Ch
.text:0040697E                 retn
.text:0040697E ; ---------------------------------------------------------------------------
.text:0040697F                 align 10h
.text:00406980
.text:00406980 loc_406980:                             ; CODE XREF: .text:00406931↑j
.text:00406980                 mov     ebx, offset dword_40A240
.text:00406985                 jmp     short loc_406933
.text:00406985 ; ---------------------------------------------------------------------------
.text:00406987                 align 10h
.text:00406990                 push    ebp
.text:00406991                 push    edi
.text:00406992                 push    esi
.text:00406993                 push    ebx
.text:00406994                 sub     esp, 2Ch
.text:00406997                 mov     ebp, [esp+48h]
.text:0040699B                 call    _errno
.text:004069A0                 mov     edx, [eax]
.text:004069A2                 test    ebp, ebp
.text:004069A4                 mov     ebx, ebp
.text:004069A6                 mov     [esp+28h], edx
.text:004069AA                 jz      loc_406A60
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: .text:00406A65↓j
.text:004069B0                 call    _errno
.text:004069B5                 mov     edi, [eax]
.text:004069B7                 mov     esi, ebp
.text:004069B9                 mov     [esp+14h], ebx
.text:004069BD                 mov     ecx, [ebx]
.text:004069BF                 mov     dword ptr [esp], 0
.text:004069C6                 mov     edx, [esp+44h]
.text:004069CA                 mov     dword ptr [esp+4], 0
.text:004069D2                 mov     eax, [esp+40h]
.text:004069D6                 mov     [esp+10h], ecx
.text:004069DA                 mov     [esp+0Ch], edx
.text:004069DE                 mov     [esp+8], eax
.text:004069E2                 call    sub_405DA0
.text:004069E7                 mov     ebx, eax
.text:004069E9                 call    _errno
.text:004069EE                 mov     [eax], edi
.text:004069F0                 lea     edi, [ebx+1]
.text:004069F3                 mov     [esp], edi
.text:004069F6                 call    sub_4055C0
.text:004069FB                 mov     [esp+24h], eax
.text:004069FF                 test    ebp, ebp
.text:00406A01                 jz      short loc_406A52
.text:00406A03
.text:00406A03 loc_406A03:                             ; CODE XREF: .text:00406A57↓j
.text:00406A03                 call    _errno
.text:00406A08                 mov     ebp, [eax]
.text:00406A0A                 mov     [esp+14h], esi
.text:00406A0E                 mov     ecx, [esi]
.text:00406A10                 mov     [esp+4], edi
.text:00406A14                 mov     edx, [esp+44h]
.text:00406A18                 mov     esi, [esp+24h]
.text:00406A1C                 mov     [esp+10h], ecx
.text:00406A20                 mov     eax, [esp+40h]
.text:00406A24                 mov     [esp+0Ch], edx
.text:00406A28                 mov     [esp], esi
.text:00406A2B                 mov     [esp+8], eax
.text:00406A2F                 call    sub_405DA0
.text:00406A34                 call    _errno
.text:00406A39                 mov     [eax], ebp
.text:00406A3B                 call    _errno
.text:00406A40                 mov     ebx, [esp+28h]
.text:00406A44                 mov     [eax], ebx
.text:00406A46                 mov     eax, [esp+24h]
.text:00406A4A                 add     esp, 2Ch
.text:00406A4D                 pop     ebx
.text:00406A4E                 pop     esi
.text:00406A4F                 pop     edi
.text:00406A50                 pop     ebp
.text:00406A51                 retn
.text:00406A52 ; ---------------------------------------------------------------------------
.text:00406A52
.text:00406A52 loc_406A52:                             ; CODE XREF: .text:00406A01↑j
.text:00406A52                 mov     esi, offset dword_40A240
.text:00406A57                 jmp     short loc_406A03
.text:00406A57 ; ---------------------------------------------------------------------------
.text:00406A59                 align 10h
.text:00406A60
.text:00406A60 loc_406A60:                             ; CODE XREF: .text:004069AA↑j
.text:00406A60                 mov     ebx, offset dword_40A240
.text:00406A65                 jmp     loc_4069B0
.text:00406A65 ; ---------------------------------------------------------------------------
.text:00406A6A                 align 10h
.text:00406A70                 sub     esp, 1Ch
.text:00406A73                 mov     edx, [esp+24h]
.text:00406A77                 mov     dword ptr [esp+0Ch], offset dword_40A240
.text:00406A7F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406A87                 mov     [esp+4], edx
.text:00406A8B                 mov     edx, [esp+20h]
.text:00406A8F                 mov     [esp], edx
.text:00406A92                 call    sub_406EE0
.text:00406A97                 add     esp, 1Ch
.text:00406A9A                 retn
.text:00406A9A ; ---------------------------------------------------------------------------
.text:00406A9B                 align 10h
.text:00406AA0                 sub     esp, 1Ch
.text:00406AA3                 mov     edx, [esp+20h]
.text:00406AA7                 mov     dword ptr [esp+0Ch], offset dword_40A240
.text:00406AAF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406AB7                 mov     [esp+4], edx
.text:00406ABB                 mov     dword ptr [esp], 0
.text:00406AC2                 call    sub_406EE0
.text:00406AC7                 add     esp, 1Ch
.text:00406ACA                 retn
.text:00406ACA ; ---------------------------------------------------------------------------
.text:00406ACB                 align 10h
.text:00406AD0
.text:00406AD0 ; =============== S U B R O U T I N E =======================================
.text:00406AD0
.text:00406AD0
.text:00406AD0 ; int __cdecl sub_406AD0(int, int, char *)
.text:00406AD0 sub_406AD0      proc near               ; CODE XREF: .text:00405C3A↑p
.text:00406AD0                                         ; sub_405C50+1A↑p
.text:00406AD0
.text:00406AD0 var_BC          = dword ptr -0BCh
.text:00406AD0 var_B8          = dword ptr -0B8h
.text:00406AD0 var_B4          = dword ptr -0B4h
.text:00406AD0 var_B0          = dword ptr -0B0h
.text:00406AD0 var_AC          = dword ptr -0ACh
.text:00406AD0 var_A8          = dword ptr -0A8h
.text:00406AD0 var_A4          = dword ptr -0A4h
.text:00406AD0 var_A0          = dword ptr -0A0h
.text:00406AD0 var_9C          = dword ptr -9Ch
.text:00406AD0 var_98          = dword ptr -98h
.text:00406AD0 var_94          = dword ptr -94h
.text:00406AD0 var_90          = dword ptr -90h
.text:00406AD0 var_8C          = dword ptr -8Ch
.text:00406AD0 var_7C          = dword ptr -7Ch
.text:00406AD0 var_78          = dword ptr -78h
.text:00406AD0 var_74          = dword ptr -74h
.text:00406AD0 var_70          = dword ptr -70h
.text:00406AD0 var_6C          = dword ptr -6Ch
.text:00406AD0 var_68          = dword ptr -68h
.text:00406AD0 var_64          = dword ptr -64h
.text:00406AD0 var_60          = dword ptr -60h
.text:00406AD0 var_5C          = dword ptr -5Ch
.text:00406AD0 var_4C          = dword ptr -4Ch
.text:00406AD0 var_48          = dword ptr -48h
.text:00406AD0 var_44          = dword ptr -44h
.text:00406AD0 var_40          = dword ptr -40h
.text:00406AD0 var_3C          = dword ptr -3Ch
.text:00406AD0 var_38          = dword ptr -38h
.text:00406AD0 var_34          = dword ptr -34h
.text:00406AD0 var_30          = dword ptr -30h
.text:00406AD0 var_2C          = dword ptr -2Ch
.text:00406AD0 arg_0           = dword ptr  4
.text:00406AD0 arg_4           = dword ptr  8
.text:00406AD0 arg_8           = dword ptr  0Ch
.text:00406AD0
.text:00406AD0                 push    ebp
.text:00406AD1                 xor     eax, eax
.text:00406AD3                 mov     ecx, 8
.text:00406AD8                 push    edi
.text:00406AD9                 push    esi
.text:00406ADA                 push    ebx
.text:00406ADB                 sub     esp, 0ACh
.text:00406AE1                 mov     ebp, [esp+0BCh+arg_4]
.text:00406AE8                 cld
.text:00406AE9                 lea     edi, [esp+0BCh+var_A8]
.text:00406AED                 mov     [esp+0BCh+var_AC], ebp
.text:00406AF1                 rep stosd
.text:00406AF3                 mov     eax, [esp+0BCh+var_8C]
.text:00406AF7                 mov     edi, [esp+0BCh+var_AC]
.text:00406AFB                 mov     esi, [esp+0BCh+var_A8]
.text:00406AFF                 mov     [esp+0BCh+var_5C], eax
.text:00406B03                 mov     ebp, [esp+0BCh+var_A4]
.text:00406B07                 mov     eax, [esp+0BCh+var_AC]
.text:00406B0B                 mov     [esp+0BCh+var_7C], edi
.text:00406B0F                 mov     ecx, [esp+0BCh+var_94]
.text:00406B13                 mov     edi, [esp+0BCh+var_A0]
.text:00406B17                 mov     [esp+0BCh+var_78], esi
.text:00406B1B                 mov     edx, [esp+0BCh+var_90]
.text:00406B1F                 mov     esi, [esp+0BCh+var_9C]
.text:00406B23                 mov     [esp+0BCh+var_4C], eax
.text:00406B27                 mov     ebx, [esp+0BCh+var_98]
.text:00406B2B                 mov     eax, [esp+0BCh+var_A8]
.text:00406B2F                 mov     [esp+0BCh+var_74], ebp
.text:00406B33                 mov     [esp+0BCh+var_70], edi
.text:00406B37                 mov     [esp+0BCh+var_6C], esi
.text:00406B3B                 mov     [esp+0BCh+var_68], ebx
.text:00406B3F                 mov     [esp+0BCh+var_64], ecx
.text:00406B43                 mov     [esp+0BCh+var_60], edx
.text:00406B47                 mov     [esp+0BCh+var_48], eax
.text:00406B4B                 mov     [esp+0BCh+var_44], ebp
.text:00406B4F                 mov     [esp+0BCh+var_40], edi
.text:00406B53                 mov     [esp+0BCh+var_3C], esi
.text:00406B5A                 mov     [esp+0BCh+var_38], ebx
.text:00406B61                 mov     ebx, [esp+0BCh+var_8C]
.text:00406B65                 mov     [esp+0BCh+var_30], edx
.text:00406B6C                 mov     edx, [esp+0BCh+arg_8]
.text:00406B73                 mov     [esp+0BCh+var_34], ecx
.text:00406B7A                 lea     ecx, [esp+0BCh+var_4C]
.text:00406B7E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00406B82                 mov     edx, [esp+0BCh+arg_0]
.text:00406B89                 mov     [esp+0BCh+var_2C], ebx
.text:00406B90                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00406B94                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00406B9C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00406B9F                 call    sub_406EE0
.text:00406BA4                 add     esp, 0ACh
.text:00406BAA                 pop     ebx
.text:00406BAB                 pop     esi
.text:00406BAC                 pop     edi
.text:00406BAD                 pop     ebp
.text:00406BAE                 retn
.text:00406BAE sub_406AD0      endp
.text:00406BAE
.text:00406BAE ; ---------------------------------------------------------------------------
.text:00406BAF                 align 10h
.text:00406BB0                 push    ebp
.text:00406BB1                 xor     eax, eax
.text:00406BB3                 mov     ecx, 8
.text:00406BB8                 push    edi
.text:00406BB9                 push    esi
.text:00406BBA                 push    ebx
.text:00406BBB                 sub     esp, 0ACh
.text:00406BC1                 mov     edx, [esp+0C4h]
.text:00406BC8                 cld
.text:00406BC9                 lea     edi, [esp+14h]
.text:00406BCD                 mov     [esp+10h], edx
.text:00406BD1                 rep stosd
.text:00406BD3                 mov     eax, [esp+30h]
.text:00406BD7                 mov     ebp, [esp+10h]
.text:00406BDB                 mov     edi, [esp+14h]
.text:00406BDF                 mov     [esp+60h], eax
.text:00406BE3                 mov     esi, [esp+20h]
.text:00406BE7                 mov     eax, [esp+10h]
.text:00406BEB                 mov     [esp+40h], ebp
.text:00406BEF                 mov     ecx, [esp+28h]
.text:00406BF3                 mov     ebp, [esp+18h]
.text:00406BF7                 mov     [esp+44h], edi
.text:00406BFB                 mov     edx, [esp+2Ch]
.text:00406BFF                 mov     edi, [esp+1Ch]
.text:00406C03                 mov     [esp+70h], eax
.text:00406C07                 mov     ebx, [esp+24h]
.text:00406C0B                 mov     eax, [esp+14h]
.text:00406C0F                 mov     [esp+48h], ebp
.text:00406C13                 mov     [esp+4Ch], edi
.text:00406C17                 mov     [esp+50h], esi
.text:00406C1B                 mov     [esp+54h], ebx
.text:00406C1F                 mov     [esp+58h], ecx
.text:00406C23                 mov     [esp+5Ch], edx
.text:00406C27                 mov     [esp+74h], eax
.text:00406C2B                 mov     [esp+78h], ebp
.text:00406C2F                 mov     [esp+7Ch], edi
.text:00406C33                 mov     [esp+80h], esi
.text:00406C3A                 mov     [esp+84h], ebx
.text:00406C41                 mov     esi, [esp+30h]
.text:00406C45                 lea     ebx, [esp+70h]
.text:00406C49                 mov     [esp+8Ch], edx
.text:00406C50                 mov     edx, [esp+0C8h]
.text:00406C57                 mov     [esp+88h], ecx
.text:00406C5E                 mov     ecx, [esp+0CCh]
.text:00406C65                 mov     [esp+4], edx
.text:00406C69                 mov     edx, [esp+0C0h]
.text:00406C70                 mov     [esp+90h], esi
.text:00406C77                 mov     [esp+0Ch], ebx
.text:00406C7B                 mov     [esp+8], ecx
.text:00406C7F                 mov     [esp], edx
.text:00406C82                 call    sub_406EE0
.text:00406C87                 add     esp, 0ACh
.text:00406C8D                 pop     ebx
.text:00406C8E                 pop     esi
.text:00406C8F                 pop     edi
.text:00406C90                 pop     ebp
.text:00406C91                 retn
.text:00406C91 ; ---------------------------------------------------------------------------
.text:00406C92                 align 10h
.text:00406CA0                 push    ebp
.text:00406CA1                 xor     eax, eax
.text:00406CA3                 mov     ecx, 8
.text:00406CA8                 push    edi
.text:00406CA9                 push    esi
.text:00406CAA                 push    ebx
.text:00406CAB                 sub     esp, 0ACh
.text:00406CB1                 mov     edi, [esp+0C0h]
.text:00406CB8                 cld
.text:00406CB9                 mov     [esp+10h], edi
.text:00406CBD                 lea     edi, [esp+14h]
.text:00406CC1                 rep stosd
.text:00406CC3                 mov     eax, [esp+30h]
.text:00406CC7                 mov     esi, [esp+10h]
.text:00406CCB                 mov     ebx, [esp+14h]
.text:00406CCF                 mov     [esp+60h], eax
.text:00406CD3                 mov     ebp, [esp+18h]
.text:00406CD7                 mov     eax, [esp+10h]
.text:00406CDB                 mov     [esp+40h], esi
.text:00406CDF                 mov     edi, [esp+1Ch]
.text:00406CE3                 mov     esi, [esp+20h]
.text:00406CE7                 mov     [esp+44h], ebx
.text:00406CEB                 mov     ecx, [esp+28h]
.text:00406CEF                 mov     edx, [esp+2Ch]
.text:00406CF3                 mov     [esp+70h], eax
.text:00406CF7                 mov     ebx, [esp+24h]
.text:00406CFB                 mov     eax, [esp+14h]
.text:00406CFF                 mov     [esp+48h], ebp
.text:00406D03                 mov     [esp+4Ch], edi
.text:00406D07                 mov     [esp+50h], esi
.text:00406D0B                 mov     [esp+54h], ebx
.text:00406D0F                 mov     [esp+58h], ecx
.text:00406D13                 mov     [esp+5Ch], edx
.text:00406D17                 mov     [esp+74h], eax
.text:00406D1B                 mov     [esp+78h], ebp
.text:00406D1F                 mov     [esp+7Ch], edi
.text:00406D23                 mov     [esp+80h], esi
.text:00406D2A                 mov     [esp+84h], ebx
.text:00406D31                 mov     [esp+8Ch], edx
.text:00406D38                 lea     edx, [esp+70h]
.text:00406D3C                 mov     [esp+88h], ecx
.text:00406D43                 mov     ecx, [esp+30h]
.text:00406D47                 mov     [esp+0Ch], edx
.text:00406D4B                 mov     edx, [esp+0C4h]
.text:00406D52                 mov     [esp+90h], ecx
.text:00406D59                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406D61                 mov     [esp+4], edx
.text:00406D65                 mov     dword ptr [esp], 0
.text:00406D6C                 call    sub_406EE0
.text:00406D71                 add     esp, 0ACh
.text:00406D77                 pop     ebx
.text:00406D78                 pop     esi
.text:00406D79                 pop     edi
.text:00406D7A                 pop     ebp
.text:00406D7B                 retn
.text:00406D7B ; ---------------------------------------------------------------------------
.text:00406D7C                 align 10h
.text:00406D80                 push    edi
.text:00406D81                 push    esi
.text:00406D82                 push    ebx
.text:00406D83                 sub     esp, 40h
.text:00406D86                 mov     edx, ds:dword_40A24C
.text:00406D8C                 mov     ebx, ds:dword_40A240
.text:00406D92                 mov     esi, ds:dword_40A248
.text:00406D98                 mov     edi, ds:dword_40A244
.text:00406D9E                 mov     [esp+1Ch], edx
.text:00406DA2                 mov     ecx, ds:dword_40A250
.text:00406DA8                 mov     edx, ds:dword_40A260
.text:00406DAE                 mov     [esp+10h], ebx
.text:00406DB2                 mov     ebx, ds:dword_40A254
.text:00406DB8                 mov     [esp+30h], edx
.text:00406DBC                 movzx   edx, byte ptr [esp+54h]
.text:00406DC1                 mov     [esp+18h], esi
.text:00406DC5                 mov     esi, ds:dword_40A25C
.text:00406DCB                 mov     [esp+14h], edi
.text:00406DCF                 mov     edi, ds:dword_40A258
.text:00406DD5                 mov     [esp+20h], ecx
.text:00406DD9                 mov     cl, dl
.text:00406DDB                 shr     cl, 5
.text:00406DDE                 mov     [esp+24h], ebx
.text:00406DE2                 movzx   ebx, cl
.text:00406DE5                 mov     [esp+2Ch], esi
.text:00406DE9                 lea     esi, [esp+10h]
.text:00406DED                 mov     [esp+28h], edi
.text:00406DF1                 lea     edi, [esi+ebx*4]
.text:00406DF4                 mov     ebx, edx
.text:00406DF6                 mov     edx, [edi+4]
.text:00406DF9                 and     ebx, 1Fh
.text:00406DFC                 mov     cl, bl
.text:00406DFE                 mov     eax, edx
.text:00406E00                 shr     eax, cl
.text:00406E02                 and     eax, 1
.text:00406E05                 xor     eax, 1
.text:00406E08                 shl     eax, cl
.text:00406E0A                 xor     edx, eax
.text:00406E0C                 mov     [edi+4], edx
.text:00406E0F                 mov     edx, [esp+50h]
.text:00406E13                 mov     [esp+0Ch], esi
.text:00406E17                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406E1F                 mov     [esp+4], edx
.text:00406E23                 mov     dword ptr [esp], 0
.text:00406E2A                 call    sub_406EE0
.text:00406E2F                 add     esp, 40h
.text:00406E32                 pop     ebx
.text:00406E33                 pop     esi
.text:00406E34                 pop     edi
.text:00406E35                 retn
.text:00406E35 ; ---------------------------------------------------------------------------
.text:00406E36                 align 10h
.text:00406E40
.text:00406E40 ; =============== S U B R O U T I N E =======================================
.text:00406E40
.text:00406E40
.text:00406E40 ; int __cdecl sub_406E40(char *)
.text:00406E40 sub_406E40      proc near               ; CODE XREF: sub_4059C0+64↑p
.text:00406E40
.text:00406E40 var_4C          = dword ptr -4Ch
.text:00406E40 var_48          = dword ptr -48h
.text:00406E40 var_44          = dword ptr -44h
.text:00406E40 var_40          = dword ptr -40h
.text:00406E40 var_3C          = dword ptr -3Ch
.text:00406E40 var_38          = dword ptr -38h
.text:00406E40 var_34          = dword ptr -34h
.text:00406E40 var_30          = dword ptr -30h
.text:00406E40 var_2C          = dword ptr -2Ch
.text:00406E40 var_28          = dword ptr -28h
.text:00406E40 var_24          = dword ptr -24h
.text:00406E40 var_20          = dword ptr -20h
.text:00406E40 var_1C          = dword ptr -1Ch
.text:00406E40 arg_0           = dword ptr  4
.text:00406E40
.text:00406E40                 sub     esp, 4Ch
.text:00406E43                 mov     ecx, ds:dword_40A240
.text:00406E49                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00406E51                 mov     edx, ds:dword_40A244
.text:00406E57                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00406E5E                 mov     [esp+4Ch+var_3C], ecx
.text:00406E62                 mov     ecx, ds:dword_40A24C
.text:00406E68                 mov     [esp+4Ch+var_38], edx
.text:00406E6C                 mov     edx, ds:dword_40A248
.text:00406E72                 mov     [esp+4Ch+var_30], ecx
.text:00406E76                 mov     ecx, ds:dword_40A250
.text:00406E7C                 mov     eax, edx
.text:00406E7E                 shr     eax, 1Ah
.text:00406E81                 and     eax, 1
.text:00406E84                 xor     eax, 1
.text:00406E87                 mov     [esp+4Ch+var_2C], ecx
.text:00406E8B                 shl     eax, 1Ah
.text:00406E8E                 mov     ecx, ds:dword_40A254
.text:00406E94                 xor     edx, eax
.text:00406E96                 mov     [esp+4Ch+var_34], edx
.text:00406E9A                 mov     edx, [esp+4Ch+arg_0]
.text:00406E9E                 mov     [esp+4Ch+var_28], ecx
.text:00406EA2                 mov     ecx, ds:dword_40A258
.text:00406EA8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00406EAC                 mov     [esp+4Ch+var_24], ecx
.text:00406EB0                 mov     ecx, ds:dword_40A25C
.text:00406EB6                 mov     [esp+4Ch+var_20], ecx
.text:00406EBA                 mov     ecx, ds:dword_40A260
.text:00406EC0                 mov     [esp+4Ch+var_1C], ecx
.text:00406EC4                 lea     ecx, [esp+4Ch+var_3C]
.text:00406EC8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00406ECC                 call    sub_406EE0
.text:00406ED1                 add     esp, 4Ch
.text:00406ED4                 retn
.text:00406ED4 sub_406E40      endp
.text:00406ED4
.text:00406ED4 ; ---------------------------------------------------------------------------
.text:00406ED5                 align 10h
.text:00406EE0
.text:00406EE0 ; =============== S U B R O U T I N E =======================================
.text:00406EE0
.text:00406EE0
.text:00406EE0 ; int __cdecl sub_406EE0(int, char *, int, int)
.text:00406EE0 sub_406EE0      proc near               ; CODE XREF: .text:00406A92↑p
.text:00406EE0                                         ; .text:00406AC2↑p ...
.text:00406EE0
.text:00406EE0 Block           = dword ptr -2Ch
.text:00406EE0 var_28          = dword ptr -28h
.text:00406EE0 Str             = dword ptr -24h
.text:00406EE0 var_20          = dword ptr -20h
.text:00406EE0 var_1C          = dword ptr -1Ch
.text:00406EE0 var_18          = dword ptr -18h
.text:00406EE0 var_14          = dword ptr -14h
.text:00406EE0 arg_0           = dword ptr  4
.text:00406EE0 arg_4           = dword ptr  8
.text:00406EE0 arg_8           = dword ptr  0Ch
.text:00406EE0 arg_C           = dword ptr  10h
.text:00406EE0
.text:00406EE0                 push    ebp
.text:00406EE1                 push    edi
.text:00406EE2                 push    esi
.text:00406EE3                 push    ebx
.text:00406EE4                 sub     esp, 1Ch
.text:00406EE7                 call    _errno
.text:00406EEC                 mov     edx, [eax]
.text:00406EEE                 mov     eax, [esp+2Ch+arg_0]
.text:00406EF2                 mov     [esp+2Ch+var_14], edx
.text:00406EF6                 test    eax, eax
.text:00406EF8                 js      loc_40709A
.text:00406EFE                 mov     eax, [esp+2Ch+arg_0]
.text:00406F02                 cmp     dword_409040, eax
.text:00406F08                 ja      short loc_406F80
.text:00406F0A                 mov     esi, eax
.text:00406F0C                 inc     esi
.text:00406F0D                 cmp     esi, 1FFFFFFFh
.text:00406F13                 ja      loc_40709F
.text:00406F19                 mov     ebx, off_40904C
.text:00406F1F                 cmp     ebx, offset dword_409044
.text:00406F25                 jz      loc_407071
.text:00406F2B
.text:00406F2B loc_406F2B:                             ; CODE XREF: sub_406EE0+1B5↓j
.text:00406F2B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00406F2E                 lea     ecx, ds:0[esi*8]
.text:00406F35                 mov     ebp, esi
.text:00406F37                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00406F3B                 call    sub_405650
.text:00406F40                 mov     off_40904C, eax
.text:00406F45                 mov     ebx, dword_409040
.text:00406F4B                 sub     ebp, ebx
.text:00406F4D                 lea     edi, [eax+ebx*8]
.text:00406F50                 lea     eax, ds:0[ebp*8]
.text:00406F57                 cmp     eax, 7
.text:00406F5A                 jbe     short loc_406F70
.text:00406F5C                 test    edi, 4
.text:00406F62                 jz      short loc_406F70
.text:00406F64                 mov     dword ptr [edi], 0
.text:00406F6A                 sub     eax, 4
.text:00406F6D                 add     edi, 4
.text:00406F70
.text:00406F70 loc_406F70:                             ; CODE XREF: sub_406EE0+7A↑j
.text:00406F70                                         ; sub_406EE0+82↑j
.text:00406F70                 cld
.text:00406F71                 mov     ecx, eax
.text:00406F73                 shr     ecx, 2
.text:00406F76                 xor     eax, eax
.text:00406F78                 rep stosd
.text:00406F7A                 mov     dword_409040, esi
.text:00406F80
.text:00406F80 loc_406F80:                             ; CODE XREF: sub_406EE0+28↑j
.text:00406F80                 mov     esi, off_40904C
.text:00406F86                 mov     eax, [esp+2Ch+arg_0]
.text:00406F8A                 mov     ebp, [esi+eax*8]
.text:00406F8D                 mov     edi, [esi+eax*8+4]
.text:00406F91                 mov     esi, [esp+2Ch+arg_C]
.text:00406F95                 test    esi, esi
.text:00406F97                 jz      loc_407067
.text:00406F9D
.text:00406F9D loc_406F9D:                             ; CODE XREF: sub_406EE0+18C↓j
.text:00406F9D                 call    _errno
.text:00406FA2                 mov     ebx, [eax]
.text:00406FA4                 mov     [esp+2Ch+var_18], esi ; int
.text:00406FA8                 mov     ecx, [esi]
.text:00406FAA                 mov     [esp+2Ch+Block], edi ; int
.text:00406FAD                 mov     edx, [esp+2Ch+arg_8]
.text:00406FB1                 mov     [esp+2Ch+var_28], ebp ; int
.text:00406FB5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406FB9                 mov     ecx, [esp+2Ch+arg_4]
.text:00406FBD                 mov     [esp+2Ch+var_20], edx ; int
.text:00406FC1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00406FC5                 call    sub_405DA0
.text:00406FCA                 mov     esi, eax
.text:00406FCC                 call    _errno
.text:00406FD1                 mov     [eax], ebx
.text:00406FD3                 cmp     ebp, esi
.text:00406FD5                 ja      short loc_40704B
.text:00406FD7                 lea     ebp, [esi+1]
.text:00406FDA                 mov     ebx, off_40904C
.text:00406FE0                 cmp     edi, offset unk_40A140
.text:00406FE6                 mov     esi, [esp+2Ch+arg_0]
.text:00406FEA                 mov     [ebx+esi*8], ebp
.text:00406FED                 jz      short loc_406FFD
.text:00406FEF                 mov     [esp+2Ch+Block], edi ; Block
.text:00406FF2                 call    free
.text:00406FF7                 mov     ebx, off_40904C
.text:00406FFD
.text:00406FFD loc_406FFD:                             ; CODE XREF: sub_406EE0+10D↑j
.text:00406FFD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00407000                 call    sub_4055C0
.text:00407005                 mov     esi, [esp+2Ch+arg_C]
.text:00407009                 mov     edi, eax
.text:0040700B                 mov     eax, [esp+2Ch+arg_0]
.text:0040700F                 test    esi, esi
.text:00407011                 mov     [ebx+eax*8+4], edi
.text:00407015                 jz      short loc_407060
.text:00407017
.text:00407017 loc_407017:                             ; CODE XREF: sub_406EE0+185↓j
.text:00407017                 call    _errno
.text:0040701C                 mov     ebx, [eax]
.text:0040701E                 mov     [esp+2Ch+var_18], esi ; int
.text:00407022                 mov     ecx, [esi]
.text:00407024                 mov     [esp+2Ch+Block], edi ; int
.text:00407027                 mov     edx, [esp+2Ch+arg_8]
.text:0040702B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040702F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00407033                 mov     ecx, [esp+2Ch+arg_4]
.text:00407037                 mov     [esp+2Ch+var_20], edx ; int
.text:0040703B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040703F                 call    sub_405DA0
.text:00407044                 call    _errno
.text:00407049                 mov     [eax], ebx
.text:0040704B
.text:0040704B loc_40704B:                             ; CODE XREF: sub_406EE0+F5↑j
.text:0040704B                 call    _errno
.text:00407050                 mov     ebp, [esp+2Ch+var_14]
.text:00407054                 mov     [eax], ebp
.text:00407056                 add     esp, 1Ch
.text:00407059                 mov     eax, edi
.text:0040705B                 pop     ebx
.text:0040705C                 pop     esi
.text:0040705D                 pop     edi
.text:0040705E                 pop     ebp
.text:0040705F                 retn
.text:00407060 ; ---------------------------------------------------------------------------
.text:00407060
.text:00407060 loc_407060:                             ; CODE XREF: sub_406EE0+135↑j
.text:00407060                 mov     esi, offset dword_40A240
.text:00407065                 jmp     short loc_407017
.text:00407067 ; ---------------------------------------------------------------------------
.text:00407067
.text:00407067 loc_407067:                             ; CODE XREF: sub_406EE0+B7↑j
.text:00407067                 mov     esi, offset dword_40A240
.text:0040706C                 jmp     loc_406F9D
.text:00407071 ; ---------------------------------------------------------------------------
.text:00407071
.text:00407071 loc_407071:                             ; CODE XREF: sub_406EE0+45↑j
.text:00407071                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00407078                 call    sub_4055C0
.text:0040707D                 mov     off_40904C, eax
.text:00407082                 mov     edi, dword_409044
.text:00407088                 mov     ebx, eax
.text:0040708A                 mov     ecx, off_409048
.text:00407090                 mov     [eax], edi
.text:00407092                 mov     [eax+4], ecx
.text:00407095                 jmp     loc_406F2B
.text:0040709A ; ---------------------------------------------------------------------------
.text:0040709A
.text:0040709A loc_40709A:                             ; CODE XREF: sub_406EE0+18↑j
.text:0040709A                 call    abort
.text:0040709F ; ---------------------------------------------------------------------------
.text:0040709F
.text:0040709F loc_40709F:                             ; CODE XREF: sub_406EE0+33↑j
.text:0040709F                 call    sub_405CD0
.text:0040709F sub_406EE0      endp
.text:0040709F
.text:0040709F ; ---------------------------------------------------------------------------
.text:004070A4                 align 10h
.text:004070B0
.text:004070B0 ; =============== S U B R O U T I N E =======================================
.text:004070B0
.text:004070B0 ; Attributes: thunk
.text:004070B0
.text:004070B0 libintl_bindtextdomain proc near
.text:004070B0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004070B0 libintl_bindtextdomain endp
.text:004070B0
.text:004070B0 ; ---------------------------------------------------------------------------
.text:004070B6                 align 10h
.text:004070C0                 jmp     ds:libintl_textdomain
.text:004070C0 ; ---------------------------------------------------------------------------
.text:004070C6                 align 10h
.text:004070D0                 jmp     ds:libintl_gettext
.text:004070D0 ; ---------------------------------------------------------------------------
.text:004070D6                 align 10h
.text:004070E0 ; const char aS[]
.text:004070E0 aS              db ': %s',0             ; DATA XREF: sub_407100+B8↓o
.text:004070E0                                         ; sub_407204+122↓o
.text:004070E5 aUnknownSystemE db 'Unknown system error',0
.text:004070E5                                         ; DATA XREF: sub_407100:loc_4071CD↓o
.text:004070E5                                         ; sub_407204:loc_40733E↓o
.text:004070FA ; const char aS_0[]
.text:004070FA aS_0            db '%s: ',0             ; DATA XREF: sub_407100:loc_4071D4↓o
.text:004070FF                 align 10h
.text:00407100
.text:00407100 ; =============== S U B R O U T I N E =======================================
.text:00407100
.text:00407100
.text:00407100 ; int __cdecl sub_407100(int Code, int ErrorMessage, char *, char)
.text:00407100 sub_407100      proc near               ; CODE XREF: sub_401CE0+123↑p
.text:00407100                                         ; sub_401CE0+554↑p ...
.text:00407100
.text:00407100 Stream          = dword ptr -1Ch
.text:00407100 Format          = dword ptr -18h
.text:00407100 ArgList         = dword ptr -14h
.text:00407100 Code            = dword ptr  4
.text:00407100 ErrorMessage    = dword ptr  8
.text:00407100 arg_8           = dword ptr  0Ch
.text:00407100 arg_C           = byte ptr  10h
.text:00407100
.text:00407100                 push    esi
.text:00407101                 push    ebx
.text:00407102                 sub     esp, 14h
.text:00407105                 mov     edx, ds:_iob
.text:0040710B                 mov     esi, [esp+1Ch+Code]
.text:0040710F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00407113                 add     edx, 20h ; ' '
.text:00407116                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407119                 call    fflush
.text:0040711E                 mov     eax, ds:dword_40A320
.text:00407123                 test    eax, eax
.text:00407125                 jz      loc_4071D4
.text:0040712B                 call    eax ; dword_40A320
.text:0040712D
.text:0040712D loc_40712D:                             ; CODE XREF: sub_407100+F7↓j
.text:0040712D                 lea     edx, [esp+1Ch+arg_C]
.text:00407131                 mov     ecx, [esp+1Ch+arg_8]
.text:00407135                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00407139                 mov     edx, ds:_iob
.text:0040713F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00407143                 add     edx, 40h ; '@'
.text:00407146                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407149                 call    vfprintf
.text:0040714E                 inc     ds:dword_40A330
.text:00407154                 test    ebx, ebx
.text:00407156                 jnz     short loc_4071A2
.text:00407158
.text:00407158 loc_407158:                             ; CODE XREF: sub_407100+CB↓j
.text:00407158                 mov     edx, ds:_iob
.text:0040715E                 lea     ecx, [edx+40h]
.text:00407161                 mov     ebx, [ecx+4]
.text:00407164                 dec     ebx
.text:00407165                 test    ebx, ebx
.text:00407167                 mov     [ecx+4], ebx
.text:0040716A                 js      short loc_407190
.text:0040716C                 mov     ecx, [edx+40h]
.text:0040716F                 mov     byte ptr [ecx], 0Ah
.text:00407172                 inc     dword ptr [edx+40h]
.text:00407175
.text:00407175 loc_407175:                             ; CODE XREF: sub_407100+A0↓j
.text:00407175                 mov     edx, ds:_iob
.text:0040717B                 add     edx, 40h ; '@'
.text:0040717E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407181                 call    fflush
.text:00407186                 test    esi, esi
.text:00407188                 jnz     short loc_4071FC
.text:0040718A                 add     esp, 14h
.text:0040718D                 pop     ebx
.text:0040718E                 pop     esi
.text:0040718F                 retn
.text:00407190 ; ---------------------------------------------------------------------------
.text:00407190
.text:00407190 loc_407190:                             ; CODE XREF: sub_407100+6A↑j
.text:00407190                 mov     [esp+1Ch+Format], ecx ; File
.text:00407194                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040719B                 call    _flsbuf
.text:004071A0                 jmp     short loc_407175
.text:004071A2 ; ---------------------------------------------------------------------------
.text:004071A2
.text:004071A2 loc_4071A2:                             ; CODE XREF: sub_407100+56↑j
.text:004071A2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004071A5                 call    strerror
.text:004071AA                 test    eax, eax
.text:004071AC                 jz      short loc_4071CD
.text:004071AE
.text:004071AE loc_4071AE:                             ; CODE XREF: sub_407100+D2↓j
.text:004071AE                 mov     [esp+1Ch+ArgList], eax
.text:004071B2                 mov     ebx, ds:_iob
.text:004071B8                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:004071C0                 add     ebx, 40h ; '@'
.text:004071C3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004071C6                 call    fprintf
.text:004071CB                 jmp     short loc_407158
.text:004071CD ; ---------------------------------------------------------------------------
.text:004071CD
.text:004071CD loc_4071CD:                             ; CODE XREF: sub_407100+AC↑j
.text:004071CD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004071D2                 jmp     short loc_4071AE
.text:004071D4 ; ---------------------------------------------------------------------------
.text:004071D4
.text:004071D4 loc_4071D4:                             ; CODE XREF: sub_407100+25↑j
.text:004071D4                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:004071DC                 mov     edx, ds:_iob
.text:004071E2                 mov     ecx, ds:dword_40A2F0
.text:004071E8                 add     edx, 40h ; '@'
.text:004071EB                 mov     [esp+1Ch+ArgList], ecx
.text:004071EF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004071F2                 call    fprintf
.text:004071F7                 jmp     loc_40712D
.text:004071FC ; ---------------------------------------------------------------------------
.text:004071FC
.text:004071FC loc_4071FC:                             ; CODE XREF: sub_407100+88↑j
.text:004071FC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004071FF                 call    exit
.text:004071FF sub_407100      endp
.text:004071FF
.text:00407204
.text:00407204 ; =============== S U B R O U T I N E =======================================
.text:00407204
.text:00407204
.text:00407204 ; int __cdecl sub_407204(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00407204 sub_407204      proc near               ; DATA XREF: sub_407204+77↓o
.text:00407204
.text:00407204 Stream          = dword ptr -28h
.text:00407204 Format          = dword ptr -24h
.text:00407204 ArgList         = dword ptr -20h
.text:00407204 var_1C          = dword ptr -1Ch
.text:00407204 Code            = dword ptr  8
.text:00407204 ErrorMessage    = dword ptr  0Ch
.text:00407204 Str2            = dword ptr  10h
.text:00407204 arg_10          = dword ptr  14h
.text:00407204 arg_14          = dword ptr  18h
.text:00407204 arg_18          = byte ptr  1Ch
.text:00407204
.text:00407204                 and     eax, 64253A73h
.text:00407209                 cmp     ah, [eax]
.text:0040720B
.text:0040720B loc_40720B:                             ; DATA XREF: sub_407204:loc_407345↓o
.text:0040720B                 add     ds:55003A73h, ah
.text:00407211                 push    edi
.text:00407212                 push    esi
.text:00407213                 push    ebx
.text:00407214                 sub     esp, 1Ch
.text:00407217                 mov     edx, ds:dword_40A360
.text:0040721D                 mov     ebp, [esp+28h+Code]
.text:00407221                 mov     edi, [esp+28h+ErrorMessage]
.text:00407225                 test    edx, edx
.text:00407227                 mov     ebx, [esp+28h+Str2]
.text:0040722B                 mov     esi, [esp+28h+arg_10]
.text:0040722F                 jz      short loc_407249
.text:00407231                 cmp     ds:dword_40A280, esi
.text:00407237                 jz      loc_407370
.text:0040723D
.text:0040723D loc_40723D:                             ; CODE XREF: sub_407204+18D↓j
.text:0040723D                 mov     ds:Str1, ebx
.text:00407243                 mov     ds:dword_40A280, esi
.text:00407249
.text:00407249 loc_407249:                             ; CODE XREF: sub_407204+2B↑j
.text:00407249                 mov     edx, ds:_iob
.text:0040724F                 add     edx, 20h ; ' '
.text:00407252                 mov     [esp+28h+Stream], edx ; Stream
.text:00407255                 call    fflush
.text:0040725A                 mov     eax, ds:dword_40A320
.text:0040725F                 test    eax, eax
.text:00407261                 jz      loc_407345
.text:00407267                 call    eax ; dword_40A320
.text:00407269
.text:00407269 loc_407269:                             ; CODE XREF: sub_407204+164↓j
.text:00407269                 test    ebx, ebx
.text:0040726B                 jz      short loc_40728E
.text:0040726D                 mov     [esp+28h+ArgList], ebx
.text:00407271                 mov     ebx, ds:_iob
.text:00407277                 mov     [esp+28h+var_1C], esi
.text:0040727B                 mov     [esp+28h+Format], offset sub_407204 ; Format
.text:00407283                 add     ebx, 40h ; '@'
.text:00407286                 mov     [esp+28h+Stream], ebx ; Stream
.text:00407289                 call    fprintf
.text:0040728E
.text:0040728E loc_40728E:                             ; CODE XREF: sub_407204+67↑j
.text:0040728E                 mov     esi, ds:_iob
.text:00407294                 lea     edx, [esp+28h+arg_18]
.text:00407298                 mov     ecx, [esp+28h+arg_14]
.text:0040729C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004072A0                 add     esi, 40h ; '@'
.text:004072A3                 mov     [esp+28h+Format], ecx ; Format
.text:004072A7                 mov     [esp+28h+Stream], esi ; Stream
.text:004072AA                 call    vfprintf
.text:004072AF                 inc     ds:dword_40A330
.text:004072B5                 test    edi, edi
.text:004072B7                 jnz     short loc_407310
.text:004072B9
.text:004072B9 loc_4072B9:                             ; CODE XREF: sub_407204+135↓j
.text:004072B9                 mov     edx, ds:_iob
.text:004072BF                 lea     ecx, [edx+40h]
.text:004072C2                 mov     ebx, [ecx+4]
.text:004072C5                 dec     ebx
.text:004072C6                 test    ebx, ebx
.text:004072C8                 mov     [ecx+4], ebx
.text:004072CB                 js      short loc_4072F7
.text:004072CD                 mov     esi, [edx+40h]
.text:004072D0                 mov     byte ptr [esi], 0Ah
.text:004072D3                 inc     dword ptr [edx+40h]
.text:004072D6
.text:004072D6 loc_4072D6:                             ; CODE XREF: sub_407204+103↓j
.text:004072D6                 mov     ecx, ds:_iob
.text:004072DC                 add     ecx, 40h ; '@'
.text:004072DF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004072E2                 call    fflush
.text:004072E7                 test    ebp, ebp
.text:004072E9                 jnz     loc_407396
.text:004072EF
.text:004072EF loc_4072EF:                             ; CODE XREF: sub_407204+173↓j
.text:004072EF                                         ; sub_407204+187↓j
.text:004072EF                 add     esp, 1Ch
.text:004072F2                 pop     ebx
.text:004072F3                 pop     esi
.text:004072F4                 pop     edi
.text:004072F5                 pop     ebp
.text:004072F6                 retn
.text:004072F7 ; ---------------------------------------------------------------------------
.text:004072F7
.text:004072F7 loc_4072F7:                             ; CODE XREF: sub_407204+C7↑j
.text:004072F7                 mov     [esp+28h+Format], ecx ; File
.text:004072FB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00407302                 call    _flsbuf
.text:00407307                 jmp     short loc_4072D6
.text:00407307 ; ---------------------------------------------------------------------------
.text:00407309                 align 10h
.text:00407310
.text:00407310 loc_407310:                             ; CODE XREF: sub_407204+B3↑j
.text:00407310                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00407313                 call    strerror
.text:00407318                 test    eax, eax
.text:0040731A                 jz      short loc_40733E
.text:0040731C
.text:0040731C loc_40731C:                             ; CODE XREF: sub_407204+13F↓j
.text:0040731C                 mov     [esp+28h+ArgList], eax
.text:00407320                 mov     edi, ds:_iob
.text:00407326                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:0040732E                 add     edi, 40h ; '@'
.text:00407331                 mov     [esp+28h+Stream], edi ; Stream
.text:00407334                 call    fprintf
.text:00407339                 jmp     loc_4072B9
.text:0040733E ; ---------------------------------------------------------------------------
.text:0040733E
.text:0040733E loc_40733E:                             ; CODE XREF: sub_407204+116↑j
.text:0040733E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00407343                 jmp     short loc_40731C
.text:00407345 ; ---------------------------------------------------------------------------
.text:00407345
.text:00407345 loc_407345:                             ; CODE XREF: sub_407204+5D↑j
.text:00407345                 mov     [esp+28h+Format], (offset loc_40720B+1) ; Format
.text:0040734D                 mov     ecx, ds:_iob
.text:00407353                 mov     edx, ds:dword_40A2F0
.text:00407359                 add     ecx, 40h ; '@'
.text:0040735C                 mov     [esp+28h+ArgList], edx
.text:00407360                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407363                 call    fprintf
.text:00407368                 jmp     loc_407269
.text:00407368 ; ---------------------------------------------------------------------------
.text:0040736D                 align 10h
.text:00407370
.text:00407370 loc_407370:                             ; CODE XREF: sub_407204+33↑j
.text:00407370                 mov     eax, ds:Str1
.text:00407375                 cmp     ebx, eax
.text:00407377                 jz      loc_4072EF
.text:0040737D                 mov     [esp+28h+Format], ebx ; Str2
.text:00407381                 mov     [esp+28h+Stream], eax ; Str1
.text:00407384                 call    strcmp
.text:00407389                 test    eax, eax
.text:0040738B                 jz      loc_4072EF
.text:00407391                 jmp     loc_40723D
.text:00407396 ; ---------------------------------------------------------------------------
.text:00407396
.text:00407396 loc_407396:                             ; CODE XREF: sub_407204+E5↑j
.text:00407396                 mov     [esp+28h+Stream], ebp ; Code
.text:00407399                 call    exit
.text:00407399 sub_407204      endp ; sp-analysis failed
.text:00407399
.text:00407399 ; ---------------------------------------------------------------------------
.text:0040739E                 align 10h
.text:004073A0
.text:004073A0 ; =============== S U B R O U T I N E =======================================
.text:004073A0
.text:004073A0
.text:004073A0 ; int __cdecl sub_4073A0(void *, void *Src, size_t Size, int, int)
.text:004073A0 sub_4073A0      proc near               ; CODE XREF: sub_4073A0+72↓p
.text:004073A0                                         ; sub_4073A0+96↓p ...
.text:004073A0
.text:004073A0 var_3C          = dword ptr -3Ch
.text:004073A0 var_38          = dword ptr -38h
.text:004073A0 var_34          = dword ptr -34h
.text:004073A0 var_30          = dword ptr -30h
.text:004073A0 var_2C          = dword ptr -2Ch
.text:004073A0 var_28          = dword ptr -28h
.text:004073A0 var_24          = dword ptr -24h
.text:004073A0 var_20          = dword ptr -20h
.text:004073A0 var_1C          = dword ptr -1Ch
.text:004073A0 var_18          = dword ptr -18h
.text:004073A0 var_14          = dword ptr -14h
.text:004073A0 arg_0           = dword ptr  4
.text:004073A0 Src             = dword ptr  8
.text:004073A0 Size            = dword ptr  0Ch
.text:004073A0 arg_C           = dword ptr  10h
.text:004073A0 arg_10          = dword ptr  14h
.text:004073A0
.text:004073A0                 push    ebp
.text:004073A1                 push    edi
.text:004073A2                 push    esi
.text:004073A3                 push    ebx
.text:004073A4                 sub     esp, 2Ch
.text:004073A7                 mov     edx, [esp+3Ch+arg_0]
.text:004073AB                 mov     ebx, [esp+3Ch+Src]
.text:004073AF                 mov     eax, [esp+3Ch+arg_C]
.text:004073B3                 mov     edi, [esp+3Ch+Size]
.text:004073B7                 mov     [esp+3Ch+var_14], edx
.text:004073BB                 cmp     ebx, 1
.text:004073BE                 mov     edx, [esp+3Ch+arg_10]
.text:004073C2                 mov     [esp+3Ch+var_18], eax
.text:004073C6                 mov     [esp+3Ch+var_1C], edx
.text:004073CA                 ja      short loc_4073D4
.text:004073CC                 add     esp, 2Ch
.text:004073CF                 pop     ebx
.text:004073D0                 pop     esi
.text:004073D1                 pop     edi
.text:004073D2                 pop     ebp
.text:004073D3                 retn
.text:004073D4 ; ---------------------------------------------------------------------------
.text:004073D4
.text:004073D4 loc_4073D4:                             ; CODE XREF: sub_4073A0+2A↑j
.text:004073D4                 mov     [esp+3Ch+var_34], edi ; Size
.text:004073D8                 mov     esi, ebx
.text:004073DA                 mov     ebp, [esp+3Ch+var_14]
.text:004073DE                 shr     esi, 1
.text:004073E0                 mov     eax, ebx
.text:004073E2                 mov     ecx, [esp+3Ch+var_1C]
.text:004073E6                 mov     [esp+3Ch+var_38], esi ; Src
.text:004073EA                 mov     edx, esi
.text:004073EC                 sub     eax, esi
.text:004073EE                 mov     [esp+3Ch+var_24], ebp
.text:004073F2                 imul    edx, edi
.text:004073F5                 mov     ebp, [esp+3Ch+var_14]
.text:004073F9                 mov     [esp+3Ch+var_28], eax
.text:004073FD                 mov     eax, [esp+3Ch+var_14]
.text:00407401                 add     ebp, edx
.text:00407403                 mov     [esp+3Ch+var_2C], ecx ; int
.text:00407407                 mov     edx, [esp+3Ch+var_18]
.text:0040740B                 mov     [esp+3Ch+var_3C], eax ; void *
.text:0040740E                 mov     [esp+3Ch+var_30], edx ; int
.text:00407412                 call    sub_4073A0
.text:00407417                 mov     [esp+3Ch+var_34], edi ; Size
.text:0040741B                 mov     ecx, [esp+3Ch+var_1C]
.text:0040741F                 mov     eax, [esp+3Ch+var_18]
.text:00407423                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:00407426                 mov     edx, [esp+3Ch+var_28]
.text:0040742A                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0040742E                 mov     [esp+3Ch+var_30], eax ; int
.text:00407432                 mov     [esp+3Ch+var_38], edx ; Src
.text:00407436                 call    sub_4073A0
.text:0040743B                 mov     ecx, [esp+3Ch+var_1C]
.text:0040743F                 cmp     edi, 4
.text:00407442                 mov     [esp+3Ch+var_20], ecx
.text:00407446                 jz      loc_407512
.text:0040744C
.text:0040744C loc_40744C:                             ; CODE XREF: sub_4073A0+177↓j
.text:0040744C                 test    esi, esi
.text:0040744E                 jnz     short loc_407480
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_4073A0+EA↓j
.text:00407450                                         ; sub_4073A0+107↓j ...
.text:00407450                 mov     edx, [esp+3Ch+var_28]
.text:00407454                 sub     ebx, edx
.text:00407456                 imul    ebx, edi
.text:00407459                 mov     edi, [esp+3Ch+var_1C]
.text:0040745D                 mov     [esp+3Ch+Size], ebx ; Size
.text:00407461                 mov     ebx, [esp+3Ch+var_14]
.text:00407465                 mov     [esp+3Ch+Src], edi ; Src
.text:00407469                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:0040746D                 add     esp, 2Ch
.text:00407470                 pop     ebx
.text:00407471                 pop     esi
.text:00407472                 pop     edi
.text:00407473                 pop     ebp
.text:00407474                 jmp     memcpy
.text:00407474 ; ---------------------------------------------------------------------------
.text:00407479                 align 10h
.text:00407480
.text:00407480 loc_407480:                             ; CODE XREF: sub_4073A0+AE↑j
.text:00407480                 mov     eax, [esp+3Ch+var_28]
.text:00407484                 test    eax, eax
.text:00407486                 jnz     short loc_4074B0
.text:00407488
.text:00407488 loc_407488:                             ; CODE XREF: sub_4073A0+151↓j
.text:00407488                                         ; sub_4073A0+18B↓j ...
.text:00407488                 test    esi, esi
.text:0040748A                 jz      short loc_407450
.text:0040748C                 imul    esi, edi
.text:0040748F                 mov     ebp, [esp+3Ch+var_24]
.text:00407493                 mov     [esp+3Ch+var_38], ebp ; Src
.text:00407497                 mov     [esp+3Ch+var_34], esi ; Size
.text:0040749B                 mov     esi, [esp+3Ch+var_20]
.text:0040749F                 mov     [esp+3Ch+var_3C], esi ; void *
.text:004074A2                 call    memcpy
.text:004074A7                 jmp     short loc_407450
.text:004074A7 ; ---------------------------------------------------------------------------
.text:004074A9                 align 10h
.text:004074B0
.text:004074B0 loc_4074B0:                             ; CODE XREF: sub_4073A0+E6↑j
.text:004074B0                                         ; sub_4073A0+14F↓j
.text:004074B0                 mov     [esp+3Ch+var_38], ebp
.text:004074B4                 mov     ecx, [esp+3Ch+var_24]
.text:004074B8                 mov     [esp+3Ch+var_3C], ecx
.text:004074BB                 call    [esp+3Ch+var_18]
.text:004074BF                 test    eax, eax
.text:004074C1                 jle     short loc_4074F3
.text:004074C3                 mov     [esp+3Ch+var_38], ebp
.text:004074C7                 mov     ecx, [esp+3Ch+var_20]
.text:004074CB                 add     ebp, edi
.text:004074CD                 mov     [esp+3Ch+var_34], edi
.text:004074D1                 mov     [esp+3Ch+var_3C], ecx
.text:004074D4                 call    sub_407EC0
.text:004074D9                 dec     [esp+3Ch+var_28]
.text:004074DD
.text:004074DD loc_4074DD:                             ; CODE XREF: sub_4073A0+170↓j
.text:004074DD                 mov     [esp+3Ch+var_20], eax
.text:004074E1                 test    esi, esi
.text:004074E3                 jz      loc_407450
.text:004074E9                 mov     eax, [esp+3Ch+var_28]
.text:004074ED                 test    eax, eax
.text:004074EF                 jnz     short loc_4074B0
.text:004074F1                 jmp     short loc_407488
.text:004074F3 ; ---------------------------------------------------------------------------
.text:004074F3
.text:004074F3 loc_4074F3:                             ; CODE XREF: sub_4073A0+121↑j
.text:004074F3                 mov     [esp+3Ch+var_34], edi
.text:004074F7                 mov     eax, [esp+3Ch+var_24]
.text:004074FB                 dec     esi
.text:004074FC                 mov     edx, [esp+3Ch+var_20]
.text:00407500                 mov     [esp+3Ch+var_38], eax
.text:00407504                 mov     [esp+3Ch+var_3C], edx
.text:00407507                 call    sub_407EC0
.text:0040750C                 add     [esp+3Ch+var_24], edi
.text:00407510                 jmp     short loc_4074DD
.text:00407512 ; ---------------------------------------------------------------------------
.text:00407512
.text:00407512 loc_407512:                             ; CODE XREF: sub_4073A0+A6↑j
.text:00407512                 test    byte ptr [esp+3Ch+var_14], 3
.text:00407517                 jnz     loc_40744C
.text:0040751D                 test    esi, esi
.text:0040751F                 jz      loc_407450
.text:00407525                 mov     ecx, [esp+3Ch+var_28]
.text:00407529                 test    ecx, ecx
.text:0040752B                 jz      loc_407488
.text:00407531
.text:00407531 loc_407531:                             ; CODE XREF: sub_4073A0+1C9↓j
.text:00407531                 mov     [esp+3Ch+var_38], ebp
.text:00407535                 mov     edx, [esp+3Ch+var_24]
.text:00407539                 mov     [esp+3Ch+var_3C], edx
.text:0040753C                 call    [esp+3Ch+var_18]
.text:00407540                 test    eax, eax
.text:00407542                 jle     short loc_407570
.text:00407544                 dec     [esp+3Ch+var_28]
.text:00407548                 mov     ecx, [ebp+0]
.text:0040754B                 add     ebp, 4
.text:0040754E                 mov     edx, [esp+3Ch+var_20]
.text:00407552
.text:00407552 loc_407552:                             ; CODE XREF: sub_4073A0+1E0↓j
.text:00407552                 mov     [edx], ecx
.text:00407554                 add     edx, 4
.text:00407557                 test    esi, esi
.text:00407559                 mov     [esp+3Ch+var_20], edx
.text:0040755D                 jz      loc_407450
.text:00407563                 mov     edx, [esp+3Ch+var_28]
.text:00407567                 test    edx, edx
.text:00407569                 jnz     short loc_407531
.text:0040756B                 jmp     loc_407488
.text:00407570 ; ---------------------------------------------------------------------------
.text:00407570
.text:00407570 loc_407570:                             ; CODE XREF: sub_4073A0+1A2↑j
.text:00407570                 mov     eax, [esp+3Ch+var_24]
.text:00407574                 dec     esi
.text:00407575                 mov     edx, [esp+3Ch+var_20]
.text:00407579                 add     [esp+3Ch+var_24], 4
.text:0040757E                 mov     ecx, [eax]
.text:00407580                 jmp     short loc_407552
.text:00407580 sub_4073A0      endp
.text:00407580
.text:00407580 ; ---------------------------------------------------------------------------
.text:00407582                 align 10h
.text:00407590
.text:00407590 ; =============== S U B R O U T I N E =======================================
.text:00407590
.text:00407590
.text:00407590 ; int __cdecl sub_407590(void *Block, void *, size_t, int)
.text:00407590 sub_407590      proc near               ; CODE XREF: sub_402570+10C↑p
.text:00407590
.text:00407590 Size            = dword ptr -2Ch
.text:00407590 Src             = dword ptr -28h
.text:00407590 var_24          = dword ptr -24h
.text:00407590 var_20          = dword ptr -20h
.text:00407590 var_1C          = dword ptr -1Ch
.text:00407590 var_18          = dword ptr -18h
.text:00407590 var_14          = dword ptr -14h
.text:00407590 var_10          = dword ptr -10h
.text:00407590 var_C           = dword ptr -0Ch
.text:00407590 var_8           = dword ptr -8
.text:00407590 var_4           = dword ptr -4
.text:00407590 Block           = dword ptr  4
.text:00407590 arg_4           = dword ptr  8
.text:00407590 arg_8           = dword ptr  0Ch
.text:00407590 arg_C           = dword ptr  10h
.text:00407590
.text:00407590                 sub     esp, 2Ch
.text:00407593                 mov     edx, [esp+2Ch+Block]
.text:00407597                 mov     [esp+2Ch+var_8], edi
.text:0040759B                 mov     edi, [esp+2Ch+arg_4]
.text:0040759F                 mov     [esp+2Ch+var_C], esi
.text:004075A3                 mov     esi, [esp+2Ch+arg_8]
.text:004075A7                 mov     [esp+2Ch+var_10], ebx
.text:004075AB                 mov     ebx, edi
.text:004075AD                 imul    ebx, esi
.text:004075B0                 mov     [esp+2Ch+var_4], ebp
.text:004075B4                 mov     ebp, [esp+2Ch+arg_C]
.text:004075B8                 mov     [esp+2Ch+var_14], edx
.text:004075BC                 cmp     ebx, 3FFh
.text:004075C2                 jbe     loc_4076D5
.text:004075C8                 mov     ecx, ds:dword_40A290
.text:004075CE                 test    ecx, ecx
.text:004075D0                 jz      loc_407680
.text:004075D6
.text:004075D6 loc_4075D6:                             ; CODE XREF: sub_407590+12E↓j
.text:004075D6                 xor     edx, edx
.text:004075D8                 mov     eax, ebx
.text:004075DA                 div     ds:dword_40A2A0
.text:004075E0                 cmp     eax, ecx
.text:004075E2                 jbe     short loc_407610
.text:004075E4
.text:004075E4 loc_4075E4:                             ; CODE XREF: sub_407590+E7↓j
.text:004075E4                 mov     [esp+2Ch+arg_8], esi
.text:004075E8                 mov     ebx, [esp+2Ch+var_10]
.text:004075EC                 mov     esi, [esp+2Ch+var_14]
.text:004075F0                 mov     [esp+2Ch+arg_C], ebp
.text:004075F4                 mov     ebp, [esp+2Ch+var_4]
.text:004075F8                 mov     [esp+2Ch+arg_4], edi
.text:004075FC                 mov     edi, [esp+2Ch+var_8]
.text:00407600                 mov     [esp+2Ch+Block], esi
.text:00407604                 mov     esi, [esp+2Ch+var_C]
.text:00407608                 add     esp, 2Ch
.text:0040760B                 jmp     __quicksort
.text:00407610 ; ---------------------------------------------------------------------------
.text:00407610
.text:00407610 loc_407610:                             ; CODE XREF: sub_407590+52↑j
.text:00407610                 call    _errno
.text:00407615                 mov     edx, [eax]
.text:00407617                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040761A                 mov     [esp+2Ch+var_18], edx
.text:0040761E                 call    malloc
.text:00407623                 test    eax, eax
.text:00407625                 mov     ebx, eax
.text:00407627                 jz      short loc_40766C
.text:00407629                 call    _errno
.text:0040762E                 mov     ecx, [esp+2Ch+var_18]
.text:00407632                 mov     [eax], ecx
.text:00407634                 mov     [esp+2Ch+Src], edi ; Src
.text:00407638                 mov     edi, [esp+2Ch+var_14]
.text:0040763C                 mov     [esp+2Ch+var_1C], ebx ; int
.text:00407640                 mov     [esp+2Ch+var_20], ebp ; int
.text:00407644                 mov     [esp+2Ch+var_24], esi ; Size
.text:00407648                 mov     [esp+2Ch+Size], edi ; void *
.text:0040764B                 call    sub_4073A0
.text:00407650                 mov     [esp+2Ch+Block], ebx ; Block
.text:00407654                 mov     esi, [esp+2Ch+var_C]
.text:00407658                 mov     ebx, [esp+2Ch+var_10]
.text:0040765C                 mov     edi, [esp+2Ch+var_8]
.text:00407660                 mov     ebp, [esp+2Ch+var_4]
.text:00407664                 add     esp, 2Ch
.text:00407667                 jmp     free
.text:0040766C ; ---------------------------------------------------------------------------
.text:0040766C
.text:0040766C loc_40766C:                             ; CODE XREF: sub_407590+97↑j
.text:0040766C                 call    _errno
.text:00407671                 mov     ebx, [esp+2Ch+var_18]
.text:00407675                 mov     [eax], ebx
.text:00407677                 jmp     loc_4075E4
.text:00407677 ; ---------------------------------------------------------------------------
.text:0040767C                 align 10h
.text:00407680
.text:00407680 loc_407680:                             ; CODE XREF: sub_407590+40↑j
.text:00407680                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:00407687                 call    _sysconf
.text:0040768C                 mov     ds:dword_40A290, eax
.text:00407691                 mov     edx, eax
.text:00407693                 inc     edx
.text:00407694                 jz      short loc_4076C8
.text:00407696
.text:00407696 loc_407696:                             ; CODE XREF: sub_407590+143↓j
.text:00407696                 mov     eax, ds:dword_40A290
.text:0040769B                 test    eax, eax
.text:0040769D                 js      short loc_4076C3
.text:0040769F
.text:0040769F loc_40769F:                             ; CODE XREF: sub_407590+136↓j
.text:0040769F                 mov     [esp+2Ch+Size], 1Eh
.text:004076A6                 sar     eax, 2
.text:004076A9                 mov     ds:dword_40A290, eax
.text:004076AE                 call    _sysconf
.text:004076B3                 mov     ds:dword_40A2A0, eax
.text:004076B8                 mov     ecx, ds:dword_40A290
.text:004076BE                 jmp     loc_4075D6
.text:004076C3 ; ---------------------------------------------------------------------------
.text:004076C3
.text:004076C3 loc_4076C3:                             ; CODE XREF: sub_407590+10D↑j
.text:004076C3                 add     eax, 3
.text:004076C6                 jmp     short loc_40769F
.text:004076C8 ; ---------------------------------------------------------------------------
.text:004076C8
.text:004076C8 loc_4076C8:                             ; CODE XREF: sub_407590+104↑j
.text:004076C8                 mov     ecx, 7FFFFFFFh
.text:004076CD                 mov     ds:dword_40A290, ecx
.text:004076D3                 jmp     short loc_407696
.text:004076D5 ; ---------------------------------------------------------------------------
.text:004076D5
.text:004076D5 loc_4076D5:                             ; CODE XREF: sub_407590+32↑j
.text:004076D5                 mov     [esp+2Ch+Size], ebx ; Size
.text:004076D8                 call    malloc
.text:004076DD                 mov     [esp+2Ch+var_1C], eax ; int
.text:004076E1                 mov     eax, [esp+2Ch+var_14]
.text:004076E5                 mov     [esp+2Ch+var_20], ebp ; int
.text:004076E9                 mov     [esp+2Ch+var_24], esi ; Size
.text:004076ED                 mov     [esp+2Ch+Src], edi ; Src
.text:004076F1                 mov     [esp+2Ch+Size], eax ; void *
.text:004076F4                 call    sub_4073A0
.text:004076F9                 mov     ebx, [esp+2Ch+var_10]
.text:004076FD                 mov     esi, [esp+2Ch+var_C]
.text:00407701                 mov     edi, [esp+2Ch+var_8]
.text:00407705                 mov     ebp, [esp+2Ch+var_4]
.text:00407709                 add     esp, 2Ch
.text:0040770C                 retn
.text:0040770C sub_407590      endp
.text:0040770C
.text:0040770C ; ---------------------------------------------------------------------------
.text:0040770D                 align 10h
.text:00407710
.text:00407710 ; =============== S U B R O U T I N E =======================================
.text:00407710
.text:00407710
.text:00407710 ; int __cdecl sub_407710(void *, int)
.text:00407710 sub_407710      proc near               ; CODE XREF: sub_405C80+12↑p
.text:00407710
.text:00407710 Size            = dword ptr -1Ch
.text:00407710 Src             = dword ptr -18h
.text:00407710 var_14          = dword ptr -14h
.text:00407710 var_8           = dword ptr -8
.text:00407710 var_4           = dword ptr -4
.text:00407710 arg_0           = dword ptr  4
.text:00407710 arg_4           = dword ptr  8
.text:00407710
.text:00407710                 sub     esp, 1Ch
.text:00407713                 mov     edx, [esp+1Ch+arg_4]
.text:00407717                 mov     [esp+1Ch+var_4], esi
.text:0040771B                 mov     esi, [esp+1Ch+arg_0]
.text:0040771F                 mov     [esp+1Ch+var_8], ebx
.text:00407723                 mov     [esp+1Ch+Src], edx
.text:00407727                 mov     [esp+1Ch+Size], esi
.text:0040772A                 call    sub_407F60
.text:0040772F                 lea     edx, [eax+1]
.text:00407732                 mov     ebx, eax
.text:00407734                 mov     [esp+1Ch+Size], edx ; Size
.text:00407737                 call    malloc
.text:0040773C                 xor     edx, edx
.text:0040773E                 test    eax, eax
.text:00407740                 jz      short loc_407758
.text:00407742                 mov     byte ptr [ebx+eax], 0
.text:00407746                 mov     [esp+1Ch+var_14], ebx ; Size
.text:0040774A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040774E                 mov     [esp+1Ch+Size], eax ; void *
.text:00407751                 call    memcpy
.text:00407756                 mov     edx, eax
.text:00407758
.text:00407758 loc_407758:                             ; CODE XREF: sub_407710+30↑j
.text:00407758                 mov     ebx, [esp+1Ch+var_8]
.text:0040775C                 mov     eax, edx
.text:0040775E                 mov     esi, [esp+1Ch+var_4]
.text:00407762                 add     esp, 1Ch
.text:00407765                 retn
.text:00407765 sub_407710      endp
.text:00407765
.text:00407765 ; ---------------------------------------------------------------------------
.text:00407766                 align 10h
.text:00407770
.text:00407770 ; =============== S U B R O U T I N E =======================================
.text:00407770
.text:00407770 ; Attributes: info_from_lumina
.text:00407770
.text:00407770 __quicksort     proc near               ; CODE XREF: sub_407590+7B↑j
.text:00407770
.text:00407770 var_14C         = dword ptr -14Ch
.text:00407770 var_148         = dword ptr -148h
.text:00407770 var_13C         = dword ptr -13Ch
.text:00407770 var_135         = byte ptr -135h
.text:00407770 var_134         = dword ptr -134h
.text:00407770 var_130         = dword ptr -130h
.text:00407770 var_12C         = dword ptr -12Ch
.text:00407770 var_128         = dword ptr -128h
.text:00407770 var_124         = dword ptr -124h
.text:00407770 var_120         = dword ptr -120h
.text:00407770 var_11C         = byte ptr -11Ch
.text:00407770 var_114         = byte ptr -114h
.text:00407770 arg_0           = dword ptr  4
.text:00407770 arg_4           = dword ptr  8
.text:00407770 arg_8           = dword ptr  0Ch
.text:00407770 arg_C           = dword ptr  10h
.text:00407770
.text:00407770                 push    ebp
.text:00407771                 push    edi
.text:00407772                 push    esi
.text:00407773                 push    ebx
.text:00407774                 sub     esp, 13Ch
.text:0040777A                 mov     eax, [esp+14Ch+arg_4]
.text:00407781                 mov     ecx, [esp+14Ch+arg_8]
.text:00407788                 shl     ecx, 2
.text:0040778B                 test    eax, eax
.text:0040778D                 mov     [esp+14Ch+var_120], ecx
.text:00407791                 jz      loc_4078EC
.text:00407797                 lea     ecx, [eax-1]
.text:0040779A                 cmp     eax, 4
.text:0040779D                 mov     [esp+14Ch+var_13C], ecx
.text:004077A1                 jbe     short loc_4077D6
.text:004077A3                 mov     edi, [esp+14Ch+arg_8]
.text:004077AA                 lea     ebx, [esp+14Ch+var_114]
.text:004077AE                 mov     edx, [esp+14Ch+var_13C]
.text:004077B2                 mov     [esp+14Ch+var_12C], ebx
.text:004077B6                 mov     ebp, [esp+14Ch+arg_0]
.text:004077BD                 lea     eax, [esp+14Ch+var_11C]
.text:004077C1                 imul    edi, edx
.text:004077C4                 mov     [esp+14Ch+var_124], ebp
.text:004077C8                 add     edi, ebp
.text:004077CA                 cmp     eax, ebx
.text:004077CC                 mov     [esp+14Ch+var_128], edi
.text:004077D0                 jb      loc_40791F
.text:004077D6
.text:004077D6 loc_4077D6:                             ; CODE XREF: __quicksort+31↑j
.text:004077D6                                         ; __quicksort+313↓j
.text:004077D6                 mov     ebx, [esp+14Ch+arg_8]
.text:004077DD                 mov     edx, [esp+14Ch+var_13C]
.text:004077E1                 mov     ecx, [esp+14Ch+arg_0]
.text:004077E8                 mov     esi, [esp+14Ch+arg_0]
.text:004077EF                 imul    ebx, edx
.text:004077F2                 mov     edi, [esp+14Ch+var_120]
.text:004077F6                 add     ebx, ecx
.text:004077F8                 mov     [esp+14Ch+var_134], ebx
.text:004077FC                 lea     ebx, [edi+esi]
.text:004077FF                 cmp     ebx, [esp+14Ch+var_134]
.text:00407803                 jbe     short loc_407809
.text:00407805                 mov     ebx, [esp+14Ch+var_134]
.text:00407809
.text:00407809 loc_407809:                             ; CODE XREF: __quicksort+93↑j
.text:00407809                 mov     ebp, [esp+14Ch+arg_8]
.text:00407810                 lea     edi, [ebp+esi+0]
.text:00407814                 cmp     edi, ebx
.text:00407816                 mov     ebp, edi
.text:00407818                 jbe     loc_4078F7
.text:0040781E
.text:0040781E loc_40781E:                             ; CODE XREF: __quicksort+1A6↓j
.text:0040781E                 cmp     esi, [esp+14Ch+arg_0]
.text:00407825                 jz      short loc_407846
.text:00407827                 mov     edi, [esp+14Ch+arg_8]
.text:0040782E                 mov     ebx, esi
.text:00407830                 mov     ecx, [esp+14Ch+arg_0]
.text:00407837
.text:00407837 loc_407837:                             ; CODE XREF: __quicksort+D4↓j
.text:00407837                 movzx   edx, byte ptr [ebx]
.text:0040783A                 movzx   eax, byte ptr [ecx]
.text:0040783D                 mov     [ebx], al
.text:0040783F                 inc     ebx
.text:00407840                 mov     [ecx], dl
.text:00407842                 inc     ecx
.text:00407843                 dec     edi
.text:00407844                 jnz     short loc_407837
.text:00407846
.text:00407846 loc_407846:                             ; CODE XREF: __quicksort+B5↑j
.text:00407846                 mov     esi, [esp+14Ch+arg_8]
.text:0040784D                 lea     edi, [esi+ebp]
.text:00407850                 cmp     edi, [esp+14Ch+var_134]
.text:00407854                 ja      loc_4078EC
.text:0040785A
.text:0040785A loc_40785A:                             ; CODE XREF: __quicksort+176↓j
.text:0040785A                 mov     esi, edi
.text:0040785C                 lea     esi, [esi+0]
.text:00407860
.text:00407860 loc_407860:                             ; CODE XREF: __quicksort+109↓j
.text:00407860                 mov     [esp+14Ch+var_14C], edi
.text:00407863                 mov     ebx, [esp+14Ch+arg_8]
.text:0040786A                 sub     esi, ebx
.text:0040786C                 mov     [esp+14Ch+var_148], esi
.text:00407870                 call    [esp+14Ch+arg_C]
.text:00407877                 test    eax, eax
.text:00407879                 js      short loc_407860
.text:0040787B                 mov     edx, [esp+14Ch+arg_8]
.text:00407882                 mov     eax, [esp+14Ch+arg_8]
.text:00407889                 add     esi, edx
.text:0040788B                 cmp     esi, edi
.text:0040788D                 lea     ebp, [eax+edi]
.text:00407890                 jz      short loc_4078E0
.text:00407892                 lea     ebx, [ebp-1]
.text:00407895                 cmp     ebx, edi
.text:00407897                 jb      short loc_4078E0
.text:00407899                 lea     esi, [esi+0]
.text:004078A0
.text:004078A0 loc_4078A0:                             ; CODE XREF: __quicksort+16E↓j
.text:004078A0                 movzx   ecx, byte ptr [ebx]
.text:004078A3                 mov     edx, ebx
.text:004078A5                 mov     eax, [esp+14Ch+arg_8]
.text:004078AC                 mov     [esp+14Ch+var_135], cl
.text:004078B0                 sub     edx, eax
.text:004078B2                 cmp     edx, esi
.text:004078B4                 mov     ecx, ebx
.text:004078B6                 jb      short loc_4078D4
.text:004078B8                 nop
.text:004078B9                 lea     esi, [esi+0]
.text:004078C0
.text:004078C0 loc_4078C0:                             ; CODE XREF: __quicksort+162↓j
.text:004078C0                 movzx   eax, byte ptr [edx]
.text:004078C3                 mov     [ecx], al
.text:004078C5                 mov     eax, [esp+14Ch+arg_8]
.text:004078CC                 mov     ecx, edx
.text:004078CE                 sub     edx, eax
.text:004078D0                 cmp     edx, esi
.text:004078D2                 jnb     short loc_4078C0
.text:004078D4
.text:004078D4 loc_4078D4:                             ; CODE XREF: __quicksort+146↑j
.text:004078D4                 movzx   eax, [esp+14Ch+var_135]
.text:004078D9                 dec     ebx
.text:004078DA                 cmp     ebx, edi
.text:004078DC                 mov     [ecx], al
.text:004078DE                 jnb     short loc_4078A0
.text:004078E0
.text:004078E0 loc_4078E0:                             ; CODE XREF: __quicksort+120↑j
.text:004078E0                                         ; __quicksort+127↑j
.text:004078E0                 cmp     ebp, [esp+14Ch+var_134]
.text:004078E4                 mov     edi, ebp
.text:004078E6                 jbe     loc_40785A
.text:004078EC
.text:004078EC loc_4078EC:                             ; CODE XREF: __quicksort+21↑j
.text:004078EC                                         ; __quicksort+E4↑j
.text:004078EC                 add     esp, 13Ch
.text:004078F2                 pop     ebx
.text:004078F3                 pop     esi
.text:004078F4                 pop     edi
.text:004078F5                 pop     ebp
.text:004078F6                 retn
.text:004078F7 ; ---------------------------------------------------------------------------
.text:004078F7
.text:004078F7 loc_4078F7:                             ; CODE XREF: __quicksort+A8↑j
.text:004078F7                                         ; __quicksort+1A4↓j
.text:004078F7                 mov     [esp+14Ch+var_148], esi
.text:004078FB                 mov     [esp+14Ch+var_14C], edi
.text:004078FE                 call    [esp+14Ch+arg_C]
.text:00407905                 test    eax, eax
.text:00407907                 js      short loc_40791B
.text:00407909
.text:00407909 loc_407909:                             ; CODE XREF: __quicksort+1AD↓j
.text:00407909                 mov     ecx, [esp+14Ch+arg_8]
.text:00407910                 add     edi, ecx
.text:00407912                 cmp     edi, ebx
.text:00407914                 jbe     short loc_4078F7
.text:00407916                 jmp     loc_40781E
.text:0040791B ; ---------------------------------------------------------------------------
.text:0040791B
.text:0040791B loc_40791B:                             ; CODE XREF: __quicksort+197↑j
.text:0040791B                 mov     esi, edi
.text:0040791D                 jmp     short loc_407909
.text:0040791F ; ---------------------------------------------------------------------------
.text:0040791F
.text:0040791F loc_40791F:                             ; CODE XREF: __quicksort+60↑j
.text:0040791F                                         ; __quicksort+30D↓j
.text:0040791F                 mov     eax, [esp+14Ch+var_128]
.text:00407923                 xor     edx, edx
.text:00407925                 mov     ebp, [esp+14Ch+var_124]
.text:00407929                 mov     edi, [esp+14Ch+arg_8]
.text:00407930                 mov     ebx, [esp+14Ch+var_124]
.text:00407934                 sub     eax, ebp
.text:00407936                 div     [esp+14Ch+arg_8]
.text:0040793D                 mov     ecx, [esp+14Ch+var_124]
.text:00407941                 mov     [esp+14Ch+var_148], ecx
.text:00407945                 shr     eax, 1
.text:00407947                 imul    eax, edi
.text:0040794A                 add     eax, ebx
.text:0040794C                 mov     [esp+14Ch+var_130], eax
.text:00407950                 mov     esi, [esp+14Ch+var_130]
.text:00407954                 mov     [esp+14Ch+var_14C], esi
.text:00407957                 call    [esp+14Ch+arg_C]
.text:0040795E                 test    eax, eax
.text:00407960                 js      loc_407B64
.text:00407966
.text:00407966 loc_407966:                             ; CODE XREF: __quicksort+412↓j
.text:00407966                 mov     edx, [esp+14Ch+var_130]
.text:0040796A                 mov     eax, [esp+14Ch+var_128]
.text:0040796E                 mov     [esp+14Ch+var_148], edx
.text:00407972                 mov     [esp+14Ch+var_14C], eax
.text:00407975                 call    [esp+14Ch+arg_C]
.text:0040797C                 test    eax, eax
.text:0040797E                 js      loc_407B05
.text:00407984
.text:00407984 loc_407984:                             ; CODE XREF: __quicksort+3CB↓j
.text:00407984                                         ; __quicksort+3EF↓j
.text:00407984                 mov     edi, [esp+14Ch+arg_8]
.text:0040798B                 mov     ebp, [esp+14Ch+var_124]
.text:0040798F                 mov     ebx, [esp+14Ch+arg_8]
.text:00407996                 add     ebp, edi
.text:00407998                 mov     edi, [esp+14Ch+var_128]
.text:0040799C                 sub     edi, ebx
.text:0040799E                 mov     esi, esi
.text:004079A0
.text:004079A0 loc_4079A0:                             ; CODE XREF: __quicksort+2C7↓j
.text:004079A0                                         ; __quicksort+390↓j
.text:004079A0                 mov     [esp+14Ch+var_14C], ebp
.text:004079A3                 mov     esi, [esp+14Ch+var_130]
.text:004079A7                 mov     [esp+14Ch+var_148], esi
.text:004079AB                 call    [esp+14Ch+arg_C]
.text:004079B2                 test    eax, eax
.text:004079B4                 js      loc_407AF7
.text:004079BA                 lea     esi, [esi+0]
.text:004079C0
.text:004079C0 loc_4079C0:                             ; CODE XREF: __quicksort+26F↓j
.text:004079C0                 mov     [esp+14Ch+var_148], edi
.text:004079C4                 mov     eax, [esp+14Ch+var_130]
.text:004079C8                 mov     [esp+14Ch+var_14C], eax
.text:004079CB                 call    [esp+14Ch+arg_C]
.text:004079D2                 test    eax, eax
.text:004079D4                 jns     short loc_4079E1
.text:004079D6                 mov     ecx, [esp+14Ch+arg_8]
.text:004079DD                 sub     edi, ecx
.text:004079DF                 jmp     short loc_4079C0
.text:004079E1 ; ---------------------------------------------------------------------------
.text:004079E1
.text:004079E1 loc_4079E1:                             ; CODE XREF: __quicksort+264↑j
.text:004079E1                 cmp     ebp, edi
.text:004079E3                 jnb     loc_407ADE
.text:004079E9                 mov     esi, [esp+14Ch+arg_8]
.text:004079F0                 mov     ebx, ebp
.text:004079F2                 mov     ecx, edi
.text:004079F4                 lea     esi, [esi+0]
.text:004079FA                 lea     edi, [edi+0]
.text:00407A00
.text:00407A00 loc_407A00:                             ; CODE XREF: __quicksort+29D↓j
.text:00407A00                 movzx   edx, byte ptr [ebx]
.text:00407A03                 movzx   eax, byte ptr [ecx]
.text:00407A06                 mov     [ebx], al
.text:00407A08                 inc     ebx
.text:00407A09                 mov     [ecx], dl
.text:00407A0B                 inc     ecx
.text:00407A0C                 dec     esi
.text:00407A0D                 jnz     short loc_407A00
.text:00407A0F                 cmp     [esp+14Ch+var_130], ebp
.text:00407A13                 jz      loc_407AD5
.text:00407A19                 cmp     [esp+14Ch+var_130], edi
.text:00407A1D                 jz      loc_407ACC
.text:00407A23
.text:00407A23 loc_407A23:                             ; CODE XREF: __quicksort+360↓j
.text:00407A23                                         ; __quicksort+369↓j
.text:00407A23                 mov     edx, [esp+14Ch+arg_8]
.text:00407A2A                 mov     ebx, [esp+14Ch+arg_8]
.text:00407A31                 add     ebp, edx
.text:00407A33                 sub     edi, ebx
.text:00407A35
.text:00407A35 loc_407A35:                             ; CODE XREF: __quicksort+370↓j
.text:00407A35                 cmp     ebp, edi
.text:00407A37                 jbe     loc_4079A0
.text:00407A3D
.text:00407A3D loc_407A3D:                             ; CODE XREF: __quicksort+382↓j
.text:00407A3D                 mov     esi, [esp+14Ch+var_124]
.text:00407A41                 mov     eax, edi
.text:00407A43                 sub     eax, esi
.text:00407A45                 cmp     eax, [esp+14Ch+var_120]
.text:00407A49                 ja      short loc_407A88
.text:00407A4B                 mov     [esp+14Ch+var_124], ebp
.text:00407A4F                 mov     edi, [esp+14Ch+var_128]
.text:00407A53                 sub     edi, ebp
.text:00407A55                 cmp     edi, [esp+14Ch+var_120]
.text:00407A59                 ja      short loc_407A75
.text:00407A5B                 sub     [esp+14Ch+var_12C], 8
.text:00407A60                 mov     edx, [esp+14Ch+var_12C]
.text:00407A64                 mov     ecx, [esp+14Ch+var_12C]
.text:00407A68                 mov     ebx, [edx]
.text:00407A6A                 mov     ebp, [ecx+4]
.text:00407A6D                 mov     [esp+14Ch+var_124], ebx
.text:00407A71                 mov     [esp+14Ch+var_128], ebp
.text:00407A75
.text:00407A75 loc_407A75:                             ; CODE XREF: __quicksort+2E9↑j
.text:00407A75                                         ; __quicksort+340↓j ...
.text:00407A75                 lea     eax, [esp+14Ch+var_11C]
.text:00407A79                 cmp     eax, [esp+14Ch+var_12C]
.text:00407A7D                 jb      loc_40791F
.text:00407A83                 jmp     loc_4077D6
.text:00407A88 ; ---------------------------------------------------------------------------
.text:00407A88
.text:00407A88 loc_407A88:                             ; CODE XREF: __quicksort+2D9↑j
.text:00407A88                 mov     edx, [esp+14Ch+var_128]
.text:00407A8C                 sub     edx, ebp
.text:00407A8E                 cmp     edx, [esp+14Ch+var_120]
.text:00407A92                 jbe     short loc_407AC6
.text:00407A94                 cmp     eax, edx
.text:00407A96                 jle     short loc_407AB2
.text:00407A98                 mov     ecx, [esp+14Ch+var_12C]
.text:00407A9C                 mov     ebx, [esp+14Ch+var_124]
.text:00407AA0                 mov     [esp+14Ch+var_124], ebp
.text:00407AA4                 mov     [ecx+4], edi
.text:00407AA7                 mov     [ecx], ebx
.text:00407AA9                 add     ecx, 8
.text:00407AAC                 mov     [esp+14Ch+var_12C], ecx
.text:00407AB0                 jmp     short loc_407A75
.text:00407AB2 ; ---------------------------------------------------------------------------
.text:00407AB2
.text:00407AB2 loc_407AB2:                             ; CODE XREF: __quicksort+326↑j
.text:00407AB2                 mov     esi, [esp+14Ch+var_12C]
.text:00407AB6                 mov     [esi], ebp
.text:00407AB8                 mov     ebp, [esp+14Ch+var_128]
.text:00407ABC                 mov     [esi+4], ebp
.text:00407ABF                 add     esi, 8
.text:00407AC2                 mov     [esp+14Ch+var_12C], esi
.text:00407AC6
.text:00407AC6 loc_407AC6:                             ; CODE XREF: __quicksort+322↑j
.text:00407AC6                 mov     [esp+14Ch+var_128], edi
.text:00407ACA                 jmp     short loc_407A75
.text:00407ACC ; ---------------------------------------------------------------------------
.text:00407ACC
.text:00407ACC loc_407ACC:                             ; CODE XREF: __quicksort+2AD↑j
.text:00407ACC                 mov     [esp+14Ch+var_130], ebp
.text:00407AD0                 jmp     loc_407A23
.text:00407AD5 ; ---------------------------------------------------------------------------
.text:00407AD5
.text:00407AD5 loc_407AD5:                             ; CODE XREF: __quicksort+2A3↑j
.text:00407AD5                 mov     [esp+14Ch+var_130], edi
.text:00407AD9                 jmp     loc_407A23
.text:00407ADE ; ---------------------------------------------------------------------------
.text:00407ADE
.text:00407ADE loc_407ADE:                             ; CODE XREF: __quicksort+273↑j
.text:00407ADE                 cmp     ebp, edi
.text:00407AE0                 jnz     loc_407A35
.text:00407AE6                 mov     esi, [esp+14Ch+arg_8]
.text:00407AED                 lea     ebp, [esi+edi]
.text:00407AF0                 sub     edi, esi
.text:00407AF2                 jmp     loc_407A3D
.text:00407AF7 ; ---------------------------------------------------------------------------
.text:00407AF7
.text:00407AF7 loc_407AF7:                             ; CODE XREF: __quicksort+244↑j
.text:00407AF7                 mov     edx, [esp+14Ch+arg_8]
.text:00407AFE                 add     ebp, edx
.text:00407B00                 jmp     loc_4079A0
.text:00407B05 ; ---------------------------------------------------------------------------
.text:00407B05
.text:00407B05 loc_407B05:                             ; CODE XREF: __quicksort+20E↑j
.text:00407B05                 mov     esi, [esp+14Ch+arg_8]
.text:00407B0C                 mov     ebx, [esp+14Ch+var_130]
.text:00407B10                 mov     ecx, [esp+14Ch+var_128]
.text:00407B14
.text:00407B14 loc_407B14:                             ; CODE XREF: __quicksort+3B1↓j
.text:00407B14                 movzx   edx, byte ptr [ebx]
.text:00407B17                 movzx   eax, byte ptr [ecx]
.text:00407B1A                 mov     [ebx], al
.text:00407B1C                 inc     ebx
.text:00407B1D                 mov     [ecx], dl
.text:00407B1F                 inc     ecx
.text:00407B20                 dec     esi
.text:00407B21                 jnz     short loc_407B14
.text:00407B23                 mov     ecx, [esp+14Ch+var_124]
.text:00407B27                 mov     esi, [esp+14Ch+var_130]
.text:00407B2B                 mov     [esp+14Ch+var_148], ecx
.text:00407B2F                 mov     [esp+14Ch+var_14C], esi
.text:00407B32                 call    [esp+14Ch+arg_C]
.text:00407B39                 test    eax, eax
.text:00407B3B                 jns     loc_407984
.text:00407B41                 mov     esi, [esp+14Ch+arg_8]
.text:00407B48                 mov     ebx, [esp+14Ch+var_130]
.text:00407B4C                 mov     ecx, [esp+14Ch+var_124]
.text:00407B50
.text:00407B50 loc_407B50:                             ; CODE XREF: __quicksort+3ED↓j
.text:00407B50                 movzx   edx, byte ptr [ebx]
.text:00407B53                 movzx   eax, byte ptr [ecx]
.text:00407B56                 mov     [ebx], al
.text:00407B58                 inc     ebx
.text:00407B59                 mov     [ecx], dl
.text:00407B5B                 inc     ecx
.text:00407B5C                 dec     esi
.text:00407B5D                 jnz     short loc_407B50
.text:00407B5F                 jmp     loc_407984
.text:00407B64 ; ---------------------------------------------------------------------------
.text:00407B64
.text:00407B64 loc_407B64:                             ; CODE XREF: __quicksort+1F0↑j
.text:00407B64                 mov     esi, [esp+14Ch+arg_8]
.text:00407B6B                 mov     ebx, [esp+14Ch+var_130]
.text:00407B6F                 mov     ecx, [esp+14Ch+var_124]
.text:00407B73
.text:00407B73 loc_407B73:                             ; CODE XREF: __quicksort+410↓j
.text:00407B73                 movzx   edx, byte ptr [ebx]
.text:00407B76                 movzx   eax, byte ptr [ecx]
.text:00407B79                 mov     [ebx], al
.text:00407B7B                 inc     ebx
.text:00407B7C                 mov     [ecx], dl
.text:00407B7E                 inc     ecx
.text:00407B7F                 dec     esi
.text:00407B80                 jnz     short loc_407B73
.text:00407B82                 jmp     loc_407966
.text:00407B82 __quicksort     endp
.text:00407B82
.text:00407B82 ; ---------------------------------------------------------------------------
.text:00407B87                 align 10h
.text:00407B90
.text:00407B90 ; =============== S U B R O U T I N E =======================================
.text:00407B90
.text:00407B90 ; Attributes: info_from_lumina
.text:00407B90
.text:00407B90 _sysconf        proc near               ; CODE XREF: sub_407590+F7↑p
.text:00407B90                                         ; sub_407590+11E↑p
.text:00407B90
.text:00407B90 arg_0           = dword ptr  4
.text:00407B90
.text:00407B90                 sub     esp, 0Ch
.text:00407B93                 mov     eax, [esp+0Ch+arg_0]
.text:00407B97                 cmp     eax, 83h        ; switch 132 cases
.text:00407B9C                 ja      def_407BA2      ; jumptable 67026652 default case, cases 50,56
.text:00407B9C                                         ; jumptable 00407BA2 default case, cases 50,56
.text:00407BA2                 jmp     ds:jpt_407BA2[eax*4] ; switch jump
.text:00407BA2 ; ---------------------------------------------------------------------------
.text:00407BA9                 align 4
.text:00407BAC jpt_407BA2      dd offset loc_407DE4, offset loc_407DE4, offset loc_407DE4
.text:00407BAC                                         ; DATA XREF: _sysconf+12↑r
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC ; jump table for switch statement
.text:00407BAC                 dd offset loc_407DEB, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407E98, offset loc_407DD0
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407E07, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset def_407BA2
.text:00407BAC                 dd offset loc_407EAC, offset loc_407E0E, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset def_407BA2
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407E15, offset loc_407E15, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407E1C
.text:00407BAC                 dd offset loc_407E24, offset loc_407E2C, offset loc_407E34
.text:00407BAC                 dd offset loc_407E4A, offset loc_407E3C, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407E43
.text:00407BAC                 dd offset loc_407E70, offset loc_407E7A, offset loc_407E4A
.text:00407BAC                 dd offset loc_407E51, offset loc_407E58, offset loc_407E58
.text:00407BAC                 dd offset loc_407E5F, offset loc_407E69, offset loc_407E84
.text:00407BAC                 dd offset loc_407E70, offset loc_407E7A, offset loc_407E84
.text:00407BAC                 dd offset loc_407E8E, offset loc_407E98, offset loc_407DD0
.text:00407BAC                 dd offset loc_407DD0, offset loc_407EA2, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407BAC                 dd offset loc_407EAC, offset loc_407EAC, offset loc_407EAC
.text:00407DBC ; ---------------------------------------------------------------------------
.text:00407DBC
.text:00407DBC def_407BA2:                             ; CODE XREF: _sysconf+C↑j
.text:00407DBC                                         ; _sysconf+12↑j
.text:00407DBC                                         ; DATA XREF: ...
.text:00407DBC                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:00407DBC                                         ; jumptable 00407BA2 default case, cases 50,56
.text:00407DC1                 mov     dword ptr [eax], 16h
.text:00407DC7                 mov     esi, esi
.text:00407DC9                 lea     edi, [edi+0]
.text:00407DD0
.text:00407DD0 loc_407DD0:                             ; CODE XREF: _sysconf+12↑j
.text:00407DD0                                         ; _sysconf+327↓j
.text:00407DD0                                         ; DATA XREF: ...
.text:00407DD0                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:00407DD0                                         ; jumptable 00407BA2 cases 41,116,117
.text:00407DD5                 lea     esi, [esi+0]
.text:00407DD9                 lea     edi, [edi+0]
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: _sysconf+259↓j
.text:00407DE0                                         ; _sysconf+26C↓j ...
.text:00407DE0                 add     esp, 0Ch
.text:00407DE3                 retn
.text:00407DE4 ; ---------------------------------------------------------------------------
.text:00407DE4
.text:00407DE4 loc_407DE4:                             ; CODE XREF: _sysconf+12↑j
.text:00407DE4                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407DE4                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:00407DE4                                         ; jumptable 00407BA2 cases 0-2
.text:00407DE9                 jmp     short loc_407DE0
.text:00407DEB ; ---------------------------------------------------------------------------
.text:00407DEB
.text:00407DEB loc_407DEB:                             ; CODE XREF: _sysconf+12↑j
.text:00407DEB                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407DEB                 call    sub_408150      ; jumptable 67026652 case 6
.text:00407DEB                                         ; jumptable 00407BA2 case 6
.text:00407DF0                 cmp     eax, 6
.text:00407DF3                 mov     edx, 6
.text:00407DF8                 jg      short loc_407DFE
.text:00407DFA
.text:00407DFA loc_407DFA:                             ; CODE XREF: _sysconf+275↓j
.text:00407DFA                 mov     eax, edx
.text:00407DFC                 jmp     short loc_407DE0
.text:00407DFE ; ---------------------------------------------------------------------------
.text:00407DFE
.text:00407DFE loc_407DFE:                             ; CODE XREF: _sysconf+268↑j
.text:00407DFE                 call    sub_408150
.text:00407E03                 mov     edx, eax
.text:00407E05                 jmp     short loc_407DFA
.text:00407E07 ; ---------------------------------------------------------------------------
.text:00407E07
.text:00407E07 loc_407E07:                             ; CODE XREF: _sysconf+12↑j
.text:00407E07                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E07                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:00407E07                                         ; jumptable 00407BA2 case 45
.text:00407E0C                 jmp     short loc_407DE0
.text:00407E0E ; ---------------------------------------------------------------------------
.text:00407E0E
.text:00407E0E loc_407E0E:                             ; CODE XREF: _sysconf+12↑j
.text:00407E0E                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E0E                 mov     eax, 1          ; jumptable 67026652 case 52
.text:00407E0E                                         ; jumptable 00407BA2 case 52
.text:00407E13                 jmp     short loc_407DE0
.text:00407E15 ; ---------------------------------------------------------------------------
.text:00407E15
.text:00407E15 loc_407E15:                             ; CODE XREF: _sysconf+12↑j
.text:00407E15                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E15                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:00407E15                                         ; jumptable 00407BA2 cases 69,70
.text:00407E1A                 jmp     short loc_407DE0
.text:00407E1C ; ---------------------------------------------------------------------------
.text:00407E1C
.text:00407E1C loc_407E1C:                             ; CODE XREF: _sysconf+12↑j
.text:00407E1C                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E1C                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:00407E1C                                         ; jumptable 00407BA2 case 83
.text:00407E1F                 jmp     sub_408040
.text:00407E24 ; ---------------------------------------------------------------------------
.text:00407E24
.text:00407E24 loc_407E24:                             ; CODE XREF: _sysconf+12↑j
.text:00407E24                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E24                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:00407E24                                         ; jumptable 00407BA2 case 84
.text:00407E27                 jmp     sub_407FF0
.text:00407E2C ; ---------------------------------------------------------------------------
.text:00407E2C
.text:00407E2C loc_407E2C:                             ; CODE XREF: _sysconf+12↑j
.text:00407E2C                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E2C                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:00407E2C                                         ; jumptable 00407BA2 case 85
.text:00407E2F                 jmp     sub_408090
.text:00407E34 ; ---------------------------------------------------------------------------
.text:00407E34
.text:00407E34 loc_407E34:                             ; CODE XREF: _sysconf+12↑j
.text:00407E34                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E34                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:00407E34                                         ; jumptable 00407BA2 case 86
.text:00407E37                 jmp     sub_4080F0
.text:00407E3C ; ---------------------------------------------------------------------------
.text:00407E3C
.text:00407E3C loc_407E3C:                             ; CODE XREF: _sysconf+12↑j
.text:00407E3C                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E3C                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:00407E3C                                         ; jumptable 00407BA2 case 88
.text:00407E41                 jmp     short loc_407DE0
.text:00407E43 ; ---------------------------------------------------------------------------
.text:00407E43
.text:00407E43 loc_407E43:                             ; CODE XREF: _sysconf+12↑j
.text:00407E43                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E43                 mov     eax, 8          ; jumptable 67026652 case 101
.text:00407E43                                         ; jumptable 00407BA2 case 101
.text:00407E48                 jmp     short loc_407DE0
.text:00407E4A ; ---------------------------------------------------------------------------
.text:00407E4A
.text:00407E4A loc_407E4A:                             ; CODE XREF: _sysconf+12↑j
.text:00407E4A                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E4A                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:00407E4A                                         ; jumptable 00407BA2 cases 87,104
.text:00407E4F                 jmp     short loc_407DE0
.text:00407E51 ; ---------------------------------------------------------------------------
.text:00407E51
.text:00407E51 loc_407E51:                             ; CODE XREF: _sysconf+12↑j
.text:00407E51                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E51                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:00407E51                                         ; jumptable 00407BA2 case 105
.text:00407E56                 jmp     short loc_407DE0
.text:00407E58 ; ---------------------------------------------------------------------------
.text:00407E58
.text:00407E58 loc_407E58:                             ; CODE XREF: _sysconf+12↑j
.text:00407E58                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E58                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:00407E58                                         ; jumptable 00407BA2 cases 106,107
.text:00407E5D                 jmp     short loc_407DE0
.text:00407E5F ; ---------------------------------------------------------------------------
.text:00407E5F
.text:00407E5F loc_407E5F:                             ; CODE XREF: _sysconf+12↑j
.text:00407E5F                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E5F                 mov     eax, 2          ; jumptable 67026652 case 108
.text:00407E5F                                         ; jumptable 00407BA2 case 108
.text:00407E64                 jmp     loc_407DE0
.text:00407E69 ; ---------------------------------------------------------------------------
.text:00407E69
.text:00407E69 loc_407E69:                             ; CODE XREF: _sysconf+12↑j
.text:00407E69                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E69                 xor     eax, eax        ; jumptable 67026652 case 109
.text:00407E69                                         ; jumptable 00407BA2 case 109
.text:00407E6B                 jmp     loc_407DE0
.text:00407E70 ; ---------------------------------------------------------------------------
.text:00407E70
.text:00407E70 loc_407E70:                             ; CODE XREF: _sysconf+12↑j
.text:00407E70                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E70                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:00407E70                                         ; jumptable 00407BA2 cases 102,111
.text:00407E75                 jmp     loc_407DE0
.text:00407E7A ; ---------------------------------------------------------------------------
.text:00407E7A
.text:00407E7A loc_407E7A:                             ; CODE XREF: _sysconf+12↑j
.text:00407E7A                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E7A                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:00407E7A                                         ; jumptable 00407BA2 cases 103,112
.text:00407E7F                 jmp     loc_407DE0
.text:00407E84 ; ---------------------------------------------------------------------------
.text:00407E84
.text:00407E84 loc_407E84:                             ; CODE XREF: _sysconf+12↑j
.text:00407E84                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E84                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:00407E84                                         ; jumptable 00407BA2 cases 110,113
.text:00407E89                 jmp     loc_407DE0
.text:00407E8E ; ---------------------------------------------------------------------------
.text:00407E8E
.text:00407E8E loc_407E8E:                             ; CODE XREF: _sysconf+12↑j
.text:00407E8E                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E8E                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:00407E8E                                         ; jumptable 00407BA2 case 114
.text:00407E93                 jmp     loc_407DE0
.text:00407E98 ; ---------------------------------------------------------------------------
.text:00407E98
.text:00407E98 loc_407E98:                             ; CODE XREF: _sysconf+12↑j
.text:00407E98                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407E98                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:00407E98                                         ; jumptable 00407BA2 cases 40,115
.text:00407E9D                 jmp     loc_407DE0
.text:00407EA2 ; ---------------------------------------------------------------------------
.text:00407EA2
.text:00407EA2 loc_407EA2:                             ; CODE XREF: _sysconf+12↑j
.text:00407EA2                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407EA2                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:00407EA2                                         ; jumptable 00407BA2 case 118
.text:00407EA7                 jmp     loc_407DE0
.text:00407EAC ; ---------------------------------------------------------------------------
.text:00407EAC
.text:00407EAC loc_407EAC:                             ; CODE XREF: _sysconf+12↑j
.text:00407EAC                                         ; DATA XREF: _sysconf:jpt_407BA2↑o
.text:00407EAC                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:00407EAC                                         ; jumptable 00407BA2 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:00407EB1                 mov     dword ptr [eax], 28h ; '('
.text:00407EB7                 jmp     loc_407DD0      ; jumptable 67026652 cases 41,116,117
.text:00407EB7 _sysconf        endp                    ; jumptable 00407BA2 cases 41,116,117
.text:00407EB7
.text:00407EB7 ; ---------------------------------------------------------------------------
.text:00407EBC                 align 10h
.text:00407EC0
.text:00407EC0 ; =============== S U B R O U T I N E =======================================
.text:00407EC0
.text:00407EC0
.text:00407EC0 sub_407EC0      proc near               ; CODE XREF: sub_4073A0+134↑p
.text:00407EC0                                         ; sub_4073A0+167↑p
.text:00407EC0
.text:00407EC0 var_1C          = dword ptr -1Ch
.text:00407EC0 var_18          = dword ptr -18h
.text:00407EC0 var_14          = dword ptr -14h
.text:00407EC0 arg_0           = dword ptr  4
.text:00407EC0 arg_4           = dword ptr  8
.text:00407EC0 arg_8           = dword ptr  0Ch
.text:00407EC0
.text:00407EC0                 push    edi
.text:00407EC1                 push    esi
.text:00407EC2                 push    ebx
.text:00407EC3                 sub     esp, 10h
.text:00407EC6                 mov     edi, [esp+1Ch+arg_8]
.text:00407ECA                 mov     esi, [esp+1Ch+arg_0]
.text:00407ECE                 mov     ebx, [esp+1Ch+arg_4]
.text:00407ED2                 cmp     edi, 0Fh
.text:00407ED5                 jbe     short loc_407F20
.text:00407ED7                 mov     ecx, esi
.text:00407ED9                 neg     ecx
.text:00407EDB                 and     ecx, 3
.text:00407EDE                 sub     edi, ecx
.text:00407EE0                 mov     edx, ecx
.text:00407EE2                 test    ecx, ecx
.text:00407EE4                 jz      short loc_407EFA
.text:00407EE6                 lea     esi, [esi+0]
.text:00407EE9                 lea     edi, [edi+0]
.text:00407EF0
.text:00407EF0 loc_407EF0:                             ; CODE XREF: sub_407EC0+38↓j
.text:00407EF0                 movzx   ecx, byte ptr [ebx]
.text:00407EF3                 inc     ebx
.text:00407EF4                 mov     [esi], cl
.text:00407EF6                 inc     esi
.text:00407EF7                 dec     edx
.text:00407EF8                 jnz     short loc_407EF0
.text:00407EFA
.text:00407EFA loc_407EFA:                             ; CODE XREF: sub_407EC0+24↑j
.text:00407EFA                 test    bl, 3
.text:00407EFD                 jnz     short loc_407F43
.text:00407EFF                 mov     [esp+1Ch+var_18], ebx
.text:00407F03                 mov     edx, edi
.text:00407F05                 shr     edx, 2
.text:00407F08                 mov     [esp+1Ch+var_14], edx
.text:00407F0C                 mov     [esp+1Ch+var_1C], esi
.text:00407F0F                 call    sub_408170
.text:00407F14
.text:00407F14 loc_407F14:                             ; CODE XREF: sub_407EC0+98↓j
.text:00407F14                 mov     edx, edi
.text:00407F16                 and     edx, 0FFFFFFFCh
.text:00407F19                 and     edi, 3
.text:00407F1C                 add     ebx, edx
.text:00407F1E                 add     esi, edx
.text:00407F20
.text:00407F20 loc_407F20:                             ; CODE XREF: sub_407EC0+15↑j
.text:00407F20                 test    edi, edi
.text:00407F22                 mov     edx, edi
.text:00407F24                 jz      short loc_407F3A
.text:00407F26                 lea     esi, [esi+0]
.text:00407F29                 lea     edi, [edi+0]
.text:00407F30
.text:00407F30 loc_407F30:                             ; CODE XREF: sub_407EC0+78↓j
.text:00407F30                 movzx   ecx, byte ptr [ebx]
.text:00407F33                 inc     ebx
.text:00407F34                 mov     [esi], cl
.text:00407F36                 inc     esi
.text:00407F37                 dec     edx
.text:00407F38                 jnz     short loc_407F30
.text:00407F3A
.text:00407F3A loc_407F3A:                             ; CODE XREF: sub_407EC0+64↑j
.text:00407F3A                 add     esp, 10h
.text:00407F3D                 mov     eax, esi
.text:00407F3F                 pop     ebx
.text:00407F40                 pop     esi
.text:00407F41                 pop     edi
.text:00407F42                 retn
.text:00407F43 ; ---------------------------------------------------------------------------
.text:00407F43
.text:00407F43 loc_407F43:                             ; CODE XREF: sub_407EC0+3D↑j
.text:00407F43                 mov     [esp+1Ch+var_18], ebx
.text:00407F47                 mov     ecx, edi
.text:00407F49                 shr     ecx, 2
.text:00407F4C                 mov     [esp+1Ch+var_14], ecx
.text:00407F50                 mov     [esp+1Ch+var_1C], esi
.text:00407F53                 call    sub_408270
.text:00407F58                 jmp     short loc_407F14
.text:00407F58 sub_407EC0      endp
.text:00407F58
.text:00407F58 ; ---------------------------------------------------------------------------
.text:00407F5A                 align 10h
.text:00407F60
.text:00407F60 ; =============== S U B R O U T I N E =======================================
.text:00407F60
.text:00407F60
.text:00407F60 sub_407F60      proc near               ; CODE XREF: sub_407710+1A↑p
.text:00407F60
.text:00407F60 arg_0           = dword ptr  4
.text:00407F60 arg_4           = dword ptr  8
.text:00407F60
.text:00407F60                 push    esi
.text:00407F61                 xor     edx, edx
.text:00407F63                 push    ebx
.text:00407F64                 mov     ecx, [esp+8+arg_4]
.text:00407F68                 mov     esi, [esp+8+arg_0]
.text:00407F6C                 test    ecx, ecx
.text:00407F6E                 lea     ebx, [ecx+esi]
.text:00407F71                 jz      short loc_407FE7
.text:00407F73                 cmp     ebx, esi
.text:00407F75                 mov     eax, esi
.text:00407F77                 sbb     edx, edx
.text:00407F79                 or      ebx, edx
.text:00407F7B                 test    esi, 3
.text:00407F81                 jz      short loc_407F9A
.text:00407F83                 lea     esi, [esi+0]
.text:00407F89                 lea     edi, [edi+0]
.text:00407F90
.text:00407F90 loc_407F90:                             ; CODE XREF: sub_407F60+38↓j
.text:00407F90                 cmp     byte ptr [eax], 0
.text:00407F93                 jz      short loc_407FDD
.text:00407F95                 inc     eax
.text:00407F96                 test    al, 3
.text:00407F98                 jnz     short loc_407F90
.text:00407F9A
.text:00407F9A loc_407F9A:                             ; CODE XREF: sub_407F60+21↑j
.text:00407F9A                 cmp     eax, ebx
.text:00407F9C                 mov     edx, eax
.text:00407F9E                 jnb     short loc_407FDD
.text:00407FA0
.text:00407FA0 loc_407FA0:                             ; CODE XREF: sub_407F60+7B↓j
.text:00407FA0                 mov     eax, [edx]
.text:00407FA2                 add     edx, 4
.text:00407FA5                 sub     eax, 1010101h
.text:00407FAA                 test    eax, 80808080h
.text:00407FAF                 jz      short loc_407FD7
.text:00407FB1                 cmp     byte ptr [edx-4], 0
.text:00407FB5                 lea     ecx, [edx-4]
.text:00407FB8                 mov     eax, ecx
.text:00407FBA                 jz      short loc_407FDD
.text:00407FBC                 cmp     byte ptr [ecx+1], 0
.text:00407FC0                 lea     eax, [edx-3]
.text:00407FC3                 jz      short loc_407FDD
.text:00407FC5                 cmp     byte ptr [ecx+2], 0
.text:00407FC9                 lea     eax, [edx-2]
.text:00407FCC                 jz      short loc_407FDD
.text:00407FCE                 cmp     byte ptr [ecx+3], 0
.text:00407FD2                 lea     eax, [edx-1]
.text:00407FD5                 jz      short loc_407FDD
.text:00407FD7
.text:00407FD7 loc_407FD7:                             ; CODE XREF: sub_407F60+4F↑j
.text:00407FD7                 cmp     edx, ebx
.text:00407FD9                 mov     eax, ebx
.text:00407FDB                 jb      short loc_407FA0
.text:00407FDD
.text:00407FDD loc_407FDD:                             ; CODE XREF: sub_407F60+33↑j
.text:00407FDD                                         ; sub_407F60+3E↑j ...
.text:00407FDD                 cmp     eax, ebx
.text:00407FDF                 jbe     short loc_407FE3
.text:00407FE1                 mov     eax, ebx
.text:00407FE3
.text:00407FE3 loc_407FE3:                             ; CODE XREF: sub_407F60+7F↑j
.text:00407FE3                 mov     edx, eax
.text:00407FE5                 sub     edx, esi
.text:00407FE7
.text:00407FE7 loc_407FE7:                             ; CODE XREF: sub_407F60+11↑j
.text:00407FE7                 pop     ebx
.text:00407FE8                 mov     eax, edx
.text:00407FEA                 pop     esi
.text:00407FEB                 retn
.text:00407FEB sub_407F60      endp
.text:00407FEB
.text:00407FEB ; ---------------------------------------------------------------------------
.text:00407FEC                 align 10h
.text:00407FF0
.text:00407FF0 ; =============== S U B R O U T I N E =======================================
.text:00407FF0
.text:00407FF0
.text:00407FF0 sub_407FF0      proc near               ; CODE XREF: _sysconf+297↑j
.text:00407FF0
.text:00407FF0 lpSystemInfo    = dword ptr -0Ch
.text:00407FF0 var_4           = dword ptr -4
.text:00407FF0
.text:00407FF0                 sub     esp, 0Ch
.text:00407FF3                 mov     [esp+0Ch+var_4], edi
.text:00407FF7                 mov     edi, ds:dword_40A2B0
.text:00407FFD                 test    edi, edi
.text:00407FFF                 mov     eax, edi
.text:00408001                 jz      short loc_408010
.text:00408003
.text:00408003 loc_408003:                             ; CODE XREF: sub_407FF0+48↓j
.text:00408003                 mov     eax, [edi+14h]
.text:00408006                 mov     edi, [esp+0Ch+var_4]
.text:0040800A                 add     esp, 0Ch
.text:0040800D                 retn
.text:0040800D ; ---------------------------------------------------------------------------
.text:0040800E                 align 10h
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407FF0+11↑j
.text:00408010                 cld
.text:00408011                 mov     edi, offset SystemInfo
.text:00408016                 mov     ecx, 9
.text:0040801B                 mov     ds:dword_40A2B0, edi
.text:00408021                 rep stosd
.text:00408023                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040802A                 call    GetSystemInfo
.text:0040802F                 mov     edi, ds:dword_40A2B0
.text:00408035                 sub     esp, 4
.text:00408038                 jmp     short loc_408003
.text:00408038 sub_407FF0      endp
.text:00408038
.text:00408038 ; ---------------------------------------------------------------------------
.text:0040803A                 align 10h
.text:00408040
.text:00408040 ; =============== S U B R O U T I N E =======================================
.text:00408040
.text:00408040
.text:00408040 sub_408040      proc near               ; CODE XREF: _sysconf+28F↑j
.text:00408040
.text:00408040 lpSystemInfo    = dword ptr -0Ch
.text:00408040 var_4           = dword ptr -4
.text:00408040
.text:00408040                 sub     esp, 0Ch
.text:00408043                 mov     [esp+0Ch+var_4], edi
.text:00408047                 mov     edi, ds:dword_40A2B0
.text:0040804D                 test    edi, edi
.text:0040804F                 mov     eax, edi
.text:00408051                 jz      short loc_408060
.text:00408053
.text:00408053 loc_408053:                             ; CODE XREF: sub_408040+48↓j
.text:00408053                 mov     eax, [edi+14h]
.text:00408056                 mov     edi, [esp+0Ch+var_4]
.text:0040805A                 add     esp, 0Ch
.text:0040805D                 retn
.text:0040805D ; ---------------------------------------------------------------------------
.text:0040805E                 align 10h
.text:00408060
.text:00408060 loc_408060:                             ; CODE XREF: sub_408040+11↑j
.text:00408060                 cld
.text:00408061                 mov     edi, offset SystemInfo
.text:00408066                 mov     ecx, 9
.text:0040806B                 mov     ds:dword_40A2B0, edi
.text:00408071                 rep stosd
.text:00408073                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040807A                 call    GetSystemInfo
.text:0040807F                 mov     edi, ds:dword_40A2B0
.text:00408085                 sub     esp, 4
.text:00408088                 jmp     short loc_408053
.text:00408088 sub_408040      endp
.text:00408088
.text:00408088 ; ---------------------------------------------------------------------------
.text:0040808A                 align 10h
.text:00408090
.text:00408090 ; =============== S U B R O U T I N E =======================================
.text:00408090
.text:00408090
.text:00408090 sub_408090      proc near               ; CODE XREF: _sysconf+29F↑j
.text:00408090
.text:00408090 lpSystemInfo    = dword ptr -0Ch
.text:00408090 var_4           = dword ptr -4
.text:00408090
.text:00408090                 sub     esp, 0Ch
.text:00408093                 mov     [esp+0Ch+var_4], edi
.text:00408097                 mov     edi, ds:dword_40A2B0
.text:0040809D                 test    edi, edi
.text:0040809F                 mov     eax, edi
.text:004080A1                 jz      short loc_4080B8
.text:004080A3
.text:004080A3 loc_4080A3:                             ; CODE XREF: sub_408090+50↓j
.text:004080A3                 mov     eax, [edi+0Ch]
.text:004080A6                 xor     edx, edx
.text:004080A8                 mov     ecx, [edi+8]
.text:004080AB                 sub     eax, ecx
.text:004080AD                 div     dword ptr [edi+4]
.text:004080B0                 mov     edi, [esp+0Ch+var_4]
.text:004080B4                 add     esp, 0Ch
.text:004080B7                 retn
.text:004080B8 ; ---------------------------------------------------------------------------
.text:004080B8
.text:004080B8 loc_4080B8:                             ; CODE XREF: sub_408090+11↑j
.text:004080B8                 cld
.text:004080B9                 mov     edi, offset SystemInfo
.text:004080BE                 mov     ecx, 9
.text:004080C3                 mov     ds:dword_40A2B0, edi
.text:004080C9                 rep stosd
.text:004080CB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:004080D2                 call    GetSystemInfo
.text:004080D7                 mov     edi, ds:dword_40A2B0
.text:004080DD                 sub     esp, 4
.text:004080E0                 jmp     short loc_4080A3
.text:004080E0 sub_408090      endp
.text:004080E0
.text:004080E0 ; ---------------------------------------------------------------------------
.text:004080E2                 align 10h
.text:004080F0
.text:004080F0 ; =============== S U B R O U T I N E =======================================
.text:004080F0
.text:004080F0
.text:004080F0 sub_4080F0      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:004080F0
.text:004080F0 lpSystemInfo    = dword ptr -0Ch
.text:004080F0 var_4           = dword ptr -4
.text:004080F0
.text:004080F0                 sub     esp, 0Ch
.text:004080F3                 mov     [esp+0Ch+var_4], edi
.text:004080F7                 mov     edi, ds:dword_40A2B0
.text:004080FD                 test    edi, edi
.text:004080FF                 mov     eax, edi
.text:00408101                 jz      short loc_408118
.text:00408103
.text:00408103 loc_408103:                             ; CODE XREF: sub_4080F0+50↓j
.text:00408103                 mov     edx, [edi+8]
.text:00408106                 mov     eax, [edi+0Ch]
.text:00408109                 sub     eax, edx
.text:0040810B                 xor     edx, edx
.text:0040810D                 div     dword ptr [edi+4]
.text:00408110                 mov     edi, [esp+0Ch+var_4]
.text:00408114                 add     esp, 0Ch
.text:00408117                 retn
.text:00408118 ; ---------------------------------------------------------------------------
.text:00408118
.text:00408118 loc_408118:                             ; CODE XREF: sub_4080F0+11↑j
.text:00408118                 cld
.text:00408119                 mov     edi, offset SystemInfo
.text:0040811E                 mov     ecx, 9
.text:00408123                 mov     ds:dword_40A2B0, edi
.text:00408129                 rep stosd
.text:0040812B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00408132                 call    GetSystemInfo
.text:00408137                 mov     edi, ds:dword_40A2B0
.text:0040813D                 sub     esp, 4
.text:00408140                 jmp     short loc_408103
.text:00408140 sub_4080F0      endp
.text:00408140
.text:00408140 ; ---------------------------------------------------------------------------
.text:00408142                 align 10h
.text:00408150
.text:00408150 ; =============== S U B R O U T I N E =======================================
.text:00408150
.text:00408150
.text:00408150 sub_408150      proc near               ; CODE XREF: _sysconf:loc_407DEB↑p
.text:00408150                                         ; _sysconf:loc_407DFE↑p
.text:00408150                 mov     edx, 40h ; '@'
.text:00408155                 mov     eax, 40h ; '@'
.text:0040815A                 mov     ds:dword_40A370, edx
.text:00408160                 retn
.text:00408160 sub_408150      endp
.text:00408160
.text:00408160 ; ---------------------------------------------------------------------------
.text:00408161                 align 10h
.text:00408170
.text:00408170 ; =============== S U B R O U T I N E =======================================
.text:00408170
.text:00408170
.text:00408170 sub_408170      proc near               ; CODE XREF: sub_407EC0+4F↑p
.text:00408170
.text:00408170 var_8           = dword ptr -8
.text:00408170 var_4           = dword ptr -4
.text:00408170 arg_0           = dword ptr  4
.text:00408170 arg_4           = dword ptr  8
.text:00408170 arg_8           = dword ptr  0Ch
.text:00408170
.text:00408170                 sub     esp, 8
.text:00408173                 mov     ecx, [esp+8+arg_0]
.text:00408177                 mov     [esp+8+var_8], ebx
.text:0040817A                 mov     ebx, [esp+8+arg_8]
.text:0040817E                 mov     [esp+8+var_4], esi
.text:00408182                 mov     edx, [esp+8+arg_4]
.text:00408186                 mov     eax, ebx
.text:00408188                 and     eax, 7
.text:0040818B                 cmp     eax, 7          ; switch 8 cases
.text:0040818E                 ja      short def_408190 ; jumptable 00408190 default case
.text:00408190                 jmp     ds:jpt_408190[eax*4] ; switch jump
.text:00408190 ; ---------------------------------------------------------------------------
.text:00408197                 align 4
.text:00408198 jpt_408190      dd offset loc_40821A    ; DATA XREF: sub_408170+20↑r
.text:00408198                 dd offset loc_408221    ; jump table for switch statement
.text:00408198                 dd offset loc_4081B8
.text:00408198                 dd offset loc_408229
.text:00408198                 dd offset loc_408236
.text:00408198                 dd offset loc_408243
.text:00408198                 dd offset loc_408250
.text:00408198                 dd offset loc_40825D
.text:004081B8 ; ---------------------------------------------------------------------------
.text:004081B8
.text:004081B8 loc_4081B8:                             ; CODE XREF: sub_408170+20↑j
.text:004081B8                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:004081B8                 mov     eax, [edx]      ; jumptable 00408190 case 2
.text:004081BA                 sub     ecx, 1Ch
.text:004081BD                 add     ebx, 6
.text:004081C0                 sub     edx, 18h
.text:004081C3                 lea     esi, [esi+0]
.text:004081C9                 lea     edi, [edi+0]
.text:004081D0
.text:004081D0 loc_4081D0:                             ; CODE XREF: sub_408170+A8↓j
.text:004081D0                 mov     esi, [edx+1Ch]
.text:004081D3                 add     edx, 20h ; ' '
.text:004081D6                 mov     [ecx+1Ch], eax
.text:004081D9                 add     ecx, 20h ; ' '
.text:004081DC                 sub     ebx, 8
.text:004081DF                 jnz     short def_408190 ; jumptable 00408190 default case
.text:004081E1                 mov     [ecx], esi
.text:004081E3                 mov     ebx, [esp+8+var_8]
.text:004081E6                 mov     esi, [esp+8+var_4]
.text:004081EA                 add     esp, 8
.text:004081ED                 retn
.text:004081ED ; ---------------------------------------------------------------------------
.text:004081EE                 align 10h
.text:004081F0
.text:004081F0 def_408190:                             ; CODE XREF: sub_408170+1E↑j
.text:004081F0                                         ; sub_408170+6F↑j ...
.text:004081F0                 mov     eax, [edx]      ; jumptable 00408190 default case
.text:004081F2                 mov     [ecx], esi
.text:004081F4
.text:004081F4 loc_4081F4:                             ; CODE XREF: sub_408170+AF↓j
.text:004081F4                 mov     esi, [edx+4]
.text:004081F7                 mov     [ecx+4], eax
.text:004081FA
.text:004081FA loc_4081FA:                             ; CODE XREF: sub_408170+F6↓j
.text:004081FA                 mov     eax, [edx+8]
.text:004081FD                 mov     [ecx+8], esi
.text:00408200
.text:00408200 loc_408200:                             ; CODE XREF: sub_408170+EB↓j
.text:00408200                 mov     esi, [edx+0Ch]
.text:00408203                 mov     [ecx+0Ch], eax
.text:00408206
.text:00408206 loc_408206:                             ; CODE XREF: sub_408170+DE↓j
.text:00408206                 mov     eax, [edx+10h]
.text:00408209                 mov     [ecx+10h], esi
.text:0040820C
.text:0040820C loc_40820C:                             ; CODE XREF: sub_408170+D1↓j
.text:0040820C                 mov     esi, [edx+14h]
.text:0040820F                 mov     [ecx+14h], eax
.text:00408212
.text:00408212 loc_408212:                             ; CODE XREF: sub_408170+C4↓j
.text:00408212                 mov     eax, [edx+18h]
.text:00408215                 mov     [ecx+18h], esi
.text:00408218                 jmp     short loc_4081D0
.text:0040821A ; ---------------------------------------------------------------------------
.text:0040821A
.text:0040821A loc_40821A:                             ; CODE XREF: sub_408170+20↑j
.text:0040821A                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:0040821A                 mov     eax, [edx]      ; jumptable 00408190 case 0
.text:0040821C                 sub     ecx, 4
.text:0040821F                 jmp     short loc_4081F4
.text:00408221 ; ---------------------------------------------------------------------------
.text:00408221
.text:00408221 loc_408221:                             ; CODE XREF: sub_408170+20↑j
.text:00408221                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:00408221                 mov     esi, [edx]      ; jumptable 00408190 case 1
.text:00408223                 dec     ebx
.text:00408224                 add     edx, 4
.text:00408227                 jmp     short def_408190 ; jumptable 00408190 default case
.text:00408229 ; ---------------------------------------------------------------------------
.text:00408229
.text:00408229 loc_408229:                             ; CODE XREF: sub_408170+20↑j
.text:00408229                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:00408229                 mov     esi, [edx]      ; jumptable 00408190 case 3
.text:0040822B                 sub     ecx, 18h
.text:0040822E                 add     ebx, 5
.text:00408231                 sub     edx, 14h
.text:00408234                 jmp     short loc_408212
.text:00408236 ; ---------------------------------------------------------------------------
.text:00408236
.text:00408236 loc_408236:                             ; CODE XREF: sub_408170+20↑j
.text:00408236                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:00408236                 mov     eax, [edx]      ; jumptable 00408190 case 4
.text:00408238                 sub     ecx, 14h
.text:0040823B                 add     ebx, 4
.text:0040823E                 sub     edx, 10h
.text:00408241                 jmp     short loc_40820C
.text:00408243 ; ---------------------------------------------------------------------------
.text:00408243
.text:00408243 loc_408243:                             ; CODE XREF: sub_408170+20↑j
.text:00408243                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:00408243                 mov     esi, [edx]      ; jumptable 00408190 case 5
.text:00408245                 sub     ecx, 10h
.text:00408248                 add     ebx, 3
.text:0040824B                 sub     edx, 0Ch
.text:0040824E                 jmp     short loc_408206
.text:00408250 ; ---------------------------------------------------------------------------
.text:00408250
.text:00408250 loc_408250:                             ; CODE XREF: sub_408170+20↑j
.text:00408250                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:00408250                 mov     eax, [edx]      ; jumptable 00408190 case 6
.text:00408252                 sub     ecx, 0Ch
.text:00408255                 add     ebx, 2
.text:00408258                 sub     edx, 8
.text:0040825B                 jmp     short loc_408200
.text:0040825D ; ---------------------------------------------------------------------------
.text:0040825D
.text:0040825D loc_40825D:                             ; CODE XREF: sub_408170+20↑j
.text:0040825D                                         ; DATA XREF: sub_408170:jpt_408190↑o
.text:0040825D                 mov     esi, [edx]      ; jumptable 00408190 case 7
.text:0040825F                 sub     ecx, 8
.text:00408262                 inc     ebx
.text:00408263                 sub     edx, 4
.text:00408266                 jmp     short loc_4081FA
.text:00408266 sub_408170      endp
.text:00408266
.text:00408266 ; ---------------------------------------------------------------------------
.text:00408268                 align 10h
.text:00408270
.text:00408270 ; =============== S U B R O U T I N E =======================================
.text:00408270
.text:00408270
.text:00408270 sub_408270      proc near               ; CODE XREF: sub_407EC0+93↑p
.text:00408270
.text:00408270 var_1C          = dword ptr -1Ch
.text:00408270 var_18          = dword ptr -18h
.text:00408270 var_14          = dword ptr -14h
.text:00408270 arg_0           = dword ptr  4
.text:00408270 arg_4           = dword ptr  8
.text:00408270 arg_8           = dword ptr  0Ch
.text:00408270
.text:00408270                 push    ebp
.text:00408271                 push    edi
.text:00408272                 push    esi
.text:00408273                 push    ebx
.text:00408274                 sub     esp, 0Ch
.text:00408277                 mov     edx, [esp+1Ch+arg_4]
.text:0040827B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00408283                 mov     eax, [esp+1Ch+arg_8]
.text:00408287                 mov     esi, [esp+1Ch+arg_0]
.text:0040828B                 mov     ecx, edx
.text:0040828D                 and     ecx, 3
.text:00408290                 and     eax, 3
.text:00408293                 shl     ecx, 3
.text:00408296                 and     edx, 0FFFFFFFCh
.text:00408299                 sub     [esp+1Ch+var_14], ecx
.text:0040829D                 cmp     eax, 1
.text:004082A0                 mov     [esp+1Ch+var_18], ecx
.text:004082A4                 jz      loc_408390
.text:004082AA                 cmp     eax, 1
.text:004082AD                 jb      loc_408380
.text:004082B3                 cmp     eax, 2
.text:004082B6                 jz      loc_408364
.text:004082BC                 cmp     eax, 3
.text:004082BF                 jz      loc_408353
.text:004082C5
.text:004082C5 loc_4082C5:                             ; CODE XREF: sub_408270+C7↓j
.text:004082C5                                         ; sub_408270+12C↓j
.text:004082C5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004082CA                 mov     eax, edi
.text:004082CC                 mov     ebx, [edx]
.text:004082CE                 shr     ebp, cl
.text:004082D0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004082D5                 shl     eax, cl
.text:004082D7                 or      ebp, eax
.text:004082D9                 mov     [esi], ebp
.text:004082DB
.text:004082DB loc_4082DB:                             ; CODE XREF: sub_408270+11B↓j
.text:004082DB                 mov     ecx, [edx+4]
.text:004082DE                 mov     ebp, ebx
.text:004082E0                 mov     [esp+1Ch+var_1C], ecx
.text:004082E3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004082E8                 shr     edi, cl
.text:004082EA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004082EF                 shl     ebp, cl
.text:004082F1                 or      edi, ebp
.text:004082F3                 mov     [esi+4], edi
.text:004082F6
.text:004082F6 loc_4082F6:                             ; CODE XREF: sub_408270+F2↓j
.text:004082F6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004082FB                 mov     edi, [esp+1Ch+var_1C]
.text:004082FE                 mov     ebp, [edx+8]
.text:00408301                 shr     ebx, cl
.text:00408303                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00408308                 shl     edi, cl
.text:0040830A                 or      ebx, edi
.text:0040830C                 mov     [esi+8], ebx
.text:0040830F
.text:0040830F loc_40830F:                             ; CODE XREF: sub_408270+107↓j
.text:0040830F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00408314                 mov     ebx, ebp
.text:00408316                 mov     edi, [edx+0Ch]
.text:00408319                 add     edx, 10h
.text:0040831C                 shr     [esp+1Ch+var_1C], cl
.text:0040831F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00408324                 shl     ebx, cl
.text:00408326                 or      [esp+1Ch+var_1C], ebx
.text:00408329                 mov     ebx, [esp+1Ch+var_1C]
.text:0040832C                 mov     [esi+0Ch], ebx
.text:0040832F                 add     esi, 10h
.text:00408332                 sub     [esp+1Ch+arg_8], 4
.text:00408337                 jnz     short loc_4082C5
.text:00408339                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040833E                 shr     ebp, cl
.text:00408340                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00408345                 shl     edi, cl
.text:00408347                 or      ebp, edi
.text:00408349                 mov     [esi], ebp
.text:0040834B                 add     esp, 0Ch
.text:0040834E                 pop     ebx
.text:0040834F                 pop     esi
.text:00408350                 pop     edi
.text:00408351                 pop     ebp
.text:00408352                 retn
.text:00408353 ; ---------------------------------------------------------------------------
.text:00408353
.text:00408353 loc_408353:                             ; CODE XREF: sub_408270+4F↑j
.text:00408353                 inc     [esp+1Ch+arg_8]
.text:00408357                 sub     esi, 8
.text:0040835A                 mov     eax, [edx+4]
.text:0040835D                 mov     ebx, [edx]
.text:0040835F                 mov     [esp+1Ch+var_1C], eax
.text:00408362                 jmp     short loc_4082F6
.text:00408364 ; ---------------------------------------------------------------------------
.text:00408364
.text:00408364 loc_408364:                             ; CODE XREF: sub_408270+46↑j
.text:00408364                 add     [esp+1Ch+arg_8], 2
.text:00408369                 sub     esi, 0Ch
.text:0040836C                 mov     ecx, [edx]
.text:0040836E                 mov     ebp, [edx+4]
.text:00408371                 sub     edx, 4
.text:00408374                 mov     [esp+1Ch+var_1C], ecx
.text:00408377                 jmp     short loc_40830F
.text:00408377 ; ---------------------------------------------------------------------------
.text:00408379                 align 10h
.text:00408380
.text:00408380 loc_408380:                             ; CODE XREF: sub_408270+3D↑j
.text:00408380                 mov     edi, [edx]
.text:00408382                 sub     esi, 4
.text:00408385                 mov     ebx, [edx+4]
.text:00408388                 add     edx, 4
.text:0040838B                 jmp     loc_4082DB
.text:00408390 ; ---------------------------------------------------------------------------
.text:00408390
.text:00408390 loc_408390:                             ; CODE XREF: sub_408270+34↑j
.text:00408390                 dec     [esp+1Ch+arg_8]
.text:00408394                 mov     ebp, [edx]
.text:00408396                 mov     edi, [edx+4]
.text:00408399                 add     edx, 8
.text:0040839C                 jmp     loc_4082C5
.text:0040839C sub_408270      endp
.text:0040839C
.text:004083A1 ; ---------------------------------------------------------------------------
.text:004083A1                 jmp     short loc_4083B0
.text:004083A1 ; ---------------------------------------------------------------------------
.text:004083A3                 align 10h
.text:004083B0
.text:004083B0 loc_4083B0:                             ; CODE XREF: .text:004083A1↑j
.text:004083B0                 sub     esp, 8
.text:004083B3                 mov     ecx, [esp+0Ch]
.text:004083B7                 mov     [esp+4], esi
.text:004083BB                 mov     esi, [esp+14h]
.text:004083BF                 mov     [esp], ebx
.text:004083C2                 mov     edx, [esp+10h]
.text:004083C6                 mov     eax, esi
.text:004083C8                 and     eax, 7
.text:004083CB                 cmp     eax, 7          ; switch 8 cases
.text:004083CE                 ja      short def_4083D0 ; jumptable 004083D0 default case
.text:004083D0                 jmp     ds:jpt_4083D0[eax*4] ; switch jump
.text:004083D0 ; ---------------------------------------------------------------------------
.text:004083D7                 align 4
.text:004083D8 jpt_4083D0      dd offset loc_40845C    ; DATA XREF: .text:004083D0↑r
.text:004083D8                 dd offset loc_408467    ; jump table for switch statement
.text:004083D8                 dd offset loc_4083F8
.text:004083D8                 dd offset loc_408473
.text:004083D8                 dd offset loc_408481
.text:004083D8                 dd offset loc_40848F
.text:004083D8                 dd offset loc_40849D
.text:004083D8                 dd offset loc_4084AB
.text:004083F8 ; ---------------------------------------------------------------------------
.text:004083F8
.text:004083F8 loc_4083F8:                             ; CODE XREF: .text:004083D0↑j
.text:004083F8                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:004083F8                 sub     edx, 8          ; jumptable 004083D0 case 2
.text:004083FB                 sub     ecx, 4
.text:004083FE                 mov     eax, [edx+4]
.text:00408401                 add     esi, 6
.text:00408404                 lea     esi, [esi+0]
.text:0040840A                 lea     edi, [edi+0]
.text:00408410
.text:00408410 loc_408410:                             ; CODE XREF: .text:0040845A↓j
.text:00408410                 mov     ebx, [edx]
.text:00408412                 sub     edx, 20h ; ' '
.text:00408415                 mov     [ecx], eax
.text:00408417                 sub     ecx, 20h ; ' '
.text:0040841A                 sub     esi, 8
.text:0040841D                 jnz     short def_4083D0 ; jumptable 004083D0 default case
.text:0040841F                 mov     [ecx+1Ch], ebx
.text:00408422                 mov     ebx, [esp]
.text:00408425                 mov     esi, [esp+4]
.text:00408429                 add     esp, 8
.text:0040842C                 retn
.text:0040842C ; ---------------------------------------------------------------------------
.text:0040842D                 align 10h
.text:00408430
.text:00408430 def_4083D0:                             ; CODE XREF: .text:004083CE↑j
.text:00408430                                         ; .text:0040841D↑j ...
.text:00408430                 mov     eax, [edx+1Ch]  ; jumptable 004083D0 default case
.text:00408433                 mov     [ecx+1Ch], ebx
.text:00408436
.text:00408436 loc_408436:                             ; CODE XREF: .text:00408465↓j
.text:00408436                 mov     ebx, [edx+18h]
.text:00408439                 mov     [ecx+18h], eax
.text:0040843C
.text:0040843C loc_40843C:                             ; CODE XREF: .text:004084B5↓j
.text:0040843C                 mov     eax, [edx+14h]
.text:0040843F                 mov     [ecx+14h], ebx
.text:00408442
.text:00408442 loc_408442:                             ; CODE XREF: .text:004084A9↓j
.text:00408442                 mov     ebx, [edx+10h]
.text:00408445                 mov     [ecx+10h], eax
.text:00408448
.text:00408448 loc_408448:                             ; CODE XREF: .text:0040849B↓j
.text:00408448                 mov     eax, [edx+0Ch]
.text:0040844B                 mov     [ecx+0Ch], ebx
.text:0040844E
.text:0040844E loc_40844E:                             ; CODE XREF: .text:0040848D↓j
.text:0040844E                 mov     ebx, [edx+8]
.text:00408451                 mov     [ecx+8], eax
.text:00408454
.text:00408454 loc_408454:                             ; CODE XREF: .text:0040847F↓j
.text:00408454                 mov     eax, [edx+4]
.text:00408457                 mov     [ecx+4], ebx
.text:0040845A                 jmp     short loc_408410
.text:0040845C ; ---------------------------------------------------------------------------
.text:0040845C
.text:0040845C loc_40845C:                             ; CODE XREF: .text:004083D0↑j
.text:0040845C                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:0040845C                 sub     edx, 20h ; ' '  ; jumptable 004083D0 case 0
.text:0040845F                 sub     ecx, 1Ch
.text:00408462                 mov     eax, [edx+1Ch]
.text:00408465                 jmp     short loc_408436
.text:00408467 ; ---------------------------------------------------------------------------
.text:00408467
.text:00408467 loc_408467:                             ; CODE XREF: .text:004083D0↑j
.text:00408467                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:00408467                 sub     edx, 24h ; '$'  ; jumptable 004083D0 case 1
.text:0040846A                 sub     ecx, 20h ; ' '
.text:0040846D                 mov     ebx, [edx+20h]
.text:00408470                 dec     esi
.text:00408471                 jmp     short def_4083D0 ; jumptable 004083D0 default case
.text:00408473 ; ---------------------------------------------------------------------------
.text:00408473
.text:00408473 loc_408473:                             ; CODE XREF: .text:004083D0↑j
.text:00408473                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:00408473                 sub     edx, 0Ch        ; jumptable 004083D0 case 3
.text:00408476                 sub     ecx, 8
.text:00408479                 mov     ebx, [edx+8]
.text:0040847C                 add     esi, 5
.text:0040847F                 jmp     short loc_408454
.text:00408481 ; ---------------------------------------------------------------------------
.text:00408481
.text:00408481 loc_408481:                             ; CODE XREF: .text:004083D0↑j
.text:00408481                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:00408481                 sub     edx, 10h        ; jumptable 004083D0 case 4
.text:00408484                 sub     ecx, 0Ch
.text:00408487                 mov     eax, [edx+0Ch]
.text:0040848A                 add     esi, 4
.text:0040848D                 jmp     short loc_40844E
.text:0040848F ; ---------------------------------------------------------------------------
.text:0040848F
.text:0040848F loc_40848F:                             ; CODE XREF: .text:004083D0↑j
.text:0040848F                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:0040848F                 sub     edx, 14h        ; jumptable 004083D0 case 5
.text:00408492                 sub     ecx, 10h
.text:00408495                 mov     ebx, [edx+10h]
.text:00408498                 add     esi, 3
.text:0040849B                 jmp     short loc_408448
.text:0040849D ; ---------------------------------------------------------------------------
.text:0040849D
.text:0040849D loc_40849D:                             ; CODE XREF: .text:004083D0↑j
.text:0040849D                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:0040849D                 sub     edx, 18h        ; jumptable 004083D0 case 6
.text:004084A0                 sub     ecx, 14h
.text:004084A3                 mov     eax, [edx+14h]
.text:004084A6                 add     esi, 2
.text:004084A9                 jmp     short loc_408442
.text:004084AB ; ---------------------------------------------------------------------------
.text:004084AB
.text:004084AB loc_4084AB:                             ; CODE XREF: .text:004083D0↑j
.text:004084AB                                         ; DATA XREF: .text:jpt_4083D0↑o
.text:004084AB                 sub     edx, 1Ch        ; jumptable 004083D0 case 7
.text:004084AE                 sub     ecx, 18h
.text:004084B1                 mov     ebx, [edx+18h]
.text:004084B4                 inc     esi
.text:004084B5                 jmp     short loc_40843C
.text:004084B5 ; ---------------------------------------------------------------------------
.text:004084B7                 align 10h
.text:004084C0                 push    ebp
.text:004084C1                 push    edi
.text:004084C2                 push    esi
.text:004084C3                 push    ebx
.text:004084C4                 sub     esp, 8
.text:004084C7                 mov     edx, [esp+20h]
.text:004084CB                 mov     dword ptr [esp+4], 20h ; ' '
.text:004084D3                 mov     eax, [esp+24h]
.text:004084D7                 mov     ecx, edx
.text:004084D9                 and     ecx, 3
.text:004084DC                 and     eax, 3
.text:004084DF                 shl     ecx, 3
.text:004084E2                 sub     [esp+4], ecx
.text:004084E6                 and     edx, 0FFFFFFFCh
.text:004084E9                 add     edx, 4
.text:004084EC                 mov     [esp], ecx
.text:004084EF                 cmp     eax, 1
.text:004084F2                 jz      loc_4085E8
.text:004084F8                 cmp     eax, 1
.text:004084FB                 jb      loc_4085D5
.text:00408501                 cmp     eax, 2
.text:00408504                 jz      loc_4085C0
.text:0040850A                 cmp     eax, 3
.text:0040850D                 jz      loc_4085AC
.text:00408513
.text:00408513 loc_408513:                             ; CODE XREF: .text:0040858C↓j
.text:00408513                                         ; .text:004085FA↓j
.text:00408513                 movzx   ecx, byte ptr [esp]
.text:00408517                 mov     eax, edi
.text:00408519                 mov     ebx, [esp+1Ch]
.text:0040851D                 mov     esi, [edx+0Ch]
.text:00408520                 shr     eax, cl
.text:00408522                 movzx   ecx, byte ptr [esp+4]
.text:00408527                 shl     ebp, cl
.text:00408529                 or      eax, ebp
.text:0040852B                 mov     [ebx+0Ch], eax
.text:0040852E
.text:0040852E loc_40852E:                             ; CODE XREF: .text:004085E3↓j
.text:0040852E                 movzx   ecx, byte ptr [esp]
.text:00408532                 mov     ebp, esi
.text:00408534                 mov     ebx, [edx+8]
.text:00408537                 shr     ebp, cl
.text:00408539                 movzx   ecx, byte ptr [esp+4]
.text:0040853E                 shl     edi, cl
.text:00408540                 or      ebp, edi
.text:00408542                 mov     edi, [esp+1Ch]
.text:00408546                 mov     [edi+8], ebp
.text:00408549
.text:00408549 loc_408549:                             ; CODE XREF: .text:004085BE↓j
.text:00408549                 movzx   ecx, byte ptr [esp]
.text:0040854D                 mov     edi, ebx
.text:0040854F                 mov     ebp, [edx+4]
.text:00408552                 shr     edi, cl
.text:00408554                 movzx   ecx, byte ptr [esp+4]
.text:00408559                 shl     esi, cl
.text:0040855B                 or      edi, esi
.text:0040855D                 mov     esi, [esp+1Ch]
.text:00408561                 mov     [esi+4], edi
.text:00408564
.text:00408564 loc_408564:                             ; CODE XREF: .text:004085D3↓j
.text:00408564                 movzx   ecx, byte ptr [esp]
.text:00408568                 mov     esi, ebp
.text:0040856A                 mov     edi, [edx]
.text:0040856C                 sub     edx, 10h
.text:0040856F                 shr     esi, cl
.text:00408571                 movzx   ecx, byte ptr [esp+4]
.text:00408576                 shl     ebx, cl
.text:00408578                 or      esi, ebx
.text:0040857A                 mov     ebx, [esp+1Ch]
.text:0040857E                 mov     [ebx], esi
.text:00408580                 sub     ebx, 10h
.text:00408583                 sub     dword ptr [esp+24h], 4
.text:00408588                 mov     [esp+1Ch], ebx
.text:0040858C                 jnz     short loc_408513
.text:0040858E                 movzx   ecx, byte ptr [esp]
.text:00408592                 mov     edx, [esp+1Ch]
.text:00408596                 shr     edi, cl
.text:00408598                 movzx   ecx, byte ptr [esp+4]
.text:0040859D                 shl     ebp, cl
.text:0040859F                 or      edi, ebp
.text:004085A1                 mov     [edx+0Ch], edi
.text:004085A4                 add     esp, 8
.text:004085A7                 pop     ebx
.text:004085A8                 pop     esi
.text:004085A9                 pop     edi
.text:004085AA                 pop     ebp
.text:004085AB                 retn
.text:004085AC ; ---------------------------------------------------------------------------
.text:004085AC
.text:004085AC loc_4085AC:                             ; CODE XREF: .text:0040850D↑j
.text:004085AC                 sub     dword ptr [esp+1Ch], 8
.text:004085B1                 sub     edx, 10h
.text:004085B4                 inc     dword ptr [esp+24h]
.text:004085B8                 mov     esi, [edx+0Ch]
.text:004085BB                 mov     ebx, [edx+8]
.text:004085BE                 jmp     short loc_408549
.text:004085C0 ; ---------------------------------------------------------------------------
.text:004085C0
.text:004085C0 loc_4085C0:                             ; CODE XREF: .text:00408504↑j
.text:004085C0                 sub     dword ptr [esp+1Ch], 4
.text:004085C5                 sub     edx, 0Ch
.text:004085C8                 add     dword ptr [esp+24h], 2
.text:004085CD                 mov     ebx, [edx+8]
.text:004085D0                 mov     ebp, [edx+4]
.text:004085D3                 jmp     short loc_408564
.text:004085D5 ; ---------------------------------------------------------------------------
.text:004085D5
.text:004085D5 loc_4085D5:                             ; CODE XREF: .text:004084FB↑j
.text:004085D5                 sub     dword ptr [esp+1Ch], 0Ch
.text:004085DA                 sub     edx, 14h
.text:004085DD                 mov     edi, [edx+10h]
.text:004085E0                 mov     esi, [edx+0Ch]
.text:004085E3                 jmp     loc_40852E
.text:004085E8 ; ---------------------------------------------------------------------------
.text:004085E8
.text:004085E8 loc_4085E8:                             ; CODE XREF: .text:004084F2↑j
.text:004085E8                 sub     dword ptr [esp+1Ch], 10h
.text:004085ED                 sub     edx, 18h
.text:004085F0                 dec     dword ptr [esp+24h]
.text:004085F4                 mov     ebp, [edx+14h]
.text:004085F7                 mov     edi, [edx+10h]
.text:004085FA                 jmp     loc_408513
.text:004085FA ; ---------------------------------------------------------------------------
.text:004085FF                 align 10h
.text:00408600
.text:00408600 ; =============== S U B R O U T I N E =======================================
.text:00408600
.text:00408600 ; Attributes: thunk
.text:00408600
.text:00408600 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00408600 mbrtowc         proc near               ; CODE XREF: sub_405DA0+757↑p
.text:00408600
.text:00408600 DstCh           = dword ptr  4
.text:00408600 SrcCh           = dword ptr  8
.text:00408600 SizeInBytes     = dword ptr  0Ch
.text:00408600 State           = dword ptr  10h
.text:00408600
.text:00408600                 jmp     ds:__imp_mbrtowc
.text:00408600 mbrtowc         endp
.text:00408600
.text:00408600 ; ---------------------------------------------------------------------------
.text:00408606                 align 10h
.text:00408610
.text:00408610 ; =============== S U B R O U T I N E =======================================
.text:00408610
.text:00408610 ; Attributes: bp-based frame
.text:00408610
.text:00408610 sub_408610      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00408610                 push    ebp
.text:00408611                 mov     ecx, offset dword_40A000
.text:00408616                 cmp     ecx, offset dword_40A000
.text:0040861C                 mov     ebp, esp
.text:0040861E                 jnb     short loc_408636
.text:00408620
.text:00408620 loc_408620:                             ; CODE XREF: sub_408610+24↓j
.text:00408620                 mov     edx, [ecx+4]
.text:00408623                 mov     eax, [ecx]
.text:00408625                 add     ecx, 8
.text:00408628                 add     [edx+400000h], eax
.text:0040862E                 cmp     ecx, offset dword_40A000
.text:00408634                 jb      short loc_408620
.text:00408636
.text:00408636 loc_408636:                             ; CODE XREF: sub_408610+E↑j
.text:00408636                 pop     ebp
.text:00408637                 retn
.text:00408637 sub_408610      endp
.text:00408637
.text:00408637 ; ---------------------------------------------------------------------------
.text:00408638                 align 10h
.text:00408640
.text:00408640 ; =============== S U B R O U T I N E =======================================
.text:00408640
.text:00408640 ; Attributes: bp-based frame
.text:00408640
.text:00408640 sub_408640      proc near               ; CODE XREF: sub_401080+16↑p
.text:00408640                                         ; TopLevelExceptionFilter+D7↑p
.text:00408640                 push    ebp
.text:00408641                 mov     ebp, esp
.text:00408643                 fninit
.text:00408645                 pop     ebp
.text:00408646                 retn
.text:00408646 sub_408640      endp
.text:00408646
.text:00408646 ; ---------------------------------------------------------------------------
.text:00408647                 align 10h
.text:00408650
.text:00408650 ; =============== S U B R O U T I N E =======================================
.text:00408650
.text:00408650 ; Attributes: bp-based frame
.text:00408650
.text:00408650 ; void __cdecl sub_408650()
.text:00408650 sub_408650      proc near               ; DATA XREF: .text:loc_408699↓o
.text:00408650                                         ; sub_4086E0:loc_40870E↓o
.text:00408650                 push    ebp
.text:00408651                 mov     ebp, esp
.text:00408653                 sub     esp, 8
.text:00408656                 mov     eax, off_409084
.text:0040865B                 mov     edx, [eax]
.text:0040865D                 test    edx, edx
.text:0040865F                 jnz     short loc_408665
.text:00408661
.text:00408661 loc_408661:                             ; CODE XREF: sub_408650+2C↓j
.text:00408661                 mov     esp, ebp
.text:00408663                 pop     ebp
.text:00408664                 retn
.text:00408665 ; ---------------------------------------------------------------------------
.text:00408665
.text:00408665 loc_408665:                             ; CODE XREF: sub_408650+F↑j
.text:00408665                                         ; sub_408650+2A↓j
.text:00408665                 call    dword ptr [eax]
.text:00408667                 mov     edx, off_409084
.text:0040866D                 mov     ecx, [edx+4]
.text:00408670                 lea     eax, [edx+4]
.text:00408673                 mov     off_409084, eax
.text:00408678                 test    ecx, ecx
.text:0040867A                 jnz     short loc_408665
.text:0040867C                 jmp     short loc_408661
.text:0040867C sub_408650      endp
.text:0040867C
.text:0040867C ; ---------------------------------------------------------------------------
.text:0040867E                 align 10h
.text:00408680                 push    ebp
.text:00408681                 mov     ebp, esp
.text:00408683                 sub     esp, 8
.text:00408686                 mov     [ebp-4], ebx
.text:00408689                 mov     eax, ds:dword_408A20
.text:0040868E                 cmp     eax, 0FFFFFFFFh
.text:00408691                 jz      short loc_4086BC
.text:00408693
.text:00408693 loc_408693:                             ; CODE XREF: .text:004086C6↓j
.text:00408693                                         ; .text:004086D9↓j
.text:00408693                 test    eax, eax
.text:00408695                 mov     ebx, eax
.text:00408697                 jnz     short loc_4086B0
.text:00408699
.text:00408699 loc_408699:                             ; CODE XREF: .text:004086BA↓j
.text:00408699                 mov     dword ptr [esp], offset sub_408650
.text:004086A0                 call    sub_401040
.text:004086A5                 mov     ebx, [ebp-4]
.text:004086A8                 mov     esp, ebp
.text:004086AA                 pop     ebp
.text:004086AB                 retn
.text:004086AB ; ---------------------------------------------------------------------------
.text:004086AC                 align 10h
.text:004086B0
.text:004086B0 loc_4086B0:                             ; CODE XREF: .text:00408697↑j
.text:004086B0                                         ; .text:004086B8↓j
.text:004086B0                 call    ds:dword_408A20[ebx*4]
.text:004086B7                 dec     ebx
.text:004086B8                 jnz     short loc_4086B0
.text:004086BA                 jmp     short loc_408699
.text:004086BC ; ---------------------------------------------------------------------------
.text:004086BC
.text:004086BC loc_4086BC:                             ; CODE XREF: .text:00408691↑j
.text:004086BC                 mov     ecx, ds:dword_408A24
.text:004086C2                 xor     eax, eax
.text:004086C4                 test    ecx, ecx
.text:004086C6                 jz      short loc_408693
.text:004086C8                 mov     edx, offset dword_408A20
.text:004086CD                 lea     esi, [esi+0]
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: .text:004086D7↓j
.text:004086D0                 inc     eax
.text:004086D1                 mov     ecx, [edx+eax*4+4]
.text:004086D5                 test    ecx, ecx
.text:004086D7                 jnz     short loc_4086D0
.text:004086D9                 jmp     short loc_408693
.text:004086D9 ; ---------------------------------------------------------------------------
.text:004086DB                 align 10h
.text:004086E0
.text:004086E0 ; =============== S U B R O U T I N E =======================================
.text:004086E0
.text:004086E0 ; Attributes: bp-based frame
.text:004086E0
.text:004086E0 sub_4086E0      proc near               ; CODE XREF: sub_401CE0+19↑p
.text:004086E0
.text:004086E0 var_8           = dword ptr -8
.text:004086E0 var_4           = dword ptr -4
.text:004086E0
.text:004086E0                 push    ebp
.text:004086E1                 mov     ebp, esp
.text:004086E3                 sub     esp, 8
.text:004086E6                 mov     [ebp+var_4], ebx
.text:004086E9                 mov     edx, dword_409080
.text:004086EF                 test    edx, edx
.text:004086F1                 jnz     short loc_40871A
.text:004086F3                 mov     eax, ds:dword_408A20
.text:004086F8                 mov     edx, 1
.text:004086FD                 mov     dword_409080, edx
.text:00408703                 cmp     eax, 0FFFFFFFFh
.text:00408706                 jz      short loc_40872D
.text:00408708
.text:00408708 loc_408708:                             ; CODE XREF: sub_4086E0+57↓j
.text:00408708                                         ; sub_4086E0+69↓j
.text:00408708                 test    eax, eax
.text:0040870A                 mov     ebx, eax
.text:0040870C                 jnz     short loc_408721
.text:0040870E
.text:0040870E loc_40870E:                             ; CODE XREF: sub_4086E0+4B↓j
.text:0040870E                 mov     [esp+8+var_8], offset sub_408650 ; void (__cdecl *)()
.text:00408715                 call    sub_401040
.text:0040871A
.text:0040871A loc_40871A:                             ; CODE XREF: sub_4086E0+11↑j
.text:0040871A                 mov     ebx, [ebp+var_4]
.text:0040871D                 mov     esp, ebp
.text:0040871F                 pop     ebp
.text:00408720                 retn
.text:00408721 ; ---------------------------------------------------------------------------
.text:00408721
.text:00408721 loc_408721:                             ; CODE XREF: sub_4086E0+2C↑j
.text:00408721                                         ; sub_4086E0+49↓j
.text:00408721                 call    ds:dword_408A20[ebx*4]
.text:00408728                 dec     ebx
.text:00408729                 jnz     short loc_408721
.text:0040872B                 jmp     short loc_40870E
.text:0040872D ; ---------------------------------------------------------------------------
.text:0040872D
.text:0040872D loc_40872D:                             ; CODE XREF: sub_4086E0+26↑j
.text:0040872D                 mov     ecx, ds:dword_408A24
.text:00408733                 xor     eax, eax
.text:00408735                 test    ecx, ecx
.text:00408737                 jz      short loc_408708
.text:00408739                 mov     edx, offset dword_408A20
.text:0040873E                 mov     esi, esi
.text:00408740
.text:00408740 loc_408740:                             ; CODE XREF: sub_4086E0+67↓j
.text:00408740                 inc     eax
.text:00408741                 mov     ebx, [edx+eax*4+4]
.text:00408745                 test    ebx, ebx
.text:00408747                 jnz     short loc_408740
.text:00408749                 jmp     short loc_408708
.text:00408749 sub_4086E0      endp
.text:00408749
.text:00408749 ; ---------------------------------------------------------------------------
.text:0040874B                 align 10h
.text:00408750
.text:00408750 ; =============== S U B R O U T I N E =======================================
.text:00408750
.text:00408750 ; Attributes: info_from_lumina
.text:00408750
.text:00408750 ; void *__cdecl _alloca(size_t Size)
.text:00408750 __alloca        proc near               ; CODE XREF: sub_401CE0+14↑p
.text:00408750                 push    ecx
.text:00408751                 mov     ecx, esp
.text:00408753                 add     ecx, 8
.text:00408756
.text:00408756 loc_408756:                             ; CODE XREF: __alloca+1B↓j
.text:00408756                 cmp     eax, 1000h
.text:0040875B                 jb      short loc_40876D
.text:0040875D                 sub     ecx, 1000h
.text:00408763                 or      dword ptr [ecx], 0
.text:00408766                 sub     eax, 1000h
.text:0040876B                 jmp     short loc_408756
.text:0040876D ; ---------------------------------------------------------------------------
.text:0040876D
.text:0040876D loc_40876D:                             ; CODE XREF: __alloca+B↑j
.text:0040876D                 sub     ecx, eax
.text:0040876F                 or      dword ptr [ecx], 0
.text:00408772                 mov     eax, esp
.text:00408774                 mov     esp, ecx
.text:00408776                 mov     ecx, [eax]
.text:00408778                 mov     eax, [eax+4]
.text:0040877B                 jmp     eax
.text:0040877B __alloca        endp
.text:0040877B
.text:0040877B ; ---------------------------------------------------------------------------
.text:0040877D                 align 10h
.text:00408780                 jmp     ds:__set_app_type
.text:00408780 ; ---------------------------------------------------------------------------
.text:00408786                 align 10h
.text:00408790
.text:00408790 ; =============== S U B R O U T I N E =======================================
.text:00408790
.text:00408790 ; Attributes: thunk
.text:00408790
.text:00408790 ; void __cdecl cexit()
.text:00408790 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00408790                 jmp     ds:__imp__cexit
.text:00408790 _cexit          endp
.text:00408790
.text:00408790 ; ---------------------------------------------------------------------------
.text:00408796                 align 10h
.text:004087A0
.text:004087A0 ; =============== S U B R O U T I N E =======================================
.text:004087A0
.text:004087A0 ; Attributes: thunk
.text:004087A0
.text:004087A0 ; char ***__cdecl _p__environ()
.text:004087A0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004087A0                 jmp     ds:__imp___p__environ
.text:004087A0 __p__environ    endp
.text:004087A0
.text:004087A0 ; ---------------------------------------------------------------------------
.text:004087A6                 align 10h
.text:004087B0
.text:004087B0 ; =============== S U B R O U T I N E =======================================
.text:004087B0
.text:004087B0 ; Attributes: thunk
.text:004087B0
.text:004087B0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004087B0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004087B0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004087B0
.text:004087B0 Signal          = dword ptr  4
.text:004087B0 Function        = dword ptr  8
.text:004087B0
.text:004087B0                 jmp     ds:__imp_signal
.text:004087B0 signal          endp
.text:004087B0
.text:004087B0 ; ---------------------------------------------------------------------------
.text:004087B6                 align 10h
.text:004087C0
.text:004087C0 ; =============== S U B R O U T I N E =======================================
.text:004087C0
.text:004087C0 ; Attributes: thunk
.text:004087C0
.text:004087C0 ; int *__cdecl _p__fmode()
.text:004087C0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004087C0                 jmp     ds:__imp___p__fmode
.text:004087C0 __p__fmode      endp
.text:004087C0
.text:004087C0 ; ---------------------------------------------------------------------------
.text:004087C6                 align 10h
.text:004087D0
.text:004087D0 ; =============== S U B R O U T I N E =======================================
.text:004087D0
.text:004087D0 ; Attributes: thunk
.text:004087D0
.text:004087D0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004087D0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004087D0                                         ; sub_401080+90↑p ...
.text:004087D0
.text:004087D0 FileHandle      = dword ptr  4
.text:004087D0 Mode            = dword ptr  8
.text:004087D0
.text:004087D0                 jmp     ds:__imp__setmode
.text:004087D0 _setmode        endp
.text:004087D0
.text:004087D0 ; ---------------------------------------------------------------------------
.text:004087D6                 align 10h
.text:004087E0
.text:004087E0 ; =============== S U B R O U T I N E =======================================
.text:004087E0
.text:004087E0 ; Attributes: thunk
.text:004087E0
.text:004087E0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004087E0                 jmp     ds:__imp___getmainargs
.text:004087E0 __getmainargs   endp
.text:004087E0
.text:004087E0 ; ---------------------------------------------------------------------------
.text:004087E6                 align 10h
.text:004087F0
.text:004087F0 ; =============== S U B R O U T I N E =======================================
.text:004087F0
.text:004087F0 ; Attributes: thunk
.text:004087F0
.text:004087F0 ; size_t __cdecl strlen(const char *Str)
.text:004087F0 strlen          proc near               ; CODE XREF: sub_401CE0+3BF↑p
.text:004087F0                                         ; sub_403300+379↑p ...
.text:004087F0
.text:004087F0 Str             = dword ptr  4
.text:004087F0
.text:004087F0                 jmp     ds:__imp_strlen
.text:004087F0 strlen          endp
.text:004087F0
.text:004087F0 ; ---------------------------------------------------------------------------
.text:004087F6                 align 10h
.text:00408800
.text:00408800 ; =============== S U B R O U T I N E =======================================
.text:00408800
.text:00408800 ; Attributes: thunk
.text:00408800
.text:00408800 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00408800 setlocale       proc near               ; CODE XREF: sub_401CE0+39↑p
.text:00408800
.text:00408800 Category        = dword ptr  4
.text:00408800 Locale          = dword ptr  8
.text:00408800
.text:00408800                 jmp     ds:__imp_setlocale
.text:00408800 setlocale       endp
.text:00408800
.text:00408800 ; ---------------------------------------------------------------------------
.text:00408806                 align 10h
.text:00408810
.text:00408810 ; =============== S U B R O U T I N E =======================================
.text:00408810
.text:00408810 ; Attributes: thunk
.text:00408810
.text:00408810 ; int __cdecl fclose(FILE *Stream)
.text:00408810 fclose          proc near               ; CODE XREF: sub_401CE0+532↑p
.text:00408810                                         ; sub_4029F0+73↑p ...
.text:00408810
.text:00408810 Stream          = dword ptr  4
.text:00408810
.text:00408810                 jmp     ds:__imp_fclose
.text:00408810 fclose          endp
.text:00408810
.text:00408810 ; ---------------------------------------------------------------------------
.text:00408816                 align 10h
.text:00408820
.text:00408820 ; =============== S U B R O U T I N E =======================================
.text:00408820
.text:00408820 ; Attributes: thunk
.text:00408820
.text:00408820 ; void __cdecl clearerr(FILE *Stream)
.text:00408820 clearerr        proc near               ; CODE XREF: sub_4029F0+58↑p
.text:00408820
.text:00408820 Stream          = dword ptr  4
.text:00408820
.text:00408820                 jmp     ds:__imp_clearerr
.text:00408820 clearerr        endp
.text:00408820
.text:00408820 ; ---------------------------------------------------------------------------
.text:00408826                 align 10h
.text:00408830
.text:00408830 ; =============== S U B R O U T I N E =======================================
.text:00408830
.text:00408830 ; Attributes: thunk
.text:00408830
.text:00408830 ; int *__cdecl errno()
.text:00408830 _errno          proc near               ; CODE XREF: sub_401CE0+53A↑p
.text:00408830                                         ; sub_4029F0:loc_402A70↑p ...
.text:00408830                 jmp     ds:__imp__errno
.text:00408830 _errno          endp
.text:00408830
.text:00408830 ; ---------------------------------------------------------------------------
.text:00408836                 align 10h
.text:00408840
.text:00408840 ; =============== S U B R O U T I N E =======================================
.text:00408840
.text:00408840 ; Attributes: thunk
.text:00408840
.text:00408840 ; int __cdecl ungetc(int Character, FILE *Stream)
.text:00408840 ungetc          proc near               ; CODE XREF: sub_402CF0+3C↑p
.text:00408840                                         ; sub_402CF0+3AD↑p
.text:00408840
.text:00408840 Character       = dword ptr  4
.text:00408840 Stream          = dword ptr  8
.text:00408840
.text:00408840                 jmp     ds:__imp_ungetc
.text:00408840 ungetc          endp
.text:00408840
.text:00408840 ; ---------------------------------------------------------------------------
.text:00408846                 align 10h
.text:00408850
.text:00408850 ; =============== S U B R O U T I N E =======================================
.text:00408850
.text:00408850 ; Attributes: thunk
.text:00408850
.text:00408850 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00408850 fwrite          proc near               ; CODE XREF: sub_402AE0+13D↑p
.text:00408850                                         ; sub_402CF0+270↑p ...
.text:00408850
.text:00408850 Buffer          = dword ptr  4
.text:00408850 ElementSize     = dword ptr  8
.text:00408850 ElementCount    = dword ptr  0Ch
.text:00408850 Stream          = dword ptr  10h
.text:00408850
.text:00408850                 jmp     ds:__imp_fwrite
.text:00408850 fwrite          endp
.text:00408850
.text:00408850 ; ---------------------------------------------------------------------------
.text:00408856                 align 10h
.text:00408860
.text:00408860 ; =============== S U B R O U T I N E =======================================
.text:00408860
.text:00408860 ; Attributes: thunk
.text:00408860
.text:00408860 ; void __cdecl free(void *Block)
.text:00408860 free            proc near               ; CODE XREF: sub_402570+1DB↑p
.text:00408860                                         ; sub_402570+40B↑p ...
.text:00408860
.text:00408860 Block           = dword ptr  4
.text:00408860
.text:00408860                 jmp     ds:__imp_free
.text:00408860 free            endp
.text:00408860
.text:00408860 ; ---------------------------------------------------------------------------
.text:00408866                 align 10h
.text:00408870
.text:00408870 ; =============== S U B R O U T I N E =======================================
.text:00408870
.text:00408870 ; Attributes: thunk
.text:00408870
.text:00408870 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00408870 strspn          proc near               ; CODE XREF: sub_402570+3B3↑p
.text:00408870
.text:00408870 Str             = dword ptr  4
.text:00408870 Control         = dword ptr  8
.text:00408870
.text:00408870                 jmp     ds:__imp_strspn
.text:00408870 strspn          endp
.text:00408870
.text:00408870 ; ---------------------------------------------------------------------------
.text:00408876                 align 10h
.text:00408880
.text:00408880 ; =============== S U B R O U T I N E =======================================
.text:00408880
.text:00408880 ; Attributes: noreturn thunk
.text:00408880
.text:00408880 _assert         proc near               ; CODE XREF: sub_402570+46E↑p
.text:00408880                                         ; sub_402CF0+487↑p
.text:00408880                 jmp     ds:__imp__assert
.text:00408880 _assert         endp
.text:00408880
.text:00408880 ; ---------------------------------------------------------------------------
.text:00408886                 align 10h
.text:00408890
.text:00408890 ; =============== S U B R O U T I N E =======================================
.text:00408890
.text:00408890 ; Attributes: noreturn thunk
.text:00408890
.text:00408890 ; void __cdecl __noreturn exit(int Code)
.text:00408890 exit            proc near               ; CODE XREF: sub_401CE0:loc_401E3B↑p
.text:00408890                                         ; .text:0040230B↑p ...
.text:00408890
.text:00408890 Code            = dword ptr  4
.text:00408890
.text:00408890                 jmp     ds:__imp_exit
.text:00408890 exit            endp
.text:00408890
.text:00408890 ; ---------------------------------------------------------------------------
.text:00408896                 align 10h
.text:004088A0
.text:004088A0 ; =============== S U B R O U T I N E =======================================
.text:004088A0
.text:004088A0 ; Attributes: thunk
.text:004088A0
.text:004088A0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004088A0 fputs           proc near               ; CODE XREF: sub_401CE0+1F5↑p
.text:004088A0                                         ; sub_401CE0+217↑p ...
.text:004088A0
.text:004088A0 Buffer          = dword ptr  4
.text:004088A0 Stream          = dword ptr  8
.text:004088A0
.text:004088A0                 jmp     ds:__imp_fputs
.text:004088A0 fputs           endp
.text:004088A0
.text:004088A0 ; ---------------------------------------------------------------------------
.text:004088A6                 align 10h
.text:004088B0
.text:004088B0 ; =============== S U B R O U T I N E =======================================
.text:004088B0
.text:004088B0 ; Attributes: thunk
.text:004088B0
.text:004088B0 ; int printf(const char *const Format, ...)
.text:004088B0 printf          proc near               ; CODE XREF: sub_401CE0+1D3↑p
.text:004088B0                                         ; sub_401CE0+322↑p ...
.text:004088B0
.text:004088B0 Format          = dword ptr  4
.text:004088B0
.text:004088B0                 jmp     ds:__imp_printf
.text:004088B0 printf          endp
.text:004088B0
.text:004088B0 ; ---------------------------------------------------------------------------
.text:004088B6                 align 10h
.text:004088C0
.text:004088C0 ; =============== S U B R O U T I N E =======================================
.text:004088C0
.text:004088C0 ; Attributes: thunk
.text:004088C0
.text:004088C0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004088C0 fprintf         proc near               ; CODE XREF: sub_401CE0+14F↑p
.text:004088C0                                         ; .text:00402303↑p ...
.text:004088C0
.text:004088C0 Stream          = dword ptr  4
.text:004088C0 Format          = dword ptr  8
.text:004088C0
.text:004088C0                 jmp     ds:__imp_fprintf
.text:004088C0 fprintf         endp
.text:004088C0
.text:004088C0 ; ---------------------------------------------------------------------------
.text:004088C6                 align 10h
.text:004088D0
.text:004088D0 ; =============== S U B R O U T I N E =======================================
.text:004088D0
.text:004088D0 ; Attributes: thunk
.text:004088D0
.text:004088D0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004088D0 fopen           proc near               ; CODE XREF: sub_4029F0+BC↑p
.text:004088D0
.text:004088D0 FileName        = dword ptr  4
.text:004088D0 Mode            = dword ptr  8
.text:004088D0
.text:004088D0                 jmp     ds:__imp_fopen
.text:004088D0 fopen           endp
.text:004088D0
.text:004088D0 ; ---------------------------------------------------------------------------
.text:004088D6                 align 10h
.text:004088E0
.text:004088E0 ; =============== S U B R O U T I N E =======================================
.text:004088E0
.text:004088E0 ; Attributes: thunk
.text:004088E0
.text:004088E0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004088E0 _flsbuf         proc near               ; CODE XREF: sub_402AE0+10B↑p
.text:004088E0                                         ; sub_402AE0+1A8↑p ...
.text:004088E0
.text:004088E0 File            = dword ptr  8
.text:004088E0
.text:004088E0                 jmp     ds:__imp__flsbuf
.text:004088E0 _flsbuf         endp
.text:004088E0
.text:004088E0 ; ---------------------------------------------------------------------------
.text:004088E6                 align 10h
.text:004088F0
.text:004088F0 ; =============== S U B R O U T I N E =======================================
.text:004088F0
.text:004088F0 ; Attributes: thunk
.text:004088F0
.text:004088F0 ; int __cdecl filbuf(FILE *File)
.text:004088F0 _filbuf         proc near               ; CODE XREF: sub_402AE0+1F6↑p
.text:004088F0                                         ; sub_402CF0+3BA↑p ...
.text:004088F0
.text:004088F0 File            = dword ptr  4
.text:004088F0
.text:004088F0                 jmp     ds:__imp__filbuf
.text:004088F0 _filbuf         endp
.text:004088F0
.text:004088F0 ; ---------------------------------------------------------------------------
.text:004088F6                 align 10h
.text:00408900
.text:00408900 ; =============== S U B R O U T I N E =======================================
.text:00408900
.text:00408900 ; Attributes: thunk
.text:00408900
.text:00408900 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00408900 strncmp         proc near               ; CODE XREF: sub_403300+30F↑p
.text:00408900                                         ; sub_403300+769↑p
.text:00408900
.text:00408900 Str1            = dword ptr  4
.text:00408900 Str2            = dword ptr  8
.text:00408900 MaxCount        = dword ptr  0Ch
.text:00408900
.text:00408900                 jmp     ds:__imp_strncmp
.text:00408900 strncmp         endp
.text:00408900
.text:00408900 ; ---------------------------------------------------------------------------
.text:00408906                 align 10h
.text:00408910
.text:00408910 ; =============== S U B R O U T I N E =======================================
.text:00408910
.text:00408910 ; Attributes: thunk
.text:00408910
.text:00408910 ; char *__cdecl getenv(const char *VarName)
.text:00408910 getenv          proc near               ; CODE XREF: sub_403300+C27↑p
.text:00408910
.text:00408910 VarName         = dword ptr  4
.text:00408910
.text:00408910                 jmp     ds:__imp_getenv
.text:00408910 getenv          endp
.text:00408910
.text:00408910 ; ---------------------------------------------------------------------------
.text:00408916                 align 10h
.text:00408920
.text:00408920 ; =============== S U B R O U T I N E =======================================
.text:00408920
.text:00408920 ; Attributes: thunk
.text:00408920
.text:00408920 ; char *__cdecl strchr(const char *Str, int Val)
.text:00408920 strchr          proc near               ; CODE XREF: sub_403300+539↑p
.text:00408920                                         ; sub_403300+60A↑p ...
.text:00408920
.text:00408920 Str             = dword ptr  4
.text:00408920 Val             = dword ptr  8
.text:00408920
.text:00408920                 jmp     ds:__imp_strchr
.text:00408920 strchr          endp
.text:00408920
.text:00408920 ; ---------------------------------------------------------------------------
.text:00408926                 align 10h
.text:00408930
.text:00408930 ; =============== S U B R O U T I N E =======================================
.text:00408930
.text:00408930 ; Attributes: thunk
.text:00408930
.text:00408930 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00408930 calloc          proc near               ; CODE XREF: sub_4041D0+1D0↑p
.text:00408930                                         ; .text:00405723↑p
.text:00408930
.text:00408930 Count           = dword ptr  4
.text:00408930 Size            = dword ptr  8
.text:00408930
.text:00408930                 jmp     ds:__imp_calloc
.text:00408930 calloc          endp
.text:00408930
.text:00408930 ; ---------------------------------------------------------------------------
.text:00408936                 align 10h
.text:00408940
.text:00408940 ; =============== S U B R O U T I N E =======================================
.text:00408940
.text:00408940 ; Attributes: thunk
.text:00408940
.text:00408940 ; void *__cdecl malloc(size_t Size)
.text:00408940 malloc          proc near               ; CODE XREF: sub_4041D0+36↑p
.text:00408940                                         ; sub_4045A0+133↑p ...
.text:00408940
.text:00408940 Size            = dword ptr  4
.text:00408940
.text:00408940                 jmp     ds:__imp_malloc
.text:00408940 malloc          endp
.text:00408940
.text:00408940 ; ---------------------------------------------------------------------------
.text:00408946                 align 10h
.text:00408950
.text:00408950 ; =============== S U B R O U T I N E =======================================
.text:00408950
.text:00408950 ; Attributes: noreturn thunk
.text:00408950
.text:00408950 ; void __cdecl __noreturn abort()
.text:00408950 abort           proc near               ; CODE XREF: sub_4045A0:loc_404703↑p
.text:00408950                                         ; sub_404720:loc_40490A↑p ...
.text:00408950                 jmp     ds:__imp_abort
.text:00408950 abort           endp
.text:00408950
.text:00408950 ; ---------------------------------------------------------------------------
.text:00408956                 align 10h
.text:00408960
.text:00408960 ; =============== S U B R O U T I N E =======================================
.text:00408960
.text:00408960 ; Attributes: thunk
.text:00408960
.text:00408960 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00408960 vfprintf        proc near               ; CODE XREF: sub_405370+C1↑p
.text:00408960                                         ; sub_407100+49↑p ...
.text:00408960
.text:00408960 Stream          = dword ptr  4
.text:00408960 Format          = dword ptr  8
.text:00408960 ArgList         = dword ptr  0Ch
.text:00408960
.text:00408960                 jmp     ds:__imp_vfprintf
.text:00408960 vfprintf        endp
.text:00408960
.text:00408960 ; ---------------------------------------------------------------------------
.text:00408966                 align 10h
.text:00408970
.text:00408970 ; =============== S U B R O U T I N E =======================================
.text:00408970
.text:00408970 ; Attributes: thunk
.text:00408970
.text:00408970 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00408970 memcpy          proc near               ; CODE XREF: .text:00405768↑p
.text:00408970                                         ; sub_405780+31↑p ...
.text:00408970
.text:00408970 Src             = dword ptr  8
.text:00408970 Size            = dword ptr  0Ch
.text:00408970
.text:00408970                 jmp     ds:__imp_memcpy
.text:00408970 memcpy          endp
.text:00408970
.text:00408970 ; ---------------------------------------------------------------------------
.text:00408976                 align 10h
.text:00408980
.text:00408980 ; =============== S U B R O U T I N E =======================================
.text:00408980
.text:00408980 ; Attributes: thunk
.text:00408980
.text:00408980 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00408980 memset          proc near               ; CODE XREF: sub_4056C0+26↑p
.text:00408980
.text:00408980 Val             = dword ptr  8
.text:00408980 Size            = dword ptr  0Ch
.text:00408980
.text:00408980                 jmp     ds:__imp_memset
.text:00408980 memset          endp
.text:00408980
.text:00408980 ; ---------------------------------------------------------------------------
.text:00408986                 align 10h
.text:00408990
.text:00408990 ; =============== S U B R O U T I N E =======================================
.text:00408990
.text:00408990 ; Attributes: thunk
.text:00408990
.text:00408990 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00408990 realloc         proc near               ; CODE XREF: .text:00405620↑p
.text:00408990                                         ; sub_405650+16↑p ...
.text:00408990
.text:00408990 Block           = dword ptr  4
.text:00408990 Size            = dword ptr  8
.text:00408990
.text:00408990                 jmp     ds:__imp_realloc
.text:00408990 realloc         endp
.text:00408990
.text:00408990 ; ---------------------------------------------------------------------------
.text:00408996                 align 10h
.text:004089A0
.text:004089A0 ; =============== S U B R O U T I N E =======================================
.text:004089A0
.text:004089A0 ; Attributes: thunk
.text:004089A0
.text:004089A0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004089A0 iswctype        proc near               ; CODE XREF: sub_405DA0+78B↑p
.text:004089A0
.text:004089A0 C               = word ptr  4
.text:004089A0 Type            = word ptr  8
.text:004089A0
.text:004089A0                 jmp     ds:__imp_iswctype
.text:004089A0 iswctype        endp
.text:004089A0
.text:004089A0 ; ---------------------------------------------------------------------------
.text:004089A6                 align 10h
.text:004089B0
.text:004089B0 ; =============== S U B R O U T I N E =======================================
.text:004089B0
.text:004089B0 ; Attributes: thunk
.text:004089B0
.text:004089B0 ; int __cdecl isctype(int C, int Type)
.text:004089B0 _isctype        proc near               ; CODE XREF: sub_405DA0+610↑p
.text:004089B0
.text:004089B0 C               = dword ptr  4
.text:004089B0 Type            = dword ptr  8
.text:004089B0
.text:004089B0                 jmp     ds:__imp__isctype
.text:004089B0 _isctype        endp
.text:004089B0
.text:004089B0 ; ---------------------------------------------------------------------------
.text:004089B6                 align 10h
.text:004089C0
.text:004089C0 ; =============== S U B R O U T I N E =======================================
.text:004089C0
.text:004089C0 ; Attributes: thunk
.text:004089C0
.text:004089C0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004089C0 strcmp          proc near               ; CODE XREF: sub_407204+180↑p
.text:004089C0
.text:004089C0 Str1            = dword ptr  4
.text:004089C0 Str2            = dword ptr  8
.text:004089C0
.text:004089C0                 jmp     ds:__imp_strcmp
.text:004089C0 strcmp          endp
.text:004089C0
.text:004089C0 ; ---------------------------------------------------------------------------
.text:004089C6                 align 10h
.text:004089D0
.text:004089D0 ; =============== S U B R O U T I N E =======================================
.text:004089D0
.text:004089D0 ; Attributes: thunk
.text:004089D0
.text:004089D0 ; int __cdecl fflush(FILE *Stream)
.text:004089D0 fflush          proc near               ; CODE XREF: sub_407100+19↑p
.text:004089D0                                         ; sub_407100+81↑p ...
.text:004089D0
.text:004089D0 Stream          = dword ptr  4
.text:004089D0
.text:004089D0                 jmp     ds:__imp_fflush
.text:004089D0 fflush          endp
.text:004089D0
.text:004089D0 ; ---------------------------------------------------------------------------
.text:004089D6                 align 10h
.text:004089E0
.text:004089E0 ; =============== S U B R O U T I N E =======================================
.text:004089E0
.text:004089E0 ; Attributes: thunk
.text:004089E0
.text:004089E0 ; char *__cdecl strerror(int ErrorMessage)
.text:004089E0 strerror        proc near               ; CODE XREF: sub_407100+A5↑p
.text:004089E0                                         ; sub_407204+10F↑p
.text:004089E0
.text:004089E0 ErrorMessage    = dword ptr  4
.text:004089E0
.text:004089E0                 jmp     ds:__imp_strerror
.text:004089E0 strerror        endp
.text:004089E0
.text:004089E0 ; ---------------------------------------------------------------------------
.text:004089E6                 align 10h
.text:004089F0
.text:004089F0 ; =============== S U B R O U T I N E =======================================
.text:004089F0
.text:004089F0 ; Attributes: thunk
.text:004089F0
.text:004089F0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004089F0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004089F0
.text:004089F0 lpTopLevelExceptionFilter= dword ptr  4
.text:004089F0
.text:004089F0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004089F0 SetUnhandledExceptionFilter endp
.text:004089F0
.text:004089F0 ; ---------------------------------------------------------------------------
.text:004089F6                 align 10h
.text:00408A00
.text:00408A00 ; =============== S U B R O U T I N E =======================================
.text:00408A00
.text:00408A00 ; Attributes: noreturn thunk
.text:00408A00
.text:00408A00 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00408A00 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00408A00
.text:00408A00 uExitCode       = dword ptr  4
.text:00408A00
.text:00408A00                 jmp     ds:__imp_ExitProcess
.text:00408A00 ExitProcess     endp
.text:00408A00
.text:00408A00 ; ---------------------------------------------------------------------------
.text:00408A06                 align 10h
.text:00408A10
.text:00408A10 ; =============== S U B R O U T I N E =======================================
.text:00408A10
.text:00408A10 ; Attributes: thunk
.text:00408A10
.text:00408A10 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00408A10 GetSystemInfo   proc near               ; CODE XREF: sub_407FF0+3A↑p
.text:00408A10                                         ; sub_408040+3A↑p ...
.text:00408A10
.text:00408A10 lpSystemInfo    = dword ptr  4
.text:00408A10
.text:00408A10                 jmp     ds:__imp_GetSystemInfo
.text:00408A10 GetSystemInfo   endp
.text:00408A10
.text:00408A10 ; ---------------------------------------------------------------------------
.text:00408A16                 align 10h
.text:00408A20 dword_408A20    dd 0FFFFFFFFh           ; DATA XREF: .text:00408689↑r
.text:00408A20                                         ; .text:loc_4086B0↑r ...
.text:00408A24 dword_408A24    dd 0                    ; DATA XREF: .text:loc_4086BC↑r
.text:00408A24                                         ; sub_4086E0:loc_40872D↑r
.text:00408A28                 dd 0FFFFFFFFh
.text:00408A2C dword_408A2C    dd 75h dup(0)           ; DATA XREF: .data:off_409084↓o
.text:00408C00                 dd 100h dup(?)
.text:00408C00 _text           ends
.text:00408C00
.data:00409000 ; Section 2. (virtual address 00009000)
.data:00409000 ; Virtual size                  : 000000A0 (    160.)
.data:00409000 ; Section size in file          : 00000200 (    512.)
.data:00409000 ; Offset to raw data for section: 00008000
.data:00409000 ; Flags C0000040: Data Readable Writable
.data:00409000 ; Alignment     : default
.data:00409000 ; ===========================================================================
.data:00409000
.data:00409000 ; Segment type: Pure data
.data:00409000 ; Segment permissions: Read/Write
.data:00409000 _data           segment para public 'DATA' use32
.data:00409000                 assume cs:_data
.data:00409000                 ;org 409000h
.data:00409000 dword_409000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00409000                                         ; sub_401080+CC↑r
.data:00409004 dword_409004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00409004                                         ; sub_401080+D4↑r
.data:00409008                 align 10h
.data:00409010 dword_409010    dd 1                    ; DATA XREF: sub_401CE0:loc_4021D1↑r
.data:00409010                                         ; sub_401CE0+591↑r ...
.data:00409014 dword_409014    dd 1                    ; DATA XREF: sub_403F60+11↑r
.data:00409014                                         ; .text:00404001↑r
.data:00409018 dword_409018    dd 3Fh                  ; DATA XREF: sub_403F60+7D↑w
.data:00409018                                         ; .text:0040406D↑w
.data:0040901C                 align 10h
.data:00409020 ; char *off_409020
.data:00409020 off_409020      dd offset aCopyrightC2005
.data:00409020                                         ; DATA XREF: sub_405370+DC↑r
.data:00409020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00409024                 align 10h
.data:00409030 ; int Code
.data:00409030 Code            dd 1                    ; DATA XREF: sub_4059C0+6D↑r
.data:00409030                                         ; sub_4059C0+9A↑r ...
.data:00409034                 align 10h
.data:00409040 dword_409040    dd 1                    ; DATA XREF: sub_406EE0+22↑r
.data:00409040                                         ; sub_406EE0+65↑r ...
.data:00409044 dword_409044    dd 100h                 ; DATA XREF: sub_406EE0+3F↑o
.data:00409044                                         ; sub_406EE0+1A2↑r ...
.data:00409048 off_409048      dd offset unk_40A140    ; DATA XREF: sub_406EE0+1AA↑r
.data:0040904C ; void *off_40904C
.data:0040904C off_40904C      dd offset dword_409044  ; DATA XREF: sub_406EE0+39↑r
.data:0040904C                                         ; sub_406EE0+60↑w ...
.data:00409050 dword_409050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00409054                 align 10h
.data:00409060 ; int Mode
.data:00409060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00409060                                         ; sub_401080+80↑r ...
.data:00409064                 align 10h
.data:00409070 dword_409070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00409070                                         ; sub_401080+BA↑r
.data:00409074                 align 10h
.data:00409080 dword_409080    dd 0                    ; DATA XREF: sub_4086E0+9↑r
.data:00409080                                         ; sub_4086E0+1D↑w
.data:00409084 off_409084      dd offset dword_408A2C  ; DATA XREF: sub_408650+6↑r
.data:00409084                                         ; sub_408650+17↑r ...
.data:00409088                 align 1000h
.data:00409088 _data           ends
.data:00409088
.bss:0040A000 ; Section 3. (virtual address 0000A000)
.bss:0040A000 ; Virtual size                  : 000003A0 (    928.)
.bss:0040A000 ; Section size in file          : 00000000 (      0.)
.bss:0040A000 ; Offset to raw data for section: 00000000
.bss:0040A000 ; Flags C0000080: Bss Readable Writable
.bss:0040A000 ; Alignment     : default
.bss:0040A000 ; ===========================================================================
.bss:0040A000
.bss:0040A000 ; Segment type: Uninitialized
.bss:0040A000 ; Segment permissions: Read/Write
.bss:0040A000 _bss            segment para public 'BSS' use32
.bss:0040A000                 assume cs:_bss
.bss:0040A000                 ;org 40A000h
.bss:0040A000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040A000 ; char *dword_40A000
.bss:0040A000 dword_40A000    dd ?                    ; DATA XREF: sub_402570+36B↑r
.bss:0040A000                                         ; sub_402570:loc_4028E5↑w ...
.bss:0040A004                 align 10h
.bss:0040A010 byte_40A010     db ?                    ; DATA XREF: sub_401CE0+4CE↑o
.bss:0040A010                                         ; sub_401CE0+4EB↑w
.bss:0040A011 byte_40A011     db ?                    ; DATA XREF: sub_401CE0+4D3↑w
.bss:0040A012                 align 10h
.bss:0040A020 ; void *Block
.bss:0040A020 Block           dd ?                    ; DATA XREF: sub_402CF0+212↑o
.bss:0040A020                                         ; sub_402CF0+237↑r ...
.bss:0040A024                 align 10h
.bss:0040A030 unk_40A030      db    ? ;               ; DATA XREF: sub_402CF0+20A↑o
.bss:0040A031                 db    ? ;
.bss:0040A032                 db    ? ;
.bss:0040A033                 db    ? ;
.bss:0040A034                 db    ? ;
.bss:0040A035                 db    ? ;
.bss:0040A036                 db    ? ;
.bss:0040A037                 db    ? ;
.bss:0040A038                 db    ? ;
.bss:0040A039                 db    ? ;
.bss:0040A03A                 db    ? ;
.bss:0040A03B                 db    ? ;
.bss:0040A03C                 db    ? ;
.bss:0040A03D                 db    ? ;
.bss:0040A03E                 db    ? ;
.bss:0040A03F                 db    ? ;
.bss:0040A040 dword_40A040    dd ?                    ; DATA XREF: sub_402570+B0↑w
.bss:0040A040                                         ; sub_402570+CE↑w ...
.bss:0040A044                 align 10h
.bss:0040A050 dword_40A050    dd ?                    ; DATA XREF: sub_402570+8D↑w
.bss:0040A050                                         ; sub_402570+1B0↑r ...
.bss:0040A054                 align 10h
.bss:0040A060 dword_40A060    dd ?                    ; DATA XREF: sub_402570+EC↑w
.bss:0040A060                                         ; sub_402570+13D↑r ...
.bss:0040A064                 align 10h
.bss:0040A070 dword_40A070    dd ?                    ; DATA XREF: sub_401CE0+75↑w
.bss:0040A070                                         ; sub_401CE0+E6↑r ...
.bss:0040A074                 align 10h
.bss:0040A080 byte_40A080     db ?                    ; DATA XREF: sub_401CE0+6C↑w
.bss:0040A080                                         ; sub_401CE0:loc_4020B0↑w ...
.bss:0040A081                 align 10h
.bss:0040A090 byte_40A090     db ?                    ; DATA XREF: sub_401CE0+382↑w
.bss:0040A090                                         ; sub_402570:loc_402693↑r ...
.bss:0040A091                 align 10h
.bss:0040A0A0 byte_40A0A0     db ?                    ; DATA XREF: sub_401CE0+7B↑w
.bss:0040A0A0                                         ; sub_401CE0+3FA↑w ...
.bss:0040A0A1                 align 10h
.bss:0040A0B0 byte_40A0B0     db ?                    ; DATA XREF: sub_401CE0:loc_40206E↑w
.bss:0040A0B0                                         ; sub_401CE0:loc_402122↑r ...
.bss:0040A0B1                 align 10h
.bss:0040A0C0 ; size_t ElementCount
.bss:0040A0C0 ElementCount    dd ?                    ; DATA XREF: sub_401CE0:loc_402085↑w
.bss:0040A0C0                                         ; sub_401CE0+4E5↑w ...
.bss:0040A0C4                 align 10h
.bss:0040A0D0 ; void *Buffer
.bss:0040A0D0 Buffer          dd ?                    ; DATA XREF: sub_401CE0+3B2↑w
.bss:0040A0D0                                         ; sub_401CE0:loc_40219E↑r ...
.bss:0040A0D4                 align 10h
.bss:0040A0E0 byte_40A0E0     db ?                    ; DATA XREF: sub_401CE0+82↑w
.bss:0040A0E0                                         ; sub_401CE0:loc_4021EF↑r ...
.bss:0040A0E1                 align 10h
.bss:0040A0F0 ; void *dword_40A0F0
.bss:0040A0F0 dword_40A0F0    dd ?                    ; DATA XREF: sub_401CE0+477↑w
.bss:0040A0F0                                         ; sub_401CE0:loc_4021E6↑r ...
.bss:0040A0F4                 align 10h
.bss:0040A100 dword_40A100    dd ?                    ; DATA XREF: sub_403F60+9↑o
.bss:0040A100                                         ; sub_403F60+17↑w ...
.bss:0040A104 dword_40A104    dd ?                    ; DATA XREF: sub_403F60+21↑w
.bss:0040A104                                         ; .text:00404019↑w
.bss:0040A108 dword_40A108    dd ?                    ; DATA XREF: sub_403F60+77↑r
.bss:0040A108                                         ; .text:00404067↑r
.bss:0040A10C dword_40A10C    dd ?                    ; DATA XREF: sub_403F60+6B↑r
.bss:0040A10C                                         ; .text:0040405B↑r
.bss:0040A110                 db    ? ;
.bss:0040A111                 db    ? ;
.bss:0040A112                 db    ? ;
.bss:0040A113                 db    ? ;
.bss:0040A114                 db    ? ;
.bss:0040A115                 db    ? ;
.bss:0040A116                 db    ? ;
.bss:0040A117                 db    ? ;
.bss:0040A118                 db    ? ;
.bss:0040A119                 db    ? ;
.bss:0040A11A                 db    ? ;
.bss:0040A11B                 db    ? ;
.bss:0040A11C                 db    ? ;
.bss:0040A11D                 db    ? ;
.bss:0040A11E                 db    ? ;
.bss:0040A11F                 db    ? ;
.bss:0040A120                 db    ? ;
.bss:0040A121                 db    ? ;
.bss:0040A122                 db    ? ;
.bss:0040A123                 db    ? ;
.bss:0040A124                 db    ? ;
.bss:0040A125                 db    ? ;
.bss:0040A126                 db    ? ;
.bss:0040A127                 db    ? ;
.bss:0040A128                 db    ? ;
.bss:0040A129                 db    ? ;
.bss:0040A12A                 db    ? ;
.bss:0040A12B                 db    ? ;
.bss:0040A12C                 db    ? ;
.bss:0040A12D                 db    ? ;
.bss:0040A12E                 db    ? ;
.bss:0040A12F                 db    ? ;
.bss:0040A130 ; char *dword_40A130
.bss:0040A130 dword_40A130    dd ?                    ; DATA XREF: .text:00405994↑w
.bss:0040A130                                         ; sub_4059C0+58↑r
.bss:0040A134                 align 10h
.bss:0040A140 unk_40A140      db    ? ;               ; DATA XREF: sub_406EE0+100↑o
.bss:0040A140                                         ; .data:off_409048↑o
.bss:0040A141                 db    ? ;
.bss:0040A142                 db    ? ;
.bss:0040A143                 db    ? ;
.bss:0040A144                 db    ? ;
.bss:0040A145                 db    ? ;
.bss:0040A146                 db    ? ;
.bss:0040A147                 db    ? ;
.bss:0040A148                 db    ? ;
.bss:0040A149                 db    ? ;
.bss:0040A14A                 db    ? ;
.bss:0040A14B                 db    ? ;
.bss:0040A14C                 db    ? ;
.bss:0040A14D                 db    ? ;
.bss:0040A14E                 db    ? ;
.bss:0040A14F                 db    ? ;
.bss:0040A150                 db    ? ;
.bss:0040A151                 db    ? ;
.bss:0040A152                 db    ? ;
.bss:0040A153                 db    ? ;
.bss:0040A154                 db    ? ;
.bss:0040A155                 db    ? ;
.bss:0040A156                 db    ? ;
.bss:0040A157                 db    ? ;
.bss:0040A158                 db    ? ;
.bss:0040A159                 db    ? ;
.bss:0040A15A                 db    ? ;
.bss:0040A15B                 db    ? ;
.bss:0040A15C                 db    ? ;
.bss:0040A15D                 db    ? ;
.bss:0040A15E                 db    ? ;
.bss:0040A15F                 db    ? ;
.bss:0040A160                 db    ? ;
.bss:0040A161                 db    ? ;
.bss:0040A162                 db    ? ;
.bss:0040A163                 db    ? ;
.bss:0040A164                 db    ? ;
.bss:0040A165                 db    ? ;
.bss:0040A166                 db    ? ;
.bss:0040A167                 db    ? ;
.bss:0040A168                 db    ? ;
.bss:0040A169                 db    ? ;
.bss:0040A16A                 db    ? ;
.bss:0040A16B                 db    ? ;
.bss:0040A16C                 db    ? ;
.bss:0040A16D                 db    ? ;
.bss:0040A16E                 db    ? ;
.bss:0040A16F                 db    ? ;
.bss:0040A170                 db    ? ;
.bss:0040A171                 db    ? ;
.bss:0040A172                 db    ? ;
.bss:0040A173                 db    ? ;
.bss:0040A174                 db    ? ;
.bss:0040A175                 db    ? ;
.bss:0040A176                 db    ? ;
.bss:0040A177                 db    ? ;
.bss:0040A178                 db    ? ;
.bss:0040A179                 db    ? ;
.bss:0040A17A                 db    ? ;
.bss:0040A17B                 db    ? ;
.bss:0040A17C                 db    ? ;
.bss:0040A17D                 db    ? ;
.bss:0040A17E                 db    ? ;
.bss:0040A17F                 db    ? ;
.bss:0040A180                 db    ? ;
.bss:0040A181                 db    ? ;
.bss:0040A182                 db    ? ;
.bss:0040A183                 db    ? ;
.bss:0040A184                 db    ? ;
.bss:0040A185                 db    ? ;
.bss:0040A186                 db    ? ;
.bss:0040A187                 db    ? ;
.bss:0040A188                 db    ? ;
.bss:0040A189                 db    ? ;
.bss:0040A18A                 db    ? ;
.bss:0040A18B                 db    ? ;
.bss:0040A18C                 db    ? ;
.bss:0040A18D                 db    ? ;
.bss:0040A18E                 db    ? ;
.bss:0040A18F                 db    ? ;
.bss:0040A190                 db    ? ;
.bss:0040A191                 db    ? ;
.bss:0040A192                 db    ? ;
.bss:0040A193                 db    ? ;
.bss:0040A194                 db    ? ;
.bss:0040A195                 db    ? ;
.bss:0040A196                 db    ? ;
.bss:0040A197                 db    ? ;
.bss:0040A198                 db    ? ;
.bss:0040A199                 db    ? ;
.bss:0040A19A                 db    ? ;
.bss:0040A19B                 db    ? ;
.bss:0040A19C                 db    ? ;
.bss:0040A19D                 db    ? ;
.bss:0040A19E                 db    ? ;
.bss:0040A19F                 db    ? ;
.bss:0040A1A0                 db    ? ;
.bss:0040A1A1                 db    ? ;
.bss:0040A1A2                 db    ? ;
.bss:0040A1A3                 db    ? ;
.bss:0040A1A4                 db    ? ;
.bss:0040A1A5                 db    ? ;
.bss:0040A1A6                 db    ? ;
.bss:0040A1A7                 db    ? ;
.bss:0040A1A8                 db    ? ;
.bss:0040A1A9                 db    ? ;
.bss:0040A1AA                 db    ? ;
.bss:0040A1AB                 db    ? ;
.bss:0040A1AC                 db    ? ;
.bss:0040A1AD                 db    ? ;
.bss:0040A1AE                 db    ? ;
.bss:0040A1AF                 db    ? ;
.bss:0040A1B0                 db    ? ;
.bss:0040A1B1                 db    ? ;
.bss:0040A1B2                 db    ? ;
.bss:0040A1B3                 db    ? ;
.bss:0040A1B4                 db    ? ;
.bss:0040A1B5                 db    ? ;
.bss:0040A1B6                 db    ? ;
.bss:0040A1B7                 db    ? ;
.bss:0040A1B8                 db    ? ;
.bss:0040A1B9                 db    ? ;
.bss:0040A1BA                 db    ? ;
.bss:0040A1BB                 db    ? ;
.bss:0040A1BC                 db    ? ;
.bss:0040A1BD                 db    ? ;
.bss:0040A1BE                 db    ? ;
.bss:0040A1BF                 db    ? ;
.bss:0040A1C0                 db    ? ;
.bss:0040A1C1                 db    ? ;
.bss:0040A1C2                 db    ? ;
.bss:0040A1C3                 db    ? ;
.bss:0040A1C4                 db    ? ;
.bss:0040A1C5                 db    ? ;
.bss:0040A1C6                 db    ? ;
.bss:0040A1C7                 db    ? ;
.bss:0040A1C8                 db    ? ;
.bss:0040A1C9                 db    ? ;
.bss:0040A1CA                 db    ? ;
.bss:0040A1CB                 db    ? ;
.bss:0040A1CC                 db    ? ;
.bss:0040A1CD                 db    ? ;
.bss:0040A1CE                 db    ? ;
.bss:0040A1CF                 db    ? ;
.bss:0040A1D0                 db    ? ;
.bss:0040A1D1                 db    ? ;
.bss:0040A1D2                 db    ? ;
.bss:0040A1D3                 db    ? ;
.bss:0040A1D4                 db    ? ;
.bss:0040A1D5                 db    ? ;
.bss:0040A1D6                 db    ? ;
.bss:0040A1D7                 db    ? ;
.bss:0040A1D8                 db    ? ;
.bss:0040A1D9                 db    ? ;
.bss:0040A1DA                 db    ? ;
.bss:0040A1DB                 db    ? ;
.bss:0040A1DC                 db    ? ;
.bss:0040A1DD                 db    ? ;
.bss:0040A1DE                 db    ? ;
.bss:0040A1DF                 db    ? ;
.bss:0040A1E0                 db    ? ;
.bss:0040A1E1                 db    ? ;
.bss:0040A1E2                 db    ? ;
.bss:0040A1E3                 db    ? ;
.bss:0040A1E4                 db    ? ;
.bss:0040A1E5                 db    ? ;
.bss:0040A1E6                 db    ? ;
.bss:0040A1E7                 db    ? ;
.bss:0040A1E8                 db    ? ;
.bss:0040A1E9                 db    ? ;
.bss:0040A1EA                 db    ? ;
.bss:0040A1EB                 db    ? ;
.bss:0040A1EC                 db    ? ;
.bss:0040A1ED                 db    ? ;
.bss:0040A1EE                 db    ? ;
.bss:0040A1EF                 db    ? ;
.bss:0040A1F0                 db    ? ;
.bss:0040A1F1                 db    ? ;
.bss:0040A1F2                 db    ? ;
.bss:0040A1F3                 db    ? ;
.bss:0040A1F4                 db    ? ;
.bss:0040A1F5                 db    ? ;
.bss:0040A1F6                 db    ? ;
.bss:0040A1F7                 db    ? ;
.bss:0040A1F8                 db    ? ;
.bss:0040A1F9                 db    ? ;
.bss:0040A1FA                 db    ? ;
.bss:0040A1FB                 db    ? ;
.bss:0040A1FC                 db    ? ;
.bss:0040A1FD                 db    ? ;
.bss:0040A1FE                 db    ? ;
.bss:0040A1FF                 db    ? ;
.bss:0040A200                 db    ? ;
.bss:0040A201                 db    ? ;
.bss:0040A202                 db    ? ;
.bss:0040A203                 db    ? ;
.bss:0040A204                 db    ? ;
.bss:0040A205                 db    ? ;
.bss:0040A206                 db    ? ;
.bss:0040A207                 db    ? ;
.bss:0040A208                 db    ? ;
.bss:0040A209                 db    ? ;
.bss:0040A20A                 db    ? ;
.bss:0040A20B                 db    ? ;
.bss:0040A20C                 db    ? ;
.bss:0040A20D                 db    ? ;
.bss:0040A20E                 db    ? ;
.bss:0040A20F                 db    ? ;
.bss:0040A210                 db    ? ;
.bss:0040A211                 db    ? ;
.bss:0040A212                 db    ? ;
.bss:0040A213                 db    ? ;
.bss:0040A214                 db    ? ;
.bss:0040A215                 db    ? ;
.bss:0040A216                 db    ? ;
.bss:0040A217                 db    ? ;
.bss:0040A218                 db    ? ;
.bss:0040A219                 db    ? ;
.bss:0040A21A                 db    ? ;
.bss:0040A21B                 db    ? ;
.bss:0040A21C                 db    ? ;
.bss:0040A21D                 db    ? ;
.bss:0040A21E                 db    ? ;
.bss:0040A21F                 db    ? ;
.bss:0040A220                 db    ? ;
.bss:0040A221                 db    ? ;
.bss:0040A222                 db    ? ;
.bss:0040A223                 db    ? ;
.bss:0040A224                 db    ? ;
.bss:0040A225                 db    ? ;
.bss:0040A226                 db    ? ;
.bss:0040A227                 db    ? ;
.bss:0040A228                 db    ? ;
.bss:0040A229                 db    ? ;
.bss:0040A22A                 db    ? ;
.bss:0040A22B                 db    ? ;
.bss:0040A22C                 db    ? ;
.bss:0040A22D                 db    ? ;
.bss:0040A22E                 db    ? ;
.bss:0040A22F                 db    ? ;
.bss:0040A230                 db    ? ;
.bss:0040A231                 db    ? ;
.bss:0040A232                 db    ? ;
.bss:0040A233                 db    ? ;
.bss:0040A234                 db    ? ;
.bss:0040A235                 db    ? ;
.bss:0040A236                 db    ? ;
.bss:0040A237                 db    ? ;
.bss:0040A238                 db    ? ;
.bss:0040A239                 db    ? ;
.bss:0040A23A                 db    ? ;
.bss:0040A23B                 db    ? ;
.bss:0040A23C                 db    ? ;
.bss:0040A23D                 db    ? ;
.bss:0040A23E                 db    ? ;
.bss:0040A23F                 db    ? ;
.bss:0040A240 dword_40A240    dd ?                    ; DATA XREF: .text:loc_406871↑o
.bss:0040A240                                         ; .text:loc_406890↑o ...
.bss:0040A244 dword_40A244    dd ?                    ; DATA XREF: .text:loc_406910↑o
.bss:0040A244                                         ; .text:00406D98↑r ...
.bss:0040A248 dword_40A248    dd ?                    ; DATA XREF: .text:00406D92↑r
.bss:0040A248                                         ; sub_406E40+2C↑r
.bss:0040A24C dword_40A24C    dd ?                    ; DATA XREF: .text:00406D86↑r
.bss:0040A24C                                         ; sub_406E40+22↑r
.bss:0040A250 dword_40A250    dd ?                    ; DATA XREF: .text:00406DA2↑r
.bss:0040A250                                         ; sub_406E40+36↑r
.bss:0040A254 dword_40A254    dd ?                    ; DATA XREF: .text:00406DB2↑r
.bss:0040A254                                         ; sub_406E40+4E↑r
.bss:0040A258 dword_40A258    dd ?                    ; DATA XREF: .text:00406DCF↑r
.bss:0040A258                                         ; sub_406E40+62↑r
.bss:0040A25C dword_40A25C    dd ?                    ; DATA XREF: .text:00406DC5↑r
.bss:0040A25C                                         ; sub_406E40+70↑r
.bss:0040A260 dword_40A260    dd ?                    ; DATA XREF: .text:00406DA8↑r
.bss:0040A260                                         ; sub_406E40+7A↑r
.bss:0040A264                 align 10h
.bss:0040A270 ; char *Str1
.bss:0040A270 Str1            dd ?                    ; DATA XREF: sub_407204:loc_40723D↑w
.bss:0040A270                                         ; sub_407204:loc_407370↑r
.bss:0040A274                 align 10h
.bss:0040A280 dword_40A280    dd ?                    ; DATA XREF: sub_407204+2D↑r
.bss:0040A280                                         ; sub_407204+3F↑w
.bss:0040A284                 align 10h
.bss:0040A290 dword_40A290    dd ?                    ; DATA XREF: sub_407590+38↑r
.bss:0040A290                                         ; sub_407590+FC↑w ...
.bss:0040A294                 align 10h
.bss:0040A2A0 dword_40A2A0    dd ?                    ; DATA XREF: sub_407590+4A↑r
.bss:0040A2A0                                         ; sub_407590+123↑w
.bss:0040A2A4                 align 10h
.bss:0040A2B0 dword_40A2B0    dd ?                    ; DATA XREF: sub_407FF0+7↑r
.bss:0040A2B0                                         ; sub_407FF0+2B↑w ...
.bss:0040A2B4                 align 10h
.bss:0040A2C0 ; struct _SYSTEM_INFO SystemInfo
.bss:0040A2C0 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_407FF0+21↑o
.bss:0040A2C0                                         ; sub_407FF0+33↑o ...
.bss:0040A2E4                 align 10h
.bss:0040A2F0 dword_40A2F0    dd ?                    ; DATA XREF: sub_401CE0+33↑w
.bss:0040A2F0                                         ; sub_401CE0+13B↑r ...
.bss:0040A2F4                 db    ? ;
.bss:0040A2F5                 db    ? ;
.bss:0040A2F6                 db    ? ;
.bss:0040A2F7                 db    ? ;
.bss:0040A2F8                 db    ? ;
.bss:0040A2F9                 db    ? ;
.bss:0040A2FA                 db    ? ;
.bss:0040A2FB                 db    ? ;
.bss:0040A2FC                 db    ? ;
.bss:0040A2FD                 db    ? ;
.bss:0040A2FE                 db    ? ;
.bss:0040A2FF                 db    ? ;
.bss:0040A300                 db    ? ;
.bss:0040A301                 db    ? ;
.bss:0040A302                 db    ? ;
.bss:0040A303                 db    ? ;
.bss:0040A304                 db    ? ;
.bss:0040A305                 db    ? ;
.bss:0040A306                 db    ? ;
.bss:0040A307                 db    ? ;
.bss:0040A308                 db    ? ;
.bss:0040A309                 db    ? ;
.bss:0040A30A                 db    ? ;
.bss:0040A30B                 db    ? ;
.bss:0040A30C                 db    ? ;
.bss:0040A30D                 db    ? ;
.bss:0040A30E                 db    ? ;
.bss:0040A30F                 db    ? ;
.bss:0040A310 ; char *Str
.bss:0040A310 Str             dd ?                    ; DATA XREF: sub_401CE0:loc_401DDB↑r
.bss:0040A310                                         ; sub_401CE0+395↑r ...
.bss:0040A314                 align 10h
.bss:0040A320 dword_40A320    dd ?                    ; CODE XREF: sub_407204+63↑p
.bss:0040A320                                         ; DATA XREF: sub_407100+1E↑r ...
.bss:0040A324                 align 10h
.bss:0040A330 dword_40A330    dd ?                    ; DATA XREF: sub_407100+4E↑w
.bss:0040A330                                         ; sub_407204+AB↑w
.bss:0040A334                 db    ? ;
.bss:0040A335                 db    ? ;
.bss:0040A336                 db    ? ;
.bss:0040A337                 db    ? ;
.bss:0040A338                 db    ? ;
.bss:0040A339                 db    ? ;
.bss:0040A33A                 db    ? ;
.bss:0040A33B                 db    ? ;
.bss:0040A33C                 db    ? ;
.bss:0040A33D                 db    ? ;
.bss:0040A33E                 db    ? ;
.bss:0040A33F                 db    ? ;
.bss:0040A340                 db    ? ;
.bss:0040A341                 db    ? ;
.bss:0040A342                 db    ? ;
.bss:0040A343                 db    ? ;
.bss:0040A344                 db    ? ;
.bss:0040A345                 db    ? ;
.bss:0040A346                 db    ? ;
.bss:0040A347                 db    ? ;
.bss:0040A348                 db    ? ;
.bss:0040A349                 db    ? ;
.bss:0040A34A                 db    ? ;
.bss:0040A34B                 db    ? ;
.bss:0040A34C                 db    ? ;
.bss:0040A34D                 db    ? ;
.bss:0040A34E                 db    ? ;
.bss:0040A34F                 db    ? ;
.bss:0040A350                 db    ? ;
.bss:0040A351                 db    ? ;
.bss:0040A352                 db    ? ;
.bss:0040A353                 db    ? ;
.bss:0040A354                 db    ? ;
.bss:0040A355                 db    ? ;
.bss:0040A356                 db    ? ;
.bss:0040A357                 db    ? ;
.bss:0040A358                 db    ? ;
.bss:0040A359                 db    ? ;
.bss:0040A35A                 db    ? ;
.bss:0040A35B                 db    ? ;
.bss:0040A35C                 db    ? ;
.bss:0040A35D                 db    ? ;
.bss:0040A35E                 db    ? ;
.bss:0040A35F                 db    ? ;
.bss:0040A360 dword_40A360    dd ?                    ; DATA XREF: sub_407204+13↑r
.bss:0040A364                 align 10h
.bss:0040A370 dword_40A370    dd ?                    ; DATA XREF: sub_408150+A↑w
.bss:0040A374                 align 1000h
.bss:0040A374 _bss            ends
.bss:0040A374
.idata:0040B000 ; Section 4. (virtual address 0000B000)
.idata:0040B000 ; Virtual size                  : 000005E4 (   1508.)
.idata:0040B000 ; Section size in file          : 00000600 (   1536.)
.idata:0040B000 ; Offset to raw data for section: 00008200
.idata:0040B000 ; Flags C0000040: Data Readable Writable
.idata:0040B000 ; Alignment     : default
.idata:0040B000 ; ===========================================================================
.idata:0040B000
.idata:0040B000 ; Segment type: Externs
.idata:0040B000 ; _idata
.idata:0040B000
.idata:0040B001
.idata:0040B154 ;
.idata:0040B154 ; Imports from libintl3.dll
.idata:0040B154 ;
.idata:0040B154                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040B154                                         ; CODE XREF: sub_401CE0+4D↑p
.idata:0040B154                                         ; DATA XREF: sub_401CE0+4D↑r ...
.idata:0040B158                 extrn libintl_gettext:dword
.idata:0040B158                                         ; CODE XREF: sub_401CE0:loc_401DEA↑p
.idata:0040B158                                         ; sub_401CE0+12F↑p ...
.idata:0040B15C                 extrn libintl_textdomain:dword
.idata:0040B15C                                         ; CODE XREF: sub_401CE0+5A↑p
.idata:0040B15C                                         ; DATA XREF: sub_401CE0+5A↑r ...
.idata:0040B160
.idata:0040B168 ;
.idata:0040B168 ; Imports from KERNEL32.dll
.idata:0040B168 ;
.idata:0040B168 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040B168                 extrn __imp_ExitProcess:dword
.idata:0040B168                                         ; DATA XREF: ExitProcess↑r
.idata:0040B16C ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:0040B16C                 extrn __imp_GetSystemInfo:dword
.idata:0040B16C                                         ; DATA XREF: GetSystemInfo↑r
.idata:0040B170 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040B170                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040B170                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040B174
.idata:0040B17C ;
.idata:0040B17C ; Imports from MSVCP60.DLL
.idata:0040B17C ;
.idata:0040B17C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040B17C                 extrn __imp_mbrtowc:dword
.idata:0040B17C                                         ; DATA XREF: mbrtowc↑r
.idata:0040B180
.idata:0040B188 ;
.idata:0040B188 ; Imports from msvcrt.dll
.idata:0040B188 ;
.idata:0040B188                 extrn __imp___getmainargs:dword
.idata:0040B188                                         ; DATA XREF: __getmainargs↑r
.idata:0040B18C ; int _mb_cur_max
.idata:0040B18C                 extrn __mb_cur_max:dword
.idata:0040B18C                                         ; DATA XREF: sub_405DA0+7↑r
.idata:0040B18C                                         ; sub_405DA0+5F3↑r
.idata:0040B190 ; char ***(__cdecl *__p__environ)()
.idata:0040B190                 extrn __imp___p__environ:dword
.idata:0040B190                                         ; DATA XREF: __p__environ↑r
.idata:0040B194 ; int *(__cdecl *__p__fmode)()
.idata:0040B194                 extrn __imp___p__fmode:dword
.idata:0040B194                                         ; DATA XREF: __p__fmode↑r
.idata:0040B198 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040B198                 extrn __set_app_type:dword
.idata:0040B198                                         ; CODE XREF: start+D↑p
.idata:0040B198                                         ; .text:0040102D↑p
.idata:0040B198                                         ; DATA XREF: ...
.idata:0040B19C                 extrn __imp__assert:dword
.idata:0040B19C                                         ; DATA XREF: _assert↑r
.idata:0040B1A0 ; void (__cdecl *_cexit)()
.idata:0040B1A0                 extrn __imp__cexit:dword
.idata:0040B1A0                                         ; DATA XREF: _cexit↑r
.idata:0040B1A4 ; int *(__cdecl *_errno)()
.idata:0040B1A4                 extrn __imp__errno:dword
.idata:0040B1A4                                         ; DATA XREF: _errno↑r
.idata:0040B1A8 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0040B1A8                 extrn __imp__filbuf:dword
.idata:0040B1A8                                         ; DATA XREF: _filbuf↑r
.idata:0040B1AC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040B1AC                 extrn __imp__flsbuf:dword
.idata:0040B1AC                                         ; DATA XREF: _flsbuf↑r
.idata:0040B1B0 ; FILE iob[]
.idata:0040B1B0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040B1B0                                         ; sub_401080+75↑r ...
.idata:0040B1B4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040B1B4                 extrn __imp__isctype:dword
.idata:0040B1B4                                         ; DATA XREF: _isctype↑r
.idata:0040B1B8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040B1B8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040B1B8                                         ; DATA XREF: .text:0040106C↑r
.idata:0040B1BC ; const unsigned __int16 *pctype
.idata:0040B1BC                 extrn _pctype:dword     ; DATA XREF: sub_405DA0:loc_406494↑r
.idata:0040B1C0 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040B1C0                 extrn __imp__setmode:dword
.idata:0040B1C0                                         ; DATA XREF: _setmode↑r
.idata:0040B1C4 ; void (__cdecl __noreturn *abort)()
.idata:0040B1C4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040B1C8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040B1C8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040B1C8                                         ; DATA XREF: sub_401040+C↑r
.idata:0040B1CC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040B1CC                 extrn __imp_calloc:dword
.idata:0040B1CC                                         ; DATA XREF: calloc↑r
.idata:0040B1D0 ; void (__cdecl *clearerr)(FILE *Stream)
.idata:0040B1D0                 extrn __imp_clearerr:dword
.idata:0040B1D0                                         ; DATA XREF: clearerr↑r
.idata:0040B1D4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040B1D4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040B1D8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040B1D8                 extrn __imp_fclose:dword
.idata:0040B1D8                                         ; DATA XREF: fclose↑r
.idata:0040B1DC ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040B1DC                 extrn __imp_fflush:dword
.idata:0040B1DC                                         ; DATA XREF: fflush↑r
.idata:0040B1E0 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0040B1E0                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0040B1E4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040B1E4                 extrn __imp_fprintf:dword
.idata:0040B1E4                                         ; DATA XREF: fprintf↑r
.idata:0040B1E8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040B1E8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040B1EC ; void (__cdecl *free)(void *Block)
.idata:0040B1EC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040B1F0 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040B1F0                 extrn __imp_fwrite:dword
.idata:0040B1F0                                         ; DATA XREF: fwrite↑r
.idata:0040B1F4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040B1F4                 extrn __imp_getenv:dword
.idata:0040B1F4                                         ; DATA XREF: getenv↑r
.idata:0040B1F8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040B1F8                 extrn __imp_iswctype:dword
.idata:0040B1F8                                         ; DATA XREF: iswctype↑r
.idata:0040B1FC ; void *(__cdecl *malloc)(size_t Size)
.idata:0040B1FC                 extrn __imp_malloc:dword
.idata:0040B1FC                                         ; DATA XREF: malloc↑r
.idata:0040B200 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040B200                 extrn __imp_memcpy:dword
.idata:0040B200                                         ; DATA XREF: memcpy↑r
.idata:0040B204 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040B204                 extrn __imp_memset:dword
.idata:0040B204                                         ; DATA XREF: memset↑r
.idata:0040B208 ; int (*printf)(const char *const Format, ...)
.idata:0040B208                 extrn __imp_printf:dword
.idata:0040B208                                         ; DATA XREF: printf↑r
.idata:0040B20C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040B20C                 extrn __imp_realloc:dword
.idata:0040B20C                                         ; DATA XREF: realloc↑r
.idata:0040B210 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040B210                 extrn __imp_setlocale:dword
.idata:0040B210                                         ; DATA XREF: setlocale↑r
.idata:0040B214 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040B214                 extrn __imp_signal:dword
.idata:0040B214                                         ; DATA XREF: signal↑r
.idata:0040B218 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040B218                 extrn __imp_strchr:dword
.idata:0040B218                                         ; DATA XREF: strchr↑r
.idata:0040B21C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040B21C                 extrn __imp_strcmp:dword
.idata:0040B21C                                         ; DATA XREF: strcmp↑r
.idata:0040B220 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040B220                 extrn __imp_strerror:dword
.idata:0040B220                                         ; DATA XREF: strerror↑r
.idata:0040B224 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040B224                 extrn __imp_strlen:dword
.idata:0040B224                                         ; DATA XREF: strlen↑r
.idata:0040B228 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040B228                 extrn __imp_strncmp:dword
.idata:0040B228                                         ; DATA XREF: strncmp↑r
.idata:0040B22C ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0040B22C                 extrn __imp_strspn:dword
.idata:0040B22C                                         ; DATA XREF: strspn↑r
.idata:0040B230 ; int (__cdecl *ungetc)(int Character, FILE *Stream)
.idata:0040B230                 extrn __imp_ungetc:dword
.idata:0040B230                                         ; DATA XREF: ungetc↑r
.idata:0040B234 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040B234                 extrn __imp_vfprintf:dword
.idata:0040B234                                         ; DATA XREF: vfprintf↑r
.idata:0040B238
.idata:0040B238
.idata:0040B238
.idata:0040B238                 end start
