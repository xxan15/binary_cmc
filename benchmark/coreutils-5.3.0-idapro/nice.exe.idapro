.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 41E3F5790B61392C3EB1F1DCE8B0B0F50AA4E1BFD2D4FA8FCA3D199B6475A401
.text:00401000 ; Input MD5    : 6E0CF2B12DE65F7D6A09A2CD60C61756
.text:00401000 ; Input CRC32  : E5918E1D
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/nice.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A276 (Wed Apr 20 18:41:58 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000048C0 (  18624.)
.text:00401000 ; Section size in file          : 00004A00 (  18944.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4013F0+76↓p
.text:00401040                                         ; .text:00405580↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405520
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4054F0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4013F0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405520
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aAdjustment     db 'adjustment',0       ; DATA XREF: .text:off_4012A0↓o
.text:0040128B                 align 20h
.text:004012A0 off_4012A0      dd offset aAdjustment   ; DATA XREF: sub_4013F0+F1↓o
.text:004012A0                                         ; "adjustment"
.text:004012A4                 dd 1, 0
.text:004012AC                 dd 6Eh, 4 dup(0)
.text:004012C0 ; const char Str
.text:004012C0 Str             db 0                    ; DATA XREF: sub_4013F0+33↓o
.text:004012C0                                         ; sub_4013F0+14A↓o
.text:004012C1                 align 20h
.text:004012E0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012E0                                         ; DATA XREF: sub_4013F0+4D↓o
.text:00401303 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4013F0+55↓o
.text:00401303                                         ; sub_4013F0+62↓o
.text:0040130D aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4013F0+86↓o
.text:0040131D a530            db '5.3.0',0            ; DATA XREF: sub_4013F0+96↓o
.text:00401323 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4013F0+9E↓o
.text:00401331 ; const FILE stru_401331
.text:00401331 stru_401331     FILE <6563696Eh, 3A6E2B00h, 0B68D00h, 61000000h, 6D6F6320h, 646E616Dh,\
.text:00401331                                         ; DATA XREF: sub_4013F0+A6↓o
.text:00401331                                         ; sub_4013F0+FF↓o ...
.text:00401331                       73756D20h, 65622074h>
.text:00401351                 db  20h
.text:00401352                 db  67h ; g
.text:00401353                 db  69h ; i
.text:00401354                 db  76h ; v
.text:00401355                 db  65h ; e
.text:00401356                 db  6Eh ; n
.text:00401357                 db  20h
.text:00401358                 db  77h ; w
.text:00401359                 db  69h ; i
.text:0040135A                 db  74h ; t
.text:0040135B                 db  68h ; h
.text:0040135C                 db  20h
.text:0040135D                 db  61h ; a
.text:0040135E                 db  6Eh ; n
.text:0040135F                 db  20h
.text:00401360                 db  61h ; a
.text:00401361                 db  64h ; d
.text:00401362                 db  6Ah ; j
.text:00401363                 db  75h ; u
.text:00401364                 db  73h ; s
.text:00401365                 db  74h ; t
.text:00401366                 db  6Dh ; m
.text:00401367                 db  65h ; e
.text:00401368                 db  6Eh ; n
.text:00401369                 db  74h ; t
.text:0040136A                 db    0
.text:0040136B                 align 20h
.text:00401380 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401380                                         ; DATA XREF: sub_4013F0:loc_4015A8↓o
.text:00401380                                         ; sub_401A10+F↓o
.text:004013A7 ; const char Format[]
.text:004013A7 Format          db '%d',0Ah,0           ; DATA XREF: sub_4013F0+21A↓o
.text:004013AB aCannotGetPrior db 'cannot get priority',0
.text:004013AB                                         ; DATA XREF: sub_4013F0+23A↓o
.text:004013AB                                         ; sub_4013F0+351↓o
.text:004013BF ; const char aS[]
.text:004013BF aS              db '%s',0               ; DATA XREF: sub_4013F0+2E2↓o
.text:004013C2 aCannotSetPrior db 'cannot set priority',0
.text:004013C2                                         ; DATA XREF: sub_4013F0:loc_4016F8↓o
.text:004013D6 aInvalidAdjustm db 'invalid adjustment `%s',27h,0
.text:004013D6                                         ; DATA XREF: sub_4013F0:loc_401770↓o
.text:004013EE                 align 10h
.text:004013F0
.text:004013F0 ; =============== S U B R O U T I N E =======================================
.text:004013F0
.text:004013F0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004013F0
.text:004013F0 sub_4013F0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004013F0
.text:004013F0 Category        = dword ptr -38h
.text:004013F0 Locale          = dword ptr -34h
.text:004013F0 var_30          = dword ptr -30h
.text:004013F0 var_2C          = byte ptr -2Ch
.text:004013F0 Str             = dword ptr -28h
.text:004013F0 var_24          = dword ptr -24h
.text:004013F0 var_20          = byte ptr -20h
.text:004013F0 var_1C          = dword ptr -1Ch
.text:004013F0 var_18          = dword ptr -18h
.text:004013F0 var_14          = dword ptr -14h
.text:004013F0 var_10          = byte ptr -10h
.text:004013F0 arg_0           = dword ptr  8
.text:004013F0 arg_4           = dword ptr  0Ch
.text:004013F0
.text:004013F0                 push    ebp
.text:004013F1                 xor     eax, eax
.text:004013F3                 mov     ebp, esp
.text:004013F5                 push    edi
.text:004013F6                 mov     edi, 1
.text:004013FB                 push    esi
.text:004013FC                 push    ebx
.text:004013FD                 sub     esp, 2Ch
.text:00401400                 and     esp, 0FFFFFFF0h
.text:00401403                 call    __alloca
.text:00401408                 mov     esi, [ebp+arg_0]
.text:0040140B                 call    sub_4055C0
.text:00401410                 mov     [ebp+var_14], 0Ah
.text:00401417                 mov     eax, [ebp+arg_4]
.text:0040141A                 mov     [ebp+var_18], 0
.text:00401421                 mov     ecx, [eax]
.text:00401423                 mov     [esp+38h+Locale], offset Str ; Locale
.text:0040142B                 mov     [esp+38h+Category], 0 ; Category
.text:00401432                 mov     ds:dword_407190, ecx
.text:00401438                 call    setlocale
.text:0040143D                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401445                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:0040144C                 call    ds:__imp_libintl_bindtextdomain
.text:00401452                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401459                 call    ds:libintl_textdomain
.text:0040145F                 mov     [esp+38h+Category], offset sub_403500 ; void (__cdecl *)()
.text:00401466                 call    sub_401040
.text:0040146B                 mov     [esp+38h+var_1C], 0
.text:00401473                 mov     eax, [ebp+arg_4]
.text:00401476                 mov     dword ptr [esp+38h+var_20], offset aDavidMackenzie ; "David MacKenzie"
.text:0040147E                 mov     [esp+38h+var_24], offset sub_401A10 ; int
.text:00401486                 mov     [esp+38h+Str], offset a530 ; "5.3.0"
.text:0040148E                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:00401496                 mov     [esp+38h+var_30], offset stru_401331 ; FILE *
.text:0040149E                 mov     [esp+38h+Locale], eax ; int
.text:004014A2                 mov     [esp+38h+Category], esi ; int
.text:004014A5                 call    sub_403410
.text:004014AA                 cmp     edi, esi
.text:004014AC                 jge     loc_401574
.text:004014B2                 lea     esi, [esi+0]
.text:004014B9                 lea     edi, [edi+0]
.text:004014C0
.text:004014C0 loc_4014C0:                             ; CODE XREF: sub_4013F0+141↓j
.text:004014C0                 mov     edx, [ebp+arg_4]
.text:004014C3                 mov     ebx, [edx+edi*4]
.text:004014C6                 cmp     byte ptr [ebx], 2Dh ; '-'
.text:004014C9                 jz      loc_4017B0
.text:004014CF
.text:004014CF loc_4014CF:                             ; CODE XREF: sub_4013F0+3D9↓j
.text:004014CF                                         ; sub_4013F0+3E9↓j
.text:004014CF                 mov     [esp+38h+Str], 0 ; int
.text:004014D7                 mov     ebx, [ebp+arg_4]
.text:004014DA                 xor     eax, eax
.text:004014DC                 mov     dword_406010, eax
.text:004014E1                 mov     dword ptr [esp+38h+var_2C], offset off_4012A0 ; int
.text:004014E9                 lea     ecx, [ebx+edi*4-4]
.text:004014ED                 mov     ebx, esi
.text:004014EF                 mov     [esp+38h+var_30], (offset stru_401331._cnt+1) ; char *
.text:004014F7                 sub     ebx, edi
.text:004014F9                 inc     ebx
.text:004014FA                 mov     [esp+38h+Locale], ecx ; int
.text:004014FE                 mov     [esp+38h+Category], ebx ; int
.text:00401501                 call    sub_403200
.text:00401506                 cmp     eax, 0FFFFFFFFh
.text:00401509                 mov     edx, eax
.text:0040150B                 jz      short loc_40151F
.text:0040150D                 cmp     eax, 3Fh ; '?'
.text:00401510                 jz      loc_4015A8
.text:00401516                 cmp     eax, 6Eh ; 'n'
.text:00401519                 jz      loc_4017A1
.text:0040151F
.text:0040151F loc_40151F:                             ; CODE XREF: sub_4013F0+11B↑j
.text:0040151F                                         ; sub_4013F0+3B9↓j
.text:0040151F                 mov     ebx, dword_406010
.text:00401525                 mov     ecx, edi
.text:00401527                 add     ecx, ebx
.text:00401529                 inc     edx
.text:0040152A                 lea     edi, [ecx-1]
.text:0040152D                 jz      short loc_401533
.text:0040152F
.text:0040152F loc_40152F:                             ; CODE XREF: sub_4013F0+3F4↓j
.text:0040152F                 cmp     edi, esi
.text:00401531                 jl      short loc_4014C0
.text:00401533
.text:00401533 loc_401533:                             ; CODE XREF: sub_4013F0+13D↑j
.text:00401533                 mov     edx, [ebp+var_18]
.text:00401536                 test    edx, edx
.text:00401538                 jz      short loc_401574
.text:0040153A                 mov     [esp+38h+Str], offset Str ; Str
.text:00401542                 mov     ecx, [ebp+var_18]
.text:00401545                 lea     ebx, [ebp+var_10]
.text:00401548                 mov     dword ptr [esp+38h+var_2C], ebx ; char
.text:0040154C                 mov     [esp+38h+var_30], 0Ah ; int
.text:00401554                 mov     [esp+38h+Locale], 0 ; char **
.text:0040155C                 mov     [esp+38h+Category], ecx ; char *
.text:0040155F                 call    sub_402B90
.text:00401564                 cmp     eax, 1
.text:00401567                 ja      loc_401770
.text:0040156D
.text:0040156D loc_40156D:                             ; CODE XREF: sub_4013F0+3AC↓j
.text:0040156D                 mov     [ebp+var_14], 1
.text:00401574
.text:00401574 loc_401574:                             ; CODE XREF: sub_4013F0+BC↑j
.text:00401574                                         ; sub_4013F0+148↑j
.text:00401574                 cmp     edi, esi
.text:00401576                 jnz     loc_401656
.text:0040157C                 mov     esi, [ebp+var_18]
.text:0040157F                 test    esi, esi
.text:00401581                 jz      short loc_4015E0
.text:00401583                 mov     [esp+38h+Category], (offset stru_401331._flag+3)
.text:0040158A                 call    ds:libintl_gettext
.text:00401590                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401598                 mov     [esp+38h+Category], 0 ; Code
.text:0040159F                 mov     [esp+38h+var_30], eax ; char *
.text:004015A3                 call    sub_405200
.text:004015A8
.text:004015A8 loc_4015A8:                             ; CODE XREF: sub_4013F0+120↑j
.text:004015A8                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004015AF                 call    ds:libintl_gettext
.text:004015B5                 mov     edi, ds:_iob
.text:004015BB                 mov     ebx, ds:dword_407190
.text:004015C1                 add     edi, 40h ; '@'
.text:004015C4                 mov     [esp+38h+var_30], ebx
.text:004015C8                 mov     [esp+38h+Locale], eax ; Format
.text:004015CC                 mov     [esp+38h+Category], edi ; Stream
.text:004015CF                 call    fprintf
.text:004015D4                 mov     [esp+38h+Category], 1 ; Code
.text:004015DB
.text:004015DB loc_4015DB:                             ; CODE XREF: sub_4013F0+22D↓j
.text:004015DB                                         ; sub_4013F0+303↓j
.text:004015DB                 call    exit
.text:004015E0 ; ---------------------------------------------------------------------------
.text:004015E0
.text:004015E0 loc_4015E0:                             ; CODE XREF: sub_4013F0+191↑j
.text:004015E0                 call    _errno
.text:004015E5                 mov     dword ptr [eax], 0
.text:004015EB                 mov     [esp+38h+Locale], 0
.text:004015F3                 mov     [esp+38h+Category], 0
.text:004015FA                 call    sub_4054C0
.text:004015FF                 cmp     eax, 0FFFFFFFFh
.text:00401602                 mov     esi, eax
.text:00401604                 jz      short loc_40161F
.text:00401606
.text:00401606 loc_401606:                             ; CODE XREF: sub_4013F0+238↓j
.text:00401606                                         ; sub_4013F0+264↓j
.text:00401606                 mov     [esp+38h+Locale], esi
.text:0040160A                 mov     [esp+38h+Category], offset Format ; "%d\n"
.text:00401611                 call    printf
.text:00401616                 mov     [esp+38h+Category], 0
.text:0040161D                 jmp     short loc_4015DB
.text:0040161F ; ---------------------------------------------------------------------------
.text:0040161F
.text:0040161F loc_40161F:                             ; CODE XREF: sub_4013F0+214↑j
.text:0040161F                 call    _errno
.text:00401624                 mov     ecx, [eax]
.text:00401626                 test    ecx, ecx
.text:00401628                 jz      short loc_401606
.text:0040162A                 mov     [esp+38h+Category], offset aCannotGetPrior ; "cannot get priority"
.text:00401631                 call    ds:libintl_gettext
.text:00401637                 mov     edi, eax
.text:00401639                 call    _errno
.text:0040163E                 mov     [esp+38h+var_30], edi ; char *
.text:00401642                 mov     edx, [eax]
.text:00401644                 mov     [esp+38h+Category], 1 ; Code
.text:0040164B                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:0040164F                 call    sub_405200
.text:00401654                 jmp     short loc_401606
.text:00401656 ; ---------------------------------------------------------------------------
.text:00401656
.text:00401656 loc_401656:                             ; CODE XREF: sub_4013F0+186↑j
.text:00401656                 call    _errno
.text:0040165B                 mov     dword ptr [eax], 0
.text:00401661                 mov     [esp+38h+Locale], 0
.text:00401669                 mov     [esp+38h+Category], 0
.text:00401670                 call    sub_4054C0
.text:00401675                 cmp     eax, 0FFFFFFFFh
.text:00401678                 mov     esi, eax
.text:0040167A                 jz      loc_401732
.text:00401680
.text:00401680 loc_401680:                             ; CODE XREF: sub_4013F0+34B↓j
.text:00401680                                         ; sub_4013F0+37B↓j
.text:00401680                 mov     [esp+38h+Locale], 0
.text:00401688                 mov     eax, [ebp+var_14]
.text:0040168B                 mov     [esp+38h+Category], 0
.text:00401692                 lea     edx, [eax+esi]
.text:00401695                 mov     [esp+38h+var_30], edx
.text:00401699                 call    sub_4054A0
.text:0040169E                 test    eax, eax
.text:004016A0                 jnz     short loc_4016F8
.text:004016A2
.text:004016A2 loc_4016A2:                             ; CODE XREF: sub_4013F0+33D↓j
.text:004016A2                 mov     ebx, [ebp+arg_4]
.text:004016A5                 lea     esi, [ebx+edi*4]
.text:004016A8                 mov     [esp+38h+Locale], esi ; Arguments
.text:004016AC                 mov     ecx, [ebx+edi*4]
.text:004016AF                 xor     ebx, ebx
.text:004016B1                 mov     [esp+38h+Category], ecx ; FileName
.text:004016B4                 call    _execvp
.text:004016B9                 call    _errno
.text:004016BE                 cmp     dword ptr [eax], 2
.text:004016C1                 setz    bl
.text:004016C4                 call    _errno
.text:004016C9                 mov     edx, [ebp+arg_4]
.text:004016CC                 add     ebx, 7Eh ; '~'
.text:004016CF                 mov     esi, [edx+edi*4]
.text:004016D2                 mov     [esp+38h+var_30], offset aS ; "%s"
.text:004016DA                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:004016DE                 mov     esi, [eax]
.text:004016E0                 mov     [esp+38h+Category], 0 ; Code
.text:004016E7                 mov     [esp+38h+Locale], esi ; ErrorMessage
.text:004016EB                 call    sub_405200
.text:004016F0                 mov     [esp+38h+Category], ebx
.text:004016F3                 jmp     loc_4015DB
.text:004016F8 ; ---------------------------------------------------------------------------
.text:004016F8
.text:004016F8 loc_4016F8:                             ; CODE XREF: sub_4013F0+2B0↑j
.text:004016F8                 mov     [esp+38h+Category], offset aCannotSetPrior ; "cannot set priority"
.text:004016FF                 call    ds:libintl_gettext
.text:00401705                 mov     ebx, eax
.text:00401707                 call    _errno
.text:0040170C                 mov     esi, eax
.text:0040170E                 call    _errno
.text:00401713                 xor     ecx, ecx
.text:00401715                 cmp     dword ptr [eax], 1
.text:00401718                 mov     [esp+38h+var_30], ebx ; char *
.text:0040171C                 mov     ebx, [esi]
.text:0040171E                 setnz   cl
.text:00401721                 mov     [esp+38h+Locale], ebx ; ErrorMessage
.text:00401725                 mov     [esp+38h+Category], ecx ; Code
.text:00401728                 call    sub_405200
.text:0040172D                 jmp     loc_4016A2
.text:00401732 ; ---------------------------------------------------------------------------
.text:00401732
.text:00401732 loc_401732:                             ; CODE XREF: sub_4013F0+28A↑j
.text:00401732                 call    _errno
.text:00401737                 mov     ebx, [eax]
.text:00401739                 test    ebx, ebx
.text:0040173B                 jz      loc_401680
.text:00401741                 mov     [esp+38h+Category], offset aCannotGetPrior ; "cannot get priority"
.text:00401748                 call    ds:libintl_gettext
.text:0040174E                 mov     ebx, eax
.text:00401750                 call    _errno
.text:00401755                 mov     [esp+38h+var_30], ebx ; char *
.text:00401759                 mov     ecx, [eax]
.text:0040175B                 mov     [esp+38h+Category], 1 ; Code
.text:00401762                 mov     [esp+38h+Locale], ecx ; ErrorMessage
.text:00401766                 call    sub_405200
.text:0040176B                 jmp     loc_401680
.text:00401770 ; ---------------------------------------------------------------------------
.text:00401770
.text:00401770 loc_401770:                             ; CODE XREF: sub_4013F0+177↑j
.text:00401770                 mov     [esp+38h+Category], offset aInvalidAdjustm ; "invalid adjustment `%s'"
.text:00401777                 call    ds:libintl_gettext
.text:0040177D                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401785                 mov     ecx, [ebp+var_18]
.text:00401788                 mov     [esp+38h+Category], 1 ; Code
.text:0040178F                 mov     dword ptr [esp+38h+var_2C], ecx ; char
.text:00401793                 mov     [esp+38h+var_30], eax ; char *
.text:00401797                 call    sub_405200
.text:0040179C                 jmp     loc_40156D
.text:004017A1 ; ---------------------------------------------------------------------------
.text:004017A1
.text:004017A1 loc_4017A1:                             ; CODE XREF: sub_4013F0+129↑j
.text:004017A1                 mov     eax, ds:dword_4071B0
.text:004017A6                 mov     [ebp+var_18], eax
.text:004017A9                 jmp     loc_40151F
.text:004017A9 ; ---------------------------------------------------------------------------
.text:004017AE                 align 10h
.text:004017B0
.text:004017B0 loc_4017B0:                             ; CODE XREF: sub_4013F0+D9↑j
.text:004017B0                 movzx   eax, byte ptr [ebx+1]
.text:004017B4                 xor     edx, edx
.text:004017B6                 cmp     al, 2Dh ; '-'
.text:004017B8                 jz      short loc_4017F0
.text:004017BA                 cmp     al, 2Bh ; '+'
.text:004017BC                 jz      short loc_4017F0
.text:004017BE
.text:004017BE loc_4017BE:                             ; CODE XREF: sub_4013F0+405↓j
.text:004017BE                 movsx   ecx, byte ptr [edx+ebx+1]
.text:004017C3                 sub     ecx, 30h ; '0'
.text:004017C6                 cmp     ecx, 9
.text:004017C9                 ja      loc_4014CF
.text:004017CF                 call    sub_403350
.text:004017D4                 cmp     eax, 30DAFh
.text:004017D9                 jg      loc_4014CF
.text:004017DF                 inc     ebx
.text:004017E0                 inc     edi
.text:004017E1                 mov     [ebp+var_18], ebx
.text:004017E4                 jmp     loc_40152F
.text:004017E4 ; ---------------------------------------------------------------------------
.text:004017E9                 align 10h
.text:004017F0
.text:004017F0 loc_4017F0:                             ; CODE XREF: sub_4013F0+3C8↑j
.text:004017F0                                         ; sub_4013F0+3CC↑j
.text:004017F0                 mov     edx, 1
.text:004017F5                 jmp     short loc_4017BE
.text:004017F5 sub_4013F0      endp
.text:004017F5
.text:004017F5 ; ---------------------------------------------------------------------------
.text:004017F7                 align 10h
.text:00401800 aUsageSOptionCo db 'Usage: %s [OPTION] [COMMAND [ARG]...]',0Ah,0
.text:00401800                                         ; DATA XREF: sub_401A10:loc_401A53↓o
.text:00401827                 align 20h
.text:00401840 aRunCommandWith db 'Run COMMAND with an adjusted nice value, which affects the schedu'
.text:00401840                                         ; DATA XREF: sub_401A10+62↓o
.text:00401840                 db 'ling priority.',0Ah
.text:00401840                 db 'With no COMMAND, print the current nice value.  Nice values range'
.text:00401840                 db ' from',0Ah
.text:00401840                 db '%d (most favorable scheduling) to %d (least favorable).',0Ah
.text:00401840                 db 0Ah
.text:00401840                 db '  -n, --adjustment=N   add integer N to the nice value (default 1'
.text:00401840                 db '0)',0Ah,0
.text:00401955                 align 10h
.text:00401960 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401960                                         ; DATA XREF: sub_401A10+87↓o
.text:0040198D                 align 20h
.text:004019A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004019A0                                         ; DATA XREF: sub_401A10+A9↓o
.text:004019D6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401A10+CB↓o
.text:004019D6                 db 'Report bugs to <%s>.',0Ah,0
.text:004019ED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004019ED                                         ; DATA XREF: sub_401A10+D8↓o
.text:00401A03                 align 10h
.text:00401A10
.text:00401A10 ; =============== S U B R O U T I N E =======================================
.text:00401A10
.text:00401A10 ; Attributes: noreturn
.text:00401A10
.text:00401A10 ; void __cdecl __noreturn sub_401A10(int Code)
.text:00401A10 sub_401A10      proc near               ; DATA XREF: sub_4013F0+8E↑o
.text:00401A10
.text:00401A10 Stream          = dword ptr -1Ch
.text:00401A10 Format          = dword ptr -18h
.text:00401A10 var_14          = dword ptr -14h
.text:00401A10 var_4           = dword ptr -4
.text:00401A10 Code            = dword ptr  4
.text:00401A10
.text:00401A10                 sub     esp, 1Ch
.text:00401A13                 mov     [esp+1Ch+var_4], ebx
.text:00401A17                 mov     ebx, [esp+1Ch+Code]
.text:00401A1B                 test    ebx, ebx
.text:00401A1D                 jz      short loc_401A53
.text:00401A1F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401A26                 call    ds:libintl_gettext
.text:00401A2C                 mov     edx, ds:_iob
.text:00401A32                 mov     ecx, ds:dword_407190
.text:00401A38                 add     edx, 40h ; '@'
.text:00401A3B                 mov     [esp+1Ch+var_14], ecx
.text:00401A3F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401A43                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401A46                 call    fprintf
.text:00401A4B
.text:00401A4B loc_401A4B:                             ; CODE XREF: sub_401A10+E8↓j
.text:00401A4B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00401A4E                 call    exit
.text:00401A53 ; ---------------------------------------------------------------------------
.text:00401A53
.text:00401A53 loc_401A53:                             ; CODE XREF: sub_401A10+D↑j
.text:00401A53                 mov     [esp+1Ch+Stream], offset aUsageSOptionCo ; "Usage: %s [OPTION] [COMMAND [ARG]...]\n"
.text:00401A5A                 call    ds:libintl_gettext
.text:00401A60                 mov     ecx, ds:dword_407190
.text:00401A66                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401A69                 mov     [esp+1Ch+Format], ecx
.text:00401A6D                 call    printf
.text:00401A72                 mov     [esp+1Ch+Stream], offset aRunCommandWith ; "Run COMMAND with an adjusted nice value"...
.text:00401A79                 call    ds:libintl_gettext
.text:00401A7F                 mov     [esp+1Ch+var_14], 0FFFFFFFFh
.text:00401A87                 mov     [esp+1Ch+Format], 0
.text:00401A8F                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401A92                 call    printf
.text:00401A97                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401A9E                 call    ds:libintl_gettext
.text:00401AA4                 mov     ecx, ds:_iob
.text:00401AAA                 add     ecx, 20h ; ' '
.text:00401AAD                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AB1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401AB4                 call    fputs
.text:00401AB9                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401AC0                 call    ds:libintl_gettext
.text:00401AC6                 mov     ecx, ds:_iob
.text:00401ACC                 add     ecx, 20h ; ' '
.text:00401ACF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AD3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401AD6                 call    fputs
.text:00401ADB                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401AE2                 call    ds:libintl_gettext
.text:00401AE8                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401AF0                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401AF3                 call    printf
.text:00401AF8                 jmp     loc_401A4B
.text:00401AF8 sub_401A10      endp
.text:00401AF8
.text:00401AF8 ; ---------------------------------------------------------------------------
.text:00401AFD                 align 10h
.text:00401B00 dword_401B00    dd 90002D2Dh, 7 dup(90909090h)
.text:00401B00                                         ; DATA XREF: sub_401D50+E4↓o
.text:00401B20 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401B20                                         ; DATA XREF: sub_401D50+2FC↓o
.text:00401B4D                 align 20h
.text:00401B60 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401B60                                         ; DATA XREF: sub_401D50:loc_4020B2↓o
.text:00401B8D                 align 20h
.text:00401BA0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401BA0                                         ; DATA XREF: sub_401D50:loc_402150↓o
.text:00401BA0                                         ; sub_401D50:loc_402517↓o
.text:00401BC6                 align 20h
.text:00401BE0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401BE0                                         ; DATA XREF: sub_401D50+48E↓o
.text:00401C00 dword_401C00    dd 90909000h, 7 dup(90909090h)
.text:00401C00                                         ; DATA XREF: sub_401D50:loc_402221↓o
.text:00401C20 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401C20                                         ; DATA XREF: sub_401D50:loc_40223A↓o
.text:00401C40 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401C40                                         ; DATA XREF: sub_401D50:loc_40231F↓o
.text:00401C40                                         ; sub_401D50:loc_40264C↓o
.text:00401C67                 align 20h
.text:00401C80 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401C80                                         ; DATA XREF: sub_401D50:loc_402493↓o
.text:00401CAE                 align 20h
.text:00401CC0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401CC0                                         ; DATA XREF: sub_401D50:loc_40257F↓o
.text:00401CE1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401CE1                                         ; DATA XREF: sub_401D50+93F↓o
.text:00401CFB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401CFB                                         ; DATA XREF: sub_401D50:loc_4026C7↓o
.text:00401D15 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401D15                                         ; DATA XREF: sub_401D50:loc_4026EE↓o
.text:00401D33 ; const char VarName[]
.text:00401D33 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401D50:loc_4028A0↓o
.text:00401D43                 align 10h
.text:00401D50
.text:00401D50 ; =============== S U B R O U T I N E =======================================
.text:00401D50
.text:00401D50
.text:00401D50 ; int __cdecl sub_401D50(int, int, char *Str, int, int, int, int, int)
.text:00401D50 sub_401D50      proc near               ; CODE XREF: sub_4028E0+5A↓p
.text:00401D50                                         ; .text:004029CA↓p ...
.text:00401D50
.text:00401D50 Str1            = dword ptr -5Ch
.text:00401D50 Str2            = dword ptr -58h
.text:00401D50 MaxCount        = dword ptr -54h
.text:00401D50 var_50          = dword ptr -50h
.text:00401D50 var_4C          = dword ptr -4Ch
.text:00401D50 var_3C          = dword ptr -3Ch
.text:00401D50 var_38          = dword ptr -38h
.text:00401D50 var_34          = dword ptr -34h
.text:00401D50 var_30          = dword ptr -30h
.text:00401D50 var_2C          = dword ptr -2Ch
.text:00401D50 var_28          = dword ptr -28h
.text:00401D50 var_24          = dword ptr -24h
.text:00401D50 var_20          = dword ptr -20h
.text:00401D50 var_1C          = dword ptr -1Ch
.text:00401D50 var_18          = dword ptr -18h
.text:00401D50 var_14          = dword ptr -14h
.text:00401D50 arg_0           = dword ptr  4
.text:00401D50 arg_4           = dword ptr  8
.text:00401D50 Str             = dword ptr  0Ch
.text:00401D50 arg_C           = dword ptr  10h
.text:00401D50 arg_10          = dword ptr  14h
.text:00401D50 arg_14          = dword ptr  18h
.text:00401D50 arg_18          = dword ptr  1Ch
.text:00401D50 arg_1C          = dword ptr  20h
.text:00401D50
.text:00401D50                 push    ebp
.text:00401D51                 mov     eax, 0FFFFFFFFh
.text:00401D56                 push    edi
.text:00401D57                 push    esi
.text:00401D58                 push    ebx
.text:00401D59                 sub     esp, 4Ch
.text:00401D5C                 mov     esi, [esp+5Ch+Str]
.text:00401D60                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401D64                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401D67                 mov     ebx, [ebp+4]
.text:00401D6A                 setz    dl
.text:00401D6D                 movzx   ecx, dl
.text:00401D70                 dec     ecx
.text:00401D71                 and     ecx, ebx
.text:00401D73                 mov     [esp+5Ch+var_14], ecx
.text:00401D77                 mov     ecx, [esp+5Ch+arg_0]
.text:00401D7B                 test    ecx, ecx
.text:00401D7D                 jle     loc_401EA7
.text:00401D83                 mov     dword ptr [ebp+0Ch], 0
.text:00401D8A                 mov     ebx, [ebp+0]
.text:00401D8D                 test    ebx, ebx
.text:00401D8F                 jz      loc_4028C0
.text:00401D95                 mov     edi, [ebp+10h]
.text:00401D98                 test    edi, edi
.text:00401D9A                 jnz     short loc_401DF3
.text:00401D9C                 lea     esi, [esi+0]
.text:00401DA0
.text:00401DA0 loc_401DA0:                             ; CODE XREF: sub_401D50+B7C↓j
.text:00401DA0                 mov     [ebp+24h], ebx
.text:00401DA3                 mov     esi, [esp+5Ch+Str]
.text:00401DA7                 mov     [ebp+20h], ebx
.text:00401DAA                 mov     ecx, [esp+5Ch+arg_18]
.text:00401DAE                 xor     ebx, ebx
.text:00401DB0                 mov     dword ptr [ebp+14h], 0
.text:00401DB7                 test    ecx, ecx
.text:00401DB9                 jz      loc_4028A0
.text:00401DBF
.text:00401DBF loc_401DBF:                             ; CODE XREF: sub_401D50+B64↓j
.text:00401DBF                 mov     ebx, 1
.text:00401DC4
.text:00401DC4 loc_401DC4:                             ; CODE XREF: sub_401D50+B5E↓j
.text:00401DC4                 mov     [ebp+1Ch], ebx
.text:00401DC7                 mov     ecx, [esp+5Ch+Str]
.text:00401DCB                 movzx   eax, byte ptr [ecx]
.text:00401DCE                 cmp     al, 2Dh ; '-'
.text:00401DD0                 jz      loc_402890
.text:00401DD6                 cmp     al, 2Bh ; '+'
.text:00401DD8                 jz      loc_402879
.text:00401DDE                 xor     edx, edx
.text:00401DE0                 test    ebx, ebx
.text:00401DE2                 setz    dl
.text:00401DE5                 mov     [ebp+18h], edx
.text:00401DE8
.text:00401DE8 loc_401DE8:                             ; CODE XREF: sub_401D50+B35↓j
.text:00401DE8                 mov     [esp+5Ch+Str], esi
.text:00401DEC                 mov     dword ptr [ebp+10h], 1
.text:00401DF3
.text:00401DF3 loc_401DF3:                             ; CODE XREF: sub_401D50+4A↑j
.text:00401DF3                 mov     eax, [ebp+14h]
.text:00401DF6                 test    eax, eax
.text:00401DF8                 jz      short loc_401E03
.text:00401DFA                 cmp     byte ptr [eax], 0
.text:00401DFD                 jnz     loc_401EE0
.text:00401E03
.text:00401E03 loc_401E03:                             ; CODE XREF: sub_401D50+A8↑j
.text:00401E03                 mov     ebx, [ebp+0]
.text:00401E06                 cmp     [ebp+24h], ebx
.text:00401E09                 jle     short loc_401E0E
.text:00401E0B                 mov     [ebp+24h], ebx
.text:00401E0E
.text:00401E0E loc_401E0E:                             ; CODE XREF: sub_401D50+B9↑j
.text:00401E0E                 cmp     [ebp+20h], ebx
.text:00401E11                 jle     short loc_401E16
.text:00401E13                 mov     [ebp+20h], ebx
.text:00401E16
.text:00401E16 loc_401E16:                             ; CODE XREF: sub_401D50+C1↑j
.text:00401E16                 cmp     dword ptr [ebp+18h], 1
.text:00401E1A                 jz      loc_4027F0
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401D50+B13↓j
.text:00401E20                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401E24                 jz      loc_4027D4
.text:00401E2A                 cld
.text:00401E2B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401E2F                 mov     edx, 3
.text:00401E34                 mov     edi, offset dword_401B00
.text:00401E39                 mov     esi, [ecx+ebx*4]
.text:00401E3C                 mov     ecx, edx
.text:00401E3E                 repe cmpsb
.text:00401E40                 jnz     short loc_401E7C
.text:00401E42                 mov     edx, [ebp+24h]
.text:00401E45                 lea     eax, [ebx+1]
.text:00401E48                 cmp     [ebp+20h], edx
.text:00401E4B                 mov     [ebp+0], eax
.text:00401E4E                 jz      loc_4027E8
.text:00401E54                 cmp     edx, eax
.text:00401E56                 jz      short loc_401E70
.text:00401E58                 mov     [esp+5Ch+Str2], ebp
.text:00401E5C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401E60                 mov     [esp+5Ch+Str1], ebx
.text:00401E63                 call    sub_402A00
.text:00401E68                 nop
.text:00401E69                 lea     esi, [esi+0]
.text:00401E70
.text:00401E70 loc_401E70:                             ; CODE XREF: sub_401D50+106↑j
.text:00401E70                                         ; sub_401D50+A9B↓j
.text:00401E70                 mov     eax, [esp+5Ch+arg_0]
.text:00401E74                 mov     ebx, eax
.text:00401E76                 mov     [ebp+24h], eax
.text:00401E79                 mov     [ebp+0], eax
.text:00401E7C
.text:00401E7C loc_401E7C:                             ; CODE XREF: sub_401D50+F0↑j
.text:00401E7C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401E80                 jz      loc_4027D4
.text:00401E86                 mov     esi, [esp+5Ch+arg_4]
.text:00401E8A                 mov     eax, [esi+ebx*4]
.text:00401E8D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401E90                 jz      short loc_401EB7
.text:00401E92
.text:00401E92 loc_401E92:                             ; CODE XREF: sub_401D50+16D↓j
.text:00401E92                 mov     edx, [ebp+18h]
.text:00401E95                 test    edx, edx
.text:00401E97                 jz      short loc_401EB0
.text:00401E99                 mov     [ebp+0Ch], eax
.text:00401E9C                 lea     edi, [ebx+1]
.text:00401E9F                 mov     eax, 1
.text:00401EA4                 mov     [ebp+0], edi
.text:00401EA7
.text:00401EA7 loc_401EA7:                             ; CODE XREF: sub_401D50+2D↑j
.text:00401EA7                                         ; sub_401D50+165↓j ...
.text:00401EA7                 add     esp, 4Ch
.text:00401EAA                 pop     ebx
.text:00401EAB                 pop     esi
.text:00401EAC                 pop     edi
.text:00401EAD                 pop     ebp
.text:00401EAE                 retn
.text:00401EAE ; ---------------------------------------------------------------------------
.text:00401EAF                 align 10h
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401D50+147↑j
.text:00401EB0                                         ; sub_401D50+A8A↓j ...
.text:00401EB0                 mov     eax, 0FFFFFFFFh
.text:00401EB5                 jmp     short loc_401EA7
.text:00401EB7 ; ---------------------------------------------------------------------------
.text:00401EB7
.text:00401EB7 loc_401EB7:                             ; CODE XREF: sub_401D50+140↑j
.text:00401EB7                 movzx   edx, byte ptr [eax+1]
.text:00401EBB                 test    dl, dl
.text:00401EBD                 jz      short loc_401E92
.text:00401EBF                 mov     ebx, [esp+5Ch+arg_C]
.text:00401EC3                 xor     ecx, ecx
.text:00401EC5                 test    ebx, ebx
.text:00401EC7                 jz      short loc_401ED2
.text:00401EC9                 cmp     dl, 2Dh ; '-'
.text:00401ECC                 jz      loc_4027CA
.text:00401ED2
.text:00401ED2 loc_401ED2:                             ; CODE XREF: sub_401D50+177↑j
.text:00401ED2                                         ; sub_401D50+A7F↓j
.text:00401ED2                 lea     esi, [ecx+eax+1]
.text:00401ED6                 mov     [ebp+14h], esi
.text:00401ED9                 lea     esi, [esi+0]
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401D50+AD↑j
.text:00401EE0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401EE4                 test    ecx, ecx
.text:00401EE6                 jz      loc_402270
.text:00401EEC                 mov     edx, [ebp+0]
.text:00401EEF                 mov     edi, [esp+5Ch+arg_4]
.text:00401EF3                 mov     eax, [edi+edx*4]
.text:00401EF6                 movzx   edx, byte ptr [eax+1]
.text:00401EFA                 cmp     dl, 2Dh ; '-'
.text:00401EFD                 jz      short loc_401F15
.text:00401EFF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401F03                 test    ebx, ebx
.text:00401F05                 jz      loc_402270
.text:00401F0B                 cmp     byte ptr [eax+2], 0
.text:00401F0F                 jz      loc_4027AA
.text:00401F15
.text:00401F15 loc_401F15:                             ; CODE XREF: sub_401D50+1AD↑j
.text:00401F15                                         ; sub_401D50+A75↓j
.text:00401F15                 mov     [esp+5Ch+var_18], 0
.text:00401F1D                 mov     ecx, [ebp+14h]
.text:00401F20                 mov     [esp+5Ch+var_1C], 0
.text:00401F28                 mov     [esp+5Ch+var_20], 0
.text:00401F30                 mov     edi, ecx
.text:00401F32                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401F3A                 movzx   eax, byte ptr [ecx]
.text:00401F3D                 test    al, al
.text:00401F3F                 jz      short loc_401F5C
.text:00401F41                 cmp     al, 3Dh ; '='
.text:00401F43                 jz      short loc_401F5C
.text:00401F45                 lea     esi, [esi+0]
.text:00401F49                 lea     edi, [edi+0]
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401D50+20A↓j
.text:00401F50                 inc     edi
.text:00401F51                 movzx   eax, byte ptr [edi]
.text:00401F54                 test    al, al
.text:00401F56                 jz      short loc_401F5C
.text:00401F58                 cmp     al, 3Dh ; '='
.text:00401F5A                 jnz     short loc_401F50
.text:00401F5C
.text:00401F5C loc_401F5C:                             ; CODE XREF: sub_401D50+1EF↑j
.text:00401F5C                                         ; sub_401D50+1F3↑j ...
.text:00401F5C                 mov     [esp+5Ch+var_28], 0
.text:00401F64                 mov     esi, [esp+5Ch+arg_C]
.text:00401F68                 mov     ebx, [esi]
.text:00401F6A                 test    ebx, ebx
.text:00401F6C                 mov     edx, ebx
.text:00401F6E                 jz      loc_402190
.text:00401F74                 lea     esi, [esi+0]
.text:00401F7A                 lea     edi, [edi+0]
.text:00401F80
.text:00401F80 loc_401F80:                             ; CODE XREF: sub_401D50+25E↓j
.text:00401F80                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401F84                 mov     ebx, edi
.text:00401F86                 sub     ebx, ecx
.text:00401F88                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401F8C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401F8F                 call    strncmp
.text:00401F94                 test    eax, eax
.text:00401F96                 jz      loc_402726
.text:00401F9C
.text:00401F9C loc_401F9C:                             ; CODE XREF: sub_401D50+A0F↓j
.text:00401F9C                                         ; sub_401D50+A24↓j ...
.text:00401F9C                 inc     [esp+5Ch+var_28]
.text:00401FA0                 add     esi, 10h
.text:00401FA3                 mov     ecx, [esi]
.text:00401FA5                 test    ecx, ecx
.text:00401FA7                 mov     edx, ecx
.text:00401FA9                 jz      short loc_401FB0
.text:00401FAB                 mov     ecx, [ebp+14h]
.text:00401FAE                 jmp     short loc_401F80
.text:00401FB0 ; ---------------------------------------------------------------------------
.text:00401FB0
.text:00401FB0 loc_401FB0:                             ; CODE XREF: sub_401D50+259↑j
.text:00401FB0                                         ; sub_401D50+A55↓j
.text:00401FB0                 mov     esi, [esp+5Ch+var_20]
.text:00401FB4                 test    esi, esi
.text:00401FB6                 jz      short loc_401FC4
.text:00401FB8                 mov     edx, [esp+5Ch+var_1C]
.text:00401FBC                 test    edx, edx
.text:00401FBE                 jz      loc_4026D0
.text:00401FC4
.text:00401FC4 loc_401FC4:                             ; CODE XREF: sub_401D50+266↑j
.text:00401FC4                 mov     eax, [esp+5Ch+var_18]
.text:00401FC8                 test    eax, eax
.text:00401FCA                 jz      loc_402190
.text:00401FD0                 mov     ecx, [ebp+0]
.text:00401FD3                 lea     eax, [ecx+1]
.text:00401FD6                 mov     [ebp+0], eax
.text:00401FD9                 cmp     byte ptr [edi], 0
.text:00401FDC                 jz      loc_4020F0
.text:00401FE2                 mov     ecx, [esp+5Ch+var_18]
.text:00401FE6                 mov     esi, [ecx+4]
.text:00401FE9                 test    esi, esi
.text:00401FEB                 jz      short loc_402036
.text:00401FED                 lea     ebx, [edi+1]
.text:00401FF0                 mov     [ebp+0Ch], ebx
.text:00401FF3
.text:00401FF3 loc_401FF3:                             ; CODE XREF: sub_401D50+3A8↓j
.text:00401FF3                                         ; sub_401D50+3C4↓j
.text:00401FF3                 mov     ebx, [ebp+14h]
.text:00401FF6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401FF9                 call    strlen
.text:00401FFE                 add     [ebp+14h], eax
.text:00402001                 mov     esi, [esp+5Ch+arg_10]
.text:00402005                 test    esi, esi
.text:00402007                 jz      short loc_402013
.text:00402009                 mov     ebp, [esp+5Ch+var_24]
.text:0040200D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402011                 mov     [ecx], ebp
.text:00402013
.text:00402013 loc_402013:                             ; CODE XREF: sub_401D50+2B7↑j
.text:00402013                 mov     eax, [esp+5Ch+var_18]
.text:00402017                 mov     ecx, [eax+8]
.text:0040201A                 test    ecx, ecx
.text:0040201C                 jnz     short loc_40202A
.text:0040201E                 mov     ecx, [esp+5Ch+var_18]
.text:00402022
.text:00402022 loc_402022:                             ; CODE XREF: sub_401D50+723↓j
.text:00402022                 mov     eax, [ecx+0Ch]
.text:00402025                 jmp     loc_401EA7
.text:0040202A ; ---------------------------------------------------------------------------
.text:0040202A
.text:0040202A loc_40202A:                             ; CODE XREF: sub_401D50+2CC↑j
.text:0040202A                                         ; sub_401D50+719↓j
.text:0040202A                 mov     esi, [eax+0Ch]
.text:0040202D                 xor     eax, eax
.text:0040202F                 mov     [ecx], esi
.text:00402031                 jmp     loc_401EA7
.text:00402036 ; ---------------------------------------------------------------------------
.text:00402036
.text:00402036 loc_402036:                             ; CODE XREF: sub_401D50+29B↑j
.text:00402036                 mov     edi, [esp+5Ch+var_14]
.text:0040203A                 test    edi, edi
.text:0040203C                 jz      short loc_402090
.text:0040203E                 mov     esi, [esp+5Ch+arg_4]
.text:00402042                 mov     edx, [esi+eax*4-4]
.text:00402046                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040204A                 jz      short loc_4020B2
.text:0040204C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402053                 call    ds:libintl_gettext
.text:00402059                 mov     edx, [esp+5Ch+var_18]
.text:0040205D                 mov     edi, [edx]
.text:0040205F                 mov     [esp+5Ch+var_4C], edi
.text:00402063                 mov     ebx, [ebp+0]
.text:00402066                 mov     edi, [esp+5Ch+arg_4]
.text:0040206A                 mov     ecx, [edi+ebx*4-4]
.text:0040206E                 movsx   esi, byte ptr [ecx]
.text:00402071                 mov     ecx, ds:_iob
.text:00402077                 add     ecx, 40h ; '@'
.text:0040207A                 mov     [esp+5Ch+var_50], esi
.text:0040207E                 mov     ebx, [edi]
.text:00402080                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402084                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402087                 mov     [esp+5Ch+MaxCount], ebx
.text:0040208B                 call    fprintf
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401D50+2EC↑j
.text:00402090                                         ; sub_401D50+398↓j
.text:00402090                 mov     ecx, [ebp+14h]
.text:00402093                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402096                 call    strlen
.text:0040209B                 add     [ebp+14h], eax
.text:0040209E                 mov     eax, [esp+5Ch+var_18]
.text:004020A2                 mov     esi, [eax+0Ch]
.text:004020A5                 mov     [ebp+8], esi
.text:004020A8
.text:004020A8 loc_4020A8:                             ; CODE XREF: sub_401D50+4E5↓j
.text:004020A8                                         ; sub_401D50+73E↓j ...
.text:004020A8                 mov     eax, 3Fh ; '?'
.text:004020AD                 jmp     loc_401EA7
.text:004020B2 ; ---------------------------------------------------------------------------
.text:004020B2
.text:004020B2 loc_4020B2:                             ; CODE XREF: sub_401D50+2FA↑j
.text:004020B2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004020B9                 call    ds:libintl_gettext
.text:004020BF                 mov     edx, [esp+5Ch+var_18]
.text:004020C3                 mov     edi, [esp+5Ch+arg_4]
.text:004020C7                 mov     ecx, ds:_iob
.text:004020CD                 mov     esi, [edx]
.text:004020CF                 add     ecx, 40h ; '@'
.text:004020D2                 mov     [esp+5Ch+var_50], esi
.text:004020D6                 mov     ebx, [edi]
.text:004020D8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004020DC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004020DF                 mov     [esp+5Ch+MaxCount], ebx
.text:004020E3                 call    fprintf
.text:004020E8                 jmp     short loc_402090
.text:004020E8 ; ---------------------------------------------------------------------------
.text:004020EA                 align 10h
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401D50+28C↑j
.text:004020F0                 mov     ebx, [esp+5Ch+var_18]
.text:004020F4                 cmp     dword ptr [ebx+4], 1
.text:004020F8                 jnz     loc_401FF3
.text:004020FE                 cmp     eax, [esp+5Ch+arg_0]
.text:00402102                 jge     short loc_402119
.text:00402104                 mov     ebx, [esp+5Ch+arg_4]
.text:00402108                 lea     edi, [ecx+2]
.text:0040210B                 mov     [ebp+0], edi
.text:0040210E                 mov     esi, [ebx+eax*4]
.text:00402111                 mov     [ebp+0Ch], esi
.text:00402114                 jmp     loc_401FF3
.text:00402119 ; ---------------------------------------------------------------------------
.text:00402119
.text:00402119 loc_402119:                             ; CODE XREF: sub_401D50+3B2↑j
.text:00402119                 mov     edx, [esp+5Ch+var_14]
.text:0040211D                 test    edx, edx
.text:0040211F                 jnz     short loc_402150
.text:00402121
.text:00402121 loc_402121:                             ; CODE XREF: sub_401D50+437↓j
.text:00402121                 mov     edx, [ebp+14h]
.text:00402124                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402127                 call    strlen
.text:0040212C                 add     [ebp+14h], eax
.text:0040212F                 mov     eax, [esp+5Ch+var_18]
.text:00402133                 mov     edi, [eax+0Ch]
.text:00402136                 mov     [ebp+8], edi
.text:00402139
.text:00402139 loc_402139:                             ; CODE XREF: sub_401D50+7C2↓j
.text:00402139                 mov     ebp, [esp+5Ch+Str]
.text:0040213D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402141                 setnz   bl
.text:00402144                 movzx   esi, bl
.text:00402147                 lea     eax, [esi+esi*4+3Ah]
.text:0040214B                 jmp     loc_401EA7
.text:00402150 ; ---------------------------------------------------------------------------
.text:00402150
.text:00402150 loc_402150:                             ; CODE XREF: sub_401D50+3CF↑j
.text:00402150                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402157                 call    ds:libintl_gettext
.text:0040215D                 mov     ecx, [ebp+0]
.text:00402160                 mov     esi, [esp+5Ch+arg_4]
.text:00402164                 mov     ebx, [esi+ecx*4-4]
.text:00402168                 mov     ecx, ds:_iob
.text:0040216E                 mov     [esp+5Ch+var_50], ebx
.text:00402172                 mov     edi, [esi]
.text:00402174                 add     ecx, 40h ; '@'
.text:00402177                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040217B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040217E                 mov     [esp+5Ch+MaxCount], edi
.text:00402182                 call    fprintf
.text:00402187                 jmp     short loc_402121
.text:00402187 ; ---------------------------------------------------------------------------
.text:00402189                 align 10h
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401D50+21E↑j
.text:00402190                                         ; sub_401D50+27A↑j
.text:00402190                 mov     eax, [esp+5Ch+arg_14]
.text:00402194                 test    eax, eax
.text:00402196                 jz      short loc_4021C6
.text:00402198                 mov     ebx, [ebp+0]
.text:0040219B                 mov     esi, [esp+5Ch+arg_4]
.text:0040219F                 mov     edi, [esi+ebx*4]
.text:004021A2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004021A6                 jz      short loc_4021C9
.text:004021A8                 mov     ecx, [ebp+14h]
.text:004021AB                 mov     edx, [esp+5Ch+Str]
.text:004021AF                 movsx   ebx, byte ptr [ecx]
.text:004021B2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021B5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004021B9                 call    strchr
.text:004021BE                 test    eax, eax
.text:004021C0                 jnz     loc_402270
.text:004021C6
.text:004021C6 loc_4021C6:                             ; CODE XREF: sub_401D50+446↑j
.text:004021C6                 mov     ebx, [ebp+0]
.text:004021C9
.text:004021C9 loc_4021C9:                             ; CODE XREF: sub_401D50+456↑j
.text:004021C9                 mov     eax, [esp+5Ch+var_14]
.text:004021CD                 test    eax, eax
.text:004021CF                 jz      short loc_402221
.text:004021D1                 mov     esi, [esp+5Ch+arg_4]
.text:004021D5                 mov     edi, [esi+ebx*4]
.text:004021D8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004021DC                 jz      short loc_40223A
.text:004021DE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004021E5                 call    ds:libintl_gettext
.text:004021EB                 mov     edi, [ebp+14h]
.text:004021EE                 mov     [esp+5Ch+var_4C], edi
.text:004021F2                 mov     ebx, [ebp+0]
.text:004021F5                 mov     edi, [esp+5Ch+arg_4]
.text:004021F9                 mov     esi, [edi+ebx*4]
.text:004021FC                 movsx   ecx, byte ptr [esi]
.text:004021FF                 mov     esi, ds:_iob
.text:00402205                 add     esi, 40h ; '@'
.text:00402208                 mov     [esp+5Ch+var_50], ecx
.text:0040220C                 mov     ebx, [edi]
.text:0040220E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402212                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402215                 mov     [esp+5Ch+MaxCount], ebx
.text:00402219                 call    fprintf
.text:0040221E
.text:0040221E loc_40221E:                             ; CODE XREF: sub_401D50+51D↓j
.text:0040221E                 mov     ebx, [ebp+0]
.text:00402221
.text:00402221 loc_402221:                             ; CODE XREF: sub_401D50+47F↑j
.text:00402221                 mov     dword ptr [ebp+14h], offset dword_401C00
.text:00402228                 lea     edx, [ebx+1]
.text:0040222B                 mov     [ebp+0], edx
.text:0040222E
.text:0040222E loc_40222E:                             ; CODE XREF: sub_401D50+999↓j
.text:0040222E                 mov     dword ptr [ebp+8], 0
.text:00402235                 jmp     loc_4020A8
.text:0040223A ; ---------------------------------------------------------------------------
.text:0040223A
.text:0040223A loc_40223A:                             ; CODE XREF: sub_401D50+48C↑j
.text:0040223A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402241                 call    ds:libintl_gettext
.text:00402247                 mov     ecx, [ebp+14h]
.text:0040224A                 mov     edi, [esp+5Ch+arg_4]
.text:0040224E                 mov     edx, ds:_iob
.text:00402254                 mov     [esp+5Ch+var_50], ecx
.text:00402258                 mov     ebx, [edi]
.text:0040225A                 add     edx, 40h ; '@'
.text:0040225D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402261                 mov     [esp+5Ch+MaxCount], ebx
.text:00402265                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402268                 call    fprintf
.text:0040226D                 jmp     short loc_40221E
.text:0040226D ; ---------------------------------------------------------------------------
.text:0040226F                 align 10h
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_401D50+196↑j
.text:00402270                                         ; sub_401D50+1B5↑j ...
.text:00402270                 mov     esi, [ebp+14h]
.text:00402273                 movzx   ebx, byte ptr [esi]
.text:00402276                 inc     esi
.text:00402277                 mov     [ebp+14h], esi
.text:0040227A                 mov     ecx, [esp+5Ch+Str]
.text:0040227E                 movsx   esi, bl
.text:00402281                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402285                 mov     edi, esi
.text:00402287                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040228A                 call    strchr
.text:0040228F                 mov     ecx, [ebp+14h]
.text:00402292                 cmp     byte ptr [ecx], 0
.text:00402295                 jnz     short loc_40229A
.text:00402297                 inc     dword ptr [ebp+0]
.text:0040229A
.text:0040229A loc_40229A:                             ; CODE XREF: sub_401D50+545↑j
.text:0040229A                 test    eax, eax
.text:0040229C                 jz      loc_402680
.text:004022A2                 cmp     bl, 3Ah ; ':'
.text:004022A5                 jz      loc_402680
.text:004022AB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004022AE                 jz      loc_402366
.text:004022B4                 movzx   edx, byte ptr [eax+1]
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_401D50+61D↓j
.text:004022B8                 cmp     dl, 3Ah ; ':'
.text:004022BB                 jz      short loc_4022C4
.text:004022BD
.text:004022BD loc_4022BD:                             ; CODE XREF: sub_401D50+590↓j
.text:004022BD                 mov     eax, esi
.text:004022BF                 jmp     loc_401EA7
.text:004022C4 ; ---------------------------------------------------------------------------
.text:004022C4
.text:004022C4 loc_4022C4:                             ; CODE XREF: sub_401D50+56B↑j
.text:004022C4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004022C8                 jz      loc_402351
.text:004022CE                 cmp     byte ptr [ecx], 0
.text:004022D1                 jz      short loc_4022E2
.text:004022D3
.text:004022D3 loc_4022D3:                             ; CODE XREF: sub_401D50+604↓j
.text:004022D3                 inc     dword ptr [ebp+0]
.text:004022D6                 mov     [ebp+0Ch], ecx
.text:004022D9
.text:004022D9 loc_4022D9:                             ; CODE XREF: sub_401D50+5AB↓j
.text:004022D9                                         ; sub_401D50+5C6↓j ...
.text:004022D9                 mov     dword ptr [ebp+14h], 0
.text:004022E0                 jmp     short loc_4022BD
.text:004022E2 ; ---------------------------------------------------------------------------
.text:004022E2
.text:004022E2 loc_4022E2:                             ; CODE XREF: sub_401D50+581↑j
.text:004022E2                 mov     ecx, [ebp+0]
.text:004022E5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004022E9                 jz      short loc_4022FD
.text:004022EB                 mov     eax, [esp+5Ch+arg_4]
.text:004022EF                 lea     edx, [ecx+1]
.text:004022F2                 mov     [ebp+0], edx
.text:004022F5                 mov     ebx, [eax+ecx*4]
.text:004022F8                 mov     [ebp+0Ch], ebx
.text:004022FB                 jmp     short loc_4022D9
.text:004022FD ; ---------------------------------------------------------------------------
.text:004022FD
.text:004022FD loc_4022FD:                             ; CODE XREF: sub_401D50+599↑j
.text:004022FD                 mov     ecx, [esp+5Ch+var_14]
.text:00402301                 test    ecx, ecx
.text:00402303                 jnz     short loc_40231F
.text:00402305
.text:00402305 loc_402305:                             ; CODE XREF: sub_401D50+5FF↓j
.text:00402305                 mov     [ebp+8], edi
.text:00402308                 mov     edi, [esp+5Ch+Str]
.text:0040230C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040230F                 jz      short loc_402318
.text:00402311                 mov     esi, 3Fh ; '?'
.text:00402316                 jmp     short loc_4022D9
.text:00402318 ; ---------------------------------------------------------------------------
.text:00402318
.text:00402318 loc_402318:                             ; CODE XREF: sub_401D50+5BF↑j
.text:00402318                 mov     esi, 3Ah ; ':'
.text:0040231D                 jmp     short loc_4022D9
.text:0040231F ; ---------------------------------------------------------------------------
.text:0040231F
.text:0040231F loc_40231F:                             ; CODE XREF: sub_401D50+5B3↑j
.text:0040231F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402326                 call    ds:libintl_gettext
.text:0040232C                 mov     [esp+5Ch+var_50], edi
.text:00402330                 mov     ebx, [esp+5Ch+arg_4]
.text:00402334                 mov     edx, ds:_iob
.text:0040233A                 mov     esi, [ebx]
.text:0040233C                 add     edx, 40h ; '@'
.text:0040233F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402343                 mov     [esp+5Ch+MaxCount], esi
.text:00402347                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040234A                 call    fprintf
.text:0040234F                 jmp     short loc_402305
.text:00402351 ; ---------------------------------------------------------------------------
.text:00402351
.text:00402351 loc_402351:                             ; CODE XREF: sub_401D50+578↑j
.text:00402351                 cmp     byte ptr [ecx], 0
.text:00402354                 jnz     loc_4022D3
.text:0040235A                 mov     dword ptr [ebp+0Ch], 0
.text:00402361                 jmp     loc_4022D9
.text:00402366 ; ---------------------------------------------------------------------------
.text:00402366
.text:00402366 loc_402366:                             ; CODE XREF: sub_401D50+55E↑j
.text:00402366                 movzx   edx, byte ptr [eax+1]
.text:0040236A                 cmp     dl, 3Bh ; ';'
.text:0040236D                 jnz     loc_4022B8
.text:00402373                 mov     [esp+5Ch+var_2C], 0
.text:0040237B                 mov     [esp+5Ch+var_30], 0
.text:00402383                 mov     [esp+5Ch+var_34], 0
.text:0040238B                 mov     [esp+5Ch+var_38], 0
.text:00402393                 cmp     byte ptr [ecx], 0
.text:00402396                 jz      loc_40260B
.text:0040239C                 inc     dword ptr [ebp+0]
.text:0040239F                 mov     [ebp+0Ch], ecx
.text:004023A2
.text:004023A2 loc_4023A2:                             ; CODE XREF: sub_401D50+8D4↓j
.text:004023A2                 mov     edi, [ebp+0Ch]
.text:004023A5                 mov     [ebp+14h], edi
.text:004023A8                 movzx   eax, byte ptr [edi]
.text:004023AB                 test    al, al
.text:004023AD                 jz      short loc_4023BF
.text:004023AF                 cmp     al, 3Dh ; '='
.text:004023B1                 jz      short loc_4023BF
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_401D50+66D↓j
.text:004023B3                 inc     edi
.text:004023B4                 movzx   eax, byte ptr [edi]
.text:004023B7                 test    al, al
.text:004023B9                 jz      short loc_4023BF
.text:004023BB                 cmp     al, 3Dh ; '='
.text:004023BD                 jnz     short loc_4023B3
.text:004023BF
.text:004023BF loc_4023BF:                             ; CODE XREF: sub_401D50+65D↑j
.text:004023BF                                         ; sub_401D50+661↑j ...
.text:004023BF                 mov     [esp+5Ch+var_3C], 0
.text:004023C7                 mov     esi, [esp+5Ch+arg_C]
.text:004023CB                 mov     eax, [esi]
.text:004023CD                 test    eax, eax
.text:004023CF                 jz      loc_402550
.text:004023D5                 mov     ecx, eax
.text:004023D7
.text:004023D7 loc_4023D7:                             ; CODE XREF: sub_401D50+6B3↓j
.text:004023D7                 mov     ebx, [ebp+14h]
.text:004023DA                 mov     eax, edi
.text:004023DC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004023DF                 sub     eax, ebx
.text:004023E1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004023E5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004023E9                 call    strncmp
.text:004023EE                 test    eax, eax
.text:004023F0                 jz      loc_4025B7
.text:004023F6
.text:004023F6 loc_4023F6:                             ; CODE XREF: sub_401D50+88C↓j
.text:004023F6                                         ; sub_401D50+89D↓j
.text:004023F6                 inc     [esp+5Ch+var_3C]
.text:004023FA                 add     esi, 10h
.text:004023FD                 mov     edx, [esi]
.text:004023FF                 test    edx, edx
.text:00402401                 mov     ecx, edx
.text:00402403                 jnz     short loc_4023D7
.text:00402405
.text:00402405 loc_402405:                             ; CODE XREF: sub_401D50+8B6↓j
.text:00402405                 mov     esi, [esp+5Ch+var_34]
.text:00402409                 test    esi, esi
.text:0040240B                 jz      short loc_402419
.text:0040240D                 mov     ebx, [esp+5Ch+var_30]
.text:00402411                 test    ebx, ebx
.text:00402413                 jz      loc_402561
.text:00402419
.text:00402419 loc_402419:                             ; CODE XREF: sub_401D50+6BB↑j
.text:00402419                 mov     esi, [esp+5Ch+var_2C]
.text:0040241D                 test    esi, esi
.text:0040241F                 jz      loc_402550
.text:00402425                 cmp     byte ptr [edi], 0
.text:00402428                 jz      loc_4024D0
.text:0040242E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402432                 mov     ebx, [ecx+4]
.text:00402435                 test    ebx, ebx
.text:00402437                 jz      short loc_402478
.text:00402439                 lea     edx, [edi+1]
.text:0040243C                 mov     [ebp+0Ch], edx
.text:0040243F
.text:0040243F loc_40243F:                             ; CODE XREF: sub_401D50+788↓j
.text:0040243F                                         ; sub_401D50+7A7↓j
.text:0040243F                 mov     edi, [ebp+14h]
.text:00402442                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402445                 call    strlen
.text:0040244A                 add     [ebp+14h], eax
.text:0040244D                 mov     eax, [esp+5Ch+arg_10]
.text:00402451                 test    eax, eax
.text:00402453                 jz      short loc_402460
.text:00402455                 mov     edx, [esp+5Ch+var_38]
.text:00402459                 mov     ebp, [esp+5Ch+arg_10]
.text:0040245D                 mov     [ebp+0], edx
.text:00402460
.text:00402460 loc_402460:                             ; CODE XREF: sub_401D50+703↑j
.text:00402460                 mov     eax, [esp+5Ch+var_2C]
.text:00402464                 mov     ecx, [eax+8]
.text:00402467                 test    ecx, ecx
.text:00402469                 jnz     loc_40202A
.text:0040246F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402473                 jmp     loc_402022
.text:00402478 ; ---------------------------------------------------------------------------
.text:00402478
.text:00402478 loc_402478:                             ; CODE XREF: sub_401D50+6E7↑j
.text:00402478                 mov     eax, [esp+5Ch+var_14]
.text:0040247C                 test    eax, eax
.text:0040247E                 jnz     short loc_402493
.text:00402480
.text:00402480 loc_402480:                             ; CODE XREF: sub_401D50+779↓j
.text:00402480                 mov     ecx, [ebp+14h]
.text:00402483                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402486                 call    strlen
.text:0040248B                 add     [ebp+14h], eax
.text:0040248E                 jmp     loc_4020A8
.text:00402493 ; ---------------------------------------------------------------------------
.text:00402493
.text:00402493 loc_402493:                             ; CODE XREF: sub_401D50+72E↑j
.text:00402493                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040249A                 call    ds:libintl_gettext
.text:004024A0                 mov     edx, [esp+5Ch+var_2C]
.text:004024A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004024A8                 mov     edi, [edx]
.text:004024AA                 mov     [esp+5Ch+var_50], edi
.text:004024AE                 mov     edi, ds:_iob
.text:004024B4                 mov     esi, [ebx]
.text:004024B6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024BA                 add     edi, 40h ; '@'
.text:004024BD                 mov     [esp+5Ch+MaxCount], esi
.text:004024C1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004024C4                 call    fprintf
.text:004024C9                 jmp     short loc_402480
.text:004024C9 ; ---------------------------------------------------------------------------
.text:004024CB                 align 10h
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_401D50+6D8↑j
.text:004024D0                 mov     esi, [esp+5Ch+var_2C]
.text:004024D4                 cmp     dword ptr [esi+4], 1
.text:004024D8                 jnz     loc_40243F
.text:004024DE                 mov     ecx, [ebp+0]
.text:004024E1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004024E5                 jge     short loc_4024FC
.text:004024E7                 mov     eax, [esp+5Ch+arg_4]
.text:004024EB                 lea     ebx, [ecx+1]
.text:004024EE                 mov     [ebp+0], ebx
.text:004024F1                 mov     edi, [eax+ecx*4]
.text:004024F4                 mov     [ebp+0Ch], edi
.text:004024F7                 jmp     loc_40243F
.text:004024FC ; ---------------------------------------------------------------------------
.text:004024FC
.text:004024FC loc_4024FC:                             ; CODE XREF: sub_401D50+795↑j
.text:004024FC                 mov     edx, [esp+5Ch+var_14]
.text:00402500                 test    edx, edx
.text:00402502                 jnz     short loc_402517
.text:00402504
.text:00402504 loc_402504:                             ; CODE XREF: sub_401D50+7FE↓j
.text:00402504                 mov     edx, [ebp+14h]
.text:00402507                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040250A                 call    strlen
.text:0040250F                 add     [ebp+14h], eax
.text:00402512                 jmp     loc_402139
.text:00402517 ; ---------------------------------------------------------------------------
.text:00402517
.text:00402517 loc_402517:                             ; CODE XREF: sub_401D50+7B2↑j
.text:00402517                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040251E                 call    ds:libintl_gettext
.text:00402524                 mov     ecx, [ebp+0]
.text:00402527                 mov     ebx, [esp+5Ch+arg_4]
.text:0040252B                 mov     edi, [ebx+ecx*4-4]
.text:0040252F                 mov     ecx, ds:_iob
.text:00402535                 mov     [esp+5Ch+var_50], edi
.text:00402539                 mov     esi, [ebx]
.text:0040253B                 add     ecx, 40h ; '@'
.text:0040253E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402542                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402545                 mov     [esp+5Ch+MaxCount], esi
.text:00402549                 call    fprintf
.text:0040254E                 jmp     short loc_402504
.text:00402550 ; ---------------------------------------------------------------------------
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_401D50+67F↑j
.text:00402550                                         ; sub_401D50+6CF↑j
.text:00402550                 mov     dword ptr [ebp+14h], 0
.text:00402557                 mov     eax, 57h ; 'W'
.text:0040255C                 jmp     loc_401EA7
.text:00402561 ; ---------------------------------------------------------------------------
.text:00402561
.text:00402561 loc_402561:                             ; CODE XREF: sub_401D50+6C3↑j
.text:00402561                 mov     edi, [esp+5Ch+var_14]
.text:00402565                 test    edi, edi
.text:00402567                 jnz     short loc_40257F
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_401D50+865↓j
.text:00402569                 mov     edx, [ebp+14h]
.text:0040256C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040256F                 call    strlen
.text:00402574                 add     [ebp+14h], eax
.text:00402577                 inc     dword ptr [ebp+0]
.text:0040257A                 jmp     loc_4020A8
.text:0040257F ; ---------------------------------------------------------------------------
.text:0040257F
.text:0040257F loc_40257F:                             ; CODE XREF: sub_401D50+817↑j
.text:0040257F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402586                 call    ds:libintl_gettext
.text:0040258C                 mov     ecx, [ebp+0]
.text:0040258F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402593                 mov     edi, [ebx+ecx*4]
.text:00402596                 mov     ecx, ds:_iob
.text:0040259C                 mov     [esp+5Ch+var_50], edi
.text:004025A0                 mov     esi, [ebx]
.text:004025A2                 add     ecx, 40h ; '@'
.text:004025A5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025A9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004025AC                 mov     [esp+5Ch+MaxCount], esi
.text:004025B0                 call    fprintf
.text:004025B5                 jmp     short loc_402569
.text:004025B7 ; ---------------------------------------------------------------------------
.text:004025B7
.text:004025B7 loc_4025B7:                             ; CODE XREF: sub_401D50+6A0↑j
.text:004025B7                 mov     edx, [ebp+14h]
.text:004025BA                 mov     ebx, edi
.text:004025BC                 mov     ecx, [esi]
.text:004025BE                 sub     ebx, edx
.text:004025C0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004025C3                 call    strlen
.text:004025C8                 cmp     ebx, eax
.text:004025CA                 jz      short loc_4025F2
.text:004025CC                 mov     ebx, [esp+5Ch+var_2C]
.text:004025D0                 test    ebx, ebx
.text:004025D2                 jz      short loc_4025E1
.text:004025D4                 mov     [esp+5Ch+var_34], 1
.text:004025DC                 jmp     loc_4023F6
.text:004025E1 ; ---------------------------------------------------------------------------
.text:004025E1
.text:004025E1 loc_4025E1:                             ; CODE XREF: sub_401D50+882↑j
.text:004025E1                 mov     [esp+5Ch+var_2C], esi
.text:004025E5                 mov     ecx, [esp+5Ch+var_3C]
.text:004025E9                 mov     [esp+5Ch+var_38], ecx
.text:004025ED                 jmp     loc_4023F6
.text:004025F2 ; ---------------------------------------------------------------------------
.text:004025F2
.text:004025F2 loc_4025F2:                             ; CODE XREF: sub_401D50+87A↑j
.text:004025F2                 mov     [esp+5Ch+var_2C], esi
.text:004025F6                 mov     eax, [esp+5Ch+var_3C]
.text:004025FA                 mov     [esp+5Ch+var_30], 1
.text:00402602                 mov     [esp+5Ch+var_38], eax
.text:00402606                 jmp     loc_402405
.text:0040260B ; ---------------------------------------------------------------------------
.text:0040260B
.text:0040260B loc_40260B:                             ; CODE XREF: sub_401D50+646↑j
.text:0040260B                 mov     edx, [ebp+0]
.text:0040260E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402612                 jz      short loc_402629
.text:00402614                 mov     ebx, [esp+5Ch+arg_4]
.text:00402618                 lea     esi, [edx+1]
.text:0040261B                 mov     [ebp+0], esi
.text:0040261E                 mov     edi, [ebx+edx*4]
.text:00402621                 mov     [ebp+0Ch], edi
.text:00402624                 jmp     loc_4023A2
.text:00402629 ; ---------------------------------------------------------------------------
.text:00402629
.text:00402629 loc_402629:                             ; CODE XREF: sub_401D50+8C2↑j
.text:00402629                 mov     edi, [esp+5Ch+var_14]
.text:0040262D                 test    edi, edi
.text:0040262F                 jnz     short loc_40264C
.text:00402631
.text:00402631 loc_402631:                             ; CODE XREF: sub_401D50+92C↓j
.text:00402631                 mov     [ebp+8], esi
.text:00402634                 mov     ebp, [esp+5Ch+Str]
.text:00402638                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040263C                 jz      short loc_402648
.text:0040263E                 mov     bl, 3Fh ; '?'
.text:00402640
.text:00402640 loc_402640:                             ; CODE XREF: sub_401D50+8FA↓j
.text:00402640                 movsx   eax, bl
.text:00402643                 jmp     loc_401EA7
.text:00402648 ; ---------------------------------------------------------------------------
.text:00402648
.text:00402648 loc_402648:                             ; CODE XREF: sub_401D50+8EC↑j
.text:00402648                 mov     bl, 3Ah ; ':'
.text:0040264A                 jmp     short loc_402640
.text:0040264C ; ---------------------------------------------------------------------------
.text:0040264C
.text:0040264C loc_40264C:                             ; CODE XREF: sub_401D50+8DF↑j
.text:0040264C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402653                 call    ds:libintl_gettext
.text:00402659                 mov     [esp+5Ch+var_50], esi
.text:0040265D                 mov     edx, [esp+5Ch+arg_4]
.text:00402661                 mov     ecx, ds:_iob
.text:00402667                 mov     ebx, [edx]
.text:00402669                 add     ecx, 40h ; '@'
.text:0040266C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402670                 mov     [esp+5Ch+MaxCount], ebx
.text:00402674                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402677                 call    fprintf
.text:0040267C                 jmp     short loc_402631
.text:0040267C ; ---------------------------------------------------------------------------
.text:0040267E                 align 10h
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_401D50+54C↑j
.text:00402680                                         ; sub_401D50+555↑j
.text:00402680                 mov     eax, [esp+5Ch+var_14]
.text:00402684                 test    eax, eax
.text:00402686                 jz      short loc_4026BF
.text:00402688                 mov     ebx, [ebp+1Ch]
.text:0040268B                 test    ebx, ebx
.text:0040268D                 jz      short loc_4026C7
.text:0040268F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402696
.text:00402696 loc_402696:                             ; CODE XREF: sub_401D50+97E↓j
.text:00402696                 call    ds:libintl_gettext
.text:0040269C                 mov     [esp+5Ch+var_50], esi
.text:004026A0                 mov     ebx, [esp+5Ch+arg_4]
.text:004026A4                 mov     edx, ds:_iob
.text:004026AA                 mov     esi, [ebx]
.text:004026AC                 add     edx, 40h ; '@'
.text:004026AF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026B3                 mov     [esp+5Ch+MaxCount], esi
.text:004026B7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004026BA                 call    fprintf
.text:004026BF
.text:004026BF loc_4026BF:                             ; CODE XREF: sub_401D50+936↑j
.text:004026BF                 mov     [ebp+8], edi
.text:004026C2                 jmp     loc_4020A8
.text:004026C7 ; ---------------------------------------------------------------------------
.text:004026C7
.text:004026C7 loc_4026C7:                             ; CODE XREF: sub_401D50+93D↑j
.text:004026C7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004026CE                 jmp     short loc_402696
.text:004026D0 ; ---------------------------------------------------------------------------
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_401D50+26E↑j
.text:004026D0                 mov     edi, [esp+5Ch+var_14]
.text:004026D4                 test    edi, edi
.text:004026D6                 jnz     short loc_4026EE
.text:004026D8
.text:004026D8 loc_4026D8:                             ; CODE XREF: sub_401D50+9D4↓j
.text:004026D8                 mov     edx, [ebp+14h]
.text:004026DB                 mov     [esp+5Ch+Str1], edx ; Str
.text:004026DE                 call    strlen
.text:004026E3                 add     [ebp+14h], eax
.text:004026E6                 inc     dword ptr [ebp+0]
.text:004026E9                 jmp     loc_40222E
.text:004026EE ; ---------------------------------------------------------------------------
.text:004026EE
.text:004026EE loc_4026EE:                             ; CODE XREF: sub_401D50+986↑j
.text:004026EE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004026F5                 call    ds:libintl_gettext
.text:004026FB                 mov     ebx, [ebp+0]
.text:004026FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402702                 mov     ecx, [edi+ebx*4]
.text:00402705                 mov     ebx, ds:_iob
.text:0040270B                 mov     [esp+5Ch+var_50], ecx
.text:0040270F                 mov     esi, [edi]
.text:00402711                 add     ebx, 40h ; '@'
.text:00402714                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402718                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040271B                 mov     [esp+5Ch+MaxCount], esi
.text:0040271F                 call    fprintf
.text:00402724                 jmp     short loc_4026D8
.text:00402726 ; ---------------------------------------------------------------------------
.text:00402726
.text:00402726 loc_402726:                             ; CODE XREF: sub_401D50+246↑j
.text:00402726                 mov     ecx, [ebp+14h]
.text:00402729                 mov     ebx, edi
.text:0040272B                 mov     edx, [esi]
.text:0040272D                 sub     ebx, ecx
.text:0040272F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402732                 call    strlen
.text:00402737                 cmp     ebx, eax
.text:00402739                 jz      short loc_402791
.text:0040273B                 mov     ebx, [esp+5Ch+var_18]
.text:0040273F                 test    ebx, ebx
.text:00402741                 jz      short loc_402780
.text:00402743                 mov     edx, [esp+5Ch+arg_14]
.text:00402747                 test    edx, edx
.text:00402749                 jnz     short loc_402757
.text:0040274B                 mov     ecx, [esp+5Ch+var_18]
.text:0040274F                 mov     ebx, [esi+4]
.text:00402752                 cmp     [ecx+4], ebx
.text:00402755                 jz      short loc_402764
.text:00402757
.text:00402757 loc_402757:                             ; CODE XREF: sub_401D50+9F9↑j
.text:00402757                                         ; sub_401D50+A1A↓j ...
.text:00402757                 mov     [esp+5Ch+var_20], 1
.text:0040275F                 jmp     loc_401F9C
.text:00402764 ; ---------------------------------------------------------------------------
.text:00402764
.text:00402764 loc_402764:                             ; CODE XREF: sub_401D50+A05↑j
.text:00402764                 mov     edx, [esi+8]
.text:00402767                 cmp     [ecx+8], edx
.text:0040276A                 jnz     short loc_402757
.text:0040276C                 mov     ebx, [esi+0Ch]
.text:0040276F                 cmp     [ecx+0Ch], ebx
.text:00402772                 jnz     short loc_402757
.text:00402774                 jmp     loc_401F9C
.text:00402774 ; ---------------------------------------------------------------------------
.text:00402779                 align 10h
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_401D50+9F1↑j
.text:00402780                 mov     [esp+5Ch+var_18], esi
.text:00402784                 mov     eax, [esp+5Ch+var_28]
.text:00402788                 mov     [esp+5Ch+var_24], eax
.text:0040278C                 jmp     loc_401F9C
.text:00402791 ; ---------------------------------------------------------------------------
.text:00402791
.text:00402791 loc_402791:                             ; CODE XREF: sub_401D50+9E9↑j
.text:00402791                 mov     [esp+5Ch+var_18], esi
.text:00402795                 mov     ecx, [esp+5Ch+var_28]
.text:00402799                 mov     [esp+5Ch+var_1C], 1
.text:004027A1                 mov     [esp+5Ch+var_24], ecx
.text:004027A5                 jmp     loc_401FB0
.text:004027AA ; ---------------------------------------------------------------------------
.text:004027AA
.text:004027AA loc_4027AA:                             ; CODE XREF: sub_401D50+1BF↑j
.text:004027AA                 mov     eax, [esp+5Ch+Str]
.text:004027AE                 movsx   esi, dl
.text:004027B1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004027B5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004027B8                 call    strchr
.text:004027BD                 test    eax, eax
.text:004027BF                 jnz     loc_402270
.text:004027C5                 jmp     loc_401F15
.text:004027CA ; ---------------------------------------------------------------------------
.text:004027CA
.text:004027CA loc_4027CA:                             ; CODE XREF: sub_401D50+17C↑j
.text:004027CA                 mov     ecx, 1
.text:004027CF                 jmp     loc_401ED2
.text:004027D4 ; ---------------------------------------------------------------------------
.text:004027D4
.text:004027D4 loc_4027D4:                             ; CODE XREF: sub_401D50+D4↑j
.text:004027D4                                         ; sub_401D50+130↑j
.text:004027D4                 mov     eax, [ebp+20h]
.text:004027D7                 cmp     eax, [ebp+24h]
.text:004027DA                 jz      loc_401EB0
.text:004027E0                 mov     [ebp+0], eax
.text:004027E3                 jmp     loc_401EB0
.text:004027E8 ; ---------------------------------------------------------------------------
.text:004027E8
.text:004027E8 loc_4027E8:                             ; CODE XREF: sub_401D50+FE↑j
.text:004027E8                 mov     [ebp+20h], eax
.text:004027EB                 jmp     loc_401E70
.text:004027F0 ; ---------------------------------------------------------------------------
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_401D50+CA↑j
.text:004027F0                 mov     edx, [ebp+20h]
.text:004027F3                 mov     eax, [ebp+24h]
.text:004027F6                 cmp     edx, eax
.text:004027F8                 jz      short loc_402870
.text:004027FA                 cmp     eax, ebx
.text:004027FC                 jz      short loc_402811
.text:004027FE                 mov     [esp+5Ch+Str2], ebp
.text:00402802                 mov     ebx, [esp+5Ch+arg_4]
.text:00402806                 mov     [esp+5Ch+Str1], ebx
.text:00402809                 call    sub_402A00
.text:0040280E                 mov     ebx, [ebp+0]
.text:00402811
.text:00402811 loc_402811:                             ; CODE XREF: sub_401D50+AAC↑j
.text:00402811                                         ; sub_401D50+B22↓j ...
.text:00402811                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402815                 jge     short loc_402860
.text:00402817                 mov     esi, [esp+5Ch+arg_4]
.text:0040281B                 mov     eax, [esi+ebx*4]
.text:0040281E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402821                 jz      short loc_402868
.text:00402823                 lea     esi, [esi+0]
.text:00402829                 lea     edi, [edi+0]
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_401D50+AFC↓j
.text:00402830                                         ; sub_401D50+B1C↓j
.text:00402830                 lea     eax, [ebx+1]
.text:00402833                 mov     ebx, eax
.text:00402835                 mov     [ebp+0], eax
.text:00402838                 cmp     eax, [esp+5Ch+arg_0]
.text:0040283C                 jge     short loc_402860
.text:0040283E                 mov     edi, [esp+5Ch+arg_4]
.text:00402842                 mov     edx, [edi+eax*4]
.text:00402845                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402848                 jz      short loc_402850
.text:0040284A
.text:0040284A loc_40284A:                             ; CODE XREF: sub_401D50+B04↓j
.text:0040284A                 mov     ebx, eax
.text:0040284C                 jmp     short loc_402830
.text:0040284C ; ---------------------------------------------------------------------------
.text:0040284E                 align 10h
.text:00402850
.text:00402850 loc_402850:                             ; CODE XREF: sub_401D50+AF8↑j
.text:00402850                 cmp     byte ptr [edx+1], 0
.text:00402854                 jz      short loc_40284A
.text:00402856                 lea     esi, [esi+0]
.text:00402859                 lea     edi, [edi+0]
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_401D50+AC5↑j
.text:00402860                                         ; sub_401D50+AEC↑j ...
.text:00402860                 mov     [ebp+24h], ebx
.text:00402863                 jmp     loc_401E20
.text:00402868 ; ---------------------------------------------------------------------------
.text:00402868
.text:00402868 loc_402868:                             ; CODE XREF: sub_401D50+AD1↑j
.text:00402868                 cmp     byte ptr [eax+1], 0
.text:0040286C                 jz      short loc_402830
.text:0040286E                 jmp     short loc_402860
.text:00402870 ; ---------------------------------------------------------------------------
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_401D50+AA8↑j
.text:00402870                 cmp     edx, ebx
.text:00402872                 jz      short loc_402811
.text:00402874                 mov     [ebp+20h], ebx
.text:00402877                 jmp     short loc_402811
.text:00402879 ; ---------------------------------------------------------------------------
.text:00402879
.text:00402879 loc_402879:                             ; CODE XREF: sub_401D50+88↑j
.text:00402879                 mov     dword ptr [ebp+18h], 0
.text:00402880                 mov     esi, [esp+5Ch+Str]
.text:00402884
.text:00402884 loc_402884:                             ; CODE XREF: sub_401D50+B49↓j
.text:00402884                 inc     esi
.text:00402885                 jmp     loc_401DE8
.text:00402885 ; ---------------------------------------------------------------------------
.text:0040288A                 align 10h
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_401D50+80↑j
.text:00402890                 mov     dword ptr [ebp+18h], 2
.text:00402897                 mov     esi, ecx
.text:00402899                 jmp     short loc_402884
.text:00402899 ; ---------------------------------------------------------------------------
.text:0040289B                 align 10h
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_401D50+69↑j
.text:004028A0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004028A7                 call    getenv
.text:004028AC                 test    eax, eax
.text:004028AE                 jz      loc_401DC4
.text:004028B4                 jmp     loc_401DBF
.text:004028B4 ; ---------------------------------------------------------------------------
.text:004028B9                 align 10h
.text:004028C0
.text:004028C0 loc_4028C0:                             ; CODE XREF: sub_401D50+3F↑j
.text:004028C0                 mov     dword ptr [ebp+0], 1
.text:004028C7                 mov     ebx, 1
.text:004028CC                 jmp     loc_401DA0
.text:004028CC sub_401D50      endp
.text:004028CC
.text:004028D1 ; ---------------------------------------------------------------------------
.text:004028D1                 jmp     short sub_4028E0
.text:004028D1 ; ---------------------------------------------------------------------------
.text:004028D3                 align 10h
.text:004028E0
.text:004028E0 ; =============== S U B R O U T I N E =======================================
.text:004028E0
.text:004028E0
.text:004028E0 ; int __cdecl sub_4028E0(int, int, char *, int, int, int, int)
.text:004028E0 sub_4028E0      proc near               ; CODE XREF: .text:004028D1↑j
.text:004028E0                                         ; sub_403200+3A↓p ...
.text:004028E0
.text:004028E0 var_2C          = dword ptr -2Ch
.text:004028E0 var_28          = dword ptr -28h
.text:004028E0 Str             = dword ptr -24h
.text:004028E0 var_20          = dword ptr -20h
.text:004028E0 var_1C          = dword ptr -1Ch
.text:004028E0 var_18          = dword ptr -18h
.text:004028E0 var_14          = dword ptr -14h
.text:004028E0 var_10          = dword ptr -10h
.text:004028E0 arg_0           = dword ptr  4
.text:004028E0 arg_4           = dword ptr  8
.text:004028E0 arg_8           = dword ptr  0Ch
.text:004028E0 arg_C           = dword ptr  10h
.text:004028E0 arg_10          = dword ptr  14h
.text:004028E0 arg_14          = dword ptr  18h
.text:004028E0 arg_18          = dword ptr  1Ch
.text:004028E0
.text:004028E0                 sub     esp, 2Ch
.text:004028E3                 mov     edx, dword_406010
.text:004028E9                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:004028F1                 mov     ecx, dword_406014
.text:004028F7                 mov     ds:dword_407000, edx
.text:004028FD                 mov     edx, [esp+2Ch+arg_18]
.text:00402901                 mov     ds:dword_407004, ecx
.text:00402907                 mov     ecx, [esp+2Ch+arg_14]
.text:0040290B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040290F                 mov     edx, [esp+2Ch+arg_10]
.text:00402913                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402917                 mov     ecx, [esp+2Ch+arg_C]
.text:0040291B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040291F                 mov     edx, [esp+2Ch+arg_8]
.text:00402923                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402927                 mov     ecx, [esp+2Ch+arg_4]
.text:0040292B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040292F                 mov     edx, [esp+2Ch+arg_0]
.text:00402933                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402937                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040293A                 call    sub_401D50
.text:0040293F                 mov     ecx, ds:dword_407000
.text:00402945                 mov     dword_406010, ecx
.text:0040294B                 mov     ecx, ds:dword_40700C
.text:00402951                 mov     ds:dword_4071B0, ecx
.text:00402957                 mov     ecx, ds:dword_407008
.text:0040295D                 mov     dword_406018, ecx
.text:00402963                 add     esp, 2Ch
.text:00402966                 retn
.text:00402966 sub_4028E0      endp
.text:00402966
.text:00402966 ; ---------------------------------------------------------------------------
.text:00402967                 align 10h
.text:00402970                 sub     esp, 2Ch
.text:00402973                 mov     edx, dword_406010
.text:00402979                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402981                 mov     ecx, dword_406014
.text:00402987                 mov     dword ptr [esp+18h], 1
.text:0040298F                 mov     ds:dword_407000, edx
.text:00402995                 mov     edx, [esp+38h]
.text:00402999                 mov     ds:dword_407004, ecx
.text:0040299F                 mov     ecx, [esp+34h]
.text:004029A3                 mov     [esp+8], edx
.text:004029A7                 mov     edx, [esp+30h]
.text:004029AB                 mov     [esp+4], ecx
.text:004029AF                 mov     dword ptr [esp+14h], 0
.text:004029B7                 mov     dword ptr [esp+10h], 0
.text:004029BF                 mov     dword ptr [esp+0Ch], 0
.text:004029C7                 mov     [esp], edx
.text:004029CA                 call    sub_401D50
.text:004029CF                 mov     ecx, ds:dword_407000
.text:004029D5                 mov     dword_406010, ecx
.text:004029DB                 mov     ecx, ds:dword_40700C
.text:004029E1                 mov     ds:dword_4071B0, ecx
.text:004029E7                 mov     ecx, ds:dword_407008
.text:004029ED                 mov     dword_406018, ecx
.text:004029F3                 add     esp, 2Ch
.text:004029F6                 retn
.text:004029F6 ; ---------------------------------------------------------------------------
.text:004029F7                 align 10h
.text:00402A00
.text:00402A00 ; =============== S U B R O U T I N E =======================================
.text:00402A00
.text:00402A00
.text:00402A00 sub_402A00      proc near               ; CODE XREF: sub_401D50+113↑p
.text:00402A00                                         ; sub_401D50+AB9↑p
.text:00402A00
.text:00402A00 var_2C          = dword ptr -2Ch
.text:00402A00 var_28          = dword ptr -28h
.text:00402A00 var_24          = dword ptr -24h
.text:00402A00 var_20          = dword ptr -20h
.text:00402A00 var_1C          = dword ptr -1Ch
.text:00402A00 var_18          = dword ptr -18h
.text:00402A00 var_14          = dword ptr -14h
.text:00402A00 arg_0           = dword ptr  4
.text:00402A00 arg_4           = dword ptr  8
.text:00402A00
.text:00402A00                 push    ebp
.text:00402A01                 push    edi
.text:00402A02                 push    esi
.text:00402A03                 push    ebx
.text:00402A04                 sub     esp, 1Ch
.text:00402A07                 mov     ecx, [esp+2Ch+arg_4]
.text:00402A0B                 mov     eax, [esp+2Ch+arg_4]
.text:00402A0F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402A13                 mov     edx, [ecx+20h]
.text:00402A16                 mov     edi, [esp+2Ch+arg_0]
.text:00402A1A                 mov     ecx, [ebx]
.text:00402A1C                 mov     [esp+2Ch+var_2C], edx
.text:00402A1F                 mov     [esp+2Ch+var_14], edx
.text:00402A23                 mov     edx, [eax+24h]
.text:00402A26                 mov     [esp+2Ch+var_28], ecx
.text:00402A2A                 mov     [esp+2Ch+var_1C], ecx
.text:00402A2E                 cmp     ecx, edx
.text:00402A30                 mov     [esp+2Ch+var_18], edx
.text:00402A34                 jle     short loc_402AB0
.text:00402A36                 mov     esi, [esp+2Ch+var_2C]
.text:00402A39                 cmp     edx, esi
.text:00402A3B                 jle     short loc_402AB0
.text:00402A3D                 lea     esi, [esi+0]
.text:00402A40
.text:00402A40 loc_402A40:                             ; CODE XREF: sub_402A00+A1↓j
.text:00402A40                 mov     ebx, [esp+2Ch+var_1C]
.text:00402A44                 mov     edx, [esp+2Ch+var_18]
.text:00402A48                 mov     ebp, [esp+2Ch+var_18]
.text:00402A4C                 mov     eax, [esp+2Ch+var_14]
.text:00402A50                 sub     ebx, edx
.text:00402A52                 mov     [esp+2Ch+var_20], ebx
.text:00402A56                 sub     ebp, eax
.text:00402A58                 cmp     ebx, ebp
.text:00402A5A                 jle     short loc_402AD5
.text:00402A5C                 xor     esi, esi
.text:00402A5E                 cmp     esi, ebp
.text:00402A60                 jge     short loc_402A8D
.text:00402A62                 mov     ecx, [esp+2Ch+var_1C]
.text:00402A66                 sub     ecx, ebp
.text:00402A68                 mov     [esp+2Ch+var_24], ecx
.text:00402A6C                 lea     esi, [esi+0]
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_402A00+8B↓j
.text:00402A70                 mov     ecx, [esp+2Ch+var_14]
.text:00402A74                 mov     edx, [esp+2Ch+var_24]
.text:00402A78                 add     ecx, esi
.text:00402A7A                 add     edx, esi
.text:00402A7C                 mov     ebx, [edi+ecx*4]
.text:00402A7F                 mov     eax, [edi+edx*4]
.text:00402A82                 inc     esi
.text:00402A83                 cmp     esi, ebp
.text:00402A85                 mov     [edi+ecx*4], eax
.text:00402A88                 mov     [edi+edx*4], ebx
.text:00402A8B                 jl      short loc_402A70
.text:00402A8D
.text:00402A8D loc_402A8D:                             ; CODE XREF: sub_402A00+60↑j
.text:00402A8D                 sub     [esp+2Ch+var_1C], ebp
.text:00402A91
.text:00402A91 loc_402A91:                             ; CODE XREF: sub_402A00+107↓j
.text:00402A91                 mov     eax, [esp+2Ch+var_18]
.text:00402A95                 cmp     [esp+2Ch+var_1C], eax
.text:00402A99                 jle     short loc_402AB0
.text:00402A9B                 mov     ebp, [esp+2Ch+var_14]
.text:00402A9F                 cmp     eax, ebp
.text:00402AA1                 jg      short loc_402A40
.text:00402AA3                 lea     esi, [esi+0]
.text:00402AA9                 lea     edi, [edi+0]
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_402A00+34↑j
.text:00402AB0                                         ; sub_402A00+3B↑j ...
.text:00402AB0                 mov     esi, [esp+2Ch+var_28]
.text:00402AB4                 mov     ecx, [esp+2Ch+var_18]
.text:00402AB8                 mov     eax, [esp+2Ch+var_2C]
.text:00402ABB                 mov     edi, [esp+2Ch+arg_4]
.text:00402ABF                 mov     edx, [esp+2Ch+var_28]
.text:00402AC3                 sub     esi, ecx
.text:00402AC5                 add     esi, eax
.text:00402AC7                 mov     [edi+20h], esi
.text:00402ACA                 mov     [edi+24h], edx
.text:00402ACD                 add     esp, 1Ch
.text:00402AD0                 pop     ebx
.text:00402AD1                 pop     esi
.text:00402AD2                 pop     edi
.text:00402AD3                 pop     ebp
.text:00402AD4                 retn
.text:00402AD5 ; ---------------------------------------------------------------------------
.text:00402AD5
.text:00402AD5 loc_402AD5:                             ; CODE XREF: sub_402A00+5A↑j
.text:00402AD5                 xor     esi, esi
.text:00402AD7                 cmp     esi, [esp+2Ch+var_20]
.text:00402ADB                 jge     short loc_402AFF
.text:00402ADD                 lea     esi, [esi+0]
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_402A00+FD↓j
.text:00402AE0                 mov     ebx, [esp+2Ch+var_14]
.text:00402AE4                 mov     ebp, [esp+2Ch+var_18]
.text:00402AE8                 add     ebx, esi
.text:00402AEA                 add     ebp, esi
.text:00402AEC                 mov     edx, [edi+ebx*4]
.text:00402AEF                 inc     esi
.text:00402AF0                 cmp     esi, [esp+2Ch+var_20]
.text:00402AF4                 mov     ecx, [edi+ebp*4]
.text:00402AF7                 mov     [edi+ebx*4], ecx
.text:00402AFA                 mov     [edi+ebp*4], edx
.text:00402AFD                 jl      short loc_402AE0
.text:00402AFF
.text:00402AFF loc_402AFF:                             ; CODE XREF: sub_402A00+DB↑j
.text:00402AFF                 mov     esi, [esp+2Ch+var_20]
.text:00402B03                 add     [esp+2Ch+var_14], esi
.text:00402B07                 jmp     short loc_402A91
.text:00402B07 sub_402A00      endp
.text:00402B07
.text:00402B07 ; ---------------------------------------------------------------------------
.text:00402B09                 align 20h
.text:00402B20 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00402B20                                         ; DATA XREF: sub_402B90+651↓o
.text:00402B48                 align 20h
.text:00402B60 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00402B60                                         ; DATA XREF: sub_402B90+659↓o
.text:00402B86                 align 10h
.text:00402B90
.text:00402B90 ; =============== S U B R O U T I N E =======================================
.text:00402B90
.text:00402B90
.text:00402B90 ; int __cdecl sub_402B90(char *, char **, int, int, char *Str)
.text:00402B90 sub_402B90      proc near               ; CODE XREF: sub_4013F0+16F↑p
.text:00402B90
.text:00402B90 String          = dword ptr -3Ch
.text:00402B90 EndPtr          = dword ptr -38h
.text:00402B90 Radix           = dword ptr -34h
.text:00402B90 var_28          = dword ptr -28h
.text:00402B90 var_24          = dword ptr -24h
.text:00402B90 var_20          = dword ptr -20h
.text:00402B90 var_1C          = dword ptr -1Ch
.text:00402B90 var_18          = dword ptr -18h
.text:00402B90 var_14          = byte ptr -14h
.text:00402B90 arg_0           = dword ptr  4
.text:00402B90 arg_4           = dword ptr  8
.text:00402B90 arg_8           = dword ptr  0Ch
.text:00402B90 arg_C           = dword ptr  10h
.text:00402B90 Str             = dword ptr  14h
.text:00402B90
.text:00402B90                 push    ebp
.text:00402B91                 push    edi
.text:00402B92                 push    esi
.text:00402B93                 push    ebx
.text:00402B94                 sub     esp, 2Ch
.text:00402B97                 mov     ebx, [esp+3Ch+arg_8]
.text:00402B9B                 mov     [esp+3Ch+var_1C], 0
.text:00402BA3                 mov     esi, [esp+3Ch+arg_0]
.text:00402BA7                 mov     ebp, [esp+3Ch+Str]
.text:00402BAB                 cmp     ebx, 24h ; '$'
.text:00402BAE                 ja      loc_4031D9
.text:00402BB4                 mov     edi, [esp+3Ch+arg_4]
.text:00402BB8                 test    edi, edi
.text:00402BBA                 jz      loc_4031D0
.text:00402BC0
.text:00402BC0 loc_402BC0:                             ; CODE XREF: sub_402B90+644↓j
.text:00402BC0                 call    _errno
.text:00402BC5                 mov     dword ptr [eax], 0
.text:00402BCB                 mov     [esp+3Ch+Radix], ebx ; Radix
.text:00402BCF                 mov     [esp+3Ch+EndPtr], edi ; EndPtr
.text:00402BD3                 mov     [esp+3Ch+String], esi ; String
.text:00402BD6                 call    strtol
.text:00402BDB                 mov     [esp+3Ch+var_18], eax
.text:00402BDF                 mov     eax, [edi]
.text:00402BE1                 cmp     eax, esi
.text:00402BE3                 jz      loc_4031A0
.text:00402BE9                 call    _errno
.text:00402BEE                 mov     edx, [eax]
.text:00402BF0                 test    edx, edx
.text:00402BF2                 jnz     loc_403172
.text:00402BF8
.text:00402BF8 loc_402BF8:                             ; CODE XREF: sub_402B90+5F4↓j
.text:00402BF8                                         ; sub_402B90+636↓j
.text:00402BF8                 test    ebp, ebp
.text:00402BFA                 jz      loc_403163
.text:00402C00                 mov     esi, [edi]
.text:00402C02                 movzx   eax, byte ptr [esi]
.text:00402C05                 test    al, al
.text:00402C07                 jnz     short loc_402C20
.text:00402C09
.text:00402C09 loc_402C09:                             ; CODE XREF: sub_402B90+230↓j
.text:00402C09                                         ; sub_402B90+23B↓j
.text:00402C09                 mov     esi, [esp+3Ch+var_18]
.text:00402C0D                 mov     edx, [esp+3Ch+arg_C]
.text:00402C11                 mov     [edx], esi
.text:00402C13
.text:00402C13 loc_402C13:                             ; CODE XREF: sub_402B90+5DD↓j
.text:00402C13                 mov     eax, [esp+3Ch+var_1C]
.text:00402C17
.text:00402C17 loc_402C17:                             ; CODE XREF: sub_402B90+C1↓j
.text:00402C17                                         ; sub_402B90+605↓j
.text:00402C17                 add     esp, 2Ch
.text:00402C1A                 pop     ebx
.text:00402C1B                 pop     esi
.text:00402C1C                 pop     edi
.text:00402C1D                 pop     ebp
.text:00402C1E                 retn
.text:00402C1E ; ---------------------------------------------------------------------------
.text:00402C1F                 align 10h
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402B90+77↑j
.text:00402C20                 mov     [esp+3Ch+var_20], 1
.text:00402C28                 movsx   edx, al
.text:00402C2B                 mov     ebx, 400h
.text:00402C30                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:00402C34                 mov     [esp+3Ch+String], ebp ; Str
.text:00402C37                 call    strchr
.text:00402C3C                 test    eax, eax
.text:00402C3E                 jnz     short loc_402C53
.text:00402C40                 mov     ebp, [esp+3Ch+var_18]
.text:00402C44                 mov     edi, [esp+3Ch+arg_C]
.text:00402C48                 mov     [edi], ebp
.text:00402C4A
.text:00402C4A loc_402C4A:                             ; CODE XREF: sub_402B90+55A↓j
.text:00402C4A                 mov     eax, [esp+3Ch+var_1C]
.text:00402C4E                 or      eax, 2
.text:00402C51                 jmp     short loc_402C17
.text:00402C53 ; ---------------------------------------------------------------------------
.text:00402C53
.text:00402C53 loc_402C53:                             ; CODE XREF: sub_402B90+AE↑j
.text:00402C53                 mov     [esp+3Ch+EndPtr], 30h ; '0' ; Val
.text:00402C5B                 mov     [esp+3Ch+String], ebp ; Str
.text:00402C5E                 call    strchr
.text:00402C63                 test    eax, eax
.text:00402C65                 jz      loc_403158
.text:00402C6B                 mov     ecx, [edi]
.text:00402C6D                 mov     [esp+3Ch+var_24], ecx
.text:00402C71                 movsx   eax, byte ptr [ecx+1]
.text:00402C75                 cmp     eax, 44h ; 'D'
.text:00402C78                 jz      loc_403122
.text:00402C7E                 cmp     eax, 44h ; 'D'
.text:00402C81                 jg      loc_403134
.text:00402C87                 cmp     eax, 42h ; 'B'
.text:00402C8A                 jz      loc_403122
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402B90+59F↓j
.text:00402C90                                         ; sub_402B90+5A7↓j ...
.text:00402C90                 mov     ebp, [esp+3Ch+var_24]
.text:00402C94                 movsx   eax, byte ptr [ebp+0]
.text:00402C98                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00402C9B                 cmp     eax, 35h
.text:00402C9E                 ja      def_402CA4      ; jumptable 00402CA4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00402CA4                 jmp     ds:jpt_402CA4[eax*4] ; switch jump
.text:00402CA4 ; ---------------------------------------------------------------------------
.text:00402CAB                 align 4
.text:00402CAC jpt_402CA4      dd offset loc_402DE9, offset def_402CA4, offset def_402CA4
.text:00402CAC                                         ; DATA XREF: sub_402B90+114↑r
.text:00402CAC                 dd offset loc_402E0D, offset def_402CA4, offset loc_402F7D ; jump table for switch statement
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset def_402CA4
.text:00402CAC                 dd offset loc_402FD9, offset def_402CA4, offset loc_403024
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset loc_402E69
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset def_402CA4
.text:00402CAC                 dd offset loc_403081, offset def_402CA4, offset def_402CA4
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset loc_402EC5
.text:00402CAC                 dd offset loc_402F21, offset def_402CA4, offset def_402CA4
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset def_402CA4
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset loc_402D84
.text:00402CAC                 dd offset loc_402DAA, offset def_402CA4, offset def_402CA4
.text:00402CAC                 dd offset def_402CA4, offset loc_402F7D, offset def_402CA4
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset loc_402FD9
.text:00402CAC                 dd offset def_402CA4, offset loc_403024, offset def_402CA4
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset def_402CA4
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset loc_403081
.text:00402CAC                 dd offset def_402CA4, offset def_402CA4, offset loc_4030EF
.text:00402D84 ; ---------------------------------------------------------------------------
.text:00402D84
.text:00402D84 loc_402D84:                             ; CODE XREF: sub_402B90+114↑j
.text:00402D84                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402D84                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00402CA4 case 98
.text:00402D88                 mov     edx, 200h
.text:00402D8D                 cmp     ecx, 0FFC00000h
.text:00402D93                 jl      short loc_402DDF
.text:00402D95                 mov     eax, 7FFFFFFFh
.text:00402D9A                 mov     esi, edx
.text:00402D9C                 cdq
.text:00402D9D                 idiv    esi
.text:00402D9F                 cmp     eax, ecx
.text:00402DA1                 jl      short loc_402DD0
.text:00402DA3                 shl     ecx, 9
.text:00402DA6
.text:00402DA6 loc_402DA6:                             ; CODE XREF: sub_402B90+27B↓j
.text:00402DA6                 mov     [esp+3Ch+var_18], ecx
.text:00402DAA
.text:00402DAA loc_402DAA:                             ; CODE XREF: sub_402B90+114↑j
.text:00402DAA                                         ; sub_402B90+58D↓j
.text:00402DAA                                         ; DATA XREF: ...
.text:00402DAA                 xor     eax, eax        ; jumptable 00402CA4 case 99
.text:00402DAC
.text:00402DAC loc_402DAC:                             ; CODE XREF: sub_402B90+24D↓j
.text:00402DAC                                         ; sub_402B90+2AF↓j ...
.text:00402DAC                 or      [esp+3Ch+var_1C], eax
.text:00402DB0                 mov     ebp, [esp+3Ch+var_24]
.text:00402DB4                 mov     eax, [esp+3Ch+var_20]
.text:00402DB8                 add     ebp, eax
.text:00402DBA                 mov     [edi], ebp
.text:00402DBC                 cmp     byte ptr [ebp+0], 0
.text:00402DC0                 jz      loc_402C09
.text:00402DC6                 or      [esp+3Ch+var_1C], 2
.text:00402DCB                 jmp     loc_402C09
.text:00402DD0 ; ---------------------------------------------------------------------------
.text:00402DD0
.text:00402DD0 loc_402DD0:                             ; CODE XREF: sub_402B90+211↑j
.text:00402DD0                                         ; sub_402B90+276↓j ...
.text:00402DD0                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00402DD8
.text:00402DD8 loc_402DD8:                             ; CODE XREF: sub_402B90+257↓j
.text:00402DD8                 mov     eax, 1
.text:00402DDD                 jmp     short loc_402DAC
.text:00402DDF ; ---------------------------------------------------------------------------
.text:00402DDF
.text:00402DDF loc_402DDF:                             ; CODE XREF: sub_402B90+203↑j
.text:00402DDF                                         ; sub_402B90+268↓j ...
.text:00402DDF                 mov     [esp+3Ch+var_18], 80000000h
.text:00402DE7                 jmp     short loc_402DD8
.text:00402DE9 ; ---------------------------------------------------------------------------
.text:00402DE9
.text:00402DE9 loc_402DE9:                             ; CODE XREF: sub_402B90+114↑j
.text:00402DE9                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402DE9                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00402CA4 case 66
.text:00402DED                 mov     edx, 400h
.text:00402DF2                 cmp     ecx, 0FFE00000h
.text:00402DF8                 jl      short loc_402DDF
.text:00402DFA                 mov     eax, 7FFFFFFFh
.text:00402DFF                 mov     ebp, edx
.text:00402E01                 cdq
.text:00402E02                 idiv    ebp
.text:00402E04                 cmp     eax, ecx
.text:00402E06                 jl      short loc_402DD0
.text:00402E08                 shl     ecx, 0Ah
.text:00402E0B                 jmp     short loc_402DA6
.text:00402E0D ; ---------------------------------------------------------------------------
.text:00402E0D
.text:00402E0D loc_402E0D:                             ; CODE XREF: sub_402B90+114↑j
.text:00402E0D                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402E0D                 xor     ebp, ebp        ; jumptable 00402CA4 case 69
.text:00402E0F                 mov     esi, 5
.text:00402E14
.text:00402E14 loc_402E14:                             ; CODE XREF: sub_402B90+2AD↓j
.text:00402E14                 mov     eax, 80000000h
.text:00402E19                 mov     ecx, [esp+3Ch+var_18]
.text:00402E1D                 cdq
.text:00402E1E                 idiv    ebx
.text:00402E20                 cmp     ecx, eax
.text:00402E22                 mov     [esp+3Ch+var_28], eax
.text:00402E26                 jge     short loc_402E44
.text:00402E28                 mov     [esp+3Ch+var_18], 80000000h
.text:00402E30
.text:00402E30 loc_402E30:                             ; CODE XREF: sub_402B90+2CC↓j
.text:00402E30                 mov     eax, 1
.text:00402E35
.text:00402E35 loc_402E35:                             ; CODE XREF: sub_402B90+2D7↓j
.text:00402E35                 dec     esi
.text:00402E36                 or      ebp, eax
.text:00402E38                 cmp     esi, 0FFFFFFFFh
.text:00402E3B                 mov     eax, ebp
.text:00402E3D                 jnz     short loc_402E14
.text:00402E3F                 jmp     loc_402DAC
.text:00402E44 ; ---------------------------------------------------------------------------
.text:00402E44
.text:00402E44 loc_402E44:                             ; CODE XREF: sub_402B90+296↑j
.text:00402E44                 mov     eax, 7FFFFFFFh
.text:00402E49                 cdq
.text:00402E4A                 idiv    ebx
.text:00402E4C                 cmp     eax, ecx
.text:00402E4E                 mov     [esp+3Ch+var_28], eax
.text:00402E52                 jge     short loc_402E5E
.text:00402E54                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00402E5C                 jmp     short loc_402E30
.text:00402E5E ; ---------------------------------------------------------------------------
.text:00402E5E
.text:00402E5E loc_402E5E:                             ; CODE XREF: sub_402B90+2C2↑j
.text:00402E5E                 imul    ecx, ebx
.text:00402E61                 xor     eax, eax
.text:00402E63                 mov     [esp+3Ch+var_18], ecx
.text:00402E67                 jmp     short loc_402E35
.text:00402E69 ; ---------------------------------------------------------------------------
.text:00402E69
.text:00402E69 loc_402E69:                             ; CODE XREF: sub_402B90+114↑j
.text:00402E69                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402E69                 xor     ebp, ebp        ; jumptable 00402CA4 case 80
.text:00402E6B                 mov     esi, 4
.text:00402E70
.text:00402E70 loc_402E70:                             ; CODE XREF: sub_402B90+309↓j
.text:00402E70                 mov     eax, 80000000h
.text:00402E75                 mov     ecx, [esp+3Ch+var_18]
.text:00402E79                 cdq
.text:00402E7A                 idiv    ebx
.text:00402E7C                 cmp     ecx, eax
.text:00402E7E                 mov     [esp+3Ch+var_28], eax
.text:00402E82                 jge     short loc_402EA0
.text:00402E84                 mov     [esp+3Ch+var_18], 80000000h
.text:00402E8C
.text:00402E8C loc_402E8C:                             ; CODE XREF: sub_402B90+328↓j
.text:00402E8C                 mov     eax, 1
.text:00402E91
.text:00402E91 loc_402E91:                             ; CODE XREF: sub_402B90+333↓j
.text:00402E91                 dec     esi
.text:00402E92                 or      ebp, eax
.text:00402E94                 cmp     esi, 0FFFFFFFFh
.text:00402E97                 mov     eax, ebp
.text:00402E99                 jnz     short loc_402E70
.text:00402E9B                 jmp     loc_402DAC
.text:00402EA0 ; ---------------------------------------------------------------------------
.text:00402EA0
.text:00402EA0 loc_402EA0:                             ; CODE XREF: sub_402B90+2F2↑j
.text:00402EA0                 mov     eax, 7FFFFFFFh
.text:00402EA5                 cdq
.text:00402EA6                 idiv    ebx
.text:00402EA8                 cmp     eax, ecx
.text:00402EAA                 mov     [esp+3Ch+var_28], eax
.text:00402EAE                 jge     short loc_402EBA
.text:00402EB0                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00402EB8                 jmp     short loc_402E8C
.text:00402EBA ; ---------------------------------------------------------------------------
.text:00402EBA
.text:00402EBA loc_402EBA:                             ; CODE XREF: sub_402B90+31E↑j
.text:00402EBA                 imul    ecx, ebx
.text:00402EBD                 xor     eax, eax
.text:00402EBF                 mov     [esp+3Ch+var_18], ecx
.text:00402EC3                 jmp     short loc_402E91
.text:00402EC5 ; ---------------------------------------------------------------------------
.text:00402EC5
.text:00402EC5 loc_402EC5:                             ; CODE XREF: sub_402B90+114↑j
.text:00402EC5                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402EC5                 xor     ebp, ebp        ; jumptable 00402CA4 case 89
.text:00402EC7                 mov     esi, 7
.text:00402ECC
.text:00402ECC loc_402ECC:                             ; CODE XREF: sub_402B90+365↓j
.text:00402ECC                 mov     eax, 80000000h
.text:00402ED1                 mov     ecx, [esp+3Ch+var_18]
.text:00402ED5                 cdq
.text:00402ED6                 idiv    ebx
.text:00402ED8                 cmp     ecx, eax
.text:00402EDA                 mov     [esp+3Ch+var_28], eax
.text:00402EDE                 jge     short loc_402EFC
.text:00402EE0                 mov     [esp+3Ch+var_18], 80000000h
.text:00402EE8
.text:00402EE8 loc_402EE8:                             ; CODE XREF: sub_402B90+384↓j
.text:00402EE8                 mov     eax, 1
.text:00402EED
.text:00402EED loc_402EED:                             ; CODE XREF: sub_402B90+38F↓j
.text:00402EED                 dec     esi
.text:00402EEE                 or      ebp, eax
.text:00402EF0                 cmp     esi, 0FFFFFFFFh
.text:00402EF3                 mov     eax, ebp
.text:00402EF5                 jnz     short loc_402ECC
.text:00402EF7                 jmp     loc_402DAC
.text:00402EFC ; ---------------------------------------------------------------------------
.text:00402EFC
.text:00402EFC loc_402EFC:                             ; CODE XREF: sub_402B90+34E↑j
.text:00402EFC                 mov     eax, 7FFFFFFFh
.text:00402F01                 cdq
.text:00402F02                 idiv    ebx
.text:00402F04                 cmp     eax, ecx
.text:00402F06                 mov     [esp+3Ch+var_28], eax
.text:00402F0A                 jge     short loc_402F16
.text:00402F0C                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00402F14                 jmp     short loc_402EE8
.text:00402F16 ; ---------------------------------------------------------------------------
.text:00402F16
.text:00402F16 loc_402F16:                             ; CODE XREF: sub_402B90+37A↑j
.text:00402F16                 imul    ecx, ebx
.text:00402F19                 xor     eax, eax
.text:00402F1B                 mov     [esp+3Ch+var_18], ecx
.text:00402F1F                 jmp     short loc_402EED
.text:00402F21 ; ---------------------------------------------------------------------------
.text:00402F21
.text:00402F21 loc_402F21:                             ; CODE XREF: sub_402B90+114↑j
.text:00402F21                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402F21                 xor     ebp, ebp        ; jumptable 00402CA4 case 90
.text:00402F23                 mov     esi, 6
.text:00402F28
.text:00402F28 loc_402F28:                             ; CODE XREF: sub_402B90+3C1↓j
.text:00402F28                 mov     eax, 80000000h
.text:00402F2D                 mov     ecx, [esp+3Ch+var_18]
.text:00402F31                 cdq
.text:00402F32                 idiv    ebx
.text:00402F34                 cmp     ecx, eax
.text:00402F36                 mov     [esp+3Ch+var_28], eax
.text:00402F3A                 jge     short loc_402F58
.text:00402F3C                 mov     [esp+3Ch+var_18], 80000000h
.text:00402F44
.text:00402F44 loc_402F44:                             ; CODE XREF: sub_402B90+3E0↓j
.text:00402F44                 mov     eax, 1
.text:00402F49
.text:00402F49 loc_402F49:                             ; CODE XREF: sub_402B90+3EB↓j
.text:00402F49                 dec     esi
.text:00402F4A                 or      ebp, eax
.text:00402F4C                 cmp     esi, 0FFFFFFFFh
.text:00402F4F                 mov     eax, ebp
.text:00402F51                 jnz     short loc_402F28
.text:00402F53                 jmp     loc_402DAC
.text:00402F58 ; ---------------------------------------------------------------------------
.text:00402F58
.text:00402F58 loc_402F58:                             ; CODE XREF: sub_402B90+3AA↑j
.text:00402F58                 mov     eax, 7FFFFFFFh
.text:00402F5D                 cdq
.text:00402F5E                 idiv    ebx
.text:00402F60                 cmp     eax, ecx
.text:00402F62                 mov     [esp+3Ch+var_28], eax
.text:00402F66                 jge     short loc_402F72
.text:00402F68                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00402F70                 jmp     short loc_402F44
.text:00402F72 ; ---------------------------------------------------------------------------
.text:00402F72
.text:00402F72 loc_402F72:                             ; CODE XREF: sub_402B90+3D6↑j
.text:00402F72                 imul    ecx, ebx
.text:00402F75                 xor     eax, eax
.text:00402F77                 mov     [esp+3Ch+var_18], ecx
.text:00402F7B                 jmp     short loc_402F49
.text:00402F7D ; ---------------------------------------------------------------------------
.text:00402F7D
.text:00402F7D loc_402F7D:                             ; CODE XREF: sub_402B90+114↑j
.text:00402F7D                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402F7D                 xor     ebp, ebp        ; jumptable 00402CA4 cases 71,103
.text:00402F7F                 mov     esi, 2
.text:00402F84
.text:00402F84 loc_402F84:                             ; CODE XREF: sub_402B90+41D↓j
.text:00402F84                 mov     eax, 80000000h
.text:00402F89                 mov     ecx, [esp+3Ch+var_18]
.text:00402F8D                 cdq
.text:00402F8E                 idiv    ebx
.text:00402F90                 cmp     ecx, eax
.text:00402F92                 mov     [esp+3Ch+var_28], eax
.text:00402F96                 jge     short loc_402FB4
.text:00402F98                 mov     [esp+3Ch+var_18], 80000000h
.text:00402FA0
.text:00402FA0 loc_402FA0:                             ; CODE XREF: sub_402B90+43C↓j
.text:00402FA0                 mov     eax, 1
.text:00402FA5
.text:00402FA5 loc_402FA5:                             ; CODE XREF: sub_402B90+447↓j
.text:00402FA5                 dec     esi
.text:00402FA6                 or      ebp, eax
.text:00402FA8                 cmp     esi, 0FFFFFFFFh
.text:00402FAB                 mov     eax, ebp
.text:00402FAD                 jnz     short loc_402F84
.text:00402FAF                 jmp     loc_402DAC
.text:00402FB4 ; ---------------------------------------------------------------------------
.text:00402FB4
.text:00402FB4 loc_402FB4:                             ; CODE XREF: sub_402B90+406↑j
.text:00402FB4                 mov     eax, 7FFFFFFFh
.text:00402FB9                 cdq
.text:00402FBA                 idiv    ebx
.text:00402FBC                 cmp     eax, ecx
.text:00402FBE                 mov     [esp+3Ch+var_28], eax
.text:00402FC2                 jge     short loc_402FCE
.text:00402FC4                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00402FCC                 jmp     short loc_402FA0
.text:00402FCE ; ---------------------------------------------------------------------------
.text:00402FCE
.text:00402FCE loc_402FCE:                             ; CODE XREF: sub_402B90+432↑j
.text:00402FCE                 imul    ecx, ebx
.text:00402FD1                 xor     eax, eax
.text:00402FD3                 mov     [esp+3Ch+var_18], ecx
.text:00402FD7                 jmp     short loc_402FA5
.text:00402FD9 ; ---------------------------------------------------------------------------
.text:00402FD9
.text:00402FD9 loc_402FD9:                             ; CODE XREF: sub_402B90+114↑j
.text:00402FD9                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00402FD9                 mov     eax, 80000000h  ; jumptable 00402CA4 cases 75,107
.text:00402FDE                 mov     ecx, [esp+3Ch+var_18]
.text:00402FE2                 lea     ebp, [esp+3Ch+var_18]
.text:00402FE6                 cdq
.text:00402FE7                 mov     esi, 7FFFFFFFh
.text:00402FEC                 idiv    ebx
.text:00402FEE                 cmp     ecx, eax
.text:00402FF0                 jge     short loc_403008
.text:00402FF2                 mov     [esp+3Ch+var_18], 80000000h
.text:00402FFA
.text:00402FFA loc_402FFA:                             ; CODE XREF: sub_402B90+488↓j
.text:00402FFA                 mov     edx, 1
.text:00402FFF
.text:00402FFF loc_402FFF:                             ; CODE XREF: sub_402B90+492↓j
.text:00402FFF                 xor     eax, eax
.text:00403001                 or      eax, edx
.text:00403003                 jmp     loc_402DAC
.text:00403008 ; ---------------------------------------------------------------------------
.text:00403008
.text:00403008 loc_403008:                             ; CODE XREF: sub_402B90+460↑j
.text:00403008                 mov     eax, esi
.text:0040300A                 cdq
.text:0040300B                 idiv    ebx
.text:0040300D                 cmp     eax, ecx
.text:0040300F                 jge     short loc_40301A
.text:00403011                 mov     dword ptr [ebp+0], 7FFFFFFFh
.text:00403018                 jmp     short loc_402FFA
.text:0040301A ; ---------------------------------------------------------------------------
.text:0040301A
.text:0040301A loc_40301A:                             ; CODE XREF: sub_402B90+47F↑j
.text:0040301A                 imul    ecx, ebx
.text:0040301D                 xor     edx, edx
.text:0040301F                 mov     [ebp+0], ecx
.text:00403022                 jmp     short loc_402FFF
.text:00403024 ; ---------------------------------------------------------------------------
.text:00403024
.text:00403024 loc_403024:                             ; CODE XREF: sub_402B90+114↑j
.text:00403024                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00403024                 xor     ebp, ebp        ; jumptable 00402CA4 cases 77,109
.text:00403026                 mov     esi, 1
.text:0040302B
.text:0040302B loc_40302B:                             ; CODE XREF: sub_402B90+4CA↓j
.text:0040302B                 mov     eax, 80000000h
.text:00403030                 mov     ecx, [esp+3Ch+var_18]
.text:00403034                 cdq
.text:00403035                 idiv    ebx
.text:00403037                 cmp     ecx, eax
.text:00403039                 mov     [esp+3Ch+var_28], eax
.text:0040303D                 jge     short loc_40305C
.text:0040303F                 mov     [esp+3Ch+var_18], 80000000h
.text:00403047
.text:00403047 loc_403047:                             ; CODE XREF: sub_402B90+4E4↓j
.text:00403047                 mov     eax, 1
.text:0040304C
.text:0040304C loc_40304C:                             ; CODE XREF: sub_402B90+4EF↓j
.text:0040304C                 dec     esi
.text:0040304D                 or      ebp, eax
.text:0040304F                 cmp     esi, 0FFFFFFFFh
.text:00403052                 mov     eax, ebp
.text:00403054                 jz      loc_402DAC
.text:0040305A                 jmp     short loc_40302B
.text:0040305C ; ---------------------------------------------------------------------------
.text:0040305C
.text:0040305C loc_40305C:                             ; CODE XREF: sub_402B90+4AD↑j
.text:0040305C                 mov     eax, 7FFFFFFFh
.text:00403061                 cdq
.text:00403062                 idiv    ebx
.text:00403064                 cmp     eax, ecx
.text:00403066                 mov     [esp+3Ch+var_28], eax
.text:0040306A                 jge     short loc_403076
.text:0040306C                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:00403074                 jmp     short loc_403047
.text:00403076 ; ---------------------------------------------------------------------------
.text:00403076
.text:00403076 loc_403076:                             ; CODE XREF: sub_402B90+4DA↑j
.text:00403076                 imul    ecx, ebx
.text:00403079                 xor     eax, eax
.text:0040307B                 mov     [esp+3Ch+var_18], ecx
.text:0040307F                 jmp     short loc_40304C
.text:00403081 ; ---------------------------------------------------------------------------
.text:00403081
.text:00403081 loc_403081:                             ; CODE XREF: sub_402B90+114↑j
.text:00403081                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:00403081                 xor     ebp, ebp        ; jumptable 00402CA4 cases 84,116
.text:00403083                 mov     esi, 3
.text:00403088
.text:00403088 loc_403088:                             ; CODE XREF: sub_402B90+521↓j
.text:00403088                 mov     eax, 80000000h
.text:0040308D                 mov     ecx, [esp+3Ch+var_18]
.text:00403091                 cdq
.text:00403092                 idiv    ebx
.text:00403094                 cmp     ecx, eax
.text:00403096                 mov     [esp+3Ch+var_28], eax
.text:0040309A                 jge     short loc_4030B8
.text:0040309C                 mov     [esp+3Ch+var_18], 80000000h
.text:004030A4
.text:004030A4 loc_4030A4:                             ; CODE XREF: sub_402B90+540↓j
.text:004030A4                 mov     eax, 1
.text:004030A9
.text:004030A9 loc_4030A9:                             ; CODE XREF: sub_402B90+54B↓j
.text:004030A9                 dec     esi
.text:004030AA                 or      ebp, eax
.text:004030AC                 cmp     esi, 0FFFFFFFFh
.text:004030AF                 mov     eax, ebp
.text:004030B1                 jnz     short loc_403088
.text:004030B3                 jmp     loc_402DAC
.text:004030B8 ; ---------------------------------------------------------------------------
.text:004030B8
.text:004030B8 loc_4030B8:                             ; CODE XREF: sub_402B90+50A↑j
.text:004030B8                 mov     eax, 7FFFFFFFh
.text:004030BD                 cdq
.text:004030BE                 idiv    ebx
.text:004030C0                 cmp     eax, ecx
.text:004030C2                 mov     [esp+3Ch+var_28], eax
.text:004030C6                 jge     short loc_4030D2
.text:004030C8                 mov     [esp+3Ch+var_18], 7FFFFFFFh
.text:004030D0                 jmp     short loc_4030A4
.text:004030D2 ; ---------------------------------------------------------------------------
.text:004030D2
.text:004030D2 loc_4030D2:                             ; CODE XREF: sub_402B90+536↑j
.text:004030D2                 imul    ecx, ebx
.text:004030D5                 xor     eax, eax
.text:004030D7                 mov     [esp+3Ch+var_18], ecx
.text:004030DB                 jmp     short loc_4030A9
.text:004030DB ; ---------------------------------------------------------------------------
.text:004030DD                 align 10h
.text:004030E0
.text:004030E0 def_402CA4:                             ; CODE XREF: sub_402B90+10E↑j
.text:004030E0                                         ; sub_402B90+114↑j
.text:004030E0                                         ; DATA XREF: ...
.text:004030E0                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00402CA4 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004030E4                 mov     edi, [esp+3Ch+arg_C]
.text:004030E8                 mov     [edi], ecx
.text:004030EA                 jmp     loc_402C4A
.text:004030EF ; ---------------------------------------------------------------------------
.text:004030EF
.text:004030EF loc_4030EF:                             ; CODE XREF: sub_402B90+114↑j
.text:004030EF                                         ; DATA XREF: sub_402B90:jpt_402CA4↑o
.text:004030EF                 mov     ecx, [esp+3Ch+var_18] ; jumptable 00402CA4 case 119
.text:004030F3                 mov     edx, 2
.text:004030F8                 cmp     ecx, 0C0000000h
.text:004030FE                 jl      loc_402DDF
.text:00403104                 mov     eax, 7FFFFFFFh
.text:00403109                 mov     esi, edx
.text:0040310B                 cdq
.text:0040310C                 idiv    esi
.text:0040310E                 cmp     eax, ecx
.text:00403110                 jl      loc_402DD0
.text:00403116                 lea     ebx, [ecx+ecx]
.text:00403119                 mov     [esp+3Ch+var_18], ebx
.text:0040311D                 jmp     loc_402DAA      ; jumptable 00402CA4 case 99
.text:00403122 ; ---------------------------------------------------------------------------
.text:00403122
.text:00403122 loc_403122:                             ; CODE XREF: sub_402B90+E8↑j
.text:00403122                                         ; sub_402B90+FA↑j
.text:00403122                 mov     [esp+3Ch+var_20], 2
.text:0040312A                 mov     ebx, 3E8h
.text:0040312F                 jmp     loc_402C90
.text:00403134 ; ---------------------------------------------------------------------------
.text:00403134
.text:00403134 loc_403134:                             ; CODE XREF: sub_402B90+F1↑j
.text:00403134                 cmp     eax, 69h ; 'i'
.text:00403137                 jnz     loc_402C90
.text:0040313D                 mov     eax, [esp+3Ch+var_24]
.text:00403141                 cmp     byte ptr [eax+2], 42h ; 'B'
.text:00403145                 jnz     loc_402C90
.text:0040314B                 mov     [esp+3Ch+var_20], 3
.text:00403153                 jmp     loc_402C90
.text:00403158 ; ---------------------------------------------------------------------------
.text:00403158
.text:00403158 loc_403158:                             ; CODE XREF: sub_402B90+D5↑j
.text:00403158                 mov     esi, [edi]
.text:0040315A                 mov     [esp+3Ch+var_24], esi
.text:0040315E                 jmp     loc_402C90
.text:00403163 ; ---------------------------------------------------------------------------
.text:00403163
.text:00403163 loc_403163:                             ; CODE XREF: sub_402B90+6A↑j
.text:00403163                 mov     ebx, [esp+3Ch+var_18]
.text:00403167                 mov     ecx, [esp+3Ch+arg_C]
.text:0040316B                 mov     [ecx], ebx
.text:0040316D                 jmp     loc_402C13
.text:00403172 ; ---------------------------------------------------------------------------
.text:00403172
.text:00403172 loc_403172:                             ; CODE XREF: sub_402B90+62↑j
.text:00403172                 call    _errno
.text:00403177                 cmp     dword ptr [eax], 22h ; '"'
.text:0040317A                 jnz     short loc_403190
.text:0040317C                 mov     [esp+3Ch+var_1C], 1
.text:00403184                 jmp     loc_402BF8
.text:00403184 ; ---------------------------------------------------------------------------
.text:00403189                 align 10h
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_402B90+5EA↑j
.text:00403190                                         ; sub_402B90+612↓j ...
.text:00403190                 mov     eax, 4
.text:00403195                 jmp     loc_402C17
.text:00403195 ; ---------------------------------------------------------------------------
.text:0040319A                 align 10h
.text:004031A0
.text:004031A0 loc_4031A0:                             ; CODE XREF: sub_402B90+53↑j
.text:004031A0                 test    ebp, ebp
.text:004031A2                 jz      short loc_403190
.text:004031A4                 movzx   eax, byte ptr [eax]
.text:004031A7                 test    al, al
.text:004031A9                 jz      short loc_403190
.text:004031AB                 mov     [esp+3Ch+String], ebp ; Str
.text:004031AE                 movsx   edx, al
.text:004031B1                 mov     [esp+3Ch+EndPtr], edx ; Val
.text:004031B5                 call    strchr
.text:004031BA                 test    eax, eax
.text:004031BC                 jz      short loc_403190
.text:004031BE                 mov     [esp+3Ch+var_18], 1
.text:004031C6                 jmp     loc_402BF8
.text:004031C6 ; ---------------------------------------------------------------------------
.text:004031CB                 align 10h
.text:004031D0
.text:004031D0 loc_4031D0:                             ; CODE XREF: sub_402B90+2A↑j
.text:004031D0                 lea     edi, [esp+3Ch+var_14]
.text:004031D4                 jmp     loc_402BC0
.text:004031D9 ; ---------------------------------------------------------------------------
.text:004031D9
.text:004031D9 loc_4031D9:                             ; CODE XREF: sub_402B90+1E↑j
.text:004031D9                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004031E1                 mov     [esp+3Ch+EndPtr], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:004031E9                 mov     [esp+3Ch+String], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:004031F0                 call    _assert
.text:004031F0 sub_402B90      endp
.text:004031F0
.text:004031F0 ; ---------------------------------------------------------------------------
.text:004031F5                 align 10h
.text:00403200
.text:00403200 ; =============== S U B R O U T I N E =======================================
.text:00403200
.text:00403200
.text:00403200 ; int __cdecl sub_403200(int, int, char *, int, int)
.text:00403200 sub_403200      proc near               ; CODE XREF: sub_4013F0+111↑p
.text:00403200                                         ; sub_403410+58↓p
.text:00403200
.text:00403200 var_1C          = dword ptr -1Ch
.text:00403200 var_18          = dword ptr -18h
.text:00403200 var_14          = dword ptr -14h
.text:00403200 var_10          = dword ptr -10h
.text:00403200 var_C           = dword ptr -0Ch
.text:00403200 var_8           = dword ptr -8
.text:00403200 var_4           = dword ptr -4
.text:00403200 arg_0           = dword ptr  4
.text:00403200 arg_4           = dword ptr  8
.text:00403200 arg_8           = dword ptr  0Ch
.text:00403200 arg_C           = dword ptr  10h
.text:00403200 arg_10          = dword ptr  14h
.text:00403200
.text:00403200                 sub     esp, 1Ch
.text:00403203                 mov     edx, [esp+1Ch+arg_C]
.text:00403207                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040320F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403213                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040321B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040321F                 mov     edx, [esp+1Ch+arg_4]
.text:00403223                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403227                 mov     ecx, [esp+1Ch+arg_8]
.text:0040322B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040322F                 mov     edx, [esp+1Ch+arg_0]
.text:00403233                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403237                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040323A                 call    sub_4028E0
.text:0040323F                 add     esp, 1Ch
.text:00403242                 retn
.text:00403242 sub_403200      endp
.text:00403242
.text:00403242 ; ---------------------------------------------------------------------------
.text:00403243                 align 10h
.text:00403250                 sub     esp, 2Ch
.text:00403253                 mov     edx, [esp+44h]
.text:00403257                 mov     dword ptr [esp+18h], 0
.text:0040325F                 mov     ecx, [esp+40h]
.text:00403263                 mov     dword ptr [esp+14h], 0
.text:0040326B                 mov     [esp+1Ch], edx
.text:0040326F                 mov     edx, [esp+3Ch]
.text:00403273                 mov     [esp+10h], ecx
.text:00403277                 mov     ecx, [esp+38h]
.text:0040327B                 mov     [esp+0Ch], edx
.text:0040327F                 mov     edx, [esp+34h]
.text:00403283                 mov     [esp+8], ecx
.text:00403287                 mov     [esp+4], edx
.text:0040328B                 mov     edx, [esp+30h]
.text:0040328F                 mov     [esp], edx
.text:00403292                 call    sub_401D50
.text:00403297                 add     esp, 2Ch
.text:0040329A                 retn
.text:0040329A ; ---------------------------------------------------------------------------
.text:0040329B                 align 10h
.text:004032A0                 sub     esp, 1Ch
.text:004032A3                 mov     edx, [esp+2Ch]
.text:004032A7                 mov     dword ptr [esp+18h], 0
.text:004032AF                 mov     ecx, [esp+30h]
.text:004032B3                 mov     dword ptr [esp+14h], 1
.text:004032BB                 mov     [esp+0Ch], edx
.text:004032BF                 mov     edx, [esp+24h]
.text:004032C3                 mov     [esp+10h], ecx
.text:004032C7                 mov     ecx, [esp+28h]
.text:004032CB                 mov     [esp+4], edx
.text:004032CF                 mov     edx, [esp+20h]
.text:004032D3                 mov     [esp+8], ecx
.text:004032D7                 mov     [esp], edx
.text:004032DA                 call    sub_4028E0
.text:004032DF                 add     esp, 1Ch
.text:004032E2                 retn
.text:004032E2 ; ---------------------------------------------------------------------------
.text:004032E3                 align 10h
.text:004032F0                 sub     esp, 2Ch
.text:004032F3                 mov     edx, [esp+44h]
.text:004032F7                 mov     dword ptr [esp+18h], 0
.text:004032FF                 mov     ecx, [esp+40h]
.text:00403303                 mov     dword ptr [esp+14h], 1
.text:0040330B                 mov     [esp+1Ch], edx
.text:0040330F                 mov     edx, [esp+3Ch]
.text:00403313                 mov     [esp+10h], ecx
.text:00403317                 mov     ecx, [esp+38h]
.text:0040331B                 mov     [esp+0Ch], edx
.text:0040331F                 mov     edx, [esp+34h]
.text:00403323                 mov     [esp+8], ecx
.text:00403327                 mov     [esp+4], edx
.text:0040332B                 mov     edx, [esp+30h]
.text:0040332F                 mov     [esp], edx
.text:00403332                 call    sub_401D50
.text:00403337                 add     esp, 2Ch
.text:0040333A                 retn
.text:0040333A ; ---------------------------------------------------------------------------
.text:0040333B                 align 10h
.text:00403340 ; const char aPosix2Version[]
.text:00403340 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_403350+C↓o
.text:00403350
.text:00403350 ; =============== S U B R O U T I N E =======================================
.text:00403350
.text:00403350
.text:00403350 sub_403350      proc near               ; CODE XREF: sub_4013F0+3DF↑p
.text:00403350
.text:00403350 VarName         = dword ptr -1Ch
.text:00403350 EndPtr          = dword ptr -18h
.text:00403350 Radix           = dword ptr -14h
.text:00403350 var_8           = dword ptr -8
.text:00403350 var_4           = dword ptr -4
.text:00403350
.text:00403350                 sub     esp, 1Ch
.text:00403353                 mov     [esp+1Ch+var_4], ebx
.text:00403357                 mov     ebx, 30A29h
.text:0040335C                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:00403363                 call    getenv
.text:00403368                 test    eax, eax
.text:0040336A                 jz      short loc_403371
.text:0040336C                 cmp     byte ptr [eax], 0
.text:0040336F                 jnz     short loc_403380
.text:00403371
.text:00403371 loc_403371:                             ; CODE XREF: sub_403350+1A↑j
.text:00403371                                         ; sub_403350+4F↓j ...
.text:00403371                 mov     eax, ebx
.text:00403373                 mov     ebx, [esp+1Ch+var_4]
.text:00403377                 add     esp, 1Ch
.text:0040337A                 retn
.text:0040337A ; ---------------------------------------------------------------------------
.text:0040337B                 align 10h
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_403350+1F↑j
.text:00403380                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00403388                 lea     ecx, [esp+1Ch+var_8]
.text:0040338C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00403390                 mov     [esp+1Ch+VarName], eax ; String
.text:00403393                 call    strtol
.text:00403398                 mov     ecx, [esp+1Ch+var_8]
.text:0040339C                 cmp     byte ptr [ecx], 0
.text:0040339F                 jnz     short loc_403371
.text:004033A1                 mov     ebx, eax
.text:004033A3                 jmp     short loc_403371
.text:004033A3 sub_403350      endp
.text:004033A3
.text:004033A3 ; ---------------------------------------------------------------------------
.text:004033A5                 align 10h
.text:004033B0 aHelp           db 'help',0             ; DATA XREF: .text:off_4033D0↓o
.text:004033B5 aVersion        db 'version',0          ; DATA XREF: .text:004033E0↓o
.text:004033BD                 db 13h dup(90h)
.text:004033D0 off_4033D0      dd offset aHelp         ; DATA XREF: sub_403410+3D↓o
.text:004033D0                                         ; "help"
.text:004033D4                 dd 2 dup(0)
.text:004033DC                 dd 68h
.text:004033E0                 dd offset aVersion      ; "version"
.text:004033E4                 dd 2 dup(0)
.text:004033EC                 dd 76h, 4 dup(0)
.text:00403400 ; ---------------------------------------------------------------------------
.text:00403400
.text:00403400 loc_403400:                             ; DATA XREF: sub_403410+45↓o
.text:00403400                 sub     eax, [eax]
.text:00403402                 lea     esi, [esi+0]
.text:00403409                 lea     edi, [edi+0]
.text:00403410
.text:00403410 ; =============== S U B R O U T I N E =======================================
.text:00403410
.text:00403410
.text:00403410 ; int __cdecl sub_403410(int, int, FILE *, int, int, int, char)
.text:00403410 sub_403410      proc near               ; CODE XREF: sub_4013F0+B5↑p
.text:00403410
.text:00403410 Code            = dword ptr -1Ch
.text:00403410 var_18          = dword ptr -18h
.text:00403410 var_14          = dword ptr -14h
.text:00403410 var_10          = dword ptr -10h
.text:00403410 var_C           = dword ptr -0Ch
.text:00403410 var_4           = dword ptr -4
.text:00403410 arg_0           = dword ptr  4
.text:00403410 arg_4           = dword ptr  8
.text:00403410 arg_8           = dword ptr  0Ch
.text:00403410 arg_C           = dword ptr  10h
.text:00403410 arg_10          = dword ptr  14h
.text:00403410 arg_14          = dword ptr  18h
.text:00403410 arg_18          = byte ptr  1Ch
.text:00403410
.text:00403410                 sub     esp, 1Ch
.text:00403413                 xor     eax, eax
.text:00403415                 cmp     [esp+1Ch+arg_0], 2
.text:0040341A                 mov     [esp+1Ch+var_4], ebx
.text:0040341E                 mov     ebx, dword_406014
.text:00403424                 mov     dword_406014, eax
.text:00403429                 jz      short loc_403441
.text:0040342B
.text:0040342B loc_40342B:                             ; CODE XREF: sub_403410+60↓j
.text:0040342B                                         ; sub_403410+6A↓j
.text:0040342B                 mov     dword_406014, ebx
.text:00403431                 xor     edx, edx
.text:00403433                 mov     ebx, [esp+1Ch+var_4]
.text:00403437                 mov     dword_406010, edx
.text:0040343D                 add     esp, 1Ch
.text:00403440                 retn
.text:00403441 ; ---------------------------------------------------------------------------
.text:00403441
.text:00403441 loc_403441:                             ; CODE XREF: sub_403410+19↑j
.text:00403441                 mov     [esp+1Ch+var_C], 0 ; int
.text:00403449                 mov     edx, [esp+1Ch+arg_4]
.text:0040344D                 mov     [esp+1Ch+var_10], offset off_4033D0 ; int
.text:00403455                 mov     [esp+1Ch+var_14], offset loc_403400 ; char *
.text:0040345D                 mov     [esp+1Ch+var_18], edx ; int
.text:00403461                 mov     [esp+1Ch+Code], 2 ; int
.text:00403468                 call    sub_403200
.text:0040346D                 cmp     eax, 0FFFFFFFFh
.text:00403470                 jz      short loc_40342B
.text:00403472                 cmp     eax, 68h ; 'h'
.text:00403475                 jz      short loc_40347E
.text:00403477                 cmp     eax, 76h ; 'v'
.text:0040347A                 jnz     short loc_40342B
.text:0040347C                 jmp     short loc_403489
.text:0040347E ; ---------------------------------------------------------------------------
.text:0040347E
.text:0040347E loc_40347E:                             ; CODE XREF: sub_403410+65↑j
.text:0040347E                 mov     [esp+1Ch+Code], 0
.text:00403485                 call    [esp+1Ch+arg_14]
.text:00403489
.text:00403489 loc_403489:                             ; CODE XREF: sub_403410+6C↑j
.text:00403489                 mov     ecx, [esp+1Ch+arg_10]
.text:0040348D                 lea     ebx, [esp+1Ch+arg_18]
.text:00403491                 mov     edx, [esp+1Ch+arg_C]
.text:00403495                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00403499                 mov     ebx, [esp+1Ch+arg_8]
.text:0040349D                 mov     [esp+1Ch+var_10], ecx ; int
.text:004034A1                 mov     ecx, ds:_iob
.text:004034A7                 mov     [esp+1Ch+var_14], edx ; int
.text:004034AB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:004034AF                 add     ecx, 20h ; ' '
.text:004034B2                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:004034B5                 call    sub_4038D0
.text:004034BA                 mov     [esp+1Ch+Code], 0 ; Code
.text:004034C1                 call    exit
.text:004034C1 sub_403410      endp
.text:004034C1
.text:004034C1 ; ---------------------------------------------------------------------------
.text:004034C6                 align 10h
.text:004034D0                 mov     edx, [esp+4]
.text:004034D4                 mov     ds:dword_407030, edx
.text:004034DA                 retn
.text:004034DA ; ---------------------------------------------------------------------------
.text:004034DB aWriteError     db 'write error',0      ; DATA XREF: sub_403500:loc_403549↓o
.text:004034E7 ; const char aSS_0[]
.text:004034E7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403500+77↓o
.text:004034EE ; const char aS_2[]
.text:004034EE aS_2            db '%s',0               ; DATA XREF: sub_403500+A0↓o
.text:004034F1 ; ---------------------------------------------------------------------------
.text:004034F1                 jmp     short sub_403500
.text:004034F1 ; ---------------------------------------------------------------------------
.text:004034F3                 align 10h
.text:00403500
.text:00403500 ; =============== S U B R O U T I N E =======================================
.text:00403500
.text:00403500
.text:00403500 ; void __cdecl sub_403500()
.text:00403500 sub_403500      proc near               ; CODE XREF: .text:004034F1↑j
.text:00403500                                         ; DATA XREF: sub_4013F0+6F↑o
.text:00403500
.text:00403500 Stream          = dword ptr -2Ch
.text:00403500 ErrorMessage    = dword ptr -28h
.text:00403500 var_24          = dword ptr -24h
.text:00403500 var_20          = byte ptr -20h
.text:00403500 var_1C          = dword ptr -1Ch
.text:00403500 var_9           = byte ptr -9
.text:00403500
.text:00403500                 push    esi
.text:00403501                 push    ebx
.text:00403502                 sub     esp, 24h
.text:00403505                 mov     edx, ds:_iob
.text:0040350B                 mov     ecx, [edx+2Ch]
.text:0040350E                 lea     esi, [edx+20h]
.text:00403511                 shr     ecx, 5
.text:00403514                 mov     bl, cl
.text:00403516                 mov     ecx, [edx+20h]
.text:00403519                 and     bl, 1
.text:0040351C                 cmp     ecx, [esi+8]
.text:0040351F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403522                 setz    [esp+2Ch+var_9]
.text:00403527                 call    fclose
.text:0040352C                 test    eax, eax
.text:0040352E                 setnz   al
.text:00403531                 test    bl, bl
.text:00403533                 jnz     loc_4035C3
.text:00403539                 test    al, al
.text:0040353B                 jz      short loc_403590
.text:0040353D
.text:0040353D loc_40353D:                             ; CODE XREF: sub_403500+CD↓j
.text:0040353D                 call    _errno
.text:00403542                 mov     esi, [eax]
.text:00403544
.text:00403544 loc_403544:                             ; CODE XREF: sub_403500+C7↓j
.text:00403544                 cmp     esi, 9
.text:00403547                 jz      short loc_4035B6
.text:00403549
.text:00403549 loc_403549:                             ; CODE XREF: sub_403500+B8↓j
.text:00403549                                         ; sub_403500+C1↓j
.text:00403549                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00403550                 call    ds:libintl_gettext
.text:00403556                 mov     ebx, eax
.text:00403558                 mov     eax, ds:dword_407030
.text:0040355D                 test    eax, eax
.text:0040355F                 jz      short loc_403596
.text:00403561                 mov     [esp+2Ch+Stream], eax ; char *
.text:00403564                 call    sub_404C10
.text:00403569                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040356D                 mov     edx, Code
.text:00403573                 mov     [esp+2Ch+var_1C], ebx
.text:00403577                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040357F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403583                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403586                 call    sub_405200
.text:0040358B                 nop
.text:0040358C                 lea     esi, [esi+0]
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: sub_403500+3B↑j
.text:00403590                                         ; sub_403500+B4↓j ...
.text:00403590                 add     esp, 24h
.text:00403593                 pop     ebx
.text:00403594                 pop     esi
.text:00403595                 retn
.text:00403596 ; ---------------------------------------------------------------------------
.text:00403596
.text:00403596 loc_403596:                             ; CODE XREF: sub_403500+5F↑j
.text:00403596                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040359A                 mov     ebx, Code
.text:004035A0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:004035A8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004035AC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004035AF                 call    sub_405200
.text:004035B4                 jmp     short loc_403590
.text:004035B6 ; ---------------------------------------------------------------------------
.text:004035B6
.text:004035B6 loc_4035B6:                             ; CODE XREF: sub_403500+47↑j
.text:004035B6                 test    bl, bl
.text:004035B8                 jnz     short loc_403549
.text:004035BA                 cmp     [esp+2Ch+var_9], 0
.text:004035BF                 jnz     short loc_403590
.text:004035C1                 jmp     short loc_403549
.text:004035C3 ; ---------------------------------------------------------------------------
.text:004035C3
.text:004035C3 loc_4035C3:                             ; CODE XREF: sub_403500+33↑j
.text:004035C3                 xor     esi, esi
.text:004035C5                 test    al, al
.text:004035C7                 jz      loc_403544
.text:004035CD                 jmp     loc_40353D
.text:004035CD sub_403500      endp
.text:004035CD
.text:004035CD ; ---------------------------------------------------------------------------
.text:004035D2                 align 10h
.text:004035E0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004035E0                                         ; DATA XREF: .data:Buffer↓o
.text:00403612 ; const char aSSS[]
.text:00403612 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4038D0+50↓o
.text:0040361E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040361E                                         ; DATA XREF: sub_4038D0:loc_403971↓o
.text:0040362E                 align 20h
.text:00403640 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403640                                         ; DATA XREF: sub_4038D0+100↓o
.text:00403640                 db 'ere is NO',0Ah
.text:00403640                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403640                 db 'R PURPOSE.',0Ah,0
.text:004036D8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004036D8                                         ; DATA XREF: sub_4038D0:loc_403A11↓o
.text:004036EF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004036EF                                         ; DATA XREF: sub_4038D0:loc_403A1D↓o
.text:0040370B                 align 20h
.text:00403720 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403720                                         ; DATA XREF: sub_4038D0:loc_403A29↓o
.text:00403720                 db 'and %s.',0Ah,0
.text:00403740 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403740                                         ; DATA XREF: sub_4038D0:loc_403A35↓o
.text:00403740                 db '%s, and %s.',0Ah,0
.text:00403764                 align 20h
.text:00403780 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403780                                         ; DATA XREF: sub_4038D0:loc_403A41↓o
.text:00403780                 db '%s, %s, and %s.',0Ah,0
.text:004037A8                 align 20h
.text:004037C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004037C0                                         ; DATA XREF: sub_4038D0:loc_403A4D↓o
.text:004037C0                 db '%s, %s, %s, and %s.',0Ah,0
.text:004037EC                 align 20h
.text:00403800 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403800                                         ; DATA XREF: sub_4038D0:loc_403A59↓o
.text:00403800                 db '%s, %s, %s, %s,',0Ah
.text:00403800                 db 'and %s.',0Ah,0
.text:00403830                 align 20h
.text:00403840 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403840                                         ; DATA XREF: sub_4038D0:loc_403A65↓o
.text:00403840                 db '%s, %s, %s, %s,',0Ah
.text:00403840                 db '%s, and %s.',0Ah,0
.text:00403874                 align 10h
.text:00403880 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403880                                         ; DATA XREF: sub_4038D0:def_40393D↓o
.text:00403880                 db '%s, %s, %s, %s,',0Ah
.text:00403880                 db '%s, %s, and others.',0Ah,0
.text:004038BC ; const char aSS[]
.text:004038BC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_4038D0+1B5↓o
.text:004038C3                 align 10h
.text:004038D0
.text:004038D0 ; =============== S U B R O U T I N E =======================================
.text:004038D0
.text:004038D0
.text:004038D0 ; int __cdecl sub_4038D0(FILE *, FILE *, int, int, va_list)
.text:004038D0 sub_4038D0      proc near               ; CODE XREF: sub_403410+A5↑p
.text:004038D0                                         ; .text:00403ACA↓p
.text:004038D0
.text:004038D0 Stream          = dword ptr -2Ch
.text:004038D0 Format          = dword ptr -28h
.text:004038D0 ArgList         = dword ptr -24h
.text:004038D0 var_20          = dword ptr -20h
.text:004038D0 var_1C          = dword ptr -1Ch
.text:004038D0 var_14          = dword ptr -14h
.text:004038D0 arg_0           = dword ptr  4
.text:004038D0 arg_4           = dword ptr  8
.text:004038D0 arg_8           = dword ptr  0Ch
.text:004038D0 arg_C           = dword ptr  10h
.text:004038D0 arg_10          = dword ptr  14h
.text:004038D0
.text:004038D0                 push    ebp
.text:004038D1                 push    edi
.text:004038D2                 push    esi
.text:004038D3                 push    ebx
.text:004038D4                 sub     esp, 1Ch
.text:004038D7                 xor     ebx, ebx
.text:004038D9                 mov     edi, [esp+2Ch+arg_10]
.text:004038DD                 mov     edx, [esp+2Ch+arg_8]
.text:004038E1                 mov     esi, [esp+2Ch+arg_0]
.text:004038E5                 mov     eax, [edi]
.text:004038E7                 mov     ecx, [esp+2Ch+arg_4]
.text:004038EB                 mov     [esp+2Ch+var_14], edx
.text:004038EF                 mov     ebp, [esp+2Ch+arg_C]
.text:004038F3                 lea     edx, [edi+4]
.text:004038F6                 test    eax, eax
.text:004038F8                 jz      short loc_40390C
.text:004038FA                 lea     esi, [esi+0]
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_4038D0+3A↓j
.text:00403900                 mov     eax, edx
.text:00403902                 inc     ebx
.text:00403903                 mov     eax, [eax]
.text:00403905                 add     edx, 4
.text:00403908                 test    eax, eax
.text:0040390A                 jnz     short loc_403900
.text:0040390C
.text:0040390C loc_40390C:                             ; CODE XREF: sub_4038D0+28↑j
.text:0040390C                 test    ecx, ecx
.text:0040390E                 jz      loc_403A7D
.text:00403914                 mov     [esp+2Ch+var_1C], ebp
.text:00403918                 mov     edx, [esp+2Ch+var_14]
.text:0040391C                 mov     [esp+2Ch+ArgList], ecx
.text:00403920                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00403928                 mov     [esp+2Ch+var_20], edx
.text:0040392C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040392F                 call    fprintf
.text:00403934
.text:00403934 loc_403934:                             ; CODE XREF: sub_4038D0+1C9↓j
.text:00403934                 cmp     ebx, 9          ; switch 10 cases
.text:00403937                 ja      def_40393D      ; jumptable 0040393D default case
.text:0040393D                 jmp     ds:jpt_40393D[ebx*4] ; switch jump
.text:0040393D ; ---------------------------------------------------------------------------
.text:00403944 jpt_40393D      dd offset loc_40396C    ; DATA XREF: sub_4038D0+6D↑r
.text:00403944                 dd offset loc_403971    ; jump table for switch statement
.text:00403944                 dd offset loc_403A11
.text:00403944                 dd offset loc_403A1D
.text:00403944                 dd offset loc_403A29
.text:00403944                 dd offset loc_403A35
.text:00403944                 dd offset loc_403A41
.text:00403944                 dd offset loc_403A4D
.text:00403944                 dd offset loc_403A59
.text:00403944                 dd offset loc_403A65
.text:0040396C ; ---------------------------------------------------------------------------
.text:0040396C
.text:0040396C loc_40396C:                             ; CODE XREF: sub_4038D0+6D↑j
.text:0040396C                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:0040396C                 call    abort           ; jumptable 0040393D case 0
.text:00403971 ; ---------------------------------------------------------------------------
.text:00403971
.text:00403971 loc_403971:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403971                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403971                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040393D case 1
.text:00403978                 nop
.text:00403979                 lea     esi, [esi+0]
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_4038D0+148↓j
.text:00403980                                         ; sub_4038D0+154↓j ...
.text:00403980                 call    ds:libintl_gettext
.text:00403986                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040398A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040398D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403991                 call    vfprintf
.text:00403996                 mov     ebx, [esi+4]
.text:00403999                 dec     ebx
.text:0040399A                 test    ebx, ebx
.text:0040399C                 mov     [esi+4], ebx
.text:0040399F                 js      short loc_4039FF
.text:004039A1                 mov     edi, [esi]
.text:004039A3                 mov     byte ptr [edi], 0Ah
.text:004039A6                 inc     dword ptr [esi]
.text:004039A8
.text:004039A8 loc_4039A8:                             ; CODE XREF: sub_4038D0+13F↓j
.text:004039A8                 mov     [esp+2Ch+Format], esi ; Stream
.text:004039AC                 mov     edx, Buffer
.text:004039B2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004039B5                 call    fputs
.text:004039BA                 mov     ebp, [esi+4]
.text:004039BD                 dec     ebp
.text:004039BE                 test    ebp, ebp
.text:004039C0                 mov     [esi+4], ebp
.text:004039C3                 js      short loc_4039ED
.text:004039C5                 mov     ecx, [esi]
.text:004039C7                 mov     byte ptr [ecx], 0Ah
.text:004039CA                 inc     dword ptr [esi]
.text:004039CC
.text:004039CC loc_4039CC:                             ; CODE XREF: sub_4038D0+12D↓j
.text:004039CC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004039D0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:004039D7                 call    ds:libintl_gettext
.text:004039DD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004039E1                 add     esp, 1Ch
.text:004039E4                 pop     ebx
.text:004039E5                 pop     esi
.text:004039E6                 pop     edi
.text:004039E7                 pop     ebp
.text:004039E8                 jmp     fputs
.text:004039ED ; ---------------------------------------------------------------------------
.text:004039ED
.text:004039ED loc_4039ED:                             ; CODE XREF: sub_4038D0+F3↑j
.text:004039ED                 mov     [esp+2Ch+Format], esi ; File
.text:004039F1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004039F8                 call    _flsbuf
.text:004039FD                 jmp     short loc_4039CC
.text:004039FF ; ---------------------------------------------------------------------------
.text:004039FF
.text:004039FF loc_4039FF:                             ; CODE XREF: sub_4038D0+CF↑j
.text:004039FF                 mov     [esp+2Ch+Format], esi ; File
.text:00403A03                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403A0A                 call    _flsbuf
.text:00403A0F                 jmp     short loc_4039A8
.text:00403A11 ; ---------------------------------------------------------------------------
.text:00403A11
.text:00403A11 loc_403A11:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A11                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A11                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040393D case 2
.text:00403A18                 jmp     loc_403980
.text:00403A1D ; ---------------------------------------------------------------------------
.text:00403A1D
.text:00403A1D loc_403A1D:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A1D                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A1D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040393D case 3
.text:00403A24                 jmp     loc_403980
.text:00403A29 ; ---------------------------------------------------------------------------
.text:00403A29
.text:00403A29 loc_403A29:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A29                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A29                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040393D case 4
.text:00403A30                 jmp     loc_403980
.text:00403A35 ; ---------------------------------------------------------------------------
.text:00403A35
.text:00403A35 loc_403A35:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A35                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A35                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040393D case 5
.text:00403A3C                 jmp     loc_403980
.text:00403A41 ; ---------------------------------------------------------------------------
.text:00403A41
.text:00403A41 loc_403A41:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A41                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A41                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040393D case 6
.text:00403A48                 jmp     loc_403980
.text:00403A4D ; ---------------------------------------------------------------------------
.text:00403A4D
.text:00403A4D loc_403A4D:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A4D                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A4D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040393D case 7
.text:00403A54                 jmp     loc_403980
.text:00403A59 ; ---------------------------------------------------------------------------
.text:00403A59
.text:00403A59 loc_403A59:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A59                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A59                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040393D case 8
.text:00403A60                 jmp     loc_403980
.text:00403A65 ; ---------------------------------------------------------------------------
.text:00403A65
.text:00403A65 loc_403A65:                             ; CODE XREF: sub_4038D0+6D↑j
.text:00403A65                                         ; DATA XREF: sub_4038D0:jpt_40393D↑o
.text:00403A65                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040393D case 9
.text:00403A6C                 jmp     loc_403980
.text:00403A71 ; ---------------------------------------------------------------------------
.text:00403A71
.text:00403A71 def_40393D:                             ; CODE XREF: sub_4038D0+67↑j
.text:00403A71                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040393D default case
.text:00403A78                 jmp     loc_403980
.text:00403A7D ; ---------------------------------------------------------------------------
.text:00403A7D
.text:00403A7D loc_403A7D:                             ; CODE XREF: sub_4038D0+3E↑j
.text:00403A7D                 mov     [esp+2Ch+var_20], ebp
.text:00403A81                 mov     ecx, [esp+2Ch+var_14]
.text:00403A85                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00403A8D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403A90                 mov     [esp+2Ch+ArgList], ecx
.text:00403A94                 call    fprintf
.text:00403A99                 jmp     loc_403934
.text:00403A99 sub_4038D0      endp
.text:00403A99
.text:00403A99 ; ---------------------------------------------------------------------------
.text:00403A9E                 align 10h
.text:00403AA0                 sub     esp, 1Ch
.text:00403AA3                 mov     edx, [esp+2Ch]
.text:00403AA7                 lea     ecx, [esp+30h]
.text:00403AAB                 mov     [esp+10h], ecx
.text:00403AAF                 mov     ecx, [esp+28h]
.text:00403AB3                 mov     [esp+0Ch], edx
.text:00403AB7                 mov     edx, [esp+24h]
.text:00403ABB                 mov     [esp+8], ecx
.text:00403ABF                 mov     [esp+4], edx
.text:00403AC3                 mov     edx, [esp+20h]
.text:00403AC7                 mov     [esp], edx
.text:00403ACA                 call    sub_4038D0
.text:00403ACF                 add     esp, 1Ch
.text:00403AD2                 retn
.text:00403AD2 ; ---------------------------------------------------------------------------
.text:00403AD3                 align 10h
.text:00403AE0 aLiteral        db 'literal',0          ; DATA XREF: .text:00403B20↓o
.text:00403AE8 aShell          db 'shell',0            ; DATA XREF: .text:00403B24↓o
.text:00403AEE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00403B28↓o
.text:00403AFB aC              db 'c',0                ; DATA XREF: .text:00403B2C↓o
.text:00403AFD aEscape         db 'escape',0           ; DATA XREF: .text:00403B30↓o
.text:00403B04 aLocale         db 'locale',0           ; DATA XREF: .text:00403B34↓o
.text:00403B0B aClocale        db 'clocale',0          ; DATA XREF: .text:00403B38↓o
.text:00403B13                 align 10h
.text:00403B20                 dd offset aLiteral      ; "literal"
.text:00403B24                 dd offset aShell        ; "shell"
.text:00403B28                 dd offset aShellAlways  ; "shell-always"
.text:00403B2C                 dd offset aC            ; "c"
.text:00403B30                 dd offset aEscape       ; "escape"
.text:00403B34                 dd offset aLocale       ; "locale"
.text:00403B38                 dd offset aClocale      ; "clocale"
.text:00403B3C                 dd 2 dup(0)
.text:00403B44                 dd 1, 2, 3, 4, 5, 6
.text:00403B5C asc_403B5C:                             ; DATA XREF: sub_403B70+7E↓o
.text:00403B5C                                         ; sub_403B70+A39↓o ...
.text:00403B5C                 text "UTF-16LE", '"',27h,'`'
.text:00403B62                 align 10h
.text:00403B70
.text:00403B70 ; =============== S U B R O U T I N E =======================================
.text:00403B70
.text:00403B70
.text:00403B70 ; int __cdecl sub_403B70(int, int, char *Str, int, int, int)
.text:00403B70 sub_403B70      proc near               ; CODE XREF: sub_403B70+43A↓p
.text:00403B70                                         ; .text:00404733↓p ...
.text:00403B70
.text:00403B70 C               = dword ptr -4Ch
.text:00403B70 Type            = dword ptr -48h
.text:00403B70 SizeInBytes     = dword ptr -44h
.text:00403B70 State           = dword ptr -40h
.text:00403B70 var_3C          = dword ptr -3Ch
.text:00403B70 var_38          = dword ptr -38h
.text:00403B70 var_34          = dword ptr -34h
.text:00403B70 var_30          = dword ptr -30h
.text:00403B70 var_29          = byte ptr -29h
.text:00403B70 var_28          = dword ptr -28h
.text:00403B70 var_22          = byte ptr -22h
.text:00403B70 var_21          = byte ptr -21h
.text:00403B70 var_20          = dword ptr -20h
.text:00403B70 var_1C          = dword ptr -1Ch
.text:00403B70 var_18          = mbstate_t ptr -18h
.text:00403B70 arg_0           = dword ptr  4
.text:00403B70 arg_4           = dword ptr  8
.text:00403B70 Str             = dword ptr  0Ch
.text:00403B70 arg_C           = dword ptr  10h
.text:00403B70 arg_10          = dword ptr  14h
.text:00403B70 arg_14          = dword ptr  18h
.text:00403B70
.text:00403B70                 push    ebp
.text:00403B71                 push    edi
.text:00403B72                 push    esi
.text:00403B73                 push    ebx
.text:00403B74                 sub     esp, 3Ch
.text:00403B77                 mov     edx, ds:__mb_cur_max
.text:00403B7D                 mov     [esp+4Ch+var_34], 0
.text:00403B85                 mov     [esp+4Ch+var_1C], 0
.text:00403B8D                 cmp     dword ptr [edx], 1
.text:00403B90                 mov     [esp+4Ch+var_20], 0
.text:00403B98                 mov     [esp+4Ch+var_21], 0
.text:00403B9D                 setz    [esp+4Ch+var_22]
.text:00403BA2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403BA7                 ja      short def_403BAD ; jumptable 00403BAD default case, cases 0,1
.text:00403BA9                 mov     edx, [esp+4Ch+arg_10]
.text:00403BAD                 jmp     ds:jpt_403BAD[edx*4] ; switch jump
.text:00403BAD ; ---------------------------------------------------------------------------
.text:00403BB4 jpt_403BAD      dd offset def_403BAD    ; DATA XREF: sub_403B70+3D↑r
.text:00403BB4                 dd offset def_403BAD    ; jump table for switch statement
.text:00403BB4                 dd offset loc_4044F5
.text:00403BB4                 dd offset loc_403BD0
.text:00403BB4                 dd offset loc_40451B
.text:00403BB4                 dd offset loc_404525
.text:00403BB4                 dd offset loc_404525
.text:00403BD0 ; ---------------------------------------------------------------------------
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403B70+3D↑j
.text:00403BD0                                         ; DATA XREF: sub_403B70:jpt_403BAD↑o
.text:00403BD0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00403BAD case 3
.text:00403BD4                 cmp     [esp+4Ch+var_34], eax
.text:00403BD8                 jnb     short loc_403BE1
.text:00403BDA                 mov     ebx, [esp+4Ch+arg_0]
.text:00403BDE                 mov     byte ptr [ebx], 22h ; '"'
.text:00403BE1
.text:00403BE1 loc_403BE1:                             ; CODE XREF: sub_403B70+68↑j
.text:00403BE1                 mov     [esp+4Ch+var_34], 1
.text:00403BE9                 mov     [esp+4Ch+var_21], 1
.text:00403BEE                 mov     [esp+4Ch+var_1C], offset asc_403B5C ; "\"'`"
.text:00403BF6
.text:00403BF6 loc_403BF6:                             ; CODE XREF: sub_403B70+9A6↓j
.text:00403BF6                 mov     [esp+4Ch+var_20], 1
.text:00403BFE
.text:00403BFE def_403BAD:                             ; CODE XREF: sub_403B70+37↑j
.text:00403BFE                                         ; sub_403B70+3D↑j ...
.text:00403BFE                 xor     ebp, ebp        ; jumptable 00403BAD default case, cases 0,1
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: sub_403B70+3DB↓j
.text:00403C00                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403C05                 jz      loc_4044E7
.text:00403C0B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403C0F
.text:00403C0F loc_403C0F:                             ; CODE XREF: sub_403B70+980↓j
.text:00403C0F                 jz      loc_40447E
.text:00403C15                 cmp     [esp+4Ch+var_21], 0
.text:00403C1A                 jz      short loc_403C60
.text:00403C1C                 mov     esi, [esp+4Ch+var_20]
.text:00403C20                 test    esi, esi
.text:00403C22                 jz      short loc_403C60
.text:00403C24                 mov     ecx, [esp+4Ch+var_20]
.text:00403C28                 lea     edi, [ecx+ebp]
.text:00403C2B                 cmp     edi, [esp+4Ch+arg_C]
.text:00403C2F                 ja      short loc_403C60
.text:00403C31                 cld
.text:00403C32                 mov     ebx, [esp+4Ch+Str]
.text:00403C36                 mov     edi, [esp+4Ch+var_1C]
.text:00403C3A                 add     ebx, ebp
.text:00403C3C                 mov     esi, ebx
.text:00403C3E                 cmp     ecx, ecx
.text:00403C40                 repe cmpsb
.text:00403C42                 jnz     short loc_403C60
.text:00403C44                 mov     edx, [esp+4Ch+arg_4]
.text:00403C48                 cmp     [esp+4Ch+var_34], edx
.text:00403C4C                 jnb     short loc_403C5A
.text:00403C4E                 mov     ecx, [esp+4Ch+arg_0]
.text:00403C52                 mov     eax, [esp+4Ch+var_34]
.text:00403C56                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00403C5A
.text:00403C5A loc_403C5A:                             ; CODE XREF: sub_403B70+DC↑j
.text:00403C5A                 inc     [esp+4Ch+var_34]
.text:00403C5E                 mov     esi, esi
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: sub_403B70+AA↑j
.text:00403C60                                         ; sub_403B70+B2↑j ...
.text:00403C60                 mov     edi, [esp+4Ch+Str]
.text:00403C64                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00403C69                 movzx   eax, bl
.text:00403C6C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00403C6F                 ja      def_403C75      ; jumptable 00403C75 default case, cases 1-6,14-31,64
.text:00403C75                 jmp     ds:jpt_403C75[eax*4] ; switch jump
.text:00403C75 ; ---------------------------------------------------------------------------
.text:00403C7C jpt_403C75      dd offset loc_403E78, offset def_403C75, offset def_403C75
.text:00403C7C                                         ; DATA XREF: sub_403B70+105↑r
.text:00403C7C                 dd offset def_403C75, offset def_403C75, offset def_403C75 ; jump table for switch statement
.text:00403C7C                 dd offset def_403C75, offset loc_403F50, offset loc_403F6E
.text:00403C7C                 dd offset loc_403F72, offset loc_403FB7, offset loc_403FBB
.text:00403C7C                 dd offset loc_403FBF, offset loc_403FC3, offset def_403C75
.text:00403C7C                 dd offset def_403C75, offset def_403C75, offset def_403C75
.text:00403C7C                 dd offset def_403C75, offset def_403C75, offset def_403C75
.text:00403C7C                 dd offset def_403C75, offset def_403C75, offset def_403C75
.text:00403C7C                 dd offset def_403C75, offset def_403C75, offset def_403C75
.text:00403C7C                 dd offset def_403C75, offset def_403C75, offset def_403C75
.text:00403C7C                 dd offset def_403C75, offset def_403C75, offset loc_404448
.text:00403C7C                 dd offset loc_404448, offset loc_404448, offset loc_40446A
.text:00403C7C                 dd offset loc_404448, offset def_404072, offset loc_404448
.text:00403C7C                 dd offset loc_403FC7, offset loc_404448, offset loc_404448
.text:00403C7C                 dd offset loc_404448, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset loc_404448
.text:00403C7C                 dd offset loc_404448, offset loc_404448, offset loc_404448
.text:00403C7C                 dd offset loc_40402C, offset def_403C75, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset loc_404448, offset loc_404441
.text:00403C7C                 dd offset def_404072, offset loc_404448, offset def_404072
.text:00403C7C                 dd offset loc_404448, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset def_404072, offset def_404072, offset def_404072
.text:00403C7C                 dd offset loc_404458, offset loc_404448, offset loc_404458
.text:00403C7C                 dd offset loc_40446A
.text:00403E78 ; ---------------------------------------------------------------------------
.text:00403E78
.text:00403E78 loc_403E78:                             ; CODE XREF: sub_403B70+105↑j
.text:00403E78                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403E78                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403C75 case 0
.text:00403E7D                 lea     eax, [ebp+1]
.text:00403E80                 jz      loc_403F30
.text:00403E86                 mov     esi, [esp+4Ch+arg_4]
.text:00403E8A                 cmp     [esp+4Ch+var_34], esi
.text:00403E8E                 jnb     short loc_403E9C
.text:00403E90                 mov     eax, [esp+4Ch+arg_0]
.text:00403E94                 mov     ebx, [esp+4Ch+var_34]
.text:00403E98                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00403E9C
.text:00403E9C loc_403E9C:                             ; CODE XREF: sub_403B70+31E↑j
.text:00403E9C                 inc     [esp+4Ch+var_34]
.text:00403EA0                 mov     edx, [esp+4Ch+arg_4]
.text:00403EA4                 cmp     [esp+4Ch+var_34], edx
.text:00403EA8                 jnb     short loc_403EB6
.text:00403EAA                 mov     edi, [esp+4Ch+arg_0]
.text:00403EAE                 mov     ecx, [esp+4Ch+var_34]
.text:00403EB2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403EB6
.text:00403EB6 loc_403EB6:                             ; CODE XREF: sub_403B70+338↑j
.text:00403EB6                 inc     [esp+4Ch+var_34]
.text:00403EBA                 mov     esi, [esp+4Ch+arg_4]
.text:00403EBE                 cmp     [esp+4Ch+var_34], esi
.text:00403EC2                 jnb     short loc_403ED0
.text:00403EC4                 mov     ebx, [esp+4Ch+arg_0]
.text:00403EC8                 mov     eax, [esp+4Ch+var_34]
.text:00403ECC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403B70+352↑j
.text:00403ED0                 inc     [esp+4Ch+var_34]
.text:00403ED4                 mov     bl, 30h ; '0'
.text:00403ED6                 lea     esi, [esi+0]
.text:00403ED9                 lea     edi, [edi+0]
.text:00403EE0
.text:00403EE0 def_404072:                             ; CODE XREF: sub_403B70+105↑j
.text:00403EE0                                         ; sub_403B70+463↓j ...
.text:00403EE0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:00403EE0                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:00403EE5                 lea     eax, [ebp+1]
.text:00403EE8                 jz      short loc_403F30
.text:00403EEA                 mov     cl, bl
.text:00403EEC                 mov     edi, [esp+4Ch+arg_14]
.text:00403EF0                 mov     esi, 1
.text:00403EF5                 shr     cl, 5
.text:00403EF8                 movzx   edx, cl
.text:00403EFB                 mov     ecx, ebx
.text:00403EFD                 and     ecx, 1Fh
.text:00403F00                 shl     esi, cl
.text:00403F02                 test    [edi+edx*4+4], esi
.text:00403F06                 jz      short loc_403F22
.text:00403F08
.text:00403F08 loc_403F08:                             ; CODE XREF: sub_403B70+3FC↓j
.text:00403F08                 mov     edx, [esp+4Ch+arg_4]
.text:00403F0C                 cmp     [esp+4Ch+var_34], edx
.text:00403F10                 jnb     short loc_403F1E
.text:00403F12                 mov     edi, [esp+4Ch+arg_0]
.text:00403F16                 mov     esi, [esp+4Ch+var_34]
.text:00403F1A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00403F1E
.text:00403F1E loc_403F1E:                             ; CODE XREF: sub_403B70+3A0↑j
.text:00403F1E                 inc     [esp+4Ch+var_34]
.text:00403F22
.text:00403F22 loc_403F22:                             ; CODE XREF: sub_403B70+396↑j
.text:00403F22                 lea     eax, [ebp+1]
.text:00403F25                 lea     esi, [esi+0]
.text:00403F29                 lea     edi, [edi+0]
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403B70+310↑j
.text:00403F30                                         ; sub_403B70+378↑j ...
.text:00403F30                 mov     ebp, [esp+4Ch+arg_4]
.text:00403F34                 cmp     [esp+4Ch+var_34], ebp
.text:00403F38                 jnb     short loc_403F45
.text:00403F3A                 mov     edx, [esp+4Ch+arg_0]
.text:00403F3E                 mov     ecx, [esp+4Ch+var_34]
.text:00403F42                 mov     [ecx+edx], bl
.text:00403F45
.text:00403F45 loc_403F45:                             ; CODE XREF: sub_403B70+3C8↑j
.text:00403F45                 inc     [esp+4Ch+var_34]
.text:00403F49                 mov     ebp, eax
.text:00403F4B                 jmp     loc_403C00
.text:00403F50 ; ---------------------------------------------------------------------------
.text:00403F50
.text:00403F50 loc_403F50:                             ; CODE XREF: sub_403B70+105↑j
.text:00403F50                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403F50                 mov     dl, 61h ; 'a'   ; jumptable 00403C75 case 7
.text:00403F52                 lea     esi, [esi+0]
.text:00403F59                 lea     edi, [edi+0]
.text:00403F60
.text:00403F60 loc_403F60:                             ; CODE XREF: sub_403B70+400↓j
.text:00403F60                                         ; sub_403B70+409↓j ...
.text:00403F60                 cmp     [esp+4Ch+var_21], 0
.text:00403F65                 lea     eax, [ebp+1]
.text:00403F68                 jz      short loc_403F30
.text:00403F6A                 mov     bl, dl
.text:00403F6C                 jmp     short loc_403F08
.text:00403F6E ; ---------------------------------------------------------------------------
.text:00403F6E
.text:00403F6E loc_403F6E:                             ; CODE XREF: sub_403B70+105↑j
.text:00403F6E                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403F6E                 mov     dl, 62h ; 'b'   ; jumptable 00403C75 case 8
.text:00403F70                 jmp     short loc_403F60
.text:00403F72 ; ---------------------------------------------------------------------------
.text:00403F72
.text:00403F72 loc_403F72:                             ; CODE XREF: sub_403B70+105↑j
.text:00403F72                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403F72                 mov     dl, 74h ; 't'   ; jumptable 00403C75 case 9
.text:00403F74
.text:00403F74 loc_403F74:                             ; CODE XREF: sub_403B70+449↓j
.text:00403F74                                         ; sub_403B70+455↓j ...
.text:00403F74                 cmp     [esp+4Ch+arg_10], 1
.text:00403F79                 jnz     short loc_403F60
.text:00403F7B
.text:00403F7B loc_403F7B:                             ; CODE XREF: sub_403B70+45C↓j
.text:00403F7B                                         ; sub_403B70+4C1↓j ...
.text:00403F7B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404342 cases 91,92,94,96,124
.text:00403F83                 mov     eax, [esp+4Ch+arg_14]
.text:00403F87                 mov     edx, [esp+4Ch+arg_C]
.text:00403F8B                 mov     ecx, [esp+4Ch+Str]
.text:00403F8F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403F93                 mov     [esp+4Ch+var_38], eax ; int
.text:00403F97                 mov     ebp, [esp+4Ch+arg_0]
.text:00403F9B                 mov     [esp+4Ch+State], edx ; int
.text:00403F9F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403FA3                 mov     [esp+4Ch+Type], ebx ; int
.text:00403FA7                 mov     [esp+4Ch+C], ebp ; int
.text:00403FAA                 call    sub_403B70
.text:00403FAF
.text:00403FAF loc_403FAF:                             ; CODE XREF: sub_403B70+972↓j
.text:00403FAF                 add     esp, 3Ch
.text:00403FB2                 pop     ebx
.text:00403FB3                 pop     esi
.text:00403FB4                 pop     edi
.text:00403FB5                 pop     ebp
.text:00403FB6                 retn
.text:00403FB7 ; ---------------------------------------------------------------------------
.text:00403FB7
.text:00403FB7 loc_403FB7:                             ; CODE XREF: sub_403B70+105↑j
.text:00403FB7                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403FB7                 mov     dl, 6Eh ; 'n'   ; jumptable 00403C75 case 10
.text:00403FB9                 jmp     short loc_403F74
.text:00403FBB ; ---------------------------------------------------------------------------
.text:00403FBB
.text:00403FBB loc_403FBB:                             ; CODE XREF: sub_403B70+105↑j
.text:00403FBB                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403FBB                 mov     dl, 76h ; 'v'   ; jumptable 00403C75 case 11
.text:00403FBD                 jmp     short loc_403F60
.text:00403FBF ; ---------------------------------------------------------------------------
.text:00403FBF
.text:00403FBF loc_403FBF:                             ; CODE XREF: sub_403B70+105↑j
.text:00403FBF                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403FBF                 mov     dl, 66h ; 'f'   ; jumptable 00403C75 case 12
.text:00403FC1                 jmp     short loc_403F60
.text:00403FC3 ; ---------------------------------------------------------------------------
.text:00403FC3
.text:00403FC3 loc_403FC3:                             ; CODE XREF: sub_403B70+105↑j
.text:00403FC3                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403FC3                 mov     dl, 72h ; 'r'   ; jumptable 00403C75 case 13
.text:00403FC5                 jmp     short loc_403F74
.text:00403FC7 ; ---------------------------------------------------------------------------
.text:00403FC7
.text:00403FC7 loc_403FC7:                             ; CODE XREF: sub_403B70+105↑j
.text:00403FC7                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00403FC7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403C75 case 39
.text:00403FCC                 jz      short loc_403F7B ; jumptable 00404342 cases 91,92,94,96,124
.text:00403FCE                 cmp     [esp+4Ch+arg_10], 2
.text:00403FD3                 jnz     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:00403FD3                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:00403FD9                 mov     edx, [esp+4Ch+arg_4]
.text:00403FDD                 cmp     [esp+4Ch+var_34], edx
.text:00403FE1                 jnb     short loc_403FEF
.text:00403FE3                 mov     ecx, [esp+4Ch+arg_0]
.text:00403FE7                 mov     edi, [esp+4Ch+var_34]
.text:00403FEB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00403FEF
.text:00403FEF loc_403FEF:                             ; CODE XREF: sub_403B70+471↑j
.text:00403FEF                 inc     [esp+4Ch+var_34]
.text:00403FF3                 mov     eax, [esp+4Ch+arg_4]
.text:00403FF7                 cmp     [esp+4Ch+var_34], eax
.text:00403FFB                 jnb     short loc_404009
.text:00403FFD                 mov     esi, [esp+4Ch+arg_0]
.text:00404001                 mov     edx, [esp+4Ch+var_34]
.text:00404005                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404009
.text:00404009 loc_404009:                             ; CODE XREF: sub_403B70+48B↑j
.text:00404009                 inc     [esp+4Ch+var_34]
.text:0040400D                 mov     edi, [esp+4Ch+arg_4]
.text:00404011                 cmp     [esp+4Ch+var_34], edi
.text:00404015                 jnb     short loc_404023
.text:00404017                 mov     ecx, [esp+4Ch+arg_0]
.text:0040401B                 mov     eax, [esp+4Ch+var_34]
.text:0040401F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404023
.text:00404023 loc_404023:                             ; CODE XREF: sub_403B70+4A5↑j
.text:00404023                                         ; sub_403B70+5C4↓j ...
.text:00404023                 inc     [esp+4Ch+var_34]
.text:00404027                 jmp     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:00404027                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:0040402C ; ---------------------------------------------------------------------------
.text:0040402C
.text:0040402C loc_40402C:                             ; CODE XREF: sub_403B70+105↑j
.text:0040402C                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:0040402C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403C75 case 63
.text:00404031                 jz      loc_403F7B      ; jumptable 00404342 cases 91,92,94,96,124
.text:00404037                 cmp     [esp+4Ch+arg_10], 3
.text:0040403C                 jnz     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:0040403C                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:00404042                 lea     edx, [ebp+2]
.text:00404045                 cmp     edx, [esp+4Ch+arg_C]
.text:00404049                 jnb     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:00404049                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:0040404F                 mov     esi, [esp+4Ch+Str]
.text:00404053                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404058                 jnz     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:00404058                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:0040405E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404063                 movsx   eax, cl
.text:00404066                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404069                 cmp     eax, 1Dh
.text:0040406C                 ja      def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:0040406C                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:00404072                 jmp     ds:jpt_404072[eax*4] ; switch jump
.text:00404072 ; ---------------------------------------------------------------------------
.text:00404079                 align 4
.text:0040407C jpt_404072      dd offset loc_4040F4    ; DATA XREF: sub_403B70+502↑r
.text:0040407C                 dd offset def_404072    ; jump table for switch statement
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset loc_4040F4
.text:0040407C                 dd offset loc_4040F4
.text:0040407C                 dd offset loc_4040F4
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset loc_4040F4
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset loc_4040F4
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset def_404072
.text:0040407C                 dd offset loc_4040F4
.text:0040407C                 dd offset loc_4040F4
.text:0040407C                 dd offset loc_4040F4
.text:004040F4 ; ---------------------------------------------------------------------------
.text:004040F4
.text:004040F4 loc_4040F4:                             ; CODE XREF: sub_403B70+502↑j
.text:004040F4                                         ; DATA XREF: sub_403B70:jpt_404072↑o
.text:004040F4                 mov     ebp, edx        ; jumptable 00404072 cases 33,39-41,45,47,60-62
.text:004040F6                 mov     bl, cl
.text:004040F8                 mov     edx, [esp+4Ch+arg_4]
.text:004040FC                 cmp     [esp+4Ch+var_34], edx
.text:00404100                 jnb     short loc_40410E
.text:00404102                 mov     ecx, [esp+4Ch+arg_0]
.text:00404106                 mov     edi, [esp+4Ch+var_34]
.text:0040410A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040410E
.text:0040410E loc_40410E:                             ; CODE XREF: sub_403B70+590↑j
.text:0040410E                 inc     [esp+4Ch+var_34]
.text:00404112                 mov     eax, [esp+4Ch+arg_4]
.text:00404116                 cmp     [esp+4Ch+var_34], eax
.text:0040411A                 jnb     short loc_404128
.text:0040411C                 mov     edx, [esp+4Ch+arg_0]
.text:00404120                 mov     esi, [esp+4Ch+var_34]
.text:00404124                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404128
.text:00404128 loc_404128:                             ; CODE XREF: sub_403B70+5AA↑j
.text:00404128                 inc     [esp+4Ch+var_34]
.text:0040412C                 mov     edi, [esp+4Ch+arg_4]
.text:00404130                 cmp     [esp+4Ch+var_34], edi
.text:00404134                 jnb     loc_404023
.text:0040413A                 mov     eax, [esp+4Ch+arg_0]
.text:0040413E                 mov     ecx, [esp+4Ch+var_34]
.text:00404142                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404146                 jmp     loc_404023
.text:00404146 ; ---------------------------------------------------------------------------
.text:0040414B                 align 10h
.text:00404150
.text:00404150 def_403C75:                             ; CODE XREF: sub_403B70+FF↑j
.text:00404150                                         ; sub_403B70+105↑j
.text:00404150                                         ; DATA XREF: ...
.text:00404150                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403C75 default case, cases 1-6,14-31,64
.text:00404155                 jz      loc_404280
.text:0040415B                 mov     [esp+4Ch+var_28], 1
.text:00404163                 mov     esi, ds:__mb_cur_max
.text:00404169                 movzx   edx, bl
.text:0040416C                 cmp     dword ptr [esi], 1
.text:0040416F                 jz      loc_404264
.text:00404175                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040417D                 mov     [esp+4Ch+C], edx ; C
.text:00404180                 call    _isctype
.text:00404185
.text:00404185 loc_404185:                             ; CODE XREF: sub_403B70+705↓j
.text:00404185                 test    eax, eax
.text:00404187                 setnz   [esp+4Ch+var_29]
.text:0040418C
.text:0040418C loc_40418C:                             ; CODE XREF: sub_403B70+7A5↓j
.text:0040418C                 cmp     [esp+4Ch+var_21], 0
.text:00404191                 lea     eax, [ebp+1]
.text:00404194                 jz      loc_403F30
.text:0040419A                 cmp     [esp+4Ch+var_29], 0
.text:0040419F                 jnz     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:0040419F                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:004041A5
.text:004041A5 loc_4041A5:                             ; CODE XREF: sub_403B70+7AB↓j
.text:004041A5                 mov     eax, [esp+4Ch+var_28]
.text:004041A9                 lea     edx, [eax+ebp]
.text:004041AC                 lea     esi, [esi+0]
.text:004041B0
.text:004041B0 loc_4041B0:                             ; CODE XREF: sub_403B70+6EF↓j
.text:004041B0                 cmp     [esp+4Ch+var_21], 0
.text:004041B5                 jz      short loc_404230
.text:004041B7                 cmp     [esp+4Ch+var_29], 0
.text:004041BC                 jnz     short loc_404230
.text:004041BE                 mov     edi, [esp+4Ch+arg_4]
.text:004041C2                 cmp     [esp+4Ch+var_34], edi
.text:004041C6                 jnb     short loc_4041D4
.text:004041C8                 mov     esi, [esp+4Ch+arg_0]
.text:004041CC                 mov     eax, [esp+4Ch+var_34]
.text:004041D0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:004041D4
.text:004041D4 loc_4041D4:                             ; CODE XREF: sub_403B70+656↑j
.text:004041D4                 inc     [esp+4Ch+var_34]
.text:004041D8                 mov     ecx, [esp+4Ch+arg_4]
.text:004041DC                 cmp     [esp+4Ch+var_34], ecx
.text:004041E0                 jnb     short loc_4041F5
.text:004041E2                 mov     cl, bl
.text:004041E4                 mov     esi, [esp+4Ch+arg_0]
.text:004041E8                 mov     edi, [esp+4Ch+var_34]
.text:004041EC                 shr     cl, 6
.text:004041EF                 add     cl, 30h ; '0'
.text:004041F2                 mov     [edi+esi], cl
.text:004041F5
.text:004041F5 loc_4041F5:                             ; CODE XREF: sub_403B70+670↑j
.text:004041F5                 inc     [esp+4Ch+var_34]
.text:004041F9                 mov     edi, [esp+4Ch+arg_4]
.text:004041FD                 cmp     [esp+4Ch+var_34], edi
.text:00404201                 jnb     short loc_404219
.text:00404203                 mov     cl, bl
.text:00404205                 mov     esi, [esp+4Ch+arg_0]
.text:00404209                 shr     cl, 3
.text:0040420C                 mov     edi, [esp+4Ch+var_34]
.text:00404210                 and     cl, 7
.text:00404213                 add     cl, 30h ; '0'
.text:00404216                 mov     [edi+esi], cl
.text:00404219
.text:00404219 loc_404219:                             ; CODE XREF: sub_403B70+691↑j
.text:00404219                 inc     [esp+4Ch+var_34]
.text:0040421D                 and     bl, 7
.text:00404220                 add     bl, 30h ; '0'
.text:00404223                 lea     esi, [esi+0]
.text:00404229                 lea     edi, [edi+0]
.text:00404230
.text:00404230 loc_404230:                             ; CODE XREF: sub_403B70+645↑j
.text:00404230                                         ; sub_403B70+64C↑j
.text:00404230                 lea     eax, [ebp+1]
.text:00404233                 cmp     edx, eax
.text:00404235                 jbe     loc_403F30
.text:0040423B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040423F                 cmp     [esp+4Ch+var_34], ebp
.text:00404243                 jnb     short loc_404250
.text:00404245                 mov     ecx, [esp+4Ch+arg_0]
.text:00404249                 mov     edi, [esp+4Ch+var_34]
.text:0040424D                 mov     [edi+ecx], bl
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_403B70+6D3↑j
.text:00404250                 inc     [esp+4Ch+var_34]
.text:00404254                 mov     ebp, eax
.text:00404256                 mov     eax, [esp+4Ch+Str]
.text:0040425A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040425F                 jmp     loc_4041B0
.text:00404264 ; ---------------------------------------------------------------------------
.text:00404264
.text:00404264 loc_404264:                             ; CODE XREF: sub_403B70+5FF↑j
.text:00404264                 mov     ecx, ds:_pctype
.text:0040426A                 mov     edi, [ecx]
.text:0040426C                 movzx   eax, word ptr [edi+edx*2]
.text:00404270                 and     eax, 157h
.text:00404275                 jmp     loc_404185
.text:00404275 ; ---------------------------------------------------------------------------
.text:0040427A                 align 10h
.text:00404280
.text:00404280 loc_404280:                             ; CODE XREF: sub_403B70+5E5↑j
.text:00404280                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404285                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040428D                 mov     [esp+4Ch+var_28], 0
.text:00404295                 mov     [esp+4Ch+var_29], 1
.text:0040429A                 jz      loc_40442C
.text:004042A0
.text:004042A0 loc_4042A0:                             ; CODE XREF: sub_403B70+8CC↓j
.text:004042A0                 mov     ecx, [esp+4Ch+arg_C]
.text:004042A4                 lea     edx, [esp+4Ch+var_18]
.text:004042A8                 mov     edi, [esp+4Ch+Str]
.text:004042AC                 mov     [esp+4Ch+State], edx ; State
.text:004042B0                 lea     esi, [esp+4Ch+var_18._State]
.text:004042B4                 sub     ecx, ebp
.text:004042B6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004042BA                 add     edi, ebp
.text:004042BC                 mov     [esp+4Ch+var_30], edi
.text:004042C0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004042C4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004042C7                 call    mbrtowc
.text:004042CC                 test    eax, eax
.text:004042CE                 mov     edi, eax
.text:004042D0                 jz      short loc_404310
.text:004042D2                 cmp     eax, 0FFFFFFFFh
.text:004042D5                 jz      loc_404422
.text:004042DB                 cmp     eax, 0FFFFFFFEh
.text:004042DE                 jz      loc_4043E2
.text:004042E4                 cmp     [esp+4Ch+arg_10], 1
.text:004042E9                 jz      short loc_404320
.text:004042EB
.text:004042EB loc_4042EB:                             ; CODE XREF: sub_403B70+7B9↓j
.text:004042EB                                         ; sub_403B70+86D↓j
.text:004042EB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:004042F0                 mov     [esp+4Ch+Type], 157h ; Type
.text:004042F8                 mov     [esp+4Ch+C], ecx ; C
.text:004042FB                 call    iswctype
.text:00404300                 test    eax, eax
.text:00404302                 jnz     short loc_404309
.text:00404304                 mov     [esp+4Ch+var_29], 0
.text:00404309
.text:00404309 loc_404309:                             ; CODE XREF: sub_403B70+792↑j
.text:00404309                 mov     [esp+4Ch+var_28], edi
.text:0040430D                 lea     esi, [esi+0]
.text:00404310
.text:00404310 loc_404310:                             ; CODE XREF: sub_403B70+760↑j
.text:00404310                                         ; sub_403B70+87B↓j ...
.text:00404310                 cmp     [esp+4Ch+var_28], 1
.text:00404315                 jbe     loc_40418C
.text:0040431B                 jmp     loc_4041A5
.text:00404320 ; ---------------------------------------------------------------------------
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_403B70+779↑j
.text:00404320                 cmp     [esp+4Ch+arg_10], eax
.text:00404324                 mov     edx, 1
.text:00404329                 jnb     short loc_4042EB
.text:0040432B
.text:0040432B loc_40432B:                             ; CODE XREF: sub_403B70+867↓j
.text:0040432B                 mov     ecx, [esp+4Ch+Str]
.text:0040432F                 lea     esi, [edx+ebp]
.text:00404332                 movsx   eax, byte ptr [esi+ecx]
.text:00404336                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404339                 cmp     eax, 21h
.text:0040433C                 ja      def_404342      ; jumptable 00404342 default case, cases 93,95,97-123
.text:00404342                 jmp     ds:jpt_404342[eax*4] ; switch jump
.text:00404342 ; ---------------------------------------------------------------------------
.text:00404349                 align 4
.text:0040434C jpt_404342      dd offset loc_403F7B    ; DATA XREF: sub_403B70+7D2↑r
.text:0040434C                 dd offset loc_403F7B    ; jump table for switch statement
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset loc_403F7B
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset loc_403F7B
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset def_404342
.text:0040434C                 dd offset loc_403F7B
.text:004043D4 ; ---------------------------------------------------------------------------
.text:004043D4
.text:004043D4 def_404342:                             ; CODE XREF: sub_403B70+7CC↑j
.text:004043D4                                         ; sub_403B70+7D2↑j
.text:004043D4                                         ; DATA XREF: ...
.text:004043D4                 inc     edx             ; jumptable 00404342 default case, cases 93,95,97-123
.text:004043D5                 cmp     edx, edi
.text:004043D7                 jb      loc_40432B
.text:004043DD                 jmp     loc_4042EB
.text:004043E2 ; ---------------------------------------------------------------------------
.text:004043E2
.text:004043E2 loc_4043E2:                             ; CODE XREF: sub_403B70+76E↑j
.text:004043E2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004043E6                 mov     [esp+4Ch+var_29], 0
.text:004043EB                 jnb     loc_404310
.text:004043F1                 mov     eax, [esp+4Ch+var_30]
.text:004043F5                 cmp     byte ptr [eax], 0
.text:004043F8                 jz      loc_404310
.text:004043FE
.text:004043FE loc_4043FE:                             ; CODE XREF: sub_403B70+8AB↓j
.text:004043FE                 inc     [esp+4Ch+var_28]
.text:00404402                 mov     esi, [esp+4Ch+var_28]
.text:00404406                 lea     eax, [esi+ebp]
.text:00404409                 cmp     eax, [esp+4Ch+arg_C]
.text:0040440D                 jnb     loc_404310
.text:00404413                 mov     edi, [esp+4Ch+Str]
.text:00404417                 cmp     byte ptr [eax+edi], 0
.text:0040441B                 jnz     short loc_4043FE
.text:0040441D                 jmp     loc_404310
.text:00404422 ; ---------------------------------------------------------------------------
.text:00404422
.text:00404422 loc_404422:                             ; CODE XREF: sub_403B70+765↑j
.text:00404422                 mov     [esp+4Ch+var_29], 0
.text:00404427                 jmp     loc_404310
.text:0040442C ; ---------------------------------------------------------------------------
.text:0040442C
.text:0040442C loc_40442C:                             ; CODE XREF: sub_403B70+72A↑j
.text:0040442C                 mov     edx, [esp+4Ch+Str]
.text:00404430                 mov     [esp+4Ch+C], edx ; Str
.text:00404433                 call    strlen
.text:00404438                 mov     [esp+4Ch+arg_C], eax
.text:0040443C                 jmp     loc_4042A0
.text:00404441 ; ---------------------------------------------------------------------------
.text:00404441
.text:00404441 loc_404441:                             ; CODE XREF: sub_403B70+105↑j
.text:00404441                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00404441                 mov     dl, bl          ; jumptable 00403C75 case 92
.text:00404443                 jmp     loc_403F74
.text:00404448 ; ---------------------------------------------------------------------------
.text:00404448
.text:00404448 loc_404448:                             ; CODE XREF: sub_403B70+105↑j
.text:00404448                                         ; sub_403B70+902↓j
.text:00404448                                         ; DATA XREF: ...
.text:00404448                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403C75 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040444D                 jnz     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:0040444D                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:00404453                 jmp     loc_403F7B      ; jumptable 00404342 cases 91,92,94,96,124
.text:00404458 ; ---------------------------------------------------------------------------
.text:00404458
.text:00404458 loc_404458:                             ; CODE XREF: sub_403B70+105↑j
.text:00404458                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:00404458                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403C75 cases 123,125
.text:0040445D                 jz      short loc_404474
.text:0040445F                 cmp     [esp+4Ch+arg_C], 1
.text:00404464
.text:00404464 loc_404464:                             ; CODE XREF: sub_403B70+90C↓j
.text:00404464                 jnz     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:00404464                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:0040446A
.text:0040446A loc_40446A:                             ; CODE XREF: sub_403B70+105↑j
.text:0040446A                                         ; DATA XREF: sub_403B70:jpt_403C75↑o
.text:0040446A                 test    ebp, ebp        ; jumptable 00403C75 cases 35,126
.text:0040446C                 jnz     def_404072      ; jumptable 00403C75 cases 37,43-58,65-90,93,95,97-122
.text:0040446C                                         ; jumptable 00404072 default case, cases 34-38,42-44,46,48-59
.text:00404472                 jmp     short loc_404448 ; jumptable 00403C75 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404474 ; ---------------------------------------------------------------------------
.text:00404474
.text:00404474 loc_404474:                             ; CODE XREF: sub_403B70+8ED↑j
.text:00404474                 mov     esi, [esp+4Ch+Str]
.text:00404478                 cmp     byte ptr [esi+1], 0
.text:0040447C                 jmp     short loc_404464
.text:0040447E ; ---------------------------------------------------------------------------
.text:0040447E
.text:0040447E loc_40447E:                             ; CODE XREF: sub_403B70:loc_403C0F↑j
.text:0040447E                 test    ebp, ebp
.text:00404480                 jnz     short loc_40448D
.text:00404482                 cmp     [esp+4Ch+arg_10], 1
.text:00404487                 jz      loc_403F7B      ; jumptable 00404342 cases 91,92,94,96,124
.text:0040448D
.text:0040448D loc_40448D:                             ; CODE XREF: sub_403B70+910↑j
.text:0040448D                 mov     esi, [esp+4Ch+var_1C]
.text:00404491                 test    esi, esi
.text:00404493                 jz      short loc_4044C8
.text:00404495                 mov     edi, [esp+4Ch+var_1C]
.text:00404499                 movzx   eax, byte ptr [edi]
.text:0040449C                 test    al, al
.text:0040449E                 jz      short loc_4044C8
.text:004044A0
.text:004044A0 loc_4044A0:                             ; CODE XREF: sub_403B70+956↓j
.text:004044A0                 mov     ebp, [esp+4Ch+arg_4]
.text:004044A4                 cmp     [esp+4Ch+var_34], ebp
.text:004044A8                 jnb     short loc_4044B5
.text:004044AA                 mov     ecx, [esp+4Ch+arg_0]
.text:004044AE                 mov     ebx, [esp+4Ch+var_34]
.text:004044B2                 mov     [ebx+ecx], al
.text:004044B5
.text:004044B5 loc_4044B5:                             ; CODE XREF: sub_403B70+938↑j
.text:004044B5                 inc     [esp+4Ch+var_1C]
.text:004044B9                 inc     [esp+4Ch+var_34]
.text:004044BD                 mov     edx, [esp+4Ch+var_1C]
.text:004044C1                 movzx   eax, byte ptr [edx]
.text:004044C4                 test    al, al
.text:004044C6                 jnz     short loc_4044A0
.text:004044C8
.text:004044C8 loc_4044C8:                             ; CODE XREF: sub_403B70+923↑j
.text:004044C8                                         ; sub_403B70+92E↑j
.text:004044C8                 mov     eax, [esp+4Ch+arg_4]
.text:004044CC                 cmp     [esp+4Ch+var_34], eax
.text:004044D0                 jnb     short loc_4044DE
.text:004044D2                 mov     edi, [esp+4Ch+arg_0]
.text:004044D6                 mov     esi, [esp+4Ch+var_34]
.text:004044DA                 mov     byte ptr [esi+edi], 0
.text:004044DE
.text:004044DE loc_4044DE:                             ; CODE XREF: sub_403B70+960↑j
.text:004044DE                 mov     eax, [esp+4Ch+var_34]
.text:004044E2                 jmp     loc_403FAF
.text:004044E7 ; ---------------------------------------------------------------------------
.text:004044E7
.text:004044E7 loc_4044E7:                             ; CODE XREF: sub_403B70+95↑j
.text:004044E7                 mov     ebx, [esp+4Ch+Str]
.text:004044EB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004044F0                 jmp     loc_403C0F
.text:004044F5 ; ---------------------------------------------------------------------------
.text:004044F5
.text:004044F5 loc_4044F5:                             ; CODE XREF: sub_403B70+3D↑j
.text:004044F5                                         ; DATA XREF: sub_403B70:jpt_403BAD↑o
.text:004044F5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00403BAD case 2
.text:004044F9                 cmp     [esp+4Ch+var_34], edx
.text:004044FD                 jnb     short loc_404506
.text:004044FF                 mov     ecx, [esp+4Ch+arg_0]
.text:00404503                 mov     byte ptr [ecx], 27h ; '''
.text:00404506
.text:00404506 loc_404506:                             ; CODE XREF: sub_403B70+98D↑j
.text:00404506                 mov     [esp+4Ch+var_34], 1
.text:0040450E                 mov     [esp+4Ch+var_1C], 403B5Eh
.text:00404516                 jmp     loc_403BF6
.text:0040451B ; ---------------------------------------------------------------------------
.text:0040451B
.text:0040451B loc_40451B:                             ; CODE XREF: sub_403B70+3D↑j
.text:0040451B                                         ; DATA XREF: sub_403B70:jpt_403BAD↑o
.text:0040451B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00403BAD case 4
.text:00404520                 jmp     def_403BAD      ; jumptable 00403BAD default case, cases 0,1
.text:00404525 ; ---------------------------------------------------------------------------
.text:00404525
.text:00404525 loc_404525:                             ; CODE XREF: sub_403B70+3D↑j
.text:00404525                                         ; DATA XREF: sub_403B70:jpt_403BAD↑o
.text:00404525                 mov     [esp+4Ch+C], 403B60h ; jumptable 00403BAD cases 5,6
.text:0040452C                 call    ds:libintl_gettext
.text:00404532                 cmp     eax, 403B60h
.text:00404537                 mov     edi, eax
.text:00404539                 jz      short loc_4045B0
.text:0040453B
.text:0040453B loc_40453B:                             ; CODE XREF: sub_403B70+A45↓j
.text:0040453B                                         ; sub_403B70+A4C↓j
.text:0040453B                 mov     [esp+4Ch+C], 403B5Eh
.text:00404542                 call    ds:libintl_gettext
.text:00404548                 cmp     eax, 403B5Eh
.text:0040454D                 mov     edx, eax
.text:0040454F                 jz      short loc_4045A2
.text:00404551
.text:00404551 loc_404551:                             ; CODE XREF: sub_403B70+A37↓j
.text:00404551                                         ; sub_403B70+A3E↓j
.text:00404551                 mov     [esp+4Ch+var_1C], edi
.text:00404555                 cmp     byte ptr [edi], 0
.text:00404558                 jz      short loc_404588
.text:0040455A
.text:0040455A loc_40455A:                             ; CODE XREF: sub_403B70+A16↓j
.text:0040455A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040455E                 cmp     [esp+4Ch+var_34], ecx
.text:00404562                 jnb     short loc_404577
.text:00404564                 mov     ebp, [esp+4Ch+var_1C]
.text:00404568                 mov     edi, [esp+4Ch+arg_0]
.text:0040456C                 mov     esi, [esp+4Ch+var_34]
.text:00404570                 movzx   ebx, byte ptr [ebp+0]
.text:00404574                 mov     [esi+edi], bl
.text:00404577
.text:00404577 loc_404577:                             ; CODE XREF: sub_403B70+9F2↑j
.text:00404577                 inc     [esp+4Ch+var_1C]
.text:0040457B                 inc     [esp+4Ch+var_34]
.text:0040457F                 mov     eax, [esp+4Ch+var_1C]
.text:00404583                 cmp     byte ptr [eax], 0
.text:00404586                 jnz     short loc_40455A
.text:00404588
.text:00404588 loc_404588:                             ; CODE XREF: sub_403B70+9E8↑j
.text:00404588                 mov     [esp+4Ch+var_21], 1
.text:0040458D                 mov     [esp+4Ch+var_1C], edx
.text:00404591                 mov     [esp+4Ch+C], edx ; Str
.text:00404594                 call    strlen
.text:00404599                 mov     [esp+4Ch+var_20], eax
.text:0040459D                 jmp     def_403BAD      ; jumptable 00403BAD default case, cases 0,1
.text:004045A2 ; ---------------------------------------------------------------------------
.text:004045A2
.text:004045A2 loc_4045A2:                             ; CODE XREF: sub_403B70+9DF↑j
.text:004045A2                 cmp     [esp+4Ch+arg_10], 6
.text:004045A7                 jnz     short loc_404551
.text:004045A9                 mov     edx, offset asc_403B5C ; "\"'`"
.text:004045AE                 jmp     short loc_404551
.text:004045B0 ; ---------------------------------------------------------------------------
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_403B70+9C9↑j
.text:004045B0                 cmp     [esp+4Ch+arg_10], 6
.text:004045B5                 jnz     short loc_40453B
.text:004045B7                 mov     edi, offset asc_403B5C ; "\"'`"
.text:004045BC                 jmp     loc_40453B
.text:004045BC sub_403B70      endp
.text:004045BC
.text:004045C1 ; ---------------------------------------------------------------------------
.text:004045C1                 jmp     short loc_4045D0
.text:004045C1 ; ---------------------------------------------------------------------------
.text:004045C3                 align 10h
.text:004045D0
.text:004045D0 loc_4045D0:                             ; CODE XREF: .text:004045C1↑j
.text:004045D0                 sub     esp, 0Ch
.text:004045D3                 mov     [esp+4], ebx
.text:004045D7                 mov     [esp+8], esi
.text:004045DB                 call    _errno
.text:004045E0                 mov     esi, [eax]
.text:004045E2                 mov     dword ptr [esp], 24h ; '$'
.text:004045E9                 call    sub_404EC0
.text:004045EE                 mov     edx, [esp+10h]
.text:004045F2                 mov     ebx, eax
.text:004045F4                 test    edx, edx
.text:004045F6                 jz      short loc_404641
.text:004045F8
.text:004045F8 loc_4045F8:                             ; CODE XREF: .text:00404646↓j
.text:004045F8                 mov     ecx, [edx]
.text:004045FA                 mov     [ebx], ecx
.text:004045FC                 mov     ecx, [edx+4]
.text:004045FF                 mov     [ebx+4], ecx
.text:00404602                 mov     ecx, [edx+8]
.text:00404605                 mov     [ebx+8], ecx
.text:00404608                 mov     ecx, [edx+0Ch]
.text:0040460B                 mov     [ebx+0Ch], ecx
.text:0040460E                 mov     ecx, [edx+10h]
.text:00404611                 mov     [ebx+10h], ecx
.text:00404614                 mov     ecx, [edx+14h]
.text:00404617                 mov     [ebx+14h], ecx
.text:0040461A                 mov     ecx, [edx+18h]
.text:0040461D                 mov     [ebx+18h], ecx
.text:00404620                 mov     ecx, [edx+1Ch]
.text:00404623                 mov     [ebx+1Ch], ecx
.text:00404626                 mov     ecx, [edx+20h]
.text:00404629                 mov     [ebx+20h], ecx
.text:0040462C                 call    _errno
.text:00404631                 mov     [eax], esi
.text:00404633                 mov     esi, [esp+8]
.text:00404637                 mov     eax, ebx
.text:00404639                 mov     ebx, [esp+4]
.text:0040463D                 add     esp, 0Ch
.text:00404640                 retn
.text:00404641 ; ---------------------------------------------------------------------------
.text:00404641
.text:00404641 loc_404641:                             ; CODE XREF: .text:004045F6↑j
.text:00404641                 mov     edx, offset dword_407140
.text:00404646                 jmp     short loc_4045F8
.text:00404646 ; ---------------------------------------------------------------------------
.text:00404648                 align 10h
.text:00404650                 mov     eax, [esp+4]
.text:00404654                 test    eax, eax
.text:00404656                 jz      short loc_404660
.text:00404658
.text:00404658 loc_404658:                             ; CODE XREF: .text:00404665↓j
.text:00404658                 mov     eax, [eax]
.text:0040465A                 retn
.text:0040465A ; ---------------------------------------------------------------------------
.text:0040465B                 align 10h
.text:00404660
.text:00404660 loc_404660:                             ; CODE XREF: .text:00404656↑j
.text:00404660                 mov     eax, offset dword_407140
.text:00404665                 jmp     short loc_404658
.text:00404665 ; ---------------------------------------------------------------------------
.text:00404667                 align 10h
.text:00404670                 mov     edx, [esp+4]
.text:00404674                 test    edx, edx
.text:00404676                 jz      short loc_404680
.text:00404678
.text:00404678 loc_404678:                             ; CODE XREF: .text:00404685↓j
.text:00404678                 mov     ecx, [esp+8]
.text:0040467C                 mov     [edx], ecx
.text:0040467E                 retn
.text:0040467E ; ---------------------------------------------------------------------------
.text:0040467F                 align 10h
.text:00404680
.text:00404680 loc_404680:                             ; CODE XREF: .text:00404676↑j
.text:00404680                 mov     edx, offset dword_407140
.text:00404685                 jmp     short loc_404678
.text:00404685 ; ---------------------------------------------------------------------------
.text:00404687                 align 10h
.text:00404690                 sub     esp, 8
.text:00404693                 mov     eax, [esp+0Ch]
.text:00404697                 movzx   ecx, byte ptr [esp+10h]
.text:0040469C                 mov     [esp], ebx
.text:0040469F                 mov     ebx, [esp+14h]
.text:004046A3                 mov     [esp+4], esi
.text:004046A7                 mov     dl, cl
.text:004046A9                 shr     dl, 5
.text:004046AC                 movzx   edx, dl
.text:004046AF                 shl     edx, 2
.text:004046B2                 test    eax, eax
.text:004046B4                 lea     esi, [edx+eax+4]
.text:004046B8                 jz      short loc_4046E0
.text:004046BA
.text:004046BA loc_4046BA:                             ; CODE XREF: .text:004046E6↓j
.text:004046BA                 mov     edx, [esi]
.text:004046BC                 and     ecx, 1Fh
.text:004046BF                 and     ebx, 1
.text:004046C2                 mov     eax, edx
.text:004046C4                 shr     eax, cl
.text:004046C6                 and     eax, 1
.text:004046C9                 xor     ebx, eax
.text:004046CB                 shl     ebx, cl
.text:004046CD                 xor     edx, ebx
.text:004046CF                 mov     [esi], edx
.text:004046D1                 mov     ebx, [esp]
.text:004046D4                 mov     esi, [esp+4]
.text:004046D8                 add     esp, 8
.text:004046DB                 retn
.text:004046DB ; ---------------------------------------------------------------------------
.text:004046DC                 align 10h
.text:004046E0
.text:004046E0 loc_4046E0:                             ; CODE XREF: .text:004046B8↑j
.text:004046E0                 lea     esi, dword_407144[edx]
.text:004046E6                 jmp     short loc_4046BA
.text:004046E6 ; ---------------------------------------------------------------------------
.text:004046E8                 align 10h
.text:004046F0                 sub     esp, 2Ch
.text:004046F3                 mov     [esp+24h], ebx
.text:004046F7                 mov     ebx, [esp+40h]
.text:004046FB                 mov     [esp+28h], esi
.text:004046FF                 test    ebx, ebx
.text:00404701                 jz      short loc_404750
.text:00404703
.text:00404703 loc_404703:                             ; CODE XREF: .text:00404755↓j
.text:00404703                 call    _errno
.text:00404708                 mov     esi, [eax]
.text:0040470A                 mov     [esp+14h], ebx
.text:0040470E                 mov     edx, [ebx]
.text:00404710                 mov     ecx, [esp+38h]
.text:00404714                 mov     ebx, [esp+3Ch]
.text:00404718                 mov     [esp+10h], edx
.text:0040471C                 mov     edx, [esp+34h]
.text:00404720                 mov     [esp+0Ch], ebx
.text:00404724                 mov     [esp+8], ecx
.text:00404728                 mov     [esp+4], edx
.text:0040472C                 mov     edx, [esp+30h]
.text:00404730                 mov     [esp], edx
.text:00404733                 call    sub_403B70
.text:00404738                 mov     ebx, eax
.text:0040473A                 call    _errno
.text:0040473F                 mov     [eax], esi
.text:00404741                 mov     esi, [esp+28h]
.text:00404745                 mov     eax, ebx
.text:00404747                 mov     ebx, [esp+24h]
.text:0040474B                 add     esp, 2Ch
.text:0040474E                 retn
.text:0040474E ; ---------------------------------------------------------------------------
.text:0040474F                 align 10h
.text:00404750
.text:00404750 loc_404750:                             ; CODE XREF: .text:00404701↑j
.text:00404750                 mov     ebx, offset dword_407140
.text:00404755                 jmp     short loc_404703
.text:00404755 ; ---------------------------------------------------------------------------
.text:00404757                 align 10h
.text:00404760                 push    ebp
.text:00404761                 push    edi
.text:00404762                 push    esi
.text:00404763                 push    ebx
.text:00404764                 sub     esp, 2Ch
.text:00404767                 mov     ebp, [esp+48h]
.text:0040476B                 call    _errno
.text:00404770                 mov     edx, [eax]
.text:00404772                 test    ebp, ebp
.text:00404774                 mov     ebx, ebp
.text:00404776                 mov     [esp+28h], edx
.text:0040477A                 jz      loc_404830
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: .text:00404835↓j
.text:00404780                 call    _errno
.text:00404785                 mov     edi, [eax]
.text:00404787                 mov     esi, ebp
.text:00404789                 mov     [esp+14h], ebx
.text:0040478D                 mov     ecx, [ebx]
.text:0040478F                 mov     dword ptr [esp], 0
.text:00404796                 mov     edx, [esp+44h]
.text:0040479A                 mov     dword ptr [esp+4], 0
.text:004047A2                 mov     eax, [esp+40h]
.text:004047A6                 mov     [esp+10h], ecx
.text:004047AA                 mov     [esp+0Ch], edx
.text:004047AE                 mov     [esp+8], eax
.text:004047B2                 call    sub_403B70
.text:004047B7                 mov     ebx, eax
.text:004047B9                 call    _errno
.text:004047BE                 mov     [eax], edi
.text:004047C0                 lea     edi, [ebx+1]
.text:004047C3                 mov     [esp], edi
.text:004047C6                 call    sub_404EC0
.text:004047CB                 mov     [esp+24h], eax
.text:004047CF                 test    ebp, ebp
.text:004047D1                 jz      short loc_404822
.text:004047D3
.text:004047D3 loc_4047D3:                             ; CODE XREF: .text:00404827↓j
.text:004047D3                 call    _errno
.text:004047D8                 mov     ebp, [eax]
.text:004047DA                 mov     [esp+14h], esi
.text:004047DE                 mov     ecx, [esi]
.text:004047E0                 mov     [esp+4], edi
.text:004047E4                 mov     edx, [esp+44h]
.text:004047E8                 mov     esi, [esp+24h]
.text:004047EC                 mov     [esp+10h], ecx
.text:004047F0                 mov     eax, [esp+40h]
.text:004047F4                 mov     [esp+0Ch], edx
.text:004047F8                 mov     [esp], esi
.text:004047FB                 mov     [esp+8], eax
.text:004047FF                 call    sub_403B70
.text:00404804                 call    _errno
.text:00404809                 mov     [eax], ebp
.text:0040480B                 call    _errno
.text:00404810                 mov     ebx, [esp+28h]
.text:00404814                 mov     [eax], ebx
.text:00404816                 mov     eax, [esp+24h]
.text:0040481A                 add     esp, 2Ch
.text:0040481D                 pop     ebx
.text:0040481E                 pop     esi
.text:0040481F                 pop     edi
.text:00404820                 pop     ebp
.text:00404821                 retn
.text:00404822 ; ---------------------------------------------------------------------------
.text:00404822
.text:00404822 loc_404822:                             ; CODE XREF: .text:004047D1↑j
.text:00404822                 mov     esi, offset dword_407140
.text:00404827                 jmp     short loc_4047D3
.text:00404827 ; ---------------------------------------------------------------------------
.text:00404829                 align 10h
.text:00404830
.text:00404830 loc_404830:                             ; CODE XREF: .text:0040477A↑j
.text:00404830                 mov     ebx, offset dword_407140
.text:00404835                 jmp     loc_404780
.text:00404835 ; ---------------------------------------------------------------------------
.text:0040483A                 align 10h
.text:00404840                 sub     esp, 1Ch
.text:00404843                 mov     edx, [esp+24h]
.text:00404847                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040484F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404857                 mov     [esp+4], edx
.text:0040485B                 mov     edx, [esp+20h]
.text:0040485F                 mov     [esp], edx
.text:00404862                 call    sub_404CB0
.text:00404867                 add     esp, 1Ch
.text:0040486A                 retn
.text:0040486A ; ---------------------------------------------------------------------------
.text:0040486B                 align 10h
.text:00404870                 sub     esp, 1Ch
.text:00404873                 mov     edx, [esp+20h]
.text:00404877                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:0040487F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404887                 mov     [esp+4], edx
.text:0040488B                 mov     dword ptr [esp], 0
.text:00404892                 call    sub_404CB0
.text:00404897                 add     esp, 1Ch
.text:0040489A                 retn
.text:0040489A ; ---------------------------------------------------------------------------
.text:0040489B                 align 10h
.text:004048A0                 push    ebp
.text:004048A1                 xor     eax, eax
.text:004048A3                 mov     ecx, 8
.text:004048A8                 push    edi
.text:004048A9                 push    esi
.text:004048AA                 push    ebx
.text:004048AB                 sub     esp, 0ACh
.text:004048B1                 mov     ebp, [esp+0C4h]
.text:004048B8                 cld
.text:004048B9                 lea     edi, [esp+14h]
.text:004048BD                 mov     [esp+10h], ebp
.text:004048C1                 rep stosd
.text:004048C3                 mov     eax, [esp+30h]
.text:004048C7                 mov     edi, [esp+10h]
.text:004048CB                 mov     esi, [esp+14h]
.text:004048CF                 mov     [esp+60h], eax
.text:004048D3                 mov     ebp, [esp+18h]
.text:004048D7                 mov     eax, [esp+10h]
.text:004048DB                 mov     [esp+40h], edi
.text:004048DF                 mov     ecx, [esp+28h]
.text:004048E3                 mov     edi, [esp+1Ch]
.text:004048E7                 mov     [esp+44h], esi
.text:004048EB                 mov     edx, [esp+2Ch]
.text:004048EF                 mov     esi, [esp+20h]
.text:004048F3                 mov     [esp+70h], eax
.text:004048F7                 mov     ebx, [esp+24h]
.text:004048FB                 mov     eax, [esp+14h]
.text:004048FF                 mov     [esp+48h], ebp
.text:00404903                 mov     [esp+4Ch], edi
.text:00404907                 mov     [esp+50h], esi
.text:0040490B                 mov     [esp+54h], ebx
.text:0040490F                 mov     [esp+58h], ecx
.text:00404913                 mov     [esp+5Ch], edx
.text:00404917                 mov     [esp+74h], eax
.text:0040491B                 mov     [esp+78h], ebp
.text:0040491F                 mov     [esp+7Ch], edi
.text:00404923                 mov     [esp+80h], esi
.text:0040492A                 mov     [esp+84h], ebx
.text:00404931                 mov     ebx, [esp+30h]
.text:00404935                 mov     [esp+8Ch], edx
.text:0040493C                 mov     edx, [esp+0C8h]
.text:00404943                 mov     [esp+88h], ecx
.text:0040494A                 lea     ecx, [esp+70h]
.text:0040494E                 mov     [esp+4], edx
.text:00404952                 mov     edx, [esp+0C0h]
.text:00404959                 mov     [esp+90h], ebx
.text:00404960                 mov     [esp+0Ch], ecx
.text:00404964                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040496C                 mov     [esp], edx
.text:0040496F                 call    sub_404CB0
.text:00404974                 add     esp, 0ACh
.text:0040497A                 pop     ebx
.text:0040497B                 pop     esi
.text:0040497C                 pop     edi
.text:0040497D                 pop     ebp
.text:0040497E                 retn
.text:0040497E ; ---------------------------------------------------------------------------
.text:0040497F                 align 10h
.text:00404980                 push    ebp
.text:00404981                 xor     eax, eax
.text:00404983                 mov     ecx, 8
.text:00404988                 push    edi
.text:00404989                 push    esi
.text:0040498A                 push    ebx
.text:0040498B                 sub     esp, 0ACh
.text:00404991                 mov     edx, [esp+0C4h]
.text:00404998                 cld
.text:00404999                 lea     edi, [esp+14h]
.text:0040499D                 mov     [esp+10h], edx
.text:004049A1                 rep stosd
.text:004049A3                 mov     eax, [esp+30h]
.text:004049A7                 mov     ebp, [esp+10h]
.text:004049AB                 mov     edi, [esp+14h]
.text:004049AF                 mov     [esp+60h], eax
.text:004049B3                 mov     esi, [esp+20h]
.text:004049B7                 mov     eax, [esp+10h]
.text:004049BB                 mov     [esp+40h], ebp
.text:004049BF                 mov     ecx, [esp+28h]
.text:004049C3                 mov     ebp, [esp+18h]
.text:004049C7                 mov     [esp+44h], edi
.text:004049CB                 mov     edx, [esp+2Ch]
.text:004049CF                 mov     edi, [esp+1Ch]
.text:004049D3                 mov     [esp+70h], eax
.text:004049D7                 mov     ebx, [esp+24h]
.text:004049DB                 mov     eax, [esp+14h]
.text:004049DF                 mov     [esp+48h], ebp
.text:004049E3                 mov     [esp+4Ch], edi
.text:004049E7                 mov     [esp+50h], esi
.text:004049EB                 mov     [esp+54h], ebx
.text:004049EF                 mov     [esp+58h], ecx
.text:004049F3                 mov     [esp+5Ch], edx
.text:004049F7                 mov     [esp+74h], eax
.text:004049FB                 mov     [esp+78h], ebp
.text:004049FF                 mov     [esp+7Ch], edi
.text:00404A03                 mov     [esp+80h], esi
.text:00404A0A                 mov     [esp+84h], ebx
.text:00404A11                 mov     esi, [esp+30h]
.text:00404A15                 lea     ebx, [esp+70h]
.text:00404A19                 mov     [esp+8Ch], edx
.text:00404A20                 mov     edx, [esp+0C8h]
.text:00404A27                 mov     [esp+88h], ecx
.text:00404A2E                 mov     ecx, [esp+0CCh]
.text:00404A35                 mov     [esp+4], edx
.text:00404A39                 mov     edx, [esp+0C0h]
.text:00404A40                 mov     [esp+90h], esi
.text:00404A47                 mov     [esp+0Ch], ebx
.text:00404A4B                 mov     [esp+8], ecx
.text:00404A4F                 mov     [esp], edx
.text:00404A52                 call    sub_404CB0
.text:00404A57                 add     esp, 0ACh
.text:00404A5D                 pop     ebx
.text:00404A5E                 pop     esi
.text:00404A5F                 pop     edi
.text:00404A60                 pop     ebp
.text:00404A61                 retn
.text:00404A61 ; ---------------------------------------------------------------------------
.text:00404A62                 align 10h
.text:00404A70                 push    ebp
.text:00404A71                 xor     eax, eax
.text:00404A73                 mov     ecx, 8
.text:00404A78                 push    edi
.text:00404A79                 push    esi
.text:00404A7A                 push    ebx
.text:00404A7B                 sub     esp, 0ACh
.text:00404A81                 mov     edi, [esp+0C0h]
.text:00404A88                 cld
.text:00404A89                 mov     [esp+10h], edi
.text:00404A8D                 lea     edi, [esp+14h]
.text:00404A91                 rep stosd
.text:00404A93                 mov     eax, [esp+30h]
.text:00404A97                 mov     esi, [esp+10h]
.text:00404A9B                 mov     ebx, [esp+14h]
.text:00404A9F                 mov     [esp+60h], eax
.text:00404AA3                 mov     ebp, [esp+18h]
.text:00404AA7                 mov     eax, [esp+10h]
.text:00404AAB                 mov     [esp+40h], esi
.text:00404AAF                 mov     edi, [esp+1Ch]
.text:00404AB3                 mov     esi, [esp+20h]
.text:00404AB7                 mov     [esp+44h], ebx
.text:00404ABB                 mov     ecx, [esp+28h]
.text:00404ABF                 mov     edx, [esp+2Ch]
.text:00404AC3                 mov     [esp+70h], eax
.text:00404AC7                 mov     ebx, [esp+24h]
.text:00404ACB                 mov     eax, [esp+14h]
.text:00404ACF                 mov     [esp+48h], ebp
.text:00404AD3                 mov     [esp+4Ch], edi
.text:00404AD7                 mov     [esp+50h], esi
.text:00404ADB                 mov     [esp+54h], ebx
.text:00404ADF                 mov     [esp+58h], ecx
.text:00404AE3                 mov     [esp+5Ch], edx
.text:00404AE7                 mov     [esp+74h], eax
.text:00404AEB                 mov     [esp+78h], ebp
.text:00404AEF                 mov     [esp+7Ch], edi
.text:00404AF3                 mov     [esp+80h], esi
.text:00404AFA                 mov     [esp+84h], ebx
.text:00404B01                 mov     [esp+8Ch], edx
.text:00404B08                 lea     edx, [esp+70h]
.text:00404B0C                 mov     [esp+88h], ecx
.text:00404B13                 mov     ecx, [esp+30h]
.text:00404B17                 mov     [esp+0Ch], edx
.text:00404B1B                 mov     edx, [esp+0C4h]
.text:00404B22                 mov     [esp+90h], ecx
.text:00404B29                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404B31                 mov     [esp+4], edx
.text:00404B35                 mov     dword ptr [esp], 0
.text:00404B3C                 call    sub_404CB0
.text:00404B41                 add     esp, 0ACh
.text:00404B47                 pop     ebx
.text:00404B48                 pop     esi
.text:00404B49                 pop     edi
.text:00404B4A                 pop     ebp
.text:00404B4B                 retn
.text:00404B4B ; ---------------------------------------------------------------------------
.text:00404B4C                 align 10h
.text:00404B50                 push    edi
.text:00404B51                 push    esi
.text:00404B52                 push    ebx
.text:00404B53                 sub     esp, 40h
.text:00404B56                 mov     edx, ds:dword_40714C
.text:00404B5C                 mov     ebx, ds:dword_407140
.text:00404B62                 mov     esi, ds:dword_407148
.text:00404B68                 mov     edi, ds:dword_407144
.text:00404B6E                 mov     [esp+1Ch], edx
.text:00404B72                 mov     ecx, ds:dword_407150
.text:00404B78                 mov     edx, ds:dword_407160
.text:00404B7E                 mov     [esp+10h], ebx
.text:00404B82                 mov     ebx, ds:dword_407154
.text:00404B88                 mov     [esp+30h], edx
.text:00404B8C                 movzx   edx, byte ptr [esp+54h]
.text:00404B91                 mov     [esp+18h], esi
.text:00404B95                 mov     esi, ds:dword_40715C
.text:00404B9B                 mov     [esp+14h], edi
.text:00404B9F                 mov     edi, ds:dword_407158
.text:00404BA5                 mov     [esp+20h], ecx
.text:00404BA9                 mov     cl, dl
.text:00404BAB                 shr     cl, 5
.text:00404BAE                 mov     [esp+24h], ebx
.text:00404BB2                 movzx   ebx, cl
.text:00404BB5                 mov     [esp+2Ch], esi
.text:00404BB9                 lea     esi, [esp+10h]
.text:00404BBD                 mov     [esp+28h], edi
.text:00404BC1                 lea     edi, [esi+ebx*4]
.text:00404BC4                 mov     ebx, edx
.text:00404BC6                 mov     edx, [edi+4]
.text:00404BC9                 and     ebx, 1Fh
.text:00404BCC                 mov     cl, bl
.text:00404BCE                 mov     eax, edx
.text:00404BD0                 shr     eax, cl
.text:00404BD2                 and     eax, 1
.text:00404BD5                 xor     eax, 1
.text:00404BD8                 shl     eax, cl
.text:00404BDA                 xor     edx, eax
.text:00404BDC                 mov     [edi+4], edx
.text:00404BDF                 mov     edx, [esp+50h]
.text:00404BE3                 mov     [esp+0Ch], esi
.text:00404BE7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404BEF                 mov     [esp+4], edx
.text:00404BF3                 mov     dword ptr [esp], 0
.text:00404BFA                 call    sub_404CB0
.text:00404BFF                 add     esp, 40h
.text:00404C02                 pop     ebx
.text:00404C03                 pop     esi
.text:00404C04                 pop     edi
.text:00404C05                 retn
.text:00404C05 ; ---------------------------------------------------------------------------
.text:00404C06                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10
.text:00404C10 ; int __cdecl sub_404C10(char *)
.text:00404C10 sub_404C10      proc near               ; CODE XREF: sub_403500+64↑p
.text:00404C10
.text:00404C10 var_4C          = dword ptr -4Ch
.text:00404C10 var_48          = dword ptr -48h
.text:00404C10 var_44          = dword ptr -44h
.text:00404C10 var_40          = dword ptr -40h
.text:00404C10 var_3C          = dword ptr -3Ch
.text:00404C10 var_38          = dword ptr -38h
.text:00404C10 var_34          = dword ptr -34h
.text:00404C10 var_30          = dword ptr -30h
.text:00404C10 var_2C          = dword ptr -2Ch
.text:00404C10 var_28          = dword ptr -28h
.text:00404C10 var_24          = dword ptr -24h
.text:00404C10 var_20          = dword ptr -20h
.text:00404C10 var_1C          = dword ptr -1Ch
.text:00404C10 arg_0           = dword ptr  4
.text:00404C10
.text:00404C10                 sub     esp, 4Ch
.text:00404C13                 mov     ecx, ds:dword_407140
.text:00404C19                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00404C21                 mov     edx, ds:dword_407144
.text:00404C27                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00404C2E                 mov     [esp+4Ch+var_3C], ecx
.text:00404C32                 mov     ecx, ds:dword_40714C
.text:00404C38                 mov     [esp+4Ch+var_38], edx
.text:00404C3C                 mov     edx, ds:dword_407148
.text:00404C42                 mov     [esp+4Ch+var_30], ecx
.text:00404C46                 mov     ecx, ds:dword_407150
.text:00404C4C                 mov     eax, edx
.text:00404C4E                 shr     eax, 1Ah
.text:00404C51                 and     eax, 1
.text:00404C54                 xor     eax, 1
.text:00404C57                 mov     [esp+4Ch+var_2C], ecx
.text:00404C5B                 shl     eax, 1Ah
.text:00404C5E                 mov     ecx, ds:dword_407154
.text:00404C64                 xor     edx, eax
.text:00404C66                 mov     [esp+4Ch+var_34], edx
.text:00404C6A                 mov     edx, [esp+4Ch+arg_0]
.text:00404C6E                 mov     [esp+4Ch+var_28], ecx
.text:00404C72                 mov     ecx, ds:dword_407158
.text:00404C78                 mov     [esp+4Ch+var_48], edx ; char *
.text:00404C7C                 mov     [esp+4Ch+var_24], ecx
.text:00404C80                 mov     ecx, ds:dword_40715C
.text:00404C86                 mov     [esp+4Ch+var_20], ecx
.text:00404C8A                 mov     ecx, ds:dword_407160
.text:00404C90                 mov     [esp+4Ch+var_1C], ecx
.text:00404C94                 lea     ecx, [esp+4Ch+var_3C]
.text:00404C98                 mov     [esp+4Ch+var_40], ecx ; int
.text:00404C9C                 call    sub_404CB0
.text:00404CA1                 add     esp, 4Ch
.text:00404CA4                 retn
.text:00404CA4 sub_404C10      endp
.text:00404CA4
.text:00404CA4 ; ---------------------------------------------------------------------------
.text:00404CA5                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0
.text:00404CB0 ; int __cdecl sub_404CB0(int, char *, int, int)
.text:00404CB0 sub_404CB0      proc near               ; CODE XREF: .text:00404862↑p
.text:00404CB0                                         ; .text:00404892↑p ...
.text:00404CB0
.text:00404CB0 Block           = dword ptr -2Ch
.text:00404CB0 var_28          = dword ptr -28h
.text:00404CB0 Str             = dword ptr -24h
.text:00404CB0 var_20          = dword ptr -20h
.text:00404CB0 var_1C          = dword ptr -1Ch
.text:00404CB0 var_18          = dword ptr -18h
.text:00404CB0 var_14          = dword ptr -14h
.text:00404CB0 arg_0           = dword ptr  4
.text:00404CB0 arg_4           = dword ptr  8
.text:00404CB0 arg_8           = dword ptr  0Ch
.text:00404CB0 arg_C           = dword ptr  10h
.text:00404CB0
.text:00404CB0                 push    ebp
.text:00404CB1                 push    edi
.text:00404CB2                 push    esi
.text:00404CB3                 push    ebx
.text:00404CB4                 sub     esp, 1Ch
.text:00404CB7                 call    _errno
.text:00404CBC                 mov     edx, [eax]
.text:00404CBE                 mov     eax, [esp+2Ch+arg_0]
.text:00404CC2                 mov     [esp+2Ch+var_14], edx
.text:00404CC6                 test    eax, eax
.text:00404CC8                 js      loc_404E6A
.text:00404CCE                 mov     eax, [esp+2Ch+arg_0]
.text:00404CD2                 cmp     dword_406040, eax
.text:00404CD8                 ja      short loc_404D50
.text:00404CDA                 mov     esi, eax
.text:00404CDC                 inc     esi
.text:00404CDD                 cmp     esi, 1FFFFFFFh
.text:00404CE3                 ja      loc_404E6F
.text:00404CE9                 mov     ebx, off_40604C
.text:00404CEF                 cmp     ebx, offset dword_406044
.text:00404CF5                 jz      loc_404E41
.text:00404CFB
.text:00404CFB loc_404CFB:                             ; CODE XREF: sub_404CB0+1B5↓j
.text:00404CFB                 mov     [esp+2Ch+Block], ebx ; void *
.text:00404CFE                 lea     ecx, ds:0[esi*8]
.text:00404D05                 mov     ebp, esi
.text:00404D07                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00404D0B                 call    sub_404F50
.text:00404D10                 mov     off_40604C, eax
.text:00404D15                 mov     ebx, dword_406040
.text:00404D1B                 sub     ebp, ebx
.text:00404D1D                 lea     edi, [eax+ebx*8]
.text:00404D20                 lea     eax, ds:0[ebp*8]
.text:00404D27                 cmp     eax, 7
.text:00404D2A                 jbe     short loc_404D40
.text:00404D2C                 test    edi, 4
.text:00404D32                 jz      short loc_404D40
.text:00404D34                 mov     dword ptr [edi], 0
.text:00404D3A                 sub     eax, 4
.text:00404D3D                 add     edi, 4
.text:00404D40
.text:00404D40 loc_404D40:                             ; CODE XREF: sub_404CB0+7A↑j
.text:00404D40                                         ; sub_404CB0+82↑j
.text:00404D40                 cld
.text:00404D41                 mov     ecx, eax
.text:00404D43                 shr     ecx, 2
.text:00404D46                 xor     eax, eax
.text:00404D48                 rep stosd
.text:00404D4A                 mov     dword_406040, esi
.text:00404D50
.text:00404D50 loc_404D50:                             ; CODE XREF: sub_404CB0+28↑j
.text:00404D50                 mov     esi, off_40604C
.text:00404D56                 mov     eax, [esp+2Ch+arg_0]
.text:00404D5A                 mov     ebp, [esi+eax*8]
.text:00404D5D                 mov     edi, [esi+eax*8+4]
.text:00404D61                 mov     esi, [esp+2Ch+arg_C]
.text:00404D65                 test    esi, esi
.text:00404D67                 jz      loc_404E37
.text:00404D6D
.text:00404D6D loc_404D6D:                             ; CODE XREF: sub_404CB0+18C↓j
.text:00404D6D                 call    _errno
.text:00404D72                 mov     ebx, [eax]
.text:00404D74                 mov     [esp+2Ch+var_18], esi ; int
.text:00404D78                 mov     ecx, [esi]
.text:00404D7A                 mov     [esp+2Ch+Block], edi ; int
.text:00404D7D                 mov     edx, [esp+2Ch+arg_8]
.text:00404D81                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404D85                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404D89                 mov     ecx, [esp+2Ch+arg_4]
.text:00404D8D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404D91                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404D95                 call    sub_403B70
.text:00404D9A                 mov     esi, eax
.text:00404D9C                 call    _errno
.text:00404DA1                 mov     [eax], ebx
.text:00404DA3                 cmp     ebp, esi
.text:00404DA5                 ja      short loc_404E1B
.text:00404DA7                 lea     ebp, [esi+1]
.text:00404DAA                 mov     ebx, off_40604C
.text:00404DB0                 cmp     edi, offset unk_407040
.text:00404DB6                 mov     esi, [esp+2Ch+arg_0]
.text:00404DBA                 mov     [ebx+esi*8], ebp
.text:00404DBD                 jz      short loc_404DCD
.text:00404DBF                 mov     [esp+2Ch+Block], edi ; Block
.text:00404DC2                 call    free
.text:00404DC7                 mov     ebx, off_40604C
.text:00404DCD
.text:00404DCD loc_404DCD:                             ; CODE XREF: sub_404CB0+10D↑j
.text:00404DCD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404DD0                 call    sub_404EC0
.text:00404DD5                 mov     esi, [esp+2Ch+arg_C]
.text:00404DD9                 mov     edi, eax
.text:00404DDB                 mov     eax, [esp+2Ch+arg_0]
.text:00404DDF                 test    esi, esi
.text:00404DE1                 mov     [ebx+eax*8+4], edi
.text:00404DE5                 jz      short loc_404E30
.text:00404DE7
.text:00404DE7 loc_404DE7:                             ; CODE XREF: sub_404CB0+185↓j
.text:00404DE7                 call    _errno
.text:00404DEC                 mov     ebx, [eax]
.text:00404DEE                 mov     [esp+2Ch+var_18], esi ; int
.text:00404DF2                 mov     ecx, [esi]
.text:00404DF4                 mov     [esp+2Ch+Block], edi ; int
.text:00404DF7                 mov     edx, [esp+2Ch+arg_8]
.text:00404DFB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404DFF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404E03                 mov     ecx, [esp+2Ch+arg_4]
.text:00404E07                 mov     [esp+2Ch+var_20], edx ; int
.text:00404E0B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404E0F                 call    sub_403B70
.text:00404E14                 call    _errno
.text:00404E19                 mov     [eax], ebx
.text:00404E1B
.text:00404E1B loc_404E1B:                             ; CODE XREF: sub_404CB0+F5↑j
.text:00404E1B                 call    _errno
.text:00404E20                 mov     ebp, [esp+2Ch+var_14]
.text:00404E24                 mov     [eax], ebp
.text:00404E26                 add     esp, 1Ch
.text:00404E29                 mov     eax, edi
.text:00404E2B                 pop     ebx
.text:00404E2C                 pop     esi
.text:00404E2D                 pop     edi
.text:00404E2E                 pop     ebp
.text:00404E2F                 retn
.text:00404E30 ; ---------------------------------------------------------------------------
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404CB0+135↑j
.text:00404E30                 mov     esi, offset dword_407140
.text:00404E35                 jmp     short loc_404DE7
.text:00404E37 ; ---------------------------------------------------------------------------
.text:00404E37
.text:00404E37 loc_404E37:                             ; CODE XREF: sub_404CB0+B7↑j
.text:00404E37                 mov     esi, offset dword_407140
.text:00404E3C                 jmp     loc_404D6D
.text:00404E41 ; ---------------------------------------------------------------------------
.text:00404E41
.text:00404E41 loc_404E41:                             ; CODE XREF: sub_404CB0+45↑j
.text:00404E41                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404E48                 call    sub_404EC0
.text:00404E4D                 mov     off_40604C, eax
.text:00404E52                 mov     edi, dword_406044
.text:00404E58                 mov     ebx, eax
.text:00404E5A                 mov     ecx, off_406048
.text:00404E60                 mov     [eax], edi
.text:00404E62                 mov     [eax+4], ecx
.text:00404E65                 jmp     loc_404CFB
.text:00404E6A ; ---------------------------------------------------------------------------
.text:00404E6A
.text:00404E6A loc_404E6A:                             ; CODE XREF: sub_404CB0+18↑j
.text:00404E6A                 call    abort
.text:00404E6F ; ---------------------------------------------------------------------------
.text:00404E6F
.text:00404E6F loc_404E6F:                             ; CODE XREF: sub_404CB0+33↑j
.text:00404E6F                 call    sub_405170
.text:00404E6F sub_404CB0      endp
.text:00404E6F
.text:00404E6F ; ---------------------------------------------------------------------------
.text:00404E74                 align 10h
.text:00404E80
.text:00404E80 ; =============== S U B R O U T I N E =======================================
.text:00404E80
.text:00404E80
.text:00404E80 sub_404E80      proc near
.text:00404E80
.text:00404E80 Size            = dword ptr -0Ch
.text:00404E80 var_4           = dword ptr -4
.text:00404E80 arg_0           = dword ptr  4
.text:00404E80 arg_4           = dword ptr  8
.text:00404E80
.text:00404E80                 sub     esp, 0Ch
.text:00404E83                 xor     edx, edx
.text:00404E85                 mov     ecx, [esp+0Ch+arg_4]
.text:00404E89                 mov     [esp+0Ch+var_4], ebx
.text:00404E8D                 mov     eax, 0FFFFFFFFh
.text:00404E92                 mov     ebx, [esp+0Ch+arg_0]
.text:00404E96                 div     ecx
.text:00404E98                 cmp     eax, ebx
.text:00404E9A                 jb      short loc_404EB9
.text:00404E9C                 mov     edx, ebx
.text:00404E9E                 imul    edx, ecx
.text:00404EA1                 mov     [esp+0Ch+Size], edx ; Size
.text:00404EA4                 call    malloc
.text:00404EA9                 test    eax, eax
.text:00404EAB                 jz      short loc_404EB5
.text:00404EAD
.text:00404EAD loc_404EAD:                             ; CODE XREF: sub_404E80+37↓j
.text:00404EAD                 mov     ebx, [esp+0Ch+var_4]
.text:00404EB1                 add     esp, 0Ch
.text:00404EB4                 retn
.text:00404EB5 ; ---------------------------------------------------------------------------
.text:00404EB5
.text:00404EB5 loc_404EB5:                             ; CODE XREF: sub_404E80+2B↑j
.text:00404EB5                 test    ebx, ebx
.text:00404EB7                 jz      short loc_404EAD
.text:00404EB9
.text:00404EB9 loc_404EB9:                             ; CODE XREF: sub_404E80+1A↑j
.text:00404EB9                 call    sub_405170
.text:00404EB9 sub_404E80      endp
.text:00404EB9
.text:00404EB9 ; ---------------------------------------------------------------------------
.text:00404EBE                 align 10h
.text:00404EC0
.text:00404EC0 ; =============== S U B R O U T I N E =======================================
.text:00404EC0
.text:00404EC0
.text:00404EC0 ; int __cdecl sub_404EC0(size_t)
.text:00404EC0 sub_404EC0      proc near               ; CODE XREF: .text:004045E9↑p
.text:00404EC0                                         ; .text:004047C6↑p ...
.text:00404EC0
.text:00404EC0 Size            = dword ptr -0Ch
.text:00404EC0 var_4           = dword ptr -4
.text:00404EC0 arg_0           = dword ptr  4
.text:00404EC0
.text:00404EC0                 sub     esp, 0Ch
.text:00404EC3                 mov     [esp+0Ch+var_4], ebx
.text:00404EC7                 mov     ebx, [esp+0Ch+arg_0]
.text:00404ECB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404ECE                 call    malloc
.text:00404ED3                 test    eax, eax
.text:00404ED5                 jz      short loc_404EE0
.text:00404ED7
.text:00404ED7 loc_404ED7:                             ; CODE XREF: sub_404EC0+22↓j
.text:00404ED7                 mov     ebx, [esp+0Ch+var_4]
.text:00404EDB                 add     esp, 0Ch
.text:00404EDE                 retn
.text:00404EDE ; ---------------------------------------------------------------------------
.text:00404EDF                 align 10h
.text:00404EE0
.text:00404EE0 loc_404EE0:                             ; CODE XREF: sub_404EC0+15↑j
.text:00404EE0                 test    ebx, ebx
.text:00404EE2                 jz      short loc_404ED7
.text:00404EE4                 call    sub_405170
.text:00404EE4 sub_404EC0      endp
.text:00404EE4
.text:00404EE4 ; ---------------------------------------------------------------------------
.text:00404EE9                 align 10h
.text:00404EF0                 sub     esp, 1Ch
.text:00404EF3                 xor     edx, edx
.text:00404EF5                 mov     eax, 0FFFFFFFFh
.text:00404EFA                 mov     [esp+14h], ebx
.text:00404EFE                 mov     ecx, [esp+20h]
.text:00404F02                 mov     ebx, [esp+28h]
.text:00404F06                 mov     [esp+18h], esi
.text:00404F0A                 mov     esi, [esp+24h]
.text:00404F0E                 div     ebx
.text:00404F10                 cmp     eax, esi
.text:00404F12                 jb      short loc_404F44
.text:00404F14                 mov     [esp], ecx
.text:00404F17                 mov     edx, esi
.text:00404F19                 imul    edx, ebx
.text:00404F1C                 mov     [esp+4], edx
.text:00404F20                 call    realloc
.text:00404F25                 test    eax, eax
.text:00404F27                 mov     ecx, eax
.text:00404F29                 jz      short loc_404F40
.text:00404F2B
.text:00404F2B loc_404F2B:                             ; CODE XREF: .text:00404F42↓j
.text:00404F2B                 mov     ebx, [esp+14h]
.text:00404F2F                 mov     eax, ecx
.text:00404F31                 mov     esi, [esp+18h]
.text:00404F35                 add     esp, 1Ch
.text:00404F38                 retn
.text:00404F38 ; ---------------------------------------------------------------------------
.text:00404F39                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: .text:00404F29↑j
.text:00404F40                 test    esi, esi
.text:00404F42                 jz      short loc_404F2B
.text:00404F44
.text:00404F44 loc_404F44:                             ; CODE XREF: .text:00404F12↑j
.text:00404F44                 call    sub_405170
.text:00404F44 ; ---------------------------------------------------------------------------
.text:00404F49                 align 10h
.text:00404F50
.text:00404F50 ; =============== S U B R O U T I N E =======================================
.text:00404F50
.text:00404F50
.text:00404F50 ; int __cdecl sub_404F50(void *, size_t)
.text:00404F50 sub_404F50      proc near               ; CODE XREF: sub_404CB0+5B↑p
.text:00404F50
.text:00404F50 Block           = dword ptr -0Ch
.text:00404F50 Size            = dword ptr -8
.text:00404F50 var_4           = dword ptr -4
.text:00404F50 arg_0           = dword ptr  4
.text:00404F50 arg_4           = dword ptr  8
.text:00404F50
.text:00404F50                 sub     esp, 0Ch
.text:00404F53                 mov     edx, [esp+0Ch+arg_0]
.text:00404F57                 mov     [esp+0Ch+var_4], ebx
.text:00404F5B                 mov     ebx, [esp+0Ch+arg_4]
.text:00404F5F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404F62                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404F66                 call    realloc
.text:00404F6B                 test    eax, eax
.text:00404F6D                 jz      short loc_404F77
.text:00404F6F
.text:00404F6F loc_404F6F:                             ; CODE XREF: sub_404F50+29↓j
.text:00404F6F                 mov     ebx, [esp+0Ch+var_4]
.text:00404F73                 add     esp, 0Ch
.text:00404F76                 retn
.text:00404F77 ; ---------------------------------------------------------------------------
.text:00404F77
.text:00404F77 loc_404F77:                             ; CODE XREF: sub_404F50+1D↑j
.text:00404F77                 test    ebx, ebx
.text:00404F79                 jz      short loc_404F6F
.text:00404F7B                 call    sub_405170
.text:00404F7B sub_404F50      endp
.text:00404F7B
.text:00404F80 ; ---------------------------------------------------------------------------
.text:00404F80                 jmp     sub_4050D0
.text:00404F80 ; ---------------------------------------------------------------------------
.text:00404F85                 align 10h
.text:00404F90                 sub     esp, 0Ch
.text:00404F93                 mov     edx, [esp+14h]
.text:00404F97                 mov     dword ptr [esp+8], 1
.text:00404F9F                 mov     [esp+4], edx
.text:00404FA3                 mov     edx, [esp+10h]
.text:00404FA7                 mov     [esp], edx
.text:00404FAA                 call    sub_4050D0
.text:00404FAF                 add     esp, 0Ch
.text:00404FB2                 retn
.text:00404FB2 ; ---------------------------------------------------------------------------
.text:00404FB3                 align 10h
.text:00404FC0                 sub     esp, 1Ch
.text:00404FC3                 mov     [esp+18h], ebx
.text:00404FC7                 mov     ebx, [esp+20h]
.text:00404FCB                 mov     [esp], ebx
.text:00404FCE                 call    malloc
.text:00404FD3                 test    eax, eax
.text:00404FD5                 jz      short loc_404FF3
.text:00404FD7
.text:00404FD7 loc_404FD7:                             ; CODE XREF: .text:00404FF5↓j
.text:00404FD7                 mov     [esp+8], ebx
.text:00404FDB                 mov     dword ptr [esp+4], 0
.text:00404FE3                 mov     [esp], eax
.text:00404FE6                 call    memset
.text:00404FEB                 mov     ebx, [esp+18h]
.text:00404FEF                 add     esp, 1Ch
.text:00404FF2                 retn
.text:00404FF3 ; ---------------------------------------------------------------------------
.text:00404FF3
.text:00404FF3 loc_404FF3:                             ; CODE XREF: .text:00404FD5↑j
.text:00404FF3                 test    ebx, ebx
.text:00404FF5                 jz      short loc_404FD7
.text:00404FF7                 call    sub_405170
.text:00404FF7 ; ---------------------------------------------------------------------------
.text:00404FFC                 align 10h
.text:00405000                 sub     esp, 0Ch
.text:00405003                 xor     edx, edx
.text:00405005                 mov     ecx, [esp+14h]
.text:00405009                 mov     [esp+8], ebx
.text:0040500D                 mov     eax, 0FFFFFFFFh
.text:00405012                 mov     ebx, [esp+10h]
.text:00405016                 div     ecx
.text:00405018                 cmp     eax, ebx
.text:0040501A                 jb      short loc_405038
.text:0040501C                 mov     [esp+4], ecx
.text:00405020                 mov     [esp], ebx
.text:00405023                 call    calloc
.text:00405028                 test    eax, eax
.text:0040502A                 jz      short loc_405034
.text:0040502C
.text:0040502C loc_40502C:                             ; CODE XREF: .text:00405036↓j
.text:0040502C                 mov     ebx, [esp+8]
.text:00405030                 add     esp, 0Ch
.text:00405033                 retn
.text:00405034 ; ---------------------------------------------------------------------------
.text:00405034
.text:00405034 loc_405034:                             ; CODE XREF: .text:0040502A↑j
.text:00405034                 test    ebx, ebx
.text:00405036                 jz      short loc_40502C
.text:00405038
.text:00405038 loc_405038:                             ; CODE XREF: .text:0040501A↑j
.text:00405038                 call    sub_405170
.text:00405038 ; ---------------------------------------------------------------------------
.text:0040503D                 align 10h
.text:00405040                 sub     esp, 1Ch
.text:00405043                 mov     [esp+18h], ebx
.text:00405047                 mov     ebx, [esp+24h]
.text:0040504B                 mov     [esp], ebx
.text:0040504E                 call    malloc
.text:00405053                 test    eax, eax
.text:00405055                 mov     edx, eax
.text:00405057                 jz      short loc_405075
.text:00405059
.text:00405059 loc_405059:                             ; CODE XREF: .text:00405077↓j
.text:00405059                 mov     [esp+8], ebx
.text:0040505D                 mov     ecx, [esp+20h]
.text:00405061                 mov     [esp], edx
.text:00405064                 mov     [esp+4], ecx
.text:00405068                 call    memcpy
.text:0040506D                 mov     ebx, [esp+18h]
.text:00405071                 add     esp, 1Ch
.text:00405074                 retn
.text:00405075 ; ---------------------------------------------------------------------------
.text:00405075
.text:00405075 loc_405075:                             ; CODE XREF: .text:00405057↑j
.text:00405075                 test    ebx, ebx
.text:00405077                 jz      short loc_405059
.text:00405079                 call    sub_405170
.text:00405079 ; ---------------------------------------------------------------------------
.text:0040507E                 align 10h
.text:00405080                 sub     esp, 1Ch
.text:00405083                 mov     [esp+18h], esi
.text:00405087                 mov     esi, [esp+20h]
.text:0040508B                 mov     [esp+14h], ebx
.text:0040508F                 mov     [esp], esi
.text:00405092                 call    strlen
.text:00405097                 lea     ebx, [eax+1]
.text:0040509A                 mov     [esp], ebx
.text:0040509D                 call    malloc
.text:004050A2                 test    eax, eax
.text:004050A4                 jz      short loc_4050C2
.text:004050A6
.text:004050A6 loc_4050A6:                             ; CODE XREF: .text:004050C4↓j
.text:004050A6                 mov     [esp+8], ebx
.text:004050AA                 mov     [esp+4], esi
.text:004050AE                 mov     [esp], eax
.text:004050B1                 call    memcpy
.text:004050B6                 mov     ebx, [esp+14h]
.text:004050BA                 mov     esi, [esp+18h]
.text:004050BE                 add     esp, 1Ch
.text:004050C1                 retn
.text:004050C2 ; ---------------------------------------------------------------------------
.text:004050C2
.text:004050C2 loc_4050C2:                             ; CODE XREF: .text:004050A4↑j
.text:004050C2                 test    ebx, ebx
.text:004050C4                 jz      short loc_4050A6
.text:004050C6                 call    sub_405170
.text:004050C6 ; ---------------------------------------------------------------------------
.text:004050CB                 align 10h
.text:004050D0
.text:004050D0 ; =============== S U B R O U T I N E =======================================
.text:004050D0
.text:004050D0
.text:004050D0 ; int __cdecl sub_4050D0(void *, int, int)
.text:004050D0 sub_4050D0      proc near               ; CODE XREF: .text:00404F80↑j
.text:004050D0                                         ; .text:00404FAA↑p
.text:004050D0
.text:004050D0 Block           = dword ptr -1Ch
.text:004050D0 Size            = dword ptr -18h
.text:004050D0 var_C           = dword ptr -0Ch
.text:004050D0 var_8           = dword ptr -8
.text:004050D0 var_4           = dword ptr -4
.text:004050D0 arg_0           = dword ptr  4
.text:004050D0 arg_4           = dword ptr  8
.text:004050D0 arg_8           = dword ptr  0Ch
.text:004050D0
.text:004050D0                 sub     esp, 1Ch
.text:004050D3                 mov     [esp+1Ch+var_8], esi
.text:004050D7                 mov     esi, [esp+1Ch+arg_0]
.text:004050DB                 mov     [esp+1Ch+var_4], edi
.text:004050DF                 mov     edi, [esp+1Ch+arg_4]
.text:004050E3                 test    esi, esi
.text:004050E5                 mov     [esp+1Ch+var_C], ebx
.text:004050E9                 mov     ecx, [edi]
.text:004050EB                 mov     ebx, [esp+1Ch+arg_8]
.text:004050EF                 jz      short loc_405130
.text:004050F1                 xor     edx, edx
.text:004050F3                 mov     eax, 7FFFFFFFh
.text:004050F8                 div     ebx
.text:004050FA                 cmp     eax, ecx
.text:004050FC                 jb      short loc_405129
.text:004050FE                 add     ecx, ecx
.text:00405100
.text:00405100 loc_405100:                             ; CODE XREF: sub_4050D0+62↓j
.text:00405100                                         ; sub_4050D0+71↓j ...
.text:00405100                 mov     [edi], ecx
.text:00405102                 imul    ebx, ecx
.text:00405105                 mov     [esp+1Ch+Block], esi ; Block
.text:00405108                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040510C                 call    realloc
.text:00405111                 test    eax, eax
.text:00405113                 jz      short loc_405125
.text:00405115
.text:00405115 loc_405115:                             ; CODE XREF: sub_4050D0+57↓j
.text:00405115                 mov     ebx, [esp+1Ch+var_C]
.text:00405119                 mov     esi, [esp+1Ch+var_8]
.text:0040511D                 mov     edi, [esp+1Ch+var_4]
.text:00405121                 add     esp, 1Ch
.text:00405124                 retn
.text:00405125 ; ---------------------------------------------------------------------------
.text:00405125
.text:00405125 loc_405125:                             ; CODE XREF: sub_4050D0+43↑j
.text:00405125                 test    ebx, ebx
.text:00405127                 jz      short loc_405115
.text:00405129
.text:00405129 loc_405129:                             ; CODE XREF: sub_4050D0+2C↑j
.text:00405129                 call    sub_405170
.text:00405129 ; ---------------------------------------------------------------------------
.text:0040512E                 align 10h
.text:00405130
.text:00405130 loc_405130:                             ; CODE XREF: sub_4050D0+1F↑j
.text:00405130                 test    ecx, ecx
.text:00405132                 jnz     short loc_405100
.text:00405134                 xor     edx, edx
.text:00405136                 mov     eax, 40h ; '@'
.text:0040513B                 div     ebx
.text:0040513D                 test    eax, eax
.text:0040513F                 mov     ecx, eax
.text:00405141                 jnz     short loc_405100
.text:00405143                 mov     ecx, 1
.text:00405148                 jmp     short loc_405100
.text:00405148 sub_4050D0      endp
.text:00405148
.text:00405148 ; ---------------------------------------------------------------------------
.text:0040514A                 align 10h
.text:00405150 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_405170+3↓o
.text:00405161 ; const char aS_3[]
.text:00405161 aS_3            db '%s',0               ; DATA XREF: sub_405170+10↓o
.text:00405164                 align 10h
.text:00405170
.text:00405170 ; =============== S U B R O U T I N E =======================================
.text:00405170
.text:00405170 ; Attributes: noreturn
.text:00405170
.text:00405170 sub_405170      proc near               ; CODE XREF: sub_404CB0:loc_404E6F↑p
.text:00405170                                         ; sub_404E80:loc_404EB9↑p ...
.text:00405170
.text:00405170 Code            = dword ptr -1Ch
.text:00405170 ErrorMessage    = dword ptr -18h
.text:00405170 var_14          = dword ptr -14h
.text:00405170 var_10          = byte ptr -10h
.text:00405170
.text:00405170                 sub     esp, 1Ch
.text:00405173                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040517A                 call    ds:libintl_gettext
.text:00405180                 mov     [esp+1Ch+var_14], offset aS_3 ; "%s"
.text:00405188                 mov     edx, Code
.text:0040518E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00405196                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040519A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040519D                 call    sub_405200
.text:004051A2                 call    abort
.text:004051A2 sub_405170      endp
.text:004051A2
.text:004051A2 ; ---------------------------------------------------------------------------
.text:004051A7                 align 10h
.text:004051B0
.text:004051B0 ; =============== S U B R O U T I N E =======================================
.text:004051B0
.text:004051B0 ; Attributes: thunk
.text:004051B0
.text:004051B0 libintl_bindtextdomain proc near
.text:004051B0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004051B0 libintl_bindtextdomain endp
.text:004051B0
.text:004051B0 ; ---------------------------------------------------------------------------
.text:004051B6                 align 10h
.text:004051C0                 jmp     ds:libintl_textdomain
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C6                 align 10h
.text:004051D0                 jmp     ds:libintl_gettext
.text:004051D0 ; ---------------------------------------------------------------------------
.text:004051D6                 align 10h
.text:004051E0 ; const char aS_0[]
.text:004051E0 aS_0            db ': %s',0             ; DATA XREF: sub_405200+B8↓o
.text:004051E0                                         ; sub_405304+122↓o
.text:004051E5 aUnknownSystemE db 'Unknown system error',0
.text:004051E5                                         ; DATA XREF: sub_405200:loc_4052CD↓o
.text:004051E5                                         ; sub_405304:loc_40543E↓o
.text:004051FA ; const char aS_1[]
.text:004051FA aS_1            db '%s: ',0             ; DATA XREF: sub_405200:loc_4052D4↓o
.text:004051FF                 align 10h
.text:00405200
.text:00405200 ; =============== S U B R O U T I N E =======================================
.text:00405200
.text:00405200
.text:00405200 ; int __cdecl sub_405200(int Code, int ErrorMessage, char *, char)
.text:00405200 sub_405200      proc near               ; CODE XREF: sub_4013F0+1B3↑p
.text:00405200                                         ; sub_4013F0+25F↑p ...
.text:00405200
.text:00405200 Stream          = dword ptr -1Ch
.text:00405200 Format          = dword ptr -18h
.text:00405200 ArgList         = dword ptr -14h
.text:00405200 Code            = dword ptr  4
.text:00405200 ErrorMessage    = dword ptr  8
.text:00405200 arg_8           = dword ptr  0Ch
.text:00405200 arg_C           = byte ptr  10h
.text:00405200
.text:00405200                 push    esi
.text:00405201                 push    ebx
.text:00405202                 sub     esp, 14h
.text:00405205                 mov     edx, ds:_iob
.text:0040520B                 mov     esi, [esp+1Ch+Code]
.text:0040520F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405213                 add     edx, 20h ; ' '
.text:00405216                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405219                 call    fflush
.text:0040521E                 mov     eax, ds:dword_4071C0
.text:00405223                 test    eax, eax
.text:00405225                 jz      loc_4052D4
.text:0040522B                 call    eax ; dword_4071C0
.text:0040522D
.text:0040522D loc_40522D:                             ; CODE XREF: sub_405200+F7↓j
.text:0040522D                 lea     edx, [esp+1Ch+arg_C]
.text:00405231                 mov     ecx, [esp+1Ch+arg_8]
.text:00405235                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405239                 mov     edx, ds:_iob
.text:0040523F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405243                 add     edx, 40h ; '@'
.text:00405246                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405249                 call    vfprintf
.text:0040524E                 inc     ds:dword_4071D0
.text:00405254                 test    ebx, ebx
.text:00405256                 jnz     short loc_4052A2
.text:00405258
.text:00405258 loc_405258:                             ; CODE XREF: sub_405200+CB↓j
.text:00405258                 mov     edx, ds:_iob
.text:0040525E                 lea     ecx, [edx+40h]
.text:00405261                 mov     ebx, [ecx+4]
.text:00405264                 dec     ebx
.text:00405265                 test    ebx, ebx
.text:00405267                 mov     [ecx+4], ebx
.text:0040526A                 js      short loc_405290
.text:0040526C                 mov     ecx, [edx+40h]
.text:0040526F                 mov     byte ptr [ecx], 0Ah
.text:00405272                 inc     dword ptr [edx+40h]
.text:00405275
.text:00405275 loc_405275:                             ; CODE XREF: sub_405200+A0↓j
.text:00405275                 mov     edx, ds:_iob
.text:0040527B                 add     edx, 40h ; '@'
.text:0040527E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405281                 call    fflush
.text:00405286                 test    esi, esi
.text:00405288                 jnz     short loc_4052FC
.text:0040528A                 add     esp, 14h
.text:0040528D                 pop     ebx
.text:0040528E                 pop     esi
.text:0040528F                 retn
.text:00405290 ; ---------------------------------------------------------------------------
.text:00405290
.text:00405290 loc_405290:                             ; CODE XREF: sub_405200+6A↑j
.text:00405290                 mov     [esp+1Ch+Format], ecx ; File
.text:00405294                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040529B                 call    _flsbuf
.text:004052A0                 jmp     short loc_405275
.text:004052A2 ; ---------------------------------------------------------------------------
.text:004052A2
.text:004052A2 loc_4052A2:                             ; CODE XREF: sub_405200+56↑j
.text:004052A2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004052A5                 call    strerror
.text:004052AA                 test    eax, eax
.text:004052AC                 jz      short loc_4052CD
.text:004052AE
.text:004052AE loc_4052AE:                             ; CODE XREF: sub_405200+D2↓j
.text:004052AE                 mov     [esp+1Ch+ArgList], eax
.text:004052B2                 mov     ebx, ds:_iob
.text:004052B8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:004052C0                 add     ebx, 40h ; '@'
.text:004052C3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004052C6                 call    fprintf
.text:004052CB                 jmp     short loc_405258
.text:004052CD ; ---------------------------------------------------------------------------
.text:004052CD
.text:004052CD loc_4052CD:                             ; CODE XREF: sub_405200+AC↑j
.text:004052CD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004052D2                 jmp     short loc_4052AE
.text:004052D4 ; ---------------------------------------------------------------------------
.text:004052D4
.text:004052D4 loc_4052D4:                             ; CODE XREF: sub_405200+25↑j
.text:004052D4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004052DC                 mov     edx, ds:_iob
.text:004052E2                 mov     ecx, ds:dword_407190
.text:004052E8                 add     edx, 40h ; '@'
.text:004052EB                 mov     [esp+1Ch+ArgList], ecx
.text:004052EF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004052F2                 call    fprintf
.text:004052F7                 jmp     loc_40522D
.text:004052FC ; ---------------------------------------------------------------------------
.text:004052FC
.text:004052FC loc_4052FC:                             ; CODE XREF: sub_405200+88↑j
.text:004052FC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004052FF                 call    exit
.text:004052FF sub_405200      endp
.text:004052FF
.text:00405304
.text:00405304 ; =============== S U B R O U T I N E =======================================
.text:00405304
.text:00405304
.text:00405304 ; int __cdecl sub_405304(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405304 sub_405304      proc near               ; DATA XREF: sub_405304+77↓o
.text:00405304
.text:00405304 Stream          = dword ptr -28h
.text:00405304 Format          = dword ptr -24h
.text:00405304 ArgList         = dword ptr -20h
.text:00405304 var_1C          = dword ptr -1Ch
.text:00405304 Code            = dword ptr  8
.text:00405304 ErrorMessage    = dword ptr  0Ch
.text:00405304 Str2            = dword ptr  10h
.text:00405304 arg_10          = dword ptr  14h
.text:00405304 arg_14          = dword ptr  18h
.text:00405304 arg_18          = byte ptr  1Ch
.text:00405304
.text:00405304                 and     eax, 64253A73h
.text:00405309                 cmp     ah, [eax]
.text:0040530B
.text:0040530B loc_40530B:                             ; DATA XREF: sub_405304:loc_405445↓o
.text:0040530B                 add     ds:55003A73h, ah
.text:00405311                 push    edi
.text:00405312                 push    esi
.text:00405313                 push    ebx
.text:00405314                 sub     esp, 1Ch
.text:00405317                 mov     edx, ds:dword_407200
.text:0040531D                 mov     ebp, [esp+28h+Code]
.text:00405321                 mov     edi, [esp+28h+ErrorMessage]
.text:00405325                 test    edx, edx
.text:00405327                 mov     ebx, [esp+28h+Str2]
.text:0040532B                 mov     esi, [esp+28h+arg_10]
.text:0040532F                 jz      short loc_405349
.text:00405331                 cmp     ds:dword_407180, esi
.text:00405337                 jz      loc_405470
.text:0040533D
.text:0040533D loc_40533D:                             ; CODE XREF: sub_405304+18D↓j
.text:0040533D                 mov     ds:Str1, ebx
.text:00405343                 mov     ds:dword_407180, esi
.text:00405349
.text:00405349 loc_405349:                             ; CODE XREF: sub_405304+2B↑j
.text:00405349                 mov     edx, ds:_iob
.text:0040534F                 add     edx, 20h ; ' '
.text:00405352                 mov     [esp+28h+Stream], edx ; Stream
.text:00405355                 call    fflush
.text:0040535A                 mov     eax, ds:dword_4071C0
.text:0040535F                 test    eax, eax
.text:00405361                 jz      loc_405445
.text:00405367                 call    eax ; dword_4071C0
.text:00405369
.text:00405369 loc_405369:                             ; CODE XREF: sub_405304+164↓j
.text:00405369                 test    ebx, ebx
.text:0040536B                 jz      short loc_40538E
.text:0040536D                 mov     [esp+28h+ArgList], ebx
.text:00405371                 mov     ebx, ds:_iob
.text:00405377                 mov     [esp+28h+var_1C], esi
.text:0040537B                 mov     [esp+28h+Format], offset sub_405304 ; Format
.text:00405383                 add     ebx, 40h ; '@'
.text:00405386                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405389                 call    fprintf
.text:0040538E
.text:0040538E loc_40538E:                             ; CODE XREF: sub_405304+67↑j
.text:0040538E                 mov     esi, ds:_iob
.text:00405394                 lea     edx, [esp+28h+arg_18]
.text:00405398                 mov     ecx, [esp+28h+arg_14]
.text:0040539C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004053A0                 add     esi, 40h ; '@'
.text:004053A3                 mov     [esp+28h+Format], ecx ; Format
.text:004053A7                 mov     [esp+28h+Stream], esi ; Stream
.text:004053AA                 call    vfprintf
.text:004053AF                 inc     ds:dword_4071D0
.text:004053B5                 test    edi, edi
.text:004053B7                 jnz     short loc_405410
.text:004053B9
.text:004053B9 loc_4053B9:                             ; CODE XREF: sub_405304+135↓j
.text:004053B9                 mov     edx, ds:_iob
.text:004053BF                 lea     ecx, [edx+40h]
.text:004053C2                 mov     ebx, [ecx+4]
.text:004053C5                 dec     ebx
.text:004053C6                 test    ebx, ebx
.text:004053C8                 mov     [ecx+4], ebx
.text:004053CB                 js      short loc_4053F7
.text:004053CD                 mov     esi, [edx+40h]
.text:004053D0                 mov     byte ptr [esi], 0Ah
.text:004053D3                 inc     dword ptr [edx+40h]
.text:004053D6
.text:004053D6 loc_4053D6:                             ; CODE XREF: sub_405304+103↓j
.text:004053D6                 mov     ecx, ds:_iob
.text:004053DC                 add     ecx, 40h ; '@'
.text:004053DF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004053E2                 call    fflush
.text:004053E7                 test    ebp, ebp
.text:004053E9                 jnz     loc_405496
.text:004053EF
.text:004053EF loc_4053EF:                             ; CODE XREF: sub_405304+173↓j
.text:004053EF                                         ; sub_405304+187↓j
.text:004053EF                 add     esp, 1Ch
.text:004053F2                 pop     ebx
.text:004053F3                 pop     esi
.text:004053F4                 pop     edi
.text:004053F5                 pop     ebp
.text:004053F6                 retn
.text:004053F7 ; ---------------------------------------------------------------------------
.text:004053F7
.text:004053F7 loc_4053F7:                             ; CODE XREF: sub_405304+C7↑j
.text:004053F7                 mov     [esp+28h+Format], ecx ; File
.text:004053FB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405402                 call    _flsbuf
.text:00405407                 jmp     short loc_4053D6
.text:00405407 ; ---------------------------------------------------------------------------
.text:00405409                 align 10h
.text:00405410
.text:00405410 loc_405410:                             ; CODE XREF: sub_405304+B3↑j
.text:00405410                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405413                 call    strerror
.text:00405418                 test    eax, eax
.text:0040541A                 jz      short loc_40543E
.text:0040541C
.text:0040541C loc_40541C:                             ; CODE XREF: sub_405304+13F↓j
.text:0040541C                 mov     [esp+28h+ArgList], eax
.text:00405420                 mov     edi, ds:_iob
.text:00405426                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040542E                 add     edi, 40h ; '@'
.text:00405431                 mov     [esp+28h+Stream], edi ; Stream
.text:00405434                 call    fprintf
.text:00405439                 jmp     loc_4053B9
.text:0040543E ; ---------------------------------------------------------------------------
.text:0040543E
.text:0040543E loc_40543E:                             ; CODE XREF: sub_405304+116↑j
.text:0040543E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405443                 jmp     short loc_40541C
.text:00405445 ; ---------------------------------------------------------------------------
.text:00405445
.text:00405445 loc_405445:                             ; CODE XREF: sub_405304+5D↑j
.text:00405445                 mov     [esp+28h+Format], (offset loc_40530B+1) ; Format
.text:0040544D                 mov     ecx, ds:_iob
.text:00405453                 mov     edx, ds:dword_407190
.text:00405459                 add     ecx, 40h ; '@'
.text:0040545C                 mov     [esp+28h+ArgList], edx
.text:00405460                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405463                 call    fprintf
.text:00405468                 jmp     loc_405369
.text:00405468 ; ---------------------------------------------------------------------------
.text:0040546D                 align 10h
.text:00405470
.text:00405470 loc_405470:                             ; CODE XREF: sub_405304+33↑j
.text:00405470                 mov     eax, ds:Str1
.text:00405475                 cmp     ebx, eax
.text:00405477                 jz      loc_4053EF
.text:0040547D                 mov     [esp+28h+Format], ebx ; Str2
.text:00405481                 mov     [esp+28h+Stream], eax ; Str1
.text:00405484                 call    strcmp
.text:00405489                 test    eax, eax
.text:0040548B                 jz      loc_4053EF
.text:00405491                 jmp     loc_40533D
.text:00405496 ; ---------------------------------------------------------------------------
.text:00405496
.text:00405496 loc_405496:                             ; CODE XREF: sub_405304+E5↑j
.text:00405496                 mov     [esp+28h+Stream], ebp ; Code
.text:00405499                 call    exit
.text:00405499 sub_405304      endp ; sp-analysis failed
.text:00405499
.text:00405499 ; ---------------------------------------------------------------------------
.text:0040549E                 align 10h
.text:004054A0
.text:004054A0 ; =============== S U B R O U T I N E =======================================
.text:004054A0
.text:004054A0
.text:004054A0 sub_4054A0      proc near               ; CODE XREF: sub_4013F0+2A9↑p
.text:004054A0                 sub     esp, 0Ch
.text:004054A3                 call    _errno
.text:004054A8                 mov     dword ptr [eax], 28h ; '('
.text:004054AE                 mov     eax, 0FFFFFFFFh
.text:004054B3                 add     esp, 0Ch
.text:004054B6                 retn
.text:004054B6 sub_4054A0      endp
.text:004054B6
.text:004054B6 ; ---------------------------------------------------------------------------
.text:004054B7                 align 10h
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0
.text:004054C0 sub_4054C0      proc near               ; CODE XREF: sub_4013F0+20A↑p
.text:004054C0                                         ; sub_4013F0+280↑p
.text:004054C0                 sub     esp, 0Ch
.text:004054C3                 call    _errno
.text:004054C8                 mov     dword ptr [eax], 28h ; '('
.text:004054CE                 mov     eax, 0FFFFFFFFh
.text:004054D3                 add     esp, 0Ch
.text:004054D6                 retn
.text:004054D6 sub_4054C0      endp
.text:004054D6
.text:004054D6 ; ---------------------------------------------------------------------------
.text:004054D7                 align 10h
.text:004054E0
.text:004054E0 ; =============== S U B R O U T I N E =======================================
.text:004054E0
.text:004054E0 ; Attributes: thunk
.text:004054E0
.text:004054E0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004054E0 mbrtowc         proc near               ; CODE XREF: sub_403B70+757↑p
.text:004054E0
.text:004054E0 DstCh           = dword ptr  4
.text:004054E0 SrcCh           = dword ptr  8
.text:004054E0 SizeInBytes     = dword ptr  0Ch
.text:004054E0 State           = dword ptr  10h
.text:004054E0
.text:004054E0                 jmp     ds:__imp_mbrtowc
.text:004054E0 mbrtowc         endp
.text:004054E0
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E6                 align 10h
.text:004054F0
.text:004054F0 ; =============== S U B R O U T I N E =======================================
.text:004054F0
.text:004054F0 ; Attributes: bp-based frame
.text:004054F0
.text:004054F0 sub_4054F0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004054F0                 push    ebp
.text:004054F1                 mov     ecx, offset dword_407000
.text:004054F6                 cmp     ecx, offset dword_407000
.text:004054FC                 mov     ebp, esp
.text:004054FE                 jnb     short loc_405516
.text:00405500
.text:00405500 loc_405500:                             ; CODE XREF: sub_4054F0+24↓j
.text:00405500                 mov     edx, [ecx+4]
.text:00405503                 mov     eax, [ecx]
.text:00405505                 add     ecx, 8
.text:00405508                 add     [edx+400000h], eax
.text:0040550E                 cmp     ecx, offset dword_407000
.text:00405514                 jb      short loc_405500
.text:00405516
.text:00405516 loc_405516:                             ; CODE XREF: sub_4054F0+E↑j
.text:00405516                 pop     ebp
.text:00405517                 retn
.text:00405517 sub_4054F0      endp
.text:00405517
.text:00405517 ; ---------------------------------------------------------------------------
.text:00405518                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520 ; Attributes: bp-based frame
.text:00405520
.text:00405520 sub_405520      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405520                                         ; TopLevelExceptionFilter+D7↑p
.text:00405520                 push    ebp
.text:00405521                 mov     ebp, esp
.text:00405523                 fninit
.text:00405525                 pop     ebp
.text:00405526                 retn
.text:00405526 sub_405520      endp
.text:00405526
.text:00405526 ; ---------------------------------------------------------------------------
.text:00405527                 align 10h
.text:00405530
.text:00405530 ; =============== S U B R O U T I N E =======================================
.text:00405530
.text:00405530 ; Attributes: bp-based frame
.text:00405530
.text:00405530 ; void __cdecl sub_405530()
.text:00405530 sub_405530      proc near               ; DATA XREF: .text:loc_405579↓o
.text:00405530                                         ; sub_4055C0:loc_4055EE↓o
.text:00405530                 push    ebp
.text:00405531                 mov     ebp, esp
.text:00405533                 sub     esp, 8
.text:00405536                 mov     eax, off_406084
.text:0040553B                 mov     edx, [eax]
.text:0040553D                 test    edx, edx
.text:0040553F                 jnz     short loc_405545
.text:00405541
.text:00405541 loc_405541:                             ; CODE XREF: sub_405530+2C↓j
.text:00405541                 mov     esp, ebp
.text:00405543                 pop     ebp
.text:00405544                 retn
.text:00405545 ; ---------------------------------------------------------------------------
.text:00405545
.text:00405545 loc_405545:                             ; CODE XREF: sub_405530+F↑j
.text:00405545                                         ; sub_405530+2A↓j
.text:00405545                 call    dword ptr [eax]
.text:00405547                 mov     edx, off_406084
.text:0040554D                 mov     ecx, [edx+4]
.text:00405550                 lea     eax, [edx+4]
.text:00405553                 mov     off_406084, eax
.text:00405558                 test    ecx, ecx
.text:0040555A                 jnz     short loc_405545
.text:0040555C                 jmp     short loc_405541
.text:0040555C sub_405530      endp
.text:0040555C
.text:0040555C ; ---------------------------------------------------------------------------
.text:0040555E                 align 10h
.text:00405560                 push    ebp
.text:00405561                 mov     ebp, esp
.text:00405563                 sub     esp, 8
.text:00405566                 mov     [ebp-4], ebx
.text:00405569                 mov     eax, ds:dword_4058B0
.text:0040556E                 cmp     eax, 0FFFFFFFFh
.text:00405571                 jz      short loc_40559C
.text:00405573
.text:00405573 loc_405573:                             ; CODE XREF: .text:004055A6↓j
.text:00405573                                         ; .text:004055B9↓j
.text:00405573                 test    eax, eax
.text:00405575                 mov     ebx, eax
.text:00405577                 jnz     short loc_405590
.text:00405579
.text:00405579 loc_405579:                             ; CODE XREF: .text:0040559A↓j
.text:00405579                 mov     dword ptr [esp], offset sub_405530
.text:00405580                 call    sub_401040
.text:00405585                 mov     ebx, [ebp-4]
.text:00405588                 mov     esp, ebp
.text:0040558A                 pop     ebp
.text:0040558B                 retn
.text:0040558B ; ---------------------------------------------------------------------------
.text:0040558C                 align 10h
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: .text:00405577↑j
.text:00405590                                         ; .text:00405598↓j
.text:00405590                 call    ds:dword_4058B0[ebx*4]
.text:00405597                 dec     ebx
.text:00405598                 jnz     short loc_405590
.text:0040559A                 jmp     short loc_405579
.text:0040559C ; ---------------------------------------------------------------------------
.text:0040559C
.text:0040559C loc_40559C:                             ; CODE XREF: .text:00405571↑j
.text:0040559C                 mov     ecx, ds:dword_4058B4
.text:004055A2                 xor     eax, eax
.text:004055A4                 test    ecx, ecx
.text:004055A6                 jz      short loc_405573
.text:004055A8                 mov     edx, offset dword_4058B0
.text:004055AD                 lea     esi, [esi+0]
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: .text:004055B7↓j
.text:004055B0                 inc     eax
.text:004055B1                 mov     ecx, [edx+eax*4+4]
.text:004055B5                 test    ecx, ecx
.text:004055B7                 jnz     short loc_4055B0
.text:004055B9                 jmp     short loc_405573
.text:004055B9 ; ---------------------------------------------------------------------------
.text:004055BB                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0 ; Attributes: bp-based frame
.text:004055C0
.text:004055C0 sub_4055C0      proc near               ; CODE XREF: sub_4013F0+1B↑p
.text:004055C0
.text:004055C0 var_8           = dword ptr -8
.text:004055C0 var_4           = dword ptr -4
.text:004055C0
.text:004055C0                 push    ebp
.text:004055C1                 mov     ebp, esp
.text:004055C3                 sub     esp, 8
.text:004055C6                 mov     [ebp+var_4], ebx
.text:004055C9                 mov     edx, dword_406080
.text:004055CF                 test    edx, edx
.text:004055D1                 jnz     short loc_4055FA
.text:004055D3                 mov     eax, ds:dword_4058B0
.text:004055D8                 mov     edx, 1
.text:004055DD                 mov     dword_406080, edx
.text:004055E3                 cmp     eax, 0FFFFFFFFh
.text:004055E6                 jz      short loc_40560D
.text:004055E8
.text:004055E8 loc_4055E8:                             ; CODE XREF: sub_4055C0+57↓j
.text:004055E8                                         ; sub_4055C0+69↓j
.text:004055E8                 test    eax, eax
.text:004055EA                 mov     ebx, eax
.text:004055EC                 jnz     short loc_405601
.text:004055EE
.text:004055EE loc_4055EE:                             ; CODE XREF: sub_4055C0+4B↓j
.text:004055EE                 mov     [esp+8+var_8], offset sub_405530 ; void (__cdecl *)()
.text:004055F5                 call    sub_401040
.text:004055FA
.text:004055FA loc_4055FA:                             ; CODE XREF: sub_4055C0+11↑j
.text:004055FA                 mov     ebx, [ebp+var_4]
.text:004055FD                 mov     esp, ebp
.text:004055FF                 pop     ebp
.text:00405600                 retn
.text:00405601 ; ---------------------------------------------------------------------------
.text:00405601
.text:00405601 loc_405601:                             ; CODE XREF: sub_4055C0+2C↑j
.text:00405601                                         ; sub_4055C0+49↓j
.text:00405601                 call    ds:dword_4058B0[ebx*4]
.text:00405608                 dec     ebx
.text:00405609                 jnz     short loc_405601
.text:0040560B                 jmp     short loc_4055EE
.text:0040560D ; ---------------------------------------------------------------------------
.text:0040560D
.text:0040560D loc_40560D:                             ; CODE XREF: sub_4055C0+26↑j
.text:0040560D                 mov     ecx, ds:dword_4058B4
.text:00405613                 xor     eax, eax
.text:00405615                 test    ecx, ecx
.text:00405617                 jz      short loc_4055E8
.text:00405619                 mov     edx, offset dword_4058B0
.text:0040561E                 mov     esi, esi
.text:00405620
.text:00405620 loc_405620:                             ; CODE XREF: sub_4055C0+67↓j
.text:00405620                 inc     eax
.text:00405621                 mov     ebx, [edx+eax*4+4]
.text:00405625                 test    ebx, ebx
.text:00405627                 jnz     short loc_405620
.text:00405629                 jmp     short loc_4055E8
.text:00405629 sub_4055C0      endp
.text:00405629
.text:00405629 ; ---------------------------------------------------------------------------
.text:0040562B                 align 10h
.text:00405630
.text:00405630 ; =============== S U B R O U T I N E =======================================
.text:00405630
.text:00405630 ; Attributes: info_from_lumina
.text:00405630
.text:00405630 ; void *__cdecl _alloca(size_t Size)
.text:00405630 __alloca        proc near               ; CODE XREF: sub_4013F0+13↑p
.text:00405630                 push    ecx
.text:00405631                 mov     ecx, esp
.text:00405633                 add     ecx, 8
.text:00405636
.text:00405636 loc_405636:                             ; CODE XREF: __alloca+1B↓j
.text:00405636                 cmp     eax, 1000h
.text:0040563B                 jb      short loc_40564D
.text:0040563D                 sub     ecx, 1000h
.text:00405643                 or      dword ptr [ecx], 0
.text:00405646                 sub     eax, 1000h
.text:0040564B                 jmp     short loc_405636
.text:0040564D ; ---------------------------------------------------------------------------
.text:0040564D
.text:0040564D loc_40564D:                             ; CODE XREF: __alloca+B↑j
.text:0040564D                 sub     ecx, eax
.text:0040564F                 or      dword ptr [ecx], 0
.text:00405652                 mov     eax, esp
.text:00405654                 mov     esp, ecx
.text:00405656                 mov     ecx, [eax]
.text:00405658                 mov     eax, [eax+4]
.text:0040565B                 jmp     eax
.text:0040565B __alloca        endp
.text:0040565B
.text:0040565B ; ---------------------------------------------------------------------------
.text:0040565D                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660 ; Attributes: thunk
.text:00405660
.text:00405660 ; intptr_t __cdecl execvp(const char *FileName, const char *const *Arguments)
.text:00405660 _execvp         proc near               ; CODE XREF: sub_4013F0+2C4↑p
.text:00405660
.text:00405660 FileName        = dword ptr  4
.text:00405660 Arguments       = dword ptr  8
.text:00405660
.text:00405660                 jmp     ds:__imp__execvp
.text:00405660 _execvp         endp
.text:00405660
.text:00405660 ; ---------------------------------------------------------------------------
.text:00405666                 align 10h
.text:00405670                 jmp     ds:__set_app_type
.text:00405670 ; ---------------------------------------------------------------------------
.text:00405676                 align 10h
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680 ; Attributes: thunk
.text:00405680
.text:00405680 ; void __cdecl cexit()
.text:00405680 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405680                 jmp     ds:__imp__cexit
.text:00405680 _cexit          endp
.text:00405680
.text:00405680 ; ---------------------------------------------------------------------------
.text:00405686                 align 10h
.text:00405690
.text:00405690 ; =============== S U B R O U T I N E =======================================
.text:00405690
.text:00405690 ; Attributes: thunk
.text:00405690
.text:00405690 ; char ***__cdecl _p__environ()
.text:00405690 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405690                 jmp     ds:__imp___p__environ
.text:00405690 __p__environ    endp
.text:00405690
.text:00405690 ; ---------------------------------------------------------------------------
.text:00405696                 align 10h
.text:004056A0
.text:004056A0 ; =============== S U B R O U T I N E =======================================
.text:004056A0
.text:004056A0 ; Attributes: thunk
.text:004056A0
.text:004056A0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004056A0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004056A0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004056A0
.text:004056A0 Signal          = dword ptr  4
.text:004056A0 Function        = dword ptr  8
.text:004056A0
.text:004056A0                 jmp     ds:__imp_signal
.text:004056A0 signal          endp
.text:004056A0
.text:004056A0 ; ---------------------------------------------------------------------------
.text:004056A6                 align 10h
.text:004056B0
.text:004056B0 ; =============== S U B R O U T I N E =======================================
.text:004056B0
.text:004056B0 ; Attributes: thunk
.text:004056B0
.text:004056B0 ; int *__cdecl _p__fmode()
.text:004056B0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004056B0                 jmp     ds:__imp___p__fmode
.text:004056B0 __p__fmode      endp
.text:004056B0
.text:004056B0 ; ---------------------------------------------------------------------------
.text:004056B6                 align 10h
.text:004056C0
.text:004056C0 ; =============== S U B R O U T I N E =======================================
.text:004056C0
.text:004056C0 ; Attributes: thunk
.text:004056C0
.text:004056C0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004056C0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004056C0                                         ; sub_401080+90↑p ...
.text:004056C0
.text:004056C0 FileHandle      = dword ptr  4
.text:004056C0 Mode            = dword ptr  8
.text:004056C0
.text:004056C0                 jmp     ds:__imp__setmode
.text:004056C0 _setmode        endp
.text:004056C0
.text:004056C0 ; ---------------------------------------------------------------------------
.text:004056C6                 align 10h
.text:004056D0
.text:004056D0 ; =============== S U B R O U T I N E =======================================
.text:004056D0
.text:004056D0 ; Attributes: thunk
.text:004056D0
.text:004056D0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004056D0                 jmp     ds:__imp___getmainargs
.text:004056D0 __getmainargs   endp
.text:004056D0
.text:004056D0 ; ---------------------------------------------------------------------------
.text:004056D6                 align 10h
.text:004056E0
.text:004056E0 ; =============== S U B R O U T I N E =======================================
.text:004056E0
.text:004056E0 ; Attributes: thunk
.text:004056E0
.text:004056E0 ; int *__cdecl errno()
.text:004056E0 _errno          proc near               ; CODE XREF: sub_4013F0:loc_4015E0↑p
.text:004056E0                                         ; sub_4013F0:loc_40161F↑p ...
.text:004056E0                 jmp     ds:__imp__errno
.text:004056E0 _errno          endp
.text:004056E0
.text:004056E0 ; ---------------------------------------------------------------------------
.text:004056E6                 align 10h
.text:004056F0
.text:004056F0 ; =============== S U B R O U T I N E =======================================
.text:004056F0
.text:004056F0 ; Attributes: thunk
.text:004056F0
.text:004056F0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004056F0 setlocale       proc near               ; CODE XREF: sub_4013F0+48↑p
.text:004056F0
.text:004056F0 Category        = dword ptr  4
.text:004056F0 Locale          = dword ptr  8
.text:004056F0
.text:004056F0                 jmp     ds:__imp_setlocale
.text:004056F0 setlocale       endp
.text:004056F0
.text:004056F0 ; ---------------------------------------------------------------------------
.text:004056F6                 align 10h
.text:00405700
.text:00405700 ; =============== S U B R O U T I N E =======================================
.text:00405700
.text:00405700 ; Attributes: noreturn thunk
.text:00405700
.text:00405700 ; void __cdecl __noreturn exit(int Code)
.text:00405700 exit            proc near               ; CODE XREF: sub_4013F0:loc_4015DB↑p
.text:00405700                                         ; sub_401A10+3E↑p ...
.text:00405700
.text:00405700 Code            = dword ptr  4
.text:00405700
.text:00405700                 jmp     ds:__imp_exit
.text:00405700 exit            endp
.text:00405700
.text:00405700 ; ---------------------------------------------------------------------------
.text:00405706                 align 10h
.text:00405710
.text:00405710 ; =============== S U B R O U T I N E =======================================
.text:00405710
.text:00405710 ; Attributes: thunk
.text:00405710
.text:00405710 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405710 fputs           proc near               ; CODE XREF: sub_401A10+A4↑p
.text:00405710                                         ; sub_401A10+C6↑p ...
.text:00405710
.text:00405710 Buffer          = dword ptr  4
.text:00405710 Stream          = dword ptr  8
.text:00405710
.text:00405710                 jmp     ds:__imp_fputs
.text:00405710 fputs           endp
.text:00405710
.text:00405710 ; ---------------------------------------------------------------------------
.text:00405716                 align 10h
.text:00405720
.text:00405720 ; =============== S U B R O U T I N E =======================================
.text:00405720
.text:00405720 ; Attributes: thunk
.text:00405720
.text:00405720 ; int printf(const char *const Format, ...)
.text:00405720 printf          proc near               ; CODE XREF: sub_4013F0+221↑p
.text:00405720                                         ; sub_401A10+5D↑p ...
.text:00405720
.text:00405720 Format          = dword ptr  4
.text:00405720
.text:00405720                 jmp     ds:__imp_printf
.text:00405720 printf          endp
.text:00405720
.text:00405720 ; ---------------------------------------------------------------------------
.text:00405726                 align 10h
.text:00405730
.text:00405730 ; =============== S U B R O U T I N E =======================================
.text:00405730
.text:00405730 ; Attributes: thunk
.text:00405730
.text:00405730 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405730 fprintf         proc near               ; CODE XREF: sub_4013F0+1DF↑p
.text:00405730                                         ; sub_401A10+36↑p ...
.text:00405730
.text:00405730 Stream          = dword ptr  4
.text:00405730 Format          = dword ptr  8
.text:00405730
.text:00405730                 jmp     ds:__imp_fprintf
.text:00405730 fprintf         endp
.text:00405730
.text:00405730 ; ---------------------------------------------------------------------------
.text:00405736                 align 10h
.text:00405740
.text:00405740 ; =============== S U B R O U T I N E =======================================
.text:00405740
.text:00405740 ; Attributes: thunk
.text:00405740
.text:00405740 ; size_t __cdecl strlen(const char *Str)
.text:00405740 strlen          proc near               ; CODE XREF: sub_401D50+2A9↑p
.text:00405740                                         ; sub_401D50+346↑p ...
.text:00405740
.text:00405740 Str             = dword ptr  4
.text:00405740
.text:00405740                 jmp     ds:__imp_strlen
.text:00405740 strlen          endp
.text:00405740
.text:00405740 ; ---------------------------------------------------------------------------
.text:00405746                 align 10h
.text:00405750
.text:00405750 ; =============== S U B R O U T I N E =======================================
.text:00405750
.text:00405750 ; Attributes: thunk
.text:00405750
.text:00405750 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405750 strncmp         proc near               ; CODE XREF: sub_401D50+23F↑p
.text:00405750                                         ; sub_401D50+699↑p
.text:00405750
.text:00405750 Str1            = dword ptr  4
.text:00405750 Str2            = dword ptr  8
.text:00405750 MaxCount        = dword ptr  0Ch
.text:00405750
.text:00405750                 jmp     ds:__imp_strncmp
.text:00405750 strncmp         endp
.text:00405750
.text:00405750 ; ---------------------------------------------------------------------------
.text:00405756                 align 10h
.text:00405760
.text:00405760 ; =============== S U B R O U T I N E =======================================
.text:00405760
.text:00405760 ; Attributes: thunk
.text:00405760
.text:00405760 ; char *__cdecl getenv(const char *VarName)
.text:00405760 getenv          proc near               ; CODE XREF: sub_401D50+B57↑p
.text:00405760                                         ; sub_403350+13↑p
.text:00405760
.text:00405760 VarName         = dword ptr  4
.text:00405760
.text:00405760                 jmp     ds:__imp_getenv
.text:00405760 getenv          endp
.text:00405760
.text:00405760 ; ---------------------------------------------------------------------------
.text:00405766                 align 10h
.text:00405770
.text:00405770 ; =============== S U B R O U T I N E =======================================
.text:00405770
.text:00405770 ; Attributes: thunk
.text:00405770
.text:00405770 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405770 strchr          proc near               ; CODE XREF: sub_401D50+469↑p
.text:00405770                                         ; sub_401D50+53A↑p ...
.text:00405770
.text:00405770 Str             = dword ptr  4
.text:00405770 Val             = dword ptr  8
.text:00405770
.text:00405770                 jmp     ds:__imp_strchr
.text:00405770 strchr          endp
.text:00405770
.text:00405770 ; ---------------------------------------------------------------------------
.text:00405776                 align 10h
.text:00405780
.text:00405780 ; =============== S U B R O U T I N E =======================================
.text:00405780
.text:00405780 ; Attributes: thunk
.text:00405780
.text:00405780 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00405780 strtol          proc near               ; CODE XREF: sub_402B90+46↑p
.text:00405780                                         ; sub_403350+43↑p
.text:00405780
.text:00405780 String          = dword ptr  4
.text:00405780 EndPtr          = dword ptr  8
.text:00405780 Radix           = dword ptr  0Ch
.text:00405780
.text:00405780                 jmp     ds:__imp_strtol
.text:00405780 strtol          endp
.text:00405780
.text:00405780 ; ---------------------------------------------------------------------------
.text:00405786                 align 10h
.text:00405790
.text:00405790 ; =============== S U B R O U T I N E =======================================
.text:00405790
.text:00405790 ; Attributes: noreturn thunk
.text:00405790
.text:00405790 _assert         proc near               ; CODE XREF: sub_402B90+660↑p
.text:00405790                 jmp     ds:__imp__assert
.text:00405790 _assert         endp
.text:00405790
.text:00405790 ; ---------------------------------------------------------------------------
.text:00405796                 align 10h
.text:004057A0
.text:004057A0 ; =============== S U B R O U T I N E =======================================
.text:004057A0
.text:004057A0 ; Attributes: thunk
.text:004057A0
.text:004057A0 ; int __cdecl fclose(FILE *Stream)
.text:004057A0 fclose          proc near               ; CODE XREF: sub_403500+27↑p
.text:004057A0
.text:004057A0 Stream          = dword ptr  4
.text:004057A0
.text:004057A0                 jmp     ds:__imp_fclose
.text:004057A0 fclose          endp
.text:004057A0
.text:004057A0 ; ---------------------------------------------------------------------------
.text:004057A6                 align 10h
.text:004057B0
.text:004057B0 ; =============== S U B R O U T I N E =======================================
.text:004057B0
.text:004057B0 ; Attributes: thunk
.text:004057B0
.text:004057B0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004057B0 vfprintf        proc near               ; CODE XREF: sub_4038D0+C1↑p
.text:004057B0                                         ; sub_405200+49↑p ...
.text:004057B0
.text:004057B0 Stream          = dword ptr  4
.text:004057B0 Format          = dword ptr  8
.text:004057B0 ArgList         = dword ptr  0Ch
.text:004057B0
.text:004057B0                 jmp     ds:__imp_vfprintf
.text:004057B0 vfprintf        endp
.text:004057B0
.text:004057B0 ; ---------------------------------------------------------------------------
.text:004057B6                 align 10h
.text:004057C0
.text:004057C0 ; =============== S U B R O U T I N E =======================================
.text:004057C0
.text:004057C0 ; Attributes: noreturn thunk
.text:004057C0
.text:004057C0 ; void __cdecl __noreturn abort()
.text:004057C0 abort           proc near               ; CODE XREF: sub_4038D0:loc_40396C↑p
.text:004057C0                                         ; sub_404CB0:loc_404E6A↑p ...
.text:004057C0                 jmp     ds:__imp_abort
.text:004057C0 abort           endp
.text:004057C0
.text:004057C0 ; ---------------------------------------------------------------------------
.text:004057C6                 align 10h
.text:004057D0
.text:004057D0 ; =============== S U B R O U T I N E =======================================
.text:004057D0
.text:004057D0 ; Attributes: thunk
.text:004057D0
.text:004057D0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004057D0 _flsbuf         proc near               ; CODE XREF: sub_4038D0+128↑p
.text:004057D0                                         ; sub_4038D0+13A↑p ...
.text:004057D0
.text:004057D0 File            = dword ptr  8
.text:004057D0
.text:004057D0                 jmp     ds:__imp__flsbuf
.text:004057D0 _flsbuf         endp
.text:004057D0
.text:004057D0 ; ---------------------------------------------------------------------------
.text:004057D6                 align 10h
.text:004057E0
.text:004057E0 ; =============== S U B R O U T I N E =======================================
.text:004057E0
.text:004057E0 ; Attributes: thunk
.text:004057E0
.text:004057E0 ; void __cdecl free(void *Block)
.text:004057E0 free            proc near               ; CODE XREF: sub_404CB0+112↑p
.text:004057E0
.text:004057E0 Block           = dword ptr  4
.text:004057E0
.text:004057E0                 jmp     ds:__imp_free
.text:004057E0 free            endp
.text:004057E0
.text:004057E0 ; ---------------------------------------------------------------------------
.text:004057E6                 align 10h
.text:004057F0
.text:004057F0 ; =============== S U B R O U T I N E =======================================
.text:004057F0
.text:004057F0 ; Attributes: thunk
.text:004057F0
.text:004057F0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004057F0 iswctype        proc near               ; CODE XREF: sub_403B70+78B↑p
.text:004057F0
.text:004057F0 C               = word ptr  4
.text:004057F0 Type            = word ptr  8
.text:004057F0
.text:004057F0                 jmp     ds:__imp_iswctype
.text:004057F0 iswctype        endp
.text:004057F0
.text:004057F0 ; ---------------------------------------------------------------------------
.text:004057F6                 align 10h
.text:00405800
.text:00405800 ; =============== S U B R O U T I N E =======================================
.text:00405800
.text:00405800 ; Attributes: thunk
.text:00405800
.text:00405800 ; int __cdecl isctype(int C, int Type)
.text:00405800 _isctype        proc near               ; CODE XREF: sub_403B70+610↑p
.text:00405800
.text:00405800 C               = dword ptr  4
.text:00405800 Type            = dword ptr  8
.text:00405800
.text:00405800                 jmp     ds:__imp__isctype
.text:00405800 _isctype        endp
.text:00405800
.text:00405800 ; ---------------------------------------------------------------------------
.text:00405806                 align 10h
.text:00405810
.text:00405810 ; =============== S U B R O U T I N E =======================================
.text:00405810
.text:00405810 ; Attributes: thunk
.text:00405810
.text:00405810 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405810 memcpy          proc near               ; CODE XREF: .text:00405068↑p
.text:00405810                                         ; .text:004050B1↑p
.text:00405810
.text:00405810 Src             = dword ptr  8
.text:00405810 Size            = dword ptr  0Ch
.text:00405810
.text:00405810                 jmp     ds:__imp_memcpy
.text:00405810 memcpy          endp
.text:00405810
.text:00405810 ; ---------------------------------------------------------------------------
.text:00405816                 align 10h
.text:00405820
.text:00405820 ; =============== S U B R O U T I N E =======================================
.text:00405820
.text:00405820 ; Attributes: thunk
.text:00405820
.text:00405820 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405820 memset          proc near               ; CODE XREF: .text:00404FE6↑p
.text:00405820
.text:00405820 Val             = dword ptr  8
.text:00405820 Size            = dword ptr  0Ch
.text:00405820
.text:00405820                 jmp     ds:__imp_memset
.text:00405820 memset          endp
.text:00405820
.text:00405820 ; ---------------------------------------------------------------------------
.text:00405826                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830 ; Attributes: thunk
.text:00405830
.text:00405830 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405830 calloc          proc near               ; CODE XREF: .text:00405023↑p
.text:00405830
.text:00405830 Count           = dword ptr  4
.text:00405830 Size            = dword ptr  8
.text:00405830
.text:00405830                 jmp     ds:__imp_calloc
.text:00405830 calloc          endp
.text:00405830
.text:00405830 ; ---------------------------------------------------------------------------
.text:00405836                 align 10h
.text:00405840
.text:00405840 ; =============== S U B R O U T I N E =======================================
.text:00405840
.text:00405840 ; Attributes: thunk
.text:00405840
.text:00405840 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405840 realloc         proc near               ; CODE XREF: .text:00404F20↑p
.text:00405840                                         ; sub_404F50+16↑p ...
.text:00405840
.text:00405840 Block           = dword ptr  4
.text:00405840 Size            = dword ptr  8
.text:00405840
.text:00405840                 jmp     ds:__imp_realloc
.text:00405840 realloc         endp
.text:00405840
.text:00405840 ; ---------------------------------------------------------------------------
.text:00405846                 align 10h
.text:00405850
.text:00405850 ; =============== S U B R O U T I N E =======================================
.text:00405850
.text:00405850 ; Attributes: thunk
.text:00405850
.text:00405850 ; void *__cdecl malloc(size_t Size)
.text:00405850 malloc          proc near               ; CODE XREF: sub_404E80+24↑p
.text:00405850                                         ; sub_404EC0+E↑p ...
.text:00405850
.text:00405850 Size            = dword ptr  4
.text:00405850
.text:00405850                 jmp     ds:__imp_malloc
.text:00405850 malloc          endp
.text:00405850
.text:00405850 ; ---------------------------------------------------------------------------
.text:00405856                 align 10h
.text:00405860
.text:00405860 ; =============== S U B R O U T I N E =======================================
.text:00405860
.text:00405860 ; Attributes: thunk
.text:00405860
.text:00405860 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405860 strcmp          proc near               ; CODE XREF: sub_405304+180↑p
.text:00405860
.text:00405860 Str1            = dword ptr  4
.text:00405860 Str2            = dword ptr  8
.text:00405860
.text:00405860                 jmp     ds:__imp_strcmp
.text:00405860 strcmp          endp
.text:00405860
.text:00405860 ; ---------------------------------------------------------------------------
.text:00405866                 align 10h
.text:00405870
.text:00405870 ; =============== S U B R O U T I N E =======================================
.text:00405870
.text:00405870 ; Attributes: thunk
.text:00405870
.text:00405870 ; int __cdecl fflush(FILE *Stream)
.text:00405870 fflush          proc near               ; CODE XREF: sub_405200+19↑p
.text:00405870                                         ; sub_405200+81↑p ...
.text:00405870
.text:00405870 Stream          = dword ptr  4
.text:00405870
.text:00405870                 jmp     ds:__imp_fflush
.text:00405870 fflush          endp
.text:00405870
.text:00405870 ; ---------------------------------------------------------------------------
.text:00405876                 align 10h
.text:00405880
.text:00405880 ; =============== S U B R O U T I N E =======================================
.text:00405880
.text:00405880 ; Attributes: thunk
.text:00405880
.text:00405880 ; char *__cdecl strerror(int ErrorMessage)
.text:00405880 strerror        proc near               ; CODE XREF: sub_405200+A5↑p
.text:00405880                                         ; sub_405304+10F↑p
.text:00405880
.text:00405880 ErrorMessage    = dword ptr  4
.text:00405880
.text:00405880                 jmp     ds:__imp_strerror
.text:00405880 strerror        endp
.text:00405880
.text:00405880 ; ---------------------------------------------------------------------------
.text:00405886                 align 10h
.text:00405890
.text:00405890 ; =============== S U B R O U T I N E =======================================
.text:00405890
.text:00405890 ; Attributes: thunk
.text:00405890
.text:00405890 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405890 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405890
.text:00405890 lpTopLevelExceptionFilter= dword ptr  4
.text:00405890
.text:00405890                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405890 SetUnhandledExceptionFilter endp
.text:00405890
.text:00405890 ; ---------------------------------------------------------------------------
.text:00405896                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0 ; Attributes: noreturn thunk
.text:004058A0
.text:004058A0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004058A0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004058A0
.text:004058A0 uExitCode       = dword ptr  4
.text:004058A0
.text:004058A0                 jmp     ds:__imp_ExitProcess
.text:004058A0 ExitProcess     endp
.text:004058A0
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A6                 align 10h
.text:004058B0 dword_4058B0    dd 0FFFFFFFFh           ; DATA XREF: .text:00405569↑r
.text:004058B0                                         ; .text:loc_405590↑r ...
.text:004058B4 dword_4058B4    dd 0                    ; DATA XREF: .text:loc_40559C↑r
.text:004058B4                                         ; sub_4055C0:loc_40560D↑r
.text:004058B8                 dd 0FFFFFFFFh
.text:004058BC dword_4058BC    dd 51h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405A00                 dd 180h dup(?)
.text:00405A00 _text           ends
.text:00405A00
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004E00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_4013F0+EC↑w
.data:00406010                                         ; sub_4013F0:loc_40151F↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_4028E0+11↑r
.data:00406014                                         ; .text:00402981↑r ...
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_4028E0+7D↑w
.data:00406018                                         ; .text:004029ED↑w
.data:0040601C                 align 10h
.data:00406020 ; char *Buffer
.data:00406020 Buffer          dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_4038D0+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_403500+6D↑r
.data:00406030                                         ; sub_403500+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_404CB0+22↑r
.data:00406040                                         ; sub_404CB0+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_404CB0+3F↑o
.data:00406044                                         ; sub_404CB0+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407040    ; DATA XREF: sub_404CB0+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_404CB0+39↑r
.data:0040604C                                         ; sub_404CB0+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_4055C0+9↑r
.data:00406080                                         ; sub_4055C0+1D↑w
.data:00406084 off_406084      dd offset dword_4058BC  ; DATA XREF: sub_405530+6↑r
.data:00406084                                         ; sub_405530+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000230 (    560.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4028E0+9↑o
.bss:00407000                                         ; sub_4028E0+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_4028E0+21↑w
.bss:00407004                                         ; .text:00402999↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_4028E0+77↑r
.bss:00407008                                         ; .text:004029E7↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_4028E0+6B↑r
.bss:0040700C                                         ; .text:004029DB↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:004034D4↑w
.bss:00407030                                         ; sub_403500+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_404CB0+100↑o
.bss:00407040                                         ; .data:off_406048↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_404641↑o
.bss:00407140                                         ; .text:loc_404660↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_4046E0↑o
.bss:00407144                                         ; .text:00404B68↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:00404B62↑r
.bss:00407148                                         ; sub_404C10+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:00404B56↑r
.bss:0040714C                                         ; sub_404C10+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00404B72↑r
.bss:00407150                                         ; sub_404C10+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00404B82↑r
.bss:00407154                                         ; sub_404C10+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00404B9F↑r
.bss:00407158                                         ; sub_404C10+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00404B95↑r
.bss:0040715C                                         ; sub_404C10+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00404B78↑r
.bss:00407160                                         ; sub_404C10+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_405304:loc_40533D↑w
.bss:00407170                                         ; sub_405304:loc_405470↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_405304+2D↑r
.bss:00407180                                         ; sub_405304+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_4013F0+42↑w
.bss:00407190                                         ; sub_4013F0+1CB↑r ...
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_4013F0:loc_4017A1↑r
.bss:004071B0                                         ; sub_4028E0+71↑w ...
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; CODE XREF: sub_405304+63↑p
.bss:004071C0                                         ; DATA XREF: sub_405200+1E↑r ...
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_405200+4E↑w
.bss:004071D0                                         ; sub_405304+AB↑w
.bss:004071D4                 align 40h
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_405304+13↑r
.bss:00407204                 align 1000h
.bss:00407204 _bss            ends
.bss:00407204
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 0000059C (   1436.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00005000
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:0040815C ;
.idata:0040815C ; Imports from libintl3.dll
.idata:0040815C ;
.idata:0040815C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040815C                                         ; CODE XREF: sub_4013F0+5C↑p
.idata:0040815C                                         ; DATA XREF: sub_4013F0+5C↑r ...
.idata:00408160                 extrn libintl_gettext:dword
.idata:00408160                                         ; CODE XREF: sub_4013F0+19A↑p
.idata:00408160                                         ; sub_4013F0+1BF↑p ...
.idata:00408164                 extrn libintl_textdomain:dword
.idata:00408164                                         ; CODE XREF: sub_4013F0+69↑p
.idata:00408164                                         ; DATA XREF: sub_4013F0+69↑r ...
.idata:00408168
.idata:00408170 ;
.idata:00408170 ; Imports from KERNEL32.dll
.idata:00408170 ;
.idata:00408170 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408170                 extrn __imp_ExitProcess:dword
.idata:00408170                                         ; DATA XREF: ExitProcess↑r
.idata:00408174 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408174                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408174                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00408178
.idata:00408180 ;
.idata:00408180 ; Imports from msvcrt.dll
.idata:00408180 ;
.idata:00408180 ; intptr_t (__cdecl *_execvp)(const char *FileName, const char *const *Arguments)
.idata:00408180                 extrn __imp__execvp:dword
.idata:00408180                                         ; DATA XREF: _execvp↑r
.idata:00408184
.idata:0040818C ;
.idata:0040818C ; Imports from MSVCP60.DLL
.idata:0040818C ;
.idata:0040818C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040818C                 extrn __imp_mbrtowc:dword
.idata:0040818C                                         ; DATA XREF: mbrtowc↑r
.idata:00408190
.idata:00408198 ;
.idata:00408198 ; Imports from msvcrt.dll
.idata:00408198 ;
.idata:00408198                 extrn __imp___getmainargs:dword
.idata:00408198                                         ; DATA XREF: __getmainargs↑r
.idata:0040819C ; int _mb_cur_max
.idata:0040819C                 extrn __mb_cur_max:dword
.idata:0040819C                                         ; DATA XREF: sub_403B70+7↑r
.idata:0040819C                                         ; sub_403B70+5F3↑r
.idata:004081A0 ; char ***(__cdecl *__p__environ)()
.idata:004081A0                 extrn __imp___p__environ:dword
.idata:004081A0                                         ; DATA XREF: __p__environ↑r
.idata:004081A4 ; int *(__cdecl *__p__fmode)()
.idata:004081A4                 extrn __imp___p__fmode:dword
.idata:004081A4                                         ; DATA XREF: __p__fmode↑r
.idata:004081A8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081A8                 extrn __set_app_type:dword
.idata:004081A8                                         ; CODE XREF: start+D↑p
.idata:004081A8                                         ; .text:0040102D↑p
.idata:004081A8                                         ; DATA XREF: ...
.idata:004081AC                 extrn __imp__assert:dword
.idata:004081AC                                         ; DATA XREF: _assert↑r
.idata:004081B0 ; void (__cdecl *_cexit)()
.idata:004081B0                 extrn __imp__cexit:dword
.idata:004081B0                                         ; DATA XREF: _cexit↑r
.idata:004081B4 ; int *(__cdecl *_errno)()
.idata:004081B4                 extrn __imp__errno:dword
.idata:004081B4                                         ; DATA XREF: _errno↑r
.idata:004081B8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081B8                 extrn __imp__flsbuf:dword
.idata:004081B8                                         ; DATA XREF: _flsbuf↑r
.idata:004081BC ; FILE iob[]
.idata:004081BC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081BC                                         ; sub_401080+75↑r ...
.idata:004081C0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081C0                 extrn __imp__isctype:dword
.idata:004081C0                                         ; DATA XREF: _isctype↑r
.idata:004081C4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081C4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081C4                                         ; DATA XREF: .text:0040106C↑r
.idata:004081C8 ; const unsigned __int16 *pctype
.idata:004081C8                 extrn _pctype:dword     ; DATA XREF: sub_403B70:loc_404264↑r
.idata:004081CC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081CC                 extrn __imp__setmode:dword
.idata:004081CC                                         ; DATA XREF: _setmode↑r
.idata:004081D0 ; void (__cdecl __noreturn *abort)()
.idata:004081D0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081D4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081D4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081D4                                         ; DATA XREF: sub_401040+C↑r
.idata:004081D8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081D8                 extrn __imp_calloc:dword
.idata:004081D8                                         ; DATA XREF: calloc↑r
.idata:004081DC ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081DC                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081E0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081E0                 extrn __imp_fclose:dword
.idata:004081E0                                         ; DATA XREF: fclose↑r
.idata:004081E4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081E4                 extrn __imp_fflush:dword
.idata:004081E4                                         ; DATA XREF: fflush↑r
.idata:004081E8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081E8                 extrn __imp_fprintf:dword
.idata:004081E8                                         ; DATA XREF: fprintf↑r
.idata:004081EC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081EC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081F0 ; void (__cdecl *free)(void *Block)
.idata:004081F0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081F4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081F4                 extrn __imp_getenv:dword
.idata:004081F4                                         ; DATA XREF: getenv↑r
.idata:004081F8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081F8                 extrn __imp_iswctype:dword
.idata:004081F8                                         ; DATA XREF: iswctype↑r
.idata:004081FC ; void *(__cdecl *malloc)(size_t Size)
.idata:004081FC                 extrn __imp_malloc:dword
.idata:004081FC                                         ; DATA XREF: malloc↑r
.idata:00408200 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408200                 extrn __imp_memcpy:dword
.idata:00408200                                         ; DATA XREF: memcpy↑r
.idata:00408204 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408204                 extrn __imp_memset:dword
.idata:00408204                                         ; DATA XREF: memset↑r
.idata:00408208 ; int (*printf)(const char *const Format, ...)
.idata:00408208                 extrn __imp_printf:dword
.idata:00408208                                         ; DATA XREF: printf↑r
.idata:0040820C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040820C                 extrn __imp_realloc:dword
.idata:0040820C                                         ; DATA XREF: realloc↑r
.idata:00408210 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408210                 extrn __imp_setlocale:dword
.idata:00408210                                         ; DATA XREF: setlocale↑r
.idata:00408214 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408214                 extrn __imp_signal:dword
.idata:00408214                                         ; DATA XREF: signal↑r
.idata:00408218 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408218                 extrn __imp_strchr:dword
.idata:00408218                                         ; DATA XREF: strchr↑r
.idata:0040821C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040821C                 extrn __imp_strcmp:dword
.idata:0040821C                                         ; DATA XREF: strcmp↑r
.idata:00408220 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408220                 extrn __imp_strerror:dword
.idata:00408220                                         ; DATA XREF: strerror↑r
.idata:00408224 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408224                 extrn __imp_strlen:dword
.idata:00408224                                         ; DATA XREF: strlen↑r
.idata:00408228 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408228                 extrn __imp_strncmp:dword
.idata:00408228                                         ; DATA XREF: strncmp↑r
.idata:0040822C ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:0040822C                 extrn __imp_strtol:dword
.idata:0040822C                                         ; DATA XREF: strtol↑r
.idata:00408230 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408230                 extrn __imp_vfprintf:dword
.idata:00408230                                         ; DATA XREF: vfprintf↑r
.idata:00408234
.idata:00408234
.idata:00408234
.idata:00408234                 end start
