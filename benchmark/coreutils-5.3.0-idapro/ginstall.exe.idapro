.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 53AED63310B39C513BECEB3B651174B39E69BDF529980FE49551CA08EA55FB1E
.text:00401000 ; Input MD5    : 78337E5BB5E9A3EE67683DFB5EC993FA
.text:00401000 ; Input CRC32  : AC21CB61
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/ginstall.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A244 (Wed Apr 20 18:41:08 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0001E7F0 ( 124912.)
.text:00401000 ; Section size in file          : 0001E800 ( 124928.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401700+97↓p
.text:00401040                                         ; .text:0041E890↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_41E830
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_420000
.text:004010A2                 mov     edx, dword_4200E0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_420004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_420100, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_420100
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_41E800
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_420000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_420004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401700
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_41E830
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aBackup         db 'backup',0           ; DATA XREF: .text:off_401320↓o
.text:00401287 aDirectory      db 'directory',0        ; DATA XREF: .text:00401330↓o
.text:00401291 aGroup          db 'group',0            ; DATA XREF: .text:00401340↓o
.text:00401297 aMode           db 'mode',0             ; DATA XREF: .text:00401350↓o
.text:0040129C aNoTargetDirect db 'no-target-directory',0
.text:0040129C                                         ; DATA XREF: .text:00401360↓o
.text:004012B0 aOwner          db 'owner',0            ; DATA XREF: .text:00401370↓o
.text:004012B6 aPreserveTimest db 'preserve-timestamps',0
.text:004012B6                                         ; DATA XREF: .text:00401380↓o
.text:004012CA ; const char Arguments[]
.text:004012CA Arguments       db 'strip',0            ; DATA XREF: .text:00401390↓o
.text:004012CA                                         ; sub_4025F0+7A↓o ...
.text:004012D0 aSuffix         db 'suffix',0           ; DATA XREF: .text:004013A0↓o
.text:004012D7 aTargetDirector_0 db 'target-directory',0
.text:004012D7                                         ; DATA XREF: .text:004013B0↓o
.text:004012E8 aVersionControl_1 db 'version-control',0
.text:004012E8                                         ; DATA XREF: .text:004013C0↓o
.text:004012F8 aVerbose        db 'verbose',0          ; DATA XREF: .text:004013D0↓o
.text:00401300 aHelp           db 'help',0             ; DATA XREF: .text:004013E0↓o
.text:00401305 aVersion        db 'version',0          ; DATA XREF: .text:004013F0↓o
.text:0040130D                 align 20h
.text:00401320 off_401320      dd offset aBackup       ; DATA XREF: sub_401700+16E↓o
.text:00401320                                         ; "backup"
.text:00401324                 dd 2, 0
.text:0040132C                 dd 62h
.text:00401330                 dd offset aDirectory    ; "directory"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 64h
.text:00401340                 dd offset aGroup        ; "group"
.text:00401344                 dd 1, 0
.text:0040134C                 dd 67h
.text:00401350                 dd offset aMode         ; "mode"
.text:00401354                 dd 1, 0
.text:0040135C                 dd 6Dh
.text:00401360                 dd offset aNoTargetDirect ; "no-target-directory"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 54h
.text:00401370                 dd offset aOwner        ; "owner"
.text:00401374                 dd 1, 0
.text:0040137C                 dd 6Fh
.text:00401380                 dd offset aPreserveTimest ; "preserve-timestamps"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 70h
.text:00401390                 dd offset Arguments     ; "strip"
.text:00401394                 dd 2 dup(0)
.text:0040139C                 dd 73h
.text:004013A0                 dd offset aSuffix       ; "suffix"
.text:004013A4                 dd 1, 0
.text:004013AC                 dd 53h
.text:004013B0                 dd offset aTargetDirector_0 ; "target-directory"
.text:004013B4                 dd 1, 0
.text:004013BC                 dd 74h
.text:004013C0                 dd offset aVersionControl_1 ; "version-control"
.text:004013C4                 dd 1, 0
.text:004013CC                 dd 56h
.text:004013D0                 dd offset aVerbose      ; "verbose"
.text:004013D4                 dd 2 dup(0)
.text:004013DC                 dd 76h
.text:004013E0                 dd offset aHelp         ; "help"
.text:004013E4                 dd 2 dup(0)
.text:004013EC                 dd 0FFFFFF7Eh
.text:004013F0                 dd offset aVersion      ; "version"
.text:004013F4                 dd 2 dup(0)
.text:004013FC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401410 ; const char Locale
.text:00401410 Locale          db 0                    ; DATA XREF: sub_401700+5A↓o
.text:00401411                 db 0EBh, 0Dh, 90h
.text:00401414                 align 10h
.text:00401420 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401420                                         ; DATA XREF: sub_401700+6E↓o
.text:00401443 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401700+76↓o
.text:00401443                                         ; sub_401700+83↓o
.text:0040144D ; const char VarName[]
.text:0040144D VarName         db 'SIMPLE_BACKUP_SUFFIX',0
.text:0040144D                                         ; DATA XREF: sub_401700+146↓o
.text:00401462 ; const char aBcsddgMOPtTvvS[]
.text:00401462 aBcsddgMOPtTvvS db 'bcsDdg:m:o:pt:TvV:S:',0
.text:00401462                                         ; DATA XREF: sub_401700+176↓o
.text:00401477 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401700+1EC↓o
.text:00401487 a530            db '5.3.0',0            ; DATA XREF: sub_401700+1F4↓o
.text:0040148D aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401700+1FF↓o
.text:0040149B ; const FILE stru_40149B
.text:0040149B stru_40149B     FILE <74736E69h, 6C6C61h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:0040149B                                         ; DATA XREF: sub_401700+207↓o
.text:0040149B                       90909090h, 90909090h>
.text:004014BB                 db  90h
.text:004014BC                 db  90h
.text:004014BD                 db  90h
.text:004014BE                 db  90h
.text:004014BF                 db  90h
.text:004014C0 aWarningVersion db 'warning: --version-control (-V) is obsolete;  support for it',0Ah
.text:004014C0                                         ; DATA XREF: sub_401700:loc_401983↓o
.text:004014C0                 db 'will be removed in some future release.  Use --backup=%s instead.'
.text:004014C0                 db 0
.text:0040153F                 align 10h
.text:00401540 aMultipleTarget db 'multiple target directories specified',0
.text:00401540                                         ; DATA XREF: sub_401700+361↓o
.text:00401566 aTargetSIsNotAD db 'target %s is not a directory',0
.text:00401566                                         ; DATA XREF: sub_401700+3D4↓o
.text:00401566                                         ; sub_401700+815↓o ...
.text:00401583 aAccessingS     db 'accessing %s',0     ; DATA XREF: sub_401700+40F↓o
.text:00401583                                         ; sub_401700+952↓o
.text:00401590                 align 20h
.text:004015A0 aMissingDestina db 'missing destination file operand after %s',0
.text:004015A0                                         ; DATA XREF: sub_401700+4FE↓o
.text:004015CA                 align 20h
.text:004015E0 aCannotCombineT db 'Cannot combine --target-directory (-t) and --no-target-directory '
.text:004015E0                                         ; DATA XREF: sub_401700+54C↓o
.text:004015E0                 db '(-T)',0
.text:00401626 aCreatingDirect db 'creating directory %s',0
.text:00401626                                         ; DATA XREF: sub_401700:loc_401D7A↓o
.text:00401626                                         ; sub_402170:loc_402240↓o
.text:0040163C aInvalidModeS   db 'invalid mode %s',0  ; DATA XREF: sub_401700+75D↓o
.text:0040164C aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401700+79E↓o
.text:0040165D aMissingFileOpe db 'missing file operand',0
.text:0040165D                                         ; DATA XREF: sub_401700:loc_4020A2↓o
.text:00401672 aBackupType     db 'backup type',0      ; DATA XREF: sub_401700:loc_4020D6↓o
.text:0040167E                 align 10h
.text:00401680 aTheStripOption db 'the strip option may not be used when installing a directory',0
.text:00401680                                         ; DATA XREF: sub_401700:loc_4020FA↓o
.text:004016BD                 align 10h
.text:004016C0 aTargetDirector db 'target directory not allowed when installing a directory',0
.text:004016C0                                         ; DATA XREF: sub_401700+A3C↓o
.text:004016F9                 align 10h
.text:00401700
.text:00401700 ; =============== S U B R O U T I N E =======================================
.text:00401700
.text:00401700 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401700
.text:00401700 sub_401700      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401700
.text:00401700 Category        = dword ptr -118h
.text:00401700 Locale          = dword ptr -114h
.text:00401700 var_110         = dword ptr -110h
.text:00401700 var_10C         = byte ptr -10Ch
.text:00401700 var_108         = byte ptr -108h
.text:00401700 var_104         = byte ptr -104h
.text:00401700 var_100         = dword ptr -100h
.text:00401700 var_F3          = byte ptr -0F3h
.text:00401700 var_F2          = byte ptr -0F2h
.text:00401700 var_F1          = byte ptr -0F1h
.text:00401700 ErrorMessage    = dword ptr -0F0h
.text:00401700 var_E9          = byte ptr -0E9h
.text:00401700 var_E8          = dword ptr -0E8h
.text:00401700 var_E1          = byte ptr -0E1h
.text:00401700 var_E0          = dword ptr -0E0h
.text:00401700 var_D9          = byte ptr -0D9h
.text:00401700 var_D8          = dword ptr -0D8h
.text:00401700 var_D1          = byte ptr -0D1h
.text:00401700 var_D0          = dword ptr -0D0h
.text:00401700 var_C9          = byte ptr -0C9h
.text:00401700 var_C8          = dword ptr -0C8h
.text:00401700 var_58          = dword ptr -58h
.text:00401700 var_54          = byte ptr -54h
.text:00401700 var_50          = dword ptr -50h
.text:00401700 var_4C          = byte ptr -4Ch
.text:00401700 var_4B          = byte ptr -4Bh
.text:00401700 var_4A          = byte ptr -4Ah
.text:00401700 var_48          = dword ptr -48h
.text:00401700 var_44          = byte ptr -44h
.text:00401700 var_40          = dword ptr -40h
.text:00401700 var_3C          = byte ptr -3Ch
.text:00401700 var_3B          = byte ptr -3Bh
.text:00401700 var_3A          = byte ptr -3Ah
.text:00401700 var_39          = byte ptr -39h
.text:00401700 var_38          = byte ptr -38h
.text:00401700 var_37          = byte ptr -37h
.text:00401700 var_36          = byte ptr -36h
.text:00401700 var_35          = byte ptr -35h
.text:00401700 var_34          = word ptr -34h
.text:00401700 var_30          = dword ptr -30h
.text:00401700 var_2C          = byte ptr -2Ch
.text:00401700 var_2A          = word ptr -2Ah
.text:00401700 var_28          = byte ptr -28h
.text:00401700 var_27          = byte ptr -27h
.text:00401700 var_26          = byte ptr -26h
.text:00401700 var_24          = dword ptr -24h
.text:00401700 var_20          = dword ptr -20h
.text:00401700 arg_0           = dword ptr  8
.text:00401700 arg_4           = dword ptr  0Ch
.text:00401700
.text:00401700                 push    ebp
.text:00401701                 xor     eax, eax
.text:00401703                 mov     ebp, esp
.text:00401705                 push    edi
.text:00401706                 xor     edi, edi
.text:00401708                 push    esi
.text:00401709                 xor     esi, esi
.text:0040170B                 push    ebx
.text:0040170C                 sub     esp, 10Ch
.text:00401712                 and     esp, 0FFFFFFF0h
.text:00401715                 call    __alloca
.text:0040171A                 call    sub_41E8D0
.text:0040171F                 mov     [ebp+var_D0], edi
.text:00401725                 mov     ebx, [ebp+arg_4]
.text:00401728                 xor     edx, edx
.text:0040172A                 mov     [ebp+var_E0], edx
.text:00401730                 mov     [ebp+var_C9], 1
.text:00401737                 mov     ecx, [ebx]
.text:00401739                 mov     [ebp+var_D1], 0
.text:00401740                 mov     [ebp+var_D8], esi
.text:00401746                 mov     ds:dword_421C80, ecx
.text:0040174C                 mov     [ebp+var_D9], 0
.text:00401753                 mov     [ebp+var_E1], 0
.text:0040175A                 mov     [esp+118h+Locale], offset Locale ; Locale
.text:00401762                 mov     [esp+118h+Category], 0 ; Category
.text:00401769                 call    setlocale
.text:0040176E                 mov     [esp+118h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401776                 mov     [esp+118h+Category], offset aCoreutils ; "coreutils"
.text:0040177D                 call    ds:libintl_bindtextdomain
.text:00401783                 mov     [esp+118h+Category], offset aCoreutils ; "coreutils"
.text:0040178A                 call    ds:libintl_textdomain
.text:00401790                 mov     [esp+118h+Category], offset sub_40AC20 ; void (__cdecl *)()
.text:00401797                 call    sub_401040
.text:0040179C                 mov     [ebp+var_54], 1
.text:004017A0                 mov     [ebp+var_50], 4
.text:004017A7                 mov     [ebp+var_4C], 1
.text:004017AB                 mov     [ebp+var_4B], 0
.text:004017AF                 mov     [ebp+var_4A], 0
.text:004017B3                 mov     [ebp+var_48], 4
.text:004017BA                 mov     [ebp+var_44], 0
.text:004017BE                 call    sub_4198B0
.text:004017C3                 mov     [ebp+var_40], eax
.text:004017C6                 xor     eax, eax
.text:004017C8                 mov     ds:dword_421000, eax
.text:004017CD                 xor     eax, eax
.text:004017CF                 mov     [ebp+var_3C], 0
.text:004017D3                 mov     [ebp+var_3B], 0
.text:004017D7                 mov     [ebp+var_38], 0
.text:004017DB                 mov     [ebp+var_3A], 0
.text:004017DF                 mov     [ebp+var_39], 0
.text:004017E3                 mov     [ebp+var_37], 0
.text:004017E7                 mov     [ebp+var_36], 0
.text:004017EB                 mov     [ebp+var_30], 2
.text:004017F2                 mov     [ebp+var_2C], 0
.text:004017F6                 mov     [ebp+var_58], 0
.text:004017FD                 mov     [ebp+var_35], 1
.text:00401801                 mov     [ebp+var_34], 180h
.text:00401807                 mov     [ebp+var_26], 0
.text:0040180B                 mov     [ebp+var_2A], 0
.text:00401811                 mov     [ebp+var_28], 0
.text:00401815                 mov     [ebp+var_27], 0
.text:00401819                 mov     [ebp+var_24], 0
.text:00401820                 mov     [ebp+var_20], 0
.text:00401827                 mov     ds:dword_421020, eax
.text:0040182C                 mov     ds:byte_421040, 0
.text:00401833                 mov     ds:byte_421050, 0
.text:0040183A                 mov     [esp+118h+Category], 0 ; Mode
.text:00401841                 call    _umask
.text:00401846                 mov     [esp+118h+Category], offset VarName ; "SIMPLE_BACKUP_SUFFIX"
.text:0040184D                 call    getenv
.text:00401852                 mov     edi, eax
.text:00401854                 lea     esi, [esi+0]
.text:0040185A                 lea     edi, [edi+0]
.text:00401860
.text:00401860 loc_401860:                             ; CODE XREF: sub_401700+196↓j
.text:00401860                                         ; sub_401700+22F↓j ...
.text:00401860                 mov     dword ptr [esp+118h+var_108], 0 ; int
.text:00401868                 mov     edx, [ebp+arg_4]
.text:0040186B                 mov     ecx, [ebp+arg_0]
.text:0040186E                 mov     dword ptr [esp+118h+var_10C], offset off_401320 ; char
.text:00401876                 mov     [esp+118h+var_110], offset aBcsddgMOPtTvvS ; "bcsDdg:m:o:pt:TvV:S:"
.text:0040187E                 mov     [esp+118h+Locale], edx ; int
.text:00401882                 mov     [esp+118h+Category], ecx ; int
.text:00401885                 call    sub_40AAB0
.text:0040188A                 cmp     eax, 0FFFFFFFFh
.text:0040188D                 jz      loc_401B75
.text:00401893                 cmp     eax, 63h ; 'c'
.text:00401896                 jz      short loc_401860
.text:00401898                 cmp     eax, 63h ; 'c'
.text:0040189B                 jg      loc_4019C6
.text:004018A1                 cmp     eax, 53h ; 'S'
.text:004018A4                 jz      loc_4019B4
.text:004018AA                 cmp     eax, 53h ; 'S'
.text:004018AD                 jg      loc_401940
.text:004018B3                 cmp     eax, 0FFFFFF7Eh
.text:004018B8                 jz      short loc_401934
.text:004018BA                 cmp     eax, 0FFFFFF7Eh
.text:004018BF                 jg      short loc_401923
.text:004018C1                 cmp     eax, 0FFFFFF7Dh
.text:004018C6                 jz      short loc_4018DE
.text:004018C8                 nop
.text:004018C9                 lea     esi, [esi+0]
.text:004018D0
.text:004018D0 loc_4018D0:                             ; CODE XREF: sub_401700+226↓j
.text:004018D0                                         ; sub_401700+24D↓j ...
.text:004018D0                 mov     [esp+118h+Category], 1 ; Code
.text:004018D7
.text:004018D7 loc_4018D7:                             ; CODE XREF: sub_401700+23B↓j
.text:004018D7                 call    sub_403150
.text:004018D7 ; ---------------------------------------------------------------------------
.text:004018DC                 db 0EBh ; ë
.text:004018DD                 db  82h ; ‚
.text:004018DE ; ---------------------------------------------------------------------------
.text:004018DE
.text:004018DE loc_4018DE:                             ; CODE XREF: sub_401700+1C6↑j
.text:004018DE                 mov     dword ptr [esp+118h+var_104], 0
.text:004018E6                 mov     edi, ds:_iob
.text:004018EC                 mov     dword ptr [esp+118h+var_108], offset aDavidMackenzie ; "David MacKenzie"
.text:004018F4                 mov     dword ptr [esp+118h+var_10C], offset a530 ; "5.3.0"
.text:004018FC                 add     edi, 20h ; ' '
.text:004018FF                 mov     [esp+118h+var_110], offset aGnuCoreutils ; "GNU coreutils"
.text:00401907                 mov     [esp+118h+Locale], offset stru_40149B ; FILE *
.text:0040190F                 mov     [esp+118h+Category], edi ; FILE *
.text:00401912                 call    sub_40AA70
.text:00401917                 mov     [esp+118h+Category], 0 ; Code
.text:0040191E
.text:0040191E loc_40191E:                             ; CODE XREF: sub_401700+675↓j
.text:0040191E                 call    exit
.text:00401923 ; ---------------------------------------------------------------------------
.text:00401923
.text:00401923 loc_401923:                             ; CODE XREF: sub_401700+1BF↑j
.text:00401923                 cmp     eax, 44h ; 'D'
.text:00401926                 jnz     short loc_4018D0
.text:00401928                 mov     [ebp+var_D9], 1
.text:0040192F                 jmp     loc_401860
.text:00401934 ; ---------------------------------------------------------------------------
.text:00401934
.text:00401934 loc_401934:                             ; CODE XREF: sub_401700+1B8↑j
.text:00401934                 mov     [esp+118h+Category], 0
.text:0040193B                 jmp     short loc_4018D7
.text:0040193B ; ---------------------------------------------------------------------------
.text:0040193D                 align 10h
.text:00401940
.text:00401940 loc_401940:                             ; CODE XREF: sub_401700+1AD↑j
.text:00401940                 cmp     eax, 56h ; 'V'
.text:00401943                 jz      short loc_401983
.text:00401945                 cmp     eax, 56h ; 'V'
.text:00401948                 jg      short loc_40195B
.text:0040194A                 cmp     eax, 54h ; 'T'
.text:0040194D                 jnz     short loc_4018D0
.text:0040194F                 mov     [ebp+var_E1], 1
.text:00401956                 jmp     loc_401860
.text:0040195B ; ---------------------------------------------------------------------------
.text:0040195B
.text:0040195B loc_40195B:                             ; CODE XREF: sub_401700+248↑j
.text:0040195B                 cmp     eax, 62h ; 'b'
.text:0040195E                 jnz     loc_4018D0
.text:00401964
.text:00401964 loc_401964:                             ; CODE XREF: sub_401700+2B2↓j
.text:00401964                 mov     [ebp+var_D1], 1
.text:0040196B                 mov     eax, ds:dword_421CA0
.text:00401970                 test    eax, eax
.text:00401972                 jz      loc_401860
.text:00401978                 mov     [ebp+var_D8], eax
.text:0040197E                 jmp     loc_401860
.text:00401983 ; ---------------------------------------------------------------------------
.text:00401983
.text:00401983 loc_401983:                             ; CODE XREF: sub_401700+243↑j
.text:00401983                 mov     [esp+118h+Category], offset aWarningVersion ; "warning: --version-control (-V) is obso"...
.text:0040198A                 call    ds:libintl_gettext
.text:00401990                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401998                 mov     ecx, ds:dword_421CA0
.text:0040199E                 mov     [esp+118h+Category], 0 ; Code
.text:004019A5                 mov     dword ptr [esp+118h+var_10C], ecx ; char
.text:004019A9                 mov     [esp+118h+var_110], eax ; char *
.text:004019AD                 call    sub_415220
.text:004019B2                 jmp     short loc_401964
.text:004019B4 ; ---------------------------------------------------------------------------
.text:004019B4
.text:004019B4 loc_4019B4:                             ; CODE XREF: sub_401700+1A4↑j
.text:004019B4                 mov     [ebp+var_D1], 1
.text:004019BB                 mov     edi, ds:dword_421CA0
.text:004019C1                 jmp     loc_401860
.text:004019C6 ; ---------------------------------------------------------------------------
.text:004019C6
.text:004019C6 loc_4019C6:                             ; CODE XREF: sub_401700+19B↑j
.text:004019C6                 cmp     eax, 6Fh ; 'o'
.text:004019C9                 jz      loc_401B64
.text:004019CF                 cmp     eax, 6Fh ; 'o'
.text:004019D2                 jg      short loc_401A20
.text:004019D4                 cmp     eax, 67h ; 'g'
.text:004019D7                 jz      short loc_401A0D
.text:004019D9                 cmp     eax, 67h ; 'g'
.text:004019DC                 jg      short loc_4019F3
.text:004019DE                 cmp     eax, 64h ; 'd'
.text:004019E1                 jnz     loc_4018D0
.text:004019E7                 mov     ds:byte_421050, 1
.text:004019EE                 jmp     loc_401860
.text:004019F3 ; ---------------------------------------------------------------------------
.text:004019F3
.text:004019F3 loc_4019F3:                             ; CODE XREF: sub_401700+2DC↑j
.text:004019F3                 cmp     eax, 6Dh ; 'm'
.text:004019F6                 jnz     loc_4018D0
.text:004019FC                 mov     edx, ds:dword_421CA0
.text:00401A02                 mov     [ebp+var_D0], edx
.text:00401A08                 jmp     loc_401860
.text:00401A0D ; ---------------------------------------------------------------------------
.text:00401A0D
.text:00401A0D loc_401A0D:                             ; CODE XREF: sub_401700+2D7↑j
.text:00401A0D                 mov     ebx, ds:dword_421CA0
.text:00401A13                 mov     ds:dword_421020, ebx
.text:00401A19                 jmp     loc_401860
.text:00401A19 ; ---------------------------------------------------------------------------
.text:00401A1E                 align 10h
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_401700+2D2↑j
.text:00401A20                 cmp     eax, 73h ; 's'
.text:00401A23                 jz      loc_401B44
.text:00401A29                 cmp     eax, 73h ; 's'
.text:00401A2C                 jg      short loc_401A40
.text:00401A2E                 cmp     eax, 70h ; 'p'
.text:00401A31                 jnz     loc_4018D0
.text:00401A37                 mov     [ebp+var_39], 1
.text:00401A3B                 jmp     loc_401860
.text:00401A40 ; ---------------------------------------------------------------------------
.text:00401A40
.text:00401A40 loc_401A40:                             ; CODE XREF: sub_401700+32C↑j
.text:00401A40                 cmp     eax, 74h ; 't'
.text:00401A43                 jz      short loc_401A57
.text:00401A45                 cmp     eax, 76h ; 'v'
.text:00401A48                 jnz     loc_4018D0
.text:00401A4E                 mov     [ebp+var_27], 1
.text:00401A52                 jmp     loc_401860
.text:00401A57 ; ---------------------------------------------------------------------------
.text:00401A57
.text:00401A57 loc_401A57:                             ; CODE XREF: sub_401700+343↑j
.text:00401A57                 mov     eax, [ebp+var_E0]
.text:00401A5D                 test    eax, eax
.text:00401A5F                 jz      short loc_401A96
.text:00401A61                 mov     [esp+118h+Category], offset aMultipleTarget ; "multiple target directories specified"
.text:00401A68                 call    ds:libintl_gettext
.text:00401A6E                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401A76                 mov     [esp+118h+Category], 1 ; Code
.text:00401A7D                 mov     [esp+118h+var_110], eax ; char *
.text:00401A81                 call    sub_415220
.text:00401A86
.text:00401A86 loc_401A86:                             ; CODE XREF: sub_401700+3C4↓j
.text:00401A86                                         ; sub_401700+3FF↓j
.text:00401A86                 mov     eax, ds:dword_421CA0
.text:00401A8B                 mov     [ebp+var_E0], eax
.text:00401A91                 jmp     loc_401860
.text:00401A96 ; ---------------------------------------------------------------------------
.text:00401A96
.text:00401A96 loc_401A96:                             ; CODE XREF: sub_401700+35F↑j
.text:00401A96                 mov     ecx, ds:dword_421CA0
.text:00401A9C                 lea     ebx, [ebp+var_C8]
.text:00401AA2                 mov     [esp+118h+Locale], ebx ; int
.text:00401AA6                 mov     [esp+118h+Category], ecx ; char *
.text:00401AA9                 call    sub_418A10
.text:00401AAE                 test    eax, eax
.text:00401AB0                 jnz     short loc_401B01
.text:00401AB2
.text:00401AB2 loc_401AB2:                             ; CODE XREF: sub_401700+43F↓j
.text:00401AB2                 mov     ecx, [ebp+var_C8]
.text:00401AB8                 and     ecx, 0F000h
.text:00401ABE                 cmp     ecx, 4000h
.text:00401AC4                 jz      short loc_401A86
.text:00401AC6                 mov     ebx, ds:dword_421CA0
.text:00401ACC                 mov     [esp+118h+Category], ebx ; char *
.text:00401ACF                 call    sub_40AD30
.text:00401AD4                 mov     [esp+118h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:00401ADB                 mov     esi, eax
.text:00401ADD                 call    ds:libintl_gettext
.text:00401AE3                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:00401AE7                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401AEF                 mov     [esp+118h+Category], 1 ; Code
.text:00401AF6                 mov     [esp+118h+var_110], eax ; char *
.text:00401AFA                 call    sub_415220
.text:00401AFF                 jmp     short loc_401A86
.text:00401B01 ; ---------------------------------------------------------------------------
.text:00401B01
.text:00401B01 loc_401B01:                             ; CODE XREF: sub_401700+3B0↑j
.text:00401B01                 mov     esi, ds:dword_421CA0
.text:00401B07                 mov     [esp+118h+Category], esi ; char *
.text:00401B0A                 call    sub_40AD30
.text:00401B0F                 mov     [esp+118h+Category], offset aAccessingS ; "accessing %s"
.text:00401B16                 mov     esi, eax
.text:00401B18                 call    ds:libintl_gettext
.text:00401B1E                 mov     ebx, eax
.text:00401B20                 call    _errno
.text:00401B25                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:00401B29                 mov     [esp+118h+var_110], ebx ; char *
.text:00401B2D                 mov     edx, [eax]
.text:00401B2F                 mov     [esp+118h+Category], 1 ; Code
.text:00401B36                 mov     [esp+118h+Locale], edx ; ErrorMessage
.text:00401B3A                 call    sub_415220
.text:00401B3F                 jmp     loc_401AB2
.text:00401B44 ; ---------------------------------------------------------------------------
.text:00401B44
.text:00401B44 loc_401B44:                             ; CODE XREF: sub_401700+323↑j
.text:00401B44                 mov     [esp+118h+Locale], 0 ; Function
.text:00401B4C                 mov     [esp+118h+Category], 11h ; Signal
.text:00401B53                 mov     ds:byte_421040, 1
.text:00401B5A                 call    signal
.text:00401B5F                 jmp     loc_401860
.text:00401B64 ; ---------------------------------------------------------------------------
.text:00401B64
.text:00401B64 loc_401B64:                             ; CODE XREF: sub_401700+2C9↑j
.text:00401B64                 mov     esi, ds:dword_421CA0
.text:00401B6A                 mov     ds:dword_421000, esi
.text:00401B70                 jmp     loc_401860
.text:00401B75 ; ---------------------------------------------------------------------------
.text:00401B75
.text:00401B75 loc_401B75:                             ; CODE XREF: sub_401700+18D↑j
.text:00401B75                 cmp     ds:byte_421040, 0
.text:00401B7C                 jz      loc_40211F
.text:00401B82                 cmp     ds:byte_421050, 0
.text:00401B89                 jnz     loc_4020FA
.text:00401B8F
.text:00401B8F loc_401B8F:                             ; CODE XREF: sub_401700+A28↓j
.text:00401B8F                                         ; sub_401700+A36↓j ...
.text:00401B8F                 test    edi, edi
.text:00401B91                 jz      short loc_401BA0
.text:00401B93                 mov     [esp+118h+Category], edi ; char *
.text:00401B96                 call    sub_40A4E0
.text:00401B9B                 mov     Src, eax
.text:00401BA0
.text:00401BA0 loc_401BA0:                             ; CODE XREF: sub_401700+491↑j
.text:00401BA0                 xor     eax, eax
.text:00401BA2                 cmp     [ebp+var_D1], 0
.text:00401BA9                 jnz     loc_4020D6
.text:00401BAF
.text:00401BAF loc_401BAF:                             ; CODE XREF: sub_401700+9F5↓j
.text:00401BAF                 mov     [ebp+var_58], eax
.text:00401BB2                 mov     ebx, dword_420020
.text:00401BB8                 mov     eax, [ebp+arg_4]
.text:00401BBB                 mov     edi, [ebp+arg_0]
.text:00401BBE                 lea     ecx, [eax+ebx*4]
.text:00401BC1                 sub     edi, ebx
.text:00401BC3                 mov     [ebp+var_E8], ecx
.text:00401BC9                 xor     eax, eax
.text:00401BCB                 cmp     ds:byte_421050, 0
.text:00401BD2                 jnz     short loc_401BE2
.text:00401BD4                 mov     esi, [ebp+var_E0]
.text:00401BDA                 test    esi, esi
.text:00401BDC                 jz      loc_4020CC
.text:00401BE2
.text:00401BE2 loc_401BE2:                             ; CODE XREF: sub_401700+4D2↑j
.text:00401BE2                                         ; sub_401700+9D1↓j
.text:00401BE2                 cmp     edi, eax
.text:00401BE4                 jg      short loc_401C35
.text:00401BE6                 test    edi, edi
.text:00401BE8                 jle     loc_4020A2
.text:00401BEE                 mov     ebx, [ebp+var_E8]
.text:00401BF4                 mov     ecx, [ebx]
.text:00401BF6                 mov     [esp+118h+Category], ecx ; char *
.text:00401BF9                 call    sub_40AD30
.text:00401BFE                 mov     [esp+118h+Category], offset aMissingDestina ; "missing destination file operand after "...
.text:00401C05                 mov     esi, eax
.text:00401C07                 call    ds:libintl_gettext
.text:00401C0D                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:00401C11                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401C19                 mov     [esp+118h+Category], 0 ; Code
.text:00401C20                 mov     [esp+118h+var_110], eax ; char *
.text:00401C24                 call    sub_415220
.text:00401C29
.text:00401C29 loc_401C29:                             ; CODE XREF: sub_401700+9C7↓j
.text:00401C29                 mov     [esp+118h+Category], 1 ; Code
.text:00401C30                 call    sub_403150
.text:00401C35 ; ---------------------------------------------------------------------------
.text:00401C35
.text:00401C35 loc_401C35:                             ; CODE XREF: sub_401700+4E4↑j
.text:00401C35                 cmp     [ebp+var_E1], 0
.text:00401C3C                 jz      loc_401EDA
.text:00401C42                 mov     edx, [ebp+var_E0]
.text:00401C48                 test    edx, edx
.text:00401C4A                 jz      short loc_401C71
.text:00401C4C                 mov     [esp+118h+Category], offset aCannotCombineT ; "Cannot combine --target-directory (-t) "...
.text:00401C53                 call    ds:libintl_gettext
.text:00401C59                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401C61                 mov     [esp+118h+Category], 1 ; Code
.text:00401C68                 mov     [esp+118h+var_110], eax ; char *
.text:00401C6C                 call    sub_415220
.text:00401C71
.text:00401C71 loc_401C71:                             ; CODE XREF: sub_401700+54A↑j
.text:00401C71                 cmp     edi, 2
.text:00401C74                 jg      loc_401E8D
.text:00401C7A
.text:00401C7A loc_401C7A:                             ; CODE XREF: sub_401700+7E1↓j
.text:00401C7A                                         ; sub_401700+7EF↓j ...
.text:00401C7A                 mov     ebx, [ebp+var_D0]
.text:00401C80                 test    ebx, ebx
.text:00401C82                 jz      short loc_401CC3
.text:00401C84                 mov     [esp+118h+Locale], 0
.text:00401C8C                 mov     edx, [ebp+var_D0]
.text:00401C92                 mov     [esp+118h+Category], edx
.text:00401C95                 call    sub_407450
.text:00401C9A                 test    eax, eax
.text:00401C9C                 mov     esi, eax
.text:00401C9E                 jz      loc_401E4F
.text:00401CA4                 cmp     eax, 1
.text:00401CA7                 jz      loc_402166
.text:00401CAD
.text:00401CAD loc_401CAD:                             ; CODE XREF: sub_401700+788↓j
.text:00401CAD                 mov     [esp+118h+Locale], esi
.text:00401CB1                 mov     [esp+118h+Category], 0
.text:00401CB8                 call    sub_407820
.text:00401CBD                 mov     word_420010, ax
.text:00401CC3
.text:00401CC3 loc_401CC3:                             ; CODE XREF: sub_401700+582↑j
.text:00401CC3                 call    sub_4026D0
.text:00401CC8                 cmp     ds:byte_421050, 0
.text:00401CCF                 jz      loc_401D8C
.text:00401CD5                 xor     ebx, ebx
.text:00401CD7                 cmp     ebx, edi
.text:00401CD9                 jge     loc_401D66
.text:00401CDF                 nop
.text:00401CE0
.text:00401CE0 loc_401CE0:                             ; CODE XREF: sub_401700+660↓j
.text:00401CE0                 cmp     [ebp+var_27], 0
.text:00401CE4                 mov     [ebp+var_F2], 0
.text:00401CEB                 jnz     loc_401D7A
.text:00401CF1                 xor     eax, eax
.text:00401CF3
.text:00401CF3 loc_401CF3:                             ; CODE XREF: sub_401700+687↓j
.text:00401CF3                 movzx   edx, word_420010
.text:00401CFA                 mov     [esp+118h+var_100], eax ; char *
.text:00401CFE                 mov     esi, ds:dword_421030
.text:00401D04                 mov     dword ptr [esp+118h+var_104], 0 ; char
.text:00401D0C                 mov     ecx, ds:dword_421010
.text:00401D12                 mov     eax, [ebp+var_E8]
.text:00401D18                 mov     dword ptr [esp+118h+var_108], esi ; int
.text:00401D1C                 mov     dword ptr [esp+118h+var_10C], ecx ; int
.text:00401D20                 mov     [esp+118h+var_110], edx ; __int16
.text:00401D24                 mov     [esp+118h+Locale], edx ; __int16
.text:00401D28                 mov     esi, [eax+ebx*4]
.text:00401D2B                 mov     [esp+118h+Category], esi ; Str
.text:00401D2E                 call    sub_406A50
.text:00401D33                 test    al, al
.text:00401D35                 jz      short loc_401D50
.text:00401D37                 cmp     [ebp+var_C9], 0
.text:00401D3E                 jz      short loc_401D50
.text:00401D40                 mov     [ebp+var_F2], 1
.text:00401D47                 mov     esi, esi
.text:00401D49                 lea     edi, [edi+0]
.text:00401D50
.text:00401D50 loc_401D50:                             ; CODE XREF: sub_401700+635↑j
.text:00401D50                                         ; sub_401700+63E↑j
.text:00401D50                 movzx   edx, [ebp+var_F2]
.text:00401D57                 inc     ebx
.text:00401D58                 cmp     ebx, edi
.text:00401D5A                 mov     [ebp+var_C9], dl
.text:00401D60                 jl      loc_401CE0
.text:00401D66
.text:00401D66 loc_401D66:                             ; CODE XREF: sub_401700+5D9↑j
.text:00401D66                                         ; sub_401700+6AA↓j ...
.text:00401D66                 xor     ebx, ebx
.text:00401D68                 cmp     [ebp+var_C9], 0
.text:00401D6F                 setz    bl
.text:00401D72                 mov     [esp+118h+Category], ebx
.text:00401D75                 jmp     loc_40191E
.text:00401D7A ; ---------------------------------------------------------------------------
.text:00401D7A
.text:00401D7A loc_401D7A:                             ; CODE XREF: sub_401700+5EB↑j
.text:00401D7A                 mov     [esp+118h+Category], offset aCreatingDirect ; "creating directory %s"
.text:00401D81                 call    ds:libintl_gettext
.text:00401D87                 jmp     loc_401CF3
.text:00401D8C ; ---------------------------------------------------------------------------
.text:00401D8C
.text:00401D8C loc_401D8C:                             ; CODE XREF: sub_401700+5CF↑j
.text:00401D8C                 call    sub_406800
.text:00401D91                 mov     ebx, [ebp+var_E0]
.text:00401D97                 test    ebx, ebx
.text:00401D99                 jz      short loc_401DFD
.text:00401D9B                 lea     esi, [ebp+var_58]
.text:00401D9E                 xor     ebx, ebx
.text:00401DA0                 mov     [esp+118h+Category], esi
.text:00401DA3                 call    sub_4053F0
.text:00401DA8                 cmp     ebx, edi
.text:00401DAA                 jge     short loc_401D66
.text:00401DAC
.text:00401DAC loc_401DAC:                             ; CODE XREF: sub_401700+6F6↓j
.text:00401DAC                 mov     [esp+118h+var_110], esi ; int
.text:00401DB0                 mov     edx, [ebp+var_E0]
.text:00401DB6                 mov     eax, [ebp+var_E8]
.text:00401DBC                 mov     [ebp+var_F3], 0
.text:00401DC3                 mov     [esp+118h+Locale], edx ; int
.text:00401DC7                 mov     ecx, [eax+ebx*4]
.text:00401DCA                 mov     [esp+118h+Category], ecx ; char *
.text:00401DCD                 call    sub_4022F0
.text:00401DD2                 test    al, al
.text:00401DD4                 jz      short loc_401DE6
.text:00401DD6                 cmp     [ebp+var_C9], 0
.text:00401DDD                 jz      short loc_401DE6
.text:00401DDF                 mov     [ebp+var_F3], 1
.text:00401DE6
.text:00401DE6 loc_401DE6:                             ; CODE XREF: sub_401700+6D4↑j
.text:00401DE6                                         ; sub_401700+6DD↑j
.text:00401DE6                 movzx   ecx, [ebp+var_F3]
.text:00401DED                 inc     ebx
.text:00401DEE                 cmp     ebx, edi
.text:00401DF0                 mov     [ebp+var_C9], cl
.text:00401DF6                 jl      short loc_401DAC
.text:00401DF8                 jmp     loc_401D66
.text:00401DFD ; ---------------------------------------------------------------------------
.text:00401DFD
.text:00401DFD loc_401DFD:                             ; CODE XREF: sub_401700+699↑j
.text:00401DFD                 cmp     [ebp+var_D9], 0
.text:00401E04                 jz      short loc_401E2F
.text:00401E06                 mov     ecx, [ebp+var_E8]
.text:00401E0C                 lea     edx, [ebp+var_58]
.text:00401E0F                 mov     [esp+118h+var_110], edx ; int
.text:00401E13                 mov     esi, [ecx+4]
.text:00401E16                 mov     [esp+118h+Locale], esi ; void *
.text:00401E1A                 mov     edi, [ecx]
.text:00401E1C                 mov     [esp+118h+Category], edi ; int
.text:00401E1F                 call    sub_402170
.text:00401E24
.text:00401E24 loc_401E24:                             ; CODE XREF: sub_401700+74D↓j
.text:00401E24                 mov     [ebp+var_C9], al
.text:00401E2A                 jmp     loc_401D66
.text:00401E2F ; ---------------------------------------------------------------------------
.text:00401E2F
.text:00401E2F loc_401E2F:                             ; CODE XREF: sub_401700+704↑j
.text:00401E2F                 mov     edi, [ebp+var_E8]
.text:00401E35                 lea     esi, [ebp+var_58]
.text:00401E38                 mov     [esp+118h+var_110], esi ; int
.text:00401E3C                 mov     ecx, [edi+4]
.text:00401E3F                 mov     [esp+118h+Locale], ecx ; char *
.text:00401E43                 mov     ebx, [edi]
.text:00401E45                 mov     [esp+118h+Category], ebx ; char *
.text:00401E48                 call    sub_402260
.text:00401E4D                 jmp     short loc_401E24
.text:00401E4F ; ---------------------------------------------------------------------------
.text:00401E4F
.text:00401E4F loc_401E4F:                             ; CODE XREF: sub_401700+59E↑j
.text:00401E4F                 mov     ecx, [ebp+var_D0]
.text:00401E55                 mov     [esp+118h+Category], ecx ; char *
.text:00401E58                 call    sub_40AD30
.text:00401E5D                 mov     [esp+118h+Category], offset aInvalidModeS ; "invalid mode %s"
.text:00401E64                 mov     ebx, eax
.text:00401E66                 call    ds:libintl_gettext
.text:00401E6C                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:00401E70                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401E78                 mov     [esp+118h+Category], 1 ; Code
.text:00401E7F                 mov     [esp+118h+var_110], eax ; char *
.text:00401E83                 call    sub_415220
.text:00401E88                 jmp     loc_401CAD
.text:00401E8D ; ---------------------------------------------------------------------------
.text:00401E8D
.text:00401E8D loc_401E8D:                             ; CODE XREF: sub_401700+574↑j
.text:00401E8D                 mov     eax, [ebp+var_E8]
.text:00401E93                 mov     ecx, [eax+8]
.text:00401E96                 mov     [esp+118h+Category], ecx ; char *
.text:00401E99                 call    sub_40AD30
.text:00401E9E                 mov     [esp+118h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00401EA5                 mov     esi, eax
.text:00401EA7                 call    ds:libintl_gettext
.text:00401EAD                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:00401EB1                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401EB9                 mov     [esp+118h+Category], 0 ; Code
.text:00401EC0                 mov     [esp+118h+var_110], eax ; char *
.text:00401EC4                 call    sub_415220
.text:00401EC9                 mov     [esp+118h+Category], 1 ; Code
.text:00401ED0                 call    sub_403150
.text:00401ED0 ; ---------------------------------------------------------------------------
.text:00401ED5                 db 0E9h ; é
.text:00401ED6                 db 0A0h ;  
.text:00401ED7                 db 0FDh ; ý
.text:00401ED8                 db 0FFh ; ÿ
.text:00401ED9                 db 0FFh ; ÿ
.text:00401EDA ; ---------------------------------------------------------------------------
.text:00401EDA
.text:00401EDA loc_401EDA:                             ; CODE XREF: sub_401700+53C↑j
.text:00401EDA                 cmp     ds:byte_421050, 0
.text:00401EE1                 jnz     loc_401C7A
.text:00401EE7                 mov     ebx, [ebp+var_E0]
.text:00401EED                 test    ebx, ebx
.text:00401EEF                 jnz     loc_401C7A
.text:00401EF5                 cmp     edi, 1
.text:00401EF8                 jg      short loc_401F45
.text:00401EFA
.text:00401EFA loc_401EFA:                             ; CODE XREF: sub_401700+8E6↓j
.text:00401EFA                 cmp     edi, 2
.text:00401EFD                 jle     loc_401C7A
.text:00401F03                 mov     eax, [ebp+var_E8]
.text:00401F09                 mov     ecx, [eax+edi*4-4]
.text:00401F0D                 mov     [esp+118h+Category], ecx ; char *
.text:00401F10                 call    sub_40AD30
.text:00401F15                 mov     [esp+118h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:00401F1C                 mov     esi, eax
.text:00401F1E                 call    ds:libintl_gettext
.text:00401F24                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:00401F28                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00401F30                 mov     [esp+118h+Category], 1 ; Code
.text:00401F37                 mov     [esp+118h+var_110], eax ; char *
.text:00401F3B                 call    sub_415220
.text:00401F40                 jmp     loc_401C7A
.text:00401F45 ; ---------------------------------------------------------------------------
.text:00401F45
.text:00401F45 loc_401F45:                             ; CODE XREF: sub_401700+7F8↑j
.text:00401F45                 mov     edx, [ebp+var_E8]
.text:00401F4B                 mov     esi, [edx+edi*4-4]
.text:00401F4F                 mov     [esp+118h+Category], esi
.text:00401F52                 call    sub_40AD60
.text:00401F57                 mov     [esp+118h+Category], eax ; Str
.text:00401F5A                 mov     ebx, eax
.text:00401F5C                 call    strlen
.text:00401F61                 mov     [ebp+var_E9], 0
.text:00401F68                 test    eax, eax
.text:00401F6A                 jz      loc_402096
.text:00401F70                 movzx   eax, byte ptr [eax+ebx-1]
.text:00401F75                 cmp     al, 2Fh ; '/'
.text:00401F77                 jz      loc_402096
.text:00401F7D                 cmp     al, 5Ch ; '\'
.text:00401F7F                 jz      loc_402096
.text:00401F85
.text:00401F85 loc_401F85:                             ; CODE XREF: sub_401700+99D↓j
.text:00401F85                 mov     [esp+118h+Category], esi ; char *
.text:00401F88                 lea     ebx, [ebp+var_C8]
.text:00401F8E                 mov     [esp+118h+Locale], ebx ; int
.text:00401F92                 call    sub_418A10
.text:00401F97                 xor     ecx, ecx
.text:00401F99                 test    eax, eax
.text:00401F9B                 mov     [ebp+ErrorMessage], ecx
.text:00401FA1                 jnz     loc_402084
.text:00401FA7
.text:00401FA7 loc_401FA7:                             ; CODE XREF: sub_401700+991↓j
.text:00401FA7                 mov     [ebp+var_F1], 0
.text:00401FAE                 mov     eax, [ebp+ErrorMessage]
.text:00401FB4                 test    eax, eax
.text:00401FB6                 jnz     loc_402041
.text:00401FBC                 mov     ecx, [ebp+var_C8]
.text:00401FC2                 and     ecx, 0F000h
.text:00401FC8                 cmp     ecx, 4000h
.text:00401FCE                 jz      short loc_402038
.text:00401FD0
.text:00401FD0 loc_401FD0:                             ; CODE XREF: sub_401700+93F↓j
.text:00401FD0                                         ; sub_401700+948↓j ...
.text:00401FD0                 movzx   edx, [ebp+var_E9]
.text:00401FD7                 cmp     [ebp+var_F1], dl
.text:00401FDD                 jb      short loc_402001
.text:00401FDF
.text:00401FDF loc_401FDF:                             ; CODE XREF: sub_401700+936↓j
.text:00401FDF                 cmp     [ebp+var_F1], 0
.text:00401FE6                 jz      loc_401EFA
.text:00401FEC                 mov     ebx, [ebp+var_E8]
.text:00401FF2                 dec     edi
.text:00401FF3                 mov     ecx, [ebx+edi*4]
.text:00401FF6                 mov     [ebp+var_E0], ecx
.text:00401FFC                 jmp     loc_401C7A
.text:00402001 ; ---------------------------------------------------------------------------
.text:00402001
.text:00402001 loc_402001:                             ; CODE XREF: sub_401700+8DD↑j
.text:00402001                 mov     [esp+118h+Category], esi ; char *
.text:00402004                 call    sub_40AD30
.text:00402009                 mov     [esp+118h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:00402010                 mov     esi, eax
.text:00402012                 call    ds:libintl_gettext
.text:00402018                 mov     dword ptr [esp+118h+var_10C], esi ; char
.text:0040201C                 mov     esi, [ebp+ErrorMessage]
.text:00402022                 mov     [esp+118h+Category], 1 ; Code
.text:00402029                 mov     [esp+118h+var_110], eax ; char *
.text:0040202D                 mov     [esp+118h+Locale], esi ; ErrorMessage
.text:00402031                 call    sub_415220
.text:00402036                 jmp     short loc_401FDF
.text:00402038 ; ---------------------------------------------------------------------------
.text:00402038
.text:00402038 loc_402038:                             ; CODE XREF: sub_401700+8CE↑j
.text:00402038                 mov     [ebp+var_F1], 1
.text:0040203F                 jmp     short loc_401FD0
.text:00402041 ; ---------------------------------------------------------------------------
.text:00402041
.text:00402041 loc_402041:                             ; CODE XREF: sub_401700+8B6↑j
.text:00402041                 cmp     [ebp+ErrorMessage], 2
.text:00402048                 jz      short loc_401FD0
.text:0040204A                 mov     [esp+118h+Category], esi ; char *
.text:0040204D                 call    sub_40AD30
.text:00402052                 mov     [esp+118h+Category], offset aAccessingS ; "accessing %s"
.text:00402059                 mov     ebx, eax
.text:0040205B                 call    ds:libintl_gettext
.text:00402061                 mov     dword ptr [esp+118h+var_10C], ebx ; char
.text:00402065                 mov     ebx, [ebp+ErrorMessage]
.text:0040206B                 mov     [esp+118h+Category], 1 ; Code
.text:00402072                 mov     [esp+118h+var_110], eax ; char *
.text:00402076                 mov     [esp+118h+Locale], ebx ; ErrorMessage
.text:0040207A                 call    sub_415220
.text:0040207F                 jmp     loc_401FD0
.text:00402084 ; ---------------------------------------------------------------------------
.text:00402084
.text:00402084 loc_402084:                             ; CODE XREF: sub_401700+8A1↑j
.text:00402084                 call    _errno
.text:00402089                 mov     edx, [eax]
.text:0040208B                 mov     [ebp+ErrorMessage], edx
.text:00402091                 jmp     loc_401FA7
.text:00402096 ; ---------------------------------------------------------------------------
.text:00402096
.text:00402096 loc_402096:                             ; CODE XREF: sub_401700+86A↑j
.text:00402096                                         ; sub_401700+877↑j ...
.text:00402096                 mov     [ebp+var_E9], 1
.text:0040209D                 jmp     loc_401F85
.text:004020A2 ; ---------------------------------------------------------------------------
.text:004020A2
.text:004020A2 loc_4020A2:                             ; CODE XREF: sub_401700+4E8↑j
.text:004020A2                 mov     [esp+118h+Category], offset aMissingFileOpe ; "missing file operand"
.text:004020A9                 call    ds:libintl_gettext
.text:004020AF                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:004020B7                 mov     [esp+118h+Category], 0 ; Code
.text:004020BE                 mov     [esp+118h+var_110], eax ; char *
.text:004020C2                 call    sub_415220
.text:004020C7                 jmp     loc_401C29
.text:004020CC ; ---------------------------------------------------------------------------
.text:004020CC
.text:004020CC loc_4020CC:                             ; CODE XREF: sub_401700+4DC↑j
.text:004020CC                 mov     eax, 1
.text:004020D1                 jmp     loc_401BE2
.text:004020D6 ; ---------------------------------------------------------------------------
.text:004020D6
.text:004020D6 loc_4020D6:                             ; CODE XREF: sub_401700+4A9↑j
.text:004020D6                 mov     [esp+118h+Category], offset aBackupType ; "backup type"
.text:004020DD                 call    ds:libintl_gettext
.text:004020E3                 mov     edi, [ebp+var_D8]
.text:004020E9                 mov     [esp+118h+Category], eax
.text:004020EC                 mov     [esp+118h+Locale], edi
.text:004020F0                 call    sub_409590
.text:004020F5                 jmp     loc_401BAF
.text:004020FA ; ---------------------------------------------------------------------------
.text:004020FA
.text:004020FA loc_4020FA:                             ; CODE XREF: sub_401700+489↑j
.text:004020FA                 mov     [esp+118h+Category], offset aTheStripOption ; "the strip option may not be used when i"...
.text:00402101                 call    ds:libintl_gettext
.text:00402107                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:0040210F                 mov     [esp+118h+Category], 1 ; Code
.text:00402116                 mov     [esp+118h+var_110], eax ; char *
.text:0040211A                 call    sub_415220
.text:0040211F
.text:0040211F loc_40211F:                             ; CODE XREF: sub_401700+47C↑j
.text:0040211F                 movzx   ebx, ds:byte_421050
.text:00402126                 test    bl, bl
.text:00402128                 jz      loc_401B8F
.text:0040212E                 mov     esi, [ebp+var_E0]
.text:00402134                 test    esi, esi
.text:00402136                 jz      loc_401B8F
.text:0040213C                 mov     [esp+118h+Category], offset aTargetDirector ; "target directory not allowed when insta"...
.text:00402143                 call    ds:libintl_gettext
.text:00402149                 mov     [esp+118h+Locale], 0 ; ErrorMessage
.text:00402151                 mov     [esp+118h+Category], 1 ; Code
.text:00402158                 mov     [esp+118h+var_110], eax ; char *
.text:0040215C                 call    sub_415220
.text:00402161                 jmp     loc_401B8F
.text:00402166 ; ---------------------------------------------------------------------------
.text:00402166
.text:00402166 loc_402166:                             ; CODE XREF: sub_401700+5A7↑j
.text:00402166                 call    sub_40A2A0
.text:00402166 sub_401700      endp
.text:00402166
.text:00402166 ; ---------------------------------------------------------------------------
.text:0040216B byte_40216B     db 2Eh                  ; DATA XREF: sub_402170+17↓o
.text:0040216C                 align 10h
.text:00402170
.text:00402170 ; =============== S U B R O U T I N E =======================================
.text:00402170
.text:00402170
.text:00402170 ; int __cdecl sub_402170(int, void *, int)
.text:00402170 sub_402170      proc near               ; CODE XREF: sub_401700+71F↑p
.text:00402170
.text:00402170 Block           = dword ptr -3Ch
.text:00402170 var_38          = dword ptr -38h
.text:00402170 var_34          = word ptr -34h
.text:00402170 var_30          = dword ptr -30h
.text:00402170 var_2C          = dword ptr -2Ch
.text:00402170 var_28          = byte ptr -28h
.text:00402170 var_24          = dword ptr -24h
.text:00402170 var_11          = byte ptr -11h
.text:00402170 var_10          = dword ptr -10h
.text:00402170 var_C           = dword ptr -0Ch
.text:00402170 var_8           = dword ptr -8
.text:00402170 var_4           = dword ptr -4
.text:00402170 arg_0           = dword ptr  4
.text:00402170 arg_4           = dword ptr  8
.text:00402170 arg_8           = dword ptr  0Ch
.text:00402170
.text:00402170                 sub     esp, 3Ch
.text:00402173                 mov     [esp+3Ch+var_4], ebp
.text:00402177                 mov     ebp, [esp+3Ch+arg_4]
.text:0040217B                 mov     [esp+3Ch+var_10], ebx
.text:0040217F                 mov     [esp+3Ch+var_C], esi
.text:00402183                 mov     [esp+3Ch+var_8], edi
.text:00402187                 mov     edi, offset byte_40216B
.text:0040218C                 mov     [esp+3Ch+Block], ebp ; void *
.text:0040218F                 call    sub_40A1B0
.text:00402194                 mov     [esp+3Ch+var_11], 1
.text:00402199                 mov     esi, eax
.text:0040219B                 mov     ecx, 2
.text:004021A0                 cld
.text:004021A1                 mov     ebx, eax
.text:004021A3                 repe cmpsb
.text:004021A5                 jz      short loc_4021F3
.text:004021A7                 mov     edx, [esp+3Ch+arg_8]
.text:004021AB                 cmp     byte ptr [edx+31h], 0
.text:004021AF                 jnz     loc_402240
.text:004021B5                 xor     eax, eax
.text:004021B7
.text:004021B7 loc_4021B7:                             ; CODE XREF: sub_402170+DD↓j
.text:004021B7                 mov     [esp+3Ch+var_24], eax ; char *
.text:004021BB                 mov     ecx, ds:dword_421030
.text:004021C1                 mov     edx, ds:dword_421010
.text:004021C7                 mov     dword ptr [esp+3Ch+var_28], 1 ; char
.text:004021CF                 mov     [esp+3Ch+var_2C], ecx ; int
.text:004021D3                 mov     [esp+3Ch+var_30], edx ; int
.text:004021D7                 mov     dword ptr [esp+3Ch+var_34], 1EDh ; __int16
.text:004021DF                 mov     [esp+3Ch+var_38], 1EDh ; __int16
.text:004021E7                 mov     [esp+3Ch+Block], ebx ; Str
.text:004021EA                 call    sub_406A50
.text:004021EF                 mov     [esp+3Ch+var_11], al
.text:004021F3
.text:004021F3 loc_4021F3:                             ; CODE XREF: sub_402170+35↑j
.text:004021F3                 mov     [esp+3Ch+Block], ebx ; Block
.text:004021F6                 call    free
.text:004021FB                 cmp     [esp+3Ch+var_11], 0
.text:00402200                 jnz     short loc_402220
.text:00402202
.text:00402202 loc_402202:                             ; CODE XREF: sub_402170+CC↓j
.text:00402202                 movzx   eax, [esp+3Ch+var_11]
.text:00402207                 mov     ebx, [esp+3Ch+var_10]
.text:0040220B                 mov     esi, [esp+3Ch+var_C]
.text:0040220F                 mov     edi, [esp+3Ch+var_8]
.text:00402213                 mov     ebp, [esp+3Ch+var_4]
.text:00402217                 add     esp, 3Ch
.text:0040221A                 retn
.text:0040221A ; ---------------------------------------------------------------------------
.text:0040221B                 align 10h
.text:00402220
.text:00402220 loc_402220:                             ; CODE XREF: sub_402170+90↑j
.text:00402220                 mov     [esp+3Ch+var_38], ebp ; char *
.text:00402224                 mov     esi, [esp+3Ch+arg_8]
.text:00402228                 mov     ebx, [esp+3Ch+arg_0]
.text:0040222C                 mov     dword ptr [esp+3Ch+var_34], esi ; int
.text:00402230                 mov     [esp+3Ch+Block], ebx ; char *
.text:00402233                 call    sub_402260
.text:00402238                 mov     [esp+3Ch+var_11], al
.text:0040223C                 jmp     short loc_402202
.text:0040223C ; ---------------------------------------------------------------------------
.text:0040223E                 align 10h
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_402170+3F↑j
.text:00402240                 mov     [esp+3Ch+Block], offset aCreatingDirect ; "creating directory %s"
.text:00402247                 call    ds:libintl_gettext
.text:0040224D                 jmp     loc_4021B7
.text:0040224D sub_402170      endp
.text:0040224D
.text:0040224D ; ---------------------------------------------------------------------------
.text:00402252                 align 10h
.text:00402260
.text:00402260 ; =============== S U B R O U T I N E =======================================
.text:00402260
.text:00402260
.text:00402260 ; int __cdecl sub_402260(char *, char *, int)
.text:00402260 sub_402260      proc near               ; CODE XREF: sub_401700+748↑p
.text:00402260                                         ; sub_402170+C3↑p ...
.text:00402260
.text:00402260 var_1C          = dword ptr -1Ch
.text:00402260 var_18          = dword ptr -18h
.text:00402260 var_14          = dword ptr -14h
.text:00402260 var_C           = dword ptr -0Ch
.text:00402260 var_8           = dword ptr -8
.text:00402260 var_4           = dword ptr -4
.text:00402260 arg_0           = dword ptr  4
.text:00402260 arg_4           = dword ptr  8
.text:00402260 arg_8           = dword ptr  0Ch
.text:00402260
.text:00402260                 sub     esp, 1Ch
.text:00402263                 mov     [esp+1Ch+var_C], ebx
.text:00402267                 mov     ebx, [esp+1Ch+arg_4]
.text:0040226B                 mov     [esp+1Ch+var_8], esi
.text:0040226F                 mov     esi, [esp+1Ch+arg_8]
.text:00402273                 mov     [esp+1Ch+var_4], edi
.text:00402277                 mov     edi, [esp+1Ch+arg_0]
.text:0040227B                 mov     [esp+1Ch+var_14], esi
.text:0040227F                 mov     [esp+1Ch+var_18], ebx
.text:00402283                 mov     [esp+1Ch+var_1C], edi
.text:00402286                 call    sub_402350
.text:0040228B                 xor     edx, edx
.text:0040228D                 test    al, al
.text:0040228F                 jz      short loc_4022C0
.text:00402291                 cmp     ds:byte_421040, 0
.text:00402298                 jnz     short loc_4022E3
.text:0040229A
.text:0040229A loc_40229A:                             ; CODE XREF: sub_402260+8B↓j
.text:0040229A                 mov     [esp+1Ch+var_1C], ebx ; char *
.text:0040229D                 call    sub_4023E0
.text:004022A2                 xor     edx, edx
.text:004022A4                 test    al, al
.text:004022A6                 jz      short loc_4022C0
.text:004022A8                 cmp     byte ptr [esi+1Fh], 0
.text:004022AC                 jnz     short loc_4022D2
.text:004022AE                 mov     edx, 1
.text:004022B3                 lea     esi, [esi+0]
.text:004022B9                 lea     edi, [edi+0]
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_402260+2F↑j
.text:004022C0                                         ; sub_402260+46↑j ...
.text:004022C0                 mov     ebx, [esp+1Ch+var_C]
.text:004022C4                 mov     eax, edx
.text:004022C6                 mov     esi, [esp+1Ch+var_8]
.text:004022CA                 mov     edi, [esp+1Ch+var_4]
.text:004022CE                 add     esp, 1Ch
.text:004022D1                 retn
.text:004022D2 ; ---------------------------------------------------------------------------
.text:004022D2
.text:004022D2 loc_4022D2:                             ; CODE XREF: sub_402260+4C↑j
.text:004022D2                 mov     [esp+1Ch+var_18], ebx ; char *
.text:004022D6                 mov     [esp+1Ch+var_1C], edi ; char *
.text:004022D9                 call    sub_4024E0
.text:004022DE                 movzx   edx, al
.text:004022E1                 jmp     short loc_4022C0
.text:004022E3 ; ---------------------------------------------------------------------------
.text:004022E3
.text:004022E3 loc_4022E3:                             ; CODE XREF: sub_402260+38↑j
.text:004022E3                 mov     [esp+1Ch+var_1C], ebx
.text:004022E6                 call    sub_4025F0
.text:004022EB                 jmp     short loc_40229A
.text:004022EB sub_402260      endp
.text:004022EB
.text:004022EB ; ---------------------------------------------------------------------------
.text:004022ED                 align 10h
.text:004022F0
.text:004022F0 ; =============== S U B R O U T I N E =======================================
.text:004022F0
.text:004022F0
.text:004022F0 ; int __cdecl sub_4022F0(char *, int, int)
.text:004022F0 sub_4022F0      proc near               ; CODE XREF: sub_401700+6CD↑p
.text:004022F0
.text:004022F0 Block           = dword ptr -1Ch
.text:004022F0 var_18          = dword ptr -18h
.text:004022F0 var_14          = dword ptr -14h
.text:004022F0 var_8           = dword ptr -8
.text:004022F0 var_4           = dword ptr -4
.text:004022F0 arg_0           = dword ptr  4
.text:004022F0 arg_4           = dword ptr  8
.text:004022F0 arg_8           = dword ptr  0Ch
.text:004022F0
.text:004022F0                 sub     esp, 1Ch
.text:004022F3                 mov     [esp+1Ch+var_8], ebx
.text:004022F7                 mov     ebx, [esp+1Ch+arg_0]
.text:004022FB                 mov     [esp+1Ch+var_4], esi
.text:004022FF                 mov     [esp+1Ch+Block], ebx
.text:00402302                 call    sub_40AD60
.text:00402307                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040230B                 mov     edx, [esp+1Ch+arg_4]
.text:0040230F                 mov     [esp+1Ch+var_14], 0 ; int
.text:00402317                 mov     [esp+1Ch+Block], edx ; int
.text:0040231A                 call    sub_40A050
.text:0040231F                 mov     [esp+1Ch+var_18], eax ; char *
.text:00402323                 mov     edx, [esp+1Ch+arg_8]
.text:00402327                 mov     esi, eax
.text:00402329                 mov     [esp+1Ch+Block], ebx ; char *
.text:0040232C                 mov     [esp+1Ch+var_14], edx ; int
.text:00402330                 call    sub_402260
.text:00402335                 mov     [esp+1Ch+Block], esi ; Block
.text:00402338                 mov     bl, al
.text:0040233A                 call    free
.text:0040233F                 movzx   eax, bl
.text:00402342                 mov     esi, [esp+1Ch+var_4]
.text:00402346                 mov     ebx, [esp+1Ch+var_8]
.text:0040234A                 add     esp, 1Ch
.text:0040234D                 retn
.text:0040234D sub_4022F0      endp
.text:0040234D
.text:0040234D ; ---------------------------------------------------------------------------
.text:0040234E                 align 10h
.text:00402350
.text:00402350 ; =============== S U B R O U T I N E =======================================
.text:00402350
.text:00402350
.text:00402350 sub_402350      proc near               ; CODE XREF: sub_402260+26↑p
.text:00402350
.text:00402350 var_1C          = dword ptr -1Ch
.text:00402350 var_18          = dword ptr -18h
.text:00402350 var_14          = byte ptr -14h
.text:00402350 var_10          = dword ptr -10h
.text:00402350 var_C           = dword ptr -0Ch
.text:00402350 var_8           = dword ptr -8
.text:00402350 var_1           = byte ptr -1
.text:00402350 arg_0           = dword ptr  4
.text:00402350 arg_4           = dword ptr  8
.text:00402350 arg_8           = dword ptr  0Ch
.text:00402350
.text:00402350                 sub     esp, 1Ch
.text:00402353                 lea     edx, [esp+1Ch+var_1]
.text:00402357                 mov     ecx, [esp+1Ch+arg_8]
.text:0040235B                 mov     [esp+1Ch+var_C], edx ; int
.text:0040235F                 mov     edx, [esp+1Ch+arg_4]
.text:00402363                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040236B                 mov     [esp+1Ch+var_10], ecx ; int
.text:0040236F                 mov     [esp+1Ch+var_18], edx ; char *
.text:00402373                 mov     edx, [esp+1Ch+arg_0]
.text:00402377                 mov     dword ptr [esp+1Ch+var_14], 0 ; char
.text:0040237F                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00402382                 call    sub_405530
.text:00402387                 movzx   eax, al
.text:0040238A                 add     esp, 1Ch
.text:0040238D                 retn
.text:0040238D sub_402350      endp
.text:0040238D
.text:0040238D ; ---------------------------------------------------------------------------
.text:0040238E aCannotChangeOw db 'cannot change ownership of %s',0
.text:0040238E                                         ; DATA XREF: sub_4023E0+3C↓o
.text:004023AC                 align 20h
.text:004023C0 aCannotChangePe db 'cannot change permissions of %s',0
.text:004023C0                                         ; DATA XREF: sub_4023E0+A1↓o
.text:004023E0
.text:004023E0 ; =============== S U B R O U T I N E =======================================
.text:004023E0
.text:004023E0
.text:004023E0 ; int __cdecl sub_4023E0(char *)
.text:004023E0 sub_4023E0      proc near               ; CODE XREF: sub_402260+3D↑p
.text:004023E0
.text:004023E0 FileName        = dword ptr -1Ch
.text:004023E0 AccessMode      = dword ptr -18h
.text:004023E0 var_14          = dword ptr -14h
.text:004023E0 var_10          = byte ptr -10h
.text:004023E0 var_9           = byte ptr -9
.text:004023E0 var_8           = dword ptr -8
.text:004023E0 var_4           = dword ptr -4
.text:004023E0 arg_0           = dword ptr  4
.text:004023E0
.text:004023E0                 sub     esp, 1Ch
.text:004023E3                 mov     edx, ds:dword_421030
.text:004023E9                 mov     [esp+1Ch+var_8], ebx
.text:004023ED                 mov     ebx, [esp+1Ch+arg_0]
.text:004023F1                 mov     [esp+1Ch+var_14], edx ; int
.text:004023F5                 mov     edx, ds:dword_421010
.text:004023FB                 mov     [esp+1Ch+var_4], esi
.text:004023FF                 mov     [esp+1Ch+var_9], 1
.text:00402404                 mov     [esp+1Ch+AccessMode], edx ; int
.text:00402408                 mov     [esp+1Ch+FileName], ebx ; char *
.text:0040240B                 call    sub_408250
.text:00402410                 test    eax, eax
.text:00402412                 jz      short loc_402462
.text:00402414                 mov     [esp+1Ch+FileName], ebx ; char *
.text:00402417                 call    sub_40AD30
.text:0040241C                 mov     [esp+1Ch+FileName], offset aCannotChangeOw ; "cannot change ownership of %s"
.text:00402423
.text:00402423 loc_402423:                             ; CODE XREF: sub_4023E0+A8↓j
.text:00402423                 mov     esi, eax
.text:00402425                 call    ds:libintl_gettext
.text:0040242B                 mov     ebx, eax
.text:0040242D                 call    _errno
.text:00402432                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:00402436                 mov     [esp+1Ch+var_14], ebx ; char *
.text:0040243A                 mov     ebx, [eax]
.text:0040243C                 mov     [esp+1Ch+FileName], 0 ; Code
.text:00402443                 mov     [esp+1Ch+AccessMode], ebx ; ErrorMessage
.text:00402447                 call    sub_415220
.text:0040244C                 mov     [esp+1Ch+var_9], 0
.text:00402451
.text:00402451 loc_402451:                             ; CODE XREF: sub_4023E0+97↓j
.text:00402451                 movzx   eax, [esp+1Ch+var_9]
.text:00402456                 mov     ebx, [esp+1Ch+var_8]
.text:0040245A                 mov     esi, [esp+1Ch+var_4]
.text:0040245E                 add     esp, 1Ch
.text:00402461                 retn
.text:00402462 ; ---------------------------------------------------------------------------
.text:00402462
.text:00402462 loc_402462:                             ; CODE XREF: sub_4023E0+32↑j
.text:00402462                 movzx   ecx, word_420010
.text:00402469                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040246C                 mov     [esp+1Ch+AccessMode], ecx ; AccessMode
.text:00402470                 call    _chmod
.text:00402475                 test    eax, eax
.text:00402477                 jz      short loc_402451
.text:00402479                 mov     [esp+1Ch+FileName], ebx ; char *
.text:0040247C                 call    sub_40AD30
.text:00402481                 mov     [esp+1Ch+FileName], offset aCannotChangePe ; "cannot change permissions of %s"
.text:00402488                 jmp     short loc_402423
.text:00402488 sub_4023E0      endp
.text:00402488
.text:00402488 ; ---------------------------------------------------------------------------
.text:0040248A                 align 20h
.text:004024A0 aCannotObtainTi db 'cannot obtain time stamps for %s',0
.text:004024A0                                         ; DATA XREF: sub_4024E0+3E↓o
.text:004024C1 aCannotSetTimeS db 'cannot set time stamps for %s',0
.text:004024C1                                         ; DATA XREF: sub_4024E0+C8↓o
.text:004024DF                 align 10h
.text:004024E0
.text:004024E0 ; =============== S U B R O U T I N E =======================================
.text:004024E0
.text:004024E0
.text:004024E0 ; int __cdecl sub_4024E0(char *, char *)
.text:004024E0 sub_4024E0      proc near               ; CODE XREF: sub_402260+79↑p
.text:004024E0
.text:004024E0 Code            = dword ptr -9Ch
.text:004024E0 ErrorMessage    = dword ptr -98h
.text:004024E0 var_94          = dword ptr -94h
.text:004024E0 var_90          = byte ptr -90h
.text:004024E0 var_8C          = dword ptr -8Ch
.text:004024E0 var_88          = dword ptr -88h
.text:004024E0 var_84          = dword ptr -84h
.text:004024E0 var_80          = dword ptr -80h
.text:004024E0 var_7C          = dword ptr -7Ch
.text:004024E0 var_44          = dword ptr -44h
.text:004024E0 var_40          = dword ptr -40h
.text:004024E0 var_3C          = dword ptr -3Ch
.text:004024E0 var_38          = dword ptr -38h
.text:004024E0 var_8           = dword ptr -8
.text:004024E0 var_4           = dword ptr -4
.text:004024E0 arg_0           = dword ptr  4
.text:004024E0 arg_4           = dword ptr  8
.text:004024E0
.text:004024E0                 sub     esp, 9Ch
.text:004024E6                 lea     edx, [esp+9Ch+var_7C]
.text:004024EA                 mov     [esp+9Ch+var_8], ebx
.text:004024F1                 mov     ebx, [esp+9Ch+arg_0]
.text:004024F8                 mov     [esp+9Ch+var_4], esi
.text:004024FF                 mov     esi, [esp+9Ch+arg_4]
.text:00402506                 mov     [esp+9Ch+ErrorMessage], edx ; int
.text:0040250A                 mov     [esp+9Ch+Code], ebx ; char *
.text:0040250D                 call    sub_418A10
.text:00402512                 test    eax, eax
.text:00402514                 jz      short loc_402567
.text:00402516                 mov     [esp+9Ch+Code], ebx ; char *
.text:00402519                 call    sub_40AD30
.text:0040251E                 mov     [esp+9Ch+Code], offset aCannotObtainTi ; "cannot obtain time stamps for %s"
.text:00402525
.text:00402525 loc_402525:                             ; CODE XREF: sub_4024E0+CF↓j
.text:00402525                 mov     esi, eax
.text:00402527                 call    ds:libintl_gettext
.text:0040252D                 mov     ebx, eax
.text:0040252F                 call    _errno
.text:00402534                 mov     dword ptr [esp+9Ch+var_90], esi ; char
.text:00402538                 mov     [esp+9Ch+var_94], ebx ; char *
.text:0040253C                 mov     esi, [eax]
.text:0040253E                 mov     [esp+9Ch+Code], 0 ; Code
.text:00402545                 mov     [esp+9Ch+ErrorMessage], esi ; ErrorMessage
.text:00402549                 call    sub_415220
.text:0040254E                 xor     edx, edx
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_4024E0+BE↓j
.text:00402550                 mov     ebx, [esp+9Ch+var_8]
.text:00402557                 mov     eax, edx
.text:00402559                 mov     esi, [esp+9Ch+var_4]
.text:00402560                 add     esp, 9Ch
.text:00402566                 retn
.text:00402567 ; ---------------------------------------------------------------------------
.text:00402567
.text:00402567 loc_402567:                             ; CODE XREF: sub_4024E0+34↑j
.text:00402567                 mov     [esp+9Ch+Code], esi ; char *
.text:0040256A                 mov     ecx, [esp+9Ch+var_44]
.text:0040256E                 mov     edx, [esp+9Ch+var_40]
.text:00402572                 mov     ebx, [esp+9Ch+var_3C]
.text:00402576                 mov     [esp+9Ch+var_8C], ecx
.text:0040257A                 mov     ecx, [esp+9Ch+var_38]
.text:0040257E                 mov     [esp+9Ch+var_88], edx
.text:00402582                 lea     edx, [esp+9Ch+var_8C]
.text:00402586                 mov     [esp+9Ch+ErrorMessage], edx ; int
.text:0040258A                 mov     [esp+9Ch+var_84], ebx
.text:0040258E                 mov     [esp+9Ch+var_80], ecx
.text:00402592                 call    sub_40A020
.text:00402597                 test    eax, eax
.text:00402599                 mov     edx, 1
.text:0040259E                 jz      short loc_402550
.text:004025A0                 mov     [esp+9Ch+Code], esi ; char *
.text:004025A3                 call    sub_40AD30
.text:004025A8                 mov     [esp+9Ch+Code], offset aCannotSetTimeS ; "cannot set time stamps for %s"
.text:004025AF                 jmp     loc_402525
.text:004025AF sub_4024E0      endp
.text:004025AF
.text:004025AF ; ---------------------------------------------------------------------------
.text:004025B4 aStripFailed    db 'strip failed',0     ; DATA XREF: sub_4025F0:loc_40262E↓o
.text:004025C1 aCannotRunStrip db 'cannot run strip',0 ; DATA XREF: sub_4025F0+92↓o
.text:004025D2 aForkSystemCall db 'fork system call failed',0
.text:004025D2                                         ; DATA XREF: sub_4025F0:loc_4026A2↓o
.text:004025EA                 align 10h
.text:004025F0
.text:004025F0 ; =============== S U B R O U T I N E =======================================
.text:004025F0
.text:004025F0
.text:004025F0 sub_4025F0      proc near               ; CODE XREF: sub_402260+86↑p
.text:004025F0
.text:004025F0 FileName        = dword ptr -2Ch
.text:004025F0 Arguments       = dword ptr -28h
.text:004025F0 var_24          = dword ptr -24h
.text:004025F0 var_20          = dword ptr -20h
.text:004025F0 var_10          = dword ptr -10h
.text:004025F0 var_C           = dword ptr -0Ch
.text:004025F0 arg_0           = dword ptr  4
.text:004025F0
.text:004025F0                 push    esi
.text:004025F1                 push    ebx
.text:004025F2                 sub     esp, 24h
.text:004025F5                 call    sub_419890
.text:004025FA                 cmp     eax, 0FFFFFFFFh
.text:004025FD                 mov     ebx, eax
.text:004025FF                 jz      loc_4026A2
.text:00402605                 test    eax, eax
.text:00402607                 jz      short loc_40265E
.text:00402609                 lea     esi, [esp+2Ch+var_10]
.text:0040260D                 lea     esi, [esi+0]
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_4025F0+2E↓j
.text:00402610                 mov     [esp+2Ch+var_C], esi
.text:00402614                 mov     [esp+2Ch+FileName], esi ; intptr_t
.text:00402617                 call    sub_419860
.text:0040261C                 cmp     ebx, eax
.text:0040261E                 jnz     short loc_402610
.text:00402620                 mov     ecx, [esp+2Ch+var_10]
.text:00402624                 test    ecx, ecx
.text:00402626                 jnz     short loc_40262E
.text:00402628
.text:00402628 loc_402628:                             ; CODE XREF: sub_4025F0+6C↓j
.text:00402628                 add     esp, 24h
.text:0040262B                 pop     ebx
.text:0040262C                 pop     esi
.text:0040262D                 retn
.text:0040262E ; ---------------------------------------------------------------------------
.text:0040262E
.text:0040262E loc_40262E:                             ; CODE XREF: sub_4025F0+36↑j
.text:0040262E                 mov     [esp+2Ch+FileName], offset aStripFailed ; "strip failed"
.text:00402635                 call    ds:libintl_gettext
.text:0040263B                 mov     [esp+2Ch+Arguments], 0 ; ErrorMessage
.text:00402643                 mov     [esp+2Ch+var_24], eax ; char *
.text:00402647                 mov     esi, esi
.text:00402649                 lea     edi, [edi+0]
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_4025F0+B0↓j
.text:00402650                 mov     [esp+2Ch+FileName], 1 ; Code
.text:00402657                 call    sub_415220
.text:0040265C                 jmp     short loc_402628
.text:0040265E ; ---------------------------------------------------------------------------
.text:0040265E
.text:0040265E loc_40265E:                             ; CODE XREF: sub_4025F0+17↑j
.text:0040265E                 mov     [esp+2Ch+var_20], 0
.text:00402666                 mov     edx, [esp+2Ch+arg_0]
.text:0040266A                 mov     [esp+2Ch+Arguments], offset Arguments ; "strip"
.text:00402672                 mov     [esp+2Ch+FileName], offset Arguments ; "strip"
.text:00402679                 mov     [esp+2Ch+var_24], edx
.text:0040267D                 call    _execlp
.text:00402682                 mov     [esp+2Ch+FileName], offset aCannotRunStrip ; "cannot run strip"
.text:00402689
.text:00402689 loc_402689:                             ; CODE XREF: sub_4025F0+B9↓j
.text:00402689                 call    ds:libintl_gettext
.text:0040268F                 mov     esi, eax
.text:00402691                 call    _errno
.text:00402696                 mov     [esp+2Ch+var_24], esi
.text:0040269A                 mov     edx, [eax]
.text:0040269C                 mov     [esp+2Ch+Arguments], edx
.text:004026A0                 jmp     short loc_402650
.text:004026A2 ; ---------------------------------------------------------------------------
.text:004026A2
.text:004026A2 loc_4026A2:                             ; CODE XREF: sub_4025F0+F↑j
.text:004026A2                 mov     [esp+2Ch+FileName], offset aForkSystemCall ; "fork system call failed"
.text:004026A9                 jmp     short loc_402689
.text:004026A9 sub_4025F0      endp
.text:004026A9
.text:004026A9 ; ---------------------------------------------------------------------------
.text:004026AB aInvalidGroupS  db 'invalid group %s',0 ; DATA XREF: sub_4026D0+A1↓o
.text:004026BC aInvalidUserS   db 'invalid user %s',0  ; DATA XREF: sub_4026D0+134↓o
.text:004026CC                 align 10h
.text:004026D0
.text:004026D0 ; =============== S U B R O U T I N E =======================================
.text:004026D0
.text:004026D0
.text:004026D0 sub_4026D0      proc near               ; CODE XREF: sub_401700:loc_401CC3↑p
.text:004026D0
.text:004026D0 Code            = dword ptr -2Ch
.text:004026D0 ErrorMessage    = dword ptr -28h
.text:004026D0 var_24          = dword ptr -24h
.text:004026D0 var_20          = byte ptr -20h
.text:004026D0 Str             = dword ptr -1Ch
.text:004026D0 var_C           = dword ptr -0Ch
.text:004026D0 var_8           = dword ptr -8
.text:004026D0 var_4           = dword ptr -4
.text:004026D0
.text:004026D0                 sub     esp, 2Ch
.text:004026D3                 mov     eax, ds:dword_421000
.text:004026D8                 mov     [esp+2Ch+var_4], ebx
.text:004026DC                 test    eax, eax
.text:004026DE                 jnz     loc_4027A0
.text:004026E4                 mov     ebx, 0FFFFFFFFh
.text:004026E9                 mov     ds:dword_421010, ebx
.text:004026EF
.text:004026EF loc_4026EF:                             ; CODE XREF: sub_4026D0+E9↓j
.text:004026EF                 mov     eax, ds:dword_421020
.text:004026F4                 test    eax, eax
.text:004026F6                 jnz     short loc_402710
.text:004026F8                 mov     edx, 0FFFFFFFFh
.text:004026FD                 mov     ds:dword_421030, edx
.text:00402703
.text:00402703 loc_402703:                             ; CODE XREF: sub_4026D0+59↓j
.text:00402703                 mov     ebx, [esp+2Ch+var_4]
.text:00402707                 add     esp, 2Ch
.text:0040270A                 retn
.text:0040270A ; ---------------------------------------------------------------------------
.text:0040270B                 align 10h
.text:00402710
.text:00402710 loc_402710:                             ; CODE XREF: sub_4026D0+26↑j
.text:00402710                 mov     [esp+2Ch+Code], eax
.text:00402713                 call    sub_4197F0
.text:00402718                 test    eax, eax
.text:0040271A                 jz      short loc_40272B
.text:0040271C                 mov     eax, [eax+8]
.text:0040271F
.text:0040271F loc_40271F:                             ; CODE XREF: sub_4026D0+91↓j
.text:0040271F                 mov     ds:dword_421030, eax
.text:00402724                 call    nullsub_1
.text:00402729                 jmp     short loc_402703
.text:0040272B ; ---------------------------------------------------------------------------
.text:0040272B
.text:0040272B loc_40272B:                             ; CODE XREF: sub_4026D0+4A↑j
.text:0040272B                 mov     [esp+2Ch+Str], 0 ; Str
.text:00402733                 mov     edx, ds:dword_421020
.text:00402739                 lea     ecx, [esp+2Ch+var_C]
.text:0040273D                 mov     dword ptr [esp+2Ch+var_20], ecx ; int
.text:00402741                 mov     [esp+2Ch+var_24], 0 ; int
.text:00402749                 mov     [esp+2Ch+ErrorMessage], 0 ; int
.text:00402751                 mov     [esp+2Ch+Code], edx ; int
.text:00402754                 call    sub_409A00
.text:00402759                 test    eax, eax
.text:0040275B                 jnz     short loc_402763
.text:0040275D
.text:0040275D loc_40275D:                             ; CODE XREF: sub_4026D0+CC↓j
.text:0040275D                 mov     eax, [esp+2Ch+var_C]
.text:00402761                 jmp     short loc_40271F
.text:00402763 ; ---------------------------------------------------------------------------
.text:00402763
.text:00402763 loc_402763:                             ; CODE XREF: sub_4026D0+8B↑j
.text:00402763                 mov     ebx, ds:dword_421020
.text:00402769                 mov     [esp+2Ch+Code], ebx ; char *
.text:0040276C                 call    sub_40AD30
.text:00402771                 mov     [esp+2Ch+Code], offset aInvalidGroupS ; "invalid group %s"
.text:00402778                 mov     ebx, eax
.text:0040277A                 call    ds:libintl_gettext
.text:00402780                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402784                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040278C                 mov     [esp+2Ch+Code], 1 ; Code
.text:00402793                 mov     [esp+2Ch+var_24], eax ; char *
.text:00402797                 call    sub_415220
.text:0040279C                 jmp     short loc_40275D
.text:0040279C ; ---------------------------------------------------------------------------
.text:0040279E                 align 10h
.text:004027A0
.text:004027A0 loc_4027A0:                             ; CODE XREF: sub_4026D0+E↑j
.text:004027A0                 mov     [esp+2Ch+Code], eax ; char *
.text:004027A3                 call    sub_419810
.text:004027A8                 test    eax, eax
.text:004027AA                 jz      short loc_4027BE
.text:004027AC                 mov     eax, [eax+8]
.text:004027AF
.text:004027AF loc_4027AF:                             ; CODE XREF: sub_4026D0+124↓j
.text:004027AF                 mov     ds:dword_421010, eax
.text:004027B4                 call    nullsub_2
.text:004027B9                 jmp     loc_4026EF
.text:004027BE ; ---------------------------------------------------------------------------
.text:004027BE
.text:004027BE loc_4027BE:                             ; CODE XREF: sub_4026D0+DA↑j
.text:004027BE                 mov     [esp+2Ch+Str], 0 ; Str
.text:004027C6                 lea     edx, [esp+2Ch+var_8]
.text:004027CA                 mov     dword ptr [esp+2Ch+var_20], edx ; int
.text:004027CE                 mov     edx, ds:dword_421000
.text:004027D4                 mov     [esp+2Ch+var_24], 0 ; int
.text:004027DC                 mov     [esp+2Ch+ErrorMessage], 0 ; int
.text:004027E4                 mov     [esp+2Ch+Code], edx ; int
.text:004027E7                 call    sub_409A00
.text:004027EC                 test    eax, eax
.text:004027EE                 jnz     short loc_4027F6
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_4026D0+15F↓j
.text:004027F0                 mov     eax, [esp+2Ch+var_8]
.text:004027F4                 jmp     short loc_4027AF
.text:004027F6 ; ---------------------------------------------------------------------------
.text:004027F6
.text:004027F6 loc_4027F6:                             ; CODE XREF: sub_4026D0+11E↑j
.text:004027F6                 mov     ecx, ds:dword_421000
.text:004027FC                 mov     [esp+2Ch+Code], ecx ; char *
.text:004027FF                 call    sub_40AD30
.text:00402804                 mov     [esp+2Ch+Code], offset aInvalidUserS ; "invalid user %s"
.text:0040280B                 mov     ebx, eax
.text:0040280D                 call    ds:libintl_gettext
.text:00402813                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402817                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040281F                 mov     [esp+2Ch+Code], 1 ; Code
.text:00402826                 mov     [esp+2Ch+var_24], eax ; char *
.text:0040282A                 call    sub_415220
.text:0040282F                 jmp     short loc_4027F0
.text:0040282F sub_4026D0      endp
.text:0040282F
.text:0040282F ; ---------------------------------------------------------------------------
.text:00402831                 db 0EBh, 0Dh, 90h
.text:00402834                 align 10h
.text:00402840 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00402840                                         ; DATA XREF: sub_403150+C↓o
.text:00402867                 align 20h
.text:00402880 aUsageSOptionTS db 'Usage: %s [OPTION]... [-T] SOURCE DEST',0Ah
.text:00402880                                         ; DATA XREF: sub_403150:loc_403190↓o
.text:00402880                 db '  or:  %s [OPTION]... SOURCE... DIRECTORY',0Ah
.text:00402880                 db '  or:  %s [OPTION]... -t DIRECTORY SOURCE...',0Ah
.text:00402880                 db '  or:  %s [OPTION]... -d DIRECTORY...',0Ah,0
.text:00402925                 align 20h
.text:00402940 aInTheFirstThre db 'In the first three forms, copy SOURCE to DEST or multiple SOURCE('
.text:00402940                                         ; DATA XREF: sub_403150+6B↓o
.text:00402940                 db 's) to',0Ah
.text:00402940                 db 'the existing DIRECTORY, while setting permission modes and owner/'
.text:00402940                 db 'group.',0Ah
.text:00402940                 db 'In the 4th form, create all components of the given DIRECTORY(ies'
.text:00402940                 db ').',0Ah
.text:00402940                 db 0Ah,0
.text:00402A15                 align 10h
.text:00402A20 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00402A20                                         ; DATA XREF: sub_403150+8D↓o
.text:00402A20                 db 'ns too.',0Ah,0
.text:00402A6A                 align 20h
.text:00402A80 aBackupControlM db '      --backup[=CONTROL] make a backup of each existing destinati'
.text:00402A80                                         ; DATA XREF: sub_403150+AF↓o
.text:00402A80                 db 'on file',0Ah
.text:00402A80                 db '  -b                  like --backup but does not accept an argume'
.text:00402A80                 db 'nt',0Ah
.text:00402A80                 db '  -c                  (ignored)',0Ah
.text:00402A80                 db '  -d, --directory     treat all arguments as directory names; cre'
.text:00402A80                 db 'ate all',0Ah
.text:00402A80                 db '                        components of the specified directories',0Ah
.text:00402A80                 db 0
.text:00402BB7                 align 10h
.text:00402BC0 aDCreateAllLead db '  -D                  create all leading components of DEST excep'
.text:00402BC0                                         ; DATA XREF: sub_403150+D1↓o
.text:00402BC0                 db 't the last,',0Ah
.text:00402BC0                 db '                        then copy SOURCE to DEST',0Ah
.text:00402BC0                 db '  -g, --group=GROUP   set group ownership, instead of process',27h
.text:00402BC0                 db ' current group',0Ah
.text:00402BC0                 db '  -m, --mode=MODE     set permission mode (as in chmod), instead '
.text:00402BC0                 db 'of rwxr-xr-x',0Ah
.text:00402BC0                 db '  -o, --owner=OWNER   set ownership (super-user only)',0Ah,0
.text:00402D10                 align 20h
.text:00402D20 aPPreserveTimes db '  -p, --preserve-timestamps   apply access/modification times of '
.text:00402D20                                         ; DATA XREF: sub_403150+F3↓o
.text:00402D20                 db 'SOURCE files',0Ah
.text:00402D20                 db '                        to corresponding destination files',0Ah
.text:00402D20                 db '  -s, --strip         strip symbol tables',0Ah
.text:00402D20                 db '  -S, --suffix=SUFFIX override the usual backup suffix',0Ah
.text:00402D20                 db '  -t, --target-directory=DIRECTORY  copy all SOURCE arguments int'
.text:00402D20                 db 'o DIRECTORY',0Ah
.text:00402D20                 db '  -T, --no-target-directory  treat DEST as a normal file',0Ah
.text:00402D20                 db '  -v, --verbose       print the name of each directory as it is c'
.text:00402D20                 db 'reated',0Ah,0
.text:00402ED9                 align 10h
.text:00402EE0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00402EE0                                         ; DATA XREF: sub_403150+115↓o
.text:00402F0D                 align 20h
.text:00402F20 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00402F20                                         ; DATA XREF: sub_403150+137↓o
.text:00402F56                 align 10h
.text:00402F60 aTheBackupSuffi db 0Ah                  ; DATA XREF: sub_403150+159↓o
.text:00402F60                 db 'The backup suffix is `~',27h,', unless set with --suffix or SIMPL'
.text:00402F60                 db 'E_BACKUP_SUFFIX.',0Ah
.text:00402F60                 db 'The version control method may be selected via the --backup optio'
.text:00402F60                 db 'n or through',0Ah
.text:00402F60                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.text:00402F60                 db 0Ah,0
.text:0040303D                 align 10h
.text:00403040 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.text:00403040                                         ; DATA XREF: sub_403150+17B↓o
.text:00403040                 db '  numbered, t     make numbered backups',0Ah
.text:00403040                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.text:00403040                 db 'rwise',0Ah
.text:00403040                 db '  simple, never   always make simple backups',0Ah,0
.text:0040311E aReportBugsToS  db 0Ah                  ; DATA XREF: sub_403150+19D↓o
.text:0040311E                 db 'Report bugs to <%s>.',0Ah,0
.text:00403135 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00403135                                         ; DATA XREF: sub_403150+1AA↓o
.text:0040314B                 align 10h
.text:00403150
.text:00403150 ; =============== S U B R O U T I N E =======================================
.text:00403150
.text:00403150 ; Attributes: noreturn
.text:00403150
.text:00403150 ; void __cdecl __noreturn sub_403150(int Code)
.text:00403150 sub_403150      proc near               ; CODE XREF: sub_401700:loc_4018D7↑p
.text:00403150                                         ; sub_401700+530↑p ...
.text:00403150
.text:00403150 Stream          = dword ptr -1Ch
.text:00403150 Format          = dword ptr -18h
.text:00403150 var_14          = dword ptr -14h
.text:00403150 var_10          = dword ptr -10h
.text:00403150 var_C           = dword ptr -0Ch
.text:00403150 Code            = dword ptr  4
.text:00403150
.text:00403150                 push    ebx
.text:00403151                 sub     esp, 18h
.text:00403154                 mov     ebx, [esp+1Ch+Code]
.text:00403158                 test    ebx, ebx
.text:0040315A                 jz      short loc_403190
.text:0040315C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403163                 call    ds:libintl_gettext
.text:00403169                 mov     edx, ds:_iob
.text:0040316F                 mov     ecx, ds:dword_421C80
.text:00403175                 add     edx, 40h ; '@'
.text:00403178                 mov     [esp+1Ch+var_14], ecx
.text:0040317C                 mov     [esp+1Ch+Format], eax ; Format
.text:00403180                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00403183                 call    fprintf
.text:00403188
.text:00403188 loc_403188:                             ; CODE XREF: sub_403150+1BA↓j
.text:00403188                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040318B                 call    exit
.text:00403190 ; ---------------------------------------------------------------------------
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_403150+A↑j
.text:00403190                 mov     [esp+1Ch+Stream], offset aUsageSOptionTS ; "Usage: %s [OPTION]... [-T] SOURCE DEST"...
.text:00403197                 call    ds:libintl_gettext
.text:0040319D                 mov     ecx, ds:dword_421C80
.text:004031A3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004031A6                 mov     [esp+1Ch+var_C], ecx
.text:004031AA                 mov     [esp+1Ch+var_10], ecx
.text:004031AE                 mov     [esp+1Ch+var_14], ecx
.text:004031B2                 mov     [esp+1Ch+Format], ecx
.text:004031B6                 call    printf
.text:004031BB                 mov     [esp+1Ch+Stream], offset aInTheFirstThre ; "In the first three forms, copy SOURCE t"...
.text:004031C2                 call    ds:libintl_gettext
.text:004031C8                 mov     ecx, ds:_iob
.text:004031CE                 add     ecx, 20h ; ' '
.text:004031D1                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004031D5                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004031D8                 call    fputs
.text:004031DD                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004031E4                 call    ds:libintl_gettext
.text:004031EA                 mov     ecx, ds:_iob
.text:004031F0                 add     ecx, 20h ; ' '
.text:004031F3                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004031F7                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004031FA                 call    fputs
.text:004031FF                 mov     [esp+1Ch+Stream], offset aBackupControlM ; "      --backup[=CONTROL] make a backup "...
.text:00403206                 call    ds:libintl_gettext
.text:0040320C                 mov     ecx, ds:_iob
.text:00403212                 add     ecx, 20h ; ' '
.text:00403215                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403219                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040321C                 call    fputs
.text:00403221                 mov     [esp+1Ch+Stream], offset aDCreateAllLead ; "  -D                  create all leadin"...
.text:00403228                 call    ds:libintl_gettext
.text:0040322E                 mov     ecx, ds:_iob
.text:00403234                 add     ecx, 20h ; ' '
.text:00403237                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040323B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040323E                 call    fputs
.text:00403243                 mov     [esp+1Ch+Stream], offset aPPreserveTimes ; "  -p, --preserve-timestamps   apply acc"...
.text:0040324A                 call    ds:libintl_gettext
.text:00403250                 mov     ecx, ds:_iob
.text:00403256                 add     ecx, 20h ; ' '
.text:00403259                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040325D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403260                 call    fputs
.text:00403265                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040326C                 call    ds:libintl_gettext
.text:00403272                 mov     ecx, ds:_iob
.text:00403278                 add     ecx, 20h ; ' '
.text:0040327B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040327F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403282                 call    fputs
.text:00403287                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040328E                 call    ds:libintl_gettext
.text:00403294                 mov     ecx, ds:_iob
.text:0040329A                 add     ecx, 20h ; ' '
.text:0040329D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004032A1                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004032A4                 call    fputs
.text:004032A9                 mov     [esp+1Ch+Stream], offset aTheBackupSuffi ; "\nThe backup suffix is `~', unless set "...
.text:004032B0                 call    ds:libintl_gettext
.text:004032B6                 mov     ecx, ds:_iob
.text:004032BC                 add     ecx, 20h ; ' '
.text:004032BF                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004032C3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004032C6                 call    fputs
.text:004032CB                 mov     [esp+1Ch+Stream], offset aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:004032D2                 call    ds:libintl_gettext
.text:004032D8                 mov     ecx, ds:_iob
.text:004032DE                 add     ecx, 20h ; ' '
.text:004032E1                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004032E5                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004032E8                 call    fputs
.text:004032ED                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004032F4                 call    ds:libintl_gettext
.text:004032FA                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403302                 mov     [esp+1Ch+Stream], eax ; Format
.text:00403305                 call    printf
.text:0040330A                 jmp     loc_403188
.text:0040330A sub_403150      endp
.text:0040330A
.text:0040330A ; ---------------------------------------------------------------------------
.text:0040330F                 align 20h
.text:00403320 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: sub_403910+A0↓o
.text:0040332F ; const char Format[]
.text:0040332F Format          db '%s -> %s',0         ; DATA XREF: sub_403910+241↓o
.text:00403338 ; const char asc_403338[]
.text:00403338 asc_403338      db '.',0                ; DATA XREF: sub_403910+341↓o
.text:00403338                                         ; sub_403910:loc_4040D6↓o
.text:0040333A aSettingPermiss db 'setting permissions for %s',0
.text:0040333A                                         ; DATA XREF: sub_403910+4B9↓o
.text:00403355                 align 10h
.text:00403360 aFailedToPreser db 'failed to preserve ownership for %s',0
.text:00403360                                         ; DATA XREF: sub_403910+53D↓o
.text:00403360                                         ; sub_403910:loc_4042EE↓o
.text:00403384 aPreservingTime db 'preserving times for %s',0
.text:00403384                                         ; DATA XREF: sub_403910+5FA↓o
.text:0040339C                 align 10h
.text:004033A0 aCannotCreateSy db 'cannot create symbolic link %s to %s',0
.text:004033A0                                         ; DATA XREF: sub_403910+68A↓o
.text:004033C5 aSSUnbackup     db '%s -> %s (unbackup)',0Ah,0
.text:004033C5                                         ; DATA XREF: sub_403910+72B↓o
.text:004033DA aCannotUnBackup db 'cannot un-backup %s',0
.text:004033DA                                         ; DATA XREF: sub_403910+75A↓o
.text:004033EE                 align 20h
.text:00403400 aSCanMakeRelati db '%s: can make relative symbolic links only in current directory',0
.text:00403400                                         ; DATA XREF: sub_403910+796↓o
.text:0040343F aSHasUnknownFil db '%s has unknown file type',0
.text:0040343F                                         ; DATA XREF: sub_403910+94E↓o
.text:00403458                 align 10h
.text:00403460 aCannotCreateSy_0 db 'cannot create symbolic link %s',0
.text:00403460                                         ; DATA XREF: sub_403910+A72↓o
.text:0040347F aCannotReadSymb db 'cannot read symbolic link %s',0
.text:0040347F                                         ; DATA XREF: sub_403910+AFC↓o
.text:0040349C aCannotCreateSp db 'cannot create special file %s',0
.text:0040349C                                         ; DATA XREF: sub_403910+B77↓o
.text:004034BA aCannotCreateFi db 'cannot create fifo %s',0
.text:004034BA                                         ; DATA XREF: sub_403910+BDA↓o
.text:004034D0 aCannotCreateLi db 'cannot create link %s',0
.text:004034D0                                         ; DATA XREF: sub_403910+C34↓o
.text:004034E6 ; const char aSS_0[]
.text:004034E6 aSS_0           db '%s -> %s',0Ah,0     ; DATA XREF: sub_403910+DE5↓o
.text:004034E6                                         ; sub_403910+ECB↓o
.text:004034F0 aCannotCreateDi db 'cannot create directory %s',0
.text:004034F0                                         ; DATA XREF: sub_403910+E01↓o
.text:0040350B                 align 20h
.text:00403520 aCannotCopyCycl db 'cannot copy cyclic symbolic link %s',0
.text:00403520                                         ; DATA XREF: sub_403910+E18↓o
.text:00403544 aCannotMoveSToS db 'cannot move %s to %s',0
.text:00403544                                         ; DATA XREF: sub_403910+F39↓o
.text:00403559                 align 10h
.text:00403560 aInterDeviceMov db 'inter-device move failed: %s to %s; unable to remove target',0
.text:00403560                                         ; DATA XREF: sub_403910+FDF↓o
.text:0040359C                 align 10h
.text:004035A0 aCannotMoveSToA db 'cannot move %s to a subdirectory of itself, %s',0
.text:004035A0                                         ; DATA XREF: sub_403910+1030↓o
.text:004035CF                 align 20h
.text:004035E0 aCannotCreateHa db 'cannot create hard link %s to %s',0
.text:004035E0                                         ; DATA XREF: sub_403910+1124↓o
.text:00403601 aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: sub_403910+1166↓o
.text:00403601                                         ; sub_403910+16BB↓o ...
.text:00403612                 align 10h
.text:00403620 aCannotCopyADir db 'cannot copy a directory, %s, into itself, %s',0
.text:00403620                                         ; DATA XREF: sub_403910+11B9↓o
.text:0040364D                 align 20h
.text:00403660 aWillNotCreateH db 'will not create hard link %s to directory %s',0
.text:00403660                                         ; DATA XREF: sub_403910+121E↓o
.text:0040368D aBackupS        db ' (backup: %s)',0    ; DATA XREF: sub_403910+12A2↓o
.text:0040369B                 align 10h
.text:004036A0 aBackingUpSWoul db 'backing up %s would destroy source;  %s not moved',0
.text:004036A0                                         ; DATA XREF: sub_403910+1543↓o
.text:004036D2                 align 10h
.text:004036E0 aBackingUpSWoul_0 db 'backing up %s would destroy source;  %s not copied',0
.text:004036E0                                         ; DATA XREF: sub_403910:loc_404EB7↓o
.text:00403713 aCannotBackupS  db 'cannot backup %s',0 ; DATA XREF: sub_403910+1622↓o
.text:00403724                 align 20h
.text:00403740 aCannotMoveDire db 'cannot move directory onto non-directory: %s -> %s',0
.text:00403740                                         ; DATA XREF: sub_403910+16EF↓o
.text:00403773 aCannotOverwrit db 'cannot overwrite directory %s',0
.text:00403773                                         ; DATA XREF: sub_403910+172E↓o
.text:00403791                 db 0EBh, 0Dh, 90h
.text:00403794                 align 10h
.text:004037A0 aSOverwriteSOve db '%s: overwrite %s, overriding mode %04lo? ',0
.text:004037A0                                         ; DATA XREF: sub_403910+17B6↓o
.text:004037A0                                         ; sub_403910+18E0↓o
.text:004037CA aSOverwriteS    db '%s: overwrite %s? ',0
.text:004037CA                                         ; DATA XREF: sub_403910+1815↓o
.text:004037CA                                         ; sub_403910+193F↓o
.text:004037DD                 align 10h
.text:004037E0 aCannotOverwrit_0 db 'cannot overwrite directory %s with non-directory',0
.text:004037E0                                         ; DATA XREF: sub_403910+197E↓o
.text:00403811                 db 0EBh, 0Dh, 90h
.text:00403814                 align 10h
.text:00403820 aWillNotOverwri db 'will not overwrite just-created %s with %s',0
.text:00403820                                         ; DATA XREF: sub_403910+19B2↓o
.text:0040384B                 align 20h
.text:00403860 aCannotOverwrit_1 db 'cannot overwrite non-directory %s with directory %s',0
.text:00403860                                         ; DATA XREF: sub_403910+19E6↓o
.text:00403894 aSAndSAreTheSam db '%s and %s are the same file',0
.text:00403894                                         ; DATA XREF: sub_403910+1A1A↓o
.text:004038B0                 align 20h
.text:004038C0 aWarningSourceF db 'warning: source file %s specified more than once',0
.text:004038C0                                         ; DATA XREF: sub_403910+1A72↓o
.text:004038F1 aOmittingDirect db 'omitting directory %s',0
.text:004038F1                                         ; DATA XREF: sub_403910+1ABA↓o
.text:00403907                 align 10h
.text:00403910
.text:00403910 ; =============== S U B R O U T I N E =======================================
.text:00403910
.text:00403910 ; Attributes: bp-based frame
.text:00403910
.text:00403910 ; int __cdecl sub_403910(char *Str2, char *FileName, int, int, int, int, int, char, int, int)
.text:00403910 sub_403910      proc near               ; CODE XREF: sub_405530+84↓p
.text:00403910                                         ; sub_405630+EF↓p
.text:00403910
.text:00403910 Format          = dword ptr -298h
.text:00403910 AccessMode      = dword ptr -294h
.text:00403910 Size            = dword ptr -290h
.text:00403910 var_28C         = byte ptr -28Ch
.text:00403910 var_288         = dword ptr -288h
.text:00403910 var_284         = dword ptr -284h
.text:00403910 var_280         = dword ptr -280h
.text:00403910 var_27C         = byte ptr -27Ch
.text:00403910 var_278         = dword ptr -278h
.text:00403910 var_274         = dword ptr -274h
.text:00403910 var_269         = byte ptr -269h
.text:00403910 var_268         = dword ptr -268h
.text:00403910 var_261         = byte ptr -261h
.text:00403910 Block           = dword ptr -260h
.text:00403910 var_25C         = byte ptr -25Ch
.text:00403910 var_255         = byte ptr -255h
.text:00403910 var_254         = byte ptr -254h
.text:00403910 var_253         = byte ptr -253h
.text:00403910 var_252         = byte ptr -252h
.text:00403910 var_251         = byte ptr -251h
.text:00403910 lpFileName      = dword ptr -250h
.text:00403910 lpExistingFileName= dword ptr -24Ch
.text:00403910 var_248         = dword ptr -248h
.text:00403910 var_241         = byte ptr -241h
.text:00403910 var_240         = dword ptr -240h
.text:00403910 var_23C         = dword ptr -23Ch
.text:00403910 var_238         = dword ptr -238h
.text:00403910 var_234         = dword ptr -234h
.text:00403910 var_22B         = dword ptr -22Bh
.text:00403910 var_224         = dword ptr -224h
.text:00403910 var_220         = dword ptr -220h
.text:00403910 var_21C         = dword ptr -21Ch
.text:00403910 var_218         = dword ptr -218h
.text:00403910 var_210         = dword ptr -210h
.text:00403910 var_20C         = dword ptr -20Ch
.text:00403910 var_208         = dword ptr -208h
.text:00403910 var_204         = dword ptr -204h
.text:00403910 var_1A8         = dword ptr -1A8h
.text:00403910 var_1A0         = dword ptr -1A0h
.text:00403910 var_19C         = dword ptr -19Ch
.text:00403910 var_198         = dword ptr -198h
.text:00403910 var_194         = dword ptr -194h
.text:00403910 var_138         = dword ptr -138h
.text:00403910 var_130         = dword ptr -130h
.text:00403910 var_12C         = dword ptr -12Ch
.text:00403910 var_128         = dword ptr -128h
.text:00403910 var_124         = dword ptr -124h
.text:00403910 var_118         = dword ptr -118h
.text:00403910 var_110         = dword ptr -110h
.text:00403910 var_10C         = dword ptr -10Ch
.text:00403910 var_108         = dword ptr -108h
.text:00403910 var_104         = dword ptr -104h
.text:00403910 var_F8          = dword ptr -0F8h
.text:00403910 var_F0          = dword ptr -0F0h
.text:00403910 var_EC          = dword ptr -0ECh
.text:00403910 var_E8          = dword ptr -0E8h
.text:00403910 var_E4          = dword ptr -0E4h
.text:00403910 var_E0          = dword ptr -0E0h
.text:00403910 var_DC          = dword ptr -0DCh
.text:00403910 var_D8          = dword ptr -0D8h
.text:00403910 var_C8          = dword ptr -0C8h
.text:00403910 var_C4          = dword ptr -0C4h
.text:00403910 var_88          = dword ptr -88h
.text:00403910 var_80          = dword ptr -80h
.text:00403910 var_7C          = dword ptr -7Ch
.text:00403910 var_78          = dword ptr -78h
.text:00403910 var_74          = dword ptr -74h
.text:00403910 var_70          = dword ptr -70h
.text:00403910 var_6C          = dword ptr -6Ch
.text:00403910 var_68          = dword ptr -68h
.text:00403910 var_60          = dword ptr -60h
.text:00403910 var_5C          = dword ptr -5Ch
.text:00403910 var_58          = dword ptr -58h
.text:00403910 var_50          = dword ptr -50h
.text:00403910 var_4C          = dword ptr -4Ch
.text:00403910 var_48          = dword ptr -48h
.text:00403910 var_44          = dword ptr -44h
.text:00403910 Str2            = dword ptr  8
.text:00403910 FileName        = dword ptr  0Ch
.text:00403910 arg_8           = dword ptr  10h
.text:00403910 arg_C           = dword ptr  14h
.text:00403910 arg_10          = dword ptr  18h
.text:00403910 arg_14          = dword ptr  1Ch
.text:00403910 arg_18          = dword ptr  20h
.text:00403910 arg_1C          = byte ptr  24h
.text:00403910 arg_20          = dword ptr  28h
.text:00403910 arg_24          = dword ptr  2Ch
.text:00403910
.text:00403910                 push    ebp
.text:00403911                 xor     ecx, ecx
.text:00403913                 mov     ebp, esp
.text:00403915                 push    edi
.text:00403916                 xor     edx, edx
.text:00403918                 push    esi
.text:00403919                 push    ebx
.text:0040391A                 sub     esp, 28Ch
.text:00403920                 mov     ebx, [ebp+arg_8]
.text:00403923                 movzx   eax, [ebp+arg_1C]
.text:00403927                 mov     [ebp+lpExistingFileName], ecx
.text:0040392D                 mov     edi, [ebp+arg_C]
.text:00403930                 mov     [ebp+lpFileName], edx
.text:00403936                 mov     esi, [ebp+arg_10]
.text:00403939                 mov     byte ptr [ebp+var_22B], bl
.text:0040393F                 mov     [ebp+var_241], al
.text:00403945                 mov     eax, [ebp+arg_18]
.text:00403948                 mov     [ebp+var_240], edi
.text:0040394E                 mov     edi, [ebp+arg_24]
.text:00403951                 cmp     byte ptr [eax+14h], 0
.text:00403955                 mov     [ebp+var_23C], esi
.text:0040395B                 mov     [ebp+var_251], 0
.text:00403962                 mov     [ebp+var_253], 0
.text:00403969                 mov     [ebp+var_254], 0
.text:00403970                 jz      short loc_403979
.text:00403972                 test    edi, edi
.text:00403974                 jz      short loc_403979
.text:00403976                 mov     byte ptr [edi], 0
.text:00403979
.text:00403979 loc_403979:                             ; CODE XREF: sub_403910+60↑j
.text:00403979                                         ; sub_403910+64↑j
.text:00403979                 mov     ecx, [ebp+arg_18]
.text:0040397C                 mov     edx, [ebp+arg_20]
.text:0040397F                 cmp     dword ptr [ecx+8], 2
.text:00403983                 mov     byte ptr [edx], 0
.text:00403986                 jz      loc_4053D6
.text:0040398C                 mov     esi, [ebp+Str2]
.text:0040398F                 lea     ecx, [ebp+var_88]
.text:00403995                 mov     [esp+298h+AccessMode], ecx ; int
.text:00403999                 mov     [esp+298h+Format], esi ; char *
.text:0040399C                 call    sub_418A10
.text:004039A1
.text:004039A1 loc_4039A1:                             ; CODE XREF: sub_403910+1ADB↓j
.text:004039A1                 test    eax, eax
.text:004039A3                 jz      short loc_4039F0
.text:004039A5                 mov     edi, [ebp+Str2]
.text:004039A8
.text:004039A8 loc_4039A8:                             ; CODE XREF: sub_403910+1DF↓j
.text:004039A8                 mov     [esp+298h+Format], edi ; char *
.text:004039AB                 call    sub_40AD30
.text:004039B0                 mov     [esp+298h+Format], offset aCannotStatS ; "cannot stat %s"
.text:004039B7
.text:004039B7 loc_4039B7:                             ; CODE XREF: sub_403910+761↓j
.text:004039B7                                         ; sub_403910+1629↓j ...
.text:004039B7                 mov     esi, eax
.text:004039B9                 call    ds:libintl_gettext
.text:004039BF                 mov     edi, eax
.text:004039C1                 call    _errno
.text:004039C6                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:004039CA                 mov     [esp+298h+Size], edi ; char *
.text:004039CE                 mov     ebx, [eax]
.text:004039D0                 mov     [esp+298h+AccessMode], ebx ; ErrorMessage
.text:004039D4
.text:004039D4 loc_4039D4:                             ; CODE XREF: sub_403910+174D↓j
.text:004039D4                 mov     [esp+298h+Format], 0 ; Code
.text:004039DB                 call    sub_415220
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_403910+4F3↓j
.text:004039E0                                         ; sub_403910+574↓j ...
.text:004039E0                 xor     ebx, ebx
.text:004039E2
.text:004039E2 loc_4039E2:                             ; CODE XREF: sub_403910+3C0↓j
.text:004039E2                                         ; sub_403910+480↓j ...
.text:004039E2                 lea     esp, [ebp-0Ch]
.text:004039E5                 mov     eax, ebx
.text:004039E7                 pop     ebx
.text:004039E8                 pop     esi
.text:004039E9                 pop     edi
.text:004039EA                 pop     ebp
.text:004039EB                 retn
.text:004039EB ; ---------------------------------------------------------------------------
.text:004039EC                 align 10h
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_403910+93↑j
.text:004039F0                 movzx   eax, word ptr [ebp+var_88]
.text:004039F7                 mov     ebx, eax
.text:004039F9                 and     ebx, 0F000h
.text:004039FF                 mov     [ebp+var_248], eax
.text:00403A05                 cmp     ebx, 4000h
.text:00403A0B                 jz      loc_4053B2
.text:00403A11
.text:00403A11 loc_403A11:                             ; CODE XREF: sub_403910+1AA9↓j
.text:00403A11                 cmp     [ebp+var_241], 0
.text:00403A18                 jz      loc_403AAF
.text:00403A1E                 mov     ecx, [ebp+var_88]
.text:00403A24                 and     ecx, 0F000h
.text:00403A2A                 cmp     ecx, 4000h
.text:00403A30                 jz      short loc_403A90
.text:00403A32                 mov     edx, [ebp+arg_18]
.text:00403A35                 mov     ebx, [edx]
.text:00403A37                 test    ebx, ebx
.text:00403A39                 jnz     short loc_403A90
.text:00403A3B                 mov     ecx, [edx+38h]
.text:00403A3E                 test    ecx, ecx
.text:00403A40                 jz      short loc_403A90
.text:00403A42                 mov     [esp+298h+Format], ecx
.text:00403A45                 mov     ebx, [ebp+Str2]
.text:00403A48                 mov     esi, [ebp+var_7C]
.text:00403A4B                 mov     edx, [ebp+var_80]
.text:00403A4E                 mov     [ebp+var_118], ebx
.text:00403A54                 mov     ebx, [ebp+var_78]
.text:00403A57                 mov     [ebp+var_10C], esi
.text:00403A5D                 mov     esi, [ebp+var_74]
.text:00403A60                 mov     [ebp+var_110], edx
.text:00403A66                 lea     edx, [ebp+var_118]
.text:00403A6C                 mov     [ebp+var_108], ebx
.text:00403A72                 mov     [ebp+var_104], esi
.text:00403A78                 mov     [esp+298h+AccessMode], edx
.text:00403A7C                 call    sub_40B950
.text:00403A81                 test    eax, eax
.text:00403A83                 jnz     loc_405377
.text:00403A89                 lea     esi, [esi+0]
.text:00403A90
.text:00403A90 loc_403A90:                             ; CODE XREF: sub_403910+120↑j
.text:00403A90                                         ; sub_403910+129↑j ...
.text:00403A90                 mov     edx, [ebp+Str2]
.text:00403A93                 lea     ebx, [ebp+var_88]
.text:00403A99                 mov     esi, [ebp+arg_18]
.text:00403A9C                 mov     [esp+298h+Size], ebx ; int
.text:00403AA0                 mov     [esp+298h+AccessMode], edx ; char *
.text:00403AA4                 mov     ecx, [esi+38h]
.text:00403AA7                 mov     [esp+298h+Format], ecx ; int
.text:00403AAA                 call    sub_4064D0
.text:00403AAF
.text:00403AAF loc_403AAF:                             ; CODE XREF: sub_403910+108↑j
.text:00403AAF                 cmp     byte ptr [ebp+var_22B], 0
.text:00403AB6                 jnz     short loc_403B00
.text:00403AB8                 mov     eax, [ebp+arg_18]
.text:00403ABB                 cmp     dword ptr [eax+8], 2
.text:00403ABF                 jz      loc_40535D
.text:00403AC5                 mov     edx, [ebp+FileName]
.text:00403AC8                 lea     ebx, [ebp+var_F8]
.text:00403ACE                 mov     [esp+298h+AccessMode], ebx ; int
.text:00403AD2                 mov     [esp+298h+Format], edx ; char *
.text:00403AD5                 call    sub_418A10
.text:00403ADA
.text:00403ADA loc_403ADA:                             ; CODE XREF: sub_403910+1A62↓j
.text:00403ADA                 test    eax, eax
.text:00403ADC                 jz      loc_404BD2
.text:00403AE2                 call    _errno
.text:00403AE7                 cmp     dword ptr [eax], 2
.text:00403AEA                 jz      short loc_403AF4
.text:00403AEC                 mov     edi, [ebp+FileName]
.text:00403AEF                 jmp     loc_4039A8
.text:00403AF4 ; ---------------------------------------------------------------------------
.text:00403AF4
.text:00403AF4 loc_403AF4:                             ; CODE XREF: sub_403910+1DA↑j
.text:00403AF4                                         ; sub_403910+1608↓j ...
.text:00403AF4                 mov     byte ptr [ebp+var_22B], 1
.text:00403AFB                 nop
.text:00403AFC                 lea     esi, [esi+0]
.text:00403B00
.text:00403B00 loc_403B00:                             ; CODE XREF: sub_403910+1A6↑j
.text:00403B00                                         ; sub_403910+164C↓j ...
.text:00403B00                 mov     ecx, [ebp+arg_18]
.text:00403B03                 cmp     byte ptr [ecx+31h], 0
.text:00403B07                 jz      loc_403B90
.text:00403B0D                 mov     edx, [ebp+var_248]
.text:00403B13                 and     edx, 0F000h
.text:00403B19                 cmp     edx, 4000h
.text:00403B1F                 jz      short loc_403B90
.text:00403B21                 mov     [esp+298h+Format], 1 ; int
.text:00403B28                 mov     eax, [ebp+FileName]
.text:00403B2B                 mov     [esp+298h+AccessMode], eax ; char *
.text:00403B2F                 call    sub_40AD00
.text:00403B34                 mov     [esp+298h+Format], 0 ; int
.text:00403B3B                 mov     ebx, [ebp+Str2]
.text:00403B3E                 mov     esi, eax
.text:00403B40                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00403B44                 call    sub_40AD00
.text:00403B49                 mov     [esp+298h+AccessMode], eax
.text:00403B4D                 mov     [esp+298h+Size], esi
.text:00403B51                 mov     [esp+298h+Format], offset Format ; "%s -> %s"
.text:00403B58                 call    printf
.text:00403B5D                 cmp     [ebp+var_251], 0
.text:00403B64                 jnz     loc_404BA4
.text:00403B6A
.text:00403B6A loc_403B6A:                             ; CODE XREF: sub_403910+12BD↓j
.text:00403B6A                 mov     edx, ds:_iob
.text:00403B70                 mov     ebx, [edx+24h]
.text:00403B73                 dec     ebx
.text:00403B74                 mov     [edx+24h], ebx
.text:00403B77                 test    ebx, ebx
.text:00403B79                 js      loc_404B86
.text:00403B7F                 mov     esi, ds:_iob
.text:00403B85                 mov     eax, [esi+20h]
.text:00403B88                 mov     byte ptr [eax], 0Ah
.text:00403B8B                 inc     dword ptr [esi+20h]
.text:00403B8E                 mov     esi, esi
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403910+1F7↑j
.text:00403B90                                         ; sub_403910+20F↑j ...
.text:00403B90                 mov     ebx, [ebp+arg_18]
.text:00403B93                 cmp     byte ptr [ebx+14h], 0
.text:00403B97                 jz      short loc_403BA3
.text:00403B99                 cmp     [ebp+var_70], 1
.text:00403B9D                 jz      loc_404B61
.text:00403BA3
.text:00403BA3 loc_403BA3:                             ; CODE XREF: sub_403910+287↑j
.text:00403BA3                 mov     eax, [ebp+arg_18]
.text:00403BA6                 cmp     byte ptr [eax+20h], 0
.text:00403BAA                 jz      short loc_403BE0
.text:00403BAC                 cmp     [ebp+var_70], 1
.text:00403BB0                 ja      loc_404980
.text:00403BB6                 cmp     [ebp+var_241], 0
.text:00403BBD                 jz      loc_404B56
.text:00403BC3                 mov     eax, [eax+8]
.text:00403BC6                 cmp     eax, 3
.text:00403BC9                 jz      loc_404980
.text:00403BCF
.text:00403BCF loc_403BCF:                             ; CODE XREF: sub_403910+124C↓j
.text:00403BCF                 cmp     eax, 4
.text:00403BD2                 jz      loc_404980
.text:00403BD8                 nop
.text:00403BD9                 lea     esi, [esi+0]
.text:00403BE0
.text:00403BE0 loc_403BE0:                             ; CODE XREF: sub_403910+29A↑j
.text:00403BE0                 mov     ecx, [ebp+arg_18]
.text:00403BE3                 cmp     byte ptr [ecx+22h], 0
.text:00403BE7                 jz      short loc_403C01
.text:00403BE9                 mov     ebx, [ebp+var_248]
.text:00403BEF                 and     ebx, 0F000h
.text:00403BF5                 cmp     ebx, 4000h
.text:00403BFB                 jz      loc_404980
.text:00403C01
.text:00403C01 loc_403C01:                             ; CODE XREF: sub_403910+2D7↑j
.text:00403C01                                         ; sub_403910+10A5↓j
.text:00403C01                 mov     ebx, [ebp+arg_18]
.text:00403C04                 cmp     byte ptr [ebx+14h], 0
.text:00403C08                 jnz     loc_404734
.text:00403C0E
.text:00403C0E loc_403C0E:                             ; CODE XREF: sub_403910+FA8↓j
.text:00403C0E                 mov     [ebp+var_252], 1
.text:00403C15                 mov     eax, [ebp+var_248]
.text:00403C1B                 mov     [ebp+var_255], 1
.text:00403C22                 and     eax, 0F000h
.text:00403C27                 cmp     eax, 4000h
.text:00403C2C                 jz      loc_404550
.text:00403C32                 mov     esi, [ebp+arg_18]
.text:00403C35                 cmp     byte ptr [esi+2Ch], 0
.text:00403C39                 jz      loc_404165
.text:00403C3F                 mov     [ebp+var_255], 0
.text:00403C46                 mov     edx, [ebp+Str2]
.text:00403C49                 cmp     byte ptr [edx], 2Fh ; '/'
.text:00403C4C                 jz      short loc_403C9D
.text:00403C4E                 mov     edi, [ebp+FileName]
.text:00403C51                 mov     esi, offset asc_403338 ; "."
.text:00403C56                 mov     [esp+298h+Format], edi ; void *
.text:00403C59                 call    sub_40A1B0
.text:00403C5E                 mov     [ebp+Block], eax
.text:00403C64                 mov     edi, eax
.text:00403C66                 mov     ecx, 2
.text:00403C6B                 mov     [ebp+var_261], 0
.text:00403C72                 cld
.text:00403C73                 repe cmpsb
.text:00403C75                 jnz     loc_4040D6
.text:00403C7B
.text:00403C7B loc_403C7B:                             ; CODE XREF: sub_403910+7DE↓j
.text:00403C7B                                         ; sub_403910+7FE↓j ...
.text:00403C7B                 mov     [ebp+var_261], 1
.text:00403C82
.text:00403C82 loc_403C82:                             ; CODE XREF: sub_403910+824↓j
.text:00403C82                                         ; sub_403910+84A↓j
.text:00403C82                 mov     ebx, [ebp+Block]
.text:00403C88                 mov     [esp+298h+Format], ebx ; Block
.text:00403C8B                 call    free
.text:00403C90                 cmp     [ebp+var_261], 0
.text:00403C97                 jz      loc_40409B
.text:00403C9D
.text:00403C9D loc_403C9D:                             ; CODE XREF: sub_403910+33C↑j
.text:00403C9D                 mov     esi, [ebp+FileName]
.text:00403CA0                 mov     eax, [ebp+Str2]
.text:00403CA3                 mov     [esp+298h+AccessMode], esi ; char *
.text:00403CA7                 mov     [esp+298h+Format], eax ; String
.text:00403CAA                 call    sub_419480
.text:00403CAF                 test    eax, eax
.text:00403CB1                 jnz     loc_403F72
.text:00403CB7
.text:00403CB7 loc_403CB7:                             ; CODE XREF: sub_403910+8D8↓j
.text:00403CB7                                         ; sub_403910+9A3↓j ...
.text:00403CB7                 cmp     [ebp+var_241], 0
.text:00403CBE                 jnz     loc_403F50
.text:00403CC4
.text:00403CC4 loc_403CC4:                             ; CODE XREF: sub_403910+65D↓j
.text:00403CC4                 cmp     [ebp+var_255], 0
.text:00403CCB                 mov     ebx, 1
.text:00403CD0                 jz      loc_4039E2
.text:00403CD6                 mov     ecx, [ebp+arg_18]
.text:00403CD9                 cmp     byte ptr [ecx+1Fh], 0
.text:00403CDD                 jnz     loc_403EBE
.text:00403CE3
.text:00403CE3 loc_403CE3:                             ; CODE XREF: sub_403910+5E9↓j
.text:00403CE3                                         ; sub_403910+637↓j
.text:00403CE3                 mov     esi, [ebp+arg_18]
.text:00403CE6                 cmp     byte ptr [esi+1Dh], 0
.text:00403CEA                 jz      short loc_403D2F
.text:00403CEC                 movzx   eax, byte ptr [ebp+var_22B]
.text:00403CF3                 test    al, al
.text:00403CF5                 jnz     loc_403EB3
.text:00403CFB                 mov     ecx, [ebp+var_6C]
.text:00403CFE                 cmp     ecx, [ebp+var_DC]
.text:00403D04                 jz      loc_403E9F
.text:00403D0A                 mov     edx, [ebp+var_68]
.text:00403D0D
.text:00403D0D loc_403D0D:                             ; CODE XREF: sub_403910+598↓j
.text:00403D0D                                         ; sub_403910+5A9↓j
.text:00403D0D                 mov     [esp+298h+Size], edx ; int
.text:00403D11                 mov     edx, [ebp+FileName]
.text:00403D14                 mov     [ebp+var_254], 1
.text:00403D1B                 mov     [esp+298h+AccessMode], ecx ; int
.text:00403D1F                 mov     [esp+298h+Format], edx ; char *
.text:00403D22                 call    sub_408250
.text:00403D27                 test    eax, eax
.text:00403D29                 jnz     loc_403E2E
.text:00403D2F
.text:00403D2F loc_403D2F:                             ; CODE XREF: sub_403910+3DA↑j
.text:00403D2F                                         ; sub_403910+57A↓j ...
.text:00403D2F                 movzx   eax, byte ptr [ebp+var_22B]
.text:00403D36
.text:00403D36 loc_403D36:                             ; CODE XREF: sub_403910+59E↓j
.text:00403D36                 test    al, al
.text:00403D38                 jz      short loc_403D58
.text:00403D3A                 cmp     [ebp+var_253], 0
.text:00403D41                 jz      short loc_403D58
.text:00403D43                 cmp     [ebp+var_254], 0
.text:00403D4A                 jz      short loc_403D89
.text:00403D4C                 test    [ebp+var_248], 0FE00h
.text:00403D56                 jz      short loc_403D89
.text:00403D58
.text:00403D58 loc_403D58:                             ; CODE XREF: sub_403910+428↑j
.text:00403D58                                         ; sub_403910+431↑j
.text:00403D58                 mov     esi, [ebp+arg_18]
.text:00403D5B                 movzx   ecx, byte ptr [esi+1Eh]
.text:00403D5F                 test    cl, cl
.text:00403D61                 jnz     short loc_403D67
.text:00403D63                 test    al, al
.text:00403D65                 jz      short loc_403D89
.text:00403D67
.text:00403D67 loc_403D67:                             ; CODE XREF: sub_403910+451↑j
.text:00403D67                 mov     edx, [ebp+arg_18]
.text:00403D6A                 cmp     byte ptr [edx+4], 0
.text:00403D6E                 jnz     short loc_403D95
.text:00403D70                 mov     eax, [ebp+var_248]
.text:00403D76                 and     eax, 0F000h
.text:00403D7B                 cmp     eax, 8000h
.text:00403D80                 jz      short loc_403D95
.text:00403D82                 cmp     eax, 4000h
.text:00403D87                 jz      short loc_403D95
.text:00403D89
.text:00403D89 loc_403D89:                             ; CODE XREF: sub_403910+43A↑j
.text:00403D89                                         ; sub_403910+446↑j ...
.text:00403D89                 movzx   ebx, [ebp+var_252]
.text:00403D90                 jmp     loc_4039E2
.text:00403D95 ; ---------------------------------------------------------------------------
.text:00403D95
.text:00403D95 loc_403D95:                             ; CODE XREF: sub_403910+45E↑j
.text:00403D95                                         ; sub_403910+470↑j ...
.text:00403D95                 mov     eax, [ebp+arg_18]
.text:00403D98                 mov     edx, [ebp+var_248]
.text:00403D9E                 cmp     byte ptr [eax+23h], 0
.text:00403DA2                 jz      short loc_403E0E
.text:00403DA4                 movzx   eax, word ptr [eax+24h]
.text:00403DA8
.text:00403DA8 loc_403DA8:                             ; CODE XREF: sub_403910+519↓j
.text:00403DA8                 mov     ecx, [ebp+FileName]
.text:00403DAB                 movzx   esi, ax
.text:00403DAE                 mov     [esp+298h+AccessMode], esi ; AccessMode
.text:00403DB2                 mov     [esp+298h+Format], ecx ; FileName
.text:00403DB5                 call    _chmod
.text:00403DBA                 test    eax, eax
.text:00403DBC                 jz      short loc_403D89
.text:00403DBE                 mov     ecx, [ebp+FileName]
.text:00403DC1                 mov     [esp+298h+Format], ecx ; char *
.text:00403DC4                 call    sub_40AD30
.text:00403DC9                 mov     [esp+298h+Format], offset aSettingPermiss ; "setting permissions for %s"
.text:00403DD0                 mov     ebx, eax
.text:00403DD2                 call    ds:libintl_gettext
.text:00403DD8                 mov     edi, eax
.text:00403DDA                 call    _errno
.text:00403DDF                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00403DE3                 mov     [esp+298h+Size], edi ; char *
.text:00403DE7                 mov     edx, [eax]
.text:00403DE9                 mov     [esp+298h+Format], 0 ; Code
.text:00403DF0                 mov     [esp+298h+AccessMode], edx ; ErrorMessage
.text:00403DF4                 call    sub_415220
.text:00403DF9                 mov     eax, [ebp+arg_18]
.text:00403DFC                 test    dword ptr [eax+20h], 0FF00FF00h
.text:00403E03                 jnz     loc_4039E0
.text:00403E09                 jmp     loc_403D89
.text:00403E0E ; ---------------------------------------------------------------------------
.text:00403E0E
.text:00403E0E loc_403E0E:                             ; CODE XREF: sub_403910+492↑j
.text:00403E0E                 mov     eax, [ebp+arg_18]
.text:00403E11                 cmp     byte ptr [eax+14h], 0
.text:00403E15                 jnz     short loc_403E27
.text:00403E17                 test    cl, cl
.text:00403E19                 jnz     short loc_403E27
.text:00403E1B                 movzx   edi, word ptr [eax+2Eh]
.text:00403E1F                 and     edx, edi
.text:00403E21                 and     edx, 0F3FFh
.text:00403E27
.text:00403E27 loc_403E27:                             ; CODE XREF: sub_403910+505↑j
.text:00403E27                                         ; sub_403910+509↑j
.text:00403E27                 mov     eax, edx
.text:00403E29                 jmp     loc_403DA8
.text:00403E2E ; ---------------------------------------------------------------------------
.text:00403E2E
.text:00403E2E loc_403E2E:                             ; CODE XREF: sub_403910+419↑j
.text:00403E2E                 call    _errno
.text:00403E33                 cmp     dword ptr [eax], 1
.text:00403E36                 jz      short loc_403E8F
.text:00403E38                 call    _errno
.text:00403E3D                 cmp     dword ptr [eax], 16h
.text:00403E40                 jz      short loc_403E8F
.text:00403E42
.text:00403E42 loc_403E42:                             ; CODE XREF: sub_403910+58D↓j
.text:00403E42                 mov     eax, [ebp+FileName]
.text:00403E45                 mov     [esp+298h+Format], eax ; char *
.text:00403E48                 call    sub_40AD30
.text:00403E4D                 mov     [esp+298h+Format], offset aFailedToPreser ; "failed to preserve ownership for %s"
.text:00403E54                 mov     ebx, eax
.text:00403E56                 call    ds:libintl_gettext
.text:00403E5C                 mov     edi, eax
.text:00403E5E                 call    _errno
.text:00403E63                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00403E67                 mov     [esp+298h+Size], edi ; char *
.text:00403E6B                 mov     esi, [eax]
.text:00403E6D                 mov     [esp+298h+Format], 0 ; Code
.text:00403E74                 mov     [esp+298h+AccessMode], esi ; ErrorMessage
.text:00403E78                 call    sub_415220
.text:00403E7D                 mov     ebx, [ebp+arg_18]
.text:00403E80                 cmp     byte ptr [ebx+21h], 0
.text:00403E84                 jnz     loc_4039E0
.text:00403E8A                 jmp     loc_403D2F
.text:00403E8F ; ---------------------------------------------------------------------------
.text:00403E8F
.text:00403E8F loc_403E8F:                             ; CODE XREF: sub_403910+526↑j
.text:00403E8F                                         ; sub_403910+530↑j
.text:00403E8F                 mov     ecx, [ebp+arg_18]
.text:00403E92                 mov     edi, [ecx+18h]
.text:00403E95                 test    edi, edi
.text:00403E97                 jnz     loc_403D2F
.text:00403E9D                 jmp     short loc_403E42
.text:00403E9F ; ---------------------------------------------------------------------------
.text:00403E9F
.text:00403E9F loc_403E9F:                             ; CODE XREF: sub_403910+3F4↑j
.text:00403E9F                 mov     edx, [ebp+var_68]
.text:00403EA2                 cmp     edx, [ebp+var_D8]
.text:00403EA8                 jnz     loc_403D0D
.text:00403EAE                 jmp     loc_403D36
.text:00403EB3 ; ---------------------------------------------------------------------------
.text:00403EB3
.text:00403EB3 loc_403EB3:                             ; CODE XREF: sub_403910+3E5↑j
.text:00403EB3                 mov     edx, [ebp+var_68]
.text:00403EB6                 mov     ecx, [ebp+var_6C]
.text:00403EB9                 jmp     loc_403D0D
.text:00403EBE ; ---------------------------------------------------------------------------
.text:00403EBE
.text:00403EBE loc_403EBE:                             ; CODE XREF: sub_403910+3CD↑j
.text:00403EBE                 mov     ebx, [ebp+var_50]
.text:00403EC1                 lea     edx, [ebp+var_22B+3]
.text:00403EC7                 mov     ecx, [ebp+var_4C]
.text:00403ECA                 mov     [esp+298h+AccessMode], edx ; int
.text:00403ECE                 mov     esi, [ebp+var_48]
.text:00403ED1                 mov     edi, [ebp+var_44]
.text:00403ED4                 mov     [ebp+var_22B+3], ebx
.text:00403EDA                 mov     ebx, [ebp+FileName]
.text:00403EDD                 mov     [ebp+var_224], ecx
.text:00403EE3                 mov     [ebp+var_220], esi
.text:00403EE9                 mov     [ebp+var_21C], edi
.text:00403EEF                 mov     [esp+298h+Format], ebx ; char *
.text:00403EF2                 call    sub_40A020
.text:00403EF7                 test    eax, eax
.text:00403EF9                 jz      loc_403CE3
.text:00403EFF                 mov     eax, [ebp+FileName]
.text:00403F02                 mov     [esp+298h+Format], eax ; char *
.text:00403F05                 call    sub_40AD30
.text:00403F0A                 mov     [esp+298h+Format], offset aPreservingTime ; "preserving times for %s"
.text:00403F11                 mov     ebx, eax
.text:00403F13                 call    ds:libintl_gettext
.text:00403F19                 mov     edi, eax
.text:00403F1B                 call    _errno
.text:00403F20                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00403F24                 mov     [esp+298h+Size], edi ; char *
.text:00403F28                 mov     edi, [eax]
.text:00403F2A                 mov     [esp+298h+Format], 0 ; Code
.text:00403F31                 mov     [esp+298h+AccessMode], edi ; ErrorMessage
.text:00403F35                 call    sub_415220
.text:00403F3A                 mov     edx, [ebp+arg_18]
.text:00403F3D                 cmp     byte ptr [edx+21h], 0
.text:00403F41                 jnz     loc_4039E0
.text:00403F47                 jmp     loc_403CE3
.text:00403F47 ; ---------------------------------------------------------------------------
.text:00403F4C                 align 10h
.text:00403F50
.text:00403F50 loc_403F50:                             ; CODE XREF: sub_403910+3AE↑j
.text:00403F50                 mov     [esp+298h+Size], 0 ; int
.text:00403F58                 mov     eax, [ebp+FileName]
.text:00403F5B                 mov     esi, [ebp+arg_18]
.text:00403F5E                 mov     [esp+298h+AccessMode], eax ; char *
.text:00403F62                 mov     edi, [esi+34h]
.text:00403F65                 mov     [esp+298h+Format], edi ; int
.text:00403F68                 call    sub_4064D0
.text:00403F6D                 jmp     loc_403CC4
.text:00403F72 ; ---------------------------------------------------------------------------
.text:00403F72
.text:00403F72 loc_403F72:                             ; CODE XREF: sub_403910+3A1↑j
.text:00403F72                 mov     [esp+298h+Format], 1 ; int
.text:00403F79                 mov     edx, [ebp+Str2]
.text:00403F7C                 mov     [esp+298h+AccessMode], edx ; char *
.text:00403F80                 call    sub_40AD00
.text:00403F85                 mov     [esp+298h+Format], 0 ; int
.text:00403F8C                 mov     ecx, [ebp+FileName]
.text:00403F8F                 mov     edi, eax
.text:00403F91                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00403F95                 call    sub_40AD00
.text:00403F9A                 mov     [esp+298h+Format], offset aCannotCreateSy ; "cannot create symbolic link %s to %s"
.text:00403FA1
.text:00403FA1 loc_403FA1:                             ; CODE XREF: sub_403910+112B↓j
.text:00403FA1                 mov     esi, eax
.text:00403FA3                 call    ds:libintl_gettext
.text:00403FA9                 mov     ebx, eax
.text:00403FAB                 call    _errno
.text:00403FB0                 mov     [esp+298h+var_288], edi
.text:00403FB4                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:00403FB8                 mov     [esp+298h+Size], ebx ; char *
.text:00403FBC                 mov     ebx, [eax]
.text:00403FBE                 mov     [esp+298h+AccessMode], ebx ; ErrorMessage
.text:00403FC2
.text:00403FC2 loc_403FC2:                             ; CODE XREF: sub_403910+1241↓j
.text:00403FC2                 mov     [esp+298h+Format], 0 ; Code
.text:00403FC9                 call    sub_415220
.text:00403FCE
.text:00403FCE loc_403FCE:                             ; CODE XREF: sub_403910+7C1↓j
.text:00403FCE                                         ; sub_403910+8DE↓j ...
.text:00403FCE                 mov     eax, [ebp+lpExistingFileName]
.text:00403FD4                 test    eax, eax
.text:00403FD6                 jz      loc_404076
.text:00403FDC
.text:00403FDC loc_403FDC:                             ; CODE XREF: sub_403910+786↓j
.text:00403FDC                 mov     esi, [ebp+lpFileName]
.text:00403FE2                 test    esi, esi
.text:00403FE4                 jz      loc_4039E0
.text:00403FEA                 mov     edi, [ebp+FileName]
.text:00403FED                 mov     eax, [ebp+lpFileName]
.text:00403FF3                 mov     [esp+298h+AccessMode], edi ; lpFileName
.text:00403FF7                 mov     [esp+298h+Format], eax ; LPCSTR
.text:00403FFA                 call    sub_4199A0
.text:00403FFF                 test    eax, eax
.text:00404001                 jnz     short loc_40405F
.text:00404003                 mov     ecx, [ebp+arg_18]
.text:00404006                 cmp     byte ptr [ecx+31h], 0
.text:0040400A                 jz      loc_4039E0
.text:00404010                 mov     [esp+298h+Format], 1 ; int
.text:00404017                 mov     eax, [ebp+FileName]
.text:0040401A                 mov     [esp+298h+AccessMode], eax ; char *
.text:0040401E                 call    sub_40AD00
.text:00404023                 mov     [esp+298h+Format], 0 ; int
.text:0040402A                 mov     esi, [ebp+lpFileName]
.text:00404030                 mov     ebx, eax
.text:00404032                 mov     [esp+298h+AccessMode], esi ; char *
.text:00404036                 call    sub_40AD00
.text:0040403B                 mov     [esp+298h+Format], offset aSSUnbackup ; "%s -> %s (unbackup)\n"
.text:00404042                 mov     edi, eax
.text:00404044                 call    ds:libintl_gettext
.text:0040404A                 mov     [esp+298h+Size], ebx
.text:0040404E                 mov     [esp+298h+AccessMode], edi
.text:00404052                 mov     [esp+298h+Format], eax ; Format
.text:00404055                 call    printf
.text:0040405A                 jmp     loc_4039E0
.text:0040405F ; ---------------------------------------------------------------------------
.text:0040405F
.text:0040405F loc_40405F:                             ; CODE XREF: sub_403910+6F1↑j
.text:0040405F                 mov     edx, [ebp+FileName]
.text:00404062                 mov     [esp+298h+Format], edx ; char *
.text:00404065                 call    sub_40AD30
.text:0040406A                 mov     [esp+298h+Format], offset aCannotUnBackup ; "cannot un-backup %s"
.text:00404071                 jmp     loc_4039B7
.text:00404076 ; ---------------------------------------------------------------------------
.text:00404076
.text:00404076 loc_404076:                             ; CODE XREF: sub_403910+6C6↑j
.text:00404076                 mov     ecx, [ebp+var_78]
.text:00404079                 mov     ebx, [ebp+var_74]
.text:0040407C                 mov     edx, [ebp+var_80]
.text:0040407F                 mov     [esp+298h+Size], ecx
.text:00404083                 mov     edi, [ebp+var_7C]
.text:00404086                 mov     dword ptr [esp+298h+var_28C], ebx
.text:0040408A                 mov     [esp+298h+Format], edx
.text:0040408D                 mov     [esp+298h+AccessMode], edi
.text:00404091                 call    sub_4065C0
.text:00404096                 jmp     loc_403FDC
.text:0040409B ; ---------------------------------------------------------------------------
.text:0040409B
.text:0040409B loc_40409B:                             ; CODE XREF: sub_403910+387↑j
.text:0040409B                 mov     edi, [ebp+FileName]
.text:0040409E                 mov     [esp+298h+Format], edi ; char *
.text:004040A1                 call    sub_40AD30
.text:004040A6                 mov     [esp+298h+Format], offset aSCanMakeRelati ; "%s: can make relative symbolic links on"...
.text:004040AD
.text:004040AD loc_4040AD:                             ; CODE XREF: sub_403910+955↓j
.text:004040AD                                         ; sub_403910+E1F↓j
.text:004040AD                 mov     ebx, eax
.text:004040AF                 call    ds:libintl_gettext
.text:004040B5                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:004040B9                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:004040C1                 mov     [esp+298h+Size], eax ; char *
.text:004040C5
.text:004040C5 loc_4040C5:                             ; CODE XREF: sub_403910+A03↓j
.text:004040C5                 mov     [esp+298h+Format], 0 ; Code
.text:004040CC                 call    sub_415220
.text:004040D1                 jmp     loc_403FCE
.text:004040D6 ; ---------------------------------------------------------------------------
.text:004040D6
.text:004040D6 loc_4040D6:                             ; CODE XREF: sub_403910+365↑j
.text:004040D6                 mov     [esp+298h+Format], offset asc_403338 ; "."
.text:004040DD                 lea     ecx, [ebp+var_1A8]
.text:004040E3                 mov     [esp+298h+AccessMode], ecx ; int
.text:004040E7                 call    sub_418A10
.text:004040EC                 test    eax, eax
.text:004040EE                 jnz     loc_403C7B
.text:004040F4                 mov     eax, [ebp+Block]
.text:004040FA                 lea     ebx, [ebp+var_218]
.text:00404100                 mov     [esp+298h+AccessMode], ebx ; int
.text:00404104                 mov     [esp+298h+Format], eax ; char *
.text:00404107                 call    sub_418A10
.text:0040410C                 test    eax, eax
.text:0040410E                 jnz     loc_403C7B
.text:00404114                 mov     edx, [ebp+var_19C]
.text:0040411A                 mov     esi, [ebp+var_1A0]
.text:00404120                 mov     edi, [ebp+var_210]
.text:00404126                 mov     ecx, [ebp+var_20C]
.text:0040412C                 mov     eax, edx
.text:0040412E                 xor     edi, esi
.text:00404130                 xor     eax, ecx
.text:00404132                 or      eax, edi
.text:00404134                 jnz     loc_403C82
.text:0040413A                 mov     edx, [ebp+var_194]
.text:00404140                 mov     esi, [ebp+var_198]
.text:00404146                 mov     edi, [ebp+var_208]
.text:0040414C                 mov     ecx, [ebp+var_204]
.text:00404152                 mov     eax, edx
.text:00404154                 xor     edi, esi
.text:00404156                 xor     eax, ecx
.text:00404158                 or      eax, edi
.text:0040415A                 jnz     loc_403C82
.text:00404160                 jmp     loc_403C7B
.text:00404165 ; ---------------------------------------------------------------------------
.text:00404165
.text:00404165 loc_404165:                             ; CODE XREF: sub_403910+329↑j
.text:00404165                 mov     edi, [ebp+arg_18]
.text:00404168                 cmp     byte ptr [edi+0Eh], 0
.text:0040416C                 jnz     loc_404518
.text:00404172                 cmp     eax, 8000h
.text:00404177                 jz      short loc_404198
.text:00404179                 mov     ecx, [ebp+arg_18]
.text:0040417C                 cmp     byte ptr [ecx+4], 0
.text:00404180                 jz      loc_404215
.text:00404186                 cmp     eax, 4000h
.text:0040418B                 jz      loc_404215
.text:00404191                 cmp     eax, 0A000h
.text:00404196                 jz      short loc_404215
.text:00404198
.text:00404198 loc_404198:                             ; CODE XREF: sub_403910+867↑j
.text:00404198                 mov     [ebp+var_253], 1
.text:0040419F                 mov     ecx, [ebp+arg_18]
.text:004041A2                 mov     eax, [ebp+var_248]
.text:004041A8                 cmp     byte ptr [ecx+23h], 0
.text:004041AC                 jz      short loc_4041F3
.text:004041AE                 movzx   eax, word ptr [ecx+24h]
.text:004041B2
.text:004041B2 loc_4041B2:                             ; CODE XREF: sub_403910+8EA↓j
.text:004041B2                                         ; sub_403910+8F0↓j ...
.text:004041B2                 movzx   ebx, ax
.text:004041B5                 mov     esi, [ebp+arg_18]
.text:004041B8                 lea     edx, [ebp+var_88]
.text:004041BE                 mov     [esp+298h+var_284], edx ; int
.text:004041C2                 mov     eax, [ebp+FileName]
.text:004041C5                 lea     ecx, [ebp+var_22B]
.text:004041CB                 mov     [esp+298h+var_288], ecx ; int
.text:004041CF                 mov     edi, [ebp+Str2]
.text:004041D2                 mov     dword ptr [esp+298h+var_28C], ebx ; __int16
.text:004041D6                 mov     [esp+298h+Size], esi ; int
.text:004041DA                 mov     [esp+298h+AccessMode], eax ; LPCSTR
.text:004041DE                 mov     [esp+298h+Format], edi ; char *
.text:004041E1                 call    sub_4058C0
.text:004041E6                 test    al, al
.text:004041E8                 jnz     loc_403CB7
.text:004041EE                 jmp     loc_403FCE
.text:004041F3 ; ---------------------------------------------------------------------------
.text:004041F3
.text:004041F3 loc_4041F3:                             ; CODE XREF: sub_403910+89C↑j
.text:004041F3                 mov     edx, [ebp+arg_18]
.text:004041F6                 cmp     byte ptr [edx+14h], 0
.text:004041FA                 jnz     short loc_4041B2
.text:004041FC                 cmp     byte ptr [edx+1Eh], 0
.text:00404200                 jnz     short loc_4041B2
.text:00404202                 movzx   eax, word ptr [edx+2Eh]
.text:00404206                 mov     ebx, [ebp+var_248]
.text:0040420C                 and     eax, ebx
.text:0040420E                 and     eax, 0F3FFh
.text:00404213                 jmp     short loc_4041B2
.text:00404215 ; ---------------------------------------------------------------------------
.text:00404215
.text:00404215 loc_404215:                             ; CODE XREF: sub_403910+870↑j
.text:00404215                                         ; sub_403910+87B↑j ...
.text:00404215                 mov     eax, [ebp+var_248]
.text:0040421B                 and     eax, 0F000h
.text:00404220                 cmp     eax, 1000h
.text:00404225                 jz      loc_4044B2
.text:0040422B                 cmp     eax, 6000h
.text:00404230                 jz      loc_40442B
.text:00404236                 cmp     eax, 2000h
.text:0040423B                 jz      loc_40442B
.text:00404241                 cmp     eax, 0C000h
.text:00404246                 jz      loc_40442B
.text:0040424C                 cmp     eax, 0A000h
.text:00404251                 jz      short loc_40426A
.text:00404253                 mov     ebx, [ebp+Str2]
.text:00404256                 mov     [esp+298h+Format], ebx ; char *
.text:00404259                 call    sub_40AD30
.text:0040425E                 mov     [esp+298h+Format], offset aSHasUnknownFil ; "%s has unknown file type"
.text:00404265                 jmp     loc_4040AD
.text:0040426A ; ---------------------------------------------------------------------------
.text:0040426A
.text:0040426A loc_40426A:                             ; CODE XREF: sub_403910+941↑j
.text:0040426A                 mov     esi, [ebp+var_58]
.text:0040426D                 mov     eax, [ebp+Str2]
.text:00404270                 mov     [esp+298h+AccessMode], esi ; int
.text:00404274                 mov     [esp+298h+Format], eax ; char *
.text:00404277                 call    sub_40AE10
.text:0040427C                 test    eax, eax
.text:0040427E                 mov     edi, eax
.text:00404280                 jz      loc_404401
.text:00404286                 mov     [esp+298h+Format], eax ; String
.text:00404289                 mov     ebx, [ebp+FileName]
.text:0040428C                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00404290                 call    sub_419480
.text:00404295                 test    eax, eax
.text:00404297                 jnz     loc_404328
.text:0040429D                 mov     [esp+298h+Format], edi ; Block
.text:004042A0                 call    free
.text:004042A5
.text:004042A5 loc_4042A5:                             ; CODE XREF: sub_403910+A61↓j
.text:004042A5                 mov     [ebp+var_255], 0
.text:004042AC                 mov     edx, [ebp+arg_18]
.text:004042AF                 cmp     byte ptr [edx+1Dh], 0
.text:004042B3                 jz      loc_403CB7
.text:004042B9                 mov     esi, [ebp+var_68]
.text:004042BC                 mov     edi, [ebp+var_6C]
.text:004042BF                 mov     ebx, [ebp+FileName]
.text:004042C2                 mov     [esp+298h+Size], esi
.text:004042C6                 mov     [esp+298h+AccessMode], edi
.text:004042CA                 mov     [esp+298h+Format], ebx
.text:004042CD                 call    sub_419970
.text:004042D2                 test    eax, eax
.text:004042D4                 jz      loc_403CB7
.text:004042DA                 call    _errno
.text:004042DF                 cmp     dword ptr [eax], 1
.text:004042E2                 jz      short loc_404318
.text:004042E4                 call    _errno
.text:004042E9                 cmp     dword ptr [eax], 16h
.text:004042EC                 jz      short loc_404318
.text:004042EE
.text:004042EE loc_4042EE:                             ; CODE XREF: sub_403910+A16↓j
.text:004042EE                 mov     [esp+298h+Format], offset aFailedToPreser ; "failed to preserve ownership for %s"
.text:004042F5                 call    ds:libintl_gettext
.text:004042FB                 mov     ebx, eax
.text:004042FD                 call    _errno
.text:00404302                 mov     edx, [ebp+FileName]
.text:00404305                 mov     dword ptr [esp+298h+var_28C], edx
.text:00404309
.text:00404309 loc_404309:                             ; CODE XREF: sub_403910+B16↓j
.text:00404309                 mov     [esp+298h+Size], ebx
.text:0040430D                 mov     edi, [eax]
.text:0040430F
.text:0040430F loc_40430F:                             ; CODE XREF: sub_403910+A8F↓j
.text:0040430F                 mov     [esp+298h+AccessMode], edi
.text:00404313                 jmp     loc_4040C5
.text:00404318 ; ---------------------------------------------------------------------------
.text:00404318
.text:00404318 loc_404318:                             ; CODE XREF: sub_403910+9D2↑j
.text:00404318                                         ; sub_403910+9DC↑j
.text:00404318                 mov     ecx, [ebp+arg_18]
.text:0040431B                 mov     eax, [ecx+18h]
.text:0040431E                 test    eax, eax
.text:00404320                 jnz     loc_403CB7
.text:00404326                 jmp     short loc_4042EE
.text:00404328 ; ---------------------------------------------------------------------------
.text:00404328
.text:00404328 loc_404328:                             ; CODE XREF: sub_403910+987↑j
.text:00404328                 call    _errno
.text:0040432D                 mov     [ebp+var_269], 0
.text:00404334                 mov     ecx, [ebp+arg_18]
.text:00404337                 mov     edx, [eax]
.text:00404339                 cmp     byte ptr [ecx+30h], 0
.text:0040433D                 mov     [ebp+var_268], edx
.text:00404343                 jz      short loc_404362
.text:00404345                 cmp     byte ptr [ebp+var_22B], 0
.text:0040434C                 jnz     short loc_404362
.text:0040434E                 mov     esi, [ebp+var_F8]
.text:00404354                 and     esi, 0F000h
.text:0040435A                 cmp     esi, 0A000h
.text:00404360                 jz      short loc_4043A4
.text:00404362
.text:00404362 loc_404362:                             ; CODE XREF: sub_403910+A33↑j
.text:00404362                                         ; sub_403910+A3C↑j ...
.text:00404362                 mov     [esp+298h+Format], edi ; Block
.text:00404365                 call    free
.text:0040436A                 cmp     [ebp+var_269], 0
.text:00404371                 jnz     loc_4042A5
.text:00404377                 mov     ecx, [ebp+FileName]
.text:0040437A                 mov     [esp+298h+Format], ecx ; char *
.text:0040437D                 call    sub_40AD30
.text:00404382                 mov     [esp+298h+Format], offset aCannotCreateSy_0 ; "cannot create symbolic link %s"
.text:00404389                 mov     esi, eax
.text:0040438B                 call    ds:libintl_gettext
.text:00404391                 mov     dword ptr [esp+298h+var_28C], esi
.text:00404395                 mov     edi, [ebp+var_268]
.text:0040439B                 mov     [esp+298h+Size], eax
.text:0040439F                 jmp     loc_40430F
.text:004043A4 ; ---------------------------------------------------------------------------
.text:004043A4
.text:004043A4 loc_4043A4:                             ; CODE XREF: sub_403910+A50↑j
.text:004043A4                 mov     [esp+298h+Format], edi ; Str
.text:004043A7                 xor     ebx, ebx
.text:004043A9                 call    strlen
.text:004043AE                 mov     edx, [ebp+var_C4]
.text:004043B4                 mov     ecx, eax
.text:004043B6                 mov     eax, [ebp+var_C8]
.text:004043BC                 mov     esi, edx
.text:004043BE                 xor     esi, ebx
.text:004043C0                 xor     eax, ecx
.text:004043C2                 or      esi, eax
.text:004043C4                 jnz     short loc_404362
.text:004043C6                 mov     ebx, [ebp+var_C8]
.text:004043CC                 mov     eax, [ebp+FileName]
.text:004043CF                 mov     [esp+298h+AccessMode], ebx ; int
.text:004043D3                 mov     [esp+298h+Format], eax ; char *
.text:004043D6                 call    sub_40AE10
.text:004043DB                 mov     [esp+298h+Format], eax ; Str1
.text:004043DE                 mov     ebx, eax
.text:004043E0                 mov     [esp+298h+AccessMode], edi ; Str2
.text:004043E4                 call    strcmp
.text:004043E9                 test    eax, eax
.text:004043EB                 jnz     short loc_4043F4
.text:004043ED                 mov     [ebp+var_269], 1
.text:004043F4
.text:004043F4 loc_4043F4:                             ; CODE XREF: sub_403910+ADB↑j
.text:004043F4                 mov     [esp+298h+Format], ebx ; Block
.text:004043F7                 call    free
.text:004043FC                 jmp     loc_404362
.text:00404401 ; ---------------------------------------------------------------------------
.text:00404401
.text:00404401 loc_404401:                             ; CODE XREF: sub_403910+970↑j
.text:00404401                 mov     edi, [ebp+Str2]
.text:00404404                 mov     [esp+298h+Format], edi ; char *
.text:00404407                 call    sub_40AD30
.text:0040440C                 mov     [esp+298h+Format], offset aCannotReadSymb ; "cannot read symbolic link %s"
.text:00404413
.text:00404413 loc_404413:                             ; CODE XREF: sub_403910+B7E↓j
.text:00404413                                         ; sub_403910+BE1↓j ...
.text:00404413                 mov     esi, eax
.text:00404415                 call    ds:libintl_gettext
.text:0040441B                 mov     ebx, eax
.text:0040441D                 call    _errno
.text:00404422                 mov     dword ptr [esp+298h+var_28C], esi
.text:00404426                 jmp     loc_404309
.text:0040442B ; ---------------------------------------------------------------------------
.text:0040442B
.text:0040442B loc_40442B:                             ; CODE XREF: sub_403910+920↑j
.text:0040442B                                         ; sub_403910+92B↑j ...
.text:0040442B                 mov     ecx, [ebp+arg_18]
.text:0040442E                 mov     eax, [ebp+var_248]
.text:00404434                 cmp     byte ptr [ecx+23h], 0
.text:00404438                 jz      short loc_404490
.text:0040443A                 movzx   eax, word ptr [ecx+24h]
.text:0040443E
.text:0040443E loc_40443E:                             ; CODE XREF: sub_403910+B87↓j
.text:0040443E                                         ; sub_403910+B8D↓j ...
.text:0040443E                 mov     [esp+298h+Format], 0
.text:00404445                 mov     ecx, [ebp+var_60]
.text:00404448                 movzx   esi, ax
.text:0040444B                 mov     [esp+298h+Size], esi
.text:0040444F                 mov     ebx, [ebp+var_5C]
.text:00404452                 lea     edi, [ebp+var_238]
.text:00404458                 mov     dword ptr [esp+298h+var_28C], edi
.text:0040445C                 mov     edx, [ebp+FileName]
.text:0040445F                 mov     [ebp+var_238], ecx
.text:00404465                 mov     [ebp+var_234], ebx
.text:0040446B                 mov     [esp+298h+AccessMode], edx
.text:0040446F                 call    sub_4196F0
.text:00404474                 test    eax, eax
.text:00404476                 jz      loc_403CB7
.text:0040447C                 mov     edx, [ebp+FileName]
.text:0040447F                 mov     [esp+298h+Format], edx ; char *
.text:00404482                 call    sub_40AD30
.text:00404487                 mov     [esp+298h+Format], offset aCannotCreateSp ; "cannot create special file %s"
.text:0040448E                 jmp     short loc_404413
.text:00404490 ; ---------------------------------------------------------------------------
.text:00404490
.text:00404490 loc_404490:                             ; CODE XREF: sub_403910+B28↑j
.text:00404490                 mov     edx, [ebp+arg_18]
.text:00404493                 cmp     byte ptr [edx+14h], 0
.text:00404497                 jnz     short loc_40443E
.text:00404499                 cmp     byte ptr [edx+1Eh], 0
.text:0040449D                 jnz     short loc_40443E
.text:0040449F                 movzx   eax, word ptr [edx+2Eh]
.text:004044A3                 mov     ecx, [ebp+var_248]
.text:004044A9                 and     eax, ecx
.text:004044AB                 and     eax, 0F3FFh
.text:004044B0                 jmp     short loc_40443E
.text:004044B2 ; ---------------------------------------------------------------------------
.text:004044B2
.text:004044B2 loc_4044B2:                             ; CODE XREF: sub_403910+915↑j
.text:004044B2                 mov     edx, [ebp+arg_18]
.text:004044B5                 mov     eax, [ebp+var_248]
.text:004044BB                 cmp     byte ptr [edx+23h], 0
.text:004044BF                 jz      short loc_4044F6
.text:004044C1                 movzx   eax, word ptr [edx+24h]
.text:004044C5
.text:004044C5 loc_4044C5:                             ; CODE XREF: sub_403910+BED↓j
.text:004044C5                                         ; sub_403910+BF3↓j ...
.text:004044C5                 mov     edi, [ebp+FileName]
.text:004044C8                 movzx   ebx, ax
.text:004044CB                 mov     [esp+298h+AccessMode], ebx ; __int16
.text:004044CF                 mov     [esp+298h+Format], edi ; char *
.text:004044D2                 call    sub_417820
.text:004044D7                 test    eax, eax
.text:004044D9                 jz      loc_403CB7
.text:004044DF                 mov     eax, [ebp+FileName]
.text:004044E2                 mov     [esp+298h+Format], eax ; char *
.text:004044E5                 call    sub_40AD30
.text:004044EA                 mov     [esp+298h+Format], offset aCannotCreateFi ; "cannot create fifo %s"
.text:004044F1                 jmp     loc_404413
.text:004044F6 ; ---------------------------------------------------------------------------
.text:004044F6
.text:004044F6 loc_4044F6:                             ; CODE XREF: sub_403910+BAF↑j
.text:004044F6                 mov     ecx, [ebp+arg_18]
.text:004044F9                 cmp     byte ptr [ecx+14h], 0
.text:004044FD                 jnz     short loc_4044C5
.text:004044FF                 cmp     byte ptr [ecx+1Eh], 0
.text:00404503                 jnz     short loc_4044C5
.text:00404505                 movzx   eax, word ptr [ecx+2Eh]
.text:00404509                 mov     esi, [ebp+var_248]
.text:0040450F                 and     eax, esi
.text:00404511                 and     eax, 0F3FFh
.text:00404516                 jmp     short loc_4044C5
.text:00404518 ; ---------------------------------------------------------------------------
.text:00404518
.text:00404518 loc_404518:                             ; CODE XREF: sub_403910+85C↑j
.text:00404518                 mov     [ebp+var_255], 0
.text:0040451F                 mov     esi, [ebp+FileName]
.text:00404522                 mov     eax, [ebp+Str2]
.text:00404525                 mov     [esp+298h+AccessMode], esi ; lpNewFileName
.text:00404529                 mov     [esp+298h+Format], eax ; lpExistingFileName
.text:0040452C                 call    sub_417600
.text:00404531                 test    eax, eax
.text:00404533                 jz      loc_403CB7
.text:00404539                 mov     edx, [ebp+FileName]
.text:0040453C                 mov     [esp+298h+Format], edx ; char *
.text:0040453F                 call    sub_40AD30
.text:00404544                 mov     [esp+298h+Format], offset aCannotCreateLi ; "cannot create link %s"
.text:0040454B                 jmp     loc_404413
.text:00404550 ; ---------------------------------------------------------------------------
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: sub_403910+31C↑j
.text:00404550                 mov     edi, [ebp+arg_14]
.text:00404553                 test    edi, edi
.text:00404555                 jz      short loc_4045AA
.text:00404557                 mov     edx, [ebp+var_80]
.text:0040455A                 mov     esi, [ebp+var_7C]
.text:0040455D                 mov     [ebp+var_278], edx
.text:00404563                 mov     [ebp+var_274], esi
.text:00404569                 lea     esi, [esi+0]
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_403910+C98↓j
.text:00404570                 mov     ebx, [edi+8]
.text:00404573                 mov     esi, [edi+0Ch]
.text:00404576                 mov     eax, [ebp+var_274]
.text:0040457C                 mov     ecx, [ebp+var_278]
.text:00404582                 xor     eax, esi
.text:00404584                 xor     ebx, ecx
.text:00404586                 or      eax, ebx
.text:00404588                 jnz     short loc_4045A4
.text:0040458A                 mov     ebx, [edi+14h]
.text:0040458D                 mov     ecx, [edi+10h]
.text:00404590                 mov     eax, [ebp+var_78]
.text:00404593                 mov     edx, [ebp+var_74]
.text:00404596                 mov     esi, ebx
.text:00404598                 xor     eax, ecx
.text:0040459A                 xor     esi, edx
.text:0040459C                 or      esi, eax
.text:0040459E                 jz      loc_40471D
.text:004045A4
.text:004045A4 loc_4045A4:                             ; CODE XREF: sub_403910+C78↑j
.text:004045A4                 mov     edi, [edi]
.text:004045A6                 test    edi, edi
.text:004045A8                 jnz     short loc_404570
.text:004045AA
.text:004045AA loc_4045AA:                             ; CODE XREF: sub_403910+C45↑j
.text:004045AA                 mov     [esp+298h+Format], 18h ; Size
.text:004045B1                 call    malloc
.text:004045B6                 cmp     byte ptr [ebp+var_22B], 0
.text:004045BD                 mov     esi, eax
.text:004045BF                 mov     ecx, [ebp+var_80]
.text:004045C2                 mov     ebx, [ebp+var_7C]
.text:004045C5                 mov     eax, [ebp+arg_14]
.text:004045C8                 mov     [esi+8], ecx
.text:004045CB                 mov     [esi+0Ch], ebx
.text:004045CE                 mov     edx, [ebp+var_78]
.text:004045D1                 mov     [esi], eax
.text:004045D3                 mov     edi, [ebp+var_74]
.text:004045D6                 mov     [esi+10h], edx
.text:004045D9                 mov     [esi+14h], edi
.text:004045DC                 jnz     short loc_4045F2
.text:004045DE                 mov     edi, [ebp+var_F8]
.text:004045E4                 and     edi, 0F000h
.text:004045EA                 cmp     edi, 4000h
.text:004045F0                 jz      short loc_40463E
.text:004045F2
.text:004045F2 loc_4045F2:                             ; CODE XREF: sub_403910+CCC↑j
.text:004045F2                 mov     eax, [ebp+arg_18]
.text:004045F5                 mov     ecx, [ebp+var_248]
.text:004045FB                 mov     edx, [ebp+FileName]
.text:004045FE                 movzx   ebx, word ptr [eax+2Eh]
.text:00404602                 mov     [esp+298h+Format], edx ; LPCSTR
.text:00404605                 and     ebx, ecx
.text:00404607                 or      ebx, 1C0h
.text:0040460D                 mov     [esp+298h+AccessMode], ebx ; AccessMode
.text:00404611                 call    sub_4177A0
.text:00404616                 test    eax, eax
.text:00404618                 jnz     loc_404706
.text:0040461E                 mov     edx, [ebp+FileName]
.text:00404621                 mov     [esp+298h+Format], edx ; char *
.text:00404624                 call    sub_406630
.text:00404629                 test    al, al
.text:0040462B                 jz      loc_403FCE
.text:00404631                 mov     ebx, [ebp+arg_18]
.text:00404634                 cmp     byte ptr [ebx+31h], 0
.text:00404638                 jnz     loc_4046C5
.text:0040463E
.text:0040463E loc_40463E:                             ; CODE XREF: sub_403910+CE0↑j
.text:0040463E                                         ; sub_403910+DF1↓j
.text:0040463E                 mov     edx, [ebp+arg_18]
.text:00404641                 cmp     byte ptr [edx+1Ch], 0
.text:00404645                 jz      short loc_404678
.text:00404647                 mov     ebx, [ebp+var_23C]
.text:0040464D                 or      ebx, [ebp+var_240]
.text:00404653                 jz      short loc_404678
.text:00404655                 mov     ebx, [ebp+var_74]
.text:00404658                 mov     edi, [ebp+var_78]
.text:0040465B                 mov     eax, [ebp+var_23C]
.text:00404661                 mov     ecx, [ebp+var_240]
.text:00404667                 xor     eax, ebx
.text:00404669                 xor     edi, ecx
.text:0040466B                 or      eax, edi
.text:0040466D                 mov     ebx, 1
.text:00404672                 jnz     loc_4039E2
.text:00404678
.text:00404678 loc_404678:                             ; CODE XREF: sub_403910+D35↑j
.text:00404678                                         ; sub_403910+D43↑j
.text:00404678                 movzx   edi, byte ptr [ebp+var_22B]
.text:0040467F                 mov     [esp+298h+var_288], esi ; int
.text:00404683                 lea     eax, [ebp+var_88]
.text:00404689                 mov     ebx, [ebp+arg_20]
.text:0040468C                 mov     dword ptr [esp+298h+var_28C], eax ; int
.text:00404690                 mov     ecx, [ebp+arg_18]
.text:00404693                 mov     edx, [ebp+FileName]
.text:00404696                 mov     [esp+298h+var_280], ebx ; int
.text:0040469A                 mov     esi, [ebp+Str2]
.text:0040469D                 mov     [esp+298h+var_284], ecx ; int
.text:004046A1                 mov     [esp+298h+Size], edi ; char
.text:004046A5                 mov     [esp+298h+AccessMode], edx ; int
.text:004046A9                 mov     [esp+298h+Format], esi ; LPCSTR
.text:004046AC                 call    sub_405630
.text:004046B1                 test    al, al
.text:004046B3                 jnz     loc_403CB7
.text:004046B9                 mov     [ebp+var_252], 0
.text:004046C0                 jmp     loc_403CB7
.text:004046C5 ; ---------------------------------------------------------------------------
.text:004046C5
.text:004046C5 loc_4046C5:                             ; CODE XREF: sub_403910+D28↑j
.text:004046C5                 mov     [esp+298h+Format], 1 ; int
.text:004046CC                 mov     ecx, [ebp+FileName]
.text:004046CF                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004046D3                 call    sub_40AD00
.text:004046D8                 mov     [esp+298h+Format], 0 ; int
.text:004046DF                 mov     edi, eax
.text:004046E1                 mov     eax, [ebp+Str2]
.text:004046E4                 mov     [esp+298h+AccessMode], eax ; char *
.text:004046E8                 call    sub_40AD00
.text:004046ED                 mov     [esp+298h+AccessMode], eax
.text:004046F1                 mov     [esp+298h+Size], edi
.text:004046F5                 mov     [esp+298h+Format], offset aSS_0 ; "%s -> %s\n"
.text:004046FC                 call    printf
.text:00404701                 jmp     loc_40463E
.text:00404706 ; ---------------------------------------------------------------------------
.text:00404706
.text:00404706 loc_404706:                             ; CODE XREF: sub_403910+D08↑j
.text:00404706                 mov     esi, [ebp+FileName]
.text:00404709                 mov     [esp+298h+Format], esi ; char *
.text:0040470C                 call    sub_40AD30
.text:00404711                 mov     [esp+298h+Format], offset aCannotCreateDi ; "cannot create directory %s"
.text:00404718                 jmp     loc_404413
.text:0040471D ; ---------------------------------------------------------------------------
.text:0040471D
.text:0040471D loc_40471D:                             ; CODE XREF: sub_403910+C8E↑j
.text:0040471D                 mov     esi, [ebp+Str2]
.text:00404720                 mov     [esp+298h+Format], esi ; char *
.text:00404723                 call    sub_40AD30
.text:00404728                 mov     [esp+298h+Format], offset aCannotCopyCycl ; "cannot copy cyclic symbolic link %s"
.text:0040472F                 jmp     loc_4040AD
.text:00404734 ; ---------------------------------------------------------------------------
.text:00404734
.text:00404734 loc_404734:                             ; CODE XREF: sub_403910+2F8↑j
.text:00404734                 mov     ecx, [ebp+FileName]
.text:00404737                 mov     eax, [ebp+Str2]
.text:0040473A                 mov     [esp+298h+AccessMode], ecx ; lpFileName
.text:0040473E                 mov     [esp+298h+Format], eax ; LPCSTR
.text:00404741                 call    sub_4199A0
.text:00404746                 test    eax, eax
.text:00404748                 jnz     loc_4047E9
.text:0040474E                 mov     edx, [ebp+arg_18]
.text:00404751                 cmp     byte ptr [edx+31h], 0
.text:00404755                 jz      short loc_40476D
.text:00404757                 and     [ebp+var_248], 0F000h
.text:00404761                 cmp     [ebp+var_248], 4000h
.text:0040476B                 jz      short loc_4047AB
.text:0040476D
.text:0040476D loc_40476D:                             ; CODE XREF: sub_403910+E45↑j
.text:0040476D                                         ; sub_403910+ED7↓j
.text:0040476D                 test    edi, edi
.text:0040476F                 jz      short loc_404774
.text:00404771                 mov     byte ptr [edi], 1
.text:00404774
.text:00404774 loc_404774:                             ; CODE XREF: sub_403910+E5F↑j
.text:00404774                 cmp     [ebp+var_241], 0
.text:0040477B                 jnz     short loc_40478A
.text:0040477D                 lea     esi, [esi+0]
.text:00404780
.text:00404780 loc_404780:                             ; CODE XREF: sub_403910+E99↓j
.text:00404780                                         ; sub_403910+1065↓j ...
.text:00404780                 mov     ebx, 1
.text:00404785                 jmp     loc_4039E2
.text:0040478A ; ---------------------------------------------------------------------------
.text:0040478A
.text:0040478A loc_40478A:                             ; CODE XREF: sub_403910+E6B↑j
.text:0040478A                 mov     ecx, [ebp+FileName]
.text:0040478D                 lea     esi, [ebp+var_88]
.text:00404793                 mov     edx, [ebp+arg_18]
.text:00404796                 mov     [esp+298h+Size], esi ; int
.text:0040479A                 mov     [esp+298h+AccessMode], ecx ; char *
.text:0040479E                 mov     edi, [edx+34h]
.text:004047A1                 mov     [esp+298h+Format], edi ; int
.text:004047A4                 call    sub_4064D0
.text:004047A9                 jmp     short loc_404780
.text:004047AB ; ---------------------------------------------------------------------------
.text:004047AB
.text:004047AB loc_4047AB:                             ; CODE XREF: sub_403910+E5B↑j
.text:004047AB                 mov     [esp+298h+Format], 1 ; int
.text:004047B2                 mov     eax, [ebp+FileName]
.text:004047B5                 mov     [esp+298h+AccessMode], eax ; char *
.text:004047B9                 call    sub_40AD00
.text:004047BE                 mov     [esp+298h+Format], 0 ; int
.text:004047C5                 mov     ebx, [ebp+Str2]
.text:004047C8                 mov     esi, eax
.text:004047CA                 mov     [esp+298h+AccessMode], ebx ; char *
.text:004047CE                 call    sub_40AD00
.text:004047D3                 mov     [esp+298h+AccessMode], eax
.text:004047D7                 mov     [esp+298h+Size], esi
.text:004047DB                 mov     [esp+298h+Format], offset aSS_0 ; "%s -> %s\n"
.text:004047E2                 call    printf
.text:004047E7                 jmp     short loc_40476D
.text:004047E9 ; ---------------------------------------------------------------------------
.text:004047E9
.text:004047E9 loc_4047E9:                             ; CODE XREF: sub_403910+E38↑j
.text:004047E9                 call    _errno
.text:004047EE                 cmp     dword ptr [eax], 16h
.text:004047F1                 jz      loc_404912
.text:004047F7                 call    _errno
.text:004047FC                 cmp     dword ptr [eax], 5
.text:004047FF                 jz      loc_404912
.text:00404805                 call    _errno
.text:0040480A                 cmp     dword ptr [eax], 29h ; ')'
.text:0040480D                 jz      loc_404912
.text:00404813                 call    _errno
.text:00404818                 cmp     dword ptr [eax], 12h
.text:0040481B                 jz      loc_4048A2
.text:00404821                 mov     [esp+298h+Format], 1 ; int
.text:00404828                 mov     esi, [ebp+FileName]
.text:0040482B                 mov     [esp+298h+AccessMode], esi ; char *
.text:0040482F                 call    sub_40AD00
.text:00404834                 mov     [esp+298h+Format], 0 ; int
.text:0040483B                 mov     edi, eax
.text:0040483D                 mov     eax, [ebp+Str2]
.text:00404840                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404844                 call    sub_40AD00
.text:00404849                 mov     [esp+298h+Format], offset aCannotMoveSToS ; "cannot move %s to %s"
.text:00404850                 mov     esi, eax
.text:00404852                 call    ds:libintl_gettext
.text:00404858                 mov     ebx, eax
.text:0040485A                 call    _errno
.text:0040485F                 mov     [esp+298h+var_288], edi
.text:00404863                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:00404867
.text:00404867 loc_404867:                             ; CODE XREF: sub_403910+FFD↓j
.text:00404867                 mov     [esp+298h+Size], ebx ; char *
.text:0040486B                 mov     ecx, [eax]
.text:0040486D                 mov     [esp+298h+Format], 0 ; Code
.text:00404874                 mov     [esp+298h+AccessMode], ecx ; ErrorMessage
.text:00404878                 call    sub_415220
.text:0040487D                 mov     ebx, [ebp+var_78]
.text:00404880                 mov     edi, [ebp+var_74]
.text:00404883                 mov     edx, [ebp+var_80]
.text:00404886                 mov     [esp+298h+Size], ebx
.text:0040488A                 mov     esi, [ebp+var_7C]
.text:0040488D                 mov     dword ptr [esp+298h+var_28C], edi
.text:00404891                 mov     [esp+298h+Format], edx
.text:00404894                 mov     [esp+298h+AccessMode], esi
.text:00404898                 call    sub_4065C0
.text:0040489D                 jmp     loc_4039E0
.text:004048A2 ; ---------------------------------------------------------------------------
.text:004048A2
.text:004048A2 loc_4048A2:                             ; CODE XREF: sub_403910+F0B↑j
.text:004048A2                 mov     edi, [ebp+FileName]
.text:004048A5                 mov     [esp+298h+Format], edi ; LPCSTR
.text:004048A8                 call    sub_4195A0
.text:004048AD                 test    eax, eax
.text:004048AF                 jnz     short loc_4048BD
.text:004048B1
.text:004048B1 loc_4048B1:                             ; CODE XREF: sub_403910+FB5↓j
.text:004048B1                 mov     byte ptr [ebp+var_22B], 1
.text:004048B8                 jmp     loc_403C0E
.text:004048BD ; ---------------------------------------------------------------------------
.text:004048BD
.text:004048BD loc_4048BD:                             ; CODE XREF: sub_403910+F9F↑j
.text:004048BD                 call    _errno
.text:004048C2                 cmp     dword ptr [eax], 2
.text:004048C5                 jz      short loc_4048B1
.text:004048C7                 mov     [esp+298h+Format], 1 ; int
.text:004048CE                 mov     ecx, [ebp+FileName]
.text:004048D1                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004048D5                 call    sub_40AD00
.text:004048DA                 mov     [esp+298h+Format], 0 ; int
.text:004048E1                 mov     ebx, [ebp+Str2]
.text:004048E4                 mov     esi, eax
.text:004048E6                 mov     [esp+298h+AccessMode], ebx ; char *
.text:004048EA                 call    sub_40AD00
.text:004048EF                 mov     [esp+298h+Format], offset aInterDeviceMov ; "inter-device move failed: %s to %s; una"...
.text:004048F6                 mov     edi, eax
.text:004048F8                 call    ds:libintl_gettext
.text:004048FE                 mov     ebx, eax
.text:00404900                 call    _errno
.text:00404905                 mov     [esp+298h+var_288], esi
.text:00404909                 mov     dword ptr [esp+298h+var_28C], edi
.text:0040490D                 jmp     loc_404867
.text:00404912 ; ---------------------------------------------------------------------------
.text:00404912
.text:00404912 loc_404912:                             ; CODE XREF: sub_403910+EE1↑j
.text:00404912                                         ; sub_403910+EEF↑j ...
.text:00404912                 mov     [esp+298h+Format], 1 ; int
.text:00404919                 mov     ecx, ds:dword_421070
.text:0040491F                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00404923                 call    sub_40AD00
.text:00404928                 mov     [esp+298h+Format], 0 ; int
.text:0040492F                 mov     edx, ds:dword_421060
.text:00404935                 mov     ebx, eax
.text:00404937                 mov     [esp+298h+AccessMode], edx ; char *
.text:0040493B                 call    sub_40AD00
.text:00404940                 mov     [esp+298h+Format], offset aCannotMoveSToA ; "cannot move %s to a subdirectory of its"...
.text:00404947                 mov     edi, eax
.text:00404949                 call    ds:libintl_gettext
.text:0040494F                 mov     [esp+298h+var_288], ebx
.text:00404953                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:00404957                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:0040495F                 mov     [esp+298h+Size], eax ; char *
.text:00404963                 mov     [esp+298h+Format], 0 ; Code
.text:0040496A                 call    sub_415220
.text:0040496F                 mov     ebx, [ebp+arg_20]
.text:00404972                 mov     byte ptr [ebx], 1
.text:00404975                 jmp     loc_404780
.text:00404975 ; ---------------------------------------------------------------------------
.text:0040497A                 align 10h
.text:00404980
.text:00404980 loc_404980:                             ; CODE XREF: sub_403910+2A0↑j
.text:00404980                                         ; sub_403910+2B9↑j ...
.text:00404980                 mov     ebx, [ebp+var_78]
.text:00404983                 mov     ecx, [ebp+var_74]
.text:00404986                 mov     edx, [ebp+var_80]
.text:00404989                 mov     dword ptr [esp+298h+var_28C], ebx ; int
.text:0040498D                 mov     esi, [ebp+var_7C]
.text:00404990                 mov     eax, [ebp+FileName]
.text:00404993                 mov     [esp+298h+var_288], ecx ; int
.text:00404997                 mov     [esp+298h+AccessMode], edx ; int
.text:0040499B                 mov     [esp+298h+Size], esi ; int
.text:0040499F                 mov     [esp+298h+Format], eax ; char *
.text:004049A2                 call    sub_406770
.text:004049A7
.text:004049A7 loc_4049A7:                             ; CODE XREF: sub_403910+1271↓j
.text:004049A7                 mov     [ebp+lpExistingFileName], eax
.text:004049AD                 mov     eax, [ebp+lpExistingFileName]
.text:004049B3                 test    eax, eax
.text:004049B5                 jz      loc_403C01
.text:004049BB                 and     [ebp+var_248], 0F000h
.text:004049C5                 cmp     [ebp+var_248], 4000h
.text:004049CF                 jz      loc_404A82
.text:004049D5                 mov     esi, [ebp+FileName]
.text:004049D8                 mov     edx, [ebp+lpExistingFileName]
.text:004049DE                 mov     [esp+298h+AccessMode], esi ; lpNewFileName
.text:004049E2                 mov     [esp+298h+Format], edx ; lpExistingFileName
.text:004049E5                 call    sub_417600
.text:004049EA                 test    eax, eax
.text:004049EC                 setnz   bl
.text:004049EF                 test    bl, bl
.text:004049F1                 jz      loc_404780
.text:004049F7                 call    _errno
.text:004049FC                 cmp     dword ptr [eax], 11h
.text:004049FF                 jz      short loc_404A40
.text:00404A01
.text:00404A01 loc_404A01:                             ; CODE XREF: sub_403910+1159↓j
.text:00404A01                 test    bl, bl
.text:00404A03                 jz      loc_404780
.text:00404A09                 mov     [esp+298h+Format], 1 ; int
.text:00404A10                 mov     esi, [ebp+lpExistingFileName]
.text:00404A16                 mov     [esp+298h+AccessMode], esi ; char *
.text:00404A1A                 call    sub_40AD00
.text:00404A1F                 mov     [esp+298h+Format], 0 ; int
.text:00404A26                 mov     edx, [ebp+FileName]
.text:00404A29                 mov     edi, eax
.text:00404A2B                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404A2F                 call    sub_40AD00
.text:00404A34                 mov     [esp+298h+Format], offset aCannotCreateHa ; "cannot create hard link %s to %s"
.text:00404A3B                 jmp     loc_403FA1
.text:00404A40 ; ---------------------------------------------------------------------------
.text:00404A40
.text:00404A40 loc_404A40:                             ; CODE XREF: sub_403910+10EF↑j
.text:00404A40                 mov     edi, [ebp+FileName]
.text:00404A43                 mov     [esp+298h+Format], edi ; LPCSTR
.text:00404A46                 call    sub_4195A0
.text:00404A4B                 test    eax, eax
.text:00404A4D                 jnz     short loc_404A6B
.text:00404A4F                 mov     eax, [ebp+FileName]
.text:00404A52                 mov     ecx, [ebp+lpExistingFileName]
.text:00404A58                 mov     [esp+298h+AccessMode], eax ; lpNewFileName
.text:00404A5C                 mov     [esp+298h+Format], ecx ; lpExistingFileName
.text:00404A5F                 call    sub_417600
.text:00404A64                 test    eax, eax
.text:00404A66                 setnz   bl
.text:00404A69                 jmp     short loc_404A01
.text:00404A6B ; ---------------------------------------------------------------------------
.text:00404A6B
.text:00404A6B loc_404A6B:                             ; CODE XREF: sub_403910+113D↑j
.text:00404A6B                 mov     ebx, [ebp+FileName]
.text:00404A6E                 mov     [esp+298h+Format], ebx ; char *
.text:00404A71                 call    sub_40AD30
.text:00404A76                 mov     [esp+298h+Format], offset aCannotRemoveS ; "cannot remove %s"
.text:00404A7D                 jmp     loc_404413
.text:00404A82 ; ---------------------------------------------------------------------------
.text:00404A82
.text:00404A82 loc_404A82:                             ; CODE XREF: sub_403910+10BF↑j
.text:00404A82                 mov     esi, [ebp+lpExistingFileName]
.text:00404A88                 mov     edi, [ebp+Str2]
.text:00404A8B                 mov     [esp+298h+AccessMode], esi ; void *
.text:00404A8F                 mov     [esp+298h+Format], edi ; void *
.text:00404A92                 call    sub_407A10
.text:00404A97                 test    al, al
.text:00404A99                 jz      short loc_404B03
.text:00404A9B                 mov     [esp+298h+Format], 1 ; int
.text:00404AA2                 mov     esi, ds:dword_421070
.text:00404AA8                 mov     [esp+298h+AccessMode], esi ; char *
.text:00404AAC                 call    sub_40AD00
.text:00404AB1                 mov     [esp+298h+Format], 0 ; int
.text:00404AB8                 mov     edx, ds:dword_421060
.text:00404ABE                 mov     ebx, eax
.text:00404AC0                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404AC4                 call    sub_40AD00
.text:00404AC9                 mov     [esp+298h+Format], offset aCannotCopyADir ; "cannot copy a directory, %s, into itsel"...
.text:00404AD0                 mov     edi, eax
.text:00404AD2                 call    ds:libintl_gettext
.text:00404AD8                 mov     [esp+298h+var_288], ebx
.text:00404ADC                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:00404AE0                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00404AE8                 mov     [esp+298h+Size], eax ; char *
.text:00404AEC                 mov     [esp+298h+Format], 0 ; Code
.text:00404AF3                 call    sub_415220
.text:00404AF8                 mov     ecx, [ebp+arg_20]
.text:00404AFB                 mov     byte ptr [ecx], 1
.text:00404AFE                 jmp     loc_403FCE
.text:00404B03 ; ---------------------------------------------------------------------------
.text:00404B03
.text:00404B03 loc_404B03:                             ; CODE XREF: sub_403910+1189↑j
.text:00404B03                 mov     [esp+298h+Format], 1 ; int
.text:00404B0A                 mov     eax, [ebp+lpExistingFileName]
.text:00404B10                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404B14                 call    sub_40AD00
.text:00404B19                 mov     [esp+298h+Format], 0 ; int
.text:00404B20                 mov     ecx, [ebp+FileName]
.text:00404B23                 mov     ebx, eax
.text:00404B25                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00404B29                 call    sub_40AD00
.text:00404B2E                 mov     [esp+298h+Format], offset aWillNotCreateH ; "will not create hard link %s to directo"...
.text:00404B35                 mov     edi, eax
.text:00404B37                 call    ds:libintl_gettext
.text:00404B3D                 mov     [esp+298h+var_288], ebx
.text:00404B41                 mov     dword ptr [esp+298h+var_28C], edi
.text:00404B45                 mov     [esp+298h+AccessMode], 0
.text:00404B4D                 mov     [esp+298h+Size], eax
.text:00404B51                 jmp     loc_403FC2
.text:00404B56 ; ---------------------------------------------------------------------------
.text:00404B56
.text:00404B56 loc_404B56:                             ; CODE XREF: sub_403910+2AD↑j
.text:00404B56                 mov     edx, [ebp+arg_18]
.text:00404B59                 mov     eax, [edx+8]
.text:00404B5C                 jmp     loc_403BCF
.text:00404B61 ; ---------------------------------------------------------------------------
.text:00404B61
.text:00404B61 loc_404B61:                             ; CODE XREF: sub_403910+28D↑j
.text:00404B61                 mov     ebx, [ebp+var_78]
.text:00404B64                 mov     ecx, [ebp+var_74]
.text:00404B67                 mov     edx, [ebp+var_80]
.text:00404B6A                 mov     [esp+298h+Size], ebx
.text:00404B6E                 mov     esi, [ebp+var_7C]
.text:00404B71                 mov     dword ptr [esp+298h+var_28C], ecx
.text:00404B75                 mov     [esp+298h+Format], edx
.text:00404B78                 mov     [esp+298h+AccessMode], esi
.text:00404B7C                 call    sub_406720
.text:00404B81                 jmp     loc_4049A7
.text:00404B86 ; ---------------------------------------------------------------------------
.text:00404B86
.text:00404B86 loc_404B86:                             ; CODE XREF: sub_403910+269↑j
.text:00404B86                 mov     [esp+298h+Format], 0Ah ; Ch
.text:00404B8D                 mov     ecx, ds:_iob
.text:00404B93                 add     ecx, 20h ; ' '
.text:00404B96                 mov     [esp+298h+AccessMode], ecx ; File
.text:00404B9A                 call    _flsbuf
.text:00404B9F                 jmp     loc_403B90
.text:00404BA4 ; ---------------------------------------------------------------------------
.text:00404BA4
.text:00404BA4 loc_404BA4:                             ; CODE XREF: sub_403910+254↑j
.text:00404BA4                 mov     ecx, [ebp+lpFileName]
.text:00404BAA                 mov     [esp+298h+Format], ecx ; char *
.text:00404BAD                 call    sub_40AD30
.text:00404BB2                 mov     [esp+298h+Format], offset aBackupS ; " (backup: %s)"
.text:00404BB9                 mov     esi, eax
.text:00404BBB                 call    ds:libintl_gettext
.text:00404BC1                 mov     [esp+298h+AccessMode], esi
.text:00404BC5                 mov     [esp+298h+Format], eax ; Format
.text:00404BC8                 call    printf
.text:00404BCD                 jmp     loc_403B6A
.text:00404BD2 ; ---------------------------------------------------------------------------
.text:00404BD2
.text:00404BD2 loc_404BD2:                             ; CODE XREF: sub_403910+1CC↑j
.text:00404BD2                 lea     esi, [ebp+var_22B+2]
.text:00404BD8                 mov     ebx, [ebp+arg_18]
.text:00404BDB                 lea     ecx, [ebp+var_22B+1]
.text:00404BE1                 mov     [esp+298h+var_280], esi ; int
.text:00404BE5                 lea     edx, [ebp+var_F8]
.text:00404BEB                 mov     esi, [ebp+FileName]
.text:00404BEE                 mov     [esp+298h+var_284], ecx ; int
.text:00404BF2                 lea     eax, [ebp+var_88]
.text:00404BF8                 mov     ecx, [ebp+Str2]
.text:00404BFB                 mov     [esp+298h+var_288], ebx ; int
.text:00404BFF                 mov     dword ptr [esp+298h+var_28C], edx ; int
.text:00404C03                 mov     [esp+298h+Size], esi ; char *
.text:00404C07                 mov     [esp+298h+AccessMode], eax ; int
.text:00404C0B                 mov     [esp+298h+Format], ecx ; char *
.text:00404C0E                 call    sub_405EC0
.text:00404C13                 cmp     byte ptr [ebp+var_22B+2], 0
.text:00404C1A                 mov     bl, al
.text:00404C1C                 jnz     loc_405336
.text:00404C22
.text:00404C22 loc_404C22:                             ; CODE XREF: sub_403910+1A37↓j
.text:00404C22                                         ; sub_403910+1A40↓j
.text:00404C22                 cmp     byte ptr [ebp+var_22B+1], 0
.text:00404C29                 jnz     loc_404780
.text:00404C2F                 test    bl, bl
.text:00404C31                 jz      loc_405302
.text:00404C37                 mov     ecx, [ebp+var_F8]
.text:00404C3D                 and     ecx, 0F000h
.text:00404C43                 cmp     ecx, 4000h
.text:00404C49                 jz      loc_404CD2
.text:00404C4F                 mov     esi, [ebp+var_248]
.text:00404C55                 and     esi, 0F000h
.text:00404C5B                 cmp     esi, 4000h
.text:00404C61                 jz      loc_4052CE
.text:00404C67                 cmp     [ebp+var_241], 0
.text:00404C6E                 jz      short loc_404CD2
.text:00404C70                 mov     edx, [ebp+arg_18]
.text:00404C73                 cmp     dword ptr [edx], 3
.text:00404C76                 jz      short loc_404CD2
.text:00404C78                 mov     ecx, [edx+34h]
.text:00404C7B                 test    ecx, ecx
.text:00404C7D                 jz      short loc_404CD2
.text:00404C7F                 mov     [esp+298h+Format], ecx
.text:00404C82                 mov     edx, [ebp+FileName]
.text:00404C85                 mov     esi, [ebp+var_F0]
.text:00404C8B                 mov     ebx, [ebp+var_EC]
.text:00404C91                 mov     [ebp+var_138], edx
.text:00404C97                 mov     edx, [ebp+var_E8]
.text:00404C9D                 mov     [ebp+var_130], esi
.text:00404CA3                 mov     esi, [ebp+var_E4]
.text:00404CA9                 mov     [ebp+var_12C], ebx
.text:00404CAF                 lea     ebx, [ebp+var_138]
.text:00404CB5                 mov     [ebp+var_128], edx
.text:00404CBB                 mov     [ebp+var_124], esi
.text:00404CC1                 mov     [esp+298h+AccessMode], ebx
.text:00404CC5                 call    sub_40B950
.text:00404CCA                 test    eax, eax
.text:00404CCC                 jnz     loc_40529A
.text:00404CD2
.text:00404CD2 loc_404CD2:                             ; CODE XREF: sub_403910+1339↑j
.text:00404CD2                                         ; sub_403910+135E↑j ...
.text:00404CD2                 mov     ebx, [ebp+var_248]
.text:00404CD8                 and     ebx, 0F000h
.text:00404CDE                 cmp     ebx, 4000h
.text:00404CE4                 jz      loc_404D83
.text:00404CEA                 mov     esi, [ebp+var_F8]
.text:00404CF0                 and     esi, 0F000h
.text:00404CF6                 cmp     esi, 4000h
.text:00404CFC                 jz      loc_405283
.text:00404D02                 mov     edx, [ebp+arg_18]
.text:00404D05                 cmp     byte ptr [edx+30h], 0
.text:00404D09                 jz      short loc_404D83
.text:00404D0B                 xor     ecx, ecx
.text:00404D0D                 cmp     byte ptr [edx+1Fh], 0
.text:00404D11                 mov     dword ptr [ebp+var_25C], ecx
.text:00404D17                 jz      short loc_404D46
.text:00404D19                 cmp     byte ptr [edx+14h], 0
.text:00404D1D                 jz      short loc_404D3B
.text:00404D1F                 mov     ebx, [ebp+var_E4]
.text:00404D25                 mov     ecx, [ebp+var_E8]
.text:00404D2B                 mov     eax, [ebp+var_78]
.text:00404D2E                 mov     edx, [ebp+var_74]
.text:00404D31                 mov     esi, ebx
.text:00404D33                 xor     eax, ecx
.text:00404D35                 xor     esi, edx
.text:00404D37                 or      esi, eax
.text:00404D39                 jz      short loc_404D46
.text:00404D3B
.text:00404D3B loc_404D3B:                             ; CODE XREF: sub_403910+140D↑j
.text:00404D3B                 mov     eax, 1
.text:00404D40                 mov     dword ptr [ebp+var_25C], eax
.text:00404D46
.text:00404D46 loc_404D46:                             ; CODE XREF: sub_403910+1407↑j
.text:00404D46                                         ; sub_403910+1429↑j
.text:00404D46                 mov     eax, dword ptr [ebp+var_25C]
.text:00404D4C                 lea     edx, [ebp+var_88]
.text:00404D52                 mov     ebx, [ebp+FileName]
.text:00404D55                 mov     [esp+298h+Size], edx ; int
.text:00404D59                 lea     esi, [ebp+var_F8]
.text:00404D5F                 mov     dword ptr [esp+298h+var_28C], eax ; char
.text:00404D63                 mov     [esp+298h+AccessMode], esi ; int
.text:00404D67                 mov     [esp+298h+Format], ebx ; char *
.text:00404D6A                 call    sub_407CB0
.text:00404D6F                 test    eax, eax
.text:00404D71                 js      short loc_404D83
.text:00404D73
.text:00404D73 loc_404D73:                             ; CODE XREF: sub_403910+1805↓j
.text:00404D73                                         ; sub_403910+1895↓j
.text:00404D73                 test    edi, edi
.text:00404D75                 jz      loc_404780
.text:00404D7B                 mov     byte ptr [edi], 1
.text:00404D7E                 jmp     loc_404780
.text:00404D83 ; ---------------------------------------------------------------------------
.text:00404D83
.text:00404D83 loc_404D83:                             ; CODE XREF: sub_403910+13D4↑j
.text:00404D83                                         ; sub_403910+13F9↑j ...
.text:00404D83                 mov     ecx, [ebp+var_248]
.text:00404D89                 and     ecx, 0F000h
.text:00404D8F                 cmp     ecx, 4000h
.text:00404D95                 jz      loc_405160
.text:00404D9B                 mov     edx, [ebp+arg_18]
.text:00404D9E                 movzx   eax, byte ptr [edx+14h]
.text:00404DA2                 test    al, al
.text:00404DA4                 jz      loc_4051B6
.text:00404DAA                 mov     edx, [edx+10h]
.text:00404DAD                 cmp     edx, 2
.text:00404DB0                 jz      loc_405178
.text:00404DB6
.text:00404DB6 loc_404DB6:                             ; CODE XREF: sub_403910+187A↓j
.text:00404DB6                                         ; sub_403910+18A1↓j
.text:00404DB6                 cmp     edx, 3
.text:00404DB9                 jz      loc_4050A4
.text:00404DBF                 cmp     edx, 4
.text:00404DC2                 jz      loc_405062
.text:00404DC8
.text:00404DC8 loc_404DC8:                             ; CODE XREF: sub_403910+17FF↓j
.text:00404DC8                 mov     esi, [ebp+arg_18]
.text:00404DCB                 movzx   eax, byte ptr [esi+14h]
.text:00404DCF
.text:00404DCF loc_404DCF:                             ; CODE XREF: sub_403910+1857↓j
.text:00404DCF                                         ; sub_403910+18B8↓j
.text:00404DCF                 mov     edx, [ebp+var_F8]
.text:00404DD5
.text:00404DD5 loc_404DD5:                             ; CODE XREF: sub_403910+1863↓j
.text:00404DD5                 test    al, al
.text:00404DD7                 jz      short loc_404E05
.text:00404DD9                 mov     ebx, edx
.text:00404DDB                 and     ebx, 0F000h
.text:00404DE1                 cmp     ebx, 4000h
.text:00404DE7                 jz      loc_405033
.text:00404DED                 mov     esi, [ebp+var_88]
.text:00404DF3                 and     esi, 0F000h
.text:00404DF9                 cmp     esi, 4000h
.text:00404DFF                 jz      loc_404FD7
.text:00404E05
.text:00404E05 loc_404E05:                             ; CODE XREF: sub_403910+14C7↑j
.text:00404E05                 mov     ebx, [ebp+arg_18]
.text:00404E08                 mov     ecx, [ebx]
.text:00404E0A                 test    ecx, ecx
.text:00404E0C                 jz      loc_404F50
.text:00404E12                 mov     esi, edx
.text:00404E14                 and     esi, 0F000h
.text:00404E1A                 cmp     esi, 4000h
.text:00404E20                 jz      loc_404F50
.text:00404E26                 mov     [esp+298h+AccessMode], ecx ; int
.text:00404E2A                 mov     ecx, [ebp+FileName]
.text:00404E2D                 mov     [esp+298h+Format], ecx ; char *
.text:00404E30                 call    sub_4093A0
.text:00404E35                 mov     esi, eax
.text:00404E37                 mov     eax, [ebp+Str2]
.text:00404E3A                 mov     [esp+298h+Format], esi ; Str1
.text:00404E3D                 mov     [esp+298h+AccessMode], eax ; Str2
.text:00404E41                 call    strcmp
.text:00404E46                 test    eax, eax
.text:00404E48                 jnz     short loc_404EC0
.text:00404E4A                 mov     edi, [ebp+arg_18]
.text:00404E4D                 cmp     byte ptr [edi+14h], 0
.text:00404E51                 jz      short loc_404EB7
.text:00404E53                 mov     [esp+298h+Format], offset aBackingUpSWoul ; "backing up %s would destroy source;  %s"...
.text:00404E5A
.text:00404E5A loc_404E5A:                             ; CODE XREF: sub_403910+15AE↓j
.text:00404E5A                 call    ds:libintl_gettext
.text:00404E60                 mov     [esp+298h+Format], 1 ; int
.text:00404E67                 mov     ebx, [ebp+Str2]
.text:00404E6A                 mov     edi, eax
.text:00404E6C                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00404E70                 call    sub_40AD00
.text:00404E75                 mov     [esp+298h+Format], 0 ; int
.text:00404E7C                 mov     edx, [ebp+FileName]
.text:00404E7F                 mov     ebx, eax
.text:00404E81                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404E85                 call    sub_40AD00
.text:00404E8A                 mov     dword ptr [esp+298h+var_28C], eax ; char
.text:00404E8E                 mov     [esp+298h+var_288], ebx
.text:00404E92                 mov     [esp+298h+Size], edi ; char *
.text:00404E96                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00404E9E                 mov     [esp+298h+Format], 0 ; Code
.text:00404EA5                 call    sub_415220
.text:00404EAA                 mov     [esp+298h+Format], esi ; Block
.text:00404EAD                 call    free
.text:00404EB2                 jmp     loc_4039E0
.text:00404EB7 ; ---------------------------------------------------------------------------
.text:00404EB7
.text:00404EB7 loc_404EB7:                             ; CODE XREF: sub_403910+1541↑j
.text:00404EB7                 mov     [esp+298h+Format], offset aBackingUpSWoul_0 ; "backing up %s would destroy source;  %s"...
.text:00404EBE                 jmp     short loc_404E5A
.text:00404EC0 ; ---------------------------------------------------------------------------
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: sub_403910+1538↑j
.text:00404EC0                 mov     [esp+298h+Format], esi ; Size
.text:00404EC3                 call    strlen
.text:00404EC8                 lea     ecx, [eax+1]
.text:00404ECB                 add     eax, 10h
.text:00404ECE                 and     eax, 0FFFFFFF0h
.text:00404ED1                 call    __alloca
.text:00404ED6                 mov     [esp+298h+Size], ecx ; Size
.text:00404EDA                 lea     ebx, [esp+298h+var_27C]
.text:00404EDE                 mov     [esp+298h+AccessMode], esi ; Src
.text:00404EE2                 mov     [esp+298h+Format], ebx ; void *
.text:00404EE5                 call    memcpy
.text:00404EEA                 mov     [ebp+lpFileName], eax
.text:00404EF0                 mov     [esp+298h+Format], esi ; Block
.text:00404EF3                 call    free
.text:00404EF8                 mov     ecx, [ebp+lpFileName]
.text:00404EFE                 mov     esi, [ebp+FileName]
.text:00404F01                 mov     [esp+298h+AccessMode], ecx ; lpFileName
.text:00404F05                 mov     [esp+298h+Format], esi ; LPCSTR
.text:00404F08                 call    sub_4199A0
.text:00404F0D                 test    eax, eax
.text:00404F0F                 jnz     short loc_404F1D
.text:00404F11                 mov     [ebp+var_251], 1
.text:00404F18                 jmp     loc_403AF4
.text:00404F1D ; ---------------------------------------------------------------------------
.text:00404F1D
.text:00404F1D loc_404F1D:                             ; CODE XREF: sub_403910+15FF↑j
.text:00404F1D                 call    _errno
.text:00404F22                 cmp     dword ptr [eax], 2
.text:00404F25                 jz      short loc_404F3E
.text:00404F27                 mov     eax, [ebp+FileName]
.text:00404F2A                 mov     [esp+298h+Format], eax ; char *
.text:00404F2D                 call    sub_40AD30
.text:00404F32                 mov     [esp+298h+Format], offset aCannotBackupS ; "cannot backup %s"
.text:00404F39                 jmp     loc_4039B7
.text:00404F3E ; ---------------------------------------------------------------------------
.text:00404F3E
.text:00404F3E loc_404F3E:                             ; CODE XREF: sub_403910+1615↑j
.text:00404F3E                 xor     edx, edx
.text:00404F40                 mov     [ebp+lpFileName], edx
.text:00404F46                 jmp     loc_403AF4
.text:00404F46 ; ---------------------------------------------------------------------------
.text:00404F4B                 align 10h
.text:00404F50
.text:00404F50 loc_404F50:                             ; CODE XREF: sub_403910+14FC↑j
.text:00404F50                                         ; sub_403910+1510↑j
.text:00404F50                 and     edx, 0F000h
.text:00404F56                 cmp     edx, 4000h
.text:00404F5C                 jz      loc_403B00
.text:00404F62                 mov     eax, [ebp+arg_18]
.text:00404F65                 cmp     byte ptr [eax+0Ch], 0
.text:00404F69                 jnz     short loc_404F9F
.text:00404F6B                 cmp     byte ptr [eax+20h], 0
.text:00404F6F                 jz      short loc_404F7A
.text:00404F71                 cmp     [ebp+var_E0], 1
.text:00404F78                 ja      short loc_404F9F
.text:00404F7A
.text:00404F7A loc_404F7A:                             ; CODE XREF: sub_403910+165F↑j
.text:00404F7A                 mov     esi, [ebp+arg_18]
.text:00404F7D                 cmp     dword ptr [esi+8], 2
.text:00404F81                 jnz     loc_403B00
.text:00404F87                 mov     ebx, [ebp+var_88]
.text:00404F8D                 and     ebx, 0F000h
.text:00404F93                 cmp     ebx, 8000h
.text:00404F99                 jz      loc_403B00
.text:00404F9F
.text:00404F9F loc_404F9F:                             ; CODE XREF: sub_403910+1659↑j
.text:00404F9F                                         ; sub_403910+1668↑j
.text:00404F9F                 mov     eax, [ebp+FileName]
.text:00404FA2                 mov     [esp+298h+Format], eax ; LPCSTR
.text:00404FA5                 call    sub_4195A0
.text:00404FAA                 test    eax, eax
.text:00404FAC                 jz      loc_403AF4
.text:00404FB2                 call    _errno
.text:00404FB7                 cmp     dword ptr [eax], 2
.text:00404FBA                 jz      loc_403AF4
.text:00404FC0                 mov     edi, [ebp+FileName]
.text:00404FC3
.text:00404FC3 loc_404FC3:                             ; CODE XREF: sub_403910+1A48↓j
.text:00404FC3                 mov     [esp+298h+Format], edi ; char *
.text:00404FC6                 call    sub_40AD30
.text:00404FCB                 mov     [esp+298h+Format], offset aCannotRemoveS ; "cannot remove %s"
.text:00404FD2                 jmp     loc_4039B7
.text:00404FD7 ; ---------------------------------------------------------------------------
.text:00404FD7
.text:00404FD7 loc_404FD7:                             ; CODE XREF: sub_403910+14EF↑j
.text:00404FD7                 mov     [esp+298h+Format], 0 ; int
.text:00404FDE                 mov     edx, [ebp+FileName]
.text:00404FE1                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404FE5                 call    sub_40AD00
.text:00404FEA                 mov     [esp+298h+Format], 0 ; int
.text:00404FF1                 mov     esi, eax
.text:00404FF3                 mov     eax, [ebp+Str2]
.text:00404FF6                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404FFA                 call    sub_40AD00
.text:00404FFF                 mov     [esp+298h+Format], offset aCannotMoveDire ; "cannot move directory onto non-director"...
.text:00405006
.text:00405006 loc_405006:                             ; CODE XREF: sub_403910+19B9↓j
.text:00405006                                         ; sub_403910+19ED↓j ...
.text:00405006                 mov     ebx, eax
.text:00405008                 call    ds:libintl_gettext
.text:0040500E                 mov     [esp+298h+var_288], esi
.text:00405012                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00405016                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:0040501E                 mov     [esp+298h+Size], eax ; char *
.text:00405022                 mov     [esp+298h+Format], 0 ; Code
.text:00405029                 call    sub_415220
.text:0040502E                 jmp     loc_4039E0
.text:00405033 ; ---------------------------------------------------------------------------
.text:00405033
.text:00405033 loc_405033:                             ; CODE XREF: sub_403910+14D7↑j
.text:00405033                 mov     edi, [ebp+FileName]
.text:00405036                 mov     [esp+298h+Format], edi ; char *
.text:00405039                 call    sub_40AD30
.text:0040503E                 mov     [esp+298h+Format], offset aCannotOverwrit ; "cannot overwrite directory %s"
.text:00405045
.text:00405045 loc_405045:                             ; CODE XREF: sub_403910+1985↓j
.text:00405045                                         ; sub_403910+1AC1↓j
.text:00405045                 mov     ebx, eax
.text:00405047                 call    ds:libintl_gettext
.text:0040504D                 mov     dword ptr [esp+298h+var_28C], ebx
.text:00405051                 mov     [esp+298h+AccessMode], 0
.text:00405059                 mov     [esp+298h+Size], eax
.text:0040505D                 jmp     loc_4039D4
.text:00405062 ; ---------------------------------------------------------------------------
.text:00405062
.text:00405062 loc_405062:                             ; CODE XREF: sub_403910+14B2↑j
.text:00405062                 mov     ecx, [ebp+arg_18]
.text:00405065                 cmp     byte ptr [ecx+32h], 0
.text:00405069                 jz      loc_405160
.text:0040506F                 mov     edx, [ebp+var_F8]
.text:00405075                 mov     ebx, edx
.text:00405077                 and     ebx, 0F000h
.text:0040507D                 cmp     ebx, 0A000h
.text:00405083                 jz      loc_40516C
.text:00405089                 mov     [esp+298h+AccessMode], 2 ; int
.text:00405091                 mov     esi, [ebp+FileName]
.text:00405094                 mov     [esp+298h+Format], esi ; LPCSTR
.text:00405097                 call    sub_4154C0
.text:0040509C                 test    eax, eax
.text:0040509E                 jz      loc_405160
.text:004050A4
.text:004050A4 loc_4050A4:                             ; CODE XREF: sub_403910+14A9↑j
.text:004050A4                 mov     [esp+298h+AccessMode], 2 ; int
.text:004050AC                 mov     edx, [ebp+FileName]
.text:004050AF                 mov     [esp+298h+Format], edx ; LPCSTR
.text:004050B2                 call    sub_4154C0
.text:004050B7                 test    eax, eax
.text:004050B9                 jz      short loc_40511A
.text:004050BB                 mov     edx, [ebp+FileName]
.text:004050BE                 mov     [esp+298h+Format], edx ; char *
.text:004050C1                 call    sub_40AD30
.text:004050C6                 mov     [esp+298h+Format], offset aSOverwriteSOve ; "%s: overwrite %s, overriding mode %04lo"...
.text:004050CD                 mov     esi, eax
.text:004050CF                 call    ds:libintl_gettext
.text:004050D5                 mov     dword ptr [esp+298h+var_28C], esi
.text:004050D9                 mov     ecx, [ebp+var_F8]
.text:004050DF                 mov     ebx, ds:dword_421C80
.text:004050E5                 mov     [esp+298h+AccessMode], eax ; Format
.text:004050E9                 and     ecx, 0FFFh
.text:004050EF                 mov     [esp+298h+var_288], ecx
.text:004050F3                 mov     ecx, ds:_iob
.text:004050F9                 mov     [esp+298h+Size], ebx
.text:004050FD                 add     ecx, 40h ; '@'
.text:00405100                 mov     [esp+298h+Format], ecx ; Stream
.text:00405103                 call    fprintf
.text:00405108
.text:00405108 loc_405108:                             ; CODE XREF: sub_403910+1847↓j
.text:00405108                 call    sub_40AEB0
.text:0040510D                 test    al, al
.text:0040510F                 jnz     loc_404DC8
.text:00405115                 jmp     loc_404D73
.text:0040511A ; ---------------------------------------------------------------------------
.text:0040511A
.text:0040511A loc_40511A:                             ; CODE XREF: sub_403910+17A9↑j
.text:0040511A                 mov     eax, [ebp+FileName]
.text:0040511D                 mov     [esp+298h+Format], eax ; char *
.text:00405120                 call    sub_40AD30
.text:00405125                 mov     [esp+298h+Format], offset aSOverwriteS ; "%s: overwrite %s? "
.text:0040512C                 mov     esi, eax
.text:0040512E                 call    ds:libintl_gettext
.text:00405134                 mov     dword ptr [esp+298h+var_28C], esi
.text:00405138                 mov     ebx, ds:_iob
.text:0040513E                 mov     esi, ds:dword_421C80
.text:00405144                 mov     [esp+298h+AccessMode], eax ; Format
.text:00405148                 add     ebx, 40h ; '@'
.text:0040514B                 mov     [esp+298h+Size], esi
.text:0040514F                 mov     [esp+298h+Format], ebx ; Stream
.text:00405152                 call    fprintf
.text:00405157                 jmp     short loc_405108
.text:00405157 ; ---------------------------------------------------------------------------
.text:00405159                 align 10h
.text:00405160
.text:00405160 loc_405160:                             ; CODE XREF: sub_403910+1485↑j
.text:00405160                                         ; sub_403910+1759↑j ...
.text:00405160                 mov     ecx, [ebp+arg_18]
.text:00405163                 movzx   eax, byte ptr [ecx+14h]
.text:00405167                 jmp     loc_404DCF
.text:0040516C ; ---------------------------------------------------------------------------
.text:0040516C
.text:0040516C loc_40516C:                             ; CODE XREF: sub_403910+1773↑j
.text:0040516C                 mov     ebx, [ebp+arg_18]
.text:0040516F                 movzx   eax, byte ptr [ebx+14h]
.text:00405173                 jmp     loc_404DD5
.text:00405178 ; ---------------------------------------------------------------------------
.text:00405178
.text:00405178 loc_405178:                             ; CODE XREF: sub_403910+14A0↑j
.text:00405178                 mov     esi, [ebp+var_F8]
.text:0040517E                 and     esi, 0F000h
.text:00405184                 cmp     esi, 0A000h
.text:0040518A                 jz      loc_404DB6
.text:00405190                 mov     [esp+298h+AccessMode], 2 ; int
.text:00405198                 mov     edx, [ebp+FileName]
.text:0040519B                 mov     [esp+298h+Format], edx ; LPCSTR
.text:0040519E                 call    sub_4154C0
.text:004051A3                 test    eax, eax
.text:004051A5                 jnz     loc_404D73
.text:004051AB                 mov     eax, [ebp+arg_18]
.text:004051AE                 mov     edx, [eax+10h]
.text:004051B1                 jmp     loc_404DB6
.text:004051B6 ; ---------------------------------------------------------------------------
.text:004051B6
.text:004051B6 loc_4051B6:                             ; CODE XREF: sub_403910+1494↑j
.text:004051B6                 mov     ebx, [ebp+arg_18]
.text:004051B9                 mov     edx, [ebx+10h]
.text:004051BC                 cmp     edx, 2
.text:004051BF                 jz      loc_404780
.text:004051C5                 cmp     edx, 3
.text:004051C8                 jnz     loc_404DCF
.text:004051CE                 mov     [esp+298h+AccessMode], 2 ; int
.text:004051D6                 mov     ecx, [ebp+FileName]
.text:004051D9                 mov     [esp+298h+Format], ecx ; LPCSTR
.text:004051DC                 call    sub_4154C0
.text:004051E1                 test    eax, eax
.text:004051E3                 jz      short loc_405244
.text:004051E5                 mov     eax, [ebp+FileName]
.text:004051E8                 mov     [esp+298h+Format], eax ; char *
.text:004051EB                 call    sub_40AD30
.text:004051F0                 mov     [esp+298h+Format], offset aSOverwriteSOve ; "%s: overwrite %s, overriding mode %04lo"...
.text:004051F7                 mov     esi, eax
.text:004051F9                 call    ds:libintl_gettext
.text:004051FF                 mov     dword ptr [esp+298h+var_28C], esi
.text:00405203                 mov     ebx, [ebp+var_F8]
.text:00405209                 mov     edx, ds:_iob
.text:0040520F                 mov     esi, ds:dword_421C80
.text:00405215                 and     ebx, 0FFFh
.text:0040521B                 add     edx, 40h ; '@'
.text:0040521E                 mov     [esp+298h+var_288], ebx
.text:00405222                 mov     [esp+298h+Size], esi
.text:00405226                 mov     [esp+298h+AccessMode], eax ; Format
.text:0040522A                 mov     [esp+298h+Format], edx ; Stream
.text:0040522D                 call    fprintf
.text:00405232
.text:00405232 loc_405232:                             ; CODE XREF: sub_403910+1971↓j
.text:00405232                 call    sub_40AEB0
.text:00405237                 test    al, al
.text:00405239                 jnz     loc_405160
.text:0040523F                 jmp     loc_404780
.text:00405244 ; ---------------------------------------------------------------------------
.text:00405244
.text:00405244 loc_405244:                             ; CODE XREF: sub_403910+18D3↑j
.text:00405244                 mov     edx, [ebp+FileName]
.text:00405247                 mov     [esp+298h+Format], edx ; char *
.text:0040524A                 call    sub_40AD30
.text:0040524F                 mov     [esp+298h+Format], offset aSOverwriteS ; "%s: overwrite %s? "
.text:00405256                 mov     esi, eax
.text:00405258                 call    ds:libintl_gettext
.text:0040525E                 mov     dword ptr [esp+298h+var_28C], esi
.text:00405262                 mov     ecx, ds:_iob
.text:00405268                 mov     esi, ds:dword_421C80
.text:0040526E                 mov     [esp+298h+AccessMode], eax ; Format
.text:00405272                 add     ecx, 40h ; '@'
.text:00405275                 mov     [esp+298h+Size], esi
.text:00405279                 mov     [esp+298h+Format], ecx ; Stream
.text:0040527C                 call    fprintf
.text:00405281                 jmp     short loc_405232
.text:00405283 ; ---------------------------------------------------------------------------
.text:00405283
.text:00405283 loc_405283:                             ; CODE XREF: sub_403910+13EC↑j
.text:00405283                 mov     edx, [ebp+FileName]
.text:00405286                 mov     [esp+298h+Format], edx ; char *
.text:00405289                 call    sub_40AD30
.text:0040528E                 mov     [esp+298h+Format], offset aCannotOverwrit_0 ; "cannot overwrite directory %s with non-"...
.text:00405295                 jmp     loc_405045
.text:0040529A ; ---------------------------------------------------------------------------
.text:0040529A
.text:0040529A loc_40529A:                             ; CODE XREF: sub_403910+13BC↑j
.text:0040529A                 mov     [esp+298h+Format], 1 ; int
.text:004052A1                 mov     ecx, [ebp+Str2]
.text:004052A4                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004052A8                 call    sub_40AD00
.text:004052AD                 mov     [esp+298h+Format], 0 ; int
.text:004052B4                 mov     edi, [ebp+FileName]
.text:004052B7                 mov     esi, eax
.text:004052B9                 mov     [esp+298h+AccessMode], edi ; char *
.text:004052BD                 call    sub_40AD00
.text:004052C2                 mov     [esp+298h+Format], offset aWillNotOverwri ; "will not overwrite just-created %s with"...
.text:004052C9                 jmp     loc_405006
.text:004052CE ; ---------------------------------------------------------------------------
.text:004052CE
.text:004052CE loc_4052CE:                             ; CODE XREF: sub_403910+1351↑j
.text:004052CE                 mov     [esp+298h+Format], 1 ; int
.text:004052D5                 mov     eax, [ebp+Str2]
.text:004052D8                 mov     [esp+298h+AccessMode], eax ; char *
.text:004052DC                 call    sub_40AD00
.text:004052E1                 mov     [esp+298h+Format], 0 ; int
.text:004052E8                 mov     edi, [ebp+FileName]
.text:004052EB                 mov     esi, eax
.text:004052ED                 mov     [esp+298h+AccessMode], edi ; char *
.text:004052F1                 call    sub_40AD00
.text:004052F6                 mov     [esp+298h+Format], offset aCannotOverwrit_1 ; "cannot overwrite non-directory %s with "...
.text:004052FD                 jmp     loc_405006
.text:00405302 ; ---------------------------------------------------------------------------
.text:00405302
.text:00405302 loc_405302:                             ; CODE XREF: sub_403910+1321↑j
.text:00405302                 mov     [esp+298h+Format], 1 ; int
.text:00405309                 mov     edx, [ebp+FileName]
.text:0040530C                 mov     [esp+298h+AccessMode], edx ; char *
.text:00405310                 call    sub_40AD00
.text:00405315                 mov     [esp+298h+Format], 0 ; int
.text:0040531C                 mov     ebx, [ebp+Str2]
.text:0040531F                 mov     esi, eax
.text:00405321                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00405325                 call    sub_40AD00
.text:0040532A                 mov     [esp+298h+Format], offset aSAndSAreTheSam ; "%s and %s are the same file"
.text:00405331                 jmp     loc_405006
.text:00405336 ; ---------------------------------------------------------------------------
.text:00405336
.text:00405336 loc_405336:                             ; CODE XREF: sub_403910+130C↑j
.text:00405336                 mov     eax, [ebp+Str2]
.text:00405339                 mov     [esp+298h+Format], eax ; LPCSTR
.text:0040533C                 call    sub_4195A0
.text:00405341                 test    eax, eax
.text:00405343                 jnz     short loc_405355
.text:00405345                 test    edi, edi
.text:00405347                 jz      loc_404C22
.text:0040534D                 mov     byte ptr [edi], 1
.text:00405350                 jmp     loc_404C22
.text:00405355 ; ---------------------------------------------------------------------------
.text:00405355
.text:00405355 loc_405355:                             ; CODE XREF: sub_403910+1A33↑j
.text:00405355                 mov     edi, [ebp+Str2]
.text:00405358                 jmp     loc_404FC3
.text:0040535D ; ---------------------------------------------------------------------------
.text:0040535D
.text:0040535D loc_40535D:                             ; CODE XREF: sub_403910+1AF↑j
.text:0040535D                 mov     ecx, [ebp+FileName]
.text:00405360                 lea     esi, [ebp+var_F8]
.text:00405366                 mov     [esp+298h+AccessMode], esi
.text:0040536A                 mov     [esp+298h+Format], ecx
.text:0040536D                 call    sub_417720
.text:00405372                 jmp     loc_403ADA
.text:00405377 ; ---------------------------------------------------------------------------
.text:00405377
.text:00405377 loc_405377:                             ; CODE XREF: sub_403910+173↑j
.text:00405377                 mov     eax, [ebp+Str2]
.text:0040537A                 mov     [esp+298h+Format], eax ; char *
.text:0040537D                 call    sub_40AD30
.text:00405382                 mov     [esp+298h+Format], offset aWarningSourceF ; "warning: source file %s specified more "...
.text:00405389                 mov     edi, eax
.text:0040538B                 call    ds:libintl_gettext
.text:00405391                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:00405395                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:0040539D                 mov     [esp+298h+Format], 0 ; Code
.text:004053A4                 mov     [esp+298h+Size], eax ; char *
.text:004053A8                 call    sub_415220
.text:004053AD                 jmp     loc_404780
.text:004053B2 ; ---------------------------------------------------------------------------
.text:004053B2
.text:004053B2 loc_4053B2:                             ; CODE XREF: sub_403910+FB↑j
.text:004053B2                 mov     edx, [ebp+arg_18]
.text:004053B5                 cmp     byte ptr [edx+22h], 0
.text:004053B9                 jnz     loc_403A11
.text:004053BF                 mov     esi, [ebp+Str2]
.text:004053C2                 mov     [esp+298h+Format], esi ; char *
.text:004053C5                 call    sub_40AD30
.text:004053CA                 mov     [esp+298h+Format], offset aOmittingDirect ; "omitting directory %s"
.text:004053D1                 jmp     loc_405045
.text:004053D6 ; ---------------------------------------------------------------------------
.text:004053D6
.text:004053D6 loc_4053D6:                             ; CODE XREF: sub_403910+76↑j
.text:004053D6                 mov     ebx, [ebp+Str2]
.text:004053D9                 lea     eax, [ebp+var_88]
.text:004053DF                 mov     [esp+298h+AccessMode], eax
.text:004053E3                 mov     [esp+298h+Format], ebx
.text:004053E6                 call    sub_417720
.text:004053EB                 jmp     loc_4039A1
.text:004053EB sub_403910      endp
.text:004053EB
.text:004053F0
.text:004053F0 ; =============== S U B R O U T I N E =======================================
.text:004053F0
.text:004053F0
.text:004053F0 sub_4053F0      proc near               ; CODE XREF: sub_401700+6A3↑p
.text:004053F0
.text:004053F0 var_1C          = dword ptr -1Ch
.text:004053F0 var_18          = dword ptr -18h
.text:004053F0 var_14          = dword ptr -14h
.text:004053F0 var_10          = dword ptr -10h
.text:004053F0 var_C           = dword ptr -0Ch
.text:004053F0 arg_0           = dword ptr  4
.text:004053F0
.text:004053F0                 sub     esp, 1Ch
.text:004053F3                 mov     [esp+1Ch+var_C], offset sub_4064A0
.text:004053FB                 mov     [esp+1Ch+var_10], offset sub_406410
.text:00405403                 mov     [esp+1Ch+var_14], offset sub_406380
.text:0040540B                 mov     [esp+1Ch+var_18], 0
.text:00405413                 mov     [esp+1Ch+var_1C], 3Dh ; '='
.text:0040541A                 call    sub_40AFB0
.text:0040541F                 mov     ecx, [esp+1Ch+arg_0]
.text:00405423                 mov     [ecx+34h], eax
.text:00405426                 add     esp, 1Ch
.text:00405429                 retn
.text:00405429 sub_4053F0      endp
.text:00405429
.text:00405429 ; ---------------------------------------------------------------------------
.text:0040542A                 align 10h
.text:00405430                 sub     esp, 1Ch
.text:00405433                 mov     dword ptr [esp+10h], offset sub_4064A0
.text:0040543B                 mov     dword ptr [esp+0Ch], offset sub_406410
.text:00405443                 mov     dword ptr [esp+8], offset sub_4063E0
.text:0040544B                 mov     dword ptr [esp+4], 0
.text:00405453                 mov     dword ptr [esp], 3Dh ; '='
.text:0040545A                 call    sub_40AFB0
.text:0040545F                 mov     ecx, [esp+20h]
.text:00405463                 mov     [ecx+38h], eax
.text:00405466                 add     esp, 1Ch
.text:00405469                 retn
.text:00405469 ; ---------------------------------------------------------------------------
.text:0040546A                 align 20h
.text:00405480 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/copy.c',0
.text:00405480                                         ; DATA XREF: sub_405530+A0↓o
.text:00405480                                         ; sub_405530+BC↓o ...
.text:004054A5                 align 20h
.text:004054C0 aValidSparseMod db 'VALID_SPARSE_MODE (co->sparse_mode)',0
.text:004054C0                                         ; DATA XREF: sub_405530+A8↓o
.text:004054E4                 align 20h
.text:00405500 aValidBackupTyp db 'VALID_BACKUP_TYPE (co->backup_type)',0
.text:00405500                                         ; DATA XREF: sub_405530+C4↓o
.text:00405524 aCoNull         db 'co != NULL',0       ; DATA XREF: sub_405530+DD↓o
.text:0040552F                 align 10h
.text:00405530
.text:00405530 ; =============== S U B R O U T I N E =======================================
.text:00405530
.text:00405530
.text:00405530 ; int __cdecl sub_405530(char *, char *, char, int, int, int)
.text:00405530 sub_405530      proc near               ; CODE XREF: sub_402350+32↑p
.text:00405530
.text:00405530 Str2            = dword ptr -3Ch
.text:00405530 FileName        = dword ptr -38h
.text:00405530 var_34          = dword ptr -34h
.text:00405530 var_30          = dword ptr -30h
.text:00405530 var_2C          = dword ptr -2Ch
.text:00405530 var_28          = dword ptr -28h
.text:00405530 var_24          = dword ptr -24h
.text:00405530 var_20          = byte ptr -20h
.text:00405530 var_1C          = dword ptr -1Ch
.text:00405530 var_18          = dword ptr -18h
.text:00405530 var_8           = dword ptr -8
.text:00405530 var_4           = dword ptr -4
.text:00405530 arg_0           = dword ptr  4
.text:00405530 arg_4           = dword ptr  8
.text:00405530 arg_8           = byte ptr  0Ch
.text:00405530 arg_C           = dword ptr  10h
.text:00405530 arg_10          = dword ptr  14h
.text:00405530 arg_14          = dword ptr  18h
.text:00405530
.text:00405530                 sub     esp, 3Ch
.text:00405533                 mov     edx, [esp+3Ch+arg_C]
.text:00405537                 mov     [esp+3Ch+var_8], ebx
.text:0040553B                 mov     ebx, [esp+3Ch+arg_4]
.text:0040553F                 test    edx, edx
.text:00405541                 mov     [esp+3Ch+var_4], esi
.text:00405545                 mov     esi, [esp+3Ch+arg_0]
.text:00405549                 movzx   ecx, [esp+3Ch+arg_8]
.text:0040554E                 jz      loc_4055FD
.text:00405554                 cmp     dword ptr [edx], 3
.text:00405557                 ja      loc_4055E4
.text:0040555D                 mov     eax, [edx+28h]
.text:00405560                 dec     eax
.text:00405561                 cmp     eax, 2
.text:00405564                 ja      short loc_4055C8
.text:00405566                 mov     [esp+3Ch+var_24], edx ; int
.text:0040556A                 mov     eax, [esp+3Ch+arg_14]
.text:0040556E                 movzx   edx, cl
.text:00405571                 mov     [esp+3Ch+FileName], ebx ; FileName
.text:00405575                 mov     [esp+3Ch+var_18], eax ; int
.text:00405579                 mov     eax, [esp+3Ch+arg_10]
.text:0040557D                 mov     [esp+3Ch+Str2], esi ; Str2
.text:00405580                 mov     ds:dword_421060, esi
.text:00405586                 mov     ds:dword_421070, ebx
.text:0040558C                 mov     [esp+3Ch+var_1C], eax ; int
.text:00405590                 mov     dword ptr [esp+3Ch+var_20], 1 ; char
.text:00405598                 mov     [esp+3Ch+var_28], 0 ; int
.text:004055A0                 mov     [esp+3Ch+var_30], 0 ; int
.text:004055A8                 mov     [esp+3Ch+var_2C], 0 ; int
.text:004055B0                 mov     [esp+3Ch+var_34], edx ; int
.text:004055B4                 call    sub_403910
.text:004055B9                 mov     ebx, [esp+3Ch+var_8]
.text:004055BD                 movzx   eax, al
.text:004055C0                 mov     esi, [esp+3Ch+var_4]
.text:004055C4                 add     esp, 3Ch
.text:004055C7                 retn
.text:004055C8 ; ---------------------------------------------------------------------------
.text:004055C8
.text:004055C8 loc_4055C8:                             ; CODE XREF: sub_405530+34↑j
.text:004055C8                 mov     [esp+3Ch+var_34], 67Ah
.text:004055D0                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/copy.c"
.text:004055D8                 mov     [esp+3Ch+Str2], offset aValidSparseMod ; "VALID_SPARSE_MODE (co->sparse_mode)"
.text:004055DF
.text:004055DF loc_4055DF:                             ; CODE XREF: sub_405530+CB↓j
.text:004055DF                                         ; sub_405530+E4↓j
.text:004055DF                 call    _assert
.text:004055E4 ; ---------------------------------------------------------------------------
.text:004055E4
.text:004055E4 loc_4055E4:                             ; CODE XREF: sub_405530+27↑j
.text:004055E4                 mov     [esp+3Ch+var_34], 679h
.text:004055EC                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/copy.c"
.text:004055F4                 mov     [esp+3Ch+Str2], offset aValidBackupTyp ; "VALID_BACKUP_TYPE (co->backup_type)"
.text:004055FB                 jmp     short loc_4055DF
.text:004055FD ; ---------------------------------------------------------------------------
.text:004055FD
.text:004055FD loc_4055FD:                             ; CODE XREF: sub_405530+1E↑j
.text:004055FD                 mov     [esp+3Ch+var_34], 678h
.text:00405605                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/copy.c"
.text:0040560D                 mov     [esp+3Ch+Str2], offset aCoNull ; "co != NULL"
.text:00405614                 jmp     short loc_4055DF
.text:00405614 sub_405530      endp
.text:00405614
.text:00405614 ; ---------------------------------------------------------------------------
.text:00405616 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: sub_405630+195↓o
.text:00405627                 align 10h
.text:00405630
.text:00405630 ; =============== S U B R O U T I N E =======================================
.text:00405630
.text:00405630
.text:00405630 ; int __cdecl sub_405630(LPCSTR, int, char, int, int, int, int)
.text:00405630 sub_405630      proc near               ; CODE XREF: sub_403910+D9C↑p
.text:00405630
.text:00405630 Block           = dword ptr -9Ch
.text:00405630 ErrorMessage    = dword ptr -98h
.text:00405630 var_94          = dword ptr -94h
.text:00405630 var_90          = byte ptr -90h
.text:00405630 var_8C          = dword ptr -8Ch
.text:00405630 var_88          = dword ptr -88h
.text:00405630 var_84          = dword ptr -84h
.text:00405630 var_80          = byte ptr -80h
.text:00405630 var_7C          = dword ptr -7Ch
.text:00405630 var_78          = dword ptr -78h
.text:00405630 var_60          = byte ptr -60h
.text:00405630 var_5F          = byte ptr -5Fh
.text:00405630 var_5E          = byte ptr -5Eh
.text:00405630 var_5D          = dword ptr -5Dh
.text:00405630 var_54          = dword ptr -54h
.text:00405630 arg_0           = dword ptr  4
.text:00405630 arg_4           = dword ptr  8
.text:00405630 arg_8           = byte ptr  0Ch
.text:00405630 arg_C           = dword ptr  10h
.text:00405630 arg_10          = dword ptr  14h
.text:00405630 arg_14          = dword ptr  18h
.text:00405630 arg_18          = dword ptr  1Ch
.text:00405630
.text:00405630                 push    ebp
.text:00405631                 mov     ecx, 0Fh
.text:00405636                 push    edi
.text:00405637                 push    esi
.text:00405638                 push    ebx
.text:00405639                 sub     esp, 8Ch
.text:0040563F                 mov     ebx, [esp+9Ch+arg_14]
.text:00405646                 movzx   edx, [esp+9Ch+arg_8]
.text:0040564E                 lea     edi, [esp+9Ch+var_5D+1]
.text:00405652                 cld
.text:00405653                 mov     esi, ebx
.text:00405655                 rep movsd
.text:00405657                 mov     [esp+9Ch+var_5E], dl
.text:0040565B                 mov     edx, [esp+9Ch+arg_0]
.text:00405662                 mov     [esp+9Ch+var_5F], 1
.text:00405667                 mov     [esp+9Ch+Block], edx ; LPCSTR
.text:0040566A                 call    sub_40BF00
.text:0040566F                 test    eax, eax
.text:00405671                 mov     ebp, eax
.text:00405673                 jz      loc_4057B6
.text:00405679                 cmp     dword ptr [ebx+8], 3
.text:0040567D                 jz      loc_4057A9
.text:00405683
.text:00405683 loc_405683:                             ; CODE XREF: sub_405630+181↓j
.text:00405683                 cmp     byte ptr [ebp+0], 0
.text:00405687                 mov     ebx, ebp
.text:00405689                 jz      loc_405791
.text:0040568F                 nop
.text:00405690
.text:00405690 loc_405690:                             ; CODE XREF: sub_405630+15B↓j
.text:00405690                 mov     [esp+9Ch+var_94], 0 ; int
.text:00405698                 mov     edi, [esp+9Ch+arg_0]
.text:0040569F                 mov     [esp+9Ch+ErrorMessage], ebx ; char *
.text:004056A3                 mov     [esp+9Ch+Block], edi ; int
.text:004056A6                 call    sub_40A050
.text:004056AB                 mov     [esp+9Ch+var_94], 0 ; int
.text:004056B3                 mov     edi, eax
.text:004056B5                 mov     eax, [esp+9Ch+arg_4]
.text:004056BC                 mov     [esp+9Ch+ErrorMessage], ebx ; char *
.text:004056C0                 mov     [esp+9Ch+Block], eax ; int
.text:004056C3                 call    sub_40A050
.text:004056C8                 mov     [esp+9Ch+var_78], 0 ; int
.text:004056D0                 mov     esi, eax
.text:004056D2                 lea     ecx, [esp+9Ch+var_5D+1]
.text:004056D6                 mov     [esp+9Ch+var_84], ecx ; int
.text:004056DA                 mov     eax, [esp+9Ch+arg_10]
.text:004056E1                 lea     edx, [esp+9Ch+var_5D]
.text:004056E5                 mov     [esp+9Ch+var_7C], edx ; int
.text:004056E9                 mov     ecx, [esp+9Ch+arg_C]
.text:004056F0                 mov     dword ptr [esp+9Ch+var_80], 0 ; char
.text:004056F8                 mov     [esp+9Ch+var_88], eax ; int
.text:004056FC                 mov     edx, [ecx+14h]
.text:004056FF                 mov     [esp+9Ch+var_60], 0
.text:00405704                 mov     eax, [ecx+10h]
.text:00405707                 mov     [esp+9Ch+ErrorMessage], esi ; FileName
.text:0040570B                 mov     [esp+9Ch+var_8C], edx ; int
.text:0040570F                 movzx   edx, [esp+9Ch+var_5E]
.text:00405714                 mov     dword ptr [esp+9Ch+var_90], eax ; int
.text:00405718                 mov     [esp+9Ch+Block], edi ; Str2
.text:0040571B                 mov     [esp+9Ch+var_94], edx ; int
.text:0040571F                 call    sub_403910
.text:00405724                 test    al, al
.text:00405726                 jz      short loc_405740
.text:00405728                 cmp     [esp+9Ch+var_5F], 0
.text:0040572D                 jz      short loc_405740
.text:0040572F                 mov     [esp+9Ch+var_60], 1
.text:00405734                 lea     esi, [esi+0]
.text:0040573A                 lea     edi, [edi+0]
.text:00405740
.text:00405740 loc_405740:                             ; CODE XREF: sub_405630+F6↑j
.text:00405740                                         ; sub_405630+FD↑j
.text:00405740                 movzx   ecx, [esp+9Ch+var_60]
.text:00405745                 xor     eax, eax
.text:00405747                 cmp     byte ptr [esp+9Ch+var_5D], 0
.text:0040574C                 mov     [esp+9Ch+var_5F], cl
.text:00405750                 jnz     short loc_40575E
.text:00405752                 mov     ecx, [esp+9Ch+arg_18]
.text:00405759                 cmp     byte ptr [ecx], 0
.text:0040575C                 jz      short loc_405760
.text:0040575E
.text:0040575E loc_40575E:                             ; CODE XREF: sub_405630+120↑j
.text:0040575E                 mov     al, 1
.text:00405760
.text:00405760 loc_405760:                             ; CODE XREF: sub_405630+12C↑j
.text:00405760                 mov     edx, [esp+9Ch+arg_18]
.text:00405767                 mov     [edx], al
.text:00405769                 mov     [esp+9Ch+Block], esi ; Block
.text:0040576C                 call    free
.text:00405771                 mov     [esp+9Ch+Block], edi ; Block
.text:00405774                 call    free
.text:00405779                 mov     [esp+9Ch+Block], ebx ; Str
.text:0040577C                 call    strlen
.text:00405781                 lea     esi, [eax+ebx]
.text:00405784                 lea     ebx, [esi+1]
.text:00405787                 cmp     byte ptr [esi+1], 0
.text:0040578B                 jnz     loc_405690
.text:00405791
.text:00405791 loc_405791:                             ; CODE XREF: sub_405630+59↑j
.text:00405791                 mov     [esp+9Ch+Block], ebp ; Block
.text:00405794                 call    free
.text:00405799                 movzx   eax, [esp+9Ch+var_5F]
.text:0040579E
.text:0040579E loc_40579E:                             ; CODE XREF: sub_405630+1C7↓j
.text:0040579E                 add     esp, 8Ch
.text:004057A4                 pop     ebx
.text:004057A5                 pop     esi
.text:004057A6                 pop     edi
.text:004057A7                 pop     ebp
.text:004057A8                 retn
.text:004057A9 ; ---------------------------------------------------------------------------
.text:004057A9
.text:004057A9 loc_4057A9:                             ; CODE XREF: sub_405630+4D↑j
.text:004057A9                 mov     [esp+9Ch+var_54], 2
.text:004057B1                 jmp     loc_405683
.text:004057B6 ; ---------------------------------------------------------------------------
.text:004057B6
.text:004057B6 loc_4057B6:                             ; CODE XREF: sub_405630+43↑j
.text:004057B6                 mov     eax, [esp+9Ch+arg_0]
.text:004057BD                 mov     [esp+9Ch+Block], eax ; char *
.text:004057C0                 call    sub_40AD30
.text:004057C5                 mov     [esp+9Ch+Block], offset aCannotAccessS ; "cannot access %s"
.text:004057CC                 mov     ebx, eax
.text:004057CE                 call    ds:libintl_gettext
.text:004057D4                 mov     esi, eax
.text:004057D6                 call    _errno
.text:004057DB                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:004057DF                 mov     [esp+9Ch+var_94], esi ; char *
.text:004057E3                 mov     ecx, [eax]
.text:004057E5                 mov     [esp+9Ch+Block], 0 ; Code
.text:004057EC                 mov     [esp+9Ch+ErrorMessage], ecx ; ErrorMessage
.text:004057F0                 call    sub_415220
.text:004057F5                 xor     eax, eax
.text:004057F7                 jmp     short loc_40579E
.text:004057F7 sub_405630      endp
.text:004057F7
.text:004057F7 ; ---------------------------------------------------------------------------
.text:004057F9                 align 10h
.text:00405800 aSkippingFileSA db 'skipping file %s, as it was replaced while being copied',0
.text:00405800                                         ; DATA XREF: sub_4058C0+BD↓o
.text:00405838 aClosingS       db 'closing %s',0       ; DATA XREF: sub_4058C0+11C↓o
.text:00405838                                         ; sub_4058C0+338↓o
.text:00405843 aWritingS       db 'writing %s',0       ; DATA XREF: sub_4058C0+2E0↓o
.text:0040584E aCannotLseekS   db 'cannot lseek %s',0  ; DATA XREF: sub_4058C0+39E↓o
.text:0040585E byte_40585E     db 0                    ; DATA XREF: sub_4058C0+3C1↓o
.text:0040585F aReadingS       db 'reading %s',0       ; DATA XREF: sub_4058C0+41E↓o
.text:0040586A aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: sub_4058C0+4D0↓o
.text:0040586A                                         ; sub_4058C0+5A7↓o
.text:0040587A aCannotCreateRe db 'cannot create regular file %s',0
.text:0040587A                                         ; DATA XREF: sub_4058C0+533↓o
.text:00405898 aCannotOpenSFor db 'cannot open %s for reading',0
.text:00405898                                         ; DATA XREF: sub_4058C0+5C2↓o
.text:004058B3                 align 10h
.text:004058C0
.text:004058C0 ; =============== S U B R O U T I N E =======================================
.text:004058C0
.text:004058C0
.text:004058C0 ; int __cdecl sub_4058C0(char *, LPCSTR, int, __int16, int, int)
.text:004058C0 sub_4058C0      proc near               ; CODE XREF: sub_403910+8D1↑p
.text:004058C0
.text:004058C0 FileName        = dword ptr -12Ch
.text:004058C0 OpenFlag        = dword ptr -128h
.text:004058C0 MaxCharCount    = dword ptr -124h
.text:004058C0 Origin          = dword ptr -120h
.text:004058C0 var_116         = byte ptr -116h
.text:004058C0 var_115         = byte ptr -115h
.text:004058C0 var_114         = dword ptr -114h
.text:004058C0 var_110         = dword ptr -110h
.text:004058C0 var_105         = byte ptr -105h
.text:004058C0 FileHandle      = dword ptr -104h
.text:004058C0 var_100         = dword ptr -100h
.text:004058C0 var_FC          = dword ptr -0FCh
.text:004058C0 var_F4          = dword ptr -0F4h
.text:004058C0 var_F0          = dword ptr -0F0h
.text:004058C0 var_EC          = dword ptr -0ECh
.text:004058C0 var_E8          = dword ptr -0E8h
.text:004058C0 var_8C          = dword ptr -8Ch
.text:004058C0 var_5C          = dword ptr -5Ch
.text:004058C0 var_58          = dword ptr -58h
.text:004058C0 var_3C          = dword ptr -3Ch
.text:004058C0 var_34          = dword ptr -34h
.text:004058C0 var_30          = dword ptr -30h
.text:004058C0 arg_0           = dword ptr  4
.text:004058C0 arg_4           = dword ptr  8
.text:004058C0 arg_8           = dword ptr  0Ch
.text:004058C0 arg_C           = word ptr  10h
.text:004058C0 arg_10          = dword ptr  14h
.text:004058C0 arg_14          = dword ptr  18h
.text:004058C0
.text:004058C0                 push    ebp
.text:004058C1                 push    edi
.text:004058C2                 push    esi
.text:004058C3                 push    ebx
.text:004058C4                 sub     esp, 11Ch
.text:004058CA                 mov     edx, [esp+12Ch+arg_0]
.text:004058D1                 movzx   edi, [esp+12Ch+arg_C]
.text:004058D9                 mov     [esp+12Ch+var_105], 1
.text:004058DE                 mov     ebp, [esp+12Ch+arg_14]
.text:004058E5                 mov     [esp+12Ch+var_114], 0
.text:004058ED                 mov     [esp+12Ch+var_110], 0
.text:004058F5                 mov     [esp+12Ch+var_115], 0
.text:004058FA                 mov     [esp+12Ch+var_116], 0
.text:004058FF                 mov     [esp+12Ch+OpenFlag], 8000h ; OpenFlag
.text:00405907                 mov     [esp+12Ch+FileName], edx ; FileName
.text:0040590A                 call    _open
.text:0040590F                 mov     [esp+12Ch+FileHandle], eax
.text:00405913                 test    eax, eax
.text:00405915                 js      loc_405E73
.text:0040591B                 mov     ecx, [esp+12Ch+arg_0]
.text:00405922                 lea     esi, [esp+12Ch+var_FC]
.text:00405926                 mov     [esp+12Ch+OpenFlag], esi ; int
.text:0040592A                 mov     [esp+12Ch+FileName], ecx ; char *
.text:0040592D                 call    sub_418A10
.text:00405932                 test    eax, eax
.text:00405934                 jnz     loc_405E58
.text:0040593A                 mov     ebx, [ebp+0Ch]
.text:0040593D                 mov     ecx, [ebp+8]
.text:00405940                 mov     eax, [esp+12Ch+var_F4]
.text:00405944                 mov     edx, [esp+12Ch+var_F0]
.text:00405948                 mov     esi, ebx
.text:0040594A                 xor     eax, ecx
.text:0040594C                 xor     esi, edx
.text:0040594E                 or      esi, eax
.text:00405950                 jnz     short loc_40596E
.text:00405952                 mov     edx, [ebp+14h]
.text:00405955                 mov     esi, [ebp+10h]
.text:00405958                 mov     ecx, [esp+12Ch+var_E8]
.text:0040595C                 mov     ebp, [esp+12Ch+var_EC]
.text:00405960                 mov     eax, edx
.text:00405962                 xor     eax, ecx
.text:00405964                 xor     ebp, esi
.text:00405966                 or      eax, ebp
.text:00405968                 jz      loc_405A13
.text:0040596E
.text:0040596E loc_40596E:                             ; CODE XREF: sub_4058C0+90↑j
.text:0040596E                 mov     ebx, [esp+12Ch+arg_0]
.text:00405975                 mov     [esp+12Ch+FileName], ebx ; char *
.text:00405978                 call    sub_40AD30
.text:0040597D                 mov     [esp+12Ch+FileName], offset aSkippingFileSA ; "skipping file %s, as it was replaced wh"...
.text:00405984                 mov     edi, eax
.text:00405986                 call    ds:libintl_gettext
.text:0040598C                 mov     [esp+12Ch+Origin], edi ; char
.text:00405990                 mov     [esp+12Ch+OpenFlag], 0 ; ErrorMessage
.text:00405998                 mov     [esp+12Ch+MaxCharCount], eax ; char *
.text:0040599C
.text:0040599C loc_40599C:                             ; CODE XREF: sub_4058C0+35C↓j
.text:0040599C                 mov     [esp+12Ch+FileName], 0 ; Code
.text:004059A3                 call    sub_415220
.text:004059A8                 mov     [esp+12Ch+var_105], 0
.text:004059AD
.text:004059AD loc_4059AD:                             ; CODE XREF: sub_4058C0+323↓j
.text:004059AD                 mov     ecx, [esp+12Ch+FileHandle]
.text:004059B1                 mov     [esp+12Ch+FileName], ecx ; FileHandle
.text:004059B4                 call    _close
.text:004059B9                 test    eax, eax
.text:004059BB                 js      short loc_4059CD
.text:004059BD
.text:004059BD loc_4059BD:                             ; CODE XREF: sub_4058C0+151↓j
.text:004059BD                 movzx   eax, [esp+12Ch+var_105]
.text:004059C2
.text:004059C2 loc_4059C2:                             ; CODE XREF: sub_4058C0+5F4↓j
.text:004059C2                 add     esp, 11Ch
.text:004059C8                 pop     ebx
.text:004059C9                 pop     esi
.text:004059CA                 pop     edi
.text:004059CB                 pop     ebp
.text:004059CC                 retn
.text:004059CD ; ---------------------------------------------------------------------------
.text:004059CD
.text:004059CD loc_4059CD:                             ; CODE XREF: sub_4058C0+FB↑j
.text:004059CD                 mov     esi, [esp+12Ch+arg_0]
.text:004059D4                 mov     [esp+12Ch+FileName], esi ; char *
.text:004059D7                 call    sub_40AD30
.text:004059DC                 mov     [esp+12Ch+FileName], offset aClosingS ; "closing %s"
.text:004059E3                 mov     ebx, eax
.text:004059E5                 call    ds:libintl_gettext
.text:004059EB                 mov     ebp, eax
.text:004059ED                 call    _errno
.text:004059F2                 mov     [esp+12Ch+Origin], ebx ; char
.text:004059F6                 mov     [esp+12Ch+MaxCharCount], ebp ; char *
.text:004059FA                 mov     edx, [eax]
.text:004059FC                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00405A03                 mov     [esp+12Ch+OpenFlag], edx ; ErrorMessage
.text:00405A07                 call    sub_415220
.text:00405A0C                 mov     [esp+12Ch+var_105], 0
.text:00405A11                 jmp     short loc_4059BD
.text:00405A13 ; ---------------------------------------------------------------------------
.text:00405A13
.text:00405A13 loc_405A13:                             ; CODE XREF: sub_4058C0+A8↑j
.text:00405A13                 mov     ebp, [esp+12Ch+arg_10]
.text:00405A1A                 cmp     byte ptr [ebp+0], 0
.text:00405A1E                 jnz     loc_405E1C
.text:00405A24                 mov     [esp+12Ch+MaxCharCount], edi
.text:00405A28                 mov     eax, [esp+12Ch+arg_4]
.text:00405A2F                 mov     [esp+12Ch+OpenFlag], 8201h ; OpenFlag
.text:00405A37                 mov     [esp+12Ch+FileName], eax ; FileName
.text:00405A3A                 call    _open
.text:00405A3F                 mov     [esp+12Ch+var_100], eax
.text:00405A43                 test    eax, eax
.text:00405A45                 js      loc_405DCB
.text:00405A4B
.text:00405A4B loc_405A4B:                             ; CODE XREF: sub_4058C0+51E↓j
.text:00405A4B                 mov     esi, [esp+12Ch+var_100]
.text:00405A4F                 lea     ebx, [esp+12Ch+var_8C]
.text:00405A56                 mov     [esp+12Ch+OpenFlag], ebx
.text:00405A5A                 mov     [esp+12Ch+FileName], esi
.text:00405A5D                 call    sub_4155D0
.text:00405A62                 test    eax, eax
.text:00405A64                 jnz     loc_405DBF
.text:00405A6A                 mov     edx, [esp+12Ch+var_3C]
.text:00405A71                 lea     edi, [edx-1]
.text:00405A74                 mov     ebp, edx
.text:00405A76                 cmp     edi, 3FFFFFh
.text:00405A7C                 jbe     short loc_405A83
.text:00405A7E                 mov     ebp, 200h
.text:00405A83
.text:00405A83 loc_405A83:                             ; CODE XREF: sub_4058C0+1BC↑j
.text:00405A83                 mov     esi, [esp+12Ch+arg_8]
.text:00405A8A                 mov     edx, [esi+28h]
.text:00405A8D                 cmp     edx, 3
.text:00405A90                 jz      loc_405D9C
.text:00405A96
.text:00405A96 loc_405A96:                             ; CODE XREF: sub_4058C0+4EF↓j
.text:00405A96                                         ; sub_4058C0+4FA↓j
.text:00405A96                 cmp     edx, 2
.text:00405A99                 jz      loc_405CEA
.text:00405A9F
.text:00405A9F loc_405A9F:                             ; CODE XREF: sub_4058C0+43D↓j
.text:00405A9F                                         ; sub_4058C0+46A↓j ...
.text:00405A9F                 call    sub_419A20
.text:00405AA4                 mov     ebx, eax
.text:00405AA6                 mov     esi, 4
.text:00405AAB                 mov     edi, eax
.text:00405AAD                 mov     ecx, 4
.text:00405AB2                 lea     esi, [esi+0]
.text:00405AB9                 lea     edi, [edi+0]
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_4058C0+20C↓j
.text:00405AC0                 mov     eax, edi
.text:00405AC2                 xor     edx, edx
.text:00405AC4                 mov     edi, ecx
.text:00405AC6                 div     ecx
.text:00405AC8                 test    edx, edx
.text:00405ACA                 mov     ecx, edx
.text:00405ACC                 jnz     short loc_405AC0
.text:00405ACE                 mov     eax, esi
.text:00405AD0                 xor     edx, edx
.text:00405AD2                 div     edi
.text:00405AD4                 imul    ebx, eax
.text:00405AD7                 lea     edx, [ebx+ebp+3]
.text:00405ADB                 mov     [esp+12Ch+FileName], edx ; Size
.text:00405ADE                 call    malloc
.text:00405AE3                 lea     ecx, [ebx+eax-1]
.text:00405AE7                 xor     edx, edx
.text:00405AE9                 mov     eax, ecx
.text:00405AEB                 div     ebx
.text:00405AED                 mov     edi, ecx
.text:00405AEF                 sub     edi, edx
.text:00405AF1                 jmp     short loc_405B00
.text:00405AF1 ; ---------------------------------------------------------------------------
.text:00405AF3                 align 10h
.text:00405B00
.text:00405B00 loc_405B00:                             ; CODE XREF: sub_4058C0+231↑j
.text:00405B00                                         ; sub_4058C0+2A7↓j ...
.text:00405B00                 mov     [esp+12Ch+MaxCharCount], ebp ; MaxCharCount
.text:00405B04                 mov     ebx, [esp+12Ch+FileHandle]
.text:00405B08                 mov     [esp+12Ch+OpenFlag], edi ; DstBuf
.text:00405B0C                 mov     [esp+12Ch+FileName], ebx ; FileHandle
.text:00405B0F                 call    _read
.text:00405B14                 test    eax, eax
.text:00405B16                 mov     ebx, eax
.text:00405B18                 js      loc_405CC1
.text:00405B1E                 test    eax, eax
.text:00405B20                 jz      loc_405C6A
.text:00405B26                 cdq
.text:00405B27                 add     [esp+12Ch+var_114], eax
.text:00405B2B                 adc     [esp+12Ch+var_110], edx
.text:00405B2F                 cmp     [esp+12Ch+var_116], 0
.text:00405B34                 jz      short loc_405B70
.text:00405B36                 mov     byte ptr [ebx+edi], 1
.text:00405B3A                 mov     esi, edi
.text:00405B3C                 lea     esi, [esi+0]
.text:00405B40
.text:00405B40 loc_405B40:                             ; CODE XREF: sub_4058C0+287↓j
.text:00405B40                 mov     ecx, [esi]
.text:00405B42                 add     esi, 4
.text:00405B45                 test    ecx, ecx
.text:00405B47                 jz      short loc_405B40
.text:00405B49                 lea     edx, [esi-4]
.text:00405B4C                 lea     esi, [esi+0]
.text:00405B50
.text:00405B50 loc_405B50:                             ; CODE XREF: sub_4058C0+296↓j
.text:00405B50                 movzx   ecx, byte ptr [edx]
.text:00405B53                 inc     edx
.text:00405B54                 test    cl, cl
.text:00405B56                 jz      short loc_405B50
.text:00405B58                 lea     ecx, [ebx+edi]
.text:00405B5B                 cmp     edx, ecx
.text:00405B5D                 ja      loc_405C21
.text:00405B63                 xor     esi, esi
.text:00405B65
.text:00405B65 loc_405B65:                             ; CODE XREF: sub_4058C0+389↓j
.text:00405B65                 test    esi, esi
.text:00405B67                 jnz     short loc_405B00
.text:00405B69                 lea     esi, [esi+0]
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: sub_4058C0+274↑j
.text:00405B70                 mov     [esp+12Ch+MaxCharCount], ebx
.text:00405B74                 mov     esi, [esp+12Ch+var_100]
.text:00405B78                 mov     [esp+12Ch+OpenFlag], edi
.text:00405B7C                 mov     [esp+12Ch+FileName], esi
.text:00405B7F                 call    sub_40BEA0
.text:00405B84                 mov     [esp+12Ch+var_115], 0
.text:00405B89                 cmp     eax, ebx
.text:00405B8B                 jz      loc_405B00
.text:00405B91
.text:00405B91 loc_405B91:                             ; CODE XREF: sub_4058C0+3D2↓j
.text:00405B91                                         ; sub_4058C0+3FC↓j
.text:00405B91                 mov     edx, [esp+12Ch+arg_4]
.text:00405B98                 mov     [esp+12Ch+FileName], edx ; char *
.text:00405B9B                 call    sub_40AD30
.text:00405BA0                 mov     [esp+12Ch+FileName], offset aWritingS ; "writing %s"
.text:00405BA7
.text:00405BA7 loc_405BA7:                             ; CODE XREF: sub_4058C0+3A5↓j
.text:00405BA7                                         ; sub_4058C0+425↓j ...
.text:00405BA7                 mov     esi, eax
.text:00405BA9                 call    ds:libintl_gettext
.text:00405BAF                 mov     edi, eax
.text:00405BB1                 call    _errno
.text:00405BB6                 mov     [esp+12Ch+Origin], esi ; char
.text:00405BBA                 mov     [esp+12Ch+MaxCharCount], edi ; char *
.text:00405BBE                 mov     esi, [eax]
.text:00405BC0                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00405BC7                 mov     [esp+12Ch+OpenFlag], esi ; ErrorMessage
.text:00405BCB                 call    sub_415220
.text:00405BD0                 mov     [esp+12Ch+var_105], 0
.text:00405BD5
.text:00405BD5 loc_405BD5:                             ; CODE XREF: sub_4058C0+3AF↓j
.text:00405BD5                                         ; sub_4058C0+3F6↓j
.text:00405BD5                 mov     eax, [esp+12Ch+var_100]
.text:00405BD9                 mov     [esp+12Ch+FileName], eax ; FileHandle
.text:00405BDC                 call    _close
.text:00405BE1                 test    eax, eax
.text:00405BE3                 jns     loc_4059AD
.text:00405BE9                 mov     ebx, [esp+12Ch+arg_4]
.text:00405BF0                 mov     [esp+12Ch+FileName], ebx ; char *
.text:00405BF3                 call    sub_40AD30
.text:00405BF8                 mov     [esp+12Ch+FileName], offset aClosingS ; "closing %s"
.text:00405BFF
.text:00405BFF loc_405BFF:                             ; CODE XREF: sub_4058C0+53A↓j
.text:00405BFF                                         ; sub_4058C0+593↓j ...
.text:00405BFF                 mov     esi, eax
.text:00405C01                 call    ds:libintl_gettext
.text:00405C07                 mov     edi, eax
.text:00405C09                 call    _errno
.text:00405C0E                 mov     [esp+12Ch+Origin], esi
.text:00405C12                 mov     [esp+12Ch+MaxCharCount], edi
.text:00405C16                 mov     ebp, [eax]
.text:00405C18                 mov     [esp+12Ch+OpenFlag], ebp
.text:00405C1C                 jmp     loc_40599C
.text:00405C21 ; ---------------------------------------------------------------------------
.text:00405C21
.text:00405C21 loc_405C21:                             ; CODE XREF: sub_4058C0+29D↑j
.text:00405C21                 mov     [esp+12Ch+Origin], 1 ; Origin
.text:00405C29                 mov     edx, [esp+12Ch+var_100]
.text:00405C2D                 mov     eax, ebx
.text:00405C2F                 mov     [esp+12Ch+OpenFlag], ebx ; Offset
.text:00405C33                 sar     eax, 1Fh
.text:00405C36                 mov     [esp+12Ch+MaxCharCount], eax
.text:00405C3A                 mov     [esp+12Ch+FileName], edx ; FileHandle
.text:00405C3D                 call    _lseeki64
.text:00405C42                 mov     [esp+12Ch+var_115], 1
.text:00405C47                 test    edx, edx
.text:00405C49                 jns     loc_405B65
.text:00405C4F                 mov     eax, [esp+12Ch+arg_4]
.text:00405C56                 mov     [esp+12Ch+FileName], eax ; char *
.text:00405C59                 call    sub_40AD30
.text:00405C5E                 mov     [esp+12Ch+FileName], offset aCannotLseekS ; "cannot lseek %s"
.text:00405C65                 jmp     loc_405BA7
.text:00405C6A ; ---------------------------------------------------------------------------
.text:00405C6A
.text:00405C6A loc_405C6A:                             ; CODE XREF: sub_4058C0+260↑j
.text:00405C6A                 cmp     [esp+12Ch+var_115], 0
.text:00405C6F                 jz      loc_405BD5
.text:00405C75                 mov     [esp+12Ch+MaxCharCount], 1
.text:00405C7D                 mov     edi, [esp+12Ch+var_100]
.text:00405C81                 mov     [esp+12Ch+OpenFlag], offset byte_40585E
.text:00405C89                 mov     [esp+12Ch+FileName], edi
.text:00405C8C                 call    sub_40BEA0
.text:00405C91                 dec     eax
.text:00405C92                 jnz     loc_405B91
.text:00405C98                 mov     ecx, [esp+12Ch+var_114]
.text:00405C9C                 mov     ebp, [esp+12Ch+var_110]
.text:00405CA0                 mov     ebx, [esp+12Ch+var_100]
.text:00405CA4                 mov     [esp+12Ch+OpenFlag], ecx
.text:00405CA8                 mov     [esp+12Ch+MaxCharCount], ebp
.text:00405CAC                 mov     [esp+12Ch+FileName], ebx
.text:00405CAF                 call    sub_4198C0
.text:00405CB4                 test    eax, eax
.text:00405CB6                 jns     loc_405BD5
.text:00405CBC                 jmp     loc_405B91
.text:00405CC1 ; ---------------------------------------------------------------------------
.text:00405CC1
.text:00405CC1 loc_405CC1:                             ; CODE XREF: sub_4058C0+258↑j
.text:00405CC1                 call    _errno
.text:00405CC6                 cmp     dword ptr [eax], 4
.text:00405CC9                 jz      loc_405B00
.text:00405CCF                 mov     ebp, [esp+12Ch+arg_0]
.text:00405CD6                 mov     [esp+12Ch+FileName], ebp ; char *
.text:00405CD9                 call    sub_40AD30
.text:00405CDE                 mov     [esp+12Ch+FileName], offset aReadingS ; "reading %s"
.text:00405CE5                 jmp     loc_405BA7
.text:00405CEA ; ---------------------------------------------------------------------------
.text:00405CEA
.text:00405CEA loc_405CEA:                             ; CODE XREF: sub_4058C0+1D9↑j
.text:00405CEA                 mov     edi, [esp+12Ch+var_8C]
.text:00405CF1                 and     edi, 0F000h
.text:00405CF7                 cmp     edi, 8000h
.text:00405CFD                 jnz     loc_405A9F
.text:00405D03                 mov     [esp+12Ch+OpenFlag], ebx
.text:00405D07                 mov     ebx, [esp+12Ch+FileHandle]
.text:00405D0B                 mov     [esp+12Ch+FileName], ebx
.text:00405D0E                 call    sub_4155D0
.text:00405D13                 test    eax, eax
.text:00405D15                 jnz     short loc_405D81
.text:00405D17                 mov     edx, [esp+12Ch+var_8C]
.text:00405D1E                 and     edx, 0F000h
.text:00405D24                 cmp     edx, 8000h
.text:00405D2A                 jnz     loc_405A9F
.text:00405D30                 mov     edx, [esp+12Ch+var_58]
.text:00405D37                 mov     eax, [esp+12Ch+var_5C]
.text:00405D3E                 test    edx, edx
.text:00405D40                 js      short loc_405D77
.text:00405D42
.text:00405D42 loc_405D42:                             ; CODE XREF: sub_4058C0+4BF↓j
.text:00405D42                 mov     esi, [esp+12Ch+var_30]
.text:00405D49                 mov     edi, edx
.text:00405D4B                 mov     ecx, eax
.text:00405D4D                 shrd    ecx, edx, 9
.text:00405D51                 mov     eax, [esp+12Ch+var_34]
.text:00405D58                 sar     edi, 9
.text:00405D5B                 cmp     edi, esi
.text:00405D5D                 jl      loc_405A9F
.text:00405D63                 jg      short loc_405D6D
.text:00405D65                 cmp     ecx, eax
.text:00405D67                 jbe     loc_405A9F
.text:00405D6D
.text:00405D6D loc_405D6D:                             ; CODE XREF: sub_4058C0+4A3↑j
.text:00405D6D                 mov     [esp+12Ch+var_116], 1
.text:00405D72                 jmp     loc_405A9F
.text:00405D77 ; ---------------------------------------------------------------------------
.text:00405D77
.text:00405D77 loc_405D77:                             ; CODE XREF: sub_4058C0+480↑j
.text:00405D77                 add     eax, 1FFh
.text:00405D7C                 adc     edx, 0
.text:00405D7F                 jmp     short loc_405D42
.text:00405D81 ; ---------------------------------------------------------------------------
.text:00405D81
.text:00405D81 loc_405D81:                             ; CODE XREF: sub_4058C0+455↑j
.text:00405D81                 mov     ebp, [esp+12Ch+arg_0]
.text:00405D88                 mov     [esp+12Ch+FileName], ebp ; char *
.text:00405D8B
.text:00405D8B loc_405D8B:                             ; CODE XREF: sub_4058C0+509↓j
.text:00405D8B                 call    sub_40AD30
.text:00405D90                 mov     [esp+12Ch+FileName], offset aCannotFstatS ; "cannot fstat %s"
.text:00405D97                 jmp     loc_405BA7
.text:00405D9C ; ---------------------------------------------------------------------------
.text:00405D9C
.text:00405D9C loc_405D9C:                             ; CODE XREF: sub_4058C0+1D0↑j
.text:00405D9C                 mov     ecx, [esp+12Ch+var_8C]
.text:00405DA3                 and     ecx, 0F000h
.text:00405DA9                 cmp     ecx, 8000h
.text:00405DAF                 jnz     loc_405A96
.text:00405DB5                 mov     [esp+12Ch+var_116], 1
.text:00405DBA                 jmp     loc_405A96
.text:00405DBF ; ---------------------------------------------------------------------------
.text:00405DBF
.text:00405DBF loc_405DBF:                             ; CODE XREF: sub_4058C0+1A4↑j
.text:00405DBF                 mov     ecx, [esp+12Ch+arg_4]
.text:00405DC6                 mov     [esp+12Ch+FileName], ecx
.text:00405DC9                 jmp     short loc_405D8B
.text:00405DCB ; ---------------------------------------------------------------------------
.text:00405DCB
.text:00405DCB loc_405DCB:                             ; CODE XREF: sub_4058C0+185↑j
.text:00405DCB                 mov     esi, [esp+12Ch+arg_8]
.text:00405DD2                 cmp     byte ptr [esi+0Dh], 0
.text:00405DD6                 jnz     short loc_405DFF
.text:00405DD8
.text:00405DD8 loc_405DD8:                             ; CODE XREF: sub_4058C0+57B↓j
.text:00405DD8                 mov     ebp, [esp+12Ch+var_100]
.text:00405DDC                 test    ebp, ebp
.text:00405DDE                 jns     loc_405A4B
.text:00405DE4                 mov     eax, [esp+12Ch+arg_4]
.text:00405DEB                 mov     [esp+12Ch+FileName], eax ; char *
.text:00405DEE                 call    sub_40AD30
.text:00405DF3                 mov     [esp+12Ch+FileName], offset aCannotCreateRe ; "cannot create regular file %s"
.text:00405DFA                 jmp     loc_405BFF
.text:00405DFF ; ---------------------------------------------------------------------------
.text:00405DFF
.text:00405DFF loc_405DFF:                             ; CODE XREF: sub_4058C0+516↑j
.text:00405DFF                 mov     ecx, [esp+12Ch+arg_4]
.text:00405E06                 mov     [esp+12Ch+FileName], ecx ; LPCSTR
.text:00405E09                 call    sub_4195A0
.text:00405E0E                 test    eax, eax
.text:00405E10                 jnz     short loc_405E3D
.text:00405E12                 mov     ebx, [esp+12Ch+arg_10]
.text:00405E19                 mov     byte ptr [ebx], 1
.text:00405E1C
.text:00405E1C loc_405E1C:                             ; CODE XREF: sub_4058C0+15E↑j
.text:00405E1C                 mov     [esp+12Ch+MaxCharCount], edi
.text:00405E20                 mov     edi, [esp+12Ch+arg_4]
.text:00405E27                 mov     [esp+12Ch+OpenFlag], 8101h ; OpenFlag
.text:00405E2F                 mov     [esp+12Ch+FileName], edi ; FileName
.text:00405E32                 call    _open
.text:00405E37                 mov     [esp+12Ch+var_100], eax
.text:00405E3B                 jmp     short loc_405DD8
.text:00405E3D ; ---------------------------------------------------------------------------
.text:00405E3D
.text:00405E3D loc_405E3D:                             ; CODE XREF: sub_4058C0+550↑j
.text:00405E3D                 mov     edx, [esp+12Ch+arg_4]
.text:00405E44                 mov     [esp+12Ch+FileName], edx ; char *
.text:00405E47                 call    sub_40AD30
.text:00405E4C                 mov     [esp+12Ch+FileName], offset aCannotRemoveS ; "cannot remove %s"
.text:00405E53                 jmp     loc_405BFF
.text:00405E58 ; ---------------------------------------------------------------------------
.text:00405E58
.text:00405E58 loc_405E58:                             ; CODE XREF: sub_4058C0+74↑j
.text:00405E58                 mov     ebp, [esp+12Ch+arg_0]
.text:00405E5F                 mov     [esp+12Ch+FileName], ebp ; char *
.text:00405E62                 call    sub_40AD30
.text:00405E67                 mov     [esp+12Ch+FileName], offset aCannotFstatS ; "cannot fstat %s"
.text:00405E6E                 jmp     loc_405BFF
.text:00405E73 ; ---------------------------------------------------------------------------
.text:00405E73
.text:00405E73 loc_405E73:                             ; CODE XREF: sub_4058C0+55↑j
.text:00405E73                 mov     eax, [esp+12Ch+arg_0]
.text:00405E7A                 mov     [esp+12Ch+FileName], eax ; char *
.text:00405E7D                 call    sub_40AD30
.text:00405E82                 mov     [esp+12Ch+FileName], offset aCannotOpenSFor ; "cannot open %s for reading"
.text:00405E89                 mov     ebx, eax
.text:00405E8B                 call    ds:libintl_gettext
.text:00405E91                 mov     edi, eax
.text:00405E93                 call    _errno
.text:00405E98                 mov     [esp+12Ch+Origin], ebx ; char
.text:00405E9C                 mov     [esp+12Ch+MaxCharCount], edi ; char *
.text:00405EA0                 mov     edx, [eax]
.text:00405EA2                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00405EA9                 mov     [esp+12Ch+OpenFlag], edx ; ErrorMessage
.text:00405EAD                 call    sub_415220
.text:00405EB2                 xor     eax, eax
.text:00405EB4                 jmp     loc_4059C2
.text:00405EB4 sub_4058C0      endp
.text:00405EB4
.text:00405EB4 ; ---------------------------------------------------------------------------
.text:00405EB9                 align 10h
.text:00405EC0
.text:00405EC0 ; =============== S U B R O U T I N E =======================================
.text:00405EC0
.text:00405EC0
.text:00405EC0 ; int __cdecl sub_405EC0(char *, int, char *, int, int, int, int)
.text:00405EC0 sub_405EC0      proc near               ; CODE XREF: sub_403910+12FE↑p
.text:00405EC0
.text:00405EC0 var_11C         = dword ptr -11Ch
.text:00405EC0 var_118         = dword ptr -118h
.text:00405EC0 var_102         = byte ptr -102h
.text:00405EC0 var_101         = byte ptr -101h
.text:00405EC0 var_100         = dword ptr -100h
.text:00405EC0 var_FC          = dword ptr -0FCh
.text:00405EC0 var_F4          = dword ptr -0F4h
.text:00405EC0 var_F0          = dword ptr -0F0h
.text:00405EC0 var_EC          = dword ptr -0ECh
.text:00405EC0 var_E8          = dword ptr -0E8h
.text:00405EC0 var_8C          = dword ptr -8Ch
.text:00405EC0 var_84          = dword ptr -84h
.text:00405EC0 var_80          = dword ptr -80h
.text:00405EC0 var_7C          = dword ptr -7Ch
.text:00405EC0 var_78          = dword ptr -78h
.text:00405EC0 arg_0           = dword ptr  4
.text:00405EC0 arg_4           = dword ptr  8
.text:00405EC0 arg_8           = dword ptr  0Ch
.text:00405EC0 arg_C           = dword ptr  10h
.text:00405EC0 arg_10          = dword ptr  14h
.text:00405EC0 arg_14          = dword ptr  18h
.text:00405EC0 arg_18          = dword ptr  1Ch
.text:00405EC0
.text:00405EC0                 push    ebp
.text:00405EC1                 push    edi
.text:00405EC2                 push    esi
.text:00405EC3                 push    ebx
.text:00405EC4                 sub     esp, 10Ch
.text:00405ECA                 mov     edi, [esp+11Ch+arg_4]
.text:00405ED1                 mov     [esp+11Ch+var_101], 0
.text:00405ED6                 mov     ebp, [esp+11Ch+arg_C]
.text:00405EDD                 mov     ebx, [edi+0Ch]
.text:00405EE0                 mov     ecx, [edi+8]
.text:00405EE3                 mov     eax, [ebp+8]
.text:00405EE6                 mov     edx, [ebp+0Ch]
.text:00405EE9                 mov     esi, ebx
.text:00405EEB                 xor     eax, ecx
.text:00405EED                 xor     esi, edx
.text:00405EEF                 or      esi, eax
.text:00405EF1                 jnz     short loc_405F10
.text:00405EF3                 mov     ebx, [edi+14h]
.text:00405EF6                 mov     ecx, [edi+10h]
.text:00405EF9                 mov     eax, [ebp+10h]
.text:00405EFC                 mov     edx, [ebp+14h]
.text:00405EFF                 mov     esi, ebx
.text:00405F01                 xor     eax, ecx
.text:00405F03                 xor     esi, edx
.text:00405F05                 or      esi, eax
.text:00405F07                 jnz     short loc_405F10
.text:00405F09                 mov     [esp+11Ch+var_101], 1
.text:00405F0E                 mov     esi, esi
.text:00405F10
.text:00405F10 loc_405F10:                             ; CODE XREF: sub_405EC0+31↑j
.text:00405F10                                         ; sub_405EC0+47↑j
.text:00405F10                 cmp     [esp+11Ch+var_101], 0
.text:00405F15                 mov     eax, [esp+11Ch+arg_14]
.text:00405F1C                 mov     ecx, [esp+11Ch+arg_18]
.text:00405F23                 mov     byte ptr [eax], 0
.text:00405F26                 mov     byte ptr [ecx], 0
.text:00405F29                 jz      short loc_405F3C
.text:00405F2B                 mov     edx, [esp+11Ch+arg_10]
.text:00405F32                 cmp     byte ptr [edx+0Eh], 0
.text:00405F36                 jnz     loc_406300
.text:00405F3C
.text:00405F3C loc_405F3C:                             ; CODE XREF: sub_405EC0+69↑j
.text:00405F3C                 mov     ecx, [esp+11Ch+arg_10]
.text:00405F43                 cmp     dword ptr [ecx+8], 2
.text:00405F47                 jz      loc_406332
.text:00405F4D                 cmp     [esp+11Ch+var_101], 0
.text:00405F52                 mov     edx, 1
.text:00405F57                 jnz     short loc_405F66
.text:00405F59
.text:00405F59 loc_405F59:                             ; CODE XREF: sub_405EC0+D5↓j
.text:00405F59                                         ; sub_405EC0+1BE↓j ...
.text:00405F59                 add     esp, 10Ch
.text:00405F5F                 mov     eax, edx
.text:00405F61                 pop     ebx
.text:00405F62                 pop     esi
.text:00405F63                 pop     edi
.text:00405F64                 pop     ebp
.text:00405F65                 retn
.text:00405F66 ; ---------------------------------------------------------------------------
.text:00405F66
.text:00405F66 loc_405F66:                             ; CODE XREF: sub_405EC0+97↑j
.text:00405F66                 mov     ebp, [esp+11Ch+arg_8]
.text:00405F6D                 lea     edi, [esp+11Ch+var_8C]
.text:00405F74                 mov     [esp+11Ch+var_118], edi
.text:00405F78                 mov     [esp+11Ch+var_11C], ebp
.text:00405F7B                 call    sub_417720
.text:00405F80                 test    eax, eax
.text:00405F82                 jz      short loc_405F97
.text:00405F84                 lea     esi, [esi+0]
.text:00405F8A                 lea     edi, [edi+0]
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: sub_405EC0+F0↓j
.text:00405F90                                         ; sub_405EC0+185↓j ...
.text:00405F90                 mov     edx, 1
.text:00405F95                 jmp     short loc_405F59
.text:00405F97 ; ---------------------------------------------------------------------------
.text:00405F97
.text:00405F97 loc_405F97:                             ; CODE XREF: sub_405EC0+C2↑j
.text:00405F97                 mov     edx, [esp+11Ch+arg_0]
.text:00405F9E                 lea     ecx, [esp+11Ch+var_FC]
.text:00405FA2                 mov     [esp+11Ch+var_118], ecx
.text:00405FA6                 mov     [esp+11Ch+var_11C], edx
.text:00405FA9                 call    sub_417720
.text:00405FAE                 test    eax, eax
.text:00405FB0                 jnz     short loc_405F90
.text:00405FB2                 mov     [esp+11Ch+var_102], 0
.text:00405FB7                 lea     ebx, [esp+11Ch+var_FC]
.text:00405FBB                 mov     ecx, [esp+11Ch+var_F4]
.text:00405FBF                 mov     [esp+11Ch+var_100], ebx
.text:00405FC3                 mov     eax, [esp+11Ch+var_84]
.text:00405FCA                 mov     ebp, edi
.text:00405FCC                 mov     ebx, [esp+11Ch+var_F0]
.text:00405FD0                 mov     edx, [esp+11Ch+var_80]
.text:00405FD7                 xor     eax, ecx
.text:00405FD9                 mov     esi, ebx
.text:00405FDB                 xor     esi, edx
.text:00405FDD                 or      esi, eax
.text:00405FDF                 jnz     short loc_406006
.text:00405FE1                 mov     ebx, [esp+11Ch+var_E8]
.text:00405FE5                 mov     ecx, [esp+11Ch+var_EC]
.text:00405FE9                 mov     eax, [esp+11Ch+var_7C]
.text:00405FF0                 mov     edx, [esp+11Ch+var_78]
.text:00405FF7                 mov     esi, ebx
.text:00405FF9                 xor     eax, ecx
.text:00405FFB                 xor     esi, edx
.text:00405FFD                 or      esi, eax
.text:00405FFF                 jnz     short loc_406006
.text:00406001                 mov     [esp+11Ch+var_102], 1
.text:00406006
.text:00406006 loc_406006:                             ; CODE XREF: sub_405EC0+11F↑j
.text:00406006                                         ; sub_405EC0+13F↑j
.text:00406006                 movzx   ecx, [esp+11Ch+var_102]
.text:0040600B                 mov     esi, [esp+11Ch+var_FC]
.text:0040600F                 and     esi, 0F000h
.text:00406015                 cmp     esi, 0A000h
.text:0040601B                 jz      loc_406308
.text:00406021                 jmp     short loc_406030
.text:00406021 ; ---------------------------------------------------------------------------
.text:00406023                 align 10h
.text:00406030
.text:00406030 loc_406030:                             ; CODE XREF: sub_405EC0+161↑j
.text:00406030                                         ; sub_405EC0+456↓j ...
.text:00406030                 mov     esi, [esp+11Ch+arg_10]
.text:00406037                 mov     edi, [esi]
.text:00406039                 test    edi, edi
.text:0040603B                 jz      short loc_4060B7
.text:0040603D                 test    cl, cl
.text:0040603F                 jnz     short loc_406090
.text:00406041                 cmp     byte ptr [esi+14h], 0
.text:00406045                 jnz     loc_405F90
.text:0040604B                 cmp     dword ptr [esi+8], 2
.text:0040604F                 jz      loc_405F90
.text:00406055                 mov     ebx, [esp+11Ch+var_100]
.text:00406059                 mov     ecx, [ebx]
.text:0040605B                 and     ecx, 0F000h
.text:00406061                 cmp     ecx, 0A000h
.text:00406067                 jnz     loc_405F90
.text:0040606D                 mov     esi, [ebp+0]
.text:00406070                 xor     edx, edx
.text:00406072                 and     esi, 0F000h
.text:00406078                 cmp     esi, 0A000h
.text:0040607E                 jnz     loc_405F59
.text:00406084                 jmp     loc_405F90
.text:00406084 ; ---------------------------------------------------------------------------
.text:00406089                 align 10h
.text:00406090
.text:00406090 loc_406090:                             ; CODE XREF: sub_405EC0+17F↑j
.text:00406090                 mov     edx, [esp+11Ch+arg_8]
.text:00406097                 mov     ebp, [esp+11Ch+arg_0]
.text:0040609E                 mov     [esp+11Ch+var_118], edx ; void *
.text:004060A2                 mov     [esp+11Ch+var_11C], ebp ; void *
.text:004060A5
.text:004060A5 loc_4060A5:                             ; CODE XREF: sub_405EC0+4B6↓j
.text:004060A5                 call    sub_407A10
.text:004060AA                 test    al, al
.text:004060AC
.text:004060AC loc_4060AC:                             ; CODE XREF: sub_405EC0+3EF↓j
.text:004060AC                 setz    cl
.text:004060AF                 movzx   edx, cl
.text:004060B2                 jmp     loc_405F59
.text:004060B7 ; ---------------------------------------------------------------------------
.text:004060B7
.text:004060B7 loc_4060B7:                             ; CODE XREF: sub_405EC0+17B↑j
.text:004060B7                 mov     edx, [esp+11Ch+arg_10]
.text:004060BE                 cmp     byte ptr [edx+14h], 0
.text:004060C2                 jnz     short loc_4060CA
.text:004060C4                 cmp     byte ptr [edx+0Ch], 0
.text:004060C8                 jz      short loc_4060F2
.text:004060CA
.text:004060CA loc_4060CA:                             ; CODE XREF: sub_405EC0+202↑j
.text:004060CA                 mov     edi, [ebp+0]
.text:004060CD                 mov     edx, 1
.text:004060D2                 and     edi, 0F000h
.text:004060D8                 cmp     edi, 0A000h
.text:004060DE                 jz      loc_405F59
.text:004060E4                 test    cl, cl
.text:004060E6                 jz      short loc_4060F2
.text:004060E8                 cmp     dword ptr [ebp+18h], 1
.text:004060EC                 ja      loc_4062B4
.text:004060F2
.text:004060F2 loc_4060F2:                             ; CODE XREF: sub_405EC0+208↑j
.text:004060F2                                         ; sub_405EC0+226↑j ...
.text:004060F2                 mov     edx, [esp+11Ch+var_100]
.text:004060F6                 mov     edi, [edx]
.text:004060F8                 mov     esi, edi
.text:004060FA                 and     esi, 0F000h
.text:00406100                 cmp     esi, 0A000h
.text:00406106                 jz      short loc_406162
.text:00406108                 mov     ecx, [ebp+0]
.text:0040610B                 and     ecx, 0F000h
.text:00406111                 cmp     ecx, 0A000h
.text:00406117                 jz      short loc_406162
.text:00406119                 mov     ebx, [edx+0Ch]
.text:0040611C                 mov     ecx, [edx+8]
.text:0040611F                 mov     eax, [ebp+8]
.text:00406122                 mov     edx, [ebp+0Ch]
.text:00406125                 mov     esi, ebx
.text:00406127                 xor     eax, ecx
.text:00406129                 xor     esi, edx
.text:0040612B                 or      esi, eax
.text:0040612D                 jnz     loc_405F90
.text:00406133                 mov     edx, [esp+11Ch+var_100]
.text:00406137                 mov     eax, [ebp+10h]
.text:0040613A                 mov     ebx, [edx+14h]
.text:0040613D                 mov     ecx, [edx+10h]
.text:00406140                 mov     edx, [ebp+14h]
.text:00406143                 mov     esi, ebx
.text:00406145                 xor     eax, ecx
.text:00406147                 xor     esi, edx
.text:00406149                 or      esi, eax
.text:0040614B                 jnz     loc_405F90
.text:00406151                 mov     ebx, [esp+11Ch+arg_10]
.text:00406158                 cmp     byte ptr [ebx+0Eh], 0
.text:0040615C                 jnz     loc_406235
.text:00406162
.text:00406162 loc_406162:                             ; CODE XREF: sub_405EC0+246↑j
.text:00406162                                         ; sub_405EC0+257↑j
.text:00406162                 mov     esi, [esp+11Ch+arg_10]
.text:00406169                 cmp     byte ptr [esi+0Ch], 0
.text:0040616D                 jz      short loc_406184
.text:0040616F                 mov     ecx, [ebp+0]
.text:00406172                 and     ecx, 0F000h
.text:00406178                 cmp     ecx, 0A000h
.text:0040617E                 jz      loc_406299
.text:00406184
.text:00406184 loc_406184:                             ; CODE XREF: sub_405EC0+2AD↑j
.text:00406184                 mov     esi, [esp+11Ch+arg_10]
.text:0040618B                 cmp     dword ptr [esi+8], 2
.text:0040618F                 jz      short loc_406198
.text:00406191
.text:00406191 loc_406191:                             ; CODE XREF: sub_405EC0+36F↓j
.text:00406191                 xor     edx, edx
.text:00406193                 jmp     loc_405F59
.text:00406198 ; ---------------------------------------------------------------------------
.text:00406198
.text:00406198 loc_406198:                             ; CODE XREF: sub_405EC0+2CF↑j
.text:00406198                 and     edi, 0F000h
.text:0040619E                 cmp     edi, 0A000h
.text:004061A4                 jz      loc_406270
.text:004061AA                 cld
.text:004061AB                 mov     ecx, 1Ah
.text:004061B0                 mov     esi, [esp+11Ch+var_100]
.text:004061B4                 lea     edi, [esp+11Ch+var_FC]
.text:004061B8                 rep movsd
.text:004061BA
.text:004061BA loc_4061BA:                             ; CODE XREF: sub_405EC0+3D4↓j
.text:004061BA                 mov     ebx, [ebp+0]
.text:004061BD                 and     ebx, 0F000h
.text:004061C3                 cmp     ebx, 0A000h
.text:004061C9                 jz      short loc_406244
.text:004061CB                 cld
.text:004061CC                 mov     ecx, 1Ah
.text:004061D1                 lea     edi, [esp+11Ch+var_8C]
.text:004061D8                 mov     esi, ebp
.text:004061DA                 rep movsd
.text:004061DC
.text:004061DC loc_4061DC:                             ; CODE XREF: sub_405EC0+3AB↓j
.text:004061DC                 mov     edx, [esp+11Ch+var_F0]
.text:004061E0                 mov     esi, [esp+11Ch+var_F4]
.text:004061E4                 mov     edi, [esp+11Ch+var_84]
.text:004061EB                 mov     ebp, [esp+11Ch+var_80]
.text:004061F2                 mov     eax, edx
.text:004061F4                 xor     edi, esi
.text:004061F6                 xor     eax, ebp
.text:004061F8                 or      eax, edi
.text:004061FA                 jnz     loc_405F90
.text:00406200                 mov     ebp, [esp+11Ch+var_E8]
.text:00406204                 mov     esi, [esp+11Ch+var_EC]
.text:00406208                 mov     edi, [esp+11Ch+var_7C]
.text:0040620F                 mov     ecx, [esp+11Ch+var_78]
.text:00406216                 mov     eax, ebp
.text:00406218                 xor     edi, esi
.text:0040621A                 xor     eax, ecx
.text:0040621C                 or      eax, edi
.text:0040621E                 jnz     loc_405F90
.text:00406224                 mov     ebx, [esp+11Ch+arg_10]
.text:0040622B                 cmp     byte ptr [ebx+0Eh], 0
.text:0040622F                 jz      loc_406191
.text:00406235
.text:00406235 loc_406235:                             ; CODE XREF: sub_405EC0+29C↑j
.text:00406235                 mov     edi, [esp+11Ch+arg_14]
.text:0040623C                 mov     byte ptr [edi], 1
.text:0040623F                 jmp     loc_405F90
.text:00406244 ; ---------------------------------------------------------------------------
.text:00406244
.text:00406244 loc_406244:                             ; CODE XREF: sub_405EC0+309↑j
.text:00406244                 mov     ebp, [esp+11Ch+arg_8]
.text:0040624B                 lea     ecx, [esp+11Ch+var_8C]
.text:00406252                 mov     [esp+11Ch+var_118], ecx ; int
.text:00406256                 mov     [esp+11Ch+var_11C], ebp ; char *
.text:00406259                 call    sub_418A10
.text:0040625E                 test    eax, eax
.text:00406260                 mov     edx, 1
.text:00406265                 jnz     loc_405F59
.text:0040626B                 jmp     loc_4061DC
.text:00406270 ; ---------------------------------------------------------------------------
.text:00406270
.text:00406270 loc_406270:                             ; CODE XREF: sub_405EC0+2E4↑j
.text:00406270                 mov     edi, [esp+11Ch+arg_0]
.text:00406277                 lea     edx, [esp+11Ch+var_FC]
.text:0040627B                 mov     [esp+11Ch+var_118], edx ; int
.text:0040627F                 mov     [esp+11Ch+var_11C], edi ; char *
.text:00406282                 call    sub_418A10
.text:00406287                 test    eax, eax
.text:00406289                 mov     edx, 1
.text:0040628E                 jnz     loc_405F59
.text:00406294                 jmp     loc_4061BA
.text:00406299 ; ---------------------------------------------------------------------------
.text:00406299
.text:00406299 loc_406299:                             ; CODE XREF: sub_405EC0+2BE↑j
.text:00406299                 mov     ebx, [esp+11Ch+var_100]
.text:0040629D                 mov     edx, [ebp+10h]
.text:004062A0                 mov     edi, [ebp+14h]
.text:004062A3                 mov     eax, [ebx+10h]
.text:004062A6                 mov     ebp, [ebx+14h]
.text:004062A9                 xor     edx, eax
.text:004062AB                 xor     edi, ebp
.text:004062AD                 or      edx, edi
.text:004062AF                 jmp     loc_4060AC
.text:004062B4 ; ---------------------------------------------------------------------------
.text:004062B4
.text:004062B4 loc_4062B4:                             ; CODE XREF: sub_405EC0+22C↑j
.text:004062B4                 mov     eax, [esp+11Ch+arg_8]
.text:004062BB                 mov     ecx, [esp+11Ch+arg_0]
.text:004062C2                 mov     [esp+11Ch+var_118], eax ; void *
.text:004062C6                 mov     [esp+11Ch+var_11C], ecx ; void *
.text:004062C9                 call    sub_407A10
.text:004062CE                 test    al, al
.text:004062D0                 jnz     loc_4060F2
.text:004062D6                 mov     ebx, [esp+11Ch+arg_10]
.text:004062DD                 cmp     byte ptr [ebx+14h], 0
.text:004062E1                 jz      loc_405F90
.text:004062E7                 mov     ebp, [esp+11Ch+arg_18]
.text:004062EE                 mov     eax, [esp+11Ch+arg_14]
.text:004062F5                 mov     byte ptr [ebp+0], 1
.text:004062F9                 lea     esi, [esi+0]
.text:00406300
.text:00406300 loc_406300:                             ; CODE XREF: sub_405EC0+76↑j
.text:00406300                 mov     byte ptr [eax], 1
.text:00406303                 jmp     loc_405F90
.text:00406308 ; ---------------------------------------------------------------------------
.text:00406308
.text:00406308 loc_406308:                             ; CODE XREF: sub_405EC0+15B↑j
.text:00406308                 mov     edx, [edi]
.text:0040630A                 and     edx, 0F000h
.text:00406310                 cmp     edx, 0A000h
.text:00406316                 jnz     loc_406030
.text:0040631C                 mov     eax, [esp+11Ch+arg_10]
.text:00406323                 cmp     byte ptr [eax+0Ch], 0
.text:00406327                 jnz     loc_405F90
.text:0040632D                 jmp     loc_406030
.text:00406332 ; ---------------------------------------------------------------------------
.text:00406332
.text:00406332 loc_406332:                             ; CODE XREF: sub_405EC0+87↑j
.text:00406332                 movzx   ecx, [esp+11Ch+var_101]
.text:00406337                 mov     ebx, [edi]
.text:00406339                 and     ebx, 0F000h
.text:0040633F                 cmp     ebx, 0A000h
.text:00406345                 jz      short loc_406350
.text:00406347
.text:00406347 loc_406347:                             ; CODE XREF: sub_405EC0+49F↓j
.text:00406347                 mov     [esp+11Ch+var_100], edi
.text:0040634B                 jmp     loc_406030
.text:00406350 ; ---------------------------------------------------------------------------
.text:00406350
.text:00406350 loc_406350:                             ; CODE XREF: sub_405EC0+485↑j
.text:00406350                 mov     esi, [ebp+0]
.text:00406353                 and     esi, 0F000h
.text:00406359                 cmp     esi, 0A000h
.text:0040635F                 jnz     short loc_406347
.text:00406361                 mov     edi, [esp+11Ch+arg_8]
.text:00406368                 mov     eax, [esp+11Ch+arg_0]
.text:0040636F                 mov     [esp+11Ch+var_118], edi
.text:00406373                 mov     [esp+11Ch+var_11C], eax
.text:00406376                 jmp     loc_4060A5
.text:00406376 sub_405EC0      endp
.text:00406376
.text:00406376 ; ---------------------------------------------------------------------------
.text:0040637B                 align 10h
.text:00406380
.text:00406380 ; =============== S U B R O U T I N E =======================================
.text:00406380
.text:00406380
.text:00406380 sub_406380      proc near               ; DATA XREF: sub_4053F0+13↑o
.text:00406380
.text:00406380 var_1C          = dword ptr -1Ch
.text:00406380 var_18          = dword ptr -18h
.text:00406380 var_14          = dword ptr -14h
.text:00406380 var_10          = dword ptr -10h
.text:00406380 var_8           = dword ptr -8
.text:00406380 var_4           = dword ptr -4
.text:00406380 arg_0           = dword ptr  4
.text:00406380 arg_4           = dword ptr  8
.text:00406380
.text:00406380                 sub     esp, 1Ch
.text:00406383                 mov     [esp+1Ch+var_4], esi
.text:00406387                 mov     esi, [esp+1Ch+arg_4]
.text:0040638B                 mov     [esp+1Ch+var_8], ebx
.text:0040638F                 mov     ebx, [esp+1Ch+arg_0]
.text:00406393                 mov     [esp+1Ch+var_18], esi
.text:00406397                 mov     edx, [ebx]
.text:00406399                 mov     [esp+1Ch+var_1C], edx
.text:0040639C                 call    sub_40BE60
.text:004063A1                 mov     ecx, [ebx+8]
.text:004063A4                 xor     edx, edx
.text:004063A6                 mov     ebx, [ebx+0Ch]
.text:004063A9                 mov     [esp+1Ch+var_14], esi
.text:004063AD                 or      eax, ecx
.text:004063AF                 or      edx, ebx
.text:004063B1                 mov     [esp+1Ch+var_10], 0
.text:004063B9                 mov     [esp+1Ch+var_1C], eax
.text:004063BC                 mov     [esp+1Ch+var_18], edx
.text:004063C0                 call    sub_41E970
.text:004063C5                 mov     ebx, [esp+1Ch+var_8]
.text:004063C9                 mov     esi, [esp+1Ch+var_4]
.text:004063CD                 add     esp, 1Ch
.text:004063D0                 retn
.text:004063D0 sub_406380      endp
.text:004063D0
.text:004063D1 ; ---------------------------------------------------------------------------
.text:004063D1                 jmp     short sub_4063E0
.text:004063D1 ; ---------------------------------------------------------------------------
.text:004063D3                 align 10h
.text:004063E0
.text:004063E0 ; =============== S U B R O U T I N E =======================================
.text:004063E0
.text:004063E0
.text:004063E0 sub_4063E0      proc near               ; CODE XREF: .text:004063D1↑j
.text:004063E0                                         ; DATA XREF: .text:00405443↑o
.text:004063E0
.text:004063E0 var_1C          = dword ptr -1Ch
.text:004063E0 var_18          = dword ptr -18h
.text:004063E0 var_14          = dword ptr -14h
.text:004063E0 var_10          = dword ptr -10h
.text:004063E0 arg_0           = dword ptr  4
.text:004063E0 arg_4           = dword ptr  8
.text:004063E0
.text:004063E0                 sub     esp, 1Ch
.text:004063E3                 mov     ecx, [esp+1Ch+arg_0]
.text:004063E7                 mov     edx, [ecx+0Ch]
.text:004063EA                 mov     eax, [ecx+8]
.text:004063ED                 mov     ecx, [esp+1Ch+arg_4]
.text:004063F1                 mov     [esp+1Ch+var_10], 0
.text:004063F9                 mov     [esp+1Ch+var_1C], eax
.text:004063FC                 mov     [esp+1Ch+var_14], ecx
.text:00406400                 mov     [esp+1Ch+var_18], edx
.text:00406404                 call    sub_41E970
.text:00406409                 add     esp, 1Ch
.text:0040640C                 retn
.text:0040640C sub_4063E0      endp
.text:0040640C
.text:0040640C ; ---------------------------------------------------------------------------
.text:0040640D                 align 10h
.text:00406410
.text:00406410 ; =============== S U B R O U T I N E =======================================
.text:00406410
.text:00406410
.text:00406410 sub_406410      proc near               ; DATA XREF: sub_4053F0+B↑o
.text:00406410                                         ; .text:0040543B↑o
.text:00406410
.text:00406410 var_1C          = dword ptr -1Ch
.text:00406410 var_18          = dword ptr -18h
.text:00406410 var_11          = byte ptr -11h
.text:00406410 var_10          = dword ptr -10h
.text:00406410 var_C           = dword ptr -0Ch
.text:00406410 var_8           = dword ptr -8
.text:00406410 var_4           = dword ptr -4
.text:00406410 arg_0           = dword ptr  4
.text:00406410 arg_4           = dword ptr  8
.text:00406410
.text:00406410                 sub     esp, 1Ch
.text:00406413                 mov     [esp+1Ch+var_4], ebp
.text:00406417                 mov     ebp, [esp+1Ch+arg_0]
.text:0040641B                 mov     [esp+1Ch+var_8], edi
.text:0040641F                 mov     edi, [esp+1Ch+arg_4]
.text:00406423                 mov     [esp+1Ch+var_C], esi
.text:00406427                 mov     [esp+1Ch+var_10], ebx
.text:0040642B                 mov     ebx, [ebp+0Ch]
.text:0040642E                 mov     [esp+1Ch+var_11], 0
.text:00406433                 mov     ecx, [ebp+8]
.text:00406436                 mov     eax, [edi+8]
.text:00406439                 mov     edx, [edi+0Ch]
.text:0040643C                 mov     esi, ebx
.text:0040643E                 xor     eax, ecx
.text:00406440                 xor     esi, edx
.text:00406442                 or      esi, eax
.text:00406444                 jnz     short loc_40645C
.text:00406446                 mov     ebx, [ebp+14h]
.text:00406449                 mov     ecx, [ebp+10h]
.text:0040644C                 mov     eax, [edi+10h]
.text:0040644F                 mov     edx, [edi+14h]
.text:00406452                 mov     esi, ebx
.text:00406454                 xor     eax, ecx
.text:00406456                 xor     esi, edx
.text:00406458                 or      esi, eax
.text:0040645A                 jz      short loc_406475
.text:0040645C
.text:0040645C loc_40645C:                             ; CODE XREF: sub_406410+34↑j
.text:0040645C                                         ; sub_406410+78↓j ...
.text:0040645C                 movzx   eax, [esp+1Ch+var_11]
.text:00406461                 mov     ebx, [esp+1Ch+var_10]
.text:00406465                 mov     esi, [esp+1Ch+var_C]
.text:00406469                 mov     edi, [esp+1Ch+var_8]
.text:0040646D                 mov     ebp, [esp+1Ch+var_4]
.text:00406471                 add     esp, 1Ch
.text:00406474                 retn
.text:00406475 ; ---------------------------------------------------------------------------
.text:00406475
.text:00406475 loc_406475:                             ; CODE XREF: sub_406410+4A↑j
.text:00406475                 mov     edx, [edi]
.text:00406477                 mov     [esp+1Ch+var_18], edx ; void *
.text:0040647B                 mov     edx, [ebp+0]
.text:0040647E                 mov     [esp+1Ch+var_1C], edx ; void *
.text:00406481                 call    sub_407A10
.text:00406486                 test    al, al
.text:00406488                 jz      short loc_40645C
.text:0040648A                 mov     [esp+1Ch+var_11], 1
.text:0040648F                 jmp     short loc_40645C
.text:0040648F sub_406410      endp
.text:0040648F
.text:00406491 ; ---------------------------------------------------------------------------
.text:00406491                 jmp     short sub_4064A0
.text:00406491 ; ---------------------------------------------------------------------------
.text:00406493                 align 10h
.text:004064A0
.text:004064A0 ; =============== S U B R O U T I N E =======================================
.text:004064A0
.text:004064A0
.text:004064A0 ; int __cdecl sub_4064A0(void *)
.text:004064A0 sub_4064A0      proc near               ; CODE XREF: .text:00406491↑j
.text:004064A0                                         ; DATA XREF: sub_4053F0+3↑o ...
.text:004064A0
.text:004064A0 Block           = dword ptr -0Ch
.text:004064A0 var_4           = dword ptr -4
.text:004064A0 arg_0           = dword ptr  4
.text:004064A0
.text:004064A0                 sub     esp, 0Ch
.text:004064A3                 mov     [esp+0Ch+var_4], ebx
.text:004064A7                 mov     ebx, [esp+0Ch+arg_0]
.text:004064AB                 mov     edx, [ebx]
.text:004064AD                 mov     [esp+0Ch+Block], edx ; Block
.text:004064B0                 call    free
.text:004064B5                 mov     [esp+0Ch+arg_0], ebx ; Block
.text:004064B9                 mov     ebx, [esp+0Ch+var_4]
.text:004064BD                 add     esp, 0Ch
.text:004064C0                 jmp     free
.text:004064C0 sub_4064A0      endp
.text:004064C0
.text:004064C0 ; ---------------------------------------------------------------------------
.text:004064C5                 align 10h
.text:004064D0
.text:004064D0 ; =============== S U B R O U T I N E =======================================
.text:004064D0
.text:004064D0
.text:004064D0 ; int __cdecl sub_4064D0(int, char *, int)
.text:004064D0 sub_4064D0      proc near               ; CODE XREF: sub_403910+19A↑p
.text:004064D0                                         ; sub_403910+658↑p ...
.text:004064D0
.text:004064D0 Block           = dword ptr -9Ch
.text:004064D0 var_98          = dword ptr -98h
.text:004064D0 var_8C          = byte ptr -8Ch
.text:004064D0 var_84          = dword ptr -84h
.text:004064D0 var_80          = dword ptr -80h
.text:004064D0 var_7C          = dword ptr -7Ch
.text:004064D0 var_78          = dword ptr -78h
.text:004064D0 var_10          = dword ptr -10h
.text:004064D0 var_C           = dword ptr -0Ch
.text:004064D0 var_8           = dword ptr -8
.text:004064D0 var_4           = dword ptr -4
.text:004064D0 arg_0           = dword ptr  4
.text:004064D0 arg_4           = dword ptr  8
.text:004064D0 arg_8           = dword ptr  0Ch
.text:004064D0
.text:004064D0                 sub     esp, 9Ch
.text:004064D6                 mov     [esp+9Ch+var_4], ebp
.text:004064DD                 mov     ebp, [esp+9Ch+arg_0]
.text:004064E4                 mov     [esp+9Ch+var_C], esi
.text:004064EB                 mov     esi, [esp+9Ch+arg_8]
.text:004064F2                 test    ebp, ebp
.text:004064F4                 mov     [esp+9Ch+var_8], edi
.text:004064FB                 mov     edi, [esp+9Ch+arg_4]
.text:00406502                 mov     [esp+9Ch+var_10], ebx
.text:00406509                 jz      short loc_406565
.text:0040650B                 mov     [esp+9Ch+Block], 18h ; size_t
.text:00406512                 call    sub_40A320
.text:00406517                 mov     [esp+9Ch+Block], edi ; char *
.text:0040651A                 mov     ebx, eax
.text:0040651C                 call    sub_40A4E0
.text:00406521                 mov     [ebx], eax
.text:00406523                 test    esi, esi
.text:00406525                 jz      short loc_406588
.text:00406527                 mov     edx, [esi+8]
.text:0040652A                 mov     ecx, [esi+0Ch]
.text:0040652D                 mov     [ebx+8], edx
.text:00406530                 mov     [ebx+0Ch], ecx
.text:00406533                 mov     eax, [esi+10h]
.text:00406536                 mov     edx, [esi+14h]
.text:00406539
.text:00406539 loc_406539:                             ; CODE XREF: sub_4064D0+E2↓j
.text:00406539                 mov     [ebx+10h], eax
.text:0040653C                 mov     [ebx+14h], edx
.text:0040653F                 mov     [esp+9Ch+var_98], ebx
.text:00406543                 mov     [esp+9Ch+Block], ebp
.text:00406546                 call    sub_40B500
.text:0040654B                 test    eax, eax
.text:0040654D                 jz      short loc_4065B4
.text:0040654F                 cmp     eax, ebx
.text:00406551                 jz      short loc_406565
.text:00406553                 mov     ebp, [ebx]
.text:00406555                 mov     [esp+9Ch+Block], ebp ; Block
.text:00406558                 call    free
.text:0040655D                 mov     [esp+9Ch+Block], ebx ; Block
.text:00406560                 call    free
.text:00406565
.text:00406565 loc_406565:                             ; CODE XREF: sub_4064D0+39↑j
.text:00406565                                         ; sub_4064D0+81↑j ...
.text:00406565                 mov     ebx, [esp+9Ch+var_10]
.text:0040656C                 mov     esi, [esp+9Ch+var_C]
.text:00406573                 mov     edi, [esp+9Ch+var_8]
.text:0040657A                 mov     ebp, [esp+9Ch+var_4]
.text:00406581                 add     esp, 9Ch
.text:00406587                 retn
.text:00406588 ; ---------------------------------------------------------------------------
.text:00406588
.text:00406588 loc_406588:                             ; CODE XREF: sub_4064D0+55↑j
.text:00406588                 mov     [esp+9Ch+Block], edi
.text:0040658B                 lea     ecx, [esp+9Ch+var_8C]
.text:0040658F                 mov     [esp+9Ch+var_98], ecx
.text:00406593                 call    sub_417720
.text:00406598                 test    eax, eax
.text:0040659A                 jnz     short loc_406565
.text:0040659C                 mov     edi, [esp+9Ch+var_84]
.text:004065A0                 mov     esi, [esp+9Ch+var_80]
.text:004065A4                 mov     [ebx+8], edi
.text:004065A7                 mov     [ebx+0Ch], esi
.text:004065AA                 mov     eax, [esp+9Ch+var_7C]
.text:004065AE                 mov     edx, [esp+9Ch+var_78]
.text:004065B2                 jmp     short loc_406539
.text:004065B4 ; ---------------------------------------------------------------------------
.text:004065B4
.text:004065B4 loc_4065B4:                             ; CODE XREF: sub_4064D0+7D↑j
.text:004065B4                 call    sub_40A2A0
.text:004065B4 sub_4064D0      endp
.text:004065B4
.text:004065B4 ; ---------------------------------------------------------------------------
.text:004065B9                 align 10h
.text:004065C0
.text:004065C0 ; =============== S U B R O U T I N E =======================================
.text:004065C0
.text:004065C0
.text:004065C0 sub_4065C0      proc near               ; CODE XREF: sub_403910+781↑p
.text:004065C0                                         ; sub_403910+F88↑p
.text:004065C0
.text:004065C0 Block           = dword ptr -3Ch
.text:004065C0 var_38          = dword ptr -38h
.text:004065C0 var_2C          = dword ptr -2Ch
.text:004065C0 var_28          = dword ptr -28h
.text:004065C0 var_24          = dword ptr -24h
.text:004065C0 var_20          = dword ptr -20h
.text:004065C0 var_1C          = dword ptr -1Ch
.text:004065C0 var_4           = dword ptr -4
.text:004065C0 arg_0           = dword ptr  4
.text:004065C0 arg_4           = dword ptr  8
.text:004065C0 arg_8           = dword ptr  0Ch
.text:004065C0 arg_C           = dword ptr  10h
.text:004065C0
.text:004065C0                 sub     esp, 3Ch
.text:004065C3                 mov     edx, [esp+3Ch+arg_0]
.text:004065C7                 mov     [esp+3Ch+var_4], ebx
.text:004065CB                 mov     ecx, [esp+3Ch+arg_4]
.text:004065CF                 mov     [esp+3Ch+var_1C], 0
.text:004065D7                 mov     ebx, [esp+3Ch+arg_8]
.text:004065DB                 mov     [esp+3Ch+var_2C], edx
.text:004065DF                 lea     edx, [esp+3Ch+var_2C]
.text:004065E3                 mov     [esp+3Ch+var_28], ecx
.text:004065E7                 mov     ecx, [esp+3Ch+arg_C]
.text:004065EB                 mov     [esp+3Ch+var_38], edx
.text:004065EF                 mov     edx, ds:dword_421080
.text:004065F5                 mov     [esp+3Ch+var_24], ebx
.text:004065F9                 mov     [esp+3Ch+var_20], ecx
.text:004065FD                 mov     [esp+3Ch+Block], edx
.text:00406600                 call    sub_40BBD0
.text:00406605                 test    eax, eax
.text:00406607                 mov     ebx, eax
.text:00406609                 jz      short loc_40661E
.text:0040660B                 mov     ecx, [eax+10h]
.text:0040660E                 mov     [esp+3Ch+Block], ecx ; Block
.text:00406611                 call    free
.text:00406616                 mov     [esp+3Ch+Block], ebx ; Block
.text:00406619                 call    free
.text:0040661E
.text:0040661E loc_40661E:                             ; CODE XREF: sub_4065C0+49↑j
.text:0040661E                 mov     ebx, [esp+3Ch+var_4]
.text:00406622                 add     esp, 3Ch
.text:00406625                 retn
.text:00406625 sub_4065C0      endp
.text:00406625
.text:00406625 ; ---------------------------------------------------------------------------
.text:00406626 ; const char word_406626[]
.text:00406626 word_406626     dw 7325h                ; DATA XREF: sub_406630+C3↓o
.text:00406628                 align 10h
.text:00406630
.text:00406630 ; =============== S U B R O U T I N E =======================================
.text:00406630
.text:00406630
.text:00406630 ; int __cdecl sub_406630(char *)
.text:00406630 sub_406630      proc near               ; CODE XREF: sub_403910+D14↑p
.text:00406630
.text:00406630 Block           = dword ptr -0ACh
.text:00406630 ErrorMessage    = dword ptr -0A8h
.text:00406630 var_A4          = dword ptr -0A4h
.text:00406630 var_A0          = byte ptr -0A0h
.text:00406630 var_94          = dword ptr -94h
.text:00406630 var_90          = dword ptr -90h
.text:00406630 var_8C          = dword ptr -8Ch
.text:00406630 var_84          = dword ptr -84h
.text:00406630 var_80          = dword ptr -80h
.text:00406630 var_7C          = dword ptr -7Ch
.text:00406630 var_78          = dword ptr -78h
.text:00406630 arg_0           = dword ptr  4
.text:00406630
.text:00406630                 push    ebp
.text:00406631                 push    edi
.text:00406632                 push    esi
.text:00406633                 push    ebx
.text:00406634                 sub     esp, 9Ch
.text:0040663A                 mov     ebp, [esp+0ACh+arg_0]
.text:00406641                 lea     edx, [esp+0ACh+var_8C]
.text:00406645                 mov     [esp+0ACh+ErrorMessage], edx ; int
.text:00406649                 mov     [esp+0ACh+Block], ebp ; char *
.text:0040664C                 call    sub_418A10
.text:00406651                 test    eax, eax
.text:00406653                 js      loc_4066E0
.text:00406659                 mov     [esp+0ACh+Block], 18h ; size_t
.text:00406660                 mov     edx, [esp+0ACh+var_7C]
.text:00406664                 mov     edi, [esp+0ACh+var_78]
.text:00406668                 mov     ebx, [esp+0ACh+var_84]
.text:0040666C                 mov     esi, [esp+0ACh+var_80]
.text:00406670                 mov     [esp+0ACh+var_94], edx
.text:00406674                 mov     [esp+0ACh+var_90], edi
.text:00406678                 call    sub_40A320
.text:0040667D                 mov     [esp+0ACh+Block], ebp ; char *
.text:00406680                 mov     edi, eax
.text:00406682                 call    sub_40A4E0
.text:00406687                 mov     [edi], ebx
.text:00406689                 mov     ebp, [esp+0ACh+var_94]
.text:0040668D                 mov     ebx, [esp+0ACh+var_90]
.text:00406691                 mov     [edi+10h], eax
.text:00406694                 mov     ecx, ds:dword_421080
.text:0040669A                 mov     [edi+4], esi
.text:0040669D                 mov     [edi+8], ebp
.text:004066A0                 mov     [edi+0Ch], ebx
.text:004066A3                 mov     [esp+0ACh+ErrorMessage], edi
.text:004066A7                 mov     [esp+0ACh+Block], ecx
.text:004066AA                 call    sub_40B500
.text:004066AF                 test    eax, eax
.text:004066B1                 jz      short loc_406711
.text:004066B3                 cmp     eax, edi
.text:004066B5                 jz      short loc_4066CA
.text:004066B7                 mov     esi, [edi+10h]
.text:004066BA                 mov     [esp+0ACh+Block], esi ; Block
.text:004066BD                 call    free
.text:004066C2                 mov     [esp+0ACh+Block], edi ; Block
.text:004066C5                 call    free
.text:004066CA
.text:004066CA loc_4066CA:                             ; CODE XREF: sub_406630+85↑j
.text:004066CA                 mov     eax, 1
.text:004066CF
.text:004066CF loc_4066CF:                             ; CODE XREF: sub_406630+DF↓j
.text:004066CF                 add     esp, 9Ch
.text:004066D5                 pop     ebx
.text:004066D6                 pop     esi
.text:004066D7                 pop     edi
.text:004066D8                 pop     ebp
.text:004066D9                 retn
.text:004066D9 ; ---------------------------------------------------------------------------
.text:004066DA                 align 10h
.text:004066E0
.text:004066E0 loc_4066E0:                             ; CODE XREF: sub_406630+23↑j
.text:004066E0                 mov     [esp+0ACh+Block], ebp ; char *
.text:004066E3                 call    sub_40AD30
.text:004066E8                 mov     esi, eax
.text:004066EA                 call    _errno
.text:004066EF                 mov     dword ptr [esp+0ACh+var_A0], esi ; char
.text:004066F3                 mov     [esp+0ACh+var_A4], offset word_406626 ; char *
.text:004066FB                 mov     edx, [eax]
.text:004066FD                 mov     [esp+0ACh+Block], 0 ; Code
.text:00406704                 mov     [esp+0ACh+ErrorMessage], edx ; ErrorMessage
.text:00406708                 call    sub_415220
.text:0040670D                 xor     eax, eax
.text:0040670F                 jmp     short loc_4066CF
.text:00406711 ; ---------------------------------------------------------------------------
.text:00406711
.text:00406711 loc_406711:                             ; CODE XREF: sub_406630+81↑j
.text:00406711                 call    sub_40A2A0
.text:00406711 sub_406630      endp
.text:00406711
.text:00406711 ; ---------------------------------------------------------------------------
.text:00406716                 align 10h
.text:00406720
.text:00406720 ; =============== S U B R O U T I N E =======================================
.text:00406720
.text:00406720
.text:00406720 sub_406720      proc near               ; CODE XREF: sub_403910+126C↑p
.text:00406720
.text:00406720 var_3C          = dword ptr -3Ch
.text:00406720 var_38          = dword ptr -38h
.text:00406720 var_2C          = dword ptr -2Ch
.text:00406720 var_28          = dword ptr -28h
.text:00406720 var_24          = dword ptr -24h
.text:00406720 var_20          = dword ptr -20h
.text:00406720 arg_0           = dword ptr  4
.text:00406720 arg_4           = dword ptr  8
.text:00406720 arg_8           = dword ptr  0Ch
.text:00406720 arg_C           = dword ptr  10h
.text:00406720
.text:00406720                 sub     esp, 3Ch
.text:00406723                 mov     edx, [esp+3Ch+arg_0]
.text:00406727                 mov     ecx, [esp+3Ch+arg_4]
.text:0040672B                 mov     [esp+3Ch+var_2C], edx
.text:0040672F                 mov     edx, [esp+3Ch+arg_8]
.text:00406733                 mov     [esp+3Ch+var_28], ecx
.text:00406737                 mov     ecx, [esp+3Ch+arg_C]
.text:0040673B                 mov     [esp+3Ch+var_24], edx
.text:0040673F                 lea     edx, [esp+3Ch+var_2C]
.text:00406743                 mov     [esp+3Ch+var_38], edx
.text:00406747                 mov     edx, ds:dword_421080
.text:0040674D                 mov     [esp+3Ch+var_20], ecx
.text:00406751                 mov     [esp+3Ch+var_3C], edx
.text:00406754                 call    sub_40B950
.text:00406759                 xor     edx, edx
.text:0040675B                 test    eax, eax
.text:0040675D                 jz      short loc_406762
.text:0040675F                 mov     edx, [eax+10h]
.text:00406762
.text:00406762 loc_406762:                             ; CODE XREF: sub_406720+3D↑j
.text:00406762                 mov     eax, edx
.text:00406764                 add     esp, 3Ch
.text:00406767                 retn
.text:00406767 sub_406720      endp
.text:00406767
.text:00406767 ; ---------------------------------------------------------------------------
.text:00406768                 align 10h
.text:00406770
.text:00406770 ; =============== S U B R O U T I N E =======================================
.text:00406770
.text:00406770
.text:00406770 ; int __cdecl sub_406770(char *, int, int, int, int)
.text:00406770 sub_406770      proc near               ; CODE XREF: sub_403910+1092↑p
.text:00406770
.text:00406770 Block           = dword ptr -1Ch
.text:00406770 var_18          = dword ptr -18h
.text:00406770 var_14          = dword ptr -14h
.text:00406770 var_10          = dword ptr -10h
.text:00406770 arg_0           = dword ptr  4
.text:00406770 arg_4           = dword ptr  8
.text:00406770 arg_8           = dword ptr  0Ch
.text:00406770 arg_C           = dword ptr  10h
.text:00406770 arg_10          = dword ptr  14h
.text:00406770
.text:00406770                 push    edi
.text:00406771                 push    esi
.text:00406772                 push    ebx
.text:00406773                 sub     esp, 10h
.text:00406776                 mov     edx, [esp+1Ch+arg_C]
.text:0040677A                 mov     [esp+1Ch+Block], 18h ; size_t
.text:00406781                 mov     edi, [esp+1Ch+arg_10]
.text:00406785                 mov     ebx, [esp+1Ch+arg_4]
.text:00406789                 mov     [esp+1Ch+var_14], edx
.text:0040678D                 mov     esi, [esp+1Ch+arg_8]
.text:00406791                 mov     [esp+1Ch+var_10], edi
.text:00406795                 call    sub_40A320
.text:0040679A                 mov     ecx, [esp+1Ch+arg_0]
.text:0040679E                 mov     edi, eax
.text:004067A0                 mov     [esp+1Ch+Block], ecx ; char *
.text:004067A3                 call    sub_40A4E0
.text:004067A8                 mov     [edi+10h], eax
.text:004067AB                 mov     edx, [esp+1Ch+var_14]
.text:004067AF                 mov     ecx, [esp+1Ch+var_10]
.text:004067B3                 mov     [edi], ebx
.text:004067B5                 mov     [edi+8], edx
.text:004067B8                 mov     edx, ds:dword_421080
.text:004067BE                 mov     [edi+4], esi
.text:004067C1                 mov     [edi+0Ch], ecx
.text:004067C4                 mov     [esp+1Ch+var_18], edi
.text:004067C8                 mov     [esp+1Ch+Block], edx
.text:004067CB                 call    sub_40B500
.text:004067D0                 test    eax, eax
.text:004067D2                 mov     ebx, eax
.text:004067D4                 jz      short loc_4067F9
.text:004067D6                 xor     eax, eax
.text:004067D8                 cmp     ebx, edi
.text:004067DA                 jz      short loc_4067F2
.text:004067DC                 mov     esi, [edi+10h]
.text:004067DF                 mov     [esp+1Ch+Block], esi ; Block
.text:004067E2                 call    free
.text:004067E7                 mov     [esp+1Ch+Block], edi ; Block
.text:004067EA                 call    free
.text:004067EF                 mov     eax, [ebx+10h]
.text:004067F2
.text:004067F2 loc_4067F2:                             ; CODE XREF: sub_406770+6A↑j
.text:004067F2                 add     esp, 10h
.text:004067F5                 pop     ebx
.text:004067F6                 pop     esi
.text:004067F7                 pop     edi
.text:004067F8                 retn
.text:004067F9 ; ---------------------------------------------------------------------------
.text:004067F9
.text:004067F9 loc_4067F9:                             ; CODE XREF: sub_406770+64↑j
.text:004067F9                 call    sub_40A2A0
.text:004067F9 sub_406770      endp
.text:004067F9
.text:004067F9 ; ---------------------------------------------------------------------------
.text:004067FE                 align 10h
.text:00406800
.text:00406800 ; =============== S U B R O U T I N E =======================================
.text:00406800
.text:00406800
.text:00406800 sub_406800      proc near               ; CODE XREF: sub_401700:loc_401D8C↑p
.text:00406800
.text:00406800 var_1C          = dword ptr -1Ch
.text:00406800 var_18          = dword ptr -18h
.text:00406800 var_14          = dword ptr -14h
.text:00406800 var_10          = dword ptr -10h
.text:00406800 var_C           = dword ptr -0Ch
.text:00406800
.text:00406800                 sub     esp, 1Ch
.text:00406803                 mov     [esp+1Ch+var_C], offset sub_406910
.text:0040680B                 mov     [esp+1Ch+var_10], offset sub_4068A0
.text:00406813                 mov     [esp+1Ch+var_14], offset sub_406870
.text:0040681B                 mov     [esp+1Ch+var_18], 0
.text:00406823                 mov     [esp+1Ch+var_1C], 67h ; 'g'
.text:0040682A                 call    sub_40AFB0
.text:0040682F                 mov     ds:dword_421080, eax
.text:00406834                 test    eax, eax
.text:00406836                 jz      short loc_40683C
.text:00406838                 add     esp, 1Ch
.text:0040683B                 retn
.text:0040683C ; ---------------------------------------------------------------------------
.text:0040683C
.text:0040683C loc_40683C:                             ; CODE XREF: sub_406800+36↑j
.text:0040683C                 call    sub_40A2A0
.text:0040683C sub_406800      endp
.text:0040683C
.text:00406841 ; ---------------------------------------------------------------------------
.text:00406841                 jmp     short loc_406850
.text:00406841 ; ---------------------------------------------------------------------------
.text:00406843                 align 10h
.text:00406850
.text:00406850 loc_406850:                             ; CODE XREF: .text:00406841↑j
.text:00406850                 sub     esp, 0Ch
.text:00406853                 mov     edx, ds:dword_421080
.text:00406859                 mov     [esp], edx
.text:0040685C                 call    sub_40B290
.text:00406861                 add     esp, 0Ch
.text:00406864                 retn
.text:00406864 ; ---------------------------------------------------------------------------
.text:00406865                 align 10h
.text:00406870
.text:00406870 ; =============== S U B R O U T I N E =======================================
.text:00406870
.text:00406870
.text:00406870 sub_406870      proc near               ; DATA XREF: sub_406800+13↑o
.text:00406870
.text:00406870 var_1C          = dword ptr -1Ch
.text:00406870 var_18          = dword ptr -18h
.text:00406870 var_14          = dword ptr -14h
.text:00406870 var_10          = dword ptr -10h
.text:00406870 arg_0           = dword ptr  4
.text:00406870 arg_4           = dword ptr  8
.text:00406870
.text:00406870                 sub     esp, 1Ch
.text:00406873                 mov     ecx, [esp+1Ch+arg_0]
.text:00406877                 mov     edx, [ecx+4]
.text:0040687A                 mov     eax, [ecx]
.text:0040687C                 mov     ecx, [esp+1Ch+arg_4]
.text:00406880                 mov     [esp+1Ch+var_10], 0
.text:00406888                 mov     [esp+1Ch+var_1C], eax
.text:0040688B                 mov     [esp+1Ch+var_14], ecx
.text:0040688F                 mov     [esp+1Ch+var_18], edx
.text:00406893                 call    sub_41E970
.text:00406898                 add     esp, 1Ch
.text:0040689B                 retn
.text:0040689B sub_406870      endp
.text:0040689B
.text:0040689B ; ---------------------------------------------------------------------------
.text:0040689C                 align 10h
.text:004068A0
.text:004068A0 ; =============== S U B R O U T I N E =======================================
.text:004068A0
.text:004068A0
.text:004068A0 sub_4068A0      proc near               ; DATA XREF: sub_406800+B↑o
.text:004068A0
.text:004068A0 var_11          = byte ptr -11h
.text:004068A0 var_10          = dword ptr -10h
.text:004068A0 var_C           = dword ptr -0Ch
.text:004068A0 var_8           = dword ptr -8
.text:004068A0 var_4           = dword ptr -4
.text:004068A0 arg_0           = dword ptr  4
.text:004068A0 arg_4           = dword ptr  8
.text:004068A0
.text:004068A0                 sub     esp, 14h
.text:004068A3                 mov     [esp+14h+var_8], edi
.text:004068A7                 mov     edi, [esp+14h+arg_0]
.text:004068AB                 mov     [esp+14h+var_4], ebp
.text:004068AF                 mov     ebp, [esp+14h+arg_4]
.text:004068B3                 mov     [esp+14h+var_C], esi
.text:004068B7                 mov     [esp+14h+var_10], ebx
.text:004068BB                 mov     ebx, [edi+4]
.text:004068BE                 mov     [esp+14h+var_11], 0
.text:004068C3                 mov     ecx, [edi]
.text:004068C5                 mov     eax, [ebp+0]
.text:004068C8                 mov     edx, [ebp+4]
.text:004068CB                 mov     esi, ebx
.text:004068CD                 xor     eax, ecx
.text:004068CF                 xor     esi, edx
.text:004068D1                 or      esi, eax
.text:004068D3                 jnz     short loc_4068F0
.text:004068D5                 mov     edx, [edi+0Ch]
.text:004068D8                 mov     esi, [edi+8]
.text:004068DB                 mov     ecx, [ebp+0Ch]
.text:004068DE                 mov     edi, [ebp+8]
.text:004068E1                 mov     eax, edx
.text:004068E3                 xor     eax, ecx
.text:004068E5                 xor     edi, esi
.text:004068E7                 or      eax, edi
.text:004068E9                 jnz     short loc_4068F0
.text:004068EB                 mov     [esp+14h+var_11], 1
.text:004068F0
.text:004068F0 loc_4068F0:                             ; CODE XREF: sub_4068A0+33↑j
.text:004068F0                                         ; sub_4068A0+49↑j
.text:004068F0                 movzx   eax, [esp+14h+var_11]
.text:004068F5                 mov     ebx, [esp+14h+var_10]
.text:004068F9                 mov     esi, [esp+14h+var_C]
.text:004068FD                 mov     edi, [esp+14h+var_8]
.text:00406901                 mov     ebp, [esp+14h+var_4]
.text:00406905                 add     esp, 14h
.text:00406908                 retn
.text:00406908 sub_4068A0      endp
.text:00406908
.text:00406908 ; ---------------------------------------------------------------------------
.text:00406909                 align 10h
.text:00406910
.text:00406910 ; =============== S U B R O U T I N E =======================================
.text:00406910
.text:00406910
.text:00406910 ; int __cdecl sub_406910(void *)
.text:00406910 sub_406910      proc near               ; DATA XREF: sub_406800+3↑o
.text:00406910
.text:00406910 Block           = dword ptr -0Ch
.text:00406910 var_4           = dword ptr -4
.text:00406910 arg_0           = dword ptr  4
.text:00406910
.text:00406910                 sub     esp, 0Ch
.text:00406913                 mov     [esp+0Ch+var_4], ebx
.text:00406917                 mov     ebx, [esp+0Ch+arg_0]
.text:0040691B                 mov     edx, [ebx+10h]
.text:0040691E                 mov     [esp+0Ch+Block], edx ; Block
.text:00406921                 call    free
.text:00406926                 mov     [esp+0Ch+arg_0], ebx ; Block
.text:0040692A                 mov     ebx, [esp+0Ch+var_4]
.text:0040692E                 add     esp, 0Ch
.text:00406931                 jmp     free
.text:00406931 sub_406910      endp
.text:00406931
.text:00406931 ; ---------------------------------------------------------------------------
.text:00406936                 align 10h
.text:00406940 aSExistsButIsNo db '%s exists but is not a directory',0
.text:00406940                                         ; DATA XREF: sub_406A50+6E↓o
.text:00406940                                         ; sub_406A50+542↓o ...
.text:00406961                 align 20h
.text:00406980 aCannotChangePe_0 db 'cannot change permissions of %s',0
.text:00406980                                         ; DATA XREF: sub_406A50+FD↓o
.text:00406980                                         ; sub_406A50+69E↓o ...
.text:004069A0 aCannotChangeOw_0 db 'cannot change owner and/or group of %s',0
.text:004069A0                                         ; DATA XREF: sub_406A50+13C↓o
.text:004069A0                                         ; sub_406A50+43A↓o ...
.text:004069C7 aCannotChdirToD db 'cannot chdir to directory %s',0
.text:004069C7                                         ; DATA XREF: sub_406A50+363↓o
.text:004069E4                 align 20h
.text:00406A00 aFailedToReturn db 'failed to return to initial working directory',0
.text:00406A00                                         ; DATA XREF: sub_406A50+3C7↓o
.text:00406A00                                         ; sub_406A50+49C↓o
.text:00406A2E aCannotCreateDi_0 db 'cannot create directory %s',0
.text:00406A2E                                         ; DATA XREF: sub_406A50+580↓o
.text:00406A2E                                         ; sub_406A50+84F↓o ...
.text:00406A49 ; const CHAR asc_406A49[]
.text:00406A49 asc_406A49      db '/',0                ; DATA XREF: sub_406A50:loc_4072C3↓o
.text:00406A4B                 align 10h
.text:00406A50
.text:00406A50 ; =============== S U B R O U T I N E =======================================
.text:00406A50
.text:00406A50
.text:00406A50 ; int __cdecl sub_406A50(char *Str, __int16, __int16, int, int, char, char *)
.text:00406A50 sub_406A50      proc near               ; CODE XREF: sub_401700+62E↑p
.text:00406A50                                         ; sub_402170+7A↑p
.text:00406A50
.text:00406A50 FileName        = dword ptr -14Ch
.text:00406A50 AccessMode      = dword ptr -148h
.text:00406A50 var_144         = dword ptr -144h
.text:00406A50 var_140         = byte ptr -140h
.text:00406A50 var_134         = dword ptr -134h
.text:00406A50 var_12D         = byte ptr -12Dh
.text:00406A50 Mode            = dword ptr -12Ch
.text:00406A50 var_128         = dword ptr -128h
.text:00406A50 var_121         = byte ptr -121h
.text:00406A50 var_120         = dword ptr -120h
.text:00406A50 var_119         = byte ptr -119h
.text:00406A50 var_118         = dword ptr -118h
.text:00406A50 var_111         = byte ptr -111h
.text:00406A50 var_110         = dword ptr -110h
.text:00406A50 var_10C         = dword ptr -10Ch
.text:00406A50 var_105         = byte ptr -105h
.text:00406A50 Block           = byte ptr -104h
.text:00406A50 var_FC          = dword ptr -0FCh
.text:00406A50 var_8C          = dword ptr -8Ch
.text:00406A50 Str             = dword ptr  4
.text:00406A50 arg_4           = word ptr  8
.text:00406A50 arg_8           = word ptr  0Ch
.text:00406A50 arg_C           = dword ptr  10h
.text:00406A50 arg_10          = dword ptr  14h
.text:00406A50 arg_14          = byte ptr  18h
.text:00406A50 arg_18          = dword ptr  1Ch
.text:00406A50
.text:00406A50                 push    ebp
.text:00406A51                 push    edi
.text:00406A52                 push    esi
.text:00406A53                 push    ebx
.text:00406A54                 sub     esp, 13Ch
.text:00406A5A                 mov     edi, [esp+14Ch+Str]
.text:00406A61                 movzx   edx, [esp+14Ch+arg_4]
.text:00406A69                 movzx   eax, [esp+14Ch+arg_8]
.text:00406A71                 movzx   ebx, [esp+14Ch+arg_14]
.text:00406A79                 mov     [esp+14Ch+var_111], 1
.text:00406A7E                 mov     [esp+14Ch+var_10C], edx
.text:00406A82                 lea     edx, [esp+14Ch+var_8C]
.text:00406A89                 mov     [esp+14Ch+var_110], eax
.text:00406A8D                 mov     [esp+14Ch+AccessMode], edx ; int
.text:00406A91                 mov     [esp+14Ch+FileName], edi ; char *
.text:00406A94                 call    sub_418A10
.text:00406A99                 test    eax, eax
.text:00406A9B                 jnz     loc_406BE0
.text:00406AA1                 mov     edx, [esp+14Ch+var_8C]
.text:00406AA8                 and     edx, 0F000h
.text:00406AAE                 cmp     edx, 4000h
.text:00406AB4                 jz      short loc_406AF6
.text:00406AB6                 mov     [esp+14Ch+FileName], edi ; char *
.text:00406AB9                 call    sub_40AD30
.text:00406ABE                 mov     [esp+14Ch+FileName], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:00406AC5                 mov     edi, eax
.text:00406AC7                 call    ds:libintl_gettext
.text:00406ACD                 mov     dword ptr [esp+14Ch+var_140], edi ; char
.text:00406AD1                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:00406AD9                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406AE0                 mov     [esp+14Ch+var_144], eax ; char *
.text:00406AE4                 call    sub_415220
.text:00406AE9
.text:00406AE9 loc_406AE9:                             ; CODE XREF: sub_406A50+3BB↓j
.text:00406AE9                                         ; sub_406A50+47B↓j ...
.text:00406AE9                 xor     eax, eax
.text:00406AEB
.text:00406AEB loc_406AEB:                             ; CODE XREF: sub_406A50+F3↓j
.text:00406AEB                                         ; sub_406A50+409↓j
.text:00406AEB                 add     esp, 13Ch
.text:00406AF1                 pop     ebx
.text:00406AF2                 pop     esi
.text:00406AF3                 pop     edi
.text:00406AF4                 pop     ebp
.text:00406AF5                 retn
.text:00406AF6 ; ---------------------------------------------------------------------------
.text:00406AF6
.text:00406AF6 loc_406AF6:                             ; CODE XREF: sub_406A50+64↑j
.text:00406AF6                 test    bl, bl
.text:00406AF8                 jnz     short loc_406B3E
.text:00406AFA                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:00406B02                 jz      loc_406BC6
.text:00406B08
.text:00406B08 loc_406B08:                             ; CODE XREF: sub_406A50+17E↓j
.text:00406B08                 mov     [esp+14Ch+FileName], edi ; char *
.text:00406B0B                 mov     edx, [esp+14Ch+arg_10]
.text:00406B12                 mov     esi, [esp+14Ch+arg_C]
.text:00406B19                 mov     [esp+14Ch+var_144], edx ; int
.text:00406B1D                 mov     [esp+14Ch+AccessMode], esi ; int
.text:00406B21                 call    sub_408250
.text:00406B26                 test    eax, eax
.text:00406B28                 jnz     short loc_406B84
.text:00406B2A
.text:00406B2A loc_406B2A:                             ; CODE XREF: sub_406A50+171↓j
.text:00406B2A                                         ; sub_406A50+184↓j
.text:00406B2A                 mov     [esp+14Ch+FileName], edi ; FileName
.text:00406B2D                 mov     esi, [esp+14Ch+var_10C]
.text:00406B31                 mov     [esp+14Ch+AccessMode], esi ; AccessMode
.text:00406B35                 call    _chmod
.text:00406B3A                 test    eax, eax
.text:00406B3C                 jnz     short loc_406B45
.text:00406B3E
.text:00406B3E loc_406B3E:                             ; CODE XREF: sub_406A50+A8↑j
.text:00406B3E                                         ; sub_406A50+132↓j ...
.text:00406B3E                 movzx   eax, [esp+14Ch+var_111]
.text:00406B43                 jmp     short loc_406AEB
.text:00406B45 ; ---------------------------------------------------------------------------
.text:00406B45
.text:00406B45 loc_406B45:                             ; CODE XREF: sub_406A50+EC↑j
.text:00406B45                 mov     [esp+14Ch+FileName], edi ; char *
.text:00406B48                 call    sub_40AD30
.text:00406B4D                 mov     [esp+14Ch+FileName], offset aCannotChangePe_0 ; "cannot change permissions of %s"
.text:00406B54                 mov     ebx, eax
.text:00406B56                 call    ds:libintl_gettext
.text:00406B5C                 mov     ebp, eax
.text:00406B5E                 call    _errno
.text:00406B63                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00406B67                 mov     [esp+14Ch+var_144], ebp ; char *
.text:00406B6B                 mov     edi, [eax]
.text:00406B6D                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406B74                 mov     [esp+14Ch+AccessMode], edi ; ErrorMessage
.text:00406B78                 call    sub_415220
.text:00406B7D                 mov     [esp+14Ch+var_111], 0
.text:00406B82                 jmp     short loc_406B3E
.text:00406B84 ; ---------------------------------------------------------------------------
.text:00406B84
.text:00406B84 loc_406B84:                             ; CODE XREF: sub_406A50+D8↑j
.text:00406B84                 mov     [esp+14Ch+FileName], edi ; char *
.text:00406B87                 call    sub_40AD30
.text:00406B8C                 mov     [esp+14Ch+FileName], offset aCannotChangeOw_0 ; "cannot change owner and/or group of %s"
.text:00406B93                 mov     ebx, eax
.text:00406B95                 call    ds:libintl_gettext
.text:00406B9B                 mov     ebp, eax
.text:00406B9D                 call    _errno
.text:00406BA2                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00406BA6                 mov     [esp+14Ch+var_144], ebp ; char *
.text:00406BAA                 mov     ecx, [eax]
.text:00406BAC                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406BB3                 mov     [esp+14Ch+AccessMode], ecx ; ErrorMessage
.text:00406BB7                 call    sub_415220
.text:00406BBC                 mov     [esp+14Ch+var_111], 0
.text:00406BC1                 jmp     loc_406B2A
.text:00406BC6 ; ---------------------------------------------------------------------------
.text:00406BC6
.text:00406BC6 loc_406BC6:                             ; CODE XREF: sub_406A50+B2↑j
.text:00406BC6                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:00406BCE                 jnz     loc_406B08
.text:00406BD4                 jmp     loc_406B2A
.text:00406BD4 ; ---------------------------------------------------------------------------
.text:00406BD9                 align 10h
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: sub_406A50+4B↑j
.text:00406BE0                 mov     [esp+14Ch+var_120], 0
.text:00406BE8                 mov     [esp+14Ch+FileName], 0 ; Mode
.text:00406BEF                 call    _umask
.text:00406BF4                 mov     [esp+14Ch+FileName], edi ; Str
.text:00406BF7                 movzx   esi, ax
.text:00406BFA                 mov     [esp+14Ch+Mode], esi
.text:00406BFE                 call    strlen
.text:00406C03                 inc     eax
.text:00406C04                 mov     [esp+14Ch+FileName], eax ; Size
.text:00406C07                 call    malloc
.text:00406C0C                 mov     [esp+14Ch+var_128], eax
.text:00406C10                 mov     [esp+14Ch+AccessMode], edi ; Source
.text:00406C14                 mov     [esp+14Ch+FileName], eax ; Destination
.text:00406C17                 call    strcpy
.text:00406C1C                 mov     ebx, [esp+14Ch+var_128]
.text:00406C20                 mov     [esp+14Ch+FileName], ebx
.text:00406C23                 call    sub_40C100
.text:00406C28                 mov     ecx, [esp+14Ch+var_110]
.text:00406C2C                 and     ecx, 0C0h
.text:00406C32                 cmp     ecx, 0C0h ; 'À'
.text:00406C38                 jz      loc_4072E6
.text:00406C3E
.text:00406C3E loc_406C3E:                             ; CODE XREF: sub_406A50+8A8↓j
.text:00406C3E                 mov     [esp+14Ch+var_118], 1C0h
.text:00406C46                 mov     [esp+14Ch+var_119], 1
.text:00406C4B
.text:00406C4B loc_406C4B:                             ; CODE XREF: sub_406A50+8BB↓j
.text:00406C4B                 lea     ebp, [esp+14Ch+Block]
.text:00406C4F                 mov     [esp+14Ch+FileName], ebp
.text:00406C52                 call    sub_40C050
.text:00406C57                 test    eax, eax
.text:00406C59                 setz    [esp+14Ch+var_121]
.text:00406C5E                 cmp     [esp+14Ch+var_121], 0
.text:00406C63                 jz      loc_4072D3
.text:00406C69                 mov     ecx, [esp+14Ch+var_128]
.text:00406C6D                 movzx   eax, byte ptr [ecx]
.text:00406C70                 cmp     al, 2Fh ; '/'
.text:00406C72                 jz      loc_4072C3
.text:00406C78
.text:00406C78 loc_406C78:                             ; CODE XREF: sub_406A50+88A↓j
.text:00406C78                 cmp     al, 2Fh ; '/'
.text:00406C7A                 mov     esi, [esp+14Ch+var_128]
.text:00406C7E                 jz      loc_4072B8
.text:00406C84                 lea     esi, [esi+0]
.text:00406C8A                 lea     edi, [edi+0]
.text:00406C90
.text:00406C90 loc_406C90:                             ; CODE XREF: sub_406A50+334↓j
.text:00406C90                                         ; sub_406A50+346↓j ...
.text:00406C90                 mov     [esp+14Ch+FileName], esi ; Str
.text:00406C93                 mov     edi, esi
.text:00406C95                 mov     [esp+14Ch+AccessMode], 2Fh ; '/' ; Val
.text:00406C9D                 call    strchr
.text:00406CA2                 test    eax, eax
.text:00406CA4                 mov     esi, eax
.text:00406CA6                 jz      loc_406FF1
.text:00406CAC                 cmp     [esp+14Ch+var_121], 0
.text:00406CB1                 jnz     short loc_406CB7
.text:00406CB3                 mov     edi, [esp+14Ch+var_128]
.text:00406CB7
.text:00406CB7 loc_406CB7:                             ; CODE XREF: sub_406A50+261↑j
.text:00406CB7                 mov     byte ptr [esi], 0
.text:00406CBA                 lea     ebp, [esp+14Ch+var_105]
.text:00406CBE                 mov     bl, 1
.text:00406CC0                 mov     [esp+14Ch+FileName], edi ; LPCSTR
.text:00406CC3                 mov     edx, [esp+14Ch+var_118]
.text:00406CC7                 mov     [esp+14Ch+AccessMode], edx ; AccessMode
.text:00406CCB                 call    sub_4177A0
.text:00406CD0                 test    eax, eax
.text:00406CD2                 setz    [esp+14Ch+var_12D]
.text:00406CD7                 cmp     [esp+14Ch+var_12D], 0
.text:00406CDC                 jz      loc_406F51
.text:00406CE2
.text:00406CE2 loc_406CE2:                             ; CODE XREF: sub_406A50+530↓j
.text:00406CE2                                         ; sub_406A50+56F↓j
.text:00406CE2                 test    ebp, ebp
.text:00406CE4                 jz      short loc_406CEE
.text:00406CE6                 movzx   edx, [esp+14Ch+var_12D]
.text:00406CEB                 mov     [ebp+0], dl
.text:00406CEE
.text:00406CEE loc_406CEE:                             ; CODE XREF: sub_406A50+294↑j
.text:00406CEE                 test    bl, bl
.text:00406CF0                 jz      loc_406F35
.text:00406CF6                 cmp     [esp+14Ch+var_105], 0
.text:00406CFB                 jz      short loc_406D76
.text:00406CFD                 mov     ebp, [esp+14Ch+arg_18]
.text:00406D04                 test    ebp, ebp
.text:00406D06                 jz      short loc_406D37
.text:00406D08                 mov     ecx, [esp+14Ch+var_128]
.text:00406D0C                 mov     [esp+14Ch+FileName], ecx ; char *
.text:00406D0F                 call    sub_40AD30
.text:00406D14                 mov     dword ptr [esp+14Ch+var_140], eax ; char
.text:00406D18                 mov     eax, [esp+14Ch+arg_18]
.text:00406D1F                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:00406D27                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406D2E                 mov     [esp+14Ch+var_144], eax ; char *
.text:00406D32                 call    sub_415220
.text:00406D37
.text:00406D37 loc_406D37:                             ; CODE XREF: sub_406A50+2B6↑j
.text:00406D37                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:00406D3F                 jz      loc_406F22
.text:00406D45
.text:00406D45 loc_406D45:                             ; CODE XREF: sub_406A50+4DA↓j
.text:00406D45                 mov     [esp+14Ch+FileName], edi ; char *
.text:00406D48                 mov     edx, [esp+14Ch+arg_10]
.text:00406D4F                 mov     ebx, [esp+14Ch+arg_C]
.text:00406D56                 mov     [esp+14Ch+var_144], edx ; int
.text:00406D5A                 mov     [esp+14Ch+AccessMode], ebx ; int
.text:00406D5E                 call    sub_408250
.text:00406D63                 test    eax, eax
.text:00406D65                 jnz     loc_406E7E
.text:00406D6B
.text:00406D6B loc_406D6B:                             ; CODE XREF: sub_406A50+4E0↓j
.text:00406D6B                 cmp     [esp+14Ch+var_119], 0
.text:00406D70                 jnz     loc_406E60
.text:00406D76
.text:00406D76 loc_406D76:                             ; CODE XREF: sub_406A50+2AB↑j
.text:00406D76                                         ; sub_406A50+429↓j
.text:00406D76                 cmp     [esp+14Ch+var_121], 0
.text:00406D7B                 jnz     short loc_406D9B
.text:00406D7D
.text:00406D7D loc_406D7D:                             ; CODE XREF: sub_406A50+355↓j
.text:00406D7D                 mov     byte ptr [esi], 2Fh ; '/'
.text:00406D80                 inc     esi
.text:00406D81                 cmp     byte ptr [esi], 2Fh ; '/'
.text:00406D84                 jnz     loc_406C90
.text:00406D8A                 lea     esi, [esi+0]
.text:00406D90
.text:00406D90 loc_406D90:                             ; CODE XREF: sub_406A50+344↓j
.text:00406D90                 inc     esi
.text:00406D91                 cmp     byte ptr [esi], 2Fh ; '/'
.text:00406D94                 jz      short loc_406D90
.text:00406D96                 jmp     loc_406C90
.text:00406D9B ; ---------------------------------------------------------------------------
.text:00406D9B
.text:00406D9B loc_406D9B:                             ; CODE XREF: sub_406A50+32B↑j
.text:00406D9B                 mov     [esp+14Ch+FileName], edi ; LPCSTR
.text:00406D9E                 call    sub_419A70
.text:00406DA3                 test    eax, eax
.text:00406DA5                 jns     short loc_406D7D
.text:00406DA7                 mov     esi, [esp+14Ch+var_128]
.text:00406DAB                 mov     [esp+14Ch+FileName], esi ; char *
.text:00406DAE                 call    sub_40AD30
.text:00406DB3                 mov     [esp+14Ch+FileName], offset aCannotChdirToD ; "cannot chdir to directory %s"
.text:00406DBA                 mov     ebx, eax
.text:00406DBC                 call    ds:libintl_gettext
.text:00406DC2                 mov     ebp, eax
.text:00406DC4                 call    _errno
.text:00406DC9                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00406DCD                 mov     [esp+14Ch+var_144], ebp ; char *
.text:00406DD1                 mov     edi, [eax]
.text:00406DD3                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406DDA                 mov     [esp+14Ch+AccessMode], edi ; ErrorMessage
.text:00406DDE                 call    sub_415220
.text:00406DE3                 mov     eax, [esp+14Ch+Mode]
.text:00406DE7                 mov     [esp+14Ch+FileName], eax ; Mode
.text:00406DEA                 call    _umask
.text:00406DEF
.text:00406DEF loc_406DEF:                             ; CODE XREF: sub_406A50+4FC↓j
.text:00406DEF                 lea     ecx, [esp+14Ch+Block]
.text:00406DF3                 mov     [esp+14Ch+FileName], ecx
.text:00406DF6                 call    sub_40C090
.text:00406DFB                 test    eax, eax
.text:00406DFD                 jnz     short loc_406E10
.text:00406DFF
.text:00406DFF loc_406DFF:                             ; CODE XREF: sub_406A50+48F↓j
.text:00406DFF                 lea     ebx, [esp+14Ch+Block]
.text:00406E03                 mov     [esp+14Ch+FileName], ebx ; Block
.text:00406E06                 call    sub_40C0C0
.text:00406E0B                 jmp     loc_406AE9
.text:00406E10 ; ---------------------------------------------------------------------------
.text:00406E10
.text:00406E10 loc_406E10:                             ; CODE XREF: sub_406A50+3AD↑j
.text:00406E10                 call    _errno
.text:00406E15                 mov     esi, [eax]
.text:00406E17                 mov     [esp+14Ch+FileName], offset aFailedToReturn ; "failed to return to initial working dir"...
.text:00406E1E                 call    ds:libintl_gettext
.text:00406E24                 mov     ebp, eax
.text:00406E26                 call    _errno
.text:00406E2B                 mov     [esp+14Ch+var_144], ebp ; char *
.text:00406E2F                 mov     ebx, [eax]
.text:00406E31                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406E38                 mov     [esp+14Ch+AccessMode], ebx ; ErrorMessage
.text:00406E3C                 call    sub_415220
.text:00406E41                 lea     eax, [esp+14Ch+Block]
.text:00406E45                 mov     [esp+14Ch+FileName], eax ; Block
.text:00406E48
.text:00406E48 loc_406E48:                             ; CODE XREF: sub_406A50+4CD↓j
.text:00406E48                 call    sub_40C0C0
.text:00406E4D                 call    _errno
.text:00406E52                 mov     [eax], esi
.text:00406E54                 mov     eax, 1
.text:00406E59                 jmp     loc_406AEB
.text:00406E59 ; ---------------------------------------------------------------------------
.text:00406E5E                 align 10h
.text:00406E60
.text:00406E60 loc_406E60:                             ; CODE XREF: sub_406A50+320↑j
.text:00406E60                 mov     [esp+14Ch+FileName], 8 ; Size
.text:00406E67                 call    malloc
.text:00406E6C                 mov     [eax], esi
.text:00406E6E                 mov     ebp, [esp+14Ch+var_120]
.text:00406E72                 mov     [esp+14Ch+var_120], eax
.text:00406E76                 mov     [eax+4], ebp
.text:00406E79                 jmp     loc_406D76
.text:00406E7E ; ---------------------------------------------------------------------------
.text:00406E7E
.text:00406E7E loc_406E7E:                             ; CODE XREF: sub_406A50+315↑j
.text:00406E7E                 mov     ecx, [esp+14Ch+var_128]
.text:00406E82                 mov     [esp+14Ch+FileName], ecx ; char *
.text:00406E85                 call    sub_40AD30
.text:00406E8A                 mov     [esp+14Ch+FileName], offset aCannotChangeOw_0 ; "cannot change owner and/or group of %s"
.text:00406E91                 mov     ebx, eax
.text:00406E93                 call    ds:libintl_gettext
.text:00406E99                 mov     ebp, eax
.text:00406E9B                 call    _errno
.text:00406EA0                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00406EA4                 mov     [esp+14Ch+var_144], ebp ; char *
.text:00406EA8                 mov     esi, [eax]
.text:00406EAA                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406EB1                 mov     [esp+14Ch+AccessMode], esi ; ErrorMessage
.text:00406EB5                 call    sub_415220
.text:00406EBA                 mov     edi, [esp+14Ch+Mode]
.text:00406EBE                 mov     [esp+14Ch+FileName], edi ; Mode
.text:00406EC1                 call    _umask
.text:00406EC6                 cmp     [esp+14Ch+var_121], 0
.text:00406ECB                 jz      loc_406AE9
.text:00406ED1                 lea     edx, [esp+14Ch+Block]
.text:00406ED5                 mov     [esp+14Ch+FileName], edx
.text:00406ED8
.text:00406ED8 loc_406ED8:                             ; CODE XREF: sub_406A50+7CF↓j
.text:00406ED8                 call    sub_40C090
.text:00406EDD                 test    eax, eax
.text:00406EDF                 jz      loc_406DFF
.text:00406EE5
.text:00406EE5 loc_406EE5:                             ; CODE XREF: sub_406A50+6E3↓j
.text:00406EE5                 call    _errno
.text:00406EEA                 mov     esi, [eax]
.text:00406EEC                 mov     [esp+14Ch+FileName], offset aFailedToReturn ; "failed to return to initial working dir"...
.text:00406EF3                 call    ds:libintl_gettext
.text:00406EF9                 mov     edi, eax
.text:00406EFB                 call    _errno
.text:00406F00                 mov     [esp+14Ch+var_144], edi ; char *
.text:00406F04                 mov     ebp, [eax]
.text:00406F06                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406F0D                 mov     [esp+14Ch+AccessMode], ebp ; ErrorMessage
.text:00406F11                 call    sub_415220
.text:00406F16                 lea     ecx, [esp+14Ch+Block]
.text:00406F1A                 mov     [esp+14Ch+FileName], ecx
.text:00406F1D                 jmp     loc_406E48
.text:00406F22 ; ---------------------------------------------------------------------------
.text:00406F22
.text:00406F22 loc_406F22:                             ; CODE XREF: sub_406A50+2EF↑j
.text:00406F22                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:00406F2A                 jnz     loc_406D45
.text:00406F30                 jmp     loc_406D6B
.text:00406F35 ; ---------------------------------------------------------------------------
.text:00406F35
.text:00406F35 loc_406F35:                             ; CODE XREF: sub_406A50+2A0↑j
.text:00406F35                 mov     esi, [esp+14Ch+Mode]
.text:00406F39                 mov     [esp+14Ch+FileName], esi ; Mode
.text:00406F3C                 call    _umask
.text:00406F41                 cmp     [esp+14Ch+var_121], 0
.text:00406F46                 jz      loc_406AE9
.text:00406F4C                 jmp     loc_406DEF
.text:00406F51 ; ---------------------------------------------------------------------------
.text:00406F51
.text:00406F51 loc_406F51:                             ; CODE XREF: sub_406A50+28C↑j
.text:00406F51                 call    _errno
.text:00406F56                 mov     edx, [eax]
.text:00406F58                 lea     ecx, [esp+14Ch+var_FC]
.text:00406F5C                 mov     [esp+14Ch+AccessMode], ecx ; int
.text:00406F60                 mov     [esp+14Ch+FileName], edi ; char *
.text:00406F63                 mov     [esp+14Ch+var_134], edx
.text:00406F67                 call    sub_418A10
.text:00406F6C                 test    eax, eax
.text:00406F6E                 jnz     short loc_406FC4
.text:00406F70                 mov     ecx, [esp+14Ch+var_FC]
.text:00406F74                 and     ecx, 0F000h
.text:00406F7A                 cmp     ecx, 4000h
.text:00406F80                 jz      loc_406CE2
.text:00406F86                 mov     ebx, [esp+14Ch+var_128]
.text:00406F8A                 mov     [esp+14Ch+FileName], ebx ; char *
.text:00406F8D                 call    sub_40AD30
.text:00406F92                 mov     [esp+14Ch+FileName], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:00406F99                 mov     ebx, eax
.text:00406F9B                 call    ds:libintl_gettext
.text:00406FA1                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00406FA5                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:00406FAD                 mov     [esp+14Ch+var_144], eax ; char *
.text:00406FB1
.text:00406FB1 loc_406FB1:                             ; CODE XREF: sub_406A50+59F↓j
.text:00406FB1                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00406FB8                 xor     ebx, ebx
.text:00406FBA                 call    sub_415220
.text:00406FBF                 jmp     loc_406CE2
.text:00406FC4 ; ---------------------------------------------------------------------------
.text:00406FC4
.text:00406FC4 loc_406FC4:                             ; CODE XREF: sub_406A50+51E↑j
.text:00406FC4                 mov     eax, [esp+14Ch+var_128]
.text:00406FC8                 mov     [esp+14Ch+FileName], eax ; char *
.text:00406FCB                 call    sub_40AD30
.text:00406FD0                 mov     [esp+14Ch+FileName], offset aCannotCreateDi_0 ; "cannot create directory %s"
.text:00406FD7                 mov     ebx, eax
.text:00406FD9                 call    ds:libintl_gettext
.text:00406FDF                 mov     dword ptr [esp+14Ch+var_140], ebx
.text:00406FE3                 mov     ebx, [esp+14Ch+var_134]
.text:00406FE7                 mov     [esp+14Ch+var_144], eax
.text:00406FEB                 mov     [esp+14Ch+AccessMode], ebx
.text:00406FEF                 jmp     short loc_406FB1
.text:00406FF1 ; ---------------------------------------------------------------------------
.text:00406FF1
.text:00406FF1 loc_406FF1:                             ; CODE XREF: sub_406A50+256↑j
.text:00406FF1                 cmp     [esp+14Ch+var_121], 0
.text:00406FF6                 jnz     short loc_406FFC
.text:00406FF8                 mov     edi, [esp+14Ch+var_128]
.text:00406FFC
.text:00406FFC loc_406FFC:                             ; CODE XREF: sub_406A50+5A6↑j
.text:00406FFC                 mov     edx, [esp+14Ch+Mode]
.text:00407000                 mov     bl, 1
.text:00407002                 mov     [esp+14Ch+FileName], edx ; Mode
.text:00407005                 call    _umask
.text:0040700A                 mov     [esp+14Ch+FileName], edi ; LPCSTR
.text:0040700D                 mov     eax, [esp+14Ch+var_10C]
.text:00407011                 mov     [esp+14Ch+AccessMode], eax ; AccessMode
.text:00407015                 call    sub_4177A0
.text:0040701A                 test    eax, eax
.text:0040701C                 jnz     loc_407224
.text:00407022
.text:00407022 loc_407022:                             ; CODE XREF: sub_406A50+7FF↓j
.text:00407022                                         ; sub_406A50+83E↓j
.text:00407022                 test    bl, bl
.text:00407024                 jz      loc_407201
.text:0040702A                 mov     edx, [esp+14Ch+arg_18]
.text:00407031                 test    edx, edx
.text:00407033                 jz      short loc_407064
.text:00407035                 mov     ebp, [esp+14Ch+var_128]
.text:00407039                 mov     [esp+14Ch+FileName], ebp ; char *
.text:0040703C                 call    sub_40AD30
.text:00407041                 mov     dword ptr [esp+14Ch+var_140], eax ; char
.text:00407045                 mov     esi, [esp+14Ch+arg_18]
.text:0040704C                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:00407054                 mov     [esp+14Ch+FileName], 0 ; Code
.text:0040705B                 mov     [esp+14Ch+var_144], esi ; char *
.text:0040705F                 call    sub_415220
.text:00407064
.text:00407064 loc_407064:                             ; CODE XREF: sub_406A50+5E3↑j
.text:00407064                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:0040706C                 jz      loc_4071EE
.text:00407072
.text:00407072 loc_407072:                             ; CODE XREF: sub_406A50+7A6↓j
.text:00407072                 mov     [esp+14Ch+FileName], edi ; char *
.text:00407075                 mov     ebx, [esp+14Ch+arg_10]
.text:0040707C                 mov     ecx, [esp+14Ch+arg_C]
.text:00407083                 mov     [esp+14Ch+var_144], ebx ; int
.text:00407087                 mov     [esp+14Ch+AccessMode], ecx ; int
.text:0040708B                 call    sub_408250
.text:00407090                 test    eax, eax
.text:00407092                 jnz     loc_4071A8
.text:00407098
.text:00407098 loc_407098:                             ; CODE XREF: sub_406A50+799↓j
.text:00407098                                         ; sub_406A50+7AC↓j
.text:00407098                 test    [esp+14Ch+var_10C], 0FE00h
.text:004070A0                 jnz     loc_40714A
.text:004070A6
.text:004070A6 loc_4070A6:                             ; CODE XREF: sub_406A50+70C↓j
.text:004070A6                                         ; sub_406A50+753↓j
.text:004070A6                 cmp     [esp+14Ch+var_121], 0
.text:004070AB                 jnz     short loc_407125
.text:004070AD
.text:004070AD loc_4070AD:                             ; CODE XREF: sub_406A50+6F5↓j
.text:004070AD                 mov     edi, [esp+14Ch+var_120]
.text:004070B1                 test    edi, edi
.text:004070B3                 jz      loc_406B3E
.text:004070B9
.text:004070B9 loc_4070B9:                             ; CODE XREF: sub_406A50+68B↓j
.text:004070B9                 mov     ebx, [edi]
.text:004070BB                 mov     byte ptr [ebx], 0
.text:004070BE                 mov     edx, [esp+14Ch+var_110]
.text:004070C2                 mov     ebp, [esp+14Ch+var_128]
.text:004070C6                 mov     [esp+14Ch+AccessMode], edx ; AccessMode
.text:004070CA                 mov     [esp+14Ch+FileName], ebp ; FileName
.text:004070CD                 call    _chmod
.text:004070D2                 test    eax, eax
.text:004070D4                 jnz     short loc_4070E2
.text:004070D6
.text:004070D6 loc_4070D6:                             ; CODE XREF: sub_406A50+6D3↓j
.text:004070D6                 mov     edi, [edi+4]
.text:004070D9                 test    edi, edi
.text:004070DB                 jnz     short loc_4070B9
.text:004070DD                 jmp     loc_406B3E
.text:004070E2 ; ---------------------------------------------------------------------------
.text:004070E2
.text:004070E2 loc_4070E2:                             ; CODE XREF: sub_406A50+684↑j
.text:004070E2                 mov     esi, [esp+14Ch+var_128]
.text:004070E6                 mov     [esp+14Ch+FileName], esi ; char *
.text:004070E9                 call    sub_40AD30
.text:004070EE                 mov     [esp+14Ch+FileName], offset aCannotChangePe_0 ; "cannot change permissions of %s"
.text:004070F5                 mov     ebx, eax
.text:004070F7                 call    ds:libintl_gettext
.text:004070FD                 mov     ebp, eax
.text:004070FF                 call    _errno
.text:00407104                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00407108                 mov     [esp+14Ch+var_144], ebp ; char *
.text:0040710C                 mov     ecx, [eax]
.text:0040710E                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00407115                 mov     [esp+14Ch+AccessMode], ecx ; ErrorMessage
.text:00407119                 call    sub_415220
.text:0040711E                 mov     [esp+14Ch+var_111], 0
.text:00407123                 jmp     short loc_4070D6
.text:00407125 ; ---------------------------------------------------------------------------
.text:00407125
.text:00407125 loc_407125:                             ; CODE XREF: sub_406A50+65B↑j
.text:00407125                 lea     esi, [esp+14Ch+Block]
.text:00407129                 mov     [esp+14Ch+FileName], esi
.text:0040712C                 call    sub_40C090
.text:00407131                 test    eax, eax
.text:00407133                 jnz     loc_406EE5
.text:00407139                 lea     eax, [esp+14Ch+Block]
.text:0040713D                 mov     [esp+14Ch+FileName], eax ; Block
.text:00407140                 call    sub_40C0C0
.text:00407145                 jmp     loc_4070AD
.text:0040714A ; ---------------------------------------------------------------------------
.text:0040714A
.text:0040714A loc_40714A:                             ; CODE XREF: sub_406A50+650↑j
.text:0040714A                 mov     [esp+14Ch+FileName], edi ; FileName
.text:0040714D                 mov     eax, [esp+14Ch+var_10C]
.text:00407151                 mov     [esp+14Ch+AccessMode], eax ; AccessMode
.text:00407155                 call    _chmod
.text:0040715A                 test    eax, eax
.text:0040715C                 jz      loc_4070A6
.text:00407162                 mov     ecx, [esp+14Ch+var_128]
.text:00407166                 mov     [esp+14Ch+FileName], ecx ; char *
.text:00407169                 call    sub_40AD30
.text:0040716E                 mov     [esp+14Ch+FileName], offset aCannotChangePe_0 ; "cannot change permissions of %s"
.text:00407175                 mov     ebx, eax
.text:00407177                 call    ds:libintl_gettext
.text:0040717D                 mov     ebp, eax
.text:0040717F                 call    _errno
.text:00407184                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:00407188                 mov     [esp+14Ch+var_144], ebp ; char *
.text:0040718C                 mov     edi, [eax]
.text:0040718E                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00407195                 mov     [esp+14Ch+AccessMode], edi ; ErrorMessage
.text:00407199                 call    sub_415220
.text:0040719E                 mov     [esp+14Ch+var_111], 0
.text:004071A3                 jmp     loc_4070A6
.text:004071A8 ; ---------------------------------------------------------------------------
.text:004071A8
.text:004071A8 loc_4071A8:                             ; CODE XREF: sub_406A50+642↑j
.text:004071A8                 mov     esi, [esp+14Ch+var_128]
.text:004071AC                 mov     [esp+14Ch+FileName], esi ; char *
.text:004071AF                 call    sub_40AD30
.text:004071B4                 mov     [esp+14Ch+FileName], offset aCannotChangeOw_0 ; "cannot change owner and/or group of %s"
.text:004071BB                 mov     ebx, eax
.text:004071BD                 call    ds:libintl_gettext
.text:004071C3                 mov     ebp, eax
.text:004071C5                 call    _errno
.text:004071CA                 mov     dword ptr [esp+14Ch+var_140], ebx ; char
.text:004071CE                 mov     [esp+14Ch+var_144], ebp ; char *
.text:004071D2                 mov     edx, [eax]
.text:004071D4                 mov     [esp+14Ch+FileName], 0 ; Code
.text:004071DB                 mov     [esp+14Ch+AccessMode], edx ; ErrorMessage
.text:004071DF                 call    sub_415220
.text:004071E4                 mov     [esp+14Ch+var_111], 0
.text:004071E9                 jmp     loc_407098
.text:004071EE ; ---------------------------------------------------------------------------
.text:004071EE
.text:004071EE loc_4071EE:                             ; CODE XREF: sub_406A50+61C↑j
.text:004071EE                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:004071F6                 jnz     loc_407072
.text:004071FC                 jmp     loc_407098
.text:00407201 ; ---------------------------------------------------------------------------
.text:00407201
.text:00407201 loc_407201:                             ; CODE XREF: sub_406A50+5D4↑j
.text:00407201                 mov     edi, [esp+14Ch+Mode]
.text:00407205                 mov     [esp+14Ch+FileName], edi ; Mode
.text:00407208                 call    _umask
.text:0040720D                 cmp     [esp+14Ch+var_121], 0
.text:00407212                 jz      loc_406AE9
.text:00407218                 lea     eax, [esp+14Ch+Block]
.text:0040721C                 mov     [esp+14Ch+FileName], eax
.text:0040721F                 jmp     loc_406ED8
.text:00407224 ; ---------------------------------------------------------------------------
.text:00407224
.text:00407224 loc_407224:                             ; CODE XREF: sub_406A50+5CC↑j
.text:00407224                 call    _errno
.text:00407229                 lea     ebp, [esp+14Ch+var_FC]
.text:0040722D                 mov     esi, [eax]
.text:0040722F                 mov     [esp+14Ch+AccessMode], ebp ; int
.text:00407233                 mov     [esp+14Ch+FileName], edi ; char *
.text:00407236                 call    sub_418A10
.text:0040723B                 test    eax, eax
.text:0040723D                 jnz     short loc_407293
.text:0040723F                 mov     esi, [esp+14Ch+var_FC]
.text:00407243                 and     esi, 0F000h
.text:00407249                 cmp     esi, 4000h
.text:0040724F                 jz      loc_407022
.text:00407255                 mov     ecx, [esp+14Ch+var_128]
.text:00407259                 mov     [esp+14Ch+FileName], ecx ; char *
.text:0040725C                 call    sub_40AD30
.text:00407261                 mov     [esp+14Ch+FileName], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:00407268                 mov     ebp, eax
.text:0040726A                 call    ds:libintl_gettext
.text:00407270                 mov     dword ptr [esp+14Ch+var_140], ebp ; char
.text:00407274                 mov     [esp+14Ch+AccessMode], 0 ; ErrorMessage
.text:0040727C
.text:0040727C loc_40727C:                             ; CODE XREF: sub_406A50+866↓j
.text:0040727C                 mov     [esp+14Ch+var_144], eax ; char *
.text:00407280                 mov     [esp+14Ch+FileName], 0 ; Code
.text:00407287                 xor     ebx, ebx
.text:00407289                 call    sub_415220
.text:0040728E                 jmp     loc_407022
.text:00407293 ; ---------------------------------------------------------------------------
.text:00407293
.text:00407293 loc_407293:                             ; CODE XREF: sub_406A50+7ED↑j
.text:00407293                 mov     ebx, [esp+14Ch+var_128]
.text:00407297                 mov     [esp+14Ch+FileName], ebx ; char *
.text:0040729A                 call    sub_40AD30
.text:0040729F                 mov     [esp+14Ch+FileName], offset aCannotCreateDi_0 ; "cannot create directory %s"
.text:004072A6                 mov     ebp, eax
.text:004072A8                 call    ds:libintl_gettext
.text:004072AE                 mov     dword ptr [esp+14Ch+var_140], ebp
.text:004072B2                 mov     [esp+14Ch+AccessMode], esi
.text:004072B6                 jmp     short loc_40727C
.text:004072B8 ; ---------------------------------------------------------------------------
.text:004072B8
.text:004072B8 loc_4072B8:                             ; CODE XREF: sub_406A50+22E↑j
.text:004072B8                                         ; sub_406A50+86C↓j
.text:004072B8                 inc     esi
.text:004072B9                 cmp     byte ptr [esi], 2Fh ; '/'
.text:004072BC                 jz      short loc_4072B8
.text:004072BE                 jmp     loc_406C90
.text:004072C3 ; ---------------------------------------------------------------------------
.text:004072C3
.text:004072C3 loc_4072C3:                             ; CODE XREF: sub_406A50+222↑j
.text:004072C3                 mov     [esp+14Ch+FileName], offset asc_406A49 ; "/"
.text:004072CA                 call    sub_419A70
.text:004072CF                 test    eax, eax
.text:004072D1                 js      short loc_4072DF
.text:004072D3
.text:004072D3 loc_4072D3:                             ; CODE XREF: sub_406A50+213↑j
.text:004072D3                                         ; sub_406A50+894↓j
.text:004072D3                 mov     ebx, [esp+14Ch+var_128]
.text:004072D7                 movzx   eax, byte ptr [ebx]
.text:004072DA                 jmp     loc_406C78
.text:004072DF ; ---------------------------------------------------------------------------
.text:004072DF
.text:004072DF loc_4072DF:                             ; CODE XREF: sub_406A50+881↑j
.text:004072DF                 mov     [esp+14Ch+var_121], 0
.text:004072E4                 jmp     short loc_4072D3
.text:004072E6 ; ---------------------------------------------------------------------------
.text:004072E6
.text:004072E6 loc_4072E6:                             ; CODE XREF: sub_406A50+1E8↑j
.text:004072E6                 cmp     [esp+14Ch+arg_C], 0FFFFFFFFh
.text:004072EE                 jz      short loc_407310
.text:004072F0
.text:004072F0 loc_4072F0:                             ; CODE XREF: sub_406A50+8C8↓j
.text:004072F0                 test    [esp+14Ch+var_110], 0E00h
.text:004072F8                 jnz     loc_406C3E
.text:004072FE
.text:004072FE loc_4072FE:                             ; CODE XREF: sub_406A50+8CA↓j
.text:004072FE                 mov     [esp+14Ch+var_119], 0
.text:00407303                 mov     edi, [esp+14Ch+var_110]
.text:00407307                 mov     [esp+14Ch+var_118], edi
.text:0040730B                 jmp     loc_406C4B
.text:00407310 ; ---------------------------------------------------------------------------
.text:00407310
.text:00407310 loc_407310:                             ; CODE XREF: sub_406A50+89E↑j
.text:00407310                 cmp     [esp+14Ch+arg_10], 0FFFFFFFFh
.text:00407318                 jnz     short loc_4072F0
.text:0040731A                 jmp     short loc_4072FE
.text:0040731A sub_406A50      endp
.text:0040731A
.text:0040731A ; ---------------------------------------------------------------------------
.text:0040731C                 align 10h
.text:00407320                 sub     esp, 0ACh
.text:00407326                 movzx   edx, word ptr [esp+0B8h]
.text:0040732E                 mov     [esp+0A0h], esi
.text:00407335                 mov     esi, [esp+0B0h]
.text:0040733C                 mov     [esp+9Ch], ebx
.text:00407343                 mov     bl, 1
.text:00407345                 mov     [esp+0A4h], edi
.text:0040734C                 mov     edi, [esp+0BCh]
.text:00407353                 mov     [esp+0A8h], ebp
.text:0040735A                 mov     [esp+4], edx
.text:0040735E                 mov     [esp], esi
.text:00407361                 call    sub_4177A0
.text:00407366                 test    eax, eax
.text:00407368                 setz    byte ptr [esp+1Fh]
.text:0040736D                 cmp     byte ptr [esp+1Fh], 0
.text:00407372                 jz      short loc_4073A5
.text:00407374
.text:00407374 loc_407374:                             ; CODE XREF: .text:004073D0↓j
.text:00407374                                         ; .text:0040740E↓j
.text:00407374                 test    edi, edi
.text:00407376                 jz      short loc_40737F
.text:00407378                 movzx   edx, byte ptr [esp+1Fh]
.text:0040737D                 mov     [edi], dl
.text:0040737F
.text:0040737F loc_40737F:                             ; CODE XREF: .text:00407376↑j
.text:0040737F                 movzx   eax, bl
.text:00407382                 mov     esi, [esp+0A0h]
.text:00407389                 mov     ebx, [esp+9Ch]
.text:00407390                 mov     edi, [esp+0A4h]
.text:00407397                 mov     ebp, [esp+0A8h]
.text:0040739E                 add     esp, 0ACh
.text:004073A4                 retn
.text:004073A5 ; ---------------------------------------------------------------------------
.text:004073A5
.text:004073A5 loc_4073A5:                             ; CODE XREF: .text:00407372↑j
.text:004073A5                 call    _errno
.text:004073AA                 lea     edx, [esp+20h]
.text:004073AE                 mov     ebp, [eax]
.text:004073B0                 mov     [esp+4], edx
.text:004073B4                 mov     [esp], esi
.text:004073B7                 call    sub_418A10
.text:004073BC                 test    eax, eax
.text:004073BE                 jnz     short loc_407413
.text:004073C0                 mov     ebp, [esp+20h]
.text:004073C4                 and     ebp, 0F000h
.text:004073CA                 cmp     ebp, 4000h
.text:004073D0                 jz      short loc_407374
.text:004073D2                 mov     ebx, [esp+0B4h]
.text:004073D9                 mov     [esp], ebx
.text:004073DC                 call    sub_40AD30
.text:004073E1                 mov     dword ptr [esp], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:004073E8                 mov     esi, eax
.text:004073EA                 call    ds:libintl_gettext
.text:004073F0                 mov     [esp+0Ch], esi
.text:004073F4                 mov     dword ptr [esp+4], 0
.text:004073FC
.text:004073FC loc_4073FC:                             ; CODE XREF: .text:00407439↓j
.text:004073FC                 mov     [esp+8], eax
.text:00407400                 mov     dword ptr [esp], 0
.text:00407407                 xor     ebx, ebx
.text:00407409                 call    sub_415220
.text:0040740E                 jmp     loc_407374
.text:00407413 ; ---------------------------------------------------------------------------
.text:00407413
.text:00407413 loc_407413:                             ; CODE XREF: .text:004073BE↑j
.text:00407413                 mov     ecx, [esp+0B4h]
.text:0040741A                 mov     [esp], ecx
.text:0040741D                 call    sub_40AD30
.text:00407422                 mov     dword ptr [esp], offset aCannotCreateDi_0 ; "cannot create directory %s"
.text:00407429                 mov     esi, eax
.text:0040742B                 call    ds:libintl_gettext
.text:00407431                 mov     [esp+0Ch], esi
.text:00407435                 mov     [esp+4], ebp
.text:00407439                 jmp     short loc_4073FC
.text:00407439 ; ---------------------------------------------------------------------------
.text:0040743B                 align 10h
.text:00407440 ; const char dword_407440[]
.text:00407440 dword_407440    dd 900DEB00h, 3 dup(90909090h)
.text:00407440                                         ; DATA XREF: sub_407450+17↓o
.text:00407450
.text:00407450 ; =============== S U B R O U T I N E =======================================
.text:00407450
.text:00407450
.text:00407450 sub_407450      proc near               ; CODE XREF: sub_401700+595↑p
.text:00407450
.text:00407450 Size            = dword ptr -3Ch
.text:00407450 var_38          = dword ptr -38h
.text:00407450 var_34          = dword ptr -34h
.text:00407450 var_30          = dword ptr -30h
.text:00407450 Str             = dword ptr -2Ch
.text:00407450 var_25          = byte ptr -25h
.text:00407450 var_24          = dword ptr -24h
.text:00407450 var_20          = dword ptr -20h
.text:00407450 var_1C          = dword ptr -1Ch
.text:00407450 var_18          = dword ptr -18h
.text:00407450 var_14          = dword ptr -14h
.text:00407450 arg_0           = dword ptr  4
.text:00407450 arg_4           = dword ptr  8
.text:00407450
.text:00407450                 push    ebp
.text:00407451                 push    edi
.text:00407452                 push    esi
.text:00407453                 push    ebx
.text:00407454                 sub     esp, 2Ch
.text:00407457                 mov     esi, [esp+3Ch+arg_0]
.text:0040745B                 mov     [esp+3Ch+var_18], 0
.text:00407463                 lea     edx, [esp+3Ch+var_14]
.text:00407467                 mov     [esp+3Ch+Str], offset dword_407440 ; Str
.text:0040746F                 mov     [esp+3Ch+var_30], edx ; int
.text:00407473                 mov     [esp+3Ch+var_34], 8 ; int
.text:0040747B                 mov     [esp+3Ch+var_38], 0 ; int
.text:00407483                 mov     [esp+3Ch+Size], esi ; int
.text:00407486                 call    sub_409A00
.text:0040748B                 test    eax, eax
.text:0040748D                 jnz     short loc_4074E7
.text:0040748F                 mov     edx, [esp+3Ch+var_14]
.text:00407493                 and     edx, 0FFFh
.text:00407499                 cmp     edx, [esp+3Ch+var_14]
.text:0040749D                 jnz     short loc_4074E3
.text:0040749F                 movzx   ebx, word ptr [esp+3Ch+var_14]
.text:004074A4                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:004074AB                 call    malloc
.text:004074B0                 xor     edx, edx
.text:004074B2                 test    eax, eax
.text:004074B4                 jz      short loc_4074D0
.text:004074B6                 mov     dword ptr [eax+8], 0
.text:004074BD                 mov     edx, eax
.text:004074BF                 mov     byte ptr [eax], 3Dh ; '='
.text:004074C2                 mov     byte ptr [eax+1], 0
.text:004074C6                 mov     [eax+4], bx
.text:004074CA                 mov     word ptr [eax+2], 0FFFh
.text:004074D0
.text:004074D0 loc_4074D0:                             ; CODE XREF: sub_407450+64↑j
.text:004074D0                 test    edx, edx
.text:004074D2                 mov     eax, 1
.text:004074D7                 jz      short loc_4074DB
.text:004074D9                 mov     eax, edx
.text:004074DB
.text:004074DB loc_4074DB:                             ; CODE XREF: sub_407450+87↑j
.text:004074DB                                         ; sub_407450+95↓j ...
.text:004074DB                 add     esp, 2Ch
.text:004074DE                 pop     ebx
.text:004074DF                 pop     esi
.text:004074E0                 pop     edi
.text:004074E1                 pop     ebp
.text:004074E2                 retn
.text:004074E3 ; ---------------------------------------------------------------------------
.text:004074E3
.text:004074E3 loc_4074E3:                             ; CODE XREF: sub_407450+4D↑j
.text:004074E3                                         ; sub_407450+133↓j
.text:004074E3                 xor     eax, eax
.text:004074E5                 jmp     short loc_4074DB
.text:004074E7 ; ---------------------------------------------------------------------------
.text:004074E7
.text:004074E7 loc_4074E7:                             ; CODE XREF: sub_407450+3D↑j
.text:004074E7                 mov     [esp+3Ch+Size], 0 ; Mode
.text:004074EE                 call    _umask
.text:004074F3                 movzx   ecx, ax
.text:004074F6                 mov     [esp+3Ch+var_20], ecx
.text:004074FA                 mov     [esp+3Ch+Size], ecx ; Mode
.text:004074FD                 call    _umask
.text:00407502
.text:00407502 loc_407502:                             ; CODE XREF: sub_407450+119↓j
.text:00407502                 mov     [esp+3Ch+var_24], 0
.text:0040750A                 xor     ebp, ebp
.text:0040750C                 lea     esi, [esi+0]
.text:00407510
.text:00407510 loc_407510:                             ; CODE XREF: sub_407450+E6↓j
.text:00407510                 movzx   edx, byte ptr [esi]
.text:00407513                 movsx   eax, dl
.text:00407516                 mov     cl, dl
.text:00407518                 cmp     eax, 67h ; 'g'
.text:0040751B                 jz      loc_407814
.text:00407521                 cmp     eax, 67h ; 'g'
.text:00407524                 jg      loc_4077F0
.text:0040752A                 cmp     eax, 61h ; 'a'
.text:0040752D                 jnz     short loc_407538
.text:0040752F                 or      ebp, 0FFFh
.text:00407535
.text:00407535 loc_407535:                             ; CODE XREF: sub_407450+3B4↓j
.text:00407535                                         ; sub_407450+3BF↓j ...
.text:00407535                 inc     esi
.text:00407536                 jmp     short loc_407510
.text:00407538 ; ---------------------------------------------------------------------------
.text:00407538
.text:00407538 loc_407538:                             ; CODE XREF: sub_407450+DD↑j
.text:00407538                                         ; sub_407450+3A8↓j
.text:00407538                 mov     [esp+3Ch+var_25], 1
.text:0040753D                 test    bp, bp
.text:00407540                 jnz     short loc_407554
.text:00407542                 mov     [esp+3Ch+var_25], 0
.text:00407547                 mov     ebx, [esp+3Ch+arg_4]
.text:0040754B                 mov     ebp, 0FFFh
.text:00407550                 mov     [esp+3Ch+var_24], ebx
.text:00407554
.text:00407554 loc_407554:                             ; CODE XREF: sub_407450+F0↑j
.text:00407554                 cmp     cl, 3Dh ; '='
.text:00407557                 jz      short loc_407588
.text:00407559                 cmp     cl, 2Bh ; '+'
.text:0040755C                 jz      short loc_407588
.text:0040755E                 cmp     cl, 2Dh ; '-'
.text:00407561                 jz      short loc_407588
.text:00407563
.text:00407563 loc_407563:                             ; CODE XREF: sub_407450+2EB↓j
.text:00407563                 cmp     dl, 2Ch ; ','
.text:00407566                 jnz     short loc_40756B
.text:00407568                 inc     esi
.text:00407569                 jmp     short loc_407502
.text:0040756B ; ---------------------------------------------------------------------------
.text:0040756B
.text:0040756B loc_40756B:                             ; CODE XREF: sub_407450+116↑j
.text:0040756B                 test    dl, dl
.text:0040756D                 mov     eax, [esp+3Ch+var_18]
.text:00407571                 jz      loc_4074DB
.text:00407577
.text:00407577 loc_407577:                             ; CODE XREF: sub_407450+27F↓j
.text:00407577                                         ; sub_407450+299↓j ...
.text:00407577                 mov     edi, [esp+3Ch+var_18]
.text:0040757B                 mov     [esp+3Ch+Size], edi ; void *
.text:0040757E                 call    sub_407960
.text:00407583                 jmp     loc_4074E3
.text:00407588 ; ---------------------------------------------------------------------------
.text:00407588
.text:00407588 loc_407588:                             ; CODE XREF: sub_407450+107↑j
.text:00407588                                         ; sub_407450+10C↑j ...
.text:00407588                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:0040758F                 call    malloc
.text:00407594                 test    eax, eax
.text:00407596                 mov     ebx, eax
.text:00407598                 jz      loc_4077D9
.text:0040759E                 mov     dword ptr [eax+8], 0
.text:004075A5                 mov     edi, ebp
.text:004075A7                 movzx   edx, byte ptr [esi]
.text:004075AA                 mov     [eax], dl
.text:004075AC                 cmp     [esp+3Ch+var_25], 0
.text:004075B1                 jnz     loc_40776D
.text:004075B7                 cmp     dl, 3Dh ; '='
.text:004075BA                 jz      loc_407766
.text:004075C0
.text:004075C0 loc_4075C0:                             ; CODE XREF: sub_407450+320↓j
.text:004075C0                 cmp     dl, 2Bh ; '+'
.text:004075C3                 jz      loc_40775C
.text:004075C9                 test    byte ptr [esp+3Ch+var_24], 4
.text:004075CE
.text:004075CE loc_4075CE:                             ; CODE XREF: sub_407450+311↓j
.text:004075CE                                         ; sub_407450+32B↓j
.text:004075CE                 jz      short loc_4075D8
.text:004075D0                 mov     edi, [esp+3Ch+var_20]
.text:004075D4                 not     edi
.text:004075D6                 and     edi, ebp
.text:004075D8
.text:004075D8 loc_4075D8:                             ; CODE XREF: sub_407450:loc_4075CE↑j
.text:004075D8                 mov     byte ptr [ebx+1], 0
.text:004075DC                 mov     edx, [esp+3Ch+var_18]
.text:004075E0                 mov     [ebx+2], di
.text:004075E4                 mov     word ptr [ebx+4], 0
.text:004075EA                 test    edx, edx
.text:004075EC                 jnz     loc_40774C
.text:004075F2                 mov     [esp+3Ch+var_1C], ebx
.text:004075F6                 mov     [esp+3Ch+var_18], ebx
.text:004075FA                 lea     esi, [esi+0]
.text:00407600
.text:00407600 loc_407600:                             ; CODE XREF: sub_407450+26A↓j
.text:00407600                                         ; sub_407450+28F↓j ...
.text:00407600                 inc     esi
.text:00407601                 movzx   edx, byte ptr [esi]
.text:00407604                 movsx   eax, dl
.text:00407607                 mov     cl, dl
.text:00407609                 sub     eax, 58h ; 'X'  ; switch 33 cases
.text:0040760C                 cmp     eax, 20h
.text:0040760F                 ja      def_407615      ; jumptable 00407615 default case, cases 89-102,104-110,112,113,118
.text:00407615                 jmp     ds:jpt_407615[eax*4] ; switch jump
.text:00407615 ; ---------------------------------------------------------------------------
.text:0040761C jpt_407615      dd offset loc_4076BF    ; DATA XREF: sub_407450+1C5↑r
.text:0040761C                 dd offset def_407615    ; jump table for switch statement
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset loc_4076CA
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset loc_4076E4
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset loc_4076A0
.text:0040761C                 dd offset loc_4076F7
.text:0040761C                 dd offset loc_407700
.text:0040761C                 dd offset loc_407709
.text:0040761C                 dd offset def_407615
.text:0040761C                 dd offset loc_407740
.text:0040761C                 dd offset loc_4076C3
.text:004076A0 ; ---------------------------------------------------------------------------
.text:004076A0
.text:004076A0 loc_4076A0:                             ; CODE XREF: sub_407450+1C5↑j
.text:004076A0                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:004076A0                 mov     eax, edi        ; jumptable 00407615 case 114
.text:004076A2                 and     eax, 124h
.text:004076A7                 mov     esi, esi
.text:004076A9                 lea     edi, [edi+0]
.text:004076B0
.text:004076B0 loc_4076B0:                             ; CODE XREF: sub_407450+278↓j
.text:004076B0                                         ; sub_407450+2AE↓j ...
.text:004076B0                 movzx   ecx, word ptr [ebx+4]
.text:004076B4                 or      eax, ecx
.text:004076B6                 mov     [ebx+4], ax
.text:004076BA                 jmp     loc_407600
.text:004076BF ; ---------------------------------------------------------------------------
.text:004076BF
.text:004076BF loc_4076BF:                             ; CODE XREF: sub_407450+1C5↑j
.text:004076BF                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:004076BF                 or      byte ptr [ebx+1], 1 ; jumptable 00407615 case 88
.text:004076C3
.text:004076C3 loc_4076C3:                             ; CODE XREF: sub_407450+1C5↑j
.text:004076C3                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:004076C3                 mov     eax, edi        ; jumptable 00407615 case 120
.text:004076C5                 and     eax, 49h
.text:004076C8                 jmp     short loc_4076B0
.text:004076CA ; ---------------------------------------------------------------------------
.text:004076CA
.text:004076CA loc_4076CA:                             ; CODE XREF: sub_407450+1C5↑j
.text:004076CA                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:004076CA                 cmp     word ptr [ebx+4], 0 ; jumptable 00407615 case 103
.text:004076CF                 jnz     loc_407577
.text:004076D5                 mov     word ptr [ebx+4], 38h ; '8'
.text:004076DB
.text:004076DB loc_4076DB:                             ; CODE XREF: sub_407450+2A5↓j
.text:004076DB                                         ; sub_407450+2CA↓j
.text:004076DB                 or      byte ptr [ebx+1], 2
.text:004076DF                 jmp     loc_407600
.text:004076E4 ; ---------------------------------------------------------------------------
.text:004076E4
.text:004076E4 loc_4076E4:                             ; CODE XREF: sub_407450+1C5↑j
.text:004076E4                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:004076E4                 cmp     word ptr [ebx+4], 0 ; jumptable 00407615 case 111
.text:004076E9                 jnz     loc_407577
.text:004076EF                 mov     word ptr [ebx+4], 7
.text:004076F5                 jmp     short loc_4076DB
.text:004076F7 ; ---------------------------------------------------------------------------
.text:004076F7
.text:004076F7 loc_4076F7:                             ; CODE XREF: sub_407450+1C5↑j
.text:004076F7                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:004076F7                 mov     eax, edi        ; jumptable 00407615 case 115
.text:004076F9                 and     eax, 0C00h
.text:004076FE                 jmp     short loc_4076B0
.text:00407700 ; ---------------------------------------------------------------------------
.text:00407700
.text:00407700 loc_407700:                             ; CODE XREF: sub_407450+1C5↑j
.text:00407700                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:00407700                 mov     eax, edi        ; jumptable 00407615 case 116
.text:00407702                 and     eax, 200h
.text:00407707                 jmp     short loc_4076B0
.text:00407709 ; ---------------------------------------------------------------------------
.text:00407709
.text:00407709 loc_407709:                             ; CODE XREF: sub_407450+1C5↑j
.text:00407709                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:00407709                 cmp     word ptr [ebx+4], 0 ; jumptable 00407615 case 117
.text:0040770E                 jnz     loc_407577
.text:00407714                 mov     word ptr [ebx+4], 1C0h
.text:0040771A                 jmp     short loc_4076DB
.text:0040771A ; ---------------------------------------------------------------------------
.text:0040771C                 align 10h
.text:00407720
.text:00407720 def_407615:                             ; CODE XREF: sub_407450+1BF↑j
.text:00407720                                         ; sub_407450+1C5↑j
.text:00407720                                         ; DATA XREF: ...
.text:00407720                 cmp     cl, 3Dh ; '='   ; jumptable 00407615 default case, cases 89-102,104-110,112,113,118
.text:00407723                 jz      loc_407588
.text:00407729                 cmp     cl, 2Bh ; '+'
.text:0040772C                 jz      loc_407588
.text:00407732                 cmp     cl, 2Dh ; '-'
.text:00407735                 jz      loc_407588
.text:0040773B                 jmp     loc_407563
.text:00407740 ; ---------------------------------------------------------------------------
.text:00407740
.text:00407740 loc_407740:                             ; CODE XREF: sub_407450+1C5↑j
.text:00407740                                         ; DATA XREF: sub_407450:jpt_407615↑o
.text:00407740                 mov     eax, edi        ; jumptable 00407615 case 119
.text:00407742                 and     eax, 92h
.text:00407747                 jmp     loc_4076B0
.text:0040774C ; ---------------------------------------------------------------------------
.text:0040774C
.text:0040774C loc_40774C:                             ; CODE XREF: sub_407450+19C↑j
.text:0040774C                 mov     ecx, [esp+3Ch+var_1C]
.text:00407750                 mov     [esp+3Ch+var_1C], ebx
.text:00407754                 mov     [ecx+8], ebx
.text:00407757                 jmp     loc_407600
.text:0040775C ; ---------------------------------------------------------------------------
.text:0040775C
.text:0040775C loc_40775C:                             ; CODE XREF: sub_407450+173↑j
.text:0040775C                 test    byte ptr [esp+3Ch+var_24], 2
.text:00407761                 jmp     loc_4075CE
.text:00407766 ; ---------------------------------------------------------------------------
.text:00407766
.text:00407766 loc_407766:                             ; CODE XREF: sub_407450+16A↑j
.text:00407766                 test    byte ptr [esp+3Ch+var_24], 1
.text:0040776B                 jnz     short loc_407780
.text:0040776D
.text:0040776D loc_40776D:                             ; CODE XREF: sub_407450+161↑j
.text:0040776D                                         ; sub_407450+37E↓j
.text:0040776D                 cmp     dl, 3Dh ; '='
.text:00407770                 jnz     loc_4075C0
.text:00407776                 test    byte ptr [esp+3Ch+var_24], 1
.text:0040777B                 jmp     loc_4075CE
.text:00407780 ; ---------------------------------------------------------------------------
.text:00407780
.text:00407780 loc_407780:                             ; CODE XREF: sub_407450+31B↑j
.text:00407780                 mov     [esp+3Ch+Size], 0Ch ; Size
.text:00407787                 call    malloc
.text:0040778C                 xor     edx, edx
.text:0040778E                 test    eax, eax
.text:00407790                 jz      short loc_4077AE
.text:00407792                 mov     dword ptr [eax+8], 0
.text:00407799                 mov     edx, eax
.text:0040779B                 mov     byte ptr [eax], 3Dh ; '='
.text:0040779E                 mov     byte ptr [eax+1], 0
.text:004077A2                 mov     word ptr [eax+4], 0
.text:004077A8                 mov     word ptr [eax+2], 0FFFh
.text:004077AE
.text:004077AE loc_4077AE:                             ; CODE XREF: sub_407450+340↑j
.text:004077AE                 test    edx, edx
.text:004077B0                 mov     eax, 1
.text:004077B5                 jz      loc_4074DB
.text:004077BB                 mov     eax, [esp+3Ch+var_18]
.text:004077BF                 test    eax, eax
.text:004077C1                 jnz     short loc_4077D0
.text:004077C3                 mov     [esp+3Ch+var_18], edx
.text:004077C7
.text:004077C7 loc_4077C7:                             ; CODE XREF: sub_407450+387↓j
.text:004077C7                 mov     [esp+3Ch+var_1C], edx
.text:004077CB                 movzx   edx, byte ptr [esi]
.text:004077CE                 jmp     short loc_40776D
.text:004077D0 ; ---------------------------------------------------------------------------
.text:004077D0
.text:004077D0 loc_4077D0:                             ; CODE XREF: sub_407450+371↑j
.text:004077D0                 mov     ecx, [esp+3Ch+var_1C]
.text:004077D4                 mov     [ecx+8], edx
.text:004077D7                 jmp     short loc_4077C7
.text:004077D9 ; ---------------------------------------------------------------------------
.text:004077D9
.text:004077D9 loc_4077D9:                             ; CODE XREF: sub_407450+148↑j
.text:004077D9                 mov     esi, [esp+3Ch+var_18]
.text:004077DD                 mov     [esp+3Ch+Size], esi ; void *
.text:004077E0                 call    sub_407960
.text:004077E5                 mov     eax, 1
.text:004077EA                 jmp     loc_4074DB
.text:004077EA ; ---------------------------------------------------------------------------
.text:004077EF                 align 10h
.text:004077F0
.text:004077F0 loc_4077F0:                             ; CODE XREF: sub_407450+D4↑j
.text:004077F0                 cmp     eax, 6Fh ; 'o'
.text:004077F3                 jz      short loc_407809
.text:004077F5                 cmp     eax, 75h ; 'u'
.text:004077F8                 jnz     loc_407538
.text:004077FE                 or      ebp, 9C0h
.text:00407804                 jmp     loc_407535
.text:00407809 ; ---------------------------------------------------------------------------
.text:00407809
.text:00407809 loc_407809:                             ; CODE XREF: sub_407450+3A3↑j
.text:00407809                 or      ebp, 207h
.text:0040780F                 jmp     loc_407535
.text:00407814 ; ---------------------------------------------------------------------------
.text:00407814
.text:00407814 loc_407814:                             ; CODE XREF: sub_407450+CB↑j
.text:00407814                 or      ebp, 438h
.text:0040781A                 jmp     loc_407535
.text:0040781A sub_407450      endp
.text:0040781A
.text:0040781A ; ---------------------------------------------------------------------------
.text:0040781F                 align 10h
.text:00407820
.text:00407820 ; =============== S U B R O U T I N E =======================================
.text:00407820
.text:00407820
.text:00407820 sub_407820      proc near               ; CODE XREF: sub_401700+5B8↑p
.text:00407820
.text:00407820 arg_0           = word ptr  4
.text:00407820 arg_4           = dword ptr  8
.text:00407820
.text:00407820                 push    esi
.text:00407821                 push    ebx
.text:00407822                 mov     ecx, [esp+8+arg_4]
.text:00407826                 movzx   esi, [esp+8+arg_0]
.text:0040782B                 mov     ebx, esi
.text:0040782D                 and     ebx, 0FFFh
.text:00407833                 test    ecx, ecx
.text:00407835                 jz      short loc_4078A7
.text:00407837                 mov     esi, esi
.text:00407839                 lea     edi, [edi+0]
.text:00407840
.text:00407840 loc_407840:                             ; CODE XREF: sub_407820+85↓j
.text:00407840                 movsx   eax, byte ptr [ecx+1]
.text:00407844                 test    al, 2
.text:00407846                 jz      loc_407920
.text:0040784C                 movzx   eax, word ptr [ecx+4]
.text:00407850                 mov     edx, ebx
.text:00407852                 and     edx, eax
.text:00407854                 test    eax, 1C0h
.text:00407859                 jz      short loc_4078D0
.text:0040785B                 xor     eax, eax
.text:0040785D                 test    dh, 1
.text:00407860                 setz    al
.text:00407863                 dec     eax
.text:00407864                 and     eax, 24h
.text:00407867                 test    dl, dl
.text:00407869                 jns     short loc_40786E
.text:0040786B                 or      eax, 12h
.text:0040786E
.text:0040786E loc_40786E:                             ; CODE XREF: sub_407820+49↑j
.text:0040786E                 test    dl, 40h
.text:00407871                 jz      short loc_407880
.text:00407873                 or      eax, 9
.text:00407876                 lea     esi, [esi+0]
.text:00407879                 lea     edi, [edi+0]
.text:00407880
.text:00407880 loc_407880:                             ; CODE XREF: sub_407820+51↑j
.text:00407880                                         ; sub_407820+CF↓j ...
.text:00407880                 or      eax, edx
.text:00407882                 movzx   edx, ax
.text:00407885                 movzx   eax, word ptr [ecx+2]
.text:00407889                 and     edx, eax
.text:0040788B
.text:0040788B loc_40788B:                             ; CODE XREF: sub_407820+106↓j
.text:0040788B                                         ; sub_407820+118↓j ...
.text:0040788B                 movsx   eax, byte ptr [ecx]
.text:0040788E                 cmp     eax, 2Dh ; '-'
.text:00407891                 jz      short loc_4078C3
.text:00407893                 cmp     eax, 2Dh ; '-'
.text:00407896                 jg      short loc_4078B4
.text:00407898                 cmp     eax, 2Bh ; '+'
.text:0040789B                 jz      short loc_4078B0
.text:0040789D                 lea     esi, [esi+0]
.text:004078A0
.text:004078A0 loc_4078A0:                             ; CODE XREF: sub_407820+92↓j
.text:004078A0                                         ; sub_407820+97↓j ...
.text:004078A0                 mov     ecx, [ecx+8]
.text:004078A3                 test    ecx, ecx
.text:004078A5                 jnz     short loc_407840
.text:004078A7
.text:004078A7 loc_4078A7:                             ; CODE XREF: sub_407820+15↑j
.text:004078A7                 mov     eax, ebx
.text:004078A9                 pop     ebx
.text:004078AA                 pop     esi
.text:004078AB                 retn
.text:004078AB ; ---------------------------------------------------------------------------
.text:004078AC                 align 10h
.text:004078B0
.text:004078B0 loc_4078B0:                             ; CODE XREF: sub_407820+7B↑j
.text:004078B0                                         ; sub_407820+A1↓j
.text:004078B0                 or      ebx, edx
.text:004078B2                 jmp     short loc_4078A0
.text:004078B4 ; ---------------------------------------------------------------------------
.text:004078B4
.text:004078B4 loc_4078B4:                             ; CODE XREF: sub_407820+76↑j
.text:004078B4                 cmp     eax, 3Dh ; '='
.text:004078B7                 jnz     short loc_4078A0
.text:004078B9                 movzx   eax, word ptr [ecx+2]
.text:004078BD                 not     eax
.text:004078BF                 and     ebx, eax
.text:004078C1                 jmp     short loc_4078B0
.text:004078C3 ; ---------------------------------------------------------------------------
.text:004078C3
.text:004078C3 loc_4078C3:                             ; CODE XREF: sub_407820+71↑j
.text:004078C3                 not     edx
.text:004078C5                 and     ebx, edx
.text:004078C7                 jmp     short loc_4078A0
.text:004078C7 ; ---------------------------------------------------------------------------
.text:004078C9                 align 10h
.text:004078D0
.text:004078D0 loc_4078D0:                             ; CODE XREF: sub_407820+39↑j
.text:004078D0                 test    al, 38h
.text:004078D2                 jz      short loc_4078F6
.text:004078D4                 xor     eax, eax
.text:004078D6                 test    dl, 20h
.text:004078D9                 setz    al
.text:004078DC                 dec     eax
.text:004078DD                 and     eax, 104h
.text:004078E2                 test    dl, 10h
.text:004078E5                 jz      short loc_4078EC
.text:004078E7                 or      eax, 82h
.text:004078EC
.text:004078EC loc_4078EC:                             ; CODE XREF: sub_407820+C5↑j
.text:004078EC                 test    dl, 8
.text:004078EF                 jz      short loc_407880
.text:004078F1                 or      eax, 41h
.text:004078F4                 jmp     short loc_407880
.text:004078F6 ; ---------------------------------------------------------------------------
.text:004078F6
.text:004078F6 loc_4078F6:                             ; CODE XREF: sub_407820+B2↑j
.text:004078F6                 xor     eax, eax
.text:004078F8                 test    dl, 4
.text:004078FB                 setz    al
.text:004078FE                 dec     eax
.text:004078FF                 and     eax, 120h
.text:00407904                 test    dl, 2
.text:00407907                 jz      short loc_40790E
.text:00407909                 or      eax, 90h
.text:0040790E
.text:0040790E loc_40790E:                             ; CODE XREF: sub_407820+E7↑j
.text:0040790E                 test    dl, 1
.text:00407911                 jz      loc_407880
.text:00407917                 or      eax, 48h
.text:0040791A                 jmp     loc_407880
.text:0040791A ; ---------------------------------------------------------------------------
.text:0040791F                 align 10h
.text:00407920
.text:00407920 loc_407920:                             ; CODE XREF: sub_407820+26↑j
.text:00407920                 movzx   edx, word ptr [ecx+4]
.text:00407924                 test    al, 1
.text:00407926                 jz      loc_40788B
.text:0040792C                 mov     eax, esi
.text:0040792E                 and     eax, 0F000h
.text:00407933                 cmp     eax, 4000h
.text:00407938                 jz      loc_40788B
.text:0040793E                 test    bl, 49h
.text:00407941                 jnz     loc_40788B
.text:00407947                 and     edx, 0FFB6h
.text:0040794D                 jmp     loc_40788B
.text:0040794D sub_407820      endp
.text:0040794D
.text:0040794D ; ---------------------------------------------------------------------------
.text:00407952                 align 10h
.text:00407960
.text:00407960 ; =============== S U B R O U T I N E =======================================
.text:00407960
.text:00407960
.text:00407960 ; int __cdecl sub_407960(void *)
.text:00407960 sub_407960      proc near               ; CODE XREF: sub_407450+12E↑p
.text:00407960                                         ; sub_407450+390↑p
.text:00407960
.text:00407960 Block           = dword ptr -0Ch
.text:00407960 arg_0           = dword ptr  4
.text:00407960
.text:00407960                 push    ebx
.text:00407961                 sub     esp, 8
.text:00407964                 mov     eax, [esp+0Ch+arg_0]
.text:00407968                 test    eax, eax
.text:0040796A                 jz      short loc_407981
.text:0040796C                 lea     esi, [esi+0]
.text:00407970
.text:00407970 loc_407970:                             ; CODE XREF: sub_407960+1F↓j
.text:00407970                 mov     ebx, [eax+8]
.text:00407973                 mov     [esp+0Ch+Block], eax ; Block
.text:00407976                 call    free
.text:0040797B                 test    ebx, ebx
.text:0040797D                 mov     eax, ebx
.text:0040797F                 jnz     short loc_407970
.text:00407981
.text:00407981 loc_407981:                             ; CODE XREF: sub_407960+A↑j
.text:00407981                 add     esp, 8
.text:00407984                 pop     ebx
.text:00407985                 retn
.text:00407985 sub_407960      endp
.text:00407985
.text:00407985 ; ---------------------------------------------------------------------------
.text:00407986                 align 10h
.text:00407990                 sub     esp, 8Ch
.text:00407996                 lea     edx, [esp+10h]
.text:0040799A                 mov     [esp+4], edx
.text:0040799E                 mov     edx, [esp+90h]
.text:004079A5                 mov     [esp], edx
.text:004079A8                 call    sub_418A10
.text:004079AD                 test    eax, eax
.text:004079AF                 mov     ecx, 2
.text:004079B4                 jz      short loc_4079C0
.text:004079B6
.text:004079B6 loc_4079B6:                             ; CODE XREF: .text:004079D3↓j
.text:004079B6                                         ; .text:004079F3↓j
.text:004079B6                 mov     eax, ecx
.text:004079B8                 add     esp, 8Ch
.text:004079BE                 retn
.text:004079BE ; ---------------------------------------------------------------------------
.text:004079BF                 align 10h
.text:004079C0
.text:004079C0 loc_4079C0:                             ; CODE XREF: .text:004079B4↑j
.text:004079C0                 mov     dword ptr [esp], 0Ch
.text:004079C7                 call    malloc
.text:004079CC                 test    eax, eax
.text:004079CE                 mov     ecx, 1
.text:004079D3                 jz      short loc_4079B6
.text:004079D5                 mov     byte ptr [eax], 3Dh ; '='
.text:004079D8                 mov     byte ptr [eax+1], 0
.text:004079DC                 mov     ecx, [esp+10h]
.text:004079E0                 mov     word ptr [eax+2], 0FFFh
.text:004079E6                 mov     dword ptr [eax+8], 0
.text:004079ED                 mov     [eax+4], cx
.text:004079F1                 mov     ecx, eax
.text:004079F3                 jmp     short loc_4079B6
.text:004079F3 ; ---------------------------------------------------------------------------
.text:004079F5                 align 10h
.text:00407A00 ; const char dword_407A00[]
.text:00407A00 dword_407A00    dd 8D007325h, 0B6h, 27BC8D00h, 0
.text:00407A00                                         ; DATA XREF: sub_407A10+1FA↓o
.text:00407A00                                         ; sub_407A10+225↓o ...
.text:00407A10
.text:00407A10 ; =============== S U B R O U T I N E =======================================
.text:00407A10
.text:00407A10
.text:00407A10 ; int __cdecl sub_407A10(void *, void *)
.text:00407A10 sub_407A10      proc near               ; CODE XREF: sub_403910+1182↑p
.text:00407A10                                         ; sub_405EC0:loc_4060A5↑p ...
.text:00407A10
.text:00407A10 Block           = dword ptr -12Ch
.text:00407A10 ErrorMessage    = dword ptr -128h
.text:00407A10 var_124         = dword ptr -124h
.text:00407A10 var_120         = byte ptr -120h
.text:00407A10 var_111         = byte ptr -111h
.text:00407A10 var_110         = dword ptr -110h
.text:00407A10 var_10C         = dword ptr -10Ch
.text:00407A10 var_107         = byte ptr -107h
.text:00407A10 var_106         = byte ptr -106h
.text:00407A10 var_105         = byte ptr -105h
.text:00407A10 var_104         = dword ptr -104h
.text:00407A10 var_100         = dword ptr -100h
.text:00407A10 var_FC          = dword ptr -0FCh
.text:00407A10 var_F4          = dword ptr -0F4h
.text:00407A10 var_F0          = dword ptr -0F0h
.text:00407A10 var_EC          = dword ptr -0ECh
.text:00407A10 var_E8          = dword ptr -0E8h
.text:00407A10 var_8C          = dword ptr -8Ch
.text:00407A10 var_84          = dword ptr -84h
.text:00407A10 var_80          = dword ptr -80h
.text:00407A10 var_7C          = dword ptr -7Ch
.text:00407A10 var_78          = dword ptr -78h
.text:00407A10 arg_0           = dword ptr  4
.text:00407A10 arg_4           = dword ptr  8
.text:00407A10
.text:00407A10                 push    ebp
.text:00407A11                 push    edi
.text:00407A12                 push    esi
.text:00407A13                 push    ebx
.text:00407A14                 sub     esp, 11Ch
.text:00407A1A                 mov     ecx, [esp+12Ch+arg_0]
.text:00407A21                 mov     [esp+12Ch+Block], ecx
.text:00407A24                 call    sub_40AD60
.text:00407A29                 mov     [esp+12Ch+var_100], eax
.text:00407A2D                 mov     eax, [esp+12Ch+arg_4]
.text:00407A34                 mov     [esp+12Ch+Block], eax
.text:00407A37                 call    sub_40AD60
.text:00407A3C                 mov     [esp+12Ch+var_104], eax
.text:00407A40                 mov     edx, [esp+12Ch+var_100]
.text:00407A44                 mov     [esp+12Ch+Block], edx ; char *
.text:00407A47                 call    sub_40ADC0
.text:00407A4C                 mov     ebx, eax
.text:00407A4E                 mov     eax, [esp+12Ch+var_104]
.text:00407A52                 mov     [esp+12Ch+Block], eax ; char *
.text:00407A55                 call    sub_40ADC0
.text:00407A5A                 mov     [esp+12Ch+var_105], 0
.text:00407A5F                 cmp     ebx, eax
.text:00407A61                 mov     ebp, eax
.text:00407A63                 jz      loc_407C88
.text:00407A69
.text:00407A69 loc_407A69:                             ; CODE XREF: sub_407A10+287↓j
.text:00407A69                                         ; sub_407A10+292↓j
.text:00407A69                 movzx   edx, [esp+12Ch+var_105]
.text:00407A6E                 cmp     ebp, ebx
.text:00407A70                 mov     [esp+12Ch+var_107], 0
.text:00407A75                 mov     eax, 0FFh
.text:00407A7A                 mov     [esp+12Ch+var_106], dl
.text:00407A7E                 jbe     short loc_407A82
.text:00407A80                 mov     ebp, ebx
.text:00407A82
.text:00407A82 loc_407A82:                             ; CODE XREF: sub_407A10+6E↑j
.text:00407A82                 cmp     eax, ebp
.text:00407A84                 ja      short loc_407AB0
.text:00407A86                 cld
.text:00407A87                 mov     esi, [esp+12Ch+var_100]
.text:00407A8B                 mov     ecx, 0FFh
.text:00407A90                 mov     edi, [esp+12Ch+var_104]
.text:00407A94                 cmp     eax, 0FFh
.text:00407A99                 repe cmpsb
.text:00407A9B                 jnz     short loc_407AB0
.text:00407A9D                 mov     [esp+12Ch+var_106], 1
.text:00407AA2                 lea     esi, [esi+0]
.text:00407AA9                 lea     edi, [edi+0]
.text:00407AB0
.text:00407AB0 loc_407AB0:                             ; CODE XREF: sub_407A10+74↑j
.text:00407AB0                                         ; sub_407A10+8B↑j
.text:00407AB0                 cmp     [esp+12Ch+var_106], 0
.text:00407AB5                 jnz     short loc_407AC7
.text:00407AB7
.text:00407AB7 loc_407AB7:                             ; CODE XREF: sub_407A10+19C↓j
.text:00407AB7                 movzx   eax, [esp+12Ch+var_107]
.text:00407ABC                 add     esp, 11Ch
.text:00407AC2                 pop     ebx
.text:00407AC3                 pop     esi
.text:00407AC4                 pop     edi
.text:00407AC5                 pop     ebp
.text:00407AC6                 retn
.text:00407AC7 ; ---------------------------------------------------------------------------
.text:00407AC7
.text:00407AC7 loc_407AC7:                             ; CODE XREF: sub_407A10+A5↑j
.text:00407AC7                 mov     eax, [esp+12Ch+arg_0]
.text:00407ACE                 lea     esi, [esp+12Ch+var_8C]
.text:00407AD5                 mov     [esp+12Ch+Block], eax ; void *
.text:00407AD8                 call    sub_40A1B0
.text:00407ADD                 mov     [esp+12Ch+var_10C], eax
.text:00407AE1                 mov     edi, [esp+12Ch+arg_4]
.text:00407AE8                 mov     [esp+12Ch+Block], edi ; void *
.text:00407AEB                 call    sub_40A1B0
.text:00407AF0                 mov     [esp+12Ch+var_110], eax
.text:00407AF4                 mov     ebx, [esp+12Ch+var_10C]
.text:00407AF8                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:00407AFC                 mov     [esp+12Ch+Block], ebx ; char *
.text:00407AFF                 call    sub_418A10
.text:00407B04                 test    eax, eax
.text:00407B06                 jnz     loc_407C5C
.text:00407B0C
.text:00407B0C loc_407B0C:                             ; CODE XREF: sub_407A10+273↓j
.text:00407B0C                 mov     edx, [esp+12Ch+var_110]
.text:00407B10                 lea     esi, [esp+12Ch+var_FC]
.text:00407B14                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:00407B18                 mov     [esp+12Ch+Block], edx ; char *
.text:00407B1B                 call    sub_418A10
.text:00407B20                 test    eax, eax
.text:00407B22                 jnz     loc_407C30
.text:00407B28
.text:00407B28 loc_407B28:                             ; CODE XREF: sub_407A10+247↓j
.text:00407B28                 mov     [esp+12Ch+var_111], 0
.text:00407B2D                 mov     edx, [esp+12Ch+var_80]
.text:00407B34                 mov     esi, [esp+12Ch+var_84]
.text:00407B3B                 mov     edi, [esp+12Ch+var_F4]
.text:00407B3F                 mov     ecx, [esp+12Ch+var_F0]
.text:00407B43                 mov     eax, edx
.text:00407B45                 xor     edi, esi
.text:00407B47                 xor     eax, ecx
.text:00407B49                 or      eax, edi
.text:00407B4B                 jnz     short loc_407B80
.text:00407B4D                 mov     edx, [esp+12Ch+var_78]
.text:00407B54                 mov     esi, [esp+12Ch+var_7C]
.text:00407B5B                 mov     edi, [esp+12Ch+var_EC]
.text:00407B5F                 mov     ecx, [esp+12Ch+var_E8]
.text:00407B63                 mov     eax, edx
.text:00407B65                 xor     edi, esi
.text:00407B67                 xor     eax, ecx
.text:00407B69                 or      eax, edi
.text:00407B6B                 jnz     short loc_407B80
.text:00407B6D                 mov     [esp+12Ch+var_111], 1
.text:00407B72                 lea     esi, [esi+0]
.text:00407B79                 lea     edi, [edi+0]
.text:00407B80
.text:00407B80 loc_407B80:                             ; CODE XREF: sub_407A10+13B↑j
.text:00407B80                                         ; sub_407A10+15B↑j
.text:00407B80                 movzx   ebx, [esp+12Ch+var_111]
.text:00407B85                 test    bl, bl
.text:00407B87                 mov     [esp+12Ch+var_107], bl
.text:00407B8B                 jz      short loc_407B94
.text:00407B8D                 cmp     [esp+12Ch+var_105], 0
.text:00407B92                 jz      short loc_407BB1
.text:00407B94
.text:00407B94 loc_407B94:                             ; CODE XREF: sub_407A10+17B↑j
.text:00407B94                                         ; sub_407A10+1E1↓j ...
.text:00407B94                 mov     edx, [esp+12Ch+var_10C]
.text:00407B98                 mov     [esp+12Ch+Block], edx ; Block
.text:00407B9B                 call    free
.text:00407BA0                 mov     eax, [esp+12Ch+var_110]
.text:00407BA4                 mov     [esp+12Ch+Block], eax ; Block
.text:00407BA7                 call    free
.text:00407BAC                 jmp     loc_407AB7
.text:00407BB1 ; ---------------------------------------------------------------------------
.text:00407BB1
.text:00407BB1 loc_407BB1:                             ; CODE XREF: sub_407A10+182↑j
.text:00407BB1                 call    _errno
.text:00407BB6                 mov     dword ptr [eax], 0
.text:00407BBC                 mov     edi, [esp+12Ch+var_110]
.text:00407BC0                 mov     [esp+12Ch+ErrorMessage], 3
.text:00407BC8                 mov     [esp+12Ch+Block], edi
.text:00407BCB                 call    sub_419AC0
.text:00407BD0                 test    eax, eax
.text:00407BD2                 js      short loc_407BF3
.text:00407BD4                 xor     ebx, ebx
.text:00407BD6                 cmp     eax, ebp
.text:00407BD8                 ja      short loc_407BED
.text:00407BDA                 cld
.text:00407BDB                 mov     esi, [esp+12Ch+var_100]
.text:00407BDF                 cmp     eax, eax
.text:00407BE1                 mov     edi, [esp+12Ch+var_104]
.text:00407BE5                 mov     ecx, eax
.text:00407BE7                 repe cmpsb
.text:00407BE9                 jnz     short loc_407BED
.text:00407BEB                 mov     bl, 1
.text:00407BED
.text:00407BED loc_407BED:                             ; CODE XREF: sub_407A10+1C8↑j
.text:00407BED                                         ; sub_407A10+1D9↑j
.text:00407BED                 mov     [esp+12Ch+var_107], bl
.text:00407BF1                 jmp     short loc_407B94
.text:00407BF3 ; ---------------------------------------------------------------------------
.text:00407BF3
.text:00407BF3 loc_407BF3:                             ; CODE XREF: sub_407A10+1C2↑j
.text:00407BF3                 call    _errno
.text:00407BF8                 mov     ebp, [eax]
.text:00407BFA                 test    ebp, ebp
.text:00407BFC                 jnz     short loc_407C05
.text:00407BFE
.text:00407BFE loc_407BFE:                             ; CODE XREF: sub_407A10+21C↓j
.text:00407BFE                 mov     [esp+12Ch+var_107], 0
.text:00407C03                 jmp     short loc_407B94
.text:00407C05 ; ---------------------------------------------------------------------------
.text:00407C05
.text:00407C05 loc_407C05:                             ; CODE XREF: sub_407A10+1EC↑j
.text:00407C05                 call    _errno
.text:00407C0A                 mov     [esp+12Ch+var_124], offset dword_407A00 ; char *
.text:00407C12                 mov     ecx, [esp+12Ch+var_110]
.text:00407C16                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:00407C1A                 mov     esi, [eax]
.text:00407C1C                 mov     [esp+12Ch+Block], 1 ; Code
.text:00407C23                 mov     [esp+12Ch+ErrorMessage], esi ; ErrorMessage
.text:00407C27                 call    sub_415220
.text:00407C2C                 jmp     short loc_407BFE
.text:00407C2C ; ---------------------------------------------------------------------------
.text:00407C2E                 align 10h
.text:00407C30
.text:00407C30 loc_407C30:                             ; CODE XREF: sub_407A10+112↑j
.text:00407C30                 call    _errno
.text:00407C35                 mov     [esp+12Ch+var_124], offset dword_407A00 ; char *
.text:00407C3D                 mov     ecx, [esp+12Ch+var_110]
.text:00407C41                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:00407C45                 mov     edi, [eax]
.text:00407C47                 mov     [esp+12Ch+Block], 1 ; Code
.text:00407C4E                 mov     [esp+12Ch+ErrorMessage], edi ; ErrorMessage
.text:00407C52                 call    sub_415220
.text:00407C57                 jmp     loc_407B28
.text:00407C5C ; ---------------------------------------------------------------------------
.text:00407C5C
.text:00407C5C loc_407C5C:                             ; CODE XREF: sub_407A10+F6↑j
.text:00407C5C                 call    _errno
.text:00407C61                 mov     [esp+12Ch+var_124], offset dword_407A00 ; char *
.text:00407C69                 mov     ebx, [esp+12Ch+var_10C]
.text:00407C6D                 mov     dword ptr [esp+12Ch+var_120], ebx ; char
.text:00407C71                 mov     ecx, [eax]
.text:00407C73                 mov     [esp+12Ch+Block], 1 ; Code
.text:00407C7A                 mov     [esp+12Ch+ErrorMessage], ecx ; ErrorMessage
.text:00407C7E                 call    sub_415220
.text:00407C83                 jmp     loc_407B0C
.text:00407C88 ; ---------------------------------------------------------------------------
.text:00407C88
.text:00407C88 loc_407C88:                             ; CODE XREF: sub_407A10+53↑j
.text:00407C88                 cld
.text:00407C89                 mov     esi, [esp+12Ch+var_100]
.text:00407C8D                 cmp     ebx, ebx
.text:00407C8F                 mov     edi, [esp+12Ch+var_104]
.text:00407C93                 mov     ecx, ebx
.text:00407C95                 repe cmpsb
.text:00407C97                 jnz     loc_407A69
.text:00407C9D                 mov     [esp+12Ch+var_105], 1
.text:00407CA2                 jmp     loc_407A69
.text:00407CA2 sub_407A10      endp
.text:00407CA2
.text:00407CA2 ; ---------------------------------------------------------------------------
.text:00407CA7                 align 10h
.text:00407CB0
.text:00407CB0 ; =============== S U B R O U T I N E =======================================
.text:00407CB0
.text:00407CB0
.text:00407CB0 ; int __cdecl sub_407CB0(char *, int, int, char)
.text:00407CB0 sub_407CB0      proc near               ; CODE XREF: sub_403910+145A↑p
.text:00407CB0
.text:00407CB0 var_FC          = dword ptr -0FCh
.text:00407CB0 var_F8          = dword ptr -0F8h
.text:00407CB0 var_F4          = dword ptr -0F4h
.text:00407CB0 var_F0          = dword ptr -0F0h
.text:00407CB0 var_EC          = dword ptr -0ECh
.text:00407CB0 var_D4          = dword ptr -0D4h
.text:00407CB0 var_D0          = dword ptr -0D0h
.text:00407CB0 var_C4          = dword ptr -0C4h
.text:00407CB0 var_BD          = byte ptr -0BDh
.text:00407CB0 var_BC          = dword ptr -0BCh
.text:00407CB0 var_B8          = dword ptr -0B8h
.text:00407CB0 var_B4          = dword ptr -0B4h
.text:00407CB0 var_B0          = dword ptr -0B0h
.text:00407CB0 var_AC          = dword ptr -0ACh
.text:00407CB0 var_A8          = dword ptr -0A8h
.text:00407CB0 var_A4          = dword ptr -0A4h
.text:00407CB0 var_A0          = dword ptr -0A0h
.text:00407CB0 var_9C          = dword ptr -9Ch
.text:00407CB0 var_5C          = dword ptr -5Ch
.text:00407CB0 var_58          = dword ptr -58h
.text:00407CB0 var_2C          = dword ptr -2Ch
.text:00407CB0 var_28          = dword ptr -28h
.text:00407CB0 var_24          = dword ptr -24h
.text:00407CB0 var_20          = dword ptr -20h
.text:00407CB0 arg_0           = dword ptr  4
.text:00407CB0 arg_4           = dword ptr  8
.text:00407CB0 arg_8           = dword ptr  0Ch
.text:00407CB0 arg_C           = byte ptr  10h
.text:00407CB0
.text:00407CB0                 push    ebp
.text:00407CB1                 push    edi
.text:00407CB2                 push    esi
.text:00407CB3                 push    ebx
.text:00407CB4                 sub     esp, 0ECh
.text:00407CBA                 mov     esi, [esp+0FCh+arg_8]
.text:00407CC1                 test    [esp+0FCh+arg_C], 1
.text:00407CC9                 mov     edx, [esp+0FCh+arg_4]
.text:00407CD0                 mov     edi, [esp+0FCh+arg_4]
.text:00407CD7                 mov     ebx, [esi+40h]
.text:00407CDA                 mov     eax, [edx+44h]
.text:00407CDD                 mov     ecx, [edi+40h]
.text:00407CE0                 mov     [esp+0FCh+var_A4], ebx
.text:00407CE4                 mov     edx, [esi+44h]
.text:00407CE7                 mov     [esp+0FCh+var_A8], eax
.text:00407CEB                 mov     [esp+0FCh+var_A0], ecx
.text:00407CEF                 mov     [esp+0FCh+var_AC], edx
.text:00407CF3                 jz      loc_4080B6
.text:00407CF9                 mov     ebp, ds:dword_421090
.text:00407CFF                 test    ebp, ebp
.text:00407D01                 jz      loc_4081B3
.text:00407D07
.text:00407D07 loc_407D07:                             ; CODE XREF: sub_407CB0+534↓j
.text:00407D07                 mov     ecx, ds:dword_4210A0
.text:00407D0D                 test    ecx, ecx
.text:00407D0F                 jz      loc_408190
.text:00407D15
.text:00407D15 loc_407D15:                             ; CODE XREF: sub_407CB0+4FE↓j
.text:00407D15                 mov     eax, [esp+0FCh+arg_4]
.text:00407D1C                 mov     esi, ds:dword_421090
.text:00407D22                 mov     edx, [eax+10h]
.text:00407D25                 mov     edi, [eax+14h]
.text:00407D28                 mov     [ecx], edx
.text:00407D2A                 mov     [ecx+4], edi
.text:00407D2D                 mov     [esp+0FCh+var_F8], ecx
.text:00407D31                 mov     [esp+0FCh+var_FC], esi
.text:00407D34                 call    sub_40B500
.text:00407D39                 mov     [esp+0FCh+var_B0], eax
.text:00407D3D                 test    eax, eax
.text:00407D3F                 jz      loc_4081E9
.text:00407D45                 mov     ebx, [esp+0FCh+var_B0]
.text:00407D49                 cmp     ebx, ds:dword_4210A0
.text:00407D4F                 jz      loc_40817C
.text:00407D55
.text:00407D55 loc_407D55:                             ; CODE XREF: sub_407CB0+4D4↓j
.text:00407D55                 mov     ebp, [esp+0FCh+var_B0]
.text:00407D59                 mov     edi, [esp+0FCh+var_B0]
.text:00407D5D                 cmp     byte ptr [ebp+0Ch], 0
.text:00407D61                 mov     esi, [edi+8]
.text:00407D64                 mov     [esp+0FCh+var_B4], esi
.text:00407D68                 mov     [esp+0FCh+var_C4], esi
.text:00407D6C                 jnz     loc_40809F
.text:00407D72                 mov     [esp+0FCh+var_B4], 3E8h
.text:00407D7A                 mov     esi, [esp+0FCh+arg_4]
.text:00407D81                 mov     edx, [esp+0FCh+arg_4]
.text:00407D88                 mov     eax, [esp+0FCh+var_A0]
.text:00407D8C                 mov     edi, [esi+3Ch]
.text:00407D8F                 mov     esi, [esp+0FCh+arg_4]
.text:00407D96                 mov     ecx, [edx+38h]
.text:00407D99                 mov     [esp+0FCh+var_BC], edi
.text:00407D9D                 mov     ebp, [esi+48h]
.text:00407DA0                 mov     edx, ecx
.text:00407DA2                 mov     [esp+0FCh+var_B8], ecx
.text:00407DA6                 mov     edi, [esi+4Ch]
.text:00407DA9                 or      edx, ebp
.text:00407DAB                 or      edx, eax
.text:00407DAD                 mov     ecx, 2710h
.text:00407DB2                 mov     eax, [esp+0FCh+var_BC]
.text:00407DB6                 and     dl, 1
.text:00407DB9                 mov     [esp+0FCh+var_BD], dl
.text:00407DBD                 cdq
.text:00407DBE                 idiv    ecx
.text:00407DC0                 mov     esi, eax
.text:00407DC2                 mov     ebp, edx
.text:00407DC4                 mov     eax, edi
.text:00407DC6                 cdq
.text:00407DC7                 idiv    ecx
.text:00407DC9                 mov     ebx, eax
.text:00407DCB                 or      ebp, edx
.text:00407DCD                 mov     eax, [esp+0FCh+var_A8]
.text:00407DD1                 cdq
.text:00407DD2                 idiv    ecx
.text:00407DD4                 or      ebp, edx
.text:00407DD6                 jnz     loc_407EA0
.text:00407DDC                 mov     [esp+0FCh+var_B4], 2710h
.text:00407DE4                 mov     ecx, esi
.text:00407DE6                 mov     ebp, eax
.text:00407DE8                 nop
.text:00407DE9                 lea     esi, [esi+0]
.text:00407DF0
.text:00407DF0 loc_407DF0:                             ; CODE XREF: sub_407CB0+1CF↓j
.text:00407DF0                 mov     edi, [esp+0FCh+var_C4]
.text:00407DF4                 cmp     [esp+0FCh+var_B4], edi
.text:00407DF8                 jge     loc_407EA0
.text:00407DFE                 mov     eax, 66666667h
.text:00407E03                 imul    ecx
.text:00407E05                 mov     eax, 66666667h
.text:00407E0A                 mov     edi, edx
.text:00407E0C                 mov     edx, ecx
.text:00407E0E                 sar     edi, 2
.text:00407E11                 sar     edx, 1Fh
.text:00407E14                 sub     edi, edx
.text:00407E16                 imul    ebx
.text:00407E18                 lea     esi, [edi+edi*4]
.text:00407E1B                 mov     eax, 66666667h
.text:00407E20                 add     esi, esi
.text:00407E22                 sub     ecx, esi
.text:00407E24                 mov     [esp+0FCh+var_D0], edx
.text:00407E28                 mov     esi, [esp+0FCh+var_D0]
.text:00407E2C                 mov     edx, ebx
.text:00407E2E                 sar     edx, 1Fh
.text:00407E31                 sar     esi, 2
.text:00407E34                 sub     esi, edx
.text:00407E36                 lea     edx, [esi+esi*4]
.text:00407E39                 add     edx, edx
.text:00407E3B                 sub     ebx, edx
.text:00407E3D                 imul    ebp
.text:00407E3F                 or      ecx, ebx
.text:00407E41                 mov     ebx, ebp
.text:00407E43                 sar     ebx, 1Fh
.text:00407E46                 mov     [esp+0FCh+var_D0], edx
.text:00407E4A                 mov     edx, [esp+0FCh+var_D0]
.text:00407E4E                 mov     [esp+0FCh+var_D4], eax
.text:00407E52                 sar     edx, 2
.text:00407E55                 sub     edx, ebx
.text:00407E57                 lea     ebx, [edx+edx*4]
.text:00407E5A                 add     ebx, ebx
.text:00407E5C                 sub     ebp, ebx
.text:00407E5E                 or      ecx, ebp
.text:00407E60                 jnz     short loc_407EA0
.text:00407E62                 cmp     [esp+0FCh+var_B4], 3B9ACA00h
.text:00407E6A                 jz      short loc_407E84
.text:00407E6C                 mov     eax, [esp+0FCh+var_B4]
.text:00407E70                 mov     ecx, edi
.text:00407E72                 mov     ebp, edx
.text:00407E74                 lea     ebx, [eax+eax*4]
.text:00407E77                 add     ebx, ebx
.text:00407E79                 mov     [esp+0FCh+var_B4], ebx
.text:00407E7D                 mov     ebx, esi
.text:00407E7F                 jmp     loc_407DF0
.text:00407E84 ; ---------------------------------------------------------------------------
.text:00407E84
.text:00407E84 loc_407E84:                             ; CODE XREF: sub_407CB0+1BA↑j
.text:00407E84                 cmp     [esp+0FCh+var_BD], 0
.text:00407E89                 jnz     short loc_407EA0
.text:00407E8B                 mov     [esp+0FCh+var_B4], 77359400h
.text:00407E93                 lea     esi, [esi+0]
.text:00407E99                 lea     edi, [edi+0]
.text:00407EA0
.text:00407EA0 loc_407EA0:                             ; CODE XREF: sub_407CB0+126↑j
.text:00407EA0                                         ; sub_407CB0+148↑j ...
.text:00407EA0                 mov     ebp, [esp+0FCh+var_B4]
.text:00407EA4                 mov     eax, [esp+0FCh+var_B0]
.text:00407EA8                 cmp     ebp, 3E8h
.text:00407EAE                 mov     [eax+8], ebp
.text:00407EB1                 jle     loc_408090
.text:00407EB7                 mov     eax, 10624DD3h
.text:00407EBC                 mov     ecx, [esp+0FCh+var_AC]
.text:00407EC0                 imul    [esp+0FCh+var_AC]
.text:00407EC4                 mov     eax, [esp+0FCh+var_A4]
.text:00407EC8                 sar     ecx, 1Fh
.text:00407ECB                 sar     edx, 6
.text:00407ECE                 sub     edx, ecx
.text:00407ED0                 imul    edx, 3E8h
.text:00407ED6                 cmp     [esp+0FCh+var_B4], 77359400h
.text:00407EDE                 mov     [esp+0FCh+var_AC], edx
.text:00407EE2                 jz      loc_408174
.text:00407EE8
.text:00407EE8 loc_407EE8:                             ; CODE XREF: sub_407CB0+4C7↓j
.text:00407EE8                 mov     ebx, [esp+0FCh+var_A0]
.text:00407EEC                 cmp     [esp+0FCh+var_A4], ebx
.text:00407EF0                 jl      loc_40816A
.text:00407EF6                 cmp     [esp+0FCh+var_A4], ebx
.text:00407EFA                 jz      loc_40815C
.text:00407F00
.text:00407F00 loc_407F00:                             ; CODE XREF: sub_407CB0+4B4↓j
.text:00407F00                 cmp     [esp+0FCh+var_A0], eax
.text:00407F04                 jl      loc_408152
.text:00407F0A                 cmp     [esp+0FCh+var_A0], eax
.text:00407F0E                 jz      loc_408139
.text:00407F14
.text:00407F14 loc_407F14:                             ; CODE XREF: sub_407CB0+49C↓j
.text:00407F14                 cmp     [esp+0FCh+var_B4], 77359400h
.text:00407F1C                 mov     ebp, [esp+0FCh+var_B8]
.text:00407F20                 mov     esi, [esp+0FCh+var_BC]
.text:00407F24                 mov     eax, [esp+0FCh+var_A0]
.text:00407F28                 mov     [esp+0FCh+var_2C], ebp
.text:00407F2F                 mov     [esp+0FCh+var_28], esi
.text:00407F36                 jz      loc_408131
.text:00407F3C
.text:00407F3C loc_407F3C:                             ; CODE XREF: sub_407CB0+484↓j
.text:00407F3C                 mov     [esp+0FCh+var_24], eax
.text:00407F43                 mov     esi, 38E38E39h
.text:00407F48                 mov     ebx, [esp+0FCh+var_B4]
.text:00407F4C                 mov     eax, [esp+0FCh+var_B4]
.text:00407F50                 mov     edi, [esp+0FCh+var_A8]
.text:00407F54                 sar     ebx, 1Fh
.text:00407F57                 imul    esi
.text:00407F59                 mov     eax, [esp+0FCh+arg_4]
.text:00407F60                 mov     ecx, [eax]
.text:00407F62                 sar     edx, 1
.text:00407F64                 sub     edx, ebx
.text:00407F66                 and     ecx, 0F000h
.text:00407F6C                 add     edx, edi
.text:00407F6E                 cmp     ecx, 0A000h
.text:00407F74                 mov     [esp+0FCh+var_20], edx
.text:00407F7B                 jz      short loc_407F9B
.text:00407F7D                 mov     edx, [esp+0FCh+arg_0]
.text:00407F84                 lea     esi, [esp+0FCh+var_2C]
.text:00407F8B                 mov     [esp+0FCh+var_F8], esi ; int
.text:00407F8F                 mov     [esp+0FCh+var_FC], edx ; char *
.text:00407F92                 call    sub_40A020
.text:00407F97                 test    eax, eax
.text:00407F99                 jz      short loc_407FAB
.text:00407F9B
.text:00407F9B loc_407F9B:                             ; CODE XREF: sub_407CB0+2CB↑j
.text:00407F9B                 mov     eax, 0FFFFFFFEh
.text:00407FA0
.text:00407FA0 loc_407FA0:                             ; CODE XREF: sub_407CB0+33F↓j
.text:00407FA0                                         ; sub_407CB0+413↓j ...
.text:00407FA0                 add     esp, 0ECh
.text:00407FA6                 pop     ebx
.text:00407FA7                 pop     esi
.text:00407FA8                 pop     edi
.text:00407FA9                 pop     ebp
.text:00407FAA                 retn
.text:00407FAB ; ---------------------------------------------------------------------------
.text:00407FAB
.text:00407FAB loc_407FAB:                             ; CODE XREF: sub_407CB0+2E9↑j
.text:00407FAB                 mov     edi, [esp+0FCh+arg_0]
.text:00407FB2                 lea     ebx, [esp+0FCh+var_9C]
.text:00407FB6                 mov     [esp+0FCh+var_F8], ebx ; int
.text:00407FBA                 mov     [esp+0FCh+var_FC], edi ; char *
.text:00407FBD                 call    sub_418A10
.text:00407FC2                 mov     edx, [esp+0FCh+var_A0]
.text:00407FC6                 mov     ebx, eax
.text:00407FC8                 mov     ecx, [esp+0FCh+var_5C]
.text:00407FCF                 mov     ebp, [esp+0FCh+var_A8]
.text:00407FD3                 xor     edx, ecx
.text:00407FD5                 or      edx, eax
.text:00407FD7                 mov     eax, [esp+0FCh+var_58]
.text:00407FDE                 xor     ebp, eax
.text:00407FE0                 or      edx, ebp
.text:00407FE2                 jnz     loc_408103
.text:00407FE8
.text:00407FE8 loc_407FE8:                             ; CODE XREF: sub_407CB0+47C↓j
.text:00407FE8                 test    ebx, ebx
.text:00407FEA                 mov     eax, 0FFFFFFFEh
.text:00407FEF                 jnz     short loc_407FA0
.text:00407FF1                 mov     ebx, [esp+0FCh+var_5C]
.text:00407FF8                 mov     ecx, [esp+0FCh+var_58]
.text:00407FFF                 mov     esi, [esp+0FCh+var_B4]
.text:00408003                 mov     [esp+0FCh+var_B4], 3E8h
.text:0040800B                 and     ebx, 1
.text:0040800E                 imul    ebx, 3B9ACA00h
.text:00408014                 add     ebx, ecx
.text:00408016                 mov     eax, ebx
.text:00408018                 cdq
.text:00408019                 idiv    [esp+0FCh+var_B4]
.text:0040801D                 mov     ecx, eax
.text:0040801F                 mov     eax, 66666667h
.text:00408024                 imul    ecx
.text:00408026                 mov     eax, ecx
.text:00408028                 mov     ebp, edx
.text:0040802A                 sar     ebp, 2
.text:0040802D                 cdq
.text:0040802E                 sub     ebp, edx
.text:00408030                 lea     edi, [ebp+ebp*4+0]
.text:00408034                 add     edi, edi
.text:00408036                 cmp     ecx, edi
.text:00408038                 jz      short loc_408090
.text:0040803A                 mov     ebx, 66666667h
.text:0040803F
.text:0040803F loc_40803F:                             ; CODE XREF: sub_407CB0+3D3↓j
.text:0040803F                 cmp     [esp+0FCh+var_B4], 3B9ACA00h
.text:00408047                 jz      loc_4080F9
.text:0040804D                 mov     eax, [esp+0FCh+var_B4]
.text:00408051                 lea     edi, [eax+eax*4]
.text:00408054                 add     edi, edi
.text:00408056                 mov     [esp+0FCh+var_B4], edi
.text:0040805A                 cmp     edi, esi
.text:0040805C                 jz      short loc_408090
.text:0040805E                 mov     eax, ecx
.text:00408060                 mov     ebp, ecx
.text:00408062                 sar     ebp, 1Fh
.text:00408065                 imul    ebx
.text:00408067                 sar     edx, 2
.text:0040806A                 sub     edx, ebp
.text:0040806C                 mov     eax, edx
.text:0040806E                 mov     ecx, edx
.text:00408070                 imul    ebx
.text:00408072                 mov     eax, ecx
.text:00408074                 mov     edi, edx
.text:00408076                 sar     edi, 2
.text:00408079                 cdq
.text:0040807A                 sub     edi, edx
.text:0040807C                 lea     edx, [edi+edi*4]
.text:0040807F                 add     edx, edx
.text:00408081                 cmp     ecx, edx
.text:00408083                 jnz     short loc_40803F
.text:00408085                 lea     esi, [esi+0]
.text:00408089                 lea     edi, [edi+0]
.text:00408090
.text:00408090 loc_408090:                             ; CODE XREF: sub_407CB0+201↑j
.text:00408090                                         ; sub_407CB0+388↑j ...
.text:00408090                 mov     esi, [esp+0FCh+var_B0]
.text:00408094                 mov     ebx, [esp+0FCh+var_B4]
.text:00408098                 mov     byte ptr [esi+0Ch], 1
.text:0040809C                 mov     [esi+8], ebx
.text:0040809F
.text:0040809F loc_40809F:                             ; CODE XREF: sub_407CB0+BC↑j
.text:0040809F                 cmp     [esp+0FCh+var_B4], 77359400h
.text:004080A7                 jz      short loc_4080F2
.text:004080A9
.text:004080A9 loc_4080A9:                             ; CODE XREF: sub_407CB0+447↓j
.text:004080A9                 mov     eax, [esp+0FCh+var_AC]
.text:004080AD                 cdq
.text:004080AE                 idiv    [esp+0FCh+var_B4]
.text:004080B2                 sub     [esp+0FCh+var_AC], edx
.text:004080B6
.text:004080B6 loc_4080B6:                             ; CODE XREF: sub_407CB0+43↑j
.text:004080B6                 mov     ecx, [esp+0FCh+var_A4]
.text:004080BA                 mov     eax, 0FFFFFFFFh
.text:004080BF                 cmp     [esp+0FCh+var_A0], ecx
.text:004080C3                 jl      loc_407FA0
.text:004080C9                 mov     eax, 1
.text:004080CE                 jg      loc_407FA0
.text:004080D4                 mov     edi, [esp+0FCh+var_AC]
.text:004080D8                 mov     eax, 0FFFFFFFFh
.text:004080DD                 cmp     [esp+0FCh+var_A8], edi
.text:004080E1                 jl      loc_407FA0
.text:004080E7                 setnle  dl
.text:004080EA                 movzx   eax, dl
.text:004080ED                 jmp     loc_407FA0
.text:004080F2 ; ---------------------------------------------------------------------------
.text:004080F2
.text:004080F2 loc_4080F2:                             ; CODE XREF: sub_407CB0+3F7↑j
.text:004080F2                 and     [esp+0FCh+var_A4], 0FFFFFFFEh
.text:004080F7                 jmp     short loc_4080A9
.text:004080F9 ; ---------------------------------------------------------------------------
.text:004080F9
.text:004080F9 loc_4080F9:                             ; CODE XREF: sub_407CB0+397↑j
.text:004080F9                 mov     [esp+0FCh+var_B4], 77359400h
.text:00408101                 jmp     short loc_408090
.text:00408103 ; ---------------------------------------------------------------------------
.text:00408103
.text:00408103 loc_408103:                             ; CODE XREF: sub_407CB0+332↑j
.text:00408103                 mov     [esp+0FCh+var_F8], esi ; int
.text:00408107                 mov     edx, [esp+0FCh+var_A0]
.text:0040810B                 mov     ebp, [esp+0FCh+var_A8]
.text:0040810F                 mov     esi, [esp+0FCh+arg_0]
.text:00408116                 mov     [esp+0FCh+var_24], edx
.text:0040811D                 mov     [esp+0FCh+var_20], ebp
.text:00408124                 mov     [esp+0FCh+var_FC], esi ; char *
.text:00408127                 call    sub_40A020
.text:0040812C                 jmp     loc_407FE8
.text:00408131 ; ---------------------------------------------------------------------------
.text:00408131
.text:00408131 loc_408131:                             ; CODE XREF: sub_407CB0+286↑j
.text:00408131                 or      eax, 1
.text:00408134                 jmp     loc_407F3C
.text:00408139 ; ---------------------------------------------------------------------------
.text:00408139
.text:00408139 loc_408139:                             ; CODE XREF: sub_407CB0+25E↑j
.text:00408139                 mov     eax, [esp+0FCh+var_AC]
.text:0040813D                 mov     ebx, [esp+0FCh+var_AC]
.text:00408141                 cdq
.text:00408142                 idiv    [esp+0FCh+var_B4]
.text:00408146                 sub     ebx, edx
.text:00408148                 cmp     [esp+0FCh+var_A8], ebx
.text:0040814C                 jge     loc_407F14
.text:00408152
.text:00408152 loc_408152:                             ; CODE XREF: sub_407CB0+254↑j
.text:00408152                 mov     eax, 0FFFFFFFFh
.text:00408157                 jmp     loc_407FA0
.text:0040815C ; ---------------------------------------------------------------------------
.text:0040815C
.text:0040815C loc_40815C:                             ; CODE XREF: sub_407CB0+24A↑j
.text:0040815C                 mov     edi, [esp+0FCh+var_A8]
.text:00408160                 cmp     [esp+0FCh+var_AC], edi
.text:00408164                 jg      loc_407F00
.text:0040816A
.text:0040816A loc_40816A:                             ; CODE XREF: sub_407CB0+240↑j
.text:0040816A                 mov     eax, 1
.text:0040816F                 jmp     loc_407FA0
.text:00408174 ; ---------------------------------------------------------------------------
.text:00408174
.text:00408174 loc_408174:                             ; CODE XREF: sub_407CB0+232↑j
.text:00408174                 and     eax, 0FFFFFFFEh
.text:00408177                 jmp     loc_407EE8
.text:0040817C ; ---------------------------------------------------------------------------
.text:0040817C
.text:0040817C loc_40817C:                             ; CODE XREF: sub_407CB0+9F↑j
.text:0040817C                 xor     ecx, ecx
.text:0040817E                 mov     ds:dword_4210A0, ecx
.text:00408184                 jmp     loc_407D55
.text:00408184 ; ---------------------------------------------------------------------------
.text:00408189                 align 10h
.text:00408190
.text:00408190 loc_408190:                             ; CODE XREF: sub_407CB0+5F↑j
.text:00408190                 mov     [esp+0FCh+var_FC], 10h ; size_t
.text:00408197                 call    sub_40A320
.text:0040819C                 mov     ds:dword_4210A0, eax
.text:004081A1                 mov     ecx, eax
.text:004081A3                 mov     dword ptr [eax+8], 77359400h
.text:004081AA                 mov     byte ptr [eax+0Ch], 0
.text:004081AE                 jmp     loc_407D15
.text:004081B3 ; ---------------------------------------------------------------------------
.text:004081B3
.text:004081B3 loc_4081B3:                             ; CODE XREF: sub_407CB0+51↑j
.text:004081B3                 mov     [esp+0FCh+var_EC], offset free
.text:004081BB                 mov     [esp+0FCh+var_F0], offset sub_408220
.text:004081C3                 mov     [esp+0FCh+var_F4], offset sub_4081F0
.text:004081CB                 mov     [esp+0FCh+var_F8], 0
.text:004081D3                 mov     [esp+0FCh+var_FC], 10h
.text:004081DA                 call    sub_40AFB0
.text:004081DF                 mov     ds:dword_421090, eax
.text:004081E4                 jmp     loc_407D07
.text:004081E9 ; ---------------------------------------------------------------------------
.text:004081E9
.text:004081E9 loc_4081E9:                             ; CODE XREF: sub_407CB0+8F↑j
.text:004081E9                 call    sub_40A2A0
.text:004081E9 sub_407CB0      endp
.text:004081E9
.text:004081E9 ; ---------------------------------------------------------------------------
.text:004081EE                 align 10h
.text:004081F0
.text:004081F0 ; =============== S U B R O U T I N E =======================================
.text:004081F0
.text:004081F0
.text:004081F0 sub_4081F0      proc near               ; DATA XREF: sub_407CB0+513↑o
.text:004081F0
.text:004081F0 var_1C          = dword ptr -1Ch
.text:004081F0 var_18          = dword ptr -18h
.text:004081F0 var_14          = dword ptr -14h
.text:004081F0 var_10          = dword ptr -10h
.text:004081F0 arg_0           = dword ptr  4
.text:004081F0 arg_4           = dword ptr  8
.text:004081F0
.text:004081F0                 sub     esp, 1Ch
.text:004081F3                 mov     ecx, [esp+1Ch+arg_0]
.text:004081F7                 mov     edx, [ecx+4]
.text:004081FA                 mov     eax, [ecx]
.text:004081FC                 mov     ecx, [esp+1Ch+arg_4]
.text:00408200                 mov     [esp+1Ch+var_10], 0
.text:00408208                 mov     [esp+1Ch+var_1C], eax
.text:0040820B                 mov     [esp+1Ch+var_14], ecx
.text:0040820F                 mov     [esp+1Ch+var_18], edx
.text:00408213                 call    sub_41E970
.text:00408218                 add     esp, 1Ch
.text:0040821B                 retn
.text:0040821B sub_4081F0      endp
.text:0040821B
.text:0040821B ; ---------------------------------------------------------------------------
.text:0040821C                 align 10h
.text:00408220
.text:00408220 ; =============== S U B R O U T I N E =======================================
.text:00408220
.text:00408220
.text:00408220 sub_408220      proc near               ; DATA XREF: sub_407CB0+50B↑o
.text:00408220
.text:00408220 arg_0           = dword ptr  4
.text:00408220 arg_4           = dword ptr  8
.text:00408220
.text:00408220                 push    ebx
.text:00408221                 mov     ecx, [esp+4+arg_0]
.text:00408225                 mov     edx, [ecx+4]
.text:00408228                 mov     eax, [ecx]
.text:0040822A                 mov     ecx, [esp+4+arg_4]
.text:0040822E                 mov     ebx, [ecx+4]
.text:00408231                 mov     ecx, [ecx]
.text:00408233                 xor     edx, ebx
.text:00408235                 xor     eax, ecx
.text:00408237                 pop     ebx
.text:00408238                 or      eax, edx
.text:0040823A                 setz    dl
.text:0040823D                 movzx   eax, dl
.text:00408240                 retn
.text:00408240 sub_408220      endp
.text:00408240
.text:00408240 ; ---------------------------------------------------------------------------
.text:00408241                 align 10h
.text:00408250
.text:00408250 ; =============== S U B R O U T I N E =======================================
.text:00408250
.text:00408250
.text:00408250 ; int __cdecl sub_408250(char *, int, int)
.text:00408250 sub_408250      proc near               ; CODE XREF: sub_4023E0+2B↑p
.text:00408250                                         ; sub_403910+412↑p ...
.text:00408250
.text:00408250 FileName        = dword ptr -9Ch
.text:00408250 OpenFlag        = dword ptr -98h
.text:00408250 var_94          = dword ptr -94h
.text:00408250 var_8C          = dword ptr -8Ch
.text:00408250 var_70          = dword ptr -70h
.text:00408250 var_6C          = dword ptr -6Ch
.text:00408250 var_10          = dword ptr -10h
.text:00408250 var_C           = dword ptr -0Ch
.text:00408250 var_8           = dword ptr -8
.text:00408250 var_4           = dword ptr -4
.text:00408250 arg_0           = dword ptr  4
.text:00408250 arg_4           = dword ptr  8
.text:00408250 arg_8           = dword ptr  0Ch
.text:00408250
.text:00408250                 sub     esp, 9Ch
.text:00408256                 mov     [esp+9Ch+var_10], ebx
.text:0040825D                 mov     ebx, [esp+9Ch+arg_8]
.text:00408264                 mov     [esp+9Ch+var_8], edi
.text:0040826B                 mov     edi, [esp+9Ch+arg_4]
.text:00408272                 cmp     ebx, 0FFFFFFFFh
.text:00408275                 mov     [esp+9Ch+var_4], ebp
.text:0040827C                 mov     ebp, [esp+9Ch+arg_0]
.text:00408283                 mov     [esp+9Ch+var_C], esi
.text:0040828A                 jz      loc_408330
.text:00408290                 cmp     edi, 0FFFFFFFFh
.text:00408293                 jz      loc_408330
.text:00408299
.text:00408299 loc_408299:                             ; CODE XREF: sub_408250+101↓j
.text:00408299                                         ; sub_408250+10B↓j
.text:00408299                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:004082A1                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:004082A4                 call    _open
.text:004082A9                 test    eax, eax
.text:004082AB                 mov     esi, eax
.text:004082AD                 js      short loc_408310
.text:004082AF
.text:004082AF loc_4082AF:                             ; CODE XREF: sub_408250+D9↓j
.text:004082AF                 mov     [esp+9Ch+var_94], ebx
.text:004082B3                 mov     [esp+9Ch+OpenFlag], edi
.text:004082B7                 mov     [esp+9Ch+FileName], esi
.text:004082BA                 call    sub_419AF0
.text:004082BF                 test    eax, eax
.text:004082C1                 jnz     short loc_4082F2
.text:004082C3                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:004082C6                 call    _close
.text:004082CB                 mov     edx, eax
.text:004082CD
.text:004082CD loc_4082CD:                             ; CODE XREF: sub_408250+BD↓j
.text:004082CD                                         ; sub_408250+DB↓j ...
.text:004082CD                 mov     ebx, [esp+9Ch+var_10]
.text:004082D4                 mov     eax, edx
.text:004082D6                 mov     esi, [esp+9Ch+var_C]
.text:004082DD                 mov     edi, [esp+9Ch+var_8]
.text:004082E4                 mov     ebp, [esp+9Ch+var_4]
.text:004082EB                 add     esp, 9Ch
.text:004082F1                 retn
.text:004082F2 ; ---------------------------------------------------------------------------
.text:004082F2
.text:004082F2 loc_4082F2:                             ; CODE XREF: sub_408250+71↑j
.text:004082F2                 call    _errno
.text:004082F7                 mov     edi, [eax]
.text:004082F9                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:004082FC                 call    _close
.text:00408301                 call    _errno
.text:00408306                 mov     [eax], edi
.text:00408308                 mov     edx, 0FFFFFFFFh
.text:0040830D                 jmp     short loc_4082CD
.text:0040830D ; ---------------------------------------------------------------------------
.text:0040830F                 align 10h
.text:00408310
.text:00408310 loc_408310:                             ; CODE XREF: sub_408250+5D↑j
.text:00408310                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:00408318                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:0040831B                 call    _open
.text:00408320                 test    eax, eax
.text:00408322                 mov     esi, eax
.text:00408324                 mov     edx, 0FFFFFFFFh
.text:00408329                 jns     short loc_4082AF
.text:0040832B                 jmp     short loc_4082CD
.text:0040832B ; ---------------------------------------------------------------------------
.text:0040832D                 align 10h
.text:00408330
.text:00408330 loc_408330:                             ; CODE XREF: sub_408250+3A↑j
.text:00408330                                         ; sub_408250+43↑j
.text:00408330                 mov     [esp+9Ch+FileName], ebp ; char *
.text:00408333                 lea     edx, [esp+9Ch+var_8C]
.text:00408337                 mov     [esp+9Ch+OpenFlag], edx ; int
.text:0040833B                 call    sub_418A10
.text:00408340                 test    eax, eax
.text:00408342                 mov     edx, 1
.text:00408347                 jnz     short loc_4082CD
.text:00408349                 cmp     ebx, 0FFFFFFFFh
.text:0040834C                 jz      short loc_408360
.text:0040834E
.text:0040834E loc_40834E:                             ; CODE XREF: sub_408250+114↓j
.text:0040834E                 cmp     edi, 0FFFFFFFFh
.text:00408351                 jnz     loc_408299
.text:00408357                 mov     edi, [esp+9Ch+var_70]
.text:0040835B                 jmp     loc_408299
.text:00408360 ; ---------------------------------------------------------------------------
.text:00408360
.text:00408360 loc_408360:                             ; CODE XREF: sub_408250+FC↑j
.text:00408360                 mov     ebx, [esp+9Ch+var_6C]
.text:00408364                 jmp     short loc_40834E
.text:00408364 sub_408250      endp
.text:00408364
.text:00408364 ; ---------------------------------------------------------------------------
.text:00408366                 align 10h
.text:00408370 dword_408370    dd 90002D2Dh, 7 dup(90909090h)
.text:00408370                                         ; DATA XREF: sub_4085C0+E4↓o
.text:00408390 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00408390                                         ; DATA XREF: sub_4085C0+2FC↓o
.text:004083BD                 db 13h dup(90h)
.text:004083D0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004083D0                                         ; DATA XREF: sub_4085C0:loc_408922↓o
.text:004083FD                 db 13h dup(90h)
.text:00408410 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00408410                                         ; DATA XREF: sub_4085C0:loc_4089C0↓o
.text:00408410                                         ; sub_4085C0:loc_408D87↓o
.text:00408436                 db 1Ah dup(90h)
.text:00408450 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00408450                                         ; DATA XREF: sub_4085C0+48E↓o
.text:00408470 dword_408470    dd 90909000h, 7 dup(90909090h)
.text:00408470                                         ; DATA XREF: sub_4085C0:loc_408A91↓o
.text:00408490 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00408490                                         ; DATA XREF: sub_4085C0:loc_408AAA↓o
.text:004084B0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004084B0                                         ; DATA XREF: sub_4085C0:loc_408B8F↓o
.text:004084B0                                         ; sub_4085C0:loc_408EBC↓o
.text:004084D7                 db 19h dup(90h)
.text:004084F0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004084F0                                         ; DATA XREF: sub_4085C0:loc_408D03↓o
.text:0040851E                 db 12h dup(90h)
.text:00408530 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00408530                                         ; DATA XREF: sub_4085C0:loc_408DEF↓o
.text:00408551 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00408551                                         ; DATA XREF: sub_4085C0+93F↓o
.text:0040856B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040856B                                         ; DATA XREF: sub_4085C0:loc_408F37↓o
.text:00408585 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00408585                                         ; DATA XREF: sub_4085C0:loc_408F5E↓o
.text:004085A3 ; const char aPosixlyCorrect[]
.text:004085A3 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4085C0:loc_409110↓o
.text:004085B3                 align 10h
.text:004085C0
.text:004085C0 ; =============== S U B R O U T I N E =======================================
.text:004085C0
.text:004085C0
.text:004085C0 ; int __cdecl sub_4085C0(int, int, char *Str, int, int, int, int, int)
.text:004085C0 sub_4085C0      proc near               ; CODE XREF: sub_409150+5A↓p
.text:004085C0                                         ; .text:0040923A↓p ...
.text:004085C0
.text:004085C0 Str1            = dword ptr -5Ch
.text:004085C0 Str2            = dword ptr -58h
.text:004085C0 MaxCount        = dword ptr -54h
.text:004085C0 var_50          = dword ptr -50h
.text:004085C0 var_4C          = dword ptr -4Ch
.text:004085C0 var_3C          = dword ptr -3Ch
.text:004085C0 var_38          = dword ptr -38h
.text:004085C0 var_34          = dword ptr -34h
.text:004085C0 var_30          = dword ptr -30h
.text:004085C0 var_2C          = dword ptr -2Ch
.text:004085C0 var_28          = dword ptr -28h
.text:004085C0 var_24          = dword ptr -24h
.text:004085C0 var_20          = dword ptr -20h
.text:004085C0 var_1C          = dword ptr -1Ch
.text:004085C0 var_18          = dword ptr -18h
.text:004085C0 var_14          = dword ptr -14h
.text:004085C0 arg_0           = dword ptr  4
.text:004085C0 arg_4           = dword ptr  8
.text:004085C0 Str             = dword ptr  0Ch
.text:004085C0 arg_C           = dword ptr  10h
.text:004085C0 arg_10          = dword ptr  14h
.text:004085C0 arg_14          = dword ptr  18h
.text:004085C0 arg_18          = dword ptr  1Ch
.text:004085C0 arg_1C          = dword ptr  20h
.text:004085C0
.text:004085C0                 push    ebp
.text:004085C1                 mov     eax, 0FFFFFFFFh
.text:004085C6                 push    edi
.text:004085C7                 push    esi
.text:004085C8                 push    ebx
.text:004085C9                 sub     esp, 4Ch
.text:004085CC                 mov     esi, [esp+5Ch+Str]
.text:004085D0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004085D4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004085D7                 mov     ebx, [ebp+4]
.text:004085DA                 setz    dl
.text:004085DD                 movzx   ecx, dl
.text:004085E0                 dec     ecx
.text:004085E1                 and     ecx, ebx
.text:004085E3                 mov     [esp+5Ch+var_14], ecx
.text:004085E7                 mov     ecx, [esp+5Ch+arg_0]
.text:004085EB                 test    ecx, ecx
.text:004085ED                 jle     loc_408717
.text:004085F3                 mov     dword ptr [ebp+0Ch], 0
.text:004085FA                 mov     ebx, [ebp+0]
.text:004085FD                 test    ebx, ebx
.text:004085FF                 jz      loc_409130
.text:00408605                 mov     edi, [ebp+10h]
.text:00408608                 test    edi, edi
.text:0040860A                 jnz     short loc_408663
.text:0040860C                 lea     esi, [esi+0]
.text:00408610
.text:00408610 loc_408610:                             ; CODE XREF: sub_4085C0+B7C↓j
.text:00408610                 mov     [ebp+24h], ebx
.text:00408613                 mov     esi, [esp+5Ch+Str]
.text:00408617                 mov     [ebp+20h], ebx
.text:0040861A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040861E                 xor     ebx, ebx
.text:00408620                 mov     dword ptr [ebp+14h], 0
.text:00408627                 test    ecx, ecx
.text:00408629                 jz      loc_409110
.text:0040862F
.text:0040862F loc_40862F:                             ; CODE XREF: sub_4085C0+B64↓j
.text:0040862F                 mov     ebx, 1
.text:00408634
.text:00408634 loc_408634:                             ; CODE XREF: sub_4085C0+B5E↓j
.text:00408634                 mov     [ebp+1Ch], ebx
.text:00408637                 mov     ecx, [esp+5Ch+Str]
.text:0040863B                 movzx   eax, byte ptr [ecx]
.text:0040863E                 cmp     al, 2Dh ; '-'
.text:00408640                 jz      loc_409100
.text:00408646                 cmp     al, 2Bh ; '+'
.text:00408648                 jz      loc_4090E9
.text:0040864E                 xor     edx, edx
.text:00408650                 test    ebx, ebx
.text:00408652                 setz    dl
.text:00408655                 mov     [ebp+18h], edx
.text:00408658
.text:00408658 loc_408658:                             ; CODE XREF: sub_4085C0+B35↓j
.text:00408658                 mov     [esp+5Ch+Str], esi
.text:0040865C                 mov     dword ptr [ebp+10h], 1
.text:00408663
.text:00408663 loc_408663:                             ; CODE XREF: sub_4085C0+4A↑j
.text:00408663                 mov     eax, [ebp+14h]
.text:00408666                 test    eax, eax
.text:00408668                 jz      short loc_408673
.text:0040866A                 cmp     byte ptr [eax], 0
.text:0040866D                 jnz     loc_408750
.text:00408673
.text:00408673 loc_408673:                             ; CODE XREF: sub_4085C0+A8↑j
.text:00408673                 mov     ebx, [ebp+0]
.text:00408676                 cmp     [ebp+24h], ebx
.text:00408679                 jle     short loc_40867E
.text:0040867B                 mov     [ebp+24h], ebx
.text:0040867E
.text:0040867E loc_40867E:                             ; CODE XREF: sub_4085C0+B9↑j
.text:0040867E                 cmp     [ebp+20h], ebx
.text:00408681                 jle     short loc_408686
.text:00408683                 mov     [ebp+20h], ebx
.text:00408686
.text:00408686 loc_408686:                             ; CODE XREF: sub_4085C0+C1↑j
.text:00408686                 cmp     dword ptr [ebp+18h], 1
.text:0040868A                 jz      loc_409060
.text:00408690
.text:00408690 loc_408690:                             ; CODE XREF: sub_4085C0+B13↓j
.text:00408690                 cmp     ebx, [esp+5Ch+arg_0]
.text:00408694                 jz      loc_409044
.text:0040869A                 cld
.text:0040869B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040869F                 mov     edx, 3
.text:004086A4                 mov     edi, offset dword_408370
.text:004086A9                 mov     esi, [ecx+ebx*4]
.text:004086AC                 mov     ecx, edx
.text:004086AE                 repe cmpsb
.text:004086B0                 jnz     short loc_4086EC
.text:004086B2                 mov     edx, [ebp+24h]
.text:004086B5                 lea     eax, [ebx+1]
.text:004086B8                 cmp     [ebp+20h], edx
.text:004086BB                 mov     [ebp+0], eax
.text:004086BE                 jz      loc_409058
.text:004086C4                 cmp     edx, eax
.text:004086C6                 jz      short loc_4086E0
.text:004086C8                 mov     [esp+5Ch+Str2], ebp
.text:004086CC                 mov     ebx, [esp+5Ch+arg_4]
.text:004086D0                 mov     [esp+5Ch+Str1], ebx
.text:004086D3                 call    sub_409270
.text:004086D8                 nop
.text:004086D9                 lea     esi, [esi+0]
.text:004086E0
.text:004086E0 loc_4086E0:                             ; CODE XREF: sub_4085C0+106↑j
.text:004086E0                                         ; sub_4085C0+A9B↓j
.text:004086E0                 mov     eax, [esp+5Ch+arg_0]
.text:004086E4                 mov     ebx, eax
.text:004086E6                 mov     [ebp+24h], eax
.text:004086E9                 mov     [ebp+0], eax
.text:004086EC
.text:004086EC loc_4086EC:                             ; CODE XREF: sub_4085C0+F0↑j
.text:004086EC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004086F0                 jz      loc_409044
.text:004086F6                 mov     esi, [esp+5Ch+arg_4]
.text:004086FA                 mov     eax, [esi+ebx*4]
.text:004086FD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00408700                 jz      short loc_408727
.text:00408702
.text:00408702 loc_408702:                             ; CODE XREF: sub_4085C0+16D↓j
.text:00408702                 mov     edx, [ebp+18h]
.text:00408705                 test    edx, edx
.text:00408707                 jz      short loc_408720
.text:00408709                 mov     [ebp+0Ch], eax
.text:0040870C                 lea     edi, [ebx+1]
.text:0040870F                 mov     eax, 1
.text:00408714                 mov     [ebp+0], edi
.text:00408717
.text:00408717 loc_408717:                             ; CODE XREF: sub_4085C0+2D↑j
.text:00408717                                         ; sub_4085C0+165↓j ...
.text:00408717                 add     esp, 4Ch
.text:0040871A                 pop     ebx
.text:0040871B                 pop     esi
.text:0040871C                 pop     edi
.text:0040871D                 pop     ebp
.text:0040871E                 retn
.text:0040871E ; ---------------------------------------------------------------------------
.text:0040871F                 align 10h
.text:00408720
.text:00408720 loc_408720:                             ; CODE XREF: sub_4085C0+147↑j
.text:00408720                                         ; sub_4085C0+A8A↓j ...
.text:00408720                 mov     eax, 0FFFFFFFFh
.text:00408725                 jmp     short loc_408717
.text:00408727 ; ---------------------------------------------------------------------------
.text:00408727
.text:00408727 loc_408727:                             ; CODE XREF: sub_4085C0+140↑j
.text:00408727                 movzx   edx, byte ptr [eax+1]
.text:0040872B                 test    dl, dl
.text:0040872D                 jz      short loc_408702
.text:0040872F                 mov     ebx, [esp+5Ch+arg_C]
.text:00408733                 xor     ecx, ecx
.text:00408735                 test    ebx, ebx
.text:00408737                 jz      short loc_408742
.text:00408739                 cmp     dl, 2Dh ; '-'
.text:0040873C                 jz      loc_40903A
.text:00408742
.text:00408742 loc_408742:                             ; CODE XREF: sub_4085C0+177↑j
.text:00408742                                         ; sub_4085C0+A7F↓j
.text:00408742                 lea     esi, [ecx+eax+1]
.text:00408746                 mov     [ebp+14h], esi
.text:00408749                 lea     esi, [esi+0]
.text:00408750
.text:00408750 loc_408750:                             ; CODE XREF: sub_4085C0+AD↑j
.text:00408750                 mov     ecx, [esp+5Ch+arg_C]
.text:00408754                 test    ecx, ecx
.text:00408756                 jz      loc_408AE0
.text:0040875C                 mov     edx, [ebp+0]
.text:0040875F                 mov     edi, [esp+5Ch+arg_4]
.text:00408763                 mov     eax, [edi+edx*4]
.text:00408766                 movzx   edx, byte ptr [eax+1]
.text:0040876A                 cmp     dl, 2Dh ; '-'
.text:0040876D                 jz      short loc_408785
.text:0040876F                 mov     ebx, [esp+5Ch+arg_14]
.text:00408773                 test    ebx, ebx
.text:00408775                 jz      loc_408AE0
.text:0040877B                 cmp     byte ptr [eax+2], 0
.text:0040877F                 jz      loc_40901A
.text:00408785
.text:00408785 loc_408785:                             ; CODE XREF: sub_4085C0+1AD↑j
.text:00408785                                         ; sub_4085C0+A75↓j
.text:00408785                 mov     [esp+5Ch+var_18], 0
.text:0040878D                 mov     ecx, [ebp+14h]
.text:00408790                 mov     [esp+5Ch+var_1C], 0
.text:00408798                 mov     [esp+5Ch+var_20], 0
.text:004087A0                 mov     edi, ecx
.text:004087A2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004087AA                 movzx   eax, byte ptr [ecx]
.text:004087AD                 test    al, al
.text:004087AF                 jz      short loc_4087CC
.text:004087B1                 cmp     al, 3Dh ; '='
.text:004087B3                 jz      short loc_4087CC
.text:004087B5                 lea     esi, [esi+0]
.text:004087B9                 lea     edi, [edi+0]
.text:004087C0
.text:004087C0 loc_4087C0:                             ; CODE XREF: sub_4085C0+20A↓j
.text:004087C0                 inc     edi
.text:004087C1                 movzx   eax, byte ptr [edi]
.text:004087C4                 test    al, al
.text:004087C6                 jz      short loc_4087CC
.text:004087C8                 cmp     al, 3Dh ; '='
.text:004087CA                 jnz     short loc_4087C0
.text:004087CC
.text:004087CC loc_4087CC:                             ; CODE XREF: sub_4085C0+1EF↑j
.text:004087CC                                         ; sub_4085C0+1F3↑j ...
.text:004087CC                 mov     [esp+5Ch+var_28], 0
.text:004087D4                 mov     esi, [esp+5Ch+arg_C]
.text:004087D8                 mov     ebx, [esi]
.text:004087DA                 test    ebx, ebx
.text:004087DC                 mov     edx, ebx
.text:004087DE                 jz      loc_408A00
.text:004087E4                 lea     esi, [esi+0]
.text:004087EA                 lea     edi, [edi+0]
.text:004087F0
.text:004087F0 loc_4087F0:                             ; CODE XREF: sub_4085C0+25E↓j
.text:004087F0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004087F4                 mov     ebx, edi
.text:004087F6                 sub     ebx, ecx
.text:004087F8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004087FC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004087FF                 call    strncmp
.text:00408804                 test    eax, eax
.text:00408806                 jz      loc_408F96
.text:0040880C
.text:0040880C loc_40880C:                             ; CODE XREF: sub_4085C0+A0F↓j
.text:0040880C                                         ; sub_4085C0+A24↓j ...
.text:0040880C                 inc     [esp+5Ch+var_28]
.text:00408810                 add     esi, 10h
.text:00408813                 mov     ecx, [esi]
.text:00408815                 test    ecx, ecx
.text:00408817                 mov     edx, ecx
.text:00408819                 jz      short loc_408820
.text:0040881B                 mov     ecx, [ebp+14h]
.text:0040881E                 jmp     short loc_4087F0
.text:00408820 ; ---------------------------------------------------------------------------
.text:00408820
.text:00408820 loc_408820:                             ; CODE XREF: sub_4085C0+259↑j
.text:00408820                                         ; sub_4085C0+A55↓j
.text:00408820                 mov     esi, [esp+5Ch+var_20]
.text:00408824                 test    esi, esi
.text:00408826                 jz      short loc_408834
.text:00408828                 mov     edx, [esp+5Ch+var_1C]
.text:0040882C                 test    edx, edx
.text:0040882E                 jz      loc_408F40
.text:00408834
.text:00408834 loc_408834:                             ; CODE XREF: sub_4085C0+266↑j
.text:00408834                 mov     eax, [esp+5Ch+var_18]
.text:00408838                 test    eax, eax
.text:0040883A                 jz      loc_408A00
.text:00408840                 mov     ecx, [ebp+0]
.text:00408843                 lea     eax, [ecx+1]
.text:00408846                 mov     [ebp+0], eax
.text:00408849                 cmp     byte ptr [edi], 0
.text:0040884C                 jz      loc_408960
.text:00408852                 mov     ecx, [esp+5Ch+var_18]
.text:00408856                 mov     esi, [ecx+4]
.text:00408859                 test    esi, esi
.text:0040885B                 jz      short loc_4088A6
.text:0040885D                 lea     ebx, [edi+1]
.text:00408860                 mov     [ebp+0Ch], ebx
.text:00408863
.text:00408863 loc_408863:                             ; CODE XREF: sub_4085C0+3A8↓j
.text:00408863                                         ; sub_4085C0+3C4↓j
.text:00408863                 mov     ebx, [ebp+14h]
.text:00408866                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00408869                 call    strlen
.text:0040886E                 add     [ebp+14h], eax
.text:00408871                 mov     esi, [esp+5Ch+arg_10]
.text:00408875                 test    esi, esi
.text:00408877                 jz      short loc_408883
.text:00408879                 mov     ebp, [esp+5Ch+var_24]
.text:0040887D                 mov     ecx, [esp+5Ch+arg_10]
.text:00408881                 mov     [ecx], ebp
.text:00408883
.text:00408883 loc_408883:                             ; CODE XREF: sub_4085C0+2B7↑j
.text:00408883                 mov     eax, [esp+5Ch+var_18]
.text:00408887                 mov     ecx, [eax+8]
.text:0040888A                 test    ecx, ecx
.text:0040888C                 jnz     short loc_40889A
.text:0040888E                 mov     ecx, [esp+5Ch+var_18]
.text:00408892
.text:00408892 loc_408892:                             ; CODE XREF: sub_4085C0+723↓j
.text:00408892                 mov     eax, [ecx+0Ch]
.text:00408895                 jmp     loc_408717
.text:0040889A ; ---------------------------------------------------------------------------
.text:0040889A
.text:0040889A loc_40889A:                             ; CODE XREF: sub_4085C0+2CC↑j
.text:0040889A                                         ; sub_4085C0+719↓j
.text:0040889A                 mov     esi, [eax+0Ch]
.text:0040889D                 xor     eax, eax
.text:0040889F                 mov     [ecx], esi
.text:004088A1                 jmp     loc_408717
.text:004088A6 ; ---------------------------------------------------------------------------
.text:004088A6
.text:004088A6 loc_4088A6:                             ; CODE XREF: sub_4085C0+29B↑j
.text:004088A6                 mov     edi, [esp+5Ch+var_14]
.text:004088AA                 test    edi, edi
.text:004088AC                 jz      short loc_408900
.text:004088AE                 mov     esi, [esp+5Ch+arg_4]
.text:004088B2                 mov     edx, [esi+eax*4-4]
.text:004088B6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004088BA                 jz      short loc_408922
.text:004088BC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004088C3                 call    ds:libintl_gettext
.text:004088C9                 mov     edx, [esp+5Ch+var_18]
.text:004088CD                 mov     edi, [edx]
.text:004088CF                 mov     [esp+5Ch+var_4C], edi
.text:004088D3                 mov     ebx, [ebp+0]
.text:004088D6                 mov     edi, [esp+5Ch+arg_4]
.text:004088DA                 mov     ecx, [edi+ebx*4-4]
.text:004088DE                 movsx   esi, byte ptr [ecx]
.text:004088E1                 mov     ecx, ds:_iob
.text:004088E7                 add     ecx, 40h ; '@'
.text:004088EA                 mov     [esp+5Ch+var_50], esi
.text:004088EE                 mov     ebx, [edi]
.text:004088F0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004088F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004088F7                 mov     [esp+5Ch+MaxCount], ebx
.text:004088FB                 call    fprintf
.text:00408900
.text:00408900 loc_408900:                             ; CODE XREF: sub_4085C0+2EC↑j
.text:00408900                                         ; sub_4085C0+398↓j
.text:00408900                 mov     ecx, [ebp+14h]
.text:00408903                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00408906                 call    strlen
.text:0040890B                 add     [ebp+14h], eax
.text:0040890E                 mov     eax, [esp+5Ch+var_18]
.text:00408912                 mov     esi, [eax+0Ch]
.text:00408915                 mov     [ebp+8], esi
.text:00408918
.text:00408918 loc_408918:                             ; CODE XREF: sub_4085C0+4E5↓j
.text:00408918                                         ; sub_4085C0+73E↓j ...
.text:00408918                 mov     eax, 3Fh ; '?'
.text:0040891D                 jmp     loc_408717
.text:00408922 ; ---------------------------------------------------------------------------
.text:00408922
.text:00408922 loc_408922:                             ; CODE XREF: sub_4085C0+2FA↑j
.text:00408922                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00408929                 call    ds:libintl_gettext
.text:0040892F                 mov     edx, [esp+5Ch+var_18]
.text:00408933                 mov     edi, [esp+5Ch+arg_4]
.text:00408937                 mov     ecx, ds:_iob
.text:0040893D                 mov     esi, [edx]
.text:0040893F                 add     ecx, 40h ; '@'
.text:00408942                 mov     [esp+5Ch+var_50], esi
.text:00408946                 mov     ebx, [edi]
.text:00408948                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040894C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040894F                 mov     [esp+5Ch+MaxCount], ebx
.text:00408953                 call    fprintf
.text:00408958                 jmp     short loc_408900
.text:00408958 ; ---------------------------------------------------------------------------
.text:0040895A                 align 10h
.text:00408960
.text:00408960 loc_408960:                             ; CODE XREF: sub_4085C0+28C↑j
.text:00408960                 mov     ebx, [esp+5Ch+var_18]
.text:00408964                 cmp     dword ptr [ebx+4], 1
.text:00408968                 jnz     loc_408863
.text:0040896E                 cmp     eax, [esp+5Ch+arg_0]
.text:00408972                 jge     short loc_408989
.text:00408974                 mov     ebx, [esp+5Ch+arg_4]
.text:00408978                 lea     edi, [ecx+2]
.text:0040897B                 mov     [ebp+0], edi
.text:0040897E                 mov     esi, [ebx+eax*4]
.text:00408981                 mov     [ebp+0Ch], esi
.text:00408984                 jmp     loc_408863
.text:00408989 ; ---------------------------------------------------------------------------
.text:00408989
.text:00408989 loc_408989:                             ; CODE XREF: sub_4085C0+3B2↑j
.text:00408989                 mov     edx, [esp+5Ch+var_14]
.text:0040898D                 test    edx, edx
.text:0040898F                 jnz     short loc_4089C0
.text:00408991
.text:00408991 loc_408991:                             ; CODE XREF: sub_4085C0+437↓j
.text:00408991                 mov     edx, [ebp+14h]
.text:00408994                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408997                 call    strlen
.text:0040899C                 add     [ebp+14h], eax
.text:0040899F                 mov     eax, [esp+5Ch+var_18]
.text:004089A3                 mov     edi, [eax+0Ch]
.text:004089A6                 mov     [ebp+8], edi
.text:004089A9
.text:004089A9 loc_4089A9:                             ; CODE XREF: sub_4085C0+7C2↓j
.text:004089A9                 mov     ebp, [esp+5Ch+Str]
.text:004089AD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004089B1                 setnz   bl
.text:004089B4                 movzx   esi, bl
.text:004089B7                 lea     eax, [esi+esi*4+3Ah]
.text:004089BB                 jmp     loc_408717
.text:004089C0 ; ---------------------------------------------------------------------------
.text:004089C0
.text:004089C0 loc_4089C0:                             ; CODE XREF: sub_4085C0+3CF↑j
.text:004089C0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004089C7                 call    ds:libintl_gettext
.text:004089CD                 mov     ecx, [ebp+0]
.text:004089D0                 mov     esi, [esp+5Ch+arg_4]
.text:004089D4                 mov     ebx, [esi+ecx*4-4]
.text:004089D8                 mov     ecx, ds:_iob
.text:004089DE                 mov     [esp+5Ch+var_50], ebx
.text:004089E2                 mov     edi, [esi]
.text:004089E4                 add     ecx, 40h ; '@'
.text:004089E7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004089EB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004089EE                 mov     [esp+5Ch+MaxCount], edi
.text:004089F2                 call    fprintf
.text:004089F7                 jmp     short loc_408991
.text:004089F7 ; ---------------------------------------------------------------------------
.text:004089F9                 align 10h
.text:00408A00
.text:00408A00 loc_408A00:                             ; CODE XREF: sub_4085C0+21E↑j
.text:00408A00                                         ; sub_4085C0+27A↑j
.text:00408A00                 mov     eax, [esp+5Ch+arg_14]
.text:00408A04                 test    eax, eax
.text:00408A06                 jz      short loc_408A36
.text:00408A08                 mov     ebx, [ebp+0]
.text:00408A0B                 mov     esi, [esp+5Ch+arg_4]
.text:00408A0F                 mov     edi, [esi+ebx*4]
.text:00408A12                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00408A16                 jz      short loc_408A39
.text:00408A18                 mov     ecx, [ebp+14h]
.text:00408A1B                 mov     edx, [esp+5Ch+Str]
.text:00408A1F                 movsx   ebx, byte ptr [ecx]
.text:00408A22                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408A25                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00408A29                 call    strchr
.text:00408A2E                 test    eax, eax
.text:00408A30                 jnz     loc_408AE0
.text:00408A36
.text:00408A36 loc_408A36:                             ; CODE XREF: sub_4085C0+446↑j
.text:00408A36                 mov     ebx, [ebp+0]
.text:00408A39
.text:00408A39 loc_408A39:                             ; CODE XREF: sub_4085C0+456↑j
.text:00408A39                 mov     eax, [esp+5Ch+var_14]
.text:00408A3D                 test    eax, eax
.text:00408A3F                 jz      short loc_408A91
.text:00408A41                 mov     esi, [esp+5Ch+arg_4]
.text:00408A45                 mov     edi, [esi+ebx*4]
.text:00408A48                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00408A4C                 jz      short loc_408AAA
.text:00408A4E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00408A55                 call    ds:libintl_gettext
.text:00408A5B                 mov     edi, [ebp+14h]
.text:00408A5E                 mov     [esp+5Ch+var_4C], edi
.text:00408A62                 mov     ebx, [ebp+0]
.text:00408A65                 mov     edi, [esp+5Ch+arg_4]
.text:00408A69                 mov     esi, [edi+ebx*4]
.text:00408A6C                 movsx   ecx, byte ptr [esi]
.text:00408A6F                 mov     esi, ds:_iob
.text:00408A75                 add     esi, 40h ; '@'
.text:00408A78                 mov     [esp+5Ch+var_50], ecx
.text:00408A7C                 mov     ebx, [edi]
.text:00408A7E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408A82                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00408A85                 mov     [esp+5Ch+MaxCount], ebx
.text:00408A89                 call    fprintf
.text:00408A8E
.text:00408A8E loc_408A8E:                             ; CODE XREF: sub_4085C0+51D↓j
.text:00408A8E                 mov     ebx, [ebp+0]
.text:00408A91
.text:00408A91 loc_408A91:                             ; CODE XREF: sub_4085C0+47F↑j
.text:00408A91                 mov     dword ptr [ebp+14h], offset dword_408470
.text:00408A98                 lea     edx, [ebx+1]
.text:00408A9B                 mov     [ebp+0], edx
.text:00408A9E
.text:00408A9E loc_408A9E:                             ; CODE XREF: sub_4085C0+999↓j
.text:00408A9E                 mov     dword ptr [ebp+8], 0
.text:00408AA5                 jmp     loc_408918
.text:00408AAA ; ---------------------------------------------------------------------------
.text:00408AAA
.text:00408AAA loc_408AAA:                             ; CODE XREF: sub_4085C0+48C↑j
.text:00408AAA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00408AB1                 call    ds:libintl_gettext
.text:00408AB7                 mov     ecx, [ebp+14h]
.text:00408ABA                 mov     edi, [esp+5Ch+arg_4]
.text:00408ABE                 mov     edx, ds:_iob
.text:00408AC4                 mov     [esp+5Ch+var_50], ecx
.text:00408AC8                 mov     ebx, [edi]
.text:00408ACA                 add     edx, 40h ; '@'
.text:00408ACD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408AD1                 mov     [esp+5Ch+MaxCount], ebx
.text:00408AD5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00408AD8                 call    fprintf
.text:00408ADD                 jmp     short loc_408A8E
.text:00408ADD ; ---------------------------------------------------------------------------
.text:00408ADF                 align 10h
.text:00408AE0
.text:00408AE0 loc_408AE0:                             ; CODE XREF: sub_4085C0+196↑j
.text:00408AE0                                         ; sub_4085C0+1B5↑j ...
.text:00408AE0                 mov     esi, [ebp+14h]
.text:00408AE3                 movzx   ebx, byte ptr [esi]
.text:00408AE6                 inc     esi
.text:00408AE7                 mov     [ebp+14h], esi
.text:00408AEA                 mov     ecx, [esp+5Ch+Str]
.text:00408AEE                 movsx   esi, bl
.text:00408AF1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00408AF5                 mov     edi, esi
.text:00408AF7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00408AFA                 call    strchr
.text:00408AFF                 mov     ecx, [ebp+14h]
.text:00408B02                 cmp     byte ptr [ecx], 0
.text:00408B05                 jnz     short loc_408B0A
.text:00408B07                 inc     dword ptr [ebp+0]
.text:00408B0A
.text:00408B0A loc_408B0A:                             ; CODE XREF: sub_4085C0+545↑j
.text:00408B0A                 test    eax, eax
.text:00408B0C                 jz      loc_408EF0
.text:00408B12                 cmp     bl, 3Ah ; ':'
.text:00408B15                 jz      loc_408EF0
.text:00408B1B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00408B1E                 jz      loc_408BD6
.text:00408B24                 movzx   edx, byte ptr [eax+1]
.text:00408B28
.text:00408B28 loc_408B28:                             ; CODE XREF: sub_4085C0+61D↓j
.text:00408B28                 cmp     dl, 3Ah ; ':'
.text:00408B2B                 jz      short loc_408B34
.text:00408B2D
.text:00408B2D loc_408B2D:                             ; CODE XREF: sub_4085C0+590↓j
.text:00408B2D                 mov     eax, esi
.text:00408B2F                 jmp     loc_408717
.text:00408B34 ; ---------------------------------------------------------------------------
.text:00408B34
.text:00408B34 loc_408B34:                             ; CODE XREF: sub_4085C0+56B↑j
.text:00408B34                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00408B38                 jz      loc_408BC1
.text:00408B3E                 cmp     byte ptr [ecx], 0
.text:00408B41                 jz      short loc_408B52
.text:00408B43
.text:00408B43 loc_408B43:                             ; CODE XREF: sub_4085C0+604↓j
.text:00408B43                 inc     dword ptr [ebp+0]
.text:00408B46                 mov     [ebp+0Ch], ecx
.text:00408B49
.text:00408B49 loc_408B49:                             ; CODE XREF: sub_4085C0+5AB↓j
.text:00408B49                                         ; sub_4085C0+5C6↓j ...
.text:00408B49                 mov     dword ptr [ebp+14h], 0
.text:00408B50                 jmp     short loc_408B2D
.text:00408B52 ; ---------------------------------------------------------------------------
.text:00408B52
.text:00408B52 loc_408B52:                             ; CODE XREF: sub_4085C0+581↑j
.text:00408B52                 mov     ecx, [ebp+0]
.text:00408B55                 cmp     ecx, [esp+5Ch+arg_0]
.text:00408B59                 jz      short loc_408B6D
.text:00408B5B                 mov     eax, [esp+5Ch+arg_4]
.text:00408B5F                 lea     edx, [ecx+1]
.text:00408B62                 mov     [ebp+0], edx
.text:00408B65                 mov     ebx, [eax+ecx*4]
.text:00408B68                 mov     [ebp+0Ch], ebx
.text:00408B6B                 jmp     short loc_408B49
.text:00408B6D ; ---------------------------------------------------------------------------
.text:00408B6D
.text:00408B6D loc_408B6D:                             ; CODE XREF: sub_4085C0+599↑j
.text:00408B6D                 mov     ecx, [esp+5Ch+var_14]
.text:00408B71                 test    ecx, ecx
.text:00408B73                 jnz     short loc_408B8F
.text:00408B75
.text:00408B75 loc_408B75:                             ; CODE XREF: sub_4085C0+5FF↓j
.text:00408B75                 mov     [ebp+8], edi
.text:00408B78                 mov     edi, [esp+5Ch+Str]
.text:00408B7C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00408B7F                 jz      short loc_408B88
.text:00408B81                 mov     esi, 3Fh ; '?'
.text:00408B86                 jmp     short loc_408B49
.text:00408B88 ; ---------------------------------------------------------------------------
.text:00408B88
.text:00408B88 loc_408B88:                             ; CODE XREF: sub_4085C0+5BF↑j
.text:00408B88                 mov     esi, 3Ah ; ':'
.text:00408B8D                 jmp     short loc_408B49
.text:00408B8F ; ---------------------------------------------------------------------------
.text:00408B8F
.text:00408B8F loc_408B8F:                             ; CODE XREF: sub_4085C0+5B3↑j
.text:00408B8F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00408B96                 call    ds:libintl_gettext
.text:00408B9C                 mov     [esp+5Ch+var_50], edi
.text:00408BA0                 mov     ebx, [esp+5Ch+arg_4]
.text:00408BA4                 mov     edx, ds:_iob
.text:00408BAA                 mov     esi, [ebx]
.text:00408BAC                 add     edx, 40h ; '@'
.text:00408BAF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408BB3                 mov     [esp+5Ch+MaxCount], esi
.text:00408BB7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00408BBA                 call    fprintf
.text:00408BBF                 jmp     short loc_408B75
.text:00408BC1 ; ---------------------------------------------------------------------------
.text:00408BC1
.text:00408BC1 loc_408BC1:                             ; CODE XREF: sub_4085C0+578↑j
.text:00408BC1                 cmp     byte ptr [ecx], 0
.text:00408BC4                 jnz     loc_408B43
.text:00408BCA                 mov     dword ptr [ebp+0Ch], 0
.text:00408BD1                 jmp     loc_408B49
.text:00408BD6 ; ---------------------------------------------------------------------------
.text:00408BD6
.text:00408BD6 loc_408BD6:                             ; CODE XREF: sub_4085C0+55E↑j
.text:00408BD6                 movzx   edx, byte ptr [eax+1]
.text:00408BDA                 cmp     dl, 3Bh ; ';'
.text:00408BDD                 jnz     loc_408B28
.text:00408BE3                 mov     [esp+5Ch+var_2C], 0
.text:00408BEB                 mov     [esp+5Ch+var_30], 0
.text:00408BF3                 mov     [esp+5Ch+var_34], 0
.text:00408BFB                 mov     [esp+5Ch+var_38], 0
.text:00408C03                 cmp     byte ptr [ecx], 0
.text:00408C06                 jz      loc_408E7B
.text:00408C0C                 inc     dword ptr [ebp+0]
.text:00408C0F                 mov     [ebp+0Ch], ecx
.text:00408C12
.text:00408C12 loc_408C12:                             ; CODE XREF: sub_4085C0+8D4↓j
.text:00408C12                 mov     edi, [ebp+0Ch]
.text:00408C15                 mov     [ebp+14h], edi
.text:00408C18                 movzx   eax, byte ptr [edi]
.text:00408C1B                 test    al, al
.text:00408C1D                 jz      short loc_408C2F
.text:00408C1F                 cmp     al, 3Dh ; '='
.text:00408C21                 jz      short loc_408C2F
.text:00408C23
.text:00408C23 loc_408C23:                             ; CODE XREF: sub_4085C0+66D↓j
.text:00408C23                 inc     edi
.text:00408C24                 movzx   eax, byte ptr [edi]
.text:00408C27                 test    al, al
.text:00408C29                 jz      short loc_408C2F
.text:00408C2B                 cmp     al, 3Dh ; '='
.text:00408C2D                 jnz     short loc_408C23
.text:00408C2F
.text:00408C2F loc_408C2F:                             ; CODE XREF: sub_4085C0+65D↑j
.text:00408C2F                                         ; sub_4085C0+661↑j ...
.text:00408C2F                 mov     [esp+5Ch+var_3C], 0
.text:00408C37                 mov     esi, [esp+5Ch+arg_C]
.text:00408C3B                 mov     eax, [esi]
.text:00408C3D                 test    eax, eax
.text:00408C3F                 jz      loc_408DC0
.text:00408C45                 mov     ecx, eax
.text:00408C47
.text:00408C47 loc_408C47:                             ; CODE XREF: sub_4085C0+6B3↓j
.text:00408C47                 mov     ebx, [ebp+14h]
.text:00408C4A                 mov     eax, edi
.text:00408C4C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00408C4F                 sub     eax, ebx
.text:00408C51                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00408C55                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00408C59                 call    strncmp
.text:00408C5E                 test    eax, eax
.text:00408C60                 jz      loc_408E27
.text:00408C66
.text:00408C66 loc_408C66:                             ; CODE XREF: sub_4085C0+88C↓j
.text:00408C66                                         ; sub_4085C0+89D↓j
.text:00408C66                 inc     [esp+5Ch+var_3C]
.text:00408C6A                 add     esi, 10h
.text:00408C6D                 mov     edx, [esi]
.text:00408C6F                 test    edx, edx
.text:00408C71                 mov     ecx, edx
.text:00408C73                 jnz     short loc_408C47
.text:00408C75
.text:00408C75 loc_408C75:                             ; CODE XREF: sub_4085C0+8B6↓j
.text:00408C75                 mov     esi, [esp+5Ch+var_34]
.text:00408C79                 test    esi, esi
.text:00408C7B                 jz      short loc_408C89
.text:00408C7D                 mov     ebx, [esp+5Ch+var_30]
.text:00408C81                 test    ebx, ebx
.text:00408C83                 jz      loc_408DD1
.text:00408C89
.text:00408C89 loc_408C89:                             ; CODE XREF: sub_4085C0+6BB↑j
.text:00408C89                 mov     esi, [esp+5Ch+var_2C]
.text:00408C8D                 test    esi, esi
.text:00408C8F                 jz      loc_408DC0
.text:00408C95                 cmp     byte ptr [edi], 0
.text:00408C98                 jz      loc_408D40
.text:00408C9E                 mov     ecx, [esp+5Ch+var_2C]
.text:00408CA2                 mov     ebx, [ecx+4]
.text:00408CA5                 test    ebx, ebx
.text:00408CA7                 jz      short loc_408CE8
.text:00408CA9                 lea     edx, [edi+1]
.text:00408CAC                 mov     [ebp+0Ch], edx
.text:00408CAF
.text:00408CAF loc_408CAF:                             ; CODE XREF: sub_4085C0+788↓j
.text:00408CAF                                         ; sub_4085C0+7A7↓j
.text:00408CAF                 mov     edi, [ebp+14h]
.text:00408CB2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00408CB5                 call    strlen
.text:00408CBA                 add     [ebp+14h], eax
.text:00408CBD                 mov     eax, [esp+5Ch+arg_10]
.text:00408CC1                 test    eax, eax
.text:00408CC3                 jz      short loc_408CD0
.text:00408CC5                 mov     edx, [esp+5Ch+var_38]
.text:00408CC9                 mov     ebp, [esp+5Ch+arg_10]
.text:00408CCD                 mov     [ebp+0], edx
.text:00408CD0
.text:00408CD0 loc_408CD0:                             ; CODE XREF: sub_4085C0+703↑j
.text:00408CD0                 mov     eax, [esp+5Ch+var_2C]
.text:00408CD4                 mov     ecx, [eax+8]
.text:00408CD7                 test    ecx, ecx
.text:00408CD9                 jnz     loc_40889A
.text:00408CDF                 mov     ecx, [esp+5Ch+var_2C]
.text:00408CE3                 jmp     loc_408892
.text:00408CE8 ; ---------------------------------------------------------------------------
.text:00408CE8
.text:00408CE8 loc_408CE8:                             ; CODE XREF: sub_4085C0+6E7↑j
.text:00408CE8                 mov     eax, [esp+5Ch+var_14]
.text:00408CEC                 test    eax, eax
.text:00408CEE                 jnz     short loc_408D03
.text:00408CF0
.text:00408CF0 loc_408CF0:                             ; CODE XREF: sub_4085C0+779↓j
.text:00408CF0                 mov     ecx, [ebp+14h]
.text:00408CF3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00408CF6                 call    strlen
.text:00408CFB                 add     [ebp+14h], eax
.text:00408CFE                 jmp     loc_408918
.text:00408D03 ; ---------------------------------------------------------------------------
.text:00408D03
.text:00408D03 loc_408D03:                             ; CODE XREF: sub_4085C0+72E↑j
.text:00408D03                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00408D0A                 call    ds:libintl_gettext
.text:00408D10                 mov     edx, [esp+5Ch+var_2C]
.text:00408D14                 mov     ebx, [esp+5Ch+arg_4]
.text:00408D18                 mov     edi, [edx]
.text:00408D1A                 mov     [esp+5Ch+var_50], edi
.text:00408D1E                 mov     edi, ds:_iob
.text:00408D24                 mov     esi, [ebx]
.text:00408D26                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408D2A                 add     edi, 40h ; '@'
.text:00408D2D                 mov     [esp+5Ch+MaxCount], esi
.text:00408D31                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00408D34                 call    fprintf
.text:00408D39                 jmp     short loc_408CF0
.text:00408D39 ; ---------------------------------------------------------------------------
.text:00408D3B                 align 10h
.text:00408D40
.text:00408D40 loc_408D40:                             ; CODE XREF: sub_4085C0+6D8↑j
.text:00408D40                 mov     esi, [esp+5Ch+var_2C]
.text:00408D44                 cmp     dword ptr [esi+4], 1
.text:00408D48                 jnz     loc_408CAF
.text:00408D4E                 mov     ecx, [ebp+0]
.text:00408D51                 cmp     ecx, [esp+5Ch+arg_0]
.text:00408D55                 jge     short loc_408D6C
.text:00408D57                 mov     eax, [esp+5Ch+arg_4]
.text:00408D5B                 lea     ebx, [ecx+1]
.text:00408D5E                 mov     [ebp+0], ebx
.text:00408D61                 mov     edi, [eax+ecx*4]
.text:00408D64                 mov     [ebp+0Ch], edi
.text:00408D67                 jmp     loc_408CAF
.text:00408D6C ; ---------------------------------------------------------------------------
.text:00408D6C
.text:00408D6C loc_408D6C:                             ; CODE XREF: sub_4085C0+795↑j
.text:00408D6C                 mov     edx, [esp+5Ch+var_14]
.text:00408D70                 test    edx, edx
.text:00408D72                 jnz     short loc_408D87
.text:00408D74
.text:00408D74 loc_408D74:                             ; CODE XREF: sub_4085C0+7FE↓j
.text:00408D74                 mov     edx, [ebp+14h]
.text:00408D77                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408D7A                 call    strlen
.text:00408D7F                 add     [ebp+14h], eax
.text:00408D82                 jmp     loc_4089A9
.text:00408D87 ; ---------------------------------------------------------------------------
.text:00408D87
.text:00408D87 loc_408D87:                             ; CODE XREF: sub_4085C0+7B2↑j
.text:00408D87                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00408D8E                 call    ds:libintl_gettext
.text:00408D94                 mov     ecx, [ebp+0]
.text:00408D97                 mov     ebx, [esp+5Ch+arg_4]
.text:00408D9B                 mov     edi, [ebx+ecx*4-4]
.text:00408D9F                 mov     ecx, ds:_iob
.text:00408DA5                 mov     [esp+5Ch+var_50], edi
.text:00408DA9                 mov     esi, [ebx]
.text:00408DAB                 add     ecx, 40h ; '@'
.text:00408DAE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408DB2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00408DB5                 mov     [esp+5Ch+MaxCount], esi
.text:00408DB9                 call    fprintf
.text:00408DBE                 jmp     short loc_408D74
.text:00408DC0 ; ---------------------------------------------------------------------------
.text:00408DC0
.text:00408DC0 loc_408DC0:                             ; CODE XREF: sub_4085C0+67F↑j
.text:00408DC0                                         ; sub_4085C0+6CF↑j
.text:00408DC0                 mov     dword ptr [ebp+14h], 0
.text:00408DC7                 mov     eax, 57h ; 'W'
.text:00408DCC                 jmp     loc_408717
.text:00408DD1 ; ---------------------------------------------------------------------------
.text:00408DD1
.text:00408DD1 loc_408DD1:                             ; CODE XREF: sub_4085C0+6C3↑j
.text:00408DD1                 mov     edi, [esp+5Ch+var_14]
.text:00408DD5                 test    edi, edi
.text:00408DD7                 jnz     short loc_408DEF
.text:00408DD9
.text:00408DD9 loc_408DD9:                             ; CODE XREF: sub_4085C0+865↓j
.text:00408DD9                 mov     edx, [ebp+14h]
.text:00408DDC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408DDF                 call    strlen
.text:00408DE4                 add     [ebp+14h], eax
.text:00408DE7                 inc     dword ptr [ebp+0]
.text:00408DEA                 jmp     loc_408918
.text:00408DEF ; ---------------------------------------------------------------------------
.text:00408DEF
.text:00408DEF loc_408DEF:                             ; CODE XREF: sub_4085C0+817↑j
.text:00408DEF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00408DF6                 call    ds:libintl_gettext
.text:00408DFC                 mov     ecx, [ebp+0]
.text:00408DFF                 mov     ebx, [esp+5Ch+arg_4]
.text:00408E03                 mov     edi, [ebx+ecx*4]
.text:00408E06                 mov     ecx, ds:_iob
.text:00408E0C                 mov     [esp+5Ch+var_50], edi
.text:00408E10                 mov     esi, [ebx]
.text:00408E12                 add     ecx, 40h ; '@'
.text:00408E15                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408E19                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00408E1C                 mov     [esp+5Ch+MaxCount], esi
.text:00408E20                 call    fprintf
.text:00408E25                 jmp     short loc_408DD9
.text:00408E27 ; ---------------------------------------------------------------------------
.text:00408E27
.text:00408E27 loc_408E27:                             ; CODE XREF: sub_4085C0+6A0↑j
.text:00408E27                 mov     edx, [ebp+14h]
.text:00408E2A                 mov     ebx, edi
.text:00408E2C                 mov     ecx, [esi]
.text:00408E2E                 sub     ebx, edx
.text:00408E30                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00408E33                 call    strlen
.text:00408E38                 cmp     ebx, eax
.text:00408E3A                 jz      short loc_408E62
.text:00408E3C                 mov     ebx, [esp+5Ch+var_2C]
.text:00408E40                 test    ebx, ebx
.text:00408E42                 jz      short loc_408E51
.text:00408E44                 mov     [esp+5Ch+var_34], 1
.text:00408E4C                 jmp     loc_408C66
.text:00408E51 ; ---------------------------------------------------------------------------
.text:00408E51
.text:00408E51 loc_408E51:                             ; CODE XREF: sub_4085C0+882↑j
.text:00408E51                 mov     [esp+5Ch+var_2C], esi
.text:00408E55                 mov     ecx, [esp+5Ch+var_3C]
.text:00408E59                 mov     [esp+5Ch+var_38], ecx
.text:00408E5D                 jmp     loc_408C66
.text:00408E62 ; ---------------------------------------------------------------------------
.text:00408E62
.text:00408E62 loc_408E62:                             ; CODE XREF: sub_4085C0+87A↑j
.text:00408E62                 mov     [esp+5Ch+var_2C], esi
.text:00408E66                 mov     eax, [esp+5Ch+var_3C]
.text:00408E6A                 mov     [esp+5Ch+var_30], 1
.text:00408E72                 mov     [esp+5Ch+var_38], eax
.text:00408E76                 jmp     loc_408C75
.text:00408E7B ; ---------------------------------------------------------------------------
.text:00408E7B
.text:00408E7B loc_408E7B:                             ; CODE XREF: sub_4085C0+646↑j
.text:00408E7B                 mov     edx, [ebp+0]
.text:00408E7E                 cmp     edx, [esp+5Ch+arg_0]
.text:00408E82                 jz      short loc_408E99
.text:00408E84                 mov     ebx, [esp+5Ch+arg_4]
.text:00408E88                 lea     esi, [edx+1]
.text:00408E8B                 mov     [ebp+0], esi
.text:00408E8E                 mov     edi, [ebx+edx*4]
.text:00408E91                 mov     [ebp+0Ch], edi
.text:00408E94                 jmp     loc_408C12
.text:00408E99 ; ---------------------------------------------------------------------------
.text:00408E99
.text:00408E99 loc_408E99:                             ; CODE XREF: sub_4085C0+8C2↑j
.text:00408E99                 mov     edi, [esp+5Ch+var_14]
.text:00408E9D                 test    edi, edi
.text:00408E9F                 jnz     short loc_408EBC
.text:00408EA1
.text:00408EA1 loc_408EA1:                             ; CODE XREF: sub_4085C0+92C↓j
.text:00408EA1                 mov     [ebp+8], esi
.text:00408EA4                 mov     ebp, [esp+5Ch+Str]
.text:00408EA8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00408EAC                 jz      short loc_408EB8
.text:00408EAE                 mov     bl, 3Fh ; '?'
.text:00408EB0
.text:00408EB0 loc_408EB0:                             ; CODE XREF: sub_4085C0+8FA↓j
.text:00408EB0                 movsx   eax, bl
.text:00408EB3                 jmp     loc_408717
.text:00408EB8 ; ---------------------------------------------------------------------------
.text:00408EB8
.text:00408EB8 loc_408EB8:                             ; CODE XREF: sub_4085C0+8EC↑j
.text:00408EB8                 mov     bl, 3Ah ; ':'
.text:00408EBA                 jmp     short loc_408EB0
.text:00408EBC ; ---------------------------------------------------------------------------
.text:00408EBC
.text:00408EBC loc_408EBC:                             ; CODE XREF: sub_4085C0+8DF↑j
.text:00408EBC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00408EC3                 call    ds:libintl_gettext
.text:00408EC9                 mov     [esp+5Ch+var_50], esi
.text:00408ECD                 mov     edx, [esp+5Ch+arg_4]
.text:00408ED1                 mov     ecx, ds:_iob
.text:00408ED7                 mov     ebx, [edx]
.text:00408ED9                 add     ecx, 40h ; '@'
.text:00408EDC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408EE0                 mov     [esp+5Ch+MaxCount], ebx
.text:00408EE4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00408EE7                 call    fprintf
.text:00408EEC                 jmp     short loc_408EA1
.text:00408EEC ; ---------------------------------------------------------------------------
.text:00408EEE                 align 10h
.text:00408EF0
.text:00408EF0 loc_408EF0:                             ; CODE XREF: sub_4085C0+54C↑j
.text:00408EF0                                         ; sub_4085C0+555↑j
.text:00408EF0                 mov     eax, [esp+5Ch+var_14]
.text:00408EF4                 test    eax, eax
.text:00408EF6                 jz      short loc_408F2F
.text:00408EF8                 mov     ebx, [ebp+1Ch]
.text:00408EFB                 test    ebx, ebx
.text:00408EFD                 jz      short loc_408F37
.text:00408EFF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00408F06
.text:00408F06 loc_408F06:                             ; CODE XREF: sub_4085C0+97E↓j
.text:00408F06                 call    ds:libintl_gettext
.text:00408F0C                 mov     [esp+5Ch+var_50], esi
.text:00408F10                 mov     ebx, [esp+5Ch+arg_4]
.text:00408F14                 mov     edx, ds:_iob
.text:00408F1A                 mov     esi, [ebx]
.text:00408F1C                 add     edx, 40h ; '@'
.text:00408F1F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408F23                 mov     [esp+5Ch+MaxCount], esi
.text:00408F27                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00408F2A                 call    fprintf
.text:00408F2F
.text:00408F2F loc_408F2F:                             ; CODE XREF: sub_4085C0+936↑j
.text:00408F2F                 mov     [ebp+8], edi
.text:00408F32                 jmp     loc_408918
.text:00408F37 ; ---------------------------------------------------------------------------
.text:00408F37
.text:00408F37 loc_408F37:                             ; CODE XREF: sub_4085C0+93D↑j
.text:00408F37                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00408F3E                 jmp     short loc_408F06
.text:00408F40 ; ---------------------------------------------------------------------------
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: sub_4085C0+26E↑j
.text:00408F40                 mov     edi, [esp+5Ch+var_14]
.text:00408F44                 test    edi, edi
.text:00408F46                 jnz     short loc_408F5E
.text:00408F48
.text:00408F48 loc_408F48:                             ; CODE XREF: sub_4085C0+9D4↓j
.text:00408F48                 mov     edx, [ebp+14h]
.text:00408F4B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408F4E                 call    strlen
.text:00408F53                 add     [ebp+14h], eax
.text:00408F56                 inc     dword ptr [ebp+0]
.text:00408F59                 jmp     loc_408A9E
.text:00408F5E ; ---------------------------------------------------------------------------
.text:00408F5E
.text:00408F5E loc_408F5E:                             ; CODE XREF: sub_4085C0+986↑j
.text:00408F5E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00408F65                 call    ds:libintl_gettext
.text:00408F6B                 mov     ebx, [ebp+0]
.text:00408F6E                 mov     edi, [esp+5Ch+arg_4]
.text:00408F72                 mov     ecx, [edi+ebx*4]
.text:00408F75                 mov     ebx, ds:_iob
.text:00408F7B                 mov     [esp+5Ch+var_50], ecx
.text:00408F7F                 mov     esi, [edi]
.text:00408F81                 add     ebx, 40h ; '@'
.text:00408F84                 mov     [esp+5Ch+Str2], eax ; Format
.text:00408F88                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00408F8B                 mov     [esp+5Ch+MaxCount], esi
.text:00408F8F                 call    fprintf
.text:00408F94                 jmp     short loc_408F48
.text:00408F96 ; ---------------------------------------------------------------------------
.text:00408F96
.text:00408F96 loc_408F96:                             ; CODE XREF: sub_4085C0+246↑j
.text:00408F96                 mov     ecx, [ebp+14h]
.text:00408F99                 mov     ebx, edi
.text:00408F9B                 mov     edx, [esi]
.text:00408F9D                 sub     ebx, ecx
.text:00408F9F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00408FA2                 call    strlen
.text:00408FA7                 cmp     ebx, eax
.text:00408FA9                 jz      short loc_409001
.text:00408FAB                 mov     ebx, [esp+5Ch+var_18]
.text:00408FAF                 test    ebx, ebx
.text:00408FB1                 jz      short loc_408FF0
.text:00408FB3                 mov     edx, [esp+5Ch+arg_14]
.text:00408FB7                 test    edx, edx
.text:00408FB9                 jnz     short loc_408FC7
.text:00408FBB                 mov     ecx, [esp+5Ch+var_18]
.text:00408FBF                 mov     ebx, [esi+4]
.text:00408FC2                 cmp     [ecx+4], ebx
.text:00408FC5                 jz      short loc_408FD4
.text:00408FC7
.text:00408FC7 loc_408FC7:                             ; CODE XREF: sub_4085C0+9F9↑j
.text:00408FC7                                         ; sub_4085C0+A1A↓j ...
.text:00408FC7                 mov     [esp+5Ch+var_20], 1
.text:00408FCF                 jmp     loc_40880C
.text:00408FD4 ; ---------------------------------------------------------------------------
.text:00408FD4
.text:00408FD4 loc_408FD4:                             ; CODE XREF: sub_4085C0+A05↑j
.text:00408FD4                 mov     edx, [esi+8]
.text:00408FD7                 cmp     [ecx+8], edx
.text:00408FDA                 jnz     short loc_408FC7
.text:00408FDC                 mov     ebx, [esi+0Ch]
.text:00408FDF                 cmp     [ecx+0Ch], ebx
.text:00408FE2                 jnz     short loc_408FC7
.text:00408FE4                 jmp     loc_40880C
.text:00408FE4 ; ---------------------------------------------------------------------------
.text:00408FE9                 align 10h
.text:00408FF0
.text:00408FF0 loc_408FF0:                             ; CODE XREF: sub_4085C0+9F1↑j
.text:00408FF0                 mov     [esp+5Ch+var_18], esi
.text:00408FF4                 mov     eax, [esp+5Ch+var_28]
.text:00408FF8                 mov     [esp+5Ch+var_24], eax
.text:00408FFC                 jmp     loc_40880C
.text:00409001 ; ---------------------------------------------------------------------------
.text:00409001
.text:00409001 loc_409001:                             ; CODE XREF: sub_4085C0+9E9↑j
.text:00409001                 mov     [esp+5Ch+var_18], esi
.text:00409005                 mov     ecx, [esp+5Ch+var_28]
.text:00409009                 mov     [esp+5Ch+var_1C], 1
.text:00409011                 mov     [esp+5Ch+var_24], ecx
.text:00409015                 jmp     loc_408820
.text:0040901A ; ---------------------------------------------------------------------------
.text:0040901A
.text:0040901A loc_40901A:                             ; CODE XREF: sub_4085C0+1BF↑j
.text:0040901A                 mov     eax, [esp+5Ch+Str]
.text:0040901E                 movsx   esi, dl
.text:00409021                 mov     [esp+5Ch+Str2], esi ; Val
.text:00409025                 mov     [esp+5Ch+Str1], eax ; Str
.text:00409028                 call    strchr
.text:0040902D                 test    eax, eax
.text:0040902F                 jnz     loc_408AE0
.text:00409035                 jmp     loc_408785
.text:0040903A ; ---------------------------------------------------------------------------
.text:0040903A
.text:0040903A loc_40903A:                             ; CODE XREF: sub_4085C0+17C↑j
.text:0040903A                 mov     ecx, 1
.text:0040903F                 jmp     loc_408742
.text:00409044 ; ---------------------------------------------------------------------------
.text:00409044
.text:00409044 loc_409044:                             ; CODE XREF: sub_4085C0+D4↑j
.text:00409044                                         ; sub_4085C0+130↑j
.text:00409044                 mov     eax, [ebp+20h]
.text:00409047                 cmp     eax, [ebp+24h]
.text:0040904A                 jz      loc_408720
.text:00409050                 mov     [ebp+0], eax
.text:00409053                 jmp     loc_408720
.text:00409058 ; ---------------------------------------------------------------------------
.text:00409058
.text:00409058 loc_409058:                             ; CODE XREF: sub_4085C0+FE↑j
.text:00409058                 mov     [ebp+20h], eax
.text:0040905B                 jmp     loc_4086E0
.text:00409060 ; ---------------------------------------------------------------------------
.text:00409060
.text:00409060 loc_409060:                             ; CODE XREF: sub_4085C0+CA↑j
.text:00409060                 mov     edx, [ebp+20h]
.text:00409063                 mov     eax, [ebp+24h]
.text:00409066                 cmp     edx, eax
.text:00409068                 jz      short loc_4090E0
.text:0040906A                 cmp     eax, ebx
.text:0040906C                 jz      short loc_409081
.text:0040906E                 mov     [esp+5Ch+Str2], ebp
.text:00409072                 mov     ebx, [esp+5Ch+arg_4]
.text:00409076                 mov     [esp+5Ch+Str1], ebx
.text:00409079                 call    sub_409270
.text:0040907E                 mov     ebx, [ebp+0]
.text:00409081
.text:00409081 loc_409081:                             ; CODE XREF: sub_4085C0+AAC↑j
.text:00409081                                         ; sub_4085C0+B22↓j ...
.text:00409081                 cmp     ebx, [esp+5Ch+arg_0]
.text:00409085                 jge     short loc_4090D0
.text:00409087                 mov     esi, [esp+5Ch+arg_4]
.text:0040908B                 mov     eax, [esi+ebx*4]
.text:0040908E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00409091                 jz      short loc_4090D8
.text:00409093                 lea     esi, [esi+0]
.text:00409099                 lea     edi, [edi+0]
.text:004090A0
.text:004090A0 loc_4090A0:                             ; CODE XREF: sub_4085C0+AFC↓j
.text:004090A0                                         ; sub_4085C0+B1C↓j
.text:004090A0                 lea     eax, [ebx+1]
.text:004090A3                 mov     ebx, eax
.text:004090A5                 mov     [ebp+0], eax
.text:004090A8                 cmp     eax, [esp+5Ch+arg_0]
.text:004090AC                 jge     short loc_4090D0
.text:004090AE                 mov     edi, [esp+5Ch+arg_4]
.text:004090B2                 mov     edx, [edi+eax*4]
.text:004090B5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004090B8                 jz      short loc_4090C0
.text:004090BA
.text:004090BA loc_4090BA:                             ; CODE XREF: sub_4085C0+B04↓j
.text:004090BA                 mov     ebx, eax
.text:004090BC                 jmp     short loc_4090A0
.text:004090BC ; ---------------------------------------------------------------------------
.text:004090BE                 align 10h
.text:004090C0
.text:004090C0 loc_4090C0:                             ; CODE XREF: sub_4085C0+AF8↑j
.text:004090C0                 cmp     byte ptr [edx+1], 0
.text:004090C4                 jz      short loc_4090BA
.text:004090C6                 lea     esi, [esi+0]
.text:004090C9                 lea     edi, [edi+0]
.text:004090D0
.text:004090D0 loc_4090D0:                             ; CODE XREF: sub_4085C0+AC5↑j
.text:004090D0                                         ; sub_4085C0+AEC↑j ...
.text:004090D0                 mov     [ebp+24h], ebx
.text:004090D3                 jmp     loc_408690
.text:004090D8 ; ---------------------------------------------------------------------------
.text:004090D8
.text:004090D8 loc_4090D8:                             ; CODE XREF: sub_4085C0+AD1↑j
.text:004090D8                 cmp     byte ptr [eax+1], 0
.text:004090DC                 jz      short loc_4090A0
.text:004090DE                 jmp     short loc_4090D0
.text:004090E0 ; ---------------------------------------------------------------------------
.text:004090E0
.text:004090E0 loc_4090E0:                             ; CODE XREF: sub_4085C0+AA8↑j
.text:004090E0                 cmp     edx, ebx
.text:004090E2                 jz      short loc_409081
.text:004090E4                 mov     [ebp+20h], ebx
.text:004090E7                 jmp     short loc_409081
.text:004090E9 ; ---------------------------------------------------------------------------
.text:004090E9
.text:004090E9 loc_4090E9:                             ; CODE XREF: sub_4085C0+88↑j
.text:004090E9                 mov     dword ptr [ebp+18h], 0
.text:004090F0                 mov     esi, [esp+5Ch+Str]
.text:004090F4
.text:004090F4 loc_4090F4:                             ; CODE XREF: sub_4085C0+B49↓j
.text:004090F4                 inc     esi
.text:004090F5                 jmp     loc_408658
.text:004090F5 ; ---------------------------------------------------------------------------
.text:004090FA                 align 10h
.text:00409100
.text:00409100 loc_409100:                             ; CODE XREF: sub_4085C0+80↑j
.text:00409100                 mov     dword ptr [ebp+18h], 2
.text:00409107                 mov     esi, ecx
.text:00409109                 jmp     short loc_4090F4
.text:00409109 ; ---------------------------------------------------------------------------
.text:0040910B                 align 10h
.text:00409110
.text:00409110 loc_409110:                             ; CODE XREF: sub_4085C0+69↑j
.text:00409110                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00409117                 call    getenv
.text:0040911C                 test    eax, eax
.text:0040911E                 jz      loc_408634
.text:00409124                 jmp     loc_40862F
.text:00409124 ; ---------------------------------------------------------------------------
.text:00409129                 align 10h
.text:00409130
.text:00409130 loc_409130:                             ; CODE XREF: sub_4085C0+3F↑j
.text:00409130                 mov     dword ptr [ebp+0], 1
.text:00409137                 mov     ebx, 1
.text:0040913C                 jmp     loc_408610
.text:0040913C sub_4085C0      endp
.text:0040913C
.text:00409141 ; ---------------------------------------------------------------------------
.text:00409141                 jmp     short sub_409150
.text:00409141 ; ---------------------------------------------------------------------------
.text:00409143                 align 10h
.text:00409150
.text:00409150 ; =============== S U B R O U T I N E =======================================
.text:00409150
.text:00409150
.text:00409150 ; int __cdecl sub_409150(int, int, char *, int, int, int, int)
.text:00409150 sub_409150      proc near               ; CODE XREF: .text:00409141↑j
.text:00409150                                         ; sub_40AAB0+3A↓p ...
.text:00409150
.text:00409150 var_2C          = dword ptr -2Ch
.text:00409150 var_28          = dword ptr -28h
.text:00409150 Str             = dword ptr -24h
.text:00409150 var_20          = dword ptr -20h
.text:00409150 var_1C          = dword ptr -1Ch
.text:00409150 var_18          = dword ptr -18h
.text:00409150 var_14          = dword ptr -14h
.text:00409150 var_10          = dword ptr -10h
.text:00409150 arg_0           = dword ptr  4
.text:00409150 arg_4           = dword ptr  8
.text:00409150 arg_8           = dword ptr  0Ch
.text:00409150 arg_C           = dword ptr  10h
.text:00409150 arg_10          = dword ptr  14h
.text:00409150 arg_14          = dword ptr  18h
.text:00409150 arg_18          = dword ptr  1Ch
.text:00409150
.text:00409150                 sub     esp, 2Ch
.text:00409153                 mov     edx, dword_420020
.text:00409159                 mov     [esp+2Ch+var_10], offset dword_4210B0 ; int
.text:00409161                 mov     ecx, dword_420024
.text:00409167                 mov     ds:dword_4210B0, edx
.text:0040916D                 mov     edx, [esp+2Ch+arg_18]
.text:00409171                 mov     ds:dword_4210B4, ecx
.text:00409177                 mov     ecx, [esp+2Ch+arg_14]
.text:0040917B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040917F                 mov     edx, [esp+2Ch+arg_10]
.text:00409183                 mov     [esp+2Ch+var_18], ecx ; int
.text:00409187                 mov     ecx, [esp+2Ch+arg_C]
.text:0040918B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040918F                 mov     edx, [esp+2Ch+arg_8]
.text:00409193                 mov     [esp+2Ch+var_20], ecx ; int
.text:00409197                 mov     ecx, [esp+2Ch+arg_4]
.text:0040919B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040919F                 mov     edx, [esp+2Ch+arg_0]
.text:004091A3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004091A7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004091AA                 call    sub_4085C0
.text:004091AF                 mov     ecx, ds:dword_4210B0
.text:004091B5                 mov     dword_420020, ecx
.text:004091BB                 mov     ecx, ds:dword_4210BC
.text:004091C1                 mov     ds:dword_421CA0, ecx
.text:004091C7                 mov     ecx, ds:dword_4210B8
.text:004091CD                 mov     dword_420028, ecx
.text:004091D3                 add     esp, 2Ch
.text:004091D6                 retn
.text:004091D6 sub_409150      endp
.text:004091D6
.text:004091D6 ; ---------------------------------------------------------------------------
.text:004091D7                 align 10h
.text:004091E0                 sub     esp, 2Ch
.text:004091E3                 mov     edx, dword_420020
.text:004091E9                 mov     dword ptr [esp+1Ch], offset dword_4210B0
.text:004091F1                 mov     ecx, dword_420024
.text:004091F7                 mov     dword ptr [esp+18h], 1
.text:004091FF                 mov     ds:dword_4210B0, edx
.text:00409205                 mov     edx, [esp+38h]
.text:00409209                 mov     ds:dword_4210B4, ecx
.text:0040920F                 mov     ecx, [esp+34h]
.text:00409213                 mov     [esp+8], edx
.text:00409217                 mov     edx, [esp+30h]
.text:0040921B                 mov     [esp+4], ecx
.text:0040921F                 mov     dword ptr [esp+14h], 0
.text:00409227                 mov     dword ptr [esp+10h], 0
.text:0040922F                 mov     dword ptr [esp+0Ch], 0
.text:00409237                 mov     [esp], edx
.text:0040923A                 call    sub_4085C0
.text:0040923F                 mov     ecx, ds:dword_4210B0
.text:00409245                 mov     dword_420020, ecx
.text:0040924B                 mov     ecx, ds:dword_4210BC
.text:00409251                 mov     ds:dword_421CA0, ecx
.text:00409257                 mov     ecx, ds:dword_4210B8
.text:0040925D                 mov     dword_420028, ecx
.text:00409263                 add     esp, 2Ch
.text:00409266                 retn
.text:00409266 ; ---------------------------------------------------------------------------
.text:00409267                 align 10h
.text:00409270
.text:00409270 ; =============== S U B R O U T I N E =======================================
.text:00409270
.text:00409270
.text:00409270 sub_409270      proc near               ; CODE XREF: sub_4085C0+113↑p
.text:00409270                                         ; sub_4085C0+AB9↑p
.text:00409270
.text:00409270 var_2C          = dword ptr -2Ch
.text:00409270 var_28          = dword ptr -28h
.text:00409270 var_24          = dword ptr -24h
.text:00409270 var_20          = dword ptr -20h
.text:00409270 var_1C          = dword ptr -1Ch
.text:00409270 var_18          = dword ptr -18h
.text:00409270 var_14          = dword ptr -14h
.text:00409270 arg_0           = dword ptr  4
.text:00409270 arg_4           = dword ptr  8
.text:00409270
.text:00409270                 push    ebp
.text:00409271                 push    edi
.text:00409272                 push    esi
.text:00409273                 push    ebx
.text:00409274                 sub     esp, 1Ch
.text:00409277                 mov     ecx, [esp+2Ch+arg_4]
.text:0040927B                 mov     eax, [esp+2Ch+arg_4]
.text:0040927F                 mov     ebx, [esp+2Ch+arg_4]
.text:00409283                 mov     edx, [ecx+20h]
.text:00409286                 mov     edi, [esp+2Ch+arg_0]
.text:0040928A                 mov     ecx, [ebx]
.text:0040928C                 mov     [esp+2Ch+var_2C], edx
.text:0040928F                 mov     [esp+2Ch+var_14], edx
.text:00409293                 mov     edx, [eax+24h]
.text:00409296                 mov     [esp+2Ch+var_28], ecx
.text:0040929A                 mov     [esp+2Ch+var_1C], ecx
.text:0040929E                 cmp     ecx, edx
.text:004092A0                 mov     [esp+2Ch+var_18], edx
.text:004092A4                 jle     short loc_409320
.text:004092A6                 mov     esi, [esp+2Ch+var_2C]
.text:004092A9                 cmp     edx, esi
.text:004092AB                 jle     short loc_409320
.text:004092AD                 lea     esi, [esi+0]
.text:004092B0
.text:004092B0 loc_4092B0:                             ; CODE XREF: sub_409270+A1↓j
.text:004092B0                 mov     ebx, [esp+2Ch+var_1C]
.text:004092B4                 mov     edx, [esp+2Ch+var_18]
.text:004092B8                 mov     ebp, [esp+2Ch+var_18]
.text:004092BC                 mov     eax, [esp+2Ch+var_14]
.text:004092C0                 sub     ebx, edx
.text:004092C2                 mov     [esp+2Ch+var_20], ebx
.text:004092C6                 sub     ebp, eax
.text:004092C8                 cmp     ebx, ebp
.text:004092CA                 jle     short loc_409345
.text:004092CC                 xor     esi, esi
.text:004092CE                 cmp     esi, ebp
.text:004092D0                 jge     short loc_4092FD
.text:004092D2                 mov     ecx, [esp+2Ch+var_1C]
.text:004092D6                 sub     ecx, ebp
.text:004092D8                 mov     [esp+2Ch+var_24], ecx
.text:004092DC                 lea     esi, [esi+0]
.text:004092E0
.text:004092E0 loc_4092E0:                             ; CODE XREF: sub_409270+8B↓j
.text:004092E0                 mov     ecx, [esp+2Ch+var_14]
.text:004092E4                 mov     edx, [esp+2Ch+var_24]
.text:004092E8                 add     ecx, esi
.text:004092EA                 add     edx, esi
.text:004092EC                 mov     ebx, [edi+ecx*4]
.text:004092EF                 mov     eax, [edi+edx*4]
.text:004092F2                 inc     esi
.text:004092F3                 cmp     esi, ebp
.text:004092F5                 mov     [edi+ecx*4], eax
.text:004092F8                 mov     [edi+edx*4], ebx
.text:004092FB                 jl      short loc_4092E0
.text:004092FD
.text:004092FD loc_4092FD:                             ; CODE XREF: sub_409270+60↑j
.text:004092FD                 sub     [esp+2Ch+var_1C], ebp
.text:00409301
.text:00409301 loc_409301:                             ; CODE XREF: sub_409270+107↓j
.text:00409301                 mov     eax, [esp+2Ch+var_18]
.text:00409305                 cmp     [esp+2Ch+var_1C], eax
.text:00409309                 jle     short loc_409320
.text:0040930B                 mov     ebp, [esp+2Ch+var_14]
.text:0040930F                 cmp     eax, ebp
.text:00409311                 jg      short loc_4092B0
.text:00409313                 lea     esi, [esi+0]
.text:00409319                 lea     edi, [edi+0]
.text:00409320
.text:00409320 loc_409320:                             ; CODE XREF: sub_409270+34↑j
.text:00409320                                         ; sub_409270+3B↑j ...
.text:00409320                 mov     esi, [esp+2Ch+var_28]
.text:00409324                 mov     ecx, [esp+2Ch+var_18]
.text:00409328                 mov     eax, [esp+2Ch+var_2C]
.text:0040932B                 mov     edi, [esp+2Ch+arg_4]
.text:0040932F                 mov     edx, [esp+2Ch+var_28]
.text:00409333                 sub     esi, ecx
.text:00409335                 add     esi, eax
.text:00409337                 mov     [edi+20h], esi
.text:0040933A                 mov     [edi+24h], edx
.text:0040933D                 add     esp, 1Ch
.text:00409340                 pop     ebx
.text:00409341                 pop     esi
.text:00409342                 pop     edi
.text:00409343                 pop     ebp
.text:00409344                 retn
.text:00409345 ; ---------------------------------------------------------------------------
.text:00409345
.text:00409345 loc_409345:                             ; CODE XREF: sub_409270+5A↑j
.text:00409345                 xor     esi, esi
.text:00409347                 cmp     esi, [esp+2Ch+var_20]
.text:0040934B                 jge     short loc_40936F
.text:0040934D                 lea     esi, [esi+0]
.text:00409350
.text:00409350 loc_409350:                             ; CODE XREF: sub_409270+FD↓j
.text:00409350                 mov     ebx, [esp+2Ch+var_14]
.text:00409354                 mov     ebp, [esp+2Ch+var_18]
.text:00409358                 add     ebx, esi
.text:0040935A                 add     ebp, esi
.text:0040935C                 mov     edx, [edi+ebx*4]
.text:0040935F                 inc     esi
.text:00409360                 cmp     esi, [esp+2Ch+var_20]
.text:00409364                 mov     ecx, [edi+ebp*4]
.text:00409367                 mov     [edi+ebx*4], ecx
.text:0040936A                 mov     [edi+ebp*4], edx
.text:0040936D                 jl      short loc_409350
.text:0040936F
.text:0040936F loc_40936F:                             ; CODE XREF: sub_409270+DB↑j
.text:0040936F                 mov     esi, [esp+2Ch+var_20]
.text:00409373                 add     [esp+2Ch+var_14], esi
.text:00409377                 jmp     short loc_409301
.text:00409377 sub_409270      endp
.text:00409377
.text:00409377 ; ---------------------------------------------------------------------------
.text:00409379                 db 17h dup(90h)
.text:00409390
.text:00409390 ; =============== S U B R O U T I N E =======================================
.text:00409390
.text:00409390
.text:00409390 sub_409390      proc near               ; DATA XREF: .data:Src↓o
.text:00409390                 jle     short $+2
.text:00409392
.text:00409392 loc_409392:                             ; CODE XREF: sub_409390↑j
.text:00409392                 lea     esi, [esi+0]
.text:00409399                 lea     edi, [edi+0]
.text:00409399 sub_409390      endp
.text:00409399
.text:004093A0
.text:004093A0 ; =============== S U B R O U T I N E =======================================
.text:004093A0
.text:004093A0
.text:004093A0 ; int __cdecl sub_4093A0(char *, int)
.text:004093A0 sub_4093A0      proc near               ; CODE XREF: sub_403910+1520↑p
.text:004093A0
.text:004093A0 Str             = dword ptr -2Ch
.text:004093A0 Src             = dword ptr -28h
.text:004093A0 Size            = dword ptr -24h
.text:004093A0 var_14          = dword ptr -14h
.text:004093A0 arg_0           = dword ptr  4
.text:004093A0 arg_4           = dword ptr  8
.text:004093A0
.text:004093A0                 push    ebp
.text:004093A1                 push    edi
.text:004093A2                 push    esi
.text:004093A3                 push    ebx
.text:004093A4                 sub     esp, 1Ch
.text:004093A7                 mov     ebp, [esp+2Ch+arg_0]
.text:004093AB                 mov     [esp+2Ch+Str], ebp ; Str
.text:004093AE                 call    strlen
.text:004093B3                 mov     edx, Src
.text:004093B9                 mov     ebx, eax
.text:004093BB                 mov     [esp+2Ch+Str], edx ; Str
.text:004093BE                 call    strlen
.text:004093C3                 lea     esi, [eax+1]
.text:004093C6                 cmp     esi, 8
.text:004093C9                 mov     eax, esi
.text:004093CB                 ja      short loc_4093D2
.text:004093CD                 mov     eax, 9
.text:004093D2
.text:004093D2 loc_4093D2:                             ; CODE XREF: sub_4093A0+2B↑j
.text:004093D2                 lea     edi, [eax+ebx+1]
.text:004093D6                 mov     [esp+2Ch+Str], edi ; size_t
.text:004093D9                 call    sub_40A320
.text:004093DE                 mov     [esp+2Ch+var_14], eax
.text:004093E2                 lea     ecx, [ebx+1]
.text:004093E5                 mov     [esp+2Ch+Size], ecx ; Size
.text:004093E9                 mov     [esp+2Ch+Src], ebp ; Src
.text:004093ED                 mov     [esp+2Ch+Str], eax ; void *
.text:004093F0                 call    memcpy
.text:004093F5                 cmp     [esp+2Ch+arg_4], 1
.text:004093FA                 jz      short loc_409420
.text:004093FC                 mov     [esp+2Ch+Size], ebx
.text:00409400                 lea     edx, [esp+2Ch+var_14]
.text:00409404                 mov     [esp+2Ch+Src], edi
.text:00409408                 mov     [esp+2Ch+Str], edx
.text:0040940B                 call    sub_4096F0
.text:00409410                 cmp     eax, 1
.text:00409413                 jz      short loc_40943C
.text:00409415                 cmp     eax, 1
.text:00409418                 jb      short loc_409454
.text:0040941A                 cmp     eax, 2
.text:0040941D                 jz      short loc_409460
.text:0040941F                 nop
.text:00409420
.text:00409420 loc_409420:                             ; CODE XREF: sub_4093A0+5A↑j
.text:00409420                                         ; sub_4093A0+C7↓j
.text:00409420                 mov     [esp+2Ch+Size], esi ; Size
.text:00409424                 mov     edi, [esp+2Ch+var_14]
.text:00409428                 mov     esi, Src
.text:0040942E                 add     edi, ebx
.text:00409430                 mov     [esp+2Ch+Src], esi ; Src
.text:00409434                 mov     [esp+2Ch+Str], edi ; void *
.text:00409437                 call    memcpy
.text:0040943C
.text:0040943C loc_40943C:                             ; CODE XREF: sub_4093A0+73↑j
.text:0040943C                                         ; sub_4093A0+C5↓j
.text:0040943C                 mov     [esp+2Ch+Src], ebx
.text:00409440                 mov     ebx, [esp+2Ch+var_14]
.text:00409444                 mov     [esp+2Ch+Size], 7Eh ; '~'
.text:0040944C                 mov     [esp+2Ch+Str], ebx
.text:0040944F                 call    sub_409630
.text:00409454
.text:00409454 loc_409454:                             ; CODE XREF: sub_4093A0+78↑j
.text:00409454                 mov     eax, [esp+2Ch+var_14]
.text:00409458                 add     esp, 1Ch
.text:0040945B                 pop     ebx
.text:0040945C                 pop     esi
.text:0040945D                 pop     edi
.text:0040945E                 pop     ebp
.text:0040945F                 retn
.text:00409460 ; ---------------------------------------------------------------------------
.text:00409460
.text:00409460 loc_409460:                             ; CODE XREF: sub_4093A0+7D↑j
.text:00409460                 cmp     [esp+2Ch+arg_4], 2
.text:00409465                 jnz     short loc_40943C
.text:00409467                 jmp     short loc_409420
.text:00409467 sub_4093A0      endp
.text:00409467
.text:00409467 ; ---------------------------------------------------------------------------
.text:00409469 aNone           db 'none',0             ; DATA XREF: .text:off_4094B0↓o
.text:0040946E aOff            db 'off',0              ; DATA XREF: .text:004094B4↓o
.text:00409472 aSimple         db 'simple',0           ; DATA XREF: .text:004094B8↓o
.text:00409479 aNever          db 'never',0            ; DATA XREF: .text:004094BC↓o
.text:0040947F aExisting       db 'existing',0         ; DATA XREF: .text:004094C0↓o
.text:00409488 aNil            db 'nil',0              ; DATA XREF: .text:004094C4↓o
.text:0040948C aNumbered       db 'numbered',0         ; DATA XREF: .text:004094C8↓o
.text:00409495 aT              db 't',0                ; DATA XREF: .text:004094CC↓o
.text:00409497                 db 19h dup(90h)
.text:004094B0 off_4094B0      dd offset aNone         ; DATA XREF: .text:00409552↓o
.text:004094B0                                         ; sub_409590+46↓o ...
.text:004094B0                                         ; "none"
.text:004094B4                 dd offset aOff          ; "off"
.text:004094B8                 dd offset aSimple       ; "simple"
.text:004094BC                 dd offset aNever        ; "never"
.text:004094C0                 dd offset aExisting     ; "existing"
.text:004094C4                 dd offset aNil          ; "nil"
.text:004094C8                 dd offset aNumbered     ; "numbered"
.text:004094CC                 dd offset aT            ; "t"
.text:004094D0                 dd 0
.text:004094D4                 db 1Ch dup(90h)
.text:004094F0 dword_4094F0    dd 0                    ; DATA XREF: .text:0040954A↓o
.text:004094F0                                         ; .text:00409562↓r ...
.text:004094F4                 align 8
.text:004094F8                 dd 2 dup(1), 2 dup(2), 2 dup(3), 8B1CEC83h, 85242454h
.text:004094F8                 dd 800574D2h, 1075003Ah, 2B8h
.text:00409524                 db 0
.text:00409525 ; ---------------------------------------------------------------------------
.text:00409525
.text:00409525 loc_409525:                             ; CODE XREF: .text:00409569↓j
.text:00409525                 add     esp, 1Ch
.text:00409528                 retn
.text:00409528 ; ---------------------------------------------------------------------------
.text:00409529                 align 10h
.text:00409530                 mov     [esp+4], edx
.text:00409534                 mov     ecx, off_420050
.text:0040953A                 mov     edx, [esp+20h]
.text:0040953E                 mov     dword ptr [esp+10h], 4
.text:00409546                 mov     [esp+14h], ecx
.text:0040954A                 mov     dword ptr [esp+0Ch], offset dword_4094F0
.text:00409552                 mov     dword ptr [esp+8], offset off_4094B0 ; "none"
.text:0040955A                 mov     [esp], edx
.text:0040955D                 call    sub_40C460
.text:00409562                 mov     eax, ds:dword_4094F0[eax*4]
.text:00409569                 jmp     short loc_409525
.text:00409569 ; ---------------------------------------------------------------------------
.text:0040956B ; const char aVersionControl[]
.text:0040956B aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: sub_409590:loc_4095A0↓o
.text:0040957B ; const char aVersionControl_0[]
.text:0040957B aVersionControl_0 db '$VERSION_CONTROL',0
.text:0040957B                                         ; DATA XREF: sub_409590+56↓o
.text:0040958C                 align 10h
.text:00409590
.text:00409590 ; =============== S U B R O U T I N E =======================================
.text:00409590
.text:00409590
.text:00409590 sub_409590      proc near               ; CODE XREF: sub_401700+9F0↑p
.text:00409590
.text:00409590 VarName         = dword ptr -1Ch
.text:00409590 var_18          = dword ptr -18h
.text:00409590 var_14          = dword ptr -14h
.text:00409590 var_10          = dword ptr -10h
.text:00409590 var_C           = dword ptr -0Ch
.text:00409590 var_8           = dword ptr -8
.text:00409590 arg_0           = dword ptr  4
.text:00409590 arg_4           = dword ptr  8
.text:00409590
.text:00409590                 sub     esp, 1Ch
.text:00409593                 mov     edx, [esp+1Ch+arg_4]
.text:00409597                 test    edx, edx
.text:00409599                 jz      short loc_4095A0
.text:0040959B                 cmp     byte ptr [edx], 0
.text:0040959E                 jnz     short loc_409600
.text:004095A0
.text:004095A0 loc_4095A0:                             ; CODE XREF: sub_409590+9↑j
.text:004095A0                 mov     [esp+1Ch+VarName], offset aVersionControl ; "VERSION_CONTROL"
.text:004095A7                 call    getenv
.text:004095AC                 test    eax, eax
.text:004095AE                 jz      short loc_4095B5
.text:004095B0                 cmp     byte ptr [eax], 0
.text:004095B3                 jnz     short loc_4095C0
.text:004095B5
.text:004095B5 loc_4095B5:                             ; CODE XREF: sub_409590+1E↑j
.text:004095B5                 mov     eax, 2
.text:004095BA
.text:004095BA loc_4095BA:                             ; CODE XREF: sub_409590+69↓j
.text:004095BA                 add     esp, 1Ch
.text:004095BD                 retn
.text:004095BD ; ---------------------------------------------------------------------------
.text:004095BE                 align 10h
.text:004095C0
.text:004095C0 loc_4095C0:                             ; CODE XREF: sub_409590+23↑j
.text:004095C0                 mov     [esp+1Ch+var_C], 4 ; int
.text:004095C8                 mov     ecx, off_420050
.text:004095CE                 mov     [esp+1Ch+var_10], offset dword_4094F0 ; int
.text:004095D6                 mov     [esp+1Ch+var_14], offset off_4094B0 ; int
.text:004095DE                 mov     [esp+1Ch+var_8], ecx ; int
.text:004095E2                 mov     [esp+1Ch+var_18], eax ; char *
.text:004095E6                 mov     [esp+1Ch+VarName], offset aVersionControl_0 ; "$VERSION_CONTROL"
.text:004095ED
.text:004095ED loc_4095ED:                             ; CODE XREF: sub_409590+9D↓j
.text:004095ED                 call    sub_40C460
.text:004095F2                 mov     eax, ds:dword_4094F0[eax*4]
.text:004095F9                 jmp     short loc_4095BA
.text:004095F9 ; ---------------------------------------------------------------------------
.text:004095FB                 align 10h
.text:00409600
.text:00409600 loc_409600:                             ; CODE XREF: sub_409590+E↑j
.text:00409600                 mov     [esp+1Ch+var_18], edx
.text:00409604                 mov     ecx, off_420050
.text:0040960A                 mov     edx, [esp+1Ch+arg_0]
.text:0040960E                 mov     [esp+1Ch+var_C], 4
.text:00409616                 mov     [esp+1Ch+var_8], ecx
.text:0040961A                 mov     [esp+1Ch+var_10], offset dword_4094F0
.text:00409622                 mov     [esp+1Ch+var_14], offset off_4094B0 ; "none"
.text:0040962A                 mov     [esp+1Ch+VarName], edx
.text:0040962D                 jmp     short loc_4095ED
.text:0040962D sub_409590      endp
.text:0040962D
.text:0040962D ; ---------------------------------------------------------------------------
.text:0040962F                 align 10h
.text:00409630
.text:00409630 ; =============== S U B R O U T I N E =======================================
.text:00409630
.text:00409630
.text:00409630 sub_409630      proc near               ; CODE XREF: sub_4093A0+AF↑p
.text:00409630
.text:00409630 var_1C          = dword ptr -1Ch
.text:00409630 var_18          = dword ptr -18h
.text:00409630 var_14          = dword ptr -14h
.text:00409630 var_10          = dword ptr -10h
.text:00409630 var_C           = dword ptr -0Ch
.text:00409630 var_8           = dword ptr -8
.text:00409630 var_4           = dword ptr -4
.text:00409630 arg_0           = dword ptr  4
.text:00409630 arg_4           = dword ptr  8
.text:00409630 arg_8           = byte ptr  0Ch
.text:00409630
.text:00409630                 sub     esp, 1Ch
.text:00409633                 movzx   edx, [esp+1Ch+arg_8]
.text:00409638                 mov     [esp+1Ch+var_10], ebx
.text:0040963C                 mov     [esp+1Ch+var_C], esi
.text:00409640                 mov     [esp+1Ch+var_8], edi
.text:00409644                 mov     edi, 0FFh
.text:00409649                 mov     byte ptr [esp+1Ch+var_14+3], dl
.text:0040964D                 mov     edx, [esp+1Ch+arg_0]
.text:00409651                 mov     [esp+1Ch+var_4], ebp
.text:00409655                 mov     [esp+1Ch+var_1C], edx
.text:00409658                 call    sub_40AD60
.text:0040965D                 mov     [esp+1Ch+var_1C], eax ; char *
.text:00409660                 mov     esi, eax
.text:00409662                 call    sub_40ADC0
.text:00409667                 cmp     eax, 0Eh
.text:0040966A                 mov     ebx, eax
.text:0040966C                 ja      short loc_4096A6
.text:0040966E
.text:0040966E loc_40966E:                             ; CODE XREF: sub_409630+B1↓j
.text:0040966E                 cmp     edi, ebx
.text:00409670                 jnb     short loc_409692
.text:00409672                 mov     ebx, [esp+1Ch+arg_0]
.text:00409676                 mov     ebp, [esp+1Ch+arg_4]
.text:0040967A                 add     ebx, ebp
.text:0040967C                 sub     ebx, esi
.text:0040967E                 cmp     edi, ebx
.text:00409680                 ja      short loc_409685
.text:00409682                 lea     ebx, [edi-1]
.text:00409685
.text:00409685 loc_409685:                             ; CODE XREF: sub_409630+50↑j
.text:00409685                 movzx   ecx, byte ptr [esp+1Ch+var_14+3]
.text:0040968A                 mov     byte ptr [ebx+esi+1], 0
.text:0040968F                 mov     [ebx+esi], cl
.text:00409692
.text:00409692 loc_409692:                             ; CODE XREF: sub_409630+40↑j
.text:00409692                 mov     ebx, [esp+1Ch+var_10]
.text:00409696                 mov     esi, [esp+1Ch+var_C]
.text:0040969A                 mov     edi, [esp+1Ch+var_8]
.text:0040969E                 mov     ebp, [esp+1Ch+var_4]
.text:004096A2                 add     esp, 1Ch
.text:004096A5                 retn
.text:004096A6 ; ---------------------------------------------------------------------------
.text:004096A6
.text:004096A6 loc_4096A6:                             ; CODE XREF: sub_409630+3C↑j
.text:004096A6                 movzx   ebp, word ptr [esi]
.text:004096A9                 mov     word ptr [esp+1Ch+var_14], bp
.text:004096AE                 mov     word ptr [esi], 2Eh ; '.'
.text:004096B3                 call    _errno
.text:004096B8                 mov     dword ptr [eax], 0
.text:004096BE                 mov     ecx, [esp+1Ch+arg_0]
.text:004096C2                 mov     [esp+1Ch+var_18], 3
.text:004096CA                 mov     [esp+1Ch+var_1C], ecx
.text:004096CD                 call    sub_419AC0
.text:004096D2                 test    eax, eax
.text:004096D4                 mov     ebp, eax
.text:004096D6                 js      short loc_4096E3
.text:004096D8
.text:004096D8 loc_4096D8:                             ; CODE XREF: sub_409630+BE↓j
.text:004096D8                 mov     edi, ebp
.text:004096DA
.text:004096DA loc_4096DA:                             ; CODE XREF: sub_409630+BC↓j
.text:004096DA                 mov     edx, [esp+1Ch+var_14]
.text:004096DE                 mov     [esi], dx
.text:004096E1                 jmp     short loc_40966E
.text:004096E3 ; ---------------------------------------------------------------------------
.text:004096E3
.text:004096E3 loc_4096E3:                             ; CODE XREF: sub_409630+A6↑j
.text:004096E3                 call    _errno
.text:004096E8                 mov     ecx, [eax]
.text:004096EA                 test    ecx, ecx
.text:004096EC                 jnz     short loc_4096DA
.text:004096EE                 jmp     short loc_4096D8
.text:004096EE sub_409630      endp
.text:004096EE
.text:004096F0
.text:004096F0 ; =============== S U B R O U T I N E =======================================
.text:004096F0
.text:004096F0
.text:004096F0 sub_4096F0      proc near               ; CODE XREF: sub_4093A0+6B↑p
.text:004096F0
.text:004096F0 var_3C          = dword ptr -3Ch
.text:004096F0 Src             = dword ptr -38h
.text:004096F0 Size            = dword ptr -34h
.text:004096F0 var_29          = byte ptr -29h
.text:004096F0 var_28          = dword ptr -28h
.text:004096F0 var_24          = dword ptr -24h
.text:004096F0 var_20          = dword ptr -20h
.text:004096F0 var_1C          = dword ptr -1Ch
.text:004096F0 var_18          = dword ptr -18h
.text:004096F0 var_14          = dword ptr -14h
.text:004096F0 arg_0           = dword ptr  4
.text:004096F0 arg_4           = dword ptr  8
.text:004096F0 arg_8           = dword ptr  0Ch
.text:004096F0
.text:004096F0                 push    ebp
.text:004096F1                 push    edi
.text:004096F2                 push    esi
.text:004096F3                 push    ebx
.text:004096F4                 sub     esp, 2Ch
.text:004096F7                 mov     edx, [esp+3Ch+arg_0]
.text:004096FB                 mov     [esp+3Ch+var_14], 2
.text:00409703                 mov     [esp+3Ch+var_20], 1
.text:0040970B                 mov     ebp, [edx]
.text:0040970D                 mov     [esp+3Ch+var_1C], ebp
.text:00409711                 mov     [esp+3Ch+var_3C], ebp
.text:00409714                 call    sub_40AD60
.text:00409719                 mov     [esp+3Ch+var_3C], eax ; char *
.text:0040971C                 mov     esi, [esp+3Ch+var_1C]
.text:00409720                 mov     ecx, eax
.text:00409722                 mov     edi, eax
.text:00409724                 sub     ecx, esi
.text:00409726                 mov     [esp+3Ch+var_24], ecx
.text:0040972A                 call    sub_40ADC0
.text:0040972F                 mov     [esp+3Ch+var_28], eax
.text:00409733                 movzx   ebx, word ptr [edi]
.text:00409736                 mov     word ptr [edi], 2Eh ; '.'
.text:0040973B                 mov     eax, [esp+3Ch+var_1C]
.text:0040973F                 mov     [esp+3Ch+var_3C], eax ; LPCSTR
.text:00409742                 call    sub_419B90
.text:00409747                 mov     [esp+3Ch+var_18], eax
.text:0040974B                 mov     eax, 2
.text:00409750                 mov     [edi], bx
.text:00409753                 mov     edx, [esp+3Ch+var_28]
.text:00409757                 mov     dword ptr [edx+edi], 7E317E2Eh
.text:0040975E                 mov     byte ptr [edx+edi+4], 0
.text:00409763                 mov     edx, [esp+3Ch+var_18]
.text:00409767                 test    edx, edx
.text:00409769                 jz      loc_40996C
.text:0040976F                 nop
.text:00409770
.text:00409770 loc_409770:                             ; CODE XREF: sub_4096F0+9F↓j
.text:00409770                                         ; sub_4096F0+E5↓j ...
.text:00409770                 mov     ebx, [esp+3Ch+var_18]
.text:00409774                 mov     [esp+3Ch+var_3C], ebx
.text:00409777                 call    sub_418180
.text:0040977C                 test    eax, eax
.text:0040977E                 mov     ebx, eax
.text:00409780                 jz      loc_409951
.text:00409786                 mov     ecx, [ebx+4]
.text:00409789                 mov     edi, [ebx]
.text:0040978B                 mov     eax, ecx
.text:0040978D                 or      eax, edi
.text:0040978F                 jz      short loc_409770
.text:00409791                 lea     ebp, [ebx+0Ch]
.text:00409794                 mov     ecx, ebp
.text:00409796                 mov     esi, ebp
.text:00409798                 nop
.text:00409799                 lea     esi, [esi+0]
.text:004097A0
.text:004097A0 loc_4097A0:                             ; CODE XREF: sub_4096F0+C5↓j
.text:004097A0                 mov     edi, [ecx]
.text:004097A2                 add     ecx, 4
.text:004097A5                 lea     edx, [edi-1010101h]
.text:004097AB                 not     edi
.text:004097AD                 and     edx, edi
.text:004097AF                 and     edx, 80808080h
.text:004097B5                 jz      short loc_4097A0
.text:004097B7                 test    edx, 8080h
.text:004097BD                 jnz     short loc_4097C5
.text:004097BF                 shr     edx, 10h
.text:004097C2                 add     ecx, 2
.text:004097C5
.text:004097C5 loc_4097C5:                             ; CODE XREF: sub_4096F0+CD↑j
.text:004097C5                 add     dl, dl
.text:004097C7                 sbb     ecx, 3
.text:004097CA                 sub     ecx, esi
.text:004097CC                 mov     esi, [esp+3Ch+var_28]
.text:004097D0                 add     esi, 4
.text:004097D3                 cmp     ecx, esi
.text:004097D5                 jb      short loc_409770
.text:004097D7                 cld
.text:004097D8                 mov     ecx, [esp+3Ch+var_28]
.text:004097DC                 mov     edi, ebp
.text:004097DE                 mov     esi, [esp+3Ch+var_1C]
.text:004097E2                 mov     edx, [esp+3Ch+var_24]
.text:004097E6                 add     ecx, 2
.text:004097E9                 add     esi, edx
.text:004097EB                 cmp     ecx, ecx
.text:004097ED                 repe cmpsb
.text:004097EF                 jnz     loc_409770
.text:004097F5                 mov     ebp, [esp+3Ch+var_28]
.text:004097F9                 lea     edx, [ebp+ebx+0]
.text:004097FD                 lea     ebp, [edx+0Eh]
.text:00409800                 movzx   ecx, byte ptr [edx+0Eh]
.text:00409804                 mov     bl, cl
.text:00409806                 sub     bl, 31h ; '1'
.text:00409809                 cmp     bl, 8
.text:0040980C                 ja      loc_409770
.text:00409812                 cmp     cl, 39h ; '9'
.text:00409815                 mov     ebx, 1
.text:0040981A                 setz    [esp+3Ch+var_29]
.text:0040981F                 movsx   ecx, byte ptr [edx+0Fh]
.text:00409823                 sub     ecx, 30h ; '0'
.text:00409826                 cmp     ecx, 9
.text:00409829                 ja      loc_409948
.text:0040982F                 movzx   edx, byte ptr [ebp+1]
.text:00409833
.text:00409833 loc_409833:                             ; CODE XREF: sub_4096F0+160↓j
.text:00409833                 xor     eax, eax
.text:00409835                 cmp     dl, 39h ; '9'
.text:00409838                 jz      loc_409936
.text:0040983E
.text:0040983E loc_40983E:                             ; CODE XREF: sub_4096F0+24B↓j
.text:0040983E                                         ; sub_4096F0+253↓j
.text:0040983E                 mov     [esp+3Ch+var_29], al
.text:00409842                 inc     ebx
.text:00409843                 movzx   edx, byte ptr [ebx+ebp]
.text:00409847                 movsx   edi, dl
.text:0040984A                 sub     edi, 30h ; '0'
.text:0040984D                 cmp     edi, 9
.text:00409850                 jbe     short loc_409833
.text:00409852
.text:00409852 loc_409852:                             ; CODE XREF: sub_4096F0+25C↓j
.text:00409852                 cmp     dl, 7Eh ; '~'
.text:00409855                 jnz     loc_409770
.text:0040985B                 cmp     byte ptr [ebx+ebp+1], 0
.text:00409860                 jnz     loc_409770
.text:00409866                 cmp     [esp+3Ch+var_20], ebx
.text:0040986A                 jb      short loc_40989B
.text:0040986C                 cmp     [esp+3Ch+var_20], ebx
.text:00409870                 jnz     loc_409770
.text:00409876                 cld
.text:00409877                 mov     edi, [esp+3Ch+var_1C]
.text:0040987B                 mov     ecx, ebx
.text:0040987D                 mov     eax, [esp+3Ch+arg_8]
.text:00409881                 cmp     ebx, ebx
.text:00409883                 lea     esi, [eax+edi+2]
.text:00409887                 mov     edi, ebp
.text:00409889                 repe cmpsb
.text:0040988B                 setnbe  dl
.text:0040988E                 setb    cl
.text:00409891                 sub     dl, cl
.text:00409893                 test    dl, dl
.text:00409895                 jg      loc_409770
.text:0040989B
.text:0040989B loc_40989B:                             ; CODE XREF: sub_4096F0+17A↑j
.text:0040989B                 movzx   edi, [esp+3Ch+var_29]
.text:004098A0                 xor     edx, edx
.text:004098A2                 mov     ecx, [esp+3Ch+arg_8]
.text:004098A6                 cmp     [esp+3Ch+var_29], 0
.text:004098AB                 lea     esi, [ebx+edi]
.text:004098AE                 mov     [esp+3Ch+var_20], esi
.text:004098B2                 mov     eax, [esp+3Ch+var_20]
.text:004098B6                 setnz   dl
.text:004098B9                 lea     esi, [eax+ecx+3]
.text:004098BD                 cmp     [esp+3Ch+arg_4], esi
.text:004098C1                 mov     [esp+3Ch+var_14], edx
.text:004098C5                 jbe     short loc_409912
.text:004098C7
.text:004098C7 loc_4098C7:                             ; CODE XREF: sub_4096F0+244↓j
.text:004098C7                 mov     esi, [esp+3Ch+var_1C]
.text:004098CB                 mov     eax, [esp+3Ch+arg_8]
.text:004098CF                 add     esi, eax
.text:004098D1                 mov     byte ptr [esi], 2Eh ; '.'
.text:004098D4                 inc     esi
.text:004098D5                 mov     byte ptr [esi], 7Eh ; '~'
.text:004098D8                 inc     esi
.text:004098D9                 mov     byte ptr [esi], 30h ; '0'
.text:004098DC                 add     esi, edi
.text:004098DE                 lea     edi, [ebx+2]
.text:004098E1                 mov     [esp+3Ch+var_3C], esi ; void *
.text:004098E4                 lea     esi, [ebx+esi-1]
.text:004098E8                 mov     [esp+3Ch+Size], edi ; Size
.text:004098EC                 mov     [esp+3Ch+Src], ebp ; Src
.text:004098F0                 call    memcpy
.text:004098F5                 movzx   eax, byte ptr [esi]
.text:004098F8                 cmp     al, 39h ; '9'
.text:004098FA                 jz      short loc_409905
.text:004098FC
.text:004098FC loc_4098FC:                             ; CODE XREF: sub_4096F0+220↓j
.text:004098FC                 inc     al
.text:004098FE                 mov     [esi], al
.text:00409900                 jmp     loc_409770
.text:00409905 ; ---------------------------------------------------------------------------
.text:00409905
.text:00409905 loc_409905:                             ; CODE XREF: sub_4096F0+20A↑j
.text:00409905                                         ; sub_4096F0+21E↓j
.text:00409905                 mov     byte ptr [esi], 30h ; '0'
.text:00409908                 dec     esi
.text:00409909                 movzx   eax, byte ptr [esi]
.text:0040990C                 cmp     al, 39h ; '9'
.text:0040990E                 jz      short loc_409905
.text:00409910                 jmp     short loc_4098FC
.text:00409912 ; ---------------------------------------------------------------------------
.text:00409912
.text:00409912 loc_409912:                             ; CODE XREF: sub_4096F0+1D5↑j
.text:00409912                 mov     [esp+3Ch+Size], esi ; int
.text:00409916                 mov     ecx, [esp+3Ch+var_1C]
.text:0040991A                 add     esi, esi
.text:0040991C                 mov     [esp+3Ch+Src], 2 ; int
.text:00409924                 mov     [esp+3Ch+var_3C], ecx ; void *
.text:00409927                 call    sub_40A350
.text:0040992C                 mov     [esp+3Ch+var_1C], eax
.text:00409930                 mov     [esp+3Ch+arg_4], esi
.text:00409934                 jmp     short loc_4098C7
.text:00409936 ; ---------------------------------------------------------------------------
.text:00409936
.text:00409936 loc_409936:                             ; CODE XREF: sub_4096F0+148↑j
.text:00409936                 cmp     [esp+3Ch+var_29], 0
.text:0040993B                 jz      loc_40983E
.text:00409941                 mov     al, 1
.text:00409943                 jmp     loc_40983E
.text:00409948 ; ---------------------------------------------------------------------------
.text:00409948
.text:00409948 loc_409948:                             ; CODE XREF: sub_4096F0+139↑j
.text:00409948                 movzx   edx, byte ptr [ebp+1]
.text:0040994C                 jmp     loc_409852
.text:00409951 ; ---------------------------------------------------------------------------
.text:00409951
.text:00409951 loc_409951:                             ; CODE XREF: sub_4096F0+90↑j
.text:00409951                 mov     edx, [esp+3Ch+var_18]
.text:00409955                 mov     [esp+3Ch+var_3C], edx ; void *
.text:00409958                 call    sub_419B20
.text:0040995D                 mov     esi, [esp+3Ch+var_1C]
.text:00409961                 mov     ebp, [esp+3Ch+arg_0]
.text:00409965                 mov     eax, [esp+3Ch+var_14]
.text:00409969                 mov     [ebp+0], esi
.text:0040996C
.text:0040996C loc_40996C:                             ; CODE XREF: sub_4096F0+79↑j
.text:0040996C                 add     esp, 2Ch
.text:0040996F                 pop     ebx
.text:00409970                 pop     esi
.text:00409971                 pop     edi
.text:00409972                 pop     ebp
.text:00409973                 retn
.text:00409973 sub_4096F0      endp
.text:00409973
.text:00409973 ; ---------------------------------------------------------------------------
.text:00409974                 db 1Ch dup(90h)
.text:00409990 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00409990                                         ; DATA XREF: sub_409A00+544↓o
.text:004099B8                 db 18h dup(90h)
.text:004099D0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:004099D0                                         ; DATA XREF: sub_409A00+54C↓o
.text:004099F6                 align 10h
.text:00409A00
.text:00409A00 ; =============== S U B R O U T I N E =======================================
.text:00409A00
.text:00409A00
.text:00409A00 ; int __cdecl sub_409A00(int, int, int, int, char *Str)
.text:00409A00 sub_409A00      proc near               ; CODE XREF: sub_4026D0+84↑p
.text:00409A00                                         ; sub_4026D0+117↑p ...
.text:00409A00
.text:00409A00 C               = dword ptr -3Ch
.text:00409A00 Type            = dword ptr -38h
.text:00409A00 Radix           = dword ptr -34h
.text:00409A00 var_28          = dword ptr -28h
.text:00409A00 var_24          = dword ptr -24h
.text:00409A00 var_1D          = byte ptr -1Dh
.text:00409A00 var_1C          = dword ptr -1Ch
.text:00409A00 var_18          = dword ptr -18h
.text:00409A00 var_14          = byte ptr -14h
.text:00409A00 arg_0           = dword ptr  4
.text:00409A00 arg_4           = dword ptr  8
.text:00409A00 arg_8           = dword ptr  0Ch
.text:00409A00 arg_C           = dword ptr  10h
.text:00409A00 Str             = dword ptr  14h
.text:00409A00
.text:00409A00                 push    ebp
.text:00409A01                 push    edi
.text:00409A02                 push    esi
.text:00409A03                 push    ebx
.text:00409A04                 sub     esp, 2Ch
.text:00409A07                 mov     ebp, [esp+3Ch+arg_8]
.text:00409A0B                 mov     [esp+3Ch+var_1C], 0
.text:00409A13                 mov     esi, [esp+3Ch+arg_0]
.text:00409A17                 cmp     ebp, 24h ; '$'
.text:00409A1A                 ja      loc_409F3C
.text:00409A20                 mov     edi, [esp+3Ch+arg_4]
.text:00409A24                 test    edi, edi
.text:00409A26                 jz      loc_409F33
.text:00409A2C
.text:00409A2C loc_409A2C:                             ; CODE XREF: sub_409A00+537↓j
.text:00409A2C                 movzx   edx, byte ptr [esi]
.text:00409A2F                 mov     ebx, esi
.text:00409A31                 mov     [esp+3Ch+var_1D], dl
.text:00409A35                 lea     esi, [esi+0]
.text:00409A39                 lea     edi, [edi+0]
.text:00409A40
.text:00409A40 loc_409A40:                             ; CODE XREF: sub_409A00+70↓j
.text:00409A40                 movzx   edx, [esp+3Ch+var_1D]
.text:00409A45                 mov     ecx, ds:__mb_cur_max
.text:00409A4B                 cmp     dword ptr [ecx], 1
.text:00409A4E                 jz      loc_409F20
.text:00409A54                 mov     [esp+3Ch+Type], 8 ; Type
.text:00409A5C                 mov     [esp+3Ch+C], edx ; C
.text:00409A5F                 call    _isctype
.text:00409A64
.text:00409A64 loc_409A64:                             ; CODE XREF: sub_409A00+52E↓j
.text:00409A64                 test    eax, eax
.text:00409A66                 jz      short loc_409A72
.text:00409A68                 inc     ebx
.text:00409A69                 movzx   eax, byte ptr [ebx]
.text:00409A6C                 mov     [esp+3Ch+var_1D], al
.text:00409A70                 jmp     short loc_409A40
.text:00409A72 ; ---------------------------------------------------------------------------
.text:00409A72
.text:00409A72 loc_409A72:                             ; CODE XREF: sub_409A00+66↑j
.text:00409A72                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00409A77                 mov     eax, 4
.text:00409A7C                 jz      short loc_409AD5
.text:00409A7E                 call    _errno
.text:00409A83                 mov     dword ptr [eax], 0
.text:00409A89                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:00409A8D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00409A91                 mov     [esp+3Ch+C], esi ; String
.text:00409A94                 call    strtoul
.text:00409A99                 mov     [esp+3Ch+var_18], eax
.text:00409A9D                 mov     eax, [edi]
.text:00409A9F                 cmp     eax, esi
.text:00409AA1                 jz      loc_409EEC
.text:00409AA7                 call    _errno
.text:00409AAC                 mov     ebp, [eax]
.text:00409AAE                 test    ebp, ebp
.text:00409AB0                 jnz     loc_409ECB
.text:00409AB6
.text:00409AB6 loc_409AB6:                             ; CODE XREF: sub_409A00+4DD↓j
.text:00409AB6                                         ; sub_409A00+51A↓j
.text:00409AB6                 mov     eax, [esp+3Ch+Str]
.text:00409ABA                 test    eax, eax
.text:00409ABC                 jz      short loc_409AC7
.text:00409ABE                 mov     ecx, [edi]
.text:00409AC0                 movzx   eax, byte ptr [ecx]
.text:00409AC3                 test    al, al
.text:00409AC5                 jnz     short loc_409ADD
.text:00409AC7
.text:00409AC7 loc_409AC7:                             ; CODE XREF: sub_409A00+BC↑j
.text:00409AC7                                         ; sub_409A00+26C↓j ...
.text:00409AC7                 mov     edx, [esp+3Ch+var_18]
.text:00409ACB                 mov     esi, [esp+3Ch+arg_C]
.text:00409ACF                 mov     eax, [esp+3Ch+var_1C]
.text:00409AD3                 mov     [esi], edx
.text:00409AD5
.text:00409AD5 loc_409AD5:                             ; CODE XREF: sub_409A00+7C↑j
.text:00409AD5                                         ; sub_409A00+112↓j ...
.text:00409AD5                 add     esp, 2Ch
.text:00409AD8                 pop     ebx
.text:00409AD9                 pop     esi
.text:00409ADA                 pop     edi
.text:00409ADB                 pop     ebp
.text:00409ADC                 retn
.text:00409ADD ; ---------------------------------------------------------------------------
.text:00409ADD
.text:00409ADD loc_409ADD:                             ; CODE XREF: sub_409A00+C5↑j
.text:00409ADD                 mov     [esp+3Ch+var_24], 1
.text:00409AE5                 mov     edx, [esp+3Ch+Str]
.text:00409AE9                 movsx   esi, al
.text:00409AEC                 mov     [esp+3Ch+Type], esi ; Val
.text:00409AF0                 mov     ebx, 400h
.text:00409AF5                 mov     [esp+3Ch+C], edx ; Str
.text:00409AF8                 call    strchr
.text:00409AFD                 test    eax, eax
.text:00409AFF                 jnz     short loc_409B14
.text:00409B01
.text:00409B01 def_409B64:                             ; CODE XREF: sub_409A00+162↓j
.text:00409B01                                         ; sub_409A00+164↓j
.text:00409B01                                         ; DATA XREF: ...
.text:00409B01                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00409B64 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00409B05                 mov     ebx, [esp+3Ch+var_18]
.text:00409B09                 mov     edi, [esp+3Ch+arg_C]
.text:00409B0D                 or      eax, 2
.text:00409B10                 mov     [edi], ebx
.text:00409B12                 jmp     short loc_409AD5
.text:00409B14 ; ---------------------------------------------------------------------------
.text:00409B14
.text:00409B14 loc_409B14:                             ; CODE XREF: sub_409A00+FF↑j
.text:00409B14                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:00409B1C                 mov     ebp, [esp+3Ch+Str]
.text:00409B20                 mov     [esp+3Ch+C], ebp ; Str
.text:00409B23                 call    strchr
.text:00409B28                 test    eax, eax
.text:00409B2A                 jz      loc_409EC0
.text:00409B30                 mov     ecx, [edi]
.text:00409B32                 mov     [esp+3Ch+var_28], ecx
.text:00409B36                 movsx   eax, byte ptr [ecx+1]
.text:00409B3A                 cmp     eax, 44h ; 'D'
.text:00409B3D                 jz      loc_409E89
.text:00409B43                 cmp     eax, 44h ; 'D'
.text:00409B46                 jg      loc_409E9B
.text:00409B4C                 cmp     eax, 42h ; 'B'
.text:00409B4F                 jz      loc_409E89
.text:00409B55
.text:00409B55 loc_409B55:                             ; CODE XREF: sub_409A00+496↓j
.text:00409B55                                         ; sub_409A00+49E↓j ...
.text:00409B55                 mov     esi, [esp+3Ch+var_28]
.text:00409B59                 movsx   eax, byte ptr [esi]
.text:00409B5C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00409B5F                 cmp     eax, 35h
.text:00409B62                 ja      short def_409B64 ; jumptable 00409B64 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00409B64                 jmp     ds:jpt_409B64[eax*4] ; switch jump
.text:00409B64 ; ---------------------------------------------------------------------------
.text:00409B6B                 align 4
.text:00409B6C jpt_409B64      dd offset loc_409C8B, offset def_409B64, offset def_409B64
.text:00409B6C                                         ; DATA XREF: sub_409A00+164↑r
.text:00409B6C                 dd offset loc_409C9B, offset def_409B64, offset loc_409D8C ; jump table for switch statement
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset def_409B64
.text:00409B6C                 dd offset loc_409DC9, offset def_409B64, offset loc_409DFB
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset loc_409CD5
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset def_409B64
.text:00409B6C                 dd offset loc_409E39, offset def_409B64, offset def_409B64
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset loc_409D12
.text:00409B6C                 dd offset loc_409D4F, offset def_409B64, offset def_409B64
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset def_409B64
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset loc_409C44
.text:00409B6C                 dd offset loc_409C56, offset def_409B64, offset def_409B64
.text:00409B6C                 dd offset def_409B64, offset loc_409D8C, offset def_409B64
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset loc_409DC9
.text:00409B6C                 dd offset def_409B64, offset loc_409DFB, offset def_409B64
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset def_409B64
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset loc_409E39
.text:00409B6C                 dd offset def_409B64, offset def_409B64, offset loc_409E76
.text:00409C44 ; ---------------------------------------------------------------------------
.text:00409C44
.text:00409C44 loc_409C44:                             ; CODE XREF: sub_409A00+164↑j
.text:00409C44                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409C44                 mov     eax, [esp+3Ch+var_18] ; jumptable 00409B64 case 98
.text:00409C48                 cmp     eax, 7FFFFFh
.text:00409C4D                 ja      short loc_409C7C
.text:00409C4F                 shl     eax, 9
.text:00409C52
.text:00409C52 loc_409C52:                             ; CODE XREF: sub_409A00+299↓j
.text:00409C52                                         ; sub_409A00+484↓j
.text:00409C52                 mov     [esp+3Ch+var_18], eax
.text:00409C56
.text:00409C56 loc_409C56:                             ; CODE XREF: sub_409A00+164↑j
.text:00409C56                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409C56                 xor     eax, eax        ; jumptable 00409B64 case 99
.text:00409C58
.text:00409C58 loc_409C58:                             ; CODE XREF: sub_409A00+289↓j
.text:00409C58                                         ; sub_409A00+2CA↓j ...
.text:00409C58                 or      [esp+3Ch+var_1C], eax
.text:00409C5C                 mov     ebp, [esp+3Ch+var_28]
.text:00409C60                 mov     ecx, [esp+3Ch+var_24]
.text:00409C64                 add     ebp, ecx
.text:00409C66                 mov     [edi], ebp
.text:00409C68                 cmp     byte ptr [ebp+0], 0
.text:00409C6C                 jz      loc_409AC7
.text:00409C72                 or      [esp+3Ch+var_1C], 2
.text:00409C77                 jmp     loc_409AC7
.text:00409C7C ; ---------------------------------------------------------------------------
.text:00409C7C
.text:00409C7C loc_409C7C:                             ; CODE XREF: sub_409A00+24D↑j
.text:00409C7C                                         ; sub_409A00+294↓j ...
.text:00409C7C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00409C84                 mov     eax, 1
.text:00409C89                 jmp     short loc_409C58
.text:00409C8B ; ---------------------------------------------------------------------------
.text:00409C8B
.text:00409C8B loc_409C8B:                             ; CODE XREF: sub_409A00+164↑j
.text:00409C8B                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409C8B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00409B64 case 66
.text:00409C8F                 cmp     eax, 3FFFFFh
.text:00409C94                 ja      short loc_409C7C
.text:00409C96                 shl     eax, 0Ah
.text:00409C99                 jmp     short loc_409C52
.text:00409C9B ; ---------------------------------------------------------------------------
.text:00409C9B
.text:00409C9B loc_409C9B:                             ; CODE XREF: sub_409A00+164↑j
.text:00409C9B                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409C9B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409B64 case 69
.text:00409C9F                 xor     ebp, ebp
.text:00409CA1                 mov     esi, 5
.text:00409CA6
.text:00409CA6 loc_409CA6:                             ; CODE XREF: sub_409A00+2C8↓j
.text:00409CA6                 xor     edx, edx
.text:00409CA8                 mov     eax, 0FFFFFFFFh
.text:00409CAD                 div     ebx
.text:00409CAF                 mov     edx, [ecx]
.text:00409CB1                 cmp     eax, edx
.text:00409CB3                 jnb     short loc_409CCC
.text:00409CB5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409CBB                 mov     eax, 1
.text:00409CC0
.text:00409CC0 loc_409CC0:                             ; CODE XREF: sub_409A00+2D3↓j
.text:00409CC0                 dec     esi
.text:00409CC1                 or      ebp, eax
.text:00409CC3                 cmp     esi, 0FFFFFFFFh
.text:00409CC6                 mov     eax, ebp
.text:00409CC8                 jnz     short loc_409CA6
.text:00409CCA                 jmp     short loc_409C58
.text:00409CCC ; ---------------------------------------------------------------------------
.text:00409CCC
.text:00409CCC loc_409CCC:                             ; CODE XREF: sub_409A00+2B3↑j
.text:00409CCC                 imul    edx, ebx
.text:00409CCF                 xor     eax, eax
.text:00409CD1                 mov     [ecx], edx
.text:00409CD3                 jmp     short loc_409CC0
.text:00409CD5 ; ---------------------------------------------------------------------------
.text:00409CD5
.text:00409CD5 loc_409CD5:                             ; CODE XREF: sub_409A00+164↑j
.text:00409CD5                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409CD5                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409B64 case 80
.text:00409CD9                 xor     ebp, ebp
.text:00409CDB                 mov     esi, 4
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: sub_409A00+302↓j
.text:00409CE0                 xor     edx, edx
.text:00409CE2                 mov     eax, 0FFFFFFFFh
.text:00409CE7                 div     ebx
.text:00409CE9                 mov     edx, [ecx]
.text:00409CEB                 cmp     eax, edx
.text:00409CED                 jnb     short loc_409D09
.text:00409CEF                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409CF5                 mov     eax, 1
.text:00409CFA
.text:00409CFA loc_409CFA:                             ; CODE XREF: sub_409A00+310↓j
.text:00409CFA                 dec     esi
.text:00409CFB                 or      ebp, eax
.text:00409CFD                 cmp     esi, 0FFFFFFFFh
.text:00409D00                 mov     eax, ebp
.text:00409D02                 jnz     short loc_409CE0
.text:00409D04                 jmp     loc_409C58
.text:00409D09 ; ---------------------------------------------------------------------------
.text:00409D09
.text:00409D09 loc_409D09:                             ; CODE XREF: sub_409A00+2ED↑j
.text:00409D09                 imul    edx, ebx
.text:00409D0C                 xor     eax, eax
.text:00409D0E                 mov     [ecx], edx
.text:00409D10                 jmp     short loc_409CFA
.text:00409D12 ; ---------------------------------------------------------------------------
.text:00409D12
.text:00409D12 loc_409D12:                             ; CODE XREF: sub_409A00+164↑j
.text:00409D12                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409D12                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409B64 case 89
.text:00409D16                 xor     ebp, ebp
.text:00409D18                 mov     esi, 7
.text:00409D1D
.text:00409D1D loc_409D1D:                             ; CODE XREF: sub_409A00+33F↓j
.text:00409D1D                 xor     edx, edx
.text:00409D1F                 mov     eax, 0FFFFFFFFh
.text:00409D24                 div     ebx
.text:00409D26                 mov     edx, [ecx]
.text:00409D28                 cmp     eax, edx
.text:00409D2A                 jnb     short loc_409D46
.text:00409D2C                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409D32                 mov     eax, 1
.text:00409D37
.text:00409D37 loc_409D37:                             ; CODE XREF: sub_409A00+34D↓j
.text:00409D37                 dec     esi
.text:00409D38                 or      ebp, eax
.text:00409D3A                 cmp     esi, 0FFFFFFFFh
.text:00409D3D                 mov     eax, ebp
.text:00409D3F                 jnz     short loc_409D1D
.text:00409D41                 jmp     loc_409C58
.text:00409D46 ; ---------------------------------------------------------------------------
.text:00409D46
.text:00409D46 loc_409D46:                             ; CODE XREF: sub_409A00+32A↑j
.text:00409D46                 imul    edx, ebx
.text:00409D49                 xor     eax, eax
.text:00409D4B                 mov     [ecx], edx
.text:00409D4D                 jmp     short loc_409D37
.text:00409D4F ; ---------------------------------------------------------------------------
.text:00409D4F
.text:00409D4F loc_409D4F:                             ; CODE XREF: sub_409A00+164↑j
.text:00409D4F                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409D4F                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409B64 case 90
.text:00409D53                 xor     ebp, ebp
.text:00409D55                 mov     esi, 6
.text:00409D5A
.text:00409D5A loc_409D5A:                             ; CODE XREF: sub_409A00+37C↓j
.text:00409D5A                 xor     edx, edx
.text:00409D5C                 mov     eax, 0FFFFFFFFh
.text:00409D61                 div     ebx
.text:00409D63                 mov     edx, [ecx]
.text:00409D65                 cmp     eax, edx
.text:00409D67                 jnb     short loc_409D83
.text:00409D69                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409D6F                 mov     eax, 1
.text:00409D74
.text:00409D74 loc_409D74:                             ; CODE XREF: sub_409A00+38A↓j
.text:00409D74                 dec     esi
.text:00409D75                 or      ebp, eax
.text:00409D77                 cmp     esi, 0FFFFFFFFh
.text:00409D7A                 mov     eax, ebp
.text:00409D7C                 jnz     short loc_409D5A
.text:00409D7E                 jmp     loc_409C58
.text:00409D83 ; ---------------------------------------------------------------------------
.text:00409D83
.text:00409D83 loc_409D83:                             ; CODE XREF: sub_409A00+367↑j
.text:00409D83                 imul    edx, ebx
.text:00409D86                 xor     eax, eax
.text:00409D88                 mov     [ecx], edx
.text:00409D8A                 jmp     short loc_409D74
.text:00409D8C ; ---------------------------------------------------------------------------
.text:00409D8C
.text:00409D8C loc_409D8C:                             ; CODE XREF: sub_409A00+164↑j
.text:00409D8C                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409D8C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409B64 cases 71,103
.text:00409D90                 xor     ebp, ebp
.text:00409D92                 mov     esi, 2
.text:00409D97
.text:00409D97 loc_409D97:                             ; CODE XREF: sub_409A00+3B9↓j
.text:00409D97                 xor     edx, edx
.text:00409D99                 mov     eax, 0FFFFFFFFh
.text:00409D9E                 div     ebx
.text:00409DA0                 mov     edx, [ecx]
.text:00409DA2                 cmp     eax, edx
.text:00409DA4                 jnb     short loc_409DC0
.text:00409DA6                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409DAC                 mov     eax, 1
.text:00409DB1
.text:00409DB1 loc_409DB1:                             ; CODE XREF: sub_409A00+3C7↓j
.text:00409DB1                 dec     esi
.text:00409DB2                 or      ebp, eax
.text:00409DB4                 cmp     esi, 0FFFFFFFFh
.text:00409DB7                 mov     eax, ebp
.text:00409DB9                 jnz     short loc_409D97
.text:00409DBB                 jmp     loc_409C58
.text:00409DC0 ; ---------------------------------------------------------------------------
.text:00409DC0
.text:00409DC0 loc_409DC0:                             ; CODE XREF: sub_409A00+3A4↑j
.text:00409DC0                 imul    edx, ebx
.text:00409DC3                 xor     eax, eax
.text:00409DC5                 mov     [ecx], edx
.text:00409DC7                 jmp     short loc_409DB1
.text:00409DC9 ; ---------------------------------------------------------------------------
.text:00409DC9
.text:00409DC9 loc_409DC9:                             ; CODE XREF: sub_409A00+164↑j
.text:00409DC9                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409DC9                 xor     edx, edx        ; jumptable 00409B64 cases 75,107
.text:00409DCB                 mov     eax, 0FFFFFFFFh
.text:00409DD0                 div     ebx
.text:00409DD2                 mov     edx, [esp+3Ch+var_18]
.text:00409DD6                 cmp     eax, edx
.text:00409DD8                 jnb     short loc_409DF0
.text:00409DDA                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00409DE2                 mov     edx, 1
.text:00409DE7
.text:00409DE7 loc_409DE7:                             ; CODE XREF: sub_409A00+3F9↓j
.text:00409DE7                 xor     eax, eax
.text:00409DE9                 or      eax, edx
.text:00409DEB                 jmp     loc_409C58
.text:00409DF0 ; ---------------------------------------------------------------------------
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: sub_409A00+3D8↑j
.text:00409DF0                 imul    edx, ebx
.text:00409DF3                 mov     [esp+3Ch+var_18], edx
.text:00409DF7                 xor     edx, edx
.text:00409DF9                 jmp     short loc_409DE7
.text:00409DFB ; ---------------------------------------------------------------------------
.text:00409DFB
.text:00409DFB loc_409DFB:                             ; CODE XREF: sub_409A00+164↑j
.text:00409DFB                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409DFB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409B64 cases 77,109
.text:00409DFF                 xor     ebp, ebp
.text:00409E01                 mov     esi, 1
.text:00409E06
.text:00409E06 loc_409E06:                             ; CODE XREF: sub_409A00+42E↓j
.text:00409E06                 xor     edx, edx
.text:00409E08                 mov     eax, 0FFFFFFFFh
.text:00409E0D                 div     ebx
.text:00409E0F                 mov     edx, [ecx]
.text:00409E11                 cmp     eax, edx
.text:00409E13                 jnb     short loc_409E30
.text:00409E15                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409E1B                 mov     eax, 1
.text:00409E20
.text:00409E20 loc_409E20:                             ; CODE XREF: sub_409A00+437↓j
.text:00409E20                 dec     esi
.text:00409E21                 or      ebp, eax
.text:00409E23                 cmp     esi, 0FFFFFFFFh
.text:00409E26                 mov     eax, ebp
.text:00409E28                 jz      loc_409C58
.text:00409E2E                 jmp     short loc_409E06
.text:00409E30 ; ---------------------------------------------------------------------------
.text:00409E30
.text:00409E30 loc_409E30:                             ; CODE XREF: sub_409A00+413↑j
.text:00409E30                 imul    edx, ebx
.text:00409E33                 xor     eax, eax
.text:00409E35                 mov     [ecx], edx
.text:00409E37                 jmp     short loc_409E20
.text:00409E39 ; ---------------------------------------------------------------------------
.text:00409E39
.text:00409E39 loc_409E39:                             ; CODE XREF: sub_409A00+164↑j
.text:00409E39                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409E39                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00409B64 cases 84,116
.text:00409E3D                 xor     ebp, ebp
.text:00409E3F                 mov     esi, 3
.text:00409E44
.text:00409E44 loc_409E44:                             ; CODE XREF: sub_409A00+466↓j
.text:00409E44                 xor     edx, edx
.text:00409E46                 mov     eax, 0FFFFFFFFh
.text:00409E4B                 div     ebx
.text:00409E4D                 mov     edx, [ecx]
.text:00409E4F                 cmp     eax, edx
.text:00409E51                 jnb     short loc_409E6D
.text:00409E53                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00409E59                 mov     eax, 1
.text:00409E5E
.text:00409E5E loc_409E5E:                             ; CODE XREF: sub_409A00+474↓j
.text:00409E5E                 dec     esi
.text:00409E5F                 or      ebp, eax
.text:00409E61                 cmp     esi, 0FFFFFFFFh
.text:00409E64                 mov     eax, ebp
.text:00409E66                 jnz     short loc_409E44
.text:00409E68                 jmp     loc_409C58
.text:00409E6D ; ---------------------------------------------------------------------------
.text:00409E6D
.text:00409E6D loc_409E6D:                             ; CODE XREF: sub_409A00+451↑j
.text:00409E6D                 imul    edx, ebx
.text:00409E70                 xor     eax, eax
.text:00409E72                 mov     [ecx], edx
.text:00409E74                 jmp     short loc_409E5E
.text:00409E76 ; ---------------------------------------------------------------------------
.text:00409E76
.text:00409E76 loc_409E76:                             ; CODE XREF: sub_409A00+164↑j
.text:00409E76                                         ; DATA XREF: sub_409A00:jpt_409B64↑o
.text:00409E76                 mov     eax, [esp+3Ch+var_18] ; jumptable 00409B64 case 119
.text:00409E7A                 test    eax, eax
.text:00409E7C                 js      loc_409C7C
.text:00409E82                 add     eax, eax
.text:00409E84                 jmp     loc_409C52
.text:00409E89 ; ---------------------------------------------------------------------------
.text:00409E89
.text:00409E89 loc_409E89:                             ; CODE XREF: sub_409A00+13D↑j
.text:00409E89                                         ; sub_409A00+14F↑j
.text:00409E89                 mov     [esp+3Ch+var_24], 2
.text:00409E91                 mov     ebx, 3E8h
.text:00409E96                 jmp     loc_409B55
.text:00409E9B ; ---------------------------------------------------------------------------
.text:00409E9B
.text:00409E9B loc_409E9B:                             ; CODE XREF: sub_409A00+146↑j
.text:00409E9B                 cmp     eax, 69h ; 'i'
.text:00409E9E                 jnz     loc_409B55
.text:00409EA4                 mov     edx, [esp+3Ch+var_28]
.text:00409EA8                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:00409EAC                 jnz     loc_409B55
.text:00409EB2                 mov     [esp+3Ch+var_24], 3
.text:00409EBA                 jmp     loc_409B55
.text:00409EBA ; ---------------------------------------------------------------------------
.text:00409EBF                 align 10h
.text:00409EC0
.text:00409EC0 loc_409EC0:                             ; CODE XREF: sub_409A00+12A↑j
.text:00409EC0                 mov     eax, [edi]
.text:00409EC2                 mov     [esp+3Ch+var_28], eax
.text:00409EC6                 jmp     loc_409B55
.text:00409ECB ; ---------------------------------------------------------------------------
.text:00409ECB
.text:00409ECB loc_409ECB:                             ; CODE XREF: sub_409A00+B0↑j
.text:00409ECB                 call    _errno
.text:00409ED0                 cmp     dword ptr [eax], 22h ; '"'
.text:00409ED3                 jnz     short loc_409EE2
.text:00409ED5                 mov     [esp+3Ch+var_1C], 1
.text:00409EDD                 jmp     loc_409AB6
.text:00409EE2 ; ---------------------------------------------------------------------------
.text:00409EE2
.text:00409EE2 loc_409EE2:                             ; CODE XREF: sub_409A00+4D3↑j
.text:00409EE2                                         ; sub_409A00+4F2↓j ...
.text:00409EE2                 mov     eax, 4
.text:00409EE7                 jmp     loc_409AD5
.text:00409EEC ; ---------------------------------------------------------------------------
.text:00409EEC
.text:00409EEC loc_409EEC:                             ; CODE XREF: sub_409A00+A1↑j
.text:00409EEC                 mov     edx, [esp+3Ch+Str]
.text:00409EF0                 test    edx, edx
.text:00409EF2                 jz      short loc_409EE2
.text:00409EF4                 movzx   eax, byte ptr [eax]
.text:00409EF7                 test    al, al
.text:00409EF9                 jz      short loc_409EE2
.text:00409EFB                 mov     ebx, [esp+3Ch+Str]
.text:00409EFF                 movsx   esi, al
.text:00409F02                 mov     [esp+3Ch+Type], esi ; Val
.text:00409F06                 mov     [esp+3Ch+C], ebx ; Str
.text:00409F09                 call    strchr
.text:00409F0E                 test    eax, eax
.text:00409F10                 jz      short loc_409EE2
.text:00409F12                 mov     [esp+3Ch+var_18], 1
.text:00409F1A                 jmp     loc_409AB6
.text:00409F1A ; ---------------------------------------------------------------------------
.text:00409F1F                 align 10h
.text:00409F20
.text:00409F20 loc_409F20:                             ; CODE XREF: sub_409A00+4E↑j
.text:00409F20                 mov     eax, ds:_pctype
.text:00409F25                 mov     ecx, [eax]
.text:00409F27                 movzx   eax, word ptr [ecx+edx*2]
.text:00409F2B                 and     eax, 8
.text:00409F2E                 jmp     loc_409A64
.text:00409F33 ; ---------------------------------------------------------------------------
.text:00409F33
.text:00409F33 loc_409F33:                             ; CODE XREF: sub_409A00+26↑j
.text:00409F33                 lea     edi, [esp+3Ch+var_14]
.text:00409F37                 jmp     loc_409A2C
.text:00409F3C ; ---------------------------------------------------------------------------
.text:00409F3C
.text:00409F3C loc_409F3C:                             ; CODE XREF: sub_409A00+1A↑j
.text:00409F3C                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00409F44                 mov     [esp+3Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00409F4C                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00409F53                 call    _assert
.text:00409F53 sub_409A00      endp
.text:00409F53
.text:00409F53 ; ---------------------------------------------------------------------------
.text:00409F58                 db 18h dup(90h)
.text:00409F70
.text:00409F70 ; =============== S U B R O U T I N E =======================================
.text:00409F70
.text:00409F70
.text:00409F70 ; int __cdecl sub_409F70(int, char *, int)
.text:00409F70 sub_409F70      proc near               ; CODE XREF: sub_40A020+1A↓p
.text:00409F70
.text:00409F70 var_2C          = dword ptr -2Ch
.text:00409F70 var_28          = dword ptr -28h
.text:00409F70 var_1C          = dword ptr -1Ch
.text:00409F70 var_18          = dword ptr -18h
.text:00409F70 var_14          = dword ptr -14h
.text:00409F70 var_10          = dword ptr -10h
.text:00409F70 arg_0           = dword ptr  4
.text:00409F70 arg_4           = dword ptr  8
.text:00409F70 arg_8           = dword ptr  0Ch
.text:00409F70
.text:00409F70                 push    edi
.text:00409F71                 push    esi
.text:00409F72                 push    ebx
.text:00409F73                 sub     esp, 20h
.text:00409F76                 xor     ebx, ebx
.text:00409F78                 mov     ecx, [esp+2Ch+arg_8]
.text:00409F7C                 mov     esi, [esp+2Ch+arg_0]
.text:00409F80                 test    ecx, ecx
.text:00409F82                 jz      short loc_409FC4
.text:00409F84                 mov     ebx, [ecx]
.text:00409F86                 mov     [esp+2Ch+var_1C], ebx
.text:00409F8A                 mov     edi, [ecx+4]
.text:00409F8D                 mov     ebx, 10624DD3h
.text:00409F92                 mov     eax, edi
.text:00409F94                 imul    ebx
.text:00409F96                 mov     eax, edi
.text:00409F98                 sar     eax, 1Fh
.text:00409F9B                 sar     edx, 6
.text:00409F9E                 sub     edx, eax
.text:00409FA0                 mov     [esp+2Ch+var_18], edx
.text:00409FA4                 mov     edx, [ecx+8]
.text:00409FA7                 mov     [esp+2Ch+var_14], edx
.text:00409FAB                 mov     edi, [ecx+0Ch]
.text:00409FAE                 mov     eax, edi
.text:00409FB0                 imul    ebx
.text:00409FB2                 mov     ebx, edi
.text:00409FB4                 sar     ebx, 1Fh
.text:00409FB7                 sar     edx, 6
.text:00409FBA                 sub     edx, ebx
.text:00409FBC                 lea     ebx, [esp+2Ch+var_1C]
.text:00409FC0                 mov     [esp+2Ch+var_10], edx
.text:00409FC4
.text:00409FC4 loc_409FC4:                             ; CODE XREF: sub_409F70+12↑j
.text:00409FC4                 test    esi, esi
.text:00409FC6                 js      short loc_409FF7
.text:00409FC8                 mov     [esp+2Ch+var_28], ebx
.text:00409FCC                 mov     [esp+2Ch+var_2C], esi
.text:00409FCF                 call    sub_419CF0
.text:00409FD4                 xor     edx, edx
.text:00409FD6                 test    eax, eax
.text:00409FD8                 jnz     short loc_409FE3
.text:00409FDA
.text:00409FDA loc_409FDA:                             ; CODE XREF: sub_409F70+99↓j
.text:00409FDA                                         ; sub_409F70+A0↓j
.text:00409FDA                 add     esp, 20h
.text:00409FDD                 mov     eax, edx
.text:00409FDF                 pop     ebx
.text:00409FE0                 pop     esi
.text:00409FE1                 pop     edi
.text:00409FE2                 retn
.text:00409FE3 ; ---------------------------------------------------------------------------
.text:00409FE3
.text:00409FE3 loc_409FE3:                             ; CODE XREF: sub_409F70+68↑j
.text:00409FE3                 call    _errno
.text:00409FE8                 mov     eax, [eax]
.text:00409FEA                 cmp     eax, 5
.text:00409FED                 jz      short loc_40A00B
.text:00409FEF                 cmp     eax, 5
.text:00409FF2                 jg      short loc_40A012
.text:00409FF4                 dec     eax
.text:00409FF5
.text:00409FF5 loc_409FF5:                             ; CODE XREF: sub_409F70+AA↓j
.text:00409FF5                 jz      short loc_40A00B
.text:00409FF7
.text:00409FF7 loc_409FF7:                             ; CODE XREF: sub_409F70+56↑j
.text:00409FF7                 mov     [esp+2Ch+var_28], ebx ; int
.text:00409FFB                 mov     ecx, [esp+2Ch+arg_4]
.text:00409FFF                 mov     [esp+2Ch+var_2C], ecx ; char *
.text:0040A002                 call    sub_419650
.text:0040A007                 mov     edx, eax
.text:0040A009                 jmp     short loc_409FDA
.text:0040A00B ; ---------------------------------------------------------------------------
.text:0040A00B
.text:0040A00B loc_40A00B:                             ; CODE XREF: sub_409F70+7D↑j
.text:0040A00B                                         ; sub_409F70:loc_409FF5↑j ...
.text:0040A00B                 mov     edx, 0FFFFFFFFh
.text:0040A010                 jmp     short loc_409FDA
.text:0040A012 ; ---------------------------------------------------------------------------
.text:0040A012
.text:0040A012 loc_40A012:                             ; CODE XREF: sub_409F70+82↑j
.text:0040A012                 cmp     eax, 0Dh
.text:0040A015                 jz      short loc_40A00B
.text:0040A017                 cmp     eax, 1Eh
.text:0040A01A                 jmp     short loc_409FF5
.text:0040A01A sub_409F70      endp
.text:0040A01A
.text:0040A01A ; ---------------------------------------------------------------------------
.text:0040A01C                 align 10h
.text:0040A020
.text:0040A020 ; =============== S U B R O U T I N E =======================================
.text:0040A020
.text:0040A020
.text:0040A020 ; int __cdecl sub_40A020(char *, int)
.text:0040A020 sub_40A020      proc near               ; CODE XREF: sub_4024E0+B2↑p
.text:0040A020                                         ; sub_403910+5E2↑p ...
.text:0040A020
.text:0040A020 var_C           = dword ptr -0Ch
.text:0040A020 var_8           = dword ptr -8
.text:0040A020 var_4           = dword ptr -4
.text:0040A020 arg_0           = dword ptr  4
.text:0040A020 arg_4           = dword ptr  8
.text:0040A020
.text:0040A020                 sub     esp, 0Ch
.text:0040A023                 mov     edx, [esp+0Ch+arg_4]
.text:0040A027                 mov     [esp+0Ch+var_C], 0FFFFFFFFh ; int
.text:0040A02E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040A032                 mov     edx, [esp+0Ch+arg_0]
.text:0040A036                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040A03A                 call    sub_409F70
.text:0040A03F                 add     esp, 0Ch
.text:0040A042                 retn
.text:0040A042 sub_40A020      endp
.text:0040A042
.text:0040A042 ; ---------------------------------------------------------------------------
.text:0040A043                 align 10h
.text:0040A050
.text:0040A050 ; =============== S U B R O U T I N E =======================================
.text:0040A050
.text:0040A050
.text:0040A050 ; int __cdecl sub_40A050(int, char *, int)
.text:0040A050 sub_40A050      proc near               ; CODE XREF: sub_4022F0+2A↑p
.text:0040A050                                         ; sub_405630+76↑p ...
.text:0040A050
.text:0040A050 Str             = dword ptr -2Ch
.text:0040A050 var_28          = dword ptr -28h
.text:0040A050 var_24          = dword ptr -24h
.text:0040A050 var_18          = dword ptr -18h
.text:0040A050 var_14          = dword ptr -14h
.text:0040A050 arg_0           = dword ptr  4
.text:0040A050 arg_4           = dword ptr  8
.text:0040A050 arg_8           = dword ptr  0Ch
.text:0040A050
.text:0040A050                 push    ebp
.text:0040A051                 push    edi
.text:0040A052                 push    esi
.text:0040A053                 push    ebx
.text:0040A054                 sub     esp, 1Ch
.text:0040A057                 mov     ebp, [esp+2Ch+arg_0]
.text:0040A05B                 mov     [esp+2Ch+Str], ebp
.text:0040A05E                 call    sub_40AD60
.text:0040A063                 mov     [esp+2Ch+Str], eax ; char *
.text:0040A066                 mov     ebx, eax
.text:0040A068                 call    sub_40ADC0
.text:0040A06D                 mov     [esp+2Ch+var_18], 0
.text:0040A075                 mov     ecx, ebx
.text:0040A077                 sub     ecx, ebp
.text:0040A079                 add     ecx, eax
.text:0040A07B                 test    eax, eax
.text:0040A07D                 mov     [esp+2Ch+var_14], ecx
.text:0040A081                 jz      short loc_40A098
.text:0040A083                 movzx   eax, byte ptr [eax+ebx-1]
.text:0040A088                 cmp     al, 2Fh ; '/'
.text:0040A08A                 jz      short loc_40A098
.text:0040A08C                 cmp     al, 5Ch ; '\'
.text:0040A08E                 jz      short loc_40A098
.text:0040A090                 mov     [esp+2Ch+var_18], 1
.text:0040A098
.text:0040A098 loc_40A098:                             ; CODE XREF: sub_40A050+31↑j
.text:0040A098                                         ; sub_40A050+3A↑j ...
.text:0040A098                 mov     ebx, [esp+2Ch+arg_4]
.text:0040A09C                 cmp     byte ptr [ebx], 0
.text:0040A09F                 jz      short loc_40A0AB
.text:0040A0A1                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:0040A0A5                 jz      loc_40A12F
.text:0040A0AB
.text:0040A0AB loc_40A0AB:                             ; CODE XREF: sub_40A050+4F↑j
.text:0040A0AB                                         ; sub_40A050+E2↓j
.text:0040A0AB                 movzx   eax, byte ptr [ebx]
.text:0040A0AE                 cmp     al, 2Fh ; '/'
.text:0040A0B0                 jz      short loc_40A121
.text:0040A0B2                 cmp     al, 5Ch ; '\'
.text:0040A0B4                 jz      short loc_40A121
.text:0040A0B6
.text:0040A0B6 loc_40A0B6:                             ; CODE XREF: sub_40A050+DD↓j
.text:0040A0B6                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040A0B9                 call    strlen
.text:0040A0BE                 mov     esi, eax
.text:0040A0C0                 mov     edx, [esp+2Ch+var_14]
.text:0040A0C4                 mov     eax, [esp+2Ch+var_18]
.text:0040A0C8                 add     edx, eax
.text:0040A0CA                 lea     edi, [esi+edx+1]
.text:0040A0CE                 mov     [esp+2Ch+Str], edi ; size_t
.text:0040A0D1                 call    sub_40A320
.text:0040A0D6                 mov     [esp+2Ch+Str], eax
.text:0040A0D9                 mov     ecx, [esp+2Ch+var_14]
.text:0040A0DD                 mov     edi, eax
.text:0040A0DF                 mov     [esp+2Ch+var_28], ebp
.text:0040A0E3                 mov     [esp+2Ch+var_24], ecx
.text:0040A0E7                 call    sub_419D20
.text:0040A0EC                 mov     byte ptr [eax], 2Fh ; '/'
.text:0040A0EF                 mov     edx, [esp+2Ch+var_18]
.text:0040A0F3                 mov     ecx, [esp+2Ch+arg_8]
.text:0040A0F7                 add     eax, edx
.text:0040A0F9                 test    ecx, ecx
.text:0040A0FB                 jz      short loc_40A104
.text:0040A0FD                 mov     ebp, [esp+2Ch+arg_8]
.text:0040A101                 mov     [ebp+0], eax
.text:0040A104
.text:0040A104 loc_40A104:                             ; CODE XREF: sub_40A050+AB↑j
.text:0040A104                 mov     [esp+2Ch+var_24], esi
.text:0040A108                 mov     [esp+2Ch+var_28], ebx
.text:0040A10C                 mov     [esp+2Ch+Str], eax
.text:0040A10F                 call    sub_419D20
.text:0040A114                 mov     byte ptr [eax], 0
.text:0040A117                 add     esp, 1Ch
.text:0040A11A                 mov     eax, edi
.text:0040A11C                 pop     ebx
.text:0040A11D                 pop     esi
.text:0040A11E                 pop     edi
.text:0040A11F                 pop     ebp
.text:0040A120                 retn
.text:0040A121 ; ---------------------------------------------------------------------------
.text:0040A121
.text:0040A121 loc_40A121:                             ; CODE XREF: sub_40A050+60↑j
.text:0040A121                                         ; sub_40A050+64↑j ...
.text:0040A121                 inc     ebx
.text:0040A122                 movzx   eax, byte ptr [ebx]
.text:0040A125                 cmp     al, 2Fh ; '/'
.text:0040A127                 jz      short loc_40A121
.text:0040A129                 cmp     al, 5Ch ; '\'
.text:0040A12B                 jz      short loc_40A121
.text:0040A12D                 jmp     short loc_40A0B6
.text:0040A12F ; ---------------------------------------------------------------------------
.text:0040A12F
.text:0040A12F loc_40A12F:                             ; CODE XREF: sub_40A050+55↑j
.text:0040A12F                 add     ebx, 2
.text:0040A132                 jmp     loc_40A0AB
.text:0040A132 sub_40A050      endp
.text:0040A132
.text:0040A132 ; ---------------------------------------------------------------------------
.text:0040A137                 align 10h
.text:0040A140                 push    esi
.text:0040A141                 push    ebx
.text:0040A142                 sub     esp, 4
.text:0040A145                 mov     ebx, [esp+10h]
.text:0040A149                 cmp     byte ptr [ebx], 0
.text:0040A14C                 jz      short loc_40A154
.text:0040A14E                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:0040A152                 jz      short loc_40A1A6
.text:0040A154
.text:0040A154 loc_40A154:                             ; CODE XREF: .text:0040A14C↑j
.text:0040A154                 xor     esi, esi
.text:0040A156
.text:0040A156 loc_40A156:                             ; CODE XREF: .text:0040A1AB↓j
.text:0040A156                 mov     [esp], ebx
.text:0040A159                 call    sub_40AD60
.text:0040A15E                 sub     eax, ebx
.text:0040A160                 cmp     esi, eax
.text:0040A162                 jnb     short loc_40A186
.text:0040A164                 lea     esi, [esi+0]
.text:0040A16A                 lea     edi, [edi+0]
.text:0040A170
.text:0040A170 loc_40A170:                             ; CODE XREF: .text:0040A184↓j
.text:0040A170                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040A175                 cmp     dl, 2Fh ; '/'
.text:0040A178                 jz      short loc_40A181
.text:0040A17A                 cmp     dl, 5Ch ; '\'
.text:0040A17D                 mov     ecx, eax
.text:0040A17F                 jnz     short loc_40A199
.text:0040A181
.text:0040A181 loc_40A181:                             ; CODE XREF: .text:0040A178↑j
.text:0040A181                 dec     eax
.text:0040A182                 cmp     esi, eax
.text:0040A184                 jb      short loc_40A170
.text:0040A186
.text:0040A186 loc_40A186:                             ; CODE XREF: .text:0040A162↑j
.text:0040A186                 movzx   edx, byte ptr [esi+ebx]
.text:0040A18A                 xor     eax, eax
.text:0040A18C                 cmp     dl, 2Fh ; '/'
.text:0040A18F                 jz      short loc_40A19F
.text:0040A191                 cmp     dl, 5Ch ; '\'
.text:0040A194                 jz      short loc_40A19F
.text:0040A196
.text:0040A196 loc_40A196:                             ; CODE XREF: .text:0040A1A4↓j
.text:0040A196                 lea     ecx, [eax+esi]
.text:0040A199
.text:0040A199 loc_40A199:                             ; CODE XREF: .text:0040A17F↑j
.text:0040A199                 pop     edx
.text:0040A19A                 mov     eax, ecx
.text:0040A19C                 pop     ebx
.text:0040A19D                 pop     esi
.text:0040A19E                 retn
.text:0040A19F ; ---------------------------------------------------------------------------
.text:0040A19F
.text:0040A19F loc_40A19F:                             ; CODE XREF: .text:0040A18F↑j
.text:0040A19F                                         ; .text:0040A194↑j
.text:0040A19F                 mov     eax, 1
.text:0040A1A4                 jmp     short loc_40A196
.text:0040A1A6 ; ---------------------------------------------------------------------------
.text:0040A1A6
.text:0040A1A6 loc_40A1A6:                             ; CODE XREF: .text:0040A152↑j
.text:0040A1A6                 mov     esi, 2
.text:0040A1AB                 jmp     short loc_40A156
.text:0040A1AB ; ---------------------------------------------------------------------------
.text:0040A1AD                 align 10h
.text:0040A1B0
.text:0040A1B0 ; =============== S U B R O U T I N E =======================================
.text:0040A1B0
.text:0040A1B0
.text:0040A1B0 ; int __cdecl sub_40A1B0(void *)
.text:0040A1B0 sub_40A1B0      proc near               ; CODE XREF: sub_402170+1F↑p
.text:0040A1B0                                         ; sub_403910+349↑p ...
.text:0040A1B0
.text:0040A1B0 var_2C          = dword ptr -2Ch
.text:0040A1B0 Src             = dword ptr -28h
.text:0040A1B0 Size            = dword ptr -24h
.text:0040A1B0 var_11          = byte ptr -11h
.text:0040A1B0 arg_0           = dword ptr  4
.text:0040A1B0
.text:0040A1B0                 push    ebp
.text:0040A1B1                 push    edi
.text:0040A1B2                 push    esi
.text:0040A1B3                 push    ebx
.text:0040A1B4                 sub     esp, 1Ch
.text:0040A1B7                 mov     edi, [esp+2Ch+arg_0]
.text:0040A1BB                 cmp     byte ptr [edi], 0
.text:0040A1BE                 jz      short loc_40A1CA
.text:0040A1C0                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040A1C4                 jz      loc_40A267
.text:0040A1CA
.text:0040A1CA loc_40A1CA:                             ; CODE XREF: sub_40A1B0+E↑j
.text:0040A1CA                 xor     esi, esi
.text:0040A1CC
.text:0040A1CC loc_40A1CC:                             ; CODE XREF: sub_40A1B0+BC↓j
.text:0040A1CC                 mov     [esp+2Ch+var_2C], edi
.text:0040A1CF                 call    sub_40AD60
.text:0040A1D4                 sub     eax, edi
.text:0040A1D6                 cmp     esi, eax
.text:0040A1D8                 jnb     short loc_40A1F6
.text:0040A1DA                 lea     esi, [esi+0]
.text:0040A1E0
.text:0040A1E0 loc_40A1E0:                             ; CODE XREF: sub_40A1B0+44↓j
.text:0040A1E0                 movzx   edx, byte ptr [eax+edi-1]
.text:0040A1E5                 cmp     dl, 2Fh ; '/'
.text:0040A1E8                 jz      short loc_40A1F1
.text:0040A1EA                 cmp     dl, 5Ch ; '\'
.text:0040A1ED                 mov     ebx, eax
.text:0040A1EF                 jnz     short loc_40A207
.text:0040A1F1
.text:0040A1F1 loc_40A1F1:                             ; CODE XREF: sub_40A1B0+38↑j
.text:0040A1F1                 dec     eax
.text:0040A1F2                 cmp     esi, eax
.text:0040A1F4                 jb      short loc_40A1E0
.text:0040A1F6
.text:0040A1F6 loc_40A1F6:                             ; CODE XREF: sub_40A1B0+28↑j
.text:0040A1F6                 movzx   eax, byte ptr [esi+edi]
.text:0040A1FA                 xor     edx, edx
.text:0040A1FC                 cmp     al, 2Fh ; '/'
.text:0040A1FE                 jz      short loc_40A260
.text:0040A200                 cmp     al, 5Ch ; '\'
.text:0040A202                 jz      short loc_40A260
.text:0040A204
.text:0040A204 loc_40A204:                             ; CODE XREF: sub_40A1B0+B5↓j
.text:0040A204                 lea     ebx, [edx+esi]
.text:0040A207
.text:0040A207 loc_40A207:                             ; CODE XREF: sub_40A1B0+3F↑j
.text:0040A207                 cmp     byte ptr [edi], 0
.text:0040A20A                 mov     ebp, ebx
.text:0040A20C                 jz      short loc_40A214
.text:0040A20E                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040A212                 jz      short loc_40A25B
.text:0040A214
.text:0040A214 loc_40A214:                             ; CODE XREF: sub_40A1B0+5C↑j
.text:0040A214                 test    ebx, ebx
.text:0040A216
.text:0040A216 loc_40A216:                             ; CODE XREF: sub_40A1B0+AE↓j
.text:0040A216                 setz    [esp+2Ch+var_11]
.text:0040A21B                 movzx   ecx, [esp+2Ch+var_11]
.text:0040A220                 lea     edx, [ecx+ebx+1]
.text:0040A224                 mov     [esp+2Ch+var_2C], edx ; size_t
.text:0040A227                 call    sub_40A320
.text:0040A22C                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040A22F                 mov     esi, eax
.text:0040A231                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040A235                 mov     [esp+2Ch+Src], edi ; Src
.text:0040A239                 call    memcpy
.text:0040A23E                 cmp     [esp+2Ch+var_11], 0
.text:0040A243                 jz      short loc_40A24C
.text:0040A245                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:0040A249                 lea     ebp, [ebx+1]
.text:0040A24C
.text:0040A24C loc_40A24C:                             ; CODE XREF: sub_40A1B0+93↑j
.text:0040A24C                 mov     byte ptr [ebp+esi+0], 0
.text:0040A251                 mov     eax, esi
.text:0040A253                 add     esp, 1Ch
.text:0040A256                 pop     ebx
.text:0040A257                 pop     esi
.text:0040A258                 pop     edi
.text:0040A259                 pop     ebp
.text:0040A25A                 retn
.text:0040A25B ; ---------------------------------------------------------------------------
.text:0040A25B
.text:0040A25B loc_40A25B:                             ; CODE XREF: sub_40A1B0+62↑j
.text:0040A25B                 cmp     ebx, 2
.text:0040A25E                 jmp     short loc_40A216
.text:0040A260 ; ---------------------------------------------------------------------------
.text:0040A260
.text:0040A260 loc_40A260:                             ; CODE XREF: sub_40A1B0+4E↑j
.text:0040A260                                         ; sub_40A1B0+52↑j
.text:0040A260                 mov     edx, 1
.text:0040A265                 jmp     short loc_40A204
.text:0040A267 ; ---------------------------------------------------------------------------
.text:0040A267
.text:0040A267 loc_40A267:                             ; CODE XREF: sub_40A1B0+14↑j
.text:0040A267                 mov     esi, 2
.text:0040A26C                 jmp     loc_40A1CC
.text:0040A26C sub_40A1B0      endp
.text:0040A26C
.text:0040A26C ; ---------------------------------------------------------------------------
.text:0040A271                 align 10h
.text:0040A280 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40A2A0+3↓o
.text:0040A291 ; const char aS[]
.text:0040A291 aS              db '%s',0               ; DATA XREF: sub_40A2A0+10↓o
.text:0040A294                 align 10h
.text:0040A2A0
.text:0040A2A0 ; =============== S U B R O U T I N E =======================================
.text:0040A2A0
.text:0040A2A0 ; Attributes: noreturn
.text:0040A2A0
.text:0040A2A0 sub_40A2A0      proc near               ; CODE XREF: sub_401700:loc_402166↑p
.text:0040A2A0                                         ; sub_4064D0:loc_4065B4↑p ...
.text:0040A2A0
.text:0040A2A0 Code            = dword ptr -1Ch
.text:0040A2A0 ErrorMessage    = dword ptr -18h
.text:0040A2A0 var_14          = dword ptr -14h
.text:0040A2A0 var_10          = byte ptr -10h
.text:0040A2A0
.text:0040A2A0                 sub     esp, 1Ch
.text:0040A2A3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040A2AA                 call    ds:libintl_gettext
.text:0040A2B0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:0040A2B8                 mov     edx, Code
.text:0040A2BE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040A2C6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040A2CA                 mov     [esp+1Ch+Code], edx ; Code
.text:0040A2CD                 call    sub_415220
.text:0040A2D2                 call    abort
.text:0040A2D2 sub_40A2A0      endp
.text:0040A2D2
.text:0040A2D2 ; ---------------------------------------------------------------------------
.text:0040A2D7                 align 10h
.text:0040A2E0
.text:0040A2E0 ; =============== S U B R O U T I N E =======================================
.text:0040A2E0
.text:0040A2E0
.text:0040A2E0 sub_40A2E0      proc near
.text:0040A2E0
.text:0040A2E0 Size            = dword ptr -0Ch
.text:0040A2E0 var_4           = dword ptr -4
.text:0040A2E0 arg_0           = dword ptr  4
.text:0040A2E0 arg_4           = dword ptr  8
.text:0040A2E0
.text:0040A2E0                 sub     esp, 0Ch
.text:0040A2E3                 xor     edx, edx
.text:0040A2E5                 mov     ecx, [esp+0Ch+arg_4]
.text:0040A2E9                 mov     [esp+0Ch+var_4], ebx
.text:0040A2ED                 mov     eax, 0FFFFFFFFh
.text:0040A2F2                 mov     ebx, [esp+0Ch+arg_0]
.text:0040A2F6                 div     ecx
.text:0040A2F8                 cmp     eax, ebx
.text:0040A2FA                 jb      short loc_40A319
.text:0040A2FC                 mov     edx, ebx
.text:0040A2FE                 imul    edx, ecx
.text:0040A301                 mov     [esp+0Ch+Size], edx ; Size
.text:0040A304                 call    malloc
.text:0040A309                 test    eax, eax
.text:0040A30B                 jz      short loc_40A315
.text:0040A30D
.text:0040A30D loc_40A30D:                             ; CODE XREF: sub_40A2E0+37↓j
.text:0040A30D                 mov     ebx, [esp+0Ch+var_4]
.text:0040A311                 add     esp, 0Ch
.text:0040A314                 retn
.text:0040A315 ; ---------------------------------------------------------------------------
.text:0040A315
.text:0040A315 loc_40A315:                             ; CODE XREF: sub_40A2E0+2B↑j
.text:0040A315                 test    ebx, ebx
.text:0040A317                 jz      short loc_40A30D
.text:0040A319
.text:0040A319 loc_40A319:                             ; CODE XREF: sub_40A2E0+1A↑j
.text:0040A319                 call    sub_40A2A0
.text:0040A319 sub_40A2E0      endp
.text:0040A319
.text:0040A319 ; ---------------------------------------------------------------------------
.text:0040A31E                 align 10h
.text:0040A320
.text:0040A320 ; =============== S U B R O U T I N E =======================================
.text:0040A320
.text:0040A320
.text:0040A320 ; int __cdecl sub_40A320(size_t)
.text:0040A320 sub_40A320      proc near               ; CODE XREF: sub_4064D0+42↑p
.text:0040A320                                         ; sub_406630+48↑p ...
.text:0040A320
.text:0040A320 Size            = dword ptr -0Ch
.text:0040A320 var_4           = dword ptr -4
.text:0040A320 arg_0           = dword ptr  4
.text:0040A320
.text:0040A320                 sub     esp, 0Ch
.text:0040A323                 mov     [esp+0Ch+var_4], ebx
.text:0040A327                 mov     ebx, [esp+0Ch+arg_0]
.text:0040A32B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A32E                 call    malloc
.text:0040A333                 test    eax, eax
.text:0040A335                 jz      short loc_40A340
.text:0040A337
.text:0040A337 loc_40A337:                             ; CODE XREF: sub_40A320+22↓j
.text:0040A337                 mov     ebx, [esp+0Ch+var_4]
.text:0040A33B                 add     esp, 0Ch
.text:0040A33E                 retn
.text:0040A33E ; ---------------------------------------------------------------------------
.text:0040A33F                 align 10h
.text:0040A340
.text:0040A340 loc_40A340:                             ; CODE XREF: sub_40A320+15↑j
.text:0040A340                 test    ebx, ebx
.text:0040A342                 jz      short loc_40A337
.text:0040A344                 call    sub_40A2A0
.text:0040A344 sub_40A320      endp
.text:0040A344
.text:0040A344 ; ---------------------------------------------------------------------------
.text:0040A349                 align 10h
.text:0040A350
.text:0040A350 ; =============== S U B R O U T I N E =======================================
.text:0040A350
.text:0040A350
.text:0040A350 ; int __cdecl sub_40A350(void *, int, int)
.text:0040A350 sub_40A350      proc near               ; CODE XREF: sub_4096F0+237↑p
.text:0040A350
.text:0040A350 Block           = dword ptr -1Ch
.text:0040A350 Size            = dword ptr -18h
.text:0040A350 var_8           = dword ptr -8
.text:0040A350 var_4           = dword ptr -4
.text:0040A350 arg_0           = dword ptr  4
.text:0040A350 arg_4           = dword ptr  8
.text:0040A350 arg_8           = dword ptr  0Ch
.text:0040A350
.text:0040A350                 sub     esp, 1Ch
.text:0040A353                 xor     edx, edx
.text:0040A355                 mov     eax, 0FFFFFFFFh
.text:0040A35A                 mov     [esp+1Ch+var_8], ebx
.text:0040A35E                 mov     ecx, [esp+1Ch+arg_0]
.text:0040A362                 mov     ebx, [esp+1Ch+arg_8]
.text:0040A366                 mov     [esp+1Ch+var_4], esi
.text:0040A36A                 mov     esi, [esp+1Ch+arg_4]
.text:0040A36E                 div     ebx
.text:0040A370                 cmp     eax, esi
.text:0040A372                 jb      short loc_40A3A4
.text:0040A374                 mov     [esp+1Ch+Block], ecx ; Block
.text:0040A377                 mov     edx, esi
.text:0040A379                 imul    edx, ebx
.text:0040A37C                 mov     [esp+1Ch+Size], edx ; Size
.text:0040A380                 call    realloc
.text:0040A385                 test    eax, eax
.text:0040A387                 mov     ecx, eax
.text:0040A389                 jz      short loc_40A3A0
.text:0040A38B
.text:0040A38B loc_40A38B:                             ; CODE XREF: sub_40A350+52↓j
.text:0040A38B                 mov     ebx, [esp+1Ch+var_8]
.text:0040A38F                 mov     eax, ecx
.text:0040A391                 mov     esi, [esp+1Ch+var_4]
.text:0040A395                 add     esp, 1Ch
.text:0040A398                 retn
.text:0040A398 ; ---------------------------------------------------------------------------
.text:0040A399                 align 10h
.text:0040A3A0
.text:0040A3A0 loc_40A3A0:                             ; CODE XREF: sub_40A350+39↑j
.text:0040A3A0                 test    esi, esi
.text:0040A3A2                 jz      short loc_40A38B
.text:0040A3A4
.text:0040A3A4 loc_40A3A4:                             ; CODE XREF: sub_40A350+22↑j
.text:0040A3A4                 call    sub_40A2A0
.text:0040A3A4 sub_40A350      endp
.text:0040A3A4
.text:0040A3A4 ; ---------------------------------------------------------------------------
.text:0040A3A9                 align 10h
.text:0040A3B0
.text:0040A3B0 ; =============== S U B R O U T I N E =======================================
.text:0040A3B0
.text:0040A3B0
.text:0040A3B0 ; int __cdecl sub_40A3B0(void *, size_t)
.text:0040A3B0 sub_40A3B0      proc near               ; CODE XREF: sub_40BF00+BC↓p
.text:0040A3B0                                         ; sub_40D8C0+5B↓p
.text:0040A3B0
.text:0040A3B0 Block           = dword ptr -0Ch
.text:0040A3B0 Size            = dword ptr -8
.text:0040A3B0 var_4           = dword ptr -4
.text:0040A3B0 arg_0           = dword ptr  4
.text:0040A3B0 arg_4           = dword ptr  8
.text:0040A3B0
.text:0040A3B0                 sub     esp, 0Ch
.text:0040A3B3                 mov     edx, [esp+0Ch+arg_0]
.text:0040A3B7                 mov     [esp+0Ch+var_4], ebx
.text:0040A3BB                 mov     ebx, [esp+0Ch+arg_4]
.text:0040A3BF                 mov     [esp+0Ch+Block], edx ; Block
.text:0040A3C2                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A3C6                 call    realloc
.text:0040A3CB                 test    eax, eax
.text:0040A3CD                 jz      short loc_40A3D7
.text:0040A3CF
.text:0040A3CF loc_40A3CF:                             ; CODE XREF: sub_40A3B0+29↓j
.text:0040A3CF                 mov     ebx, [esp+0Ch+var_4]
.text:0040A3D3                 add     esp, 0Ch
.text:0040A3D6                 retn
.text:0040A3D7 ; ---------------------------------------------------------------------------
.text:0040A3D7
.text:0040A3D7 loc_40A3D7:                             ; CODE XREF: sub_40A3B0+1D↑j
.text:0040A3D7                 test    ebx, ebx
.text:0040A3D9                 jz      short loc_40A3CF
.text:0040A3DB                 call    sub_40A2A0
.text:0040A3DB sub_40A3B0      endp
.text:0040A3DB
.text:0040A3E0 ; ---------------------------------------------------------------------------
.text:0040A3E0                 jmp     sub_40A530
.text:0040A3E0 ; ---------------------------------------------------------------------------
.text:0040A3E5                 align 10h
.text:0040A3F0                 sub     esp, 0Ch
.text:0040A3F3                 mov     edx, [esp+14h]
.text:0040A3F7                 mov     dword ptr [esp+8], 1
.text:0040A3FF                 mov     [esp+4], edx
.text:0040A403                 mov     edx, [esp+10h]
.text:0040A407                 mov     [esp], edx
.text:0040A40A                 call    sub_40A530
.text:0040A40F                 add     esp, 0Ch
.text:0040A412                 retn
.text:0040A412 ; ---------------------------------------------------------------------------
.text:0040A413                 align 10h
.text:0040A420                 sub     esp, 1Ch
.text:0040A423                 mov     [esp+18h], ebx
.text:0040A427                 mov     ebx, [esp+20h]
.text:0040A42B                 mov     [esp], ebx
.text:0040A42E                 call    malloc
.text:0040A433                 test    eax, eax
.text:0040A435                 jz      short loc_40A453
.text:0040A437
.text:0040A437 loc_40A437:                             ; CODE XREF: .text:0040A455↓j
.text:0040A437                 mov     [esp+8], ebx
.text:0040A43B                 mov     dword ptr [esp+4], 0
.text:0040A443                 mov     [esp], eax
.text:0040A446                 call    memset
.text:0040A44B                 mov     ebx, [esp+18h]
.text:0040A44F                 add     esp, 1Ch
.text:0040A452                 retn
.text:0040A453 ; ---------------------------------------------------------------------------
.text:0040A453
.text:0040A453 loc_40A453:                             ; CODE XREF: .text:0040A435↑j
.text:0040A453                 test    ebx, ebx
.text:0040A455                 jz      short loc_40A437
.text:0040A457                 call    sub_40A2A0
.text:0040A457 ; ---------------------------------------------------------------------------
.text:0040A45C                 align 10h
.text:0040A460                 sub     esp, 0Ch
.text:0040A463                 xor     edx, edx
.text:0040A465                 mov     ecx, [esp+14h]
.text:0040A469                 mov     [esp+8], ebx
.text:0040A46D                 mov     eax, 0FFFFFFFFh
.text:0040A472                 mov     ebx, [esp+10h]
.text:0040A476                 div     ecx
.text:0040A478                 cmp     eax, ebx
.text:0040A47A                 jb      short loc_40A498
.text:0040A47C                 mov     [esp+4], ecx
.text:0040A480                 mov     [esp], ebx
.text:0040A483                 call    calloc
.text:0040A488                 test    eax, eax
.text:0040A48A                 jz      short loc_40A494
.text:0040A48C
.text:0040A48C loc_40A48C:                             ; CODE XREF: .text:0040A496↓j
.text:0040A48C                 mov     ebx, [esp+8]
.text:0040A490                 add     esp, 0Ch
.text:0040A493                 retn
.text:0040A494 ; ---------------------------------------------------------------------------
.text:0040A494
.text:0040A494 loc_40A494:                             ; CODE XREF: .text:0040A48A↑j
.text:0040A494                 test    ebx, ebx
.text:0040A496                 jz      short loc_40A48C
.text:0040A498
.text:0040A498 loc_40A498:                             ; CODE XREF: .text:0040A47A↑j
.text:0040A498                 call    sub_40A2A0
.text:0040A498 ; ---------------------------------------------------------------------------
.text:0040A49D                 align 10h
.text:0040A4A0                 sub     esp, 1Ch
.text:0040A4A3                 mov     [esp+18h], ebx
.text:0040A4A7                 mov     ebx, [esp+24h]
.text:0040A4AB                 mov     [esp], ebx
.text:0040A4AE                 call    malloc
.text:0040A4B3                 test    eax, eax
.text:0040A4B5                 mov     edx, eax
.text:0040A4B7                 jz      short loc_40A4D5
.text:0040A4B9
.text:0040A4B9 loc_40A4B9:                             ; CODE XREF: .text:0040A4D7↓j
.text:0040A4B9                 mov     [esp+8], ebx
.text:0040A4BD                 mov     ecx, [esp+20h]
.text:0040A4C1                 mov     [esp], edx
.text:0040A4C4                 mov     [esp+4], ecx
.text:0040A4C8                 call    memcpy
.text:0040A4CD                 mov     ebx, [esp+18h]
.text:0040A4D1                 add     esp, 1Ch
.text:0040A4D4                 retn
.text:0040A4D5 ; ---------------------------------------------------------------------------
.text:0040A4D5
.text:0040A4D5 loc_40A4D5:                             ; CODE XREF: .text:0040A4B7↑j
.text:0040A4D5                 test    ebx, ebx
.text:0040A4D7                 jz      short loc_40A4B9
.text:0040A4D9                 call    sub_40A2A0
.text:0040A4D9 ; ---------------------------------------------------------------------------
.text:0040A4DE                 align 10h
.text:0040A4E0
.text:0040A4E0 ; =============== S U B R O U T I N E =======================================
.text:0040A4E0
.text:0040A4E0
.text:0040A4E0 ; int __cdecl sub_40A4E0(char *)
.text:0040A4E0 sub_40A4E0      proc near               ; CODE XREF: sub_401700+496↑p
.text:0040A4E0                                         ; sub_4064D0+4C↑p ...
.text:0040A4E0
.text:0040A4E0 Str             = dword ptr -1Ch
.text:0040A4E0 Src             = dword ptr -18h
.text:0040A4E0 Size            = dword ptr -14h
.text:0040A4E0 var_8           = dword ptr -8
.text:0040A4E0 var_4           = dword ptr -4
.text:0040A4E0 arg_0           = dword ptr  4
.text:0040A4E0
.text:0040A4E0                 sub     esp, 1Ch
.text:0040A4E3                 mov     [esp+1Ch+var_4], esi
.text:0040A4E7                 mov     esi, [esp+1Ch+arg_0]
.text:0040A4EB                 mov     [esp+1Ch+var_8], ebx
.text:0040A4EF                 mov     [esp+1Ch+Str], esi ; Str
.text:0040A4F2                 call    strlen
.text:0040A4F7                 lea     ebx, [eax+1]
.text:0040A4FA                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040A4FD                 call    malloc
.text:0040A502                 test    eax, eax
.text:0040A504                 jz      short loc_40A522
.text:0040A506
.text:0040A506 loc_40A506:                             ; CODE XREF: sub_40A4E0+44↓j
.text:0040A506                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040A50A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040A50E                 mov     [esp+1Ch+Str], eax ; void *
.text:0040A511                 call    memcpy
.text:0040A516                 mov     ebx, [esp+1Ch+var_8]
.text:0040A51A                 mov     esi, [esp+1Ch+var_4]
.text:0040A51E                 add     esp, 1Ch
.text:0040A521                 retn
.text:0040A522 ; ---------------------------------------------------------------------------
.text:0040A522
.text:0040A522 loc_40A522:                             ; CODE XREF: sub_40A4E0+24↑j
.text:0040A522                 test    ebx, ebx
.text:0040A524                 jz      short loc_40A506
.text:0040A526                 call    sub_40A2A0
.text:0040A526 sub_40A4E0      endp
.text:0040A526
.text:0040A526 ; ---------------------------------------------------------------------------
.text:0040A52B                 align 10h
.text:0040A530
.text:0040A530 ; =============== S U B R O U T I N E =======================================
.text:0040A530
.text:0040A530
.text:0040A530 ; int __cdecl sub_40A530(void *, int, int)
.text:0040A530 sub_40A530      proc near               ; CODE XREF: .text:0040A3E0↑j
.text:0040A530                                         ; .text:0040A40A↑p
.text:0040A530
.text:0040A530 Block           = dword ptr -1Ch
.text:0040A530 Size            = dword ptr -18h
.text:0040A530 var_C           = dword ptr -0Ch
.text:0040A530 var_8           = dword ptr -8
.text:0040A530 var_4           = dword ptr -4
.text:0040A530 arg_0           = dword ptr  4
.text:0040A530 arg_4           = dword ptr  8
.text:0040A530 arg_8           = dword ptr  0Ch
.text:0040A530
.text:0040A530                 sub     esp, 1Ch
.text:0040A533                 mov     [esp+1Ch+var_8], esi
.text:0040A537                 mov     esi, [esp+1Ch+arg_0]
.text:0040A53B                 mov     [esp+1Ch+var_4], edi
.text:0040A53F                 mov     edi, [esp+1Ch+arg_4]
.text:0040A543                 test    esi, esi
.text:0040A545                 mov     [esp+1Ch+var_C], ebx
.text:0040A549                 mov     ecx, [edi]
.text:0040A54B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040A54F                 jz      short loc_40A590
.text:0040A551                 xor     edx, edx
.text:0040A553                 mov     eax, 7FFFFFFFh
.text:0040A558                 div     ebx
.text:0040A55A                 cmp     eax, ecx
.text:0040A55C                 jb      short loc_40A589
.text:0040A55E                 add     ecx, ecx
.text:0040A560
.text:0040A560 loc_40A560:                             ; CODE XREF: sub_40A530+62↓j
.text:0040A560                                         ; sub_40A530+71↓j ...
.text:0040A560                 mov     [edi], ecx
.text:0040A562                 imul    ebx, ecx
.text:0040A565                 mov     [esp+1Ch+Block], esi ; Block
.text:0040A568                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040A56C                 call    realloc
.text:0040A571                 test    eax, eax
.text:0040A573                 jz      short loc_40A585
.text:0040A575
.text:0040A575 loc_40A575:                             ; CODE XREF: sub_40A530+57↓j
.text:0040A575                 mov     ebx, [esp+1Ch+var_C]
.text:0040A579                 mov     esi, [esp+1Ch+var_8]
.text:0040A57D                 mov     edi, [esp+1Ch+var_4]
.text:0040A581                 add     esp, 1Ch
.text:0040A584                 retn
.text:0040A585 ; ---------------------------------------------------------------------------
.text:0040A585
.text:0040A585 loc_40A585:                             ; CODE XREF: sub_40A530+43↑j
.text:0040A585                 test    ebx, ebx
.text:0040A587                 jz      short loc_40A575
.text:0040A589
.text:0040A589 loc_40A589:                             ; CODE XREF: sub_40A530+2C↑j
.text:0040A589                 call    sub_40A2A0
.text:0040A589 ; ---------------------------------------------------------------------------
.text:0040A58E                 align 10h
.text:0040A590
.text:0040A590 loc_40A590:                             ; CODE XREF: sub_40A530+1F↑j
.text:0040A590                 test    ecx, ecx
.text:0040A592                 jnz     short loc_40A560
.text:0040A594                 xor     edx, edx
.text:0040A596                 mov     eax, 40h ; '@'
.text:0040A59B                 div     ebx
.text:0040A59D                 test    eax, eax
.text:0040A59F                 mov     ecx, eax
.text:0040A5A1                 jnz     short loc_40A560
.text:0040A5A3                 mov     ecx, 1
.text:0040A5A8                 jmp     short loc_40A560
.text:0040A5A8 sub_40A530      endp
.text:0040A5A8
.text:0040A5A8 ; ---------------------------------------------------------------------------
.text:0040A5AA                 align 10h
.text:0040A5B0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:0040A5B0                                         ; DATA XREF: .data:Buffer↓o
.text:0040A5E2 ; const char aSSS[]
.text:0040A5E2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_40A8A0+50↓o
.text:0040A5EE aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040A5EE                                         ; DATA XREF: sub_40A8A0:loc_40A941↓o
.text:0040A5FE                 db 12h dup(90h)
.text:0040A610 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:0040A610                                         ; DATA XREF: sub_40A8A0+100↓o
.text:0040A610                 db 'ere is NO',0Ah
.text:0040A610                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:0040A610                 db 'R PURPOSE.',0Ah,0
.text:0040A6A8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:0040A6A8                                         ; DATA XREF: sub_40A8A0:loc_40A9E1↓o
.text:0040A6BF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040A6BF                                         ; DATA XREF: sub_40A8A0:loc_40A9ED↓o
.text:0040A6DB                 db 15h dup(90h)
.text:0040A6F0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:0040A6F0                                         ; DATA XREF: sub_40A8A0:loc_40A9F9↓o
.text:0040A6F0                 db 'and %s.',0Ah,0
.text:0040A710 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:0040A710                                         ; DATA XREF: sub_40A8A0:loc_40AA05↓o
.text:0040A710                 db '%s, and %s.',0Ah,0
.text:0040A734                 db 1Ch dup(90h)
.text:0040A750 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:0040A750                                         ; DATA XREF: sub_40A8A0:loc_40AA11↓o
.text:0040A750                 db '%s, %s, and %s.',0Ah,0
.text:0040A778                 db 18h dup(90h)
.text:0040A790 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:0040A790                                         ; DATA XREF: sub_40A8A0:loc_40AA1D↓o
.text:0040A790                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040A7BC                 db 14h dup(90h)
.text:0040A7D0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:0040A7D0                                         ; DATA XREF: sub_40A8A0:loc_40AA29↓o
.text:0040A7D0                 db '%s, %s, %s, %s,',0Ah
.text:0040A7D0                 db 'and %s.',0Ah,0
.text:0040A800                 db 10h dup(90h)
.text:0040A810 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:0040A810                                         ; DATA XREF: sub_40A8A0:loc_40AA35↓o
.text:0040A810                 db '%s, %s, %s, %s,',0Ah
.text:0040A810                 db '%s, and %s.',0Ah,0
.text:0040A844                 align 10h
.text:0040A850 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:0040A850                                         ; DATA XREF: sub_40A8A0:def_40A90D↓o
.text:0040A850                 db '%s, %s, %s, %s,',0Ah
.text:0040A850                 db '%s, %s, and others.',0Ah,0
.text:0040A88C ; const char aSS_1[]
.text:0040A88C aSS_1           db '%s %s',0Ah,0        ; DATA XREF: sub_40A8A0+1B5↓o
.text:0040A893                 align 10h
.text:0040A8A0
.text:0040A8A0 ; =============== S U B R O U T I N E =======================================
.text:0040A8A0
.text:0040A8A0
.text:0040A8A0 ; int __cdecl sub_40A8A0(FILE *, FILE *, int, int, va_list)
.text:0040A8A0 sub_40A8A0      proc near               ; CODE XREF: sub_40AA70+2A↓p
.text:0040A8A0
.text:0040A8A0 Stream          = dword ptr -2Ch
.text:0040A8A0 Format          = dword ptr -28h
.text:0040A8A0 ArgList         = dword ptr -24h
.text:0040A8A0 var_20          = dword ptr -20h
.text:0040A8A0 var_1C          = dword ptr -1Ch
.text:0040A8A0 var_14          = dword ptr -14h
.text:0040A8A0 arg_0           = dword ptr  4
.text:0040A8A0 arg_4           = dword ptr  8
.text:0040A8A0 arg_8           = dword ptr  0Ch
.text:0040A8A0 arg_C           = dword ptr  10h
.text:0040A8A0 arg_10          = dword ptr  14h
.text:0040A8A0
.text:0040A8A0                 push    ebp
.text:0040A8A1                 push    edi
.text:0040A8A2                 push    esi
.text:0040A8A3                 push    ebx
.text:0040A8A4                 sub     esp, 1Ch
.text:0040A8A7                 xor     ebx, ebx
.text:0040A8A9                 mov     edi, [esp+2Ch+arg_10]
.text:0040A8AD                 mov     edx, [esp+2Ch+arg_8]
.text:0040A8B1                 mov     esi, [esp+2Ch+arg_0]
.text:0040A8B5                 mov     eax, [edi]
.text:0040A8B7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A8BB                 mov     [esp+2Ch+var_14], edx
.text:0040A8BF                 mov     ebp, [esp+2Ch+arg_C]
.text:0040A8C3                 lea     edx, [edi+4]
.text:0040A8C6                 test    eax, eax
.text:0040A8C8                 jz      short loc_40A8DC
.text:0040A8CA                 lea     esi, [esi+0]
.text:0040A8D0
.text:0040A8D0 loc_40A8D0:                             ; CODE XREF: sub_40A8A0+3A↓j
.text:0040A8D0                 mov     eax, edx
.text:0040A8D2                 inc     ebx
.text:0040A8D3                 mov     eax, [eax]
.text:0040A8D5                 add     edx, 4
.text:0040A8D8                 test    eax, eax
.text:0040A8DA                 jnz     short loc_40A8D0
.text:0040A8DC
.text:0040A8DC loc_40A8DC:                             ; CODE XREF: sub_40A8A0+28↑j
.text:0040A8DC                 test    ecx, ecx
.text:0040A8DE                 jz      loc_40AA4D
.text:0040A8E4                 mov     [esp+2Ch+var_1C], ebp
.text:0040A8E8                 mov     edx, [esp+2Ch+var_14]
.text:0040A8EC                 mov     [esp+2Ch+ArgList], ecx
.text:0040A8F0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:0040A8F8                 mov     [esp+2Ch+var_20], edx
.text:0040A8FC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A8FF                 call    fprintf
.text:0040A904
.text:0040A904 loc_40A904:                             ; CODE XREF: sub_40A8A0+1C9↓j
.text:0040A904                 cmp     ebx, 9          ; switch 10 cases
.text:0040A907                 ja      def_40A90D      ; jumptable 0040A90D default case
.text:0040A90D                 jmp     ds:jpt_40A90D[ebx*4] ; switch jump
.text:0040A90D ; ---------------------------------------------------------------------------
.text:0040A914 jpt_40A90D      dd offset loc_40A93C    ; DATA XREF: sub_40A8A0+6D↑r
.text:0040A914                 dd offset loc_40A941    ; jump table for switch statement
.text:0040A914                 dd offset loc_40A9E1
.text:0040A914                 dd offset loc_40A9ED
.text:0040A914                 dd offset loc_40A9F9
.text:0040A914                 dd offset loc_40AA05
.text:0040A914                 dd offset loc_40AA11
.text:0040A914                 dd offset loc_40AA1D
.text:0040A914                 dd offset loc_40AA29
.text:0040A914                 dd offset loc_40AA35
.text:0040A93C ; ---------------------------------------------------------------------------
.text:0040A93C
.text:0040A93C loc_40A93C:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040A93C                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040A93C                 call    abort           ; jumptable 0040A90D case 0
.text:0040A941 ; ---------------------------------------------------------------------------
.text:0040A941
.text:0040A941 loc_40A941:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040A941                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040A941                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040A90D case 1
.text:0040A948                 nop
.text:0040A949                 lea     esi, [esi+0]
.text:0040A950
.text:0040A950 loc_40A950:                             ; CODE XREF: sub_40A8A0+148↓j
.text:0040A950                                         ; sub_40A8A0+154↓j ...
.text:0040A950                 call    ds:libintl_gettext
.text:0040A956                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040A95A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A95D                 mov     [esp+2Ch+Format], eax ; Format
.text:0040A961                 call    vfprintf
.text:0040A966                 mov     ebx, [esi+4]
.text:0040A969                 dec     ebx
.text:0040A96A                 test    ebx, ebx
.text:0040A96C                 mov     [esi+4], ebx
.text:0040A96F                 js      short loc_40A9CF
.text:0040A971                 mov     edi, [esi]
.text:0040A973                 mov     byte ptr [edi], 0Ah
.text:0040A976                 inc     dword ptr [esi]
.text:0040A978
.text:0040A978 loc_40A978:                             ; CODE XREF: sub_40A8A0+13F↓j
.text:0040A978                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040A97C                 mov     edx, Buffer
.text:0040A982                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:0040A985                 call    fputs
.text:0040A98A                 mov     ebp, [esi+4]
.text:0040A98D                 dec     ebp
.text:0040A98E                 test    ebp, ebp
.text:0040A990                 mov     [esi+4], ebp
.text:0040A993                 js      short loc_40A9BD
.text:0040A995                 mov     ecx, [esi]
.text:0040A997                 mov     byte ptr [ecx], 0Ah
.text:0040A99A                 inc     dword ptr [esi]
.text:0040A99C
.text:0040A99C loc_40A99C:                             ; CODE XREF: sub_40A8A0+12D↓j
.text:0040A99C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:0040A9A0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:0040A9A7                 call    ds:libintl_gettext
.text:0040A9AD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:0040A9B1                 add     esp, 1Ch
.text:0040A9B4                 pop     ebx
.text:0040A9B5                 pop     esi
.text:0040A9B6                 pop     edi
.text:0040A9B7                 pop     ebp
.text:0040A9B8                 jmp     fputs
.text:0040A9BD ; ---------------------------------------------------------------------------
.text:0040A9BD
.text:0040A9BD loc_40A9BD:                             ; CODE XREF: sub_40A8A0+F3↑j
.text:0040A9BD                 mov     [esp+2Ch+Format], esi ; File
.text:0040A9C1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040A9C8                 call    _flsbuf
.text:0040A9CD                 jmp     short loc_40A99C
.text:0040A9CF ; ---------------------------------------------------------------------------
.text:0040A9CF
.text:0040A9CF loc_40A9CF:                             ; CODE XREF: sub_40A8A0+CF↑j
.text:0040A9CF                 mov     [esp+2Ch+Format], esi ; File
.text:0040A9D3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040A9DA                 call    _flsbuf
.text:0040A9DF                 jmp     short loc_40A978
.text:0040A9E1 ; ---------------------------------------------------------------------------
.text:0040A9E1
.text:0040A9E1 loc_40A9E1:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040A9E1                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040A9E1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040A90D case 2
.text:0040A9E8                 jmp     loc_40A950
.text:0040A9ED ; ---------------------------------------------------------------------------
.text:0040A9ED
.text:0040A9ED loc_40A9ED:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040A9ED                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040A9ED                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040A90D case 3
.text:0040A9F4                 jmp     loc_40A950
.text:0040A9F9 ; ---------------------------------------------------------------------------
.text:0040A9F9
.text:0040A9F9 loc_40A9F9:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040A9F9                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040A9F9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040A90D case 4
.text:0040AA00                 jmp     loc_40A950
.text:0040AA05 ; ---------------------------------------------------------------------------
.text:0040AA05
.text:0040AA05 loc_40AA05:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040AA05                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040AA05                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040A90D case 5
.text:0040AA0C                 jmp     loc_40A950
.text:0040AA11 ; ---------------------------------------------------------------------------
.text:0040AA11
.text:0040AA11 loc_40AA11:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040AA11                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040AA11                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040A90D case 6
.text:0040AA18                 jmp     loc_40A950
.text:0040AA1D ; ---------------------------------------------------------------------------
.text:0040AA1D
.text:0040AA1D loc_40AA1D:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040AA1D                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040AA1D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040A90D case 7
.text:0040AA24                 jmp     loc_40A950
.text:0040AA29 ; ---------------------------------------------------------------------------
.text:0040AA29
.text:0040AA29 loc_40AA29:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040AA29                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040AA29                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040A90D case 8
.text:0040AA30                 jmp     loc_40A950
.text:0040AA35 ; ---------------------------------------------------------------------------
.text:0040AA35
.text:0040AA35 loc_40AA35:                             ; CODE XREF: sub_40A8A0+6D↑j
.text:0040AA35                                         ; DATA XREF: sub_40A8A0:jpt_40A90D↑o
.text:0040AA35                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040A90D case 9
.text:0040AA3C                 jmp     loc_40A950
.text:0040AA41 ; ---------------------------------------------------------------------------
.text:0040AA41
.text:0040AA41 def_40A90D:                             ; CODE XREF: sub_40A8A0+67↑j
.text:0040AA41                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040A90D default case
.text:0040AA48                 jmp     loc_40A950
.text:0040AA4D ; ---------------------------------------------------------------------------
.text:0040AA4D
.text:0040AA4D loc_40AA4D:                             ; CODE XREF: sub_40A8A0+3E↑j
.text:0040AA4D                 mov     [esp+2Ch+var_20], ebp
.text:0040AA51                 mov     ecx, [esp+2Ch+var_14]
.text:0040AA55                 mov     [esp+2Ch+Format], offset aSS_1 ; "%s %s\n"
.text:0040AA5D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040AA60                 mov     [esp+2Ch+ArgList], ecx
.text:0040AA64                 call    fprintf
.text:0040AA69                 jmp     loc_40A904
.text:0040AA69 sub_40A8A0      endp
.text:0040AA69
.text:0040AA69 ; ---------------------------------------------------------------------------
.text:0040AA6E                 align 10h
.text:0040AA70
.text:0040AA70 ; =============== S U B R O U T I N E =======================================
.text:0040AA70
.text:0040AA70
.text:0040AA70 ; int __cdecl sub_40AA70(FILE *, FILE *, int, int, char)
.text:0040AA70 sub_40AA70      proc near               ; CODE XREF: sub_401700+212↑p
.text:0040AA70
.text:0040AA70 var_1C          = dword ptr -1Ch
.text:0040AA70 var_18          = dword ptr -18h
.text:0040AA70 var_14          = dword ptr -14h
.text:0040AA70 var_10          = dword ptr -10h
.text:0040AA70 var_C           = dword ptr -0Ch
.text:0040AA70 arg_0           = dword ptr  4
.text:0040AA70 arg_4           = dword ptr  8
.text:0040AA70 arg_8           = dword ptr  0Ch
.text:0040AA70 arg_C           = dword ptr  10h
.text:0040AA70 arg_10          = byte ptr  14h
.text:0040AA70
.text:0040AA70                 sub     esp, 1Ch
.text:0040AA73                 mov     edx, [esp+1Ch+arg_C]
.text:0040AA77                 lea     ecx, [esp+1Ch+arg_10]
.text:0040AA7B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040AA7F                 mov     ecx, [esp+1Ch+arg_8]
.text:0040AA83                 mov     [esp+1Ch+var_10], edx ; int
.text:0040AA87                 mov     edx, [esp+1Ch+arg_4]
.text:0040AA8B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040AA8F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:0040AA93                 mov     edx, [esp+1Ch+arg_0]
.text:0040AA97                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040AA9A                 call    sub_40A8A0
.text:0040AA9F                 add     esp, 1Ch
.text:0040AAA2                 retn
.text:0040AAA2 sub_40AA70      endp
.text:0040AAA2
.text:0040AAA2 ; ---------------------------------------------------------------------------
.text:0040AAA3                 align 10h
.text:0040AAB0
.text:0040AAB0 ; =============== S U B R O U T I N E =======================================
.text:0040AAB0
.text:0040AAB0
.text:0040AAB0 ; int __cdecl sub_40AAB0(int, int, char *, int, int)
.text:0040AAB0 sub_40AAB0      proc near               ; CODE XREF: sub_401700+185↑p
.text:0040AAB0
.text:0040AAB0 var_1C          = dword ptr -1Ch
.text:0040AAB0 var_18          = dword ptr -18h
.text:0040AAB0 var_14          = dword ptr -14h
.text:0040AAB0 var_10          = dword ptr -10h
.text:0040AAB0 var_C           = dword ptr -0Ch
.text:0040AAB0 var_8           = dword ptr -8
.text:0040AAB0 var_4           = dword ptr -4
.text:0040AAB0 arg_0           = dword ptr  4
.text:0040AAB0 arg_4           = dword ptr  8
.text:0040AAB0 arg_8           = dword ptr  0Ch
.text:0040AAB0 arg_C           = dword ptr  10h
.text:0040AAB0 arg_10          = dword ptr  14h
.text:0040AAB0
.text:0040AAB0                 sub     esp, 1Ch
.text:0040AAB3                 mov     edx, [esp+1Ch+arg_C]
.text:0040AAB7                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040AABF                 mov     ecx, [esp+1Ch+arg_10]
.text:0040AAC3                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040AACB                 mov     [esp+1Ch+var_10], edx ; int
.text:0040AACF                 mov     edx, [esp+1Ch+arg_4]
.text:0040AAD3                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040AAD7                 mov     ecx, [esp+1Ch+arg_8]
.text:0040AADB                 mov     [esp+1Ch+var_18], edx ; int
.text:0040AADF                 mov     edx, [esp+1Ch+arg_0]
.text:0040AAE3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040AAE7                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040AAEA                 call    sub_409150
.text:0040AAEF                 add     esp, 1Ch
.text:0040AAF2                 retn
.text:0040AAF2 sub_40AAB0      endp
.text:0040AAF2
.text:0040AAF2 ; ---------------------------------------------------------------------------
.text:0040AAF3                 align 10h
.text:0040AB00                 sub     esp, 2Ch
.text:0040AB03                 mov     edx, [esp+44h]
.text:0040AB07                 mov     dword ptr [esp+18h], 0
.text:0040AB0F                 mov     ecx, [esp+40h]
.text:0040AB13                 mov     dword ptr [esp+14h], 0
.text:0040AB1B                 mov     [esp+1Ch], edx
.text:0040AB1F                 mov     edx, [esp+3Ch]
.text:0040AB23                 mov     [esp+10h], ecx
.text:0040AB27                 mov     ecx, [esp+38h]
.text:0040AB2B                 mov     [esp+0Ch], edx
.text:0040AB2F                 mov     edx, [esp+34h]
.text:0040AB33                 mov     [esp+8], ecx
.text:0040AB37                 mov     [esp+4], edx
.text:0040AB3B                 mov     edx, [esp+30h]
.text:0040AB3F                 mov     [esp], edx
.text:0040AB42                 call    sub_4085C0
.text:0040AB47                 add     esp, 2Ch
.text:0040AB4A                 retn
.text:0040AB4A ; ---------------------------------------------------------------------------
.text:0040AB4B                 align 10h
.text:0040AB50                 sub     esp, 1Ch
.text:0040AB53                 mov     edx, [esp+2Ch]
.text:0040AB57                 mov     dword ptr [esp+18h], 0
.text:0040AB5F                 mov     ecx, [esp+30h]
.text:0040AB63                 mov     dword ptr [esp+14h], 1
.text:0040AB6B                 mov     [esp+0Ch], edx
.text:0040AB6F                 mov     edx, [esp+24h]
.text:0040AB73                 mov     [esp+10h], ecx
.text:0040AB77                 mov     ecx, [esp+28h]
.text:0040AB7B                 mov     [esp+4], edx
.text:0040AB7F                 mov     edx, [esp+20h]
.text:0040AB83                 mov     [esp+8], ecx
.text:0040AB87                 mov     [esp], edx
.text:0040AB8A                 call    sub_409150
.text:0040AB8F                 add     esp, 1Ch
.text:0040AB92                 retn
.text:0040AB92 ; ---------------------------------------------------------------------------
.text:0040AB93                 align 10h
.text:0040ABA0                 sub     esp, 2Ch
.text:0040ABA3                 mov     edx, [esp+44h]
.text:0040ABA7                 mov     dword ptr [esp+18h], 0
.text:0040ABAF                 mov     ecx, [esp+40h]
.text:0040ABB3                 mov     dword ptr [esp+14h], 1
.text:0040ABBB                 mov     [esp+1Ch], edx
.text:0040ABBF                 mov     edx, [esp+3Ch]
.text:0040ABC3                 mov     [esp+10h], ecx
.text:0040ABC7                 mov     ecx, [esp+38h]
.text:0040ABCB                 mov     [esp+0Ch], edx
.text:0040ABCF                 mov     edx, [esp+34h]
.text:0040ABD3                 mov     [esp+8], ecx
.text:0040ABD7                 mov     [esp+4], edx
.text:0040ABDB                 mov     edx, [esp+30h]
.text:0040ABDF                 mov     [esp], edx
.text:0040ABE2                 call    sub_4085C0
.text:0040ABE7                 add     esp, 2Ch
.text:0040ABEA                 retn
.text:0040ABEA ; ---------------------------------------------------------------------------
.text:0040ABEB                 align 10h
.text:0040ABF0                 mov     edx, [esp+4]
.text:0040ABF4                 mov     ds:dword_4210E0, edx
.text:0040ABFA                 retn
.text:0040ABFA ; ---------------------------------------------------------------------------
.text:0040ABFB aWriteError     db 'write error',0      ; DATA XREF: sub_40AC20:loc_40AC69↓o
.text:0040AC07 ; const char aSS_2[]
.text:0040AC07 aSS_2           db '%s: %s',0           ; DATA XREF: sub_40AC20+77↓o
.text:0040AC0E ; const char aS_4[]
.text:0040AC0E aS_4            db '%s',0               ; DATA XREF: sub_40AC20+A0↓o
.text:0040AC11 ; ---------------------------------------------------------------------------
.text:0040AC11                 jmp     short sub_40AC20
.text:0040AC11 ; ---------------------------------------------------------------------------
.text:0040AC13                 align 10h
.text:0040AC20
.text:0040AC20 ; =============== S U B R O U T I N E =======================================
.text:0040AC20
.text:0040AC20
.text:0040AC20 ; void __cdecl sub_40AC20()
.text:0040AC20 sub_40AC20      proc near               ; CODE XREF: .text:0040AC11↑j
.text:0040AC20                                         ; DATA XREF: sub_401700+90↑o
.text:0040AC20
.text:0040AC20 Stream          = dword ptr -2Ch
.text:0040AC20 ErrorMessage    = dword ptr -28h
.text:0040AC20 var_24          = dword ptr -24h
.text:0040AC20 var_20          = byte ptr -20h
.text:0040AC20 var_1C          = dword ptr -1Ch
.text:0040AC20 var_9           = byte ptr -9
.text:0040AC20
.text:0040AC20                 push    esi
.text:0040AC21                 push    ebx
.text:0040AC22                 sub     esp, 24h
.text:0040AC25                 mov     edx, ds:_iob
.text:0040AC2B                 mov     ecx, [edx+2Ch]
.text:0040AC2E                 lea     esi, [edx+20h]
.text:0040AC31                 shr     ecx, 5
.text:0040AC34                 mov     bl, cl
.text:0040AC36                 mov     ecx, [edx+20h]
.text:0040AC39                 and     bl, 1
.text:0040AC3C                 cmp     ecx, [esi+8]
.text:0040AC3F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040AC42                 setz    [esp+2Ch+var_9]
.text:0040AC47                 call    fclose
.text:0040AC4C                 test    eax, eax
.text:0040AC4E                 setnz   al
.text:0040AC51                 test    bl, bl
.text:0040AC53                 jnz     loc_40ACE3
.text:0040AC59                 test    al, al
.text:0040AC5B                 jz      short loc_40ACB0
.text:0040AC5D
.text:0040AC5D loc_40AC5D:                             ; CODE XREF: sub_40AC20+CD↓j
.text:0040AC5D                 call    _errno
.text:0040AC62                 mov     esi, [eax]
.text:0040AC64
.text:0040AC64 loc_40AC64:                             ; CODE XREF: sub_40AC20+C7↓j
.text:0040AC64                 cmp     esi, 9
.text:0040AC67                 jz      short loc_40ACD6
.text:0040AC69
.text:0040AC69 loc_40AC69:                             ; CODE XREF: sub_40AC20+B8↓j
.text:0040AC69                                         ; sub_40AC20+C1↓j
.text:0040AC69                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040AC70                 call    ds:libintl_gettext
.text:0040AC76                 mov     ebx, eax
.text:0040AC78                 mov     eax, ds:dword_4210E0
.text:0040AC7D                 test    eax, eax
.text:0040AC7F                 jz      short loc_40ACB6
.text:0040AC81                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040AC84                 call    sub_40D820
.text:0040AC89                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040AC8D                 mov     edx, Code
.text:0040AC93                 mov     [esp+2Ch+var_1C], ebx
.text:0040AC97                 mov     [esp+2Ch+var_24], offset aSS_2 ; "%s: %s"
.text:0040AC9F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040ACA3                 mov     [esp+2Ch+Stream], edx ; Code
.text:0040ACA6                 call    sub_415220
.text:0040ACAB                 nop
.text:0040ACAC                 lea     esi, [esi+0]
.text:0040ACB0
.text:0040ACB0 loc_40ACB0:                             ; CODE XREF: sub_40AC20+3B↑j
.text:0040ACB0                                         ; sub_40AC20+B4↓j ...
.text:0040ACB0                 add     esp, 24h
.text:0040ACB3                 pop     ebx
.text:0040ACB4                 pop     esi
.text:0040ACB5                 retn
.text:0040ACB6 ; ---------------------------------------------------------------------------
.text:0040ACB6
.text:0040ACB6 loc_40ACB6:                             ; CODE XREF: sub_40AC20+5F↑j
.text:0040ACB6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040ACBA                 mov     ebx, Code
.text:0040ACC0                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:0040ACC8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040ACCC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040ACCF                 call    sub_415220
.text:0040ACD4                 jmp     short loc_40ACB0
.text:0040ACD6 ; ---------------------------------------------------------------------------
.text:0040ACD6
.text:0040ACD6 loc_40ACD6:                             ; CODE XREF: sub_40AC20+47↑j
.text:0040ACD6                 test    bl, bl
.text:0040ACD8                 jnz     short loc_40AC69
.text:0040ACDA                 cmp     [esp+2Ch+var_9], 0
.text:0040ACDF                 jnz     short loc_40ACB0
.text:0040ACE1                 jmp     short loc_40AC69
.text:0040ACE3 ; ---------------------------------------------------------------------------
.text:0040ACE3
.text:0040ACE3 loc_40ACE3:                             ; CODE XREF: sub_40AC20+33↑j
.text:0040ACE3                 xor     esi, esi
.text:0040ACE5                 test    al, al
.text:0040ACE7                 jz      loc_40AC64
.text:0040ACED                 jmp     loc_40AC5D
.text:0040ACED sub_40AC20      endp
.text:0040ACED
.text:0040ACED ; ---------------------------------------------------------------------------
.text:0040ACF2                 align 10h
.text:0040AD00
.text:0040AD00 ; =============== S U B R O U T I N E =======================================
.text:0040AD00
.text:0040AD00
.text:0040AD00 ; int __cdecl sub_40AD00(int, char *)
.text:0040AD00 sub_40AD00      proc near               ; CODE XREF: sub_403910+21F↑p
.text:0040AD00                                         ; sub_403910+234↑p ...
.text:0040AD00
.text:0040AD00 var_C           = dword ptr -0Ch
.text:0040AD00 var_8           = dword ptr -8
.text:0040AD00 var_4           = dword ptr -4
.text:0040AD00 arg_0           = dword ptr  4
.text:0040AD00 arg_4           = dword ptr  8
.text:0040AD00
.text:0040AD00                 sub     esp, 0Ch
.text:0040AD03                 mov     edx, [esp+0Ch+arg_4]
.text:0040AD07                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040AD0F                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040AD13                 mov     edx, [esp+0Ch+arg_0]
.text:0040AD17                 mov     [esp+0Ch+var_C], edx ; int
.text:0040AD1A                 call    sub_40D4B0
.text:0040AD1F                 add     esp, 0Ch
.text:0040AD22                 retn
.text:0040AD22 sub_40AD00      endp
.text:0040AD22
.text:0040AD22 ; ---------------------------------------------------------------------------
.text:0040AD23                 align 10h
.text:0040AD30
.text:0040AD30 ; =============== S U B R O U T I N E =======================================
.text:0040AD30
.text:0040AD30
.text:0040AD30 ; int __cdecl sub_40AD30(char *)
.text:0040AD30 sub_40AD30      proc near               ; CODE XREF: sub_401700+3CF↑p
.text:0040AD30                                         ; sub_401700+40A↑p ...
.text:0040AD30
.text:0040AD30 var_C           = dword ptr -0Ch
.text:0040AD30 var_8           = dword ptr -8
.text:0040AD30 var_4           = dword ptr -4
.text:0040AD30 arg_0           = dword ptr  4
.text:0040AD30
.text:0040AD30                 sub     esp, 0Ch
.text:0040AD33                 mov     edx, [esp+0Ch+arg_0]
.text:0040AD37                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040AD3F                 mov     [esp+0Ch+var_C], 0 ; int
.text:0040AD46                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040AD4A                 call    sub_40D4B0
.text:0040AD4F                 add     esp, 0Ch
.text:0040AD52                 retn
.text:0040AD52 sub_40AD30      endp
.text:0040AD52
.text:0040AD52 ; ---------------------------------------------------------------------------
.text:0040AD53                 align 10h
.text:0040AD60
.text:0040AD60 ; =============== S U B R O U T I N E =======================================
.text:0040AD60
.text:0040AD60
.text:0040AD60 sub_40AD60      proc near               ; CODE XREF: sub_401700+852↑p
.text:0040AD60                                         ; sub_4022F0+12↑p ...
.text:0040AD60
.text:0040AD60 arg_0           = dword ptr  4
.text:0040AD60
.text:0040AD60                 mov     ecx, [esp+arg_0]
.text:0040AD64                 movzx   eax, byte ptr [ecx]
.text:0040AD67                 test    al, al
.text:0040AD69                 jz      short loc_40AD71
.text:0040AD6B                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:0040AD6F                 jz      short loc_40ADB7
.text:0040AD71
.text:0040AD71 loc_40AD71:                             ; CODE XREF: sub_40AD60+9↑j
.text:0040AD71                                         ; sub_40AD60+5D↓j
.text:0040AD71                 test    al, al
.text:0040AD73                 mov     edx, ecx
.text:0040AD75                 jz      short loc_40AD90
.text:0040AD77                 movzx   eax, byte ptr [ecx]
.text:0040AD7A                 lea     esi, [esi+0]
.text:0040AD80
.text:0040AD80 loc_40AD80:                             ; CODE XREF: sub_40AD60+2E↓j
.text:0040AD80                 cmp     al, 2Fh ; '/'
.text:0040AD82                 jz      short loc_40AD93
.text:0040AD84                 cmp     al, 5Ch ; '\'
.text:0040AD86                 jz      short loc_40AD93
.text:0040AD88
.text:0040AD88 loc_40AD88:                             ; CODE XREF: sub_40AD60+45↓j
.text:0040AD88                 inc     edx
.text:0040AD89                 movzx   eax, byte ptr [edx]
.text:0040AD8C                 test    al, al
.text:0040AD8E                 jnz     short loc_40AD80
.text:0040AD90
.text:0040AD90 loc_40AD90:                             ; CODE XREF: sub_40AD60+15↑j
.text:0040AD90                                         ; sub_40AD60+50↓j ...
.text:0040AD90                 mov     eax, ecx
.text:0040AD92                 retn
.text:0040AD93 ; ---------------------------------------------------------------------------
.text:0040AD93
.text:0040AD93 loc_40AD93:                             ; CODE XREF: sub_40AD60+22↑j
.text:0040AD93                                         ; sub_40AD60+26↑j ...
.text:0040AD93                 inc     edx
.text:0040AD94                 movzx   eax, byte ptr [edx]
.text:0040AD97                 cmp     al, 2Fh ; '/'
.text:0040AD99                 jz      short loc_40AD93
.text:0040AD9B                 cmp     al, 5Ch ; '\'
.text:0040AD9D                 jz      short loc_40AD93
.text:0040AD9F                 test    al, al
.text:0040ADA1                 jz      short loc_40ADA7
.text:0040ADA3                 mov     ecx, edx
.text:0040ADA5                 jmp     short loc_40AD88
.text:0040ADA7 ; ---------------------------------------------------------------------------
.text:0040ADA7
.text:0040ADA7 loc_40ADA7:                             ; CODE XREF: sub_40AD60+41↑j
.text:0040ADA7                 movzx   eax, byte ptr [ecx]
.text:0040ADAA                 cmp     al, 2Fh ; '/'
.text:0040ADAC                 jz      short loc_40ADB2
.text:0040ADAE                 cmp     al, 5Ch ; '\'
.text:0040ADB0                 jnz     short loc_40AD90
.text:0040ADB2
.text:0040ADB2 loc_40ADB2:                             ; CODE XREF: sub_40AD60+4C↑j
.text:0040ADB2                 lea     ecx, [edx-1]
.text:0040ADB5                 jmp     short loc_40AD90
.text:0040ADB7 ; ---------------------------------------------------------------------------
.text:0040ADB7
.text:0040ADB7 loc_40ADB7:                             ; CODE XREF: sub_40AD60+F↑j
.text:0040ADB7                 add     ecx, 2
.text:0040ADBA                 movzx   eax, byte ptr [ecx]
.text:0040ADBD                 jmp     short loc_40AD71
.text:0040ADBD sub_40AD60      endp
.text:0040ADBD
.text:0040ADBD ; ---------------------------------------------------------------------------
.text:0040ADBF                 align 10h
.text:0040ADC0
.text:0040ADC0 ; =============== S U B R O U T I N E =======================================
.text:0040ADC0
.text:0040ADC0
.text:0040ADC0 ; int __cdecl sub_40ADC0(char *)
.text:0040ADC0 sub_40ADC0      proc near               ; CODE XREF: sub_407A10+37↑p
.text:0040ADC0                                         ; sub_407A10+45↑p ...
.text:0040ADC0
.text:0040ADC0 Str             = dword ptr -0Ch
.text:0040ADC0 arg_0           = dword ptr  4
.text:0040ADC0
.text:0040ADC0                 push    ebx
.text:0040ADC1                 sub     esp, 8
.text:0040ADC4                 mov     ebx, [esp+0Ch+arg_0]
.text:0040ADC8                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040ADCB                 call    strlen
.text:0040ADD0                 cmp     eax, 1
.text:0040ADD3                 jbe     short loc_40ADF0
.text:0040ADD5                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040ADDA                 cmp     dl, 2Fh ; '/'
.text:0040ADDD                 jz      short loc_40ADF5
.text:0040ADDF                 cmp     dl, 5Ch ; '\'
.text:0040ADE2                 jz      short loc_40ADF5
.text:0040ADE4                 lea     esi, [esi+0]
.text:0040ADEA                 lea     edi, [edi+0]
.text:0040ADF0
.text:0040ADF0 loc_40ADF0:                             ; CODE XREF: sub_40ADC0+13↑j
.text:0040ADF0                                         ; sub_40ADC0+39↓j ...
.text:0040ADF0                 add     esp, 8
.text:0040ADF3                 pop     ebx
.text:0040ADF4                 retn
.text:0040ADF5 ; ---------------------------------------------------------------------------
.text:0040ADF5
.text:0040ADF5 loc_40ADF5:                             ; CODE XREF: sub_40ADC0+1D↑j
.text:0040ADF5                                         ; sub_40ADC0+22↑j ...
.text:0040ADF5                 dec     eax
.text:0040ADF6                 cmp     eax, 1
.text:0040ADF9                 jbe     short loc_40ADF0
.text:0040ADFB                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040AE00                 cmp     dl, 2Fh ; '/'
.text:0040AE03                 jz      short loc_40ADF5
.text:0040AE05                 cmp     dl, 5Ch ; '\'
.text:0040AE08                 jz      short loc_40ADF5
.text:0040AE0A                 jmp     short loc_40ADF0
.text:0040AE0A sub_40ADC0      endp
.text:0040AE0A
.text:0040AE0A ; ---------------------------------------------------------------------------
.text:0040AE0C                 align 10h
.text:0040AE10
.text:0040AE10 ; =============== S U B R O U T I N E =======================================
.text:0040AE10
.text:0040AE10
.text:0040AE10 ; int __cdecl sub_40AE10(char *, int)
.text:0040AE10 sub_40AE10      proc near               ; CODE XREF: sub_403910+967↑p
.text:0040AE10                                         ; sub_403910+AC6↑p
.text:0040AE10
.text:0040AE10 Block           = dword ptr -1Ch
.text:0040AE10 lpString1       = dword ptr -18h
.text:0040AE10 var_14          = dword ptr -14h
.text:0040AE10 arg_0           = dword ptr  4
.text:0040AE10 arg_4           = dword ptr  8
.text:0040AE10
.text:0040AE10                 push    ebp
.text:0040AE11                 push    edi
.text:0040AE12                 mov     edi, 7FFFFFFFh
.text:0040AE17                 push    esi
.text:0040AE18                 push    ebx
.text:0040AE19                 sub     esp, 0Ch
.text:0040AE1C                 mov     eax, [esp+1Ch+arg_4]
.text:0040AE20                 mov     ebp, [esp+1Ch+arg_0]
.text:0040AE24                 cmp     eax, 7FFFFFFEh
.text:0040AE29                 ja      short loc_40AE30
.text:0040AE2B                 lea     edi, [eax+1]
.text:0040AE2E                 mov     esi, esi
.text:0040AE30
.text:0040AE30 loc_40AE30:                             ; CODE XREF: sub_40AE10+19↑j
.text:0040AE30                                         ; sub_40AE10+56↓j ...
.text:0040AE30                 mov     [esp+1Ch+Block], edi ; size_t
.text:0040AE33                 call    sub_40A320
.text:0040AE38                 mov     [esp+1Ch+lpString1], eax ; lpString1
.text:0040AE3C                 mov     esi, eax
.text:0040AE3E                 mov     [esp+1Ch+var_14], edi
.text:0040AE42                 mov     [esp+1Ch+Block], ebp ; char *
.text:0040AE45                 call    sub_4184E0
.text:0040AE4A                 test    eax, eax
.text:0040AE4C                 mov     ebx, eax
.text:0040AE4E                 js      short loc_40AE85
.text:0040AE50
.text:0040AE50 loc_40AE50:                             ; CODE XREF: sub_40AE10+7D↓j
.text:0040AE50                 cmp     ebx, edi
.text:0040AE52                 jb      short loc_40AE77
.text:0040AE54                 mov     [esp+1Ch+Block], esi ; Block
.text:0040AE57                 call    free
.text:0040AE5C                 cmp     edi, 3FFFFFFFh
.text:0040AE62                 ja      short loc_40AE68
.text:0040AE64                 add     edi, edi
.text:0040AE66                 jmp     short loc_40AE30
.text:0040AE68 ; ---------------------------------------------------------------------------
.text:0040AE68
.text:0040AE68 loc_40AE68:                             ; CODE XREF: sub_40AE10+52↑j
.text:0040AE68                 cmp     edi, 7FFFFFFEh
.text:0040AE6E                 ja      short loc_40AEA9
.text:0040AE70                 mov     edi, 7FFFFFFFh
.text:0040AE75                 jmp     short loc_40AE30
.text:0040AE77 ; ---------------------------------------------------------------------------
.text:0040AE77
.text:0040AE77 loc_40AE77:                             ; CODE XREF: sub_40AE10+42↑j
.text:0040AE77                 mov     byte ptr [ebx+esi], 0
.text:0040AE7B                 mov     eax, esi
.text:0040AE7D
.text:0040AE7D loc_40AE7D:                             ; CODE XREF: sub_40AE10+97↓j
.text:0040AE7D                 add     esp, 0Ch
.text:0040AE80                 pop     ebx
.text:0040AE81                 pop     esi
.text:0040AE82                 pop     edi
.text:0040AE83                 pop     ebp
.text:0040AE84                 retn
.text:0040AE85 ; ---------------------------------------------------------------------------
.text:0040AE85
.text:0040AE85 loc_40AE85:                             ; CODE XREF: sub_40AE10+3E↑j
.text:0040AE85                 call    _errno
.text:0040AE8A                 cmp     dword ptr [eax], 22h ; '"'
.text:0040AE8D                 jz      short loc_40AE50
.text:0040AE8F                 call    _errno
.text:0040AE94                 mov     edi, [eax]
.text:0040AE96                 mov     [esp+1Ch+Block], esi ; Block
.text:0040AE99                 call    free
.text:0040AE9E                 call    _errno
.text:0040AEA3                 mov     [eax], edi
.text:0040AEA5                 xor     eax, eax
.text:0040AEA7                 jmp     short loc_40AE7D
.text:0040AEA9 ; ---------------------------------------------------------------------------
.text:0040AEA9
.text:0040AEA9 loc_40AEA9:                             ; CODE XREF: sub_40AE10+5E↑j
.text:0040AEA9                 call    sub_40A2A0
.text:0040AEA9 sub_40AE10      endp
.text:0040AEA9
.text:0040AEA9 ; ---------------------------------------------------------------------------
.text:0040AEAE                 align 10h
.text:0040AEB0
.text:0040AEB0 ; =============== S U B R O U T I N E =======================================
.text:0040AEB0
.text:0040AEB0
.text:0040AEB0 sub_40AEB0      proc near               ; CODE XREF: sub_403910:loc_405108↑p
.text:0040AEB0                                         ; sub_403910:loc_405232↑p
.text:0040AEB0
.text:0040AEB0 C               = dword ptr -9Ch
.text:0040AEB0 Type            = dword ptr -98h
.text:0040AEB0 var_8C          = byte ptr -8Ch
.text:0040AEB0
.text:0040AEB0                 push    esi
.text:0040AEB1                 xor     esi, esi
.text:0040AEB3                 push    ebx
.text:0040AEB4                 sub     esp, 94h
.text:0040AEBA                 lea     esi, [esi+0]
.text:0040AEC0
.text:0040AEC0 loc_40AEC0:                             ; CODE XREF: sub_40AEB0+47↓j
.text:0040AEC0                                         ; sub_40AEB0+66↓j ...
.text:0040AEC0                 mov     ecx, ds:_iob
.text:0040AEC6                 mov     ebx, [ecx+4]
.text:0040AEC9                 dec     ebx
.text:0040AECA                 mov     [ecx+4], ebx
.text:0040AECD                 test    ebx, ebx
.text:0040AECF                 js      loc_40AF60
.text:0040AED5                 mov     ecx, ds:_iob
.text:0040AEDB                 mov     edx, [ecx]
.text:0040AEDD                 movzx   ebx, byte ptr [edx]
.text:0040AEE0                 inc     edx
.text:0040AEE1                 mov     [ecx], edx
.text:0040AEE3
.text:0040AEE3 loc_40AEE3:                             ; CODE XREF: sub_40AEB0+C0↓j
.text:0040AEE3                 cmp     ebx, 0FFFFFFFFh
.text:0040AEE6                 jz      short loc_40AF38
.text:0040AEE8                 cmp     ebx, 0Ah
.text:0040AEEB                 jz      short loc_40AF38
.text:0040AEED                 lea     edx, [esi-1]
.text:0040AEF0                 cmp     edx, 7Dh ; '}'
.text:0040AEF3                 jbe     short loc_40AF20
.text:0040AEF5                 test    esi, esi
.text:0040AEF7                 jnz     short loc_40AEC0
.text:0040AEF9                 mov     edx, ds:__mb_cur_max
.text:0040AEFF                 cmp     dword ptr [edx], 1
.text:0040AF02                 jz      short loc_40AF27
.text:0040AF04                 mov     [esp+9Ch+Type], 8 ; Type
.text:0040AF0C                 mov     [esp+9Ch+C], ebx ; C
.text:0040AF0F                 call    _isctype
.text:0040AF14
.text:0040AF14 loc_40AF14:                             ; CODE XREF: sub_40AEB0+86↓j
.text:0040AF14                 test    eax, eax
.text:0040AF16                 jnz     short loc_40AEC0
.text:0040AF18                 nop
.text:0040AF19                 lea     esi, [esi+0]
.text:0040AF20
.text:0040AF20 loc_40AF20:                             ; CODE XREF: sub_40AEB0+43↑j
.text:0040AF20                 mov     [esp+esi+9Ch+var_8C], bl
.text:0040AF24                 inc     esi
.text:0040AF25                 jmp     short loc_40AEC0
.text:0040AF27 ; ---------------------------------------------------------------------------
.text:0040AF27
.text:0040AF27 loc_40AF27:                             ; CODE XREF: sub_40AEB0+52↑j
.text:0040AF27                 mov     edx, ds:_pctype
.text:0040AF2D                 mov     ecx, [edx]
.text:0040AF2F                 movzx   eax, word ptr [ecx+ebx*2]
.text:0040AF33                 and     eax, 8
.text:0040AF36                 jmp     short loc_40AF14
.text:0040AF38 ; ---------------------------------------------------------------------------
.text:0040AF38
.text:0040AF38 loc_40AF38:                             ; CODE XREF: sub_40AEB0+36↑j
.text:0040AF38                                         ; sub_40AEB0+3B↑j
.text:0040AF38                 mov     [esp+esi+9Ch+var_8C], 0
.text:0040AF3D                 lea     esi, [esp+9Ch+var_8C]
.text:0040AF41                 mov     [esp+9Ch+C], esi
.text:0040AF44                 call    near ptr loc_40DA9B+5
.text:0040AF49                 dec     eax
.text:0040AF4A                 setz    cl
.text:0040AF4D                 add     esp, 94h
.text:0040AF53                 pop     ebx
.text:0040AF54                 movzx   eax, cl
.text:0040AF57                 pop     esi
.text:0040AF58                 retn
.text:0040AF58 ; ---------------------------------------------------------------------------
.text:0040AF59                 align 10h
.text:0040AF60
.text:0040AF60 loc_40AF60:                             ; CODE XREF: sub_40AEB0+1F↑j
.text:0040AF60                 mov     ebx, ds:_iob
.text:0040AF66                 mov     [esp+9Ch+C], ebx ; File
.text:0040AF69                 call    _filbuf
.text:0040AF6E                 mov     ebx, eax
.text:0040AF70                 jmp     loc_40AEE3
.text:0040AF70 sub_40AEB0      endp
.text:0040AF70
.text:0040AF70 ; ---------------------------------------------------------------------------
.text:0040AF75                 align 10h
.text:0040AF80 dword_40AF80    dd 0                    ; DATA XREF: sub_40AFB0+D2↓o
.text:0040AF80                                         ; sub_40AFB0:loc_40B1E0↓o ...
.text:0040AF84 dword_40AF84    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:0040AF84                                         ; DATA XREF: .text:0040BB9C↓r
.text:0040AF84                                         ; .text:0040BBA5↓r ...
.text:0040AF94 flt_40AF94      dd 0.1                  ; DATA XREF: sub_40AFB0:loc_40AFFF↓r
.text:0040AF98 flt_40AF98      dd 4.2949673e9          ; DATA XREF: sub_40AFB0+101↓r
.text:0040AF9C flt_40AF9C      dd 0.89999998           ; DATA XREF: sub_40AFB0+66↓r
.text:0040AFA0 flt_40AFA0      dd 1.1                  ; DATA XREF: sub_40AFB0+7A↓r
.text:0040AFA4                 align 10h
.text:0040AFB0
.text:0040AFB0 ; =============== S U B R O U T I N E =======================================
.text:0040AFB0
.text:0040AFB0
.text:0040AFB0 sub_40AFB0      proc near               ; CODE XREF: sub_4053F0+2A↑p
.text:0040AFB0                                         ; .text:0040545A↑p ...
.text:0040AFB0
.text:0040AFB0 var_44          = qword ptr -44h
.text:0040AFB0 Size            = dword ptr -3Ch
.text:0040AFB0 var_38          = dword ptr -38h
.text:0040AFB0 var_28          = dword ptr -28h
.text:0040AFB0 var_24          = qword ptr -24h
.text:0040AFB0 var_18          = word ptr -18h
.text:0040AFB0 var_16          = word ptr -16h
.text:0040AFB0 var_10          = dword ptr -10h
.text:0040AFB0 var_C           = dword ptr -0Ch
.text:0040AFB0 var_8           = dword ptr -8
.text:0040AFB0 var_4           = dword ptr -4
.text:0040AFB0 arg_0           = dword ptr  4
.text:0040AFB0 arg_4           = dword ptr  8
.text:0040AFB0 arg_8           = dword ptr  0Ch
.text:0040AFB0 arg_C           = dword ptr  10h
.text:0040AFB0 arg_10          = dword ptr  14h
.text:0040AFB0
.text:0040AFB0                 sub     esp, 3Ch
.text:0040AFB3                 mov     [esp+3Ch+var_4], ebp
.text:0040AFB7                 mov     ebp, [esp+3Ch+arg_8]
.text:0040AFBB                 mov     [esp+3Ch+var_10], ebx
.text:0040AFBF                 mov     ebx, [esp+3Ch+arg_4]
.text:0040AFC3                 test    ebp, ebp
.text:0040AFC5                 mov     [esp+3Ch+var_C], esi
.text:0040AFC9                 mov     [esp+3Ch+var_8], edi
.text:0040AFCD                 jz      loc_40B091
.text:0040AFD3                 mov     edx, [esp+3Ch+arg_C]
.text:0040AFD7                 test    edx, edx
.text:0040AFD9                 jz      loc_40B091
.text:0040AFDF                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:0040AFE6                 call    malloc
.text:0040AFEB                 mov     esi, eax
.text:0040AFED                 xor     eax, eax
.text:0040AFEF                 test    esi, esi
.text:0040AFF1                 jz      loc_40B093
.text:0040AFF7                 test    ebx, ebx
.text:0040AFF9                 jz      loc_40B1E0
.text:0040AFFF
.text:0040AFFF loc_40AFFF:                             ; CODE XREF: sub_40AFB0+235↓j
.text:0040AFFF                 fld     ds:flt_40AF94
.text:0040B005                 fld     dword ptr [ebx+8]
.text:0040B008                 mov     [esi+14h], ebx
.text:0040B00B                 fucom   st(1)
.text:0040B00D                 fnstsw  ax
.text:0040B00F                 sahf
.text:0040B010                 jbe     loc_40B1D0
.text:0040B016                 fld     ds:flt_40AF9C
.text:0040B01C                 fucomp  st(1)
.text:0040B01E                 fnstsw  ax
.text:0040B020                 sahf
.text:0040B021                 jbe     loc_40B1D0
.text:0040B027                 fld     dword ptr [ebx+0Ch]
.text:0040B02A                 fld     ds:flt_40AFA0
.text:0040B030                 fxch    st(1)
.text:0040B032                 fucompp
.text:0040B034                 fnstsw  ax
.text:0040B036                 sahf
.text:0040B037                 jbe     loc_40B1D0
.text:0040B03D                 fld     dword ptr [ebx]
.text:0040B03F                 fldz
.text:0040B041                 fxch    st(1)
.text:0040B043                 fucom   st(1)
.text:0040B045                 fnstsw  ax
.text:0040B047                 fstp    st(1)
.text:0040B049                 sahf
.text:0040B04A                 jb      loc_40B1D7
.text:0040B050                 faddp   st(2), st
.text:0040B052                 fld     dword ptr [ebx+4]
.text:0040B055                 fucom   st(2)
.text:0040B057                 fnstsw  ax
.text:0040B059                 sahf
.text:0040B05A                 jbe     loc_40B1D7
.text:0040B060                 fld1
.text:0040B062                 fucompp
.text:0040B064                 fnstsw  ax
.text:0040B066                 sahf
.text:0040B067                 jb      loc_40B1D0
.text:0040B06D                 fucom   st(1)
.text:0040B06F                 fnstsw  ax
.text:0040B071                 fstp    st(1)
.text:0040B073                 sahf
.text:0040B074                 ja      short loc_40B0A7
.text:0040B076                 lea     esi, [esi+0]
.text:0040B079                 lea     edi, [edi+0]
.text:0040B080
.text:0040B080 loc_40B080:                             ; CODE XREF: sub_40AFB0+222↓j
.text:0040B080                 fstp    st
.text:0040B082                 mov     dword ptr [esi+14h], offset dword_40AF80
.text:0040B089
.text:0040B089 loc_40B089:                             ; CODE XREF: sub_40AFB0+155↓j
.text:0040B089                                         ; sub_40AFB0+1BF↓j ...
.text:0040B089                 mov     [esp+3Ch+Size], esi ; Block
.text:0040B08C                 call    free
.text:0040B091
.text:0040B091 loc_40B091:                             ; CODE XREF: sub_40AFB0+1D↑j
.text:0040B091                                         ; sub_40AFB0+29↑j
.text:0040B091                 xor     eax, eax
.text:0040B093
.text:0040B093 loc_40B093:                             ; CODE XREF: sub_40AFB0+41↑j
.text:0040B093                                         ; sub_40AFB0+208↓j
.text:0040B093                 mov     ebx, [esp+3Ch+var_10]
.text:0040B097                 mov     esi, [esp+3Ch+var_C]
.text:0040B09B                 mov     edi, [esp+3Ch+var_8]
.text:0040B09F                 mov     ebp, [esp+3Ch+var_4]
.text:0040B0A3                 add     esp, 3Ch
.text:0040B0A6                 retn
.text:0040B0A7 ; ---------------------------------------------------------------------------
.text:0040B0A7
.text:0040B0A7 loc_40B0A7:                             ; CODE XREF: sub_40AFB0+C4↑j
.text:0040B0A7                 cmp     byte ptr [ebx+10h], 0
.text:0040B0AB                 jnz     loc_40B1C4
.text:0040B0B1                 fld     ds:flt_40AF98
.text:0040B0B7                 xor     eax, eax
.text:0040B0B9                 mov     ecx, [esp+3Ch+arg_0]
.text:0040B0BD                 push    eax
.text:0040B0BE                 push    ecx
.text:0040B0BF                 fild    [esp+44h+var_44]
.text:0040B0C2                 add     esp, 8
.text:0040B0C5                 fdivrp  st(2), st
.text:0040B0C7                 fxch    st(1)
.text:0040B0C9                 fucom   st(1)
.text:0040B0CB                 fnstsw  ax
.text:0040B0CD                 fstp    st(1)
.text:0040B0CF                 sahf
.text:0040B0D0                 jnb     loc_40B1BD
.text:0040B0D6                 fnstcw  [esp+3Ch+var_16]
.text:0040B0DA                 movzx   ebx, [esp+3Ch+var_16]
.text:0040B0DF                 or      bx, 0C00h
.text:0040B0E4                 mov     [esp+3Ch+var_18], bx
.text:0040B0E9                 fldcw   [esp+3Ch+var_18]
.text:0040B0ED                 fistp   [esp+3Ch+var_24]
.text:0040B0F1                 fldcw   [esp+3Ch+var_16]
.text:0040B0F5                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:0040B0F9                 mov     [esp+3Ch+arg_0], edx
.text:0040B0FD
.text:0040B0FD loc_40B0FD:                             ; CODE XREF: sub_40AFB0+216↓j
.text:0040B0FD                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:0040B105                 ja      short loc_40B089
.text:0040B107                 mov     ecx, [esp+3Ch+arg_0]
.text:0040B10B                 cmp     ecx, 9
.text:0040B10E                 ja      short loc_40B115
.text:0040B110                 mov     ecx, 0Ah
.text:0040B115
.text:0040B115 loc_40B115:                             ; CODE XREF: sub_40AFB0+15E↑j
.text:0040B115                 or      ecx, 1
.text:0040B118
.text:0040B118 loc_40B118:                             ; CODE XREF: sub_40AFB0+1B4↓j
.text:0040B118                 mov     [esp+3Ch+var_28], 3
.text:0040B120                 mov     edi, 9
.text:0040B125                 cmp     edi, ecx
.text:0040B127                 jnb     short loc_40B155
.text:0040B129                 xor     edx, edx
.text:0040B12B                 mov     eax, ecx
.text:0040B12D                 div     [esp+3Ch+var_28]
.text:0040B131                 test    edx, edx
.text:0040B133                 jz      short loc_40B155
.text:0040B135
.text:0040B135 loc_40B135:                             ; CODE XREF: sub_40AFB0+1A3↓j
.text:0040B135                 inc     [esp+3Ch+var_28]
.text:0040B139                 mov     edx, [esp+3Ch+var_28]
.text:0040B13D                 lea     edi, [edi+edx*4]
.text:0040B140                 inc     edx
.text:0040B141                 cmp     edi, ecx
.text:0040B143                 mov     [esp+3Ch+var_28], edx
.text:0040B147                 jnb     short loc_40B155
.text:0040B149                 xor     edx, edx
.text:0040B14B                 mov     eax, ecx
.text:0040B14D                 div     [esp+3Ch+var_28]
.text:0040B151                 test    edx, edx
.text:0040B153                 jnz     short loc_40B135
.text:0040B155
.text:0040B155 loc_40B155:                             ; CODE XREF: sub_40AFB0+177↑j
.text:0040B155                                         ; sub_40AFB0+183↑j ...
.text:0040B155                 xor     edx, edx
.text:0040B157                 mov     eax, ecx
.text:0040B159                 div     [esp+3Ch+var_28]
.text:0040B15D                 test    edx, edx
.text:0040B15F                 jnz     short loc_40B166
.text:0040B161                 add     ecx, 2
.text:0040B164                 jmp     short loc_40B118
.text:0040B166 ; ---------------------------------------------------------------------------
.text:0040B166
.text:0040B166 loc_40B166:                             ; CODE XREF: sub_40AFB0+1AF↑j
.text:0040B166                 mov     [esi+8], ecx
.text:0040B169                 cmp     ecx, 1FFFFFFFh
.text:0040B16F                 ja      loc_40B089
.text:0040B175                 mov     [esp+3Ch+Size], ecx ; Count
.text:0040B178                 mov     [esp+3Ch+var_38], 8 ; Size
.text:0040B180                 call    calloc
.text:0040B185                 mov     [esi+18h], ebp
.text:0040B188                 mov     ebx, [esi+8]
.text:0040B18B                 mov     ebp, [esp+3Ch+arg_C]
.text:0040B18F                 mov     [esi], eax
.text:0040B191                 mov     edi, [esp+3Ch+arg_10]
.text:0040B195                 lea     ecx, [eax+ebx*8]
.text:0040B198                 mov     [esi+4], ecx
.text:0040B19B                 mov     eax, esi
.text:0040B19D                 mov     dword ptr [esi+0Ch], 0
.text:0040B1A4                 mov     dword ptr [esi+10h], 0
.text:0040B1AB                 mov     [esi+1Ch], ebp
.text:0040B1AE                 mov     [esi+20h], edi
.text:0040B1B1                 mov     dword ptr [esi+24h], 0
.text:0040B1B8                 jmp     loc_40B093
.text:0040B1BD ; ---------------------------------------------------------------------------
.text:0040B1BD
.text:0040B1BD loc_40B1BD:                             ; CODE XREF: sub_40AFB0+120↑j
.text:0040B1BD                 fstp    st
.text:0040B1BF                 jmp     loc_40B089
.text:0040B1C4 ; ---------------------------------------------------------------------------
.text:0040B1C4
.text:0040B1C4 loc_40B1C4:                             ; CODE XREF: sub_40AFB0+FB↑j
.text:0040B1C4                 fstp    st
.text:0040B1C6                 jmp     loc_40B0FD
.text:0040B1C6 ; ---------------------------------------------------------------------------
.text:0040B1CB                 align 10h
.text:0040B1D0
.text:0040B1D0 loc_40B1D0:                             ; CODE XREF: sub_40AFB0+60↑j
.text:0040B1D0                                         ; sub_40AFB0+71↑j ...
.text:0040B1D0                 fstp    st
.text:0040B1D2                 jmp     loc_40B080
.text:0040B1D7 ; ---------------------------------------------------------------------------
.text:0040B1D7
.text:0040B1D7 loc_40B1D7:                             ; CODE XREF: sub_40AFB0+9A↑j
.text:0040B1D7                                         ; sub_40AFB0+AA↑j
.text:0040B1D7                 fstp    st
.text:0040B1D9                 jmp     short loc_40B1D0
.text:0040B1D9 ; ---------------------------------------------------------------------------
.text:0040B1DB                 align 10h
.text:0040B1E0
.text:0040B1E0 loc_40B1E0:                             ; CODE XREF: sub_40AFB0+49↑j
.text:0040B1E0                 mov     ebx, offset dword_40AF80
.text:0040B1E5                 jmp     loc_40AFFF
.text:0040B1E5 sub_40AFB0      endp
.text:0040B1E5
.text:0040B1E5 ; ---------------------------------------------------------------------------
.text:0040B1EA                 align 10h
.text:0040B1F0                 push    edi
.text:0040B1F1                 push    esi
.text:0040B1F2                 push    ebx
.text:0040B1F3                 sub     esp, 10h
.text:0040B1F6                 mov     edi, [esp+20h]
.text:0040B1FA                 mov     esi, [edi]
.text:0040B1FC                 mov     eax, [edi+4]
.text:0040B1FF                 cmp     esi, eax
.text:0040B201                 jnb     short loc_40B257
.text:0040B203                 lea     esi, [esi+0]
.text:0040B209                 lea     edi, [edi+0]
.text:0040B210
.text:0040B210 loc_40B210:                             ; CODE XREF: .text:0040B255↓j
.text:0040B210                 mov     ecx, [esi]
.text:0040B212                 test    ecx, ecx
.text:0040B214                 jz      short loc_40B250
.text:0040B216                 mov     ebx, [esi+4]
.text:0040B219                 test    ebx, ebx
.text:0040B21B                 jz      short loc_40B281
.text:0040B21D                 mov     ecx, [edi+20h]
.text:0040B220
.text:0040B220 loc_40B220:                             ; CODE XREF: .text:0040B23A↓j
.text:0040B220                 test    ecx, ecx
.text:0040B222                 jnz     short loc_40B275
.text:0040B224
.text:0040B224 loc_40B224:                             ; CODE XREF: .text:0040B27F↓j
.text:0040B224                 mov     dword ptr [ebx], 0
.text:0040B22A                 mov     edx, [ebx+4]
.text:0040B22D                 mov     eax, [edi+24h]
.text:0040B230                 test    edx, edx
.text:0040B232                 mov     [ebx+4], eax
.text:0040B235                 mov     [edi+24h], ebx
.text:0040B238                 mov     ebx, edx
.text:0040B23A                 jnz     short loc_40B220
.text:0040B23C
.text:0040B23C loc_40B23C:                             ; CODE XREF: .text:0040B284↓j
.text:0040B23C                 test    ecx, ecx
.text:0040B23E                 jnz     short loc_40B26C
.text:0040B240
.text:0040B240 loc_40B240:                             ; CODE XREF: .text:0040B273↓j
.text:0040B240                 mov     dword ptr [esi+4], 0
.text:0040B247                 mov     eax, [edi+4]
.text:0040B24A                 mov     dword ptr [esi], 0
.text:0040B250
.text:0040B250 loc_40B250:                             ; CODE XREF: .text:0040B214↑j
.text:0040B250                 add     esi, 8
.text:0040B253                 cmp     esi, eax
.text:0040B255                 jb      short loc_40B210
.text:0040B257
.text:0040B257 loc_40B257:                             ; CODE XREF: .text:0040B201↑j
.text:0040B257                 mov     dword ptr [edi+0Ch], 0
.text:0040B25E                 mov     dword ptr [edi+10h], 0
.text:0040B265                 add     esp, 10h
.text:0040B268                 pop     ebx
.text:0040B269                 pop     esi
.text:0040B26A                 pop     edi
.text:0040B26B                 retn
.text:0040B26C ; ---------------------------------------------------------------------------
.text:0040B26C
.text:0040B26C loc_40B26C:                             ; CODE XREF: .text:0040B23E↑j
.text:0040B26C                 mov     ebx, [esi]
.text:0040B26E                 mov     [esp], ebx
.text:0040B271                 call    ecx
.text:0040B273                 jmp     short loc_40B240
.text:0040B275 ; ---------------------------------------------------------------------------
.text:0040B275
.text:0040B275 loc_40B275:                             ; CODE XREF: .text:0040B222↑j
.text:0040B275                 mov     edx, [ebx]
.text:0040B277                 mov     [esp], edx
.text:0040B27A                 call    ecx
.text:0040B27C                 mov     ecx, [edi+20h]
.text:0040B27F                 jmp     short loc_40B224
.text:0040B281 ; ---------------------------------------------------------------------------
.text:0040B281
.text:0040B281 loc_40B281:                             ; CODE XREF: .text:0040B21B↑j
.text:0040B281                 mov     ecx, [edi+20h]
.text:0040B284                 jmp     short loc_40B23C
.text:0040B284 ; ---------------------------------------------------------------------------
.text:0040B286                 align 10h
.text:0040B290
.text:0040B290 ; =============== S U B R O U T I N E =======================================
.text:0040B290
.text:0040B290
.text:0040B290 ; int __cdecl sub_40B290(void *)
.text:0040B290 sub_40B290      proc near               ; CODE XREF: .text:0040685C↑p
.text:0040B290
.text:0040B290 Block           = dword ptr -1Ch
.text:0040B290 arg_0           = dword ptr  4
.text:0040B290
.text:0040B290                 push    ebp
.text:0040B291                 push    edi
.text:0040B292                 push    esi
.text:0040B293                 push    ebx
.text:0040B294                 sub     esp, 0Ch
.text:0040B297                 mov     ebp, [esp+1Ch+arg_0]
.text:0040B29B                 mov     eax, [ebp+20h]
.text:0040B29E                 test    eax, eax
.text:0040B2A0                 jz      loc_40B36C
.text:0040B2A6                 mov     eax, [ebp+10h]
.text:0040B2A9                 test    eax, eax
.text:0040B2AB                 jz      loc_40B36C
.text:0040B2B1                 mov     edi, [ebp+0]
.text:0040B2B4                 mov     eax, [ebp+4]
.text:0040B2B7                 cmp     edi, eax
.text:0040B2B9                 jnb     short loc_40B32B
.text:0040B2BB
.text:0040B2BB loc_40B2BB:                             ; CODE XREF: sub_40B290+57↓j
.text:0040B2BB                 mov     edx, [edi]
.text:0040B2BD                 test    edx, edx
.text:0040B2BF                 jz      short loc_40B2E2
.text:0040B2C1                 test    edi, edi
.text:0040B2C3                 mov     ebx, edi
.text:0040B2C5                 jz      short loc_40B2E2
.text:0040B2C7                 mov     esi, esi
.text:0040B2C9                 lea     edi, [edi+0]
.text:0040B2D0
.text:0040B2D0 loc_40B2D0:                             ; CODE XREF: sub_40B290+4D↓j
.text:0040B2D0                 mov     ecx, [ebx]
.text:0040B2D2                 mov     [esp+1Ch+Block], ecx
.text:0040B2D5                 call    dword ptr [ebp+20h]
.text:0040B2D8                 mov     ebx, [ebx+4]
.text:0040B2DB                 test    ebx, ebx
.text:0040B2DD                 jnz     short loc_40B2D0
.text:0040B2DF                 mov     eax, [ebp+4]
.text:0040B2E2
.text:0040B2E2 loc_40B2E2:                             ; CODE XREF: sub_40B290+2F↑j
.text:0040B2E2                                         ; sub_40B290+35↑j
.text:0040B2E2                 add     edi, 8
.text:0040B2E5                 cmp     edi, eax
.text:0040B2E7                 jb      short loc_40B2BB
.text:0040B2E9                 mov     edx, [ebp+0]
.text:0040B2EC
.text:0040B2EC loc_40B2EC:                             ; CODE XREF: sub_40B290+E2↓j
.text:0040B2EC                 cmp     edx, eax
.text:0040B2EE                 mov     edi, edx
.text:0040B2F0                 jnb     short loc_40B32B
.text:0040B2F2                 lea     esi, [esi+0]
.text:0040B2F9                 lea     edi, [edi+0]
.text:0040B300
.text:0040B300 loc_40B300:                             ; CODE XREF: sub_40B290+99↓j
.text:0040B300                 mov     ebx, [edi+4]
.text:0040B303                 test    ebx, ebx
.text:0040B305                 jz      short loc_40B324
.text:0040B307                 mov     esi, esi
.text:0040B309                 lea     edi, [edi+0]
.text:0040B310
.text:0040B310 loc_40B310:                             ; CODE XREF: sub_40B290+8F↓j
.text:0040B310                 mov     esi, [ebx+4]
.text:0040B313                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040B316                 call    free
.text:0040B31B                 test    esi, esi
.text:0040B31D                 mov     ebx, esi
.text:0040B31F                 jnz     short loc_40B310
.text:0040B321                 mov     eax, [ebp+4]
.text:0040B324
.text:0040B324 loc_40B324:                             ; CODE XREF: sub_40B290+75↑j
.text:0040B324                 add     edi, 8
.text:0040B327                 cmp     edi, eax
.text:0040B329                 jb      short loc_40B300
.text:0040B32B
.text:0040B32B loc_40B32B:                             ; CODE XREF: sub_40B290+29↑j
.text:0040B32B                                         ; sub_40B290+60↑j
.text:0040B32B                 mov     ebx, [ebp+24h]
.text:0040B32E                 test    ebx, ebx
.text:0040B330                 jz      short loc_40B351
.text:0040B332                 lea     esi, [esi+0]
.text:0040B339                 lea     edi, [edi+0]
.text:0040B340
.text:0040B340 loc_40B340:                             ; CODE XREF: sub_40B290+BF↓j
.text:0040B340                 mov     edi, [ebx+4]
.text:0040B343                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040B346                 call    free
.text:0040B34B                 test    edi, edi
.text:0040B34D                 mov     ebx, edi
.text:0040B34F                 jnz     short loc_40B340
.text:0040B351
.text:0040B351 loc_40B351:                             ; CODE XREF: sub_40B290+A0↑j
.text:0040B351                 mov     ebx, [ebp+0]
.text:0040B354                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040B357                 call    free
.text:0040B35C                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:0040B360                 add     esp, 0Ch
.text:0040B363                 pop     ebx
.text:0040B364                 pop     esi
.text:0040B365                 pop     edi
.text:0040B366                 pop     ebp
.text:0040B367                 jmp     free
.text:0040B36C ; ---------------------------------------------------------------------------
.text:0040B36C
.text:0040B36C loc_40B36C:                             ; CODE XREF: sub_40B290+10↑j
.text:0040B36C                                         ; sub_40B290+1B↑j
.text:0040B36C                 mov     edx, [ebp+0]
.text:0040B36F                 mov     eax, [ebp+4]
.text:0040B372                 jmp     loc_40B2EC
.text:0040B372 sub_40B290      endp
.text:0040B372
.text:0040B372 ; ---------------------------------------------------------------------------
.text:0040B377                 align 10h
.text:0040B380
.text:0040B380 ; =============== S U B R O U T I N E =======================================
.text:0040B380
.text:0040B380
.text:0040B380 sub_40B380      proc near               ; CODE XREF: sub_40B500+1B2↓p
.text:0040B380                                         ; sub_40BBD0+156↓p
.text:0040B380
.text:0040B380 Block           = dword ptr -2Ch
.text:0040B380 var_28          = dword ptr -28h
.text:0040B380 var_24          = dword ptr -24h
.text:0040B380 var_20          = dword ptr -20h
.text:0040B380 var_1C          = dword ptr -1Ch
.text:0040B380 var_18          = dword ptr -18h
.text:0040B380 var_14          = dword ptr -14h
.text:0040B380 arg_0           = dword ptr  4
.text:0040B380 arg_4           = dword ptr  8
.text:0040B380
.text:0040B380                 push    ebp
.text:0040B381                 push    edi
.text:0040B382                 push    esi
.text:0040B383                 push    ebx
.text:0040B384                 sub     esp, 1Ch
.text:0040B387                 mov     ebx, [esp+2Ch+arg_0]
.text:0040B38B                 mov     edi, [ebx+20h]
.text:0040B38E                 mov     [esp+2Ch+var_1C], edi
.text:0040B392                 mov     esi, [ebx+1Ch]
.text:0040B395                 mov     [esp+2Ch+var_20], esi
.text:0040B399                 mov     edx, [ebx+18h]
.text:0040B39C                 mov     [esp+2Ch+var_24], edx
.text:0040B3A0                 mov     ecx, [ebx+14h]
.text:0040B3A3                 mov     edx, [esp+2Ch+arg_4]
.text:0040B3A7                 mov     [esp+2Ch+var_28], ecx
.text:0040B3AB                 mov     [esp+2Ch+Block], edx
.text:0040B3AE                 call    sub_40AFB0
.text:0040B3B3                 mov     edi, eax
.text:0040B3B5                 xor     eax, eax
.text:0040B3B7                 test    edi, edi
.text:0040B3B9                 jz      loc_40B482
.text:0040B3BF                 mov     ebp, [esp+2Ch+arg_0]
.text:0040B3C3                 mov     edx, [ebp+0]
.text:0040B3C6                 mov     eax, [ebp+4]
.text:0040B3C9                 mov     ecx, [ebp+24h]
.text:0040B3CC                 mov     [esp+2Ch+var_14], edx
.text:0040B3D0                 cmp     edx, eax
.text:0040B3D2                 mov     [edi+24h], ecx
.text:0040B3D5                 jnb     short loc_40B44D
.text:0040B3D7                 mov     esi, esi
.text:0040B3D9                 lea     edi, [edi+0]
.text:0040B3E0
.text:0040B3E0 loc_40B3E0:                             ; CODE XREF: sub_40B380+C5↓j
.text:0040B3E0                 mov     edx, [esp+2Ch+var_14]
.text:0040B3E4                 mov     ebx, [edx]
.text:0040B3E6                 test    ebx, ebx
.text:0040B3E8                 jz      short loc_40B43C
.text:0040B3EA                 mov     ebx, edx
.text:0040B3EC                 lea     esi, [esi+0]
.text:0040B3F0
.text:0040B3F0 loc_40B3F0:                             ; CODE XREF: sub_40B380+B3↓j
.text:0040B3F0                 mov     ebp, [ebx]
.text:0040B3F2                 mov     edx, [edi+8]
.text:0040B3F5                 mov     [esp+2Ch+Block], ebp
.text:0040B3F8                 mov     [esp+2Ch+var_28], edx
.text:0040B3FC                 call    dword ptr [edi+18h]
.text:0040B3FF                 mov     ecx, [edi]
.text:0040B401                 lea     esi, [ecx+eax*8]
.text:0040B404                 cmp     esi, [edi+4]
.text:0040B407                 jnb     loc_40B4E3
.text:0040B40D                 mov     ecx, [esi]
.text:0040B40F                 mov     eax, [ebx+4]
.text:0040B412                 test    ecx, ecx
.text:0040B414                 mov     [esp+2Ch+var_18], eax
.text:0040B418                 jz      loc_40B4C0
.text:0040B41E                 cmp     ebx, [esp+2Ch+var_14]
.text:0040B422                 jz      short loc_40B48A
.text:0040B424                 mov     edx, [esi+4]
.text:0040B427                 mov     [ebx+4], edx
.text:0040B42A                 mov     [esi+4], ebx
.text:0040B42D
.text:0040B42D loc_40B42D:                             ; CODE XREF: sub_40B380+12A↓j
.text:0040B42D                                         ; sub_40B380+149↓j ...
.text:0040B42D                 mov     ebx, [esp+2Ch+var_18]
.text:0040B431                 test    ebx, ebx
.text:0040B433                 jnz     short loc_40B3F0
.text:0040B435                 mov     ecx, [esp+2Ch+arg_0]
.text:0040B439                 mov     eax, [ecx+4]
.text:0040B43C
.text:0040B43C loc_40B43C:                             ; CODE XREF: sub_40B380+68↑j
.text:0040B43C                 add     [esp+2Ch+var_14], 8
.text:0040B441                 cmp     [esp+2Ch+var_14], eax
.text:0040B445                 jb      short loc_40B3E0
.text:0040B447                 mov     eax, [esp+2Ch+arg_0]
.text:0040B44B                 mov     edx, [eax]
.text:0040B44D
.text:0040B44D loc_40B44D:                             ; CODE XREF: sub_40B380+55↑j
.text:0040B44D                 mov     [esp+2Ch+Block], edx ; Block
.text:0040B450                 call    free
.text:0040B455                 mov     ebx, [esp+2Ch+arg_0]
.text:0040B459                 mov     ebp, [edi]
.text:0040B45B                 mov     ecx, [edi+4]
.text:0040B45E                 mov     esi, [edi+8]
.text:0040B461                 mov     edx, [edi+0Ch]
.text:0040B464                 mov     [ebx], ebp
.text:0040B466                 mov     ebp, [edi+24h]
.text:0040B469                 mov     [ebx+4], ecx
.text:0040B46C                 mov     [ebx+8], esi
.text:0040B46F                 mov     [ebx+0Ch], edx
.text:0040B472                 mov     [ebx+24h], ebp
.text:0040B475                 mov     [esp+2Ch+Block], edi ; Block
.text:0040B478                 call    free
.text:0040B47D                 mov     eax, 1
.text:0040B482
.text:0040B482 loc_40B482:                             ; CODE XREF: sub_40B380+39↑j
.text:0040B482                                         ; sub_40B380+11D↓j
.text:0040B482                 add     esp, 1Ch
.text:0040B485                 pop     ebx
.text:0040B486                 pop     esi
.text:0040B487                 pop     edi
.text:0040B488                 pop     ebp
.text:0040B489                 retn
.text:0040B48A ; ---------------------------------------------------------------------------
.text:0040B48A
.text:0040B48A loc_40B48A:                             ; CODE XREF: sub_40B380+A2↑j
.text:0040B48A                 mov     eax, [edi+24h]
.text:0040B48D                 test    eax, eax
.text:0040B48F                 jz      short loc_40B4AC
.text:0040B491                 mov     ebx, [eax+4]
.text:0040B494                 mov     edx, eax
.text:0040B496                 mov     [edi+24h], ebx
.text:0040B499
.text:0040B499 loc_40B499:                             ; CODE XREF: sub_40B380+13A↓j
.text:0040B499                 xor     eax, eax
.text:0040B49B                 test    edx, edx
.text:0040B49D                 jz      short loc_40B482
.text:0040B49F                 mov     [edx], ebp
.text:0040B4A1                 mov     ebp, [esi+4]
.text:0040B4A4                 mov     [edx+4], ebp
.text:0040B4A7                 mov     [esi+4], edx
.text:0040B4AA                 jmp     short loc_40B42D
.text:0040B4AC ; ---------------------------------------------------------------------------
.text:0040B4AC
.text:0040B4AC loc_40B4AC:                             ; CODE XREF: sub_40B380+10F↑j
.text:0040B4AC                 mov     [esp+2Ch+Block], 8 ; Size
.text:0040B4B3                 call    malloc
.text:0040B4B8                 mov     edx, eax
.text:0040B4BA                 jmp     short loc_40B499
.text:0040B4BA ; ---------------------------------------------------------------------------
.text:0040B4BC                 align 10h
.text:0040B4C0
.text:0040B4C0 loc_40B4C0:                             ; CODE XREF: sub_40B380+98↑j
.text:0040B4C0                 inc     dword ptr [edi+0Ch]
.text:0040B4C3                 cmp     ebx, [esp+2Ch+var_14]
.text:0040B4C7                 mov     [esi], ebp
.text:0040B4C9                 jz      loc_40B42D
.text:0040B4CF                 mov     dword ptr [ebx], 0
.text:0040B4D5                 mov     esi, [edi+24h]
.text:0040B4D8                 mov     [ebx+4], esi
.text:0040B4DB                 mov     [edi+24h], ebx
.text:0040B4DE                 jmp     loc_40B42D
.text:0040B4E3 ; ---------------------------------------------------------------------------
.text:0040B4E3
.text:0040B4E3 loc_40B4E3:                             ; CODE XREF: sub_40B380+87↑j
.text:0040B4E3                 call    abort
.text:0040B4E3 sub_40B380      endp
.text:0040B4E3
.text:0040B4E3 ; ---------------------------------------------------------------------------
.text:0040B4E8 flt_40B4E8      dd 0.1                  ; DATA XREF: sub_40B500+C3↓r
.text:0040B4EC flt_40B4EC      dd 4.2949673e9          ; DATA XREF: sub_40B500:loc_40B677↓r
.text:0040B4F0 flt_40B4F0      dd 0.89999998           ; DATA XREF: sub_40B500+D6↓r
.text:0040B4F4 flt_40B4F4      dd 1.1                  ; DATA XREF: sub_40B500+EA↓r
.text:0040B4F8                 align 10h
.text:0040B500
.text:0040B500 ; =============== S U B R O U T I N E =======================================
.text:0040B500
.text:0040B500
.text:0040B500 sub_40B500      proc near               ; CODE XREF: sub_4064D0+76↑p
.text:0040B500                                         ; sub_406630+7A↑p ...
.text:0040B500
.text:0040B500 var_34          = qword ptr -34h
.text:0040B500 Size            = dword ptr -2Ch
.text:0040B500 var_28          = dword ptr -28h
.text:0040B500 var_24          = dword ptr -24h
.text:0040B500 var_20          = dword ptr -20h
.text:0040B500 var_1C          = qword ptr -1Ch
.text:0040B500 var_14          = word ptr -14h
.text:0040B500 var_12          = word ptr -12h
.text:0040B500 var_10          = dword ptr -10h
.text:0040B500 var_8           = dword ptr -8
.text:0040B500 var_4           = dword ptr -4
.text:0040B500 arg_0           = dword ptr  4
.text:0040B500 arg_4           = dword ptr  8
.text:0040B500
.text:0040B500                 sub     esp, 2Ch
.text:0040B503                 mov     [esp+2Ch+var_8], ebx
.text:0040B507                 mov     ebx, [esp+2Ch+arg_4]
.text:0040B50B                 mov     [esp+2Ch+var_4], esi
.text:0040B50F                 mov     esi, [esp+2Ch+arg_0]
.text:0040B513                 test    ebx, ebx
.text:0040B515                 jz      loc_40B6EA
.text:0040B51B                 mov     [esp+2Ch+var_20], 0
.text:0040B523                 lea     edx, [esp+2Ch+var_10]
.text:0040B527                 mov     [esp+2Ch+var_24], edx
.text:0040B52B                 mov     [esp+2Ch+var_28], ebx
.text:0040B52F                 mov     [esp+2Ch+Size], esi
.text:0040B532                 call    sub_40BD60
.text:0040B537                 test    eax, eax
.text:0040B539                 jz      short loc_40B547
.text:0040B53B
.text:0040B53B loc_40B53B:                             ; CODE XREF: sub_40B500+64↓j
.text:0040B53B                                         ; sub_40B500+7A↓j ...
.text:0040B53B                 mov     ebx, [esp+2Ch+var_8]
.text:0040B53F                 mov     esi, [esp+2Ch+var_4]
.text:0040B543                 add     esp, 2Ch
.text:0040B546                 retn
.text:0040B547 ; ---------------------------------------------------------------------------
.text:0040B547
.text:0040B547 loc_40B547:                             ; CODE XREF: sub_40B500+39↑j
.text:0040B547                 mov     eax, [esp+2Ch+var_10]
.text:0040B54B                 mov     ecx, [eax]
.text:0040B54D                 test    ecx, ecx
.text:0040B54F                 jz      short loc_40B58C
.text:0040B551                 mov     eax, [esi+24h]
.text:0040B554                 test    eax, eax
.text:0040B556                 jz      short loc_40B57C
.text:0040B558                 mov     edx, [eax+4]
.text:0040B55B                 mov     ecx, eax
.text:0040B55D                 mov     [esi+24h], edx
.text:0040B560
.text:0040B560 loc_40B560:                             ; CODE XREF: sub_40B500+8A↓j
.text:0040B560                 xor     eax, eax
.text:0040B562                 test    ecx, ecx
.text:0040B564                 jz      short loc_40B53B
.text:0040B566                 inc     dword ptr [esi+10h]
.text:0040B569                 mov     edx, [esp+2Ch+var_10]
.text:0040B56D                 mov     [ecx], ebx
.text:0040B56F                 mov     eax, [edx+4]
.text:0040B572                 mov     [ecx+4], eax
.text:0040B575                 mov     [edx+4], ecx
.text:0040B578
.text:0040B578 loc_40B578:                             ; CODE XREF: sub_40B500+1C2↓j
.text:0040B578                                         ; sub_40B500+1D8↓j
.text:0040B578                 mov     eax, ebx
.text:0040B57A                 jmp     short loc_40B53B
.text:0040B57C ; ---------------------------------------------------------------------------
.text:0040B57C
.text:0040B57C loc_40B57C:                             ; CODE XREF: sub_40B500+56↑j
.text:0040B57C                 mov     [esp+2Ch+Size], 8 ; Size
.text:0040B583                 call    malloc
.text:0040B588                 mov     ecx, eax
.text:0040B58A                 jmp     short loc_40B560
.text:0040B58C ; ---------------------------------------------------------------------------
.text:0040B58C
.text:0040B58C loc_40B58C:                             ; CODE XREF: sub_40B500+4F↑j
.text:0040B58C                 inc     dword ptr [esi+0Ch]
.text:0040B58F                 xor     edx, edx
.text:0040B591                 mov     [eax], ebx
.text:0040B593                 xor     eax, eax
.text:0040B595                 mov     ecx, [esi+0Ch]
.text:0040B598                 inc     dword ptr [esi+10h]
.text:0040B59B                 push    eax
.text:0040B59C                 push    ecx
.text:0040B59D                 mov     eax, [esi+8]
.text:0040B5A0                 mov     ecx, [esi+14h]
.text:0040B5A3                 fild    [esp+34h+var_34]
.text:0040B5A6                 add     esp, 8
.text:0040B5A9                 push    edx
.text:0040B5AA                 push    eax
.text:0040B5AB                 fild    [esp+34h+var_34]
.text:0040B5AE                 add     esp, 8
.text:0040B5B1                 fld     dword ptr [ecx+8]
.text:0040B5B4                 fmul    st(1), st
.text:0040B5B6                 fxch    st(2)
.text:0040B5B8                 fucompp
.text:0040B5BA                 fnstsw  ax
.text:0040B5BC                 sahf
.text:0040B5BD                 jbe     loc_40B6D6
.text:0040B5C3                 fld     ds:flt_40B4E8
.text:0040B5C9                 fxch    st(1)
.text:0040B5CB                 fucom   st(1)
.text:0040B5CD                 fnstsw  ax
.text:0040B5CF                 sahf
.text:0040B5D0                 jbe     loc_40B6DD
.text:0040B5D6                 fld     ds:flt_40B4F0
.text:0040B5DC                 fucomp  st(1)
.text:0040B5DE                 fnstsw  ax
.text:0040B5E0                 sahf
.text:0040B5E1                 jbe     loc_40B6DD
.text:0040B5E7                 fld     dword ptr [ecx+0Ch]
.text:0040B5EA                 fld     ds:flt_40B4F4
.text:0040B5F0                 fxch    st(1)
.text:0040B5F2                 fucompp
.text:0040B5F4                 fnstsw  ax
.text:0040B5F6                 sahf
.text:0040B5F7                 jbe     loc_40B6DD
.text:0040B5FD                 fld     dword ptr [ecx]
.text:0040B5FF                 fldz
.text:0040B601                 fxch    st(1)
.text:0040B603                 fucom   st(1)
.text:0040B605                 fnstsw  ax
.text:0040B607                 fstp    st(1)
.text:0040B609                 sahf
.text:0040B60A                 jb      loc_40B6E6
.text:0040B610                 faddp   st(2), st
.text:0040B612                 fld     dword ptr [ecx+4]
.text:0040B615                 fucom   st(2)
.text:0040B617                 fnstsw  ax
.text:0040B619                 sahf
.text:0040B61A                 jbe     loc_40B6E6
.text:0040B620                 fld1
.text:0040B622                 fucompp
.text:0040B624                 fnstsw  ax
.text:0040B626                 sahf
.text:0040B627                 jb      loc_40B6DD
.text:0040B62D                 fucompp
.text:0040B62F                 fnstsw  ax
.text:0040B631                 sahf
.text:0040B632                 ja      short loc_40B640
.text:0040B634
.text:0040B634 loc_40B634:                             ; CODE XREF: sub_40B500+1E1↓j
.text:0040B634                 mov     dword ptr [esi+14h], offset dword_40AF80
.text:0040B63B                 mov     ecx, offset dword_40AF80
.text:0040B640
.text:0040B640 loc_40B640:                             ; CODE XREF: sub_40B500+132↑j
.text:0040B640                 mov     eax, [esi+0Ch]
.text:0040B643                 xor     edx, edx
.text:0040B645                 push    edx
.text:0040B646                 xor     edx, edx
.text:0040B648                 push    eax
.text:0040B649                 mov     eax, [esi+8]
.text:0040B64C                 fild    [esp+34h+var_34]
.text:0040B64F                 add     esp, 8
.text:0040B652                 push    edx
.text:0040B653                 push    eax
.text:0040B654                 fild    [esp+34h+var_34]
.text:0040B657                 add     esp, 8
.text:0040B65A                 fld     dword ptr [ecx+8]
.text:0040B65D                 fld     st
.text:0040B65F                 fmul    st, st(2)
.text:0040B661                 fxch    st(3)
.text:0040B663                 fucomp  st(3)
.text:0040B665                 fnstsw  ax
.text:0040B667                 fstp    st(2)
.text:0040B669                 sahf
.text:0040B66A                 jbe     short loc_40B6D4
.text:0040B66C                 cmp     byte ptr [ecx+10h], 0
.text:0040B670                 fmul    dword ptr [ecx+0Ch]
.text:0040B673                 jnz     short loc_40B6D0
.text:0040B675                 fmulp   st(1), st
.text:0040B677
.text:0040B677 loc_40B677:                             ; CODE XREF: sub_40B500+1D2↓j
.text:0040B677                 fld     ds:flt_40B4EC
.text:0040B67D                 fxch    st(1)
.text:0040B67F                 fucom   st(1)
.text:0040B681                 fnstsw  ax
.text:0040B683                 fstp    st(1)
.text:0040B685                 sahf
.text:0040B686                 jnb     short loc_40B6C7
.text:0040B688                 fnstcw  [esp+2Ch+var_12]
.text:0040B68C                 movzx   edx, [esp+2Ch+var_12]
.text:0040B691                 mov     [esp+2Ch+Size], esi
.text:0040B694                 or      dx, 0C00h
.text:0040B699                 mov     [esp+2Ch+var_14], dx
.text:0040B69E                 fldcw   [esp+2Ch+var_14]
.text:0040B6A2                 fistp   [esp+2Ch+var_1C]
.text:0040B6A6                 fldcw   [esp+2Ch+var_12]
.text:0040B6AA                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:0040B6AE                 mov     [esp+2Ch+var_28], ecx
.text:0040B6B2                 call    sub_40B380
.text:0040B6B7                 test    al, al
.text:0040B6B9                 setz    dl
.text:0040B6BC                 movzx   esi, dl
.text:0040B6BF                 dec     esi
.text:0040B6C0                 and     ebx, esi
.text:0040B6C2                 jmp     loc_40B578
.text:0040B6C7 ; ---------------------------------------------------------------------------
.text:0040B6C7
.text:0040B6C7 loc_40B6C7:                             ; CODE XREF: sub_40B500+186↑j
.text:0040B6C7                 fstp    st
.text:0040B6C9                 xor     eax, eax
.text:0040B6CB                 jmp     loc_40B53B
.text:0040B6D0 ; ---------------------------------------------------------------------------
.text:0040B6D0
.text:0040B6D0 loc_40B6D0:                             ; CODE XREF: sub_40B500+173↑j
.text:0040B6D0                 fstp    st(1)
.text:0040B6D2                 jmp     short loc_40B677
.text:0040B6D4 ; ---------------------------------------------------------------------------
.text:0040B6D4
.text:0040B6D4 loc_40B6D4:                             ; CODE XREF: sub_40B500+16A↑j
.text:0040B6D4                 fstp    st
.text:0040B6D6
.text:0040B6D6 loc_40B6D6:                             ; CODE XREF: sub_40B500+BD↑j
.text:0040B6D6                 fstp    st
.text:0040B6D8                 jmp     loc_40B578
.text:0040B6DD ; ---------------------------------------------------------------------------
.text:0040B6DD
.text:0040B6DD loc_40B6DD:                             ; CODE XREF: sub_40B500+D0↑j
.text:0040B6DD                                         ; sub_40B500+E1↑j ...
.text:0040B6DD                 fstp    st
.text:0040B6DF                 fstp    st
.text:0040B6E1                 jmp     loc_40B634
.text:0040B6E6 ; ---------------------------------------------------------------------------
.text:0040B6E6
.text:0040B6E6 loc_40B6E6:                             ; CODE XREF: sub_40B500+10A↑j
.text:0040B6E6                                         ; sub_40B500+11A↑j
.text:0040B6E6                 fstp    st
.text:0040B6E8                 jmp     short loc_40B6DD
.text:0040B6EA ; ---------------------------------------------------------------------------
.text:0040B6EA
.text:0040B6EA loc_40B6EA:                             ; CODE XREF: sub_40B500+15↑j
.text:0040B6EA                 call    abort
.text:0040B6EA sub_40B500      endp
.text:0040B6EA
.text:0040B6EA ; ---------------------------------------------------------------------------
.text:0040B6EF                 align 10h
.text:0040B6F0                 mov     edx, [esp+4]
.text:0040B6F4                 mov     eax, [edx+8]
.text:0040B6F7                 retn
.text:0040B6F7 ; ---------------------------------------------------------------------------
.text:0040B6F8                 align 10h
.text:0040B700                 mov     edx, [esp+4]
.text:0040B704                 mov     eax, [edx+0Ch]
.text:0040B707                 retn
.text:0040B707 ; ---------------------------------------------------------------------------
.text:0040B708                 align 10h
.text:0040B710                 mov     edx, [esp+4]
.text:0040B714                 mov     eax, [edx+10h]
.text:0040B717                 retn
.text:0040B717 ; ---------------------------------------------------------------------------
.text:0040B718                 align 10h
.text:0040B720                 push    esi
.text:0040B721                 xor     esi, esi
.text:0040B723                 push    ebx
.text:0040B724                 mov     edx, [esp+0Ch]
.text:0040B728                 mov     ecx, [edx]
.text:0040B72A                 mov     ebx, [edx+4]
.text:0040B72D                 cmp     ecx, ebx
.text:0040B72F                 jnb     short loc_40B777
.text:0040B731                 jmp     short loc_40B740
.text:0040B731 ; ---------------------------------------------------------------------------
.text:0040B733                 align 10h
.text:0040B740
.text:0040B740 loc_40B740:                             ; CODE XREF: .text:0040B731↑j
.text:0040B740                                         ; .text:0040B775↓j
.text:0040B740                 mov     edx, [ecx]
.text:0040B742                 test    edx, edx
.text:0040B744                 jz      short loc_40B770
.text:0040B746                 mov     eax, [ecx+4]
.text:0040B749                 mov     edx, 1
.text:0040B74E                 test    eax, eax
.text:0040B750                 jz      short loc_40B768
.text:0040B752                 lea     esi, [esi+0]
.text:0040B759                 lea     edi, [edi+0]
.text:0040B760
.text:0040B760 loc_40B760:                             ; CODE XREF: .text:0040B766↓j
.text:0040B760                 mov     eax, [eax+4]
.text:0040B763                 inc     edx
.text:0040B764                 test    eax, eax
.text:0040B766                 jnz     short loc_40B760
.text:0040B768
.text:0040B768 loc_40B768:                             ; CODE XREF: .text:0040B750↑j
.text:0040B768                 cmp     edx, esi
.text:0040B76A                 jbe     short loc_40B770
.text:0040B76C                 mov     esi, edx
.text:0040B76E                 mov     esi, esi
.text:0040B770
.text:0040B770 loc_40B770:                             ; CODE XREF: .text:0040B744↑j
.text:0040B770                                         ; .text:0040B76A↑j
.text:0040B770                 add     ecx, 8
.text:0040B773                 cmp     ecx, ebx
.text:0040B775                 jb      short loc_40B740
.text:0040B777
.text:0040B777 loc_40B777:                             ; CODE XREF: .text:0040B72F↑j
.text:0040B777                 pop     ebx
.text:0040B778                 mov     eax, esi
.text:0040B77A                 pop     esi
.text:0040B77B                 retn
.text:0040B77B ; ---------------------------------------------------------------------------
.text:0040B77C                 align 10h
.text:0040B780                 push    edi
.text:0040B781                 xor     ecx, ecx
.text:0040B783                 push    esi
.text:0040B784                 xor     esi, esi
.text:0040B786                 push    ebx
.text:0040B787                 mov     edi, [esp+10h]
.text:0040B78B                 mov     edx, [edi]
.text:0040B78D                 mov     ebx, [edi+4]
.text:0040B790                 cmp     edx, ebx
.text:0040B792                 jnb     short loc_40B7BF
.text:0040B794                 lea     esi, [esi+0]
.text:0040B79A                 lea     edi, [edi+0]
.text:0040B7A0
.text:0040B7A0 loc_40B7A0:                             ; CODE XREF: .text:0040B7BD↓j
.text:0040B7A0                 mov     eax, [edx]
.text:0040B7A2                 test    eax, eax
.text:0040B7A4                 jz      short loc_40B7B8
.text:0040B7A6                 mov     eax, [edx+4]
.text:0040B7A9                 inc     esi
.text:0040B7AA                 inc     ecx
.text:0040B7AB                 test    eax, eax
.text:0040B7AD                 jz      short loc_40B7B8
.text:0040B7AF                 nop
.text:0040B7B0
.text:0040B7B0 loc_40B7B0:                             ; CODE XREF: .text:0040B7B6↓j
.text:0040B7B0                 mov     eax, [eax+4]
.text:0040B7B3                 inc     ecx
.text:0040B7B4                 test    eax, eax
.text:0040B7B6                 jnz     short loc_40B7B0
.text:0040B7B8
.text:0040B7B8 loc_40B7B8:                             ; CODE XREF: .text:0040B7A4↑j
.text:0040B7B8                                         ; .text:0040B7AD↑j
.text:0040B7B8                 add     edx, 8
.text:0040B7BB                 cmp     edx, ebx
.text:0040B7BD                 jb      short loc_40B7A0
.text:0040B7BF
.text:0040B7BF loc_40B7BF:                             ; CODE XREF: .text:0040B792↑j
.text:0040B7BF                 cmp     esi, [edi+0Ch]
.text:0040B7C2                 jz      short loc_40B7CA
.text:0040B7C4
.text:0040B7C4 loc_40B7C4:                             ; CODE XREF: .text:0040B7CD↓j
.text:0040B7C4                 xor     eax, eax
.text:0040B7C6
.text:0040B7C6 loc_40B7C6:                             ; CODE XREF: .text:0040B7D4↓j
.text:0040B7C6                 pop     ebx
.text:0040B7C7                 pop     esi
.text:0040B7C8                 pop     edi
.text:0040B7C9                 retn
.text:0040B7CA ; ---------------------------------------------------------------------------
.text:0040B7CA
.text:0040B7CA loc_40B7CA:                             ; CODE XREF: .text:0040B7C2↑j
.text:0040B7CA                 cmp     ecx, [edi+10h]
.text:0040B7CD                 jnz     short loc_40B7C4
.text:0040B7CF                 mov     eax, 1
.text:0040B7D4                 jmp     short loc_40B7C6
.text:0040B7D4 ; ---------------------------------------------------------------------------
.text:0040B7D6 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:0040B7D6                                         ; DATA XREF: .text:0040B8CE↓o
.text:0040B7EE aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:0040B7EE                                         ; DATA XREF: .text:0040B8E6↓o
.text:0040B806                 align 20h
.text:0040B820 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:0040B820                                         ; DATA XREF: .text:0040B920↓o
.text:0040B841 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:0040B841                                         ; DATA XREF: .text:0040B93A↓o
.text:0040B859                 db 8Dh, 76h, 0
.text:0040B85C flt_40B85C      dd 100.0                ; DATA XREF: .text:0040B913↓r
.text:0040B860 ; ---------------------------------------------------------------------------
.text:0040B860                 push    ebp
.text:0040B861                 push    edi
.text:0040B862                 push    esi
.text:0040B863                 xor     esi, esi
.text:0040B865                 push    ebx
.text:0040B866                 sub     esp, 1Ch
.text:0040B869                 mov     ebx, [esp+30h]
.text:0040B86D                 mov     edi, [esp+34h]
.text:0040B871                 mov     ecx, [ebx+10h]
.text:0040B874                 mov     eax, [ebx+0Ch]
.text:0040B877                 mov     ebp, [ebx+8]
.text:0040B87A                 mov     [esp+18h], ecx
.text:0040B87E                 mov     ecx, [ebx]
.text:0040B880                 mov     [esp+14h], eax
.text:0040B884                 mov     eax, [ebx+4]
.text:0040B887                 cmp     ecx, eax
.text:0040B889                 jnb     short loc_40B8C7
.text:0040B88B                 mov     ebx, eax
.text:0040B88D                 lea     esi, [esi+0]
.text:0040B890
.text:0040B890 loc_40B890:                             ; CODE XREF: .text:0040B8C5↓j
.text:0040B890                 mov     edx, [ecx]
.text:0040B892                 test    edx, edx
.text:0040B894                 jz      short loc_40B8C0
.text:0040B896                 mov     eax, [ecx+4]
.text:0040B899                 mov     edx, 1
.text:0040B89E                 test    eax, eax
.text:0040B8A0                 jz      short loc_40B8B8
.text:0040B8A2                 lea     esi, [esi+0]
.text:0040B8A9                 lea     edi, [edi+0]
.text:0040B8B0
.text:0040B8B0 loc_40B8B0:                             ; CODE XREF: .text:0040B8B6↓j
.text:0040B8B0                 mov     eax, [eax+4]
.text:0040B8B3                 inc     edx
.text:0040B8B4                 test    eax, eax
.text:0040B8B6                 jnz     short loc_40B8B0
.text:0040B8B8
.text:0040B8B8 loc_40B8B8:                             ; CODE XREF: .text:0040B8A0↑j
.text:0040B8B8                 cmp     edx, esi
.text:0040B8BA                 jbe     short loc_40B8C0
.text:0040B8BC                 mov     esi, edx
.text:0040B8BE                 mov     esi, esi
.text:0040B8C0
.text:0040B8C0 loc_40B8C0:                             ; CODE XREF: .text:0040B894↑j
.text:0040B8C0                                         ; .text:0040B8BA↑j
.text:0040B8C0                 add     ecx, 8
.text:0040B8C3                 cmp     ecx, ebx
.text:0040B8C5                 jb      short loc_40B890
.text:0040B8C7
.text:0040B8C7 loc_40B8C7:                             ; CODE XREF: .text:0040B889↑j
.text:0040B8C7                 mov     [esp], edi
.text:0040B8CA                 mov     edx, [esp+18h]
.text:0040B8CE                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:0040B8D6                 mov     [esp+8], edx
.text:0040B8DA                 call    fprintf
.text:0040B8DF                 mov     [esp+8], ebp
.text:0040B8E3                 mov     [esp], edi
.text:0040B8E6                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:0040B8EE                 call    fprintf
.text:0040B8F3                 mov     ebx, [esp+14h]
.text:0040B8F7                 xor     eax, eax
.text:0040B8F9                 mov     ecx, ebp
.text:0040B8FB                 push    eax
.text:0040B8FC                 xor     ebp, ebp
.text:0040B8FE                 push    ebx
.text:0040B8FF                 fild    qword ptr [esp]
.text:0040B902                 add     esp, 8
.text:0040B905                 push    ebp
.text:0040B906                 push    ecx
.text:0040B907                 fild    qword ptr [esp]
.text:0040B90A                 fxch    st(1)
.text:0040B90C                 add     esp, 8
.text:0040B90F                 mov     ebx, [esp+14h]
.text:0040B913                 fmul    ds:flt_40B85C
.text:0040B919                 mov     [esp], edi
.text:0040B91C                 mov     [esp+8], ebx
.text:0040B920                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0040B928                 fdivrp  st(1), st
.text:0040B92A                 fstp    qword ptr [esp+0Ch]
.text:0040B92E                 call    fprintf
.text:0040B933                 mov     [esp+8], esi
.text:0040B937                 mov     [esp], edi
.text:0040B93A                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:0040B942                 call    fprintf
.text:0040B947                 add     esp, 1Ch
.text:0040B94A                 pop     ebx
.text:0040B94B                 pop     esi
.text:0040B94C                 pop     edi
.text:0040B94D                 pop     ebp
.text:0040B94E                 retn
.text:0040B94E ; ---------------------------------------------------------------------------
.text:0040B94F                 align 10h
.text:0040B950
.text:0040B950 ; =============== S U B R O U T I N E =======================================
.text:0040B950
.text:0040B950
.text:0040B950 sub_40B950      proc near               ; CODE XREF: sub_403910+16C↑p
.text:0040B950                                         ; sub_403910+13B5↑p ...
.text:0040B950
.text:0040B950 var_1C          = dword ptr -1Ch
.text:0040B950 var_18          = dword ptr -18h
.text:0040B950 arg_0           = dword ptr  4
.text:0040B950 arg_4           = dword ptr  8
.text:0040B950
.text:0040B950                 push    edi
.text:0040B951                 push    esi
.text:0040B952                 push    ebx
.text:0040B953                 sub     esp, 10h
.text:0040B956                 mov     esi, [esp+1Ch+arg_0]
.text:0040B95A                 mov     edi, [esp+1Ch+arg_4]
.text:0040B95E                 mov     edx, [esi+8]
.text:0040B961                 mov     [esp+1Ch+var_1C], edi
.text:0040B964                 mov     [esp+1Ch+var_18], edx
.text:0040B968                 call    dword ptr [esi+18h]
.text:0040B96B                 mov     ecx, [esi]
.text:0040B96D                 lea     eax, [ecx+eax*8]
.text:0040B970                 cmp     eax, [esi+4]
.text:0040B973                 jnb     short loc_40B9B4
.text:0040B975                 mov     ecx, [eax]
.text:0040B977                 test    ecx, ecx
.text:0040B979                 jz      short loc_40B9A7
.text:0040B97B                 test    eax, eax
.text:0040B97D                 mov     ebx, eax
.text:0040B97F                 jz      short loc_40B9A7
.text:0040B981                 jmp     short loc_40B990
.text:0040B981 ; ---------------------------------------------------------------------------
.text:0040B983                 align 10h
.text:0040B990
.text:0040B990 loc_40B990:                             ; CODE XREF: sub_40B950+31↑j
.text:0040B990                                         ; sub_40B950+55↓j
.text:0040B990                 mov     edx, [ebx]
.text:0040B992                 mov     [esp+1Ch+var_1C], edi
.text:0040B995                 mov     [esp+1Ch+var_18], edx
.text:0040B999                 call    dword ptr [esi+1Ch]
.text:0040B99C                 test    al, al
.text:0040B99E                 jnz     short loc_40B9B0
.text:0040B9A0                 mov     ebx, [ebx+4]
.text:0040B9A3                 test    ebx, ebx
.text:0040B9A5                 jnz     short loc_40B990
.text:0040B9A7
.text:0040B9A7 loc_40B9A7:                             ; CODE XREF: sub_40B950+29↑j
.text:0040B9A7                                         ; sub_40B950+2F↑j
.text:0040B9A7                 xor     eax, eax
.text:0040B9A9
.text:0040B9A9 loc_40B9A9:                             ; CODE XREF: sub_40B950+62↓j
.text:0040B9A9                 add     esp, 10h
.text:0040B9AC                 pop     ebx
.text:0040B9AD                 pop     esi
.text:0040B9AE                 pop     edi
.text:0040B9AF                 retn
.text:0040B9B0 ; ---------------------------------------------------------------------------
.text:0040B9B0
.text:0040B9B0 loc_40B9B0:                             ; CODE XREF: sub_40B950+4E↑j
.text:0040B9B0                 mov     eax, [ebx]
.text:0040B9B2                 jmp     short loc_40B9A9
.text:0040B9B4 ; ---------------------------------------------------------------------------
.text:0040B9B4
.text:0040B9B4 loc_40B9B4:                             ; CODE XREF: sub_40B950+23↑j
.text:0040B9B4                 call    abort
.text:0040B9B4 sub_40B950      endp
.text:0040B9B4
.text:0040B9B4 ; ---------------------------------------------------------------------------
.text:0040B9B9                 align 10h
.text:0040B9C0                 sub     esp, 0Ch
.text:0040B9C3                 mov     eax, [esp+10h]
.text:0040B9C7                 mov     edx, [eax+10h]
.text:0040B9CA                 test    edx, edx
.text:0040B9CC                 jz      short loc_40B9F3
.text:0040B9CE                 mov     edx, [eax]
.text:0040B9D0                 mov     ecx, [eax+4]
.text:0040B9D3                 lea     esi, [esi+0]
.text:0040B9D9                 lea     edi, [edi+0]
.text:0040B9E0
.text:0040B9E0 loc_40B9E0:                             ; CODE XREF: .text:0040B9ED↓j
.text:0040B9E0                 cmp     edx, ecx
.text:0040B9E2                 jnb     short loc_40B9F7
.text:0040B9E4                 mov     eax, [edx]
.text:0040B9E6                 test    eax, eax
.text:0040B9E8                 jnz     short loc_40B9EF
.text:0040B9EA                 add     edx, 8
.text:0040B9ED                 jmp     short loc_40B9E0
.text:0040B9EF ; ---------------------------------------------------------------------------
.text:0040B9EF
.text:0040B9EF loc_40B9EF:                             ; CODE XREF: .text:0040B9E8↑j
.text:0040B9EF                                         ; .text:0040B9F5↓j
.text:0040B9EF                 add     esp, 0Ch
.text:0040B9F2                 retn
.text:0040B9F3 ; ---------------------------------------------------------------------------
.text:0040B9F3
.text:0040B9F3 loc_40B9F3:                             ; CODE XREF: .text:0040B9CC↑j
.text:0040B9F3                 xor     eax, eax
.text:0040B9F5                 jmp     short loc_40B9EF
.text:0040B9F7 ; ---------------------------------------------------------------------------
.text:0040B9F7
.text:0040B9F7 loc_40B9F7:                             ; CODE XREF: .text:0040B9E2↑j
.text:0040B9F7                 call    abort
.text:0040B9F7 ; ---------------------------------------------------------------------------
.text:0040B9FC                 align 10h
.text:0040BA00                 push    esi
.text:0040BA01                 push    ebx
.text:0040BA02                 sub     esp, 14h
.text:0040BA05                 mov     ebx, [esp+20h]
.text:0040BA09                 mov     esi, [esp+24h]
.text:0040BA0D                 mov     edx, [ebx+8]
.text:0040BA10                 mov     [esp], esi
.text:0040BA13                 mov     [esp+4], edx
.text:0040BA17                 call    dword ptr [ebx+18h]
.text:0040BA1A                 mov     ecx, [ebx]
.text:0040BA1C                 lea     edx, [ecx+eax*8]
.text:0040BA1F                 mov     ecx, [ebx+4]
.text:0040BA22                 cmp     edx, ecx
.text:0040BA24                 jnb     short loc_40BA70
.text:0040BA26                 test    edx, edx
.text:0040BA28                 mov     eax, edx
.text:0040BA2A                 jz      short loc_40BA3B
.text:0040BA2C                 lea     esi, [esi+0]
.text:0040BA30
.text:0040BA30 loc_40BA30:                             ; CODE XREF: .text:0040BA39↓j
.text:0040BA30                 cmp     [eax], esi
.text:0040BA32                 jz      short loc_40BA65
.text:0040BA34                 mov     eax, [eax+4]
.text:0040BA37
.text:0040BA37 loc_40BA37:                             ; CODE XREF: .text:0040BA6A↓j
.text:0040BA37                 test    eax, eax
.text:0040BA39                 jnz     short loc_40BA30
.text:0040BA3B
.text:0040BA3B loc_40BA3B:                             ; CODE XREF: .text:0040BA2A↑j
.text:0040BA3B                 add     edx, 8
.text:0040BA3E                 cmp     edx, ecx
.text:0040BA40                 jnb     short loc_40BA5D
.text:0040BA42                 lea     esi, [esi+0]
.text:0040BA49                 lea     edi, [edi+0]
.text:0040BA50
.text:0040BA50 loc_40BA50:                             ; CODE XREF: .text:0040BA5B↓j
.text:0040BA50                 mov     eax, [edx]
.text:0040BA52                 test    eax, eax
.text:0040BA54                 jnz     short loc_40BA5F
.text:0040BA56                 add     edx, 8
.text:0040BA59                 cmp     edx, ecx
.text:0040BA5B                 jb      short loc_40BA50
.text:0040BA5D
.text:0040BA5D loc_40BA5D:                             ; CODE XREF: .text:0040BA40↑j
.text:0040BA5D                 xor     eax, eax
.text:0040BA5F
.text:0040BA5F loc_40BA5F:                             ; CODE XREF: .text:0040BA54↑j
.text:0040BA5F                                         ; .text:0040BA6E↓j
.text:0040BA5F                 add     esp, 14h
.text:0040BA62                 pop     ebx
.text:0040BA63                 pop     esi
.text:0040BA64                 retn
.text:0040BA65 ; ---------------------------------------------------------------------------
.text:0040BA65
.text:0040BA65 loc_40BA65:                             ; CODE XREF: .text:0040BA32↑j
.text:0040BA65                 mov     eax, [eax+4]
.text:0040BA68                 test    eax, eax
.text:0040BA6A                 jz      short loc_40BA37
.text:0040BA6C                 mov     eax, [eax]
.text:0040BA6E                 jmp     short loc_40BA5F
.text:0040BA70 ; ---------------------------------------------------------------------------
.text:0040BA70
.text:0040BA70 loc_40BA70:                             ; CODE XREF: .text:0040BA24↑j
.text:0040BA70                 call    abort
.text:0040BA70 ; ---------------------------------------------------------------------------
.text:0040BA75                 align 10h
.text:0040BA80                 push    ebp
.text:0040BA81                 xor     ecx, ecx
.text:0040BA83                 push    edi
.text:0040BA84                 push    esi
.text:0040BA85                 push    ebx
.text:0040BA86                 mov     edx, [esp+14h]
.text:0040BA8A                 mov     ebp, [esp+18h]
.text:0040BA8E                 mov     edi, [esp+1Ch]
.text:0040BA92                 mov     ebx, [edx]
.text:0040BA94                 mov     esi, [edx+4]
.text:0040BA97                 cmp     ebx, esi
.text:0040BA99                 jnb     short loc_40BAD0
.text:0040BA9B                 nop
.text:0040BA9C                 lea     esi, [esi+0]
.text:0040BAA0
.text:0040BAA0 loc_40BAA0:                             ; CODE XREF: .text:0040BAC7↓j
.text:0040BAA0                 mov     edx, [ebx]
.text:0040BAA2                 test    edx, edx
.text:0040BAA4                 jz      short loc_40BAC2
.text:0040BAA6                 mov     edx, ebx
.text:0040BAA8                 nop
.text:0040BAA9                 lea     esi, [esi+0]
.text:0040BAB0
.text:0040BAB0 loc_40BAB0:                             ; CODE XREF: .text:0040BAC0↓j
.text:0040BAB0                 cmp     ecx, edi
.text:0040BAB2                 jnb     short loc_40BAD0
.text:0040BAB4                 mov     eax, [edx]
.text:0040BAB6                 mov     edx, [edx+4]
.text:0040BAB9                 mov     [ebp+ecx*4+0], eax
.text:0040BABD                 inc     ecx
.text:0040BABE                 test    edx, edx
.text:0040BAC0                 jnz     short loc_40BAB0
.text:0040BAC2
.text:0040BAC2 loc_40BAC2:                             ; CODE XREF: .text:0040BAA4↑j
.text:0040BAC2                 add     ebx, 8
.text:0040BAC5                 cmp     ebx, esi
.text:0040BAC7                 jb      short loc_40BAA0
.text:0040BAC9                 lea     esi, [esi+0]
.text:0040BAD0
.text:0040BAD0 loc_40BAD0:                             ; CODE XREF: .text:0040BA99↑j
.text:0040BAD0                                         ; .text:0040BAB2↑j
.text:0040BAD0                 pop     ebx
.text:0040BAD1                 mov     eax, ecx
.text:0040BAD3                 pop     esi
.text:0040BAD4                 pop     edi
.text:0040BAD5                 pop     ebp
.text:0040BAD6                 retn
.text:0040BAD6 ; ---------------------------------------------------------------------------
.text:0040BAD7                 align 10h
.text:0040BAE0                 push    ebp
.text:0040BAE1                 push    edi
.text:0040BAE2                 xor     edi, edi
.text:0040BAE4                 push    esi
.text:0040BAE5                 push    ebx
.text:0040BAE6                 sub     esp, 0Ch
.text:0040BAE9                 mov     edx, [esp+20h]
.text:0040BAED                 mov     ebp, [esp+28h]
.text:0040BAF1                 mov     esi, [edx]
.text:0040BAF3                 mov     eax, [edx+4]
.text:0040BAF6                 cmp     esi, eax
.text:0040BAF8                 jnb     short loc_40BB40
.text:0040BAFA                 lea     esi, [esi+0]
.text:0040BB00
.text:0040BB00 loc_40BB00:                             ; CODE XREF: .text:0040BB35↓j
.text:0040BB00                 mov     ecx, [esi]
.text:0040BB02                 test    ecx, ecx
.text:0040BB04                 jz      short loc_40BB30
.text:0040BB06                 mov     ebx, esi
.text:0040BB08                 nop
.text:0040BB09                 lea     esi, [esi+0]
.text:0040BB10
.text:0040BB10 loc_40BB10:                             ; CODE XREF: .text:0040BB27↓j
.text:0040BB10                 mov     [esp+4], ebp
.text:0040BB14                 mov     edx, [ebx]
.text:0040BB16                 mov     [esp], edx
.text:0040BB19                 call    dword ptr [esp+24h]
.text:0040BB1D                 test    al, al
.text:0040BB1F                 jz      short loc_40BB40
.text:0040BB21                 mov     ebx, [ebx+4]
.text:0040BB24                 inc     edi
.text:0040BB25                 test    ebx, ebx
.text:0040BB27                 jnz     short loc_40BB10
.text:0040BB29                 mov     ebx, [esp+20h]
.text:0040BB2D                 mov     eax, [ebx+4]
.text:0040BB30
.text:0040BB30 loc_40BB30:                             ; CODE XREF: .text:0040BB04↑j
.text:0040BB30                 add     esi, 8
.text:0040BB33                 cmp     esi, eax
.text:0040BB35                 jb      short loc_40BB00
.text:0040BB37                 mov     esi, esi
.text:0040BB39                 lea     edi, [edi+0]
.text:0040BB40
.text:0040BB40 loc_40BB40:                             ; CODE XREF: .text:0040BAF8↑j
.text:0040BB40                                         ; .text:0040BB1F↑j
.text:0040BB40                 add     esp, 0Ch
.text:0040BB43                 mov     eax, edi
.text:0040BB45                 pop     ebx
.text:0040BB46                 pop     esi
.text:0040BB47                 pop     edi
.text:0040BB48                 pop     ebp
.text:0040BB49                 retn
.text:0040BB49 ; ---------------------------------------------------------------------------
.text:0040BB4A                 align 10h
.text:0040BB50                 push    esi
.text:0040BB51                 push    ebx
.text:0040BB52                 mov     ecx, [esp+0Ch]
.text:0040BB56                 xor     ebx, ebx
.text:0040BB58                 mov     esi, [esp+10h]
.text:0040BB5C                 movzx   edx, byte ptr [ecx]
.text:0040BB5F                 test    dl, dl
.text:0040BB61                 jz      short loc_40BB8A
.text:0040BB63                 lea     esi, [esi+0]
.text:0040BB69                 lea     edi, [edi+0]
.text:0040BB70
.text:0040BB70 loc_40BB70:                             ; CODE XREF: .text:0040BB88↓j
.text:0040BB70                 mov     eax, ebx
.text:0040BB72                 inc     ecx
.text:0040BB73                 shl     eax, 5
.text:0040BB76                 sub     eax, ebx
.text:0040BB78                 movzx   ebx, dl
.text:0040BB7B                 add     eax, ebx
.text:0040BB7D                 xor     edx, edx
.text:0040BB7F                 div     esi
.text:0040BB81                 mov     ebx, edx
.text:0040BB83                 movzx   edx, byte ptr [ecx]
.text:0040BB86                 test    dl, dl
.text:0040BB88                 jnz     short loc_40BB70
.text:0040BB8A
.text:0040BB8A loc_40BB8A:                             ; CODE XREF: .text:0040BB61↑j
.text:0040BB8A                 mov     eax, ebx
.text:0040BB8C                 pop     ebx
.text:0040BB8D                 pop     esi
.text:0040BB8E                 retn
.text:0040BB8E ; ---------------------------------------------------------------------------
.text:0040BB8F                 align 10h
.text:0040BB90                 mov     ecx, [esp+4]
.text:0040BB94                 mov     edx, ds:dword_40AF80
.text:0040BB9A                 mov     [ecx], edx
.text:0040BB9C                 mov     edx, ds:dword_40AF84
.text:0040BBA2                 mov     [ecx+4], edx
.text:0040BBA5                 mov     edx, ds:dword_40AF84+4
.text:0040BBAB                 mov     [ecx+8], edx
.text:0040BBAE                 mov     edx, ds:dword_40AF84+8
.text:0040BBB4                 mov     [ecx+0Ch], edx
.text:0040BBB7                 mov     edx, ds:dword_40AF84+0Ch
.text:0040BBBD                 mov     [ecx+10h], edx
.text:0040BBC0                 retn
.text:0040BBC0 ; ---------------------------------------------------------------------------
.text:0040BBC1                 align 4
.text:0040BBC4 flt_40BBC4      dd 0.1                  ; DATA XREF: sub_40BBD0+79↓r
.text:0040BBC8 flt_40BBC8      dd 0.89999998           ; DATA XREF: sub_40BBD0+8D↓r
.text:0040BBCC flt_40BBCC      dd 1.1                  ; DATA XREF: sub_40BBD0+A1↓r
.text:0040BBD0
.text:0040BBD0 ; =============== S U B R O U T I N E =======================================
.text:0040BBD0
.text:0040BBD0
.text:0040BBD0 sub_40BBD0      proc near               ; CODE XREF: sub_4065C0+40↑p
.text:0040BBD0
.text:0040BBD0 var_34          = qword ptr -34h
.text:0040BBD0 var_2C          = dword ptr -2Ch
.text:0040BBD0 var_28          = dword ptr -28h
.text:0040BBD0 var_24          = dword ptr -24h
.text:0040BBD0 var_20          = dword ptr -20h
.text:0040BBD0 var_1C          = qword ptr -1Ch
.text:0040BBD0 var_14          = word ptr -14h
.text:0040BBD0 var_12          = word ptr -12h
.text:0040BBD0 var_10          = dword ptr -10h
.text:0040BBD0 arg_0           = dword ptr  4
.text:0040BBD0 arg_4           = dword ptr  8
.text:0040BBD0
.text:0040BBD0                 push    esi
.text:0040BBD1                 push    ebx
.text:0040BBD2                 sub     esp, 24h
.text:0040BBD5                 lea     edx, [esp+2Ch+var_10]
.text:0040BBD9                 mov     [esp+2Ch+var_24], edx
.text:0040BBDD                 mov     ebx, [esp+2Ch+arg_0]
.text:0040BBE1                 mov     edx, [esp+2Ch+arg_4]
.text:0040BBE5                 mov     [esp+2Ch+var_20], 1
.text:0040BBED                 mov     [esp+2Ch+var_2C], ebx
.text:0040BBF0                 mov     [esp+2Ch+var_28], edx
.text:0040BBF4                 call    sub_40BD60
.text:0040BBF9                 mov     esi, eax
.text:0040BBFB                 xor     eax, eax
.text:0040BBFD                 test    esi, esi
.text:0040BBFF                 jz      loc_40BD32
.text:0040BC05                 dec     dword ptr [ebx+10h]
.text:0040BC08                 mov     ecx, [esp+2Ch+var_10]
.text:0040BC0C                 mov     edx, [ecx]
.text:0040BC0E                 test    edx, edx
.text:0040BC10                 jnz     loc_40BD30
.text:0040BC16                 dec     dword ptr [ebx+0Ch]
.text:0040BC19                 xor     eax, eax
.text:0040BC1B                 xor     edx, edx
.text:0040BC1D                 mov     ecx, [ebx+0Ch]
.text:0040BC20                 push    eax
.text:0040BC21                 push    ecx
.text:0040BC22                 mov     eax, [ebx+8]
.text:0040BC25                 mov     ecx, [ebx+14h]
.text:0040BC28                 fild    [esp+34h+var_34]
.text:0040BC2B                 add     esp, 8
.text:0040BC2E                 push    edx
.text:0040BC2F                 push    eax
.text:0040BC30                 fild    [esp+34h+var_34]
.text:0040BC33                 add     esp, 8
.text:0040BC36                 fld     dword ptr [ecx]
.text:0040BC38                 fmul    st(1), st
.text:0040BC3A                 fxch    st(1)
.text:0040BC3C                 fucomp  st(2)
.text:0040BC3E                 fnstsw  ax
.text:0040BC40                 fstp    st(1)
.text:0040BC42                 sahf
.text:0040BC43                 jbe     loc_40BD40
.text:0040BC49                 fld     ds:flt_40BBC4
.text:0040BC4F                 fld     dword ptr [ecx+8]
.text:0040BC52                 fucom   st(1)
.text:0040BC54                 fnstsw  ax
.text:0040BC56                 sahf
.text:0040BC57                 jbe     loc_40BD50
.text:0040BC5D                 fld     ds:flt_40BBC8
.text:0040BC63                 fucomp  st(1)
.text:0040BC65                 fnstsw  ax
.text:0040BC67                 sahf
.text:0040BC68                 jbe     loc_40BD50
.text:0040BC6E                 fld     dword ptr [ecx+0Ch]
.text:0040BC71                 fld     ds:flt_40BBCC
.text:0040BC77                 fxch    st(1)
.text:0040BC79                 fucompp
.text:0040BC7B                 fnstsw  ax
.text:0040BC7D                 sahf
.text:0040BC7E                 jbe     loc_40BD50
.text:0040BC84                 fldz
.text:0040BC86                 fxch    st(3)
.text:0040BC88                 fucom   st(3)
.text:0040BC8A                 fnstsw  ax
.text:0040BC8C                 fstp    st(3)
.text:0040BC8E                 sahf
.text:0040BC8F                 jb      loc_40BD50
.text:0040BC95                 fxch    st(1)
.text:0040BC97                 faddp   st(2), st
.text:0040BC99                 fld     dword ptr [ecx+4]
.text:0040BC9C                 fucom   st(2)
.text:0040BC9E                 fnstsw  ax
.text:0040BCA0                 sahf
.text:0040BCA1                 jbe     loc_40BD50
.text:0040BCA7                 fld1
.text:0040BCA9                 fucompp
.text:0040BCAB                 fnstsw  ax
.text:0040BCAD                 sahf
.text:0040BCAE                 jb      loc_40BD44
.text:0040BCB4                 fucompp
.text:0040BCB6                 fnstsw  ax
.text:0040BCB8                 sahf
.text:0040BCB9                 ja      short loc_40BCCC
.text:0040BCBB                 nop
.text:0040BCBC                 lea     esi, [esi+0]
.text:0040BCC0
.text:0040BCC0 loc_40BCC0:                             ; CODE XREF: sub_40BBD0+178↓j
.text:0040BCC0                 mov     dword ptr [ebx+14h], offset dword_40AF80
.text:0040BCC7                 mov     ecx, offset dword_40AF80
.text:0040BCCC
.text:0040BCCC loc_40BCCC:                             ; CODE XREF: sub_40BBD0+E9↑j
.text:0040BCCC                 mov     eax, [ebx+0Ch]
.text:0040BCCF                 xor     edx, edx
.text:0040BCD1                 push    edx
.text:0040BCD2                 xor     edx, edx
.text:0040BCD4                 push    eax
.text:0040BCD5                 mov     eax, [ebx+8]
.text:0040BCD8                 fild    [esp+34h+var_34]
.text:0040BCDB                 add     esp, 8
.text:0040BCDE                 push    edx
.text:0040BCDF                 push    eax
.text:0040BCE0                 fild    [esp+34h+var_34]
.text:0040BCE3                 add     esp, 8
.text:0040BCE6                 fld     dword ptr [ecx]
.text:0040BCE8                 fmul    st, st(1)
.text:0040BCEA                 fucomp  st(2)
.text:0040BCEC                 fnstsw  ax
.text:0040BCEE                 fstp    st(1)
.text:0040BCF0                 sahf
.text:0040BCF1                 jbe     short loc_40BD40
.text:0040BCF3                 cmp     byte ptr [ecx+10h], 0
.text:0040BCF7                 jz      short loc_40BD38
.text:0040BCF9                 fmul    dword ptr [ecx+4]
.text:0040BCFC
.text:0040BCFC loc_40BCFC:                             ; CODE XREF: sub_40BBD0+16E↓j
.text:0040BCFC                 fnstcw  [esp+2Ch+var_12]
.text:0040BD00                 movzx   ecx, [esp+2Ch+var_12]
.text:0040BD05                 mov     [esp+2Ch+var_2C], ebx
.text:0040BD08                 or      cx, 0C00h
.text:0040BD0D                 mov     [esp+2Ch+var_14], cx
.text:0040BD12                 fldcw   [esp+2Ch+var_14]
.text:0040BD16                 fistp   [esp+2Ch+var_1C]
.text:0040BD1A                 fldcw   [esp+2Ch+var_12]
.text:0040BD1E                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:0040BD22                 mov     [esp+2Ch+var_28], edx
.text:0040BD26                 call    sub_40B380
.text:0040BD2B                 nop
.text:0040BD2C                 lea     esi, [esi+0]
.text:0040BD30
.text:0040BD30 loc_40BD30:                             ; CODE XREF: sub_40BBD0+40↑j
.text:0040BD30                                         ; sub_40BBD0+172↓j
.text:0040BD30                 mov     eax, esi
.text:0040BD32
.text:0040BD32 loc_40BD32:                             ; CODE XREF: sub_40BBD0+2F↑j
.text:0040BD32                 add     esp, 24h
.text:0040BD35                 pop     ebx
.text:0040BD36                 pop     esi
.text:0040BD37                 retn
.text:0040BD38 ; ---------------------------------------------------------------------------
.text:0040BD38
.text:0040BD38 loc_40BD38:                             ; CODE XREF: sub_40BBD0+127↑j
.text:0040BD38                 fmul    dword ptr [ecx+4]
.text:0040BD3B                 fmul    dword ptr [ecx+8]
.text:0040BD3E                 jmp     short loc_40BCFC
.text:0040BD40 ; ---------------------------------------------------------------------------
.text:0040BD40
.text:0040BD40 loc_40BD40:                             ; CODE XREF: sub_40BBD0+73↑j
.text:0040BD40                                         ; sub_40BBD0+121↑j
.text:0040BD40                 fstp    st
.text:0040BD42                 jmp     short loc_40BD30
.text:0040BD44 ; ---------------------------------------------------------------------------
.text:0040BD44
.text:0040BD44 loc_40BD44:                             ; CODE XREF: sub_40BBD0+DE↑j
.text:0040BD44                                         ; sub_40BBD0+182↓j
.text:0040BD44                 fstp    st
.text:0040BD46                 fstp    st
.text:0040BD48                 jmp     loc_40BCC0
.text:0040BD48 ; ---------------------------------------------------------------------------
.text:0040BD4D                 align 10h
.text:0040BD50
.text:0040BD50 loc_40BD50:                             ; CODE XREF: sub_40BBD0+87↑j
.text:0040BD50                                         ; sub_40BBD0+98↑j ...
.text:0040BD50                 fstp    st
.text:0040BD52                 jmp     short loc_40BD44
.text:0040BD52 sub_40BBD0      endp
.text:0040BD52
.text:0040BD52 ; ---------------------------------------------------------------------------
.text:0040BD54                 align 10h
.text:0040BD60
.text:0040BD60 ; =============== S U B R O U T I N E =======================================
.text:0040BD60
.text:0040BD60
.text:0040BD60 sub_40BD60      proc near               ; CODE XREF: sub_40B500+32↑p
.text:0040BD60                                         ; sub_40BBD0+24↑p
.text:0040BD60
.text:0040BD60 var_1C          = dword ptr -1Ch
.text:0040BD60 var_18          = dword ptr -18h
.text:0040BD60 var_D           = byte ptr -0Dh
.text:0040BD60 arg_0           = dword ptr  4
.text:0040BD60 arg_4           = dword ptr  8
.text:0040BD60 arg_8           = dword ptr  0Ch
.text:0040BD60 arg_C           = byte ptr  10h
.text:0040BD60
.text:0040BD60                 push    edi
.text:0040BD61                 push    esi
.text:0040BD62                 push    ebx
.text:0040BD63                 sub     esp, 10h
.text:0040BD66                 mov     esi, [esp+1Ch+arg_0]
.text:0040BD6A                 movzx   ecx, [esp+1Ch+arg_C]
.text:0040BD6F                 mov     edi, [esp+1Ch+arg_4]
.text:0040BD73                 mov     edx, [esi+8]
.text:0040BD76                 mov     [esp+1Ch+var_D], cl
.text:0040BD7A                 mov     [esp+1Ch+var_18], edx
.text:0040BD7E                 mov     [esp+1Ch+var_1C], edi
.text:0040BD81                 call    dword ptr [esi+18h]
.text:0040BD84                 mov     ecx, [esi]
.text:0040BD86                 lea     ebx, [ecx+eax*8]
.text:0040BD89                 cmp     ebx, [esi+4]
.text:0040BD8C                 jnb     loc_40BE43
.text:0040BD92                 mov     edx, [esp+1Ch+arg_8]
.text:0040BD96                 xor     eax, eax
.text:0040BD98                 mov     [edx], ebx
.text:0040BD9A                 mov     edx, [ebx]
.text:0040BD9C                 test    edx, edx
.text:0040BD9E                 jz      short loc_40BDE2
.text:0040BDA0                 mov     [esp+1Ch+var_18], edx
.text:0040BDA4                 mov     [esp+1Ch+var_1C], edi
.text:0040BDA7                 call    dword ptr [esi+1Ch]
.text:0040BDAA                 test    al, al
.text:0040BDAC                 jz      short loc_40BDF1
.text:0040BDAE                 cmp     [esp+1Ch+var_D], 0
.text:0040BDB3                 mov     edi, [ebx]
.text:0040BDB5                 jz      short loc_40BDE0
.text:0040BDB7                 mov     ecx, [ebx+4]
.text:0040BDBA                 test    ecx, ecx
.text:0040BDBC                 jz      short loc_40BDE9
.text:0040BDBE                 mov     eax, [ecx]
.text:0040BDC0                 mov     edx, [ecx+4]
.text:0040BDC3                 mov     [ebx], eax
.text:0040BDC5                 mov     [ebx+4], edx
.text:0040BDC8                 mov     ebx, [esi+24h]
.text:0040BDCB                 mov     dword ptr [ecx], 0
.text:0040BDD1                 mov     [ecx+4], ebx
.text:0040BDD4                 mov     [esi+24h], ecx
.text:0040BDD7                 mov     esi, esi
.text:0040BDD9                 lea     edi, [edi+0]
.text:0040BDE0
.text:0040BDE0 loc_40BDE0:                             ; CODE XREF: sub_40BD60+55↑j
.text:0040BDE0                                         ; sub_40BD60+8F↓j
.text:0040BDE0                 mov     eax, edi
.text:0040BDE2
.text:0040BDE2 loc_40BDE2:                             ; CODE XREF: sub_40BD60+3E↑j
.text:0040BDE2                                         ; sub_40BD60+BC↓j ...
.text:0040BDE2                 add     esp, 10h
.text:0040BDE5                 pop     ebx
.text:0040BDE6                 pop     esi
.text:0040BDE7                 pop     edi
.text:0040BDE8                 retn
.text:0040BDE9 ; ---------------------------------------------------------------------------
.text:0040BDE9
.text:0040BDE9 loc_40BDE9:                             ; CODE XREF: sub_40BD60+5C↑j
.text:0040BDE9                 mov     dword ptr [ebx], 0
.text:0040BDEF                 jmp     short loc_40BDE0
.text:0040BDF1 ; ---------------------------------------------------------------------------
.text:0040BDF1
.text:0040BDF1 loc_40BDF1:                             ; CODE XREF: sub_40BD60+4C↑j
.text:0040BDF1                 mov     eax, [ebx+4]
.text:0040BDF4                 test    eax, eax
.text:0040BDF6                 jz      short loc_40BE1A
.text:0040BDF8                 nop
.text:0040BDF9                 lea     esi, [esi+0]
.text:0040BE00
.text:0040BE00 loc_40BE00:                             ; CODE XREF: sub_40BD60+B8↓j
.text:0040BE00                 mov     ecx, [eax]
.text:0040BE02                 mov     [esp+1Ch+var_1C], edi
.text:0040BE05                 mov     [esp+1Ch+var_18], ecx
.text:0040BE09                 call    dword ptr [esi+1Ch]
.text:0040BE0C                 test    al, al
.text:0040BE0E                 jnz     short loc_40BE1E
.text:0040BE10                 mov     ebx, [ebx+4]
.text:0040BE13                 mov     eax, [ebx+4]
.text:0040BE16                 test    eax, eax
.text:0040BE18                 jnz     short loc_40BE00
.text:0040BE1A
.text:0040BE1A loc_40BE1A:                             ; CODE XREF: sub_40BD60+96↑j
.text:0040BE1A                 xor     eax, eax
.text:0040BE1C                 jmp     short loc_40BDE2
.text:0040BE1E ; ---------------------------------------------------------------------------
.text:0040BE1E
.text:0040BE1E loc_40BE1E:                             ; CODE XREF: sub_40BD60+AE↑j
.text:0040BE1E                 cmp     [esp+1Ch+var_D], 0
.text:0040BE23                 mov     edx, [ebx+4]
.text:0040BE26                 mov     ecx, [edx]
.text:0040BE28                 jz      short loc_40BE3F
.text:0040BE2A                 mov     dword ptr [edx], 0
.text:0040BE30                 mov     edi, [edx+4]
.text:0040BE33                 mov     [ebx+4], edi
.text:0040BE36                 mov     edi, [esi+24h]
.text:0040BE39                 mov     [edx+4], edi
.text:0040BE3C                 mov     [esi+24h], edx
.text:0040BE3F
.text:0040BE3F loc_40BE3F:                             ; CODE XREF: sub_40BD60+C8↑j
.text:0040BE3F                 mov     eax, ecx
.text:0040BE41                 jmp     short loc_40BDE2
.text:0040BE43 ; ---------------------------------------------------------------------------
.text:0040BE43
.text:0040BE43 loc_40BE43:                             ; CODE XREF: sub_40BD60+2C↑j
.text:0040BE43                 call    abort
.text:0040BE43 sub_40BD60      endp
.text:0040BE43
.text:0040BE43 ; ---------------------------------------------------------------------------
.text:0040BE48                 align 20h
.text:0040BE60
.text:0040BE60 ; =============== S U B R O U T I N E =======================================
.text:0040BE60
.text:0040BE60
.text:0040BE60 sub_40BE60      proc near               ; CODE XREF: sub_406380+1C↑p
.text:0040BE60
.text:0040BE60 arg_0           = dword ptr  4
.text:0040BE60 arg_4           = dword ptr  8
.text:0040BE60
.text:0040BE60                 push    esi
.text:0040BE61                 push    ebx
.text:0040BE62                 mov     ecx, [esp+8+arg_0]
.text:0040BE66                 xor     ebx, ebx
.text:0040BE68                 mov     esi, [esp+8+arg_4]
.text:0040BE6C                 movzx   eax, byte ptr [ecx]
.text:0040BE6F                 test    al, al
.text:0040BE71                 jz      short loc_40BE93
.text:0040BE73                 lea     esi, [esi+0]
.text:0040BE79                 lea     edi, [edi+0]
.text:0040BE80
.text:0040BE80 loc_40BE80:                             ; CODE XREF: sub_40BE60+31↓j
.text:0040BE80                 movsx   edx, al
.text:0040BE83                 inc     ecx
.text:0040BE84                 mov     eax, ebx
.text:0040BE86                 rol     eax, 9
.text:0040BE89                 lea     ebx, [eax+edx]
.text:0040BE8C                 movzx   eax, byte ptr [ecx]
.text:0040BE8F                 test    al, al
.text:0040BE91                 jnz     short loc_40BE80
.text:0040BE93
.text:0040BE93 loc_40BE93:                             ; CODE XREF: sub_40BE60+11↑j
.text:0040BE93                 mov     eax, ebx
.text:0040BE95                 xor     edx, edx
.text:0040BE97                 div     esi
.text:0040BE99                 pop     ebx
.text:0040BE9A                 pop     esi
.text:0040BE9B                 mov     eax, edx
.text:0040BE9D                 retn
.text:0040BE9D sub_40BE60      endp
.text:0040BE9D
.text:0040BE9D ; ---------------------------------------------------------------------------
.text:0040BE9E                 align 10h
.text:0040BEA0
.text:0040BEA0 ; =============== S U B R O U T I N E =======================================
.text:0040BEA0
.text:0040BEA0
.text:0040BEA0 sub_40BEA0      proc near               ; CODE XREF: sub_4058C0+2BF↑p
.text:0040BEA0                                         ; sub_4058C0+3CC↑p
.text:0040BEA0
.text:0040BEA0 var_1C          = dword ptr -1Ch
.text:0040BEA0 var_18          = dword ptr -18h
.text:0040BEA0 var_14          = dword ptr -14h
.text:0040BEA0 arg_0           = dword ptr  4
.text:0040BEA0 arg_4           = dword ptr  8
.text:0040BEA0 arg_8           = dword ptr  0Ch
.text:0040BEA0
.text:0040BEA0                 push    ebp
.text:0040BEA1                 push    edi
.text:0040BEA2                 xor     edi, edi
.text:0040BEA4                 push    esi
.text:0040BEA5                 push    ebx
.text:0040BEA6                 sub     esp, 0Ch
.text:0040BEA9                 mov     ebx, [esp+1Ch+arg_8]
.text:0040BEAD                 mov     ebp, [esp+1Ch+arg_0]
.text:0040BEB1                 mov     esi, [esp+1Ch+arg_4]
.text:0040BEB5                 test    ebx, ebx
.text:0040BEB7                 jnz     short loc_40BEC3
.text:0040BEB9
.text:0040BEB9 loc_40BEB9:                             ; CODE XREF: sub_40BEA0+36↓j
.text:0040BEB9                                         ; sub_40BEA0+44↓j ...
.text:0040BEB9                 add     esp, 0Ch
.text:0040BEBC                 mov     eax, edi
.text:0040BEBE                 pop     ebx
.text:0040BEBF                 pop     esi
.text:0040BEC0                 pop     edi
.text:0040BEC1                 pop     ebp
.text:0040BEC2                 retn
.text:0040BEC3 ; ---------------------------------------------------------------------------
.text:0040BEC3
.text:0040BEC3 loc_40BEC3:                             ; CODE XREF: sub_40BEA0+17↑j
.text:0040BEC3                                         ; sub_40BEA0+42↓j
.text:0040BEC3                 mov     [esp+1Ch+var_14], ebx
.text:0040BEC7                 mov     [esp+1Ch+var_18], esi
.text:0040BECB                 mov     [esp+1Ch+var_1C], ebp
.text:0040BECE                 call    sub_40DBE0
.text:0040BED3                 cmp     eax, 0FFFFFFFFh
.text:0040BED6                 jz      short loc_40BEB9
.text:0040BED8                 test    eax, eax
.text:0040BEDA                 jz      short loc_40BEE6
.text:0040BEDC                 add     edi, eax
.text:0040BEDE                 add     esi, eax
.text:0040BEE0                 sub     ebx, eax
.text:0040BEE2                 jnz     short loc_40BEC3
.text:0040BEE4                 jmp     short loc_40BEB9
.text:0040BEE6 ; ---------------------------------------------------------------------------
.text:0040BEE6
.text:0040BEE6 loc_40BEE6:                             ; CODE XREF: sub_40BEA0+3A↑j
.text:0040BEE6                 call    _errno
.text:0040BEEB                 mov     dword ptr [eax], 1Ch
.text:0040BEF1                 jmp     short loc_40BEB9
.text:0040BEF1 sub_40BEA0      endp
.text:0040BEF1
.text:0040BEF1 ; ---------------------------------------------------------------------------
.text:0040BEF3                 align 10h
.text:0040BF00
.text:0040BF00 ; =============== S U B R O U T I N E =======================================
.text:0040BF00
.text:0040BF00
.text:0040BF00 ; int __cdecl sub_40BF00(LPCSTR)
.text:0040BF00 sub_40BF00      proc near               ; CODE XREF: sub_405630+3A↑p
.text:0040BF00
.text:0040BF00 Str             = dword ptr -2Ch
.text:0040BF00 Src             = dword ptr -28h
.text:0040BF00 Size            = dword ptr -24h
.text:0040BF00 var_1C          = dword ptr -1Ch
.text:0040BF00 Block           = dword ptr -18h
.text:0040BF00 var_14          = dword ptr -14h
.text:0040BF00 arg_0           = dword ptr  4
.text:0040BF00
.text:0040BF00                 push    ebp
.text:0040BF01                 push    edi
.text:0040BF02                 mov     edi, 200h
.text:0040BF07                 push    esi
.text:0040BF08                 push    ebx
.text:0040BF09                 sub     esp, 1Ch
.text:0040BF0C                 mov     edx, [esp+2Ch+arg_0]
.text:0040BF10                 mov     [esp+2Ch+var_1C], 0
.text:0040BF18                 mov     [esp+2Ch+Str], edx ; LPCSTR
.text:0040BF1B                 call    sub_419B90
.text:0040BF20                 mov     [esp+2Ch+var_14], eax
.text:0040BF24                 mov     edx, [esp+2Ch+var_14]
.text:0040BF28                 xor     eax, eax
.text:0040BF2A                 test    edx, edx
.text:0040BF2C                 jz      loc_40C025
.text:0040BF32                 mov     [esp+2Ch+Str], 200h ; size_t
.text:0040BF39                 call    sub_40A320
.text:0040BF3E                 mov     [esp+2Ch+Block], eax
.text:0040BF42                 call    _errno
.text:0040BF47                 mov     dword ptr [eax], 0
.text:0040BF4D                 lea     esi, [esi+0]
.text:0040BF50
.text:0040BF50 loc_40BF50:                             ; CODE XREF: sub_40BF00+72↓j
.text:0040BF50                                         ; sub_40BF00+E3↓j
.text:0040BF50                 mov     ebx, [esp+2Ch+var_14]
.text:0040BF54                 mov     [esp+2Ch+Str], ebx
.text:0040BF57                 call    sub_418180
.text:0040BF5C                 test    eax, eax
.text:0040BF5E                 jz      loc_40BFFE
.text:0040BF64                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:0040BF68                 lea     esi, [eax+0Ch]
.text:0040BF6B                 jz      short loc_40BFE8
.text:0040BF6D                 mov     eax, esi
.text:0040BF6F
.text:0040BF6F loc_40BF6F:                             ; CODE XREF: sub_40BF00+F1↓j
.text:0040BF6F                                         ; sub_40BF00+F9↓j
.text:0040BF6F                 cmp     byte ptr [eax], 0
.text:0040BF72                 jz      short loc_40BF50
.text:0040BF74                 mov     [esp+2Ch+Str], esi ; Str
.text:0040BF77                 call    strlen
.text:0040BF7C                 mov     ebx, [esp+2Ch+var_1C]
.text:0040BF80                 lea     ebp, [eax+1]
.text:0040BF83                 add     ebx, ebp
.text:0040BF85                 cmp     ebx, [esp+2Ch+var_1C]
.text:0040BF89                 jb      loc_40C040
.text:0040BF8F                 cmp     edi, ebx
.text:0040BF91                 ja      short loc_40BFC5
.text:0040BF93                 lea     esi, [esi+0]
.text:0040BF99                 lea     edi, [edi+0]
.text:0040BFA0
.text:0040BFA0 loc_40BFA0:                             ; CODE XREF: sub_40BF00+AF↓j
.text:0040BFA0                 lea     eax, [edi+edi]
.text:0040BFA3                 cmp     eax, edi
.text:0040BFA5                 jb      loc_40C040
.text:0040BFAB                 cmp     eax, ebx
.text:0040BFAD                 mov     edi, eax
.text:0040BFAF                 jbe     short loc_40BFA0
.text:0040BFB1                 mov     [esp+2Ch+Src], eax ; size_t
.text:0040BFB5                 mov     ecx, [esp+2Ch+Block]
.text:0040BFB9                 mov     [esp+2Ch+Str], ecx ; void *
.text:0040BFBC                 call    sub_40A3B0
.text:0040BFC1                 mov     [esp+2Ch+Block], eax
.text:0040BFC5
.text:0040BFC5 loc_40BFC5:                             ; CODE XREF: sub_40BF00+91↑j
.text:0040BFC5                 mov     [esp+2Ch+Size], ebp ; Size
.text:0040BFC9                 mov     ecx, [esp+2Ch+Block]
.text:0040BFCD                 mov     eax, [esp+2Ch+var_1C]
.text:0040BFD1                 mov     [esp+2Ch+Src], esi ; Src
.text:0040BFD5                 add     ecx, eax
.text:0040BFD7                 mov     [esp+2Ch+Str], ecx ; void *
.text:0040BFDA                 call    memcpy
.text:0040BFDF                 mov     [esp+2Ch+var_1C], ebx
.text:0040BFE3                 jmp     loc_40BF50
.text:0040BFE8 ; ---------------------------------------------------------------------------
.text:0040BFE8
.text:0040BFE8 loc_40BFE8:                             ; CODE XREF: sub_40BF00+6B↑j
.text:0040BFE8                 cmp     byte ptr [esi+1], 2Eh ; '.'
.text:0040BFEC                 jz      short loc_40BFF6
.text:0040BFEE                 add     eax, 0Dh
.text:0040BFF1                 jmp     loc_40BF6F
.text:0040BFF6 ; ---------------------------------------------------------------------------
.text:0040BFF6
.text:0040BFF6 loc_40BFF6:                             ; CODE XREF: sub_40BF00+EC↑j
.text:0040BFF6                 add     eax, 0Eh
.text:0040BFF9                 jmp     loc_40BF6F
.text:0040BFFE ; ---------------------------------------------------------------------------
.text:0040BFFE
.text:0040BFFE loc_40BFFE:                             ; CODE XREF: sub_40BF00+5E↑j
.text:0040BFFE                 mov     ebp, [esp+2Ch+Block]
.text:0040C002                 mov     edi, [esp+2Ch+var_1C]
.text:0040C006                 mov     byte ptr [edi+ebp], 0
.text:0040C00A                 call    _errno
.text:0040C00F                 mov     ebx, [eax]
.text:0040C011                 mov     esi, [esp+2Ch+var_14]
.text:0040C015                 mov     [esp+2Ch+Str], esi ; void *
.text:0040C018                 call    sub_419B20
.text:0040C01D                 test    ebx, ebx
.text:0040C01F                 mov     eax, [esp+2Ch+Block]
.text:0040C023                 jnz     short loc_40C02D
.text:0040C025
.text:0040C025 loc_40C025:                             ; CODE XREF: sub_40BF00+2C↑j
.text:0040C025                                         ; sub_40BF00+13E↓j
.text:0040C025                 add     esp, 1Ch
.text:0040C028                 pop     ebx
.text:0040C029                 pop     esi
.text:0040C02A                 pop     edi
.text:0040C02B                 pop     ebp
.text:0040C02C                 retn
.text:0040C02D ; ---------------------------------------------------------------------------
.text:0040C02D
.text:0040C02D loc_40C02D:                             ; CODE XREF: sub_40BF00+123↑j
.text:0040C02D                 mov     [esp+2Ch+Str], eax ; Block
.text:0040C030                 call    free
.text:0040C035                 call    _errno
.text:0040C03A                 mov     [eax], ebx
.text:0040C03C                 xor     eax, eax
.text:0040C03E                 jmp     short loc_40C025
.text:0040C040 ; ---------------------------------------------------------------------------
.text:0040C040
.text:0040C040 loc_40C040:                             ; CODE XREF: sub_40BF00+89↑j
.text:0040C040                                         ; sub_40BF00+A5↑j
.text:0040C040                 call    sub_40A2A0
.text:0040C040 sub_40BF00      endp
.text:0040C040
.text:0040C040 ; ---------------------------------------------------------------------------
.text:0040C045                 align 10h
.text:0040C050
.text:0040C050 ; =============== S U B R O U T I N E =======================================
.text:0040C050
.text:0040C050
.text:0040C050 sub_40C050      proc near               ; CODE XREF: sub_406A50+202↑p
.text:0040C050                                         ; sub_415050+45↓p
.text:0040C050
.text:0040C050 var_4           = dword ptr -4
.text:0040C050 arg_0           = dword ptr  4
.text:0040C050
.text:0040C050                 sub     esp, 0Ch
.text:0040C053                 mov     [esp+0Ch+var_4], ebx
.text:0040C057                 mov     ebx, [esp+0Ch+arg_0]
.text:0040C05B                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0040C061                 mov     dword ptr [ebx+4], 0
.text:0040C068                 call    sub_40E370
.text:0040C06D                 mov     [ebx+4], eax
.text:0040C070                 test    eax, eax
.text:0040C072                 mov     ebx, [esp+0Ch+var_4]
.text:0040C076                 setnz   dl
.text:0040C079                 add     esp, 0Ch
.text:0040C07C                 movzx   eax, dl
.text:0040C07F                 dec     eax
.text:0040C080                 retn
.text:0040C080 sub_40C050      endp
.text:0040C080
.text:0040C081 ; ---------------------------------------------------------------------------
.text:0040C081                 jmp     short sub_40C090
.text:0040C081 ; ---------------------------------------------------------------------------
.text:0040C083                 align 10h
.text:0040C090
.text:0040C090 ; =============== S U B R O U T I N E =======================================
.text:0040C090
.text:0040C090
.text:0040C090 sub_40C090      proc near               ; CODE XREF: sub_406A50+3A6↑p
.text:0040C090                                         ; sub_406A50:loc_406ED8↑p ...
.text:0040C090
.text:0040C090 arg_0           = dword ptr  4
.text:0040C090
.text:0040C090                 sub     esp, 0Ch
.text:0040C093                 mov     eax, [esp+0Ch+arg_0]
.text:0040C097                 mov     ecx, [eax]
.text:0040C099                 test    ecx, ecx
.text:0040C09B                 jns     short loc_40C0AC
.text:0040C09D                 mov     edx, [eax+4]
.text:0040C0A0                 mov     [esp+0Ch+arg_0], edx ; LPCSTR
.text:0040C0A4                 add     esp, 0Ch
.text:0040C0A7                 jmp     sub_40DCE0
.text:0040C0AC ; ---------------------------------------------------------------------------
.text:0040C0AC
.text:0040C0AC loc_40C0AC:                             ; CODE XREF: sub_40C090+B↑j
.text:0040C0AC                 call    abort
.text:0040C0AC sub_40C090      endp
.text:0040C0AC
.text:0040C0B1 ; ---------------------------------------------------------------------------
.text:0040C0B1                 jmp     short sub_40C0C0
.text:0040C0B1 ; ---------------------------------------------------------------------------
.text:0040C0B3                 align 10h
.text:0040C0C0
.text:0040C0C0 ; =============== S U B R O U T I N E =======================================
.text:0040C0C0
.text:0040C0C0
.text:0040C0C0 ; int __cdecl sub_40C0C0(void *Block)
.text:0040C0C0 sub_40C0C0      proc near               ; CODE XREF: sub_406A50+3B6↑p
.text:0040C0C0                                         ; sub_406A50:loc_406E48↑p ...
.text:0040C0C0
.text:0040C0C0 FileHandle      = dword ptr -0Ch
.text:0040C0C0 var_4           = dword ptr -4
.text:0040C0C0 Block           = dword ptr  4
.text:0040C0C0
.text:0040C0C0                 sub     esp, 0Ch
.text:0040C0C3                 mov     [esp+0Ch+var_4], ebx
.text:0040C0C7                 mov     ebx, [esp+0Ch+Block]
.text:0040C0CB                 mov     eax, [ebx]
.text:0040C0CD                 test    eax, eax
.text:0040C0CF                 js      short loc_40C0D9
.text:0040C0D1                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:0040C0D4                 call    _close
.text:0040C0D9
.text:0040C0D9 loc_40C0D9:                             ; CODE XREF: sub_40C0C0+F↑j
.text:0040C0D9                 mov     eax, [ebx+4]
.text:0040C0DC                 test    eax, eax
.text:0040C0DE                 jnz     short loc_40C0E8
.text:0040C0E0                 mov     ebx, [esp+0Ch+var_4]
.text:0040C0E4                 add     esp, 0Ch
.text:0040C0E7                 retn
.text:0040C0E8 ; ---------------------------------------------------------------------------
.text:0040C0E8
.text:0040C0E8 loc_40C0E8:                             ; CODE XREF: sub_40C0C0+1E↑j
.text:0040C0E8                 mov     [esp+0Ch+Block], eax ; Block
.text:0040C0EC                 mov     ebx, [esp+0Ch+var_4]
.text:0040C0F0                 add     esp, 0Ch
.text:0040C0F3                 jmp     free
.text:0040C0F3 sub_40C0C0      endp
.text:0040C0F3
.text:0040C0F3 ; ---------------------------------------------------------------------------
.text:0040C0F8                 align 10h
.text:0040C100
.text:0040C100 ; =============== S U B R O U T I N E =======================================
.text:0040C100
.text:0040C100
.text:0040C100 sub_40C100      proc near               ; CODE XREF: sub_406A50+1D3↑p
.text:0040C100
.text:0040C100 var_C           = dword ptr -0Ch
.text:0040C100 var_4           = dword ptr -4
.text:0040C100 arg_0           = dword ptr  4
.text:0040C100
.text:0040C100                 sub     esp, 0Ch
.text:0040C103                 mov     edx, [esp+0Ch+arg_0]
.text:0040C107                 mov     [esp+0Ch+var_4], ebx
.text:0040C10B                 mov     [esp+0Ch+var_C], edx
.text:0040C10E                 call    sub_40AD60
.text:0040C113                 mov     [esp+0Ch+var_C], eax ; char *
.text:0040C116                 mov     ebx, eax
.text:0040C118                 call    sub_40ADC0
.text:0040C11D                 lea     edx, [eax+ebx]
.text:0040C120                 cmp     byte ptr [edx], 0
.text:0040C123                 mov     byte ptr [edx], 0
.text:0040C126                 mov     ebx, [esp+0Ch+var_4]
.text:0040C12A                 setnz   cl
.text:0040C12D                 add     esp, 0Ch
.text:0040C130                 movzx   eax, cl
.text:0040C133                 retn
.text:0040C133 sub_40C100      endp
.text:0040C133
.text:0040C133 ; ---------------------------------------------------------------------------
.text:0040C134                 align 10h
.text:0040C140
.text:0040C140 ; =============== S U B R O U T I N E =======================================
.text:0040C140
.text:0040C140
.text:0040C140 ; int __cdecl sub_40C140(char *, int, int, int)
.text:0040C140 sub_40C140      proc near               ; CODE XREF: sub_40C460+32↓p
.text:0040C140
.text:0040C140 Str             = dword ptr -2Ch
.text:0040C140 Str2            = dword ptr -28h
.text:0040C140 MaxCount        = dword ptr -24h
.text:0040C140 var_20          = dword ptr -20h
.text:0040C140 var_19          = byte ptr -19h
.text:0040C140 var_18          = dword ptr -18h
.text:0040C140 var_14          = dword ptr -14h
.text:0040C140 arg_0           = dword ptr  4
.text:0040C140 arg_4           = dword ptr  8
.text:0040C140 arg_8           = dword ptr  0Ch
.text:0040C140 arg_C           = dword ptr  10h
.text:0040C140
.text:0040C140                 push    ebp
.text:0040C141                 push    edi
.text:0040C142                 push    esi
.text:0040C143                 push    ebx
.text:0040C144                 sub     esp, 1Ch
.text:0040C147                 xor     ebx, ebx
.text:0040C149                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040C151                 mov     edx, [esp+2Ch+arg_0]
.text:0040C155                 mov     ebp, [esp+2Ch+arg_C]
.text:0040C159                 mov     [esp+2Ch+var_19], 0
.text:0040C15E                 mov     [esp+2Ch+Str], edx ; Str
.text:0040C161                 call    strlen
.text:0040C166                 mov     [esp+2Ch+var_14], eax
.text:0040C16A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040C16E                 mov     eax, [ecx]
.text:0040C170                 test    eax, eax
.text:0040C172                 jz      short loc_40C1B8
.text:0040C174                 mov     [esp+2Ch+var_20], 0
.text:0040C17C                 lea     esi, [esi+0]
.text:0040C180
.text:0040C180 loc_40C180:                             ; CODE XREF: sub_40C140+6A↓j
.text:0040C180                 mov     [esp+2Ch+Str], eax ; Str1
.text:0040C183                 mov     esi, [esp+2Ch+var_14]
.text:0040C187                 mov     ecx, [esp+2Ch+arg_0]
.text:0040C18B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040C18F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:0040C193                 call    strncmp
.text:0040C198                 test    eax, eax
.text:0040C19A                 jz      short loc_40C1C6
.text:0040C19C
.text:0040C19C loc_40C19C:                             ; CODE XREF: sub_40C140+CA↓j
.text:0040C19C                                         ; sub_40C140+D1↓j ...
.text:0040C19C                 add     [esp+2Ch+var_20], ebp
.text:0040C1A0                 inc     ebx
.text:0040C1A1                 mov     esi, [esp+2Ch+arg_4]
.text:0040C1A5                 mov     eax, [esi+ebx*4]
.text:0040C1A8                 test    eax, eax
.text:0040C1AA                 jnz     short loc_40C180
.text:0040C1AC                 cmp     [esp+2Ch+var_19], 0
.text:0040C1B1                 mov     edx, 0FFFFFFFEh
.text:0040C1B6                 jnz     short loc_40C1BC
.text:0040C1B8
.text:0040C1B8 loc_40C1B8:                             ; CODE XREF: sub_40C140+32↑j
.text:0040C1B8                 mov     edx, [esp+2Ch+var_18]
.text:0040C1BC
.text:0040C1BC loc_40C1BC:                             ; CODE XREF: sub_40C140+76↑j
.text:0040C1BC                                         ; sub_40C140+9B↓j
.text:0040C1BC                 add     esp, 1Ch
.text:0040C1BF                 mov     eax, edx
.text:0040C1C1                 pop     ebx
.text:0040C1C2                 pop     esi
.text:0040C1C3                 pop     edi
.text:0040C1C4                 pop     ebp
.text:0040C1C5                 retn
.text:0040C1C6 ; ---------------------------------------------------------------------------
.text:0040C1C6
.text:0040C1C6 loc_40C1C6:                             ; CODE XREF: sub_40C140+5A↑j
.text:0040C1C6                 mov     eax, [esp+2Ch+arg_4]
.text:0040C1CA                 mov     edi, [eax+ebx*4]
.text:0040C1CD                 mov     [esp+2Ch+Str], edi ; Str
.text:0040C1D0                 call    strlen
.text:0040C1D5                 cmp     eax, [esp+2Ch+var_14]
.text:0040C1D9                 mov     edx, ebx
.text:0040C1DB                 jz      short loc_40C1BC
.text:0040C1DD                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040C1E2                 jz      short loc_40C213
.text:0040C1E4                 mov     ecx, [esp+2Ch+arg_8]
.text:0040C1E8                 test    ecx, ecx
.text:0040C1EA                 jz      short loc_40C20C
.text:0040C1EC                 cld
.text:0040C1ED                 mov     edi, [esp+2Ch+var_18]
.text:0040C1F1                 mov     ecx, ebp
.text:0040C1F3                 mov     esi, [esp+2Ch+arg_8]
.text:0040C1F7                 mov     edx, [esp+2Ch+var_20]
.text:0040C1FB                 imul    edi, ebp
.text:0040C1FE                 add     esi, edi
.text:0040C200                 mov     edi, [esp+2Ch+arg_8]
.text:0040C204                 add     edi, edx
.text:0040C206                 cmp     ebp, ebp
.text:0040C208                 repe cmpsb
.text:0040C20A                 jz      short loc_40C19C
.text:0040C20C
.text:0040C20C loc_40C20C:                             ; CODE XREF: sub_40C140+AA↑j
.text:0040C20C                 mov     [esp+2Ch+var_19], 1
.text:0040C211                 jmp     short loc_40C19C
.text:0040C213 ; ---------------------------------------------------------------------------
.text:0040C213
.text:0040C213 loc_40C213:                             ; CODE XREF: sub_40C140+A2↑j
.text:0040C213                 mov     [esp+2Ch+var_18], ebx
.text:0040C217                 jmp     short loc_40C19C
.text:0040C217 sub_40C140      endp
.text:0040C217
.text:0040C217 ; ---------------------------------------------------------------------------
.text:0040C219 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:0040C219                                         ; DATA XREF: .text:0040C272↓o
.text:0040C219                                         ; sub_40C460+5A↓o
.text:0040C236 aInvalidArgumen db 'invalid argument %s for %s',0
.text:0040C236                                         ; DATA XREF: .text:loc_40C2E0↓o
.text:0040C236                                         ; sub_40C460:loc_40C656↓o
.text:0040C251 ; ---------------------------------------------------------------------------
.text:0040C251                 jmp     short loc_40C260
.text:0040C251 ; ---------------------------------------------------------------------------
.text:0040C253                 align 10h
.text:0040C260
.text:0040C260 loc_40C260:                             ; CODE XREF: .text:0040C251↑j
.text:0040C260                 sub     esp, 1Ch
.text:0040C263                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:0040C268                 mov     [esp+14h], ebx
.text:0040C26C                 mov     [esp+18h], esi
.text:0040C270                 jz      short loc_40C2E0
.text:0040C272                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040C279
.text:0040C279 loc_40C279:                             ; CODE XREF: .text:0040C2E7↓j
.text:0040C279                 call    ds:libintl_gettext
.text:0040C27F                 mov     dword ptr [esp], 1
.text:0040C286                 mov     edx, [esp+20h]
.text:0040C28A                 mov     esi, eax
.text:0040C28C                 mov     [esp+4], edx
.text:0040C290                 call    sub_40AD00
.text:0040C295                 mov     dword ptr [esp+4], 5
.text:0040C29D                 mov     edx, [esp+24h]
.text:0040C2A1                 mov     ebx, eax
.text:0040C2A3                 mov     dword ptr [esp], 0
.text:0040C2AA                 mov     [esp+8], edx
.text:0040C2AE                 call    sub_40D4B0
.text:0040C2B3                 mov     [esp+0Ch], eax
.text:0040C2B7                 mov     [esp+10h], ebx
.text:0040C2BB                 mov     [esp+8], esi
.text:0040C2BF                 mov     dword ptr [esp+4], 0
.text:0040C2C7                 mov     dword ptr [esp], 0
.text:0040C2CE                 call    sub_415220
.text:0040C2D3                 mov     ebx, [esp+14h]
.text:0040C2D7                 mov     esi, [esp+18h]
.text:0040C2DB                 add     esp, 1Ch
.text:0040C2DE                 retn
.text:0040C2DE ; ---------------------------------------------------------------------------
.text:0040C2DF                 align 10h
.text:0040C2E0
.text:0040C2E0 loc_40C2E0:                             ; CODE XREF: .text:0040C270↑j
.text:0040C2E0                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040C2E7                 jmp     short loc_40C279
.text:0040C2E7 ; ---------------------------------------------------------------------------
.text:0040C2E9 aValidArguments db 'Valid arguments are:',0
.text:0040C2E9                                         ; DATA XREF: .text:0040C333↓o
.text:0040C2E9                                         ; sub_40C460+CB↓o
.text:0040C2FE ; const char aS_0[]
.text:0040C2FE aS_0            db 0Ah                  ; DATA XREF: .text:0040C3AD↓o
.text:0040C2FE                                         ; sub_40C460:loc_40C598↓o
.text:0040C2FE                 db '  - `%s',27h,0
.text:0040C308 ; const char aS_1[]
.text:0040C308 aS_1            db ', `%s',27h,0        ; DATA XREF: .text:0040C43A↓o
.text:0040C308                                         ; sub_40C460:loc_40C630↓o
.text:0040C30F                 align 10h
.text:0040C310                 push    ebp
.text:0040C311                 push    edi
.text:0040C312                 push    esi
.text:0040C313                 push    ebx
.text:0040C314                 sub     esp, 2Ch
.text:0040C317                 mov     ecx, [esp+40h]
.text:0040C31B                 mov     dword ptr [esp+1Ch], 0
.text:0040C323                 mov     eax, [esp+44h]
.text:0040C327                 mov     ebp, [esp+48h]
.text:0040C32B                 mov     [esp+28h], ecx
.text:0040C32F                 mov     [esp+24h], eax
.text:0040C333                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040C33A                 call    ds:libintl_gettext
.text:0040C340                 mov     edx, ds:_iob
.text:0040C346                 add     edx, 40h ; '@'
.text:0040C349                 mov     [esp], edx
.text:0040C34C                 mov     [esp+4], eax
.text:0040C350                 call    fprintf
.text:0040C355                 mov     dword ptr [esp+20h], 0
.text:0040C35D                 mov     edx, [esp+28h]
.text:0040C361                 mov     eax, [edx]
.text:0040C363                 test    eax, eax
.text:0040C365                 jz      short loc_40C3E5
.text:0040C367                 mov     dword ptr [esp+14h], 0
.text:0040C36F                 mov     esi, [esp+24h]
.text:0040C373                 mov     ebx, eax
.text:0040C375                 mov     [esp+18h], esi
.text:0040C379                 lea     esi, [esi+0]
.text:0040C380
.text:0040C380 loc_40C380:                             ; CODE XREF: .text:0040C3E3↓j
.text:0040C380                 mov     edi, [esp+20h]
.text:0040C384                 test    edi, edi
.text:0040C386                 jz      short loc_40C3A3
.text:0040C388                 cld
.text:0040C389                 mov     edi, [esp+24h]
.text:0040C38D                 mov     ecx, ebp
.text:0040C38F                 mov     edx, [esp+14h]
.text:0040C393                 mov     esi, [esp+1Ch]
.text:0040C397                 add     edi, edx
.text:0040C399                 cmp     ebp, ebp
.text:0040C39B                 repe cmpsb
.text:0040C39D                 jz      loc_40C430
.text:0040C3A3
.text:0040C3A3 loc_40C3A3:                             ; CODE XREF: .text:0040C386↑j
.text:0040C3A3                 mov     [esp+8], ebx
.text:0040C3A7                 mov     ecx, ds:_iob
.text:0040C3AD                 mov     dword ptr [esp+4], offset aS_0 ; "\n  - `%s'"
.text:0040C3B5                 add     ecx, 40h ; '@'
.text:0040C3B8                 mov     [esp], ecx
.text:0040C3BB                 call    fprintf
.text:0040C3C0                 mov     ebx, [esp+18h]
.text:0040C3C4                 mov     [esp+1Ch], ebx
.text:0040C3C8
.text:0040C3C8 loc_40C3C8:                             ; CODE XREF: .text:0040C44D↓j
.text:0040C3C8                 inc     dword ptr [esp+20h]
.text:0040C3CC                 mov     eax, [esp+28h]
.text:0040C3D0                 add     [esp+14h], ebp
.text:0040C3D4                 mov     edx, [esp+20h]
.text:0040C3D8                 add     [esp+18h], ebp
.text:0040C3DC                 mov     edi, [eax+edx*4]
.text:0040C3DF                 test    edi, edi
.text:0040C3E1                 mov     ebx, edi
.text:0040C3E3                 jnz     short loc_40C380
.text:0040C3E5
.text:0040C3E5 loc_40C3E5:                             ; CODE XREF: .text:0040C365↑j
.text:0040C3E5                 mov     ebx, ds:_iob
.text:0040C3EB                 mov     ebp, [ebx+44h]
.text:0040C3EE                 dec     ebp
.text:0040C3EF                 mov     [ebx+44h], ebp
.text:0040C3F2                 test    ebp, ebp
.text:0040C3F4                 js      short loc_40C40D
.text:0040C3F6                 mov     ecx, ds:_iob
.text:0040C3FC                 mov     esi, [ecx+40h]
.text:0040C3FF                 mov     byte ptr [esi], 0Ah
.text:0040C402                 inc     dword ptr [ecx+40h]
.text:0040C405                 add     esp, 2Ch
.text:0040C408                 pop     ebx
.text:0040C409                 pop     esi
.text:0040C40A                 pop     edi
.text:0040C40B                 pop     ebp
.text:0040C40C                 retn
.text:0040C40D ; ---------------------------------------------------------------------------
.text:0040C40D
.text:0040C40D loc_40C40D:                             ; CODE XREF: .text:0040C3F4↑j
.text:0040C40D                 mov     dword ptr [esp+40h], 0Ah
.text:0040C415                 mov     edi, ds:_iob
.text:0040C41B                 add     edi, 40h ; '@'
.text:0040C41E                 mov     [esp+44h], edi
.text:0040C422                 add     esp, 2Ch
.text:0040C425                 pop     ebx
.text:0040C426                 pop     esi
.text:0040C427                 pop     edi
.text:0040C428                 pop     ebp
.text:0040C429                 jmp     _flsbuf
.text:0040C429 ; ---------------------------------------------------------------------------
.text:0040C42E                 align 10h
.text:0040C430
.text:0040C430 loc_40C430:                             ; CODE XREF: .text:0040C39D↑j
.text:0040C430                 mov     [esp+8], ebx
.text:0040C434                 mov     esi, ds:_iob
.text:0040C43A                 mov     dword ptr [esp+4], offset aS_1 ; ", `%s'"
.text:0040C442                 add     esi, 40h ; '@'
.text:0040C445                 mov     [esp], esi
.text:0040C448                 call    fprintf
.text:0040C44D                 jmp     loc_40C3C8
.text:0040C44D ; ---------------------------------------------------------------------------
.text:0040C452                 align 10h
.text:0040C460
.text:0040C460 ; =============== S U B R O U T I N E =======================================
.text:0040C460
.text:0040C460
.text:0040C460 ; int __cdecl sub_40C460(char *, char *, int, int, int, int)
.text:0040C460 sub_40C460      proc near               ; CODE XREF: .text:0040955D↑p
.text:0040C460                                         ; sub_409590:loc_4095ED↑p
.text:0040C460
.text:0040C460 Stream          = dword ptr -4Ch
.text:0040C460 Format          = dword ptr -48h
.text:0040C460 var_44          = dword ptr -44h
.text:0040C460 var_40          = byte ptr -40h
.text:0040C460 var_3C          = dword ptr -3Ch
.text:0040C460 var_2C          = dword ptr -2Ch
.text:0040C460 var_28          = dword ptr -28h
.text:0040C460 var_24          = dword ptr -24h
.text:0040C460 var_20          = dword ptr -20h
.text:0040C460 var_1C          = dword ptr -1Ch
.text:0040C460 var_18          = dword ptr -18h
.text:0040C460 var_14          = dword ptr -14h
.text:0040C460 var_10          = dword ptr -10h
.text:0040C460 var_C           = dword ptr -0Ch
.text:0040C460 var_8           = dword ptr -8
.text:0040C460 var_4           = dword ptr -4
.text:0040C460 arg_0           = dword ptr  4
.text:0040C460 arg_4           = dword ptr  8
.text:0040C460 arg_8           = dword ptr  0Ch
.text:0040C460 arg_C           = dword ptr  10h
.text:0040C460 arg_10          = dword ptr  14h
.text:0040C460 arg_14          = dword ptr  18h
.text:0040C460
.text:0040C460                 sub     esp, 4Ch
.text:0040C463                 mov     edx, [esp+4Ch+arg_10]
.text:0040C467                 mov     [esp+4Ch+var_10], ebx
.text:0040C46B                 mov     ebx, [esp+4Ch+arg_C]
.text:0040C46F                 mov     [esp+4Ch+var_C], esi
.text:0040C473                 mov     esi, [esp+4Ch+arg_4]
.text:0040C477                 mov     [esp+4Ch+var_4], ebp
.text:0040C47B                 mov     ebp, [esp+4Ch+arg_8]
.text:0040C47F                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:0040C483                 mov     [esp+4Ch+var_8], edi
.text:0040C487                 mov     [esp+4Ch+var_44], ebx ; int
.text:0040C48B                 mov     [esp+4Ch+Format], ebp ; int
.text:0040C48F                 mov     [esp+4Ch+Stream], esi ; char *
.text:0040C492                 call    sub_40C140
.text:0040C497                 test    eax, eax
.text:0040C499                 mov     edx, eax
.text:0040C49B                 js      short loc_40C4B3
.text:0040C49D
.text:0040C49D loc_40C49D:                             ; CODE XREF: sub_40C460+1AA↓j
.text:0040C49D                 mov     ebx, [esp+4Ch+var_10]
.text:0040C4A1                 mov     eax, edx
.text:0040C4A3                 mov     esi, [esp+4Ch+var_C]
.text:0040C4A7                 mov     edi, [esp+4Ch+var_8]
.text:0040C4AB                 mov     ebp, [esp+4Ch+var_4]
.text:0040C4AF                 add     esp, 4Ch
.text:0040C4B2                 retn
.text:0040C4B3 ; ---------------------------------------------------------------------------
.text:0040C4B3
.text:0040C4B3 loc_40C4B3:                             ; CODE XREF: sub_40C460+3B↑j
.text:0040C4B3                 inc     eax
.text:0040C4B4                 jz      loc_40C656
.text:0040C4BA                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040C4C1
.text:0040C4C1 loc_40C4C1:                             ; CODE XREF: sub_40C460+1FD↓j
.text:0040C4C1                 call    ds:libintl_gettext
.text:0040C4C7                 mov     [esp+4Ch+Stream], 1 ; int
.text:0040C4CE                 mov     edi, [esp+4Ch+arg_0]
.text:0040C4D2                 mov     [esp+4Ch+var_14], eax
.text:0040C4D6                 mov     [esp+4Ch+Format], edi ; char *
.text:0040C4DA                 call    sub_40AD00
.text:0040C4DF                 mov     [esp+4Ch+var_18], eax
.text:0040C4E3                 mov     [esp+4Ch+var_44], esi ; char *
.text:0040C4E7                 mov     [esp+4Ch+Format], 5 ; int
.text:0040C4EF                 mov     [esp+4Ch+Stream], 0 ; int
.text:0040C4F6                 call    sub_40D4B0
.text:0040C4FB                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:0040C4FF                 mov     ecx, [esp+4Ch+var_18]
.text:0040C503                 mov     eax, [esp+4Ch+var_14]
.text:0040C507                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:0040C50F                 mov     [esp+4Ch+var_3C], ecx
.text:0040C513                 mov     [esp+4Ch+var_44], eax ; char *
.text:0040C517                 mov     [esp+4Ch+Stream], 0 ; Code
.text:0040C51E                 call    sub_415220
.text:0040C523                 mov     [esp+4Ch+var_20], 0
.text:0040C52B                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:0040C532                 call    ds:libintl_gettext
.text:0040C538                 mov     edx, ds:_iob
.text:0040C53E                 add     edx, 40h ; '@'
.text:0040C541                 mov     [esp+4Ch+Format], eax ; Format
.text:0040C545                 mov     [esp+4Ch+Stream], edx ; Stream
.text:0040C548                 call    fprintf
.text:0040C54D                 mov     [esp+4Ch+var_1C], 0
.text:0040C555                 mov     eax, [ebp+0]
.text:0040C558                 test    eax, eax
.text:0040C55A                 jz      loc_40C5E1
.text:0040C560                 mov     [esp+4Ch+var_24], eax
.text:0040C564                 mov     [esp+4Ch+var_28], ebx
.text:0040C568                 mov     [esp+4Ch+var_2C], 0
.text:0040C570
.text:0040C570 loc_40C570:                             ; CODE XREF: sub_40C460+17F↓j
.text:0040C570                 mov     esi, [esp+4Ch+var_1C]
.text:0040C574                 test    esi, esi
.text:0040C576                 jz      short loc_40C598
.text:0040C578                 cld
.text:0040C579                 mov     eax, [esp+4Ch+var_2C]
.text:0040C57D                 mov     edx, [esp+4Ch+arg_10]
.text:0040C581                 mov     esi, [esp+4Ch+var_20]
.text:0040C585                 lea     ecx, [eax+ebx]
.text:0040C588                 mov     edi, ecx
.text:0040C58A                 mov     ecx, [esp+4Ch+arg_10]
.text:0040C58E                 cmp     edx, edx
.text:0040C590                 repe cmpsb
.text:0040C592                 jz      loc_40C630
.text:0040C598
.text:0040C598 loc_40C598:                             ; CODE XREF: sub_40C460+116↑j
.text:0040C598                 mov     [esp+4Ch+Format], offset aS_0 ; "\n  - `%s'"
.text:0040C5A0                 mov     esi, ds:_iob
.text:0040C5A6                 mov     ecx, [esp+4Ch+var_24]
.text:0040C5AA                 add     esi, 40h ; '@'
.text:0040C5AD                 mov     [esp+4Ch+var_44], ecx
.text:0040C5B1                 mov     [esp+4Ch+Stream], esi ; Stream
.text:0040C5B4                 call    fprintf
.text:0040C5B9                 mov     edi, [esp+4Ch+var_28]
.text:0040C5BD                 mov     [esp+4Ch+var_20], edi
.text:0040C5C1
.text:0040C5C1 loc_40C5C1:                             ; CODE XREF: sub_40C460+1F1↓j
.text:0040C5C1                 inc     [esp+4Ch+var_1C]
.text:0040C5C5                 mov     ecx, [esp+4Ch+arg_10]
.text:0040C5C9                 add     [esp+4Ch+var_2C], ecx
.text:0040C5CD                 mov     esi, [esp+4Ch+var_1C]
.text:0040C5D1                 add     [esp+4Ch+var_28], ecx
.text:0040C5D5                 mov     edi, [ebp+esi*4+0]
.text:0040C5D9                 test    edi, edi
.text:0040C5DB                 mov     [esp+4Ch+var_24], edi
.text:0040C5DF                 jnz     short loc_40C570
.text:0040C5E1
.text:0040C5E1 loc_40C5E1:                             ; CODE XREF: sub_40C460+FA↑j
.text:0040C5E1                 mov     ebp, ds:_iob
.text:0040C5E7                 mov     ebx, [ebp+44h]
.text:0040C5EA                 dec     ebx
.text:0040C5EB                 mov     [ebp+44h], ebx
.text:0040C5EE                 test    ebx, ebx
.text:0040C5F0                 js      short loc_40C60F
.text:0040C5F2                 mov     edi, ds:_iob
.text:0040C5F8                 mov     eax, [edi+40h]
.text:0040C5FB                 mov     byte ptr [eax], 0Ah
.text:0040C5FE                 inc     dword ptr [edi+40h]
.text:0040C601
.text:0040C601 loc_40C601:                             ; CODE XREF: sub_40C460+1C8↓j
.text:0040C601                 call    [esp+4Ch+arg_14]
.text:0040C605                 mov     edx, 0FFFFFFFFh
.text:0040C60A                 jmp     loc_40C49D
.text:0040C60F ; ---------------------------------------------------------------------------
.text:0040C60F
.text:0040C60F loc_40C60F:                             ; CODE XREF: sub_40C460+190↑j
.text:0040C60F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:0040C616                 mov     edx, ds:_iob
.text:0040C61C                 add     edx, 40h ; '@'
.text:0040C61F                 mov     [esp+4Ch+Format], edx ; File
.text:0040C623                 call    _flsbuf
.text:0040C628                 jmp     short loc_40C601
.text:0040C628 ; ---------------------------------------------------------------------------
.text:0040C62A                 align 10h
.text:0040C630
.text:0040C630 loc_40C630:                             ; CODE XREF: sub_40C460+132↑j
.text:0040C630                 mov     [esp+4Ch+Format], offset aS_1 ; ", `%s'"
.text:0040C638                 mov     edx, ds:_iob
.text:0040C63E                 mov     eax, [esp+4Ch+var_24]
.text:0040C642                 add     edx, 40h ; '@'
.text:0040C645                 mov     [esp+4Ch+var_44], eax
.text:0040C649                 mov     [esp+4Ch+Stream], edx ; Stream
.text:0040C64C                 call    fprintf
.text:0040C651                 jmp     loc_40C5C1
.text:0040C656 ; ---------------------------------------------------------------------------
.text:0040C656
.text:0040C656 loc_40C656:                             ; CODE XREF: sub_40C460+54↑j
.text:0040C656                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040C65D                 jmp     loc_40C4C1
.text:0040C65D sub_40C460      endp
.text:0040C65D
.text:0040C65D ; ---------------------------------------------------------------------------
.text:0040C662                 align 10h
.text:0040C670                 push    ebp
.text:0040C671                 push    edi
.text:0040C672                 push    esi
.text:0040C673                 push    ebx
.text:0040C674                 sub     esp, 4
.text:0040C677                 mov     ecx, [esp+1Ch]
.text:0040C67B                 mov     dword ptr [esp], 0
.text:0040C682                 mov     ebx, [esp+24h]
.text:0040C686                 mov     edx, [ecx]
.text:0040C688                 test    edx, edx
.text:0040C68A                 jz      short loc_40C6B5
.text:0040C68C                 cld
.text:0040C68D                 xor     ebp, ebp
.text:0040C68F                 nop
.text:0040C690
.text:0040C690 loc_40C690:                             ; CODE XREF: .text:0040C6B3↓j
.text:0040C690                 mov     edi, [esp+20h]
.text:0040C694                 mov     ecx, ebx
.text:0040C696                 mov     esi, [esp+18h]
.text:0040C69A                 add     edi, ebp
.text:0040C69C                 cmp     ebx, ebx
.text:0040C69E                 repe cmpsb
.text:0040C6A0                 jz      short loc_40C6BD
.text:0040C6A2                 inc     dword ptr [esp]
.text:0040C6A5                 add     ebp, ebx
.text:0040C6A7                 mov     eax, [esp+1Ch]
.text:0040C6AB                 mov     ecx, [esp]
.text:0040C6AE                 mov     edi, [eax+ecx*4]
.text:0040C6B1                 test    edi, edi
.text:0040C6B3                 jnz     short loc_40C690
.text:0040C6B5
.text:0040C6B5 loc_40C6B5:                             ; CODE XREF: .text:0040C68A↑j
.text:0040C6B5                 xor     eax, eax
.text:0040C6B7
.text:0040C6B7 loc_40C6B7:                             ; CODE XREF: .text:0040C6C7↓j
.text:0040C6B7                 pop     ebp
.text:0040C6B8                 pop     ebx
.text:0040C6B9                 pop     esi
.text:0040C6BA                 pop     edi
.text:0040C6BB                 pop     ebp
.text:0040C6BC                 retn
.text:0040C6BD ; ---------------------------------------------------------------------------
.text:0040C6BD
.text:0040C6BD loc_40C6BD:                             ; CODE XREF: .text:0040C6A0↑j
.text:0040C6BD                 mov     esi, [esp]
.text:0040C6C0                 mov     ebx, [esp+1Ch]
.text:0040C6C4                 mov     eax, [ebx+esi*4]
.text:0040C6C7                 jmp     short loc_40C6B7
.text:0040C6C7 ; ---------------------------------------------------------------------------
.text:0040C6C9                 align 10h
.text:0040C6D0
.text:0040C6D0 ; =============== S U B R O U T I N E =======================================
.text:0040C6D0
.text:0040C6D0 ; Attributes: noreturn
.text:0040C6D0
.text:0040C6D0 sub_40C6D0      proc near               ; DATA XREF: .data:off_420050↓o
.text:0040C6D0
.text:0040C6D0 Code            = dword ptr -0Ch
.text:0040C6D0
.text:0040C6D0                 sub     esp, 0Ch
.text:0040C6D3                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040C6DA                 call    sub_403150
.text:0040C6DA sub_40C6D0      endp
.text:0040C6DA
.text:0040C6DA ; ---------------------------------------------------------------------------
.text:0040C6DF                 db  83h ; ƒ
.text:0040C6E0                 db 0C4h ; Ä
.text:0040C6E1                 db  0Ch
.text:0040C6E2                 db 0C3h ; Ã
.text:0040C6E3                 align 10h
.text:0040C6F0 aLiteral        db 'literal',0          ; DATA XREF: .text:0040C730↓o
.text:0040C6F8 aShell_0        db 'shell',0            ; DATA XREF: .text:0040C734↓o
.text:0040C6FE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:0040C738↓o
.text:0040C70B aC_0            db 'c',0                ; DATA XREF: .text:0040C73C↓o
.text:0040C70D aEscape         db 'escape',0           ; DATA XREF: .text:0040C740↓o
.text:0040C714 aLocale         db 'locale',0           ; DATA XREF: .text:0040C744↓o
.text:0040C71B aClocale        db 'clocale',0          ; DATA XREF: .text:0040C748↓o
.text:0040C723                 align 10h
.text:0040C730                 dd offset aLiteral      ; "literal"
.text:0040C734                 dd offset aShell_0      ; "shell"
.text:0040C738                 dd offset aShellAlways  ; "shell-always"
.text:0040C73C                 dd offset aC_0          ; "c"
.text:0040C740                 dd offset aEscape       ; "escape"
.text:0040C744                 dd offset aLocale       ; "locale"
.text:0040C748                 dd offset aClocale      ; "clocale"
.text:0040C74C                 dd 2 dup(0)
.text:0040C754                 dd 1, 2, 3, 4, 5, 6
.text:0040C76C asc_40C76C:                             ; DATA XREF: sub_40C780+7E↓o
.text:0040C76C                                         ; sub_40C780+A39↓o ...
.text:0040C76C                 text "UTF-16LE", '"',27h,'`'
.text:0040C772                 align 10h
.text:0040C780
.text:0040C780 ; =============== S U B R O U T I N E =======================================
.text:0040C780
.text:0040C780
.text:0040C780 ; int __cdecl sub_40C780(int, int, char *Str, int, int, int)
.text:0040C780 sub_40C780      proc near               ; CODE XREF: sub_40C780+43A↓p
.text:0040C780                                         ; .text:0040D343↓p ...
.text:0040C780
.text:0040C780 C               = dword ptr -4Ch
.text:0040C780 Type            = dword ptr -48h
.text:0040C780 SizeInBytes     = dword ptr -44h
.text:0040C780 State           = dword ptr -40h
.text:0040C780 var_3C          = dword ptr -3Ch
.text:0040C780 var_38          = dword ptr -38h
.text:0040C780 var_34          = dword ptr -34h
.text:0040C780 var_30          = dword ptr -30h
.text:0040C780 var_29          = byte ptr -29h
.text:0040C780 var_28          = dword ptr -28h
.text:0040C780 var_22          = byte ptr -22h
.text:0040C780 var_21          = byte ptr -21h
.text:0040C780 var_20          = dword ptr -20h
.text:0040C780 var_1C          = dword ptr -1Ch
.text:0040C780 var_18          = mbstate_t ptr -18h
.text:0040C780 arg_0           = dword ptr  4
.text:0040C780 arg_4           = dword ptr  8
.text:0040C780 Str             = dword ptr  0Ch
.text:0040C780 arg_C           = dword ptr  10h
.text:0040C780 arg_10          = dword ptr  14h
.text:0040C780 arg_14          = dword ptr  18h
.text:0040C780
.text:0040C780                 push    ebp
.text:0040C781                 push    edi
.text:0040C782                 push    esi
.text:0040C783                 push    ebx
.text:0040C784                 sub     esp, 3Ch
.text:0040C787                 mov     edx, ds:__mb_cur_max
.text:0040C78D                 mov     [esp+4Ch+var_34], 0
.text:0040C795                 mov     [esp+4Ch+var_1C], 0
.text:0040C79D                 cmp     dword ptr [edx], 1
.text:0040C7A0                 mov     [esp+4Ch+var_20], 0
.text:0040C7A8                 mov     [esp+4Ch+var_21], 0
.text:0040C7AD                 setz    [esp+4Ch+var_22]
.text:0040C7B2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:0040C7B7                 ja      short def_40C7BD ; jumptable 0040C7BD default case, cases 0,1
.text:0040C7B9                 mov     edx, [esp+4Ch+arg_10]
.text:0040C7BD                 jmp     ds:jpt_40C7BD[edx*4] ; switch jump
.text:0040C7BD ; ---------------------------------------------------------------------------
.text:0040C7C4 jpt_40C7BD      dd offset def_40C7BD    ; DATA XREF: sub_40C780+3D↑r
.text:0040C7C4                 dd offset def_40C7BD    ; jump table for switch statement
.text:0040C7C4                 dd offset loc_40D105
.text:0040C7C4                 dd offset loc_40C7E0
.text:0040C7C4                 dd offset loc_40D12B
.text:0040C7C4                 dd offset loc_40D135
.text:0040C7C4                 dd offset loc_40D135
.text:0040C7E0 ; ---------------------------------------------------------------------------
.text:0040C7E0
.text:0040C7E0 loc_40C7E0:                             ; CODE XREF: sub_40C780+3D↑j
.text:0040C7E0                                         ; DATA XREF: sub_40C780:jpt_40C7BD↑o
.text:0040C7E0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040C7BD case 3
.text:0040C7E4                 cmp     [esp+4Ch+var_34], eax
.text:0040C7E8                 jnb     short loc_40C7F1
.text:0040C7EA                 mov     ebx, [esp+4Ch+arg_0]
.text:0040C7EE                 mov     byte ptr [ebx], 22h ; '"'
.text:0040C7F1
.text:0040C7F1 loc_40C7F1:                             ; CODE XREF: sub_40C780+68↑j
.text:0040C7F1                 mov     [esp+4Ch+var_34], 1
.text:0040C7F9                 mov     [esp+4Ch+var_21], 1
.text:0040C7FE                 mov     [esp+4Ch+var_1C], offset asc_40C76C ; "\"'`"
.text:0040C806
.text:0040C806 loc_40C806:                             ; CODE XREF: sub_40C780+9A6↓j
.text:0040C806                 mov     [esp+4Ch+var_20], 1
.text:0040C80E
.text:0040C80E def_40C7BD:                             ; CODE XREF: sub_40C780+37↑j
.text:0040C80E                                         ; sub_40C780+3D↑j ...
.text:0040C80E                 xor     ebp, ebp        ; jumptable 0040C7BD default case, cases 0,1
.text:0040C810
.text:0040C810 loc_40C810:                             ; CODE XREF: sub_40C780+3DB↓j
.text:0040C810                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040C815                 jz      loc_40D0F7
.text:0040C81B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040C81F
.text:0040C81F loc_40C81F:                             ; CODE XREF: sub_40C780+980↓j
.text:0040C81F                 jz      loc_40D08E
.text:0040C825                 cmp     [esp+4Ch+var_21], 0
.text:0040C82A                 jz      short loc_40C870
.text:0040C82C                 mov     esi, [esp+4Ch+var_20]
.text:0040C830                 test    esi, esi
.text:0040C832                 jz      short loc_40C870
.text:0040C834                 mov     ecx, [esp+4Ch+var_20]
.text:0040C838                 lea     edi, [ecx+ebp]
.text:0040C83B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040C83F                 ja      short loc_40C870
.text:0040C841                 cld
.text:0040C842                 mov     ebx, [esp+4Ch+Str]
.text:0040C846                 mov     edi, [esp+4Ch+var_1C]
.text:0040C84A                 add     ebx, ebp
.text:0040C84C                 mov     esi, ebx
.text:0040C84E                 cmp     ecx, ecx
.text:0040C850                 repe cmpsb
.text:0040C852                 jnz     short loc_40C870
.text:0040C854                 mov     edx, [esp+4Ch+arg_4]
.text:0040C858                 cmp     [esp+4Ch+var_34], edx
.text:0040C85C                 jnb     short loc_40C86A
.text:0040C85E                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C862                 mov     eax, [esp+4Ch+var_34]
.text:0040C866                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040C86A
.text:0040C86A loc_40C86A:                             ; CODE XREF: sub_40C780+DC↑j
.text:0040C86A                 inc     [esp+4Ch+var_34]
.text:0040C86E                 mov     esi, esi
.text:0040C870
.text:0040C870 loc_40C870:                             ; CODE XREF: sub_40C780+AA↑j
.text:0040C870                                         ; sub_40C780+B2↑j ...
.text:0040C870                 mov     edi, [esp+4Ch+Str]
.text:0040C874                 movzx   ebx, byte ptr [ebp+edi+0]
.text:0040C879                 movzx   eax, bl
.text:0040C87C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040C87F                 ja      def_40C885      ; jumptable 0040C885 default case, cases 1-6,14-31,64
.text:0040C885                 jmp     ds:jpt_40C885[eax*4] ; switch jump
.text:0040C885 ; ---------------------------------------------------------------------------
.text:0040C88C jpt_40C885      dd offset loc_40CA88, offset def_40C885, offset def_40C885
.text:0040C88C                                         ; DATA XREF: sub_40C780+105↑r
.text:0040C88C                 dd offset def_40C885, offset def_40C885, offset def_40C885 ; jump table for switch statement
.text:0040C88C                 dd offset def_40C885, offset loc_40CB60, offset loc_40CB7E
.text:0040C88C                 dd offset loc_40CB82, offset loc_40CBC7, offset loc_40CBCB
.text:0040C88C                 dd offset loc_40CBCF, offset loc_40CBD3, offset def_40C885
.text:0040C88C                 dd offset def_40C885, offset def_40C885, offset def_40C885
.text:0040C88C                 dd offset def_40C885, offset def_40C885, offset def_40C885
.text:0040C88C                 dd offset def_40C885, offset def_40C885, offset def_40C885
.text:0040C88C                 dd offset def_40C885, offset def_40C885, offset def_40C885
.text:0040C88C                 dd offset def_40C885, offset def_40C885, offset def_40C885
.text:0040C88C                 dd offset def_40C885, offset def_40C885, offset loc_40D058
.text:0040C88C                 dd offset loc_40D058, offset loc_40D058, offset loc_40D07A
.text:0040C88C                 dd offset loc_40D058, offset def_40CC82, offset loc_40D058
.text:0040C88C                 dd offset loc_40CBD7, offset loc_40D058, offset loc_40D058
.text:0040C88C                 dd offset loc_40D058, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset loc_40D058
.text:0040C88C                 dd offset loc_40D058, offset loc_40D058, offset loc_40D058
.text:0040C88C                 dd offset loc_40CC3C, offset def_40C885, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset loc_40D058, offset loc_40D051
.text:0040C88C                 dd offset def_40CC82, offset loc_40D058, offset def_40CC82
.text:0040C88C                 dd offset loc_40D058, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset def_40CC82, offset def_40CC82, offset def_40CC82
.text:0040C88C                 dd offset loc_40D068, offset loc_40D058, offset loc_40D068
.text:0040C88C                 dd offset loc_40D07A
.text:0040CA88 ; ---------------------------------------------------------------------------
.text:0040CA88
.text:0040CA88 loc_40CA88:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CA88                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CA88                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040C885 case 0
.text:0040CA8D                 lea     eax, [ebp+1]
.text:0040CA90                 jz      loc_40CB40
.text:0040CA96                 mov     esi, [esp+4Ch+arg_4]
.text:0040CA9A                 cmp     [esp+4Ch+var_34], esi
.text:0040CA9E                 jnb     short loc_40CAAC
.text:0040CAA0                 mov     eax, [esp+4Ch+arg_0]
.text:0040CAA4                 mov     ebx, [esp+4Ch+var_34]
.text:0040CAA8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040CAAC
.text:0040CAAC loc_40CAAC:                             ; CODE XREF: sub_40C780+31E↑j
.text:0040CAAC                 inc     [esp+4Ch+var_34]
.text:0040CAB0                 mov     edx, [esp+4Ch+arg_4]
.text:0040CAB4                 cmp     [esp+4Ch+var_34], edx
.text:0040CAB8                 jnb     short loc_40CAC6
.text:0040CABA                 mov     edi, [esp+4Ch+arg_0]
.text:0040CABE                 mov     ecx, [esp+4Ch+var_34]
.text:0040CAC2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:0040CAC6
.text:0040CAC6 loc_40CAC6:                             ; CODE XREF: sub_40C780+338↑j
.text:0040CAC6                 inc     [esp+4Ch+var_34]
.text:0040CACA                 mov     esi, [esp+4Ch+arg_4]
.text:0040CACE                 cmp     [esp+4Ch+var_34], esi
.text:0040CAD2                 jnb     short loc_40CAE0
.text:0040CAD4                 mov     ebx, [esp+4Ch+arg_0]
.text:0040CAD8                 mov     eax, [esp+4Ch+var_34]
.text:0040CADC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:0040CAE0
.text:0040CAE0 loc_40CAE0:                             ; CODE XREF: sub_40C780+352↑j
.text:0040CAE0                 inc     [esp+4Ch+var_34]
.text:0040CAE4                 mov     bl, 30h ; '0'
.text:0040CAE6                 lea     esi, [esi+0]
.text:0040CAE9                 lea     edi, [edi+0]
.text:0040CAF0
.text:0040CAF0 def_40CC82:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CAF0                                         ; sub_40C780+463↓j ...
.text:0040CAF0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CAF0                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CAF5                 lea     eax, [ebp+1]
.text:0040CAF8                 jz      short loc_40CB40
.text:0040CAFA                 mov     cl, bl
.text:0040CAFC                 mov     edi, [esp+4Ch+arg_14]
.text:0040CB00                 mov     esi, 1
.text:0040CB05                 shr     cl, 5
.text:0040CB08                 movzx   edx, cl
.text:0040CB0B                 mov     ecx, ebx
.text:0040CB0D                 and     ecx, 1Fh
.text:0040CB10                 shl     esi, cl
.text:0040CB12                 test    [edi+edx*4+4], esi
.text:0040CB16                 jz      short loc_40CB32
.text:0040CB18
.text:0040CB18 loc_40CB18:                             ; CODE XREF: sub_40C780+3FC↓j
.text:0040CB18                 mov     edx, [esp+4Ch+arg_4]
.text:0040CB1C                 cmp     [esp+4Ch+var_34], edx
.text:0040CB20                 jnb     short loc_40CB2E
.text:0040CB22                 mov     edi, [esp+4Ch+arg_0]
.text:0040CB26                 mov     esi, [esp+4Ch+var_34]
.text:0040CB2A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040CB2E
.text:0040CB2E loc_40CB2E:                             ; CODE XREF: sub_40C780+3A0↑j
.text:0040CB2E                 inc     [esp+4Ch+var_34]
.text:0040CB32
.text:0040CB32 loc_40CB32:                             ; CODE XREF: sub_40C780+396↑j
.text:0040CB32                 lea     eax, [ebp+1]
.text:0040CB35                 lea     esi, [esi+0]
.text:0040CB39                 lea     edi, [edi+0]
.text:0040CB40
.text:0040CB40 loc_40CB40:                             ; CODE XREF: sub_40C780+310↑j
.text:0040CB40                                         ; sub_40C780+378↑j ...
.text:0040CB40                 mov     ebp, [esp+4Ch+arg_4]
.text:0040CB44                 cmp     [esp+4Ch+var_34], ebp
.text:0040CB48                 jnb     short loc_40CB55
.text:0040CB4A                 mov     edx, [esp+4Ch+arg_0]
.text:0040CB4E                 mov     ecx, [esp+4Ch+var_34]
.text:0040CB52                 mov     [ecx+edx], bl
.text:0040CB55
.text:0040CB55 loc_40CB55:                             ; CODE XREF: sub_40C780+3C8↑j
.text:0040CB55                 inc     [esp+4Ch+var_34]
.text:0040CB59                 mov     ebp, eax
.text:0040CB5B                 jmp     loc_40C810
.text:0040CB60 ; ---------------------------------------------------------------------------
.text:0040CB60
.text:0040CB60 loc_40CB60:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CB60                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CB60                 mov     dl, 61h ; 'a'   ; jumptable 0040C885 case 7
.text:0040CB62                 lea     esi, [esi+0]
.text:0040CB69                 lea     edi, [edi+0]
.text:0040CB70
.text:0040CB70 loc_40CB70:                             ; CODE XREF: sub_40C780+400↓j
.text:0040CB70                                         ; sub_40C780+409↓j ...
.text:0040CB70                 cmp     [esp+4Ch+var_21], 0
.text:0040CB75                 lea     eax, [ebp+1]
.text:0040CB78                 jz      short loc_40CB40
.text:0040CB7A                 mov     bl, dl
.text:0040CB7C                 jmp     short loc_40CB18
.text:0040CB7E ; ---------------------------------------------------------------------------
.text:0040CB7E
.text:0040CB7E loc_40CB7E:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CB7E                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CB7E                 mov     dl, 62h ; 'b'   ; jumptable 0040C885 case 8
.text:0040CB80                 jmp     short loc_40CB70
.text:0040CB82 ; ---------------------------------------------------------------------------
.text:0040CB82
.text:0040CB82 loc_40CB82:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CB82                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CB82                 mov     dl, 74h ; 't'   ; jumptable 0040C885 case 9
.text:0040CB84
.text:0040CB84 loc_40CB84:                             ; CODE XREF: sub_40C780+449↓j
.text:0040CB84                                         ; sub_40C780+455↓j ...
.text:0040CB84                 cmp     [esp+4Ch+arg_10], 1
.text:0040CB89                 jnz     short loc_40CB70
.text:0040CB8B
.text:0040CB8B loc_40CB8B:                             ; CODE XREF: sub_40C780+45C↓j
.text:0040CB8B                                         ; sub_40C780+4C1↓j ...
.text:0040CB8B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 0040CF52 cases 91,92,94,96,124
.text:0040CB93                 mov     eax, [esp+4Ch+arg_14]
.text:0040CB97                 mov     edx, [esp+4Ch+arg_C]
.text:0040CB9B                 mov     ecx, [esp+4Ch+Str]
.text:0040CB9F                 mov     ebx, [esp+4Ch+arg_4]
.text:0040CBA3                 mov     [esp+4Ch+var_38], eax ; int
.text:0040CBA7                 mov     ebp, [esp+4Ch+arg_0]
.text:0040CBAB                 mov     [esp+4Ch+State], edx ; int
.text:0040CBAF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:0040CBB3                 mov     [esp+4Ch+Type], ebx ; int
.text:0040CBB7                 mov     [esp+4Ch+C], ebp ; int
.text:0040CBBA                 call    sub_40C780
.text:0040CBBF
.text:0040CBBF loc_40CBBF:                             ; CODE XREF: sub_40C780+972↓j
.text:0040CBBF                 add     esp, 3Ch
.text:0040CBC2                 pop     ebx
.text:0040CBC3                 pop     esi
.text:0040CBC4                 pop     edi
.text:0040CBC5                 pop     ebp
.text:0040CBC6                 retn
.text:0040CBC7 ; ---------------------------------------------------------------------------
.text:0040CBC7
.text:0040CBC7 loc_40CBC7:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CBC7                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CBC7                 mov     dl, 6Eh ; 'n'   ; jumptable 0040C885 case 10
.text:0040CBC9                 jmp     short loc_40CB84
.text:0040CBCB ; ---------------------------------------------------------------------------
.text:0040CBCB
.text:0040CBCB loc_40CBCB:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CBCB                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CBCB                 mov     dl, 76h ; 'v'   ; jumptable 0040C885 case 11
.text:0040CBCD                 jmp     short loc_40CB70
.text:0040CBCF ; ---------------------------------------------------------------------------
.text:0040CBCF
.text:0040CBCF loc_40CBCF:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CBCF                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CBCF                 mov     dl, 66h ; 'f'   ; jumptable 0040C885 case 12
.text:0040CBD1                 jmp     short loc_40CB70
.text:0040CBD3 ; ---------------------------------------------------------------------------
.text:0040CBD3
.text:0040CBD3 loc_40CBD3:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CBD3                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CBD3                 mov     dl, 72h ; 'r'   ; jumptable 0040C885 case 13
.text:0040CBD5                 jmp     short loc_40CB84
.text:0040CBD7 ; ---------------------------------------------------------------------------
.text:0040CBD7
.text:0040CBD7 loc_40CBD7:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CBD7                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CBD7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040C885 case 39
.text:0040CBDC                 jz      short loc_40CB8B ; jumptable 0040CF52 cases 91,92,94,96,124
.text:0040CBDE                 cmp     [esp+4Ch+arg_10], 2
.text:0040CBE3                 jnz     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CBE3                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CBE9                 mov     edx, [esp+4Ch+arg_4]
.text:0040CBED                 cmp     [esp+4Ch+var_34], edx
.text:0040CBF1                 jnb     short loc_40CBFF
.text:0040CBF3                 mov     ecx, [esp+4Ch+arg_0]
.text:0040CBF7                 mov     edi, [esp+4Ch+var_34]
.text:0040CBFB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040CBFF
.text:0040CBFF loc_40CBFF:                             ; CODE XREF: sub_40C780+471↑j
.text:0040CBFF                 inc     [esp+4Ch+var_34]
.text:0040CC03                 mov     eax, [esp+4Ch+arg_4]
.text:0040CC07                 cmp     [esp+4Ch+var_34], eax
.text:0040CC0B                 jnb     short loc_40CC19
.text:0040CC0D                 mov     esi, [esp+4Ch+arg_0]
.text:0040CC11                 mov     edx, [esp+4Ch+var_34]
.text:0040CC15                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:0040CC19
.text:0040CC19 loc_40CC19:                             ; CODE XREF: sub_40C780+48B↑j
.text:0040CC19                 inc     [esp+4Ch+var_34]
.text:0040CC1D                 mov     edi, [esp+4Ch+arg_4]
.text:0040CC21                 cmp     [esp+4Ch+var_34], edi
.text:0040CC25                 jnb     short loc_40CC33
.text:0040CC27                 mov     ecx, [esp+4Ch+arg_0]
.text:0040CC2B                 mov     eax, [esp+4Ch+var_34]
.text:0040CC2F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:0040CC33
.text:0040CC33 loc_40CC33:                             ; CODE XREF: sub_40C780+4A5↑j
.text:0040CC33                                         ; sub_40C780+5C4↓j ...
.text:0040CC33                 inc     [esp+4Ch+var_34]
.text:0040CC37                 jmp     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CC37                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CC3C ; ---------------------------------------------------------------------------
.text:0040CC3C
.text:0040CC3C loc_40CC3C:                             ; CODE XREF: sub_40C780+105↑j
.text:0040CC3C                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040CC3C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040C885 case 63
.text:0040CC41                 jz      loc_40CB8B      ; jumptable 0040CF52 cases 91,92,94,96,124
.text:0040CC47                 cmp     [esp+4Ch+arg_10], 3
.text:0040CC4C                 jnz     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CC4C                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CC52                 lea     edx, [ebp+2]
.text:0040CC55                 cmp     edx, [esp+4Ch+arg_C]
.text:0040CC59                 jnb     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CC59                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CC5F                 mov     esi, [esp+4Ch+Str]
.text:0040CC63                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:0040CC68                 jnz     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CC68                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CC6E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:0040CC73                 movsx   eax, cl
.text:0040CC76                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:0040CC79                 cmp     eax, 1Dh
.text:0040CC7C                 ja      def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CC7C                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CC82                 jmp     ds:jpt_40CC82[eax*4] ; switch jump
.text:0040CC82 ; ---------------------------------------------------------------------------
.text:0040CC89                 align 4
.text:0040CC8C jpt_40CC82      dd offset loc_40CD04    ; DATA XREF: sub_40C780+502↑r
.text:0040CC8C                 dd offset def_40CC82    ; jump table for switch statement
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset def_40CC82
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CC8C                 dd offset loc_40CD04
.text:0040CD04 ; ---------------------------------------------------------------------------
.text:0040CD04
.text:0040CD04 loc_40CD04:                             ; CODE XREF: sub_40C780+502↑j
.text:0040CD04                                         ; DATA XREF: sub_40C780:jpt_40CC82↑o
.text:0040CD04                 mov     ebp, edx        ; jumptable 0040CC82 cases 33,39-41,45,47,60-62
.text:0040CD06                 mov     bl, cl
.text:0040CD08                 mov     edx, [esp+4Ch+arg_4]
.text:0040CD0C                 cmp     [esp+4Ch+var_34], edx
.text:0040CD10                 jnb     short loc_40CD1E
.text:0040CD12                 mov     ecx, [esp+4Ch+arg_0]
.text:0040CD16                 mov     edi, [esp+4Ch+var_34]
.text:0040CD1A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040CD1E
.text:0040CD1E loc_40CD1E:                             ; CODE XREF: sub_40C780+590↑j
.text:0040CD1E                 inc     [esp+4Ch+var_34]
.text:0040CD22                 mov     eax, [esp+4Ch+arg_4]
.text:0040CD26                 cmp     [esp+4Ch+var_34], eax
.text:0040CD2A                 jnb     short loc_40CD38
.text:0040CD2C                 mov     edx, [esp+4Ch+arg_0]
.text:0040CD30                 mov     esi, [esp+4Ch+var_34]
.text:0040CD34                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:0040CD38
.text:0040CD38 loc_40CD38:                             ; CODE XREF: sub_40C780+5AA↑j
.text:0040CD38                 inc     [esp+4Ch+var_34]
.text:0040CD3C                 mov     edi, [esp+4Ch+arg_4]
.text:0040CD40                 cmp     [esp+4Ch+var_34], edi
.text:0040CD44                 jnb     loc_40CC33
.text:0040CD4A                 mov     eax, [esp+4Ch+arg_0]
.text:0040CD4E                 mov     ecx, [esp+4Ch+var_34]
.text:0040CD52                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:0040CD56                 jmp     loc_40CC33
.text:0040CD56 ; ---------------------------------------------------------------------------
.text:0040CD5B                 align 10h
.text:0040CD60
.text:0040CD60 def_40C885:                             ; CODE XREF: sub_40C780+FF↑j
.text:0040CD60                                         ; sub_40C780+105↑j
.text:0040CD60                                         ; DATA XREF: ...
.text:0040CD60                 cmp     [esp+4Ch+var_22], 0 ; jumptable 0040C885 default case, cases 1-6,14-31,64
.text:0040CD65                 jz      loc_40CE90
.text:0040CD6B                 mov     [esp+4Ch+var_28], 1
.text:0040CD73                 mov     esi, ds:__mb_cur_max
.text:0040CD79                 movzx   edx, bl
.text:0040CD7C                 cmp     dword ptr [esi], 1
.text:0040CD7F                 jz      loc_40CE74
.text:0040CD85                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040CD8D                 mov     [esp+4Ch+C], edx ; C
.text:0040CD90                 call    _isctype
.text:0040CD95
.text:0040CD95 loc_40CD95:                             ; CODE XREF: sub_40C780+705↓j
.text:0040CD95                 test    eax, eax
.text:0040CD97                 setnz   [esp+4Ch+var_29]
.text:0040CD9C
.text:0040CD9C loc_40CD9C:                             ; CODE XREF: sub_40C780+7A5↓j
.text:0040CD9C                 cmp     [esp+4Ch+var_21], 0
.text:0040CDA1                 lea     eax, [ebp+1]
.text:0040CDA4                 jz      loc_40CB40
.text:0040CDAA                 cmp     [esp+4Ch+var_29], 0
.text:0040CDAF                 jnz     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040CDAF                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040CDB5
.text:0040CDB5 loc_40CDB5:                             ; CODE XREF: sub_40C780+7AB↓j
.text:0040CDB5                 mov     eax, [esp+4Ch+var_28]
.text:0040CDB9                 lea     edx, [eax+ebp]
.text:0040CDBC                 lea     esi, [esi+0]
.text:0040CDC0
.text:0040CDC0 loc_40CDC0:                             ; CODE XREF: sub_40C780+6EF↓j
.text:0040CDC0                 cmp     [esp+4Ch+var_21], 0
.text:0040CDC5                 jz      short loc_40CE40
.text:0040CDC7                 cmp     [esp+4Ch+var_29], 0
.text:0040CDCC                 jnz     short loc_40CE40
.text:0040CDCE                 mov     edi, [esp+4Ch+arg_4]
.text:0040CDD2                 cmp     [esp+4Ch+var_34], edi
.text:0040CDD6                 jnb     short loc_40CDE4
.text:0040CDD8                 mov     esi, [esp+4Ch+arg_0]
.text:0040CDDC                 mov     eax, [esp+4Ch+var_34]
.text:0040CDE0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:0040CDE4
.text:0040CDE4 loc_40CDE4:                             ; CODE XREF: sub_40C780+656↑j
.text:0040CDE4                 inc     [esp+4Ch+var_34]
.text:0040CDE8                 mov     ecx, [esp+4Ch+arg_4]
.text:0040CDEC                 cmp     [esp+4Ch+var_34], ecx
.text:0040CDF0                 jnb     short loc_40CE05
.text:0040CDF2                 mov     cl, bl
.text:0040CDF4                 mov     esi, [esp+4Ch+arg_0]
.text:0040CDF8                 mov     edi, [esp+4Ch+var_34]
.text:0040CDFC                 shr     cl, 6
.text:0040CDFF                 add     cl, 30h ; '0'
.text:0040CE02                 mov     [edi+esi], cl
.text:0040CE05
.text:0040CE05 loc_40CE05:                             ; CODE XREF: sub_40C780+670↑j
.text:0040CE05                 inc     [esp+4Ch+var_34]
.text:0040CE09                 mov     edi, [esp+4Ch+arg_4]
.text:0040CE0D                 cmp     [esp+4Ch+var_34], edi
.text:0040CE11                 jnb     short loc_40CE29
.text:0040CE13                 mov     cl, bl
.text:0040CE15                 mov     esi, [esp+4Ch+arg_0]
.text:0040CE19                 shr     cl, 3
.text:0040CE1C                 mov     edi, [esp+4Ch+var_34]
.text:0040CE20                 and     cl, 7
.text:0040CE23                 add     cl, 30h ; '0'
.text:0040CE26                 mov     [edi+esi], cl
.text:0040CE29
.text:0040CE29 loc_40CE29:                             ; CODE XREF: sub_40C780+691↑j
.text:0040CE29                 inc     [esp+4Ch+var_34]
.text:0040CE2D                 and     bl, 7
.text:0040CE30                 add     bl, 30h ; '0'
.text:0040CE33                 lea     esi, [esi+0]
.text:0040CE39                 lea     edi, [edi+0]
.text:0040CE40
.text:0040CE40 loc_40CE40:                             ; CODE XREF: sub_40C780+645↑j
.text:0040CE40                                         ; sub_40C780+64C↑j
.text:0040CE40                 lea     eax, [ebp+1]
.text:0040CE43                 cmp     edx, eax
.text:0040CE45                 jbe     loc_40CB40
.text:0040CE4B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040CE4F                 cmp     [esp+4Ch+var_34], ebp
.text:0040CE53                 jnb     short loc_40CE60
.text:0040CE55                 mov     ecx, [esp+4Ch+arg_0]
.text:0040CE59                 mov     edi, [esp+4Ch+var_34]
.text:0040CE5D                 mov     [edi+ecx], bl
.text:0040CE60
.text:0040CE60 loc_40CE60:                             ; CODE XREF: sub_40C780+6D3↑j
.text:0040CE60                 inc     [esp+4Ch+var_34]
.text:0040CE64                 mov     ebp, eax
.text:0040CE66                 mov     eax, [esp+4Ch+Str]
.text:0040CE6A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040CE6F                 jmp     loc_40CDC0
.text:0040CE74 ; ---------------------------------------------------------------------------
.text:0040CE74
.text:0040CE74 loc_40CE74:                             ; CODE XREF: sub_40C780+5FF↑j
.text:0040CE74                 mov     ecx, ds:_pctype
.text:0040CE7A                 mov     edi, [ecx]
.text:0040CE7C                 movzx   eax, word ptr [edi+edx*2]
.text:0040CE80                 and     eax, 157h
.text:0040CE85                 jmp     loc_40CD95
.text:0040CE85 ; ---------------------------------------------------------------------------
.text:0040CE8A                 align 10h
.text:0040CE90
.text:0040CE90 loc_40CE90:                             ; CODE XREF: sub_40C780+5E5↑j
.text:0040CE90                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040CE95                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040CE9D                 mov     [esp+4Ch+var_28], 0
.text:0040CEA5                 mov     [esp+4Ch+var_29], 1
.text:0040CEAA                 jz      loc_40D03C
.text:0040CEB0
.text:0040CEB0 loc_40CEB0:                             ; CODE XREF: sub_40C780+8CC↓j
.text:0040CEB0                 mov     ecx, [esp+4Ch+arg_C]
.text:0040CEB4                 lea     edx, [esp+4Ch+var_18]
.text:0040CEB8                 mov     edi, [esp+4Ch+Str]
.text:0040CEBC                 mov     [esp+4Ch+State], edx ; State
.text:0040CEC0                 lea     esi, [esp+4Ch+var_18._State]
.text:0040CEC4                 sub     ecx, ebp
.text:0040CEC6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040CECA                 add     edi, ebp
.text:0040CECC                 mov     [esp+4Ch+var_30], edi
.text:0040CED0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:0040CED4                 mov     [esp+4Ch+C], esi ; DstCh
.text:0040CED7                 call    mbrtowc
.text:0040CEDC                 test    eax, eax
.text:0040CEDE                 mov     edi, eax
.text:0040CEE0                 jz      short loc_40CF20
.text:0040CEE2                 cmp     eax, 0FFFFFFFFh
.text:0040CEE5                 jz      loc_40D032
.text:0040CEEB                 cmp     eax, 0FFFFFFFEh
.text:0040CEEE                 jz      loc_40CFF2
.text:0040CEF4                 cmp     [esp+4Ch+arg_10], 1
.text:0040CEF9                 jz      short loc_40CF30
.text:0040CEFB
.text:0040CEFB loc_40CEFB:                             ; CODE XREF: sub_40C780+7B9↓j
.text:0040CEFB                                         ; sub_40C780+86D↓j
.text:0040CEFB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:0040CF00                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040CF08                 mov     [esp+4Ch+C], ecx ; C
.text:0040CF0B                 call    iswctype
.text:0040CF10                 test    eax, eax
.text:0040CF12                 jnz     short loc_40CF19
.text:0040CF14                 mov     [esp+4Ch+var_29], 0
.text:0040CF19
.text:0040CF19 loc_40CF19:                             ; CODE XREF: sub_40C780+792↑j
.text:0040CF19                 mov     [esp+4Ch+var_28], edi
.text:0040CF1D                 lea     esi, [esi+0]
.text:0040CF20
.text:0040CF20 loc_40CF20:                             ; CODE XREF: sub_40C780+760↑j
.text:0040CF20                                         ; sub_40C780+87B↓j ...
.text:0040CF20                 cmp     [esp+4Ch+var_28], 1
.text:0040CF25                 jbe     loc_40CD9C
.text:0040CF2B                 jmp     loc_40CDB5
.text:0040CF30 ; ---------------------------------------------------------------------------
.text:0040CF30
.text:0040CF30 loc_40CF30:                             ; CODE XREF: sub_40C780+779↑j
.text:0040CF30                 cmp     [esp+4Ch+arg_10], eax
.text:0040CF34                 mov     edx, 1
.text:0040CF39                 jnb     short loc_40CEFB
.text:0040CF3B
.text:0040CF3B loc_40CF3B:                             ; CODE XREF: sub_40C780+867↓j
.text:0040CF3B                 mov     ecx, [esp+4Ch+Str]
.text:0040CF3F                 lea     esi, [edx+ebp]
.text:0040CF42                 movsx   eax, byte ptr [esi+ecx]
.text:0040CF46                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:0040CF49                 cmp     eax, 21h
.text:0040CF4C                 ja      def_40CF52      ; jumptable 0040CF52 default case, cases 93,95,97-123
.text:0040CF52                 jmp     ds:jpt_40CF52[eax*4] ; switch jump
.text:0040CF52 ; ---------------------------------------------------------------------------
.text:0040CF59                 align 4
.text:0040CF5C jpt_40CF52      dd offset loc_40CB8B    ; DATA XREF: sub_40C780+7D2↑r
.text:0040CF5C                 dd offset loc_40CB8B    ; jump table for switch statement
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset loc_40CB8B
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset loc_40CB8B
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset def_40CF52
.text:0040CF5C                 dd offset loc_40CB8B
.text:0040CFE4 ; ---------------------------------------------------------------------------
.text:0040CFE4
.text:0040CFE4 def_40CF52:                             ; CODE XREF: sub_40C780+7CC↑j
.text:0040CFE4                                         ; sub_40C780+7D2↑j
.text:0040CFE4                                         ; DATA XREF: ...
.text:0040CFE4                 inc     edx             ; jumptable 0040CF52 default case, cases 93,95,97-123
.text:0040CFE5                 cmp     edx, edi
.text:0040CFE7                 jb      loc_40CF3B
.text:0040CFED                 jmp     loc_40CEFB
.text:0040CFF2 ; ---------------------------------------------------------------------------
.text:0040CFF2
.text:0040CFF2 loc_40CFF2:                             ; CODE XREF: sub_40C780+76E↑j
.text:0040CFF2                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040CFF6                 mov     [esp+4Ch+var_29], 0
.text:0040CFFB                 jnb     loc_40CF20
.text:0040D001                 mov     eax, [esp+4Ch+var_30]
.text:0040D005                 cmp     byte ptr [eax], 0
.text:0040D008                 jz      loc_40CF20
.text:0040D00E
.text:0040D00E loc_40D00E:                             ; CODE XREF: sub_40C780+8AB↓j
.text:0040D00E                 inc     [esp+4Ch+var_28]
.text:0040D012                 mov     esi, [esp+4Ch+var_28]
.text:0040D016                 lea     eax, [esi+ebp]
.text:0040D019                 cmp     eax, [esp+4Ch+arg_C]
.text:0040D01D                 jnb     loc_40CF20
.text:0040D023                 mov     edi, [esp+4Ch+Str]
.text:0040D027                 cmp     byte ptr [eax+edi], 0
.text:0040D02B                 jnz     short loc_40D00E
.text:0040D02D                 jmp     loc_40CF20
.text:0040D032 ; ---------------------------------------------------------------------------
.text:0040D032
.text:0040D032 loc_40D032:                             ; CODE XREF: sub_40C780+765↑j
.text:0040D032                 mov     [esp+4Ch+var_29], 0
.text:0040D037                 jmp     loc_40CF20
.text:0040D03C ; ---------------------------------------------------------------------------
.text:0040D03C
.text:0040D03C loc_40D03C:                             ; CODE XREF: sub_40C780+72A↑j
.text:0040D03C                 mov     edx, [esp+4Ch+Str]
.text:0040D040                 mov     [esp+4Ch+C], edx ; Str
.text:0040D043                 call    strlen
.text:0040D048                 mov     [esp+4Ch+arg_C], eax
.text:0040D04C                 jmp     loc_40CEB0
.text:0040D051 ; ---------------------------------------------------------------------------
.text:0040D051
.text:0040D051 loc_40D051:                             ; CODE XREF: sub_40C780+105↑j
.text:0040D051                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040D051                 mov     dl, bl          ; jumptable 0040C885 case 92
.text:0040D053                 jmp     loc_40CB84
.text:0040D058 ; ---------------------------------------------------------------------------
.text:0040D058
.text:0040D058 loc_40D058:                             ; CODE XREF: sub_40C780+105↑j
.text:0040D058                                         ; sub_40C780+902↓j
.text:0040D058                                         ; DATA XREF: ...
.text:0040D058                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040C885 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040D05D                 jnz     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040D05D                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040D063                 jmp     loc_40CB8B      ; jumptable 0040CF52 cases 91,92,94,96,124
.text:0040D068 ; ---------------------------------------------------------------------------
.text:0040D068
.text:0040D068 loc_40D068:                             ; CODE XREF: sub_40C780+105↑j
.text:0040D068                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040D068                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 0040C885 cases 123,125
.text:0040D06D                 jz      short loc_40D084
.text:0040D06F                 cmp     [esp+4Ch+arg_C], 1
.text:0040D074
.text:0040D074 loc_40D074:                             ; CODE XREF: sub_40C780+90C↓j
.text:0040D074                 jnz     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040D074                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040D07A
.text:0040D07A loc_40D07A:                             ; CODE XREF: sub_40C780+105↑j
.text:0040D07A                                         ; DATA XREF: sub_40C780:jpt_40C885↑o
.text:0040D07A                 test    ebp, ebp        ; jumptable 0040C885 cases 35,126
.text:0040D07C                 jnz     def_40CC82      ; jumptable 0040C885 cases 37,43-58,65-90,93,95,97-122
.text:0040D07C                                         ; jumptable 0040CC82 default case, cases 34-38,42-44,46,48-59
.text:0040D082                 jmp     short loc_40D058 ; jumptable 0040C885 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040D084 ; ---------------------------------------------------------------------------
.text:0040D084
.text:0040D084 loc_40D084:                             ; CODE XREF: sub_40C780+8ED↑j
.text:0040D084                 mov     esi, [esp+4Ch+Str]
.text:0040D088                 cmp     byte ptr [esi+1], 0
.text:0040D08C                 jmp     short loc_40D074
.text:0040D08E ; ---------------------------------------------------------------------------
.text:0040D08E
.text:0040D08E loc_40D08E:                             ; CODE XREF: sub_40C780:loc_40C81F↑j
.text:0040D08E                 test    ebp, ebp
.text:0040D090                 jnz     short loc_40D09D
.text:0040D092                 cmp     [esp+4Ch+arg_10], 1
.text:0040D097                 jz      loc_40CB8B      ; jumptable 0040CF52 cases 91,92,94,96,124
.text:0040D09D
.text:0040D09D loc_40D09D:                             ; CODE XREF: sub_40C780+910↑j
.text:0040D09D                 mov     esi, [esp+4Ch+var_1C]
.text:0040D0A1                 test    esi, esi
.text:0040D0A3                 jz      short loc_40D0D8
.text:0040D0A5                 mov     edi, [esp+4Ch+var_1C]
.text:0040D0A9                 movzx   eax, byte ptr [edi]
.text:0040D0AC                 test    al, al
.text:0040D0AE                 jz      short loc_40D0D8
.text:0040D0B0
.text:0040D0B0 loc_40D0B0:                             ; CODE XREF: sub_40C780+956↓j
.text:0040D0B0                 mov     ebp, [esp+4Ch+arg_4]
.text:0040D0B4                 cmp     [esp+4Ch+var_34], ebp
.text:0040D0B8                 jnb     short loc_40D0C5
.text:0040D0BA                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D0BE                 mov     ebx, [esp+4Ch+var_34]
.text:0040D0C2                 mov     [ebx+ecx], al
.text:0040D0C5
.text:0040D0C5 loc_40D0C5:                             ; CODE XREF: sub_40C780+938↑j
.text:0040D0C5                 inc     [esp+4Ch+var_1C]
.text:0040D0C9                 inc     [esp+4Ch+var_34]
.text:0040D0CD                 mov     edx, [esp+4Ch+var_1C]
.text:0040D0D1                 movzx   eax, byte ptr [edx]
.text:0040D0D4                 test    al, al
.text:0040D0D6                 jnz     short loc_40D0B0
.text:0040D0D8
.text:0040D0D8 loc_40D0D8:                             ; CODE XREF: sub_40C780+923↑j
.text:0040D0D8                                         ; sub_40C780+92E↑j
.text:0040D0D8                 mov     eax, [esp+4Ch+arg_4]
.text:0040D0DC                 cmp     [esp+4Ch+var_34], eax
.text:0040D0E0                 jnb     short loc_40D0EE
.text:0040D0E2                 mov     edi, [esp+4Ch+arg_0]
.text:0040D0E6                 mov     esi, [esp+4Ch+var_34]
.text:0040D0EA                 mov     byte ptr [esi+edi], 0
.text:0040D0EE
.text:0040D0EE loc_40D0EE:                             ; CODE XREF: sub_40C780+960↑j
.text:0040D0EE                 mov     eax, [esp+4Ch+var_34]
.text:0040D0F2                 jmp     loc_40CBBF
.text:0040D0F7 ; ---------------------------------------------------------------------------
.text:0040D0F7
.text:0040D0F7 loc_40D0F7:                             ; CODE XREF: sub_40C780+95↑j
.text:0040D0F7                 mov     ebx, [esp+4Ch+Str]
.text:0040D0FB                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040D100                 jmp     loc_40C81F
.text:0040D105 ; ---------------------------------------------------------------------------
.text:0040D105
.text:0040D105 loc_40D105:                             ; CODE XREF: sub_40C780+3D↑j
.text:0040D105                                         ; DATA XREF: sub_40C780:jpt_40C7BD↑o
.text:0040D105                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040C7BD case 2
.text:0040D109                 cmp     [esp+4Ch+var_34], edx
.text:0040D10D                 jnb     short loc_40D116
.text:0040D10F                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D113                 mov     byte ptr [ecx], 27h ; '''
.text:0040D116
.text:0040D116 loc_40D116:                             ; CODE XREF: sub_40C780+98D↑j
.text:0040D116                 mov     [esp+4Ch+var_34], 1
.text:0040D11E                 mov     [esp+4Ch+var_1C], 40C76Eh
.text:0040D126                 jmp     loc_40C806
.text:0040D12B ; ---------------------------------------------------------------------------
.text:0040D12B
.text:0040D12B loc_40D12B:                             ; CODE XREF: sub_40C780+3D↑j
.text:0040D12B                                         ; DATA XREF: sub_40C780:jpt_40C7BD↑o
.text:0040D12B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040C7BD case 4
.text:0040D130                 jmp     def_40C7BD      ; jumptable 0040C7BD default case, cases 0,1
.text:0040D135 ; ---------------------------------------------------------------------------
.text:0040D135
.text:0040D135 loc_40D135:                             ; CODE XREF: sub_40C780+3D↑j
.text:0040D135                                         ; DATA XREF: sub_40C780:jpt_40C7BD↑o
.text:0040D135                 mov     [esp+4Ch+C], 40C770h ; jumptable 0040C7BD cases 5,6
.text:0040D13C                 call    ds:libintl_gettext
.text:0040D142                 cmp     eax, 40C770h
.text:0040D147                 mov     edi, eax
.text:0040D149                 jz      short loc_40D1C0
.text:0040D14B
.text:0040D14B loc_40D14B:                             ; CODE XREF: sub_40C780+A45↓j
.text:0040D14B                                         ; sub_40C780+A4C↓j
.text:0040D14B                 mov     [esp+4Ch+C], 40C76Eh
.text:0040D152                 call    ds:libintl_gettext
.text:0040D158                 cmp     eax, 40C76Eh
.text:0040D15D                 mov     edx, eax
.text:0040D15F                 jz      short loc_40D1B2
.text:0040D161
.text:0040D161 loc_40D161:                             ; CODE XREF: sub_40C780+A37↓j
.text:0040D161                                         ; sub_40C780+A3E↓j
.text:0040D161                 mov     [esp+4Ch+var_1C], edi
.text:0040D165                 cmp     byte ptr [edi], 0
.text:0040D168                 jz      short loc_40D198
.text:0040D16A
.text:0040D16A loc_40D16A:                             ; CODE XREF: sub_40C780+A16↓j
.text:0040D16A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040D16E                 cmp     [esp+4Ch+var_34], ecx
.text:0040D172                 jnb     short loc_40D187
.text:0040D174                 mov     ebp, [esp+4Ch+var_1C]
.text:0040D178                 mov     edi, [esp+4Ch+arg_0]
.text:0040D17C                 mov     esi, [esp+4Ch+var_34]
.text:0040D180                 movzx   ebx, byte ptr [ebp+0]
.text:0040D184                 mov     [esi+edi], bl
.text:0040D187
.text:0040D187 loc_40D187:                             ; CODE XREF: sub_40C780+9F2↑j
.text:0040D187                 inc     [esp+4Ch+var_1C]
.text:0040D18B                 inc     [esp+4Ch+var_34]
.text:0040D18F                 mov     eax, [esp+4Ch+var_1C]
.text:0040D193                 cmp     byte ptr [eax], 0
.text:0040D196                 jnz     short loc_40D16A
.text:0040D198
.text:0040D198 loc_40D198:                             ; CODE XREF: sub_40C780+9E8↑j
.text:0040D198                 mov     [esp+4Ch+var_21], 1
.text:0040D19D                 mov     [esp+4Ch+var_1C], edx
.text:0040D1A1                 mov     [esp+4Ch+C], edx ; Str
.text:0040D1A4                 call    strlen
.text:0040D1A9                 mov     [esp+4Ch+var_20], eax
.text:0040D1AD                 jmp     def_40C7BD      ; jumptable 0040C7BD default case, cases 0,1
.text:0040D1B2 ; ---------------------------------------------------------------------------
.text:0040D1B2
.text:0040D1B2 loc_40D1B2:                             ; CODE XREF: sub_40C780+9DF↑j
.text:0040D1B2                 cmp     [esp+4Ch+arg_10], 6
.text:0040D1B7                 jnz     short loc_40D161
.text:0040D1B9                 mov     edx, offset asc_40C76C ; "\"'`"
.text:0040D1BE                 jmp     short loc_40D161
.text:0040D1C0 ; ---------------------------------------------------------------------------
.text:0040D1C0
.text:0040D1C0 loc_40D1C0:                             ; CODE XREF: sub_40C780+9C9↑j
.text:0040D1C0                 cmp     [esp+4Ch+arg_10], 6
.text:0040D1C5                 jnz     short loc_40D14B
.text:0040D1C7                 mov     edi, offset asc_40C76C ; "\"'`"
.text:0040D1CC                 jmp     loc_40D14B
.text:0040D1CC sub_40C780      endp
.text:0040D1CC
.text:0040D1D1 ; ---------------------------------------------------------------------------
.text:0040D1D1                 jmp     short loc_40D1E0
.text:0040D1D1 ; ---------------------------------------------------------------------------
.text:0040D1D3                 align 10h
.text:0040D1E0
.text:0040D1E0 loc_40D1E0:                             ; CODE XREF: .text:0040D1D1↑j
.text:0040D1E0                 sub     esp, 0Ch
.text:0040D1E3                 mov     [esp+4], ebx
.text:0040D1E7                 mov     [esp+8], esi
.text:0040D1EB                 call    _errno
.text:0040D1F0                 mov     esi, [eax]
.text:0040D1F2                 mov     dword ptr [esp], 24h ; '$'
.text:0040D1F9                 call    sub_40A320
.text:0040D1FE                 mov     edx, [esp+10h]
.text:0040D202                 mov     ebx, eax
.text:0040D204                 test    edx, edx
.text:0040D206                 jz      short loc_40D251
.text:0040D208
.text:0040D208 loc_40D208:                             ; CODE XREF: .text:0040D256↓j
.text:0040D208                 mov     ecx, [edx]
.text:0040D20A                 mov     [ebx], ecx
.text:0040D20C                 mov     ecx, [edx+4]
.text:0040D20F                 mov     [ebx+4], ecx
.text:0040D212                 mov     ecx, [edx+8]
.text:0040D215                 mov     [ebx+8], ecx
.text:0040D218                 mov     ecx, [edx+0Ch]
.text:0040D21B                 mov     [ebx+0Ch], ecx
.text:0040D21E                 mov     ecx, [edx+10h]
.text:0040D221                 mov     [ebx+10h], ecx
.text:0040D224                 mov     ecx, [edx+14h]
.text:0040D227                 mov     [ebx+14h], ecx
.text:0040D22A                 mov     ecx, [edx+18h]
.text:0040D22D                 mov     [ebx+18h], ecx
.text:0040D230                 mov     ecx, [edx+1Ch]
.text:0040D233                 mov     [ebx+1Ch], ecx
.text:0040D236                 mov     ecx, [edx+20h]
.text:0040D239                 mov     [ebx+20h], ecx
.text:0040D23C                 call    _errno
.text:0040D241                 mov     [eax], esi
.text:0040D243                 mov     esi, [esp+8]
.text:0040D247                 mov     eax, ebx
.text:0040D249                 mov     ebx, [esp+4]
.text:0040D24D                 add     esp, 0Ch
.text:0040D250                 retn
.text:0040D251 ; ---------------------------------------------------------------------------
.text:0040D251
.text:0040D251 loc_40D251:                             ; CODE XREF: .text:0040D206↑j
.text:0040D251                 mov     edx, offset dword_4211F0
.text:0040D256                 jmp     short loc_40D208
.text:0040D256 ; ---------------------------------------------------------------------------
.text:0040D258                 align 10h
.text:0040D260                 mov     eax, [esp+4]
.text:0040D264                 test    eax, eax
.text:0040D266                 jz      short loc_40D270
.text:0040D268
.text:0040D268 loc_40D268:                             ; CODE XREF: .text:0040D275↓j
.text:0040D268                 mov     eax, [eax]
.text:0040D26A                 retn
.text:0040D26A ; ---------------------------------------------------------------------------
.text:0040D26B                 align 10h
.text:0040D270
.text:0040D270 loc_40D270:                             ; CODE XREF: .text:0040D266↑j
.text:0040D270                 mov     eax, offset dword_4211F0
.text:0040D275                 jmp     short loc_40D268
.text:0040D275 ; ---------------------------------------------------------------------------
.text:0040D277                 align 10h
.text:0040D280                 mov     edx, [esp+4]
.text:0040D284                 test    edx, edx
.text:0040D286                 jz      short loc_40D290
.text:0040D288
.text:0040D288 loc_40D288:                             ; CODE XREF: .text:0040D295↓j
.text:0040D288                 mov     ecx, [esp+8]
.text:0040D28C                 mov     [edx], ecx
.text:0040D28E                 retn
.text:0040D28E ; ---------------------------------------------------------------------------
.text:0040D28F                 align 10h
.text:0040D290
.text:0040D290 loc_40D290:                             ; CODE XREF: .text:0040D286↑j
.text:0040D290                 mov     edx, offset dword_4211F0
.text:0040D295                 jmp     short loc_40D288
.text:0040D295 ; ---------------------------------------------------------------------------
.text:0040D297                 align 10h
.text:0040D2A0                 sub     esp, 8
.text:0040D2A3                 mov     eax, [esp+0Ch]
.text:0040D2A7                 movzx   ecx, byte ptr [esp+10h]
.text:0040D2AC                 mov     [esp], ebx
.text:0040D2AF                 mov     ebx, [esp+14h]
.text:0040D2B3                 mov     [esp+4], esi
.text:0040D2B7                 mov     dl, cl
.text:0040D2B9                 shr     dl, 5
.text:0040D2BC                 movzx   edx, dl
.text:0040D2BF                 shl     edx, 2
.text:0040D2C2                 test    eax, eax
.text:0040D2C4                 lea     esi, [edx+eax+4]
.text:0040D2C8                 jz      short loc_40D2F0
.text:0040D2CA
.text:0040D2CA loc_40D2CA:                             ; CODE XREF: .text:0040D2F6↓j
.text:0040D2CA                 mov     edx, [esi]
.text:0040D2CC                 and     ecx, 1Fh
.text:0040D2CF                 and     ebx, 1
.text:0040D2D2                 mov     eax, edx
.text:0040D2D4                 shr     eax, cl
.text:0040D2D6                 and     eax, 1
.text:0040D2D9                 xor     ebx, eax
.text:0040D2DB                 shl     ebx, cl
.text:0040D2DD                 xor     edx, ebx
.text:0040D2DF                 mov     [esi], edx
.text:0040D2E1                 mov     ebx, [esp]
.text:0040D2E4                 mov     esi, [esp+4]
.text:0040D2E8                 add     esp, 8
.text:0040D2EB                 retn
.text:0040D2EB ; ---------------------------------------------------------------------------
.text:0040D2EC                 align 10h
.text:0040D2F0
.text:0040D2F0 loc_40D2F0:                             ; CODE XREF: .text:0040D2C8↑j
.text:0040D2F0                 lea     esi, dword_4211F4[edx]
.text:0040D2F6                 jmp     short loc_40D2CA
.text:0040D2F6 ; ---------------------------------------------------------------------------
.text:0040D2F8                 align 10h
.text:0040D300                 sub     esp, 2Ch
.text:0040D303                 mov     [esp+24h], ebx
.text:0040D307                 mov     ebx, [esp+40h]
.text:0040D30B                 mov     [esp+28h], esi
.text:0040D30F                 test    ebx, ebx
.text:0040D311                 jz      short loc_40D360
.text:0040D313
.text:0040D313 loc_40D313:                             ; CODE XREF: .text:0040D365↓j
.text:0040D313                 call    _errno
.text:0040D318                 mov     esi, [eax]
.text:0040D31A                 mov     [esp+14h], ebx
.text:0040D31E                 mov     edx, [ebx]
.text:0040D320                 mov     ecx, [esp+38h]
.text:0040D324                 mov     ebx, [esp+3Ch]
.text:0040D328                 mov     [esp+10h], edx
.text:0040D32C                 mov     edx, [esp+34h]
.text:0040D330                 mov     [esp+0Ch], ebx
.text:0040D334                 mov     [esp+8], ecx
.text:0040D338                 mov     [esp+4], edx
.text:0040D33C                 mov     edx, [esp+30h]
.text:0040D340                 mov     [esp], edx
.text:0040D343                 call    sub_40C780
.text:0040D348                 mov     ebx, eax
.text:0040D34A                 call    _errno
.text:0040D34F                 mov     [eax], esi
.text:0040D351                 mov     esi, [esp+28h]
.text:0040D355                 mov     eax, ebx
.text:0040D357                 mov     ebx, [esp+24h]
.text:0040D35B                 add     esp, 2Ch
.text:0040D35E                 retn
.text:0040D35E ; ---------------------------------------------------------------------------
.text:0040D35F                 align 10h
.text:0040D360
.text:0040D360 loc_40D360:                             ; CODE XREF: .text:0040D311↑j
.text:0040D360                 mov     ebx, offset dword_4211F0
.text:0040D365                 jmp     short loc_40D313
.text:0040D365 ; ---------------------------------------------------------------------------
.text:0040D367                 align 10h
.text:0040D370                 push    ebp
.text:0040D371                 push    edi
.text:0040D372                 push    esi
.text:0040D373                 push    ebx
.text:0040D374                 sub     esp, 2Ch
.text:0040D377                 mov     ebp, [esp+48h]
.text:0040D37B                 call    _errno
.text:0040D380                 mov     edx, [eax]
.text:0040D382                 test    ebp, ebp
.text:0040D384                 mov     ebx, ebp
.text:0040D386                 mov     [esp+28h], edx
.text:0040D38A                 jz      loc_40D440
.text:0040D390
.text:0040D390 loc_40D390:                             ; CODE XREF: .text:0040D445↓j
.text:0040D390                 call    _errno
.text:0040D395                 mov     edi, [eax]
.text:0040D397                 mov     esi, ebp
.text:0040D399                 mov     [esp+14h], ebx
.text:0040D39D                 mov     ecx, [ebx]
.text:0040D39F                 mov     dword ptr [esp], 0
.text:0040D3A6                 mov     edx, [esp+44h]
.text:0040D3AA                 mov     dword ptr [esp+4], 0
.text:0040D3B2                 mov     eax, [esp+40h]
.text:0040D3B6                 mov     [esp+10h], ecx
.text:0040D3BA                 mov     [esp+0Ch], edx
.text:0040D3BE                 mov     [esp+8], eax
.text:0040D3C2                 call    sub_40C780
.text:0040D3C7                 mov     ebx, eax
.text:0040D3C9                 call    _errno
.text:0040D3CE                 mov     [eax], edi
.text:0040D3D0                 lea     edi, [ebx+1]
.text:0040D3D3                 mov     [esp], edi
.text:0040D3D6                 call    sub_40A320
.text:0040D3DB                 mov     [esp+24h], eax
.text:0040D3DF                 test    ebp, ebp
.text:0040D3E1                 jz      short loc_40D432
.text:0040D3E3
.text:0040D3E3 loc_40D3E3:                             ; CODE XREF: .text:0040D437↓j
.text:0040D3E3                 call    _errno
.text:0040D3E8                 mov     ebp, [eax]
.text:0040D3EA                 mov     [esp+14h], esi
.text:0040D3EE                 mov     ecx, [esi]
.text:0040D3F0                 mov     [esp+4], edi
.text:0040D3F4                 mov     edx, [esp+44h]
.text:0040D3F8                 mov     esi, [esp+24h]
.text:0040D3FC                 mov     [esp+10h], ecx
.text:0040D400                 mov     eax, [esp+40h]
.text:0040D404                 mov     [esp+0Ch], edx
.text:0040D408                 mov     [esp], esi
.text:0040D40B                 mov     [esp+8], eax
.text:0040D40F                 call    sub_40C780
.text:0040D414                 call    _errno
.text:0040D419                 mov     [eax], ebp
.text:0040D41B                 call    _errno
.text:0040D420                 mov     ebx, [esp+28h]
.text:0040D424                 mov     [eax], ebx
.text:0040D426                 mov     eax, [esp+24h]
.text:0040D42A                 add     esp, 2Ch
.text:0040D42D                 pop     ebx
.text:0040D42E                 pop     esi
.text:0040D42F                 pop     edi
.text:0040D430                 pop     ebp
.text:0040D431                 retn
.text:0040D432 ; ---------------------------------------------------------------------------
.text:0040D432
.text:0040D432 loc_40D432:                             ; CODE XREF: .text:0040D3E1↑j
.text:0040D432                 mov     esi, offset dword_4211F0
.text:0040D437                 jmp     short loc_40D3E3
.text:0040D437 ; ---------------------------------------------------------------------------
.text:0040D439                 align 10h
.text:0040D440
.text:0040D440 loc_40D440:                             ; CODE XREF: .text:0040D38A↑j
.text:0040D440                 mov     ebx, offset dword_4211F0
.text:0040D445                 jmp     loc_40D390
.text:0040D445 ; ---------------------------------------------------------------------------
.text:0040D44A                 align 10h
.text:0040D450                 sub     esp, 1Ch
.text:0040D453                 mov     edx, [esp+24h]
.text:0040D457                 mov     dword ptr [esp+0Ch], offset dword_4211F0
.text:0040D45F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040D467                 mov     [esp+4], edx
.text:0040D46B                 mov     edx, [esp+20h]
.text:0040D46F                 mov     [esp], edx
.text:0040D472                 call    sub_40D8C0
.text:0040D477                 add     esp, 1Ch
.text:0040D47A                 retn
.text:0040D47A ; ---------------------------------------------------------------------------
.text:0040D47B                 align 10h
.text:0040D480                 sub     esp, 1Ch
.text:0040D483                 mov     edx, [esp+20h]
.text:0040D487                 mov     dword ptr [esp+0Ch], offset dword_4211F0
.text:0040D48F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040D497                 mov     [esp+4], edx
.text:0040D49B                 mov     dword ptr [esp], 0
.text:0040D4A2                 call    sub_40D8C0
.text:0040D4A7                 add     esp, 1Ch
.text:0040D4AA                 retn
.text:0040D4AA ; ---------------------------------------------------------------------------
.text:0040D4AB                 align 10h
.text:0040D4B0
.text:0040D4B0 ; =============== S U B R O U T I N E =======================================
.text:0040D4B0
.text:0040D4B0
.text:0040D4B0 ; int __cdecl sub_40D4B0(int, int, char *)
.text:0040D4B0 sub_40D4B0      proc near               ; CODE XREF: sub_40AD00+1A↑p
.text:0040D4B0                                         ; sub_40AD30+1A↑p ...
.text:0040D4B0
.text:0040D4B0 var_BC          = dword ptr -0BCh
.text:0040D4B0 var_B8          = dword ptr -0B8h
.text:0040D4B0 var_B4          = dword ptr -0B4h
.text:0040D4B0 var_B0          = dword ptr -0B0h
.text:0040D4B0 var_AC          = dword ptr -0ACh
.text:0040D4B0 var_A8          = dword ptr -0A8h
.text:0040D4B0 var_A4          = dword ptr -0A4h
.text:0040D4B0 var_A0          = dword ptr -0A0h
.text:0040D4B0 var_9C          = dword ptr -9Ch
.text:0040D4B0 var_98          = dword ptr -98h
.text:0040D4B0 var_94          = dword ptr -94h
.text:0040D4B0 var_90          = dword ptr -90h
.text:0040D4B0 var_8C          = dword ptr -8Ch
.text:0040D4B0 var_7C          = dword ptr -7Ch
.text:0040D4B0 var_78          = dword ptr -78h
.text:0040D4B0 var_74          = dword ptr -74h
.text:0040D4B0 var_70          = dword ptr -70h
.text:0040D4B0 var_6C          = dword ptr -6Ch
.text:0040D4B0 var_68          = dword ptr -68h
.text:0040D4B0 var_64          = dword ptr -64h
.text:0040D4B0 var_60          = dword ptr -60h
.text:0040D4B0 var_5C          = dword ptr -5Ch
.text:0040D4B0 var_4C          = dword ptr -4Ch
.text:0040D4B0 var_48          = dword ptr -48h
.text:0040D4B0 var_44          = dword ptr -44h
.text:0040D4B0 var_40          = dword ptr -40h
.text:0040D4B0 var_3C          = dword ptr -3Ch
.text:0040D4B0 var_38          = dword ptr -38h
.text:0040D4B0 var_34          = dword ptr -34h
.text:0040D4B0 var_30          = dword ptr -30h
.text:0040D4B0 var_2C          = dword ptr -2Ch
.text:0040D4B0 arg_0           = dword ptr  4
.text:0040D4B0 arg_4           = dword ptr  8
.text:0040D4B0 arg_8           = dword ptr  0Ch
.text:0040D4B0
.text:0040D4B0                 push    ebp
.text:0040D4B1                 xor     eax, eax
.text:0040D4B3                 mov     ecx, 8
.text:0040D4B8                 push    edi
.text:0040D4B9                 push    esi
.text:0040D4BA                 push    ebx
.text:0040D4BB                 sub     esp, 0ACh
.text:0040D4C1                 mov     ebp, [esp+0BCh+arg_4]
.text:0040D4C8                 cld
.text:0040D4C9                 lea     edi, [esp+0BCh+var_A8]
.text:0040D4CD                 mov     [esp+0BCh+var_AC], ebp
.text:0040D4D1                 rep stosd
.text:0040D4D3                 mov     eax, [esp+0BCh+var_8C]
.text:0040D4D7                 mov     edi, [esp+0BCh+var_AC]
.text:0040D4DB                 mov     esi, [esp+0BCh+var_A8]
.text:0040D4DF                 mov     [esp+0BCh+var_5C], eax
.text:0040D4E3                 mov     ebp, [esp+0BCh+var_A4]
.text:0040D4E7                 mov     eax, [esp+0BCh+var_AC]
.text:0040D4EB                 mov     [esp+0BCh+var_7C], edi
.text:0040D4EF                 mov     ecx, [esp+0BCh+var_94]
.text:0040D4F3                 mov     edi, [esp+0BCh+var_A0]
.text:0040D4F7                 mov     [esp+0BCh+var_78], esi
.text:0040D4FB                 mov     edx, [esp+0BCh+var_90]
.text:0040D4FF                 mov     esi, [esp+0BCh+var_9C]
.text:0040D503                 mov     [esp+0BCh+var_4C], eax
.text:0040D507                 mov     ebx, [esp+0BCh+var_98]
.text:0040D50B                 mov     eax, [esp+0BCh+var_A8]
.text:0040D50F                 mov     [esp+0BCh+var_74], ebp
.text:0040D513                 mov     [esp+0BCh+var_70], edi
.text:0040D517                 mov     [esp+0BCh+var_6C], esi
.text:0040D51B                 mov     [esp+0BCh+var_68], ebx
.text:0040D51F                 mov     [esp+0BCh+var_64], ecx
.text:0040D523                 mov     [esp+0BCh+var_60], edx
.text:0040D527                 mov     [esp+0BCh+var_48], eax
.text:0040D52B                 mov     [esp+0BCh+var_44], ebp
.text:0040D52F                 mov     [esp+0BCh+var_40], edi
.text:0040D533                 mov     [esp+0BCh+var_3C], esi
.text:0040D53A                 mov     [esp+0BCh+var_38], ebx
.text:0040D541                 mov     ebx, [esp+0BCh+var_8C]
.text:0040D545                 mov     [esp+0BCh+var_30], edx
.text:0040D54C                 mov     edx, [esp+0BCh+arg_8]
.text:0040D553                 mov     [esp+0BCh+var_34], ecx
.text:0040D55A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040D55E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040D562                 mov     edx, [esp+0BCh+arg_0]
.text:0040D569                 mov     [esp+0BCh+var_2C], ebx
.text:0040D570                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040D574                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040D57C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040D57F                 call    sub_40D8C0
.text:0040D584                 add     esp, 0ACh
.text:0040D58A                 pop     ebx
.text:0040D58B                 pop     esi
.text:0040D58C                 pop     edi
.text:0040D58D                 pop     ebp
.text:0040D58E                 retn
.text:0040D58E sub_40D4B0      endp
.text:0040D58E
.text:0040D58E ; ---------------------------------------------------------------------------
.text:0040D58F                 align 10h
.text:0040D590                 push    ebp
.text:0040D591                 xor     eax, eax
.text:0040D593                 mov     ecx, 8
.text:0040D598                 push    edi
.text:0040D599                 push    esi
.text:0040D59A                 push    ebx
.text:0040D59B                 sub     esp, 0ACh
.text:0040D5A1                 mov     edx, [esp+0C4h]
.text:0040D5A8                 cld
.text:0040D5A9                 lea     edi, [esp+14h]
.text:0040D5AD                 mov     [esp+10h], edx
.text:0040D5B1                 rep stosd
.text:0040D5B3                 mov     eax, [esp+30h]
.text:0040D5B7                 mov     ebp, [esp+10h]
.text:0040D5BB                 mov     edi, [esp+14h]
.text:0040D5BF                 mov     [esp+60h], eax
.text:0040D5C3                 mov     esi, [esp+20h]
.text:0040D5C7                 mov     eax, [esp+10h]
.text:0040D5CB                 mov     [esp+40h], ebp
.text:0040D5CF                 mov     ecx, [esp+28h]
.text:0040D5D3                 mov     ebp, [esp+18h]
.text:0040D5D7                 mov     [esp+44h], edi
.text:0040D5DB                 mov     edx, [esp+2Ch]
.text:0040D5DF                 mov     edi, [esp+1Ch]
.text:0040D5E3                 mov     [esp+70h], eax
.text:0040D5E7                 mov     ebx, [esp+24h]
.text:0040D5EB                 mov     eax, [esp+14h]
.text:0040D5EF                 mov     [esp+48h], ebp
.text:0040D5F3                 mov     [esp+4Ch], edi
.text:0040D5F7                 mov     [esp+50h], esi
.text:0040D5FB                 mov     [esp+54h], ebx
.text:0040D5FF                 mov     [esp+58h], ecx
.text:0040D603                 mov     [esp+5Ch], edx
.text:0040D607                 mov     [esp+74h], eax
.text:0040D60B                 mov     [esp+78h], ebp
.text:0040D60F                 mov     [esp+7Ch], edi
.text:0040D613                 mov     [esp+80h], esi
.text:0040D61A                 mov     [esp+84h], ebx
.text:0040D621                 mov     esi, [esp+30h]
.text:0040D625                 lea     ebx, [esp+70h]
.text:0040D629                 mov     [esp+8Ch], edx
.text:0040D630                 mov     edx, [esp+0C8h]
.text:0040D637                 mov     [esp+88h], ecx
.text:0040D63E                 mov     ecx, [esp+0CCh]
.text:0040D645                 mov     [esp+4], edx
.text:0040D649                 mov     edx, [esp+0C0h]
.text:0040D650                 mov     [esp+90h], esi
.text:0040D657                 mov     [esp+0Ch], ebx
.text:0040D65B                 mov     [esp+8], ecx
.text:0040D65F                 mov     [esp], edx
.text:0040D662                 call    sub_40D8C0
.text:0040D667                 add     esp, 0ACh
.text:0040D66D                 pop     ebx
.text:0040D66E                 pop     esi
.text:0040D66F                 pop     edi
.text:0040D670                 pop     ebp
.text:0040D671                 retn
.text:0040D671 ; ---------------------------------------------------------------------------
.text:0040D672                 align 10h
.text:0040D680                 push    ebp
.text:0040D681                 xor     eax, eax
.text:0040D683                 mov     ecx, 8
.text:0040D688                 push    edi
.text:0040D689                 push    esi
.text:0040D68A                 push    ebx
.text:0040D68B                 sub     esp, 0ACh
.text:0040D691                 mov     edi, [esp+0C0h]
.text:0040D698                 cld
.text:0040D699                 mov     [esp+10h], edi
.text:0040D69D                 lea     edi, [esp+14h]
.text:0040D6A1                 rep stosd
.text:0040D6A3                 mov     eax, [esp+30h]
.text:0040D6A7                 mov     esi, [esp+10h]
.text:0040D6AB                 mov     ebx, [esp+14h]
.text:0040D6AF                 mov     [esp+60h], eax
.text:0040D6B3                 mov     ebp, [esp+18h]
.text:0040D6B7                 mov     eax, [esp+10h]
.text:0040D6BB                 mov     [esp+40h], esi
.text:0040D6BF                 mov     edi, [esp+1Ch]
.text:0040D6C3                 mov     esi, [esp+20h]
.text:0040D6C7                 mov     [esp+44h], ebx
.text:0040D6CB                 mov     ecx, [esp+28h]
.text:0040D6CF                 mov     edx, [esp+2Ch]
.text:0040D6D3                 mov     [esp+70h], eax
.text:0040D6D7                 mov     ebx, [esp+24h]
.text:0040D6DB                 mov     eax, [esp+14h]
.text:0040D6DF                 mov     [esp+48h], ebp
.text:0040D6E3                 mov     [esp+4Ch], edi
.text:0040D6E7                 mov     [esp+50h], esi
.text:0040D6EB                 mov     [esp+54h], ebx
.text:0040D6EF                 mov     [esp+58h], ecx
.text:0040D6F3                 mov     [esp+5Ch], edx
.text:0040D6F7                 mov     [esp+74h], eax
.text:0040D6FB                 mov     [esp+78h], ebp
.text:0040D6FF                 mov     [esp+7Ch], edi
.text:0040D703                 mov     [esp+80h], esi
.text:0040D70A                 mov     [esp+84h], ebx
.text:0040D711                 mov     [esp+8Ch], edx
.text:0040D718                 lea     edx, [esp+70h]
.text:0040D71C                 mov     [esp+88h], ecx
.text:0040D723                 mov     ecx, [esp+30h]
.text:0040D727                 mov     [esp+0Ch], edx
.text:0040D72B                 mov     edx, [esp+0C4h]
.text:0040D732                 mov     [esp+90h], ecx
.text:0040D739                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040D741                 mov     [esp+4], edx
.text:0040D745                 mov     dword ptr [esp], 0
.text:0040D74C                 call    sub_40D8C0
.text:0040D751                 add     esp, 0ACh
.text:0040D757                 pop     ebx
.text:0040D758                 pop     esi
.text:0040D759                 pop     edi
.text:0040D75A                 pop     ebp
.text:0040D75B                 retn
.text:0040D75B ; ---------------------------------------------------------------------------
.text:0040D75C                 align 10h
.text:0040D760                 push    edi
.text:0040D761                 push    esi
.text:0040D762                 push    ebx
.text:0040D763                 sub     esp, 40h
.text:0040D766                 mov     edx, ds:dword_4211FC
.text:0040D76C                 mov     ebx, ds:dword_4211F0
.text:0040D772                 mov     esi, ds:dword_4211F8
.text:0040D778                 mov     edi, ds:dword_4211F4
.text:0040D77E                 mov     [esp+1Ch], edx
.text:0040D782                 mov     ecx, ds:dword_421200
.text:0040D788                 mov     edx, ds:dword_421210
.text:0040D78E                 mov     [esp+10h], ebx
.text:0040D792                 mov     ebx, ds:dword_421204
.text:0040D798                 mov     [esp+30h], edx
.text:0040D79C                 movzx   edx, byte ptr [esp+54h]
.text:0040D7A1                 mov     [esp+18h], esi
.text:0040D7A5                 mov     esi, ds:dword_42120C
.text:0040D7AB                 mov     [esp+14h], edi
.text:0040D7AF                 mov     edi, ds:dword_421208
.text:0040D7B5                 mov     [esp+20h], ecx
.text:0040D7B9                 mov     cl, dl
.text:0040D7BB                 shr     cl, 5
.text:0040D7BE                 mov     [esp+24h], ebx
.text:0040D7C2                 movzx   ebx, cl
.text:0040D7C5                 mov     [esp+2Ch], esi
.text:0040D7C9                 lea     esi, [esp+10h]
.text:0040D7CD                 mov     [esp+28h], edi
.text:0040D7D1                 lea     edi, [esi+ebx*4]
.text:0040D7D4                 mov     ebx, edx
.text:0040D7D6                 mov     edx, [edi+4]
.text:0040D7D9                 and     ebx, 1Fh
.text:0040D7DC                 mov     cl, bl
.text:0040D7DE                 mov     eax, edx
.text:0040D7E0                 shr     eax, cl
.text:0040D7E2                 and     eax, 1
.text:0040D7E5                 xor     eax, 1
.text:0040D7E8                 shl     eax, cl
.text:0040D7EA                 xor     edx, eax
.text:0040D7EC                 mov     [edi+4], edx
.text:0040D7EF                 mov     edx, [esp+50h]
.text:0040D7F3                 mov     [esp+0Ch], esi
.text:0040D7F7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040D7FF                 mov     [esp+4], edx
.text:0040D803                 mov     dword ptr [esp], 0
.text:0040D80A                 call    sub_40D8C0
.text:0040D80F                 add     esp, 40h
.text:0040D812                 pop     ebx
.text:0040D813                 pop     esi
.text:0040D814                 pop     edi
.text:0040D815                 retn
.text:0040D815 ; ---------------------------------------------------------------------------
.text:0040D816                 align 10h
.text:0040D820
.text:0040D820 ; =============== S U B R O U T I N E =======================================
.text:0040D820
.text:0040D820
.text:0040D820 ; int __cdecl sub_40D820(char *)
.text:0040D820 sub_40D820      proc near               ; CODE XREF: sub_40AC20+64↑p
.text:0040D820
.text:0040D820 var_4C          = dword ptr -4Ch
.text:0040D820 var_48          = dword ptr -48h
.text:0040D820 var_44          = dword ptr -44h
.text:0040D820 var_40          = dword ptr -40h
.text:0040D820 var_3C          = dword ptr -3Ch
.text:0040D820 var_38          = dword ptr -38h
.text:0040D820 var_34          = dword ptr -34h
.text:0040D820 var_30          = dword ptr -30h
.text:0040D820 var_2C          = dword ptr -2Ch
.text:0040D820 var_28          = dword ptr -28h
.text:0040D820 var_24          = dword ptr -24h
.text:0040D820 var_20          = dword ptr -20h
.text:0040D820 var_1C          = dword ptr -1Ch
.text:0040D820 arg_0           = dword ptr  4
.text:0040D820
.text:0040D820                 sub     esp, 4Ch
.text:0040D823                 mov     ecx, ds:dword_4211F0
.text:0040D829                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040D831                 mov     edx, ds:dword_4211F4
.text:0040D837                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040D83E                 mov     [esp+4Ch+var_3C], ecx
.text:0040D842                 mov     ecx, ds:dword_4211FC
.text:0040D848                 mov     [esp+4Ch+var_38], edx
.text:0040D84C                 mov     edx, ds:dword_4211F8
.text:0040D852                 mov     [esp+4Ch+var_30], ecx
.text:0040D856                 mov     ecx, ds:dword_421200
.text:0040D85C                 mov     eax, edx
.text:0040D85E                 shr     eax, 1Ah
.text:0040D861                 and     eax, 1
.text:0040D864                 xor     eax, 1
.text:0040D867                 mov     [esp+4Ch+var_2C], ecx
.text:0040D86B                 shl     eax, 1Ah
.text:0040D86E                 mov     ecx, ds:dword_421204
.text:0040D874                 xor     edx, eax
.text:0040D876                 mov     [esp+4Ch+var_34], edx
.text:0040D87A                 mov     edx, [esp+4Ch+arg_0]
.text:0040D87E                 mov     [esp+4Ch+var_28], ecx
.text:0040D882                 mov     ecx, ds:dword_421208
.text:0040D888                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040D88C                 mov     [esp+4Ch+var_24], ecx
.text:0040D890                 mov     ecx, ds:dword_42120C
.text:0040D896                 mov     [esp+4Ch+var_20], ecx
.text:0040D89A                 mov     ecx, ds:dword_421210
.text:0040D8A0                 mov     [esp+4Ch+var_1C], ecx
.text:0040D8A4                 lea     ecx, [esp+4Ch+var_3C]
.text:0040D8A8                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040D8AC                 call    sub_40D8C0
.text:0040D8B1                 add     esp, 4Ch
.text:0040D8B4                 retn
.text:0040D8B4 sub_40D820      endp
.text:0040D8B4
.text:0040D8B4 ; ---------------------------------------------------------------------------
.text:0040D8B5                 align 10h
.text:0040D8C0
.text:0040D8C0 ; =============== S U B R O U T I N E =======================================
.text:0040D8C0
.text:0040D8C0
.text:0040D8C0 ; int __cdecl sub_40D8C0(int, char *, int, int)
.text:0040D8C0 sub_40D8C0      proc near               ; CODE XREF: .text:0040D472↑p
.text:0040D8C0                                         ; .text:0040D4A2↑p ...
.text:0040D8C0
.text:0040D8C0 Block           = dword ptr -2Ch
.text:0040D8C0 var_28          = dword ptr -28h
.text:0040D8C0 Str             = dword ptr -24h
.text:0040D8C0 var_20          = dword ptr -20h
.text:0040D8C0 var_1C          = dword ptr -1Ch
.text:0040D8C0 var_18          = dword ptr -18h
.text:0040D8C0 var_14          = dword ptr -14h
.text:0040D8C0 arg_0           = dword ptr  4
.text:0040D8C0 arg_4           = dword ptr  8
.text:0040D8C0 arg_8           = dword ptr  0Ch
.text:0040D8C0 arg_C           = dword ptr  10h
.text:0040D8C0
.text:0040D8C0                 push    ebp
.text:0040D8C1                 push    edi
.text:0040D8C2                 push    esi
.text:0040D8C3                 push    ebx
.text:0040D8C4                 sub     esp, 1Ch
.text:0040D8C7                 call    _errno
.text:0040D8CC                 mov     edx, [eax]
.text:0040D8CE                 mov     eax, [esp+2Ch+arg_0]
.text:0040D8D2                 mov     [esp+2Ch+var_14], edx
.text:0040D8D6                 test    eax, eax
.text:0040D8D8                 js      loc_40DA7A
.text:0040D8DE                 mov     eax, [esp+2Ch+arg_0]
.text:0040D8E2                 cmp     dword_420070, eax
.text:0040D8E8                 ja      short loc_40D960
.text:0040D8EA                 mov     esi, eax
.text:0040D8EC                 inc     esi
.text:0040D8ED                 cmp     esi, 1FFFFFFFh
.text:0040D8F3                 ja      loc_40DA7F
.text:0040D8F9                 mov     ebx, off_42007C
.text:0040D8FF                 cmp     ebx, offset dword_420074
.text:0040D905                 jz      loc_40DA51
.text:0040D90B
.text:0040D90B loc_40D90B:                             ; CODE XREF: sub_40D8C0+1B5↓j
.text:0040D90B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040D90E                 lea     ecx, ds:0[esi*8]
.text:0040D915                 mov     ebp, esi
.text:0040D917                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040D91B                 call    sub_40A3B0
.text:0040D920                 mov     off_42007C, eax
.text:0040D925                 mov     ebx, dword_420070
.text:0040D92B                 sub     ebp, ebx
.text:0040D92D                 lea     edi, [eax+ebx*8]
.text:0040D930                 lea     eax, ds:0[ebp*8]
.text:0040D937                 cmp     eax, 7
.text:0040D93A                 jbe     short loc_40D950
.text:0040D93C                 test    edi, 4
.text:0040D942                 jz      short loc_40D950
.text:0040D944                 mov     dword ptr [edi], 0
.text:0040D94A                 sub     eax, 4
.text:0040D94D                 add     edi, 4
.text:0040D950
.text:0040D950 loc_40D950:                             ; CODE XREF: sub_40D8C0+7A↑j
.text:0040D950                                         ; sub_40D8C0+82↑j
.text:0040D950                 cld
.text:0040D951                 mov     ecx, eax
.text:0040D953                 shr     ecx, 2
.text:0040D956                 xor     eax, eax
.text:0040D958                 rep stosd
.text:0040D95A                 mov     dword_420070, esi
.text:0040D960
.text:0040D960 loc_40D960:                             ; CODE XREF: sub_40D8C0+28↑j
.text:0040D960                 mov     esi, off_42007C
.text:0040D966                 mov     eax, [esp+2Ch+arg_0]
.text:0040D96A                 mov     ebp, [esi+eax*8]
.text:0040D96D                 mov     edi, [esi+eax*8+4]
.text:0040D971                 mov     esi, [esp+2Ch+arg_C]
.text:0040D975                 test    esi, esi
.text:0040D977                 jz      loc_40DA47
.text:0040D97D
.text:0040D97D loc_40D97D:                             ; CODE XREF: sub_40D8C0+18C↓j
.text:0040D97D                 call    _errno
.text:0040D982                 mov     ebx, [eax]
.text:0040D984                 mov     [esp+2Ch+var_18], esi ; int
.text:0040D988                 mov     ecx, [esi]
.text:0040D98A                 mov     [esp+2Ch+Block], edi ; int
.text:0040D98D                 mov     edx, [esp+2Ch+arg_8]
.text:0040D991                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040D995                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040D999                 mov     ecx, [esp+2Ch+arg_4]
.text:0040D99D                 mov     [esp+2Ch+var_20], edx ; int
.text:0040D9A1                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040D9A5                 call    sub_40C780
.text:0040D9AA                 mov     esi, eax
.text:0040D9AC                 call    _errno
.text:0040D9B1                 mov     [eax], ebx
.text:0040D9B3                 cmp     ebp, esi
.text:0040D9B5                 ja      short loc_40DA2B
.text:0040D9B7                 lea     ebp, [esi+1]
.text:0040D9BA                 mov     ebx, off_42007C
.text:0040D9C0                 cmp     edi, offset unk_4210F0
.text:0040D9C6                 mov     esi, [esp+2Ch+arg_0]
.text:0040D9CA                 mov     [ebx+esi*8], ebp
.text:0040D9CD                 jz      short loc_40D9DD
.text:0040D9CF                 mov     [esp+2Ch+Block], edi ; Block
.text:0040D9D2                 call    free
.text:0040D9D7                 mov     ebx, off_42007C
.text:0040D9DD
.text:0040D9DD loc_40D9DD:                             ; CODE XREF: sub_40D8C0+10D↑j
.text:0040D9DD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040D9E0                 call    sub_40A320
.text:0040D9E5                 mov     esi, [esp+2Ch+arg_C]
.text:0040D9E9                 mov     edi, eax
.text:0040D9EB                 mov     eax, [esp+2Ch+arg_0]
.text:0040D9EF                 test    esi, esi
.text:0040D9F1                 mov     [ebx+eax*8+4], edi
.text:0040D9F5                 jz      short loc_40DA40
.text:0040D9F7
.text:0040D9F7 loc_40D9F7:                             ; CODE XREF: sub_40D8C0+185↓j
.text:0040D9F7                 call    _errno
.text:0040D9FC                 mov     ebx, [eax]
.text:0040D9FE                 mov     [esp+2Ch+var_18], esi ; int
.text:0040DA02                 mov     ecx, [esi]
.text:0040DA04                 mov     [esp+2Ch+Block], edi ; int
.text:0040DA07                 mov     edx, [esp+2Ch+arg_8]
.text:0040DA0B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040DA0F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040DA13                 mov     ecx, [esp+2Ch+arg_4]
.text:0040DA17                 mov     [esp+2Ch+var_20], edx ; int
.text:0040DA1B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040DA1F                 call    sub_40C780
.text:0040DA24                 call    _errno
.text:0040DA29                 mov     [eax], ebx
.text:0040DA2B
.text:0040DA2B loc_40DA2B:                             ; CODE XREF: sub_40D8C0+F5↑j
.text:0040DA2B                 call    _errno
.text:0040DA30                 mov     ebp, [esp+2Ch+var_14]
.text:0040DA34                 mov     [eax], ebp
.text:0040DA36                 add     esp, 1Ch
.text:0040DA39                 mov     eax, edi
.text:0040DA3B                 pop     ebx
.text:0040DA3C                 pop     esi
.text:0040DA3D                 pop     edi
.text:0040DA3E                 pop     ebp
.text:0040DA3F                 retn
.text:0040DA40 ; ---------------------------------------------------------------------------
.text:0040DA40
.text:0040DA40 loc_40DA40:                             ; CODE XREF: sub_40D8C0+135↑j
.text:0040DA40                 mov     esi, offset dword_4211F0
.text:0040DA45                 jmp     short loc_40D9F7
.text:0040DA47 ; ---------------------------------------------------------------------------
.text:0040DA47
.text:0040DA47 loc_40DA47:                             ; CODE XREF: sub_40D8C0+B7↑j
.text:0040DA47                 mov     esi, offset dword_4211F0
.text:0040DA4C                 jmp     loc_40D97D
.text:0040DA51 ; ---------------------------------------------------------------------------
.text:0040DA51
.text:0040DA51 loc_40DA51:                             ; CODE XREF: sub_40D8C0+45↑j
.text:0040DA51                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040DA58                 call    sub_40A320
.text:0040DA5D                 mov     off_42007C, eax
.text:0040DA62                 mov     edi, dword_420074
.text:0040DA68                 mov     ebx, eax
.text:0040DA6A                 mov     ecx, off_420078
.text:0040DA70                 mov     [eax], edi
.text:0040DA72                 mov     [eax+4], ecx
.text:0040DA75                 jmp     loc_40D90B
.text:0040DA7A ; ---------------------------------------------------------------------------
.text:0040DA7A
.text:0040DA7A loc_40DA7A:                             ; CODE XREF: sub_40D8C0+18↑j
.text:0040DA7A                 call    abort
.text:0040DA7F ; ---------------------------------------------------------------------------
.text:0040DA7F
.text:0040DA7F loc_40DA7F:                             ; CODE XREF: sub_40D8C0+33↑j
.text:0040DA7F                 call    sub_40A2A0
.text:0040DA7F sub_40D8C0      endp
.text:0040DA7F
.text:0040DA7F ; ---------------------------------------------------------------------------
.text:0040DA84                 align 10h
.text:0040DA90
.text:0040DA90 ; =============== S U B R O U T I N E =======================================
.text:0040DA90
.text:0040DA90
.text:0040DA90 sub_40DA90      proc near               ; DATA XREF: .text:0040DAA9↓o
.text:0040DA90                 pop     esi
.text:0040DA91                 pop     ebx
.text:0040DA92                 jns     short near ptr loc_40DAEA+3
.text:0040DA94                 pop     ebp
.text:0040DA95                 add     [esi+5Bh], bl
.text:0040DA98                 outsb
.text:0040DA99                 dec     esi
.text:0040DA9A                 pop     ebp
.text:0040DA9B
.text:0040DA9B loc_40DA9B:                             ; CODE XREF: sub_40AEB0+94↑p
.text:0040DA9B                 add     [ebp+56002674h], cl
.text:0040DA9B sub_40DA90      endp ; sp-analysis failed
.text:0040DA9B
.text:0040DAA1                 push    ebx
.text:0040DAA2                 sub     esp, 14h
.text:0040DAA5                 mov     esi, [esp+20h]
.text:0040DAA9                 mov     dword ptr [esp], offset sub_40DA90
.text:0040DAB0                 call    ds:libintl_gettext
.text:0040DAB6                 mov     ebx, eax
.text:0040DAB8                 mov     eax, ds:dword_421220
.text:0040DABD                 cmp     ebx, eax
.text:0040DABF                 jz      short loc_40DAF0
.text:0040DAC1                 test    eax, eax
.text:0040DAC3                 jnz     loc_40DBC0
.text:0040DAC9
.text:0040DAC9 loc_40DAC9:                             ; CODE XREF: .text:0040DBD3↓j
.text:0040DAC9                 mov     dword ptr [esp+8], 1
.text:0040DAD1                 mov     [esp+4], ebx
.text:0040DAD5                 mov     dword ptr [esp], offset unk_421240
.text:0040DADC                 call    sub_411010
.text:0040DAE1                 test    eax, eax
.text:0040DAE3                 mov     edx, 0FFFFFFFFh
.text:0040DAE8                 jnz     short loc_40DB1F
.text:0040DAEA
.text:0040DAEA loc_40DAEA:                             ; CODE XREF: sub_40DA90+2↑j
.text:0040DAEA                 mov     ds:dword_421220, ebx
.text:0040DAF0
.text:0040DAF0 loc_40DAF0:                             ; CODE XREF: .text:0040DABF↑j
.text:0040DAF0                 mov     dword ptr [esp+10h], 0
.text:0040DAF8                 mov     dword ptr [esp+0Ch], 0
.text:0040DB00                 mov     dword ptr [esp+8], 0
.text:0040DB08                 mov     [esp+4], esi
.text:0040DB0C                 mov     dword ptr [esp], offset unk_421240
.text:0040DB13                 call    sub_411190
.text:0040DB18                 xor     edx, edx
.text:0040DB1A                 test    eax, eax
.text:0040DB1C                 setz    dl
.text:0040DB1F
.text:0040DB1F loc_40DB1F:                             ; CODE XREF: .text:0040DAE8↑j
.text:0040DB1F                 test    edx, edx
.text:0040DB21                 mov     eax, edx
.text:0040DB23                 jz      short loc_40DB30
.text:0040DB25
.text:0040DB25 loc_40DB25:                             ; CODE XREF: .text:0040DBA5↓j
.text:0040DB25                 add     esp, 14h
.text:0040DB28                 pop     ebx
.text:0040DB29                 pop     esi
.text:0040DB2A                 retn
.text:0040DB2A ; ---------------------------------------------------------------------------
.text:0040DB2B                 align 10h
.text:0040DB30
.text:0040DB30 loc_40DB30:                             ; CODE XREF: .text:0040DB23↑j
.text:0040DB30                 mov     dword ptr [esp], 40DA96h
.text:0040DB37                 call    ds:libintl_gettext
.text:0040DB3D                 mov     ebx, eax
.text:0040DB3F                 mov     eax, ds:dword_421230
.text:0040DB44                 cmp     ebx, eax
.text:0040DB46                 jz      short loc_40DB73
.text:0040DB48                 test    eax, eax
.text:0040DB4A                 jnz     short loc_40DBAA
.text:0040DB4C
.text:0040DB4C loc_40DB4C:                             ; CODE XREF: .text:0040DBBE↓j
.text:0040DB4C                 mov     dword ptr [esp+8], 1
.text:0040DB54                 mov     [esp+4], ebx
.text:0040DB58                 mov     dword ptr [esp], offset unk_421260
.text:0040DB5F                 call    sub_411010
.text:0040DB64                 test    eax, eax
.text:0040DB66                 mov     edx, 0FFFFFFFFh
.text:0040DB6B                 jnz     short loc_40DBA3
.text:0040DB6D                 mov     ds:dword_421230, ebx
.text:0040DB73
.text:0040DB73 loc_40DB73:                             ; CODE XREF: .text:0040DB46↑j
.text:0040DB73                 mov     dword ptr [esp+10h], 0
.text:0040DB7B                 mov     dword ptr [esp+0Ch], 0
.text:0040DB83                 mov     dword ptr [esp+8], 0
.text:0040DB8B                 mov     [esp+4], esi
.text:0040DB8F                 mov     dword ptr [esp], offset unk_421260
.text:0040DB96                 call    sub_411190
.text:0040DB9B                 xor     edx, edx
.text:0040DB9D                 test    eax, eax
.text:0040DB9F                 setz    dl
.text:0040DBA2                 dec     edx
.text:0040DBA3
.text:0040DBA3 loc_40DBA3:                             ; CODE XREF: .text:0040DB6B↑j
.text:0040DBA3                 mov     eax, edx
.text:0040DBA5                 jmp     loc_40DB25
.text:0040DBAA ; ---------------------------------------------------------------------------
.text:0040DBAA
.text:0040DBAA loc_40DBAA:                             ; CODE XREF: .text:0040DB4A↑j
.text:0040DBAA                 mov     dword ptr [esp], offset unk_421260
.text:0040DBB1                 call    sub_411550
.text:0040DBB6                 xor     edx, edx
.text:0040DBB8                 mov     ds:dword_421230, edx
.text:0040DBBE                 jmp     short loc_40DB4C
.text:0040DBC0 ; ---------------------------------------------------------------------------
.text:0040DBC0
.text:0040DBC0 loc_40DBC0:                             ; CODE XREF: .text:0040DAC3↑j
.text:0040DBC0                 mov     dword ptr [esp], offset unk_421240
.text:0040DBC7                 call    sub_411550
.text:0040DBCC                 xor     eax, eax
.text:0040DBCE                 mov     ds:dword_421220, eax
.text:0040DBD3                 jmp     loc_40DAC9
.text:0040DBD3 ; ---------------------------------------------------------------------------
.text:0040DBD8                 align 10h
.text:0040DBE0
.text:0040DBE0 ; =============== S U B R O U T I N E =======================================
.text:0040DBE0
.text:0040DBE0
.text:0040DBE0 sub_40DBE0      proc near               ; CODE XREF: sub_40BEA0+2E↑p
.text:0040DBE0
.text:0040DBE0 FileHandle      = dword ptr -1Ch
.text:0040DBE0 Buf             = dword ptr -18h
.text:0040DBE0 MaxCharCount    = dword ptr -14h
.text:0040DBE0 arg_0           = dword ptr  4
.text:0040DBE0 arg_4           = dword ptr  8
.text:0040DBE0 arg_8           = dword ptr  0Ch
.text:0040DBE0
.text:0040DBE0                 push    ebp
.text:0040DBE1                 push    edi
.text:0040DBE2                 push    esi
.text:0040DBE3                 push    ebx
.text:0040DBE4                 sub     esp, 0Ch
.text:0040DBE7                 mov     ebp, [esp+1Ch+arg_0]
.text:0040DBEB                 mov     edi, [esp+1Ch+arg_4]
.text:0040DBEF                 mov     ebx, [esp+1Ch+arg_8]
.text:0040DBF3                 lea     esi, [esi+0]
.text:0040DBF9                 lea     edi, [edi+0]
.text:0040DC00
.text:0040DC00 loc_40DC00:                             ; CODE XREF: sub_40DBE0+3E↓j
.text:0040DC00                                         ; sub_40DBE0+57↓j
.text:0040DC00                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:0040DC04                 mov     [esp+1Ch+Buf], edi ; Buf
.text:0040DC08                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040DC0B                 call    _write
.text:0040DC10                 test    eax, eax
.text:0040DC12                 mov     esi, eax
.text:0040DC14                 jns     short loc_40DC39
.text:0040DC16                 call    _errno
.text:0040DC1B                 cmp     dword ptr [eax], 4
.text:0040DC1E                 jz      short loc_40DC00
.text:0040DC20                 call    _errno
.text:0040DC25                 cmp     dword ptr [eax], 16h
.text:0040DC28                 jnz     short loc_40DC39
.text:0040DC2A                 cmp     ebx, 7FFFE000h
.text:0040DC30                 jbe     short loc_40DC39
.text:0040DC32                 mov     ebx, 7FFFE000h
.text:0040DC37                 jmp     short loc_40DC00
.text:0040DC39 ; ---------------------------------------------------------------------------
.text:0040DC39
.text:0040DC39 loc_40DC39:                             ; CODE XREF: sub_40DBE0+34↑j
.text:0040DC39                                         ; sub_40DBE0+48↑j ...
.text:0040DC39                 add     esp, 0Ch
.text:0040DC3C                 mov     eax, esi
.text:0040DC3E                 pop     ebx
.text:0040DC3F                 pop     esi
.text:0040DC40                 pop     edi
.text:0040DC41                 pop     ebp
.text:0040DC42                 retn
.text:0040DC42 sub_40DBE0      endp
.text:0040DC42
.text:0040DC42 ; ---------------------------------------------------------------------------
.text:0040DC43                 align 10h
.text:0040DC50 ; const char Control[2]
.text:0040DC50 Control         db '/',0                ; DATA XREF: sub_40DCE0:loc_40DD60↓o
.text:0040DC50                                         ; sub_40DCE0:loc_40DDAB↓o ...
.text:0040DC52                 db 1Eh dup(90h)
.text:0040DC70 aCoreutils530Sr_1 db '../../coreutils-5.3.0-src/lib/chdir-long.c',0
.text:0040DC70                                         ; DATA XREF: sub_40DCE0+22E↓o
.text:0040DC70                                         ; sub_40DCE0+5CB↓o ...
.text:0040DC9B aLenStrcspnStar db 'len == strcspn (start, "/")',0
.text:0040DC9B                                         ; DATA XREF: sub_40DCE0+236↓o
.text:0040DCB7 aDD0            db '*d == ',27h,'/',27h,' || *d == ',27h,'\0',27h,0
.text:0040DCB7                                         ; DATA XREF: sub_40DCE0+5D3↓o
.text:0040DCCF a0Len           db '0 < len',0          ; DATA XREF: sub_40DCE0+670↓o
.text:0040DCD7                 align 10h
.text:0040DCE0
.text:0040DCE0 ; =============== S U B R O U T I N E =======================================
.text:0040DCE0
.text:0040DCE0
.text:0040DCE0 ; int __cdecl sub_40DCE0(LPCSTR)
.text:0040DCE0 sub_40DCE0      proc near               ; CODE XREF: sub_40C090+17↑j
.text:0040DCE0
.text:0040DCE0 Str             = dword ptr -14Ch
.text:0040DCE0 Control         = dword ptr -148h
.text:0040DCE0 MaxCount        = dword ptr -144h
.text:0040DCE0 var_130         = dword ptr -130h
.text:0040DCE0 var_12C         = byte ptr -12Ch
.text:0040DCE0 var_29          = byte ptr -29h
.text:0040DCE0 var_28          = dword ptr -28h
.text:0040DCE0 FileHandle      = dword ptr -24h
.text:0040DCE0 arg_0           = dword ptr  4
.text:0040DCE0
.text:0040DCE0                 push    ebp
.text:0040DCE1                 push    edi
.text:0040DCE2                 push    esi
.text:0040DCE3                 push    ebx
.text:0040DCE4                 sub     esp, 13Ch
.text:0040DCEA                 mov     esi, [esp+14Ch+arg_0]
.text:0040DCF1                 mov     [esp+14Ch+Str], esi ; LPCSTR
.text:0040DCF4                 call    sub_419A70
.text:0040DCF9                 test    eax, eax
.text:0040DCFB                 mov     ebx, eax
.text:0040DCFD                 jnz     short loc_40DD10
.text:0040DCFF
.text:0040DCFF loc_40DCFF:                             ; CODE XREF: sub_40DCE0+38↓j
.text:0040DCFF                 mov     eax, ebx
.text:0040DD01
.text:0040DD01 loc_40DD01:                             ; CODE XREF: sub_40DCE0+214↓j
.text:0040DD01                                         ; sub_40DCE0+2C7↓j
.text:0040DD01                 add     esp, 13Ch
.text:0040DD07                 pop     ebx
.text:0040DD08                 pop     esi
.text:0040DD09                 pop     edi
.text:0040DD0A                 pop     ebp
.text:0040DD0B                 retn
.text:0040DD0B ; ---------------------------------------------------------------------------
.text:0040DD0C                 align 10h
.text:0040DD10
.text:0040DD10 loc_40DD10:                             ; CODE XREF: sub_40DCE0+1D↑j
.text:0040DD10                 call    _errno
.text:0040DD15                 cmp     dword ptr [eax], 26h ; '&'
.text:0040DD18                 jnz     short loc_40DCFF
.text:0040DD1A                 mov     [esp+14Ch+Str], esi ; Str
.text:0040DD1D                 call    strlen
.text:0040DD22                 lea     ecx, [eax+esi]
.text:0040DD25                 test    eax, eax
.text:0040DD27                 lea     edx, [esp+14Ch+var_12C]
.text:0040DD2B                 mov     [esp+14Ch+var_130], ecx
.text:0040DD2F                 mov     ecx, 0FFD19553h
.text:0040DD34                 mov     [esp+14Ch+var_28], edx
.text:0040DD3B                 mov     [esp+14Ch+FileHandle], ecx
.text:0040DD42                 jz      loc_40E340
.text:0040DD48                 cmp     byte ptr [esi], 2Fh ; '/'
.text:0040DD4B                 jz      loc_40E0E0
.text:0040DD51                 mov     ebp, esi
.text:0040DD53                 lea     esi, [esi+0]
.text:0040DD59                 lea     edi, [edi+0]
.text:0040DD60
.text:0040DD60 loc_40DD60:                             ; CODE XREF: sub_40DCE0+16B↓j
.text:0040DD60                                         ; sub_40DCE0+5B5↓j ...
.text:0040DD60                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040DD68                 mov     [esp+14Ch+Str], ebp ; Str
.text:0040DD6B                 call    strspn
.text:0040DD70                 lea     esi, [eax+ebp]
.text:0040DD73                 cmp     byte ptr [esi], 0
.text:0040DD76                 jz      loc_40E050
.text:0040DD7C                 mov     eax, [esp+14Ch+var_130]
.text:0040DD80                 sub     eax, esi
.text:0040DD82                 cmp     eax, 103h
.text:0040DD87                 jle     loc_40DF22
.text:0040DD8D                 mov     [esp+14Ch+MaxCount], eax ; MaxCount
.text:0040DD91                 mov     ebx, eax
.text:0040DD93                 mov     [esp+14Ch+Control], 2Fh ; '/' ; Val
.text:0040DD9B                 mov     [esp+14Ch+Str], esi ; Buf
.text:0040DD9E                 call    memchr
.text:0040DDA3                 test    eax, eax
.text:0040DDA5                 jz      short loc_40DDAB
.text:0040DDA7                 mov     ebx, eax
.text:0040DDA9                 sub     ebx, esi
.text:0040DDAB
.text:0040DDAB loc_40DDAB:                             ; CODE XREF: sub_40DCE0+C5↑j
.text:0040DDAB                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040DDB3                 mov     [esp+14Ch+Str], esi ; Str
.text:0040DDB6                 call    strcspn
.text:0040DDBB                 cmp     ebx, eax
.text:0040DDBD                 jnz     loc_40DF06
.text:0040DDC3                 mov     edx, [esp+14Ch+var_28]
.text:0040DDCA                 lea     ecx, [esp+14Ch+var_12C]
.text:0040DDCE                 xor     eax, eax
.text:0040DDD0                 lea     ebp, [ebx+esi]
.text:0040DDD3                 lea     edi, [esp+14Ch+var_29]
.text:0040DDDA                 cmp     ecx, edx
.text:0040DDDC                 jnb     short loc_40DDE6
.text:0040DDDE                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040DDE2                 jz      short loc_40DDE6
.text:0040DDE4                 mov     al, 1
.text:0040DDE6
.text:0040DDE6 loc_40DDE6:                             ; CODE XREF: sub_40DCE0+FC↑j
.text:0040DDE6                                         ; sub_40DCE0+102↑j
.text:0040DDE6                 lea     edx, [ebx+1]
.text:0040DDE9                 mov     cl, al
.text:0040DDEB                 cmp     edx, 103h
.text:0040DDF1                 ja      loc_40DEF9
.text:0040DDF7                 mov     edx, [esp+14Ch+var_28]
.text:0040DDFE                 movzx   eax, al
.text:0040DE01                 lea     eax, [ebx+eax+1]
.text:0040DE05                 sub     edi, edx
.text:0040DE07                 cmp     edi, eax
.text:0040DE09                 jnb     short loc_40DE1C
.text:0040DE0B                 lea     eax, [esp+14Ch+var_12C]
.text:0040DE0F                 cmp     edx, eax
.text:0040DE11                 jnz     short loc_40DE50
.text:0040DE13
.text:0040DE13 loc_40DE13:                             ; CODE XREF: sub_40DCE0+1BC↓j
.text:0040DE13                 mov     edx, [esp+14Ch+var_28]
.text:0040DE1A                 xor     ecx, ecx
.text:0040DE1C
.text:0040DE1C loc_40DE1C:                             ; CODE XREF: sub_40DCE0+129↑j
.text:0040DE1C                 test    cl, cl
.text:0040DE1E                 jz      short loc_40DE34
.text:0040DE20                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040DE23                 mov     ecx, [esp+14Ch+var_28]
.text:0040DE2A                 inc     ecx
.text:0040DE2B                 mov     [esp+14Ch+var_28], ecx
.text:0040DE32                 mov     edx, ecx
.text:0040DE34
.text:0040DE34 loc_40DE34:                             ; CODE XREF: sub_40DCE0+13E↑j
.text:0040DE34                 mov     [esp+14Ch+MaxCount], ebx
.text:0040DE38                 mov     [esp+14Ch+Control], esi
.text:0040DE3C
.text:0040DE3C loc_40DE3C:                             ; CODE XREF: sub_40DCE0+480↓j
.text:0040DE3C                 mov     [esp+14Ch+Str], edx
.text:0040DE3F                 call    sub_419D20
.text:0040DE44                 mov     [esp+14Ch+var_28], eax
.text:0040DE4B                 jmp     loc_40DD60
.text:0040DE50 ; ---------------------------------------------------------------------------
.text:0040DE50
.text:0040DE50 loc_40DE50:                             ; CODE XREF: sub_40DCE0+131↑j
.text:0040DE50                 mov     byte ptr [edx], 0
.text:0040DE53                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040DE5A                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040DE62                 mov     [esp+14Ch+Control], eax ; char *
.text:0040DE66                 mov     [esp+14Ch+Str], ecx ; int
.text:0040DE69                 call    sub_415050
.text:0040DE6E                 test    eax, eax
.text:0040DE70                 mov     edi, eax
.text:0040DE72                 js      short loc_40DEA1
.text:0040DE74
.text:0040DE74 loc_40DE74:                             ; CODE XREF: sub_40DCE0+1E4↓j
.text:0040DE74                 mov     eax, [esp+14Ch+FileHandle]
.text:0040DE7B                 cmp     eax, 0FFD19553h
.text:0040DE80                 jz      short loc_40DE8A
.text:0040DE82                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040DE85                 call    _close
.text:0040DE8A
.text:0040DE8A loc_40DE8A:                             ; CODE XREF: sub_40DCE0+1A0↑j
.text:0040DE8A                 mov     [esp+14Ch+FileHandle], edi
.text:0040DE91                 lea     edx, [esp+14Ch+var_12C]
.text:0040DE95                 mov     [esp+14Ch+var_28], edx
.text:0040DE9C                 jmp     loc_40DE13
.text:0040DEA1 ; ---------------------------------------------------------------------------
.text:0040DEA1
.text:0040DEA1 loc_40DEA1:                             ; CODE XREF: sub_40DCE0+192↑j
.text:0040DEA1                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040DEA9                 mov     edi, [esp+14Ch+FileHandle]
.text:0040DEB0                 lea     eax, [esp+14Ch+var_12C]
.text:0040DEB4                 mov     [esp+14Ch+Control], eax ; char *
.text:0040DEB8                 mov     [esp+14Ch+Str], edi ; int
.text:0040DEBB                 call    sub_415050
.text:0040DEC0                 test    eax, eax
.text:0040DEC2                 mov     edi, eax
.text:0040DEC4                 jns     short loc_40DE74
.text:0040DEC6
.text:0040DEC6 loc_40DEC6:                             ; CODE XREF: sub_40DCE0+224↓j
.text:0040DEC6                                         ; sub_40DCE0+2A4↓j ...
.text:0040DEC6                 call    _errno
.text:0040DECB                 mov     ebx, [eax]
.text:0040DECD                 mov     eax, [esp+14Ch+FileHandle]
.text:0040DED4                 test    eax, eax
.text:0040DED6                 js      short loc_40DEE8
.text:0040DED8                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040DEDB                 call    _close
.text:0040DEE0                 test    eax, eax
.text:0040DEE2                 jnz     loc_40E35C
.text:0040DEE8
.text:0040DEE8 loc_40DEE8:                             ; CODE XREF: sub_40DCE0+1F6↑j
.text:0040DEE8                 call    _errno
.text:0040DEED                 mov     [eax], ebx
.text:0040DEEF                 mov     eax, 0FFFFFFFFh
.text:0040DEF4                 jmp     loc_40DD01
.text:0040DEF9 ; ---------------------------------------------------------------------------
.text:0040DEF9
.text:0040DEF9 loc_40DEF9:                             ; CODE XREF: sub_40DCE0+111↑j
.text:0040DEF9                                         ; sub_40DCE0+54E↓j
.text:0040DEF9                 call    _errno
.text:0040DEFE                 mov     dword ptr [eax], 26h ; '&'
.text:0040DF04                 jmp     short loc_40DEC6
.text:0040DF06 ; ---------------------------------------------------------------------------
.text:0040DF06
.text:0040DF06 loc_40DF06:                             ; CODE XREF: sub_40DCE0+DD↑j
.text:0040DF06                 mov     [esp+14Ch+MaxCount], 105h
.text:0040DF0E                 mov     [esp+14Ch+Control], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/chdir-lon"...
.text:0040DF16                 mov     [esp+14Ch+Str], offset aLenStrcspnStar ; "len == strcspn (start, \"/\")"
.text:0040DF1D
.text:0040DF1D loc_40DF1D:                             ; CODE XREF: sub_40DCE0+5DA↓j
.text:0040DF1D                                         ; sub_40DCE0+677↓j
.text:0040DF1D                 call    _assert
.text:0040DF22 ; ---------------------------------------------------------------------------
.text:0040DF22
.text:0040DF22 loc_40DF22:                             ; CODE XREF: sub_40DCE0+A7↑j
.text:0040DF22                 mov     eax, [esp+14Ch+var_28]
.text:0040DF29                 lea     edx, [esp+14Ch+var_12C]
.text:0040DF2D                 cmp     eax, edx
.text:0040DF2F                 jnz     loc_40DFD2
.text:0040DF35
.text:0040DF35 loc_40DF35:                             ; CODE XREF: sub_40DCE0+33E↓j
.text:0040DF35                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040DF3D                 mov     ebx, [esp+14Ch+FileHandle]
.text:0040DF44                 mov     [esp+14Ch+Control], esi ; char *
.text:0040DF48                 mov     [esp+14Ch+Str], ebx ; int
.text:0040DF4B                 call    sub_415050
.text:0040DF50                 test    eax, eax
.text:0040DF52                 mov     ebx, eax
.text:0040DF54                 js      short loc_40DFAC
.text:0040DF56
.text:0040DF56 loc_40DF56:                             ; CODE XREF: sub_40DCE0+2EB↓j
.text:0040DF56                 mov     eax, [esp+14Ch+FileHandle]
.text:0040DF5D                 cmp     eax, 0FFD19553h
.text:0040DF62                 jz      short loc_40DF6C
.text:0040DF64                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040DF67                 call    _close
.text:0040DF6C
.text:0040DF6C loc_40DF6C:                             ; CODE XREF: sub_40DCE0+282↑j
.text:0040DF6C                 mov     [esp+14Ch+FileHandle], ebx
.text:0040DF73
.text:0040DF73 loc_40DF73:                             ; CODE XREF: sub_40DCE0+37D↓j
.text:0040DF73                                         ; sub_40DCE0+3CF↓j
.text:0040DF73                 mov     ebp, [esp+14Ch+FileHandle]
.text:0040DF7A                 mov     [esp+14Ch+Str], ebp
.text:0040DF7D                 call    sub_4151B0
.text:0040DF82                 test    eax, eax
.text:0040DF84                 jnz     loc_40DEC6
.text:0040DF8A                 mov     eax, [esp+14Ch+FileHandle]
.text:0040DF91                 test    eax, eax
.text:0040DF93                 js      short loc_40DFA5
.text:0040DF95                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040DF98                 call    _close
.text:0040DF9D                 test    eax, eax
.text:0040DF9F                 jnz     loc_40E35C
.text:0040DFA5
.text:0040DFA5 loc_40DFA5:                             ; CODE XREF: sub_40DCE0+2B3↑j
.text:0040DFA5                 xor     eax, eax
.text:0040DFA7                 jmp     loc_40DD01
.text:0040DFAC ; ---------------------------------------------------------------------------
.text:0040DFAC
.text:0040DFAC loc_40DFAC:                             ; CODE XREF: sub_40DCE0+274↑j
.text:0040DFAC                 mov     [esp+14Ch+Control], esi ; char *
.text:0040DFB0                 mov     esi, [esp+14Ch+FileHandle]
.text:0040DFB7                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040DFBF                 mov     [esp+14Ch+Str], esi ; int
.text:0040DFC2                 call    sub_415050
.text:0040DFC7                 test    eax, eax
.text:0040DFC9                 mov     ebx, eax
.text:0040DFCB                 jns     short loc_40DF56
.text:0040DFCD                 jmp     loc_40DEC6
.text:0040DFD2 ; ---------------------------------------------------------------------------
.text:0040DFD2
.text:0040DFD2 loc_40DFD2:                             ; CODE XREF: sub_40DCE0+24F↑j
.text:0040DFD2                 mov     byte ptr [eax], 0
.text:0040DFD5                 mov     ebp, [esp+14Ch+FileHandle]
.text:0040DFDC                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040DFE4                 mov     [esp+14Ch+Control], edx ; char *
.text:0040DFE8                 mov     [esp+14Ch+Str], ebp ; int
.text:0040DFEB                 call    sub_415050
.text:0040DFF0                 test    eax, eax
.text:0040DFF2                 mov     ebx, eax
.text:0040DFF4                 js      short loc_40E023
.text:0040DFF6
.text:0040DFF6 loc_40DFF6:                             ; CODE XREF: sub_40DCE0+366↓j
.text:0040DFF6                 mov     eax, [esp+14Ch+FileHandle]
.text:0040DFFD                 cmp     eax, 0FFD19553h
.text:0040E002                 jz      short loc_40E00C
.text:0040E004                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040E007                 call    _close
.text:0040E00C
.text:0040E00C loc_40E00C:                             ; CODE XREF: sub_40DCE0+322↑j
.text:0040E00C                 mov     [esp+14Ch+FileHandle], ebx
.text:0040E013                 lea     edi, [esp+14Ch+var_12C]
.text:0040E017                 mov     [esp+14Ch+var_28], edi
.text:0040E01E                 jmp     loc_40DF35
.text:0040E023 ; ---------------------------------------------------------------------------
.text:0040E023
.text:0040E023 loc_40E023:                             ; CODE XREF: sub_40DCE0+314↑j
.text:0040E023                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040E02B                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040E032                 lea     eax, [esp+14Ch+var_12C]
.text:0040E036                 mov     [esp+14Ch+Control], eax ; char *
.text:0040E03A                 mov     [esp+14Ch+Str], ecx ; int
.text:0040E03D                 call    sub_415050
.text:0040E042                 test    eax, eax
.text:0040E044                 mov     ebx, eax
.text:0040E046                 jns     short loc_40DFF6
.text:0040E048                 jmp     loc_40DEC6
.text:0040E048 ; ---------------------------------------------------------------------------
.text:0040E04D                 align 10h
.text:0040E050
.text:0040E050 loc_40E050:                             ; CODE XREF: sub_40DCE0+96↑j
.text:0040E050                 mov     eax, [esp+14Ch+var_28]
.text:0040E057                 lea     edx, [esp+14Ch+var_12C]
.text:0040E05B                 cmp     eax, edx
.text:0040E05D                 jz      loc_40DF73
.text:0040E063                 mov     byte ptr [eax], 0
.text:0040E066                 mov     esi, [esp+14Ch+FileHandle]
.text:0040E06D                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040E075                 mov     [esp+14Ch+Control], edx ; char *
.text:0040E079                 mov     [esp+14Ch+Str], esi ; int
.text:0040E07C                 call    sub_415050
.text:0040E081                 test    eax, eax
.text:0040E083                 mov     ebx, eax
.text:0040E085                 js      short loc_40E0B4
.text:0040E087
.text:0040E087 loc_40E087:                             ; CODE XREF: sub_40DCE0+3F7↓j
.text:0040E087                 mov     eax, [esp+14Ch+FileHandle]
.text:0040E08E                 cmp     eax, 0FFD19553h
.text:0040E093                 jz      short loc_40E09D
.text:0040E095                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040E098                 call    _close
.text:0040E09D
.text:0040E09D loc_40E09D:                             ; CODE XREF: sub_40DCE0+3B3↑j
.text:0040E09D                 mov     [esp+14Ch+FileHandle], ebx
.text:0040E0A4                 lea     edx, [esp+14Ch+var_12C]
.text:0040E0A8                 mov     [esp+14Ch+var_28], edx
.text:0040E0AF                 jmp     loc_40DF73
.text:0040E0B4 ; ---------------------------------------------------------------------------
.text:0040E0B4
.text:0040E0B4 loc_40E0B4:                             ; CODE XREF: sub_40DCE0+3A5↑j
.text:0040E0B4                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040E0BC                 mov     edi, [esp+14Ch+FileHandle]
.text:0040E0C3                 lea     ebx, [esp+14Ch+var_12C]
.text:0040E0C7                 mov     [esp+14Ch+Control], ebx ; char *
.text:0040E0CB                 mov     [esp+14Ch+Str], edi ; int
.text:0040E0CE                 call    sub_415050
.text:0040E0D3                 test    eax, eax
.text:0040E0D5                 mov     ebx, eax
.text:0040E0D7                 jns     short loc_40E087
.text:0040E0D9                 jmp     loc_40DEC6
.text:0040E0D9 ; ---------------------------------------------------------------------------
.text:0040E0DE                 align 10h
.text:0040E0E0
.text:0040E0E0 loc_40E0E0:                             ; CODE XREF: sub_40DCE0+6B↑j
.text:0040E0E0                 cmp     eax, 2
.text:0040E0E3                 jbe     short loc_40E0EF
.text:0040E0E5                 cmp     byte ptr [esi+1], 2Fh ; '/'
.text:0040E0E9                 jz      loc_40E1E0
.text:0040E0EF
.text:0040E0EF loc_40E0EF:                             ; CODE XREF: sub_40DCE0+403↑j
.text:0040E0EF                                         ; sub_40DCE0+504↓j
.text:0040E0EF                 mov     edx, [esp+14Ch+var_28]
.text:0040E0F6                 lea     ebp, [esp+14Ch+var_12C]
.text:0040E0FA                 xor     eax, eax
.text:0040E0FC                 lea     ebx, [esp+14Ch+var_29]
.text:0040E103                 cmp     ebp, edx
.text:0040E105                 jnb     short loc_40E10F
.text:0040E107                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040E10B                 jz      short loc_40E10F
.text:0040E10D                 mov     al, 1
.text:0040E10F
.text:0040E10F loc_40E10F:                             ; CODE XREF: sub_40DCE0+425↑j
.text:0040E10F                                         ; sub_40DCE0+42B↑j
.text:0040E10F                 mov     edx, [esp+14Ch+var_28]
.text:0040E116                 movzx   edi, al
.text:0040E119                 mov     cl, al
.text:0040E11B                 add     edi, 2
.text:0040E11E                 sub     ebx, edx
.text:0040E120                 cmp     ebx, edi
.text:0040E122                 jnb     short loc_40E135
.text:0040E124                 lea     eax, [esp+14Ch+var_12C]
.text:0040E128                 cmp     edx, eax
.text:0040E12A                 jnz     short loc_40E165
.text:0040E12C
.text:0040E12C loc_40E12C:                             ; CODE XREF: sub_40DCE0+4D1↓j
.text:0040E12C                 mov     edx, [esp+14Ch+var_28]
.text:0040E133                 xor     ecx, ecx
.text:0040E135
.text:0040E135 loc_40E135:                             ; CODE XREF: sub_40DCE0+442↑j
.text:0040E135                 test    cl, cl
.text:0040E137                 jz      short loc_40E14D
.text:0040E139                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040E13C                 mov     ecx, [esp+14Ch+var_28]
.text:0040E143                 inc     ecx
.text:0040E144                 mov     [esp+14Ch+var_28], ecx
.text:0040E14B                 mov     edx, ecx
.text:0040E14D
.text:0040E14D loc_40E14D:                             ; CODE XREF: sub_40DCE0+457↑j
.text:0040E14D                 mov     [esp+14Ch+MaxCount], 1
.text:0040E155                 lea     ebp, [esi+1]
.text:0040E158                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040E160                 jmp     loc_40DE3C
.text:0040E165 ; ---------------------------------------------------------------------------
.text:0040E165
.text:0040E165 loc_40E165:                             ; CODE XREF: sub_40DCE0+44A↑j
.text:0040E165                 mov     byte ptr [edx], 0
.text:0040E168                 mov     ebx, [esp+14Ch+FileHandle]
.text:0040E16F                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040E177                 mov     [esp+14Ch+Control], eax ; char *
.text:0040E17B                 mov     [esp+14Ch+Str], ebx ; int
.text:0040E17E                 call    sub_415050
.text:0040E183                 test    eax, eax
.text:0040E185                 mov     ebx, eax
.text:0040E187                 js      short loc_40E1B6
.text:0040E189
.text:0040E189 loc_40E189:                             ; CODE XREF: sub_40DCE0+4F9↓j
.text:0040E189                 mov     eax, [esp+14Ch+FileHandle]
.text:0040E190                 cmp     eax, 0FFD19553h
.text:0040E195                 jz      short loc_40E19F
.text:0040E197                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040E19A                 call    _close
.text:0040E19F
.text:0040E19F loc_40E19F:                             ; CODE XREF: sub_40DCE0+4B5↑j
.text:0040E19F                 mov     [esp+14Ch+FileHandle], ebx
.text:0040E1A6                 lea     ebp, [esp+14Ch+var_12C]
.text:0040E1AA                 mov     [esp+14Ch+var_28], ebp
.text:0040E1B1                 jmp     loc_40E12C
.text:0040E1B6 ; ---------------------------------------------------------------------------
.text:0040E1B6
.text:0040E1B6 loc_40E1B6:                             ; CODE XREF: sub_40DCE0+4A7↑j
.text:0040E1B6                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040E1BE                 mov     edx, [esp+14Ch+FileHandle]
.text:0040E1C5                 lea     eax, [esp+14Ch+var_12C]
.text:0040E1C9                 mov     [esp+14Ch+Control], eax ; char *
.text:0040E1CD                 mov     [esp+14Ch+Str], edx ; int
.text:0040E1D0                 call    sub_415050
.text:0040E1D5                 test    eax, eax
.text:0040E1D7                 mov     ebx, eax
.text:0040E1D9                 jns     short loc_40E189
.text:0040E1DB                 jmp     loc_40DEC6
.text:0040E1E0 ; ---------------------------------------------------------------------------
.text:0040E1E0
.text:0040E1E0 loc_40E1E0:                             ; CODE XREF: sub_40DCE0+409↑j
.text:0040E1E0                 cmp     byte ptr [esi+2], 2Fh ; '/'
.text:0040E1E4                 jz      loc_40E0EF
.text:0040E1EA                 mov     [esp+14Ch+Control], offset Control ; "/"
.text:0040E1F2                 lea     ebx, [esi+3]
.text:0040E1F5                 mov     [esp+14Ch+Str], ebx ; Str
.text:0040E1F8                 lea     ebx, [esp+14Ch+var_29]
.text:0040E1FF                 call    strcspn
.text:0040E204                 mov     edx, [esp+14Ch+var_28]
.text:0040E20B                 lea     ecx, [esp+14Ch+var_12C]
.text:0040E20F                 lea     ebp, [eax+1]
.text:0040E212                 lea     edi, [eax+3]
.text:0040E215                 xor     eax, eax
.text:0040E217                 cmp     ecx, edx
.text:0040E219                 jnb     short loc_40E223
.text:0040E21B                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:0040E21F                 jz      short loc_40E223
.text:0040E221                 mov     al, 1
.text:0040E223
.text:0040E223 loc_40E223:                             ; CODE XREF: sub_40DCE0+539↑j
.text:0040E223                                         ; sub_40DCE0+53F↑j
.text:0040E223                 lea     edx, [edi+1]
.text:0040E226                 mov     cl, al
.text:0040E228                 cmp     edx, 103h
.text:0040E22E                 ja      loc_40DEF9
.text:0040E234                 mov     edx, [esp+14Ch+var_28]
.text:0040E23B                 movzx   eax, al
.text:0040E23E                 lea     eax, [edi+eax+1]
.text:0040E242                 sub     ebx, edx
.text:0040E244                 cmp     ebx, eax
.text:0040E246                 jnb     short loc_40E259
.text:0040E248                 lea     eax, [esp+14Ch+var_12C]
.text:0040E24C                 cmp     edx, eax
.text:0040E24E                 jnz     short loc_40E2C0
.text:0040E250
.text:0040E250 loc_40E250:                             ; CODE XREF: sub_40DCE0+62C↓j
.text:0040E250                 mov     edx, [esp+14Ch+var_28]
.text:0040E257                 xor     ecx, ecx
.text:0040E259
.text:0040E259 loc_40E259:                             ; CODE XREF: sub_40DCE0+566↑j
.text:0040E259                 test    cl, cl
.text:0040E25B                 jz      short loc_40E271
.text:0040E25D                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040E260                 mov     ecx, [esp+14Ch+var_28]
.text:0040E267                 inc     ecx
.text:0040E268                 mov     [esp+14Ch+var_28], ecx
.text:0040E26F                 mov     edx, ecx
.text:0040E271
.text:0040E271 loc_40E271:                             ; CODE XREF: sub_40DCE0+57B↑j
.text:0040E271                 mov     [esp+14Ch+MaxCount], edi
.text:0040E275                 lea     edi, [ebp+esi+0]
.text:0040E279                 lea     ebp, [edi+2]
.text:0040E27C                 mov     [esp+14Ch+Control], esi
.text:0040E280                 mov     [esp+14Ch+Str], edx
.text:0040E283                 call    sub_419D20
.text:0040E288                 mov     [esp+14Ch+var_28], eax
.text:0040E28F                 movzx   eax, byte ptr [edi+2]
.text:0040E293                 cmp     al, 2Fh ; '/'
.text:0040E295                 jz      loc_40DD60
.text:0040E29B                 test    al, al
.text:0040E29D                 jz      loc_40DD60
.text:0040E2A3                 mov     [esp+14Ch+MaxCount], 0E1h ; 'á'
.text:0040E2AB                 mov     [esp+14Ch+Control], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/chdir-lon"...
.text:0040E2B3                 mov     [esp+14Ch+Str], offset aDD0 ; "*d == '/' || *d == '\\0'"
.text:0040E2BA                 jmp     loc_40DF1D
.text:0040E2BA ; ---------------------------------------------------------------------------
.text:0040E2BF                 align 10h
.text:0040E2C0
.text:0040E2C0 loc_40E2C0:                             ; CODE XREF: sub_40DCE0+56E↑j
.text:0040E2C0                 mov     byte ptr [edx], 0
.text:0040E2C3                 mov     ecx, [esp+14Ch+FileHandle]
.text:0040E2CA                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:0040E2D2                 mov     [esp+14Ch+Control], eax ; char *
.text:0040E2D6                 mov     [esp+14Ch+Str], ecx ; int
.text:0040E2D9                 call    sub_415050
.text:0040E2DE                 test    eax, eax
.text:0040E2E0                 mov     ebx, eax
.text:0040E2E2                 js      short loc_40E311
.text:0040E2E4
.text:0040E2E4 loc_40E2E4:                             ; CODE XREF: sub_40DCE0+654↓j
.text:0040E2E4                 mov     eax, [esp+14Ch+FileHandle]
.text:0040E2EB                 cmp     eax, 0FFD19553h
.text:0040E2F0                 jz      short loc_40E2FA
.text:0040E2F2                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:0040E2F5                 call    _close
.text:0040E2FA
.text:0040E2FA loc_40E2FA:                             ; CODE XREF: sub_40DCE0+610↑j
.text:0040E2FA                 mov     [esp+14Ch+FileHandle], ebx
.text:0040E301                 lea     edx, [esp+14Ch+var_12C]
.text:0040E305                 mov     [esp+14Ch+var_28], edx
.text:0040E30C                 jmp     loc_40E250
.text:0040E311 ; ---------------------------------------------------------------------------
.text:0040E311
.text:0040E311 loc_40E311:                             ; CODE XREF: sub_40DCE0+602↑j
.text:0040E311                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:0040E319                 mov     ebx, [esp+14Ch+FileHandle]
.text:0040E320                 lea     eax, [esp+14Ch+var_12C]
.text:0040E324                 mov     [esp+14Ch+Control], eax ; char *
.text:0040E328                 mov     [esp+14Ch+Str], ebx ; int
.text:0040E32B                 call    sub_415050
.text:0040E330                 test    eax, eax
.text:0040E332                 mov     ebx, eax
.text:0040E334                 jns     short loc_40E2E4
.text:0040E336                 jmp     loc_40DEC6
.text:0040E336 ; ---------------------------------------------------------------------------
.text:0040E33B                 align 10h
.text:0040E340
.text:0040E340 loc_40E340:                             ; CODE XREF: sub_40DCE0+62↑j
.text:0040E340                 mov     [esp+14Ch+MaxCount], 0D0h ; 'Ð'
.text:0040E348                 mov     [esp+14Ch+Control], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/chdir-lon"...
.text:0040E350                 mov     [esp+14Ch+Str], offset a0Len ; "0 < len"
.text:0040E357                 jmp     loc_40DF1D
.text:0040E35C ; ---------------------------------------------------------------------------
.text:0040E35C
.text:0040E35C loc_40E35C:                             ; CODE XREF: sub_40DCE0+202↑j
.text:0040E35C                                         ; sub_40DCE0+2BF↑j
.text:0040E35C                 call    abort
.text:0040E35C sub_40DCE0      endp
.text:0040E35C
.text:0040E35C ; ---------------------------------------------------------------------------
.text:0040E361                 align 10h
.text:0040E370
.text:0040E370 ; =============== S U B R O U T I N E =======================================
.text:0040E370
.text:0040E370
.text:0040E370 sub_40E370      proc near               ; CODE XREF: sub_40C050+18↑p
.text:0040E370
.text:0040E370 DstBuf          = dword ptr -0Ch
.text:0040E370 SizeInBytes     = dword ptr -8
.text:0040E370 var_4           = dword ptr -4
.text:0040E370
.text:0040E370                 sub     esp, 0Ch
.text:0040E373                 mov     [esp+0Ch+var_4], ebx
.text:0040E377                 mov     [esp+0Ch+SizeInBytes], 0 ; SizeInBytes
.text:0040E37F                 mov     [esp+0Ch+DstBuf], 0 ; DstBuf
.text:0040E386                 call    j__getcwd
.text:0040E38B                 test    eax, eax
.text:0040E38D                 mov     ebx, eax
.text:0040E38F                 jz      short loc_40E39B
.text:0040E391
.text:0040E391 loc_40E391:                             ; CODE XREF: sub_40E370+33↓j
.text:0040E391                 mov     eax, ebx
.text:0040E393                 mov     ebx, [esp+0Ch+var_4]
.text:0040E397                 add     esp, 0Ch
.text:0040E39A                 retn
.text:0040E39B ; ---------------------------------------------------------------------------
.text:0040E39B
.text:0040E39B loc_40E39B:                             ; CODE XREF: sub_40E370+1F↑j
.text:0040E39B                 call    _errno
.text:0040E3A0                 cmp     dword ptr [eax], 0Ch
.text:0040E3A3                 jnz     short loc_40E391
.text:0040E3A5                 call    sub_40A2A0
.text:0040E3A5 sub_40E370      endp
.text:0040E3A5
.text:0040E3A5 ; ---------------------------------------------------------------------------
.text:0040E3AA                 align 10h
.text:0040E3B0
.text:0040E3B0 ; =============== S U B R O U T I N E =======================================
.text:0040E3B0
.text:0040E3B0
.text:0040E3B0 sub_40E3B0      proc near               ; CODE XREF: sub_40E400+3A↓j
.text:0040E3B0                                         ; sub_4115E0+46B↓p ...
.text:0040E3B0
.text:0040E3B0 arg_0           = dword ptr  4
.text:0040E3B0 arg_4           = dword ptr  8
.text:0040E3B0 arg_8           = dword ptr  0Ch
.text:0040E3B0
.text:0040E3B0                 mov     edx, [esp+arg_8]
.text:0040E3B4                 mov     ecx, [esp+arg_4]
.text:0040E3B8                 mov     eax, [esp+arg_0]
.text:0040E3BC                 mov     [ecx+1], dl
.text:0040E3BF                 sar     edx, 8
.text:0040E3C2                 mov     [ecx], al
.text:0040E3C4                 mov     [ecx+2], dl
.text:0040E3C7                 retn
.text:0040E3C7 sub_40E3B0      endp
.text:0040E3C7
.text:0040E3C7 ; ---------------------------------------------------------------------------
.text:0040E3C8                 align 10h
.text:0040E3D0
.text:0040E3D0 ; =============== S U B R O U T I N E =======================================
.text:0040E3D0
.text:0040E3D0
.text:0040E3D0 sub_40E3D0      proc near               ; CODE XREF: sub_40E440+3F↓j
.text:0040E3D0                                         ; sub_4115E0+313B↓p
.text:0040E3D0
.text:0040E3D0 arg_0           = dword ptr  4
.text:0040E3D0 arg_4           = dword ptr  8
.text:0040E3D0 arg_8           = dword ptr  0Ch
.text:0040E3D0 arg_C           = dword ptr  10h
.text:0040E3D0
.text:0040E3D0                 push    ebx
.text:0040E3D1                 mov     edx, [esp+4+arg_8]
.text:0040E3D5                 mov     ebx, [esp+4+arg_C]
.text:0040E3D9                 mov     ecx, [esp+4+arg_4]
.text:0040E3DD                 mov     eax, [esp+4+arg_0]
.text:0040E3E1                 mov     [ecx+1], dl
.text:0040E3E4                 sar     edx, 8
.text:0040E3E7                 mov     [ecx+3], bl
.text:0040E3EA                 sar     ebx, 8
.text:0040E3ED                 mov     [ecx], al
.text:0040E3EF                 mov     [ecx+2], dl
.text:0040E3F2                 mov     [ecx+4], bl
.text:0040E3F5                 pop     ebx
.text:0040E3F6                 retn
.text:0040E3F6 sub_40E3D0      endp
.text:0040E3F6
.text:0040E3F6 ; ---------------------------------------------------------------------------
.text:0040E3F7                 align 10h
.text:0040E400
.text:0040E400 ; =============== S U B R O U T I N E =======================================
.text:0040E400
.text:0040E400
.text:0040E400 sub_40E400      proc near               ; CODE XREF: sub_4115E0+967↓p
.text:0040E400                                         ; sub_4115E0+137C↓p ...
.text:0040E400
.text:0040E400 arg_0           = dword ptr  4
.text:0040E400 arg_4           = dword ptr  8
.text:0040E400 arg_8           = dword ptr  0Ch
.text:0040E400 arg_C           = dword ptr  10h
.text:0040E400
.text:0040E400                 push    edi
.text:0040E401                 push    esi
.text:0040E402                 push    ebx
.text:0040E403                 mov     edx, [esp+0Ch+arg_C]
.text:0040E407                 mov     ebx, [esp+0Ch+arg_4]
.text:0040E40B                 mov     edi, [esp+0Ch+arg_0]
.text:0040E40F                 mov     esi, [esp+0Ch+arg_8]
.text:0040E413                 lea     ecx, [edx+3]
.text:0040E416                 cmp     edx, ebx
.text:0040E418                 jz      short loc_40E42B
.text:0040E41A                 lea     esi, [esi+0]
.text:0040E420
.text:0040E420 loc_40E420:                             ; CODE XREF: sub_40E400+29↓j
.text:0040E420                 dec     edx
.text:0040E421                 dec     ecx
.text:0040E422                 cmp     edx, ebx
.text:0040E424                 movzx   eax, byte ptr [edx]
.text:0040E427                 mov     [ecx], al
.text:0040E429                 jnz     short loc_40E420
.text:0040E42B
.text:0040E42B loc_40E42B:                             ; CODE XREF: sub_40E400+18↑j
.text:0040E42B                 mov     [esp+0Ch+arg_8], esi
.text:0040E42F                 mov     [esp+0Ch+arg_0], edi
.text:0040E433                 mov     [esp+0Ch+arg_4], ebx
.text:0040E437                 pop     ebx
.text:0040E438                 pop     esi
.text:0040E439                 pop     edi
.text:0040E43A                 jmp     sub_40E3B0
.text:0040E43A sub_40E400      endp
.text:0040E43A
.text:0040E43A ; ---------------------------------------------------------------------------
.text:0040E43F                 align 10h
.text:0040E440
.text:0040E440 ; =============== S U B R O U T I N E =======================================
.text:0040E440
.text:0040E440
.text:0040E440 sub_40E440      proc near               ; CODE XREF: sub_4115E0+30CC↓p
.text:0040E440                                         ; sub_4115E0+30F8↓p ...
.text:0040E440
.text:0040E440 arg_0           = dword ptr  4
.text:0040E440 arg_4           = dword ptr  8
.text:0040E440 arg_8           = dword ptr  0Ch
.text:0040E440 arg_C           = dword ptr  10h
.text:0040E440 arg_10          = dword ptr  14h
.text:0040E440
.text:0040E440                 push    ebp
.text:0040E441                 push    edi
.text:0040E442                 push    esi
.text:0040E443                 push    ebx
.text:0040E444                 mov     edx, [esp+10h+arg_10]
.text:0040E448                 mov     ebx, [esp+10h+arg_4]
.text:0040E44C                 mov     ebp, [esp+10h+arg_0]
.text:0040E450                 mov     edi, [esp+10h+arg_8]
.text:0040E454                 lea     ecx, [edx+5]
.text:0040E457                 cmp     edx, ebx
.text:0040E459                 mov     esi, [esp+10h+arg_C]
.text:0040E45D                 jz      short loc_40E46B
.text:0040E45F                 nop
.text:0040E460
.text:0040E460 loc_40E460:                             ; CODE XREF: sub_40E440+29↓j
.text:0040E460                 dec     edx
.text:0040E461                 dec     ecx
.text:0040E462                 cmp     edx, ebx
.text:0040E464                 movzx   eax, byte ptr [edx]
.text:0040E467                 mov     [ecx], al
.text:0040E469                 jnz     short loc_40E460
.text:0040E46B
.text:0040E46B loc_40E46B:                             ; CODE XREF: sub_40E440+1D↑j
.text:0040E46B                 mov     [esp+10h+arg_C], esi
.text:0040E46F                 mov     [esp+10h+arg_8], edi
.text:0040E473                 mov     [esp+10h+arg_0], ebp
.text:0040E477                 mov     [esp+10h+arg_4], ebx
.text:0040E47B                 pop     ebx
.text:0040E47C                 pop     esi
.text:0040E47D                 pop     edi
.text:0040E47E                 pop     ebp
.text:0040E47F                 jmp     sub_40E3D0
.text:0040E47F sub_40E440      endp
.text:0040E47F
.text:0040E47F ; ---------------------------------------------------------------------------
.text:0040E484                 align 10h
.text:0040E490
.text:0040E490 ; =============== S U B R O U T I N E =======================================
.text:0040E490
.text:0040E490
.text:0040E490 sub_40E490      proc near               ; CODE XREF: sub_4115E0+5C6↓p
.text:0040E490
.text:0040E490 arg_0           = dword ptr  4
.text:0040E490 arg_4           = dword ptr  8
.text:0040E490 arg_8           = dword ptr  0Ch
.text:0040E490
.text:0040E490                 push    ebx
.text:0040E491                 mov     edx, [esp+4+arg_4]
.text:0040E495                 xor     ebx, ebx
.text:0040E497                 mov     ecx, [esp+4+arg_8]
.text:0040E49B                 sub     edx, 2
.text:0040E49E                 cmp     edx, [esp+4+arg_0]
.text:0040E4A2                 jbe     short loc_40E4AA
.text:0040E4A4                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:0040E4A8                 jz      short loc_40E4E2
.text:0040E4AA
.text:0040E4AA loc_40E4AA:                             ; CODE XREF: sub_40E490+12↑j
.text:0040E4AA                                         ; sub_40E490+54↓j
.text:0040E4AA                 movzx   edx, byte ptr [edx]
.text:0040E4AD                 xor     eax, eax
.text:0040E4AF                 cmp     dl, 28h ; '('
.text:0040E4B2                 jz      short loc_40E4D7
.text:0040E4B4
.text:0040E4B4 loc_40E4B4:                             ; CODE XREF: sub_40E490+50↓j
.text:0040E4B4                 cmp     dl, 7Ch ; '|'
.text:0040E4B7                 jz      short loc_40E4C0
.text:0040E4B9
.text:0040E4B9 loc_40E4B9:                             ; CODE XREF: sub_40E490+3D↓j
.text:0040E4B9                                         ; sub_40E490+45↓j
.text:0040E4B9                 pop     ebx
.text:0040E4BA                 retn
.text:0040E4BA ; ---------------------------------------------------------------------------
.text:0040E4BB                 align 10h
.text:0040E4C0
.text:0040E4C0 loc_40E4C0:                             ; CODE XREF: sub_40E490+27↑j
.text:0040E4C0                 and     ecx, 0FFFF8000h
.text:0040E4C6                 test    cx, cx
.text:0040E4C9                 jnz     short loc_40E4D0
.text:0040E4CB                 test    bl, bl
.text:0040E4CD                 jz      short loc_40E4B9
.text:0040E4CF                 nop
.text:0040E4D0
.text:0040E4D0 loc_40E4D0:                             ; CODE XREF: sub_40E490+39↑j
.text:0040E4D0                                         ; sub_40E490+4A↓j ...
.text:0040E4D0                 mov     eax, 1
.text:0040E4D5                 jmp     short loc_40E4B9
.text:0040E4D7 ; ---------------------------------------------------------------------------
.text:0040E4D7
.text:0040E4D7 loc_40E4D7:                             ; CODE XREF: sub_40E490+22↑j
.text:0040E4D7                 test    ch, 20h
.text:0040E4DA                 jnz     short loc_40E4D0
.text:0040E4DC                 test    bl, bl
.text:0040E4DE                 jnz     short loc_40E4D0
.text:0040E4E0                 jmp     short loc_40E4B4
.text:0040E4E2 ; ---------------------------------------------------------------------------
.text:0040E4E2
.text:0040E4E2 loc_40E4E2:                             ; CODE XREF: sub_40E490+18↑j
.text:0040E4E2                 mov     bl, 1
.text:0040E4E4                 jmp     short loc_40E4AA
.text:0040E4E4 sub_40E490      endp
.text:0040E4E4
.text:0040E4E4 ; ---------------------------------------------------------------------------
.text:0040E4E6                 align 10h
.text:0040E4F0
.text:0040E4F0 ; =============== S U B R O U T I N E =======================================
.text:0040E4F0
.text:0040E4F0
.text:0040E4F0 sub_40E4F0      proc near               ; CODE XREF: sub_4115E0+B9A↓p
.text:0040E4F0
.text:0040E4F0 var_9           = byte ptr -9
.text:0040E4F0 var_8           = dword ptr -8
.text:0040E4F0 var_4           = dword ptr -4
.text:0040E4F0 arg_0           = dword ptr  4
.text:0040E4F0 arg_4           = dword ptr  8
.text:0040E4F0 arg_8           = dword ptr  0Ch
.text:0040E4F0
.text:0040E4F0                 sub     esp, 0Ch
.text:0040E4F3                 mov     edx, [esp+0Ch+arg_8]
.text:0040E4F7                 mov     [esp+0Ch+var_4], esi
.text:0040E4FB                 mov     esi, [esp+0Ch+arg_0]
.text:0040E4FF                 mov     [esp+0Ch+var_8], ebx
.text:0040E503                 lea     eax, [esi+1]
.text:0040E506                 movzx   ebx, byte ptr [esi]
.text:0040E509                 cmp     bl, 5Ch ; '\'
.text:0040E50C                 setz    [esp+0Ch+var_9]
.text:0040E511                 cmp     eax, [esp+0Ch+arg_4]
.text:0040E515                 sbb     ecx, ecx
.text:0040E517                 and     ecx, eax
.text:0040E519                 xor     eax, eax
.text:0040E51B                 test    dh, 20h
.text:0040E51E                 jz      short loc_40E558
.text:0040E520                 cmp     bl, 29h ; ')'
.text:0040E523
.text:0040E523 loc_40E523:                             ; CODE XREF: sub_40E4F0+76↓j
.text:0040E523                 jz      short loc_40E541
.text:0040E525
.text:0040E525 loc_40E525:                             ; CODE XREF: sub_40E4F0+6D↓j
.text:0040E525                                         ; sub_40E4F0+71↓j
.text:0040E525                 and     edx, 0FFFF8000h
.text:0040E52B                 test    dx, dx
.text:0040E52E                 jz      short loc_40E548
.text:0040E530                 cmp     byte ptr [esi], 7Ch ; '|'
.text:0040E533
.text:0040E533 loc_40E533:                             ; CODE XREF: sub_40E4F0+66↓j
.text:0040E533                 jz      short loc_40E541
.text:0040E535
.text:0040E535 loc_40E535:                             ; CODE XREF: sub_40E4F0+56↓j
.text:0040E535                                         ; sub_40E4F0+5D↓j ...
.text:0040E535                 mov     ebx, [esp+0Ch+var_8]
.text:0040E539                 mov     esi, [esp+0Ch+var_4]
.text:0040E53D                 add     esp, 0Ch
.text:0040E540                 retn
.text:0040E541 ; ---------------------------------------------------------------------------
.text:0040E541
.text:0040E541 loc_40E541:                             ; CODE XREF: sub_40E4F0:loc_40E523↑j
.text:0040E541                                         ; sub_40E4F0:loc_40E533↑j
.text:0040E541                 mov     eax, 1
.text:0040E546                 jmp     short loc_40E535
.text:0040E548 ; ---------------------------------------------------------------------------
.text:0040E548
.text:0040E548 loc_40E548:                             ; CODE XREF: sub_40E4F0+3E↑j
.text:0040E548                 cmp     [esp+0Ch+var_9], 0
.text:0040E54D                 jz      short loc_40E535
.text:0040E54F                 test    ecx, ecx
.text:0040E551                 jz      short loc_40E535
.text:0040E553                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:0040E556                 jmp     short loc_40E533
.text:0040E558 ; ---------------------------------------------------------------------------
.text:0040E558
.text:0040E558 loc_40E558:                             ; CODE XREF: sub_40E4F0+2E↑j
.text:0040E558                 cmp     [esp+0Ch+var_9], 0
.text:0040E55D                 jz      short loc_40E525
.text:0040E55F                 test    ecx, ecx
.text:0040E561                 jz      short loc_40E525
.text:0040E563                 cmp     byte ptr [ecx], 29h ; ')'
.text:0040E566                 jmp     short loc_40E523
.text:0040E566 sub_40E4F0      endp
.text:0040E566
.text:0040E566 ; ---------------------------------------------------------------------------
.text:0040E568                 align 10h
.text:0040E570
.text:0040E570 ; =============== S U B R O U T I N E =======================================
.text:0040E570
.text:0040E570
.text:0040E570 sub_40E570      proc near               ; CODE XREF: sub_4115E0:loc_4136C3↓p
.text:0040E570
.text:0040E570 arg_0           = dword ptr  4
.text:0040E570 arg_4           = dword ptr  8
.text:0040E570 arg_8           = dword ptr  0Ch
.text:0040E570 arg_C           = dword ptr  10h
.text:0040E570 arg_10          = dword ptr  14h
.text:0040E570 arg_14          = dword ptr  18h
.text:0040E570
.text:0040E570                 push    ebp
.text:0040E571                 push    edi
.text:0040E572                 push    esi
.text:0040E573                 push    ebx
.text:0040E574                 mov     ecx, [esp+10h+arg_4]
.text:0040E578                 mov     esi, [esp+10h+arg_0]
.text:0040E57C                 mov     ebx, [esp+10h+arg_C]
.text:0040E580                 mov     edx, [ecx]
.text:0040E582                 cmp     edx, [esp+10h+arg_8]
.text:0040E586                 jz      loc_40E63A
.text:0040E58C                 lea     edi, [edx+1]
.text:0040E58F                 mov     [ecx], edi
.text:0040E591                 xor     ecx, ecx
.text:0040E593                 test    [esp+10h+arg_10], 10000h
.text:0040E59B                 setz    cl
.text:0040E59E                 dec     ecx
.text:0040E59F                 and     ecx, 0Bh
.text:0040E5A2                 test    ebx, ebx
.text:0040E5A4                 jz      loc_40E635
.text:0040E5AA                 movzx   edi, byte ptr [edx]
.text:0040E5AD                 and     esi, 0FFh
.text:0040E5B3                 movsx   esi, byte ptr [esi+ebx]
.text:0040E5B7                 movzx   ebp, byte ptr [edi+ebx]
.text:0040E5BB
.text:0040E5BB loc_40E5BB:                             ; CODE XREF: sub_40E570+C8↓j
.text:0040E5BB                 cmp     esi, ebp
.text:0040E5BD                 mov     edx, esi
.text:0040E5BF                 ja      short loc_40E62E
.text:0040E5C1                 jmp     short loc_40E5D0
.text:0040E5C1 ; ---------------------------------------------------------------------------
.text:0040E5C3                 align 10h
.text:0040E5D0
.text:0040E5D0 loc_40E5D0:                             ; CODE XREF: sub_40E570+51↑j
.text:0040E5D0                                         ; sub_40E570+BC↓j
.text:0040E5D0                 test    ebx, ebx
.text:0040E5D2                 movzx   eax, dl
.text:0040E5D5                 jz      short loc_40E5DE
.text:0040E5D7                 movzx   ecx, dl
.text:0040E5DA                 movzx   eax, byte ptr [ecx+ebx]
.text:0040E5DE
.text:0040E5DE loc_40E5DE:                             ; CODE XREF: sub_40E570+65↑j
.text:0040E5DE                 mov     edi, [esp+10h+arg_14]
.text:0040E5E2                 sar     eax, 3
.text:0040E5E5                 add     edi, eax
.text:0040E5E7                 test    ebx, ebx
.text:0040E5E9                 movzx   eax, dl
.text:0040E5EC                 jz      short loc_40E5F5
.text:0040E5EE                 movzx   esi, dl
.text:0040E5F1                 movzx   eax, byte ptr [esi+ebx]
.text:0040E5F5
.text:0040E5F5 loc_40E5F5:                             ; CODE XREF: sub_40E570+7C↑j
.text:0040E5F5                 mov     esi, [esp+10h+arg_14]
.text:0040E5F9                 sar     eax, 3
.text:0040E5FC                 movzx   ecx, dl
.text:0040E5FF                 add     eax, esi
.text:0040E601                 test    ebx, ebx
.text:0040E603                 movzx   esi, byte ptr [eax]
.text:0040E606                 jz      short loc_40E60F
.text:0040E608                 movzx   eax, dl
.text:0040E60B                 movzx   ecx, byte ptr [eax+ebx]
.text:0040E60F
.text:0040E60F loc_40E60F:                             ; CODE XREF: sub_40E570+96↑j
.text:0040E60F                 mov     eax, ecx
.text:0040E611                 inc     edx
.text:0040E612                 and     eax, 1F8h
.text:0040E617                 sub     ecx, eax
.text:0040E619                 mov     eax, 1
.text:0040E61E                 shl     eax, cl
.text:0040E620                 mov     ecx, eax
.text:0040E622                 mov     eax, esi
.text:0040E624                 or      al, cl
.text:0040E626                 mov     [edi], al
.text:0040E628                 xor     ecx, ecx
.text:0040E62A                 cmp     edx, ebp
.text:0040E62C                 jbe     short loc_40E5D0
.text:0040E62E
.text:0040E62E loc_40E62E:                             ; CODE XREF: sub_40E570+4F↑j
.text:0040E62E                 mov     eax, ecx
.text:0040E630
.text:0040E630 loc_40E630:                             ; CODE XREF: sub_40E570+CF↓j
.text:0040E630                 pop     ebx
.text:0040E631                 pop     esi
.text:0040E632                 pop     edi
.text:0040E633                 pop     ebp
.text:0040E634                 retn
.text:0040E635 ; ---------------------------------------------------------------------------
.text:0040E635
.text:0040E635 loc_40E635:                             ; CODE XREF: sub_40E570+34↑j
.text:0040E635                 movzx   ebp, byte ptr [edx]
.text:0040E638                 jmp     short loc_40E5BB
.text:0040E63A ; ---------------------------------------------------------------------------
.text:0040E63A
.text:0040E63A loc_40E63A:                             ; CODE XREF: sub_40E570+16↑j
.text:0040E63A                 mov     eax, 0Bh
.text:0040E63F                 jmp     short loc_40E630
.text:0040E63F sub_40E570      endp
.text:0040E63F
.text:0040E63F ; ---------------------------------------------------------------------------
.text:0040E641                 db 0EBh, 0Dh, 90h
.text:0040E644                 align 10h
.text:0040E650 jpt_40E947      dd offset loc_40EEFB    ; DATA XREF: sub_40E6D0:loc_40E940↓r
.text:0040E650                                         ; sub_40E6D0+BEF↓r ...
.text:0040E650                 dd offset loc_40EF13    ; jump table for switch statement
.text:0040E650                 dd offset loc_40EF18
.text:0040E650                 dd offset loc_40F013
.text:0040E650                 dd offset loc_410876
.text:0040E650                 dd offset loc_410780
.text:0040E668 jpt_40F0D4      dd offset loc_410694    ; DATA XREF: sub_40E6D0+9FD↓r
.text:0040E668                 dd offset loc_410290    ; jump table for switch statement
.text:0040E670                 dd offset loc_4100F3
.text:0040E674                 dd offset loc_4100A9
.text:0040E678                 dd offset loc_41004D
.text:0040E67C                 dd offset loc_410010
.text:0040E680                 dd offset loc_40FFF6
.text:0040E684                 dd offset loc_40F66A
.text:0040E688                 dd offset loc_40FFF1
.text:0040E68C                 dd offset loc_40FFEC
.text:0040E690                 dd offset loc_40FE71
.text:0040E694                 dd offset loc_40FC75
.text:0040E698                 dd offset loc_40FBDC
.text:0040E69C                 dd offset loc_40FA56
.text:0040E6A0                 dd offset loc_40F8D0
.text:0040E6A4                 dd offset loc_40F688
.text:0040E6A8                 dd offset loc_40F63F
.text:0040E6AC                 dd offset loc_40F5E7
.text:0040E6B0                 dd offset loc_40F537
.text:0040E6B4                 dd offset loc_40F486
.text:0040E6B8                 dd offset loc_40F39A
.text:0040E6BC                 dd offset loc_40F2C8
.text:0040E6C0                 dd offset loc_40F1C2
.text:0040E6C4                 dd offset loc_40F0D6
.text:0040E6C8                 align 10h
.text:0040E6D0
.text:0040E6D0 ; =============== S U B R O U T I N E =======================================
.text:0040E6D0
.text:0040E6D0
.text:0040E6D0 sub_40E6D0      proc near               ; CODE XREF: .text:0041142E↓p
.text:0040E6D0                                         ; .text:00411440↓j ...
.text:0040E6D0
.text:0040E6D0 Size            = dword ptr -0BCh
.text:0040E6D0 var_B8          = dword ptr -0B8h
.text:0040E6D0 var_B4          = dword ptr -0B4h
.text:0040E6D0 var_B0          = dword ptr -0B0h
.text:0040E6D0 var_A5          = byte ptr -0A5h
.text:0040E6D0 var_A4          = dword ptr -0A4h
.text:0040E6D0 var_A0          = dword ptr -0A0h
.text:0040E6D0 var_9C          = dword ptr -9Ch
.text:0040E6D0 var_97          = byte ptr -97h
.text:0040E6D0 var_96          = byte ptr -96h
.text:0040E6D0 var_95          = byte ptr -95h
.text:0040E6D0 var_94          = dword ptr -94h
.text:0040E6D0 var_90          = dword ptr -90h
.text:0040E6D0 var_8C          = dword ptr -8Ch
.text:0040E6D0 var_88          = dword ptr -88h
.text:0040E6D0 var_84          = dword ptr -84h
.text:0040E6D0 var_80          = dword ptr -80h
.text:0040E6D0 var_7C          = dword ptr -7Ch
.text:0040E6D0 var_78          = dword ptr -78h
.text:0040E6D0 var_74          = dword ptr -74h
.text:0040E6D0 var_70          = dword ptr -70h
.text:0040E6D0 var_6C          = dword ptr -6Ch
.text:0040E6D0 var_68          = dword ptr -68h
.text:0040E6D0 var_64          = dword ptr -64h
.text:0040E6D0 var_60          = dword ptr -60h
.text:0040E6D0 var_5C          = dword ptr -5Ch
.text:0040E6D0 var_58          = dword ptr -58h
.text:0040E6D0 var_54          = dword ptr -54h
.text:0040E6D0 var_50          = dword ptr -50h
.text:0040E6D0 var_4C          = dword ptr -4Ch
.text:0040E6D0 var_48          = dword ptr -48h
.text:0040E6D0 var_44          = dword ptr -44h
.text:0040E6D0 var_40          = dword ptr -40h
.text:0040E6D0 var_3C          = dword ptr -3Ch
.text:0040E6D0 var_38          = dword ptr -38h
.text:0040E6D0 var_34          = dword ptr -34h
.text:0040E6D0 var_30          = dword ptr -30h
.text:0040E6D0 Src             = dword ptr -2Ch
.text:0040E6D0 var_28          = dword ptr -28h
.text:0040E6D0 var_24          = dword ptr -24h
.text:0040E6D0 arg_0           = dword ptr  4
.text:0040E6D0 arg_4           = dword ptr  8
.text:0040E6D0 arg_8           = dword ptr  0Ch
.text:0040E6D0 arg_C           = dword ptr  10h
.text:0040E6D0 arg_10          = dword ptr  14h
.text:0040E6D0 arg_14          = dword ptr  18h
.text:0040E6D0 arg_18          = dword ptr  1Ch
.text:0040E6D0 arg_1C          = dword ptr  20h
.text:0040E6D0
.text:0040E6D0                 push    ebp
.text:0040E6D1                 push    edi
.text:0040E6D2                 push    esi
.text:0040E6D3                 push    ebx
.text:0040E6D4                 sub     esp, 0ACh
.text:0040E6DA                 mov     ebx, [esp+0BCh+arg_0]
.text:0040E6E1                 mov     [esp+0BCh+var_54], 0
.text:0040E6E9                 mov     ecx, [esp+0BCh+arg_0]
.text:0040E6F0                 mov     esi, [esp+0BCh+arg_1C]
.text:0040E6F7                 mov     [esp+0BCh+var_60], 101h
.text:0040E6FF                 mov     ebp, [ebx+8]
.text:0040E702                 mov     edi, [ecx]
.text:0040E704                 mov     [esp+0BCh+var_64], 100h
.text:0040E70C                 mov     eax, [ebx+18h]
.text:0040E70F                 mov     edx, [ebx+14h]
.text:0040E712                 mov     [esp+0BCh+var_4C], edi
.text:0040E716                 inc     eax
.text:0040E717                 add     edi, ebp
.text:0040E719                 mov     [esp+0BCh+var_58], edx
.text:0040E71D                 mov     [esp+0BCh+var_50], edi
.text:0040E721                 mov     [esp+0BCh+var_5C], eax
.text:0040E725                 mov     [esp+0BCh+var_7C], 0
.text:0040E72D                 mov     [esp+0BCh+var_88], 0
.text:0040E735                 mov     [esp+0BCh+var_8C], 0
.text:0040E73D                 mov     [esp+0BCh+Size], 14h ; Size
.text:0040E744                 call    malloc
.text:0040E749                 mov     [esp+0BCh+Src], eax
.text:0040E750                 mov     edx, eax
.text:0040E752                 test    edx, edx
.text:0040E754                 mov     eax, 0FFFFFFFEh
.text:0040E759                 jz      loc_40EE27
.text:0040E75F                 mov     edx, [esp+0BCh+arg_0]
.text:0040E766                 xor     edi, edi
.text:0040E768                 mov     ebp, 5
.text:0040E76D                 mov     [esp+0BCh+var_28], ebp
.text:0040E774                 mov     [esp+0BCh+var_24], edi
.text:0040E77B                 mov     ebx, [edx+18h]
.text:0040E77E                 test    ebx, ebx
.text:0040E780                 jnz     loc_410967
.text:0040E786                 mov     [esp+0BCh+var_90], 0
.text:0040E78E                 mov     [esp+0BCh+var_84], 0
.text:0040E796                 mov     [esp+0BCh+var_80], 0
.text:0040E79E                 mov     [esp+0BCh+var_74], 0
.text:0040E7A6                 mov     [esp+0BCh+var_70], 0
.text:0040E7AE                 mov     [esp+0BCh+var_6C], 0
.text:0040E7B6                 mov     [esp+0BCh+var_68], 0
.text:0040E7BE                 mov     [esp+0BCh+var_94], 0
.text:0040E7C6                 mov     [esp+0BCh+var_78], 0
.text:0040E7CE
.text:0040E7CE loc_40E7CE:                             ; CODE XREF: sub_40E6D0+236C↓j
.text:0040E7CE                 mov     eax, [esp+0BCh+arg_14]
.text:0040E7D5                 test    eax, eax
.text:0040E7D7                 js      loc_40EEC5
.text:0040E7DD                 mov     ebp, [esp+0BCh+arg_8]
.text:0040E7E4                 mov     ecx, [esp+0BCh+arg_10]
.text:0040E7EB                 add     ebp, ecx
.text:0040E7ED                 cmp     [esp+0BCh+arg_14], ebp
.text:0040E7F4                 jg      loc_40EEC5
.text:0040E7FA                 mov     ebp, 1
.text:0040E7FF                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040E803                 jnb     short loc_40E848
.text:0040E805                 mov     eax, [esp+0BCh+var_78]
.text:0040E809                 add     eax, 4
.text:0040E80C
.text:0040E80C loc_40E80C:                             ; CODE XREF: sub_40E6D0+176↓j
.text:0040E80C                 mov     ecx, [esp+0BCh+var_74]
.text:0040E810                 mov     ebx, [esp+0BCh+var_70]
.text:0040E814                 mov     edx, [esp+0BCh+var_6C]
.text:0040E818                 mov     dword ptr [ecx+ebp*4], offset unk_421390
.text:0040E81F                 mov     edi, [esp+0BCh+var_68]
.text:0040E823                 mov     dword ptr [ebx+ebp*4], offset unk_421390
.text:0040E82A                 mov     dword ptr [edx+ebp*4], offset unk_421390
.text:0040E831                 mov     dword ptr [edi+ebp*4], offset unk_421390
.text:0040E838                 inc     ebp
.text:0040E839                 or      dword ptr [eax], 3
.text:0040E83C                 and     byte ptr [eax], 0E3h
.text:0040E83F                 add     eax, 4
.text:0040E842                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040E846                 jb      short loc_40E80C
.text:0040E848
.text:0040E848 loc_40E848:                             ; CODE XREF: sub_40E6D0+133↑j
.text:0040E848                 mov     eax, [esp+0BCh+arg_10]
.text:0040E84F                 test    eax, eax
.text:0040E851                 jnz     short loc_40E88C
.text:0040E853                 mov     ebp, [esp+0BCh+arg_4]
.text:0040E85A                 test    ebp, ebp
.text:0040E85C                 jz      short loc_40E88C
.text:0040E85E                 mov     ebx, [esp+0BCh+arg_4]
.text:0040E865                 xor     edx, edx
.text:0040E867                 xor     edi, edi
.text:0040E869                 mov     [esp+0BCh+arg_4], edx
.text:0040E870                 mov     ecx, [esp+0BCh+arg_8]
.text:0040E877                 mov     [esp+0BCh+arg_8], edi
.text:0040E87E                 mov     [esp+0BCh+arg_C], ebx
.text:0040E885                 mov     [esp+0BCh+arg_10], ecx
.text:0040E88C
.text:0040E88C loc_40E88C:                             ; CODE XREF: sub_40E6D0+181↑j
.text:0040E88C                                         ; sub_40E6D0+18C↑j
.text:0040E88C                 mov     ecx, [esp+0BCh+arg_4]
.text:0040E893                 mov     eax, [esp+0BCh+arg_8]
.text:0040E89A                 mov     ebp, [esp+0BCh+arg_C]
.text:0040E8A1                 mov     edi, [esp+0BCh+arg_10]
.text:0040E8A8                 add     ecx, eax
.text:0040E8AA                 mov     [esp+0BCh+var_34], ecx
.text:0040E8B1                 add     ebp, edi
.text:0040E8B3                 cmp     esi, [esp+0BCh+arg_8]
.text:0040E8BA                 mov     [esp+0BCh+var_38], ebp
.text:0040E8C1                 jg      loc_410942
.text:0040E8C7                 mov     edx, [esp+0BCh+arg_4]
.text:0040E8CE                 add     esi, edx
.text:0040E8D0                 mov     [esp+0BCh+var_3C], esi
.text:0040E8D7                 mov     esi, [esp+0BCh+arg_C]
.text:0040E8DE
.text:0040E8DE loc_40E8DE:                             ; CODE XREF: sub_40E6D0+2292↓j
.text:0040E8DE                 mov     [esp+0BCh+var_40], esi
.text:0040E8E2                 mov     ecx, [esp+0BCh+arg_8]
.text:0040E8E9                 test    ecx, ecx
.text:0040E8EB                 jle     loc_410918
.text:0040E8F1                 mov     eax, [esp+0BCh+arg_8]
.text:0040E8F8                 cmp     [esp+0BCh+arg_14], eax
.text:0040E8FF                 jg      loc_410918
.text:0040E905                 mov     edx, [esp+0BCh+arg_4]
.text:0040E90C                 mov     ebx, [esp+0BCh+arg_14]
.text:0040E913                 mov     esi, [esp+0BCh+var_3C]
.text:0040E91A                 add     edx, ebx
.text:0040E91C                 mov     [esp+0BCh+var_44], edx
.text:0040E920                 mov     [esp+0BCh+var_48], esi
.text:0040E924
.text:0040E924 loc_40E924:                             ; CODE XREF: sub_40E6D0+469↓j
.text:0040E924                                         ; sub_40E6D0+47A↓j ...
.text:0040E924                 mov     edx, [esp+0BCh+var_50]
.text:0040E928                 mov     eax, offset loc_40E949
.text:0040E92D                 cmp     [esp+0BCh+var_4C], edx
.text:0040E931                 jz      short loc_40E947
.text:0040E933
.text:0040E933 loc_40E933:                             ; CODE XREF: sub_40E6D0+838↓j
.text:0040E933                 mov     ebp, [esp+0BCh+var_4C]
.text:0040E937                 movzx   ebx, byte ptr [ebp+0]
.text:0040E93B                 inc     ebp
.text:0040E93C                 mov     [esp+0BCh+var_4C], ebp
.text:0040E940
.text:0040E940 loc_40E940:                             ; CODE XREF: sub_40E6D0+1CA0↓j
.text:0040E940                 mov     eax, ds:jpt_40E947[ebx*4] ; switch 6 cases
.text:0040E947
.text:0040E947 loc_40E947:                             ; CODE XREF: sub_40E6D0+261↑j
.text:0040E947                                         ; sub_40E6D0+83E↓j ...
.text:0040E947                 jmp     eax             ; switch jump
.text:0040E949 ; ---------------------------------------------------------------------------
.text:0040E949
.text:0040E949 loc_40E949:                             ; DATA XREF: sub_40E6D0+258↑o
.text:0040E949                                         ; sub_40E6D0+82F↓o ...
.text:0040E949                 mov     eax, [esp+0BCh+var_40]
.text:0040E94D                 cmp     [esp+0BCh+var_44], eax
.text:0040E951                 jz      loc_40EBD9
.text:0040E957                 mov     edi, [esp+0BCh+arg_8]
.text:0040E95E                 xor     edx, edx
.text:0040E960                 test    edi, edi
.text:0040E962                 jz      short loc_40E97C
.text:0040E964                 mov     eax, [esp+0BCh+var_88]
.text:0040E968                 cmp     [esp+0BCh+arg_4], eax
.text:0040E96F                 ja      short loc_40E97C
.text:0040E971                 mov     esi, [esp+0BCh+var_34]
.text:0040E978                 cmp     eax, esi
.text:0040E97A                 jbe     short loc_40E97E
.text:0040E97C
.text:0040E97C loc_40E97C:                             ; CODE XREF: sub_40E6D0+292↑j
.text:0040E97C                                         ; sub_40E6D0+29F↑j
.text:0040E97C                 mov     dl, 1
.text:0040E97E
.text:0040E97E loc_40E97E:                             ; CODE XREF: sub_40E6D0+2AA↑j
.text:0040E97E                 mov     ebp, [esp+0BCh+var_3C]
.text:0040E985                 cmp     [esp+0BCh+var_48], ebp
.text:0040E989                 setz    cl
.text:0040E98C                 cmp     dl, cl
.text:0040E98E                 jz      loc_40EEE8
.text:0040E994                 mov     edx, [esp+0BCh+var_88]
.text:0040E998                 cmp     [esp+0BCh+var_44], edx
.text:0040E99C                 setnbe  al
.text:0040E99F
.text:0040E99F loc_40E99F:                             ; CODE XREF: sub_40E6D0+826↓j
.text:0040E99F                 mov     esi, [esp+0BCh+var_24]
.text:0040E9A6                 test    esi, esi
.text:0040E9A8                 jz      loc_40EECF
.text:0040E9AE                 mov     ecx, [esp+0BCh+var_7C]
.text:0040E9B2                 test    ecx, ecx
.text:0040E9B4                 jz      short loc_40E9BA
.text:0040E9B6                 test    al, al
.text:0040E9B8                 jz      short loc_40EA00
.text:0040E9BA
.text:0040E9BA loc_40E9BA:                             ; CODE XREF: sub_40E6D0+2E4↑j
.text:0040E9BA                 mov     [esp+0BCh+var_7C], 1
.text:0040E9C2                 mov     eax, [esp+0BCh+var_5C]
.text:0040E9C6                 mov     ebp, 1
.text:0040E9CB                 mov     edi, [esp+0BCh+var_44]
.text:0040E9CF                 cmp     ebp, eax
.text:0040E9D1                 mov     [esp+0BCh+var_88], edi
.text:0040E9D5                 jnb     short loc_40EA00
.text:0040E9D7
.text:0040E9D7 loc_40E9D7:                             ; CODE XREF: sub_40E6D0+328↓j
.text:0040E9D7                 mov     edx, [esp+0BCh+var_68]
.text:0040E9DB                 mov     ecx, [esp+0BCh+var_80]
.text:0040E9DF                 mov     eax, [esp+0BCh+var_6C]
.text:0040E9E3                 mov     edi, [edx+ebp*4]
.text:0040E9E6                 mov     edx, [esp+0BCh+var_84]
.text:0040E9EA                 mov     [ecx+ebp*4], edi
.text:0040E9ED                 mov     ebx, [eax+ebp*4]
.text:0040E9F0                 mov     [edx+ebp*4], ebx
.text:0040E9F3                 inc     ebp
.text:0040E9F4                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040E9F8                 jb      short loc_40E9D7
.text:0040E9FA                 lea     esi, [esi+0]
.text:0040EA00
.text:0040EA00 loc_40EA00:                             ; CODE XREF: sub_40E6D0+2E8↑j
.text:0040EA00                                         ; sub_40E6D0+305↑j ...
.text:0040EA00                 test    esi, esi
.text:0040EA02                 mov     eax, esi
.text:0040EA04                 jz      loc_40EB6E
.text:0040EA0A                 mov     ebx, [esp+0BCh+Src]
.text:0040EA11                 dec     esi
.text:0040EA12                 mov     [esp+0BCh+var_24], esi
.text:0040EA19                 mov     esi, [ebx+esi*4]
.text:0040EA1C                 test    esi, esi
.text:0040EA1E                 jz      short loc_40EA24
.text:0040EA20                 mov     [esp+0BCh+var_44], esi
.text:0040EA24
.text:0040EA24 loc_40EA24:                             ; CODE XREF: sub_40E6D0+34E↑j
.text:0040EA24                 lea     ecx, [eax-2]
.text:0040EA27                 lea     edx, [eax-3]
.text:0040EA2A                 mov     [esp+0BCh+var_24], ecx
.text:0040EA31                 mov     ebp, [ebx+ecx*4]
.text:0040EA34                 lea     ecx, [eax-4]
.text:0040EA37                 mov     [esp+0BCh+var_24], edx
.text:0040EA3E                 mov     [esp+0BCh+var_4C], ebp
.text:0040EA42                 mov     edi, [ebx+edx*4]
.text:0040EA45                 mov     [esp+0BCh+var_24], ecx
.text:0040EA4C                 mov     [esp+0BCh+var_64], edi
.text:0040EA50                 mov     ebp, [ebx+ecx*4]
.text:0040EA53                 mov     ecx, [esp+0BCh+var_64]
.text:0040EA57                 mov     [esp+0BCh+var_60], ebp
.text:0040EA5B                 cmp     ecx, ebp
.text:0040EA5D                 jb      short loc_40EAB9
.text:0040EA5F                 nop
.text:0040EA60
.text:0040EA60 loc_40EA60:                             ; CODE XREF: sub_40E6D0+3E7↓j
.text:0040EA60                 mov     eax, [esp+0BCh+var_24]
.text:0040EA67                 mov     ebp, [esp+0BCh+var_78]
.text:0040EA6B                 dec     eax
.text:0040EA6C                 mov     [esp+0BCh+var_24], eax
.text:0040EA73                 mov     edi, [ebx+eax*4]
.text:0040EA76                 mov     [ebp+ecx*4+0], edi
.text:0040EA7A                 mov     ebp, [esp+0BCh+var_24]
.text:0040EA81                 mov     esi, [esp+0BCh+Src]
.text:0040EA88                 lea     edx, [ebp-1]
.text:0040EA8B                 sub     ebp, 2
.text:0040EA8E                 mov     ebx, esi
.text:0040EA90                 mov     [esp+0BCh+var_24], edx
.text:0040EA97                 mov     edi, [esi+edx*4]
.text:0040EA9A                 mov     edx, [esp+0BCh+var_6C]
.text:0040EA9E                 mov     [esp+0BCh+var_24], ebp
.text:0040EAA5                 mov     [edx+ecx*4], edi
.text:0040EAA8                 mov     edi, [esi+ebp*4]
.text:0040EAAB                 mov     esi, [esp+0BCh+var_68]
.text:0040EAAF                 mov     [esi+ecx*4], edi
.text:0040EAB2                 dec     ecx
.text:0040EAB3                 cmp     ecx, [esp+0BCh+var_60]
.text:0040EAB7                 jnb     short loc_40EA60
.text:0040EAB9
.text:0040EAB9 loc_40EAB9:                             ; CODE XREF: sub_40E6D0+38D↑j
.text:0040EAB9                 mov     [esp+0BCh+var_8C], 0
.text:0040EAC1                 mov     ebx, [esp+0BCh+var_4C]
.text:0040EAC5                 test    ebx, ebx
.text:0040EAC7                 jz      short loc_40EB22
.text:0040EAC9                 mov     edx, [esp+0BCh+var_50]
.text:0040EACD                 cmp     [esp+0BCh+var_4C], edx
.text:0040EAD1                 jnb     short loc_40EB2E
.text:0040EAD3                 mov     ecx, [esp+0BCh+var_4C]
.text:0040EAD7                 xor     edx, edx
.text:0040EAD9                 movzx   eax, byte ptr [ecx]
.text:0040EADC                 cmp     eax, 12h
.text:0040EADF                 ja      loc_40EB65
.text:0040EAE5                 cmp     eax, 11h
.text:0040EAE8                 jnb     short loc_40EAF0
.text:0040EAEA                 cmp     eax, 0Dh
.text:0040EAED                 jnz     short loc_40EB2E
.text:0040EAEF                 nop
.text:0040EAF0
.text:0040EAF0 loc_40EAF0:                             ; CODE XREF: sub_40E6D0+418↑j
.text:0040EAF0                                         ; sub_40E6D0+49C↓j
.text:0040EAF0                 mov     ebp, [esp+0BCh+var_4C]
.text:0040EAF4                 mov     ecx, [esp+0BCh+var_4C]
.text:0040EAF8                 inc     ebp
.text:0040EAF9                 mov     [esp+0BCh+var_30], ebp
.text:0040EB00                 movsx   esi, byte ptr [ebp+1]
.text:0040EB04                 movzx   eax, byte ptr [ecx+1]
.text:0040EB08                 shl     esi, 8
.text:0040EB0B                 lea     edi, [esi+eax]
.text:0040EB0E                 lea     eax, [edi+ecx+3]
.text:0040EB12                 test    dl, dl
.text:0040EB14                 mov     [esp+0BCh+var_30], eax
.text:0040EB1B                 jz      short loc_40EB60
.text:0040EB1D                 cmp     byte ptr [eax], 15h
.text:0040EB20
.text:0040EB20 loc_40EB20:                             ; CODE XREF: sub_40E6D0+493↓j
.text:0040EB20                 jnz     short loc_40EB2E
.text:0040EB22
.text:0040EB22 loc_40EB22:                             ; CODE XREF: sub_40E6D0+3F7↑j
.text:0040EB22                                         ; sub_40E6D0+889↓j ...
.text:0040EB22                 mov     esi, [esp+0BCh+var_24]
.text:0040EB29                 jmp     loc_40EA00
.text:0040EB2E ; ---------------------------------------------------------------------------
.text:0040EB2E
.text:0040EB2E loc_40EB2E:                             ; CODE XREF: sub_40E6D0+401↑j
.text:0040EB2E                                         ; sub_40E6D0+41D↑j ...
.text:0040EB2E                 mov     ebx, [esp+0BCh+arg_4]
.text:0040EB35                 cmp     [esp+0BCh+var_44], ebx
.text:0040EB39                 jb      loc_40E924
.text:0040EB3F                 mov     edi, [esp+0BCh+var_34]
.text:0040EB46                 cmp     [esp+0BCh+var_44], edi
.text:0040EB4A                 ja      loc_40E924
.text:0040EB50                 mov     edx, [esp+0BCh+var_3C]
.text:0040EB57                 mov     [esp+0BCh+var_48], edx
.text:0040EB5B                 jmp     loc_40E924
.text:0040EB60 ; ---------------------------------------------------------------------------
.text:0040EB60
.text:0040EB60 loc_40EB60:                             ; CODE XREF: sub_40E6D0+44B↑j
.text:0040EB60                 cmp     byte ptr [eax], 0Fh
.text:0040EB63                 jmp     short loc_40EB20
.text:0040EB65 ; ---------------------------------------------------------------------------
.text:0040EB65
.text:0040EB65 loc_40EB65:                             ; CODE XREF: sub_40E6D0+40F↑j
.text:0040EB65                 cmp     eax, 16h
.text:0040EB68                 jnz     short loc_40EB2E
.text:0040EB6A                 mov     dl, 1
.text:0040EB6C                 jmp     short loc_40EAF0
.text:0040EB6E ; ---------------------------------------------------------------------------
.text:0040EB6E
.text:0040EB6E loc_40EB6E:                             ; CODE XREF: sub_40E6D0+334↑j
.text:0040EB6E                 mov     ecx, [esp+0BCh+var_7C]
.text:0040EB72                 test    ecx, ecx
.text:0040EB74                 jz      loc_40EEC5
.text:0040EB7A
.text:0040EB7A loc_40EB7A:                             ; CODE XREF: sub_40E6D0+813↓j
.text:0040EB7A                 mov     esi, [esp+0BCh+var_88]
.text:0040EB7E                 mov     ebx, [esp+0BCh+arg_4]
.text:0040EB85                 mov     [esp+0BCh+var_44], esi
.text:0040EB89                 cmp     esi, ebx
.text:0040EB8B                 jb      short loc_40EBA3
.text:0040EB8D                 mov     eax, [esp+0BCh+var_34]
.text:0040EB94                 mov     ecx, [esp+0BCh+var_3C]
.text:0040EB9B                 cmp     esi, eax
.text:0040EB9D                 mov     [esp+0BCh+var_48], ecx
.text:0040EBA1                 jbe     short loc_40EBAB
.text:0040EBA3
.text:0040EBA3 loc_40EBA3:                             ; CODE XREF: sub_40E6D0+4BB↑j
.text:0040EBA3                 mov     esi, [esp+0BCh+var_40]
.text:0040EBA7                 mov     [esp+0BCh+var_48], esi
.text:0040EBAB
.text:0040EBAB loc_40EBAB:                             ; CODE XREF: sub_40E6D0+4D1↑j
.text:0040EBAB                 mov     ebp, 1
.text:0040EBB0                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040EBB4                 jnb     short loc_40EBD9
.text:0040EBB6
.text:0040EBB6 loc_40EBB6:                             ; CODE XREF: sub_40E6D0+507↓j
.text:0040EBB6                 mov     eax, [esp+0BCh+var_80]
.text:0040EBBA                 mov     ecx, [esp+0BCh+var_68]
.text:0040EBBE                 mov     ebx, [esp+0BCh+var_84]
.text:0040EBC2                 mov     edi, [eax+ebp*4]
.text:0040EBC5                 mov     [ecx+ebp*4], edi
.text:0040EBC8                 mov     edx, [ebx+ebp*4]
.text:0040EBCB                 mov     edi, [esp+0BCh+var_6C]
.text:0040EBCF                 mov     [edi+ebp*4], edx
.text:0040EBD2                 inc     ebp
.text:0040EBD3                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040EBD7                 jb      short loc_40EBB6
.text:0040EBD9
.text:0040EBD9 loc_40EBD9:                             ; CODE XREF: sub_40E6D0+281↑j
.text:0040EBD9                                         ; sub_40E6D0+4E4↑j ...
.text:0040EBD9                 mov     ebp, [esp+0BCh+arg_18]
.text:0040EBE0                 test    ebp, ebp
.text:0040EBE2                 jz      loc_40EDF2
.text:0040EBE8                 mov     edx, [esp+0BCh+arg_0]
.text:0040EBEF                 movzx   eax, byte ptr [edx+1Ch]
.text:0040EBF3                 test    al, 10h
.text:0040EBF5                 jnz     loc_40EDF2
.text:0040EBFB                 shr     al, 1
.text:0040EBFD                 and     eax, 3
.text:0040EC00                 jnz     loc_40EE58
.text:0040EC06                 mov     eax, [esp+0BCh+var_5C]
.text:0040EC0A                 inc     eax
.text:0040EC0B                 cmp     eax, 1Eh
.text:0040EC0E                 jnb     short loc_40EC15
.text:0040EC10                 mov     eax, 1Eh
.text:0040EC15
.text:0040EC15 loc_40EC15:                             ; CODE XREF: sub_40E6D0+53E↑j
.text:0040EC15                 mov     ebp, [esp+0BCh+arg_18]
.text:0040EC1C                 mov     [ebp+0], eax
.text:0040EC1F                 shl     eax, 2
.text:0040EC22                 mov     [esp+0BCh+Size], eax ; Size
.text:0040EC25                 call    malloc
.text:0040EC2A                 mov     edi, [esp+0BCh+arg_18]
.text:0040EC31                 mov     ebx, [edi]
.text:0040EC33                 mov     [edi+4], eax
.text:0040EC36                 shl     ebx, 2
.text:0040EC39                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040EC3C                 call    malloc
.text:0040EC41                 mov     ecx, [esp+0BCh+arg_18]
.text:0040EC48                 mov     esi, [ecx+4]
.text:0040EC4B                 mov     [ecx+8], eax
.text:0040EC4E                 test    esi, esi
.text:0040EC50                 jz      loc_40EE51
.text:0040EC56                 test    eax, eax
.text:0040EC58                 jz      loc_40EE51
.text:0040EC5E                 mov     edx, [esp+0BCh+arg_0]
.text:0040EC65                 movzx   ecx, byte ptr [edx+1Ch]
.text:0040EC69                 and     cl, 0F9h
.text:0040EC6C                 or      cl, 2
.text:0040EC6F                 mov     [edx+1Ch], cl
.text:0040EC72
.text:0040EC72 loc_40EC72:                             ; CODE XREF: sub_40E6D0+7ED↓j
.text:0040EC72                 mov     ecx, [esp+0BCh+arg_18]
.text:0040EC79                 mov     edx, [ecx]
.text:0040EC7B
.text:0040EC7B loc_40EC7B:                             ; CODE XREF: sub_40E6D0+794↓j
.text:0040EC7B                                         ; sub_40E6D0+7A9↓j
.text:0040EC7B                 test    edx, edx
.text:0040EC7D                 jz      short loc_40ECC8
.text:0040EC7F                 mov     esi, [esp+0BCh+arg_18]
.text:0040EC86                 mov     edi, [esp+0BCh+var_3C]
.text:0040EC8D                 mov     edx, [esp+0BCh+arg_14]
.text:0040EC94                 cmp     [esp+0BCh+var_48], edi
.text:0040EC98                 mov     ebp, [esi+4]
.text:0040EC9B                 mov     [ebp+0], edx
.text:0040EC9E                 mov     edx, [esi+8]
.text:0040ECA1                 jz      loc_40EE3F
.text:0040ECA7                 mov     eax, [esp+0BCh+var_44]
.text:0040ECAB                 mov     esi, [esp+0BCh+arg_C]
.text:0040ECB2                 mov     ecx, [esp+0BCh+arg_8]
.text:0040ECB9                 sub     eax, esi
.text:0040ECBB                 add     eax, ecx
.text:0040ECBD
.text:0040ECBD loc_40ECBD:                             ; CODE XREF: sub_40E6D0+77C↓j
.text:0040ECBD                 mov     [edx], eax
.text:0040ECBF                 mov     edi, [esp+0BCh+arg_18]
.text:0040ECC6                 mov     edx, [edi]
.text:0040ECC8
.text:0040ECC8 loc_40ECC8:                             ; CODE XREF: sub_40E6D0+5AD↑j
.text:0040ECC8                 mov     ebp, 1
.text:0040ECCD
.text:0040ECCD loc_40ECCD:                             ; CODE XREF: sub_40E6D0+6A8↓j
.text:0040ECCD                 cmp     edx, [esp+0BCh+var_5C]
.text:0040ECD1                 mov     eax, edx
.text:0040ECD3                 jbe     short loc_40ECD9
.text:0040ECD5                 mov     eax, [esp+0BCh+var_5C]
.text:0040ECD9
.text:0040ECD9 loc_40ECD9:                             ; CODE XREF: sub_40E6D0+603↑j
.text:0040ECD9                 cmp     ebp, eax
.text:0040ECDB                 jnb     loc_40EDC3
.text:0040ECE1                 mov     ebx, [esp+0BCh+var_68]
.text:0040ECE5                 mov     eax, [ebx+ebp*4]
.text:0040ECE8                 cmp     eax, offset unk_421390
.text:0040ECED                 jz      loc_40EDA6
.text:0040ECF3                 mov     esi, [esp+0BCh+var_6C]
.text:0040ECF7                 mov     edx, [esi+ebp*4]
.text:0040ECFA                 cmp     edx, offset unk_421390
.text:0040ED00                 jz      loc_40EDA6
.text:0040ED06                 mov     edi, [esp+0BCh+arg_8]
.text:0040ED0D                 mov     ebx, [esp+0BCh+arg_18]
.text:0040ED14                 test    edi, edi
.text:0040ED16                 mov     ecx, [ebx+4]
.text:0040ED19                 jz      short loc_40ED92
.text:0040ED1B                 cmp     [esp+0BCh+arg_4], eax
.text:0040ED22                 ja      short loc_40ED92
.text:0040ED24                 cmp     eax, [esp+0BCh+var_34]
.text:0040ED2B                 ja      short loc_40ED92
.text:0040ED2D                 mov     esi, [esp+0BCh+arg_4]
.text:0040ED34                 sub     eax, esi
.text:0040ED36
.text:0040ED36 loc_40ED36:                             ; CODE XREF: sub_40E6D0+6D4↓j
.text:0040ED36                 mov     [ecx+ebp*4], eax
.text:0040ED39                 mov     esi, [esp+0BCh+arg_18]
.text:0040ED40                 mov     eax, [esp+0BCh+arg_8]
.text:0040ED47                 mov     ecx, [esi+8]
.text:0040ED4A                 test    eax, eax
.text:0040ED4C                 jz      short loc_40ED7D
.text:0040ED4E                 cmp     [esp+0BCh+arg_4], edx
.text:0040ED55                 ja      short loc_40ED7D
.text:0040ED57                 cmp     edx, [esp+0BCh+var_34]
.text:0040ED5E                 ja      short loc_40ED7D
.text:0040ED60                 mov     eax, edx
.text:0040ED62                 mov     edx, [esp+0BCh+arg_4]
.text:0040ED69                 sub     eax, edx
.text:0040ED6B
.text:0040ED6B loc_40ED6B:                             ; CODE XREF: sub_40E6D0+6C0↓j
.text:0040ED6B                 mov     [ecx+ebp*4], eax
.text:0040ED6E
.text:0040ED6E loc_40ED6E:                             ; CODE XREF: sub_40E6D0+6F1↓j
.text:0040ED6E                 mov     ecx, [esp+0BCh+arg_18]
.text:0040ED75                 inc     ebp
.text:0040ED76                 mov     edx, [ecx]
.text:0040ED78                 jmp     loc_40ECCD
.text:0040ED7D ; ---------------------------------------------------------------------------
.text:0040ED7D
.text:0040ED7D loc_40ED7D:                             ; CODE XREF: sub_40E6D0+67C↑j
.text:0040ED7D                                         ; sub_40E6D0+685↑j ...
.text:0040ED7D                 mov     eax, [esp+0BCh+arg_C]
.text:0040ED84                 mov     edi, [esp+0BCh+arg_8]
.text:0040ED8B                 sub     edx, eax
.text:0040ED8D                 lea     eax, [edi+edx]
.text:0040ED90                 jmp     short loc_40ED6B
.text:0040ED92 ; ---------------------------------------------------------------------------
.text:0040ED92
.text:0040ED92 loc_40ED92:                             ; CODE XREF: sub_40E6D0+649↑j
.text:0040ED92                                         ; sub_40E6D0+652↑j ...
.text:0040ED92                 mov     ebx, [esp+0BCh+arg_C]
.text:0040ED99                 mov     edi, [esp+0BCh+arg_8]
.text:0040EDA0                 sub     eax, ebx
.text:0040EDA2                 add     eax, edi
.text:0040EDA4                 jmp     short loc_40ED36
.text:0040EDA6 ; ---------------------------------------------------------------------------
.text:0040EDA6
.text:0040EDA6 loc_40EDA6:                             ; CODE XREF: sub_40E6D0+61D↑j
.text:0040EDA6                                         ; sub_40E6D0+630↑j
.text:0040EDA6                 mov     eax, [esp+0BCh+arg_18]
.text:0040EDAD                 mov     ecx, [eax+4]
.text:0040EDB0                 mov     edx, [eax+8]
.text:0040EDB3                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040EDBA                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:0040EDC1                 jmp     short loc_40ED6E
.text:0040EDC3 ; ---------------------------------------------------------------------------
.text:0040EDC3
.text:0040EDC3 loc_40EDC3:                             ; CODE XREF: sub_40E6D0+60B↑j
.text:0040EDC3                 mov     ebp, [esp+0BCh+var_5C]
.text:0040EDC7                 cmp     ebp, edx
.text:0040EDC9                 jnb     short loc_40EDF2
.text:0040EDCB                 mov     esi, [esp+0BCh+arg_18]
.text:0040EDD2                 mov     edx, [esi+4]
.text:0040EDD5                 mov     eax, [esi+8]
.text:0040EDD8
.text:0040EDD8 loc_40EDD8:                             ; CODE XREF: sub_40E6D0+720↓j
.text:0040EDD8                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:0040EDDF                 mov     edi, [esp+0BCh+arg_18]
.text:0040EDE6                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040EDED                 inc     ebp
.text:0040EDEE                 cmp     ebp, [edi]
.text:0040EDF0                 jb      short loc_40EDD8
.text:0040EDF2
.text:0040EDF2 loc_40EDF2:                             ; CODE XREF: sub_40E6D0+512↑j
.text:0040EDF2                                         ; sub_40E6D0+525↑j ...
.text:0040EDF2                 mov     eax, [esp+0BCh+var_44]
.text:0040EDF6                 mov     ecx, [esp+0BCh+arg_14]
.text:0040EDFD                 mov     ebp, [esp+0BCh+var_3C]
.text:0040EE04                 sub     eax, ecx
.text:0040EE06                 cmp     [esp+0BCh+var_48], ebp
.text:0040EE0A                 jz      short loc_40EE32
.text:0040EE0C                 mov     ebx, [esp+0BCh+arg_8]
.text:0040EE13                 mov     ebp, eax
.text:0040EE15                 sub     [esp+0BCh+arg_C], ebx
.text:0040EE1C                 mov     edx, [esp+0BCh+arg_C]
.text:0040EE23                 sub     ebp, edx
.text:0040EE25
.text:0040EE25 loc_40EE25:                             ; CODE XREF: sub_40E6D0+76D↓j
.text:0040EE25                 mov     eax, ebp
.text:0040EE27
.text:0040EE27 loc_40EE27:                             ; CODE XREF: sub_40E6D0+89↑j
.text:0040EE27                                         ; sub_40E6D0+786↓j ...
.text:0040EE27                 add     esp, 0ACh
.text:0040EE2D                 pop     ebx
.text:0040EE2E                 pop     esi
.text:0040EE2F                 pop     edi
.text:0040EE30                 pop     ebp
.text:0040EE31                 retn
.text:0040EE32 ; ---------------------------------------------------------------------------
.text:0040EE32
.text:0040EE32 loc_40EE32:                             ; CODE XREF: sub_40E6D0+73A↑j
.text:0040EE32                 mov     esi, [esp+0BCh+arg_4]
.text:0040EE39                 mov     ebp, eax
.text:0040EE3B                 sub     ebp, esi
.text:0040EE3D                 jmp     short loc_40EE25
.text:0040EE3F ; ---------------------------------------------------------------------------
.text:0040EE3F
.text:0040EE3F loc_40EE3F:                             ; CODE XREF: sub_40E6D0+5D1↑j
.text:0040EE3F                 mov     eax, [esp+0BCh+var_44]
.text:0040EE43                 mov     ebx, [esp+0BCh+arg_4]
.text:0040EE4A                 sub     eax, ebx
.text:0040EE4C                 jmp     loc_40ECBD
.text:0040EE51 ; ---------------------------------------------------------------------------
.text:0040EE51
.text:0040EE51 loc_40EE51:                             ; CODE XREF: sub_40E6D0+580↑j
.text:0040EE51                                         ; sub_40E6D0+588↑j ...
.text:0040EE51                 mov     eax, 0FFFFFFFEh
.text:0040EE56                 jmp     short loc_40EE27
.text:0040EE58 ; ---------------------------------------------------------------------------
.text:0040EE58
.text:0040EE58 loc_40EE58:                             ; CODE XREF: sub_40E6D0+530↑j
.text:0040EE58                 dec     eax
.text:0040EE59                 jz      short loc_40EE69
.text:0040EE5B                 mov     eax, [esp+0BCh+arg_18]
.text:0040EE62                 mov     edx, [eax]
.text:0040EE64                 jmp     loc_40EC7B
.text:0040EE69 ; ---------------------------------------------------------------------------
.text:0040EE69
.text:0040EE69 loc_40EE69:                             ; CODE XREF: sub_40E6D0+789↑j
.text:0040EE69                 mov     ecx, [esp+0BCh+arg_18]
.text:0040EE70                 mov     eax, [esp+0BCh+var_5C]
.text:0040EE74                 mov     edx, [ecx]
.text:0040EE76                 inc     eax
.text:0040EE77                 cmp     edx, eax
.text:0040EE79                 jnb     loc_40EC7B
.text:0040EE7F                 mov     [ecx], eax
.text:0040EE81                 shl     eax, 2
.text:0040EE84                 mov     [esp+0BCh+var_B8], eax ; Size
.text:0040EE88                 mov     edx, [ecx+4]
.text:0040EE8B                 mov     [esp+0BCh+Size], edx ; Block
.text:0040EE8E                 call    realloc
.text:0040EE93                 mov     edi, [esp+0BCh+arg_18]
.text:0040EE9A                 mov     ebp, [edi]
.text:0040EE9C                 mov     [edi+4], eax
.text:0040EE9F                 shl     ebp, 2
.text:0040EEA2                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:0040EEA6                 mov     ebx, [edi+8]
.text:0040EEA9                 mov     [esp+0BCh+Size], ebx ; Block
.text:0040EEAC                 call    realloc
.text:0040EEB1                 mov     [edi+8], eax
.text:0040EEB4                 mov     esi, [edi+4]
.text:0040EEB7                 test    esi, esi
.text:0040EEB9                 jz      short loc_40EE51
.text:0040EEBB                 test    eax, eax
.text:0040EEBD                 jnz     loc_40EC72
.text:0040EEC3                 jmp     short loc_40EE51
.text:0040EEC5 ; ---------------------------------------------------------------------------
.text:0040EEC5
.text:0040EEC5 loc_40EEC5:                             ; CODE XREF: sub_40E6D0+107↑j
.text:0040EEC5                                         ; sub_40E6D0+124↑j ...
.text:0040EEC5                 mov     eax, 0FFFFFFFFh
.text:0040EECA                 jmp     loc_40EE27
.text:0040EECF ; ---------------------------------------------------------------------------
.text:0040EECF
.text:0040EECF loc_40EECF:                             ; CODE XREF: sub_40E6D0+2D8↑j
.text:0040EECF                 mov     ebp, [esp+0BCh+var_7C]
.text:0040EED3                 test    ebp, ebp
.text:0040EED5                 jz      loc_40EBD9
.text:0040EEDB                 test    al, al
.text:0040EEDD                 jnz     loc_40EBD9
.text:0040EEE3                 jmp     loc_40EB7A
.text:0040EEE8 ; ---------------------------------------------------------------------------
.text:0040EEE8
.text:0040EEE8 loc_40EEE8:                             ; CODE XREF: sub_40E6D0+2BE↑j
.text:0040EEE8                 mov     ebx, [esp+0BCh+var_3C]
.text:0040EEEF                 cmp     [esp+0BCh+var_48], ebx
.text:0040EEF3                 setnz   al
.text:0040EEF6                 jmp     loc_40E99F
.text:0040EEFB ; ---------------------------------------------------------------------------
.text:0040EEFB
.text:0040EEFB loc_40EEFB:                             ; CODE XREF: sub_40E6D0:loc_40E947↑j
.text:0040EEFB                                         ; sub_40E6D0+898↓j ...
.text:0040EEFB                 mov     edx, [esp+0BCh+var_50] ; jumptable 0040E947 case 0
.text:0040EEFB                                         ; jumptable 0040F2C6 case 0
.text:0040EEFB                                         ; jumptable 0040F398 case 0
.text:0040EEFF                 mov     eax, offset loc_40E949
.text:0040EF04                 cmp     [esp+0BCh+var_4C], edx
.text:0040EF08                 jnz     loc_40E933
.text:0040EF0E                 jmp     loc_40E947
.text:0040EF13 ; ---------------------------------------------------------------------------
.text:0040EF13
.text:0040EF13 loc_40EF13:                             ; CODE XREF: sub_40E6D0:loc_40E947↑j
.text:0040EF13                                         ; sub_40E6D0+BF6↓j ...
.text:0040EF13                 jmp     loc_40EBD9      ; jumptable 0040E947 case 1
.text:0040EF13                                         ; jumptable 0040F2C6 case 1
.text:0040EF13                                         ; jumptable 0040F398 case 1
.text:0040EF18 ; ---------------------------------------------------------------------------
.text:0040EF18
.text:0040EF18 loc_40EF18:                             ; CODE XREF: sub_40E6D0:loc_40E947↑j
.text:0040EF18                                         ; sub_40E6D0+BF6↓j ...
.text:0040EF18                 mov     eax, [esp+0BCh+var_4C] ; jumptable 0040E947 case 2
.text:0040EF18                                         ; jumptable 0040F2C6 case 2
.text:0040EF18                                         ; jumptable 0040F398 case 2
.text:0040EF1C                 mov     edi, [esp+0BCh+var_58]
.text:0040EF20                 movzx   ebp, byte ptr [eax]
.text:0040EF23                 inc     eax
.text:0040EF24                 test    edi, edi
.text:0040EF26                 mov     [esp+0BCh+var_4C], eax
.text:0040EF2A                 jz      loc_40EFB9
.text:0040EF30
.text:0040EF30 loc_40EF30:                             ; CODE XREF: sub_40E6D0+890↓j
.text:0040EF30                 mov     ecx, [esp+0BCh+var_48]
.text:0040EF34                 cmp     [esp+0BCh+var_44], ecx
.text:0040EF38                 jz      short loc_40EF96
.text:0040EF3A
.text:0040EF3A loc_40EF3A:                             ; CODE XREF: sub_40E6D0+8E7↓j
.text:0040EF3A                 mov     ecx, [esp+0BCh+var_44]
.text:0040EF3E                 mov     ebx, [esp+0BCh+var_4C]
.text:0040EF42                 mov     edx, [esp+0BCh+var_58]
.text:0040EF46                 movzx   edi, byte ptr [ecx]
.text:0040EF49                 inc     ecx
.text:0040EF4A                 movzx   eax, byte ptr [ebx]
.text:0040EF4D                 inc     ebx
.text:0040EF4E                 mov     [esp+0BCh+var_4C], ebx
.text:0040EF52                 mov     [esp+0BCh+var_44], ecx
.text:0040EF56                 cmp     [edi+edx], al
.text:0040EF59                 jnz     loc_40EB22
.text:0040EF5F                 dec     ebp
.text:0040EF60                 jnz     short loc_40EF30
.text:0040EF62
.text:0040EF62 loc_40EF62:                             ; CODE XREF: sub_40E6D0+916↓j
.text:0040EF62                 mov     ebp, [esp+0BCh+var_8C]
.text:0040EF66                 test    ebp, ebp
.text:0040EF68                 jnz     short loc_40EEFB ; jumptable 0040E947 case 0
.text:0040EF68                                         ; jumptable 0040F2C6 case 0
.text:0040EF68                                         ; jumptable 0040F398 case 0
.text:0040EF6A                 mov     [esp+0BCh+var_8C], 1
.text:0040EF72                 mov     eax, [esp+0BCh+var_60]
.text:0040EF76                 mov     edx, [esp+0BCh+var_64]
.text:0040EF7A                 cmp     eax, edx
.text:0040EF7C                 ja      loc_40EEFB      ; jumptable 0040E947 case 0
.text:0040EF7C                                         ; jumptable 0040F2C6 case 0
.text:0040EF7C                                         ; jumptable 0040F398 case 0
.text:0040EF82
.text:0040EF82 loc_40EF82:                             ; CODE XREF: sub_40E6D0+8BF↓j
.text:0040EF82                 mov     esi, [esp+0BCh+var_78]
.text:0040EF86                 or      byte ptr [esi+eax*4], 18h
.text:0040EF8A                 inc     eax
.text:0040EF8B                 cmp     eax, [esp+0BCh+var_64]
.text:0040EF8F                 jbe     short loc_40EF82
.text:0040EF91                 jmp     loc_40EEFB      ; jumptable 0040E947 case 0
.text:0040EF91                                         ; jumptable 0040F2C6 case 0
.text:0040EF91                                         ; jumptable 0040F398 case 0
.text:0040EF96 ; ---------------------------------------------------------------------------
.text:0040EF96
.text:0040EF96 loc_40EF96:                             ; CODE XREF: sub_40E6D0+868↑j
.text:0040EF96                                         ; sub_40E6D0+8E5↓j
.text:0040EF96                 mov     edx, [esp+0BCh+var_40]
.text:0040EF9A                 cmp     [esp+0BCh+var_48], edx
.text:0040EF9E                 jz      loc_40EB22
.text:0040EFA4                 mov     [esp+0BCh+var_48], edx
.text:0040EFA8                 mov     ebx, [esp+0BCh+arg_C]
.text:0040EFAF                 cmp     ebx, edx
.text:0040EFB1                 mov     [esp+0BCh+var_44], ebx
.text:0040EFB5                 jz      short loc_40EF96
.text:0040EFB7                 jmp     short loc_40EF3A
.text:0040EFB9 ; ---------------------------------------------------------------------------
.text:0040EFB9
.text:0040EFB9 loc_40EFB9:                             ; CODE XREF: sub_40E6D0+85A↑j
.text:0040EFB9                                         ; sub_40E6D0+914↓j
.text:0040EFB9                 mov     esi, [esp+0BCh+var_48]
.text:0040EFBD                 cmp     [esp+0BCh+var_44], esi
.text:0040EFC1                 jz      short loc_40EFF0
.text:0040EFC3
.text:0040EFC3 loc_40EFC3:                             ; CODE XREF: sub_40E6D0+941↓j
.text:0040EFC3                 mov     ebx, [esp+0BCh+var_4C]
.text:0040EFC7                 mov     eax, [esp+0BCh+var_44]
.text:0040EFCB                 movzx   edx, byte ptr [ebx]
.text:0040EFCE                 inc     ebx
.text:0040EFCF                 mov     [esp+0BCh+var_4C], ebx
.text:0040EFD3                 movzx   ecx, byte ptr [eax]
.text:0040EFD6                 inc     eax
.text:0040EFD7                 mov     [esp+0BCh+var_44], eax
.text:0040EFDB                 cmp     cl, dl
.text:0040EFDD                 jnz     loc_40EB22
.text:0040EFE3                 dec     ebp
.text:0040EFE4                 jnz     short loc_40EFB9
.text:0040EFE6                 jmp     loc_40EF62
.text:0040EFE6 ; ---------------------------------------------------------------------------
.text:0040EFEB                 align 10h
.text:0040EFF0
.text:0040EFF0 loc_40EFF0:                             ; CODE XREF: sub_40E6D0+8F1↑j
.text:0040EFF0                                         ; sub_40E6D0+93F↓j
.text:0040EFF0                 mov     esi, [esp+0BCh+var_40]
.text:0040EFF4                 cmp     [esp+0BCh+var_48], esi
.text:0040EFF8                 jz      loc_40EB22
.text:0040EFFE                 mov     [esp+0BCh+var_48], esi
.text:0040F002                 mov     edi, [esp+0BCh+arg_C]
.text:0040F009                 cmp     edi, esi
.text:0040F00B                 mov     [esp+0BCh+var_44], edi
.text:0040F00F                 jz      short loc_40EFF0
.text:0040F011                 jmp     short loc_40EFC3
.text:0040F013 ; ---------------------------------------------------------------------------
.text:0040F013
.text:0040F013 loc_40F013:                             ; CODE XREF: sub_40E6D0:loc_40E947↑j
.text:0040F013                                         ; sub_40E6D0+BF6↓j ...
.text:0040F013                 mov     edi, [esp+0BCh+var_48] ; jumptable 0040E947 case 3
.text:0040F013                                         ; jumptable 0040F2C6 case 3
.text:0040F013                                         ; jumptable 0040F398 case 3
.text:0040F017                 cmp     [esp+0BCh+var_44], edi
.text:0040F01B                 jz      loc_4108F2
.text:0040F021
.text:0040F021 loc_40F021:                             ; CODE XREF: sub_40E6D0+2243↓j
.text:0040F021                 mov     eax, [esp+0BCh+arg_0]
.text:0040F028                 test    byte ptr [eax+0Ch], 40h
.text:0040F02C                 jnz     short loc_40F050
.text:0040F02E                 mov     ebx, [esp+0BCh+var_58]
.text:0040F032                 test    ebx, ebx
.text:0040F034                 jz      loc_4108E6
.text:0040F03A                 mov     esi, [esp+0BCh+var_44]
.text:0040F03E                 mov     edx, [esp+0BCh+var_58]
.text:0040F042                 movzx   ebp, byte ptr [esi]
.text:0040F045                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:0040F04A
.text:0040F04A loc_40F04A:                             ; CODE XREF: sub_40E6D0+221D↓j
.text:0040F04A                 jz      loc_40EB22
.text:0040F050
.text:0040F050 loc_40F050:                             ; CODE XREF: sub_40E6D0+95C↑j
.text:0040F050                 mov     ecx, [esp+0BCh+arg_0]
.text:0040F057                 cmp     byte ptr [ecx+0Ch], 0
.text:0040F05B                 jns     short loc_40F07F
.text:0040F05D                 mov     ebx, [esp+0BCh+var_58]
.text:0040F061                 test    ebx, ebx
.text:0040F063                 jz      loc_4108DA
.text:0040F069                 mov     edx, [esp+0BCh+var_44]
.text:0040F06D                 mov     eax, [esp+0BCh+var_58]
.text:0040F071                 movzx   ebp, byte ptr [edx]
.text:0040F074                 cmp     byte ptr [ebp+eax+0], 0
.text:0040F079
.text:0040F079 loc_40F079:                             ; CODE XREF: sub_40E6D0+2211↓j
.text:0040F079                 jz      loc_40EB22
.text:0040F07F
.text:0040F07F loc_40F07F:                             ; CODE XREF: sub_40E6D0+98B↑j
.text:0040F07F                 mov     esi, [esp+0BCh+var_8C]
.text:0040F083                 test    esi, esi
.text:0040F085                 jnz     short loc_40F0AA
.text:0040F087                 mov     [esp+0BCh+var_8C], 1
.text:0040F08F                 mov     eax, [esp+0BCh+var_60]
.text:0040F093                 mov     ecx, [esp+0BCh+var_64]
.text:0040F097                 cmp     eax, ecx
.text:0040F099                 ja      short loc_40F0AA
.text:0040F09B
.text:0040F09B loc_40F09B:                             ; CODE XREF: sub_40E6D0+9D8↓j
.text:0040F09B                 mov     ebx, [esp+0BCh+var_78]
.text:0040F09F                 or      byte ptr [ebx+eax*4], 18h
.text:0040F0A3                 inc     eax
.text:0040F0A4                 cmp     eax, [esp+0BCh+var_64]
.text:0040F0A8                 jbe     short loc_40F09B
.text:0040F0AA
.text:0040F0AA loc_40F0AA:                             ; CODE XREF: sub_40E6D0+9B5↑j
.text:0040F0AA                                         ; sub_40E6D0+9C9↑j
.text:0040F0AA                 inc     [esp+0BCh+var_44]
.text:0040F0AE
.text:0040F0AE loc_40F0AE:                             ; CODE XREF: sub_40E6D0:loc_40F174↓j
.text:0040F0AE                                         ; sub_40E6D0+B8C↓j ...
.text:0040F0AE                 mov     edx, [esp+0BCh+var_50]
.text:0040F0B2                 mov     eax, offset loc_40E949
.text:0040F0B7                 cmp     [esp+0BCh+var_4C], edx
.text:0040F0BB                 jz      loc_40E947
.text:0040F0C1                 mov     esi, [esp+0BCh+var_4C]
.text:0040F0C5
.text:0040F0C5 loc_40F0C5:                             ; CODE XREF: sub_40E6D0+F64↓j
.text:0040F0C5                 movzx   edi, byte ptr [esi]
.text:0040F0C8                 inc     esi
.text:0040F0C9                 mov     [esp+0BCh+var_4C], esi
.text:0040F0CD                 mov     eax, ds:(jpt_40F0D4-18h)[edi*4] ; switch 2 cases
.text:0040F0D4                 jmp     eax             ; switch jump
.text:0040F0D6 ; ---------------------------------------------------------------------------
.text:0040F0D6
.text:0040F0D6 loc_40F0D6:                             ; DATA XREF: .text:0040E6C4↑o
.text:0040F0D6                 mov     edx, [esp+0BCh+arg_8]
.text:0040F0DD                 test    edx, edx
.text:0040F0DF                 jz      loc_40F1B2
.text:0040F0E5                 mov     edi, [esp+0BCh+arg_4]
.text:0040F0EC                 cmp     [esp+0BCh+var_44], edi
.text:0040F0F0
.text:0040F0F0 loc_40F0F0:                             ; CODE XREF: sub_40E6D0+AED↓j
.text:0040F0F0                 jz      loc_40EB22
.text:0040F0F6                 mov     ecx, [esp+0BCh+arg_10]
.text:0040F0FD                 test    ecx, ecx
.text:0040F0FF                 jz      loc_40EB22
.text:0040F105                 mov     ebp, [esp+0BCh+var_38]
.text:0040F10C                 cmp     [esp+0BCh+var_44], ebp
.text:0040F110                 jz      loc_40EB22
.text:0040F116                 mov     edx, [esp+0BCh+var_44]
.text:0040F11A                 dec     edx
.text:0040F11B                 cmp     edx, [esp+0BCh+var_34]
.text:0040F122                 jz      loc_40F1A6
.text:0040F128                 mov     ebx, [esp+0BCh+arg_C]
.text:0040F12F                 dec     ebx
.text:0040F130                 cmp     edx, ebx
.text:0040F132                 jz      short loc_40F199
.text:0040F134                 mov     edi, [esp+0BCh+var_44]
.text:0040F138                 movzx   eax, byte ptr [edi-1]
.text:0040F13C
.text:0040F13C loc_40F13C:                             ; CODE XREF: sub_40E6D0+AD4↓j
.text:0040F13C                                         ; sub_40E6D0+AE0↓j
.text:0040F13C                 cmp     ds:byte_421290[eax], 1
.text:0040F143                 mov     eax, [esp+0BCh+var_34]
.text:0040F14A                 setz    dl
.text:0040F14D                 cmp     [esp+0BCh+var_44], eax
.text:0040F151                 jz      short loc_40F18D
.text:0040F153                 mov     ebp, [esp+0BCh+arg_C]
.text:0040F15A                 dec     ebp
.text:0040F15B                 cmp     [esp+0BCh+var_44], ebp
.text:0040F15F                 jz      short loc_40F180
.text:0040F161                 mov     esi, [esp+0BCh+var_44]
.text:0040F165                 movzx   eax, byte ptr [esi]
.text:0040F168
.text:0040F168 loc_40F168:                             ; CODE XREF: sub_40E6D0+ABB↓j
.text:0040F168                                         ; sub_40E6D0+AC7↓j
.text:0040F168                 cmp     ds:byte_421290[eax], 1
.text:0040F16F                 setz    cl
.text:0040F172                 cmp     dl, cl
.text:0040F174
.text:0040F174 loc_40F174:                             ; CODE XREF: sub_40E6D0+1A07↓j
.text:0040F174                 jz      loc_40F0AE
.text:0040F17A                 jmp     loc_40EB22
.text:0040F17A ; ---------------------------------------------------------------------------
.text:0040F17F                 align 10h
.text:0040F180
.text:0040F180 loc_40F180:                             ; CODE XREF: sub_40E6D0+A8F↑j
.text:0040F180                 mov     ebx, [esp+0BCh+var_34]
.text:0040F187                 movzx   eax, byte ptr [ebx-1]
.text:0040F18B                 jmp     short loc_40F168
.text:0040F18D ; ---------------------------------------------------------------------------
.text:0040F18D
.text:0040F18D loc_40F18D:                             ; CODE XREF: sub_40E6D0+A81↑j
.text:0040F18D                 mov     ecx, [esp+0BCh+arg_C]
.text:0040F194                 movzx   eax, byte ptr [ecx]
.text:0040F197                 jmp     short loc_40F168
.text:0040F199 ; ---------------------------------------------------------------------------
.text:0040F199
.text:0040F199 loc_40F199:                             ; CODE XREF: sub_40E6D0+A62↑j
.text:0040F199                 mov     edx, [esp+0BCh+var_34]
.text:0040F1A0                 movzx   eax, byte ptr [edx-1]
.text:0040F1A4                 jmp     short loc_40F13C
.text:0040F1A6 ; ---------------------------------------------------------------------------
.text:0040F1A6
.text:0040F1A6 loc_40F1A6:                             ; CODE XREF: sub_40E6D0+A52↑j
.text:0040F1A6                 mov     esi, [esp+0BCh+arg_C]
.text:0040F1AD                 movzx   eax, byte ptr [esi]
.text:0040F1B0                 jmp     short loc_40F13C
.text:0040F1B2 ; ---------------------------------------------------------------------------
.text:0040F1B2
.text:0040F1B2 loc_40F1B2:                             ; CODE XREF: sub_40E6D0+A0F↑j
.text:0040F1B2                 mov     eax, [esp+0BCh+arg_C]
.text:0040F1B9                 cmp     [esp+0BCh+var_44], eax
.text:0040F1BD                 jmp     loc_40F0F0
.text:0040F1C2 ; ---------------------------------------------------------------------------
.text:0040F1C2
.text:0040F1C2 loc_40F1C2:                             ; DATA XREF: .text:0040E6C0↑o
.text:0040F1C2                 mov     esi, [esp+0BCh+arg_8]
.text:0040F1C9                 test    esi, esi
.text:0040F1CB                 jz      loc_4108CA
.text:0040F1D1                 mov     ebp, [esp+0BCh+arg_4]
.text:0040F1D8                 cmp     [esp+0BCh+var_44], ebp
.text:0040F1DC
.text:0040F1DC loc_40F1DC:                             ; CODE XREF: sub_40E6D0+2205↓j
.text:0040F1DC                 jz      loc_40F2A0
.text:0040F1E2                 mov     edi, [esp+0BCh+arg_10]
.text:0040F1E9                 test    edi, edi
.text:0040F1EB                 jz      loc_40F2A0
.text:0040F1F1                 mov     edx, [esp+0BCh+var_38]
.text:0040F1F8                 cmp     [esp+0BCh+var_44], edx
.text:0040F1FC                 jz      loc_40F2A0
.text:0040F202                 mov     edx, [esp+0BCh+var_44]
.text:0040F206                 dec     edx
.text:0040F207                 cmp     edx, [esp+0BCh+var_34]
.text:0040F20E                 jz      short loc_40F28D
.text:0040F210                 mov     esi, [esp+0BCh+arg_C]
.text:0040F217                 dec     esi
.text:0040F218                 cmp     edx, esi
.text:0040F21A                 jz      short loc_40F280
.text:0040F21C                 mov     ebx, [esp+0BCh+var_44]
.text:0040F220                 movzx   eax, byte ptr [ebx-1]
.text:0040F224
.text:0040F224 loc_40F224:                             ; CODE XREF: sub_40E6D0+BBB↓j
.text:0040F224                                         ; sub_40E6D0+BC7↓j
.text:0040F224                 cmp     ds:byte_421290[eax], 1
.text:0040F22B                 mov     eax, [esp+0BCh+var_34]
.text:0040F232                 setz    dl
.text:0040F235                 cmp     [esp+0BCh+var_44], eax
.text:0040F239                 jz      short loc_40F274
.text:0040F23B                 mov     ecx, [esp+0BCh+arg_C]
.text:0040F242                 dec     ecx
.text:0040F243                 cmp     [esp+0BCh+var_44], ecx
.text:0040F247                 jz      short loc_40F267
.text:0040F249                 mov     esi, [esp+0BCh+var_44]
.text:0040F24D                 movzx   eax, byte ptr [esi]
.text:0040F250
.text:0040F250 loc_40F250:                             ; CODE XREF: sub_40E6D0+BA2↓j
.text:0040F250                                         ; sub_40E6D0+BAE↓j
.text:0040F250                 cmp     ds:byte_421290[eax], 1
.text:0040F257                 setz    bl
.text:0040F25A                 cmp     dl, bl
.text:0040F25C                 jnz     loc_40F0AE
.text:0040F262                 jmp     loc_40EB22
.text:0040F267 ; ---------------------------------------------------------------------------
.text:0040F267
.text:0040F267 loc_40F267:                             ; CODE XREF: sub_40E6D0+B77↑j
.text:0040F267                 mov     ebp, [esp+0BCh+var_34]
.text:0040F26E                 movzx   eax, byte ptr [ebp-1]
.text:0040F272                 jmp     short loc_40F250
.text:0040F274 ; ---------------------------------------------------------------------------
.text:0040F274
.text:0040F274 loc_40F274:                             ; CODE XREF: sub_40E6D0+B69↑j
.text:0040F274                 mov     edi, [esp+0BCh+arg_C]
.text:0040F27B                 movzx   eax, byte ptr [edi]
.text:0040F27E                 jmp     short loc_40F250
.text:0040F280 ; ---------------------------------------------------------------------------
.text:0040F280
.text:0040F280 loc_40F280:                             ; CODE XREF: sub_40E6D0+B4A↑j
.text:0040F280                 mov     ebp, [esp+0BCh+var_34]
.text:0040F287                 movzx   eax, byte ptr [ebp-1]
.text:0040F28B                 jmp     short loc_40F224
.text:0040F28D ; ---------------------------------------------------------------------------
.text:0040F28D
.text:0040F28D loc_40F28D:                             ; CODE XREF: sub_40E6D0+B3E↑j
.text:0040F28D                 mov     ecx, [esp+0BCh+arg_C]
.text:0040F294                 movzx   eax, byte ptr [ecx]
.text:0040F297                 jmp     short loc_40F224
.text:0040F297 ; ---------------------------------------------------------------------------
.text:0040F299                 align 10h
.text:0040F2A0
.text:0040F2A0 loc_40F2A0:                             ; CODE XREF: sub_40E6D0:loc_40F1DC↑j
.text:0040F2A0                                         ; sub_40E6D0+B1B↑j ...
.text:0040F2A0                 mov     ebp, [esp+0BCh+var_50]
.text:0040F2A4                 mov     eax, offset loc_40E949
.text:0040F2A9                 cmp     [esp+0BCh+var_4C], ebp
.text:0040F2AD                 jz      loc_40E947
.text:0040F2B3                 mov     ebx, [esp+0BCh+var_4C]
.text:0040F2B7                 movzx   esi, byte ptr [ebx]
.text:0040F2BA                 inc     ebx
.text:0040F2BB                 mov     [esp+0BCh+var_4C], ebx
.text:0040F2BF                 mov     eax, ds:jpt_40E947[esi*4] ; switch 6 cases
.text:0040F2C6                 jmp     eax             ; switch jump
.text:0040F2C8 ; ---------------------------------------------------------------------------
.text:0040F2C8
.text:0040F2C8 loc_40F2C8:                             ; DATA XREF: .text:0040E6BC↑o
.text:0040F2C8                 mov     ecx, [esp+0BCh+arg_8]
.text:0040F2CF                 test    ecx, ecx
.text:0040F2D1                 jz      loc_4108BA
.text:0040F2D7                 mov     eax, [esp+0BCh+arg_4]
.text:0040F2DE                 cmp     [esp+0BCh+var_44], eax
.text:0040F2E2
.text:0040F2E2 loc_40F2E2:                             ; CODE XREF: sub_40E6D0+21F5↓j
.text:0040F2E2                 jz      loc_40EB22
.text:0040F2E8                 mov     edi, [esp+0BCh+arg_10]
.text:0040F2EF                 test    edi, edi
.text:0040F2F1                 jz      loc_40EB22
.text:0040F2F7                 mov     edx, [esp+0BCh+var_44]
.text:0040F2FB                 dec     edx
.text:0040F2FC                 cmp     edx, [esp+0BCh+var_34]
.text:0040F303                 jz      loc_4108AA
.text:0040F309                 mov     ebx, [esp+0BCh+arg_C]
.text:0040F310                 dec     ebx
.text:0040F311                 cmp     edx, ebx
.text:0040F313                 jz      loc_41089A
.text:0040F319                 mov     ecx, [esp+0BCh+var_44]
.text:0040F31D                 movzx   eax, byte ptr [ecx-1]
.text:0040F321
.text:0040F321 loc_40F321:                             ; CODE XREF: sub_40E6D0+21D5↓j
.text:0040F321                                         ; sub_40E6D0+21E5↓j
.text:0040F321                 cmp     ds:byte_421290[eax], 1
.text:0040F328                 jnz     loc_40EB22
.text:0040F32E                 mov     eax, [esp+0BCh+var_38]
.text:0040F335                 cmp     [esp+0BCh+var_44], eax
.text:0040F339                 jz      short loc_40F372
.text:0040F33B                 mov     edx, [esp+0BCh+var_34]
.text:0040F342                 cmp     [esp+0BCh+var_44], edx
.text:0040F346                 jz      loc_41088B
.text:0040F34C                 mov     ebp, [esp+0BCh+arg_C]
.text:0040F353                 dec     ebp
.text:0040F354                 cmp     [esp+0BCh+var_44], ebp
.text:0040F358                 jz      loc_41087B
.text:0040F35E                 mov     esi, [esp+0BCh+var_44]
.text:0040F362                 movzx   eax, byte ptr [esi]
.text:0040F365
.text:0040F365 loc_40F365:                             ; CODE XREF: sub_40E6D0+21B6↓j
.text:0040F365                                         ; sub_40E6D0+21C5↓j
.text:0040F365                 cmp     ds:byte_421290[eax], 1
.text:0040F36C                 jz      loc_40EB22
.text:0040F372
.text:0040F372 loc_40F372:                             ; CODE XREF: sub_40E6D0+C69↑j
.text:0040F372                                         ; sub_40E6D0+E23↓j ...
.text:0040F372                 mov     ecx, [esp+0BCh+var_50]
.text:0040F376                 mov     eax, offset loc_40E949
.text:0040F37B                 cmp     [esp+0BCh+var_4C], ecx
.text:0040F37F                 jz      loc_40E947
.text:0040F385                 mov     edi, [esp+0BCh+var_4C]
.text:0040F389                 movzx   edx, byte ptr [edi]
.text:0040F38C                 inc     edi
.text:0040F38D                 mov     [esp+0BCh+var_4C], edi
.text:0040F391                 mov     eax, ds:jpt_40E947[edx*4] ; switch 6 cases
.text:0040F398                 jmp     eax             ; switch jump
.text:0040F39A ; ---------------------------------------------------------------------------
.text:0040F39A
.text:0040F39A loc_40F39A:                             ; DATA XREF: .text:0040E6B8↑o
.text:0040F39A                 mov     ebp, [esp+0BCh+var_38]
.text:0040F3A1                 cmp     [esp+0BCh+var_44], ebp
.text:0040F3A5                 jz      loc_40EB22
.text:0040F3AB                 mov     eax, [esp+0BCh+var_34]
.text:0040F3B2                 cmp     [esp+0BCh+var_44], eax
.text:0040F3B6                 jz      loc_40F477
.text:0040F3BC                 mov     esi, [esp+0BCh+arg_C]
.text:0040F3C3                 dec     esi
.text:0040F3C4                 cmp     [esp+0BCh+var_44], esi
.text:0040F3C8                 jz      loc_40F467
.text:0040F3CE                 mov     edx, [esp+0BCh+var_44]
.text:0040F3D2                 movzx   eax, byte ptr [edx]
.text:0040F3D5
.text:0040F3D5 loc_40F3D5:                             ; CODE XREF: sub_40E6D0+DA2↓j
.text:0040F3D5                                         ; sub_40E6D0+DB1↓j
.text:0040F3D5                 cmp     ds:byte_421290[eax], 1
.text:0040F3DC                 jnz     loc_40EB22
.text:0040F3E2                 mov     edi, [esp+0BCh+arg_8]
.text:0040F3E9                 test    edi, edi
.text:0040F3EB                 jz      short loc_40F45A
.text:0040F3ED                 mov     ebp, [esp+0BCh+arg_4]
.text:0040F3F4                 cmp     [esp+0BCh+var_44], ebp
.text:0040F3F8
.text:0040F3F8 loc_40F3F8:                             ; CODE XREF: sub_40E6D0+D95↓j
.text:0040F3F8                 jz      loc_40F2A0
.text:0040F3FE                 mov     ebx, [esp+0BCh+arg_10]
.text:0040F405                 test    ebx, ebx
.text:0040F407                 jz      loc_40F2A0
.text:0040F40D                 mov     edx, [esp+0BCh+var_44]
.text:0040F411                 dec     edx
.text:0040F412                 cmp     edx, [esp+0BCh+var_34]
.text:0040F419                 jz      short loc_40F44E
.text:0040F41B                 mov     ecx, [esp+0BCh+arg_C]
.text:0040F422                 dec     ecx
.text:0040F423                 cmp     edx, ecx
.text:0040F425                 jz      short loc_40F441
.text:0040F427                 mov     edi, [esp+0BCh+var_44]
.text:0040F42B                 movzx   eax, byte ptr [edi-1]
.text:0040F42F
.text:0040F42F loc_40F42F:                             ; CODE XREF: sub_40E6D0+D7C↓j
.text:0040F42F                                         ; sub_40E6D0+D88↓j
.text:0040F42F                 cmp     ds:byte_421290[eax], 1
.text:0040F436                 jnz     loc_40F2A0
.text:0040F43C                 jmp     loc_40EB22
.text:0040F441 ; ---------------------------------------------------------------------------
.text:0040F441
.text:0040F441 loc_40F441:                             ; CODE XREF: sub_40E6D0+D55↑j
.text:0040F441                 mov     edx, [esp+0BCh+var_34]
.text:0040F448                 movzx   eax, byte ptr [edx-1]
.text:0040F44C                 jmp     short loc_40F42F
.text:0040F44E ; ---------------------------------------------------------------------------
.text:0040F44E
.text:0040F44E loc_40F44E:                             ; CODE XREF: sub_40E6D0+D49↑j
.text:0040F44E                 mov     esi, [esp+0BCh+arg_C]
.text:0040F455                 movzx   eax, byte ptr [esi]
.text:0040F458                 jmp     short loc_40F42F
.text:0040F45A ; ---------------------------------------------------------------------------
.text:0040F45A
.text:0040F45A loc_40F45A:                             ; CODE XREF: sub_40E6D0+D1B↑j
.text:0040F45A                 mov     eax, [esp+0BCh+arg_C]
.text:0040F461                 cmp     [esp+0BCh+var_44], eax
.text:0040F465                 jmp     short loc_40F3F8
.text:0040F467 ; ---------------------------------------------------------------------------
.text:0040F467
.text:0040F467 loc_40F467:                             ; CODE XREF: sub_40E6D0+CF8↑j
.text:0040F467                 mov     ecx, [esp+0BCh+var_34]
.text:0040F46E                 movzx   eax, byte ptr [ecx-1]
.text:0040F472                 jmp     loc_40F3D5
.text:0040F477 ; ---------------------------------------------------------------------------
.text:0040F477
.text:0040F477 loc_40F477:                             ; CODE XREF: sub_40E6D0+CE6↑j
.text:0040F477                 mov     ebx, [esp+0BCh+arg_C]
.text:0040F47E                 movzx   eax, byte ptr [ebx]
.text:0040F481                 jmp     loc_40F3D5
.text:0040F486 ; ---------------------------------------------------------------------------
.text:0040F486
.text:0040F486 loc_40F486:                             ; DATA XREF: .text:0040E6B4↑o
.text:0040F486                 mov     ebp, [esp+0BCh+var_48]
.text:0040F48A                 cmp     [esp+0BCh+var_44], ebp
.text:0040F48E                 jz      loc_40F511
.text:0040F494
.text:0040F494 loc_40F494:                             ; CODE XREF: sub_40E6D0+E62↓j
.text:0040F494                 mov     esi, [esp+0BCh+var_34]
.text:0040F49B                 cmp     [esp+0BCh+var_44], esi
.text:0040F49F                 jz      short loc_40F505
.text:0040F4A1                 mov     edi, [esp+0BCh+arg_C]
.text:0040F4A8                 dec     edi
.text:0040F4A9                 cmp     [esp+0BCh+var_44], edi
.text:0040F4AD                 jz      short loc_40F4F8
.text:0040F4AF                 mov     ebp, [esp+0BCh+var_44]
.text:0040F4B3                 movzx   eax, byte ptr [ebp+0]
.text:0040F4B7
.text:0040F4B7 loc_40F4B7:                             ; CODE XREF: sub_40E6D0+E33↓j
.text:0040F4B7                                         ; sub_40E6D0+E3F↓j
.text:0040F4B7                 cmp     ds:byte_421290[eax], 1
.text:0040F4BE                 jz      loc_40EB22
.text:0040F4C4                 mov     eax, [esp+0BCh+var_8C]
.text:0040F4C8                 test    eax, eax
.text:0040F4CA                 jnz     short loc_40F4EF
.text:0040F4CC                 mov     [esp+0BCh+var_8C], 1
.text:0040F4D4                 mov     eax, [esp+0BCh+var_60]
.text:0040F4D8                 mov     ebx, [esp+0BCh+var_64]
.text:0040F4DC                 cmp     eax, ebx
.text:0040F4DE                 ja      short loc_40F4EF
.text:0040F4E0
.text:0040F4E0 loc_40F4E0:                             ; CODE XREF: sub_40E6D0+E1D↓j
.text:0040F4E0                 mov     esi, [esp+0BCh+var_78]
.text:0040F4E4                 or      byte ptr [esi+eax*4], 18h
.text:0040F4E8                 inc     eax
.text:0040F4E9                 cmp     eax, [esp+0BCh+var_64]
.text:0040F4ED                 jbe     short loc_40F4E0
.text:0040F4EF
.text:0040F4EF loc_40F4EF:                             ; CODE XREF: sub_40E6D0+DFA↑j
.text:0040F4EF                                         ; sub_40E6D0+E0E↑j ...
.text:0040F4EF                 inc     [esp+0BCh+var_44]
.text:0040F4F3                 jmp     loc_40F372
.text:0040F4F8 ; ---------------------------------------------------------------------------
.text:0040F4F8
.text:0040F4F8 loc_40F4F8:                             ; CODE XREF: sub_40E6D0+DDD↑j
.text:0040F4F8                 mov     edx, [esp+0BCh+var_34]
.text:0040F4FF                 movzx   eax, byte ptr [edx-1]
.text:0040F503                 jmp     short loc_40F4B7
.text:0040F505 ; ---------------------------------------------------------------------------
.text:0040F505
.text:0040F505 loc_40F505:                             ; CODE XREF: sub_40E6D0+DCF↑j
.text:0040F505                 mov     ecx, [esp+0BCh+arg_C]
.text:0040F50C                 movzx   eax, byte ptr [ecx]
.text:0040F50F                 jmp     short loc_40F4B7
.text:0040F511 ; ---------------------------------------------------------------------------
.text:0040F511
.text:0040F511 loc_40F511:                             ; CODE XREF: sub_40E6D0+DBE↑j
.text:0040F511                                         ; sub_40E6D0+E60↓j
.text:0040F511                 mov     eax, [esp+0BCh+var_40]
.text:0040F515                 cmp     [esp+0BCh+var_48], eax
.text:0040F519                 jz      loc_40EB22
.text:0040F51F                 mov     [esp+0BCh+var_48], eax
.text:0040F523                 mov     ebx, [esp+0BCh+arg_C]
.text:0040F52A                 cmp     ebx, eax
.text:0040F52C                 mov     [esp+0BCh+var_44], ebx
.text:0040F530                 jz      short loc_40F511
.text:0040F532                 jmp     loc_40F494
.text:0040F537 ; ---------------------------------------------------------------------------
.text:0040F537
.text:0040F537 loc_40F537:                             ; DATA XREF: .text:0040E6B0↑o
.text:0040F537                 mov     eax, [esp+0BCh+var_48]
.text:0040F53B                 cmp     [esp+0BCh+var_44], eax
.text:0040F53F                 jz      loc_40F5C1
.text:0040F545
.text:0040F545 loc_40F545:                             ; CODE XREF: sub_40E6D0+F12↓j
.text:0040F545                 mov     edx, [esp+0BCh+var_34]
.text:0040F54C                 cmp     [esp+0BCh+var_44], edx
.text:0040F550                 jz      short loc_40F5B5
.text:0040F552                 mov     ebp, [esp+0BCh+arg_C]
.text:0040F559                 dec     ebp
.text:0040F55A                 cmp     [esp+0BCh+var_44], ebp
.text:0040F55E                 jz      short loc_40F5A8
.text:0040F560                 mov     esi, [esp+0BCh+var_44]
.text:0040F564                 movzx   eax, byte ptr [esi]
.text:0040F567
.text:0040F567 loc_40F567:                             ; CODE XREF: sub_40E6D0+EE3↓j
.text:0040F567                                         ; sub_40E6D0+EEF↓j
.text:0040F567                 cmp     ds:byte_421290[eax], 1
.text:0040F56E                 jnz     loc_40EB22
.text:0040F574                 mov     eax, [esp+0BCh+var_8C]
.text:0040F578                 test    eax, eax
.text:0040F57A                 jnz     short loc_40F59F
.text:0040F57C                 mov     [esp+0BCh+var_8C], 1
.text:0040F584                 mov     eax, [esp+0BCh+var_60]
.text:0040F588                 mov     ecx, [esp+0BCh+var_64]
.text:0040F58C                 cmp     eax, ecx
.text:0040F58E                 ja      short loc_40F59F
.text:0040F590
.text:0040F590 loc_40F590:                             ; CODE XREF: sub_40E6D0+ECD↓j
.text:0040F590                 mov     edi, [esp+0BCh+var_78]
.text:0040F594                 or      byte ptr [edi+eax*4], 18h
.text:0040F598                 inc     eax
.text:0040F599                 cmp     eax, [esp+0BCh+var_64]
.text:0040F59D                 jbe     short loc_40F590
.text:0040F59F
.text:0040F59F loc_40F59F:                             ; CODE XREF: sub_40E6D0+EAA↑j
.text:0040F59F                                         ; sub_40E6D0+EBE↑j
.text:0040F59F                 inc     [esp+0BCh+var_44]
.text:0040F5A3                 jmp     loc_40EEFB      ; jumptable 0040E947 case 0
.text:0040F5A3                                         ; jumptable 0040F2C6 case 0
.text:0040F5A3                                         ; jumptable 0040F398 case 0
.text:0040F5A8 ; ---------------------------------------------------------------------------
.text:0040F5A8
.text:0040F5A8 loc_40F5A8:                             ; CODE XREF: sub_40E6D0+E8E↑j
.text:0040F5A8                 mov     ebx, [esp+0BCh+var_34]
.text:0040F5AF                 movzx   eax, byte ptr [ebx-1]
.text:0040F5B3                 jmp     short loc_40F567
.text:0040F5B5 ; ---------------------------------------------------------------------------
.text:0040F5B5
.text:0040F5B5 loc_40F5B5:                             ; CODE XREF: sub_40E6D0+E80↑j
.text:0040F5B5                 mov     edi, [esp+0BCh+arg_C]
.text:0040F5BC                 movzx   eax, byte ptr [edi]
.text:0040F5BF                 jmp     short loc_40F567
.text:0040F5C1 ; ---------------------------------------------------------------------------
.text:0040F5C1
.text:0040F5C1 loc_40F5C1:                             ; CODE XREF: sub_40E6D0+E6F↑j
.text:0040F5C1                                         ; sub_40E6D0+F10↓j
.text:0040F5C1                 mov     ebx, [esp+0BCh+var_40]
.text:0040F5C5                 cmp     [esp+0BCh+var_48], ebx
.text:0040F5C9                 jz      loc_40EB22
.text:0040F5CF                 mov     [esp+0BCh+var_48], ebx
.text:0040F5D3                 mov     ecx, [esp+0BCh+arg_C]
.text:0040F5DA                 cmp     ecx, ebx
.text:0040F5DC                 mov     [esp+0BCh+var_44], ecx
.text:0040F5E0                 jz      short loc_40F5C1
.text:0040F5E2                 jmp     loc_40F545
.text:0040F5E7 ; ---------------------------------------------------------------------------
.text:0040F5E7
.text:0040F5E7 loc_40F5E7:                             ; DATA XREF: .text:0040E6AC↑o
.text:0040F5E7                 mov     esi, [esp+0BCh+var_4C]
.text:0040F5EB                 movsx   ecx, byte ptr [esi+1]
.text:0040F5EF                 movzx   eax, byte ptr [esi]
.text:0040F5F2                 add     esi, 2
.text:0040F5F5                 mov     ebp, esi
.text:0040F5F7                 shl     ecx, 8
.text:0040F5FA                 lea     edi, [ecx+eax]
.text:0040F5FD                 add     ebp, edi
.text:0040F5FF                 mov     [esp+0BCh+var_30], ebp
.text:0040F606                 mov     eax, offset loc_40E949
.text:0040F60B                 movsx   edx, byte ptr [esi+1]
.text:0040F60F                 movzx   ecx, byte ptr [esi]
.text:0040F612                 add     esi, 2
.text:0040F615                 mov     [esp+0BCh+var_4C], esi
.text:0040F619                 shl     edx, 8
.text:0040F61C                 add     ecx, edx
.text:0040F61E                 mov     [ebp+0], cl
.text:0040F621                 mov     edi, [esp+0BCh+var_30]
.text:0040F628                 sar     ecx, 8
.text:0040F62B                 mov     [edi+1], cl
.text:0040F62E                 mov     edx, [esp+0BCh+var_50]
.text:0040F632                 cmp     esi, edx
.text:0040F634                 jnz     loc_40F0C5
.text:0040F63A                 jmp     loc_40E947
.text:0040F63F ; ---------------------------------------------------------------------------
.text:0040F63F
.text:0040F63F loc_40F63F:                             ; DATA XREF: .text:0040E6A8↑o
.text:0040F63F                 mov     esi, [esp+0BCh+var_4C]
.text:0040F643                 movsx   edi, byte ptr [esi+3]
.text:0040F647                 movzx   ebp, byte ptr [esi+2]
.text:0040F64B                 shl     edi, 8
.text:0040F64E                 add     ebp, edi
.text:0040F650                 jnz     short loc_40F65C
.text:0040F652                 add     [esp+0BCh+var_4C], 4
.text:0040F657                 jmp     loc_40EEFB      ; jumptable 0040E947 case 0
.text:0040F657                                         ; jumptable 0040F2C6 case 0
.text:0040F657                                         ; jumptable 0040F398 case 0
.text:0040F65C ; ---------------------------------------------------------------------------
.text:0040F65C
.text:0040F65C loc_40F65C:                             ; CODE XREF: sub_40E6D0+F80↑j
.text:0040F65C                 dec     ebp
.text:0040F65D                 mov     ebx, ebp
.text:0040F65F                 sar     ebp, 8
.text:0040F662                 mov     [esi+2], bl
.text:0040F665                 mov     ecx, ebp
.text:0040F667                 mov     [esi+3], cl
.text:0040F66A
.text:0040F66A loc_40F66A:                             ; CODE XREF: sub_40E6D0+14FE↓j
.text:0040F66A                                         ; sub_40E6D0+15A0↓j ...
.text:0040F66A                 mov     ebx, [esp+0BCh+var_4C]
.text:0040F66E                 movsx   ecx, byte ptr [ebx+1]
.text:0040F672                 movzx   edx, byte ptr [ebx]
.text:0040F675                 shl     ecx, 8
.text:0040F678                 lea     esi, [ecx+edx]
.text:0040F67B                 lea     edi, [esi+ebx+2]
.text:0040F67F                 mov     [esp+0BCh+var_4C], edi
.text:0040F683                 jmp     loc_40F0AE
.text:0040F688 ; ---------------------------------------------------------------------------
.text:0040F688
.text:0040F688 loc_40F688:                             ; DATA XREF: .text:0040E6A4↑o
.text:0040F688                 mov     ecx, [esp+0BCh+var_4C]
.text:0040F68C                 movsx   ebx, byte ptr [ecx+3]
.text:0040F690                 movzx   ebp, byte ptr [ecx+2]
.text:0040F694                 shl     ebx, 8
.text:0040F697                 add     ebp, ebx
.text:0040F699                 test    ebp, ebp
.text:0040F69B                 jle     short loc_40F6B9
.text:0040F69D                 dec     ebp
.text:0040F69E                 add     ecx, 2
.text:0040F6A1                 mov     eax, ebp
.text:0040F6A3                 mov     [ecx], al
.text:0040F6A5                 sar     ebp, 8
.text:0040F6A8                 mov     edx, ebp
.text:0040F6AA                 mov     [ecx+1], dl
.text:0040F6AD                 add     ecx, 2
.text:0040F6B0                 mov     [esp+0BCh+var_4C], ecx
.text:0040F6B4                 jmp     loc_40EEFB      ; jumptable 0040E947 case 0
.text:0040F6B4                                         ; jumptable 0040F2C6 case 0
.text:0040F6B4                                         ; jumptable 0040F398 case 0
.text:0040F6B9 ; ---------------------------------------------------------------------------
.text:0040F6B9
.text:0040F6B9 loc_40F6B9:                             ; CODE XREF: sub_40E6D0+FCB↑j
.text:0040F6B9                 test    ebp, ebp
.text:0040F6BB                 jnz     loc_40EEFB      ; jumptable 0040E947 case 0
.text:0040F6BB                                         ; jumptable 0040F2C6 case 0
.text:0040F6BB                                         ; jumptable 0040F398 case 0
.text:0040F6C1                 mov     ebp, [esp+0BCh+var_4C]
.text:0040F6C5                 mov     byte ptr [ebp+2], 0
.text:0040F6C9                 mov     byte ptr [ebp+3], 0
.text:0040F6CD
.text:0040F6CD loc_40F6CD:                             ; CODE XREF: sub_40E6D0:loc_40FFEC↓j
.text:0040F6CD                 mov     edx, [esp+0BCh+var_4C]
.text:0040F6D1                 movsx   ecx, byte ptr [edx+1]
.text:0040F6D5                 movzx   ebp, byte ptr [edx]
.text:0040F6D8                 add     edx, 2
.text:0040F6DB                 mov     ebx, edx
.text:0040F6DD                 mov     [esp+0BCh+var_4C], edx
.text:0040F6E1                 shl     ecx, 8
.text:0040F6E4                 add     ebp, ecx
.text:0040F6E6                 cmp     edx, [esp+0BCh+var_50]
.text:0040F6EA                 mov     [esp+0BCh+var_30], edx
.text:0040F6F1                 jnb     short loc_40F722
.text:0040F6F3                 cmp     byte ptr [edx], 0
.text:0040F6F6                 jnz     short loc_40F713
.text:0040F6F8                 lea     eax, [edx+1]
.text:0040F6FB
.text:0040F6FB loc_40F6FB:                             ; CODE XREF: sub_40E6D0+1041↓j
.text:0040F6FB                 mov     [esp+0BCh+var_30], eax
.text:0040F702                 mov     ebx, eax
.text:0040F704                 lea     eax, [eax+1]
.text:0040F707                 cmp     ebx, [esp+0BCh+var_50]
.text:0040F70B                 jnb     short loc_40F722
.text:0040F70D                 cmp     byte ptr [eax-1], 0
.text:0040F711                 jz      short loc_40F6FB
.text:0040F713
.text:0040F713 loc_40F713:                             ; CODE XREF: sub_40E6D0+1026↑j
.text:0040F713                 cmp     ebx, [esp+0BCh+var_50]
.text:0040F717                 jnb     short loc_40F722
.text:0040F719                 cmp     byte ptr [ebx], 6
.text:0040F71C                 jz      loc_40F8AA
.text:0040F722
.text:0040F722 loc_40F722:                             ; CODE XREF: sub_40E6D0+1021↑j
.text:0040F722                                         ; sub_40E6D0+103B↑j ...
.text:0040F722                 mov     edi, [esp+0BCh+var_60]
.text:0040F726                 mov     ebx, [esp+0BCh+var_64]
.text:0040F72A                 mov     ecx, [esp+0BCh+var_28]
.text:0040F731                 mov     esi, [esp+0BCh+var_24]
.text:0040F738                 sub     ebx, edi
.text:0040F73A                 mov     edx, ecx
.text:0040F73C                 lea     edi, [ebx+ebx]
.text:0040F73F                 sub     edx, esi
.text:0040F741                 lea     eax, [ebx+edi+7]
.text:0040F745                 cmp     edx, eax
.text:0040F747                 jnb     short loc_40F7BD
.text:0040F749                 mov     edi, eax
.text:0040F74B
.text:0040F74B loc_40F74B:                             ; CODE XREF: sub_40E6D0+10EB↓j
.text:0040F74B                 mov     edx, dword_420080
.text:0040F751                 lea     ebx, [edx+edx*8]
.text:0040F754                 lea     esi, [edx+ebx*2]
.text:0040F757                 cmp     ecx, esi
.text:0040F759                 ja      loc_40EE51
.text:0040F75F                 lea     edx, ds:0[ecx*8]
.text:0040F766                 mov     [esp+0BCh+Size], edx ; Size
.text:0040F769                 call    malloc
.text:0040F76E                 mov     [esp+0BCh+Size], eax ; void *
.text:0040F771                 mov     ebx, [esp+0BCh+var_28]
.text:0040F778                 mov     esi, [esp+0BCh+Src]
.text:0040F77F                 shl     ebx, 2
.text:0040F782                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0040F786                 mov     [esp+0BCh+var_B8], esi ; Src
.text:0040F78A                 call    memcpy
.text:0040F78F                 mov     [esp+0BCh+Src], eax
.text:0040F796                 test    eax, eax
.text:0040F798                 jz      loc_40EE51
.text:0040F79E                 mov     ebx, [esp+0BCh+var_28]
.text:0040F7A5                 mov     esi, [esp+0BCh+var_24]
.text:0040F7AC                 add     ebx, ebx
.text:0040F7AE                 mov     [esp+0BCh+var_28], ebx
.text:0040F7B5                 mov     ecx, ebx
.text:0040F7B7                 sub     ebx, esi
.text:0040F7B9                 cmp     ebx, edi
.text:0040F7BB                 jb      short loc_40F74B
.text:0040F7BD
.text:0040F7BD loc_40F7BD:                             ; CODE XREF: sub_40E6D0+1077↑j
.text:0040F7BD                 mov     ecx, [esp+0BCh+var_60]
.text:0040F7C1                 mov     eax, [esp+0BCh+var_64]
.text:0040F7C5                 cmp     ecx, eax
.text:0040F7C7                 ja      loc_40F8A1
.text:0040F7CD                 mov     ebx, [esp+0BCh+Src]
.text:0040F7D4
.text:0040F7D4 loc_40F7D4:                             ; CODE XREF: sub_40E6D0+1162↓j
.text:0040F7D4                 mov     eax, [esp+0BCh+var_68]
.text:0040F7D8                 mov     edi, [eax+ecx*4]
.text:0040F7DB                 mov     [ebx+esi*4], edi
.text:0040F7DE                 mov     edx, [esp+0BCh+var_6C]
.text:0040F7E2                 mov     edi, [esp+0BCh+var_24]
.text:0040F7E9                 mov     ebx, [esp+0BCh+Src]
.text:0040F7F0                 mov     esi, [edx+ecx*4]
.text:0040F7F3                 inc     edi
.text:0040F7F4                 mov     [esp+0BCh+var_24], edi
.text:0040F7FB                 mov     [ebx+edi*4], esi
.text:0040F7FE                 mov     edi, [esp+0BCh+var_24]
.text:0040F805                 mov     eax, [esp+0BCh+var_78]
.text:0040F809                 mov     ebx, [esp+0BCh+Src]
.text:0040F810                 inc     edi
.text:0040F811                 mov     [esp+0BCh+var_24], edi
.text:0040F818                 mov     esi, [eax+ecx*4]
.text:0040F81B                 inc     ecx
.text:0040F81C                 mov     [ebx+edi*4], esi
.text:0040F81F                 mov     esi, [esp+0BCh+var_24]
.text:0040F826                 inc     esi
.text:0040F827                 cmp     ecx, [esp+0BCh+var_64]
.text:0040F82B                 mov     [esp+0BCh+var_24], esi
.text:0040F832                 jbe     short loc_40F7D4
.text:0040F834
.text:0040F834 loc_40F834:                             ; CODE XREF: sub_40E6D0+11D8↓j
.text:0040F834                 mov     eax, [esp+0BCh+var_60]
.text:0040F838                 mov     [ebx+esi*4], eax
.text:0040F83B                 mov     ecx, [esp+0BCh+var_24]
.text:0040F842                 mov     edi, [esp+0BCh+var_64]
.text:0040F846                 mov     edx, [esp+0BCh+Src]
.text:0040F84D                 inc     ecx
.text:0040F84E                 mov     [esp+0BCh+var_24], ecx
.text:0040F855                 mov     [edx+ecx*4], edi
.text:0040F858                 mov     eax, [esp+0BCh+var_24]
.text:0040F85F                 mov     esi, [esp+0BCh+var_4C]
.text:0040F863                 mov     edi, [esp+0BCh+Src]
.text:0040F86A                 inc     eax
.text:0040F86B                 add     esi, ebp
.text:0040F86D                 mov     [esp+0BCh+var_24], eax
.text:0040F874                 mov     [edi+eax*4], esi
.text:0040F877                 mov     ecx, [esp+0BCh+var_24]
.text:0040F87E                 mov     ebp, [esp+0BCh+Src]
.text:0040F885                 mov     ebx, [esp+0BCh+var_44]
.text:0040F889                 inc     ecx
.text:0040F88A                 mov     [esp+0BCh+var_24], ecx
.text:0040F891                 mov     [ebp+ecx*4+0], ebx
.text:0040F895                 inc     [esp+0BCh+var_24]
.text:0040F89C                 jmp     loc_40EEFB      ; jumptable 0040E947 case 0
.text:0040F89C                                         ; jumptable 0040F2C6 case 0
.text:0040F89C                                         ; jumptable 0040F398 case 0
.text:0040F8A1 ; ---------------------------------------------------------------------------
.text:0040F8A1
.text:0040F8A1 loc_40F8A1:                             ; CODE XREF: sub_40E6D0+10F7↑j
.text:0040F8A1                 mov     ebx, [esp+0BCh+Src]
.text:0040F8A8                 jmp     short loc_40F834
.text:0040F8AA ; ---------------------------------------------------------------------------
.text:0040F8AA
.text:0040F8AA loc_40F8AA:                             ; CODE XREF: sub_40E6D0+104C↑j
.text:0040F8AA                 movzx   edx, byte ptr [ebx+1]
.text:0040F8AE                 movzx   edi, byte ptr [ebx+2]
.text:0040F8B2                 cmp     [esp+0BCh+var_60], 101h
.text:0040F8BA                 lea     ebx, [edi+edx]
.text:0040F8BD                 mov     [esp+0BCh+var_64], ebx
.text:0040F8C1                 jnz     loc_40F722
.text:0040F8C7                 mov     [esp+0BCh+var_60], edx
.text:0040F8CB                 jmp     loc_40F722
.text:0040F8D0 ; ---------------------------------------------------------------------------
.text:0040F8D0
.text:0040F8D0 loc_40F8D0:                             ; DATA XREF: .text:0040E6A0↑o
.text:0040F8D0                 mov     eax, [esp+0BCh+var_60]
.text:0040F8D4                 mov     edx, [esp+0BCh+var_64]
.text:0040F8D8                 mov     ecx, [esp+0BCh+var_28]
.text:0040F8DF                 mov     esi, [esp+0BCh+var_24]
.text:0040F8E6                 sub     edx, eax
.text:0040F8E8                 mov     ebp, ecx
.text:0040F8EA                 lea     ebx, [edx+edx]
.text:0040F8ED                 sub     ebp, esi
.text:0040F8EF                 lea     eax, [edx+ebx+7]
.text:0040F8F3                 cmp     ebp, eax
.text:0040F8F5                 jnb     short loc_40F96B
.text:0040F8F7                 mov     edi, eax
.text:0040F8F9
.text:0040F8F9 loc_40F8F9:                             ; CODE XREF: sub_40E6D0+1299↓j
.text:0040F8F9                 mov     edx, dword_420080
.text:0040F8FF                 lea     ebp, [edx+edx*8]
.text:0040F902                 lea     esi, [edx+ebp*2]
.text:0040F905                 cmp     ecx, esi
.text:0040F907                 ja      loc_40EE51
.text:0040F90D                 lea     ebp, ds:0[ecx*8]
.text:0040F914                 mov     [esp+0BCh+Size], ebp ; Size
.text:0040F917                 call    malloc
.text:0040F91C                 mov     [esp+0BCh+Size], eax ; void *
.text:0040F91F                 mov     esi, [esp+0BCh+var_28]
.text:0040F926                 mov     ebx, [esp+0BCh+Src]
.text:0040F92D                 shl     esi, 2
.text:0040F930                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040F934                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:0040F938                 call    memcpy
.text:0040F93D                 mov     [esp+0BCh+Src], eax
.text:0040F944                 test    eax, eax
.text:0040F946                 jz      loc_40EE51
.text:0040F94C                 mov     edx, [esp+0BCh+var_28]
.text:0040F953                 mov     esi, [esp+0BCh+var_24]
.text:0040F95A                 add     edx, edx
.text:0040F95C                 mov     [esp+0BCh+var_28], edx
.text:0040F963                 mov     ecx, edx
.text:0040F965                 sub     edx, esi
.text:0040F967                 cmp     edx, edi
.text:0040F969                 jb      short loc_40F8F9
.text:0040F96B
.text:0040F96B loc_40F96B:                             ; CODE XREF: sub_40E6D0+1225↑j
.text:0040F96B                 mov     ecx, [esp+0BCh+var_60]
.text:0040F96F                 mov     edi, [esp+0BCh+var_64]
.text:0040F973                 cmp     ecx, edi
.text:0040F975                 ja      loc_40FA4D
.text:0040F97B                 mov     ebx, [esp+0BCh+Src]
.text:0040F982
.text:0040F982 loc_40F982:                             ; CODE XREF: sub_40E6D0+1310↓j
.text:0040F982                 mov     eax, [esp+0BCh+var_68]
.text:0040F986                 mov     edi, [eax+ecx*4]
.text:0040F989                 mov     [ebx+esi*4], edi
.text:0040F98C                 mov     edx, [esp+0BCh+var_6C]
.text:0040F990                 mov     edi, [esp+0BCh+var_24]
.text:0040F997                 mov     ebx, [esp+0BCh+Src]
.text:0040F99E                 mov     ebp, [edx+ecx*4]
.text:0040F9A1                 inc     edi
.text:0040F9A2                 mov     [esp+0BCh+var_24], edi
.text:0040F9A9                 mov     [ebx+edi*4], ebp
.text:0040F9AC                 mov     ebp, [esp+0BCh+var_24]
.text:0040F9B3                 mov     eax, [esp+0BCh+var_78]
.text:0040F9B7                 mov     ebx, [esp+0BCh+Src]
.text:0040F9BE                 inc     ebp
.text:0040F9BF                 mov     [esp+0BCh+var_24], ebp
.text:0040F9C6                 mov     esi, [eax+ecx*4]
.text:0040F9C9                 inc     ecx
.text:0040F9CA                 mov     [ebx+ebp*4], esi
.text:0040F9CD                 mov     esi, [esp+0BCh+var_24]
.text:0040F9D4                 inc     esi
.text:0040F9D5                 cmp     ecx, [esp+0BCh+var_64]
.text:0040F9D9                 mov     [esp+0BCh+var_24], esi
.text:0040F9E0                 jbe     short loc_40F982
.text:0040F9E2
.text:0040F9E2 loc_40F9E2:                             ; CODE XREF: sub_40E6D0+1384↓j
.text:0040F9E2                 mov     edi, [esp+0BCh+var_60]
.text:0040F9E6                 mov     [ebx+esi*4], edi
.text:0040F9E9                 mov     edx, [esp+0BCh+var_24]
.text:0040F9F0                 mov     ebp, [esp+0BCh+Src]
.text:0040F9F7                 mov     esi, [esp+0BCh+var_64]
.text:0040F9FB                 inc     edx
.text:0040F9FC                 mov     [esp+0BCh+var_24], edx
.text:0040FA03                 mov     [ebp+edx*4+0], esi
.text:0040FA07                 mov     ebx, [esp+0BCh+var_24]
.text:0040FA0E                 mov     ecx, [esp+0BCh+Src]
.text:0040FA15                 inc     ebx
.text:0040FA16                 mov     [esp+0BCh+var_24], ebx
.text:0040FA1D                 mov     dword ptr [ecx+ebx*4], 0
.text:0040FA24
.text:0040FA24 loc_40FA24:                             ; CODE XREF: sub_40E6D0+190E↓j
.text:0040FA24                 mov     eax, [esp+0BCh+var_24]
.text:0040FA2B                 mov     ecx, [esp+0BCh+Src]
.text:0040FA32                 inc     eax
.text:0040FA33                 mov     [esp+0BCh+var_24], eax
.text:0040FA3A                 mov     dword ptr [ecx+eax*4], 0
.text:0040FA41                 inc     [esp+0BCh+var_24]
.text:0040FA48                 jmp     loc_40F372
.text:0040FA4D ; ---------------------------------------------------------------------------
.text:0040FA4D
.text:0040FA4D loc_40FA4D:                             ; CODE XREF: sub_40E6D0+12A5↑j
.text:0040FA4D                 mov     ebx, [esp+0BCh+Src]
.text:0040FA54                 jmp     short loc_40F9E2
.text:0040FA56 ; ---------------------------------------------------------------------------
.text:0040FA56
.text:0040FA56 loc_40FA56:                             ; DATA XREF: .text:0040E69C↑o
.text:0040FA56                 mov     eax, [esp+0BCh+var_60]
.text:0040FA5A                 mov     ebx, [esp+0BCh+var_64]
.text:0040FA5E                 mov     ecx, [esp+0BCh+var_28]
.text:0040FA65                 mov     esi, [esp+0BCh+var_24]
.text:0040FA6C                 sub     ebx, eax
.text:0040FA6E                 mov     edx, ecx
.text:0040FA70                 lea     ebp, [ebx+ebx]
.text:0040FA73                 sub     edx, esi
.text:0040FA75                 lea     eax, [ebx+ebp+7]
.text:0040FA79                 cmp     edx, eax
.text:0040FA7B                 jnb     short loc_40FAF1
.text:0040FA7D                 mov     edi, eax
.text:0040FA7F
.text:0040FA7F loc_40FA7F:                             ; CODE XREF: sub_40E6D0+141F↓j
.text:0040FA7F                 mov     edx, dword_420080
.text:0040FA85                 lea     ebx, [edx+edx*8]
.text:0040FA88                 lea     esi, [edx+ebx*2]
.text:0040FA8B                 cmp     ecx, esi
.text:0040FA8D                 ja      loc_40EE51
.text:0040FA93                 lea     ebx, ds:0[ecx*8]
.text:0040FA9A                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040FA9D                 call    malloc
.text:0040FAA2                 mov     [esp+0BCh+Size], eax ; void *
.text:0040FAA5                 mov     esi, [esp+0BCh+var_28]
.text:0040FAAC                 mov     ebp, [esp+0BCh+Src]
.text:0040FAB3                 shl     esi, 2
.text:0040FAB6                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040FABA                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:0040FABE                 call    memcpy
.text:0040FAC3                 mov     [esp+0BCh+Src], eax
.text:0040FACA                 test    eax, eax
.text:0040FACC                 jz      loc_40EE51
.text:0040FAD2                 mov     edx, [esp+0BCh+var_28]
.text:0040FAD9                 mov     esi, [esp+0BCh+var_24]
.text:0040FAE0                 add     edx, edx
.text:0040FAE2                 mov     [esp+0BCh+var_28], edx
.text:0040FAE9                 mov     ecx, edx
.text:0040FAEB                 sub     edx, esi
.text:0040FAED                 cmp     edx, edi
.text:0040FAEF                 jb      short loc_40FA7F
.text:0040FAF1
.text:0040FAF1 loc_40FAF1:                             ; CODE XREF: sub_40E6D0+13AB↑j
.text:0040FAF1                 mov     ecx, [esp+0BCh+var_60]
.text:0040FAF5                 mov     edi, [esp+0BCh+var_64]
.text:0040FAF9                 cmp     ecx, edi
.text:0040FAFB                 ja      loc_40FBD3
.text:0040FB01                 mov     ebx, [esp+0BCh+Src]
.text:0040FB08
.text:0040FB08 loc_40FB08:                             ; CODE XREF: sub_40E6D0+1496↓j
.text:0040FB08                 mov     eax, [esp+0BCh+var_68]
.text:0040FB0C                 mov     edi, [eax+ecx*4]
.text:0040FB0F                 mov     [ebx+esi*4], edi
.text:0040FB12                 mov     edx, [esp+0BCh+var_6C]
.text:0040FB16                 mov     edi, [esp+0BCh+var_24]
.text:0040FB1D                 mov     ebx, [esp+0BCh+Src]
.text:0040FB24                 mov     ebp, [edx+ecx*4]
.text:0040FB27                 inc     edi
.text:0040FB28                 mov     [esp+0BCh+var_24], edi
.text:0040FB2F                 mov     [ebx+edi*4], ebp
.text:0040FB32                 mov     ebp, [esp+0BCh+var_24]
.text:0040FB39                 mov     eax, [esp+0BCh+var_78]
.text:0040FB3D                 mov     ebx, [esp+0BCh+Src]
.text:0040FB44                 inc     ebp
.text:0040FB45                 mov     [esp+0BCh+var_24], ebp
.text:0040FB4C                 mov     esi, [eax+ecx*4]
.text:0040FB4F                 inc     ecx
.text:0040FB50                 mov     [ebx+ebp*4], esi
.text:0040FB53                 mov     esi, [esp+0BCh+var_24]
.text:0040FB5A                 inc     esi
.text:0040FB5B                 cmp     ecx, [esp+0BCh+var_64]
.text:0040FB5F                 mov     [esp+0BCh+var_24], esi
.text:0040FB66                 jbe     short loc_40FB08
.text:0040FB68
.text:0040FB68 loc_40FB68:                             ; CODE XREF: sub_40E6D0+150A↓j
.text:0040FB68                 mov     ebp, [esp+0BCh+var_60]
.text:0040FB6C                 mov     [ebx+esi*4], ebp
.text:0040FB6F                 mov     eax, [esp+0BCh+var_24]
.text:0040FB76                 mov     edi, [esp+0BCh+Src]
.text:0040FB7D                 mov     esi, [esp+0BCh+var_64]
.text:0040FB81                 inc     eax
.text:0040FB82                 mov     [esp+0BCh+var_24], eax
.text:0040FB89                 mov     [edi+eax*4], esi
.text:0040FB8C                 mov     edx, [esp+0BCh+var_24]
.text:0040FB93                 mov     ebp, [esp+0BCh+Src]
.text:0040FB9A                 inc     edx
.text:0040FB9B                 mov     [esp+0BCh+var_24], edx
.text:0040FBA2                 mov     dword ptr [ebp+edx*4+0], 0
.text:0040FBAA                 mov     ebx, [esp+0BCh+var_24]
.text:0040FBB1                 mov     ecx, [esp+0BCh+Src]
.text:0040FBB8                 inc     ebx
.text:0040FBB9                 mov     [esp+0BCh+var_24], ebx
.text:0040FBC0                 mov     dword ptr [ecx+ebx*4], 0
.text:0040FBC7                 inc     [esp+0BCh+var_24]
.text:0040FBCE                 jmp     loc_40F66A
.text:0040FBD3 ; ---------------------------------------------------------------------------
.text:0040FBD3
.text:0040FBD3 loc_40FBD3:                             ; CODE XREF: sub_40E6D0+142B↑j
.text:0040FBD3                 mov     ebx, [esp+0BCh+Src]
.text:0040FBDA                 jmp     short loc_40FB68
.text:0040FBDC ; ---------------------------------------------------------------------------
.text:0040FBDC
.text:0040FBDC loc_40FBDC:                             ; DATA XREF: .text:0040E698↑o
.text:0040FBDC                 mov     esi, [esp+0BCh+var_4C]
.text:0040FBE0                 movsx   ebx, byte ptr [esi+1]
.text:0040FBE4                 movzx   ebp, byte ptr [esi]
.text:0040FBE7                 add     esi, 2
.text:0040FBEA                 mov     [esp+0BCh+var_4C], esi
.text:0040FBEE                 shl     ebx, 8
.text:0040FBF1                 add     ebp, ebx
.text:0040FBF3
.text:0040FBF3 loc_40FBF3:                             ; CODE XREF: sub_40E6D0+153A↓j
.text:0040FBF3                                         ; sub_40E6D0+154C↓j
.text:0040FBF3                 lea     edx, [esi+2]
.text:0040FBF6                 cmp     edx, [esp+0BCh+var_50]
.text:0040FBFA                 jnb     short def_40F0D4 ; jumptable 0040F0D4 default case
.text:0040FBFC                 movzx   ecx, byte ptr [esi]
.text:0040FBFF                 sub     cl, 6
.text:0040FC02                 cmp     cl, 1
.text:0040FC05                 ja      short def_40F0D4 ; jumptable 0040F0D4 default case
.text:0040FC07                 add     esi, 3
.text:0040FC0A                 jmp     short loc_40FBF3
.text:0040FC0C ; ---------------------------------------------------------------------------
.text:0040FC0C
.text:0040FC0C def_40F0D4:                             ; CODE XREF: sub_40E6D0+152A↑j
.text:0040FC0C                                         ; sub_40E6D0+1535↑j
.text:0040FC0C                 lea     eax, [esi+6]    ; jumptable 0040F0D4 default case
.text:0040FC0F                 cmp     eax, [esp+0BCh+var_50]
.text:0040FC13                 jnb     short loc_40FC1E
.text:0040FC15                 cmp     byte ptr [esi], 13h
.text:0040FC18                 jnz     short loc_40FC1E
.text:0040FC1A                 mov     esi, eax
.text:0040FC1C                 jmp     short loc_40FBF3
.text:0040FC1E ; ---------------------------------------------------------------------------
.text:0040FC1E
.text:0040FC1E loc_40FC1E:                             ; CODE XREF: sub_40E6D0+1543↑j
.text:0040FC1E                                         ; sub_40E6D0+1548↑j
.text:0040FC1E                 mov     edi, [esp+0BCh+var_4C]
.text:0040FC22                 add     edi, ebp
.text:0040FC24                 cmp     esi, [esp+0BCh+var_50]
.text:0040FC28                 mov     [esp+0BCh+var_30], edi
.text:0040FC2F                 jz      loc_40FDB5
.text:0040FC35                 movzx   eax, byte ptr [esi]
.text:0040FC38                 cmp     al, 2
.text:0040FC3A                 jz      loc_40FE6B
.text:0040FC40                 mov     ebp, [esp+0BCh+arg_0]
.text:0040FC47                 test    byte ptr [ebp+1Ch], 80h
.text:0040FC4B                 jz      short loc_40FC55
.text:0040FC4D                 cmp     al, 0Ah
.text:0040FC4F                 jz      loc_40FDFB
.text:0040FC55
.text:0040FC55 loc_40FC55:                             ; CODE XREF: sub_40E6D0+157B↑j
.text:0040FC55                 cmp     al, 4
.text:0040FC57                 jz      loc_40FD05
.text:0040FC5D
.text:0040FC5D loc_40FC5D:                             ; CODE XREF: sub_40E6D0+1652↓j
.text:0040FC5D                                         ; sub_40E6D0:loc_40FD64↓j ...
.text:0040FC5D                 sub     [esp+0BCh+var_4C], 2
.text:0040FC62                 mov     esi, [esp+0BCh+var_4C]
.text:0040FC66                 cmp     byte ptr [esi-1], 11h
.text:0040FC6A                 jz      short loc_40FC75
.text:0040FC6C                 mov     byte ptr [esi-1], 0Dh
.text:0040FC70                 jmp     loc_40F66A
.text:0040FC75 ; ---------------------------------------------------------------------------
.text:0040FC75
.text:0040FC75 loc_40FC75:                             ; CODE XREF: sub_40E6D0+159A↑j
.text:0040FC75                                         ; DATA XREF: .text:0040E694↑o
.text:0040FC75                 mov     edi, [esp+0BCh+var_24]
.text:0040FC7C                 mov     ebx, [esp+0BCh+Src]
.text:0040FC83                 lea     eax, [edi-3]
.text:0040FC86                 mov     [esp+0BCh+var_24], eax
.text:0040FC8D                 lea     ecx, [edi-4]
.text:0040FC90                 mov     ebp, [ebx+eax*4]
.text:0040FC93                 mov     [esp+0BCh+var_24], ecx
.text:0040FC9A                 mov     edi, [ebx+ecx*4]
.text:0040FC9D                 mov     ecx, ebp
.text:0040FC9F                 cmp     ebp, edi
.text:0040FCA1                 jb      short loc_40FCF8
.text:0040FCA3
.text:0040FCA3 loc_40FCA3:                             ; CODE XREF: sub_40E6D0+1626↓j
.text:0040FCA3                 mov     eax, [esp+0BCh+var_24]
.text:0040FCAA                 dec     eax
.text:0040FCAB                 mov     [esp+0BCh+var_24], eax
.text:0040FCB2                 mov     edx, [ebx+eax*4]
.text:0040FCB5                 mov     ebx, [esp+0BCh+var_94]
.text:0040FCB9                 mov     [ebx+ecx*4], edx
.text:0040FCBC                 mov     edx, [esp+0BCh+var_24]
.text:0040FCC3                 mov     ebx, [esp+0BCh+Src]
.text:0040FCCA                 mov     esi, [esp+0BCh+var_90]
.text:0040FCCE                 lea     ebp, [edx-1]
.text:0040FCD1                 mov     [esp+0BCh+var_24], ebp
.text:0040FCD8                 mov     eax, [ebx+ebp*4]
.text:0040FCDB                 mov     ebp, [esp+0BCh+var_90]
.text:0040FCDF                 mov     [ebp+ecx*4+0], eax
.text:0040FCE3                 lea     ebp, [edx-2]
.text:0040FCE6                 mov     [esp+0BCh+var_24], ebp
.text:0040FCED                 mov     edx, [ebx+ebp*4]
.text:0040FCF0                 mov     [esi+ecx*4], edx
.text:0040FCF3                 dec     ecx
.text:0040FCF4                 cmp     ecx, edi
.text:0040FCF6                 jnb     short loc_40FCA3
.text:0040FCF8
.text:0040FCF8 loc_40FCF8:                             ; CODE XREF: sub_40E6D0+15D1↑j
.text:0040FCF8                 mov     [esp+0BCh+var_8C], 0
.text:0040FD00                 jmp     loc_40F66A
.text:0040FD05 ; ---------------------------------------------------------------------------
.text:0040FD05
.text:0040FD05 loc_40FD05:                             ; CODE XREF: sub_40E6D0+1587↑j
.text:0040FD05                 mov     ebx, [esp+0BCh+var_30]
.text:0040FD0C                 mov     edi, ebx
.text:0040FD0E                 cmp     byte ptr [ebx+3], 2
.text:0040FD12                 jz      loc_40FDC2
.text:0040FD18
.text:0040FD18 loc_40FD18:                             ; CODE XREF: sub_40E6D0+1718↓j
.text:0040FD18                 movzx   eax, byte ptr [edi+3]
.text:0040FD1C                 cmp     al, 5
.text:0040FD1E                 jz      short loc_40FD77
.text:0040FD20                 cmp     al, 4
.text:0040FD22                 jnz     loc_40FC5D
.text:0040FD28                 movzx   eax, byte ptr [esi+1]
.text:0040FD2C                 xor     edx, edx
.text:0040FD2E                 movzx   ebx, al
.text:0040FD31                 mov     [esp+0BCh+var_A5], al
.text:0040FD35                 cmp     edx, ebx
.text:0040FD37                 jge     short loc_40FD55
.text:0040FD39                 movzx   ecx, byte ptr [edi+4]
.text:0040FD3D                 cmp     edx, ecx
.text:0040FD3F                 jge     short loc_40FD55
.text:0040FD41
.text:0040FD41 loc_40FD41:                             ; CODE XREF: sub_40E6D0+1683↓j
.text:0040FD41                 movzx   eax, byte ptr [edx+edi+5]
.text:0040FD46                 test    [edx+esi+2], al
.text:0040FD4A                 jnz     short loc_40FD55
.text:0040FD4C                 inc     edx
.text:0040FD4D                 cmp     edx, ebx
.text:0040FD4F                 jge     short loc_40FD55
.text:0040FD51                 cmp     edx, ecx
.text:0040FD53                 jl      short loc_40FD41
.text:0040FD55
.text:0040FD55 loc_40FD55:                             ; CODE XREF: sub_40E6D0+1667↑j
.text:0040FD55                                         ; sub_40E6D0+166F↑j ...
.text:0040FD55                 movzx   ebp, [esp+0BCh+var_A5]
.text:0040FD5A                 cmp     edx, ebp
.text:0040FD5C                 jz      short loc_40FD6A
.text:0040FD5E                 movzx   ebx, byte ptr [edi+4]
.text:0040FD62                 cmp     edx, ebx
.text:0040FD64
.text:0040FD64 loc_40FD64:                             ; CODE XREF: sub_40E6D0+1784↓j
.text:0040FD64                 jnz     loc_40FC5D
.text:0040FD6A
.text:0040FD6A loc_40FD6A:                             ; CODE XREF: sub_40E6D0+168C↑j
.text:0040FD6A                 mov     edx, [esp+0BCh+var_4C]
.text:0040FD6E                 mov     byte ptr [edx-3], 11h
.text:0040FD72                 jmp     loc_40FC5D
.text:0040FD77 ; ---------------------------------------------------------------------------
.text:0040FD77
.text:0040FD77 loc_40FD77:                             ; CODE XREF: sub_40E6D0+164E↑j
.text:0040FD77                 movzx   ebx, byte ptr [esi+1]
.text:0040FD7B                 xor     ecx, ecx
.text:0040FD7D                 movzx   eax, bl
.text:0040FD80                 cmp     ecx, eax
.text:0040FD82                 jge     short loc_40FDAA
.text:0040FD84                 mov     ebp, eax
.text:0040FD86
.text:0040FD86 loc_40FD86:                             ; CODE XREF: sub_40E6D0+16D8↓j
.text:0040FD86                 movzx   edx, byte ptr [ecx+esi+2]
.text:0040FD8B                 test    dl, dl
.text:0040FD8D                 jz      short loc_40FDA5
.text:0040FD8F                 movzx   eax, byte ptr [edi+4]
.text:0040FD93                 cmp     ecx, eax
.text:0040FD95                 jge     short loc_40FDAA
.text:0040FD97                 movzx   eax, byte ptr [ecx+edi+5]
.text:0040FD9C                 movzx   edx, dl
.text:0040FD9F                 not     eax
.text:0040FDA1                 test    eax, edx
.text:0040FDA3                 jnz     short loc_40FDAA
.text:0040FDA5
.text:0040FDA5 loc_40FDA5:                             ; CODE XREF: sub_40E6D0+16BD↑j
.text:0040FDA5                 inc     ecx
.text:0040FDA6                 cmp     ecx, ebp
.text:0040FDA8                 jl      short loc_40FD86
.text:0040FDAA
.text:0040FDAA loc_40FDAA:                             ; CODE XREF: sub_40E6D0+16B2↑j
.text:0040FDAA                                         ; sub_40E6D0+16C5↑j ...
.text:0040FDAA                 movzx   esi, bl
.text:0040FDAD                 cmp     ecx, esi
.text:0040FDAF                 jnz     loc_40FC5D
.text:0040FDB5
.text:0040FDB5 loc_40FDB5:                             ; CODE XREF: sub_40E6D0+155F↑j
.text:0040FDB5                 mov     ecx, [esp+0BCh+var_4C]
.text:0040FDB9                 mov     byte ptr [ecx-3], 11h
.text:0040FDBD                 jmp     loc_40FC5D
.text:0040FDC2 ; ---------------------------------------------------------------------------
.text:0040FDC2
.text:0040FDC2 loc_40FDC2:                             ; CODE XREF: sub_40E6D0+1642↑j
.text:0040FDC2                 movzx   edx, byte ptr [esi+1]
.text:0040FDC6                 movzx   ecx, byte ptr [ebx+5]
.text:0040FDCA                 shl     edx, 3
.text:0040FDCD                 movzx   ebp, cl
.text:0040FDD0                 cmp     edx, ebp
.text:0040FDD2                 jle     short loc_40FDEE
.text:0040FDD4                 mov     dl, cl
.text:0040FDD6                 shr     dl, 3
.text:0040FDD9                 and     ecx, 7
.text:0040FDDC                 movzx   ebx, dl
.text:0040FDDF                 movzx   eax, byte ptr [ebx+esi+2]
.text:0040FDE4                 sar     eax, cl
.text:0040FDE6                 test    al, 1
.text:0040FDE8                 jnz     loc_40FD18
.text:0040FDEE
.text:0040FDEE loc_40FDEE:                             ; CODE XREF: sub_40E6D0+1702↑j
.text:0040FDEE                 mov     edi, [esp+0BCh+var_4C]
.text:0040FDF2                 mov     byte ptr [edi-3], 11h
.text:0040FDF6                 jmp     loc_40FC5D
.text:0040FDFB ; ---------------------------------------------------------------------------
.text:0040FDFB
.text:0040FDFB loc_40FDFB:                             ; CODE XREF: sub_40E6D0+157F↑j
.text:0040FDFB                 mov     cl, 0Ah
.text:0040FDFD
.text:0040FDFD loc_40FDFD:                             ; CODE XREF: sub_40E6D0+179F↓j
.text:0040FDFD                 mov     ebx, [esp+0BCh+var_30]
.text:0040FE04                 mov     esi, ebx
.text:0040FE06                 cmp     byte ptr [ebx+3], 2
.text:0040FE0A                 jz      short loc_40FE59
.text:0040FE0C
.text:0040FE0C loc_40FE0C:                             ; CODE XREF: sub_40E6D0+178C↓j
.text:0040FE0C                 movzx   edx, byte ptr [esi+3]
.text:0040FE10                 mov     bl, dl
.text:0040FE12                 sub     bl, 4
.text:0040FE15                 cmp     bl, 1
.text:0040FE18                 ja      loc_40FC5D
.text:0040FE1E                 movzx   edi, byte ptr [esi+4]
.text:0040FE22                 xor     ebx, ebx
.text:0040FE24                 cmp     dl, 5
.text:0040FE27                 setz    bl
.text:0040FE2A                 movzx   eax, cl
.text:0040FE2D                 shl     edi, 3
.text:0040FE30                 cmp     eax, edi
.text:0040FE32                 jnb     short loc_40FE52
.text:0040FE34                 mov     al, cl
.text:0040FE36                 shr     al, 3
.text:0040FE39                 and     ecx, 7
.text:0040FE3C                 movzx   edx, al
.text:0040FE3F                 movzx   eax, byte ptr [edx+esi+5]
.text:0040FE44                 sar     eax, cl
.text:0040FE46                 test    al, 1
.text:0040FE48                 jz      short loc_40FE52
.text:0040FE4A                 test    ebx, ebx
.text:0040FE4C                 setz    cl
.text:0040FE4F                 movzx   ebx, cl
.text:0040FE52
.text:0040FE52 loc_40FE52:                             ; CODE XREF: sub_40E6D0+1762↑j
.text:0040FE52                                         ; sub_40E6D0+1778↑j
.text:0040FE52                 test    ebx, ebx
.text:0040FE54                 jmp     loc_40FD64
.text:0040FE59 ; ---------------------------------------------------------------------------
.text:0040FE59
.text:0040FE59 loc_40FE59:                             ; CODE XREF: sub_40E6D0+173A↑j
.text:0040FE59                 cmp     [ebx+5], cl
.text:0040FE5C                 jz      short loc_40FE0C
.text:0040FE5E                 mov     esi, [esp+0BCh+var_4C]
.text:0040FE62                 mov     byte ptr [esi-3], 11h
.text:0040FE66                 jmp     loc_40FC5D
.text:0040FE6B ; ---------------------------------------------------------------------------
.text:0040FE6B
.text:0040FE6B loc_40FE6B:                             ; CODE XREF: sub_40E6D0+156A↑j
.text:0040FE6B                 movzx   ecx, byte ptr [esi+2]
.text:0040FE6F                 jmp     short loc_40FDFD
.text:0040FE71 ; ---------------------------------------------------------------------------
.text:0040FE71
.text:0040FE71 loc_40FE71:                             ; DATA XREF: .text:0040E690↑o
.text:0040FE71                 mov     edx, [esp+0BCh+var_4C]
.text:0040FE75                 mov     edi, [esp+0BCh+var_60]
.text:0040FE79                 mov     ebx, [esp+0BCh+var_64]
.text:0040FE7D                 movsx   ecx, byte ptr [edx+1]
.text:0040FE81                 mov     esi, [esp+0BCh+var_24]
.text:0040FE88                 sub     ebx, edi
.text:0040FE8A                 movzx   ebp, byte ptr [edx]
.text:0040FE8D                 lea     edi, [ebx+ebx]
.text:0040FE90                 shl     ecx, 8
.text:0040FE93                 add     edx, 2
.text:0040FE96                 lea     eax, [ebx+edi+7]
.text:0040FE9A                 mov     [esp+0BCh+var_4C], edx
.text:0040FE9E                 add     ebp, ecx
.text:0040FEA0                 mov     ecx, [esp+0BCh+var_28]
.text:0040FEA7                 mov     edx, ecx
.text:0040FEA9                 sub     edx, esi
.text:0040FEAB                 cmp     edx, eax
.text:0040FEAD                 jnb     short loc_40FF23
.text:0040FEAF                 mov     edi, eax
.text:0040FEB1
.text:0040FEB1 loc_40FEB1:                             ; CODE XREF: sub_40E6D0+1851↓j
.text:0040FEB1                 mov     edx, dword_420080
.text:0040FEB7                 lea     esi, [edx+edx*8]
.text:0040FEBA                 lea     ebx, [edx+esi*2]
.text:0040FEBD                 cmp     ecx, ebx
.text:0040FEBF                 ja      loc_40EE51
.text:0040FEC5                 lea     edx, ds:0[ecx*8]
.text:0040FECC                 mov     [esp+0BCh+Size], edx ; Size
.text:0040FECF                 call    malloc
.text:0040FED4                 mov     [esp+0BCh+Size], eax ; void *
.text:0040FED7                 mov     esi, [esp+0BCh+var_28]
.text:0040FEDE                 mov     ebx, [esp+0BCh+Src]
.text:0040FEE5                 shl     esi, 2
.text:0040FEE8                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040FEEC                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:0040FEF0                 call    memcpy
.text:0040FEF5                 mov     [esp+0BCh+Src], eax
.text:0040FEFC                 test    eax, eax
.text:0040FEFE                 jz      loc_40EE51
.text:0040FF04                 mov     ebx, [esp+0BCh+var_28]
.text:0040FF0B                 mov     esi, [esp+0BCh+var_24]
.text:0040FF12                 add     ebx, ebx
.text:0040FF14                 mov     [esp+0BCh+var_28], ebx
.text:0040FF1B                 mov     ecx, ebx
.text:0040FF1D                 sub     ebx, esi
.text:0040FF1F                 cmp     ebx, edi
.text:0040FF21                 jb      short loc_40FEB1
.text:0040FF23
.text:0040FF23 loc_40FF23:                             ; CODE XREF: sub_40E6D0+17DD↑j
.text:0040FF23                 mov     ecx, [esp+0BCh+var_60]
.text:0040FF27                 mov     eax, [esp+0BCh+var_64]
.text:0040FF2B                 cmp     ecx, eax
.text:0040FF2D                 ja      loc_40FFE3
.text:0040FF33                 mov     ebx, [esp+0BCh+Src]
.text:0040FF3A
.text:0040FF3A loc_40FF3A:                             ; CODE XREF: sub_40E6D0+18C8↓j
.text:0040FF3A                 mov     eax, [esp+0BCh+var_68]
.text:0040FF3E                 mov     edi, [eax+ecx*4]
.text:0040FF41                 mov     [ebx+esi*4], edi
.text:0040FF44                 mov     edx, [esp+0BCh+var_6C]
.text:0040FF48                 mov     edi, [esp+0BCh+var_24]
.text:0040FF4F                 mov     ebx, [esp+0BCh+Src]
.text:0040FF56                 mov     esi, [edx+ecx*4]
.text:0040FF59                 inc     edi
.text:0040FF5A                 mov     [esp+0BCh+var_24], edi
.text:0040FF61                 mov     [ebx+edi*4], esi
.text:0040FF64                 mov     edi, [esp+0BCh+var_24]
.text:0040FF6B                 mov     eax, [esp+0BCh+var_78]
.text:0040FF6F                 mov     ebx, [esp+0BCh+Src]
.text:0040FF76                 inc     edi
.text:0040FF77                 mov     [esp+0BCh+var_24], edi
.text:0040FF7E                 mov     esi, [eax+ecx*4]
.text:0040FF81                 inc     ecx
.text:0040FF82                 mov     [ebx+edi*4], esi
.text:0040FF85                 mov     esi, [esp+0BCh+var_24]
.text:0040FF8C                 inc     esi
.text:0040FF8D                 cmp     ecx, [esp+0BCh+var_64]
.text:0040FF91                 mov     [esp+0BCh+var_24], esi
.text:0040FF98                 jbe     short loc_40FF3A
.text:0040FF9A
.text:0040FF9A loc_40FF9A:                             ; CODE XREF: sub_40E6D0+191A↓j
.text:0040FF9A                 mov     eax, [esp+0BCh+var_60]
.text:0040FF9E                 mov     [ebx+esi*4], eax
.text:0040FFA1                 mov     edi, [esp+0BCh+var_24]
.text:0040FFA8                 mov     edx, [esp+0BCh+Src]
.text:0040FFAF                 mov     esi, [esp+0BCh+var_64]
.text:0040FFB3                 inc     edi
.text:0040FFB4                 mov     [esp+0BCh+var_24], edi
.text:0040FFBB                 mov     [edx+edi*4], esi
.text:0040FFBE                 mov     ebx, [esp+0BCh+var_4C]
.text:0040FFC2                 mov     ecx, [esp+0BCh+var_24]
.text:0040FFC9                 add     ebx, ebp
.text:0040FFCB                 mov     ebp, [esp+0BCh+Src]
.text:0040FFD2                 inc     ecx
.text:0040FFD3                 mov     [esp+0BCh+var_24], ecx
.text:0040FFDA                 mov     [ebp+ecx*4+0], ebx
.text:0040FFDE                 jmp     loc_40FA24
.text:0040FFE3 ; ---------------------------------------------------------------------------
.text:0040FFE3
.text:0040FFE3 loc_40FFE3:                             ; CODE XREF: sub_40E6D0+185D↑j
.text:0040FFE3                 mov     ebx, [esp+0BCh+Src]
.text:0040FFEA                 jmp     short loc_40FF9A
.text:0040FFEC ; ---------------------------------------------------------------------------
.text:0040FFEC
.text:0040FFEC loc_40FFEC:                             ; DATA XREF: .text:0040E68C↑o
.text:0040FFEC                 jmp     loc_40F6CD
.text:0040FFF1 ; ---------------------------------------------------------------------------
.text:0040FFF1
.text:0040FFF1 loc_40FFF1:                             ; DATA XREF: .text:0040E688↑o
.text:0040FFF1                 jmp     loc_40F66A
.text:0040FFF6 ; ---------------------------------------------------------------------------
.text:0040FFF6
.text:0040FFF6 loc_40FFF6:                             ; DATA XREF: .text:0040E680↑o
.text:0040FFF6                 mov     eax, [esp+0BCh+var_38]
.text:0040FFFD                 cmp     [esp+0BCh+var_44], eax
.text:00410001                 jz      loc_40F372
.text:00410007                 jmp     loc_40EB22
.text:00410007 ; ---------------------------------------------------------------------------
.text:0041000C                 align 10h
.text:00410010
.text:00410010 loc_410010:                             ; DATA XREF: .text:0040E67C↑o
.text:00410010                 mov     ecx, [esp+0BCh+arg_8]
.text:00410017                 test    ecx, ecx
.text:00410019                 jz      short loc_410040
.text:0041001B                 mov     ebx, [esp+0BCh+arg_4]
.text:00410022                 cmp     [esp+0BCh+var_44], ebx
.text:00410026
.text:00410026 loc_410026:                             ; CODE XREF: sub_40E6D0+197B↓j
.text:00410026                 jz      loc_40F2A0
.text:0041002C                 mov     edi, [esp+0BCh+arg_10]
.text:00410033                 test    edi, edi
.text:00410035
.text:00410035 loc_410035:                             ; CODE XREF: sub_40E6D0+19D7↓j
.text:00410035                 jz      loc_40F2A0
.text:0041003B                 jmp     loc_40EB22
.text:00410040 ; ---------------------------------------------------------------------------
.text:00410040
.text:00410040 loc_410040:                             ; CODE XREF: sub_40E6D0+1949↑j
.text:00410040                 mov     esi, [esp+0BCh+arg_C]
.text:00410047                 cmp     [esp+0BCh+var_44], esi
.text:0041004B                 jmp     short loc_410026
.text:0041004D ; ---------------------------------------------------------------------------
.text:0041004D
.text:0041004D loc_41004D:                             ; DATA XREF: .text:0040E678↑o
.text:0041004D                 mov     ebx, [esp+0BCh+var_38]
.text:00410054                 cmp     [esp+0BCh+var_44], ebx
.text:00410058                 jz      short loc_41009C
.text:0041005A                 mov     edi, [esp+0BCh+var_34]
.text:00410061                 cmp     [esp+0BCh+var_44], edi
.text:00410065                 jz      short loc_410090
.text:00410067                 mov     edx, [esp+0BCh+var_44]
.text:0041006B                 cmp     byte ptr [edx], 0Ah
.text:0041006E
.text:0041006E loc_41006E:                             ; CODE XREF: sub_40E6D0+19CA↓j
.text:0041006E                                         ; sub_40E6D0+1A14↓j
.text:0041006E                 jnz     loc_40EB22
.text:00410074                 mov     ebp, [esp+0BCh+arg_0]
.text:0041007B                 test    byte ptr [ebp+1Ch], 80h
.text:0041007F                 jnz     loc_40EEFB      ; jumptable 0040E947 case 0
.text:0041007F                                         ; jumptable 0040F2C6 case 0
.text:0041007F                                         ; jumptable 0040F398 case 0
.text:00410085                 jmp     loc_40EB22
.text:00410085 ; ---------------------------------------------------------------------------
.text:0041008A                 align 10h
.text:00410090
.text:00410090 loc_410090:                             ; CODE XREF: sub_40E6D0+1995↑j
.text:00410090                 mov     eax, [esp+0BCh+arg_C]
.text:00410097                 cmp     byte ptr [eax], 0Ah
.text:0041009A                 jmp     short loc_41006E
.text:0041009C ; ---------------------------------------------------------------------------
.text:0041009C
.text:0041009C loc_41009C:                             ; CODE XREF: sub_40E6D0+1988↑j
.text:0041009C                 mov     esi, [esp+0BCh+arg_0]
.text:004100A3                 test    byte ptr [esi+1Ch], 40h
.text:004100A7                 jmp     short loc_410035
.text:004100A9 ; ---------------------------------------------------------------------------
.text:004100A9
.text:004100A9 loc_4100A9:                             ; DATA XREF: .text:0040E674↑o
.text:004100A9                 mov     ebx, [esp+0BCh+arg_8]
.text:004100B0                 test    ebx, ebx
.text:004100B2                 jz      short loc_4100E6
.text:004100B4                 mov     edi, [esp+0BCh+arg_4]
.text:004100BB                 cmp     [esp+0BCh+var_44], edi
.text:004100BF
.text:004100BF loc_4100BF:                             ; CODE XREF: sub_40E6D0+1A21↓j
.text:004100BF                 jz      short loc_4100CC
.text:004100C1                 mov     edx, [esp+0BCh+arg_10]
.text:004100C8                 test    edx, edx
.text:004100CA                 jnz     short loc_4100DC
.text:004100CC
.text:004100CC loc_4100CC:                             ; CODE XREF: sub_40E6D0:loc_4100BF↑j
.text:004100CC                 mov     ebp, [esp+0BCh+arg_0]
.text:004100D3                 test    byte ptr [ebp+1Ch], 20h
.text:004100D7                 jmp     loc_40F174
.text:004100DC ; ---------------------------------------------------------------------------
.text:004100DC
.text:004100DC loc_4100DC:                             ; CODE XREF: sub_40E6D0+19FA↑j
.text:004100DC                 mov     ecx, [esp+0BCh+var_44]
.text:004100E0                 cmp     byte ptr [ecx-1], 0Ah
.text:004100E4                 jmp     short loc_41006E
.text:004100E6 ; ---------------------------------------------------------------------------
.text:004100E6
.text:004100E6 loc_4100E6:                             ; CODE XREF: sub_40E6D0+19E2↑j
.text:004100E6                 mov     eax, [esp+0BCh+arg_C]
.text:004100ED                 cmp     [esp+0BCh+var_44], eax
.text:004100F1                 jmp     short loc_4100BF
.text:004100F3 ; ---------------------------------------------------------------------------
.text:004100F3
.text:004100F3 loc_4100F3:                             ; DATA XREF: .text:0040E670↑o
.text:004100F3                 mov     eax, [esp+0BCh+var_4C]
.text:004100F7                 mov     ecx, [esp+0BCh+var_68]
.text:004100FB                 movzx   esi, byte ptr [eax]
.text:004100FE                 inc     [esp+0BCh+var_4C]
.text:00410102                 mov     edi, [ecx+esi*4]
.text:00410105                 mov     [esp+0BCh+var_A4], esi
.text:00410109                 cmp     edi, offset unk_421390
.text:0041010F                 jz      loc_40EB22
.text:00410115                 mov     ebp, [esp+0BCh+var_6C]
.text:00410119                 mov     eax, [ebp+esi*4+0]
.text:0041011D                 cmp     eax, offset unk_421390
.text:00410122                 jz      loc_40EB22
.text:00410128                 mov     [esp+0BCh+var_A0], edi
.text:0041012C                 mov     esi, [esp+0BCh+arg_8]
.text:00410133                 xor     ecx, ecx
.text:00410135                 test    esi, esi
.text:00410137                 jz      short loc_41014D
.text:00410139                 cmp     [esp+0BCh+arg_4], edi
.text:00410140                 ja      short loc_41014D
.text:00410142                 mov     edx, [esp+0BCh+var_34]
.text:00410149                 cmp     edi, edx
.text:0041014B                 jbe     short loc_410152
.text:0041014D
.text:0041014D loc_41014D:                             ; CODE XREF: sub_40E6D0+1A67↑j
.text:0041014D                                         ; sub_40E6D0+1A70↑j
.text:0041014D                 mov     ecx, 1
.text:00410152
.text:00410152 loc_410152:                             ; CODE XREF: sub_40E6D0+1A7B↑j
.text:00410152                 mov     edi, [esp+0BCh+arg_8]
.text:00410159                 xor     edx, edx
.text:0041015B                 test    edi, edi
.text:0041015D                 jz      short loc_410176
.text:0041015F                 cmp     [esp+0BCh+arg_4], eax
.text:00410166                 ja      short loc_410176
.text:00410168                 cmp     eax, [esp+0BCh+var_34]
.text:0041016F                 ja      short loc_410176
.text:00410171                 mov     edx, 1
.text:00410176
.text:00410176 loc_410176:                             ; CODE XREF: sub_40E6D0+1A8D↑j
.text:00410176                                         ; sub_40E6D0+1A96↑j ...
.text:00410176                 cmp     ecx, edx
.text:00410178                 mov     ebx, eax
.text:0041017A                 jnz     short loc_410183
.text:0041017C                 mov     ebx, [esp+0BCh+var_3C]
.text:00410183
.text:00410183 loc_410183:                             ; CODE XREF: sub_40E6D0+1AAA↑j
.text:00410183                                         ; sub_40E6D0+1B21↓j ...
.text:00410183                 cmp     [esp+0BCh+var_A0], ebx
.text:00410187                 jz      loc_410256
.text:0041018D
.text:0041018D loc_41018D:                             ; CODE XREF: sub_40E6D0+1BAC↓j
.text:0041018D                                         ; sub_40E6D0+1BB5↓j
.text:0041018D                 mov     eax, [esp+0BCh+var_48]
.text:00410191                 cmp     [esp+0BCh+var_44], eax
.text:00410195                 jz      loc_410230
.text:0041019B
.text:0041019B loc_41019B:                             ; CODE XREF: sub_40E6D0+1B81↓j
.text:0041019B                 mov     ecx, [esp+0BCh+var_44]
.text:0041019F                 mov     ebp, [esp+0BCh+var_48]
.text:004101A3                 mov     edx, [esp+0BCh+var_A0]
.text:004101A7                 sub     ebp, ecx
.text:004101A9                 mov     ecx, ebx
.text:004101AB                 sub     ecx, edx
.text:004101AD                 cmp     ebp, ecx
.text:004101AF                 jle     short loc_4101B3
.text:004101B1                 mov     ebp, ecx
.text:004101B3
.text:004101B3 loc_4101B3:                             ; CODE XREF: sub_40E6D0+1ADF↑j
.text:004101B3                 mov     esi, [esp+0BCh+var_58]
.text:004101B7                 test    esi, esi
.text:004101B9                 jz      short loc_41021F
.text:004101BB                 mov     [esp+0BCh+var_B4], ebp
.text:004101BF                 mov     edx, [esp+0BCh+var_58]
.text:004101C3                 mov     eax, [esp+0BCh+var_A0]
.text:004101C7                 mov     edi, [esp+0BCh+var_44]
.text:004101CB                 mov     [esp+0BCh+var_B0], edx
.text:004101CF                 mov     [esp+0BCh+var_B8], eax
.text:004101D3                 mov     [esp+0BCh+Size], edi
.text:004101D6                 call    sub_410D90
.text:004101DB                 test    eax, eax
.text:004101DD
.text:004101DD loc_4101DD:                             ; CODE XREF: sub_40E6D0+1B5E↓j
.text:004101DD                 jnz     loc_40EB22
.text:004101E3                 add     [esp+0BCh+var_44], ebp
.text:004101E7                 add     [esp+0BCh+var_A0], ebp
.text:004101EB                 mov     ebp, [esp+0BCh+var_8C]
.text:004101EF                 test    ebp, ebp
.text:004101F1                 jnz     short loc_410183
.text:004101F3                 mov     [esp+0BCh+var_8C], 1
.text:004101FB                 mov     eax, [esp+0BCh+var_60]
.text:004101FF                 mov     ecx, [esp+0BCh+var_64]
.text:00410203                 cmp     eax, ecx
.text:00410205                 ja      loc_410183
.text:0041020B
.text:0041020B loc_41020B:                             ; CODE XREF: sub_40E6D0+1B48↓j
.text:0041020B                 mov     esi, [esp+0BCh+var_78]
.text:0041020F                 or      byte ptr [esi+eax*4], 18h
.text:00410213                 inc     eax
.text:00410214                 cmp     eax, [esp+0BCh+var_64]
.text:00410218                 jbe     short loc_41020B
.text:0041021A                 jmp     loc_410183
.text:0041021F ; ---------------------------------------------------------------------------
.text:0041021F
.text:0041021F loc_41021F:                             ; CODE XREF: sub_40E6D0+1AE9↑j
.text:0041021F                 cld
.text:00410220                 mov     esi, [esp+0BCh+var_44]
.text:00410224                 cmp     ebp, ebp
.text:00410226                 mov     edi, [esp+0BCh+var_A0]
.text:0041022A                 mov     ecx, ebp
.text:0041022C                 repe cmpsb
.text:0041022E                 jmp     short loc_4101DD
.text:00410230 ; ---------------------------------------------------------------------------
.text:00410230
.text:00410230 loc_410230:                             ; CODE XREF: sub_40E6D0+1AC5↑j
.text:00410230                                         ; sub_40E6D0+1B7F↓j
.text:00410230                 mov     eax, [esp+0BCh+var_40]
.text:00410234                 cmp     [esp+0BCh+var_48], eax
.text:00410238                 jz      loc_40EB22
.text:0041023E                 mov     [esp+0BCh+var_48], eax
.text:00410242                 mov     edi, [esp+0BCh+arg_C]
.text:00410249                 cmp     edi, eax
.text:0041024B                 mov     [esp+0BCh+var_44], edi
.text:0041024F                 jz      short loc_410230
.text:00410251                 jmp     loc_41019B
.text:00410256 ; ---------------------------------------------------------------------------
.text:00410256
.text:00410256 loc_410256:                             ; CODE XREF: sub_40E6D0+1AB7↑j
.text:00410256                                         ; sub_40E6D0+1BAA↓j
.text:00410256                 cmp     ebx, [esp+0BCh+var_40]
.text:0041025A                 jz      short loc_410281
.text:0041025C                 mov     ebp, [esp+0BCh+var_A4]
.text:00410260                 mov     ecx, [esp+0BCh+var_6C]
.text:00410264                 mov     eax, [ecx+ebp*4]
.text:00410267                 cmp     ebx, eax
.text:00410269                 jz      short loc_410281
.text:0041026B                 mov     esi, [esp+0BCh+arg_C]
.text:00410272                 mov     ebx, eax
.text:00410274                 cmp     esi, eax
.text:00410276                 mov     [esp+0BCh+var_A0], esi
.text:0041027A                 jz      short loc_410256
.text:0041027C                 jmp     loc_41018D
.text:00410281 ; ---------------------------------------------------------------------------
.text:00410281
.text:00410281 loc_410281:                             ; CODE XREF: sub_40E6D0+1B8A↑j
.text:00410281                                         ; sub_40E6D0+1B99↑j
.text:00410281                 cmp     [esp+0BCh+var_A0], ebx
.text:00410285                 jnz     loc_41018D
.text:0041028B                 jmp     loc_40F0AE
.text:00410290 ; ---------------------------------------------------------------------------
.text:00410290
.text:00410290 loc_410290:                             ; CODE XREF: sub_40E6D0+A04↑j
.text:00410290                                         ; DATA XREF: .text:jpt_40F0D4↑o
.text:00410290                 mov     esi, [esp+0BCh+var_4C] ; jumptable 0040F0D4 case 7
.text:00410294                 mov     ebx, [esp+0BCh+var_78]
.text:00410298                 movzx   edx, byte ptr [esi]
.text:0041029B                 test    byte ptr [ebx+edx*4], 3
.text:0041029F                 jz      loc_410687
.text:004102A5                 mov     edi, [esp+0BCh+var_6C]
.text:004102A9                 mov     eax, [edi+edx*4]
.text:004102AC                 cmp     eax, offset unk_421390
.text:004102B1                 jz      loc_41067E
.text:004102B7
.text:004102B7 loc_4102B7:                             ; CODE XREF: sub_40E6D0+1FB2↓j
.text:004102B7                                         ; sub_40E6D0+1FBF↓j
.text:004102B7                 mov     ecx, [esp+0BCh+var_74]
.text:004102BB                 mov     edi, [esp+0BCh+var_6C]
.text:004102BF                 mov     ebx, [esp+0BCh+var_78]
.text:004102C3                 mov     [ecx+edx*4], eax
.text:004102C6                 mov     edx, [esp+0BCh+var_4C]
.text:004102CA                 mov     eax, [esp+0BCh+var_44]
.text:004102CE                 movzx   ebp, byte ptr [edx]
.text:004102D1                 mov     [edi+ebp*4], eax
.text:004102D4                 movzx   esi, byte ptr [edx]
.text:004102D7                 and     byte ptr [ebx+esi*4], 0FBh
.text:004102DB                 mov     [esp+0BCh+var_8C], 0
.text:004102E3                 mov     ecx, [esp+0BCh+var_64]
.text:004102E7                 cmp     [esp+0BCh+var_60], ecx
.text:004102EB                 jz      loc_410666
.text:004102F1                 mov     ebx, [esp+0BCh+var_4C]
.text:004102F5                 movzx   ecx, byte ptr [ebx]
.text:004102F8                 mov     dl, cl
.text:004102FA                 dec     dl
.text:004102FC                 jz      short loc_410325
.text:004102FE                 mov     esi, [esp+0BCh+var_78]
.text:00410302                 movzx   edi, dl
.text:00410305                 test    byte ptr [esi+edi*4], 4
.text:00410309                 jnz     short loc_41031D
.text:0041030B
.text:0041030B loc_41030B:                             ; CODE XREF: sub_40E6D0+1C4B↓j
.text:0041030B                 dec     dl
.text:0041030D                 jz      short loc_410325
.text:0041030F                 mov     ebp, [esp+0BCh+var_78]
.text:00410313                 movzx   ebx, dl
.text:00410316                 test    byte ptr [ebp+ebx*4+0], 4
.text:0041031B                 jz      short loc_41030B
.text:0041031D
.text:0041031D loc_41031D:                             ; CODE XREF: sub_40E6D0+1C39↑j
.text:0041031D                 test    dl, dl
.text:0041031F                 jnz     loc_41065A
.text:00410325
.text:00410325 loc_410325:                             ; CODE XREF: sub_40E6D0+1C2C↑j
.text:00410325                                         ; sub_40E6D0+1C3D↑j
.text:00410325                 mov     [esp+0BCh+var_60], 101h
.text:0041032D                 mov     [esp+0BCh+var_64], 100h
.text:00410335
.text:00410335 loc_410335:                             ; CODE XREF: sub_40E6D0+1F91↓j
.text:00410335                                         ; sub_40E6D0+1FA9↓j
.text:00410335                 movzx   edx, cl
.text:00410338                 mov     ecx, [esp+0BCh+var_78]
.text:0041033C                 test    byte ptr [ecx+edx*4], 8
.text:00410340                 jz      short loc_410375
.text:00410342                 mov     esi, [esp+0BCh+var_4C]
.text:00410346                 mov     edi, [esp+0BCh+var_4C]
.text:0041034A                 dec     esi
.text:0041034B                 cmp     [esp+0BCh+var_54], esi
.text:0041034F                 lea     ecx, [edi+2]
.text:00410352                 jz      short loc_410375
.text:00410354
.text:00410354 loc_410354:                             ; CODE XREF: sub_40E6D0+1CB0↓j
.text:00410354                                         ; sub_40E6D0+1D01↓j ...
.text:00410354                 mov     [esp+0BCh+var_4C], ecx
.text:00410358                 mov     ebp, [esp+0BCh+var_50]
.text:0041035C                 mov     eax, offset loc_40E949
.text:00410361                 cmp     ecx, ebp
.text:00410363                 jz      loc_40E947
.text:00410369                 movzx   ebx, byte ptr [ecx]
.text:0041036C                 inc     [esp+0BCh+var_4C]
.text:00410370                 jmp     loc_40E940
.text:00410375 ; ---------------------------------------------------------------------------
.text:00410375
.text:00410375 loc_410375:                             ; CODE XREF: sub_40E6D0+1C70↑j
.text:00410375                                         ; sub_40E6D0+1C82↑j
.text:00410375                 mov     ecx, [esp+0BCh+var_4C]
.text:00410379                 add     ecx, 2
.text:0041037C                 cmp     ecx, [esp+0BCh+var_50]
.text:00410380                 jnb     short loc_410354
.text:00410382                 mov     [esp+0BCh+var_30], ecx
.text:00410389                 mov     ebx, [esp+0BCh+var_4C]
.text:0041038D                 xor     ebp, ebp
.text:0041038F                 mov     [esp+0BCh+var_97], 0
.text:00410394                 mov     edx, ebx
.text:00410396                 add     edx, 3
.text:00410399                 movzx   eax, byte ptr [ebx+2]
.text:0041039D                 mov     [esp+0BCh+var_30], edx
.text:004103A4                 cmp     eax, 13h
.text:004103A7                 ja      loc_41064A
.text:004103AD                 cmp     eax, 11h
.text:004103B0                 jnb     loc_410613
.text:004103B6                 cmp     eax, 0Dh
.text:004103B9                 jz      loc_410613
.text:004103BF
.text:004103BF loc_4103BF:                             ; CODE XREF: sub_40E6D0+1F65↓j
.text:004103BF                                         ; sub_40E6D0+1F75↓j ...
.text:004103BF                 mov     ebx, [esp+0BCh+var_30]
.text:004103C6                 add     ebx, ebp
.text:004103C8                 test    ebp, ebp
.text:004103CA                 mov     [esp+0BCh+var_30], ebx
.text:004103D1                 jns     short loc_410354
.text:004103D3                 cmp     byte ptr [ebx], 0Fh
.text:004103D6                 jnz     loc_410354
.text:004103DC                 cmp     byte ptr [ebx+3], 6
.text:004103E0                 jnz     loc_410354
.text:004103E6                 movzx   eax, byte ptr [ebx+4]
.text:004103EA                 mov     ebp, [esp+0BCh+var_4C]
.text:004103EE                 cmp     al, [ebp+0]
.text:004103F1                 jnz     loc_410354
.text:004103F7                 mov     ecx, [esp+0BCh+var_78]
.text:004103FB                 movzx   edx, al
.text:004103FE                 movzx   eax, byte ptr [ecx+edx*4]
.text:00410402                 test    al, 10h
.text:00410404                 jz      short loc_410458
.text:00410406                 and     al, 0EFh
.text:00410408                 mov     [ecx+edx*4], al
.text:0041040B                 mov     eax, [esp+0BCh+var_4C]
.text:0041040F                 movzx   ecx, byte ptr [eax]
.text:00410412                 movzx   esi, byte ptr [eax+1]
.text:00410416                 lea     edx, [esi+ecx]
.text:00410419                 cmp     ecx, edx
.text:0041041B                 jnb     short loc_410451
.text:0041041D
.text:0041041D loc_41041D:                             ; CODE XREF: sub_40E6D0+1D7F↓j
.text:0041041D                 mov     edx, [esp+0BCh+var_70]
.text:00410421                 mov     ebx, [esp+0BCh+var_68]
.text:00410425                 mov     ebp, [esp+0BCh+var_74]
.text:00410429                 mov     edi, [edx+ecx*4]
.text:0041042C                 mov     [ebx+ecx*4], edi
.text:0041042F                 mov     edx, [ebp+ecx*4+0]
.text:00410433                 cmp     edx, edi
.text:00410435                 jb      short loc_41043E
.text:00410437                 mov     eax, [esp+0BCh+var_6C]
.text:0041043B                 mov     [eax+ecx*4], edx
.text:0041043E
.text:0041043E loc_41043E:                             ; CODE XREF: sub_40E6D0+1D65↑j
.text:0041043E                 mov     ebp, [esp+0BCh+var_4C]
.text:00410442                 inc     ecx
.text:00410443                 movzx   esi, byte ptr [ebp+0]
.text:00410447                 movzx   edi, byte ptr [ebp+1]
.text:0041044B                 add     esi, edi
.text:0041044D                 cmp     ecx, esi
.text:0041044F                 jb      short loc_41041D
.text:00410451
.text:00410451 loc_410451:                             ; CODE XREF: sub_40E6D0+1D4B↑j
.text:00410451                 mov     ebx, [esp+0BCh+var_30]
.text:00410458
.text:00410458 loc_410458:                             ; CODE XREF: sub_40E6D0+1D34↑j
.text:00410458                 mov     esi, ebx
.text:0041045A                 mov     eax, [esp+0BCh+var_60]
.text:0041045E                 inc     ebx
.text:0041045F                 mov     [esp+0BCh+var_30], ebx
.text:00410466                 lea     ecx, [esi+3]
.text:00410469                 mov     edi, [esp+0BCh+var_28]
.text:00410470                 movsx   edx, byte ptr [ebx+1]
.text:00410474                 movzx   ebp, byte ptr [esi+1]
.text:00410478                 mov     esi, [esp+0BCh+var_24]
.text:0041047F                 mov     [esp+0BCh+var_30], ecx
.text:00410486                 mov     ecx, [esp+0BCh+var_64]
.text:0041048A                 shl     edx, 8
.text:0041048D                 add     ebp, edx
.text:0041048F                 mov     edx, edi
.text:00410491                 sub     ecx, eax
.text:00410493                 lea     ebx, [ecx+ecx]
.text:00410496                 sub     edx, esi
.text:00410498                 lea     eax, [ecx+ebx+7]
.text:0041049C                 cmp     edx, eax
.text:0041049E                 jnb     short loc_410518
.text:004104A0                 mov     [esp+0BCh+var_9C], eax
.text:004104A4
.text:004104A4 loc_4104A4:                             ; CODE XREF: sub_40E6D0+1E46↓j
.text:004104A4                 mov     edx, dword_420080
.text:004104AA                 lea     esi, [edx+edx*8]
.text:004104AD                 lea     ebx, [edx+esi*2]
.text:004104B0                 cmp     edi, ebx
.text:004104B2                 ja      loc_40EE51
.text:004104B8                 lea     esi, ds:0[edi*8]
.text:004104BF                 mov     [esp+0BCh+Size], esi ; Size
.text:004104C2                 call    malloc
.text:004104C7                 mov     [esp+0BCh+Size], eax ; void *
.text:004104CA                 mov     ebx, [esp+0BCh+var_28]
.text:004104D1                 mov     ecx, [esp+0BCh+Src]
.text:004104D8                 shl     ebx, 2
.text:004104DB                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:004104DF                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:004104E3                 call    memcpy
.text:004104E8                 mov     [esp+0BCh+Src], eax
.text:004104EF                 test    eax, eax
.text:004104F1                 jz      loc_40EE51
.text:004104F7                 mov     edx, [esp+0BCh+var_28]
.text:004104FE                 mov     esi, [esp+0BCh+var_24]
.text:00410505                 add     edx, edx
.text:00410507                 mov     [esp+0BCh+var_28], edx
.text:0041050E                 mov     edi, edx
.text:00410510                 sub     edx, esi
.text:00410512                 cmp     edx, [esp+0BCh+var_9C]
.text:00410516                 jb      short loc_4104A4
.text:00410518
.text:00410518 loc_410518:                             ; CODE XREF: sub_40E6D0+1DCE↑j
.text:00410518                 mov     ecx, [esp+0BCh+var_60]
.text:0041051C                 mov     eax, [esp+0BCh+var_64]
.text:00410520                 cmp     ecx, eax
.text:00410522                 ja      loc_410607
.text:00410528                 mov     ebx, [esp+0BCh+Src]
.text:0041052F
.text:0041052F loc_41052F:                             ; CODE XREF: sub_40E6D0+1EBD↓j
.text:0041052F                 mov     eax, [esp+0BCh+var_68]
.text:00410533                 mov     edi, [eax+ecx*4]
.text:00410536                 mov     [ebx+esi*4], edi
.text:00410539                 mov     edx, [esp+0BCh+var_6C]
.text:0041053D                 mov     edi, [esp+0BCh+var_24]
.text:00410544                 mov     ebx, [esp+0BCh+Src]
.text:0041054B                 mov     esi, [edx+ecx*4]
.text:0041054E                 inc     edi
.text:0041054F                 mov     [esp+0BCh+var_24], edi
.text:00410556                 mov     [ebx+edi*4], esi
.text:00410559                 mov     edi, [esp+0BCh+var_24]
.text:00410560                 mov     eax, [esp+0BCh+var_78]
.text:00410564                 mov     ebx, [esp+0BCh+Src]
.text:0041056B                 inc     edi
.text:0041056C                 mov     [esp+0BCh+var_24], edi
.text:00410573                 mov     esi, [eax+ecx*4]
.text:00410576                 inc     ecx
.text:00410577                 mov     [ebx+edi*4], esi
.text:0041057A                 mov     esi, [esp+0BCh+var_24]
.text:00410581                 inc     esi
.text:00410582                 cmp     ecx, [esp+0BCh+var_64]
.text:00410586                 mov     [esp+0BCh+var_24], esi
.text:0041058D                 jbe     short loc_41052F
.text:0041058F
.text:0041058F loc_41058F:                             ; CODE XREF: sub_40E6D0+1F3E↓j
.text:0041058F                 mov     edi, [esp+0BCh+var_60]
.text:00410593                 mov     [ebx+esi*4], edi
.text:00410596                 mov     eax, [esp+0BCh+var_24]
.text:0041059D                 mov     ecx, [esp+0BCh+Src]
.text:004105A4                 mov     edx, [esp+0BCh+var_64]
.text:004105A8                 inc     eax
.text:004105A9                 mov     [esp+0BCh+var_24], eax
.text:004105B0                 mov     [ecx+eax*4], edx
.text:004105B3                 mov     edi, [esp+0BCh+var_24]
.text:004105BA                 mov     esi, [esp+0BCh+var_30]
.text:004105C1                 mov     edx, [esp+0BCh+Src]
.text:004105C8                 inc     edi
.text:004105C9                 add     ebp, esi
.text:004105CB                 mov     [esp+0BCh+var_24], edi
.text:004105D2                 mov     [edx+edi*4], ebp
.text:004105D5                 mov     ecx, [esp+0BCh+var_24]
.text:004105DC                 mov     ebp, [esp+0BCh+Src]
.text:004105E3                 mov     ebx, [esp+0BCh+var_44]
.text:004105E7                 inc     ecx
.text:004105E8                 mov     [esp+0BCh+var_24], ecx
.text:004105EF                 mov     [ebp+ecx*4+0], ebx
.text:004105F3                 mov     esi, [esp+0BCh+var_24]
.text:004105FA                 inc     esi
.text:004105FB                 mov     [esp+0BCh+var_24], esi
.text:00410602                 jmp     loc_40EA00
.text:00410607 ; ---------------------------------------------------------------------------
.text:00410607
.text:00410607 loc_410607:                             ; CODE XREF: sub_40E6D0+1E52↑j
.text:00410607                 mov     ebx, [esp+0BCh+Src]
.text:0041060E                 jmp     loc_41058F
.text:00410613 ; ---------------------------------------------------------------------------
.text:00410613
.text:00410613 loc_410613:                             ; CODE XREF: sub_40E6D0+1CE0↑j
.text:00410613                                         ; sub_40E6D0+1CE9↑j ...
.text:00410613                 mov     edx, [esp+0BCh+var_30]
.text:0041061A                 lea     eax, [edx+2]
.text:0041061D                 movsx   esi, byte ptr [edx+1]
.text:00410621                 movzx   ebp, byte ptr [edx]
.text:00410624                 mov     [esp+0BCh+var_30], eax
.text:0041062B                 shl     esi, 8
.text:0041062E                 add     ebp, esi
.text:00410630                 cmp     [esp+0BCh+var_97], 0
.text:00410635                 jz      loc_4103BF
.text:0041063B                 lea     edi, [edx+4]
.text:0041063E                 mov     [esp+0BCh+var_30], edi
.text:00410645                 jmp     loc_4103BF
.text:0041064A ; ---------------------------------------------------------------------------
.text:0041064A
.text:0041064A loc_41064A:                             ; CODE XREF: sub_40E6D0+1CD7↑j
.text:0041064A                 cmp     eax, 16h
.text:0041064D                 jnz     loc_4103BF
.text:00410653                 mov     [esp+0BCh+var_97], 1
.text:00410658                 jmp     short loc_410613
.text:0041065A ; ---------------------------------------------------------------------------
.text:0041065A
.text:0041065A loc_41065A:                             ; CODE XREF: sub_40E6D0+1C4F↑j
.text:0041065A                 movzx   eax, dl
.text:0041065D                 mov     [esp+0BCh+var_64], eax
.text:00410661                 jmp     loc_410335
.text:00410666 ; ---------------------------------------------------------------------------
.text:00410666
.text:00410666 loc_410666:                             ; CODE XREF: sub_40E6D0+1C1B↑j
.text:00410666                 mov     [esp+0BCh+var_60], 101h
.text:0041066E                 mov     [esp+0BCh+var_64], 100h
.text:00410676                 movzx   ecx, byte ptr [edx]
.text:00410679                 jmp     loc_410335
.text:0041067E ; ---------------------------------------------------------------------------
.text:0041067E
.text:0041067E loc_41067E:                             ; CODE XREF: sub_40E6D0+1BE1↑j
.text:0041067E                 mov     eax, [esp+0BCh+var_44]
.text:00410682                 jmp     loc_4102B7
.text:00410687 ; ---------------------------------------------------------------------------
.text:00410687
.text:00410687 loc_410687:                             ; CODE XREF: sub_40E6D0+1BCF↑j
.text:00410687                 mov     ebp, [esp+0BCh+var_6C]
.text:0041068B                 mov     eax, [ebp+edx*4+0]
.text:0041068F                 jmp     loc_4102B7
.text:00410694 ; ---------------------------------------------------------------------------
.text:00410694
.text:00410694 loc_410694:                             ; CODE XREF: sub_40E6D0+A04↑j
.text:00410694                                         ; DATA XREF: .text:jpt_40F0D4↑o
.text:00410694                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 0040F0D4 case 6
.text:00410698                 mov     edx, [esp+0BCh+var_78]
.text:0041069C                 mov     [esp+0BCh+var_30], ebx
.text:004106A3                 movzx   ecx, byte ptr [ebx]
.text:004106A6                 movzx   esi, cl
.text:004106A9                 movzx   ebp, byte ptr [edx+esi*4]
.text:004106AD                 and     ebp, 3
.text:004106B0                 cmp     ebp, 3
.text:004106B3                 jz      loc_410744
.text:004106B9
.text:004106B9 loc_4106B9:                             ; CODE XREF: sub_40E6D0+20A6↓j
.text:004106B9                 mov     esi, [esp+0BCh+var_78]
.text:004106BD                 movzx   edx, cl
.text:004106C0                 test    byte ptr [esi+edx*4], 3
.text:004106C4                 jz      short loc_41073B
.text:004106C6                 mov     ebx, [esp+0BCh+var_68]
.text:004106CA                 mov     eax, [ebx+edx*4]
.text:004106CD                 cmp     eax, offset unk_421390
.text:004106D2                 jz      short loc_410735
.text:004106D4
.text:004106D4 loc_4106D4:                             ; CODE XREF: sub_40E6D0+2069↓j
.text:004106D4                                         ; sub_40E6D0+2072↓j
.text:004106D4                 mov     ebp, [esp+0BCh+var_70]
.text:004106D8                 mov     ebx, [esp+0BCh+var_68]
.text:004106DC                 mov     ecx, [esp+0BCh+var_78]
.text:004106E0                 mov     [ebp+edx*4+0], eax
.text:004106E4                 mov     ebp, [esp+0BCh+var_4C]
.text:004106E8                 mov     eax, [esp+0BCh+var_44]
.text:004106EC                 movzx   edi, byte ptr [ebp+0]
.text:004106F0                 mov     [ebx+edi*4], eax
.text:004106F3                 movzx   esi, byte ptr [ebp+0]
.text:004106F7                 or      byte ptr [ecx+esi*4], 4
.text:004106FB                 movzx   edx, byte ptr [ebp+0]
.text:004106FF                 and     byte ptr [ecx+edx*4], 0F7h
.text:00410703                 mov     [esp+0BCh+var_8C], 0
.text:0041070B                 movzx   esi, byte ptr [ebp+0]
.text:0041070F                 cmp     [esp+0BCh+var_60], 101h
.text:00410717                 mov     [esp+0BCh+var_64], esi
.text:0041071B                 jz      short loc_41072F
.text:0041071D
.text:0041071D loc_41071D:                             ; CODE XREF: sub_40E6D0+2063↓j
.text:0041071D                 add     [esp+0BCh+var_4C], 2
.text:00410722                 mov     ecx, [esp+0BCh+var_4C]
.text:00410726                 mov     [esp+0BCh+var_54], ecx
.text:0041072A                 jmp     loc_40F2A0
.text:0041072F ; ---------------------------------------------------------------------------
.text:0041072F
.text:0041072F loc_41072F:                             ; CODE XREF: sub_40E6D0+204B↑j
.text:0041072F                 mov     [esp+0BCh+var_60], esi
.text:00410733                 jmp     short loc_41071D
.text:00410735 ; ---------------------------------------------------------------------------
.text:00410735
.text:00410735 loc_410735:                             ; CODE XREF: sub_40E6D0+2002↑j
.text:00410735                 mov     eax, [esp+0BCh+var_44]
.text:00410739                 jmp     short loc_4106D4
.text:0041073B ; ---------------------------------------------------------------------------
.text:0041073B
.text:0041073B loc_41073B:                             ; CODE XREF: sub_40E6D0+1FF4↑j
.text:0041073B                 mov     edi, [esp+0BCh+var_68]
.text:0041073F                 mov     eax, [edi+edx*4]
.text:00410742                 jmp     short loc_4106D4
.text:00410744 ; ---------------------------------------------------------------------------
.text:00410744
.text:00410744 loc_410744:                             ; CODE XREF: sub_40E6D0+1FE3↑j
.text:00410744                 mov     [esp+0BCh+var_B4], edx
.text:00410748                 mov     eax, [esp+0BCh+var_50]
.text:0041074C                 lea     edx, [esp+0BCh+var_30]
.text:00410753                 mov     [esp+0BCh+Size], edx
.text:00410756                 mov     [esp+0BCh+var_B8], eax
.text:0041075A                 call    sub_410A50
.text:0041075F                 mov     edi, [esp+0BCh+var_78]
.text:00410763                 mov     ebp, eax
.text:00410765                 and     ebp, 3
.text:00410768                 mov     ecx, [edi+esi*4]
.text:0041076B                 and     ecx, 0FFFFFFFCh
.text:0041076E                 or      ecx, ebp
.text:00410770                 mov     [edi+esi*4], ecx
.text:00410773                 movzx   ecx, byte ptr [ebx]
.text:00410776                 jmp     loc_4106B9
.text:00410776 ; ---------------------------------------------------------------------------
.text:0041077B                 align 10h
.text:00410780
.text:00410780 loc_410780:                             ; CODE XREF: sub_40E6D0:loc_40E947↑j
.text:00410780                                         ; sub_40E6D0+BF6↑j ...
.text:00410780                 mov     edx, [esp+0BCh+var_4C] ; jumptable 0040E947 case 5
.text:00410780                                         ; jumptable 0040F2C6 case 5
.text:00410780                                         ; jumptable 0040F398 case 5
.text:00410784                 mov     ebp, [esp+0BCh+var_48]
.text:00410788                 cmp     byte ptr [edx-1], 5
.text:0041078C                 setz    [esp+0BCh+var_95]
.text:00410791                 cmp     [esp+0BCh+var_44], ebp
.text:00410795                 jz      loc_410850
.text:0041079B
.text:0041079B loc_41079B:                             ; CODE XREF: sub_40E6D0+21A1↓j
.text:0041079B                 mov     esi, [esp+0BCh+var_58]
.text:0041079F                 test    esi, esi
.text:004107A1                 jz      loc_41083F
.text:004107A7                 mov     ebx, [esp+0BCh+var_44]
.text:004107AB                 mov     ecx, [esp+0BCh+var_58]
.text:004107AF                 movzx   edi, byte ptr [ebx]
.text:004107B2                 movzx   ebx, byte ptr [edi+ecx]
.text:004107B6
.text:004107B6 loc_4107B6:                             ; CODE XREF: sub_40E6D0+2177↓j
.text:004107B6                 mov     esi, [esp+0BCh+var_4C]
.text:004107BA                 movzx   eax, bl
.text:004107BD                 movzx   edx, byte ptr [esi]
.text:004107C0                 movzx   edi, dl
.text:004107C3                 shl     edi, 3
.text:004107C6                 mov     [esp+0BCh+var_96], dl
.text:004107CA                 cmp     eax, edi
.text:004107CC                 jnb     short loc_4107EB
.text:004107CE                 mov     dl, bl
.text:004107D0                 shr     dl, 3
.text:004107D3                 movzx   ecx, dl
.text:004107D6                 movzx   eax, byte ptr [ecx+esi+1]
.text:004107DB                 mov     ecx, ebx
.text:004107DD                 and     ecx, 7
.text:004107E0                 sar     eax, cl
.text:004107E2                 test    al, 1
.text:004107E4                 jz      short loc_4107EB
.text:004107E6                 xor     [esp+0BCh+var_95], 1
.text:004107EB
.text:004107EB loc_4107EB:                             ; CODE XREF: sub_40E6D0+20FC↑j
.text:004107EB                                         ; sub_40E6D0+2114↑j
.text:004107EB                 movzx   ebx, [esp+0BCh+var_96]
.text:004107F0                 mov     ebp, [esp+0BCh+var_4C]
.text:004107F4                 cmp     [esp+0BCh+var_95], 0
.text:004107F9                 lea     esi, [ebx+ebp+1]
.text:004107FD                 mov     [esp+0BCh+var_4C], esi
.text:00410801                 jz      loc_40EB22
.text:00410807                 mov     edi, [esp+0BCh+var_8C]
.text:0041080B                 test    edi, edi
.text:0041080D                 jnz     loc_40F4EF
.text:00410813                 mov     [esp+0BCh+var_8C], 1
.text:0041081B                 mov     eax, [esp+0BCh+var_60]
.text:0041081F                 mov     edx, [esp+0BCh+var_64]
.text:00410823                 cmp     eax, edx
.text:00410825                 ja      loc_40F4EF
.text:0041082B
.text:0041082B loc_41082B:                             ; CODE XREF: sub_40E6D0+2168↓j
.text:0041082B                 mov     ecx, [esp+0BCh+var_78]
.text:0041082F                 or      byte ptr [ecx+eax*4], 18h
.text:00410833                 inc     eax
.text:00410834                 cmp     eax, [esp+0BCh+var_64]
.text:00410838                 jbe     short loc_41082B
.text:0041083A                 jmp     loc_40F4EF
.text:0041083F ; ---------------------------------------------------------------------------
.text:0041083F
.text:0041083F loc_41083F:                             ; CODE XREF: sub_40E6D0+20D1↑j
.text:0041083F                 mov     ebp, [esp+0BCh+var_44]
.text:00410843                 movzx   ebx, byte ptr [ebp+0]
.text:00410847                 jmp     loc_4107B6
.text:00410847 ; ---------------------------------------------------------------------------
.text:0041084C                 align 10h
.text:00410850
.text:00410850 loc_410850:                             ; CODE XREF: sub_40E6D0+20C5↑j
.text:00410850                                         ; sub_40E6D0+219F↓j
.text:00410850                 mov     ecx, [esp+0BCh+var_40]
.text:00410854                 cmp     [esp+0BCh+var_48], ecx
.text:00410858                 jz      loc_40EB22
.text:0041085E                 mov     [esp+0BCh+var_48], ecx
.text:00410862                 mov     eax, [esp+0BCh+arg_C]
.text:00410869                 cmp     eax, ecx
.text:0041086B                 mov     [esp+0BCh+var_44], eax
.text:0041086F                 jz      short loc_410850
.text:00410871                 jmp     loc_41079B
.text:00410876 ; ---------------------------------------------------------------------------
.text:00410876
.text:00410876 loc_410876:                             ; CODE XREF: sub_40E6D0:loc_40E947↑j
.text:00410876                                         ; sub_40E6D0+BF6↑j ...
.text:00410876                 jmp     loc_410780      ; jumptable 0040E947 case 4
.text:00410876                                         ; jumptable 0040F2C6 case 4
.text:00410876                                         ; jumptable 0040F398 case 4
.text:0041087B ; ---------------------------------------------------------------------------
.text:0041087B
.text:0041087B loc_41087B:                             ; CODE XREF: sub_40E6D0+C88↑j
.text:0041087B                 mov     ebx, [esp+0BCh+var_34]
.text:00410882                 movzx   eax, byte ptr [ebx-1]
.text:00410886                 jmp     loc_40F365
.text:0041088B ; ---------------------------------------------------------------------------
.text:0041088B
.text:0041088B loc_41088B:                             ; CODE XREF: sub_40E6D0+C76↑j
.text:0041088B                 mov     edi, [esp+0BCh+arg_C]
.text:00410892                 movzx   eax, byte ptr [edi]
.text:00410895                 jmp     loc_40F365
.text:0041089A ; ---------------------------------------------------------------------------
.text:0041089A
.text:0041089A loc_41089A:                             ; CODE XREF: sub_40E6D0+C43↑j
.text:0041089A                 mov     esi, [esp+0BCh+var_34]
.text:004108A1                 movzx   eax, byte ptr [esi-1]
.text:004108A5                 jmp     loc_40F321
.text:004108AA ; ---------------------------------------------------------------------------
.text:004108AA
.text:004108AA loc_4108AA:                             ; CODE XREF: sub_40E6D0+C33↑j
.text:004108AA                 mov     ebp, [esp+0BCh+arg_C]
.text:004108B1                 movzx   eax, byte ptr [ebp+0]
.text:004108B5                 jmp     loc_40F321
.text:004108BA ; ---------------------------------------------------------------------------
.text:004108BA
.text:004108BA loc_4108BA:                             ; CODE XREF: sub_40E6D0+C01↑j
.text:004108BA                 mov     edx, [esp+0BCh+arg_C]
.text:004108C1                 cmp     [esp+0BCh+var_44], edx
.text:004108C5                 jmp     loc_40F2E2
.text:004108CA ; ---------------------------------------------------------------------------
.text:004108CA
.text:004108CA loc_4108CA:                             ; CODE XREF: sub_40E6D0+AFB↑j
.text:004108CA                 mov     ebx, [esp+0BCh+arg_C]
.text:004108D1                 cmp     [esp+0BCh+var_44], ebx
.text:004108D5                 jmp     loc_40F1DC
.text:004108DA ; ---------------------------------------------------------------------------
.text:004108DA
.text:004108DA loc_4108DA:                             ; CODE XREF: sub_40E6D0+993↑j
.text:004108DA                 mov     edi, [esp+0BCh+var_44]
.text:004108DE                 cmp     byte ptr [edi], 0
.text:004108E1                 jmp     loc_40F079
.text:004108E6 ; ---------------------------------------------------------------------------
.text:004108E6
.text:004108E6 loc_4108E6:                             ; CODE XREF: sub_40E6D0+964↑j
.text:004108E6                 mov     edi, [esp+0BCh+var_44]
.text:004108EA                 cmp     byte ptr [edi], 0Ah
.text:004108ED                 jmp     loc_40F04A
.text:004108F2 ; ---------------------------------------------------------------------------
.text:004108F2
.text:004108F2 loc_4108F2:                             ; CODE XREF: sub_40E6D0+94B↑j
.text:004108F2                                         ; sub_40E6D0+2241↓j
.text:004108F2                 mov     eax, [esp+0BCh+var_40]
.text:004108F6                 cmp     [esp+0BCh+var_48], eax
.text:004108FA                 jz      loc_40EB22
.text:00410900                 mov     [esp+0BCh+var_48], eax
.text:00410904                 mov     ecx, [esp+0BCh+arg_C]
.text:0041090B                 cmp     ecx, eax
.text:0041090D                 mov     [esp+0BCh+var_44], ecx
.text:00410911                 jz      short loc_4108F2
.text:00410913                 jmp     loc_40F021
.text:00410918 ; ---------------------------------------------------------------------------
.text:00410918
.text:00410918 loc_410918:                             ; CODE XREF: sub_40E6D0+21B↑j
.text:00410918                                         ; sub_40E6D0+22F↑j
.text:00410918                 mov     edi, [esp+0BCh+arg_C]
.text:0041091F                 mov     esi, [esp+0BCh+arg_14]
.text:00410926                 mov     ecx, [esp+0BCh+arg_8]
.text:0041092D                 mov     ebp, [esp+0BCh+var_40]
.text:00410931                 add     edi, esi
.text:00410933                 sub     edi, ecx
.text:00410935                 mov     [esp+0BCh+var_44], edi
.text:00410939                 mov     [esp+0BCh+var_48], ebp
.text:0041093D                 jmp     loc_40E924
.text:00410942 ; ---------------------------------------------------------------------------
.text:00410942
.text:00410942 loc_410942:                             ; CODE XREF: sub_40E6D0+1F1↑j
.text:00410942                 mov     ebp, [esp+0BCh+arg_C]
.text:00410949                 mov     ebx, [esp+0BCh+arg_8]
.text:00410950                 mov     edi, [esp+0BCh+var_34]
.text:00410957                 add     esi, ebp
.text:00410959                 sub     esi, ebx
.text:0041095B                 mov     [esp+0BCh+var_3C], edi
.text:00410962                 jmp     loc_40E8DE
.text:00410967 ; ---------------------------------------------------------------------------
.text:00410967
.text:00410967 loc_410967:                             ; CODE XREF: sub_40E6D0+B0↑j
.text:00410967                 mov     edi, [esp+0BCh+var_5C]
.text:0041096B                 shl     edi, 2
.text:0041096E                 mov     [esp+0BCh+Size], edi ; Size
.text:00410971                 call    malloc
.text:00410976                 mov     [esp+0BCh+var_68], eax
.text:0041097A                 mov     [esp+0BCh+Size], edi ; Size
.text:0041097D                 call    malloc
.text:00410982                 mov     [esp+0BCh+var_6C], eax
.text:00410986                 mov     [esp+0BCh+Size], edi ; Size
.text:00410989                 call    malloc
.text:0041098E                 mov     [esp+0BCh+var_70], eax
.text:00410992                 mov     [esp+0BCh+Size], edi ; Size
.text:00410995                 call    malloc
.text:0041099A                 mov     [esp+0BCh+var_74], eax
.text:0041099E                 mov     [esp+0BCh+Size], edi ; Size
.text:004109A1                 call    malloc
.text:004109A6                 mov     [esp+0BCh+var_80], eax
.text:004109AA                 mov     [esp+0BCh+Size], edi ; Size
.text:004109AD                 call    malloc
.text:004109B2                 mov     [esp+0BCh+var_84], eax
.text:004109B6                 mov     [esp+0BCh+Size], edi ; Size
.text:004109B9                 call    malloc
.text:004109BE                 mov     [esp+0BCh+var_78], eax
.text:004109C2                 mov     [esp+0BCh+Size], edi ; Size
.text:004109C5                 call    malloc
.text:004109CA                 mov     [esp+0BCh+var_90], eax
.text:004109CE                 mov     [esp+0BCh+Size], edi ; Size
.text:004109D1                 call    malloc
.text:004109D6                 mov     [esp+0BCh+var_94], eax
.text:004109DA                 mov     ecx, [esp+0BCh+var_68]
.text:004109DE                 test    ecx, ecx
.text:004109E0                 jz      loc_40EE51
.text:004109E6                 mov     ebx, [esp+0BCh+var_6C]
.text:004109EA                 test    ebx, ebx
.text:004109EC                 jz      loc_40EE51
.text:004109F2                 mov     edx, [esp+0BCh+var_70]
.text:004109F6                 test    edx, edx
.text:004109F8                 jz      loc_40EE51
.text:004109FE                 mov     ebp, [esp+0BCh+var_74]
.text:00410A02                 test    ebp, ebp
.text:00410A04                 jz      loc_40EE51
.text:00410A0A                 mov     ecx, [esp+0BCh+var_78]
.text:00410A0E                 test    ecx, ecx
.text:00410A10                 jz      loc_40EE51
.text:00410A16                 mov     edi, [esp+0BCh+var_80]
.text:00410A1A                 test    edi, edi
.text:00410A1C                 jz      loc_40EE51
.text:00410A22                 mov     ebx, [esp+0BCh+var_84]
.text:00410A26                 test    ebx, ebx
.text:00410A28                 jz      loc_40EE51
.text:00410A2E                 mov     edx, [esp+0BCh+var_90]
.text:00410A32                 test    edx, edx
.text:00410A34                 jz      loc_40EE51
.text:00410A3A                 test    eax, eax
.text:00410A3C                 jnz     loc_40E7CE
.text:00410A42                 jmp     loc_40EE51
.text:00410A42 sub_40E6D0      endp
.text:00410A42
.text:00410A42 ; ---------------------------------------------------------------------------
.text:00410A47                 align 10h
.text:00410A50
.text:00410A50 ; =============== S U B R O U T I N E =======================================
.text:00410A50
.text:00410A50
.text:00410A50 sub_410A50      proc near               ; CODE XREF: sub_40E6D0+208A↑p
.text:00410A50                                         ; sub_410C00+CA↓p
.text:00410A50
.text:00410A50 var_2C          = dword ptr -2Ch
.text:00410A50 var_28          = dword ptr -28h
.text:00410A50 var_24          = dword ptr -24h
.text:00410A50 var_14          = dword ptr -14h
.text:00410A50 arg_0           = dword ptr  4
.text:00410A50 arg_4           = dword ptr  8
.text:00410A50 arg_8           = dword ptr  0Ch
.text:00410A50
.text:00410A50                 push    ebp
.text:00410A51                 push    edi
.text:00410A52                 push    esi
.text:00410A53                 push    ebx
.text:00410A54                 sub     esp, 1Ch
.text:00410A57                 mov     ebp, [esp+2Ch+arg_0]
.text:00410A5B                 mov     edi, [esp+2Ch+arg_4]
.text:00410A5F                 mov     esi, [esp+2Ch+arg_8]
.text:00410A63                 mov     eax, [ebp+0]
.text:00410A66                 add     eax, 2
.text:00410A69                 cmp     eax, edi
.text:00410A6B                 mov     ecx, eax
.text:00410A6D                 mov     [esp+2Ch+var_14], eax
.text:00410A71                 jnb     short loc_410AB3
.text:00410A73                 lea     esi, [esi+0]
.text:00410A79                 lea     edi, [edi+0]
.text:00410A80
.text:00410A80 loc_410A80:                             ; CODE XREF: sub_410A50+61↓j
.text:00410A80                 movzx   eax, byte ptr [ecx]
.text:00410A83                 cmp     eax, 7
.text:00410A86                 jz      loc_410B63
.text:00410A8C                 cmp     eax, 0Fh
.text:00410A8F                 jz      short loc_410AC0
.text:00410A91                 mov     [esp+2Ch+var_24], esi
.text:00410A95                 lea     ebx, [esp+2Ch+var_14]
.text:00410A99                 mov     [esp+2Ch+var_28], edi
.text:00410A9D                 mov     [esp+2Ch+var_2C], ebx
.text:00410AA0                 call    sub_410C00
.text:00410AA5                 xor     edx, edx
.text:00410AA7                 test    al, al
.text:00410AA9                 jz      short loc_410AB5
.text:00410AAB
.text:00410AAB loc_410AAB:                             ; CODE XREF: sub_410A50+8B↓j
.text:00410AAB                                         ; sub_410A50+BE↓j
.text:00410AAB                 mov     ecx, [esp+2Ch+var_14]
.text:00410AAF                 cmp     ecx, edi
.text:00410AB1                 jb      short loc_410A80
.text:00410AB3
.text:00410AB3 loc_410AB3:                             ; CODE XREF: sub_410A50+21↑j
.text:00410AB3                 xor     edx, edx
.text:00410AB5
.text:00410AB5 loc_410AB5:                             ; CODE XREF: sub_410A50+59↑j
.text:00410AB5                                         ; sub_410A50+B8↓j ...
.text:00410AB5                 add     esp, 1Ch
.text:00410AB8                 mov     eax, edx
.text:00410ABA                 pop     ebx
.text:00410ABB                 pop     esi
.text:00410ABC                 pop     edi
.text:00410ABD                 pop     ebp
.text:00410ABE                 retn
.text:00410ABE ; ---------------------------------------------------------------------------
.text:00410ABF                 align 10h
.text:00410AC0
.text:00410AC0 loc_410AC0:                             ; CODE XREF: sub_410A50+3F↑j
.text:00410AC0                 lea     edx, [ecx+1]
.text:00410AC3                 mov     [esp+2Ch+var_14], edx
.text:00410AC7                 movsx   eax, byte ptr [edx+1]
.text:00410ACB                 lea     edx, [ecx+3]
.text:00410ACE                 movzx   ebx, byte ptr [ecx+1]
.text:00410AD2                 mov     [esp+2Ch+var_14], edx
.text:00410AD6                 shl     eax, 8
.text:00410AD9                 add     ebx, eax
.text:00410ADB                 js      short loc_410AAB
.text:00410ADD                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00410AE2                 jz      short loc_410B10
.text:00410AE4
.text:00410AE4 loc_410AE4:                             ; CODE XREF: sub_410A50+E9↓j
.text:00410AE4                                         ; sub_410A50+111↓j
.text:00410AE4                 movsx   ecx, byte ptr [edx-1]
.text:00410AE8                 movzx   ebx, byte ptr [edx-2]
.text:00410AEC                 mov     [esp+2Ch+var_2C], edx
.text:00410AEF                 mov     [esp+2Ch+var_24], esi
.text:00410AF3                 shl     ecx, 8
.text:00410AF6                 add     ebx, ecx
.text:00410AF8                 lea     ecx, [ebx+edx]
.text:00410AFB                 mov     [esp+2Ch+var_28], ecx
.text:00410AFF                 call    sub_410B80
.text:00410B04                 xor     edx, edx
.text:00410B06                 test    al, al
.text:00410B08                 jz      short loc_410AB5
.text:00410B0A                 add     [esp+2Ch+var_14], ebx
.text:00410B0E                 jmp     short loc_410AAB
.text:00410B10 ; ---------------------------------------------------------------------------
.text:00410B10
.text:00410B10 loc_410B10:                             ; CODE XREF: sub_410A50+92↑j
.text:00410B10                                         ; sub_410A50+109↓j
.text:00410B10                 mov     [esp+2Ch+var_2C], edx
.text:00410B13                 lea     ecx, [ebx+edx-3]
.text:00410B17                 mov     [esp+2Ch+var_24], esi
.text:00410B1B                 mov     [esp+2Ch+var_28], ecx
.text:00410B1F                 call    sub_410B80
.text:00410B24                 xor     edx, edx
.text:00410B26                 test    al, al
.text:00410B28                 jz      short loc_410AB5
.text:00410B2A                 mov     ecx, [esp+2Ch+var_14]
.text:00410B2E                 add     ecx, ebx
.text:00410B30                 mov     edx, ecx
.text:00410B32                 mov     [esp+2Ch+var_14], ecx
.text:00410B36                 cmp     byte ptr [ecx], 0Fh
.text:00410B39                 jnz     short loc_410AE4
.text:00410B3B                 inc     edx
.text:00410B3C                 mov     [esp+2Ch+var_14], edx
.text:00410B40                 movsx   eax, byte ptr [edx+1]
.text:00410B44                 lea     edx, [ecx+3]
.text:00410B47                 movzx   ebx, byte ptr [ecx+1]
.text:00410B4B                 mov     [esp+2Ch+var_14], edx
.text:00410B4F                 shl     eax, 8
.text:00410B52                 add     ebx, eax
.text:00410B54                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:00410B59                 jz      short loc_410B10
.text:00410B5B                 mov     [esp+2Ch+var_14], ecx
.text:00410B5F                 mov     edx, ecx
.text:00410B61                 jmp     short loc_410AE4
.text:00410B63 ; ---------------------------------------------------------------------------
.text:00410B63
.text:00410B63 loc_410B63:                             ; CODE XREF: sub_410A50+36↑j
.text:00410B63                 lea     edx, [ecx+2]
.text:00410B66                 mov     [ebp+0], edx
.text:00410B69                 mov     edx, 1
.text:00410B6E                 jmp     loc_410AB5
.text:00410B6E sub_410A50      endp
.text:00410B6E
.text:00410B6E ; ---------------------------------------------------------------------------
.text:00410B73                 align 10h
.text:00410B80
.text:00410B80 ; =============== S U B R O U T I N E =======================================
.text:00410B80
.text:00410B80
.text:00410B80 sub_410B80      proc near               ; CODE XREF: sub_410A50+AF↑p
.text:00410B80                                         ; sub_410A50+CF↑p
.text:00410B80
.text:00410B80 var_1C          = dword ptr -1Ch
.text:00410B80 var_18          = dword ptr -18h
.text:00410B80 var_14          = dword ptr -14h
.text:00410B80 var_C           = dword ptr -0Ch
.text:00410B80 arg_0           = dword ptr  4
.text:00410B80 arg_4           = dword ptr  8
.text:00410B80 arg_8           = dword ptr  0Ch
.text:00410B80
.text:00410B80                 push    esi
.text:00410B81                 push    ebx
.text:00410B82                 sub     esp, 14h
.text:00410B85                 mov     edx, [esp+1Ch+arg_0]
.text:00410B89                 mov     ebx, [esp+1Ch+arg_4]
.text:00410B8D                 mov     esi, [esp+1Ch+arg_8]
.text:00410B91                 mov     ecx, edx
.text:00410B93                 mov     [esp+1Ch+var_C], edx
.text:00410B97                 cmp     edx, ebx
.text:00410B99                 jnb     short loc_410BC7
.text:00410B9B                 nop
.text:00410B9C                 lea     esi, [esi+0]
.text:00410BA0
.text:00410BA0 loc_410BA0:                             ; CODE XREF: sub_410B80+45↓j
.text:00410BA0                 cmp     byte ptr [ecx], 0Fh
.text:00410BA3                 jz      short loc_410BD4
.text:00410BA5                 mov     [esp+1Ch+var_14], esi
.text:00410BA9                 lea     edx, [esp+1Ch+var_C]
.text:00410BAD                 mov     [esp+1Ch+var_1C], edx
.text:00410BB0                 mov     [esp+1Ch+var_18], ebx
.text:00410BB4                 call    sub_410C00
.text:00410BB9                 xor     edx, edx
.text:00410BBB                 test    al, al
.text:00410BBD                 jz      short loc_410BCC
.text:00410BBF
.text:00410BBF loc_410BBF:                             ; CODE XREF: sub_410B80+70↓j
.text:00410BBF                 mov     ecx, [esp+1Ch+var_C]
.text:00410BC3                 cmp     ecx, ebx
.text:00410BC5                 jb      short loc_410BA0
.text:00410BC7
.text:00410BC7 loc_410BC7:                             ; CODE XREF: sub_410B80+19↑j
.text:00410BC7                 mov     edx, 1
.text:00410BCC
.text:00410BCC loc_410BCC:                             ; CODE XREF: sub_410B80+3D↑j
.text:00410BCC                 add     esp, 14h
.text:00410BCF                 mov     eax, edx
.text:00410BD1                 pop     ebx
.text:00410BD2                 pop     esi
.text:00410BD3                 retn
.text:00410BD4 ; ---------------------------------------------------------------------------
.text:00410BD4
.text:00410BD4 loc_410BD4:                             ; CODE XREF: sub_410B80+23↑j
.text:00410BD4                 lea     eax, [ecx+1]
.text:00410BD7                 mov     [esp+1Ch+var_C], eax
.text:00410BDB                 movsx   eax, byte ptr [eax+1]
.text:00410BDF                 movzx   edx, byte ptr [ecx+1]
.text:00410BE3                 shl     eax, 8
.text:00410BE6                 add     edx, eax
.text:00410BE8                 lea     eax, [edx+ecx+3]
.text:00410BEC                 mov     [esp+1Ch+var_C], eax
.text:00410BF0                 jmp     short loc_410BBF
.text:00410BF0 sub_410B80      endp
.text:00410BF0
.text:00410BF0 ; ---------------------------------------------------------------------------
.text:00410BF2                 align 10h
.text:00410C00
.text:00410C00 ; =============== S U B R O U T I N E =======================================
.text:00410C00
.text:00410C00
.text:00410C00 sub_410C00      proc near               ; CODE XREF: sub_410A50+50↑p
.text:00410C00                                         ; sub_410B80+34↑p
.text:00410C00
.text:00410C00 var_1C          = dword ptr -1Ch
.text:00410C00 var_18          = dword ptr -18h
.text:00410C00 var_14          = dword ptr -14h
.text:00410C00 var_10          = dword ptr -10h
.text:00410C00 var_C           = dword ptr -0Ch
.text:00410C00 var_8           = dword ptr -8
.text:00410C00 var_4           = dword ptr -4
.text:00410C00 arg_0           = dword ptr  4
.text:00410C00 arg_4           = dword ptr  8
.text:00410C00 arg_8           = dword ptr  0Ch
.text:00410C00
.text:00410C00                 sub     esp, 1Ch
.text:00410C03                 mov     [esp+1Ch+var_4], edi
.text:00410C07                 mov     edi, [esp+1Ch+arg_0]
.text:00410C0B                 mov     [esp+1Ch+var_C], ebx
.text:00410C0F                 mov     ebx, [esp+1Ch+arg_8]
.text:00410C13                 mov     [esp+1Ch+var_8], esi
.text:00410C17                 mov     edx, [edi]
.text:00410C19                 mov     [esp+1Ch+var_10], edx
.text:00410C1D                 movzx   eax, byte ptr [edx]
.text:00410C20                 inc     edx
.text:00410C21                 mov     [esp+1Ch+var_10], edx
.text:00410C25                 cmp     eax, 1Dh        ; switch 30 cases
.text:00410C28                 ja      def_410C2E      ; jumptable 00410C2E default case, cases 1-5,7,14-20,22,24,25
.text:00410C2E                 jmp     ds:jpt_410C2E[eax*4] ; switch jump
.text:00410C2E ; ---------------------------------------------------------------------------
.text:00410C35                 align 4
.text:00410C38 jpt_410C2E      dd offset loc_410CE3    ; DATA XREF: sub_410C00+2E↑r
.text:00410C38                 dd offset def_410C2E    ; jump table for switch statement
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset loc_410CB0
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset loc_410D12
.text:00410C38                 dd offset loc_410CE3
.text:00410C38                 dd offset loc_410CE3
.text:00410C38                 dd offset loc_410CE3
.text:00410C38                 dd offset loc_410CE3
.text:00410C38                 dd offset loc_410D24
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset loc_410D45
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset loc_410D81
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset def_410C2E
.text:00410C38                 dd offset loc_410CE3
.text:00410C38                 dd offset loc_410CE3
.text:00410C38                 dd offset loc_410CE3
.text:00410C38                 dd offset loc_410CE3
.text:00410CB0 ; ---------------------------------------------------------------------------
.text:00410CB0
.text:00410CB0 loc_410CB0:                             ; CODE XREF: sub_410C00+2E↑j
.text:00410CB0                                         ; DATA XREF: sub_410C00:jpt_410C2E↑o
.text:00410CB0                 mov     ecx, [esp+1Ch+var_10] ; jumptable 00410C2E case 6
.text:00410CB4                 mov     edx, [esp+1Ch+arg_4]
.text:00410CB8                 movzx   esi, byte ptr [ecx]
.text:00410CBB                 lea     ecx, [esp+1Ch+var_10]
.text:00410CBF                 mov     [esp+1Ch+var_18], edx
.text:00410CC3                 mov     [esp+1Ch+var_1C], ecx
.text:00410CC6                 mov     [esp+1Ch+var_14], ebx
.text:00410CCA                 call    sub_410A50
.text:00410CCF                 movzx   edx, byte ptr [ebx+esi*4]
.text:00410CD3                 mov     cl, al
.text:00410CD5                 and     edx, 3
.text:00410CD8                 cmp     edx, 3
.text:00410CDB                 jz      short loc_410D00
.text:00410CDD
.text:00410CDD loc_410CDD:                             ; CODE XREF: sub_410C00+110↓j
.text:00410CDD                 xor     eax, eax
.text:00410CDF                 test    cl, cl
.text:00410CE1                 jz      short loc_410CF0
.text:00410CE3
.text:00410CE3 loc_410CE3:                             ; CODE XREF: sub_410C00+2E↑j
.text:00410CE3                                         ; DATA XREF: sub_410C00:jpt_410C2E↑o
.text:00410CE3                 mov     ecx, [esp+1Ch+var_10] ; jumptable 00410C2E cases 0,9-12,26-29
.text:00410CE7
.text:00410CE7 loc_410CE7:                             ; CODE XREF: sub_410C00+11D↓j
.text:00410CE7                                         ; sub_410C00+143↓j
.text:00410CE7                 mov     [edi], ecx
.text:00410CE9                 mov     eax, 1
.text:00410CEE                 mov     esi, esi
.text:00410CF0
.text:00410CF0 loc_410CF0:                             ; CODE XREF: sub_410C00+E1↑j
.text:00410CF0                                         ; sub_410C00+122↓j ...
.text:00410CF0                 mov     ebx, [esp+1Ch+var_C]
.text:00410CF4                 mov     esi, [esp+1Ch+var_8]
.text:00410CF8                 mov     edi, [esp+1Ch+var_4]
.text:00410CFC                 add     esp, 1Ch
.text:00410CFF                 retn
.text:00410D00 ; ---------------------------------------------------------------------------
.text:00410D00
.text:00410D00 loc_410D00:                             ; CODE XREF: sub_410C00+DB↑j
.text:00410D00                 mov     eax, [ebx+esi*4]
.text:00410D03                 mov     edx, ecx
.text:00410D05                 and     edx, 3
.text:00410D08                 and     eax, 0FFFFFFFCh
.text:00410D0B                 or      eax, edx
.text:00410D0D                 mov     [ebx+esi*4], eax
.text:00410D10                 jmp     short loc_410CDD
.text:00410D12 ; ---------------------------------------------------------------------------
.text:00410D12
.text:00410D12 loc_410D12:                             ; CODE XREF: sub_410C00+2E↑j
.text:00410D12                                         ; DATA XREF: sub_410C00:jpt_410C2E↑o
.text:00410D12                 mov     ecx, [esp+1Ch+var_10] ; jumptable 00410C2E case 8
.text:00410D16                 movzx   esi, byte ptr [ecx]
.text:00410D19                 test    byte ptr [ebx+esi*4], 3
.text:00410D1D                 jnz     short loc_410CE7
.text:00410D1F                 nop
.text:00410D20
.text:00410D20 def_410C2E:                             ; CODE XREF: sub_410C00+28↑j
.text:00410D20                                         ; sub_410C00+2E↑j ...
.text:00410D20                 xor     eax, eax        ; jumptable 00410C2E default case, cases 1-5,7,14-20,22,24,25
.text:00410D22                 jmp     short loc_410CF0
.text:00410D24 ; ---------------------------------------------------------------------------
.text:00410D24
.text:00410D24 loc_410D24:                             ; CODE XREF: sub_410C00+2E↑j
.text:00410D24                                         ; DATA XREF: sub_410C00:jpt_410C2E↑o
.text:00410D24                 mov     edx, [esp+1Ch+var_10] ; jumptable 00410C2E case 13
.text:00410D28                 lea     ecx, [edx+2]
.text:00410D2B                 movsx   esi, byte ptr [edx+1]
.text:00410D2F                 movzx   ebx, byte ptr [edx]
.text:00410D32                 mov     [esp+1Ch+var_10], ecx
.text:00410D36                 shl     esi, 8
.text:00410D39                 add     ebx, esi
.text:00410D3B                 js      short def_410C2E ; jumptable 00410C2E default case, cases 1-5,7,14-20,22,24,25
.text:00410D3D                 add     ecx, ebx
.text:00410D3F
.text:00410D3F loc_410D3F:                             ; CODE XREF: sub_410C00+17F↓j
.text:00410D3F                 mov     [esp+1Ch+var_10], ecx
.text:00410D43                 jmp     short loc_410CE7
.text:00410D45 ; ---------------------------------------------------------------------------
.text:00410D45
.text:00410D45 loc_410D45:                             ; CODE XREF: sub_410C00+2E↑j
.text:00410D45                                         ; DATA XREF: sub_410C00:jpt_410C2E↑o
.text:00410D45                 mov     edx, [esp+1Ch+var_10] ; jumptable 00410C2E case 21
.text:00410D49                 lea     esi, [edx+2]
.text:00410D4C                 mov     [esp+1Ch+var_10], esi
.text:00410D50                 movsx   eax, byte ptr [esi+1]
.text:00410D54                 movzx   ebx, byte ptr [edx+2]
.text:00410D58                 shl     eax, 8
.text:00410D5B                 add     ebx, eax
.text:00410D5D                 lea     eax, [edx+4]
.text:00410D60                 mov     [esp+1Ch+var_10], eax
.text:00410D64                 xor     eax, eax
.text:00410D66                 test    ebx, ebx
.text:00410D68                 jnz     short loc_410CF0
.text:00410D6A                 mov     [esp+1Ch+var_10], edx
.text:00410D6E                 mov     eax, edx
.text:00410D70                 movsx   ebx, byte ptr [eax+1]
.text:00410D74                 movzx   edx, byte ptr [edx]
.text:00410D77                 shl     ebx, 8
.text:00410D7A                 add     edx, ebx
.text:00410D7C                 lea     ecx, [edx+esi]
.text:00410D7F                 jmp     short loc_410D3F
.text:00410D81 ; ---------------------------------------------------------------------------
.text:00410D81
.text:00410D81 loc_410D81:                             ; CODE XREF: sub_410C00+2E↑j
.text:00410D81                                         ; DATA XREF: sub_410C00:jpt_410C2E↑o
.text:00410D81                 add     [esp+1Ch+var_10], 4 ; jumptable 00410C2E case 23
.text:00410D86                 jmp     short def_410C2E ; jumptable 00410C2E default case, cases 1-5,7,14-20,22,24,25
.text:00410D86 sub_410C00      endp
.text:00410D86
.text:00410D86 ; ---------------------------------------------------------------------------
.text:00410D88                 align 10h
.text:00410D90
.text:00410D90 ; =============== S U B R O U T I N E =======================================
.text:00410D90
.text:00410D90
.text:00410D90 sub_410D90      proc near               ; CODE XREF: sub_40E6D0+1B06↑p
.text:00410D90
.text:00410D90 arg_0           = dword ptr  4
.text:00410D90 arg_4           = dword ptr  8
.text:00410D90 arg_8           = dword ptr  0Ch
.text:00410D90 arg_C           = dword ptr  10h
.text:00410D90
.text:00410D90                 push    edi
.text:00410D91                 push    esi
.text:00410D92                 push    ebx
.text:00410D93                 mov     esi, [esp+0Ch+arg_8]
.text:00410D97                 mov     edi, [esp+0Ch+arg_C]
.text:00410D9B                 mov     ebx, [esp+0Ch+arg_0]
.text:00410D9F                 test    esi, esi
.text:00410DA1                 mov     ecx, [esp+0Ch+arg_4]
.text:00410DA5                 jz      short loc_410DC4
.text:00410DA7                 mov     esi, esi
.text:00410DA9                 lea     edi, [edi+0]
.text:00410DB0
.text:00410DB0 loc_410DB0:                             ; CODE XREF: sub_410D90+32↓j
.text:00410DB0                 movzx   eax, byte ptr [ecx]
.text:00410DB3                 inc     ecx
.text:00410DB4                 movzx   edx, byte ptr [ebx]
.text:00410DB7                 inc     ebx
.text:00410DB8                 movzx   eax, byte ptr [eax+edi]
.text:00410DBC                 cmp     [edx+edi], al
.text:00410DBF                 jnz     short loc_410DCA
.text:00410DC1                 dec     esi
.text:00410DC2                 jnz     short loc_410DB0
.text:00410DC4
.text:00410DC4 loc_410DC4:                             ; CODE XREF: sub_410D90+15↑j
.text:00410DC4                 xor     eax, eax
.text:00410DC6
.text:00410DC6 loc_410DC6:                             ; CODE XREF: sub_410D90+3F↓j
.text:00410DC6                 pop     ebx
.text:00410DC7                 pop     esi
.text:00410DC8                 pop     edi
.text:00410DC9                 retn
.text:00410DCA ; ---------------------------------------------------------------------------
.text:00410DCA
.text:00410DCA loc_410DCA:                             ; CODE XREF: sub_410D90+2F↑j
.text:00410DCA                 mov     eax, 1
.text:00410DCF                 jmp     short loc_410DC6
.text:00410DCF sub_410D90      endp
.text:00410DCF
.text:00410DCF ; ---------------------------------------------------------------------------
.text:00410DD1                 db 1Fh dup(90h)
.text:00410DF0 aSuccess        db 'Success',0          ; DATA XREF: .text:00411491↓o
.text:00410DF0                                         ; .text:004114DB↓o
.text:00410DF8 aNoMatch        db 'No match',0
.text:00410E01 aInvalidRegular db 'Invalid regular expression',0
.text:00410E1C aInvalidCollati db 'Invalid collation character',0
.text:00410E38 aInvalidCharact db 'Invalid character class name',0
.text:00410E55 aTrailingBacksl db 'Trailing backslash',0
.text:00410E68 aInvalidBackRef db 'Invalid back reference',0
.text:00410E7F aUnmatchedOr    db 'Unmatched [ or [^',0
.text:00410E91 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:00410EA3 aUnmatched      db 'Unmatched \{',0
.text:00410EB0 aInvalidContent db 'Invalid content of \{\}',0
.text:00410EC8 aInvalidRangeEn db 'Invalid range end',0
.text:00410EDA aMemoryExhauste_0 db 'Memory exhausted',0
.text:00410EEB aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:00410F10 aPrematureEndOf db 'Premature end of regular expression',0
.text:00410F34 aRegularExpress db 'Regular expression too big',0
.text:00410F4F aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:00410F61                 db 0EBh, 0Dh, 90h
.text:00410F64                 db 0Ch dup(90h)
.text:00410F70 dword_410F70    dd 0                    ; DATA XREF: .text:0041148A↓r
.text:00410F70                                         ; .text:004114D4↓r
.text:00410F74                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:00410F74                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:00410FC0
.text:00410FC0 ; =============== S U B R O U T I N E =======================================
.text:00410FC0
.text:00410FC0
.text:00410FC0 sub_410FC0      proc near               ; CODE XREF: sub_4115E0+25A0↓p
.text:00410FC0
.text:00410FC0 arg_0           = dword ptr  4
.text:00410FC0 arg_8           = dword ptr  0Ch
.text:00410FC0 arg_C           = dword ptr  10h
.text:00410FC0
.text:00410FC0                 mov     edx, [esp+arg_8]
.text:00410FC4                 mov     ecx, [esp+arg_C]
.text:00410FC8                 dec     edx
.text:00410FC9                 js      short loc_410FEA
.text:00410FCB                 lea     eax, [edx+edx*4]
.text:00410FCE                 shl     eax, 2
.text:00410FD1                 add     eax, [esp+arg_0]
.text:00410FD5                 add     eax, 10h
.text:00410FD8                 nop
.text:00410FD9                 lea     esi, [esi+0]
.text:00410FE0
.text:00410FE0 loc_410FE0:                             ; CODE XREF: sub_410FC0+28↓j
.text:00410FE0                 cmp     [eax], ecx
.text:00410FE2                 jz      short loc_410FED
.text:00410FE4                 sub     eax, 14h
.text:00410FE7                 dec     edx
.text:00410FE8                 jns     short loc_410FE0
.text:00410FEA
.text:00410FEA loc_410FEA:                             ; CODE XREF: sub_410FC0+9↑j
.text:00410FEA                 xor     eax, eax
.text:00410FEC                 retn
.text:00410FED ; ---------------------------------------------------------------------------
.text:00410FED
.text:00410FED loc_410FED:                             ; CODE XREF: sub_410FC0+22↑j
.text:00410FED                 mov     eax, 1
.text:00410FF2                 retn
.text:00410FF2 sub_410FC0      endp
.text:00410FF2
.text:00410FF2 ; ---------------------------------------------------------------------------
.text:00410FF3                 align 10h
.text:00411000
.text:00411000 ; =============== S U B R O U T I N E =======================================
.text:00411000
.text:00411000 ; Attributes: thunk
.text:00411000
.text:00411000 sub_411000      proc near               ; CODE XREF: sub_411010+D1↓p
.text:00411000                                         ; sub_414950+258↓p
.text:00411000                 jmp     sub_414BF0
.text:00411000 sub_411000      endp
.text:00411000
.text:00411000 ; ---------------------------------------------------------------------------
.text:00411005                 align 10h
.text:00411010
.text:00411010 ; =============== S U B R O U T I N E =======================================
.text:00411010
.text:00411010
.text:00411010 ; int __cdecl sub_411010(int, char *Str, int)
.text:00411010 sub_411010      proc near               ; CODE XREF: .text:0040DADC↑p
.text:00411010                                         ; .text:0040DB5F↑p
.text:00411010
.text:00411010 Size            = dword ptr -2Ch
.text:00411010 Type            = dword ptr -28h
.text:00411010 var_24          = dword ptr -24h
.text:00411010 var_20          = dword ptr -20h
.text:00411010 arg_0           = dword ptr  4
.text:00411010 Str             = dword ptr  8
.text:00411010 arg_8           = dword ptr  0Ch
.text:00411010
.text:00411010                 push    ebp
.text:00411011                 push    edi
.text:00411012                 push    esi
.text:00411013                 push    ebx
.text:00411014                 sub     esp, 1Ch
.text:00411017                 mov     edi, [esp+2Ch+arg_0]
.text:0041101B                 test    byte ptr [esp+2Ch+arg_8], 1
.text:00411020                 mov     dword ptr [edi], 0
.text:00411026                 setnz   dl
.text:00411029                 mov     dword ptr [edi+4], 0
.text:00411030                 mov     dword ptr [edi+8], 0
.text:00411037                 mov     [esp+2Ch+Size], 100h ; Size
.text:0041103E                 movzx   ebp, dl
.text:00411041                 dec     ebp
.text:00411042                 and     ebp, 0FFFD4FCAh
.text:00411048                 add     ebp, 3B2FCh
.text:0041104E                 call    malloc
.text:00411053                 test    byte ptr [esp+2Ch+arg_8], 2
.text:00411058                 mov     [edi+10h], eax
.text:0041105B                 jnz     loc_411110
.text:00411061                 mov     dword ptr [edi+14h], 0
.text:00411068
.text:00411068 loc_411068:                             ; CODE XREF: sub_411010+150↓j
.text:00411068                 test    byte ptr [esp+2Ch+arg_8], 4
.text:0041106D                 jz      loc_411107
.text:00411073                 or      byte ptr [edi+1Ch], 80h
.text:00411077                 and     ebp, 0FFFFFFBFh
.text:0041107A                 or      ebp, 100h
.text:00411080
.text:00411080 loc_411080:                             ; CODE XREF: sub_411010+FB↓j
.text:00411080                 shr     [esp+2Ch+arg_8], 3
.text:00411085                 movzx   edx, byte ptr [esp+2Ch+arg_8]
.text:0041108A                 movzx   ecx, byte ptr [edi+1Ch]
.text:0041108E                 and     dl, 1
.text:00411091                 shl     dl, 4
.text:00411094                 and     cl, 0EFh
.text:00411097                 or      cl, dl
.text:00411099                 mov     [edi+1Ch], cl
.text:0041109C                 mov     esi, [esp+2Ch+Str]
.text:004110A0                 mov     [esp+2Ch+Size], esi ; Str
.text:004110A3                 call    strlen
.text:004110A8                 mov     [esp+2Ch+Type], eax
.text:004110AC                 mov     ebx, [esp+2Ch+Str]
.text:004110B0                 mov     [esp+2Ch+var_20], edi
.text:004110B4                 mov     [esp+2Ch+var_24], ebp
.text:004110B8                 mov     [esp+2Ch+Size], ebx
.text:004110BB                 call    sub_4115E0
.text:004110C0                 cmp     eax, 10h
.text:004110C3                 mov     ebx, eax
.text:004110C5                 jz      short loc_411100
.text:004110C7
.text:004110C7 loc_4110C7:                             ; CODE XREF: sub_411010+F5↓j
.text:004110C7                 test    ebx, ebx
.text:004110C9                 jnz     short loc_4110D2
.text:004110CB                 mov     ebp, [edi+10h]
.text:004110CE                 test    ebp, ebp
.text:004110D0                 jnz     short loc_4110DE
.text:004110D2
.text:004110D2 loc_4110D2:                             ; CODE XREF: sub_411010+B9↑j
.text:004110D2                                         ; sub_411010+D9↓j ...
.text:004110D2                 mov     edx, ebx
.text:004110D4
.text:004110D4 loc_4110D4:                             ; CODE XREF: sub_411010+116↓j
.text:004110D4                 add     esp, 1Ch
.text:004110D7                 mov     eax, edx
.text:004110D9                 pop     ebx
.text:004110DA                 pop     esi
.text:004110DB                 pop     edi
.text:004110DC                 pop     ebp
.text:004110DD                 retn
.text:004110DE ; ---------------------------------------------------------------------------
.text:004110DE
.text:004110DE loc_4110DE:                             ; CODE XREF: sub_411010+C0↑j
.text:004110DE                 mov     [esp+2Ch+Size], edi
.text:004110E1                 call    sub_411000
.text:004110E6                 cmp     eax, 0FFFFFFFEh
.text:004110E9                 jnz     short loc_4110D2
.text:004110EB                 mov     esi, [edi+10h]
.text:004110EE                 mov     [esp+2Ch+Size], esi ; Block
.text:004110F1                 call    free
.text:004110F6                 mov     dword ptr [edi+10h], 0
.text:004110FD                 jmp     short loc_4110D2
.text:004110FD ; ---------------------------------------------------------------------------
.text:004110FF                 align 10h
.text:00411100
.text:00411100 loc_411100:                             ; CODE XREF: sub_411010+B5↑j
.text:00411100                 mov     ebx, 8
.text:00411105                 jmp     short loc_4110C7
.text:00411107 ; ---------------------------------------------------------------------------
.text:00411107
.text:00411107 loc_411107:                             ; CODE XREF: sub_411010+5D↑j
.text:00411107                 and     byte ptr [edi+1Ch], 7Fh
.text:0041110B                 jmp     loc_411080
.text:00411110 ; ---------------------------------------------------------------------------
.text:00411110
.text:00411110 loc_411110:                             ; CODE XREF: sub_411010+4B↑j
.text:00411110                 mov     [esp+2Ch+Size], 100h ; Size
.text:00411117                 call    malloc
.text:0041111C                 mov     [edi+14h], eax
.text:0041111F                 test    eax, eax
.text:00411121                 mov     edx, 0Ch
.text:00411126                 jz      short loc_4110D4
.text:00411128                 xor     ebx, ebx
.text:0041112A                 lea     esi, [esi+0]
.text:00411130
.text:00411130 loc_411130:                             ; CODE XREF: sub_411010+14E↓j
.text:00411130                 mov     edx, ds:__mb_cur_max
.text:00411136                 mov     esi, [edi+14h]
.text:00411139                 cmp     dword ptr [edx], 1
.text:0041113C                 jz      short loc_411171
.text:0041113E                 mov     [esp+2Ch+Type], 1 ; Type
.text:00411146                 mov     [esp+2Ch+Size], ebx ; C
.text:00411149                 call    _isctype
.text:0041114E
.text:0041114E loc_41114E:                             ; CODE XREF: sub_411010+170↓j
.text:0041114E                 test    eax, eax
.text:00411150                 mov     dl, bl
.text:00411152                 jnz     short loc_411165
.text:00411154
.text:00411154 loc_411154:                             ; CODE XREF: sub_411010+15F↓j
.text:00411154                 mov     [ebx+esi], dl
.text:00411157                 inc     ebx
.text:00411158                 cmp     ebx, 0FFh
.text:0041115E                 jbe     short loc_411130
.text:00411160                 jmp     loc_411068
.text:00411165 ; ---------------------------------------------------------------------------
.text:00411165
.text:00411165 loc_411165:                             ; CODE XREF: sub_411010+142↑j
.text:00411165                 mov     [esp+2Ch+Size], ebx ; C
.text:00411168                 call    tolower
.text:0041116D                 mov     dl, al
.text:0041116F                 jmp     short loc_411154
.text:00411171 ; ---------------------------------------------------------------------------
.text:00411171
.text:00411171 loc_411171:                             ; CODE XREF: sub_411010+12C↑j
.text:00411171                 mov     edx, ds:_pctype
.text:00411177                 mov     ecx, [edx]
.text:00411179                 movzx   eax, word ptr [ecx+ebx*2]
.text:0041117D                 and     eax, 1
.text:00411180                 jmp     short loc_41114E
.text:00411180 sub_411010      endp
.text:00411180
.text:00411180 ; ---------------------------------------------------------------------------
.text:00411182                 align 10h
.text:00411190
.text:00411190 ; =============== S U B R O U T I N E =======================================
.text:00411190
.text:00411190
.text:00411190 ; int __cdecl sub_411190(int, char *, int, int, int)
.text:00411190 sub_411190      proc near               ; CODE XREF: .text:0040DB13↑p
.text:00411190                                         ; .text:0040DB96↑p
.text:00411190
.text:00411190 Str             = dword ptr -8Ch
.text:00411190 var_88          = dword ptr -88h
.text:00411190 var_84          = dword ptr -84h
.text:00411190 var_80          = dword ptr -80h
.text:00411190 var_7C          = dword ptr -7Ch
.text:00411190 var_78          = dword ptr -78h
.text:00411190 var_74          = dword ptr -74h
.text:00411190 var_70          = dword ptr -70h
.text:00411190 var_6C          = dword ptr -6Ch
.text:00411190 var_4D          = byte ptr -4Dh
.text:00411190 var_4C          = dword ptr -4Ch
.text:00411190 var_48          = dword ptr -48h
.text:00411190 var_44          = dword ptr -44h
.text:00411190 var_40          = dword ptr -40h
.text:00411190 var_3C          = dword ptr -3Ch
.text:00411190 var_38          = dword ptr -38h
.text:00411190 var_34          = dword ptr -34h
.text:00411190 var_30          = dword ptr -30h
.text:00411190 var_2C          = dword ptr -2Ch
.text:00411190 Block           = dword ptr -28h
.text:00411190 var_24          = dword ptr -24h
.text:00411190 arg_0           = dword ptr  4
.text:00411190 arg_4           = dword ptr  8
.text:00411190 arg_8           = dword ptr  0Ch
.text:00411190 arg_C           = dword ptr  10h
.text:00411190 arg_10          = dword ptr  14h
.text:00411190
.text:00411190                 push    ebp
.text:00411191                 push    edi
.text:00411192                 push    esi
.text:00411193                 push    ebx
.text:00411194                 sub     esp, 7Ch
.text:00411197                 mov     ebx, [esp+8Ch+arg_0]
.text:0041119E                 mov     edx, [esp+8Ch+arg_4]
.text:004111A5                 mov     ebp, [esp+8Ch+arg_8]
.text:004111AC                 mov     esi, [esp+8Ch+arg_10]
.text:004111B3                 mov     [esp+8Ch+Str], edx ; Str
.text:004111B6                 call    strlen
.text:004111BB                 test    byte ptr [ebx+1Ch], 10h
.text:004111BF                 mov     edi, eax
.text:004111C1                 mov     [esp+8Ch+var_4D], 0
.text:004111C6                 jnz     short loc_4111E0
.text:004111C8                 test    ebp, ebp
.text:004111CA                 jz      short loc_4111E0
.text:004111CC                 mov     [esp+8Ch+var_4D], 1
.text:004111D1                 jmp     short loc_4111E0
.text:004111D1 ; ---------------------------------------------------------------------------
.text:004111D3                 align 10h
.text:004111E0
.text:004111E0 loc_4111E0:                             ; CODE XREF: sub_411190+36↑j
.text:004111E0                                         ; sub_411190+3A↑j ...
.text:004111E0                 mov     edx, [ebx]
.text:004111E2                 mov     [esp+8Ch+var_4C], edx
.text:004111E6                 mov     ecx, [ebx+4]
.text:004111E9                 mov     [esp+8Ch+var_48], ecx
.text:004111ED                 mov     edx, [ebx+8]
.text:004111F0                 mov     [esp+8Ch+var_44], edx
.text:004111F4                 mov     ecx, [ebx+0Ch]
.text:004111F7                 mov     [esp+8Ch+var_40], ecx
.text:004111FB                 mov     edx, [ebx+10h]
.text:004111FE                 mov     [esp+8Ch+var_3C], edx
.text:00411202                 mov     ecx, [ebx+14h]
.text:00411205                 mov     [esp+8Ch+var_38], ecx
.text:00411209                 mov     edx, [ebx+18h]
.text:0041120C                 mov     [esp+8Ch+var_34], edx
.text:00411210                 mov     ecx, [ebx+1Ch]
.text:00411213                 mov     edx, esi
.text:00411215                 shr     esi, 1
.text:00411217                 and     dl, 1
.text:0041121A                 mov     eax, esi
.text:0041121C                 mov     [esp+8Ch+var_30], ecx
.text:00411220                 shl     dl, 5
.text:00411223                 and     al, 1
.text:00411225                 movzx   ebx, byte ptr [esp+8Ch+var_30]
.text:0041122A                 shl     al, 6
.text:0041122D                 and     bl, 9Fh
.text:00411230                 or      bl, dl
.text:00411232                 or      bl, al
.text:00411234                 and     bl, 0F9h
.text:00411237                 or      bl, 4
.text:0041123A                 cmp     [esp+8Ch+var_4D], 0
.text:0041123F                 mov     byte ptr [esp+8Ch+var_30], bl
.text:00411243                 jnz     loc_4112F6
.text:00411249
.text:00411249 loc_411249:                             ; CODE XREF: sub_411190+18F↓j
.text:00411249                 movzx   ecx, [esp+8Ch+var_4D]
.text:0041124E                 lea     esi, [esp+8Ch+var_2C]
.text:00411252                 mov     [esp+8Ch+var_6C], edi
.text:00411256                 lea     ebx, [esp+8Ch+var_4C]
.text:0041125A                 mov     [esp+8Ch+var_74], edi
.text:0041125E                 mov     [esp+8Ch+var_78], 0
.text:00411266                 xor     cl, 1
.text:00411269                 movzx   edx, cl
.text:0041126C                 mov     [esp+8Ch+var_7C], edi
.text:00411270                 mov     ecx, [esp+8Ch+arg_4]
.text:00411277                 dec     edx
.text:00411278                 mov     [esp+8Ch+var_84], 0
.text:00411280                 and     esi, edx
.text:00411282                 mov     [esp+8Ch+var_70], esi
.text:00411286                 mov     [esp+8Ch+var_80], ecx
.text:0041128A                 mov     [esp+8Ch+var_88], 0
.text:00411292                 mov     [esp+8Ch+Str], ebx
.text:00411295                 call    sub_414950
.text:0041129A                 cmp     [esp+8Ch+var_4D], 0
.text:0041129F                 mov     esi, eax
.text:004112A1                 jz      short loc_4112E1
.text:004112A3                 test    eax, eax
.text:004112A5                 js      short loc_4112F0
.text:004112A7                 xor     edx, edx
.text:004112A9                 cmp     edx, ebp
.text:004112AB                 jnb     short loc_4112F0
.text:004112AD                 mov     ecx, [esp+8Ch+Block]
.text:004112B1                 mov     ebx, [esp+8Ch+var_24]
.text:004112B5                 lea     esi, [esi+0]
.text:004112B9                 lea     edi, [edi+0]
.text:004112C0
.text:004112C0 loc_4112C0:                             ; CODE XREF: sub_411190+147↓j
.text:004112C0                 mov     eax, [ecx+edx*4]
.text:004112C3                 mov     edi, [esp+8Ch+arg_C]
.text:004112CA                 mov     [edi+edx*8], eax
.text:004112CD                 mov     eax, [ebx+edx*4]
.text:004112D0                 mov     [edi+edx*8+4], eax
.text:004112D4                 inc     edx
.text:004112D5                 cmp     edx, ebp
.text:004112D7                 jb      short loc_4112C0
.text:004112D9
.text:004112D9 loc_4112D9:                             ; CODE XREF: sub_411190+164↓j
.text:004112D9                 mov     [esp+8Ch+Str], ecx ; Block
.text:004112DC                 call    free
.text:004112E1
.text:004112E1 loc_4112E1:                             ; CODE XREF: sub_411190+111↑j
.text:004112E1                 mov     eax, esi
.text:004112E3                 shr     eax, 1Fh
.text:004112E6
.text:004112E6 loc_4112E6:                             ; CODE XREF: sub_411190+186↓j
.text:004112E6                 add     esp, 7Ch
.text:004112E9                 pop     ebx
.text:004112EA                 pop     esi
.text:004112EB                 pop     edi
.text:004112EC                 pop     ebp
.text:004112ED                 retn
.text:004112ED ; ---------------------------------------------------------------------------
.text:004112EE                 align 10h
.text:004112F0
.text:004112F0 loc_4112F0:                             ; CODE XREF: sub_411190+115↑j
.text:004112F0                                         ; sub_411190+11B↑j
.text:004112F0                 mov     ecx, [esp+8Ch+Block]
.text:004112F4                 jmp     short loc_4112D9
.text:004112F6 ; ---------------------------------------------------------------------------
.text:004112F6
.text:004112F6 loc_4112F6:                             ; CODE XREF: sub_411190+B3↑j
.text:004112F6                 mov     [esp+8Ch+var_2C], ebp
.text:004112FA                 lea     esi, ds:0[ebp*8]
.text:00411301                 mov     [esp+8Ch+Str], esi ; Size
.text:00411304                 call    malloc
.text:00411309                 mov     [esp+8Ch+Block], eax
.text:0041130D                 mov     ecx, eax
.text:0041130F                 test    ecx, ecx
.text:00411311                 mov     eax, 1
.text:00411316                 jz      short loc_4112E6
.text:00411318                 lea     eax, [ecx+ebp*4]
.text:0041131B                 mov     [esp+8Ch+var_24], eax
.text:0041131F                 jmp     loc_411249
.text:0041131F sub_411190      endp
.text:0041131F
.text:0041131F ; ---------------------------------------------------------------------------
.text:00411324                 align 10h
.text:00411330                 mov     eax, ds:dword_421CB0
.text:00411335                 mov     ecx, [esp+4]
.text:00411339                 mov     ds:dword_421CB0, ecx
.text:0041133F                 retn
.text:00411340 ; ---------------------------------------------------------------------------
.text:00411340                 push    ebx
.text:00411341                 mov     ebx, [esp+10h]
.text:00411345                 mov     edx, [esp+8]
.text:00411349                 mov     ecx, [esp+0Ch]
.text:0041134D                 test    ebx, ebx
.text:0041134F                 jz      short loc_411370
.text:00411351                 movzx   eax, byte ptr [edx+1Ch]
.text:00411355                 and     al, 0F9h
.text:00411357                 or      al, 2
.text:00411359                 mov     [edx+1Ch], al
.text:0041135C                 mov     edx, [esp+14h]
.text:00411360                 mov     [ecx], ebx
.text:00411362                 mov     [ecx+4], edx
.text:00411365                 mov     edx, [esp+18h]
.text:00411369                 mov     [ecx+8], edx
.text:0041136C
.text:0041136C loc_41136C:                             ; CODE XREF: .text:00411388↓j
.text:0041136C                 pop     ebx
.text:0041136D                 retn
.text:0041136D ; ---------------------------------------------------------------------------
.text:0041136E                 align 10h
.text:00411370
.text:00411370 loc_411370:                             ; CODE XREF: .text:0041134F↑j
.text:00411370                 and     byte ptr [edx+1Ch], 0F9h
.text:00411374                 mov     dword ptr [ecx], 0
.text:0041137A                 mov     dword ptr [ecx+8], 0
.text:00411381                 mov     dword ptr [ecx+4], 0
.text:00411388                 jmp     short loc_41136C
.text:00411388 ; ---------------------------------------------------------------------------
.text:0041138A                 align 10h
.text:00411390                 sub     esp, 2Ch
.text:00411393                 mov     edx, [esp+44h]
.text:00411397                 mov     dword ptr [esp+8], 0
.text:0041139F                 mov     ecx, [esp+38h]
.text:004113A3                 mov     dword ptr [esp+4], 0
.text:004113AB                 mov     [esp+1Ch], edx
.text:004113AF                 mov     edx, [esp+40h]
.text:004113B3                 mov     [esp+20h], ecx
.text:004113B7                 mov     [esp+10h], ecx
.text:004113BB                 mov     [esp+18h], edx
.text:004113BF                 mov     edx, [esp+3Ch]
.text:004113C3                 mov     [esp+14h], edx
.text:004113C7                 mov     edx, [esp+34h]
.text:004113CB                 mov     [esp+0Ch], edx
.text:004113CF                 mov     edx, [esp+30h]
.text:004113D3                 mov     [esp], edx
.text:004113D6                 call    sub_414950
.text:004113DB                 add     esp, 2Ch
.text:004113DE                 retn
.text:004113DE ; ---------------------------------------------------------------------------
.text:004113DF                 align 10h
.text:004113E0                 jmp     sub_414950
.text:004113E0 ; ---------------------------------------------------------------------------
.text:004113E5                 align 10h
.text:004113F0                 sub     esp, 2Ch
.text:004113F3                 mov     edx, [esp+40h]
.text:004113F7                 mov     dword ptr [esp+8], 0
.text:004113FF                 mov     ecx, [esp+38h]
.text:00411403                 mov     dword ptr [esp+4], 0
.text:0041140B                 mov     [esp+18h], edx
.text:0041140F                 mov     edx, [esp+3Ch]
.text:00411413                 mov     [esp+1Ch], ecx
.text:00411417                 mov     [esp+10h], ecx
.text:0041141B                 mov     [esp+14h], edx
.text:0041141F                 mov     edx, [esp+34h]
.text:00411423                 mov     [esp+0Ch], edx
.text:00411427                 mov     edx, [esp+30h]
.text:0041142B                 mov     [esp], edx
.text:0041142E                 call    sub_40E6D0
.text:00411433                 add     esp, 2Ch
.text:00411436                 retn
.text:00411436 ; ---------------------------------------------------------------------------
.text:00411437                 align 10h
.text:00411440                 jmp     sub_40E6D0
.text:00411440 ; ---------------------------------------------------------------------------
.text:00411445                 align 10h
.text:00411450                 sub     esp, 1Ch
.text:00411453                 mov     ecx, [esp+28h]
.text:00411457                 movzx   edx, byte ptr [ecx+1Ch]
.text:0041145B                 and     dl, 0E9h
.text:0041145E                 or      dl, 80h
.text:00411461                 mov     [ecx+1Ch], dl
.text:00411464                 mov     edx, [esp+24h]
.text:00411468                 mov     [esp+0Ch], ecx
.text:0041146C                 mov     ecx, ds:dword_421CB0
.text:00411472                 mov     [esp+4], edx
.text:00411476                 mov     edx, [esp+20h]
.text:0041147A                 mov     [esp+8], ecx
.text:0041147E                 mov     [esp], edx
.text:00411481                 call    sub_4115E0
.text:00411486                 test    eax, eax
.text:00411488                 jz      short loc_4114A4
.text:0041148A                 mov     ecx, ds:dword_410F70[eax*4]
.text:00411491                 add     ecx, offset aSuccess ; "Success"
.text:00411497                 mov     [esp+20h], ecx
.text:0041149B                 add     esp, 1Ch
.text:0041149E                 jmp     ds:libintl_gettext
.text:004114A4 ; ---------------------------------------------------------------------------
.text:004114A4
.text:004114A4 loc_4114A4:                             ; CODE XREF: .text:00411488↑j
.text:004114A4                 xor     eax, eax
.text:004114A6                 add     esp, 1Ch
.text:004114A9                 retn
.text:004114A9 ; ---------------------------------------------------------------------------
.text:004114AA                 align 10h
.text:004114B0                 sub     esp, 1Ch
.text:004114B3                 mov     eax, [esp+20h]
.text:004114B7                 mov     [esp+14h], edi
.text:004114BB                 mov     edi, [esp+2Ch]
.text:004114BF                 cmp     eax, 10h
.text:004114C2                 mov     [esp+18h], ebp
.text:004114C6                 mov     ebp, [esp+28h]
.text:004114CA                 mov     [esp+0Ch], ebx
.text:004114CE                 mov     [esp+10h], esi
.text:004114D2                 ja      short loc_411548
.text:004114D4                 mov     edx, ds:dword_410F70[eax*4]
.text:004114DB                 add     edx, offset aSuccess ; "Success"
.text:004114E1                 mov     [esp], edx
.text:004114E4                 call    ds:libintl_gettext
.text:004114EA                 mov     [esp], eax
.text:004114ED                 mov     ebx, eax
.text:004114EF                 call    strlen
.text:004114F4                 test    edi, edi
.text:004114F6                 lea     esi, [eax+1]
.text:004114F9                 jz      short loc_411520
.text:004114FB                 cmp     esi, edi
.text:004114FD                 jbe     short loc_411536
.text:004114FF                 mov     [esp+4], ebx
.text:00411503                 lea     edx, [edi-1]
.text:00411506                 mov     [esp+8], edx
.text:0041150A                 mov     [esp], ebp
.text:0041150D                 call    sub_419D20
.text:00411512                 mov     byte ptr [eax], 0
.text:00411515                 lea     esi, [esi+0]
.text:00411519                 lea     edi, [edi+0]
.text:00411520
.text:00411520 loc_411520:                             ; CODE XREF: .text:004114F9↑j
.text:00411520                                         ; .text:00411546↓j
.text:00411520                 mov     eax, esi
.text:00411522                 mov     ebx, [esp+0Ch]
.text:00411526                 mov     esi, [esp+10h]
.text:0041152A                 mov     edi, [esp+14h]
.text:0041152E                 mov     ebp, [esp+18h]
.text:00411532                 add     esp, 1Ch
.text:00411535                 retn
.text:00411536 ; ---------------------------------------------------------------------------
.text:00411536
.text:00411536 loc_411536:                             ; CODE XREF: .text:004114FD↑j
.text:00411536                 mov     [esp+8], esi
.text:0041153A                 mov     [esp+4], ebx
.text:0041153E                 mov     [esp], ebp
.text:00411541                 call    memcpy
.text:00411546                 jmp     short loc_411520
.text:00411548 ; ---------------------------------------------------------------------------
.text:00411548
.text:00411548 loc_411548:                             ; CODE XREF: .text:004114D2↑j
.text:00411548                 call    abort
.text:00411548 ; ---------------------------------------------------------------------------
.text:0041154D                 align 10h
.text:00411550
.text:00411550 ; =============== S U B R O U T I N E =======================================
.text:00411550
.text:00411550
.text:00411550 sub_411550      proc near               ; CODE XREF: .text:0040DBB1↑p
.text:00411550                                         ; .text:0040DBC7↑p
.text:00411550
.text:00411550 Block           = dword ptr -0Ch
.text:00411550 var_4           = dword ptr -4
.text:00411550 arg_0           = dword ptr  4
.text:00411550
.text:00411550                 sub     esp, 0Ch
.text:00411553                 mov     [esp+0Ch+var_4], ebx
.text:00411557                 mov     ebx, [esp+0Ch+arg_0]
.text:0041155B                 mov     eax, [ebx]
.text:0041155D                 test    eax, eax
.text:0041155F                 jnz     short loc_4115C0
.text:00411561
.text:00411561 loc_411561:                             ; CODE XREF: sub_411550+78↓j
.text:00411561                 mov     dword ptr [ebx], 0
.text:00411567                 mov     eax, [ebx+10h]
.text:0041156A                 mov     dword ptr [ebx+4], 0
.text:00411571                 mov     dword ptr [ebx+8], 0
.text:00411578                 test    eax, eax
.text:0041157A                 jnz     short loc_4115B0
.text:0041157C
.text:0041157C loc_41157C:                             ; CODE XREF: sub_411550+68↓j
.text:0041157C                 and     byte ptr [ebx+1Ch], 0F7h
.text:00411580                 mov     eax, [ebx+14h]
.text:00411583                 mov     dword ptr [ebx+10h], 0
.text:0041158A                 test    eax, eax
.text:0041158C                 jnz     short loc_4115A0
.text:0041158E
.text:0041158E loc_41158E:                             ; CODE XREF: sub_411550+58↓j
.text:0041158E                 mov     dword ptr [ebx+14h], 0
.text:00411595                 mov     ebx, [esp+0Ch+var_4]
.text:00411599                 add     esp, 0Ch
.text:0041159C                 retn
.text:0041159C ; ---------------------------------------------------------------------------
.text:0041159D                 align 10h
.text:004115A0
.text:004115A0 loc_4115A0:                             ; CODE XREF: sub_411550+3C↑j
.text:004115A0                 mov     [esp+0Ch+Block], eax ; Block
.text:004115A3                 call    free
.text:004115A8                 jmp     short loc_41158E
.text:004115A8 ; ---------------------------------------------------------------------------
.text:004115AA                 align 10h
.text:004115B0
.text:004115B0 loc_4115B0:                             ; CODE XREF: sub_411550+2A↑j
.text:004115B0                 mov     [esp+0Ch+Block], eax ; Block
.text:004115B3                 call    free
.text:004115B8                 jmp     short loc_41157C
.text:004115B8 ; ---------------------------------------------------------------------------
.text:004115BA                 align 10h
.text:004115C0
.text:004115C0 loc_4115C0:                             ; CODE XREF: sub_411550+F↑j
.text:004115C0                 mov     [esp+0Ch+Block], eax ; Block
.text:004115C3                 call    free
.text:004115C8                 jmp     short loc_411561
.text:004115C8 sub_411550      endp
.text:004115C8
.text:004115C8 ; ---------------------------------------------------------------------------
.text:004115CA aLower          db 'lower',0            ; DATA XREF: sub_4115E0+1EEB↓o
.text:004115D0 aUpper          db 'upper',0            ; DATA XREF: sub_4115E0+1F11↓o
.text:004115D6                 align 10h
.text:004115E0
.text:004115E0 ; =============== S U B R O U T I N E =======================================
.text:004115E0
.text:004115E0
.text:004115E0 sub_4115E0      proc near               ; CODE XREF: sub_411010+AB↑p
.text:004115E0                                         ; .text:00411481↑p
.text:004115E0
.text:004115E0 Size            = dword ptr -97Ch
.text:004115E0 var_978         = dword ptr -978h
.text:004115E0 var_974         = dword ptr -974h
.text:004115E0 var_970         = dword ptr -970h
.text:004115E0 var_96C         = dword ptr -96Ch
.text:004115E0 var_968         = dword ptr -968h
.text:004115E0 var_950         = dword ptr -950h
.text:004115E0 var_940         = dword ptr -940h
.text:004115E0 var_93C         = dword ptr -93Ch
.text:004115E0 var_938         = dword ptr -938h
.text:004115E0 var_934         = dword ptr -934h
.text:004115E0 var_930         = dword ptr -930h
.text:004115E0 Type            = word ptr -92Ch
.text:004115E0 var_926         = byte ptr -926h
.text:004115E0 var_925         = byte ptr -925h
.text:004115E0 var_924         = dword ptr -924h
.text:004115E0 var_91E         = byte ptr -91Eh
.text:004115E0 var_91D         = byte ptr -91Dh
.text:004115E0 var_91C         = byte ptr -91Ch
.text:004115E0 var_90C         = dword ptr -90Ch
.text:004115E0 var_908         = dword ptr -908h
.text:004115E0 var_904         = dword ptr -904h
.text:004115E0 var_900         = dword ptr -900h
.text:004115E0 var_8FC         = dword ptr -8FCh
.text:004115E0 var_8F8         = dword ptr -8F8h
.text:004115E0 var_8F4         = dword ptr -8F4h
.text:004115E0 var_8F0         = dword ptr -8F0h
.text:004115E0 var_8EC         = byte ptr -8ECh
.text:004115E0 var_8D0         = dword ptr -8D0h
.text:004115E0 var_8CC         = byte ptr -8CCh
.text:004115E0 var_84C         = byte ptr -84Ch
.text:004115E0 name            = byte ptr -83Ch
.text:004115E0 Block           = dword ptr -2Ch
.text:004115E0 var_28          = dword ptr -28h
.text:004115E0 var_24          = dword ptr -24h
.text:004115E0 arg_0           = dword ptr  4
.text:004115E0 arg_4           = dword ptr  8
.text:004115E0 arg_8           = dword ptr  0Ch
.text:004115E0 arg_C           = dword ptr  10h
.text:004115E0
.text:004115E0                 push    ebp
.text:004115E1                 mov     ebp, 0Ch
.text:004115E6                 push    edi
.text:004115E7                 push    esi
.text:004115E8                 push    ebx
.text:004115E9                 sub     esp, 96Ch
.text:004115EF                 mov     eax, [esp+97Ch+arg_0]
.text:004115F6                 mov     [esp+97Ch+var_900], 0
.text:004115FE                 mov     ecx, [esp+97Ch+arg_C]
.text:00411605                 mov     ebx, [esp+97Ch+arg_4]
.text:0041160C                 mov     [esp+97Ch+var_8D0], eax
.text:00411613                 mov     edx, [ecx+14h]
.text:00411616                 add     eax, ebx
.text:00411618                 mov     [esp+97Ch+var_8F4], eax
.text:0041161F                 xor     eax, eax
.text:00411621                 mov     [esp+97Ch+var_8F8], edx
.text:00411628                 mov     [esp+97Ch+var_8FC], eax
.text:0041162F                 mov     [esp+97Ch+var_908], 0
.text:00411637                 mov     [esp+97Ch+var_90C], 0
.text:0041163F                 mov     [esp+97Ch+Size], 280h ; Size
.text:00411646                 call    malloc
.text:0041164B                 mov     [esp+97Ch+Block], eax
.text:00411652                 test    eax, eax
.text:00411654                 jz      loc_4119F6
.text:0041165A                 mov     edi, [esp+97Ch+arg_C]
.text:00411661                 xor     edx, edx
.text:00411663                 mov     ecx, 20h ; ' '
.text:00411668                 mov     [esp+97Ch+var_28], ecx
.text:0041166F                 mov     ebp, [esp+97Ch+arg_8]
.text:00411676                 mov     [esp+97Ch+var_24], edx
.text:0041167D                 and     byte ptr [edi+1Ch], 97h
.text:00411681                 mov     [edi+0Ch], ebp
.text:00411684                 mov     dword ptr [edi+8], 0
.text:0041168B                 mov     esi, ds:dword_421280
.text:00411691                 mov     dword ptr [edi+18h], 0
.text:00411698                 test    esi, esi
.text:0041169A                 jz      loc_4148D1
.text:004116A0
.text:004116A0 loc_4116A0:                             ; CODE XREF: sub_4115E0+3351↓j
.text:004116A0                 mov     ebx, [esp+97Ch+arg_C]
.text:004116A7                 mov     edx, [ebx+4]
.text:004116AA                 test    edx, edx
.text:004116AC                 jnz     loc_4148C2
.text:004116B2                 mov     eax, [ebx]
.text:004116B4                 test    eax, eax
.text:004116B6                 jz      loc_4148A8
.text:004116BC                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:004116C4                 mov     [esp+97Ch+Size], eax ; Block
.text:004116C7                 call    realloc
.text:004116CC                 mov     [ebx], eax
.text:004116CE
.text:004116CE loc_4116CE:                             ; CODE XREF: sub_4115E0+32DD↓j
.text:004116CE                 mov     esi, [esp+97Ch+arg_C]
.text:004116D5                 mov     edi, [esi]
.text:004116D7                 test    edi, edi
.text:004116D9                 jz      loc_414897
.text:004116DF                 mov     eax, [esp+97Ch+arg_C]
.text:004116E6                 mov     dword ptr [eax+4], 20h ; ' '
.text:004116ED
.text:004116ED loc_4116ED:                             ; CODE XREF: sub_4115E0+32EC↓j
.text:004116ED                 mov     [esp+97Ch+var_950], edi
.text:004116F1                 mov     [esp+97Ch+var_904], edi
.text:004116F5                 mov     edi, [esp+97Ch+var_8D0]
.text:004116FC                 cmp     edi, [esp+97Ch+var_8F4]
.text:00411703                 jz      loc_411A50
.text:00411709
.text:00411709 loc_411709:                             ; CODE XREF: sub_4115E0+43D↓j
.text:00411709                 movzx   ebx, byte ptr [edi]
.text:0041170C                 inc     edi
.text:0041170D                 mov     edx, [esp+97Ch+var_8F8]
.text:00411714                 mov     [esp+97Ch+var_8D0], edi
.text:0041171B                 test    edx, edx
.text:0041171D                 mov     [esp+97Ch+var_8EC], bl
.text:00411724                 jz      short loc_41173B
.text:00411726                 mov     edi, [esp+97Ch+var_8F8]
.text:0041172D                 movzx   ecx, bl
.text:00411730                 movzx   ebx, byte ptr [ecx+edi]
.text:00411734                 mov     [esp+97Ch+var_8EC], bl
.text:0041173B
.text:0041173B loc_41173B:                             ; CODE XREF: sub_4115E0+144↑j
.text:0041173B                 movzx   eax, [esp+97Ch+var_8EC]
.text:00411743                 sub     eax, 0Ah        ; switch 115 cases
.text:00411746                 cmp     eax, 72h
.text:00411749                 ja      def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041174F                 jmp     ds:jpt_41174F[eax*4] ; switch jump
.text:0041174F ; ---------------------------------------------------------------------------
.text:00411756                 align 4
.text:00411758 jpt_41174F      dd offset loc_411E45, offset def_41174F, offset def_41174F
.text:00411758                                         ; DATA XREF: sub_4115E0+16F↑r
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F ; jump table for switch statement
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset loc_41207D
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset loc_41218C, offset loc_412376, offset loc_412640
.text:00411758                 dd offset loc_412CB4, offset def_41174F, offset def_41174F
.text:00411758                 dd offset loc_412BD0, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset loc_412CB4
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset loc_412CCA, offset loc_413856, offset def_41174F
.text:00411758                 dd offset loc_411924, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset def_41174F
.text:00411758                 dd offset def_41174F, offset def_41174F, offset loc_414864
.text:00411758                 dd offset loc_414882
.text:00411924 ; ---------------------------------------------------------------------------
.text:00411924
.text:00411924 loc_411924:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00411924                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00411924                 mov     esi, [esp+97Ch+arg_0] ; jumptable 0041174F case 94
.text:0041192B                 mov     edx, [esp+97Ch+var_8D0]
.text:00411932                 inc     esi
.text:00411933                 cmp     edx, esi
.text:00411935                 jz      short loc_411945
.text:00411937                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0041193F                 jz      loc_411B8D
.text:00411945
.text:00411945 loc_411945:                             ; CODE XREF: sub_4115E0+355↑j
.text:00411945                                         ; sub_4115E0+3D7↓j ...
.text:00411945                 mov     eax, [esp+97Ch+arg_C]
.text:0041194C                 mov     ebp, [esp+97Ch+var_950]
.text:00411950                 mov     edi, [eax]
.text:00411952                 mov     edx, [eax+4]
.text:00411955                 sub     ebp, edi
.text:00411957                 inc     ebp
.text:00411958                 cmp     ebp, edx
.text:0041195A                 jbe     loc_411A03
.text:00411960                 cmp     edx, 10000h
.text:00411966                 mov     ebp, 0Fh
.text:0041196B                 jz      loc_4119F6
.text:00411971                 lea     ebx, [edx+edx]
.text:00411974                 mov     edx, [esp+97Ch+arg_C]
.text:0041197B                 cmp     ebx, 10000h
.text:00411981                 mov     [edx+4], ebx
.text:00411984                 jbe     short loc_41198D
.text:00411986                 mov     dword ptr [edx+4], 10000h
.text:0041198D
.text:0041198D loc_41198D:                             ; CODE XREF: sub_4115E0+3A4↑j
.text:0041198D                 mov     ebp, [esp+97Ch+arg_C]
.text:00411994                 mov     esi, [ebp+4]
.text:00411997                 mov     ebp, 0Ch
.text:0041199C                 mov     [esp+97Ch+Size], edi ; Block
.text:0041199F                 mov     [esp+97Ch+var_978], esi ; Size
.text:004119A3                 call    realloc
.text:004119A8                 mov     edx, [esp+97Ch+arg_C]
.text:004119AF                 test    eax, eax
.text:004119B1                 mov     [edx], eax
.text:004119B3                 jz      short loc_4119F6
.text:004119B5                 cmp     edi, eax
.text:004119B7                 jz      short loc_411945
.text:004119B9                 mov     ecx, [esp+97Ch+var_908]
.text:004119BD                 sub     eax, edi
.text:004119BF                 add     [esp+97Ch+var_950], eax
.text:004119C3                 add     [esp+97Ch+var_904], eax
.text:004119C7                 test    ecx, ecx
.text:004119C9                 jz      short loc_4119CF
.text:004119CB                 add     [esp+97Ch+var_908], eax
.text:004119CF
.text:004119CF loc_4119CF:                             ; CODE XREF: sub_4115E0+3E9↑j
.text:004119CF                 mov     ebx, [esp+97Ch+var_900]
.text:004119D3                 test    ebx, ebx
.text:004119D5                 jz      short loc_4119DB
.text:004119D7                 add     [esp+97Ch+var_900], eax
.text:004119DB
.text:004119DB loc_4119DB:                             ; CODE XREF: sub_4115E0+3F5↑j
.text:004119DB                 mov     edi, [esp+97Ch+var_8FC]
.text:004119E2                 test    edi, edi
.text:004119E4                 jz      loc_411945
.text:004119EA                 add     [esp+97Ch+var_8FC], eax
.text:004119F1                 jmp     loc_411945
.text:004119F6 ; ---------------------------------------------------------------------------
.text:004119F6
.text:004119F6 loc_4119F6:                             ; CODE XREF: sub_4115E0+74↑j
.text:004119F6                                         ; sub_4115E0+38B↑j ...
.text:004119F6                 add     esp, 96Ch
.text:004119FC                 mov     eax, ebp
.text:004119FE                 pop     ebx
.text:004119FF                 pop     esi
.text:00411A00                 pop     edi
.text:00411A01                 pop     ebp
.text:00411A02                 retn
.text:00411A03 ; ---------------------------------------------------------------------------
.text:00411A03
.text:00411A03 loc_411A03:                             ; CODE XREF: sub_4115E0+37A↑j
.text:00411A03                 mov     edi, [esp+97Ch+var_950]
.text:00411A07                 mov     byte ptr [edi], 9
.text:00411A0A
.text:00411A0A loc_411A0A:                             ; CODE XREF: sub_4115E0+16CF↓j
.text:00411A0A                                         ; sub_4115E0+2518↓j ...
.text:00411A0A                 inc     edi
.text:00411A0B
.text:00411A0B loc_411A0B:                             ; CODE XREF: sub_4115E0+1496↓j
.text:00411A0B                 mov     [esp+97Ch+var_950], edi
.text:00411A0F
.text:00411A0F loc_411A0F:                             ; CODE XREF: sub_4115E0+7DA↓j
.text:00411A0F                                         ; sub_4115E0+A98↓j ...
.text:00411A0F                 mov     edi, [esp+97Ch+var_8D0]
.text:00411A16                 cmp     edi, [esp+97Ch+var_8F4]
.text:00411A1D                 jnz     loc_411709
.text:00411A23                 mov     ebx, [esp+97Ch+var_908]
.text:00411A27                 test    ebx, ebx
.text:00411A29                 jz      short loc_411A50
.text:00411A2B                 mov     [esp+97Ch+Size], 0Eh
.text:00411A32                 mov     ebp, [esp+97Ch+var_950]
.text:00411A36                 mov     edx, [esp+97Ch+var_908]
.text:00411A3A                 mov     esi, [esp+97Ch+var_908]
.text:00411A3E                 sub     ebp, edx
.text:00411A40                 sub     ebp, 3
.text:00411A43                 mov     [esp+97Ch+var_974], ebp
.text:00411A47                 mov     [esp+97Ch+var_978], esi
.text:00411A4B                 call    sub_40E3B0
.text:00411A50
.text:00411A50 loc_411A50:                             ; CODE XREF: sub_4115E0+123↑j
.text:00411A50                                         ; sub_4115E0+449↑j
.text:00411A50                 mov     eax, [esp+97Ch+var_24]
.text:00411A57                 test    eax, eax
.text:00411A59                 jnz     loc_411B74
.text:00411A5F                 test    [esp+97Ch+arg_8], 40000h
.text:00411A6A                 jz      loc_411B43
.text:00411A70                 mov     ecx, [esp+97Ch+arg_C]
.text:00411A77                 mov     ebp, [esp+97Ch+var_950]
.text:00411A7B                 mov     ebx, [ecx]
.text:00411A7D                 mov     edx, [ecx+4]
.text:00411A80                 sub     ebp, ebx
.text:00411A82                 mov     edi, ebx
.text:00411A84                 inc     ebp
.text:00411A85                 cmp     ebp, edx
.text:00411A87                 jbe     loc_411B37
.text:00411A8D
.text:00411A8D loc_411A8D:                             ; CODE XREF: sub_4115E0+551↓j
.text:00411A8D                 cmp     edx, 10000h
.text:00411A93                 mov     ebp, 0Fh
.text:00411A98                 jz      loc_4119F6
.text:00411A9E                 mov     esi, [esp+97Ch+arg_C]
.text:00411AA5                 lea     ebp, [edx+edx]
.text:00411AA8                 cmp     ebp, 10000h
.text:00411AAE                 mov     [esi+4], ebp
.text:00411AB1                 jbe     short loc_411ABA
.text:00411AB3                 mov     dword ptr [esi+4], 10000h
.text:00411ABA
.text:00411ABA loc_411ABA:                             ; CODE XREF: sub_4115E0+4D1↑j
.text:00411ABA                 mov     eax, [esp+97Ch+arg_C]
.text:00411AC1                 mov     ebp, 0Ch
.text:00411AC6                 mov     esi, [eax+4]
.text:00411AC9                 mov     [esp+97Ch+Size], edi ; Block
.text:00411ACC                 mov     [esp+97Ch+var_978], esi ; Size
.text:00411AD0                 call    realloc
.text:00411AD5                 mov     edx, [esp+97Ch+arg_C]
.text:00411ADC                 test    eax, eax
.text:00411ADE                 mov     [edx], eax
.text:00411AE0                 jz      loc_4119F6
.text:00411AE6                 cmp     ebx, eax
.text:00411AE8                 jz      short loc_411B1A
.text:00411AEA                 mov     edi, [esp+97Ch+var_908]
.text:00411AEE                 sub     eax, ebx
.text:00411AF0                 add     [esp+97Ch+var_950], eax
.text:00411AF4                 test    edi, edi
.text:00411AF6                 jz      short loc_411AFC
.text:00411AF8                 add     [esp+97Ch+var_908], eax
.text:00411AFC
.text:00411AFC loc_411AFC:                             ; CODE XREF: sub_4115E0+516↑j
.text:00411AFC                 mov     ebx, [esp+97Ch+var_900]
.text:00411B00                 test    ebx, ebx
.text:00411B02                 jz      short loc_411B08
.text:00411B04                 add     [esp+97Ch+var_900], eax
.text:00411B08
.text:00411B08 loc_411B08:                             ; CODE XREF: sub_4115E0+522↑j
.text:00411B08                 mov     ecx, [esp+97Ch+var_8FC]
.text:00411B0F                 test    ecx, ecx
.text:00411B11                 jz      short loc_411B1A
.text:00411B13                 add     [esp+97Ch+var_8FC], eax
.text:00411B1A
.text:00411B1A loc_411B1A:                             ; CODE XREF: sub_4115E0+508↑j
.text:00411B1A                                         ; sub_4115E0+531↑j
.text:00411B1A                 mov     eax, [esp+97Ch+arg_C]
.text:00411B21                 mov     ebp, [esp+97Ch+var_950]
.text:00411B25                 mov     ebx, [eax]
.text:00411B27                 mov     edx, [eax+4]
.text:00411B2A                 sub     ebp, ebx
.text:00411B2C                 mov     edi, ebx
.text:00411B2E                 inc     ebp
.text:00411B2F                 cmp     ebp, edx
.text:00411B31                 ja      loc_411A8D
.text:00411B37
.text:00411B37 loc_411B37:                             ; CODE XREF: sub_4115E0+4A7↑j
.text:00411B37                 mov     edx, [esp+97Ch+var_950]
.text:00411B3B                 mov     byte ptr [edx], 1
.text:00411B3E                 inc     edx
.text:00411B3F                 mov     [esp+97Ch+var_950], edx
.text:00411B43
.text:00411B43 loc_411B43:                             ; CODE XREF: sub_4115E0+48A↑j
.text:00411B43                 mov     ebp, [esp+97Ch+Block]
.text:00411B4A                 mov     [esp+97Ch+Size], ebp ; Block
.text:00411B4D                 xor     ebp, ebp
.text:00411B4F                 call    free
.text:00411B54                 mov     ecx, [esp+97Ch+arg_C]
.text:00411B5B                 mov     esi, [esp+97Ch+arg_C]
.text:00411B62                 mov     ebx, [ecx]
.text:00411B64                 sub     [esp+97Ch+var_950], ebx
.text:00411B68                 mov     edi, [esp+97Ch+var_950]
.text:00411B6C                 mov     [esi+8], edi
.text:00411B6F                 jmp     loc_4119F6
.text:00411B74 ; ---------------------------------------------------------------------------
.text:00411B74
.text:00411B74 loc_411B74:                             ; CODE XREF: sub_4115E0+479↑j
.text:00411B74                 mov     edi, [esp+97Ch+Block]
.text:00411B7B                 mov     ebp, 8
.text:00411B80
.text:00411B80 loc_411B80:                             ; CODE XREF: sub_4115E0+15BC↓j
.text:00411B80                                         ; sub_4115E0+32C3↓j
.text:00411B80                 mov     [esp+97Ch+Size], edi ; Block
.text:00411B83
.text:00411B83 loc_411B83:                             ; CODE XREF: sub_4115E0+EDF↓j
.text:00411B83                                         ; sub_4115E0+1C4C↓j ...
.text:00411B83                 call    free
.text:00411B88                 jmp     loc_4119F6
.text:00411B8D ; ---------------------------------------------------------------------------
.text:00411B8D
.text:00411B8D loc_411B8D:                             ; CODE XREF: sub_4115E0+35F↑j
.text:00411B8D                 mov     [esp+97Ch+var_978], edx
.text:00411B91                 mov     eax, [esp+97Ch+arg_8]
.text:00411B98                 mov     ebp, [esp+97Ch+arg_0]
.text:00411B9F                 mov     [esp+97Ch+var_974], eax
.text:00411BA3                 mov     [esp+97Ch+Size], ebp
.text:00411BA6                 call    sub_40E490
.text:00411BAB                 test    al, al
.text:00411BAD                 jnz     loc_411945
.text:00411BB3
.text:00411BB3 def_41174F:                             ; CODE XREF: sub_4115E0+169↑j
.text:00411BB3                                         ; sub_4115E0+16F↑j ...
.text:00411BB3                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00411BBA                 test    edx, edx
.text:00411BBC                 jz      short loc_411BD9
.text:00411BBE                 mov     eax, [esp+97Ch+var_8FC]
.text:00411BC5                 movzx   edx, byte ptr [eax]
.text:00411BC8                 movzx   ebx, dl
.text:00411BCB                 lea     ebp, [ebx+eax+1]
.text:00411BCF                 cmp     ebp, [esp+97Ch+var_950]
.text:00411BD3                 jz      loc_411DBF
.text:00411BD9
.text:00411BD9 loc_411BD9:                             ; CODE XREF: sub_4115E0+5DC↑j
.text:00411BD9                                         ; sub_4115E0+7E1↓j ...
.text:00411BD9                 mov     edi, [esp+97Ch+var_950]
.text:00411BDD                 mov     ebp, [esp+97Ch+arg_C]
.text:00411BE4                 mov     ecx, [esp+97Ch+var_950]
.text:00411BE8                 mov     [esp+97Ch+var_900], edi
.text:00411BEC                 mov     edi, [ebp+0]
.text:00411BEF                 mov     edx, [ebp+4]
.text:00411BF2                 sub     ecx, edi
.text:00411BF4                 mov     ebx, edi
.text:00411BF6                 add     ecx, 2
.text:00411BF9                 cmp     ecx, edx
.text:00411BFB                 jbe     loc_411CB8
.text:00411C01
.text:00411C01 loc_411C01:                             ; CODE XREF: sub_4115E0+6D2↓j
.text:00411C01                 cmp     edx, 10000h
.text:00411C07                 mov     ebp, 0Fh
.text:00411C0C                 jz      loc_4119F6
.text:00411C12                 lea     esi, [edx+edx]
.text:00411C15                 mov     edx, [esp+97Ch+arg_C]
.text:00411C1C                 cmp     esi, 10000h
.text:00411C22                 mov     [edx+4], esi
.text:00411C25                 jbe     short loc_411C2E
.text:00411C27                 mov     dword ptr [edx+4], 10000h
.text:00411C2E
.text:00411C2E loc_411C2E:                             ; CODE XREF: sub_4115E0+645↑j
.text:00411C2E                 mov     eax, [esp+97Ch+arg_C]
.text:00411C35                 mov     ebp, [eax+4]
.text:00411C38                 mov     [esp+97Ch+Size], edi ; Block
.text:00411C3B                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00411C3F                 mov     ebp, 0Ch
.text:00411C44                 call    realloc
.text:00411C49                 mov     edx, [esp+97Ch+arg_C]
.text:00411C50                 test    eax, eax
.text:00411C52                 mov     [edx], eax
.text:00411C54                 jz      loc_4119F6
.text:00411C5A                 cmp     ebx, eax
.text:00411C5C                 jz      short loc_411C92
.text:00411C5E                 sub     eax, ebx
.text:00411C60                 mov     ebx, [esp+97Ch+var_908]
.text:00411C64                 add     [esp+97Ch+var_950], eax
.text:00411C68                 add     [esp+97Ch+var_904], eax
.text:00411C6C                 test    ebx, ebx
.text:00411C6E                 jz      short loc_411C74
.text:00411C70                 add     [esp+97Ch+var_908], eax
.text:00411C74
.text:00411C74 loc_411C74:                             ; CODE XREF: sub_4115E0+68E↑j
.text:00411C74                 mov     ecx, [esp+97Ch+var_900]
.text:00411C78                 test    ecx, ecx
.text:00411C7A                 jz      short loc_411C80
.text:00411C7C                 add     [esp+97Ch+var_900], eax
.text:00411C80
.text:00411C80 loc_411C80:                             ; CODE XREF: sub_4115E0+69A↑j
.text:00411C80                 mov     edi, [esp+97Ch+var_8FC]
.text:00411C87                 test    edi, edi
.text:00411C89                 jz      short loc_411C92
.text:00411C8B                 add     [esp+97Ch+var_8FC], eax
.text:00411C92
.text:00411C92 loc_411C92:                             ; CODE XREF: sub_4115E0+67C↑j
.text:00411C92                                         ; sub_4115E0+6A9↑j
.text:00411C92                 mov     edx, [esp+97Ch+arg_C]
.text:00411C99                 mov     ebp, [esp+97Ch+arg_C]
.text:00411CA0                 mov     esi, [esp+97Ch+var_950]
.text:00411CA4                 mov     edi, [edx]
.text:00411CA6                 mov     edx, [ebp+4]
.text:00411CA9                 sub     esi, edi
.text:00411CAB                 add     esi, 2
.text:00411CAE                 mov     ebx, edi
.text:00411CB0                 cmp     esi, edx
.text:00411CB2                 ja      loc_411C01
.text:00411CB8
.text:00411CB8 loc_411CB8:                             ; CODE XREF: sub_4115E0+61B↑j
.text:00411CB8                 mov     eax, [esp+97Ch+var_950]
.text:00411CBC                 mov     byte ptr [eax], 2
.text:00411CBF                 inc     eax
.text:00411CC0                 mov     byte ptr [eax], 0
.text:00411CC3                 mov     ecx, [esp+97Ch+arg_C]
.text:00411CCA                 inc     eax
.text:00411CCB                 mov     [esp+97Ch+var_950], eax
.text:00411CCF                 dec     eax
.text:00411CD0                 mov     edi, [ecx]
.text:00411CD2                 mov     [esp+97Ch+var_8FC], eax
.text:00411CD9                 mov     edx, [ecx+4]
.text:00411CDC                 mov     eax, [esp+97Ch+var_950]
.text:00411CE0                 mov     ebx, edi
.text:00411CE2                 sub     eax, edi
.text:00411CE4
.text:00411CE4 loc_411CE4:                             ; CODE XREF: sub_4115E0+7B9↓j
.text:00411CE4                 inc     eax
.text:00411CE5                 cmp     eax, edx
.text:00411CE7                 jbe     loc_411D9E
.text:00411CED                 cmp     edx, 10000h
.text:00411CF3                 mov     ebp, 0Fh
.text:00411CF8                 jz      loc_4119F6
.text:00411CFE                 lea     esi, [edx+edx]
.text:00411D01                 mov     edx, [esp+97Ch+arg_C]
.text:00411D08                 cmp     esi, 10000h
.text:00411D0E                 mov     [edx+4], esi
.text:00411D11                 jbe     short loc_411D1A
.text:00411D13                 mov     dword ptr [edx+4], 10000h
.text:00411D1A
.text:00411D1A loc_411D1A:                             ; CODE XREF: sub_4115E0+731↑j
.text:00411D1A                 mov     edx, [esp+97Ch+arg_C]
.text:00411D21                 mov     ebp, [edx+4]
.text:00411D24                 mov     [esp+97Ch+Size], edi ; Block
.text:00411D27                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00411D2B                 mov     ebp, 0Ch
.text:00411D30                 call    realloc
.text:00411D35                 mov     edi, [esp+97Ch+arg_C]
.text:00411D3C                 test    eax, eax
.text:00411D3E                 mov     [edi], eax
.text:00411D40                 jz      loc_4119F6
.text:00411D46                 cmp     ebx, eax
.text:00411D48                 jz      short loc_411D7E
.text:00411D4A                 mov     ecx, [esp+97Ch+var_908]
.text:00411D4E                 sub     eax, ebx
.text:00411D50                 add     [esp+97Ch+var_950], eax
.text:00411D54                 add     [esp+97Ch+var_904], eax
.text:00411D58                 test    ecx, ecx
.text:00411D5A                 jz      short loc_411D60
.text:00411D5C                 add     [esp+97Ch+var_908], eax
.text:00411D60
.text:00411D60 loc_411D60:                             ; CODE XREF: sub_4115E0+77A↑j
.text:00411D60                 mov     ebx, [esp+97Ch+var_900]
.text:00411D64                 test    ebx, ebx
.text:00411D66                 jz      short loc_411D6C
.text:00411D68                 add     [esp+97Ch+var_900], eax
.text:00411D6C
.text:00411D6C loc_411D6C:                             ; CODE XREF: sub_4115E0+786↑j
.text:00411D6C                 mov     esi, [esp+97Ch+var_8FC]
.text:00411D73                 test    esi, esi
.text:00411D75                 jz      short loc_411D7E
.text:00411D77                 add     [esp+97Ch+var_8FC], eax
.text:00411D7E
.text:00411D7E loc_411D7E:                             ; CODE XREF: sub_4115E0+768↑j
.text:00411D7E                                         ; sub_4115E0+795↑j ...
.text:00411D7E                 mov     edx, [esp+97Ch+arg_C]
.text:00411D85                 mov     ebp, [esp+97Ch+arg_C]
.text:00411D8C                 mov     eax, [esp+97Ch+var_950]
.text:00411D90                 mov     edi, [edx]
.text:00411D92                 mov     edx, [ebp+4]
.text:00411D95                 sub     eax, edi
.text:00411D97                 mov     ebx, edi
.text:00411D99                 jmp     loc_411CE4
.text:00411D9E ; ---------------------------------------------------------------------------
.text:00411D9E
.text:00411D9E loc_411D9E:                             ; CODE XREF: sub_4115E0+707↑j
.text:00411D9E                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00411DA6                 mov     edi, [esp+97Ch+var_950]
.text:00411DAA                 mov     [edi], cl
.text:00411DAC                 mov     eax, [esp+97Ch+var_8FC]
.text:00411DB3                 inc     edi
.text:00411DB4                 mov     [esp+97Ch+var_950], edi
.text:00411DB8                 inc     byte ptr [eax]
.text:00411DBA                 jmp     loc_411A0F
.text:00411DBF ; ---------------------------------------------------------------------------
.text:00411DBF
.text:00411DBF loc_411DBF:                             ; CODE XREF: sub_4115E0+5F3↑j
.text:00411DBF                 inc     dl
.text:00411DC1                 jz      loc_411BD9
.text:00411DC7                 mov     edi, [esp+97Ch+var_8D0]
.text:00411DCE                 mov     edx, edi
.text:00411DD0                 movzx   eax, byte ptr [edi]
.text:00411DD3                 cmp     al, 2Ah ; '*'
.text:00411DD5                 jz      loc_411BD9
.text:00411DDB                 cmp     al, 5Eh ; '^'
.text:00411DDD                 jz      loc_411BD9
.text:00411DE3                 test    byte ptr [esp+97Ch+arg_8], 2
.text:00411DEB                 jz      short loc_411E34
.text:00411DED                 cmp     al, 5Ch ; '\'
.text:00411DEF                 jz      short loc_411E30
.text:00411DF1
.text:00411DF1 loc_411DF1:                             ; CODE XREF: sub_4115E0+85E↓j
.text:00411DF1                 test    [esp+97Ch+arg_8], 200h
.text:00411DFC                 jz      short loc_411D7E
.text:00411DFE                 test    [esp+97Ch+arg_8], 1000h
.text:00411E09                 jz      short loc_411E20
.text:00411E0B                 cmp     byte ptr [edx], 7Bh ; '{'
.text:00411E0E
.text:00411E0E loc_411E0E:                             ; CODE XREF: sub_4115E0+84D↓j
.text:00411E0E                 jnz     loc_411D7E
.text:00411E14                 jmp     loc_411BD9
.text:00411E14 ; ---------------------------------------------------------------------------
.text:00411E19                 align 10h
.text:00411E20
.text:00411E20 loc_411E20:                             ; CODE XREF: sub_4115E0+829↑j
.text:00411E20                 cmp     byte ptr [edx], 5Ch ; '\'
.text:00411E23                 jnz     loc_411D7E
.text:00411E29                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:00411E2D                 jmp     short loc_411E0E
.text:00411E2D ; ---------------------------------------------------------------------------
.text:00411E2F                 align 10h
.text:00411E30
.text:00411E30 loc_411E30:                             ; CODE XREF: sub_4115E0+80F↑j
.text:00411E30                 movzx   eax, byte ptr [edi+1]
.text:00411E34
.text:00411E34 loc_411E34:                             ; CODE XREF: sub_4115E0+80B↑j
.text:00411E34                 cmp     al, 2Bh ; '+'
.text:00411E36                 jz      loc_411BD9
.text:00411E3C                 cmp     al, 3Fh ; '?'
.text:00411E3E                 jnz     short loc_411DF1
.text:00411E40                 jmp     loc_411BD9
.text:00411E45 ; ---------------------------------------------------------------------------
.text:00411E45
.text:00411E45 loc_411E45:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00411E45                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00411E45                 test    [esp+97Ch+arg_8], 800h ; jumptable 0041174F case 10
.text:00411E50
.text:00411E50 loc_411E50:                             ; CODE XREF: sub_4115E0+32B2↓j
.text:00411E50                 jz      def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00411E56
.text:00411E56 loc_411E56:                             ; CODE XREF: sub_4115E0+3279↓j
.text:00411E56                 test    [esp+97Ch+arg_8], 400h
.text:00411E61                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00411E67
.text:00411E67 loc_411E67:                             ; CODE XREF: sub_4115E0+8FF↓j
.text:00411E67                                         ; sub_4115E0+92C↓j ...
.text:00411E67                 mov     eax, [esp+97Ch+arg_C]
.text:00411E6E                 mov     ebp, [esp+97Ch+var_950]
.text:00411E72                 mov     edi, [eax]
.text:00411E74                 mov     edx, [eax+4]
.text:00411E77                 sub     ebp, edi
.text:00411E79                 add     ebp, 3
.text:00411E7C                 cmp     ebp, edx
.text:00411E7E                 jbe     loc_411F1E
.text:00411E84                 cmp     edx, 10000h
.text:00411E8A                 mov     ebp, 0Fh
.text:00411E8F                 jz      loc_4119F6
.text:00411E95                 lea     ebx, [edx+edx]
.text:00411E98                 mov     edx, [esp+97Ch+arg_C]
.text:00411E9F                 cmp     ebx, 10000h
.text:00411EA5                 mov     [edx+4], ebx
.text:00411EA8                 jbe     short loc_411EB1
.text:00411EAA                 mov     dword ptr [edx+4], 10000h
.text:00411EB1
.text:00411EB1 loc_411EB1:                             ; CODE XREF: sub_4115E0+8C8↑j
.text:00411EB1                 mov     eax, [esp+97Ch+arg_C]
.text:00411EB8                 mov     ebp, [eax+4]
.text:00411EBB                 mov     [esp+97Ch+Size], edi ; Block
.text:00411EBE                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00411EC2                 mov     ebp, 0Ch
.text:00411EC7                 call    realloc
.text:00411ECC                 mov     esi, [esp+97Ch+arg_C]
.text:00411ED3                 test    eax, eax
.text:00411ED5                 mov     [esi], eax
.text:00411ED7                 jz      loc_4119F6
.text:00411EDD                 cmp     edi, eax
.text:00411EDF                 jz      short loc_411E67
.text:00411EE1                 mov     ecx, [esp+97Ch+var_908]
.text:00411EE5                 sub     eax, edi
.text:00411EE7                 add     [esp+97Ch+var_950], eax
.text:00411EEB                 add     [esp+97Ch+var_904], eax
.text:00411EEF                 test    ecx, ecx
.text:00411EF1                 jz      short loc_411EF7
.text:00411EF3                 add     [esp+97Ch+var_908], eax
.text:00411EF7
.text:00411EF7 loc_411EF7:                             ; CODE XREF: sub_4115E0+911↑j
.text:00411EF7                 mov     edx, [esp+97Ch+var_900]
.text:00411EFB                 test    edx, edx
.text:00411EFD                 jz      short loc_411F03
.text:00411EFF                 add     [esp+97Ch+var_900], eax
.text:00411F03
.text:00411F03 loc_411F03:                             ; CODE XREF: sub_4115E0+91D↑j
.text:00411F03                 mov     ebx, [esp+97Ch+var_8FC]
.text:00411F0A                 test    ebx, ebx
.text:00411F0C                 jz      loc_411E67
.text:00411F12                 add     [esp+97Ch+var_8FC], eax
.text:00411F19                 jmp     loc_411E67
.text:00411F1E ; ---------------------------------------------------------------------------
.text:00411F1E
.text:00411F1E loc_411F1E:                             ; CODE XREF: sub_4115E0+89E↑j
.text:00411F1E                 mov     [esp+97Ch+Size], 0Fh
.text:00411F25                 mov     edi, [esp+97Ch+var_950]
.text:00411F29                 mov     ebp, [esp+97Ch+var_904]
.text:00411F2D                 mov     edx, [esp+97Ch+var_904]
.text:00411F31                 mov     ebx, edi
.text:00411F33                 sub     ebx, ebp
.text:00411F35                 mov     [esp+97Ch+var_970], edi
.text:00411F39                 add     ebx, 3
.text:00411F3C                 add     edi, 3
.text:00411F3F                 mov     [esp+97Ch+var_974], ebx
.text:00411F43                 mov     [esp+97Ch+var_978], edx
.text:00411F47                 call    sub_40E400
.text:00411F4C                 mov     [esp+97Ch+var_950], edi
.text:00411F50                 mov     esi, [esp+97Ch+var_908]
.text:00411F54                 xor     ecx, ecx
.text:00411F56                 mov     [esp+97Ch+var_8FC], ecx
.text:00411F5D                 test    esi, esi
.text:00411F5F                 jz      short loc_411F84
.text:00411F61                 mov     [esp+97Ch+Size], 0Eh
.text:00411F68                 mov     eax, [esp+97Ch+var_908]
.text:00411F6C                 mov     esi, edi
.text:00411F6E                 mov     edi, [esp+97Ch+var_908]
.text:00411F72                 sub     esi, eax
.text:00411F74                 sub     esi, 3
.text:00411F77                 mov     [esp+97Ch+var_974], esi
.text:00411F7B                 mov     [esp+97Ch+var_978], edi
.text:00411F7F                 call    sub_40E3B0
.text:00411F84
.text:00411F84 loc_411F84:                             ; CODE XREF: sub_4115E0+97F↑j
.text:00411F84                 mov     esi, [esp+97Ch+arg_C]
.text:00411F8B                 mov     edx, [esp+97Ch+var_950]
.text:00411F8F                 mov     ecx, [esp+97Ch+arg_C]
.text:00411F96                 mov     edi, [esi]
.text:00411F98                 mov     ebp, edx
.text:00411F9A                 mov     [esp+97Ch+var_908], edx
.text:00411F9E                 mov     edx, [ecx+4]
.text:00411FA1                 sub     ebp, edi
.text:00411FA3                 add     ebp, 3
.text:00411FA6                 mov     ebx, edi
.text:00411FA8                 cmp     ebp, edx
.text:00411FAA                 jbe     loc_412063
.text:00411FB0
.text:00411FB0 loc_411FB0:                             ; CODE XREF: sub_4115E0+A7D↓j
.text:00411FB0                 cmp     edx, 10000h
.text:00411FB6                 mov     ebp, 0Fh
.text:00411FBB                 jz      loc_4119F6
.text:00411FC1                 lea     ebp, [edx+edx]
.text:00411FC4                 mov     edx, [esp+97Ch+arg_C]
.text:00411FCB                 cmp     ebp, 10000h
.text:00411FD1                 mov     [edx+4], ebp
.text:00411FD4                 jbe     short loc_411FDD
.text:00411FD6                 mov     dword ptr [edx+4], 10000h
.text:00411FDD
.text:00411FDD loc_411FDD:                             ; CODE XREF: sub_4115E0+9F4↑j
.text:00411FDD                 mov     eax, [esp+97Ch+arg_C]
.text:00411FE4                 mov     ebp, 0Ch
.text:00411FE9                 mov     edx, [eax+4]
.text:00411FEC                 mov     [esp+97Ch+Size], edi ; Block
.text:00411FEF                 mov     [esp+97Ch+var_978], edx ; Size
.text:00411FF3                 call    realloc
.text:00411FF8                 mov     edi, [esp+97Ch+arg_C]
.text:00411FFF                 test    eax, eax
.text:00412001                 mov     [edi], eax
.text:00412003                 jz      loc_4119F6
.text:00412009                 cmp     ebx, eax
.text:0041200B                 jz      short loc_41203D
.text:0041200D                 sub     eax, ebx
.text:0041200F                 mov     ebx, [esp+97Ch+var_908]
.text:00412013                 add     [esp+97Ch+var_950], eax
.text:00412017                 test    ebx, ebx
.text:00412019                 jz      short loc_41201F
.text:0041201B                 add     [esp+97Ch+var_908], eax
.text:0041201F
.text:0041201F loc_41201F:                             ; CODE XREF: sub_4115E0+A39↑j
.text:0041201F                 mov     ecx, [esp+97Ch+var_900]
.text:00412023                 test    ecx, ecx
.text:00412025                 jz      short loc_41202B
.text:00412027                 add     [esp+97Ch+var_900], eax
.text:0041202B
.text:0041202B loc_41202B:                             ; CODE XREF: sub_4115E0+A45↑j
.text:0041202B                 mov     ebp, [esp+97Ch+var_8FC]
.text:00412032                 test    ebp, ebp
.text:00412034                 jz      short loc_41203D
.text:00412036                 add     [esp+97Ch+var_8FC], eax
.text:0041203D
.text:0041203D loc_41203D:                             ; CODE XREF: sub_4115E0+A2B↑j
.text:0041203D                                         ; sub_4115E0+A54↑j
.text:0041203D                 mov     edx, [esp+97Ch+arg_C]
.text:00412044                 mov     eax, [esp+97Ch+arg_C]
.text:0041204B                 mov     esi, [esp+97Ch+var_950]
.text:0041204F                 mov     edi, [edx]
.text:00412051                 mov     edx, [eax+4]
.text:00412054                 sub     esi, edi
.text:00412056                 add     esi, 3
.text:00412059                 mov     ebx, edi
.text:0041205B                 cmp     esi, edx
.text:0041205D                 ja      loc_411FB0
.text:00412063
.text:00412063 loc_412063:                             ; CODE XREF: sub_4115E0+9CA↑j
.text:00412063                 add     [esp+97Ch+var_950], 3
.text:00412068                 mov     [esp+97Ch+var_900], 0
.text:00412070                 mov     edi, [esp+97Ch+var_950]
.text:00412074                 mov     [esp+97Ch+var_904], edi
.text:00412078                 jmp     loc_411A0F
.text:0041207D ; ---------------------------------------------------------------------------
.text:0041207D
.text:0041207D loc_41207D:                             ; CODE XREF: sub_4115E0+16F↑j
.text:0041207D                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:0041207D                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0041174F case 36
.text:00412084                 cmp     eax, [esp+97Ch+var_8F4]
.text:0041208B                 jz      short loc_41209B
.text:0041208D                 test    byte ptr [esp+97Ch+arg_8], 8
.text:00412095                 jz      loc_412161
.text:0041209B
.text:0041209B loc_41209B:                             ; CODE XREF: sub_4115E0+AAB↑j
.text:0041209B                                         ; sub_4115E0+B31↓j ...
.text:0041209B                 mov     ecx, [esp+97Ch+arg_C]
.text:004120A2                 mov     eax, [esp+97Ch+arg_C]
.text:004120A9                 mov     ebx, [esp+97Ch+var_950]
.text:004120AD                 mov     edi, [ecx]
.text:004120AF                 mov     edx, [eax+4]
.text:004120B2                 sub     ebx, edi
.text:004120B4                 inc     ebx
.text:004120B5                 cmp     ebx, edx
.text:004120B7                 jbe     loc_412150
.text:004120BD                 cmp     edx, 10000h
.text:004120C3                 mov     ebp, 0Fh
.text:004120C8                 jz      loc_4119F6
.text:004120CE                 mov     ebx, [esp+97Ch+arg_C]
.text:004120D5                 lea     ecx, [edx+edx]
.text:004120D8                 cmp     ecx, 10000h
.text:004120DE                 mov     [ebx+4], ecx
.text:004120E1                 jbe     short loc_4120EA
.text:004120E3                 mov     dword ptr [ebx+4], 10000h
.text:004120EA
.text:004120EA loc_4120EA:                             ; CODE XREF: sub_4115E0+B01↑j
.text:004120EA                 mov     ebx, [esp+97Ch+arg_C]
.text:004120F1                 mov     ebp, [ebx+4]
.text:004120F4                 mov     [esp+97Ch+Size], edi ; Block
.text:004120F7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004120FB                 mov     ebp, 0Ch
.text:00412100                 call    realloc
.text:00412105                 mov     [ebx], eax
.text:00412107                 test    eax, eax
.text:00412109                 jz      loc_4119F6
.text:0041210F                 cmp     edi, eax
.text:00412111                 jz      short loc_41209B
.text:00412113                 sub     eax, edi
.text:00412115                 mov     edi, [esp+97Ch+var_908]
.text:00412119                 add     [esp+97Ch+var_950], eax
.text:0041211D                 add     [esp+97Ch+var_904], eax
.text:00412121                 test    edi, edi
.text:00412123                 jz      short loc_412129
.text:00412125                 add     [esp+97Ch+var_908], eax
.text:00412129
.text:00412129 loc_412129:                             ; CODE XREF: sub_4115E0+B43↑j
.text:00412129                 mov     edx, [esp+97Ch+var_900]
.text:0041212D                 test    edx, edx
.text:0041212F                 jz      short loc_412135
.text:00412131                 add     [esp+97Ch+var_900], eax
.text:00412135
.text:00412135 loc_412135:                             ; CODE XREF: sub_4115E0+B4F↑j
.text:00412135                 mov     esi, [esp+97Ch+var_8FC]
.text:0041213C                 test    esi, esi
.text:0041213E                 jz      loc_41209B
.text:00412144                 add     [esp+97Ch+var_8FC], eax
.text:0041214B                 jmp     loc_41209B
.text:00412150 ; ---------------------------------------------------------------------------
.text:00412150
.text:00412150 loc_412150:                             ; CODE XREF: sub_4115E0+AD7↑j
.text:00412150                 mov     ebx, [esp+97Ch+var_950]
.text:00412154                 mov     byte ptr [ebx], 0Ah
.text:00412157
.text:00412157 loc_412157:                             ; CODE XREF: sub_4115E0+1059↓j
.text:00412157                 inc     ebx
.text:00412158                 mov     [esp+97Ch+var_950], ebx
.text:0041215C                 jmp     loc_411A0F
.text:00412161 ; ---------------------------------------------------------------------------
.text:00412161
.text:00412161 loc_412161:                             ; CODE XREF: sub_4115E0+AB5↑j
.text:00412161                 mov     [esp+97Ch+Size], eax
.text:00412164                 mov     esi, [esp+97Ch+arg_8]
.text:0041216B                 mov     edx, [esp+97Ch+var_8F4]
.text:00412172                 mov     [esp+97Ch+var_974], esi
.text:00412176                 mov     [esp+97Ch+var_978], edx
.text:0041217A                 call    sub_40E4F0
.text:0041217F                 test    al, al
.text:00412181                 jnz     loc_41209B
.text:00412187                 jmp     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041218C ; ---------------------------------------------------------------------------
.text:0041218C
.text:0041218C loc_41218C:                             ; CODE XREF: sub_4115E0+16F↑j
.text:0041218C                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:0041218C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0041174F case 40
.text:00412197                 jz      def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041219D
.text:0041219D loc_41219D:                             ; CODE XREF: sub_4115E0+2417↓j
.text:0041219D                 inc     [esp+97Ch+var_90C]
.text:004121A1                 mov     eax, [esp+97Ch+arg_C]
.text:004121A8                 inc     dword ptr [eax+18h]
.text:004121AB                 mov     ecx, [esp+97Ch+var_24]
.text:004121B2                 cmp     ecx, [esp+97Ch+var_28]
.text:004121B9                 jz      loc_412336
.text:004121BF
.text:004121BF loc_4121BF:                             ; CODE XREF: sub_4115E0+D91↓j
.text:004121BF                 mov     edx, [esp+97Ch+arg_C]
.text:004121C6                 lea     edi, [ecx+ecx*4]
.text:004121C9                 xor     eax, eax
.text:004121CB                 lea     ebp, ds:0[edi*4]
.text:004121D2                 mov     ebx, [esp+97Ch+Block]
.text:004121D9                 mov     edi, [edx]
.text:004121DB                 sub     [esp+97Ch+var_904], edi
.text:004121DF                 mov     edx, edi
.text:004121E1                 mov     esi, [esp+97Ch+var_904]
.text:004121E5                 mov     [ebx+ebp], esi
.text:004121E8                 mov     esi, [esp+97Ch+var_908]
.text:004121EC                 test    esi, esi
.text:004121EE                 jz      short loc_4121F7
.text:004121F0                 mov     eax, [esp+97Ch+var_908]
.text:004121F4                 sub     eax, edi
.text:004121F6                 inc     eax
.text:004121F7
.text:004121F7 loc_4121F7:                             ; CODE XREF: sub_4115E0+C0E↑j
.text:004121F7                 mov     [ebx+ebp+4], eax
.text:004121FB                 lea     esi, [ecx+ecx*4]
.text:004121FE                 mov     ebp, [esp+97Ch+var_90C]
.text:00412202                 mov     ecx, [esp+97Ch+var_950]
.text:00412206                 shl     esi, 2
.text:00412209                 mov     [ebx+esi+10h], ebp
.text:0041220D                 sub     ecx, edx
.text:0041220F                 cmp     ebp, 0FFh
.text:00412215                 mov     [ebx+esi+0Ch], ecx
.text:00412219                 ja      loc_412309
.text:0041221F                 mov     edx, [esp+97Ch+var_24]
.text:00412226                 lea     esi, [ecx+2]
.text:00412229                 mov     eax, [esp+97Ch+arg_C]
.text:00412230                 lea     ebp, [edx+edx*4]
.text:00412233                 lea     edx, [ecx+3]
.text:00412236                 mov     [ebx+ebp*4+8], esi
.text:0041223A                 mov     ecx, [eax+4]
.text:0041223D                 cmp     edx, ecx
.text:0041223F                 jbe     loc_4122F1
.text:00412245
.text:00412245 loc_412245:                             ; CODE XREF: sub_4115E0+D0B↓j
.text:00412245                 cmp     ecx, 10000h
.text:0041224B                 mov     ebp, 0Fh
.text:00412250                 jz      loc_4119F6
.text:00412256                 mov     esi, [esp+97Ch+arg_C]
.text:0041225D                 lea     ebx, [ecx+ecx]
.text:00412260                 cmp     ebx, 10000h
.text:00412266                 mov     [esi+4], ebx
.text:00412269                 jbe     short loc_412272
.text:0041226B                 mov     dword ptr [esi+4], 10000h
.text:00412272
.text:00412272 loc_412272:                             ; CODE XREF: sub_4115E0+C89↑j
.text:00412272                 mov     eax, [esp+97Ch+arg_C]
.text:00412279                 mov     ecx, [eax+4]
.text:0041227C                 mov     [esp+97Ch+Size], edi ; Block
.text:0041227F                 mov     [esp+97Ch+var_978], ecx ; Size
.text:00412283                 call    realloc
.text:00412288                 mov     ebp, [esp+97Ch+arg_C]
.text:0041228F                 test    eax, eax
.text:00412291                 mov     [ebp+0], eax
.text:00412294                 mov     ebp, 0Ch
.text:00412299                 jz      loc_4119F6
.text:0041229F                 cmp     edi, eax
.text:004122A1                 jz      short loc_4122D3
.text:004122A3                 sub     eax, edi
.text:004122A5                 mov     edi, [esp+97Ch+var_908]
.text:004122A9                 add     [esp+97Ch+var_950], eax
.text:004122AD                 test    edi, edi
.text:004122AF                 jz      short loc_4122B5
.text:004122B1                 add     [esp+97Ch+var_908], eax
.text:004122B5
.text:004122B5 loc_4122B5:                             ; CODE XREF: sub_4115E0+CCF↑j
.text:004122B5                 mov     esi, [esp+97Ch+var_900]
.text:004122B9                 test    esi, esi
.text:004122BB                 jz      short loc_4122C1
.text:004122BD                 add     [esp+97Ch+var_900], eax
.text:004122C1
.text:004122C1 loc_4122C1:                             ; CODE XREF: sub_4115E0+CDB↑j
.text:004122C1                 mov     ebx, [esp+97Ch+var_8FC]
.text:004122C8                 test    ebx, ebx
.text:004122CA                 jz      short loc_4122D3
.text:004122CC                 add     [esp+97Ch+var_8FC], eax
.text:004122D3
.text:004122D3 loc_4122D3:                             ; CODE XREF: sub_4115E0+CC1↑j
.text:004122D3                                         ; sub_4115E0+CEA↑j
.text:004122D3                 mov     ebp, [esp+97Ch+arg_C]
.text:004122DA                 mov     edx, [esp+97Ch+var_950]
.text:004122DE                 mov     edi, [ebp+0]
.text:004122E1                 mov     ecx, [ebp+4]
.text:004122E4                 sub     edx, edi
.text:004122E6                 add     edx, 3
.text:004122E9                 cmp     edx, ecx
.text:004122EB                 ja      loc_412245
.text:004122F1
.text:004122F1 loc_4122F1:                             ; CODE XREF: sub_4115E0+C5F↑j
.text:004122F1                 mov     ecx, [esp+97Ch+var_950]
.text:004122F5                 mov     byte ptr [ecx], 6
.text:004122F8                 inc     ecx
.text:004122F9                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:004122FE                 mov     [ecx], bl
.text:00412300                 inc     ecx
.text:00412301                 mov     byte ptr [ecx], 0
.text:00412304                 inc     ecx
.text:00412305                 mov     [esp+97Ch+var_950], ecx
.text:00412309
.text:00412309 loc_412309:                             ; CODE XREF: sub_4115E0+C39↑j
.text:00412309                 inc     [esp+97Ch+var_24]
.text:00412310                 mov     eax, [esp+97Ch+var_950]
.text:00412314                 mov     [esp+97Ch+var_908], 0
.text:0041231C                 mov     [esp+97Ch+var_900], 0
.text:00412324                 mov     [esp+97Ch+var_904], eax
.text:00412328
.text:00412328 loc_412328:                             ; CODE XREF: sub_4115E0+2F9A↓j
.text:00412328                                         ; sub_4115E0+3107↓j ...
.text:00412328                 xor     eax, eax
.text:0041232A                 mov     [esp+97Ch+var_8FC], eax
.text:00412331                 jmp     loc_411A0F
.text:00412336 ; ---------------------------------------------------------------------------
.text:00412336
.text:00412336 loc_412336:                             ; CODE XREF: sub_4115E0+BD9↑j
.text:00412336                 mov     ebp, [esp+97Ch+Block]
.text:0041233D                 lea     edi, [ecx+ecx*4]
.text:00412340                 shl     edi, 3
.text:00412343                 mov     [esp+97Ch+var_978], edi ; Size
.text:00412347                 mov     [esp+97Ch+Size], ebp ; Block
.text:0041234A                 mov     ebp, 0Ch
.text:0041234F                 call    realloc
.text:00412354                 mov     [esp+97Ch+Block], eax
.text:0041235B                 test    eax, eax
.text:0041235D                 jz      loc_4119F6
.text:00412363                 shl     [esp+97Ch+var_28], 1
.text:0041236A                 mov     ecx, [esp+97Ch+var_24]
.text:00412371                 jmp     loc_4121BF
.text:00412376 ; ---------------------------------------------------------------------------
.text:00412376
.text:00412376 loc_412376:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00412376                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00412376                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0041174F case 41
.text:00412381                 jz      def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412387
.text:00412387 loc_412387:                             ; CODE XREF: sub_4115E0+2537↓j
.text:00412387                 mov     esi, [esp+97Ch+var_908]
.text:0041238B                 test    esi, esi
.text:0041238D                 jz      loc_412494
.text:00412393                 mov     eax, [esp+97Ch+arg_C]
.text:0041239A                 mov     ebp, [esp+97Ch+var_950]
.text:0041239E                 mov     edi, [eax]
.text:004123A0                 mov     edx, [eax+4]
.text:004123A3                 sub     ebp, edi
.text:004123A5                 mov     ebx, edi
.text:004123A7                 inc     ebp
.text:004123A8                 cmp     ebp, edx
.text:004123AA                 jbe     loc_412465
.text:004123B0
.text:004123B0 loc_4123B0:                             ; CODE XREF: sub_4115E0+E7F↓j
.text:004123B0                 cmp     edx, 10000h
.text:004123B6                 mov     ebp, 0Fh
.text:004123BB                 jz      loc_4119F6
.text:004123C1                 mov     esi, [esp+97Ch+arg_C]
.text:004123C8                 lea     ecx, [edx+edx]
.text:004123CB                 cmp     ecx, 10000h
.text:004123D1                 mov     [esi+4], ecx
.text:004123D4                 jbe     short loc_4123DD
.text:004123D6                 mov     dword ptr [esi+4], 10000h
.text:004123DD
.text:004123DD loc_4123DD:                             ; CODE XREF: sub_4115E0+DF4↑j
.text:004123DD                 mov     ebp, [esp+97Ch+arg_C]
.text:004123E4                 mov     esi, [ebp+4]
.text:004123E7                 mov     ebp, 0Ch
.text:004123EC                 mov     [esp+97Ch+Size], edi ; Block
.text:004123EF                 mov     [esp+97Ch+var_978], esi ; Size
.text:004123F3                 call    realloc
.text:004123F8                 mov     edx, [esp+97Ch+arg_C]
.text:004123FF                 test    eax, eax
.text:00412401                 mov     [edx], eax
.text:00412403                 jz      loc_4119F6
.text:00412409                 cmp     ebx, eax
.text:0041240B                 jz      short loc_412441
.text:0041240D                 sub     eax, ebx
.text:0041240F                 mov     ebx, [esp+97Ch+var_908]
.text:00412413                 add     [esp+97Ch+var_950], eax
.text:00412417                 add     [esp+97Ch+var_904], eax
.text:0041241B                 test    ebx, ebx
.text:0041241D                 jz      short loc_412423
.text:0041241F                 add     [esp+97Ch+var_908], eax
.text:00412423
.text:00412423 loc_412423:                             ; CODE XREF: sub_4115E0+E3D↑j
.text:00412423                 mov     edi, [esp+97Ch+var_900]
.text:00412427                 test    edi, edi
.text:00412429                 jz      short loc_41242F
.text:0041242B                 add     [esp+97Ch+var_900], eax
.text:0041242F
.text:0041242F loc_41242F:                             ; CODE XREF: sub_4115E0+E49↑j
.text:0041242F                 mov     edx, [esp+97Ch+var_8FC]
.text:00412436                 test    edx, edx
.text:00412438                 jz      short loc_412441
.text:0041243A                 add     [esp+97Ch+var_8FC], eax
.text:00412441
.text:00412441 loc_412441:                             ; CODE XREF: sub_4115E0+E2B↑j
.text:00412441                                         ; sub_4115E0+E58↑j
.text:00412441                 mov     esi, [esp+97Ch+arg_C]
.text:00412448                 mov     eax, [esp+97Ch+arg_C]
.text:0041244F                 mov     ecx, [esp+97Ch+var_950]
.text:00412453                 mov     edi, [esi]
.text:00412455                 mov     edx, [eax+4]
.text:00412458                 sub     ecx, edi
.text:0041245A                 inc     ecx
.text:0041245B                 mov     ebx, edi
.text:0041245D                 cmp     ecx, edx
.text:0041245F                 ja      loc_4123B0
.text:00412465
.text:00412465 loc_412465:                             ; CODE XREF: sub_4115E0+DCA↑j
.text:00412465                 mov     edx, [esp+97Ch+var_950]
.text:00412469                 mov     byte ptr [edx], 14h
.text:0041246C                 mov     edi, [esp+97Ch+var_908]
.text:00412470                 inc     edx
.text:00412471                 mov     [esp+97Ch+var_950], edx
.text:00412475                 mov     ebx, edx
.text:00412477                 mov     ebp, [esp+97Ch+var_908]
.text:0041247B                 mov     [esp+97Ch+Size], 0Eh
.text:00412482                 sub     ebx, edi
.text:00412484                 sub     ebx, 4
.text:00412487                 mov     [esp+97Ch+var_974], ebx
.text:0041248B                 mov     [esp+97Ch+var_978], ebp
.text:0041248F                 call    sub_40E3B0
.text:00412494
.text:00412494 loc_412494:                             ; CODE XREF: sub_4115E0+DAD↑j
.text:00412494                 mov     eax, [esp+97Ch+var_24]
.text:0041249B                 test    eax, eax
.text:0041249D                 jnz     short loc_4124C4
.text:0041249F                 test    [esp+97Ch+arg_8], 20000h
.text:004124AA                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004124B0
.text:004124B0 loc_4124B0:                             ; CODE XREF: sub_4115E0+254E↓j
.text:004124B0                 mov     ecx, [esp+97Ch+Block]
.text:004124B7                 mov     ebp, 10h
.text:004124BC
.text:004124BC loc_4124BC:                             ; CODE XREF: sub_4115E0+15EA↓j
.text:004124BC                                         ; sub_4115E0+21AF↓j
.text:004124BC                 mov     [esp+97Ch+Size], ecx
.text:004124BF                 jmp     loc_411B83
.text:004124C4 ; ---------------------------------------------------------------------------
.text:004124C4
.text:004124C4 loc_4124C4:                             ; CODE XREF: sub_4115E0+EBD↑j
.text:004124C4                 dec     eax
.text:004124C5                 mov     edx, [esp+97Ch+Block]
.text:004124CC                 mov     ebp, [esp+97Ch+arg_C]
.text:004124D3                 mov     [esp+97Ch+var_24], eax
.text:004124DA                 lea     esi, [eax+eax*4]
.text:004124DD                 shl     esi, 2
.text:004124E0                 mov     ebx, [ebp+0]
.text:004124E3                 mov     edi, [edx+esi]
.text:004124E6                 mov     ebp, [edx+esi+4]
.text:004124EA                 mov     ecx, ebx
.text:004124EC                 add     edi, ebx
.text:004124EE                 test    ebp, ebp
.text:004124F0                 mov     [esp+97Ch+var_904], edi
.text:004124F4                 lea     edi, [ebp+ebx-1]
.text:004124F8                 setz    bl
.text:004124FB                 movzx   esi, bl
.text:004124FE                 mov     ebx, [esp+97Ch+var_24]
.text:00412505                 dec     esi
.text:00412506                 and     edi, esi
.text:00412508                 lea     eax, [ebx+ebx*4]
.text:0041250B                 mov     [esp+97Ch+var_908], edi
.text:0041250F                 shl     eax, 2
.text:00412512                 xor     esi, esi
.text:00412514                 mov     [esp+97Ch+var_8FC], esi
.text:0041251B                 mov     ebx, [edx+eax+10h]
.text:0041251F                 mov     ebp, [edx+eax+0Ch]
.text:00412523                 mov     [esp+97Ch+var_930], ebx
.text:00412527                 add     ebp, ecx
.text:00412529                 cmp     ebx, 0FFh
.text:0041252F                 mov     [esp+97Ch+var_900], ebp
.text:00412533                 ja      loc_411A0F
.text:00412539                 mov     esi, [edx+eax+8]
.text:0041253D                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:00412542                 add     ecx, esi
.text:00412544                 sub     dl, bl
.text:00412546                 mov     [ecx], dl
.text:00412548                 mov     eax, [esp+97Ch+arg_C]
.text:0041254F                 mov     ecx, [esp+97Ch+var_950]
.text:00412553                 mov     edi, [eax]
.text:00412555                 mov     edx, [eax+4]
.text:00412558                 sub     ecx, edi
.text:0041255A                 add     ecx, 3
.text:0041255D                 mov     ebx, edi
.text:0041255F                 cmp     ecx, edx
.text:00412561                 jbe     loc_41261E
.text:00412567
.text:00412567 loc_412567:                             ; CODE XREF: sub_4115E0+1038↓j
.text:00412567                 cmp     edx, 10000h
.text:0041256D                 mov     ebp, 0Fh
.text:00412572                 jz      loc_4119F6
.text:00412578                 lea     ebp, [edx+edx]
.text:0041257B                 mov     edx, [esp+97Ch+arg_C]
.text:00412582                 cmp     ebp, 10000h
.text:00412588                 mov     [edx+4], ebp
.text:0041258B                 jbe     short loc_412594
.text:0041258D                 mov     dword ptr [edx+4], 10000h
.text:00412594
.text:00412594 loc_412594:                             ; CODE XREF: sub_4115E0+FAB↑j
.text:00412594                 mov     eax, [esp+97Ch+arg_C]
.text:0041259B                 mov     ebp, 0Ch
.text:004125A0                 mov     edx, [eax+4]
.text:004125A3                 mov     [esp+97Ch+Size], edi ; Block
.text:004125A6                 mov     [esp+97Ch+var_978], edx ; Size
.text:004125AA                 call    realloc
.text:004125AF                 mov     edi, [esp+97Ch+arg_C]
.text:004125B6                 test    eax, eax
.text:004125B8                 mov     [edi], eax
.text:004125BA                 jz      loc_4119F6
.text:004125C0                 cmp     ebx, eax
.text:004125C2                 jz      short loc_4125F8
.text:004125C4                 sub     eax, ebx
.text:004125C6                 mov     ebx, [esp+97Ch+var_908]
.text:004125CA                 add     [esp+97Ch+var_950], eax
.text:004125CE                 add     [esp+97Ch+var_904], eax
.text:004125D2                 test    ebx, ebx
.text:004125D4                 jz      short loc_4125DA
.text:004125D6                 add     [esp+97Ch+var_908], eax
.text:004125DA
.text:004125DA loc_4125DA:                             ; CODE XREF: sub_4115E0+FF4↑j
.text:004125DA                 mov     ecx, [esp+97Ch+var_900]
.text:004125DE                 test    ecx, ecx
.text:004125E0                 jz      short loc_4125E6
.text:004125E2                 add     [esp+97Ch+var_900], eax
.text:004125E6
.text:004125E6 loc_4125E6:                             ; CODE XREF: sub_4115E0+1000↑j
.text:004125E6                 mov     esi, [esp+97Ch+var_8FC]
.text:004125ED                 test    esi, esi
.text:004125EF                 jz      short loc_4125F8
.text:004125F1                 add     [esp+97Ch+var_8FC], eax
.text:004125F8
.text:004125F8 loc_4125F8:                             ; CODE XREF: sub_4115E0+FE2↑j
.text:004125F8                                         ; sub_4115E0+100F↑j
.text:004125F8                 mov     edx, [esp+97Ch+arg_C]
.text:004125FF                 mov     eax, [esp+97Ch+arg_C]
.text:00412606                 mov     ebp, [esp+97Ch+var_950]
.text:0041260A                 mov     edi, [edx]
.text:0041260C                 mov     edx, [eax+4]
.text:0041260F                 sub     ebp, edi
.text:00412611                 add     ebp, 3
.text:00412614                 mov     ebx, edi
.text:00412616                 cmp     ebp, edx
.text:00412618                 ja      loc_412567
.text:0041261E
.text:0041261E loc_41261E:                             ; CODE XREF: sub_4115E0+F81↑j
.text:0041261E                 mov     ebx, [esp+97Ch+var_950]
.text:00412622                 mov     byte ptr [ebx], 7
.text:00412625                 inc     ebx
.text:00412626                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:0041262B                 mov     [ebx], dl
.text:0041262D                 inc     ebx
.text:0041262E                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:00412633                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:00412637                 mov     [ebx], cl
.text:00412639                 jmp     loc_412157
.text:00412639 ; ---------------------------------------------------------------------------
.text:0041263E                 align 10h
.text:00412640
.text:00412640 loc_412640:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00412640                                         ; sub_4115E0+16DF↓j ...
.text:00412640                 mov     ebp, [esp+97Ch+var_900] ; jumptable 0041174F case 42
.text:00412644                 test    ebp, ebp
.text:00412646                 jz      loc_412BA1
.text:0041264C
.text:0041264C loc_41264C:                             ; CODE XREF: sub_4115E0+15D3↓j
.text:0041264C                 mov     [esp+97Ch+var_91C], 0
.text:00412651                 xor     ecx, ecx
.text:00412653                 mov     [esp+97Ch+var_91D], 0
.text:00412658
.text:00412658 loc_412658:                             ; CODE XREF: sub_4115E0+10ED↓j
.text:00412658                                         ; sub_4115E0+1105↓j ...
.text:00412658                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:00412660                 movsx   eax, [esp+97Ch+var_91D]
.text:00412665                 jz      short loc_41266A
.text:00412667                 or      eax, 1
.text:0041266A
.text:0041266A loc_41266A:                             ; CODE XREF: sub_4115E0+1085↑j
.text:0041266A                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00412672                 mov     [esp+97Ch+var_91D], al
.text:00412676                 movsx   eax, cl
.text:00412679                 jz      short loc_41267E
.text:0041267B                 or      eax, 1
.text:0041267E
.text:0041267E loc_41267E:                             ; CODE XREF: sub_4115E0+1099↑j
.text:0041267E                 mov     edx, [esp+97Ch+var_8D0]
.text:00412685                 mov     cl, al
.text:00412687                 cmp     edx, [esp+97Ch+var_8F4]
.text:0041268E                 jz      short loc_412700
.text:00412690                 movzx   eax, byte ptr [edx]
.text:00412693                 lea     edi, [edx+1]
.text:00412696                 mov     esi, [esp+97Ch+var_8F8]
.text:0041269D                 mov     [esp+97Ch+var_8D0], edi
.text:004126A4                 test    esi, esi
.text:004126A6                 mov     [esp+97Ch+var_8EC], al
.text:004126AD                 jz      short loc_4126C5
.text:004126AF                 mov     esi, [esp+97Ch+var_8F8]
.text:004126B6                 movzx   ebp, al
.text:004126B9                 movzx   eax, byte ptr [ebp+esi+0]
.text:004126BE                 mov     [esp+97Ch+var_8EC], al
.text:004126C5
.text:004126C5 loc_4126C5:                             ; CODE XREF: sub_4115E0+10CD↑j
.text:004126C5                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:004126CD                 jz      short loc_412658
.text:004126CF                 test    byte ptr [esp+97Ch+arg_8], 2
.text:004126D7                 jnz     loc_412B30
.text:004126DD                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:004126E5                 jz      loc_412658
.text:004126EB                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:004126F3                 jz      loc_412658
.text:004126F9
.text:004126F9 loc_4126F9:                             ; CODE XREF: sub_4115E0+1558↓j
.text:004126F9                 dec     [esp+97Ch+var_8D0]
.text:00412700
.text:00412700 loc_412700:                             ; CODE XREF: sub_4115E0+10AE↑j
.text:00412700                                         ; sub_4115E0+15AB↓j
.text:00412700                 mov     edx, [esp+97Ch+var_900]
.text:00412704                 test    edx, edx
.text:00412706                 jz      loc_411A0F
.text:0041270C                 test    cl, cl
.text:0041270E                 jz      loc_412913
.text:00412714                 mov     ebx, [esp+97Ch+arg_C]
.text:0041271B                 mov     ebp, [esp+97Ch+arg_C]
.text:00412722                 mov     esi, [esp+97Ch+var_950]
.text:00412726                 mov     edi, [ebx]
.text:00412728                 mov     edx, [ebp+4]
.text:0041272B                 sub     esi, edi
.text:0041272D                 add     esi, 3
.text:00412730                 mov     ebx, edi
.text:00412732                 cmp     esi, edx
.text:00412734                 jbe     loc_4127F1
.text:0041273A
.text:0041273A loc_41273A:                             ; CODE XREF: sub_4115E0+120B↓j
.text:0041273A                 cmp     edx, 10000h
.text:00412740                 mov     ebp, 0Fh
.text:00412745                 jz      loc_4119F6
.text:0041274B                 mov     esi, [esp+97Ch+arg_C]
.text:00412752                 lea     ecx, [edx+edx]
.text:00412755                 cmp     ecx, 10000h
.text:0041275B                 mov     [esi+4], ecx
.text:0041275E                 jbe     short loc_412767
.text:00412760                 mov     dword ptr [esi+4], 10000h
.text:00412767
.text:00412767 loc_412767:                             ; CODE XREF: sub_4115E0+117E↑j
.text:00412767                 mov     eax, [esp+97Ch+arg_C]
.text:0041276E                 mov     ebp, 0Ch
.text:00412773                 mov     esi, [eax+4]
.text:00412776                 mov     [esp+97Ch+Size], edi ; Block
.text:00412779                 mov     [esp+97Ch+var_978], esi ; Size
.text:0041277D                 call    realloc
.text:00412782                 mov     edi, [esp+97Ch+arg_C]
.text:00412789                 test    eax, eax
.text:0041278B                 mov     [edi], eax
.text:0041278D                 jz      loc_4119F6
.text:00412793                 cmp     ebx, eax
.text:00412795                 jz      short loc_4127CB
.text:00412797                 mov     edx, [esp+97Ch+var_908]
.text:0041279B                 sub     eax, ebx
.text:0041279D                 add     [esp+97Ch+var_950], eax
.text:004127A1                 add     [esp+97Ch+var_904], eax
.text:004127A5                 test    edx, edx
.text:004127A7                 jz      short loc_4127AD
.text:004127A9                 add     [esp+97Ch+var_908], eax
.text:004127AD
.text:004127AD loc_4127AD:                             ; CODE XREF: sub_4115E0+11C7↑j
.text:004127AD                 mov     ebp, [esp+97Ch+var_900]
.text:004127B1                 test    ebp, ebp
.text:004127B3                 jz      short loc_4127B9
.text:004127B5                 add     [esp+97Ch+var_900], eax
.text:004127B9
.text:004127B9 loc_4127B9:                             ; CODE XREF: sub_4115E0+11D3↑j
.text:004127B9                 mov     ebx, [esp+97Ch+var_8FC]
.text:004127C0                 test    ebx, ebx
.text:004127C2                 jz      short loc_4127CB
.text:004127C4                 add     [esp+97Ch+var_8FC], eax
.text:004127CB
.text:004127CB loc_4127CB:                             ; CODE XREF: sub_4115E0+11B5↑j
.text:004127CB                                         ; sub_4115E0+11E2↑j
.text:004127CB                 mov     esi, [esp+97Ch+arg_C]
.text:004127D2                 mov     eax, [esp+97Ch+arg_C]
.text:004127D9                 mov     ecx, [esp+97Ch+var_950]
.text:004127DD                 mov     edi, [esi]
.text:004127DF                 mov     edx, [eax+4]
.text:004127E2                 sub     ecx, edi
.text:004127E4                 add     ecx, 3
.text:004127E7                 mov     ebx, edi
.text:004127E9                 cmp     ecx, edx
.text:004127EB                 ja      loc_41273A
.text:004127F1
.text:004127F1 loc_4127F1:                             ; CODE XREF: sub_4115E0+1154↑j
.text:004127F1                 mov     edi, [esp+97Ch+var_8F8]
.text:004127F8                 test    edi, edi
.text:004127FA                 jz      loc_412B1A
.text:00412800                 mov     edi, [esp+97Ch+var_8D0]
.text:00412807                 mov     ebx, [esp+97Ch+var_8F8]
.text:0041280E                 movzx   ebp, byte ptr [edi-2]
.text:00412812                 movsx   edx, byte ptr [ebp+ebx+0]
.text:00412817
.text:00412817 loc_412817:                             ; CODE XREF: sub_4115E0+1545↓j
.text:00412817                 mov     ecx, [esp+97Ch+var_8F8]
.text:0041281E                 test    ecx, ecx
.text:00412820                 jz      loc_412B12
.text:00412826                 mov     eax, [esp+97Ch+var_8F8]
.text:0041282D                 movsx   esi, byte ptr [eax+2Eh]
.text:00412831                 cmp     edx, esi
.text:00412833
.text:00412833 loc_412833:                             ; CODE XREF: sub_4115E0+1535↓j
.text:00412833                 jz      loc_412A7B
.text:00412839
.text:00412839 loc_412839:                             ; CODE XREF: sub_4115E0+14A0↓j
.text:00412839                                         ; sub_4115E0+14AD↓j ...
.text:00412839                 mov     [esp+97Ch+Size], 12h
.text:00412840                 mov     ebx, [esp+97Ch+var_900]
.text:00412844                 mov     ecx, [esp+97Ch+var_950]
.text:00412848                 mov     edi, [esp+97Ch+var_950]
.text:0041284C                 sub     ebx, ecx
.text:0041284E                 sub     ebx, 6
.text:00412851                 mov     [esp+97Ch+var_974], ebx
.text:00412855                 mov     [esp+97Ch+var_978], edi
.text:00412859                 call    sub_40E3B0
.text:0041285E
.text:0041285E loc_41285E:                             ; CODE XREF: sub_4115E0+1523↓j
.text:0041285E                 add     [esp+97Ch+var_950], 3
.text:00412863                 mov     esi, [esp+97Ch+arg_C]
.text:0041286A                 mov     eax, [esp+97Ch+var_950]
.text:0041286E                 mov     edi, [esi]
.text:00412870                 mov     edx, [esi+4]
.text:00412873
.text:00412873 loc_412873:                             ; CODE XREF: sub_4115E0+134A↓j
.text:00412873                 sub     eax, edi
.text:00412875                 mov     ebx, edi
.text:00412877                 add     eax, 3
.text:0041287A                 cmp     eax, edx
.text:0041287C                 jbe     loc_41292F
.text:00412882                 cmp     edx, 10000h
.text:00412888                 mov     ebp, 0Fh
.text:0041288D                 jz      loc_4119F6
.text:00412893                 mov     esi, [esp+97Ch+arg_C]
.text:0041289A                 lea     ebp, [edx+edx]
.text:0041289D                 cmp     ebp, 10000h
.text:004128A3                 mov     [esi+4], ebp
.text:004128A6                 jbe     short loc_4128AF
.text:004128A8                 mov     dword ptr [esi+4], 10000h
.text:004128AF
.text:004128AF loc_4128AF:                             ; CODE XREF: sub_4115E0+12C6↑j
.text:004128AF                 mov     eax, [esp+97Ch+arg_C]
.text:004128B6                 mov     ebp, 0Ch
.text:004128BB                 mov     ecx, [eax+4]
.text:004128BE                 mov     [esp+97Ch+Size], edi ; Block
.text:004128C1                 mov     [esp+97Ch+var_978], ecx ; Size
.text:004128C5                 call    realloc
.text:004128CA                 mov     edx, [esp+97Ch+arg_C]
.text:004128D1                 test    eax, eax
.text:004128D3                 mov     [edx], eax
.text:004128D5                 jz      loc_4119F6
.text:004128DB                 cmp     ebx, eax
.text:004128DD                 jz      short loc_412913
.text:004128DF                 mov     edi, [esp+97Ch+var_908]
.text:004128E3                 sub     eax, ebx
.text:004128E5                 add     [esp+97Ch+var_950], eax
.text:004128E9                 add     [esp+97Ch+var_904], eax
.text:004128ED                 test    edi, edi
.text:004128EF                 jz      short loc_4128F5
.text:004128F1                 add     [esp+97Ch+var_908], eax
.text:004128F5
.text:004128F5 loc_4128F5:                             ; CODE XREF: sub_4115E0+130F↑j
.text:004128F5                 mov     ebx, [esp+97Ch+var_900]
.text:004128F9                 test    ebx, ebx
.text:004128FB                 jz      short loc_412901
.text:004128FD                 add     [esp+97Ch+var_900], eax
.text:00412901
.text:00412901 loc_412901:                             ; CODE XREF: sub_4115E0+131B↑j
.text:00412901                 mov     esi, [esp+97Ch+var_8FC]
.text:00412908                 test    esi, esi
.text:0041290A                 jz      short loc_412913
.text:0041290C                 add     [esp+97Ch+var_8FC], eax
.text:00412913
.text:00412913 loc_412913:                             ; CODE XREF: sub_4115E0+112E↑j
.text:00412913                                         ; sub_4115E0+12FD↑j ...
.text:00412913                 mov     edx, [esp+97Ch+arg_C]
.text:0041291A                 mov     ebp, [esp+97Ch+arg_C]
.text:00412921                 mov     eax, [esp+97Ch+var_950]
.text:00412925                 mov     edi, [edx]
.text:00412927                 mov     edx, [ebp+4]
.text:0041292A                 jmp     loc_412873
.text:0041292F ; ---------------------------------------------------------------------------
.text:0041292F
.text:0041292F loc_41292F:                             ; CODE XREF: sub_4115E0+129C↑j
.text:0041292F                 movzx   edx, [esp+97Ch+var_91C]
.text:00412934                 mov     ebx, [esp+97Ch+var_950]
.text:00412938                 mov     eax, [esp+97Ch+var_900]
.text:0041293C                 mov     edi, [esp+97Ch+var_900]
.text:00412940                 mov     esi, ebx
.text:00412942                 and     edx, 1
.text:00412945                 mov     [esp+97Ch+var_970], ebx
.text:00412949                 sub     esi, eax
.text:0041294B                 add     edx, 0Fh
.text:0041294E                 mov     [esp+97Ch+var_974], esi
.text:00412952                 add     ebx, 3
.text:00412955                 mov     [esp+97Ch+var_978], edi
.text:00412959                 mov     [esp+97Ch+Size], edx
.text:0041295C                 call    sub_40E400
.text:00412961                 mov     [esp+97Ch+var_950], ebx
.text:00412965                 xor     ecx, ecx
.text:00412967                 cmp     [esp+97Ch+var_91D], 0
.text:0041296C                 mov     [esp+97Ch+var_8FC], ecx
.text:00412973                 jnz     loc_411A0F
.text:00412979                 mov     ecx, [esp+97Ch+arg_C]
.text:00412980                 mov     ebp, [esp+97Ch+var_950]
.text:00412984                 mov     edi, [ecx]
.text:00412986                 mov     edx, [ecx+4]
.text:00412989                 sub     ebp, edi
.text:0041298B                 mov     ebx, edi
.text:0041298D                 add     ebp, 3
.text:00412990                 cmp     ebp, edx
.text:00412992                 jbe     loc_412A4F
.text:00412998
.text:00412998 loc_412998:                             ; CODE XREF: sub_4115E0+1469↓j
.text:00412998                 cmp     edx, 10000h
.text:0041299E                 mov     ebp, 0Fh
.text:004129A3                 jz      loc_4119F6
.text:004129A9                 mov     esi, [esp+97Ch+arg_C]
.text:004129B0                 lea     ebp, [edx+edx]
.text:004129B3                 cmp     ebp, 10000h
.text:004129B9                 mov     [esi+4], ebp
.text:004129BC                 jbe     short loc_4129C5
.text:004129BE                 mov     dword ptr [esi+4], 10000h
.text:004129C5
.text:004129C5 loc_4129C5:                             ; CODE XREF: sub_4115E0+13DC↑j
.text:004129C5                 mov     eax, [esp+97Ch+arg_C]
.text:004129CC                 mov     ebp, 0Ch
.text:004129D1                 mov     esi, [eax+4]
.text:004129D4                 mov     [esp+97Ch+Size], edi ; Block
.text:004129D7                 mov     [esp+97Ch+var_978], esi ; Size
.text:004129DB                 call    realloc
.text:004129E0                 mov     edx, [esp+97Ch+arg_C]
.text:004129E7                 test    eax, eax
.text:004129E9                 mov     [edx], eax
.text:004129EB                 jz      loc_4119F6
.text:004129F1                 cmp     ebx, eax
.text:004129F3                 jz      short loc_412A29
.text:004129F5                 mov     edi, [esp+97Ch+var_908]
.text:004129F9                 sub     eax, ebx
.text:004129FB                 add     [esp+97Ch+var_950], eax
.text:004129FF                 add     [esp+97Ch+var_904], eax
.text:00412A03                 test    edi, edi
.text:00412A05                 jz      short loc_412A0B
.text:00412A07                 add     [esp+97Ch+var_908], eax
.text:00412A0B
.text:00412A0B loc_412A0B:                             ; CODE XREF: sub_4115E0+1425↑j
.text:00412A0B                 mov     ebx, [esp+97Ch+var_900]
.text:00412A0F                 test    ebx, ebx
.text:00412A11                 jz      short loc_412A17
.text:00412A13                 add     [esp+97Ch+var_900], eax
.text:00412A17
.text:00412A17 loc_412A17:                             ; CODE XREF: sub_4115E0+1431↑j
.text:00412A17                 mov     ecx, [esp+97Ch+var_8FC]
.text:00412A1E                 test    ecx, ecx
.text:00412A20                 jz      short loc_412A29
.text:00412A22                 add     [esp+97Ch+var_8FC], eax
.text:00412A29
.text:00412A29 loc_412A29:                             ; CODE XREF: sub_4115E0+1413↑j
.text:00412A29                                         ; sub_4115E0+1440↑j
.text:00412A29                 mov     edx, [esp+97Ch+arg_C]
.text:00412A30                 mov     eax, [esp+97Ch+arg_C]
.text:00412A37                 mov     ebp, [esp+97Ch+var_950]
.text:00412A3B                 mov     edi, [edx]
.text:00412A3D                 mov     edx, [eax+4]
.text:00412A40                 sub     ebp, edi
.text:00412A42                 add     ebp, 3
.text:00412A45                 mov     ebx, edi
.text:00412A47                 cmp     ebp, edx
.text:00412A49                 ja      loc_412998
.text:00412A4F
.text:00412A4F loc_412A4F:                             ; CODE XREF: sub_4115E0+13B2↑j
.text:00412A4F                 mov     [esp+97Ch+var_974], 3
.text:00412A57                 mov     edi, [esp+97Ch+var_950]
.text:00412A5B                 mov     esi, [esp+97Ch+var_900]
.text:00412A5F                 mov     [esp+97Ch+Size], 13h
.text:00412A66                 mov     [esp+97Ch+var_970], edi
.text:00412A6A                 add     edi, 3
.text:00412A6D                 mov     [esp+97Ch+var_978], esi
.text:00412A71                 call    sub_40E400
.text:00412A76                 jmp     loc_411A0B
.text:00412A7B ; ---------------------------------------------------------------------------
.text:00412A7B
.text:00412A7B loc_412A7B:                             ; CODE XREF: sub_4115E0:loc_412833↑j
.text:00412A7B                 cmp     [esp+97Ch+var_91D], 0
.text:00412A80                 jz      loc_412839
.text:00412A86                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412A8D                 jnb     loc_412839
.text:00412A93                 mov     edx, [esp+97Ch+var_8F8]
.text:00412A9A                 test    edx, edx
.text:00412A9C                 jz      short loc_412B0D
.text:00412A9E                 movzx   ebp, byte ptr [edi]
.text:00412AA1                 mov     edi, [esp+97Ch+var_8F8]
.text:00412AA8                 movsx   edx, byte ptr [ebp+edi+0]
.text:00412AAD
.text:00412AAD loc_412AAD:                             ; CODE XREF: sub_4115E0+1530↓j
.text:00412AAD                 mov     ebx, [esp+97Ch+var_8F8]
.text:00412AB4                 test    ebx, ebx
.text:00412AB6                 jz      short loc_412B08
.text:00412AB8                 mov     esi, [esp+97Ch+var_8F8]
.text:00412ABF                 movsx   ecx, byte ptr [esi+0Ah]
.text:00412AC3                 cmp     edx, ecx
.text:00412AC5
.text:00412AC5 loc_412AC5:                             ; CODE XREF: sub_4115E0+152B↓j
.text:00412AC5                 jnz     loc_412839
.text:00412ACB                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:00412AD3                 jnz     loc_412839
.text:00412AD9                 mov     [esp+97Ch+Size], 0Dh
.text:00412AE0                 mov     ebp, [esp+97Ch+var_900]
.text:00412AE4                 mov     eax, [esp+97Ch+var_950]
.text:00412AE8                 mov     edx, [esp+97Ch+var_950]
.text:00412AEC                 sub     ebp, eax
.text:00412AEE                 sub     ebp, 3
.text:00412AF1                 mov     [esp+97Ch+var_974], ebp
.text:00412AF5                 mov     [esp+97Ch+var_978], edx
.text:00412AF9                 call    sub_40E3B0
.text:00412AFE                 mov     [esp+97Ch+var_91C], 1
.text:00412B03                 jmp     loc_41285E
.text:00412B08 ; ---------------------------------------------------------------------------
.text:00412B08
.text:00412B08 loc_412B08:                             ; CODE XREF: sub_4115E0+14D6↑j
.text:00412B08                 cmp     edx, 0Ah
.text:00412B0B                 jmp     short loc_412AC5
.text:00412B0D ; ---------------------------------------------------------------------------
.text:00412B0D
.text:00412B0D loc_412B0D:                             ; CODE XREF: sub_4115E0+14BC↑j
.text:00412B0D                 movsx   edx, byte ptr [edi]
.text:00412B10                 jmp     short loc_412AAD
.text:00412B12 ; ---------------------------------------------------------------------------
.text:00412B12
.text:00412B12 loc_412B12:                             ; CODE XREF: sub_4115E0+1240↑j
.text:00412B12                 cmp     edx, 2Eh ; '.'
.text:00412B15                 jmp     loc_412833
.text:00412B1A ; ---------------------------------------------------------------------------
.text:00412B1A
.text:00412B1A loc_412B1A:                             ; CODE XREF: sub_4115E0+121A↑j
.text:00412B1A                 mov     edi, [esp+97Ch+var_8D0]
.text:00412B21                 movsx   edx, byte ptr [edi-2]
.text:00412B25                 jmp     loc_412817
.text:00412B25 ; ---------------------------------------------------------------------------
.text:00412B2A                 align 10h
.text:00412B30
.text:00412B30 loc_412B30:                             ; CODE XREF: sub_4115E0+10F7↑j
.text:00412B30                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00412B38                 jnz     loc_4126F9
.text:00412B3E                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412B45                 jz      short loc_412B90
.text:00412B47                 movzx   ebx, byte ptr [edx+1]
.text:00412B4B                 lea     ebp, [edx+2]
.text:00412B4E                 mov     eax, [esp+97Ch+var_8F8]
.text:00412B55                 mov     [esp+97Ch+var_8D0], ebp
.text:00412B5C                 test    eax, eax
.text:00412B5E                 jz      short loc_412B6E
.text:00412B60                 mov     eax, [esp+97Ch+var_8F8]
.text:00412B67                 movzx   edi, bl
.text:00412B6A                 movzx   ebx, byte ptr [edi+eax]
.text:00412B6E
.text:00412B6E loc_412B6E:                             ; CODE XREF: sub_4115E0+157E↑j
.text:00412B6E                 cmp     bl, 2Bh ; '+'
.text:00412B71                 jz      short loc_412B78
.text:00412B73                 cmp     bl, 3Fh ; '?'
.text:00412B76                 jnz     short loc_412B84
.text:00412B78
.text:00412B78 loc_412B78:                             ; CODE XREF: sub_4115E0+1591↑j
.text:00412B78                 mov     [esp+97Ch+var_8EC], bl
.text:00412B7F                 jmp     loc_412658
.text:00412B84 ; ---------------------------------------------------------------------------
.text:00412B84
.text:00412B84 loc_412B84:                             ; CODE XREF: sub_4115E0+1596↑j
.text:00412B84                 mov     [esp+97Ch+var_8D0], edx
.text:00412B8B                 jmp     loc_412700
.text:00412B90 ; ---------------------------------------------------------------------------
.text:00412B90
.text:00412B90 loc_412B90:                             ; CODE XREF: sub_4115E0+1565↑j
.text:00412B90                                         ; sub_4115E0+21FF↓j ...
.text:00412B90                 mov     edi, [esp+97Ch+Block]
.text:00412B97                 mov     ebp, 5
.text:00412B9C                 jmp     loc_411B80
.text:00412BA1 ; ---------------------------------------------------------------------------
.text:00412BA1
.text:00412BA1 loc_412BA1:                             ; CODE XREF: sub_4115E0+1066↑j
.text:00412BA1                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:00412BA9                 jnz     short loc_412BBE
.text:00412BAB                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:00412BB3                 jnz     loc_41264C
.text:00412BB9                 jmp     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412BBE ; ---------------------------------------------------------------------------
.text:00412BBE
.text:00412BBE loc_412BBE:                             ; CODE XREF: sub_4115E0+15C9↑j
.text:00412BBE                                         ; sub_4115E0+31A3↓j
.text:00412BBE                 mov     ecx, [esp+97Ch+Block]
.text:00412BC5                 mov     ebp, 0Dh
.text:00412BCA                 jmp     loc_4124BC
.text:00412BCA ; ---------------------------------------------------------------------------
.text:00412BCF                 align 10h
.text:00412BD0
.text:00412BD0 loc_412BD0:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00412BD0                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00412BD0                 mov     eax, [esp+97Ch+arg_C] ; jumptable 0041174F case 46
.text:00412BD7                 mov     ecx, [esp+97Ch+var_950]
.text:00412BDB                 mov     edi, [eax]
.text:00412BDD                 mov     [esp+97Ch+var_900], ecx
.text:00412BE1                 mov     ebp, ecx
.text:00412BE3                 mov     edx, [eax+4]
.text:00412BE6                 sub     ebp, edi
.text:00412BE8                 mov     ebx, edi
.text:00412BEA                 inc     ebp
.text:00412BEB                 cmp     ebp, edx
.text:00412BED                 jbe     loc_412CA8
.text:00412BF3
.text:00412BF3 loc_412BF3:                             ; CODE XREF: sub_4115E0+16C2↓j
.text:00412BF3                 cmp     edx, 10000h
.text:00412BF9                 mov     ebp, 0Fh
.text:00412BFE                 jz      loc_4119F6
.text:00412C04                 mov     esi, [esp+97Ch+arg_C]
.text:00412C0B                 lea     ebp, [edx+edx]
.text:00412C0E                 cmp     ebp, 10000h
.text:00412C14                 mov     [esi+4], ebp
.text:00412C17                 jbe     short loc_412C20
.text:00412C19                 mov     dword ptr [esi+4], 10000h
.text:00412C20
.text:00412C20 loc_412C20:                             ; CODE XREF: sub_4115E0+1637↑j
.text:00412C20                 mov     eax, [esp+97Ch+arg_C]
.text:00412C27                 mov     ebp, 0Ch
.text:00412C2C                 mov     esi, [eax+4]
.text:00412C2F                 mov     [esp+97Ch+Size], edi ; Block
.text:00412C32                 mov     [esp+97Ch+var_978], esi ; Size
.text:00412C36                 call    realloc
.text:00412C3B                 mov     edi, [esp+97Ch+arg_C]
.text:00412C42                 test    eax, eax
.text:00412C44                 mov     [edi], eax
.text:00412C46                 jz      loc_4119F6
.text:00412C4C                 cmp     ebx, eax
.text:00412C4E                 jz      short loc_412C84
.text:00412C50                 sub     eax, ebx
.text:00412C52                 mov     ebx, [esp+97Ch+var_908]
.text:00412C56                 add     [esp+97Ch+var_950], eax
.text:00412C5A                 add     [esp+97Ch+var_904], eax
.text:00412C5E                 test    ebx, ebx
.text:00412C60                 jz      short loc_412C66
.text:00412C62                 add     [esp+97Ch+var_908], eax
.text:00412C66
.text:00412C66 loc_412C66:                             ; CODE XREF: sub_4115E0+1680↑j
.text:00412C66                 mov     edx, [esp+97Ch+var_900]
.text:00412C6A                 test    edx, edx
.text:00412C6C                 jz      short loc_412C72
.text:00412C6E                 add     [esp+97Ch+var_900], eax
.text:00412C72
.text:00412C72 loc_412C72:                             ; CODE XREF: sub_4115E0+168C↑j
.text:00412C72                 mov     ecx, [esp+97Ch+var_8FC]
.text:00412C79                 test    ecx, ecx
.text:00412C7B                 jz      short loc_412C84
.text:00412C7D                 add     [esp+97Ch+var_8FC], eax
.text:00412C84
.text:00412C84 loc_412C84:                             ; CODE XREF: sub_4115E0+166E↑j
.text:00412C84                                         ; sub_4115E0+169B↑j
.text:00412C84                 mov     esi, [esp+97Ch+arg_C]
.text:00412C8B                 mov     eax, [esp+97Ch+arg_C]
.text:00412C92                 mov     ebp, [esp+97Ch+var_950]
.text:00412C96                 mov     edi, [esi]
.text:00412C98                 mov     edx, [eax+4]
.text:00412C9B                 sub     ebp, edi
.text:00412C9D                 inc     ebp
.text:00412C9E                 mov     ebx, edi
.text:00412CA0                 cmp     ebp, edx
.text:00412CA2                 ja      loc_412BF3
.text:00412CA8
.text:00412CA8 loc_412CA8:                             ; CODE XREF: sub_4115E0+160D↑j
.text:00412CA8                 mov     edi, [esp+97Ch+var_950]
.text:00412CAC                 mov     byte ptr [edi], 3
.text:00412CAF                 jmp     loc_411A0A
.text:00412CB4 ; ---------------------------------------------------------------------------
.text:00412CB4
.text:00412CB4 loc_412CB4:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00412CB4                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00412CB4                 test    [esp+97Ch+arg_8], 402h ; jumptable 0041174F cases 43,63
.text:00412CBF                 jz      loc_412640      ; jumptable 0041174F case 42
.text:00412CC5                 jmp     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412CCA ; ---------------------------------------------------------------------------
.text:00412CCA
.text:00412CCA loc_412CCA:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00412CCA                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00412CCA                 mov     [esp+97Ch+var_91E], 0 ; jumptable 0041174F case 91
.text:00412CCF                 mov     edi, [esp+97Ch+var_8F4]
.text:00412CD6                 cmp     [esp+97Ch+var_8D0], edi
.text:00412CDD                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:00412CE5                 jz      loc_41323F
.text:00412CEB
.text:00412CEB loc_412CEB:                             ; CODE XREF: sub_4115E0+1784↓j
.text:00412CEB                                         ; sub_4115E0+17B1↓j ...
.text:00412CEB                 mov     ebp, [esp+97Ch+arg_C]
.text:00412CF2                 mov     ecx, [esp+97Ch+var_950]
.text:00412CF6                 mov     edi, [ebp+0]
.text:00412CF9                 mov     edx, [ebp+4]
.text:00412CFC                 sub     ecx, edi
.text:00412CFE                 lea     ebx, [ecx+22h]
.text:00412D01                 cmp     ebx, edx
.text:00412D03                 jbe     loc_412DA3
.text:00412D09                 cmp     edx, 10000h
.text:00412D0F                 mov     ebp, 0Fh
.text:00412D14                 jz      loc_4119F6
.text:00412D1A                 lea     ebx, [edx+edx]
.text:00412D1D                 mov     edx, [esp+97Ch+arg_C]
.text:00412D24                 cmp     ebx, 10000h
.text:00412D2A                 mov     [edx+4], ebx
.text:00412D2D                 jbe     short loc_412D36
.text:00412D2F                 mov     dword ptr [edx+4], 10000h
.text:00412D36
.text:00412D36 loc_412D36:                             ; CODE XREF: sub_4115E0+174D↑j
.text:00412D36                 mov     eax, [esp+97Ch+arg_C]
.text:00412D3D                 mov     ebp, [eax+4]
.text:00412D40                 mov     [esp+97Ch+Size], edi ; Block
.text:00412D43                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00412D47                 mov     ebp, 0Ch
.text:00412D4C                 call    realloc
.text:00412D51                 mov     edx, [esp+97Ch+arg_C]
.text:00412D58                 test    eax, eax
.text:00412D5A                 mov     [edx], eax
.text:00412D5C                 jz      loc_4119F6
.text:00412D62                 cmp     edi, eax
.text:00412D64                 jz      short loc_412CEB
.text:00412D66                 mov     ecx, [esp+97Ch+var_908]
.text:00412D6A                 sub     eax, edi
.text:00412D6C                 add     [esp+97Ch+var_950], eax
.text:00412D70                 add     [esp+97Ch+var_904], eax
.text:00412D74                 test    ecx, ecx
.text:00412D76                 jz      short loc_412D7C
.text:00412D78                 add     [esp+97Ch+var_908], eax
.text:00412D7C
.text:00412D7C loc_412D7C:                             ; CODE XREF: sub_4115E0+1796↑j
.text:00412D7C                 mov     esi, [esp+97Ch+var_900]
.text:00412D80                 test    esi, esi
.text:00412D82                 jz      short loc_412D88
.text:00412D84                 add     [esp+97Ch+var_900], eax
.text:00412D88
.text:00412D88 loc_412D88:                             ; CODE XREF: sub_4115E0+17A2↑j
.text:00412D88                 mov     edi, [esp+97Ch+var_8FC]
.text:00412D8F                 test    edi, edi
.text:00412D91                 jz      loc_412CEB
.text:00412D97                 add     [esp+97Ch+var_8FC], eax
.text:00412D9E                 jmp     loc_412CEB
.text:00412DA3 ; ---------------------------------------------------------------------------
.text:00412DA3
.text:00412DA3 loc_412DA3:                             ; CODE XREF: sub_4115E0+1723↑j
.text:00412DA3                 mov     ebx, [esp+97Ch+var_950]
.text:00412DA7                 lea     esi, [ecx+1]
.text:00412DAA                 cmp     esi, edx
.text:00412DAC                 mov     [esp+97Ch+var_900], ebx
.text:00412DB0                 mov     ebx, edi
.text:00412DB2                 jbe     loc_412E6D
.text:00412DB8
.text:00412DB8 loc_412DB8:                             ; CODE XREF: sub_4115E0+1887↓j
.text:00412DB8                 cmp     edx, 10000h
.text:00412DBE                 mov     ebp, 0Fh
.text:00412DC3                 jz      loc_4119F6
.text:00412DC9                 lea     ecx, [edx+edx]
.text:00412DCC                 mov     edx, [esp+97Ch+arg_C]
.text:00412DD3                 cmp     ecx, 10000h
.text:00412DD9                 mov     [edx+4], ecx
.text:00412DDC                 jbe     short loc_412DE5
.text:00412DDE                 mov     dword ptr [edx+4], 10000h
.text:00412DE5
.text:00412DE5 loc_412DE5:                             ; CODE XREF: sub_4115E0+17FC↑j
.text:00412DE5                 mov     eax, [esp+97Ch+arg_C]
.text:00412DEC                 mov     ebp, [eax+4]
.text:00412DEF                 mov     [esp+97Ch+Size], edi ; Block
.text:00412DF2                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00412DF6                 mov     ebp, 0Ch
.text:00412DFB                 call    realloc
.text:00412E00                 mov     edx, [esp+97Ch+arg_C]
.text:00412E07                 test    eax, eax
.text:00412E09                 mov     [edx], eax
.text:00412E0B                 jz      loc_4119F6
.text:00412E11                 cmp     ebx, eax
.text:00412E13                 jz      short loc_412E49
.text:00412E15                 mov     edi, [esp+97Ch+var_908]
.text:00412E19                 sub     eax, ebx
.text:00412E1B                 add     [esp+97Ch+var_950], eax
.text:00412E1F                 add     [esp+97Ch+var_904], eax
.text:00412E23                 test    edi, edi
.text:00412E25                 jz      short loc_412E2B
.text:00412E27                 add     [esp+97Ch+var_908], eax
.text:00412E2B
.text:00412E2B loc_412E2B:                             ; CODE XREF: sub_4115E0+1845↑j
.text:00412E2B                 mov     esi, [esp+97Ch+var_900]
.text:00412E2F                 test    esi, esi
.text:00412E31                 jz      short loc_412E37
.text:00412E33                 add     [esp+97Ch+var_900], eax
.text:00412E37
.text:00412E37 loc_412E37:                             ; CODE XREF: sub_4115E0+1851↑j
.text:00412E37                 mov     ebx, [esp+97Ch+var_8FC]
.text:00412E3E                 test    ebx, ebx
.text:00412E40                 jz      short loc_412E49
.text:00412E42                 add     [esp+97Ch+var_8FC], eax
.text:00412E49
.text:00412E49 loc_412E49:                             ; CODE XREF: sub_4115E0+1833↑j
.text:00412E49                                         ; sub_4115E0+1860↑j
.text:00412E49                 mov     ecx, [esp+97Ch+arg_C]
.text:00412E50                 mov     eax, [esp+97Ch+arg_C]
.text:00412E57                 mov     ebp, [esp+97Ch+var_950]
.text:00412E5B                 mov     edi, [ecx]
.text:00412E5D                 mov     edx, [eax+4]
.text:00412E60                 sub     ebp, edi
.text:00412E62                 inc     ebp
.text:00412E63                 mov     ebx, edi
.text:00412E65                 cmp     ebp, edx
.text:00412E67                 ja      loc_412DB8
.text:00412E6D
.text:00412E6D loc_412E6D:                             ; CODE XREF: sub_4115E0+17D2↑j
.text:00412E6D                 mov     edi, [esp+97Ch+var_950]
.text:00412E71                 mov     bl, 5
.text:00412E73                 mov     edx, [esp+97Ch+var_8D0]
.text:00412E7A                 inc     [esp+97Ch+var_950]
.text:00412E7E                 cmp     byte ptr [edx], 5Eh ; '^'
.text:00412E81                 setnz   al
.text:00412E84                 sub     bl, al
.text:00412E86                 mov     [edi], bl
.text:00412E88                 mov     edi, [esp+97Ch+var_8D0]
.text:00412E8F                 cmp     byte ptr [edi], 5Eh ; '^'
.text:00412E92                 jz      loc_413849
.text:00412E98
.text:00412E98 loc_412E98:                             ; CODE XREF: sub_4115E0+2271↓j
.text:00412E98                 mov     [esp+97Ch+var_8F0], edi
.text:00412E9F                 mov     esi, [esp+97Ch+arg_C]
.text:00412EA6                 mov     ecx, [esp+97Ch+arg_C]
.text:00412EAD                 mov     ebp, [esp+97Ch+var_950]
.text:00412EB1                 mov     edi, [esi]
.text:00412EB3                 mov     edx, [ecx+4]
.text:00412EB6                 sub     ebp, edi
.text:00412EB8                 mov     ebx, edi
.text:00412EBA                 inc     ebp
.text:00412EBB                 cmp     ebp, edx
.text:00412EBD                 jbe     loc_412F78
.text:00412EC3
.text:00412EC3 loc_412EC3:                             ; CODE XREF: sub_4115E0+1992↓j
.text:00412EC3                 cmp     edx, 10000h
.text:00412EC9                 mov     ebp, 0Fh
.text:00412ECE                 jz      loc_4119F6
.text:00412ED4                 lea     ebp, [edx+edx]
.text:00412ED7                 mov     edx, [esp+97Ch+arg_C]
.text:00412EDE                 cmp     ebp, 10000h
.text:00412EE4                 mov     [edx+4], ebp
.text:00412EE7                 jbe     short loc_412EF0
.text:00412EE9                 mov     dword ptr [edx+4], 10000h
.text:00412EF0
.text:00412EF0 loc_412EF0:                             ; CODE XREF: sub_4115E0+1907↑j
.text:00412EF0                 mov     eax, [esp+97Ch+arg_C]
.text:00412EF7                 mov     ebp, 0Ch
.text:00412EFC                 mov     edx, [eax+4]
.text:00412EFF                 mov     [esp+97Ch+Size], edi ; Block
.text:00412F02                 mov     [esp+97Ch+var_978], edx ; Size
.text:00412F06                 call    realloc
.text:00412F0B                 mov     edi, [esp+97Ch+arg_C]
.text:00412F12                 test    eax, eax
.text:00412F14                 mov     [edi], eax
.text:00412F16                 jz      loc_4119F6
.text:00412F1C                 cmp     ebx, eax
.text:00412F1E                 jz      short loc_412F54
.text:00412F20                 mov     ecx, [esp+97Ch+var_908]
.text:00412F24                 sub     eax, ebx
.text:00412F26                 add     [esp+97Ch+var_950], eax
.text:00412F2A                 add     [esp+97Ch+var_904], eax
.text:00412F2E                 test    ecx, ecx
.text:00412F30                 jz      short loc_412F36
.text:00412F32                 add     [esp+97Ch+var_908], eax
.text:00412F36
.text:00412F36 loc_412F36:                             ; CODE XREF: sub_4115E0+1950↑j
.text:00412F36                 mov     ebx, [esp+97Ch+var_900]
.text:00412F3A                 test    ebx, ebx
.text:00412F3C                 jz      short loc_412F42
.text:00412F3E                 add     [esp+97Ch+var_900], eax
.text:00412F42
.text:00412F42 loc_412F42:                             ; CODE XREF: sub_4115E0+195C↑j
.text:00412F42                 mov     esi, [esp+97Ch+var_8FC]
.text:00412F49                 test    esi, esi
.text:00412F4B                 jz      short loc_412F54
.text:00412F4D                 add     [esp+97Ch+var_8FC], eax
.text:00412F54
.text:00412F54 loc_412F54:                             ; CODE XREF: sub_4115E0+193E↑j
.text:00412F54                                         ; sub_4115E0+196B↑j
.text:00412F54                 mov     edx, [esp+97Ch+arg_C]
.text:00412F5B                 mov     eax, [esp+97Ch+arg_C]
.text:00412F62                 mov     ebp, [esp+97Ch+var_950]
.text:00412F66                 mov     edi, [edx]
.text:00412F68                 mov     edx, [eax+4]
.text:00412F6B                 sub     ebp, edi
.text:00412F6D                 inc     ebp
.text:00412F6E                 mov     ebx, edi
.text:00412F70                 cmp     ebp, edx
.text:00412F72                 ja      loc_412EC3
.text:00412F78
.text:00412F78 loc_412F78:                             ; CODE XREF: sub_4115E0+18DD↑j
.text:00412F78                 cld
.text:00412F79                 mov     ebx, [esp+97Ch+var_950]
.text:00412F7D                 xor     eax, eax
.text:00412F7F                 mov     ecx, 8
.text:00412F84                 mov     byte ptr [ebx], 20h ; ' '
.text:00412F87                 inc     ebx
.text:00412F88                 mov     edi, ebx
.text:00412F8A                 mov     [esp+97Ch+var_950], ebx
.text:00412F8E                 rep stosd
.text:00412F90                 cmp     byte ptr [ebx-2], 5
.text:00412F94                 jz      loc_41382F
.text:00412F9A
.text:00412F9A loc_412F9A:                             ; CODE XREF: sub_4115E0+1ACD↓j
.text:00412F9A                                         ; sub_4115E0+1BD8↓j ...
.text:00412F9A                 mov     edx, [esp+97Ch+var_8D0]
.text:00412FA1                 cmp     edx, [esp+97Ch+var_8F4]
.text:00412FA8                 jz      loc_41323F
.text:00412FAE                 movzx   eax, byte ptr [edx]
.text:00412FB1                 lea     edi, [edx+1]
.text:00412FB4                 mov     ecx, [esp+97Ch+var_8F8]
.text:00412FBB                 mov     [esp+97Ch+var_8D0], edi
.text:00412FC2                 test    ecx, ecx
.text:00412FC4                 mov     [esp+97Ch+var_8EC], al
.text:00412FCB                 jz      short loc_412FE2
.text:00412FCD                 mov     ebp, [esp+97Ch+var_8F8]
.text:00412FD4                 movzx   esi, al
.text:00412FD7                 movzx   ebx, byte ptr [esi+ebp]
.text:00412FDB                 mov     [esp+97Ch+var_8EC], bl
.text:00412FE2
.text:00412FE2 loc_412FE2:                             ; CODE XREF: sub_4115E0+19EB↑j
.text:00412FE2                 test    byte ptr [esp+97Ch+arg_8], 1
.text:00412FEA                 jz      short loc_412FFA
.text:00412FEC                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00412FF4                 jz      loc_4137D8
.text:00412FFA
.text:00412FFA loc_412FFA:                             ; CODE XREF: sub_4115E0+1A0A↑j
.text:00412FFA                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:00413002                 jz      loc_413794
.text:00413008                 mov     edi, [esp+97Ch+var_8D0]
.text:0041300F
.text:0041300F loc_41300F:                             ; CODE XREF: sub_4115E0+21C5↓j
.text:0041300F                 cmp     [esp+97Ch+var_91E], 0
.text:00413014                 jz      loc_4136F9
.text:0041301A                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00413022                 jz      loc_4136F0
.text:00413028
.text:00413028 loc_413028:                             ; CODE XREF: sub_4115E0+2121↓j
.text:00413028                                         ; sub_4115E0+2137↓j ...
.text:00413028                 cmp     byte ptr [edi], 2Dh ; '-'
.text:0041302B                 jz      loc_413660
.text:00413031
.text:00413031 loc_413031:                             ; CODE XREF: sub_4115E0+2084↓j
.text:00413031                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00413039                 jz      short loc_413049
.text:0041303B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00413043                 jz      loc_4133C6
.text:00413049
.text:00413049 loc_413049:                             ; CODE XREF: sub_4115E0+1A59↑j
.text:00413049                                         ; sub_4115E0+1DE9↓j
.text:00413049                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00413051                 jz      short loc_413061
.text:00413053                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0041305B                 jz      loc_413253
.text:00413061
.text:00413061 loc_413061:                             ; CODE XREF: sub_4115E0+1A71↑j
.text:00413061                                         ; sub_4115E0+1C76↓j
.text:00413061                 test    byte ptr [esp+97Ch+arg_8], 4
.text:00413069                 jz      short loc_413075
.text:0041306B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00413073                 jz      short loc_4130B2
.text:00413075
.text:00413075 loc_413075:                             ; CODE XREF: sub_4115E0+1A89↑j
.text:00413075                                         ; sub_4115E0+1AD5↓j
.text:00413075                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0041307D                 mov     edx, 1
.text:00413082                 mov     [esp+97Ch+var_91E], 0
.text:00413087                 mov     esi, [esp+97Ch+var_950]
.text:0041308B                 shr     cl, 3
.text:0041308E                 movzx   edi, cl
.text:00413091                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00413099                 and     ecx, 7
.text:0041309C                 shl     edx, cl
.text:0041309E                 or      [edi+esi], dl
.text:004130A1                 movzx   ebx, [esp+97Ch+var_8EC]
.text:004130A9
.text:004130A9 loc_4130A9:                             ; CODE XREF: sub_4115E0+224A↓j
.text:004130A9                 mov     [esp+97Ch+var_924], ebx
.text:004130AD                 jmp     loc_412F9A
.text:004130B2 ; ---------------------------------------------------------------------------
.text:004130B2
.text:004130B2 loc_4130B2:                             ; CODE XREF: sub_4115E0+1A93↑j
.text:004130B2                 cmp     byte ptr [edi], 2Eh ; '.'
.text:004130B5                 jnz     short loc_413075
.text:004130B7                 cmp     edi, [esp+97Ch+var_8F4]
.text:004130BE                 mov     ebp, 0Eh
.text:004130C3                 jz      loc_4119F6
.text:004130C9                 inc     edi
.text:004130CA                 xor     ebx, ebx
.text:004130CC                 cmp     edi, [esp+97Ch+var_8F4]
.text:004130D3                 mov     [esp+97Ch+var_8D0], edi
.text:004130DA                 jz      loc_41323F
.text:004130E0
.text:004130E0 loc_4130E0:                             ; CODE XREF: sub_4115E0+1B75↓j
.text:004130E0                 movzx   eax, byte ptr [edi]
.text:004130E3                 inc     edi
.text:004130E4                 mov     esi, [esp+97Ch+var_8F8]
.text:004130EB                 mov     [esp+97Ch+var_8D0], edi
.text:004130F2                 test    esi, esi
.text:004130F4                 mov     [esp+97Ch+var_8EC], al
.text:004130FB                 jz      short loc_413113
.text:004130FD                 mov     esi, [esp+97Ch+var_8F8]
.text:00413104                 movzx   ebp, al
.text:00413107                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0041310C                 mov     [esp+97Ch+var_8EC], cl
.text:00413113
.text:00413113 loc_413113:                             ; CODE XREF: sub_4115E0+1B1B↑j
.text:00413113                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0041311B                 jz      loc_413231
.text:00413121
.text:00413121 loc_413121:                             ; CODE XREF: sub_4115E0+1C54↓j
.text:00413121                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413128                 jz      short loc_41316A
.text:0041312A                 test    bl, bl
.text:0041312C                 js      short loc_413160
.text:0041312E                 movzx   eax, [esp+97Ch+var_8EC]
.text:00413136                 movzx   edx, bl
.text:00413139                 inc     bl
.text:0041313B                 mov     [esp+edx+97Ch+var_8CC], al
.text:00413142                 mov     edi, [esp+97Ch+var_8D0]
.text:00413149
.text:00413149 loc_413149:                             ; CODE XREF: sub_4115E0+1B88↓j
.text:00413149                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413150                 mov     ebp, 0Eh
.text:00413155                 jnz     short loc_4130E0
.text:00413157                 jmp     loc_4119F6
.text:00413157 ; ---------------------------------------------------------------------------
.text:0041315C                 align 10h
.text:00413160
.text:00413160 loc_413160:                             ; CODE XREF: sub_4115E0+1B4C↑j
.text:00413160                 mov     [esp+97Ch+var_8CC], 0
.text:00413168                 jmp     short loc_413149
.text:0041316A ; ---------------------------------------------------------------------------
.text:0041316A
.text:0041316A loc_41316A:                             ; CODE XREF: sub_4115E0+1B48↑j
.text:0041316A                                         ; sub_4115E0+1C5A↓j
.text:0041316A                 xor     ecx, ecx
.text:0041316C                 movzx   edi, bl
.text:0041316F                 mov     [esp+edi+97Ch+var_8CC], cl
.text:00413176                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0041317E                 jz      short loc_4131BD
.text:00413180
.text:00413180 loc_413180:                             ; CODE XREF: sub_4115E0+1BE7↓j
.text:00413180                                         ; sub_4115E0+1BF3↓j
.text:00413180                 cmp     bl, 0FFh
.text:00413183                 jz      short loc_41319F
.text:00413185                 mov     eax, [esp+97Ch+var_8D0]
.text:0041318C
.text:0041318C loc_41318C:                             ; CODE XREF: sub_4115E0+1BB6↓j
.text:0041318C                 dec     bl
.text:0041318E                 lea     edi, [eax-1]
.text:00413191                 cmp     bl, 0FFh
.text:00413194                 mov     eax, edi
.text:00413196                 jnz     short loc_41318C
.text:00413198                 mov     [esp+97Ch+var_8D0], edi
.text:0041319F
.text:0041319F loc_41319F:                             ; CODE XREF: sub_4115E0+1BA3↑j
.text:0041319F                 mov     eax, [esp+97Ch+var_950]
.text:004131A3                 or      byte ptr [eax+0Bh], 8
.text:004131A7                 or      byte ptr [eax+5], 40h
.text:004131AB                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:004131B3
.text:004131B3 loc_4131B3:                             ; CODE XREF: sub_4115E0+1C3B↓j
.text:004131B3                                         ; sub_4115E0+1D73↓j ...
.text:004131B3                 mov     [esp+97Ch+var_91E], 0
.text:004131B8                 jmp     loc_412F9A
.text:004131BD ; ---------------------------------------------------------------------------
.text:004131BD
.text:004131BD loc_4131BD:                             ; CODE XREF: sub_4115E0+1B9E↑j
.text:004131BD                 mov     eax, [esp+97Ch+var_8D0]
.text:004131C4                 cmp     byte ptr [eax], 5Dh ; ']'
.text:004131C7                 jnz     short loc_413180
.text:004131C9                 movzx   ecx, [esp+97Ch+var_8CC]
.text:004131D1                 test    cl, cl
.text:004131D3                 jz      short loc_413180
.text:004131D5                 dec     bl
.text:004131D7                 jnz     short loc_41321D
.text:004131D9                 cmp     eax, [esp+97Ch+var_8F4]
.text:004131E0                 mov     ebp, 0Eh
.text:004131E5                 jz      loc_4119F6
.text:004131EB                 mov     bl, cl
.text:004131ED                 mov     esi, [esp+97Ch+var_950]
.text:004131F1                 lea     ebp, [eax+1]
.text:004131F4                 mov     [esp+97Ch+var_8D0], ebp
.text:004131FB                 shr     bl, 3
.text:004131FE                 and     ecx, 7
.text:00413201                 mov     edx, 1
.text:00413206                 movzx   ebp, bl
.text:00413209                 shl     edx, cl
.text:0041320B                 or      [ebp+esi+0], dl
.text:0041320F                 movzx   ebx, [esp+97Ch+var_8CC]
.text:00413217                 mov     [esp+97Ch+var_924], ebx
.text:0041321B                 jmp     short loc_4131B3
.text:0041321D ; ---------------------------------------------------------------------------
.text:0041321D
.text:0041321D loc_41321D:                             ; CODE XREF: sub_4115E0+1BF7↑j
.text:0041321D                                         ; sub_4115E0+1D92↓j
.text:0041321D                 mov     edx, [esp+97Ch+Block]
.text:00413224                 mov     ebp, 3
.text:00413229                 mov     [esp+97Ch+Size], edx
.text:0041322C                 jmp     loc_411B83
.text:00413231 ; ---------------------------------------------------------------------------
.text:00413231
.text:00413231 loc_413231:                             ; CODE XREF: sub_4115E0+1B3B↑j
.text:00413231                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00413234                 jnz     loc_413121
.text:0041323A                 jmp     loc_41316A
.text:0041323F ; ---------------------------------------------------------------------------
.text:0041323F
.text:0041323F loc_41323F:                             ; CODE XREF: sub_4115E0+1705↑j
.text:0041323F                                         ; sub_4115E0+19C8↑j ...
.text:0041323F                 mov     ebp, [esp+97Ch+Block]
.text:00413246                 mov     [esp+97Ch+Size], ebp
.text:00413249                 mov     ebp, 7
.text:0041324E                 jmp     loc_411B83
.text:00413253 ; ---------------------------------------------------------------------------
.text:00413253
.text:00413253 loc_413253:                             ; CODE XREF: sub_4115E0+1A7B↑j
.text:00413253                 cmp     byte ptr [edi], 3Dh ; '='
.text:00413256                 jnz     loc_413061
.text:0041325C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413263                 mov     ebp, 0Eh
.text:00413268                 jz      loc_4119F6
.text:0041326E                 inc     edi
.text:0041326F                 xor     ebx, ebx
.text:00413271                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413278                 mov     [esp+97Ch+var_8D0], edi
.text:0041327F                 jz      short loc_41323F
.text:00413281
.text:00413281 loc_413281:                             ; CODE XREF: sub_4115E0+1D17↓j
.text:00413281                 movzx   eax, byte ptr [edi]
.text:00413284                 inc     edi
.text:00413285                 mov     esi, [esp+97Ch+var_8F8]
.text:0041328C                 mov     [esp+97Ch+var_8D0], edi
.text:00413293                 test    esi, esi
.text:00413295                 mov     [esp+97Ch+var_8EC], al
.text:0041329C                 jz      short loc_4132B4
.text:0041329E                 mov     esi, [esp+97Ch+var_8F8]
.text:004132A5                 movzx   ebp, al
.text:004132A8                 movzx   ecx, byte ptr [ebp+esi+0]
.text:004132AD                 mov     [esp+97Ch+var_8EC], cl
.text:004132B4
.text:004132B4 loc_4132B4:                             ; CODE XREF: sub_4115E0+1CBC↑j
.text:004132B4                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:004132BC                 jz      loc_4133B8
.text:004132C2
.text:004132C2 loc_4132C2:                             ; CODE XREF: sub_4115E0+1DDB↓j
.text:004132C2                 cmp     edi, [esp+97Ch+var_8F4]
.text:004132C9                 jz      short loc_41330A
.text:004132CB                 cmp     bl, 1
.text:004132CE                 ja      short loc_413300
.text:004132D0                 movzx   edx, [esp+97Ch+var_8EC]
.text:004132D8                 movzx   edi, bl
.text:004132DB                 inc     bl
.text:004132DD                 mov     [esp+edi+97Ch+var_84C], dl
.text:004132E4                 mov     edi, [esp+97Ch+var_8D0]
.text:004132EB
.text:004132EB loc_4132EB:                             ; CODE XREF: sub_4115E0+1D28↓j
.text:004132EB                 cmp     edi, [esp+97Ch+var_8F4]
.text:004132F2                 mov     ebp, 0Eh
.text:004132F7                 jnz     short loc_413281
.text:004132F9                 jmp     loc_4119F6
.text:004132F9 ; ---------------------------------------------------------------------------
.text:004132FE                 align 10h
.text:00413300
.text:00413300 loc_413300:                             ; CODE XREF: sub_4115E0+1CEE↑j
.text:00413300                 mov     [esp+97Ch+var_84C], 0
.text:00413308                 jmp     short loc_4132EB
.text:0041330A ; ---------------------------------------------------------------------------
.text:0041330A
.text:0041330A loc_41330A:                             ; CODE XREF: sub_4115E0+1CE9↑j
.text:0041330A                                         ; sub_4115E0+1DE1↓j
.text:0041330A                 xor     eax, eax
.text:0041330C                 movzx   ecx, bl
.text:0041330F                 mov     [esp+ecx+97Ch+var_84C], al
.text:00413316                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0041331E                 jz      short loc_413358
.text:00413320
.text:00413320 loc_413320:                             ; CODE XREF: sub_4115E0+1D82↓j
.text:00413320                                         ; sub_4115E0+1D8E↓j
.text:00413320                 cmp     bl, 0FFh
.text:00413323                 jz      short loc_41333F
.text:00413325                 mov     eax, [esp+97Ch+var_8D0]
.text:0041332C
.text:0041332C loc_41332C:                             ; CODE XREF: sub_4115E0+1D56↓j
.text:0041332C                 dec     bl
.text:0041332E                 lea     edi, [eax-1]
.text:00413331                 cmp     bl, 0FFh
.text:00413334                 mov     eax, edi
.text:00413336                 jnz     short loc_41332C
.text:00413338                 mov     [esp+97Ch+var_8D0], edi
.text:0041333F
.text:0041333F loc_41333F:                             ; CODE XREF: sub_4115E0+1D43↑j
.text:0041333F                 mov     edi, [esp+97Ch+var_950]
.text:00413343                 or      byte ptr [edi+0Bh], 8
.text:00413347                 or      byte ptr [edi+7], 20h
.text:0041334B                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:00413353                 jmp     loc_4131B3
.text:00413358 ; ---------------------------------------------------------------------------
.text:00413358
.text:00413358 loc_413358:                             ; CODE XREF: sub_4115E0+1D3E↑j
.text:00413358                 mov     eax, [esp+97Ch+var_8D0]
.text:0041335F                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00413362                 jnz     short loc_413320
.text:00413364                 movzx   ecx, [esp+97Ch+var_84C]
.text:0041336C                 test    cl, cl
.text:0041336E                 jz      short loc_413320
.text:00413370                 dec     bl
.text:00413372                 jnz     loc_41321D
.text:00413378                 cmp     eax, [esp+97Ch+var_8F4]
.text:0041337F                 mov     ebp, 0Eh
.text:00413384                 jz      loc_4119F6
.text:0041338A                 mov     dl, cl
.text:0041338C                 mov     esi, [esp+97Ch+var_950]
.text:00413390                 lea     ebp, [eax+1]
.text:00413393                 mov     [esp+97Ch+var_8D0], ebp
.text:0041339A                 shr     dl, 3
.text:0041339D                 and     ecx, 7
.text:004133A0                 mov     ebx, 1
.text:004133A5                 movzx   ebp, dl
.text:004133A8                 shl     ebx, cl
.text:004133AA                 or      [ebp+esi+0], bl
.text:004133AE                 mov     [esp+97Ch+var_91E], 1
.text:004133B3                 jmp     loc_412F9A
.text:004133B8 ; ---------------------------------------------------------------------------
.text:004133B8
.text:004133B8 loc_4133B8:                             ; CODE XREF: sub_4115E0+1CDC↑j
.text:004133B8                 cmp     byte ptr [edi], 5Dh ; ']'
.text:004133BB                 jnz     loc_4132C2
.text:004133C1                 jmp     loc_41330A
.text:004133C6 ; ---------------------------------------------------------------------------
.text:004133C6
.text:004133C6 loc_4133C6:                             ; CODE XREF: sub_4115E0+1A63↑j
.text:004133C6                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004133C9                 jnz     loc_413049
.text:004133CF                 cmp     edi, [esp+97Ch+var_8F4]
.text:004133D6                 mov     ebp, 0Eh
.text:004133DB                 jz      loc_4119F6
.text:004133E1                 inc     edi
.text:004133E2                 xor     ebx, ebx
.text:004133E4                 cmp     edi, [esp+97Ch+var_8F4]
.text:004133EB                 mov     [esp+97Ch+var_8D0], edi
.text:004133F2                 jz      loc_41323F
.text:004133F8
.text:004133F8 loc_4133F8:                             ; CODE XREF: sub_4115E0+1E89↓j
.text:004133F8                 movzx   ecx, byte ptr [edi]
.text:004133FB                 inc     edi
.text:004133FC                 mov     ebp, [esp+97Ch+var_8F8]
.text:00413403                 mov     [esp+97Ch+var_8D0], edi
.text:0041340A                 test    ebp, ebp
.text:0041340C                 mov     [esp+97Ch+var_8EC], cl
.text:00413413                 jz      short loc_41342B
.text:00413415                 movzx   ebp, cl
.text:00413418                 mov     ecx, [esp+97Ch+var_8F8]
.text:0041341F                 movzx   edx, byte ptr [ebp+ecx+0]
.text:00413424                 mov     [esp+97Ch+var_8EC], dl
.text:0041342B
.text:0041342B loc_41342B:                             ; CODE XREF: sub_4115E0+1E33↑j
.text:0041342B                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00413433                 jz      loc_413650
.text:00413439
.text:00413439 loc_413439:                             ; CODE XREF: sub_4115E0+2073↓j
.text:00413439                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413440                 jz      short loc_413470
.text:00413442                 movzx   eax, [esp+97Ch+var_8EC]
.text:0041344A                 movzx   esi, bl
.text:0041344D                 inc     bl
.text:0041344F                 mov     ebp, 0Eh
.text:00413454                 mov     [esp+esi+97Ch+name], al
.text:0041345B                 mov     edi, [esp+97Ch+var_8D0]
.text:00413462                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413469                 jnz     short loc_4133F8
.text:0041346B                 jmp     loc_4119F6
.text:00413470 ; ---------------------------------------------------------------------------
.text:00413470
.text:00413470 loc_413470:                             ; CODE XREF: sub_4115E0+1E60↑j
.text:00413470                                         ; sub_4115E0+2079↓j
.text:00413470                 xor     eax, eax
.text:00413472                 movzx   edi, bl
.text:00413475                 mov     [esp+edi+97Ch+name], al
.text:0041347C                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00413484                 jz      short loc_4134BE
.text:00413486
.text:00413486 loc_413486:                             ; CODE XREF: sub_4115E0+1EE8↓j
.text:00413486                 cmp     bl, 0FFh
.text:00413489                 jz      short loc_4134A5
.text:0041348B                 mov     eax, [esp+97Ch+var_8D0]
.text:00413492
.text:00413492 loc_413492:                             ; CODE XREF: sub_4115E0+1EBC↓j
.text:00413492                 dec     bl
.text:00413494                 lea     edi, [eax-1]
.text:00413497                 cmp     bl, 0FFh
.text:0041349A                 mov     eax, edi
.text:0041349C                 jnz     short loc_413492
.text:0041349E                 mov     [esp+97Ch+var_8D0], edi
.text:004134A5
.text:004134A5 loc_4134A5:                             ; CODE XREF: sub_4115E0+1EA9↑j
.text:004134A5                 mov     eax, [esp+97Ch+var_950]
.text:004134A9                 or      byte ptr [eax+0Bh], 8
.text:004134AD                 or      byte ptr [eax+7], 4
.text:004134B1                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:004134B9                 jmp     loc_4131B3
.text:004134BE ; ---------------------------------------------------------------------------
.text:004134BE
.text:004134BE loc_4134BE:                             ; CODE XREF: sub_4115E0+1EA4↑j
.text:004134BE                 mov     esi, [esp+97Ch+var_8D0]
.text:004134C5                 cmp     byte ptr [esi], 5Dh ; ']'
.text:004134C8                 jnz     short loc_413486
.text:004134CA                 cld
.text:004134CB                 mov     edi, offset aLower ; "lower"
.text:004134D0                 lea     ebx, [esp+97Ch+name]
.text:004134D7                 mov     esi, ebx
.text:004134D9                 mov     ecx, 6
.text:004134DE                 lea     ebp, [esp+97Ch+name]
.text:004134E5                 repe cmpsb
.text:004134E7                 setz    [esp+97Ch+var_925]
.text:004134EC                 mov     ecx, 6
.text:004134F1                 mov     edi, offset aUpper ; "upper"
.text:004134F6                 mov     esi, ebp
.text:004134F8                 lea     edx, [esp+97Ch+name]
.text:004134FF                 repe cmpsb
.text:00413501                 setz    [esp+97Ch+var_926]
.text:00413506                 mov     [esp+97Ch+Size], edx ; name
.text:00413509                 call    wctype
.text:0041350E                 movzx   ebx, ax
.text:00413511                 test    bx, bx
.text:00413514                 mov     dword ptr [esp+97Ch+Type], ebx
.text:00413518                 jz      loc_41363C
.text:0041351E                 mov     eax, [esp+97Ch+var_8D0]
.text:00413525                 mov     ebp, 0Eh
.text:0041352A                 cmp     eax, [esp+97Ch+var_8F4]
.text:00413531                 jz      loc_4119F6
.text:00413537                 lea     ecx, [eax+1]
.text:0041353A                 cmp     ecx, [esp+97Ch+var_8F4]
.text:00413541                 mov     [esp+97Ch+var_8D0], ecx
.text:00413548                 jz      loc_41323F
.text:0041354E                 xor     edi, edi
.text:00413550
.text:00413550 loc_413550:                             ; CODE XREF: sub_4115E0+202E↓j
.text:00413550                 mov     [esp+97Ch+Size], edi ; Ch
.text:00413553                 call    btowc
.text:00413558                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:0041355C                 movzx   esi, ax
.text:0041355F                 mov     [esp+97Ch+Size], esi ; C
.text:00413562                 mov     [esp+97Ch+var_978], ebp ; Type
.text:00413566                 call    iswctype
.text:0041356B                 test    eax, eax
.text:0041356D                 jz      short loc_41358C
.text:0041356F                 mov     ecx, edi
.text:00413571                 mov     ebx, edi
.text:00413573                 mov     edx, [esp+97Ch+var_950]
.text:00413577                 shr     cl, 3
.text:0041357A                 movzx   esi, cl
.text:0041357D                 mov     ecx, ebx
.text:0041357F                 and     ecx, 7
.text:00413582                 mov     ebx, 1
.text:00413587                 shl     ebx, cl
.text:00413589                 or      [esi+edx], bl
.text:0041358C
.text:0041358C loc_41358C:                             ; CODE XREF: sub_4115E0+1F8D↑j
.text:0041358C                 mov     eax, [esp+97Ch+var_8F8]
.text:00413593                 test    eax, eax
.text:00413595                 jz      short loc_413602
.text:00413597                 cmp     [esp+97Ch+var_926], 0
.text:0041359C                 jnz     short loc_4135A5
.text:0041359E                 cmp     [esp+97Ch+var_925], 0
.text:004135A3                 jz      short loc_413602
.text:004135A5
.text:004135A5 loc_4135A5:                             ; CODE XREF: sub_4115E0+1FBC↑j
.text:004135A5                 mov     ebp, ds:__mb_cur_max
.text:004135AB                 cmp     dword ptr [ebp+0], 1
.text:004135AF                 jz      short loc_41362B
.text:004135B1                 mov     [esp+97Ch+var_978], 1 ; Type
.text:004135B9                 mov     [esp+97Ch+Size], edi ; C
.text:004135BC                 call    _isctype
.text:004135C1
.text:004135C1 loc_4135C1:                             ; CODE XREF: sub_4115E0+205A↓j
.text:004135C1                 test    eax, eax
.text:004135C3                 jnz     short loc_4135E4
.text:004135C5                 mov     ebx, ds:__mb_cur_max
.text:004135CB                 cmp     dword ptr [ebx], 1
.text:004135CE                 jz      short loc_413619
.text:004135D0                 mov     [esp+97Ch+var_978], 2 ; Type
.text:004135D8                 mov     [esp+97Ch+Size], edi ; C
.text:004135DB                 call    _isctype
.text:004135E0
.text:004135E0 loc_4135E0:                             ; CODE XREF: sub_4115E0+2049↓j
.text:004135E0                 test    eax, eax
.text:004135E2                 jz      short loc_413602
.text:004135E4
.text:004135E4 loc_4135E4:                             ; CODE XREF: sub_4115E0+1FE3↑j
.text:004135E4                 mov     ecx, edi
.text:004135E6                 mov     ebx, edi
.text:004135E8                 mov     edx, [esp+97Ch+var_950]
.text:004135EC                 shr     cl, 3
.text:004135EF                 movzx   ebp, cl
.text:004135F2                 mov     ecx, ebx
.text:004135F4                 and     ecx, 7
.text:004135F7                 mov     ebx, 1
.text:004135FC                 shl     ebx, cl
.text:004135FE                 or      [ebp+edx+0], bl
.text:00413602
.text:00413602 loc_413602:                             ; CODE XREF: sub_4115E0+1FB5↑j
.text:00413602                                         ; sub_4115E0+1FC3↑j ...
.text:00413602                 mov     [esp+97Ch+var_91E], 1
.text:00413607                 inc     edi
.text:00413608                 cmp     edi, 0FFh
.text:0041360E                 jle     loc_413550
.text:00413614                 jmp     loc_412F9A
.text:00413619 ; ---------------------------------------------------------------------------
.text:00413619
.text:00413619 loc_413619:                             ; CODE XREF: sub_4115E0+1FEE↑j
.text:00413619                 mov     ebp, ds:_pctype
.text:0041361F                 mov     ecx, [ebp+0]
.text:00413622                 movzx   eax, word ptr [ecx+edi*2]
.text:00413626                 and     eax, 2
.text:00413629                 jmp     short loc_4135E0
.text:0041362B ; ---------------------------------------------------------------------------
.text:0041362B
.text:0041362B loc_41362B:                             ; CODE XREF: sub_4115E0+1FCF↑j
.text:0041362B                 mov     edx, ds:_pctype
.text:00413631                 mov     esi, [edx]
.text:00413633                 movzx   eax, word ptr [esi+edi*2]
.text:00413637                 and     eax, 1
.text:0041363A                 jmp     short loc_4135C1
.text:0041363C ; ---------------------------------------------------------------------------
.text:0041363C
.text:0041363C loc_41363C:                             ; CODE XREF: sub_4115E0+1F38↑j
.text:0041363C                 mov     ebx, [esp+97Ch+Block]
.text:00413643                 mov     ebp, 4
.text:00413648
.text:00413648 loc_413648:                             ; CODE XREF: sub_4115E0+26A5↓j
.text:00413648                 mov     [esp+97Ch+Size], ebx
.text:0041364B                 jmp     loc_411B83
.text:00413650 ; ---------------------------------------------------------------------------
.text:00413650
.text:00413650 loc_413650:                             ; CODE XREF: sub_4115E0+1E53↑j
.text:00413650                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00413653                 jnz     loc_413439
.text:00413659                 jmp     loc_413470
.text:00413659 ; ---------------------------------------------------------------------------
.text:0041365E                 align 10h
.text:00413660
.text:00413660 loc_413660:                             ; CODE XREF: sub_4115E0+1A4B↑j
.text:00413660                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:00413664                 jz      loc_413031
.text:0041366A                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413671                 mov     ebp, 0Eh
.text:00413676                 jz      loc_4119F6
.text:0041367C                 movzx   ebp, [esp+97Ch+var_8EC]
.text:00413684                 inc     edi
.text:00413685                 mov     ecx, [esp+97Ch+var_950]
.text:00413689                 mov     [esp+97Ch+var_8D0], edi
.text:00413690                 mov     edx, [esp+97Ch+arg_8]
.text:00413697                 lea     edi, [esp+97Ch+var_8D0]
.text:0041369E                 mov     [esp+97Ch+var_978], edi
.text:004136A2                 mov     ebx, [esp+97Ch+var_8F8]
.text:004136A9                 mov     eax, [esp+97Ch+var_8F4]
.text:004136B0                 mov     [esp+97Ch+var_968], ecx
.text:004136B4                 mov     [esp+97Ch+var_96C], edx
.text:004136B8                 mov     [esp+97Ch+var_970], ebx
.text:004136BC                 mov     [esp+97Ch+var_974], eax
.text:004136C0                 mov     [esp+97Ch+Size], ebp
.text:004136C3
.text:004136C3 loc_4136C3:                             ; CODE XREF: sub_4115E0+2193↓j
.text:004136C3                 call    sub_40E570
.text:004136C8                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:004136D0                 test    eax, eax
.text:004136D2                 mov     ebx, eax
.text:004136D4                 jz      loc_412F9A
.text:004136DA                 mov     esi, [esp+97Ch+Block]
.text:004136E1                 mov     ebp, ebx
.text:004136E3
.text:004136E3 loc_4136E3:                             ; CODE XREF: sub_4115E0+318E↓j
.text:004136E3                 mov     [esp+97Ch+Size], esi
.text:004136E6                 jmp     loc_411B83
.text:004136E6 ; ---------------------------------------------------------------------------
.text:004136EB                 align 10h
.text:004136F0
.text:004136F0 loc_4136F0:                             ; CODE XREF: sub_4115E0+1A42↑j
.text:004136F0                 cmp     byte ptr [edi], 5Dh ; ']'
.text:004136F3                 jnz     loc_413783
.text:004136F9
.text:004136F9 loc_4136F9:                             ; CODE XREF: sub_4115E0+1A34↑j
.text:004136F9                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00413701                 jnz     loc_413028
.text:00413707                 lea     esi, [edi-2]
.text:0041370A                 cmp     esi, [esp+97Ch+arg_0]
.text:00413711                 jb      short loc_41371D
.text:00413713                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:00413717                 jz      loc_413028
.text:0041371D
.text:0041371D loc_41371D:                             ; CODE XREF: sub_4115E0+2131↑j
.text:0041371D                 lea     ebp, [edi-3]
.text:00413720                 cmp     ebp, [esp+97Ch+arg_0]
.text:00413727                 jb      short loc_41372F
.text:00413729                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:0041372D                 jz      short loc_413778
.text:0041372F
.text:0041372F loc_41372F:                             ; CODE XREF: sub_4115E0+2147↑j
.text:0041372F                                         ; sub_4115E0+219C↓j
.text:0041372F                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00413732                 jz      loc_413028
.text:00413738                 mov     esi, [esp+97Ch+var_950]
.text:0041373C                 lea     edi, [esp+97Ch+var_8D0]
.text:00413743                 mov     ecx, [esp+97Ch+arg_8]
.text:0041374A                 mov     [esp+97Ch+var_978], edi
.text:0041374E                 mov     ebx, [esp+97Ch+var_8F8]
.text:00413755                 mov     edx, [esp+97Ch+var_8F4]
.text:0041375C                 mov     [esp+97Ch+var_968], esi
.text:00413760                 mov     eax, [esp+97Ch+var_924]
.text:00413764                 mov     [esp+97Ch+var_96C], ecx
.text:00413768                 mov     [esp+97Ch+var_970], ebx
.text:0041376C                 mov     [esp+97Ch+var_974], edx
.text:00413770                 mov     [esp+97Ch+Size], eax
.text:00413773                 jmp     loc_4136C3
.text:00413778 ; ---------------------------------------------------------------------------
.text:00413778
.text:00413778 loc_413778:                             ; CODE XREF: sub_4115E0+214D↑j
.text:00413778                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:0041377C                 jnz     short loc_41372F
.text:0041377E                 jmp     loc_413028
.text:00413783 ; ---------------------------------------------------------------------------
.text:00413783
.text:00413783 loc_413783:                             ; CODE XREF: sub_4115E0+2113↑j
.text:00413783                 mov     ecx, [esp+97Ch+Block]
.text:0041378A                 mov     ebp, 0Bh
.text:0041378F                 jmp     loc_4124BC
.text:00413794 ; ---------------------------------------------------------------------------
.text:00413794
.text:00413794 loc_413794:                             ; CODE XREF: sub_4115E0+1A22↑j
.text:00413794                 mov     ebx, [esp+97Ch+var_8F0]
.text:0041379B                 mov     edi, [esp+97Ch+var_8D0]
.text:004137A2                 inc     ebx
.text:004137A3                 cmp     edi, ebx
.text:004137A5                 jz      loc_41300F
.text:004137AB
.text:004137AB loc_4137AB:                             ; CODE XREF: sub_4115E0+21EA↓j
.text:004137AB                 mov     edi, [esp+97Ch+var_950]
.text:004137AF                 movzx   edx, byte ptr [edi-1]
.text:004137B3                 test    dl, dl
.text:004137B5                 jz      short loc_4137CC
.text:004137B7                 movzx   ebp, dl
.text:004137BA                 cmp     byte ptr [ebp+edi-1], 0
.text:004137BF                 jnz     short loc_4137CC
.text:004137C1                 mov     ebx, [esp+97Ch+var_950]
.text:004137C5                 dec     dl
.text:004137C7                 mov     [ebx-1], dl
.text:004137CA                 jmp     short loc_4137AB
.text:004137CC ; ---------------------------------------------------------------------------
.text:004137CC
.text:004137CC loc_4137CC:                             ; CODE XREF: sub_4115E0+21D5↑j
.text:004137CC                                         ; sub_4115E0+21DF↑j
.text:004137CC                 movzx   edi, dl
.text:004137CF                 add     [esp+97Ch+var_950], edi
.text:004137D3                 jmp     loc_411A0F
.text:004137D8 ; ---------------------------------------------------------------------------
.text:004137D8
.text:004137D8 loc_4137D8:                             ; CODE XREF: sub_4115E0+1A14↑j
.text:004137D8                 cmp     edi, [esp+97Ch+var_8F4]
.text:004137DF                 jz      loc_412B90
.text:004137E5                 movzx   ebx, byte ptr [edx+1]
.text:004137E9                 lea     ecx, [edx+2]
.text:004137EC                 mov     eax, [esp+97Ch+var_8F8]
.text:004137F3                 mov     [esp+97Ch+var_8D0], ecx
.text:004137FA                 test    eax, eax
.text:004137FC                 jz      short loc_41380C
.text:004137FE                 mov     edx, [esp+97Ch+var_8F8]
.text:00413805                 movzx   edi, bl
.text:00413808                 movzx   ebx, byte ptr [edi+edx]
.text:0041380C
.text:0041380C loc_41380C:                             ; CODE XREF: sub_4115E0+221C↑j
.text:0041380C                 mov     cl, bl
.text:0041380E                 mov     ebp, [esp+97Ch+var_950]
.text:00413812                 mov     edx, 1
.text:00413817                 shr     cl, 3
.text:0041381A                 movzx   esi, cl
.text:0041381D                 mov     ecx, ebx
.text:0041381F                 and     ecx, 7
.text:00413822                 movzx   ebx, bl
.text:00413825                 shl     edx, cl
.text:00413827                 or      [esi+ebp], dl
.text:0041382A                 jmp     loc_4130A9
.text:0041382F ; ---------------------------------------------------------------------------
.text:0041382F
.text:0041382F loc_41382F:                             ; CODE XREF: sub_4115E0+19B4↑j
.text:0041382F                 test    [esp+97Ch+arg_8], 100h
.text:0041383A                 jz      loc_412F9A
.text:00413840                 or      byte ptr [ebx+1], 4
.text:00413844                 jmp     loc_412F9A
.text:00413849 ; ---------------------------------------------------------------------------
.text:00413849
.text:00413849 loc_413849:                             ; CODE XREF: sub_4115E0+18B2↑j
.text:00413849                 inc     edi
.text:0041384A                 mov     [esp+97Ch+var_8D0], edi
.text:00413851                 jmp     loc_412E98
.text:00413856 ; ---------------------------------------------------------------------------
.text:00413856
.text:00413856 loc_413856:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00413856                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00413856                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0041174F case 92
.text:0041385D                 cmp     eax, [esp+97Ch+var_8F4]
.text:00413864                 jz      loc_412B90
.text:0041386A                 movzx   ecx, byte ptr [eax]
.text:0041386D                 lea     ebx, [eax+1]
.text:00413870                 mov     [esp+97Ch+var_8D0], ebx
.text:00413877                 movzx   eax, cl
.text:0041387A                 sub     eax, 27h ; '''  ; switch 86 cases
.text:0041387D                 mov     [esp+97Ch+var_8EC], cl
.text:00413884                 cmp     eax, 55h
.text:00413887                 ja      def_41388D      ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0041388D                 jmp     ds:jpt_41388D[eax*4] ; switch jump
.text:0041388D ; ---------------------------------------------------------------------------
.text:00413894 jpt_41388D      dd offset loc_413A2B, offset loc_4139EC, offset loc_413AFD
.text:00413894                                         ; DATA XREF: sub_4115E0+22AD↑r
.text:00413894                 dd offset def_41388D, offset loc_413E2E, offset def_41388D ; jump table for switch statement
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset loc_413B33, offset loc_413B33
.text:00413894                 dd offset loc_413B33, offset loc_413B33, offset loc_413B33
.text:00413894                 dd offset loc_413B33, offset loc_413B33, offset loc_413B33
.text:00413894                 dd offset loc_413B33, offset def_41388D, offset def_41388D
.text:00413894                 dd offset loc_413C8A, offset def_41388D, offset loc_413D5C
.text:00413894                 dd offset loc_413E2E, offset def_41388D, offset def_41388D
.text:00413894                 dd offset loc_413E41, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset loc_413F13, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset loc_414006, offset def_41388D, offset loc_4140D8
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset def_41388D, offset def_41388D, offset loc_4141AA
.text:00413894                 dd offset def_41388D, offset def_41388D, offset def_41388D
.text:00413894                 dd offset loc_41429F, offset loc_414849
.text:004139EC ; ---------------------------------------------------------------------------
.text:004139EC
.text:004139EC loc_4139EC:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:004139EC                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:004139EC                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0041388D case 40
.text:004139F7                 jz      loc_41219D
.text:004139FD
.text:004139FD def_41388D:                             ; CODE XREF: sub_4115E0+22A7↑j
.text:004139FD                                         ; sub_4115E0+22AD↑j ...
.text:004139FD                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00413A04                 test    ebx, ebx
.text:00413A06                 jz      def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413A0C                 movzx   edi, [esp+97Ch+var_8EC]
.text:00413A14                 mov     esi, [esp+97Ch+var_8F8]
.text:00413A1B                 movzx   ecx, byte ptr [edi+esi]
.text:00413A1F                 mov     [esp+97Ch+var_8EC], cl
.text:00413A26                 jmp     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413A2B ; ---------------------------------------------------------------------------
.text:00413A2B
.text:00413A2B loc_413A2B:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413A2B                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413A2B                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 39
.text:00413A36                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413A3C
.text:00413A3C loc_413A3C:                             ; CODE XREF: sub_4115E0+24D2↓j
.text:00413A3C                                         ; sub_4115E0+24FF↓j ...
.text:00413A3C                 mov     eax, [esp+97Ch+arg_C]
.text:00413A43                 mov     ebp, [esp+97Ch+var_950]
.text:00413A47                 mov     edi, [eax]
.text:00413A49                 mov     edx, [eax+4]
.text:00413A4C                 sub     ebp, edi
.text:00413A4E                 inc     ebp
.text:00413A4F                 cmp     ebp, edx
.text:00413A51                 jbe     loc_413AF1
.text:00413A57                 cmp     edx, 10000h
.text:00413A5D                 mov     ebp, 0Fh
.text:00413A62                 jz      loc_4119F6
.text:00413A68                 lea     ebp, [edx+edx]
.text:00413A6B                 mov     edx, [esp+97Ch+arg_C]
.text:00413A72                 cmp     ebp, 10000h
.text:00413A78                 mov     [edx+4], ebp
.text:00413A7B                 jbe     short loc_413A84
.text:00413A7D                 mov     dword ptr [edx+4], 10000h
.text:00413A84
.text:00413A84 loc_413A84:                             ; CODE XREF: sub_4115E0+249B↑j
.text:00413A84                 mov     ebx, [esp+97Ch+arg_C]
.text:00413A8B                 mov     ebp, 0Ch
.text:00413A90                 mov     esi, [ebx+4]
.text:00413A93                 mov     [esp+97Ch+Size], edi ; Block
.text:00413A96                 mov     [esp+97Ch+var_978], esi ; Size
.text:00413A9A                 call    realloc
.text:00413A9F                 mov     edx, [esp+97Ch+arg_C]
.text:00413AA6                 test    eax, eax
.text:00413AA8                 mov     [edx], eax
.text:00413AAA                 jz      loc_4119F6
.text:00413AB0                 cmp     edi, eax
.text:00413AB2                 jz      short loc_413A3C
.text:00413AB4                 sub     eax, edi
.text:00413AB6                 mov     edi, [esp+97Ch+var_908]
.text:00413ABA                 add     [esp+97Ch+var_950], eax
.text:00413ABE                 add     [esp+97Ch+var_904], eax
.text:00413AC2                 test    edi, edi
.text:00413AC4                 jz      short loc_413ACA
.text:00413AC6                 add     [esp+97Ch+var_908], eax
.text:00413ACA
.text:00413ACA loc_413ACA:                             ; CODE XREF: sub_4115E0+24E4↑j
.text:00413ACA                 mov     ecx, [esp+97Ch+var_900]
.text:00413ACE                 test    ecx, ecx
.text:00413AD0                 jz      short loc_413AD6
.text:00413AD2                 add     [esp+97Ch+var_900], eax
.text:00413AD6
.text:00413AD6 loc_413AD6:                             ; CODE XREF: sub_4115E0+24F0↑j
.text:00413AD6                 mov     edx, [esp+97Ch+var_8FC]
.text:00413ADD                 test    edx, edx
.text:00413ADF                 jz      loc_413A3C
.text:00413AE5                 add     [esp+97Ch+var_8FC], eax
.text:00413AEC                 jmp     loc_413A3C
.text:00413AF1 ; ---------------------------------------------------------------------------
.text:00413AF1
.text:00413AF1 loc_413AF1:                             ; CODE XREF: sub_4115E0+2471↑j
.text:00413AF1                 mov     edi, [esp+97Ch+var_950]
.text:00413AF5                 mov     byte ptr [edi], 0Ch
.text:00413AF8                 jmp     loc_411A0A
.text:00413AFD ; ---------------------------------------------------------------------------
.text:00413AFD
.text:00413AFD loc_413AFD:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413AFD                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413AFD                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0041388D case 41
.text:00413B08                 jnz     def_41388D      ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00413B0E                 mov     edi, [esp+97Ch+var_24]
.text:00413B15                 test    edi, edi
.text:00413B17                 jnz     loc_412387
.text:00413B1D                 test    [esp+97Ch+arg_8], 20000h
.text:00413B28                 jnz     def_41388D      ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00413B2E                 jmp     loc_4124B0
.text:00413B33 ; ---------------------------------------------------------------------------
.text:00413B33
.text:00413B33 loc_413B33:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413B33                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413B33                 test    [esp+97Ch+arg_8], 4000h ; jumptable 0041388D cases 49-57
.text:00413B3E                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413B44                 movzx   ebx, [esp+97Ch+var_8EC]
.text:00413B4C                 sub     bl, 30h ; '0'
.text:00413B4F                 movzx   eax, bl
.text:00413B52                 cmp     eax, [esp+97Ch+var_90C]
.text:00413B56                 ja      loc_413C79
.text:00413B5C                 mov     [esp+97Ch+var_970], eax
.text:00413B60                 mov     ecx, [esp+97Ch+Block]
.text:00413B67                 mov     edi, [esp+97Ch+var_28]
.text:00413B6E                 mov     esi, [esp+97Ch+var_24]
.text:00413B75                 mov     [esp+97Ch+Size], ecx
.text:00413B78                 mov     [esp+97Ch+var_978], edi
.text:00413B7C                 mov     [esp+97Ch+var_974], esi
.text:00413B80                 call    sub_410FC0
.text:00413B85                 test    al, al
.text:00413B87                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413B8D                 mov     esi, [esp+97Ch+arg_C]
.text:00413B94                 mov     ebp, [esp+97Ch+var_950]
.text:00413B98                 mov     edi, [esi]
.text:00413B9A                 mov     [esp+97Ch+var_900], ebp
.text:00413B9E                 mov     edx, [esi+4]
.text:00413BA1                 sub     ebp, edi
.text:00413BA3                 mov     [esp+97Ch+var_940], edi
.text:00413BA7                 add     ebp, 2
.text:00413BAA                 cmp     ebp, edx
.text:00413BAC                 jbe     loc_413C6A
.text:00413BB2
.text:00413BB2 loc_413BB2:                             ; CODE XREF: sub_4115E0+2684↓j
.text:00413BB2                 cmp     edx, 10000h
.text:00413BB8                 mov     ebp, 0Fh
.text:00413BBD                 jz      loc_4119F6
.text:00413BC3                 mov     esi, [esp+97Ch+arg_C]
.text:00413BCA                 lea     ecx, [edx+edx]
.text:00413BCD                 cmp     ecx, 10000h
.text:00413BD3                 mov     [esi+4], ecx
.text:00413BD6                 jbe     short loc_413BDF
.text:00413BD8                 mov     dword ptr [esi+4], 10000h
.text:00413BDF
.text:00413BDF loc_413BDF:                             ; CODE XREF: sub_4115E0+25F6↑j
.text:00413BDF                 mov     eax, [esp+97Ch+arg_C]
.text:00413BE6                 mov     ebp, [eax+4]
.text:00413BE9                 mov     [esp+97Ch+Size], edi ; Block
.text:00413BEC                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00413BF0                 mov     ebp, 0Ch
.text:00413BF5                 call    realloc
.text:00413BFA                 mov     edx, [esp+97Ch+arg_C]
.text:00413C01                 test    eax, eax
.text:00413C03                 mov     [edx], eax
.text:00413C05                 jz      loc_4119F6
.text:00413C0B                 cmp     [esp+97Ch+var_940], eax
.text:00413C0F                 jz      short loc_413C49
.text:00413C11                 mov     esi, [esp+97Ch+var_940]
.text:00413C15                 mov     edi, [esp+97Ch+var_908]
.text:00413C19                 sub     eax, esi
.text:00413C1B                 add     [esp+97Ch+var_950], eax
.text:00413C1F                 add     [esp+97Ch+var_904], eax
.text:00413C23                 test    edi, edi
.text:00413C25                 jz      short loc_413C2B
.text:00413C27                 add     [esp+97Ch+var_908], eax
.text:00413C2B
.text:00413C2B loc_413C2B:                             ; CODE XREF: sub_4115E0+2645↑j
.text:00413C2B                 mov     edx, [esp+97Ch+var_900]
.text:00413C2F                 test    edx, edx
.text:00413C31                 jz      short loc_413C37
.text:00413C33                 add     [esp+97Ch+var_900], eax
.text:00413C37
.text:00413C37 loc_413C37:                             ; CODE XREF: sub_4115E0+2651↑j
.text:00413C37                 mov     ecx, [esp+97Ch+var_8FC]
.text:00413C3E                 test    ecx, ecx
.text:00413C40                 jz      short loc_413C49
.text:00413C42                 add     [esp+97Ch+var_8FC], eax
.text:00413C49
.text:00413C49 loc_413C49:                             ; CODE XREF: sub_4115E0+262F↑j
.text:00413C49                                         ; sub_4115E0+2660↑j
.text:00413C49                 mov     eax, [esp+97Ch+arg_C]
.text:00413C50                 mov     ebp, [esp+97Ch+var_950]
.text:00413C54                 mov     edi, [eax]
.text:00413C56                 mov     edx, [eax+4]
.text:00413C59                 sub     ebp, edi
.text:00413C5B                 add     ebp, 2
.text:00413C5E                 mov     [esp+97Ch+var_940], edi
.text:00413C62                 cmp     ebp, edx
.text:00413C64                 ja      loc_413BB2
.text:00413C6A
.text:00413C6A loc_413C6A:                             ; CODE XREF: sub_4115E0+25CC↑j
.text:00413C6A                 mov     edi, [esp+97Ch+var_950]
.text:00413C6E                 mov     byte ptr [edi], 8
.text:00413C71                 inc     edi
.text:00413C72                 mov     [edi], bl
.text:00413C74                 jmp     loc_411A0A
.text:00413C79 ; ---------------------------------------------------------------------------
.text:00413C79
.text:00413C79 loc_413C79:                             ; CODE XREF: sub_4115E0+2576↑j
.text:00413C79                 mov     ebx, [esp+97Ch+Block]
.text:00413C80                 mov     ebp, 6
.text:00413C85                 jmp     loc_413648
.text:00413C8A ; ---------------------------------------------------------------------------
.text:00413C8A
.text:00413C8A loc_413C8A:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413C8A                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413C8A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 60
.text:00413C95                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413C9B
.text:00413C9B loc_413C9B:                             ; CODE XREF: sub_4115E0+2731↓j
.text:00413C9B                                         ; sub_4115E0+275E↓j ...
.text:00413C9B                 mov     eax, [esp+97Ch+arg_C]
.text:00413CA2                 mov     ebx, [esp+97Ch+var_950]
.text:00413CA6                 mov     edi, [eax]
.text:00413CA8                 mov     edx, [eax+4]
.text:00413CAB                 sub     ebx, edi
.text:00413CAD                 inc     ebx
.text:00413CAE                 cmp     ebx, edx
.text:00413CB0                 jbe     loc_413D50
.text:00413CB6                 cmp     edx, 10000h
.text:00413CBC                 mov     ebp, 0Fh
.text:00413CC1                 jz      loc_4119F6
.text:00413CC7                 lea     ebx, [edx+edx]
.text:00413CCA                 mov     edx, [esp+97Ch+arg_C]
.text:00413CD1                 cmp     ebx, 10000h
.text:00413CD7                 mov     [edx+4], ebx
.text:00413CDA                 jbe     short loc_413CE3
.text:00413CDC                 mov     dword ptr [edx+4], 10000h
.text:00413CE3
.text:00413CE3 loc_413CE3:                             ; CODE XREF: sub_4115E0+26FA↑j
.text:00413CE3                 mov     ebp, [esp+97Ch+arg_C]
.text:00413CEA                 mov     edx, [ebp+4]
.text:00413CED                 mov     ebp, 0Ch
.text:00413CF2                 mov     [esp+97Ch+Size], edi ; Block
.text:00413CF5                 mov     [esp+97Ch+var_978], edx ; Size
.text:00413CF9                 call    realloc
.text:00413CFE                 mov     ecx, [esp+97Ch+arg_C]
.text:00413D05                 test    eax, eax
.text:00413D07                 mov     [ecx], eax
.text:00413D09                 jz      loc_4119F6
.text:00413D0F                 cmp     edi, eax
.text:00413D11                 jz      short loc_413C9B
.text:00413D13                 mov     esi, [esp+97Ch+var_908]
.text:00413D17                 sub     eax, edi
.text:00413D19                 add     [esp+97Ch+var_950], eax
.text:00413D1D                 add     [esp+97Ch+var_904], eax
.text:00413D21                 test    esi, esi
.text:00413D23                 jz      short loc_413D29
.text:00413D25                 add     [esp+97Ch+var_908], eax
.text:00413D29
.text:00413D29 loc_413D29:                             ; CODE XREF: sub_4115E0+2743↑j
.text:00413D29                 mov     edi, [esp+97Ch+var_900]
.text:00413D2D                 test    edi, edi
.text:00413D2F                 jz      short loc_413D35
.text:00413D31                 add     [esp+97Ch+var_900], eax
.text:00413D35
.text:00413D35 loc_413D35:                             ; CODE XREF: sub_4115E0+274F↑j
.text:00413D35                 mov     ecx, [esp+97Ch+var_8FC]
.text:00413D3C                 test    ecx, ecx
.text:00413D3E                 jz      loc_413C9B
.text:00413D44                 add     [esp+97Ch+var_8FC], eax
.text:00413D4B                 jmp     loc_413C9B
.text:00413D50 ; ---------------------------------------------------------------------------
.text:00413D50
.text:00413D50 loc_413D50:                             ; CODE XREF: sub_4115E0+26D0↑j
.text:00413D50                 mov     edi, [esp+97Ch+var_950]
.text:00413D54                 mov     byte ptr [edi], 1Ah
.text:00413D57                 jmp     loc_411A0A
.text:00413D5C ; ---------------------------------------------------------------------------
.text:00413D5C
.text:00413D5C loc_413D5C:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413D5C                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413D5C                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 62
.text:00413D67                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413D6D
.text:00413D6D loc_413D6D:                             ; CODE XREF: sub_4115E0+2803↓j
.text:00413D6D                                         ; sub_4115E0+2830↓j ...
.text:00413D6D                 mov     eax, [esp+97Ch+arg_C]
.text:00413D74                 mov     ebp, [esp+97Ch+var_950]
.text:00413D78                 mov     edi, [eax]
.text:00413D7A                 mov     edx, [eax+4]
.text:00413D7D                 sub     ebp, edi
.text:00413D7F                 inc     ebp
.text:00413D80                 cmp     ebp, edx
.text:00413D82                 jbe     loc_413E22
.text:00413D88                 cmp     edx, 10000h
.text:00413D8E                 mov     ebp, 0Fh
.text:00413D93                 jz      loc_4119F6
.text:00413D99                 lea     ebp, [edx+edx]
.text:00413D9C                 mov     edx, [esp+97Ch+arg_C]
.text:00413DA3                 cmp     ebp, 10000h
.text:00413DA9                 mov     [edx+4], ebp
.text:00413DAC                 jbe     short loc_413DB5
.text:00413DAE                 mov     dword ptr [edx+4], 10000h
.text:00413DB5
.text:00413DB5 loc_413DB5:                             ; CODE XREF: sub_4115E0+27CC↑j
.text:00413DB5                 mov     ebx, [esp+97Ch+arg_C]
.text:00413DBC                 mov     ebp, 0Ch
.text:00413DC1                 mov     esi, [ebx+4]
.text:00413DC4                 mov     [esp+97Ch+Size], edi ; Block
.text:00413DC7                 mov     [esp+97Ch+var_978], esi ; Size
.text:00413DCB                 call    realloc
.text:00413DD0                 mov     edx, [esp+97Ch+arg_C]
.text:00413DD7                 test    eax, eax
.text:00413DD9                 mov     [edx], eax
.text:00413DDB                 jz      loc_4119F6
.text:00413DE1                 cmp     edi, eax
.text:00413DE3                 jz      short loc_413D6D
.text:00413DE5                 sub     eax, edi
.text:00413DE7                 mov     edi, [esp+97Ch+var_908]
.text:00413DEB                 add     [esp+97Ch+var_950], eax
.text:00413DEF                 add     [esp+97Ch+var_904], eax
.text:00413DF3                 test    edi, edi
.text:00413DF5                 jz      short loc_413DFB
.text:00413DF7                 add     [esp+97Ch+var_908], eax
.text:00413DFB
.text:00413DFB loc_413DFB:                             ; CODE XREF: sub_4115E0+2815↑j
.text:00413DFB                 mov     ecx, [esp+97Ch+var_900]
.text:00413DFF                 test    ecx, ecx
.text:00413E01                 jz      short loc_413E07
.text:00413E03                 add     [esp+97Ch+var_900], eax
.text:00413E07
.text:00413E07 loc_413E07:                             ; CODE XREF: sub_4115E0+2821↑j
.text:00413E07                 mov     edx, [esp+97Ch+var_8FC]
.text:00413E0E                 test    edx, edx
.text:00413E10                 jz      loc_413D6D
.text:00413E16                 add     [esp+97Ch+var_8FC], eax
.text:00413E1D                 jmp     loc_413D6D
.text:00413E22 ; ---------------------------------------------------------------------------
.text:00413E22
.text:00413E22 loc_413E22:                             ; CODE XREF: sub_4115E0+27A2↑j
.text:00413E22                 mov     edi, [esp+97Ch+var_950]
.text:00413E26                 mov     byte ptr [edi], 1Bh
.text:00413E29                 jmp     loc_411A0A
.text:00413E2E ; ---------------------------------------------------------------------------
.text:00413E2E
.text:00413E2E loc_413E2E:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413E2E                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413E2E                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 0041388D cases 43,63
.text:00413E36                 jz      def_41388D      ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00413E3C                 jmp     loc_412640      ; jumptable 0041174F case 42
.text:00413E41 ; ---------------------------------------------------------------------------
.text:00413E41
.text:00413E41 loc_413E41:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413E41                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413E41                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 66
.text:00413E4C                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413E52
.text:00413E52 loc_413E52:                             ; CODE XREF: sub_4115E0+28E8↓j
.text:00413E52                                         ; sub_4115E0+2915↓j ...
.text:00413E52                 mov     eax, [esp+97Ch+arg_C]
.text:00413E59                 mov     ebp, [esp+97Ch+var_950]
.text:00413E5D                 mov     edi, [eax]
.text:00413E5F                 mov     edx, [eax+4]
.text:00413E62                 sub     ebp, edi
.text:00413E64                 inc     ebp
.text:00413E65                 cmp     ebp, edx
.text:00413E67                 jbe     loc_413F07
.text:00413E6D                 cmp     edx, 10000h
.text:00413E73                 mov     ebp, 0Fh
.text:00413E78                 jz      loc_4119F6
.text:00413E7E                 lea     ebx, [edx+edx]
.text:00413E81                 mov     edx, [esp+97Ch+arg_C]
.text:00413E88                 cmp     ebx, 10000h
.text:00413E8E                 mov     [edx+4], ebx
.text:00413E91                 jbe     short loc_413E9A
.text:00413E93                 mov     dword ptr [edx+4], 10000h
.text:00413E9A
.text:00413E9A loc_413E9A:                             ; CODE XREF: sub_4115E0+28B1↑j
.text:00413E9A                 mov     esi, [esp+97Ch+arg_C]
.text:00413EA1                 mov     ebp, [esi+4]
.text:00413EA4                 mov     [esp+97Ch+Size], edi ; Block
.text:00413EA7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00413EAB                 mov     ebp, 0Ch
.text:00413EB0                 call    realloc
.text:00413EB5                 mov     edx, [esp+97Ch+arg_C]
.text:00413EBC                 test    eax, eax
.text:00413EBE                 mov     [edx], eax
.text:00413EC0                 jz      loc_4119F6
.text:00413EC6                 cmp     edi, eax
.text:00413EC8                 jz      short loc_413E52
.text:00413ECA                 sub     eax, edi
.text:00413ECC                 mov     edi, [esp+97Ch+var_908]
.text:00413ED0                 add     [esp+97Ch+var_950], eax
.text:00413ED4                 add     [esp+97Ch+var_904], eax
.text:00413ED8                 test    edi, edi
.text:00413EDA                 jz      short loc_413EE0
.text:00413EDC                 add     [esp+97Ch+var_908], eax
.text:00413EE0
.text:00413EE0 loc_413EE0:                             ; CODE XREF: sub_4115E0+28FA↑j
.text:00413EE0                 mov     ecx, [esp+97Ch+var_900]
.text:00413EE4                 test    ecx, ecx
.text:00413EE6                 jz      short loc_413EEC
.text:00413EE8                 add     [esp+97Ch+var_900], eax
.text:00413EEC
.text:00413EEC loc_413EEC:                             ; CODE XREF: sub_4115E0+2906↑j
.text:00413EEC                 mov     ebx, [esp+97Ch+var_8FC]
.text:00413EF3                 test    ebx, ebx
.text:00413EF5                 jz      loc_413E52
.text:00413EFB                 add     [esp+97Ch+var_8FC], eax
.text:00413F02                 jmp     loc_413E52
.text:00413F07 ; ---------------------------------------------------------------------------
.text:00413F07
.text:00413F07 loc_413F07:                             ; CODE XREF: sub_4115E0+2887↑j
.text:00413F07                 mov     edi, [esp+97Ch+var_950]
.text:00413F0B                 mov     byte ptr [edi], 1Dh
.text:00413F0E                 jmp     loc_411A0A
.text:00413F13 ; ---------------------------------------------------------------------------
.text:00413F13
.text:00413F13 loc_413F13:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00413F13                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00413F13                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 87
.text:00413F1E                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413F24                 mov     ecx, [esp+97Ch+arg_C]
.text:00413F2B                 mov     esi, [esp+97Ch+var_950]
.text:00413F2F                 mov     edi, [ecx]
.text:00413F31                 mov     [esp+97Ch+var_900], esi
.text:00413F35                 mov     edx, [ecx+4]
.text:00413F38                 sub     esi, edi
.text:00413F3A                 inc     esi
.text:00413F3B                 mov     ebx, edi
.text:00413F3D                 cmp     esi, edx
.text:00413F3F                 jbe     loc_413FFA
.text:00413F45
.text:00413F45 loc_413F45:                             ; CODE XREF: sub_4115E0+2A14↓j
.text:00413F45                 cmp     edx, 10000h
.text:00413F4B                 mov     ebp, 0Fh
.text:00413F50                 jz      loc_4119F6
.text:00413F56                 mov     esi, [esp+97Ch+arg_C]
.text:00413F5D                 lea     ebp, [edx+edx]
.text:00413F60                 cmp     ebp, 10000h
.text:00413F66                 mov     [esi+4], ebp
.text:00413F69                 jbe     short loc_413F72
.text:00413F6B                 mov     dword ptr [esi+4], 10000h
.text:00413F72
.text:00413F72 loc_413F72:                             ; CODE XREF: sub_4115E0+2989↑j
.text:00413F72                 mov     eax, [esp+97Ch+arg_C]
.text:00413F79                 mov     ebp, 0Ch
.text:00413F7E                 mov     esi, [eax+4]
.text:00413F81                 mov     [esp+97Ch+Size], edi ; Block
.text:00413F84                 mov     [esp+97Ch+var_978], esi ; Size
.text:00413F88                 call    realloc
.text:00413F8D                 mov     edi, [esp+97Ch+arg_C]
.text:00413F94                 test    eax, eax
.text:00413F96                 mov     [edi], eax
.text:00413F98                 jz      loc_4119F6
.text:00413F9E                 cmp     ebx, eax
.text:00413FA0                 jz      short loc_413FD6
.text:00413FA2                 sub     eax, ebx
.text:00413FA4                 mov     ebx, [esp+97Ch+var_908]
.text:00413FA8                 add     [esp+97Ch+var_950], eax
.text:00413FAC                 add     [esp+97Ch+var_904], eax
.text:00413FB0                 test    ebx, ebx
.text:00413FB2                 jz      short loc_413FB8
.text:00413FB4                 add     [esp+97Ch+var_908], eax
.text:00413FB8
.text:00413FB8 loc_413FB8:                             ; CODE XREF: sub_4115E0+29D2↑j
.text:00413FB8                 mov     ecx, [esp+97Ch+var_900]
.text:00413FBC                 test    ecx, ecx
.text:00413FBE                 jz      short loc_413FC4
.text:00413FC0                 add     [esp+97Ch+var_900], eax
.text:00413FC4
.text:00413FC4 loc_413FC4:                             ; CODE XREF: sub_4115E0+29DE↑j
.text:00413FC4                 mov     edx, [esp+97Ch+var_8FC]
.text:00413FCB                 test    edx, edx
.text:00413FCD                 jz      short loc_413FD6
.text:00413FCF                 add     [esp+97Ch+var_8FC], eax
.text:00413FD6
.text:00413FD6 loc_413FD6:                             ; CODE XREF: sub_4115E0+29C0↑j
.text:00413FD6                                         ; sub_4115E0+29ED↑j
.text:00413FD6                 mov     esi, [esp+97Ch+arg_C]
.text:00413FDD                 mov     eax, [esp+97Ch+arg_C]
.text:00413FE4                 mov     ebp, [esp+97Ch+var_950]
.text:00413FE8                 mov     edi, [esi]
.text:00413FEA                 mov     edx, [eax+4]
.text:00413FED                 sub     ebp, edi
.text:00413FEF                 inc     ebp
.text:00413FF0                 mov     ebx, edi
.text:00413FF2                 cmp     ebp, edx
.text:00413FF4                 ja      loc_413F45
.text:00413FFA
.text:00413FFA loc_413FFA:                             ; CODE XREF: sub_4115E0+295F↑j
.text:00413FFA                 mov     edi, [esp+97Ch+var_950]
.text:00413FFE                 mov     byte ptr [edi], 19h
.text:00414001                 jmp     loc_411A0A
.text:00414006 ; ---------------------------------------------------------------------------
.text:00414006
.text:00414006 loc_414006:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00414006                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00414006                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 96
.text:00414011                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00414017
.text:00414017 loc_414017:                             ; CODE XREF: sub_4115E0+2AAD↓j
.text:00414017                                         ; sub_4115E0+2ADA↓j ...
.text:00414017                 mov     eax, [esp+97Ch+arg_C]
.text:0041401E                 mov     ebx, [esp+97Ch+var_950]
.text:00414022                 mov     edi, [eax]
.text:00414024                 mov     edx, [eax+4]
.text:00414027                 sub     ebx, edi
.text:00414029                 inc     ebx
.text:0041402A                 cmp     ebx, edx
.text:0041402C                 jbe     loc_4140CC
.text:00414032                 cmp     edx, 10000h
.text:00414038                 mov     ebp, 0Fh
.text:0041403D                 jz      loc_4119F6
.text:00414043                 lea     esi, [edx+edx]
.text:00414046                 mov     edx, [esp+97Ch+arg_C]
.text:0041404D                 cmp     esi, 10000h
.text:00414053                 mov     [edx+4], esi
.text:00414056                 jbe     short loc_41405F
.text:00414058                 mov     dword ptr [edx+4], 10000h
.text:0041405F
.text:0041405F loc_41405F:                             ; CODE XREF: sub_4115E0+2A76↑j
.text:0041405F                 mov     ebp, [esp+97Ch+arg_C]
.text:00414066                 mov     ebx, [ebp+4]
.text:00414069                 mov     ebp, 0Ch
.text:0041406E                 mov     [esp+97Ch+Size], edi ; Block
.text:00414071                 mov     [esp+97Ch+var_978], ebx ; Size
.text:00414075                 call    realloc
.text:0041407A                 mov     edx, [esp+97Ch+arg_C]
.text:00414081                 test    eax, eax
.text:00414083                 mov     [edx], eax
.text:00414085                 jz      loc_4119F6
.text:0041408B                 cmp     edi, eax
.text:0041408D                 jz      short loc_414017
.text:0041408F                 mov     ecx, [esp+97Ch+var_908]
.text:00414093                 sub     eax, edi
.text:00414095                 add     [esp+97Ch+var_950], eax
.text:00414099                 add     [esp+97Ch+var_904], eax
.text:0041409D                 test    ecx, ecx
.text:0041409F                 jz      short loc_4140A5
.text:004140A1                 add     [esp+97Ch+var_908], eax
.text:004140A5
.text:004140A5 loc_4140A5:                             ; CODE XREF: sub_4115E0+2ABF↑j
.text:004140A5                 mov     edi, [esp+97Ch+var_900]
.text:004140A9                 test    edi, edi
.text:004140AB                 jz      short loc_4140B1
.text:004140AD                 add     [esp+97Ch+var_900], eax
.text:004140B1
.text:004140B1 loc_4140B1:                             ; CODE XREF: sub_4115E0+2ACB↑j
.text:004140B1                 mov     esi, [esp+97Ch+var_8FC]
.text:004140B8                 test    esi, esi
.text:004140BA                 jz      loc_414017
.text:004140C0                 add     [esp+97Ch+var_8FC], eax
.text:004140C7                 jmp     loc_414017
.text:004140CC ; ---------------------------------------------------------------------------
.text:004140CC
.text:004140CC loc_4140CC:                             ; CODE XREF: sub_4115E0+2A4C↑j
.text:004140CC                 mov     edi, [esp+97Ch+var_950]
.text:004140D0                 mov     byte ptr [edi], 0Bh
.text:004140D3                 jmp     loc_411A0A
.text:004140D8 ; ---------------------------------------------------------------------------
.text:004140D8
.text:004140D8 loc_4140D8:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:004140D8                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:004140D8                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 98
.text:004140E3                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004140E9
.text:004140E9 loc_4140E9:                             ; CODE XREF: sub_4115E0+2B7F↓j
.text:004140E9                                         ; sub_4115E0+2BAC↓j ...
.text:004140E9                 mov     eax, [esp+97Ch+arg_C]
.text:004140F0                 mov     ecx, [esp+97Ch+var_950]
.text:004140F4                 mov     edi, [eax]
.text:004140F6                 mov     edx, [eax+4]
.text:004140F9                 sub     ecx, edi
.text:004140FB                 inc     ecx
.text:004140FC                 cmp     ecx, edx
.text:004140FE                 jbe     loc_41419E
.text:00414104                 cmp     edx, 10000h
.text:0041410A                 mov     ebp, 0Fh
.text:0041410F                 jz      loc_4119F6
.text:00414115                 lea     esi, [edx+edx]
.text:00414118                 mov     edx, [esp+97Ch+arg_C]
.text:0041411F                 cmp     esi, 10000h
.text:00414125                 mov     [edx+4], esi
.text:00414128                 jbe     short loc_414131
.text:0041412A                 mov     dword ptr [edx+4], 10000h
.text:00414131
.text:00414131 loc_414131:                             ; CODE XREF: sub_4115E0+2B48↑j
.text:00414131                 mov     edx, [esp+97Ch+arg_C]
.text:00414138                 mov     ebp, 0Ch
.text:0041413D                 mov     ebx, [edx+4]
.text:00414140                 mov     [esp+97Ch+Size], edi ; Block
.text:00414143                 mov     [esp+97Ch+var_978], ebx ; Size
.text:00414147                 call    realloc
.text:0041414C                 mov     ecx, [esp+97Ch+arg_C]
.text:00414153                 test    eax, eax
.text:00414155                 mov     [ecx], eax
.text:00414157                 jz      loc_4119F6
.text:0041415D                 cmp     edi, eax
.text:0041415F                 jz      short loc_4140E9
.text:00414161                 mov     ebp, [esp+97Ch+var_908]
.text:00414165                 sub     eax, edi
.text:00414167                 add     [esp+97Ch+var_950], eax
.text:0041416B                 add     [esp+97Ch+var_904], eax
.text:0041416F                 test    ebp, ebp
.text:00414171                 jz      short loc_414177
.text:00414173                 add     [esp+97Ch+var_908], eax
.text:00414177
.text:00414177 loc_414177:                             ; CODE XREF: sub_4115E0+2B91↑j
.text:00414177                 mov     edi, [esp+97Ch+var_900]
.text:0041417B                 test    edi, edi
.text:0041417D                 jz      short loc_414183
.text:0041417F                 add     [esp+97Ch+var_900], eax
.text:00414183
.text:00414183 loc_414183:                             ; CODE XREF: sub_4115E0+2B9D↑j
.text:00414183                 mov     esi, [esp+97Ch+var_8FC]
.text:0041418A                 test    esi, esi
.text:0041418C                 jz      loc_4140E9
.text:00414192                 add     [esp+97Ch+var_8FC], eax
.text:00414199                 jmp     loc_4140E9
.text:0041419E ; ---------------------------------------------------------------------------
.text:0041419E
.text:0041419E loc_41419E:                             ; CODE XREF: sub_4115E0+2B1E↑j
.text:0041419E                 mov     edi, [esp+97Ch+var_950]
.text:004141A2                 mov     byte ptr [edi], 1Ch
.text:004141A5                 jmp     loc_411A0A
.text:004141AA ; ---------------------------------------------------------------------------
.text:004141AA
.text:004141AA loc_4141AA:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:004141AA                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:004141AA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0041388D case 119
.text:004141B5                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004141BB                 mov     eax, [esp+97Ch+arg_C]
.text:004141C2                 mov     ecx, [esp+97Ch+var_950]
.text:004141C6                 mov     edi, [eax]
.text:004141C8                 mov     [esp+97Ch+var_900], ecx
.text:004141CC                 mov     esi, ecx
.text:004141CE                 mov     edx, [eax+4]
.text:004141D1                 sub     esi, edi
.text:004141D3                 mov     ebx, edi
.text:004141D5                 inc     esi
.text:004141D6                 cmp     esi, edx
.text:004141D8                 jbe     loc_414293
.text:004141DE
.text:004141DE loc_4141DE:                             ; CODE XREF: sub_4115E0+2CAD↓j
.text:004141DE                 cmp     edx, 10000h
.text:004141E4                 mov     ebp, 0Fh
.text:004141E9                 jz      loc_4119F6
.text:004141EF                 mov     esi, [esp+97Ch+arg_C]
.text:004141F6                 lea     ebp, [edx+edx]
.text:004141F9                 cmp     ebp, 10000h
.text:004141FF                 mov     [esi+4], ebp
.text:00414202                 jbe     short loc_41420B
.text:00414204                 mov     dword ptr [esi+4], 10000h
.text:0041420B
.text:0041420B loc_41420B:                             ; CODE XREF: sub_4115E0+2C22↑j
.text:0041420B                 mov     eax, [esp+97Ch+arg_C]
.text:00414212                 mov     ebp, 0Ch
.text:00414217                 mov     esi, [eax+4]
.text:0041421A                 mov     [esp+97Ch+Size], edi ; Block
.text:0041421D                 mov     [esp+97Ch+var_978], esi ; Size
.text:00414221                 call    realloc
.text:00414226                 mov     edx, [esp+97Ch+arg_C]
.text:0041422D                 test    eax, eax
.text:0041422F                 mov     [edx], eax
.text:00414231                 jz      loc_4119F6
.text:00414237                 cmp     ebx, eax
.text:00414239                 jz      short loc_41426F
.text:0041423B                 sub     eax, ebx
.text:0041423D                 mov     ebx, [esp+97Ch+var_908]
.text:00414241                 add     [esp+97Ch+var_950], eax
.text:00414245                 add     [esp+97Ch+var_904], eax
.text:00414249                 test    ebx, ebx
.text:0041424B                 jz      short loc_414251
.text:0041424D                 add     [esp+97Ch+var_908], eax
.text:00414251
.text:00414251 loc_414251:                             ; CODE XREF: sub_4115E0+2C6B↑j
.text:00414251                 mov     edi, [esp+97Ch+var_900]
.text:00414255                 test    edi, edi
.text:00414257                 jz      short loc_41425D
.text:00414259                 add     [esp+97Ch+var_900], eax
.text:0041425D
.text:0041425D loc_41425D:                             ; CODE XREF: sub_4115E0+2C77↑j
.text:0041425D                 mov     ecx, [esp+97Ch+var_8FC]
.text:00414264                 test    ecx, ecx
.text:00414266                 jz      short loc_41426F
.text:00414268                 add     [esp+97Ch+var_8FC], eax
.text:0041426F
.text:0041426F loc_41426F:                             ; CODE XREF: sub_4115E0+2C59↑j
.text:0041426F                                         ; sub_4115E0+2C86↑j
.text:0041426F                 mov     edx, [esp+97Ch+arg_C]
.text:00414276                 mov     eax, [esp+97Ch+arg_C]
.text:0041427D                 mov     ebp, [esp+97Ch+var_950]
.text:00414281                 mov     edi, [edx]
.text:00414283                 mov     edx, [eax+4]
.text:00414286                 sub     ebp, edi
.text:00414288                 inc     ebp
.text:00414289                 mov     ebx, edi
.text:0041428B                 cmp     ebp, edx
.text:0041428D                 ja      loc_4141DE
.text:00414293
.text:00414293 loc_414293:                             ; CODE XREF: sub_4115E0+2BF8↑j
.text:00414293                 mov     edi, [esp+97Ch+var_950]
.text:00414297                 mov     byte ptr [edi], 18h
.text:0041429A                 jmp     loc_411A0A
.text:0041429F ; ---------------------------------------------------------------------------
.text:0041429F
.text:0041429F loc_41429F:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:0041429F                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:0041429F                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 0041388D case 123
.text:004142A6                 and     ebx, 1200h
.text:004142AC                 cmp     ebx, 200h
.text:004142B2                 jnz     def_41388D      ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:004142B8
.text:004142B8 loc_4142B8:                             ; CODE XREF: sub_4115E0+329D↓j
.text:004142B8                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:004142C0                 mov     edi, [esp+97Ch+var_8D0]
.text:004142C7                 cmp     edi, [esp+97Ch+var_8F4]
.text:004142CE                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:004142D6                 mov     ecx, edi
.text:004142D8                 jz      loc_414399
.text:004142DE
.text:004142DE loc_4142DE:                             ; CODE XREF: sub_4115E0+2D74↓j
.text:004142DE                 movzx   eax, byte ptr [edi]
.text:004142E1                 inc     edi
.text:004142E2                 mov     ebp, [esp+97Ch+var_8F8]
.text:004142E9                 mov     [esp+97Ch+var_8D0], edi
.text:004142F0                 test    ebp, ebp
.text:004142F2                 mov     [esp+97Ch+var_8EC], al
.text:004142F9                 jz      short loc_414310
.text:004142FB                 mov     ebp, [esp+97Ch+var_8F8]
.text:00414302                 movzx   esi, al
.text:00414305                 movzx   ebx, byte ptr [esi+ebp]
.text:00414309                 mov     [esp+97Ch+var_8EC], bl
.text:00414310
.text:00414310 loc_414310:                             ; CODE XREF: sub_4115E0+2D19↑j
.text:00414310                 movzx   edx, [esp+97Ch+var_8EC]
.text:00414318                 sub     dl, 30h ; '0'
.text:0041431B                 cmp     dl, 9
.text:0041431E                 ja      short loc_414356
.text:00414320                 cmp     [esp+97Ch+var_934], 7FFFh
.text:00414328                 jg      short loc_41434D
.text:0041432A                 movzx   ebp, [esp+97Ch+var_8EC]
.text:00414332                 mov     edx, [esp+97Ch+var_934]
.text:00414336                 shr     edx, 1Fh
.text:00414339                 dec     edx
.text:0041433A                 and     [esp+97Ch+var_934], edx
.text:0041433E                 mov     eax, [esp+97Ch+var_934]
.text:00414342                 lea     esi, [eax+eax*4]
.text:00414345                 lea     ebx, [ebp+esi*2-30h]
.text:00414349                 mov     [esp+97Ch+var_934], ebx
.text:0041434D
.text:0041434D loc_41434D:                             ; CODE XREF: sub_4115E0+2D48↑j
.text:0041434D                 cmp     edi, [esp+97Ch+var_8F4]
.text:00414354                 jnz     short loc_4142DE
.text:00414356
.text:00414356 loc_414356:                             ; CODE XREF: sub_4115E0+2D3E↑j
.text:00414356                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:0041435E                 jz      loc_4147A4
.text:00414364                 mov     ebx, [esp+97Ch+var_934]
.text:00414368                 mov     [esp+97Ch+var_938], ebx
.text:0041436C
.text:0041436C loc_41436C:                             ; CODE XREF: sub_4115E0+3256↓j
.text:0041436C                                         ; sub_4115E0+3264↓j
.text:0041436C                 mov     esi, [esp+97Ch+var_934]
.text:00414370                 test    esi, esi
.text:00414372                 js      short loc_414399
.text:00414374                 mov     ebp, [esp+97Ch+var_938]
.text:00414378                 cmp     [esp+97Ch+var_934], ebp
.text:0041437C                 jg      short loc_414399
.text:0041437E                 test    [esp+97Ch+arg_8], 1000h
.text:00414389                 jnz     loc_41443A
.text:0041438F                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00414397                 jz      short loc_4143F6
.text:00414399
.text:00414399 loc_414399:                             ; CODE XREF: sub_4115E0+2CF8↑j
.text:00414399                                         ; sub_4115E0+2D92↑j ...
.text:00414399                 test    [esp+97Ch+arg_8], 200000h
.text:004143A4                 jz      short loc_4143CB
.text:004143A6
.text:004143A6 loc_4143A6:                             ; CODE XREF: sub_4115E0+31B1↓j
.text:004143A6                 test    [esp+97Ch+arg_8], 1000h
.text:004143B1                 mov     [esp+97Ch+var_8D0], ecx
.text:004143B8                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:004143C0                 jz      def_41388D      ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:004143C6                 jmp     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004143CB ; ---------------------------------------------------------------------------
.text:004143CB
.text:004143CB loc_4143CB:                             ; CODE XREF: sub_4115E0+2DC4↑j
.text:004143CB                 mov     edi, [esp+97Ch+Block]
.text:004143D2                 mov     [esp+97Ch+Size], edi ; Block
.text:004143D5                 call    free
.text:004143DA                 mov     ebp, [esp+97Ch+var_8F4]
.text:004143E1                 cmp     [esp+97Ch+var_8D0], ebp
.text:004143E8                 setnz   cl
.text:004143EB                 movzx   ebx, cl
.text:004143EE                 lea     ebp, [ebx+9]
.text:004143F1                 jmp     loc_4119F6
.text:004143F6 ; ---------------------------------------------------------------------------
.text:004143F6
.text:004143F6 loc_4143F6:                             ; CODE XREF: sub_4115E0+2DB7↑j
.text:004143F6                 mov     eax, [esp+97Ch+var_8D0]
.text:004143FD                 cmp     eax, [esp+97Ch+var_8F4]
.text:00414404                 jz      short loc_414399
.text:00414406                 movzx   edx, byte ptr [eax]
.text:00414409                 lea     ebx, [eax+1]
.text:0041440C                 mov     eax, [esp+97Ch+var_8F8]
.text:00414413                 mov     [esp+97Ch+var_8D0], ebx
.text:0041441A                 test    eax, eax
.text:0041441C                 mov     [esp+97Ch+var_8EC], dl
.text:00414423                 jz      short loc_41443A
.text:00414425                 mov     esi, [esp+97Ch+var_8F8]
.text:0041442C                 movzx   edi, dl
.text:0041442F                 movzx   edx, byte ptr [edi+esi]
.text:00414433                 mov     [esp+97Ch+var_8EC], dl
.text:0041443A
.text:0041443A loc_41443A:                             ; CODE XREF: sub_4115E0+2DA9↑j
.text:0041443A                                         ; sub_4115E0+2E43↑j
.text:0041443A                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:00414442                 jnz     loc_414399
.text:00414448                 mov     ebp, [esp+97Ch+var_900]
.text:0041444C                 test    ebp, ebp
.text:0041444E                 jz      loc_414773
.text:00414454
.text:00414454 loc_414454:                             ; CODE XREF: sub_4115E0+31BF↓j
.text:00414454                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0041445C                 jg      loc_414762
.text:00414462                 mov     eax, [esp+97Ch+var_938]
.text:00414466                 test    eax, eax
.text:00414468                 jnz     loc_41457F
.text:0041446E                 mov     edx, [esp+97Ch+arg_C]
.text:00414475                 mov     ebp, [esp+97Ch+arg_C]
.text:0041447C                 mov     esi, [esp+97Ch+var_950]
.text:00414480                 mov     edi, [edx]
.text:00414482                 mov     edx, [ebp+4]
.text:00414485                 sub     esi, edi
.text:00414487                 add     esi, 3
.text:0041448A                 mov     ebx, edi
.text:0041448C                 cmp     esi, edx
.text:0041448E                 jbe     loc_41454B
.text:00414494
.text:00414494 loc_414494:                             ; CODE XREF: sub_4115E0+2F65↓j
.text:00414494                 cmp     edx, 10000h
.text:0041449A                 mov     ebp, 0Fh
.text:0041449F                 jz      loc_4119F6
.text:004144A5                 mov     esi, [esp+97Ch+arg_C]
.text:004144AC                 lea     ecx, [edx+edx]
.text:004144AF                 cmp     ecx, 10000h
.text:004144B5                 mov     [esi+4], ecx
.text:004144B8                 jbe     short loc_4144C1
.text:004144BA                 mov     dword ptr [esi+4], 10000h
.text:004144C1
.text:004144C1 loc_4144C1:                             ; CODE XREF: sub_4115E0+2ED8↑j
.text:004144C1                 mov     eax, [esp+97Ch+arg_C]
.text:004144C8                 mov     ebp, 0Ch
.text:004144CD                 mov     esi, [eax+4]
.text:004144D0                 mov     [esp+97Ch+Size], edi ; Block
.text:004144D3                 mov     [esp+97Ch+var_978], esi ; Size
.text:004144D7                 call    realloc
.text:004144DC                 mov     edi, [esp+97Ch+arg_C]
.text:004144E3                 test    eax, eax
.text:004144E5                 mov     [edi], eax
.text:004144E7                 jz      loc_4119F6
.text:004144ED                 cmp     ebx, eax
.text:004144EF                 jz      short loc_414525
.text:004144F1                 sub     eax, ebx
.text:004144F3                 mov     ebx, [esp+97Ch+var_908]
.text:004144F7                 add     [esp+97Ch+var_950], eax
.text:004144FB                 add     [esp+97Ch+var_904], eax
.text:004144FF                 test    ebx, ebx
.text:00414501                 jz      short loc_414507
.text:00414503                 add     [esp+97Ch+var_908], eax
.text:00414507
.text:00414507 loc_414507:                             ; CODE XREF: sub_4115E0+2F21↑j
.text:00414507                 mov     edx, [esp+97Ch+var_900]
.text:0041450B                 test    edx, edx
.text:0041450D                 jz      short loc_414513
.text:0041450F                 add     [esp+97Ch+var_900], eax
.text:00414513
.text:00414513 loc_414513:                             ; CODE XREF: sub_4115E0+2F2D↑j
.text:00414513                 mov     ebp, [esp+97Ch+var_8FC]
.text:0041451A                 test    ebp, ebp
.text:0041451C                 jz      short loc_414525
.text:0041451E                 add     [esp+97Ch+var_8FC], eax
.text:00414525
.text:00414525 loc_414525:                             ; CODE XREF: sub_4115E0+2F0F↑j
.text:00414525                                         ; sub_4115E0+2F3C↑j
.text:00414525                 mov     esi, [esp+97Ch+arg_C]
.text:0041452C                 mov     eax, [esp+97Ch+arg_C]
.text:00414533                 mov     ecx, [esp+97Ch+var_950]
.text:00414537                 mov     edi, [esi]
.text:00414539                 mov     edx, [eax+4]
.text:0041453C                 sub     ecx, edi
.text:0041453E                 add     ecx, 3
.text:00414541                 mov     ebx, edi
.text:00414543                 cmp     ecx, edx
.text:00414545                 ja      loc_414494
.text:0041454B
.text:0041454B loc_41454B:                             ; CODE XREF: sub_4115E0+2EAE↑j
.text:0041454B                 mov     [esp+97Ch+Size], 0Dh
.text:00414552                 mov     ebx, [esp+97Ch+var_950]
.text:00414556                 mov     ebp, [esp+97Ch+var_900]
.text:0041455A                 mov     edi, [esp+97Ch+var_900]
.text:0041455E                 mov     edx, ebx
.text:00414560                 sub     edx, ebp
.text:00414562                 mov     [esp+97Ch+var_970], ebx
.text:00414566                 add     ebx, 3
.text:00414569                 mov     [esp+97Ch+var_974], edx
.text:0041456D                 mov     [esp+97Ch+var_978], edi
.text:00414571                 call    sub_40E400
.text:00414576                 mov     [esp+97Ch+var_950], ebx
.text:0041457A                 jmp     loc_412328
.text:0041457F ; ---------------------------------------------------------------------------
.text:0041457F
.text:0041457F loc_41457F:                             ; CODE XREF: sub_4115E0+2E88↑j
.text:0041457F                 cmp     [esp+97Ch+var_938], 1
.text:00414584                 mov     [esp+97Ch+var_93C], 14h
.text:0041458C                 jg      loc_41464A
.text:00414592                 mov     [esp+97Ch+var_93C], 0Ah
.text:0041459A                 mov     ecx, [esp+97Ch+arg_C]
.text:004145A1                 mov     eax, [esp+97Ch+var_950]
.text:004145A5                 mov     edi, [ecx]
.text:004145A7                 mov     edx, [ecx+4]
.text:004145AA                 sub     eax, edi
.text:004145AC                 mov     ebx, edi
.text:004145AE                 add     eax, 0Ah
.text:004145B1
.text:004145B1 loc_4145B1:                             ; CODE XREF: sub_4115E0+308B↓j
.text:004145B1                 cmp     eax, edx
.text:004145B3                 jbe     loc_414670
.text:004145B9                 cmp     edx, 10000h
.text:004145BF                 mov     ebp, 0Fh
.text:004145C4                 jz      loc_4119F6
.text:004145CA                 mov     esi, [esp+97Ch+arg_C]
.text:004145D1                 lea     ebp, [edx+edx]
.text:004145D4                 cmp     ebp, 10000h
.text:004145DA                 mov     [esi+4], ebp
.text:004145DD                 jbe     short loc_4145E6
.text:004145DF                 mov     dword ptr [esi+4], 10000h
.text:004145E6
.text:004145E6 loc_4145E6:                             ; CODE XREF: sub_4115E0+2FFD↑j
.text:004145E6                 mov     eax, [esp+97Ch+arg_C]
.text:004145ED                 mov     ebp, 0Ch
.text:004145F2                 mov     esi, [eax+4]
.text:004145F5                 mov     [esp+97Ch+Size], edi ; Block
.text:004145F8                 mov     [esp+97Ch+var_978], esi ; Size
.text:004145FC                 call    realloc
.text:00414601                 mov     edi, [esp+97Ch+arg_C]
.text:00414608                 test    eax, eax
.text:0041460A                 mov     [edi], eax
.text:0041460C                 jz      loc_4119F6
.text:00414612                 cmp     ebx, eax
.text:00414614                 jz      short loc_41464A
.text:00414616                 mov     edx, [esp+97Ch+var_908]
.text:0041461A                 sub     eax, ebx
.text:0041461C                 add     [esp+97Ch+var_950], eax
.text:00414620                 add     [esp+97Ch+var_904], eax
.text:00414624                 test    edx, edx
.text:00414626                 jz      short loc_41462C
.text:00414628                 add     [esp+97Ch+var_908], eax
.text:0041462C
.text:0041462C loc_41462C:                             ; CODE XREF: sub_4115E0+3046↑j
.text:0041462C                 mov     ebx, [esp+97Ch+var_900]
.text:00414630                 test    ebx, ebx
.text:00414632                 jz      short loc_414638
.text:00414634                 add     [esp+97Ch+var_900], eax
.text:00414638
.text:00414638 loc_414638:                             ; CODE XREF: sub_4115E0+3052↑j
.text:00414638                 mov     ecx, [esp+97Ch+var_8FC]
.text:0041463F                 test    ecx, ecx
.text:00414641                 jz      short loc_41464A
.text:00414643                 add     [esp+97Ch+var_8FC], eax
.text:0041464A
.text:0041464A loc_41464A:                             ; CODE XREF: sub_4115E0+2FAC↑j
.text:0041464A                                         ; sub_4115E0+3034↑j ...
.text:0041464A                 mov     eax, [esp+97Ch+arg_C]
.text:00414651                 mov     ebp, [esp+97Ch+arg_C]
.text:00414658                 mov     esi, [esp+97Ch+var_93C]
.text:0041465C                 mov     edi, [eax]
.text:0041465E                 mov     eax, [esp+97Ch+var_950]
.text:00414662                 mov     edx, [ebp+4]
.text:00414665                 mov     ebx, edi
.text:00414667                 sub     eax, edi
.text:00414669                 add     eax, esi
.text:0041466B                 jmp     loc_4145B1
.text:00414670 ; ---------------------------------------------------------------------------
.text:00414670
.text:00414670 loc_414670:                             ; CODE XREF: sub_4115E0+2FD3↑j
.text:00414670                 mov     edi, [esp+97Ch+var_950]
.text:00414674                 mov     edx, [esp+97Ch+var_934]
.text:00414678                 mov     [esp+97Ch+var_96C], edi
.text:0041467C                 add     edi, 5
.text:0041467F                 cmp     [esp+97Ch+var_938], 1
.text:00414684                 mov     [esp+97Ch+var_970], edx
.text:00414688                 jle     loc_414752
.text:0041468E                 mov     ebx, [esp+97Ch+var_900]
.text:00414692                 mov     eax, edi
.text:00414694                 sub     eax, ebx
.text:00414696                 add     eax, 2
.text:00414699
.text:00414699 loc_414699:                             ; CODE XREF: sub_4115E0+317D↓j
.text:00414699                 mov     [esp+97Ch+var_974], eax
.text:0041469D                 mov     esi, [esp+97Ch+var_900]
.text:004146A1                 mov     [esp+97Ch+Size], 15h
.text:004146A8                 mov     [esp+97Ch+var_978], esi
.text:004146AC                 call    sub_40E440
.text:004146B1                 mov     [esp+97Ch+var_950], edi
.text:004146B5                 mov     ebp, [esp+97Ch+var_934]
.text:004146B9                 mov     [esp+97Ch+var_96C], edi
.text:004146BD                 mov     edi, [esp+97Ch+var_900]
.text:004146C1                 mov     [esp+97Ch+var_970], ebp
.text:004146C5                 mov     [esp+97Ch+var_974], 5
.text:004146CD                 mov     [esp+97Ch+var_978], edi
.text:004146D1                 mov     [esp+97Ch+Size], 17h
.text:004146D8                 call    sub_40E440
.text:004146DD                 add     [esp+97Ch+var_950], 5
.text:004146E2                 cmp     [esp+97Ch+var_938], 1
.text:004146E7                 jle     loc_412328
.text:004146ED                 mov     [esp+97Ch+Size], 16h
.text:004146F4                 mov     edx, [esp+97Ch+var_900]
.text:004146F8                 mov     esi, [esp+97Ch+var_950]
.text:004146FC                 mov     edi, [esp+97Ch+var_938]
.text:00414700                 mov     ebp, [esp+97Ch+var_950]
.text:00414704                 sub     edx, esi
.text:00414706                 add     edx, 2
.text:00414709                 dec     edi
.text:0041470A                 mov     [esp+97Ch+var_974], edx
.text:0041470E                 mov     [esp+97Ch+var_978], ebp
.text:00414712                 add     ebp, 5
.text:00414715                 mov     ebx, ebp
.text:00414717                 mov     [esp+97Ch+var_970], edi
.text:0041471B                 call    sub_40E3D0
.text:00414720                 mov     [esp+97Ch+var_96C], ebp
.text:00414724                 mov     ecx, [esp+97Ch+var_900]
.text:00414728                 add     ebp, 5
.text:0041472B                 mov     [esp+97Ch+var_970], edi
.text:0041472F                 mov     eax, [esp+97Ch+var_900]
.text:00414733                 mov     [esp+97Ch+Size], 17h
.text:0041473A                 sub     ebx, ecx
.text:0041473C                 mov     [esp+97Ch+var_974], ebx
.text:00414740                 mov     [esp+97Ch+var_978], eax
.text:00414744                 call    sub_40E440
.text:00414749                 mov     [esp+97Ch+var_950], ebp
.text:0041474D                 jmp     loc_412328
.text:00414752 ; ---------------------------------------------------------------------------
.text:00414752
.text:00414752 loc_414752:                             ; CODE XREF: sub_4115E0+30A8↑j
.text:00414752                 mov     ecx, [esp+97Ch+var_900]
.text:00414756                 mov     eax, edi
.text:00414758                 sub     eax, ecx
.text:0041475A                 sub     eax, 3
.text:0041475D                 jmp     loc_414699
.text:00414762 ; ---------------------------------------------------------------------------
.text:00414762
.text:00414762 loc_414762:                             ; CODE XREF: sub_4115E0+2E7C↑j
.text:00414762                 mov     esi, [esp+97Ch+Block]
.text:00414769                 mov     ebp, 0Ah
.text:0041476E                 jmp     loc_4136E3
.text:00414773 ; ---------------------------------------------------------------------------
.text:00414773
.text:00414773 loc_414773:                             ; CODE XREF: sub_4115E0+2E6E↑j
.text:00414773                 mov     ebx, [esp+97Ch+arg_8]
.text:0041477A                 and     ebx, 200020h
.text:00414780                 cmp     ebx, 20h ; ' '
.text:00414783                 jz      loc_412BBE
.text:00414789                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:00414791                 jz      loc_4143A6
.text:00414797                 mov     ecx, [esp+97Ch+var_950]
.text:0041479B                 mov     [esp+97Ch+var_900], ecx
.text:0041479F                 jmp     loc_414454
.text:004147A4 ; ---------------------------------------------------------------------------
.text:004147A4
.text:004147A4 loc_4147A4:                             ; CODE XREF: sub_4115E0+2D7E↑j
.text:004147A4                 mov     edi, [esp+97Ch+var_8D0]
.text:004147AB                 cmp     edi, [esp+97Ch+var_8F4]
.text:004147B2                 jz      loc_41483C
.text:004147B8
.text:004147B8 loc_4147B8:                             ; CODE XREF: sub_4115E0+324E↓j
.text:004147B8                 movzx   eax, byte ptr [edi]
.text:004147BB                 inc     edi
.text:004147BC                 mov     ebx, [esp+97Ch+var_8F8]
.text:004147C3                 mov     [esp+97Ch+var_8D0], edi
.text:004147CA                 test    ebx, ebx
.text:004147CC                 mov     [esp+97Ch+var_8EC], al
.text:004147D3                 jz      short loc_4147EA
.text:004147D5                 mov     ebp, [esp+97Ch+var_8F8]
.text:004147DC                 movzx   esi, al
.text:004147DF                 movzx   ebx, byte ptr [esi+ebp]
.text:004147E3                 mov     [esp+97Ch+var_8EC], bl
.text:004147EA
.text:004147EA loc_4147EA:                             ; CODE XREF: sub_4115E0+31F3↑j
.text:004147EA                 movzx   edx, [esp+97Ch+var_8EC]
.text:004147F2                 sub     dl, 30h ; '0'
.text:004147F5                 cmp     dl, 9
.text:004147F8                 ja      short loc_414830
.text:004147FA                 cmp     [esp+97Ch+var_938], 7FFFh
.text:00414802                 jg      short loc_414827
.text:00414804                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0041480C                 mov     edx, [esp+97Ch+var_938]
.text:00414810                 shr     edx, 1Fh
.text:00414813                 dec     edx
.text:00414814                 and     [esp+97Ch+var_938], edx
.text:00414818                 mov     eax, [esp+97Ch+var_938]
.text:0041481C                 lea     esi, [eax+eax*4]
.text:0041481F                 lea     ebx, [ebp+esi*2-30h]
.text:00414823                 mov     [esp+97Ch+var_938], ebx
.text:00414827
.text:00414827 loc_414827:                             ; CODE XREF: sub_4115E0+3222↑j
.text:00414827                 cmp     edi, [esp+97Ch+var_8F4]
.text:0041482E                 jnz     short loc_4147B8
.text:00414830
.text:00414830 loc_414830:                             ; CODE XREF: sub_4115E0+3218↑j
.text:00414830                 mov     edi, [esp+97Ch+var_938]
.text:00414834                 test    edi, edi
.text:00414836                 jns     loc_41436C
.text:0041483C
.text:0041483C loc_41483C:                             ; CODE XREF: sub_4115E0+31D2↑j
.text:0041483C                 mov     [esp+97Ch+var_938], 7FFFh
.text:00414844                 jmp     loc_41436C
.text:00414849 ; ---------------------------------------------------------------------------
.text:00414849
.text:00414849 loc_414849:                             ; CODE XREF: sub_4115E0+22AD↑j
.text:00414849                                         ; DATA XREF: sub_4115E0:jpt_41388D↑o
.text:00414849                 mov     edi, [esp+97Ch+arg_8] ; jumptable 0041388D case 124
.text:00414850                 and     edi, 0FFFF8400h
.text:00414856                 test    di, di
.text:00414859                 jz      loc_411E56
.text:0041485F                 jmp     def_41388D      ; jumptable 0041388D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00414864 ; ---------------------------------------------------------------------------
.text:00414864
.text:00414864 loc_414864:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00414864                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00414864                 mov     edx, [esp+97Ch+arg_8] ; jumptable 0041174F case 123
.text:0041486B                 and     edx, 1200h
.text:00414871                 cmp     edx, 1200h
.text:00414877                 jnz     def_41174F      ; jumptable 0041174F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041487D                 jmp     loc_4142B8
.text:00414882 ; ---------------------------------------------------------------------------
.text:00414882
.text:00414882 loc_414882:                             ; CODE XREF: sub_4115E0+16F↑j
.text:00414882                                         ; DATA XREF: sub_4115E0:jpt_41174F↑o
.text:00414882                 mov     esi, [esp+97Ch+arg_8] ; jumptable 0041174F case 124
.text:00414889                 and     esi, 0FFFF8000h
.text:0041488F                 test    si, si
.text:00414892                 jmp     loc_411E50
.text:00414897 ; ---------------------------------------------------------------------------
.text:00414897
.text:00414897 loc_414897:                             ; CODE XREF: sub_4115E0+F9↑j
.text:00414897                 mov     edi, [esp+97Ch+Block]
.text:0041489E                 mov     ebp, 0Ch
.text:004148A3                 jmp     loc_411B80
.text:004148A8 ; ---------------------------------------------------------------------------
.text:004148A8
.text:004148A8 loc_4148A8:                             ; CODE XREF: sub_4115E0+D6↑j
.text:004148A8                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:004148AF                 call    malloc
.text:004148B4                 mov     ecx, [esp+97Ch+arg_C]
.text:004148BB                 mov     [ecx], eax
.text:004148BD                 jmp     loc_4116CE
.text:004148C2 ; ---------------------------------------------------------------------------
.text:004148C2
.text:004148C2 loc_4148C2:                             ; CODE XREF: sub_4115E0+CC↑j
.text:004148C2                 mov     ebp, [esp+97Ch+arg_C]
.text:004148C9                 mov     edi, [ebp+0]
.text:004148CC                 jmp     loc_4116ED
.text:004148D1 ; ---------------------------------------------------------------------------
.text:004148D1
.text:004148D1 loc_4148D1:                             ; CODE XREF: sub_4115E0+BA↑j
.text:004148D1                 mov     [esp+97Ch+var_974], 100h ; Size
.text:004148D9                 xor     ebx, ebx
.text:004148DB                 mov     [esp+97Ch+var_978], 0 ; Val
.text:004148E3                 mov     [esp+97Ch+Size], offset byte_421290 ; void *
.text:004148EA                 call    memset
.text:004148EF                 nop
.text:004148F0
.text:004148F0 loc_4148F0:                             ; CODE XREF: sub_4115E0+333D↓j
.text:004148F0                 mov     esi, ds:__mb_cur_max
.text:004148F6                 cmp     dword ptr [esi], 1
.text:004148F9                 jz      short loc_414936
.text:004148FB                 mov     [esp+97Ch+var_978], 107h ; Type
.text:00414903                 mov     [esp+97Ch+Size], ebx ; C
.text:00414906                 call    _isctype
.text:0041490B
.text:0041490B loc_41490B:                             ; CODE XREF: sub_4115E0+3368↓j
.text:0041490B                 test    eax, eax
.text:0041490D                 jz      short loc_414916
.text:0041490F                 mov     ds:byte_421290[ebx], 1
.text:00414916
.text:00414916 loc_414916:                             ; CODE XREF: sub_4115E0+332D↑j
.text:00414916                 inc     ebx
.text:00414917                 cmp     ebx, 0FFh
.text:0041491D                 jle     short loc_4148F0
.text:0041491F                 mov     ds:byte_4212EF, 1
.text:00414926                 mov     ebx, 1
.text:0041492B                 mov     ds:dword_421280, ebx
.text:00414931                 jmp     loc_4116A0
.text:00414936 ; ---------------------------------------------------------------------------
.text:00414936
.text:00414936 loc_414936:                             ; CODE XREF: sub_4115E0+3319↑j
.text:00414936                 mov     ebp, ds:_pctype
.text:0041493C                 mov     edi, [ebp+0]
.text:0041493F                 movzx   eax, word ptr [edi+ebx*2]
.text:00414943                 and     eax, 107h
.text:00414948                 jmp     short loc_41490B
.text:00414948 sub_4115E0      endp
.text:00414948
.text:00414948 ; ---------------------------------------------------------------------------
.text:0041494A                 align 10h
.text:00414950
.text:00414950 ; =============== S U B R O U T I N E =======================================
.text:00414950
.text:00414950
.text:00414950 sub_414950      proc near               ; CODE XREF: sub_411190+105↑p
.text:00414950                                         ; .text:004113D6↑p ...
.text:00414950
.text:00414950 var_4C          = dword ptr -4Ch
.text:00414950 var_48          = dword ptr -48h
.text:00414950 var_44          = dword ptr -44h
.text:00414950 var_40          = dword ptr -40h
.text:00414950 var_3C          = dword ptr -3Ch
.text:00414950 var_38          = dword ptr -38h
.text:00414950 var_34          = dword ptr -34h
.text:00414950 var_30          = dword ptr -30h
.text:00414950 var_20          = dword ptr -20h
.text:00414950 var_1C          = dword ptr -1Ch
.text:00414950 var_18          = dword ptr -18h
.text:00414950 var_14          = dword ptr -14h
.text:00414950 arg_0           = dword ptr  4
.text:00414950 arg_4           = dword ptr  8
.text:00414950 arg_8           = dword ptr  0Ch
.text:00414950 arg_C           = dword ptr  10h
.text:00414950 arg_10          = dword ptr  14h
.text:00414950 arg_14          = dword ptr  18h
.text:00414950 arg_18          = dword ptr  1Ch
.text:00414950 arg_1C          = dword ptr  20h
.text:00414950 arg_20          = dword ptr  24h
.text:00414950
.text:00414950                 push    ebp
.text:00414951                 push    edi
.text:00414952                 push    esi
.text:00414953                 push    ebx
.text:00414954                 sub     esp, 3Ch
.text:00414957                 mov     edi, [esp+4Ch+arg_0]
.text:0041495B                 mov     ebx, [esp+4Ch+arg_14]
.text:0041495F                 mov     ecx, [esp+4Ch+arg_10]
.text:00414963                 mov     edx, [edi+14h]
.text:00414966                 mov     esi, [esp+4Ch+arg_18]
.text:0041496A                 mov     ebp, [edi+10h]
.text:0041496D                 mov     [esp+4Ch+var_14], edx
.text:00414971                 mov     edx, [esp+4Ch+arg_8]
.text:00414975                 lea     eax, [esi+ebx]
.text:00414978                 add     edx, ecx
.text:0041497A                 test    ebx, ebx
.text:0041497C                 mov     [esp+4Ch+var_18], edx
.text:00414980                 js      loc_414B20
.text:00414986                 cmp     ebx, edx
.text:00414988                 jg      loc_414B20
.text:0041498E                 test    eax, eax
.text:00414990                 js      loc_414BE1
.text:00414996                 cmp     eax, [esp+4Ch+var_18]
.text:0041499A                 jle     short loc_4149A2
.text:0041499C                 mov     esi, [esp+4Ch+var_18]
.text:004149A0                 sub     esi, ebx
.text:004149A2
.text:004149A2 loc_4149A2:                             ; CODE XREF: sub_414950+4A↑j
.text:004149A2                                         ; sub_414950+295↓j
.text:004149A2                 mov     eax, [edi+8]
.text:004149A5                 test    eax, eax
.text:004149A7                 jz      short loc_4149D0
.text:004149A9                 test    esi, esi
.text:004149AB                 jle     short loc_4149D0
.text:004149AD                 mov     ecx, [edi]
.text:004149AF                 movzx   eax, byte ptr [ecx]
.text:004149B2                 cmp     al, 0Bh
.text:004149B4                 jz      loc_414BCA
.text:004149BA                 cmp     al, 9
.text:004149BC                 jz      loc_414BC0
.text:004149C2                 lea     esi, [esi+0]
.text:004149C9                 lea     edi, [edi+0]
.text:004149D0
.text:004149D0 loc_4149D0:                             ; CODE XREF: sub_414950+57↑j
.text:004149D0                                         ; sub_414950+5B↑j ...
.text:004149D0                 test    ebp, ebp
.text:004149D2                 jz      loc_414A90
.text:004149D8                 test    byte ptr [edi+1Ch], 8
.text:004149DC                 jz      loc_414BA5
.text:004149E2
.text:004149E2 loc_4149E2:                             ; CODE XREF: sub_414950+1AF↓j
.text:004149E2                                         ; sub_414950+1B6↓j ...
.text:004149E2                 test    ebp, ebp
.text:004149E4                 jz      loc_414A90
.text:004149EA                 cmp     ebx, [esp+4Ch+var_18]
.text:004149EE                 jge     loc_414A90
.text:004149F4                 test    byte ptr [edi+1Ch], 1
.text:004149F8                 jnz     loc_414A90
.text:004149FE                 test    esi, esi
.text:00414A00                 jle     loc_414B54
.text:00414A06                 cmp     ebx, [esp+4Ch+arg_8]
.text:00414A0A                 mov     [esp+4Ch+var_20], 0
.text:00414A12                 mov     [esp+4Ch+var_1C], esi
.text:00414A16                 jge     loc_414B42
.text:00414A1C                 lea     edx, [esi+ebx]
.text:00414A1F                 cmp     edx, [esp+4Ch+arg_8]
.text:00414A23                 jl      short loc_414A33
.text:00414A25                 mov     ecx, [esp+4Ch+arg_8]
.text:00414A29                 mov     edx, esi
.text:00414A2B                 sub     ecx, ebx
.text:00414A2D                 sub     edx, ecx
.text:00414A2F                 mov     [esp+4Ch+var_20], edx
.text:00414A33
.text:00414A33 loc_414A33:                             ; CODE XREF: sub_414950+D3↑j
.text:00414A33                 mov     edx, [esp+4Ch+arg_4]
.text:00414A37                 add     edx, ebx
.text:00414A39
.text:00414A39 loc_414A39:                             ; CODE XREF: sub_414950+1FF↓j
.text:00414A39                 mov     ecx, [esp+4Ch+var_14]
.text:00414A3D                 test    ecx, ecx
.text:00414A3F                 jz      loc_414B27
.text:00414A45                 cmp     esi, [esp+4Ch+var_20]
.text:00414A49                 jle     short loc_414A79
.text:00414A4B                 movzx   eax, byte ptr [edx]
.text:00414A4E                 inc     edx
.text:00414A4F                 mov     ecx, [esp+4Ch+var_14]
.text:00414A53                 movzx   ecx, byte ptr [eax+ecx]
.text:00414A57                 cmp     byte ptr [ecx+ebp], 0
.text:00414A5B                 jnz     short loc_414A79
.text:00414A5D                 lea     esi, [esi+0]
.text:00414A60
.text:00414A60 loc_414A60:                             ; CODE XREF: sub_414950+127↓j
.text:00414A60                 dec     esi
.text:00414A61                 cmp     esi, [esp+4Ch+var_20]
.text:00414A65                 jle     short loc_414A79
.text:00414A67                 movzx   eax, byte ptr [edx]
.text:00414A6A                 inc     edx
.text:00414A6B                 mov     ecx, [esp+4Ch+var_14]
.text:00414A6F                 movzx   eax, byte ptr [eax+ecx]
.text:00414A73                 cmp     byte ptr [eax+ebp], 0
.text:00414A77                 jz      short loc_414A60
.text:00414A79
.text:00414A79 loc_414A79:                             ; CODE XREF: sub_414950+F9↑j
.text:00414A79                                         ; sub_414950+10B↑j ...
.text:00414A79                 sub     [esp+4Ch+var_1C], esi
.text:00414A7D                 mov     edx, [esp+4Ch+var_1C]
.text:00414A81                 add     ebx, edx
.text:00414A83                 lea     esi, [esi+0]
.text:00414A89                 lea     edi, [edi+0]
.text:00414A90
.text:00414A90 loc_414A90:                             ; CODE XREF: sub_414950+82↑j
.text:00414A90                                         ; sub_414950+94↑j ...
.text:00414A90                 test    esi, esi
.text:00414A92                 js      short loc_414A9A
.text:00414A94                 cmp     ebx, [esp+4Ch+var_18]
.text:00414A98                 jz      short loc_414B10
.text:00414A9A
.text:00414A9A loc_414A9A:                             ; CODE XREF: sub_414950+142↑j
.text:00414A9A                                         ; sub_414950+1C2↓j ...
.text:00414A9A                 mov     [esp+4Ch+var_38], ebx
.text:00414A9E                 mov     edx, [esp+4Ch+arg_20]
.text:00414AA2                 mov     ecx, [esp+4Ch+arg_1C]
.text:00414AA6                 mov     [esp+4Ch+var_4C], edi
.text:00414AA9                 mov     eax, [esp+4Ch+arg_10]
.text:00414AAD                 mov     [esp+4Ch+var_30], edx
.text:00414AB1                 mov     edx, [esp+4Ch+arg_C]
.text:00414AB5                 mov     [esp+4Ch+var_34], ecx
.text:00414AB9                 mov     ecx, [esp+4Ch+arg_8]
.text:00414ABD                 mov     [esp+4Ch+var_3C], eax
.text:00414AC1                 mov     eax, [esp+4Ch+arg_4]
.text:00414AC5                 mov     [esp+4Ch+var_40], edx
.text:00414AC9                 mov     [esp+4Ch+var_44], ecx
.text:00414ACD                 mov     [esp+4Ch+var_48], eax
.text:00414AD1                 call    sub_40E6D0
.text:00414AD6                 test    eax, eax
.text:00414AD8                 mov     edx, ebx
.text:00414ADA                 js      short loc_414AE6
.text:00414ADC
.text:00414ADC loc_414ADC:                             ; CODE XREF: sub_414950+19E↓j
.text:00414ADC                                         ; sub_414950+1A7↓j ...
.text:00414ADC                 add     esp, 3Ch
.text:00414ADF                 mov     eax, edx
.text:00414AE1                 pop     ebx
.text:00414AE2                 pop     esi
.text:00414AE3                 pop     edi
.text:00414AE4                 pop     ebp
.text:00414AE5                 retn
.text:00414AE6 ; ---------------------------------------------------------------------------
.text:00414AE6
.text:00414AE6 loc_414AE6:                             ; CODE XREF: sub_414950+18A↑j
.text:00414AE6                 cmp     eax, 0FFFFFFFEh
.text:00414AE9                 mov     edx, 0FFFFFFFEh
.text:00414AEE                 jz      short loc_414ADC
.text:00414AF0
.text:00414AF0 loc_414AF0:                             ; CODE XREF: sub_414950+241↓j
.text:00414AF0                 test    esi, esi
.text:00414AF2                 mov     edx, 0FFFFFFFFh
.text:00414AF7                 jz      short loc_414ADC
.text:00414AF9                 test    esi, esi
.text:00414AFB                 jle     short loc_414B04
.text:00414AFD                 dec     esi
.text:00414AFE                 inc     ebx
.text:00414AFF                 jmp     loc_4149E2
.text:00414B04 ; ---------------------------------------------------------------------------
.text:00414B04
.text:00414B04 loc_414B04:                             ; CODE XREF: sub_414950+1AB↑j
.text:00414B04                 inc     esi
.text:00414B05                 dec     ebx
.text:00414B06                 jmp     loc_4149E2
.text:00414B06 ; ---------------------------------------------------------------------------
.text:00414B0B                 align 10h
.text:00414B10
.text:00414B10 loc_414B10:                             ; CODE XREF: sub_414950+148↑j
.text:00414B10                 test    ebp, ebp
.text:00414B12                 jz      short loc_414A9A
.text:00414B14                 test    byte ptr [edi+1Ch], 1
.text:00414B18                 jnz     short loc_414A9A
.text:00414B1A                 lea     esi, [esi+0]
.text:00414B20
.text:00414B20 loc_414B20:                             ; CODE XREF: sub_414950+30↑j
.text:00414B20                                         ; sub_414950+38↑j
.text:00414B20                 mov     edx, 0FFFFFFFFh
.text:00414B25                 jmp     short loc_414ADC
.text:00414B27 ; ---------------------------------------------------------------------------
.text:00414B27
.text:00414B27 loc_414B27:                             ; CODE XREF: sub_414950+EF↑j
.text:00414B27                                         ; sub_414950+1F0↓j
.text:00414B27                 cmp     esi, [esp+4Ch+var_20]
.text:00414B2B                 jle     loc_414A79
.text:00414B31                 movzx   ecx, byte ptr [edx]
.text:00414B34                 inc     edx
.text:00414B35                 cmp     byte ptr [ecx+ebp], 0
.text:00414B39                 jnz     loc_414A79
.text:00414B3F                 dec     esi
.text:00414B40                 jmp     short loc_414B27
.text:00414B42 ; ---------------------------------------------------------------------------
.text:00414B42
.text:00414B42 loc_414B42:                             ; CODE XREF: sub_414950+C6↑j
.text:00414B42                 mov     ecx, [esp+4Ch+arg_C]
.text:00414B46                 mov     eax, [esp+4Ch+arg_8]
.text:00414B4A                 sub     ecx, eax
.text:00414B4C                 lea     edx, [ebx+ecx]
.text:00414B4F                 jmp     loc_414A39
.text:00414B54 ; ---------------------------------------------------------------------------
.text:00414B54
.text:00414B54 loc_414B54:                             ; CODE XREF: sub_414950+B0↑j
.text:00414B54                 mov     ecx, [esp+4Ch+arg_8]
.text:00414B58                 test    ecx, ecx
.text:00414B5A                 jz      short loc_414B62
.text:00414B5C                 cmp     ebx, [esp+4Ch+arg_8]
.text:00414B60                 jl      short loc_414B9B
.text:00414B62
.text:00414B62 loc_414B62:                             ; CODE XREF: sub_414950+20A↑j
.text:00414B62                 mov     edx, [esp+4Ch+arg_8]
.text:00414B66                 mov     eax, ebx
.text:00414B68                 mov     ecx, [esp+4Ch+arg_C]
.text:00414B6C                 sub     eax, edx
.text:00414B6E                 movzx   eax, byte ptr [eax+ecx]
.text:00414B72
.text:00414B72 loc_414B72:                             ; CODE XREF: sub_414950+253↓j
.text:00414B72                 mov     ecx, [esp+4Ch+var_14]
.text:00414B76                 test    ecx, ecx
.text:00414B78                 jz      short loc_414B96
.text:00414B7A                 mov     edx, [esp+4Ch+var_14]
.text:00414B7E                 movzx   ecx, al
.text:00414B81                 movzx   eax, byte ptr [ecx+edx]
.text:00414B85
.text:00414B85 loc_414B85:                             ; CODE XREF: sub_414950+249↓j
.text:00414B85                 lea     edx, [eax+ebp]
.text:00414B88                 cmp     byte ptr [edx], 0
.text:00414B8B                 jnz     loc_414A90
.text:00414B91                 jmp     loc_414AF0
.text:00414B96 ; ---------------------------------------------------------------------------
.text:00414B96
.text:00414B96 loc_414B96:                             ; CODE XREF: sub_414950+228↑j
.text:00414B96                 movzx   eax, al
.text:00414B99                 jmp     short loc_414B85
.text:00414B9B ; ---------------------------------------------------------------------------
.text:00414B9B
.text:00414B9B loc_414B9B:                             ; CODE XREF: sub_414950+210↑j
.text:00414B9B                 mov     edx, [esp+4Ch+arg_4]
.text:00414B9F                 movzx   eax, byte ptr [ebx+edx]
.text:00414BA3                 jmp     short loc_414B72
.text:00414BA5 ; ---------------------------------------------------------------------------
.text:00414BA5
.text:00414BA5 loc_414BA5:                             ; CODE XREF: sub_414950+8C↑j
.text:00414BA5                 mov     [esp+4Ch+var_4C], edi
.text:00414BA8                 call    sub_411000
.text:00414BAD                 cmp     eax, 0FFFFFFFEh
.text:00414BB0                 mov     edx, 0FFFFFFFEh
.text:00414BB5                 jnz     loc_4149E2
.text:00414BBB                 jmp     loc_414ADC
.text:00414BC0 ; ---------------------------------------------------------------------------
.text:00414BC0
.text:00414BC0 loc_414BC0:                             ; CODE XREF: sub_414950+6C↑j
.text:00414BC0                 test    byte ptr [edi+1Ch], 80h
.text:00414BC4                 jnz     loc_4149D0
.text:00414BCA
.text:00414BCA loc_414BCA:                             ; CODE XREF: sub_414950+64↑j
.text:00414BCA                 test    ebx, ebx
.text:00414BCC                 mov     edx, 0FFFFFFFFh
.text:00414BD1                 jg      loc_414ADC
.text:00414BD7                 mov     esi, 1
.text:00414BDC                 jmp     loc_4149D0
.text:00414BE1 ; ---------------------------------------------------------------------------
.text:00414BE1
.text:00414BE1 loc_414BE1:                             ; CODE XREF: sub_414950+40↑j
.text:00414BE1                 mov     esi, ebx
.text:00414BE3                 neg     esi
.text:00414BE5                 jmp     loc_4149A2
.text:00414BE5 sub_414950      endp
.text:00414BE5
.text:00414BE5 ; ---------------------------------------------------------------------------
.text:00414BEA                 align 10h
.text:00414BF0
.text:00414BF0 ; =============== S U B R O U T I N E =======================================
.text:00414BF0
.text:00414BF0
.text:00414BF0 sub_414BF0      proc near               ; CODE XREF: sub_411000↑j
.text:00414BF0
.text:00414BF0 Size            = dword ptr -6Ch
.text:00414BF0 Val             = dword ptr -68h
.text:00414BF0 var_64          = dword ptr -64h
.text:00414BF0 var_4D          = byte ptr -4Dh
.text:00414BF0 var_4C          = byte ptr -4Ch
.text:00414BF0 var_30          = dword ptr -30h
.text:00414BF0 Src             = dword ptr -2Ch
.text:00414BF0 var_28          = dword ptr -28h
.text:00414BF0 var_24          = dword ptr -24h
.text:00414BF0 arg_0           = dword ptr  4
.text:00414BF0
.text:00414BF0                 push    ebp
.text:00414BF1                 push    edi
.text:00414BF2                 push    esi
.text:00414BF3                 push    ebx
.text:00414BF4                 sub     esp, 5Ch
.text:00414BF7                 mov     ebp, [esp+6Ch+arg_0]
.text:00414BFB                 mov     [esp+6Ch+var_4C], 1
.text:00414C00                 mov     [esp+6Ch+var_4D], 0
.text:00414C05                 mov     ecx, [ebp+0]
.text:00414C08                 mov     eax, [ebp+8]
.text:00414C0B                 mov     esi, [ebp+10h]
.text:00414C0E                 mov     edi, ecx
.text:00414C10                 add     eax, ecx
.text:00414C12                 mov     [esp+6Ch+var_30], eax
.text:00414C16                 mov     [esp+6Ch+Size], 14h ; Size
.text:00414C1D                 call    malloc
.text:00414C22                 mov     [esp+6Ch+Src], eax
.text:00414C26                 test    eax, eax
.text:00414C28                 mov     edx, 0FFFFFFFEh
.text:00414C2D                 jz      loc_414D12
.text:00414C33                 mov     [esp+6Ch+var_28], 5
.text:00414C3B                 mov     [esp+6Ch+var_24], 0
.text:00414C43                 mov     [esp+6Ch+var_64], 100h ; Size
.text:00414C4B                 mov     [esp+6Ch+Val], 0 ; Val
.text:00414C53                 mov     [esp+6Ch+Size], esi ; void *
.text:00414C56                 call    memset
.text:00414C5B                 movzx   edx, byte ptr [ebp+1Ch]
.text:00414C5F                 or      dl, 8
.text:00414C62                 and     dl, 0FEh
.text:00414C65                 mov     [ebp+1Ch], dl
.text:00414C68
.text:00414C68 loc_414C68:                             ; CODE XREF: sub_414BF0+9A↓j
.text:00414C68                                         ; sub_414BF0+13D↓j ...
.text:00414C68                 cmp     edi, [esp+6Ch+var_30] ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414C6C                 jz      loc_414F70
.text:00414C72                 movzx   eax, byte ptr [edi]
.text:00414C75                 cmp     al, 1
.text:00414C77                 jz      loc_414F70
.text:00414C7D                 movzx   eax, al
.text:00414C80                 inc     edi
.text:00414C81                 cmp     eax, 1Dh        ; switch 30 cases
.text:00414C84                 ja      def_414C8A      ; jumptable 00414C8A default case, case 1
.text:00414C8A                 jmp     ds:jpt_414C8A[eax*4] ; switch jump
.text:00414C8A ; ---------------------------------------------------------------------------
.text:00414C91                 align 4
.text:00414C94 jpt_414C8A      dd offset loc_414C68    ; DATA XREF: sub_414BF0+9A↑r
.text:00414C94                 dd offset def_414C8A    ; jump table for switch statement
.text:00414C94                 dd offset loc_414D1C
.text:00414C94                 dd offset loc_414D32
.text:00414C94                 dd offset loc_414D60
.text:00414C94                 dd offset loc_414D98
.text:00414C94                 dd offset loc_414DFC
.text:00414C94                 dd offset loc_414DFC
.text:00414C94                 dd offset loc_414D0C
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414EC5
.text:00414C94                 dd offset loc_414EC5
.text:00414C94                 dd offset loc_414E04
.text:00414C94                 dd offset loc_414E04
.text:00414C94                 dd offset loc_414EC5
.text:00414C94                 dd offset loc_414EC5
.text:00414C94                 dd offset loc_414EC5
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414E9E
.text:00414C94                 dd offset loc_414EC5
.text:00414C94                 dd offset loc_414F23
.text:00414C94                 dd offset loc_414F2B
.text:00414C94                 dd offset loc_414F4D
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414C68
.text:00414C94                 dd offset loc_414C68
.text:00414D0C ; ---------------------------------------------------------------------------
.text:00414D0C
.text:00414D0C loc_414D0C:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414D0C                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414D0C                 or      byte ptr [ebp+1Ch], 1 ; jumptable 00414C8A case 8
.text:00414D10
.text:00414D10 loc_414D10:                             ; CODE XREF: sub_414BF0+16E↓j
.text:00414D10                                         ; sub_414BF0+3C8↓j
.text:00414D10                 xor     edx, edx
.text:00414D12
.text:00414D12 loc_414D12:                             ; CODE XREF: sub_414BF0+3D↑j
.text:00414D12                                         ; sub_414BF0+2A3↓j
.text:00414D12                 add     esp, 5Ch
.text:00414D15                 mov     eax, edx
.text:00414D17                 pop     ebx
.text:00414D18                 pop     esi
.text:00414D19                 pop     edi
.text:00414D1A                 pop     ebp
.text:00414D1B                 retn
.text:00414D1C ; ---------------------------------------------------------------------------
.text:00414D1C
.text:00414D1C loc_414D1C:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414D1C                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414D1C                 movzx   ecx, byte ptr [edi+1] ; jumptable 00414C8A case 2
.text:00414D20                 mov     byte ptr [ecx+esi], 1
.text:00414D24
.text:00414D24 loc_414D24:                             ; CODE XREF: sub_414BF0+166↓j
.text:00414D24                                         ; sub_414BF0+16C↓j ...
.text:00414D24                 mov     [esp+6Ch+var_4C], 0
.text:00414D29                 mov     edi, [esp+6Ch+var_30]
.text:00414D2D                 jmp     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414D32 ; ---------------------------------------------------------------------------
.text:00414D32
.text:00414D32 loc_414D32:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414D32                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414D32                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 00414C8A case 3
.text:00414D36                 xor     ebx, ebx
.text:00414D38                 nop
.text:00414D39                 lea     esi, [esi+0]
.text:00414D40
.text:00414D40 loc_414D40:                             ; CODE XREF: sub_414BF0+15B↓j
.text:00414D40                 mov     byte ptr [ebx+esi], 1
.text:00414D44                 inc     ebx
.text:00414D45                 cmp     ebx, 0FFh
.text:00414D4B                 jle     short loc_414D40
.text:00414D4D                 test    byte ptr [ebp+0Ch], 40h
.text:00414D51                 jnz     short loc_414D58
.text:00414D53                 mov     [esi+0Ah], al
.text:00414D56                 jmp     short loc_414D24
.text:00414D58 ; ---------------------------------------------------------------------------
.text:00414D58
.text:00414D58 loc_414D58:                             ; CODE XREF: sub_414BF0+161↑j
.text:00414D58                 test    byte ptr [ebp+1Ch], 1
.text:00414D5C                 jz      short loc_414D24
.text:00414D5E                 jmp     short loc_414D10
.text:00414D60 ; ---------------------------------------------------------------------------
.text:00414D60
.text:00414D60 loc_414D60:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414D60                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414D60                 movzx   edx, byte ptr [edi] ; jumptable 00414C8A case 4
.text:00414D63                 inc     edi
.text:00414D64                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:00414D6B                 test    ebx, ebx
.text:00414D6D                 js      short loc_414D24
.text:00414D6F
.text:00414D6F loc_414D6F:                             ; CODE XREF: sub_414BF0+19F↓j
.text:00414D6F                 test    ebx, ebx
.text:00414D71                 mov     eax, ebx
.text:00414D73                 js      short loc_414D93
.text:00414D75
.text:00414D75 loc_414D75:                             ; CODE XREF: sub_414BF0+1A6↓j
.text:00414D75                 sar     eax, 3
.text:00414D78                 mov     ecx, ebx
.text:00414D7A                 movzx   edx, byte ptr [eax+edi]
.text:00414D7E                 shl     eax, 3
.text:00414D81                 sub     ecx, eax
.text:00414D83                 sar     edx, cl
.text:00414D85                 test    dl, 1
.text:00414D88                 jz      short loc_414D8E
.text:00414D8A                 mov     byte ptr [ebx+esi], 1
.text:00414D8E
.text:00414D8E loc_414D8E:                             ; CODE XREF: sub_414BF0+198↑j
.text:00414D8E                 dec     ebx
.text:00414D8F                 jns     short loc_414D6F
.text:00414D91                 jmp     short loc_414D24
.text:00414D93 ; ---------------------------------------------------------------------------
.text:00414D93
.text:00414D93 loc_414D93:                             ; CODE XREF: sub_414BF0+183↑j
.text:00414D93                 lea     eax, [ebx+7]
.text:00414D96                 jmp     short loc_414D75
.text:00414D98 ; ---------------------------------------------------------------------------
.text:00414D98
.text:00414D98 loc_414D98:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414D98                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414D98                 movzx   edx, byte ptr [edi] ; jumptable 00414C8A case 5
.text:00414D9B                 movzx   ecx, dl
.text:00414D9E                 lea     ebx, ds:0[ecx*8]
.text:00414DA5                 cmp     ebx, 0FFh
.text:00414DAB                 jg      short loc_414DBD
.text:00414DAD
.text:00414DAD loc_414DAD:                             ; CODE XREF: sub_414BF0+1C8↓j
.text:00414DAD                 mov     byte ptr [ebx+esi], 1
.text:00414DB1                 inc     ebx
.text:00414DB2                 cmp     ebx, 0FFh
.text:00414DB8                 jle     short loc_414DAD
.text:00414DBA                 movzx   edx, byte ptr [edi]
.text:00414DBD
.text:00414DBD loc_414DBD:                             ; CODE XREF: sub_414BF0+1BB↑j
.text:00414DBD                 movzx   ecx, dl
.text:00414DC0                 inc     edi
.text:00414DC1                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:00414DC8                 test    ebx, ebx
.text:00414DCA                 js      loc_414D24
.text:00414DD0
.text:00414DD0 loc_414DD0:                             ; CODE XREF: sub_414BF0+200↓j
.text:00414DD0                 test    ebx, ebx
.text:00414DD2                 mov     eax, ebx
.text:00414DD4                 js      short loc_414DF7
.text:00414DD6
.text:00414DD6 loc_414DD6:                             ; CODE XREF: sub_414BF0+20A↓j
.text:00414DD6                 sar     eax, 3
.text:00414DD9                 mov     ecx, ebx
.text:00414DDB                 movzx   edx, byte ptr [eax+edi]
.text:00414DDF                 shl     eax, 3
.text:00414DE2                 sub     ecx, eax
.text:00414DE4                 sar     edx, cl
.text:00414DE6                 test    dl, 1
.text:00414DE9                 jnz     short loc_414DEF
.text:00414DEB                 mov     byte ptr [ebx+esi], 1
.text:00414DEF
.text:00414DEF loc_414DEF:                             ; CODE XREF: sub_414BF0+1F9↑j
.text:00414DEF                 dec     ebx
.text:00414DF0                 jns     short loc_414DD0
.text:00414DF2                 jmp     loc_414D24
.text:00414DF7 ; ---------------------------------------------------------------------------
.text:00414DF7
.text:00414DF7 loc_414DF7:                             ; CODE XREF: sub_414BF0+1E4↑j
.text:00414DF7                 lea     eax, [ebx+7]
.text:00414DFA                 jmp     short loc_414DD6
.text:00414DFC ; ---------------------------------------------------------------------------
.text:00414DFC
.text:00414DFC loc_414DFC:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414DFC                                         ; sub_414BF0+251↓j
.text:00414DFC                                         ; DATA XREF: ...
.text:00414DFC                 add     edi, 2          ; jumptable 00414C8A cases 6,7
.text:00414DFF                 jmp     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414E04 ; ---------------------------------------------------------------------------
.text:00414E04
.text:00414E04 loc_414E04:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414E04                                         ; sub_414BF0+2D0↓j
.text:00414E04                                         ; DATA XREF: ...
.text:00414E04                 movsx   ecx, byte ptr [edi+1] ; jumptable 00414C8A cases 15,16
.text:00414E08                 movzx   edx, byte ptr [edi]
.text:00414E0B                 add     edi, 2
.text:00414E0E                 shl     ecx, 8
.text:00414E11                 add     edx, ecx
.text:00414E13                 lea     ebx, [edx+edi]
.text:00414E16                 cmp     ebx, [esp+6Ch+var_30]
.text:00414E1A                 jnb     short loc_414E98
.text:00414E1C                 mov     ecx, [esp+6Ch+var_24]
.text:00414E20                 cmp     ecx, [esp+6Ch+var_28]
.text:00414E24                 jz      short loc_414E43
.text:00414E26
.text:00414E26 loc_414E26:                             ; CODE XREF: sub_414BF0+29C↓j
.text:00414E26                 mov     edx, [esp+6Ch+Src]
.text:00414E2A                 mov     [edx+ecx*4], ebx
.text:00414E2D                 inc     [esp+6Ch+var_24]
.text:00414E31
.text:00414E31 loc_414E31:                             ; CODE XREF: sub_414BF0+2AC↓j
.text:00414E31                 cmp     [esp+6Ch+var_4D], 0
.text:00414E36                 jz      loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414E3C                 mov     [esp+6Ch+var_4D], 0
.text:00414E41                 jmp     short loc_414DFC ; jumptable 00414C8A cases 6,7
.text:00414E43 ; ---------------------------------------------------------------------------
.text:00414E43
.text:00414E43 loc_414E43:                             ; CODE XREF: sub_414BF0+234↑j
.text:00414E43                 mov     eax, dword_420080
.text:00414E48                 lea     edx, [eax+eax*8]
.text:00414E4B                 lea     edx, [eax+edx*2]
.text:00414E4E                 cmp     ecx, edx
.text:00414E50                 ja      short loc_414E8E
.text:00414E52                 lea     edx, ds:0[ecx*8]
.text:00414E59                 mov     [esp+6Ch+Size], edx ; Size
.text:00414E5C                 call    malloc
.text:00414E61                 mov     [esp+6Ch+Size], eax ; void *
.text:00414E64                 mov     ecx, [esp+6Ch+var_28]
.text:00414E68                 shl     ecx, 2
.text:00414E6B                 mov     [esp+6Ch+var_64], ecx ; Size
.text:00414E6F                 mov     ecx, [esp+6Ch+Src]
.text:00414E73                 mov     [esp+6Ch+Val], ecx ; Src
.text:00414E77                 call    memcpy
.text:00414E7C                 mov     [esp+6Ch+Src], eax
.text:00414E80                 test    eax, eax
.text:00414E82                 jz      short loc_414E8E
.text:00414E84                 shl     [esp+6Ch+var_28], 1
.text:00414E88                 mov     ecx, [esp+6Ch+var_24]
.text:00414E8C                 jmp     short loc_414E26
.text:00414E8E ; ---------------------------------------------------------------------------
.text:00414E8E
.text:00414E8E loc_414E8E:                             ; CODE XREF: sub_414BF0+260↑j
.text:00414E8E                                         ; sub_414BF0+292↑j
.text:00414E8E                 mov     edx, 0FFFFFFFEh
.text:00414E93                 jmp     loc_414D12
.text:00414E98 ; ---------------------------------------------------------------------------
.text:00414E98
.text:00414E98 loc_414E98:                             ; CODE XREF: sub_414BF0+22A↑j
.text:00414E98                 or      byte ptr [ebp+1Ch], 1
.text:00414E9C                 jmp     short loc_414E31
.text:00414E9E ; ---------------------------------------------------------------------------
.text:00414E9E
.text:00414E9E loc_414E9E:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414E9E                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414E9E                 add     edi, 2          ; jumptable 00414C8A case 21
.text:00414EA1                 movsx   ecx, byte ptr [edi+1]
.text:00414EA5                 movzx   ebx, byte ptr [edi]
.text:00414EA8                 add     edi, 2
.text:00414EAB                 shl     ecx, 8
.text:00414EAE                 add     ebx, ecx
.text:00414EB0                 test    ebx, ebx
.text:00414EB2                 jnz     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414EB8                 mov     [esp+6Ch+var_4D], 1
.text:00414EBD                 sub     edi, 4
.text:00414EC0                 jmp     loc_414E04      ; jumptable 00414C8A cases 15,16
.text:00414EC5 ; ---------------------------------------------------------------------------
.text:00414EC5
.text:00414EC5 loc_414EC5:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414EC5                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414EC5                 movsx   ebx, byte ptr [edi+1] ; jumptable 00414C8A cases 13,14,17-19,22
.text:00414EC9                 movzx   ecx, byte ptr [edi]
.text:00414ECC                 shl     ebx, 8
.text:00414ECF                 add     ecx, ebx
.text:00414ED1                 test    ecx, ecx
.text:00414ED3                 lea     edi, [ecx+edi+2]
.text:00414ED7                 jg      loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414EDD                 movzx   eax, byte ptr [edi]
.text:00414EE0                 cmp     al, 0Fh
.text:00414EE2                 jz      short loc_414EEC
.text:00414EE4                 cmp     al, 15h
.text:00414EE6                 jnz     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414EEC
.text:00414EEC loc_414EEC:                             ; CODE XREF: sub_414BF0+2F2↑j
.text:00414EEC                 inc     edi
.text:00414EED                 movsx   ecx, byte ptr [edi+1]
.text:00414EF1                 movzx   edx, byte ptr [edi]
.text:00414EF4                 shl     ecx, 8
.text:00414EF7                 add     edx, ecx
.text:00414EF9                 lea     edi, [edx+edi+2]
.text:00414EFD                 mov     edx, [esp+6Ch+var_24]
.text:00414F01                 test    edx, edx
.text:00414F03                 jz      loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414F09                 mov     ebx, [esp+6Ch+Src]
.text:00414F0D                 cmp     [ebx+edx*4-4], edi
.text:00414F11                 jnz     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414F17                 lea     eax, [edx-1]
.text:00414F1A                 mov     [esp+6Ch+var_24], eax
.text:00414F1E                 jmp     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414F23 ; ---------------------------------------------------------------------------
.text:00414F23
.text:00414F23 loc_414F23:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414F23                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414F23                 add     edi, 4          ; jumptable 00414C8A case 23
.text:00414F26                 jmp     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414F2B ; ---------------------------------------------------------------------------
.text:00414F2B
.text:00414F2B loc_414F2B:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414F2B                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414F2B                 xor     ebx, ebx        ; jumptable 00414C8A case 24
.text:00414F2D
.text:00414F2D loc_414F2D:                             ; CODE XREF: sub_414BF0+350↓j
.text:00414F2D                 movzx   edi, bl
.text:00414F30                 cmp     ds:byte_421290[edi], 1
.text:00414F37                 jz      short loc_414F47
.text:00414F39
.text:00414F39 loc_414F39:                             ; CODE XREF: sub_414BF0+35B↓j
.text:00414F39                 inc     ebx
.text:00414F3A                 cmp     ebx, 0FFh
.text:00414F40                 jle     short loc_414F2D
.text:00414F42                 jmp     loc_414D24
.text:00414F47 ; ---------------------------------------------------------------------------
.text:00414F47
.text:00414F47 loc_414F47:                             ; CODE XREF: sub_414BF0+347↑j
.text:00414F47                 mov     byte ptr [ebx+esi], 1
.text:00414F4B                 jmp     short loc_414F39
.text:00414F4D ; ---------------------------------------------------------------------------
.text:00414F4D
.text:00414F4D loc_414F4D:                             ; CODE XREF: sub_414BF0+9A↑j
.text:00414F4D                                         ; DATA XREF: sub_414BF0:jpt_414C8A↑o
.text:00414F4D                 xor     ebx, ebx        ; jumptable 00414C8A case 25
.text:00414F4F
.text:00414F4F loc_414F4F:                             ; CODE XREF: sub_414BF0+376↓j
.text:00414F4F                 movzx   edx, bl
.text:00414F52                 cmp     ds:byte_421290[edx], 1
.text:00414F59                 jz      short loc_414F5F
.text:00414F5B                 mov     byte ptr [ebx+esi], 1
.text:00414F5F
.text:00414F5F loc_414F5F:                             ; CODE XREF: sub_414BF0+369↑j
.text:00414F5F                 inc     ebx
.text:00414F60                 cmp     ebx, 0FFh
.text:00414F66                 jle     short loc_414F4F
.text:00414F68                 jmp     loc_414D24
.text:00414F68 ; ---------------------------------------------------------------------------
.text:00414F6D                 align 10h
.text:00414F70
.text:00414F70 loc_414F70:                             ; CODE XREF: sub_414BF0+7C↑j
.text:00414F70                                         ; sub_414BF0+87↑j
.text:00414F70                 mov     ecx, [esp+6Ch+var_24]
.text:00414F74                 test    ecx, ecx
.text:00414F76                 jz      short loc_414FA3
.text:00414F78                 movzx   ebx, byte ptr [ebp+1Ch]
.text:00414F7C                 dec     ecx
.text:00414F7D                 movzx   eax, [esp+6Ch+var_4C]
.text:00414F82                 or      eax, ebx
.text:00414F84                 and     al, 1
.text:00414F86                 and     bl, 0FEh
.text:00414F89                 or      bl, al
.text:00414F8B                 mov     [ebp+1Ch], bl
.text:00414F8E                 mov     ebx, [esp+6Ch+Src]
.text:00414F92                 mov     [esp+6Ch+var_4C], 1
.text:00414F97                 mov     [esp+6Ch+var_24], ecx
.text:00414F9B                 mov     edi, [ebx+ecx*4]
.text:00414F9E                 jmp     loc_414C68      ; jumptable 00414C8A cases 0,9-12,20,26-29
.text:00414FA3 ; ---------------------------------------------------------------------------
.text:00414FA3
.text:00414FA3 loc_414FA3:                             ; CODE XREF: sub_414BF0+386↑j
.text:00414FA3                 movzx   ebx, byte ptr [ebp+1Ch]
.text:00414FA7                 movzx   eax, [esp+6Ch+var_4C]
.text:00414FAC                 or      eax, ebx
.text:00414FAE                 and     al, 1
.text:00414FB0                 and     bl, 0FEh
.text:00414FB3                 or      bl, al
.text:00414FB5                 mov     [ebp+1Ch], bl
.text:00414FB8                 jmp     loc_414D10
.text:00414FBD ; ---------------------------------------------------------------------------
.text:00414FBD
.text:00414FBD def_414C8A:                             ; CODE XREF: sub_414BF0+94↑j
.text:00414FBD                                         ; sub_414BF0+9A↑j
.text:00414FBD                                         ; DATA XREF: ...
.text:00414FBD                 call    abort           ; jumptable 00414C8A default case, case 1
.text:00414FBD sub_414BF0      endp
.text:00414FBD
.text:00414FBD ; ---------------------------------------------------------------------------
.text:00414FC2                 align 10h
.text:00414FD0
.text:00414FD0 loc_414FD0:                             ; DATA XREF: sub_415050:loc_415108↓o
.text:00414FD0                 outsd
.text:00414FD1                 jo      short near ptr loc_415035+3
.text:00414FD3                 outsb
.text:00414FD4                 popa
.text:00414FD5                 jz      short loc_415011
.text:00414FD7                 and     [ebp+6Eh], dh
.text:00414FDA                 popa
.text:00414FDB                 bound   ebp, [ebp+20h]
.text:00414FDF                 jz      short sub_415050
.text:00414FE1                 and     [edx+65h], dh
.text:00414FE4                 jnb     short near ptr loc_415057+3
.text:00414FE6                 outsd
.text:00414FE7                 jb      short near ptr loc_415049+5
.text:00414FE9                 and     [edi+6Fh], dh
.text:00414FEC                 jb      short near ptr loc_415057+2
.text:00414FEE                 imul    ebp, [esi+67h], 72696420h
.text:00414FF5                 arpl    gs:[edi+ebp*2+72h], si
.text:00414FFA                 jns     short $+2
.text:00414FFC
.text:00414FFC loc_414FFC:                             ; CODE XREF: .text:00414FFA↑j
.text:00414FFC                 nop
.text:00414FFD                 nop
.text:00414FFE                 nop
.text:00414FFF                 nop
.text:00415000                 nop
.text:00415001                 nop
.text:00415002                 nop
.text:00415003                 nop
.text:00415004                 nop
.text:00415005                 nop
.text:00415006                 nop
.text:00415007                 nop
.text:00415008                 nop
.text:00415009                 nop
.text:0041500A                 nop
.text:0041500B                 nop
.text:0041500C                 nop
.text:0041500D                 nop
.text:0041500E                 nop
.text:0041500F                 nop
.text:00415010
.text:00415010 loc_415010:                             ; DATA XREF: sub_415050:loc_415157↓o
.text:00415010                 outsd
.text:00415011
.text:00415011 loc_415011:                             ; CODE XREF: .text:00414FD5↑j
.text:00415011                 jo      short near ptr loc_415077+1
.text:00415013                 outsb
.text:00415014                 popa
.text:00415015                 jz      short near ptr sub_415050+1
.text:00415017                 and     [ebp+6Eh], dh
.text:0041501A                 popa
.text:0041501B                 bound   ebp, [ebp+20h]
.text:0041501F                 jz      short near ptr loc_41508E+2
.text:00415021                 and     [edx+65h], dh
.text:00415024                 arpl    [edi+72h], bp
.text:00415027                 and     fs:[ebx+75h], ah
.text:0041502B                 jb      short near ptr loc_41509C+3
.text:0041502D                 outs    dx, byte ptr gs:[esi]
.text:0041502F                 jz      short near ptr sub_415050+1
.text:00415031                 ja      short loc_4150A2
.text:00415033                 jb      short near ptr loc_41509C+4
.text:00415035
.text:00415035 loc_415035:                             ; CODE XREF: .text:00414FD1↑j
.text:00415035                 imul    ebp, [esi+67h], 72696420h
.text:0041503C                 arpl    gs:[edi+ebp*2+72h], si
.text:00415041                 jns     short $+2
.text:00415043
.text:00415043 loc_415043:                             ; CODE XREF: .text:00415041↑j
.text:00415043                 lea     esi, [esi+0]
.text:00415049
.text:00415049 loc_415049:                             ; CODE XREF: .text:00414FE7↑j
.text:00415049                 lea     edi, [edi+0]
.text:00415050
.text:00415050 ; =============== S U B R O U T I N E =======================================
.text:00415050
.text:00415050
.text:00415050 ; int __cdecl sub_415050(int, char *, int)
.text:00415050 sub_415050      proc near               ; CODE XREF: sub_40DCE0+189↑p
.text:00415050                                         ; sub_40DCE0+1DB↑p ...
.text:00415050
.text:00415050 FileName        = dword ptr -2Ch
.text:00415050 OpenFlag        = dword ptr -28h
.text:00415050 var_24          = dword ptr -24h
.text:00415050 Block           = byte ptr -1Ch
.text:00415050 var_10          = dword ptr -10h
.text:00415050 var_C           = dword ptr -0Ch
.text:00415050 var_8           = dword ptr -8
.text:00415050 var_4           = dword ptr -4
.text:00415050 arg_0           = dword ptr  4
.text:00415050 arg_4           = dword ptr  8
.text:00415050 arg_8           = dword ptr  0Ch
.text:00415050
.text:00415050                 sub     esp, 2Ch
.text:00415053                 mov     [esp+2Ch+var_C], esi
.text:00415057
.text:00415057 loc_415057:                             ; CODE XREF: .text:00414FEC↑j
.text:00415057                                         ; .text:00414FE4↑j
.text:00415057                 mov     esi, [esp+2Ch+arg_8]
.text:0041505B                 mov     [esp+2Ch+var_4], ebp
.text:0041505F                 mov     ebp, [esp+2Ch+arg_0]
.text:00415063                 test    esi, 100h
.text:00415069                 mov     [esp+2Ch+var_8], edi
.text:0041506D                 mov     edi, [esp+2Ch+arg_4]
.text:00415071                 mov     [esp+2Ch+var_10], ebx
.text:00415075                 jz      short loc_415079
.text:00415077
.text:00415077 loc_415077:                             ; CODE XREF: .text:loc_415011↑j
.text:00415077                 int     5               ;  - PRINT-SCREEN KEY
.text:00415077                                         ; automatically called by keyboard scanner when print-screen key is pressed
.text:00415079
.text:00415079 loc_415079:                             ; CODE XREF: sub_415050+25↑j
.text:00415079                 cmp     ebp, 0FFD19553h
.text:0041507F                 jz      loc_415188
.text:00415085                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00415088                 jz      loc_415188
.text:0041508E
.text:0041508E loc_41508E:                             ; CODE XREF: .text:0041501F↑j
.text:0041508E                 lea     edx, [esp+2Ch+Block]
.text:00415092                 mov     [esp+2Ch+FileName], edx
.text:00415095                 call    sub_40C050
.text:0041509A                 test    eax, eax
.text:0041509C
.text:0041509C loc_41509C:                             ; CODE XREF: .text:0041502B↑j
.text:0041509C                                         ; .text:00415033↑j
.text:0041509C                 jnz     loc_415157
.text:004150A2
.text:004150A2 loc_4150A2:                             ; CODE XREF: .text:00415031↑j
.text:004150A2                                         ; sub_415050+133↓j
.text:004150A2                 mov     [esp+2Ch+FileName], ebp
.text:004150A5                 call    sub_4151B0
.text:004150AA                 test    eax, eax
.text:004150AC                 jnz     loc_415136
.text:004150B2                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:004150B6                 lea     ebp, [esp+2Ch+Block]
.text:004150BA                 mov     [esp+2Ch+FileName], edi ; FileName
.text:004150BD                 mov     [esp+2Ch+var_24], 0
.text:004150C5                 call    _open
.text:004150CA                 mov     edi, eax
.text:004150CC                 call    _errno
.text:004150D1                 mov     esi, [eax]
.text:004150D3                 mov     [esp+2Ch+FileName], ebp
.text:004150D6                 call    sub_40C090
.text:004150DB                 test    eax, eax
.text:004150DD                 jnz     short loc_415108
.text:004150DF
.text:004150DF loc_4150DF:                             ; CODE XREF: sub_415050+E4↓j
.text:004150DF                 lea     ebx, [esp+2Ch+Block]
.text:004150E3                 mov     [esp+2Ch+FileName], ebx ; Block
.text:004150E6                 call    sub_40C0C0
.text:004150EB                 call    _errno
.text:004150F0                 mov     [eax], esi
.text:004150F2                 mov     eax, edi
.text:004150F4
.text:004150F4 loc_4150F4:                             ; CODE XREF: sub_415050+105↓j
.text:004150F4                                         ; sub_415050+14C↓j
.text:004150F4                 mov     ebx, [esp+2Ch+var_10]
.text:004150F8                 mov     esi, [esp+2Ch+var_C]
.text:004150FC                 mov     edi, [esp+2Ch+var_8]
.text:00415100                 mov     ebp, [esp+2Ch+var_4]
.text:00415104                 add     esp, 2Ch
.text:00415107                 retn
.text:00415108 ; ---------------------------------------------------------------------------
.text:00415108
.text:00415108 loc_415108:                             ; CODE XREF: sub_415050+8D↑j
.text:00415108                 mov     [esp+2Ch+FileName], offset loc_414FD0
.text:0041510F                 call    ds:libintl_gettext
.text:00415115                 mov     ebp, eax
.text:00415117                 call    _errno
.text:0041511C                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00415120                 mov     edx, Code
.text:00415126                 mov     ecx, [eax]
.text:00415128                 mov     [esp+2Ch+FileName], edx ; Code
.text:0041512B                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:0041512F                 call    sub_415220
.text:00415134                 jmp     short loc_4150DF
.text:00415136 ; ---------------------------------------------------------------------------
.text:00415136
.text:00415136 loc_415136:                             ; CODE XREF: sub_415050+5C↑j
.text:00415136                 call    _errno
.text:0041513B                 mov     ebx, [eax]
.text:0041513D                 lea     esi, [esp+2Ch+Block]
.text:00415141                 mov     [esp+2Ch+FileName], esi ; Block
.text:00415144                 call    sub_40C0C0
.text:00415149                 call    _errno
.text:0041514E                 mov     [eax], ebx
.text:00415150                 mov     eax, 0FFFFFFFFh
.text:00415155                 jmp     short loc_4150F4
.text:00415157 ; ---------------------------------------------------------------------------
.text:00415157
.text:00415157 loc_415157:                             ; CODE XREF: sub_415050:loc_41509C↑j
.text:00415157                 mov     [esp+2Ch+FileName], offset loc_415010
.text:0041515E                 call    ds:libintl_gettext
.text:00415164                 mov     ebx, eax
.text:00415166                 call    _errno
.text:0041516B                 mov     [esp+2Ch+var_24], ebx ; char *
.text:0041516F                 mov     edx, Code
.text:00415175                 mov     ecx, [eax]
.text:00415177                 mov     [esp+2Ch+FileName], edx ; Code
.text:0041517A                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:0041517E                 call    sub_415220
.text:00415183                 jmp     loc_4150A2
.text:00415188 ; ---------------------------------------------------------------------------
.text:00415188
.text:00415188 loc_415188:                             ; CODE XREF: sub_415050+2F↑j
.text:00415188                                         ; sub_415050+38↑j
.text:00415188                 mov     [esp+2Ch+var_24], 0
.text:00415190                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:00415194                 mov     [esp+2Ch+FileName], edi ; FileName
.text:00415197                 call    _open
.text:0041519C                 jmp     loc_4150F4
.text:0041519C sub_415050      endp
.text:0041519C
.text:0041519C ; ---------------------------------------------------------------------------
.text:004151A1                 align 10h
.text:004151B0
.text:004151B0 ; =============== S U B R O U T I N E =======================================
.text:004151B0
.text:004151B0
.text:004151B0 sub_4151B0      proc near               ; CODE XREF: sub_40DCE0+29D↑p
.text:004151B0                                         ; sub_415050+55↑p
.text:004151B0                 sub     esp, 0Ch
.text:004151B3                 call    _errno
.text:004151B8                 mov     dword ptr [eax], 28h ; '('
.text:004151BE                 mov     eax, 0FFFFFFFFh
.text:004151C3                 add     esp, 0Ch
.text:004151C6                 retn
.text:004151C6 sub_4151B0      endp
.text:004151C6
.text:004151C6 ; ---------------------------------------------------------------------------
.text:004151C7                 align 10h
.text:004151D0                 jmp     ds:libintl_bindtextdomain
.text:004151D0 ; ---------------------------------------------------------------------------
.text:004151D6                 align 10h
.text:004151E0                 jmp     ds:libintl_textdomain
.text:004151E0 ; ---------------------------------------------------------------------------
.text:004151E6                 align 10h
.text:004151F0                 jmp     ds:libintl_gettext
.text:004151F0 ; ---------------------------------------------------------------------------
.text:004151F6                 align 10h
.text:00415200 ; const char aS_2[]
.text:00415200 aS_2            db ': %s',0             ; DATA XREF: sub_415220+B8↓o
.text:00415200                                         ; sub_415324+122↓o
.text:00415205 aUnknownSystemE db 'Unknown system error',0
.text:00415205                                         ; DATA XREF: sub_415220:loc_4152ED↓o
.text:00415205                                         ; sub_415324:loc_41545E↓o
.text:0041521A ; const char aS_3[]
.text:0041521A aS_3            db '%s: ',0             ; DATA XREF: sub_415220:loc_4152F4↓o
.text:0041521F                 align 10h
.text:00415220
.text:00415220 ; =============== S U B R O U T I N E =======================================
.text:00415220
.text:00415220
.text:00415220 ; int __cdecl sub_415220(int Code, int ErrorMessage, char *, char)
.text:00415220 sub_415220      proc near               ; CODE XREF: sub_401700+2AD↑p
.text:00415220                                         ; sub_401700+381↑p ...
.text:00415220
.text:00415220 Stream          = dword ptr -1Ch
.text:00415220 Format          = dword ptr -18h
.text:00415220 ArgList         = dword ptr -14h
.text:00415220 Code            = dword ptr  4
.text:00415220 ErrorMessage    = dword ptr  8
.text:00415220 arg_8           = dword ptr  0Ch
.text:00415220 arg_C           = byte ptr  10h
.text:00415220
.text:00415220                 push    esi
.text:00415221                 push    ebx
.text:00415222                 sub     esp, 14h
.text:00415225                 mov     edx, ds:_iob
.text:0041522B                 mov     esi, [esp+1Ch+Code]
.text:0041522F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00415233                 add     edx, 20h ; ' '
.text:00415236                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00415239                 call    fflush
.text:0041523E                 mov     eax, ds:dword_421CC0
.text:00415243                 test    eax, eax
.text:00415245                 jz      loc_4152F4
.text:0041524B                 call    eax ; dword_421CC0
.text:0041524D
.text:0041524D loc_41524D:                             ; CODE XREF: sub_415220+F7↓j
.text:0041524D                 lea     edx, [esp+1Ch+arg_C]
.text:00415251                 mov     ecx, [esp+1Ch+arg_8]
.text:00415255                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00415259                 mov     edx, ds:_iob
.text:0041525F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00415263                 add     edx, 40h ; '@'
.text:00415266                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00415269                 call    vfprintf
.text:0041526E                 inc     ds:dword_421CD0
.text:00415274                 test    ebx, ebx
.text:00415276                 jnz     short loc_4152C2
.text:00415278
.text:00415278 loc_415278:                             ; CODE XREF: sub_415220+CB↓j
.text:00415278                 mov     edx, ds:_iob
.text:0041527E                 lea     ecx, [edx+40h]
.text:00415281                 mov     ebx, [ecx+4]
.text:00415284                 dec     ebx
.text:00415285                 test    ebx, ebx
.text:00415287                 mov     [ecx+4], ebx
.text:0041528A                 js      short loc_4152B0
.text:0041528C                 mov     ecx, [edx+40h]
.text:0041528F                 mov     byte ptr [ecx], 0Ah
.text:00415292                 inc     dword ptr [edx+40h]
.text:00415295
.text:00415295 loc_415295:                             ; CODE XREF: sub_415220+A0↓j
.text:00415295                 mov     edx, ds:_iob
.text:0041529B                 add     edx, 40h ; '@'
.text:0041529E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004152A1                 call    fflush
.text:004152A6                 test    esi, esi
.text:004152A8                 jnz     short loc_41531C
.text:004152AA                 add     esp, 14h
.text:004152AD                 pop     ebx
.text:004152AE                 pop     esi
.text:004152AF                 retn
.text:004152B0 ; ---------------------------------------------------------------------------
.text:004152B0
.text:004152B0 loc_4152B0:                             ; CODE XREF: sub_415220+6A↑j
.text:004152B0                 mov     [esp+1Ch+Format], ecx ; File
.text:004152B4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004152BB                 call    _flsbuf
.text:004152C0                 jmp     short loc_415295
.text:004152C2 ; ---------------------------------------------------------------------------
.text:004152C2
.text:004152C2 loc_4152C2:                             ; CODE XREF: sub_415220+56↑j
.text:004152C2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004152C5                 call    strerror
.text:004152CA                 test    eax, eax
.text:004152CC                 jz      short loc_4152ED
.text:004152CE
.text:004152CE loc_4152CE:                             ; CODE XREF: sub_415220+D2↓j
.text:004152CE                 mov     [esp+1Ch+ArgList], eax
.text:004152D2                 mov     ebx, ds:_iob
.text:004152D8                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:004152E0                 add     ebx, 40h ; '@'
.text:004152E3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004152E6                 call    fprintf
.text:004152EB                 jmp     short loc_415278
.text:004152ED ; ---------------------------------------------------------------------------
.text:004152ED
.text:004152ED loc_4152ED:                             ; CODE XREF: sub_415220+AC↑j
.text:004152ED                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004152F2                 jmp     short loc_4152CE
.text:004152F4 ; ---------------------------------------------------------------------------
.text:004152F4
.text:004152F4 loc_4152F4:                             ; CODE XREF: sub_415220+25↑j
.text:004152F4                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:004152FC                 mov     edx, ds:_iob
.text:00415302                 mov     ecx, ds:dword_421C80
.text:00415308                 add     edx, 40h ; '@'
.text:0041530B                 mov     [esp+1Ch+ArgList], ecx
.text:0041530F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00415312                 call    fprintf
.text:00415317                 jmp     loc_41524D
.text:0041531C ; ---------------------------------------------------------------------------
.text:0041531C
.text:0041531C loc_41531C:                             ; CODE XREF: sub_415220+88↑j
.text:0041531C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0041531F                 call    exit
.text:0041531F sub_415220      endp
.text:0041531F
.text:00415324
.text:00415324 ; =============== S U B R O U T I N E =======================================
.text:00415324
.text:00415324
.text:00415324 ; int __cdecl sub_415324(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00415324 sub_415324      proc near               ; DATA XREF: sub_415324+77↓o
.text:00415324
.text:00415324 Stream          = dword ptr -28h
.text:00415324 Format          = dword ptr -24h
.text:00415324 ArgList         = dword ptr -20h
.text:00415324 var_1C          = dword ptr -1Ch
.text:00415324 Code            = dword ptr  8
.text:00415324 ErrorMessage    = dword ptr  0Ch
.text:00415324 Str2            = dword ptr  10h
.text:00415324 arg_10          = dword ptr  14h
.text:00415324 arg_14          = dword ptr  18h
.text:00415324 arg_18          = byte ptr  1Ch
.text:00415324
.text:00415324                 and     eax, 64253A73h
.text:00415329                 cmp     ah, [eax]
.text:0041532B
.text:0041532B loc_41532B:                             ; DATA XREF: sub_415324:loc_415465↓o
.text:0041532B                 add     ds:55003A73h, ah
.text:00415331                 push    edi
.text:00415332                 push    esi
.text:00415333                 push    ebx
.text:00415334                 sub     esp, 1Ch
.text:00415337                 mov     edx, ds:dword_421D00
.text:0041533D                 mov     ebp, [esp+28h+Code]
.text:00415341                 mov     edi, [esp+28h+ErrorMessage]
.text:00415345                 test    edx, edx
.text:00415347                 mov     ebx, [esp+28h+Str2]
.text:0041534B                 mov     esi, [esp+28h+arg_10]
.text:0041534F                 jz      short loc_415369
.text:00415351                 cmp     ds:dword_4213B0, esi
.text:00415357                 jz      loc_415490
.text:0041535D
.text:0041535D loc_41535D:                             ; CODE XREF: sub_415324+18D↓j
.text:0041535D                 mov     ds:Str1, ebx
.text:00415363                 mov     ds:dword_4213B0, esi
.text:00415369
.text:00415369 loc_415369:                             ; CODE XREF: sub_415324+2B↑j
.text:00415369                 mov     edx, ds:_iob
.text:0041536F                 add     edx, 20h ; ' '
.text:00415372                 mov     [esp+28h+Stream], edx ; Stream
.text:00415375                 call    fflush
.text:0041537A                 mov     eax, ds:dword_421CC0
.text:0041537F                 test    eax, eax
.text:00415381                 jz      loc_415465
.text:00415387                 call    eax ; dword_421CC0
.text:00415389
.text:00415389 loc_415389:                             ; CODE XREF: sub_415324+164↓j
.text:00415389                 test    ebx, ebx
.text:0041538B                 jz      short loc_4153AE
.text:0041538D                 mov     [esp+28h+ArgList], ebx
.text:00415391                 mov     ebx, ds:_iob
.text:00415397                 mov     [esp+28h+var_1C], esi
.text:0041539B                 mov     [esp+28h+Format], offset sub_415324 ; Format
.text:004153A3                 add     ebx, 40h ; '@'
.text:004153A6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004153A9                 call    fprintf
.text:004153AE
.text:004153AE loc_4153AE:                             ; CODE XREF: sub_415324+67↑j
.text:004153AE                 mov     esi, ds:_iob
.text:004153B4                 lea     edx, [esp+28h+arg_18]
.text:004153B8                 mov     ecx, [esp+28h+arg_14]
.text:004153BC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004153C0                 add     esi, 40h ; '@'
.text:004153C3                 mov     [esp+28h+Format], ecx ; Format
.text:004153C7                 mov     [esp+28h+Stream], esi ; Stream
.text:004153CA                 call    vfprintf
.text:004153CF                 inc     ds:dword_421CD0
.text:004153D5                 test    edi, edi
.text:004153D7                 jnz     short loc_415430
.text:004153D9
.text:004153D9 loc_4153D9:                             ; CODE XREF: sub_415324+135↓j
.text:004153D9                 mov     edx, ds:_iob
.text:004153DF                 lea     ecx, [edx+40h]
.text:004153E2                 mov     ebx, [ecx+4]
.text:004153E5                 dec     ebx
.text:004153E6                 test    ebx, ebx
.text:004153E8                 mov     [ecx+4], ebx
.text:004153EB                 js      short loc_415417
.text:004153ED                 mov     esi, [edx+40h]
.text:004153F0                 mov     byte ptr [esi], 0Ah
.text:004153F3                 inc     dword ptr [edx+40h]
.text:004153F6
.text:004153F6 loc_4153F6:                             ; CODE XREF: sub_415324+103↓j
.text:004153F6                 mov     ecx, ds:_iob
.text:004153FC                 add     ecx, 40h ; '@'
.text:004153FF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00415402                 call    fflush
.text:00415407                 test    ebp, ebp
.text:00415409                 jnz     loc_4154B6
.text:0041540F
.text:0041540F loc_41540F:                             ; CODE XREF: sub_415324+173↓j
.text:0041540F                                         ; sub_415324+187↓j
.text:0041540F                 add     esp, 1Ch
.text:00415412                 pop     ebx
.text:00415413                 pop     esi
.text:00415414                 pop     edi
.text:00415415                 pop     ebp
.text:00415416                 retn
.text:00415417 ; ---------------------------------------------------------------------------
.text:00415417
.text:00415417 loc_415417:                             ; CODE XREF: sub_415324+C7↑j
.text:00415417                 mov     [esp+28h+Format], ecx ; File
.text:0041541B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00415422                 call    _flsbuf
.text:00415427                 jmp     short loc_4153F6
.text:00415427 ; ---------------------------------------------------------------------------
.text:00415429                 align 10h
.text:00415430
.text:00415430 loc_415430:                             ; CODE XREF: sub_415324+B3↑j
.text:00415430                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00415433                 call    strerror
.text:00415438                 test    eax, eax
.text:0041543A                 jz      short loc_41545E
.text:0041543C
.text:0041543C loc_41543C:                             ; CODE XREF: sub_415324+13F↓j
.text:0041543C                 mov     [esp+28h+ArgList], eax
.text:00415440                 mov     edi, ds:_iob
.text:00415446                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:0041544E                 add     edi, 40h ; '@'
.text:00415451                 mov     [esp+28h+Stream], edi ; Stream
.text:00415454                 call    fprintf
.text:00415459                 jmp     loc_4153D9
.text:0041545E ; ---------------------------------------------------------------------------
.text:0041545E
.text:0041545E loc_41545E:                             ; CODE XREF: sub_415324+116↑j
.text:0041545E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00415463                 jmp     short loc_41543C
.text:00415465 ; ---------------------------------------------------------------------------
.text:00415465
.text:00415465 loc_415465:                             ; CODE XREF: sub_415324+5D↑j
.text:00415465                 mov     [esp+28h+Format], (offset loc_41532B+1) ; Format
.text:0041546D                 mov     ecx, ds:_iob
.text:00415473                 mov     edx, ds:dword_421C80
.text:00415479                 add     ecx, 40h ; '@'
.text:0041547C                 mov     [esp+28h+ArgList], edx
.text:00415480                 mov     [esp+28h+Stream], ecx ; Stream
.text:00415483                 call    fprintf
.text:00415488                 jmp     loc_415389
.text:00415488 ; ---------------------------------------------------------------------------
.text:0041548D                 align 10h
.text:00415490
.text:00415490 loc_415490:                             ; CODE XREF: sub_415324+33↑j
.text:00415490                 mov     eax, ds:Str1
.text:00415495                 cmp     ebx, eax
.text:00415497                 jz      loc_41540F
.text:0041549D                 mov     [esp+28h+Format], ebx ; Str2
.text:004154A1                 mov     [esp+28h+Stream], eax ; Str1
.text:004154A4                 call    strcmp
.text:004154A9                 test    eax, eax
.text:004154AB                 jz      loc_41540F
.text:004154B1                 jmp     loc_41535D
.text:004154B6 ; ---------------------------------------------------------------------------
.text:004154B6
.text:004154B6 loc_4154B6:                             ; CODE XREF: sub_415324+E5↑j
.text:004154B6                 mov     [esp+28h+Stream], ebp ; Code
.text:004154B9                 call    exit
.text:004154B9 sub_415324      endp ; sp-analysis failed
.text:004154B9
.text:004154B9 ; ---------------------------------------------------------------------------
.text:004154BE                 align 10h
.text:004154C0
.text:004154C0 ; =============== S U B R O U T I N E =======================================
.text:004154C0
.text:004154C0
.text:004154C0 ; int __cdecl sub_4154C0(LPCSTR, int)
.text:004154C0 sub_4154C0      proc near               ; CODE XREF: sub_403910+1787↑p
.text:004154C0                                         ; sub_403910+17A2↑p ...
.text:004154C0
.text:004154C0 lpFileName      = dword ptr -7Ch
.text:004154C0 var_78          = dword ptr -78h
.text:004154C0 var_74          = dword ptr -74h
.text:004154C0 var_6C          = dword ptr -6Ch
.text:004154C0 var_50          = dword ptr -50h
.text:004154C0 var_4C          = dword ptr -4Ch
.text:004154C0 var_4           = dword ptr -4
.text:004154C0 arg_0           = dword ptr  4
.text:004154C0 arg_4           = dword ptr  8
.text:004154C0
.text:004154C0                 sub     esp, 7Ch
.text:004154C3                 mov     ecx, ds:dword_421A90
.text:004154C9                 mov     [esp+7Ch+var_4], ebx
.text:004154CD                 mov     edx, [esp+7Ch+arg_0]
.text:004154D4                 mov     ebx, [esp+7Ch+arg_4]
.text:004154DB                 test    ecx, ecx
.text:004154DD                 jnz     short loc_4154F7
.text:004154DF                 mov     [esp+7Ch+lpFileName], edx ; lpFileName
.text:004154E2                 mov     [esp+7Ch+var_78], ebx ; int
.text:004154E6                 call    sub_419E90
.text:004154EB                 mov     edx, eax
.text:004154ED
.text:004154ED loc_4154ED:                             ; CODE XREF: sub_4154C0+56↓j
.text:004154ED                                         ; sub_4154C0+82↓j ...
.text:004154ED                 mov     ebx, [esp+7Ch+var_4]
.text:004154F1                 mov     eax, edx
.text:004154F3                 add     esp, 7Ch
.text:004154F6                 retn
.text:004154F7 ; ---------------------------------------------------------------------------
.text:004154F7
.text:004154F7 loc_4154F7:                             ; CODE XREF: sub_4154C0+1D↑j
.text:004154F7                 mov     [esp+7Ch+var_78], edx ; char *
.text:004154FB                 lea     ecx, [esp+7Ch+var_6C]
.text:004154FF                 mov     [esp+7Ch+var_74], ecx ; int
.text:00415503                 mov     [esp+7Ch+lpFileName], 0 ; LPCSTR
.text:0041550A                 call    sub_419720
.text:0041550F                 test    eax, eax
.text:00415511                 mov     edx, 0FFFFFFFFh
.text:00415516                 jnz     short loc_4154ED
.text:00415518                 and     ebx, 7
.text:0041551B                 jz      short loc_415540
.text:0041551D                 mov     edx, ds:dword_4213E0
.text:00415523                 test    edx, edx
.text:00415525                 jz      loc_4155A9
.text:0041552B
.text:0041552B loc_41552B:                             ; CODE XREF: sub_4154C0+108↓j
.text:0041552B                 mov     eax, ds:dword_4213C0
.text:00415530                 test    eax, eax
.text:00415532                 jnz     short loc_415544
.text:00415534                 test    bl, 1
.text:00415537                 jz      short loc_415540
.text:00415539                 test    byte ptr [esp+7Ch+var_6C], 49h
.text:0041553E                 jz      short loc_415544
.text:00415540
.text:00415540 loc_415540:                             ; CODE XREF: sub_4154C0+5B↑j
.text:00415540                                         ; sub_4154C0+77↑j
.text:00415540                 xor     edx, edx
.text:00415542                 jmp     short loc_4154ED
.text:00415544 ; ---------------------------------------------------------------------------
.text:00415544
.text:00415544 loc_415544:                             ; CODE XREF: sub_4154C0+72↑j
.text:00415544                                         ; sub_4154C0+7E↑j
.text:00415544                 cmp     eax, [esp+7Ch+var_50]
.text:00415548                 jz      short loc_415599
.text:0041554A                 mov     eax, [esp+7Ch+var_4C]
.text:0041554E                 cmp     ds:dword_4213D0, eax
.text:00415554                 jz      short loc_415562
.text:00415556                 mov     [esp+7Ch+lpFileName], eax
.text:00415559                 call    sub_419E20
.text:0041555E                 test    eax, eax
.text:00415560                 jz      short loc_415591
.text:00415562
.text:00415562 loc_415562:                             ; CODE XREF: sub_4154C0+94↑j
.text:00415562                 mov     ecx, [esp+7Ch+var_6C]
.text:00415566                 lea     eax, ds:0[ebx*8]
.text:0041556D                 and     eax, ecx
.text:0041556F                 shr     eax, 3
.text:00415572
.text:00415572 loc_415572:                             ; CODE XREF: sub_4154C0+D7↓j
.text:00415572                                         ; sub_4154C0+E7↓j
.text:00415572                 xor     edx, edx
.text:00415574                 cmp     eax, ebx
.text:00415576                 jz      loc_4154ED
.text:0041557C                 call    _errno
.text:00415581                 mov     dword ptr [eax], 0Dh
.text:00415587                 mov     edx, 0FFFFFFFFh
.text:0041558C                 jmp     loc_4154ED
.text:00415591 ; ---------------------------------------------------------------------------
.text:00415591
.text:00415591 loc_415591:                             ; CODE XREF: sub_4154C0+A0↑j
.text:00415591                 mov     eax, [esp+7Ch+var_6C]
.text:00415595                 and     eax, ebx
.text:00415597                 jmp     short loc_415572
.text:00415599 ; ---------------------------------------------------------------------------
.text:00415599
.text:00415599 loc_415599:                             ; CODE XREF: sub_4154C0+88↑j
.text:00415599                 mov     edx, [esp+7Ch+var_6C]
.text:0041559D                 mov     eax, ebx
.text:0041559F                 shl     eax, 6
.text:004155A2                 and     eax, edx
.text:004155A4                 shr     eax, 6
.text:004155A7                 jmp     short loc_415572
.text:004155A9 ; ---------------------------------------------------------------------------
.text:004155A9
.text:004155A9 loc_4155A9:                             ; CODE XREF: sub_4154C0+65↑j
.text:004155A9                 mov     ecx, 1
.text:004155AE                 mov     ds:dword_4213E0, ecx
.text:004155B4                 call    sub_4198B0
.text:004155B9                 mov     ds:dword_4213C0, eax
.text:004155BE                 call    sub_419E80
.text:004155C3                 mov     ds:dword_4213D0, eax
.text:004155C8                 jmp     loc_41552B
.text:004155C8 sub_4154C0      endp
.text:004155C8
.text:004155C8 ; ---------------------------------------------------------------------------
.text:004155CD                 align 10h
.text:004155D0
.text:004155D0 ; =============== S U B R O U T I N E =======================================
.text:004155D0
.text:004155D0
.text:004155D0 sub_4155D0      proc near               ; CODE XREF: sub_4058C0+19D↑p
.text:004155D0                                         ; sub_4058C0+44E↑p
.text:004155D0
.text:004155D0 hNamedPipe      = dword ptr -0Ch
.text:004155D0 var_8           = dword ptr -8
.text:004155D0 var_4           = dword ptr -4
.text:004155D0 arg_0           = dword ptr  4
.text:004155D0 arg_4           = dword ptr  8
.text:004155D0
.text:004155D0                 sub     esp, 0Ch
.text:004155D3                 mov     edx, [esp+0Ch+arg_4]
.text:004155D7                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:004155DE                 mov     [esp+0Ch+var_4], edx ; int
.text:004155E2                 mov     edx, [esp+0Ch+arg_0]
.text:004155E6                 mov     [esp+0Ch+var_8], edx ; int
.text:004155EA                 call    sub_415840
.text:004155EF                 add     esp, 0Ch
.text:004155F2                 retn
.text:004155F2 sub_4155D0      endp
.text:004155F2
.text:004155F2 ; ---------------------------------------------------------------------------
.text:004155F3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:004155F3                                         ; DATA XREF: .text:004156DE↓o
.text:00415606 aModeO          db 'mode:      %#o',0Ah,0
.text:00415606                                         ; DATA XREF: .text:004156F4↓o
.text:00415616 aUidLd          db 'uid:       %ld',0Ah,0
.text:00415616                                         ; DATA XREF: .text:00415707↓o
.text:00415626 aGidLd          db 'gid:       %ld',0Ah,0
.text:00415626                                         ; DATA XREF: .text:0041571A↓o
.text:00415636 aDevLu          db 'dev:       %lu',0Ah,0
.text:00415636                                         ; DATA XREF: .text:0041572D↓o
.text:00415646 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00415646                                         ; DATA XREF: .text:00415740↓o
.text:00415656 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00415656                                         ; DATA XREF: .text:00415756↓o
.text:00415668 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00415668                                         ; DATA XREF: .text:0041576D↓o
.text:00415677 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00415677                                         ; DATA XREF: .text:00415783↓o
.text:00415689 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00415689                                         ; DATA XREF: .text:004157A9↓o
.text:0041569C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0041569C                                         ; DATA XREF: .text:004157CB↓o
.text:004156AF aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:004156AF                                         ; DATA XREF: .text:004157ED↓o
.text:004156C3                 align 10h
.text:004156D0                 push    ebx
.text:004156D1                 sub     esp, 18h
.text:004156D4                 mov     ebx, [esp+20h]
.text:004156D8                 mov     edx, [ebx+8]
.text:004156DB                 mov     ecx, [ebx+0Ch]
.text:004156DE                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:004156E5                 mov     [esp+4], edx
.text:004156E9                 mov     [esp+8], ecx
.text:004156ED                 call    printf
.text:004156F2                 mov     ecx, [ebx]
.text:004156F4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:004156FB                 mov     [esp+4], ecx
.text:004156FF                 call    printf
.text:00415704                 mov     edx, [ebx+1Ch]
.text:00415707                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0041570E                 mov     [esp+4], edx
.text:00415712                 call    printf
.text:00415717                 mov     ecx, [ebx+20h]
.text:0041571A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00415721                 mov     [esp+4], ecx
.text:00415725                 call    printf
.text:0041572A                 mov     edx, [ebx+10h]
.text:0041572D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00415734                 mov     [esp+4], edx
.text:00415738                 call    printf
.text:0041573D                 mov     ecx, [ebx+18h]
.text:00415740                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00415747                 mov     [esp+4], ecx
.text:0041574B                 call    printf
.text:00415750                 mov     edx, [ebx+30h]
.text:00415753                 mov     ecx, [ebx+34h]
.text:00415756                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0041575D                 mov     [esp+4], edx
.text:00415761                 mov     [esp+8], ecx
.text:00415765                 call    printf
.text:0041576A                 mov     ecx, [ebx+50h]
.text:0041576D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00415774                 mov     [esp+4], ecx
.text:00415778                 call    printf
.text:0041577D                 mov     ecx, [ebx+5Ch]
.text:00415780                 mov     edx, [ebx+58h]
.text:00415783                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0041578A                 mov     [esp+8], ecx
.text:0041578E                 mov     [esp+4], edx
.text:00415792                 call    printf
.text:00415797                 lea     edx, [ebx+38h]
.text:0041579A                 mov     [esp], edx
.text:0041579D                 call    ctime
.text:004157A2                 mov     [esp+8], eax
.text:004157A6                 mov     ecx, [ebx+38h]
.text:004157A9                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:004157B0                 mov     [esp+4], ecx
.text:004157B4                 call    printf
.text:004157B9                 lea     edx, [ebx+40h]
.text:004157BC                 mov     [esp], edx
.text:004157BF                 call    ctime
.text:004157C4                 mov     [esp+8], eax
.text:004157C8                 mov     ecx, [ebx+40h]
.text:004157CB                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:004157D2                 mov     [esp+4], ecx
.text:004157D6                 call    printf
.text:004157DB                 lea     edx, [ebx+48h]
.text:004157DE                 mov     [esp], edx
.text:004157E1                 call    ctime
.text:004157E6                 mov     [esp+8], eax
.text:004157EA                 mov     edx, [ebx+48h]
.text:004157ED                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:004157F4                 mov     [esp+4], edx
.text:004157F8                 call    printf
.text:004157FD                 add     esp, 18h
.text:00415800                 xor     eax, eax
.text:00415802                 pop     ebx
.text:00415803                 retn
.text:00415803 ; ---------------------------------------------------------------------------
.text:00415804                 align 10h
.text:00415810 ; const char aFxstat64BadFil[]
.text:00415810 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00415810                                         ; DATA XREF: sub_415840+7B↓o
.text:00415834                 align 10h
.text:00415840
.text:00415840 ; =============== S U B R O U T I N E =======================================
.text:00415840
.text:00415840
.text:00415840 ; int __cdecl sub_415840(HANDLE hNamedPipe, int, int)
.text:00415840 sub_415840      proc near               ; CODE XREF: sub_4155D0+1A↑p
.text:00415840                                         ; .text:00418909↓p
.text:00415840
.text:00415840 FileHandle      = dword ptr -1Ch
.text:00415840 var_18          = dword ptr -18h
.text:00415840 var_C           = dword ptr -0Ch
.text:00415840 var_8           = dword ptr -8
.text:00415840 var_4           = dword ptr -4
.text:00415840 hNamedPipe      = dword ptr  4
.text:00415840 arg_4           = dword ptr  8
.text:00415840 arg_8           = dword ptr  0Ch
.text:00415840
.text:00415840                 sub     esp, 1Ch
.text:00415843                 mov     edx, [esp+1Ch+arg_4]
.text:00415847                 mov     [esp+1Ch+var_C], ebx
.text:0041584B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0041584F                 mov     [esp+1Ch+var_8], esi
.text:00415853                 mov     esi, [esp+1Ch+arg_8]
.text:00415857                 test    ebx, ebx
.text:00415859                 mov     [esp+1Ch+var_4], edi
.text:0041585D                 jnz     short loc_415897
.text:0041585F                 test    edx, edx
.text:00415861                 js      short loc_4158B7
.text:00415863                 test    esi, esi
.text:00415865                 jz      short loc_415897
.text:00415867                 cld
.text:00415868                 mov     eax, ebx
.text:0041586A                 mov     edi, esi
.text:0041586C                 mov     ecx, 18h
.text:00415871                 rep stosd
.text:00415873                 mov     [esp+1Ch+arg_4], esi ; int
.text:00415877                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0041587A                 call    _get_osfhandle
.text:0041587F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00415883                 mov     ebx, [esp+1Ch+var_C]
.text:00415887                 mov     esi, [esp+1Ch+var_8]
.text:0041588B                 mov     edi, [esp+1Ch+var_4]
.text:0041588F                 add     esp, 1Ch
.text:00415892                 jmp     sub_415C20
.text:00415897 ; ---------------------------------------------------------------------------
.text:00415897
.text:00415897 loc_415897:                             ; CODE XREF: sub_415840+1D↑j
.text:00415897                                         ; sub_415840+25↑j
.text:00415897                 call    _errno
.text:0041589C                 mov     dword ptr [eax], 16h
.text:004158A2
.text:004158A2 loc_4158A2:                             ; CODE XREF: sub_415840+92↓j
.text:004158A2                 mov     ebx, [esp+1Ch+var_C]
.text:004158A6                 mov     eax, 0FFFFFFFFh
.text:004158AB                 mov     esi, [esp+1Ch+var_8]
.text:004158AF                 mov     edi, [esp+1Ch+var_4]
.text:004158B3                 add     esp, 1Ch
.text:004158B6                 retn
.text:004158B7 ; ---------------------------------------------------------------------------
.text:004158B7
.text:004158B7 loc_4158B7:                             ; CODE XREF: sub_415840+21↑j
.text:004158B7                 mov     [esp+1Ch+var_18], edx
.text:004158BB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:004158C2                 call    printf
.text:004158C7                 call    _errno
.text:004158CC                 mov     dword ptr [eax], 9
.text:004158D2                 jmp     short loc_4158A2
.text:004158D2 sub_415840      endp
.text:004158D2
.text:004158D2 ; ---------------------------------------------------------------------------
.text:004158D4                 db 1Ch dup(90h)
.text:004158F0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004158F0                                         ; DATA XREF: .data:off_420094↓o
.text:00415904 ; const CHAR ModuleName[]
.text:00415904 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_415930+11↓o
.text:00415904                                         ; sub_415AA0+C↓o ...
.text:00415911 ; const CHAR ProcName[]
.text:00415911 ProcName        db 'GetFileAttributesExA',0
.text:00415911                                         ; DATA XREF: sub_415930+28↓o
.text:00415926                 align 10h
.text:00415930
.text:00415930 ; =============== S U B R O U T I N E =======================================
.text:00415930
.text:00415930
.text:00415930 ; int __cdecl sub_415930(LPCSTR lpFileName, int)
.text:00415930 sub_415930      proc near               ; CODE XREF: .text:00416AD4↓p
.text:00415930                                         ; sub_416ED0+37↓p
.text:00415930
.text:00415930 lpModuleName    = dword ptr -18Ch
.text:00415930 lpProcName      = dword ptr -188h
.text:00415930 var_184         = dword ptr -184h
.text:00415930 var_170         = dword ptr -170h
.text:00415930 var_164         = dword ptr -164h
.text:00415930 hModule         = dword ptr -160h
.text:00415930 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00415930 lpFileName      = dword ptr  4
.text:00415930 arg_4           = dword ptr  8
.text:00415930
.text:00415930                 push    ebp
.text:00415931                 push    edi
.text:00415932                 push    esi
.text:00415933                 push    ebx
.text:00415934                 sub     esp, 17Ch
.text:0041593A                 mov     ebx, [esp+18Ch+arg_4]
.text:00415941                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:00415948                 call    GetModuleHandleA
.text:0041594D                 sub     esp, 4
.text:00415950                 mov     [esp+18Ch+hModule], eax
.text:00415954                 mov     edx, [esp+18Ch+hModule]
.text:00415958                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00415960                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00415963                 call    GetProcAddress
.text:00415968                 sub     esp, 8
.text:0041596B                 mov     ebp, eax
.text:0041596D                 mov     eax, [esp+18Ch+lpFileName]
.text:00415974                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00415977                 call    GetFileAttributesA
.text:0041597C                 sub     esp, 4
.text:0041597F                 mov     [esp+18Ch+var_164], eax
.text:00415983                 xor     eax, eax
.text:00415985                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0041598A                 jz      short loc_4159E1
.text:0041598C                 cld
.text:0041598D                 mov     ecx, 50h ; 'P'
.text:00415992                 lea     esi, [esp+18Ch+FindFileData]
.text:00415996                 mov     edi, esi
.text:00415998                 test    ebp, ebp
.text:0041599A                 rep stosd
.text:0041599C                 mov     [esp+18Ch+var_170], 0
.text:004159A4                 jz      short loc_4159C5
.text:004159A6                 mov     [esp+18Ch+var_184], ebx
.text:004159AA                 mov     ecx, [esp+18Ch+lpFileName]
.text:004159B1                 mov     [esp+18Ch+lpProcName], 0
.text:004159B9                 mov     [esp+18Ch+lpModuleName], ecx
.text:004159BC                 call    ebp
.text:004159BE                 sub     esp, 0Ch
.text:004159C1                 mov     [esp+18Ch+var_170], eax
.text:004159C5
.text:004159C5 loc_4159C5:                             ; CODE XREF: sub_415930+74↑j
.text:004159C5                 mov     eax, [esp+18Ch+var_170]
.text:004159C9                 test    eax, eax
.text:004159CB                 jz      short loc_4159F0
.text:004159CD
.text:004159CD loc_4159CD:                             ; CODE XREF: sub_415930+131↓j
.text:004159CD                                         ; sub_415930+14B↓j
.text:004159CD                 mov     ebx, [esp+18Ch+hModule]
.text:004159D1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:004159D4                 call    FreeLibrary
.text:004159D9                 sub     esp, 4
.text:004159DC                 mov     eax, 1
.text:004159E1
.text:004159E1 loc_4159E1:                             ; CODE XREF: sub_415930+5A↑j
.text:004159E1                 add     esp, 17Ch
.text:004159E7                 pop     ebx
.text:004159E8                 pop     esi
.text:004159E9                 pop     edi
.text:004159EA                 pop     ebp
.text:004159EB                 retn
.text:004159EB ; ---------------------------------------------------------------------------
.text:004159EC                 align 10h
.text:004159F0
.text:004159F0 loc_4159F0:                             ; CODE XREF: sub_415930+9B↑j
.text:004159F0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004159F4                 mov     edx, [esp+18Ch+lpFileName]
.text:004159FB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004159FE                 call    FindFirstFileA
.text:00415A03                 sub     esp, 8
.text:00415A06                 xor     ecx, ecx
.text:00415A08                 cmp     eax, 0FFFFFFFFh
.text:00415A0B                 setnz   cl
.text:00415A0E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00415A12                 mov     [ebx], edi
.text:00415A14                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00415A18                 mov     [esp+18Ch+var_170], ecx
.text:00415A1C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00415A20                 mov     [ebx+8], esi
.text:00415A23                 mov     [ebx+4], ecx
.text:00415A26                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00415A2A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00415A2E                 mov     [ebx+0Ch], ebp
.text:00415A31                 mov     [ebx+10h], edi
.text:00415A34                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00415A38                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00415A3C                 mov     [ebx+18h], esi
.text:00415A3F                 mov     [ebx+14h], ecx
.text:00415A42                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00415A46                 mov     [ebx+1Ch], ebp
.text:00415A49                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00415A4D                 mov     [ebx+20h], edi
.text:00415A50                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00415A53                 call    FindClose
.text:00415A58                 sub     esp, 4
.text:00415A5B                 mov     esi, [esp+18Ch+var_170]
.text:00415A5F                 test    esi, esi
.text:00415A61                 jnz     loc_4159CD
.text:00415A67                 cld
.text:00415A68                 mov     eax, [esp+18Ch+var_170]
.text:00415A6C                 mov     ecx, 9
.text:00415A71                 mov     edi, ebx
.text:00415A73                 rep stosd
.text:00415A75                 mov     ebp, [esp+18Ch+var_164]
.text:00415A79                 mov     [ebx], ebp
.text:00415A7B                 jmp     loc_4159CD
.text:00415A7B sub_415930      endp
.text:00415A7B
.text:00415A7B ; ---------------------------------------------------------------------------
.text:00415A80 ; const CHAR aFindfirstfilee[]
.text:00415A80 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_415AA0+23↓o
.text:00415A91 ; const char Source[]
.text:00415A91 Source          db '\*',0               ; DATA XREF: sub_415AA0:loc_415B2D↓o
.text:00415A94                 align 10h
.text:00415AA0
.text:00415AA0 ; =============== S U B R O U T I N E =======================================
.text:00415AA0
.text:00415AA0
.text:00415AA0 ; int __cdecl sub_415AA0(char *Str)
.text:00415AA0 sub_415AA0      proc near               ; CODE XREF: .text:00416BD3↓p
.text:00415AA0                                         ; sub_416ED0+3FA↓p ...
.text:00415AA0
.text:00415AA0 lpLibFileName   = dword ptr -18Ch
.text:00415AA0 lpProcName      = dword ptr -188h
.text:00415AA0 var_184         = dword ptr -184h
.text:00415AA0 var_180         = dword ptr -180h
.text:00415AA0 var_17C         = dword ptr -17Ch
.text:00415AA0 var_178         = dword ptr -178h
.text:00415AA0 var_164         = dword ptr -164h
.text:00415AA0 hModule         = dword ptr -160h
.text:00415AA0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00415AA0 Str             = dword ptr  4
.text:00415AA0
.text:00415AA0                 push    ebp
.text:00415AA1                 push    edi
.text:00415AA2                 xor     edi, edi
.text:00415AA4                 push    esi
.text:00415AA5                 push    ebx
.text:00415AA6                 sub     esp, 17Ch
.text:00415AAC                 mov     [esp+18Ch+lpLibFileName], offset ModuleName ; "KERNEL32.DLL"
.text:00415AB3                 call    LoadLibraryA
.text:00415AB8                 sub     esp, 4
.text:00415ABB                 mov     [esp+18Ch+hModule], eax
.text:00415ABF                 mov     ecx, [esp+18Ch+hModule]
.text:00415AC3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00415ACB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00415ACE                 call    GetProcAddress
.text:00415AD3                 sub     esp, 8
.text:00415AD6                 mov     edx, [esp+18Ch+Str]
.text:00415ADD                 mov     [esp+18Ch+var_164], eax
.text:00415AE1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00415AE4                 call    strlen
.text:00415AE9                 lea     edx, [eax+5]
.text:00415AEC                 mov     ebx, eax
.text:00415AEE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00415AF1                 call    malloc
.text:00415AF6                 mov     esi, eax
.text:00415AF8                 test    esi, esi
.text:00415AFA                 mov     eax, 1
.text:00415AFF                 jz      loc_415BDD
.text:00415B05                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00415B08                 mov     ebp, [esp+18Ch+Str]
.text:00415B0F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00415B13                 call    strcpy
.text:00415B18                 movzx   eax, byte ptr [ebx+esi-1]
.text:00415B1D                 cmp     al, 2Fh ; '/'
.text:00415B1F                 jz      loc_415C0B
.text:00415B25                 cmp     al, 5Ch ; '\'
.text:00415B27                 jz      loc_415C0B
.text:00415B2D
.text:00415B2D loc_415B2D:                             ; CODE XREF: sub_415AA0+170↓j
.text:00415B2D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00415B35                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00415B38                 call    strcat
.text:00415B3D                 mov     eax, [esp+18Ch+var_164]
.text:00415B41                 test    eax, eax
.text:00415B43                 jz      loc_415C05
.text:00415B49                 mov     [esp+18Ch+var_178], 0
.text:00415B51                 lea     ebp, [esp+18Ch+FindFileData]
.text:00415B55                 mov     [esp+18Ch+var_17C], 0
.text:00415B5D                 mov     [esp+18Ch+var_180], 1
.text:00415B65                 mov     [esp+18Ch+var_184], ebp
.text:00415B69                 mov     [esp+18Ch+lpProcName], 0
.text:00415B71                 mov     [esp+18Ch+lpLibFileName], esi
.text:00415B74                 call    [esp+18Ch+var_164]
.text:00415B78                 sub     esp, 18h
.text:00415B7B                 mov     ebx, eax
.text:00415B7D                 cmp     eax, 0FFFFFFFFh
.text:00415B80                 jz      short loc_415BE8
.text:00415B82                 lea     esi, [esi+0]
.text:00415B89                 lea     edi, [edi+0]
.text:00415B90
.text:00415B90 loc_415B90:                             ; CODE XREF: sub_415AA0+109↓j
.text:00415B90                                         ; sub_415AA0+161↓j
.text:00415B90                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00415B95                 jz      short loc_415B98
.text:00415B97                 inc     edi
.text:00415B98
.text:00415B98 loc_415B98:                             ; CODE XREF: sub_415AA0+F5↑j
.text:00415B98                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00415B9C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00415B9F                 call    FindNextFileA
.text:00415BA4                 sub     esp, 8
.text:00415BA7                 test    eax, eax
.text:00415BA9                 jnz     short loc_415B90
.text:00415BAB                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00415BAE                 call    FindClose
.text:00415BB3                 sub     esp, 4
.text:00415BB6                 mov     esi, [esp+18Ch+hModule]
.text:00415BBA                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00415BBD                 call    FreeLibrary
.text:00415BC2                 sub     esp, 4
.text:00415BC5                 mov     ebx, [esp+18Ch+Str]
.text:00415BCC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00415BCF                 call    sub_4189A0
.text:00415BD4                 test    eax, eax
.text:00415BD6                 jz      short loc_415BDB
.text:00415BD8                 add     edi, 2
.text:00415BDB
.text:00415BDB loc_415BDB:                             ; CODE XREF: sub_415AA0+136↑j
.text:00415BDB                 mov     eax, edi
.text:00415BDD
.text:00415BDD loc_415BDD:                             ; CODE XREF: sub_415AA0+5F↑j
.text:00415BDD                                         ; sub_415AA0+163↓j
.text:00415BDD                 add     esp, 17Ch
.text:00415BE3                 pop     ebx
.text:00415BE4                 pop     esi
.text:00415BE5                 pop     edi
.text:00415BE6                 pop     ebp
.text:00415BE7                 retn
.text:00415BE8 ; ---------------------------------------------------------------------------
.text:00415BE8
.text:00415BE8 loc_415BE8:                             ; CODE XREF: sub_415AA0+E0↑j
.text:00415BE8                                         ; sub_415AA0+169↓j
.text:00415BE8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00415BEC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00415BEF                 call    FindFirstFileA
.text:00415BF4                 mov     ebx, eax
.text:00415BF6                 sub     esp, 8
.text:00415BF9                 cmp     ebx, 0FFFFFFFFh
.text:00415BFC                 mov     eax, 2
.text:00415C01                 jnz     short loc_415B90
.text:00415C03                 jmp     short loc_415BDD
.text:00415C05 ; ---------------------------------------------------------------------------
.text:00415C05
.text:00415C05 loc_415C05:                             ; CODE XREF: sub_415AA0+A3↑j
.text:00415C05                 lea     ebp, [esp+18Ch+FindFileData]
.text:00415C09                 jmp     short loc_415BE8
.text:00415C0B ; ---------------------------------------------------------------------------
.text:00415C0B
.text:00415C0B loc_415C0B:                             ; CODE XREF: sub_415AA0+7F↑j
.text:00415C0B                                         ; sub_415AA0+87↑j
.text:00415C0B                 mov     byte ptr [ebx+esi-1], 0
.text:00415C10                 jmp     loc_415B2D
.text:00415C10 sub_415AA0      endp
.text:00415C10
.text:00415C10 ; ---------------------------------------------------------------------------
.text:00415C15                 align 10h
.text:00415C20
.text:00415C20 ; =============== S U B R O U T I N E =======================================
.text:00415C20
.text:00415C20
.text:00415C20 ; int __cdecl sub_415C20(HANDLE hNamedPipe, int)
.text:00415C20 sub_415C20      proc near               ; CODE XREF: sub_415840+52↑j
.text:00415C20                                         ; sub_417750-3B9↓p
.text:00415C20
.text:00415C20 hFile           = dword ptr -0ECh
.text:00415C20 lpFileInformation= dword ptr -0E8h
.text:00415C20 nBufferSize     = dword ptr -0E4h
.text:00415C20 lpBytesRead     = dword ptr -0E0h
.text:00415C20 lpTotalBytesAvail= dword ptr -0DCh
.text:00415C20 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00415C20 var_C4          = dword ptr -0C4h
.text:00415C20 var_C0          = dword ptr -0C0h
.text:00415C20 var_BC          = dword ptr -0BCh
.text:00415C20 var_B8          = dword ptr -0B8h
.text:00415C20 var_B4          = dword ptr -0B4h
.text:00415C20 var_B0          = dword ptr -0B0h
.text:00415C20 var_AC          = dword ptr -0ACh
.text:00415C20 var_A8          = dword ptr -0A8h
.text:00415C20 TotalBytesAvail = dword ptr -0A0h
.text:00415C20 var_9C          = dword ptr -9Ch
.text:00415C20 var_98          = dword ptr -98h
.text:00415C20 var_94          = dword ptr -94h
.text:00415C20 var_90          = dword ptr -90h
.text:00415C20 var_8C          = dword ptr -8Ch
.text:00415C20 var_88          = dword ptr -88h
.text:00415C20 var_84          = dword ptr -84h
.text:00415C20 var_80          = dword ptr -80h
.text:00415C20 var_7C          = dword ptr -7Ch
.text:00415C20 var_78          = dword ptr -78h
.text:00415C20 var_74          = dword ptr -74h
.text:00415C20 var_70          = dword ptr -70h
.text:00415C20 var_6C          = dword ptr -6Ch
.text:00415C20 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00415C20 hNamedPipe      = dword ptr  4
.text:00415C20 arg_4           = dword ptr  8
.text:00415C20
.text:00415C20                 push    ebp
.text:00415C21                 mov     eax, 0FFFFFFFFh
.text:00415C26                 push    edi
.text:00415C27                 push    esi
.text:00415C28                 push    ebx
.text:00415C29                 sub     esp, 0DCh
.text:00415C2F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00415C36                 mov     ebp, [esp+0ECh+arg_4]
.text:00415C3D                 cmp     esi, 0FFFFFFFFh
.text:00415C40                 jz      loc_415FC1
.text:00415C46                 cld
.text:00415C47                 xor     eax, eax
.text:00415C49                 lea     ebx, [esp+0ECh+FileInformation]
.text:00415C50                 mov     ecx, 0Dh
.text:00415C55                 mov     edi, ebx
.text:00415C57                 rep stosd
.text:00415C59                 mov     dword ptr [ebp+18h], 1
.text:00415C60                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00415C63                 call    GetFileType
.text:00415C68                 sub     esp, 4
.text:00415C6B                 xor     edx, edx
.text:00415C6D                 cmp     eax, 2
.text:00415C70                 jz      loc_4160A0
.text:00415C76                 cmp     eax, 3
.text:00415C79                 jz      loc_416090
.text:00415C7F
.text:00415C7F loc_415C7F:                             ; CODE XREF: sub_415C20+475↓j
.text:00415C7F                                         ; sub_415C20+485↓j
.text:00415C7F                 or      [ebp+0], edx
.text:00415C82                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00415C86                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00415C89                 call    GetFileInformationByHandle
.text:00415C8E                 sub     esp, 8
.text:00415C91                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00415C98                 test    ecx, ecx
.text:00415C9A                 jnz     short loc_415CD0
.text:00415C9C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00415CA3                 test    edx, edx
.text:00415CA5                 jnz     short loc_415CD0
.text:00415CA7                 mov     edx, [ebp+0]
.text:00415CAA                 and     edx, 0F000h
.text:00415CB0                 cmp     edx, 1000h
.text:00415CB6                 jz      loc_416026
.text:00415CBC
.text:00415CBC loc_415CBC:                             ; CODE XREF: sub_415C20+459↓j
.text:00415CBC                                         ; sub_415C20+465↓j
.text:00415CBC                 test    ecx, ecx
.text:00415CBE                 jnz     short loc_415CD0
.text:00415CC0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00415CC7                 test    edx, edx
.text:00415CC9                 jz      loc_416004
.text:00415CCF                 nop
.text:00415CD0
.text:00415CD0 loc_415CD0:                             ; CODE XREF: sub_415C20+7A↑j
.text:00415CD0                                         ; sub_415C20+85↑j ...
.text:00415CD0                 cld
.text:00415CD1                 mov     esi, ebx
.text:00415CD3                 mov     dword ptr [ebp+14h], 0
.text:00415CDA                 lea     edi, [esp+0ECh+var_9C]
.text:00415CDE                 mov     ecx, 0Dh
.text:00415CE3                 rep movsd
.text:00415CE5                 xor     ebx, ebx
.text:00415CE7                 xor     edi, edi
.text:00415CE9                 mov     edx, [esp+0ECh+var_6C]
.text:00415CF0                 mov     esi, [esp+0ECh+var_70]
.text:00415CF4                 or      edx, ebx
.text:00415CF6                 mov     ebx, [esp+0ECh+var_9C]
.text:00415CFA                 mov     [ebp+8], edx
.text:00415CFD                 or      edi, esi
.text:00415CFF                 xor     edx, edx
.text:00415D01                 mov     [ebp+0Ch], edi
.text:00415D04                 test    bl, 10h
.text:00415D07                 mov     esi, [esp+0ECh+var_80]
.text:00415D0B                 setz    dl
.text:00415D0E                 mov     [ebp+10h], esi
.text:00415D11                 dec     edx
.text:00415D12                 and     edx, 0FFFFC000h
.text:00415D18                 add     edx, 8000h
.text:00415D1E                 or      edx, 124h
.text:00415D24                 test    bl, 1
.text:00415D27                 movzx   eax, dx
.text:00415D2A                 jnz     short loc_415D31
.text:00415D2C                 or      eax, 92h
.text:00415D31
.text:00415D31 loc_415D31:                             ; CODE XREF: sub_415C20+10A↑j
.text:00415D31                 or      [ebp+0], eax
.text:00415D34                 xor     edx, edx
.text:00415D36                 mov     ebx, [esp+0ECh+var_7C]
.text:00415D3A                 mov     ecx, [esp+0ECh+var_78]
.text:00415D3E                 mov     eax, edx
.text:00415D40                 xor     esi, esi
.text:00415D42                 mov     edx, [esp+0ECh+var_8C]
.text:00415D46                 mov     edi, ebx
.text:00415D48                 or      eax, edi
.text:00415D4A                 mov     [esp+0ECh+var_A8], eax
.text:00415D4E                 mov     ebx, ecx
.text:00415D50                 mov     edi, [esp+0ECh+var_74]
.text:00415D54                 or      ebx, esi
.text:00415D56                 mov     esi, [esp+0ECh+var_A8]
.text:00415D5A                 mov     [esp+0ECh+var_AC], ebx
.text:00415D5E                 xor     ebx, ebx
.text:00415D60                 mov     ecx, [esp+0ECh+var_AC]
.text:00415D64                 mov     [ebp+34h], esi
.text:00415D67                 mov     esi, [esp+0ECh+var_90]
.text:00415D6B                 mov     [ebp+18h], edi
.text:00415D6E                 xor     edi, edi
.text:00415D70                 or      esi, ebx
.text:00415D72                 mov     [ebp+30h], ecx
.text:00415D75                 or      edi, edx
.text:00415D77                 mov     edx, esi
.text:00415D79                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00415D81                 sub     edx, 0D53E8000h
.text:00415D87                 mov     ebx, edi
.text:00415D89                 sbb     ebx, 19DB1DEh
.text:00415D8F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00415D93                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415D9B                 mov     [esp+0ECh+hFile], edx
.text:00415D9E                 call    sub_41EAF0
.text:00415DA3                 mov     ecx, eax
.text:00415DA5                 shr     eax, 1Fh
.text:00415DA8                 dec     eax
.text:00415DA9                 and     ecx, eax
.text:00415DAB                 mov     [ebp+38h], ecx
.text:00415DAE                 mov     [esp+0ECh+hFile], esi
.text:00415DB1                 mov     [esp+0ECh+lpFileInformation], edi
.text:00415DB5                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00415DBD                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415DC5                 call    sub_41E970
.text:00415DCA                 lea     ebx, [eax+eax*4]
.text:00415DCD                 xor     ecx, ecx
.text:00415DCF                 lea     esi, [ebx+ebx*4]
.text:00415DD2                 shl     esi, 2
.text:00415DD5                 mov     edi, esi
.text:00415DD7                 shr     edi, 1Fh
.text:00415DDA                 dec     edi
.text:00415DDB                 and     edi, esi
.text:00415DDD                 mov     [ebp+3Ch], edi
.text:00415DE0                 mov     esi, [esp+0ECh+var_98]
.text:00415DE4                 xor     edi, edi
.text:00415DE6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00415DEE                 mov     edx, [esp+0ECh+var_94]
.text:00415DF2                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415DFA                 or      esi, ecx
.text:00415DFC                 or      edi, edx
.text:00415DFE                 mov     edx, esi
.text:00415E00                 mov     ecx, edi
.text:00415E02                 sub     edx, 0D53E8000h
.text:00415E08                 sbb     ecx, 19DB1DEh
.text:00415E0E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00415E12                 mov     [esp+0ECh+hFile], edx
.text:00415E15                 call    sub_41EAF0
.text:00415E1A                 mov     ebx, eax
.text:00415E1C                 shr     eax, 1Fh
.text:00415E1F                 dec     eax
.text:00415E20                 and     ebx, eax
.text:00415E22                 mov     [ebp+48h], ebx
.text:00415E25                 xor     ebx, ebx
.text:00415E27                 mov     [esp+0ECh+hFile], esi
.text:00415E2A                 mov     [esp+0ECh+lpFileInformation], edi
.text:00415E2E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00415E36                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415E3E                 call    sub_41E970
.text:00415E43                 lea     ecx, [eax+eax*4]
.text:00415E46                 lea     esi, [ecx+ecx*4]
.text:00415E49                 shl     esi, 2
.text:00415E4C                 mov     edi, esi
.text:00415E4E                 shr     edi, 1Fh
.text:00415E51                 dec     edi
.text:00415E52                 and     edi, esi
.text:00415E54                 mov     [ebp+4Ch], edi
.text:00415E57                 mov     esi, [esp+0ECh+var_88]
.text:00415E5B                 xor     edi, edi
.text:00415E5D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00415E65                 mov     edx, [esp+0ECh+var_84]
.text:00415E69                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415E71                 or      esi, ebx
.text:00415E73                 or      edi, edx
.text:00415E75                 mov     edx, esi
.text:00415E77                 mov     ebx, edi
.text:00415E79                 sub     edx, 0D53E8000h
.text:00415E7F                 sbb     ebx, 19DB1DEh
.text:00415E85                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00415E89                 mov     [esp+0ECh+hFile], edx
.text:00415E8C                 call    sub_41EAF0
.text:00415E91                 mov     ecx, eax
.text:00415E93                 shr     eax, 1Fh
.text:00415E96                 dec     eax
.text:00415E97                 and     ecx, eax
.text:00415E99                 mov     [ebp+40h], ecx
.text:00415E9C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00415EA0                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00415EA8                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415EB0                 mov     [esp+0ECh+hFile], esi
.text:00415EB3                 call    sub_41E970
.text:00415EB8                 mov     dword ptr [ebp+50h], 200h
.text:00415EBF                 lea     ebx, [eax+eax*4]
.text:00415EC2                 mov     edi, [esp+0ECh+var_A8]
.text:00415EC6                 lea     edx, [ebx+ebx*4]
.text:00415EC9                 mov     eax, [esp+0ECh+var_AC]
.text:00415ECD                 shl     edx, 2
.text:00415ED0                 mov     ecx, edx
.text:00415ED2                 shr     ecx, 1Fh
.text:00415ED5                 dec     ecx
.text:00415ED6                 and     ecx, edx
.text:00415ED8                 test    edi, edi
.text:00415EDA                 mov     edx, [esp+0ECh+var_A8]
.text:00415EDE                 mov     [ebp+44h], ecx
.text:00415EE1                 js      loc_415FF7
.text:00415EE7
.text:00415EE7 loc_415EE7:                             ; CODE XREF: sub_415C20+3DF↓j
.text:00415EE7                 mov     edi, [esp+0ECh+var_AC]
.text:00415EEB                 xor     esi, esi
.text:00415EED                 mov     ecx, eax
.text:00415EEF                 shrd    ecx, edx, 9
.text:00415EF3                 mov     ebx, edx
.text:00415EF5                 mov     eax, esi
.text:00415EF7                 and     edi, 1FFh
.text:00415EFD                 sar     ebx, 9
.text:00415F00                 or      eax, edi
.text:00415F02                 jz      short loc_415F0A
.text:00415F04                 add     ecx, 1
.text:00415F07                 adc     ebx, 0
.text:00415F0A
.text:00415F0A loc_415F0A:                             ; CODE XREF: sub_415C20+2E2↑j
.text:00415F0A                 mov     [ebp+5Ch], ebx
.text:00415F0D                 mov     esi, dword_420090
.text:00415F13                 xor     edi, edi
.text:00415F15                 mov     [ebp+58h], ecx
.text:00415F18                 mov     ebx, dword_420090
.text:00415F1E                 mov     ecx, [esp+0ECh+var_A8]
.text:00415F22                 mov     edx, [esp+0ECh+var_AC]
.text:00415F26                 mov     [ebp+50h], ebx
.text:00415F29                 shr     ebx, 9
.text:00415F2C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00415F30                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00415F34                 mov     [esp+0ECh+nBufferSize], esi
.text:00415F38                 mov     [esp+0ECh+hFile], edx
.text:00415F3B                 call    sub_41EAF0
.text:00415F40                 mov     [esp+0ECh+lpBytesRead], edi
.text:00415F44                 mov     ecx, [esp+0ECh+var_AC]
.text:00415F48                 mov     edi, [esp+0ECh+var_A8]
.text:00415F4C                 mov     [esp+0ECh+var_BC], ebx
.text:00415F50                 mov     [esp+0ECh+var_B4], eax
.text:00415F54                 mov     [esp+0ECh+var_B0], edx
.text:00415F58                 mov     [esp+0ECh+var_B8], 0
.text:00415F60                 mov     [esp+0ECh+nBufferSize], esi
.text:00415F64                 mov     [esp+0ECh+hFile], ecx
.text:00415F67                 mov     [esp+0ECh+lpFileInformation], edi
.text:00415F6B                 call    sub_41E970
.text:00415F70                 mov     ebx, edx
.text:00415F72                 or      ebx, eax
.text:00415F74                 jz      short loc_415FD0
.text:00415F76                 mov     edi, [esp+0ECh+var_B4]
.text:00415F7A                 mov     esi, [esp+0ECh+var_B0]
.text:00415F7E                 mov     eax, [esp+0ECh+var_BC]
.text:00415F82                 mov     [esp+0ECh+var_C4], edi
.text:00415F86                 mov     ecx, [esp+0ECh+var_B8]
.text:00415F8A                 add     [esp+0ECh+var_C4], 1
.text:00415F8F                 mov     [esp+0ECh+var_C0], esi
.text:00415F93                 adc     [esp+0ECh+var_C0], 0
.text:00415F98                 mul     [esp+0ECh+var_C4]
.text:00415F9C                 mov     edi, [esp+0ECh+var_C0]
.text:00415FA0                 mov     ebx, edx
.text:00415FA2                 mov     edx, [esp+0ECh+var_C4]
.text:00415FA6                 mov     esi, eax
.text:00415FA8                 mov     eax, ebx
.text:00415FAA                 imul    ecx, edx
.text:00415FAD                 mov     edx, [esp+0ECh+var_BC]
.text:00415FB1                 imul    edx, edi
.text:00415FB4                 add     eax, ecx
.text:00415FB6                 lea     edi, [edx+eax]
.text:00415FB9
.text:00415FB9 loc_415FB9:                             ; CODE XREF: sub_415C20+3D5↓j
.text:00415FB9                 mov     [ebp+58h], esi
.text:00415FBC                 xor     eax, eax
.text:00415FBE                 mov     [ebp+5Ch], edi
.text:00415FC1
.text:00415FC1 loc_415FC1:                             ; CODE XREF: sub_415C20+20↑j
.text:00415FC1                 add     esp, 0DCh
.text:00415FC7                 pop     ebx
.text:00415FC8                 pop     esi
.text:00415FC9                 pop     edi
.text:00415FCA                 pop     ebp
.text:00415FCB                 retn
.text:00415FCB ; ---------------------------------------------------------------------------
.text:00415FCC                 align 10h
.text:00415FD0
.text:00415FD0 loc_415FD0:                             ; CODE XREF: sub_415C20+354↑j
.text:00415FD0                 mov     eax, [esp+0ECh+var_B4]
.text:00415FD4                 mov     edi, [esp+0ECh+var_B8]
.text:00415FD8                 mov     ebx, [esp+0ECh+var_B4]
.text:00415FDC                 mul     [esp+0ECh+var_BC]
.text:00415FE0                 mov     ecx, [esp+0ECh+var_BC]
.text:00415FE4                 imul    ebx, edi
.text:00415FE7                 mov     esi, eax
.text:00415FE9                 mov     eax, [esp+0ECh+var_B0]
.text:00415FED                 add     edx, ebx
.text:00415FEF                 imul    ecx, eax
.text:00415FF2                 lea     edi, [ecx+edx]
.text:00415FF5                 jmp     short loc_415FB9
.text:00415FF7 ; ---------------------------------------------------------------------------
.text:00415FF7
.text:00415FF7 loc_415FF7:                             ; CODE XREF: sub_415C20+2C1↑j
.text:00415FF7                 add     eax, 1FFh
.text:00415FFC                 adc     edx, 0
.text:00415FFF                 jmp     loc_415EE7
.text:00416004 ; ---------------------------------------------------------------------------
.text:00416004
.text:00416004 loc_416004:                             ; CODE XREF: sub_415C20+A9↑j
.text:00416004                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00416007                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0041600E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00416012                 call    GetFileSize
.text:00416017                 sub     esp, 8
.text:0041601A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00416021                 jmp     loc_415CD0
.text:00416026 ; ---------------------------------------------------------------------------
.text:00416026
.text:00416026 loc_416026:                             ; CODE XREF: sub_415C20+96↑j
.text:00416026                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0041602E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00416032                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0041603A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0041603E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00416046                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0041604E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00416056                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00416059                 call    PeekNamedPipe
.text:0041605E                 sub     esp, 18h
.text:00416061                 test    eax, eax
.text:00416063                 jz      short loc_41607E
.text:00416065                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00416069                 xor     eax, eax
.text:0041606B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00416072                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00416079                 jmp     loc_415CBC
.text:0041607E ; ---------------------------------------------------------------------------
.text:0041607E
.text:0041607E loc_41607E:                             ; CODE XREF: sub_415C20+443↑j
.text:0041607E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00416085                 jmp     loc_415CBC
.text:00416085 ; ---------------------------------------------------------------------------
.text:0041608A                 align 10h
.text:00416090
.text:00416090 loc_416090:                             ; CODE XREF: sub_415C20+59↑j
.text:00416090                 mov     edx, 1000h
.text:00416095                 jmp     loc_415C7F
.text:00416095 ; ---------------------------------------------------------------------------
.text:0041609A                 align 10h
.text:004160A0
.text:004160A0 loc_4160A0:                             ; CODE XREF: sub_415C20+50↑j
.text:004160A0                 mov     edx, 2000h
.text:004160A5                 jmp     loc_415C7F
.text:004160A5 sub_415C20      endp
.text:004160A5
.text:004160A5 ; ---------------------------------------------------------------------------
.text:004160AA aLnk            db '.lnk',0             ; DATA XREF: sub_4160F0+E0↓o
.text:004160AA                                         ; sub_416770+2A↓o ...
.text:004160AF ; const CHAR aKernel32_0[]
.text:004160AF aKernel32_0     db 'KERNEL32',0         ; DATA XREF: sub_4160F0+12D↓o
.text:004160AF                                         ; .text:00416E4B↓o
.text:004160B8 ; const CHAR aGetcompressedf[]
.text:004160B8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:004160B8                                         ; DATA XREF: sub_4160F0+13E↓o
.text:004160B8                                         ; .text:00416E5C↓o
.text:004160CF ; const CHAR aGetbinarytypea[]
.text:004160CF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4160F0+333↓o
.text:004160CF                                         ; .text:004167F6↓o ...
.text:004160DE ; const char aPathext[]
.text:004160DE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4160F0:loc_4164D7↓o
.text:004160DE                                         ; .text:loc_4168A0↓o ...
.text:004160E6                 align 10h
.text:004160F0
.text:004160F0 ; =============== S U B R O U T I N E =======================================
.text:004160F0
.text:004160F0
.text:004160F0 ; int __cdecl sub_4160F0(char *String1, int)
.text:004160F0 sub_4160F0      proc near               ; CODE XREF: sub_416ED0+3CD↓p
.text:004160F0                                         ; sub_417750-39B↓p
.text:004160F0
.text:004160F0 Str             = dword ptr -6Ch
.text:004160F0 lpProcName      = dword ptr -68h
.text:004160F0 var_64          = dword ptr -64h
.text:004160F0 var_60          = dword ptr -60h
.text:004160F0 var_5C          = dword ptr -5Ch
.text:004160F0 var_4C          = dword ptr -4Ch
.text:004160F0 var_48          = dword ptr -48h
.text:004160F0 var_44          = dword ptr -44h
.text:004160F0 var_40          = dword ptr -40h
.text:004160F0 var_3C          = dword ptr -3Ch
.text:004160F0 var_38          = dword ptr -38h
.text:004160F0 lpRootPathName  = dword ptr -30h
.text:004160F0 var_2C          = byte ptr -2Ch
.text:004160F0 var_28          = dword ptr -28h
.text:004160F0 var_24          = dword ptr -24h
.text:004160F0 var_20          = dword ptr -20h
.text:004160F0 var_1C          = dword ptr -1Ch
.text:004160F0 var_18          = byte ptr -18h
.text:004160F0 String1         = dword ptr  4
.text:004160F0 arg_4           = dword ptr  8
.text:004160F0
.text:004160F0                 push    ebp
.text:004160F1                 push    edi
.text:004160F2                 push    esi
.text:004160F3                 push    ebx
.text:004160F4                 sub     esp, 5Ch
.text:004160F7                 mov     edx, [esp+6Ch+String1]
.text:004160FB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004160FE                 call    sub_4185D0
.text:00416103                 mov     [esp+6Ch+Str], eax
.text:00416106                 call    sub_417D50
.text:0041610B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0041610F                 test    eax, eax
.text:00416111                 jz      loc_416343
.text:00416117                 mov     [esp+6Ch+Str], eax ; Str
.text:0041611A                 call    strlen
.text:0041611F                 mov     edx, [esp+6Ch+arg_4]
.text:00416123                 mov     ebx, eax
.text:00416125                 mov     esi, [edx+0Ch]
.text:00416128                 mov     edi, [edx+8]
.text:0041612B                 mov     eax, esi
.text:0041612D                 or      eax, edi
.text:0041612F                 jz      loc_416550
.text:00416135                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00416139                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0041613C                 call    GetDriveTypeA
.text:00416141                 sub     esp, 4
.text:00416144                 cmp     eax, 4
.text:00416147                 jz      loc_416550
.text:0041614D
.text:0041614D loc_41614D:                             ; CODE XREF: sub_4160F0+48A↓j
.text:0041614D                                         ; sub_4160F0+4B2↓j
.text:0041614D                 mov     edx, [esp+6Ch+arg_4]
.text:00416151                 mov     esi, [edx+14h]
.text:00416154                 mov     edi, [edx+10h]
.text:00416157                 mov     ecx, esi
.text:00416159                 or      ecx, edi
.text:0041615B                 jnz     short loc_416185
.text:0041615D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00416161                 xor     esi, esi
.text:00416163                 xor     edi, edi
.text:00416165                 test    ebp, ebp
.text:00416167                 jz      short loc_416177
.text:00416169                 movzx   ebx, byte ptr [ebp+0]
.text:0041616D                 test    bl, bl
.text:0041616F                 mov     cl, bl
.text:00416171                 jnz     loc_416501
.text:00416177
.text:00416177 loc_416177:                             ; CODE XREF: sub_4160F0+77↑j
.text:00416177                 xor     eax, eax
.text:00416179                 xor     edx, edx
.text:0041617B
.text:0041617B loc_41617B:                             ; CODE XREF: sub_4160F0+458↓j
.text:0041617B                 mov     ebp, [esp+6Ch+arg_4]
.text:0041617F                 mov     [ebp+10h], eax
.text:00416182                 mov     [ebp+14h], edx
.text:00416185
.text:00416185 loc_416185:                             ; CODE XREF: sub_4160F0+6B↑j
.text:00416185                 mov     edi, [esp+6Ch+String1]
.text:00416189                 xor     ebx, ebx
.text:0041618B                 test    edi, edi
.text:0041618D                 jz      loc_416403
.text:00416193                 mov     esi, [esp+6Ch+String1]
.text:00416197                 cmp     byte ptr [esi], 0
.text:0041619A                 jnz     loc_416410
.text:004161A0
.text:004161A0 loc_4161A0:                             ; CODE XREF: sub_4160F0+38C↓j
.text:004161A0                                         ; sub_4160F0+397↓j
.text:004161A0                 mov     ebp, [esp+6Ch+String1]
.text:004161A4                 test    ebp, ebp
.text:004161A6                 jz      loc_416403
.text:004161AC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:004161B4                 mov     edi, [esp+6Ch+String1]
.text:004161B8                 mov     [esp+6Ch+Str], edi ; Str
.text:004161BB                 call    strrchr
.text:004161C0                 test    eax, eax
.text:004161C2                 jz      loc_416403
.text:004161C8                 cld
.text:004161C9                 mov     ecx, 5
.text:004161CE                 mov     esi, eax
.text:004161D0                 mov     edi, offset aLnk ; ".lnk"
.text:004161D5                 repe cmpsb
.text:004161D7                 setz    cl
.text:004161DA                 movzx   eax, cl
.text:004161DD                 lea     esi, [esi+0]
.text:004161E0
.text:004161E0 loc_4161E0:                             ; CODE XREF: sub_4160F0+315↓j
.text:004161E0                 test    eax, eax
.text:004161E2                 jz      short loc_4161EA
.text:004161E4                 or      ebx, 0A000h
.text:004161EA
.text:004161EA loc_4161EA:                             ; CODE XREF: sub_4160F0+F2↑j
.text:004161EA                 mov     esi, [esp+6Ch+arg_4]
.text:004161EE                 xor     ecx, ecx
.text:004161F0                 mov     edi, ds:dword_4213F0
.text:004161F6                 or      [esi], ebx
.text:004161F8                 mov     ebx, [esi+14h]
.text:004161FB                 mov     ebp, [esi+10h]
.text:004161FE                 mov     eax, ebx
.text:00416200                 xor     eax, ecx
.text:00416202                 xor     ebp, edi
.text:00416204                 or      eax, ebp
.text:00416206                 jnz     loc_416390
.text:0041620C
.text:0041620C loc_41620C:                             ; CODE XREF: sub_4160F0+30E↓j
.text:0041620C                 mov     ecx, dword_420090
.text:00416212                 xor     esi, esi
.text:00416214                 xor     edi, edi
.text:00416216                 mov     edx, [esp+6Ch+arg_4]
.text:0041621A                 mov     [edx+50h], ecx
.text:0041621D                 mov     [esp+6Ch+Str], offset aKernel32_0 ; "KERNEL32"
.text:00416224                 call    LoadLibraryA
.text:00416229                 sub     esp, 4
.text:0041622C                 mov     ebp, eax
.text:0041622E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00416236                 mov     [esp+6Ch+Str], eax ; hModule
.text:00416239                 call    GetProcAddress
.text:0041623E                 sub     esp, 8
.text:00416241                 test    eax, eax
.text:00416243                 jz      short loc_416278
.text:00416245                 mov     ebx, [esp+6Ch+String1]
.text:00416249                 lea     esi, [esp+6Ch+var_2C]
.text:0041624D                 mov     [esp+6Ch+lpProcName], esi
.text:00416251                 mov     [esp+6Ch+Str], ebx
.text:00416254                 call    eax
.text:00416256                 sub     esp, 8
.text:00416259                 mov     ebx, eax
.text:0041625B                 cmp     eax, 0FFFFFFFFh
.text:0041625E                 jz      loc_416379
.text:00416264
.text:00416264 loc_416264:                             ; CODE XREF: sub_4160F0+29A↓j
.text:00416264                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00416268                 mov     ecx, ebx
.text:0041626A                 xor     edi, edi
.text:0041626C                 xor     ebx, ebx
.text:0041626E                 mov     edx, esi
.text:00416270                 mov     esi, ecx
.text:00416272                 or      esi, edi
.text:00416274                 mov     edi, ebx
.text:00416276                 or      edi, edx
.text:00416278
.text:00416278 loc_416278:                             ; CODE XREF: sub_4160F0+153↑j
.text:00416278                                         ; sub_4160F0+294↓j
.text:00416278                 test    ebp, ebp
.text:0041627A                 jz      short loc_416287
.text:0041627C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0041627F                 call    FreeLibrary
.text:00416284                 sub     esp, 4
.text:00416287
.text:00416287 loc_416287:                             ; CODE XREF: sub_4160F0+18A↑j
.text:00416287                 mov     ebp, edi
.text:00416289                 mov     edx, ebp
.text:0041628B                 mov     edi, esi
.text:0041628D                 or      edx, esi
.text:0041628F                 jnz     short loc_41629B
.text:00416291                 mov     eax, [esp+6Ch+arg_4]
.text:00416295                 mov     edi, [eax+30h]
.text:00416298                 mov     ebp, [eax+34h]
.text:0041629B
.text:0041629B loc_41629B:                             ; CODE XREF: sub_4160F0+19F↑j
.text:0041629B                 mov     [esp+6Ch+lpProcName], ebp
.text:0041629F                 mov     ebx, dword_420090
.text:004162A5                 xor     esi, esi
.text:004162A7                 mov     [esp+6Ch+var_60], esi
.text:004162AB                 mov     [esp+6Ch+Str], edi
.text:004162AE                 mov     [esp+6Ch+var_64], ebx
.text:004162B2                 call    sub_41EAF0
.text:004162B7                 mov     [esp+6Ch+var_3C], eax
.text:004162BB                 mov     ecx, dword_420090
.text:004162C1                 mov     [esp+6Ch+lpProcName], ebp
.text:004162C5                 mov     [esp+6Ch+var_38], edx
.text:004162C9                 shr     ecx, 9
.text:004162CC                 mov     [esp+6Ch+var_44], ecx
.text:004162D0                 mov     [esp+6Ch+var_40], 0
.text:004162D8                 mov     [esp+6Ch+var_64], ebx
.text:004162DC                 mov     [esp+6Ch+var_60], esi
.text:004162E0                 mov     [esp+6Ch+Str], edi
.text:004162E3                 call    sub_41E970
.text:004162E8                 mov     ebp, edx
.text:004162EA                 or      ebp, eax
.text:004162EC                 jz      short loc_416350
.text:004162EE                 mov     ebp, [esp+6Ch+var_3C]
.text:004162F2                 mov     esi, [esp+6Ch+var_38]
.text:004162F6                 mov     eax, [esp+6Ch+var_44]
.text:004162FA                 mov     [esp+6Ch+var_4C], ebp
.text:004162FE                 mov     ecx, [esp+6Ch+var_40]
.text:00416302                 mov     ebx, [esp+6Ch+var_44]
.text:00416306                 add     [esp+6Ch+var_4C], 1
.text:0041630B                 mov     [esp+6Ch+var_48], esi
.text:0041630F                 mov     edi, [esp+6Ch+var_4C]
.text:00416313                 adc     [esp+6Ch+var_48], 0
.text:00416318                 mul     [esp+6Ch+var_4C]
.text:0041631C                 imul    ecx, edi
.text:0041631F                 mov     esi, eax
.text:00416321                 mov     eax, [esp+6Ch+var_48]
.text:00416325                 add     edx, ecx
.text:00416327                 imul    ebx, eax
.text:0041632A                 lea     edi, [ebx+edx]
.text:0041632D
.text:0041632D loc_41632D:                             ; CODE XREF: sub_4160F0+287↓j
.text:0041632D                 mov     ebx, [esp+6Ch+arg_4]
.text:00416331                 mov     [ebx+58h], esi
.text:00416334                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00416338                 mov     [ebx+5Ch], edi
.text:0041633B                 mov     [esp+6Ch+Str], esi ; Block
.text:0041633E                 call    free
.text:00416343
.text:00416343 loc_416343:                             ; CODE XREF: sub_4160F0+21↑j
.text:00416343                 add     esp, 5Ch
.text:00416346                 xor     eax, eax
.text:00416348                 pop     ebx
.text:00416349                 pop     esi
.text:0041634A                 pop     edi
.text:0041634B                 pop     ebp
.text:0041634C                 retn
.text:0041634C ; ---------------------------------------------------------------------------
.text:0041634D                 align 10h
.text:00416350
.text:00416350 loc_416350:                             ; CODE XREF: sub_4160F0+1FC↑j
.text:00416350                 mov     eax, [esp+6Ch+var_3C]
.text:00416354                 mov     edi, [esp+6Ch+var_40]
.text:00416358                 mov     ecx, [esp+6Ch+var_3C]
.text:0041635C                 mul     [esp+6Ch+var_44]
.text:00416360                 mov     ebx, [esp+6Ch+var_44]
.text:00416364                 imul    ecx, edi
.text:00416367                 mov     ebp, edx
.text:00416369                 mov     esi, eax
.text:0041636B                 mov     edx, [esp+6Ch+var_38]
.text:0041636F                 add     ebp, ecx
.text:00416371                 imul    ebx, edx
.text:00416374                 lea     edi, [ebx+ebp]
.text:00416377                 jmp     short loc_41632D
.text:00416379 ; ---------------------------------------------------------------------------
.text:00416379
.text:00416379 loc_416379:                             ; CODE XREF: sub_4160F0+16E↑j
.text:00416379                 call    GetLastError
.text:0041637E                 xor     esi, esi
.text:00416380                 xor     edi, edi
.text:00416382                 test    eax, eax
.text:00416384                 jnz     loc_416278
.text:0041638A                 jmp     loc_416264
.text:0041638A ; ---------------------------------------------------------------------------
.text:0041638F                 align 10h
.text:00416390
.text:00416390 loc_416390:                             ; CODE XREF: sub_4160F0+116↑j
.text:00416390                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00416394                 lea     ecx, [esp+6Ch+var_20]
.text:00416398                 lea     ebx, [esp+6Ch+var_1C]
.text:0041639C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:004163A0                 lea     edi, [esp+6Ch+var_24]
.text:004163A4                 lea     ebp, [esp+6Ch+var_28]
.text:004163A8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:004163AC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:004163B0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:004163B4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004163B7                 call    sub_419020
.text:004163BC                 test    eax, eax
.text:004163BE                 jnz     short loc_4163E0
.text:004163C0                 mov     [esp+6Ch+var_28], 1
.text:004163C8                 mov     [esp+6Ch+var_24], 200h
.text:004163D0                 mov     [esp+6Ch+var_20], 0
.text:004163D8                 mov     [esp+6Ch+var_1C], 0
.text:004163E0
.text:004163E0 loc_4163E0:                             ; CODE XREF: sub_4160F0+2CE↑j
.text:004163E0                 mov     ebp, [esp+6Ch+var_24]
.text:004163E4                 mov     edi, [esp+6Ch+var_28]
.text:004163E8                 mov     eax, [esp+6Ch+arg_4]
.text:004163EC                 imul    ebp, edi
.text:004163EF                 mov     esi, [eax+10h]
.text:004163F2                 mov     dword_420090, ebp
.text:004163F8                 mov     ds:dword_4213F0, esi
.text:004163FE                 jmp     loc_41620C
.text:00416403 ; ---------------------------------------------------------------------------
.text:00416403
.text:00416403 loc_416403:                             ; CODE XREF: sub_4160F0+9D↑j
.text:00416403                                         ; sub_4160F0+B6↑j ...
.text:00416403                 xor     eax, eax
.text:00416405                 jmp     loc_4161E0
.text:00416405 ; ---------------------------------------------------------------------------
.text:0041640A                 align 10h
.text:00416410
.text:00416410 loc_416410:                             ; CODE XREF: sub_4160F0+AA↑j
.text:00416410                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:00416417                 xor     ebp, ebp
.text:00416419                 call    GetModuleHandleA
.text:0041641E                 sub     esp, 4
.text:00416421                 mov     edi, eax
.text:00416423                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0041642B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0041642E                 call    GetProcAddress
.text:00416433                 sub     esp, 8
.text:00416436                 mov     edx, eax
.text:00416438                 test    eax, eax
.text:0041643A                 jz      short loc_416454
.text:0041643C                 mov     eax, [esp+6Ch+String1]
.text:00416440                 lea     ecx, [esp+6Ch+var_18]
.text:00416444                 mov     [esp+6Ch+lpProcName], ecx
.text:00416448                 mov     [esp+6Ch+Str], eax
.text:0041644B                 call    edx
.text:0041644D                 sub     esp, 8
.text:00416450                 test    eax, eax
.text:00416452                 jnz     short loc_4164B8
.text:00416454
.text:00416454 loc_416454:                             ; CODE XREF: sub_4160F0+34A↑j
.text:00416454                 mov     edx, ds:Str
.text:0041645A                 test    edx, edx
.text:0041645C                 jz      short loc_4164D7
.text:0041645E
.text:0041645E loc_41645E:                             ; CODE XREF: sub_4160F0+3FA↓j
.text:0041645E                                         ; sub_4160F0+40C↓j
.text:0041645E                 mov     eax, [esp+6Ch+String1]
.text:00416462                 test    eax, eax
.text:00416464                 jz      short loc_41646F
.text:00416466                 mov     esi, [esp+6Ch+String1]
.text:0041646A                 cmp     byte ptr [esi], 0
.text:0041646D                 jnz     short loc_41648C
.text:0041646F
.text:0041646F loc_41646F:                             ; CODE XREF: sub_4160F0+374↑j
.text:0041646F                                         ; sub_4160F0+3B0↓j ...
.text:0041646F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00416472                 call    FreeLibrary
.text:00416477                 sub     esp, 4
.text:0041647A                 test    ebp, ebp
.text:0041647C                 jz      loc_4161A0
.text:00416482                 mov     ebx, 49h ; 'I'
.text:00416487                 jmp     loc_4161A0
.text:0041648C ; ---------------------------------------------------------------------------
.text:0041648C
.text:0041648C loc_41648C:                             ; CODE XREF: sub_4160F0+37D↑j
.text:0041648C                 mov     [esp+6Ch+Str], esi ; Str
.text:0041648F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00416497                 call    strrchr
.text:0041649C                 test    eax, eax
.text:0041649E                 mov     esi, eax
.text:004164A0                 jz      short loc_41646F
.text:004164A2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:004164A6                 mov     ecx, ds:Str
.text:004164AC                 mov     [esp+6Ch+Str], ecx ; Str
.text:004164AF                 call    strstr
.text:004164B4                 test    eax, eax
.text:004164B6                 jz      short loc_4164BF
.text:004164B8
.text:004164B8 loc_4164B8:                             ; CODE XREF: sub_4160F0+362↑j
.text:004164B8                                         ; sub_4160F0+3E5↓j
.text:004164B8                 mov     ebp, 1
.text:004164BD                 jmp     short loc_41646F
.text:004164BF ; ---------------------------------------------------------------------------
.text:004164BF
.text:004164BF loc_4164BF:                             ; CODE XREF: sub_4160F0+3C6↑j
.text:004164BF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:004164C3                 mov     edx, off_420094 ; ".com;.exe;.bat;.cmd"
.text:004164C9                 mov     [esp+6Ch+Str], edx ; Str
.text:004164CC                 call    strstr
.text:004164D1                 test    eax, eax
.text:004164D3                 jz      short loc_41646F
.text:004164D5                 jmp     short loc_4164B8
.text:004164D7 ; ---------------------------------------------------------------------------
.text:004164D7
.text:004164D7 loc_4164D7:                             ; CODE XREF: sub_4160F0+36C↑j
.text:004164D7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:004164DE                 call    getenv
.text:004164E3                 mov     ds:Str, eax
.text:004164E8                 test    eax, eax
.text:004164EA                 jnz     loc_41645E
.text:004164F0                 mov     esi, off_420094 ; ".com;.exe;.bat;.cmd"
.text:004164F6                 mov     ds:Str, esi
.text:004164FC                 jmp     loc_41645E
.text:00416501 ; ---------------------------------------------------------------------------
.text:00416501
.text:00416501 loc_416501:                             ; CODE XREF: sub_4160F0+81↑j
.text:00416501                                         ; sub_4160F0+452↓j
.text:00416501                 shld    edi, esi, 8
.text:00416505                 movsx   eax, cl
.text:00416508                 shl     esi, 8
.text:0041650B                 cdq
.text:0041650C                 add     esi, eax
.text:0041650E                 adc     edi, edx
.text:00416510                 mov     edx, edi
.text:00416512                 xor     ebx, ebx
.text:00416514                 and     edx, 0FF000000h
.text:0041651A                 mov     eax, edx
.text:0041651C                 or      eax, ebx
.text:0041651E                 jz      short loc_416539
.text:00416520                 mov     ecx, edx
.text:00416522                 xor     eax, eax
.text:00416524                 shr     ecx, 10h
.text:00416527                 mov     edx, esi
.text:00416529                 xor     edx, ecx
.text:0041652B                 mov     ecx, edi
.text:0041652D                 xor     ecx, eax
.text:0041652F                 mov     esi, edx
.text:00416531                 mov     edi, ecx
.text:00416533                 and     edi, 0FFFFFFh
.text:00416539
.text:00416539 loc_416539:                             ; CODE XREF: sub_4160F0+42E↑j
.text:00416539                 inc     ebp
.text:0041653A                 movzx   ebx, byte ptr [ebp+0]
.text:0041653E                 test    bl, bl
.text:00416540                 mov     cl, bl
.text:00416542                 jnz     short loc_416501
.text:00416544                 mov     eax, esi
.text:00416546                 mov     edx, edi
.text:00416548                 jmp     loc_41617B
.text:00416548 ; ---------------------------------------------------------------------------
.text:0041654D                 align 10h
.text:00416550
.text:00416550 loc_416550:                             ; CODE XREF: sub_4160F0+3F↑j
.text:00416550                                         ; sub_4160F0+57↑j
.text:00416550                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00416554                 mov     ebp, [esp+6Ch+String1]
.text:00416558                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0041655C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0041655F                 call    _stricmp
.text:00416564                 test    eax, eax
.text:00416566                 jnz     short loc_416580
.text:00416568                 mov     ebx, [esp+6Ch+arg_4]
.text:0041656C                 mov     dword ptr [ebx+8], 5
.text:00416573                 mov     dword ptr [ebx+0Ch], 50000h
.text:0041657A                 jmp     loc_41614D
.text:0041657A ; ---------------------------------------------------------------------------
.text:0041657F                 align 10h
.text:00416580
.text:00416580 loc_416580:                             ; CODE XREF: sub_4160F0+476↑j
.text:00416580                 mov     ebp, [esp+6Ch+String1]
.text:00416584                 xor     esi, esi
.text:00416586                 xor     edi, edi
.text:00416588                 add     ebp, ebx
.text:0041658A                 jz      short loc_416594
.text:0041658C                 movzx   ecx, byte ptr [ebp+0]
.text:00416590                 test    cl, cl
.text:00416592                 jnz     short loc_4165A7
.text:00416594
.text:00416594 loc_416594:                             ; CODE XREF: sub_4160F0+49A↑j
.text:00416594                 xor     eax, eax
.text:00416596                 xor     edx, edx
.text:00416598
.text:00416598 loc_416598:                             ; CODE XREF: sub_4160F0+4FE↓j
.text:00416598                 mov     ebp, [esp+6Ch+arg_4]
.text:0041659C                 mov     [ebp+8], eax
.text:0041659F                 mov     [ebp+0Ch], edx
.text:004165A2                 jmp     loc_41614D
.text:004165A7 ; ---------------------------------------------------------------------------
.text:004165A7
.text:004165A7 loc_4165A7:                             ; CODE XREF: sub_4160F0+4A2↑j
.text:004165A7                                         ; sub_4160F0+4F8↓j
.text:004165A7                 shld    edi, esi, 8
.text:004165AB                 movsx   eax, cl
.text:004165AE                 shl     esi, 8
.text:004165B1                 cdq
.text:004165B2                 add     esi, eax
.text:004165B4                 adc     edi, edx
.text:004165B6                 mov     edx, edi
.text:004165B8                 xor     ebx, ebx
.text:004165BA                 and     edx, 0FF000000h
.text:004165C0                 mov     eax, edx
.text:004165C2                 or      eax, ebx
.text:004165C4                 jz      short loc_4165DF
.text:004165C6                 mov     ecx, edx
.text:004165C8                 xor     eax, eax
.text:004165CA                 shr     ecx, 10h
.text:004165CD                 mov     edx, esi
.text:004165CF                 xor     edx, ecx
.text:004165D1                 mov     ecx, edi
.text:004165D3                 xor     ecx, eax
.text:004165D5                 mov     esi, edx
.text:004165D7                 mov     edi, ecx
.text:004165D9                 and     edi, 0FFFFFFh
.text:004165DF
.text:004165DF loc_4165DF:                             ; CODE XREF: sub_4160F0+4D4↑j
.text:004165DF                 inc     ebp
.text:004165E0                 movzx   ebx, byte ptr [ebp+0]
.text:004165E4                 test    bl, bl
.text:004165E6                 mov     cl, bl
.text:004165E8                 jnz     short loc_4165A7
.text:004165EA                 mov     eax, esi
.text:004165EC                 mov     edx, edi
.text:004165EE                 jmp     short loc_416598
.text:004165EE sub_4160F0      endp
.text:004165EE
.text:004165F0
.text:004165F0 ; =============== S U B R O U T I N E =======================================
.text:004165F0
.text:004165F0
.text:004165F0 ; int __cdecl sub_4165F0(LPCSTR)
.text:004165F0 sub_4165F0      proc near               ; CODE XREF: sub_4186F0+CA↓p
.text:004165F0
.text:004165F0 lpRootPathName  = dword ptr -83Ch
.text:004165F0 lpVolumeNameBuffer= dword ptr -838h
.text:004165F0 nVolumeNameSize = dword ptr -834h
.text:004165F0 lpVolumeSerialNumber= dword ptr -830h
.text:004165F0 lpMaximumComponentLength= dword ptr -82Ch
.text:004165F0 lpFileSystemFlags= dword ptr -828h
.text:004165F0 lpFileSystemNameBuffer= dword ptr -824h
.text:004165F0 nFileSystemNameSize= dword ptr -820h
.text:004165F0 VolumeSerialNumber= dword ptr -818h
.text:004165F0 MaximumComponentLength= dword ptr -814h
.text:004165F0 FileSystemFlags = dword ptr -810h
.text:004165F0 FileSystemNameBuffer= byte ptr -80Ch
.text:004165F0 VolumeNameBuffer= byte ptr -40Ch
.text:004165F0 var_4           = dword ptr -4
.text:004165F0 arg_0           = dword ptr  4
.text:004165F0
.text:004165F0                 sub     esp, 83Ch
.text:004165F6                 mov     [esp+83Ch+var_4], ebx
.text:004165FD                 mov     ebx, [esp+83Ch+arg_0]
.text:00416604                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00416607                 call    sub_4185D0
.text:0041660C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0041660F                 call    sub_417D50
.text:00416614                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00416617                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0041661B                 mov     ebx, eax
.text:0041661D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00416621                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00416625                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00416629                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0041662D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00416631                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00416635                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0041663C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00416640                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00416644                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0041664C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00416654                 call    GetVolumeInformationA
.text:00416659                 sub     esp, 20h
.text:0041665C                 test    eax, eax
.text:0041665E                 setz    cl
.text:00416661                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00416664                 movzx   edx, cl
.text:00416667                 dec     edx
.text:00416668                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0041666C                 call    free
.text:00416671                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00416675                 mov     ebx, [esp+83Ch+var_4]
.text:0041667C                 add     esp, 83Ch
.text:00416682                 retn
.text:00416682 sub_4165F0      endp
.text:00416682
.text:00416682 ; ---------------------------------------------------------------------------
.text:00416683                 align 10h
.text:00416690                 push    ebp
.text:00416691                 push    edi
.text:00416692                 xor     edi, edi
.text:00416694                 push    esi
.text:00416695                 xor     esi, esi
.text:00416697                 push    ebx
.text:00416698                 mov     ebp, [esp+14h]
.text:0041669C                 test    ebp, ebp
.text:0041669E                 jz      short loc_4166A8
.text:004166A0                 movzx   ecx, byte ptr [ebp+0]
.text:004166A4                 test    cl, cl
.text:004166A6                 jnz     short loc_4166B1
.text:004166A8
.text:004166A8 loc_4166A8:                             ; CODE XREF: .text:0041669E↑j
.text:004166A8                 xor     eax, eax
.text:004166AA                 xor     edx, edx
.text:004166AC
.text:004166AC loc_4166AC:                             ; CODE XREF: .text:004166F8↓j
.text:004166AC                 pop     ebx
.text:004166AD                 pop     esi
.text:004166AE                 pop     edi
.text:004166AF                 pop     ebp
.text:004166B0                 retn
.text:004166B1 ; ---------------------------------------------------------------------------
.text:004166B1
.text:004166B1 loc_4166B1:                             ; CODE XREF: .text:004166A6↑j
.text:004166B1                                         ; .text:004166F2↓j
.text:004166B1                 shld    edi, esi, 8
.text:004166B5                 movsx   eax, cl
.text:004166B8                 shl     esi, 8
.text:004166BB                 cdq
.text:004166BC                 add     esi, eax
.text:004166BE                 adc     edi, edx
.text:004166C0                 mov     edx, edi
.text:004166C2                 xor     ebx, ebx
.text:004166C4                 and     edx, 0FF000000h
.text:004166CA                 mov     eax, edx
.text:004166CC                 or      eax, ebx
.text:004166CE                 jz      short loc_4166E9
.text:004166D0                 mov     ecx, edx
.text:004166D2                 xor     eax, eax
.text:004166D4                 shr     ecx, 10h
.text:004166D7                 mov     edx, esi
.text:004166D9                 xor     edx, ecx
.text:004166DB                 mov     ecx, edi
.text:004166DD                 xor     ecx, eax
.text:004166DF                 mov     esi, edx
.text:004166E1                 mov     edi, ecx
.text:004166E3                 and     edi, 0FFFFFFh
.text:004166E9
.text:004166E9 loc_4166E9:                             ; CODE XREF: .text:004166CE↑j
.text:004166E9                 inc     ebp
.text:004166EA                 movzx   ebx, byte ptr [ebp+0]
.text:004166EE                 test    bl, bl
.text:004166F0                 mov     cl, bl
.text:004166F2                 jnz     short loc_4166B1
.text:004166F4                 mov     eax, esi
.text:004166F6                 mov     edx, edi
.text:004166F8                 jmp     short loc_4166AC
.text:004166F8 ; ---------------------------------------------------------------------------
.text:004166FA                 align 10h
.text:00416700                 sub     esp, 2Ch
.text:00416703                 lea     edx, [esp+24h]
.text:00416707                 lea     ecx, [esp+28h]
.text:0041670B                 mov     [esp+0Ch], edx
.text:0041670F                 lea     edx, [esp+1Ch]
.text:00416713                 mov     [esp+4], edx
.text:00416717                 mov     edx, [esp+30h]
.text:0041671B                 mov     [esp+10h], ecx
.text:0041671F                 lea     ecx, [esp+20h]
.text:00416723                 mov     [esp+8], ecx
.text:00416727                 mov     [esp], edx
.text:0041672A                 call    sub_419020
.text:0041672F                 test    eax, eax
.text:00416731                 jnz     short loc_416753
.text:00416733                 mov     dword ptr [esp+1Ch], 1
.text:0041673B                 mov     dword ptr [esp+20h], 200h
.text:00416743                 mov     dword ptr [esp+24h], 0
.text:0041674B                 mov     dword ptr [esp+28h], 0
.text:00416753
.text:00416753 loc_416753:                             ; CODE XREF: .text:00416731↑j
.text:00416753                 mov     eax, [esp+20h]
.text:00416757                 mov     ecx, [esp+1Ch]
.text:0041675B                 add     esp, 2Ch
.text:0041675E                 imul    eax, ecx
.text:00416761                 retn
.text:00416761 ; ---------------------------------------------------------------------------
.text:00416762                 align 10h
.text:00416770
.text:00416770 ; =============== S U B R O U T I N E =======================================
.text:00416770
.text:00416770
.text:00416770 ; int __cdecl sub_416770(char *)
.text:00416770 sub_416770      proc near               ; CODE XREF: sub_419650+30↓p
.text:00416770
.text:00416770 Str             = dword ptr -1Ch
.text:00416770 var_18          = dword ptr -18h
.text:00416770 var_8           = dword ptr -8
.text:00416770 var_4           = dword ptr -4
.text:00416770 arg_0           = dword ptr  4
.text:00416770
.text:00416770                 sub     esp, 1Ch
.text:00416773                 mov     eax, [esp+1Ch+arg_0]
.text:00416777                 mov     [esp+1Ch+var_8], esi
.text:0041677B                 mov     [esp+1Ch+var_4], edi
.text:0041677F                 test    eax, eax
.text:00416781                 jz      short loc_4167C0
.text:00416783                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:0041678B                 mov     [esp+1Ch+Str], eax ; Str
.text:0041678E                 call    strrchr
.text:00416793                 test    eax, eax
.text:00416795                 jz      short loc_4167C0
.text:00416797                 cld
.text:00416798                 mov     esi, eax
.text:0041679A                 mov     edi, offset aLnk ; ".lnk"
.text:0041679F                 mov     ecx, 5
.text:004167A4                 repe cmpsb
.text:004167A6                 setz    dl
.text:004167A9                 movzx   eax, dl
.text:004167AC                 lea     esi, [esi+0]
.text:004167B0
.text:004167B0 loc_4167B0:                             ; CODE XREF: sub_416770+52↓j
.text:004167B0                 mov     esi, [esp+1Ch+var_8]
.text:004167B4                 mov     edi, [esp+1Ch+var_4]
.text:004167B8                 add     esp, 1Ch
.text:004167BB                 retn
.text:004167BB ; ---------------------------------------------------------------------------
.text:004167BC                 align 10h
.text:004167C0
.text:004167C0 loc_4167C0:                             ; CODE XREF: sub_416770+11↑j
.text:004167C0                                         ; sub_416770+25↑j
.text:004167C0                 xor     eax, eax
.text:004167C2                 jmp     short loc_4167B0
.text:004167C2 sub_416770      endp
.text:004167C2
.text:004167C2 ; ---------------------------------------------------------------------------
.text:004167C4                 align 10h
.text:004167D0                 sub     esp, 1Ch
.text:004167D3                 mov     [esp+10h], ebx
.text:004167D7                 mov     ebx, [esp+20h]
.text:004167DB                 mov     [esp+14h], esi
.text:004167DF                 mov     [esp+18h], edi
.text:004167E3                 xor     edi, edi
.text:004167E5                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:004167EC                 call    GetModuleHandleA
.text:004167F1                 sub     esp, 4
.text:004167F4                 mov     esi, eax
.text:004167F6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004167FE                 mov     [esp], eax
.text:00416801                 call    GetProcAddress
.text:00416806                 sub     esp, 8
.text:00416809                 test    eax, eax
.text:0041680B                 jz      short loc_416821
.text:0041680D                 mov     [esp], ebx
.text:00416810                 lea     ecx, [esp+0Ch]
.text:00416814                 mov     [esp+4], ecx
.text:00416818                 call    eax
.text:0041681A                 sub     esp, 8
.text:0041681D                 test    eax, eax
.text:0041681F                 jnz     short loc_416880
.text:00416821
.text:00416821 loc_416821:                             ; CODE XREF: .text:0041680B↑j
.text:00416821                 mov     eax, ds:Str
.text:00416826                 test    eax, eax
.text:00416828                 jz      short loc_4168A0
.text:0041682A
.text:0041682A loc_41682A:                             ; CODE XREF: .text:004168B3↓j
.text:0041682A                                         ; .text:004168C5↓j
.text:0041682A                 test    ebx, ebx
.text:0041682C                 jz      short loc_416833
.text:0041682E                 cmp     byte ptr [ebx], 0
.text:00416831                 jnz     short loc_416850
.text:00416833
.text:00416833 loc_416833:                             ; CODE XREF: .text:0041682C↑j
.text:00416833                                         ; .text:00416864↓j ...
.text:00416833                 mov     [esp], esi
.text:00416836                 call    FreeLibrary
.text:0041683B                 sub     esp, 4
.text:0041683E                 mov     eax, edi
.text:00416840                 mov     ebx, [esp+10h]
.text:00416844                 mov     esi, [esp+14h]
.text:00416848                 mov     edi, [esp+18h]
.text:0041684C                 add     esp, 1Ch
.text:0041684F                 retn
.text:00416850 ; ---------------------------------------------------------------------------
.text:00416850
.text:00416850 loc_416850:                             ; CODE XREF: .text:00416831↑j
.text:00416850                 mov     [esp], ebx
.text:00416853                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041685B                 call    strrchr
.text:00416860                 test    eax, eax
.text:00416862                 mov     ebx, eax
.text:00416864                 jz      short loc_416833
.text:00416866                 mov     [esp+4], eax
.text:0041686A                 mov     ecx, ds:Str
.text:00416870                 mov     [esp], ecx
.text:00416873                 call    strstr
.text:00416878                 test    eax, eax
.text:0041687A                 jz      short loc_416887
.text:0041687C                 lea     esi, [esi+0]
.text:00416880
.text:00416880 loc_416880:                             ; CODE XREF: .text:0041681F↑j
.text:00416880                                         ; .text:0041689D↓j
.text:00416880                 mov     edi, 1
.text:00416885                 jmp     short loc_416833
.text:00416887 ; ---------------------------------------------------------------------------
.text:00416887
.text:00416887 loc_416887:                             ; CODE XREF: .text:0041687A↑j
.text:00416887                 mov     [esp+4], ebx
.text:0041688B                 mov     ebx, off_420094 ; ".com;.exe;.bat;.cmd"
.text:00416891                 mov     [esp], ebx
.text:00416894                 call    strstr
.text:00416899                 test    eax, eax
.text:0041689B                 jz      short loc_416833
.text:0041689D                 jmp     short loc_416880
.text:0041689D ; ---------------------------------------------------------------------------
.text:0041689F                 align 10h
.text:004168A0
.text:004168A0 loc_4168A0:                             ; CODE XREF: .text:00416828↑j
.text:004168A0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:004168A7                 call    getenv
.text:004168AC                 mov     ds:Str, eax
.text:004168B1                 test    eax, eax
.text:004168B3                 jnz     loc_41682A
.text:004168B9                 mov     edx, off_420094 ; ".com;.exe;.bat;.cmd"
.text:004168BF                 mov     ds:Str, edx
.text:004168C5                 jmp     loc_41682A
.text:004168C5 ; ---------------------------------------------------------------------------
.text:004168CA                 align 10h
.text:004168D0                 sub     esp, 0Ch
.text:004168D3                 mov     edx, [esp+10h]
.text:004168D7                 mov     [esp], edx
.text:004168DA                 call    GetFileType
.text:004168DF                 sub     esp, 4
.text:004168E2                 xor     edx, edx
.text:004168E4                 cmp     eax, 2
.text:004168E7                 jz      short loc_416900
.text:004168E9                 cmp     eax, 3
.text:004168EC                 jz      short loc_4168F4
.text:004168EE
.text:004168EE loc_4168EE:                             ; CODE XREF: .text:004168F9↓j
.text:004168EE                                         ; .text:00416905↓j
.text:004168EE                 mov     eax, edx
.text:004168F0                 add     esp, 0Ch
.text:004168F3                 retn
.text:004168F4 ; ---------------------------------------------------------------------------
.text:004168F4
.text:004168F4 loc_4168F4:                             ; CODE XREF: .text:004168EC↑j
.text:004168F4                 mov     edx, 1000h
.text:004168F9                 jmp     short loc_4168EE
.text:004168F9 ; ---------------------------------------------------------------------------
.text:004168FB                 align 10h
.text:00416900
.text:00416900 loc_416900:                             ; CODE XREF: .text:004168E7↑j
.text:00416900                 mov     edx, 2000h
.text:00416905                 jmp     short loc_4168EE
.text:00416905 ; ---------------------------------------------------------------------------
.text:00416907                 align 10h
.text:00416910                 mov     ecx, [esp+4]
.text:00416914                 xor     edx, edx
.text:00416916                 test    cl, 10h
.text:00416919                 setz    dl
.text:0041691C                 dec     edx
.text:0041691D                 and     edx, 0FFFFC000h
.text:00416923                 add     edx, 8000h
.text:00416929                 or      edx, 124h
.text:0041692F                 test    cl, 1
.text:00416932                 movzx   eax, dx
.text:00416935                 jnz     short locret_41693C
.text:00416937                 or      eax, 92h
.text:0041693C
.text:0041693C locret_41693C:                          ; CODE XREF: .text:00416935↑j
.text:0041693C                 retn
.text:0041693C ; ---------------------------------------------------------------------------
.text:0041693D                 align 10h
.text:00416940                 sub     esp, 2Ch
.text:00416943                 mov     [esp+20h], esi
.text:00416947                 mov     esi, [esp+30h]
.text:0041694B                 mov     [esp+1Ch], ebx
.text:0041694F                 xor     ebx, ebx
.text:00416951                 test    esi, esi
.text:00416953                 mov     [esp+24h], edi
.text:00416957                 mov     [esp+28h], ebp
.text:0041695B                 jz      short loc_4169B0
.text:0041695D                 cmp     byte ptr [esi], 0
.text:00416960                 jnz     short loc_4169B4
.text:00416962
.text:00416962 loc_416962:                             ; CODE XREF: .text:00416A1C↓j
.text:00416962                                         ; .text:00416A27↓j
.text:00416962                 test    esi, esi
.text:00416964                 jz      short loc_4169B0
.text:00416966                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041696E                 mov     [esp], esi
.text:00416971                 call    strrchr
.text:00416976                 test    eax, eax
.text:00416978                 jz      short loc_4169B0
.text:0041697A                 cld
.text:0041697B                 mov     ecx, 5
.text:00416980                 mov     esi, eax
.text:00416982                 mov     edi, offset aLnk ; ".lnk"
.text:00416987                 repe cmpsb
.text:00416989                 setz    cl
.text:0041698C                 movzx   eax, cl
.text:0041698F                 nop
.text:00416990
.text:00416990 loc_416990:                             ; CODE XREF: .text:004169B2↓j
.text:00416990                 test    eax, eax
.text:00416992                 jz      short loc_41699A
.text:00416994                 or      ebx, 0A000h
.text:0041699A
.text:0041699A loc_41699A:                             ; CODE XREF: .text:00416992↑j
.text:0041699A                 mov     eax, ebx
.text:0041699C                 mov     esi, [esp+20h]
.text:004169A0                 mov     ebx, [esp+1Ch]
.text:004169A4                 mov     edi, [esp+24h]
.text:004169A8                 mov     ebp, [esp+28h]
.text:004169AC                 add     esp, 2Ch
.text:004169AF                 retn
.text:004169B0 ; ---------------------------------------------------------------------------
.text:004169B0
.text:004169B0 loc_4169B0:                             ; CODE XREF: .text:0041695B↑j
.text:004169B0                                         ; .text:00416964↑j ...
.text:004169B0                 xor     eax, eax
.text:004169B2                 jmp     short loc_416990
.text:004169B4 ; ---------------------------------------------------------------------------
.text:004169B4
.text:004169B4 loc_4169B4:                             ; CODE XREF: .text:00416960↑j
.text:004169B4                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:004169BB                 call    GetModuleHandleA
.text:004169C0                 sub     esp, 4
.text:004169C3                 mov     ebp, eax
.text:004169C5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004169CD                 mov     [esp], eax
.text:004169D0                 call    GetProcAddress
.text:004169D5                 sub     esp, 8
.text:004169D8                 test    eax, eax
.text:004169DA                 mov     dword ptr [esp+14h], 0
.text:004169E2                 jz      short loc_4169F8
.text:004169E4                 mov     [esp], esi
.text:004169E7                 lea     ecx, [esp+18h]
.text:004169EB                 mov     [esp+4], ecx
.text:004169EF                 call    eax
.text:004169F1                 sub     esp, 8
.text:004169F4                 test    eax, eax
.text:004169F6                 jnz     short loc_416A58
.text:004169F8
.text:004169F8 loc_4169F8:                             ; CODE XREF: .text:004169E2↑j
.text:004169F8                 mov     edx, ds:Str
.text:004169FE                 test    edx, edx
.text:00416A00                 jz      short loc_416A80
.text:00416A02
.text:00416A02 loc_416A02:                             ; CODE XREF: .text:00416A93↓j
.text:00416A02                                         ; .text:00416AA5↓j
.text:00416A02                 test    esi, esi
.text:00416A04                 jz      short loc_416A0B
.text:00416A06                 cmp     byte ptr [esi], 0
.text:00416A09                 jnz     short loc_416A2C
.text:00416A0B
.text:00416A0B loc_416A0B:                             ; CODE XREF: .text:00416A04↑j
.text:00416A0B                                         ; .text:00416A40↓j ...
.text:00416A0B                 mov     [esp], ebp
.text:00416A0E                 call    FreeLibrary
.text:00416A13                 sub     esp, 4
.text:00416A16                 mov     eax, [esp+14h]
.text:00416A1A                 test    eax, eax
.text:00416A1C                 jz      loc_416962
.text:00416A22                 mov     ebx, 49h ; 'I'
.text:00416A27                 jmp     loc_416962
.text:00416A2C ; ---------------------------------------------------------------------------
.text:00416A2C
.text:00416A2C loc_416A2C:                             ; CODE XREF: .text:00416A09↑j
.text:00416A2C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00416A34                 mov     [esp], esi
.text:00416A37                 call    strrchr
.text:00416A3C                 test    eax, eax
.text:00416A3E                 mov     edi, eax
.text:00416A40                 jz      short loc_416A0B
.text:00416A42                 mov     [esp+4], eax
.text:00416A46                 mov     edx, ds:Str
.text:00416A4C                 mov     [esp], edx
.text:00416A4F                 call    strstr
.text:00416A54                 test    eax, eax
.text:00416A56                 jz      short loc_416A62
.text:00416A58
.text:00416A58 loc_416A58:                             ; CODE XREF: .text:004169F6↑j
.text:00416A58                                         ; .text:00416A78↓j
.text:00416A58                 mov     dword ptr [esp+14h], 1
.text:00416A60                 jmp     short loc_416A0B
.text:00416A62 ; ---------------------------------------------------------------------------
.text:00416A62
.text:00416A62 loc_416A62:                             ; CODE XREF: .text:00416A56↑j
.text:00416A62                 mov     [esp+4], edi
.text:00416A66                 mov     edi, off_420094 ; ".com;.exe;.bat;.cmd"
.text:00416A6C                 mov     [esp], edi
.text:00416A6F                 call    strstr
.text:00416A74                 test    eax, eax
.text:00416A76                 jz      short loc_416A0B
.text:00416A78                 jmp     short loc_416A58
.text:00416A78 ; ---------------------------------------------------------------------------
.text:00416A7A                 align 10h
.text:00416A80
.text:00416A80 loc_416A80:                             ; CODE XREF: .text:00416A00↑j
.text:00416A80                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00416A87                 call    getenv
.text:00416A8C                 mov     ds:Str, eax
.text:00416A91                 test    eax, eax
.text:00416A93                 jnz     loc_416A02
.text:00416A99                 mov     ecx, off_420094 ; ".com;.exe;.bat;.cmd"
.text:00416A9F                 mov     ds:Str, ecx
.text:00416AA5                 jmp     loc_416A02
.text:00416AA5 ; ---------------------------------------------------------------------------
.text:00416AAA                 align 10h
.text:00416AB0                 push    esi
.text:00416AB1                 push    ebx
.text:00416AB2                 sub     esp, 864h
.text:00416AB8                 mov     ebx, [esp+870h]
.text:00416ABF                 lea     edx, [esp+830h]
.text:00416AC6                 mov     esi, [esp+874h]
.text:00416ACD                 mov     [esp+4], edx
.text:00416AD1                 mov     [esp], ebx
.text:00416AD4                 call    sub_415930
.text:00416AD9                 xor     edx, edx
.text:00416ADB                 test    eax, eax
.text:00416ADD                 jz      loc_416BC5
.text:00416AE3                 mov     ecx, [esp+830h]
.text:00416AEA                 test    cl, 10h
.text:00416AED                 mov     [esi], ecx
.text:00416AEF                 mov     eax, [esp+834h]
.text:00416AF6                 mov     edx, [esp+838h]
.text:00416AFD                 mov     [esi+4], eax
.text:00416B00                 mov     [esi+8], edx
.text:00416B03                 mov     eax, [esp+83Ch]
.text:00416B0A                 mov     edx, [esp+840h]
.text:00416B11                 mov     [esi+0Ch], eax
.text:00416B14                 mov     [esi+10h], edx
.text:00416B17                 mov     edx, [esp+848h]
.text:00416B1E                 mov     eax, [esp+844h]
.text:00416B25                 mov     [esi+18h], edx
.text:00416B28                 mov     [esi+14h], eax
.text:00416B2B                 mov     edx, [esp+84Ch]
.text:00416B32                 mov     [esi+20h], edx
.text:00416B35                 mov     edx, [esp+850h]
.text:00416B3C                 mov     [esi+24h], edx
.text:00416B3F                 jnz     loc_416BD0
.text:00416B45                 mov     dword ptr [esi+28h], 1
.text:00416B4C
.text:00416B4C loc_416B4C:                             ; CODE XREF: .text:00416BDB↓j
.text:00416B4C                 mov     [esp], ebx
.text:00416B4F                 call    sub_4185D0
.text:00416B54                 mov     [esp], eax
.text:00416B57                 call    sub_417D50
.text:00416B5C                 mov     [esp], eax
.text:00416B5F                 lea     edx, [esp+30h]
.text:00416B63                 mov     ebx, eax
.text:00416B65                 mov     [esp+18h], edx
.text:00416B69                 lea     ecx, [esp+2Ch]
.text:00416B6D                 lea     edx, [esp+28h]
.text:00416B71                 mov     [esp+14h], ecx
.text:00416B75                 lea     ecx, [esp+24h]
.text:00416B79                 mov     [esp+10h], edx
.text:00416B7D                 lea     edx, [esp+430h]
.text:00416B84                 mov     [esp+0Ch], ecx
.text:00416B88                 mov     [esp+4], edx
.text:00416B8C                 mov     dword ptr [esp+1Ch], 400h
.text:00416B94                 mov     dword ptr [esp+8], 400h
.text:00416B9C                 call    GetVolumeInformationA
.text:00416BA1                 sub     esp, 20h
.text:00416BA4                 test    eax, eax
.text:00416BA6                 setz    cl
.text:00416BA9                 mov     [esp], ebx
.text:00416BAC                 movzx   edx, cl
.text:00416BAF                 dec     edx
.text:00416BB0                 and     [esp+24h], edx
.text:00416BB4                 call    free
.text:00416BB9                 mov     ecx, [esp+24h]
.text:00416BBD                 mov     edx, 1
.text:00416BC2                 mov     [esi+1Ch], ecx
.text:00416BC5
.text:00416BC5 loc_416BC5:                             ; CODE XREF: .text:00416ADD↑j
.text:00416BC5                 add     esp, 864h
.text:00416BCB                 mov     eax, edx
.text:00416BCD                 pop     ebx
.text:00416BCE                 pop     esi
.text:00416BCF                 retn
.text:00416BD0 ; ---------------------------------------------------------------------------
.text:00416BD0
.text:00416BD0 loc_416BD0:                             ; CODE XREF: .text:00416B3F↑j
.text:00416BD0                 mov     [esp], ebx
.text:00416BD3                 call    sub_415AA0
.text:00416BD8                 mov     [esi+28h], eax
.text:00416BDB                 jmp     loc_416B4C
.text:00416BE0 ; ---------------------------------------------------------------------------
.text:00416BE0                 push    ebp
.text:00416BE1                 xor     edx, edx
.text:00416BE3                 push    edi
.text:00416BE4                 push    esi
.text:00416BE5                 xor     esi, esi
.text:00416BE7                 push    ebx
.text:00416BE8                 sub     esp, 1Ch
.text:00416BEB                 mov     ebx, [esp+5Ch]
.text:00416BEF                 mov     ecx, [esp+30h]
.text:00416BF3                 mov     edi, [esp+60h]
.text:00416BF7                 or      esi, ebx
.text:00416BF9                 mov     eax, [esp+4Ch]
.text:00416BFD                 or      edi, edx
.text:00416BFF                 mov     ebx, [esp+64h]
.text:00416C03                 xor     edx, edx
.text:00416C05                 test    cl, 10h
.text:00416C08                 setz    dl
.text:00416C0B                 mov     [ebx+10h], eax
.text:00416C0E                 mov     [ebx+8], edi
.text:00416C11                 mov     [ebx+0Ch], esi
.text:00416C14                 dec     edx
.text:00416C15                 and     edx, 0FFFFC000h
.text:00416C1B                 mov     dword ptr [ebx+14h], 0
.text:00416C22                 add     edx, 8000h
.text:00416C28                 or      edx, 124h
.text:00416C2E                 test    cl, 1
.text:00416C31                 movzx   eax, dx
.text:00416C34                 jnz     short loc_416C3B
.text:00416C36                 or      eax, 92h
.text:00416C3B
.text:00416C3B loc_416C3B:                             ; CODE XREF: .text:00416C34↑j
.text:00416C3B                 mov     ebx, [esp+54h]
.text:00416C3F                 xor     edx, edx
.text:00416C41                 xor     ebp, ebp
.text:00416C43                 mov     edi, [esp+50h]
.text:00416C47                 mov     ecx, [esp+64h]
.text:00416C4B                 mov     esi, edi
.text:00416C4D                 or      [ecx], eax
.text:00416C4F                 mov     edi, ebx
.text:00416C51                 or      edi, ebp
.text:00416C53                 mov     ebp, edx
.text:00416C55                 mov     ebx, [esp+64h]
.text:00416C59                 or      ebp, esi
.text:00416C5B                 mov     esi, [esp+58h]
.text:00416C5F                 mov     edx, [esp+40h]
.text:00416C63                 mov     [ebx+30h], edi
.text:00416C66                 mov     [ebx+18h], esi
.text:00416C69                 mov     ecx, edx
.text:00416C6B                 xor     esi, esi
.text:00416C6D                 mov     [ebx+34h], ebp
.text:00416C70                 xor     edx, edx
.text:00416C72                 or      esi, ecx
.text:00416C74                 mov     dword ptr [esp+8], 989680h
.text:00416C7C                 mov     ebx, [esp+3Ch]
.text:00416C80                 mov     ecx, esi
.text:00416C82                 mov     dword ptr [esp+0Ch], 0
.text:00416C8A                 or      ebx, edx
.text:00416C8C                 mov     edx, ebx
.text:00416C8E                 sub     edx, 0D53E8000h
.text:00416C94                 sbb     ecx, 19DB1DEh
.text:00416C9A                 mov     [esp+4], ecx
.text:00416C9E                 mov     [esp], edx
.text:00416CA1                 call    sub_41EAF0
.text:00416CA6                 mov     edx, eax
.text:00416CA8                 mov     ecx, [esp+64h]
.text:00416CAC                 shr     eax, 1Fh
.text:00416CAF                 dec     eax
.text:00416CB0                 and     edx, eax
.text:00416CB2                 mov     [ecx+38h], edx
.text:00416CB5                 mov     [esp], ebx
.text:00416CB8                 mov     [esp+4], esi
.text:00416CBC                 mov     dword ptr [esp+8], 989680h
.text:00416CC4                 mov     dword ptr [esp+0Ch], 0
.text:00416CCC                 call    sub_41E970
.text:00416CD1                 lea     ecx, [eax+eax*4]
.text:00416CD4                 lea     esi, [ecx+ecx*4]
.text:00416CD7                 mov     eax, [esp+64h]
.text:00416CDB                 shl     esi, 2
.text:00416CDE                 mov     ebx, esi
.text:00416CE0                 shr     ebx, 1Fh
.text:00416CE3                 dec     ebx
.text:00416CE4                 and     ebx, esi
.text:00416CE6                 xor     esi, esi
.text:00416CE8                 mov     [eax+3Ch], ebx
.text:00416CEB                 mov     edx, [esp+38h]
.text:00416CEF                 mov     dword ptr [esp+8], 989680h
.text:00416CF7                 mov     ebx, [esp+34h]
.text:00416CFB                 mov     dword ptr [esp+0Ch], 0
.text:00416D03                 mov     ecx, edx
.text:00416D05                 xor     edx, edx
.text:00416D07                 or      ebx, edx
.text:00416D09                 or      esi, ecx
.text:00416D0B                 mov     edx, ebx
.text:00416D0D                 sub     edx, 0D53E8000h
.text:00416D13                 mov     ecx, esi
.text:00416D15                 sbb     ecx, 19DB1DEh
.text:00416D1B                 mov     [esp+4], ecx
.text:00416D1F                 mov     [esp], edx
.text:00416D22                 call    sub_41EAF0
.text:00416D27                 mov     edx, eax
.text:00416D29                 mov     ecx, [esp+64h]
.text:00416D2D                 shr     eax, 1Fh
.text:00416D30                 dec     eax
.text:00416D31                 and     edx, eax
.text:00416D33                 mov     [ecx+48h], edx
.text:00416D36                 mov     [esp], ebx
.text:00416D39                 mov     [esp+4], esi
.text:00416D3D                 mov     dword ptr [esp+8], 989680h
.text:00416D45                 mov     dword ptr [esp+0Ch], 0
.text:00416D4D                 call    sub_41E970
.text:00416D52                 lea     edx, [eax+eax*4]
.text:00416D55                 mov     ebx, [esp+64h]
.text:00416D59                 lea     ecx, [edx+edx*4]
.text:00416D5C                 shl     ecx, 2
.text:00416D5F                 mov     esi, ecx
.text:00416D61                 shr     esi, 1Fh
.text:00416D64                 dec     esi
.text:00416D65                 and     esi, ecx
.text:00416D67                 mov     [ebx+4Ch], esi
.text:00416D6A                 mov     edx, [esp+48h]
.text:00416D6E                 xor     esi, esi
.text:00416D70                 mov     dword ptr [esp+8], 989680h
.text:00416D78                 mov     ebx, [esp+44h]
.text:00416D7C                 mov     dword ptr [esp+0Ch], 0
.text:00416D84                 mov     ecx, edx
.text:00416D86                 xor     edx, edx
.text:00416D88                 or      ebx, edx
.text:00416D8A                 or      esi, ecx
.text:00416D8C                 mov     edx, ebx
.text:00416D8E                 sub     edx, 0D53E8000h
.text:00416D94                 mov     ecx, esi
.text:00416D96                 sbb     ecx, 19DB1DEh
.text:00416D9C                 mov     [esp+4], ecx
.text:00416DA0                 mov     [esp], edx
.text:00416DA3                 call    sub_41EAF0
.text:00416DA8                 mov     edx, eax
.text:00416DAA                 mov     ecx, [esp+64h]
.text:00416DAE                 shr     eax, 1Fh
.text:00416DB1                 dec     eax
.text:00416DB2                 and     edx, eax
.text:00416DB4                 mov     [ecx+40h], edx
.text:00416DB7                 mov     [esp+4], esi
.text:00416DBB                 mov     dword ptr [esp+8], 989680h
.text:00416DC3                 mov     dword ptr [esp+0Ch], 0
.text:00416DCB                 mov     [esp], ebx
.text:00416DCE                 call    sub_41E970
.text:00416DD3                 lea     edx, [eax+eax*4]
.text:00416DD6                 lea     esi, [edx+edx*4]
.text:00416DD9                 mov     eax, [esp+64h]
.text:00416DDD                 shl     esi, 2
.text:00416DE0                 mov     edx, ebp
.text:00416DE2                 mov     ecx, esi
.text:00416DE4                 mov     dword ptr [eax+50h], 200h
.text:00416DEB                 shr     ecx, 1Fh
.text:00416DEE                 dec     ecx
.text:00416DEF                 and     ecx, esi
.text:00416DF1                 test    ebp, ebp
.text:00416DF3                 mov     [eax+44h], ecx
.text:00416DF6                 mov     eax, edi
.text:00416DF8                 js      short loc_416E32
.text:00416DFA
.text:00416DFA loc_416DFA:                             ; CODE XREF: .text:00416E3A↓j
.text:00416DFA                 xor     esi, esi
.text:00416DFC                 mov     ebp, edi
.text:00416DFE                 mov     ecx, eax
.text:00416E00                 shrd    ecx, edx, 9
.text:00416E04                 mov     ebx, edx
.text:00416E06                 and     ebp, 1FFh
.text:00416E0C                 mov     eax, esi
.text:00416E0E                 sar     ebx, 9
.text:00416E11                 or      eax, ebp
.text:00416E13                 jz      short loc_416E1B
.text:00416E15                 add     ecx, 1
.text:00416E18                 adc     ebx, 0
.text:00416E1B
.text:00416E1B loc_416E1B:                             ; CODE XREF: .text:00416E13↑j
.text:00416E1B                 mov     edx, [esp+64h]
.text:00416E1F                 mov     eax, 1
.text:00416E24                 mov     [edx+58h], ecx
.text:00416E27                 mov     [edx+5Ch], ebx
.text:00416E2A                 add     esp, 1Ch
.text:00416E2D                 pop     ebx
.text:00416E2E                 pop     esi
.text:00416E2F                 pop     edi
.text:00416E30                 pop     ebp
.text:00416E31                 retn
.text:00416E32 ; ---------------------------------------------------------------------------
.text:00416E32
.text:00416E32 loc_416E32:                             ; CODE XREF: .text:00416DF8↑j
.text:00416E32                 add     eax, 1FFh
.text:00416E37                 adc     edx, 0
.text:00416E3A                 jmp     short loc_416DFA
.text:00416E3A ; ---------------------------------------------------------------------------
.text:00416E3C                 align 10h
.text:00416E40                 push    ebp
.text:00416E41                 push    edi
.text:00416E42                 xor     edi, edi
.text:00416E44                 push    esi
.text:00416E45                 xor     esi, esi
.text:00416E47                 push    ebx
.text:00416E48                 sub     esp, 0Ch
.text:00416E4B                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00416E52                 call    LoadLibraryA
.text:00416E57                 sub     esp, 4
.text:00416E5A                 mov     ebp, eax
.text:00416E5C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00416E64                 mov     [esp], eax
.text:00416E67                 call    GetProcAddress
.text:00416E6C                 sub     esp, 8
.text:00416E6F                 test    eax, eax
.text:00416E71                 jz      short loc_416EA2
.text:00416E73                 lea     ecx, [esp+8]
.text:00416E77                 mov     [esp+4], ecx
.text:00416E7B                 mov     ecx, [esp+20h]
.text:00416E7F                 mov     [esp], ecx
.text:00416E82                 call    eax
.text:00416E84                 sub     esp, 8
.text:00416E87                 mov     ebx, eax
.text:00416E89                 cmp     eax, 0FFFFFFFFh
.text:00416E8C                 jz      short loc_416EBD
.text:00416E8E
.text:00416E8E loc_416E8E:                             ; CODE XREF: .text:00416EC6↓j
.text:00416E8E                 mov     esi, [esp+8]
.text:00416E92                 mov     ecx, ebx
.text:00416E94                 xor     edi, edi
.text:00416E96                 xor     ebx, ebx
.text:00416E98                 mov     edx, esi
.text:00416E9A                 mov     esi, ecx
.text:00416E9C                 or      esi, edi
.text:00416E9E                 mov     edi, ebx
.text:00416EA0                 or      edi, edx
.text:00416EA2
.text:00416EA2 loc_416EA2:                             ; CODE XREF: .text:00416E71↑j
.text:00416EA2                                         ; .text:00416EC4↓j
.text:00416EA2                 test    ebp, ebp
.text:00416EA4                 jz      short loc_416EB1
.text:00416EA6                 mov     [esp], ebp
.text:00416EA9                 call    FreeLibrary
.text:00416EAE                 sub     esp, 4
.text:00416EB1
.text:00416EB1 loc_416EB1:                             ; CODE XREF: .text:00416EA4↑j
.text:00416EB1                 add     esp, 0Ch
.text:00416EB4                 mov     eax, esi
.text:00416EB6                 mov     edx, edi
.text:00416EB8                 pop     ebx
.text:00416EB9                 pop     esi
.text:00416EBA                 pop     edi
.text:00416EBB                 pop     ebp
.text:00416EBC                 retn
.text:00416EBD ; ---------------------------------------------------------------------------
.text:00416EBD
.text:00416EBD loc_416EBD:                             ; CODE XREF: .text:00416E8C↑j
.text:00416EBD                 call    GetLastError
.text:00416EC2                 test    eax, eax
.text:00416EC4                 jnz     short loc_416EA2
.text:00416EC6                 jmp     short loc_416E8E
.text:00416EC6 ; ---------------------------------------------------------------------------
.text:00416EC8                 align 10h
.text:00416ED0
.text:00416ED0 ; =============== S U B R O U T I N E =======================================
.text:00416ED0
.text:00416ED0
.text:00416ED0 ; int __cdecl sub_416ED0(LPCSTR lpFileName, int)
.text:00416ED0 sub_416ED0      proc near               ; CODE XREF: sub_417750-33F↓p
.text:00416ED0
.text:00416ED0 lpRootPathName  = dword ptr -8FCh
.text:00416ED0 lpVolumeNameBuffer= dword ptr -8F8h
.text:00416ED0 nVolumeNameSize = dword ptr -8F4h
.text:00416ED0 lpVolumeSerialNumber= dword ptr -8F0h
.text:00416ED0 lpMaximumComponentLength= dword ptr -8ECh
.text:00416ED0 lpFileSystemFlags= dword ptr -8E8h
.text:00416ED0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00416ED0 nFileSystemNameSize= dword ptr -8E0h
.text:00416ED0 VolumeSerialNumber= dword ptr -8D8h
.text:00416ED0 MaximumComponentLength= dword ptr -8D4h
.text:00416ED0 FileSystemFlags = dword ptr -8D0h
.text:00416ED0 var_8CC         = dword ptr -8CCh
.text:00416ED0 var_8C8         = dword ptr -8C8h
.text:00416ED0 var_8C4         = dword ptr -8C4h
.text:00416ED0 var_8C0         = dword ptr -8C0h
.text:00416ED0 var_8BC         = dword ptr -8BCh
.text:00416ED0 var_8B8         = dword ptr -8B8h
.text:00416ED0 var_8B4         = dword ptr -8B4h
.text:00416ED0 var_8B0         = dword ptr -8B0h
.text:00416ED0 var_8AC         = dword ptr -8ACh
.text:00416ED0 var_8A8         = dword ptr -8A8h
.text:00416ED0 var_8A4         = dword ptr -8A4h
.text:00416ED0 var_8A0         = dword ptr -8A0h
.text:00416ED0 var_89C         = dword ptr -89Ch
.text:00416ED0 FileSystemNameBuffer= byte ptr -88Ch
.text:00416ED0 VolumeNameBuffer= byte ptr -48Ch
.text:00416ED0 var_8C          = dword ptr -8Ch
.text:00416ED0 var_88          = dword ptr -88h
.text:00416ED0 var_84          = dword ptr -84h
.text:00416ED0 var_80          = dword ptr -80h
.text:00416ED0 var_7C          = dword ptr -7Ch
.text:00416ED0 var_78          = dword ptr -78h
.text:00416ED0 var_74          = dword ptr -74h
.text:00416ED0 var_70          = dword ptr -70h
.text:00416ED0 var_6C          = dword ptr -6Ch
.text:00416ED0 var_5C          = dword ptr -5Ch
.text:00416ED0 var_58          = dword ptr -58h
.text:00416ED0 var_54          = dword ptr -54h
.text:00416ED0 var_50          = dword ptr -50h
.text:00416ED0 var_4C          = dword ptr -4Ch
.text:00416ED0 var_48          = dword ptr -48h
.text:00416ED0 var_44          = dword ptr -44h
.text:00416ED0 var_3C          = dword ptr -3Ch
.text:00416ED0 var_38          = dword ptr -38h
.text:00416ED0 var_34          = dword ptr -34h
.text:00416ED0 lpFileName      = dword ptr  4
.text:00416ED0 arg_4           = dword ptr  8
.text:00416ED0
.text:00416ED0                 push    ebp
.text:00416ED1                 xor     eax, eax
.text:00416ED3                 mov     ecx, 0Dh
.text:00416ED8                 push    edi
.text:00416ED9                 push    esi
.text:00416EDA                 push    ebx
.text:00416EDB                 sub     esp, 8ECh
.text:00416EE1                 lea     edi, [esp+8FCh+var_5C]
.text:00416EE8                 cld
.text:00416EE9                 lea     edx, [esp+8FCh+var_8C]
.text:00416EF0                 rep stosd
.text:00416EF2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00416EF6                 lea     esi, [esp+8FCh+var_5C]
.text:00416EFD                 mov     edx, [esp+8FCh+lpFileName]
.text:00416F04                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00416F07                 call    sub_415930
.text:00416F0C                 test    eax, eax
.text:00416F0E                 mov     edx, 0FFFFFFFFh
.text:00416F13                 jz      loc_4172A4
.text:00416F19                 mov     edx, [esp+8FCh+var_88]
.text:00416F20                 mov     ebp, [esp+8FCh+var_84]
.text:00416F27                 mov     edi, [esp+8FCh+var_80]
.text:00416F2E                 mov     [esp+8FCh+var_58], edx
.text:00416F35                 mov     ecx, [esp+8FCh+var_7C]
.text:00416F3C                 mov     ebx, [esp+8FCh+var_8C]
.text:00416F43                 mov     [esp+8FCh+var_54], ebp
.text:00416F4A                 mov     edx, [esp+8FCh+var_78]
.text:00416F51                 mov     ebp, [esp+8FCh+var_74]
.text:00416F58                 mov     [esp+8FCh+var_50], edi
.text:00416F5F                 test    bl, 10h
.text:00416F62                 mov     edi, [esp+8FCh+var_70]
.text:00416F69                 mov     [esp+8FCh+var_4C], ecx
.text:00416F70                 mov     ecx, [esp+8FCh+var_6C]
.text:00416F77                 mov     [esp+8FCh+var_5C], ebx
.text:00416F7E                 mov     [esp+8FCh+var_48], edx
.text:00416F85                 mov     [esp+8FCh+var_44], ebp
.text:00416F8C                 mov     [esp+8FCh+var_3C], edi
.text:00416F93                 mov     [esp+8FCh+var_38], ecx
.text:00416F9A                 jnz     loc_4172C0
.text:00416FA0                 mov     ebx, 1
.text:00416FA5                 mov     [esp+8FCh+var_34], ebx
.text:00416FAC
.text:00416FAC loc_416FAC:                             ; CODE XREF: sub_416ED0+406↓j
.text:00416FAC                 mov     eax, [esp+8FCh+lpFileName]
.text:00416FB3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00416FB7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:00416FBB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:00416FBE                 call    sub_4185D0
.text:00416FC3                 mov     [esp+8FCh+lpRootPathName], eax
.text:00416FC6                 call    sub_417D50
.text:00416FCB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:00416FCF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00416FD3                 mov     ebp, eax
.text:00416FD5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00416FD9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:00416FDD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00416FE4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00416FE8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00416FEC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00416FF0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00416FF8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00417000                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00417003                 call    GetVolumeInformationA
.text:00417008                 sub     esp, 20h
.text:0041700B                 test    eax, eax
.text:0041700D                 lea     edi, [esp+8FCh+var_8CC]
.text:00417011                 setz    bl
.text:00417014                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00417017                 xor     ebp, ebp
.text:00417019                 movzx   edx, bl
.text:0041701C                 dec     edx
.text:0041701D                 xor     ebx, ebx
.text:0041701F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00417023                 call    free
.text:00417028                 cld
.text:00417029                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0041702D                 mov     [esi+1Ch], ecx
.text:00417030                 mov     ecx, 0Dh
.text:00417035                 rep movsd
.text:00417037                 mov     edi, [esp+8FCh+var_8A0]
.text:0041703B                 mov     edx, [esp+8FCh+var_89C]
.text:0041703F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00417043                 or      ebp, edi
.text:00417045                 mov     esi, [esp+8FCh+var_8B0]
.text:00417049                 mov     edi, [esp+8FCh+arg_4]
.text:00417050                 or      edx, ebx
.text:00417052                 mov     [edi+8], edx
.text:00417055                 xor     edx, edx
.text:00417057                 test    cl, 10h
.text:0041705A                 setz    dl
.text:0041705D                 mov     [edi+0Ch], ebp
.text:00417060                 mov     [edi+10h], esi
.text:00417063                 mov     dword ptr [edi+14h], 0
.text:0041706A                 dec     edx
.text:0041706B                 and     edx, 0FFFFC000h
.text:00417071                 add     edx, 8000h
.text:00417077                 or      edx, 124h
.text:0041707D                 test    cl, 1
.text:00417080                 movzx   eax, dx
.text:00417083                 jnz     short loc_41708A
.text:00417085                 or      eax, 92h
.text:0041708A
.text:0041708A loc_41708A:                             ; CODE XREF: sub_416ED0+1B3↑j
.text:0041708A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0041708E                 xor     edx, edx
.text:00417090                 xor     ebp, ebp
.text:00417092                 mov     edi, [esp+8FCh+var_8AC]
.text:00417096                 mov     ecx, [esp+8FCh+arg_4]
.text:0041709D                 mov     esi, edi
.text:0041709F                 or      [ecx], eax
.text:004170A1                 mov     edi, ebx
.text:004170A3                 or      edi, ebp
.text:004170A5                 mov     ebp, edx
.text:004170A7                 mov     ebx, [esp+8FCh+var_8A4]
.text:004170AB                 or      ebp, esi
.text:004170AD                 mov     esi, [esp+8FCh+arg_4]
.text:004170B4                 mov     edx, [esp+8FCh+var_8BC]
.text:004170B8                 mov     [esi+18h], ebx
.text:004170BB                 mov     ebx, [esp+8FCh+var_8C0]
.text:004170BF                 mov     ecx, edx
.text:004170C1                 mov     [esi+30h], edi
.text:004170C4                 xor     edx, edx
.text:004170C6                 mov     [esi+34h], ebp
.text:004170C9                 or      ebx, edx
.text:004170CB                 xor     esi, esi
.text:004170CD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004170D5                 or      esi, ecx
.text:004170D7                 mov     edx, ebx
.text:004170D9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004170E1                 sub     edx, 0D53E8000h
.text:004170E7                 mov     ecx, esi
.text:004170E9                 sbb     ecx, 19DB1DEh
.text:004170EF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004170F3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004170F6                 call    sub_41EAF0
.text:004170FB                 mov     edx, eax
.text:004170FD                 mov     ecx, [esp+8FCh+arg_4]
.text:00417104                 shr     eax, 1Fh
.text:00417107                 dec     eax
.text:00417108                 and     edx, eax
.text:0041710A                 mov     [ecx+38h], edx
.text:0041710D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00417110                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00417114                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0041711C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417124                 call    sub_41E970
.text:00417129                 lea     ecx, [eax+eax*4]
.text:0041712C                 lea     ebx, [ecx+ecx*4]
.text:0041712F                 mov     eax, [esp+8FCh+arg_4]
.text:00417136                 shl     ebx, 2
.text:00417139                 mov     esi, ebx
.text:0041713B                 shr     esi, 1Fh
.text:0041713E                 dec     esi
.text:0041713F                 and     esi, ebx
.text:00417141                 mov     [eax+3Ch], esi
.text:00417144                 mov     edx, [esp+8FCh+var_8C4]
.text:00417148                 xor     esi, esi
.text:0041714A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417152                 mov     ebx, [esp+8FCh+var_8C8]
.text:00417156                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041715E                 mov     ecx, edx
.text:00417160                 xor     edx, edx
.text:00417162                 or      ebx, edx
.text:00417164                 or      esi, ecx
.text:00417166                 mov     edx, ebx
.text:00417168                 sub     edx, 0D53E8000h
.text:0041716E                 mov     ecx, esi
.text:00417170                 sbb     ecx, 19DB1DEh
.text:00417176                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0041717A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0041717D                 call    sub_41EAF0
.text:00417182                 mov     edx, eax
.text:00417184                 mov     ecx, [esp+8FCh+arg_4]
.text:0041718B                 shr     eax, 1Fh
.text:0041718E                 dec     eax
.text:0041718F                 and     edx, eax
.text:00417191                 mov     [ecx+48h], edx
.text:00417194                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00417197                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0041719B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004171A3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004171AB                 call    sub_41E970
.text:004171B0                 lea     ecx, [eax+eax*4]
.text:004171B3                 lea     ebx, [ecx+ecx*4]
.text:004171B6                 mov     eax, [esp+8FCh+arg_4]
.text:004171BD                 shl     ebx, 2
.text:004171C0                 mov     esi, ebx
.text:004171C2                 shr     esi, 1Fh
.text:004171C5                 dec     esi
.text:004171C6                 and     esi, ebx
.text:004171C8                 mov     [eax+4Ch], esi
.text:004171CB                 mov     edx, [esp+8FCh+var_8B4]
.text:004171CF                 xor     esi, esi
.text:004171D1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004171D9                 mov     ebx, [esp+8FCh+var_8B8]
.text:004171DD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004171E5                 mov     ecx, edx
.text:004171E7                 xor     edx, edx
.text:004171E9                 or      ebx, edx
.text:004171EB                 or      esi, ecx
.text:004171ED                 mov     edx, ebx
.text:004171EF                 sub     edx, 0D53E8000h
.text:004171F5                 mov     ecx, esi
.text:004171F7                 sbb     ecx, 19DB1DEh
.text:004171FD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00417201                 mov     [esp+8FCh+lpRootPathName], edx
.text:00417204                 call    sub_41EAF0
.text:00417209                 mov     edx, eax
.text:0041720B                 mov     ecx, [esp+8FCh+arg_4]
.text:00417212                 shr     eax, 1Fh
.text:00417215                 dec     eax
.text:00417216                 and     edx, eax
.text:00417218                 mov     [ecx+40h], edx
.text:0041721B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0041721E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00417222                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0041722A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417232                 call    sub_41E970
.text:00417237                 lea     ebx, [eax+eax*4]
.text:0041723A                 mov     esi, [esp+8FCh+arg_4]
.text:00417241                 lea     edx, [ebx+ebx*4]
.text:00417244                 shl     edx, 2
.text:00417247                 mov     eax, edi
.text:00417249                 mov     ecx, edx
.text:0041724B                 mov     dword ptr [esi+50h], 200h
.text:00417252                 shr     ecx, 1Fh
.text:00417255                 dec     ecx
.text:00417256                 and     ecx, edx
.text:00417258                 test    ebp, ebp
.text:0041725A                 mov     edx, ebp
.text:0041725C                 mov     [esi+44h], ecx
.text:0041725F                 js      short loc_4172B1
.text:00417261
.text:00417261 loc_417261:                             ; CODE XREF: sub_416ED0+3E9↓j
.text:00417261                 xor     esi, esi
.text:00417263                 mov     ebp, edi
.text:00417265                 mov     ecx, eax
.text:00417267                 shrd    ecx, edx, 9
.text:0041726B                 mov     ebx, edx
.text:0041726D                 and     ebp, 1FFh
.text:00417273                 mov     eax, esi
.text:00417275                 sar     ebx, 9
.text:00417278                 or      eax, ebp
.text:0041727A                 jz      short loc_417282
.text:0041727C                 add     ecx, 1
.text:0041727F                 adc     ebx, 0
.text:00417282
.text:00417282 loc_417282:                             ; CODE XREF: sub_416ED0+3AA↑j
.text:00417282                 mov     edx, [esp+8FCh+arg_4]
.text:00417289                 mov     [edx+5Ch], ebx
.text:0041728C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00417293                 mov     [edx+58h], ecx
.text:00417296                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0041729A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0041729D                 call    sub_4160F0
.text:004172A2                 xor     edx, edx
.text:004172A4
.text:004172A4 loc_4172A4:                             ; CODE XREF: sub_416ED0+43↑j
.text:004172A4                 add     esp, 8ECh
.text:004172AA                 mov     eax, edx
.text:004172AC                 pop     ebx
.text:004172AD                 pop     esi
.text:004172AE                 pop     edi
.text:004172AF                 pop     ebp
.text:004172B0                 retn
.text:004172B1 ; ---------------------------------------------------------------------------
.text:004172B1
.text:004172B1 loc_4172B1:                             ; CODE XREF: sub_416ED0+38F↑j
.text:004172B1                 add     eax, 1FFh
.text:004172B6                 adc     edx, 0
.text:004172B9                 jmp     short loc_417261
.text:004172B9 ; ---------------------------------------------------------------------------
.text:004172BB                 align 10h
.text:004172C0
.text:004172C0 loc_4172C0:                             ; CODE XREF: sub_416ED0+CA↑j
.text:004172C0                 mov     eax, [esp+8FCh+lpFileName]
.text:004172C7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:004172CA                 call    sub_415AA0
.text:004172CF                 mov     [esp+8FCh+var_34], eax
.text:004172D6                 jmp     loc_416FAC
.text:004172D6 sub_416ED0      endp
.text:004172D6
.text:004172D6 ; ---------------------------------------------------------------------------
.text:004172DB                 align 10h
.text:004172E0 ; START OF FUNCTION CHUNK FOR sub_417750
.text:004172E0
.text:004172E0 loc_4172E0:                             ; CODE XREF: sub_417750+26↓j
.text:004172E0                 cld
.text:004172E1                 sub     esp, 2Ch
.text:004172E4                 xor     eax, eax
.text:004172E6                 mov     [esp+2Ch+var_10], ebx
.text:004172EA                 mov     ecx, 18h
.text:004172EF                 mov     ebx, [esp+2Ch+arg_0]
.text:004172F3                 mov     [esp+2Ch+var_C], esi
.text:004172F7                 mov     esi, [esp+2Ch+arg_4]
.text:004172FB                 test    ebx, ebx
.text:004172FD                 mov     [esp+2Ch+var_8], edi
.text:00417301                 mov     edi, esi
.text:00417303                 mov     [esp+2Ch+var_4], ebp
.text:00417307                 rep stosd
.text:00417309                 jz      short loc_417310
.text:0041730B                 cmp     byte ptr [ebx], 0
.text:0041730E                 jnz     short loc_417328
.text:00417310
.text:00417310 loc_417310:                             ; CODE XREF: sub_417750-447↑j
.text:00417310                 xor     edx, edx
.text:00417312
.text:00417312 loc_417312:                             ; CODE XREF: sub_417750-411↓j
.text:00417312                                         ; sub_417750-368↓j
.text:00417312                 mov     ebx, [esp+2Ch+var_10]
.text:00417316                 mov     eax, edx
.text:00417318                 mov     esi, [esp+2Ch+var_C]
.text:0041731C                 mov     edi, [esp+2Ch+var_8]
.text:00417320                 mov     ebp, [esp+2Ch+var_4]
.text:00417324                 add     esp, 2Ch
.text:00417327                 retn
.text:00417328 ; ---------------------------------------------------------------------------
.text:00417328
.text:00417328 loc_417328:                             ; CODE XREF: sub_417750-442↑j
.text:00417328                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00417330                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00417333                 call    sub_419E90
.text:00417338                 test    eax, eax
.text:0041733A                 mov     edx, 0FFFFFFFFh
.text:0041733F                 jnz     short loc_417312
.text:00417341                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00417344                 call    sub_41A240
.text:00417349                 mov     [esp+2Ch+lpFileName], eax
.text:0041734C                 call    sub_417D50
.text:00417351                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00417354                 mov     ebp, eax
.text:00417356                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0041735E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00417366                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0041736E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00417376                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0041737E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00417386                 call    CreateFileA
.text:0041738B                 sub     esp, 1Ch
.text:0041738E                 mov     ebx, eax
.text:00417390                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00417394                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00417397                 call    sub_415C20
.text:0041739C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0041739F                 mov     edi, eax
.text:004173A1                 call    CloseHandle
.text:004173A6                 sub     esp, 4
.text:004173A9                 cmp     edi, 0FFFFFFFFh
.text:004173AC                 jz      short loc_41740A
.text:004173AE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004173B2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:004173B5                 call    sub_4160F0
.text:004173BA
.text:004173BA loc_4173BA:                             ; CODE XREF: sub_417750-338↓j
.text:004173BA                 mov     edx, [esi]
.text:004173BC                 and     edx, 0F000h
.text:004173C2                 cmp     edx, 4000h
.text:004173C8                 jz      short loc_4173FD
.text:004173CA
.text:004173CA loc_4173CA:                             ; CODE XREF: sub_417750-348↓j
.text:004173CA                 cmp     edi, 0FFFFFFFFh
.text:004173CD                 jz      short loc_4173ED
.text:004173CF
.text:004173CF loc_4173CF:                             ; CODE XREF: sub_417750-355↓j
.text:004173CF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:004173D6                 call    SetErrorMode
.text:004173DB                 sub     esp, 4
.text:004173DE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:004173E1                 call    free
.text:004173E6                 mov     edx, edi
.text:004173E8                 jmp     loc_417312
.text:004173ED ; ---------------------------------------------------------------------------
.text:004173ED
.text:004173ED loc_4173ED:                             ; CODE XREF: sub_417750-383↑j
.text:004173ED                 call    sub_41A1F0
.text:004173F2                 mov     esi, eax
.text:004173F4                 call    _errno
.text:004173F9                 mov     [eax], esi
.text:004173FB                 jmp     short loc_4173CF
.text:004173FD ; ---------------------------------------------------------------------------
.text:004173FD
.text:004173FD loc_4173FD:                             ; CODE XREF: sub_417750-388↑j
.text:004173FD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00417400                 call    sub_415AA0
.text:00417405                 mov     [esi+18h], eax
.text:00417408                 jmp     short loc_4173CA
.text:0041740A ; ---------------------------------------------------------------------------
.text:0041740A
.text:0041740A loc_41740A:                             ; CODE XREF: sub_417750-3A4↑j
.text:0041740A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0041740E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:00417411                 call    sub_416ED0
.text:00417416                 mov     edi, eax
.text:00417418                 jmp     short loc_4173BA
.text:00417418 ; END OF FUNCTION CHUNK FOR sub_417750
.text:00417418 ; ---------------------------------------------------------------------------
.text:0041741A                 align 10h
.text:00417420
.text:00417420 ; =============== S U B R O U T I N E =======================================
.text:00417420
.text:00417420
.text:00417420 ; int __cdecl sub_417420(LPCSTR, LPCSTR)
.text:00417420 sub_417420      proc near               ; CODE XREF: sub_417600+A7↓p
.text:00417420
.text:00417420 lpFileName      = dword ptr -27Ch
.text:00417420 dwDesiredAccess = dword ptr -278h
.text:00417420 dwShareMode     = dword ptr -274h
.text:00417420 lpSecurityAttributes= dword ptr -270h
.text:00417420 dwCreationDisposition= dword ptr -26Ch
.text:00417420 dwFlagsAndAttributes= dword ptr -268h
.text:00417420 hTemplateFile   = dword ptr -264h
.text:00417420 NumberOfBytesWritten= dword ptr -254h
.text:00417420 Context         = dword ptr -250h
.text:00417420 Dest            = word ptr -24Ch
.text:00417420 Buffer          = byte ptr -3Ch
.text:00417420 var_38          = dword ptr -38h
.text:00417420 var_34          = dword ptr -34h
.text:00417420 var_30          = dword ptr -30h
.text:00417420 var_2C          = dword ptr -2Ch
.text:00417420 arg_0           = dword ptr  4
.text:00417420 arg_4           = dword ptr  8
.text:00417420
.text:00417420                 push    ebp
.text:00417421                 push    edi
.text:00417422                 push    esi
.text:00417423                 push    ebx
.text:00417424                 sub     esp, 26Ch
.text:0041742A                 mov     edx, [esp+27Ch+arg_0]
.text:00417431                 mov     [esp+27Ch+Context], 0
.text:00417439                 mov     [esp+27Ch+hTemplateFile], 0 ; hTemplateFile
.text:00417441                 mov     [esp+27Ch+dwFlagsAndAttributes], 3000000h ; dwFlagsAndAttributes
.text:00417449                 mov     [esp+27Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00417451                 mov     [esp+27Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00417459                 mov     [esp+27Ch+dwShareMode], 0 ; dwShareMode
.text:00417461                 mov     [esp+27Ch+dwDesiredAccess], 40000000h ; dwDesiredAccess
.text:00417469                 mov     [esp+27Ch+lpFileName], edx ; lpFileName
.text:0041746C                 call    CreateFileA
.text:00417471                 sub     esp, 1Ch
.text:00417474                 mov     ebx, eax
.text:00417476                 cmp     eax, 0FFFFFFFFh
.text:00417479                 jz      loc_4175D7
.text:0041747F                 mov     edx, [esp+27Ch+arg_4]
.text:00417486                 lea     esi, [esp+27Ch+Dest]
.text:0041748A                 xor     edi, edi
.text:0041748C                 mov     ebp, 5
.text:00417491                 mov     [esp+27Ch+lpFileName], edx ; LPCSTR
.text:00417494                 call    sub_41A240
.text:00417499                 mov     [esp+27Ch+lpFileName], eax
.text:0041749C                 call    sub_417D50
.text:004174A1                 mov     [esp+27Ch+dwDesiredAccess], eax ; Source
.text:004174A5                 mov     [esp+27Ch+lpFileName], esi ; Dest
.text:004174A8                 mov     [esp+27Ch+dwShareMode], 104h ; MaxCount
.text:004174B0                 call    mbstowcs
.text:004174B5                 mov     dword ptr [esp+27Ch+Buffer], ebp
.text:004174BC                 lea     esi, [eax+eax]
.text:004174BF                 xor     eax, eax
.text:004174C1                 mov     [esp+27Ch+var_2C], edi
.text:004174C8                 mov     ecx, esi
.text:004174CA                 lea     ebp, [esp+27Ch+Context]
.text:004174CE                 mov     [esp+27Ch+var_38], eax
.text:004174D5                 sar     ecx, 1Fh
.text:004174D8                 lea     edi, [esp+27Ch+NumberOfBytesWritten]
.text:004174DC                 mov     [esp+27Ch+var_34], esi
.text:004174E3                 lea     edx, [esp+27Ch+Buffer]
.text:004174EA                 mov     [esp+27Ch+var_30], ecx
.text:004174F1                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:004174F5                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:004174FD                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:00417505                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00417509                 mov     [esp+27Ch+dwShareMode], 14h ; nNumberOfBytesToWrite
.text:00417511                 mov     [esp+27Ch+dwDesiredAccess], edx ; lpBuffer
.text:00417515                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:00417518                 call    BackupWrite
.text:0041751D                 sub     esp, 1Ch
.text:00417520                 test    eax, eax
.text:00417522                 jz      loc_4175B7
.text:00417528                 cmp     [esp+27Ch+NumberOfBytesWritten], 14h
.text:0041752D                 jnz     loc_4175B7
.text:00417533                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00417537                 lea     ecx, [esp+27Ch+Dest]
.text:0041753B                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:00417543                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:0041754B                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:0041754F                 mov     [esp+27Ch+dwShareMode], esi ; nNumberOfBytesToWrite
.text:00417553                 mov     [esp+27Ch+dwDesiredAccess], ecx ; lpBuffer
.text:00417557                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:0041755A                 call    BackupWrite
.text:0041755F                 sub     esp, 1Ch
.text:00417562                 test    eax, eax
.text:00417564                 jz      short loc_4175B7
.text:00417566                 cmp     [esp+27Ch+NumberOfBytesWritten], esi
.text:0041756A                 jnz     short loc_4175B7
.text:0041756C                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00417570                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:00417578                 mov     [esp+27Ch+dwCreationDisposition], 1 ; bAbort
.text:00417580                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00417584                 mov     [esp+27Ch+dwShareMode], 0 ; nNumberOfBytesToWrite
.text:0041758C                 mov     [esp+27Ch+dwDesiredAccess], 0 ; lpBuffer
.text:00417594                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:00417597                 call    BackupWrite
.text:0041759C                 sub     esp, 1Ch
.text:0041759F                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:004175A2                 call    CloseHandle
.text:004175A7                 sub     esp, 4
.text:004175AA                 xor     eax, eax
.text:004175AC
.text:004175AC loc_4175AC:                             ; CODE XREF: sub_417420+1B5↓j
.text:004175AC                 add     esp, 26Ch
.text:004175B2                 pop     ebx
.text:004175B3                 pop     esi
.text:004175B4                 pop     edi
.text:004175B5                 pop     ebp
.text:004175B6                 retn
.text:004175B7 ; ---------------------------------------------------------------------------
.text:004175B7
.text:004175B7 loc_4175B7:                             ; CODE XREF: sub_417420+102↑j
.text:004175B7                                         ; sub_417420+10D↑j ...
.text:004175B7                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:004175BA
.text:004175BA loc_4175BA:                             ; CODE XREF: sub_417420+1BE↓j
.text:004175BA                 call    CloseHandle
.text:004175BF                 sub     esp, 4
.text:004175C2                 call    sub_41A1F0
.text:004175C7                 mov     edi, eax
.text:004175C9                 call    _errno
.text:004175CE                 mov     [eax], edi
.text:004175D0                 mov     eax, 0FFFFFFFFh
.text:004175D5                 jmp     short loc_4175AC
.text:004175D7 ; ---------------------------------------------------------------------------
.text:004175D7
.text:004175D7 loc_4175D7:                             ; CODE XREF: sub_417420+59↑j
.text:004175D7                 mov     [esp+27Ch+lpFileName], 0FFFFFFFFh
.text:004175DE                 jmp     short loc_4175BA
.text:004175DE sub_417420      endp
.text:004175DE
.text:004175DE ; ---------------------------------------------------------------------------
.text:004175E0 ; const CHAR LibFileName[]
.text:004175E0 LibFileName     db 'KERNEL32',0         ; DATA XREF: sub_417600+2C↓o
.text:004175E9 ; const CHAR aCreatehardlink[]
.text:004175E9 aCreatehardlink db 'CreateHardLinkA',0  ; DATA XREF: sub_417600+41↓o
.text:004175F9                 align 10h
.text:00417600
.text:00417600 ; =============== S U B R O U T I N E =======================================
.text:00417600
.text:00417600
.text:00417600 ; int __cdecl sub_417600(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:00417600 sub_417600      proc near               ; CODE XREF: sub_403910+C1C↑p
.text:00417600                                         ; sub_403910+10D5↑p ...
.text:00417600
.text:00417600 lpLibFileName   = dword ptr -1Ch
.text:00417600 lpProcName      = dword ptr -18h
.text:00417600 bFailIfExists   = dword ptr -14h
.text:00417600 var_C           = dword ptr -0Ch
.text:00417600 var_8           = dword ptr -8
.text:00417600 var_4           = dword ptr -4
.text:00417600 lpExistingFileName= dword ptr  4
.text:00417600 lpNewFileName   = dword ptr  8
.text:00417600
.text:00417600                 sub     esp, 1Ch
.text:00417603                 mov     [esp+1Ch+var_4], edi
.text:00417607                 mov     edi, [esp+1Ch+lpExistingFileName]
.text:0041760B                 mov     [esp+1Ch+var_C], ebx
.text:0041760F                 mov     ebx, [esp+1Ch+lpNewFileName]
.text:00417613                 test    edi, edi
.text:00417615                 mov     [esp+1Ch+var_8], esi
.text:00417619                 mov     esi, 0FFFFFFFFh
.text:0041761E                 jz      loc_4176F0
.text:00417624                 test    ebx, ebx
.text:00417626                 jz      loc_4176F0
.text:0041762C                 mov     [esp+1Ch+lpLibFileName], offset LibFileName ; "KERNEL32"
.text:00417633                 call    LoadLibraryA
.text:00417638                 sub     esp, 4
.text:0041763B                 xor     edx, edx
.text:0041763D                 test    eax, eax
.text:0041763F                 jz      short loc_417656
.text:00417641                 mov     [esp+1Ch+lpProcName], offset aCreatehardlink ; "CreateHardLinkA"
.text:00417649                 mov     [esp+1Ch+lpLibFileName], eax ; hModule
.text:0041764C                 call    GetProcAddress
.text:00417651                 sub     esp, 8
.text:00417654                 mov     edx, eax
.text:00417656
.text:00417656 loc_417656:                             ; CODE XREF: sub_417600+3F↑j
.text:00417656                 test    edx, edx
.text:00417658                 jz      short loc_4176A0
.text:0041765A                 mov     [esp+1Ch+bFailIfExists], 0
.text:00417662                 mov     [esp+1Ch+lpProcName], edi
.text:00417666                 mov     [esp+1Ch+lpLibFileName], ebx
.text:00417669                 call    edx
.text:0041766B                 sub     esp, 0Ch
.text:0041766E                 test    eax, eax
.text:00417670                 jz      short loc_417692
.text:00417672                 xor     esi, esi
.text:00417674                 lea     esi, [esi+0]
.text:0041767A                 lea     edi, [edi+0]
.text:00417680
.text:00417680 loc_417680:                             ; CODE XREF: sub_417600+95↓j
.text:00417680                                         ; sub_417600+B1↓j ...
.text:00417680                 mov     eax, esi
.text:00417682
.text:00417682 loc_417682:                             ; CODE XREF: sub_417600+100↓j
.text:00417682                 mov     ebx, [esp+1Ch+var_C]
.text:00417686                 mov     esi, [esp+1Ch+var_8]
.text:0041768A                 mov     edi, [esp+1Ch+var_4]
.text:0041768E                 add     esp, 1Ch
.text:00417691                 retn
.text:00417692 ; ---------------------------------------------------------------------------
.text:00417692
.text:00417692 loc_417692:                             ; CODE XREF: sub_417600+70↑j
.text:00417692                 cmp     esi, 0FFFFFFFFh
.text:00417695                 jnz     short loc_417680
.text:00417697                 mov     esi, esi
.text:00417699                 lea     edi, [edi+0]
.text:004176A0
.text:004176A0 loc_4176A0:                             ; CODE XREF: sub_417600+58↑j
.text:004176A0                 mov     [esp+1Ch+lpProcName], ebx ; LPCSTR
.text:004176A4                 mov     [esp+1Ch+lpLibFileName], edi ; LPCSTR
.text:004176A7                 call    sub_417420
.text:004176AC                 cmp     eax, 0FFFFFFFFh
.text:004176AF                 mov     esi, eax
.text:004176B1                 jnz     short loc_417680
.text:004176B3                 mov     [esp+1Ch+bFailIfExists], 1 ; bFailIfExists
.text:004176BB                 mov     [esp+1Ch+lpProcName], ebx ; lpNewFileName
.text:004176BF                 mov     [esp+1Ch+lpLibFileName], edi ; lpExistingFileName
.text:004176C2                 call    CopyFileA
.text:004176C7                 sub     esp, 0Ch
.text:004176CA                 test    eax, eax
.text:004176CC                 setnz   cl
.text:004176CF                 movzx   edx, cl
.text:004176D2                 lea     esi, [edx-1]
.text:004176D5                 cmp     esi, 0FFFFFFFFh
.text:004176D8                 jnz     short loc_417680
.text:004176DA                 call    sub_41A1F0
.text:004176DF                 mov     edi, eax
.text:004176E1                 call    _errno
.text:004176E6                 mov     [eax], edi
.text:004176E8                 jmp     short loc_417680
.text:004176E8 ; ---------------------------------------------------------------------------
.text:004176EA                 align 10h
.text:004176F0
.text:004176F0 loc_4176F0:                             ; CODE XREF: sub_417600+1E↑j
.text:004176F0                                         ; sub_417600+26↑j
.text:004176F0                 call    _errno
.text:004176F5                 mov     dword ptr [eax], 16h
.text:004176FB                 mov     eax, 0FFFFFFFFh
.text:00417700                 jmp     short loc_417682
.text:00417700 sub_417600      endp
.text:00417700
.text:00417700 ; ---------------------------------------------------------------------------
.text:00417702                 align 10h
.text:00417710                 retn
.text:00417710 ; ---------------------------------------------------------------------------
.text:00417711                 align 10h
.text:00417720
.text:00417720 ; =============== S U B R O U T I N E =======================================
.text:00417720
.text:00417720
.text:00417720 sub_417720      proc near               ; CODE XREF: sub_403910+1A5D↑p
.text:00417720                                         ; sub_403910+1AD6↑p ...
.text:00417720
.text:00417720 var_C           = dword ptr -0Ch
.text:00417720 var_8           = dword ptr -8
.text:00417720 var_4           = dword ptr -4
.text:00417720 arg_0           = dword ptr  4
.text:00417720 arg_4           = dword ptr  8
.text:00417720
.text:00417720                 sub     esp, 0Ch
.text:00417723                 mov     edx, [esp+0Ch+arg_4]
.text:00417727                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0041772E                 mov     [esp+0Ch+var_4], edx ; int
.text:00417732                 mov     edx, [esp+0Ch+arg_0]
.text:00417736                 mov     [esp+0Ch+var_8], edx ; int
.text:0041773A                 call    sub_417750
.text:0041773F                 add     esp, 0Ch
.text:00417742                 retn
.text:00417742 sub_417720      endp
.text:00417742
.text:00417742 ; ---------------------------------------------------------------------------
.text:00417743                 align 10h
.text:00417750
.text:00417750 ; =============== S U B R O U T I N E =======================================
.text:00417750
.text:00417750
.text:00417750 ; int __cdecl sub_417750(LPCSTR, int, int)
.text:00417750 sub_417750      proc near               ; CODE XREF: sub_417720+1A↑p
.text:00417750                                         ; sub_418180+90↓p ...
.text:00417750
.text:00417750 lpFileName      = dword ptr -2Ch
.text:00417750 dwDesiredAccess = dword ptr -28h
.text:00417750 dwShareMode     = dword ptr -24h
.text:00417750 lpSecurityAttributes= dword ptr -20h
.text:00417750 dwCreationDisposition= dword ptr -1Ch
.text:00417750 dwFlagsAndAttributes= dword ptr -18h
.text:00417750 hTemplateFile   = dword ptr -14h
.text:00417750 var_10          = dword ptr -10h
.text:00417750 var_C           = dword ptr -0Ch
.text:00417750 var_8           = dword ptr -8
.text:00417750 var_4           = dword ptr -4
.text:00417750 arg_0           = dword ptr  4
.text:00417750 arg_4           = dword ptr  8
.text:00417750 arg_8           = dword ptr  0Ch
.text:00417750
.text:00417750 ; FUNCTION CHUNK AT .text:004172E0 SIZE 0000013A BYTES
.text:00417750
.text:00417750                 sub     esp, 0Ch
.text:00417753                 mov     ecx, [esp+0Ch+arg_0]
.text:00417757                 mov     edx, [esp+0Ch+arg_4]
.text:0041775B                 mov     eax, [esp+0Ch+arg_8]
.text:0041775F                 test    ecx, ecx
.text:00417761                 jnz     short loc_417780
.text:00417763                 test    edx, edx
.text:00417765                 jz      short loc_417780
.text:00417767                 test    eax, eax
.text:00417769                 jz      short loc_417780
.text:0041776B                 mov     [esp+0Ch+arg_4], eax
.text:0041776F                 mov     [esp+0Ch+arg_0], edx
.text:00417773                 add     esp, 0Ch
.text:00417776                 jmp     loc_4172E0
.text:00417776 ; ---------------------------------------------------------------------------
.text:0041777B                 align 10h
.text:00417780
.text:00417780 loc_417780:                             ; CODE XREF: sub_417750+11↑j
.text:00417780                                         ; sub_417750+15↑j ...
.text:00417780                 call    _errno
.text:00417785                 mov     dword ptr [eax], 16h
.text:0041778B                 mov     eax, 0FFFFFFFFh
.text:00417790                 add     esp, 0Ch
.text:00417793                 retn
.text:00417793 sub_417750      endp
.text:00417793
.text:00417793 ; ---------------------------------------------------------------------------
.text:00417794                 align 10h
.text:004177A0
.text:004177A0 ; =============== S U B R O U T I N E =======================================
.text:004177A0
.text:004177A0
.text:004177A0 ; int __cdecl sub_4177A0(LPCSTR, int AccessMode)
.text:004177A0 sub_4177A0      proc near               ; CODE XREF: sub_403910+D01↑p
.text:004177A0                                         ; sub_406A50+27B↑p ...
.text:004177A0
.text:004177A0 lpPathName      = dword ptr -1Ch
.text:004177A0 lpSecurityAttributes= dword ptr -18h
.text:004177A0 var_8           = dword ptr -8
.text:004177A0 var_4           = dword ptr -4
.text:004177A0 arg_0           = dword ptr  4
.text:004177A0 AccessMode      = dword ptr  8
.text:004177A0
.text:004177A0                 sub     esp, 1Ch
.text:004177A3                 mov     [esp+1Ch+var_8], ebx
.text:004177A7                 mov     ebx, [esp+1Ch+arg_0]
.text:004177AB                 mov     [esp+1Ch+var_4], esi
.text:004177AF                 mov     esi, [esp+1Ch+AccessMode]
.text:004177B3                 test    ebx, ebx
.text:004177B5                 jz      short loc_417805
.text:004177B7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004177BF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:004177C2                 call    CreateDirectoryA
.text:004177C7                 sub     esp, 8
.text:004177CA                 test    eax, eax
.text:004177CC                 jz      short loc_4177E6
.text:004177CE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:004177D2                 mov     esi, [esp+1Ch+var_4]
.text:004177D6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:004177DA                 mov     ebx, [esp+1Ch+var_8]
.text:004177DE                 add     esp, 1Ch
.text:004177E1                 jmp     _chmod
.text:004177E6 ; ---------------------------------------------------------------------------
.text:004177E6
.text:004177E6 loc_4177E6:                             ; CODE XREF: sub_4177A0+2C↑j
.text:004177E6                 call    sub_41A1F0
.text:004177EB                 mov     esi, eax
.text:004177ED                 call    _errno
.text:004177F2                 mov     [eax], esi
.text:004177F4
.text:004177F4 loc_4177F4:                             ; CODE XREF: sub_4177A0+70↓j
.text:004177F4                 mov     ebx, [esp+1Ch+var_8]
.text:004177F8                 mov     eax, 0FFFFFFFFh
.text:004177FD                 mov     esi, [esp+1Ch+var_4]
.text:00417801                 add     esp, 1Ch
.text:00417804                 retn
.text:00417805 ; ---------------------------------------------------------------------------
.text:00417805
.text:00417805 loc_417805:                             ; CODE XREF: sub_4177A0+15↑j
.text:00417805                 call    _errno
.text:0041780A                 mov     dword ptr [eax], 16h
.text:00417810                 jmp     short loc_4177F4
.text:00417810 sub_4177A0      endp
.text:00417810
.text:00417810 ; ---------------------------------------------------------------------------
.text:00417812                 align 10h
.text:00417820
.text:00417820 ; =============== S U B R O U T I N E =======================================
.text:00417820
.text:00417820
.text:00417820 ; int __cdecl sub_417820(char *, __int16)
.text:00417820 sub_417820      proc near               ; CODE XREF: sub_403910+BC2↑p
.text:00417820
.text:00417820 Destination     = dword ptr -13Ch
.text:00417820 Source          = dword ptr -138h
.text:00417820 dwPipeMode      = dword ptr -134h
.text:00417820 nMaxInstances   = dword ptr -130h
.text:00417820 nOutBufferSize  = dword ptr -12Ch
.text:00417820 nInBufferSize   = dword ptr -128h
.text:00417820 nDefaultTimeOut = dword ptr -124h
.text:00417820 lpSecurityAttributes= dword ptr -120h
.text:00417820 Name            = byte ptr -11Ch
.text:00417820 var_118         = dword ptr -118h
.text:00417820 var_114         = word ptr -114h
.text:00417820 var_8           = dword ptr -8
.text:00417820 var_4           = dword ptr -4
.text:00417820 arg_0           = dword ptr  4
.text:00417820 arg_4           = word ptr  8
.text:00417820
.text:00417820                 sub     esp, 13Ch
.text:00417826                 mov     eax, [esp+13Ch+arg_0]
.text:0041782D                 mov     [esp+13Ch+var_4], esi
.text:00417834                 mov     [esp+13Ch+var_8], ebx
.text:0041783B                 test    eax, eax
.text:0041783D                 movzx   esi, [esp+13Ch+arg_4]
.text:00417845                 jz      loc_4178ED
.text:0041784B                 mov     dword ptr [esp+13Ch+Name], 5C2E5C5Ch
.text:00417853                 lea     ebx, [esp+13Ch+Name]
.text:00417857                 mov     [esp+13Ch+var_118], 65706970h
.text:0041785F                 mov     [esp+13Ch+var_114], 5Ch ; '\'
.text:00417866                 mov     [esp+13Ch+Source], eax ; Source
.text:0041786A                 mov     [esp+13Ch+Destination], ebx ; Destination
.text:0041786D                 call    strcat
.text:00417872                 mov     [esp+13Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041787A                 mov     [esp+13Ch+nDefaultTimeOut], 1388h ; nDefaultTimeOut
.text:00417882                 mov     [esp+13Ch+nInBufferSize], 400h ; nInBufferSize
.text:0041788A                 mov     [esp+13Ch+nOutBufferSize], 400h ; nOutBufferSize
.text:00417892                 mov     [esp+13Ch+nMaxInstances], 0FFh ; nMaxInstances
.text:0041789A                 mov     [esp+13Ch+dwPipeMode], 6 ; dwPipeMode
.text:004178A2                 mov     [esp+13Ch+Source], 3 ; dwOpenMode
.text:004178AA                 mov     [esp+13Ch+Destination], ebx ; lpName
.text:004178AD                 call    CreateNamedPipeA
.text:004178B2                 sub     esp, 20h
.text:004178B5                 cmp     eax, 0FFFFFFFFh
.text:004178B8                 jz      short loc_4178DB
.text:004178BA                 mov     [esp+13Ch+Source], esi ; Flags
.text:004178BE                 mov     [esp+13Ch+Destination], eax ; OSFileHandle
.text:004178C1                 call    _open_osfhandle
.text:004178C6
.text:004178C6 loc_4178C6:                             ; CODE XREF: sub_417820+CB↓j
.text:004178C6                 mov     ebx, [esp+13Ch+var_8]
.text:004178CD                 mov     esi, [esp+13Ch+var_4]
.text:004178D4                 add     esp, 13Ch
.text:004178DA                 retn
.text:004178DB ; ---------------------------------------------------------------------------
.text:004178DB
.text:004178DB loc_4178DB:                             ; CODE XREF: sub_417820+98↑j
.text:004178DB                 call    _errno
.text:004178E0                 mov     dword ptr [eax], 9
.text:004178E6
.text:004178E6 loc_4178E6:                             ; CODE XREF: sub_417820+D8↓j
.text:004178E6                 mov     eax, 0FFFFFFFFh
.text:004178EB                 jmp     short loc_4178C6
.text:004178ED ; ---------------------------------------------------------------------------
.text:004178ED
.text:004178ED loc_4178ED:                             ; CODE XREF: sub_417820+25↑j
.text:004178ED                 call    _errno
.text:004178F2                 mov     dword ptr [eax], 16h
.text:004178F8                 jmp     short loc_4178E6
.text:004178F8 sub_417820      endp
.text:004178F8
.text:004178F8 ; ---------------------------------------------------------------------------
.text:004178FA                 align 10h
.text:00417900
.text:00417900 ; =============== S U B R O U T I N E =======================================
.text:00417900
.text:00417900 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00417900
.text:00417900 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00417900 _win32_longpath proc near               ; CODE XREF: .text:004180C4↓p
.text:00417900
.text:00417900 C               = dword ptr -278h
.text:00417900 lpFindFileData  = dword ptr -274h
.text:00417900 Destination     = byte ptr -268h
.text:00417900 var_267         = byte ptr -267h
.text:00417900 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00417900 lpFileName      = dword ptr  8
.text:00417900
.text:00417900                 push    ebp
.text:00417901                 xor     eax, eax
.text:00417903                 push    edi
.text:00417904                 push    esi
.text:00417905                 push    ebx
.text:00417906                 sub     esp, 26Ch
.text:0041790C                 mov     esi, [esp+278h+lpFileName]
.text:00417913                 lea     ebp, [esp+278h+Destination]
.text:00417917                 test    esi, esi
.text:00417919                 jz      loc_417A77
.text:0041791F                 movsx   edx, byte ptr [esi]
.text:00417922                 mov     [esp+278h+C], edx ; C
.text:00417925                 call    isalpha
.text:0041792A                 test    eax, eax
.text:0041792C                 jz      short loc_41793F
.text:0041792E                 mov     eax, [esp+278h+lpFileName]
.text:00417935                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00417939                 jz      loc_417C7B
.text:0041793F
.text:0041793F loc_41793F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0041793F                 mov     edx, [esp+278h+lpFileName]
.text:00417946                 movzx   eax, byte ptr [edx]
.text:00417949                 cmp     al, 2Fh ; '/'
.text:0041794B                 jz      loc_417B5B
.text:00417951                 cmp     al, 5Ch ; '\'
.text:00417953                 jz      loc_417B5B
.text:00417959
.text:00417959 loc_417959:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00417959                                         ; _win32_longpath+2B1↓j ...
.text:00417959                 mov     [ebp+268h+Destination], 0
.text:0041795D                 movzx   ebx, byte ptr [esi]
.text:00417960                 test    bl, bl
.text:00417962                 jz      loc_417A59
.text:00417968                 nop
.text:00417969                 lea     esi, [esi+0]
.text:00417970
.text:00417970 loc_417970:                             ; CODE XREF: _win32_longpath+153↓j
.text:00417970                 cmp     bl, 2Fh ; '/'
.text:00417973                 jz      loc_417B10
.text:00417979                 cmp     bl, 5Ch ; '\'
.text:0041797C                 jz      loc_417B10
.text:00417982
.text:00417982 loc_417982:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00417982                                         ; _win32_longpath+22C↓j ...
.text:00417982                 cmp     bl, 2Eh ; '.'
.text:00417985                 jz      loc_417AB0
.text:0041798B
.text:0041798B loc_41798B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0041798B                                         ; _win32_longpath+203↓j
.text:0041798B                 test    bl, bl
.text:0041798D                 jz      loc_417A59
.text:00417993                 cmp     bl, 2Fh ; '/'
.text:00417996                 jz      short loc_4179B2
.text:00417998                 cmp     bl, 5Ch ; '\'
.text:0041799B                 jz      short loc_4179B2
.text:0041799D                 lea     esi, [esi+0]
.text:004179A0
.text:004179A0 loc_4179A0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:004179A0                 inc     esi
.text:004179A1                 movzx   ebx, byte ptr [esi]
.text:004179A4                 test    bl, bl
.text:004179A6                 jz      short loc_4179B2
.text:004179A8                 cmp     bl, 2Fh ; '/'
.text:004179AB                 jz      short loc_4179B2
.text:004179AD                 cmp     bl, 5Ch ; '\'
.text:004179B0                 jnz     short loc_4179A0
.text:004179B2
.text:004179B2 loc_4179B2:                             ; CODE XREF: _win32_longpath+96↑j
.text:004179B2                                         ; _win32_longpath+9B↑j ...
.text:004179B2                 mov     byte ptr [esi], 0
.text:004179B5                 lea     edx, [esp+278h+FindFileData]
.text:004179BC                 mov     eax, [esp+278h+lpFileName]
.text:004179C3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:004179C7                 mov     [esp+278h+C], eax ; lpFileName
.text:004179CA                 call    FindFirstFileA
.text:004179CF                 mov     [esi], bl
.text:004179D1                 sub     esp, 8
.text:004179D4                 mov     edi, eax
.text:004179D6                 cmp     eax, 0FFFFFFFFh
.text:004179D9                 jz      loc_417A9C
.text:004179DF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:004179E6                 mov     ecx, ebx
.text:004179E8                 nop
.text:004179E9                 lea     esi, [esi+0]
.text:004179F0
.text:004179F0 loc_4179F0:                             ; CODE XREF: _win32_longpath+105↓j
.text:004179F0                 mov     eax, [ebx]
.text:004179F2                 add     ebx, 4
.text:004179F5                 lea     edx, [eax-1010101h]
.text:004179FB                 not     eax
.text:004179FD                 and     edx, eax
.text:004179FF                 and     edx, 80808080h
.text:00417A05                 jz      short loc_4179F0
.text:00417A07                 test    edx, 8080h
.text:00417A0D                 jnz     short loc_417A15
.text:00417A0F                 shr     edx, 10h
.text:00417A12                 add     ebx, 2
.text:00417A15
.text:00417A15 loc_417A15:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00417A15                 add     dl, dl
.text:00417A17                 sbb     ebx, 3
.text:00417A1A                 sub     ebx, ecx
.text:00417A1C                 lea     ecx, [esp+278h+Destination]
.text:00417A20                 sub     ecx, ebp
.text:00417A22                 add     ecx, 105h
.text:00417A28                 cmp     ecx, ebx
.text:00417A2A                 jle     short loc_417A82
.text:00417A2C                 mov     [esp+278h+C], ebp ; Destination
.text:00417A2F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00417A36                 add     ebp, ebx
.text:00417A38                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00417A3C                 call    strcpy
.text:00417A41                 mov     [esp+278h+C], edi ; hFindFile
.text:00417A44                 call    FindClose
.text:00417A49                 sub     esp, 4
.text:00417A4C
.text:00417A4C loc_417A4C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00417A4C                 movzx   ecx, byte ptr [esi]
.text:00417A4F                 test    cl, cl
.text:00417A51                 mov     bl, cl
.text:00417A53                 jnz     loc_417970
.text:00417A59
.text:00417A59 loc_417A59:                             ; CODE XREF: _win32_longpath+62↑j
.text:00417A59                                         ; _win32_longpath+8D↑j
.text:00417A59                 mov     esi, [esp+278h+lpFileName]
.text:00417A60                 lea     ebp, [esp+278h+Destination]
.text:00417A64                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00417A68                 mov     [esp+278h+C], esi ; Destination
.text:00417A6B                 call    strcpy
.text:00417A70                 mov     eax, [esp+278h+lpFileName]
.text:00417A77
.text:00417A77 loc_417A77:                             ; CODE XREF: _win32_longpath+19↑j
.text:00417A77                                         ; _win32_longpath+19A↓j
.text:00417A77                 add     esp, 26Ch
.text:00417A7D                 pop     ebx
.text:00417A7E                 pop     esi
.text:00417A7F                 pop     edi
.text:00417A80                 pop     ebp
.text:00417A81                 retn
.text:00417A82 ; ---------------------------------------------------------------------------
.text:00417A82
.text:00417A82 loc_417A82:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00417A82                 mov     [esp+278h+C], edi ; hFindFile
.text:00417A85                 call    FindClose
.text:00417A8A                 sub     esp, 4
.text:00417A8D                 call    _errno
.text:00417A92                 mov     dword ptr [eax], 22h ; '"'
.text:00417A98
.text:00417A98 loc_417A98:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00417A98                 xor     eax, eax
.text:00417A9A                 jmp     short loc_417A77
.text:00417A9C ; ---------------------------------------------------------------------------
.text:00417A9C
.text:00417A9C loc_417A9C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00417A9C                 call    _errno
.text:00417AA1                 mov     dword ptr [eax], 16h
.text:00417AA7                 jmp     short loc_417A98
.text:00417AA7 ; ---------------------------------------------------------------------------
.text:00417AA9                 align 10h
.text:00417AB0
.text:00417AB0 loc_417AB0:                             ; CODE XREF: _win32_longpath+85↑j
.text:00417AB0                 movzx   eax, byte ptr [esi+1]
.text:00417AB4                 test    al, al
.text:00417AB6                 jnz     short loc_417AE5
.text:00417AB8
.text:00417AB8 loc_417AB8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00417AB8                                         ; _win32_longpath+1EB↓j ...
.text:00417AB8                 test    bl, bl
.text:00417ABA                 jz      short loc_417ADC
.text:00417ABC                 cmp     bl, 2Fh ; '/'
.text:00417ABF                 jz      short loc_417ADC
.text:00417AC1                 cmp     bl, 5Ch ; '\'
.text:00417AC4                 jz      short loc_417ADC
.text:00417AC6
.text:00417AC6 loc_417AC6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00417AC6                 mov     [ebp+268h+Destination], bl
.text:00417AC9                 inc     esi
.text:00417ACA                 inc     ebp
.text:00417ACB                 movzx   ebx, byte ptr [esi]
.text:00417ACE                 test    bl, bl
.text:00417AD0                 jz      short loc_417ADC
.text:00417AD2                 cmp     bl, 2Fh ; '/'
.text:00417AD5                 jz      short loc_417ADC
.text:00417AD7                 cmp     bl, 5Ch ; '\'
.text:00417ADA                 jnz     short loc_417AC6
.text:00417ADC
.text:00417ADC loc_417ADC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00417ADC                                         ; _win32_longpath+1BF↑j ...
.text:00417ADC                 mov     [ebp+268h+Destination], 0
.text:00417AE0                 jmp     loc_417A4C
.text:00417AE5 ; ---------------------------------------------------------------------------
.text:00417AE5
.text:00417AE5 loc_417AE5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00417AE5                 cmp     al, 2Fh ; '/'
.text:00417AE7                 jz      short loc_417AB8
.text:00417AE9                 cmp     al, 5Ch ; '\'
.text:00417AEB                 jz      short loc_417AB8
.text:00417AED                 cmp     al, 2Eh ; '.'
.text:00417AEF                 jnz     loc_41798B
.text:00417AF5                 movzx   eax, byte ptr [esi+2]
.text:00417AF9                 test    al, al
.text:00417AFB                 jz      short loc_417AB8
.text:00417AFD                 cmp     al, 2Fh ; '/'
.text:00417AFF                 jz      short loc_417AB8
.text:00417B01                 cmp     al, 5Ch ; '\'
.text:00417B03                 jnz     loc_41798B
.text:00417B09                 jmp     short loc_417AB8
.text:00417B09 ; ---------------------------------------------------------------------------
.text:00417B0B                 align 10h
.text:00417B10
.text:00417B10 loc_417B10:                             ; CODE XREF: _win32_longpath+73↑j
.text:00417B10                                         ; _win32_longpath+7C↑j
.text:00417B10                 mov     [ebp+268h+Destination], bl
.text:00417B13                 inc     esi
.text:00417B14                 inc     ebp
.text:00417B15                 mov     [ebp+268h+Destination], 0
.text:00417B19                 movzx   ebx, byte ptr [esi]
.text:00417B1C                 test    bl, bl
.text:00417B1E                 jz      loc_417982
.text:00417B24                 cmp     bl, 2Fh ; '/'
.text:00417B27                 jz      short loc_417B40
.text:00417B29                 cmp     bl, 5Ch ; '\'
.text:00417B2C                 jnz     loc_417982
.text:00417B32                 lea     esi, [esi+0]
.text:00417B39                 lea     edi, [edi+0]
.text:00417B40
.text:00417B40 loc_417B40:                             ; CODE XREF: _win32_longpath+227↑j
.text:00417B40                                         ; _win32_longpath+24F↓j ...
.text:00417B40                 inc     esi
.text:00417B41                 movzx   ebx, byte ptr [esi]
.text:00417B44                 test    bl, bl
.text:00417B46                 jz      loc_417982
.text:00417B4C                 cmp     bl, 2Fh ; '/'
.text:00417B4F                 jz      short loc_417B40
.text:00417B51                 cmp     bl, 5Ch ; '\'
.text:00417B54                 jz      short loc_417B40
.text:00417B56                 jmp     loc_417982
.text:00417B5B ; ---------------------------------------------------------------------------
.text:00417B5B
.text:00417B5B loc_417B5B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00417B5B                                         ; _win32_longpath+53↑j
.text:00417B5B                 mov     edi, [esp+278h+lpFileName]
.text:00417B62                 movzx   edx, byte ptr [edi+1]
.text:00417B66                 cmp     dl, 2Fh ; '/'
.text:00417B69                 jz      short loc_417B74
.text:00417B6B                 cmp     dl, 5Ch ; '\'
.text:00417B6E                 jnz     loc_417959
.text:00417B74
.text:00417B74 loc_417B74:                             ; CODE XREF: _win32_longpath+269↑j
.text:00417B74                 mov     esi, [esp+278h+lpFileName]
.text:00417B7B                 mov     [ebp+268h+Destination], al
.text:00417B7E                 mov     ecx, [esp+278h+lpFileName]
.text:00417B85                 inc     ebp
.text:00417B86                 add     esi, 2
.text:00417B89                 movzx   ebx, byte ptr [ecx+1]
.text:00417B8D                 mov     [ebp+268h+Destination], bl
.text:00417B90                 inc     ebp
.text:00417B91                 movzx   eax, byte ptr [ecx+2]
.text:00417B95                 test    al, al
.text:00417B97                 jz      loc_417C73
.text:00417B9D                 cmp     al, 2Fh ; '/'
.text:00417B9F                 jz      loc_417C58
.text:00417BA5                 cmp     al, 5Ch ; '\'
.text:00417BA7                 mov     bl, al
.text:00417BA9                 jz      loc_417C58
.text:00417BAF
.text:00417BAF loc_417BAF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00417BAF                                         ; _win32_longpath+376↓j
.text:00417BAF                 test    bl, bl
.text:00417BB1                 jz      loc_417959
.text:00417BB7                 cmp     bl, 2Fh ; '/'
.text:00417BBA                 jz      short loc_417BDB
.text:00417BBC                 cmp     bl, 5Ch ; '\'
.text:00417BBF                 jz      short loc_417BDB
.text:00417BC1
.text:00417BC1 loc_417BC1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00417BC1                 mov     [ebp+268h+Destination], bl
.text:00417BC4                 inc     esi
.text:00417BC5                 inc     ebp
.text:00417BC6                 movzx   ebx, byte ptr [esi]
.text:00417BC9                 test    bl, bl
.text:00417BCB                 jz      loc_417959
.text:00417BD1                 cmp     bl, 2Fh ; '/'
.text:00417BD4                 jz      short loc_417BDB
.text:00417BD6                 cmp     bl, 5Ch ; '\'
.text:00417BD9                 jnz     short loc_417BC1
.text:00417BDB
.text:00417BDB loc_417BDB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00417BDB                                         ; _win32_longpath+2BF↑j ...
.text:00417BDB                 test    bl, bl
.text:00417BDD                 jz      loc_417959
.text:00417BE3                 mov     [ebp+268h+Destination], bl
.text:00417BE6                 inc     esi
.text:00417BE7                 inc     ebp
.text:00417BE8                 movzx   ebx, byte ptr [esi]
.text:00417BEB                 test    bl, bl
.text:00417BED                 jz      loc_417959
.text:00417BF3                 cmp     bl, 2Fh ; '/'
.text:00417BF6                 jz      short loc_417C40
.text:00417BF8                 cmp     bl, 5Ch ; '\'
.text:00417BFB                 jz      short loc_417C40
.text:00417BFD
.text:00417BFD loc_417BFD:                             ; CODE XREF: _win32_longpath+356↓j
.text:00417BFD                 test    bl, bl
.text:00417BFF                 jz      loc_417959
.text:00417C05                 cmp     bl, 2Fh ; '/'
.text:00417C08                 jz      loc_417959
.text:00417C0E                 cmp     bl, 5Ch ; '\'
.text:00417C11                 jz      loc_417959
.text:00417C17
.text:00417C17 loc_417C17:                             ; CODE XREF: _win32_longpath+333↓j
.text:00417C17                 mov     [ebp+268h+Destination], bl
.text:00417C1A                 inc     esi
.text:00417C1B                 inc     ebp
.text:00417C1C                 movzx   ebx, byte ptr [esi]
.text:00417C1F                 test    bl, bl
.text:00417C21                 jz      loc_417959
.text:00417C27                 cmp     bl, 2Fh ; '/'
.text:00417C2A                 jz      loc_417959
.text:00417C30                 cmp     bl, 5Ch ; '\'
.text:00417C33                 jnz     short loc_417C17
.text:00417C35                 jmp     loc_417959
.text:00417C35 ; ---------------------------------------------------------------------------
.text:00417C3A                 align 10h
.text:00417C40
.text:00417C40 loc_417C40:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00417C40                                         ; _win32_longpath+2FB↑j ...
.text:00417C40                 inc     esi
.text:00417C41                 movzx   ebx, byte ptr [esi]
.text:00417C44                 test    bl, bl
.text:00417C46                 jz      loc_417959
.text:00417C4C                 cmp     bl, 2Fh ; '/'
.text:00417C4F                 jz      short loc_417C40
.text:00417C51                 cmp     bl, 5Ch ; '\'
.text:00417C54                 jz      short loc_417C40
.text:00417C56                 jmp     short loc_417BFD
.text:00417C58 ; ---------------------------------------------------------------------------
.text:00417C58
.text:00417C58 loc_417C58:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00417C58                                         ; _win32_longpath+2A9↑j ...
.text:00417C58                 inc     esi
.text:00417C59                 movzx   ebx, byte ptr [esi]
.text:00417C5C                 test    bl, bl
.text:00417C5E                 jz      loc_417959
.text:00417C64                 cmp     bl, 2Fh ; '/'
.text:00417C67                 jz      short loc_417C58
.text:00417C69                 cmp     bl, 5Ch ; '\'
.text:00417C6C                 jz      short loc_417C58
.text:00417C6E                 jmp     loc_417BAF
.text:00417C73 ; ---------------------------------------------------------------------------
.text:00417C73
.text:00417C73 loc_417C73:                             ; CODE XREF: _win32_longpath+297↑j
.text:00417C73                 movzx   ebx, byte ptr [esi]
.text:00417C76                 jmp     loc_417BAF
.text:00417C7B ; ---------------------------------------------------------------------------
.text:00417C7B
.text:00417C7B loc_417C7B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00417C7B                 movzx   ecx, byte ptr [eax]
.text:00417C7E                 mov     esi, eax
.text:00417C80                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00417C85                 add     esi, 2
.text:00417C88                 lea     ebp, [esp+12h]
.text:00417C8C                 mov     [esp+278h+Destination], cl
.text:00417C90                 jmp     loc_417959
.text:00417C90 _win32_longpath endp
.text:00417C90
.text:00417C90 ; ---------------------------------------------------------------------------
.text:00417C95                 align 10h
.text:00417CA0                 sub     esp, 0Ch
.text:00417CA3                 mov     edx, [esp+10h]
.text:00417CA7                 mov     dword ptr [esp+4], 0
.text:00417CAF                 mov     [esp], edx
.text:00417CB2                 call    sub_419E90
.text:00417CB7                 inc     eax
.text:00417CB8                 setnz   dl
.text:00417CBB                 add     esp, 0Ch
.text:00417CBE                 movzx   eax, dl
.text:00417CC1                 retn
.text:00417CC1 ; ---------------------------------------------------------------------------
.text:00417CC2                 align 10h
.text:00417CD0
.text:00417CD0 ; =============== S U B R O U T I N E =======================================
.text:00417CD0
.text:00417CD0
.text:00417CD0 sub_417CD0      proc near               ; CODE XREF: sub_4184E0+B4↓p
.text:00417CD0                                         ; sub_419480+CE↓p ...
.text:00417CD0
.text:00417CD0 arg_0           = dword ptr  4
.text:00417CD0
.text:00417CD0                 mov     ecx, [esp+arg_0]
.text:00417CD4                 mov     edx, ecx
.text:00417CD6                 movzx   eax, byte ptr [ecx]
.text:00417CD9                 test    al, al
.text:00417CDB                 jz      short loc_417CEC
.text:00417CDD                 lea     esi, [esi+0]
.text:00417CE0
.text:00417CE0 loc_417CE0:                             ; CODE XREF: sub_417CD0+1A↓j
.text:00417CE0                 cmp     al, 5Ch ; '\'
.text:00417CE2                 jz      short loc_417CF0
.text:00417CE4
.text:00417CE4 loc_417CE4:                             ; CODE XREF: sub_417CD0+23↓j
.text:00417CE4                 inc     edx
.text:00417CE5                 movzx   eax, byte ptr [edx]
.text:00417CE8                 test    al, al
.text:00417CEA                 jnz     short loc_417CE0
.text:00417CEC
.text:00417CEC loc_417CEC:                             ; CODE XREF: sub_417CD0+B↑j
.text:00417CEC                 mov     eax, ecx
.text:00417CEE                 retn
.text:00417CEE ; ---------------------------------------------------------------------------
.text:00417CEF                 align 10h
.text:00417CF0
.text:00417CF0 loc_417CF0:                             ; CODE XREF: sub_417CD0+12↑j
.text:00417CF0                 mov     byte ptr [edx], 2Fh ; '/'
.text:00417CF3                 jmp     short loc_417CE4
.text:00417CF3 sub_417CD0      endp
.text:00417CF3
.text:00417CF3 ; ---------------------------------------------------------------------------
.text:00417CF5                 align 10h
.text:00417D00                 push    ebx
.text:00417D01                 sub     esp, 8
.text:00417D04                 mov     ebx, [esp+14h]
.text:00417D08                 mov     edx, [esp+10h]
.text:00417D0C                 mov     [esp], ebx
.text:00417D0F                 mov     [esp+4], edx
.text:00417D13                 call    strcpy
.text:00417D18                 movzx   eax, byte ptr [ebx]
.text:00417D1B                 mov     edx, ebx
.text:00417D1D                 test    al, al
.text:00417D1F                 jz      short loc_417D3C
.text:00417D21                 jmp     short loc_417D30
.text:00417D21 ; ---------------------------------------------------------------------------
.text:00417D23                 align 10h
.text:00417D30
.text:00417D30 loc_417D30:                             ; CODE XREF: .text:00417D21↑j
.text:00417D30                                         ; .text:00417D3A↓j
.text:00417D30                 cmp     al, 5Ch ; '\'
.text:00417D32                 jz      short loc_417D43
.text:00417D34
.text:00417D34 loc_417D34:                             ; CODE XREF: .text:00417D46↓j
.text:00417D34                 inc     edx
.text:00417D35                 movzx   eax, byte ptr [edx]
.text:00417D38                 test    al, al
.text:00417D3A                 jnz     short loc_417D30
.text:00417D3C
.text:00417D3C loc_417D3C:                             ; CODE XREF: .text:00417D1F↑j
.text:00417D3C                 add     esp, 8
.text:00417D3F                 xor     eax, eax
.text:00417D41                 pop     ebx
.text:00417D42                 retn
.text:00417D43 ; ---------------------------------------------------------------------------
.text:00417D43
.text:00417D43 loc_417D43:                             ; CODE XREF: .text:00417D32↑j
.text:00417D43                 mov     byte ptr [edx], 2Fh ; '/'
.text:00417D46                 jmp     short loc_417D34
.text:00417D46 ; ---------------------------------------------------------------------------
.text:00417D48                 align 10h
.text:00417D50
.text:00417D50 ; =============== S U B R O U T I N E =======================================
.text:00417D50
.text:00417D50
.text:00417D50 sub_417D50      proc near               ; CODE XREF: sub_4160F0+16↑p
.text:00417D50                                         ; sub_4165F0+1F↑p ...
.text:00417D50
.text:00417D50 arg_0           = dword ptr  4
.text:00417D50
.text:00417D50                 mov     ecx, [esp+arg_0]
.text:00417D54                 mov     edx, ecx
.text:00417D56                 movzx   eax, byte ptr [ecx]
.text:00417D59                 test    al, al
.text:00417D5B                 jz      short loc_417D6C
.text:00417D5D                 lea     esi, [esi+0]
.text:00417D60
.text:00417D60 loc_417D60:                             ; CODE XREF: sub_417D50+1A↓j
.text:00417D60                 cmp     al, 2Fh ; '/'
.text:00417D62                 jz      short loc_417D70
.text:00417D64
.text:00417D64 loc_417D64:                             ; CODE XREF: sub_417D50+23↓j
.text:00417D64                 inc     edx
.text:00417D65                 movzx   eax, byte ptr [edx]
.text:00417D68                 test    al, al
.text:00417D6A                 jnz     short loc_417D60
.text:00417D6C
.text:00417D6C loc_417D6C:                             ; CODE XREF: sub_417D50+B↑j
.text:00417D6C                 mov     eax, ecx
.text:00417D6E                 retn
.text:00417D6E ; ---------------------------------------------------------------------------
.text:00417D6F                 align 10h
.text:00417D70
.text:00417D70 loc_417D70:                             ; CODE XREF: sub_417D50+12↑j
.text:00417D70                 mov     byte ptr [edx], 5Ch ; '\'
.text:00417D73                 jmp     short loc_417D64
.text:00417D73 sub_417D50      endp
.text:00417D73
.text:00417D73 ; ---------------------------------------------------------------------------
.text:00417D75                 align 10h
.text:00417D80                 push    ebx
.text:00417D81                 sub     esp, 8
.text:00417D84                 mov     ebx, [esp+14h]
.text:00417D88                 mov     edx, [esp+10h]
.text:00417D8C                 mov     [esp], ebx
.text:00417D8F                 mov     [esp+4], edx
.text:00417D93                 call    strcpy
.text:00417D98                 movzx   eax, byte ptr [ebx]
.text:00417D9B                 mov     edx, ebx
.text:00417D9D                 test    al, al
.text:00417D9F                 jz      short loc_417DBC
.text:00417DA1                 jmp     short loc_417DB0
.text:00417DA1 ; ---------------------------------------------------------------------------
.text:00417DA3                 align 10h
.text:00417DB0
.text:00417DB0 loc_417DB0:                             ; CODE XREF: .text:00417DA1↑j
.text:00417DB0                                         ; .text:00417DBA↓j
.text:00417DB0                 cmp     al, 2Fh ; '/'
.text:00417DB2                 jz      short loc_417DC3
.text:00417DB4
.text:00417DB4 loc_417DB4:                             ; CODE XREF: .text:00417DC6↓j
.text:00417DB4                 inc     edx
.text:00417DB5                 movzx   eax, byte ptr [edx]
.text:00417DB8                 test    al, al
.text:00417DBA                 jnz     short loc_417DB0
.text:00417DBC
.text:00417DBC loc_417DBC:                             ; CODE XREF: .text:00417D9F↑j
.text:00417DBC                 add     esp, 8
.text:00417DBF                 xor     eax, eax
.text:00417DC1                 pop     ebx
.text:00417DC2                 retn
.text:00417DC3 ; ---------------------------------------------------------------------------
.text:00417DC3
.text:00417DC3 loc_417DC3:                             ; CODE XREF: .text:00417DB2↑j
.text:00417DC3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00417DC6                 jmp     short loc_417DB4
.text:00417DC6 ; ---------------------------------------------------------------------------
.text:00417DC8                 align 10h
.text:00417DD0                 push    ebx
.text:00417DD1                 sub     esp, 8
.text:00417DD4                 mov     ebx, [esp+14h]
.text:00417DD8                 mov     edx, [esp+10h]
.text:00417DDC                 mov     [esp+4], ebx
.text:00417DE0                 mov     [esp], edx
.text:00417DE3                 call    sub_41A210
.text:00417DE8                 movzx   eax, byte ptr [ebx]
.text:00417DEB                 mov     edx, ebx
.text:00417DED                 test    al, al
.text:00417DEF                 jz      short loc_417E0C
.text:00417DF1                 jmp     short loc_417E00
.text:00417DF1 ; ---------------------------------------------------------------------------
.text:00417DF3                 align 10h
.text:00417E00
.text:00417E00 loc_417E00:                             ; CODE XREF: .text:00417DF1↑j
.text:00417E00                                         ; .text:00417E0A↓j
.text:00417E00                 cmp     al, 2Fh ; '/'
.text:00417E02                 jz      short loc_417E13
.text:00417E04
.text:00417E04 loc_417E04:                             ; CODE XREF: .text:00417E16↓j
.text:00417E04                 inc     edx
.text:00417E05                 movzx   eax, byte ptr [edx]
.text:00417E08                 test    al, al
.text:00417E0A                 jnz     short loc_417E00
.text:00417E0C
.text:00417E0C loc_417E0C:                             ; CODE XREF: .text:00417DEF↑j
.text:00417E0C                 add     esp, 8
.text:00417E0F                 xor     eax, eax
.text:00417E11                 pop     ebx
.text:00417E12                 retn
.text:00417E13 ; ---------------------------------------------------------------------------
.text:00417E13
.text:00417E13 loc_417E13:                             ; CODE XREF: .text:00417E02↑j
.text:00417E13                 mov     byte ptr [edx], 5Ch ; '\'
.text:00417E16                 jmp     short loc_417E04
.text:00417E16 ; ---------------------------------------------------------------------------
.text:00417E18                 align 10h
.text:00417E20                 push    ebx
.text:00417E21                 sub     esp, 8
.text:00417E24                 mov     ebx, [esp+14h]
.text:00417E28                 mov     edx, [esp+10h]
.text:00417E2C                 mov     [esp], ebx
.text:00417E2F                 mov     [esp+4], edx
.text:00417E33                 call    sub_41A210
.text:00417E38                 movzx   eax, byte ptr [ebx]
.text:00417E3B                 mov     edx, ebx
.text:00417E3D                 test    al, al
.text:00417E3F                 jz      short loc_417E5C
.text:00417E41                 jmp     short loc_417E50
.text:00417E41 ; ---------------------------------------------------------------------------
.text:00417E43                 align 10h
.text:00417E50
.text:00417E50 loc_417E50:                             ; CODE XREF: .text:00417E41↑j
.text:00417E50                                         ; .text:00417E5A↓j
.text:00417E50                 cmp     al, 5Ch ; '\'
.text:00417E52                 jz      short loc_417E61
.text:00417E54
.text:00417E54 loc_417E54:                             ; CODE XREF: .text:00417E64↓j
.text:00417E54                 inc     edx
.text:00417E55                 movzx   eax, byte ptr [edx]
.text:00417E58                 test    al, al
.text:00417E5A                 jnz     short loc_417E50
.text:00417E5C
.text:00417E5C loc_417E5C:                             ; CODE XREF: .text:00417E3F↑j
.text:00417E5C                 add     esp, 8
.text:00417E5F                 pop     ebx
.text:00417E60                 retn
.text:00417E61 ; ---------------------------------------------------------------------------
.text:00417E61
.text:00417E61 loc_417E61:                             ; CODE XREF: .text:00417E52↑j
.text:00417E61                 mov     byte ptr [edx], 2Fh ; '/'
.text:00417E64                 jmp     short loc_417E54
.text:00417E64 ; ---------------------------------------------------------------------------
.text:00417E66                 align 10h
.text:00417E70
.text:00417E70 ; =============== S U B R O U T I N E =======================================
.text:00417E70
.text:00417E70
.text:00417E70 ; int __cdecl sub_417E70(LPSTR)
.text:00417E70 sub_417E70      proc near               ; CODE XREF: .text:00417EFE↓p
.text:00417E70                                         ; .text:00417F3E↓p ...
.text:00417E70
.text:00417E70 hModule         = dword ptr -1Ch
.text:00417E70 lpFilename      = dword ptr -18h
.text:00417E70 nSize           = dword ptr -14h
.text:00417E70 arg_0           = dword ptr  4
.text:00417E70
.text:00417E70                 push    esi
.text:00417E71                 push    ebx
.text:00417E72                 sub     esp, 14h
.text:00417E75                 mov     esi, [esp+1Ch+arg_0]
.text:00417E79                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00417E81                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00417E88                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:00417E8C                 call    GetModuleFileNameA
.text:00417E91                 sub     esp, 0Ch
.text:00417E94                 test    eax, eax
.text:00417E96                 jz      short loc_417ED8
.text:00417E98                 cmp     eax, 104h
.text:00417E9D                 jg      short loc_417EC9
.text:00417E9F
.text:00417E9F loc_417E9F:                             ; CODE XREF: sub_417E70+66↓j
.text:00417E9F                                         ; sub_417E70+78↓j
.text:00417E9F                 movzx   eax, byte ptr [esi]
.text:00417EA2                 mov     edx, esi
.text:00417EA4                 test    al, al
.text:00417EA6                 jz      short loc_417EBC
.text:00417EA8                 nop
.text:00417EA9                 lea     esi, [esi+0]
.text:00417EB0
.text:00417EB0 loc_417EB0:                             ; CODE XREF: sub_417E70+4A↓j
.text:00417EB0                 cmp     al, 5Ch ; '\'
.text:00417EB2                 jz      short loc_417EC4
.text:00417EB4
.text:00417EB4 loc_417EB4:                             ; CODE XREF: sub_417E70+57↓j
.text:00417EB4                 inc     edx
.text:00417EB5                 movzx   eax, byte ptr [edx]
.text:00417EB8                 test    al, al
.text:00417EBA                 jnz     short loc_417EB0
.text:00417EBC
.text:00417EBC loc_417EBC:                             ; CODE XREF: sub_417E70+36↑j
.text:00417EBC                 add     esp, 14h
.text:00417EBF                 mov     eax, esi
.text:00417EC1                 pop     ebx
.text:00417EC2                 pop     esi
.text:00417EC3                 retn
.text:00417EC4 ; ---------------------------------------------------------------------------
.text:00417EC4
.text:00417EC4 loc_417EC4:                             ; CODE XREF: sub_417E70+42↑j
.text:00417EC4                 mov     byte ptr [edx], 2Fh ; '/'
.text:00417EC7                 jmp     short loc_417EB4
.text:00417EC9 ; ---------------------------------------------------------------------------
.text:00417EC9
.text:00417EC9 loc_417EC9:                             ; CODE XREF: sub_417E70+2D↑j
.text:00417EC9                 call    _errno
.text:00417ECE                 mov     dword ptr [eax], 26h ; '&'
.text:00417ED4                 xor     esi, esi
.text:00417ED6                 jmp     short loc_417E9F
.text:00417ED8 ; ---------------------------------------------------------------------------
.text:00417ED8
.text:00417ED8 loc_417ED8:                             ; CODE XREF: sub_417E70+26↑j
.text:00417ED8                 call    sub_41A1F0
.text:00417EDD                 mov     ebx, eax
.text:00417EDF                 xor     esi, esi
.text:00417EE1                 call    _errno
.text:00417EE6                 mov     [eax], ebx
.text:00417EE8                 jmp     short loc_417E9F
.text:00417EE8 sub_417E70      endp
.text:00417EE8
.text:00417EE8 ; ---------------------------------------------------------------------------
.text:00417EEA                 align 10h
.text:00417EF0                 sub     esp, 0Ch
.text:00417EF3                 mov     [esp+8], ebx
.text:00417EF7                 mov     ebx, [esp+10h]
.text:00417EFB                 mov     [esp], ebx
.text:00417EFE                 call    sub_417E70
.text:00417F03                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00417F0B                 mov     [esp], ebx
.text:00417F0E                 call    strrchr
.text:00417F13                 test    eax, eax
.text:00417F15                 jz      short loc_417F1A
.text:00417F17                 lea     ebx, [eax+1]
.text:00417F1A
.text:00417F1A loc_417F1A:                             ; CODE XREF: .text:00417F15↑j
.text:00417F1A                 mov     eax, ebx
.text:00417F1C                 mov     ebx, [esp+8]
.text:00417F20                 add     esp, 0Ch
.text:00417F23                 retn
.text:00417F23 ; ---------------------------------------------------------------------------
.text:00417F24                 align 10h
.text:00417F30                 sub     esp, 0Ch
.text:00417F33                 mov     [esp+8], ebx
.text:00417F37                 mov     ebx, [esp+10h]
.text:00417F3B                 mov     [esp], ebx
.text:00417F3E                 call    sub_417E70
.text:00417F43                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00417F4B                 mov     [esp], ebx
.text:00417F4E                 call    strrchr
.text:00417F53                 test    eax, eax
.text:00417F55                 jz      short loc_417F5A
.text:00417F57                 mov     byte ptr [eax], 0
.text:00417F5A
.text:00417F5A loc_417F5A:                             ; CODE XREF: .text:00417F55↑j
.text:00417F5A                 mov     eax, ebx
.text:00417F5C                 mov     ebx, [esp+8]
.text:00417F60                 add     esp, 0Ch
.text:00417F63                 retn
.text:00417F63 ; ---------------------------------------------------------------------------
.text:00417F64                 align 10h
.text:00417F70                 sub     esp, 0Ch
.text:00417F73                 mov     [esp+8], ebx
.text:00417F77                 mov     ebx, [esp+10h]
.text:00417F7B                 mov     [esp], ebx
.text:00417F7E                 call    sub_417E70
.text:00417F83                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00417F8B                 mov     [esp], ebx
.text:00417F8E                 call    strrchr
.text:00417F93                 test    eax, eax
.text:00417F95                 jz      short loc_417F9A
.text:00417F97                 mov     byte ptr [eax], 0
.text:00417F9A
.text:00417F9A loc_417F9A:                             ; CODE XREF: .text:00417F95↑j
.text:00417F9A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00417FA2                 mov     [esp], ebx
.text:00417FA5                 call    strrchr
.text:00417FAA                 test    eax, eax
.text:00417FAC                 jz      short loc_417FB1
.text:00417FAE                 mov     byte ptr [eax], 0
.text:00417FB1
.text:00417FB1 loc_417FB1:                             ; CODE XREF: .text:00417FAC↑j
.text:00417FB1                 mov     eax, ebx
.text:00417FB3                 mov     ebx, [esp+8]
.text:00417FB7                 add     esp, 0Ch
.text:00417FBA                 retn
.text:00417FBA ; ---------------------------------------------------------------------------
.text:00417FBB                 align 10h
.text:00417FC0                 sub     esp, 1Ch
.text:00417FC3                 mov     edx, [esp+20h]
.text:00417FC7                 mov     [esp+10h], ebx
.text:00417FCB                 xor     ebx, ebx
.text:00417FCD                 mov     [esp+14h], esi
.text:00417FD1                 mov     [esp+18h], edi
.text:00417FD5                 mov     [esp], edx
.text:00417FD8                 call    sub_41A240
.text:00417FDD                 mov     edx, [esp+24h]
.text:00417FE1                 mov     edi, eax
.text:00417FE3                 mov     [esp], edx
.text:00417FE6                 call    sub_41A240
.text:00417FEB                 mov     [esp+4], eax
.text:00417FEF                 mov     esi, eax
.text:00417FF1                 mov     [esp], edi
.text:00417FF4                 call    _stricmp_0
.text:00417FF9                 mov     [esp], edi
.text:00417FFC                 test    eax, eax
.text:00417FFE                 setz    bl
.text:00418001                 call    free
.text:00418006                 mov     [esp], esi
.text:00418009                 call    free
.text:0041800E                 mov     eax, ebx
.text:00418010                 mov     esi, [esp+14h]
.text:00418014                 mov     ebx, [esp+10h]
.text:00418018                 mov     edi, [esp+18h]
.text:0041801C                 add     esp, 1Ch
.text:0041801F                 retn
.text:00418020 ; ---------------------------------------------------------------------------
.text:00418020                 xor     eax, eax
.text:00418022                 retn
.text:00418022 ; ---------------------------------------------------------------------------
.text:00418023 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00418057↓o
.text:00418030 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00418066↓o
.text:00418040 ; ---------------------------------------------------------------------------
.text:00418040                 sub     esp, 1Ch
.text:00418043                 mov     [esp+10h], ebx
.text:00418047                 mov     ebx, [esp+20h]
.text:0041804B                 mov     [esp+18h], edi
.text:0041804F                 mov     edi, [esp+24h]
.text:00418053                 mov     [esp+14h], esi
.text:00418057                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0041805E                 call    GetModuleHandleA
.text:00418063                 sub     esp, 4
.text:00418066                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0041806E                 mov     [esp], eax
.text:00418071                 call    GetProcAddress
.text:00418076                 sub     esp, 8
.text:00418079                 test    eax, eax
.text:0041807B                 jz      short loc_418093
.text:0041807D                 mov     dword ptr [esp+8], 104h
.text:00418085                 mov     [esp+4], ebx
.text:00418089                 mov     [esp], edi
.text:0041808C                 call    eax
.text:0041808E                 sub     esp, 0Ch
.text:00418091                 mov     esi, eax
.text:00418093
.text:00418093 loc_418093:                             ; CODE XREF: .text:0041807B↑j
.text:00418093                 test    esi, esi
.text:00418095                 jz      short loc_4180B0
.text:00418097
.text:00418097 loc_418097:                             ; CODE XREF: .text:004180CB↓j
.text:00418097                 mov     eax, ebx
.text:00418099                 mov     esi, [esp+14h]
.text:0041809D                 mov     ebx, [esp+10h]
.text:004180A1                 mov     edi, [esp+18h]
.text:004180A5                 add     esp, 1Ch
.text:004180A8                 retn
.text:004180A8 ; ---------------------------------------------------------------------------
.text:004180A9                 align 10h
.text:004180B0
.text:004180B0 loc_4180B0:                             ; CODE XREF: .text:00418095↑j
.text:004180B0                 call    sub_41AC00
.text:004180B5                 mov     [esp], ebx
.text:004180B8                 mov     [esp+4], edi
.text:004180BC                 call    strcpy
.text:004180C1                 mov     [esp], ebx
.text:004180C4                 call    _win32_longpath
.text:004180C9                 mov     ebx, eax
.text:004180CB                 jmp     short loc_418097
.text:004180CB ; ---------------------------------------------------------------------------
.text:004180CD                 align 10h
.text:004180D0                 sub     esp, 1Ch
.text:004180D3                 mov     [esp+18h], edi
.text:004180D7                 mov     edi, [esp+20h]
.text:004180DB                 mov     [esp+10h], ebx
.text:004180DF                 mov     [esp+14h], esi
.text:004180E3                 mov     dword ptr [esp+8], 0
.text:004180EB                 mov     dword ptr [esp+4], 0
.text:004180F3                 mov     [esp], edi
.text:004180F6                 call    GetShortPathNameA
.text:004180FB                 sub     esp, 0Ch
.text:004180FE                 mov     ebx, eax
.text:00418100                 test    eax, eax
.text:00418102                 jz      short loc_418150
.text:00418104                 lea     edx, [eax+1]
.text:00418107                 mov     [esp], edx
.text:0041810A                 call    malloc
.text:0041810F                 test    eax, eax
.text:00418111                 mov     esi, eax
.text:00418113                 jz      short loc_418150
.text:00418115                 mov     [esp+8], ebx
.text:00418119                 mov     [esp+4], eax
.text:0041811D                 mov     [esp], edi
.text:00418120                 call    GetShortPathNameA
.text:00418125                 sub     esp, 0Ch
.text:00418128                 mov     edx, esi
.text:0041812A                 test    eax, eax
.text:0041812C                 jz      short loc_418142
.text:0041812E                 mov     esi, esi
.text:00418130
.text:00418130 loc_418130:                             ; CODE XREF: .text:00418160↓j
.text:00418130                 mov     ebx, [esp+10h]
.text:00418134                 mov     eax, edx
.text:00418136                 mov     esi, [esp+14h]
.text:0041813A                 mov     edi, [esp+18h]
.text:0041813E                 add     esp, 1Ch
.text:00418141                 retn
.text:00418142 ; ---------------------------------------------------------------------------
.text:00418142
.text:00418142 loc_418142:                             ; CODE XREF: .text:0041812C↑j
.text:00418142                 mov     [esp], esi
.text:00418145                 call    free
.text:0041814A                 lea     esi, [esi+0]
.text:00418150
.text:00418150 loc_418150:                             ; CODE XREF: .text:00418102↑j
.text:00418150                                         ; .text:00418113↑j
.text:00418150                 call    sub_41A1F0
.text:00418155                 mov     esi, eax
.text:00418157                 call    _errno
.text:0041815C                 mov     [eax], esi
.text:0041815E                 mov     edx, edi
.text:00418160                 jmp     short loc_418130
.text:00418160 ; ---------------------------------------------------------------------------
.text:00418162                 align 10h
.text:00418170
.text:00418170 ; =============== S U B R O U T I N E =======================================
.text:00418170
.text:00418170
.text:00418170 sub_418170      proc near               ; DATA XREF: sub_418180+186↓o
.text:00418170                 sub     al, [eax]
.text:00418172                 lea     esi, [esi+0]
.text:00418179                 lea     edi, [edi+0]
.text:00418179 sub_418170      endp
.text:00418179
.text:00418180
.text:00418180 ; =============== S U B R O U T I N E =======================================
.text:00418180
.text:00418180
.text:00418180 sub_418180      proc near               ; CODE XREF: sub_4096F0+87↑p
.text:00418180                                         ; sub_40BF00+57↑p
.text:00418180
.text:00418180 hFindFile       = dword ptr -2DCh
.text:00418180 lpFindFileData  = dword ptr -2D8h
.text:00418180 Count           = dword ptr -2D4h
.text:00418180 Destination     = byte ptr -2CCh
.text:00418180 var_1BC         = dword ptr -1BCh
.text:00418180 var_1B4         = dword ptr -1B4h
.text:00418180 var_1B0         = dword ptr -1B0h
.text:00418180 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00418180 arg_0           = dword ptr  4
.text:00418180
.text:00418180                 push    ebp
.text:00418181                 push    edi
.text:00418182                 push    esi
.text:00418183                 push    ebx
.text:00418184                 sub     esp, 2CCh
.text:0041818A                 mov     ebp, [esp+2DCh+arg_0]
.text:00418191                 test    ebp, ebp
.text:00418193                 mov     ebx, [ebp+4]
.text:00418196                 jz      loc_41834D
.text:0041819C                 mov     edx, [ebp+0]
.text:0041819F                 cmp     edx, 0FFFFFFFFh
.text:004181A2                 jz      loc_4182D7
.text:004181A8                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:004181AB                 lea     ecx, [esp+2DCh+FindFileData]
.text:004181B2                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:004181B6                 call    FindNextFileA
.text:004181BB                 sub     esp, 8
.text:004181BE                 test    eax, eax
.text:004181C0                 jz      loc_4182CB
.text:004181C6
.text:004181C6 loc_4181C6:                             ; CODE XREF: sub_418180+1BC↓j
.text:004181C6                 mov     [esp+2DCh+Count], 104h ; Count
.text:004181CE                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:004181D5                 mov     esi, [ebx]
.text:004181D7                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:004181DB                 lea     esi, [ebx+14h]
.text:004181DE                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004181E1                 call    strncpy
.text:004181E6                 mov     [esp+2DCh+Count], 104h ; Count
.text:004181EE                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:004181F2                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004181F5                 call    strncat
.text:004181FA                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:004181FE                 lea     edx, [esp+2DCh+var_1BC]
.text:00418205                 mov     [esp+2DCh+Count], edx ; int
.text:00418209                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:00418210                 call    sub_417750
.text:00418215                 test    eax, eax
.text:00418217                 jnz     loc_4182B9
.text:0041821D                 mov     ecx, [esp+2DCh+var_1BC]
.text:00418224                 and     ecx, 0F000h
.text:0041822A                 shr     ecx, 0Ch
.text:0041822D                 mov     [ebx+12h], cl
.text:00418230                 mov     ecx, edi
.text:00418232                 lea     esi, [esi+0]
.text:00418239                 lea     edi, [edi+0]
.text:00418240
.text:00418240 loc_418240:                             ; CODE XREF: sub_418180+D5↓j
.text:00418240                 mov     eax, [ecx]
.text:00418242                 add     ecx, 4
.text:00418245                 lea     edx, [eax-1010101h]
.text:0041824B                 not     eax
.text:0041824D                 and     edx, eax
.text:0041824F                 and     edx, 80808080h
.text:00418255                 jz      short loc_418240
.text:00418257                 test    edx, 8080h
.text:0041825D                 jnz     short loc_418265
.text:0041825F                 shr     edx, 10h
.text:00418262                 add     ecx, 2
.text:00418265
.text:00418265 loc_418265:                             ; CODE XREF: sub_418180+DD↑j
.text:00418265                 mov     word ptr [ebx+10h], 110h
.text:0041826B                 add     dl, dl
.text:0041826D                 sbb     ecx, 3
.text:00418270                 sub     ecx, edi
.text:00418272                 mov     [ebx+13h], cl
.text:00418275                 mov     edx, [esp+2DCh+var_1B4]
.text:0041827C                 mov     ecx, [esp+2DCh+var_1B0]
.text:00418283                 mov     [ebx+8], edx
.text:00418286                 mov     [ebx+0Ch], ecx
.text:00418289                 mov     [esp+2DCh+Count], 104h ; Count
.text:00418291                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00418295                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418298                 call    strncpy
.text:0041829D                 inc     dword ptr [ebp+14h]
.text:004182A0                 call    _errno
.text:004182A5                 mov     dword ptr [eax], 0
.text:004182AB                 lea     eax, [ebx+8]
.text:004182AE
.text:004182AE loc_4182AE:                             ; CODE XREF: sub_418180+149↓j
.text:004182AE                 add     esp, 2CCh
.text:004182B4                 pop     ebx
.text:004182B5                 pop     esi
.text:004182B6                 pop     edi
.text:004182B7                 pop     ebp
.text:004182B8                 retn
.text:004182B9 ; ---------------------------------------------------------------------------
.text:004182B9
.text:004182B9 loc_4182B9:                             ; CODE XREF: sub_418180+97↑j
.text:004182B9                                         ; sub_418180+153↓j ...
.text:004182B9                 call    sub_41A1F0
.text:004182BE                 mov     ebp, eax
.text:004182C0                 call    _errno
.text:004182C5                 mov     [eax], ebp
.text:004182C7
.text:004182C7 loc_4182C7:                             ; CODE XREF: sub_418180+155↓j
.text:004182C7                                         ; sub_418180+1D8↓j
.text:004182C7                 xor     eax, eax
.text:004182C9                 jmp     short loc_4182AE
.text:004182CB ; ---------------------------------------------------------------------------
.text:004182CB
.text:004182CB loc_4182CB:                             ; CODE XREF: sub_418180+40↑j
.text:004182CB                 call    GetLastError
.text:004182D0                 cmp     eax, 12h
.text:004182D3                 jnz     short loc_4182B9
.text:004182D5                 jmp     short loc_4182C7
.text:004182D7 ; ---------------------------------------------------------------------------
.text:004182D7
.text:004182D7 loc_4182D7:                             ; CODE XREF: sub_418180+22↑j
.text:004182D7                 mov     edx, [ebx]
.text:004182D9                 lea     esi, [esp+2DCh+Destination]
.text:004182DD                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004182E0                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:004182E4                 call    strcpy
.text:004182E9                 mov     ecx, esi
.text:004182EB                 nop
.text:004182EC                 lea     esi, [esi+0]
.text:004182F0
.text:004182F0 loc_4182F0:                             ; CODE XREF: sub_418180+184↓j
.text:004182F0                 mov     edi, [ecx]
.text:004182F2                 add     ecx, 4
.text:004182F5                 lea     eax, [edi-1010101h]
.text:004182FB                 not     edi
.text:004182FD                 and     eax, edi
.text:004182FF                 test    eax, 80808080h
.text:00418304                 jz      short loc_4182F0
.text:00418306                 mov     [esp+2DCh+lpFindFileData], offset sub_418170 ; Source
.text:0041830E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418311                 call    strcat
.text:00418316                 mov     [esp+2DCh+hFindFile], esi
.text:00418319                 call    sub_417D50
.text:0041831E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:00418321                 lea     edx, [esp+2DCh+FindFileData]
.text:00418328                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:0041832C                 call    FindFirstFileA
.text:00418331                 sub     esp, 8
.text:00418334                 cmp     eax, 0FFFFFFFFh
.text:00418337                 jz      short loc_418341
.text:00418339                 mov     [ebp+0], eax
.text:0041833C                 jmp     loc_4181C6
.text:00418341 ; ---------------------------------------------------------------------------
.text:00418341
.text:00418341 loc_418341:                             ; CODE XREF: sub_418180+1B7↑j
.text:00418341                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:00418348                 jmp     loc_4182B9
.text:0041834D ; ---------------------------------------------------------------------------
.text:0041834D
.text:0041834D loc_41834D:                             ; CODE XREF: sub_418180+16↑j
.text:0041834D                 call    _errno
.text:00418352                 mov     dword ptr [eax], 9
.text:00418358                 jmp     loc_4182C7
.text:00418358 sub_418180      endp
.text:00418358
.text:00418358 ; ---------------------------------------------------------------------------
.text:0041835D                 align 10h
.text:00418360
.text:00418360 ; =============== S U B R O U T I N E =======================================
.text:00418360
.text:00418360
.text:00418360 ; int __cdecl sub_418360(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00418360 sub_418360      proc near               ; CODE XREF: sub_4184E0+93↓p
.text:00418360
.text:00418360 pvReserved      = dword ptr -35Ch
.text:00418360 pUnkOuter       = dword ptr -358h
.text:00418360 dwClsContext    = dword ptr -354h
.text:00418360 riid            = dword ptr -350h
.text:00418360 ppv             = dword ptr -34Ch
.text:00418360 cchWideChar     = dword ptr -348h
.text:00418360 var_334         = byte ptr -334h
.text:00418360 var_330         = dword ptr -330h
.text:00418360 String2         = byte ptr -32Ch
.text:00418360 WideCharStr     = word ptr -21Ch
.text:00418360 lpMultiByteStr  = dword ptr  4
.text:00418360 lpString1       = dword ptr  8
.text:00418360
.text:00418360                 push    edi
.text:00418361                 push    esi
.text:00418362                 push    ebx
.text:00418363                 sub     esp, 350h
.text:00418369                 mov     edi, [esp+35Ch+lpString1]
.text:00418370                 mov     byte ptr [edi], 0
.text:00418373                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0041837A                 call    OleInitialize
.text:0041837F                 sub     esp, 4
.text:00418382                 cmp     eax, 1
.text:00418385                 ja      loc_4184BF
.text:0041838B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00418393                 lea     ecx, [esp+35Ch+var_330]
.text:00418397                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0041839B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:004183A3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:004183AB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:004183B2                 call    CoCreateInstance
.text:004183B7                 sub     esp, 14h
.text:004183BA                 test    eax, eax
.text:004183BC                 js      loc_4184BF
.text:004183C2                 mov     ebx, [esp+35Ch+var_330]
.text:004183C6                 lea     edx, [esp+35Ch+var_334]
.text:004183CA                 mov     esi, [ebx]
.text:004183CC                 mov     [esp+35Ch+dwClsContext], edx
.text:004183D0                 mov     [esp+35Ch+pvReserved], ebx
.text:004183D3                 xor     ebx, ebx
.text:004183D5                 mov     [esp+35Ch+pUnkOuter], offset dword_41E100
.text:004183DD                 call    dword ptr [esi]
.text:004183DF                 sub     esp, 0Ch
.text:004183E2                 lea     esi, [esp+35Ch+WideCharStr]
.text:004183E9                 call    AreFileApisANSI
.text:004183EE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:004183F6                 test    eax, eax
.text:004183F8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:004183FF                 setz    bl
.text:00418402                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00418406                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0041840E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00418412                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0041841A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0041841D                 call    MultiByteToWideChar
.text:00418422                 sub     esp, 18h
.text:00418425                 test    eax, eax
.text:00418427                 js      loc_4184BF
.text:0041842D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00418431                 mov     ebx, [edx]
.text:00418433                 mov     [esp+35Ch+dwClsContext], 0
.text:0041843B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0041843F                 mov     [esp+35Ch+pvReserved], edx
.text:00418442                 call    dword ptr [ebx+14h]
.text:00418445                 sub     esp, 0Ch
.text:00418448                 test    eax, eax
.text:0041844A                 js      short loc_4184BF
.text:0041844C                 mov     ebx, [esp+35Ch+var_330]
.text:00418450                 lea     esi, [esp+35Ch+String2]
.text:00418454                 mov     ecx, [ebx]
.text:00418456                 mov     [esp+35Ch+pvReserved], ebx
.text:00418459                 mov     [esp+35Ch+ppv], 0
.text:00418461                 mov     [esp+35Ch+riid], 0
.text:00418469                 mov     [esp+35Ch+dwClsContext], 104h
.text:00418471                 mov     [esp+35Ch+pUnkOuter], esi
.text:00418475                 call    dword ptr [ecx+0Ch]
.text:00418478                 sub     esp, 14h
.text:0041847B                 mov     ebx, eax
.text:0041847D                 test    eax, eax
.text:0041847F                 js      short loc_4184BF
.text:00418481                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00418485                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00418488                 call    lstrcpyA
.text:0041848D                 sub     esp, 8
.text:00418490                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00418494                 mov     ecx, [edi]
.text:00418496                 mov     [esp+35Ch+pvReserved], edi
.text:00418499                 call    dword ptr [ecx+8]
.text:0041849C                 sub     esp, 4
.text:0041849F                 mov     edx, [esp+35Ch+var_330]
.text:004184A3                 mov     esi, [edx]
.text:004184A5                 mov     [esp+35Ch+pvReserved], edx
.text:004184A8                 call    dword ptr [esi+8]
.text:004184AB                 sub     esp, 4
.text:004184AE                 call    CoUninitialize
.text:004184B3                 mov     eax, ebx
.text:004184B5
.text:004184B5 loc_4184B5:                             ; CODE XREF: sub_418360+177↓j
.text:004184B5                 add     esp, 350h
.text:004184BB                 pop     ebx
.text:004184BC                 pop     esi
.text:004184BD                 pop     edi
.text:004184BE                 retn
.text:004184BF ; ---------------------------------------------------------------------------
.text:004184BF
.text:004184BF loc_4184BF:                             ; CODE XREF: sub_418360+25↑j
.text:004184BF                                         ; sub_418360+5C↑j ...
.text:004184BF                 call    sub_41A1F0
.text:004184C4                 mov     edi, eax
.text:004184C6                 call    _errno
.text:004184CB                 mov     [eax], edi
.text:004184CD                 call    CoUninitialize
.text:004184D2                 mov     eax, 0FFFFFFFFh
.text:004184D7                 jmp     short loc_4184B5
.text:004184D7 sub_418360      endp
.text:004184D7
.text:004184D7 ; ---------------------------------------------------------------------------
.text:004184D9 ; const char aLnk_0[]
.text:004184D9 aLnk_0          db '.lnk',0             ; DATA XREF: sub_4184E0+53↓o
.text:004184D9                                         ; sub_4184E0:loc_418545↓o
.text:004184DE                 align 10h
.text:004184E0
.text:004184E0 ; =============== S U B R O U T I N E =======================================
.text:004184E0
.text:004184E0
.text:004184E0 ; int __cdecl sub_4184E0(char *, LPSTR lpString1)
.text:004184E0 sub_4184E0      proc near               ; CODE XREF: sub_40AE10+35↑p
.text:004184E0                                         ; sub_419650+4C↓p ...
.text:004184E0
.text:004184E0 Str             = dword ptr -1Ch
.text:004184E0 Source          = dword ptr -18h
.text:004184E0 Destination     = dword ptr -14h
.text:004184E0 arg_0           = dword ptr  4
.text:004184E0 lpString1       = dword ptr  8
.text:004184E0
.text:004184E0                 push    ebp
.text:004184E1                 push    edi
.text:004184E2                 push    esi
.text:004184E3                 push    ebx
.text:004184E4                 sub     esp, 0Ch
.text:004184E7                 mov     ebx, [esp+1Ch+arg_0]
.text:004184EB                 mov     ebp, [esp+1Ch+lpString1]
.text:004184EF                 mov     [esp+1Ch+Str], ebx ; Str
.text:004184F2                 call    strlen
.text:004184F7                 add     eax, 5
.text:004184FA                 mov     [esp+1Ch+Str], eax ; Size
.text:004184FD                 call    malloc
.text:00418502                 mov     [esp+1Ch+Destination], eax
.text:00418506                 test    eax, eax
.text:00418508                 jz      loc_4185B0
.text:0041850E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00418512                 mov     [esp+1Ch+Str], eax ; Destination
.text:00418515                 call    strcpy
.text:0041851A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00418522                 mov     eax, [esp+1Ch+Destination]
.text:00418526                 mov     [esp+1Ch+Str], eax ; Str
.text:00418529                 call    strrchr
.text:0041852E                 test    eax, eax
.text:00418530                 jz      short loc_418545
.text:00418532                 cld
.text:00418533                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:00418538                 mov     ecx, 5
.text:0041853D                 mov     esi, eax
.text:0041853F                 mov     edi, ebx
.text:00418541                 repe cmpsb
.text:00418543                 jz      short loc_418559
.text:00418545
.text:00418545 loc_418545:                             ; CODE XREF: sub_4184E0+50↑j
.text:00418545                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0041854D                 mov     edx, [esp+1Ch+Destination]
.text:00418551                 mov     [esp+1Ch+Str], edx ; Destination
.text:00418554                 call    strcat
.text:00418559
.text:00418559 loc_418559:                             ; CODE XREF: sub_4184E0+63↑j
.text:00418559                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00418560                 call    SetErrorMode
.text:00418565                 sub     esp, 4
.text:00418568                 mov     ebx, [esp+1Ch+Destination]
.text:0041856C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00418570                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00418573                 call    sub_418360
.text:00418578                 mov     [esp+1Ch+Str], ebx ; Block
.text:0041857B                 mov     esi, eax
.text:0041857D                 call    free
.text:00418582                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00418589                 call    SetErrorMode
.text:0041858E                 sub     esp, 4
.text:00418591                 mov     [esp+1Ch+Str], ebp
.text:00418594                 call    sub_417CD0
.text:00418599                 inc     esi
.text:0041859A                 jz      short loc_4185B0
.text:0041859C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:004185A0                 add     esp, 0Ch
.text:004185A3                 pop     ebx
.text:004185A4                 pop     esi
.text:004185A5                 pop     edi
.text:004185A6                 pop     ebp
.text:004185A7                 jmp     strlen
.text:004185A7 ; ---------------------------------------------------------------------------
.text:004185AC                 align 10h
.text:004185B0
.text:004185B0 loc_4185B0:                             ; CODE XREF: sub_4184E0+28↑j
.text:004185B0                                         ; sub_4184E0+BA↑j
.text:004185B0                 add     esp, 0Ch
.text:004185B3                 mov     eax, 0FFFFFFFFh
.text:004185B8                 pop     ebx
.text:004185B9                 pop     esi
.text:004185BA                 pop     edi
.text:004185BB                 pop     ebp
.text:004185BC                 retn
.text:004185BC sub_4184E0      endp
.text:004185BC
.text:004185BC ; ---------------------------------------------------------------------------
.text:004185BD                 align 10h
.text:004185C0 ; const char String[4]
.text:004185C0 String          db ' :/',0              ; DATA XREF: sub_4185D0+FA↓o
.text:004185C4                 align 10h
.text:004185D0
.text:004185D0 ; =============== S U B R O U T I N E =======================================
.text:004185D0
.text:004185D0
.text:004185D0 ; int __cdecl sub_4185D0(LPCSTR)
.text:004185D0 sub_4185D0      proc near               ; CODE XREF: sub_4160F0+E↑p
.text:004185D0                                         ; sub_4165F0+17↑p ...
.text:004185D0
.text:004185D0 Str             = dword ptr -1Ch
.text:004185D0 Val             = dword ptr -18h
.text:004185D0 Count           = dword ptr -14h
.text:004185D0 var_10          = dword ptr -10h
.text:004185D0 var_C           = dword ptr -0Ch
.text:004185D0 var_8           = dword ptr -8
.text:004185D0 var_4           = dword ptr -4
.text:004185D0 arg_0           = dword ptr  4
.text:004185D0
.text:004185D0                 sub     esp, 1Ch
.text:004185D3                 mov     edx, [esp+1Ch+arg_0]
.text:004185D7                 mov     [esp+1Ch+var_8], edi
.text:004185DB                 mov     [esp+1Ch+var_10], ebx
.text:004185DF                 mov     [esp+1Ch+var_C], esi
.text:004185E3                 mov     [esp+1Ch+var_4], ebp
.text:004185E7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:004185EA                 call    sub_41A240
.text:004185EF                 test    eax, eax
.text:004185F1                 mov     edi, eax
.text:004185F3                 jz      short loc_418630
.text:004185F5                 mov     [esp+1Ch+Str], eax ; Str
.text:004185F8                 call    strlen
.text:004185FD                 cmp     eax, 2
.text:00418600                 jbe     short loc_41860C
.text:00418602                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00418606                 jz      loc_4186C0
.text:0041860C
.text:0041860C loc_41860C:                             ; CODE XREF: sub_4185D0+30↑j
.text:0041860C                                         ; sub_4185D0+F4↓j
.text:0041860C                 test    edi, edi
.text:0041860E                 jz      short loc_418630
.text:00418610                 mov     [esp+1Ch+Str], edi ; Str
.text:00418613                 call    strlen
.text:00418618                 cmp     eax, 4
.text:0041861B                 mov     ebp, eax
.text:0041861D                 jle     short loc_418630
.text:0041861F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00418622                 jz      short loc_418650
.text:00418624                 lea     esi, [esi+0]
.text:0041862A                 lea     edi, [edi+0]
.text:00418630
.text:00418630 loc_418630:                             ; CODE XREF: sub_4185D0+23↑j
.text:00418630                                         ; sub_4185D0+3E↑j ...
.text:00418630                 xor     esi, esi
.text:00418632
.text:00418632 loc_418632:                             ; CODE XREF: sub_4185D0+CD↓j
.text:00418632                                         ; sub_4185D0+115↓j
.text:00418632                 mov     [esp+1Ch+Str], edi ; Block
.text:00418635                 call    free
.text:0041863A                 mov     eax, esi
.text:0041863C                 mov     ebx, [esp+1Ch+var_10]
.text:00418640                 mov     esi, [esp+1Ch+var_C]
.text:00418644                 mov     edi, [esp+1Ch+var_8]
.text:00418648                 mov     ebp, [esp+1Ch+var_4]
.text:0041864C                 add     esp, 1Ch
.text:0041864F                 retn
.text:00418650 ; ---------------------------------------------------------------------------
.text:00418650
.text:00418650 loc_418650:                             ; CODE XREF: sub_4185D0+52↑j
.text:00418650                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00418654                 jnz     short loc_418630
.text:00418656                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0041865E                 lea     ecx, [edi+2]
.text:00418661                 mov     [esp+1Ch+Str], ecx ; Str
.text:00418664                 call    strchr
.text:00418669                 test    eax, eax
.text:0041866B                 jnz     short loc_41869F
.text:0041866D
.text:0041866D loc_41866D:                             ; CODE XREF: sub_4185D0+E2↓j
.text:0041866D                 inc     ebp
.text:0041866E
.text:0041866E loc_41866E:                             ; CODE XREF: sub_4185D0+E9↓j
.text:0041866E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00418676                 lea     ebx, [ebp+1]
.text:00418679                 mov     [esp+1Ch+Str], ebx ; Count
.text:0041867C                 call    calloc
.text:00418681                 mov     [esp+1Ch+Str], eax ; Destination
.text:00418684                 mov     esi, eax
.text:00418686                 mov     [esp+1Ch+Count], ebx ; Count
.text:0041868A                 mov     [esp+1Ch+Val], edi ; Source
.text:0041868E                 call    strncpy
.text:00418693                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00418698                 mov     byte ptr [ebp+esi+0], 0
.text:0041869D                 jmp     short loc_418632
.text:0041869F ; ---------------------------------------------------------------------------
.text:0041869F
.text:0041869F loc_41869F:                             ; CODE XREF: sub_4185D0+9B↑j
.text:0041869F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004186A7                 inc     eax
.text:004186A8                 mov     [esp+1Ch+Str], eax ; Str
.text:004186AB                 call    strchr
.text:004186B0                 test    eax, eax
.text:004186B2                 jz      short loc_41866D
.text:004186B4                 sub     eax, edi
.text:004186B6                 lea     ebp, [eax+1]
.text:004186B9                 jmp     short loc_41866E
.text:004186B9 ; ---------------------------------------------------------------------------
.text:004186BB                 align 10h
.text:004186C0
.text:004186C0 loc_4186C0:                             ; CODE XREF: sub_4185D0+36↑j
.text:004186C0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:004186C4                 jnz     loc_41860C
.text:004186CA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:004186D1                 call    _strdup
.text:004186D6                 movsx   edx, byte ptr [edi]
.text:004186D9                 mov     esi, eax
.text:004186DB                 mov     [esp+1Ch+Str], edx ; C
.text:004186DE                 call    toupper
.text:004186E3                 mov     [esi], al
.text:004186E5                 jmp     loc_418632
.text:004186E5 sub_4185D0      endp
.text:004186E5
.text:004186E5 ; ---------------------------------------------------------------------------
.text:004186EA                 align 10h
.text:004186F0
.text:004186F0 ; =============== S U B R O U T I N E =======================================
.text:004186F0
.text:004186F0
.text:004186F0 sub_4186F0      proc near               ; CODE XREF: .text:00418844↓p
.text:004186F0                                         ; .text:00418928↓p
.text:004186F0
.text:004186F0 Str             = dword ptr -2Ch
.text:004186F0 Val             = dword ptr -28h
.text:004186F0 var_18          = dword ptr -18h
.text:004186F0 var_11          = byte ptr -11h
.text:004186F0 arg_0           = dword ptr  4
.text:004186F0
.text:004186F0                 push    ebp
.text:004186F1                 push    edi
.text:004186F2                 push    esi
.text:004186F3                 push    ebx
.text:004186F4                 sub     esp, 1Ch
.text:004186F7                 mov     edx, [esp+2Ch+arg_0]
.text:004186FB                 cmp     edx, ds:dword_421420
.text:00418701                 mov     [esp+2Ch+var_11], 0
.text:00418706                 jz      loc_418804
.text:0041870C                 mov     ebx, ds:dword_421410
.text:00418712                 test    ebx, ebx
.text:00418714                 jz      short loc_418782
.text:00418716
.text:00418716 loc_418716:                             ; CODE XREF: sub_4186F0+10F↓j
.text:00418716                 mov     ebx, [esp+2Ch+arg_0]
.text:0041871A                 xor     edi, edi
.text:0041871C                 xor     esi, esi
.text:0041871E                 mov     ebp, offset dword_421438
.text:00418723                 lea     esi, [esi+0]
.text:00418729                 lea     edi, [edi+0]
.text:00418730
.text:00418730 loc_418730:                             ; CODE XREF: sub_4186F0+60↓j
.text:00418730                 mov     edx, [ebp+4]
.text:00418733                 mov     ecx, edi
.text:00418735                 mov     eax, [ebp+0]
.text:00418738                 shl     ecx, 4
.text:0041873B                 mov     [esp+2Ch+var_18], ecx
.text:0041873F                 mov     ecx, edx
.text:00418741                 xor     eax, ebx
.text:00418743                 xor     ecx, esi
.text:00418745                 or      ecx, eax
.text:00418747                 jz      short loc_418771
.text:00418749                 inc     edi
.text:0041874A                 add     ebp, 10h
.text:0041874D                 cmp     edi, 20h ; ' '
.text:00418750                 jle     short loc_418730
.text:00418752
.text:00418752 loc_418752:                             ; CODE XREF: sub_4186F0+90↓j
.text:00418752                 movzx   ebx, [esp+2Ch+var_11]
.text:00418757                 mov     eax, [esp+2Ch+arg_0]
.text:0041875B                 mov     byte_4200A0, bl
.text:00418761                 mov     ds:dword_421420, eax
.text:00418766                 movsx   eax, bl
.text:00418769
.text:00418769 loc_418769:                             ; CODE XREF: sub_4186F0+11B↓j
.text:00418769                 add     esp, 1Ch
.text:0041876C                 pop     ebx
.text:0041876D                 pop     esi
.text:0041876E                 pop     edi
.text:0041876F                 pop     ebp
.text:00418770                 retn
.text:00418771 ; ---------------------------------------------------------------------------
.text:00418771
.text:00418771 loc_418771:                             ; CODE XREF: sub_4186F0+57↑j
.text:00418771                 mov     edx, [esp+2Ch+var_18]
.text:00418775                 movzx   eax, byte ptr ds:dword_421430[edx]
.text:0041877C                 mov     [esp+2Ch+var_11], al
.text:00418780                 jmp     short loc_418752
.text:00418782 ; ---------------------------------------------------------------------------
.text:00418782
.text:00418782 loc_418782:                             ; CODE XREF: sub_4186F0+24↑j
.text:00418782                 mov     [esp+2Ch+Str], 0
.text:00418789                 call    sub_41B9E0
.text:0041878E                 test    eax, eax
.text:00418790                 mov     ebx, eax
.text:00418792                 jz      short loc_4187EC
.text:00418794                 movzx   ecx, byte ptr [eax]
.text:00418797                 mov     esi, 0FFFFFFF0h
.text:0041879C                 test    cl, cl
.text:0041879E                 jz      short loc_4187EC
.text:004187A0
.text:004187A0 loc_4187A0:                             ; CODE XREF: sub_4186F0+FA↓j
.text:004187A0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:004187A3                 movsx   ebp, cl
.text:004187A6                 add     esi, 10h
.text:004187A9                 mov     ds:dword_421430[esi], ebp
.text:004187AF                 mov     edi, ebp
.text:004187B1                 sar     edi, 1Fh
.text:004187B4                 mov     ds:dword_421434[esi], edi
.text:004187BA                 call    sub_4165F0
.text:004187BF                 mov     ds:dword_421438[esi], eax
.text:004187C5                 xor     ecx, ecx
.text:004187C7                 mov     [esp+2Ch+Str], ebx ; Str
.text:004187CA                 mov     ds:dword_42143C[esi], ecx
.text:004187D0                 mov     [esp+2Ch+Val], 0 ; Val
.text:004187D8                 call    strchr
.text:004187DD                 mov     ebx, eax
.text:004187DF                 inc     ebx
.text:004187E0                 jz      short loc_4187EC
.text:004187E2                 movzx   edx, byte ptr [eax+1]
.text:004187E6                 test    dl, dl
.text:004187E8                 mov     cl, dl
.text:004187EA                 jnz     short loc_4187A0
.text:004187EC
.text:004187EC loc_4187EC:                             ; CODE XREF: sub_4186F0+A2↑j
.text:004187EC                                         ; sub_4186F0+AE↑j ...
.text:004187EC                 mov     [esp+2Ch+Str], ebx ; Block
.text:004187EF                 mov     esi, 1
.text:004187F4                 mov     ds:dword_421410, esi
.text:004187FA                 call    free
.text:004187FF                 jmp     loc_418716
.text:00418804 ; ---------------------------------------------------------------------------
.text:00418804
.text:00418804 loc_418804:                             ; CODE XREF: sub_4186F0+16↑j
.text:00418804                 movsx   eax, byte_4200A0
.text:0041880B                 jmp     loc_418769
.text:0041880B sub_4186F0      endp
.text:0041880B
.text:0041880B ; ---------------------------------------------------------------------------
.text:00418810 dword_418810    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00418810                                         ; DATA XREF: .text:00418833↓o
.text:00418810                                         ; .text:00418913↓o
.text:00418820 ; ---------------------------------------------------------------------------
.text:00418820                 sub     esp, 1Ch
.text:00418823                 mov     [esp+14h], esi
.text:00418827                 mov     esi, [esp+20h]
.text:0041882B                 mov     [esp+18h], edi
.text:0041882F                 mov     [esp+10h], ebx
.text:00418833                 mov     dword ptr [esp], offset dword_418810
.text:0041883A                 call    _strdup
.text:0041883F                 mov     [esp], esi
.text:00418842                 mov     edi, eax
.text:00418844                 call    sub_4186F0
.text:00418849                 mov     [edi], al
.text:0041884B                 test    al, al
.text:0041884D                 jz      short loc_418861
.text:0041884F                 mov     eax, edi
.text:00418851                 mov     ebx, [esp+10h]
.text:00418855                 mov     esi, [esp+14h]
.text:00418859                 mov     edi, [esp+18h]
.text:0041885D                 add     esp, 1Ch
.text:00418860                 retn
.text:00418861 ; ---------------------------------------------------------------------------
.text:00418861
.text:00418861 loc_418861:                             ; CODE XREF: .text:0041884D↑j
.text:00418861                 mov     [esp], edi
.text:00418864                 call    free
.text:00418869                 mov     dword ptr [esp+4], 0
.text:00418871                 mov     dword ptr [esp], 0
.text:00418878                 call    GetCurrentDirectoryA
.text:0041887D                 sub     esp, 8
.text:00418880                 lea     esi, [eax+1]
.text:00418883                 mov     [esp], esi
.text:00418886                 call    malloc
.text:0041888B                 mov     [esp+4], eax
.text:0041888F                 mov     edi, eax
.text:00418891                 mov     [esp], esi
.text:00418894                 call    GetCurrentDirectoryA
.text:00418899                 sub     esp, 8
.text:0041889C                 test    eax, eax
.text:0041889E                 jnz     short loc_4188C0
.text:004188A0                 mov     dword ptr [esp+20h], 418814h
.text:004188A8                 mov     ebx, [esp+10h]
.text:004188AC                 mov     esi, [esp+14h]
.text:004188B0                 mov     edi, [esp+18h]
.text:004188B4                 add     esp, 1Ch
.text:004188B7                 jmp     _strdup
.text:004188B7 ; ---------------------------------------------------------------------------
.text:004188BC                 align 10h
.text:004188C0
.text:004188C0 loc_4188C0:                             ; CODE XREF: .text:0041889E↑j
.text:004188C0                 mov     [esp+20h], edi
.text:004188C4                 mov     ebx, [esp+10h]
.text:004188C8                 mov     esi, [esp+14h]
.text:004188CC                 mov     edi, [esp+18h]
.text:004188D0                 add     esp, 1Ch
.text:004188D3                 jmp     sub_4185D0
.text:004188D3 ; ---------------------------------------------------------------------------
.text:004188D8                 align 10h
.text:004188E0                 sub     esp, 7Ch
.text:004188E3                 lea     edx, [esp+10h]
.text:004188E7                 mov     [esp+8], edx
.text:004188EB                 mov     edx, [esp+80h]
.text:004188F2                 mov     [esp+70h], ebx
.text:004188F6                 mov     [esp+74h], esi
.text:004188FA                 mov     [esp+4], edx
.text:004188FE                 mov     [esp+78h], edi
.text:00418902                 mov     dword ptr [esp], 0
.text:00418909                 call    sub_415840
.text:0041890E                 xor     edx, edx
.text:00418910                 inc     eax
.text:00418911                 jz      short loc_418935
.text:00418913                 mov     dword ptr [esp], offset dword_418810
.text:0041891A                 mov     esi, [esp+20h]
.text:0041891E                 call    _strdup
.text:00418923                 mov     edi, eax
.text:00418925                 mov     [esp], esi
.text:00418928                 call    sub_4186F0
.text:0041892D                 mov     [edi], al
.text:0041892F                 test    al, al
.text:00418931                 mov     edx, edi
.text:00418933                 jz      short loc_418947
.text:00418935
.text:00418935 loc_418935:                             ; CODE XREF: .text:00418911↑j
.text:00418935                                         ; .text:00418994↓j
.text:00418935                 mov     ebx, [esp+70h]
.text:00418939                 mov     eax, edx
.text:0041893B                 mov     esi, [esp+74h]
.text:0041893F                 mov     edi, [esp+78h]
.text:00418943                 add     esp, 7Ch
.text:00418946                 retn
.text:00418947 ; ---------------------------------------------------------------------------
.text:00418947
.text:00418947 loc_418947:                             ; CODE XREF: .text:00418933↑j
.text:00418947                 mov     [esp], edi
.text:0041894A                 call    free
.text:0041894F                 mov     dword ptr [esp+4], 0
.text:00418957                 mov     dword ptr [esp], 0
.text:0041895E                 call    GetCurrentDirectoryA
.text:00418963                 sub     esp, 8
.text:00418966                 lea     esi, [eax+1]
.text:00418969                 mov     [esp], esi
.text:0041896C                 call    malloc
.text:00418971                 mov     [esp+4], eax
.text:00418975                 mov     edi, eax
.text:00418977                 mov     [esp], esi
.text:0041897A                 call    GetCurrentDirectoryA
.text:0041897F                 sub     esp, 8
.text:00418982                 test    eax, eax
.text:00418984                 jnz     short loc_418996
.text:00418986                 mov     dword ptr [esp], 418814h
.text:0041898D                 call    _strdup
.text:00418992
.text:00418992 loc_418992:                             ; CODE XREF: .text:0041899E↓j
.text:00418992                 mov     edx, eax
.text:00418994                 jmp     short loc_418935
.text:00418996 ; ---------------------------------------------------------------------------
.text:00418996
.text:00418996 loc_418996:                             ; CODE XREF: .text:00418984↑j
.text:00418996                 mov     [esp], edi
.text:00418999                 call    sub_4185D0
.text:0041899E                 jmp     short loc_418992
.text:004189A0
.text:004189A0 ; =============== S U B R O U T I N E =======================================
.text:004189A0
.text:004189A0
.text:004189A0 ; int __cdecl sub_4189A0(LPCSTR)
.text:004189A0 sub_4189A0      proc near               ; CODE XREF: sub_415AA0+12F↑p
.text:004189A0
.text:004189A0 String1         = dword ptr -1Ch
.text:004189A0 String2         = dword ptr -18h
.text:004189A0 var_C           = dword ptr -0Ch
.text:004189A0 var_8           = dword ptr -8
.text:004189A0 var_4           = dword ptr -4
.text:004189A0 arg_0           = dword ptr  4
.text:004189A0
.text:004189A0                 sub     esp, 1Ch
.text:004189A3                 mov     [esp+1Ch+var_4], edi
.text:004189A7                 mov     edi, [esp+1Ch+arg_0]
.text:004189AB                 mov     [esp+1Ch+var_C], ebx
.text:004189AF                 mov     [esp+1Ch+var_8], esi
.text:004189B3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004189B6                 call    sub_41A240
.text:004189BB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:004189BE                 mov     esi, eax
.text:004189C0                 call    sub_4185D0
.text:004189C5                 mov     [esp+1Ch+String2], eax ; String2
.text:004189C9                 mov     ebx, eax
.text:004189CB                 mov     [esp+1Ch+String1], esi ; String1
.text:004189CE                 call    _stricmp
.text:004189D3                 test    eax, eax
.text:004189D5                 setz    dl
.text:004189D8                 test    esi, esi
.text:004189DA                 movzx   edi, dl
.text:004189DD                 jz      short loc_4189E7
.text:004189DF                 mov     [esp+1Ch+String1], esi ; Block
.text:004189E2                 call    free
.text:004189E7
.text:004189E7 loc_4189E7:                             ; CODE XREF: sub_4189A0+3D↑j
.text:004189E7                 test    ebx, ebx
.text:004189E9                 jz      short loc_4189F3
.text:004189EB                 mov     [esp+1Ch+String1], ebx ; Block
.text:004189EE                 call    free
.text:004189F3
.text:004189F3 loc_4189F3:                             ; CODE XREF: sub_4189A0+49↑j
.text:004189F3                 mov     eax, edi
.text:004189F5                 mov     ebx, [esp+1Ch+var_C]
.text:004189F9                 mov     esi, [esp+1Ch+var_8]
.text:004189FD                 mov     edi, [esp+1Ch+var_4]
.text:00418A01                 add     esp, 1Ch
.text:00418A04                 retn
.text:00418A04 sub_4189A0      endp
.text:00418A04
.text:00418A04 ; ---------------------------------------------------------------------------
.text:00418A05                 align 10h
.text:00418A10
.text:00418A10 ; =============== S U B R O U T I N E =======================================
.text:00418A10
.text:00418A10
.text:00418A10 ; int __cdecl sub_418A10(char *, int)
.text:00418A10 sub_418A10      proc near               ; CODE XREF: sub_401700+3A9↑p
.text:00418A10                                         ; sub_401700+892↑p ...
.text:00418A10
.text:00418A10 var_C           = dword ptr -0Ch
.text:00418A10 var_8           = dword ptr -8
.text:00418A10 var_4           = dword ptr -4
.text:00418A10 arg_0           = dword ptr  4
.text:00418A10 arg_4           = dword ptr  8
.text:00418A10
.text:00418A10                 sub     esp, 0Ch
.text:00418A13                 mov     edx, [esp+0Ch+arg_4]
.text:00418A17                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00418A1E                 mov     [esp+0Ch+var_4], edx ; int
.text:00418A22                 mov     edx, [esp+0Ch+arg_0]
.text:00418A26                 mov     [esp+0Ch+var_8], edx ; char *
.text:00418A2A                 call    sub_419720
.text:00418A2F                 add     esp, 0Ch
.text:00418A32                 retn
.text:00418A32 sub_418A10      endp
.text:00418A32
.text:00418A32 ; ---------------------------------------------------------------------------
.text:00418A33                 align 10h
.text:00418A40 aKernel32       db 'KERNEL32',0         ; DATA XREF: .text:00418A91↓o
.text:00418A49 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00418A49                                         ; DATA XREF: .text:00418AA2↓o
.text:00418A5D ; const CHAR FileName[]
.text:00418A5D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:00418BEC↓o
.text:00418A5D                                         ; sub_419020+17C↓o
.text:00418A68 ; ---------------------------------------------------------------------------
.text:00418A68
.text:00418A68 loc_418A68:                             ; DATA XREF: .text:00418D02↓o
.text:00418A68                 dec     esi
.text:00418A69                 push    esp
.text:00418A6A                 inc     esi
.text:00418A6B                 push    ebx
.text:00418A6C                 add     [esi+41h], al
.text:00418A6F                 push    esp
.text:00418A70                 xor     esi, [edx]
.text:00418A72                 add     [esi+41h], al
.text:00418A75                 push    esp
.text:00418A76                 add     [ebx+44h], al
.text:00418A79                 inc     esi
.text:00418A7A                 push    ebx
.text:00418A7B
.text:00418A7B loc_418A7B:                             ; CODE XREF: sub_419020+101↓p
.text:00418A7B                 add     [ebp+55002674h], cl
.text:00418A81                 push    edi
.text:00418A82                 push    esi
.text:00418A83                 push    ebx
.text:00418A84                 sub     esp, 8BCh
.text:00418A8A                 mov     ebp, [esp+8D0h]
.text:00418A91                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00418A98                 call    LoadLibraryA
.text:00418A9D                 sub     esp, 4
.text:00418AA0                 mov     edi, eax
.text:00418AA2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:00418AAA                 mov     [esp], eax
.text:00418AAD                 call    GetProcAddress
.text:00418AB2                 sub     esp, 8
.text:00418AB5                 mov     esi, eax
.text:00418AB7                 test    ebp, ebp
.text:00418AB9                 mov     dword ptr [esp+20h], 0
.text:00418AC1                 jz      loc_419001
.text:00418AC7                 mov     [esp], ebp
.text:00418ACA                 call    sub_417D50
.text:00418ACF                 mov     [esp], eax
.text:00418AD2                 mov     ebp, eax
.text:00418AD4                 call    strlen
.text:00418AD9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:00418ADE                 mov     ebx, eax
.text:00418AE0                 jz      short loc_418AFC
.text:00418AE2                 mov     [esp], ebp
.text:00418AE5                 lea     edx, [eax+1]
.text:00418AE8                 mov     [esp+4], edx
.text:00418AEC                 call    realloc
.text:00418AF1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00418AF5                 mov     ebp, eax
.text:00418AF7                 mov     byte ptr [ebx+eax+1], 0
.text:00418AFC
.text:00418AFC loc_418AFC:                             ; CODE XREF: .text:00418AE0↑j
.text:00418AFC                 mov     dword ptr [esp+1Ch], 400h
.text:00418B04                 lea     edx, [esp+0B0h]
.text:00418B0B                 lea     ebx, [esp+5Ch]
.text:00418B0F                 mov     [esp+18h], edx
.text:00418B13                 lea     ecx, [esp+58h]
.text:00418B17                 lea     edx, [esp+54h]
.text:00418B1B                 mov     [esp+14h], ebx
.text:00418B1F                 lea     eax, [esp+4B0h]
.text:00418B26                 mov     [esp+10h], ecx
.text:00418B2A                 mov     [esp+0Ch], edx
.text:00418B2E                 mov     dword ptr [esp+8], 400h
.text:00418B36                 mov     [esp+4], eax
.text:00418B3A                 mov     [esp], ebp
.text:00418B3D                 call    GetVolumeInformationA
.text:00418B42                 sub     esp, 20h
.text:00418B45                 test    eax, eax
.text:00418B47                 jz      loc_418FDE
.text:00418B4D                 test    esi, esi
.text:00418B4F                 jz      short loc_418B75
.text:00418B51                 mov     [esp], ebp
.text:00418B54                 lea     edx, [esp+48h]
.text:00418B58                 lea     ebx, [esp+40h]
.text:00418B5C                 mov     [esp+0Ch], edx
.text:00418B60                 lea     ecx, [esp+38h]
.text:00418B64                 mov     [esp+8], ebx
.text:00418B68                 mov     [esp+4], ecx
.text:00418B6C                 call    esi
.text:00418B6E                 sub     esp, 10h
.text:00418B71                 mov     [esp+20h], eax
.text:00418B75
.text:00418B75 loc_418B75:                             ; CODE XREF: .text:00418B4F↑j
.text:00418B75                 test    edi, edi
.text:00418B77                 jz      short loc_418B84
.text:00418B79                 mov     [esp], edi
.text:00418B7C                 call    FreeLibrary
.text:00418B81                 sub     esp, 4
.text:00418B84
.text:00418B84 loc_418B84:                             ; CODE XREF: .text:00418B77↑j
.text:00418B84                 call    sub_41AC00
.text:00418B89                 test    eax, eax
.text:00418B8B                 lea     esi, [esp+28h]
.text:00418B8F                 jz      loc_418FC0
.text:00418B95                 call    sub_41AC00
.text:00418B9A                 test    eax, eax
.text:00418B9C                 jz      short loc_418BAC
.text:00418B9E                 call    sub_41AB50
.text:00418BA3                 cmp     eax, 0Bh
.text:00418BA6                 jle     loc_418F94
.text:00418BAC
.text:00418BAC loc_418BAC:                             ; CODE XREF: .text:00418B9C↑j
.text:00418BAC                 cld
.text:00418BAD                 xor     eax, eax
.text:00418BAF                 lea     ebx, [esp+60h]
.text:00418BB3                 mov     ecx, 7
.text:00418BB8                 mov     edi, ebx
.text:00418BBA                 rep stosd
.text:00418BBC                 mov     dword ptr [esp+18h], 0
.text:00418BC4                 mov     dword ptr [esp+14h], 4000000h
.text:00418BCC                 mov     dword ptr [esp+10h], 0
.text:00418BD4                 mov     dword ptr [esp+0Ch], 0
.text:00418BDC                 mov     dword ptr [esp+8], 0
.text:00418BE4                 mov     dword ptr [esp+4], 0
.text:00418BEC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00418BF3                 call    CreateFileA
.text:00418BF8                 sub     esp, 1Ch
.text:00418BFB                 mov     edi, eax
.text:00418BFD                 cmp     eax, 0FFFFFFFFh
.text:00418C00                 jz      short loc_418C80
.text:00418C02                 mov     [esp+10h], ebx
.text:00418C06                 lea     edx, [esp+80h]
.text:00418C0D                 lea     ecx, [esp+24h]
.text:00418C11                 mov     [esp+70h], edx
.text:00418C15                 mov     [esp+18h], ecx
.text:00418C19                 mov     [esp+8], ebx
.text:00418C1D                 mov     dword ptr [esp+6Ch], 7303h
.text:00418C25                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:00418C2D                 mov     [esp+64h], ebp
.text:00418C31                 mov     dword ptr [esp+78h], 1
.text:00418C39                 mov     dword ptr [esp+1Ch], 0
.text:00418C41                 mov     dword ptr [esp+14h], 1Ch
.text:00418C49                 mov     dword ptr [esp+0Ch], 1Ch
.text:00418C51                 mov     dword ptr [esp+4], 6
.text:00418C59                 mov     [esp], eax
.text:00418C5C                 call    DeviceIoControl
.text:00418C61                 sub     esp, 20h
.text:00418C64                 mov     ebx, eax
.text:00418C66                 mov     [esp], edi
.text:00418C69                 call    CloseHandle
.text:00418C6E                 sub     esp, 4
.text:00418C71                 test    ebx, ebx
.text:00418C73                 jz      short loc_418C80
.text:00418C75                 test    byte ptr [esp+78h], 1
.text:00418C7A                 jz      loc_418F60
.text:00418C80
.text:00418C80 loc_418C80:                             ; CODE XREF: .text:00418C00↑j
.text:00418C80                                         ; .text:00418C73↑j
.text:00418C80                 call    sub_41A1F0
.text:00418C85                 mov     edi, eax
.text:00418C87                 call    _errno
.text:00418C8C                 mov     [eax], edi
.text:00418C8E                 xor     eax, eax
.text:00418C90
.text:00418C90 loc_418C90:                             ; CODE XREF: .text:00418F8F↓j
.text:00418C90                                         ; .text:00418FBB↓j
.text:00418C90                 test    eax, eax
.text:00418C92                 jnz     short loc_418CB4
.text:00418C94                 mov     dword ptr [esp+34h], 1
.text:00418C9C                 mov     dword ptr [esp+30h], 200h
.text:00418CA4                 mov     dword ptr [esp+2Ch], 0
.text:00418CAC                 mov     dword ptr [esp+28h], 0
.text:00418CB4
.text:00418CB4 loc_418CB4:                             ; CODE XREF: .text:00418C92↑j
.text:00418CB4                 mov     edx, [esp+30h]
.text:00418CB8                 mov     edi, [esp+34h]
.text:00418CBC                 mov     ecx, [esp+20h]
.text:00418CC0                 imul    edi, edx
.text:00418CC3                 test    ecx, ecx
.text:00418CC5                 jnz     short loc_418CED
.text:00418CC7                 mov     eax, [esp+28h]
.text:00418CCB                 mul     edi
.text:00418CCD                 mov     esi, eax
.text:00418CCF                 mov     eax, [esp+2Ch]
.text:00418CD3                 mov     [esp+44h], edx
.text:00418CD7                 mov     [esp+40h], esi
.text:00418CDB                 mul     edi
.text:00418CDD                 mov     [esp+48h], eax
.text:00418CE1                 mov     [esp+4Ch], edx
.text:00418CE5                 mov     [esp+38h], eax
.text:00418CE9                 mov     [esp+3Ch], edx
.text:00418CED
.text:00418CED loc_418CED:                             ; CODE XREF: .text:00418CC5↑j
.text:00418CED                 mov     ebx, [esp+5Ch]
.text:00418CF1                 lea     edx, [esp+0B0h]
.text:00418CF8                 mov     ecx, [esp+8D4h]
.text:00418CFF                 mov     [ecx+48h], ebx
.text:00418D02                 mov     dword ptr [esp+4], offset loc_418A68
.text:00418D0A                 mov     [esp], edx
.text:00418D0D                 call    _stricmp
.text:00418D12                 test    eax, eax
.text:00418D14                 jnz     loc_418ED0
.text:00418D1A                 mov     esi, [esp+8D4h]
.text:00418D21                 mov     dword ptr [esi], 5346544Eh
.text:00418D27
.text:00418D27 loc_418D27:                             ; CODE XREF: .text:00418EF8↓j
.text:00418D27                                         ; .text:00418F25↓j ...
.text:00418D27                 mov     ebx, [esp+30h]
.text:00418D2B                 mov     esi, [esp+8D4h]
.text:00418D32                 mov     [esi+4], ebx
.text:00418D35                 mov     [esi+8], ebx
.text:00418D38                 mov     ebx, [esi+8]
.text:00418D3B                 mov     [esi+0Ch], edi
.text:00418D3E                 mov     ecx, [esp+44h]
.text:00418D42                 xor     esi, esi
.text:00418D44                 mov     [esp+8], ebx
.text:00418D48                 mov     edx, [esp+40h]
.text:00418D4C                 mov     [esp+0Ch], esi
.text:00418D50                 mov     [esp+4], ecx
.text:00418D54                 mov     [esp], edx
.text:00418D57                 call    sub_41EAF0
.text:00418D5C                 mov     ecx, [esp+8D4h]
.text:00418D63                 mov     [ecx+10h], eax
.text:00418D66                 mov     [ecx+14h], edx
.text:00418D69                 mov     ecx, [esp+4Ch]
.text:00418D6D                 mov     [esp+8], ebx
.text:00418D71                 mov     edx, [esp+48h]
.text:00418D75                 mov     [esp+0Ch], esi
.text:00418D79                 mov     [esp+4], ecx
.text:00418D7D                 mov     [esp], edx
.text:00418D80                 call    sub_41EAF0
.text:00418D85                 mov     ecx, [esp+8D4h]
.text:00418D8C                 mov     [ecx+18h], eax
.text:00418D8F                 mov     [ecx+1Ch], edx
.text:00418D92                 mov     ecx, [esp+38h]
.text:00418D96                 mov     [esp+8], ebx
.text:00418D9A                 mov     ebx, [esp+3Ch]
.text:00418D9E                 mov     [esp+0Ch], esi
.text:00418DA2                 mov     [esp], ecx
.text:00418DA5                 mov     [esp+4], ebx
.text:00418DA9                 call    sub_41EAF0
.text:00418DAE                 mov     esi, [esp+8D4h]
.text:00418DB5                 mov     [esi+20h], eax
.text:00418DB8                 mov     [esi+24h], edx
.text:00418DBB                 mov     ecx, [esp+44h]
.text:00418DBF                 mov     esi, edi
.text:00418DC1                 mov     [esp+8], esi
.text:00418DC5                 mov     edx, [esp+40h]
.text:00418DC9                 xor     edi, edi
.text:00418DCB                 mov     [esp+0Ch], edi
.text:00418DCF                 mov     [esp+4], ecx
.text:00418DD3                 mov     [esp], edx
.text:00418DD6                 call    sub_41EAF0
.text:00418DDB                 mov     ebx, [esp+8D4h]
.text:00418DE2                 mov     [ebx+28h], eax
.text:00418DE5                 mov     [ebx+2Ch], edx
.text:00418DE8                 mov     ecx, [esp+4Ch]
.text:00418DEC                 mov     [esp+8], esi
.text:00418DF0                 mov     edx, [esp+48h]
.text:00418DF4                 mov     [esp+0Ch], edi
.text:00418DF8                 mov     [esp+4], ecx
.text:00418DFC                 mov     [esp], edx
.text:00418DFF                 call    sub_41EAF0
.text:00418E04                 mov     ebx, [esp+8D4h]
.text:00418E0B                 mov     [ebx+30h], eax
.text:00418E0E                 mov     [ebx+34h], edx
.text:00418E11                 mov     ecx, [esp+3Ch]
.text:00418E15                 mov     [esp+8], esi
.text:00418E19                 mov     edx, [esp+38h]
.text:00418E1D                 mov     [esp+0Ch], edi
.text:00418E21                 mov     [esp+4], ecx
.text:00418E25                 mov     [esp], edx
.text:00418E28                 call    sub_41EAF0
.text:00418E2D                 mov     edx, [esp+8D4h]
.text:00418E34                 lea     ecx, [esp+0B0h]
.text:00418E3B                 mov     [edx+38h], eax
.text:00418E3E                 mov     esi, [esp+58h]
.text:00418E42                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00418E49                 mov     [edx+110h], esi
.text:00418E4F                 mov     esi, edx
.text:00418E51                 add     esi, 4Ch ; 'L'
.text:00418E54                 movzx   ebx, word ptr [esp+56h]
.text:00418E59                 movzx   edi, word ptr [esp+54h]
.text:00418E5E                 mov     [edx+3Ch], ebx
.text:00418E61                 lea     ebx, [esp+4B0h]
.text:00418E68                 mov     [edx+40h], edi
.text:00418E6B                 mov     [esp+4], ecx
.text:00418E6F                 mov     dword ptr [esp+8], 10h
.text:00418E77                 mov     [esp], esi
.text:00418E7A                 call    strncpy
.text:00418E7F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00418E87                 mov     edi, [esp+8D4h]
.text:00418E8E                 mov     [esp+4], ebx
.text:00418E92                 add     edi, 5Ch ; '\'
.text:00418E95                 mov     [esp], edi
.text:00418E98                 call    strncpy
.text:00418E9D                 mov     [esp+4], ebp
.text:00418EA1                 mov     ebp, [esp+8D4h]
.text:00418EA8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00418EB0                 add     ebp, 0B6h ; '¶'
.text:00418EB6                 mov     [esp], ebp
.text:00418EB9                 call    strncpy
.text:00418EBE                 xor     eax, eax
.text:00418EC0
.text:00418EC0 loc_418EC0:                             ; CODE XREF: .text:00418FFC↓j
.text:00418EC0                 add     esp, 8BCh
.text:00418EC6                 pop     ebx
.text:00418EC7                 pop     esi
.text:00418EC8                 pop     edi
.text:00418EC9                 pop     ebp
.text:00418ECA                 retn
.text:00418ECA ; ---------------------------------------------------------------------------
.text:00418ECB                 align 10h
.text:00418ED0
.text:00418ED0 loc_418ED0:                             ; CODE XREF: .text:00418D14↑j
.text:00418ED0                 mov     dword ptr [esp+4], 418A6Dh
.text:00418ED8                 lea     eax, [esp+0B0h]
.text:00418EDF                 mov     [esp], eax
.text:00418EE2                 call    _stricmp
.text:00418EE7                 test    eax, eax
.text:00418EE9                 jnz     short loc_418EFD
.text:00418EEB                 mov     edx, [esp+8D4h]
.text:00418EF2                 mov     dword ptr [edx], 4008h
.text:00418EF8                 jmp     loc_418D27
.text:00418EFD ; ---------------------------------------------------------------------------
.text:00418EFD
.text:00418EFD loc_418EFD:                             ; CODE XREF: .text:00418EE9↑j
.text:00418EFD                 mov     dword ptr [esp+4], 418A73h
.text:00418F05                 lea     ecx, [esp+0B0h]
.text:00418F0C                 mov     [esp], ecx
.text:00418F0F                 call    _stricmp
.text:00418F14                 test    eax, eax
.text:00418F16                 jnz     short loc_418F2A
.text:00418F18                 mov     ebx, [esp+8D4h]
.text:00418F1F                 mov     dword ptr [ebx], 4006h
.text:00418F25                 jmp     loc_418D27
.text:00418F2A ; ---------------------------------------------------------------------------
.text:00418F2A
.text:00418F2A loc_418F2A:                             ; CODE XREF: .text:00418F16↑j
.text:00418F2A                 mov     dword ptr [esp+4], 418A77h
.text:00418F32                 lea     eax, [esp+0B0h]
.text:00418F39                 mov     [esp], eax
.text:00418F3C                 call    _stricmp
.text:00418F41                 test    eax, eax
.text:00418F43                 mov     esi, [esp+8D4h]
.text:00418F4A                 setnz   cl
.text:00418F4D                 movzx   edx, cl
.text:00418F50                 dec     edx
.text:00418F51                 and     edx, 4000h
.text:00418F57                 mov     [esi], edx
.text:00418F59                 jmp     loc_418D27
.text:00418F59 ; ---------------------------------------------------------------------------
.text:00418F5E                 align 10h
.text:00418F60
.text:00418F60 loc_418F60:                             ; CODE XREF: .text:00418C7A↑j
.text:00418F60                 mov     edi, [esp+84h]
.text:00418F67                 mov     eax, 1
.text:00418F6C                 mov     edx, [esp+88h]
.text:00418F73                 mov     ecx, [esp+8Ch]
.text:00418F7A                 mov     ebx, [esp+90h]
.text:00418F81                 mov     [esp+34h], edi
.text:00418F85                 mov     [esp+30h], edx
.text:00418F89                 mov     [esp+2Ch], ecx
.text:00418F8D                 mov     [esi], ebx
.text:00418F8F                 jmp     loc_418C90
.text:00418F94 ; ---------------------------------------------------------------------------
.text:00418F94
.text:00418F94 loc_418F94:                             ; CODE XREF: .text:00418BA6↑j
.text:00418F94                 mov     [esp+10h], esi
.text:00418F98                 lea     eax, [esp+2Ch]
.text:00418F9C                 lea     esi, [esp+30h]
.text:00418FA0                 mov     [esp+0Ch], eax
.text:00418FA4                 lea     edi, [esp+34h]
.text:00418FA8                 mov     [esp+8], esi
.text:00418FAC                 mov     [esp+4], edi
.text:00418FB0
.text:00418FB0 loc_418FB0:                             ; CODE XREF: .text:00418FDC↓j
.text:00418FB0                 mov     [esp], ebp
.text:00418FB3                 call    GetDiskFreeSpaceA
.text:00418FB8                 sub     esp, 14h
.text:00418FBB                 jmp     loc_418C90
.text:00418FC0 ; ---------------------------------------------------------------------------
.text:00418FC0
.text:00418FC0 loc_418FC0:                             ; CODE XREF: .text:00418B8F↑j
.text:00418FC0                 mov     [esp+10h], esi
.text:00418FC4                 lea     ebx, [esp+2Ch]
.text:00418FC8                 lea     eax, [esp+30h]
.text:00418FCC                 mov     [esp+0Ch], ebx
.text:00418FD0                 lea     esi, [esp+34h]
.text:00418FD4                 mov     [esp+8], eax
.text:00418FD8                 mov     [esp+4], esi
.text:00418FDC                 jmp     short loc_418FB0
.text:00418FDE ; ---------------------------------------------------------------------------
.text:00418FDE
.text:00418FDE loc_418FDE:                             ; CODE XREF: .text:00418B47↑j
.text:00418FDE                 mov     [esp], edi
.text:00418FE1                 call    FreeLibrary
.text:00418FE6                 sub     esp, 4
.text:00418FE9                 call    sub_41A1F0
.text:00418FEE                 mov     esi, eax
.text:00418FF0                 call    _errno
.text:00418FF5                 mov     [eax], esi
.text:00418FF7
.text:00418FF7 loc_418FF7:                             ; CODE XREF: .text:00419017↓j
.text:00418FF7                 mov     eax, 0FFFFFFFFh
.text:00418FFC                 jmp     loc_418EC0
.text:00419001 ; ---------------------------------------------------------------------------
.text:00419001
.text:00419001 loc_419001:                             ; CODE XREF: .text:00418AC1↑j
.text:00419001                 mov     [esp], edi
.text:00419004                 call    FreeLibrary
.text:00419009                 sub     esp, 4
.text:0041900C                 call    _errno
.text:00419011                 mov     dword ptr [eax], 2
.text:00419017                 jmp     short loc_418FF7
.text:00419017 ; ---------------------------------------------------------------------------
.text:00419019                 align 10h
.text:00419020
.text:00419020 ; =============== S U B R O U T I N E =======================================
.text:00419020
.text:00419020
.text:00419020 ; int __cdecl sub_419020(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00419020 sub_419020      proc near               ; CODE XREF: sub_4160F0+2C7↑p
.text:00419020                                         ; .text:0041672A↑p
.text:00419020
.text:00419020 lpFileName      = dword ptr -9Ch
.text:00419020 dwDesiredAccess = dword ptr -98h
.text:00419020 dwShareMode     = dword ptr -94h
.text:00419020 lpSecurityAttributes= dword ptr -90h
.text:00419020 dwCreationDisposition= dword ptr -8Ch
.text:00419020 dwFlagsAndAttributes= dword ptr -88h
.text:00419020 hTemplateFile   = dword ptr -84h
.text:00419020 lpOverlapped    = dword ptr -80h
.text:00419020 BytesReturned   = dword ptr -70h
.text:00419020 InBuffer        = byte ptr -6Ch
.text:00419020 var_68          = dword ptr -68h
.text:00419020 var_64          = dword ptr -64h
.text:00419020 var_60          = dword ptr -60h
.text:00419020 var_5C          = dword ptr -5Ch
.text:00419020 var_54          = dword ptr -54h
.text:00419020 var_4C          = byte ptr -4Ch
.text:00419020 var_48          = dword ptr -48h
.text:00419020 var_44          = dword ptr -44h
.text:00419020 var_40          = dword ptr -40h
.text:00419020 var_3C          = dword ptr -3Ch
.text:00419020 lpRootPathName  = dword ptr -2Ch
.text:00419020 lpSectorsPerCluster= dword ptr -28h
.text:00419020 lpBytesPerSector= dword ptr -24h
.text:00419020 lpNumberOfFreeClusters= dword ptr -20h
.text:00419020 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00419020 var_18          = dword ptr -18h
.text:00419020 var_14          = dword ptr -14h
.text:00419020 var_10          = dword ptr -10h
.text:00419020 var_C           = dword ptr -0Ch
.text:00419020 var_8           = dword ptr -8
.text:00419020 var_4           = dword ptr -4
.text:00419020 arg_0           = dword ptr  4
.text:00419020 arg_4           = dword ptr  8
.text:00419020 arg_8           = dword ptr  0Ch
.text:00419020 arg_C           = dword ptr  10h
.text:00419020 arg_10          = dword ptr  14h
.text:00419020
.text:00419020                 sub     esp, 2Ch
.text:00419023                 mov     edx, [esp+2Ch+arg_0]
.text:00419027                 mov     [esp+2Ch+var_10], ebx
.text:0041902B                 mov     ebx, [esp+2Ch+arg_10]
.text:0041902F                 mov     [esp+2Ch+var_C], esi
.text:00419033                 mov     esi, [esp+2Ch+arg_C]
.text:00419037                 mov     [esp+2Ch+var_8], edi
.text:0041903B                 mov     edi, [esp+2Ch+arg_8]
.text:0041903F                 mov     [esp+2Ch+var_4], ebp
.text:00419043                 mov     ebp, [esp+2Ch+arg_4]
.text:00419047                 mov     [esp+2Ch+var_14], edx
.text:0041904B                 call    sub_41AC00
.text:00419050                 test    eax, eax
.text:00419052                 jz      short loc_419084
.text:00419054                 mov     [esp+2Ch+arg_10], ebx
.text:00419058                 mov     edx, [esp+2Ch+var_14]
.text:0041905C                 mov     ebx, [esp+2Ch+var_10]
.text:00419060                 mov     [esp+2Ch+arg_C], esi
.text:00419064                 mov     esi, [esp+2Ch+var_C]
.text:00419068                 mov     [esp+2Ch+arg_8], edi
.text:0041906C                 mov     edi, [esp+2Ch+var_8]
.text:00419070                 mov     [esp+2Ch+arg_4], ebp
.text:00419074                 mov     ebp, [esp+2Ch+var_4]
.text:00419078                 mov     [esp+2Ch+arg_0], edx
.text:0041907C                 add     esp, 2Ch
.text:0041907F                 jmp     loc_419130
.text:00419084 ; ---------------------------------------------------------------------------
.text:00419084
.text:00419084 loc_419084:                             ; CODE XREF: sub_419020+32↑j
.text:00419084                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00419088                 mov     ecx, [esp+2Ch+var_14]
.text:0041908C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00419090                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00419094                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00419098                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0041909B                 call    GetDiskFreeSpaceA
.text:004190A0                 sub     esp, 14h
.text:004190A3                 mov     ebx, [esp+2Ch+var_10]
.text:004190A7                 mov     esi, [esp+2Ch+var_C]
.text:004190AB                 mov     edi, [esp+2Ch+var_8]
.text:004190AF                 mov     ebp, [esp+2Ch+var_4]
.text:004190B3                 add     esp, 2Ch
.text:004190B6                 retn
.text:004190B6 ; ---------------------------------------------------------------------------
.text:004190B7                 align 10h
.text:004190C0
.text:004190C0 loc_4190C0:                             ; CODE XREF: .text:0041AF1D↓p
.text:004190C0                 sub     esp, 1Ch
.text:004190C3                 mov     [esp+1Ch+var_4], esi
.text:004190C7                 mov     esi, [esp+1Ch+arg_0]
.text:004190CB                 mov     [esp+1Ch+var_8], ebx
.text:004190CF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:004190D2                 call    sub_4185D0
.text:004190D7                 test    eax, eax
.text:004190D9                 mov     ebx, eax
.text:004190DB                 jz      short loc_4190F0
.text:004190DD                 cmp     byte ptr [eax], 0
.text:004190E0                 jz      short loc_4190F0
.text:004190E2                 test    esi, esi
.text:004190E4                 jz      short loc_4190F0
.text:004190E6                 cmp     byte ptr [esi], 0
.text:004190E9                 jnz     short loc_419116
.text:004190EB                 nop
.text:004190EC                 lea     esi, [esi+0]
.text:004190F0
.text:004190F0 loc_4190F0:                             ; CODE XREF: sub_419020+BB↑j
.text:004190F0                                         ; sub_419020+C0↑j ...
.text:004190F0                 call    _errno
.text:004190F5                 mov     dword ptr [eax], 2
.text:004190FB                 mov     esi, 0FFFFFFFFh
.text:00419100
.text:00419100 loc_419100:                             ; CODE XREF: sub_419020+108↓j
.text:00419100                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00419103                 call    free
.text:00419108                 mov     eax, esi
.text:0041910A                 mov     ebx, [esp+1Ch+var_8]
.text:0041910E                 mov     esi, [esp+1Ch+var_4]
.text:00419112                 add     esp, 1Ch
.text:00419115                 retn
.text:00419116 ; ---------------------------------------------------------------------------
.text:00419116
.text:00419116 loc_419116:                             ; CODE XREF: sub_419020+C9↑j
.text:00419116                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00419119                 mov     edx, [esp+1Ch+arg_4]
.text:0041911D                 mov     [esp+1Ch+var_18], edx
.text:00419121                 call    near ptr loc_418A7B+5
.text:00419126                 mov     esi, eax
.text:00419128                 jmp     short loc_419100
.text:00419128 ; ---------------------------------------------------------------------------
.text:0041912A                 align 10h
.text:00419130
.text:00419130 loc_419130:                             ; CODE XREF: sub_419020+5F↑j
.text:00419130                 push    ebp
.text:00419131                 push    edi
.text:00419132                 push    esi
.text:00419133                 push    ebx
.text:00419134                 sub     esp, 8Ch
.text:0041913A                 mov     ebp, [esp+9Ch+arg_0]
.text:00419141                 call    sub_41AC00
.text:00419146                 test    eax, eax
.text:00419148                 jz      short loc_419158
.text:0041914A                 call    sub_41AB50
.text:0041914F                 cmp     eax, 0Bh
.text:00419152                 jle     loc_419280
.text:00419158
.text:00419158 loc_419158:                             ; CODE XREF: sub_419020+128↑j
.text:00419158                 cld
.text:00419159                 xor     eax, eax
.text:0041915B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0041915F                 mov     ecx, 7
.text:00419164                 mov     edi, ebx
.text:00419166                 lea     esi, [esp+9Ch+var_4C]
.text:0041916A                 rep stosd
.text:0041916C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00419174                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0041917C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00419184                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041918C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00419194                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0041919C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:004191A3                 call    CreateFileA
.text:004191A8                 sub     esp, 1Ch
.text:004191AB                 mov     edi, eax
.text:004191AD                 cmp     eax, 0FFFFFFFFh
.text:004191B0                 jz      short loc_419225
.text:004191B2                 mov     [esp+9Ch+var_68], ebp
.text:004191B6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:004191BA                 mov     [esp+9Ch+var_5C], esi
.text:004191BE                 mov     [esp+9Ch+var_60], 7303h
.text:004191C6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:004191CE                 mov     [esp+9Ch+var_54], 1
.text:004191D6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:004191DE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:004191E2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:004191EA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:004191EE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:004191F6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:004191FA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00419202                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00419205                 call    DeviceIoControl
.text:0041920A                 sub     esp, 20h
.text:0041920D                 mov     esi, eax
.text:0041920F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00419212                 call    CloseHandle
.text:00419217                 sub     esp, 4
.text:0041921A                 test    esi, esi
.text:0041921C                 jz      short loc_419225
.text:0041921E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00419223                 jz      short loc_419240
.text:00419225
.text:00419225 loc_419225:                             ; CODE XREF: sub_419020+190↑j
.text:00419225                                         ; sub_419020+1FC↑j
.text:00419225                 call    sub_41A1F0
.text:0041922A                 mov     edi, eax
.text:0041922C                 call    _errno
.text:00419231                 mov     [eax], edi
.text:00419233                 xor     eax, eax
.text:00419235
.text:00419235 loc_419235:                             ; CODE XREF: sub_419020+25A↓j
.text:00419235                                         ; sub_419020+297↓j
.text:00419235                 add     esp, 8Ch
.text:0041923B                 pop     ebx
.text:0041923C                 pop     esi
.text:0041923D                 pop     edi
.text:0041923E                 pop     ebp
.text:0041923F                 retn
.text:00419240 ; ---------------------------------------------------------------------------
.text:00419240
.text:00419240 loc_419240:                             ; CODE XREF: sub_419020+203↑j
.text:00419240                 mov     edx, [esp+9Ch+var_48]
.text:00419244                 mov     eax, 1
.text:00419249                 mov     ebx, [esp+9Ch+arg_4]
.text:00419250                 mov     ebp, [esp+9Ch+arg_8]
.text:00419257                 mov     ecx, [esp+9Ch+arg_C]
.text:0041925E                 mov     [ebx], edx
.text:00419260                 mov     edi, [esp+9Ch+var_44]
.text:00419264                 mov     ebx, [esp+9Ch+arg_10]
.text:0041926B                 mov     [ebp+0], edi
.text:0041926E                 mov     esi, [esp+9Ch+var_40]
.text:00419272                 mov     [ecx], esi
.text:00419274                 mov     edx, [esp+9Ch+var_3C]
.text:00419278                 mov     [ebx], edx
.text:0041927A                 jmp     short loc_419235
.text:0041927A ; ---------------------------------------------------------------------------
.text:0041927C                 align 10h
.text:00419280
.text:00419280 loc_419280:                             ; CODE XREF: sub_419020+132↑j
.text:00419280                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00419283                 mov     eax, [esp+9Ch+arg_C]
.text:0041928A                 mov     ecx, [esp+9Ch+arg_10]
.text:00419291                 mov     edx, [esp+9Ch+arg_8]
.text:00419298                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0041929C                 mov     eax, [esp+9Ch+arg_4]
.text:004192A3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:004192A7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:004192AB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:004192AF                 call    GetDiskFreeSpaceA
.text:004192B4                 sub     esp, 14h
.text:004192B7                 jmp     loc_419235
.text:004192B7 sub_419020      endp ; sp-analysis failed
.text:004192B7
.text:004192B7 ; ---------------------------------------------------------------------------
.text:004192BC                 align 10h
.text:004192C0
.text:004192C0 ; =============== S U B R O U T I N E =======================================
.text:004192C0
.text:004192C0
.text:004192C0 ; int __cdecl sub_4192C0(int, LPCSTR lpMultiByteStr, int, int)
.text:004192C0 sub_4192C0      proc near               ; CODE XREF: sub_419480+E8↓p
.text:004192C0
.text:004192C0 var_254         = dword ptr -254h
.text:004192C0 lpFileName      = dword ptr -24Ch
.text:004192C0 dwFileAttributes= dword ptr -248h
.text:004192C0 dwClsContext    = dword ptr -244h
.text:004192C0 riid            = dword ptr -240h
.text:004192C0 ppv             = dword ptr -23Ch
.text:004192C0 cchWideChar     = dword ptr -238h
.text:004192C0 var_22C         = dword ptr -22Ch
.text:004192C0 var_224         = dword ptr -224h
.text:004192C0 var_220         = dword ptr -220h
.text:004192C0 WideCharStr     = word ptr -21Ch
.text:004192C0 arg_0           = dword ptr  4
.text:004192C0 lpMultiByteStr  = dword ptr  8
.text:004192C0 arg_C           = dword ptr  10h
.text:004192C0
.text:004192C0                 push    edi
.text:004192C1                 push    esi
.text:004192C2                 push    ebx
.text:004192C3                 sub     esp, 240h
.text:004192C9                 mov     edi, [esp+24Ch+lpMultiByteStr]
.text:004192D0                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:004192D3                 call    GetFileAttributesA
.text:004192D8                 sub     esp, 4
.text:004192DB                 cmp     eax, 0FFFFFFFFh
.text:004192DE                 jz      short loc_4192FA
.text:004192E0                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:004192E3                 and     eax, 0FFFFFFFEh
.text:004192E6                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:004192EA                 call    SetFileAttributesA
.text:004192EF                 sub     esp, 8
.text:004192F2                 test    eax, eax
.text:004192F4                 jz      loc_419466
.text:004192FA
.text:004192FA loc_4192FA:                             ; CODE XREF: sub_4192C0+1E↑j
.text:004192FA                                         ; sub_4192C0+1AE↓j
.text:004192FA                 mov     [esp+24Ch+lpFileName], 0 ; pvReserved
.text:00419301                 call    OleInitialize
.text:00419306                 sub     esp, 4
.text:00419309                 cmp     eax, 1
.text:0041930C                 ja      loc_41944C
.text:00419312                 mov     [esp+24Ch+riid], offset riid ; riid
.text:0041931A                 lea     ecx, [esp+24Ch+var_220]
.text:0041931E                 mov     [esp+24Ch+ppv], ecx ; ppv
.text:00419322                 mov     [esp+24Ch+dwClsContext], 1 ; dwClsContext
.text:0041932A                 mov     [esp+24Ch+dwFileAttributes], 0 ; pUnkOuter
.text:00419332                 mov     [esp+24Ch+lpFileName], offset rclsid ; rclsid
.text:00419339                 call    CoCreateInstance
.text:0041933E                 sub     esp, 14h
.text:00419341                 test    eax, eax
.text:00419343                 js      loc_41944C
.text:00419349                 mov     ebx, [esp+24Ch+var_220]
.text:0041934D                 mov     edx, [esp+24Ch+arg_0]
.text:00419354                 mov     esi, [ebx]
.text:00419356                 mov     [esp+24Ch+dwFileAttributes], edx
.text:0041935A                 mov     [esp+24Ch+lpFileName], ebx
.text:0041935D                 call    dword ptr [esi+50h]
.text:00419360                 sub     esp, 8
.text:00419363                 mov     ebx, dword ptr [esp+248h+WideCharStr]
.text:00419367                 mov     ecx, [esp+248h+arg_C]
.text:0041936E                 mov     esi, [ebx]
.text:00419370                 mov     [esp+248h+dwClsContext], ecx
.text:00419374                 mov     [esp+248h+dwFileAttributes], ebx
.text:00419377                 call    dword ptr [esi+1Ch]
.text:0041937A                 sub     esp, 8
.text:0041937D                 mov     ecx, dword ptr [esp+248h+WideCharStr]
.text:00419381                 lea     edx, [esp+248h+var_220]
.text:00419385                 mov     ebx, [ecx]
.text:00419387                 mov     [esp+248h+riid], edx
.text:0041938B                 mov     [esp+248h+dwClsContext], offset dword_41E100
.text:00419393                 mov     [esp+248h+dwFileAttributes], ecx
.text:00419396                 call    dword ptr [ebx]
.text:00419398                 sub     esp, 0Ch
.text:0041939B                 test    eax, eax
.text:0041939D                 js      loc_41944C
.text:004193A3                 call    AreFileApisANSI
.text:004193A8                 mov     [esp+24Ch+cchWideChar], 104h ; cchWideChar
.text:004193B0                 test    eax, eax
.text:004193B2                 lea     esi, [esp+24Ch+WideCharStr]
.text:004193B6                 setz    dl
.text:004193B9                 mov     [esp+24Ch+ppv], esi ; lpWideCharStr
.text:004193BD                 mov     [esp+24Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:004193C5                 mov     [esp+24Ch+dwClsContext], edi ; lpMultiByteStr
.text:004193C9                 movzx   ebx, dl
.text:004193CC                 mov     [esp+24Ch+dwFileAttributes], 0 ; dwFlags
.text:004193D4                 mov     [esp+24Ch+lpFileName], ebx ; CodePage
.text:004193D7                 call    MultiByteToWideChar
.text:004193DC                 sub     esp, 18h
.text:004193DF                 test    eax, eax
.text:004193E1                 js      short loc_41944C
.text:004193E3                 mov     ecx, [esp+24Ch+var_224]
.text:004193E7                 mov     ebx, [ecx]
.text:004193E9                 mov     [esp+24Ch+dwFileAttributes], esi
.text:004193ED                 mov     [esp+24Ch+lpFileName], ecx
.text:004193F0                 mov     [esp+24Ch+dwClsContext], 1
.text:004193F8                 call    dword ptr [ebx+18h]
.text:004193FB                 sub     esp, 0Ch
.text:004193FE                 mov     esi, eax
.text:00419400                 mov     edx, [esp+254h+var_22C]
.text:00419404                 mov     ecx, [edx]
.text:00419406                 mov     [esp+254h+var_254], edx
.text:00419409                 call    dword ptr [ecx+8]
.text:0041940C                 sub     esp, 4
.text:0041940F                 mov     ebx, [esp+24Ch+var_220]
.text:00419413                 mov     ecx, [ebx]
.text:00419415                 mov     [esp+24Ch+lpFileName], ebx
.text:00419418                 call    dword ptr [ecx+8]
.text:0041941B                 sub     esp, 4
.text:0041941E                 call    CoUninitialize
.text:00419423                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00419426                 call    GetFileAttributesA
.text:0041942B                 sub     esp, 4
.text:0041942E                 or      eax, 1
.text:00419431                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:00419435                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00419438                 call    SetFileAttributesA
.text:0041943D                 sub     esp, 8
.text:00419440                 mov     eax, esi
.text:00419442
.text:00419442 loc_419442:                             ; CODE XREF: sub_4192C0+1A4↓j
.text:00419442                 add     esp, 240h
.text:00419448                 pop     ebx
.text:00419449                 pop     esi
.text:0041944A                 pop     edi
.text:0041944B                 retn
.text:0041944C ; ---------------------------------------------------------------------------
.text:0041944C
.text:0041944C loc_41944C:                             ; CODE XREF: sub_4192C0+4C↑j
.text:0041944C                                         ; sub_4192C0+83↑j ...
.text:0041944C                 call    sub_41A1F0
.text:00419451                 mov     edi, eax
.text:00419453                 call    _errno
.text:00419458                 mov     [eax], edi
.text:0041945A                 call    CoUninitialize
.text:0041945F                 mov     eax, 0FFFFFFFFh
.text:00419464                 jmp     short loc_419442
.text:00419466 ; ---------------------------------------------------------------------------
.text:00419466
.text:00419466 loc_419466:                             ; CODE XREF: sub_4192C0+34↑j
.text:00419466                 mov     [esp+24Ch+lpFileName], edi
.text:00419469                 call    sub_41BCC0
.text:0041946E                 jmp     loc_4192FA
.text:0041946E sub_4192C0      endp
.text:0041946E
.text:0041946E ; ---------------------------------------------------------------------------
.text:00419473 ; const char aLnk_1[]
.text:00419473 aLnk_1          db '.lnk',0             ; DATA XREF: sub_419480+7F↓o
.text:00419473                                         ; sub_419480:loc_41950F↓o
.text:00419478                 align 10h
.text:00419480
.text:00419480 ; =============== S U B R O U T I N E =======================================
.text:00419480
.text:00419480
.text:00419480 ; int __cdecl sub_419480(char *String, char *)
.text:00419480 sub_419480      proc near               ; CODE XREF: sub_403910+39A↑p
.text:00419480                                         ; sub_403910+980↑p
.text:00419480
.text:00419480 Str             = dword ptr -2Ch
.text:00419480 Source          = dword ptr -28h
.text:00419480 var_24          = dword ptr -24h
.text:00419480 Destination     = dword ptr -18h
.text:00419480 Block           = dword ptr -14h
.text:00419480 String          = dword ptr  4
.text:00419480 arg_4           = dword ptr  8
.text:00419480
.text:00419480                 push    ebp
.text:00419481                 push    edi
.text:00419482                 push    esi
.text:00419483                 push    ebx
.text:00419484                 sub     esp, 1Ch
.text:00419487                 mov     ebp, [esp+2Ch+String]
.text:0041948B                 mov     ebx, [esp+2Ch+arg_4]
.text:0041948F                 mov     [esp+2Ch+Str], ebp ; LPCSTR
.text:00419492                 call    sub_41A240
.text:00419497                 mov     [esp+2Ch+Block], eax
.text:0041949B                 mov     edx, [esp+2Ch+Block]
.text:0041949F                 mov     eax, 0FFFFFFFFh
.text:004194A4                 test    edx, edx
.text:004194A6                 jz      loc_419591
.text:004194AC                 mov     [esp+2Ch+Str], ebx ; Str
.text:004194AF                 call    strlen
.text:004194B4                 add     eax, 5
.text:004194B7                 mov     [esp+2Ch+Str], eax ; Size
.text:004194BA                 call    malloc
.text:004194BF                 mov     [esp+2Ch+Destination], eax
.text:004194C3                 mov     ecx, [esp+2Ch+Destination]
.text:004194C7                 mov     eax, 0FFFFFFFFh
.text:004194CC                 test    ecx, ecx
.text:004194CE                 jz      loc_419591
.text:004194D4                 mov     [esp+2Ch+Source], ebx ; Source
.text:004194D8                 mov     edx, [esp+2Ch+Destination]
.text:004194DC                 mov     [esp+2Ch+Str], edx ; Destination
.text:004194DF                 call    strcpy
.text:004194E4                 mov     [esp+2Ch+Source], 2Eh ; '.' ; Ch
.text:004194EC                 mov     eax, [esp+2Ch+Destination]
.text:004194F0                 mov     [esp+2Ch+Str], eax ; Str
.text:004194F3                 call    strrchr
.text:004194F8                 test    eax, eax
.text:004194FA                 mov     esi, eax
.text:004194FC                 jz      short loc_41950F
.text:004194FE                 cld
.text:004194FF                 mov     ebx, offset aLnk_1 ; ".lnk"
.text:00419504                 mov     ecx, 5
.text:00419509                 mov     edi, ebx
.text:0041950B                 repe cmpsb
.text:0041950D                 jz      short loc_419523
.text:0041950F
.text:0041950F loc_41950F:                             ; CODE XREF: sub_419480+7C↑j
.text:0041950F                 mov     [esp+2Ch+Source], offset aLnk_1 ; ".lnk"
.text:00419517                 mov     esi, [esp+2Ch+Destination]
.text:0041951B                 mov     [esp+2Ch+Str], esi ; Destination
.text:0041951E                 call    strcat
.text:00419523
.text:00419523 loc_419523:                             ; CODE XREF: sub_419480+8D↑j
.text:00419523                 mov     esi, [esp+2Ch+Block]
.text:00419527                 mov     [esp+2Ch+Str], esi
.text:0041952A                 call    sub_417D50
.text:0041952F                 mov     [esp+2Ch+Block], eax
.text:00419533                 mov     ebx, [esp+2Ch+Destination]
.text:00419537                 mov     [esp+2Ch+Str], ebx
.text:0041953A                 call    sub_417D50
.text:0041953F                 mov     [esp+2Ch+Destination], eax
.text:00419543                 mov     [esp+2Ch+Str], ebp ; String
.text:00419546                 call    _strdup
.text:0041954B                 mov     [esp+2Ch+Str], eax
.text:0041954E                 call    sub_417CD0
.text:00419553                 mov     [esp+2Ch+var_24], eax ; int
.text:00419557                 mov     ebp, eax
.text:00419559                 mov     edx, [esp+2Ch+Block]
.text:0041955D                 mov     eax, [esp+2Ch+Destination]
.text:00419561                 mov     [esp+2Ch+Str], edx ; int
.text:00419564                 mov     [esp+2Ch+Source], eax ; lpMultiByteStr
.text:00419568                 call    sub_4192C0
.text:0041956D                 mov     ecx, [esp+2Ch+Block]
.text:00419571                 mov     esi, eax
.text:00419573                 mov     [esp+2Ch+Str], ecx ; Block
.text:00419576                 call    free
.text:0041957B                 mov     edi, [esp+2Ch+Destination]
.text:0041957F                 mov     [esp+2Ch+Str], edi ; Block
.text:00419582                 call    free
.text:00419587                 mov     [esp+2Ch+Str], ebp ; Block
.text:0041958A                 call    free
.text:0041958F                 mov     eax, esi
.text:00419591
.text:00419591 loc_419591:                             ; CODE XREF: sub_419480+26↑j
.text:00419591                                         ; sub_419480+4E↑j
.text:00419591                 add     esp, 1Ch
.text:00419594                 pop     ebx
.text:00419595                 pop     esi
.text:00419596                 pop     edi
.text:00419597                 pop     ebp
.text:00419598                 retn
.text:00419598 sub_419480      endp
.text:00419598
.text:00419598 ; ---------------------------------------------------------------------------
.text:00419599                 align 10h
.text:004195A0
.text:004195A0 ; =============== S U B R O U T I N E =======================================
.text:004195A0
.text:004195A0
.text:004195A0 ; int __cdecl sub_4195A0(LPCSTR)
.text:004195A0 sub_4195A0      proc near               ; CODE XREF: sub_403910+F98↑p
.text:004195A0                                         ; sub_403910+1136↑p ...
.text:004195A0
.text:004195A0 lpFileName      = dword ptr -1Ch
.text:004195A0 AccessMode      = dword ptr -18h
.text:004195A0 var_8           = dword ptr -8
.text:004195A0 var_4           = dword ptr -4
.text:004195A0 arg_0           = dword ptr  4
.text:004195A0
.text:004195A0                 sub     esp, 1Ch
.text:004195A3                 mov     [esp+1Ch+var_8], ebx
.text:004195A7                 mov     ebx, [esp+1Ch+arg_0]
.text:004195AB                 mov     [esp+1Ch+var_4], esi
.text:004195AF                 test    ebx, ebx
.text:004195B1                 jz      loc_419642
.text:004195B7                 call    _errno
.text:004195BC                 mov     esi, [eax]
.text:004195BE                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:004195C6                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:004195C9                 call    sub_419E90
.text:004195CE                 test    eax, eax
.text:004195D0                 jnz     short loc_419630
.text:004195D2
.text:004195D2 loc_4195D2:                             ; CODE XREF: sub_4195A0+A0↓j
.text:004195D2                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:004195DA                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:004195DD                 call    sub_419E90
.text:004195E2                 test    eax, eax
.text:004195E4                 jz      short loc_419621
.text:004195E6                 call    _errno
.text:004195EB                 mov     [eax], esi
.text:004195ED                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:004195F0                 call    DeleteFileA
.text:004195F5                 sub     esp, 4
.text:004195F8                 xor     edx, edx
.text:004195FA                 test    eax, eax
.text:004195FC                 jz      short loc_41960C
.text:004195FE
.text:004195FE loc_4195FE:                             ; CODE XREF: sub_4195A0+7F↓j
.text:004195FE                 mov     ebx, [esp+1Ch+var_8]
.text:00419602                 mov     eax, edx
.text:00419604                 mov     esi, [esp+1Ch+var_4]
.text:00419608                 add     esp, 1Ch
.text:0041960B                 retn
.text:0041960C ; ---------------------------------------------------------------------------
.text:0041960C
.text:0041960C loc_41960C:                             ; CODE XREF: sub_4195A0+5C↑j
.text:0041960C                 call    sub_41A1F0
.text:00419611                 mov     esi, eax
.text:00419613                 call    _errno
.text:00419618                 mov     [eax], esi
.text:0041961A
.text:0041961A loc_41961A:                             ; CODE XREF: sub_4195A0+8C↓j
.text:0041961A                                         ; sub_4195A0+AD↓j
.text:0041961A                 mov     edx, 0FFFFFFFFh
.text:0041961F                 jmp     short loc_4195FE
.text:00419621 ; ---------------------------------------------------------------------------
.text:00419621
.text:00419621 loc_419621:                             ; CODE XREF: sub_4195A0+44↑j
.text:00419621                 call    _errno
.text:00419626                 mov     dword ptr [eax], 15h
.text:0041962C                 jmp     short loc_41961A
.text:0041962C ; ---------------------------------------------------------------------------
.text:0041962E                 align 10h
.text:00419630
.text:00419630 loc_419630:                             ; CODE XREF: sub_4195A0+30↑j
.text:00419630                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:00419638                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:0041963B                 call    _chmod_0
.text:00419640                 jmp     short loc_4195D2
.text:00419642 ; ---------------------------------------------------------------------------
.text:00419642
.text:00419642 loc_419642:                             ; CODE XREF: sub_4195A0+11↑j
.text:00419642                 call    _errno
.text:00419647                 mov     dword ptr [eax], 16h
.text:0041964D                 jmp     short loc_41961A
.text:0041964D sub_4195A0      endp
.text:0041964D
.text:0041964D ; ---------------------------------------------------------------------------
.text:0041964F                 align 10h
.text:00419650
.text:00419650 ; =============== S U B R O U T I N E =======================================
.text:00419650
.text:00419650
.text:00419650 ; int __cdecl sub_419650(char *, int)
.text:00419650 sub_419650      proc near               ; CODE XREF: sub_409F70+92↑p
.text:00419650
.text:00419650 var_12C         = dword ptr -12Ch
.text:00419650 lpString1       = dword ptr -128h
.text:00419650 var_124         = dword ptr -124h
.text:00419650 String1         = byte ptr -11Ch
.text:00419650 var_C           = dword ptr -0Ch
.text:00419650 var_8           = dword ptr -8
.text:00419650 var_4           = dword ptr -4
.text:00419650 arg_0           = dword ptr  4
.text:00419650 arg_4           = dword ptr  8
.text:00419650
.text:00419650                 sub     esp, 12Ch
.text:00419656                 mov     [esp+12Ch+var_C], ebx
.text:0041965D                 mov     ebx, [esp+12Ch+arg_0]
.text:00419664                 mov     [esp+12Ch+var_4], edi
.text:0041966B                 mov     edi, [esp+12Ch+arg_4]
.text:00419672                 test    ebx, ebx
.text:00419674                 mov     [esp+12Ch+var_8], esi
.text:0041967B                 jz      short loc_4196DE
.text:0041967D                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:00419680                 call    sub_416770
.text:00419685                 test    eax, eax
.text:00419687                 jz      short loc_4196D5
.text:00419689                 mov     [esp+12Ch+var_124], 104h
.text:00419691                 lea     esi, [esp+12Ch+String1]
.text:00419695                 mov     [esp+12Ch+lpString1], esi ; lpString1
.text:00419699                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:0041969C                 call    sub_4184E0
.text:004196A1                 inc     eax
.text:004196A2                 mov     edx, 0FFFFFFFFh
.text:004196A7                 jz      short loc_4196B7
.text:004196A9                 mov     [esp+12Ch+lpString1], edi ; int
.text:004196AD                 mov     [esp+12Ch+var_12C], esi ; LPCSTR
.text:004196B0
.text:004196B0 loc_4196B0:                             ; CODE XREF: sub_419650+8C↓j
.text:004196B0                 call    sub_41BFA0
.text:004196B5                 mov     edx, eax
.text:004196B7
.text:004196B7 loc_4196B7:                             ; CODE XREF: sub_419650+57↑j
.text:004196B7                                         ; sub_419650+9E↓j
.text:004196B7                 mov     ebx, [esp+12Ch+var_C]
.text:004196BE                 mov     eax, edx
.text:004196C0                 mov     esi, [esp+12Ch+var_8]
.text:004196C7                 mov     edi, [esp+12Ch+var_4]
.text:004196CE                 add     esp, 12Ch
.text:004196D4                 retn
.text:004196D5 ; ---------------------------------------------------------------------------
.text:004196D5
.text:004196D5 loc_4196D5:                             ; CODE XREF: sub_419650+37↑j
.text:004196D5                 mov     [esp+12Ch+lpString1], edi
.text:004196D9                 mov     [esp+12Ch+var_12C], ebx
.text:004196DC                 jmp     short loc_4196B0
.text:004196DE ; ---------------------------------------------------------------------------
.text:004196DE
.text:004196DE loc_4196DE:                             ; CODE XREF: sub_419650+2B↑j
.text:004196DE                 call    _errno
.text:004196E3                 mov     dword ptr [eax], 16h
.text:004196E9                 mov     edx, 0FFFFFFFFh
.text:004196EE                 jmp     short loc_4196B7
.text:004196EE sub_419650      endp
.text:004196EE
.text:004196F0
.text:004196F0 ; =============== S U B R O U T I N E =======================================
.text:004196F0
.text:004196F0
.text:004196F0 sub_4196F0      proc near               ; CODE XREF: sub_403910+B5F↑p
.text:004196F0
.text:004196F0 arg_0           = dword ptr  4
.text:004196F0
.text:004196F0                 sub     esp, 0Ch
.text:004196F3                 mov     edx, [esp+0Ch+arg_0]
.text:004196F7                 test    edx, edx
.text:004196F9                 jz      short loc_419710
.text:004196FB                 call    _errno
.text:00419700                 mov     dword ptr [eax], 16h
.text:00419706
.text:00419706 loc_419706:                             ; CODE XREF: sub_4196F0+2B↓j
.text:00419706                 mov     eax, 0FFFFFFFFh
.text:0041970B                 add     esp, 0Ch
.text:0041970E                 retn
.text:0041970E ; ---------------------------------------------------------------------------
.text:0041970F                 align 10h
.text:00419710
.text:00419710 loc_419710:                             ; CODE XREF: sub_4196F0+9↑j
.text:00419710                 call    _errno
.text:00419715                 mov     dword ptr [eax], 28h ; '('
.text:0041971B                 jmp     short loc_419706
.text:0041971B sub_4196F0      endp
.text:0041971B
.text:0041971B ; ---------------------------------------------------------------------------
.text:0041971D                 align 10h
.text:00419720
.text:00419720 ; =============== S U B R O U T I N E =======================================
.text:00419720
.text:00419720
.text:00419720 ; int __cdecl sub_419720(LPCSTR, char *, int)
.text:00419720 sub_419720      proc near               ; CODE XREF: sub_4154C0+4A↑p
.text:00419720                                         ; sub_418A10+1A↑p ...
.text:00419720
.text:00419720 var_13C         = dword ptr -13Ch
.text:00419720 lpString1       = dword ptr -138h
.text:00419720 var_134         = dword ptr -134h
.text:00419720 String1         = byte ptr -12Ch
.text:00419720 var_10          = dword ptr -10h
.text:00419720 var_C           = dword ptr -0Ch
.text:00419720 var_8           = dword ptr -8
.text:00419720 var_4           = dword ptr -4
.text:00419720 arg_0           = dword ptr  4
.text:00419720 arg_4           = dword ptr  8
.text:00419720 arg_8           = dword ptr  0Ch
.text:00419720
.text:00419720                 sub     esp, 13Ch
.text:00419726                 mov     [esp+13Ch+var_10], ebx
.text:0041972D                 mov     ebx, [esp+13Ch+arg_8]
.text:00419734                 mov     [esp+13Ch+var_C], esi
.text:0041973B                 mov     esi, [esp+13Ch+arg_4]
.text:00419742                 mov     [esp+13Ch+var_8], edi
.text:00419749                 mov     edi, [esp+13Ch+arg_0]
.text:00419750                 mov     [esp+13Ch+var_4], ebp
.text:00419757                 mov     [esp+13Ch+var_134], ebx ; int
.text:0041975B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0041975F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00419762                 call    sub_417750
.text:00419767                 cmp     eax, 0FFFFFFFFh
.text:0041976A                 mov     edx, eax
.text:0041976C                 jz      short loc_41977E
.text:0041976E                 mov     ecx, [ebx]
.text:00419770                 and     ecx, 0F000h
.text:00419776                 cmp     ecx, 0A000h
.text:0041977C                 jz      short loc_4197A3
.text:0041977E
.text:0041977E loc_41977E:                             ; CODE XREF: sub_419720+4C↑j
.text:0041977E                                         ; sub_419720+A1↓j ...
.text:0041977E                 mov     ebx, [esp+13Ch+var_10]
.text:00419785                 mov     eax, edx
.text:00419787                 mov     esi, [esp+13Ch+var_C]
.text:0041978E                 mov     edi, [esp+13Ch+var_8]
.text:00419795                 mov     ebp, [esp+13Ch+var_4]
.text:0041979C                 add     esp, 13Ch
.text:004197A2                 retn
.text:004197A3 ; ---------------------------------------------------------------------------
.text:004197A3
.text:004197A3 loc_4197A3:                             ; CODE XREF: sub_419720+5C↑j
.text:004197A3                 mov     [esp+13Ch+var_134], 104h
.text:004197AB                 lea     ebp, [esp+13Ch+String1]
.text:004197AF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:004197B3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:004197B6                 call    sub_4184E0
.text:004197BB                 inc     eax
.text:004197BC                 mov     edx, 0FFFFFFFFh
.text:004197C1                 jz      short loc_41977E
.text:004197C3                 mov     [esp+13Ch+var_134], ebx ; int
.text:004197C7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:004197CB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004197CE                 call    sub_417750
.text:004197D3                 mov     edx, eax
.text:004197D5                 jmp     short loc_41977E
.text:004197D5 sub_419720      endp
.text:004197D5
.text:004197D5 ; ---------------------------------------------------------------------------
.text:004197D7                 align 10h
.text:004197E0
.text:004197E0 ; =============== S U B R O U T I N E =======================================
.text:004197E0
.text:004197E0
.text:004197E0 nullsub_1       proc near               ; CODE XREF: sub_4026D0+54↑p
.text:004197E0                 retn
.text:004197E0 nullsub_1       endp
.text:004197E0
.text:004197E0 ; ---------------------------------------------------------------------------
.text:004197E1                 align 10h
.text:004197F0
.text:004197F0 ; =============== S U B R O U T I N E =======================================
.text:004197F0
.text:004197F0
.text:004197F0 sub_4197F0      proc near               ; CODE XREF: sub_4026D0+43↑p
.text:004197F0                 xor     eax, eax
.text:004197F2                 retn
.text:004197F2 sub_4197F0      endp
.text:004197F2
.text:004197F2 ; ---------------------------------------------------------------------------
.text:004197F3                 align 10h
.text:00419800
.text:00419800 ; =============== S U B R O U T I N E =======================================
.text:00419800
.text:00419800
.text:00419800 nullsub_2       proc near               ; CODE XREF: sub_4026D0+E4↑p
.text:00419800                 retn
.text:00419800 nullsub_2       endp
.text:00419800
.text:00419800 ; ---------------------------------------------------------------------------
.text:00419801                 align 10h
.text:00419810
.text:00419810 ; =============== S U B R O U T I N E =======================================
.text:00419810
.text:00419810
.text:00419810 ; int __cdecl sub_419810(char *)
.text:00419810 sub_419810      proc near               ; CODE XREF: sub_4026D0+D3↑p
.text:00419810
.text:00419810 var_1C          = dword ptr -1Ch
.text:00419810 var_18          = dword ptr -18h
.text:00419810 var_14          = dword ptr -14h
.text:00419810 var_10          = dword ptr -10h
.text:00419810 var_C           = dword ptr -0Ch
.text:00419810 var_4           = dword ptr -4
.text:00419810 arg_0           = dword ptr  4
.text:00419810
.text:00419810                 sub     esp, 1Ch
.text:00419813                 mov     ecx, [esp+1Ch+arg_0]
.text:00419817                 lea     edx, [esp+1Ch+var_4]
.text:0041981B                 mov     [esp+1Ch+var_C], edx ; int
.text:0041981F                 mov     [esp+1Ch+var_10], 400h ; int
.text:00419827                 mov     [esp+1Ch+var_1C], ecx ; char *
.text:0041982A                 mov     [esp+1Ch+var_14], offset byte_421650 ; char *
.text:00419832                 mov     [esp+1Ch+var_18], offset unk_421630 ; int
.text:0041983A                 call    sub_41C060
.text:0041983F                 test    eax, eax
.text:00419841                 mov     ecx, [esp+1Ch+var_4]
.text:00419845                 setnz   dl
.text:00419848                 add     esp, 1Ch
.text:0041984B                 movzx   eax, dl
.text:0041984E                 dec     eax
.text:0041984F                 and     eax, ecx
.text:00419851                 retn
.text:00419851 sub_419810      endp
.text:00419851
.text:00419851 ; ---------------------------------------------------------------------------
.text:00419852                 align 10h
.text:00419860
.text:00419860 ; =============== S U B R O U T I N E =======================================
.text:00419860
.text:00419860
.text:00419860 ; int __cdecl sub_419860(intptr_t)
.text:00419860 sub_419860      proc near               ; CODE XREF: sub_4025F0+27↑p
.text:00419860
.text:00419860 var_C           = dword ptr -0Ch
.text:00419860 ProcHandle      = dword ptr -8
.text:00419860 Action          = dword ptr -4
.text:00419860 arg_0           = dword ptr  4
.text:00419860
.text:00419860                 sub     esp, 0Ch
.text:00419863                 mov     edx, [esp+0Ch+arg_0]
.text:00419867                 mov     [esp+0Ch+Action], 0 ; Action
.text:0041986F                 mov     [esp+0Ch+var_C], 0 ; intptr_t
.text:00419876                 mov     [esp+0Ch+ProcHandle], edx ; ProcHandle
.text:0041987A                 call    sub_41C250
.text:0041987F                 add     esp, 0Ch
.text:00419882                 retn
.text:00419882 sub_419860      endp
.text:00419882
.text:00419882 ; ---------------------------------------------------------------------------
.text:00419883                 align 10h
.text:00419890
.text:00419890 ; =============== S U B R O U T I N E =======================================
.text:00419890
.text:00419890
.text:00419890 sub_419890      proc near               ; CODE XREF: sub_4025F0+5↑p
.text:00419890                 sub     esp, 0Ch
.text:00419893                 call    _errno
.text:00419898                 mov     dword ptr [eax], 28h ; '('
.text:0041989E                 mov     eax, 0FFFFFFFFh
.text:004198A3                 add     esp, 0Ch
.text:004198A6                 retn
.text:004198A6 sub_419890      endp
.text:004198A6
.text:004198A6 ; ---------------------------------------------------------------------------
.text:004198A7                 align 10h
.text:004198B0
.text:004198B0 ; =============== S U B R O U T I N E =======================================
.text:004198B0
.text:004198B0
.text:004198B0 sub_4198B0      proc near               ; CODE XREF: sub_401700+BE↑p
.text:004198B0                                         ; sub_4154C0+F4↑p ...
.text:004198B0                 xor     eax, eax
.text:004198B2                 retn
.text:004198B2 sub_4198B0      endp
.text:004198B2
.text:004198B2 ; ---------------------------------------------------------------------------
.text:004198B3                 align 10h
.text:004198C0
.text:004198C0 ; =============== S U B R O U T I N E =======================================
.text:004198C0
.text:004198C0
.text:004198C0 sub_4198C0      proc near               ; CODE XREF: sub_4058C0+3EF↑p
.text:004198C0
.text:004198C0 FileHandle      = dword ptr -2Ch
.text:004198C0 Offset          = qword ptr -28h
.text:004198C0 Origin          = dword ptr -20h
.text:004198C0 var_10          = dword ptr -10h
.text:004198C0 var_C           = dword ptr -0Ch
.text:004198C0 var_8           = dword ptr -8
.text:004198C0 var_4           = dword ptr -4
.text:004198C0 arg_0           = dword ptr  4
.text:004198C0 arg_4           = qword ptr  8
.text:004198C0
.text:004198C0                 sub     esp, 2Ch
.text:004198C3                 mov     [esp+2Ch+var_4], ebp
.text:004198C7                 mov     ebp, [esp+2Ch+arg_0]
.text:004198CB                 mov     [esp+2Ch+var_10], ebx
.text:004198CF                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:004198D3                 mov     [esp+2Ch+var_C], esi
.text:004198D7                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:004198DB                 mov     [esp+2Ch+var_8], edi
.text:004198DF                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:004198E2                 call    _get_osfhandle
.text:004198E7                 cmp     eax, 0FFFFFFFFh
.text:004198EA                 mov     edi, eax
.text:004198EC                 jz      short loc_419956
.text:004198EE                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:004198F1                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:004198F9                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:004198FD                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:00419901                 call    _lseeki64
.text:00419906                 mov     ebp, edx
.text:00419908                 xor     eax, ebx
.text:0041990A                 xor     ebp, esi
.text:0041990C                 or      ebp, eax
.text:0041990E                 jnz     short loc_419949
.text:00419910                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:00419913                 call    SetEndOfFile
.text:00419918                 sub     esp, 4
.text:0041991B                 xor     edx, edx
.text:0041991D                 test    eax, eax
.text:0041991F                 jz      short loc_419937
.text:00419921
.text:00419921 loc_419921:                             ; CODE XREF: sub_4198C0+87↓j
.text:00419921                 mov     ebx, [esp+2Ch+var_10]
.text:00419925                 mov     eax, edx
.text:00419927                 mov     esi, [esp+2Ch+var_C]
.text:0041992B                 mov     edi, [esp+2Ch+var_8]
.text:0041992F                 mov     ebp, [esp+2Ch+var_4]
.text:00419933                 add     esp, 2Ch
.text:00419936                 retn
.text:00419937 ; ---------------------------------------------------------------------------
.text:00419937
.text:00419937 loc_419937:                             ; CODE XREF: sub_4198C0+5F↑j
.text:00419937                 call    _errno
.text:0041993C                 mov     dword ptr [eax], offset sub_41A1F0
.text:00419942
.text:00419942 loc_419942:                             ; CODE XREF: sub_4198C0+94↓j
.text:00419942                                         ; sub_4198C0+A1↓j
.text:00419942                 mov     edx, 0FFFFFFFFh
.text:00419947                 jmp     short loc_419921
.text:00419949 ; ---------------------------------------------------------------------------
.text:00419949
.text:00419949 loc_419949:                             ; CODE XREF: sub_4198C0+4E↑j
.text:00419949                 call    _errno
.text:0041994E                 mov     dword ptr [eax], 16h
.text:00419954                 jmp     short loc_419942
.text:00419956 ; ---------------------------------------------------------------------------
.text:00419956
.text:00419956 loc_419956:                             ; CODE XREF: sub_4198C0+2C↑j
.text:00419956                 call    _errno
.text:0041995B                 mov     dword ptr [eax], 9
.text:00419961                 jmp     short loc_419942
.text:00419961 sub_4198C0      endp
.text:00419961
.text:00419961 ; ---------------------------------------------------------------------------
.text:00419963                 align 10h
.text:00419970
.text:00419970 ; =============== S U B R O U T I N E =======================================
.text:00419970
.text:00419970
.text:00419970 sub_419970      proc near               ; CODE XREF: sub_403910+9BD↑p
.text:00419970
.text:00419970 arg_0           = dword ptr  4
.text:00419970
.text:00419970                 sub     esp, 0Ch
.text:00419973                 mov     edx, [esp+0Ch+arg_0]
.text:00419977                 test    edx, edx
.text:00419979                 jz      short loc_419981
.text:0041997B                 xor     eax, eax
.text:0041997D
.text:0041997D loc_41997D:                             ; CODE XREF: sub_419970+21↓j
.text:0041997D                 add     esp, 0Ch
.text:00419980                 retn
.text:00419981 ; ---------------------------------------------------------------------------
.text:00419981
.text:00419981 loc_419981:                             ; CODE XREF: sub_419970+9↑j
.text:00419981                 call    _errno
.text:00419986                 mov     dword ptr [eax], 16h
.text:0041998C                 mov     eax, 0FFFFFFFFh
.text:00419991                 jmp     short loc_41997D
.text:00419991 sub_419970      endp
.text:00419991
.text:00419991 ; ---------------------------------------------------------------------------
.text:00419993                 align 10h
.text:004199A0
.text:004199A0 ; =============== S U B R O U T I N E =======================================
.text:004199A0
.text:004199A0
.text:004199A0 ; int __cdecl sub_4199A0(LPCSTR, LPCSTR lpFileName)
.text:004199A0 sub_4199A0      proc near               ; CODE XREF: sub_403910+6EA↑p
.text:004199A0                                         ; sub_403910+E31↑p ...
.text:004199A0
.text:004199A0 lpExistingFileName= dword ptr -1Ch
.text:004199A0 lpNewFileName   = dword ptr -18h
.text:004199A0 var_8           = dword ptr -8
.text:004199A0 var_4           = dword ptr -4
.text:004199A0 arg_0           = dword ptr  4
.text:004199A0 lpFileName      = dword ptr  8
.text:004199A0
.text:004199A0                 sub     esp, 1Ch
.text:004199A3                 mov     [esp+1Ch+var_4], esi
.text:004199A7                 mov     esi, [esp+1Ch+arg_0]
.text:004199AB                 mov     [esp+1Ch+var_8], ebx
.text:004199AF                 mov     ebx, [esp+1Ch+lpFileName]
.text:004199B3                 test    esi, esi
.text:004199B5                 jz      short loc_419A11
.text:004199B7                 test    ebx, ebx
.text:004199B9                 jz      short loc_419A11
.text:004199BB                 mov     [esp+1Ch+lpNewFileName], 0 ; int
.text:004199C3                 mov     [esp+1Ch+lpExistingFileName], ebx ; lpFileName
.text:004199C6                 call    sub_419E90
.text:004199CB                 test    eax, eax
.text:004199CD                 jz      short loc_419A07
.text:004199CF
.text:004199CF loc_4199CF:                             ; CODE XREF: sub_4199A0+6F↓j
.text:004199CF                 mov     [esp+1Ch+lpNewFileName], ebx ; lpNewFileName
.text:004199D3                 mov     [esp+1Ch+lpExistingFileName], esi ; lpExistingFileName
.text:004199D6                 call    MoveFileA
.text:004199DB                 sub     esp, 8
.text:004199DE                 xor     edx, edx
.text:004199E0                 test    eax, eax
.text:004199E2                 jz      short loc_4199F2
.text:004199E4
.text:004199E4 loc_4199E4:                             ; CODE XREF: sub_4199A0+65↓j
.text:004199E4                 mov     ebx, [esp+1Ch+var_8]
.text:004199E8                 mov     eax, edx
.text:004199EA                 mov     esi, [esp+1Ch+var_4]
.text:004199EE                 add     esp, 1Ch
.text:004199F1                 retn
.text:004199F2 ; ---------------------------------------------------------------------------
.text:004199F2
.text:004199F2 loc_4199F2:                             ; CODE XREF: sub_4199A0+42↑j
.text:004199F2                 call    sub_41A1F0
.text:004199F7                 mov     esi, eax
.text:004199F9                 call    _errno
.text:004199FE                 mov     [eax], esi
.text:00419A00
.text:00419A00 loc_419A00:                             ; CODE XREF: sub_4199A0+7C↓j
.text:00419A00                 mov     edx, 0FFFFFFFFh
.text:00419A05                 jmp     short loc_4199E4
.text:00419A07 ; ---------------------------------------------------------------------------
.text:00419A07
.text:00419A07 loc_419A07:                             ; CODE XREF: sub_4199A0+2D↑j
.text:00419A07                 mov     [esp+1Ch+lpExistingFileName], ebx ; LPCSTR
.text:00419A0A                 call    sub_4195A0
.text:00419A0F                 jmp     short loc_4199CF
.text:00419A11 ; ---------------------------------------------------------------------------
.text:00419A11
.text:00419A11 loc_419A11:                             ; CODE XREF: sub_4199A0+15↑j
.text:00419A11                                         ; sub_4199A0+19↑j
.text:00419A11                 call    _errno
.text:00419A16                 mov     dword ptr [eax], 16h
.text:00419A1C                 jmp     short loc_419A00
.text:00419A1C sub_4199A0      endp
.text:00419A1C
.text:00419A1C ; ---------------------------------------------------------------------------
.text:00419A1E                 align 10h
.text:00419A20
.text:00419A20 ; =============== S U B R O U T I N E =======================================
.text:00419A20
.text:00419A20
.text:00419A20 sub_419A20      proc near               ; CODE XREF: sub_4058C0:loc_405A9F↑p
.text:00419A20
.text:00419A20 lpSystemInfo    = dword ptr -0Ch
.text:00419A20 var_4           = dword ptr -4
.text:00419A20
.text:00419A20                 sub     esp, 0Ch
.text:00419A23                 mov     [esp+0Ch+var_4], edi
.text:00419A27                 mov     edi, ds:dword_421A50
.text:00419A2D                 test    edi, edi
.text:00419A2F                 mov     eax, edi
.text:00419A31                 jz      short loc_419A40
.text:00419A33
.text:00419A33 loc_419A33:                             ; CODE XREF: sub_419A20+48↓j
.text:00419A33                 mov     eax, [edi+4]
.text:00419A36                 mov     edi, [esp+0Ch+var_4]
.text:00419A3A                 add     esp, 0Ch
.text:00419A3D                 retn
.text:00419A3D ; ---------------------------------------------------------------------------
.text:00419A3E                 align 10h
.text:00419A40
.text:00419A40 loc_419A40:                             ; CODE XREF: sub_419A20+11↑j
.text:00419A40                 cld
.text:00419A41                 mov     edi, offset SystemInfo
.text:00419A46                 mov     ecx, 9
.text:00419A4B                 mov     ds:dword_421A50, edi
.text:00419A51                 rep stosd
.text:00419A53                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00419A5A                 call    GetSystemInfo
.text:00419A5F                 mov     edi, ds:dword_421A50
.text:00419A65                 sub     esp, 4
.text:00419A68                 jmp     short loc_419A33
.text:00419A68 sub_419A20      endp
.text:00419A68
.text:00419A68 ; ---------------------------------------------------------------------------
.text:00419A6A                 align 10h
.text:00419A70
.text:00419A70 ; =============== S U B R O U T I N E =======================================
.text:00419A70
.text:00419A70
.text:00419A70 ; int __cdecl sub_419A70(LPCSTR)
.text:00419A70 sub_419A70      proc near               ; CODE XREF: sub_406A50+34E↑p
.text:00419A70                                         ; sub_406A50+87A↑p ...
.text:00419A70
.text:00419A70 lpPathName      = dword ptr -0Ch
.text:00419A70 var_4           = dword ptr -4
.text:00419A70 arg_0           = dword ptr  4
.text:00419A70
.text:00419A70                 sub     esp, 0Ch
.text:00419A73                 mov     eax, [esp+0Ch+arg_0]
.text:00419A77                 mov     [esp+0Ch+var_4], ebx
.text:00419A7B                 test    eax, eax
.text:00419A7D                 jz      short loc_419AAF
.text:00419A7F                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:00419A82                 call    SetCurrentDirectoryA
.text:00419A87                 sub     esp, 4
.text:00419A8A                 xor     edx, edx
.text:00419A8C                 test    eax, eax
.text:00419A8E                 jz      short loc_419A9A
.text:00419A90
.text:00419A90 loc_419A90:                             ; CODE XREF: sub_419A70+3D↓j
.text:00419A90                 mov     ebx, [esp+0Ch+var_4]
.text:00419A94                 mov     eax, edx
.text:00419A96                 add     esp, 0Ch
.text:00419A99                 retn
.text:00419A9A ; ---------------------------------------------------------------------------
.text:00419A9A
.text:00419A9A loc_419A9A:                             ; CODE XREF: sub_419A70+1E↑j
.text:00419A9A                 call    sub_41A1F0
.text:00419A9F                 mov     ebx, eax
.text:00419AA1                 call    _errno
.text:00419AA6                 mov     [eax], ebx
.text:00419AA8
.text:00419AA8 loc_419AA8:                             ; CODE XREF: sub_419A70+4A↓j
.text:00419AA8                 mov     edx, 0FFFFFFFFh
.text:00419AAD                 jmp     short loc_419A90
.text:00419AAF ; ---------------------------------------------------------------------------
.text:00419AAF
.text:00419AAF loc_419AAF:                             ; CODE XREF: sub_419A70+D↑j
.text:00419AAF                 call    _errno
.text:00419AB4                 mov     dword ptr [eax], 16h
.text:00419ABA                 jmp     short loc_419AA8
.text:00419ABA sub_419A70      endp
.text:00419ABA
.text:00419ABA ; ---------------------------------------------------------------------------
.text:00419ABC                 align 10h
.text:00419AC0
.text:00419AC0 ; =============== S U B R O U T I N E =======================================
.text:00419AC0
.text:00419AC0
.text:00419AC0 sub_419AC0      proc near               ; CODE XREF: sub_407A10+1BB↑p
.text:00419AC0                                         ; sub_409630+9D↑p
.text:00419AC0
.text:00419AC0 arg_0           = dword ptr  4
.text:00419AC0
.text:00419AC0                 sub     esp, 0Ch
.text:00419AC3                 mov     edx, [esp+0Ch+arg_0]
.text:00419AC7                 test    edx, edx
.text:00419AC9                 jz      short loc_419ADB
.text:00419ACB                 mov     [esp+0Ch+arg_0], 0
.text:00419AD3                 add     esp, 0Ch
.text:00419AD6                 jmp     sub_41C270
.text:00419ADB ; ---------------------------------------------------------------------------
.text:00419ADB
.text:00419ADB loc_419ADB:                             ; CODE XREF: sub_419AC0+9↑j
.text:00419ADB                 call    _errno
.text:00419AE0                 mov     dword ptr [eax], 16h
.text:00419AE6                 mov     eax, 0FFFFFFFFh
.text:00419AEB                 add     esp, 0Ch
.text:00419AEE                 retn
.text:00419AEE sub_419AC0      endp
.text:00419AEE
.text:00419AEE ; ---------------------------------------------------------------------------
.text:00419AEF                 align 10h
.text:00419AF0
.text:00419AF0 ; =============== S U B R O U T I N E =======================================
.text:00419AF0
.text:00419AF0
.text:00419AF0 sub_419AF0      proc near               ; CODE XREF: sub_408250+6A↑p
.text:00419AF0
.text:00419AF0 arg_0           = dword ptr  4
.text:00419AF0
.text:00419AF0                 sub     esp, 0Ch
.text:00419AF3                 mov     edx, [esp+0Ch+arg_0]
.text:00419AF7                 test    edx, edx
.text:00419AF9                 js      short loc_419B01
.text:00419AFB                 xor     eax, eax
.text:00419AFD
.text:00419AFD loc_419AFD:                             ; CODE XREF: sub_419AF0+21↓j
.text:00419AFD                 add     esp, 0Ch
.text:00419B00                 retn
.text:00419B01 ; ---------------------------------------------------------------------------
.text:00419B01
.text:00419B01 loc_419B01:                             ; CODE XREF: sub_419AF0+9↑j
.text:00419B01                 call    _errno
.text:00419B06                 mov     dword ptr [eax], 16h
.text:00419B0C                 mov     eax, 0FFFFFFFFh
.text:00419B11                 jmp     short loc_419AFD
.text:00419B11 sub_419AF0      endp
.text:00419B11
.text:00419B11 ; ---------------------------------------------------------------------------
.text:00419B13                 align 10h
.text:00419B20
.text:00419B20 ; =============== S U B R O U T I N E =======================================
.text:00419B20
.text:00419B20
.text:00419B20 ; int __cdecl sub_419B20(void *)
.text:00419B20 sub_419B20      proc near               ; CODE XREF: sub_4096F0+268↑p
.text:00419B20                                         ; sub_40BF00+118↑p
.text:00419B20
.text:00419B20 Block           = dword ptr -0Ch
.text:00419B20 var_4           = dword ptr -4
.text:00419B20 arg_0           = dword ptr  4
.text:00419B20
.text:00419B20                 sub     esp, 0Ch
.text:00419B23                 mov     [esp+0Ch+var_4], ebx
.text:00419B27                 mov     ebx, [esp+0Ch+arg_0]
.text:00419B2B                 test    ebx, ebx
.text:00419B2D                 jz      short loc_419B6B
.text:00419B2F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:00419B32                 jz      short loc_419B59
.text:00419B34                 mov     [esp+0Ch+Block], ebx
.text:00419B37                 call    sub_41C2C0
.text:00419B3C                 mov     edx, [ebx+4]
.text:00419B3F                 mov     [esp+0Ch+Block], edx ; Block
.text:00419B42                 call    free
.text:00419B47                 mov     [esp+0Ch+Block], ebx ; Block
.text:00419B4A                 call    free
.text:00419B4F                 xor     eax, eax
.text:00419B51
.text:00419B51 loc_419B51:                             ; CODE XREF: sub_419B20+49↓j
.text:00419B51                 mov     ebx, [esp+0Ch+var_4]
.text:00419B55                 add     esp, 0Ch
.text:00419B58                 retn
.text:00419B59 ; ---------------------------------------------------------------------------
.text:00419B59
.text:00419B59 loc_419B59:                             ; CODE XREF: sub_419B20+12↑j
.text:00419B59                 call    _errno
.text:00419B5E                 mov     dword ptr [eax], 9
.text:00419B64
.text:00419B64 loc_419B64:                             ; CODE XREF: sub_419B20+56↓j
.text:00419B64                 mov     eax, 0FFFFFFFFh
.text:00419B69                 jmp     short loc_419B51
.text:00419B6B ; ---------------------------------------------------------------------------
.text:00419B6B
.text:00419B6B loc_419B6B:                             ; CODE XREF: sub_419B20+D↑j
.text:00419B6B                 call    _errno
.text:00419B70                 mov     dword ptr [eax], 16h
.text:00419B76                 jmp     short loc_419B64
.text:00419B76 sub_419B20      endp
.text:00419B76
.text:00419B76 ; ---------------------------------------------------------------------------
.text:00419B78                 align 10h
.text:00419B80 ; const char asc_419B80[2]
.text:00419B80 asc_419B80      db '\',0                ; DATA XREF: sub_419B90+D2↓o
.text:00419B82                 align 10h
.text:00419B90
.text:00419B90 ; =============== S U B R O U T I N E =======================================
.text:00419B90
.text:00419B90
.text:00419B90 ; int __cdecl sub_419B90(LPCSTR)
.text:00419B90 sub_419B90      proc near               ; CODE XREF: sub_4096F0+52↑p
.text:00419B90                                         ; sub_40BF00+1B↑p
.text:00419B90
.text:00419B90 lpFileName      = dword ptr -13Ch
.text:00419B90 Source          = dword ptr -138h
.text:00419B90 Destination     = byte ptr -12Ch
.text:00419B90 var_10          = dword ptr -10h
.text:00419B90 var_C           = dword ptr -0Ch
.text:00419B90 var_8           = dword ptr -8
.text:00419B90 var_4           = dword ptr -4
.text:00419B90 arg_0           = dword ptr  4
.text:00419B90
.text:00419B90                 sub     esp, 13Ch
.text:00419B96                 mov     [esp+13Ch+var_C], esi
.text:00419B9D                 mov     esi, [esp+13Ch+arg_0]
.text:00419BA4                 mov     [esp+13Ch+var_10], ebx
.text:00419BAB                 mov     [esp+13Ch+var_8], edi
.text:00419BB2                 test    esi, esi
.text:00419BB4                 mov     [esp+13Ch+var_4], ebp
.text:00419BBB                 jz      short loc_419BC2
.text:00419BBD                 cmp     byte ptr [esi], 0
.text:00419BC0                 jnz     short loc_419BF2
.text:00419BC2
.text:00419BC2 loc_419BC2:                             ; CODE XREF: sub_419B90+2B↑j
.text:00419BC2                 call    _errno
.text:00419BC7                 mov     dword ptr [eax], 2
.text:00419BCD
.text:00419BCD loc_419BCD:                             ; CODE XREF: sub_419B90+139↓j
.text:00419BCD                                         ; sub_419B90+14C↓j
.text:00419BCD                 xor     eax, eax
.text:00419BCF
.text:00419BCF loc_419BCF:                             ; CODE XREF: sub_419B90+90↓j
.text:00419BCF                                         ; sub_419B90+A4↓j ...
.text:00419BCF                 mov     ebx, [esp+13Ch+var_10]
.text:00419BD6                 mov     esi, [esp+13Ch+var_C]
.text:00419BDD                 mov     edi, [esp+13Ch+var_8]
.text:00419BE4                 mov     ebp, [esp+13Ch+var_4]
.text:00419BEB                 add     esp, 13Ch
.text:00419BF1                 retn
.text:00419BF2 ; ---------------------------------------------------------------------------
.text:00419BF2
.text:00419BF2 loc_419BF2:                             ; CODE XREF: sub_419B90+30↑j
.text:00419BF2                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:00419BF5                 call    GetFileAttributesA
.text:00419BFA                 sub     esp, 4
.text:00419BFD                 cmp     eax, 0FFFFFFFFh
.text:00419C00                 jz      loc_419CCE
.text:00419C06                 test    al, 10h
.text:00419C08                 jz      loc_419CBE
.text:00419C0E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:00419C15                 call    malloc
.text:00419C1A                 mov     ebx, eax
.text:00419C1C                 xor     eax, eax
.text:00419C1E                 test    ebx, ebx
.text:00419C20                 jz      short loc_419BCF
.text:00419C22                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:00419C29                 call    malloc
.text:00419C2E                 mov     edi, eax
.text:00419C30                 xor     eax, eax
.text:00419C32                 test    edi, edi
.text:00419C34                 jz      short loc_419BCF
.text:00419C36                 mov     [esp+13Ch+Source], esi ; Source
.text:00419C3A                 lea     ebp, [esp+13Ch+Destination]
.text:00419C3E                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00419C41                 call    strcpy
.text:00419C46                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00419C49                 call    strlen
.text:00419C4E                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:00419C52                 jz      short loc_419C80
.text:00419C54                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00419C57                 call    strlen
.text:00419C5C                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:00419C60                 jz      short loc_419C80
.text:00419C62                 mov     [esp+13Ch+Source], offset asc_419B80 ; "\\"
.text:00419C6A                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00419C6D                 call    strcat
.text:00419C72                 lea     esi, [esi+0]
.text:00419C79                 lea     edi, [edi+0]
.text:00419C80
.text:00419C80 loc_419C80:                             ; CODE XREF: sub_419B90+C2↑j
.text:00419C80                                         ; sub_419B90+D0↑j
.text:00419C80                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:00419C83                 call    sub_41A240
.text:00419C88                 mov     [esp+13Ch+lpFileName], eax
.text:00419C8B                 call    sub_417D50
.text:00419C90                 mov     [edi], eax
.text:00419C92                 mov     eax, ebx
.text:00419C94                 mov     [ebx+4], edi
.text:00419C97                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:00419C9D                 mov     dword ptr [ebx+8], 118h
.text:00419CA4                 mov     dword ptr [ebx+0Ch], 118h
.text:00419CAB                 mov     dword ptr [ebx+10h], 8
.text:00419CB2                 mov     dword ptr [ebx+14h], 1
.text:00419CB9                 jmp     loc_419BCF
.text:00419CBE ; ---------------------------------------------------------------------------
.text:00419CBE
.text:00419CBE loc_419CBE:                             ; CODE XREF: sub_419B90+78↑j
.text:00419CBE                 call    _errno
.text:00419CC3                 mov     dword ptr [eax], 14h
.text:00419CC9                 jmp     loc_419BCD
.text:00419CCE ; ---------------------------------------------------------------------------
.text:00419CCE
.text:00419CCE loc_419CCE:                             ; CODE XREF: sub_419B90+70↑j
.text:00419CCE                 call    sub_41A1F0
.text:00419CD3                 mov     esi, eax
.text:00419CD5                 call    _errno
.text:00419CDA                 mov     [eax], esi
.text:00419CDC                 jmp     loc_419BCD
.text:00419CDC sub_419B90      endp
.text:00419CDC
.text:00419CDC ; ---------------------------------------------------------------------------
.text:00419CE1                 align 10h
.text:00419CF0
.text:00419CF0 ; =============== S U B R O U T I N E =======================================
.text:00419CF0
.text:00419CF0
.text:00419CF0 sub_419CF0      proc near               ; CODE XREF: sub_409F70+5F↑p
.text:00419CF0
.text:00419CF0 FileHandle      = dword ptr -0Ch
.text:00419CF0 lpFileName      = dword ptr -8
.text:00419CF0 var_4           = dword ptr -4
.text:00419CF0 arg_0           = dword ptr  4
.text:00419CF0 arg_4           = dword ptr  8
.text:00419CF0
.text:00419CF0                 sub     esp, 0Ch
.text:00419CF3                 mov     edx, [esp+0Ch+arg_0]
.text:00419CF7                 mov     [esp+0Ch+FileHandle], edx ; FileHandle
.text:00419CFA                 call    _get_osfhandle
.text:00419CFF                 mov     [esp+0Ch+FileHandle], eax ; HANDLE
.text:00419D02                 mov     ecx, [esp+0Ch+arg_4]
.text:00419D06                 mov     [esp+0Ch+lpFileName], 0 ; lpFileName
.text:00419D0E                 mov     [esp+0Ch+var_4], ecx ; int
.text:00419D12                 call    sub_41BEA0
.text:00419D17                 add     esp, 0Ch
.text:00419D1A                 retn
.text:00419D1A sub_419CF0      endp
.text:00419D1A
.text:00419D1A ; ---------------------------------------------------------------------------
.text:00419D1B                 align 10h
.text:00419D20
.text:00419D20 ; =============== S U B R O U T I N E =======================================
.text:00419D20
.text:00419D20
.text:00419D20 sub_419D20      proc near               ; CODE XREF: sub_40A050+97↑p
.text:00419D20                                         ; sub_40A050+BF↑p ...
.text:00419D20
.text:00419D20 var_1C          = dword ptr -1Ch
.text:00419D20 var_18          = dword ptr -18h
.text:00419D20 var_14          = dword ptr -14h
.text:00419D20 arg_0           = dword ptr  4
.text:00419D20 arg_4           = dword ptr  8
.text:00419D20 arg_8           = dword ptr  0Ch
.text:00419D20
.text:00419D20                 push    edi
.text:00419D21                 push    esi
.text:00419D22                 push    ebx
.text:00419D23                 sub     esp, 10h
.text:00419D26                 mov     edi, [esp+1Ch+arg_8]
.text:00419D2A                 mov     esi, [esp+1Ch+arg_0]
.text:00419D2E                 mov     ebx, [esp+1Ch+arg_4]
.text:00419D32                 cmp     edi, 0Fh
.text:00419D35                 jbe     short loc_419D80
.text:00419D37                 mov     ecx, esi
.text:00419D39                 neg     ecx
.text:00419D3B                 and     ecx, 3
.text:00419D3E                 sub     edi, ecx
.text:00419D40                 mov     edx, ecx
.text:00419D42                 test    ecx, ecx
.text:00419D44                 jz      short loc_419D5A
.text:00419D46                 lea     esi, [esi+0]
.text:00419D49                 lea     edi, [edi+0]
.text:00419D50
.text:00419D50 loc_419D50:                             ; CODE XREF: sub_419D20+38↓j
.text:00419D50                 movzx   ecx, byte ptr [ebx]
.text:00419D53                 inc     ebx
.text:00419D54                 mov     [esi], cl
.text:00419D56                 inc     esi
.text:00419D57                 dec     edx
.text:00419D58                 jnz     short loc_419D50
.text:00419D5A
.text:00419D5A loc_419D5A:                             ; CODE XREF: sub_419D20+24↑j
.text:00419D5A                 test    bl, 3
.text:00419D5D                 jnz     short loc_419DA3
.text:00419D5F                 mov     [esp+1Ch+var_18], ebx
.text:00419D63                 mov     edx, edi
.text:00419D65                 shr     edx, 2
.text:00419D68                 mov     [esp+1Ch+var_14], edx
.text:00419D6C                 mov     [esp+1Ch+var_1C], esi
.text:00419D6F                 call    sub_41C320
.text:00419D74
.text:00419D74 loc_419D74:                             ; CODE XREF: sub_419D20+98↓j
.text:00419D74                 mov     edx, edi
.text:00419D76                 and     edx, 0FFFFFFFCh
.text:00419D79                 and     edi, 3
.text:00419D7C                 add     ebx, edx
.text:00419D7E                 add     esi, edx
.text:00419D80
.text:00419D80 loc_419D80:                             ; CODE XREF: sub_419D20+15↑j
.text:00419D80                 test    edi, edi
.text:00419D82                 mov     edx, edi
.text:00419D84                 jz      short loc_419D9A
.text:00419D86                 lea     esi, [esi+0]
.text:00419D89                 lea     edi, [edi+0]
.text:00419D90
.text:00419D90 loc_419D90:                             ; CODE XREF: sub_419D20+78↓j
.text:00419D90                 movzx   ecx, byte ptr [ebx]
.text:00419D93                 inc     ebx
.text:00419D94                 mov     [esi], cl
.text:00419D96                 inc     esi
.text:00419D97                 dec     edx
.text:00419D98                 jnz     short loc_419D90
.text:00419D9A
.text:00419D9A loc_419D9A:                             ; CODE XREF: sub_419D20+64↑j
.text:00419D9A                 add     esp, 10h
.text:00419D9D                 mov     eax, esi
.text:00419D9F                 pop     ebx
.text:00419DA0                 pop     esi
.text:00419DA1                 pop     edi
.text:00419DA2                 retn
.text:00419DA3 ; ---------------------------------------------------------------------------
.text:00419DA3
.text:00419DA3 loc_419DA3:                             ; CODE XREF: sub_419D20+3D↑j
.text:00419DA3                 mov     [esp+1Ch+var_18], ebx
.text:00419DA7                 mov     ecx, edi
.text:00419DA9                 shr     ecx, 2
.text:00419DAC                 mov     [esp+1Ch+var_14], ecx
.text:00419DB0                 mov     [esp+1Ch+var_1C], esi
.text:00419DB3                 call    sub_41C420
.text:00419DB8                 jmp     short loc_419D74
.text:00419DB8 sub_419D20      endp
.text:00419DB8
.text:00419DB8 ; ---------------------------------------------------------------------------
.text:00419DBA                 align 10h
.text:00419DC0
.text:00419DC0 ; =============== S U B R O U T I N E =======================================
.text:00419DC0
.text:00419DC0 ; Attributes: thunk
.text:00419DC0
.text:00419DC0 ; char *__cdecl j__getcwd(char *DstBuf, int SizeInBytes)
.text:00419DC0 j__getcwd       proc near               ; CODE XREF: sub_40E370+16↑p
.text:00419DC0
.text:00419DC0 DstBuf          = dword ptr  4
.text:00419DC0 SizeInBytes     = dword ptr  8
.text:00419DC0
.text:00419DC0                 jmp     _getcwd
.text:00419DC0 j__getcwd       endp
.text:00419DC0
.text:00419DC0 ; ---------------------------------------------------------------------------
.text:00419DC5                 align 10h
.text:00419DD0                 sub     esp, 0Ch
.text:00419DD3                 mov     [esp+4], ebx
.text:00419DD7                 mov     [esp+8], esi
.text:00419DDB                 xor     esi, esi
.text:00419DDD                 call    sub_4198B0
.text:00419DE2                 mov     ebx, eax
.text:00419DE4                 call    sub_41C7C0
.text:00419DE9                 cmp     ebx, eax
.text:00419DEB                 jz      short loc_419E04
.text:00419DED
.text:00419DED loc_419DED:                             ; CODE XREF: .text:00419E12↓j
.text:00419DED                 mov     esi, 1
.text:00419DF2
.text:00419DF2 loc_419DF2:                             ; CODE XREF: .text:00419E14↓j
.text:00419DF2                 mov     ds:dword_421A90, esi
.text:00419DF8                 mov     ebx, [esp+4]
.text:00419DFC                 mov     esi, [esp+8]
.text:00419E00                 add     esp, 0Ch
.text:00419E03                 retn
.text:00419E04 ; ---------------------------------------------------------------------------
.text:00419E04
.text:00419E04 loc_419E04:                             ; CODE XREF: .text:00419DEB↑j
.text:00419E04                 call    sub_419E80
.text:00419E09                 mov     ebx, eax
.text:00419E0B                 call    sub_41C7B0
.text:00419E10                 cmp     ebx, eax
.text:00419E12                 jnz     short loc_419DED
.text:00419E14                 jmp     short loc_419DF2
.text:00419E14 ; ---------------------------------------------------------------------------
.text:00419E16                 align 10h
.text:00419E20
.text:00419E20 ; =============== S U B R O U T I N E =======================================
.text:00419E20
.text:00419E20
.text:00419E20 sub_419E20      proc near               ; CODE XREF: sub_4154C0+99↑p
.text:00419E20
.text:00419E20 Size            = dword ptr -1Ch
.text:00419E20 var_18          = dword ptr -18h
.text:00419E20 arg_0           = dword ptr  4
.text:00419E20
.text:00419E20                 push    edi
.text:00419E21                 push    esi
.text:00419E22                 push    ebx
.text:00419E23                 sub     esp, 10h
.text:00419E26                 xor     ebx, ebx
.text:00419E28                 mov     edi, [esp+1Ch+arg_0]
.text:00419E2C                 lea     esi, [esi+0]
.text:00419E30
.text:00419E30 loc_419E30:                             ; CODE XREF: sub_419E20+38↓j
.text:00419E30                 lea     edx, ds:0[ebx*4]
.text:00419E37                 mov     [esp+1Ch+Size], edx ; Size
.text:00419E3A                 call    malloc
.text:00419E3F                 mov     [esp+1Ch+var_18], eax
.text:00419E43                 mov     esi, eax
.text:00419E45                 mov     [esp+1Ch+Size], ebx
.text:00419E48                 call    sub_41C7D0
.text:00419E4D                 lea     ecx, [ebx+ebx]
.text:00419E50                 mov     edx, eax
.text:00419E52                 mov     ebx, ecx
.text:00419E54                 sar     ecx, 1
.text:00419E56                 cmp     eax, ecx
.text:00419E58                 jz      short loc_419E30
.text:00419E5A                 test    eax, eax
.text:00419E5C                 js      short loc_419E6C
.text:00419E5E                 mov     esi, esi
.text:00419E60
.text:00419E60 loc_419E60:                             ; CODE XREF: sub_419E20+4A↓j
.text:00419E60                 mov     ecx, edx
.text:00419E62                 dec     edx
.text:00419E63                 cmp     [esi+ecx*4], edi
.text:00419E66                 jz      short loc_419E75
.text:00419E68                 test    edx, edx
.text:00419E6A                 jns     short loc_419E60
.text:00419E6C
.text:00419E6C loc_419E6C:                             ; CODE XREF: sub_419E20+3C↑j
.text:00419E6C                 xor     eax, eax
.text:00419E6E
.text:00419E6E loc_419E6E:                             ; CODE XREF: sub_419E20+5A↓j
.text:00419E6E                 add     esp, 10h
.text:00419E71                 pop     ebx
.text:00419E72                 pop     esi
.text:00419E73                 pop     edi
.text:00419E74                 retn
.text:00419E75 ; ---------------------------------------------------------------------------
.text:00419E75
.text:00419E75 loc_419E75:                             ; CODE XREF: sub_419E20+46↑j
.text:00419E75                 mov     eax, 1
.text:00419E7A                 jmp     short loc_419E6E
.text:00419E7A sub_419E20      endp
.text:00419E7A
.text:00419E7A ; ---------------------------------------------------------------------------
.text:00419E7C                 align 10h
.text:00419E80
.text:00419E80 ; =============== S U B R O U T I N E =======================================
.text:00419E80
.text:00419E80
.text:00419E80 sub_419E80      proc near               ; CODE XREF: sub_4154C0+FE↑p
.text:00419E80                                         ; .text:loc_419E04↑p
.text:00419E80                 xor     eax, eax
.text:00419E82                 retn
.text:00419E82 sub_419E80      endp
.text:00419E82
.text:00419E82 ; ---------------------------------------------------------------------------
.text:00419E83                 align 10h
.text:00419E90
.text:00419E90 ; =============== S U B R O U T I N E =======================================
.text:00419E90
.text:00419E90
.text:00419E90 ; int __cdecl sub_419E90(LPCSTR lpFileName, int)
.text:00419E90 sub_419E90      proc near               ; CODE XREF: sub_4154C0+26↑p
.text:00419E90                                         ; sub_417750-41D↑p ...
.text:00419E90
.text:00419E90 uMode           = dword ptr -1Ch
.text:00419E90 var_10          = dword ptr -10h
.text:00419E90 var_C           = dword ptr -0Ch
.text:00419E90 var_8           = dword ptr -8
.text:00419E90 var_4           = dword ptr -4
.text:00419E90 lpFileName      = dword ptr  4
.text:00419E90 arg_4           = dword ptr  8
.text:00419E90
.text:00419E90                 sub     esp, 1Ch
.text:00419E93                 mov     [esp+1Ch+var_10], ebx
.text:00419E97                 mov     ebx, [esp+1Ch+lpFileName]
.text:00419E9B                 mov     [esp+1Ch+var_4], ebp
.text:00419E9F                 xor     ebp, ebp
.text:00419EA1                 test    ebx, ebx
.text:00419EA3                 mov     [esp+1Ch+var_C], esi
.text:00419EA7                 mov     esi, [esp+1Ch+arg_4]
.text:00419EAB                 mov     [esp+1Ch+var_8], edi
.text:00419EAF                 jz      short loc_419EB9
.text:00419EB1                 test    esi, 0FFFFFFE8h
.text:00419EB7                 jz      short loc_419EE0
.text:00419EB9
.text:00419EB9 loc_419EB9:                             ; CODE XREF: sub_419E90+1F↑j
.text:00419EB9                 call    _errno
.text:00419EBE                 mov     dword ptr [eax], 16h
.text:00419EC4
.text:00419EC4 loc_419EC4:                             ; CODE XREF: sub_419E90+B1↓j
.text:00419EC4                 mov     eax, 0FFFFFFFFh
.text:00419EC9
.text:00419EC9 loc_419EC9:                             ; CODE XREF: sub_419E90+86↓j
.text:00419EC9                                         ; sub_419E90+A4↓j
.text:00419EC9                 mov     ebx, [esp+1Ch+var_10]
.text:00419ECD                 mov     esi, [esp+1Ch+var_C]
.text:00419ED1                 mov     edi, [esp+1Ch+var_8]
.text:00419ED5                 mov     ebp, [esp+1Ch+var_4]
.text:00419ED9                 add     esp, 1Ch
.text:00419EDC                 retn
.text:00419EDC ; ---------------------------------------------------------------------------
.text:00419EDD                 align 10h
.text:00419EE0
.text:00419EE0 loc_419EE0:                             ; CODE XREF: sub_419E90+27↑j
.text:00419EE0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00419EE7                 call    SetErrorMode
.text:00419EEC                 sub     esp, 4
.text:00419EEF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00419EF2                 call    GetFileAttributesA
.text:00419EF7                 sub     esp, 4
.text:00419EFA                 mov     edi, eax
.text:00419EFC                 cmp     eax, 0FFFFFFFFh
.text:00419EFF                 jz      short loc_419F43
.text:00419F01
.text:00419F01 loc_419F01:                             ; CODE XREF: sub_419E90+C6↓j
.text:00419F01                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00419F08                 call    SetErrorMode
.text:00419F0D                 sub     esp, 4
.text:00419F10                 mov     eax, 0FFFFFFFFh
.text:00419F15                 inc     ebp
.text:00419F16                 jz      short loc_419EC9
.text:00419F18                 test    esi, 10h
.text:00419F1E                 jz      short loc_419F28
.text:00419F20                 test    edi, 10h
.text:00419F26                 jz      short loc_419F36
.text:00419F28
.text:00419F28 loc_419F28:                             ; CODE XREF: sub_419E90+8E↑j
.text:00419F28                 and     esi, 2
.text:00419F2B                 jz      short loc_419F32
.text:00419F2D                 and     edi, 1
.text:00419F30                 jnz     short loc_419F36
.text:00419F32
.text:00419F32 loc_419F32:                             ; CODE XREF: sub_419E90+9B↑j
.text:00419F32                 xor     eax, eax
.text:00419F34                 jmp     short loc_419EC9
.text:00419F36 ; ---------------------------------------------------------------------------
.text:00419F36
.text:00419F36 loc_419F36:                             ; CODE XREF: sub_419E90+96↑j
.text:00419F36                                         ; sub_419E90+A0↑j
.text:00419F36                 call    _errno
.text:00419F3B                 mov     dword ptr [eax], 0Dh
.text:00419F41                 jmp     short loc_419EC4
.text:00419F43 ; ---------------------------------------------------------------------------
.text:00419F43
.text:00419F43 loc_419F43:                             ; CODE XREF: sub_419E90+6F↑j
.text:00419F43                 call    sub_41A1F0
.text:00419F48                 mov     ebp, eax
.text:00419F4A                 call    _errno
.text:00419F4F                 mov     [eax], ebp
.text:00419F51                 mov     ebp, 0FFFFFFFFh
.text:00419F56                 jmp     short loc_419F01
.text:00419F56 sub_419E90      endp
.text:00419F56
.text:00419F56 ; ---------------------------------------------------------------------------
.text:00419F58                 align 10h
.text:00419F60
.text:00419F60 ; =============== S U B R O U T I N E =======================================
.text:00419F60
.text:00419F60 ; Attributes: info_from_lumina
.text:00419F60
.text:00419F60 ___get_errno    proc near               ; CODE XREF: sub_41A1F0+B↓p
.text:00419F60
.text:00419F60 arg_0           = dword ptr  4
.text:00419F60
.text:00419F60                 mov     eax, [esp+arg_0]
.text:00419F64                 cmp     eax, 53h ; 'S'
.text:00419F67                 jg      loc_41A060
.text:00419F6D                 cmp     eax, 52h ; 'R'
.text:00419F70                 jge     short loc_419FC2
.text:00419F72                 cmp     eax, 0Fh
.text:00419F75                 jz      short loc_419F90
.text:00419F77                 cmp     eax, 0Fh
.text:00419F7A                 jg      short loc_419FF0
.text:00419F7C                 cmp     eax, 9
.text:00419F7F                 jg      short loc_419FD0
.text:00419F81                 cmp     eax, 7
.text:00419F84                 jge     short loc_419FC9
.text:00419F86                 cmp     eax, 3
.text:00419F89                 jg      short loc_419FAA
.text:00419F8B                 cmp     eax, 2
.text:00419F8E                 jl      short loc_419FA3
.text:00419F90
.text:00419F90 loc_419F90:                             ; CODE XREF: ___get_errno+15↑j
.text:00419F90                                         ; ___get_errno+9D↓j ...
.text:00419F90                 mov     edx, 2
.text:00419F95                 lea     esi, [esi+0]
.text:00419F99                 lea     edi, [edi+0]
.text:00419FA0
.text:00419FA0 loc_419FA0:                             ; CODE XREF: ___get_errno+48↓j
.text:00419FA0                                         ; ___get_errno+59↓j ...
.text:00419FA0                 mov     eax, edx
.text:00419FA2                 retn
.text:00419FA3 ; ---------------------------------------------------------------------------
.text:00419FA3
.text:00419FA3 loc_419FA3:                             ; CODE XREF: ___get_errno+2E↑j
.text:00419FA3                                         ; ___get_errno+78↓j ...
.text:00419FA3                 mov     edx, 16h
.text:00419FA8                 jmp     short loc_419FA0
.text:00419FAA ; ---------------------------------------------------------------------------
.text:00419FAA
.text:00419FAA loc_419FAA:                             ; CODE XREF: ___get_errno+29↑j
.text:00419FAA                 cmp     eax, 5
.text:00419FAD                 jz      short loc_419FC2
.text:00419FAF                 cmp     eax, 5
.text:00419FB2                 jg      short loc_419FBB
.text:00419FB4                 mov     edx, 18h
.text:00419FB9                 jmp     short loc_419FA0
.text:00419FBB ; ---------------------------------------------------------------------------
.text:00419FBB
.text:00419FBB loc_419FBB:                             ; CODE XREF: ___get_errno+52↑j
.text:00419FBB                                         ; ___get_errno+180↓j
.text:00419FBB                 mov     edx, 9
.text:00419FC0                 jmp     short loc_419FA0
.text:00419FC2 ; ---------------------------------------------------------------------------
.text:00419FC2
.text:00419FC2 loc_419FC2:                             ; CODE XREF: ___get_errno+10↑j
.text:00419FC2                                         ; ___get_errno+4D↑j ...
.text:00419FC2                 mov     edx, 0Dh
.text:00419FC7                 jmp     short loc_419FA0
.text:00419FC9 ; ---------------------------------------------------------------------------
.text:00419FC9
.text:00419FC9 loc_419FC9:                             ; CODE XREF: ___get_errno+24↑j
.text:00419FC9                                         ; ___get_errno+73↓j ...
.text:00419FC9                 mov     edx, 0Ch
.text:00419FCE                 jmp     short loc_419FA0
.text:00419FD0 ; ---------------------------------------------------------------------------
.text:00419FD0
.text:00419FD0 loc_419FD0:                             ; CODE XREF: ___get_errno+1F↑j
.text:00419FD0                 cmp     eax, 0Dh
.text:00419FD3                 jg      short loc_419FC9
.text:00419FD5                 cmp     eax, 0Ch
.text:00419FD8                 jge     short loc_419FA3
.text:00419FDA                 cmp     eax, 0Ah
.text:00419FDD                 mov     edx, 7
.text:00419FE2                 jz      short loc_419FA0
.text:00419FE4                 cmp     eax, 0Bh
.text:00419FE7                 jnz     short loc_419FA3
.text:00419FE9
.text:00419FE9 loc_419FE9:                             ; CODE XREF: ___get_errno+21A↓j
.text:00419FE9                 mov     edx, 8
.text:00419FEE                 jmp     short loc_419FA0
.text:00419FF0 ; ---------------------------------------------------------------------------
.text:00419FF0
.text:00419FF0 loc_419FF0:                             ; CODE XREF: ___get_errno+1A↑j
.text:00419FF0                 cmp     eax, 22h ; '"'
.text:00419FF3                 jg      short loc_41A024
.text:00419FF5                 cmp     eax, 16h
.text:00419FF8                 jge     short loc_419FC2
.text:00419FFA                 cmp     eax, 12h
.text:00419FFD                 jz      short loc_419F90
.text:00419FFF                 cmp     eax, 12h
.text:0041A002                 jg      short loc_41A015
.text:0041A004                 cmp     eax, 10h
.text:0041A007                 jz      short loc_419FC2
.text:0041A009                 mov     edx, 12h
.text:0041A00E                 cmp     eax, 11h
.text:0041A011
.text:0041A011 loc_41A011:                             ; CODE XREF: ___get_errno+172↓j
.text:0041A011                                         ; ___get_errno+24C↓j ...
.text:0041A011                 jnz     short loc_419FA3
.text:0041A013                 jmp     short loc_419FA0
.text:0041A015 ; ---------------------------------------------------------------------------
.text:0041A015
.text:0041A015 loc_41A015:                             ; CODE XREF: ___get_errno+A2↑j
.text:0041A015                 cmp     eax, 14h
.text:0041A018                 jle     short loc_419FC2
.text:0041A01A
.text:0041A01A loc_41A01A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0041A01A                 mov     edx, 10h
.text:0041A01F                 jmp     loc_419FA0
.text:0041A024 ; ---------------------------------------------------------------------------
.text:0041A024
.text:0041A024 loc_41A024:                             ; CODE XREF: ___get_errno+93↑j
.text:0041A024                 cmp     eax, 41h ; 'A'
.text:0041A027                 jz      short loc_419FC2
.text:0041A029                 cmp     eax, 41h ; 'A'
.text:0041A02C                 jg      short loc_41A041
.text:0041A02E                 cmp     eax, 24h ; '$'
.text:0041A031                 jz      short loc_419FC2
.text:0041A033                 cmp     eax, 35h ; '5'
.text:0041A036                 jnz     loc_419FA3
.text:0041A03C                 jmp     loc_419F90
.text:0041A041 ; ---------------------------------------------------------------------------
.text:0041A041
.text:0041A041 loc_41A041:                             ; CODE XREF: ___get_errno+CC↑j
.text:0041A041                 cmp     eax, 43h ; 'C'
.text:0041A044                 jz      loc_419F90
.text:0041A04A                 cmp     eax, 50h ; 'P'
.text:0041A04D                 jnz     loc_419FA3
.text:0041A053
.text:0041A053 loc_41A053:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0041A053                 mov     edx, 11h
.text:0041A058                 jmp     loc_419FA0
.text:0041A058 ; ---------------------------------------------------------------------------
.text:0041A05D                 align 10h
.text:0041A060
.text:0041A060 loc_41A060:                             ; CODE XREF: ___get_errno+7↑j
.text:0041A060                 cmp     eax, 0A1h ; '¡'
.text:0041A065                 jz      loc_419F90
.text:0041A06B                 cmp     eax, 0A1h ; '¡'
.text:0041A070                 jg      loc_41A120
.text:0041A076                 cmp     eax, 81h
.text:0041A07B                 jg      short loc_41A0E5
.text:0041A07D                 cmp     eax, 80h ; '€'
.text:0041A082                 mov     edx, 0Ah
.text:0041A087                 jge     loc_419FA0
.text:0041A08D                 cmp     eax, 6Ch ; 'l'
.text:0041A090                 jz      loc_419FC2
.text:0041A096                 cmp     eax, 6Ch ; 'l'
.text:0041A099                 jg      short loc_41A0B7
.text:0041A09B                 cmp     eax, 57h ; 'W'
.text:0041A09E                 jz      loc_419FA3
.text:0041A0A4                 cmp     eax, 59h ; 'Y'
.text:0041A0A7                 jnz     loc_419FA3
.text:0041A0AD
.text:0041A0AD loc_41A0AD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0041A0AD                                         ; ___get_errno+23C↓j
.text:0041A0AD                 mov     edx, 0Bh
.text:0041A0B2                 jmp     loc_419FA0
.text:0041A0B7 ; ---------------------------------------------------------------------------
.text:0041A0B7
.text:0041A0B7 loc_41A0B7:                             ; CODE XREF: ___get_errno+139↑j
.text:0041A0B7                 cmp     eax, 70h ; 'p'
.text:0041A0BA                 mov     edx, 1Ch
.text:0041A0BF                 jz      loc_419FA0
.text:0041A0C5                 cmp     eax, 70h ; 'p'
.text:0041A0C8                 jg      short loc_41A0D7
.text:0041A0CA                 mov     edx, 20h ; ' '
.text:0041A0CF                 cmp     eax, 6Dh ; 'm'
.text:0041A0D2                 jmp     loc_41A011
.text:0041A0D7 ; ---------------------------------------------------------------------------
.text:0041A0D7
.text:0041A0D7 loc_41A0D7:                             ; CODE XREF: ___get_errno+168↑j
.text:0041A0D7                 cmp     eax, 72h ; 'r'
.text:0041A0DA
.text:0041A0DA loc_41A0DA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0041A0DA                 jnz     loc_419FA3
.text:0041A0E0                 jmp     loc_419FBB
.text:0041A0E5 ; ---------------------------------------------------------------------------
.text:0041A0E5
.text:0041A0E5 loc_41A0E5:                             ; CODE XREF: ___get_errno+11B↑j
.text:0041A0E5                 cmp     eax, 84h ; '„'
.text:0041A0EA                 jz      loc_419FC2
.text:0041A0F0                 cmp     eax, 84h ; '„'
.text:0041A0F5                 jg      short loc_41A0FE
.text:0041A0F7                 cmp     eax, 82h ; '‚'
.text:0041A0FC                 jmp     short loc_41A0DA
.text:0041A0FE ; ---------------------------------------------------------------------------
.text:0041A0FE
.text:0041A0FE loc_41A0FE:                             ; CODE XREF: ___get_errno+195↑j
.text:0041A0FE                 cmp     eax, 91h ; '‘'
.text:0041A103                 mov     edx, 29h ; ')'
.text:0041A108                 jz      loc_419FA0
.text:0041A10E                 cmp     eax, 9Eh ; 'ž'
.text:0041A113
.text:0041A113 loc_41A113:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0041A113                 jnz     loc_419FA3
.text:0041A119                 jmp     loc_419FC2
.text:0041A119 ; ---------------------------------------------------------------------------
.text:0041A11E                 align 10h
.text:0041A120
.text:0041A120 loc_41A120:                             ; CODE XREF: ___get_errno+110↑j
.text:0041A120                 cmp     eax, 0CEh ; 'Î'
.text:0041A125                 jz      loc_419F90
.text:0041A12B                 cmp     eax, 0CEh ; 'Î'
.text:0041A130                 jg      short loc_41A180
.text:0041A132                 cmp     eax, 0AAh ; 'ª'
.text:0041A137                 jz      loc_41A01A
.text:0041A13D                 cmp     eax, 0AAh ; 'ª'
.text:0041A142                 jg      short loc_41A156
.text:0041A144                 cmp     eax, 0A4h ; '¤'
.text:0041A149                 jz      loc_41A0AD
.text:0041A14F                 cmp     eax, 0A7h ; '§'
.text:0041A154                 jmp     short loc_41A113
.text:0041A156 ; ---------------------------------------------------------------------------
.text:0041A156
.text:0041A156 loc_41A156:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0041A156                 cmp     eax, 0B7h ; '·'
.text:0041A15B                 jz      loc_41A053
.text:0041A161                 cmp     eax, 0B7h ; '·'
.text:0041A166                 jl      loc_419FA3
.text:0041A16C                 sub     eax, 0BCh ; '¼'
.text:0041A171                 cmp     eax, 0Eh
.text:0041A174                 ja      loc_419FA3
.text:0041A17A                 jmp     loc_419FE9
.text:0041A17A ; ---------------------------------------------------------------------------
.text:0041A17F                 align 10h
.text:0041A180
.text:0041A180 loc_41A180:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0041A180                 cmp     eax, 46Bh
.text:0041A185                 mov     edx, 24h ; '$'
.text:0041A18A                 jz      loc_419FA0
.text:0041A190                 cmp     eax, 46Bh
.text:0041A195                 jg      short loc_41A1B1
.text:0041A197                 cmp     eax, 0D7h ; '×'
.text:0041A19C                 jz      loc_41A0AD
.text:0041A1A2                 mov     edx, 5
.text:0041A1A7                 cmp     eax, 45Dh
.text:0041A1AC                 jmp     loc_41A011
.text:0041A1B1 ; ---------------------------------------------------------------------------
.text:0041A1B1
.text:0041A1B1 loc_41A1B1:                             ; CODE XREF: ___get_errno+235↑j
.text:0041A1B1                 cmp     eax, 4D5h
.text:0041A1B6                 mov     edx, 4
.text:0041A1BB                 jz      loc_419FA0
.text:0041A1C1                 cmp     eax, 4D5h
.text:0041A1C6                 jg      short loc_41A1D7
.text:0041A1C8                 mov     edx, 13h
.text:0041A1CD                 cmp     eax, 4B0h
.text:0041A1D2                 jmp     loc_41A011
.text:0041A1D7 ; ---------------------------------------------------------------------------
.text:0041A1D7
.text:0041A1D7 loc_41A1D7:                             ; CODE XREF: ___get_errno+266↑j
.text:0041A1D7                 cmp     eax, 718h
.text:0041A1DC                 jnz     loc_419FA3
.text:0041A1E2                 jmp     loc_419FC9
.text:0041A1E2 ___get_errno    endp
.text:0041A1E2
.text:0041A1E2 ; ---------------------------------------------------------------------------
.text:0041A1E7                 align 10h
.text:0041A1F0
.text:0041A1F0 ; =============== S U B R O U T I N E =======================================
.text:0041A1F0
.text:0041A1F0
.text:0041A1F0 sub_41A1F0      proc near               ; CODE XREF: sub_417750:loc_4173ED↑p
.text:0041A1F0                                         ; sub_417420+1A2↑p ...
.text:0041A1F0
.text:0041A1F0 var_C           = dword ptr -0Ch
.text:0041A1F0
.text:0041A1F0                 sub     esp, 0Ch
.text:0041A1F3                 call    GetLastError
.text:0041A1F8                 mov     [esp+0Ch+var_C], eax
.text:0041A1FB                 call    ___get_errno
.text:0041A200                 add     esp, 0Ch
.text:0041A203                 retn
.text:0041A203 sub_41A1F0      endp
.text:0041A203
.text:0041A203 ; ---------------------------------------------------------------------------
.text:0041A204                 align 10h
.text:0041A210
.text:0041A210 ; =============== S U B R O U T I N E =======================================
.text:0041A210
.text:0041A210
.text:0041A210 sub_41A210      proc near               ; CODE XREF: .text:00417DE3↑p
.text:0041A210                                         ; .text:00417E33↑p
.text:0041A210
.text:0041A210 arg_4           = dword ptr  8
.text:0041A210
.text:0041A210                 sub     esp, 0Ch
.text:0041A213                 mov     edx, [esp+0Ch+arg_4]
.text:0041A217                 test    edx, edx
.text:0041A219                 jz      short loc_41A220
.text:0041A21B                 add     esp, 0Ch
.text:0041A21E                 jmp     short sub_41A260
.text:0041A220 ; ---------------------------------------------------------------------------
.text:0041A220
.text:0041A220 loc_41A220:                             ; CODE XREF: sub_41A210+9↑j
.text:0041A220                 call    _errno
.text:0041A225                 mov     dword ptr [eax], 16h
.text:0041A22B                 xor     eax, eax
.text:0041A22D                 add     esp, 0Ch
.text:0041A230                 retn
.text:0041A230 sub_41A210      endp
.text:0041A230
.text:0041A231 ; ---------------------------------------------------------------------------
.text:0041A231                 jmp     short sub_41A240
.text:0041A231 ; ---------------------------------------------------------------------------
.text:0041A233                 align 10h
.text:0041A240
.text:0041A240 ; =============== S U B R O U T I N E =======================================
.text:0041A240
.text:0041A240
.text:0041A240 ; int __cdecl sub_41A240(LPCSTR)
.text:0041A240 sub_41A240      proc near               ; CODE XREF: sub_417750-40C↑p
.text:0041A240                                         ; sub_417420+74↑p ...
.text:0041A240
.text:0041A240 lpFileName      = dword ptr -0Ch
.text:0041A240 Destination     = dword ptr -8
.text:0041A240 arg_0           = dword ptr  4
.text:0041A240
.text:0041A240                 sub     esp, 0Ch
.text:0041A243                 mov     edx, [esp+0Ch+arg_0]
.text:0041A247                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0041A24F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0041A252                 call    sub_41A260
.text:0041A257                 add     esp, 0Ch
.text:0041A25A                 retn
.text:0041A25A sub_41A240      endp
.text:0041A25A
.text:0041A25A ; ---------------------------------------------------------------------------
.text:0041A25B                 align 10h
.text:0041A260
.text:0041A260 ; =============== S U B R O U T I N E =======================================
.text:0041A260
.text:0041A260
.text:0041A260 ; int __cdecl sub_41A260(LPCSTR lpFileName, char *Destination)
.text:0041A260 sub_41A260      proc near               ; CODE XREF: sub_41A210+E↑j
.text:0041A260                                         ; sub_41A240+12↑p
.text:0041A260
.text:0041A260 Size            = dword ptr -2Ch
.text:0041A260 nBufferLength   = dword ptr -28h
.text:0041A260 lpBuffer        = dword ptr -24h
.text:0041A260 lpFilePart      = dword ptr -20h
.text:0041A260 FilePart        = dword ptr -14h
.text:0041A260 lpFileName      = dword ptr  4
.text:0041A260 Destination     = dword ptr  8
.text:0041A260
.text:0041A260                 push    ebp
.text:0041A261                 push    edi
.text:0041A262                 push    esi
.text:0041A263                 push    ebx
.text:0041A264                 sub     esp, 1Ch
.text:0041A267                 mov     edi, [esp+2Ch+lpFileName]
.text:0041A26B                 mov     ebp, [esp+2Ch+Destination]
.text:0041A26F                 test    edi, edi
.text:0041A271                 jz      loc_41A379
.text:0041A277                 cmp     byte ptr [edi], 0
.text:0041A27A                 jz      loc_41A36C
.text:0041A280                 mov     [esp+2Ch+Size], 104h ; Size
.text:0041A287                 call    malloc
.text:0041A28C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041A290                 lea     edx, [esp+2Ch+FilePart]
.text:0041A294                 mov     ebx, eax
.text:0041A296                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041A29A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0041A2A2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041A2A5                 call    GetFullPathNameA
.text:0041A2AA                 sub     esp, 10h
.text:0041A2AD                 mov     esi, eax
.text:0041A2AF                 test    eax, eax
.text:0041A2B1                 jz      loc_41A35A
.text:0041A2B7                 cmp     eax, 104h
.text:0041A2BC                 jle     short loc_41A2CD
.text:0041A2BE                 test    ebp, ebp
.text:0041A2C0                 jz      short loc_41A329
.text:0041A2C2                 call    _errno
.text:0041A2C7                 mov     dword ptr [eax], 26h ; '&'
.text:0041A2CD
.text:0041A2CD loc_41A2CD:                             ; CODE XREF: sub_41A260+5C↑j
.text:0041A2CD                                         ; sub_41A260+F5↓j
.text:0041A2CD                 call    _errno
.text:0041A2D2                 mov     edi, [eax]
.text:0041A2D4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0041A2DC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0041A2DF                 call    sub_419E90
.text:0041A2E4                 test    eax, eax
.text:0041A2E6                 jnz     short loc_41A300
.text:0041A2E8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0041A2ED                 cmp     al, 2Fh ; '/'
.text:0041A2EF                 jz      short loc_41A300
.text:0041A2F1                 cmp     al, 5Ch ; '\'
.text:0041A2F3                 jz      short loc_41A300
.text:0041A2F5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0041A2F9                 mov     byte ptr [esi+ebx+1], 0
.text:0041A2FE                 mov     esi, esi
.text:0041A300
.text:0041A300 loc_41A300:                             ; CODE XREF: sub_41A260+86↑j
.text:0041A300                                         ; sub_41A260+8F↑j ...
.text:0041A300                 call    _errno
.text:0041A305                 mov     [eax], edi
.text:0041A307                 mov     [esp+2Ch+Size], ebx
.text:0041A30A                 call    sub_417CD0
.text:0041A30F                 test    ebp, ebp
.text:0041A311                 mov     eax, ebx
.text:0041A313                 jz      short loc_41A321
.text:0041A315                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0041A319                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0041A31C                 call    strcpy
.text:0041A321
.text:0041A321 loc_41A321:                             ; CODE XREF: sub_41A260+B3↑j
.text:0041A321                                         ; sub_41A260+10A↓j
.text:0041A321                 add     esp, 1Ch
.text:0041A324                 pop     ebx
.text:0041A325                 pop     esi
.text:0041A326                 pop     edi
.text:0041A327                 pop     ebp
.text:0041A328                 retn
.text:0041A329 ; ---------------------------------------------------------------------------
.text:0041A329
.text:0041A329 loc_41A329:                             ; CODE XREF: sub_41A260+60↑j
.text:0041A329                 mov     [esp+2Ch+Size], ebx ; Block
.text:0041A32C                 lea     ecx, [eax+2]
.text:0041A32F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0041A333                 call    realloc
.text:0041A338                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041A33C                 lea     edx, [esp+2Ch+FilePart]
.text:0041A340                 mov     ebx, eax
.text:0041A342                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041A346                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0041A34A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041A34D                 call    GetFullPathNameA
.text:0041A352                 sub     esp, 10h
.text:0041A355                 jmp     loc_41A2CD
.text:0041A35A ; ---------------------------------------------------------------------------
.text:0041A35A
.text:0041A35A loc_41A35A:                             ; CODE XREF: sub_41A260+51↑j
.text:0041A35A                 call    sub_41A1F0
.text:0041A35F                 mov     esi, eax
.text:0041A361                 call    _errno
.text:0041A366                 mov     [eax], esi
.text:0041A368
.text:0041A368 loc_41A368:                             ; CODE XREF: sub_41A260+117↓j
.text:0041A368                                         ; sub_41A260+124↓j
.text:0041A368                 xor     eax, eax
.text:0041A36A                 jmp     short loc_41A321
.text:0041A36C ; ---------------------------------------------------------------------------
.text:0041A36C
.text:0041A36C loc_41A36C:                             ; CODE XREF: sub_41A260+1A↑j
.text:0041A36C                 call    _errno
.text:0041A371                 mov     dword ptr [eax], 2
.text:0041A377                 jmp     short loc_41A368
.text:0041A379 ; ---------------------------------------------------------------------------
.text:0041A379
.text:0041A379 loc_41A379:                             ; CODE XREF: sub_41A260+11↑j
.text:0041A379                 call    _errno
.text:0041A37E                 mov     dword ptr [eax], 16h
.text:0041A384                 jmp     short loc_41A368
.text:0041A384 sub_41A260      endp
.text:0041A384
.text:0041A384 ; ---------------------------------------------------------------------------
.text:0041A386                 align 10h
.text:0041A390 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041A5AF↓o
.text:0041A39C aLu             db '%lu',0              ; DATA XREF: .text:0041A5BF↓o
.text:0041A3A0 asc_41A3A0      db ' ',0                ; DATA XREF: .text:loc_41A6A8↓o
.text:0041A3A2                 align 10h
.text:0041A3B0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0041A3B0                                         ; DATA XREF: .text:0041A6DF↓o
.text:0041A3D0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_41A6ED↓o
.text:0041A3DC aServer         db ' Server',0          ; DATA XREF: .text:0041A716↓o
.text:0041A3DC                                         ; .text:loc_41A88E↓o
.text:0041A3E4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_41A728↓o
.text:0041A3F5 aDatacenterServ db ' Datacenter Server',0
.text:0041A3F5                                         ; DATA XREF: .text:loc_41A732↓o
.text:0041A408 aStandardEditio db ' Standard Edition',0
.text:0041A408                                         ; DATA XREF: .text:0041A75A↓o
.text:0041A41A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_41A764↓o
.text:0041A427 aEnterpriseEdit db ' Enterprise Edition',0
.text:0041A427                                         ; DATA XREF: .text:loc_41A76E↓o
.text:0041A43B aDatacenterEdit db ' Datacenter Edition',0
.text:0041A43B                                         ; DATA XREF: .text:loc_41A778↓o
.text:0041A44F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0041A78B↓o
.text:0041A45D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_41A795↓o
.text:0041A45D                                         ; .text:loc_41A8A0↓o
.text:0041A46B                 align 10h
.text:0041A470 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0041A470                                         ; DATA XREF: .text:0041A7C2↓o
.text:0041A4A0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0041A809↓o
.text:0041A4AC aWinnt          db 'WINNT',0            ; DATA XREF: .text:0041A844↓o
.text:0041A4B2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0041A85B↓o
.text:0041A4BB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0041A872↓o
.text:0041A4C4                 align 10h
.text:0041A4D0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0041A4D0                                         ; DATA XREF: .text:0041A9E7↓o
.text:0041A4F3                 db 1Dh dup(90h)
.text:0041A510 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0041A510                                         ; DATA XREF: .text:0041AA46↓o
.text:0041A536 ; ---------------------------------------------------------------------------
.text:0041A536
.text:0041A536 loc_41A536:                             ; DATA XREF: .text:loc_41AAB1↓o
.text:0041A536                 and     [ebx+45h], dl
.text:0041A539                 add     [eax], ah
.text:0041A53B                 push    ebx
.text:0041A53C                 push    eax
.text:0041A53D                 xor     [eax], eax
.text:0041A53F
.text:0041A53F loc_41A53F:                             ; DATA XREF: .text:loc_41AB2B↓o
.text:0041A53F                 and     [edi+53h], cl
.text:0041A542                 push    edx
.text:0041A543                 xor     al, [eax]
.text:0041A545                 lea     esi, [esi+0]
.text:0041A549                 lea     edi, [edi+0]
.text:0041A550                 push    edi
.text:0041A551                 push    esi
.text:0041A552                 push    ebx
.text:0041A553                 sub     esp, 130h
.text:0041A559                 mov     ebx, [esp+140h]
.text:0041A560                 call    sub_41AC60
.text:0041A565                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041A56A                 cmp     eax, 1
.text:0041A56D                 jz      loc_41AA10
.text:0041A573                 cmp     eax, 1
.text:0041A576                 jb      loc_41A9E6
.text:0041A57C                 cmp     eax, 2
.text:0041A57F                 jz      loc_41A630
.text:0041A585                 cmp     eax, 3
.text:0041A588                 jz      short loc_41A5EF
.text:0041A58A                 lea     esi, [esi+0]
.text:0041A590
.text:0041A590 loc_41A590:                             ; CODE XREF: .text:0041A625↓j
.text:0041A590                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041A596                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041A59C
.text:0041A59C loc_41A59C:                             ; CODE XREF: .text:0041AA2F↓j
.text:0041A59C                 mov     [esp+10h], edx
.text:0041A5A0                 mov     ebx, [esp+144h]
.text:0041A5A7                 mov     [esp+0Ch], ecx
.text:0041A5AB                 mov     [esp+8], eax
.text:0041A5AF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0041A5B7                 mov     [esp], ebx
.text:0041A5BA                 call    sprintf
.text:0041A5BF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0041A5C7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041A5CD                 mov     ecx, [esp+148h]
.text:0041A5D4                 mov     [esp+8], edi
.text:0041A5D8                 mov     [esp], ecx
.text:0041A5DB                 call    sprintf
.text:0041A5E0                 mov     eax, 1
.text:0041A5E5
.text:0041A5E5 loc_41A5E5:                             ; CODE XREF: .text:0041A7DF↓j
.text:0041A5E5                                         ; .text:0041A82C↓j
.text:0041A5E5                 add     esp, 130h
.text:0041A5EB                 pop     ebx
.text:0041A5EC                 pop     esi
.text:0041A5ED                 pop     edi
.text:0041A5EE                 retn
.text:0041A5EF ; ---------------------------------------------------------------------------
.text:0041A5EF
.text:0041A5EF loc_41A5EF:                             ; CODE XREF: .text:0041A588↑j
.text:0041A5EF                 mov     dword ptr [ebx], 7263694Dh
.text:0041A5F5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041A5FC                 mov     dword ptr [ebx+8], 69572074h
.text:0041A603                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041A60A                 mov     dword ptr [ebx+10h], 45432073h
.text:0041A611                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0041A617                 mov     esi, esi
.text:0041A619                 lea     edi, [edi+0]
.text:0041A620
.text:0041A620 loc_41A620:                             ; CODE XREF: .text:0041A6C8↓j
.text:0041A620                                         ; .text:0041AA09↓j ...
.text:0041A620                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041A625                 jmp     loc_41A590
.text:0041A625 ; ---------------------------------------------------------------------------
.text:0041A62A                 align 10h
.text:0041A630
.text:0041A630 loc_41A630:                             ; CODE XREF: .text:0041A57F↑j
.text:0041A630                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0041A636                 cmp     edx, 3
.text:0041A639                 mov     eax, edx
.text:0041A63B                 jz      loc_41A9A5
.text:0041A641
.text:0041A641 loc_41A641:                             ; CODE XREF: .text:0041A9AC↓j
.text:0041A641                 cmp     eax, 4
.text:0041A644                 jz      loc_41A965
.text:0041A64A
.text:0041A64A loc_41A64A:                             ; CODE XREF: .text:0041A96D↓j
.text:0041A64A                 cmp     eax, 4
.text:0041A64D                 ja      loc_41A8B2
.text:0041A653                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041A659                 test    ecx, ecx
.text:0041A65B                 jnz     loc_41A8B2
.text:0041A661                 mov     dword ptr [ebx], 7263694Dh
.text:0041A667                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041A66E                 mov     dword ptr [ebx+8], 69572074h
.text:0041A675                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041A67C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041A683
.text:0041A683 loc_41A683:                             ; CODE XREF: .text:0041A925↓j
.text:0041A683                 mov     byte ptr [ebx+14h], 0
.text:0041A687
.text:0041A687 loc_41A687:                             ; CODE XREF: .text:0041A8B5↓j
.text:0041A687                                         ; .text:0041A8CC↓j ...
.text:0041A687                 mov     esi, dword_4200B0
.text:0041A68D                 test    esi, esi
.text:0041A68F                 jz      loc_41A7A2
.text:0041A695                 movzx   eax, ds:byte_421B4A
.text:0041A69C                 cmp     al, 1
.text:0041A69E                 jz      loc_41A782
.text:0041A6A4                 cmp     al, 3
.text:0041A6A6                 jz      short loc_41A6CD
.text:0041A6A8
.text:0041A6A8 loc_41A6A8:                             ; CODE XREF: .text:0041A6EB↓j
.text:0041A6A8                                         ; .text:0041A726↓j ...
.text:0041A6A8                 mov     dword ptr [esp+4], offset asc_41A3A0 ; " "
.text:0041A6B0                 mov     [esp], ebx
.text:0041A6B3                 call    strcat
.text:0041A6B8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0041A6C0                 mov     [esp], ebx
.text:0041A6C3                 call    strcat
.text:0041A6C8                 jmp     loc_41A620
.text:0041A6CD ; ---------------------------------------------------------------------------
.text:0041A6CD
.text:0041A6CD loc_41A6CD:                             ; CODE XREF: .text:0041A6A6↑j
.text:0041A6CD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0041A6D4                 jz      short loc_41A6F6
.text:0041A6D6
.text:0041A6D6 loc_41A6D6:                             ; CODE XREF: .text:0041A702↓j
.text:0041A6D6                 test    byte ptr ds:word_421B48, 2
.text:0041A6DD                 jz      short loc_41A6ED
.text:0041A6DF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0041A6E6
.text:0041A6E6 loc_41A6E6:                             ; CODE XREF: .text:0041A6F4↓j
.text:0041A6E6                 call    printf
.text:0041A6EB                 jmp     short loc_41A6A8
.text:0041A6ED ; ---------------------------------------------------------------------------
.text:0041A6ED
.text:0041A6ED loc_41A6ED:                             ; CODE XREF: .text:0041A6DD↑j
.text:0041A6ED                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0041A6F4                 jmp     short loc_41A6E6
.text:0041A6F6 ; ---------------------------------------------------------------------------
.text:0041A6F6
.text:0041A6F6 loc_41A6F6:                             ; CODE XREF: .text:0041A6D4↑j
.text:0041A6F6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041A6FB                 cmp     eax, 2
.text:0041A6FE                 jz      short loc_41A740
.text:0041A700                 test    eax, eax
.text:0041A702                 jnz     short loc_41A6D6
.text:0041A704                 cmp     byte ptr ds:word_421B48, 0
.text:0041A70B                 js      short loc_41A732
.text:0041A70D                 test    byte ptr ds:word_421B48, 2
.text:0041A714                 jnz     short loc_41A728
.text:0041A716                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041A71E
.text:0041A71E loc_41A71E:                             ; CODE XREF: .text:0041A730↓j
.text:0041A71E                                         ; .text:0041A73A↓j ...
.text:0041A71E                 mov     [esp], ebx
.text:0041A721                 call    strcat
.text:0041A726                 jmp     short loc_41A6A8
.text:0041A728 ; ---------------------------------------------------------------------------
.text:0041A728
.text:0041A728 loc_41A728:                             ; CODE XREF: .text:0041A714↑j
.text:0041A728                                         ; .text:0041A889↓j
.text:0041A728                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0041A730                 jmp     short loc_41A71E
.text:0041A732 ; ---------------------------------------------------------------------------
.text:0041A732
.text:0041A732 loc_41A732:                             ; CODE XREF: .text:0041A70B↑j
.text:0041A732                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0041A73A                 jmp     short loc_41A71E
.text:0041A73A ; ---------------------------------------------------------------------------
.text:0041A73C                 align 10h
.text:0041A740
.text:0041A740 loc_41A740:                             ; CODE XREF: .text:0041A6FE↑j
.text:0041A740                 cmp     byte ptr ds:word_421B48, 0
.text:0041A747                 js      short loc_41A778
.text:0041A749                 movzx   eax, ds:word_421B48
.text:0041A750                 test    al, 2
.text:0041A752                 jnz     short loc_41A76E
.text:0041A754                 cmp     ax, 400h
.text:0041A758                 jz      short loc_41A764
.text:0041A75A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0041A762                 jmp     short loc_41A71E
.text:0041A764 ; ---------------------------------------------------------------------------
.text:0041A764
.text:0041A764 loc_41A764:                             ; CODE XREF: .text:0041A758↑j
.text:0041A764                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0041A76C                 jmp     short loc_41A71E
.text:0041A76E ; ---------------------------------------------------------------------------
.text:0041A76E
.text:0041A76E loc_41A76E:                             ; CODE XREF: .text:0041A752↑j
.text:0041A76E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0041A776                 jmp     short loc_41A71E
.text:0041A778 ; ---------------------------------------------------------------------------
.text:0041A778
.text:0041A778 loc_41A778:                             ; CODE XREF: .text:0041A747↑j
.text:0041A778                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0041A780                 jmp     short loc_41A71E
.text:0041A782 ; ---------------------------------------------------------------------------
.text:0041A782
.text:0041A782 loc_41A782:                             ; CODE XREF: .text:0041A69E↑j
.text:0041A782                 test    byte ptr ds:word_421B48+1, 2
.text:0041A789                 jz      short loc_41A795
.text:0041A78B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0041A793                 jmp     short loc_41A71E
.text:0041A795 ; ---------------------------------------------------------------------------
.text:0041A795
.text:0041A795 loc_41A795:                             ; CODE XREF: .text:0041A789↑j
.text:0041A795                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041A79D                 jmp     loc_41A71E
.text:0041A7A2 ; ---------------------------------------------------------------------------
.text:0041A7A2
.text:0041A7A2 loc_41A7A2:                             ; CODE XREF: .text:0041A68F↑j
.text:0041A7A2                 mov     dword ptr [esp+28h], 0FFh
.text:0041A7AA                 lea     edx, [esp+2Ch]
.text:0041A7AE                 mov     [esp+10h], edx
.text:0041A7B2                 mov     dword ptr [esp+0Ch], 1
.text:0041A7BA                 mov     dword ptr [esp+8], 0
.text:0041A7C2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041A7CA                 mov     dword ptr [esp], 80000002h
.text:0041A7D1                 call    RegOpenKeyExA
.text:0041A7D6                 mov     edi, eax
.text:0041A7D8                 sub     esp, 14h
.text:0041A7DB                 xor     eax, eax
.text:0041A7DD                 test    edi, edi
.text:0041A7DF                 jnz     loc_41A5E5
.text:0041A7E5                 mov     dword ptr [esp+0Ch], 0
.text:0041A7ED                 mov     edi, [esp+2Ch]
.text:0041A7F1                 lea     esi, [esp+28h]
.text:0041A7F5                 mov     [esp+14h], esi
.text:0041A7F9                 lea     esi, [esp+30h]
.text:0041A7FD                 mov     [esp+10h], esi
.text:0041A801                 mov     dword ptr [esp+8], 0
.text:0041A809                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0041A811                 mov     [esp], edi
.text:0041A814                 call    RegQueryValueExA
.text:0041A819                 sub     esp, 18h
.text:0041A81C                 test    eax, eax
.text:0041A81E                 jnz     short loc_41A82A
.text:0041A820                 cmp     dword ptr [esp+28h], 0FFh
.text:0041A828                 jbe     short loc_41A831
.text:0041A82A
.text:0041A82A loc_41A82A:                             ; CODE XREF: .text:0041A81E↑j
.text:0041A82A                 xor     eax, eax
.text:0041A82C                 jmp     loc_41A5E5
.text:0041A831 ; ---------------------------------------------------------------------------
.text:0041A831
.text:0041A831 loc_41A831:                             ; CODE XREF: .text:0041A828↑j
.text:0041A831                 mov     edx, [esp+2Ch]
.text:0041A835                 mov     [esp], edx
.text:0041A838                 call    RegCloseKey
.text:0041A83D                 sub     esp, 4
.text:0041A840                 mov     [esp+4], esi
.text:0041A844                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0041A84B                 call    lstrcmpiA
.text:0041A850                 sub     esp, 8
.text:0041A853                 test    eax, eax
.text:0041A855                 jz      short loc_41A8A0
.text:0041A857
.text:0041A857 loc_41A857:                             ; CODE XREF: .text:0041A8B0↓j
.text:0041A857                 mov     [esp+4], esi
.text:0041A85B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0041A862                 call    lstrcmpiA
.text:0041A867                 sub     esp, 8
.text:0041A86A                 test    eax, eax
.text:0041A86C                 jz      short loc_41A88E
.text:0041A86E
.text:0041A86E loc_41A86E:                             ; CODE XREF: .text:0041A89E↓j
.text:0041A86E                 mov     [esp+4], esi
.text:0041A872                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0041A879                 call    lstrcmpiA
.text:0041A87E                 sub     esp, 8
.text:0041A881                 test    eax, eax
.text:0041A883                 jnz     loc_41A6A8
.text:0041A889                 jmp     loc_41A728
.text:0041A88E ; ---------------------------------------------------------------------------
.text:0041A88E
.text:0041A88E loc_41A88E:                             ; CODE XREF: .text:0041A86C↑j
.text:0041A88E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041A896                 mov     [esp], ebx
.text:0041A899                 call    strcat
.text:0041A89E                 jmp     short loc_41A86E
.text:0041A8A0 ; ---------------------------------------------------------------------------
.text:0041A8A0
.text:0041A8A0 loc_41A8A0:                             ; CODE XREF: .text:0041A855↑j
.text:0041A8A0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041A8A8                 mov     [esp], ebx
.text:0041A8AB                 call    strcat
.text:0041A8B0                 jmp     short loc_41A857
.text:0041A8B2 ; ---------------------------------------------------------------------------
.text:0041A8B2
.text:0041A8B2 loc_41A8B2:                             ; CODE XREF: .text:0041A64D↑j
.text:0041A8B2                                         ; .text:0041A65B↑j
.text:0041A8B2                 cmp     eax, 5
.text:0041A8B5                 jnz     loc_41A687
.text:0041A8BB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041A8C0                 cmp     eax, 2
.text:0041A8C3                 jz      short loc_41A92A
.text:0041A8C5                 cmp     eax, 1
.text:0041A8C8                 jz      short loc_41A903
.text:0041A8CA                 test    eax, eax
.text:0041A8CC                 jnz     loc_41A687
.text:0041A8D2                 mov     dword ptr [ebx], 7263694Dh
.text:0041A8D8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041A8DF                 mov     dword ptr [ebx+8], 69572074h
.text:0041A8E6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041A8ED                 mov     dword ptr [ebx+10h], 30322073h
.text:0041A8F4                 mov     word ptr [ebx+14h], 3030h
.text:0041A8FA                 mov     byte ptr [ebx+16h], 0
.text:0041A8FE                 jmp     loc_41A687
.text:0041A903 ; ---------------------------------------------------------------------------
.text:0041A903
.text:0041A903 loc_41A903:                             ; CODE XREF: .text:0041A8C8↑j
.text:0041A903                 mov     dword ptr [ebx], 7263694Dh
.text:0041A909                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041A910                 mov     dword ptr [ebx+8], 69572074h
.text:0041A917                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041A91E                 mov     dword ptr [ebx+10h], 50582073h
.text:0041A925                 jmp     loc_41A683
.text:0041A92A ; ---------------------------------------------------------------------------
.text:0041A92A
.text:0041A92A loc_41A92A:                             ; CODE XREF: .text:0041A8C3↑j
.text:0041A92A                 mov     dword ptr [ebx], 7263694Dh
.text:0041A930                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041A937                 mov     dword ptr [ebx+8], 69572074h
.text:0041A93E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041A945                 mov     dword ptr [ebx+10h], 65532073h
.text:0041A94C                 mov     dword ptr [ebx+14h], 72657672h
.text:0041A953                 mov     dword ptr [ebx+18h], 30303220h
.text:0041A95A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0041A960                 jmp     loc_41A687
.text:0041A965 ; ---------------------------------------------------------------------------
.text:0041A965
.text:0041A965 loc_41A965:                             ; CODE XREF: .text:0041A644↑j
.text:0041A965                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041A96B                 test    edx, edx
.text:0041A96D                 jnz     loc_41A64A
.text:0041A973                 mov     dword ptr [ebx], 7263694Dh
.text:0041A979                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041A980                 mov     dword ptr [ebx+8], 69572074h
.text:0041A987                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041A98E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041A995                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041A99C                 mov     byte ptr [ebx+18h], 0
.text:0041A9A0                 jmp     loc_41A687
.text:0041A9A5 ; ---------------------------------------------------------------------------
.text:0041A9A5
.text:0041A9A5 loc_41A9A5:                             ; CODE XREF: .text:0041A63B↑j
.text:0041A9A5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041A9AC                 jnz     loc_41A641
.text:0041A9B2                 mov     dword ptr [ebx], 7263694Dh
.text:0041A9B8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041A9BF                 mov     dword ptr [ebx+8], 69572074h
.text:0041A9C6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041A9CD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041A9D4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0041A9DB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0041A9E1                 jmp     loc_41A687
.text:0041A9E6 ; ---------------------------------------------------------------------------
.text:0041A9E6
.text:0041A9E6 loc_41A9E6:                             ; CODE XREF: .text:0041A576↑j
.text:0041A9E6                 cld
.text:0041A9E7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0041A9EC                 mov     ecx, 8
.text:0041A9F1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0041A9F8                 mov     edi, ebx
.text:0041A9FA                 rep movsd
.text:0041A9FC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0041AA03                 mov     [edi+2], dl
.text:0041AA06                 mov     [edi], si
.text:0041AA09                 jmp     loc_41A620
.text:0041AA09 ; ---------------------------------------------------------------------------
.text:0041AA0E                 align 10h
.text:0041AA10
.text:0041AA10 loc_41AA10:                             ; CODE XREF: .text:0041A56D↑j
.text:0041AA10                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041AA16                 cmp     ecx, 4
.text:0041AA19                 jz      loc_41AAD0
.text:0041AA1F
.text:0041AA1F loc_41AA1F:                             ; CODE XREF: .text:0041AB26↓j
.text:0041AA1F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041AA25
.text:0041AA25 loc_41AA25:                             ; CODE XREF: .text:0041AAD8↓j
.text:0041AA25                 cmp     ecx, 4
.text:0041AA28                 jz      short loc_41AA34
.text:0041AA2A
.text:0041AA2A loc_41AA2A:                             ; CODE XREF: .text:0041AA3C↓j
.text:0041AA2A                                         ; .text:0041AA41↓j
.text:0041AA2A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041AA2F                 jmp     loc_41A59C
.text:0041AA34 ; ---------------------------------------------------------------------------
.text:0041AA34
.text:0041AA34 loc_41AA34:                             ; CODE XREF: .text:0041AA28↑j
.text:0041AA34                 cmp     edx, 0Ah
.text:0041AA37                 jz      short loc_41AA61
.text:0041AA39
.text:0041AA39 loc_41AA39:                             ; CODE XREF: .text:0041AAAF↓j
.text:0041AA39                 cmp     ecx, 4
.text:0041AA3C                 jnz     short loc_41AA2A
.text:0041AA3E                 cmp     edx, 5Ah ; 'Z'
.text:0041AA41                 jnz     short loc_41AA2A
.text:0041AA43                 cld
.text:0041AA44                 mov     edi, ebx
.text:0041AA46                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0041AA4B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0041AA52                 mov     ecx, 9
.text:0041AA57                 rep movsd
.text:0041AA59                 mov     [edi], bx
.text:0041AA5C                 jmp     loc_41A620
.text:0041AA61 ; ---------------------------------------------------------------------------
.text:0041AA61
.text:0041AA61 loc_41AA61:                             ; CODE XREF: .text:0041AA37↑j
.text:0041AA61                 mov     dword ptr [ebx], 7263694Dh
.text:0041AA67                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041AA6E                 mov     dword ptr [ebx+8], 69572074h
.text:0041AA75                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041AA7C                 mov     dword ptr [ebx+10h], 38392073h
.text:0041AA83                 mov     byte ptr [ebx+14h], 0
.text:0041AA87                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041AA8D                 lea     edi, [edx-7CFh]
.text:0041AA93                 cmp     edi, 0B7h ; '·'
.text:0041AA99                 jbe     short loc_41AAC3
.text:0041AA9B                 cmp     edx, 886h
.text:0041AAA1                 ja      short loc_41AAB1
.text:0041AAA3
.text:0041AAA3 loc_41AAA3:                             ; CODE XREF: .text:0041AAC1↓j
.text:0041AAA3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041AAA9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041AAAF                 jmp     short loc_41AA39
.text:0041AAB1 ; ---------------------------------------------------------------------------
.text:0041AAB1
.text:0041AAB1 loc_41AAB1:                             ; CODE XREF: .text:0041AAA1↑j
.text:0041AAB1                 mov     dword ptr [esp+4], offset loc_41A536
.text:0041AAB9
.text:0041AAB9 loc_41AAB9:                             ; CODE XREF: .text:0041AACB↓j
.text:0041AAB9                 mov     [esp], ebx
.text:0041AABC                 call    strcat
.text:0041AAC1                 jmp     short loc_41AAA3
.text:0041AAC3 ; ---------------------------------------------------------------------------
.text:0041AAC3
.text:0041AAC3 loc_41AAC3:                             ; CODE XREF: .text:0041AA99↑j
.text:0041AAC3                 mov     dword ptr [esp+4], 41A53Ah
.text:0041AACB                 jmp     short loc_41AAB9
.text:0041AACB ; ---------------------------------------------------------------------------
.text:0041AACD                 align 10h
.text:0041AAD0
.text:0041AAD0 loc_41AAD0:                             ; CODE XREF: .text:0041AA19↑j
.text:0041AAD0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041AAD6                 test    edx, edx
.text:0041AAD8                 jnz     loc_41AA25
.text:0041AADE                 mov     dword ptr [ebx], 7263694Dh
.text:0041AAE4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041AAEB                 mov     dword ptr [ebx+8], 69572074h
.text:0041AAF2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041AAF9                 mov     dword ptr [ebx+10h], 35392073h
.text:0041AB00                 mov     byte ptr [ebx+14h], 0
.text:0041AB04                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041AB0A                 lea     ecx, [edx-3B7h]
.text:0041AB10                 cmp     ecx, 81h
.text:0041AB16                 jbe     short loc_41AB3D
.text:0041AB18                 cmp     edx, 438h
.text:0041AB1E                 ja      short loc_41AB2B
.text:0041AB20
.text:0041AB20 loc_41AB20:                             ; CODE XREF: .text:0041AB3B↓j
.text:0041AB20                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041AB26                 jmp     loc_41AA1F
.text:0041AB2B ; ---------------------------------------------------------------------------
.text:0041AB2B
.text:0041AB2B loc_41AB2B:                             ; CODE XREF: .text:0041AB1E↑j
.text:0041AB2B                 mov     dword ptr [esp+4], offset loc_41A53F
.text:0041AB33
.text:0041AB33 loc_41AB33:                             ; CODE XREF: .text:0041AB45↓j
.text:0041AB33                 mov     [esp], ebx
.text:0041AB36                 call    strcat
.text:0041AB3B                 jmp     short loc_41AB20
.text:0041AB3D ; ---------------------------------------------------------------------------
.text:0041AB3D
.text:0041AB3D loc_41AB3D:                             ; CODE XREF: .text:0041AB16↑j
.text:0041AB3D                 mov     dword ptr [esp+4], 41A53Ah
.text:0041AB45                 jmp     short loc_41AB33
.text:0041AB45 ; ---------------------------------------------------------------------------
.text:0041AB47                 align 10h
.text:0041AB50
.text:0041AB50 ; =============== S U B R O U T I N E =======================================
.text:0041AB50
.text:0041AB50
.text:0041AB50 sub_41AB50      proc near               ; CODE XREF: .text:00418B9E↑p
.text:0041AB50                                         ; sub_419020+12A↑p
.text:0041AB50                 sub     esp, 0Ch
.text:0041AB53                 call    sub_41AC60
.text:0041AB58                 mov     eax, ds:dword_421AA0
.text:0041AB5D                 add     esp, 0Ch
.text:0041AB60                 retn
.text:0041AB60 sub_41AB50      endp
.text:0041AB60
.text:0041AB61 ; ---------------------------------------------------------------------------
.text:0041AB61                 jmp     short loc_41AB70
.text:0041AB61 ; ---------------------------------------------------------------------------
.text:0041AB63                 align 10h
.text:0041AB70
.text:0041AB70 loc_41AB70:                             ; CODE XREF: .text:0041AB61↑j
.text:0041AB70                 sub     esp, 0Ch
.text:0041AB73                 call    sub_41AC60
.text:0041AB78                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041AB7D                 add     esp, 0Ch
.text:0041AB80                 retn
.text:0041AB81 ; ---------------------------------------------------------------------------
.text:0041AB81                 jmp     short loc_41AB90
.text:0041AB81 ; ---------------------------------------------------------------------------
.text:0041AB83                 align 10h
.text:0041AB90
.text:0041AB90 loc_41AB90:                             ; CODE XREF: .text:0041AB81↑j
.text:0041AB90                 sub     esp, 0Ch
.text:0041AB93                 call    sub_41AC60
.text:0041AB98                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041AB9D                 add     esp, 0Ch
.text:0041ABA0                 retn
.text:0041ABA1 ; ---------------------------------------------------------------------------
.text:0041ABA1                 jmp     short loc_41ABB0
.text:0041ABA1 ; ---------------------------------------------------------------------------
.text:0041ABA3                 align 10h
.text:0041ABB0
.text:0041ABB0 loc_41ABB0:                             ; CODE XREF: .text:0041ABA1↑j
.text:0041ABB0                 sub     esp, 0Ch
.text:0041ABB3                 call    sub_41AC60
.text:0041ABB8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041ABBD                 add     esp, 0Ch
.text:0041ABC0                 retn
.text:0041ABC1 ; ---------------------------------------------------------------------------
.text:0041ABC1                 jmp     short loc_41ABD0
.text:0041ABC1 ; ---------------------------------------------------------------------------
.text:0041ABC3                 align 10h
.text:0041ABD0
.text:0041ABD0 loc_41ABD0:                             ; CODE XREF: .text:0041ABC1↑j
.text:0041ABD0                 sub     esp, 0Ch
.text:0041ABD3                 call    GetVersion
.text:0041ABD8                 shr     eax, 10h
.text:0041ABDB                 add     esp, 0Ch
.text:0041ABDE                 retn
.text:0041ABDE ; ---------------------------------------------------------------------------
.text:0041ABDF                 align 10h
.text:0041ABE0                 sub     esp, 0Ch
.text:0041ABE3                 call    sub_41AC60
.text:0041ABE8                 xor     eax, eax
.text:0041ABEA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0041ABF1                 setz    al
.text:0041ABF4                 add     esp, 0Ch
.text:0041ABF7                 retn
.text:0041ABF7 ; ---------------------------------------------------------------------------
.text:0041ABF8                 align 10h
.text:0041AC00
.text:0041AC00 ; =============== S U B R O U T I N E =======================================
.text:0041AC00
.text:0041AC00
.text:0041AC00 sub_41AC00      proc near               ; CODE XREF: .text:loc_4180B0↑p
.text:0041AC00                                         ; .text:loc_418B84↑p ...
.text:0041AC00                 sub     esp, 0Ch
.text:0041AC03                 call    sub_41AC60
.text:0041AC08                 xor     eax, eax
.text:0041AC0A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0041AC11                 setz    al
.text:0041AC14                 add     esp, 0Ch
.text:0041AC17                 retn
.text:0041AC17 sub_41AC00      endp
.text:0041AC17
.text:0041AC17 ; ---------------------------------------------------------------------------
.text:0041AC18                 align 10h
.text:0041AC20                 sub     esp, 0Ch
.text:0041AC23                 call    sub_41AC60
.text:0041AC28                 xor     eax, eax
.text:0041AC2A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0041AC31                 setz    al
.text:0041AC34                 add     esp, 0Ch
.text:0041AC37                 retn
.text:0041AC37 ; ---------------------------------------------------------------------------
.text:0041AC38                 align 10h
.text:0041AC40                 sub     esp, 0Ch
.text:0041AC43                 call    sub_41AC60
.text:0041AC48                 xor     eax, eax
.text:0041AC4A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0041AC51                 setz    al
.text:0041AC54                 add     esp, 0Ch
.text:0041AC57                 retn
.text:0041AC57 ; ---------------------------------------------------------------------------
.text:0041AC58                 align 10h
.text:0041AC60
.text:0041AC60 ; =============== S U B R O U T I N E =======================================
.text:0041AC60
.text:0041AC60
.text:0041AC60 sub_41AC60      proc near               ; CODE XREF: .text:0041A560↑p
.text:0041AC60                                         ; sub_41AB50+3↑p ...
.text:0041AC60
.text:0041AC60 lpVersionInformation= dword ptr -0BCh
.text:0041AC60 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0041AC60
.text:0041AC60                 sub     esp, 0BCh
.text:0041AC66                 mov     edx, ds:dword_421B50
.text:0041AC6C                 test    edx, edx
.text:0041AC6E                 jz      short loc_41AC80
.text:0041AC70
.text:0041AC70 loc_41AC70:                             ; CODE XREF: sub_41AC60+7B↓j
.text:0041AC70                 mov     edx, 1
.text:0041AC75
.text:0041AC75 loc_41AC75:                             ; CODE XREF: sub_41AC60+217↓j
.text:0041AC75                 mov     eax, edx
.text:0041AC77                 add     esp, 0BCh
.text:0041AC7D                 retn
.text:0041AC7D ; ---------------------------------------------------------------------------
.text:0041AC7E                 align 10h
.text:0041AC80
.text:0041AC80 loc_41AC80:                             ; CODE XREF: sub_41AC60+E↑j
.text:0041AC80                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0041AC87                 mov     edx, 9Ch ; 'œ'
.text:0041AC8C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0041AC92                 call    GetVersionExA
.text:0041AC97                 sub     esp, 4
.text:0041AC9A                 test    eax, eax
.text:0041AC9C                 jz      loc_41AE54
.text:0041ACA2
.text:0041ACA2 loc_41ACA2:                             ; CODE XREF: sub_41AC60+245↓j
.text:0041ACA2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0041ACA9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041ACAE                 cmp     eax, 1
.text:0041ACB1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041ACB7                 jz      loc_41ADA0
.text:0041ACBD                 cmp     eax, 1
.text:0041ACC0                 jb      loc_41AD90
.text:0041ACC6                 cmp     eax, 2
.text:0041ACC9                 jz      short loc_41ACEA
.text:0041ACCB                 cmp     eax, 3
.text:0041ACCE                 jz      short loc_41ACDD
.text:0041ACD0
.text:0041ACD0 loc_41ACD0:                             ; CODE XREF: sub_41AC60+88↓j
.text:0041ACD0                                         ; sub_41AC60+C0↓j ...
.text:0041ACD0                 mov     edx, 1
.text:0041ACD5                 mov     ds:dword_421B50, edx
.text:0041ACDB                 jmp     short loc_41AC70
.text:0041ACDD ; ---------------------------------------------------------------------------
.text:0041ACDD
.text:0041ACDD loc_41ACDD:                             ; CODE XREF: sub_41AC60+6E↑j
.text:0041ACDD                 mov     ecx, 17h
.text:0041ACE2
.text:0041ACE2 loc_41ACE2:                             ; CODE XREF: sub_41AC60+1A7↓j
.text:0041ACE2                 mov     ds:dword_421AA0, ecx
.text:0041ACE8                 jmp     short loc_41ACD0
.text:0041ACEA ; ---------------------------------------------------------------------------
.text:0041ACEA
.text:0041ACEA loc_41ACEA:                             ; CODE XREF: sub_41AC60+69↑j
.text:0041ACEA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041ACEF                 cmp     eax, 3
.text:0041ACF2                 jz      short loc_41AD6B
.text:0041ACF4                 cmp     eax, 4
.text:0041ACF7                 jz      short loc_41AD5A
.text:0041ACF9
.text:0041ACF9 loc_41ACF9:                             ; CODE XREF: sub_41AC60+102↓j
.text:0041ACF9                 cmp     eax, 4
.text:0041ACFC                 ja      short loc_41AD22
.text:0041ACFE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041AD04                 test    ecx, ecx
.text:0041AD06                 jnz     short loc_41AD22
.text:0041AD08                 mov     edx, 1Eh
.text:0041AD0D
.text:0041AD0D loc_41AD0D:                             ; CODE XREF: sub_41AC60+DF↓j
.text:0041AD0D                 mov     ds:dword_421AA0, edx
.text:0041AD13
.text:0041AD13 loc_41AD13:                             ; CODE XREF: sub_41AC60+C5↓j
.text:0041AD13                                         ; sub_41AC60+D8↓j ...
.text:0041AD13                 movzx   ecx, ds:word_421B44
.text:0041AD1A                 add     ds:dword_421AA0, ecx
.text:0041AD20                 jmp     short loc_41ACD0
.text:0041AD22 ; ---------------------------------------------------------------------------
.text:0041AD22
.text:0041AD22 loc_41AD22:                             ; CODE XREF: sub_41AC60+9C↑j
.text:0041AD22                                         ; sub_41AC60+A6↑j
.text:0041AD22                 cmp     eax, 5
.text:0041AD25                 jnz     short loc_41AD13
.text:0041AD27                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041AD2C                 cmp     eax, 2
.text:0041AD2F                 jz      short loc_41AD4E
.text:0041AD31                 cmp     eax, 1
.text:0041AD34                 jz      short loc_41AD41
.text:0041AD36                 test    eax, eax
.text:0041AD38                 jnz     short loc_41AD13
.text:0041AD3A                 mov     edx, 32h ; '2'
.text:0041AD3F                 jmp     short loc_41AD0D
.text:0041AD41 ; ---------------------------------------------------------------------------
.text:0041AD41
.text:0041AD41 loc_41AD41:                             ; CODE XREF: sub_41AC60+D4↑j
.text:0041AD41                 mov     ecx, 3Ch ; '<'
.text:0041AD46
.text:0041AD46 loc_41AD46:                             ; CODE XREF: sub_41AC60+122↓j
.text:0041AD46                 mov     ds:dword_421AA0, ecx
.text:0041AD4C                 jmp     short loc_41AD13
.text:0041AD4E ; ---------------------------------------------------------------------------
.text:0041AD4E
.text:0041AD4E loc_41AD4E:                             ; CODE XREF: sub_41AC60+CF↑j
.text:0041AD4E                 mov     eax, 46h ; 'F'
.text:0041AD53
.text:0041AD53 loc_41AD53:                             ; CODE XREF: sub_41AC60+109↓j
.text:0041AD53                                         ; sub_41AC60+129↓j
.text:0041AD53                 mov     ds:dword_421AA0, eax
.text:0041AD58                 jmp     short loc_41AD13
.text:0041AD5A ; ---------------------------------------------------------------------------
.text:0041AD5A
.text:0041AD5A loc_41AD5A:                             ; CODE XREF: sub_41AC60+97↑j
.text:0041AD5A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041AD60                 test    ecx, ecx
.text:0041AD62                 jnz     short loc_41ACF9
.text:0041AD64                 mov     eax, 28h ; '('
.text:0041AD69                 jmp     short loc_41AD53
.text:0041AD6B ; ---------------------------------------------------------------------------
.text:0041AD6B
.text:0041AD6B loc_41AD6B:                             ; CODE XREF: sub_41AC60+92↑j
.text:0041AD6B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041AD70                 cmp     eax, 33h ; '3'
.text:0041AD73                 jz      short loc_41AD84
.text:0041AD75                 cmp     eax, 5
.text:0041AD78                 setz    cl
.text:0041AD7B                 movzx   edx, cl
.text:0041AD7E                 lea     ecx, [edx+edx*4+1Eh]
.text:0041AD82                 jmp     short loc_41AD46
.text:0041AD84 ; ---------------------------------------------------------------------------
.text:0041AD84
.text:0041AD84 loc_41AD84:                             ; CODE XREF: sub_41AC60+113↑j
.text:0041AD84                 mov     eax, 24h ; '$'
.text:0041AD89                 jmp     short loc_41AD53
.text:0041AD89 ; ---------------------------------------------------------------------------
.text:0041AD8B                 align 10h
.text:0041AD90
.text:0041AD90 loc_41AD90:                             ; CODE XREF: sub_41AC60+60↑j
.text:0041AD90                 mov     edx, 2
.text:0041AD95                 mov     ds:dword_421AA0, edx
.text:0041AD9B                 jmp     loc_41ACD0
.text:0041ADA0 ; ---------------------------------------------------------------------------
.text:0041ADA0
.text:0041ADA0 loc_41ADA0:                             ; CODE XREF: sub_41AC60+57↑j
.text:0041ADA0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041ADA6                 cmp     ecx, 4
.text:0041ADA9                 jnz     loc_41ACD0
.text:0041ADAF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041ADB4                 test    eax, eax
.text:0041ADB6                 jnz     short loc_41ADDA
.text:0041ADB8                 mov     eax, 0Ah
.text:0041ADBD                 mov     ds:dword_421AA0, eax
.text:0041ADC2                 lea     eax, [edx-3B7h]
.text:0041ADC8                 cmp     eax, 81h
.text:0041ADCD                 ja      short loc_41AE45
.text:0041ADCF                 mov     edx, 0Bh
.text:0041ADD4
.text:0041ADD4 loc_41ADD4:                             ; CODE XREF: sub_41AC60+1F2↓j
.text:0041ADD4                 mov     ds:dword_421AA0, edx
.text:0041ADDA
.text:0041ADDA loc_41ADDA:                             ; CODE XREF: sub_41AC60+156↑j
.text:0041ADDA                                         ; sub_41AC60+1EB↓j
.text:0041ADDA                 cmp     ecx, 4
.text:0041ADDD                 jnz     loc_41ACD0
.text:0041ADE3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0041ADEA                 jz      short loc_41AE0C
.text:0041ADEC
.text:0041ADEC loc_41ADEC:                             ; CODE XREF: sub_41AC60+1D4↓j
.text:0041ADEC                                         ; sub_41AC60+1DC↓j
.text:0041ADEC                 cmp     ecx, 4
.text:0041ADEF                 jnz     loc_41ACD0
.text:0041ADF5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0041ADFC                 jnz     loc_41ACD0
.text:0041AE02                 mov     ecx, 12h
.text:0041AE07                 jmp     loc_41ACE2
.text:0041AE0C ; ---------------------------------------------------------------------------
.text:0041AE0C
.text:0041AE0C loc_41AE0C:                             ; CODE XREF: sub_41AC60+18A↑j
.text:0041AE0C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041AE12                 mov     eax, 0Eh
.text:0041AE17                 mov     ds:dword_421AA0, eax
.text:0041AE1C                 lea     eax, [edx-7CFh]
.text:0041AE22                 cmp     eax, 0B7h ; '·'
.text:0041AE27                 ja      short loc_41AE36
.text:0041AE29                 mov     edx, 0Fh
.text:0041AE2E
.text:0041AE2E loc_41AE2E:                             ; CODE XREF: sub_41AC60+1E3↓j
.text:0041AE2E                 mov     ds:dword_421AA0, edx
.text:0041AE34                 jmp     short loc_41ADEC
.text:0041AE36 ; ---------------------------------------------------------------------------
.text:0041AE36
.text:0041AE36 loc_41AE36:                             ; CODE XREF: sub_41AC60+1C7↑j
.text:0041AE36                 cmp     edx, 886h
.text:0041AE3C                 jbe     short loc_41ADEC
.text:0041AE3E                 mov     edx, 10h
.text:0041AE43                 jmp     short loc_41AE2E
.text:0041AE45 ; ---------------------------------------------------------------------------
.text:0041AE45
.text:0041AE45 loc_41AE45:                             ; CODE XREF: sub_41AC60+16D↑j
.text:0041AE45                 cmp     edx, 438h
.text:0041AE4B                 jbe     short loc_41ADDA
.text:0041AE4D                 mov     edx, 0Ch
.text:0041AE52                 jmp     short loc_41ADD4
.text:0041AE54 ; ---------------------------------------------------------------------------
.text:0041AE54
.text:0041AE54 loc_41AE54:                             ; CODE XREF: sub_41AC60+3C↑j
.text:0041AE54                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041AE5C                 xor     edx, edx
.text:0041AE5E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0041AE62                 mov     dword_4200B0, edx
.text:0041AE68                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041AE6B                 call    GetVersionExA
.text:0041AE70                 sub     esp, 4
.text:0041AE73                 xor     edx, edx
.text:0041AE75                 test    eax, eax
.text:0041AE77                 jz      loc_41AC75
.text:0041AE7D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0041AE81                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0041AE85                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041AE8B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041AE8F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0041AE95                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0041AE99                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041AE9F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0041AEA5                 jmp     loc_41ACA2
.text:0041AEA5 sub_41AC60      endp
.text:0041AEA5
.text:0041AEA5 ; ---------------------------------------------------------------------------
.text:0041AEAA                 align 10h
.text:0041AEB0 aNotset         db 'notset',0           ; DATA XREF: .data:off_4200C0↓o
.text:0041AEB0                                         ; .data:off_4200C4↓o
.text:0041AEB7 ; ---------------------------------------------------------------------------
.text:0041AEB7
.text:0041AEB7 loc_41AEB7:                             ; DATA XREF: .text:loc_41AF55↓o
.text:0041AEB7                 jb      short loc_41AF30
.text:0041AEB9                 add     [eax], ah
.text:0041AEBB                 or      [eax], eax
.text:0041AEBD
.text:0041AEBD loc_41AEBD:                             ; DATA XREF: .text:0041AFA8↓o
.text:0041AEBD                                         ; .text:0041B00E↓o ...
.text:0041AEBD                 add     [eax], ah
.text:0041AEBF                 and     eax, 64252064h
.text:0041AEC4                 and     [eax], al
.text:0041AEC6                 lea     esi, [esi+0]
.text:0041AEC9                 lea     edi, [edi+0]
.text:0041AED0                 push    ebp
.text:0041AED1                 push    edi
.text:0041AED2                 push    esi
.text:0041AED3                 push    ebx
.text:0041AED4                 sub     esp, 14Ch
.text:0041AEDA                 mov     edx, off_4200C0 ; "notset"
.text:0041AEE0                 mov     edi, [esp+164h]
.text:0041AEE7                 mov     ebp, [esp+168h]
.text:0041AEEE                 mov     [esp+4], edx
.text:0041AEF2                 mov     edx, off_4200C4 ; "notset"
.text:0041AEF8                 mov     [esp], edx
.text:0041AEFB                 call    strcmp
.text:0041AF00                 test    eax, eax
.text:0041AF02                 jz      loc_41B2F0
.text:0041AF08
.text:0041AF08 loc_41AF08:                             ; CODE XREF: .text:0041B33C↓j
.text:0041AF08                 lea     ebx, [esp+20h]
.text:0041AF0C                 lea     esi, [esi+0]
.text:0041AF10
.text:0041AF10 loc_41AF10:                             ; CODE XREF: .text:0041AF46↓j
.text:0041AF10                 mov     [esp+4], ebx
.text:0041AF14                 mov     ecx, off_4200C4 ; "notset"
.text:0041AF1A                 mov     [esp], ecx
.text:0041AF1D                 call    loc_4190C0
.text:0041AF22                 test    eax, eax
.text:0041AF24                 jns     short loc_41AF55
.text:0041AF26                 mov     eax, off_4200C4 ; "notset"
.text:0041AF2B                 cmp     byte ptr [eax], 0
.text:0041AF2E                 jz      short loc_41AF48
.text:0041AF30
.text:0041AF30 loc_41AF30:                             ; CODE XREF: .text:loc_41AEB7↑j
.text:0041AF30                 mov     dword ptr [esp+4], 0
.text:0041AF38                 mov     [esp], eax
.text:0041AF3B                 call    strchr
.text:0041AF40                 inc     eax
.text:0041AF41                 mov     off_4200C4, eax ; "notset"
.text:0041AF46                 jmp     short loc_41AF10
.text:0041AF48 ; ---------------------------------------------------------------------------
.text:0041AF48
.text:0041AF48 loc_41AF48:                             ; CODE XREF: .text:0041AF2E↑j
.text:0041AF48                 xor     eax, eax
.text:0041AF4A
.text:0041AF4A loc_41AF4A:                             ; CODE XREF: .text:0041B10C↓j
.text:0041AF4A                 add     esp, 14Ch
.text:0041AF50                 pop     ebx
.text:0041AF51                 pop     esi
.text:0041AF52                 pop     edi
.text:0041AF53                 pop     ebp
.text:0041AF54                 retn
.text:0041AF55 ; ---------------------------------------------------------------------------
.text:0041AF55
.text:0041AF55 loc_41AF55:                             ; CODE XREF: .text:0041AF24↑j
.text:0041AF55                 mov     dword ptr [edi+0Ch], offset loc_41AEB7
.text:0041AF5C                 lea     ecx, [esp+0D6h]
.text:0041AF63                 lea     edx, [esp+6Ch]
.text:0041AF67                 mov     [edi+4], ecx
.text:0041AF6A                 lea     ebx, [esp+7Ch]
.text:0041AF6E                 mov     [edi+8], edx
.text:0041AF71                 mov     [edi], ebx
.text:0041AF73                 mov     [esp], ebp
.text:0041AF76                 mov     [esp+4], edi
.text:0041AF7A                 call    ___addmntentstr
.text:0041AF7F                 mov     [esp], ebp
.text:0041AF82                 mov     dword ptr [esp+4], 41AEBAh
.text:0041AF8A                 call    strspn
.text:0041AF8F                 mov     dword ptr [esp+4], 0
.text:0041AF97                 mov     ebx, off_4200C4 ; "notset"
.text:0041AF9D                 lea     esi, [eax+ebp]
.text:0041AFA0                 mov     [esp+1Ch], esi
.text:0041AFA4                 lea     ebp, [esp+1Ch]
.text:0041AFA8                 mov     esi, offset loc_41AEBD
.text:0041AFAD                 mov     [esp], ebx
.text:0041AFB0                 call    strchr
.text:0041AFB5                 mov     dword ptr [esp+4], 41AEBAh
.text:0041AFBD                 inc     eax
.text:0041AFBE                 mov     off_4200C4, eax ; "notset"
.text:0041AFC3                 mov     [esp], ebp
.text:0041AFC6                 call    sub_41C850
.text:0041AFCB                 test    eax, eax
.text:0041AFCD                 mov     ebx, eax
.text:0041AFCF                 jz      short loc_41AFF8
.text:0041AFD1                 mov     edx, eax
.text:0041AFD3                 mov     ecx, eax
.text:0041AFD5                 lea     esi, [esi+0]
.text:0041AFD9                 lea     edi, [edi+0]
.text:0041AFE0
.text:0041AFE0 loc_41AFE0:                             ; CODE XREF: .text:0041AFF6↓j
.text:0041AFE0                 movzx   eax, byte ptr [edx]
.text:0041AFE3                 cmp     al, 5Ch ; '\'
.text:0041AFE5                 jz      loc_41B294
.text:0041AFEB
.text:0041AFEB loc_41AFEB:                             ; CODE XREF: .text:0041B29C↓j
.text:0041AFEB                                         ; .text:0041B2AA↓j ...
.text:0041AFEB                 mov     [ecx], al
.text:0041AFED
.text:0041AFED loc_41AFED:                             ; CODE XREF: .text:0041B2BE↓j
.text:0041AFED                 inc     ecx
.text:0041AFEE
.text:0041AFEE loc_41AFEE:                             ; CODE XREF: .text:0041B2D6↓j
.text:0041AFEE                 movzx   eax, byte ptr [edx]
.text:0041AFF1                 mov     esi, ebx
.text:0041AFF3                 inc     edx
.text:0041AFF4                 test    al, al
.text:0041AFF6                 jnz     short loc_41AFE0
.text:0041AFF8
.text:0041AFF8 loc_41AFF8:                             ; CODE XREF: .text:0041AFCF↑j
.text:0041AFF8                 mov     [edi], esi
.text:0041AFFA                 mov     eax, [esp+1Ch]
.text:0041AFFE                 test    eax, eax
.text:0041B000                 jnz     loc_41B27B
.text:0041B006
.text:0041B006 loc_41B006:                             ; CODE XREF: .text:0041B28F↓j
.text:0041B006                 mov     dword ptr [esp+4], 41AEBAh
.text:0041B00E                 mov     esi, offset loc_41AEBD
.text:0041B013                 mov     [esp], ebp
.text:0041B016                 call    sub_41C850
.text:0041B01B                 test    eax, eax
.text:0041B01D                 mov     ebx, eax
.text:0041B01F                 jz      short loc_41B048
.text:0041B021                 mov     edx, eax
.text:0041B023                 mov     ecx, eax
.text:0041B025                 lea     esi, [esi+0]
.text:0041B029                 lea     edi, [edi+0]
.text:0041B030
.text:0041B030 loc_41B030:                             ; CODE XREF: .text:0041B046↓j
.text:0041B030                 movzx   eax, byte ptr [edx]
.text:0041B033                 cmp     al, 5Ch ; '\'
.text:0041B035                 jz      loc_41B223
.text:0041B03B
.text:0041B03B loc_41B03B:                             ; CODE XREF: .text:0041B22B↓j
.text:0041B03B                                         ; .text:0041B239↓j ...
.text:0041B03B                 mov     [ecx], al
.text:0041B03D
.text:0041B03D loc_41B03D:                             ; CODE XREF: .text:0041B24D↓j
.text:0041B03D                 inc     ecx
.text:0041B03E
.text:0041B03E loc_41B03E:                             ; CODE XREF: .text:0041B265↓j
.text:0041B03E                 movzx   eax, byte ptr [edx]
.text:0041B041                 mov     esi, ebx
.text:0041B043                 inc     edx
.text:0041B044                 test    al, al
.text:0041B046                 jnz     short loc_41B030
.text:0041B048
.text:0041B048 loc_41B048:                             ; CODE XREF: .text:0041B01F↑j
.text:0041B048                 mov     [edi+4], esi
.text:0041B04B                 mov     eax, [esp+1Ch]
.text:0041B04F                 test    eax, eax
.text:0041B051                 jnz     loc_41B20A
.text:0041B057
.text:0041B057 loc_41B057:                             ; CODE XREF: .text:0041B21E↓j
.text:0041B057                 mov     dword ptr [esp+4], 41AEBAh
.text:0041B05F                 mov     esi, offset loc_41AEBD
.text:0041B064                 mov     [esp], ebp
.text:0041B067                 call    sub_41C850
.text:0041B06C                 test    eax, eax
.text:0041B06E                 mov     ebx, eax
.text:0041B070                 jz      short loc_41B098
.text:0041B072                 mov     edx, eax
.text:0041B074                 mov     ecx, eax
.text:0041B076                 lea     esi, [esi+0]
.text:0041B079                 lea     edi, [edi+0]
.text:0041B080
.text:0041B080 loc_41B080:                             ; CODE XREF: .text:0041B096↓j
.text:0041B080                 movzx   eax, byte ptr [edx]
.text:0041B083                 cmp     al, 5Ch ; '\'
.text:0041B085                 jz      loc_41B1B2
.text:0041B08B
.text:0041B08B loc_41B08B:                             ; CODE XREF: .text:0041B1BA↓j
.text:0041B08B                                         ; .text:0041B1C8↓j ...
.text:0041B08B                 mov     [ecx], al
.text:0041B08D
.text:0041B08D loc_41B08D:                             ; CODE XREF: .text:0041B1DC↓j
.text:0041B08D                 inc     ecx
.text:0041B08E
.text:0041B08E loc_41B08E:                             ; CODE XREF: .text:0041B1F4↓j
.text:0041B08E                 movzx   eax, byte ptr [edx]
.text:0041B091                 mov     esi, ebx
.text:0041B093                 inc     edx
.text:0041B094                 test    al, al
.text:0041B096                 jnz     short loc_41B080
.text:0041B098
.text:0041B098 loc_41B098:                             ; CODE XREF: .text:0041B070↑j
.text:0041B098                 mov     [edi+8], esi
.text:0041B09B                 mov     eax, [esp+1Ch]
.text:0041B09F                 test    eax, eax
.text:0041B0A1                 jnz     loc_41B199
.text:0041B0A7
.text:0041B0A7 loc_41B0A7:                             ; CODE XREF: .text:0041B1AD↓j
.text:0041B0A7                 mov     dword ptr [esp+4], 41AEBAh
.text:0041B0AF                 mov     esi, offset loc_41AEBD
.text:0041B0B4                 mov     [esp], ebp
.text:0041B0B7                 call    sub_41C850
.text:0041B0BC                 test    eax, eax
.text:0041B0BE                 mov     ebx, eax
.text:0041B0C0                 jz      short loc_41B0E4
.text:0041B0C2                 mov     edx, eax
.text:0041B0C4                 mov     ecx, eax
.text:0041B0C6                 lea     esi, [esi+0]
.text:0041B0C9                 lea     edi, [edi+0]
.text:0041B0D0
.text:0041B0D0 loc_41B0D0:                             ; CODE XREF: .text:0041B0E2↓j
.text:0041B0D0                 movzx   eax, byte ptr [edx]
.text:0041B0D3                 cmp     al, 5Ch ; '\'
.text:0041B0D5                 jz      short loc_41B145
.text:0041B0D7
.text:0041B0D7 loc_41B0D7:                             ; CODE XREF: .text:0041B14D↓j
.text:0041B0D7                                         ; .text:0041B157↓j ...
.text:0041B0D7                 mov     [ecx], al
.text:0041B0D9
.text:0041B0D9 loc_41B0D9:                             ; CODE XREF: .text:0041B16B↓j
.text:0041B0D9                 inc     ecx
.text:0041B0DA
.text:0041B0DA loc_41B0DA:                             ; CODE XREF: .text:0041B183↓j
.text:0041B0DA                 movzx   eax, byte ptr [edx]
.text:0041B0DD                 mov     esi, ebx
.text:0041B0DF                 inc     edx
.text:0041B0E0                 test    al, al
.text:0041B0E2                 jnz     short loc_41B0D0
.text:0041B0E4
.text:0041B0E4 loc_41B0E4:                             ; CODE XREF: .text:0041B0C0↑j
.text:0041B0E4                 mov     [edi+0Ch], esi
.text:0041B0E7                 xor     eax, eax
.text:0041B0E9                 mov     edx, [esp+1Ch]
.text:0041B0ED                 test    edx, edx
.text:0041B0EF                 jnz     short loc_41B125
.text:0041B0F1
.text:0041B0F1 loc_41B0F1:                             ; CODE XREF: .text:0041B143↓j
.text:0041B0F1                 cmp     eax, 1
.text:0041B0F4                 jz      short loc_41B11C
.text:0041B0F6                 cmp     eax, 1
.text:0041B0F9                 jle     short loc_41B111
.text:0041B0FB
.text:0041B0FB loc_41B0FB:                             ; CODE XREF: .text:0041B113↓j
.text:0041B0FB                                         ; .text:0041B123↓j
.text:0041B0FB                 mov     edx, [esp+160h]
.text:0041B102                 mov     [esp], edx
.text:0041B105                 call    sub_41C7F0
.text:0041B10A                 mov     eax, edi
.text:0041B10C                 jmp     loc_41AF4A
.text:0041B111 ; ---------------------------------------------------------------------------
.text:0041B111
.text:0041B111 loc_41B111:                             ; CODE XREF: .text:0041B0F9↑j
.text:0041B111                 test    eax, eax
.text:0041B113                 jnz     short loc_41B0FB
.text:0041B115                 mov     dword ptr [edi+10h], 0
.text:0041B11C
.text:0041B11C loc_41B11C:                             ; CODE XREF: .text:0041B0F4↑j
.text:0041B11C                 mov     dword ptr [edi+14h], 0
.text:0041B123                 jmp     short loc_41B0FB
.text:0041B125 ; ---------------------------------------------------------------------------
.text:0041B125
.text:0041B125 loc_41B125:                             ; CODE XREF: .text:0041B0EF↑j
.text:0041B125                 mov     dword ptr [esp+4], 41AEBEh
.text:0041B12D                 lea     esi, [edi+14h]
.text:0041B130                 lea     ebp, [edi+10h]
.text:0041B133                 mov     [esp+0Ch], esi
.text:0041B137                 mov     [esp+8], ebp
.text:0041B13B                 mov     [esp], edx
.text:0041B13E                 call    sscanf
.text:0041B143                 jmp     short loc_41B0F1
.text:0041B145 ; ---------------------------------------------------------------------------
.text:0041B145
.text:0041B145 loc_41B145:                             ; CODE XREF: .text:0041B0D5↑j
.text:0041B145                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B149                 jz      short loc_41B188
.text:0041B14B
.text:0041B14B loc_41B14B:                             ; CODE XREF: .text:0041B18C↓j
.text:0041B14B                                         ; .text:0041B192↓j
.text:0041B14B                 cmp     al, 5Ch ; '\'
.text:0041B14D                 jnz     short loc_41B0D7
.text:0041B14F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B153                 jz      short loc_41B170
.text:0041B155
.text:0041B155 loc_41B155:                             ; CODE XREF: .text:0041B174↓j
.text:0041B155                                         ; .text:0041B17A↓j
.text:0041B155                 cmp     al, 5Ch ; '\'
.text:0041B157                 jnz     loc_41B0D7
.text:0041B15D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041B161                 jnz     loc_41B0D7
.text:0041B167                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041B16A                 inc     edx
.text:0041B16B                 jmp     loc_41B0D9
.text:0041B170 ; ---------------------------------------------------------------------------
.text:0041B170
.text:0041B170 loc_41B170:                             ; CODE XREF: .text:0041B153↑j
.text:0041B170                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041B174                 jnz     short loc_41B155
.text:0041B176                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041B17A                 jnz     short loc_41B155
.text:0041B17C                 mov     byte ptr [ecx], 9
.text:0041B17F
.text:0041B17F loc_41B17F:                             ; CODE XREF: .text:0041B197↓j
.text:0041B17F                 inc     ecx
.text:0041B180                 add     edx, 3
.text:0041B183                 jmp     loc_41B0DA
.text:0041B188 ; ---------------------------------------------------------------------------
.text:0041B188
.text:0041B188 loc_41B188:                             ; CODE XREF: .text:0041B149↑j
.text:0041B188                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041B18C                 jnz     short loc_41B14B
.text:0041B18E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041B192                 jnz     short loc_41B14B
.text:0041B194                 mov     byte ptr [ecx], 20h ; ' '
.text:0041B197                 jmp     short loc_41B17F
.text:0041B199 ; ---------------------------------------------------------------------------
.text:0041B199
.text:0041B199 loc_41B199:                             ; CODE XREF: .text:0041B0A1↑j
.text:0041B199                 mov     dword ptr [esp+4], 41AEBAh
.text:0041B1A1                 mov     [esp], eax
.text:0041B1A4                 call    strspn
.text:0041B1A9                 add     [esp+1Ch], eax
.text:0041B1AD                 jmp     loc_41B0A7
.text:0041B1B2 ; ---------------------------------------------------------------------------
.text:0041B1B2
.text:0041B1B2 loc_41B1B2:                             ; CODE XREF: .text:0041B085↑j
.text:0041B1B2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B1B6                 jz      short loc_41B1F9
.text:0041B1B8
.text:0041B1B8 loc_41B1B8:                             ; CODE XREF: .text:0041B1FD↓j
.text:0041B1B8                                         ; .text:0041B203↓j
.text:0041B1B8                 cmp     al, 5Ch ; '\'
.text:0041B1BA                 jnz     loc_41B08B
.text:0041B1C0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B1C4                 jz      short loc_41B1E1
.text:0041B1C6
.text:0041B1C6 loc_41B1C6:                             ; CODE XREF: .text:0041B1E5↓j
.text:0041B1C6                                         ; .text:0041B1EB↓j
.text:0041B1C6                 cmp     al, 5Ch ; '\'
.text:0041B1C8                 jnz     loc_41B08B
.text:0041B1CE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041B1D2                 jnz     loc_41B08B
.text:0041B1D8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041B1DB                 inc     edx
.text:0041B1DC                 jmp     loc_41B08D
.text:0041B1E1 ; ---------------------------------------------------------------------------
.text:0041B1E1
.text:0041B1E1 loc_41B1E1:                             ; CODE XREF: .text:0041B1C4↑j
.text:0041B1E1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041B1E5                 jnz     short loc_41B1C6
.text:0041B1E7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041B1EB                 jnz     short loc_41B1C6
.text:0041B1ED                 mov     byte ptr [ecx], 9
.text:0041B1F0
.text:0041B1F0 loc_41B1F0:                             ; CODE XREF: .text:0041B208↓j
.text:0041B1F0                 inc     ecx
.text:0041B1F1                 add     edx, 3
.text:0041B1F4                 jmp     loc_41B08E
.text:0041B1F9 ; ---------------------------------------------------------------------------
.text:0041B1F9
.text:0041B1F9 loc_41B1F9:                             ; CODE XREF: .text:0041B1B6↑j
.text:0041B1F9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041B1FD                 jnz     short loc_41B1B8
.text:0041B1FF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041B203                 jnz     short loc_41B1B8
.text:0041B205                 mov     byte ptr [ecx], 20h ; ' '
.text:0041B208                 jmp     short loc_41B1F0
.text:0041B20A ; ---------------------------------------------------------------------------
.text:0041B20A
.text:0041B20A loc_41B20A:                             ; CODE XREF: .text:0041B051↑j
.text:0041B20A                 mov     dword ptr [esp+4], 41AEBAh
.text:0041B212                 mov     [esp], eax
.text:0041B215                 call    strspn
.text:0041B21A                 add     [esp+1Ch], eax
.text:0041B21E                 jmp     loc_41B057
.text:0041B223 ; ---------------------------------------------------------------------------
.text:0041B223
.text:0041B223 loc_41B223:                             ; CODE XREF: .text:0041B035↑j
.text:0041B223                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B227                 jz      short loc_41B26A
.text:0041B229
.text:0041B229 loc_41B229:                             ; CODE XREF: .text:0041B26E↓j
.text:0041B229                                         ; .text:0041B274↓j
.text:0041B229                 cmp     al, 5Ch ; '\'
.text:0041B22B                 jnz     loc_41B03B
.text:0041B231                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B235                 jz      short loc_41B252
.text:0041B237
.text:0041B237 loc_41B237:                             ; CODE XREF: .text:0041B256↓j
.text:0041B237                                         ; .text:0041B25C↓j
.text:0041B237                 cmp     al, 5Ch ; '\'
.text:0041B239                 jnz     loc_41B03B
.text:0041B23F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041B243                 jnz     loc_41B03B
.text:0041B249                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041B24C                 inc     edx
.text:0041B24D                 jmp     loc_41B03D
.text:0041B252 ; ---------------------------------------------------------------------------
.text:0041B252
.text:0041B252 loc_41B252:                             ; CODE XREF: .text:0041B235↑j
.text:0041B252                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041B256                 jnz     short loc_41B237
.text:0041B258                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041B25C                 jnz     short loc_41B237
.text:0041B25E                 mov     byte ptr [ecx], 9
.text:0041B261
.text:0041B261 loc_41B261:                             ; CODE XREF: .text:0041B279↓j
.text:0041B261                 inc     ecx
.text:0041B262                 add     edx, 3
.text:0041B265                 jmp     loc_41B03E
.text:0041B26A ; ---------------------------------------------------------------------------
.text:0041B26A
.text:0041B26A loc_41B26A:                             ; CODE XREF: .text:0041B227↑j
.text:0041B26A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041B26E                 jnz     short loc_41B229
.text:0041B270                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041B274                 jnz     short loc_41B229
.text:0041B276                 mov     byte ptr [ecx], 20h ; ' '
.text:0041B279                 jmp     short loc_41B261
.text:0041B27B ; ---------------------------------------------------------------------------
.text:0041B27B
.text:0041B27B loc_41B27B:                             ; CODE XREF: .text:0041B000↑j
.text:0041B27B                 mov     dword ptr [esp+4], 41AEBAh
.text:0041B283                 mov     [esp], eax
.text:0041B286                 call    strspn
.text:0041B28B                 add     [esp+1Ch], eax
.text:0041B28F                 jmp     loc_41B006
.text:0041B294 ; ---------------------------------------------------------------------------
.text:0041B294
.text:0041B294 loc_41B294:                             ; CODE XREF: .text:0041AFE5↑j
.text:0041B294                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B298                 jz      short loc_41B2DB
.text:0041B29A
.text:0041B29A loc_41B29A:                             ; CODE XREF: .text:0041B2DF↓j
.text:0041B29A                                         ; .text:0041B2E5↓j
.text:0041B29A                 cmp     al, 5Ch ; '\'
.text:0041B29C                 jnz     loc_41AFEB
.text:0041B2A2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041B2A6                 jz      short loc_41B2C3
.text:0041B2A8
.text:0041B2A8 loc_41B2A8:                             ; CODE XREF: .text:0041B2C7↓j
.text:0041B2A8                                         ; .text:0041B2CD↓j
.text:0041B2A8                 cmp     al, 5Ch ; '\'
.text:0041B2AA                 jnz     loc_41AFEB
.text:0041B2B0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041B2B4                 jnz     loc_41AFEB
.text:0041B2BA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041B2BD                 inc     edx
.text:0041B2BE                 jmp     loc_41AFED
.text:0041B2C3 ; ---------------------------------------------------------------------------
.text:0041B2C3
.text:0041B2C3 loc_41B2C3:                             ; CODE XREF: .text:0041B2A6↑j
.text:0041B2C3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041B2C7                 jnz     short loc_41B2A8
.text:0041B2C9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041B2CD                 jnz     short loc_41B2A8
.text:0041B2CF                 mov     byte ptr [ecx], 9
.text:0041B2D2
.text:0041B2D2 loc_41B2D2:                             ; CODE XREF: .text:0041B2EA↓j
.text:0041B2D2                 inc     ecx
.text:0041B2D3                 add     edx, 3
.text:0041B2D6                 jmp     loc_41AFEE
.text:0041B2DB ; ---------------------------------------------------------------------------
.text:0041B2DB
.text:0041B2DB loc_41B2DB:                             ; CODE XREF: .text:0041B298↑j
.text:0041B2DB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041B2DF                 jnz     short loc_41B29A
.text:0041B2E1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041B2E5                 jnz     short loc_41B29A
.text:0041B2E7                 mov     byte ptr [ecx], 20h ; ' '
.text:0041B2EA                 jmp     short loc_41B2D2
.text:0041B2EA ; ---------------------------------------------------------------------------
.text:0041B2EC                 align 10h
.text:0041B2F0
.text:0041B2F0 loc_41B2F0:                             ; CODE XREF: .text:0041AF02↑j
.text:0041B2F0                 mov     dword ptr [esp+4], 0
.text:0041B2F8                 mov     dword ptr [esp], 0
.text:0041B2FF                 call    GetLogicalDriveStringsA
.text:0041B304                 sub     esp, 8
.text:0041B307                 mov     ebx, eax
.text:0041B309                 call    GetProcessHeap
.text:0041B30E                 mov     [esp], eax
.text:0041B311                 mov     [esp+8], ebx
.text:0041B315                 mov     dword ptr [esp+4], 0
.text:0041B31D                 call    HeapAlloc
.text:0041B322                 sub     esp, 0Ch
.text:0041B325                 mov     esi, eax
.text:0041B327                 mov     [esp+4], eax
.text:0041B32B                 mov     [esp], ebx
.text:0041B32E                 call    GetLogicalDriveStringsA
.text:0041B333                 mov     off_4200C4, esi ; "notset"
.text:0041B339                 sub     esp, 8
.text:0041B33C                 jmp     loc_41AF08
.text:0041B33C ; ---------------------------------------------------------------------------
.text:0041B341 ; const char aSSSSDD[]
.text:0041B341 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0041B341                                         ; DATA XREF: .text:0041B480↓o
.text:0041B341                                         ; ___addmntentstr+F0↓o
.text:0041B354                 align 10h
.text:0041B360                 push    esi
.text:0041B361                 push    ebx
.text:0041B362                 sub     esp, 44h
.text:0041B365                 mov     ebx, [esp+54h]
.text:0041B369                 mov     esi, [esp+50h]
.text:0041B36D                 mov     edx, [ebx]
.text:0041B36F                 mov     [esp+20h], edx
.text:0041B373                 mov     ecx, [ebx+4]
.text:0041B376                 mov     [esp+24h], ecx
.text:0041B37A                 mov     edx, [ebx+8]
.text:0041B37D                 mov     [esp+28h], edx
.text:0041B381                 mov     ecx, [ebx+0Ch]
.text:0041B384                 mov     [esp+2Ch], ecx
.text:0041B388                 mov     edx, [ebx+10h]
.text:0041B38B                 mov     [esp+30h], edx
.text:0041B38F                 mov     ecx, [ebx+14h]
.text:0041B392                 mov     dword ptr [esp+8], 2
.text:0041B39A                 mov     dword ptr [esp+4], 0
.text:0041B3A2                 mov     [esp+34h], ecx
.text:0041B3A6                 mov     [esp], esi
.text:0041B3A9                 call    sub_41C7E0
.text:0041B3AE ; ---------------------------------------------------------------------------
.text:0041B3AE                 test    eax, eax
.text:0041B3B0                 mov     edx, 1
.text:0041B3B5                 jnz     loc_41B4B5
.text:0041B3BB                 mov     ebx, [esp+20h]
.text:0041B3BF                 mov     edx, ebx
.text:0041B3C1                 movzx   eax, byte ptr [ebx]
.text:0041B3C4                 test    al, al
.text:0041B3C6                 jz      short loc_41B3F0
.text:0041B3C8                 nop
.text:0041B3C9                 lea     esi, [esi+0]
.text:0041B3D0
.text:0041B3D0 loc_41B3D0:                             ; CODE XREF: .text:0041B3EE↓j
.text:0041B3D0                 cmp     al, 20h ; ' '
.text:0041B3D2                 jz      loc_41B62A
.text:0041B3D8                 cmp     al, 9
.text:0041B3DA                 jz      loc_41B62A
.text:0041B3E0                 cmp     al, 5Ch ; '\'
.text:0041B3E2                 jz      loc_41B62A
.text:0041B3E8                 inc     ebx
.text:0041B3E9                 movzx   eax, byte ptr [ebx]
.text:0041B3EC                 test    al, al
.text:0041B3EE                 jnz     short loc_41B3D0
.text:0041B3F0
.text:0041B3F0 loc_41B3F0:                             ; CODE XREF: .text:0041B3C6↑j
.text:0041B3F0                                         ; .text:0041B62C↓j ...
.text:0041B3F0                 mov     ebx, [esp+24h]
.text:0041B3F4                 mov     edx, ebx
.text:0041B3F6                 movzx   eax, byte ptr [ebx]
.text:0041B3F9                 test    al, al
.text:0041B3FB                 jz      short loc_41B420
.text:0041B3FD                 lea     esi, [esi+0]
.text:0041B400
.text:0041B400 loc_41B400:                             ; CODE XREF: .text:0041B41E↓j
.text:0041B400                 cmp     al, 20h ; ' '
.text:0041B402                 jz      loc_41B5AA
.text:0041B408                 cmp     al, 9
.text:0041B40A                 jz      loc_41B5AA
.text:0041B410                 cmp     al, 5Ch ; '\'
.text:0041B412                 jz      loc_41B5AA
.text:0041B418                 inc     ebx
.text:0041B419                 movzx   eax, byte ptr [ebx]
.text:0041B41C                 test    al, al
.text:0041B41E                 jnz     short loc_41B400
.text:0041B420
.text:0041B420 loc_41B420:                             ; CODE XREF: .text:0041B3FB↑j
.text:0041B420                                         ; .text:0041B5AC↓j ...
.text:0041B420                 mov     ebx, [esp+28h]
.text:0041B424                 mov     edx, ebx
.text:0041B426                 movzx   eax, byte ptr [ebx]
.text:0041B429                 test    al, al
.text:0041B42B                 jz      short loc_41B450
.text:0041B42D                 lea     esi, [esi+0]
.text:0041B430
.text:0041B430 loc_41B430:                             ; CODE XREF: .text:0041B44E↓j
.text:0041B430                 cmp     al, 20h ; ' '
.text:0041B432                 jz      loc_41B52E
.text:0041B438                 cmp     al, 9
.text:0041B43A                 jz      loc_41B52E
.text:0041B440                 cmp     al, 5Ch ; '\'
.text:0041B442                 jz      loc_41B52E
.text:0041B448                 inc     ebx
.text:0041B449                 movzx   eax, byte ptr [ebx]
.text:0041B44C                 test    al, al
.text:0041B44E                 jnz     short loc_41B430
.text:0041B450
.text:0041B450 loc_41B450:                             ; CODE XREF: .text:0041B42B↑j
.text:0041B450                                         ; .text:0041B530↓j ...
.text:0041B450                 mov     edx, [esp+2Ch]
.text:0041B454                 mov     ebx, edx
.text:0041B456                 movzx   eax, byte ptr [edx]
.text:0041B459                 test    al, al
.text:0041B45B                 jz      short loc_41B474
.text:0041B45D                 lea     esi, [esi+0]
.text:0041B460
.text:0041B460 loc_41B460:                             ; CODE XREF: .text:0041B472↓j
.text:0041B460                 cmp     al, 20h ; ' '
.text:0041B462                 jz      short loc_41B4BD
.text:0041B464                 cmp     al, 9
.text:0041B466                 jz      short loc_41B4BD
.text:0041B468                 cmp     al, 5Ch ; '\'
.text:0041B46A                 jz      short loc_41B4BD
.text:0041B46C                 inc     ebx
.text:0041B46D                 movzx   eax, byte ptr [ebx]
.text:0041B470                 test    al, al
.text:0041B472                 jnz     short loc_41B460
.text:0041B474
.text:0041B474 loc_41B474:                             ; CODE XREF: .text:0041B45B↑j
.text:0041B474                                         ; .text:0041B4BF↓j ...
.text:0041B474                 mov     [esp+14h], edx
.text:0041B478                 mov     ecx, [esp+34h]
.text:0041B47C                 mov     ebx, [esp+30h]
.text:0041B480                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041B488                 mov     edx, [esp+24h]
.text:0041B48C                 mov     [esp+1Ch], ecx
.text:0041B490                 mov     ecx, [esp+28h]
.text:0041B494                 mov     [esp+18h], ebx
.text:0041B498                 mov     ebx, [esp+20h]
.text:0041B49C                 mov     [esp+0Ch], edx
.text:0041B4A0                 mov     [esp+10h], ecx
.text:0041B4A4                 mov     [esp+8], ebx
.text:0041B4A8                 mov     [esp], esi
.text:0041B4AB                 call    fprintf
.text:0041B4B0                 mov     edx, eax
.text:0041B4B2                 shr     edx, 1Fh
.text:0041B4B5
.text:0041B4B5 loc_41B4B5:                             ; CODE XREF: .text:0041B3B5↑j
.text:0041B4B5                 add     esp, 44h
.text:0041B4B8                 mov     eax, edx
.text:0041B4BA                 pop     ebx
.text:0041B4BB                 pop     esi
.text:0041B4BC                 retn
.text:0041B4BD ; ---------------------------------------------------------------------------
.text:0041B4BD
.text:0041B4BD loc_41B4BD:                             ; CODE XREF: .text:0041B462↑j
.text:0041B4BD                                         ; .text:0041B466↑j ...
.text:0041B4BD                 test    al, al
.text:0041B4BF                 jz      short loc_41B474
.text:0041B4C1                 mov     [esp], edx
.text:0041B4C4                 mov     ebx, edx
.text:0041B4C6                 call    strlen
.text:0041B4CB                 lea     edx, ds:1[eax*4]
.text:0041B4D2                 mov     [esp], edx
.text:0041B4D5                 call    malloc
.text:0041B4DA                 mov     [esp+2Ch], eax
.text:0041B4DE                 mov     edx, eax
.text:0041B4E0
.text:0041B4E0 loc_41B4E0:                             ; CODE XREF: .text:0041B4F8↓j
.text:0041B4E0                 movzx   eax, byte ptr [ebx]
.text:0041B4E3                 cmp     al, 20h ; ' '
.text:0041B4E5                 jz      short loc_41B51D
.text:0041B4E7                 cmp     al, 9
.text:0041B4E9                 jz      short loc_41B50C
.text:0041B4EB                 cmp     al, 5Ch ; '\'
.text:0041B4ED                 jz      short loc_41B503
.text:0041B4EF                 mov     [edx], al
.text:0041B4F1
.text:0041B4F1 loc_41B4F1:                             ; CODE XREF: .text:0041B50A↓j
.text:0041B4F1                                         ; .text:0041B51B↓j ...
.text:0041B4F1                 movzx   ecx, byte ptr [ebx]
.text:0041B4F4                 inc     edx
.text:0041B4F5                 inc     ebx
.text:0041B4F6                 test    cl, cl
.text:0041B4F8                 jnz     short loc_41B4E0
.text:0041B4FA                 mov     edx, [esp+2Ch]
.text:0041B4FE                 jmp     loc_41B474
.text:0041B503 ; ---------------------------------------------------------------------------
.text:0041B503
.text:0041B503 loc_41B503:                             ; CODE XREF: .text:0041B4ED↑j
.text:0041B503                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B506                 inc     edx
.text:0041B507                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B50A                 jmp     short loc_41B4F1
.text:0041B50C ; ---------------------------------------------------------------------------
.text:0041B50C
.text:0041B50C loc_41B50C:                             ; CODE XREF: .text:0041B4E9↑j
.text:0041B50C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B50F                 inc     edx
.text:0041B510                 mov     byte ptr [edx], 30h ; '0'
.text:0041B513                 inc     edx
.text:0041B514                 mov     byte ptr [edx], 31h ; '1'
.text:0041B517                 inc     edx
.text:0041B518                 mov     byte ptr [edx], 32h ; '2'
.text:0041B51B                 jmp     short loc_41B4F1
.text:0041B51D ; ---------------------------------------------------------------------------
.text:0041B51D
.text:0041B51D loc_41B51D:                             ; CODE XREF: .text:0041B4E5↑j
.text:0041B51D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B520                 inc     edx
.text:0041B521                 mov     byte ptr [edx], 30h ; '0'
.text:0041B524                 inc     edx
.text:0041B525                 mov     byte ptr [edx], 34h ; '4'
.text:0041B528                 inc     edx
.text:0041B529                 mov     byte ptr [edx], 30h ; '0'
.text:0041B52C                 jmp     short loc_41B4F1
.text:0041B52E ; ---------------------------------------------------------------------------
.text:0041B52E
.text:0041B52E loc_41B52E:                             ; CODE XREF: .text:0041B432↑j
.text:0041B52E                                         ; .text:0041B43A↑j ...
.text:0041B52E                 test    al, al
.text:0041B530                 jz      loc_41B450
.text:0041B536                 mov     [esp], edx
.text:0041B539                 mov     ebx, edx
.text:0041B53B                 call    strlen
.text:0041B540                 lea     edx, ds:1[eax*4]
.text:0041B547                 mov     [esp], edx
.text:0041B54A                 call    malloc
.text:0041B54F                 mov     [esp+28h], eax
.text:0041B553                 mov     edx, eax
.text:0041B555                 lea     esi, [esi+0]
.text:0041B559                 lea     edi, [edi+0]
.text:0041B560
.text:0041B560 loc_41B560:                             ; CODE XREF: .text:0041B578↓j
.text:0041B560                 movzx   eax, byte ptr [ebx]
.text:0041B563                 cmp     al, 20h ; ' '
.text:0041B565                 jz      short loc_41B599
.text:0041B567                 cmp     al, 9
.text:0041B569                 jz      short loc_41B588
.text:0041B56B                 cmp     al, 5Ch ; '\'
.text:0041B56D                 jz      short loc_41B57F
.text:0041B56F                 mov     [edx], al
.text:0041B571
.text:0041B571 loc_41B571:                             ; CODE XREF: .text:0041B586↓j
.text:0041B571                                         ; .text:0041B597↓j ...
.text:0041B571                 movzx   ecx, byte ptr [ebx]
.text:0041B574                 inc     edx
.text:0041B575                 inc     ebx
.text:0041B576                 test    cl, cl
.text:0041B578                 jnz     short loc_41B560
.text:0041B57A                 jmp     loc_41B450
.text:0041B57F ; ---------------------------------------------------------------------------
.text:0041B57F
.text:0041B57F loc_41B57F:                             ; CODE XREF: .text:0041B56D↑j
.text:0041B57F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B582                 inc     edx
.text:0041B583                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B586                 jmp     short loc_41B571
.text:0041B588 ; ---------------------------------------------------------------------------
.text:0041B588
.text:0041B588 loc_41B588:                             ; CODE XREF: .text:0041B569↑j
.text:0041B588                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B58B                 inc     edx
.text:0041B58C                 mov     byte ptr [edx], 30h ; '0'
.text:0041B58F                 inc     edx
.text:0041B590                 mov     byte ptr [edx], 31h ; '1'
.text:0041B593                 inc     edx
.text:0041B594                 mov     byte ptr [edx], 32h ; '2'
.text:0041B597                 jmp     short loc_41B571
.text:0041B599 ; ---------------------------------------------------------------------------
.text:0041B599
.text:0041B599 loc_41B599:                             ; CODE XREF: .text:0041B565↑j
.text:0041B599                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B59C                 inc     edx
.text:0041B59D                 mov     byte ptr [edx], 30h ; '0'
.text:0041B5A0                 inc     edx
.text:0041B5A1                 mov     byte ptr [edx], 34h ; '4'
.text:0041B5A4                 inc     edx
.text:0041B5A5                 mov     byte ptr [edx], 30h ; '0'
.text:0041B5A8                 jmp     short loc_41B571
.text:0041B5AA ; ---------------------------------------------------------------------------
.text:0041B5AA
.text:0041B5AA loc_41B5AA:                             ; CODE XREF: .text:0041B402↑j
.text:0041B5AA                                         ; .text:0041B40A↑j ...
.text:0041B5AA                 test    al, al
.text:0041B5AC                 jz      loc_41B420
.text:0041B5B2                 mov     [esp], edx
.text:0041B5B5                 mov     ebx, edx
.text:0041B5B7                 call    strlen
.text:0041B5BC                 lea     edx, ds:1[eax*4]
.text:0041B5C3                 mov     [esp], edx
.text:0041B5C6                 call    malloc
.text:0041B5CB                 mov     [esp+24h], eax
.text:0041B5CF                 mov     edx, eax
.text:0041B5D1                 jmp     short loc_41B5E0
.text:0041B5D1 ; ---------------------------------------------------------------------------
.text:0041B5D3                 align 10h
.text:0041B5E0
.text:0041B5E0 loc_41B5E0:                             ; CODE XREF: .text:0041B5D1↑j
.text:0041B5E0                                         ; .text:0041B5F8↓j
.text:0041B5E0                 movzx   eax, byte ptr [ebx]
.text:0041B5E3                 cmp     al, 20h ; ' '
.text:0041B5E5                 jz      short loc_41B619
.text:0041B5E7                 cmp     al, 9
.text:0041B5E9                 jz      short loc_41B608
.text:0041B5EB                 cmp     al, 5Ch ; '\'
.text:0041B5ED                 jz      short loc_41B5FF
.text:0041B5EF                 mov     [edx], al
.text:0041B5F1
.text:0041B5F1 loc_41B5F1:                             ; CODE XREF: .text:0041B606↓j
.text:0041B5F1                                         ; .text:0041B617↓j ...
.text:0041B5F1                 movzx   ecx, byte ptr [ebx]
.text:0041B5F4                 inc     edx
.text:0041B5F5                 inc     ebx
.text:0041B5F6                 test    cl, cl
.text:0041B5F8                 jnz     short loc_41B5E0
.text:0041B5FA                 jmp     loc_41B420
.text:0041B5FF ; ---------------------------------------------------------------------------
.text:0041B5FF
.text:0041B5FF loc_41B5FF:                             ; CODE XREF: .text:0041B5ED↑j
.text:0041B5FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B602                 inc     edx
.text:0041B603                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B606                 jmp     short loc_41B5F1
.text:0041B608 ; ---------------------------------------------------------------------------
.text:0041B608
.text:0041B608 loc_41B608:                             ; CODE XREF: .text:0041B5E9↑j
.text:0041B608                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B60B                 inc     edx
.text:0041B60C                 mov     byte ptr [edx], 30h ; '0'
.text:0041B60F                 inc     edx
.text:0041B610                 mov     byte ptr [edx], 31h ; '1'
.text:0041B613                 inc     edx
.text:0041B614                 mov     byte ptr [edx], 32h ; '2'
.text:0041B617                 jmp     short loc_41B5F1
.text:0041B619 ; ---------------------------------------------------------------------------
.text:0041B619
.text:0041B619 loc_41B619:                             ; CODE XREF: .text:0041B5E5↑j
.text:0041B619                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B61C                 inc     edx
.text:0041B61D                 mov     byte ptr [edx], 30h ; '0'
.text:0041B620                 inc     edx
.text:0041B621                 mov     byte ptr [edx], 34h ; '4'
.text:0041B624                 inc     edx
.text:0041B625                 mov     byte ptr [edx], 30h ; '0'
.text:0041B628                 jmp     short loc_41B5F1
.text:0041B62A ; ---------------------------------------------------------------------------
.text:0041B62A
.text:0041B62A loc_41B62A:                             ; CODE XREF: .text:0041B3D2↑j
.text:0041B62A                                         ; .text:0041B3DA↑j ...
.text:0041B62A                 test    al, al
.text:0041B62C                 jz      loc_41B3F0
.text:0041B632                 mov     [esp], edx
.text:0041B635                 mov     ebx, edx
.text:0041B637                 call    strlen
.text:0041B63C                 lea     ecx, ds:1[eax*4]
.text:0041B643                 mov     [esp], ecx
.text:0041B646                 call    malloc
.text:0041B64B                 mov     [esp+20h], eax
.text:0041B64F                 mov     edx, eax
.text:0041B651                 jmp     short loc_41B660
.text:0041B651 ; ---------------------------------------------------------------------------
.text:0041B653                 align 10h
.text:0041B660
.text:0041B660 loc_41B660:                             ; CODE XREF: .text:0041B651↑j
.text:0041B660                                         ; .text:0041B678↓j
.text:0041B660                 movzx   eax, byte ptr [ebx]
.text:0041B663                 cmp     al, 20h ; ' '
.text:0041B665                 jz      short loc_41B699
.text:0041B667                 cmp     al, 9
.text:0041B669                 jz      short loc_41B688
.text:0041B66B                 cmp     al, 5Ch ; '\'
.text:0041B66D                 jz      short loc_41B67F
.text:0041B66F                 mov     [edx], al
.text:0041B671
.text:0041B671 loc_41B671:                             ; CODE XREF: .text:0041B686↓j
.text:0041B671                                         ; .text:0041B697↓j ...
.text:0041B671                 movzx   ecx, byte ptr [ebx]
.text:0041B674                 inc     edx
.text:0041B675                 inc     ebx
.text:0041B676                 test    cl, cl
.text:0041B678                 jnz     short loc_41B660
.text:0041B67A                 jmp     loc_41B3F0
.text:0041B67F ; ---------------------------------------------------------------------------
.text:0041B67F
.text:0041B67F loc_41B67F:                             ; CODE XREF: .text:0041B66D↑j
.text:0041B67F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B682                 inc     edx
.text:0041B683                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B686                 jmp     short loc_41B671
.text:0041B688 ; ---------------------------------------------------------------------------
.text:0041B688
.text:0041B688 loc_41B688:                             ; CODE XREF: .text:0041B669↑j
.text:0041B688                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B68B                 inc     edx
.text:0041B68C                 mov     byte ptr [edx], 30h ; '0'
.text:0041B68F                 inc     edx
.text:0041B690                 mov     byte ptr [edx], 31h ; '1'
.text:0041B693                 inc     edx
.text:0041B694                 mov     byte ptr [edx], 32h ; '2'
.text:0041B697                 jmp     short loc_41B671
.text:0041B699 ; ---------------------------------------------------------------------------
.text:0041B699
.text:0041B699 loc_41B699:                             ; CODE XREF: .text:0041B665↑j
.text:0041B699                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B69C                 inc     edx
.text:0041B69D                 mov     byte ptr [edx], 30h ; '0'
.text:0041B6A0                 inc     edx
.text:0041B6A1                 mov     byte ptr [edx], 34h ; '4'
.text:0041B6A4                 inc     edx
.text:0041B6A5                 mov     byte ptr [edx], 30h ; '0'
.text:0041B6A8                 jmp     short loc_41B671
.text:0041B6A8 ; ---------------------------------------------------------------------------
.text:0041B6AA                 align 10h
.text:0041B6B0
.text:0041B6B0 ; =============== S U B R O U T I N E =======================================
.text:0041B6B0
.text:0041B6B0 ; Attributes: info_from_lumina
.text:0041B6B0
.text:0041B6B0 ; int __cdecl __addmntentstr(char *, int)
.text:0041B6B0 ___addmntentstr proc near               ; CODE XREF: .text:0041AF7A↑p
.text:0041B6B0
.text:0041B6B0 Buffer          = dword ptr -4Ch
.text:0041B6B0 Format          = dword ptr -48h
.text:0041B6B0 var_44          = dword ptr -44h
.text:0041B6B0 var_40          = dword ptr -40h
.text:0041B6B0 var_3C          = dword ptr -3Ch
.text:0041B6B0 var_38          = dword ptr -38h
.text:0041B6B0 var_34          = dword ptr -34h
.text:0041B6B0 var_30          = dword ptr -30h
.text:0041B6B0 var_2C          = dword ptr -2Ch
.text:0041B6B0 var_28          = dword ptr -28h
.text:0041B6B0 var_24          = dword ptr -24h
.text:0041B6B0 Str             = dword ptr -20h
.text:0041B6B0 var_1C          = dword ptr -1Ch
.text:0041B6B0 var_18          = dword ptr -18h
.text:0041B6B0 arg_0           = dword ptr  4
.text:0041B6B0 arg_4           = dword ptr  8
.text:0041B6B0
.text:0041B6B0                 push    ebx
.text:0041B6B1                 sub     esp, 48h
.text:0041B6B4                 mov     edx, [esp+4Ch+arg_4]
.text:0041B6B8                 mov     ecx, [edx]
.text:0041B6BA                 mov     [esp+4Ch+var_2C], ecx
.text:0041B6BE                 mov     ebx, [edx+4]
.text:0041B6C1                 mov     [esp+4Ch+var_28], ebx
.text:0041B6C5                 mov     ebx, [edx+8]
.text:0041B6C8                 mov     [esp+4Ch+var_24], ebx
.text:0041B6CC                 mov     ebx, [edx+0Ch]
.text:0041B6CF                 mov     [esp+4Ch+Str], ebx
.text:0041B6D3                 mov     ebx, [edx+10h]
.text:0041B6D6                 mov     [esp+4Ch+var_1C], ebx
.text:0041B6DA                 mov     ebx, [edx+14h]
.text:0041B6DD                 mov     [esp+4Ch+var_18], ebx
.text:0041B6E1                 mov     ebx, ecx
.text:0041B6E3                 movzx   eax, byte ptr [ecx]
.text:0041B6E6                 test    al, al
.text:0041B6E8                 jz      loc_41B9D1
.text:0041B6EE                 mov     esi, esi
.text:0041B6F0
.text:0041B6F0 loc_41B6F0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0041B6F0                 cmp     al, 20h ; ' '
.text:0041B6F2                 jz      loc_41B950
.text:0041B6F8                 cmp     al, 9
.text:0041B6FA                 jz      loc_41B950
.text:0041B700                 cmp     al, 5Ch ; '\'
.text:0041B702                 jz      loc_41B950
.text:0041B708                 inc     ebx
.text:0041B709                 movzx   eax, byte ptr [ebx]
.text:0041B70C                 test    al, al
.text:0041B70E                 jnz     short loc_41B6F0
.text:0041B710
.text:0041B710 loc_41B710:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0041B710                                         ; ___addmntentstr+2EA↓j
.text:0041B710                 mov     ebx, [esp+4Ch+var_28]
.text:0041B714                 mov     edx, ebx
.text:0041B716                 movzx   eax, byte ptr [ebx]
.text:0041B719                 test    al, al
.text:0041B71B                 jz      short loc_41B740
.text:0041B71D                 lea     esi, [esi+0]
.text:0041B720
.text:0041B720 loc_41B720:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0041B720                 cmp     al, 20h ; ' '
.text:0041B722                 jz      loc_41B8CA
.text:0041B728                 cmp     al, 9
.text:0041B72A                 jz      loc_41B8CA
.text:0041B730                 cmp     al, 5Ch ; '\'
.text:0041B732                 jz      loc_41B8CA
.text:0041B738                 inc     ebx
.text:0041B739                 movzx   eax, byte ptr [ebx]
.text:0041B73C                 test    al, al
.text:0041B73E                 jnz     short loc_41B720
.text:0041B740
.text:0041B740 loc_41B740:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0041B740                                         ; ___addmntentstr+21C↓j ...
.text:0041B740                 mov     ebx, [esp+4Ch+var_24]
.text:0041B744                 mov     edx, ebx
.text:0041B746                 movzx   eax, byte ptr [ebx]
.text:0041B749                 test    al, al
.text:0041B74B                 jz      short loc_41B770
.text:0041B74D                 lea     esi, [esi+0]
.text:0041B750
.text:0041B750 loc_41B750:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0041B750                 cmp     al, 20h ; ' '
.text:0041B752                 jz      loc_41B84E
.text:0041B758                 cmp     al, 9
.text:0041B75A                 jz      loc_41B84E
.text:0041B760                 cmp     al, 5Ch ; '\'
.text:0041B762                 jz      loc_41B84E
.text:0041B768                 inc     ebx
.text:0041B769                 movzx   eax, byte ptr [ebx]
.text:0041B76C                 test    al, al
.text:0041B76E                 jnz     short loc_41B750
.text:0041B770
.text:0041B770 loc_41B770:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0041B770                                         ; ___addmntentstr+1A0↓j ...
.text:0041B770                 mov     edx, [esp+4Ch+Str]
.text:0041B774                 mov     ebx, edx
.text:0041B776                 movzx   eax, byte ptr [edx]
.text:0041B779                 test    al, al
.text:0041B77B                 jz      short loc_41B794
.text:0041B77D                 lea     esi, [esi+0]
.text:0041B780
.text:0041B780 loc_41B780:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0041B780                 cmp     al, 20h ; ' '
.text:0041B782                 jz      short loc_41B7DC
.text:0041B784                 cmp     al, 9
.text:0041B786                 jz      short loc_41B7DC
.text:0041B788                 cmp     al, 5Ch ; '\'
.text:0041B78A                 jz      short loc_41B7DC
.text:0041B78C                 inc     ebx
.text:0041B78D                 movzx   eax, byte ptr [ebx]
.text:0041B790                 test    al, al
.text:0041B792                 jnz     short loc_41B780
.text:0041B794
.text:0041B794 loc_41B794:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0041B794                                         ; ___addmntentstr+12E↓j ...
.text:0041B794                 mov     [esp+4Ch+var_38], edx
.text:0041B798                 mov     ebx, [esp+4Ch+var_18]
.text:0041B79C                 mov     ecx, [esp+4Ch+var_1C]
.text:0041B7A0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041B7A8                 mov     edx, [esp+4Ch+var_2C]
.text:0041B7AC                 mov     [esp+4Ch+var_30], ebx
.text:0041B7B0                 mov     ebx, [esp+4Ch+var_24]
.text:0041B7B4                 mov     [esp+4Ch+var_34], ecx
.text:0041B7B8                 mov     ecx, [esp+4Ch+var_28]
.text:0041B7BC                 mov     [esp+4Ch+var_3C], ebx
.text:0041B7C0                 mov     ebx, [esp+4Ch+arg_0]
.text:0041B7C4                 mov     [esp+4Ch+var_40], ecx
.text:0041B7C8                 mov     [esp+4Ch+var_44], edx
.text:0041B7CC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041B7CF                 call    sprintf
.text:0041B7D4                 add     esp, 48h
.text:0041B7D7                 shr     eax, 1Fh
.text:0041B7DA                 pop     ebx
.text:0041B7DB                 retn
.text:0041B7DC ; ---------------------------------------------------------------------------
.text:0041B7DC
.text:0041B7DC loc_41B7DC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041B7DC                                         ; ___addmntentstr+D6↑j ...
.text:0041B7DC                 test    al, al
.text:0041B7DE                 jz      short loc_41B794
.text:0041B7E0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041B7E3                 mov     ebx, edx
.text:0041B7E5                 call    strlen
.text:0041B7EA                 lea     edx, ds:1[eax*4]
.text:0041B7F1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041B7F4                 call    malloc
.text:0041B7F9                 mov     [esp+4Ch+Str], eax
.text:0041B7FD                 mov     edx, eax
.text:0041B7FF                 nop
.text:0041B800
.text:0041B800 loc_41B800:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0041B800                 movzx   eax, byte ptr [ebx]
.text:0041B803                 cmp     al, 20h ; ' '
.text:0041B805                 jz      short loc_41B83D
.text:0041B807                 cmp     al, 9
.text:0041B809                 jz      short loc_41B82C
.text:0041B80B                 cmp     al, 5Ch ; '\'
.text:0041B80D                 jz      short loc_41B823
.text:0041B80F                 mov     [edx], al
.text:0041B811
.text:0041B811 loc_41B811:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0041B811                                         ; ___addmntentstr+18B↓j ...
.text:0041B811                 movzx   ecx, byte ptr [ebx]
.text:0041B814                 inc     edx
.text:0041B815                 inc     ebx
.text:0041B816                 test    cl, cl
.text:0041B818                 jnz     short loc_41B800
.text:0041B81A                 mov     edx, [esp+4Ch+Str]
.text:0041B81E                 jmp     loc_41B794
.text:0041B823 ; ---------------------------------------------------------------------------
.text:0041B823
.text:0041B823 loc_41B823:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0041B823                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B826                 inc     edx
.text:0041B827                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B82A                 jmp     short loc_41B811
.text:0041B82C ; ---------------------------------------------------------------------------
.text:0041B82C
.text:0041B82C loc_41B82C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0041B82C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B82F                 inc     edx
.text:0041B830                 mov     byte ptr [edx], 30h ; '0'
.text:0041B833                 inc     edx
.text:0041B834                 mov     byte ptr [edx], 31h ; '1'
.text:0041B837                 inc     edx
.text:0041B838                 mov     byte ptr [edx], 32h ; '2'
.text:0041B83B                 jmp     short loc_41B811
.text:0041B83D ; ---------------------------------------------------------------------------
.text:0041B83D
.text:0041B83D loc_41B83D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0041B83D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B840                 inc     edx
.text:0041B841                 mov     byte ptr [edx], 30h ; '0'
.text:0041B844                 inc     edx
.text:0041B845                 mov     byte ptr [edx], 34h ; '4'
.text:0041B848                 inc     edx
.text:0041B849                 mov     byte ptr [edx], 30h ; '0'
.text:0041B84C                 jmp     short loc_41B811
.text:0041B84E ; ---------------------------------------------------------------------------
.text:0041B84E
.text:0041B84E loc_41B84E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0041B84E                                         ; ___addmntentstr+AA↑j ...
.text:0041B84E                 test    al, al
.text:0041B850                 jz      loc_41B770
.text:0041B856                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041B859                 mov     ebx, edx
.text:0041B85B                 call    strlen
.text:0041B860                 lea     edx, ds:1[eax*4]
.text:0041B867                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041B86A                 call    malloc
.text:0041B86F                 mov     [esp+4Ch+var_24], eax
.text:0041B873                 mov     edx, eax
.text:0041B875                 lea     esi, [esi+0]
.text:0041B879                 lea     edi, [edi+0]
.text:0041B880
.text:0041B880 loc_41B880:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0041B880                 movzx   eax, byte ptr [ebx]
.text:0041B883                 cmp     al, 20h ; ' '
.text:0041B885                 jz      short loc_41B8B9
.text:0041B887                 cmp     al, 9
.text:0041B889                 jz      short loc_41B8A8
.text:0041B88B                 cmp     al, 5Ch ; '\'
.text:0041B88D                 jz      short loc_41B89F
.text:0041B88F                 mov     [edx], al
.text:0041B891
.text:0041B891 loc_41B891:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0041B891                                         ; ___addmntentstr+207↓j ...
.text:0041B891                 movzx   ecx, byte ptr [ebx]
.text:0041B894                 inc     edx
.text:0041B895                 inc     ebx
.text:0041B896                 test    cl, cl
.text:0041B898                 jnz     short loc_41B880
.text:0041B89A                 jmp     loc_41B770
.text:0041B89F ; ---------------------------------------------------------------------------
.text:0041B89F
.text:0041B89F loc_41B89F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041B89F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B8A2                 inc     edx
.text:0041B8A3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B8A6                 jmp     short loc_41B891
.text:0041B8A8 ; ---------------------------------------------------------------------------
.text:0041B8A8
.text:0041B8A8 loc_41B8A8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0041B8A8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B8AB                 inc     edx
.text:0041B8AC                 mov     byte ptr [edx], 30h ; '0'
.text:0041B8AF                 inc     edx
.text:0041B8B0                 mov     byte ptr [edx], 31h ; '1'
.text:0041B8B3                 inc     edx
.text:0041B8B4                 mov     byte ptr [edx], 32h ; '2'
.text:0041B8B7                 jmp     short loc_41B891
.text:0041B8B9 ; ---------------------------------------------------------------------------
.text:0041B8B9
.text:0041B8B9 loc_41B8B9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0041B8B9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B8BC                 inc     edx
.text:0041B8BD                 mov     byte ptr [edx], 30h ; '0'
.text:0041B8C0                 inc     edx
.text:0041B8C1                 mov     byte ptr [edx], 34h ; '4'
.text:0041B8C4                 inc     edx
.text:0041B8C5                 mov     byte ptr [edx], 30h ; '0'
.text:0041B8C8                 jmp     short loc_41B891
.text:0041B8CA ; ---------------------------------------------------------------------------
.text:0041B8CA
.text:0041B8CA loc_41B8CA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041B8CA                                         ; ___addmntentstr+7A↑j ...
.text:0041B8CA                 test    al, al
.text:0041B8CC                 jz      loc_41B740
.text:0041B8D2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041B8D5                 mov     ebx, edx
.text:0041B8D7                 call    strlen
.text:0041B8DC                 lea     edx, ds:1[eax*4]
.text:0041B8E3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041B8E6                 call    malloc
.text:0041B8EB                 mov     [esp+4Ch+var_28], eax
.text:0041B8EF                 mov     edx, eax
.text:0041B8F1                 jmp     short loc_41B900
.text:0041B8F1 ; ---------------------------------------------------------------------------
.text:0041B8F3                 align 10h
.text:0041B900
.text:0041B900 loc_41B900:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0041B900                                         ; ___addmntentstr+268↓j
.text:0041B900                 movzx   eax, byte ptr [ebx]
.text:0041B903                 cmp     al, 20h ; ' '
.text:0041B905                 jz      short loc_41B939
.text:0041B907                 cmp     al, 9
.text:0041B909                 jz      short loc_41B928
.text:0041B90B                 cmp     al, 5Ch ; '\'
.text:0041B90D                 jz      short loc_41B91F
.text:0041B90F                 mov     [edx], al
.text:0041B911
.text:0041B911 loc_41B911:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0041B911                                         ; ___addmntentstr+287↓j ...
.text:0041B911                 movzx   ecx, byte ptr [ebx]
.text:0041B914                 inc     edx
.text:0041B915                 inc     ebx
.text:0041B916                 test    cl, cl
.text:0041B918                 jnz     short loc_41B900
.text:0041B91A                 jmp     loc_41B740
.text:0041B91F ; ---------------------------------------------------------------------------
.text:0041B91F
.text:0041B91F loc_41B91F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041B91F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B922                 inc     edx
.text:0041B923                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B926                 jmp     short loc_41B911
.text:0041B928 ; ---------------------------------------------------------------------------
.text:0041B928
.text:0041B928 loc_41B928:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0041B928                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B92B                 inc     edx
.text:0041B92C                 mov     byte ptr [edx], 30h ; '0'
.text:0041B92F                 inc     edx
.text:0041B930                 mov     byte ptr [edx], 31h ; '1'
.text:0041B933                 inc     edx
.text:0041B934                 mov     byte ptr [edx], 32h ; '2'
.text:0041B937                 jmp     short loc_41B911
.text:0041B939 ; ---------------------------------------------------------------------------
.text:0041B939
.text:0041B939 loc_41B939:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0041B939                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B93C                 inc     edx
.text:0041B93D                 mov     byte ptr [edx], 30h ; '0'
.text:0041B940                 inc     edx
.text:0041B941                 mov     byte ptr [edx], 34h ; '4'
.text:0041B944                 inc     edx
.text:0041B945                 mov     byte ptr [edx], 30h ; '0'
.text:0041B948                 jmp     short loc_41B911
.text:0041B948 ; ---------------------------------------------------------------------------
.text:0041B94A                 align 10h
.text:0041B950
.text:0041B950 loc_41B950:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0041B950                                         ; ___addmntentstr+4A↑j ...
.text:0041B950                 test    al, al
.text:0041B952                 jz      loc_41B710
.text:0041B958                 mov     ebx, [esp+4Ch+var_2C]
.text:0041B95C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0041B95F                 call    strlen
.text:0041B964                 lea     edx, ds:1[eax*4]
.text:0041B96B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041B96E                 call    malloc
.text:0041B973                 mov     [esp+4Ch+var_2C], eax
.text:0041B977                 mov     edx, eax
.text:0041B979                 lea     esi, [esi+0]
.text:0041B980
.text:0041B980 loc_41B980:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0041B980                 movzx   eax, byte ptr [ebx]
.text:0041B983                 cmp     al, 20h ; ' '
.text:0041B985                 jz      short loc_41B9C0
.text:0041B987                 cmp     al, 9
.text:0041B989                 jz      short loc_41B9A8
.text:0041B98B                 cmp     al, 5Ch ; '\'
.text:0041B98D                 jz      short loc_41B99F
.text:0041B98F                 mov     [edx], al
.text:0041B991
.text:0041B991 loc_41B991:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0041B991                                         ; ___addmntentstr+307↓j ...
.text:0041B991                 movzx   ecx, byte ptr [ebx]
.text:0041B994                 inc     edx
.text:0041B995                 inc     ebx
.text:0041B996                 test    cl, cl
.text:0041B998                 jnz     short loc_41B980
.text:0041B99A                 jmp     loc_41B710
.text:0041B99F ; ---------------------------------------------------------------------------
.text:0041B99F
.text:0041B99F loc_41B99F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041B99F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B9A2                 inc     edx
.text:0041B9A3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B9A6                 jmp     short loc_41B991
.text:0041B9A8 ; ---------------------------------------------------------------------------
.text:0041B9A8
.text:0041B9A8 loc_41B9A8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0041B9A8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B9AB                 inc     edx
.text:0041B9AC                 mov     byte ptr [edx], 30h ; '0'
.text:0041B9AF                 inc     edx
.text:0041B9B0                 mov     byte ptr [edx], 31h ; '1'
.text:0041B9B3                 inc     edx
.text:0041B9B4                 mov     byte ptr [edx], 32h ; '2'
.text:0041B9B7                 jmp     short loc_41B991
.text:0041B9B7 ; ---------------------------------------------------------------------------
.text:0041B9B9                 align 10h
.text:0041B9C0
.text:0041B9C0 loc_41B9C0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0041B9C0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041B9C3                 inc     edx
.text:0041B9C4                 mov     byte ptr [edx], 30h ; '0'
.text:0041B9C7                 inc     edx
.text:0041B9C8                 mov     byte ptr [edx], 34h ; '4'
.text:0041B9CB                 inc     edx
.text:0041B9CC                 mov     byte ptr [edx], 30h ; '0'
.text:0041B9CF                 jmp     short loc_41B991
.text:0041B9D1 ; ---------------------------------------------------------------------------
.text:0041B9D1
.text:0041B9D1 loc_41B9D1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0041B9D1                 movzx   eax, byte ptr [ecx]
.text:0041B9D4                 jmp     loc_41B950
.text:0041B9D4 ___addmntentstr endp
.text:0041B9D4
.text:0041B9D4 ; ---------------------------------------------------------------------------
.text:0041B9D9                 align 10h
.text:0041B9E0
.text:0041B9E0 ; =============== S U B R O U T I N E =======================================
.text:0041B9E0
.text:0041B9E0
.text:0041B9E0 sub_41B9E0      proc near               ; CODE XREF: sub_4186F0+99↑p
.text:0041B9E0
.text:0041B9E0 nBufferLength   = dword ptr -1Ch
.text:0041B9E0 lpBuffer        = dword ptr -18h
.text:0041B9E0 dwBytes         = dword ptr -14h
.text:0041B9E0 var_8           = dword ptr -8
.text:0041B9E0 var_4           = dword ptr -4
.text:0041B9E0
.text:0041B9E0                 sub     esp, 1Ch
.text:0041B9E3                 mov     [esp+1Ch+var_8], ebx
.text:0041B9E7                 mov     [esp+1Ch+var_4], esi
.text:0041B9EB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0041B9F3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041B9FA                 call    GetLogicalDriveStringsA
.text:0041B9FF                 sub     esp, 8
.text:0041BA02                 mov     ebx, eax
.text:0041BA04                 call    GetProcessHeap
.text:0041BA09                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041BA0C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0041BA10                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0041BA18                 call    HeapAlloc
.text:0041BA1D                 sub     esp, 0Ch
.text:0041BA20                 mov     esi, eax
.text:0041BA22                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0041BA25                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0041BA29                 call    GetLogicalDriveStringsA
.text:0041BA2E                 sub     esp, 8
.text:0041BA31                 mov     eax, esi
.text:0041BA33                 mov     ebx, [esp+1Ch+var_8]
.text:0041BA37                 mov     esi, [esp+1Ch+var_4]
.text:0041BA3B                 add     esp, 1Ch
.text:0041BA3E                 retn
.text:0041BA3E sub_41B9E0      endp
.text:0041BA3E
.text:0041BA3F
.text:0041BA3F ; =============== S U B R O U T I N E =======================================
.text:0041BA3F
.text:0041BA3F
.text:0041BA3F ; int __cdecl sub_41BA3F(char *, char *)
.text:0041BA3F sub_41BA3F      proc near               ; DATA XREF: sub_41BA3F:loc_41BACD↓o
.text:0041BA3F
.text:0041BA3F FileName        = dword ptr -1Ch
.text:0041BA3F Mode            = dword ptr -18h
.text:0041BA3F dwBytes         = dword ptr -14h
.text:0041BA3F arg_0           = dword ptr  4
.text:0041BA3F arg_4           = dword ptr  8
.text:0041BA3F
.text:0041BA3F                 ja      short $+2
.text:0041BA41
.text:0041BA41 loc_41BA41:                             ; CODE XREF: sub_41BA3F↑j
.text:0041BA41                 jmp     short loc_41BA50
.text:0041BA41 ; ---------------------------------------------------------------------------
.text:0041BA43                 align 10h
.text:0041BA50
.text:0041BA50 loc_41BA50:                             ; CODE XREF: sub_41BA3F:loc_41BA41↑j
.text:0041BA50                 push    edi
.text:0041BA51                 push    esi
.text:0041BA52                 push    ebx
.text:0041BA53                 sub     esp, 10h
.text:0041BA56                 mov     ebx, [esp+1Ch+arg_0]
.text:0041BA5A                 mov     edx, [esp+1Ch+arg_4]
.text:0041BA5E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041BA61                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0041BA65                 call    fopen
.text:0041BA6A                 test    eax, eax
.text:0041BA6C                 mov     edi, eax
.text:0041BA6E                 jz      short loc_41BACD
.text:0041BA70
.text:0041BA70 loc_41BA70:                             ; CODE XREF: sub_41BA3F+A2↓j
.text:0041BA70                                         ; sub_41BA3F+AB↓j
.text:0041BA70                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0041BA78                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041BA7F                 call    GetLogicalDriveStringsA
.text:0041BA84                 sub     esp, 8
.text:0041BA87                 mov     esi, eax
.text:0041BA89                 call    GetProcessHeap
.text:0041BA8E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0041BA91                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0041BA95                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041BA9D                 call    HeapAlloc
.text:0041BAA2                 sub     esp, 0Ch
.text:0041BAA5                 mov     ebx, eax
.text:0041BAA7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041BAAA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041BAAE                 call    GetLogicalDriveStringsA
.text:0041BAB3                 mov     off_4200C4, ebx ; "notset"
.text:0041BAB9                 sub     esp, 8
.text:0041BABC                 xor     eax, eax
.text:0041BABE                 test    ebx, ebx
.text:0041BAC0                 setz    al
.text:0041BAC3                 add     esp, 10h
.text:0041BAC6                 pop     ebx
.text:0041BAC7                 dec     eax
.text:0041BAC8                 and     eax, edi
.text:0041BACA                 pop     esi
.text:0041BACB                 pop     edi
.text:0041BACC                 retn
.text:0041BACD ; ---------------------------------------------------------------------------
.text:0041BACD
.text:0041BACD loc_41BACD:                             ; CODE XREF: sub_41BA3F+2F↑j
.text:0041BACD                 mov     [esp+1Ch+Mode], offset sub_41BA3F ; Mode
.text:0041BAD5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041BAD8                 call    fopen
.text:0041BADD                 test    eax, eax
.text:0041BADF                 mov     edi, eax
.text:0041BAE1                 jnz     short loc_41BA70
.text:0041BAE3                 call    sub_41C8F0
.text:0041BAE8                 mov     edi, eax
.text:0041BAEA                 jmp     short loc_41BA70
.text:0041BAEA sub_41BA3F      endp
.text:0041BAEA
.text:0041BAEA ; ---------------------------------------------------------------------------
.text:0041BAEC                 align 10h
.text:0041BAF0                 sub     esp, 0Ch
.text:0041BAF3                 mov     eax, [esp+10h]
.text:0041BAF7                 test    eax, eax
.text:0041BAF9                 jz      short loc_41BB03
.text:0041BAFB                 mov     [esp], eax
.text:0041BAFE                 call    fclose
.text:0041BB03
.text:0041BB03 loc_41BB03:                             ; CODE XREF: .text:0041BAF9↑j
.text:0041BB03                 call    GetProcessHeap
.text:0041BB08                 mov     [esp], eax
.text:0041BB0B                 mov     ecx, off_4200C4 ; "notset"
.text:0041BB11                 mov     dword ptr [esp+4], 0
.text:0041BB19                 mov     [esp+8], ecx
.text:0041BB1D                 call    HeapFree
.text:0041BB22                 mov     edx, off_4200C0 ; "notset"
.text:0041BB28                 sub     esp, 0Ch
.text:0041BB2B                 mov     eax, 1
.text:0041BB30                 mov     off_4200C4, edx ; "notset"
.text:0041BB36                 add     esp, 0Ch
.text:0041BB39                 retn
.text:0041BB39 ; ---------------------------------------------------------------------------
.text:0041BB3A                 align 10h
.text:0041BB40                 push    edi
.text:0041BB41                 push    esi
.text:0041BB42                 push    ebx
.text:0041BB43                 sub     esp, 10h
.text:0041BB46                 mov     edi, [esp+24h]
.text:0041BB4A                 mov     [esp], edi
.text:0041BB4D                 call    strlen
.text:0041BB52                 mov     edx, [esp+20h]
.text:0041BB56                 mov     esi, eax
.text:0041BB58                 mov     ebx, [edx+0Ch]
.text:0041BB5B                 nop
.text:0041BB5C                 lea     esi, [esi+0]
.text:0041BB60
.text:0041BB60 loc_41BB60:                             ; CODE XREF: .text:0041BB91↓j
.text:0041BB60                 mov     [esp+4], edi
.text:0041BB64                 mov     [esp], ebx
.text:0041BB67                 call    strstr
.text:0041BB6C                 test    eax, eax
.text:0041BB6E                 jz      short loc_41BB93
.text:0041BB70                 cmp     eax, ebx
.text:0041BB72                 jz      short loc_41BB95
.text:0041BB74                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0041BB78                 jz      short loc_41BBA0
.text:0041BB7A
.text:0041BB7A loc_41BB7A:                             ; CODE XREF: .text:0041BBB0↓j
.text:0041BB7A                 mov     [esp], ebx
.text:0041BB7D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0041BB85                 call    strchr
.text:0041BB8A                 test    eax, eax
.text:0041BB8C                 mov     ebx, eax
.text:0041BB8E                 jz      short loc_41BB93
.text:0041BB90                 inc     ebx
.text:0041BB91                 jmp     short loc_41BB60
.text:0041BB93 ; ---------------------------------------------------------------------------
.text:0041BB93
.text:0041BB93 loc_41BB93:                             ; CODE XREF: .text:0041BB6E↑j
.text:0041BB93                                         ; .text:0041BB8E↑j
.text:0041BB93                 xor     eax, eax
.text:0041BB95
.text:0041BB95 loc_41BB95:                             ; CODE XREF: .text:0041BB72↑j
.text:0041BB95                                         ; .text:0041BBA6↓j ...
.text:0041BB95                 add     esp, 10h
.text:0041BB98                 pop     ebx
.text:0041BB99                 pop     esi
.text:0041BB9A                 pop     edi
.text:0041BB9B                 retn
.text:0041BB9B ; ---------------------------------------------------------------------------
.text:0041BB9C                 align 10h
.text:0041BBA0
.text:0041BBA0 loc_41BBA0:                             ; CODE XREF: .text:0041BB78↑j
.text:0041BBA0                 movzx   edx, byte ptr [esi+eax]
.text:0041BBA4                 test    dl, dl
.text:0041BBA6                 jz      short loc_41BB95
.text:0041BBA8                 cmp     dl, 3Dh ; '='
.text:0041BBAB                 jz      short loc_41BB95
.text:0041BBAD                 cmp     dl, 2Ch ; ','
.text:0041BBB0                 jnz     short loc_41BB7A
.text:0041BBB2                 jmp     short loc_41BB95
.text:0041BBB2 ; ---------------------------------------------------------------------------
.text:0041BBB4                 align 10h
.text:0041BBC0                 sub     esp, 2Ch
.text:0041BBC3                 lea     edx, [esp+28h]
.text:0041BBC7                 mov     [esp+10h], edx
.text:0041BBCB                 mov     edx, [esp+30h]
.text:0041BBCF                 mov     dword ptr [esp+18h], 0
.text:0041BBD7                 mov     dword ptr [esp+14h], 0
.text:0041BBDF                 mov     dword ptr [esp+0Ch], 400h
.text:0041BBE7                 mov     [esp+8], edx
.text:0041BBEB                 mov     dword ptr [esp+4], 0
.text:0041BBF3                 mov     dword ptr [esp], 13FFh
.text:0041BBFA                 call    FormatMessageA
.text:0041BBFF                 sub     esp, 1Ch
.text:0041BC02                 mov     eax, [esp+28h]
.text:0041BC06                 add     esp, 2Ch
.text:0041BC09                 retn
.text:0041BC09 ; ---------------------------------------------------------------------------
.text:0041BC0A ; const char aSWindowsErrorL[]
.text:0041BC0A aSWindowsErrorL db '%s: Windows error %ld: %s',0Ah,0
.text:0041BC0A                                         ; DATA XREF: .text:0041BC86↓o
.text:0041BC0A                                         ; sub_41BCC0+59↓o ...
.text:0041BC25                 align 10h
.text:0041BC30                 sub     esp, 2Ch
.text:0041BC33                 lea     ecx, [esp+20h]
.text:0041BC37                 mov     [esp+28h], esi
.text:0041BC3B                 mov     esi, [esp+34h]
.text:0041BC3F                 mov     [esp+10h], ecx
.text:0041BC43                 mov     [esp+24h], ebx
.text:0041BC47                 mov     [esp+8], esi
.text:0041BC4B                 mov     dword ptr [esp+18h], 0
.text:0041BC53                 mov     dword ptr [esp+14h], 0
.text:0041BC5B                 mov     dword ptr [esp+0Ch], 400h
.text:0041BC63                 mov     dword ptr [esp+4], 0
.text:0041BC6B                 mov     dword ptr [esp], 13FFh
.text:0041BC72                 call    FormatMessageA
.text:0041BC77                 sub     esp, 1Ch
.text:0041BC7A                 mov     edx, [esp+30h]
.text:0041BC7E                 mov     [esp+0Ch], esi
.text:0041BC82                 mov     ebx, [esp+20h]
.text:0041BC86                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041BC8E                 mov     [esp+8], edx
.text:0041BC92                 mov     edx, ds:_iob
.text:0041BC98                 mov     [esp+10h], ebx
.text:0041BC9C                 add     edx, 40h ; '@'
.text:0041BC9F                 mov     [esp], edx
.text:0041BCA2                 call    fprintf
.text:0041BCA7                 mov     [esp], ebx
.text:0041BCAA                 call    LocalFree
.text:0041BCAF                 sub     esp, 4
.text:0041BCB2                 mov     ebx, [esp+24h]
.text:0041BCB6                 mov     esi, [esp+28h]
.text:0041BCBA                 add     esp, 2Ch
.text:0041BCBD                 retn
.text:0041BCBD ; ---------------------------------------------------------------------------
.text:0041BCBE                 align 10h
.text:0041BCC0
.text:0041BCC0 ; =============== S U B R O U T I N E =======================================
.text:0041BCC0
.text:0041BCC0
.text:0041BCC0 sub_41BCC0      proc near               ; CODE XREF: sub_4192C0+1A9↑p
.text:0041BCC0
.text:0041BCC0 dwFlags         = dword ptr -2Ch
.text:0041BCC0 lpSource        = dword ptr -28h
.text:0041BCC0 dwMessageId     = dword ptr -24h
.text:0041BCC0 dwLanguageId    = dword ptr -20h
.text:0041BCC0 lpBuffer        = dword ptr -1Ch
.text:0041BCC0 nSize           = dword ptr -18h
.text:0041BCC0 Arguments       = dword ptr -14h
.text:0041BCC0 Buffer          = byte ptr -0Ch
.text:0041BCC0 var_8           = dword ptr -8
.text:0041BCC0 var_4           = dword ptr -4
.text:0041BCC0 arg_0           = dword ptr  4
.text:0041BCC0
.text:0041BCC0                 sub     esp, 2Ch
.text:0041BCC3                 mov     [esp+2Ch+var_8], ebx
.text:0041BCC7                 mov     [esp+2Ch+var_4], esi
.text:0041BCCB                 call    GetLastError
.text:0041BCD0                 mov     [esp+2Ch+dwMessageId], eax ; dwMessageId
.text:0041BCD4                 lea     ecx, [esp+2Ch+Buffer]
.text:0041BCD8                 mov     esi, eax
.text:0041BCDA                 mov     [esp+2Ch+lpBuffer], ecx ; lpBuffer
.text:0041BCDE                 mov     [esp+2Ch+Arguments], 0 ; Arguments
.text:0041BCE6                 mov     [esp+2Ch+nSize], 0 ; nSize
.text:0041BCEE                 mov     [esp+2Ch+dwLanguageId], 400h ; dwLanguageId
.text:0041BCF6                 mov     [esp+2Ch+lpSource], 0 ; lpSource
.text:0041BCFE                 mov     [esp+2Ch+dwFlags], 13FFh ; dwFlags
.text:0041BD05                 call    FormatMessageA
.text:0041BD0A                 sub     esp, 1Ch
.text:0041BD0D                 mov     edx, [esp+2Ch+arg_0]
.text:0041BD11                 mov     [esp+2Ch+dwLanguageId], esi
.text:0041BD15                 mov     ebx, dword ptr [esp+2Ch+Buffer]
.text:0041BD19                 mov     [esp+2Ch+lpSource], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041BD21                 mov     [esp+2Ch+dwMessageId], edx
.text:0041BD25                 mov     edx, ds:_iob
.text:0041BD2B                 mov     [esp+2Ch+lpBuffer], ebx
.text:0041BD2F                 add     edx, 40h ; '@'
.text:0041BD32                 mov     [esp+2Ch+dwFlags], edx ; Stream
.text:0041BD35                 call    fprintf
.text:0041BD3A                 mov     [esp+2Ch+dwFlags], ebx ; hMem
.text:0041BD3D                 call    LocalFree
.text:0041BD42                 sub     esp, 4
.text:0041BD45                 mov     ebx, [esp+2Ch+var_8]
.text:0041BD49                 mov     esi, [esp+2Ch+var_4]
.text:0041BD4D                 add     esp, 2Ch
.text:0041BD50                 retn
.text:0041BD50 sub_41BCC0      endp
.text:0041BD50
.text:0041BD50 ; ---------------------------------------------------------------------------
.text:0041BD51 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .text:0041BD83↓o
.text:0041BD51                                         ; .text:0041BDDB↓o
.text:0041BD5B aRtlntstatustod db 'RtlNtStatusToDosError',0
.text:0041BD5B                                         ; DATA XREF: .text:0041BD92↓o
.text:0041BD5B                                         ; .text:0041BDEA↓o
.text:0041BD71 ; ---------------------------------------------------------------------------
.text:0041BD71                 jmp     short loc_41BD80
.text:0041BD71 ; ---------------------------------------------------------------------------
.text:0041BD73                 align 10h
.text:0041BD80
.text:0041BD80 loc_41BD80:                             ; CODE XREF: .text:0041BD71↑j
.text:0041BD80                 sub     esp, 0Ch
.text:0041BD83                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:0041BD8A                 call    GetModuleHandleA
.text:0041BD8F                 sub     esp, 4
.text:0041BD92                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:0041BD9A                 mov     [esp], eax
.text:0041BD9D                 call    GetProcAddress
.text:0041BDA2                 sub     esp, 8
.text:0041BDA5                 test    eax, eax
.text:0041BDA7                 jz      short loc_41BDC0
.text:0041BDA9                 mov     ecx, [esp+10h]
.text:0041BDAD                 mov     [esp], ecx
.text:0041BDB0                 call    eax
.text:0041BDB2                 sub     esp, 4
.text:0041BDB5                 mov     [esp], eax
.text:0041BDB8                 call    SetLastError
.text:0041BDBD                 sub     esp, 4
.text:0041BDC0
.text:0041BDC0 loc_41BDC0:                             ; CODE XREF: .text:0041BDA7↑j
.text:0041BDC0                 add     esp, 0Ch
.text:0041BDC3                 retn
.text:0041BDC3 ; ---------------------------------------------------------------------------
.text:0041BDC4                 align 10h
.text:0041BDD0                 sub     esp, 2Ch
.text:0041BDD3                 mov     [esp+24h], ebx
.text:0041BDD7                 mov     [esp+28h], esi
.text:0041BDDB                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:0041BDE2                 call    GetModuleHandleA
.text:0041BDE7                 sub     esp, 4
.text:0041BDEA                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:0041BDF2                 mov     [esp], eax
.text:0041BDF5                 call    GetProcAddress
.text:0041BDFA                 sub     esp, 8
.text:0041BDFD                 test    eax, eax
.text:0041BDFF                 jz      loc_41BE86
.text:0041BE05                 mov     ebx, [esp+34h]
.text:0041BE09                 mov     [esp], ebx
.text:0041BE0C                 call    eax
.text:0041BE0E                 sub     esp, 4
.text:0041BE11                 mov     esi, eax
.text:0041BE13                 lea     ecx, [esp+20h]
.text:0041BE17                 mov     [esp+10h], ecx
.text:0041BE1B                 mov     dword ptr [esp+18h], 0
.text:0041BE23                 mov     dword ptr [esp+14h], 0
.text:0041BE2B                 mov     dword ptr [esp+0Ch], 400h
.text:0041BE33                 mov     [esp+8], eax
.text:0041BE37                 mov     dword ptr [esp+4], 0
.text:0041BE3F                 mov     dword ptr [esp], 13FFh
.text:0041BE46                 call    FormatMessageA
.text:0041BE4B                 sub     esp, 1Ch
.text:0041BE4E                 mov     edx, [esp+30h]
.text:0041BE52                 mov     [esp+0Ch], esi
.text:0041BE56                 mov     ebx, [esp+20h]
.text:0041BE5A                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041BE62                 mov     [esp+8], edx
.text:0041BE66                 mov     edx, ds:_iob
.text:0041BE6C                 mov     [esp+10h], ebx
.text:0041BE70                 add     edx, 40h ; '@'
.text:0041BE73                 mov     [esp], edx
.text:0041BE76                 call    fprintf
.text:0041BE7B                 mov     [esp], ebx
.text:0041BE7E                 call    LocalFree
.text:0041BE83                 sub     esp, 4
.text:0041BE86
.text:0041BE86 loc_41BE86:                             ; CODE XREF: .text:0041BDFF↑j
.text:0041BE86                 mov     ebx, [esp+24h]
.text:0041BE8A                 mov     esi, [esp+28h]
.text:0041BE8E                 add     esp, 2Ch
.text:0041BE91                 retn
.text:0041BE91 ; ---------------------------------------------------------------------------
.text:0041BE92                 align 10h
.text:0041BEA0
.text:0041BEA0 ; =============== S U B R O U T I N E =======================================
.text:0041BEA0
.text:0041BEA0
.text:0041BEA0 ; int __cdecl sub_41BEA0(HANDLE, LPCSTR lpFileName, int)
.text:0041BEA0 sub_41BEA0      proc near               ; CODE XREF: sub_419CF0+22↑p
.text:0041BEA0                                         ; sub_41BFA0+5F↓p
.text:0041BEA0
.text:0041BEA0 hFile           = dword ptr -3Ch
.text:0041BEA0 lpCreationTime  = dword ptr -38h
.text:0041BEA0 lpLastAccessTime= dword ptr -34h
.text:0041BEA0 lpLastWriteTime = dword ptr -30h
.text:0041BEA0 LastWriteTime   = FILETIME ptr -24h
.text:0041BEA0 LastAccessTime  = FILETIME ptr -1Ch
.text:0041BEA0 arg_0           = dword ptr  4
.text:0041BEA0 lpFileName      = dword ptr  8
.text:0041BEA0 arg_8           = dword ptr  0Ch
.text:0041BEA0
.text:0041BEA0                 push    ebp
.text:0041BEA1                 push    edi
.text:0041BEA2                 push    esi
.text:0041BEA3                 push    ebx
.text:0041BEA4                 sub     esp, 2Ch
.text:0041BEA7                 mov     ebp, [esp+3Ch+arg_0]
.text:0041BEAB                 mov     edi, [esp+3Ch+arg_8]
.text:0041BEAF                 cmp     ebp, 0FFFFFFFFh
.text:0041BEB2                 jz      loc_41BF81
.text:0041BEB8                 test    edi, edi
.text:0041BEBA                 jz      loc_41BF60
.text:0041BEC0                 mov     eax, [edi]
.text:0041BEC2                 mov     esi, 989680h
.text:0041BEC7                 imul    esi
.text:0041BEC9                 mov     ebx, edx
.text:0041BECB                 mov     ecx, eax
.text:0041BECD                 mov     edx, [edi+4]
.text:0041BED0                 lea     eax, [edx+edx*4]
.text:0041BED3                 add     eax, eax
.text:0041BED5                 cdq
.text:0041BED6                 add     ecx, eax
.text:0041BED8                 adc     ebx, edx
.text:0041BEDA                 add     ecx, 0D53E8000h
.text:0041BEE0                 adc     ebx, 19DB1DEh
.text:0041BEE6                 mov     [esp+3Ch+LastAccessTime.dwLowDateTime], ecx
.text:0041BEEA                 mov     [esp+3Ch+LastAccessTime.dwHighDateTime], ebx
.text:0041BEEE                 mov     eax, [edi+8]
.text:0041BEF1                 imul    esi
.text:0041BEF3                 mov     ecx, edx
.text:0041BEF5                 mov     esi, eax
.text:0041BEF7                 mov     edx, [edi+0Ch]
.text:0041BEFA                 lea     eax, [edx+edx*4]
.text:0041BEFD                 add     eax, eax
.text:0041BEFF                 cdq
.text:0041BF00                 add     esi, eax
.text:0041BF02                 adc     ecx, edx
.text:0041BF04                 add     esi, 0D53E8000h
.text:0041BF0A                 adc     ecx, 19DB1DEh
.text:0041BF10                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0041BF14                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], esi
.text:0041BF18
.text:0041BF18 loc_41BF18:                             ; CODE XREF: sub_41BEA0+DF↓j
.text:0041BF18                 mov     [esp+3Ch+lpCreationTime], 0 ; lpCreationTime
.text:0041BF20                 lea     eax, [esp+3Ch+LastWriteTime]
.text:0041BF24                 lea     edi, [esp+3Ch+LastAccessTime]
.text:0041BF28                 mov     [esp+3Ch+lpLastWriteTime], eax ; lpLastWriteTime
.text:0041BF2C                 mov     [esp+3Ch+lpLastAccessTime], edi ; lpLastAccessTime
.text:0041BF30                 mov     [esp+3Ch+hFile], ebp ; hFile
.text:0041BF33                 call    SetFileTime
.text:0041BF38                 sub     esp, 10h
.text:0041BF3B                 xor     edx, edx
.text:0041BF3D                 test    eax, eax
.text:0041BF3F
.text:0041BF3F loc_41BF3F:                             ; CODE XREF: sub_41BEA0+F4↓j
.text:0041BF3F                 jz      short loc_41BF4B
.text:0041BF41
.text:0041BF41 loc_41BF41:                             ; CODE XREF: sub_41BEA0+BE↓j
.text:0041BF41                 add     esp, 2Ch
.text:0041BF44                 mov     eax, edx
.text:0041BF46                 pop     ebx
.text:0041BF47                 pop     esi
.text:0041BF48                 pop     edi
.text:0041BF49                 pop     ebp
.text:0041BF4A                 retn
.text:0041BF4B ; ---------------------------------------------------------------------------
.text:0041BF4B
.text:0041BF4B loc_41BF4B:                             ; CODE XREF: sub_41BEA0:loc_41BF3F↑j
.text:0041BF4B                 call    sub_41A1F0
.text:0041BF50                 mov     ebp, eax
.text:0041BF52                 call    _errno
.text:0041BF57                 mov     [eax], ebp
.text:0041BF59                 mov     edx, 0FFFFFFFFh
.text:0041BF5E                 jmp     short loc_41BF41
.text:0041BF60 ; ---------------------------------------------------------------------------
.text:0041BF60
.text:0041BF60 loc_41BF60:                             ; CODE XREF: sub_41BEA0+1A↑j
.text:0041BF60                 lea     ebx, [esp+3Ch+LastAccessTime]
.text:0041BF64                 mov     [esp+3Ch+hFile], ebx ; lpSystemTimeAsFileTime
.text:0041BF67                 call    GetSystemTimeAsFileTime
.text:0041BF6C                 sub     esp, 4
.text:0041BF6F                 mov     edx, [esp+3Ch+LastAccessTime.dwLowDateTime]
.text:0041BF73                 mov     ecx, [esp+3Ch+LastAccessTime.dwHighDateTime]
.text:0041BF77                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], edx
.text:0041BF7B                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0041BF7F                 jmp     short loc_41BF18
.text:0041BF81 ; ---------------------------------------------------------------------------
.text:0041BF81
.text:0041BF81 loc_41BF81:                             ; CODE XREF: sub_41BEA0+12↑j
.text:0041BF81                 mov     edx, [esp+3Ch+lpFileName]
.text:0041BF85                 mov     [esp+3Ch+hFile], edx ; lpFileName
.text:0041BF88                 call    GetFileAttributesA
.text:0041BF8D                 sub     esp, 4
.text:0041BF90                 xor     edx, edx
.text:0041BF92                 test    al, 10h
.text:0041BF94                 jmp     short loc_41BF3F
.text:0041BF94 sub_41BEA0      endp
.text:0041BF94
.text:0041BF94 ; ---------------------------------------------------------------------------
.text:0041BF96                 align 10h
.text:0041BFA0
.text:0041BFA0 ; =============== S U B R O U T I N E =======================================
.text:0041BFA0
.text:0041BFA0
.text:0041BFA0 ; int __cdecl sub_41BFA0(LPCSTR, int)
.text:0041BFA0 sub_41BFA0      proc near               ; CODE XREF: sub_419650:loc_4196B0↑p
.text:0041BFA0
.text:0041BFA0 lpFileName      = dword ptr -2Ch
.text:0041BFA0 dwDesiredAccess = dword ptr -28h
.text:0041BFA0 dwShareMode     = dword ptr -24h
.text:0041BFA0 lpSecurityAttributes= dword ptr -20h
.text:0041BFA0 dwCreationDisposition= dword ptr -1Ch
.text:0041BFA0 dwFlagsAndAttributes= dword ptr -18h
.text:0041BFA0 hTemplateFile   = dword ptr -14h
.text:0041BFA0 var_8           = dword ptr -8
.text:0041BFA0 var_4           = dword ptr -4
.text:0041BFA0 arg_0           = dword ptr  4
.text:0041BFA0 arg_4           = dword ptr  8
.text:0041BFA0
.text:0041BFA0                 sub     esp, 2Ch
.text:0041BFA3                 mov     [esp+2Ch+var_8], ebx
.text:0041BFA7                 mov     ebx, [esp+2Ch+arg_0]
.text:0041BFAB                 mov     [esp+2Ch+var_4], esi
.text:0041BFAF                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0041BFB7                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000080h ; dwFlagsAndAttributes
.text:0041BFBF                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0041BFC7                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041BFCF                 mov     [esp+2Ch+dwShareMode], 3 ; dwShareMode
.text:0041BFD7                 mov     [esp+2Ch+dwDesiredAccess], 100h ; dwDesiredAccess
.text:0041BFDF                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0041BFE2                 call    CreateFileA
.text:0041BFE7                 sub     esp, 1Ch
.text:0041BFEA                 mov     esi, eax
.text:0041BFEC                 test    ebx, ebx
.text:0041BFEE                 jz      short loc_41C01F
.text:0041BFF0                 mov     [esp+2Ch+dwDesiredAccess], ebx ; lpFileName
.text:0041BFF4                 mov     edx, [esp+2Ch+arg_4]
.text:0041BFF8                 mov     [esp+2Ch+lpFileName], eax ; HANDLE
.text:0041BFFB                 mov     [esp+2Ch+dwShareMode], edx ; int
.text:0041BFFF                 call    sub_41BEA0
.text:0041C004                 mov     [esp+2Ch+lpFileName], esi ; hObject
.text:0041C007                 mov     ebx, eax
.text:0041C009                 call    CloseHandle
.text:0041C00E                 sub     esp, 4
.text:0041C011                 mov     eax, ebx
.text:0041C013
.text:0041C013 loc_41C013:                             ; CODE XREF: sub_41BFA0+8F↓j
.text:0041C013                 mov     ebx, [esp+2Ch+var_8]
.text:0041C017                 mov     esi, [esp+2Ch+var_4]
.text:0041C01B                 add     esp, 2Ch
.text:0041C01E                 retn
.text:0041C01F ; ---------------------------------------------------------------------------
.text:0041C01F
.text:0041C01F loc_41C01F:                             ; CODE XREF: sub_41BFA0+4E↑j
.text:0041C01F                 call    _errno
.text:0041C024                 mov     dword ptr [eax], 16h
.text:0041C02A                 mov     eax, 0FFFFFFFFh
.text:0041C02F                 jmp     short loc_41C013
.text:0041C02F sub_41BFA0      endp
.text:0041C02F
.text:0041C02F ; ---------------------------------------------------------------------------
.text:0041C031                 align 10h
.text:0041C040 byte_41C040     db 0                    ; DATA XREF: .data:off_4200D0↓o
.text:0041C041 byte_41C041     db 73h, 68h, 0          ; DATA XREF: .data:off_4200D4↓o
.text:0041C044 ; const char aHome[]
.text:0041C044 aHome           db 'HOME',0             ; DATA XREF: sub_41C060+96↓o
.text:0041C049 ; const char aShell[]
.text:0041C049 aShell          db 'SHELL',0            ; DATA XREF: sub_41C060+E2↓o
.text:0041C04F ; const char aComspec[]
.text:0041C04F aComspec        db 'COMSPEC',0          ; DATA XREF: sub_41C060:loc_41C224↓o
.text:0041C057 aC              db 'C:/',0              ; DATA XREF: sub_41C060:loc_41C245↓o
.text:0041C05B                 align 10h
.text:0041C060
.text:0041C060 ; =============== S U B R O U T I N E =======================================
.text:0041C060
.text:0041C060
.text:0041C060 ; int __cdecl sub_41C060(char *, int, char *, int, int)
.text:0041C060 sub_41C060      proc near               ; CODE XREF: sub_419810+2A↑p
.text:0041C060
.text:0041C060 Str             = dword ptr -1Ch
.text:0041C060 Src             = dword ptr -18h
.text:0041C060 Size            = dword ptr -14h
.text:0041C060 var_10          = dword ptr -10h
.text:0041C060 var_C           = dword ptr -0Ch
.text:0041C060 var_8           = dword ptr -8
.text:0041C060 var_4           = dword ptr -4
.text:0041C060 arg_0           = dword ptr  4
.text:0041C060 arg_4           = dword ptr  8
.text:0041C060 arg_8           = dword ptr  0Ch
.text:0041C060 arg_C           = dword ptr  10h
.text:0041C060 arg_10          = dword ptr  14h
.text:0041C060
.text:0041C060                 sub     esp, 1Ch
.text:0041C063                 mov     eax, [esp+1Ch+arg_0]
.text:0041C067                 mov     [esp+1Ch+var_10], ebx
.text:0041C06B                 mov     [esp+1Ch+var_C], esi
.text:0041C06F                 test    eax, eax
.text:0041C071                 mov     [esp+1Ch+var_8], edi
.text:0041C075                 mov     [esp+1Ch+var_4], ebp
.text:0041C079                 jz      short loc_41C088
.text:0041C07B                 cmp     byte ptr [eax], 0
.text:0041C07E                 jz      short loc_41C088
.text:0041C080                 mov     ecx, [esp+1Ch+arg_C]
.text:0041C084                 test    ecx, ecx
.text:0041C086                 jnz     short loc_41C0B0
.text:0041C088
.text:0041C088 loc_41C088:                             ; CODE XREF: sub_41C060+19↑j
.text:0041C088                                         ; sub_41C060+1E↑j ...
.text:0041C088                 call    _errno
.text:0041C08D                 mov     dword ptr [eax], 22h ; '"'
.text:0041C093                 mov     eax, 0FFFFFFFFh
.text:0041C098
.text:0041C098 loc_41C098:                             ; CODE XREF: sub_41C060+1BF↓j
.text:0041C098                 mov     ebx, [esp+1Ch+var_10]
.text:0041C09C                 mov     esi, [esp+1Ch+var_C]
.text:0041C0A0                 mov     edi, [esp+1Ch+var_8]
.text:0041C0A4                 mov     ebp, [esp+1Ch+var_4]
.text:0041C0A8                 add     esp, 1Ch
.text:0041C0AB                 retn
.text:0041C0AB ; ---------------------------------------------------------------------------
.text:0041C0AC                 align 10h
.text:0041C0B0
.text:0041C0B0 loc_41C0B0:                             ; CODE XREF: sub_41C060+26↑j
.text:0041C0B0                 mov     [esp+1Ch+Str], eax ; Str
.text:0041C0B3                 mov     ebx, eax
.text:0041C0B5                 call    strlen
.text:0041C0BA                 lea     esi, [eax+1]
.text:0041C0BD                 cmp     esi, [esp+1Ch+arg_C]
.text:0041C0C1                 ja      short loc_41C088
.text:0041C0C3                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041C0C7                 mov     edx, [esp+1Ch+arg_8]
.text:0041C0CB                 mov     [esp+1Ch+Size], esi ; Size
.text:0041C0CF                 mov     [esp+1Ch+Str], edx ; void *
.text:0041C0D2                 call    memcpy
.text:0041C0D7                 mov     ebp, [esp+1Ch+arg_4]
.text:0041C0DB                 mov     [ebp+0], eax
.text:0041C0DE                 call    sub_41C7C0
.text:0041C0E3                 mov     edi, [esp+1Ch+arg_4]
.text:0041C0E7                 mov     [edi+8], eax
.text:0041C0EA                 call    sub_41C7B0
.text:0041C0EF                 mov     ebx, [esp+1Ch+arg_4]
.text:0041C0F3                 mov     [ebx+0Ch], eax
.text:0041C0F6                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:0041C0FD                 call    getenv
.text:0041C102                 test    eax, eax
.text:0041C104                 mov     ebx, eax
.text:0041C106                 jz      loc_41C245
.text:0041C10C
.text:0041C10C loc_41C10C:                             ; CODE XREF: sub_41C060+1EA↓j
.text:0041C10C                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041C10F                 call    strlen
.text:0041C114                 lea     ebp, [eax+esi+1]
.text:0041C118                 cmp     ebp, [esp+1Ch+arg_C]
.text:0041C11C                 ja      loc_41C088
.text:0041C122                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041C126                 mov     ecx, [esp+1Ch+arg_8]
.text:0041C12A                 lea     edi, [eax+1]
.text:0041C12D                 mov     [esp+1Ch+Size], edi ; Size
.text:0041C131                 add     ecx, esi
.text:0041C133                 mov     [esp+1Ch+Str], ecx ; void *
.text:0041C136                 call    memcpy
.text:0041C13B                 mov     esi, [esp+1Ch+arg_4]
.text:0041C13F                 mov     [esi+14h], eax
.text:0041C142                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:0041C149                 call    getenv
.text:0041C14E                 test    eax, eax
.text:0041C150                 mov     ebx, eax
.text:0041C152                 jz      loc_41C224
.text:0041C158
.text:0041C158 loc_41C158:                             ; CODE XREF: sub_41C060+1D4↓j
.text:0041C158                                         ; sub_41C060+1E0↓j
.text:0041C158                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041C15B                 call    strlen
.text:0041C160                 lea     edi, [eax+ebp+1]
.text:0041C164                 cmp     edi, [esp+1Ch+arg_C]
.text:0041C168                 ja      loc_41C088
.text:0041C16E                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041C172                 mov     esi, [esp+1Ch+arg_8]
.text:0041C176                 lea     ecx, [eax+1]
.text:0041C179                 mov     [esp+1Ch+Size], ecx ; Size
.text:0041C17D                 add     esi, ebp
.text:0041C17F                 mov     [esp+1Ch+Str], esi ; void *
.text:0041C182                 call    memcpy
.text:0041C187                 mov     ebx, [esp+1Ch+arg_4]
.text:0041C18B                 mov     [ebx+18h], eax
.text:0041C18E                 call    sub_41C990
.text:0041C193                 mov     [esp+1Ch+Str], eax ; Str
.text:0041C196                 mov     ebx, eax
.text:0041C198                 call    strlen
.text:0041C19D                 lea     esi, [eax+edi+1]
.text:0041C1A1                 cmp     esi, [esp+1Ch+arg_C]
.text:0041C1A5                 ja      loc_41C088
.text:0041C1AB                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041C1AF                 mov     ecx, [esp+1Ch+arg_8]
.text:0041C1B3                 lea     ebp, [eax+1]
.text:0041C1B6                 mov     [esp+1Ch+Size], ebp ; Size
.text:0041C1BA                 add     ecx, edi
.text:0041C1BC                 mov     [esp+1Ch+Str], ecx ; void *
.text:0041C1BF                 call    memcpy
.text:0041C1C4                 mov     edi, [esp+1Ch+arg_4]
.text:0041C1C8                 mov     ebx, off_4200D0
.text:0041C1CE                 mov     [edi+10h], eax
.text:0041C1D1                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041C1D4                 call    strlen
.text:0041C1D9                 lea     ebp, [eax+esi+1]
.text:0041C1DD                 cmp     ebp, [esp+1Ch+arg_C]
.text:0041C1E1                 ja      loc_41C088
.text:0041C1E7                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041C1EB                 mov     edi, [esp+1Ch+arg_8]
.text:0041C1EF                 lea     ecx, [eax+1]
.text:0041C1F2                 mov     [esp+1Ch+Size], ecx ; Size
.text:0041C1F6                 add     edi, esi
.text:0041C1F8                 mov     [esp+1Ch+Str], edi ; void *
.text:0041C1FB                 call    memcpy
.text:0041C200                 mov     esi, [esp+1Ch+arg_4]
.text:0041C204                 mov     [esi+4], eax
.text:0041C207                 mov     edx, [esp+1Ch+arg_8]
.text:0041C20B                 mov     [esp+1Ch+Str], edx ; Str
.text:0041C20E                 call    strlen
.text:0041C213                 mov     eax, [esp+1Ch+arg_4]
.text:0041C217                 mov     ebx, [esp+1Ch+arg_10]
.text:0041C21B                 mov     [ebx], eax
.text:0041C21D                 xor     eax, eax
.text:0041C21F                 jmp     loc_41C098
.text:0041C224 ; ---------------------------------------------------------------------------
.text:0041C224
.text:0041C224 loc_41C224:                             ; CODE XREF: sub_41C060+F2↑j
.text:0041C224                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:0041C22B                 call    getenv
.text:0041C230                 test    eax, eax
.text:0041C232                 mov     ebx, eax
.text:0041C234                 jnz     loc_41C158
.text:0041C23A                 mov     ebx, off_4200D4
.text:0041C240                 jmp     loc_41C158
.text:0041C245 ; ---------------------------------------------------------------------------
.text:0041C245
.text:0041C245 loc_41C245:                             ; CODE XREF: sub_41C060+A6↑j
.text:0041C245                 mov     ebx, offset aC  ; "C:/"
.text:0041C24A                 jmp     loc_41C10C
.text:0041C24A sub_41C060      endp
.text:0041C24A
.text:0041C24A ; ---------------------------------------------------------------------------
.text:0041C24F                 align 10h
.text:0041C250
.text:0041C250 ; =============== S U B R O U T I N E =======================================
.text:0041C250
.text:0041C250
.text:0041C250 ; int __cdecl sub_41C250(intptr_t, intptr_t ProcHandle, int Action)
.text:0041C250 sub_41C250      proc near               ; CODE XREF: sub_419860+1A↑p
.text:0041C250
.text:0041C250 arg_0           = dword ptr  4
.text:0041C250 ProcHandle      = dword ptr  8
.text:0041C250 Action          = dword ptr  0Ch
.text:0041C250
.text:0041C250                 mov     [esp+Action], 0 ; Action
.text:0041C258                 mov     ecx, [esp+ProcHandle]
.text:0041C25C                 mov     edx, [esp+arg_0]
.text:0041C260                 mov     [esp+arg_0], ecx ; TermStat
.text:0041C264                 mov     [esp+ProcHandle], edx ; ProcHandle
.text:0041C268                 jmp     _cwait
.text:0041C268 sub_41C250      endp
.text:0041C268
.text:0041C268 ; ---------------------------------------------------------------------------
.text:0041C26D                 align 10h
.text:0041C270
.text:0041C270 ; =============== S U B R O U T I N E =======================================
.text:0041C270
.text:0041C270
.text:0041C270 sub_41C270      proc near               ; CODE XREF: sub_419AC0+16↑j
.text:0041C270
.text:0041C270 arg_0           = dword ptr  4
.text:0041C270 arg_4           = dword ptr  8
.text:0041C270
.text:0041C270                 sub     esp, 0Ch
.text:0041C273                 mov     ecx, [esp+0Ch+arg_0]
.text:0041C277                 mov     eax, [esp+0Ch+arg_4]
.text:0041C27B                 test    ecx, ecx
.text:0041C27D                 js      short loc_41C2AE
.text:0041C27F                 test    eax, eax
.text:0041C281                 js      short loc_41C28D
.text:0041C283                 cmp     eax, 8
.text:0041C286                 jle     short loc_41C2A1
.text:0041C288                 cmp     eax, 0Ch
.text:0041C28B                 jz      short loc_41C2A1
.text:0041C28D
.text:0041C28D loc_41C28D:                             ; CODE XREF: sub_41C270+11↑j
.text:0041C28D                 call    _errno
.text:0041C292                 mov     dword ptr [eax], 16h
.text:0041C298
.text:0041C298 loc_41C298:                             ; CODE XREF: sub_41C270+3C↓j
.text:0041C298                                         ; sub_41C270+49↓j
.text:0041C298                 mov     eax, 0FFFFFFFFh
.text:0041C29D                 add     esp, 0Ch
.text:0041C2A0                 retn
.text:0041C2A1 ; ---------------------------------------------------------------------------
.text:0041C2A1
.text:0041C2A1 loc_41C2A1:                             ; CODE XREF: sub_41C270+16↑j
.text:0041C2A1                                         ; sub_41C270+1B↑j
.text:0041C2A1                 call    _errno
.text:0041C2A6                 mov     dword ptr [eax], 28h ; '('
.text:0041C2AC                 jmp     short loc_41C298
.text:0041C2AE ; ---------------------------------------------------------------------------
.text:0041C2AE
.text:0041C2AE loc_41C2AE:                             ; CODE XREF: sub_41C270+D↑j
.text:0041C2AE                 call    _errno
.text:0041C2B3                 mov     dword ptr [eax], 9
.text:0041C2B9                 jmp     short loc_41C298
.text:0041C2B9 sub_41C270      endp
.text:0041C2B9
.text:0041C2B9 ; ---------------------------------------------------------------------------
.text:0041C2BB                 align 10h
.text:0041C2C0
.text:0041C2C0 ; =============== S U B R O U T I N E =======================================
.text:0041C2C0
.text:0041C2C0
.text:0041C2C0 sub_41C2C0      proc near               ; CODE XREF: sub_419B20+17↑p
.text:0041C2C0
.text:0041C2C0 hFindFile       = dword ptr -0Ch
.text:0041C2C0 var_8           = dword ptr -8
.text:0041C2C0 var_4           = dword ptr -4
.text:0041C2C0 arg_0           = dword ptr  4
.text:0041C2C0
.text:0041C2C0                 sub     esp, 0Ch
.text:0041C2C3                 mov     [esp+0Ch+var_4], esi
.text:0041C2C7                 mov     esi, [esp+0Ch+arg_0]
.text:0041C2CB                 mov     [esp+0Ch+var_8], ebx
.text:0041C2CF                 test    esi, esi
.text:0041C2D1                 jz      short loc_41C312
.text:0041C2D3                 mov     eax, [esi]
.text:0041C2D5                 cmp     eax, 0FFFFFFFFh
.text:0041C2D8                 jz      short loc_41C2EF
.text:0041C2DA                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0041C2DD                 call    FindClose
.text:0041C2E2                 sub     esp, 4
.text:0041C2E5                 test    eax, eax
.text:0041C2E7                 jz      short loc_41C302
.text:0041C2E9
.text:0041C2E9 loc_41C2E9:                             ; CODE XREF: sub_41C2C0+50↓j
.text:0041C2E9                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0041C2EF
.text:0041C2EF loc_41C2EF:                             ; CODE XREF: sub_41C2C0+18↑j
.text:0041C2EF                 mov     dword ptr [esi+14h], 1
.text:0041C2F6
.text:0041C2F6 loc_41C2F6:                             ; CODE XREF: sub_41C2C0+5D↓j
.text:0041C2F6                 mov     ebx, [esp+0Ch+var_8]
.text:0041C2FA                 mov     esi, [esp+0Ch+var_4]
.text:0041C2FE                 add     esp, 0Ch
.text:0041C301                 retn
.text:0041C302 ; ---------------------------------------------------------------------------
.text:0041C302
.text:0041C302 loc_41C302:                             ; CODE XREF: sub_41C2C0+27↑j
.text:0041C302                 call    sub_41A1F0
.text:0041C307                 mov     ebx, eax
.text:0041C309                 call    _errno
.text:0041C30E                 mov     [eax], ebx
.text:0041C310                 jmp     short loc_41C2E9
.text:0041C312 ; ---------------------------------------------------------------------------
.text:0041C312
.text:0041C312 loc_41C312:                             ; CODE XREF: sub_41C2C0+11↑j
.text:0041C312                 call    _errno
.text:0041C317                 mov     dword ptr [eax], 16h
.text:0041C31D                 jmp     short loc_41C2F6
.text:0041C31D sub_41C2C0      endp
.text:0041C31D
.text:0041C31D ; ---------------------------------------------------------------------------
.text:0041C31F                 align 10h
.text:0041C320
.text:0041C320 ; =============== S U B R O U T I N E =======================================
.text:0041C320
.text:0041C320
.text:0041C320 sub_41C320      proc near               ; CODE XREF: sub_419D20+4F↑p
.text:0041C320
.text:0041C320 var_8           = dword ptr -8
.text:0041C320 var_4           = dword ptr -4
.text:0041C320 arg_0           = dword ptr  4
.text:0041C320 arg_4           = dword ptr  8
.text:0041C320 arg_8           = dword ptr  0Ch
.text:0041C320
.text:0041C320                 sub     esp, 8
.text:0041C323                 mov     ecx, [esp+8+arg_0]
.text:0041C327                 mov     [esp+8+var_8], ebx
.text:0041C32A                 mov     ebx, [esp+8+arg_8]
.text:0041C32E                 mov     [esp+8+var_4], esi
.text:0041C332                 mov     edx, [esp+8+arg_4]
.text:0041C336                 mov     eax, ebx
.text:0041C338                 and     eax, 7
.text:0041C33B                 cmp     eax, 7          ; switch 8 cases
.text:0041C33E                 ja      short def_41C340 ; jumptable 0041C340 default case
.text:0041C340                 jmp     ds:jpt_41C340[eax*4] ; switch jump
.text:0041C340 ; ---------------------------------------------------------------------------
.text:0041C347                 align 4
.text:0041C348 jpt_41C340      dd offset loc_41C3CA    ; DATA XREF: sub_41C320+20↑r
.text:0041C348                 dd offset loc_41C3D1    ; jump table for switch statement
.text:0041C348                 dd offset loc_41C368
.text:0041C348                 dd offset loc_41C3D9
.text:0041C348                 dd offset loc_41C3E6
.text:0041C348                 dd offset loc_41C3F3
.text:0041C348                 dd offset loc_41C400
.text:0041C348                 dd offset loc_41C40D
.text:0041C368 ; ---------------------------------------------------------------------------
.text:0041C368
.text:0041C368 loc_41C368:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C368                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C368                 mov     eax, [edx]      ; jumptable 0041C340 case 2
.text:0041C36A                 sub     ecx, 1Ch
.text:0041C36D                 add     ebx, 6
.text:0041C370                 sub     edx, 18h
.text:0041C373                 lea     esi, [esi+0]
.text:0041C379                 lea     edi, [edi+0]
.text:0041C380
.text:0041C380 loc_41C380:                             ; CODE XREF: sub_41C320+A8↓j
.text:0041C380                 mov     esi, [edx+1Ch]
.text:0041C383                 add     edx, 20h ; ' '
.text:0041C386                 mov     [ecx+1Ch], eax
.text:0041C389                 add     ecx, 20h ; ' '
.text:0041C38C                 sub     ebx, 8
.text:0041C38F                 jnz     short def_41C340 ; jumptable 0041C340 default case
.text:0041C391                 mov     [ecx], esi
.text:0041C393                 mov     ebx, [esp+8+var_8]
.text:0041C396                 mov     esi, [esp+8+var_4]
.text:0041C39A                 add     esp, 8
.text:0041C39D                 retn
.text:0041C39D ; ---------------------------------------------------------------------------
.text:0041C39E                 align 10h
.text:0041C3A0
.text:0041C3A0 def_41C340:                             ; CODE XREF: sub_41C320+1E↑j
.text:0041C3A0                                         ; sub_41C320+6F↑j ...
.text:0041C3A0                 mov     eax, [edx]      ; jumptable 0041C340 default case
.text:0041C3A2                 mov     [ecx], esi
.text:0041C3A4
.text:0041C3A4 loc_41C3A4:                             ; CODE XREF: sub_41C320+AF↓j
.text:0041C3A4                 mov     esi, [edx+4]
.text:0041C3A7                 mov     [ecx+4], eax
.text:0041C3AA
.text:0041C3AA loc_41C3AA:                             ; CODE XREF: sub_41C320+F6↓j
.text:0041C3AA                 mov     eax, [edx+8]
.text:0041C3AD                 mov     [ecx+8], esi
.text:0041C3B0
.text:0041C3B0 loc_41C3B0:                             ; CODE XREF: sub_41C320+EB↓j
.text:0041C3B0                 mov     esi, [edx+0Ch]
.text:0041C3B3                 mov     [ecx+0Ch], eax
.text:0041C3B6
.text:0041C3B6 loc_41C3B6:                             ; CODE XREF: sub_41C320+DE↓j
.text:0041C3B6                 mov     eax, [edx+10h]
.text:0041C3B9                 mov     [ecx+10h], esi
.text:0041C3BC
.text:0041C3BC loc_41C3BC:                             ; CODE XREF: sub_41C320+D1↓j
.text:0041C3BC                 mov     esi, [edx+14h]
.text:0041C3BF                 mov     [ecx+14h], eax
.text:0041C3C2
.text:0041C3C2 loc_41C3C2:                             ; CODE XREF: sub_41C320+C4↓j
.text:0041C3C2                 mov     eax, [edx+18h]
.text:0041C3C5                 mov     [ecx+18h], esi
.text:0041C3C8                 jmp     short loc_41C380
.text:0041C3CA ; ---------------------------------------------------------------------------
.text:0041C3CA
.text:0041C3CA loc_41C3CA:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C3CA                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C3CA                 mov     eax, [edx]      ; jumptable 0041C340 case 0
.text:0041C3CC                 sub     ecx, 4
.text:0041C3CF                 jmp     short loc_41C3A4
.text:0041C3D1 ; ---------------------------------------------------------------------------
.text:0041C3D1
.text:0041C3D1 loc_41C3D1:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C3D1                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C3D1                 mov     esi, [edx]      ; jumptable 0041C340 case 1
.text:0041C3D3                 dec     ebx
.text:0041C3D4                 add     edx, 4
.text:0041C3D7                 jmp     short def_41C340 ; jumptable 0041C340 default case
.text:0041C3D9 ; ---------------------------------------------------------------------------
.text:0041C3D9
.text:0041C3D9 loc_41C3D9:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C3D9                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C3D9                 mov     esi, [edx]      ; jumptable 0041C340 case 3
.text:0041C3DB                 sub     ecx, 18h
.text:0041C3DE                 add     ebx, 5
.text:0041C3E1                 sub     edx, 14h
.text:0041C3E4                 jmp     short loc_41C3C2
.text:0041C3E6 ; ---------------------------------------------------------------------------
.text:0041C3E6
.text:0041C3E6 loc_41C3E6:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C3E6                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C3E6                 mov     eax, [edx]      ; jumptable 0041C340 case 4
.text:0041C3E8                 sub     ecx, 14h
.text:0041C3EB                 add     ebx, 4
.text:0041C3EE                 sub     edx, 10h
.text:0041C3F1                 jmp     short loc_41C3BC
.text:0041C3F3 ; ---------------------------------------------------------------------------
.text:0041C3F3
.text:0041C3F3 loc_41C3F3:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C3F3                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C3F3                 mov     esi, [edx]      ; jumptable 0041C340 case 5
.text:0041C3F5                 sub     ecx, 10h
.text:0041C3F8                 add     ebx, 3
.text:0041C3FB                 sub     edx, 0Ch
.text:0041C3FE                 jmp     short loc_41C3B6
.text:0041C400 ; ---------------------------------------------------------------------------
.text:0041C400
.text:0041C400 loc_41C400:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C400                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C400                 mov     eax, [edx]      ; jumptable 0041C340 case 6
.text:0041C402                 sub     ecx, 0Ch
.text:0041C405                 add     ebx, 2
.text:0041C408                 sub     edx, 8
.text:0041C40B                 jmp     short loc_41C3B0
.text:0041C40D ; ---------------------------------------------------------------------------
.text:0041C40D
.text:0041C40D loc_41C40D:                             ; CODE XREF: sub_41C320+20↑j
.text:0041C40D                                         ; DATA XREF: sub_41C320:jpt_41C340↑o
.text:0041C40D                 mov     esi, [edx]      ; jumptable 0041C340 case 7
.text:0041C40F                 sub     ecx, 8
.text:0041C412                 inc     ebx
.text:0041C413                 sub     edx, 4
.text:0041C416                 jmp     short loc_41C3AA
.text:0041C416 sub_41C320      endp
.text:0041C416
.text:0041C416 ; ---------------------------------------------------------------------------
.text:0041C418                 align 10h
.text:0041C420
.text:0041C420 ; =============== S U B R O U T I N E =======================================
.text:0041C420
.text:0041C420
.text:0041C420 sub_41C420      proc near               ; CODE XREF: sub_419D20+93↑p
.text:0041C420
.text:0041C420 var_1C          = dword ptr -1Ch
.text:0041C420 var_18          = dword ptr -18h
.text:0041C420 var_14          = dword ptr -14h
.text:0041C420 arg_0           = dword ptr  4
.text:0041C420 arg_4           = dword ptr  8
.text:0041C420 arg_8           = dword ptr  0Ch
.text:0041C420
.text:0041C420                 push    ebp
.text:0041C421                 push    edi
.text:0041C422                 push    esi
.text:0041C423                 push    ebx
.text:0041C424                 sub     esp, 0Ch
.text:0041C427                 mov     edx, [esp+1Ch+arg_4]
.text:0041C42B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0041C433                 mov     eax, [esp+1Ch+arg_8]
.text:0041C437                 mov     esi, [esp+1Ch+arg_0]
.text:0041C43B                 mov     ecx, edx
.text:0041C43D                 and     ecx, 3
.text:0041C440                 and     eax, 3
.text:0041C443                 shl     ecx, 3
.text:0041C446                 and     edx, 0FFFFFFFCh
.text:0041C449                 sub     [esp+1Ch+var_14], ecx
.text:0041C44D                 cmp     eax, 1
.text:0041C450                 mov     [esp+1Ch+var_18], ecx
.text:0041C454                 jz      loc_41C540
.text:0041C45A                 cmp     eax, 1
.text:0041C45D                 jb      loc_41C530
.text:0041C463                 cmp     eax, 2
.text:0041C466                 jz      loc_41C514
.text:0041C46C                 cmp     eax, 3
.text:0041C46F                 jz      loc_41C503
.text:0041C475
.text:0041C475 loc_41C475:                             ; CODE XREF: sub_41C420+C7↓j
.text:0041C475                                         ; sub_41C420+12C↓j
.text:0041C475                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041C47A                 mov     eax, edi
.text:0041C47C                 mov     ebx, [edx]
.text:0041C47E                 shr     ebp, cl
.text:0041C480                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041C485                 shl     eax, cl
.text:0041C487                 or      ebp, eax
.text:0041C489                 mov     [esi], ebp
.text:0041C48B
.text:0041C48B loc_41C48B:                             ; CODE XREF: sub_41C420+11B↓j
.text:0041C48B                 mov     ecx, [edx+4]
.text:0041C48E                 mov     ebp, ebx
.text:0041C490                 mov     [esp+1Ch+var_1C], ecx
.text:0041C493                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041C498                 shr     edi, cl
.text:0041C49A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041C49F                 shl     ebp, cl
.text:0041C4A1                 or      edi, ebp
.text:0041C4A3                 mov     [esi+4], edi
.text:0041C4A6
.text:0041C4A6 loc_41C4A6:                             ; CODE XREF: sub_41C420+F2↓j
.text:0041C4A6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041C4AB                 mov     edi, [esp+1Ch+var_1C]
.text:0041C4AE                 mov     ebp, [edx+8]
.text:0041C4B1                 shr     ebx, cl
.text:0041C4B3                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041C4B8                 shl     edi, cl
.text:0041C4BA                 or      ebx, edi
.text:0041C4BC                 mov     [esi+8], ebx
.text:0041C4BF
.text:0041C4BF loc_41C4BF:                             ; CODE XREF: sub_41C420+107↓j
.text:0041C4BF                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041C4C4                 mov     ebx, ebp
.text:0041C4C6                 mov     edi, [edx+0Ch]
.text:0041C4C9                 add     edx, 10h
.text:0041C4CC                 shr     [esp+1Ch+var_1C], cl
.text:0041C4CF                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041C4D4                 shl     ebx, cl
.text:0041C4D6                 or      [esp+1Ch+var_1C], ebx
.text:0041C4D9                 mov     ebx, [esp+1Ch+var_1C]
.text:0041C4DC                 mov     [esi+0Ch], ebx
.text:0041C4DF                 add     esi, 10h
.text:0041C4E2                 sub     [esp+1Ch+arg_8], 4
.text:0041C4E7                 jnz     short loc_41C475
.text:0041C4E9                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041C4EE                 shr     ebp, cl
.text:0041C4F0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041C4F5                 shl     edi, cl
.text:0041C4F7                 or      ebp, edi
.text:0041C4F9                 mov     [esi], ebp
.text:0041C4FB                 add     esp, 0Ch
.text:0041C4FE                 pop     ebx
.text:0041C4FF                 pop     esi
.text:0041C500                 pop     edi
.text:0041C501                 pop     ebp
.text:0041C502                 retn
.text:0041C503 ; ---------------------------------------------------------------------------
.text:0041C503
.text:0041C503 loc_41C503:                             ; CODE XREF: sub_41C420+4F↑j
.text:0041C503                 inc     [esp+1Ch+arg_8]
.text:0041C507                 sub     esi, 8
.text:0041C50A                 mov     eax, [edx+4]
.text:0041C50D                 mov     ebx, [edx]
.text:0041C50F                 mov     [esp+1Ch+var_1C], eax
.text:0041C512                 jmp     short loc_41C4A6
.text:0041C514 ; ---------------------------------------------------------------------------
.text:0041C514
.text:0041C514 loc_41C514:                             ; CODE XREF: sub_41C420+46↑j
.text:0041C514                 add     [esp+1Ch+arg_8], 2
.text:0041C519                 sub     esi, 0Ch
.text:0041C51C                 mov     ecx, [edx]
.text:0041C51E                 mov     ebp, [edx+4]
.text:0041C521                 sub     edx, 4
.text:0041C524                 mov     [esp+1Ch+var_1C], ecx
.text:0041C527                 jmp     short loc_41C4BF
.text:0041C527 ; ---------------------------------------------------------------------------
.text:0041C529                 align 10h
.text:0041C530
.text:0041C530 loc_41C530:                             ; CODE XREF: sub_41C420+3D↑j
.text:0041C530                 mov     edi, [edx]
.text:0041C532                 sub     esi, 4
.text:0041C535                 mov     ebx, [edx+4]
.text:0041C538                 add     edx, 4
.text:0041C53B                 jmp     loc_41C48B
.text:0041C540 ; ---------------------------------------------------------------------------
.text:0041C540
.text:0041C540 loc_41C540:                             ; CODE XREF: sub_41C420+34↑j
.text:0041C540                 dec     [esp+1Ch+arg_8]
.text:0041C544                 mov     ebp, [edx]
.text:0041C546                 mov     edi, [edx+4]
.text:0041C549                 add     edx, 8
.text:0041C54C                 jmp     loc_41C475
.text:0041C54C sub_41C420      endp
.text:0041C54C
.text:0041C551 ; ---------------------------------------------------------------------------
.text:0041C551                 jmp     short loc_41C560
.text:0041C551 ; ---------------------------------------------------------------------------
.text:0041C553                 align 10h
.text:0041C560
.text:0041C560 loc_41C560:                             ; CODE XREF: .text:0041C551↑j
.text:0041C560                 sub     esp, 8
.text:0041C563                 mov     ecx, [esp+0Ch]
.text:0041C567                 mov     [esp+4], esi
.text:0041C56B                 mov     esi, [esp+14h]
.text:0041C56F                 mov     [esp], ebx
.text:0041C572                 mov     edx, [esp+10h]
.text:0041C576                 mov     eax, esi
.text:0041C578                 and     eax, 7
.text:0041C57B                 cmp     eax, 7          ; switch 8 cases
.text:0041C57E                 ja      short def_41C580 ; jumptable 0041C580 default case
.text:0041C580                 jmp     ds:jpt_41C580[eax*4] ; switch jump
.text:0041C580 ; ---------------------------------------------------------------------------
.text:0041C587                 align 4
.text:0041C588 jpt_41C580      dd offset loc_41C60C    ; DATA XREF: .text:0041C580↑r
.text:0041C588                 dd offset loc_41C617    ; jump table for switch statement
.text:0041C588                 dd offset loc_41C5A8
.text:0041C588                 dd offset loc_41C623
.text:0041C588                 dd offset loc_41C631
.text:0041C588                 dd offset loc_41C63F
.text:0041C588                 dd offset loc_41C64D
.text:0041C588                 dd offset loc_41C65B
.text:0041C5A8 ; ---------------------------------------------------------------------------
.text:0041C5A8
.text:0041C5A8 loc_41C5A8:                             ; CODE XREF: .text:0041C580↑j
.text:0041C5A8                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C5A8                 sub     edx, 8          ; jumptable 0041C580 case 2
.text:0041C5AB                 sub     ecx, 4
.text:0041C5AE                 mov     eax, [edx+4]
.text:0041C5B1                 add     esi, 6
.text:0041C5B4                 lea     esi, [esi+0]
.text:0041C5BA                 lea     edi, [edi+0]
.text:0041C5C0
.text:0041C5C0 loc_41C5C0:                             ; CODE XREF: .text:0041C60A↓j
.text:0041C5C0                 mov     ebx, [edx]
.text:0041C5C2                 sub     edx, 20h ; ' '
.text:0041C5C5                 mov     [ecx], eax
.text:0041C5C7                 sub     ecx, 20h ; ' '
.text:0041C5CA                 sub     esi, 8
.text:0041C5CD                 jnz     short def_41C580 ; jumptable 0041C580 default case
.text:0041C5CF                 mov     [ecx+1Ch], ebx
.text:0041C5D2                 mov     ebx, [esp]
.text:0041C5D5                 mov     esi, [esp+4]
.text:0041C5D9                 add     esp, 8
.text:0041C5DC                 retn
.text:0041C5DC ; ---------------------------------------------------------------------------
.text:0041C5DD                 align 10h
.text:0041C5E0
.text:0041C5E0 def_41C580:                             ; CODE XREF: .text:0041C57E↑j
.text:0041C5E0                                         ; .text:0041C5CD↑j ...
.text:0041C5E0                 mov     eax, [edx+1Ch]  ; jumptable 0041C580 default case
.text:0041C5E3                 mov     [ecx+1Ch], ebx
.text:0041C5E6
.text:0041C5E6 loc_41C5E6:                             ; CODE XREF: .text:0041C615↓j
.text:0041C5E6                 mov     ebx, [edx+18h]
.text:0041C5E9                 mov     [ecx+18h], eax
.text:0041C5EC
.text:0041C5EC loc_41C5EC:                             ; CODE XREF: .text:0041C665↓j
.text:0041C5EC                 mov     eax, [edx+14h]
.text:0041C5EF                 mov     [ecx+14h], ebx
.text:0041C5F2
.text:0041C5F2 loc_41C5F2:                             ; CODE XREF: .text:0041C659↓j
.text:0041C5F2                 mov     ebx, [edx+10h]
.text:0041C5F5                 mov     [ecx+10h], eax
.text:0041C5F8
.text:0041C5F8 loc_41C5F8:                             ; CODE XREF: .text:0041C64B↓j
.text:0041C5F8                 mov     eax, [edx+0Ch]
.text:0041C5FB                 mov     [ecx+0Ch], ebx
.text:0041C5FE
.text:0041C5FE loc_41C5FE:                             ; CODE XREF: .text:0041C63D↓j
.text:0041C5FE                 mov     ebx, [edx+8]
.text:0041C601                 mov     [ecx+8], eax
.text:0041C604
.text:0041C604 loc_41C604:                             ; CODE XREF: .text:0041C62F↓j
.text:0041C604                 mov     eax, [edx+4]
.text:0041C607                 mov     [ecx+4], ebx
.text:0041C60A                 jmp     short loc_41C5C0
.text:0041C60C ; ---------------------------------------------------------------------------
.text:0041C60C
.text:0041C60C loc_41C60C:                             ; CODE XREF: .text:0041C580↑j
.text:0041C60C                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C60C                 sub     edx, 20h ; ' '  ; jumptable 0041C580 case 0
.text:0041C60F                 sub     ecx, 1Ch
.text:0041C612                 mov     eax, [edx+1Ch]
.text:0041C615                 jmp     short loc_41C5E6
.text:0041C617 ; ---------------------------------------------------------------------------
.text:0041C617
.text:0041C617 loc_41C617:                             ; CODE XREF: .text:0041C580↑j
.text:0041C617                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C617                 sub     edx, 24h ; '$'  ; jumptable 0041C580 case 1
.text:0041C61A                 sub     ecx, 20h ; ' '
.text:0041C61D                 mov     ebx, [edx+20h]
.text:0041C620                 dec     esi
.text:0041C621                 jmp     short def_41C580 ; jumptable 0041C580 default case
.text:0041C623 ; ---------------------------------------------------------------------------
.text:0041C623
.text:0041C623 loc_41C623:                             ; CODE XREF: .text:0041C580↑j
.text:0041C623                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C623                 sub     edx, 0Ch        ; jumptable 0041C580 case 3
.text:0041C626                 sub     ecx, 8
.text:0041C629                 mov     ebx, [edx+8]
.text:0041C62C                 add     esi, 5
.text:0041C62F                 jmp     short loc_41C604
.text:0041C631 ; ---------------------------------------------------------------------------
.text:0041C631
.text:0041C631 loc_41C631:                             ; CODE XREF: .text:0041C580↑j
.text:0041C631                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C631                 sub     edx, 10h        ; jumptable 0041C580 case 4
.text:0041C634                 sub     ecx, 0Ch
.text:0041C637                 mov     eax, [edx+0Ch]
.text:0041C63A                 add     esi, 4
.text:0041C63D                 jmp     short loc_41C5FE
.text:0041C63F ; ---------------------------------------------------------------------------
.text:0041C63F
.text:0041C63F loc_41C63F:                             ; CODE XREF: .text:0041C580↑j
.text:0041C63F                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C63F                 sub     edx, 14h        ; jumptable 0041C580 case 5
.text:0041C642                 sub     ecx, 10h
.text:0041C645                 mov     ebx, [edx+10h]
.text:0041C648                 add     esi, 3
.text:0041C64B                 jmp     short loc_41C5F8
.text:0041C64D ; ---------------------------------------------------------------------------
.text:0041C64D
.text:0041C64D loc_41C64D:                             ; CODE XREF: .text:0041C580↑j
.text:0041C64D                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C64D                 sub     edx, 18h        ; jumptable 0041C580 case 6
.text:0041C650                 sub     ecx, 14h
.text:0041C653                 mov     eax, [edx+14h]
.text:0041C656                 add     esi, 2
.text:0041C659                 jmp     short loc_41C5F2
.text:0041C65B ; ---------------------------------------------------------------------------
.text:0041C65B
.text:0041C65B loc_41C65B:                             ; CODE XREF: .text:0041C580↑j
.text:0041C65B                                         ; DATA XREF: .text:jpt_41C580↑o
.text:0041C65B                 sub     edx, 1Ch        ; jumptable 0041C580 case 7
.text:0041C65E                 sub     ecx, 18h
.text:0041C661                 mov     ebx, [edx+18h]
.text:0041C664                 inc     esi
.text:0041C665                 jmp     short loc_41C5EC
.text:0041C665 ; ---------------------------------------------------------------------------
.text:0041C667                 align 10h
.text:0041C670                 push    ebp
.text:0041C671                 push    edi
.text:0041C672                 push    esi
.text:0041C673                 push    ebx
.text:0041C674                 sub     esp, 8
.text:0041C677                 mov     edx, [esp+20h]
.text:0041C67B                 mov     dword ptr [esp+4], 20h ; ' '
.text:0041C683                 mov     eax, [esp+24h]
.text:0041C687                 mov     ecx, edx
.text:0041C689                 and     ecx, 3
.text:0041C68C                 and     eax, 3
.text:0041C68F                 shl     ecx, 3
.text:0041C692                 sub     [esp+4], ecx
.text:0041C696                 and     edx, 0FFFFFFFCh
.text:0041C699                 add     edx, 4
.text:0041C69C                 mov     [esp], ecx
.text:0041C69F                 cmp     eax, 1
.text:0041C6A2                 jz      loc_41C798
.text:0041C6A8                 cmp     eax, 1
.text:0041C6AB                 jb      loc_41C785
.text:0041C6B1                 cmp     eax, 2
.text:0041C6B4                 jz      loc_41C770
.text:0041C6BA                 cmp     eax, 3
.text:0041C6BD                 jz      loc_41C75C
.text:0041C6C3
.text:0041C6C3 loc_41C6C3:                             ; CODE XREF: .text:0041C73C↓j
.text:0041C6C3                                         ; .text:0041C7AA↓j
.text:0041C6C3                 movzx   ecx, byte ptr [esp]
.text:0041C6C7                 mov     eax, edi
.text:0041C6C9                 mov     ebx, [esp+1Ch]
.text:0041C6CD                 mov     esi, [edx+0Ch]
.text:0041C6D0                 shr     eax, cl
.text:0041C6D2                 movzx   ecx, byte ptr [esp+4]
.text:0041C6D7                 shl     ebp, cl
.text:0041C6D9                 or      eax, ebp
.text:0041C6DB                 mov     [ebx+0Ch], eax
.text:0041C6DE
.text:0041C6DE loc_41C6DE:                             ; CODE XREF: .text:0041C793↓j
.text:0041C6DE                 movzx   ecx, byte ptr [esp]
.text:0041C6E2                 mov     ebp, esi
.text:0041C6E4                 mov     ebx, [edx+8]
.text:0041C6E7                 shr     ebp, cl
.text:0041C6E9                 movzx   ecx, byte ptr [esp+4]
.text:0041C6EE                 shl     edi, cl
.text:0041C6F0                 or      ebp, edi
.text:0041C6F2                 mov     edi, [esp+1Ch]
.text:0041C6F6                 mov     [edi+8], ebp
.text:0041C6F9
.text:0041C6F9 loc_41C6F9:                             ; CODE XREF: .text:0041C76E↓j
.text:0041C6F9                 movzx   ecx, byte ptr [esp]
.text:0041C6FD                 mov     edi, ebx
.text:0041C6FF                 mov     ebp, [edx+4]
.text:0041C702                 shr     edi, cl
.text:0041C704                 movzx   ecx, byte ptr [esp+4]
.text:0041C709                 shl     esi, cl
.text:0041C70B                 or      edi, esi
.text:0041C70D                 mov     esi, [esp+1Ch]
.text:0041C711                 mov     [esi+4], edi
.text:0041C714
.text:0041C714 loc_41C714:                             ; CODE XREF: .text:0041C783↓j
.text:0041C714                 movzx   ecx, byte ptr [esp]
.text:0041C718                 mov     esi, ebp
.text:0041C71A                 mov     edi, [edx]
.text:0041C71C                 sub     edx, 10h
.text:0041C71F                 shr     esi, cl
.text:0041C721                 movzx   ecx, byte ptr [esp+4]
.text:0041C726                 shl     ebx, cl
.text:0041C728                 or      esi, ebx
.text:0041C72A                 mov     ebx, [esp+1Ch]
.text:0041C72E                 mov     [ebx], esi
.text:0041C730                 sub     ebx, 10h
.text:0041C733                 sub     dword ptr [esp+24h], 4
.text:0041C738                 mov     [esp+1Ch], ebx
.text:0041C73C                 jnz     short loc_41C6C3
.text:0041C73E                 movzx   ecx, byte ptr [esp]
.text:0041C742                 mov     edx, [esp+1Ch]
.text:0041C746                 shr     edi, cl
.text:0041C748                 movzx   ecx, byte ptr [esp+4]
.text:0041C74D                 shl     ebp, cl
.text:0041C74F                 or      edi, ebp
.text:0041C751                 mov     [edx+0Ch], edi
.text:0041C754                 add     esp, 8
.text:0041C757                 pop     ebx
.text:0041C758                 pop     esi
.text:0041C759                 pop     edi
.text:0041C75A                 pop     ebp
.text:0041C75B                 retn
.text:0041C75C ; ---------------------------------------------------------------------------
.text:0041C75C
.text:0041C75C loc_41C75C:                             ; CODE XREF: .text:0041C6BD↑j
.text:0041C75C                 sub     dword ptr [esp+1Ch], 8
.text:0041C761                 sub     edx, 10h
.text:0041C764                 inc     dword ptr [esp+24h]
.text:0041C768                 mov     esi, [edx+0Ch]
.text:0041C76B                 mov     ebx, [edx+8]
.text:0041C76E                 jmp     short loc_41C6F9
.text:0041C770 ; ---------------------------------------------------------------------------
.text:0041C770
.text:0041C770 loc_41C770:                             ; CODE XREF: .text:0041C6B4↑j
.text:0041C770                 sub     dword ptr [esp+1Ch], 4
.text:0041C775                 sub     edx, 0Ch
.text:0041C778                 add     dword ptr [esp+24h], 2
.text:0041C77D                 mov     ebx, [edx+8]
.text:0041C780                 mov     ebp, [edx+4]
.text:0041C783                 jmp     short loc_41C714
.text:0041C785 ; ---------------------------------------------------------------------------
.text:0041C785
.text:0041C785 loc_41C785:                             ; CODE XREF: .text:0041C6AB↑j
.text:0041C785                 sub     dword ptr [esp+1Ch], 0Ch
.text:0041C78A                 sub     edx, 14h
.text:0041C78D                 mov     edi, [edx+10h]
.text:0041C790                 mov     esi, [edx+0Ch]
.text:0041C793                 jmp     loc_41C6DE
.text:0041C798 ; ---------------------------------------------------------------------------
.text:0041C798
.text:0041C798 loc_41C798:                             ; CODE XREF: .text:0041C6A2↑j
.text:0041C798                 sub     dword ptr [esp+1Ch], 10h
.text:0041C79D                 sub     edx, 18h
.text:0041C7A0                 dec     dword ptr [esp+24h]
.text:0041C7A4                 mov     ebp, [edx+14h]
.text:0041C7A7                 mov     edi, [edx+10h]
.text:0041C7AA                 jmp     loc_41C6C3
.text:0041C7AA ; ---------------------------------------------------------------------------
.text:0041C7AF                 align 10h
.text:0041C7B0
.text:0041C7B0 ; =============== S U B R O U T I N E =======================================
.text:0041C7B0
.text:0041C7B0
.text:0041C7B0 sub_41C7B0      proc near               ; CODE XREF: .text:00419E0B↑p
.text:0041C7B0                                         ; sub_41C060+8A↑p
.text:0041C7B0                 xor     eax, eax
.text:0041C7B2                 retn
.text:0041C7B2 sub_41C7B0      endp
.text:0041C7B2
.text:0041C7B2 ; ---------------------------------------------------------------------------
.text:0041C7B3                 align 10h
.text:0041C7C0
.text:0041C7C0 ; =============== S U B R O U T I N E =======================================
.text:0041C7C0
.text:0041C7C0
.text:0041C7C0 sub_41C7C0      proc near               ; CODE XREF: .text:00419DE4↑p
.text:0041C7C0                                         ; sub_41C060+7E↑p
.text:0041C7C0                 xor     eax, eax
.text:0041C7C2                 retn
.text:0041C7C2 sub_41C7C0      endp
.text:0041C7C2
.text:0041C7C2 ; ---------------------------------------------------------------------------
.text:0041C7C3                 align 10h
.text:0041C7D0
.text:0041C7D0 ; =============== S U B R O U T I N E =======================================
.text:0041C7D0
.text:0041C7D0
.text:0041C7D0 sub_41C7D0      proc near               ; CODE XREF: sub_419E20+28↑p
.text:0041C7D0                 xor     eax, eax
.text:0041C7D2                 retn
.text:0041C7D2 sub_41C7D0      endp
.text:0041C7D2
.text:0041C7D2 ; ---------------------------------------------------------------------------
.text:0041C7D3                 align 10h
.text:0041C7E0
.text:0041C7E0 ; =============== S U B R O U T I N E =======================================
.text:0041C7E0
.text:0041C7E0 ; Attributes: noreturn
.text:0041C7E0
.text:0041C7E0 sub_41C7E0      proc near               ; CODE XREF: .text:0041B3A9↑p
.text:0041C7E0                                         ; sub_41C7E0↓j
.text:0041C7E0                 jmp     short sub_41C7E0
.text:0041C7E0 sub_41C7E0      endp
.text:0041C7E0
.text:0041C7E0 ; ---------------------------------------------------------------------------
.text:0041C7E2                 align 10h
.text:0041C7F0
.text:0041C7F0 ; =============== S U B R O U T I N E =======================================
.text:0041C7F0
.text:0041C7F0
.text:0041C7F0 sub_41C7F0      proc near               ; CODE XREF: .text:0041B105↑p
.text:0041C7F0
.text:0041C7F0 FileHandle      = dword ptr -1Ch
.text:0041C7F0 dwFileOffsetLow = dword ptr -18h
.text:0041C7F0 dwFileOffsetHigh= dword ptr -14h
.text:0041C7F0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0041C7F0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0041C7F0 var_8           = dword ptr -8
.text:0041C7F0 var_4           = dword ptr -4
.text:0041C7F0 arg_0           = dword ptr  4
.text:0041C7F0
.text:0041C7F0                 sub     esp, 1Ch
.text:0041C7F3                 mov     edx, [esp+1Ch+arg_0]
.text:0041C7F7                 mov     [esp+1Ch+var_4], esi
.text:0041C7FB                 mov     [esp+1Ch+var_8], ebx
.text:0041C7FF                 mov     ebx, [edx+10h]
.text:0041C802                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041C805                 call    _get_osfhandle
.text:0041C80A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041C80D                 mov     esi, eax
.text:0041C80F                 call    _filelengthi64
.text:0041C814                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0041C818                 cdq
.text:0041C819                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041C81C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0041C820                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0041C828                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0041C830                 call    UnlockFile
.text:0041C835                 sub     esp, 14h
.text:0041C838                 mov     ebx, [esp+1Ch+var_8]
.text:0041C83C                 mov     esi, [esp+1Ch+var_4]
.text:0041C840                 add     esp, 1Ch
.text:0041C843                 retn
.text:0041C843 sub_41C7F0      endp
.text:0041C843
.text:0041C843 ; ---------------------------------------------------------------------------
.text:0041C844                 align 10h
.text:0041C850
.text:0041C850 ; =============== S U B R O U T I N E =======================================
.text:0041C850
.text:0041C850
.text:0041C850 ; int __cdecl sub_41C850(int, char *Control)
.text:0041C850 sub_41C850      proc near               ; CODE XREF: .text:0041AFC6↑p
.text:0041C850                                         ; .text:0041B016↑p ...
.text:0041C850
.text:0041C850 Str             = dword ptr -1Ch
.text:0041C850 Val             = dword ptr -18h
.text:0041C850 var_8           = dword ptr -8
.text:0041C850 var_4           = dword ptr -4
.text:0041C850 arg_0           = dword ptr  4
.text:0041C850 Control         = dword ptr  8
.text:0041C850
.text:0041C850                 sub     esp, 1Ch
.text:0041C853                 xor     eax, eax
.text:0041C855                 mov     edx, [esp+1Ch+Control]
.text:0041C859                 mov     [esp+1Ch+var_4], esi
.text:0041C85D                 mov     esi, [esp+1Ch+arg_0]
.text:0041C861                 mov     [esp+1Ch+var_8], ebx
.text:0041C865                 mov     ebx, [esi]
.text:0041C867                 test    ebx, ebx
.text:0041C869                 jz      short loc_41C898
.text:0041C86B                 movzx   eax, byte ptr [edx]
.text:0041C86E                 test    al, al
.text:0041C870                 jz      short loc_41C890
.text:0041C872                 cmp     byte ptr [edx+1], 0
.text:0041C876                 jnz     short loc_41C8D0
.text:0041C878                 movzx   ecx, byte ptr [ebx]
.text:0041C87B                 mov     edx, ebx
.text:0041C87D                 cmp     cl, al
.text:0041C87F                 jz      short loc_41C8C2
.text:0041C881                 test    cl, cl
.text:0041C883                 jnz     short loc_41C8A4
.text:0041C885                 lea     esi, [esi+0]
.text:0041C889                 lea     edi, [edi+0]
.text:0041C890
.text:0041C890 loc_41C890:                             ; CODE XREF: sub_41C850+20↑j
.text:0041C890                                         ; sub_41C850+74↓j
.text:0041C890                 mov     dword ptr [esi], 0
.text:0041C896
.text:0041C896 loc_41C896:                             ; CODE XREF: sub_41C850+7C↓j
.text:0041C896                 mov     eax, ebx
.text:0041C898
.text:0041C898 loc_41C898:                             ; CODE XREF: sub_41C850+19↑j
.text:0041C898                 mov     ebx, [esp+1Ch+var_8]
.text:0041C89C                 mov     esi, [esp+1Ch+var_4]
.text:0041C8A0                 add     esp, 1Ch
.text:0041C8A3                 retn
.text:0041C8A4 ; ---------------------------------------------------------------------------
.text:0041C8A4
.text:0041C8A4 loc_41C8A4:                             ; CODE XREF: sub_41C850+33↑j
.text:0041C8A4                 movsx   edx, al
.text:0041C8A7                 mov     [esp+1Ch+Val], edx ; Val
.text:0041C8AB                 lea     edx, [ebx+1]
.text:0041C8AE                 mov     [esp+1Ch+Str], edx ; Str
.text:0041C8B1                 call    strchr
.text:0041C8B6                 lea     esi, [esi+0]
.text:0041C8B9                 lea     edi, [edi+0]
.text:0041C8C0
.text:0041C8C0 loc_41C8C0:                             ; CODE XREF: sub_41C850+8C↓j
.text:0041C8C0                 mov     edx, eax
.text:0041C8C2
.text:0041C8C2 loc_41C8C2:                             ; CODE XREF: sub_41C850+2F↑j
.text:0041C8C2                 test    edx, edx
.text:0041C8C4                 jz      short loc_41C890
.text:0041C8C6                 mov     byte ptr [edx], 0
.text:0041C8C9                 inc     edx
.text:0041C8CA                 mov     [esi], edx
.text:0041C8CC                 jmp     short loc_41C896
.text:0041C8CC ; ---------------------------------------------------------------------------
.text:0041C8CE                 align 10h
.text:0041C8D0
.text:0041C8D0 loc_41C8D0:                             ; CODE XREF: sub_41C850+26↑j
.text:0041C8D0                 mov     [esp+1Ch+Val], edx ; Control
.text:0041C8D4                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041C8D7                 call    strpbrk
.text:0041C8DC                 jmp     short loc_41C8C0
.text:0041C8DC sub_41C850      endp
.text:0041C8DC
.text:0041C8DC ; ---------------------------------------------------------------------------
.text:0041C8DE                 align 10h
.text:0041C8E0 ; const char aTmpf[]
.text:0041C8E0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_41C8F0+20↓o
.text:0041C8E5 ; const char aWBd[]
.text:0041C8E5 aWBd            db 'w+bD',0             ; DATA XREF: sub_41C8F0+5E↓o
.text:0041C8EA                 align 10h
.text:0041C8F0
.text:0041C8F0 ; =============== S U B R O U T I N E =======================================
.text:0041C8F0
.text:0041C8F0
.text:0041C8F0 sub_41C8F0      proc near               ; CODE XREF: sub_41BA3F+A4↑p
.text:0041C8F0
.text:0041C8F0 FileHandle      = dword ptr -13Ch
.text:0041C8F0 Format          = dword ptr -138h
.text:0041C8F0 var_134         = dword ptr -134h
.text:0041C8F0 var_130         = dword ptr -130h
.text:0041C8F0 var_12C         = dword ptr -12Ch
.text:0041C8F0 Buffer          = byte ptr -11Ch
.text:0041C8F0 var_8           = dword ptr -8
.text:0041C8F0 var_4           = dword ptr -4
.text:0041C8F0
.text:0041C8F0                 sub     esp, 13Ch
.text:0041C8F6                 mov     [esp+13Ch+var_8], ebx
.text:0041C8FD                 lea     ebx, [esp+13Ch+Buffer]
.text:0041C901                 mov     [esp+13Ch+var_4], esi
.text:0041C908                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0041C910                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0041C918                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0041C920                 mov     [esp+13Ch+Format], 104h ; int
.text:0041C928                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041C92B                 call    sub_41CA10
.text:0041C930                 xor     edx, edx
.text:0041C932                 test    eax, eax
.text:0041C934                 jnz     short loc_41C966
.text:0041C936                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0041C939                 mov     [esp+13Ch+Format], 0 ; int
.text:0041C941                 call    sub_41CD90
.text:0041C946                 xor     edx, edx
.text:0041C948                 mov     ebx, eax
.text:0041C94A                 test    eax, eax
.text:0041C94C                 js      short loc_41C966
.text:0041C94E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0041C956                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0041C959                 call    _fdopen
.text:0041C95E                 test    eax, eax
.text:0041C960                 mov     esi, eax
.text:0041C962                 jz      short loc_41C97D
.text:0041C964
.text:0041C964 loc_41C964:                             ; CODE XREF: sub_41C8F0+95↓j
.text:0041C964                 mov     edx, esi
.text:0041C966
.text:0041C966 loc_41C966:                             ; CODE XREF: sub_41C8F0+44↑j
.text:0041C966                                         ; sub_41C8F0+5C↑j
.text:0041C966                 mov     ebx, [esp+13Ch+var_8]
.text:0041C96D                 mov     eax, edx
.text:0041C96F                 mov     esi, [esp+13Ch+var_4]
.text:0041C976                 add     esp, 13Ch
.text:0041C97C                 retn
.text:0041C97D ; ---------------------------------------------------------------------------
.text:0041C97D
.text:0041C97D loc_41C97D:                             ; CODE XREF: sub_41C8F0+72↑j
.text:0041C97D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0041C980                 call    _close_0
.text:0041C985                 jmp     short loc_41C964
.text:0041C985 sub_41C8F0      endp
.text:0041C985
.text:0041C985 ; ---------------------------------------------------------------------------
.text:0041C987                 align 10h
.text:0041C990
.text:0041C990 ; =============== S U B R O U T I N E =======================================
.text:0041C990
.text:0041C990
.text:0041C990 sub_41C990      proc near               ; CODE XREF: sub_41C060+12E↑p
.text:0041C990
.text:0041C990 lpBuffer        = dword ptr -1Ch
.text:0041C990 pcbBuffer       = dword ptr -18h
.text:0041C990 var_8           = dword ptr -8
.text:0041C990 var_4           = dword ptr -4
.text:0041C990
.text:0041C990                 sub     esp, 1Ch
.text:0041C993                 lea     edx, [esp+1Ch+var_8]
.text:0041C997                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:0041C99B                 mov     [esp+1Ch+var_4], ebx
.text:0041C99F                 mov     [esp+1Ch+var_8], 101h
.text:0041C9A7                 mov     [esp+1Ch+lpBuffer], offset byte_421B60 ; lpBuffer
.text:0041C9AE                 call    GetUserNameA
.text:0041C9B3                 sub     esp, 8
.text:0041C9B6                 mov     edx, offset byte_421B60
.text:0041C9BB                 test    eax, eax
.text:0041C9BD                 jz      short loc_41C9C9
.text:0041C9BF
.text:0041C9BF loc_41C9BF:                             ; CODE XREF: sub_41C990+49↓j
.text:0041C9BF                 mov     ebx, [esp+1Ch+var_4]
.text:0041C9C3                 mov     eax, edx
.text:0041C9C5                 add     esp, 1Ch
.text:0041C9C8                 retn
.text:0041C9C9 ; ---------------------------------------------------------------------------
.text:0041C9C9
.text:0041C9C9 loc_41C9C9:                             ; CODE XREF: sub_41C990+2D↑j
.text:0041C9C9                 call    sub_41A1F0
.text:0041C9CE                 mov     ebx, eax
.text:0041C9D0                 call    _errno
.text:0041C9D5                 mov     [eax], ebx
.text:0041C9D7                 xor     edx, edx
.text:0041C9D9                 jmp     short loc_41C9BF
.text:0041C9D9 sub_41C990      endp
.text:0041C9D9
.text:0041C9D9 ; ---------------------------------------------------------------------------
.text:0041C9DB                 align 10h
.text:0041C9E0 aFile           db 'file',0             ; DATA XREF: sub_41CA10:loc_41CA3C↓o
.text:0041C9E5 ; const char aSSxxxxxx[]
.text:0041C9E5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_41CA10+9B↓o
.text:0041C9F5 ; const char aTemp[]
.text:0041C9F5 aTemp           db 'TEMP',0             ; DATA XREF: sub_41CA10:loc_41CAF2↓o
.text:0041C9F5                                         ; sub_41CA10:loc_41CB32↓o ...
.text:0041C9FA ; const char aTmp[]
.text:0041C9FA aTmp            db '/tmp',0             ; DATA XREF: sub_41CA10+12F↓o
.text:0041C9FA                                         ; sub_41CA10+141↓o ...
.text:0041C9FF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_41CA10:loc_41CBB0↓o
.text:0041CA06 aTmp_0          db 'TMP',0              ; DATA XREF: sub_41CA10:loc_41CC40↓o
.text:0041CA0A                 align 10h
.text:0041CA10
.text:0041CA10 ; =============== S U B R O U T I N E =======================================
.text:0041CA10
.text:0041CA10
.text:0041CA10 ; int __cdecl sub_41CA10(char *Buffer, int, char *, char *, int)
.text:0041CA10 sub_41CA10      proc near               ; CODE XREF: sub_41C8F0+3B↑p
.text:0041CA10
.text:0041CA10 Str             = dword ptr -1BCh
.text:0041CA10 Format          = dword ptr -1B8h
.text:0041CA10 var_1B4         = dword ptr -1B4h
.text:0041CA10 var_1B0         = dword ptr -1B0h
.text:0041CA10 var_1AC         = dword ptr -1ACh
.text:0041CA10 var_1A8         = dword ptr -1A8h
.text:0041CA10 var_19C         = dword ptr -19Ch
.text:0041CA10 var_13C         = dword ptr -13Ch
.text:0041CA10 var_DC          = dword ptr -0DCh
.text:0041CA10 var_7C          = dword ptr -7Ch
.text:0041CA10 Buffer          = dword ptr  4
.text:0041CA10 arg_4           = dword ptr  8
.text:0041CA10 arg_8           = dword ptr  0Ch
.text:0041CA10 arg_C           = dword ptr  10h
.text:0041CA10 arg_10          = dword ptr  14h
.text:0041CA10
.text:0041CA10                 push    ebp
.text:0041CA11                 push    edi
.text:0041CA12                 push    esi
.text:0041CA13                 push    ebx
.text:0041CA14                 sub     esp, 1ACh
.text:0041CA1A                 mov     eax, [esp+1BCh+arg_C]
.text:0041CA21                 mov     esi, [esp+1BCh+arg_8]
.text:0041CA28                 test    eax, eax
.text:0041CA2A                 jz      short loc_41CA3C
.text:0041CA2C                 mov     edx, [esp+1BCh+arg_C]
.text:0041CA33                 cmp     byte ptr [edx], 0
.text:0041CA36                 jnz     loc_41CC70
.text:0041CA3C
.text:0041CA3C loc_41CA3C:                             ; CODE XREF: sub_41CA10+1A↑j
.text:0041CA3C                 mov     eax, offset aFile ; "file"
.text:0041CA41                 mov     ebp, 4
.text:0041CA46                 mov     [esp+1BCh+arg_C], eax
.text:0041CA4D
.text:0041CA4D loc_41CA4D:                             ; CODE XREF: sub_41CA10+274↓j
.text:0041CA4D                                         ; sub_41CA10+27F↓j
.text:0041CA4D                 mov     ebx, [esp+1BCh+arg_10]
.text:0041CA54                 test    ebx, ebx
.text:0041CA56                 jnz     loc_41CBB0
.text:0041CA5C
.text:0041CA5C loc_41CA5C:                             ; CODE XREF: sub_41CA10+21C↓j
.text:0041CA5C                                         ; sub_41CA10+224↓j ...
.text:0041CA5C                 test    esi, esi
.text:0041CA5E                 jz      loc_41CAF2
.text:0041CA64
.text:0041CA64 loc_41CA64:                             ; CODE XREF: sub_41CA10+176↓j
.text:0041CA64                                         ; sub_41CA10+19A↓j
.text:0041CA64                 mov     [esp+1BCh+Str], esi ; Str
.text:0041CA67                 call    strlen
.text:0041CA6C                 test    eax, eax
.text:0041CA6E                 mov     edx, eax
.text:0041CA70                 jz      short loc_41CA80
.text:0041CA72                 movzx   eax, byte ptr [eax+esi-1]
.text:0041CA77                 cmp     al, 2Fh ; '/'
.text:0041CA79                 jz      short loc_41CAE0
.text:0041CA7B                 cmp     al, 5Ch ; '\'
.text:0041CA7D                 jz      short loc_41CAE0
.text:0041CA7F                 nop
.text:0041CA80
.text:0041CA80 loc_41CA80:                             ; CODE XREF: sub_41CA10+60↑j
.text:0041CA80                                         ; sub_41CA10+D1↓j ...
.text:0041CA80                 lea     edi, [ebp+edx+8]
.text:0041CA84                 cmp     [esp+1BCh+arg_4], edi
.text:0041CA8B                 jb      short loc_41CAC8
.text:0041CA8D                 mov     [esp+1BCh+var_1AC], ebp
.text:0041CA91                 mov     ecx, [esp+1BCh+arg_C]
.text:0041CA98                 mov     ebp, [esp+1BCh+Buffer]
.text:0041CA9F                 mov     [esp+1BCh+var_1B0], esi
.text:0041CAA3                 mov     [esp+1BCh+var_1A8], ecx
.text:0041CAA7                 mov     [esp+1BCh+var_1B4], edx
.text:0041CAAB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0041CAB3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0041CAB6                 call    sprintf
.text:0041CABB                 xor     eax, eax
.text:0041CABD
.text:0041CABD loc_41CABD:                             ; CODE XREF: sub_41CA10+C8↓j
.text:0041CABD                 add     esp, 1ACh
.text:0041CAC3                 pop     ebx
.text:0041CAC4                 pop     esi
.text:0041CAC5                 pop     edi
.text:0041CAC6                 pop     ebp
.text:0041CAC7                 retn
.text:0041CAC8 ; ---------------------------------------------------------------------------
.text:0041CAC8
.text:0041CAC8 loc_41CAC8:                             ; CODE XREF: sub_41CA10+7B↑j
.text:0041CAC8                 call    _errno
.text:0041CACD                 mov     dword ptr [eax], 16h
.text:0041CAD3
.text:0041CAD3 loc_41CAD3:                             ; CODE XREF: sub_41CA10+187↓j
.text:0041CAD3                 mov     eax, 0FFFFFFFFh
.text:0041CAD8                 jmp     short loc_41CABD
.text:0041CAD8 ; ---------------------------------------------------------------------------
.text:0041CADA                 align 10h
.text:0041CAE0
.text:0041CAE0 loc_41CAE0:                             ; CODE XREF: sub_41CA10+69↑j
.text:0041CAE0                                         ; sub_41CA10+6D↑j ...
.text:0041CAE0                 dec     edx
.text:0041CAE1                 jz      short loc_41CA80
.text:0041CAE3                 movzx   eax, byte ptr [edx+esi-1]
.text:0041CAE8                 cmp     al, 2Fh ; '/'
.text:0041CAEA                 jz      short loc_41CAE0
.text:0041CAEC                 cmp     al, 5Ch ; '\'
.text:0041CAEE                 jz      short loc_41CAE0
.text:0041CAF0                 jmp     short loc_41CA80
.text:0041CAF2 ; ---------------------------------------------------------------------------
.text:0041CAF2
.text:0041CAF2 loc_41CAF2:                             ; CODE XREF: sub_41CA10+4E↑j
.text:0041CAF2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041CAF9                 lea     esi, [esp+1BCh+var_13C]
.text:0041CB00                 call    getenv
.text:0041CB05                 mov     [esp+1BCh+Format], eax ; char *
.text:0041CB09                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041CB0D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041CB14                 call    sub_419720
.text:0041CB19                 test    eax, eax
.text:0041CB1B                 jnz     short loc_41CB32
.text:0041CB1D                 mov     edi, [esp+1BCh+var_13C]
.text:0041CB24                 and     edi, 0F000h
.text:0041CB2A                 cmp     edi, 4000h
.text:0041CB30                 jz      short loc_41CB9C
.text:0041CB32
.text:0041CB32 loc_41CB32:                             ; CODE XREF: sub_41CA10+10B↑j
.text:0041CB32                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041CB39                 call    getenv
.text:0041CB3E                 cld
.text:0041CB3F                 mov     edx, offset aTmp ; "/tmp"
.text:0041CB44                 mov     esi, eax
.text:0041CB46                 mov     ecx, 5
.text:0041CB4B                 mov     edi, edx
.text:0041CB4D                 repe cmpsb
.text:0041CB4F                 jz      short loc_41CB8C
.text:0041CB51                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0041CB59                 lea     ecx, [esp+1BCh+var_19C]
.text:0041CB5D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041CB61                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041CB68                 call    sub_419720
.text:0041CB6D                 test    eax, eax
.text:0041CB6F                 jnz     short loc_41CB8C
.text:0041CB71                 mov     ebx, [esp+1BCh+var_19C]
.text:0041CB75                 mov     esi, offset aTmp ; "/tmp"
.text:0041CB7A                 and     ebx, 0F000h
.text:0041CB80                 cmp     ebx, 4000h
.text:0041CB86                 jz      loc_41CA64
.text:0041CB8C
.text:0041CB8C loc_41CB8C:                             ; CODE XREF: sub_41CA10+13F↑j
.text:0041CB8C                                         ; sub_41CA10+15F↑j
.text:0041CB8C                 call    _errno
.text:0041CB91                 mov     dword ptr [eax], 2
.text:0041CB97                 jmp     loc_41CAD3
.text:0041CB9C ; ---------------------------------------------------------------------------
.text:0041CB9C
.text:0041CB9C loc_41CB9C:                             ; CODE XREF: sub_41CA10+120↑j
.text:0041CB9C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041CBA3                 call    getenv
.text:0041CBA8                 mov     esi, eax
.text:0041CBAA                 jmp     loc_41CA64
.text:0041CBAA ; ---------------------------------------------------------------------------
.text:0041CBAF                 align 10h
.text:0041CBB0
.text:0041CBB0 loc_41CBB0:                             ; CODE XREF: sub_41CA10+46↑j
.text:0041CBB0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0041CBB7                 call    sub_41D220
.text:0041CBBC                 test    eax, eax
.text:0041CBBE                 mov     ebx, eax
.text:0041CBC0                 jz      short loc_41CC40
.text:0041CBC2
.text:0041CBC2 loc_41CBC2:                             ; CODE XREF: sub_41CA10+240↓j
.text:0041CBC2                                         ; sub_41CA10+256↓j
.text:0041CBC2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0041CBC6                 lea     edi, [esp+1BCh+var_7C]
.text:0041CBCD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0041CBD1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041CBD8                 call    sub_419720
.text:0041CBDD                 test    eax, eax
.text:0041CBDF                 jnz     short loc_41CBF6
.text:0041CBE1                 mov     edx, [esp+1BCh+var_7C]
.text:0041CBE8                 and     edx, 0F000h
.text:0041CBEE                 cmp     edx, 4000h
.text:0041CBF4                 jz      short loc_41CC39
.text:0041CBF6
.text:0041CBF6 loc_41CBF6:                             ; CODE XREF: sub_41CA10+1CF↑j
.text:0041CBF6                                         ; sub_41CA10+25C↓j
.text:0041CBF6                 test    esi, esi
.text:0041CBF8                 jz      short loc_41CC32
.text:0041CBFA                 mov     [esp+1BCh+Format], esi ; char *
.text:0041CBFE                 lea     ecx, [esp+1BCh+var_DC]
.text:0041CC05                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041CC09                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041CC10                 call    sub_419720
.text:0041CC15                 test    eax, eax
.text:0041CC17                 jnz     short loc_41CC32
.text:0041CC19                 mov     ebx, [esp+1BCh+var_DC]
.text:0041CC20                 and     ebx, 0F000h
.text:0041CC26                 cmp     ebx, 4000h
.text:0041CC2C                 jz      loc_41CA5C
.text:0041CC32
.text:0041CC32 loc_41CC32:                             ; CODE XREF: sub_41CA10+1E8↑j
.text:0041CC32                                         ; sub_41CA10+207↑j
.text:0041CC32                 xor     esi, esi
.text:0041CC34                 jmp     loc_41CA5C
.text:0041CC39 ; ---------------------------------------------------------------------------
.text:0041CC39
.text:0041CC39 loc_41CC39:                             ; CODE XREF: sub_41CA10+1E4↑j
.text:0041CC39                 mov     esi, ebx
.text:0041CC3B                 jmp     loc_41CA5C
.text:0041CC40 ; ---------------------------------------------------------------------------
.text:0041CC40
.text:0041CC40 loc_41CC40:                             ; CODE XREF: sub_41CA10+1B0↑j
.text:0041CC40                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0041CC47                 call    sub_41D220
.text:0041CC4C                 test    eax, eax
.text:0041CC4E                 mov     ebx, eax
.text:0041CC50                 jnz     loc_41CBC2
.text:0041CC56                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041CC5D                 call    sub_41D220
.text:0041CC62                 test    eax, eax
.text:0041CC64                 mov     ebx, eax
.text:0041CC66                 jnz     loc_41CBC2
.text:0041CC6C                 jmp     short loc_41CBF6
.text:0041CC6C ; ---------------------------------------------------------------------------
.text:0041CC6E                 align 10h
.text:0041CC70
.text:0041CC70 loc_41CC70:                             ; CODE XREF: sub_41CA10+26↑j
.text:0041CC70                 mov     ecx, [esp+1BCh+arg_C]
.text:0041CC77                 mov     [esp+1BCh+Str], ecx ; Str
.text:0041CC7A                 call    strlen
.text:0041CC7F                 cmp     eax, 5
.text:0041CC82                 mov     ebp, eax
.text:0041CC84                 jbe     loc_41CA4D
.text:0041CC8A                 mov     ebp, 5
.text:0041CC8F                 jmp     loc_41CA4D
.text:0041CC8F sub_41CA10      endp
.text:0041CC8F
.text:0041CC8F ; ---------------------------------------------------------------------------
.text:0041CC94                 align 10h
.text:0041CCA0 byte_41CCA0     db 61h                  ; DATA XREF: sub_41CD90+DC↓r
.text:0041CCA0                                         ; sub_41CD90+122↓r ...
.text:0041CCA1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041CCDF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_41CD90+39↓o
.text:0041CCE6                 align 20h
.text:0041CD00 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0041CD00                                         ; DATA XREF: sub_41CD90:loc_41D008↓o
.text:0041CD1F                 align 10h
.text:0041CD20 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0041CD20                                         ; DATA XREF: sub_41CD90+405↓o
.text:0041CD4B                 align 20h
.text:0041CD60 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0041CD60                                         ; DATA XREF: sub_41CD90+40D↓o
.text:0041CD83                 align 10h
.text:0041CD90
.text:0041CD90 ; =============== S U B R O U T I N E =======================================
.text:0041CD90
.text:0041CD90
.text:0041CD90 ; int __cdecl sub_41CD90(char *FileName, int)
.text:0041CD90 sub_41CD90      proc near               ; CODE XREF: sub_41C8F0+51↑p
.text:0041CD90
.text:0041CD90 Str             = dword ptr -9Ch
.text:0041CD90 OpenFlag        = dword ptr -98h
.text:0041CD90 var_94          = dword ptr -94h
.text:0041CD90 var_90          = dword ptr -90h
.text:0041CD90 var_8C          = dword ptr -8Ch
.text:0041CD90 var_88          = dword ptr -88h
.text:0041CD90 var_84          = dword ptr -84h
.text:0041CD90 var_80          = dword ptr -80h
.text:0041CD90 var_7C          = dword ptr -7Ch
.text:0041CD90 FileName        = dword ptr  4
.text:0041CD90 arg_4           = dword ptr  8
.text:0041CD90
.text:0041CD90                 push    ebp
.text:0041CD91                 push    edi
.text:0041CD92                 push    esi
.text:0041CD93                 push    ebx
.text:0041CD94                 sub     esp, 8Ch
.text:0041CD9A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0041CDA2                 call    _errno
.text:0041CDA7                 mov     edx, [eax]
.text:0041CDA9                 mov     [esp+9Ch+var_8C], edx
.text:0041CDAD                 mov     edx, [esp+9Ch+FileName]
.text:0041CDB4                 mov     [esp+9Ch+Str], edx ; Str
.text:0041CDB7                 call    strlen
.text:0041CDBC                 cmp     eax, 5
.text:0041CDBF                 jle     short loc_41CDDD
.text:0041CDC1                 cld
.text:0041CDC2                 mov     ecx, [esp+9Ch+FileName]
.text:0041CDC9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041CDCE                 lea     esi, [eax+ecx-6]
.text:0041CDD2                 mov     ecx, 7
.text:0041CDD7                 mov     ebp, esi
.text:0041CDD9                 repe cmpsb
.text:0041CDDB                 jz      short loc_41CDF8
.text:0041CDDD
.text:0041CDDD loc_41CDDD:                             ; CODE XREF: sub_41CD90+2F↑j
.text:0041CDDD                 call    _errno
.text:0041CDE2                 mov     dword ptr [eax], 16h
.text:0041CDE8
.text:0041CDE8 loc_41CDE8:                             ; CODE XREF: sub_41CD90+295↓j
.text:0041CDE8                                         ; sub_41CD90+2D8↓j ...
.text:0041CDE8                 mov     eax, 0FFFFFFFFh
.text:0041CDED
.text:0041CDED loc_41CDED:                             ; CODE XREF: sub_41CD90+2EF↓j
.text:0041CDED                                         ; sub_41CD90+332↓j
.text:0041CDED                 add     esp, 8Ch
.text:0041CDF3                 pop     ebx
.text:0041CDF4                 pop     esi
.text:0041CDF5                 pop     edi
.text:0041CDF6                 pop     ebp
.text:0041CDF7                 retn
.text:0041CDF8 ; ---------------------------------------------------------------------------
.text:0041CDF8
.text:0041CDF8 loc_41CDF8:                             ; CODE XREF: sub_41CD90+4B↑j
.text:0041CDF8                 mov     ecx, dword ptr ds:byte_421B60+114h
.text:0041CDFE                 mov     edi, dword ptr ds:byte_421B60+110h
.text:0041CE04                 mov     eax, ecx
.text:0041CE06                 or      eax, edi
.text:0041CE08                 jz      loc_41D143
.text:0041CE0E
.text:0041CE0E loc_41CE0E:                             ; CODE XREF: sub_41CD90+3F8↓j
.text:0041CE0E                 rdtsc
.text:0041CE10                 mov     edi, edx
.text:0041CE12                 mov     esi, eax
.text:0041CE14                 call    _getpid
.text:0041CE19                 mov     ebx, eax
.text:0041CE1B                 mov     edx, esi
.text:0041CE1D                 sar     ebx, 1Fh
.text:0041CE20                 xor     edx, eax
.text:0041CE22                 mov     ecx, edi
.text:0041CE24                 xor     ecx, ebx
.text:0041CE26                 mov     ebx, edx
.text:0041CE28                 mov     esi, ecx
.text:0041CE2A                 add     ebx, dword ptr ds:byte_421B60+110h
.text:0041CE30                 adc     esi, dword ptr ds:byte_421B60+114h
.text:0041CE36                 xor     edi, edi
.text:0041CE38                 mov     dword ptr ds:byte_421B60+110h, ebx
.text:0041CE3E                 mov     dword ptr ds:byte_421B60+114h, esi
.text:0041CE44                 lea     esi, [esi+0]
.text:0041CE4A                 lea     edi, [edi+0]
.text:0041CE50
.text:0041CE50 loc_41CE50:                             ; CODE XREF: sub_41CD90+2C7↓j
.text:0041CE50                 mov     [esp+9Ch+Str], ebx
.text:0041CE53                 mov     [esp+9Ch+OpenFlag], esi
.text:0041CE57                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CE5F                 mov     [esp+9Ch+var_90], 0
.text:0041CE67                 call    sub_41E970
.text:0041CE6C                 movzx   ecx, ds:byte_41CCA0[eax]
.text:0041CE73                 mov     [ebp+0], cl
.text:0041CE76                 mov     [esp+9Ch+Str], ebx
.text:0041CE79                 mov     [esp+9Ch+OpenFlag], esi
.text:0041CE7D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CE85                 mov     [esp+9Ch+var_90], 0
.text:0041CE8D                 call    sub_41EAF0
.text:0041CE92                 mov     [esp+9Ch+Str], eax
.text:0041CE95                 mov     ebx, eax
.text:0041CE97                 mov     esi, edx
.text:0041CE99                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CEA1                 mov     [esp+9Ch+var_90], 0
.text:0041CEA9                 mov     [esp+9Ch+OpenFlag], edx
.text:0041CEAD                 call    sub_41E970
.text:0041CEB2                 movzx   edx, ds:byte_41CCA0[eax]
.text:0041CEB9                 mov     [ebp+1], dl
.text:0041CEBC                 mov     [esp+9Ch+Str], ebx
.text:0041CEBF                 mov     [esp+9Ch+OpenFlag], esi
.text:0041CEC3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CECB                 mov     [esp+9Ch+var_90], 0
.text:0041CED3                 call    sub_41EAF0
.text:0041CED8                 mov     [esp+9Ch+Str], eax
.text:0041CEDB                 mov     ebx, eax
.text:0041CEDD                 mov     esi, edx
.text:0041CEDF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CEE7                 mov     [esp+9Ch+var_90], 0
.text:0041CEEF                 mov     [esp+9Ch+OpenFlag], edx
.text:0041CEF3                 call    sub_41E970
.text:0041CEF8                 movzx   ecx, ds:byte_41CCA0[eax]
.text:0041CEFF                 mov     [ebp+2], cl
.text:0041CF02                 mov     [esp+9Ch+Str], ebx
.text:0041CF05                 mov     [esp+9Ch+OpenFlag], esi
.text:0041CF09                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CF11                 mov     [esp+9Ch+var_90], 0
.text:0041CF19                 call    sub_41EAF0
.text:0041CF1E                 mov     [esp+9Ch+Str], eax
.text:0041CF21                 mov     ebx, eax
.text:0041CF23                 mov     esi, edx
.text:0041CF25                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CF2D                 mov     [esp+9Ch+var_90], 0
.text:0041CF35                 mov     [esp+9Ch+OpenFlag], edx
.text:0041CF39                 call    sub_41E970
.text:0041CF3E                 movzx   edx, ds:byte_41CCA0[eax]
.text:0041CF45                 mov     [ebp+3], dl
.text:0041CF48                 mov     [esp+9Ch+Str], ebx
.text:0041CF4B                 mov     [esp+9Ch+OpenFlag], esi
.text:0041CF4F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CF57                 mov     [esp+9Ch+var_90], 0
.text:0041CF5F                 call    sub_41EAF0
.text:0041CF64                 mov     [esp+9Ch+Str], eax
.text:0041CF67                 mov     ebx, eax
.text:0041CF69                 mov     esi, edx
.text:0041CF6B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CF73                 mov     [esp+9Ch+var_90], 0
.text:0041CF7B                 mov     [esp+9Ch+OpenFlag], edx
.text:0041CF7F                 call    sub_41E970
.text:0041CF84                 movzx   ecx, ds:byte_41CCA0[eax]
.text:0041CF8B                 mov     [ebp+4], cl
.text:0041CF8E                 mov     [esp+9Ch+Str], ebx
.text:0041CF91                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CF99                 mov     [esp+9Ch+var_90], 0
.text:0041CFA1                 mov     [esp+9Ch+OpenFlag], esi
.text:0041CFA5                 call    sub_41EAF0
.text:0041CFAA                 mov     [esp+9Ch+Str], eax
.text:0041CFAD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041CFB5                 mov     [esp+9Ch+var_90], 0
.text:0041CFBD                 mov     [esp+9Ch+OpenFlag], edx
.text:0041CFC1                 call    sub_41E970
.text:0041CFC6                 movzx   ebx, ds:byte_41CCA0[eax]
.text:0041CFCD                 mov     [ebp+5], bl
.text:0041CFD0                 cmp     [esp+9Ch+arg_4], 1
.text:0041CFD8                 jz      loc_41D127
.text:0041CFDE                 cmp     [esp+9Ch+arg_4], 1
.text:0041CFE6                 jle     loc_41D0F0
.text:0041CFEC                 cmp     [esp+9Ch+arg_4], 2
.text:0041CFF4                 jz      loc_41D0C7
.text:0041CFFA                 cmp     [esp+9Ch+arg_4], 3
.text:0041D002                 jz      loc_41D084
.text:0041D008
.text:0041D008 loc_41D008:                             ; CODE XREF: sub_41CD90+369↓j
.text:0041D008                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041D00D                 test    ebx, ebx
.text:0041D00F                 jnz     loc_41D18D
.text:0041D015
.text:0041D015 loc_41D015:                             ; CODE XREF: sub_41CD90+354↓j
.text:0041D015                 mov     eax, [esp+9Ch+var_88]
.text:0041D019                 test    eax, eax
.text:0041D01B                 jns     short loc_41D070
.text:0041D01D                 call    _errno
.text:0041D022                 cmp     dword ptr [eax], 11h
.text:0041D025                 jnz     loc_41CDE8
.text:0041D02B
.text:0041D02B loc_41D02B:                             ; CODE XREF: sub_41CD90+315↓j
.text:0041D02B                 mov     edx, dword ptr ds:byte_421B60+110h
.text:0041D031                 mov     ecx, dword ptr ds:byte_421B60+114h
.text:0041D037                 add     edx, 1E61h
.text:0041D03D                 adc     ecx, 0
.text:0041D040                 mov     ebx, edx
.text:0041D042                 inc     edi
.text:0041D043                 mov     dword ptr ds:byte_421B60+110h, edx
.text:0041D049                 cmp     edi, 3A2F8h
.text:0041D04F                 mov     esi, ecx
.text:0041D051                 mov     dword ptr ds:byte_421B60+114h, ecx
.text:0041D057                 jb      loc_41CE50
.text:0041D05D                 call    _errno
.text:0041D062                 mov     dword ptr [eax], 11h
.text:0041D068                 jmp     loc_41CDE8
.text:0041D068 ; ---------------------------------------------------------------------------
.text:0041D06D                 align 10h
.text:0041D070
.text:0041D070 loc_41D070:                             ; CODE XREF: sub_41CD90+28B↑j
.text:0041D070                 call    _errno
.text:0041D075                 mov     esi, [esp+9Ch+var_8C]
.text:0041D079                 mov     [eax], esi
.text:0041D07B                 mov     eax, [esp+9Ch+var_88]
.text:0041D07F                 jmp     loc_41CDED
.text:0041D084 ; ---------------------------------------------------------------------------
.text:0041D084
.text:0041D084 loc_41D084:                             ; CODE XREF: sub_41CD90+272↑j
.text:0041D084                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041D08B                 mov     ecx, [esp+9Ch+FileName]
.text:0041D092                 lea     esi, [esp+9Ch+var_7C]
.text:0041D096                 mov     [esp+9Ch+var_94], esi ; int
.text:0041D09A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041D09E                 call    sub_417750
.text:0041D0A3                 test    eax, eax
.text:0041D0A5                 jns     short loc_41D02B
.text:0041D0A7                 call    _errno
.text:0041D0AC                 cmp     dword ptr [eax], 2
.text:0041D0AF                 jnz     loc_41CDE8
.text:0041D0B5                 call    _errno
.text:0041D0BA                 mov     ebx, [esp+9Ch+var_8C]
.text:0041D0BE                 mov     [eax], ebx
.text:0041D0C0                 xor     eax, eax
.text:0041D0C2                 jmp     loc_41CDED
.text:0041D0C7 ; ---------------------------------------------------------------------------
.text:0041D0C7
.text:0041D0C7 loc_41D0C7:                             ; CODE XREF: sub_41CD90+264↑j
.text:0041D0C7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041D0CF                 mov     edx, [esp+9Ch+FileName]
.text:0041D0D6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0041D0D9                 call    sub_4177A0
.text:0041D0DE                 mov     esi, esi
.text:0041D0E0
.text:0041D0E0 loc_41D0E0:                             ; CODE XREF: sub_41CD90+395↓j
.text:0041D0E0                 mov     [esp+9Ch+var_88], eax
.text:0041D0E4                 jmp     loc_41D015
.text:0041D0E4 ; ---------------------------------------------------------------------------
.text:0041D0E9                 align 10h
.text:0041D0F0
.text:0041D0F0 loc_41D0F0:                             ; CODE XREF: sub_41CD90+256↑j
.text:0041D0F0                 mov     eax, [esp+9Ch+arg_4]
.text:0041D0F7                 test    eax, eax
.text:0041D0F9                 jnz     loc_41D008
.text:0041D0FF                 mov     [esp+9Ch+var_94], 180h
.text:0041D107                 mov     esi, [esp+9Ch+FileName]
.text:0041D10E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0041D116                 mov     [esp+9Ch+Str], esi ; FileName
.text:0041D119                 lea     esi, [esi+0]
.text:0041D120
.text:0041D120 loc_41D120:                             ; CODE XREF: sub_41CD90+3B1↓j
.text:0041D120                 call    _open_0
.text:0041D125                 jmp     short loc_41D0E0
.text:0041D127 ; ---------------------------------------------------------------------------
.text:0041D127
.text:0041D127 loc_41D127:                             ; CODE XREF: sub_41CD90+248↑j
.text:0041D127                 mov     [esp+9Ch+var_94], 180h
.text:0041D12F                 mov     ebx, [esp+9Ch+FileName]
.text:0041D136                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041D13E                 mov     [esp+9Ch+Str], ebx
.text:0041D141                 jmp     short loc_41D120
.text:0041D143 ; ---------------------------------------------------------------------------
.text:0041D143
.text:0041D143 loc_41D143:                             ; CODE XREF: sub_41CD90+78↑j
.text:0041D143                 mov     [esp+9Ch+OpenFlag], 0
.text:0041D14B                 lea     ebx, [esp+9Ch+var_84]
.text:0041D14F                 mov     [esp+9Ch+Str], ebx
.text:0041D152                 call    sub_41D1C0
.text:0041D157                 mov     edi, [esp+9Ch+var_80]
.text:0041D15B                 mov     edx, [esp+9Ch+var_84]
.text:0041D15F                 mov     ecx, edi
.text:0041D161                 mov     ebx, edi
.text:0041D163                 shl     ecx, 10h
.text:0041D166                 sar     ebx, 1Fh
.text:0041D169                 shld    ebx, edi, 10h
.text:0041D16D                 mov     esi, edx
.text:0041D16F                 mov     edi, edx
.text:0041D171                 mov     edx, ecx
.text:0041D173                 sar     edi, 1Fh
.text:0041D176                 xor     edx, esi
.text:0041D178                 mov     dword ptr ds:byte_421B60+110h, edx
.text:0041D17E                 mov     esi, ebx
.text:0041D180                 xor     esi, edi
.text:0041D182                 mov     dword ptr ds:byte_421B60+114h, esi
.text:0041D188                 jmp     loc_41CE0E
.text:0041D18D ; ---------------------------------------------------------------------------
.text:0041D18D
.text:0041D18D loc_41D18D:                             ; CODE XREF: sub_41CD90+27F↑j
.text:0041D18D                 mov     [esp+9Ch+var_94], 151h
.text:0041D195                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041D19D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0041D1A4                 call    _assert
.text:0041D1A4 sub_41CD90      endp
.text:0041D1A4
.text:0041D1A4 ; ---------------------------------------------------------------------------
.text:0041D1A9                 align 20h
.text:0041D1C0
.text:0041D1C0 ; =============== S U B R O U T I N E =======================================
.text:0041D1C0
.text:0041D1C0
.text:0041D1C0 sub_41D1C0      proc near               ; CODE XREF: sub_41CD90+3C2↑p
.text:0041D1C0
.text:0041D1C0 var_1C          = dword ptr -1Ch
.text:0041D1C0 var_18          = dword ptr -18h
.text:0041D1C0 var_C           = dword ptr -0Ch
.text:0041D1C0 var_8           = dword ptr -8
.text:0041D1C0 var_4           = dword ptr -4
.text:0041D1C0 arg_0           = dword ptr  4
.text:0041D1C0 arg_4           = dword ptr  8
.text:0041D1C0
.text:0041D1C0                 sub     esp, 1Ch
.text:0041D1C3                 mov     edx, [esp+1Ch+arg_4]
.text:0041D1C7                 mov     [esp+1Ch+var_4], ebx
.text:0041D1CB                 mov     ebx, [esp+1Ch+arg_0]
.text:0041D1CF                 mov     [esp+1Ch+var_18], edx
.text:0041D1D3                 lea     edx, [esp+1Ch+var_C]
.text:0041D1D7                 mov     [esp+1Ch+var_1C], edx
.text:0041D1DA                 call    sub_41D240
.text:0041D1DF                 test    eax, eax
.text:0041D1E1                 mov     edx, 0FFFFFFFFh
.text:0041D1E6                 jnz     short loc_41D20A
.text:0041D1E8                 mov     ecx, [esp+1Ch+var_C]
.text:0041D1EC                 mov     edx, 10624DD3h
.text:0041D1F1                 mov     [ebx], ecx
.text:0041D1F3                 mov     ecx, [esp+1Ch+var_8]
.text:0041D1F7                 mov     eax, ecx
.text:0041D1F9                 imul    edx
.text:0041D1FB                 mov     eax, ecx
.text:0041D1FD                 sar     eax, 1Fh
.text:0041D200                 sar     edx, 6
.text:0041D203                 sub     edx, eax
.text:0041D205                 mov     [ebx+4], edx
.text:0041D208                 xor     edx, edx
.text:0041D20A
.text:0041D20A loc_41D20A:                             ; CODE XREF: sub_41D1C0+26↑j
.text:0041D20A                 mov     ebx, [esp+1Ch+var_4]
.text:0041D20E                 mov     eax, edx
.text:0041D210                 add     esp, 1Ch
.text:0041D213                 retn
.text:0041D213 sub_41D1C0      endp
.text:0041D213
.text:0041D213 ; ---------------------------------------------------------------------------
.text:0041D214                 align 10h
.text:0041D220
.text:0041D220 ; =============== S U B R O U T I N E =======================================
.text:0041D220
.text:0041D220
.text:0041D220 sub_41D220      proc near               ; CODE XREF: sub_41CA10+1A7↑p
.text:0041D220                                         ; sub_41CA10+237↑p ...
.text:0041D220                 mov     edx, ds:dword_421A90
.text:0041D226                 test    edx, edx
.text:0041D228                 jnz     short loc_41D230
.text:0041D22A                 jmp     getenv
.text:0041D22A ; ---------------------------------------------------------------------------
.text:0041D22F                 align 10h
.text:0041D230
.text:0041D230 loc_41D230:                             ; CODE XREF: sub_41D220+8↑j
.text:0041D230                 xor     eax, eax
.text:0041D232                 retn
.text:0041D232 sub_41D220      endp
.text:0041D232
.text:0041D232 ; ---------------------------------------------------------------------------
.text:0041D233                 align 10h
.text:0041D240
.text:0041D240 ; =============== S U B R O U T I N E =======================================
.text:0041D240
.text:0041D240
.text:0041D240 sub_41D240      proc near               ; CODE XREF: sub_41D1C0+1A↑p
.text:0041D240
.text:0041D240 lpTimeZoneInformation= dword ptr -0DCh
.text:0041D240 var_D8          = dword ptr -0D8h
.text:0041D240 var_D4          = dword ptr -0D4h
.text:0041D240 var_D0          = dword ptr -0D0h
.text:0041D240 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0041D240 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0041D240 arg_0           = dword ptr  4
.text:0041D240 arg_4           = dword ptr  8
.text:0041D240
.text:0041D240                 push    edi
.text:0041D241                 push    esi
.text:0041D242                 push    ebx
.text:0041D243                 sub     esp, 0D0h
.text:0041D249                 mov     ebx, [esp+0DCh+arg_4]
.text:0041D250                 mov     edi, [esp+0DCh+arg_0]
.text:0041D257                 test    ebx, ebx
.text:0041D259                 jz      short loc_41D284
.text:0041D25B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041D25F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0041D262                 call    GetTimeZoneInformation
.text:0041D267                 sub     esp, 4
.text:0041D26A                 cmp     eax, 0FFFFFFFFh
.text:0041D26D                 jz      loc_41D305
.text:0041D273                 xor     ecx, ecx
.text:0041D275                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0041D279                 cmp     eax, 2
.text:0041D27C                 setz    cl
.text:0041D27F                 mov     [ebx], esi
.text:0041D281                 mov     [ebx+4], ecx
.text:0041D284
.text:0041D284 loc_41D284:                             ; CODE XREF: sub_41D240+19↑j
.text:0041D284                                         ; sub_41D240+E0↓j
.text:0041D284                 test    edi, edi
.text:0041D286                 jz      short loc_41D2F9
.text:0041D288                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041D28C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041D28F                 call    GetSystemTimeAsFileTime
.text:0041D294                 sub     esp, 4
.text:0041D297                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041D29B                 mov     [esp+0DCh+var_D4], 989680h
.text:0041D2A3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0041D2A7                 mov     [esp+0DCh+var_D0], 0
.text:0041D2AF                 add     ebx, 2AC18000h
.text:0041D2B5                 adc     esi, 0FE624E21h
.text:0041D2BB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041D2BF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041D2C2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0041D2C6                 mov     [esp+0DCh+var_D8], esi
.text:0041D2CA                 call    sub_41EAF0
.text:0041D2CF                 mov     [edi], eax
.text:0041D2D1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041D2D4                 mov     [esp+0DCh+var_D4], 989680h
.text:0041D2DC                 mov     [esp+0DCh+var_D0], 0
.text:0041D2E4                 mov     [esp+0DCh+var_D8], esi
.text:0041D2E8                 call    sub_41E970
.text:0041D2ED                 lea     ebx, [eax+eax*4]
.text:0041D2F0                 lea     edx, [ebx+ebx*4]
.text:0041D2F3                 shl     edx, 2
.text:0041D2F6                 mov     [edi+4], edx
.text:0041D2F9
.text:0041D2F9 loc_41D2F9:                             ; CODE XREF: sub_41D240+46↑j
.text:0041D2F9                 add     esp, 0D0h
.text:0041D2FF                 xor     eax, eax
.text:0041D301                 pop     ebx
.text:0041D302                 pop     esi
.text:0041D303                 pop     edi
.text:0041D304                 retn
.text:0041D305 ; ---------------------------------------------------------------------------
.text:0041D305
.text:0041D305 loc_41D305:                             ; CODE XREF: sub_41D240+2D↑j
.text:0041D305                 mov     dword ptr [ebx], 0
.text:0041D30B                 mov     dword ptr [ebx+4], 0
.text:0041D312                 call    sub_41A1F0
.text:0041D317                 mov     esi, eax
.text:0041D319                 call    _errno
.text:0041D31E                 mov     [eax], esi
.text:0041D320                 jmp     loc_41D284
.text:0041D320 sub_41D240      endp
.text:0041D320
.text:0041D320 ; ---------------------------------------------------------------------------
.text:0041D325                 align 10h
.text:0041D330
.text:0041D330 ; =============== S U B R O U T I N E =======================================
.text:0041D330
.text:0041D330 ; Attributes: thunk
.text:0041D330
.text:0041D330 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0041D330 OleInitialize   proc near               ; CODE XREF: sub_418360+1A↑p
.text:0041D330                                         ; sub_4192C0+41↑p
.text:0041D330
.text:0041D330 pvReserved      = dword ptr  4
.text:0041D330
.text:0041D330                 jmp     ds:__imp_OleInitialize
.text:0041D330 OleInitialize   endp
.text:0041D330
.text:0041D330 ; ---------------------------------------------------------------------------
.text:0041D336                 align 10h
.text:0041D340
.text:0041D340 ; =============== S U B R O U T I N E =======================================
.text:0041D340
.text:0041D340 ; Attributes: thunk
.text:0041D340
.text:0041D340 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0041D340 CoCreateInstance proc near              ; CODE XREF: sub_418360+52↑p
.text:0041D340                                         ; sub_4192C0+79↑p
.text:0041D340
.text:0041D340 rclsid          = dword ptr  4
.text:0041D340 pUnkOuter       = dword ptr  8
.text:0041D340 dwClsContext    = dword ptr  0Ch
.text:0041D340 riid            = dword ptr  10h
.text:0041D340 ppv             = dword ptr  14h
.text:0041D340
.text:0041D340                 jmp     ds:__imp_CoCreateInstance
.text:0041D340 CoCreateInstance endp
.text:0041D340
.text:0041D340 ; ---------------------------------------------------------------------------
.text:0041D346                 align 10h
.text:0041D350
.text:0041D350 ; =============== S U B R O U T I N E =======================================
.text:0041D350
.text:0041D350 ; Attributes: thunk
.text:0041D350
.text:0041D350 ; void __stdcall CoUninitialize()
.text:0041D350 CoUninitialize  proc near               ; CODE XREF: sub_418360+14E↑p
.text:0041D350                                         ; sub_418360+16D↑p ...
.text:0041D350                 jmp     ds:__imp_CoUninitialize
.text:0041D350 CoUninitialize  endp
.text:0041D350
.text:0041D350 ; ---------------------------------------------------------------------------
.text:0041D356                 align 10h
.text:0041D360                 add     al, 0BAh ; 'º'
.text:0041D362                 retf
.text:0041D362 ; ---------------------------------------------------------------------------
.text:0041D363                 db 7Eh
.text:0041D364                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0041D364                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0041D364                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0041D364                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0041D364                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0041D364                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0041D364                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0041D364                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0041D364                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0041D364                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0041D364                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0041D364                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0041D364                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0041D364                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0041D364                 dd 0C4426C00h, 330h, 0
.text:0041D498                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041D498                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0041D498                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0041D498                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0041D4E8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041D4E8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0041D4E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0041D4E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0041D4E8                 dd 0BA94B00h, 1Bh, 0
.text:0041D548                 dd 0C0h, 46000000h, 1Ch, 0
.text:0041D558                 dd 0C0h, 46000000h, 331h, 0
.text:0041D568                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041D568                 dd 312h, 0
.text:0041D588                 dd 0C0h, 46000000h, 30Eh, 0
.text:0041D598                 dd 0C0h, 46000000h, 30Dh, 0
.text:0041D5A8                 dd 0C0h, 46000000h, 311h, 0
.text:0041D5B8                 dd 0C0h, 46000000h, 313h, 0
.text:0041D5C8                 dd 0C0h, 46000000h, 30Ch, 0
.text:0041D5D8                 dd 0C0h, 46000000h, 30Fh, 0
.text:0041D5E8                 dd 0C0h, 46000000h, 310h, 0
.text:0041D5F8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041D5F8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0041D628                 dd 0C0h, 46000000h, 319h, 0
.text:0041D638                 dd 0C0h, 46000000h, 315h, 0
.text:0041D648                 dd 0C0h, 46000000h, 316h, 0
.text:0041D658                 dd 0C0h, 46000000h, 315h, 0
.text:0041D668                 dd 0C0h, 46000000h, 2E005h, 0
.text:0041D678                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041D678                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0041D678                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0041D6B8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041D6B8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0041D6B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0041D6B8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0041D6B8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0041D6B8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0041D6B8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0041D6B8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0041D6B8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0041D6B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0041D6B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0041D6B8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041D6B8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0041D6B8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0041D6B8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0041D6B8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041D6B8                 dd 2DE81h, 0
.text:0041D808                 dd 0C0h, 46000000h, 4 dup(0)
.text:0041D820                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0041D820                 dd 0
.text:0041D838                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041D838                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0041D838                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0041D838                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0041D838                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041D838                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0041D838                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0041D838                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0041D838                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0041D838                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0041D838                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0041D838                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0041D838                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0041D838                 dd 10Fh, 0
.text:0041D948                 dd 0C0h, 46000000h, 125h, 0
.text:0041D958                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041D958                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0041D958                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0041D998                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0041D998                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041D998                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0041D998                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0041D998                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0041D9F8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0041DA08                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0041DA08                 dd 140h, 0
.text:0041DA28                 dd 0C0h, 46000000h, 1, 0
.text:0041DA38                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0041DA38                 dd 71D3400h, 13Dh, 0
.text:0041DA58                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041DA58                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0041DA58                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0041DA58                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0041DAA8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0041DAA8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041DAA8                 dd 20405h, 0
.text:0041DAD8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0041DAE8                 dd 0C0h, 46000000h, 20406h, 0
.text:0041DAF8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0041DB08                 dd 0C0h, 46000000h, 110h, 0
.text:0041DB18                 dd 0C0h, 46000000h, 10Eh, 0
.text:0041DB28                 dd 0C0h, 46000000h, 123h, 0
.text:0041DB38                 dd 0C0h, 46000000h, 124h, 0
.text:0041DB48                 dd 0C0h, 46000000h, 13h, 0
.text:0041DB58                 dd 0C0h, 46000000h, 14h, 0
.text:0041DB68                 dd 0C0h, 46000000h, 15h, 0
.text:0041DB78                 dd 0C0h, 46000000h, 20400h, 0
.text:0041DB88                 dd 0C0h, 46000000h, 121h, 0
.text:0041DB98                 dd 0C0h, 46000000h, 122h, 0
.text:0041DBA8                 dd 0C0h, 46000000h, 2E011h, 0
.text:0041DBB8                 dd 0C0h, 46000000h, 108h, 0
.text:0041DBC8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0041DBC8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041DBC8                 dd 103h, 0
.text:0041DBF8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0041DC08                 dd 0C0h, 46000000h, 106h, 0
.text:0041DC18                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041DC18                 dd 107h, 0
.text:0041DC38                 dd 0C0h, 46000000h, 102h, 0
.text:0041DC48                 dd 0C0h, 46000000h, 104h, 0
.text:0041DC58                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0041DC58                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0041DC58                 dd 105h, 0
.text:0041DC88                 dd 0C0h, 46000000h, 13Bh, 0
.text:0041DC98                 dd 0C0h, 46000000h, 139h, 0
.text:0041DCA8                 dd 0C0h, 46000000h, 0Dh, 0
.text:0041DCB8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041DCB8                 dd 101h, 0
.text:0041DCD8                 dd 0C0h, 46000000h, 100h, 0
.text:0041DCE8                 dd 0C0h, 46000000h, 20404h, 0
.text:0041DCF8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041DCF8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0041DD28                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0041DD28                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0041DD28                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0041DD28                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0041DD78                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041DD78                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0041DD78                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0041DD78                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0041DD78                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041DD78                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0041DDF8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0041DDF8                 dd 0Ah, 0
.text:0041DE18                 dd 0C0h, 46000000h, 2, 0
.text:0041DE28                 dd 0C0h, 46000000h, 1Dh, 0
.text:0041DE38                 dd 0C0h, 46000000h, 3, 0
.text:0041DE48                 dd 0C0h, 46000000h, 16h, 0
.text:0041DE58                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0041DE58                 dd 1608D74Fh, 0Fh, 0
.text:0041DE78                 dd 0C0h, 46000000h, 20h, 0
.text:0041DE88                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0041DE88                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0041DE88                 dd 0
.text:0041DEB8                 dd 0C0h, 46000000h, 11Eh, 0
.text:0041DEC8                 dd 0C0h, 46000000h, 128h, 0
.text:0041DED8                 dd 0C0h, 46000000h, 129h, 0
.text:0041DEE8                 dd 0C0h, 46000000h, 118h, 0
.text:0041DEF8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0041DEF8                 dd 70474000h, 11Bh, 0
.text:0041DF18                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0041DF18                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041DF18                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0041DF18                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0041DF18                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0041DF78                 dd 0C0h, 46000000h, 116h, 0
.text:0041DF88                 dd 0C0h, 46000000h, 113h, 0
.text:0041DF98                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0041DF98                 dd 119h, 0
.text:0041DFB8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0041DFB8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0041DFB8                 dd 0
.text:0041DFE8                 dd 0C0h, 46000000h, 11Ch, 0
.text:0041DFF8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0041E008                 dd 0C0h, 46000000h, 11Fh, 0
.text:0041E018                 dd 0C0h, 46000000h, 112h, 0
.text:0041E028                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0041E028                 dd 18E6000h, 120h, 0
.text:0041E048                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0041E048                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0041E048                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0041E088                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0041E088                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0041E0B8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041E0B8                 dd 11Ah, 0
.text:0041E0D8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0041E0D8                 dd 10Ch, 0
.text:0041E0F8                 dd 0C0h, 46000000h
.text:0041E100 dword_41E100    dd 10Bh, 0              ; DATA XREF: sub_418360+75↑o
.text:0041E100                                         ; sub_4192C0+CB↑o
.text:0041E108                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0041E108                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0041E108                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0041E108                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0041E158                 dd 0C0h, 46000000h, 109h, 0
.text:0041E168                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0041E168                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0041E168                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0041E168                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0041E168                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0041E168                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0041E168                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0041E168                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0041E168                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041E168                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0041E168                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0041E248                 dd 0C0h, 46000000h, 138h, 0
.text:0041E258                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0041E258                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0041E258                 dd 27h, 0
.text:0041E288                 dd 0C0h, 46000000h, 8, 0
.text:0041E298                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0041E298                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0041E298                 dd 20D00h, 0
.text:0041E2C8                 dd 0C0h, 46000000h, 20D03h, 0
.text:0041E2D8                 dd 0C0h, 46000000h, 12h, 0
.text:0041E2E8                 dd 0C0h, 46000000h, 4, 0
.text:0041E2F8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041E2F8                 dd 7, 0
.text:0041E318                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041E318                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0041E348                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041E348                 dd 126h, 0
.text:0041E368                 dd 0C0h, 46000000h, 10h, 0
.text:0041E378                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0041E378                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0041E3A8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0041E3A8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0041E3A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0041E3E8                 dd 0C0h, 46000000h, 0Bh, 0
.text:0041E3F8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0041E408                 dd 0C0h, 46000000h, 26h, 0
.text:0041E418                 dd 0C0h, 46000000h, 6, 0
.text:0041E428                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0041E428                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0041E428                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0041E468                 dd 0C0h, 46000000h, 20403h, 0
.text:0041E478                 dd 0C0h, 46000000h, 20401h, 0
.text:0041E488                 dd 0C0h, 46000000h, 20412h, 0
.text:0041E498                 dd 0C0h, 46000000h, 20402h, 0
.text:0041E4A8                 dd 0C0h, 46000000h, 20411h, 0
.text:0041E4B8                 dd 0C0h, 46000000h, 2 dup(0)
.text:0041E4C8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041E4C8                 dd 10Dh, 0
.text:0041E4E8                 dd 0C0h, 46000000h, 127h, 0
.text:0041E4F8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041E4F8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0041E4F8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0041E538                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0041E538                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0041E538                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0041E578                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0041E588                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0041E598                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0041E5A8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0041E5B8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0041E5C8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0041E5D8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0041E5E8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0041E5F8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0041E608                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0041E618                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0041E628                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0041E638                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0041E648                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0041E658                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0041E668                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0041E678                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0041E688                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0041E698                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0041E6A8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0041E6B8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0041E6C8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0041E6D8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0041E6E8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0041E6F8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0041E708                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0041E718                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0041E728                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0041E738                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0041E748                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0041E758                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0041E768                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0041E778                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0041E788                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0041E798                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0041E7A8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0041E7A8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0041E7D0
.text:0041E7D0 ; =============== S U B R O U T I N E =======================================
.text:0041E7D0
.text:0041E7D0 ; Attributes: thunk
.text:0041E7D0
.text:0041E7D0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0041E7D0 mbrtowc         proc near               ; CODE XREF: sub_40C780+757↑p
.text:0041E7D0
.text:0041E7D0 DstCh           = dword ptr  4
.text:0041E7D0 SrcCh           = dword ptr  8
.text:0041E7D0 SizeInBytes     = dword ptr  0Ch
.text:0041E7D0 State           = dword ptr  10h
.text:0041E7D0
.text:0041E7D0                 jmp     ds:__imp_mbrtowc
.text:0041E7D0 mbrtowc         endp
.text:0041E7D0
.text:0041E7D0 ; ---------------------------------------------------------------------------
.text:0041E7D6                 align 10h
.text:0041E7E0
.text:0041E7E0 ; =============== S U B R O U T I N E =======================================
.text:0041E7E0
.text:0041E7E0 ; Attributes: thunk
.text:0041E7E0
.text:0041E7E0 ; wint_t __cdecl btowc(int Ch)
.text:0041E7E0 btowc           proc near               ; CODE XREF: sub_4115E0+1F73↑p
.text:0041E7E0                 jmp     ds:__imp_btowc
.text:0041E7E0 btowc           endp
.text:0041E7E0
.text:0041E7E0 ; ---------------------------------------------------------------------------
.text:0041E7E6                 align 10h
.text:0041E7F0
.text:0041E7F0 ; =============== S U B R O U T I N E =======================================
.text:0041E7F0
.text:0041E7F0 ; Attributes: thunk
.text:0041E7F0
.text:0041E7F0 ; wctype_t __cdecl wctype(const char *name)
.text:0041E7F0 wctype          proc near               ; CODE XREF: sub_4115E0+1F29↑p
.text:0041E7F0
.text:0041E7F0 name            = dword ptr  4
.text:0041E7F0
.text:0041E7F0                 jmp     ds:__imp_wctype
.text:0041E7F0 wctype          endp
.text:0041E7F0
.text:0041E7F0 ; ---------------------------------------------------------------------------
.text:0041E7F6                 align 10h
.text:0041E800
.text:0041E800 ; =============== S U B R O U T I N E =======================================
.text:0041E800
.text:0041E800 ; Attributes: bp-based frame
.text:0041E800
.text:0041E800 sub_41E800      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0041E800                 push    ebp
.text:0041E801                 mov     ecx, offset dword_421000
.text:0041E806                 cmp     ecx, offset dword_421000
.text:0041E80C                 mov     ebp, esp
.text:0041E80E                 jnb     short loc_41E826
.text:0041E810
.text:0041E810 loc_41E810:                             ; CODE XREF: sub_41E800+24↓j
.text:0041E810                 mov     edx, [ecx+4]
.text:0041E813                 mov     eax, [ecx]
.text:0041E815                 add     ecx, 8
.text:0041E818                 add     [edx+400000h], eax
.text:0041E81E                 cmp     ecx, offset dword_421000
.text:0041E824                 jb      short loc_41E810
.text:0041E826
.text:0041E826 loc_41E826:                             ; CODE XREF: sub_41E800+E↑j
.text:0041E826                 pop     ebp
.text:0041E827                 retn
.text:0041E827 sub_41E800      endp
.text:0041E827
.text:0041E827 ; ---------------------------------------------------------------------------
.text:0041E828                 align 10h
.text:0041E830
.text:0041E830 ; =============== S U B R O U T I N E =======================================
.text:0041E830
.text:0041E830 ; Attributes: bp-based frame
.text:0041E830
.text:0041E830 sub_41E830      proc near               ; CODE XREF: sub_401080+16↑p
.text:0041E830                                         ; TopLevelExceptionFilter+D7↑p
.text:0041E830                 push    ebp
.text:0041E831                 mov     ebp, esp
.text:0041E833                 fninit
.text:0041E835                 pop     ebp
.text:0041E836                 retn
.text:0041E836 sub_41E830      endp
.text:0041E836
.text:0041E836 ; ---------------------------------------------------------------------------
.text:0041E837                 align 10h
.text:0041E840
.text:0041E840 ; =============== S U B R O U T I N E =======================================
.text:0041E840
.text:0041E840 ; Attributes: bp-based frame
.text:0041E840
.text:0041E840 ; void __cdecl sub_41E840()
.text:0041E840 sub_41E840      proc near               ; DATA XREF: .text:loc_41E889↓o
.text:0041E840                                         ; sub_41E8D0:loc_41E8FE↓o
.text:0041E840                 push    ebp
.text:0041E841                 mov     ebp, esp
.text:0041E843                 sub     esp, 8
.text:0041E846                 mov     eax, off_420114
.text:0041E84B                 mov     edx, [eax]
.text:0041E84D                 test    edx, edx
.text:0041E84F                 jnz     short loc_41E855
.text:0041E851
.text:0041E851 loc_41E851:                             ; CODE XREF: sub_41E840+2C↓j
.text:0041E851                 mov     esp, ebp
.text:0041E853                 pop     ebp
.text:0041E854                 retn
.text:0041E855 ; ---------------------------------------------------------------------------
.text:0041E855
.text:0041E855 loc_41E855:                             ; CODE XREF: sub_41E840+F↑j
.text:0041E855                                         ; sub_41E840+2A↓j
.text:0041E855                 call    dword ptr [eax]
.text:0041E857                 mov     edx, off_420114
.text:0041E85D                 mov     ecx, [edx+4]
.text:0041E860                 lea     eax, [edx+4]
.text:0041E863                 mov     off_420114, eax
.text:0041E868                 test    ecx, ecx
.text:0041E86A                 jnz     short loc_41E855
.text:0041E86C                 jmp     short loc_41E851
.text:0041E86C sub_41E840      endp
.text:0041E86C
.text:0041E86C ; ---------------------------------------------------------------------------
.text:0041E86E                 align 10h
.text:0041E870                 push    ebp
.text:0041E871                 mov     ebp, esp
.text:0041E873                 sub     esp, 8
.text:0041E876                 mov     [ebp-4], ebx
.text:0041E879                 mov     eax, ds:dword_41F7E0
.text:0041E87E                 cmp     eax, 0FFFFFFFFh
.text:0041E881                 jz      short loc_41E8AC
.text:0041E883
.text:0041E883 loc_41E883:                             ; CODE XREF: .text:0041E8B6↓j
.text:0041E883                                         ; .text:0041E8C9↓j
.text:0041E883                 test    eax, eax
.text:0041E885                 mov     ebx, eax
.text:0041E887                 jnz     short loc_41E8A0
.text:0041E889
.text:0041E889 loc_41E889:                             ; CODE XREF: .text:0041E8AA↓j
.text:0041E889                 mov     dword ptr [esp], offset sub_41E840
.text:0041E890                 call    sub_401040
.text:0041E895                 mov     ebx, [ebp-4]
.text:0041E898                 mov     esp, ebp
.text:0041E89A                 pop     ebp
.text:0041E89B                 retn
.text:0041E89B ; ---------------------------------------------------------------------------
.text:0041E89C                 align 10h
.text:0041E8A0
.text:0041E8A0 loc_41E8A0:                             ; CODE XREF: .text:0041E887↑j
.text:0041E8A0                                         ; .text:0041E8A8↓j
.text:0041E8A0                 call    ds:dword_41F7E0[ebx*4]
.text:0041E8A7                 dec     ebx
.text:0041E8A8                 jnz     short loc_41E8A0
.text:0041E8AA                 jmp     short loc_41E889
.text:0041E8AC ; ---------------------------------------------------------------------------
.text:0041E8AC
.text:0041E8AC loc_41E8AC:                             ; CODE XREF: .text:0041E881↑j
.text:0041E8AC                 mov     ecx, ds:dword_41F7E4
.text:0041E8B2                 xor     eax, eax
.text:0041E8B4                 test    ecx, ecx
.text:0041E8B6                 jz      short loc_41E883
.text:0041E8B8                 mov     edx, offset dword_41F7E0
.text:0041E8BD                 lea     esi, [esi+0]
.text:0041E8C0
.text:0041E8C0 loc_41E8C0:                             ; CODE XREF: .text:0041E8C7↓j
.text:0041E8C0                 inc     eax
.text:0041E8C1                 mov     ecx, [edx+eax*4+4]
.text:0041E8C5                 test    ecx, ecx
.text:0041E8C7                 jnz     short loc_41E8C0
.text:0041E8C9                 jmp     short loc_41E883
.text:0041E8C9 ; ---------------------------------------------------------------------------
.text:0041E8CB                 align 10h
.text:0041E8D0
.text:0041E8D0 ; =============== S U B R O U T I N E =======================================
.text:0041E8D0
.text:0041E8D0 ; Attributes: bp-based frame
.text:0041E8D0
.text:0041E8D0 sub_41E8D0      proc near               ; CODE XREF: sub_401700+1A↑p
.text:0041E8D0
.text:0041E8D0 var_8           = dword ptr -8
.text:0041E8D0 var_4           = dword ptr -4
.text:0041E8D0
.text:0041E8D0                 push    ebp
.text:0041E8D1                 mov     ebp, esp
.text:0041E8D3                 sub     esp, 8
.text:0041E8D6                 mov     [ebp+var_4], ebx
.text:0041E8D9                 mov     edx, dword_420110
.text:0041E8DF                 test    edx, edx
.text:0041E8E1                 jnz     short loc_41E90A
.text:0041E8E3                 mov     eax, ds:dword_41F7E0
.text:0041E8E8                 mov     edx, 1
.text:0041E8ED                 mov     dword_420110, edx
.text:0041E8F3                 cmp     eax, 0FFFFFFFFh
.text:0041E8F6                 jz      short loc_41E91D
.text:0041E8F8
.text:0041E8F8 loc_41E8F8:                             ; CODE XREF: sub_41E8D0+57↓j
.text:0041E8F8                                         ; sub_41E8D0+69↓j
.text:0041E8F8                 test    eax, eax
.text:0041E8FA                 mov     ebx, eax
.text:0041E8FC                 jnz     short loc_41E911
.text:0041E8FE
.text:0041E8FE loc_41E8FE:                             ; CODE XREF: sub_41E8D0+4B↓j
.text:0041E8FE                 mov     [esp+8+var_8], offset sub_41E840 ; void (__cdecl *)()
.text:0041E905                 call    sub_401040
.text:0041E90A
.text:0041E90A loc_41E90A:                             ; CODE XREF: sub_41E8D0+11↑j
.text:0041E90A                 mov     ebx, [ebp+var_4]
.text:0041E90D                 mov     esp, ebp
.text:0041E90F                 pop     ebp
.text:0041E910                 retn
.text:0041E911 ; ---------------------------------------------------------------------------
.text:0041E911
.text:0041E911 loc_41E911:                             ; CODE XREF: sub_41E8D0+2C↑j
.text:0041E911                                         ; sub_41E8D0+49↓j
.text:0041E911                 call    ds:dword_41F7E0[ebx*4]
.text:0041E918                 dec     ebx
.text:0041E919                 jnz     short loc_41E911
.text:0041E91B                 jmp     short loc_41E8FE
.text:0041E91D ; ---------------------------------------------------------------------------
.text:0041E91D
.text:0041E91D loc_41E91D:                             ; CODE XREF: sub_41E8D0+26↑j
.text:0041E91D                 mov     ecx, ds:dword_41F7E4
.text:0041E923                 xor     eax, eax
.text:0041E925                 test    ecx, ecx
.text:0041E927                 jz      short loc_41E8F8
.text:0041E929                 mov     edx, offset dword_41F7E0
.text:0041E92E                 mov     esi, esi
.text:0041E930
.text:0041E930 loc_41E930:                             ; CODE XREF: sub_41E8D0+67↓j
.text:0041E930                 inc     eax
.text:0041E931                 mov     ebx, [edx+eax*4+4]
.text:0041E935                 test    ebx, ebx
.text:0041E937                 jnz     short loc_41E930
.text:0041E939                 jmp     short loc_41E8F8
.text:0041E939 sub_41E8D0      endp
.text:0041E939
.text:0041E939 ; ---------------------------------------------------------------------------
.text:0041E93B                 align 10h
.text:0041E940
.text:0041E940 ; =============== S U B R O U T I N E =======================================
.text:0041E940
.text:0041E940 ; Attributes: info_from_lumina
.text:0041E940
.text:0041E940 ; void *__cdecl _alloca(size_t Size)
.text:0041E940 __alloca        proc near               ; CODE XREF: sub_401700+15↑p
.text:0041E940                                         ; sub_403910+15C1↑p
.text:0041E940                 push    ecx
.text:0041E941                 mov     ecx, esp
.text:0041E943                 add     ecx, 8
.text:0041E946
.text:0041E946 loc_41E946:                             ; CODE XREF: __alloca+1B↓j
.text:0041E946                 cmp     eax, 1000h
.text:0041E94B                 jb      short loc_41E95D
.text:0041E94D                 sub     ecx, 1000h
.text:0041E953                 or      dword ptr [ecx], 0
.text:0041E956                 sub     eax, 1000h
.text:0041E95B                 jmp     short loc_41E946
.text:0041E95D ; ---------------------------------------------------------------------------
.text:0041E95D
.text:0041E95D loc_41E95D:                             ; CODE XREF: __alloca+B↑j
.text:0041E95D                 sub     ecx, eax
.text:0041E95F                 or      dword ptr [ecx], 0
.text:0041E962                 mov     eax, esp
.text:0041E964                 mov     esp, ecx
.text:0041E966                 mov     ecx, [eax]
.text:0041E968                 mov     eax, [eax+4]
.text:0041E96B                 jmp     eax
.text:0041E96B __alloca        endp
.text:0041E96B
.text:0041E96B ; ---------------------------------------------------------------------------
.text:0041E96D                 align 10h
.text:0041E970
.text:0041E970 ; =============== S U B R O U T I N E =======================================
.text:0041E970
.text:0041E970 ; Attributes: bp-based frame
.text:0041E970
.text:0041E970 sub_41E970      proc near               ; CODE XREF: sub_406380+40↑p
.text:0041E970                                         ; sub_4063E0+24↑p ...
.text:0041E970
.text:0041E970 var_34          = dword ptr -34h
.text:0041E970 var_2C          = dword ptr -2Ch
.text:0041E970 var_28          = dword ptr -28h
.text:0041E970 var_24          = dword ptr -24h
.text:0041E970 var_20          = dword ptr -20h
.text:0041E970 var_1C          = dword ptr -1Ch
.text:0041E970 var_18          = dword ptr -18h
.text:0041E970 var_14          = dword ptr -14h
.text:0041E970 arg_0           = dword ptr  8
.text:0041E970 arg_4           = dword ptr  0Ch
.text:0041E970 arg_8           = dword ptr  10h
.text:0041E970 arg_C           = dword ptr  14h
.text:0041E970
.text:0041E970                 push    ebp
.text:0041E971                 mov     ebp, esp
.text:0041E973                 push    edi
.text:0041E974                 push    esi
.text:0041E975                 push    ebx
.text:0041E976                 sub     esp, 2Ch
.text:0041E979                 mov     edx, [ebp+arg_C]
.text:0041E97C                 mov     [ebp+var_20], 0
.text:0041E983                 mov     ecx, [ebp+arg_0]
.text:0041E986                 mov     ebx, [ebp+arg_4]
.text:0041E989                 mov     [ebp+var_1C], 0
.text:0041E990                 mov     eax, [ebp+arg_8]
.text:0041E993                 test    edx, edx
.text:0041E995                 mov     [ebp+var_24], edx
.text:0041E998                 mov     edi, ebx
.text:0041E99A                 mov     esi, eax
.text:0041E99C                 mov     [ebp+var_28], ecx
.text:0041E99F                 jnz     short loc_41EA00
.text:0041E9A1                 cmp     eax, ebx
.text:0041E9A3                 jbe     short loc_41E9E0
.text:0041E9A5                 mov     eax, ecx
.text:0041E9A7                 mov     edx, ebx
.text:0041E9A9                 div     esi
.text:0041E9AB
.text:0041E9AB loc_41E9AB:                             ; CODE XREF: sub_41E970+8B↓j
.text:0041E9AB                 mov     [ebp+var_28], edx
.text:0041E9AE                 lea     ecx, [ebp+var_18]
.text:0041E9B1                 test    ecx, ecx
.text:0041E9B3                 jz      short loc_41E9CE
.text:0041E9B5                 mov     [ebp+var_1C], 0
.text:0041E9BC
.text:0041E9BC loc_41E9BC:                             ; CODE XREF: sub_41E970+DA↓j
.text:0041E9BC                 mov     eax, [ebp+var_28]
.text:0041E9BF                 mov     [ebp+var_20], eax
.text:0041E9C2                 mov     edx, [ebp+var_20]
.text:0041E9C5                 mov     ecx, [ebp+var_1C]
.text:0041E9C8                 mov     [ebp+var_18], edx
.text:0041E9CB                 mov     [ebp+var_14], ecx
.text:0041E9CE
.text:0041E9CE loc_41E9CE:                             ; CODE XREF: sub_41E970+43↑j
.text:0041E9CE                                         ; sub_41E970+A7↓j ...
.text:0041E9CE                 mov     eax, [ebp+var_18]
.text:0041E9D1                 mov     edx, [ebp+var_14]
.text:0041E9D4                 add     esp, 2Ch
.text:0041E9D7                 pop     ebx
.text:0041E9D8                 pop     esi
.text:0041E9D9                 pop     edi
.text:0041E9DA                 pop     ebp
.text:0041E9DB                 retn
.text:0041E9DB ; ---------------------------------------------------------------------------
.text:0041E9DC                 align 10h
.text:0041E9E0
.text:0041E9E0 loc_41E9E0:                             ; CODE XREF: sub_41E970+33↑j
.text:0041E9E0                 test    eax, eax
.text:0041E9E2                 jnz     short loc_41E9EF
.text:0041E9E4                 mov     eax, 1
.text:0041E9E9                 xor     edx, edx
.text:0041E9EB                 div     esi
.text:0041E9ED                 mov     esi, eax
.text:0041E9EF
.text:0041E9EF loc_41E9EF:                             ; CODE XREF: sub_41E970+72↑j
.text:0041E9EF                 mov     eax, edi
.text:0041E9F1                 mov     edx, [ebp+var_24]
.text:0041E9F4                 div     esi
.text:0041E9F6                 mov     eax, [ebp+var_28]
.text:0041E9F9                 div     esi
.text:0041E9FB                 jmp     short loc_41E9AB
.text:0041E9FB ; ---------------------------------------------------------------------------
.text:0041E9FD                 align 10h
.text:0041EA00
.text:0041EA00 loc_41EA00:                             ; CODE XREF: sub_41E970+2F↑j
.text:0041EA00                 cmp     [ebp+var_24], ebx
.text:0041EA03                 jbe     short loc_41EA20
.text:0041EA05                 mov     [ebp+var_20], ecx
.text:0041EA08
.text:0041EA08 loc_41EA08:                             ; CODE XREF: sub_41E970+15B↓j
.text:0041EA08                 mov     [ebp+var_1C], edi
.text:0041EA0B                 mov     eax, [ebp+var_20]
.text:0041EA0E                 mov     edx, [ebp+var_1C]
.text:0041EA11                 mov     [ebp+var_18], eax
.text:0041EA14                 mov     [ebp+var_14], edx
.text:0041EA17                 jmp     short loc_41E9CE
.text:0041EA17 ; ---------------------------------------------------------------------------
.text:0041EA19                 align 10h
.text:0041EA20
.text:0041EA20 loc_41EA20:                             ; CODE XREF: sub_41E970+93↑j
.text:0041EA20                 bsr     eax, [ebp+var_24]
.text:0041EA24                 mov     ebx, eax
.text:0041EA26                 xor     ebx, 1Fh
.text:0041EA29                 jnz     short loc_41EA50
.text:0041EA2B                 cmp     edi, [ebp+var_24]
.text:0041EA2E                 ja      short loc_41EA35
.text:0041EA30                 cmp     [ebp+var_28], esi
.text:0041EA33                 jb      short loc_41EA40
.text:0041EA35
.text:0041EA35 loc_41EA35:                             ; CODE XREF: sub_41E970+BE↑j
.text:0041EA35                 mov     edx, [ebp+var_28]
.text:0041EA38                 sub     edx, esi
.text:0041EA3A                 sbb     edi, [ebp+var_24]
.text:0041EA3D                 mov     [ebp+var_28], edx
.text:0041EA40
.text:0041EA40 loc_41EA40:                             ; CODE XREF: sub_41E970+C3↑j
.text:0041EA40                 lea     ecx, [ebp+var_18]
.text:0041EA43                 test    ecx, ecx
.text:0041EA45                 jz      short loc_41E9CE
.text:0041EA47                 mov     [ebp+var_1C], edi
.text:0041EA4A                 jmp     loc_41E9BC
.text:0041EA4A ; ---------------------------------------------------------------------------
.text:0041EA4F                 align 10h
.text:0041EA50
.text:0041EA50 loc_41EA50:                             ; CODE XREF: sub_41E970+B9↑j
.text:0041EA50                 mov     edx, [ebp+var_24]
.text:0041EA53                 mov     eax, 20h ; ' '
.text:0041EA58                 mov     cl, bl
.text:0041EA5A                 sub     eax, ebx
.text:0041EA5C                 mov     [ebp+var_2C], eax
.text:0041EA5F                 shl     edx, cl
.text:0041EA61                 mov     eax, esi
.text:0041EA63                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041EA67                 shr     eax, cl
.text:0041EA69                 mov     cl, bl
.text:0041EA6B                 shl     esi, cl
.text:0041EA6D                 or      edx, eax
.text:0041EA6F                 mov     eax, [ebp+var_28]
.text:0041EA72                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041EA76                 mov     [ebp+var_24], edx
.text:0041EA79                 mov     edx, edi
.text:0041EA7B                 shr     edx, cl
.text:0041EA7D                 mov     cl, bl
.text:0041EA7F                 shl     edi, cl
.text:0041EA81                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041EA85                 shr     eax, cl
.text:0041EA87                 or      edi, eax
.text:0041EA89                 mov     eax, edi
.text:0041EA8B                 mov     cl, bl
.text:0041EA8D                 div     [ebp+var_24]
.text:0041EA90                 shl     [ebp+var_28], cl
.text:0041EA93                 mov     edi, edx
.text:0041EA95                 mul     esi
.text:0041EA97                 mov     [ebp+var_34], eax
.text:0041EA9A                 cmp     edx, edi
.text:0041EA9C                 ja      short loc_41EAD8
.text:0041EA9E                 cmp     edx, edi
.text:0041EAA0                 jz      short loc_41EAD0
.text:0041EAA2
.text:0041EAA2 loc_41EAA2:                             ; CODE XREF: sub_41E970+166↓j
.text:0041EAA2                                         ; sub_41E970+173↓j
.text:0041EAA2                 lea     eax, [ebp+var_18]
.text:0041EAA5                 test    eax, eax
.text:0041EAA7                 jz      loc_41E9CE
.text:0041EAAD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041EAB1                 mov     eax, [ebp+var_28]
.text:0041EAB4                 sub     eax, [ebp+var_34]
.text:0041EAB7                 sbb     edi, edx
.text:0041EAB9                 mov     [ebp+var_28], eax
.text:0041EABC                 mov     edx, edi
.text:0041EABE                 shl     edx, cl
.text:0041EAC0                 mov     cl, bl
.text:0041EAC2                 shr     eax, cl
.text:0041EAC4                 or      edx, eax
.text:0041EAC6                 mov     [ebp+var_20], edx
.text:0041EAC9                 shr     edi, cl
.text:0041EACB                 jmp     loc_41EA08
.text:0041EAD0 ; ---------------------------------------------------------------------------
.text:0041EAD0
.text:0041EAD0 loc_41EAD0:                             ; CODE XREF: sub_41E970+130↑j
.text:0041EAD0                 mov     eax, [ebp+var_28]
.text:0041EAD3                 cmp     [ebp+var_34], eax
.text:0041EAD6                 jbe     short loc_41EAA2
.text:0041EAD8
.text:0041EAD8 loc_41EAD8:                             ; CODE XREF: sub_41E970+12C↑j
.text:0041EAD8                 mov     ecx, [ebp+var_34]
.text:0041EADB                 sub     ecx, esi
.text:0041EADD                 sbb     edx, [ebp+var_24]
.text:0041EAE0                 mov     [ebp+var_34], ecx
.text:0041EAE3                 jmp     short loc_41EAA2
.text:0041EAE3 sub_41E970      endp
.text:0041EAE3
.text:0041EAE3 ; ---------------------------------------------------------------------------
.text:0041EAE5                 align 10h
.text:0041EAF0
.text:0041EAF0 ; =============== S U B R O U T I N E =======================================
.text:0041EAF0
.text:0041EAF0 ; Attributes: bp-based frame
.text:0041EAF0
.text:0041EAF0 sub_41EAF0      proc near               ; CODE XREF: sub_415C20+17E↑p
.text:0041EAF0                                         ; sub_415C20+1F5↑p ...
.text:0041EAF0
.text:0041EAF0 var_24          = dword ptr -24h
.text:0041EAF0 var_20          = dword ptr -20h
.text:0041EAF0 var_1C          = dword ptr -1Ch
.text:0041EAF0 var_18          = dword ptr -18h
.text:0041EAF0 var_14          = dword ptr -14h
.text:0041EAF0 var_C           = dword ptr -0Ch
.text:0041EAF0 var_8           = dword ptr -8
.text:0041EAF0 var_4           = dword ptr -4
.text:0041EAF0 arg_0           = dword ptr  8
.text:0041EAF0 arg_4           = dword ptr  0Ch
.text:0041EAF0 arg_8           = dword ptr  10h
.text:0041EAF0 arg_C           = dword ptr  14h
.text:0041EAF0
.text:0041EAF0                 push    ebp
.text:0041EAF1                 mov     ebp, esp
.text:0041EAF3                 sub     esp, 28h
.text:0041EAF6                 mov     [ebp+var_C], ebx
.text:0041EAF9                 mov     edx, [ebp+arg_C]
.text:0041EAFC                 mov     ecx, [ebp+arg_0]
.text:0041EAFF                 mov     [ebp+var_8], esi
.text:0041EB02                 mov     eax, [ebp+arg_8]
.text:0041EB05                 test    edx, edx
.text:0041EB07                 mov     [ebp+var_4], edi
.text:0041EB0A                 mov     ebx, [ebp+arg_4]
.text:0041EB0D                 mov     esi, eax
.text:0041EB0F                 mov     [ebp+var_18], 0
.text:0041EB16                 mov     [ebp+var_14], 0
.text:0041EB1D                 mov     [ebp+var_1C], ecx
.text:0041EB20                 jnz     short loc_41EB72
.text:0041EB22                 cmp     eax, ebx
.text:0041EB24                 jbe     short loc_41EB50
.text:0041EB26                 mov     eax, ecx
.text:0041EB28                 mov     edx, ebx
.text:0041EB2A                 div     esi
.text:0041EB2C                 mov     edi, eax
.text:0041EB2E                 mov     esi, esi
.text:0041EB30
.text:0041EB30 loc_41EB30:                             ; CODE XREF: sub_41EAF0+88↓j
.text:0041EB30                                         ; sub_41EAF0+A4↓j ...
.text:0041EB30                 xor     ecx, ecx
.text:0041EB32
.text:0041EB32 loc_41EB32:                             ; CODE XREF: sub_41EAF0+80↓j
.text:0041EB32                 mov     [ebp+var_18], edi
.text:0041EB35                 mov     ebx, [ebp+var_C]
.text:0041EB38                 mov     eax, [ebp+var_18]
.text:0041EB3B                 mov     [ebp+var_14], ecx
.text:0041EB3E                 mov     esi, [ebp+var_8]
.text:0041EB41                 mov     edx, [ebp+var_14]
.text:0041EB44                 mov     edi, [ebp+var_4]
.text:0041EB47                 mov     esp, ebp
.text:0041EB49                 pop     ebp
.text:0041EB4A                 retn
.text:0041EB4A ; ---------------------------------------------------------------------------
.text:0041EB4B                 align 10h
.text:0041EB50
.text:0041EB50 loc_41EB50:                             ; CODE XREF: sub_41EAF0+34↑j
.text:0041EB50                 test    eax, eax
.text:0041EB52                 jnz     short loc_41EB61
.text:0041EB54                 mov     eax, 1
.text:0041EB59                 xor     ecx, ecx
.text:0041EB5B                 xor     edx, edx
.text:0041EB5D                 div     ecx
.text:0041EB5F                 mov     esi, eax
.text:0041EB61
.text:0041EB61 loc_41EB61:                             ; CODE XREF: sub_41EAF0+62↑j
.text:0041EB61                 mov     eax, ebx
.text:0041EB63                 xor     edx, edx
.text:0041EB65                 div     esi
.text:0041EB67                 mov     ecx, eax
.text:0041EB69                 mov     eax, [ebp+var_1C]
.text:0041EB6C                 div     esi
.text:0041EB6E                 mov     edi, eax
.text:0041EB70                 jmp     short loc_41EB32
.text:0041EB72 ; ---------------------------------------------------------------------------
.text:0041EB72
.text:0041EB72 loc_41EB72:                             ; CODE XREF: sub_41EAF0+30↑j
.text:0041EB72                 cmp     edx, ebx
.text:0041EB74                 jbe     short loc_41EB80
.text:0041EB76                 xor     edi, edi
.text:0041EB78                 jmp     short loc_41EB30
.text:0041EB78 ; ---------------------------------------------------------------------------
.text:0041EB7A                 align 10h
.text:0041EB80
.text:0041EB80 loc_41EB80:                             ; CODE XREF: sub_41EAF0+84↑j
.text:0041EB80                 bsr     eax, edx
.text:0041EB83                 xor     eax, 1Fh
.text:0041EB86                 mov     [ebp+var_20], eax
.text:0041EB89                 jnz     short loc_41EBA0
.text:0041EB8B                 cmp     ebx, edx
.text:0041EB8D                 ja      short loc_41EB96
.text:0041EB8F                 xor     edi, edi
.text:0041EB91                 cmp     [ebp+var_1C], esi
.text:0041EB94                 jb      short loc_41EB30
.text:0041EB96
.text:0041EB96 loc_41EB96:                             ; CODE XREF: sub_41EAF0+9D↑j
.text:0041EB96                 mov     edi, 1
.text:0041EB9B                 jmp     short loc_41EB30
.text:0041EB9B ; ---------------------------------------------------------------------------
.text:0041EB9D                 align 10h
.text:0041EBA0
.text:0041EBA0 loc_41EBA0:                             ; CODE XREF: sub_41EAF0+99↑j
.text:0041EBA0                 mov     eax, [ebp+var_20]
.text:0041EBA3                 mov     ecx, 20h ; ' '
.text:0041EBA8                 sub     ecx, eax
.text:0041EBAA                 mov     [ebp+var_24], ecx
.text:0041EBAD                 mov     eax, esi
.text:0041EBAF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041EBB3                 shl     edx, cl
.text:0041EBB5                 mov     edi, edx
.text:0041EBB7                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041EBBB                 mov     edx, ebx
.text:0041EBBD                 shr     eax, cl
.text:0041EBBF                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041EBC3                 or      edi, eax
.text:0041EBC5                 mov     eax, [ebp+var_1C]
.text:0041EBC8                 shl     esi, cl
.text:0041EBCA                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041EBCE                 shr     edx, cl
.text:0041EBD0                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041EBD4                 shl     ebx, cl
.text:0041EBD6                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041EBDA                 shr     eax, cl
.text:0041EBDC                 or      ebx, eax
.text:0041EBDE                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041EBE2                 mov     eax, ebx
.text:0041EBE4                 div     edi
.text:0041EBE6                 mov     ebx, edx
.text:0041EBE8                 mov     edi, eax
.text:0041EBEA                 shl     [ebp+var_1C], cl
.text:0041EBED                 mul     esi
.text:0041EBEF                 cmp     edx, ebx
.text:0041EBF1                 ja      short loc_41EC04
.text:0041EBF3                 cmp     edx, ebx
.text:0041EBF5                 jnz     loc_41EB30
.text:0041EBFB                 cmp     eax, [ebp+var_1C]
.text:0041EBFE                 jbe     loc_41EB30
.text:0041EC04
.text:0041EC04 loc_41EC04:                             ; CODE XREF: sub_41EAF0+101↑j
.text:0041EC04                 dec     edi
.text:0041EC05                 jmp     loc_41EB30
.text:0041EC05 sub_41EAF0      endp
.text:0041EC05
.text:0041EC05 ; ---------------------------------------------------------------------------
.text:0041EC0A                 align 10h
.text:0041EC10
.text:0041EC10 ; =============== S U B R O U T I N E =======================================
.text:0041EC10
.text:0041EC10 ; Attributes: thunk
.text:0041EC10
.text:0041EC10 ; intptr_t execlp(const char *FileName, const char *Arguments, ...)
.text:0041EC10 _execlp         proc near               ; CODE XREF: sub_4025F0+8D↑p
.text:0041EC10
.text:0041EC10 FileName        = dword ptr  4
.text:0041EC10 Arguments       = dword ptr  8
.text:0041EC10
.text:0041EC10                 jmp     ds:__imp__execlp
.text:0041EC10 _execlp         endp
.text:0041EC10
.text:0041EC10 ; ---------------------------------------------------------------------------
.text:0041EC16                 align 10h
.text:0041EC20
.text:0041EC20 ; =============== S U B R O U T I N E =======================================
.text:0041EC20
.text:0041EC20 ; Attributes: thunk
.text:0041EC20
.text:0041EC20 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0041EC20 _chmod          proc near               ; CODE XREF: sub_4023E0+90↑p
.text:0041EC20                                         ; sub_403910+4A5↑p ...
.text:0041EC20
.text:0041EC20 FileName        = dword ptr  4
.text:0041EC20 AccessMode      = dword ptr  8
.text:0041EC20
.text:0041EC20                 jmp     ds:__imp__chmod
.text:0041EC20 _chmod          endp
.text:0041EC20
.text:0041EC20 ; ---------------------------------------------------------------------------
.text:0041EC26                 align 10h
.text:0041EC30
.text:0041EC30 ; =============== S U B R O U T I N E =======================================
.text:0041EC30
.text:0041EC30 ; Attributes: thunk
.text:0041EC30
.text:0041EC30 ; int __cdecl umask(int Mode)
.text:0041EC30 _umask          proc near               ; CODE XREF: sub_401700+141↑p
.text:0041EC30                                         ; sub_406A50+19F↑p ...
.text:0041EC30
.text:0041EC30 Mode            = dword ptr  4
.text:0041EC30
.text:0041EC30                 jmp     ds:__imp__umask
.text:0041EC30 _umask          endp
.text:0041EC30
.text:0041EC30 ; ---------------------------------------------------------------------------
.text:0041EC36                 align 10h
.text:0041EC40
.text:0041EC40 ; =============== S U B R O U T I N E =======================================
.text:0041EC40
.text:0041EC40 ; Attributes: thunk
.text:0041EC40
.text:0041EC40 ; int __cdecl close(int FileHandle)
.text:0041EC40 _close          proc near               ; CODE XREF: sub_4058C0+F4↑p
.text:0041EC40                                         ; sub_4058C0+31C↑p ...
.text:0041EC40
.text:0041EC40 FileHandle      = dword ptr  4
.text:0041EC40
.text:0041EC40                 jmp     ds:__imp__close
.text:0041EC40 _close          endp
.text:0041EC40
.text:0041EC40 ; ---------------------------------------------------------------------------
.text:0041EC46                 align 10h
.text:0041EC50
.text:0041EC50 ; =============== S U B R O U T I N E =======================================
.text:0041EC50
.text:0041EC50 ; Attributes: thunk
.text:0041EC50
.text:0041EC50 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0041EC50 _read           proc near               ; CODE XREF: sub_4058C0+24F↑p
.text:0041EC50
.text:0041EC50 FileHandle      = dword ptr  4
.text:0041EC50 DstBuf          = dword ptr  8
.text:0041EC50 MaxCharCount    = dword ptr  0Ch
.text:0041EC50
.text:0041EC50                 jmp     ds:__imp__read
.text:0041EC50 _read           endp
.text:0041EC50
.text:0041EC50 ; ---------------------------------------------------------------------------
.text:0041EC56                 align 10h
.text:0041EC60
.text:0041EC60 ; =============== S U B R O U T I N E =======================================
.text:0041EC60
.text:0041EC60 ; Attributes: thunk
.text:0041EC60
.text:0041EC60 ; int open(const char *FileName, int OpenFlag, ...)
.text:0041EC60 _open           proc near               ; CODE XREF: sub_4058C0+4A↑p
.text:0041EC60                                         ; sub_4058C0+17A↑p ...
.text:0041EC60
.text:0041EC60 FileName        = dword ptr  4
.text:0041EC60 OpenFlag        = dword ptr  8
.text:0041EC60
.text:0041EC60                 jmp     ds:__imp__open
.text:0041EC60 _open           endp
.text:0041EC60
.text:0041EC60 ; ---------------------------------------------------------------------------
.text:0041EC66                 align 10h
.text:0041EC70
.text:0041EC70 ; =============== S U B R O U T I N E =======================================
.text:0041EC70
.text:0041EC70 ; Attributes: thunk
.text:0041EC70
.text:0041EC70 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:0041EC70 _write          proc near               ; CODE XREF: sub_40DBE0+2B↑p
.text:0041EC70
.text:0041EC70 FileHandle      = dword ptr  4
.text:0041EC70 Buf             = dword ptr  8
.text:0041EC70 MaxCharCount    = dword ptr  0Ch
.text:0041EC70
.text:0041EC70                 jmp     ds:__imp__write
.text:0041EC70 _write          endp
.text:0041EC70
.text:0041EC70 ; ---------------------------------------------------------------------------
.text:0041EC76                 align 10h
.text:0041EC80
.text:0041EC80 ; =============== S U B R O U T I N E =======================================
.text:0041EC80
.text:0041EC80 ; Attributes: thunk
.text:0041EC80
.text:0041EC80 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0041EC80 _stricmp        proc near               ; CODE XREF: sub_4160F0+46F↑p
.text:0041EC80                                         ; sub_4189A0+2E↑p ...
.text:0041EC80
.text:0041EC80 String1         = dword ptr  4
.text:0041EC80 String2         = dword ptr  8
.text:0041EC80
.text:0041EC80                 jmp     ds:__imp__stricmp
.text:0041EC80 _stricmp        endp
.text:0041EC80
.text:0041EC80 ; ---------------------------------------------------------------------------
.text:0041EC86                 align 10h
.text:0041EC90
.text:0041EC90 ; =============== S U B R O U T I N E =======================================
.text:0041EC90
.text:0041EC90 ; Attributes: thunk
.text:0041EC90
.text:0041EC90 ; char *__cdecl strdup(const char *String)
.text:0041EC90 _strdup         proc near               ; CODE XREF: sub_4185D0+101↑p
.text:0041EC90                                         ; .text:0041883A↑p ...
.text:0041EC90
.text:0041EC90 String          = dword ptr  4
.text:0041EC90
.text:0041EC90                 jmp     ds:__imp__strdup
.text:0041EC90 _strdup         endp
.text:0041EC90
.text:0041EC90 ; ---------------------------------------------------------------------------
.text:0041EC96                 align 10h
.text:0041ECA0
.text:0041ECA0 ; =============== S U B R O U T I N E =======================================
.text:0041ECA0
.text:0041ECA0 ; Attributes: thunk
.text:0041ECA0
.text:0041ECA0 ; int __cdecl getpid()
.text:0041ECA0 _getpid         proc near               ; CODE XREF: sub_41CD90+84↑p
.text:0041ECA0                 jmp     ds:__imp__getpid
.text:0041ECA0 _getpid         endp
.text:0041ECA0
.text:0041ECA0 ; ---------------------------------------------------------------------------
.text:0041ECA6                 align 10h
.text:0041ECB0                 jmp     ds:__set_app_type
.text:0041ECB0 ; ---------------------------------------------------------------------------
.text:0041ECB6                 align 10h
.text:0041ECC0
.text:0041ECC0 ; =============== S U B R O U T I N E =======================================
.text:0041ECC0
.text:0041ECC0 ; Attributes: thunk
.text:0041ECC0
.text:0041ECC0 ; void __cdecl cexit()
.text:0041ECC0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0041ECC0                 jmp     ds:__imp__cexit
.text:0041ECC0 _cexit          endp
.text:0041ECC0
.text:0041ECC0 ; ---------------------------------------------------------------------------
.text:0041ECC6                 align 10h
.text:0041ECD0
.text:0041ECD0 ; =============== S U B R O U T I N E =======================================
.text:0041ECD0
.text:0041ECD0 ; Attributes: thunk
.text:0041ECD0
.text:0041ECD0 ; char ***__cdecl _p__environ()
.text:0041ECD0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0041ECD0                 jmp     ds:__imp___p__environ
.text:0041ECD0 __p__environ    endp
.text:0041ECD0
.text:0041ECD0 ; ---------------------------------------------------------------------------
.text:0041ECD6                 align 10h
.text:0041ECE0
.text:0041ECE0 ; =============== S U B R O U T I N E =======================================
.text:0041ECE0
.text:0041ECE0 ; Attributes: thunk
.text:0041ECE0
.text:0041ECE0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0041ECE0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0041ECE0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0041ECE0
.text:0041ECE0 Signal          = dword ptr  4
.text:0041ECE0 Function        = dword ptr  8
.text:0041ECE0
.text:0041ECE0                 jmp     ds:__imp_signal
.text:0041ECE0 signal          endp
.text:0041ECE0
.text:0041ECE0 ; ---------------------------------------------------------------------------
.text:0041ECE6                 align 10h
.text:0041ECF0
.text:0041ECF0 ; =============== S U B R O U T I N E =======================================
.text:0041ECF0
.text:0041ECF0 ; Attributes: thunk
.text:0041ECF0
.text:0041ECF0 ; int *__cdecl _p__fmode()
.text:0041ECF0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0041ECF0                 jmp     ds:__imp___p__fmode
.text:0041ECF0 __p__fmode      endp
.text:0041ECF0
.text:0041ECF0 ; ---------------------------------------------------------------------------
.text:0041ECF6                 align 10h
.text:0041ED00
.text:0041ED00 ; =============== S U B R O U T I N E =======================================
.text:0041ED00
.text:0041ED00 ; Attributes: thunk
.text:0041ED00
.text:0041ED00 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0041ED00 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0041ED00                                         ; sub_401080+90↑p ...
.text:0041ED00
.text:0041ED00 FileHandle      = dword ptr  4
.text:0041ED00 Mode            = dword ptr  8
.text:0041ED00
.text:0041ED00                 jmp     ds:__imp__setmode
.text:0041ED00 _setmode        endp
.text:0041ED00
.text:0041ED00 ; ---------------------------------------------------------------------------
.text:0041ED06                 align 10h
.text:0041ED10
.text:0041ED10 ; =============== S U B R O U T I N E =======================================
.text:0041ED10
.text:0041ED10 ; Attributes: thunk
.text:0041ED10
.text:0041ED10 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0041ED10                 jmp     ds:__imp___getmainargs
.text:0041ED10 __getmainargs   endp
.text:0041ED10
.text:0041ED10 ; ---------------------------------------------------------------------------
.text:0041ED16                 align 10h
.text:0041ED20
.text:0041ED20 ; =============== S U B R O U T I N E =======================================
.text:0041ED20
.text:0041ED20 ; Attributes: thunk
.text:0041ED20
.text:0041ED20 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0041ED20 fputs           proc near               ; CODE XREF: sub_403150+88↑p
.text:0041ED20                                         ; sub_403150+AA↑p ...
.text:0041ED20
.text:0041ED20 Buffer          = dword ptr  4
.text:0041ED20 Stream          = dword ptr  8
.text:0041ED20
.text:0041ED20                 jmp     ds:__imp_fputs
.text:0041ED20 fputs           endp
.text:0041ED20
.text:0041ED20 ; ---------------------------------------------------------------------------
.text:0041ED26                 align 10h
.text:0041ED30
.text:0041ED30 ; =============== S U B R O U T I N E =======================================
.text:0041ED30
.text:0041ED30 ; Attributes: thunk
.text:0041ED30
.text:0041ED30 ; int printf(const char *const Format, ...)
.text:0041ED30 printf          proc near               ; CODE XREF: sub_403150+66↑p
.text:0041ED30                                         ; sub_403150+1B5↑p ...
.text:0041ED30
.text:0041ED30 Format          = dword ptr  4
.text:0041ED30
.text:0041ED30                 jmp     ds:__imp_printf
.text:0041ED30 printf          endp
.text:0041ED30
.text:0041ED30 ; ---------------------------------------------------------------------------
.text:0041ED36                 align 10h
.text:0041ED40
.text:0041ED40 ; =============== S U B R O U T I N E =======================================
.text:0041ED40
.text:0041ED40 ; Attributes: thunk
.text:0041ED40
.text:0041ED40 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0041ED40 fprintf         proc near               ; CODE XREF: sub_403150+33↑p
.text:0041ED40                                         ; sub_403910+17F3↑p ...
.text:0041ED40
.text:0041ED40 Stream          = dword ptr  4
.text:0041ED40 Format          = dword ptr  8
.text:0041ED40
.text:0041ED40                 jmp     ds:__imp_fprintf
.text:0041ED40 fprintf         endp
.text:0041ED40
.text:0041ED40 ; ---------------------------------------------------------------------------
.text:0041ED46                 align 10h
.text:0041ED50
.text:0041ED50 ; =============== S U B R O U T I N E =======================================
.text:0041ED50
.text:0041ED50 ; Attributes: thunk
.text:0041ED50
.text:0041ED50 ; void __cdecl free(void *Block)
.text:0041ED50 free            proc near               ; CODE XREF: sub_402170+86↑p
.text:0041ED50                                         ; sub_4022F0+4A↑p ...
.text:0041ED50
.text:0041ED50 Block           = dword ptr  4
.text:0041ED50
.text:0041ED50                 jmp     ds:__imp_free
.text:0041ED50 free            endp
.text:0041ED50
.text:0041ED50 ; ---------------------------------------------------------------------------
.text:0041ED56                 align 10h
.text:0041ED60
.text:0041ED60 ; =============== S U B R O U T I N E =======================================
.text:0041ED60
.text:0041ED60 ; Attributes: noreturn thunk
.text:0041ED60
.text:0041ED60 ; void __cdecl __noreturn exit(int Code)
.text:0041ED60 exit            proc near               ; CODE XREF: sub_401700:loc_40191E↑p
.text:0041ED60                                         ; sub_403150+3B↑p ...
.text:0041ED60
.text:0041ED60 Code            = dword ptr  4
.text:0041ED60
.text:0041ED60                 jmp     ds:__imp_exit
.text:0041ED60 exit            endp
.text:0041ED60
.text:0041ED60 ; ---------------------------------------------------------------------------
.text:0041ED66                 align 10h
.text:0041ED70
.text:0041ED70 ; =============== S U B R O U T I N E =======================================
.text:0041ED70
.text:0041ED70 ; Attributes: thunk
.text:0041ED70
.text:0041ED70 ; char *__cdecl getenv(const char *VarName)
.text:0041ED70 getenv          proc near               ; CODE XREF: sub_401700+14D↑p
.text:0041ED70                                         ; sub_4085C0+B57↑p ...
.text:0041ED70
.text:0041ED70 VarName         = dword ptr  4
.text:0041ED70
.text:0041ED70                 jmp     ds:__imp_getenv
.text:0041ED70 getenv          endp
.text:0041ED70
.text:0041ED70 ; ---------------------------------------------------------------------------
.text:0041ED76                 align 10h
.text:0041ED80
.text:0041ED80 ; =============== S U B R O U T I N E =======================================
.text:0041ED80
.text:0041ED80 ; Attributes: thunk
.text:0041ED80
.text:0041ED80 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0041ED80 setlocale       proc near               ; CODE XREF: sub_401700+69↑p
.text:0041ED80
.text:0041ED80 Category        = dword ptr  4
.text:0041ED80 Locale          = dword ptr  8
.text:0041ED80
.text:0041ED80                 jmp     ds:__imp_setlocale
.text:0041ED80 setlocale       endp
.text:0041ED80
.text:0041ED80 ; ---------------------------------------------------------------------------
.text:0041ED86                 align 10h
.text:0041ED90
.text:0041ED90 ; =============== S U B R O U T I N E =======================================
.text:0041ED90
.text:0041ED90 ; Attributes: thunk
.text:0041ED90
.text:0041ED90 ; int *__cdecl errno()
.text:0041ED90 _errno          proc near               ; CODE XREF: sub_401700+420↑p
.text:0041ED90                                         ; sub_401700:loc_402084↑p ...
.text:0041ED90                 jmp     ds:__imp__errno
.text:0041ED90 _errno          endp
.text:0041ED90
.text:0041ED90 ; ---------------------------------------------------------------------------
.text:0041ED96                 align 10h
.text:0041EDA0
.text:0041EDA0 ; =============== S U B R O U T I N E =======================================
.text:0041EDA0
.text:0041EDA0 ; Attributes: thunk
.text:0041EDA0
.text:0041EDA0 ; size_t __cdecl strlen(const char *Str)
.text:0041EDA0 strlen          proc near               ; CODE XREF: sub_401700+85C↑p
.text:0041EDA0                                         ; sub_403910+A99↑p ...
.text:0041EDA0
.text:0041EDA0 Str             = dword ptr  4
.text:0041EDA0
.text:0041EDA0                 jmp     ds:__imp_strlen
.text:0041EDA0 strlen          endp
.text:0041EDA0
.text:0041EDA0 ; ---------------------------------------------------------------------------
.text:0041EDA6                 align 10h
.text:0041EDB0
.text:0041EDB0 ; =============== S U B R O U T I N E =======================================
.text:0041EDB0
.text:0041EDB0 ; Attributes: noreturn thunk
.text:0041EDB0
.text:0041EDB0 _assert         proc near               ; CODE XREF: sub_405530:loc_4055DF↑p
.text:0041EDB0                                         ; sub_409A00+553↑p ...
.text:0041EDB0                 jmp     ds:__imp__assert
.text:0041EDB0 _assert         endp
.text:0041EDB0
.text:0041EDB0 ; ---------------------------------------------------------------------------
.text:0041EDB6                 align 10h
.text:0041EDC0
.text:0041EDC0 ; =============== S U B R O U T I N E =======================================
.text:0041EDC0
.text:0041EDC0 ; Attributes: thunk
.text:0041EDC0
.text:0041EDC0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0041EDC0 memcpy          proc near               ; CODE XREF: sub_403910+15D5↑p
.text:0041EDC0                                         ; sub_4093A0+50↑p ...
.text:0041EDC0
.text:0041EDC0 Src             = dword ptr  8
.text:0041EDC0 Size            = dword ptr  0Ch
.text:0041EDC0
.text:0041EDC0                 jmp     ds:__imp_memcpy
.text:0041EDC0 memcpy          endp
.text:0041EDC0
.text:0041EDC0 ; ---------------------------------------------------------------------------
.text:0041EDC6                 align 10h
.text:0041EDD0
.text:0041EDD0 ; =============== S U B R O U T I N E =======================================
.text:0041EDD0
.text:0041EDD0 ; Attributes: thunk
.text:0041EDD0
.text:0041EDD0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0041EDD0 strcmp          proc near               ; CODE XREF: sub_403910+AD4↑p
.text:0041EDD0                                         ; sub_403910+1531↑p ...
.text:0041EDD0
.text:0041EDD0 Str1            = dword ptr  4
.text:0041EDD0 Str2            = dword ptr  8
.text:0041EDD0
.text:0041EDD0                 jmp     ds:__imp_strcmp
.text:0041EDD0 strcmp          endp
.text:0041EDD0
.text:0041EDD0 ; ---------------------------------------------------------------------------
.text:0041EDD6                 align 10h
.text:0041EDE0
.text:0041EDE0 ; =============== S U B R O U T I N E =======================================
.text:0041EDE0
.text:0041EDE0 ; Attributes: thunk
.text:0041EDE0
.text:0041EDE0 ; void *__cdecl malloc(size_t Size)
.text:0041EDE0 malloc          proc near               ; CODE XREF: sub_403910+CA1↑p
.text:0041EDE0                                         ; sub_4058C0+21E↑p ...
.text:0041EDE0
.text:0041EDE0 Size            = dword ptr  4
.text:0041EDE0
.text:0041EDE0                 jmp     ds:__imp_malloc
.text:0041EDE0 malloc          endp
.text:0041EDE0
.text:0041EDE0 ; ---------------------------------------------------------------------------
.text:0041EDE6                 align 10h
.text:0041EDF0
.text:0041EDF0 ; =============== S U B R O U T I N E =======================================
.text:0041EDF0
.text:0041EDF0 ; Attributes: thunk
.text:0041EDF0
.text:0041EDF0 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:0041EDF0 _lseeki64       proc near               ; CODE XREF: sub_4058C0+37D↑p
.text:0041EDF0                                         ; sub_4198C0+41↑p
.text:0041EDF0
.text:0041EDF0 FileHandle      = dword ptr  4
.text:0041EDF0 Offset          = qword ptr  8
.text:0041EDF0 Origin          = dword ptr  10h
.text:0041EDF0
.text:0041EDF0                 jmp     ds:__imp__lseeki64
.text:0041EDF0 _lseeki64       endp
.text:0041EDF0
.text:0041EDF0 ; ---------------------------------------------------------------------------
.text:0041EDF6                 align 10h
.text:0041EE00
.text:0041EE00 ; =============== S U B R O U T I N E =======================================
.text:0041EE00
.text:0041EE00 ; Attributes: thunk
.text:0041EE00
.text:0041EE00 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0041EE00 _flsbuf         proc near               ; CODE XREF: sub_403910+128A↑p
.text:0041EE00                                         ; sub_40A8A0+128↑p ...
.text:0041EE00
.text:0041EE00 File            = dword ptr  8
.text:0041EE00
.text:0041EE00                 jmp     ds:__imp__flsbuf
.text:0041EE00 _flsbuf         endp
.text:0041EE00
.text:0041EE00 ; ---------------------------------------------------------------------------
.text:0041EE06                 align 10h
.text:0041EE10
.text:0041EE10 ; =============== S U B R O U T I N E =======================================
.text:0041EE10
.text:0041EE10 ; Attributes: thunk
.text:0041EE10
.text:0041EE10 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0041EE10 strcpy          proc near               ; CODE XREF: sub_406A50+1C7↑p
.text:0041EE10                                         ; sub_415AA0+73↑p ...
.text:0041EE10
.text:0041EE10 Destination     = dword ptr  4
.text:0041EE10 Source          = dword ptr  8
.text:0041EE10
.text:0041EE10                 jmp     ds:__imp_strcpy
.text:0041EE10 strcpy          endp
.text:0041EE10
.text:0041EE10 ; ---------------------------------------------------------------------------
.text:0041EE16                 align 10h
.text:0041EE20
.text:0041EE20 ; =============== S U B R O U T I N E =======================================
.text:0041EE20
.text:0041EE20 ; Attributes: thunk
.text:0041EE20
.text:0041EE20 ; char *__cdecl strchr(const char *Str, int Val)
.text:0041EE20 strchr          proc near               ; CODE XREF: sub_406A50+24D↑p
.text:0041EE20                                         ; sub_4085C0+469↑p ...
.text:0041EE20
.text:0041EE20 Str             = dword ptr  4
.text:0041EE20 Val             = dword ptr  8
.text:0041EE20
.text:0041EE20                 jmp     ds:__imp_strchr
.text:0041EE20 strchr          endp
.text:0041EE20
.text:0041EE20 ; ---------------------------------------------------------------------------
.text:0041EE26                 align 10h
.text:0041EE30
.text:0041EE30 ; =============== S U B R O U T I N E =======================================
.text:0041EE30
.text:0041EE30 ; Attributes: thunk
.text:0041EE30
.text:0041EE30 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0041EE30 strncmp         proc near               ; CODE XREF: sub_4085C0+23F↑p
.text:0041EE30                                         ; sub_4085C0+699↑p ...
.text:0041EE30
.text:0041EE30 Str1            = dword ptr  4
.text:0041EE30 Str2            = dword ptr  8
.text:0041EE30 MaxCount        = dword ptr  0Ch
.text:0041EE30
.text:0041EE30                 jmp     ds:__imp_strncmp
.text:0041EE30 strncmp         endp
.text:0041EE30
.text:0041EE30 ; ---------------------------------------------------------------------------
.text:0041EE36                 align 10h
.text:0041EE40
.text:0041EE40 ; =============== S U B R O U T I N E =======================================
.text:0041EE40
.text:0041EE40 ; Attributes: thunk
.text:0041EE40
.text:0041EE40 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:0041EE40 strtoul         proc near               ; CODE XREF: sub_409A00+94↑p
.text:0041EE40
.text:0041EE40 String          = dword ptr  4
.text:0041EE40 EndPtr          = dword ptr  8
.text:0041EE40 Radix           = dword ptr  0Ch
.text:0041EE40
.text:0041EE40                 jmp     ds:__imp_strtoul
.text:0041EE40 strtoul         endp
.text:0041EE40
.text:0041EE40 ; ---------------------------------------------------------------------------
.text:0041EE46                 align 10h
.text:0041EE50
.text:0041EE50 ; =============== S U B R O U T I N E =======================================
.text:0041EE50
.text:0041EE50 ; Attributes: thunk
.text:0041EE50
.text:0041EE50 ; int __cdecl isctype(int C, int Type)
.text:0041EE50 _isctype        proc near               ; CODE XREF: sub_409A00+5F↑p
.text:0041EE50                                         ; sub_40AEB0+5F↑p ...
.text:0041EE50
.text:0041EE50 C               = dword ptr  4
.text:0041EE50 Type            = dword ptr  8
.text:0041EE50
.text:0041EE50                 jmp     ds:__imp__isctype
.text:0041EE50 _isctype        endp
.text:0041EE50
.text:0041EE50 ; ---------------------------------------------------------------------------
.text:0041EE56                 align 10h
.text:0041EE60
.text:0041EE60 ; =============== S U B R O U T I N E =======================================
.text:0041EE60
.text:0041EE60 ; Attributes: noreturn thunk
.text:0041EE60
.text:0041EE60 ; void __cdecl __noreturn abort()
.text:0041EE60 abort           proc near               ; CODE XREF: sub_40A2A0+32↑p
.text:0041EE60                                         ; sub_40A8A0:loc_40A93C↑p ...
.text:0041EE60                 jmp     ds:__imp_abort
.text:0041EE60 abort           endp
.text:0041EE60
.text:0041EE60 ; ---------------------------------------------------------------------------
.text:0041EE66                 align 10h
.text:0041EE70
.text:0041EE70 ; =============== S U B R O U T I N E =======================================
.text:0041EE70
.text:0041EE70 ; Attributes: thunk
.text:0041EE70
.text:0041EE70 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0041EE70 memset          proc near               ; CODE XREF: .text:0040A446↑p
.text:0041EE70                                         ; sub_4115E0+330A↑p ...
.text:0041EE70
.text:0041EE70 Val             = dword ptr  8
.text:0041EE70 Size            = dword ptr  0Ch
.text:0041EE70
.text:0041EE70                 jmp     ds:__imp_memset
.text:0041EE70 memset          endp
.text:0041EE70
.text:0041EE70 ; ---------------------------------------------------------------------------
.text:0041EE76                 align 10h
.text:0041EE80
.text:0041EE80 ; =============== S U B R O U T I N E =======================================
.text:0041EE80
.text:0041EE80 ; Attributes: thunk
.text:0041EE80
.text:0041EE80 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0041EE80 calloc          proc near               ; CODE XREF: .text:0040A483↑p
.text:0041EE80                                         ; sub_40AFB0+1D0↑p ...
.text:0041EE80
.text:0041EE80 Count           = dword ptr  4
.text:0041EE80 Size            = dword ptr  8
.text:0041EE80
.text:0041EE80                 jmp     ds:__imp_calloc
.text:0041EE80 calloc          endp
.text:0041EE80
.text:0041EE80 ; ---------------------------------------------------------------------------
.text:0041EE86                 align 10h
.text:0041EE90
.text:0041EE90 ; =============== S U B R O U T I N E =======================================
.text:0041EE90
.text:0041EE90 ; Attributes: thunk
.text:0041EE90
.text:0041EE90 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0041EE90 realloc         proc near               ; CODE XREF: sub_40A350+30↑p
.text:0041EE90                                         ; sub_40A3B0+16↑p ...
.text:0041EE90
.text:0041EE90 Block           = dword ptr  4
.text:0041EE90 Size            = dword ptr  8
.text:0041EE90
.text:0041EE90                 jmp     ds:__imp_realloc
.text:0041EE90 realloc         endp
.text:0041EE90
.text:0041EE90 ; ---------------------------------------------------------------------------
.text:0041EE96                 align 10h
.text:0041EEA0
.text:0041EEA0 ; =============== S U B R O U T I N E =======================================
.text:0041EEA0
.text:0041EEA0 ; Attributes: thunk
.text:0041EEA0
.text:0041EEA0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0041EEA0 vfprintf        proc near               ; CODE XREF: sub_40A8A0+C1↑p
.text:0041EEA0                                         ; sub_415220+49↑p ...
.text:0041EEA0
.text:0041EEA0 Stream          = dword ptr  4
.text:0041EEA0 Format          = dword ptr  8
.text:0041EEA0 ArgList         = dword ptr  0Ch
.text:0041EEA0
.text:0041EEA0                 jmp     ds:__imp_vfprintf
.text:0041EEA0 vfprintf        endp
.text:0041EEA0
.text:0041EEA0 ; ---------------------------------------------------------------------------
.text:0041EEA6                 align 10h
.text:0041EEB0
.text:0041EEB0 ; =============== S U B R O U T I N E =======================================
.text:0041EEB0
.text:0041EEB0 ; Attributes: thunk
.text:0041EEB0
.text:0041EEB0 ; int __cdecl fclose(FILE *Stream)
.text:0041EEB0 fclose          proc near               ; CODE XREF: sub_40AC20+27↑p
.text:0041EEB0                                         ; .text:0041BAFE↑p
.text:0041EEB0
.text:0041EEB0 Stream          = dword ptr  4
.text:0041EEB0
.text:0041EEB0                 jmp     ds:__imp_fclose
.text:0041EEB0 fclose          endp
.text:0041EEB0
.text:0041EEB0 ; ---------------------------------------------------------------------------
.text:0041EEB6                 align 10h
.text:0041EEC0
.text:0041EEC0 ; =============== S U B R O U T I N E =======================================
.text:0041EEC0
.text:0041EEC0 ; Attributes: thunk
.text:0041EEC0
.text:0041EEC0 ; int __cdecl filbuf(FILE *File)
.text:0041EEC0 _filbuf         proc near               ; CODE XREF: sub_40AEB0+B9↑p
.text:0041EEC0
.text:0041EEC0 File            = dword ptr  4
.text:0041EEC0
.text:0041EEC0                 jmp     ds:__imp__filbuf
.text:0041EEC0 _filbuf         endp
.text:0041EEC0
.text:0041EEC0 ; ---------------------------------------------------------------------------
.text:0041EEC6                 align 10h
.text:0041EED0
.text:0041EED0 ; =============== S U B R O U T I N E =======================================
.text:0041EED0
.text:0041EED0 ; Attributes: thunk
.text:0041EED0
.text:0041EED0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0041EED0 iswctype        proc near               ; CODE XREF: sub_40C780+78B↑p
.text:0041EED0                                         ; sub_4115E0+1F86↑p
.text:0041EED0
.text:0041EED0 C               = word ptr  4
.text:0041EED0 Type            = word ptr  8
.text:0041EED0
.text:0041EED0                 jmp     ds:__imp_iswctype
.text:0041EED0 iswctype        endp
.text:0041EED0
.text:0041EED0 ; ---------------------------------------------------------------------------
.text:0041EED6                 align 10h
.text:0041EEE0
.text:0041EEE0 ; =============== S U B R O U T I N E =======================================
.text:0041EEE0
.text:0041EEE0 ; Attributes: thunk
.text:0041EEE0
.text:0041EEE0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0041EEE0 strspn          proc near               ; CODE XREF: sub_40DCE0+8B↑p
.text:0041EEE0                                         ; .text:0041AF8A↑p ...
.text:0041EEE0
.text:0041EEE0 Str             = dword ptr  4
.text:0041EEE0 Control         = dword ptr  8
.text:0041EEE0
.text:0041EEE0                 jmp     ds:__imp_strspn
.text:0041EEE0 strspn          endp
.text:0041EEE0
.text:0041EEE0 ; ---------------------------------------------------------------------------
.text:0041EEE6                 align 10h
.text:0041EEF0
.text:0041EEF0 ; =============== S U B R O U T I N E =======================================
.text:0041EEF0
.text:0041EEF0 ; Attributes: thunk
.text:0041EEF0
.text:0041EEF0 ; size_t __cdecl strcspn(const char *Str, const char *Control)
.text:0041EEF0 strcspn         proc near               ; CODE XREF: sub_40DCE0+D6↑p
.text:0041EEF0                                         ; sub_40DCE0+51F↑p
.text:0041EEF0
.text:0041EEF0 Str             = dword ptr  4
.text:0041EEF0 Control         = dword ptr  8
.text:0041EEF0
.text:0041EEF0                 jmp     ds:__imp_strcspn
.text:0041EEF0 strcspn         endp
.text:0041EEF0
.text:0041EEF0 ; ---------------------------------------------------------------------------
.text:0041EEF6                 align 10h
.text:0041EF00
.text:0041EF00 ; =============== S U B R O U T I N E =======================================
.text:0041EF00
.text:0041EF00 ; Attributes: thunk
.text:0041EF00
.text:0041EF00 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:0041EF00 memchr          proc near               ; CODE XREF: sub_40DCE0+BE↑p
.text:0041EF00
.text:0041EF00 Buf             = dword ptr  4
.text:0041EF00 Val             = dword ptr  8
.text:0041EF00 MaxCount        = dword ptr  0Ch
.text:0041EF00
.text:0041EF00                 jmp     ds:__imp_memchr
.text:0041EF00 memchr          endp
.text:0041EF00
.text:0041EF00 ; ---------------------------------------------------------------------------
.text:0041EF06                 align 10h
.text:0041EF10
.text:0041EF10 ; =============== S U B R O U T I N E =======================================
.text:0041EF10
.text:0041EF10 ; Attributes: thunk
.text:0041EF10
.text:0041EF10 ; int __cdecl tolower(int C)
.text:0041EF10 tolower         proc near               ; CODE XREF: sub_411010+158↑p
.text:0041EF10
.text:0041EF10 C               = dword ptr  4
.text:0041EF10
.text:0041EF10                 jmp     ds:__imp_tolower
.text:0041EF10 tolower         endp
.text:0041EF10
.text:0041EF10 ; ---------------------------------------------------------------------------
.text:0041EF16                 align 10h
.text:0041EF20
.text:0041EF20 ; =============== S U B R O U T I N E =======================================
.text:0041EF20
.text:0041EF20 ; Attributes: thunk
.text:0041EF20
.text:0041EF20 ; int __cdecl fflush(FILE *Stream)
.text:0041EF20 fflush          proc near               ; CODE XREF: sub_415220+19↑p
.text:0041EF20                                         ; sub_415220+81↑p ...
.text:0041EF20
.text:0041EF20 Stream          = dword ptr  4
.text:0041EF20
.text:0041EF20                 jmp     ds:__imp_fflush
.text:0041EF20 fflush          endp
.text:0041EF20
.text:0041EF20 ; ---------------------------------------------------------------------------
.text:0041EF26                 align 10h
.text:0041EF30
.text:0041EF30 ; =============== S U B R O U T I N E =======================================
.text:0041EF30
.text:0041EF30 ; Attributes: thunk
.text:0041EF30
.text:0041EF30 ; char *__cdecl strerror(int ErrorMessage)
.text:0041EF30 strerror        proc near               ; CODE XREF: sub_415220+A5↑p
.text:0041EF30                                         ; sub_415324+10F↑p
.text:0041EF30
.text:0041EF30 ErrorMessage    = dword ptr  4
.text:0041EF30
.text:0041EF30                 jmp     ds:__imp_strerror
.text:0041EF30 strerror        endp
.text:0041EF30
.text:0041EF30 ; ---------------------------------------------------------------------------
.text:0041EF36                 align 10h
.text:0041EF40
.text:0041EF40 ; =============== S U B R O U T I N E =======================================
.text:0041EF40
.text:0041EF40 ; Attributes: thunk
.text:0041EF40
.text:0041EF40 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0041EF40 ctime           proc near               ; CODE XREF: .text:0041579D↑p
.text:0041EF40                                         ; .text:004157BF↑p ...
.text:0041EF40
.text:0041EF40 Time            = dword ptr  4
.text:0041EF40
.text:0041EF40                 jmp     ds:__imp_ctime
.text:0041EF40 ctime           endp
.text:0041EF40
.text:0041EF40 ; ---------------------------------------------------------------------------
.text:0041EF46                 align 10h
.text:0041EF50
.text:0041EF50 ; =============== S U B R O U T I N E =======================================
.text:0041EF50
.text:0041EF50 ; Attributes: thunk
.text:0041EF50
.text:0041EF50 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0041EF50 _get_osfhandle  proc near               ; CODE XREF: sub_415840+3A↑p
.text:0041EF50                                         ; sub_4198C0+22↑p ...
.text:0041EF50
.text:0041EF50 FileHandle      = dword ptr  4
.text:0041EF50
.text:0041EF50                 jmp     ds:__imp__get_osfhandle
.text:0041EF50 _get_osfhandle  endp
.text:0041EF50
.text:0041EF50 ; ---------------------------------------------------------------------------
.text:0041EF56                 align 10h
.text:0041EF60
.text:0041EF60 ; =============== S U B R O U T I N E =======================================
.text:0041EF60
.text:0041EF60 ; Attributes: thunk
.text:0041EF60
.text:0041EF60 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0041EF60 strcat          proc near               ; CODE XREF: sub_415AA0+98↑p
.text:0041EF60                                         ; sub_417820+4D↑p ...
.text:0041EF60
.text:0041EF60 Destination     = dword ptr  4
.text:0041EF60 Source          = dword ptr  8
.text:0041EF60
.text:0041EF60                 jmp     ds:__imp_strcat
.text:0041EF60 strcat          endp
.text:0041EF60
.text:0041EF60 ; ---------------------------------------------------------------------------
.text:0041EF66                 align 10h
.text:0041EF70
.text:0041EF70 ; =============== S U B R O U T I N E =======================================
.text:0041EF70
.text:0041EF70 ; Attributes: thunk
.text:0041EF70
.text:0041EF70 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0041EF70 strstr          proc near               ; CODE XREF: sub_4160F0+3BF↑p
.text:0041EF70                                         ; sub_4160F0+3DC↑p ...
.text:0041EF70
.text:0041EF70 Str             = dword ptr  4
.text:0041EF70 SubStr          = dword ptr  8
.text:0041EF70
.text:0041EF70                 jmp     ds:__imp_strstr
.text:0041EF70 strstr          endp
.text:0041EF70
.text:0041EF70 ; ---------------------------------------------------------------------------
.text:0041EF76                 align 10h
.text:0041EF80
.text:0041EF80 ; =============== S U B R O U T I N E =======================================
.text:0041EF80
.text:0041EF80 ; Attributes: thunk
.text:0041EF80
.text:0041EF80 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0041EF80 strrchr         proc near               ; CODE XREF: sub_4160F0+CB↑p
.text:0041EF80                                         ; sub_4160F0+3A7↑p ...
.text:0041EF80
.text:0041EF80 Str             = dword ptr  4
.text:0041EF80
.text:0041EF80                 jmp     ds:__imp_strrchr
.text:0041EF80 strrchr         endp
.text:0041EF80
.text:0041EF80 ; ---------------------------------------------------------------------------
.text:0041EF86                 align 10h
.text:0041EF90
.text:0041EF90 ; =============== S U B R O U T I N E =======================================
.text:0041EF90
.text:0041EF90 ; Attributes: thunk
.text:0041EF90
.text:0041EF90 ; size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)
.text:0041EF90 mbstowcs        proc near               ; CODE XREF: sub_417420+90↑p
.text:0041EF90
.text:0041EF90 Dest            = dword ptr  4
.text:0041EF90 Source          = dword ptr  8
.text:0041EF90 MaxCount        = dword ptr  0Ch
.text:0041EF90
.text:0041EF90                 jmp     ds:__imp_mbstowcs
.text:0041EF90 mbstowcs        endp
.text:0041EF90
.text:0041EF90 ; ---------------------------------------------------------------------------
.text:0041EF96                 align 10h
.text:0041EFA0
.text:0041EFA0 ; =============== S U B R O U T I N E =======================================
.text:0041EFA0
.text:0041EFA0 ; Attributes: thunk
.text:0041EFA0
.text:0041EFA0 ; int __cdecl open_osfhandle(intptr_t OSFileHandle, int Flags)
.text:0041EFA0 _open_osfhandle proc near               ; CODE XREF: sub_417820+A1↑p
.text:0041EFA0
.text:0041EFA0 OSFileHandle    = dword ptr  4
.text:0041EFA0 Flags           = dword ptr  8
.text:0041EFA0
.text:0041EFA0                 jmp     ds:__imp__open_osfhandle
.text:0041EFA0 _open_osfhandle endp
.text:0041EFA0
.text:0041EFA0 ; ---------------------------------------------------------------------------
.text:0041EFA6                 align 10h
.text:0041EFB0
.text:0041EFB0 ; =============== S U B R O U T I N E =======================================
.text:0041EFB0
.text:0041EFB0 ; Attributes: thunk
.text:0041EFB0
.text:0041EFB0 ; int __cdecl isalpha(int C)
.text:0041EFB0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0041EFB0
.text:0041EFB0 C               = dword ptr  4
.text:0041EFB0
.text:0041EFB0                 jmp     ds:__imp_isalpha
.text:0041EFB0 isalpha         endp
.text:0041EFB0
.text:0041EFB0 ; ---------------------------------------------------------------------------
.text:0041EFB6                 align 10h
.text:0041EFC0
.text:0041EFC0 ; =============== S U B R O U T I N E =======================================
.text:0041EFC0
.text:0041EFC0 ; Attributes: thunk
.text:0041EFC0
.text:0041EFC0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0041EFC0 _stricmp_0      proc near               ; CODE XREF: .text:00417FF4↑p
.text:0041EFC0
.text:0041EFC0 String1         = dword ptr  4
.text:0041EFC0 String2         = dword ptr  8
.text:0041EFC0
.text:0041EFC0                 jmp     ds:__imp__stricmp_0
.text:0041EFC0 _stricmp_0      endp
.text:0041EFC0
.text:0041EFC0 ; ---------------------------------------------------------------------------
.text:0041EFC6                 align 10h
.text:0041EFD0
.text:0041EFD0 ; =============== S U B R O U T I N E =======================================
.text:0041EFD0
.text:0041EFD0 ; Attributes: thunk
.text:0041EFD0
.text:0041EFD0 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:0041EFD0 strncat         proc near               ; CODE XREF: sub_418180+75↑p
.text:0041EFD0
.text:0041EFD0 Destination     = dword ptr  4
.text:0041EFD0 Source          = dword ptr  8
.text:0041EFD0 Count           = dword ptr  0Ch
.text:0041EFD0
.text:0041EFD0                 jmp     ds:__imp_strncat
.text:0041EFD0 strncat         endp
.text:0041EFD0
.text:0041EFD0 ; ---------------------------------------------------------------------------
.text:0041EFD6                 align 10h
.text:0041EFE0
.text:0041EFE0 ; =============== S U B R O U T I N E =======================================
.text:0041EFE0
.text:0041EFE0 ; Attributes: thunk
.text:0041EFE0
.text:0041EFE0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0041EFE0 strncpy         proc near               ; CODE XREF: sub_418180+61↑p
.text:0041EFE0                                         ; sub_418180+118↑p ...
.text:0041EFE0
.text:0041EFE0 Destination     = dword ptr  4
.text:0041EFE0 Source          = dword ptr  8
.text:0041EFE0 Count           = dword ptr  0Ch
.text:0041EFE0
.text:0041EFE0                 jmp     ds:__imp_strncpy
.text:0041EFE0 strncpy         endp
.text:0041EFE0
.text:0041EFE0 ; ---------------------------------------------------------------------------
.text:0041EFE6                 align 10h
.text:0041EFF0
.text:0041EFF0 ; =============== S U B R O U T I N E =======================================
.text:0041EFF0
.text:0041EFF0 ; Attributes: thunk
.text:0041EFF0
.text:0041EFF0 ; int __cdecl toupper(int C)
.text:0041EFF0 toupper         proc near               ; CODE XREF: sub_4185D0+10E↑p
.text:0041EFF0
.text:0041EFF0 C               = dword ptr  4
.text:0041EFF0
.text:0041EFF0                 jmp     ds:__imp_toupper
.text:0041EFF0 toupper         endp
.text:0041EFF0
.text:0041EFF0 ; ---------------------------------------------------------------------------
.text:0041EFF6                 align 10h
.text:0041F000
.text:0041F000 ; =============== S U B R O U T I N E =======================================
.text:0041F000
.text:0041F000 ; Attributes: thunk
.text:0041F000
.text:0041F000 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:0041F000 _chmod_0        proc near               ; CODE XREF: sub_4195A0+9B↑p
.text:0041F000
.text:0041F000 FileName        = dword ptr  4
.text:0041F000 AccessMode      = dword ptr  8
.text:0041F000
.text:0041F000                 jmp     ds:__imp__chmod_0
.text:0041F000 _chmod_0        endp
.text:0041F000
.text:0041F000 ; ---------------------------------------------------------------------------
.text:0041F006                 align 10h
.text:0041F010
.text:0041F010 ; =============== S U B R O U T I N E =======================================
.text:0041F010
.text:0041F010 ; Attributes: thunk
.text:0041F010
.text:0041F010 ; char *__cdecl getcwd(char *DstBuf, int SizeInBytes)
.text:0041F010 _getcwd         proc near               ; CODE XREF: j__getcwd↑j
.text:0041F010
.text:0041F010 DstBuf          = dword ptr  4
.text:0041F010 SizeInBytes     = dword ptr  8
.text:0041F010
.text:0041F010                 jmp     ds:__imp__getcwd
.text:0041F010 _getcwd         endp
.text:0041F010
.text:0041F010 ; ---------------------------------------------------------------------------
.text:0041F016                 align 10h
.text:0041F020
.text:0041F020 ; =============== S U B R O U T I N E =======================================
.text:0041F020
.text:0041F020 ; Attributes: thunk
.text:0041F020
.text:0041F020 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0041F020 sprintf         proc near               ; CODE XREF: .text:0041A5BA↑p
.text:0041F020                                         ; .text:0041A5DB↑p ...
.text:0041F020
.text:0041F020 Buffer          = dword ptr  4
.text:0041F020 Format          = dword ptr  8
.text:0041F020
.text:0041F020                 jmp     ds:__imp_sprintf
.text:0041F020 sprintf         endp
.text:0041F020
.text:0041F020 ; ---------------------------------------------------------------------------
.text:0041F026                 align 10h
.text:0041F030
.text:0041F030 ; =============== S U B R O U T I N E =======================================
.text:0041F030
.text:0041F030 ; Attributes: thunk
.text:0041F030
.text:0041F030 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0041F030 sscanf          proc near               ; CODE XREF: .text:0041B13E↑p
.text:0041F030
.text:0041F030 Buffer          = dword ptr  4
.text:0041F030 Format          = dword ptr  8
.text:0041F030
.text:0041F030                 jmp     ds:__imp_sscanf
.text:0041F030 sscanf          endp
.text:0041F030
.text:0041F030 ; ---------------------------------------------------------------------------
.text:0041F036                 align 10h
.text:0041F040
.text:0041F040 ; =============== S U B R O U T I N E =======================================
.text:0041F040
.text:0041F040 ; Attributes: thunk
.text:0041F040
.text:0041F040 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0041F040 fopen           proc near               ; CODE XREF: sub_41BA3F+26↑p
.text:0041F040                                         ; sub_41BA3F+99↑p
.text:0041F040
.text:0041F040 FileName        = dword ptr  4
.text:0041F040 Mode            = dword ptr  8
.text:0041F040
.text:0041F040                 jmp     ds:__imp_fopen
.text:0041F040 fopen           endp
.text:0041F040
.text:0041F040 ; ---------------------------------------------------------------------------
.text:0041F046                 align 10h
.text:0041F050
.text:0041F050 ; =============== S U B R O U T I N E =======================================
.text:0041F050
.text:0041F050 ; Attributes: thunk
.text:0041F050
.text:0041F050 ; intptr_t __cdecl cwait(int *TermStat, intptr_t ProcHandle, int Action)
.text:0041F050 _cwait          proc near               ; CODE XREF: sub_41C250+18↑j
.text:0041F050
.text:0041F050 TermStat        = dword ptr  4
.text:0041F050 ProcHandle      = dword ptr  8
.text:0041F050 Action          = dword ptr  0Ch
.text:0041F050
.text:0041F050                 jmp     ds:__imp__cwait
.text:0041F050 _cwait          endp
.text:0041F050
.text:0041F050 ; ---------------------------------------------------------------------------
.text:0041F056                 align 10h
.text:0041F060
.text:0041F060 ; =============== S U B R O U T I N E =======================================
.text:0041F060
.text:0041F060 ; Attributes: thunk
.text:0041F060
.text:0041F060 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0041F060 _filelengthi64  proc near               ; CODE XREF: sub_41C7F0+1F↑p
.text:0041F060
.text:0041F060 FileHandle      = dword ptr  4
.text:0041F060
.text:0041F060                 jmp     ds:__imp__filelengthi64
.text:0041F060 _filelengthi64  endp
.text:0041F060
.text:0041F060 ; ---------------------------------------------------------------------------
.text:0041F066                 align 10h
.text:0041F070
.text:0041F070 ; =============== S U B R O U T I N E =======================================
.text:0041F070
.text:0041F070 ; Attributes: thunk
.text:0041F070
.text:0041F070 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0041F070 strpbrk         proc near               ; CODE XREF: sub_41C850+87↑p
.text:0041F070
.text:0041F070 Str             = dword ptr  4
.text:0041F070 Control         = dword ptr  8
.text:0041F070
.text:0041F070                 jmp     ds:__imp_strpbrk
.text:0041F070 strpbrk         endp
.text:0041F070
.text:0041F070 ; ---------------------------------------------------------------------------
.text:0041F076                 align 10h
.text:0041F080
.text:0041F080 ; =============== S U B R O U T I N E =======================================
.text:0041F080
.text:0041F080 ; Attributes: thunk
.text:0041F080
.text:0041F080 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0041F080 _fdopen         proc near               ; CODE XREF: sub_41C8F0+69↑p
.text:0041F080
.text:0041F080 FileHandle      = dword ptr  4
.text:0041F080 Format          = dword ptr  8
.text:0041F080
.text:0041F080                 jmp     ds:__imp__fdopen
.text:0041F080 _fdopen         endp
.text:0041F080
.text:0041F080 ; ---------------------------------------------------------------------------
.text:0041F086                 align 10h
.text:0041F090
.text:0041F090 ; =============== S U B R O U T I N E =======================================
.text:0041F090
.text:0041F090 ; Attributes: thunk
.text:0041F090
.text:0041F090 ; int __cdecl close_0(int FileHandle)
.text:0041F090 _close_0        proc near               ; CODE XREF: sub_41C8F0+90↑p
.text:0041F090
.text:0041F090 FileHandle      = dword ptr  4
.text:0041F090
.text:0041F090                 jmp     ds:__imp__close_0
.text:0041F090 _close_0        endp
.text:0041F090
.text:0041F090 ; ---------------------------------------------------------------------------
.text:0041F096                 align 10h
.text:0041F0A0
.text:0041F0A0 ; =============== S U B R O U T I N E =======================================
.text:0041F0A0
.text:0041F0A0 ; Attributes: thunk
.text:0041F0A0
.text:0041F0A0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:0041F0A0 _open_0         proc near               ; CODE XREF: sub_41CD90:loc_41D120↑p
.text:0041F0A0
.text:0041F0A0 FileName        = dword ptr  4
.text:0041F0A0 OpenFlag        = dword ptr  8
.text:0041F0A0
.text:0041F0A0                 jmp     ds:__imp__open_0
.text:0041F0A0 _open_0         endp
.text:0041F0A0
.text:0041F0A0 ; ---------------------------------------------------------------------------
.text:0041F0A6                 align 10h
.text:0041F0B0
.text:0041F0B0 ; =============== S U B R O U T I N E =======================================
.text:0041F0B0
.text:0041F0B0 ; Attributes: thunk
.text:0041F0B0
.text:0041F0B0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0041F0B0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0041F0B0
.text:0041F0B0 lpTopLevelExceptionFilter= dword ptr  4
.text:0041F0B0
.text:0041F0B0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0041F0B0 SetUnhandledExceptionFilter endp
.text:0041F0B0
.text:0041F0B0 ; ---------------------------------------------------------------------------
.text:0041F0B6                 align 10h
.text:0041F0C0
.text:0041F0C0 ; =============== S U B R O U T I N E =======================================
.text:0041F0C0
.text:0041F0C0 ; Attributes: noreturn thunk
.text:0041F0C0
.text:0041F0C0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0041F0C0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0041F0C0
.text:0041F0C0 uExitCode       = dword ptr  4
.text:0041F0C0
.text:0041F0C0                 jmp     ds:__imp_ExitProcess
.text:0041F0C0 ExitProcess     endp
.text:0041F0C0
.text:0041F0C0 ; ---------------------------------------------------------------------------
.text:0041F0C6                 align 10h
.text:0041F0D0
.text:0041F0D0 ; =============== S U B R O U T I N E =======================================
.text:0041F0D0
.text:0041F0D0 ; Attributes: thunk
.text:0041F0D0
.text:0041F0D0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0041F0D0 GetModuleHandleA proc near              ; CODE XREF: sub_415930+18↑p
.text:0041F0D0                                         ; sub_4160F0+329↑p ...
.text:0041F0D0
.text:0041F0D0 lpModuleName    = dword ptr  4
.text:0041F0D0
.text:0041F0D0                 jmp     ds:__imp_GetModuleHandleA
.text:0041F0D0 GetModuleHandleA endp
.text:0041F0D0
.text:0041F0D0 ; ---------------------------------------------------------------------------
.text:0041F0D6                 align 10h
.text:0041F0E0
.text:0041F0E0 ; =============== S U B R O U T I N E =======================================
.text:0041F0E0
.text:0041F0E0 ; Attributes: thunk
.text:0041F0E0
.text:0041F0E0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0041F0E0 GetProcAddress  proc near               ; CODE XREF: sub_415930+33↑p
.text:0041F0E0                                         ; sub_415AA0+2E↑p ...
.text:0041F0E0
.text:0041F0E0 hModule         = dword ptr  4
.text:0041F0E0 lpProcName      = dword ptr  8
.text:0041F0E0
.text:0041F0E0                 jmp     ds:__imp_GetProcAddress
.text:0041F0E0 GetProcAddress  endp
.text:0041F0E0
.text:0041F0E0 ; ---------------------------------------------------------------------------
.text:0041F0E6                 align 10h
.text:0041F0F0
.text:0041F0F0 ; =============== S U B R O U T I N E =======================================
.text:0041F0F0
.text:0041F0F0 ; Attributes: thunk
.text:0041F0F0
.text:0041F0F0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0041F0F0 GetFileAttributesA proc near            ; CODE XREF: sub_415930+47↑p
.text:0041F0F0                                         ; sub_4192C0+13↑p ...
.text:0041F0F0
.text:0041F0F0 lpFileName      = dword ptr  4
.text:0041F0F0
.text:0041F0F0                 jmp     ds:__imp_GetFileAttributesA
.text:0041F0F0 GetFileAttributesA endp
.text:0041F0F0
.text:0041F0F0 ; ---------------------------------------------------------------------------
.text:0041F0F6                 align 10h
.text:0041F100
.text:0041F100 ; =============== S U B R O U T I N E =======================================
.text:0041F100
.text:0041F100 ; Attributes: thunk
.text:0041F100
.text:0041F100 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0041F100 FreeLibrary     proc near               ; CODE XREF: sub_415930+A4↑p
.text:0041F100                                         ; sub_415AA0+11D↑p ...
.text:0041F100
.text:0041F100 hLibModule      = dword ptr  4
.text:0041F100
.text:0041F100                 jmp     ds:__imp_FreeLibrary
.text:0041F100 FreeLibrary     endp
.text:0041F100
.text:0041F100 ; ---------------------------------------------------------------------------
.text:0041F106                 align 10h
.text:0041F110
.text:0041F110 ; =============== S U B R O U T I N E =======================================
.text:0041F110
.text:0041F110 ; Attributes: thunk
.text:0041F110
.text:0041F110 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041F110 FindFirstFileA  proc near               ; CODE XREF: sub_415930+CE↑p
.text:0041F110                                         ; sub_415AA0+14F↑p ...
.text:0041F110
.text:0041F110 lpFileName      = dword ptr  4
.text:0041F110 lpFindFileData  = dword ptr  8
.text:0041F110
.text:0041F110                 jmp     ds:__imp_FindFirstFileA
.text:0041F110 FindFirstFileA  endp
.text:0041F110
.text:0041F110 ; ---------------------------------------------------------------------------
.text:0041F116                 align 10h
.text:0041F120
.text:0041F120 ; =============== S U B R O U T I N E =======================================
.text:0041F120
.text:0041F120 ; Attributes: thunk
.text:0041F120
.text:0041F120 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0041F120 FindClose       proc near               ; CODE XREF: sub_415930+123↑p
.text:0041F120                                         ; sub_415AA0+10E↑p ...
.text:0041F120
.text:0041F120 hFindFile       = dword ptr  4
.text:0041F120
.text:0041F120                 jmp     ds:__imp_FindClose
.text:0041F120 FindClose       endp
.text:0041F120
.text:0041F120 ; ---------------------------------------------------------------------------
.text:0041F126                 align 10h
.text:0041F130
.text:0041F130 ; =============== S U B R O U T I N E =======================================
.text:0041F130
.text:0041F130 ; Attributes: thunk
.text:0041F130
.text:0041F130 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0041F130 LoadLibraryA    proc near               ; CODE XREF: sub_415AA0+13↑p
.text:0041F130                                         ; sub_4160F0+134↑p ...
.text:0041F130
.text:0041F130 lpLibFileName   = dword ptr  4
.text:0041F130
.text:0041F130                 jmp     ds:__imp_LoadLibraryA
.text:0041F130 LoadLibraryA    endp
.text:0041F130
.text:0041F130 ; ---------------------------------------------------------------------------
.text:0041F136                 align 10h
.text:0041F140
.text:0041F140 ; =============== S U B R O U T I N E =======================================
.text:0041F140
.text:0041F140 ; Attributes: thunk
.text:0041F140
.text:0041F140 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041F140 FindNextFileA   proc near               ; CODE XREF: sub_415AA0+FF↑p
.text:0041F140                                         ; sub_418180+36↑p
.text:0041F140
.text:0041F140 hFindFile       = dword ptr  4
.text:0041F140 lpFindFileData  = dword ptr  8
.text:0041F140
.text:0041F140                 jmp     ds:__imp_FindNextFileA
.text:0041F140 FindNextFileA   endp
.text:0041F140
.text:0041F140 ; ---------------------------------------------------------------------------
.text:0041F146                 align 10h
.text:0041F150
.text:0041F150 ; =============== S U B R O U T I N E =======================================
.text:0041F150
.text:0041F150 ; Attributes: thunk
.text:0041F150
.text:0041F150 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0041F150 GetFileType     proc near               ; CODE XREF: sub_415C20+43↑p
.text:0041F150                                         ; .text:004168DA↑p
.text:0041F150
.text:0041F150 hFile           = dword ptr  4
.text:0041F150
.text:0041F150                 jmp     ds:__imp_GetFileType
.text:0041F150 GetFileType     endp
.text:0041F150
.text:0041F150 ; ---------------------------------------------------------------------------
.text:0041F156                 align 10h
.text:0041F160
.text:0041F160 ; =============== S U B R O U T I N E =======================================
.text:0041F160
.text:0041F160 ; Attributes: thunk
.text:0041F160
.text:0041F160 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0041F160 GetFileInformationByHandle proc near    ; CODE XREF: sub_415C20+69↑p
.text:0041F160
.text:0041F160 hFile           = dword ptr  4
.text:0041F160 lpFileInformation= dword ptr  8
.text:0041F160
.text:0041F160                 jmp     ds:__imp_GetFileInformationByHandle
.text:0041F160 GetFileInformationByHandle endp
.text:0041F160
.text:0041F160 ; ---------------------------------------------------------------------------
.text:0041F166                 align 10h
.text:0041F170
.text:0041F170 ; =============== S U B R O U T I N E =======================================
.text:0041F170
.text:0041F170 ; Attributes: thunk
.text:0041F170
.text:0041F170 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0041F170 GetFileSize     proc near               ; CODE XREF: sub_415C20+3F2↑p
.text:0041F170
.text:0041F170 hFile           = dword ptr  4
.text:0041F170 lpFileSizeHigh  = dword ptr  8
.text:0041F170
.text:0041F170                 jmp     ds:__imp_GetFileSize
.text:0041F170 GetFileSize     endp
.text:0041F170
.text:0041F170 ; ---------------------------------------------------------------------------
.text:0041F176                 align 10h
.text:0041F180
.text:0041F180 ; =============== S U B R O U T I N E =======================================
.text:0041F180
.text:0041F180 ; Attributes: thunk
.text:0041F180
.text:0041F180 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0041F180 PeekNamedPipe   proc near               ; CODE XREF: sub_415C20+439↑p
.text:0041F180
.text:0041F180 hNamedPipe      = dword ptr  4
.text:0041F180 lpBuffer        = dword ptr  8
.text:0041F180 nBufferSize     = dword ptr  0Ch
.text:0041F180 lpBytesRead     = dword ptr  10h
.text:0041F180 lpTotalBytesAvail= dword ptr  14h
.text:0041F180 lpBytesLeftThisMessage= dword ptr  18h
.text:0041F180
.text:0041F180                 jmp     ds:__imp_PeekNamedPipe
.text:0041F180 PeekNamedPipe   endp
.text:0041F180
.text:0041F180 ; ---------------------------------------------------------------------------
.text:0041F186                 align 10h
.text:0041F190
.text:0041F190 ; =============== S U B R O U T I N E =======================================
.text:0041F190
.text:0041F190 ; Attributes: thunk
.text:0041F190
.text:0041F190 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0041F190 GetDriveTypeA   proc near               ; CODE XREF: sub_4160F0+4C↑p
.text:0041F190
.text:0041F190 lpRootPathName  = dword ptr  4
.text:0041F190
.text:0041F190                 jmp     ds:__imp_GetDriveTypeA
.text:0041F190 GetDriveTypeA   endp
.text:0041F190
.text:0041F190 ; ---------------------------------------------------------------------------
.text:0041F196                 align 10h
.text:0041F1A0
.text:0041F1A0 ; =============== S U B R O U T I N E =======================================
.text:0041F1A0
.text:0041F1A0 ; Attributes: thunk
.text:0041F1A0
.text:0041F1A0 ; DWORD __stdcall GetLastError()
.text:0041F1A0 GetLastError    proc near               ; CODE XREF: sub_4160F0:loc_416379↑p
.text:0041F1A0                                         ; .text:loc_416EBD↑p ...
.text:0041F1A0                 jmp     ds:__imp_GetLastError
.text:0041F1A0 GetLastError    endp
.text:0041F1A0
.text:0041F1A0 ; ---------------------------------------------------------------------------
.text:0041F1A6                 align 10h
.text:0041F1B0
.text:0041F1B0 ; =============== S U B R O U T I N E =======================================
.text:0041F1B0
.text:0041F1B0 ; Attributes: thunk
.text:0041F1B0
.text:0041F1B0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0041F1B0 GetVolumeInformationA proc near         ; CODE XREF: sub_4165F0+64↑p
.text:0041F1B0                                         ; .text:00416B9C↑p ...
.text:0041F1B0
.text:0041F1B0 lpRootPathName  = dword ptr  4
.text:0041F1B0 lpVolumeNameBuffer= dword ptr  8
.text:0041F1B0 nVolumeNameSize = dword ptr  0Ch
.text:0041F1B0 lpVolumeSerialNumber= dword ptr  10h
.text:0041F1B0 lpMaximumComponentLength= dword ptr  14h
.text:0041F1B0 lpFileSystemFlags= dword ptr  18h
.text:0041F1B0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0041F1B0 nFileSystemNameSize= dword ptr  20h
.text:0041F1B0
.text:0041F1B0                 jmp     ds:__imp_GetVolumeInformationA
.text:0041F1B0 GetVolumeInformationA endp
.text:0041F1B0
.text:0041F1B0 ; ---------------------------------------------------------------------------
.text:0041F1B6                 align 10h
.text:0041F1C0
.text:0041F1C0 ; =============== S U B R O U T I N E =======================================
.text:0041F1C0
.text:0041F1C0 ; Attributes: thunk
.text:0041F1C0
.text:0041F1C0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0041F1C0 CreateFileA     proc near               ; CODE XREF: sub_417750-3CA↑p
.text:0041F1C0                                         ; sub_417420+4C↑p ...
.text:0041F1C0
.text:0041F1C0 lpFileName      = dword ptr  4
.text:0041F1C0 dwDesiredAccess = dword ptr  8
.text:0041F1C0 dwShareMode     = dword ptr  0Ch
.text:0041F1C0 lpSecurityAttributes= dword ptr  10h
.text:0041F1C0 dwCreationDisposition= dword ptr  14h
.text:0041F1C0 dwFlagsAndAttributes= dword ptr  18h
.text:0041F1C0 hTemplateFile   = dword ptr  1Ch
.text:0041F1C0
.text:0041F1C0                 jmp     ds:__imp_CreateFileA
.text:0041F1C0 CreateFileA     endp
.text:0041F1C0
.text:0041F1C0 ; ---------------------------------------------------------------------------
.text:0041F1C6                 align 10h
.text:0041F1D0
.text:0041F1D0 ; =============== S U B R O U T I N E =======================================
.text:0041F1D0
.text:0041F1D0 ; Attributes: thunk
.text:0041F1D0
.text:0041F1D0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0041F1D0 CloseHandle     proc near               ; CODE XREF: sub_417750-3AF↑p
.text:0041F1D0                                         ; sub_417420+182↑p ...
.text:0041F1D0
.text:0041F1D0 hObject         = dword ptr  4
.text:0041F1D0
.text:0041F1D0                 jmp     ds:__imp_CloseHandle
.text:0041F1D0 CloseHandle     endp
.text:0041F1D0
.text:0041F1D0 ; ---------------------------------------------------------------------------
.text:0041F1D6                 align 10h
.text:0041F1E0
.text:0041F1E0 ; =============== S U B R O U T I N E =======================================
.text:0041F1E0
.text:0041F1E0 ; Attributes: thunk
.text:0041F1E0
.text:0041F1E0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0041F1E0 SetErrorMode    proc near               ; CODE XREF: sub_417750-37A↑p
.text:0041F1E0                                         ; sub_4184E0+80↑p ...
.text:0041F1E0
.text:0041F1E0 uMode           = dword ptr  4
.text:0041F1E0
.text:0041F1E0                 jmp     ds:__imp_SetErrorMode
.text:0041F1E0 SetErrorMode    endp
.text:0041F1E0
.text:0041F1E0 ; ---------------------------------------------------------------------------
.text:0041F1E6                 align 10h
.text:0041F1F0
.text:0041F1F0 ; =============== S U B R O U T I N E =======================================
.text:0041F1F0
.text:0041F1F0 ; Attributes: thunk
.text:0041F1F0
.text:0041F1F0 ; BOOL __stdcall BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.text:0041F1F0 BackupWrite     proc near               ; CODE XREF: sub_417420+F8↑p
.text:0041F1F0                                         ; sub_417420+13A↑p ...
.text:0041F1F0
.text:0041F1F0 hFile           = dword ptr  4
.text:0041F1F0 lpBuffer        = dword ptr  8
.text:0041F1F0 nNumberOfBytesToWrite= dword ptr  0Ch
.text:0041F1F0 lpNumberOfBytesWritten= dword ptr  10h
.text:0041F1F0 bAbort          = dword ptr  14h
.text:0041F1F0 bProcessSecurity= dword ptr  18h
.text:0041F1F0 lpContext       = dword ptr  1Ch
.text:0041F1F0
.text:0041F1F0                 jmp     ds:__imp_BackupWrite
.text:0041F1F0 BackupWrite     endp
.text:0041F1F0
.text:0041F1F0 ; ---------------------------------------------------------------------------
.text:0041F1F6                 align 10h
.text:0041F200
.text:0041F200 ; =============== S U B R O U T I N E =======================================
.text:0041F200
.text:0041F200 ; Attributes: thunk
.text:0041F200
.text:0041F200 ; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.text:0041F200 CopyFileA       proc near               ; CODE XREF: sub_417600+C2↑p
.text:0041F200
.text:0041F200 lpExistingFileName= dword ptr  4
.text:0041F200 lpNewFileName   = dword ptr  8
.text:0041F200 bFailIfExists   = dword ptr  0Ch
.text:0041F200
.text:0041F200                 jmp     ds:__imp_CopyFileA
.text:0041F200 CopyFileA       endp
.text:0041F200
.text:0041F200 ; ---------------------------------------------------------------------------
.text:0041F206                 align 10h
.text:0041F210
.text:0041F210 ; =============== S U B R O U T I N E =======================================
.text:0041F210
.text:0041F210 ; Attributes: thunk
.text:0041F210
.text:0041F210 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041F210 CreateDirectoryA proc near              ; CODE XREF: sub_4177A0+22↑p
.text:0041F210
.text:0041F210 lpPathName      = dword ptr  4
.text:0041F210 lpSecurityAttributes= dword ptr  8
.text:0041F210
.text:0041F210                 jmp     ds:__imp_CreateDirectoryA
.text:0041F210 CreateDirectoryA endp
.text:0041F210
.text:0041F210 ; ---------------------------------------------------------------------------
.text:0041F216                 align 10h
.text:0041F220
.text:0041F220 ; =============== S U B R O U T I N E =======================================
.text:0041F220
.text:0041F220 ; Attributes: thunk
.text:0041F220
.text:0041F220 ; HANDLE __stdcall CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041F220 CreateNamedPipeA proc near              ; CODE XREF: sub_417820+8D↑p
.text:0041F220
.text:0041F220 lpName          = dword ptr  4
.text:0041F220 dwOpenMode      = dword ptr  8
.text:0041F220 dwPipeMode      = dword ptr  0Ch
.text:0041F220 nMaxInstances   = dword ptr  10h
.text:0041F220 nOutBufferSize  = dword ptr  14h
.text:0041F220 nInBufferSize   = dword ptr  18h
.text:0041F220 nDefaultTimeOut = dword ptr  1Ch
.text:0041F220 lpSecurityAttributes= dword ptr  20h
.text:0041F220
.text:0041F220                 jmp     ds:__imp_CreateNamedPipeA
.text:0041F220 CreateNamedPipeA endp
.text:0041F220
.text:0041F220 ; ---------------------------------------------------------------------------
.text:0041F226                 align 10h
.text:0041F230
.text:0041F230 ; =============== S U B R O U T I N E =======================================
.text:0041F230
.text:0041F230 ; Attributes: thunk
.text:0041F230
.text:0041F230 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0041F230 GetModuleFileNameA proc near            ; CODE XREF: sub_417E70+1C↑p
.text:0041F230
.text:0041F230 hModule         = dword ptr  4
.text:0041F230 lpFilename      = dword ptr  8
.text:0041F230 nSize           = dword ptr  0Ch
.text:0041F230
.text:0041F230                 jmp     ds:__imp_GetModuleFileNameA
.text:0041F230 GetModuleFileNameA endp
.text:0041F230
.text:0041F230 ; ---------------------------------------------------------------------------
.text:0041F236                 align 10h
.text:0041F240
.text:0041F240 ; =============== S U B R O U T I N E =======================================
.text:0041F240
.text:0041F240 ; Attributes: thunk
.text:0041F240
.text:0041F240 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0041F240 GetShortPathNameA proc near             ; CODE XREF: .text:004180F6↑p
.text:0041F240                                         ; .text:00418120↑p
.text:0041F240
.text:0041F240 lpszLongPath    = dword ptr  4
.text:0041F240 lpszShortPath   = dword ptr  8
.text:0041F240 cchBuffer       = dword ptr  0Ch
.text:0041F240
.text:0041F240                 jmp     ds:__imp_GetShortPathNameA
.text:0041F240 GetShortPathNameA endp
.text:0041F240
.text:0041F240 ; ---------------------------------------------------------------------------
.text:0041F246                 align 10h
.text:0041F250
.text:0041F250 ; =============== S U B R O U T I N E =======================================
.text:0041F250
.text:0041F250 ; Attributes: thunk
.text:0041F250
.text:0041F250 ; BOOL __stdcall AreFileApisANSI()
.text:0041F250 AreFileApisANSI proc near               ; CODE XREF: sub_418360+89↑p
.text:0041F250                                         ; sub_4192C0+E3↑p
.text:0041F250                 jmp     ds:__imp_AreFileApisANSI
.text:0041F250 AreFileApisANSI endp
.text:0041F250
.text:0041F250 ; ---------------------------------------------------------------------------
.text:0041F256                 align 10h
.text:0041F260
.text:0041F260 ; =============== S U B R O U T I N E =======================================
.text:0041F260
.text:0041F260 ; Attributes: thunk
.text:0041F260
.text:0041F260 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0041F260 MultiByteToWideChar proc near           ; CODE XREF: sub_418360+BD↑p
.text:0041F260                                         ; sub_4192C0+117↑p
.text:0041F260
.text:0041F260 CodePage        = dword ptr  4
.text:0041F260 dwFlags         = dword ptr  8
.text:0041F260 lpMultiByteStr  = dword ptr  0Ch
.text:0041F260 cbMultiByte     = dword ptr  10h
.text:0041F260 lpWideCharStr   = dword ptr  14h
.text:0041F260 cchWideChar     = dword ptr  18h
.text:0041F260
.text:0041F260                 jmp     ds:__imp_MultiByteToWideChar
.text:0041F260 MultiByteToWideChar endp
.text:0041F260
.text:0041F260 ; ---------------------------------------------------------------------------
.text:0041F266                 align 10h
.text:0041F270
.text:0041F270 ; =============== S U B R O U T I N E =======================================
.text:0041F270
.text:0041F270 ; Attributes: thunk
.text:0041F270
.text:0041F270 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0041F270 lstrcpyA        proc near               ; CODE XREF: sub_418360+128↑p
.text:0041F270
.text:0041F270 lpString1       = dword ptr  4
.text:0041F270 lpString2       = dword ptr  8
.text:0041F270
.text:0041F270                 jmp     ds:__imp_lstrcpyA
.text:0041F270 lstrcpyA        endp
.text:0041F270
.text:0041F270 ; ---------------------------------------------------------------------------
.text:0041F276                 align 10h
.text:0041F280
.text:0041F280 ; =============== S U B R O U T I N E =======================================
.text:0041F280
.text:0041F280 ; Attributes: thunk
.text:0041F280
.text:0041F280 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041F280 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00418878↑p
.text:0041F280                                         ; .text:00418894↑p ...
.text:0041F280
.text:0041F280 nBufferLength   = dword ptr  4
.text:0041F280 lpBuffer        = dword ptr  8
.text:0041F280
.text:0041F280                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0041F280 GetCurrentDirectoryA endp
.text:0041F280
.text:0041F280 ; ---------------------------------------------------------------------------
.text:0041F286                 align 10h
.text:0041F290
.text:0041F290 ; =============== S U B R O U T I N E =======================================
.text:0041F290
.text:0041F290 ; Attributes: thunk
.text:0041F290
.text:0041F290 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0041F290 DeviceIoControl proc near               ; CODE XREF: .text:00418C5C↑p
.text:0041F290                                         ; sub_419020+1E5↑p
.text:0041F290
.text:0041F290 hDevice         = dword ptr  4
.text:0041F290 dwIoControlCode = dword ptr  8
.text:0041F290 lpInBuffer      = dword ptr  0Ch
.text:0041F290 nInBufferSize   = dword ptr  10h
.text:0041F290 lpOutBuffer     = dword ptr  14h
.text:0041F290 nOutBufferSize  = dword ptr  18h
.text:0041F290 lpBytesReturned = dword ptr  1Ch
.text:0041F290 lpOverlapped    = dword ptr  20h
.text:0041F290
.text:0041F290                 jmp     ds:__imp_DeviceIoControl
.text:0041F290 DeviceIoControl endp
.text:0041F290
.text:0041F290 ; ---------------------------------------------------------------------------
.text:0041F296                 align 10h
.text:0041F2A0
.text:0041F2A0 ; =============== S U B R O U T I N E =======================================
.text:0041F2A0
.text:0041F2A0 ; Attributes: thunk
.text:0041F2A0
.text:0041F2A0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0041F2A0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00418FB3↑p
.text:0041F2A0                                         ; sub_419020+7B↑p ...
.text:0041F2A0
.text:0041F2A0 lpRootPathName  = dword ptr  4
.text:0041F2A0 lpSectorsPerCluster= dword ptr  8
.text:0041F2A0 lpBytesPerSector= dword ptr  0Ch
.text:0041F2A0 lpNumberOfFreeClusters= dword ptr  10h
.text:0041F2A0 lpTotalNumberOfClusters= dword ptr  14h
.text:0041F2A0
.text:0041F2A0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0041F2A0 GetDiskFreeSpaceA endp
.text:0041F2A0
.text:0041F2A0 ; ---------------------------------------------------------------------------
.text:0041F2A6                 align 10h
.text:0041F2B0
.text:0041F2B0 ; =============== S U B R O U T I N E =======================================
.text:0041F2B0
.text:0041F2B0 ; Attributes: thunk
.text:0041F2B0
.text:0041F2B0 ; BOOL __stdcall SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes)
.text:0041F2B0 SetFileAttributesA proc near            ; CODE XREF: sub_4192C0+2A↑p
.text:0041F2B0                                         ; sub_4192C0+178↑p
.text:0041F2B0
.text:0041F2B0 lpFileName      = dword ptr  4
.text:0041F2B0 dwFileAttributes= dword ptr  8
.text:0041F2B0
.text:0041F2B0                 jmp     ds:__imp_SetFileAttributesA
.text:0041F2B0 SetFileAttributesA endp
.text:0041F2B0
.text:0041F2B0 ; ---------------------------------------------------------------------------
.text:0041F2B6                 align 10h
.text:0041F2C0
.text:0041F2C0 ; =============== S U B R O U T I N E =======================================
.text:0041F2C0
.text:0041F2C0 ; Attributes: thunk
.text:0041F2C0
.text:0041F2C0 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:0041F2C0 DeleteFileA     proc near               ; CODE XREF: sub_4195A0+50↑p
.text:0041F2C0
.text:0041F2C0 lpFileName      = dword ptr  4
.text:0041F2C0
.text:0041F2C0                 jmp     ds:__imp_DeleteFileA
.text:0041F2C0 DeleteFileA     endp
.text:0041F2C0
.text:0041F2C0 ; ---------------------------------------------------------------------------
.text:0041F2C6                 align 10h
.text:0041F2D0
.text:0041F2D0 ; =============== S U B R O U T I N E =======================================
.text:0041F2D0
.text:0041F2D0 ; Attributes: thunk
.text:0041F2D0
.text:0041F2D0 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:0041F2D0 SetEndOfFile    proc near               ; CODE XREF: sub_4198C0+53↑p
.text:0041F2D0
.text:0041F2D0 hFile           = dword ptr  4
.text:0041F2D0
.text:0041F2D0                 jmp     ds:__imp_SetEndOfFile
.text:0041F2D0 SetEndOfFile    endp
.text:0041F2D0
.text:0041F2D0 ; ---------------------------------------------------------------------------
.text:0041F2D6                 align 10h
.text:0041F2E0
.text:0041F2E0 ; =============== S U B R O U T I N E =======================================
.text:0041F2E0
.text:0041F2E0 ; Attributes: thunk
.text:0041F2E0
.text:0041F2E0 ; BOOL __stdcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:0041F2E0 MoveFileA       proc near               ; CODE XREF: sub_4199A0+36↑p
.text:0041F2E0
.text:0041F2E0 lpExistingFileName= dword ptr  4
.text:0041F2E0 lpNewFileName   = dword ptr  8
.text:0041F2E0
.text:0041F2E0                 jmp     ds:__imp_MoveFileA
.text:0041F2E0 MoveFileA       endp
.text:0041F2E0
.text:0041F2E0 ; ---------------------------------------------------------------------------
.text:0041F2E6                 align 10h
.text:0041F2F0
.text:0041F2F0 ; =============== S U B R O U T I N E =======================================
.text:0041F2F0
.text:0041F2F0 ; Attributes: thunk
.text:0041F2F0
.text:0041F2F0 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:0041F2F0 GetSystemInfo   proc near               ; CODE XREF: sub_419A20+3A↑p
.text:0041F2F0
.text:0041F2F0 lpSystemInfo    = dword ptr  4
.text:0041F2F0
.text:0041F2F0                 jmp     ds:__imp_GetSystemInfo
.text:0041F2F0 GetSystemInfo   endp
.text:0041F2F0
.text:0041F2F0 ; ---------------------------------------------------------------------------
.text:0041F2F6                 align 10h
.text:0041F300
.text:0041F300 ; =============== S U B R O U T I N E =======================================
.text:0041F300
.text:0041F300 ; Attributes: thunk
.text:0041F300
.text:0041F300 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.text:0041F300 SetCurrentDirectoryA proc near          ; CODE XREF: sub_419A70+12↑p
.text:0041F300
.text:0041F300 lpPathName      = dword ptr  4
.text:0041F300
.text:0041F300                 jmp     ds:__imp_SetCurrentDirectoryA
.text:0041F300 SetCurrentDirectoryA endp
.text:0041F300
.text:0041F300 ; ---------------------------------------------------------------------------
.text:0041F306                 align 10h
.text:0041F310
.text:0041F310 ; =============== S U B R O U T I N E =======================================
.text:0041F310
.text:0041F310 ; Attributes: thunk
.text:0041F310
.text:0041F310 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0041F310 GetFullPathNameA proc near              ; CODE XREF: sub_41A260+45↑p
.text:0041F310                                         ; sub_41A260+ED↑p
.text:0041F310
.text:0041F310 lpFileName      = dword ptr  4
.text:0041F310 nBufferLength   = dword ptr  8
.text:0041F310 lpBuffer        = dword ptr  0Ch
.text:0041F310 lpFilePart      = dword ptr  10h
.text:0041F310
.text:0041F310                 jmp     ds:__imp_GetFullPathNameA
.text:0041F310 GetFullPathNameA endp
.text:0041F310
.text:0041F310 ; ---------------------------------------------------------------------------
.text:0041F316                 align 10h
.text:0041F320
.text:0041F320 ; =============== S U B R O U T I N E =======================================
.text:0041F320
.text:0041F320 ; Attributes: thunk
.text:0041F320
.text:0041F320 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0041F320 lstrcmpiA       proc near               ; CODE XREF: .text:0041A84B↑p
.text:0041F320                                         ; .text:0041A862↑p ...
.text:0041F320
.text:0041F320 lpString1       = dword ptr  4
.text:0041F320 lpString2       = dword ptr  8
.text:0041F320
.text:0041F320                 jmp     ds:__imp_lstrcmpiA
.text:0041F320 lstrcmpiA       endp
.text:0041F320
.text:0041F320 ; ---------------------------------------------------------------------------
.text:0041F326                 align 10h
.text:0041F330
.text:0041F330 ; =============== S U B R O U T I N E =======================================
.text:0041F330
.text:0041F330 ; Attributes: thunk
.text:0041F330
.text:0041F330 ; DWORD __stdcall GetVersion()
.text:0041F330 GetVersion      proc near               ; CODE XREF: .text:0041ABD3↑p
.text:0041F330                 jmp     ds:__imp_GetVersion
.text:0041F330 GetVersion      endp
.text:0041F330
.text:0041F330 ; ---------------------------------------------------------------------------
.text:0041F336                 align 10h
.text:0041F340
.text:0041F340 ; =============== S U B R O U T I N E =======================================
.text:0041F340
.text:0041F340 ; Attributes: thunk
.text:0041F340
.text:0041F340 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0041F340 GetVersionExA   proc near               ; CODE XREF: sub_41AC60+32↑p
.text:0041F340                                         ; sub_41AC60+20B↑p
.text:0041F340
.text:0041F340 lpVersionInformation= dword ptr  4
.text:0041F340
.text:0041F340                 jmp     ds:__imp_GetVersionExA
.text:0041F340 GetVersionExA   endp
.text:0041F340
.text:0041F340 ; ---------------------------------------------------------------------------
.text:0041F346                 align 10h
.text:0041F350
.text:0041F350 ; =============== S U B R O U T I N E =======================================
.text:0041F350
.text:0041F350 ; Attributes: thunk
.text:0041F350
.text:0041F350 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041F350 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0041B2FF↑p
.text:0041F350                                         ; .text:0041B32E↑p ...
.text:0041F350
.text:0041F350 nBufferLength   = dword ptr  4
.text:0041F350 lpBuffer        = dword ptr  8
.text:0041F350
.text:0041F350                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0041F350 GetLogicalDriveStringsA endp
.text:0041F350
.text:0041F350 ; ---------------------------------------------------------------------------
.text:0041F356                 align 10h
.text:0041F360
.text:0041F360 ; =============== S U B R O U T I N E =======================================
.text:0041F360
.text:0041F360 ; Attributes: thunk
.text:0041F360
.text:0041F360 ; HANDLE __stdcall GetProcessHeap()
.text:0041F360 GetProcessHeap  proc near               ; CODE XREF: .text:0041B309↑p
.text:0041F360                                         ; sub_41B9E0+24↑p ...
.text:0041F360                 jmp     ds:__imp_GetProcessHeap
.text:0041F360 GetProcessHeap  endp
.text:0041F360
.text:0041F360 ; ---------------------------------------------------------------------------
.text:0041F366                 align 10h
.text:0041F370
.text:0041F370 ; =============== S U B R O U T I N E =======================================
.text:0041F370
.text:0041F370 ; Attributes: thunk
.text:0041F370
.text:0041F370 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0041F370 HeapAlloc       proc near               ; CODE XREF: .text:0041B31D↑p
.text:0041F370                                         ; sub_41B9E0+38↑p ...
.text:0041F370
.text:0041F370 hHeap           = dword ptr  4
.text:0041F370 dwFlags         = dword ptr  8
.text:0041F370 dwBytes         = dword ptr  0Ch
.text:0041F370
.text:0041F370                 jmp     ds:__imp_HeapAlloc
.text:0041F370 HeapAlloc       endp
.text:0041F370
.text:0041F370 ; ---------------------------------------------------------------------------
.text:0041F376                 align 10h
.text:0041F380
.text:0041F380 ; =============== S U B R O U T I N E =======================================
.text:0041F380
.text:0041F380 ; Attributes: thunk
.text:0041F380
.text:0041F380 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0041F380 HeapFree        proc near               ; CODE XREF: .text:0041BB1D↑p
.text:0041F380
.text:0041F380 hHeap           = dword ptr  4
.text:0041F380 dwFlags         = dword ptr  8
.text:0041F380 lpMem           = dword ptr  0Ch
.text:0041F380
.text:0041F380                 jmp     ds:__imp_HeapFree
.text:0041F380 HeapFree        endp
.text:0041F380
.text:0041F380 ; ---------------------------------------------------------------------------
.text:0041F386                 align 10h
.text:0041F390
.text:0041F390 ; =============== S U B R O U T I N E =======================================
.text:0041F390
.text:0041F390 ; Attributes: thunk
.text:0041F390
.text:0041F390 ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.text:0041F390 FormatMessageA  proc near               ; CODE XREF: .text:0041BBFA↑p
.text:0041F390                                         ; .text:0041BC72↑p ...
.text:0041F390
.text:0041F390 dwFlags         = dword ptr  4
.text:0041F390 lpSource        = dword ptr  8
.text:0041F390 dwMessageId     = dword ptr  0Ch
.text:0041F390 dwLanguageId    = dword ptr  10h
.text:0041F390 lpBuffer        = dword ptr  14h
.text:0041F390 nSize           = dword ptr  18h
.text:0041F390 Arguments       = dword ptr  1Ch
.text:0041F390
.text:0041F390                 jmp     ds:__imp_FormatMessageA
.text:0041F390 FormatMessageA  endp
.text:0041F390
.text:0041F390 ; ---------------------------------------------------------------------------
.text:0041F396                 align 10h
.text:0041F3A0
.text:0041F3A0 ; =============== S U B R O U T I N E =======================================
.text:0041F3A0
.text:0041F3A0 ; Attributes: thunk
.text:0041F3A0
.text:0041F3A0 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
.text:0041F3A0 LocalFree       proc near               ; CODE XREF: .text:0041BCAA↑p
.text:0041F3A0                                         ; sub_41BCC0+7D↑p ...
.text:0041F3A0
.text:0041F3A0 hMem            = dword ptr  4
.text:0041F3A0
.text:0041F3A0                 jmp     ds:__imp_LocalFree
.text:0041F3A0 LocalFree       endp
.text:0041F3A0
.text:0041F3A0 ; ---------------------------------------------------------------------------
.text:0041F3A6                 align 10h
.text:0041F3B0
.text:0041F3B0 ; =============== S U B R O U T I N E =======================================
.text:0041F3B0
.text:0041F3B0 ; Attributes: thunk
.text:0041F3B0
.text:0041F3B0 ; void __stdcall SetLastError(DWORD dwErrCode)
.text:0041F3B0 SetLastError    proc near               ; CODE XREF: .text:0041BDB8↑p
.text:0041F3B0
.text:0041F3B0 dwErrCode       = dword ptr  4
.text:0041F3B0
.text:0041F3B0                 jmp     ds:__imp_SetLastError
.text:0041F3B0 SetLastError    endp
.text:0041F3B0
.text:0041F3B0 ; ---------------------------------------------------------------------------
.text:0041F3B6                 align 10h
.text:0041F3C0
.text:0041F3C0 ; =============== S U B R O U T I N E =======================================
.text:0041F3C0
.text:0041F3C0 ; Attributes: thunk
.text:0041F3C0
.text:0041F3C0 ; BOOL __stdcall SetFileTime(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.text:0041F3C0 SetFileTime     proc near               ; CODE XREF: sub_41BEA0+93↑p
.text:0041F3C0
.text:0041F3C0 hFile           = dword ptr  4
.text:0041F3C0 lpCreationTime  = dword ptr  8
.text:0041F3C0 lpLastAccessTime= dword ptr  0Ch
.text:0041F3C0 lpLastWriteTime = dword ptr  10h
.text:0041F3C0
.text:0041F3C0                 jmp     ds:__imp_SetFileTime
.text:0041F3C0 SetFileTime     endp
.text:0041F3C0
.text:0041F3C0 ; ---------------------------------------------------------------------------
.text:0041F3C6                 align 10h
.text:0041F3D0
.text:0041F3D0 ; =============== S U B R O U T I N E =======================================
.text:0041F3D0
.text:0041F3D0 ; Attributes: thunk
.text:0041F3D0
.text:0041F3D0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0041F3D0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_41BEA0+C7↑p
.text:0041F3D0                                         ; sub_41D240+4F↑p
.text:0041F3D0
.text:0041F3D0 lpSystemTimeAsFileTime= dword ptr  4
.text:0041F3D0
.text:0041F3D0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0041F3D0 GetSystemTimeAsFileTime endp
.text:0041F3D0
.text:0041F3D0 ; ---------------------------------------------------------------------------
.text:0041F3D6                 align 10h
.text:0041F3E0
.text:0041F3E0 ; =============== S U B R O U T I N E =======================================
.text:0041F3E0
.text:0041F3E0 ; Attributes: thunk
.text:0041F3E0
.text:0041F3E0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0041F3E0 UnlockFile      proc near               ; CODE XREF: sub_41C7F0+40↑p
.text:0041F3E0
.text:0041F3E0 hFile           = dword ptr  4
.text:0041F3E0 dwFileOffsetLow = dword ptr  8
.text:0041F3E0 dwFileOffsetHigh= dword ptr  0Ch
.text:0041F3E0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0041F3E0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0041F3E0
.text:0041F3E0                 jmp     ds:__imp_UnlockFile
.text:0041F3E0 UnlockFile      endp
.text:0041F3E0
.text:0041F3E0 ; ---------------------------------------------------------------------------
.text:0041F3E6                 align 10h
.text:0041F3F0
.text:0041F3F0 ; =============== S U B R O U T I N E =======================================
.text:0041F3F0
.text:0041F3F0 ; Attributes: thunk
.text:0041F3F0
.text:0041F3F0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0041F3F0 GetTimeZoneInformation proc near        ; CODE XREF: sub_41D240+22↑p
.text:0041F3F0
.text:0041F3F0 lpTimeZoneInformation= dword ptr  4
.text:0041F3F0
.text:0041F3F0                 jmp     ds:__imp_GetTimeZoneInformation
.text:0041F3F0 GetTimeZoneInformation endp
.text:0041F3F0
.text:0041F3F0 ; ---------------------------------------------------------------------------
.text:0041F3F6                 align 10h
.text:0041F400
.text:0041F400 ; =============== S U B R O U T I N E =======================================
.text:0041F400
.text:0041F400 ; Attributes: thunk
.text:0041F400
.text:0041F400 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0041F400 RegOpenKeyExA   proc near               ; CODE XREF: .text:0041A7D1↑p
.text:0041F400
.text:0041F400 hKey            = dword ptr  4
.text:0041F400 lpSubKey        = dword ptr  8
.text:0041F400 ulOptions       = dword ptr  0Ch
.text:0041F400 samDesired      = dword ptr  10h
.text:0041F400 phkResult       = dword ptr  14h
.text:0041F400
.text:0041F400                 jmp     ds:__imp_RegOpenKeyExA
.text:0041F400 RegOpenKeyExA   endp
.text:0041F400
.text:0041F400 ; ---------------------------------------------------------------------------
.text:0041F406                 align 10h
.text:0041F410
.text:0041F410 ; =============== S U B R O U T I N E =======================================
.text:0041F410
.text:0041F410 ; Attributes: thunk
.text:0041F410
.text:0041F410 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0041F410 RegQueryValueExA proc near              ; CODE XREF: .text:0041A814↑p
.text:0041F410
.text:0041F410 hKey            = dword ptr  4
.text:0041F410 lpValueName     = dword ptr  8
.text:0041F410 lpReserved      = dword ptr  0Ch
.text:0041F410 lpType          = dword ptr  10h
.text:0041F410 lpData          = dword ptr  14h
.text:0041F410 lpcbData        = dword ptr  18h
.text:0041F410
.text:0041F410                 jmp     ds:__imp_RegQueryValueExA
.text:0041F410 RegQueryValueExA endp
.text:0041F410
.text:0041F410 ; ---------------------------------------------------------------------------
.text:0041F416                 align 10h
.text:0041F420
.text:0041F420 ; =============== S U B R O U T I N E =======================================
.text:0041F420
.text:0041F420 ; Attributes: thunk
.text:0041F420
.text:0041F420 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0041F420 RegCloseKey     proc near               ; CODE XREF: .text:0041A838↑p
.text:0041F420
.text:0041F420 hKey            = dword ptr  4
.text:0041F420
.text:0041F420                 jmp     ds:__imp_RegCloseKey
.text:0041F420 RegCloseKey     endp
.text:0041F420
.text:0041F420 ; ---------------------------------------------------------------------------
.text:0041F426                 align 10h
.text:0041F430
.text:0041F430 ; =============== S U B R O U T I N E =======================================
.text:0041F430
.text:0041F430 ; Attributes: thunk
.text:0041F430
.text:0041F430 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:0041F430 GetUserNameA    proc near               ; CODE XREF: sub_41C990+1E↑p
.text:0041F430
.text:0041F430 lpBuffer        = dword ptr  4
.text:0041F430 pcbBuffer       = dword ptr  8
.text:0041F430
.text:0041F430                 jmp     ds:__imp_GetUserNameA
.text:0041F430 GetUserNameA    endp
.text:0041F430
.text:0041F430 ; ---------------------------------------------------------------------------
.text:0041F436                 db 2 dup(90h)
.text:0041F438                 dd 2 dup(0)
.text:0041F440                 dd 21400h, 0
.text:0041F448                 dd 0C0h, 46000000h
.text:0041F450 ; const IID rclsid
.text:0041F450 rclsid          dd 21401h               ; Data1
.text:0041F450                                         ; DATA XREF: sub_418360+4B↑o
.text:0041F450                                         ; sub_4192C0+72↑o
.text:0041F450                 dw 0                    ; Data2
.text:0041F450                 dw 0                    ; Data3
.text:0041F450                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041F460                 dd 214A0h, 0
.text:0041F468                 dd 0C0h, 46000000h, 214A1h, 0
.text:0041F478                 dd 0C0h, 46000000h, 214D0h, 0
.text:0041F488                 dd 0C0h, 46000000h, 214D1h, 0
.text:0041F498                 dd 0C0h, 46000000h, 214D2h, 0
.text:0041F4A8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0041F4B8                 dd 0C0h, 46000000h, 214E2h, 0
.text:0041F4C8                 dd 0C0h, 46000000h, 214E3h, 0
.text:0041F4D8                 dd 0C0h, 46000000h, 214E4h, 0
.text:0041F4E8                 dd 0C0h, 46000000h, 21500h, 0
.text:0041F4F8                 dd 0C0h, 46000000h, 214E5h, 0
.text:0041F508                 dd 0C0h, 46000000h, 214E6h, 0
.text:0041F518                 dd 0C0h, 46000000h, 214E8h, 0
.text:0041F528                 dd 0C0h, 46000000h, 214E9h, 0
.text:0041F538                 dd 0C0h, 46000000h, 214EAh, 0
.text:0041F548                 dd 0C0h, 46000000h, 214EBh, 0
.text:0041F558                 dd 0C0h, 46000000h
.text:0041F560 ; const IID riid
.text:0041F560 riid            dd 214EEh               ; Data1
.text:0041F560                                         ; DATA XREF: sub_418360+2B↑o
.text:0041F560                                         ; sub_4192C0+52↑o
.text:0041F560                 dw 0                    ; Data2
.text:0041F560                 dw 0                    ; Data3
.text:0041F560                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041F570                 dd 214EFh, 0
.text:0041F578                 dd 0C0h, 46000000h, 214F0h, 0
.text:0041F588                 dd 0C0h, 46000000h, 214F1h, 0
.text:0041F598                 dd 0C0h, 46000000h, 214F2h, 0
.text:0041F5A8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0041F5B8                 dd 0C0h, 46000000h, 214F4h, 0
.text:0041F5C8                 dd 0C0h, 46000000h, 214F5h, 0
.text:0041F5D8                 dd 0C0h, 46000000h, 214F6h, 0
.text:0041F5E8                 dd 0C0h, 46000000h, 214F7h, 0
.text:0041F5F8                 dd 0C0h, 46000000h, 214F8h, 0
.text:0041F608                 dd 0C0h, 46000000h, 214F9h, 0
.text:0041F618                 dd 0C0h, 46000000h, 214FAh, 0
.text:0041F628                 dd 0C0h, 46000000h, 214FBh, 0
.text:0041F638                 dd 0C0h, 46000000h, 214FCh, 0
.text:0041F648                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0041F648                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0041F648                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0041F648                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0041F648                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041F648                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0041F648                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0041F648                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041F648                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0041F648                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0041F718                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0041F728                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0041F738                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0041F748                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0041F758                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0041F758                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0041F758                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0041F758                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0041F758                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0041F758                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0041F758                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0041F7E0 dword_41F7E0    dd 0FFFFFFFFh           ; DATA XREF: .text:0041E879↑r
.text:0041F7E0                                         ; .text:loc_41E8A0↑r ...
.text:0041F7E4 dword_41F7E4    dd 0                    ; DATA XREF: .text:loc_41E8AC↑r
.text:0041F7E4                                         ; sub_41E8D0:loc_41E91D↑r
.text:0041F7E8                 dd 0FFFFFFFFh
.text:0041F7EC dword_41F7EC    dd 5 dup(0)             ; DATA XREF: .data:off_420114↓o
.text:0041F800                 dd 200h dup(?)
.text:0041F800 _text           ends
.text:0041F800
.data:00420000 ; Section 2. (virtual address 00020000)
.data:00420000 ; Virtual size                  : 00000130 (    304.)
.data:00420000 ; Section size in file          : 00000200 (    512.)
.data:00420000 ; Offset to raw data for section: 0001EC00
.data:00420000 ; Flags C0000040: Data Readable Writable
.data:00420000 ; Alignment     : default
.data:00420000 ; ===========================================================================
.data:00420000
.data:00420000 ; Segment type: Pure data
.data:00420000 ; Segment permissions: Read/Write
.data:00420000 _data           segment para public 'DATA' use32
.data:00420000                 assume cs:_data
.data:00420000                 ;org 420000h
.data:00420000 dword_420000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00420000                                         ; sub_401080+CC↑r
.data:00420004 dword_420004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00420004                                         ; sub_401080+D4↑r
.data:00420008                 align 10h
.data:00420010 word_420010     dw 1EDh                 ; DATA XREF: sub_401700+5BD↑w
.data:00420010                                         ; sub_401700:loc_401CF3↑r ...
.data:00420012                 align 10h
.data:00420020 dword_420020    dd 1                    ; DATA XREF: sub_401700+4B2↑r
.data:00420020                                         ; sub_409150+3↑r ...
.data:00420024 dword_420024    dd 1                    ; DATA XREF: sub_409150+11↑r
.data:00420024                                         ; .text:004091F1↑r
.data:00420028 dword_420028    dd 3Fh                  ; DATA XREF: sub_409150+7D↑w
.data:00420028                                         ; .text:0040925D↑w
.data:0042002C                 align 10h
.data:00420030 ; char *Src
.data:00420030 Src             dd offset sub_409390    ; DATA XREF: sub_401700+49B↑w
.data:00420030                                         ; sub_4093A0+13↑r ...
.data:00420034                 align 10h
.data:00420040 ; char *Buffer
.data:00420040 Buffer          dd offset aCopyrightC2005
.data:00420040                                         ; DATA XREF: sub_40A8A0+DC↑r
.data:00420040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00420044                 align 10h
.data:00420050 ; int off_420050
.data:00420050 off_420050      dd offset sub_40C6D0    ; DATA XREF: .text:00409534↑r
.data:00420050                                         ; sub_409590+38↑r ...
.data:00420054                 align 10h
.data:00420060 ; int Code
.data:00420060 Code            dd 1                    ; DATA XREF: sub_40A2A0+18↑r
.data:00420060                                         ; sub_40AC20+6D↑r ...
.data:00420064                 align 10h
.data:00420070 dword_420070    dd 1                    ; DATA XREF: sub_40D8C0+22↑r
.data:00420070                                         ; sub_40D8C0+65↑r ...
.data:00420074 dword_420074    dd 100h                 ; DATA XREF: sub_40D8C0+3F↑o
.data:00420074                                         ; sub_40D8C0+1A2↑r ...
.data:00420078 off_420078      dd offset unk_4210F0    ; DATA XREF: sub_40D8C0+1AA↑r
.data:0042007C ; void *off_42007C
.data:0042007C off_42007C      dd offset dword_420074  ; DATA XREF: sub_40D8C0+39↑r
.data:0042007C                                         ; sub_40D8C0+60↑w ...
.data:00420080 dword_420080    dd 0FA0h                ; DATA XREF: sub_40E6D0:loc_40F74B↑r
.data:00420080                                         ; sub_40E6D0:loc_40F8F9↑r ...
.data:00420084                 align 10h
.data:00420090 dword_420090    dd 200h                 ; DATA XREF: sub_415C20+2ED↑r
.data:00420090                                         ; sub_415C20+2F8↑r ...
.data:00420094 ; char *off_420094
.data:00420094 off_420094      dd offset aComExeBatCmd ; DATA XREF: sub_4160F0+3D3↑r
.data:00420094                                         ; sub_4160F0+400↑r ...
.data:00420094                                         ; ".com;.exe;.bat;.cmd"
.data:00420098                 align 10h
.data:004200A0 byte_4200A0     db 41h                  ; DATA XREF: sub_4186F0+6B↑w
.data:004200A0                                         ; sub_4186F0:loc_418804↑r
.data:004200A1                 align 10h
.data:004200B0 dword_4200B0    dd 1                    ; DATA XREF: .text:loc_41A687↑r
.data:004200B0                                         ; sub_41AC60+202↑w
.data:004200B4                 align 10h
.data:004200C0 off_4200C0      dd offset aNotset       ; DATA XREF: .text:0041AEDA↑r
.data:004200C0                                         ; .text:0041BB22↑r
.data:004200C0                                         ; "notset"
.data:004200C4 off_4200C4      dd offset aNotset       ; DATA XREF: .text:0041AEF2↑r
.data:004200C4                                         ; .text:0041AF14↑r ...
.data:004200C4                                         ; "notset"
.data:004200C8                 align 10h
.data:004200D0 ; char *off_4200D0
.data:004200D0 off_4200D0      dd offset byte_41C040   ; DATA XREF: sub_41C060+168↑r
.data:004200D4 off_4200D4      dd offset byte_41C041   ; DATA XREF: sub_41C060+1DA↑r
.data:004200D8                 align 10h
.data:004200E0 dword_4200E0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004200E4                 align 10h
.data:004200F0 ; int Mode
.data:004200F0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004200F0                                         ; sub_401080+80↑r ...
.data:004200F4                 align 10h
.data:00420100 dword_420100    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00420100                                         ; sub_401080+BA↑r
.data:00420104                 align 10h
.data:00420110 dword_420110    dd 0                    ; DATA XREF: sub_41E8D0+9↑r
.data:00420110                                         ; sub_41E8D0+1D↑w
.data:00420114 off_420114      dd offset dword_41F7EC  ; DATA XREF: sub_41E840+6↑r
.data:00420114                                         ; sub_41E840+17↑r ...
.data:00420118                 align 1000h
.data:00420118 _data           ends
.data:00420118
.bss:00421000 ; Section 3. (virtual address 00021000)
.bss:00421000 ; Virtual size                  : 00000D30 (   3376.)
.bss:00421000 ; Section size in file          : 00000000 (      0.)
.bss:00421000 ; Offset to raw data for section: 00000000
.bss:00421000 ; Flags C0000080: Bss Readable Writable
.bss:00421000 ; Alignment     : default
.bss:00421000 ; ===========================================================================
.bss:00421000
.bss:00421000 ; Segment type: Uninitialized
.bss:00421000 ; Segment permissions: Read/Write
.bss:00421000 _bss            segment para public 'BSS' use32
.bss:00421000                 assume cs:_bss
.bss:00421000                 ;org 421000h
.bss:00421000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00421000 ; char *dword_421000
.bss:00421000 dword_421000    dd ?                    ; DATA XREF: sub_401700+C8↑w
.bss:00421000                                         ; sub_401700+46A↑w ...
.bss:00421004                 align 10h
.bss:00421010 ; int dword_421010
.bss:00421010 dword_421010    dd ?                    ; DATA XREF: sub_401700+60C↑r
.bss:00421010                                         ; sub_402170+51↑r ...
.bss:00421014                 align 10h
.bss:00421020 ; char *dword_421020
.bss:00421020 dword_421020    dd ?                    ; DATA XREF: sub_401700+127↑w
.bss:00421020                                         ; sub_401700+313↑w ...
.bss:00421024                 align 10h
.bss:00421030 ; int dword_421030
.bss:00421030 dword_421030    dd ?                    ; DATA XREF: sub_401700+5FE↑r
.bss:00421030                                         ; sub_402170+4B↑r ...
.bss:00421034                 align 10h
.bss:00421040 byte_421040     db ?                    ; DATA XREF: sub_401700+12C↑w
.bss:00421040                                         ; sub_401700+453↑w ...
.bss:00421041                 align 10h
.bss:00421050 byte_421050     db ?                    ; DATA XREF: sub_401700+133↑w
.bss:00421050                                         ; sub_401700+2E7↑w ...
.bss:00421051                 align 10h
.bss:00421060 ; char *dword_421060
.bss:00421060 dword_421060    dd ?                    ; DATA XREF: sub_403910+101F↑r
.bss:00421060                                         ; sub_403910+11A8↑r ...
.bss:00421064                 align 10h
.bss:00421070 ; char *dword_421070
.bss:00421070 dword_421070    dd ?                    ; DATA XREF: sub_403910+1009↑r
.bss:00421070                                         ; sub_403910+1192↑r ...
.bss:00421074                 align 10h
.bss:00421080 dword_421080    dd ?                    ; DATA XREF: sub_4065C0+2F↑r
.bss:00421080                                         ; sub_406630+64↑r ...
.bss:00421084                 align 10h
.bss:00421090 dword_421090    dd ?                    ; DATA XREF: sub_407CB0+49↑r
.bss:00421090                                         ; sub_407CB0+6C↑r ...
.bss:00421094                 align 10h
.bss:004210A0 dword_4210A0    dd ?                    ; DATA XREF: sub_407CB0:loc_407D07↑r
.bss:004210A0                                         ; sub_407CB0+99↑r ...
.bss:004210A4                 align 10h
.bss:004210B0 dword_4210B0    dd ?                    ; DATA XREF: sub_409150+9↑o
.bss:004210B0                                         ; sub_409150+17↑w ...
.bss:004210B4 dword_4210B4    dd ?                    ; DATA XREF: sub_409150+21↑w
.bss:004210B4                                         ; .text:00409209↑w
.bss:004210B8 dword_4210B8    dd ?                    ; DATA XREF: sub_409150+77↑r
.bss:004210B8                                         ; .text:00409257↑r
.bss:004210BC dword_4210BC    dd ?                    ; DATA XREF: sub_409150+6B↑r
.bss:004210BC                                         ; .text:0040924B↑r
.bss:004210C0                 db    ? ;
.bss:004210C1                 db    ? ;
.bss:004210C2                 db    ? ;
.bss:004210C3                 db    ? ;
.bss:004210C4                 db    ? ;
.bss:004210C5                 db    ? ;
.bss:004210C6                 db    ? ;
.bss:004210C7                 db    ? ;
.bss:004210C8                 db    ? ;
.bss:004210C9                 db    ? ;
.bss:004210CA                 db    ? ;
.bss:004210CB                 db    ? ;
.bss:004210CC                 db    ? ;
.bss:004210CD                 db    ? ;
.bss:004210CE                 db    ? ;
.bss:004210CF                 db    ? ;
.bss:004210D0                 db    ? ;
.bss:004210D1                 db    ? ;
.bss:004210D2                 db    ? ;
.bss:004210D3                 db    ? ;
.bss:004210D4                 db    ? ;
.bss:004210D5                 db    ? ;
.bss:004210D6                 db    ? ;
.bss:004210D7                 db    ? ;
.bss:004210D8                 db    ? ;
.bss:004210D9                 db    ? ;
.bss:004210DA                 db    ? ;
.bss:004210DB                 db    ? ;
.bss:004210DC                 db    ? ;
.bss:004210DD                 db    ? ;
.bss:004210DE                 db    ? ;
.bss:004210DF                 db    ? ;
.bss:004210E0 ; char *dword_4210E0
.bss:004210E0 dword_4210E0    dd ?                    ; DATA XREF: .text:0040ABF4↑w
.bss:004210E0                                         ; sub_40AC20+58↑r
.bss:004210E4                 align 10h
.bss:004210F0 unk_4210F0      db    ? ;               ; DATA XREF: sub_40D8C0+100↑o
.bss:004210F0                                         ; .data:off_420078↑o
.bss:004210F1                 db    ? ;
.bss:004210F2                 db    ? ;
.bss:004210F3                 db    ? ;
.bss:004210F4                 db    ? ;
.bss:004210F5                 db    ? ;
.bss:004210F6                 db    ? ;
.bss:004210F7                 db    ? ;
.bss:004210F8                 db    ? ;
.bss:004210F9                 db    ? ;
.bss:004210FA                 db    ? ;
.bss:004210FB                 db    ? ;
.bss:004210FC                 db    ? ;
.bss:004210FD                 db    ? ;
.bss:004210FE                 db    ? ;
.bss:004210FF                 db    ? ;
.bss:00421100                 db    ? ;
.bss:00421101                 db    ? ;
.bss:00421102                 db    ? ;
.bss:00421103                 db    ? ;
.bss:00421104                 db    ? ;
.bss:00421105                 db    ? ;
.bss:00421106                 db    ? ;
.bss:00421107                 db    ? ;
.bss:00421108                 db    ? ;
.bss:00421109                 db    ? ;
.bss:0042110A                 db    ? ;
.bss:0042110B                 db    ? ;
.bss:0042110C                 db    ? ;
.bss:0042110D                 db    ? ;
.bss:0042110E                 db    ? ;
.bss:0042110F                 db    ? ;
.bss:00421110                 db    ? ;
.bss:00421111                 db    ? ;
.bss:00421112                 db    ? ;
.bss:00421113                 db    ? ;
.bss:00421114                 db    ? ;
.bss:00421115                 db    ? ;
.bss:00421116                 db    ? ;
.bss:00421117                 db    ? ;
.bss:00421118                 db    ? ;
.bss:00421119                 db    ? ;
.bss:0042111A                 db    ? ;
.bss:0042111B                 db    ? ;
.bss:0042111C                 db    ? ;
.bss:0042111D                 db    ? ;
.bss:0042111E                 db    ? ;
.bss:0042111F                 db    ? ;
.bss:00421120                 db    ? ;
.bss:00421121                 db    ? ;
.bss:00421122                 db    ? ;
.bss:00421123                 db    ? ;
.bss:00421124                 db    ? ;
.bss:00421125                 db    ? ;
.bss:00421126                 db    ? ;
.bss:00421127                 db    ? ;
.bss:00421128                 db    ? ;
.bss:00421129                 db    ? ;
.bss:0042112A                 db    ? ;
.bss:0042112B                 db    ? ;
.bss:0042112C                 db    ? ;
.bss:0042112D                 db    ? ;
.bss:0042112E                 db    ? ;
.bss:0042112F                 db    ? ;
.bss:00421130                 db    ? ;
.bss:00421131                 db    ? ;
.bss:00421132                 db    ? ;
.bss:00421133                 db    ? ;
.bss:00421134                 db    ? ;
.bss:00421135                 db    ? ;
.bss:00421136                 db    ? ;
.bss:00421137                 db    ? ;
.bss:00421138                 db    ? ;
.bss:00421139                 db    ? ;
.bss:0042113A                 db    ? ;
.bss:0042113B                 db    ? ;
.bss:0042113C                 db    ? ;
.bss:0042113D                 db    ? ;
.bss:0042113E                 db    ? ;
.bss:0042113F                 db    ? ;
.bss:00421140                 db    ? ;
.bss:00421141                 db    ? ;
.bss:00421142                 db    ? ;
.bss:00421143                 db    ? ;
.bss:00421144                 db    ? ;
.bss:00421145                 db    ? ;
.bss:00421146                 db    ? ;
.bss:00421147                 db    ? ;
.bss:00421148                 db    ? ;
.bss:00421149                 db    ? ;
.bss:0042114A                 db    ? ;
.bss:0042114B                 db    ? ;
.bss:0042114C                 db    ? ;
.bss:0042114D                 db    ? ;
.bss:0042114E                 db    ? ;
.bss:0042114F                 db    ? ;
.bss:00421150                 db    ? ;
.bss:00421151                 db    ? ;
.bss:00421152                 db    ? ;
.bss:00421153                 db    ? ;
.bss:00421154                 db    ? ;
.bss:00421155                 db    ? ;
.bss:00421156                 db    ? ;
.bss:00421157                 db    ? ;
.bss:00421158                 db    ? ;
.bss:00421159                 db    ? ;
.bss:0042115A                 db    ? ;
.bss:0042115B                 db    ? ;
.bss:0042115C                 db    ? ;
.bss:0042115D                 db    ? ;
.bss:0042115E                 db    ? ;
.bss:0042115F                 db    ? ;
.bss:00421160                 db    ? ;
.bss:00421161                 db    ? ;
.bss:00421162                 db    ? ;
.bss:00421163                 db    ? ;
.bss:00421164                 db    ? ;
.bss:00421165                 db    ? ;
.bss:00421166                 db    ? ;
.bss:00421167                 db    ? ;
.bss:00421168                 db    ? ;
.bss:00421169                 db    ? ;
.bss:0042116A                 db    ? ;
.bss:0042116B                 db    ? ;
.bss:0042116C                 db    ? ;
.bss:0042116D                 db    ? ;
.bss:0042116E                 db    ? ;
.bss:0042116F                 db    ? ;
.bss:00421170                 db    ? ;
.bss:00421171                 db    ? ;
.bss:00421172                 db    ? ;
.bss:00421173                 db    ? ;
.bss:00421174                 db    ? ;
.bss:00421175                 db    ? ;
.bss:00421176                 db    ? ;
.bss:00421177                 db    ? ;
.bss:00421178                 db    ? ;
.bss:00421179                 db    ? ;
.bss:0042117A                 db    ? ;
.bss:0042117B                 db    ? ;
.bss:0042117C                 db    ? ;
.bss:0042117D                 db    ? ;
.bss:0042117E                 db    ? ;
.bss:0042117F                 db    ? ;
.bss:00421180                 db    ? ;
.bss:00421181                 db    ? ;
.bss:00421182                 db    ? ;
.bss:00421183                 db    ? ;
.bss:00421184                 db    ? ;
.bss:00421185                 db    ? ;
.bss:00421186                 db    ? ;
.bss:00421187                 db    ? ;
.bss:00421188                 db    ? ;
.bss:00421189                 db    ? ;
.bss:0042118A                 db    ? ;
.bss:0042118B                 db    ? ;
.bss:0042118C                 db    ? ;
.bss:0042118D                 db    ? ;
.bss:0042118E                 db    ? ;
.bss:0042118F                 db    ? ;
.bss:00421190                 db    ? ;
.bss:00421191                 db    ? ;
.bss:00421192                 db    ? ;
.bss:00421193                 db    ? ;
.bss:00421194                 db    ? ;
.bss:00421195                 db    ? ;
.bss:00421196                 db    ? ;
.bss:00421197                 db    ? ;
.bss:00421198                 db    ? ;
.bss:00421199                 db    ? ;
.bss:0042119A                 db    ? ;
.bss:0042119B                 db    ? ;
.bss:0042119C                 db    ? ;
.bss:0042119D                 db    ? ;
.bss:0042119E                 db    ? ;
.bss:0042119F                 db    ? ;
.bss:004211A0                 db    ? ;
.bss:004211A1                 db    ? ;
.bss:004211A2                 db    ? ;
.bss:004211A3                 db    ? ;
.bss:004211A4                 db    ? ;
.bss:004211A5                 db    ? ;
.bss:004211A6                 db    ? ;
.bss:004211A7                 db    ? ;
.bss:004211A8                 db    ? ;
.bss:004211A9                 db    ? ;
.bss:004211AA                 db    ? ;
.bss:004211AB                 db    ? ;
.bss:004211AC                 db    ? ;
.bss:004211AD                 db    ? ;
.bss:004211AE                 db    ? ;
.bss:004211AF                 db    ? ;
.bss:004211B0                 db    ? ;
.bss:004211B1                 db    ? ;
.bss:004211B2                 db    ? ;
.bss:004211B3                 db    ? ;
.bss:004211B4                 db    ? ;
.bss:004211B5                 db    ? ;
.bss:004211B6                 db    ? ;
.bss:004211B7                 db    ? ;
.bss:004211B8                 db    ? ;
.bss:004211B9                 db    ? ;
.bss:004211BA                 db    ? ;
.bss:004211BB                 db    ? ;
.bss:004211BC                 db    ? ;
.bss:004211BD                 db    ? ;
.bss:004211BE                 db    ? ;
.bss:004211BF                 db    ? ;
.bss:004211C0                 db    ? ;
.bss:004211C1                 db    ? ;
.bss:004211C2                 db    ? ;
.bss:004211C3                 db    ? ;
.bss:004211C4                 db    ? ;
.bss:004211C5                 db    ? ;
.bss:004211C6                 db    ? ;
.bss:004211C7                 db    ? ;
.bss:004211C8                 db    ? ;
.bss:004211C9                 db    ? ;
.bss:004211CA                 db    ? ;
.bss:004211CB                 db    ? ;
.bss:004211CC                 db    ? ;
.bss:004211CD                 db    ? ;
.bss:004211CE                 db    ? ;
.bss:004211CF                 db    ? ;
.bss:004211D0                 db    ? ;
.bss:004211D1                 db    ? ;
.bss:004211D2                 db    ? ;
.bss:004211D3                 db    ? ;
.bss:004211D4                 db    ? ;
.bss:004211D5                 db    ? ;
.bss:004211D6                 db    ? ;
.bss:004211D7                 db    ? ;
.bss:004211D8                 db    ? ;
.bss:004211D9                 db    ? ;
.bss:004211DA                 db    ? ;
.bss:004211DB                 db    ? ;
.bss:004211DC                 db    ? ;
.bss:004211DD                 db    ? ;
.bss:004211DE                 db    ? ;
.bss:004211DF                 db    ? ;
.bss:004211E0                 db    ? ;
.bss:004211E1                 db    ? ;
.bss:004211E2                 db    ? ;
.bss:004211E3                 db    ? ;
.bss:004211E4                 db    ? ;
.bss:004211E5                 db    ? ;
.bss:004211E6                 db    ? ;
.bss:004211E7                 db    ? ;
.bss:004211E8                 db    ? ;
.bss:004211E9                 db    ? ;
.bss:004211EA                 db    ? ;
.bss:004211EB                 db    ? ;
.bss:004211EC                 db    ? ;
.bss:004211ED                 db    ? ;
.bss:004211EE                 db    ? ;
.bss:004211EF                 db    ? ;
.bss:004211F0 dword_4211F0    dd ?                    ; DATA XREF: .text:loc_40D251↑o
.bss:004211F0                                         ; .text:loc_40D270↑o ...
.bss:004211F4 dword_4211F4    dd ?                    ; DATA XREF: .text:loc_40D2F0↑o
.bss:004211F4                                         ; .text:0040D778↑r ...
.bss:004211F8 dword_4211F8    dd ?                    ; DATA XREF: .text:0040D772↑r
.bss:004211F8                                         ; sub_40D820+2C↑r
.bss:004211FC dword_4211FC    dd ?                    ; DATA XREF: .text:0040D766↑r
.bss:004211FC                                         ; sub_40D820+22↑r
.bss:00421200 dword_421200    dd ?                    ; DATA XREF: .text:0040D782↑r
.bss:00421200                                         ; sub_40D820+36↑r
.bss:00421204 dword_421204    dd ?                    ; DATA XREF: .text:0040D792↑r
.bss:00421204                                         ; sub_40D820+4E↑r
.bss:00421208 dword_421208    dd ?                    ; DATA XREF: .text:0040D7AF↑r
.bss:00421208                                         ; sub_40D820+62↑r
.bss:0042120C dword_42120C    dd ?                    ; DATA XREF: .text:0040D7A5↑r
.bss:0042120C                                         ; sub_40D820+70↑r
.bss:00421210 dword_421210    dd ?                    ; DATA XREF: .text:0040D788↑r
.bss:00421210                                         ; sub_40D820+7A↑r
.bss:00421214                 align 10h
.bss:00421220 dword_421220    dd ?                    ; DATA XREF: .text:0040DAB8↑r
.bss:00421220                                         ; .text:loc_40DAEA↑w ...
.bss:00421224                 align 10h
.bss:00421230 dword_421230    dd ?                    ; DATA XREF: .text:0040DB3F↑r
.bss:00421230                                         ; .text:0040DB6D↑w ...
.bss:00421234                 align 10h
.bss:00421240 unk_421240      db    ? ;               ; DATA XREF: .text:0040DAD5↑o
.bss:00421240                                         ; .text:0040DB0C↑o ...
.bss:00421241                 db    ? ;
.bss:00421242                 db    ? ;
.bss:00421243                 db    ? ;
.bss:00421244                 db    ? ;
.bss:00421245                 db    ? ;
.bss:00421246                 db    ? ;
.bss:00421247                 db    ? ;
.bss:00421248                 db    ? ;
.bss:00421249                 db    ? ;
.bss:0042124A                 db    ? ;
.bss:0042124B                 db    ? ;
.bss:0042124C                 db    ? ;
.bss:0042124D                 db    ? ;
.bss:0042124E                 db    ? ;
.bss:0042124F                 db    ? ;
.bss:00421250                 db    ? ;
.bss:00421251                 db    ? ;
.bss:00421252                 db    ? ;
.bss:00421253                 db    ? ;
.bss:00421254                 db    ? ;
.bss:00421255                 db    ? ;
.bss:00421256                 db    ? ;
.bss:00421257                 db    ? ;
.bss:00421258                 db    ? ;
.bss:00421259                 db    ? ;
.bss:0042125A                 db    ? ;
.bss:0042125B                 db    ? ;
.bss:0042125C                 db    ? ;
.bss:0042125D                 db    ? ;
.bss:0042125E                 db    ? ;
.bss:0042125F                 db    ? ;
.bss:00421260 unk_421260      db    ? ;               ; DATA XREF: .text:0040DB58↑o
.bss:00421260                                         ; .text:0040DB8F↑o ...
.bss:00421261                 db    ? ;
.bss:00421262                 db    ? ;
.bss:00421263                 db    ? ;
.bss:00421264                 db    ? ;
.bss:00421265                 db    ? ;
.bss:00421266                 db    ? ;
.bss:00421267                 db    ? ;
.bss:00421268                 db    ? ;
.bss:00421269                 db    ? ;
.bss:0042126A                 db    ? ;
.bss:0042126B                 db    ? ;
.bss:0042126C                 db    ? ;
.bss:0042126D                 db    ? ;
.bss:0042126E                 db    ? ;
.bss:0042126F                 db    ? ;
.bss:00421270                 db    ? ;
.bss:00421271                 db    ? ;
.bss:00421272                 db    ? ;
.bss:00421273                 db    ? ;
.bss:00421274                 db    ? ;
.bss:00421275                 db    ? ;
.bss:00421276                 db    ? ;
.bss:00421277                 db    ? ;
.bss:00421278                 db    ? ;
.bss:00421279                 db    ? ;
.bss:0042127A                 db    ? ;
.bss:0042127B                 db    ? ;
.bss:0042127C                 db    ? ;
.bss:0042127D                 db    ? ;
.bss:0042127E                 db    ? ;
.bss:0042127F                 db    ? ;
.bss:00421280 dword_421280    dd ?                    ; DATA XREF: sub_4115E0+AB↑r
.bss:00421280                                         ; sub_4115E0+334B↑w
.bss:00421284                 align 10h
.bss:00421290 byte_421290     db ?                    ; DATA XREF: sub_40E6D0:loc_40F13C↑r
.bss:00421290                                         ; sub_40E6D0:loc_40F168↑r ...
.bss:00421291                 db    ? ;
.bss:00421292                 db    ? ;
.bss:00421293                 db    ? ;
.bss:00421294                 db    ? ;
.bss:00421295                 db    ? ;
.bss:00421296                 db    ? ;
.bss:00421297                 db    ? ;
.bss:00421298                 db    ? ;
.bss:00421299                 db    ? ;
.bss:0042129A                 db    ? ;
.bss:0042129B                 db    ? ;
.bss:0042129C                 db    ? ;
.bss:0042129D                 db    ? ;
.bss:0042129E                 db    ? ;
.bss:0042129F                 db    ? ;
.bss:004212A0                 db    ? ;
.bss:004212A1                 db    ? ;
.bss:004212A2                 db    ? ;
.bss:004212A3                 db    ? ;
.bss:004212A4                 db    ? ;
.bss:004212A5                 db    ? ;
.bss:004212A6                 db    ? ;
.bss:004212A7                 db    ? ;
.bss:004212A8                 db    ? ;
.bss:004212A9                 db    ? ;
.bss:004212AA                 db    ? ;
.bss:004212AB                 db    ? ;
.bss:004212AC                 db    ? ;
.bss:004212AD                 db    ? ;
.bss:004212AE                 db    ? ;
.bss:004212AF                 db    ? ;
.bss:004212B0                 db    ? ;
.bss:004212B1                 db    ? ;
.bss:004212B2                 db    ? ;
.bss:004212B3                 db    ? ;
.bss:004212B4                 db    ? ;
.bss:004212B5                 db    ? ;
.bss:004212B6                 db    ? ;
.bss:004212B7                 db    ? ;
.bss:004212B8                 db    ? ;
.bss:004212B9                 db    ? ;
.bss:004212BA                 db    ? ;
.bss:004212BB                 db    ? ;
.bss:004212BC                 db    ? ;
.bss:004212BD                 db    ? ;
.bss:004212BE                 db    ? ;
.bss:004212BF                 db    ? ;
.bss:004212C0                 db    ? ;
.bss:004212C1                 db    ? ;
.bss:004212C2                 db    ? ;
.bss:004212C3                 db    ? ;
.bss:004212C4                 db    ? ;
.bss:004212C5                 db    ? ;
.bss:004212C6                 db    ? ;
.bss:004212C7                 db    ? ;
.bss:004212C8                 db    ? ;
.bss:004212C9                 db    ? ;
.bss:004212CA                 db    ? ;
.bss:004212CB                 db    ? ;
.bss:004212CC                 db    ? ;
.bss:004212CD                 db    ? ;
.bss:004212CE                 db    ? ;
.bss:004212CF                 db    ? ;
.bss:004212D0                 db    ? ;
.bss:004212D1                 db    ? ;
.bss:004212D2                 db    ? ;
.bss:004212D3                 db    ? ;
.bss:004212D4                 db    ? ;
.bss:004212D5                 db    ? ;
.bss:004212D6                 db    ? ;
.bss:004212D7                 db    ? ;
.bss:004212D8                 db    ? ;
.bss:004212D9                 db    ? ;
.bss:004212DA                 db    ? ;
.bss:004212DB                 db    ? ;
.bss:004212DC                 db    ? ;
.bss:004212DD                 db    ? ;
.bss:004212DE                 db    ? ;
.bss:004212DF                 db    ? ;
.bss:004212E0                 db    ? ;
.bss:004212E1                 db    ? ;
.bss:004212E2                 db    ? ;
.bss:004212E3                 db    ? ;
.bss:004212E4                 db    ? ;
.bss:004212E5                 db    ? ;
.bss:004212E6                 db    ? ;
.bss:004212E7                 db    ? ;
.bss:004212E8                 db    ? ;
.bss:004212E9                 db    ? ;
.bss:004212EA                 db    ? ;
.bss:004212EB                 db    ? ;
.bss:004212EC                 db    ? ;
.bss:004212ED                 db    ? ;
.bss:004212EE                 db    ? ;
.bss:004212EF byte_4212EF     db ?                    ; DATA XREF: sub_4115E0+333F↑w
.bss:004212F0                 db    ? ;
.bss:004212F1                 db    ? ;
.bss:004212F2                 db    ? ;
.bss:004212F3                 db    ? ;
.bss:004212F4                 db    ? ;
.bss:004212F5                 db    ? ;
.bss:004212F6                 db    ? ;
.bss:004212F7                 db    ? ;
.bss:004212F8                 db    ? ;
.bss:004212F9                 db    ? ;
.bss:004212FA                 db    ? ;
.bss:004212FB                 db    ? ;
.bss:004212FC                 db    ? ;
.bss:004212FD                 db    ? ;
.bss:004212FE                 db    ? ;
.bss:004212FF                 db    ? ;
.bss:00421300                 db    ? ;
.bss:00421301                 db    ? ;
.bss:00421302                 db    ? ;
.bss:00421303                 db    ? ;
.bss:00421304                 db    ? ;
.bss:00421305                 db    ? ;
.bss:00421306                 db    ? ;
.bss:00421307                 db    ? ;
.bss:00421308                 db    ? ;
.bss:00421309                 db    ? ;
.bss:0042130A                 db    ? ;
.bss:0042130B                 db    ? ;
.bss:0042130C                 db    ? ;
.bss:0042130D                 db    ? ;
.bss:0042130E                 db    ? ;
.bss:0042130F                 db    ? ;
.bss:00421310                 db    ? ;
.bss:00421311                 db    ? ;
.bss:00421312                 db    ? ;
.bss:00421313                 db    ? ;
.bss:00421314                 db    ? ;
.bss:00421315                 db    ? ;
.bss:00421316                 db    ? ;
.bss:00421317                 db    ? ;
.bss:00421318                 db    ? ;
.bss:00421319                 db    ? ;
.bss:0042131A                 db    ? ;
.bss:0042131B                 db    ? ;
.bss:0042131C                 db    ? ;
.bss:0042131D                 db    ? ;
.bss:0042131E                 db    ? ;
.bss:0042131F                 db    ? ;
.bss:00421320                 db    ? ;
.bss:00421321                 db    ? ;
.bss:00421322                 db    ? ;
.bss:00421323                 db    ? ;
.bss:00421324                 db    ? ;
.bss:00421325                 db    ? ;
.bss:00421326                 db    ? ;
.bss:00421327                 db    ? ;
.bss:00421328                 db    ? ;
.bss:00421329                 db    ? ;
.bss:0042132A                 db    ? ;
.bss:0042132B                 db    ? ;
.bss:0042132C                 db    ? ;
.bss:0042132D                 db    ? ;
.bss:0042132E                 db    ? ;
.bss:0042132F                 db    ? ;
.bss:00421330                 db    ? ;
.bss:00421331                 db    ? ;
.bss:00421332                 db    ? ;
.bss:00421333                 db    ? ;
.bss:00421334                 db    ? ;
.bss:00421335                 db    ? ;
.bss:00421336                 db    ? ;
.bss:00421337                 db    ? ;
.bss:00421338                 db    ? ;
.bss:00421339                 db    ? ;
.bss:0042133A                 db    ? ;
.bss:0042133B                 db    ? ;
.bss:0042133C                 db    ? ;
.bss:0042133D                 db    ? ;
.bss:0042133E                 db    ? ;
.bss:0042133F                 db    ? ;
.bss:00421340                 db    ? ;
.bss:00421341                 db    ? ;
.bss:00421342                 db    ? ;
.bss:00421343                 db    ? ;
.bss:00421344                 db    ? ;
.bss:00421345                 db    ? ;
.bss:00421346                 db    ? ;
.bss:00421347                 db    ? ;
.bss:00421348                 db    ? ;
.bss:00421349                 db    ? ;
.bss:0042134A                 db    ? ;
.bss:0042134B                 db    ? ;
.bss:0042134C                 db    ? ;
.bss:0042134D                 db    ? ;
.bss:0042134E                 db    ? ;
.bss:0042134F                 db    ? ;
.bss:00421350                 db    ? ;
.bss:00421351                 db    ? ;
.bss:00421352                 db    ? ;
.bss:00421353                 db    ? ;
.bss:00421354                 db    ? ;
.bss:00421355                 db    ? ;
.bss:00421356                 db    ? ;
.bss:00421357                 db    ? ;
.bss:00421358                 db    ? ;
.bss:00421359                 db    ? ;
.bss:0042135A                 db    ? ;
.bss:0042135B                 db    ? ;
.bss:0042135C                 db    ? ;
.bss:0042135D                 db    ? ;
.bss:0042135E                 db    ? ;
.bss:0042135F                 db    ? ;
.bss:00421360                 db    ? ;
.bss:00421361                 db    ? ;
.bss:00421362                 db    ? ;
.bss:00421363                 db    ? ;
.bss:00421364                 db    ? ;
.bss:00421365                 db    ? ;
.bss:00421366                 db    ? ;
.bss:00421367                 db    ? ;
.bss:00421368                 db    ? ;
.bss:00421369                 db    ? ;
.bss:0042136A                 db    ? ;
.bss:0042136B                 db    ? ;
.bss:0042136C                 db    ? ;
.bss:0042136D                 db    ? ;
.bss:0042136E                 db    ? ;
.bss:0042136F                 db    ? ;
.bss:00421370                 db    ? ;
.bss:00421371                 db    ? ;
.bss:00421372                 db    ? ;
.bss:00421373                 db    ? ;
.bss:00421374                 db    ? ;
.bss:00421375                 db    ? ;
.bss:00421376                 db    ? ;
.bss:00421377                 db    ? ;
.bss:00421378                 db    ? ;
.bss:00421379                 db    ? ;
.bss:0042137A                 db    ? ;
.bss:0042137B                 db    ? ;
.bss:0042137C                 db    ? ;
.bss:0042137D                 db    ? ;
.bss:0042137E                 db    ? ;
.bss:0042137F                 db    ? ;
.bss:00421380                 db    ? ;
.bss:00421381                 db    ? ;
.bss:00421382                 db    ? ;
.bss:00421383                 db    ? ;
.bss:00421384                 db    ? ;
.bss:00421385                 db    ? ;
.bss:00421386                 db    ? ;
.bss:00421387                 db    ? ;
.bss:00421388                 db    ? ;
.bss:00421389                 db    ? ;
.bss:0042138A                 db    ? ;
.bss:0042138B                 db    ? ;
.bss:0042138C                 db    ? ;
.bss:0042138D                 db    ? ;
.bss:0042138E                 db    ? ;
.bss:0042138F                 db    ? ;
.bss:00421390 unk_421390      db    ? ;               ; DATA XREF: sub_40E6D0+148↑o
.bss:00421390                                         ; sub_40E6D0+153↑o ...
.bss:00421391                 db    ? ;
.bss:00421392                 db    ? ;
.bss:00421393                 db    ? ;
.bss:00421394                 db    ? ;
.bss:00421395                 db    ? ;
.bss:00421396                 db    ? ;
.bss:00421397                 db    ? ;
.bss:00421398                 db    ? ;
.bss:00421399                 db    ? ;
.bss:0042139A                 db    ? ;
.bss:0042139B                 db    ? ;
.bss:0042139C                 db    ? ;
.bss:0042139D                 db    ? ;
.bss:0042139E                 db    ? ;
.bss:0042139F                 db    ? ;
.bss:004213A0 ; char *Str1
.bss:004213A0 Str1            dd ?                    ; DATA XREF: sub_415324:loc_41535D↑w
.bss:004213A0                                         ; sub_415324:loc_415490↑r
.bss:004213A4                 align 10h
.bss:004213B0 dword_4213B0    dd ?                    ; DATA XREF: sub_415324+2D↑r
.bss:004213B0                                         ; sub_415324+3F↑w
.bss:004213B4                 align 10h
.bss:004213C0 dword_4213C0    dd ?                    ; DATA XREF: sub_4154C0:loc_41552B↑r
.bss:004213C0                                         ; sub_4154C0+F9↑w
.bss:004213C4                 align 10h
.bss:004213D0 dword_4213D0    dd ?                    ; DATA XREF: sub_4154C0+8E↑r
.bss:004213D0                                         ; sub_4154C0+103↑w
.bss:004213D4                 align 10h
.bss:004213E0 dword_4213E0    dd ?                    ; DATA XREF: sub_4154C0+5D↑r
.bss:004213E0                                         ; sub_4154C0+EE↑w
.bss:004213E4                 align 10h
.bss:004213F0 dword_4213F0    dd ?                    ; DATA XREF: sub_4160F0+100↑r
.bss:004213F0                                         ; sub_4160F0+308↑w
.bss:004213F4                 align 10h
.bss:00421400 ; char *Str
.bss:00421400 Str             dd ?                    ; DATA XREF: sub_4160F0:loc_416454↑r
.bss:00421400                                         ; sub_4160F0+3B6↑r ...
.bss:00421404                 align 10h
.bss:00421410 dword_421410    dd ?                    ; DATA XREF: sub_4186F0+1C↑r
.bss:00421410                                         ; sub_4186F0+104↑w
.bss:00421414                 align 10h
.bss:00421420 dword_421420    dd ?                    ; DATA XREF: sub_4186F0+B↑r
.bss:00421420                                         ; sub_4186F0+71↑w
.bss:00421424                 align 10h
.bss:00421430 dword_421430    dd ?                    ; DATA XREF: sub_4186F0+85↑r
.bss:00421430                                         ; sub_4186F0+B9↑w
.bss:00421434 dword_421434    dd ?                    ; DATA XREF: sub_4186F0+C4↑w
.bss:00421438 dword_421438    dd ?                    ; DATA XREF: sub_4186F0+2E↑o
.bss:00421438                                         ; sub_4186F0+CF↑w
.bss:0042143C dword_42143C    dd ?                    ; DATA XREF: sub_4186F0+DA↑w
.bss:00421440                 db    ? ;
.bss:00421441                 db    ? ;
.bss:00421442                 db    ? ;
.bss:00421443                 db    ? ;
.bss:00421444                 db    ? ;
.bss:00421445                 db    ? ;
.bss:00421446                 db    ? ;
.bss:00421447                 db    ? ;
.bss:00421448                 db    ? ;
.bss:00421449                 db    ? ;
.bss:0042144A                 db    ? ;
.bss:0042144B                 db    ? ;
.bss:0042144C                 db    ? ;
.bss:0042144D                 db    ? ;
.bss:0042144E                 db    ? ;
.bss:0042144F                 db    ? ;
.bss:00421450                 db    ? ;
.bss:00421451                 db    ? ;
.bss:00421452                 db    ? ;
.bss:00421453                 db    ? ;
.bss:00421454                 db    ? ;
.bss:00421455                 db    ? ;
.bss:00421456                 db    ? ;
.bss:00421457                 db    ? ;
.bss:00421458                 db    ? ;
.bss:00421459                 db    ? ;
.bss:0042145A                 db    ? ;
.bss:0042145B                 db    ? ;
.bss:0042145C                 db    ? ;
.bss:0042145D                 db    ? ;
.bss:0042145E                 db    ? ;
.bss:0042145F                 db    ? ;
.bss:00421460                 db    ? ;
.bss:00421461                 db    ? ;
.bss:00421462                 db    ? ;
.bss:00421463                 db    ? ;
.bss:00421464                 db    ? ;
.bss:00421465                 db    ? ;
.bss:00421466                 db    ? ;
.bss:00421467                 db    ? ;
.bss:00421468                 db    ? ;
.bss:00421469                 db    ? ;
.bss:0042146A                 db    ? ;
.bss:0042146B                 db    ? ;
.bss:0042146C                 db    ? ;
.bss:0042146D                 db    ? ;
.bss:0042146E                 db    ? ;
.bss:0042146F                 db    ? ;
.bss:00421470                 db    ? ;
.bss:00421471                 db    ? ;
.bss:00421472                 db    ? ;
.bss:00421473                 db    ? ;
.bss:00421474                 db    ? ;
.bss:00421475                 db    ? ;
.bss:00421476                 db    ? ;
.bss:00421477                 db    ? ;
.bss:00421478                 db    ? ;
.bss:00421479                 db    ? ;
.bss:0042147A                 db    ? ;
.bss:0042147B                 db    ? ;
.bss:0042147C                 db    ? ;
.bss:0042147D                 db    ? ;
.bss:0042147E                 db    ? ;
.bss:0042147F                 db    ? ;
.bss:00421480                 db    ? ;
.bss:00421481                 db    ? ;
.bss:00421482                 db    ? ;
.bss:00421483                 db    ? ;
.bss:00421484                 db    ? ;
.bss:00421485                 db    ? ;
.bss:00421486                 db    ? ;
.bss:00421487                 db    ? ;
.bss:00421488                 db    ? ;
.bss:00421489                 db    ? ;
.bss:0042148A                 db    ? ;
.bss:0042148B                 db    ? ;
.bss:0042148C                 db    ? ;
.bss:0042148D                 db    ? ;
.bss:0042148E                 db    ? ;
.bss:0042148F                 db    ? ;
.bss:00421490                 db    ? ;
.bss:00421491                 db    ? ;
.bss:00421492                 db    ? ;
.bss:00421493                 db    ? ;
.bss:00421494                 db    ? ;
.bss:00421495                 db    ? ;
.bss:00421496                 db    ? ;
.bss:00421497                 db    ? ;
.bss:00421498                 db    ? ;
.bss:00421499                 db    ? ;
.bss:0042149A                 db    ? ;
.bss:0042149B                 db    ? ;
.bss:0042149C                 db    ? ;
.bss:0042149D                 db    ? ;
.bss:0042149E                 db    ? ;
.bss:0042149F                 db    ? ;
.bss:004214A0                 db    ? ;
.bss:004214A1                 db    ? ;
.bss:004214A2                 db    ? ;
.bss:004214A3                 db    ? ;
.bss:004214A4                 db    ? ;
.bss:004214A5                 db    ? ;
.bss:004214A6                 db    ? ;
.bss:004214A7                 db    ? ;
.bss:004214A8                 db    ? ;
.bss:004214A9                 db    ? ;
.bss:004214AA                 db    ? ;
.bss:004214AB                 db    ? ;
.bss:004214AC                 db    ? ;
.bss:004214AD                 db    ? ;
.bss:004214AE                 db    ? ;
.bss:004214AF                 db    ? ;
.bss:004214B0                 db    ? ;
.bss:004214B1                 db    ? ;
.bss:004214B2                 db    ? ;
.bss:004214B3                 db    ? ;
.bss:004214B4                 db    ? ;
.bss:004214B5                 db    ? ;
.bss:004214B6                 db    ? ;
.bss:004214B7                 db    ? ;
.bss:004214B8                 db    ? ;
.bss:004214B9                 db    ? ;
.bss:004214BA                 db    ? ;
.bss:004214BB                 db    ? ;
.bss:004214BC                 db    ? ;
.bss:004214BD                 db    ? ;
.bss:004214BE                 db    ? ;
.bss:004214BF                 db    ? ;
.bss:004214C0                 db    ? ;
.bss:004214C1                 db    ? ;
.bss:004214C2                 db    ? ;
.bss:004214C3                 db    ? ;
.bss:004214C4                 db    ? ;
.bss:004214C5                 db    ? ;
.bss:004214C6                 db    ? ;
.bss:004214C7                 db    ? ;
.bss:004214C8                 db    ? ;
.bss:004214C9                 db    ? ;
.bss:004214CA                 db    ? ;
.bss:004214CB                 db    ? ;
.bss:004214CC                 db    ? ;
.bss:004214CD                 db    ? ;
.bss:004214CE                 db    ? ;
.bss:004214CF                 db    ? ;
.bss:004214D0                 db    ? ;
.bss:004214D1                 db    ? ;
.bss:004214D2                 db    ? ;
.bss:004214D3                 db    ? ;
.bss:004214D4                 db    ? ;
.bss:004214D5                 db    ? ;
.bss:004214D6                 db    ? ;
.bss:004214D7                 db    ? ;
.bss:004214D8                 db    ? ;
.bss:004214D9                 db    ? ;
.bss:004214DA                 db    ? ;
.bss:004214DB                 db    ? ;
.bss:004214DC                 db    ? ;
.bss:004214DD                 db    ? ;
.bss:004214DE                 db    ? ;
.bss:004214DF                 db    ? ;
.bss:004214E0                 db    ? ;
.bss:004214E1                 db    ? ;
.bss:004214E2                 db    ? ;
.bss:004214E3                 db    ? ;
.bss:004214E4                 db    ? ;
.bss:004214E5                 db    ? ;
.bss:004214E6                 db    ? ;
.bss:004214E7                 db    ? ;
.bss:004214E8                 db    ? ;
.bss:004214E9                 db    ? ;
.bss:004214EA                 db    ? ;
.bss:004214EB                 db    ? ;
.bss:004214EC                 db    ? ;
.bss:004214ED                 db    ? ;
.bss:004214EE                 db    ? ;
.bss:004214EF                 db    ? ;
.bss:004214F0                 db    ? ;
.bss:004214F1                 db    ? ;
.bss:004214F2                 db    ? ;
.bss:004214F3                 db    ? ;
.bss:004214F4                 db    ? ;
.bss:004214F5                 db    ? ;
.bss:004214F6                 db    ? ;
.bss:004214F7                 db    ? ;
.bss:004214F8                 db    ? ;
.bss:004214F9                 db    ? ;
.bss:004214FA                 db    ? ;
.bss:004214FB                 db    ? ;
.bss:004214FC                 db    ? ;
.bss:004214FD                 db    ? ;
.bss:004214FE                 db    ? ;
.bss:004214FF                 db    ? ;
.bss:00421500                 db    ? ;
.bss:00421501                 db    ? ;
.bss:00421502                 db    ? ;
.bss:00421503                 db    ? ;
.bss:00421504                 db    ? ;
.bss:00421505                 db    ? ;
.bss:00421506                 db    ? ;
.bss:00421507                 db    ? ;
.bss:00421508                 db    ? ;
.bss:00421509                 db    ? ;
.bss:0042150A                 db    ? ;
.bss:0042150B                 db    ? ;
.bss:0042150C                 db    ? ;
.bss:0042150D                 db    ? ;
.bss:0042150E                 db    ? ;
.bss:0042150F                 db    ? ;
.bss:00421510                 db    ? ;
.bss:00421511                 db    ? ;
.bss:00421512                 db    ? ;
.bss:00421513                 db    ? ;
.bss:00421514                 db    ? ;
.bss:00421515                 db    ? ;
.bss:00421516                 db    ? ;
.bss:00421517                 db    ? ;
.bss:00421518                 db    ? ;
.bss:00421519                 db    ? ;
.bss:0042151A                 db    ? ;
.bss:0042151B                 db    ? ;
.bss:0042151C                 db    ? ;
.bss:0042151D                 db    ? ;
.bss:0042151E                 db    ? ;
.bss:0042151F                 db    ? ;
.bss:00421520                 db    ? ;
.bss:00421521                 db    ? ;
.bss:00421522                 db    ? ;
.bss:00421523                 db    ? ;
.bss:00421524                 db    ? ;
.bss:00421525                 db    ? ;
.bss:00421526                 db    ? ;
.bss:00421527                 db    ? ;
.bss:00421528                 db    ? ;
.bss:00421529                 db    ? ;
.bss:0042152A                 db    ? ;
.bss:0042152B                 db    ? ;
.bss:0042152C                 db    ? ;
.bss:0042152D                 db    ? ;
.bss:0042152E                 db    ? ;
.bss:0042152F                 db    ? ;
.bss:00421530                 db    ? ;
.bss:00421531                 db    ? ;
.bss:00421532                 db    ? ;
.bss:00421533                 db    ? ;
.bss:00421534                 db    ? ;
.bss:00421535                 db    ? ;
.bss:00421536                 db    ? ;
.bss:00421537                 db    ? ;
.bss:00421538                 db    ? ;
.bss:00421539                 db    ? ;
.bss:0042153A                 db    ? ;
.bss:0042153B                 db    ? ;
.bss:0042153C                 db    ? ;
.bss:0042153D                 db    ? ;
.bss:0042153E                 db    ? ;
.bss:0042153F                 db    ? ;
.bss:00421540                 db    ? ;
.bss:00421541                 db    ? ;
.bss:00421542                 db    ? ;
.bss:00421543                 db    ? ;
.bss:00421544                 db    ? ;
.bss:00421545                 db    ? ;
.bss:00421546                 db    ? ;
.bss:00421547                 db    ? ;
.bss:00421548                 db    ? ;
.bss:00421549                 db    ? ;
.bss:0042154A                 db    ? ;
.bss:0042154B                 db    ? ;
.bss:0042154C                 db    ? ;
.bss:0042154D                 db    ? ;
.bss:0042154E                 db    ? ;
.bss:0042154F                 db    ? ;
.bss:00421550                 db    ? ;
.bss:00421551                 db    ? ;
.bss:00421552                 db    ? ;
.bss:00421553                 db    ? ;
.bss:00421554                 db    ? ;
.bss:00421555                 db    ? ;
.bss:00421556                 db    ? ;
.bss:00421557                 db    ? ;
.bss:00421558                 db    ? ;
.bss:00421559                 db    ? ;
.bss:0042155A                 db    ? ;
.bss:0042155B                 db    ? ;
.bss:0042155C                 db    ? ;
.bss:0042155D                 db    ? ;
.bss:0042155E                 db    ? ;
.bss:0042155F                 db    ? ;
.bss:00421560                 db    ? ;
.bss:00421561                 db    ? ;
.bss:00421562                 db    ? ;
.bss:00421563                 db    ? ;
.bss:00421564                 db    ? ;
.bss:00421565                 db    ? ;
.bss:00421566                 db    ? ;
.bss:00421567                 db    ? ;
.bss:00421568                 db    ? ;
.bss:00421569                 db    ? ;
.bss:0042156A                 db    ? ;
.bss:0042156B                 db    ? ;
.bss:0042156C                 db    ? ;
.bss:0042156D                 db    ? ;
.bss:0042156E                 db    ? ;
.bss:0042156F                 db    ? ;
.bss:00421570                 db    ? ;
.bss:00421571                 db    ? ;
.bss:00421572                 db    ? ;
.bss:00421573                 db    ? ;
.bss:00421574                 db    ? ;
.bss:00421575                 db    ? ;
.bss:00421576                 db    ? ;
.bss:00421577                 db    ? ;
.bss:00421578                 db    ? ;
.bss:00421579                 db    ? ;
.bss:0042157A                 db    ? ;
.bss:0042157B                 db    ? ;
.bss:0042157C                 db    ? ;
.bss:0042157D                 db    ? ;
.bss:0042157E                 db    ? ;
.bss:0042157F                 db    ? ;
.bss:00421580                 db    ? ;
.bss:00421581                 db    ? ;
.bss:00421582                 db    ? ;
.bss:00421583                 db    ? ;
.bss:00421584                 db    ? ;
.bss:00421585                 db    ? ;
.bss:00421586                 db    ? ;
.bss:00421587                 db    ? ;
.bss:00421588                 db    ? ;
.bss:00421589                 db    ? ;
.bss:0042158A                 db    ? ;
.bss:0042158B                 db    ? ;
.bss:0042158C                 db    ? ;
.bss:0042158D                 db    ? ;
.bss:0042158E                 db    ? ;
.bss:0042158F                 db    ? ;
.bss:00421590                 db    ? ;
.bss:00421591                 db    ? ;
.bss:00421592                 db    ? ;
.bss:00421593                 db    ? ;
.bss:00421594                 db    ? ;
.bss:00421595                 db    ? ;
.bss:00421596                 db    ? ;
.bss:00421597                 db    ? ;
.bss:00421598                 db    ? ;
.bss:00421599                 db    ? ;
.bss:0042159A                 db    ? ;
.bss:0042159B                 db    ? ;
.bss:0042159C                 db    ? ;
.bss:0042159D                 db    ? ;
.bss:0042159E                 db    ? ;
.bss:0042159F                 db    ? ;
.bss:004215A0                 db    ? ;
.bss:004215A1                 db    ? ;
.bss:004215A2                 db    ? ;
.bss:004215A3                 db    ? ;
.bss:004215A4                 db    ? ;
.bss:004215A5                 db    ? ;
.bss:004215A6                 db    ? ;
.bss:004215A7                 db    ? ;
.bss:004215A8                 db    ? ;
.bss:004215A9                 db    ? ;
.bss:004215AA                 db    ? ;
.bss:004215AB                 db    ? ;
.bss:004215AC                 db    ? ;
.bss:004215AD                 db    ? ;
.bss:004215AE                 db    ? ;
.bss:004215AF                 db    ? ;
.bss:004215B0                 db    ? ;
.bss:004215B1                 db    ? ;
.bss:004215B2                 db    ? ;
.bss:004215B3                 db    ? ;
.bss:004215B4                 db    ? ;
.bss:004215B5                 db    ? ;
.bss:004215B6                 db    ? ;
.bss:004215B7                 db    ? ;
.bss:004215B8                 db    ? ;
.bss:004215B9                 db    ? ;
.bss:004215BA                 db    ? ;
.bss:004215BB                 db    ? ;
.bss:004215BC                 db    ? ;
.bss:004215BD                 db    ? ;
.bss:004215BE                 db    ? ;
.bss:004215BF                 db    ? ;
.bss:004215C0                 db    ? ;
.bss:004215C1                 db    ? ;
.bss:004215C2                 db    ? ;
.bss:004215C3                 db    ? ;
.bss:004215C4                 db    ? ;
.bss:004215C5                 db    ? ;
.bss:004215C6                 db    ? ;
.bss:004215C7                 db    ? ;
.bss:004215C8                 db    ? ;
.bss:004215C9                 db    ? ;
.bss:004215CA                 db    ? ;
.bss:004215CB                 db    ? ;
.bss:004215CC                 db    ? ;
.bss:004215CD                 db    ? ;
.bss:004215CE                 db    ? ;
.bss:004215CF                 db    ? ;
.bss:004215D0                 db    ? ;
.bss:004215D1                 db    ? ;
.bss:004215D2                 db    ? ;
.bss:004215D3                 db    ? ;
.bss:004215D4                 db    ? ;
.bss:004215D5                 db    ? ;
.bss:004215D6                 db    ? ;
.bss:004215D7                 db    ? ;
.bss:004215D8                 db    ? ;
.bss:004215D9                 db    ? ;
.bss:004215DA                 db    ? ;
.bss:004215DB                 db    ? ;
.bss:004215DC                 db    ? ;
.bss:004215DD                 db    ? ;
.bss:004215DE                 db    ? ;
.bss:004215DF                 db    ? ;
.bss:004215E0                 db    ? ;
.bss:004215E1                 db    ? ;
.bss:004215E2                 db    ? ;
.bss:004215E3                 db    ? ;
.bss:004215E4                 db    ? ;
.bss:004215E5                 db    ? ;
.bss:004215E6                 db    ? ;
.bss:004215E7                 db    ? ;
.bss:004215E8                 db    ? ;
.bss:004215E9                 db    ? ;
.bss:004215EA                 db    ? ;
.bss:004215EB                 db    ? ;
.bss:004215EC                 db    ? ;
.bss:004215ED                 db    ? ;
.bss:004215EE                 db    ? ;
.bss:004215EF                 db    ? ;
.bss:004215F0                 db    ? ;
.bss:004215F1                 db    ? ;
.bss:004215F2                 db    ? ;
.bss:004215F3                 db    ? ;
.bss:004215F4                 db    ? ;
.bss:004215F5                 db    ? ;
.bss:004215F6                 db    ? ;
.bss:004215F7                 db    ? ;
.bss:004215F8                 db    ? ;
.bss:004215F9                 db    ? ;
.bss:004215FA                 db    ? ;
.bss:004215FB                 db    ? ;
.bss:004215FC                 db    ? ;
.bss:004215FD                 db    ? ;
.bss:004215FE                 db    ? ;
.bss:004215FF                 db    ? ;
.bss:00421600                 db    ? ;
.bss:00421601                 db    ? ;
.bss:00421602                 db    ? ;
.bss:00421603                 db    ? ;
.bss:00421604                 db    ? ;
.bss:00421605                 db    ? ;
.bss:00421606                 db    ? ;
.bss:00421607                 db    ? ;
.bss:00421608                 db    ? ;
.bss:00421609                 db    ? ;
.bss:0042160A                 db    ? ;
.bss:0042160B                 db    ? ;
.bss:0042160C                 db    ? ;
.bss:0042160D                 db    ? ;
.bss:0042160E                 db    ? ;
.bss:0042160F                 db    ? ;
.bss:00421610                 db    ? ;
.bss:00421611                 db    ? ;
.bss:00421612                 db    ? ;
.bss:00421613                 db    ? ;
.bss:00421614                 db    ? ;
.bss:00421615                 db    ? ;
.bss:00421616                 db    ? ;
.bss:00421617                 db    ? ;
.bss:00421618                 db    ? ;
.bss:00421619                 db    ? ;
.bss:0042161A                 db    ? ;
.bss:0042161B                 db    ? ;
.bss:0042161C                 db    ? ;
.bss:0042161D                 db    ? ;
.bss:0042161E                 db    ? ;
.bss:0042161F                 db    ? ;
.bss:00421620                 db    ? ;
.bss:00421621                 db    ? ;
.bss:00421622                 db    ? ;
.bss:00421623                 db    ? ;
.bss:00421624                 db    ? ;
.bss:00421625                 db    ? ;
.bss:00421626                 db    ? ;
.bss:00421627                 db    ? ;
.bss:00421628                 db    ? ;
.bss:00421629                 db    ? ;
.bss:0042162A                 db    ? ;
.bss:0042162B                 db    ? ;
.bss:0042162C                 db    ? ;
.bss:0042162D                 db    ? ;
.bss:0042162E                 db    ? ;
.bss:0042162F                 db    ? ;
.bss:00421630 unk_421630      db    ? ;               ; DATA XREF: sub_419810+22↑o
.bss:00421631                 db    ? ;
.bss:00421632                 db    ? ;
.bss:00421633                 db    ? ;
.bss:00421634                 db    ? ;
.bss:00421635                 db    ? ;
.bss:00421636                 db    ? ;
.bss:00421637                 db    ? ;
.bss:00421638                 db    ? ;
.bss:00421639                 db    ? ;
.bss:0042163A                 db    ? ;
.bss:0042163B                 db    ? ;
.bss:0042163C                 db    ? ;
.bss:0042163D                 db    ? ;
.bss:0042163E                 db    ? ;
.bss:0042163F                 db    ? ;
.bss:00421640                 db    ? ;
.bss:00421641                 db    ? ;
.bss:00421642                 db    ? ;
.bss:00421643                 db    ? ;
.bss:00421644                 db    ? ;
.bss:00421645                 db    ? ;
.bss:00421646                 db    ? ;
.bss:00421647                 db    ? ;
.bss:00421648                 db    ? ;
.bss:00421649                 db    ? ;
.bss:0042164A                 db    ? ;
.bss:0042164B                 db    ? ;
.bss:0042164C                 db    ? ;
.bss:0042164D                 db    ? ;
.bss:0042164E                 db    ? ;
.bss:0042164F                 db    ? ;
.bss:00421650 ; char byte_421650[1024]
.bss:00421650 byte_421650     db 400h dup(?)          ; DATA XREF: sub_419810+1A↑o
.bss:00421A50 dword_421A50    dd ?                    ; DATA XREF: sub_419A20+7↑r
.bss:00421A50                                         ; sub_419A20+2B↑w ...
.bss:00421A54                 align 10h
.bss:00421A60 ; struct _SYSTEM_INFO SystemInfo
.bss:00421A60 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_419A20+21↑o
.bss:00421A60                                         ; sub_419A20+33↑o
.bss:00421A84                 align 10h
.bss:00421A90 dword_421A90    dd ?                    ; DATA XREF: sub_4154C0+3↑r
.bss:00421A90                                         ; .text:loc_419DF2↑w ...
.bss:00421A94                 align 10h
.bss:00421AA0 dword_421AA0    dd ?                    ; DATA XREF: sub_41AB50+8↑r
.bss:00421AA0                                         ; sub_41AC60:loc_41ACE2↑w ...
.bss:00421AA4                 align 10h
.bss:00421AB0 ; struct _OSVERSIONINFOA VersionInformation
.bss:00421AB0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_41AC60:loc_41AC80↑o
.bss:00421AB0                                         ; sub_41AC60+2C↑w ...
.bss:00421B44 word_421B44     dw ?                    ; DATA XREF: sub_41AC60:loc_41AD13↑r
.bss:00421B46                 align 4
.bss:00421B48 word_421B48     dw ?                    ; DATA XREF: .text:loc_41A6D6↑r
.bss:00421B48                                         ; .text:0041A704↑r ...
.bss:00421B4A byte_421B4A     db ?                    ; DATA XREF: .text:0041A695↑r
.bss:00421B4B                 align 10h
.bss:00421B50 dword_421B50    dd ?                    ; DATA XREF: sub_41AC60+6↑r
.bss:00421B50                                         ; sub_41AC60+75↑w
.bss:00421B54                 align 10h
.bss:00421B60 ; CHAR byte_421B60[288]
.bss:00421B60 byte_421B60     db 120h dup(?)          ; DATA XREF: sub_41C990+17↑o
.bss:00421B60                                         ; sub_41C990+26↑o
.bss:00421C80 dword_421C80    dd ?                    ; DATA XREF: sub_401700+46↑w
.bss:00421C80                                         ; sub_403150+1F↑r ...
.bss:00421C84                 align 20h
.bss:00421CA0 ; char dword_421CA0[]
.bss:00421CA0 dword_421CA0    dd ?                    ; DATA XREF: sub_401700+26B↑r
.bss:00421CA0                                         ; sub_401700+298↑r ...
.bss:00421CA4                 align 10h
.bss:00421CB0 dword_421CB0    dd ?                    ; DATA XREF: .text:00411330↑r
.bss:00421CB0                                         ; .text:00411339↑w ...
.bss:00421CB4                 align 10h
.bss:00421CC0 dword_421CC0    dd ?                    ; CODE XREF: sub_415324+63↑p
.bss:00421CC0                                         ; DATA XREF: sub_415220+1E↑r ...
.bss:00421CC4                 align 10h
.bss:00421CD0 dword_421CD0    dd ?                    ; DATA XREF: sub_415220+4E↑w
.bss:00421CD0                                         ; sub_415324+AB↑w
.bss:00421CD4                 align 40h
.bss:00421D00 dword_421D00    dd ?                    ; DATA XREF: sub_415324+13↑r
.bss:00421D04                 align 400h
.bss:00421D04 _bss            ends
.bss:00421D04
.idata:00422000 ; Section 4. (virtual address 00022000)
.idata:00422000 ; Virtual size                  : 000010B8 (   4280.)
.idata:00422000 ; Section size in file          : 00001200 (   4608.)
.idata:00422000 ; Offset to raw data for section: 0001EE00
.idata:00422000 ; Flags C0000040: Data Readable Writable
.idata:00422000 ; Alignment     : default
.idata:00422000 ; ===========================================================================
.idata:00422000
.idata:00422000 ; Segment type: Externs
.idata:00422000 ; _idata
.idata:00422000
.idata:00422001
.idata:00422320 ;
.idata:00422320 ; Imports from libintl3.dll
.idata:00422320 ;
.idata:00422320                 extrn libintl_bindtextdomain:dword
.idata:00422320                                         ; CODE XREF: sub_401700+7D↑p
.idata:00422320                                         ; DATA XREF: sub_401700+7D↑r ...
.idata:00422324                 extrn libintl_gettext:dword
.idata:00422324                                         ; CODE XREF: sub_401700+28A↑p
.idata:00422324                                         ; sub_401700+368↑p ...
.idata:00422328                 extrn libintl_textdomain:dword
.idata:00422328                                         ; CODE XREF: sub_401700+8A↑p
.idata:00422328                                         ; DATA XREF: sub_401700+8A↑r ...
.idata:0042232C
.idata:00422334 ;
.idata:00422334 ; Imports from ADVAPI32.DLL
.idata:00422334 ;
.idata:00422334 ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:00422334                 extrn __imp_GetUserNameA:dword
.idata:00422334                                         ; DATA XREF: GetUserNameA↑r
.idata:00422338 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00422338                 extrn __imp_RegCloseKey:dword
.idata:00422338                                         ; DATA XREF: RegCloseKey↑r
.idata:0042233C ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0042233C                 extrn __imp_RegOpenKeyExA:dword
.idata:0042233C                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:00422340 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00422340                 extrn __imp_RegQueryValueExA:dword
.idata:00422340                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00422344
.idata:0042234C ;
.idata:0042234C ; Imports from KERNEL32.dll
.idata:0042234C ;
.idata:0042234C ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0042234C                 extrn __imp_AreFileApisANSI:dword
.idata:0042234C                                         ; DATA XREF: AreFileApisANSI↑r
.idata:00422350 ; BOOL (__stdcall *BackupWrite)(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.idata:00422350                 extrn __imp_BackupWrite:dword
.idata:00422350                                         ; DATA XREF: BackupWrite↑r
.idata:00422354 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00422354                 extrn __imp_CloseHandle:dword
.idata:00422354                                         ; DATA XREF: CloseHandle↑r
.idata:00422358 ; BOOL (__stdcall *CopyFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.idata:00422358                 extrn __imp_CopyFileA:dword
.idata:00422358                                         ; DATA XREF: CopyFileA↑r
.idata:0042235C ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0042235C                 extrn __imp_CreateDirectoryA:dword
.idata:0042235C                                         ; DATA XREF: CreateDirectoryA↑r
.idata:00422360 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:00422360                 extrn __imp_CreateFileA:dword
.idata:00422360                                         ; DATA XREF: CreateFileA↑r
.idata:00422364 ; HANDLE (__stdcall *CreateNamedPipeA)(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00422364                 extrn __imp_CreateNamedPipeA:dword
.idata:00422364                                         ; DATA XREF: CreateNamedPipeA↑r
.idata:00422368 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:00422368                 extrn __imp_DeleteFileA:dword
.idata:00422368                                         ; DATA XREF: DeleteFileA↑r
.idata:0042236C ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0042236C                 extrn __imp_DeviceIoControl:dword
.idata:0042236C                                         ; DATA XREF: DeviceIoControl↑r
.idata:00422370 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00422370                 extrn __imp_ExitProcess:dword
.idata:00422370                                         ; DATA XREF: ExitProcess↑r
.idata:00422374 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00422374                 extrn __imp_FindClose:dword
.idata:00422374                                         ; DATA XREF: FindClose↑r
.idata:00422378 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00422378                 extrn __imp_FindFirstFileA:dword
.idata:00422378                                         ; DATA XREF: FindFirstFileA↑r
.idata:0042237C ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0042237C                 extrn __imp_FindNextFileA:dword
.idata:0042237C                                         ; DATA XREF: FindNextFileA↑r
.idata:00422380 ; DWORD (__stdcall *FormatMessageA)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:00422380                 extrn __imp_FormatMessageA:dword
.idata:00422380                                         ; DATA XREF: FormatMessageA↑r
.idata:00422384 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00422384                 extrn __imp_FreeLibrary:dword
.idata:00422384                                         ; DATA XREF: FreeLibrary↑r
.idata:00422388 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00422388                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00422388                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0042238C ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0042238C                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0042238C                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00422390 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00422390                 extrn __imp_GetDriveTypeA:dword
.idata:00422390                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00422394 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00422394                 extrn __imp_GetFileAttributesA:dword
.idata:00422394                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00422398 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00422398                 extrn __imp_GetFileInformationByHandle:dword
.idata:00422398                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0042239C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0042239C                 extrn __imp_GetFileSize:dword
.idata:0042239C                                         ; DATA XREF: GetFileSize↑r
.idata:004223A0 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:004223A0                 extrn __imp_GetFileType:dword
.idata:004223A0                                         ; DATA XREF: GetFileType↑r
.idata:004223A4 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:004223A4                 extrn __imp_GetFullPathNameA:dword
.idata:004223A4                                         ; DATA XREF: GetFullPathNameA↑r
.idata:004223A8 ; DWORD (__stdcall *GetLastError)()
.idata:004223A8                 extrn __imp_GetLastError:dword
.idata:004223A8                                         ; DATA XREF: GetLastError↑r
.idata:004223AC ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:004223AC                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:004223AC                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:004223B0 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:004223B0                 extrn __imp_GetModuleFileNameA:dword
.idata:004223B0                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:004223B4 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:004223B4                 extrn __imp_GetModuleHandleA:dword
.idata:004223B4                                         ; DATA XREF: GetModuleHandleA↑r
.idata:004223B8 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:004223B8                 extrn __imp_GetProcAddress:dword
.idata:004223B8                                         ; DATA XREF: GetProcAddress↑r
.idata:004223BC ; HANDLE (__stdcall *GetProcessHeap)()
.idata:004223BC                 extrn __imp_GetProcessHeap:dword
.idata:004223BC                                         ; DATA XREF: GetProcessHeap↑r
.idata:004223C0 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:004223C0                 extrn __imp_GetShortPathNameA:dword
.idata:004223C0                                         ; DATA XREF: GetShortPathNameA↑r
.idata:004223C4 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:004223C4                 extrn __imp_GetSystemInfo:dword
.idata:004223C4                                         ; DATA XREF: GetSystemInfo↑r
.idata:004223C8 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:004223C8                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:004223C8                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:004223CC ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:004223CC                 extrn __imp_GetTimeZoneInformation:dword
.idata:004223CC                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:004223D0 ; DWORD (__stdcall *GetVersion)()
.idata:004223D0                 extrn __imp_GetVersion:dword
.idata:004223D0                                         ; DATA XREF: GetVersion↑r
.idata:004223D4 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:004223D4                 extrn __imp_GetVersionExA:dword
.idata:004223D4                                         ; DATA XREF: GetVersionExA↑r
.idata:004223D8 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:004223D8                 extrn __imp_GetVolumeInformationA:dword
.idata:004223D8                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:004223DC ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:004223DC                 extrn __imp_HeapAlloc:dword
.idata:004223DC                                         ; DATA XREF: HeapAlloc↑r
.idata:004223E0 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:004223E0                 extrn __imp_HeapFree:dword
.idata:004223E0                                         ; DATA XREF: HeapFree↑r
.idata:004223E4 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:004223E4                 extrn __imp_LoadLibraryA:dword
.idata:004223E4                                         ; DATA XREF: LoadLibraryA↑r
.idata:004223E8 ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:004223E8                 extrn __imp_LocalFree:dword
.idata:004223E8                                         ; DATA XREF: LocalFree↑r
.idata:004223EC ; BOOL (__stdcall *MoveFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.idata:004223EC                 extrn __imp_MoveFileA:dword
.idata:004223EC                                         ; DATA XREF: MoveFileA↑r
.idata:004223F0 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004223F0                 extrn __imp_MultiByteToWideChar:dword
.idata:004223F0                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004223F4 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004223F4                 extrn __imp_PeekNamedPipe:dword
.idata:004223F4                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004223F8 ; BOOL (__stdcall *SetCurrentDirectoryA)(LPCSTR lpPathName)
.idata:004223F8                 extrn __imp_SetCurrentDirectoryA:dword
.idata:004223F8                                         ; DATA XREF: SetCurrentDirectoryA↑r
.idata:004223FC ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:004223FC                 extrn __imp_SetEndOfFile:dword
.idata:004223FC                                         ; DATA XREF: SetEndOfFile↑r
.idata:00422400 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00422400                 extrn __imp_SetErrorMode:dword
.idata:00422400                                         ; DATA XREF: SetErrorMode↑r
.idata:00422404 ; BOOL (__stdcall *SetFileAttributesA)(LPCSTR lpFileName, DWORD dwFileAttributes)
.idata:00422404                 extrn __imp_SetFileAttributesA:dword
.idata:00422404                                         ; DATA XREF: SetFileAttributesA↑r
.idata:00422408 ; BOOL (__stdcall *SetFileTime)(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.idata:00422408                 extrn __imp_SetFileTime:dword
.idata:00422408                                         ; DATA XREF: SetFileTime↑r
.idata:0042240C ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:0042240C                 extrn __imp_SetLastError:dword
.idata:0042240C                                         ; DATA XREF: SetLastError↑r
.idata:00422410 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00422410                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00422410                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00422414 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00422414                 extrn __imp_UnlockFile:dword
.idata:00422414                                         ; DATA XREF: UnlockFile↑r
.idata:00422418 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00422418                 extrn __imp_lstrcmpiA:dword
.idata:00422418                                         ; DATA XREF: lstrcmpiA↑r
.idata:0042241C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0042241C                 extrn __imp_lstrcpyA:dword
.idata:0042241C                                         ; DATA XREF: lstrcpyA↑r
.idata:00422420
.idata:00422428 ;
.idata:00422428 ; Imports from msvcrt.dll
.idata:00422428 ;
.idata:00422428 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00422428                 extrn __imp__chmod:dword
.idata:00422428                                         ; DATA XREF: _chmod↑r
.idata:0042242C ; int (__cdecl *_close)(int FileHandle)
.idata:0042242C                 extrn __imp__close:dword
.idata:0042242C                                         ; DATA XREF: _close↑r
.idata:00422430 ; intptr_t (*_execlp)(const char *FileName, const char *Arguments, ...)
.idata:00422430                 extrn __imp__execlp:dword
.idata:00422430                                         ; DATA XREF: _execlp↑r
.idata:00422434 ; int (__cdecl *_getpid)()
.idata:00422434                 extrn __imp__getpid:dword
.idata:00422434                                         ; DATA XREF: _getpid↑r
.idata:00422438 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00422438                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0042243C ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0042243C                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:00422440 ; char *(__cdecl *_strdup)(const char *String)
.idata:00422440                 extrn __imp__strdup:dword
.idata:00422440                                         ; DATA XREF: _strdup↑r
.idata:00422444 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00422444                 extrn __imp__stricmp:dword
.idata:00422444                                         ; DATA XREF: _stricmp↑r
.idata:00422448 ; int (__cdecl *_umask)(int Mode)
.idata:00422448                 extrn __imp__umask:dword
.idata:00422448                                         ; DATA XREF: _umask↑r
.idata:0042244C ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:0042244C                 extrn __imp__write:dword
.idata:0042244C                                         ; DATA XREF: _write↑r
.idata:00422450
.idata:00422458 ;
.idata:00422458 ; Imports from MSVCP60.DLL
.idata:00422458 ;
.idata:00422458 ; wint_t (__cdecl *btowc)(int Ch)
.idata:00422458                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:0042245C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0042245C                 extrn __imp_mbrtowc:dword
.idata:0042245C                                         ; DATA XREF: mbrtowc↑r
.idata:00422460 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:00422460                 extrn __imp_wctype:dword
.idata:00422460                                         ; DATA XREF: wctype↑r
.idata:00422464
.idata:0042246C ;
.idata:0042246C ; Imports from msvcrt.dll
.idata:0042246C ;
.idata:0042246C                 extrn __imp___getmainargs:dword
.idata:0042246C                                         ; DATA XREF: __getmainargs↑r
.idata:00422470 ; int _mb_cur_max
.idata:00422470                 extrn __mb_cur_max:dword
.idata:00422470                                         ; DATA XREF: sub_409A00+45↑r
.idata:00422470                                         ; sub_40AEB0+49↑r ...
.idata:00422474 ; char ***(__cdecl *__p__environ)()
.idata:00422474                 extrn __imp___p__environ:dword
.idata:00422474                                         ; DATA XREF: __p__environ↑r
.idata:00422478 ; int *(__cdecl *__p__fmode)()
.idata:00422478                 extrn __imp___p__fmode:dword
.idata:00422478                                         ; DATA XREF: __p__fmode↑r
.idata:0042247C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0042247C                 extrn __set_app_type:dword
.idata:0042247C                                         ; CODE XREF: start+D↑p
.idata:0042247C                                         ; .text:0040102D↑p
.idata:0042247C                                         ; DATA XREF: ...
.idata:00422480                 extrn __imp__assert:dword
.idata:00422480                                         ; DATA XREF: _assert↑r
.idata:00422484 ; void (__cdecl *_cexit)()
.idata:00422484                 extrn __imp__cexit:dword
.idata:00422484                                         ; DATA XREF: _cexit↑r
.idata:00422488 ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:00422488                 extrn __imp__chmod_0:dword
.idata:00422488                                         ; DATA XREF: _chmod_0↑r
.idata:0042248C ; int (__cdecl *_close_0)(int FileHandle)
.idata:0042248C                 extrn __imp__close_0:dword
.idata:0042248C                                         ; DATA XREF: _close_0↑r
.idata:00422490 ; intptr_t (__cdecl *_cwait)(int *TermStat, intptr_t ProcHandle, int Action)
.idata:00422490                 extrn __imp__cwait:dword
.idata:00422490                                         ; DATA XREF: _cwait↑r
.idata:00422494 ; int *(__cdecl *_errno)()
.idata:00422494                 extrn __imp__errno:dword
.idata:00422494                                         ; DATA XREF: _errno↑r
.idata:00422498 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00422498                 extrn __imp__fdopen:dword
.idata:00422498                                         ; DATA XREF: _fdopen↑r
.idata:0042249C ; int (__cdecl *_filbuf)(FILE *File)
.idata:0042249C                 extrn __imp__filbuf:dword
.idata:0042249C                                         ; DATA XREF: _filbuf↑r
.idata:004224A0 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004224A0                 extrn __imp__filelengthi64:dword
.idata:004224A0                                         ; DATA XREF: _filelengthi64↑r
.idata:004224A4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004224A4                 extrn __imp__flsbuf:dword
.idata:004224A4                                         ; DATA XREF: _flsbuf↑r
.idata:004224A8 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004224A8                 extrn __imp__get_osfhandle:dword
.idata:004224A8                                         ; DATA XREF: _get_osfhandle↑r
.idata:004224AC ; char *(__cdecl *_getcwd)(char *DstBuf, int SizeInBytes)
.idata:004224AC                 extrn __imp__getcwd:dword
.idata:004224AC                                         ; DATA XREF: _getcwd↑r
.idata:004224B0 ; FILE iob[]
.idata:004224B0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004224B0                                         ; sub_401080+75↑r ...
.idata:004224B4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004224B4                 extrn __imp__isctype:dword
.idata:004224B4                                         ; DATA XREF: _isctype↑r
.idata:004224B8 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:004224B8                 extrn __imp__lseeki64:dword
.idata:004224B8                                         ; DATA XREF: _lseeki64↑r
.idata:004224BC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004224BC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004224BC                                         ; DATA XREF: .text:0040106C↑r
.idata:004224C0 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:004224C0                 extrn __imp__open_0:dword
.idata:004224C0                                         ; DATA XREF: _open_0↑r
.idata:004224C4 ; int (__cdecl *_open_osfhandle)(intptr_t OSFileHandle, int Flags)
.idata:004224C4                 extrn __imp__open_osfhandle:dword
.idata:004224C4                                         ; DATA XREF: _open_osfhandle↑r
.idata:004224C8 ; const unsigned __int16 *pctype
.idata:004224C8                 extrn _pctype:dword     ; DATA XREF: sub_409A00:loc_409F20↑r
.idata:004224C8                                         ; sub_40AEB0:loc_40AF27↑r ...
.idata:004224CC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004224CC                 extrn __imp__setmode:dword
.idata:004224CC                                         ; DATA XREF: _setmode↑r
.idata:004224D0 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:004224D0                 extrn __imp__stricmp_0:dword
.idata:004224D0                                         ; DATA XREF: _stricmp_0↑r
.idata:004224D4 ; void (__cdecl __noreturn *abort)()
.idata:004224D4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004224D8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004224D8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004224D8                                         ; DATA XREF: sub_401040+C↑r
.idata:004224DC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004224DC                 extrn __imp_calloc:dword
.idata:004224DC                                         ; DATA XREF: calloc↑r
.idata:004224E0 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:004224E0                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:004224E4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004224E4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004224E8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004224E8                 extrn __imp_fclose:dword
.idata:004224E8                                         ; DATA XREF: fclose↑r
.idata:004224EC ; int (__cdecl *fflush)(FILE *Stream)
.idata:004224EC                 extrn __imp_fflush:dword
.idata:004224EC                                         ; DATA XREF: fflush↑r
.idata:004224F0 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004224F0                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004224F4 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004224F4                 extrn __imp_fprintf:dword
.idata:004224F4                                         ; DATA XREF: fprintf↑r
.idata:004224F8 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004224F8                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004224FC ; void (__cdecl *free)(void *Block)
.idata:004224FC                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00422500 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00422500                 extrn __imp_getenv:dword
.idata:00422500                                         ; DATA XREF: getenv↑r
.idata:00422504 ; int (__cdecl *isalpha)(int C)
.idata:00422504                 extrn __imp_isalpha:dword
.idata:00422504                                         ; DATA XREF: isalpha↑r
.idata:00422508 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00422508                 extrn __imp_iswctype:dword
.idata:00422508                                         ; DATA XREF: iswctype↑r
.idata:0042250C ; void *(__cdecl *malloc)(size_t Size)
.idata:0042250C                 extrn __imp_malloc:dword
.idata:0042250C                                         ; DATA XREF: malloc↑r
.idata:00422510 ; size_t (__cdecl *mbstowcs)(wchar_t *Dest, const char *Source, size_t MaxCount)
.idata:00422510                 extrn __imp_mbstowcs:dword
.idata:00422510                                         ; DATA XREF: mbstowcs↑r
.idata:00422514 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:00422514                 extrn __imp_memchr:dword
.idata:00422514                                         ; DATA XREF: memchr↑r
.idata:00422518 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00422518                 extrn __imp_memcpy:dword
.idata:00422518                                         ; DATA XREF: memcpy↑r
.idata:0042251C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0042251C                 extrn __imp_memset:dword
.idata:0042251C                                         ; DATA XREF: memset↑r
.idata:00422520 ; int (*printf)(const char *const Format, ...)
.idata:00422520                 extrn __imp_printf:dword
.idata:00422520                                         ; DATA XREF: printf↑r
.idata:00422524 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00422524                 extrn __imp_realloc:dword
.idata:00422524                                         ; DATA XREF: realloc↑r
.idata:00422528 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00422528                 extrn __imp_setlocale:dword
.idata:00422528                                         ; DATA XREF: setlocale↑r
.idata:0042252C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0042252C                 extrn __imp_signal:dword
.idata:0042252C                                         ; DATA XREF: signal↑r
.idata:00422530 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00422530                 extrn __imp_sprintf:dword
.idata:00422530                                         ; DATA XREF: sprintf↑r
.idata:00422534 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00422534                 extrn __imp_sscanf:dword
.idata:00422534                                         ; DATA XREF: sscanf↑r
.idata:00422538 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00422538                 extrn __imp_strcat:dword
.idata:00422538                                         ; DATA XREF: strcat↑r
.idata:0042253C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0042253C                 extrn __imp_strchr:dword
.idata:0042253C                                         ; DATA XREF: strchr↑r
.idata:00422540 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00422540                 extrn __imp_strcmp:dword
.idata:00422540                                         ; DATA XREF: strcmp↑r
.idata:00422544 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00422544                 extrn __imp_strcpy:dword
.idata:00422544                                         ; DATA XREF: strcpy↑r
.idata:00422548 ; size_t (__cdecl *strcspn)(const char *Str, const char *Control)
.idata:00422548                 extrn __imp_strcspn:dword
.idata:00422548                                         ; DATA XREF: strcspn↑r
.idata:0042254C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0042254C                 extrn __imp_strerror:dword
.idata:0042254C                                         ; DATA XREF: strerror↑r
.idata:00422550 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00422550                 extrn __imp_strlen:dword
.idata:00422550                                         ; DATA XREF: strlen↑r
.idata:00422554 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:00422554                 extrn __imp_strncat:dword
.idata:00422554                                         ; DATA XREF: strncat↑r
.idata:00422558 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00422558                 extrn __imp_strncmp:dword
.idata:00422558                                         ; DATA XREF: strncmp↑r
.idata:0042255C ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0042255C                 extrn __imp_strncpy:dword
.idata:0042255C                                         ; DATA XREF: strncpy↑r
.idata:00422560 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00422560                 extrn __imp_strpbrk:dword
.idata:00422560                                         ; DATA XREF: strpbrk↑r
.idata:00422564 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00422564                 extrn __imp_strrchr:dword
.idata:00422564                                         ; DATA XREF: strrchr↑r
.idata:00422568 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00422568                 extrn __imp_strspn:dword
.idata:00422568                                         ; DATA XREF: strspn↑r
.idata:0042256C ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0042256C                 extrn __imp_strstr:dword
.idata:0042256C                                         ; DATA XREF: strstr↑r
.idata:00422570 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:00422570                 extrn __imp_strtoul:dword
.idata:00422570                                         ; DATA XREF: strtoul↑r
.idata:00422574 ; int (__cdecl *tolower)(int C)
.idata:00422574                 extrn __imp_tolower:dword
.idata:00422574                                         ; DATA XREF: tolower↑r
.idata:00422578 ; int (__cdecl *toupper)(int C)
.idata:00422578                 extrn __imp_toupper:dword
.idata:00422578                                         ; DATA XREF: toupper↑r
.idata:0042257C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0042257C                 extrn __imp_vfprintf:dword
.idata:0042257C                                         ; DATA XREF: vfprintf↑r
.idata:00422580
.idata:00422588 ;
.idata:00422588 ; Imports from OLE32.dll
.idata:00422588 ;
.idata:00422588 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00422588                 extrn __imp_CoCreateInstance:dword
.idata:00422588                                         ; DATA XREF: CoCreateInstance↑r
.idata:0042258C ; void (__stdcall *CoUninitialize)()
.idata:0042258C                 extrn __imp_CoUninitialize:dword
.idata:0042258C                                         ; DATA XREF: CoUninitialize↑r
.idata:00422590 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00422590                 extrn __imp_OleInitialize:dword
.idata:00422590                                         ; DATA XREF: OleInitialize↑r
.idata:00422594
.idata:00422594
.idata:00422594
.idata:00422594                 end start
