.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 38DC303686BFA71B5803CB0A0A227F6545593D77614BBAC68D04C19A2D7A9A85
.text:00401000 ; Input MD5    : 655835ED4708853C2264B67806530C94
.text:00401000 ; Input CRC32  : 1CE7F0F4
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/tty.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A272 (Wed Apr 20 18:41:54 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00003E20 (  15904.)
.text:00401000 ; Section size in file          : 00004000 (  16384.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401520+6D↓p
.text:00401040                                         ; .text:00404AF0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_404A90
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_405000
.text:004010A2                 mov     edx, dword_405060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_405004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_405080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_405080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_404A60
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_405000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_405004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401520
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_404A90
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aSilent         db 'silent',0           ; DATA XREF: .text:off_4012A0↓o
.text:00401287 aQuiet          db 'quiet',0            ; DATA XREF: .text:004012B0↓o
.text:0040128D aHelp           db 'help',0             ; DATA XREF: .text:004012C0↓o
.text:00401292 aVersion        db 'version',0          ; DATA XREF: .text:004012D0↓o
.text:0040129A                 align 10h
.text:004012A0 off_4012A0      dd offset aSilent       ; DATA XREF: sub_401520+88↓o
.text:004012A0                                         ; "silent"
.text:004012A4                 dd 2 dup(0)
.text:004012AC                 dd 73h
.text:004012B0                 dd offset aQuiet        ; "quiet"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 73h
.text:004012C0                 dd offset aHelp         ; "help"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 0FFFFFF7Eh
.text:004012D0                 dd offset aVersion      ; "version"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004012F0 ; const char Locale
.text:004012F0 Locale          db 0                    ; DATA XREF: sub_401520+1F↓o
.text:004012F1                 db 0EBh, 0Dh, 90h
.text:004012F4                 align 10h
.text:00401300 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401300                                         ; DATA XREF: sub_401520+39↓o
.text:00401323 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401520+41↓o
.text:00401323                                         ; sub_401520+4E↓o
.text:0040132D ; const char aS[]
.text:0040132D aS              db 's',0                ; DATA XREF: sub_401520+90↓o
.text:0040132F                 align 20h
.text:00401340 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401340                                         ; DATA XREF: sub_401520:loc_4015ED↓o
.text:00401340                                         ; .text:004017BF↓o
.text:00401367 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401520+11A↓o
.text:00401377 a530            db '5.3.0',0            ; DATA XREF: sub_401520+122↓o
.text:0040137D aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401520+12D↓o
.text:0040138B ; const FILE stru_40138B
.text:0040138B stru_40138B     FILE <797474h, 67617355h, 25203A65h, 4F5B2073h, 4F495450h, 2E2E5D4Eh, \
.text:0040138B                                         ; DATA XREF: sub_401520+135↓o
.text:0040138B                                         ; sub_401520:loc_40166E↓o ...
.text:0040138B                       90000A2Eh, 90909090h>
.text:004013AB                 db  90h
.text:004013AC                 db  90h
.text:004013AD                 db  90h
.text:004013AE                 db  90h
.text:004013AF                 db  90h
.text:004013B0                 db  90h
.text:004013B1                 db  90h
.text:004013B2                 db  90h
.text:004013B3                 db  90h
.text:004013B4                 db  90h
.text:004013B5                 db  90h
.text:004013B6                 db  90h
.text:004013B7                 db  90h
.text:004013B8                 db  90h
.text:004013B9                 db  90h
.text:004013BA                 db  90h
.text:004013BB                 db  90h
.text:004013BC                 db  90h
.text:004013BD                 db  90h
.text:004013BE                 db  90h
.text:004013BF                 db  90h
.text:004013C0 aPrintTheFileNa db 'Print the file name of the terminal connected to standard input.',0Ah
.text:004013C0                                         ; DATA XREF: sub_401520+16D↓o
.text:004013C0                                         ; .text:00401812↓o
.text:004013C0                 db 0Ah
.text:004013C0                 db '  -s, --silent, --quiet   print nothing, only return an exit stat'
.text:004013C0                 db 'us',0Ah,0
.text:00401447                 align 20h
.text:00401460 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401460                                         ; DATA XREF: sub_401520+18F↓o
.text:00401460                                         ; .text:00401834↓o
.text:0040148D                 align 20h
.text:004014A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004014A0                                         ; DATA XREF: sub_401520+1B1↓o
.text:004014A0                                         ; .text:00401856↓o
.text:004014D6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401520+1D3↓o
.text:004014D6                                         ; .text:00401878↓o
.text:004014D6                 db 'Report bugs to <%s>.',0Ah,0
.text:004014ED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004014ED                                         ; DATA XREF: sub_401520+1E0↓o
.text:004014ED                                         ; .text:00401885↓o
.text:00401503 aNotATty        db 'not a tty',0        ; DATA XREF: sub_401520:loc_40175B↓o
.text:0040150D aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_401520+255↓o
.text:0040151E                 align 10h
.text:00401520
.text:00401520 ; =============== S U B R O U T I N E =======================================
.text:00401520
.text:00401520 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401520
.text:00401520 sub_401520      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401520
.text:00401520 Category        = dword ptr -28h
.text:00401520 Locale          = dword ptr -24h
.text:00401520 var_20          = dword ptr -20h
.text:00401520 var_1C          = byte ptr -1Ch
.text:00401520 var_18          = byte ptr -18h
.text:00401520 var_14          = dword ptr -14h
.text:00401520 arg_0           = dword ptr  8
.text:00401520 arg_4           = dword ptr  0Ch
.text:00401520
.text:00401520                 push    ebp
.text:00401521                 xor     eax, eax
.text:00401523                 mov     ebp, esp
.text:00401525                 push    esi
.text:00401526                 push    ebx
.text:00401527                 sub     esp, 20h
.text:0040152A                 mov     ebx, [ebp+arg_4]
.text:0040152D                 and     esp, 0FFFFFFF0h
.text:00401530                 mov     esi, [ebp+arg_0]
.text:00401533                 call    __alloca
.text:00401538                 call    sub_404B30
.text:0040153D                 mov     edx, [ebx]
.text:0040153F                 mov     [esp+28h+Locale], offset Locale ; Locale
.text:00401547                 mov     [esp+28h+Category], 0 ; Category
.text:0040154E                 mov     ds:dword_4061A0, edx
.text:00401554                 call    setlocale
.text:00401559                 mov     [esp+28h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401561                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401568                 call    ds:__imp_libintl_bindtextdomain
.text:0040156E                 mov     [esp+28h+Category], offset aCoreutils ; "coreutils"
.text:00401575                 call    ds:libintl_textdomain
.text:0040157B                 mov     [esp+28h+Category], offset sub_402F90 ; void (__cdecl *)()
.text:00401582                 mov     edx, 3
.text:00401587                 mov     Code, edx
.text:0040158D                 call    sub_401040
.text:00401592                 mov     ds:byte_406000, 0
.text:00401599                 lea     esi, [esi+0]
.text:004015A0
.text:004015A0 loc_4015A0:                             ; CODE XREF: sub_401520+CB↓j
.text:004015A0                 mov     dword ptr [esp+28h+var_18], 0 ; int
.text:004015A8                 mov     dword ptr [esp+28h+var_1C], offset off_4012A0 ; int
.text:004015B0                 mov     [esp+28h+var_20], offset aS ; "s"
.text:004015B8                 mov     [esp+28h+Locale], ebx ; int
.text:004015BC                 mov     [esp+28h+Category], esi ; int
.text:004015BF                 call    sub_402E20
.text:004015C4                 cmp     eax, 0FFFFFFFFh
.text:004015C7                 jz      loc_401715
.text:004015CD                 cmp     eax, 0FFFFFF7Eh
.text:004015D2                 jz      loc_40166E
.text:004015D8                 cmp     eax, 0FFFFFF7Eh
.text:004015DD                 jle     short loc_401625
.text:004015DF                 cmp     eax, 73h ; 's'
.text:004015E2                 jnz     short loc_4015ED
.text:004015E4                 mov     ds:byte_406000, 1
.text:004015EB                 jmp     short loc_4015A0
.text:004015ED ; ---------------------------------------------------------------------------
.text:004015ED
.text:004015ED loc_4015ED:                             ; CODE XREF: sub_401520+C2↑j
.text:004015ED                                         ; sub_401520+10A↓j
.text:004015ED                 mov     [esp+28h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004015F4                 call    ds:libintl_gettext
.text:004015FA                 mov     ebx, ds:_iob
.text:00401600                 mov     esi, ds:dword_4061A0
.text:00401606                 add     ebx, 40h ; '@'
.text:00401609                 mov     [esp+28h+var_20], esi
.text:0040160D                 mov     [esp+28h+Locale], eax ; Format
.text:00401611                 mov     [esp+28h+Category], ebx ; Stream
.text:00401614                 call    fprintf
.text:00401619                 mov     [esp+28h+Category], 2 ; Code
.text:00401620
.text:00401620 loc_401620:                             ; CODE XREF: sub_401520+14C↓j
.text:00401620                                         ; sub_401520+236↓j
.text:00401620                 call    exit
.text:00401625 ; ---------------------------------------------------------------------------
.text:00401625
.text:00401625 loc_401625:                             ; CODE XREF: sub_401520+BD↑j
.text:00401625                 cmp     eax, 0FFFFFF7Dh
.text:0040162A                 jnz     short loc_4015ED
.text:0040162C                 mov     [esp+28h+var_14], 0
.text:00401634                 mov     edx, ds:_iob
.text:0040163A                 mov     dword ptr [esp+28h+var_18], offset aDavidMackenzie ; "David MacKenzie"
.text:00401642                 mov     dword ptr [esp+28h+var_1C], offset a530 ; "5.3.0"
.text:0040164A                 add     edx, 20h ; ' '
.text:0040164D                 mov     [esp+28h+var_20], offset aGnuCoreutils ; "GNU coreutils"
.text:00401655                 mov     [esp+28h+Locale], offset stru_40138B ; FILE *
.text:0040165D                 mov     [esp+28h+Category], edx ; FILE *
.text:00401660                 call    sub_402DE0
.text:00401665
.text:00401665 loc_401665:                             ; CODE XREF: sub_401520+1F0↓j
.text:00401665                 mov     [esp+28h+Category], 0
.text:0040166C                 jmp     short loc_401620
.text:0040166E ; ---------------------------------------------------------------------------
.text:0040166E
.text:0040166E loc_40166E:                             ; CODE XREF: sub_401520+B2↑j
.text:0040166E                 mov     [esp+28h+Category], offset stru_40138B._cnt
.text:00401675                 call    ds:libintl_gettext
.text:0040167B                 mov     ecx, ds:dword_4061A0
.text:00401681                 mov     [esp+28h+Category], eax ; Format
.text:00401684                 mov     [esp+28h+Locale], ecx
.text:00401688                 call    printf
.text:0040168D                 mov     [esp+28h+Category], offset aPrintTheFileNa ; "Print the file name of the terminal con"...
.text:00401694                 call    ds:libintl_gettext
.text:0040169A                 mov     esi, ds:_iob
.text:004016A0                 add     esi, 20h ; ' '
.text:004016A3                 mov     [esp+28h+Locale], esi ; Stream
.text:004016A7                 mov     [esp+28h+Category], eax ; Buffer
.text:004016AA                 call    fputs
.text:004016AF                 mov     [esp+28h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004016B6                 call    ds:libintl_gettext
.text:004016BC                 mov     ebx, ds:_iob
.text:004016C2                 add     ebx, 20h ; ' '
.text:004016C5                 mov     [esp+28h+Locale], ebx ; Stream
.text:004016C9                 mov     [esp+28h+Category], eax ; Buffer
.text:004016CC                 call    fputs
.text:004016D1                 mov     [esp+28h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004016D8                 call    ds:libintl_gettext
.text:004016DE                 mov     ecx, ds:_iob
.text:004016E4                 add     ecx, 20h ; ' '
.text:004016E7                 mov     [esp+28h+Locale], ecx ; Stream
.text:004016EB                 mov     [esp+28h+Category], eax ; Buffer
.text:004016EE                 call    fputs
.text:004016F3                 mov     [esp+28h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004016FA                 call    ds:libintl_gettext
.text:00401700                 mov     [esp+28h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401708                 mov     [esp+28h+Category], eax ; Format
.text:0040170B                 call    printf
.text:00401710                 jmp     loc_401665
.text:00401715 ; ---------------------------------------------------------------------------
.text:00401715
.text:00401715 loc_401715:                             ; CODE XREF: sub_401520+A7↑j
.text:00401715                 mov     eax, dword_405020
.text:0040171A                 cmp     eax, esi
.text:0040171C                 jl      short loc_40176A
.text:0040171E
.text:0040171E loc_40171E:                             ; CODE XREF: sub_401520+280↓j
.text:0040171E                 mov     [esp+28h+Category], 0
.text:00401725                 call    sub_404A40
.text:0040172A                 cmp     ds:byte_406000, 0
.text:00401731                 jnz     short loc_40173F
.text:00401733                 test    eax, eax
.text:00401735                 jz      short loc_40175B
.text:00401737
.text:00401737 loc_401737:                             ; CODE XREF: sub_401520+248↓j
.text:00401737                 mov     [esp+28h+Category], eax ; Buffer
.text:0040173A                 call    puts
.text:0040173F
.text:0040173F loc_40173F:                             ; CODE XREF: sub_401520+211↑j
.text:0040173F                 mov     [esp+28h+Category], 0 ; FileHandle
.text:00401746                 call    _isatty
.text:0040174B                 test    eax, eax
.text:0040174D                 setz    bl
.text:00401750                 movzx   edx, bl
.text:00401753                 mov     [esp+28h+Category], edx
.text:00401756                 jmp     loc_401620
.text:0040175B ; ---------------------------------------------------------------------------
.text:0040175B
.text:0040175B loc_40175B:                             ; CODE XREF: sub_401520+215↑j
.text:0040175B                 mov     [esp+28h+Category], offset aNotATty ; "not a tty"
.text:00401762                 call    ds:libintl_gettext
.text:00401768                 jmp     short loc_401737
.text:0040176A ; ---------------------------------------------------------------------------
.text:0040176A
.text:0040176A loc_40176A:                             ; CODE XREF: sub_401520+1FC↑j
.text:0040176A                 mov     ecx, [ebx+eax*4]
.text:0040176D                 mov     [esp+28h+Category], ecx ; char *
.text:00401770                 call    sub_4028F0
.text:00401775                 mov     [esp+28h+Category], offset aExtraOperandS ; "extra operand %s"
.text:0040177C                 mov     esi, eax
.text:0040177E                 call    ds:libintl_gettext
.text:00401784                 mov     dword ptr [esp+28h+var_1C], esi ; char
.text:00401788                 mov     [esp+28h+Locale], 0 ; ErrorMessage
.text:00401790                 mov     [esp+28h+Category], 0 ; Code
.text:00401797                 mov     [esp+28h+var_20], eax ; char *
.text:0040179B                 call    sub_404790
.text:004017A0                 jmp     loc_40171E
.text:004017A0 sub_401520      endp
.text:004017A0
.text:004017A0 ; ---------------------------------------------------------------------------
.text:004017A5                 align 10h
.text:004017B0                 sub     esp, 1Ch
.text:004017B3                 mov     [esp+18h], ebx
.text:004017B7                 mov     ebx, [esp+20h]
.text:004017BB                 test    ebx, ebx
.text:004017BD                 jz      short loc_4017F3
.text:004017BF                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017C6                 call    ds:libintl_gettext
.text:004017CC                 mov     edx, ds:_iob
.text:004017D2                 mov     ecx, ds:dword_4061A0
.text:004017D8                 add     edx, 40h ; '@'
.text:004017DB                 mov     [esp+8], ecx
.text:004017DF                 mov     [esp+4], eax
.text:004017E3                 mov     [esp], edx
.text:004017E6                 call    fprintf
.text:004017EB
.text:004017EB loc_4017EB:                             ; CODE XREF: .text:00401895↓j
.text:004017EB                 mov     [esp], ebx
.text:004017EE                 call    exit
.text:004017F3 ; ---------------------------------------------------------------------------
.text:004017F3
.text:004017F3 loc_4017F3:                             ; CODE XREF: .text:004017BD↑j
.text:004017F3                 mov     dword ptr [esp], offset stru_40138B._cnt
.text:004017FA                 call    ds:libintl_gettext
.text:00401800                 mov     ecx, ds:dword_4061A0
.text:00401806                 mov     [esp], eax
.text:00401809                 mov     [esp+4], ecx
.text:0040180D                 call    printf
.text:00401812                 mov     dword ptr [esp], offset aPrintTheFileNa ; "Print the file name of the terminal con"...
.text:00401819                 call    ds:libintl_gettext
.text:0040181F                 mov     ecx, ds:_iob
.text:00401825                 add     ecx, 20h ; ' '
.text:00401828                 mov     [esp+4], ecx
.text:0040182C                 mov     [esp], eax
.text:0040182F                 call    fputs
.text:00401834                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040183B                 call    ds:libintl_gettext
.text:00401841                 mov     ecx, ds:_iob
.text:00401847                 add     ecx, 20h ; ' '
.text:0040184A                 mov     [esp+4], ecx
.text:0040184E                 mov     [esp], eax
.text:00401851                 call    fputs
.text:00401856                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040185D                 call    ds:libintl_gettext
.text:00401863                 mov     ecx, ds:_iob
.text:00401869                 add     ecx, 20h ; ' '
.text:0040186C                 mov     [esp+4], ecx
.text:00401870                 mov     [esp], eax
.text:00401873                 call    fputs
.text:00401878                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040187F                 call    ds:libintl_gettext
.text:00401885                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040188D                 mov     [esp], eax
.text:00401890                 call    printf
.text:00401895                 jmp     loc_4017EB
.text:00401895 ; ---------------------------------------------------------------------------
.text:0040189A                 align 10h
.text:004018A0 dword_4018A0    dd 90002D2Dh, 7 dup(90909090h)
.text:004018A0                                         ; DATA XREF: sub_401AF0+E4↓o
.text:004018C0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004018C0                                         ; DATA XREF: sub_401AF0+2FC↓o
.text:004018ED                 align 20h
.text:00401900 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401900                                         ; DATA XREF: sub_401AF0:loc_401E52↓o
.text:0040192D                 align 20h
.text:00401940 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401940                                         ; DATA XREF: sub_401AF0:loc_401EF0↓o
.text:00401940                                         ; sub_401AF0:loc_4022B7↓o
.text:00401966                 align 20h
.text:00401980 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401980                                         ; DATA XREF: sub_401AF0+48E↓o
.text:004019A0 dword_4019A0    dd 90909000h, 7 dup(90909090h)
.text:004019A0                                         ; DATA XREF: sub_401AF0:loc_401FC1↓o
.text:004019C0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:004019C0                                         ; DATA XREF: sub_401AF0:loc_401FDA↓o
.text:004019E0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004019E0                                         ; DATA XREF: sub_401AF0:loc_4020BF↓o
.text:004019E0                                         ; sub_401AF0:loc_4023EC↓o
.text:00401A07                 align 20h
.text:00401A20 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401A20                                         ; DATA XREF: sub_401AF0:loc_402233↓o
.text:00401A4E                 align 20h
.text:00401A60 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401A60                                         ; DATA XREF: sub_401AF0:loc_40231F↓o
.text:00401A81 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401A81                                         ; DATA XREF: sub_401AF0+93F↓o
.text:00401A9B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401A9B                                         ; DATA XREF: sub_401AF0:loc_402467↓o
.text:00401AB5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401AB5                                         ; DATA XREF: sub_401AF0:loc_40248E↓o
.text:00401AD3 ; const char VarName[]
.text:00401AD3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401AF0:loc_402640↓o
.text:00401AE3                 align 10h
.text:00401AF0
.text:00401AF0 ; =============== S U B R O U T I N E =======================================
.text:00401AF0
.text:00401AF0
.text:00401AF0 ; int __cdecl sub_401AF0(int, int, char *Str, int, int, int, int, int)
.text:00401AF0 sub_401AF0      proc near               ; CODE XREF: sub_402680+5A↓p
.text:00401AF0                                         ; .text:0040276A↓p ...
.text:00401AF0
.text:00401AF0 Str1            = dword ptr -5Ch
.text:00401AF0 Str2            = dword ptr -58h
.text:00401AF0 MaxCount        = dword ptr -54h
.text:00401AF0 var_50          = dword ptr -50h
.text:00401AF0 var_4C          = dword ptr -4Ch
.text:00401AF0 var_3C          = dword ptr -3Ch
.text:00401AF0 var_38          = dword ptr -38h
.text:00401AF0 var_34          = dword ptr -34h
.text:00401AF0 var_30          = dword ptr -30h
.text:00401AF0 var_2C          = dword ptr -2Ch
.text:00401AF0 var_28          = dword ptr -28h
.text:00401AF0 var_24          = dword ptr -24h
.text:00401AF0 var_20          = dword ptr -20h
.text:00401AF0 var_1C          = dword ptr -1Ch
.text:00401AF0 var_18          = dword ptr -18h
.text:00401AF0 var_14          = dword ptr -14h
.text:00401AF0 arg_0           = dword ptr  4
.text:00401AF0 arg_4           = dword ptr  8
.text:00401AF0 Str             = dword ptr  0Ch
.text:00401AF0 arg_C           = dword ptr  10h
.text:00401AF0 arg_10          = dword ptr  14h
.text:00401AF0 arg_14          = dword ptr  18h
.text:00401AF0 arg_18          = dword ptr  1Ch
.text:00401AF0 arg_1C          = dword ptr  20h
.text:00401AF0
.text:00401AF0                 push    ebp
.text:00401AF1                 mov     eax, 0FFFFFFFFh
.text:00401AF6                 push    edi
.text:00401AF7                 push    esi
.text:00401AF8                 push    ebx
.text:00401AF9                 sub     esp, 4Ch
.text:00401AFC                 mov     esi, [esp+5Ch+Str]
.text:00401B00                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401B04                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401B07                 mov     ebx, [ebp+4]
.text:00401B0A                 setz    dl
.text:00401B0D                 movzx   ecx, dl
.text:00401B10                 dec     ecx
.text:00401B11                 and     ecx, ebx
.text:00401B13                 mov     [esp+5Ch+var_14], ecx
.text:00401B17                 mov     ecx, [esp+5Ch+arg_0]
.text:00401B1B                 test    ecx, ecx
.text:00401B1D                 jle     loc_401C47
.text:00401B23                 mov     dword ptr [ebp+0Ch], 0
.text:00401B2A                 mov     ebx, [ebp+0]
.text:00401B2D                 test    ebx, ebx
.text:00401B2F                 jz      loc_402660
.text:00401B35                 mov     edi, [ebp+10h]
.text:00401B38                 test    edi, edi
.text:00401B3A                 jnz     short loc_401B93
.text:00401B3C                 lea     esi, [esi+0]
.text:00401B40
.text:00401B40 loc_401B40:                             ; CODE XREF: sub_401AF0+B7C↓j
.text:00401B40                 mov     [ebp+24h], ebx
.text:00401B43                 mov     esi, [esp+5Ch+Str]
.text:00401B47                 mov     [ebp+20h], ebx
.text:00401B4A                 mov     ecx, [esp+5Ch+arg_18]
.text:00401B4E                 xor     ebx, ebx
.text:00401B50                 mov     dword ptr [ebp+14h], 0
.text:00401B57                 test    ecx, ecx
.text:00401B59                 jz      loc_402640
.text:00401B5F
.text:00401B5F loc_401B5F:                             ; CODE XREF: sub_401AF0+B64↓j
.text:00401B5F                 mov     ebx, 1
.text:00401B64
.text:00401B64 loc_401B64:                             ; CODE XREF: sub_401AF0+B5E↓j
.text:00401B64                 mov     [ebp+1Ch], ebx
.text:00401B67                 mov     ecx, [esp+5Ch+Str]
.text:00401B6B                 movzx   eax, byte ptr [ecx]
.text:00401B6E                 cmp     al, 2Dh ; '-'
.text:00401B70                 jz      loc_402630
.text:00401B76                 cmp     al, 2Bh ; '+'
.text:00401B78                 jz      loc_402619
.text:00401B7E                 xor     edx, edx
.text:00401B80                 test    ebx, ebx
.text:00401B82                 setz    dl
.text:00401B85                 mov     [ebp+18h], edx
.text:00401B88
.text:00401B88 loc_401B88:                             ; CODE XREF: sub_401AF0+B35↓j
.text:00401B88                 mov     [esp+5Ch+Str], esi
.text:00401B8C                 mov     dword ptr [ebp+10h], 1
.text:00401B93
.text:00401B93 loc_401B93:                             ; CODE XREF: sub_401AF0+4A↑j
.text:00401B93                 mov     eax, [ebp+14h]
.text:00401B96                 test    eax, eax
.text:00401B98                 jz      short loc_401BA3
.text:00401B9A                 cmp     byte ptr [eax], 0
.text:00401B9D                 jnz     loc_401C80
.text:00401BA3
.text:00401BA3 loc_401BA3:                             ; CODE XREF: sub_401AF0+A8↑j
.text:00401BA3                 mov     ebx, [ebp+0]
.text:00401BA6                 cmp     [ebp+24h], ebx
.text:00401BA9                 jle     short loc_401BAE
.text:00401BAB                 mov     [ebp+24h], ebx
.text:00401BAE
.text:00401BAE loc_401BAE:                             ; CODE XREF: sub_401AF0+B9↑j
.text:00401BAE                 cmp     [ebp+20h], ebx
.text:00401BB1                 jle     short loc_401BB6
.text:00401BB3                 mov     [ebp+20h], ebx
.text:00401BB6
.text:00401BB6 loc_401BB6:                             ; CODE XREF: sub_401AF0+C1↑j
.text:00401BB6                 cmp     dword ptr [ebp+18h], 1
.text:00401BBA                 jz      loc_402590
.text:00401BC0
.text:00401BC0 loc_401BC0:                             ; CODE XREF: sub_401AF0+B13↓j
.text:00401BC0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401BC4                 jz      loc_402574
.text:00401BCA                 cld
.text:00401BCB                 mov     ecx, [esp+5Ch+arg_4]
.text:00401BCF                 mov     edx, 3
.text:00401BD4                 mov     edi, offset dword_4018A0
.text:00401BD9                 mov     esi, [ecx+ebx*4]
.text:00401BDC                 mov     ecx, edx
.text:00401BDE                 repe cmpsb
.text:00401BE0                 jnz     short loc_401C1C
.text:00401BE2                 mov     edx, [ebp+24h]
.text:00401BE5                 lea     eax, [ebx+1]
.text:00401BE8                 cmp     [ebp+20h], edx
.text:00401BEB                 mov     [ebp+0], eax
.text:00401BEE                 jz      loc_402588
.text:00401BF4                 cmp     edx, eax
.text:00401BF6                 jz      short loc_401C10
.text:00401BF8                 mov     [esp+5Ch+Str2], ebp
.text:00401BFC                 mov     ebx, [esp+5Ch+arg_4]
.text:00401C00                 mov     [esp+5Ch+Str1], ebx
.text:00401C03                 call    sub_4027A0
.text:00401C08                 nop
.text:00401C09                 lea     esi, [esi+0]
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401AF0+106↑j
.text:00401C10                                         ; sub_401AF0+A9B↓j
.text:00401C10                 mov     eax, [esp+5Ch+arg_0]
.text:00401C14                 mov     ebx, eax
.text:00401C16                 mov     [ebp+24h], eax
.text:00401C19                 mov     [ebp+0], eax
.text:00401C1C
.text:00401C1C loc_401C1C:                             ; CODE XREF: sub_401AF0+F0↑j
.text:00401C1C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401C20                 jz      loc_402574
.text:00401C26                 mov     esi, [esp+5Ch+arg_4]
.text:00401C2A                 mov     eax, [esi+ebx*4]
.text:00401C2D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401C30                 jz      short loc_401C57
.text:00401C32
.text:00401C32 loc_401C32:                             ; CODE XREF: sub_401AF0+16D↓j
.text:00401C32                 mov     edx, [ebp+18h]
.text:00401C35                 test    edx, edx
.text:00401C37                 jz      short loc_401C50
.text:00401C39                 mov     [ebp+0Ch], eax
.text:00401C3C                 lea     edi, [ebx+1]
.text:00401C3F                 mov     eax, 1
.text:00401C44                 mov     [ebp+0], edi
.text:00401C47
.text:00401C47 loc_401C47:                             ; CODE XREF: sub_401AF0+2D↑j
.text:00401C47                                         ; sub_401AF0+165↓j ...
.text:00401C47                 add     esp, 4Ch
.text:00401C4A                 pop     ebx
.text:00401C4B                 pop     esi
.text:00401C4C                 pop     edi
.text:00401C4D                 pop     ebp
.text:00401C4E                 retn
.text:00401C4E ; ---------------------------------------------------------------------------
.text:00401C4F                 align 10h
.text:00401C50
.text:00401C50 loc_401C50:                             ; CODE XREF: sub_401AF0+147↑j
.text:00401C50                                         ; sub_401AF0+A8A↓j ...
.text:00401C50                 mov     eax, 0FFFFFFFFh
.text:00401C55                 jmp     short loc_401C47
.text:00401C57 ; ---------------------------------------------------------------------------
.text:00401C57
.text:00401C57 loc_401C57:                             ; CODE XREF: sub_401AF0+140↑j
.text:00401C57                 movzx   edx, byte ptr [eax+1]
.text:00401C5B                 test    dl, dl
.text:00401C5D                 jz      short loc_401C32
.text:00401C5F                 mov     ebx, [esp+5Ch+arg_C]
.text:00401C63                 xor     ecx, ecx
.text:00401C65                 test    ebx, ebx
.text:00401C67                 jz      short loc_401C72
.text:00401C69                 cmp     dl, 2Dh ; '-'
.text:00401C6C                 jz      loc_40256A
.text:00401C72
.text:00401C72 loc_401C72:                             ; CODE XREF: sub_401AF0+177↑j
.text:00401C72                                         ; sub_401AF0+A7F↓j
.text:00401C72                 lea     esi, [ecx+eax+1]
.text:00401C76                 mov     [ebp+14h], esi
.text:00401C79                 lea     esi, [esi+0]
.text:00401C80
.text:00401C80 loc_401C80:                             ; CODE XREF: sub_401AF0+AD↑j
.text:00401C80                 mov     ecx, [esp+5Ch+arg_C]
.text:00401C84                 test    ecx, ecx
.text:00401C86                 jz      loc_402010
.text:00401C8C                 mov     edx, [ebp+0]
.text:00401C8F                 mov     edi, [esp+5Ch+arg_4]
.text:00401C93                 mov     eax, [edi+edx*4]
.text:00401C96                 movzx   edx, byte ptr [eax+1]
.text:00401C9A                 cmp     dl, 2Dh ; '-'
.text:00401C9D                 jz      short loc_401CB5
.text:00401C9F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401CA3                 test    ebx, ebx
.text:00401CA5                 jz      loc_402010
.text:00401CAB                 cmp     byte ptr [eax+2], 0
.text:00401CAF                 jz      loc_40254A
.text:00401CB5
.text:00401CB5 loc_401CB5:                             ; CODE XREF: sub_401AF0+1AD↑j
.text:00401CB5                                         ; sub_401AF0+A75↓j
.text:00401CB5                 mov     [esp+5Ch+var_18], 0
.text:00401CBD                 mov     ecx, [ebp+14h]
.text:00401CC0                 mov     [esp+5Ch+var_1C], 0
.text:00401CC8                 mov     [esp+5Ch+var_20], 0
.text:00401CD0                 mov     edi, ecx
.text:00401CD2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401CDA                 movzx   eax, byte ptr [ecx]
.text:00401CDD                 test    al, al
.text:00401CDF                 jz      short loc_401CFC
.text:00401CE1                 cmp     al, 3Dh ; '='
.text:00401CE3                 jz      short loc_401CFC
.text:00401CE5                 lea     esi, [esi+0]
.text:00401CE9                 lea     edi, [edi+0]
.text:00401CF0
.text:00401CF0 loc_401CF0:                             ; CODE XREF: sub_401AF0+20A↓j
.text:00401CF0                 inc     edi
.text:00401CF1                 movzx   eax, byte ptr [edi]
.text:00401CF4                 test    al, al
.text:00401CF6                 jz      short loc_401CFC
.text:00401CF8                 cmp     al, 3Dh ; '='
.text:00401CFA                 jnz     short loc_401CF0
.text:00401CFC
.text:00401CFC loc_401CFC:                             ; CODE XREF: sub_401AF0+1EF↑j
.text:00401CFC                                         ; sub_401AF0+1F3↑j ...
.text:00401CFC                 mov     [esp+5Ch+var_28], 0
.text:00401D04                 mov     esi, [esp+5Ch+arg_C]
.text:00401D08                 mov     ebx, [esi]
.text:00401D0A                 test    ebx, ebx
.text:00401D0C                 mov     edx, ebx
.text:00401D0E                 jz      loc_401F30
.text:00401D14                 lea     esi, [esi+0]
.text:00401D1A                 lea     edi, [edi+0]
.text:00401D20
.text:00401D20 loc_401D20:                             ; CODE XREF: sub_401AF0+25E↓j
.text:00401D20                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401D24                 mov     ebx, edi
.text:00401D26                 sub     ebx, ecx
.text:00401D28                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401D2C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401D2F                 call    strncmp
.text:00401D34                 test    eax, eax
.text:00401D36                 jz      loc_4024C6
.text:00401D3C
.text:00401D3C loc_401D3C:                             ; CODE XREF: sub_401AF0+A0F↓j
.text:00401D3C                                         ; sub_401AF0+A24↓j ...
.text:00401D3C                 inc     [esp+5Ch+var_28]
.text:00401D40                 add     esi, 10h
.text:00401D43                 mov     ecx, [esi]
.text:00401D45                 test    ecx, ecx
.text:00401D47                 mov     edx, ecx
.text:00401D49                 jz      short loc_401D50
.text:00401D4B                 mov     ecx, [ebp+14h]
.text:00401D4E                 jmp     short loc_401D20
.text:00401D50 ; ---------------------------------------------------------------------------
.text:00401D50
.text:00401D50 loc_401D50:                             ; CODE XREF: sub_401AF0+259↑j
.text:00401D50                                         ; sub_401AF0+A55↓j
.text:00401D50                 mov     esi, [esp+5Ch+var_20]
.text:00401D54                 test    esi, esi
.text:00401D56                 jz      short loc_401D64
.text:00401D58                 mov     edx, [esp+5Ch+var_1C]
.text:00401D5C                 test    edx, edx
.text:00401D5E                 jz      loc_402470
.text:00401D64
.text:00401D64 loc_401D64:                             ; CODE XREF: sub_401AF0+266↑j
.text:00401D64                 mov     eax, [esp+5Ch+var_18]
.text:00401D68                 test    eax, eax
.text:00401D6A                 jz      loc_401F30
.text:00401D70                 mov     ecx, [ebp+0]
.text:00401D73                 lea     eax, [ecx+1]
.text:00401D76                 mov     [ebp+0], eax
.text:00401D79                 cmp     byte ptr [edi], 0
.text:00401D7C                 jz      loc_401E90
.text:00401D82                 mov     ecx, [esp+5Ch+var_18]
.text:00401D86                 mov     esi, [ecx+4]
.text:00401D89                 test    esi, esi
.text:00401D8B                 jz      short loc_401DD6
.text:00401D8D                 lea     ebx, [edi+1]
.text:00401D90                 mov     [ebp+0Ch], ebx
.text:00401D93
.text:00401D93 loc_401D93:                             ; CODE XREF: sub_401AF0+3A8↓j
.text:00401D93                                         ; sub_401AF0+3C4↓j
.text:00401D93                 mov     ebx, [ebp+14h]
.text:00401D96                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401D99                 call    strlen
.text:00401D9E                 add     [ebp+14h], eax
.text:00401DA1                 mov     esi, [esp+5Ch+arg_10]
.text:00401DA5                 test    esi, esi
.text:00401DA7                 jz      short loc_401DB3
.text:00401DA9                 mov     ebp, [esp+5Ch+var_24]
.text:00401DAD                 mov     ecx, [esp+5Ch+arg_10]
.text:00401DB1                 mov     [ecx], ebp
.text:00401DB3
.text:00401DB3 loc_401DB3:                             ; CODE XREF: sub_401AF0+2B7↑j
.text:00401DB3                 mov     eax, [esp+5Ch+var_18]
.text:00401DB7                 mov     ecx, [eax+8]
.text:00401DBA                 test    ecx, ecx
.text:00401DBC                 jnz     short loc_401DCA
.text:00401DBE                 mov     ecx, [esp+5Ch+var_18]
.text:00401DC2
.text:00401DC2 loc_401DC2:                             ; CODE XREF: sub_401AF0+723↓j
.text:00401DC2                 mov     eax, [ecx+0Ch]
.text:00401DC5                 jmp     loc_401C47
.text:00401DCA ; ---------------------------------------------------------------------------
.text:00401DCA
.text:00401DCA loc_401DCA:                             ; CODE XREF: sub_401AF0+2CC↑j
.text:00401DCA                                         ; sub_401AF0+719↓j
.text:00401DCA                 mov     esi, [eax+0Ch]
.text:00401DCD                 xor     eax, eax
.text:00401DCF                 mov     [ecx], esi
.text:00401DD1                 jmp     loc_401C47
.text:00401DD6 ; ---------------------------------------------------------------------------
.text:00401DD6
.text:00401DD6 loc_401DD6:                             ; CODE XREF: sub_401AF0+29B↑j
.text:00401DD6                 mov     edi, [esp+5Ch+var_14]
.text:00401DDA                 test    edi, edi
.text:00401DDC                 jz      short loc_401E30
.text:00401DDE                 mov     esi, [esp+5Ch+arg_4]
.text:00401DE2                 mov     edx, [esi+eax*4-4]
.text:00401DE6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401DEA                 jz      short loc_401E52
.text:00401DEC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401DF3                 call    ds:libintl_gettext
.text:00401DF9                 mov     edx, [esp+5Ch+var_18]
.text:00401DFD                 mov     edi, [edx]
.text:00401DFF                 mov     [esp+5Ch+var_4C], edi
.text:00401E03                 mov     ebx, [ebp+0]
.text:00401E06                 mov     edi, [esp+5Ch+arg_4]
.text:00401E0A                 mov     ecx, [edi+ebx*4-4]
.text:00401E0E                 movsx   esi, byte ptr [ecx]
.text:00401E11                 mov     ecx, ds:_iob
.text:00401E17                 add     ecx, 40h ; '@'
.text:00401E1A                 mov     [esp+5Ch+var_50], esi
.text:00401E1E                 mov     ebx, [edi]
.text:00401E20                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E24                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E27                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E2B                 call    fprintf
.text:00401E30
.text:00401E30 loc_401E30:                             ; CODE XREF: sub_401AF0+2EC↑j
.text:00401E30                                         ; sub_401AF0+398↓j
.text:00401E30                 mov     ecx, [ebp+14h]
.text:00401E33                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401E36                 call    strlen
.text:00401E3B                 add     [ebp+14h], eax
.text:00401E3E                 mov     eax, [esp+5Ch+var_18]
.text:00401E42                 mov     esi, [eax+0Ch]
.text:00401E45                 mov     [ebp+8], esi
.text:00401E48
.text:00401E48 loc_401E48:                             ; CODE XREF: sub_401AF0+4E5↓j
.text:00401E48                                         ; sub_401AF0+73E↓j ...
.text:00401E48                 mov     eax, 3Fh ; '?'
.text:00401E4D                 jmp     loc_401C47
.text:00401E52 ; ---------------------------------------------------------------------------
.text:00401E52
.text:00401E52 loc_401E52:                             ; CODE XREF: sub_401AF0+2FA↑j
.text:00401E52                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401E59                 call    ds:libintl_gettext
.text:00401E5F                 mov     edx, [esp+5Ch+var_18]
.text:00401E63                 mov     edi, [esp+5Ch+arg_4]
.text:00401E67                 mov     ecx, ds:_iob
.text:00401E6D                 mov     esi, [edx]
.text:00401E6F                 add     ecx, 40h ; '@'
.text:00401E72                 mov     [esp+5Ch+var_50], esi
.text:00401E76                 mov     ebx, [edi]
.text:00401E78                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401E7C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401E7F                 mov     [esp+5Ch+MaxCount], ebx
.text:00401E83                 call    fprintf
.text:00401E88                 jmp     short loc_401E30
.text:00401E88 ; ---------------------------------------------------------------------------
.text:00401E8A                 align 10h
.text:00401E90
.text:00401E90 loc_401E90:                             ; CODE XREF: sub_401AF0+28C↑j
.text:00401E90                 mov     ebx, [esp+5Ch+var_18]
.text:00401E94                 cmp     dword ptr [ebx+4], 1
.text:00401E98                 jnz     loc_401D93
.text:00401E9E                 cmp     eax, [esp+5Ch+arg_0]
.text:00401EA2                 jge     short loc_401EB9
.text:00401EA4                 mov     ebx, [esp+5Ch+arg_4]
.text:00401EA8                 lea     edi, [ecx+2]
.text:00401EAB                 mov     [ebp+0], edi
.text:00401EAE                 mov     esi, [ebx+eax*4]
.text:00401EB1                 mov     [ebp+0Ch], esi
.text:00401EB4                 jmp     loc_401D93
.text:00401EB9 ; ---------------------------------------------------------------------------
.text:00401EB9
.text:00401EB9 loc_401EB9:                             ; CODE XREF: sub_401AF0+3B2↑j
.text:00401EB9                 mov     edx, [esp+5Ch+var_14]
.text:00401EBD                 test    edx, edx
.text:00401EBF                 jnz     short loc_401EF0
.text:00401EC1
.text:00401EC1 loc_401EC1:                             ; CODE XREF: sub_401AF0+437↓j
.text:00401EC1                 mov     edx, [ebp+14h]
.text:00401EC4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401EC7                 call    strlen
.text:00401ECC                 add     [ebp+14h], eax
.text:00401ECF                 mov     eax, [esp+5Ch+var_18]
.text:00401ED3                 mov     edi, [eax+0Ch]
.text:00401ED6                 mov     [ebp+8], edi
.text:00401ED9
.text:00401ED9 loc_401ED9:                             ; CODE XREF: sub_401AF0+7C2↓j
.text:00401ED9                 mov     ebp, [esp+5Ch+Str]
.text:00401EDD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00401EE1                 setnz   bl
.text:00401EE4                 movzx   esi, bl
.text:00401EE7                 lea     eax, [esi+esi*4+3Ah]
.text:00401EEB                 jmp     loc_401C47
.text:00401EF0 ; ---------------------------------------------------------------------------
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401AF0+3CF↑j
.text:00401EF0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00401EF7                 call    ds:libintl_gettext
.text:00401EFD                 mov     ecx, [ebp+0]
.text:00401F00                 mov     esi, [esp+5Ch+arg_4]
.text:00401F04                 mov     ebx, [esi+ecx*4-4]
.text:00401F08                 mov     ecx, ds:_iob
.text:00401F0E                 mov     [esp+5Ch+var_50], ebx
.text:00401F12                 mov     edi, [esi]
.text:00401F14                 add     ecx, 40h ; '@'
.text:00401F17                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401F1B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401F1E                 mov     [esp+5Ch+MaxCount], edi
.text:00401F22                 call    fprintf
.text:00401F27                 jmp     short loc_401EC1
.text:00401F27 ; ---------------------------------------------------------------------------
.text:00401F29                 align 10h
.text:00401F30
.text:00401F30 loc_401F30:                             ; CODE XREF: sub_401AF0+21E↑j
.text:00401F30                                         ; sub_401AF0+27A↑j
.text:00401F30                 mov     eax, [esp+5Ch+arg_14]
.text:00401F34                 test    eax, eax
.text:00401F36                 jz      short loc_401F66
.text:00401F38                 mov     ebx, [ebp+0]
.text:00401F3B                 mov     esi, [esp+5Ch+arg_4]
.text:00401F3F                 mov     edi, [esi+ebx*4]
.text:00401F42                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401F46                 jz      short loc_401F69
.text:00401F48                 mov     ecx, [ebp+14h]
.text:00401F4B                 mov     edx, [esp+5Ch+Str]
.text:00401F4F                 movsx   ebx, byte ptr [ecx]
.text:00401F52                 mov     [esp+5Ch+Str1], edx ; Str
.text:00401F55                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00401F59                 call    strchr
.text:00401F5E                 test    eax, eax
.text:00401F60                 jnz     loc_402010
.text:00401F66
.text:00401F66 loc_401F66:                             ; CODE XREF: sub_401AF0+446↑j
.text:00401F66                 mov     ebx, [ebp+0]
.text:00401F69
.text:00401F69 loc_401F69:                             ; CODE XREF: sub_401AF0+456↑j
.text:00401F69                 mov     eax, [esp+5Ch+var_14]
.text:00401F6D                 test    eax, eax
.text:00401F6F                 jz      short loc_401FC1
.text:00401F71                 mov     esi, [esp+5Ch+arg_4]
.text:00401F75                 mov     edi, [esi+ebx*4]
.text:00401F78                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00401F7C                 jz      short loc_401FDA
.text:00401F7E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00401F85                 call    ds:libintl_gettext
.text:00401F8B                 mov     edi, [ebp+14h]
.text:00401F8E                 mov     [esp+5Ch+var_4C], edi
.text:00401F92                 mov     ebx, [ebp+0]
.text:00401F95                 mov     edi, [esp+5Ch+arg_4]
.text:00401F99                 mov     esi, [edi+ebx*4]
.text:00401F9C                 movsx   ecx, byte ptr [esi]
.text:00401F9F                 mov     esi, ds:_iob
.text:00401FA5                 add     esi, 40h ; '@'
.text:00401FA8                 mov     [esp+5Ch+var_50], ecx
.text:00401FAC                 mov     ebx, [edi]
.text:00401FAE                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401FB2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00401FB5                 mov     [esp+5Ch+MaxCount], ebx
.text:00401FB9                 call    fprintf
.text:00401FBE
.text:00401FBE loc_401FBE:                             ; CODE XREF: sub_401AF0+51D↓j
.text:00401FBE                 mov     ebx, [ebp+0]
.text:00401FC1
.text:00401FC1 loc_401FC1:                             ; CODE XREF: sub_401AF0+47F↑j
.text:00401FC1                 mov     dword ptr [ebp+14h], offset dword_4019A0
.text:00401FC8                 lea     edx, [ebx+1]
.text:00401FCB                 mov     [ebp+0], edx
.text:00401FCE
.text:00401FCE loc_401FCE:                             ; CODE XREF: sub_401AF0+999↓j
.text:00401FCE                 mov     dword ptr [ebp+8], 0
.text:00401FD5                 jmp     loc_401E48
.text:00401FDA ; ---------------------------------------------------------------------------
.text:00401FDA
.text:00401FDA loc_401FDA:                             ; CODE XREF: sub_401AF0+48C↑j
.text:00401FDA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00401FE1                 call    ds:libintl_gettext
.text:00401FE7                 mov     ecx, [ebp+14h]
.text:00401FEA                 mov     edi, [esp+5Ch+arg_4]
.text:00401FEE                 mov     edx, ds:_iob
.text:00401FF4                 mov     [esp+5Ch+var_50], ecx
.text:00401FF8                 mov     ebx, [edi]
.text:00401FFA                 add     edx, 40h ; '@'
.text:00401FFD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402001                 mov     [esp+5Ch+MaxCount], ebx
.text:00402005                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402008                 call    fprintf
.text:0040200D                 jmp     short loc_401FBE
.text:0040200D ; ---------------------------------------------------------------------------
.text:0040200F                 align 10h
.text:00402010
.text:00402010 loc_402010:                             ; CODE XREF: sub_401AF0+196↑j
.text:00402010                                         ; sub_401AF0+1B5↑j ...
.text:00402010                 mov     esi, [ebp+14h]
.text:00402013                 movzx   ebx, byte ptr [esi]
.text:00402016                 inc     esi
.text:00402017                 mov     [ebp+14h], esi
.text:0040201A                 mov     ecx, [esp+5Ch+Str]
.text:0040201E                 movsx   esi, bl
.text:00402021                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402025                 mov     edi, esi
.text:00402027                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040202A                 call    strchr
.text:0040202F                 mov     ecx, [ebp+14h]
.text:00402032                 cmp     byte ptr [ecx], 0
.text:00402035                 jnz     short loc_40203A
.text:00402037                 inc     dword ptr [ebp+0]
.text:0040203A
.text:0040203A loc_40203A:                             ; CODE XREF: sub_401AF0+545↑j
.text:0040203A                 test    eax, eax
.text:0040203C                 jz      loc_402420
.text:00402042                 cmp     bl, 3Ah ; ':'
.text:00402045                 jz      loc_402420
.text:0040204B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040204E                 jz      loc_402106
.text:00402054                 movzx   edx, byte ptr [eax+1]
.text:00402058
.text:00402058 loc_402058:                             ; CODE XREF: sub_401AF0+61D↓j
.text:00402058                 cmp     dl, 3Ah ; ':'
.text:0040205B                 jz      short loc_402064
.text:0040205D
.text:0040205D loc_40205D:                             ; CODE XREF: sub_401AF0+590↓j
.text:0040205D                 mov     eax, esi
.text:0040205F                 jmp     loc_401C47
.text:00402064 ; ---------------------------------------------------------------------------
.text:00402064
.text:00402064 loc_402064:                             ; CODE XREF: sub_401AF0+56B↑j
.text:00402064                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402068                 jz      loc_4020F1
.text:0040206E                 cmp     byte ptr [ecx], 0
.text:00402071                 jz      short loc_402082
.text:00402073
.text:00402073 loc_402073:                             ; CODE XREF: sub_401AF0+604↓j
.text:00402073                 inc     dword ptr [ebp+0]
.text:00402076                 mov     [ebp+0Ch], ecx
.text:00402079
.text:00402079 loc_402079:                             ; CODE XREF: sub_401AF0+5AB↓j
.text:00402079                                         ; sub_401AF0+5C6↓j ...
.text:00402079                 mov     dword ptr [ebp+14h], 0
.text:00402080                 jmp     short loc_40205D
.text:00402082 ; ---------------------------------------------------------------------------
.text:00402082
.text:00402082 loc_402082:                             ; CODE XREF: sub_401AF0+581↑j
.text:00402082                 mov     ecx, [ebp+0]
.text:00402085                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402089                 jz      short loc_40209D
.text:0040208B                 mov     eax, [esp+5Ch+arg_4]
.text:0040208F                 lea     edx, [ecx+1]
.text:00402092                 mov     [ebp+0], edx
.text:00402095                 mov     ebx, [eax+ecx*4]
.text:00402098                 mov     [ebp+0Ch], ebx
.text:0040209B                 jmp     short loc_402079
.text:0040209D ; ---------------------------------------------------------------------------
.text:0040209D
.text:0040209D loc_40209D:                             ; CODE XREF: sub_401AF0+599↑j
.text:0040209D                 mov     ecx, [esp+5Ch+var_14]
.text:004020A1                 test    ecx, ecx
.text:004020A3                 jnz     short loc_4020BF
.text:004020A5
.text:004020A5 loc_4020A5:                             ; CODE XREF: sub_401AF0+5FF↓j
.text:004020A5                 mov     [ebp+8], edi
.text:004020A8                 mov     edi, [esp+5Ch+Str]
.text:004020AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004020AF                 jz      short loc_4020B8
.text:004020B1                 mov     esi, 3Fh ; '?'
.text:004020B6                 jmp     short loc_402079
.text:004020B8 ; ---------------------------------------------------------------------------
.text:004020B8
.text:004020B8 loc_4020B8:                             ; CODE XREF: sub_401AF0+5BF↑j
.text:004020B8                 mov     esi, 3Ah ; ':'
.text:004020BD                 jmp     short loc_402079
.text:004020BF ; ---------------------------------------------------------------------------
.text:004020BF
.text:004020BF loc_4020BF:                             ; CODE XREF: sub_401AF0+5B3↑j
.text:004020BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004020C6                 call    ds:libintl_gettext
.text:004020CC                 mov     [esp+5Ch+var_50], edi
.text:004020D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004020D4                 mov     edx, ds:_iob
.text:004020DA                 mov     esi, [ebx]
.text:004020DC                 add     edx, 40h ; '@'
.text:004020DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004020E3                 mov     [esp+5Ch+MaxCount], esi
.text:004020E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004020EA                 call    fprintf
.text:004020EF                 jmp     short loc_4020A5
.text:004020F1 ; ---------------------------------------------------------------------------
.text:004020F1
.text:004020F1 loc_4020F1:                             ; CODE XREF: sub_401AF0+578↑j
.text:004020F1                 cmp     byte ptr [ecx], 0
.text:004020F4                 jnz     loc_402073
.text:004020FA                 mov     dword ptr [ebp+0Ch], 0
.text:00402101                 jmp     loc_402079
.text:00402106 ; ---------------------------------------------------------------------------
.text:00402106
.text:00402106 loc_402106:                             ; CODE XREF: sub_401AF0+55E↑j
.text:00402106                 movzx   edx, byte ptr [eax+1]
.text:0040210A                 cmp     dl, 3Bh ; ';'
.text:0040210D                 jnz     loc_402058
.text:00402113                 mov     [esp+5Ch+var_2C], 0
.text:0040211B                 mov     [esp+5Ch+var_30], 0
.text:00402123                 mov     [esp+5Ch+var_34], 0
.text:0040212B                 mov     [esp+5Ch+var_38], 0
.text:00402133                 cmp     byte ptr [ecx], 0
.text:00402136                 jz      loc_4023AB
.text:0040213C                 inc     dword ptr [ebp+0]
.text:0040213F                 mov     [ebp+0Ch], ecx
.text:00402142
.text:00402142 loc_402142:                             ; CODE XREF: sub_401AF0+8D4↓j
.text:00402142                 mov     edi, [ebp+0Ch]
.text:00402145                 mov     [ebp+14h], edi
.text:00402148                 movzx   eax, byte ptr [edi]
.text:0040214B                 test    al, al
.text:0040214D                 jz      short loc_40215F
.text:0040214F                 cmp     al, 3Dh ; '='
.text:00402151                 jz      short loc_40215F
.text:00402153
.text:00402153 loc_402153:                             ; CODE XREF: sub_401AF0+66D↓j
.text:00402153                 inc     edi
.text:00402154                 movzx   eax, byte ptr [edi]
.text:00402157                 test    al, al
.text:00402159                 jz      short loc_40215F
.text:0040215B                 cmp     al, 3Dh ; '='
.text:0040215D                 jnz     short loc_402153
.text:0040215F
.text:0040215F loc_40215F:                             ; CODE XREF: sub_401AF0+65D↑j
.text:0040215F                                         ; sub_401AF0+661↑j ...
.text:0040215F                 mov     [esp+5Ch+var_3C], 0
.text:00402167                 mov     esi, [esp+5Ch+arg_C]
.text:0040216B                 mov     eax, [esi]
.text:0040216D                 test    eax, eax
.text:0040216F                 jz      loc_4022F0
.text:00402175                 mov     ecx, eax
.text:00402177
.text:00402177 loc_402177:                             ; CODE XREF: sub_401AF0+6B3↓j
.text:00402177                 mov     ebx, [ebp+14h]
.text:0040217A                 mov     eax, edi
.text:0040217C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040217F                 sub     eax, ebx
.text:00402181                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402185                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402189                 call    strncmp
.text:0040218E                 test    eax, eax
.text:00402190                 jz      loc_402357
.text:00402196
.text:00402196 loc_402196:                             ; CODE XREF: sub_401AF0+88C↓j
.text:00402196                                         ; sub_401AF0+89D↓j
.text:00402196                 inc     [esp+5Ch+var_3C]
.text:0040219A                 add     esi, 10h
.text:0040219D                 mov     edx, [esi]
.text:0040219F                 test    edx, edx
.text:004021A1                 mov     ecx, edx
.text:004021A3                 jnz     short loc_402177
.text:004021A5
.text:004021A5 loc_4021A5:                             ; CODE XREF: sub_401AF0+8B6↓j
.text:004021A5                 mov     esi, [esp+5Ch+var_34]
.text:004021A9                 test    esi, esi
.text:004021AB                 jz      short loc_4021B9
.text:004021AD                 mov     ebx, [esp+5Ch+var_30]
.text:004021B1                 test    ebx, ebx
.text:004021B3                 jz      loc_402301
.text:004021B9
.text:004021B9 loc_4021B9:                             ; CODE XREF: sub_401AF0+6BB↑j
.text:004021B9                 mov     esi, [esp+5Ch+var_2C]
.text:004021BD                 test    esi, esi
.text:004021BF                 jz      loc_4022F0
.text:004021C5                 cmp     byte ptr [edi], 0
.text:004021C8                 jz      loc_402270
.text:004021CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004021D2                 mov     ebx, [ecx+4]
.text:004021D5                 test    ebx, ebx
.text:004021D7                 jz      short loc_402218
.text:004021D9                 lea     edx, [edi+1]
.text:004021DC                 mov     [ebp+0Ch], edx
.text:004021DF
.text:004021DF loc_4021DF:                             ; CODE XREF: sub_401AF0+788↓j
.text:004021DF                                         ; sub_401AF0+7A7↓j
.text:004021DF                 mov     edi, [ebp+14h]
.text:004021E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004021E5                 call    strlen
.text:004021EA                 add     [ebp+14h], eax
.text:004021ED                 mov     eax, [esp+5Ch+arg_10]
.text:004021F1                 test    eax, eax
.text:004021F3                 jz      short loc_402200
.text:004021F5                 mov     edx, [esp+5Ch+var_38]
.text:004021F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004021FD                 mov     [ebp+0], edx
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_401AF0+703↑j
.text:00402200                 mov     eax, [esp+5Ch+var_2C]
.text:00402204                 mov     ecx, [eax+8]
.text:00402207                 test    ecx, ecx
.text:00402209                 jnz     loc_401DCA
.text:0040220F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402213                 jmp     loc_401DC2
.text:00402218 ; ---------------------------------------------------------------------------
.text:00402218
.text:00402218 loc_402218:                             ; CODE XREF: sub_401AF0+6E7↑j
.text:00402218                 mov     eax, [esp+5Ch+var_14]
.text:0040221C                 test    eax, eax
.text:0040221E                 jnz     short loc_402233
.text:00402220
.text:00402220 loc_402220:                             ; CODE XREF: sub_401AF0+779↓j
.text:00402220                 mov     ecx, [ebp+14h]
.text:00402223                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402226                 call    strlen
.text:0040222B                 add     [ebp+14h], eax
.text:0040222E                 jmp     loc_401E48
.text:00402233 ; ---------------------------------------------------------------------------
.text:00402233
.text:00402233 loc_402233:                             ; CODE XREF: sub_401AF0+72E↑j
.text:00402233                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040223A                 call    ds:libintl_gettext
.text:00402240                 mov     edx, [esp+5Ch+var_2C]
.text:00402244                 mov     ebx, [esp+5Ch+arg_4]
.text:00402248                 mov     edi, [edx]
.text:0040224A                 mov     [esp+5Ch+var_50], edi
.text:0040224E                 mov     edi, ds:_iob
.text:00402254                 mov     esi, [ebx]
.text:00402256                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040225A                 add     edi, 40h ; '@'
.text:0040225D                 mov     [esp+5Ch+MaxCount], esi
.text:00402261                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402264                 call    fprintf
.text:00402269                 jmp     short loc_402220
.text:00402269 ; ---------------------------------------------------------------------------
.text:0040226B                 align 10h
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_401AF0+6D8↑j
.text:00402270                 mov     esi, [esp+5Ch+var_2C]
.text:00402274                 cmp     dword ptr [esi+4], 1
.text:00402278                 jnz     loc_4021DF
.text:0040227E                 mov     ecx, [ebp+0]
.text:00402281                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402285                 jge     short loc_40229C
.text:00402287                 mov     eax, [esp+5Ch+arg_4]
.text:0040228B                 lea     ebx, [ecx+1]
.text:0040228E                 mov     [ebp+0], ebx
.text:00402291                 mov     edi, [eax+ecx*4]
.text:00402294                 mov     [ebp+0Ch], edi
.text:00402297                 jmp     loc_4021DF
.text:0040229C ; ---------------------------------------------------------------------------
.text:0040229C
.text:0040229C loc_40229C:                             ; CODE XREF: sub_401AF0+795↑j
.text:0040229C                 mov     edx, [esp+5Ch+var_14]
.text:004022A0                 test    edx, edx
.text:004022A2                 jnz     short loc_4022B7
.text:004022A4
.text:004022A4 loc_4022A4:                             ; CODE XREF: sub_401AF0+7FE↓j
.text:004022A4                 mov     edx, [ebp+14h]
.text:004022A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004022AA                 call    strlen
.text:004022AF                 add     [ebp+14h], eax
.text:004022B2                 jmp     loc_401ED9
.text:004022B7 ; ---------------------------------------------------------------------------
.text:004022B7
.text:004022B7 loc_4022B7:                             ; CODE XREF: sub_401AF0+7B2↑j
.text:004022B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004022BE                 call    ds:libintl_gettext
.text:004022C4                 mov     ecx, [ebp+0]
.text:004022C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004022CB                 mov     edi, [ebx+ecx*4-4]
.text:004022CF                 mov     ecx, ds:_iob
.text:004022D5                 mov     [esp+5Ch+var_50], edi
.text:004022D9                 mov     esi, [ebx]
.text:004022DB                 add     ecx, 40h ; '@'
.text:004022DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004022E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004022E5                 mov     [esp+5Ch+MaxCount], esi
.text:004022E9                 call    fprintf
.text:004022EE                 jmp     short loc_4022A4
.text:004022F0 ; ---------------------------------------------------------------------------
.text:004022F0
.text:004022F0 loc_4022F0:                             ; CODE XREF: sub_401AF0+67F↑j
.text:004022F0                                         ; sub_401AF0+6CF↑j
.text:004022F0                 mov     dword ptr [ebp+14h], 0
.text:004022F7                 mov     eax, 57h ; 'W'
.text:004022FC                 jmp     loc_401C47
.text:00402301 ; ---------------------------------------------------------------------------
.text:00402301
.text:00402301 loc_402301:                             ; CODE XREF: sub_401AF0+6C3↑j
.text:00402301                 mov     edi, [esp+5Ch+var_14]
.text:00402305                 test    edi, edi
.text:00402307                 jnz     short loc_40231F
.text:00402309
.text:00402309 loc_402309:                             ; CODE XREF: sub_401AF0+865↓j
.text:00402309                 mov     edx, [ebp+14h]
.text:0040230C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040230F                 call    strlen
.text:00402314                 add     [ebp+14h], eax
.text:00402317                 inc     dword ptr [ebp+0]
.text:0040231A                 jmp     loc_401E48
.text:0040231F ; ---------------------------------------------------------------------------
.text:0040231F
.text:0040231F loc_40231F:                             ; CODE XREF: sub_401AF0+817↑j
.text:0040231F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402326                 call    ds:libintl_gettext
.text:0040232C                 mov     ecx, [ebp+0]
.text:0040232F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402333                 mov     edi, [ebx+ecx*4]
.text:00402336                 mov     ecx, ds:_iob
.text:0040233C                 mov     [esp+5Ch+var_50], edi
.text:00402340                 mov     esi, [ebx]
.text:00402342                 add     ecx, 40h ; '@'
.text:00402345                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402349                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040234C                 mov     [esp+5Ch+MaxCount], esi
.text:00402350                 call    fprintf
.text:00402355                 jmp     short loc_402309
.text:00402357 ; ---------------------------------------------------------------------------
.text:00402357
.text:00402357 loc_402357:                             ; CODE XREF: sub_401AF0+6A0↑j
.text:00402357                 mov     edx, [ebp+14h]
.text:0040235A                 mov     ebx, edi
.text:0040235C                 mov     ecx, [esi]
.text:0040235E                 sub     ebx, edx
.text:00402360                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402363                 call    strlen
.text:00402368                 cmp     ebx, eax
.text:0040236A                 jz      short loc_402392
.text:0040236C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402370                 test    ebx, ebx
.text:00402372                 jz      short loc_402381
.text:00402374                 mov     [esp+5Ch+var_34], 1
.text:0040237C                 jmp     loc_402196
.text:00402381 ; ---------------------------------------------------------------------------
.text:00402381
.text:00402381 loc_402381:                             ; CODE XREF: sub_401AF0+882↑j
.text:00402381                 mov     [esp+5Ch+var_2C], esi
.text:00402385                 mov     ecx, [esp+5Ch+var_3C]
.text:00402389                 mov     [esp+5Ch+var_38], ecx
.text:0040238D                 jmp     loc_402196
.text:00402392 ; ---------------------------------------------------------------------------
.text:00402392
.text:00402392 loc_402392:                             ; CODE XREF: sub_401AF0+87A↑j
.text:00402392                 mov     [esp+5Ch+var_2C], esi
.text:00402396                 mov     eax, [esp+5Ch+var_3C]
.text:0040239A                 mov     [esp+5Ch+var_30], 1
.text:004023A2                 mov     [esp+5Ch+var_38], eax
.text:004023A6                 jmp     loc_4021A5
.text:004023AB ; ---------------------------------------------------------------------------
.text:004023AB
.text:004023AB loc_4023AB:                             ; CODE XREF: sub_401AF0+646↑j
.text:004023AB                 mov     edx, [ebp+0]
.text:004023AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004023B2                 jz      short loc_4023C9
.text:004023B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004023B8                 lea     esi, [edx+1]
.text:004023BB                 mov     [ebp+0], esi
.text:004023BE                 mov     edi, [ebx+edx*4]
.text:004023C1                 mov     [ebp+0Ch], edi
.text:004023C4                 jmp     loc_402142
.text:004023C9 ; ---------------------------------------------------------------------------
.text:004023C9
.text:004023C9 loc_4023C9:                             ; CODE XREF: sub_401AF0+8C2↑j
.text:004023C9                 mov     edi, [esp+5Ch+var_14]
.text:004023CD                 test    edi, edi
.text:004023CF                 jnz     short loc_4023EC
.text:004023D1
.text:004023D1 loc_4023D1:                             ; CODE XREF: sub_401AF0+92C↓j
.text:004023D1                 mov     [ebp+8], esi
.text:004023D4                 mov     ebp, [esp+5Ch+Str]
.text:004023D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004023DC                 jz      short loc_4023E8
.text:004023DE                 mov     bl, 3Fh ; '?'
.text:004023E0
.text:004023E0 loc_4023E0:                             ; CODE XREF: sub_401AF0+8FA↓j
.text:004023E0                 movsx   eax, bl
.text:004023E3                 jmp     loc_401C47
.text:004023E8 ; ---------------------------------------------------------------------------
.text:004023E8
.text:004023E8 loc_4023E8:                             ; CODE XREF: sub_401AF0+8EC↑j
.text:004023E8                 mov     bl, 3Ah ; ':'
.text:004023EA                 jmp     short loc_4023E0
.text:004023EC ; ---------------------------------------------------------------------------
.text:004023EC
.text:004023EC loc_4023EC:                             ; CODE XREF: sub_401AF0+8DF↑j
.text:004023EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004023F3                 call    ds:libintl_gettext
.text:004023F9                 mov     [esp+5Ch+var_50], esi
.text:004023FD                 mov     edx, [esp+5Ch+arg_4]
.text:00402401                 mov     ecx, ds:_iob
.text:00402407                 mov     ebx, [edx]
.text:00402409                 add     ecx, 40h ; '@'
.text:0040240C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402410                 mov     [esp+5Ch+MaxCount], ebx
.text:00402414                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402417                 call    fprintf
.text:0040241C                 jmp     short loc_4023D1
.text:0040241C ; ---------------------------------------------------------------------------
.text:0040241E                 align 10h
.text:00402420
.text:00402420 loc_402420:                             ; CODE XREF: sub_401AF0+54C↑j
.text:00402420                                         ; sub_401AF0+555↑j
.text:00402420                 mov     eax, [esp+5Ch+var_14]
.text:00402424                 test    eax, eax
.text:00402426                 jz      short loc_40245F
.text:00402428                 mov     ebx, [ebp+1Ch]
.text:0040242B                 test    ebx, ebx
.text:0040242D                 jz      short loc_402467
.text:0040242F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402436
.text:00402436 loc_402436:                             ; CODE XREF: sub_401AF0+97E↓j
.text:00402436                 call    ds:libintl_gettext
.text:0040243C                 mov     [esp+5Ch+var_50], esi
.text:00402440                 mov     ebx, [esp+5Ch+arg_4]
.text:00402444                 mov     edx, ds:_iob
.text:0040244A                 mov     esi, [ebx]
.text:0040244C                 add     edx, 40h ; '@'
.text:0040244F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402453                 mov     [esp+5Ch+MaxCount], esi
.text:00402457                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040245A                 call    fprintf
.text:0040245F
.text:0040245F loc_40245F:                             ; CODE XREF: sub_401AF0+936↑j
.text:0040245F                 mov     [ebp+8], edi
.text:00402462                 jmp     loc_401E48
.text:00402467 ; ---------------------------------------------------------------------------
.text:00402467
.text:00402467 loc_402467:                             ; CODE XREF: sub_401AF0+93D↑j
.text:00402467                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040246E                 jmp     short loc_402436
.text:00402470 ; ---------------------------------------------------------------------------
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_401AF0+26E↑j
.text:00402470                 mov     edi, [esp+5Ch+var_14]
.text:00402474                 test    edi, edi
.text:00402476                 jnz     short loc_40248E
.text:00402478
.text:00402478 loc_402478:                             ; CODE XREF: sub_401AF0+9D4↓j
.text:00402478                 mov     edx, [ebp+14h]
.text:0040247B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040247E                 call    strlen
.text:00402483                 add     [ebp+14h], eax
.text:00402486                 inc     dword ptr [ebp+0]
.text:00402489                 jmp     loc_401FCE
.text:0040248E ; ---------------------------------------------------------------------------
.text:0040248E
.text:0040248E loc_40248E:                             ; CODE XREF: sub_401AF0+986↑j
.text:0040248E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402495                 call    ds:libintl_gettext
.text:0040249B                 mov     ebx, [ebp+0]
.text:0040249E                 mov     edi, [esp+5Ch+arg_4]
.text:004024A2                 mov     ecx, [edi+ebx*4]
.text:004024A5                 mov     ebx, ds:_iob
.text:004024AB                 mov     [esp+5Ch+var_50], ecx
.text:004024AF                 mov     esi, [edi]
.text:004024B1                 add     ebx, 40h ; '@'
.text:004024B4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024B8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004024BB                 mov     [esp+5Ch+MaxCount], esi
.text:004024BF                 call    fprintf
.text:004024C4                 jmp     short loc_402478
.text:004024C6 ; ---------------------------------------------------------------------------
.text:004024C6
.text:004024C6 loc_4024C6:                             ; CODE XREF: sub_401AF0+246↑j
.text:004024C6                 mov     ecx, [ebp+14h]
.text:004024C9                 mov     ebx, edi
.text:004024CB                 mov     edx, [esi]
.text:004024CD                 sub     ebx, ecx
.text:004024CF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024D2                 call    strlen
.text:004024D7                 cmp     ebx, eax
.text:004024D9                 jz      short loc_402531
.text:004024DB                 mov     ebx, [esp+5Ch+var_18]
.text:004024DF                 test    ebx, ebx
.text:004024E1                 jz      short loc_402520
.text:004024E3                 mov     edx, [esp+5Ch+arg_14]
.text:004024E7                 test    edx, edx
.text:004024E9                 jnz     short loc_4024F7
.text:004024EB                 mov     ecx, [esp+5Ch+var_18]
.text:004024EF                 mov     ebx, [esi+4]
.text:004024F2                 cmp     [ecx+4], ebx
.text:004024F5                 jz      short loc_402504
.text:004024F7
.text:004024F7 loc_4024F7:                             ; CODE XREF: sub_401AF0+9F9↑j
.text:004024F7                                         ; sub_401AF0+A1A↓j ...
.text:004024F7                 mov     [esp+5Ch+var_20], 1
.text:004024FF                 jmp     loc_401D3C
.text:00402504 ; ---------------------------------------------------------------------------
.text:00402504
.text:00402504 loc_402504:                             ; CODE XREF: sub_401AF0+A05↑j
.text:00402504                 mov     edx, [esi+8]
.text:00402507                 cmp     [ecx+8], edx
.text:0040250A                 jnz     short loc_4024F7
.text:0040250C                 mov     ebx, [esi+0Ch]
.text:0040250F                 cmp     [ecx+0Ch], ebx
.text:00402512                 jnz     short loc_4024F7
.text:00402514                 jmp     loc_401D3C
.text:00402514 ; ---------------------------------------------------------------------------
.text:00402519                 align 10h
.text:00402520
.text:00402520 loc_402520:                             ; CODE XREF: sub_401AF0+9F1↑j
.text:00402520                 mov     [esp+5Ch+var_18], esi
.text:00402524                 mov     eax, [esp+5Ch+var_28]
.text:00402528                 mov     [esp+5Ch+var_24], eax
.text:0040252C                 jmp     loc_401D3C
.text:00402531 ; ---------------------------------------------------------------------------
.text:00402531
.text:00402531 loc_402531:                             ; CODE XREF: sub_401AF0+9E9↑j
.text:00402531                 mov     [esp+5Ch+var_18], esi
.text:00402535                 mov     ecx, [esp+5Ch+var_28]
.text:00402539                 mov     [esp+5Ch+var_1C], 1
.text:00402541                 mov     [esp+5Ch+var_24], ecx
.text:00402545                 jmp     loc_401D50
.text:0040254A ; ---------------------------------------------------------------------------
.text:0040254A
.text:0040254A loc_40254A:                             ; CODE XREF: sub_401AF0+1BF↑j
.text:0040254A                 mov     eax, [esp+5Ch+Str]
.text:0040254E                 movsx   esi, dl
.text:00402551                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402555                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402558                 call    strchr
.text:0040255D                 test    eax, eax
.text:0040255F                 jnz     loc_402010
.text:00402565                 jmp     loc_401CB5
.text:0040256A ; ---------------------------------------------------------------------------
.text:0040256A
.text:0040256A loc_40256A:                             ; CODE XREF: sub_401AF0+17C↑j
.text:0040256A                 mov     ecx, 1
.text:0040256F                 jmp     loc_401C72
.text:00402574 ; ---------------------------------------------------------------------------
.text:00402574
.text:00402574 loc_402574:                             ; CODE XREF: sub_401AF0+D4↑j
.text:00402574                                         ; sub_401AF0+130↑j
.text:00402574                 mov     eax, [ebp+20h]
.text:00402577                 cmp     eax, [ebp+24h]
.text:0040257A                 jz      loc_401C50
.text:00402580                 mov     [ebp+0], eax
.text:00402583                 jmp     loc_401C50
.text:00402588 ; ---------------------------------------------------------------------------
.text:00402588
.text:00402588 loc_402588:                             ; CODE XREF: sub_401AF0+FE↑j
.text:00402588                 mov     [ebp+20h], eax
.text:0040258B                 jmp     loc_401C10
.text:00402590 ; ---------------------------------------------------------------------------
.text:00402590
.text:00402590 loc_402590:                             ; CODE XREF: sub_401AF0+CA↑j
.text:00402590                 mov     edx, [ebp+20h]
.text:00402593                 mov     eax, [ebp+24h]
.text:00402596                 cmp     edx, eax
.text:00402598                 jz      short loc_402610
.text:0040259A                 cmp     eax, ebx
.text:0040259C                 jz      short loc_4025B1
.text:0040259E                 mov     [esp+5Ch+Str2], ebp
.text:004025A2                 mov     ebx, [esp+5Ch+arg_4]
.text:004025A6                 mov     [esp+5Ch+Str1], ebx
.text:004025A9                 call    sub_4027A0
.text:004025AE                 mov     ebx, [ebp+0]
.text:004025B1
.text:004025B1 loc_4025B1:                             ; CODE XREF: sub_401AF0+AAC↑j
.text:004025B1                                         ; sub_401AF0+B22↓j ...
.text:004025B1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004025B5                 jge     short loc_402600
.text:004025B7                 mov     esi, [esp+5Ch+arg_4]
.text:004025BB                 mov     eax, [esi+ebx*4]
.text:004025BE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004025C1                 jz      short loc_402608
.text:004025C3                 lea     esi, [esi+0]
.text:004025C9                 lea     edi, [edi+0]
.text:004025D0
.text:004025D0 loc_4025D0:                             ; CODE XREF: sub_401AF0+AFC↓j
.text:004025D0                                         ; sub_401AF0+B1C↓j
.text:004025D0                 lea     eax, [ebx+1]
.text:004025D3                 mov     ebx, eax
.text:004025D5                 mov     [ebp+0], eax
.text:004025D8                 cmp     eax, [esp+5Ch+arg_0]
.text:004025DC                 jge     short loc_402600
.text:004025DE                 mov     edi, [esp+5Ch+arg_4]
.text:004025E2                 mov     edx, [edi+eax*4]
.text:004025E5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004025E8                 jz      short loc_4025F0
.text:004025EA
.text:004025EA loc_4025EA:                             ; CODE XREF: sub_401AF0+B04↓j
.text:004025EA                 mov     ebx, eax
.text:004025EC                 jmp     short loc_4025D0
.text:004025EC ; ---------------------------------------------------------------------------
.text:004025EE                 align 10h
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_401AF0+AF8↑j
.text:004025F0                 cmp     byte ptr [edx+1], 0
.text:004025F4                 jz      short loc_4025EA
.text:004025F6                 lea     esi, [esi+0]
.text:004025F9                 lea     edi, [edi+0]
.text:00402600
.text:00402600 loc_402600:                             ; CODE XREF: sub_401AF0+AC5↑j
.text:00402600                                         ; sub_401AF0+AEC↑j ...
.text:00402600                 mov     [ebp+24h], ebx
.text:00402603                 jmp     loc_401BC0
.text:00402608 ; ---------------------------------------------------------------------------
.text:00402608
.text:00402608 loc_402608:                             ; CODE XREF: sub_401AF0+AD1↑j
.text:00402608                 cmp     byte ptr [eax+1], 0
.text:0040260C                 jz      short loc_4025D0
.text:0040260E                 jmp     short loc_402600
.text:00402610 ; ---------------------------------------------------------------------------
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_401AF0+AA8↑j
.text:00402610                 cmp     edx, ebx
.text:00402612                 jz      short loc_4025B1
.text:00402614                 mov     [ebp+20h], ebx
.text:00402617                 jmp     short loc_4025B1
.text:00402619 ; ---------------------------------------------------------------------------
.text:00402619
.text:00402619 loc_402619:                             ; CODE XREF: sub_401AF0+88↑j
.text:00402619                 mov     dword ptr [ebp+18h], 0
.text:00402620                 mov     esi, [esp+5Ch+Str]
.text:00402624
.text:00402624 loc_402624:                             ; CODE XREF: sub_401AF0+B49↓j
.text:00402624                 inc     esi
.text:00402625                 jmp     loc_401B88
.text:00402625 ; ---------------------------------------------------------------------------
.text:0040262A                 align 10h
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_401AF0+80↑j
.text:00402630                 mov     dword ptr [ebp+18h], 2
.text:00402637                 mov     esi, ecx
.text:00402639                 jmp     short loc_402624
.text:00402639 ; ---------------------------------------------------------------------------
.text:0040263B                 align 10h
.text:00402640
.text:00402640 loc_402640:                             ; CODE XREF: sub_401AF0+69↑j
.text:00402640                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402647                 call    getenv
.text:0040264C                 test    eax, eax
.text:0040264E                 jz      loc_401B64
.text:00402654                 jmp     loc_401B5F
.text:00402654 ; ---------------------------------------------------------------------------
.text:00402659                 align 10h
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_401AF0+3F↑j
.text:00402660                 mov     dword ptr [ebp+0], 1
.text:00402667                 mov     ebx, 1
.text:0040266C                 jmp     loc_401B40
.text:0040266C sub_401AF0      endp
.text:0040266C
.text:00402671 ; ---------------------------------------------------------------------------
.text:00402671                 jmp     short sub_402680
.text:00402671 ; ---------------------------------------------------------------------------
.text:00402673                 align 10h
.text:00402680
.text:00402680 ; =============== S U B R O U T I N E =======================================
.text:00402680
.text:00402680
.text:00402680 ; int __cdecl sub_402680(int, int, char *, int, int, int, int)
.text:00402680 sub_402680      proc near               ; CODE XREF: .text:00402671↑j
.text:00402680                                         ; sub_402E20+3A↓p ...
.text:00402680
.text:00402680 var_2C          = dword ptr -2Ch
.text:00402680 var_28          = dword ptr -28h
.text:00402680 Str             = dword ptr -24h
.text:00402680 var_20          = dword ptr -20h
.text:00402680 var_1C          = dword ptr -1Ch
.text:00402680 var_18          = dword ptr -18h
.text:00402680 var_14          = dword ptr -14h
.text:00402680 var_10          = dword ptr -10h
.text:00402680 arg_0           = dword ptr  4
.text:00402680 arg_4           = dword ptr  8
.text:00402680 arg_8           = dword ptr  0Ch
.text:00402680 arg_C           = dword ptr  10h
.text:00402680 arg_10          = dword ptr  14h
.text:00402680 arg_14          = dword ptr  18h
.text:00402680 arg_18          = dword ptr  1Ch
.text:00402680
.text:00402680                 sub     esp, 2Ch
.text:00402683                 mov     edx, dword_405020
.text:00402689                 mov     [esp+2Ch+var_10], offset dword_406010 ; int
.text:00402691                 mov     ecx, dword_405024
.text:00402697                 mov     ds:dword_406010, edx
.text:0040269D                 mov     edx, [esp+2Ch+arg_18]
.text:004026A1                 mov     ds:dword_406014, ecx
.text:004026A7                 mov     ecx, [esp+2Ch+arg_14]
.text:004026AB                 mov     [esp+2Ch+var_14], edx ; int
.text:004026AF                 mov     edx, [esp+2Ch+arg_10]
.text:004026B3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004026B7                 mov     ecx, [esp+2Ch+arg_C]
.text:004026BB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004026BF                 mov     edx, [esp+2Ch+arg_8]
.text:004026C3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004026C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004026CB                 mov     [esp+2Ch+Str], edx ; Str
.text:004026CF                 mov     edx, [esp+2Ch+arg_0]
.text:004026D3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004026D7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004026DA                 call    sub_401AF0
.text:004026DF                 mov     ecx, ds:dword_406010
.text:004026E5                 mov     dword_405020, ecx
.text:004026EB                 mov     ecx, ds:dword_40601C
.text:004026F1                 mov     ds:dword_4061C0, ecx
.text:004026F7                 mov     ecx, ds:dword_406018
.text:004026FD                 mov     dword_405028, ecx
.text:00402703                 add     esp, 2Ch
.text:00402706                 retn
.text:00402706 sub_402680      endp
.text:00402706
.text:00402706 ; ---------------------------------------------------------------------------
.text:00402707                 align 10h
.text:00402710                 sub     esp, 2Ch
.text:00402713                 mov     edx, dword_405020
.text:00402719                 mov     dword ptr [esp+1Ch], offset dword_406010
.text:00402721                 mov     ecx, dword_405024
.text:00402727                 mov     dword ptr [esp+18h], 1
.text:0040272F                 mov     ds:dword_406010, edx
.text:00402735                 mov     edx, [esp+38h]
.text:00402739                 mov     ds:dword_406014, ecx
.text:0040273F                 mov     ecx, [esp+34h]
.text:00402743                 mov     [esp+8], edx
.text:00402747                 mov     edx, [esp+30h]
.text:0040274B                 mov     [esp+4], ecx
.text:0040274F                 mov     dword ptr [esp+14h], 0
.text:00402757                 mov     dword ptr [esp+10h], 0
.text:0040275F                 mov     dword ptr [esp+0Ch], 0
.text:00402767                 mov     [esp], edx
.text:0040276A                 call    sub_401AF0
.text:0040276F                 mov     ecx, ds:dword_406010
.text:00402775                 mov     dword_405020, ecx
.text:0040277B                 mov     ecx, ds:dword_40601C
.text:00402781                 mov     ds:dword_4061C0, ecx
.text:00402787                 mov     ecx, ds:dword_406018
.text:0040278D                 mov     dword_405028, ecx
.text:00402793                 add     esp, 2Ch
.text:00402796                 retn
.text:00402796 ; ---------------------------------------------------------------------------
.text:00402797                 align 10h
.text:004027A0
.text:004027A0 ; =============== S U B R O U T I N E =======================================
.text:004027A0
.text:004027A0
.text:004027A0 sub_4027A0      proc near               ; CODE XREF: sub_401AF0+113↑p
.text:004027A0                                         ; sub_401AF0+AB9↑p
.text:004027A0
.text:004027A0 var_2C          = dword ptr -2Ch
.text:004027A0 var_28          = dword ptr -28h
.text:004027A0 var_24          = dword ptr -24h
.text:004027A0 var_20          = dword ptr -20h
.text:004027A0 var_1C          = dword ptr -1Ch
.text:004027A0 var_18          = dword ptr -18h
.text:004027A0 var_14          = dword ptr -14h
.text:004027A0 arg_0           = dword ptr  4
.text:004027A0 arg_4           = dword ptr  8
.text:004027A0
.text:004027A0                 push    ebp
.text:004027A1                 push    edi
.text:004027A2                 push    esi
.text:004027A3                 push    ebx
.text:004027A4                 sub     esp, 1Ch
.text:004027A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004027AB                 mov     eax, [esp+2Ch+arg_4]
.text:004027AF                 mov     ebx, [esp+2Ch+arg_4]
.text:004027B3                 mov     edx, [ecx+20h]
.text:004027B6                 mov     edi, [esp+2Ch+arg_0]
.text:004027BA                 mov     ecx, [ebx]
.text:004027BC                 mov     [esp+2Ch+var_2C], edx
.text:004027BF                 mov     [esp+2Ch+var_14], edx
.text:004027C3                 mov     edx, [eax+24h]
.text:004027C6                 mov     [esp+2Ch+var_28], ecx
.text:004027CA                 mov     [esp+2Ch+var_1C], ecx
.text:004027CE                 cmp     ecx, edx
.text:004027D0                 mov     [esp+2Ch+var_18], edx
.text:004027D4                 jle     short loc_402850
.text:004027D6                 mov     esi, [esp+2Ch+var_2C]
.text:004027D9                 cmp     edx, esi
.text:004027DB                 jle     short loc_402850
.text:004027DD                 lea     esi, [esi+0]
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: sub_4027A0+A1↓j
.text:004027E0                 mov     ebx, [esp+2Ch+var_1C]
.text:004027E4                 mov     edx, [esp+2Ch+var_18]
.text:004027E8                 mov     ebp, [esp+2Ch+var_18]
.text:004027EC                 mov     eax, [esp+2Ch+var_14]
.text:004027F0                 sub     ebx, edx
.text:004027F2                 mov     [esp+2Ch+var_20], ebx
.text:004027F6                 sub     ebp, eax
.text:004027F8                 cmp     ebx, ebp
.text:004027FA                 jle     short loc_402875
.text:004027FC                 xor     esi, esi
.text:004027FE                 cmp     esi, ebp
.text:00402800                 jge     short loc_40282D
.text:00402802                 mov     ecx, [esp+2Ch+var_1C]
.text:00402806                 sub     ecx, ebp
.text:00402808                 mov     [esp+2Ch+var_24], ecx
.text:0040280C                 lea     esi, [esi+0]
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_4027A0+8B↓j
.text:00402810                 mov     ecx, [esp+2Ch+var_14]
.text:00402814                 mov     edx, [esp+2Ch+var_24]
.text:00402818                 add     ecx, esi
.text:0040281A                 add     edx, esi
.text:0040281C                 mov     ebx, [edi+ecx*4]
.text:0040281F                 mov     eax, [edi+edx*4]
.text:00402822                 inc     esi
.text:00402823                 cmp     esi, ebp
.text:00402825                 mov     [edi+ecx*4], eax
.text:00402828                 mov     [edi+edx*4], ebx
.text:0040282B                 jl      short loc_402810
.text:0040282D
.text:0040282D loc_40282D:                             ; CODE XREF: sub_4027A0+60↑j
.text:0040282D                 sub     [esp+2Ch+var_1C], ebp
.text:00402831
.text:00402831 loc_402831:                             ; CODE XREF: sub_4027A0+107↓j
.text:00402831                 mov     eax, [esp+2Ch+var_18]
.text:00402835                 cmp     [esp+2Ch+var_1C], eax
.text:00402839                 jle     short loc_402850
.text:0040283B                 mov     ebp, [esp+2Ch+var_14]
.text:0040283F                 cmp     eax, ebp
.text:00402841                 jg      short loc_4027E0
.text:00402843                 lea     esi, [esi+0]
.text:00402849                 lea     edi, [edi+0]
.text:00402850
.text:00402850 loc_402850:                             ; CODE XREF: sub_4027A0+34↑j
.text:00402850                                         ; sub_4027A0+3B↑j ...
.text:00402850                 mov     esi, [esp+2Ch+var_28]
.text:00402854                 mov     ecx, [esp+2Ch+var_18]
.text:00402858                 mov     eax, [esp+2Ch+var_2C]
.text:0040285B                 mov     edi, [esp+2Ch+arg_4]
.text:0040285F                 mov     edx, [esp+2Ch+var_28]
.text:00402863                 sub     esi, ecx
.text:00402865                 add     esi, eax
.text:00402867                 mov     [edi+20h], esi
.text:0040286A                 mov     [edi+24h], edx
.text:0040286D                 add     esp, 1Ch
.text:00402870                 pop     ebx
.text:00402871                 pop     esi
.text:00402872                 pop     edi
.text:00402873                 pop     ebp
.text:00402874                 retn
.text:00402875 ; ---------------------------------------------------------------------------
.text:00402875
.text:00402875 loc_402875:                             ; CODE XREF: sub_4027A0+5A↑j
.text:00402875                 xor     esi, esi
.text:00402877                 cmp     esi, [esp+2Ch+var_20]
.text:0040287B                 jge     short loc_40289F
.text:0040287D                 lea     esi, [esi+0]
.text:00402880
.text:00402880 loc_402880:                             ; CODE XREF: sub_4027A0+FD↓j
.text:00402880                 mov     ebx, [esp+2Ch+var_14]
.text:00402884                 mov     ebp, [esp+2Ch+var_18]
.text:00402888                 add     ebx, esi
.text:0040288A                 add     ebp, esi
.text:0040288C                 mov     edx, [edi+ebx*4]
.text:0040288F                 inc     esi
.text:00402890                 cmp     esi, [esp+2Ch+var_20]
.text:00402894                 mov     ecx, [edi+ebp*4]
.text:00402897                 mov     [edi+ebx*4], ecx
.text:0040289A                 mov     [edi+ebp*4], edx
.text:0040289D                 jl      short loc_402880
.text:0040289F
.text:0040289F loc_40289F:                             ; CODE XREF: sub_4027A0+DB↑j
.text:0040289F                 mov     esi, [esp+2Ch+var_20]
.text:004028A3                 add     [esp+2Ch+var_14], esi
.text:004028A7                 jmp     short loc_402831
.text:004028A7 sub_4027A0      endp
.text:004028A7
.text:004028A7 ; ---------------------------------------------------------------------------
.text:004028A9                 align 20h
.text:004028C0                 sub     esp, 0Ch
.text:004028C3                 mov     edx, [esp+14h]
.text:004028C7                 mov     dword ptr [esp+4], 5
.text:004028CF                 mov     [esp+8], edx
.text:004028D3                 mov     edx, [esp+10h]
.text:004028D7                 mov     [esp], edx
.text:004028DA                 call    sub_403E30
.text:004028DF                 add     esp, 0Ch
.text:004028E2                 retn
.text:004028E2 ; ---------------------------------------------------------------------------
.text:004028E3                 align 10h
.text:004028F0
.text:004028F0 ; =============== S U B R O U T I N E =======================================
.text:004028F0
.text:004028F0
.text:004028F0 ; int __cdecl sub_4028F0(char *)
.text:004028F0 sub_4028F0      proc near               ; CODE XREF: sub_401520+250↑p
.text:004028F0
.text:004028F0 var_C           = dword ptr -0Ch
.text:004028F0 var_8           = dword ptr -8
.text:004028F0 var_4           = dword ptr -4
.text:004028F0 arg_0           = dword ptr  4
.text:004028F0
.text:004028F0                 sub     esp, 0Ch
.text:004028F3                 mov     edx, [esp+0Ch+arg_0]
.text:004028F7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004028FF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402906                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040290A                 call    sub_403E30
.text:0040290F                 add     esp, 0Ch
.text:00402912                 retn
.text:00402912 sub_4028F0      endp
.text:00402912
.text:00402912 ; ---------------------------------------------------------------------------
.text:00402913                 align 10h
.text:00402920 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00402920                                         ; DATA XREF: .data:Buffer↓o
.text:00402952 ; const char Format[]
.text:00402952 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_402C10+50↓o
.text:0040295E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040295E                                         ; DATA XREF: sub_402C10:loc_402CB1↓o
.text:0040296E                 align 20h
.text:00402980 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00402980                                         ; DATA XREF: sub_402C10+100↓o
.text:00402980                 db 'ere is NO',0Ah
.text:00402980                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00402980                 db 'R PURPOSE.',0Ah,0
.text:00402A18 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00402A18                                         ; DATA XREF: sub_402C10:loc_402D51↓o
.text:00402A2F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00402A2F                                         ; DATA XREF: sub_402C10:loc_402D5D↓o
.text:00402A4B                 align 20h
.text:00402A60 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00402A60                                         ; DATA XREF: sub_402C10:loc_402D69↓o
.text:00402A60                 db 'and %s.',0Ah,0
.text:00402A80 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00402A80                                         ; DATA XREF: sub_402C10:loc_402D75↓o
.text:00402A80                 db '%s, and %s.',0Ah,0
.text:00402AA4                 align 20h
.text:00402AC0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00402AC0                                         ; DATA XREF: sub_402C10:loc_402D81↓o
.text:00402AC0                 db '%s, %s, and %s.',0Ah,0
.text:00402AE8                 align 20h
.text:00402B00 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00402B00                                         ; DATA XREF: sub_402C10:loc_402D8D↓o
.text:00402B00                 db '%s, %s, %s, and %s.',0Ah,0
.text:00402B2C                 align 20h
.text:00402B40 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00402B40                                         ; DATA XREF: sub_402C10:loc_402D99↓o
.text:00402B40                 db '%s, %s, %s, %s,',0Ah
.text:00402B40                 db 'and %s.',0Ah,0
.text:00402B70                 align 20h
.text:00402B80 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00402B80                                         ; DATA XREF: sub_402C10:loc_402DA5↓o
.text:00402B80                 db '%s, %s, %s, %s,',0Ah
.text:00402B80                 db '%s, and %s.',0Ah,0
.text:00402BB4                 align 10h
.text:00402BC0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00402BC0                                         ; DATA XREF: sub_402C10:def_402C7D↓o
.text:00402BC0                 db '%s, %s, %s, %s,',0Ah
.text:00402BC0                 db '%s, %s, and others.',0Ah,0
.text:00402BFC ; const char aSS[]
.text:00402BFC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_402C10+1B5↓o
.text:00402C03                 align 10h
.text:00402C10
.text:00402C10 ; =============== S U B R O U T I N E =======================================
.text:00402C10
.text:00402C10
.text:00402C10 ; int __cdecl sub_402C10(FILE *, FILE *, int, int, va_list)
.text:00402C10 sub_402C10      proc near               ; CODE XREF: sub_402DE0+2A↓p
.text:00402C10
.text:00402C10 Stream          = dword ptr -2Ch
.text:00402C10 Format          = dword ptr -28h
.text:00402C10 ArgList         = dword ptr -24h
.text:00402C10 var_20          = dword ptr -20h
.text:00402C10 var_1C          = dword ptr -1Ch
.text:00402C10 var_14          = dword ptr -14h
.text:00402C10 arg_0           = dword ptr  4
.text:00402C10 arg_4           = dword ptr  8
.text:00402C10 arg_8           = dword ptr  0Ch
.text:00402C10 arg_C           = dword ptr  10h
.text:00402C10 arg_10          = dword ptr  14h
.text:00402C10
.text:00402C10                 push    ebp
.text:00402C11                 push    edi
.text:00402C12                 push    esi
.text:00402C13                 push    ebx
.text:00402C14                 sub     esp, 1Ch
.text:00402C17                 xor     ebx, ebx
.text:00402C19                 mov     edi, [esp+2Ch+arg_10]
.text:00402C1D                 mov     edx, [esp+2Ch+arg_8]
.text:00402C21                 mov     esi, [esp+2Ch+arg_0]
.text:00402C25                 mov     eax, [edi]
.text:00402C27                 mov     ecx, [esp+2Ch+arg_4]
.text:00402C2B                 mov     [esp+2Ch+var_14], edx
.text:00402C2F                 mov     ebp, [esp+2Ch+arg_C]
.text:00402C33                 lea     edx, [edi+4]
.text:00402C36                 test    eax, eax
.text:00402C38                 jz      short loc_402C4C
.text:00402C3A                 lea     esi, [esi+0]
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402C10+3A↓j
.text:00402C40                 mov     eax, edx
.text:00402C42                 inc     ebx
.text:00402C43                 mov     eax, [eax]
.text:00402C45                 add     edx, 4
.text:00402C48                 test    eax, eax
.text:00402C4A                 jnz     short loc_402C40
.text:00402C4C
.text:00402C4C loc_402C4C:                             ; CODE XREF: sub_402C10+28↑j
.text:00402C4C                 test    ecx, ecx
.text:00402C4E                 jz      loc_402DBD
.text:00402C54                 mov     [esp+2Ch+var_1C], ebp
.text:00402C58                 mov     edx, [esp+2Ch+var_14]
.text:00402C5C                 mov     [esp+2Ch+ArgList], ecx
.text:00402C60                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00402C68                 mov     [esp+2Ch+var_20], edx
.text:00402C6C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402C6F                 call    fprintf
.text:00402C74
.text:00402C74 loc_402C74:                             ; CODE XREF: sub_402C10+1C9↓j
.text:00402C74                 cmp     ebx, 9          ; switch 10 cases
.text:00402C77                 ja      def_402C7D      ; jumptable 00402C7D default case
.text:00402C7D                 jmp     ds:jpt_402C7D[ebx*4] ; switch jump
.text:00402C7D ; ---------------------------------------------------------------------------
.text:00402C84 jpt_402C7D      dd offset loc_402CAC    ; DATA XREF: sub_402C10+6D↑r
.text:00402C84                 dd offset loc_402CB1    ; jump table for switch statement
.text:00402C84                 dd offset loc_402D51
.text:00402C84                 dd offset loc_402D5D
.text:00402C84                 dd offset loc_402D69
.text:00402C84                 dd offset loc_402D75
.text:00402C84                 dd offset loc_402D81
.text:00402C84                 dd offset loc_402D8D
.text:00402C84                 dd offset loc_402D99
.text:00402C84                 dd offset loc_402DA5
.text:00402CAC ; ---------------------------------------------------------------------------
.text:00402CAC
.text:00402CAC loc_402CAC:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402CAC                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402CAC                 call    abort           ; jumptable 00402C7D case 0
.text:00402CB1 ; ---------------------------------------------------------------------------
.text:00402CB1
.text:00402CB1 loc_402CB1:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402CB1                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402CB1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00402C7D case 1
.text:00402CB8                 nop
.text:00402CB9                 lea     esi, [esi+0]
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_402C10+148↓j
.text:00402CC0                                         ; sub_402C10+154↓j ...
.text:00402CC0                 call    ds:libintl_gettext
.text:00402CC6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00402CCA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402CCD                 mov     [esp+2Ch+Format], eax ; Format
.text:00402CD1                 call    vfprintf
.text:00402CD6                 mov     ebx, [esi+4]
.text:00402CD9                 dec     ebx
.text:00402CDA                 test    ebx, ebx
.text:00402CDC                 mov     [esi+4], ebx
.text:00402CDF                 js      short loc_402D3F
.text:00402CE1                 mov     edi, [esi]
.text:00402CE3                 mov     byte ptr [edi], 0Ah
.text:00402CE6                 inc     dword ptr [esi]
.text:00402CE8
.text:00402CE8 loc_402CE8:                             ; CODE XREF: sub_402C10+13F↓j
.text:00402CE8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00402CEC                 mov     edx, Buffer
.text:00402CF2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00402CF5                 call    fputs
.text:00402CFA                 mov     ebp, [esi+4]
.text:00402CFD                 dec     ebp
.text:00402CFE                 test    ebp, ebp
.text:00402D00                 mov     [esi+4], ebp
.text:00402D03                 js      short loc_402D2D
.text:00402D05                 mov     ecx, [esi]
.text:00402D07                 mov     byte ptr [ecx], 0Ah
.text:00402D0A                 inc     dword ptr [esi]
.text:00402D0C
.text:00402D0C loc_402D0C:                             ; CODE XREF: sub_402C10+12D↓j
.text:00402D0C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00402D10                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00402D17                 call    ds:libintl_gettext
.text:00402D1D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00402D21                 add     esp, 1Ch
.text:00402D24                 pop     ebx
.text:00402D25                 pop     esi
.text:00402D26                 pop     edi
.text:00402D27                 pop     ebp
.text:00402D28                 jmp     fputs
.text:00402D2D ; ---------------------------------------------------------------------------
.text:00402D2D
.text:00402D2D loc_402D2D:                             ; CODE XREF: sub_402C10+F3↑j
.text:00402D2D                 mov     [esp+2Ch+Format], esi ; File
.text:00402D31                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402D38                 call    _flsbuf
.text:00402D3D                 jmp     short loc_402D0C
.text:00402D3F ; ---------------------------------------------------------------------------
.text:00402D3F
.text:00402D3F loc_402D3F:                             ; CODE XREF: sub_402C10+CF↑j
.text:00402D3F                 mov     [esp+2Ch+Format], esi ; File
.text:00402D43                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00402D4A                 call    _flsbuf
.text:00402D4F                 jmp     short loc_402CE8
.text:00402D51 ; ---------------------------------------------------------------------------
.text:00402D51
.text:00402D51 loc_402D51:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402D51                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402D51                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00402C7D case 2
.text:00402D58                 jmp     loc_402CC0
.text:00402D5D ; ---------------------------------------------------------------------------
.text:00402D5D
.text:00402D5D loc_402D5D:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402D5D                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402D5D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00402C7D case 3
.text:00402D64                 jmp     loc_402CC0
.text:00402D69 ; ---------------------------------------------------------------------------
.text:00402D69
.text:00402D69 loc_402D69:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402D69                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402D69                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00402C7D case 4
.text:00402D70                 jmp     loc_402CC0
.text:00402D75 ; ---------------------------------------------------------------------------
.text:00402D75
.text:00402D75 loc_402D75:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402D75                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402D75                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00402C7D case 5
.text:00402D7C                 jmp     loc_402CC0
.text:00402D81 ; ---------------------------------------------------------------------------
.text:00402D81
.text:00402D81 loc_402D81:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402D81                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402D81                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00402C7D case 6
.text:00402D88                 jmp     loc_402CC0
.text:00402D8D ; ---------------------------------------------------------------------------
.text:00402D8D
.text:00402D8D loc_402D8D:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402D8D                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402D8D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00402C7D case 7
.text:00402D94                 jmp     loc_402CC0
.text:00402D99 ; ---------------------------------------------------------------------------
.text:00402D99
.text:00402D99 loc_402D99:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402D99                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402D99                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00402C7D case 8
.text:00402DA0                 jmp     loc_402CC0
.text:00402DA5 ; ---------------------------------------------------------------------------
.text:00402DA5
.text:00402DA5 loc_402DA5:                             ; CODE XREF: sub_402C10+6D↑j
.text:00402DA5                                         ; DATA XREF: sub_402C10:jpt_402C7D↑o
.text:00402DA5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00402C7D case 9
.text:00402DAC                 jmp     loc_402CC0
.text:00402DB1 ; ---------------------------------------------------------------------------
.text:00402DB1
.text:00402DB1 def_402C7D:                             ; CODE XREF: sub_402C10+67↑j
.text:00402DB1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00402C7D default case
.text:00402DB8                 jmp     loc_402CC0
.text:00402DBD ; ---------------------------------------------------------------------------
.text:00402DBD
.text:00402DBD loc_402DBD:                             ; CODE XREF: sub_402C10+3E↑j
.text:00402DBD                 mov     [esp+2Ch+var_20], ebp
.text:00402DC1                 mov     ecx, [esp+2Ch+var_14]
.text:00402DC5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00402DCD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402DD0                 mov     [esp+2Ch+ArgList], ecx
.text:00402DD4                 call    fprintf
.text:00402DD9                 jmp     loc_402C74
.text:00402DD9 sub_402C10      endp
.text:00402DD9
.text:00402DD9 ; ---------------------------------------------------------------------------
.text:00402DDE                 align 10h
.text:00402DE0
.text:00402DE0 ; =============== S U B R O U T I N E =======================================
.text:00402DE0
.text:00402DE0
.text:00402DE0 ; int __cdecl sub_402DE0(FILE *, FILE *, int, int, char)
.text:00402DE0 sub_402DE0      proc near               ; CODE XREF: sub_401520+140↑p
.text:00402DE0
.text:00402DE0 var_1C          = dword ptr -1Ch
.text:00402DE0 var_18          = dword ptr -18h
.text:00402DE0 var_14          = dword ptr -14h
.text:00402DE0 var_10          = dword ptr -10h
.text:00402DE0 var_C           = dword ptr -0Ch
.text:00402DE0 arg_0           = dword ptr  4
.text:00402DE0 arg_4           = dword ptr  8
.text:00402DE0 arg_8           = dword ptr  0Ch
.text:00402DE0 arg_C           = dword ptr  10h
.text:00402DE0 arg_10          = byte ptr  14h
.text:00402DE0
.text:00402DE0                 sub     esp, 1Ch
.text:00402DE3                 mov     edx, [esp+1Ch+arg_C]
.text:00402DE7                 lea     ecx, [esp+1Ch+arg_10]
.text:00402DEB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00402DEF                 mov     ecx, [esp+1Ch+arg_8]
.text:00402DF3                 mov     [esp+1Ch+var_10], edx ; int
.text:00402DF7                 mov     edx, [esp+1Ch+arg_4]
.text:00402DFB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00402DFF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00402E03                 mov     edx, [esp+1Ch+arg_0]
.text:00402E07                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00402E0A                 call    sub_402C10
.text:00402E0F                 add     esp, 1Ch
.text:00402E12                 retn
.text:00402E12 sub_402DE0      endp
.text:00402E12
.text:00402E12 ; ---------------------------------------------------------------------------
.text:00402E13                 align 10h
.text:00402E20
.text:00402E20 ; =============== S U B R O U T I N E =======================================
.text:00402E20
.text:00402E20
.text:00402E20 ; int __cdecl sub_402E20(int, int, char *, int, int)
.text:00402E20 sub_402E20      proc near               ; CODE XREF: sub_401520+9F↑p
.text:00402E20
.text:00402E20 var_1C          = dword ptr -1Ch
.text:00402E20 var_18          = dword ptr -18h
.text:00402E20 var_14          = dword ptr -14h
.text:00402E20 var_10          = dword ptr -10h
.text:00402E20 var_C           = dword ptr -0Ch
.text:00402E20 var_8           = dword ptr -8
.text:00402E20 var_4           = dword ptr -4
.text:00402E20 arg_0           = dword ptr  4
.text:00402E20 arg_4           = dword ptr  8
.text:00402E20 arg_8           = dword ptr  0Ch
.text:00402E20 arg_C           = dword ptr  10h
.text:00402E20 arg_10          = dword ptr  14h
.text:00402E20
.text:00402E20                 sub     esp, 1Ch
.text:00402E23                 mov     edx, [esp+1Ch+arg_C]
.text:00402E27                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402E2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00402E33                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402E3B                 mov     [esp+1Ch+var_10], edx ; int
.text:00402E3F                 mov     edx, [esp+1Ch+arg_4]
.text:00402E43                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402E47                 mov     ecx, [esp+1Ch+arg_8]
.text:00402E4B                 mov     [esp+1Ch+var_18], edx ; int
.text:00402E4F                 mov     edx, [esp+1Ch+arg_0]
.text:00402E53                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402E57                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402E5A                 call    sub_402680
.text:00402E5F                 add     esp, 1Ch
.text:00402E62                 retn
.text:00402E62 sub_402E20      endp
.text:00402E62
.text:00402E62 ; ---------------------------------------------------------------------------
.text:00402E63                 align 10h
.text:00402E70                 sub     esp, 2Ch
.text:00402E73                 mov     edx, [esp+44h]
.text:00402E77                 mov     dword ptr [esp+18h], 0
.text:00402E7F                 mov     ecx, [esp+40h]
.text:00402E83                 mov     dword ptr [esp+14h], 0
.text:00402E8B                 mov     [esp+1Ch], edx
.text:00402E8F                 mov     edx, [esp+3Ch]
.text:00402E93                 mov     [esp+10h], ecx
.text:00402E97                 mov     ecx, [esp+38h]
.text:00402E9B                 mov     [esp+0Ch], edx
.text:00402E9F                 mov     edx, [esp+34h]
.text:00402EA3                 mov     [esp+8], ecx
.text:00402EA7                 mov     [esp+4], edx
.text:00402EAB                 mov     edx, [esp+30h]
.text:00402EAF                 mov     [esp], edx
.text:00402EB2                 call    sub_401AF0
.text:00402EB7                 add     esp, 2Ch
.text:00402EBA                 retn
.text:00402EBA ; ---------------------------------------------------------------------------
.text:00402EBB                 align 10h
.text:00402EC0                 sub     esp, 1Ch
.text:00402EC3                 mov     edx, [esp+2Ch]
.text:00402EC7                 mov     dword ptr [esp+18h], 0
.text:00402ECF                 mov     ecx, [esp+30h]
.text:00402ED3                 mov     dword ptr [esp+14h], 1
.text:00402EDB                 mov     [esp+0Ch], edx
.text:00402EDF                 mov     edx, [esp+24h]
.text:00402EE3                 mov     [esp+10h], ecx
.text:00402EE7                 mov     ecx, [esp+28h]
.text:00402EEB                 mov     [esp+4], edx
.text:00402EEF                 mov     edx, [esp+20h]
.text:00402EF3                 mov     [esp+8], ecx
.text:00402EF7                 mov     [esp], edx
.text:00402EFA                 call    sub_402680
.text:00402EFF                 add     esp, 1Ch
.text:00402F02                 retn
.text:00402F02 ; ---------------------------------------------------------------------------
.text:00402F03                 align 10h
.text:00402F10                 sub     esp, 2Ch
.text:00402F13                 mov     edx, [esp+44h]
.text:00402F17                 mov     dword ptr [esp+18h], 0
.text:00402F1F                 mov     ecx, [esp+40h]
.text:00402F23                 mov     dword ptr [esp+14h], 1
.text:00402F2B                 mov     [esp+1Ch], edx
.text:00402F2F                 mov     edx, [esp+3Ch]
.text:00402F33                 mov     [esp+10h], ecx
.text:00402F37                 mov     ecx, [esp+38h]
.text:00402F3B                 mov     [esp+0Ch], edx
.text:00402F3F                 mov     edx, [esp+34h]
.text:00402F43                 mov     [esp+8], ecx
.text:00402F47                 mov     [esp+4], edx
.text:00402F4B                 mov     edx, [esp+30h]
.text:00402F4F                 mov     [esp], edx
.text:00402F52                 call    sub_401AF0
.text:00402F57                 add     esp, 2Ch
.text:00402F5A                 retn
.text:00402F5A ; ---------------------------------------------------------------------------
.text:00402F5B                 align 10h
.text:00402F60                 mov     edx, [esp+4]
.text:00402F64                 mov     ds:dword_406040, edx
.text:00402F6A                 retn
.text:00402F6A ; ---------------------------------------------------------------------------
.text:00402F6B aWriteError     db 'write error',0      ; DATA XREF: sub_402F90:loc_402FD9↓o
.text:00402F77 ; const char aSS_0[]
.text:00402F77 aSS_0           db '%s: %s',0           ; DATA XREF: sub_402F90+77↓o
.text:00402F7E ; const char aS_3[]
.text:00402F7E aS_3            db '%s',0               ; DATA XREF: sub_402F90+A0↓o
.text:00402F81 ; ---------------------------------------------------------------------------
.text:00402F81                 jmp     short sub_402F90
.text:00402F81 ; ---------------------------------------------------------------------------
.text:00402F83                 align 10h
.text:00402F90
.text:00402F90 ; =============== S U B R O U T I N E =======================================
.text:00402F90
.text:00402F90
.text:00402F90 ; void __cdecl sub_402F90()
.text:00402F90 sub_402F90      proc near               ; CODE XREF: .text:00402F81↑j
.text:00402F90                                         ; DATA XREF: sub_401520+5B↑o
.text:00402F90
.text:00402F90 Stream          = dword ptr -2Ch
.text:00402F90 ErrorMessage    = dword ptr -28h
.text:00402F90 var_24          = dword ptr -24h
.text:00402F90 var_20          = byte ptr -20h
.text:00402F90 var_1C          = dword ptr -1Ch
.text:00402F90 var_9           = byte ptr -9
.text:00402F90
.text:00402F90                 push    esi
.text:00402F91                 push    ebx
.text:00402F92                 sub     esp, 24h
.text:00402F95                 mov     edx, ds:_iob
.text:00402F9B                 mov     ecx, [edx+2Ch]
.text:00402F9E                 lea     esi, [edx+20h]
.text:00402FA1                 shr     ecx, 5
.text:00402FA4                 mov     bl, cl
.text:00402FA6                 mov     ecx, [edx+20h]
.text:00402FA9                 and     bl, 1
.text:00402FAC                 cmp     ecx, [esi+8]
.text:00402FAF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402FB2                 setz    [esp+2Ch+var_9]
.text:00402FB7                 call    fclose
.text:00402FBC                 test    eax, eax
.text:00402FBE                 setnz   al
.text:00402FC1                 test    bl, bl
.text:00402FC3                 jnz     loc_403053
.text:00402FC9                 test    al, al
.text:00402FCB                 jz      short loc_403020
.text:00402FCD
.text:00402FCD loc_402FCD:                             ; CODE XREF: sub_402F90+CD↓j
.text:00402FCD                 call    _errno
.text:00402FD2                 mov     esi, [eax]
.text:00402FD4
.text:00402FD4 loc_402FD4:                             ; CODE XREF: sub_402F90+C7↓j
.text:00402FD4                 cmp     esi, 9
.text:00402FD7                 jz      short loc_403046
.text:00402FD9
.text:00402FD9 loc_402FD9:                             ; CODE XREF: sub_402F90+B8↓j
.text:00402FD9                                         ; sub_402F90+C1↓j
.text:00402FD9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402FE0                 call    ds:libintl_gettext
.text:00402FE6                 mov     ebx, eax
.text:00402FE8                 mov     eax, ds:dword_406040
.text:00402FED                 test    eax, eax
.text:00402FEF                 jz      short loc_403026
.text:00402FF1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402FF4                 call    sub_4041A0
.text:00402FF9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402FFD                 mov     edx, Code
.text:00403003                 mov     [esp+2Ch+var_1C], ebx
.text:00403007                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040300F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403013                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403016                 call    sub_404790
.text:0040301B                 nop
.text:0040301C                 lea     esi, [esi+0]
.text:00403020
.text:00403020 loc_403020:                             ; CODE XREF: sub_402F90+3B↑j
.text:00403020                                         ; sub_402F90+B4↓j ...
.text:00403020                 add     esp, 24h
.text:00403023                 pop     ebx
.text:00403024                 pop     esi
.text:00403025                 retn
.text:00403026 ; ---------------------------------------------------------------------------
.text:00403026
.text:00403026 loc_403026:                             ; CODE XREF: sub_402F90+5F↑j
.text:00403026                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040302A                 mov     ebx, Code
.text:00403030                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00403038                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040303C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040303F                 call    sub_404790
.text:00403044                 jmp     short loc_403020
.text:00403046 ; ---------------------------------------------------------------------------
.text:00403046
.text:00403046 loc_403046:                             ; CODE XREF: sub_402F90+47↑j
.text:00403046                 test    bl, bl
.text:00403048                 jnz     short loc_402FD9
.text:0040304A                 cmp     [esp+2Ch+var_9], 0
.text:0040304F                 jnz     short loc_403020
.text:00403051                 jmp     short loc_402FD9
.text:00403053 ; ---------------------------------------------------------------------------
.text:00403053
.text:00403053 loc_403053:                             ; CODE XREF: sub_402F90+33↑j
.text:00403053                 xor     esi, esi
.text:00403055                 test    al, al
.text:00403057                 jz      loc_402FD4
.text:0040305D                 jmp     loc_402FCD
.text:0040305D sub_402F90      endp
.text:0040305D
.text:0040305D ; ---------------------------------------------------------------------------
.text:00403062                 align 10h
.text:00403070 aLiteral        db 'literal',0          ; DATA XREF: .text:004030B0↓o
.text:00403078 aShell          db 'shell',0            ; DATA XREF: .text:004030B4↓o
.text:0040307E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004030B8↓o
.text:0040308B aC              db 'c',0                ; DATA XREF: .text:004030BC↓o
.text:0040308D aEscape         db 'escape',0           ; DATA XREF: .text:004030C0↓o
.text:00403094 aLocale         db 'locale',0           ; DATA XREF: .text:004030C4↓o
.text:0040309B aClocale        db 'clocale',0          ; DATA XREF: .text:004030C8↓o
.text:004030A3                 align 10h
.text:004030B0                 dd offset aLiteral      ; "literal"
.text:004030B4                 dd offset aShell        ; "shell"
.text:004030B8                 dd offset aShellAlways  ; "shell-always"
.text:004030BC                 dd offset aC            ; "c"
.text:004030C0                 dd offset aEscape       ; "escape"
.text:004030C4                 dd offset aLocale       ; "locale"
.text:004030C8                 dd offset aClocale      ; "clocale"
.text:004030CC                 dd 2 dup(0)
.text:004030D4                 dd 1, 2, 3, 4, 5, 6
.text:004030EC asc_4030EC:                             ; DATA XREF: sub_403100+7E↓o
.text:004030EC                                         ; sub_403100+A39↓o ...
.text:004030EC                 text "UTF-16LE", '"',27h,'`'
.text:004030F2                 align 10h
.text:00403100
.text:00403100 ; =============== S U B R O U T I N E =======================================
.text:00403100
.text:00403100
.text:00403100 ; int __cdecl sub_403100(int, int, char *Str, int, int, int)
.text:00403100 sub_403100      proc near               ; CODE XREF: sub_403100+43A↓p
.text:00403100                                         ; .text:00403CC3↓p ...
.text:00403100
.text:00403100 C               = dword ptr -4Ch
.text:00403100 Type            = dword ptr -48h
.text:00403100 SizeInBytes     = dword ptr -44h
.text:00403100 State           = dword ptr -40h
.text:00403100 var_3C          = dword ptr -3Ch
.text:00403100 var_38          = dword ptr -38h
.text:00403100 var_34          = dword ptr -34h
.text:00403100 var_30          = dword ptr -30h
.text:00403100 var_29          = byte ptr -29h
.text:00403100 var_28          = dword ptr -28h
.text:00403100 var_22          = byte ptr -22h
.text:00403100 var_21          = byte ptr -21h
.text:00403100 var_20          = dword ptr -20h
.text:00403100 var_1C          = dword ptr -1Ch
.text:00403100 var_18          = mbstate_t ptr -18h
.text:00403100 arg_0           = dword ptr  4
.text:00403100 arg_4           = dword ptr  8
.text:00403100 Str             = dword ptr  0Ch
.text:00403100 arg_C           = dword ptr  10h
.text:00403100 arg_10          = dword ptr  14h
.text:00403100 arg_14          = dword ptr  18h
.text:00403100
.text:00403100                 push    ebp
.text:00403101                 push    edi
.text:00403102                 push    esi
.text:00403103                 push    ebx
.text:00403104                 sub     esp, 3Ch
.text:00403107                 mov     edx, ds:__mb_cur_max
.text:0040310D                 mov     [esp+4Ch+var_34], 0
.text:00403115                 mov     [esp+4Ch+var_1C], 0
.text:0040311D                 cmp     dword ptr [edx], 1
.text:00403120                 mov     [esp+4Ch+var_20], 0
.text:00403128                 mov     [esp+4Ch+var_21], 0
.text:0040312D                 setz    [esp+4Ch+var_22]
.text:00403132                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403137                 ja      short def_40313D ; jumptable 0040313D default case, cases 0,1
.text:00403139                 mov     edx, [esp+4Ch+arg_10]
.text:0040313D                 jmp     ds:jpt_40313D[edx*4] ; switch jump
.text:0040313D ; ---------------------------------------------------------------------------
.text:00403144 jpt_40313D      dd offset def_40313D    ; DATA XREF: sub_403100+3D↑r
.text:00403144                 dd offset def_40313D    ; jump table for switch statement
.text:00403144                 dd offset loc_403A85
.text:00403144                 dd offset loc_403160
.text:00403144                 dd offset loc_403AAB
.text:00403144                 dd offset loc_403AB5
.text:00403144                 dd offset loc_403AB5
.text:00403160 ; ---------------------------------------------------------------------------
.text:00403160
.text:00403160 loc_403160:                             ; CODE XREF: sub_403100+3D↑j
.text:00403160                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403160                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040313D case 3
.text:00403164                 cmp     [esp+4Ch+var_34], eax
.text:00403168                 jnb     short loc_403171
.text:0040316A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040316E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403171
.text:00403171 loc_403171:                             ; CODE XREF: sub_403100+68↑j
.text:00403171                 mov     [esp+4Ch+var_34], 1
.text:00403179                 mov     [esp+4Ch+var_21], 1
.text:0040317E                 mov     [esp+4Ch+var_1C], offset asc_4030EC ; "\"'`"
.text:00403186
.text:00403186 loc_403186:                             ; CODE XREF: sub_403100+9A6↓j
.text:00403186                 mov     [esp+4Ch+var_20], 1
.text:0040318E
.text:0040318E def_40313D:                             ; CODE XREF: sub_403100+37↑j
.text:0040318E                                         ; sub_403100+3D↑j ...
.text:0040318E                 xor     ebp, ebp        ; jumptable 0040313D default case, cases 0,1
.text:00403190
.text:00403190 loc_403190:                             ; CODE XREF: sub_403100+3DB↓j
.text:00403190                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403195                 jz      loc_403A77
.text:0040319B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040319F
.text:0040319F loc_40319F:                             ; CODE XREF: sub_403100+980↓j
.text:0040319F                 jz      loc_403A0E
.text:004031A5                 cmp     [esp+4Ch+var_21], 0
.text:004031AA                 jz      short loc_4031F0
.text:004031AC                 mov     esi, [esp+4Ch+var_20]
.text:004031B0                 test    esi, esi
.text:004031B2                 jz      short loc_4031F0
.text:004031B4                 mov     ecx, [esp+4Ch+var_20]
.text:004031B8                 lea     edi, [ecx+ebp]
.text:004031BB                 cmp     edi, [esp+4Ch+arg_C]
.text:004031BF                 ja      short loc_4031F0
.text:004031C1                 cld
.text:004031C2                 mov     ebx, [esp+4Ch+Str]
.text:004031C6                 mov     edi, [esp+4Ch+var_1C]
.text:004031CA                 add     ebx, ebp
.text:004031CC                 mov     esi, ebx
.text:004031CE                 cmp     ecx, ecx
.text:004031D0                 repe cmpsb
.text:004031D2                 jnz     short loc_4031F0
.text:004031D4                 mov     edx, [esp+4Ch+arg_4]
.text:004031D8                 cmp     [esp+4Ch+var_34], edx
.text:004031DC                 jnb     short loc_4031EA
.text:004031DE                 mov     ecx, [esp+4Ch+arg_0]
.text:004031E2                 mov     eax, [esp+4Ch+var_34]
.text:004031E6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004031EA
.text:004031EA loc_4031EA:                             ; CODE XREF: sub_403100+DC↑j
.text:004031EA                 inc     [esp+4Ch+var_34]
.text:004031EE                 mov     esi, esi
.text:004031F0
.text:004031F0 loc_4031F0:                             ; CODE XREF: sub_403100+AA↑j
.text:004031F0                                         ; sub_403100+B2↑j ...
.text:004031F0                 mov     edi, [esp+4Ch+Str]
.text:004031F4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004031F9                 movzx   eax, bl
.text:004031FC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004031FF                 ja      def_403205      ; jumptable 00403205 default case, cases 1-6,14-31,64
.text:00403205                 jmp     ds:jpt_403205[eax*4] ; switch jump
.text:00403205 ; ---------------------------------------------------------------------------
.text:0040320C jpt_403205      dd offset loc_403408, offset def_403205, offset def_403205
.text:0040320C                                         ; DATA XREF: sub_403100+105↑r
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205 ; jump table for switch statement
.text:0040320C                 dd offset def_403205, offset loc_4034E0, offset loc_4034FE
.text:0040320C                 dd offset loc_403502, offset loc_403547, offset loc_40354B
.text:0040320C                 dd offset loc_40354F, offset loc_403553, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset def_403205
.text:0040320C                 dd offset def_403205, offset def_403205, offset loc_4039D8
.text:0040320C                 dd offset loc_4039D8, offset loc_4039D8, offset loc_4039FA
.text:0040320C                 dd offset loc_4039D8, offset def_403602, offset loc_4039D8
.text:0040320C                 dd offset loc_403557, offset loc_4039D8, offset loc_4039D8
.text:0040320C                 dd offset loc_4039D8, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset loc_4039D8
.text:0040320C                 dd offset loc_4039D8, offset loc_4039D8, offset loc_4039D8
.text:0040320C                 dd offset loc_4035BC, offset def_403205, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset loc_4039D8, offset loc_4039D1
.text:0040320C                 dd offset def_403602, offset loc_4039D8, offset def_403602
.text:0040320C                 dd offset loc_4039D8, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset def_403602, offset def_403602, offset def_403602
.text:0040320C                 dd offset loc_4039E8, offset loc_4039D8, offset loc_4039E8
.text:0040320C                 dd offset loc_4039FA
.text:00403408 ; ---------------------------------------------------------------------------
.text:00403408
.text:00403408 loc_403408:                             ; CODE XREF: sub_403100+105↑j
.text:00403408                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403408                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403205 case 0
.text:0040340D                 lea     eax, [ebp+1]
.text:00403410                 jz      loc_4034C0
.text:00403416                 mov     esi, [esp+4Ch+arg_4]
.text:0040341A                 cmp     [esp+4Ch+var_34], esi
.text:0040341E                 jnb     short loc_40342C
.text:00403420                 mov     eax, [esp+4Ch+arg_0]
.text:00403424                 mov     ebx, [esp+4Ch+var_34]
.text:00403428                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040342C
.text:0040342C loc_40342C:                             ; CODE XREF: sub_403100+31E↑j
.text:0040342C                 inc     [esp+4Ch+var_34]
.text:00403430                 mov     edx, [esp+4Ch+arg_4]
.text:00403434                 cmp     [esp+4Ch+var_34], edx
.text:00403438                 jnb     short loc_403446
.text:0040343A                 mov     edi, [esp+4Ch+arg_0]
.text:0040343E                 mov     ecx, [esp+4Ch+var_34]
.text:00403442                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403446
.text:00403446 loc_403446:                             ; CODE XREF: sub_403100+338↑j
.text:00403446                 inc     [esp+4Ch+var_34]
.text:0040344A                 mov     esi, [esp+4Ch+arg_4]
.text:0040344E                 cmp     [esp+4Ch+var_34], esi
.text:00403452                 jnb     short loc_403460
.text:00403454                 mov     ebx, [esp+4Ch+arg_0]
.text:00403458                 mov     eax, [esp+4Ch+var_34]
.text:0040345C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_403100+352↑j
.text:00403460                 inc     [esp+4Ch+var_34]
.text:00403464                 mov     bl, 30h ; '0'
.text:00403466                 lea     esi, [esi+0]
.text:00403469                 lea     edi, [edi+0]
.text:00403470
.text:00403470 def_403602:                             ; CODE XREF: sub_403100+105↑j
.text:00403470                                         ; sub_403100+463↓j ...
.text:00403470                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:00403470                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403475                 lea     eax, [ebp+1]
.text:00403478                 jz      short loc_4034C0
.text:0040347A                 mov     cl, bl
.text:0040347C                 mov     edi, [esp+4Ch+arg_14]
.text:00403480                 mov     esi, 1
.text:00403485                 shr     cl, 5
.text:00403488                 movzx   edx, cl
.text:0040348B                 mov     ecx, ebx
.text:0040348D                 and     ecx, 1Fh
.text:00403490                 shl     esi, cl
.text:00403492                 test    [edi+edx*4+4], esi
.text:00403496                 jz      short loc_4034B2
.text:00403498
.text:00403498 loc_403498:                             ; CODE XREF: sub_403100+3FC↓j
.text:00403498                 mov     edx, [esp+4Ch+arg_4]
.text:0040349C                 cmp     [esp+4Ch+var_34], edx
.text:004034A0                 jnb     short loc_4034AE
.text:004034A2                 mov     edi, [esp+4Ch+arg_0]
.text:004034A6                 mov     esi, [esp+4Ch+var_34]
.text:004034AA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004034AE
.text:004034AE loc_4034AE:                             ; CODE XREF: sub_403100+3A0↑j
.text:004034AE                 inc     [esp+4Ch+var_34]
.text:004034B2
.text:004034B2 loc_4034B2:                             ; CODE XREF: sub_403100+396↑j
.text:004034B2                 lea     eax, [ebp+1]
.text:004034B5                 lea     esi, [esi+0]
.text:004034B9                 lea     edi, [edi+0]
.text:004034C0
.text:004034C0 loc_4034C0:                             ; CODE XREF: sub_403100+310↑j
.text:004034C0                                         ; sub_403100+378↑j ...
.text:004034C0                 mov     ebp, [esp+4Ch+arg_4]
.text:004034C4                 cmp     [esp+4Ch+var_34], ebp
.text:004034C8                 jnb     short loc_4034D5
.text:004034CA                 mov     edx, [esp+4Ch+arg_0]
.text:004034CE                 mov     ecx, [esp+4Ch+var_34]
.text:004034D2                 mov     [ecx+edx], bl
.text:004034D5
.text:004034D5 loc_4034D5:                             ; CODE XREF: sub_403100+3C8↑j
.text:004034D5                 inc     [esp+4Ch+var_34]
.text:004034D9                 mov     ebp, eax
.text:004034DB                 jmp     loc_403190
.text:004034E0 ; ---------------------------------------------------------------------------
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_403100+105↑j
.text:004034E0                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004034E0                 mov     dl, 61h ; 'a'   ; jumptable 00403205 case 7
.text:004034E2                 lea     esi, [esi+0]
.text:004034E9                 lea     edi, [edi+0]
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_403100+400↓j
.text:004034F0                                         ; sub_403100+409↓j ...
.text:004034F0                 cmp     [esp+4Ch+var_21], 0
.text:004034F5                 lea     eax, [ebp+1]
.text:004034F8                 jz      short loc_4034C0
.text:004034FA                 mov     bl, dl
.text:004034FC                 jmp     short loc_403498
.text:004034FE ; ---------------------------------------------------------------------------
.text:004034FE
.text:004034FE loc_4034FE:                             ; CODE XREF: sub_403100+105↑j
.text:004034FE                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004034FE                 mov     dl, 62h ; 'b'   ; jumptable 00403205 case 8
.text:00403500                 jmp     short loc_4034F0
.text:00403502 ; ---------------------------------------------------------------------------
.text:00403502
.text:00403502 loc_403502:                             ; CODE XREF: sub_403100+105↑j
.text:00403502                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403502                 mov     dl, 74h ; 't'   ; jumptable 00403205 case 9
.text:00403504
.text:00403504 loc_403504:                             ; CODE XREF: sub_403100+449↓j
.text:00403504                                         ; sub_403100+455↓j ...
.text:00403504                 cmp     [esp+4Ch+arg_10], 1
.text:00403509                 jnz     short loc_4034F0
.text:0040350B
.text:0040350B loc_40350B:                             ; CODE XREF: sub_403100+45C↓j
.text:0040350B                                         ; sub_403100+4C1↓j ...
.text:0040350B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004038D2 cases 91,92,94,96,124
.text:00403513                 mov     eax, [esp+4Ch+arg_14]
.text:00403517                 mov     edx, [esp+4Ch+arg_C]
.text:0040351B                 mov     ecx, [esp+4Ch+Str]
.text:0040351F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403523                 mov     [esp+4Ch+var_38], eax ; int
.text:00403527                 mov     ebp, [esp+4Ch+arg_0]
.text:0040352B                 mov     [esp+4Ch+State], edx ; int
.text:0040352F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403533                 mov     [esp+4Ch+Type], ebx ; int
.text:00403537                 mov     [esp+4Ch+C], ebp ; int
.text:0040353A                 call    sub_403100
.text:0040353F
.text:0040353F loc_40353F:                             ; CODE XREF: sub_403100+972↓j
.text:0040353F                 add     esp, 3Ch
.text:00403542                 pop     ebx
.text:00403543                 pop     esi
.text:00403544                 pop     edi
.text:00403545                 pop     ebp
.text:00403546                 retn
.text:00403547 ; ---------------------------------------------------------------------------
.text:00403547
.text:00403547 loc_403547:                             ; CODE XREF: sub_403100+105↑j
.text:00403547                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403547                 mov     dl, 6Eh ; 'n'   ; jumptable 00403205 case 10
.text:00403549                 jmp     short loc_403504
.text:0040354B ; ---------------------------------------------------------------------------
.text:0040354B
.text:0040354B loc_40354B:                             ; CODE XREF: sub_403100+105↑j
.text:0040354B                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:0040354B                 mov     dl, 76h ; 'v'   ; jumptable 00403205 case 11
.text:0040354D                 jmp     short loc_4034F0
.text:0040354F ; ---------------------------------------------------------------------------
.text:0040354F
.text:0040354F loc_40354F:                             ; CODE XREF: sub_403100+105↑j
.text:0040354F                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:0040354F                 mov     dl, 66h ; 'f'   ; jumptable 00403205 case 12
.text:00403551                 jmp     short loc_4034F0
.text:00403553 ; ---------------------------------------------------------------------------
.text:00403553
.text:00403553 loc_403553:                             ; CODE XREF: sub_403100+105↑j
.text:00403553                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403553                 mov     dl, 72h ; 'r'   ; jumptable 00403205 case 13
.text:00403555                 jmp     short loc_403504
.text:00403557 ; ---------------------------------------------------------------------------
.text:00403557
.text:00403557 loc_403557:                             ; CODE XREF: sub_403100+105↑j
.text:00403557                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:00403557                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403205 case 39
.text:0040355C                 jz      short loc_40350B ; jumptable 004038D2 cases 91,92,94,96,124
.text:0040355E                 cmp     [esp+4Ch+arg_10], 2
.text:00403563                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:00403563                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403569                 mov     edx, [esp+4Ch+arg_4]
.text:0040356D                 cmp     [esp+4Ch+var_34], edx
.text:00403571                 jnb     short loc_40357F
.text:00403573                 mov     ecx, [esp+4Ch+arg_0]
.text:00403577                 mov     edi, [esp+4Ch+var_34]
.text:0040357B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040357F
.text:0040357F loc_40357F:                             ; CODE XREF: sub_403100+471↑j
.text:0040357F                 inc     [esp+4Ch+var_34]
.text:00403583                 mov     eax, [esp+4Ch+arg_4]
.text:00403587                 cmp     [esp+4Ch+var_34], eax
.text:0040358B                 jnb     short loc_403599
.text:0040358D                 mov     esi, [esp+4Ch+arg_0]
.text:00403591                 mov     edx, [esp+4Ch+var_34]
.text:00403595                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403599
.text:00403599 loc_403599:                             ; CODE XREF: sub_403100+48B↑j
.text:00403599                 inc     [esp+4Ch+var_34]
.text:0040359D                 mov     edi, [esp+4Ch+arg_4]
.text:004035A1                 cmp     [esp+4Ch+var_34], edi
.text:004035A5                 jnb     short loc_4035B3
.text:004035A7                 mov     ecx, [esp+4Ch+arg_0]
.text:004035AB                 mov     eax, [esp+4Ch+var_34]
.text:004035AF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004035B3
.text:004035B3 loc_4035B3:                             ; CODE XREF: sub_403100+4A5↑j
.text:004035B3                                         ; sub_403100+5C4↓j ...
.text:004035B3                 inc     [esp+4Ch+var_34]
.text:004035B7                 jmp     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035B7                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035BC ; ---------------------------------------------------------------------------
.text:004035BC
.text:004035BC loc_4035BC:                             ; CODE XREF: sub_403100+105↑j
.text:004035BC                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004035BC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403205 case 63
.text:004035C1                 jz      loc_40350B      ; jumptable 004038D2 cases 91,92,94,96,124
.text:004035C7                 cmp     [esp+4Ch+arg_10], 3
.text:004035CC                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035CC                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035D2                 lea     edx, [ebp+2]
.text:004035D5                 cmp     edx, [esp+4Ch+arg_C]
.text:004035D9                 jnb     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035D9                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035DF                 mov     esi, [esp+4Ch+Str]
.text:004035E3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004035E8                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035E8                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004035EE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004035F3                 movsx   eax, cl
.text:004035F6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004035F9                 cmp     eax, 1Dh
.text:004035FC                 ja      def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004035FC                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403602                 jmp     ds:jpt_403602[eax*4] ; switch jump
.text:00403602 ; ---------------------------------------------------------------------------
.text:00403609                 align 4
.text:0040360C jpt_403602      dd offset loc_403684    ; DATA XREF: sub_403100+502↑r
.text:0040360C                 dd offset def_403602    ; jump table for switch statement
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset def_403602
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:0040360C                 dd offset loc_403684
.text:00403684 ; ---------------------------------------------------------------------------
.text:00403684
.text:00403684 loc_403684:                             ; CODE XREF: sub_403100+502↑j
.text:00403684                                         ; DATA XREF: sub_403100:jpt_403602↑o
.text:00403684                 mov     ebp, edx        ; jumptable 00403602 cases 33,39-41,45,47,60-62
.text:00403686                 mov     bl, cl
.text:00403688                 mov     edx, [esp+4Ch+arg_4]
.text:0040368C                 cmp     [esp+4Ch+var_34], edx
.text:00403690                 jnb     short loc_40369E
.text:00403692                 mov     ecx, [esp+4Ch+arg_0]
.text:00403696                 mov     edi, [esp+4Ch+var_34]
.text:0040369A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040369E
.text:0040369E loc_40369E:                             ; CODE XREF: sub_403100+590↑j
.text:0040369E                 inc     [esp+4Ch+var_34]
.text:004036A2                 mov     eax, [esp+4Ch+arg_4]
.text:004036A6                 cmp     [esp+4Ch+var_34], eax
.text:004036AA                 jnb     short loc_4036B8
.text:004036AC                 mov     edx, [esp+4Ch+arg_0]
.text:004036B0                 mov     esi, [esp+4Ch+var_34]
.text:004036B4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004036B8
.text:004036B8 loc_4036B8:                             ; CODE XREF: sub_403100+5AA↑j
.text:004036B8                 inc     [esp+4Ch+var_34]
.text:004036BC                 mov     edi, [esp+4Ch+arg_4]
.text:004036C0                 cmp     [esp+4Ch+var_34], edi
.text:004036C4                 jnb     loc_4035B3
.text:004036CA                 mov     eax, [esp+4Ch+arg_0]
.text:004036CE                 mov     ecx, [esp+4Ch+var_34]
.text:004036D2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004036D6                 jmp     loc_4035B3
.text:004036D6 ; ---------------------------------------------------------------------------
.text:004036DB                 align 10h
.text:004036E0
.text:004036E0 def_403205:                             ; CODE XREF: sub_403100+FF↑j
.text:004036E0                                         ; sub_403100+105↑j
.text:004036E0                                         ; DATA XREF: ...
.text:004036E0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00403205 default case, cases 1-6,14-31,64
.text:004036E5                 jz      loc_403810
.text:004036EB                 mov     [esp+4Ch+var_28], 1
.text:004036F3                 mov     esi, ds:__mb_cur_max
.text:004036F9                 movzx   edx, bl
.text:004036FC                 cmp     dword ptr [esi], 1
.text:004036FF                 jz      loc_4037F4
.text:00403705                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040370D                 mov     [esp+4Ch+C], edx ; C
.text:00403710                 call    _isctype
.text:00403715
.text:00403715 loc_403715:                             ; CODE XREF: sub_403100+705↓j
.text:00403715                 test    eax, eax
.text:00403717                 setnz   [esp+4Ch+var_29]
.text:0040371C
.text:0040371C loc_40371C:                             ; CODE XREF: sub_403100+7A5↓j
.text:0040371C                 cmp     [esp+4Ch+var_21], 0
.text:00403721                 lea     eax, [ebp+1]
.text:00403724                 jz      loc_4034C0
.text:0040372A                 cmp     [esp+4Ch+var_29], 0
.text:0040372F                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:0040372F                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403735
.text:00403735 loc_403735:                             ; CODE XREF: sub_403100+7AB↓j
.text:00403735                 mov     eax, [esp+4Ch+var_28]
.text:00403739                 lea     edx, [eax+ebp]
.text:0040373C                 lea     esi, [esi+0]
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: sub_403100+6EF↓j
.text:00403740                 cmp     [esp+4Ch+var_21], 0
.text:00403745                 jz      short loc_4037C0
.text:00403747                 cmp     [esp+4Ch+var_29], 0
.text:0040374C                 jnz     short loc_4037C0
.text:0040374E                 mov     edi, [esp+4Ch+arg_4]
.text:00403752                 cmp     [esp+4Ch+var_34], edi
.text:00403756                 jnb     short loc_403764
.text:00403758                 mov     esi, [esp+4Ch+arg_0]
.text:0040375C                 mov     eax, [esp+4Ch+var_34]
.text:00403760                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403764
.text:00403764 loc_403764:                             ; CODE XREF: sub_403100+656↑j
.text:00403764                 inc     [esp+4Ch+var_34]
.text:00403768                 mov     ecx, [esp+4Ch+arg_4]
.text:0040376C                 cmp     [esp+4Ch+var_34], ecx
.text:00403770                 jnb     short loc_403785
.text:00403772                 mov     cl, bl
.text:00403774                 mov     esi, [esp+4Ch+arg_0]
.text:00403778                 mov     edi, [esp+4Ch+var_34]
.text:0040377C                 shr     cl, 6
.text:0040377F                 add     cl, 30h ; '0'
.text:00403782                 mov     [edi+esi], cl
.text:00403785
.text:00403785 loc_403785:                             ; CODE XREF: sub_403100+670↑j
.text:00403785                 inc     [esp+4Ch+var_34]
.text:00403789                 mov     edi, [esp+4Ch+arg_4]
.text:0040378D                 cmp     [esp+4Ch+var_34], edi
.text:00403791                 jnb     short loc_4037A9
.text:00403793                 mov     cl, bl
.text:00403795                 mov     esi, [esp+4Ch+arg_0]
.text:00403799                 shr     cl, 3
.text:0040379C                 mov     edi, [esp+4Ch+var_34]
.text:004037A0                 and     cl, 7
.text:004037A3                 add     cl, 30h ; '0'
.text:004037A6                 mov     [edi+esi], cl
.text:004037A9
.text:004037A9 loc_4037A9:                             ; CODE XREF: sub_403100+691↑j
.text:004037A9                 inc     [esp+4Ch+var_34]
.text:004037AD                 and     bl, 7
.text:004037B0                 add     bl, 30h ; '0'
.text:004037B3                 lea     esi, [esi+0]
.text:004037B9                 lea     edi, [edi+0]
.text:004037C0
.text:004037C0 loc_4037C0:                             ; CODE XREF: sub_403100+645↑j
.text:004037C0                                         ; sub_403100+64C↑j
.text:004037C0                 lea     eax, [ebp+1]
.text:004037C3                 cmp     edx, eax
.text:004037C5                 jbe     loc_4034C0
.text:004037CB                 mov     ebp, [esp+4Ch+arg_4]
.text:004037CF                 cmp     [esp+4Ch+var_34], ebp
.text:004037D3                 jnb     short loc_4037E0
.text:004037D5                 mov     ecx, [esp+4Ch+arg_0]
.text:004037D9                 mov     edi, [esp+4Ch+var_34]
.text:004037DD                 mov     [edi+ecx], bl
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: sub_403100+6D3↑j
.text:004037E0                 inc     [esp+4Ch+var_34]
.text:004037E4                 mov     ebp, eax
.text:004037E6                 mov     eax, [esp+4Ch+Str]
.text:004037EA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004037EF                 jmp     loc_403740
.text:004037F4 ; ---------------------------------------------------------------------------
.text:004037F4
.text:004037F4 loc_4037F4:                             ; CODE XREF: sub_403100+5FF↑j
.text:004037F4                 mov     ecx, ds:_pctype
.text:004037FA                 mov     edi, [ecx]
.text:004037FC                 movzx   eax, word ptr [edi+edx*2]
.text:00403800                 and     eax, 157h
.text:00403805                 jmp     loc_403715
.text:00403805 ; ---------------------------------------------------------------------------
.text:0040380A                 align 10h
.text:00403810
.text:00403810 loc_403810:                             ; CODE XREF: sub_403100+5E5↑j
.text:00403810                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403815                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040381D                 mov     [esp+4Ch+var_28], 0
.text:00403825                 mov     [esp+4Ch+var_29], 1
.text:0040382A                 jz      loc_4039BC
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403100+8CC↓j
.text:00403830                 mov     ecx, [esp+4Ch+arg_C]
.text:00403834                 lea     edx, [esp+4Ch+var_18]
.text:00403838                 mov     edi, [esp+4Ch+Str]
.text:0040383C                 mov     [esp+4Ch+State], edx ; State
.text:00403840                 lea     esi, [esp+4Ch+var_18._State]
.text:00403844                 sub     ecx, ebp
.text:00403846                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040384A                 add     edi, ebp
.text:0040384C                 mov     [esp+4Ch+var_30], edi
.text:00403850                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403854                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403857                 call    mbrtowc
.text:0040385C                 test    eax, eax
.text:0040385E                 mov     edi, eax
.text:00403860                 jz      short loc_4038A0
.text:00403862                 cmp     eax, 0FFFFFFFFh
.text:00403865                 jz      loc_4039B2
.text:0040386B                 cmp     eax, 0FFFFFFFEh
.text:0040386E                 jz      loc_403972
.text:00403874                 cmp     [esp+4Ch+arg_10], 1
.text:00403879                 jz      short loc_4038B0
.text:0040387B
.text:0040387B loc_40387B:                             ; CODE XREF: sub_403100+7B9↓j
.text:0040387B                                         ; sub_403100+86D↓j
.text:0040387B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403880                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403888                 mov     [esp+4Ch+C], ecx ; C
.text:0040388B                 call    iswctype
.text:00403890                 test    eax, eax
.text:00403892                 jnz     short loc_403899
.text:00403894                 mov     [esp+4Ch+var_29], 0
.text:00403899
.text:00403899 loc_403899:                             ; CODE XREF: sub_403100+792↑j
.text:00403899                 mov     [esp+4Ch+var_28], edi
.text:0040389D                 lea     esi, [esi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_403100+760↑j
.text:004038A0                                         ; sub_403100+87B↓j ...
.text:004038A0                 cmp     [esp+4Ch+var_28], 1
.text:004038A5                 jbe     loc_40371C
.text:004038AB                 jmp     loc_403735
.text:004038B0 ; ---------------------------------------------------------------------------
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: sub_403100+779↑j
.text:004038B0                 cmp     [esp+4Ch+arg_10], eax
.text:004038B4                 mov     edx, 1
.text:004038B9                 jnb     short loc_40387B
.text:004038BB
.text:004038BB loc_4038BB:                             ; CODE XREF: sub_403100+867↓j
.text:004038BB                 mov     ecx, [esp+4Ch+Str]
.text:004038BF                 lea     esi, [edx+ebp]
.text:004038C2                 movsx   eax, byte ptr [esi+ecx]
.text:004038C6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004038C9                 cmp     eax, 21h
.text:004038CC                 ja      def_4038D2      ; jumptable 004038D2 default case, cases 93,95,97-123
.text:004038D2                 jmp     ds:jpt_4038D2[eax*4] ; switch jump
.text:004038D2 ; ---------------------------------------------------------------------------
.text:004038D9                 align 4
.text:004038DC jpt_4038D2      dd offset loc_40350B    ; DATA XREF: sub_403100+7D2↑r
.text:004038DC                 dd offset loc_40350B    ; jump table for switch statement
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset loc_40350B
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset loc_40350B
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset def_4038D2
.text:004038DC                 dd offset loc_40350B
.text:00403964 ; ---------------------------------------------------------------------------
.text:00403964
.text:00403964 def_4038D2:                             ; CODE XREF: sub_403100+7CC↑j
.text:00403964                                         ; sub_403100+7D2↑j
.text:00403964                                         ; DATA XREF: ...
.text:00403964                 inc     edx             ; jumptable 004038D2 default case, cases 93,95,97-123
.text:00403965                 cmp     edx, edi
.text:00403967                 jb      loc_4038BB
.text:0040396D                 jmp     loc_40387B
.text:00403972 ; ---------------------------------------------------------------------------
.text:00403972
.text:00403972 loc_403972:                             ; CODE XREF: sub_403100+76E↑j
.text:00403972                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403976                 mov     [esp+4Ch+var_29], 0
.text:0040397B                 jnb     loc_4038A0
.text:00403981                 mov     eax, [esp+4Ch+var_30]
.text:00403985                 cmp     byte ptr [eax], 0
.text:00403988                 jz      loc_4038A0
.text:0040398E
.text:0040398E loc_40398E:                             ; CODE XREF: sub_403100+8AB↓j
.text:0040398E                 inc     [esp+4Ch+var_28]
.text:00403992                 mov     esi, [esp+4Ch+var_28]
.text:00403996                 lea     eax, [esi+ebp]
.text:00403999                 cmp     eax, [esp+4Ch+arg_C]
.text:0040399D                 jnb     loc_4038A0
.text:004039A3                 mov     edi, [esp+4Ch+Str]
.text:004039A7                 cmp     byte ptr [eax+edi], 0
.text:004039AB                 jnz     short loc_40398E
.text:004039AD                 jmp     loc_4038A0
.text:004039B2 ; ---------------------------------------------------------------------------
.text:004039B2
.text:004039B2 loc_4039B2:                             ; CODE XREF: sub_403100+765↑j
.text:004039B2                 mov     [esp+4Ch+var_29], 0
.text:004039B7                 jmp     loc_4038A0
.text:004039BC ; ---------------------------------------------------------------------------
.text:004039BC
.text:004039BC loc_4039BC:                             ; CODE XREF: sub_403100+72A↑j
.text:004039BC                 mov     edx, [esp+4Ch+Str]
.text:004039C0                 mov     [esp+4Ch+C], edx ; Str
.text:004039C3                 call    strlen
.text:004039C8                 mov     [esp+4Ch+arg_C], eax
.text:004039CC                 jmp     loc_403830
.text:004039D1 ; ---------------------------------------------------------------------------
.text:004039D1
.text:004039D1 loc_4039D1:                             ; CODE XREF: sub_403100+105↑j
.text:004039D1                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004039D1                 mov     dl, bl          ; jumptable 00403205 case 92
.text:004039D3                 jmp     loc_403504
.text:004039D8 ; ---------------------------------------------------------------------------
.text:004039D8
.text:004039D8 loc_4039D8:                             ; CODE XREF: sub_403100+105↑j
.text:004039D8                                         ; sub_403100+902↓j
.text:004039D8                                         ; DATA XREF: ...
.text:004039D8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00403205 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004039DD                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004039DD                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004039E3                 jmp     loc_40350B      ; jumptable 004038D2 cases 91,92,94,96,124
.text:004039E8 ; ---------------------------------------------------------------------------
.text:004039E8
.text:004039E8 loc_4039E8:                             ; CODE XREF: sub_403100+105↑j
.text:004039E8                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004039E8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00403205 cases 123,125
.text:004039ED                 jz      short loc_403A04
.text:004039EF                 cmp     [esp+4Ch+arg_C], 1
.text:004039F4
.text:004039F4 loc_4039F4:                             ; CODE XREF: sub_403100+90C↓j
.text:004039F4                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004039F4                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:004039FA
.text:004039FA loc_4039FA:                             ; CODE XREF: sub_403100+105↑j
.text:004039FA                                         ; DATA XREF: sub_403100:jpt_403205↑o
.text:004039FA                 test    ebp, ebp        ; jumptable 00403205 cases 35,126
.text:004039FC                 jnz     def_403602      ; jumptable 00403205 cases 37,43-58,65-90,93,95,97-122
.text:004039FC                                         ; jumptable 00403602 default case, cases 34-38,42-44,46,48-59
.text:00403A02                 jmp     short loc_4039D8 ; jumptable 00403205 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00403A04 ; ---------------------------------------------------------------------------
.text:00403A04
.text:00403A04 loc_403A04:                             ; CODE XREF: sub_403100+8ED↑j
.text:00403A04                 mov     esi, [esp+4Ch+Str]
.text:00403A08                 cmp     byte ptr [esi+1], 0
.text:00403A0C                 jmp     short loc_4039F4
.text:00403A0E ; ---------------------------------------------------------------------------
.text:00403A0E
.text:00403A0E loc_403A0E:                             ; CODE XREF: sub_403100:loc_40319F↑j
.text:00403A0E                 test    ebp, ebp
.text:00403A10                 jnz     short loc_403A1D
.text:00403A12                 cmp     [esp+4Ch+arg_10], 1
.text:00403A17                 jz      loc_40350B      ; jumptable 004038D2 cases 91,92,94,96,124
.text:00403A1D
.text:00403A1D loc_403A1D:                             ; CODE XREF: sub_403100+910↑j
.text:00403A1D                 mov     esi, [esp+4Ch+var_1C]
.text:00403A21                 test    esi, esi
.text:00403A23                 jz      short loc_403A58
.text:00403A25                 mov     edi, [esp+4Ch+var_1C]
.text:00403A29                 movzx   eax, byte ptr [edi]
.text:00403A2C                 test    al, al
.text:00403A2E                 jz      short loc_403A58
.text:00403A30
.text:00403A30 loc_403A30:                             ; CODE XREF: sub_403100+956↓j
.text:00403A30                 mov     ebp, [esp+4Ch+arg_4]
.text:00403A34                 cmp     [esp+4Ch+var_34], ebp
.text:00403A38                 jnb     short loc_403A45
.text:00403A3A                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A3E                 mov     ebx, [esp+4Ch+var_34]
.text:00403A42                 mov     [ebx+ecx], al
.text:00403A45
.text:00403A45 loc_403A45:                             ; CODE XREF: sub_403100+938↑j
.text:00403A45                 inc     [esp+4Ch+var_1C]
.text:00403A49                 inc     [esp+4Ch+var_34]
.text:00403A4D                 mov     edx, [esp+4Ch+var_1C]
.text:00403A51                 movzx   eax, byte ptr [edx]
.text:00403A54                 test    al, al
.text:00403A56                 jnz     short loc_403A30
.text:00403A58
.text:00403A58 loc_403A58:                             ; CODE XREF: sub_403100+923↑j
.text:00403A58                                         ; sub_403100+92E↑j
.text:00403A58                 mov     eax, [esp+4Ch+arg_4]
.text:00403A5C                 cmp     [esp+4Ch+var_34], eax
.text:00403A60                 jnb     short loc_403A6E
.text:00403A62                 mov     edi, [esp+4Ch+arg_0]
.text:00403A66                 mov     esi, [esp+4Ch+var_34]
.text:00403A6A                 mov     byte ptr [esi+edi], 0
.text:00403A6E
.text:00403A6E loc_403A6E:                             ; CODE XREF: sub_403100+960↑j
.text:00403A6E                 mov     eax, [esp+4Ch+var_34]
.text:00403A72                 jmp     loc_40353F
.text:00403A77 ; ---------------------------------------------------------------------------
.text:00403A77
.text:00403A77 loc_403A77:                             ; CODE XREF: sub_403100+95↑j
.text:00403A77                 mov     ebx, [esp+4Ch+Str]
.text:00403A7B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403A80                 jmp     loc_40319F
.text:00403A85 ; ---------------------------------------------------------------------------
.text:00403A85
.text:00403A85 loc_403A85:                             ; CODE XREF: sub_403100+3D↑j
.text:00403A85                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403A85                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040313D case 2
.text:00403A89                 cmp     [esp+4Ch+var_34], edx
.text:00403A8D                 jnb     short loc_403A96
.text:00403A8F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A93                 mov     byte ptr [ecx], 27h ; '''
.text:00403A96
.text:00403A96 loc_403A96:                             ; CODE XREF: sub_403100+98D↑j
.text:00403A96                 mov     [esp+4Ch+var_34], 1
.text:00403A9E                 mov     [esp+4Ch+var_1C], 4030EEh
.text:00403AA6                 jmp     loc_403186
.text:00403AAB ; ---------------------------------------------------------------------------
.text:00403AAB
.text:00403AAB loc_403AAB:                             ; CODE XREF: sub_403100+3D↑j
.text:00403AAB                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403AAB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040313D case 4
.text:00403AB0                 jmp     def_40313D      ; jumptable 0040313D default case, cases 0,1
.text:00403AB5 ; ---------------------------------------------------------------------------
.text:00403AB5
.text:00403AB5 loc_403AB5:                             ; CODE XREF: sub_403100+3D↑j
.text:00403AB5                                         ; DATA XREF: sub_403100:jpt_40313D↑o
.text:00403AB5                 mov     [esp+4Ch+C], 4030F0h ; jumptable 0040313D cases 5,6
.text:00403ABC                 call    ds:libintl_gettext
.text:00403AC2                 cmp     eax, 4030F0h
.text:00403AC7                 mov     edi, eax
.text:00403AC9                 jz      short loc_403B40
.text:00403ACB
.text:00403ACB loc_403ACB:                             ; CODE XREF: sub_403100+A45↓j
.text:00403ACB                                         ; sub_403100+A4C↓j
.text:00403ACB                 mov     [esp+4Ch+C], 4030EEh
.text:00403AD2                 call    ds:libintl_gettext
.text:00403AD8                 cmp     eax, 4030EEh
.text:00403ADD                 mov     edx, eax
.text:00403ADF                 jz      short loc_403B32
.text:00403AE1
.text:00403AE1 loc_403AE1:                             ; CODE XREF: sub_403100+A37↓j
.text:00403AE1                                         ; sub_403100+A3E↓j
.text:00403AE1                 mov     [esp+4Ch+var_1C], edi
.text:00403AE5                 cmp     byte ptr [edi], 0
.text:00403AE8                 jz      short loc_403B18
.text:00403AEA
.text:00403AEA loc_403AEA:                             ; CODE XREF: sub_403100+A16↓j
.text:00403AEA                 mov     ecx, [esp+4Ch+arg_4]
.text:00403AEE                 cmp     [esp+4Ch+var_34], ecx
.text:00403AF2                 jnb     short loc_403B07
.text:00403AF4                 mov     ebp, [esp+4Ch+var_1C]
.text:00403AF8                 mov     edi, [esp+4Ch+arg_0]
.text:00403AFC                 mov     esi, [esp+4Ch+var_34]
.text:00403B00                 movzx   ebx, byte ptr [ebp+0]
.text:00403B04                 mov     [esi+edi], bl
.text:00403B07
.text:00403B07 loc_403B07:                             ; CODE XREF: sub_403100+9F2↑j
.text:00403B07                 inc     [esp+4Ch+var_1C]
.text:00403B0B                 inc     [esp+4Ch+var_34]
.text:00403B0F                 mov     eax, [esp+4Ch+var_1C]
.text:00403B13                 cmp     byte ptr [eax], 0
.text:00403B16                 jnz     short loc_403AEA
.text:00403B18
.text:00403B18 loc_403B18:                             ; CODE XREF: sub_403100+9E8↑j
.text:00403B18                 mov     [esp+4Ch+var_21], 1
.text:00403B1D                 mov     [esp+4Ch+var_1C], edx
.text:00403B21                 mov     [esp+4Ch+C], edx ; Str
.text:00403B24                 call    strlen
.text:00403B29                 mov     [esp+4Ch+var_20], eax
.text:00403B2D                 jmp     def_40313D      ; jumptable 0040313D default case, cases 0,1
.text:00403B32 ; ---------------------------------------------------------------------------
.text:00403B32
.text:00403B32 loc_403B32:                             ; CODE XREF: sub_403100+9DF↑j
.text:00403B32                 cmp     [esp+4Ch+arg_10], 6
.text:00403B37                 jnz     short loc_403AE1
.text:00403B39                 mov     edx, offset asc_4030EC ; "\"'`"
.text:00403B3E                 jmp     short loc_403AE1
.text:00403B40 ; ---------------------------------------------------------------------------
.text:00403B40
.text:00403B40 loc_403B40:                             ; CODE XREF: sub_403100+9C9↑j
.text:00403B40                 cmp     [esp+4Ch+arg_10], 6
.text:00403B45                 jnz     short loc_403ACB
.text:00403B47                 mov     edi, offset asc_4030EC ; "\"'`"
.text:00403B4C                 jmp     loc_403ACB
.text:00403B4C sub_403100      endp
.text:00403B4C
.text:00403B51 ; ---------------------------------------------------------------------------
.text:00403B51                 jmp     short loc_403B60
.text:00403B51 ; ---------------------------------------------------------------------------
.text:00403B53                 align 10h
.text:00403B60
.text:00403B60 loc_403B60:                             ; CODE XREF: .text:00403B51↑j
.text:00403B60                 sub     esp, 0Ch
.text:00403B63                 mov     [esp+4], ebx
.text:00403B67                 mov     [esp+8], esi
.text:00403B6B                 call    _errno
.text:00403B70                 mov     esi, [eax]
.text:00403B72                 mov     dword ptr [esp], 24h ; '$'
.text:00403B79                 call    sub_404450
.text:00403B7E                 mov     edx, [esp+10h]
.text:00403B82                 mov     ebx, eax
.text:00403B84                 test    edx, edx
.text:00403B86                 jz      short loc_403BD1
.text:00403B88
.text:00403B88 loc_403B88:                             ; CODE XREF: .text:00403BD6↓j
.text:00403B88                 mov     ecx, [edx]
.text:00403B8A                 mov     [ebx], ecx
.text:00403B8C                 mov     ecx, [edx+4]
.text:00403B8F                 mov     [ebx+4], ecx
.text:00403B92                 mov     ecx, [edx+8]
.text:00403B95                 mov     [ebx+8], ecx
.text:00403B98                 mov     ecx, [edx+0Ch]
.text:00403B9B                 mov     [ebx+0Ch], ecx
.text:00403B9E                 mov     ecx, [edx+10h]
.text:00403BA1                 mov     [ebx+10h], ecx
.text:00403BA4                 mov     ecx, [edx+14h]
.text:00403BA7                 mov     [ebx+14h], ecx
.text:00403BAA                 mov     ecx, [edx+18h]
.text:00403BAD                 mov     [ebx+18h], ecx
.text:00403BB0                 mov     ecx, [edx+1Ch]
.text:00403BB3                 mov     [ebx+1Ch], ecx
.text:00403BB6                 mov     ecx, [edx+20h]
.text:00403BB9                 mov     [ebx+20h], ecx
.text:00403BBC                 call    _errno
.text:00403BC1                 mov     [eax], esi
.text:00403BC3                 mov     esi, [esp+8]
.text:00403BC7                 mov     eax, ebx
.text:00403BC9                 mov     ebx, [esp+4]
.text:00403BCD                 add     esp, 0Ch
.text:00403BD0                 retn
.text:00403BD1 ; ---------------------------------------------------------------------------
.text:00403BD1
.text:00403BD1 loc_403BD1:                             ; CODE XREF: .text:00403B86↑j
.text:00403BD1                 mov     edx, offset dword_406150
.text:00403BD6                 jmp     short loc_403B88
.text:00403BD6 ; ---------------------------------------------------------------------------
.text:00403BD8                 align 10h
.text:00403BE0                 mov     eax, [esp+4]
.text:00403BE4                 test    eax, eax
.text:00403BE6                 jz      short loc_403BF0
.text:00403BE8
.text:00403BE8 loc_403BE8:                             ; CODE XREF: .text:00403BF5↓j
.text:00403BE8                 mov     eax, [eax]
.text:00403BEA                 retn
.text:00403BEA ; ---------------------------------------------------------------------------
.text:00403BEB                 align 10h
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: .text:00403BE6↑j
.text:00403BF0                 mov     eax, offset dword_406150
.text:00403BF5                 jmp     short loc_403BE8
.text:00403BF5 ; ---------------------------------------------------------------------------
.text:00403BF7                 align 10h
.text:00403C00                 mov     edx, [esp+4]
.text:00403C04                 test    edx, edx
.text:00403C06                 jz      short loc_403C10
.text:00403C08
.text:00403C08 loc_403C08:                             ; CODE XREF: .text:00403C15↓j
.text:00403C08                 mov     ecx, [esp+8]
.text:00403C0C                 mov     [edx], ecx
.text:00403C0E                 retn
.text:00403C0E ; ---------------------------------------------------------------------------
.text:00403C0F                 align 10h
.text:00403C10
.text:00403C10 loc_403C10:                             ; CODE XREF: .text:00403C06↑j
.text:00403C10                 mov     edx, offset dword_406150
.text:00403C15                 jmp     short loc_403C08
.text:00403C15 ; ---------------------------------------------------------------------------
.text:00403C17                 align 10h
.text:00403C20                 sub     esp, 8
.text:00403C23                 mov     eax, [esp+0Ch]
.text:00403C27                 movzx   ecx, byte ptr [esp+10h]
.text:00403C2C                 mov     [esp], ebx
.text:00403C2F                 mov     ebx, [esp+14h]
.text:00403C33                 mov     [esp+4], esi
.text:00403C37                 mov     dl, cl
.text:00403C39                 shr     dl, 5
.text:00403C3C                 movzx   edx, dl
.text:00403C3F                 shl     edx, 2
.text:00403C42                 test    eax, eax
.text:00403C44                 lea     esi, [edx+eax+4]
.text:00403C48                 jz      short loc_403C70
.text:00403C4A
.text:00403C4A loc_403C4A:                             ; CODE XREF: .text:00403C76↓j
.text:00403C4A                 mov     edx, [esi]
.text:00403C4C                 and     ecx, 1Fh
.text:00403C4F                 and     ebx, 1
.text:00403C52                 mov     eax, edx
.text:00403C54                 shr     eax, cl
.text:00403C56                 and     eax, 1
.text:00403C59                 xor     ebx, eax
.text:00403C5B                 shl     ebx, cl
.text:00403C5D                 xor     edx, ebx
.text:00403C5F                 mov     [esi], edx
.text:00403C61                 mov     ebx, [esp]
.text:00403C64                 mov     esi, [esp+4]
.text:00403C68                 add     esp, 8
.text:00403C6B                 retn
.text:00403C6B ; ---------------------------------------------------------------------------
.text:00403C6C                 align 10h
.text:00403C70
.text:00403C70 loc_403C70:                             ; CODE XREF: .text:00403C48↑j
.text:00403C70                 lea     esi, dword_406154[edx]
.text:00403C76                 jmp     short loc_403C4A
.text:00403C76 ; ---------------------------------------------------------------------------
.text:00403C78                 align 10h
.text:00403C80                 sub     esp, 2Ch
.text:00403C83                 mov     [esp+24h], ebx
.text:00403C87                 mov     ebx, [esp+40h]
.text:00403C8B                 mov     [esp+28h], esi
.text:00403C8F                 test    ebx, ebx
.text:00403C91                 jz      short loc_403CE0
.text:00403C93
.text:00403C93 loc_403C93:                             ; CODE XREF: .text:00403CE5↓j
.text:00403C93                 call    _errno
.text:00403C98                 mov     esi, [eax]
.text:00403C9A                 mov     [esp+14h], ebx
.text:00403C9E                 mov     edx, [ebx]
.text:00403CA0                 mov     ecx, [esp+38h]
.text:00403CA4                 mov     ebx, [esp+3Ch]
.text:00403CA8                 mov     [esp+10h], edx
.text:00403CAC                 mov     edx, [esp+34h]
.text:00403CB0                 mov     [esp+0Ch], ebx
.text:00403CB4                 mov     [esp+8], ecx
.text:00403CB8                 mov     [esp+4], edx
.text:00403CBC                 mov     edx, [esp+30h]
.text:00403CC0                 mov     [esp], edx
.text:00403CC3                 call    sub_403100
.text:00403CC8                 mov     ebx, eax
.text:00403CCA                 call    _errno
.text:00403CCF                 mov     [eax], esi
.text:00403CD1                 mov     esi, [esp+28h]
.text:00403CD5                 mov     eax, ebx
.text:00403CD7                 mov     ebx, [esp+24h]
.text:00403CDB                 add     esp, 2Ch
.text:00403CDE                 retn
.text:00403CDE ; ---------------------------------------------------------------------------
.text:00403CDF                 align 10h
.text:00403CE0
.text:00403CE0 loc_403CE0:                             ; CODE XREF: .text:00403C91↑j
.text:00403CE0                 mov     ebx, offset dword_406150
.text:00403CE5                 jmp     short loc_403C93
.text:00403CE5 ; ---------------------------------------------------------------------------
.text:00403CE7                 align 10h
.text:00403CF0                 push    ebp
.text:00403CF1                 push    edi
.text:00403CF2                 push    esi
.text:00403CF3                 push    ebx
.text:00403CF4                 sub     esp, 2Ch
.text:00403CF7                 mov     ebp, [esp+48h]
.text:00403CFB                 call    _errno
.text:00403D00                 mov     edx, [eax]
.text:00403D02                 test    ebp, ebp
.text:00403D04                 mov     ebx, ebp
.text:00403D06                 mov     [esp+28h], edx
.text:00403D0A                 jz      loc_403DC0
.text:00403D10
.text:00403D10 loc_403D10:                             ; CODE XREF: .text:00403DC5↓j
.text:00403D10                 call    _errno
.text:00403D15                 mov     edi, [eax]
.text:00403D17                 mov     esi, ebp
.text:00403D19                 mov     [esp+14h], ebx
.text:00403D1D                 mov     ecx, [ebx]
.text:00403D1F                 mov     dword ptr [esp], 0
.text:00403D26                 mov     edx, [esp+44h]
.text:00403D2A                 mov     dword ptr [esp+4], 0
.text:00403D32                 mov     eax, [esp+40h]
.text:00403D36                 mov     [esp+10h], ecx
.text:00403D3A                 mov     [esp+0Ch], edx
.text:00403D3E                 mov     [esp+8], eax
.text:00403D42                 call    sub_403100
.text:00403D47                 mov     ebx, eax
.text:00403D49                 call    _errno
.text:00403D4E                 mov     [eax], edi
.text:00403D50                 lea     edi, [ebx+1]
.text:00403D53                 mov     [esp], edi
.text:00403D56                 call    sub_404450
.text:00403D5B                 mov     [esp+24h], eax
.text:00403D5F                 test    ebp, ebp
.text:00403D61                 jz      short loc_403DB2
.text:00403D63
.text:00403D63 loc_403D63:                             ; CODE XREF: .text:00403DB7↓j
.text:00403D63                 call    _errno
.text:00403D68                 mov     ebp, [eax]
.text:00403D6A                 mov     [esp+14h], esi
.text:00403D6E                 mov     ecx, [esi]
.text:00403D70                 mov     [esp+4], edi
.text:00403D74                 mov     edx, [esp+44h]
.text:00403D78                 mov     esi, [esp+24h]
.text:00403D7C                 mov     [esp+10h], ecx
.text:00403D80                 mov     eax, [esp+40h]
.text:00403D84                 mov     [esp+0Ch], edx
.text:00403D88                 mov     [esp], esi
.text:00403D8B                 mov     [esp+8], eax
.text:00403D8F                 call    sub_403100
.text:00403D94                 call    _errno
.text:00403D99                 mov     [eax], ebp
.text:00403D9B                 call    _errno
.text:00403DA0                 mov     ebx, [esp+28h]
.text:00403DA4                 mov     [eax], ebx
.text:00403DA6                 mov     eax, [esp+24h]
.text:00403DAA                 add     esp, 2Ch
.text:00403DAD                 pop     ebx
.text:00403DAE                 pop     esi
.text:00403DAF                 pop     edi
.text:00403DB0                 pop     ebp
.text:00403DB1                 retn
.text:00403DB2 ; ---------------------------------------------------------------------------
.text:00403DB2
.text:00403DB2 loc_403DB2:                             ; CODE XREF: .text:00403D61↑j
.text:00403DB2                 mov     esi, offset dword_406150
.text:00403DB7                 jmp     short loc_403D63
.text:00403DB7 ; ---------------------------------------------------------------------------
.text:00403DB9                 align 10h
.text:00403DC0
.text:00403DC0 loc_403DC0:                             ; CODE XREF: .text:00403D0A↑j
.text:00403DC0                 mov     ebx, offset dword_406150
.text:00403DC5                 jmp     loc_403D10
.text:00403DC5 ; ---------------------------------------------------------------------------
.text:00403DCA                 align 10h
.text:00403DD0                 sub     esp, 1Ch
.text:00403DD3                 mov     edx, [esp+24h]
.text:00403DD7                 mov     dword ptr [esp+0Ch], offset dword_406150
.text:00403DDF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403DE7                 mov     [esp+4], edx
.text:00403DEB                 mov     edx, [esp+20h]
.text:00403DEF                 mov     [esp], edx
.text:00403DF2                 call    sub_404240
.text:00403DF7                 add     esp, 1Ch
.text:00403DFA                 retn
.text:00403DFA ; ---------------------------------------------------------------------------
.text:00403DFB                 align 10h
.text:00403E00                 sub     esp, 1Ch
.text:00403E03                 mov     edx, [esp+20h]
.text:00403E07                 mov     dword ptr [esp+0Ch], offset dword_406150
.text:00403E0F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403E17                 mov     [esp+4], edx
.text:00403E1B                 mov     dword ptr [esp], 0
.text:00403E22                 call    sub_404240
.text:00403E27                 add     esp, 1Ch
.text:00403E2A                 retn
.text:00403E2A ; ---------------------------------------------------------------------------
.text:00403E2B                 align 10h
.text:00403E30
.text:00403E30 ; =============== S U B R O U T I N E =======================================
.text:00403E30
.text:00403E30
.text:00403E30 ; int __cdecl sub_403E30(int, int, char *)
.text:00403E30 sub_403E30      proc near               ; CODE XREF: .text:004028DA↑p
.text:00403E30                                         ; sub_4028F0+1A↑p
.text:00403E30
.text:00403E30 var_BC          = dword ptr -0BCh
.text:00403E30 var_B8          = dword ptr -0B8h
.text:00403E30 var_B4          = dword ptr -0B4h
.text:00403E30 var_B0          = dword ptr -0B0h
.text:00403E30 var_AC          = dword ptr -0ACh
.text:00403E30 var_A8          = dword ptr -0A8h
.text:00403E30 var_A4          = dword ptr -0A4h
.text:00403E30 var_A0          = dword ptr -0A0h
.text:00403E30 var_9C          = dword ptr -9Ch
.text:00403E30 var_98          = dword ptr -98h
.text:00403E30 var_94          = dword ptr -94h
.text:00403E30 var_90          = dword ptr -90h
.text:00403E30 var_8C          = dword ptr -8Ch
.text:00403E30 var_7C          = dword ptr -7Ch
.text:00403E30 var_78          = dword ptr -78h
.text:00403E30 var_74          = dword ptr -74h
.text:00403E30 var_70          = dword ptr -70h
.text:00403E30 var_6C          = dword ptr -6Ch
.text:00403E30 var_68          = dword ptr -68h
.text:00403E30 var_64          = dword ptr -64h
.text:00403E30 var_60          = dword ptr -60h
.text:00403E30 var_5C          = dword ptr -5Ch
.text:00403E30 var_4C          = dword ptr -4Ch
.text:00403E30 var_48          = dword ptr -48h
.text:00403E30 var_44          = dword ptr -44h
.text:00403E30 var_40          = dword ptr -40h
.text:00403E30 var_3C          = dword ptr -3Ch
.text:00403E30 var_38          = dword ptr -38h
.text:00403E30 var_34          = dword ptr -34h
.text:00403E30 var_30          = dword ptr -30h
.text:00403E30 var_2C          = dword ptr -2Ch
.text:00403E30 arg_0           = dword ptr  4
.text:00403E30 arg_4           = dword ptr  8
.text:00403E30 arg_8           = dword ptr  0Ch
.text:00403E30
.text:00403E30                 push    ebp
.text:00403E31                 xor     eax, eax
.text:00403E33                 mov     ecx, 8
.text:00403E38                 push    edi
.text:00403E39                 push    esi
.text:00403E3A                 push    ebx
.text:00403E3B                 sub     esp, 0ACh
.text:00403E41                 mov     ebp, [esp+0BCh+arg_4]
.text:00403E48                 cld
.text:00403E49                 lea     edi, [esp+0BCh+var_A8]
.text:00403E4D                 mov     [esp+0BCh+var_AC], ebp
.text:00403E51                 rep stosd
.text:00403E53                 mov     eax, [esp+0BCh+var_8C]
.text:00403E57                 mov     edi, [esp+0BCh+var_AC]
.text:00403E5B                 mov     esi, [esp+0BCh+var_A8]
.text:00403E5F                 mov     [esp+0BCh+var_5C], eax
.text:00403E63                 mov     ebp, [esp+0BCh+var_A4]
.text:00403E67                 mov     eax, [esp+0BCh+var_AC]
.text:00403E6B                 mov     [esp+0BCh+var_7C], edi
.text:00403E6F                 mov     ecx, [esp+0BCh+var_94]
.text:00403E73                 mov     edi, [esp+0BCh+var_A0]
.text:00403E77                 mov     [esp+0BCh+var_78], esi
.text:00403E7B                 mov     edx, [esp+0BCh+var_90]
.text:00403E7F                 mov     esi, [esp+0BCh+var_9C]
.text:00403E83                 mov     [esp+0BCh+var_4C], eax
.text:00403E87                 mov     ebx, [esp+0BCh+var_98]
.text:00403E8B                 mov     eax, [esp+0BCh+var_A8]
.text:00403E8F                 mov     [esp+0BCh+var_74], ebp
.text:00403E93                 mov     [esp+0BCh+var_70], edi
.text:00403E97                 mov     [esp+0BCh+var_6C], esi
.text:00403E9B                 mov     [esp+0BCh+var_68], ebx
.text:00403E9F                 mov     [esp+0BCh+var_64], ecx
.text:00403EA3                 mov     [esp+0BCh+var_60], edx
.text:00403EA7                 mov     [esp+0BCh+var_48], eax
.text:00403EAB                 mov     [esp+0BCh+var_44], ebp
.text:00403EAF                 mov     [esp+0BCh+var_40], edi
.text:00403EB3                 mov     [esp+0BCh+var_3C], esi
.text:00403EBA                 mov     [esp+0BCh+var_38], ebx
.text:00403EC1                 mov     ebx, [esp+0BCh+var_8C]
.text:00403EC5                 mov     [esp+0BCh+var_30], edx
.text:00403ECC                 mov     edx, [esp+0BCh+arg_8]
.text:00403ED3                 mov     [esp+0BCh+var_34], ecx
.text:00403EDA                 lea     ecx, [esp+0BCh+var_4C]
.text:00403EDE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403EE2                 mov     edx, [esp+0BCh+arg_0]
.text:00403EE9                 mov     [esp+0BCh+var_2C], ebx
.text:00403EF0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403EF4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403EFC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403EFF                 call    sub_404240
.text:00403F04                 add     esp, 0ACh
.text:00403F0A                 pop     ebx
.text:00403F0B                 pop     esi
.text:00403F0C                 pop     edi
.text:00403F0D                 pop     ebp
.text:00403F0E                 retn
.text:00403F0E sub_403E30      endp
.text:00403F0E
.text:00403F0E ; ---------------------------------------------------------------------------
.text:00403F0F                 align 10h
.text:00403F10                 push    ebp
.text:00403F11                 xor     eax, eax
.text:00403F13                 mov     ecx, 8
.text:00403F18                 push    edi
.text:00403F19                 push    esi
.text:00403F1A                 push    ebx
.text:00403F1B                 sub     esp, 0ACh
.text:00403F21                 mov     edx, [esp+0C4h]
.text:00403F28                 cld
.text:00403F29                 lea     edi, [esp+14h]
.text:00403F2D                 mov     [esp+10h], edx
.text:00403F31                 rep stosd
.text:00403F33                 mov     eax, [esp+30h]
.text:00403F37                 mov     ebp, [esp+10h]
.text:00403F3B                 mov     edi, [esp+14h]
.text:00403F3F                 mov     [esp+60h], eax
.text:00403F43                 mov     esi, [esp+20h]
.text:00403F47                 mov     eax, [esp+10h]
.text:00403F4B                 mov     [esp+40h], ebp
.text:00403F4F                 mov     ecx, [esp+28h]
.text:00403F53                 mov     ebp, [esp+18h]
.text:00403F57                 mov     [esp+44h], edi
.text:00403F5B                 mov     edx, [esp+2Ch]
.text:00403F5F                 mov     edi, [esp+1Ch]
.text:00403F63                 mov     [esp+70h], eax
.text:00403F67                 mov     ebx, [esp+24h]
.text:00403F6B                 mov     eax, [esp+14h]
.text:00403F6F                 mov     [esp+48h], ebp
.text:00403F73                 mov     [esp+4Ch], edi
.text:00403F77                 mov     [esp+50h], esi
.text:00403F7B                 mov     [esp+54h], ebx
.text:00403F7F                 mov     [esp+58h], ecx
.text:00403F83                 mov     [esp+5Ch], edx
.text:00403F87                 mov     [esp+74h], eax
.text:00403F8B                 mov     [esp+78h], ebp
.text:00403F8F                 mov     [esp+7Ch], edi
.text:00403F93                 mov     [esp+80h], esi
.text:00403F9A                 mov     [esp+84h], ebx
.text:00403FA1                 mov     esi, [esp+30h]
.text:00403FA5                 lea     ebx, [esp+70h]
.text:00403FA9                 mov     [esp+8Ch], edx
.text:00403FB0                 mov     edx, [esp+0C8h]
.text:00403FB7                 mov     [esp+88h], ecx
.text:00403FBE                 mov     ecx, [esp+0CCh]
.text:00403FC5                 mov     [esp+4], edx
.text:00403FC9                 mov     edx, [esp+0C0h]
.text:00403FD0                 mov     [esp+90h], esi
.text:00403FD7                 mov     [esp+0Ch], ebx
.text:00403FDB                 mov     [esp+8], ecx
.text:00403FDF                 mov     [esp], edx
.text:00403FE2                 call    sub_404240
.text:00403FE7                 add     esp, 0ACh
.text:00403FED                 pop     ebx
.text:00403FEE                 pop     esi
.text:00403FEF                 pop     edi
.text:00403FF0                 pop     ebp
.text:00403FF1                 retn
.text:00403FF1 ; ---------------------------------------------------------------------------
.text:00403FF2                 align 10h
.text:00404000                 push    ebp
.text:00404001                 xor     eax, eax
.text:00404003                 mov     ecx, 8
.text:00404008                 push    edi
.text:00404009                 push    esi
.text:0040400A                 push    ebx
.text:0040400B                 sub     esp, 0ACh
.text:00404011                 mov     edi, [esp+0C0h]
.text:00404018                 cld
.text:00404019                 mov     [esp+10h], edi
.text:0040401D                 lea     edi, [esp+14h]
.text:00404021                 rep stosd
.text:00404023                 mov     eax, [esp+30h]
.text:00404027                 mov     esi, [esp+10h]
.text:0040402B                 mov     ebx, [esp+14h]
.text:0040402F                 mov     [esp+60h], eax
.text:00404033                 mov     ebp, [esp+18h]
.text:00404037                 mov     eax, [esp+10h]
.text:0040403B                 mov     [esp+40h], esi
.text:0040403F                 mov     edi, [esp+1Ch]
.text:00404043                 mov     esi, [esp+20h]
.text:00404047                 mov     [esp+44h], ebx
.text:0040404B                 mov     ecx, [esp+28h]
.text:0040404F                 mov     edx, [esp+2Ch]
.text:00404053                 mov     [esp+70h], eax
.text:00404057                 mov     ebx, [esp+24h]
.text:0040405B                 mov     eax, [esp+14h]
.text:0040405F                 mov     [esp+48h], ebp
.text:00404063                 mov     [esp+4Ch], edi
.text:00404067                 mov     [esp+50h], esi
.text:0040406B                 mov     [esp+54h], ebx
.text:0040406F                 mov     [esp+58h], ecx
.text:00404073                 mov     [esp+5Ch], edx
.text:00404077                 mov     [esp+74h], eax
.text:0040407B                 mov     [esp+78h], ebp
.text:0040407F                 mov     [esp+7Ch], edi
.text:00404083                 mov     [esp+80h], esi
.text:0040408A                 mov     [esp+84h], ebx
.text:00404091                 mov     [esp+8Ch], edx
.text:00404098                 lea     edx, [esp+70h]
.text:0040409C                 mov     [esp+88h], ecx
.text:004040A3                 mov     ecx, [esp+30h]
.text:004040A7                 mov     [esp+0Ch], edx
.text:004040AB                 mov     edx, [esp+0C4h]
.text:004040B2                 mov     [esp+90h], ecx
.text:004040B9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004040C1                 mov     [esp+4], edx
.text:004040C5                 mov     dword ptr [esp], 0
.text:004040CC                 call    sub_404240
.text:004040D1                 add     esp, 0ACh
.text:004040D7                 pop     ebx
.text:004040D8                 pop     esi
.text:004040D9                 pop     edi
.text:004040DA                 pop     ebp
.text:004040DB                 retn
.text:004040DB ; ---------------------------------------------------------------------------
.text:004040DC                 align 10h
.text:004040E0                 push    edi
.text:004040E1                 push    esi
.text:004040E2                 push    ebx
.text:004040E3                 sub     esp, 40h
.text:004040E6                 mov     edx, ds:dword_40615C
.text:004040EC                 mov     ebx, ds:dword_406150
.text:004040F2                 mov     esi, ds:dword_406158
.text:004040F8                 mov     edi, ds:dword_406154
.text:004040FE                 mov     [esp+1Ch], edx
.text:00404102                 mov     ecx, ds:dword_406160
.text:00404108                 mov     edx, ds:dword_406170
.text:0040410E                 mov     [esp+10h], ebx
.text:00404112                 mov     ebx, ds:dword_406164
.text:00404118                 mov     [esp+30h], edx
.text:0040411C                 movzx   edx, byte ptr [esp+54h]
.text:00404121                 mov     [esp+18h], esi
.text:00404125                 mov     esi, ds:dword_40616C
.text:0040412B                 mov     [esp+14h], edi
.text:0040412F                 mov     edi, ds:dword_406168
.text:00404135                 mov     [esp+20h], ecx
.text:00404139                 mov     cl, dl
.text:0040413B                 shr     cl, 5
.text:0040413E                 mov     [esp+24h], ebx
.text:00404142                 movzx   ebx, cl
.text:00404145                 mov     [esp+2Ch], esi
.text:00404149                 lea     esi, [esp+10h]
.text:0040414D                 mov     [esp+28h], edi
.text:00404151                 lea     edi, [esi+ebx*4]
.text:00404154                 mov     ebx, edx
.text:00404156                 mov     edx, [edi+4]
.text:00404159                 and     ebx, 1Fh
.text:0040415C                 mov     cl, bl
.text:0040415E                 mov     eax, edx
.text:00404160                 shr     eax, cl
.text:00404162                 and     eax, 1
.text:00404165                 xor     eax, 1
.text:00404168                 shl     eax, cl
.text:0040416A                 xor     edx, eax
.text:0040416C                 mov     [edi+4], edx
.text:0040416F                 mov     edx, [esp+50h]
.text:00404173                 mov     [esp+0Ch], esi
.text:00404177                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040417F                 mov     [esp+4], edx
.text:00404183                 mov     dword ptr [esp], 0
.text:0040418A                 call    sub_404240
.text:0040418F                 add     esp, 40h
.text:00404192                 pop     ebx
.text:00404193                 pop     esi
.text:00404194                 pop     edi
.text:00404195                 retn
.text:00404195 ; ---------------------------------------------------------------------------
.text:00404196                 align 10h
.text:004041A0
.text:004041A0 ; =============== S U B R O U T I N E =======================================
.text:004041A0
.text:004041A0
.text:004041A0 ; int __cdecl sub_4041A0(char *)
.text:004041A0 sub_4041A0      proc near               ; CODE XREF: sub_402F90+64↑p
.text:004041A0
.text:004041A0 var_4C          = dword ptr -4Ch
.text:004041A0 var_48          = dword ptr -48h
.text:004041A0 var_44          = dword ptr -44h
.text:004041A0 var_40          = dword ptr -40h
.text:004041A0 var_3C          = dword ptr -3Ch
.text:004041A0 var_38          = dword ptr -38h
.text:004041A0 var_34          = dword ptr -34h
.text:004041A0 var_30          = dword ptr -30h
.text:004041A0 var_2C          = dword ptr -2Ch
.text:004041A0 var_28          = dword ptr -28h
.text:004041A0 var_24          = dword ptr -24h
.text:004041A0 var_20          = dword ptr -20h
.text:004041A0 var_1C          = dword ptr -1Ch
.text:004041A0 arg_0           = dword ptr  4
.text:004041A0
.text:004041A0                 sub     esp, 4Ch
.text:004041A3                 mov     ecx, ds:dword_406150
.text:004041A9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004041B1                 mov     edx, ds:dword_406154
.text:004041B7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004041BE                 mov     [esp+4Ch+var_3C], ecx
.text:004041C2                 mov     ecx, ds:dword_40615C
.text:004041C8                 mov     [esp+4Ch+var_38], edx
.text:004041CC                 mov     edx, ds:dword_406158
.text:004041D2                 mov     [esp+4Ch+var_30], ecx
.text:004041D6                 mov     ecx, ds:dword_406160
.text:004041DC                 mov     eax, edx
.text:004041DE                 shr     eax, 1Ah
.text:004041E1                 and     eax, 1
.text:004041E4                 xor     eax, 1
.text:004041E7                 mov     [esp+4Ch+var_2C], ecx
.text:004041EB                 shl     eax, 1Ah
.text:004041EE                 mov     ecx, ds:dword_406164
.text:004041F4                 xor     edx, eax
.text:004041F6                 mov     [esp+4Ch+var_34], edx
.text:004041FA                 mov     edx, [esp+4Ch+arg_0]
.text:004041FE                 mov     [esp+4Ch+var_28], ecx
.text:00404202                 mov     ecx, ds:dword_406168
.text:00404208                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040420C                 mov     [esp+4Ch+var_24], ecx
.text:00404210                 mov     ecx, ds:dword_40616C
.text:00404216                 mov     [esp+4Ch+var_20], ecx
.text:0040421A                 mov     ecx, ds:dword_406170
.text:00404220                 mov     [esp+4Ch+var_1C], ecx
.text:00404224                 lea     ecx, [esp+4Ch+var_3C]
.text:00404228                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040422C                 call    sub_404240
.text:00404231                 add     esp, 4Ch
.text:00404234                 retn
.text:00404234 sub_4041A0      endp
.text:00404234
.text:00404234 ; ---------------------------------------------------------------------------
.text:00404235                 align 10h
.text:00404240
.text:00404240 ; =============== S U B R O U T I N E =======================================
.text:00404240
.text:00404240
.text:00404240 ; int __cdecl sub_404240(int, char *, int, int)
.text:00404240 sub_404240      proc near               ; CODE XREF: .text:00403DF2↑p
.text:00404240                                         ; .text:00403E22↑p ...
.text:00404240
.text:00404240 Block           = dword ptr -2Ch
.text:00404240 var_28          = dword ptr -28h
.text:00404240 Str             = dword ptr -24h
.text:00404240 var_20          = dword ptr -20h
.text:00404240 var_1C          = dword ptr -1Ch
.text:00404240 var_18          = dword ptr -18h
.text:00404240 var_14          = dword ptr -14h
.text:00404240 arg_0           = dword ptr  4
.text:00404240 arg_4           = dword ptr  8
.text:00404240 arg_8           = dword ptr  0Ch
.text:00404240 arg_C           = dword ptr  10h
.text:00404240
.text:00404240                 push    ebp
.text:00404241                 push    edi
.text:00404242                 push    esi
.text:00404243                 push    ebx
.text:00404244                 sub     esp, 1Ch
.text:00404247                 call    _errno
.text:0040424C                 mov     edx, [eax]
.text:0040424E                 mov     eax, [esp+2Ch+arg_0]
.text:00404252                 mov     [esp+2Ch+var_14], edx
.text:00404256                 test    eax, eax
.text:00404258                 js      loc_4043FA
.text:0040425E                 mov     eax, [esp+2Ch+arg_0]
.text:00404262                 cmp     dword_405040, eax
.text:00404268                 ja      short loc_4042E0
.text:0040426A                 mov     esi, eax
.text:0040426C                 inc     esi
.text:0040426D                 cmp     esi, 1FFFFFFFh
.text:00404273                 ja      loc_4043FF
.text:00404279                 mov     ebx, off_40504C
.text:0040427F                 cmp     ebx, offset dword_405044
.text:00404285                 jz      loc_4043D1
.text:0040428B
.text:0040428B loc_40428B:                             ; CODE XREF: sub_404240+1B5↓j
.text:0040428B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040428E                 lea     ecx, ds:0[esi*8]
.text:00404295                 mov     ebp, esi
.text:00404297                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040429B                 call    sub_4044E0
.text:004042A0                 mov     off_40504C, eax
.text:004042A5                 mov     ebx, dword_405040
.text:004042AB                 sub     ebp, ebx
.text:004042AD                 lea     edi, [eax+ebx*8]
.text:004042B0                 lea     eax, ds:0[ebp*8]
.text:004042B7                 cmp     eax, 7
.text:004042BA                 jbe     short loc_4042D0
.text:004042BC                 test    edi, 4
.text:004042C2                 jz      short loc_4042D0
.text:004042C4                 mov     dword ptr [edi], 0
.text:004042CA                 sub     eax, 4
.text:004042CD                 add     edi, 4
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_404240+7A↑j
.text:004042D0                                         ; sub_404240+82↑j
.text:004042D0                 cld
.text:004042D1                 mov     ecx, eax
.text:004042D3                 shr     ecx, 2
.text:004042D6                 xor     eax, eax
.text:004042D8                 rep stosd
.text:004042DA                 mov     dword_405040, esi
.text:004042E0
.text:004042E0 loc_4042E0:                             ; CODE XREF: sub_404240+28↑j
.text:004042E0                 mov     esi, off_40504C
.text:004042E6                 mov     eax, [esp+2Ch+arg_0]
.text:004042EA                 mov     ebp, [esi+eax*8]
.text:004042ED                 mov     edi, [esi+eax*8+4]
.text:004042F1                 mov     esi, [esp+2Ch+arg_C]
.text:004042F5                 test    esi, esi
.text:004042F7                 jz      loc_4043C7
.text:004042FD
.text:004042FD loc_4042FD:                             ; CODE XREF: sub_404240+18C↓j
.text:004042FD                 call    _errno
.text:00404302                 mov     ebx, [eax]
.text:00404304                 mov     [esp+2Ch+var_18], esi ; int
.text:00404308                 mov     ecx, [esi]
.text:0040430A                 mov     [esp+2Ch+Block], edi ; int
.text:0040430D                 mov     edx, [esp+2Ch+arg_8]
.text:00404311                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404315                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404319                 mov     ecx, [esp+2Ch+arg_4]
.text:0040431D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404321                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404325                 call    sub_403100
.text:0040432A                 mov     esi, eax
.text:0040432C                 call    _errno
.text:00404331                 mov     [eax], ebx
.text:00404333                 cmp     ebp, esi
.text:00404335                 ja      short loc_4043AB
.text:00404337                 lea     ebp, [esi+1]
.text:0040433A                 mov     ebx, off_40504C
.text:00404340                 cmp     edi, offset unk_406050
.text:00404346                 mov     esi, [esp+2Ch+arg_0]
.text:0040434A                 mov     [ebx+esi*8], ebp
.text:0040434D                 jz      short loc_40435D
.text:0040434F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404352                 call    free
.text:00404357                 mov     ebx, off_40504C
.text:0040435D
.text:0040435D loc_40435D:                             ; CODE XREF: sub_404240+10D↑j
.text:0040435D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404360                 call    sub_404450
.text:00404365                 mov     esi, [esp+2Ch+arg_C]
.text:00404369                 mov     edi, eax
.text:0040436B                 mov     eax, [esp+2Ch+arg_0]
.text:0040436F                 test    esi, esi
.text:00404371                 mov     [ebx+eax*8+4], edi
.text:00404375                 jz      short loc_4043C0
.text:00404377
.text:00404377 loc_404377:                             ; CODE XREF: sub_404240+185↓j
.text:00404377                 call    _errno
.text:0040437C                 mov     ebx, [eax]
.text:0040437E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404382                 mov     ecx, [esi]
.text:00404384                 mov     [esp+2Ch+Block], edi ; int
.text:00404387                 mov     edx, [esp+2Ch+arg_8]
.text:0040438B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040438F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404393                 mov     ecx, [esp+2Ch+arg_4]
.text:00404397                 mov     [esp+2Ch+var_20], edx ; int
.text:0040439B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040439F                 call    sub_403100
.text:004043A4                 call    _errno
.text:004043A9                 mov     [eax], ebx
.text:004043AB
.text:004043AB loc_4043AB:                             ; CODE XREF: sub_404240+F5↑j
.text:004043AB                 call    _errno
.text:004043B0                 mov     ebp, [esp+2Ch+var_14]
.text:004043B4                 mov     [eax], ebp
.text:004043B6                 add     esp, 1Ch
.text:004043B9                 mov     eax, edi
.text:004043BB                 pop     ebx
.text:004043BC                 pop     esi
.text:004043BD                 pop     edi
.text:004043BE                 pop     ebp
.text:004043BF                 retn
.text:004043C0 ; ---------------------------------------------------------------------------
.text:004043C0
.text:004043C0 loc_4043C0:                             ; CODE XREF: sub_404240+135↑j
.text:004043C0                 mov     esi, offset dword_406150
.text:004043C5                 jmp     short loc_404377
.text:004043C7 ; ---------------------------------------------------------------------------
.text:004043C7
.text:004043C7 loc_4043C7:                             ; CODE XREF: sub_404240+B7↑j
.text:004043C7                 mov     esi, offset dword_406150
.text:004043CC                 jmp     loc_4042FD
.text:004043D1 ; ---------------------------------------------------------------------------
.text:004043D1
.text:004043D1 loc_4043D1:                             ; CODE XREF: sub_404240+45↑j
.text:004043D1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004043D8                 call    sub_404450
.text:004043DD                 mov     off_40504C, eax
.text:004043E2                 mov     edi, dword_405044
.text:004043E8                 mov     ebx, eax
.text:004043EA                 mov     ecx, off_405048
.text:004043F0                 mov     [eax], edi
.text:004043F2                 mov     [eax+4], ecx
.text:004043F5                 jmp     loc_40428B
.text:004043FA ; ---------------------------------------------------------------------------
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_404240+18↑j
.text:004043FA                 call    abort
.text:004043FF ; ---------------------------------------------------------------------------
.text:004043FF
.text:004043FF loc_4043FF:                             ; CODE XREF: sub_404240+33↑j
.text:004043FF                 call    sub_404700
.text:004043FF sub_404240      endp
.text:004043FF
.text:004043FF ; ---------------------------------------------------------------------------
.text:00404404                 align 10h
.text:00404410
.text:00404410 ; =============== S U B R O U T I N E =======================================
.text:00404410
.text:00404410
.text:00404410 sub_404410      proc near
.text:00404410
.text:00404410 Size            = dword ptr -0Ch
.text:00404410 var_4           = dword ptr -4
.text:00404410 arg_0           = dword ptr  4
.text:00404410 arg_4           = dword ptr  8
.text:00404410
.text:00404410                 sub     esp, 0Ch
.text:00404413                 xor     edx, edx
.text:00404415                 mov     ecx, [esp+0Ch+arg_4]
.text:00404419                 mov     [esp+0Ch+var_4], ebx
.text:0040441D                 mov     eax, 0FFFFFFFFh
.text:00404422                 mov     ebx, [esp+0Ch+arg_0]
.text:00404426                 div     ecx
.text:00404428                 cmp     eax, ebx
.text:0040442A                 jb      short loc_404449
.text:0040442C                 mov     edx, ebx
.text:0040442E                 imul    edx, ecx
.text:00404431                 mov     [esp+0Ch+Size], edx ; Size
.text:00404434                 call    malloc
.text:00404439                 test    eax, eax
.text:0040443B                 jz      short loc_404445
.text:0040443D
.text:0040443D loc_40443D:                             ; CODE XREF: sub_404410+37↓j
.text:0040443D                 mov     ebx, [esp+0Ch+var_4]
.text:00404441                 add     esp, 0Ch
.text:00404444                 retn
.text:00404445 ; ---------------------------------------------------------------------------
.text:00404445
.text:00404445 loc_404445:                             ; CODE XREF: sub_404410+2B↑j
.text:00404445                 test    ebx, ebx
.text:00404447                 jz      short loc_40443D
.text:00404449
.text:00404449 loc_404449:                             ; CODE XREF: sub_404410+1A↑j
.text:00404449                 call    sub_404700
.text:00404449 sub_404410      endp
.text:00404449
.text:00404449 ; ---------------------------------------------------------------------------
.text:0040444E                 align 10h
.text:00404450
.text:00404450 ; =============== S U B R O U T I N E =======================================
.text:00404450
.text:00404450
.text:00404450 ; int __cdecl sub_404450(size_t)
.text:00404450 sub_404450      proc near               ; CODE XREF: .text:00403B79↑p
.text:00404450                                         ; .text:00403D56↑p ...
.text:00404450
.text:00404450 Size            = dword ptr -0Ch
.text:00404450 var_4           = dword ptr -4
.text:00404450 arg_0           = dword ptr  4
.text:00404450
.text:00404450                 sub     esp, 0Ch
.text:00404453                 mov     [esp+0Ch+var_4], ebx
.text:00404457                 mov     ebx, [esp+0Ch+arg_0]
.text:0040445B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040445E                 call    malloc
.text:00404463                 test    eax, eax
.text:00404465                 jz      short loc_404470
.text:00404467
.text:00404467 loc_404467:                             ; CODE XREF: sub_404450+22↓j
.text:00404467                 mov     ebx, [esp+0Ch+var_4]
.text:0040446B                 add     esp, 0Ch
.text:0040446E                 retn
.text:0040446E ; ---------------------------------------------------------------------------
.text:0040446F                 align 10h
.text:00404470
.text:00404470 loc_404470:                             ; CODE XREF: sub_404450+15↑j
.text:00404470                 test    ebx, ebx
.text:00404472                 jz      short loc_404467
.text:00404474                 call    sub_404700
.text:00404474 sub_404450      endp
.text:00404474
.text:00404474 ; ---------------------------------------------------------------------------
.text:00404479                 align 10h
.text:00404480                 sub     esp, 1Ch
.text:00404483                 xor     edx, edx
.text:00404485                 mov     eax, 0FFFFFFFFh
.text:0040448A                 mov     [esp+14h], ebx
.text:0040448E                 mov     ecx, [esp+20h]
.text:00404492                 mov     ebx, [esp+28h]
.text:00404496                 mov     [esp+18h], esi
.text:0040449A                 mov     esi, [esp+24h]
.text:0040449E                 div     ebx
.text:004044A0                 cmp     eax, esi
.text:004044A2                 jb      short loc_4044D4
.text:004044A4                 mov     [esp], ecx
.text:004044A7                 mov     edx, esi
.text:004044A9                 imul    edx, ebx
.text:004044AC                 mov     [esp+4], edx
.text:004044B0                 call    realloc
.text:004044B5                 test    eax, eax
.text:004044B7                 mov     ecx, eax
.text:004044B9                 jz      short loc_4044D0
.text:004044BB
.text:004044BB loc_4044BB:                             ; CODE XREF: .text:004044D2↓j
.text:004044BB                 mov     ebx, [esp+14h]
.text:004044BF                 mov     eax, ecx
.text:004044C1                 mov     esi, [esp+18h]
.text:004044C5                 add     esp, 1Ch
.text:004044C8                 retn
.text:004044C8 ; ---------------------------------------------------------------------------
.text:004044C9                 align 10h
.text:004044D0
.text:004044D0 loc_4044D0:                             ; CODE XREF: .text:004044B9↑j
.text:004044D0                 test    esi, esi
.text:004044D2                 jz      short loc_4044BB
.text:004044D4
.text:004044D4 loc_4044D4:                             ; CODE XREF: .text:004044A2↑j
.text:004044D4                 call    sub_404700
.text:004044D4 ; ---------------------------------------------------------------------------
.text:004044D9                 align 10h
.text:004044E0
.text:004044E0 ; =============== S U B R O U T I N E =======================================
.text:004044E0
.text:004044E0
.text:004044E0 ; int __cdecl sub_4044E0(void *, size_t)
.text:004044E0 sub_4044E0      proc near               ; CODE XREF: sub_404240+5B↑p
.text:004044E0
.text:004044E0 Block           = dword ptr -0Ch
.text:004044E0 Size            = dword ptr -8
.text:004044E0 var_4           = dword ptr -4
.text:004044E0 arg_0           = dword ptr  4
.text:004044E0 arg_4           = dword ptr  8
.text:004044E0
.text:004044E0                 sub     esp, 0Ch
.text:004044E3                 mov     edx, [esp+0Ch+arg_0]
.text:004044E7                 mov     [esp+0Ch+var_4], ebx
.text:004044EB                 mov     ebx, [esp+0Ch+arg_4]
.text:004044EF                 mov     [esp+0Ch+Block], edx ; Block
.text:004044F2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004044F6                 call    realloc
.text:004044FB                 test    eax, eax
.text:004044FD                 jz      short loc_404507
.text:004044FF
.text:004044FF loc_4044FF:                             ; CODE XREF: sub_4044E0+29↓j
.text:004044FF                 mov     ebx, [esp+0Ch+var_4]
.text:00404503                 add     esp, 0Ch
.text:00404506                 retn
.text:00404507 ; ---------------------------------------------------------------------------
.text:00404507
.text:00404507 loc_404507:                             ; CODE XREF: sub_4044E0+1D↑j
.text:00404507                 test    ebx, ebx
.text:00404509                 jz      short loc_4044FF
.text:0040450B                 call    sub_404700
.text:0040450B sub_4044E0      endp
.text:0040450B
.text:00404510 ; ---------------------------------------------------------------------------
.text:00404510                 jmp     sub_404660
.text:00404510 ; ---------------------------------------------------------------------------
.text:00404515                 align 10h
.text:00404520                 sub     esp, 0Ch
.text:00404523                 mov     edx, [esp+14h]
.text:00404527                 mov     dword ptr [esp+8], 1
.text:0040452F                 mov     [esp+4], edx
.text:00404533                 mov     edx, [esp+10h]
.text:00404537                 mov     [esp], edx
.text:0040453A                 call    sub_404660
.text:0040453F                 add     esp, 0Ch
.text:00404542                 retn
.text:00404542 ; ---------------------------------------------------------------------------
.text:00404543                 align 10h
.text:00404550                 sub     esp, 1Ch
.text:00404553                 mov     [esp+18h], ebx
.text:00404557                 mov     ebx, [esp+20h]
.text:0040455B                 mov     [esp], ebx
.text:0040455E                 call    malloc
.text:00404563                 test    eax, eax
.text:00404565                 jz      short loc_404583
.text:00404567
.text:00404567 loc_404567:                             ; CODE XREF: .text:00404585↓j
.text:00404567                 mov     [esp+8], ebx
.text:0040456B                 mov     dword ptr [esp+4], 0
.text:00404573                 mov     [esp], eax
.text:00404576                 call    memset
.text:0040457B                 mov     ebx, [esp+18h]
.text:0040457F                 add     esp, 1Ch
.text:00404582                 retn
.text:00404583 ; ---------------------------------------------------------------------------
.text:00404583
.text:00404583 loc_404583:                             ; CODE XREF: .text:00404565↑j
.text:00404583                 test    ebx, ebx
.text:00404585                 jz      short loc_404567
.text:00404587                 call    sub_404700
.text:00404587 ; ---------------------------------------------------------------------------
.text:0040458C                 align 10h
.text:00404590                 sub     esp, 0Ch
.text:00404593                 xor     edx, edx
.text:00404595                 mov     ecx, [esp+14h]
.text:00404599                 mov     [esp+8], ebx
.text:0040459D                 mov     eax, 0FFFFFFFFh
.text:004045A2                 mov     ebx, [esp+10h]
.text:004045A6                 div     ecx
.text:004045A8                 cmp     eax, ebx
.text:004045AA                 jb      short loc_4045C8
.text:004045AC                 mov     [esp+4], ecx
.text:004045B0                 mov     [esp], ebx
.text:004045B3                 call    calloc
.text:004045B8                 test    eax, eax
.text:004045BA                 jz      short loc_4045C4
.text:004045BC
.text:004045BC loc_4045BC:                             ; CODE XREF: .text:004045C6↓j
.text:004045BC                 mov     ebx, [esp+8]
.text:004045C0                 add     esp, 0Ch
.text:004045C3                 retn
.text:004045C4 ; ---------------------------------------------------------------------------
.text:004045C4
.text:004045C4 loc_4045C4:                             ; CODE XREF: .text:004045BA↑j
.text:004045C4                 test    ebx, ebx
.text:004045C6                 jz      short loc_4045BC
.text:004045C8
.text:004045C8 loc_4045C8:                             ; CODE XREF: .text:004045AA↑j
.text:004045C8                 call    sub_404700
.text:004045C8 ; ---------------------------------------------------------------------------
.text:004045CD                 align 10h
.text:004045D0                 sub     esp, 1Ch
.text:004045D3                 mov     [esp+18h], ebx
.text:004045D7                 mov     ebx, [esp+24h]
.text:004045DB                 mov     [esp], ebx
.text:004045DE                 call    malloc
.text:004045E3                 test    eax, eax
.text:004045E5                 mov     edx, eax
.text:004045E7                 jz      short loc_404605
.text:004045E9
.text:004045E9 loc_4045E9:                             ; CODE XREF: .text:00404607↓j
.text:004045E9                 mov     [esp+8], ebx
.text:004045ED                 mov     ecx, [esp+20h]
.text:004045F1                 mov     [esp], edx
.text:004045F4                 mov     [esp+4], ecx
.text:004045F8                 call    memcpy
.text:004045FD                 mov     ebx, [esp+18h]
.text:00404601                 add     esp, 1Ch
.text:00404604                 retn
.text:00404605 ; ---------------------------------------------------------------------------
.text:00404605
.text:00404605 loc_404605:                             ; CODE XREF: .text:004045E7↑j
.text:00404605                 test    ebx, ebx
.text:00404607                 jz      short loc_4045E9
.text:00404609                 call    sub_404700
.text:00404609 ; ---------------------------------------------------------------------------
.text:0040460E                 align 10h
.text:00404610                 sub     esp, 1Ch
.text:00404613                 mov     [esp+18h], esi
.text:00404617                 mov     esi, [esp+20h]
.text:0040461B                 mov     [esp+14h], ebx
.text:0040461F                 mov     [esp], esi
.text:00404622                 call    strlen
.text:00404627                 lea     ebx, [eax+1]
.text:0040462A                 mov     [esp], ebx
.text:0040462D                 call    malloc
.text:00404632                 test    eax, eax
.text:00404634                 jz      short loc_404652
.text:00404636
.text:00404636 loc_404636:                             ; CODE XREF: .text:00404654↓j
.text:00404636                 mov     [esp+8], ebx
.text:0040463A                 mov     [esp+4], esi
.text:0040463E                 mov     [esp], eax
.text:00404641                 call    memcpy
.text:00404646                 mov     ebx, [esp+14h]
.text:0040464A                 mov     esi, [esp+18h]
.text:0040464E                 add     esp, 1Ch
.text:00404651                 retn
.text:00404652 ; ---------------------------------------------------------------------------
.text:00404652
.text:00404652 loc_404652:                             ; CODE XREF: .text:00404634↑j
.text:00404652                 test    ebx, ebx
.text:00404654                 jz      short loc_404636
.text:00404656                 call    sub_404700
.text:00404656 ; ---------------------------------------------------------------------------
.text:0040465B                 align 10h
.text:00404660
.text:00404660 ; =============== S U B R O U T I N E =======================================
.text:00404660
.text:00404660
.text:00404660 ; int __cdecl sub_404660(void *, int, int)
.text:00404660 sub_404660      proc near               ; CODE XREF: .text:00404510↑j
.text:00404660                                         ; .text:0040453A↑p
.text:00404660
.text:00404660 Block           = dword ptr -1Ch
.text:00404660 Size            = dword ptr -18h
.text:00404660 var_C           = dword ptr -0Ch
.text:00404660 var_8           = dword ptr -8
.text:00404660 var_4           = dword ptr -4
.text:00404660 arg_0           = dword ptr  4
.text:00404660 arg_4           = dword ptr  8
.text:00404660 arg_8           = dword ptr  0Ch
.text:00404660
.text:00404660                 sub     esp, 1Ch
.text:00404663                 mov     [esp+1Ch+var_8], esi
.text:00404667                 mov     esi, [esp+1Ch+arg_0]
.text:0040466B                 mov     [esp+1Ch+var_4], edi
.text:0040466F                 mov     edi, [esp+1Ch+arg_4]
.text:00404673                 test    esi, esi
.text:00404675                 mov     [esp+1Ch+var_C], ebx
.text:00404679                 mov     ecx, [edi]
.text:0040467B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040467F                 jz      short loc_4046C0
.text:00404681                 xor     edx, edx
.text:00404683                 mov     eax, 7FFFFFFFh
.text:00404688                 div     ebx
.text:0040468A                 cmp     eax, ecx
.text:0040468C                 jb      short loc_4046B9
.text:0040468E                 add     ecx, ecx
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_404660+62↓j
.text:00404690                                         ; sub_404660+71↓j ...
.text:00404690                 mov     [edi], ecx
.text:00404692                 imul    ebx, ecx
.text:00404695                 mov     [esp+1Ch+Block], esi ; Block
.text:00404698                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040469C                 call    realloc
.text:004046A1                 test    eax, eax
.text:004046A3                 jz      short loc_4046B5
.text:004046A5
.text:004046A5 loc_4046A5:                             ; CODE XREF: sub_404660+57↓j
.text:004046A5                 mov     ebx, [esp+1Ch+var_C]
.text:004046A9                 mov     esi, [esp+1Ch+var_8]
.text:004046AD                 mov     edi, [esp+1Ch+var_4]
.text:004046B1                 add     esp, 1Ch
.text:004046B4                 retn
.text:004046B5 ; ---------------------------------------------------------------------------
.text:004046B5
.text:004046B5 loc_4046B5:                             ; CODE XREF: sub_404660+43↑j
.text:004046B5                 test    ebx, ebx
.text:004046B7                 jz      short loc_4046A5
.text:004046B9
.text:004046B9 loc_4046B9:                             ; CODE XREF: sub_404660+2C↑j
.text:004046B9                 call    sub_404700
.text:004046B9 ; ---------------------------------------------------------------------------
.text:004046BE                 align 10h
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_404660+1F↑j
.text:004046C0                 test    ecx, ecx
.text:004046C2                 jnz     short loc_404690
.text:004046C4                 xor     edx, edx
.text:004046C6                 mov     eax, 40h ; '@'
.text:004046CB                 div     ebx
.text:004046CD                 test    eax, eax
.text:004046CF                 mov     ecx, eax
.text:004046D1                 jnz     short loc_404690
.text:004046D3                 mov     ecx, 1
.text:004046D8                 jmp     short loc_404690
.text:004046D8 sub_404660      endp
.text:004046D8
.text:004046D8 ; ---------------------------------------------------------------------------
.text:004046DA                 align 10h
.text:004046E0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404700+3↓o
.text:004046F1 ; const char aS_0[]
.text:004046F1 aS_0            db '%s',0               ; DATA XREF: sub_404700+10↓o
.text:004046F4                 align 10h
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700 ; Attributes: noreturn
.text:00404700
.text:00404700 sub_404700      proc near               ; CODE XREF: sub_404240:loc_4043FF↑p
.text:00404700                                         ; sub_404410:loc_404449↑p ...
.text:00404700
.text:00404700 Code            = dword ptr -1Ch
.text:00404700 ErrorMessage    = dword ptr -18h
.text:00404700 var_14          = dword ptr -14h
.text:00404700 var_10          = byte ptr -10h
.text:00404700
.text:00404700                 sub     esp, 1Ch
.text:00404703                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040470A                 call    ds:libintl_gettext
.text:00404710                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00404718                 mov     edx, Code
.text:0040471E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404726                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040472A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040472D                 call    sub_404790
.text:00404732                 call    abort
.text:00404732 sub_404700      endp
.text:00404732
.text:00404732 ; ---------------------------------------------------------------------------
.text:00404737                 align 10h
.text:00404740
.text:00404740 ; =============== S U B R O U T I N E =======================================
.text:00404740
.text:00404740 ; Attributes: thunk
.text:00404740
.text:00404740 libintl_bindtextdomain proc near
.text:00404740                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404740 libintl_bindtextdomain endp
.text:00404740
.text:00404740 ; ---------------------------------------------------------------------------
.text:00404746                 align 10h
.text:00404750                 jmp     ds:libintl_textdomain
.text:00404750 ; ---------------------------------------------------------------------------
.text:00404756                 align 10h
.text:00404760                 jmp     ds:libintl_gettext
.text:00404760 ; ---------------------------------------------------------------------------
.text:00404766                 align 10h
.text:00404770 ; const char aS_1[]
.text:00404770 aS_1            db ': %s',0             ; DATA XREF: sub_404790+B8↓o
.text:00404770                                         ; sub_404894+122↓o
.text:00404775 aUnknownSystemE db 'Unknown system error',0
.text:00404775                                         ; DATA XREF: sub_404790:loc_40485D↓o
.text:00404775                                         ; sub_404894:loc_4049CE↓o
.text:0040478A ; const char aS_2[]
.text:0040478A aS_2            db '%s: ',0             ; DATA XREF: sub_404790:loc_404864↓o
.text:0040478F                 align 10h
.text:00404790
.text:00404790 ; =============== S U B R O U T I N E =======================================
.text:00404790
.text:00404790
.text:00404790 ; int __cdecl sub_404790(int Code, int ErrorMessage, char *, char)
.text:00404790 sub_404790      proc near               ; CODE XREF: sub_401520+27B↑p
.text:00404790                                         ; sub_402F90+86↑p ...
.text:00404790
.text:00404790 Stream          = dword ptr -1Ch
.text:00404790 Format          = dword ptr -18h
.text:00404790 ArgList         = dword ptr -14h
.text:00404790 Code            = dword ptr  4
.text:00404790 ErrorMessage    = dword ptr  8
.text:00404790 arg_8           = dword ptr  0Ch
.text:00404790 arg_C           = byte ptr  10h
.text:00404790
.text:00404790                 push    esi
.text:00404791                 push    ebx
.text:00404792                 sub     esp, 14h
.text:00404795                 mov     edx, ds:_iob
.text:0040479B                 mov     esi, [esp+1Ch+Code]
.text:0040479F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004047A3                 add     edx, 20h ; ' '
.text:004047A6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004047A9                 call    fflush
.text:004047AE                 mov     eax, ds:dword_4061D0
.text:004047B3                 test    eax, eax
.text:004047B5                 jz      loc_404864
.text:004047BB                 call    eax ; dword_4061D0
.text:004047BD
.text:004047BD loc_4047BD:                             ; CODE XREF: sub_404790+F7↓j
.text:004047BD                 lea     edx, [esp+1Ch+arg_C]
.text:004047C1                 mov     ecx, [esp+1Ch+arg_8]
.text:004047C5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004047C9                 mov     edx, ds:_iob
.text:004047CF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004047D3                 add     edx, 40h ; '@'
.text:004047D6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004047D9                 call    vfprintf
.text:004047DE                 inc     ds:dword_4061E0
.text:004047E4                 test    ebx, ebx
.text:004047E6                 jnz     short loc_404832
.text:004047E8
.text:004047E8 loc_4047E8:                             ; CODE XREF: sub_404790+CB↓j
.text:004047E8                 mov     edx, ds:_iob
.text:004047EE                 lea     ecx, [edx+40h]
.text:004047F1                 mov     ebx, [ecx+4]
.text:004047F4                 dec     ebx
.text:004047F5                 test    ebx, ebx
.text:004047F7                 mov     [ecx+4], ebx
.text:004047FA                 js      short loc_404820
.text:004047FC                 mov     ecx, [edx+40h]
.text:004047FF                 mov     byte ptr [ecx], 0Ah
.text:00404802                 inc     dword ptr [edx+40h]
.text:00404805
.text:00404805 loc_404805:                             ; CODE XREF: sub_404790+A0↓j
.text:00404805                 mov     edx, ds:_iob
.text:0040480B                 add     edx, 40h ; '@'
.text:0040480E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404811                 call    fflush
.text:00404816                 test    esi, esi
.text:00404818                 jnz     short loc_40488C
.text:0040481A                 add     esp, 14h
.text:0040481D                 pop     ebx
.text:0040481E                 pop     esi
.text:0040481F                 retn
.text:00404820 ; ---------------------------------------------------------------------------
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_404790+6A↑j
.text:00404820                 mov     [esp+1Ch+Format], ecx ; File
.text:00404824                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040482B                 call    _flsbuf
.text:00404830                 jmp     short loc_404805
.text:00404832 ; ---------------------------------------------------------------------------
.text:00404832
.text:00404832 loc_404832:                             ; CODE XREF: sub_404790+56↑j
.text:00404832                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404835                 call    strerror
.text:0040483A                 test    eax, eax
.text:0040483C                 jz      short loc_40485D
.text:0040483E
.text:0040483E loc_40483E:                             ; CODE XREF: sub_404790+D2↓j
.text:0040483E                 mov     [esp+1Ch+ArgList], eax
.text:00404842                 mov     ebx, ds:_iob
.text:00404848                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00404850                 add     ebx, 40h ; '@'
.text:00404853                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404856                 call    fprintf
.text:0040485B                 jmp     short loc_4047E8
.text:0040485D ; ---------------------------------------------------------------------------
.text:0040485D
.text:0040485D loc_40485D:                             ; CODE XREF: sub_404790+AC↑j
.text:0040485D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404862                 jmp     short loc_40483E
.text:00404864 ; ---------------------------------------------------------------------------
.text:00404864
.text:00404864 loc_404864:                             ; CODE XREF: sub_404790+25↑j
.text:00404864                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040486C                 mov     edx, ds:_iob
.text:00404872                 mov     ecx, ds:dword_4061A0
.text:00404878                 add     edx, 40h ; '@'
.text:0040487B                 mov     [esp+1Ch+ArgList], ecx
.text:0040487F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404882                 call    fprintf
.text:00404887                 jmp     loc_4047BD
.text:0040488C ; ---------------------------------------------------------------------------
.text:0040488C
.text:0040488C loc_40488C:                             ; CODE XREF: sub_404790+88↑j
.text:0040488C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040488F                 call    exit
.text:0040488F sub_404790      endp
.text:0040488F
.text:00404894
.text:00404894 ; =============== S U B R O U T I N E =======================================
.text:00404894
.text:00404894
.text:00404894 ; int __cdecl sub_404894(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404894 sub_404894      proc near               ; DATA XREF: sub_404894+77↓o
.text:00404894
.text:00404894 Stream          = dword ptr -28h
.text:00404894 Format          = dword ptr -24h
.text:00404894 ArgList         = dword ptr -20h
.text:00404894 var_1C          = dword ptr -1Ch
.text:00404894 Code            = dword ptr  8
.text:00404894 ErrorMessage    = dword ptr  0Ch
.text:00404894 Str2            = dword ptr  10h
.text:00404894 arg_10          = dword ptr  14h
.text:00404894 arg_14          = dword ptr  18h
.text:00404894 arg_18          = byte ptr  1Ch
.text:00404894
.text:00404894                 and     eax, 64253A73h
.text:00404899                 cmp     ah, [eax]
.text:0040489B
.text:0040489B loc_40489B:                             ; DATA XREF: sub_404894:loc_4049D5↓o
.text:0040489B                 add     ds:55003A73h, ah
.text:004048A1                 push    edi
.text:004048A2                 push    esi
.text:004048A3                 push    ebx
.text:004048A4                 sub     esp, 1Ch
.text:004048A7                 mov     edx, ds:dword_406210
.text:004048AD                 mov     ebp, [esp+28h+Code]
.text:004048B1                 mov     edi, [esp+28h+ErrorMessage]
.text:004048B5                 test    edx, edx
.text:004048B7                 mov     ebx, [esp+28h+Str2]
.text:004048BB                 mov     esi, [esp+28h+arg_10]
.text:004048BF                 jz      short loc_4048D9
.text:004048C1                 cmp     ds:dword_406190, esi
.text:004048C7                 jz      loc_404A00
.text:004048CD
.text:004048CD loc_4048CD:                             ; CODE XREF: sub_404894+18D↓j
.text:004048CD                 mov     ds:Str1, ebx
.text:004048D3                 mov     ds:dword_406190, esi
.text:004048D9
.text:004048D9 loc_4048D9:                             ; CODE XREF: sub_404894+2B↑j
.text:004048D9                 mov     edx, ds:_iob
.text:004048DF                 add     edx, 20h ; ' '
.text:004048E2                 mov     [esp+28h+Stream], edx ; Stream
.text:004048E5                 call    fflush
.text:004048EA                 mov     eax, ds:dword_4061D0
.text:004048EF                 test    eax, eax
.text:004048F1                 jz      loc_4049D5
.text:004048F7                 call    eax ; dword_4061D0
.text:004048F9
.text:004048F9 loc_4048F9:                             ; CODE XREF: sub_404894+164↓j
.text:004048F9                 test    ebx, ebx
.text:004048FB                 jz      short loc_40491E
.text:004048FD                 mov     [esp+28h+ArgList], ebx
.text:00404901                 mov     ebx, ds:_iob
.text:00404907                 mov     [esp+28h+var_1C], esi
.text:0040490B                 mov     [esp+28h+Format], offset sub_404894 ; Format
.text:00404913                 add     ebx, 40h ; '@'
.text:00404916                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404919                 call    fprintf
.text:0040491E
.text:0040491E loc_40491E:                             ; CODE XREF: sub_404894+67↑j
.text:0040491E                 mov     esi, ds:_iob
.text:00404924                 lea     edx, [esp+28h+arg_18]
.text:00404928                 mov     ecx, [esp+28h+arg_14]
.text:0040492C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404930                 add     esi, 40h ; '@'
.text:00404933                 mov     [esp+28h+Format], ecx ; Format
.text:00404937                 mov     [esp+28h+Stream], esi ; Stream
.text:0040493A                 call    vfprintf
.text:0040493F                 inc     ds:dword_4061E0
.text:00404945                 test    edi, edi
.text:00404947                 jnz     short loc_4049A0
.text:00404949
.text:00404949 loc_404949:                             ; CODE XREF: sub_404894+135↓j
.text:00404949                 mov     edx, ds:_iob
.text:0040494F                 lea     ecx, [edx+40h]
.text:00404952                 mov     ebx, [ecx+4]
.text:00404955                 dec     ebx
.text:00404956                 test    ebx, ebx
.text:00404958                 mov     [ecx+4], ebx
.text:0040495B                 js      short loc_404987
.text:0040495D                 mov     esi, [edx+40h]
.text:00404960                 mov     byte ptr [esi], 0Ah
.text:00404963                 inc     dword ptr [edx+40h]
.text:00404966
.text:00404966 loc_404966:                             ; CODE XREF: sub_404894+103↓j
.text:00404966                 mov     ecx, ds:_iob
.text:0040496C                 add     ecx, 40h ; '@'
.text:0040496F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404972                 call    fflush
.text:00404977                 test    ebp, ebp
.text:00404979                 jnz     loc_404A26
.text:0040497F
.text:0040497F loc_40497F:                             ; CODE XREF: sub_404894+173↓j
.text:0040497F                                         ; sub_404894+187↓j
.text:0040497F                 add     esp, 1Ch
.text:00404982                 pop     ebx
.text:00404983                 pop     esi
.text:00404984                 pop     edi
.text:00404985                 pop     ebp
.text:00404986                 retn
.text:00404987 ; ---------------------------------------------------------------------------
.text:00404987
.text:00404987 loc_404987:                             ; CODE XREF: sub_404894+C7↑j
.text:00404987                 mov     [esp+28h+Format], ecx ; File
.text:0040498B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404992                 call    _flsbuf
.text:00404997                 jmp     short loc_404966
.text:00404997 ; ---------------------------------------------------------------------------
.text:00404999                 align 10h
.text:004049A0
.text:004049A0 loc_4049A0:                             ; CODE XREF: sub_404894+B3↑j
.text:004049A0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004049A3                 call    strerror
.text:004049A8                 test    eax, eax
.text:004049AA                 jz      short loc_4049CE
.text:004049AC
.text:004049AC loc_4049AC:                             ; CODE XREF: sub_404894+13F↓j
.text:004049AC                 mov     [esp+28h+ArgList], eax
.text:004049B0                 mov     edi, ds:_iob
.text:004049B6                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:004049BE                 add     edi, 40h ; '@'
.text:004049C1                 mov     [esp+28h+Stream], edi ; Stream
.text:004049C4                 call    fprintf
.text:004049C9                 jmp     loc_404949
.text:004049CE ; ---------------------------------------------------------------------------
.text:004049CE
.text:004049CE loc_4049CE:                             ; CODE XREF: sub_404894+116↑j
.text:004049CE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004049D3                 jmp     short loc_4049AC
.text:004049D5 ; ---------------------------------------------------------------------------
.text:004049D5
.text:004049D5 loc_4049D5:                             ; CODE XREF: sub_404894+5D↑j
.text:004049D5                 mov     [esp+28h+Format], (offset loc_40489B+1) ; Format
.text:004049DD                 mov     ecx, ds:_iob
.text:004049E3                 mov     edx, ds:dword_4061A0
.text:004049E9                 add     ecx, 40h ; '@'
.text:004049EC                 mov     [esp+28h+ArgList], edx
.text:004049F0                 mov     [esp+28h+Stream], ecx ; Stream
.text:004049F3                 call    fprintf
.text:004049F8                 jmp     loc_4048F9
.text:004049F8 ; ---------------------------------------------------------------------------
.text:004049FD                 align 10h
.text:00404A00
.text:00404A00 loc_404A00:                             ; CODE XREF: sub_404894+33↑j
.text:00404A00                 mov     eax, ds:Str1
.text:00404A05                 cmp     ebx, eax
.text:00404A07                 jz      loc_40497F
.text:00404A0D                 mov     [esp+28h+Format], ebx ; Str2
.text:00404A11                 mov     [esp+28h+Stream], eax ; Str1
.text:00404A14                 call    strcmp
.text:00404A19                 test    eax, eax
.text:00404A1B                 jz      loc_40497F
.text:00404A21                 jmp     loc_4048CD
.text:00404A26 ; ---------------------------------------------------------------------------
.text:00404A26
.text:00404A26 loc_404A26:                             ; CODE XREF: sub_404894+E5↑j
.text:00404A26                 mov     [esp+28h+Stream], ebp ; Code
.text:00404A29                 call    exit
.text:00404A29 sub_404894      endp ; sp-analysis failed
.text:00404A29
.text:00404A29 ; ---------------------------------------------------------------------------
.text:00404A2E                 align 10h
.text:00404A30 dword_404A30    dd 4E4F43h, 0B68Dh, 0BF8D0000h, 0
.text:00404A30                                         ; DATA XREF: .data:off_405050↓o
.text:00404A40
.text:00404A40 ; =============== S U B R O U T I N E =======================================
.text:00404A40
.text:00404A40
.text:00404A40 sub_404A40      proc near               ; CODE XREF: sub_401520+205↑p
.text:00404A40                 mov     eax, off_405050
.text:00404A45                 retn
.text:00404A45 sub_404A40      endp
.text:00404A45
.text:00404A45 ; ---------------------------------------------------------------------------
.text:00404A46                 align 10h
.text:00404A50
.text:00404A50 ; =============== S U B R O U T I N E =======================================
.text:00404A50
.text:00404A50 ; Attributes: thunk
.text:00404A50
.text:00404A50 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00404A50 mbrtowc         proc near               ; CODE XREF: sub_403100+757↑p
.text:00404A50
.text:00404A50 DstCh           = dword ptr  4
.text:00404A50 SrcCh           = dword ptr  8
.text:00404A50 SizeInBytes     = dword ptr  0Ch
.text:00404A50 State           = dword ptr  10h
.text:00404A50
.text:00404A50                 jmp     ds:__imp_mbrtowc
.text:00404A50 mbrtowc         endp
.text:00404A50
.text:00404A50 ; ---------------------------------------------------------------------------
.text:00404A56                 align 10h
.text:00404A60
.text:00404A60 ; =============== S U B R O U T I N E =======================================
.text:00404A60
.text:00404A60 ; Attributes: bp-based frame
.text:00404A60
.text:00404A60 sub_404A60      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00404A60                 push    ebp
.text:00404A61                 mov     ecx, offset byte_406000
.text:00404A66                 cmp     ecx, offset byte_406000
.text:00404A6C                 mov     ebp, esp
.text:00404A6E                 jnb     short loc_404A86
.text:00404A70
.text:00404A70 loc_404A70:                             ; CODE XREF: sub_404A60+24↓j
.text:00404A70                 mov     edx, [ecx+4]
.text:00404A73                 mov     eax, [ecx]
.text:00404A75                 add     ecx, 8
.text:00404A78                 add     [edx+400000h], eax
.text:00404A7E                 cmp     ecx, offset byte_406000
.text:00404A84                 jb      short loc_404A70
.text:00404A86
.text:00404A86 loc_404A86:                             ; CODE XREF: sub_404A60+E↑j
.text:00404A86                 pop     ebp
.text:00404A87                 retn
.text:00404A87 sub_404A60      endp
.text:00404A87
.text:00404A87 ; ---------------------------------------------------------------------------
.text:00404A88                 align 10h
.text:00404A90
.text:00404A90 ; =============== S U B R O U T I N E =======================================
.text:00404A90
.text:00404A90 ; Attributes: bp-based frame
.text:00404A90
.text:00404A90 sub_404A90      proc near               ; CODE XREF: sub_401080+16↑p
.text:00404A90                                         ; TopLevelExceptionFilter+D7↑p
.text:00404A90                 push    ebp
.text:00404A91                 mov     ebp, esp
.text:00404A93                 fninit
.text:00404A95                 pop     ebp
.text:00404A96                 retn
.text:00404A96 sub_404A90      endp
.text:00404A96
.text:00404A96 ; ---------------------------------------------------------------------------
.text:00404A97                 align 10h
.text:00404AA0
.text:00404AA0 ; =============== S U B R O U T I N E =======================================
.text:00404AA0
.text:00404AA0 ; Attributes: bp-based frame
.text:00404AA0
.text:00404AA0 ; void __cdecl sub_404AA0()
.text:00404AA0 sub_404AA0      proc near               ; DATA XREF: .text:loc_404AE9↓o
.text:00404AA0                                         ; sub_404B30:loc_404B5E↓o
.text:00404AA0                 push    ebp
.text:00404AA1                 mov     ebp, esp
.text:00404AA3                 sub     esp, 8
.text:00404AA6                 mov     eax, off_405094
.text:00404AAB                 mov     edx, [eax]
.text:00404AAD                 test    edx, edx
.text:00404AAF                 jnz     short loc_404AB5
.text:00404AB1
.text:00404AB1 loc_404AB1:                             ; CODE XREF: sub_404AA0+2C↓j
.text:00404AB1                 mov     esp, ebp
.text:00404AB3                 pop     ebp
.text:00404AB4                 retn
.text:00404AB5 ; ---------------------------------------------------------------------------
.text:00404AB5
.text:00404AB5 loc_404AB5:                             ; CODE XREF: sub_404AA0+F↑j
.text:00404AB5                                         ; sub_404AA0+2A↓j
.text:00404AB5                 call    dword ptr [eax]
.text:00404AB7                 mov     edx, off_405094
.text:00404ABD                 mov     ecx, [edx+4]
.text:00404AC0                 lea     eax, [edx+4]
.text:00404AC3                 mov     off_405094, eax
.text:00404AC8                 test    ecx, ecx
.text:00404ACA                 jnz     short loc_404AB5
.text:00404ACC                 jmp     short loc_404AB1
.text:00404ACC sub_404AA0      endp
.text:00404ACC
.text:00404ACC ; ---------------------------------------------------------------------------
.text:00404ACE                 align 10h
.text:00404AD0                 push    ebp
.text:00404AD1                 mov     ebp, esp
.text:00404AD3                 sub     esp, 8
.text:00404AD6                 mov     [ebp-4], ebx
.text:00404AD9                 mov     eax, ds:dword_404E10
.text:00404ADE                 cmp     eax, 0FFFFFFFFh
.text:00404AE1                 jz      short loc_404B0C
.text:00404AE3
.text:00404AE3 loc_404AE3:                             ; CODE XREF: .text:00404B16↓j
.text:00404AE3                                         ; .text:00404B29↓j
.text:00404AE3                 test    eax, eax
.text:00404AE5                 mov     ebx, eax
.text:00404AE7                 jnz     short loc_404B00
.text:00404AE9
.text:00404AE9 loc_404AE9:                             ; CODE XREF: .text:00404B0A↓j
.text:00404AE9                 mov     dword ptr [esp], offset sub_404AA0
.text:00404AF0                 call    sub_401040
.text:00404AF5                 mov     ebx, [ebp-4]
.text:00404AF8                 mov     esp, ebp
.text:00404AFA                 pop     ebp
.text:00404AFB                 retn
.text:00404AFB ; ---------------------------------------------------------------------------
.text:00404AFC                 align 10h
.text:00404B00
.text:00404B00 loc_404B00:                             ; CODE XREF: .text:00404AE7↑j
.text:00404B00                                         ; .text:00404B08↓j
.text:00404B00                 call    ds:dword_404E10[ebx*4]
.text:00404B07                 dec     ebx
.text:00404B08                 jnz     short loc_404B00
.text:00404B0A                 jmp     short loc_404AE9
.text:00404B0C ; ---------------------------------------------------------------------------
.text:00404B0C
.text:00404B0C loc_404B0C:                             ; CODE XREF: .text:00404AE1↑j
.text:00404B0C                 mov     ecx, ds:dword_404E14
.text:00404B12                 xor     eax, eax
.text:00404B14                 test    ecx, ecx
.text:00404B16                 jz      short loc_404AE3
.text:00404B18                 mov     edx, offset dword_404E10
.text:00404B1D                 lea     esi, [esi+0]
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: .text:00404B27↓j
.text:00404B20                 inc     eax
.text:00404B21                 mov     ecx, [edx+eax*4+4]
.text:00404B25                 test    ecx, ecx
.text:00404B27                 jnz     short loc_404B20
.text:00404B29                 jmp     short loc_404AE3
.text:00404B29 ; ---------------------------------------------------------------------------
.text:00404B2B                 align 10h
.text:00404B30
.text:00404B30 ; =============== S U B R O U T I N E =======================================
.text:00404B30
.text:00404B30 ; Attributes: bp-based frame
.text:00404B30
.text:00404B30 sub_404B30      proc near               ; CODE XREF: sub_401520+18↑p
.text:00404B30
.text:00404B30 var_8           = dword ptr -8
.text:00404B30 var_4           = dword ptr -4
.text:00404B30
.text:00404B30                 push    ebp
.text:00404B31                 mov     ebp, esp
.text:00404B33                 sub     esp, 8
.text:00404B36                 mov     [ebp+var_4], ebx
.text:00404B39                 mov     edx, dword_405090
.text:00404B3F                 test    edx, edx
.text:00404B41                 jnz     short loc_404B6A
.text:00404B43                 mov     eax, ds:dword_404E10
.text:00404B48                 mov     edx, 1
.text:00404B4D                 mov     dword_405090, edx
.text:00404B53                 cmp     eax, 0FFFFFFFFh
.text:00404B56                 jz      short loc_404B7D
.text:00404B58
.text:00404B58 loc_404B58:                             ; CODE XREF: sub_404B30+57↓j
.text:00404B58                                         ; sub_404B30+69↓j
.text:00404B58                 test    eax, eax
.text:00404B5A                 mov     ebx, eax
.text:00404B5C                 jnz     short loc_404B71
.text:00404B5E
.text:00404B5E loc_404B5E:                             ; CODE XREF: sub_404B30+4B↓j
.text:00404B5E                 mov     [esp+8+var_8], offset sub_404AA0 ; void (__cdecl *)()
.text:00404B65                 call    sub_401040
.text:00404B6A
.text:00404B6A loc_404B6A:                             ; CODE XREF: sub_404B30+11↑j
.text:00404B6A                 mov     ebx, [ebp+var_4]
.text:00404B6D                 mov     esp, ebp
.text:00404B6F                 pop     ebp
.text:00404B70                 retn
.text:00404B71 ; ---------------------------------------------------------------------------
.text:00404B71
.text:00404B71 loc_404B71:                             ; CODE XREF: sub_404B30+2C↑j
.text:00404B71                                         ; sub_404B30+49↓j
.text:00404B71                 call    ds:dword_404E10[ebx*4]
.text:00404B78                 dec     ebx
.text:00404B79                 jnz     short loc_404B71
.text:00404B7B                 jmp     short loc_404B5E
.text:00404B7D ; ---------------------------------------------------------------------------
.text:00404B7D
.text:00404B7D loc_404B7D:                             ; CODE XREF: sub_404B30+26↑j
.text:00404B7D                 mov     ecx, ds:dword_404E14
.text:00404B83                 xor     eax, eax
.text:00404B85                 test    ecx, ecx
.text:00404B87                 jz      short loc_404B58
.text:00404B89                 mov     edx, offset dword_404E10
.text:00404B8E                 mov     esi, esi
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_404B30+67↓j
.text:00404B90                 inc     eax
.text:00404B91                 mov     ebx, [edx+eax*4+4]
.text:00404B95                 test    ebx, ebx
.text:00404B97                 jnz     short loc_404B90
.text:00404B99                 jmp     short loc_404B58
.text:00404B99 sub_404B30      endp
.text:00404B99
.text:00404B99 ; ---------------------------------------------------------------------------
.text:00404B9B                 align 10h
.text:00404BA0
.text:00404BA0 ; =============== S U B R O U T I N E =======================================
.text:00404BA0
.text:00404BA0 ; Attributes: info_from_lumina
.text:00404BA0
.text:00404BA0 ; void *__cdecl _alloca(size_t Size)
.text:00404BA0 __alloca        proc near               ; CODE XREF: sub_401520+13↑p
.text:00404BA0                 push    ecx
.text:00404BA1                 mov     ecx, esp
.text:00404BA3                 add     ecx, 8
.text:00404BA6
.text:00404BA6 loc_404BA6:                             ; CODE XREF: __alloca+1B↓j
.text:00404BA6                 cmp     eax, 1000h
.text:00404BAB                 jb      short loc_404BBD
.text:00404BAD                 sub     ecx, 1000h
.text:00404BB3                 or      dword ptr [ecx], 0
.text:00404BB6                 sub     eax, 1000h
.text:00404BBB                 jmp     short loc_404BA6
.text:00404BBD ; ---------------------------------------------------------------------------
.text:00404BBD
.text:00404BBD loc_404BBD:                             ; CODE XREF: __alloca+B↑j
.text:00404BBD                 sub     ecx, eax
.text:00404BBF                 or      dword ptr [ecx], 0
.text:00404BC2                 mov     eax, esp
.text:00404BC4                 mov     esp, ecx
.text:00404BC6                 mov     ecx, [eax]
.text:00404BC8                 mov     eax, [eax+4]
.text:00404BCB                 jmp     eax
.text:00404BCB __alloca        endp
.text:00404BCB
.text:00404BCB ; ---------------------------------------------------------------------------
.text:00404BCD                 align 10h
.text:00404BD0
.text:00404BD0 ; =============== S U B R O U T I N E =======================================
.text:00404BD0
.text:00404BD0 ; Attributes: thunk
.text:00404BD0
.text:00404BD0 ; int __cdecl isatty(int FileHandle)
.text:00404BD0 _isatty         proc near               ; CODE XREF: sub_401520+226↑p
.text:00404BD0
.text:00404BD0 FileHandle      = dword ptr  4
.text:00404BD0
.text:00404BD0                 jmp     ds:__imp__isatty
.text:00404BD0 _isatty         endp
.text:00404BD0
.text:00404BD0 ; ---------------------------------------------------------------------------
.text:00404BD6                 align 10h
.text:00404BE0                 jmp     ds:__set_app_type
.text:00404BE0 ; ---------------------------------------------------------------------------
.text:00404BE6                 align 10h
.text:00404BF0
.text:00404BF0 ; =============== S U B R O U T I N E =======================================
.text:00404BF0
.text:00404BF0 ; Attributes: thunk
.text:00404BF0
.text:00404BF0 ; void __cdecl cexit()
.text:00404BF0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00404BF0                 jmp     ds:__imp__cexit
.text:00404BF0 _cexit          endp
.text:00404BF0
.text:00404BF0 ; ---------------------------------------------------------------------------
.text:00404BF6                 align 10h
.text:00404C00
.text:00404C00 ; =============== S U B R O U T I N E =======================================
.text:00404C00
.text:00404C00 ; Attributes: thunk
.text:00404C00
.text:00404C00 ; char ***__cdecl _p__environ()
.text:00404C00 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00404C00                 jmp     ds:__imp___p__environ
.text:00404C00 __p__environ    endp
.text:00404C00
.text:00404C00 ; ---------------------------------------------------------------------------
.text:00404C06                 align 10h
.text:00404C10
.text:00404C10 ; =============== S U B R O U T I N E =======================================
.text:00404C10
.text:00404C10 ; Attributes: thunk
.text:00404C10
.text:00404C10 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00404C10 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00404C10                                         ; TopLevelExceptionFilter+88↑p ...
.text:00404C10
.text:00404C10 Signal          = dword ptr  4
.text:00404C10 Function        = dword ptr  8
.text:00404C10
.text:00404C10                 jmp     ds:__imp_signal
.text:00404C10 signal          endp
.text:00404C10
.text:00404C10 ; ---------------------------------------------------------------------------
.text:00404C16                 align 10h
.text:00404C20
.text:00404C20 ; =============== S U B R O U T I N E =======================================
.text:00404C20
.text:00404C20 ; Attributes: thunk
.text:00404C20
.text:00404C20 ; int *__cdecl _p__fmode()
.text:00404C20 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00404C20                 jmp     ds:__imp___p__fmode
.text:00404C20 __p__fmode      endp
.text:00404C20
.text:00404C20 ; ---------------------------------------------------------------------------
.text:00404C26                 align 10h
.text:00404C30
.text:00404C30 ; =============== S U B R O U T I N E =======================================
.text:00404C30
.text:00404C30 ; Attributes: thunk
.text:00404C30
.text:00404C30 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00404C30 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00404C30                                         ; sub_401080+90↑p ...
.text:00404C30
.text:00404C30 FileHandle      = dword ptr  4
.text:00404C30 Mode            = dword ptr  8
.text:00404C30
.text:00404C30                 jmp     ds:__imp__setmode
.text:00404C30 _setmode        endp
.text:00404C30
.text:00404C30 ; ---------------------------------------------------------------------------
.text:00404C36                 align 10h
.text:00404C40
.text:00404C40 ; =============== S U B R O U T I N E =======================================
.text:00404C40
.text:00404C40 ; Attributes: thunk
.text:00404C40
.text:00404C40 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00404C40                 jmp     ds:__imp___getmainargs
.text:00404C40 __getmainargs   endp
.text:00404C40
.text:00404C40 ; ---------------------------------------------------------------------------
.text:00404C46                 align 10h
.text:00404C50
.text:00404C50 ; =============== S U B R O U T I N E =======================================
.text:00404C50
.text:00404C50 ; Attributes: thunk
.text:00404C50
.text:00404C50 ; int __cdecl puts(const char *Buffer)
.text:00404C50 puts            proc near               ; CODE XREF: sub_401520+21A↑p
.text:00404C50
.text:00404C50 Buffer          = dword ptr  4
.text:00404C50
.text:00404C50                 jmp     ds:__imp_puts
.text:00404C50 puts            endp
.text:00404C50
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C56                 align 10h
.text:00404C60
.text:00404C60 ; =============== S U B R O U T I N E =======================================
.text:00404C60
.text:00404C60 ; Attributes: thunk
.text:00404C60
.text:00404C60 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00404C60 setlocale       proc near               ; CODE XREF: sub_401520+34↑p
.text:00404C60
.text:00404C60 Category        = dword ptr  4
.text:00404C60 Locale          = dword ptr  8
.text:00404C60
.text:00404C60                 jmp     ds:__imp_setlocale
.text:00404C60 setlocale       endp
.text:00404C60
.text:00404C60 ; ---------------------------------------------------------------------------
.text:00404C66                 align 10h
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70 ; Attributes: noreturn thunk
.text:00404C70
.text:00404C70 ; void __cdecl __noreturn exit(int Code)
.text:00404C70 exit            proc near               ; CODE XREF: sub_401520:loc_401620↑p
.text:00404C70                                         ; .text:004017EE↑p ...
.text:00404C70
.text:00404C70 Code            = dword ptr  4
.text:00404C70
.text:00404C70                 jmp     ds:__imp_exit
.text:00404C70 exit            endp
.text:00404C70
.text:00404C70 ; ---------------------------------------------------------------------------
.text:00404C76                 align 10h
.text:00404C80
.text:00404C80 ; =============== S U B R O U T I N E =======================================
.text:00404C80
.text:00404C80 ; Attributes: thunk
.text:00404C80
.text:00404C80 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00404C80 fputs           proc near               ; CODE XREF: sub_401520+18A↑p
.text:00404C80                                         ; sub_401520+1AC↑p ...
.text:00404C80
.text:00404C80 Buffer          = dword ptr  4
.text:00404C80 Stream          = dword ptr  8
.text:00404C80
.text:00404C80                 jmp     ds:__imp_fputs
.text:00404C80 fputs           endp
.text:00404C80
.text:00404C80 ; ---------------------------------------------------------------------------
.text:00404C86                 align 10h
.text:00404C90
.text:00404C90 ; =============== S U B R O U T I N E =======================================
.text:00404C90
.text:00404C90 ; Attributes: thunk
.text:00404C90
.text:00404C90 ; int printf(const char *const Format, ...)
.text:00404C90 printf          proc near               ; CODE XREF: sub_401520+168↑p
.text:00404C90                                         ; sub_401520+1EB↑p ...
.text:00404C90
.text:00404C90 Format          = dword ptr  4
.text:00404C90
.text:00404C90                 jmp     ds:__imp_printf
.text:00404C90 printf          endp
.text:00404C90
.text:00404C90 ; ---------------------------------------------------------------------------
.text:00404C96                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0 ; Attributes: thunk
.text:00404CA0
.text:00404CA0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00404CA0 fprintf         proc near               ; CODE XREF: sub_401520+F4↑p
.text:00404CA0                                         ; .text:004017E6↑p ...
.text:00404CA0
.text:00404CA0 Stream          = dword ptr  4
.text:00404CA0 Format          = dword ptr  8
.text:00404CA0
.text:00404CA0                 jmp     ds:__imp_fprintf
.text:00404CA0 fprintf         endp
.text:00404CA0
.text:00404CA0 ; ---------------------------------------------------------------------------
.text:00404CA6                 align 10h
.text:00404CB0
.text:00404CB0 ; =============== S U B R O U T I N E =======================================
.text:00404CB0
.text:00404CB0 ; Attributes: thunk
.text:00404CB0
.text:00404CB0 ; size_t __cdecl strlen(const char *Str)
.text:00404CB0 strlen          proc near               ; CODE XREF: sub_401AF0+2A9↑p
.text:00404CB0                                         ; sub_401AF0+346↑p ...
.text:00404CB0
.text:00404CB0 Str             = dword ptr  4
.text:00404CB0
.text:00404CB0                 jmp     ds:__imp_strlen
.text:00404CB0 strlen          endp
.text:00404CB0
.text:00404CB0 ; ---------------------------------------------------------------------------
.text:00404CB6                 align 10h
.text:00404CC0
.text:00404CC0 ; =============== S U B R O U T I N E =======================================
.text:00404CC0
.text:00404CC0 ; Attributes: thunk
.text:00404CC0
.text:00404CC0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00404CC0 strncmp         proc near               ; CODE XREF: sub_401AF0+23F↑p
.text:00404CC0                                         ; sub_401AF0+699↑p
.text:00404CC0
.text:00404CC0 Str1            = dword ptr  4
.text:00404CC0 Str2            = dword ptr  8
.text:00404CC0 MaxCount        = dword ptr  0Ch
.text:00404CC0
.text:00404CC0                 jmp     ds:__imp_strncmp
.text:00404CC0 strncmp         endp
.text:00404CC0
.text:00404CC0 ; ---------------------------------------------------------------------------
.text:00404CC6                 align 10h
.text:00404CD0
.text:00404CD0 ; =============== S U B R O U T I N E =======================================
.text:00404CD0
.text:00404CD0 ; Attributes: thunk
.text:00404CD0
.text:00404CD0 ; char *__cdecl getenv(const char *VarName)
.text:00404CD0 getenv          proc near               ; CODE XREF: sub_401AF0+B57↑p
.text:00404CD0
.text:00404CD0 VarName         = dword ptr  4
.text:00404CD0
.text:00404CD0                 jmp     ds:__imp_getenv
.text:00404CD0 getenv          endp
.text:00404CD0
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD6                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0 ; Attributes: thunk
.text:00404CE0
.text:00404CE0 ; char *__cdecl strchr(const char *Str, int Val)
.text:00404CE0 strchr          proc near               ; CODE XREF: sub_401AF0+469↑p
.text:00404CE0                                         ; sub_401AF0+53A↑p ...
.text:00404CE0
.text:00404CE0 Str             = dword ptr  4
.text:00404CE0 Val             = dword ptr  8
.text:00404CE0
.text:00404CE0                 jmp     ds:__imp_strchr
.text:00404CE0 strchr          endp
.text:00404CE0
.text:00404CE0 ; ---------------------------------------------------------------------------
.text:00404CE6                 align 10h
.text:00404CF0
.text:00404CF0 ; =============== S U B R O U T I N E =======================================
.text:00404CF0
.text:00404CF0 ; Attributes: thunk
.text:00404CF0
.text:00404CF0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00404CF0 vfprintf        proc near               ; CODE XREF: sub_402C10+C1↑p
.text:00404CF0                                         ; sub_404790+49↑p ...
.text:00404CF0
.text:00404CF0 Stream          = dword ptr  4
.text:00404CF0 Format          = dword ptr  8
.text:00404CF0 ArgList         = dword ptr  0Ch
.text:00404CF0
.text:00404CF0                 jmp     ds:__imp_vfprintf
.text:00404CF0 vfprintf        endp
.text:00404CF0
.text:00404CF0 ; ---------------------------------------------------------------------------
.text:00404CF6                 align 10h
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00 ; Attributes: noreturn thunk
.text:00404D00
.text:00404D00 ; void __cdecl __noreturn abort()
.text:00404D00 abort           proc near               ; CODE XREF: sub_402C10:loc_402CAC↑p
.text:00404D00                                         ; sub_404240:loc_4043FA↑p ...
.text:00404D00                 jmp     ds:__imp_abort
.text:00404D00 abort           endp
.text:00404D00
.text:00404D00 ; ---------------------------------------------------------------------------
.text:00404D06                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10 ; Attributes: thunk
.text:00404D10
.text:00404D10 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00404D10 _flsbuf         proc near               ; CODE XREF: sub_402C10+128↑p
.text:00404D10                                         ; sub_402C10+13A↑p ...
.text:00404D10
.text:00404D10 File            = dword ptr  8
.text:00404D10
.text:00404D10                 jmp     ds:__imp__flsbuf
.text:00404D10 _flsbuf         endp
.text:00404D10
.text:00404D10 ; ---------------------------------------------------------------------------
.text:00404D16                 align 10h
.text:00404D20
.text:00404D20 ; =============== S U B R O U T I N E =======================================
.text:00404D20
.text:00404D20 ; Attributes: thunk
.text:00404D20
.text:00404D20 ; int *__cdecl errno()
.text:00404D20 _errno          proc near               ; CODE XREF: sub_402F90:loc_402FCD↑p
.text:00404D20                                         ; .text:00403B6B↑p ...
.text:00404D20                 jmp     ds:__imp__errno
.text:00404D20 _errno          endp
.text:00404D20
.text:00404D20 ; ---------------------------------------------------------------------------
.text:00404D26                 align 10h
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30 ; Attributes: thunk
.text:00404D30
.text:00404D30 ; int __cdecl fclose(FILE *Stream)
.text:00404D30 fclose          proc near               ; CODE XREF: sub_402F90+27↑p
.text:00404D30
.text:00404D30 Stream          = dword ptr  4
.text:00404D30
.text:00404D30                 jmp     ds:__imp_fclose
.text:00404D30 fclose          endp
.text:00404D30
.text:00404D30 ; ---------------------------------------------------------------------------
.text:00404D36                 align 10h
.text:00404D40
.text:00404D40 ; =============== S U B R O U T I N E =======================================
.text:00404D40
.text:00404D40 ; Attributes: thunk
.text:00404D40
.text:00404D40 ; void __cdecl free(void *Block)
.text:00404D40 free            proc near               ; CODE XREF: sub_404240+112↑p
.text:00404D40
.text:00404D40 Block           = dword ptr  4
.text:00404D40
.text:00404D40                 jmp     ds:__imp_free
.text:00404D40 free            endp
.text:00404D40
.text:00404D40 ; ---------------------------------------------------------------------------
.text:00404D46                 align 10h
.text:00404D50
.text:00404D50 ; =============== S U B R O U T I N E =======================================
.text:00404D50
.text:00404D50 ; Attributes: thunk
.text:00404D50
.text:00404D50 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00404D50 iswctype        proc near               ; CODE XREF: sub_403100+78B↑p
.text:00404D50
.text:00404D50 C               = word ptr  4
.text:00404D50 Type            = word ptr  8
.text:00404D50
.text:00404D50                 jmp     ds:__imp_iswctype
.text:00404D50 iswctype        endp
.text:00404D50
.text:00404D50 ; ---------------------------------------------------------------------------
.text:00404D56                 align 10h
.text:00404D60
.text:00404D60 ; =============== S U B R O U T I N E =======================================
.text:00404D60
.text:00404D60 ; Attributes: thunk
.text:00404D60
.text:00404D60 ; int __cdecl isctype(int C, int Type)
.text:00404D60 _isctype        proc near               ; CODE XREF: sub_403100+610↑p
.text:00404D60
.text:00404D60 C               = dword ptr  4
.text:00404D60 Type            = dword ptr  8
.text:00404D60
.text:00404D60                 jmp     ds:__imp__isctype
.text:00404D60 _isctype        endp
.text:00404D60
.text:00404D60 ; ---------------------------------------------------------------------------
.text:00404D66                 align 10h
.text:00404D70
.text:00404D70 ; =============== S U B R O U T I N E =======================================
.text:00404D70
.text:00404D70 ; Attributes: thunk
.text:00404D70
.text:00404D70 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404D70 memcpy          proc near               ; CODE XREF: .text:004045F8↑p
.text:00404D70                                         ; .text:00404641↑p
.text:00404D70
.text:00404D70 Src             = dword ptr  8
.text:00404D70 Size            = dword ptr  0Ch
.text:00404D70
.text:00404D70                 jmp     ds:__imp_memcpy
.text:00404D70 memcpy          endp
.text:00404D70
.text:00404D70 ; ---------------------------------------------------------------------------
.text:00404D76                 align 10h
.text:00404D80
.text:00404D80 ; =============== S U B R O U T I N E =======================================
.text:00404D80
.text:00404D80 ; Attributes: thunk
.text:00404D80
.text:00404D80 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404D80 memset          proc near               ; CODE XREF: .text:00404576↑p
.text:00404D80
.text:00404D80 Val             = dword ptr  8
.text:00404D80 Size            = dword ptr  0Ch
.text:00404D80
.text:00404D80                 jmp     ds:__imp_memset
.text:00404D80 memset          endp
.text:00404D80
.text:00404D80 ; ---------------------------------------------------------------------------
.text:00404D86                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90 ; Attributes: thunk
.text:00404D90
.text:00404D90 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00404D90 calloc          proc near               ; CODE XREF: .text:004045B3↑p
.text:00404D90
.text:00404D90 Count           = dword ptr  4
.text:00404D90 Size            = dword ptr  8
.text:00404D90
.text:00404D90                 jmp     ds:__imp_calloc
.text:00404D90 calloc          endp
.text:00404D90
.text:00404D90 ; ---------------------------------------------------------------------------
.text:00404D96                 align 10h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0 ; Attributes: thunk
.text:00404DA0
.text:00404DA0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00404DA0 realloc         proc near               ; CODE XREF: .text:004044B0↑p
.text:00404DA0                                         ; sub_4044E0+16↑p ...
.text:00404DA0
.text:00404DA0 Block           = dword ptr  4
.text:00404DA0 Size            = dword ptr  8
.text:00404DA0
.text:00404DA0                 jmp     ds:__imp_realloc
.text:00404DA0 realloc         endp
.text:00404DA0
.text:00404DA0 ; ---------------------------------------------------------------------------
.text:00404DA6                 align 10h
.text:00404DB0
.text:00404DB0 ; =============== S U B R O U T I N E =======================================
.text:00404DB0
.text:00404DB0 ; Attributes: thunk
.text:00404DB0
.text:00404DB0 ; void *__cdecl malloc(size_t Size)
.text:00404DB0 malloc          proc near               ; CODE XREF: sub_404410+24↑p
.text:00404DB0                                         ; sub_404450+E↑p ...
.text:00404DB0
.text:00404DB0 Size            = dword ptr  4
.text:00404DB0
.text:00404DB0                 jmp     ds:__imp_malloc
.text:00404DB0 malloc          endp
.text:00404DB0
.text:00404DB0 ; ---------------------------------------------------------------------------
.text:00404DB6                 align 10h
.text:00404DC0
.text:00404DC0 ; =============== S U B R O U T I N E =======================================
.text:00404DC0
.text:00404DC0 ; Attributes: thunk
.text:00404DC0
.text:00404DC0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00404DC0 strcmp          proc near               ; CODE XREF: sub_404894+180↑p
.text:00404DC0
.text:00404DC0 Str1            = dword ptr  4
.text:00404DC0 Str2            = dword ptr  8
.text:00404DC0
.text:00404DC0                 jmp     ds:__imp_strcmp
.text:00404DC0 strcmp          endp
.text:00404DC0
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC6                 align 10h
.text:00404DD0
.text:00404DD0 ; =============== S U B R O U T I N E =======================================
.text:00404DD0
.text:00404DD0 ; Attributes: thunk
.text:00404DD0
.text:00404DD0 ; int __cdecl fflush(FILE *Stream)
.text:00404DD0 fflush          proc near               ; CODE XREF: sub_404790+19↑p
.text:00404DD0                                         ; sub_404790+81↑p ...
.text:00404DD0
.text:00404DD0 Stream          = dword ptr  4
.text:00404DD0
.text:00404DD0                 jmp     ds:__imp_fflush
.text:00404DD0 fflush          endp
.text:00404DD0
.text:00404DD0 ; ---------------------------------------------------------------------------
.text:00404DD6                 align 10h
.text:00404DE0
.text:00404DE0 ; =============== S U B R O U T I N E =======================================
.text:00404DE0
.text:00404DE0 ; Attributes: thunk
.text:00404DE0
.text:00404DE0 ; char *__cdecl strerror(int ErrorMessage)
.text:00404DE0 strerror        proc near               ; CODE XREF: sub_404790+A5↑p
.text:00404DE0                                         ; sub_404894+10F↑p
.text:00404DE0
.text:00404DE0 ErrorMessage    = dword ptr  4
.text:00404DE0
.text:00404DE0                 jmp     ds:__imp_strerror
.text:00404DE0 strerror        endp
.text:00404DE0
.text:00404DE0 ; ---------------------------------------------------------------------------
.text:00404DE6                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0 ; Attributes: thunk
.text:00404DF0
.text:00404DF0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00404DF0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00404DF0
.text:00404DF0 lpTopLevelExceptionFilter= dword ptr  4
.text:00404DF0
.text:00404DF0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00404DF0 SetUnhandledExceptionFilter endp
.text:00404DF0
.text:00404DF0 ; ---------------------------------------------------------------------------
.text:00404DF6                 align 10h
.text:00404E00
.text:00404E00 ; =============== S U B R O U T I N E =======================================
.text:00404E00
.text:00404E00 ; Attributes: noreturn thunk
.text:00404E00
.text:00404E00 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00404E00 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00404E00
.text:00404E00 uExitCode       = dword ptr  4
.text:00404E00
.text:00404E00                 jmp     ds:__imp_ExitProcess
.text:00404E00 ExitProcess     endp
.text:00404E00
.text:00404E00 ; ---------------------------------------------------------------------------
.text:00404E06                 align 10h
.text:00404E10 dword_404E10    dd 0FFFFFFFFh           ; DATA XREF: .text:00404AD9↑r
.text:00404E10                                         ; .text:loc_404B00↑r ...
.text:00404E14 dword_404E14    dd 0                    ; DATA XREF: .text:loc_404B0C↑r
.text:00404E14                                         ; sub_404B30:loc_404B7D↑r
.text:00404E18                 dd 0FFFFFFFFh
.text:00404E1C dword_404E1C    dd 79h dup(0)           ; DATA XREF: .data:off_405094↓o
.text:00404E1C _text           ends
.text:00404E1C
.data:00405000 ; Section 2. (virtual address 00005000)
.data:00405000 ; Virtual size                  : 000000B0 (    176.)
.data:00405000 ; Section size in file          : 00000200 (    512.)
.data:00405000 ; Offset to raw data for section: 00004400
.data:00405000 ; Flags C0000040: Data Readable Writable
.data:00405000 ; Alignment     : default
.data:00405000 ; ===========================================================================
.data:00405000
.data:00405000 ; Segment type: Pure data
.data:00405000 ; Segment permissions: Read/Write
.data:00405000 _data           segment para public 'DATA' use32
.data:00405000                 assume cs:_data
.data:00405000                 ;org 405000h
.data:00405000 dword_405000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00405000                                         ; sub_401080+CC↑r
.data:00405004 dword_405004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00405004                                         ; sub_401080+D4↑r
.data:00405008                 align 10h
.data:00405010 ; int Code
.data:00405010 Code            dd 1                    ; DATA XREF: sub_401520+67↑w
.data:00405010                                         ; sub_402F90+6D↑r ...
.data:00405014                 align 10h
.data:00405020 dword_405020    dd 1                    ; DATA XREF: sub_401520:loc_401715↑r
.data:00405020                                         ; sub_402680+3↑r ...
.data:00405024 dword_405024    dd 1                    ; DATA XREF: sub_402680+11↑r
.data:00405024                                         ; .text:00402721↑r
.data:00405028 dword_405028    dd 3Fh                  ; DATA XREF: sub_402680+7D↑w
.data:00405028                                         ; .text:0040278D↑w
.data:0040502C                 align 10h
.data:00405030 ; char *Buffer
.data:00405030 Buffer          dd offset aCopyrightC2005
.data:00405030                                         ; DATA XREF: sub_402C10+DC↑r
.data:00405030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00405034                 align 10h
.data:00405040 dword_405040    dd 1                    ; DATA XREF: sub_404240+22↑r
.data:00405040                                         ; sub_404240+65↑r ...
.data:00405044 dword_405044    dd 100h                 ; DATA XREF: sub_404240+3F↑o
.data:00405044                                         ; sub_404240+1A2↑r ...
.data:00405048 off_405048      dd offset unk_406050    ; DATA XREF: sub_404240+1AA↑r
.data:0040504C ; void *off_40504C
.data:0040504C off_40504C      dd offset dword_405044  ; DATA XREF: sub_404240+39↑r
.data:0040504C                                         ; sub_404240+60↑w ...
.data:00405050 off_405050      dd offset dword_404A30  ; DATA XREF: sub_404A40↑r
.data:00405054                 align 10h
.data:00405060 dword_405060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00405064                 align 10h
.data:00405070 ; int Mode
.data:00405070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00405070                                         ; sub_401080+80↑r ...
.data:00405074                 align 10h
.data:00405080 dword_405080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00405080                                         ; sub_401080+BA↑r
.data:00405084                 align 10h
.data:00405090 dword_405090    dd 0                    ; DATA XREF: sub_404B30+9↑r
.data:00405090                                         ; sub_404B30+1D↑w
.data:00405094 off_405094      dd offset dword_404E1C  ; DATA XREF: sub_404AA0+6↑r
.data:00405094                                         ; sub_404AA0+17↑r ...
.data:00405098                 align 1000h
.data:00405098 _data           ends
.data:00405098
.bss:00406000 ; Section 3. (virtual address 00006000)
.bss:00406000 ; Virtual size                  : 00000240 (    576.)
.bss:00406000 ; Section size in file          : 00000000 (      0.)
.bss:00406000 ; Offset to raw data for section: 00000000
.bss:00406000 ; Flags C0000080: Bss Readable Writable
.bss:00406000 ; Alignment     : default
.bss:00406000 ; ===========================================================================
.bss:00406000
.bss:00406000 ; Segment type: Uninitialized
.bss:00406000 ; Segment permissions: Read/Write
.bss:00406000 _bss            segment para public 'BSS' use32
.bss:00406000                 assume cs:_bss
.bss:00406000                 ;org 406000h
.bss:00406000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00406000 byte_406000     db ?                    ; DATA XREF: sub_401520+72↑w
.bss:00406000                                         ; sub_401520+C4↑w ...
.bss:00406001                 align 10h
.bss:00406010 dword_406010    dd ?                    ; DATA XREF: sub_402680+9↑o
.bss:00406010                                         ; sub_402680+17↑w ...
.bss:00406014 dword_406014    dd ?                    ; DATA XREF: sub_402680+21↑w
.bss:00406014                                         ; .text:00402739↑w
.bss:00406018 dword_406018    dd ?                    ; DATA XREF: sub_402680+77↑r
.bss:00406018                                         ; .text:00402787↑r
.bss:0040601C dword_40601C    dd ?                    ; DATA XREF: sub_402680+6B↑r
.bss:0040601C                                         ; .text:0040277B↑r
.bss:00406020                 align 40h
.bss:00406040 ; char *dword_406040
.bss:00406040 dword_406040    dd ?                    ; DATA XREF: .text:00402F64↑w
.bss:00406040                                         ; sub_402F90+58↑r
.bss:00406044                 align 10h
.bss:00406050 unk_406050      db    ? ;               ; DATA XREF: sub_404240+100↑o
.bss:00406050                                         ; .data:off_405048↑o
.bss:00406051                 db    ? ;
.bss:00406052                 db    ? ;
.bss:00406053                 db    ? ;
.bss:00406054                 db    ? ;
.bss:00406055                 db    ? ;
.bss:00406056                 db    ? ;
.bss:00406057                 db    ? ;
.bss:00406058                 db    ? ;
.bss:00406059                 db    ? ;
.bss:0040605A                 db    ? ;
.bss:0040605B                 db    ? ;
.bss:0040605C                 db    ? ;
.bss:0040605D                 db    ? ;
.bss:0040605E                 db    ? ;
.bss:0040605F                 db    ? ;
.bss:00406060                 db    ? ;
.bss:00406061                 db    ? ;
.bss:00406062                 db    ? ;
.bss:00406063                 db    ? ;
.bss:00406064                 db    ? ;
.bss:00406065                 db    ? ;
.bss:00406066                 db    ? ;
.bss:00406067                 db    ? ;
.bss:00406068                 db    ? ;
.bss:00406069                 db    ? ;
.bss:0040606A                 db    ? ;
.bss:0040606B                 db    ? ;
.bss:0040606C                 db    ? ;
.bss:0040606D                 db    ? ;
.bss:0040606E                 db    ? ;
.bss:0040606F                 db    ? ;
.bss:00406070                 db    ? ;
.bss:00406071                 db    ? ;
.bss:00406072                 db    ? ;
.bss:00406073                 db    ? ;
.bss:00406074                 db    ? ;
.bss:00406075                 db    ? ;
.bss:00406076                 db    ? ;
.bss:00406077                 db    ? ;
.bss:00406078                 db    ? ;
.bss:00406079                 db    ? ;
.bss:0040607A                 db    ? ;
.bss:0040607B                 db    ? ;
.bss:0040607C                 db    ? ;
.bss:0040607D                 db    ? ;
.bss:0040607E                 db    ? ;
.bss:0040607F                 db    ? ;
.bss:00406080                 db    ? ;
.bss:00406081                 db    ? ;
.bss:00406082                 db    ? ;
.bss:00406083                 db    ? ;
.bss:00406084                 db    ? ;
.bss:00406085                 db    ? ;
.bss:00406086                 db    ? ;
.bss:00406087                 db    ? ;
.bss:00406088                 db    ? ;
.bss:00406089                 db    ? ;
.bss:0040608A                 db    ? ;
.bss:0040608B                 db    ? ;
.bss:0040608C                 db    ? ;
.bss:0040608D                 db    ? ;
.bss:0040608E                 db    ? ;
.bss:0040608F                 db    ? ;
.bss:00406090                 db    ? ;
.bss:00406091                 db    ? ;
.bss:00406092                 db    ? ;
.bss:00406093                 db    ? ;
.bss:00406094                 db    ? ;
.bss:00406095                 db    ? ;
.bss:00406096                 db    ? ;
.bss:00406097                 db    ? ;
.bss:00406098                 db    ? ;
.bss:00406099                 db    ? ;
.bss:0040609A                 db    ? ;
.bss:0040609B                 db    ? ;
.bss:0040609C                 db    ? ;
.bss:0040609D                 db    ? ;
.bss:0040609E                 db    ? ;
.bss:0040609F                 db    ? ;
.bss:004060A0                 db    ? ;
.bss:004060A1                 db    ? ;
.bss:004060A2                 db    ? ;
.bss:004060A3                 db    ? ;
.bss:004060A4                 db    ? ;
.bss:004060A5                 db    ? ;
.bss:004060A6                 db    ? ;
.bss:004060A7                 db    ? ;
.bss:004060A8                 db    ? ;
.bss:004060A9                 db    ? ;
.bss:004060AA                 db    ? ;
.bss:004060AB                 db    ? ;
.bss:004060AC                 db    ? ;
.bss:004060AD                 db    ? ;
.bss:004060AE                 db    ? ;
.bss:004060AF                 db    ? ;
.bss:004060B0                 db    ? ;
.bss:004060B1                 db    ? ;
.bss:004060B2                 db    ? ;
.bss:004060B3                 db    ? ;
.bss:004060B4                 db    ? ;
.bss:004060B5                 db    ? ;
.bss:004060B6                 db    ? ;
.bss:004060B7                 db    ? ;
.bss:004060B8                 db    ? ;
.bss:004060B9                 db    ? ;
.bss:004060BA                 db    ? ;
.bss:004060BB                 db    ? ;
.bss:004060BC                 db    ? ;
.bss:004060BD                 db    ? ;
.bss:004060BE                 db    ? ;
.bss:004060BF                 db    ? ;
.bss:004060C0                 db    ? ;
.bss:004060C1                 db    ? ;
.bss:004060C2                 db    ? ;
.bss:004060C3                 db    ? ;
.bss:004060C4                 db    ? ;
.bss:004060C5                 db    ? ;
.bss:004060C6                 db    ? ;
.bss:004060C7                 db    ? ;
.bss:004060C8                 db    ? ;
.bss:004060C9                 db    ? ;
.bss:004060CA                 db    ? ;
.bss:004060CB                 db    ? ;
.bss:004060CC                 db    ? ;
.bss:004060CD                 db    ? ;
.bss:004060CE                 db    ? ;
.bss:004060CF                 db    ? ;
.bss:004060D0                 db    ? ;
.bss:004060D1                 db    ? ;
.bss:004060D2                 db    ? ;
.bss:004060D3                 db    ? ;
.bss:004060D4                 db    ? ;
.bss:004060D5                 db    ? ;
.bss:004060D6                 db    ? ;
.bss:004060D7                 db    ? ;
.bss:004060D8                 db    ? ;
.bss:004060D9                 db    ? ;
.bss:004060DA                 db    ? ;
.bss:004060DB                 db    ? ;
.bss:004060DC                 db    ? ;
.bss:004060DD                 db    ? ;
.bss:004060DE                 db    ? ;
.bss:004060DF                 db    ? ;
.bss:004060E0                 db    ? ;
.bss:004060E1                 db    ? ;
.bss:004060E2                 db    ? ;
.bss:004060E3                 db    ? ;
.bss:004060E4                 db    ? ;
.bss:004060E5                 db    ? ;
.bss:004060E6                 db    ? ;
.bss:004060E7                 db    ? ;
.bss:004060E8                 db    ? ;
.bss:004060E9                 db    ? ;
.bss:004060EA                 db    ? ;
.bss:004060EB                 db    ? ;
.bss:004060EC                 db    ? ;
.bss:004060ED                 db    ? ;
.bss:004060EE                 db    ? ;
.bss:004060EF                 db    ? ;
.bss:004060F0                 db    ? ;
.bss:004060F1                 db    ? ;
.bss:004060F2                 db    ? ;
.bss:004060F3                 db    ? ;
.bss:004060F4                 db    ? ;
.bss:004060F5                 db    ? ;
.bss:004060F6                 db    ? ;
.bss:004060F7                 db    ? ;
.bss:004060F8                 db    ? ;
.bss:004060F9                 db    ? ;
.bss:004060FA                 db    ? ;
.bss:004060FB                 db    ? ;
.bss:004060FC                 db    ? ;
.bss:004060FD                 db    ? ;
.bss:004060FE                 db    ? ;
.bss:004060FF                 db    ? ;
.bss:00406100                 db    ? ;
.bss:00406101                 db    ? ;
.bss:00406102                 db    ? ;
.bss:00406103                 db    ? ;
.bss:00406104                 db    ? ;
.bss:00406105                 db    ? ;
.bss:00406106                 db    ? ;
.bss:00406107                 db    ? ;
.bss:00406108                 db    ? ;
.bss:00406109                 db    ? ;
.bss:0040610A                 db    ? ;
.bss:0040610B                 db    ? ;
.bss:0040610C                 db    ? ;
.bss:0040610D                 db    ? ;
.bss:0040610E                 db    ? ;
.bss:0040610F                 db    ? ;
.bss:00406110                 db    ? ;
.bss:00406111                 db    ? ;
.bss:00406112                 db    ? ;
.bss:00406113                 db    ? ;
.bss:00406114                 db    ? ;
.bss:00406115                 db    ? ;
.bss:00406116                 db    ? ;
.bss:00406117                 db    ? ;
.bss:00406118                 db    ? ;
.bss:00406119                 db    ? ;
.bss:0040611A                 db    ? ;
.bss:0040611B                 db    ? ;
.bss:0040611C                 db    ? ;
.bss:0040611D                 db    ? ;
.bss:0040611E                 db    ? ;
.bss:0040611F                 db    ? ;
.bss:00406120                 db    ? ;
.bss:00406121                 db    ? ;
.bss:00406122                 db    ? ;
.bss:00406123                 db    ? ;
.bss:00406124                 db    ? ;
.bss:00406125                 db    ? ;
.bss:00406126                 db    ? ;
.bss:00406127                 db    ? ;
.bss:00406128                 db    ? ;
.bss:00406129                 db    ? ;
.bss:0040612A                 db    ? ;
.bss:0040612B                 db    ? ;
.bss:0040612C                 db    ? ;
.bss:0040612D                 db    ? ;
.bss:0040612E                 db    ? ;
.bss:0040612F                 db    ? ;
.bss:00406130                 db    ? ;
.bss:00406131                 db    ? ;
.bss:00406132                 db    ? ;
.bss:00406133                 db    ? ;
.bss:00406134                 db    ? ;
.bss:00406135                 db    ? ;
.bss:00406136                 db    ? ;
.bss:00406137                 db    ? ;
.bss:00406138                 db    ? ;
.bss:00406139                 db    ? ;
.bss:0040613A                 db    ? ;
.bss:0040613B                 db    ? ;
.bss:0040613C                 db    ? ;
.bss:0040613D                 db    ? ;
.bss:0040613E                 db    ? ;
.bss:0040613F                 db    ? ;
.bss:00406140                 db    ? ;
.bss:00406141                 db    ? ;
.bss:00406142                 db    ? ;
.bss:00406143                 db    ? ;
.bss:00406144                 db    ? ;
.bss:00406145                 db    ? ;
.bss:00406146                 db    ? ;
.bss:00406147                 db    ? ;
.bss:00406148                 db    ? ;
.bss:00406149                 db    ? ;
.bss:0040614A                 db    ? ;
.bss:0040614B                 db    ? ;
.bss:0040614C                 db    ? ;
.bss:0040614D                 db    ? ;
.bss:0040614E                 db    ? ;
.bss:0040614F                 db    ? ;
.bss:00406150 dword_406150    dd ?                    ; DATA XREF: .text:loc_403BD1↑o
.bss:00406150                                         ; .text:loc_403BF0↑o ...
.bss:00406154 dword_406154    dd ?                    ; DATA XREF: .text:loc_403C70↑o
.bss:00406154                                         ; .text:004040F8↑r ...
.bss:00406158 dword_406158    dd ?                    ; DATA XREF: .text:004040F2↑r
.bss:00406158                                         ; sub_4041A0+2C↑r
.bss:0040615C dword_40615C    dd ?                    ; DATA XREF: .text:004040E6↑r
.bss:0040615C                                         ; sub_4041A0+22↑r
.bss:00406160 dword_406160    dd ?                    ; DATA XREF: .text:00404102↑r
.bss:00406160                                         ; sub_4041A0+36↑r
.bss:00406164 dword_406164    dd ?                    ; DATA XREF: .text:00404112↑r
.bss:00406164                                         ; sub_4041A0+4E↑r
.bss:00406168 dword_406168    dd ?                    ; DATA XREF: .text:0040412F↑r
.bss:00406168                                         ; sub_4041A0+62↑r
.bss:0040616C dword_40616C    dd ?                    ; DATA XREF: .text:00404125↑r
.bss:0040616C                                         ; sub_4041A0+70↑r
.bss:00406170 dword_406170    dd ?                    ; DATA XREF: .text:00404108↑r
.bss:00406170                                         ; sub_4041A0+7A↑r
.bss:00406174                 align 10h
.bss:00406180 ; char *Str1
.bss:00406180 Str1            dd ?                    ; DATA XREF: sub_404894:loc_4048CD↑w
.bss:00406180                                         ; sub_404894:loc_404A00↑r
.bss:00406184                 align 10h
.bss:00406190 dword_406190    dd ?                    ; DATA XREF: sub_404894+2D↑r
.bss:00406190                                         ; sub_404894+3F↑w
.bss:00406194                 align 10h
.bss:004061A0 dword_4061A0    dd ?                    ; DATA XREF: sub_401520+2E↑w
.bss:004061A0                                         ; sub_401520+E0↑r ...
.bss:004061A4                 align 20h
.bss:004061C0 dword_4061C0    dd ?                    ; DATA XREF: sub_402680+71↑w
.bss:004061C0                                         ; .text:00402781↑w
.bss:004061C4                 align 10h
.bss:004061D0 dword_4061D0    dd ?                    ; CODE XREF: sub_404894+63↑p
.bss:004061D0                                         ; DATA XREF: sub_404790+1E↑r ...
.bss:004061D4                 align 10h
.bss:004061E0 dword_4061E0    dd ?                    ; DATA XREF: sub_404790+4E↑w
.bss:004061E0                                         ; sub_404894+AB↑w
.bss:004061E4                 db    ? ;
.bss:004061E5                 db    ? ;
.bss:004061E6                 db    ? ;
.bss:004061E7                 db    ? ;
.bss:004061E8                 db    ? ;
.bss:004061E9                 db    ? ;
.bss:004061EA                 db    ? ;
.bss:004061EB                 db    ? ;
.bss:004061EC                 db    ? ;
.bss:004061ED                 db    ? ;
.bss:004061EE                 db    ? ;
.bss:004061EF                 db    ? ;
.bss:004061F0                 db    ? ;
.bss:004061F1                 db    ? ;
.bss:004061F2                 db    ? ;
.bss:004061F3                 db    ? ;
.bss:004061F4                 db    ? ;
.bss:004061F5                 db    ? ;
.bss:004061F6                 db    ? ;
.bss:004061F7                 db    ? ;
.bss:004061F8                 db    ? ;
.bss:004061F9                 db    ? ;
.bss:004061FA                 db    ? ;
.bss:004061FB                 db    ? ;
.bss:004061FC                 db    ? ;
.bss:004061FD                 db    ? ;
.bss:004061FE                 db    ? ;
.bss:004061FF                 db    ? ;
.bss:00406200                 db    ? ;
.bss:00406201                 db    ? ;
.bss:00406202                 db    ? ;
.bss:00406203                 db    ? ;
.bss:00406204                 db    ? ;
.bss:00406205                 db    ? ;
.bss:00406206                 db    ? ;
.bss:00406207                 db    ? ;
.bss:00406208                 db    ? ;
.bss:00406209                 db    ? ;
.bss:0040620A                 db    ? ;
.bss:0040620B                 db    ? ;
.bss:0040620C                 db    ? ;
.bss:0040620D                 db    ? ;
.bss:0040620E                 db    ? ;
.bss:0040620F                 db    ? ;
.bss:00406210 dword_406210    dd ?                    ; DATA XREF: sub_404894+13↑r
.bss:00406214                 align 1000h
.bss:00406214 _bss            ends
.bss:00406214
.idata:00407000 ; Section 4. (virtual address 00007000)
.idata:00407000 ; Virtual size                  : 00000580 (   1408.)
.idata:00407000 ; Section size in file          : 00000600 (   1536.)
.idata:00407000 ; Offset to raw data for section: 00004600
.idata:00407000 ; Flags C0000040: Data Readable Writable
.idata:00407000 ; Alignment     : default
.idata:00407000 ; ===========================================================================
.idata:00407000
.idata:00407000 ; Segment type: Externs
.idata:00407000 ; _idata
.idata:00407000
.idata:00407001
.idata:00407158 ;
.idata:00407158 ; Imports from libintl3.dll
.idata:00407158 ;
.idata:00407158                 extrn __imp_libintl_bindtextdomain:dword
.idata:00407158                                         ; CODE XREF: sub_401520+48↑p
.idata:00407158                                         ; DATA XREF: sub_401520+48↑r ...
.idata:0040715C                 extrn libintl_gettext:dword
.idata:0040715C                                         ; CODE XREF: sub_401520+D4↑p
.idata:0040715C                                         ; sub_401520+155↑p ...
.idata:00407160                 extrn libintl_textdomain:dword
.idata:00407160                                         ; CODE XREF: sub_401520+55↑p
.idata:00407160                                         ; DATA XREF: sub_401520+55↑r ...
.idata:00407164
.idata:0040716C ;
.idata:0040716C ; Imports from KERNEL32.dll
.idata:0040716C ;
.idata:0040716C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040716C                 extrn __imp_ExitProcess:dword
.idata:0040716C                                         ; DATA XREF: ExitProcess↑r
.idata:00407170 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00407170                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00407170                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00407174
.idata:0040717C ;
.idata:0040717C ; Imports from msvcrt.dll
.idata:0040717C ;
.idata:0040717C ; int (__cdecl *_isatty)(int FileHandle)
.idata:0040717C                 extrn __imp__isatty:dword
.idata:0040717C                                         ; DATA XREF: _isatty↑r
.idata:00407180
.idata:00407188 ;
.idata:00407188 ; Imports from MSVCP60.DLL
.idata:00407188 ;
.idata:00407188 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00407188                 extrn __imp_mbrtowc:dword
.idata:00407188                                         ; DATA XREF: mbrtowc↑r
.idata:0040718C
.idata:00407194 ;
.idata:00407194 ; Imports from msvcrt.dll
.idata:00407194 ;
.idata:00407194                 extrn __imp___getmainargs:dword
.idata:00407194                                         ; DATA XREF: __getmainargs↑r
.idata:00407198 ; int _mb_cur_max
.idata:00407198                 extrn __mb_cur_max:dword
.idata:00407198                                         ; DATA XREF: sub_403100+7↑r
.idata:00407198                                         ; sub_403100+5F3↑r
.idata:0040719C ; char ***(__cdecl *__p__environ)()
.idata:0040719C                 extrn __imp___p__environ:dword
.idata:0040719C                                         ; DATA XREF: __p__environ↑r
.idata:004071A0 ; int *(__cdecl *__p__fmode)()
.idata:004071A0                 extrn __imp___p__fmode:dword
.idata:004071A0                                         ; DATA XREF: __p__fmode↑r
.idata:004071A4 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004071A4                 extrn __set_app_type:dword
.idata:004071A4                                         ; CODE XREF: start+D↑p
.idata:004071A4                                         ; .text:0040102D↑p
.idata:004071A4                                         ; DATA XREF: ...
.idata:004071A8 ; void (__cdecl *_cexit)()
.idata:004071A8                 extrn __imp__cexit:dword
.idata:004071A8                                         ; DATA XREF: _cexit↑r
.idata:004071AC ; int *(__cdecl *_errno)()
.idata:004071AC                 extrn __imp__errno:dword
.idata:004071AC                                         ; DATA XREF: _errno↑r
.idata:004071B0 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004071B0                 extrn __imp__flsbuf:dword
.idata:004071B0                                         ; DATA XREF: _flsbuf↑r
.idata:004071B4 ; FILE iob[]
.idata:004071B4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004071B4                                         ; sub_401080+75↑r ...
.idata:004071B8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004071B8                 extrn __imp__isctype:dword
.idata:004071B8                                         ; DATA XREF: _isctype↑r
.idata:004071BC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004071BC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004071BC                                         ; DATA XREF: .text:0040106C↑r
.idata:004071C0 ; const unsigned __int16 *pctype
.idata:004071C0                 extrn _pctype:dword     ; DATA XREF: sub_403100:loc_4037F4↑r
.idata:004071C4 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004071C4                 extrn __imp__setmode:dword
.idata:004071C4                                         ; DATA XREF: _setmode↑r
.idata:004071C8 ; void (__cdecl __noreturn *abort)()
.idata:004071C8                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004071CC ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004071CC                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004071CC                                         ; DATA XREF: sub_401040+C↑r
.idata:004071D0 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004071D0                 extrn __imp_calloc:dword
.idata:004071D0                                         ; DATA XREF: calloc↑r
.idata:004071D4 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004071D4                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004071D8 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004071D8                 extrn __imp_fclose:dword
.idata:004071D8                                         ; DATA XREF: fclose↑r
.idata:004071DC ; int (__cdecl *fflush)(FILE *Stream)
.idata:004071DC                 extrn __imp_fflush:dword
.idata:004071DC                                         ; DATA XREF: fflush↑r
.idata:004071E0 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004071E0                 extrn __imp_fprintf:dword
.idata:004071E0                                         ; DATA XREF: fprintf↑r
.idata:004071E4 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004071E4                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004071E8 ; void (__cdecl *free)(void *Block)
.idata:004071E8                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004071EC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004071EC                 extrn __imp_getenv:dword
.idata:004071EC                                         ; DATA XREF: getenv↑r
.idata:004071F0 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004071F0                 extrn __imp_iswctype:dword
.idata:004071F0                                         ; DATA XREF: iswctype↑r
.idata:004071F4 ; void *(__cdecl *malloc)(size_t Size)
.idata:004071F4                 extrn __imp_malloc:dword
.idata:004071F4                                         ; DATA XREF: malloc↑r
.idata:004071F8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004071F8                 extrn __imp_memcpy:dword
.idata:004071F8                                         ; DATA XREF: memcpy↑r
.idata:004071FC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004071FC                 extrn __imp_memset:dword
.idata:004071FC                                         ; DATA XREF: memset↑r
.idata:00407200 ; int (*printf)(const char *const Format, ...)
.idata:00407200                 extrn __imp_printf:dword
.idata:00407200                                         ; DATA XREF: printf↑r
.idata:00407204 ; int (__cdecl *puts)(const char *Buffer)
.idata:00407204                 extrn __imp_puts:dword  ; DATA XREF: puts↑r
.idata:00407208 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00407208                 extrn __imp_realloc:dword
.idata:00407208                                         ; DATA XREF: realloc↑r
.idata:0040720C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040720C                 extrn __imp_setlocale:dword
.idata:0040720C                                         ; DATA XREF: setlocale↑r
.idata:00407210 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00407210                 extrn __imp_signal:dword
.idata:00407210                                         ; DATA XREF: signal↑r
.idata:00407214 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00407214                 extrn __imp_strchr:dword
.idata:00407214                                         ; DATA XREF: strchr↑r
.idata:00407218 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00407218                 extrn __imp_strcmp:dword
.idata:00407218                                         ; DATA XREF: strcmp↑r
.idata:0040721C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040721C                 extrn __imp_strerror:dword
.idata:0040721C                                         ; DATA XREF: strerror↑r
.idata:00407220 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00407220                 extrn __imp_strlen:dword
.idata:00407220                                         ; DATA XREF: strlen↑r
.idata:00407224 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00407224                 extrn __imp_strncmp:dword
.idata:00407224                                         ; DATA XREF: strncmp↑r
.idata:00407228 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00407228                 extrn __imp_vfprintf:dword
.idata:00407228                                         ; DATA XREF: vfprintf↑r
.idata:0040722C
.idata:0040722C
.idata:0040722C
.idata:0040722C                 end start
