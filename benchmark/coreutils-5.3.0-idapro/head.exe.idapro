.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : A91ED74D65E629D3A7F98A77A63C9147821F04518780E3F3CFC68B28ADFE975A
.text:00401000 ; Input MD5    : B87E71E5F42762C32AFE28D0266E271F
.text:00401000 ; Input CRC32  : 6710CA48
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/head.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A257 (Wed Apr 20 18:41:27 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000F930 (  63792.)
.text:00401000 ; Section size in file          : 0000FA00 (  64000.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401A30+8A↓p
.text:00401040                                         ; .text:0040F3E0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40F380
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_411000
.text:004010A2                 mov     edx, dword_4110A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_411004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4110C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4110C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40F350
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_411000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_411004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401A30
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40F380
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 db 0Dh dup(90h)
.text:00401280                 dd 0
.text:00401284                 dd 762D20h, 712D20h
.text:0040128C aBytes          db 'bytes',0            ; DATA XREF: .text:off_4012E0↓o
.text:00401292 aLines          db 'lines',0            ; DATA XREF: .text:004012F0↓o
.text:00401298 aPresumeInputPi db 'presume-input-pipe',0
.text:00401298                                         ; DATA XREF: .text:00401300↓o
.text:004012AB aQuiet          db 'quiet',0            ; DATA XREF: .text:00401310↓o
.text:004012B1 aSilent         db 'silent',0           ; DATA XREF: .text:00401320↓o
.text:004012B8 aVerbose        db 'verbose',0          ; DATA XREF: .text:00401330↓o
.text:004012C0 aHelp           db 'help',0             ; DATA XREF: .text:00401340↓o
.text:004012C5 aVersion        db 'version',0          ; DATA XREF: .text:00401350↓o
.text:004012CD                 align 20h
.text:004012E0 off_4012E0      dd offset aBytes        ; DATA XREF: sub_401A30+CE↓o
.text:004012E0                                         ; "bytes"
.text:004012E4                 dd 1, 0
.text:004012EC                 dd 63h
.text:004012F0                 dd offset aLines        ; "lines"
.text:004012F4                 dd 1, 0
.text:004012FC                 dd 6Eh
.text:00401300                 dd offset aPresumeInputPi ; "presume-input-pipe"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 80h
.text:00401310                 dd offset aQuiet        ; "quiet"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 71h
.text:00401320                 dd offset aSilent       ; "silent"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 71h
.text:00401330                 dd offset aVerbose      ; "verbose"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 76h
.text:00401340                 dd offset aHelp         ; "help"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 0FFFFFF7Eh
.text:00401350                 dd offset aVersion      ; "version"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401370 ; const char dword_401370[]
.text:00401370 dword_401370    dd 0F689002Dh           ; DATA XREF: .text:off_401374↓o
.text:00401370                                         ; sub_401A30+58C↓o ...
.text:00401374 off_401374      dd offset dword_401370  ; DATA XREF: sub_401A30+554↓o
.text:00401378                 dd 0
.text:0040137C ; const char Locale
.text:0040137C Locale          db 0                    ; DATA XREF: sub_401A30+4D↓o
.text:0040137C                                         ; sub_401A30+5D6↓o
.text:0040137D                 align 10h
.text:00401380 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401380                                         ; DATA XREF: sub_401A30+61↓o
.text:004013A3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401A30+69↓o
.text:004013A3                                         ; sub_401A30+76↓o
.text:004013AD ; const char aCNQv[]
.text:004013AD aCNQv           db 'c:n:qv',0           ; DATA XREF: sub_401A30+D6↓o
.text:004013B4 ; const char aBkm[]
.text:004013B4 aBkm            db 'bkm',0              ; DATA XREF: sub_401A30:loc_401B78↓o
.text:004013B4                                         ; sub_401A30:loc_401E65↓o ...
.text:004013B8 aInvalidNumberO db 'invalid number of bytes',0
.text:004013B8                                         ; DATA XREF: sub_401A30:loc_401BC0↓o
.text:004013B8                                         ; sub_401A30:loc_4024BB↓o
.text:004013D0 ; const char aSS[]
.text:004013D0 aSS             db '%s: %s',0           ; DATA XREF: sub_401A30+1A1↓o
.text:004013D0                                         ; sub_401A30+489↓o ...
.text:004013D7 aNumberOfBytes  db 'number of bytes',0  ; DATA XREF: sub_401A30:loc_401BF3↓o
.text:004013D7                                         ; sub_401A30:loc_40250E↓o
.text:004013E7                 align 20h
.text:00401400 aSSIsSoLargeTha db '%s: %s is so large that it is not representable',0
.text:00401400                                         ; DATA XREF: sub_401A30+1D0↓o
.text:00401400                                         ; sub_401A30+4B8↓o ...
.text:00401430                 align 20h
.text:00401440 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401440                                         ; DATA XREF: sub_401A30:loc_401C44↓o
.text:00401440                                         ; .text:004025FC↓o
.text:00401467 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401A30+261↓o
.text:00401474 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401A30+269↓o
.text:00401484 a530            db '5.3.0',0            ; DATA XREF: sub_401A30+274↓o
.text:0040148A aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401A30+27C↓o
.text:00401498 ; const FILE stru_401498
.text:00401498 stru_401498     FILE <64616568h, 768D00h, 67617355h, 25203A65h, 4F5B2073h, 4F495450h, \
.text:00401498                                         ; DATA XREF: sub_401A30+284↓o
.text:00401498                                         ; sub_401A30:loc_401CCD↓o ...
.text:00401498                       2E2E5D4Eh, 465B202Eh>
.text:004014B8                 db  49h ; I
.text:004014B9                 db  4Ch ; L
.text:004014BA                 db  45h ; E
.text:004014BB                 db  5Dh ; ]
.text:004014BC                 db  2Eh ; .
.text:004014BD                 db  2Eh ; .
.text:004014BE                 db  2Eh ; .
.text:004014BF                 db  0Ah
.text:004014C0                 db    0
.text:004014C1                 align 20h
.text:004014E0 aPrintTheFirst1 db 'Print the first 10 lines of each FILE to standard output.',0Ah
.text:004014E0                                         ; DATA XREF: sub_401A30+2BC↓o
.text:004014E0                                         ; .text:0040264F↓o
.text:004014E0                 db 'With more than one FILE, precede each with a header giving the fi'
.text:004014E0                 db 'le name.',0Ah
.text:004014E0                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:004014E0                 db 0Ah,0
.text:0040159C                 align 10h
.text:004015A0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004015A0                                         ; DATA XREF: sub_401A30+2DE↓o
.text:004015A0                                         ; .text:00402671↓o
.text:004015A0                 db 'ns too.',0Ah,0
.text:004015EA                 align 20h
.text:00401600 aCBytesNPrintTh db '  -c, --bytes=[-]N         print the first N bytes of each file;',0Ah
.text:00401600                                         ; DATA XREF: sub_401A30+300↓o
.text:00401600                                         ; .text:00402693↓o
.text:00401600                 db '                             with the leading `-',27h,', print al'
.text:00401600                 db 'l but the last',0Ah
.text:00401600                 db '                             N bytes of each file',0Ah
.text:00401600                 db '  -n, --lines=[-]N         print the first N lines instead of the'
.text:00401600                 db ' first 10;',0Ah
.text:00401600                 db '                             with the leading `-',27h,', print al'
.text:00401600                 db 'l but the last',0Ah
.text:00401600                 db '                             N lines of each file',0Ah,0
.text:00401786                 align 20h
.text:004017A0 aQQuietSilentNe db '  -q, --quiet, --silent    never print headers giving file names',0Ah
.text:004017A0                                         ; DATA XREF: sub_401A30+322↓o
.text:004017A0                                         ; .text:004026B5↓o
.text:004017A0                 db '  -v, --verbose            always print headers giving file names'
.text:004017A0                 db 0Ah,0
.text:00401824                 align 20h
.text:00401840 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401840                                         ; DATA XREF: sub_401A30+344↓o
.text:00401840                                         ; .text:004026D7↓o
.text:0040186D                 align 20h
.text:00401880 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401880                                         ; DATA XREF: sub_401A30+366↓o
.text:00401880                                         ; .text:004026F9↓o
.text:004018B6                 align 10h
.text:004018C0 aNMayHaveAMulti db 0Ah                  ; DATA XREF: sub_401A30+388↓o
.text:004018C0                                         ; .text:0040271B↓o
.text:004018C0                 db 'N may have a multiplier suffix: b 512, k 1024, m 1024*1024.',0Ah,0
.text:004018FE aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401A30+3AA↓o
.text:004018FE                                         ; .text:0040273D↓o
.text:004018FE                 db 'Report bugs to <%s>.',0Ah,0
.text:00401915 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401915                                         ; DATA XREF: sub_401A30+3B7↓o
.text:00401915                                         ; .text:0040274A↓o
.text:0040192B aInvalidNumberO_0 db 'invalid number of lines',0
.text:0040192B                                         ; DATA XREF: sub_401A30:loc_401EA8↓o
.text:0040192B                                         ; sub_401A30+A38↓o
.text:00401943 aNumberOfLines  db 'number of lines',0  ; DATA XREF: sub_401A30:loc_401EDB↓o
.text:00401943                                         ; sub_401A30+A9D↓o
.text:00401953 aStandardInput  db 'standard input',0   ; DATA XREF: sub_401A30+5A3↓o
.text:00401962 ; const char Format[]
.text:00401962 Format          db '%s==> %s <==',0Ah,0 ; DATA XREF: sub_401A30+5DF↓o
.text:00401970 aClosingS       db 'closing %s',0       ; DATA XREF: sub_401A30+75D↓o
.text:0040197B asc_40197B      db 0Ah,0                ; DATA XREF: sub_401A30:loc_4022DA↓o
.text:0040197D aCannotOpenSFor db 'cannot open %s for reading',0
.text:0040197D                                         ; DATA XREF: sub_401A30+8D6↓o
.text:00401998                 align 10h
.text:004019A0 aSNumberOfBytes db '%s: number of bytes is too large',0
.text:004019A0                                         ; DATA XREF: sub_401A30+8FB↓o
.text:004019C1                 align 20h
.text:004019E0 aSOptionIsObsol db '`-%s',27h,' option is obsolete; use `-%c %.*s%.*s%s',27h,0
.text:004019E0                                         ; DATA XREF: sub_401A30:loc_402517↓o
.text:00401A0F aUnrecognizedOp db 'unrecognized option `-%c',27h,0
.text:00401A0F                                         ; DATA XREF: sub_401A30:def_40239D↓o
.text:00401A29                 align 10h
.text:00401A30
.text:00401A30 ; =============== S U B R O U T I N E =======================================
.text:00401A30
.text:00401A30 ; Attributes: bp-based frame fuzzy-sp
.text:00401A30
.text:00401A30 sub_401A30      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401A30
.text:00401A30 Category        = dword ptr -0D8h
.text:00401A30 Locale          = dword ptr -0D4h
.text:00401A30 var_D0          = dword ptr -0D0h
.text:00401A30 var_CC          = byte ptr -0CCh
.text:00401A30 Str             = dword ptr -0C8h
.text:00401A30 var_C4          = dword ptr -0C4h
.text:00401A30 var_C0          = dword ptr -0C0h
.text:00401A30 var_BC          = dword ptr -0BCh
.text:00401A30 var_B8          = dword ptr -0B8h
.text:00401A30 var_B4          = dword ptr -0B4h
.text:00401A30 var_A0          = dword ptr -0A0h
.text:00401A30 var_9C          = dword ptr -9Ch
.text:00401A30 var_98          = dword ptr -98h
.text:00401A30 var_91          = byte ptr -91h
.text:00401A30 var_90          = dword ptr -90h
.text:00401A30 var_89          = byte ptr -89h
.text:00401A30 var_88          = byte ptr -88h
.text:00401A30 var_70          = dword ptr -70h
.text:00401A30 var_6C          = dword ptr -6Ch
.text:00401A30 var_64          = dword ptr -64h
.text:00401A30 var_5D          = byte ptr -5Dh
.text:00401A30 var_5C          = dword ptr -5Ch
.text:00401A30 var_58          = dword ptr -58h
.text:00401A30 var_54          = dword ptr -54h
.text:00401A30 var_50          = dword ptr -50h
.text:00401A30 var_4C          = dword ptr -4Ch
.text:00401A30 var_48          = dword ptr -48h
.text:00401A30 var_44          = dword ptr -44h
.text:00401A30 var_39          = byte ptr -39h
.text:00401A30 var_38          = byte ptr -38h
.text:00401A30 arg_0           = dword ptr  8
.text:00401A30 arg_4           = dword ptr  0Ch
.text:00401A30
.text:00401A30                 push    ebp
.text:00401A31                 xor     eax, eax
.text:00401A33                 mov     ebp, esp
.text:00401A35                 push    edi
.text:00401A36                 push    esi
.text:00401A37                 push    ebx
.text:00401A38                 sub     esp, 0CCh
.text:00401A3E                 and     esp, 0FFFFFFF0h
.text:00401A41                 call    __alloca
.text:00401A46                 call    sub_40F420
.text:00401A4B                 mov     [ebp+var_5C], 0
.text:00401A52                 mov     eax, [ebp+arg_4]
.text:00401A55                 mov     [ebp+var_5D], 1
.text:00401A59                 mov     [ebp+var_70], 0Ah
.text:00401A60                 mov     ecx, [eax]
.text:00401A62                 mov     [ebp+var_6C], 0
.text:00401A69                 mov     [ebp+var_88], 1
.text:00401A70                 mov     ds:dword_4124E0, ecx
.text:00401A76                 mov     [ebp+var_89], 0
.text:00401A7D                 mov     [esp+0D8h+Locale], offset Locale ; Locale
.text:00401A85                 mov     [esp+0D8h+Category], 0 ; Category
.text:00401A8C                 call    setlocale
.text:00401A91                 mov     [esp+0D8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401A99                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:00401AA0                 call    ds:__imp_libintl_bindtextdomain
.text:00401AA6                 mov     [esp+0D8h+Category], offset aCoreutils ; "coreutils"
.text:00401AAD                 call    ds:libintl_textdomain
.text:00401AB3                 mov     [esp+0D8h+Category], offset sub_405360 ; void (__cdecl *)()
.text:00401ABA                 call    sub_401040
.text:00401ABF                 cmp     [ebp+arg_0], 1
.text:00401AC3                 mov     ds:byte_412020, 0
.text:00401ACA                 mov     ds:byte_412010, 0
.text:00401AD1                 jle     short loc_401AF0
.text:00401AD3                 mov     ebx, [ebp+arg_4]
.text:00401AD6                 mov     edx, [ebx+4]
.text:00401AD9                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00401ADC                 jz      loc_402360
.text:00401AE2                 lea     esi, [esi+0]
.text:00401AE9                 lea     edi, [edi+0]
.text:00401AF0
.text:00401AF0 loc_401AF0:                             ; CODE XREF: sub_401A30+A1↑j
.text:00401AF0                                         ; sub_401A30+186↓j ...
.text:00401AF0                 mov     [esp+0D8h+Str], 0 ; int
.text:00401AF8                 mov     eax, [ebp+arg_4]
.text:00401AFB                 mov     edi, [ebp+arg_0]
.text:00401AFE                 mov     dword ptr [esp+0D8h+var_CC], offset off_4012E0 ; int
.text:00401B06                 mov     [esp+0D8h+var_D0], offset aCNQv ; "c:n:qv"
.text:00401B0E                 mov     [esp+0D8h+Locale], eax ; int
.text:00401B12                 mov     [esp+0D8h+Category], edi ; int
.text:00401B15                 call    sub_405180
.text:00401B1A                 cmp     eax, 0FFFFFFFFh
.text:00401B1D                 jz      loc_401F2C
.text:00401B23                 cmp     eax, 6Eh ; 'n'
.text:00401B26                 jz      loc_401E41
.text:00401B2C                 cmp     eax, 6Eh ; 'n'
.text:00401B2F                 jg      loc_401E00
.text:00401B35                 cmp     eax, 0FFFFFF7Eh
.text:00401B3A                 jz      loc_401CCD
.text:00401B40                 cmp     eax, 0FFFFFF7Eh
.text:00401B45                 jle     loc_401C7C
.text:00401B4B                 cmp     eax, 63h ; 'c'
.text:00401B4E                 jnz     loc_401C44
.text:00401B54                 mov     [ebp+var_88], 0
.text:00401B5B                 mov     esi, ds:dword_412500
.text:00401B61                 cmp     byte ptr [esi], 2Dh ; '-'
.text:00401B64                 setz    [ebp+var_89]
.text:00401B6B                 cmp     [ebp+var_89], 0
.text:00401B72                 jnz     loc_401C34
.text:00401B78
.text:00401B78 loc_401B78:                             ; CODE XREF: sub_401A30+20F↓j
.text:00401B78                 mov     [esp+0D8h+Str], offset aBkm ; "bkm"
.text:00401B80                 lea     edx, [ebp+var_50]
.text:00401B83                 mov     dword ptr [esp+0D8h+var_CC], edx ; int
.text:00401B87                 mov     [esp+0D8h+var_D0], 0Ah ; int
.text:00401B8F                 mov     [esp+0D8h+Locale], 0 ; int
.text:00401B97                 mov     [esp+0D8h+Category], esi ; int
.text:00401B9A                 call    sub_4054B0
.text:00401B9F                 cmp     eax, 1
.text:00401BA2                 mov     edi, eax
.text:00401BA4                 jz      short loc_401BF3
.text:00401BA6
.text:00401BA6 loc_401BA6:                             ; CODE XREF: sub_401A30+1FF↓j
.text:00401BA6                 test    edi, edi
.text:00401BA8                 jnz     short loc_401BC0
.text:00401BAA
.text:00401BAA loc_401BAA:                             ; CODE XREF: sub_401A30+1C1↓j
.text:00401BAA                 mov     edi, [ebp+var_50]
.text:00401BAD                 mov     esi, [ebp+var_4C]
.text:00401BB0                 mov     [ebp+var_70], edi
.text:00401BB3                 mov     [ebp+var_6C], esi
.text:00401BB6                 jmp     loc_401AF0
.text:00401BB6 ; ---------------------------------------------------------------------------
.text:00401BBB                 align 10h
.text:00401BC0
.text:00401BC0 loc_401BC0:                             ; CODE XREF: sub_401A30+178↑j
.text:00401BC0                 mov     [esp+0D8h+Category], offset aInvalidNumberO ; "invalid number of bytes"
.text:00401BC7                 call    ds:libintl_gettext
.text:00401BCD                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:00401BD1                 mov     [esp+0D8h+var_D0], offset aSS ; "%s: %s"
.text:00401BD9                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00401BE1                 mov     [esp+0D8h+Str], eax
.text:00401BE5                 mov     [esp+0D8h+Category], 1 ; Code
.text:00401BEC                 call    sub_407AC0
.text:00401BF1                 jmp     short loc_401BAA
.text:00401BF3 ; ---------------------------------------------------------------------------
.text:00401BF3
.text:00401BF3 loc_401BF3:                             ; CODE XREF: sub_401A30+174↑j
.text:00401BF3                 mov     [esp+0D8h+Category], offset aNumberOfBytes ; "number of bytes"
.text:00401BFA                 call    ds:libintl_gettext
.text:00401C00                 mov     [esp+0D8h+Category], offset aSSIsSoLargeTha ; "%s: %s is so large that it is not repre"...
.text:00401C07                 mov     ebx, eax
.text:00401C09                 call    ds:libintl_gettext
.text:00401C0F                 mov     [esp+0D8h+Str], ebx
.text:00401C13                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:00401C17                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00401C1F                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00401C23                 mov     [esp+0D8h+Category], 1 ; Code
.text:00401C2A                 call    sub_407AC0
.text:00401C2F                 jmp     loc_401BA6
.text:00401C34 ; ---------------------------------------------------------------------------
.text:00401C34
.text:00401C34 loc_401C34:                             ; CODE XREF: sub_401A30+142↑j
.text:00401C34                 lea     ebx, [esi+1]
.text:00401C37                 mov     esi, ebx
.text:00401C39                 mov     ds:dword_412500, ebx
.text:00401C3F                 jmp     loc_401B78
.text:00401C44 ; ---------------------------------------------------------------------------
.text:00401C44
.text:00401C44 loc_401C44:                             ; CODE XREF: sub_401A30+11E↑j
.text:00401C44                                         ; sub_401A30+251↓j ...
.text:00401C44                 mov     [esp+0D8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401C4B                 call    ds:libintl_gettext
.text:00401C51                 mov     esi, ds:_iob
.text:00401C57                 mov     edi, ds:dword_4124E0
.text:00401C5D                 add     esi, 40h ; '@'
.text:00401C60                 mov     [esp+0D8h+var_D0], edi
.text:00401C64                 mov     [esp+0D8h+Locale], eax ; Format
.text:00401C68                 mov     [esp+0D8h+Category], esi ; Stream
.text:00401C6B                 call    fprintf
.text:00401C70                 mov     [esp+0D8h+Category], 1 ; Code
.text:00401C77
.text:00401C77 loc_401C77:                             ; CODE XREF: sub_401A30+29B↓j
.text:00401C77                                         ; sub_401A30+708↓j
.text:00401C77                 call    exit
.text:00401C7C ; ---------------------------------------------------------------------------
.text:00401C7C
.text:00401C7C loc_401C7C:                             ; CODE XREF: sub_401A30+115↑j
.text:00401C7C                 cmp     eax, 0FFFFFF7Dh
.text:00401C81                 jnz     short loc_401C44
.text:00401C83                 mov     [esp+0D8h+var_C0], 0
.text:00401C8B                 mov     edx, ds:_iob
.text:00401C91                 mov     [esp+0D8h+var_C4], offset aJimMeyering ; "Jim Meyering"
.text:00401C99                 mov     [esp+0D8h+Str], offset aDavidMackenzie ; "David MacKenzie"
.text:00401CA1                 add     edx, 20h ; ' '
.text:00401CA4                 mov     dword ptr [esp+0D8h+var_CC], offset a530 ; "5.3.0"
.text:00401CAC                 mov     [esp+0D8h+var_D0], offset aGnuCoreutils ; "GNU coreutils"
.text:00401CB4                 mov     [esp+0D8h+Locale], offset stru_401498 ; FILE *
.text:00401CBC                 mov     [esp+0D8h+Category], edx ; FILE *
.text:00401CBF                 call    sub_405140
.text:00401CC4
.text:00401CC4 loc_401CC4:                             ; CODE XREF: sub_401A30+3C7↓j
.text:00401CC4                 mov     [esp+0D8h+Category], 0
.text:00401CCB                 jmp     short loc_401C77
.text:00401CCD ; ---------------------------------------------------------------------------
.text:00401CCD
.text:00401CCD loc_401CCD:                             ; CODE XREF: sub_401A30+10A↑j
.text:00401CCD                 mov     [esp+0D8h+Category], offset stru_401498._base
.text:00401CD4                 call    ds:libintl_gettext
.text:00401CDA                 mov     esi, ds:dword_4124E0
.text:00401CE0                 mov     [esp+0D8h+Category], eax ; Format
.text:00401CE3                 mov     [esp+0D8h+Locale], esi
.text:00401CE7                 call    printf
.text:00401CEC                 mov     [esp+0D8h+Category], offset aPrintTheFirst1 ; "Print the first 10 lines of each FILE t"...
.text:00401CF3                 call    ds:libintl_gettext
.text:00401CF9                 mov     ebx, ds:_iob
.text:00401CFF                 add     ebx, 20h ; ' '
.text:00401D02                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00401D06                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401D09                 call    fputs
.text:00401D0E                 mov     [esp+0D8h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401D15                 call    ds:libintl_gettext
.text:00401D1B                 mov     ecx, ds:_iob
.text:00401D21                 add     ecx, 20h ; ' '
.text:00401D24                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:00401D28                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401D2B                 call    fputs
.text:00401D30                 mov     [esp+0D8h+Category], offset aCBytesNPrintTh ; "  -c, --bytes=[-]N         print the fi"...
.text:00401D37                 call    ds:libintl_gettext
.text:00401D3D                 mov     edi, ds:_iob
.text:00401D43                 add     edi, 20h ; ' '
.text:00401D46                 mov     [esp+0D8h+Locale], edi ; Stream
.text:00401D4A                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401D4D                 call    fputs
.text:00401D52                 mov     [esp+0D8h+Category], offset aQQuietSilentNe ; "  -q, --quiet, --silent    never print "...
.text:00401D59                 call    ds:libintl_gettext
.text:00401D5F                 mov     esi, ds:_iob
.text:00401D65                 add     esi, 20h ; ' '
.text:00401D68                 mov     [esp+0D8h+Locale], esi ; Stream
.text:00401D6C                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401D6F                 call    fputs
.text:00401D74                 mov     [esp+0D8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401D7B                 call    ds:libintl_gettext
.text:00401D81                 mov     ebx, ds:_iob
.text:00401D87                 add     ebx, 20h ; ' '
.text:00401D8A                 mov     [esp+0D8h+Locale], ebx ; Stream
.text:00401D8E                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401D91                 call    fputs
.text:00401D96                 mov     [esp+0D8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401D9D                 call    ds:libintl_gettext
.text:00401DA3                 mov     ecx, ds:_iob
.text:00401DA9                 add     ecx, 20h ; ' '
.text:00401DAC                 mov     [esp+0D8h+Locale], ecx ; Stream
.text:00401DB0                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401DB3                 call    fputs
.text:00401DB8                 mov     [esp+0D8h+Category], offset aNMayHaveAMulti ; "\nN may have a multiplier suffix: b 512"...
.text:00401DBF                 call    ds:libintl_gettext
.text:00401DC5                 mov     edi, ds:_iob
.text:00401DCB                 add     edi, 20h ; ' '
.text:00401DCE                 mov     [esp+0D8h+Locale], edi ; Stream
.text:00401DD2                 mov     [esp+0D8h+Category], eax ; Buffer
.text:00401DD5                 call    fputs
.text:00401DDA                 mov     [esp+0D8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401DE1                 call    ds:libintl_gettext
.text:00401DE7                 mov     [esp+0D8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401DEF                 mov     [esp+0D8h+Category], eax ; Format
.text:00401DF2                 call    printf
.text:00401DF7                 jmp     loc_401CC4
.text:00401DF7 ; ---------------------------------------------------------------------------
.text:00401DFC                 align 10h
.text:00401E00
.text:00401E00 loc_401E00:                             ; CODE XREF: sub_401A30+FF↑j
.text:00401E00                 cmp     eax, 76h ; 'v'
.text:00401E03                 jz      short loc_401E35
.text:00401E05                 cmp     eax, 76h ; 'v'
.text:00401E08                 jg      short loc_401E20
.text:00401E0A                 mov     [ebp+var_5C], 2
.text:00401E11                 cmp     eax, 71h ; 'q'
.text:00401E14                 jz      loc_401AF0
.text:00401E1A                 jmp     loc_401C44
.text:00401E1A ; ---------------------------------------------------------------------------
.text:00401E1F                 align 10h
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401A30+3D8↑j
.text:00401E20                 add     eax, 0FFFFFF80h
.text:00401E23                 jnz     loc_401C44
.text:00401E29                 mov     ds:byte_412000, 1
.text:00401E30                 jmp     loc_401AF0
.text:00401E35 ; ---------------------------------------------------------------------------
.text:00401E35
.text:00401E35 loc_401E35:                             ; CODE XREF: sub_401A30+3D3↑j
.text:00401E35                 mov     [ebp+var_5C], 1
.text:00401E3C                 jmp     loc_401AF0
.text:00401E41 ; ---------------------------------------------------------------------------
.text:00401E41
.text:00401E41 loc_401E41:                             ; CODE XREF: sub_401A30+F6↑j
.text:00401E41                 mov     [ebp+var_88], 1
.text:00401E48                 mov     esi, ds:dword_412500
.text:00401E4E                 cmp     byte ptr [esi], 2Dh ; '-'
.text:00401E51                 setz    [ebp+var_89]
.text:00401E58                 cmp     [ebp+var_89], 0
.text:00401E5F                 jnz     loc_401F1C
.text:00401E65
.text:00401E65 loc_401E65:                             ; CODE XREF: sub_401A30+4F7↓j
.text:00401E65                 mov     [esp+0D8h+Str], offset aBkm ; "bkm"
.text:00401E6D                 lea     ebx, [ebp+var_58]
.text:00401E70                 mov     dword ptr [esp+0D8h+var_CC], ebx ; int
.text:00401E74                 mov     [esp+0D8h+var_D0], 0Ah ; int
.text:00401E7C                 mov     [esp+0D8h+Locale], 0 ; int
.text:00401E84                 mov     [esp+0D8h+Category], esi ; int
.text:00401E87                 call    sub_4054B0
.text:00401E8C                 cmp     eax, 1
.text:00401E8F                 mov     edi, eax
.text:00401E91                 jz      short loc_401EDB
.text:00401E93
.text:00401E93 loc_401E93:                             ; CODE XREF: sub_401A30+4E7↓j
.text:00401E93                 test    edi, edi
.text:00401E95                 jnz     short loc_401EA8
.text:00401E97
.text:00401E97 loc_401E97:                             ; CODE XREF: sub_401A30+4A9↓j
.text:00401E97                 mov     esi, [ebp+var_58]
.text:00401E9A                 mov     eax, [ebp+var_54]
.text:00401E9D                 mov     [ebp+var_70], esi
.text:00401EA0                 mov     [ebp+var_6C], eax
.text:00401EA3                 jmp     loc_401AF0
.text:00401EA8 ; ---------------------------------------------------------------------------
.text:00401EA8
.text:00401EA8 loc_401EA8:                             ; CODE XREF: sub_401A30+465↑j
.text:00401EA8                 mov     [esp+0D8h+Category], offset aInvalidNumberO_0 ; "invalid number of lines"
.text:00401EAF                 call    ds:libintl_gettext
.text:00401EB5                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:00401EB9                 mov     [esp+0D8h+var_D0], offset aSS ; "%s: %s"
.text:00401EC1                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00401EC9                 mov     [esp+0D8h+Str], eax
.text:00401ECD                 mov     [esp+0D8h+Category], 1 ; Code
.text:00401ED4                 call    sub_407AC0
.text:00401ED9                 jmp     short loc_401E97
.text:00401EDB ; ---------------------------------------------------------------------------
.text:00401EDB
.text:00401EDB loc_401EDB:                             ; CODE XREF: sub_401A30+461↑j
.text:00401EDB                 mov     [esp+0D8h+Category], offset aNumberOfLines ; "number of lines"
.text:00401EE2                 call    ds:libintl_gettext
.text:00401EE8                 mov     [esp+0D8h+Category], offset aSSIsSoLargeTha ; "%s: %s is so large that it is not repre"...
.text:00401EEF                 mov     ebx, eax
.text:00401EF1                 call    ds:libintl_gettext
.text:00401EF7                 mov     [esp+0D8h+Str], ebx
.text:00401EFB                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:00401EFF                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00401F07                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00401F0B                 mov     [esp+0D8h+Category], 1 ; Code
.text:00401F12                 call    sub_407AC0
.text:00401F17                 jmp     loc_401E93
.text:00401F1C ; ---------------------------------------------------------------------------
.text:00401F1C
.text:00401F1C loc_401F1C:                             ; CODE XREF: sub_401A30+42F↑j
.text:00401F1C                 lea     ecx, [esi+1]
.text:00401F1F                 mov     esi, ecx
.text:00401F21                 mov     ds:dword_412500, ecx
.text:00401F27                 jmp     loc_401E65
.text:00401F2C ; ---------------------------------------------------------------------------
.text:00401F2C
.text:00401F2C loc_401F2C:                             ; CODE XREF: sub_401A30+ED↑j
.text:00401F2C                 cmp     [ebp+var_5C], 1
.text:00401F30                 jz      short loc_401F45
.text:00401F32                 mov     ecx, [ebp+var_5C]
.text:00401F35                 test    ecx, ecx
.text:00401F37                 jnz     short loc_401F4C
.text:00401F39                 mov     ebx, [ebp+arg_0]
.text:00401F3C                 dec     ebx
.text:00401F3D                 cmp     dword_411020, ebx
.text:00401F43                 jge     short loc_401F4C
.text:00401F45
.text:00401F45 loc_401F45:                             ; CODE XREF: sub_401A30+500↑j
.text:00401F45                 mov     ds:byte_412010, 1
.text:00401F4C
.text:00401F4C loc_401F4C:                             ; CODE XREF: sub_401A30+507↑j
.text:00401F4C                                         ; sub_401A30+513↑j
.text:00401F4C                 cmp     [ebp+var_88], 0
.text:00401F53                 jnz     short loc_401F6D
.text:00401F55                 cmp     [ebp+var_89], 0
.text:00401F5C                 jz      short loc_401F6D
.text:00401F5E                 cmp     [ebp+var_6C], 7FFFFFFFh
.text:00401F65                 jb      short loc_401F6D
.text:00401F67                 ja      loc_402312
.text:00401F6D
.text:00401F6D loc_401F6D:                             ; CODE XREF: sub_401A30+523↑j
.text:00401F6D                                         ; sub_401A30+52C↑j ...
.text:00401F6D                 mov     ebx, dword_411020
.text:00401F73                 mov     edi, [ebp+arg_4]
.text:00401F76                 cmp     ebx, [ebp+arg_0]
.text:00401F79                 lea     esi, [edi+ebx*4]
.text:00401F7C                 mov     [ebp+var_90], esi
.text:00401F82                 jl      short loc_401F8F
.text:00401F84                 mov     ecx, offset off_401374
.text:00401F89                 mov     [ebp+var_90], ecx
.text:00401F8F
.text:00401F8F loc_401F8F:                             ; CODE XREF: sub_401A30+552↑j
.text:00401F8F                 mov     [ebp+var_64], 0
.text:00401F96                 mov     edx, [ebp+var_90]
.text:00401F9C                 mov     esi, [edx]
.text:00401F9E                 test    esi, esi
.text:00401FA0                 jz      loc_402123
.text:00401FA6                 mov     ebx, esi
.text:00401FA8
.text:00401FA8 loc_401FA8:                             ; CODE XREF: sub_401A30+6ED↓j
.text:00401FA8                 mov     [ebp+var_91], 0
.text:00401FAF                 mov     ecx, 2
.text:00401FB4                 mov     esi, ebx
.text:00401FB6                 mov     [ebp+var_98], ebx
.text:00401FBC                 mov     edi, offset dword_401370
.text:00401FC1                 cld
.text:00401FC2                 repe cmpsb
.text:00401FC4                 jnz     loc_4022E4
.text:00401FCA                 mov     ds:byte_412020, 1
.text:00401FD1                 xor     edi, edi
.text:00401FD3                 mov     [esp+0D8h+Category], offset aStandardInput ; "standard input"
.text:00401FDA                 call    ds:libintl_gettext
.text:00401FE0                 mov     [ebp+var_98], eax
.text:00401FE6
.text:00401FE6 loc_401FE6:                             ; CODE XREF: sub_401A30+8C8↓j
.text:00401FE6                 cmp     ds:byte_412010, 0
.text:00401FED                 jz      short loc_402022
.text:00401FEF                 cmp     byte_411010, 0
.text:00401FF6                 mov     eax, [ebp+var_98]
.text:00401FFC                 mov     [esp+0D8h+var_D0], eax
.text:00402000                 jz      loc_4022DA
.text:00402006                 mov     eax, offset Locale
.text:0040200B
.text:0040200B loc_40200B:                             ; CODE XREF: sub_401A30+8AF↓j
.text:0040200B                 mov     [esp+0D8h+Locale], eax
.text:0040200F                 mov     [esp+0D8h+Category], offset Format ; "%s==> %s <==\n"
.text:00402016                 call    printf
.text:0040201B                 mov     byte_411010, 0
.text:00402022
.text:00402022 loc_402022:                             ; CODE XREF: sub_401A30+5BD↑j
.text:00402022                 cmp     [ebp+var_89], 0
.text:00402029                 jz      loc_40228D
.text:0040202F                 cmp     [ebp+var_88], 0
.text:00402036                 jz      loc_402265
.text:0040203C                 mov     [esp+0D8h+Category], edi ; FileHandle
.text:0040203F                 call    _isatty
.text:00402044                 test    eax, eax
.text:00402046                 jz      loc_402228
.text:0040204C
.text:0040204C loc_40204C:                             ; CODE XREF: sub_401A30+816↓j
.text:0040204C                                         ; sub_401A30+830↓j
.text:0040204C                 cmp     ds:byte_412000, 0
.text:00402053                 jnz     loc_402206
.text:00402059                 mov     dword ptr [esp+0D8h+var_CC], 1 ; Origin
.text:00402061                 mov     [esp+0D8h+Locale], 0 ; Offset
.text:00402069                 mov     [esp+0D8h+var_D0], 0
.text:00402071                 mov     [esp+0D8h+Category], edi ; FileHandle
.text:00402074                 call    _lseeki64
.text:00402079                 mov     dword ptr [esp+0D8h+var_CC], 2 ; char
.text:00402081                 mov     esi, edx
.text:00402083                 mov     ebx, eax
.text:00402085                 mov     [esp+0D8h+Locale], 0 ; Offset
.text:0040208D                 mov     [esp+0D8h+var_D0], 0
.text:00402095                 mov     [esp+0D8h+Category], edi ; FileHandle
.text:00402098                 call    _lseeki64
.text:0040209D                 mov     [ebp+var_A0], eax
.text:004020A3                 test    esi, esi
.text:004020A5                 mov     [ebp+var_9C], edx
.text:004020AB                 js      loc_402206
.text:004020B1                 cmp     esi, [ebp+var_9C]
.text:004020B7                 jg      loc_402206
.text:004020BD                 jl      short loc_4020CB
.text:004020BF                 cmp     ebx, [ebp+var_A0]
.text:004020C5                 jnb     loc_402206
.text:004020CB
.text:004020CB loc_4020CB:                             ; CODE XREF: sub_401A30+68D↑j
.text:004020CB                 mov     edx, [ebp+var_9C]
.text:004020D1                 mov     ecx, 1
.text:004020D6                 or      edx, [ebp+var_A0]
.text:004020DC                 jnz     loc_4021C2
.text:004020E2
.text:004020E2 loc_4020E2:                             ; CODE XREF: sub_401A30+7D1↓j
.text:004020E2                 movzx   eax, cl
.text:004020E5
.text:004020E5 loc_4020E5:                             ; CODE XREF: sub_401A30+858↓j
.text:004020E5                 test    edi, edi
.text:004020E7                 mov     bl, al
.text:004020E9                 jnz     loc_402170
.text:004020EF
.text:004020EF loc_4020EF:                             ; CODE XREF: sub_401A30+749↓j
.text:004020EF                 test    bl, bl
.text:004020F1                 jz      short loc_402100
.text:004020F3                 cmp     [ebp+var_5D], 0
.text:004020F7                 jz      short loc_402100
.text:004020F9                 mov     [ebp+var_91], 1
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: sub_401A30+6C1↑j
.text:00402100                                         ; sub_401A30+6C7↑j ...
.text:00402100                 inc     [ebp+var_64]
.text:00402103                 mov     ebx, [ebp+var_90]
.text:00402109                 movzx   edx, [ebp+var_91]
.text:00402110                 mov     esi, [ebp+var_64]
.text:00402113                 mov     eax, [ebx+esi*4]
.text:00402116                 mov     [ebp+var_5D], dl
.text:00402119                 test    eax, eax
.text:0040211B                 mov     ebx, eax
.text:0040211D                 jnz     loc_401FA8
.text:00402123
.text:00402123 loc_402123:                             ; CODE XREF: sub_401A30+570↑j
.text:00402123                 cmp     ds:byte_412020, 0
.text:0040212A                 jnz     short loc_40213D
.text:0040212C
.text:0040212C loc_40212C:                             ; CODE XREF: sub_401A30+71B↓j
.text:0040212C                                         ; sub_401A30+73C↓j
.text:0040212C                 xor     ebx, ebx
.text:0040212E                 cmp     [ebp+var_5D], 0
.text:00402132                 setz    bl
.text:00402135                 mov     [esp+0D8h+Category], ebx
.text:00402138                 jmp     loc_401C77
.text:0040213D ; ---------------------------------------------------------------------------
.text:0040213D
.text:0040213D loc_40213D:                             ; CODE XREF: sub_401A30+6FA↑j
.text:0040213D                 mov     [esp+0D8h+Category], 0 ; FileHandle
.text:00402144                 call    _close
.text:00402149                 test    eax, eax
.text:0040214B                 jns     short loc_40212C
.text:0040214D                 call    _errno
.text:00402152                 mov     [esp+0D8h+var_D0], offset dword_401370 ; char *
.text:0040215A                 mov     ecx, [eax]
.text:0040215C                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402163                 mov     [esp+0D8h+Locale], ecx ; ErrorMessage
.text:00402167                 call    sub_407AC0
.text:0040216C                 jmp     short loc_40212C
.text:0040216C ; ---------------------------------------------------------------------------
.text:0040216E                 align 10h
.text:00402170
.text:00402170 loc_402170:                             ; CODE XREF: sub_401A30+6B9↑j
.text:00402170                 mov     [esp+0D8h+Category], edi ; FileHandle
.text:00402173                 call    _close
.text:00402178                 inc     eax
.text:00402179                 jnz     loc_4020EF
.text:0040217F                 mov     edi, [ebp+var_98]
.text:00402185                 mov     [esp+0D8h+Category], edi ; char *
.text:00402188                 call    sub_406640
.text:0040218D                 mov     [esp+0D8h+Category], offset aClosingS ; "closing %s"
.text:00402194
.text:00402194 loc_402194:                             ; CODE XREF: sub_401A30+8DD↓j
.text:00402194                 mov     esi, eax
.text:00402196                 call    ds:libintl_gettext
.text:0040219C                 mov     edi, eax
.text:0040219E                 call    _errno
.text:004021A3                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:004021A7                 mov     [esp+0D8h+var_D0], edi ; char *
.text:004021AB                 mov     ecx, [eax]
.text:004021AD                 mov     [esp+0D8h+Category], 0 ; Code
.text:004021B4                 mov     [esp+0D8h+Locale], ecx ; ErrorMessage
.text:004021B8                 call    sub_407AC0
.text:004021BD                 jmp     loc_402100
.text:004021C2 ; ---------------------------------------------------------------------------
.text:004021C2
.text:004021C2 loc_4021C2:                             ; CODE XREF: sub_401A30+6AC↑j
.text:004021C2                 mov     [esp+0D8h+Str], ebx ; int
.text:004021C6                 mov     ecx, [ebp+var_A0]
.text:004021CC                 mov     eax, [ebp+var_9C]
.text:004021D2                 mov     [esp+0D8h+var_C4], esi ; int
.text:004021D6                 mov     ebx, [ebp+var_98]
.text:004021DC                 mov     esi, [ebp+var_6C]
.text:004021DF                 mov     [esp+0D8h+var_C0], ecx ; int
.text:004021E3                 mov     ecx, [ebp+var_70]
.text:004021E6                 mov     [esp+0D8h+var_BC], eax ; int
.text:004021EA                 mov     dword ptr [esp+0D8h+var_CC], esi ; int
.text:004021EE                 mov     [esp+0D8h+var_D0], ecx ; int
.text:004021F2                 mov     [esp+0D8h+Locale], edi ; int
.text:004021F6                 mov     [esp+0D8h+Category], ebx ; char *
.text:004021F9                 call    sub_402EE0
.text:004021FE
.text:004021FE loc_4021FE:                             ; CODE XREF: sub_401A30+7F6↓j
.text:004021FE                 movzx   ecx, al
.text:00402201                 jmp     loc_4020E2
.text:00402206 ; ---------------------------------------------------------------------------
.text:00402206
.text:00402206 loc_402206:                             ; CODE XREF: sub_401A30+623↑j
.text:00402206                                         ; sub_401A30+67B↑j ...
.text:00402206                 mov     [esp+0D8h+Locale], edi ; int
.text:0040220A                 mov     edx, [ebp+var_70]
.text:0040220D                 mov     esi, [ebp+var_6C]
.text:00402210                 mov     ebx, [ebp+var_98]
.text:00402216                 mov     [esp+0D8h+var_D0], edx ; int
.text:0040221A                 mov     dword ptr [esp+0D8h+var_CC], esi ; int
.text:0040221E                 mov     [esp+0D8h+Category], ebx ; char *
.text:00402221                 call    sub_402B50
.text:00402226                 jmp     short loc_4021FE
.text:00402228 ; ---------------------------------------------------------------------------
.text:00402228
.text:00402228 loc_402228:                             ; CODE XREF: sub_401A30+616↑j
.text:00402228                 mov     [esp+0D8h+Locale], 8000h ; Mode
.text:00402230                 mov     [esp+0D8h+Category], edi ; FileHandle
.text:00402233                 call    _setmode
.text:00402238                 mov     [esp+0D8h+Category], 1 ; FileHandle
.text:0040223F                 call    _isatty
.text:00402244                 test    eax, eax
.text:00402246                 jnz     loc_40204C
.text:0040224C                 mov     [esp+0D8h+Locale], 8000h ; Mode
.text:00402254                 mov     [esp+0D8h+Category], 1 ; FileHandle
.text:0040225B                 call    _setmode
.text:00402260                 jmp     loc_40204C
.text:00402265 ; ---------------------------------------------------------------------------
.text:00402265
.text:00402265 loc_402265:                             ; CODE XREF: sub_401A30+606↑j
.text:00402265                 mov     [esp+0D8h+Locale], edi ; char *
.text:00402269                 mov     ebx, [ebp+var_70]
.text:0040226C                 mov     ecx, [ebp+var_6C]
.text:0040226F                 mov     eax, [ebp+var_98]
.text:00402275                 mov     [esp+0D8h+var_D0], ebx ; int
.text:00402279                 mov     dword ptr [esp+0D8h+var_CC], ecx ; int
.text:0040227D                 mov     [esp+0D8h+Category], eax ; char *
.text:00402280                 call    sub_4027F0
.text:00402285
.text:00402285 loc_402285:                             ; CODE XREF: sub_401A30+886↓j
.text:00402285                                         ; sub_401A30+8A8↓j
.text:00402285                 movzx   eax, al
.text:00402288                 jmp     loc_4020E5
.text:0040228D ; ---------------------------------------------------------------------------
.text:0040228D
.text:0040228D loc_40228D:                             ; CODE XREF: sub_401A30+5F9↑j
.text:0040228D                 cmp     [ebp+var_88], 0
.text:00402294                 jz      short loc_4022B8
.text:00402296                 mov     [esp+0D8h+Locale], edi ; char *
.text:0040229A                 mov     edx, [ebp+var_70]
.text:0040229D                 mov     ecx, [ebp+var_6C]
.text:004022A0                 mov     esi, [ebp+var_98]
.text:004022A6                 mov     [esp+0D8h+var_D0], edx ; int
.text:004022AA                 mov     dword ptr [esp+0D8h+var_CC], ecx ; int
.text:004022AE                 mov     [esp+0D8h+Category], esi ; char *
.text:004022B1                 call    sub_4034F0
.text:004022B6                 jmp     short loc_402285
.text:004022B8 ; ---------------------------------------------------------------------------
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_401A30+864↑j
.text:004022B8                 mov     [esp+0D8h+Locale], edi ; int
.text:004022BC                 mov     esi, [ebp+var_70]
.text:004022BF                 mov     ebx, [ebp+var_6C]
.text:004022C2                 mov     eax, [ebp+var_98]
.text:004022C8                 mov     [esp+0D8h+var_D0], esi ; int
.text:004022CC                 mov     dword ptr [esp+0D8h+var_CC], ebx ; int
.text:004022D0                 mov     [esp+0D8h+Category], eax ; char *
.text:004022D3                 call    sub_403300
.text:004022D8                 jmp     short loc_402285
.text:004022DA ; ---------------------------------------------------------------------------
.text:004022DA
.text:004022DA loc_4022DA:                             ; CODE XREF: sub_401A30+5D0↑j
.text:004022DA                 mov     eax, offset asc_40197B ; "\n"
.text:004022DF                 jmp     loc_40200B
.text:004022E4 ; ---------------------------------------------------------------------------
.text:004022E4
.text:004022E4 loc_4022E4:                             ; CODE XREF: sub_401A30+594↑j
.text:004022E4                 mov     [esp+0D8h+Locale], 0 ; OpenFlag
.text:004022EC                 mov     [esp+0D8h+Category], ebx ; FileName
.text:004022EF                 call    _open
.text:004022F4                 test    eax, eax
.text:004022F6                 mov     edi, eax
.text:004022F8                 jns     loc_401FE6
.text:004022FE                 mov     [esp+0D8h+Category], ebx ; char *
.text:00402301                 call    sub_406640
.text:00402306                 mov     [esp+0D8h+Category], offset aCannotOpenSFor ; "cannot open %s for reading"
.text:0040230D                 jmp     loc_402194
.text:00402312 ; ---------------------------------------------------------------------------
.text:00402312
.text:00402312 loc_402312:                             ; CODE XREF: sub_401A30+537↑j
.text:00402312                 mov     eax, [ebp+var_70]
.text:00402315                 lea     edx, [ebp+var_38]
.text:00402318                 mov     edi, [ebp+var_6C]
.text:0040231B                 mov     [esp+0D8h+var_D0], edx
.text:0040231F                 mov     [esp+0D8h+Category], eax
.text:00402322                 mov     [esp+0D8h+Locale], edi
.text:00402326                 call    sub_406530
.text:0040232B                 mov     [esp+0D8h+Category], offset aSNumberOfBytes ; "%s: number of bytes is too large"
.text:00402332                 mov     esi, eax
.text:00402334                 call    ds:libintl_gettext
.text:0040233A                 mov     dword ptr [esp+0D8h+var_CC], esi ; char
.text:0040233E                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402346                 mov     [esp+0D8h+Category], 1 ; Code
.text:0040234D                 mov     [esp+0D8h+var_D0], eax ; char *
.text:00402351                 call    sub_407AC0
.text:00402356                 jmp     loc_401F6D
.text:00402356 ; ---------------------------------------------------------------------------
.text:0040235B                 align 10h
.text:00402360
.text:00402360 loc_402360:                             ; CODE XREF: sub_401A30+AC↑j
.text:00402360                 movsx   ecx, byte ptr [edx+1]
.text:00402364                 sub     ecx, 30h ; '0'
.text:00402367                 cmp     ecx, 9
.text:0040236A                 ja      loc_401AF0
.text:00402370                 mov     [ebp+var_39], 0
.text:00402374                 lea     ebx, [edx+1]
.text:00402377                 mov     edi, ebx
.text:00402379
.text:00402379 loc_402379:                             ; CODE XREF: sub_401A30+956↓j
.text:00402379                 inc     ebx
.text:0040237A                 movzx   edx, byte ptr [ebx]
.text:0040237D                 movsx   esi, dl
.text:00402380                 sub     esi, 30h ; '0'
.text:00402383                 cmp     esi, 9
.text:00402386                 jbe     short loc_402379
.text:00402388                 test    dl, dl
.text:0040238A                 mov     esi, ebx
.text:0040238C                 jz      short loc_40240D
.text:0040238E
.text:0040238E loc_40238E:                             ; CODE XREF: sub_401A30+9DB↓j
.text:0040238E                 movsx   eax, dl
.text:00402391                 sub     eax, 62h ; 'b'  ; switch 21 cases
.text:00402394                 cmp     eax, 14h
.text:00402397                 ja      def_40239D      ; jumptable 0040239D default case, cases 100-106,110-112,114-117
.text:0040239D                 jmp     ds:jpt_40239D[eax*4] ; switch jump
.text:0040239D ; ---------------------------------------------------------------------------
.text:004023A4 jpt_40239D      dd offset loc_402592    ; DATA XREF: sub_401A30+96D↑r
.text:004023A4                 dd offset loc_4023F8    ; jump table for switch statement
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset loc_402592
.text:004023A4                 dd offset loc_402586
.text:004023A4                 dd offset loc_402592
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset loc_4025A1
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset def_40239D
.text:004023A4                 dd offset loc_4025DE
.text:004023F8 ; ---------------------------------------------------------------------------
.text:004023F8
.text:004023F8 loc_4023F8:                             ; CODE XREF: sub_401A30+96D↑j
.text:004023F8                                         ; DATA XREF: sub_401A30:jpt_40239D↑o
.text:004023F8                 mov     [ebp+var_88], 0 ; jumptable 0040239D case 99
.text:004023FF                 mov     [ebp+var_39], 0
.text:00402403
.text:00402403 loc_402403:                             ; CODE XREF: sub_401A30+B5D↓j
.text:00402403                                         ; sub_401A30+B6C↓j ...
.text:00402403                 inc     ebx
.text:00402404                 movzx   ecx, byte ptr [ebx]
.text:00402407                 test    cl, cl
.text:00402409                 mov     dl, cl
.text:0040240B                 jnz     short loc_40238E
.text:0040240D
.text:0040240D loc_40240D:                             ; CODE XREF: sub_401A30+95C↑j
.text:0040240D                 call    sub_4052D0
.text:00402412                 cmp     eax, 30DAFh
.text:00402417                 jg      loc_402517
.text:0040241D                 movzx   ecx, [ebp+var_39]
.text:00402421                 mov     [esi], cl
.text:00402423                 cmp     [ebp+var_39], 0
.text:00402427                 jz      short loc_40242D
.text:00402429                 mov     byte ptr [esi+1], 0
.text:0040242D
.text:0040242D loc_40242D:                             ; CODE XREF: sub_401A30+9F7↑j
.text:0040242D                 mov     [esp+0D8h+Str], offset aBkm ; "bkm"
.text:00402435                 lea     ebx, [ebp+var_48]
.text:00402438                 mov     dword ptr [esp+0D8h+var_CC], ebx ; int
.text:0040243C                 mov     [esp+0D8h+var_D0], 0Ah ; int
.text:00402444                 mov     [esp+0D8h+Locale], 0 ; int
.text:0040244C                 mov     [esp+0D8h+Category], edi ; int
.text:0040244F                 call    sub_4054B0
.text:00402454                 cmp     eax, 1
.text:00402457                 mov     esi, eax
.text:00402459                 jz      short loc_4024C4
.text:0040245B
.text:0040245B loc_40245B:                             ; CODE XREF: sub_401A30+AD9↓j
.text:0040245B                 test    esi, esi
.text:0040245D                 jz      short loc_402499
.text:0040245F                 cmp     [ebp+var_88], 0
.text:00402466                 jz      short loc_4024BB
.text:00402468                 mov     [esp+0D8h+Category], offset aInvalidNumberO_0 ; "invalid number of lines"
.text:0040246F
.text:0040246F loc_40246F:                             ; CODE XREF: sub_401A30+A92↓j
.text:0040246F                 call    ds:libintl_gettext
.text:00402475                 mov     dword ptr [esp+0D8h+var_CC], edi ; char
.text:00402479                 mov     [esp+0D8h+var_D0], offset aSS ; "%s: %s"
.text:00402481                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402489                 mov     [esp+0D8h+Str], eax
.text:0040248D                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402494                 call    sub_407AC0
.text:00402499
.text:00402499 loc_402499:                             ; CODE XREF: sub_401A30+A2D↑j
.text:00402499                 dec     [ebp+arg_0]
.text:0040249C                 mov     esi, [ebp+arg_4]
.text:0040249F                 mov     ecx, [ebp+var_48]
.text:004024A2                 mov     edi, [ebp+var_44]
.text:004024A5                 mov     edx, [esi]
.text:004024A7                 mov     [ebp+var_70], ecx
.text:004024AA                 mov     [ebp+var_6C], edi
.text:004024AD                 mov     [esi+4], edx
.text:004024B0                 add     esi, 4
.text:004024B3                 mov     [ebp+arg_4], esi
.text:004024B6                 jmp     loc_401AF0
.text:004024BB ; ---------------------------------------------------------------------------
.text:004024BB
.text:004024BB loc_4024BB:                             ; CODE XREF: sub_401A30+A36↑j
.text:004024BB                 mov     [esp+0D8h+Category], offset aInvalidNumberO ; "invalid number of bytes"
.text:004024C2                 jmp     short loc_40246F
.text:004024C4 ; ---------------------------------------------------------------------------
.text:004024C4
.text:004024C4 loc_4024C4:                             ; CODE XREF: sub_401A30+A29↑j
.text:004024C4                 cmp     [ebp+var_88], 0
.text:004024CB                 jz      short loc_40250E
.text:004024CD                 mov     [esp+0D8h+Category], offset aNumberOfLines ; "number of lines"
.text:004024D4
.text:004024D4 loc_4024D4:                             ; CODE XREF: sub_401A30+AE5↓j
.text:004024D4                 call    ds:libintl_gettext
.text:004024DA                 mov     [esp+0D8h+Category], offset aSSIsSoLargeTha ; "%s: %s is so large that it is not repre"...
.text:004024E1                 mov     ebx, eax
.text:004024E3                 call    ds:libintl_gettext
.text:004024E9                 mov     [esp+0D8h+Str], ebx
.text:004024ED                 mov     dword ptr [esp+0D8h+var_CC], edi ; char
.text:004024F1                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004024F9                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004024FD                 mov     [esp+0D8h+Category], 1 ; Code
.text:00402504                 call    sub_407AC0
.text:00402509                 jmp     loc_40245B
.text:0040250E ; ---------------------------------------------------------------------------
.text:0040250E
.text:0040250E loc_40250E:                             ; CODE XREF: sub_401A30+A9B↑j
.text:0040250E                 mov     [esp+0D8h+Category], offset aNumberOfBytes ; "number of bytes"
.text:00402515                 jmp     short loc_4024D4
.text:00402517 ; ---------------------------------------------------------------------------
.text:00402517
.text:00402517 loc_402517:                             ; CODE XREF: sub_401A30+9E7↑j
.text:00402517                 mov     [esp+0D8h+Category], offset aSOptionIsObsol ; "`-%s' option is obsolete; use `-%c %.*s"...
.text:0040251E                 sub     esi, edi
.text:00402520                 call    ds:libintl_gettext
.text:00402526                 mov     [esp+0D8h+var_C0], edi
.text:0040252A                 mov     edx, [ebp+var_5C]
.text:0040252D                 xor     ecx, ecx
.text:0040252F                 cmp     [ebp+var_39], 0
.text:00402533                 mov     [esp+0D8h+var_C4], esi
.text:00402537                 lea     ebx, ds:401280h[edx*4]
.text:0040253E                 mov     [esp+0D8h+var_B4], ebx
.text:00402542                 lea     ebx, [ebp+var_39]
.text:00402545                 mov     [esp+0D8h+var_B8], ebx
.text:00402549                 movzx   ebx, [ebp+var_88]
.text:00402550                 setnz   cl
.text:00402553                 mov     dword ptr [esp+0D8h+var_CC], edi ; char
.text:00402557                 mov     [esp+0D8h+var_D0], eax ; char *
.text:0040255B                 and     ebx, 1
.text:0040255E                 dec     ebx
.text:0040255F                 mov     [esp+0D8h+var_BC], ecx
.text:00402563                 and     ebx, 0FFFFFFF5h
.text:00402566                 add     ebx, 6Eh ; 'n'
.text:00402569                 mov     [esp+0D8h+Str], ebx
.text:0040256D                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:00402575                 mov     [esp+0D8h+Category], 0 ; Code
.text:0040257C                 call    sub_407AC0
.text:00402581                 jmp     loc_401C44
.text:00402586 ; ---------------------------------------------------------------------------
.text:00402586
.text:00402586 loc_402586:                             ; CODE XREF: sub_401A30+96D↑j
.text:00402586                                         ; DATA XREF: sub_401A30:jpt_40239D↑o
.text:00402586                 mov     [ebp+var_88], 1 ; jumptable 0040239D case 108
.text:0040258D                 jmp     loc_402403
.text:00402592 ; ---------------------------------------------------------------------------
.text:00402592
.text:00402592 loc_402592:                             ; CODE XREF: sub_401A30+96D↑j
.text:00402592                                         ; DATA XREF: sub_401A30:jpt_40239D↑o
.text:00402592                 mov     [ebp+var_88], 0 ; jumptable 0040239D cases 98,107,109
.text:00402599                 mov     [ebp+var_39], dl
.text:0040259C                 jmp     loc_402403
.text:004025A1 ; ---------------------------------------------------------------------------
.text:004025A1
.text:004025A1 loc_4025A1:                             ; CODE XREF: sub_401A30+96D↑j
.text:004025A1                                         ; DATA XREF: sub_401A30:jpt_40239D↑o
.text:004025A1                 mov     [ebp+var_5C], 2 ; jumptable 0040239D case 113
.text:004025A8                 jmp     loc_402403
.text:004025AD ; ---------------------------------------------------------------------------
.text:004025AD
.text:004025AD def_40239D:                             ; CODE XREF: sub_401A30+967↑j
.text:004025AD                                         ; sub_401A30+96D↑j
.text:004025AD                                         ; DATA XREF: ...
.text:004025AD                 mov     [esp+0D8h+Category], offset aUnrecognizedOp ; jumptable 0040239D default case, cases 100-106,110-112,114-117
.text:004025B4                 call    ds:libintl_gettext
.text:004025BA                 movsx   edi, byte ptr [ebx]
.text:004025BD                 mov     [esp+0D8h+Locale], 0 ; ErrorMessage
.text:004025C5                 mov     [esp+0D8h+Category], 0 ; Code
.text:004025CC                 mov     [esp+0D8h+var_D0], eax ; char *
.text:004025D0                 mov     dword ptr [esp+0D8h+var_CC], edi ; char
.text:004025D4                 call    sub_407AC0
.text:004025D9                 jmp     loc_401C44
.text:004025DE ; ---------------------------------------------------------------------------
.text:004025DE
.text:004025DE loc_4025DE:                             ; CODE XREF: sub_401A30+96D↑j
.text:004025DE                                         ; DATA XREF: sub_401A30:jpt_40239D↑o
.text:004025DE                 mov     [ebp+var_5C], 1 ; jumptable 0040239D case 118
.text:004025E5                 jmp     loc_402403
.text:004025E5 sub_401A30      endp
.text:004025E5
.text:004025E5 ; ---------------------------------------------------------------------------
.text:004025EA                 align 10h
.text:004025F0                 push    ebx
.text:004025F1                 sub     esp, 18h
.text:004025F4                 mov     ebx, [esp+20h]
.text:004025F8                 test    ebx, ebx
.text:004025FA                 jz      short loc_402630
.text:004025FC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402603                 call    ds:libintl_gettext
.text:00402609                 mov     edx, ds:_iob
.text:0040260F                 mov     ecx, ds:dword_4124E0
.text:00402615                 add     edx, 40h ; '@'
.text:00402618                 mov     [esp+8], ecx
.text:0040261C                 mov     [esp+4], eax
.text:00402620                 mov     [esp], edx
.text:00402623                 call    fprintf
.text:00402628
.text:00402628 loc_402628:                             ; CODE XREF: .text:0040275A↓j
.text:00402628                 mov     [esp], ebx
.text:0040262B                 call    exit
.text:00402630 ; ---------------------------------------------------------------------------
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: .text:004025FA↑j
.text:00402630                 mov     dword ptr [esp], offset stru_401498._base
.text:00402637                 call    ds:libintl_gettext
.text:0040263D                 mov     ecx, ds:dword_4124E0
.text:00402643                 mov     [esp], eax
.text:00402646                 mov     [esp+4], ecx
.text:0040264A                 call    printf
.text:0040264F                 mov     dword ptr [esp], offset aPrintTheFirst1 ; "Print the first 10 lines of each FILE t"...
.text:00402656                 call    ds:libintl_gettext
.text:0040265C                 mov     ecx, ds:_iob
.text:00402662                 add     ecx, 20h ; ' '
.text:00402665                 mov     [esp+4], ecx
.text:00402669                 mov     [esp], eax
.text:0040266C                 call    fputs
.text:00402671                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402678                 call    ds:libintl_gettext
.text:0040267E                 mov     ecx, ds:_iob
.text:00402684                 add     ecx, 20h ; ' '
.text:00402687                 mov     [esp+4], ecx
.text:0040268B                 mov     [esp], eax
.text:0040268E                 call    fputs
.text:00402693                 mov     dword ptr [esp], offset aCBytesNPrintTh ; "  -c, --bytes=[-]N         print the fi"...
.text:0040269A                 call    ds:libintl_gettext
.text:004026A0                 mov     ecx, ds:_iob
.text:004026A6                 add     ecx, 20h ; ' '
.text:004026A9                 mov     [esp+4], ecx
.text:004026AD                 mov     [esp], eax
.text:004026B0                 call    fputs
.text:004026B5                 mov     dword ptr [esp], offset aQQuietSilentNe ; "  -q, --quiet, --silent    never print "...
.text:004026BC                 call    ds:libintl_gettext
.text:004026C2                 mov     ecx, ds:_iob
.text:004026C8                 add     ecx, 20h ; ' '
.text:004026CB                 mov     [esp+4], ecx
.text:004026CF                 mov     [esp], eax
.text:004026D2                 call    fputs
.text:004026D7                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004026DE                 call    ds:libintl_gettext
.text:004026E4                 mov     ecx, ds:_iob
.text:004026EA                 add     ecx, 20h ; ' '
.text:004026ED                 mov     [esp+4], ecx
.text:004026F1                 mov     [esp], eax
.text:004026F4                 call    fputs
.text:004026F9                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402700                 call    ds:libintl_gettext
.text:00402706                 mov     ecx, ds:_iob
.text:0040270C                 add     ecx, 20h ; ' '
.text:0040270F                 mov     [esp+4], ecx
.text:00402713                 mov     [esp], eax
.text:00402716                 call    fputs
.text:0040271B                 mov     dword ptr [esp], offset aNMayHaveAMulti ; "\nN may have a multiplier suffix: b 512"...
.text:00402722                 call    ds:libintl_gettext
.text:00402728                 mov     ecx, ds:_iob
.text:0040272E                 add     ecx, 20h ; ' '
.text:00402731                 mov     [esp+4], ecx
.text:00402735                 mov     [esp], eax
.text:00402738                 call    fputs
.text:0040273D                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402744                 call    ds:libintl_gettext
.text:0040274A                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402752                 mov     [esp], eax
.text:00402755                 call    printf
.text:0040275A                 jmp     loc_402628
.text:0040275A ; ---------------------------------------------------------------------------
.text:0040275F aCannotLseekS   db 'cannot lseek %s',0  ; DATA XREF: sub_4027F0+130↓o
.text:0040276F aErrorReadingS  db 'error reading %s',0 ; DATA XREF: sub_4027F0+296↓o
.text:0040276F                                         ; sub_402B50+2E9↓o ...
.text:00402780 aSFileHasShrunk db '%s: file has shrunk too much',0
.text:00402780                                         ; DATA XREF: sub_4027F0+2B6↓o
.text:00402780                                         ; sub_402EE0+39B↓o
.text:0040279D aErrorWritingS  db 'error writing %s',0 ; DATA XREF: sub_4027F0+2D1↓o
.text:0040279D                                         ; sub_402EE0+3B6↓o
.text:004027AE                 align 20h
.text:004027C0 aSCannotLseekBa db '%s: cannot lseek back to original position',0
.text:004027C0                                         ; DATA XREF: sub_4027F0+2FA↓o
.text:004027EB                 align 10h
.text:004027F0
.text:004027F0 ; =============== S U B R O U T I N E =======================================
.text:004027F0
.text:004027F0
.text:004027F0 ; int __cdecl sub_4027F0(char *, char *, int, int)
.text:004027F0 sub_4027F0      proc near               ; CODE XREF: sub_401A30+850↑p
.text:004027F0
.text:004027F0 FileHandle      = dword ptr -2BCh
.text:004027F0 Offset          = qword ptr -2B8h
.text:004027F0 Origin          = dword ptr -2B0h
.text:004027F0 Stream          = dword ptr -2A0h
.text:004027F0 var_29C         = dword ptr -29Ch
.text:004027F0 var_298         = dword ptr -298h
.text:004027F0 var_294         = dword ptr -294h
.text:004027F0 var_290         = dword ptr -290h
.text:004027F0 Buffer          = byte ptr -28Ch
.text:004027F0 var_8C          = dword ptr -8Ch
.text:004027F0 var_10          = dword ptr -10h
.text:004027F0 var_C           = dword ptr -0Ch
.text:004027F0 var_8           = dword ptr -8
.text:004027F0 var_4           = dword ptr -4
.text:004027F0 arg_0           = dword ptr  4
.text:004027F0 arg_4           = dword ptr  8
.text:004027F0 arg_8           = dword ptr  0Ch
.text:004027F0 arg_C           = dword ptr  10h
.text:004027F0
.text:004027F0                 sub     esp, 2BCh
.text:004027F6                 mov     [esp+2BCh+var_8], edi
.text:004027FD                 mov     edi, [esp+2BCh+arg_4]
.text:00402804                 mov     [esp+2BCh+var_10], ebx
.text:0040280B                 mov     ebx, [esp+2BCh+arg_8]
.text:00402812                 mov     [esp+2BCh+var_C], esi
.text:00402819                 mov     esi, [esp+2BCh+arg_C]
.text:00402820                 mov     [esp+2BCh+var_4], ebp
.text:00402827                 mov     [esp+2BCh+FileHandle], edi ; FileHandle
.text:0040282A                 call    _isatty
.text:0040282F                 test    eax, eax
.text:00402831                 jz      loc_402B10
.text:00402837
.text:00402837 loc_402837:                             ; CODE XREF: sub_4027F0+33E↓j
.text:00402837                                         ; sub_4027F0+358↓j
.text:00402837                 cmp     ds:byte_412000, 0
.text:0040283E                 jnz     short loc_402870
.text:00402840                 mov     [esp+2BCh+FileHandle], edi ; char *
.text:00402843                 lea     edx, [esp+2BCh+var_8C]
.text:0040284A                 mov     dword ptr [esp+2BCh+Offset], edx ; int
.text:0040284E                 call    sub_407D60
.text:00402853                 test    eax, eax
.text:00402855                 jnz     short loc_402870
.text:00402857                 mov     edx, [esp+2BCh+var_8C]
.text:0040285E                 and     edx, 0F000h
.text:00402864                 cmp     edx, 8000h
.text:0040286A                 jz      short loc_4028B1
.text:0040286C                 lea     esi, [esi+0]
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_4027F0+4E↑j
.text:00402870                                         ; sub_4027F0+65↑j
.text:00402870                 mov     dword ptr [esp+2BCh+Offset+4], ebx ; int
.text:00402874                 mov     ecx, [esp+2BCh+arg_0]
.text:0040287B                 mov     [esp+2BCh+Origin], esi ; int
.text:0040287F                 mov     dword ptr [esp+2BCh+Offset], edi ; int
.text:00402883                 mov     [esp+2BCh+FileHandle], ecx ; char *
.text:00402886                 call    sub_403770
.text:0040288B                 movzx   eax, al
.text:0040288E
.text:0040288E loc_40288E:                             ; CODE XREF: sub_4027F0+162↓j
.text:0040288E                                         ; sub_4027F0+196↓j ...
.text:0040288E                 mov     ebx, [esp+2BCh+var_10]
.text:00402895                 mov     esi, [esp+2BCh+var_C]
.text:0040289C                 mov     edi, [esp+2BCh+var_8]
.text:004028A3                 mov     ebp, [esp+2BCh+var_4]
.text:004028AA                 add     esp, 2BCh
.text:004028B0                 retn
.text:004028B1 ; ---------------------------------------------------------------------------
.text:004028B1
.text:004028B1 loc_4028B1:                             ; CODE XREF: sub_4027F0+7A↑j
.text:004028B1                 mov     [esp+2BCh+Origin], 1 ; Origin
.text:004028B9                 mov     dword ptr [esp+2BCh+Offset], 0 ; Offset
.text:004028C1                 mov     dword ptr [esp+2BCh+Offset+4], 0
.text:004028C9                 mov     [esp+2BCh+FileHandle], edi ; FileHandle
.text:004028CC                 call    _lseeki64
.text:004028D1                 mov     [esp+2BCh+var_294], eax
.text:004028D5                 mov     [esp+2BCh+var_290], edx
.text:004028D9                 mov     eax, [esp+2BCh+var_290]
.text:004028DD                 mov     edx, [esp+2BCh+var_294]
.text:004028E1                 and     edx, eax
.text:004028E3                 inc     edx
.text:004028E4                 jz      short loc_402911
.text:004028E6                 mov     [esp+2BCh+Origin], 2 ; Origin
.text:004028EE                 mov     dword ptr [esp+2BCh+Offset], 0 ; Offset
.text:004028F6                 mov     dword ptr [esp+2BCh+Offset+4], 0
.text:004028FE                 mov     [esp+2BCh+FileHandle], edi ; FileHandle
.text:00402901                 call    _lseeki64
.text:00402906                 mov     ecx, edx
.text:00402908                 mov     ebp, eax
.text:0040290A                 and     ebp, ecx
.text:0040290C                 inc     ebp
.text:0040290D                 mov     edx, eax
.text:0040290F                 jnz     short loc_402957
.text:00402911
.text:00402911 loc_402911:                             ; CODE XREF: sub_4027F0+F4↑j
.text:00402911                 mov     ebx, [esp+2BCh+arg_0]
.text:00402918                 mov     [esp+2BCh+FileHandle], ebx ; char *
.text:0040291B                 call    sub_406640
.text:00402920                 mov     [esp+2BCh+FileHandle], offset aCannotLseekS ; "cannot lseek %s"
.text:00402927
.text:00402927 loc_402927:                             ; CODE XREF: sub_4027F0+29D↓j
.text:00402927                                         ; sub_4027F0+2BD↓j ...
.text:00402927                 mov     esi, eax
.text:00402929                 call    ds:libintl_gettext
.text:0040292F                 mov     edi, eax
.text:00402931                 call    _errno
.text:00402936                 mov     [esp+2BCh+Origin], esi ; char
.text:0040293A                 mov     dword ptr [esp+2BCh+Offset+4], edi ; char *
.text:0040293E                 mov     ebp, [eax]
.text:00402940                 mov     [esp+2BCh+FileHandle], 0 ; Code
.text:00402947                 mov     dword ptr [esp+2BCh+Offset], ebp ; ErrorMessage
.text:0040294B                 call    sub_407AC0
.text:00402950                 xor     eax, eax
.text:00402952                 jmp     loc_40288E
.text:00402957 ; ---------------------------------------------------------------------------
.text:00402957
.text:00402957 loc_402957:                             ; CODE XREF: sub_4027F0+11F↑j
.text:00402957                 sub     edx, [esp+2BCh+var_294]
.text:0040295B                 sbb     ecx, [esp+2BCh+var_290]
.text:0040295F                 mov     [esp+2BCh+var_29C], edx
.text:00402963                 mov     [esp+2BCh+var_298], ecx
.text:00402967                 mov     edx, [esp+2BCh+var_298]
.text:0040296B                 test    edx, edx
.text:0040296D                 js      loc_402AF6
.text:00402973
.text:00402973 loc_402973:                             ; CODE XREF: sub_4027F0+316↓j
.text:00402973                 cmp     [esp+2BCh+var_298], esi
.text:00402977                 ja      short loc_40298B
.text:00402979                 jb      short loc_402981
.text:0040297B                 cmp     [esp+2BCh+var_29C], ebx
.text:0040297F                 ja      short loc_40298B
.text:00402981
.text:00402981 loc_402981:                             ; CODE XREF: sub_4027F0+189↑j
.text:00402981                 mov     eax, 1
.text:00402986                 jmp     loc_40288E
.text:0040298B ; ---------------------------------------------------------------------------
.text:0040298B
.text:0040298B loc_40298B:                             ; CODE XREF: sub_4027F0+187↑j
.text:0040298B                                         ; sub_4027F0+18F↑j
.text:0040298B                 mov     dword ptr [esp+2BCh+Offset], 0 ; Offset
.text:00402993                 mov     ecx, [esp+2BCh+var_294]
.text:00402997                 mov     dword ptr [esp+2BCh+Offset+4], 0
.text:0040299F                 mov     [esp+2BCh+FileHandle], edi ; FileHandle
.text:004029A2                 mov     [esp+2BCh+Origin], ecx ; Origin
.text:004029A6                 call    _lseeki64
.text:004029AB                 and     eax, edx
.text:004029AD                 inc     eax
.text:004029AE                 jz      loc_402ADB
.text:004029B4                 mov     ecx, ds:_iob
.text:004029BA                 mov     edx, [esp+2BCh+var_29C]
.text:004029BE                 mov     ebp, [esp+2BCh+var_298]
.text:004029C2                 add     ecx, 20h ; ' '
.text:004029C5                 sub     edx, ebx
.text:004029C7                 mov     ebx, edx
.text:004029C9                 sbb     ebp, esi
.text:004029CB                 cmp     ebp, 0
.text:004029CE                 mov     esi, ebp
.text:004029D0                 mov     [esp+2BCh+Stream], ecx
.text:004029D4                 jbe     loc_402ACD
.text:004029DA
.text:004029DA loc_4029DA:                             ; CODE XREF: sub_4027F0+25F↓j
.text:004029DA                                         ; sub_4027F0+264↓j ...
.text:004029DA                 cmp     esi, 0
.text:004029DD                 mov     eax, ebx
.text:004029DF                 ja      short loc_4029E9
.text:004029E1                 cmp     ebx, 200h
.text:004029E7                 jbe     short loc_4029EE
.text:004029E9
.text:004029E9 loc_4029E9:                             ; CODE XREF: sub_4027F0+1EF↑j
.text:004029E9                 mov     eax, 200h
.text:004029EE
.text:004029EE loc_4029EE:                             ; CODE XREF: sub_4027F0+1F7↑j
.text:004029EE                 mov     dword ptr [esp+2BCh+Offset+4], eax
.text:004029F2                 lea     eax, [esp+2BCh+Buffer]
.text:004029F6                 mov     dword ptr [esp+2BCh+Offset], eax
.text:004029FA                 mov     [esp+2BCh+FileHandle], edi
.text:004029FD                 call    sub_4065A0
.text:00402A02                 cmp     eax, 0FFFFFFFFh
.text:00402A05                 mov     ebp, eax
.text:00402A07                 mov     edx, 1
.text:00402A0C                 jz      short loc_402A58
.text:00402A0E                 xor     ecx, ecx
.text:00402A10                 sub     ebx, eax
.text:00402A12                 sbb     esi, ecx
.text:00402A14                 test    eax, eax
.text:00402A16                 jnz     short loc_402A23
.text:00402A18                 mov     ecx, esi
.text:00402A1A                 mov     edx, 3
.text:00402A1F                 or      ecx, ebx
.text:00402A21                 jnz     short loc_402A58
.text:00402A23
.text:00402A23 loc_402A23:                             ; CODE XREF: sub_4027F0+226↑j
.text:00402A23                 mov     dword ptr [esp+2BCh+Offset+4], ebp ; ElementCount
.text:00402A27                 mov     eax, [esp+2BCh+Stream]
.text:00402A2B                 lea     edx, [esp+2BCh+Buffer]
.text:00402A2F                 mov     [esp+2BCh+FileHandle], edx ; Buffer
.text:00402A32                 mov     dword ptr [esp+2BCh+Offset], 1 ; ElementSize
.text:00402A3A                 mov     [esp+2BCh+Origin], eax ; Stream
.text:00402A3E                 call    fwrite
.text:00402A43                 cmp     eax, ebp
.text:00402A45                 mov     edx, 2
.text:00402A4A                 jb      short loc_402A58
.text:00402A4C                 cmp     esi, 0
.text:00402A4F                 ja      short loc_4029DA
.text:00402A51                 cmp     ebx, 0
.text:00402A54                 ja      short loc_4029DA
.text:00402A56
.text:00402A56 loc_402A56:                             ; CODE XREF: sub_4027F0+2E6↓j
.text:00402A56                 xor     edx, edx
.text:00402A58
.text:00402A58 loc_402A58:                             ; CODE XREF: sub_4027F0+21C↑j
.text:00402A58                                         ; sub_4027F0+231↑j ...
.text:00402A58                 test    edx, edx
.text:00402A5A                 mov     eax, 1
.text:00402A5F                 jz      loc_40288E
.text:00402A65                 cmp     edx, 2
.text:00402A68                 jz      short loc_402AB2
.text:00402A6A                 cmp     edx, 2
.text:00402A6D                 ja      short loc_402A92
.text:00402A6F                 dec     edx
.text:00402A70                 jz      short loc_402A77
.text:00402A72
.text:00402A72 loc_402A72:                             ; CODE XREF: sub_4027F0+2A5↓j
.text:00402A72                 call    abort
.text:00402A77 ; ---------------------------------------------------------------------------
.text:00402A77
.text:00402A77 loc_402A77:                             ; CODE XREF: sub_4027F0+280↑j
.text:00402A77                 mov     edi, [esp+2BCh+arg_0]
.text:00402A7E                 mov     [esp+2BCh+FileHandle], edi ; char *
.text:00402A81                 call    sub_406640
.text:00402A86                 mov     [esp+2BCh+FileHandle], offset aErrorReadingS ; "error reading %s"
.text:00402A8D                 jmp     loc_402927
.text:00402A92 ; ---------------------------------------------------------------------------
.text:00402A92
.text:00402A92 loc_402A92:                             ; CODE XREF: sub_4027F0+27D↑j
.text:00402A92                 cmp     edx, 3
.text:00402A95                 jnz     short loc_402A72
.text:00402A97                 mov     esi, [esp+2BCh+arg_0]
.text:00402A9E                 mov     [esp+2BCh+FileHandle], esi ; char *
.text:00402AA1                 call    sub_406640
.text:00402AA6                 mov     [esp+2BCh+FileHandle], offset aSFileHasShrunk ; "%s: file has shrunk too much"
.text:00402AAD                 jmp     loc_402927
.text:00402AB2 ; ---------------------------------------------------------------------------
.text:00402AB2
.text:00402AB2 loc_402AB2:                             ; CODE XREF: sub_4027F0+278↑j
.text:00402AB2                 mov     ebx, [esp+2BCh+arg_0]
.text:00402AB9                 mov     [esp+2BCh+FileHandle], ebx ; char *
.text:00402ABC                 call    sub_406640
.text:00402AC1                 mov     [esp+2BCh+FileHandle], offset aErrorWritingS ; "error writing %s"
.text:00402AC8                 jmp     loc_402927
.text:00402ACD ; ---------------------------------------------------------------------------
.text:00402ACD
.text:00402ACD loc_402ACD:                             ; CODE XREF: sub_4027F0+1E4↑j
.text:00402ACD                 cmp     edx, 0
.text:00402AD0                 ja      loc_4029DA
.text:00402AD6                 jmp     loc_402A56
.text:00402ADB ; ---------------------------------------------------------------------------
.text:00402ADB
.text:00402ADB loc_402ADB:                             ; CODE XREF: sub_4027F0+1BE↑j
.text:00402ADB                 mov     esi, [esp+2BCh+arg_0]
.text:00402AE2                 mov     [esp+2BCh+FileHandle], esi ; char *
.text:00402AE5                 call    sub_406640
.text:00402AEA                 mov     [esp+2BCh+FileHandle], offset aSCannotLseekBa ; "%s: cannot lseek back to original posit"...
.text:00402AF1                 jmp     loc_402927
.text:00402AF6 ; ---------------------------------------------------------------------------
.text:00402AF6
.text:00402AF6 loc_402AF6:                             ; CODE XREF: sub_4027F0+17D↑j
.text:00402AF6                 mov     [esp+2BCh+var_29C], 0
.text:00402AFE                 mov     [esp+2BCh+var_298], 0
.text:00402B06                 jmp     loc_402973
.text:00402B06 ; ---------------------------------------------------------------------------
.text:00402B0B                 align 10h
.text:00402B10
.text:00402B10 loc_402B10:                             ; CODE XREF: sub_4027F0+41↑j
.text:00402B10                 mov     dword ptr [esp+2BCh+Offset], 8000h ; Mode
.text:00402B18                 mov     [esp+2BCh+FileHandle], edi ; FileHandle
.text:00402B1B                 call    _setmode
.text:00402B20                 mov     [esp+2BCh+FileHandle], 1 ; FileHandle
.text:00402B27                 call    _isatty
.text:00402B2C                 test    eax, eax
.text:00402B2E                 jnz     loc_402837
.text:00402B34                 mov     dword ptr [esp+2BCh+Offset], 8000h ; Mode
.text:00402B3C                 mov     [esp+2BCh+FileHandle], 1 ; FileHandle
.text:00402B43                 call    _setmode
.text:00402B48                 jmp     loc_402837
.text:00402B48 sub_4027F0      endp
.text:00402B48
.text:00402B48 ; ---------------------------------------------------------------------------
.text:00402B4D                 align 10h
.text:00402B50
.text:00402B50 ; =============== S U B R O U T I N E =======================================
.text:00402B50
.text:00402B50
.text:00402B50 ; int __cdecl sub_402B50(char *, int, int, int)
.text:00402B50 sub_402B50      proc near               ; CODE XREF: sub_401A30+7F1↑p
.text:00402B50
.text:00402B50 Buf             = dword ptr -3Ch
.text:00402B50 Val             = dword ptr -38h
.text:00402B50 MaxCount        = dword ptr -34h
.text:00402B50 Stream          = dword ptr -30h
.text:00402B50 var_1D          = byte ptr -1Dh
.text:00402B50 var_1C          = dword ptr -1Ch
.text:00402B50 var_18          = dword ptr -18h
.text:00402B50 Buffer          = dword ptr -14h
.text:00402B50 arg_0           = dword ptr  4
.text:00402B50 arg_4           = dword ptr  8
.text:00402B50 arg_8           = dword ptr  0Ch
.text:00402B50 arg_C           = dword ptr  10h
.text:00402B50
.text:00402B50                 push    ebp
.text:00402B51                 push    edi
.text:00402B52                 push    esi
.text:00402B53                 push    ebx
.text:00402B54                 sub     esp, 2Ch
.text:00402B57                 mov     edi, [esp+3Ch+arg_8]
.text:00402B5B                 mov     [esp+3Ch+var_1C], 0
.text:00402B63                 mov     ebp, [esp+3Ch+arg_C]
.text:00402B67                 mov     [esp+3Ch+var_1D], 1
.text:00402B6C                 mov     [esp+3Ch+Buf], 20Ch ; size_t
.text:00402B73                 call    sub_406240
.text:00402B78                 mov     [esp+3Ch+Buffer], eax
.text:00402B7C                 xor     ecx, ecx
.text:00402B7E                 xor     edx, edx
.text:00402B80                 mov     [eax+204h], ecx
.text:00402B86                 xor     ecx, ecx
.text:00402B88                 mov     [esp+3Ch+var_18], eax
.text:00402B8C                 mov     [eax+200h], edx
.text:00402B92                 mov     [eax+208h], ecx
.text:00402B98
.text:00402B98 loc_402B98:                             ; CODE XREF: sub_402B50+10E↓j
.text:00402B98                                         ; sub_402B50+118↓j
.text:00402B98                 mov     [esp+3Ch+Buf], 20Ch ; size_t
.text:00402B9F                 call    sub_406240
.text:00402BA4                 mov     ebx, eax
.text:00402BA6
.text:00402BA6 loc_402BA6:                             ; CODE XREF: sub_402B50+161↓j
.text:00402BA6                                         ; sub_402B50+198↓j
.text:00402BA6                 mov     [esp+3Ch+MaxCount], 200h
.text:00402BAE                 mov     eax, [esp+3Ch+arg_4]
.text:00402BB2                 mov     [esp+3Ch+Val], ebx
.text:00402BB6                 mov     [esp+3Ch+Buf], eax
.text:00402BB9                 call    sub_4065A0
.text:00402BBE                 test    eax, eax
.text:00402BC0                 mov     esi, eax
.text:00402BC2                 jz      loc_402CED
.text:00402BC8                 cmp     eax, 0FFFFFFFFh
.text:00402BCB                 jz      loc_402CED
.text:00402BD1                 mov     [ebx+200h], eax
.text:00402BD7                 xor     edx, edx
.text:00402BD9                 xor     ecx, ecx
.text:00402BDB                 mov     [ebx+208h], edx
.text:00402BE1                 lea     esi, [eax+ebx]
.text:00402BE4                 mov     edx, ebx
.text:00402BE6                 mov     [ebx+204h], ecx
.text:00402BEC                 lea     esi, [esi+0]
.text:00402BF0
.text:00402BF0 loc_402BF0:                             ; CODE XREF: sub_402B50+C5↓j
.text:00402BF0                 mov     [esp+3Ch+Buf], edx ; Buf
.text:00402BF3                 mov     ecx, esi
.text:00402BF5                 sub     ecx, edx
.text:00402BF7                 mov     [esp+3Ch+MaxCount], ecx ; MaxCount
.text:00402BFB                 mov     [esp+3Ch+Val], 0Ah ; Val
.text:00402C03                 call    memchr
.text:00402C08                 test    eax, eax
.text:00402C0A                 mov     edx, eax
.text:00402C0C                 jz      short loc_402C17
.text:00402C0E                 inc     dword ptr [ebx+204h]
.text:00402C14                 inc     edx
.text:00402C15                 jmp     short loc_402BF0
.text:00402C17 ; ---------------------------------------------------------------------------
.text:00402C17
.text:00402C17 loc_402C17:                             ; CODE XREF: sub_402B50+BC↑j
.text:00402C17                 mov     esi, [esp+3Ch+var_18]
.text:00402C1B                 mov     edx, [ebx+204h]
.text:00402C21                 mov     ecx, [ebx+200h]
.text:00402C27                 add     [esp+3Ch+var_1C], edx
.text:00402C2B                 mov     edx, [esi+200h]
.text:00402C31                 lea     esi, [edx+ecx]
.text:00402C34                 cmp     esi, 1FFh
.text:00402C3A                 jbe     short loc_402CB6
.text:00402C3C                 mov     esi, [esp+3Ch+Buffer]
.text:00402C40                 mov     edx, [esp+3Ch+var_18]
.text:00402C44                 mov     [esp+3Ch+var_18], ebx
.text:00402C48                 mov     eax, [esp+3Ch+var_1C]
.text:00402C4C                 mov     ecx, [esi+204h]
.text:00402C52                 mov     [edx+208h], ebx
.text:00402C58                 xor     ebx, ebx
.text:00402C5A                 sub     eax, ecx
.text:00402C5C                 cmp     ebp, ebx
.text:00402C5E                 ja      loc_402B98
.text:00402C64                 jb      short loc_402C6E
.text:00402C66                 cmp     edi, eax
.text:00402C68                 jnb     loc_402B98
.text:00402C6E
.text:00402C6E loc_402C6E:                             ; CODE XREF: sub_402B50+114↑j
.text:00402C6E                 mov     edx, ds:_iob
.text:00402C74                 mov     ebx, [esp+3Ch+Buffer]
.text:00402C78                 add     edx, 20h ; ' '
.text:00402C7B                 mov     [esp+3Ch+Stream], edx ; Stream
.text:00402C7F                 mov     esi, [ebx+200h]
.text:00402C85                 mov     [esp+3Ch+Buf], ebx ; Buffer
.text:00402C88                 mov     [esp+3Ch+Val], 1 ; ElementSize
.text:00402C90                 mov     [esp+3Ch+MaxCount], esi ; ElementCount
.text:00402C94                 call    fwrite
.text:00402C99                 mov     ebx, [esp+3Ch+Buffer]
.text:00402C9D                 mov     ecx, [ebx+204h]
.text:00402CA3                 mov     eax, [ebx+208h]
.text:00402CA9                 sub     [esp+3Ch+var_1C], ecx
.text:00402CAD                 mov     [esp+3Ch+Buffer], eax
.text:00402CB1                 jmp     loc_402BA6
.text:00402CB6 ; ---------------------------------------------------------------------------
.text:00402CB6
.text:00402CB6 loc_402CB6:                             ; CODE XREF: sub_402B50+EA↑j
.text:00402CB6                 mov     [esp+3Ch+MaxCount], ecx ; Size
.text:00402CBA                 mov     esi, [esp+3Ch+var_18]
.text:00402CBE                 mov     [esp+3Ch+Val], ebx ; Src
.text:00402CC2                 add     esi, edx
.text:00402CC4                 mov     [esp+3Ch+Buf], esi ; void *
.text:00402CC7                 call    memcpy
.text:00402CCC                 mov     ecx, [esp+3Ch+var_18]
.text:00402CD0                 mov     edx, [ebx+200h]
.text:00402CD6                 mov     esi, [ebx+204h]
.text:00402CDC                 add     [ecx+200h], edx
.text:00402CE2                 add     [ecx+204h], esi
.text:00402CE8                 jmp     loc_402BA6
.text:00402CED ; ---------------------------------------------------------------------------
.text:00402CED
.text:00402CED loc_402CED:                             ; CODE XREF: sub_402B50+72↑j
.text:00402CED                                         ; sub_402B50+7B↑j
.text:00402CED                 mov     [esp+3Ch+Buf], ebx ; Block
.text:00402CF0                 call    free
.text:00402CF5                 inc     esi
.text:00402CF6                 jz      loc_402E2D
.text:00402CFC                 mov     edx, [esp+3Ch+var_18]
.text:00402D00                 mov     eax, [edx+200h]
.text:00402D06                 test    eax, eax
.text:00402D08                 jz      short loc_402D1B
.text:00402D0A                 cmp     byte ptr [eax+edx-1], 0Ah
.text:00402D0F                 jz      short loc_402D1B
.text:00402D11                 inc     dword ptr [edx+204h]
.text:00402D17                 inc     [esp+3Ch+var_1C]
.text:00402D1B
.text:00402D1B loc_402D1B:                             ; CODE XREF: sub_402B50+1B8↑j
.text:00402D1B                                         ; sub_402B50+1BF↑j
.text:00402D1B                 mov     ebx, [esp+3Ch+Buffer]
.text:00402D1F                 xor     esi, esi
.text:00402D21                 mov     eax, [esp+3Ch+var_1C]
.text:00402D25                 mov     edx, [ebx+204h]
.text:00402D2B                 sub     eax, edx
.text:00402D2D                 cmp     ebp, esi
.text:00402D2F                 jb      short loc_402D40
.text:00402D31                 ja      short loc_402D8F
.text:00402D33                 cmp     edi, eax
.text:00402D35                 jnb     short loc_402D8F
.text:00402D37                 mov     esi, esi
.text:00402D39                 lea     edi, [edi+0]
.text:00402D40
.text:00402D40 loc_402D40:                             ; CODE XREF: sub_402B50+1DF↑j
.text:00402D40                                         ; sub_402B50+237↓j ...
.text:00402D40                 mov     esi, ds:_iob
.text:00402D46                 add     esi, 20h ; ' '
.text:00402D49                 mov     [esp+3Ch+Stream], esi ; Stream
.text:00402D4D                 mov     ecx, [ebx+200h]
.text:00402D53                 mov     [esp+3Ch+Buf], ebx ; Buffer
.text:00402D56                 mov     [esp+3Ch+Val], 1 ; ElementSize
.text:00402D5E                 mov     [esp+3Ch+MaxCount], ecx ; ElementCount
.text:00402D62                 call    fwrite
.text:00402D67                 mov     edx, [ebx+204h]
.text:00402D6D                 xor     ecx, ecx
.text:00402D6F                 mov     ebx, [ebx+208h]
.text:00402D75                 sub     [esp+3Ch+var_1C], edx
.text:00402D79                 mov     esi, [ebx+204h]
.text:00402D7F                 mov     eax, [esp+3Ch+var_1C]
.text:00402D83                 sub     eax, esi
.text:00402D85                 cmp     ebp, ecx
.text:00402D87                 jb      short loc_402D40
.text:00402D89                 ja      short loc_402D8F
.text:00402D8B                 cmp     edi, eax
.text:00402D8D                 jb      short loc_402D40
.text:00402D8F
.text:00402D8F loc_402D8F:                             ; CODE XREF: sub_402B50+1E1↑j
.text:00402D8F                                         ; sub_402B50+1E5↑j ...
.text:00402D8F                 xor     ecx, ecx
.text:00402D91                 mov     eax, [esp+3Ch+var_1C]
.text:00402D95                 cmp     ebp, ecx
.text:00402D97                 ja      short loc_402E00
.text:00402D99                 jb      short loc_402D9F
.text:00402D9B                 cmp     edi, eax
.text:00402D9D                 jnb     short loc_402E00
.text:00402D9F
.text:00402D9F loc_402D9F:                             ; CODE XREF: sub_402B50+249↑j
.text:00402D9F                 mov     esi, [esp+3Ch+var_1C]
.text:00402DA3                 mov     edx, ebx
.text:00402DA5                 mov     ebp, [ebx+200h]
.text:00402DAB                 sub     esi, edi
.text:00402DAD                 mov     edi, ebx
.text:00402DAF                 add     edi, ebp
.text:00402DB1
.text:00402DB1 loc_402DB1:                             ; CODE XREF: sub_402B50+28B↓j
.text:00402DB1                 test    esi, esi
.text:00402DB3                 jz      short loc_402DDD
.text:00402DB5                 mov     [esp+3Ch+Buf], edx ; Buf
.text:00402DB8                 mov     ecx, edi
.text:00402DBA                 sub     ecx, edx
.text:00402DBC                 mov     [esp+3Ch+MaxCount], ecx ; MaxCount
.text:00402DC0                 mov     [esp+3Ch+Val], 0Ah ; Val
.text:00402DC8                 call    memchr
.text:00402DCD                 test    eax, eax
.text:00402DCF                 mov     edx, eax
.text:00402DD1                 jz      short loc_402DDD
.text:00402DD3                 inc     dword ptr [ebx+204h]
.text:00402DD9                 inc     edx
.text:00402DDA                 dec     esi
.text:00402DDB                 jmp     short loc_402DB1
.text:00402DDD ; ---------------------------------------------------------------------------
.text:00402DDD
.text:00402DDD loc_402DDD:                             ; CODE XREF: sub_402B50+263↑j
.text:00402DDD                                         ; sub_402B50+281↑j
.text:00402DDD                 mov     [esp+3Ch+Val], 1 ; ElementSize
.text:00402DE5                 mov     edi, ds:_iob
.text:00402DEB                 sub     edx, ebx
.text:00402DED                 mov     [esp+3Ch+MaxCount], edx ; ElementCount
.text:00402DF1                 mov     [esp+3Ch+Buf], ebx ; Buffer
.text:00402DF4                 add     edi, 20h ; ' '
.text:00402DF7                 mov     [esp+3Ch+Stream], edi ; Stream
.text:00402DFB                 call    fwrite
.text:00402E00
.text:00402E00 loc_402E00:                             ; CODE XREF: sub_402B50+247↑j
.text:00402E00                                         ; sub_402B50+24D↑j ...
.text:00402E00                 mov     ebx, [esp+3Ch+Buffer]
.text:00402E04                 test    ebx, ebx
.text:00402E06                 jz      short loc_402E20
.text:00402E08                 mov     eax, [esp+3Ch+Buffer]
.text:00402E0C                 mov     esi, [eax+208h]
.text:00402E12                 mov     [esp+3Ch+Buf], eax ; Block
.text:00402E15                 call    free
.text:00402E1A                 mov     [esp+3Ch+Buffer], esi
.text:00402E1E                 jmp     short loc_402E00
.text:00402E20 ; ---------------------------------------------------------------------------
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402B50+2B6↑j
.text:00402E20                 movzx   eax, [esp+3Ch+var_1D]
.text:00402E25                 add     esp, 2Ch
.text:00402E28                 pop     ebx
.text:00402E29                 pop     esi
.text:00402E2A                 pop     edi
.text:00402E2B                 pop     ebp
.text:00402E2C                 retn
.text:00402E2D ; ---------------------------------------------------------------------------
.text:00402E2D
.text:00402E2D loc_402E2D:                             ; CODE XREF: sub_402B50+1A6↑j
.text:00402E2D                 mov     ecx, [esp+3Ch+arg_0]
.text:00402E31                 mov     [esp+3Ch+Buf], ecx ; char *
.text:00402E34                 call    sub_406640
.text:00402E39                 mov     [esp+3Ch+Buf], offset aErrorReadingS ; "error reading %s"
.text:00402E40                 mov     ebx, eax
.text:00402E42                 call    ds:libintl_gettext
.text:00402E48                 mov     ebp, eax
.text:00402E4A                 call    _errno
.text:00402E4F                 mov     [esp+3Ch+Stream], ebx ; char
.text:00402E53                 mov     [esp+3Ch+MaxCount], ebp ; char *
.text:00402E57                 mov     edi, [eax]
.text:00402E59                 mov     [esp+3Ch+Buf], 0 ; Code
.text:00402E60                 mov     [esp+3Ch+Val], edi ; ErrorMessage
.text:00402E64                 call    sub_407AC0
.text:00402E69                 mov     [esp+3Ch+var_1D], 0
.text:00402E6E                 jmp     short loc_402E00
.text:00402E6E sub_402B50      endp
.text:00402E6E
.text:00402E6E ; ---------------------------------------------------------------------------
.text:00402E70 aSCannotSeekToO db '%s: cannot seek to offset %s',0
.text:00402E70                                         ; DATA XREF: sub_402EE0+1C5↓o
.text:00402E8D                 align 20h
.text:00402EA0 aSUnableToResto db '%s: unable to restore file pointer to initial offset',0
.text:00402EA0                                         ; DATA XREF: sub_402EE0+3F8↓o
.text:00402ED5                 align 10h
.text:00402EE0
.text:00402EE0 ; =============== S U B R O U T I N E =======================================
.text:00402EE0
.text:00402EE0
.text:00402EE0 ; int __cdecl sub_402EE0(char *, int, int, int, int, int, int, int)
.text:00402EE0 sub_402EE0      proc near               ; CODE XREF: sub_401A30+7C9↑p
.text:00402EE0
.text:00402EE0 FileHandle      = dword ptr -49Ch
.text:00402EE0 Offset          = qword ptr -498h
.text:00402EE0 Origin          = dword ptr -490h
.text:00402EE0 var_48C         = dword ptr -48Ch
.text:00402EE0 Stream          = dword ptr -470h
.text:00402EE0 var_46C         = qword ptr -46Ch
.text:00402EE0 var_464         = dword ptr -464h
.text:00402EE0 var_460         = dword ptr -460h
.text:00402EE0 var_45C         = byte ptr -45Ch
.text:00402EE0 Buffer          = byte ptr -43Ch
.text:00402EE0 var_23C         = byte ptr -23Ch
.text:00402EE0 var_21D         = byte ptr -21Dh
.text:00402EE0 var_21C         = byte ptr -21Ch
.text:00402EE0 arg_0           = dword ptr  4
.text:00402EE0 arg_4           = dword ptr  8
.text:00402EE0 arg_8           = dword ptr  0Ch
.text:00402EE0 arg_C           = dword ptr  10h
.text:00402EE0 arg_10          = dword ptr  14h
.text:00402EE0 arg_14          = dword ptr  18h
.text:00402EE0 arg_18          = dword ptr  1Ch
.text:00402EE0 arg_1C          = dword ptr  20h
.text:00402EE0
.text:00402EE0                 push    ebp
.text:00402EE1                 push    edi
.text:00402EE2                 push    esi
.text:00402EE3                 push    ebx
.text:00402EE4                 sub     esp, 48Ch
.text:00402EEA                 mov     esi, [esp+49Ch+arg_8]
.text:00402EF1                 mov     ecx, [esp+49Ch+arg_C]
.text:00402EF8                 mov     edx, [esp+49Ch+arg_10]
.text:00402EFF                 mov     edi, [esp+49Ch+arg_1C]
.text:00402F06                 mov     [esp+49Ch+var_464], esi
.text:00402F0A                 mov     ebx, [esp+49Ch+arg_14]
.text:00402F11                 mov     esi, [esp+49Ch+arg_18]
.text:00402F18                 mov     [esp+49Ch+var_460], ecx
.text:00402F1C                 mov     ebp, edi
.text:00402F1E                 mov     dword ptr [esp+49Ch+var_46C], edx
.text:00402F22                 mov     ecx, esi
.text:00402F24                 sub     ecx, edx
.text:00402F26                 sbb     ebp, ebx
.text:00402F28                 mov     eax, ecx
.text:00402F2A                 test    ebp, ebp
.text:00402F2C                 mov     dword ptr [esp+49Ch+var_46C+4], ebx
.text:00402F30                 mov     edx, ebp
.text:00402F32                 js      loc_4032E5
.text:00402F38
.text:00402F38 loc_402F38:                             ; CODE XREF: sub_402EE0+40D↓j
.text:00402F38                 shrd    eax, edx, 9
.text:00402F3C                 mov     ebx, ecx
.text:00402F3E                 shl     eax, 9
.text:00402F41                 sub     ebx, eax
.text:00402F43                 jnz     short loc_402F4A
.text:00402F45                 mov     ebx, 200h
.text:00402F4A
.text:00402F4A loc_402F4A:                             ; CODE XREF: sub_402EE0+63↑j
.text:00402F4A                 mov     [esp+49Ch+Origin], 0 ; Origin
.text:00402F52                 mov     eax, [esp+49Ch+arg_4]
.text:00402F59                 xor     ebp, ebp
.text:00402F5B                 sub     esi, ebx
.text:00402F5D                 sbb     edi, ebp
.text:00402F5F                 mov     dword ptr [esp+49Ch+Offset], esi ; Offset
.text:00402F63                 mov     dword ptr [esp+49Ch+Offset+4], edi
.text:00402F67                 mov     [esp+49Ch+FileHandle], eax ; FileHandle
.text:00402F6A                 call    _lseeki64
.text:00402F6F                 test    edx, edx
.text:00402F71                 lea     eax, [esp+49Ch+var_23C]
.text:00402F78                 js      loc_403095
.text:00402F7E                 mov     dword ptr [esp+49Ch+Offset+4], ebx
.text:00402F82                 lea     ecx, [esp+49Ch+var_21C]
.text:00402F89                 mov     ebx, [esp+49Ch+arg_4]
.text:00402F90                 mov     dword ptr [esp+49Ch+Offset], ecx
.text:00402F94                 mov     [esp+49Ch+FileHandle], ebx
.text:00402F97                 call    sub_4065A0
.text:00402F9C                 cmp     eax, 0FFFFFFFFh
.text:00402F9F                 mov     ebx, eax
.text:00402FA1                 jz      loc_40304E
.text:00402FA7                 test    eax, eax
.text:00402FA9                 jz      short loc_402FC0
.text:00402FAB                 cmp     [esp+eax+49Ch+var_21D], 0Ah
.text:00402FB3                 jz      short loc_402FC0
.text:00402FB5                 add     [esp+49Ch+var_464], 0FFFFFFFFh
.text:00402FBA                 adc     [esp+49Ch+var_460], 0FFFFFFFFh
.text:00402FBF                 nop
.text:00402FC0
.text:00402FC0 loc_402FC0:                             ; CODE XREF: sub_402EE0+C9↑j
.text:00402FC0                                         ; sub_402EE0+D3↑j ...
.text:00402FC0                 test    ebx, ebx
.text:00402FC2                 mov     ebp, ebx
.text:00402FC4                 jnz     loc_4030E2
.text:00402FCA
.text:00402FCA loc_402FCA:                             ; CODE XREF: sub_402EE0+21F↓j
.text:00402FCA                                         ; sub_402EE0+24B↓j
.text:00402FCA                 mov     ebx, dword ptr [esp+49Ch+var_46C+4]
.text:00402FCE                 mov     ecx, 1
.text:00402FD3                 mov     ebp, dword ptr [esp+49Ch+var_46C]
.text:00402FD7                 xor     ebx, edi
.text:00402FD9                 xor     ebp, esi
.text:00402FDB                 or      ebx, ebp
.text:00402FDD                 jz      short loc_403041
.text:00402FDF                 mov     [esp+49Ch+Origin], 0 ; Origin
.text:00402FE7                 mov     ecx, [esp+49Ch+arg_4]
.text:00402FEE                 add     esi, 0FFFFFE00h
.text:00402FF4                 adc     edi, 0FFFFFFFFh
.text:00402FF7                 mov     dword ptr [esp+49Ch+Offset], esi ; Offset
.text:00402FFB                 mov     dword ptr [esp+49Ch+Offset+4], edi
.text:00402FFF                 mov     [esp+49Ch+FileHandle], ecx ; FileHandle
.text:00403002                 call    _lseeki64
.text:00403007                 test    edx, edx
.text:00403009                 js      loc_403091
.text:0040300F                 mov     dword ptr [esp+49Ch+Offset+4], 200h
.text:00403017                 mov     edx, [esp+49Ch+arg_4]
.text:0040301E                 lea     eax, [esp+49Ch+var_21C]
.text:00403025                 mov     dword ptr [esp+49Ch+Offset], eax
.text:00403029                 mov     [esp+49Ch+FileHandle], edx
.text:0040302C                 call    sub_4065A0
.text:00403031                 cmp     eax, 0FFFFFFFFh
.text:00403034                 mov     ebx, eax
.text:00403036                 jz      short loc_40304E
.text:00403038                 test    eax, eax
.text:0040303A                 jnz     short loc_402FC0
.text:0040303C
.text:0040303C loc_40303C:                             ; CODE XREF: sub_402EE0+367↓j
.text:0040303C                 mov     ecx, 1
.text:00403041
.text:00403041 loc_403041:                             ; CODE XREF: sub_402EE0+FD↑j
.text:00403041                                         ; sub_402EE0+1AF↓j
.text:00403041                 add     esp, 48Ch
.text:00403047                 mov     eax, ecx
.text:00403049                 pop     ebx
.text:0040304A                 pop     esi
.text:0040304B                 pop     edi
.text:0040304C                 pop     ebp
.text:0040304D                 retn
.text:0040304E ; ---------------------------------------------------------------------------
.text:0040304E
.text:0040304E loc_40304E:                             ; CODE XREF: sub_402EE0+C1↑j
.text:0040304E                                         ; sub_402EE0+156↑j ...
.text:0040304E                 mov     esi, [esp+49Ch+arg_0]
.text:00403055                 mov     [esp+49Ch+FileHandle], esi ; char *
.text:00403058                 call    sub_406640
.text:0040305D                 mov     [esp+49Ch+FileHandle], offset aErrorReadingS ; "error reading %s"
.text:00403064
.text:00403064 loc_403064:                             ; CODE XREF: sub_402EE0+3A2↓j
.text:00403064                                         ; sub_402EE0+3BD↓j
.text:00403064                 mov     esi, eax
.text:00403066                 call    ds:libintl_gettext
.text:0040306C                 mov     edi, eax
.text:0040306E                 call    _errno
.text:00403073                 mov     [esp+49Ch+Origin], esi ; char
.text:00403077                 mov     dword ptr [esp+49Ch+Offset+4], edi ; char *
.text:0040307B
.text:0040307B loc_40307B:                             ; CODE XREF: sub_402EE0+400↓j
.text:0040307B                 mov     ebp, [eax]
.text:0040307D                 mov     [esp+49Ch+FileHandle], 0 ; Code
.text:00403084                 mov     dword ptr [esp+49Ch+Offset], ebp ; ErrorMessage
.text:00403088                 call    sub_407AC0
.text:0040308D
.text:0040308D loc_40308D:                             ; CODE XREF: sub_402EE0+200↓j
.text:0040308D                 xor     ecx, ecx
.text:0040308F                 jmp     short loc_403041
.text:00403091 ; ---------------------------------------------------------------------------
.text:00403091
.text:00403091 loc_403091:                             ; CODE XREF: sub_402EE0+129↑j
.text:00403091                 lea     eax, [esp+49Ch+var_45C]
.text:00403095
.text:00403095 loc_403095:                             ; CODE XREF: sub_402EE0+98↑j
.text:00403095                 mov     dword ptr [esp+49Ch+Offset], edi
.text:00403099                 mov     dword ptr [esp+49Ch+Offset+4], eax
.text:0040309D                 mov     [esp+49Ch+FileHandle], esi
.text:004030A0                 call    sub_406140
.text:004030A5                 mov     [esp+49Ch+FileHandle], offset aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:004030AC                 mov     ebp, eax
.text:004030AE                 call    ds:libintl_gettext
.text:004030B4                 mov     edi, eax
.text:004030B6                 call    _errno
.text:004030BB                 mov     [esp+49Ch+var_48C], ebp
.text:004030BF                 mov     ebx, [esp+49Ch+arg_0]
.text:004030C6                 mov     dword ptr [esp+49Ch+Offset+4], edi ; char *
.text:004030CA                 mov     [esp+49Ch+Origin], ebx ; char
.text:004030CE                 mov     edx, [eax]
.text:004030D0                 mov     [esp+49Ch+FileHandle], 0 ; Code
.text:004030D7                 mov     dword ptr [esp+49Ch+Offset], edx ; ErrorMessage
.text:004030DB                 call    sub_407AC0
.text:004030E0                 jmp     short loc_40308D
.text:004030E2 ; ---------------------------------------------------------------------------
.text:004030E2
.text:004030E2 loc_4030E2:                             ; CODE XREF: sub_402EE0+E4↑j
.text:004030E2                                         ; sub_402EE0+249↓j
.text:004030E2                 mov     dword ptr [esp+49Ch+Offset+4], ebp
.text:004030E6                 lea     eax, [esp+49Ch+var_21C]
.text:004030ED                 mov     dword ptr [esp+49Ch+Offset], 0Ah
.text:004030F5                 mov     [esp+49Ch+FileHandle], eax
.text:004030F8                 call    sub_40B0F0
.text:004030FD                 test    eax, eax
.text:004030FF                 jz      loc_402FCA
.text:00403105                 mov     ebp, eax
.text:00403107                 lea     eax, [esp+49Ch+var_21C]
.text:0040310E                 sub     ebp, eax
.text:00403110                 add     [esp+49Ch+var_464], 0FFFFFFFFh
.text:00403115                 mov     ecx, [esp+49Ch+var_464]
.text:00403119                 adc     [esp+49Ch+var_460], 0FFFFFFFFh
.text:0040311E                 mov     ebx, [esp+49Ch+var_460]
.text:00403122                 and     ecx, ebx
.text:00403124                 inc     ecx
.text:00403125                 jz      short loc_403130
.text:00403127                 test    ebp, ebp
.text:00403129                 jnz     short loc_4030E2
.text:0040312B                 jmp     loc_402FCA
.text:00403130 ; ---------------------------------------------------------------------------
.text:00403130
.text:00403130 loc_403130:                             ; CODE XREF: sub_402EE0+245↑j
.text:00403130                 cmp     dword ptr [esp+49Ch+var_46C+4], edi
.text:00403134                 jg      loc_40321C
.text:0040313A                 jl      short loc_403146
.text:0040313C                 cmp     dword ptr [esp+49Ch+var_46C], esi
.text:00403140                 jnb     loc_40321C
.text:00403146
.text:00403146 loc_403146:                             ; CODE XREF: sub_402EE0+25A↑j
.text:00403146                 mov     [esp+49Ch+Origin], 0 ; Origin
.text:0040314E                 mov     edx, dword ptr [esp+49Ch+var_46C]
.text:00403152                 mov     ebx, dword ptr [esp+49Ch+var_46C+4]
.text:00403156                 mov     ecx, [esp+49Ch+arg_4]
.text:0040315D                 mov     dword ptr [esp+49Ch+Offset], edx ; Offset
.text:00403161                 mov     dword ptr [esp+49Ch+Offset+4], ebx
.text:00403165                 mov     [esp+49Ch+FileHandle], ecx ; FileHandle
.text:00403168                 call    _lseeki64
.text:0040316D                 test    edx, edx
.text:0040316F                 js      loc_4032BE
.text:00403175                 mov     ecx, ds:_iob
.text:0040317B                 mov     ebx, esi
.text:0040317D                 mov     esi, edi
.text:0040317F                 add     ecx, 20h ; ' '
.text:00403182                 sub     ebx, dword ptr [esp+49Ch+var_46C]
.text:00403186                 mov     [esp+49Ch+Stream], ecx
.text:0040318A                 sbb     esi, dword ptr [esp+49Ch+var_46C+4]
.text:0040318E                 cmp     esi, 0
.text:00403191                 jbe     loc_4032B0
.text:00403197                 mov     esi, esi
.text:00403199                 lea     edi, [edi+0]
.text:004031A0
.text:004031A0 loc_4031A0:                             ; CODE XREF: sub_402EE0+335↓j
.text:004031A0                                         ; sub_402EE0+33A↓j ...
.text:004031A0                 cmp     esi, 0
.text:004031A3                 mov     eax, ebx
.text:004031A5                 ja      short loc_4031AF
.text:004031A7                 cmp     ebx, 200h
.text:004031AD                 jbe     short loc_4031B4
.text:004031AF
.text:004031AF loc_4031AF:                             ; CODE XREF: sub_402EE0+2C5↑j
.text:004031AF                 mov     eax, 200h
.text:004031B4
.text:004031B4 loc_4031B4:                             ; CODE XREF: sub_402EE0+2CD↑j
.text:004031B4                 mov     dword ptr [esp+49Ch+Offset+4], eax
.text:004031B8                 mov     edi, [esp+49Ch+arg_4]
.text:004031BF                 lea     eax, [esp+49Ch+Buffer]
.text:004031C3                 mov     dword ptr [esp+49Ch+Offset], eax
.text:004031C7                 mov     [esp+49Ch+FileHandle], edi
.text:004031CA                 call    sub_4065A0
.text:004031CF                 cmp     eax, 0FFFFFFFFh
.text:004031D2                 mov     edi, eax
.text:004031D4                 jz      loc_4032A9
.text:004031DA                 xor     ecx, ecx
.text:004031DC                 sub     ebx, eax
.text:004031DE                 sbb     esi, ecx
.text:004031E0                 test    eax, eax
.text:004031E2                 jnz     short loc_4031EE
.text:004031E4                 mov     eax, esi
.text:004031E6                 or      eax, ebx
.text:004031E8                 jnz     loc_4032A2
.text:004031EE
.text:004031EE loc_4031EE:                             ; CODE XREF: sub_402EE0+302↑j
.text:004031EE                 mov     dword ptr [esp+49Ch+Offset+4], edi ; ElementCount
.text:004031F2                 mov     edx, [esp+49Ch+Stream]
.text:004031F6                 lea     ecx, [esp+49Ch+Buffer]
.text:004031FA                 mov     dword ptr [esp+49Ch+Offset], 1 ; ElementSize
.text:00403202                 mov     [esp+49Ch+FileHandle], ecx ; Buffer
.text:00403205                 mov     [esp+49Ch+Origin], edx ; Stream
.text:00403209                 call    fwrite
.text:0040320E                 cmp     eax, edi
.text:00403210                 jb      short loc_40324C
.text:00403212                 cmp     esi, 0
.text:00403215                 ja      short loc_4031A0
.text:00403217                 cmp     ebx, 0
.text:0040321A                 ja      short loc_4031A0
.text:0040321C
.text:0040321C loc_40321C:                             ; CODE XREF: sub_402EE0+254↑j
.text:0040321C                                         ; sub_402EE0+260↑j ...
.text:0040321C                 mov     dword ptr [esp+49Ch+Offset], 1 ; ElementSize
.text:00403224                 mov     edx, ds:_iob
.text:0040322A                 lea     ecx, [ebp+1]
.text:0040322D                 mov     dword ptr [esp+49Ch+Offset+4], ecx ; ElementCount
.text:00403231                 lea     eax, [esp+49Ch+var_21C]
.text:00403238                 mov     [esp+49Ch+FileHandle], eax ; Buffer
.text:0040323B                 add     edx, 20h ; ' '
.text:0040323E                 mov     [esp+49Ch+Origin], edx ; Stream
.text:00403242                 call    fwrite
.text:00403247                 jmp     loc_40303C
.text:0040324C ; ---------------------------------------------------------------------------
.text:0040324C
.text:0040324C loc_40324C:                             ; CODE XREF: sub_402EE0+330↑j
.text:0040324C                 mov     eax, 2
.text:00403251
.text:00403251 loc_403251:                             ; CODE XREF: sub_402EE0+3C7↓j
.text:00403251                                         ; sub_402EE0+3CE↓j
.text:00403251                 cmp     eax, 2
.text:00403254                 jz      short loc_403287
.text:00403256                 cmp     eax, 2
.text:00403259                 ja      short loc_403267
.text:0040325B                 dec     eax
.text:0040325C                 jz      loc_40304E
.text:00403262
.text:00403262 loc_403262:                             ; CODE XREF: sub_402EE0+38A↓j
.text:00403262                 call    abort
.text:00403267 ; ---------------------------------------------------------------------------
.text:00403267
.text:00403267 loc_403267:                             ; CODE XREF: sub_402EE0+379↑j
.text:00403267                 cmp     eax, 3
.text:0040326A                 jnz     short loc_403262
.text:0040326C                 mov     ebx, [esp+49Ch+arg_0]
.text:00403273                 mov     [esp+49Ch+FileHandle], ebx ; char *
.text:00403276                 call    sub_406640
.text:0040327B                 mov     [esp+49Ch+FileHandle], offset aSFileHasShrunk ; "%s: file has shrunk too much"
.text:00403282                 jmp     loc_403064
.text:00403287 ; ---------------------------------------------------------------------------
.text:00403287
.text:00403287 loc_403287:                             ; CODE XREF: sub_402EE0+374↑j
.text:00403287                 mov     ebp, [esp+49Ch+arg_0]
.text:0040328E                 mov     [esp+49Ch+FileHandle], ebp ; char *
.text:00403291                 call    sub_406640
.text:00403296                 mov     [esp+49Ch+FileHandle], offset aErrorWritingS ; "error writing %s"
.text:0040329D                 jmp     loc_403064
.text:004032A2 ; ---------------------------------------------------------------------------
.text:004032A2
.text:004032A2 loc_4032A2:                             ; CODE XREF: sub_402EE0+308↑j
.text:004032A2                 mov     eax, 3
.text:004032A7                 jmp     short loc_403251
.text:004032A9 ; ---------------------------------------------------------------------------
.text:004032A9
.text:004032A9 loc_4032A9:                             ; CODE XREF: sub_402EE0+2F4↑j
.text:004032A9                 mov     eax, 1
.text:004032AE                 jmp     short loc_403251
.text:004032B0 ; ---------------------------------------------------------------------------
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_402EE0+2B1↑j
.text:004032B0                 cmp     ebx, 0
.text:004032B3                 ja      loc_4031A0
.text:004032B9                 jmp     loc_40321C
.text:004032BE ; ---------------------------------------------------------------------------
.text:004032BE
.text:004032BE loc_4032BE:                             ; CODE XREF: sub_402EE0+28F↑j
.text:004032BE                 mov     esi, [esp+49Ch+arg_0]
.text:004032C5                 mov     [esp+49Ch+FileHandle], esi ; char *
.text:004032C8                 call    sub_406640
.text:004032CD                 mov     edi, eax
.text:004032CF                 call    _errno
.text:004032D4                 mov     [esp+49Ch+Origin], edi
.text:004032D8                 mov     dword ptr [esp+49Ch+Offset+4], offset aSUnableToResto ; "%s: unable to restore file pointer to i"...
.text:004032E0                 jmp     loc_40307B
.text:004032E5 ; ---------------------------------------------------------------------------
.text:004032E5
.text:004032E5 loc_4032E5:                             ; CODE XREF: sub_402EE0+52↑j
.text:004032E5                 add     eax, 1FFh
.text:004032EA                 adc     edx, 0
.text:004032ED                 jmp     loc_402F38
.text:004032ED sub_402EE0      endp
.text:004032ED
.text:004032ED ; ---------------------------------------------------------------------------
.text:004032F2 aWriteError     db 'write error',0      ; DATA XREF: sub_403300:loc_4033F6↓o
.text:004032F2                                         ; sub_4034F0+125↓o ...
.text:004032FE                 align 10h
.text:00403300
.text:00403300 ; =============== S U B R O U T I N E =======================================
.text:00403300
.text:00403300
.text:00403300 ; int __cdecl sub_403300(char *, int, int, int)
.text:00403300 sub_403300      proc near               ; CODE XREF: sub_401A30+8A3↑p
.text:00403300
.text:00403300 FileHandle      = dword ptr -23Ch
.text:00403300 ElementSize     = dword ptr -238h
.text:00403300 ElementCount    = dword ptr -234h
.text:00403300 Stream          = dword ptr -230h
.text:00403300 var_224         = dword ptr -224h
.text:00403300 var_220         = dword ptr -220h
.text:00403300 Buffer          = byte ptr -21Ch
.text:00403300 var_10          = dword ptr -10h
.text:00403300 var_C           = dword ptr -0Ch
.text:00403300 var_8           = dword ptr -8
.text:00403300 var_4           = dword ptr -4
.text:00403300 arg_0           = dword ptr  4
.text:00403300 arg_4           = dword ptr  8
.text:00403300 arg_8           = dword ptr  0Ch
.text:00403300 arg_C           = dword ptr  10h
.text:00403300
.text:00403300                 sub     esp, 23Ch
.text:00403306                 mov     [esp+23Ch+var_4], ebp
.text:0040330D                 mov     ebp, [esp+23Ch+arg_4]
.text:00403314                 mov     [esp+23Ch+var_10], ebx
.text:0040331B                 mov     ebx, 200h
.text:00403320                 mov     [esp+23Ch+var_C], esi
.text:00403327                 mov     esi, [esp+23Ch+arg_8]
.text:0040332E                 mov     [esp+23Ch+var_8], edi
.text:00403335                 mov     edi, [esp+23Ch+arg_C]
.text:0040333C                 mov     [esp+23Ch+FileHandle], ebp ; FileHandle
.text:0040333F                 call    _isatty
.text:00403344                 test    eax, eax
.text:00403346                 jz      loc_403470
.text:0040334C
.text:0040334C loc_40334C:                             ; CODE XREF: sub_403300+F1↓j
.text:0040334C                                         ; sub_403300+193↓j ...
.text:0040334C                 mov     edx, edi
.text:0040334E                 or      edx, esi
.text:00403350                 jz      short loc_403390
.text:00403352                 xor     ecx, ecx
.text:00403354                 cmp     edi, ecx
.text:00403356                 ja      short loc_403360
.text:00403358                 jb      short loc_40335E
.text:0040335A                 cmp     esi, ebx
.text:0040335C                 jnb     short loc_403360
.text:0040335E
.text:0040335E loc_40335E:                             ; CODE XREF: sub_403300+58↑j
.text:0040335E                 mov     ebx, esi
.text:00403360
.text:00403360 loc_403360:                             ; CODE XREF: sub_403300+56↑j
.text:00403360                                         ; sub_403300+5C↑j
.text:00403360                 mov     [esp+23Ch+ElementCount], ebx
.text:00403364                 lea     eax, [esp+23Ch+Buffer]
.text:00403368                 mov     [esp+23Ch+ElementSize], eax
.text:0040336C                 mov     [esp+23Ch+FileHandle], ebp
.text:0040336F                 call    sub_4065A0
.text:00403374                 mov     [esp+23Ch+var_220], eax
.text:00403378                 inc     eax
.text:00403379                 jz      loc_403428
.text:0040337F                 mov     edx, [esp+23Ch+var_220]
.text:00403383                 test    edx, edx
.text:00403385                 jnz     short loc_4033B8
.text:00403387                 mov     esi, esi
.text:00403389                 lea     edi, [edi+0]
.text:00403390
.text:00403390 loc_403390:                             ; CODE XREF: sub_403300+50↑j
.text:00403390                 mov     eax, 1
.text:00403395
.text:00403395 loc_403395:                             ; CODE XREF: sub_403300+169↓j
.text:00403395                 mov     ebx, [esp+23Ch+var_10]
.text:0040339C                 mov     esi, [esp+23Ch+var_C]
.text:004033A3                 mov     edi, [esp+23Ch+var_8]
.text:004033AA                 mov     ebp, [esp+23Ch+var_4]
.text:004033B1                 add     esp, 23Ch
.text:004033B7                 retn
.text:004033B8 ; ---------------------------------------------------------------------------
.text:004033B8
.text:004033B8 loc_4033B8:                             ; CODE XREF: sub_403300+85↑j
.text:004033B8                 mov     [esp+23Ch+ElementSize], 1 ; ElementSize
.text:004033C0                 mov     ecx, ds:_iob
.text:004033C6                 mov     edx, [esp+23Ch+var_220]
.text:004033CA                 add     ecx, 20h ; ' '
.text:004033CD                 mov     [esp+23Ch+Stream], ecx ; char
.text:004033D1                 lea     ecx, [esp+23Ch+Buffer]
.text:004033D5                 mov     [esp+23Ch+ElementCount], edx ; ElementCount
.text:004033D9                 mov     [esp+23Ch+FileHandle], ecx ; Buffer
.text:004033DC                 call    fwrite
.text:004033E1                 cmp     eax, [esp+23Ch+var_220]
.text:004033E5                 jb      short loc_4033F6
.text:004033E7
.text:004033E7 loc_4033E7:                             ; CODE XREF: sub_403300+126↓j
.text:004033E7                 mov     edx, [esp+23Ch+var_220]
.text:004033EB                 xor     ecx, ecx
.text:004033ED                 sub     esi, edx
.text:004033EF                 sbb     edi, ecx
.text:004033F1                 jmp     loc_40334C
.text:004033F6 ; ---------------------------------------------------------------------------
.text:004033F6
.text:004033F6 loc_4033F6:                             ; CODE XREF: sub_403300+E5↑j
.text:004033F6                 mov     [esp+23Ch+FileHandle], offset aWriteError ; "write error"
.text:004033FD                 call    ds:libintl_gettext
.text:00403403                 mov     [esp+23Ch+var_224], eax
.text:00403407                 call    _errno
.text:0040340C                 mov     ecx, [esp+23Ch+var_224]
.text:00403410                 mov     [esp+23Ch+ElementCount], ecx ; char *
.text:00403414                 mov     edx, [eax]
.text:00403416                 mov     [esp+23Ch+FileHandle], 1 ; Code
.text:0040341D                 mov     [esp+23Ch+ElementSize], edx ; ErrorMessage
.text:00403421                 call    sub_407AC0
.text:00403426                 jmp     short loc_4033E7
.text:00403428 ; ---------------------------------------------------------------------------
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_403300+79↑j
.text:00403428                 mov     esi, [esp+23Ch+arg_0]
.text:0040342F                 mov     [esp+23Ch+FileHandle], esi ; char *
.text:00403432                 call    sub_406640
.text:00403437                 mov     [esp+23Ch+FileHandle], offset aErrorReadingS ; "error reading %s"
.text:0040343E                 mov     edi, eax
.text:00403440                 call    ds:libintl_gettext
.text:00403446                 mov     ebp, eax
.text:00403448                 call    _errno
.text:0040344D                 mov     [esp+23Ch+Stream], edi ; char
.text:00403451                 mov     [esp+23Ch+ElementCount], ebp ; char *
.text:00403455                 mov     ebx, [eax]
.text:00403457                 mov     [esp+23Ch+FileHandle], 0 ; Code
.text:0040345E                 mov     [esp+23Ch+ElementSize], ebx ; ErrorMessage
.text:00403462                 call    sub_407AC0
.text:00403467                 xor     eax, eax
.text:00403469                 jmp     loc_403395
.text:00403469 ; ---------------------------------------------------------------------------
.text:0040346E                 align 10h
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_403300+46↑j
.text:00403470                 mov     [esp+23Ch+ElementSize], 8000h ; Mode
.text:00403478                 mov     [esp+23Ch+FileHandle], ebp ; FileHandle
.text:0040347B                 call    _setmode
.text:00403480                 mov     ecx, ds:_iob
.text:00403486                 mov     edx, [ecx+30h]
.text:00403489                 mov     [esp+23Ch+FileHandle], edx ; FileHandle
.text:0040348C                 call    _isatty
.text:00403491                 test    eax, eax
.text:00403493                 jnz     loc_40334C
.text:00403499                 mov     [esp+23Ch+ElementSize], 8000h ; Mode
.text:004034A1                 mov     ecx, ds:_iob
.text:004034A7                 mov     edx, [ecx+30h]
.text:004034AA                 mov     [esp+23Ch+FileHandle], edx ; FileHandle
.text:004034AD                 call    _setmode
.text:004034B2                 jmp     loc_40334C
.text:004034B2 sub_403300      endp
.text:004034B2
.text:004034B2 ; ---------------------------------------------------------------------------
.text:004034B7                 align 10h
.text:004034C0 aCannotRepositi db 'cannot reposition file pointer for %s',0
.text:004034C0                                         ; DATA XREF: sub_4034F0+19C↓o
.text:004034E6                 align 10h
.text:004034F0
.text:004034F0 ; =============== S U B R O U T I N E =======================================
.text:004034F0
.text:004034F0
.text:004034F0 ; int __cdecl sub_4034F0(char *, char *, int, int)
.text:004034F0 sub_4034F0      proc near               ; CODE XREF: sub_401A30+881↑p
.text:004034F0
.text:004034F0 FileHandle      = dword ptr -2ACh
.text:004034F0 Offset          = qword ptr -2A8h
.text:004034F0 Origin          = dword ptr -2A0h
.text:004034F0 var_294         = byte ptr -294h
.text:004034F0 ErrorMessage    = dword ptr -290h
.text:004034F0 var_28C         = dword ptr -28Ch
.text:004034F0 Buffer          = byte ptr -21Ch
.text:004034F0 var_1C          = byte ptr -1Ch
.text:004034F0 var_10          = dword ptr -10h
.text:004034F0 var_C           = dword ptr -0Ch
.text:004034F0 var_8           = dword ptr -8
.text:004034F0 var_4           = dword ptr -4
.text:004034F0 arg_0           = dword ptr  4
.text:004034F0 arg_4           = dword ptr  8
.text:004034F0 arg_8           = dword ptr  0Ch
.text:004034F0 arg_C           = dword ptr  10h
.text:004034F0
.text:004034F0                 sub     esp, 2ACh
.text:004034F6                 mov     [esp+2ACh+var_10], ebx
.text:004034FD                 mov     ebx, [esp+2ACh+arg_4]
.text:00403504                 mov     [esp+2ACh+var_C], esi
.text:0040350B                 mov     esi, [esp+2ACh+arg_8]
.text:00403512                 mov     [esp+2ACh+var_8], edi
.text:00403519                 mov     edi, [esp+2ACh+arg_C]
.text:00403520                 mov     [esp+2ACh+var_4], ebp
.text:00403527                 mov     [esp+2ACh+FileHandle], ebx ; FileHandle
.text:0040352A                 call    _isatty
.text:0040352F                 test    eax, eax
.text:00403531                 jz      loc_403706
.text:00403537
.text:00403537 loc_403537:                             ; CODE XREF: sub_4034F0+11F↓j
.text:00403537                                         ; sub_4034F0+14F↓j ...
.text:00403537                 mov     eax, edi
.text:00403539                 or      eax, esi
.text:0040353B
.text:0040353B loc_40353B:                             ; CODE XREF: sub_4034F0+25C↓j
.text:0040353B                 jz      short loc_403570
.text:0040353D                 mov     dword ptr [esp+2ACh+Offset+4], 200h
.text:00403545                 lea     eax, [esp+2ACh+Buffer]
.text:0040354C                 xor     ebp, ebp
.text:0040354E                 mov     dword ptr [esp+2ACh+Offset], eax
.text:00403552                 mov     [esp+2ACh+FileHandle], ebx
.text:00403555                 call    sub_4065A0
.text:0040355A                 cmp     eax, 0FFFFFFFFh
.text:0040355D                 mov     edx, eax
.text:0040355F                 jz      loc_4036C0
.text:00403565                 test    eax, eax
.text:00403567                 jnz     short loc_403598
.text:00403569                 lea     esi, [esi+0]
.text:00403570
.text:00403570 loc_403570:                             ; CODE XREF: sub_4034F0:loc_40353B↑j
.text:00403570                 mov     eax, 1
.text:00403575
.text:00403575 loc_403575:                             ; CODE XREF: sub_4034F0+211↓j
.text:00403575                 mov     ebx, [esp+2ACh+var_10]
.text:0040357C                 mov     esi, [esp+2ACh+var_C]
.text:00403583                 mov     edi, [esp+2ACh+var_8]
.text:0040358A                 mov     ebp, [esp+2ACh+var_4]
.text:00403591                 add     esp, 2ACh
.text:00403597                 retn
.text:00403598 ; ---------------------------------------------------------------------------
.text:00403598
.text:00403598 loc_403598:                             ; CODE XREF: sub_4034F0+77↑j
.text:00403598                                         ; sub_4034F0+BE↓j ...
.text:00403598                 cmp     ebp, edx
.text:0040359A                 jnb     short loc_4035E5
.text:0040359C                 lea     ecx, [esp+2ACh+var_1C]
.text:004035A3                 lea     eax, [ecx+ebp]
.text:004035A6                 inc     ebp
.text:004035A7                 cmp     byte ptr [eax-200h], 0Ah
.text:004035AE                 jnz     short loc_403598
.text:004035B0                 add     esi, 0FFFFFFFFh
.text:004035B3                 adc     edi, 0FFFFFFFFh
.text:004035B6                 mov     ecx, edi
.text:004035B8                 or      ecx, esi
.text:004035BA                 jnz     short loc_403598
.text:004035BC                 mov     [esp+2ACh+Origin], 1 ; Origin
.text:004035C4                 sub     edx, ebp
.text:004035C6                 xor     ecx, ecx
.text:004035C8                 mov     [esp+2ACh+FileHandle], ebx ; FileHandle
.text:004035CB                 mov     eax, edx
.text:004035CD                 neg     eax
.text:004035CF                 adc     ecx, 0
.text:004035D2                 neg     ecx
.text:004035D4                 mov     dword ptr [esp+2ACh+Offset], eax ; Offset
.text:004035D8                 mov     dword ptr [esp+2ACh+Offset+4], ecx
.text:004035DC                 call    _lseeki64
.text:004035E1                 test    edx, edx
.text:004035E3                 js      short loc_403644
.text:004035E5
.text:004035E5 loc_4035E5:                             ; CODE XREF: sub_4034F0+AA↑j
.text:004035E5                                         ; sub_4034F0+183↓j ...
.text:004035E5                 mov     dword ptr [esp+2ACh+Offset+4], ebp ; ElementCount
.text:004035E9                 mov     edx, ds:_iob
.text:004035EF                 lea     ecx, [esp+2ACh+Buffer]
.text:004035F6                 mov     dword ptr [esp+2ACh+Offset], 1 ; ElementSize
.text:004035FE                 mov     [esp+2ACh+FileHandle], ecx ; Buffer
.text:00403601                 add     edx, 20h ; ' '
.text:00403604                 mov     [esp+2ACh+Origin], edx ; char
.text:00403608                 call    fwrite
.text:0040360D                 cmp     eax, ebp
.text:0040360F                 jnb     loc_403537
.text:00403615                 mov     [esp+2ACh+FileHandle], offset aWriteError ; "write error"
.text:0040361C                 call    ds:libintl_gettext
.text:00403622                 mov     ebp, eax
.text:00403624                 call    _errno
.text:00403629                 mov     dword ptr [esp+2ACh+Offset+4], ebp ; char *
.text:0040362D                 mov     ebp, [eax]
.text:0040362F                 mov     [esp+2ACh+FileHandle], 1 ; Code
.text:00403636                 mov     dword ptr [esp+2ACh+Offset], ebp ; ErrorMessage
.text:0040363A                 call    sub_407AC0
.text:0040363F                 jmp     loc_403537
.text:00403644 ; ---------------------------------------------------------------------------
.text:00403644
.text:00403644 loc_403644:                             ; CODE XREF: sub_4034F0+F3↑j
.text:00403644                 call    _errno
.text:00403649                 mov     ecx, [eax]
.text:0040364B                 lea     edx, [esp+2ACh+var_28C]
.text:0040364F                 mov     dword ptr [esp+2ACh+Offset], edx ; int
.text:00403653                 mov     [esp+2ACh+FileHandle], ebx ; char *
.text:00403656                 mov     [esp+2ACh+ErrorMessage], ecx
.text:0040365A                 call    sub_407D60
.text:0040365F                 test    eax, eax
.text:00403661                 jnz     short loc_403679
.text:00403663                 mov     edx, [esp+2ACh+var_28C]
.text:00403667                 and     edx, 0F000h
.text:0040366D                 cmp     edx, 8000h
.text:00403673                 jnz     loc_4035E5
.text:00403679
.text:00403679 loc_403679:                             ; CODE XREF: sub_4034F0+171↑j
.text:00403679                 mov     eax, [esp+2ACh+arg_0]
.text:00403680                 mov     [esp+2ACh+FileHandle], eax ; char *
.text:00403683                 call    sub_406640
.text:00403688                 mov     dword ptr [esp+2ACh+var_294], eax
.text:0040368C                 mov     [esp+2ACh+FileHandle], offset aCannotRepositi ; "cannot reposition file pointer for %s"
.text:00403693                 call    ds:libintl_gettext
.text:00403699                 mov     [esp+2ACh+FileHandle], 0 ; Code
.text:004036A0                 mov     edx, dword ptr [esp+2ACh+var_294]
.text:004036A4                 mov     ecx, [esp+2ACh+ErrorMessage]
.text:004036A8                 mov     [esp+2ACh+Origin], edx ; char
.text:004036AC                 mov     dword ptr [esp+2ACh+Offset+4], eax ; char *
.text:004036B0                 mov     dword ptr [esp+2ACh+Offset], ecx ; ErrorMessage
.text:004036B4                 call    sub_407AC0
.text:004036B9                 jmp     loc_4035E5
.text:004036B9 ; ---------------------------------------------------------------------------
.text:004036BE                 align 10h
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_4034F0+6F↑j
.text:004036C0                 mov     esi, [esp+2ACh+arg_0]
.text:004036C7                 mov     [esp+2ACh+FileHandle], esi ; char *
.text:004036CA                 call    sub_406640
.text:004036CF                 mov     [esp+2ACh+FileHandle], offset aErrorReadingS ; "error reading %s"
.text:004036D6                 mov     edi, eax
.text:004036D8                 call    ds:libintl_gettext
.text:004036DE                 mov     ebp, eax
.text:004036E0                 call    _errno
.text:004036E5                 mov     [esp+2ACh+Origin], edi ; char
.text:004036E9                 mov     dword ptr [esp+2ACh+Offset+4], ebp ; char *
.text:004036ED                 mov     ebx, [eax]
.text:004036EF                 mov     [esp+2ACh+FileHandle], 0 ; Code
.text:004036F6                 mov     dword ptr [esp+2ACh+Offset], ebx ; ErrorMessage
.text:004036FA                 call    sub_407AC0
.text:004036FF                 xor     eax, eax
.text:00403701                 jmp     loc_403575
.text:00403706 ; ---------------------------------------------------------------------------
.text:00403706
.text:00403706 loc_403706:                             ; CODE XREF: sub_4034F0+41↑j
.text:00403706                 mov     dword ptr [esp+2ACh+Offset], 8000h ; Mode
.text:0040370E                 mov     [esp+2ACh+FileHandle], ebx ; FileHandle
.text:00403711                 call    _setmode
.text:00403716                 mov     ecx, ds:_iob
.text:0040371C                 mov     edx, [ecx+30h]
.text:0040371F                 mov     [esp+2ACh+FileHandle], edx ; FileHandle
.text:00403722                 call    _isatty
.text:00403727                 test    eax, eax
.text:00403729                 jnz     loc_403537
.text:0040372F                 mov     dword ptr [esp+2ACh+Offset], 8000h ; Mode
.text:00403737                 mov     ecx, ds:_iob
.text:0040373D                 mov     ebp, [ecx+30h]
.text:00403740                 mov     [esp+2ACh+FileHandle], ebp ; FileHandle
.text:00403743                 call    _setmode
.text:00403748                 mov     edx, edi
.text:0040374A                 or      edx, esi
.text:0040374C                 jmp     loc_40353B
.text:0040374C sub_4034F0      endp
.text:0040374C
.text:0040374C ; ---------------------------------------------------------------------------
.text:00403751 aSNumberOfBytes_0 db '%s: number of bytes is large',0
.text:00403751                                         ; DATA XREF: sub_403770+4BF↓o
.text:0040376E                 align 10h
.text:00403770
.text:00403770 ; =============== S U B R O U T I N E =======================================
.text:00403770
.text:00403770
.text:00403770 ; int __cdecl sub_403770(char *, int, int, int)
.text:00403770 sub_403770      proc near               ; CODE XREF: sub_4027F0+96↑p
.text:00403770
.text:00403770 Buffer          = dword ptr -6Ch
.text:00403770 ElementSize     = dword ptr -68h
.text:00403770 ElementCount    = dword ptr -64h
.text:00403770 Stream          = dword ptr -60h
.text:00403770 var_5C          = dword ptr -5Ch
.text:00403770 var_58          = dword ptr -58h
.text:00403770 var_54          = dword ptr -54h
.text:00403770 var_50          = dword ptr -50h
.text:00403770 var_4B          = byte ptr -4Bh
.text:00403770 var_4A          = byte ptr -4Ah
.text:00403770 var_49          = byte ptr -49h
.text:00403770 var_48          = byte ptr -48h
.text:00403770 var_47          = byte ptr -47h
.text:00403770 var_46          = byte ptr -46h
.text:00403770 var_45          = byte ptr -45h
.text:00403770 Block           = dword ptr -44h
.text:00403770 var_40          = dword ptr -40h
.text:00403770 var_3C          = byte ptr -3Ch
.text:00403770 arg_0           = dword ptr  4
.text:00403770 arg_4           = dword ptr  8
.text:00403770 arg_8           = dword ptr  0Ch
.text:00403770 arg_C           = dword ptr  10h
.text:00403770
.text:00403770                 push    ebp
.text:00403771                 push    edi
.text:00403772                 push    esi
.text:00403773                 push    ebx
.text:00403774                 sub     esp, 5Ch
.text:00403777                 mov     ecx, [esp+6Ch+arg_8]
.text:0040377B                 mov     ebx, [esp+6Ch+arg_C]
.text:0040377F                 mov     edx, ecx
.text:00403781                 mov     esi, ecx
.text:00403783                 add     edx, 200h
.text:00403789                 mov     edi, ebx
.text:0040378B                 adc     edi, 0
.text:0040378E                 cmp     edi, 0
.text:00403791                 ja      loc_403C1B
.text:00403797
.text:00403797 loc_403797:                             ; CODE XREF: sub_403770+4EA↓j
.text:00403797                 cmp     esi, 100000h
.text:0040379D                 ja      loc_403948
.text:004037A3                 mov     [esp+6Ch+var_45], 1
.text:004037A8                 lea     edi, [esi+200h]
.text:004037AE                 mov     [esp+6Ch+var_46], 1
.text:004037B3                 mov     [esp+6Ch+var_47], 0
.text:004037B8                 mov     [esp+6Ch+ElementSize], edi
.text:004037BC                 mov     [esp+6Ch+Buffer], 2
.text:004037C3                 call    sub_406200
.text:004037C8                 mov     [esp+6Ch+Block], eax
.text:004037CC                 add     eax, edi
.text:004037CE                 mov     [esp+6Ch+var_40], eax
.text:004037D2                 mov     [esp+6Ch+var_48], 0
.text:004037D7                 mov     esi, esi
.text:004037D9                 lea     edi, [edi+0]
.text:004037E0
.text:004037E0 loc_4037E0:                             ; CODE XREF: sub_403770+ED↓j
.text:004037E0                 movzx   ebx, [esp+6Ch+var_48]
.text:004037E5                 xor     ebp, ebp
.text:004037E7                 mov     [esp+6Ch+ElementCount], edi
.text:004037EB                 mov     eax, [esp+6Ch+arg_4]
.text:004037EF                 mov     ecx, [esp+ebx*4+6Ch+Block]
.text:004037F3                 mov     [esp+6Ch+Buffer], eax
.text:004037F6                 mov     [esp+6Ch+ElementSize], ecx
.text:004037FA                 call    sub_4064D0
.text:004037FF                 cmp     eax, edi
.text:00403801                 mov     ebx, eax
.text:00403803                 jb      loc_4038E0
.text:00403809
.text:00403809 loc_403809:                             ; CODE XREF: sub_403770+195↓j
.text:00403809                 cmp     [esp+6Ch+var_46], 0
.text:0040380E                 jnz     short loc_40384A
.text:00403810                 mov     [esp+6Ch+ElementSize], 1 ; ElementSize
.text:00403818                 mov     edx, ds:_iob
.text:0040381E                 mov     ecx, esi
.text:00403820                 sub     ecx, ebp
.text:00403822                 mov     [esp+6Ch+ElementCount], ecx ; ElementCount
.text:00403826                 add     edx, 20h ; ' '
.text:00403829                 mov     [esp+6Ch+Stream], edx ; Stream
.text:0040382D                 movzx   edx, [esp+6Ch+var_48]
.text:00403832                 xor     dl, 1
.text:00403835                 movzx   ecx, dl
.text:00403838                 mov     ebp, [esp+ecx*4+6Ch+Block]
.text:0040383C                 add     ebp, 200h
.text:00403842                 mov     [esp+6Ch+Buffer], ebp ; Buffer
.text:00403845                 call    fwrite
.text:0040384A
.text:0040384A loc_40384A:                             ; CODE XREF: sub_403770+9E↑j
.text:0040384A                 mov     [esp+6Ch+var_46], 0
.text:0040384F                 cmp     esi, ebx
.text:00403851                 jb      short loc_403878
.text:00403853
.text:00403853 loc_403853:                             ; CODE XREF: sub_403770+136↓j
.text:00403853                 xor     [esp+6Ch+var_48], 1
.text:00403858                 cmp     [esp+6Ch+var_47], 0
.text:0040385D                 jz      short loc_4037E0
.text:0040385F
.text:0040385F loc_40385F:                             ; CODE XREF: sub_403770+167↓j
.text:0040385F                 mov     esi, [esp+6Ch+Block]
.text:00403863                 mov     [esp+6Ch+Buffer], esi ; Block
.text:00403866                 call    free
.text:0040386B                 movzx   eax, [esp+6Ch+var_45]
.text:00403870
.text:00403870 loc_403870:                             ; CODE XREF: sub_403770+331↓j
.text:00403870                 add     esp, 5Ch
.text:00403873                 pop     ebx
.text:00403874                 pop     esi
.text:00403875                 pop     edi
.text:00403876                 pop     ebp
.text:00403877                 retn
.text:00403878 ; ---------------------------------------------------------------------------
.text:00403878
.text:00403878 loc_403878:                             ; CODE XREF: sub_403770+E1↑j
.text:00403878                 movzx   ecx, [esp+6Ch+var_48]
.text:0040387D                 sub     ebx, esi
.text:0040387F                 mov     [esp+6Ch+ElementSize], 1 ; ElementSize
.text:00403887                 mov     edx, ds:_iob
.text:0040388D                 mov     [esp+6Ch+ElementCount], ebx ; ElementCount
.text:00403891                 add     edx, 20h ; ' '
.text:00403894                 mov     [esp+6Ch+Stream], edx ; char
.text:00403898                 mov     ebp, [esp+ecx*4+6Ch+Block]
.text:0040389C                 mov     [esp+6Ch+Buffer], ebp ; Buffer
.text:0040389F                 call    fwrite
.text:004038A4                 cmp     eax, ebx
.text:004038A6                 jnb     short loc_403853
.text:004038A8                 mov     [esp+6Ch+Buffer], offset aWriteError ; "write error"
.text:004038AF                 call    ds:libintl_gettext
.text:004038B5                 mov     edi, eax
.text:004038B7                 call    _errno
.text:004038BC                 mov     [esp+6Ch+ElementCount], edi ; char *
.text:004038C0                 mov     ebp, [eax]
.text:004038C2                 mov     [esp+6Ch+Buffer], 0 ; Code
.text:004038C9                 mov     [esp+6Ch+ElementSize], ebp ; ErrorMessage
.text:004038CD                 call    sub_407AC0
.text:004038D2
.text:004038D2 loc_4038D2:                             ; CODE XREF: sub_403770+1D6↓j
.text:004038D2                 mov     [esp+6Ch+var_45], 0
.text:004038D7                 jmp     short loc_40385F
.text:004038D7 ; ---------------------------------------------------------------------------
.text:004038D9                 align 10h
.text:004038E0
.text:004038E0 loc_4038E0:                             ; CODE XREF: sub_403770+93↑j
.text:004038E0                 call    _errno
.text:004038E5                 mov     edx, [eax]
.text:004038E7                 test    edx, edx
.text:004038E9                 jnz     short loc_40390A
.text:004038EB                 cmp     ebx, esi
.text:004038ED                 ja      short loc_403900
.text:004038EF                 cmp     [esp+6Ch+var_46], 0
.text:004038F4                 jnz     short loc_403900
.text:004038F6                 mov     ebp, esi
.text:004038F8                 sub     ebp, ebx
.text:004038FA                 lea     esi, [esi+0]
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_403770+17D↑j
.text:00403900                                         ; sub_403770+184↑j
.text:00403900                 mov     [esp+6Ch+var_47], 1
.text:00403905                 jmp     loc_403809
.text:0040390A ; ---------------------------------------------------------------------------
.text:0040390A
.text:0040390A loc_40390A:                             ; CODE XREF: sub_403770+179↑j
.text:0040390A                 mov     esi, [esp+6Ch+arg_0]
.text:0040390E                 mov     [esp+6Ch+Buffer], esi ; char *
.text:00403911                 call    sub_406640
.text:00403916                 mov     [esp+6Ch+Buffer], offset aErrorReadingS ; "error reading %s"
.text:0040391D                 mov     ebx, eax
.text:0040391F                 call    ds:libintl_gettext
.text:00403925                 mov     edi, eax
.text:00403927                 call    _errno
.text:0040392C                 mov     [esp+6Ch+Stream], ebx ; char
.text:00403930                 mov     [esp+6Ch+ElementCount], edi ; char *
.text:00403934                 mov     ecx, [eax]
.text:00403936                 mov     [esp+6Ch+Buffer], 0 ; Code
.text:0040393D                 mov     [esp+6Ch+ElementSize], ecx ; ErrorMessage
.text:00403941                 call    sub_407AC0
.text:00403946                 jmp     short loc_4038D2
.text:00403948 ; ---------------------------------------------------------------------------
.text:00403948
.text:00403948 loc_403948:                             ; CODE XREF: sub_403770+2D↑j
.text:00403948                 mov     [esp+6Ch+var_58], 200h
.text:00403950                 mov     ebx, esi
.text:00403952                 and     ebx, 1FFh
.text:00403958                 sub     [esp+6Ch+var_58], ebx
.text:0040395C                 xor     ebx, ebx
.text:0040395E                 mov     [esp+6Ch+var_49], 1
.text:00403963                 mov     eax, [esp+6Ch+var_58]
.text:00403967                 mov     [esp+6Ch+var_4A], 0
.text:0040396C                 mov     [esp+6Ch+ElementSize], 4 ; size_t
.text:00403974                 lea     edi, [eax+esi]
.text:00403977                 shr     edi, 9
.text:0040397A                 lea     ebp, [edi+1]
.text:0040397D                 mov     [esp+6Ch+Buffer], ebp ; size_t
.text:00403980                 call    sub_406380
.text:00403985                 mov     [esp+6Ch+var_54], eax
.text:00403989                 mov     [esp+6Ch+var_4B], 0
.text:0040398E                 mov     [esp+6Ch+var_50], 1
.text:00403996                 lea     esi, [esi+0]
.text:00403999                 lea     edi, [edi+0]
.text:004039A0
.text:004039A0 loc_4039A0:                             ; CODE XREF: sub_403770+299↓j
.text:004039A0                 mov     edx, [esp+6Ch+var_54]
.text:004039A4                 mov     ecx, [edx+ebx*4]
.text:004039A7                 test    ecx, ecx
.text:004039A9                 jz      loc_403C03
.text:004039AF
.text:004039AF loc_4039AF:                             ; CODE XREF: sub_403770+4A6↓j
.text:004039AF                 mov     [esp+6Ch+ElementCount], 200h
.text:004039B7                 mov     eax, [esp+6Ch+var_54]
.text:004039BB                 mov     edi, [esp+6Ch+arg_4]
.text:004039BF                 mov     edx, [eax+ebx*4]
.text:004039C2                 mov     [esp+6Ch+Buffer], edi
.text:004039C5                 mov     [esp+6Ch+ElementSize], edx
.text:004039C9                 call    sub_4064D0
.text:004039CE                 cmp     eax, 1FFh
.text:004039D3                 mov     esi, eax
.text:004039D5                 jbe     loc_403BB0
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: sub_403770+450↓j
.text:004039DB                 lea     edi, [ebx+1]
.text:004039DE                 cmp     edi, ebp
.text:004039E0                 jz      loc_403BA0
.text:004039E6
.text:004039E6 loc_4039E6:                             ; CODE XREF: sub_403770+435↓j
.text:004039E6                 cmp     [esp+6Ch+var_4B], 0
.text:004039EB                 jnz     loc_403B38
.text:004039F1
.text:004039F1 loc_4039F1:                             ; CODE XREF: sub_403770+3F6↓j
.text:004039F1                 mov     ebx, [esp+6Ch+var_50]
.text:004039F5                 xor     edx, edx
.text:004039F7                 lea     ecx, [ebx+1]
.text:004039FA                 mov     eax, ecx
.text:004039FC                 div     ebp
.text:004039FE                 cmp     [esp+6Ch+var_4A], 0
.text:00403A03                 mov     edi, edx
.text:00403A05                 mov     [esp+6Ch+var_50], edx
.text:00403A09                 jz      short loc_4039A0
.text:00403A0B                 mov     edx, [esp+6Ch+var_58]
.text:00403A0F                 test    edx, edx
.text:00403A11                 jz      short loc_403A70
.text:00403A13                 cmp     [esp+6Ch+var_4B], 0
.text:00403A18                 jz      loc_403B10
.text:00403A1E                 mov     [esp+6Ch+var_5C], 200h
.text:00403A26                 sub     [esp+6Ch+var_5C], esi
.text:00403A2A                 mov     eax, [esp+6Ch+var_5C]
.text:00403A2E                 cmp     [esp+6Ch+var_58], eax
.text:00403A32                 jnb     short loc_403AB0
.text:00403A34                 mov     [esp+6Ch+ElementSize], 1 ; ElementSize
.text:00403A3C                 mov     edi, ds:_iob
.text:00403A42                 mov     edx, [esp+6Ch+var_58]
.text:00403A46                 mov     ecx, [esp+6Ch+var_54]
.text:00403A4A                 add     edi, 20h ; ' '
.text:00403A4D                 mov     [esp+6Ch+Stream], edi ; Stream
.text:00403A51                 mov     [esp+6Ch+ElementCount], edx ; ElementCount
.text:00403A55                 mov     edi, [ecx+ebx*4]
.text:00403A58                 add     esi, edi
.text:00403A5A                 mov     [esp+6Ch+Buffer], esi ; Buffer
.text:00403A5D
.text:00403A5D loc_403A5D:                             ; CODE XREF: sub_403770+39B↓j
.text:00403A5D                 call    fwrite
.text:00403A62                 lea     esi, [esi+0]
.text:00403A69                 lea     edi, [edi+0]
.text:00403A70
.text:00403A70 loc_403A70:                             ; CODE XREF: sub_403770+2A1↑j
.text:00403A70                                         ; sub_403770+3A2↓j ...
.text:00403A70                 xor     ebx, ebx
.text:00403A72                 cmp     ebx, ebp
.text:00403A74                 jnb     short loc_403A90
.text:00403A76                 lea     esi, [esi+0]
.text:00403A79                 lea     edi, [edi+0]
.text:00403A80
.text:00403A80 loc_403A80:                             ; CODE XREF: sub_403770+31E↓j
.text:00403A80                 mov     edi, [esp+6Ch+var_54]
.text:00403A84                 mov     eax, [edi+ebx*4]
.text:00403A87                 test    eax, eax
.text:00403A89                 jnz     short loc_403AA6
.text:00403A8B
.text:00403A8B loc_403A8B:                             ; CODE XREF: sub_403770+33E↓j
.text:00403A8B                 inc     ebx
.text:00403A8C                 cmp     ebx, ebp
.text:00403A8E                 jb      short loc_403A80
.text:00403A90
.text:00403A90 loc_403A90:                             ; CODE XREF: sub_403770+304↑j
.text:00403A90                 mov     ebp, [esp+6Ch+var_54]
.text:00403A94                 mov     [esp+6Ch+Buffer], ebp ; Block
.text:00403A97                 call    free
.text:00403A9C                 movzx   eax, [esp+6Ch+var_49]
.text:00403AA1                 jmp     loc_403870
.text:00403AA6 ; ---------------------------------------------------------------------------
.text:00403AA6
.text:00403AA6 loc_403AA6:                             ; CODE XREF: sub_403770+319↑j
.text:00403AA6                 mov     [esp+6Ch+Buffer], eax ; Block
.text:00403AA9                 call    free
.text:00403AAE                 jmp     short loc_403A8B
.text:00403AB0 ; ---------------------------------------------------------------------------
.text:00403AB0
.text:00403AB0 loc_403AB0:                             ; CODE XREF: sub_403770+2C2↑j
.text:00403AB0                 mov     [esp+6Ch+ElementSize], 1 ; ElementSize
.text:00403AB8                 mov     ecx, ds:_iob
.text:00403ABE                 mov     eax, [esp+6Ch+var_5C]
.text:00403AC2                 mov     edx, [esp+6Ch+var_54]
.text:00403AC6                 add     ecx, 20h ; ' '
.text:00403AC9                 mov     [esp+6Ch+Stream], ecx ; Stream
.text:00403ACD                 mov     [esp+6Ch+ElementCount], eax ; ElementCount
.text:00403AD1                 mov     ecx, [edx+ebx*4]
.text:00403AD4                 add     esi, ecx
.text:00403AD6                 mov     [esp+6Ch+Buffer], esi ; Buffer
.text:00403AD9                 call    fwrite
.text:00403ADE                 mov     esi, ds:_iob
.text:00403AE4                 mov     ebx, [esp+6Ch+var_58]
.text:00403AE8                 mov     eax, [esp+6Ch+var_5C]
.text:00403AEC                 add     esi, 20h ; ' '
.text:00403AEF                 mov     [esp+6Ch+Stream], esi
.text:00403AF3                 sub     ebx, eax
.text:00403AF5                 mov     [esp+6Ch+ElementCount], ebx
.text:00403AF9
.text:00403AF9 loc_403AF9:                             ; CODE XREF: sub_403770+3C6↓j
.text:00403AF9                 mov     [esp+6Ch+ElementSize], 1
.text:00403B01                 mov     esi, [esp+6Ch+var_54]
.text:00403B05                 mov     ebx, [esi+edi*4]
.text:00403B08                 mov     [esp+6Ch+Buffer], ebx
.text:00403B0B                 jmp     loc_403A5D
.text:00403B10 ; ---------------------------------------------------------------------------
.text:00403B10
.text:00403B10 loc_403B10:                             ; CODE XREF: sub_403770+2A8↑j
.text:00403B10                 cmp     ecx, ebp
.text:00403B12                 jnz     loc_403A70
.text:00403B18                 mov     eax, [esp+6Ch+var_58]
.text:00403B1C                 mov     edx, 200h
.text:00403B21                 mov     ecx, ds:_iob
.text:00403B27                 sub     edx, eax
.text:00403B29                 sub     esi, edx
.text:00403B2B                 add     ecx, 20h ; ' '
.text:00403B2E                 mov     [esp+6Ch+Stream], ecx
.text:00403B32                 mov     [esp+6Ch+ElementCount], esi
.text:00403B36                 jmp     short loc_403AF9
.text:00403B38 ; ---------------------------------------------------------------------------
.text:00403B38
.text:00403B38 loc_403B38:                             ; CODE XREF: sub_403770+27B↑j
.text:00403B38                 mov     [esp+6Ch+ElementCount], esi ; ElementCount
.text:00403B3C                 mov     edx, ds:_iob
.text:00403B42                 mov     ecx, [esp+6Ch+var_50]
.text:00403B46                 mov     [esp+6Ch+ElementSize], 1 ; ElementSize
.text:00403B4E                 mov     eax, [esp+6Ch+var_54]
.text:00403B52                 add     edx, 20h ; ' '
.text:00403B55                 mov     [esp+6Ch+Stream], edx ; char
.text:00403B59                 mov     ebx, [eax+ecx*4]
.text:00403B5C                 mov     [esp+6Ch+Buffer], ebx ; Buffer
.text:00403B5F                 call    fwrite
.text:00403B64                 cmp     eax, esi
.text:00403B66                 jnb     loc_4039F1
.text:00403B6C                 mov     [esp+6Ch+Buffer], offset aWriteError ; "write error"
.text:00403B73                 call    ds:libintl_gettext
.text:00403B79                 mov     edi, eax
.text:00403B7B                 call    _errno
.text:00403B80                 mov     [esp+6Ch+ElementCount], edi ; char *
.text:00403B84                 mov     edx, [eax]
.text:00403B86                 mov     [esp+6Ch+Buffer], 0 ; Code
.text:00403B8D                 mov     [esp+6Ch+ElementSize], edx ; ErrorMessage
.text:00403B91                 call    sub_407AC0
.text:00403B96
.text:00403B96 loc_403B96:                             ; CODE XREF: sub_403770+491↓j
.text:00403B96                 mov     [esp+6Ch+var_49], 0
.text:00403B9B                 jmp     loc_403A70
.text:00403BA0 ; ---------------------------------------------------------------------------
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403770+270↑j
.text:00403BA0                 mov     [esp+6Ch+var_4B], 1
.text:00403BA5                 jmp     loc_4039E6
.text:00403BA5 ; ---------------------------------------------------------------------------
.text:00403BAA                 align 10h
.text:00403BB0
.text:00403BB0 loc_403BB0:                             ; CODE XREF: sub_403770+265↑j
.text:00403BB0                 call    _errno
.text:00403BB5                 mov     ecx, [eax]
.text:00403BB7                 test    ecx, ecx
.text:00403BB9                 jnz     short loc_403BC5
.text:00403BBB                 mov     [esp+6Ch+var_4A], 1
.text:00403BC0                 jmp     loc_4039DB
.text:00403BC5 ; ---------------------------------------------------------------------------
.text:00403BC5
.text:00403BC5 loc_403BC5:                             ; CODE XREF: sub_403770+449↑j
.text:00403BC5                 mov     esi, [esp+6Ch+arg_0]
.text:00403BC9                 mov     [esp+6Ch+Buffer], esi ; char *
.text:00403BCC                 call    sub_406640
.text:00403BD1                 mov     [esp+6Ch+Buffer], offset aErrorReadingS ; "error reading %s"
.text:00403BD8                 mov     ebx, eax
.text:00403BDA                 call    ds:libintl_gettext
.text:00403BE0                 mov     edi, eax
.text:00403BE2                 call    _errno
.text:00403BE7                 mov     [esp+6Ch+Stream], ebx ; char
.text:00403BEB                 mov     [esp+6Ch+ElementCount], edi ; char *
.text:00403BEF                 mov     edi, [eax]
.text:00403BF1                 mov     [esp+6Ch+Buffer], 0 ; Code
.text:00403BF8                 mov     [esp+6Ch+ElementSize], edi ; ErrorMessage
.text:00403BFC                 call    sub_407AC0
.text:00403C01                 jmp     short loc_403B96
.text:00403C03 ; ---------------------------------------------------------------------------
.text:00403C03
.text:00403C03 loc_403C03:                             ; CODE XREF: sub_403770+239↑j
.text:00403C03                 mov     [esp+6Ch+Buffer], 200h ; size_t
.text:00403C0A                 call    sub_406240
.text:00403C0F                 mov     esi, [esp+6Ch+var_54]
.text:00403C13                 mov     [esi+ebx*4], eax
.text:00403C16                 jmp     loc_4039AF
.text:00403C1B ; ---------------------------------------------------------------------------
.text:00403C1B
.text:00403C1B loc_403C1B:                             ; CODE XREF: sub_403770+21↑j
.text:00403C1B                 mov     [esp+6Ch+Buffer], ecx
.text:00403C1E                 lea     edx, [esp+6Ch+var_3C]
.text:00403C22                 mov     [esp+6Ch+ElementCount], edx
.text:00403C26                 mov     [esp+6Ch+ElementSize], ebx
.text:00403C2A                 call    sub_406530
.text:00403C2F                 mov     [esp+6Ch+Buffer], offset aSNumberOfBytes_0 ; "%s: number of bytes is large"
.text:00403C36                 mov     ebp, eax
.text:00403C38                 call    ds:libintl_gettext
.text:00403C3E                 mov     [esp+6Ch+Stream], ebp ; char
.text:00403C42                 mov     [esp+6Ch+ElementSize], 0 ; ErrorMessage
.text:00403C4A                 mov     [esp+6Ch+Buffer], 1 ; Code
.text:00403C51                 mov     [esp+6Ch+ElementCount], eax ; char *
.text:00403C55                 call    sub_407AC0
.text:00403C5A                 jmp     loc_403797
.text:00403C5A sub_403770      endp
.text:00403C5A
.text:00403C5A ; ---------------------------------------------------------------------------
.text:00403C5F                 align 10h
.text:00403C60 dword_403C60    dd 90002D2Dh, 7 dup(90909090h)
.text:00403C60                                         ; DATA XREF: sub_403EB0+E4↓o
.text:00403C80 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403C80                                         ; DATA XREF: sub_403EB0+2FC↓o
.text:00403CAD                 align 20h
.text:00403CC0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403CC0                                         ; DATA XREF: sub_403EB0:loc_404212↓o
.text:00403CED                 align 20h
.text:00403D00 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00403D00                                         ; DATA XREF: sub_403EB0:loc_4042B0↓o
.text:00403D00                                         ; sub_403EB0:loc_404677↓o
.text:00403D26                 align 20h
.text:00403D40 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00403D40                                         ; DATA XREF: sub_403EB0+48E↓o
.text:00403D60 dword_403D60    dd 90909000h, 7 dup(90909090h)
.text:00403D60                                         ; DATA XREF: sub_403EB0:loc_404381↓o
.text:00403D80 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00403D80                                         ; DATA XREF: sub_403EB0:loc_40439A↓o
.text:00403DA0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00403DA0                                         ; DATA XREF: sub_403EB0:loc_40447F↓o
.text:00403DA0                                         ; sub_403EB0:loc_4047AC↓o
.text:00403DC7                 align 20h
.text:00403DE0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00403DE0                                         ; DATA XREF: sub_403EB0:loc_4045F3↓o
.text:00403E0E                 align 20h
.text:00403E20 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00403E20                                         ; DATA XREF: sub_403EB0:loc_4046DF↓o
.text:00403E41 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403E41                                         ; DATA XREF: sub_403EB0+93F↓o
.text:00403E5B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00403E5B                                         ; DATA XREF: sub_403EB0:loc_404827↓o
.text:00403E75 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403E75                                         ; DATA XREF: sub_403EB0:loc_40484E↓o
.text:00403E93 ; const char VarName[]
.text:00403E93 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403EB0:loc_404A00↓o
.text:00403EA3                 align 10h
.text:00403EB0
.text:00403EB0 ; =============== S U B R O U T I N E =======================================
.text:00403EB0
.text:00403EB0
.text:00403EB0 ; int __cdecl sub_403EB0(int, int, char *Str, int, int, int, int, int)
.text:00403EB0 sub_403EB0      proc near               ; CODE XREF: sub_404A40+5A↓p
.text:00403EB0                                         ; .text:00404B2A↓p ...
.text:00403EB0
.text:00403EB0 Str1            = dword ptr -5Ch
.text:00403EB0 Str2            = dword ptr -58h
.text:00403EB0 MaxCount        = dword ptr -54h
.text:00403EB0 var_50          = dword ptr -50h
.text:00403EB0 var_4C          = dword ptr -4Ch
.text:00403EB0 var_3C          = dword ptr -3Ch
.text:00403EB0 var_38          = dword ptr -38h
.text:00403EB0 var_34          = dword ptr -34h
.text:00403EB0 var_30          = dword ptr -30h
.text:00403EB0 var_2C          = dword ptr -2Ch
.text:00403EB0 var_28          = dword ptr -28h
.text:00403EB0 var_24          = dword ptr -24h
.text:00403EB0 var_20          = dword ptr -20h
.text:00403EB0 var_1C          = dword ptr -1Ch
.text:00403EB0 var_18          = dword ptr -18h
.text:00403EB0 var_14          = dword ptr -14h
.text:00403EB0 arg_0           = dword ptr  4
.text:00403EB0 arg_4           = dword ptr  8
.text:00403EB0 Str             = dword ptr  0Ch
.text:00403EB0 arg_C           = dword ptr  10h
.text:00403EB0 arg_10          = dword ptr  14h
.text:00403EB0 arg_14          = dword ptr  18h
.text:00403EB0 arg_18          = dword ptr  1Ch
.text:00403EB0 arg_1C          = dword ptr  20h
.text:00403EB0
.text:00403EB0                 push    ebp
.text:00403EB1                 mov     eax, 0FFFFFFFFh
.text:00403EB6                 push    edi
.text:00403EB7                 push    esi
.text:00403EB8                 push    ebx
.text:00403EB9                 sub     esp, 4Ch
.text:00403EBC                 mov     esi, [esp+5Ch+Str]
.text:00403EC0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00403EC4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00403EC7                 mov     ebx, [ebp+4]
.text:00403ECA                 setz    dl
.text:00403ECD                 movzx   ecx, dl
.text:00403ED0                 dec     ecx
.text:00403ED1                 and     ecx, ebx
.text:00403ED3                 mov     [esp+5Ch+var_14], ecx
.text:00403ED7                 mov     ecx, [esp+5Ch+arg_0]
.text:00403EDB                 test    ecx, ecx
.text:00403EDD                 jle     loc_404007
.text:00403EE3                 mov     dword ptr [ebp+0Ch], 0
.text:00403EEA                 mov     ebx, [ebp+0]
.text:00403EED                 test    ebx, ebx
.text:00403EEF                 jz      loc_404A20
.text:00403EF5                 mov     edi, [ebp+10h]
.text:00403EF8                 test    edi, edi
.text:00403EFA                 jnz     short loc_403F53
.text:00403EFC                 lea     esi, [esi+0]
.text:00403F00
.text:00403F00 loc_403F00:                             ; CODE XREF: sub_403EB0+B7C↓j
.text:00403F00                 mov     [ebp+24h], ebx
.text:00403F03                 mov     esi, [esp+5Ch+Str]
.text:00403F07                 mov     [ebp+20h], ebx
.text:00403F0A                 mov     ecx, [esp+5Ch+arg_18]
.text:00403F0E                 xor     ebx, ebx
.text:00403F10                 mov     dword ptr [ebp+14h], 0
.text:00403F17                 test    ecx, ecx
.text:00403F19                 jz      loc_404A00
.text:00403F1F
.text:00403F1F loc_403F1F:                             ; CODE XREF: sub_403EB0+B64↓j
.text:00403F1F                 mov     ebx, 1
.text:00403F24
.text:00403F24 loc_403F24:                             ; CODE XREF: sub_403EB0+B5E↓j
.text:00403F24                 mov     [ebp+1Ch], ebx
.text:00403F27                 mov     ecx, [esp+5Ch+Str]
.text:00403F2B                 movzx   eax, byte ptr [ecx]
.text:00403F2E                 cmp     al, 2Dh ; '-'
.text:00403F30                 jz      loc_4049F0
.text:00403F36                 cmp     al, 2Bh ; '+'
.text:00403F38                 jz      loc_4049D9
.text:00403F3E                 xor     edx, edx
.text:00403F40                 test    ebx, ebx
.text:00403F42                 setz    dl
.text:00403F45                 mov     [ebp+18h], edx
.text:00403F48
.text:00403F48 loc_403F48:                             ; CODE XREF: sub_403EB0+B35↓j
.text:00403F48                 mov     [esp+5Ch+Str], esi
.text:00403F4C                 mov     dword ptr [ebp+10h], 1
.text:00403F53
.text:00403F53 loc_403F53:                             ; CODE XREF: sub_403EB0+4A↑j
.text:00403F53                 mov     eax, [ebp+14h]
.text:00403F56                 test    eax, eax
.text:00403F58                 jz      short loc_403F63
.text:00403F5A                 cmp     byte ptr [eax], 0
.text:00403F5D                 jnz     loc_404040
.text:00403F63
.text:00403F63 loc_403F63:                             ; CODE XREF: sub_403EB0+A8↑j
.text:00403F63                 mov     ebx, [ebp+0]
.text:00403F66                 cmp     [ebp+24h], ebx
.text:00403F69                 jle     short loc_403F6E
.text:00403F6B                 mov     [ebp+24h], ebx
.text:00403F6E
.text:00403F6E loc_403F6E:                             ; CODE XREF: sub_403EB0+B9↑j
.text:00403F6E                 cmp     [ebp+20h], ebx
.text:00403F71                 jle     short loc_403F76
.text:00403F73                 mov     [ebp+20h], ebx
.text:00403F76
.text:00403F76 loc_403F76:                             ; CODE XREF: sub_403EB0+C1↑j
.text:00403F76                 cmp     dword ptr [ebp+18h], 1
.text:00403F7A                 jz      loc_404950
.text:00403F80
.text:00403F80 loc_403F80:                             ; CODE XREF: sub_403EB0+B13↓j
.text:00403F80                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403F84                 jz      loc_404934
.text:00403F8A                 cld
.text:00403F8B                 mov     ecx, [esp+5Ch+arg_4]
.text:00403F8F                 mov     edx, 3
.text:00403F94                 mov     edi, offset dword_403C60
.text:00403F99                 mov     esi, [ecx+ebx*4]
.text:00403F9C                 mov     ecx, edx
.text:00403F9E                 repe cmpsb
.text:00403FA0                 jnz     short loc_403FDC
.text:00403FA2                 mov     edx, [ebp+24h]
.text:00403FA5                 lea     eax, [ebx+1]
.text:00403FA8                 cmp     [ebp+20h], edx
.text:00403FAB                 mov     [ebp+0], eax
.text:00403FAE                 jz      loc_404948
.text:00403FB4                 cmp     edx, eax
.text:00403FB6                 jz      short loc_403FD0
.text:00403FB8                 mov     [esp+5Ch+Str2], ebp
.text:00403FBC                 mov     ebx, [esp+5Ch+arg_4]
.text:00403FC0                 mov     [esp+5Ch+Str1], ebx
.text:00403FC3                 call    sub_404B60
.text:00403FC8                 nop
.text:00403FC9                 lea     esi, [esi+0]
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: sub_403EB0+106↑j
.text:00403FD0                                         ; sub_403EB0+A9B↓j
.text:00403FD0                 mov     eax, [esp+5Ch+arg_0]
.text:00403FD4                 mov     ebx, eax
.text:00403FD6                 mov     [ebp+24h], eax
.text:00403FD9                 mov     [ebp+0], eax
.text:00403FDC
.text:00403FDC loc_403FDC:                             ; CODE XREF: sub_403EB0+F0↑j
.text:00403FDC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403FE0                 jz      loc_404934
.text:00403FE6                 mov     esi, [esp+5Ch+arg_4]
.text:00403FEA                 mov     eax, [esi+ebx*4]
.text:00403FED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403FF0                 jz      short loc_404017
.text:00403FF2
.text:00403FF2 loc_403FF2:                             ; CODE XREF: sub_403EB0+16D↓j
.text:00403FF2                 mov     edx, [ebp+18h]
.text:00403FF5                 test    edx, edx
.text:00403FF7                 jz      short loc_404010
.text:00403FF9                 mov     [ebp+0Ch], eax
.text:00403FFC                 lea     edi, [ebx+1]
.text:00403FFF                 mov     eax, 1
.text:00404004                 mov     [ebp+0], edi
.text:00404007
.text:00404007 loc_404007:                             ; CODE XREF: sub_403EB0+2D↑j
.text:00404007                                         ; sub_403EB0+165↓j ...
.text:00404007                 add     esp, 4Ch
.text:0040400A                 pop     ebx
.text:0040400B                 pop     esi
.text:0040400C                 pop     edi
.text:0040400D                 pop     ebp
.text:0040400E                 retn
.text:0040400E ; ---------------------------------------------------------------------------
.text:0040400F                 align 10h
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403EB0+147↑j
.text:00404010                                         ; sub_403EB0+A8A↓j ...
.text:00404010                 mov     eax, 0FFFFFFFFh
.text:00404015                 jmp     short loc_404007
.text:00404017 ; ---------------------------------------------------------------------------
.text:00404017
.text:00404017 loc_404017:                             ; CODE XREF: sub_403EB0+140↑j
.text:00404017                 movzx   edx, byte ptr [eax+1]
.text:0040401B                 test    dl, dl
.text:0040401D                 jz      short loc_403FF2
.text:0040401F                 mov     ebx, [esp+5Ch+arg_C]
.text:00404023                 xor     ecx, ecx
.text:00404025                 test    ebx, ebx
.text:00404027                 jz      short loc_404032
.text:00404029                 cmp     dl, 2Dh ; '-'
.text:0040402C                 jz      loc_40492A
.text:00404032
.text:00404032 loc_404032:                             ; CODE XREF: sub_403EB0+177↑j
.text:00404032                                         ; sub_403EB0+A7F↓j
.text:00404032                 lea     esi, [ecx+eax+1]
.text:00404036                 mov     [ebp+14h], esi
.text:00404039                 lea     esi, [esi+0]
.text:00404040
.text:00404040 loc_404040:                             ; CODE XREF: sub_403EB0+AD↑j
.text:00404040                 mov     ecx, [esp+5Ch+arg_C]
.text:00404044                 test    ecx, ecx
.text:00404046                 jz      loc_4043D0
.text:0040404C                 mov     edx, [ebp+0]
.text:0040404F                 mov     edi, [esp+5Ch+arg_4]
.text:00404053                 mov     eax, [edi+edx*4]
.text:00404056                 movzx   edx, byte ptr [eax+1]
.text:0040405A                 cmp     dl, 2Dh ; '-'
.text:0040405D                 jz      short loc_404075
.text:0040405F                 mov     ebx, [esp+5Ch+arg_14]
.text:00404063                 test    ebx, ebx
.text:00404065                 jz      loc_4043D0
.text:0040406B                 cmp     byte ptr [eax+2], 0
.text:0040406F                 jz      loc_40490A
.text:00404075
.text:00404075 loc_404075:                             ; CODE XREF: sub_403EB0+1AD↑j
.text:00404075                                         ; sub_403EB0+A75↓j
.text:00404075                 mov     [esp+5Ch+var_18], 0
.text:0040407D                 mov     ecx, [ebp+14h]
.text:00404080                 mov     [esp+5Ch+var_1C], 0
.text:00404088                 mov     [esp+5Ch+var_20], 0
.text:00404090                 mov     edi, ecx
.text:00404092                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040409A                 movzx   eax, byte ptr [ecx]
.text:0040409D                 test    al, al
.text:0040409F                 jz      short loc_4040BC
.text:004040A1                 cmp     al, 3Dh ; '='
.text:004040A3                 jz      short loc_4040BC
.text:004040A5                 lea     esi, [esi+0]
.text:004040A9                 lea     edi, [edi+0]
.text:004040B0
.text:004040B0 loc_4040B0:                             ; CODE XREF: sub_403EB0+20A↓j
.text:004040B0                 inc     edi
.text:004040B1                 movzx   eax, byte ptr [edi]
.text:004040B4                 test    al, al
.text:004040B6                 jz      short loc_4040BC
.text:004040B8                 cmp     al, 3Dh ; '='
.text:004040BA                 jnz     short loc_4040B0
.text:004040BC
.text:004040BC loc_4040BC:                             ; CODE XREF: sub_403EB0+1EF↑j
.text:004040BC                                         ; sub_403EB0+1F3↑j ...
.text:004040BC                 mov     [esp+5Ch+var_28], 0
.text:004040C4                 mov     esi, [esp+5Ch+arg_C]
.text:004040C8                 mov     ebx, [esi]
.text:004040CA                 test    ebx, ebx
.text:004040CC                 mov     edx, ebx
.text:004040CE                 jz      loc_4042F0
.text:004040D4                 lea     esi, [esi+0]
.text:004040DA                 lea     edi, [edi+0]
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: sub_403EB0+25E↓j
.text:004040E0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004040E4                 mov     ebx, edi
.text:004040E6                 sub     ebx, ecx
.text:004040E8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004040EC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004040EF                 call    strncmp
.text:004040F4                 test    eax, eax
.text:004040F6                 jz      loc_404886
.text:004040FC
.text:004040FC loc_4040FC:                             ; CODE XREF: sub_403EB0+A0F↓j
.text:004040FC                                         ; sub_403EB0+A24↓j ...
.text:004040FC                 inc     [esp+5Ch+var_28]
.text:00404100                 add     esi, 10h
.text:00404103                 mov     ecx, [esi]
.text:00404105                 test    ecx, ecx
.text:00404107                 mov     edx, ecx
.text:00404109                 jz      short loc_404110
.text:0040410B                 mov     ecx, [ebp+14h]
.text:0040410E                 jmp     short loc_4040E0
.text:00404110 ; ---------------------------------------------------------------------------
.text:00404110
.text:00404110 loc_404110:                             ; CODE XREF: sub_403EB0+259↑j
.text:00404110                                         ; sub_403EB0+A55↓j
.text:00404110                 mov     esi, [esp+5Ch+var_20]
.text:00404114                 test    esi, esi
.text:00404116                 jz      short loc_404124
.text:00404118                 mov     edx, [esp+5Ch+var_1C]
.text:0040411C                 test    edx, edx
.text:0040411E                 jz      loc_404830
.text:00404124
.text:00404124 loc_404124:                             ; CODE XREF: sub_403EB0+266↑j
.text:00404124                 mov     eax, [esp+5Ch+var_18]
.text:00404128                 test    eax, eax
.text:0040412A                 jz      loc_4042F0
.text:00404130                 mov     ecx, [ebp+0]
.text:00404133                 lea     eax, [ecx+1]
.text:00404136                 mov     [ebp+0], eax
.text:00404139                 cmp     byte ptr [edi], 0
.text:0040413C                 jz      loc_404250
.text:00404142                 mov     ecx, [esp+5Ch+var_18]
.text:00404146                 mov     esi, [ecx+4]
.text:00404149                 test    esi, esi
.text:0040414B                 jz      short loc_404196
.text:0040414D                 lea     ebx, [edi+1]
.text:00404150                 mov     [ebp+0Ch], ebx
.text:00404153
.text:00404153 loc_404153:                             ; CODE XREF: sub_403EB0+3A8↓j
.text:00404153                                         ; sub_403EB0+3C4↓j
.text:00404153                 mov     ebx, [ebp+14h]
.text:00404156                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00404159                 call    strlen
.text:0040415E                 add     [ebp+14h], eax
.text:00404161                 mov     esi, [esp+5Ch+arg_10]
.text:00404165                 test    esi, esi
.text:00404167                 jz      short loc_404173
.text:00404169                 mov     ebp, [esp+5Ch+var_24]
.text:0040416D                 mov     ecx, [esp+5Ch+arg_10]
.text:00404171                 mov     [ecx], ebp
.text:00404173
.text:00404173 loc_404173:                             ; CODE XREF: sub_403EB0+2B7↑j
.text:00404173                 mov     eax, [esp+5Ch+var_18]
.text:00404177                 mov     ecx, [eax+8]
.text:0040417A                 test    ecx, ecx
.text:0040417C                 jnz     short loc_40418A
.text:0040417E                 mov     ecx, [esp+5Ch+var_18]
.text:00404182
.text:00404182 loc_404182:                             ; CODE XREF: sub_403EB0+723↓j
.text:00404182                 mov     eax, [ecx+0Ch]
.text:00404185                 jmp     loc_404007
.text:0040418A ; ---------------------------------------------------------------------------
.text:0040418A
.text:0040418A loc_40418A:                             ; CODE XREF: sub_403EB0+2CC↑j
.text:0040418A                                         ; sub_403EB0+719↓j
.text:0040418A                 mov     esi, [eax+0Ch]
.text:0040418D                 xor     eax, eax
.text:0040418F                 mov     [ecx], esi
.text:00404191                 jmp     loc_404007
.text:00404196 ; ---------------------------------------------------------------------------
.text:00404196
.text:00404196 loc_404196:                             ; CODE XREF: sub_403EB0+29B↑j
.text:00404196                 mov     edi, [esp+5Ch+var_14]
.text:0040419A                 test    edi, edi
.text:0040419C                 jz      short loc_4041F0
.text:0040419E                 mov     esi, [esp+5Ch+arg_4]
.text:004041A2                 mov     edx, [esi+eax*4-4]
.text:004041A6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004041AA                 jz      short loc_404212
.text:004041AC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004041B3                 call    ds:libintl_gettext
.text:004041B9                 mov     edx, [esp+5Ch+var_18]
.text:004041BD                 mov     edi, [edx]
.text:004041BF                 mov     [esp+5Ch+var_4C], edi
.text:004041C3                 mov     ebx, [ebp+0]
.text:004041C6                 mov     edi, [esp+5Ch+arg_4]
.text:004041CA                 mov     ecx, [edi+ebx*4-4]
.text:004041CE                 movsx   esi, byte ptr [ecx]
.text:004041D1                 mov     ecx, ds:_iob
.text:004041D7                 add     ecx, 40h ; '@'
.text:004041DA                 mov     [esp+5Ch+var_50], esi
.text:004041DE                 mov     ebx, [edi]
.text:004041E0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004041E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004041E7                 mov     [esp+5Ch+MaxCount], ebx
.text:004041EB                 call    fprintf
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: sub_403EB0+2EC↑j
.text:004041F0                                         ; sub_403EB0+398↓j
.text:004041F0                 mov     ecx, [ebp+14h]
.text:004041F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004041F6                 call    strlen
.text:004041FB                 add     [ebp+14h], eax
.text:004041FE                 mov     eax, [esp+5Ch+var_18]
.text:00404202                 mov     esi, [eax+0Ch]
.text:00404205                 mov     [ebp+8], esi
.text:00404208
.text:00404208 loc_404208:                             ; CODE XREF: sub_403EB0+4E5↓j
.text:00404208                                         ; sub_403EB0+73E↓j ...
.text:00404208                 mov     eax, 3Fh ; '?'
.text:0040420D                 jmp     loc_404007
.text:00404212 ; ---------------------------------------------------------------------------
.text:00404212
.text:00404212 loc_404212:                             ; CODE XREF: sub_403EB0+2FA↑j
.text:00404212                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00404219                 call    ds:libintl_gettext
.text:0040421F                 mov     edx, [esp+5Ch+var_18]
.text:00404223                 mov     edi, [esp+5Ch+arg_4]
.text:00404227                 mov     ecx, ds:_iob
.text:0040422D                 mov     esi, [edx]
.text:0040422F                 add     ecx, 40h ; '@'
.text:00404232                 mov     [esp+5Ch+var_50], esi
.text:00404236                 mov     ebx, [edi]
.text:00404238                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040423C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040423F                 mov     [esp+5Ch+MaxCount], ebx
.text:00404243                 call    fprintf
.text:00404248                 jmp     short loc_4041F0
.text:00404248 ; ---------------------------------------------------------------------------
.text:0040424A                 align 10h
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_403EB0+28C↑j
.text:00404250                 mov     ebx, [esp+5Ch+var_18]
.text:00404254                 cmp     dword ptr [ebx+4], 1
.text:00404258                 jnz     loc_404153
.text:0040425E                 cmp     eax, [esp+5Ch+arg_0]
.text:00404262                 jge     short loc_404279
.text:00404264                 mov     ebx, [esp+5Ch+arg_4]
.text:00404268                 lea     edi, [ecx+2]
.text:0040426B                 mov     [ebp+0], edi
.text:0040426E                 mov     esi, [ebx+eax*4]
.text:00404271                 mov     [ebp+0Ch], esi
.text:00404274                 jmp     loc_404153
.text:00404279 ; ---------------------------------------------------------------------------
.text:00404279
.text:00404279 loc_404279:                             ; CODE XREF: sub_403EB0+3B2↑j
.text:00404279                 mov     edx, [esp+5Ch+var_14]
.text:0040427D                 test    edx, edx
.text:0040427F                 jnz     short loc_4042B0
.text:00404281
.text:00404281 loc_404281:                             ; CODE XREF: sub_403EB0+437↓j
.text:00404281                 mov     edx, [ebp+14h]
.text:00404284                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404287                 call    strlen
.text:0040428C                 add     [ebp+14h], eax
.text:0040428F                 mov     eax, [esp+5Ch+var_18]
.text:00404293                 mov     edi, [eax+0Ch]
.text:00404296                 mov     [ebp+8], edi
.text:00404299
.text:00404299 loc_404299:                             ; CODE XREF: sub_403EB0+7C2↓j
.text:00404299                 mov     ebp, [esp+5Ch+Str]
.text:0040429D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004042A1                 setnz   bl
.text:004042A4                 movzx   esi, bl
.text:004042A7                 lea     eax, [esi+esi*4+3Ah]
.text:004042AB                 jmp     loc_404007
.text:004042B0 ; ---------------------------------------------------------------------------
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_403EB0+3CF↑j
.text:004042B0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004042B7                 call    ds:libintl_gettext
.text:004042BD                 mov     ecx, [ebp+0]
.text:004042C0                 mov     esi, [esp+5Ch+arg_4]
.text:004042C4                 mov     ebx, [esi+ecx*4-4]
.text:004042C8                 mov     ecx, ds:_iob
.text:004042CE                 mov     [esp+5Ch+var_50], ebx
.text:004042D2                 mov     edi, [esi]
.text:004042D4                 add     ecx, 40h ; '@'
.text:004042D7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004042DB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004042DE                 mov     [esp+5Ch+MaxCount], edi
.text:004042E2                 call    fprintf
.text:004042E7                 jmp     short loc_404281
.text:004042E7 ; ---------------------------------------------------------------------------
.text:004042E9                 align 10h
.text:004042F0
.text:004042F0 loc_4042F0:                             ; CODE XREF: sub_403EB0+21E↑j
.text:004042F0                                         ; sub_403EB0+27A↑j
.text:004042F0                 mov     eax, [esp+5Ch+arg_14]
.text:004042F4                 test    eax, eax
.text:004042F6                 jz      short loc_404326
.text:004042F8                 mov     ebx, [ebp+0]
.text:004042FB                 mov     esi, [esp+5Ch+arg_4]
.text:004042FF                 mov     edi, [esi+ebx*4]
.text:00404302                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00404306                 jz      short loc_404329
.text:00404308                 mov     ecx, [ebp+14h]
.text:0040430B                 mov     edx, [esp+5Ch+Str]
.text:0040430F                 movsx   ebx, byte ptr [ecx]
.text:00404312                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404315                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00404319                 call    strchr
.text:0040431E                 test    eax, eax
.text:00404320                 jnz     loc_4043D0
.text:00404326
.text:00404326 loc_404326:                             ; CODE XREF: sub_403EB0+446↑j
.text:00404326                 mov     ebx, [ebp+0]
.text:00404329
.text:00404329 loc_404329:                             ; CODE XREF: sub_403EB0+456↑j
.text:00404329                 mov     eax, [esp+5Ch+var_14]
.text:0040432D                 test    eax, eax
.text:0040432F                 jz      short loc_404381
.text:00404331                 mov     esi, [esp+5Ch+arg_4]
.text:00404335                 mov     edi, [esi+ebx*4]
.text:00404338                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040433C                 jz      short loc_40439A
.text:0040433E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00404345                 call    ds:libintl_gettext
.text:0040434B                 mov     edi, [ebp+14h]
.text:0040434E                 mov     [esp+5Ch+var_4C], edi
.text:00404352                 mov     ebx, [ebp+0]
.text:00404355                 mov     edi, [esp+5Ch+arg_4]
.text:00404359                 mov     esi, [edi+ebx*4]
.text:0040435C                 movsx   ecx, byte ptr [esi]
.text:0040435F                 mov     esi, ds:_iob
.text:00404365                 add     esi, 40h ; '@'
.text:00404368                 mov     [esp+5Ch+var_50], ecx
.text:0040436C                 mov     ebx, [edi]
.text:0040436E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404372                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00404375                 mov     [esp+5Ch+MaxCount], ebx
.text:00404379                 call    fprintf
.text:0040437E
.text:0040437E loc_40437E:                             ; CODE XREF: sub_403EB0+51D↓j
.text:0040437E                 mov     ebx, [ebp+0]
.text:00404381
.text:00404381 loc_404381:                             ; CODE XREF: sub_403EB0+47F↑j
.text:00404381                 mov     dword ptr [ebp+14h], offset dword_403D60
.text:00404388                 lea     edx, [ebx+1]
.text:0040438B                 mov     [ebp+0], edx
.text:0040438E
.text:0040438E loc_40438E:                             ; CODE XREF: sub_403EB0+999↓j
.text:0040438E                 mov     dword ptr [ebp+8], 0
.text:00404395                 jmp     loc_404208
.text:0040439A ; ---------------------------------------------------------------------------
.text:0040439A
.text:0040439A loc_40439A:                             ; CODE XREF: sub_403EB0+48C↑j
.text:0040439A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004043A1                 call    ds:libintl_gettext
.text:004043A7                 mov     ecx, [ebp+14h]
.text:004043AA                 mov     edi, [esp+5Ch+arg_4]
.text:004043AE                 mov     edx, ds:_iob
.text:004043B4                 mov     [esp+5Ch+var_50], ecx
.text:004043B8                 mov     ebx, [edi]
.text:004043BA                 add     edx, 40h ; '@'
.text:004043BD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004043C1                 mov     [esp+5Ch+MaxCount], ebx
.text:004043C5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004043C8                 call    fprintf
.text:004043CD                 jmp     short loc_40437E
.text:004043CD ; ---------------------------------------------------------------------------
.text:004043CF                 align 10h
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_403EB0+196↑j
.text:004043D0                                         ; sub_403EB0+1B5↑j ...
.text:004043D0                 mov     esi, [ebp+14h]
.text:004043D3                 movzx   ebx, byte ptr [esi]
.text:004043D6                 inc     esi
.text:004043D7                 mov     [ebp+14h], esi
.text:004043DA                 mov     ecx, [esp+5Ch+Str]
.text:004043DE                 movsx   esi, bl
.text:004043E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004043E5                 mov     edi, esi
.text:004043E7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004043EA                 call    strchr
.text:004043EF                 mov     ecx, [ebp+14h]
.text:004043F2                 cmp     byte ptr [ecx], 0
.text:004043F5                 jnz     short loc_4043FA
.text:004043F7                 inc     dword ptr [ebp+0]
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_403EB0+545↑j
.text:004043FA                 test    eax, eax
.text:004043FC                 jz      loc_4047E0
.text:00404402                 cmp     bl, 3Ah ; ':'
.text:00404405                 jz      loc_4047E0
.text:0040440B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040440E                 jz      loc_4044C6
.text:00404414                 movzx   edx, byte ptr [eax+1]
.text:00404418
.text:00404418 loc_404418:                             ; CODE XREF: sub_403EB0+61D↓j
.text:00404418                 cmp     dl, 3Ah ; ':'
.text:0040441B                 jz      short loc_404424
.text:0040441D
.text:0040441D loc_40441D:                             ; CODE XREF: sub_403EB0+590↓j
.text:0040441D                 mov     eax, esi
.text:0040441F                 jmp     loc_404007
.text:00404424 ; ---------------------------------------------------------------------------
.text:00404424
.text:00404424 loc_404424:                             ; CODE XREF: sub_403EB0+56B↑j
.text:00404424                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00404428                 jz      loc_4044B1
.text:0040442E                 cmp     byte ptr [ecx], 0
.text:00404431                 jz      short loc_404442
.text:00404433
.text:00404433 loc_404433:                             ; CODE XREF: sub_403EB0+604↓j
.text:00404433                 inc     dword ptr [ebp+0]
.text:00404436                 mov     [ebp+0Ch], ecx
.text:00404439
.text:00404439 loc_404439:                             ; CODE XREF: sub_403EB0+5AB↓j
.text:00404439                                         ; sub_403EB0+5C6↓j ...
.text:00404439                 mov     dword ptr [ebp+14h], 0
.text:00404440                 jmp     short loc_40441D
.text:00404442 ; ---------------------------------------------------------------------------
.text:00404442
.text:00404442 loc_404442:                             ; CODE XREF: sub_403EB0+581↑j
.text:00404442                 mov     ecx, [ebp+0]
.text:00404445                 cmp     ecx, [esp+5Ch+arg_0]
.text:00404449                 jz      short loc_40445D
.text:0040444B                 mov     eax, [esp+5Ch+arg_4]
.text:0040444F                 lea     edx, [ecx+1]
.text:00404452                 mov     [ebp+0], edx
.text:00404455                 mov     ebx, [eax+ecx*4]
.text:00404458                 mov     [ebp+0Ch], ebx
.text:0040445B                 jmp     short loc_404439
.text:0040445D ; ---------------------------------------------------------------------------
.text:0040445D
.text:0040445D loc_40445D:                             ; CODE XREF: sub_403EB0+599↑j
.text:0040445D                 mov     ecx, [esp+5Ch+var_14]
.text:00404461                 test    ecx, ecx
.text:00404463                 jnz     short loc_40447F
.text:00404465
.text:00404465 loc_404465:                             ; CODE XREF: sub_403EB0+5FF↓j
.text:00404465                 mov     [ebp+8], edi
.text:00404468                 mov     edi, [esp+5Ch+Str]
.text:0040446C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040446F                 jz      short loc_404478
.text:00404471                 mov     esi, 3Fh ; '?'
.text:00404476                 jmp     short loc_404439
.text:00404478 ; ---------------------------------------------------------------------------
.text:00404478
.text:00404478 loc_404478:                             ; CODE XREF: sub_403EB0+5BF↑j
.text:00404478                 mov     esi, 3Ah ; ':'
.text:0040447D                 jmp     short loc_404439
.text:0040447F ; ---------------------------------------------------------------------------
.text:0040447F
.text:0040447F loc_40447F:                             ; CODE XREF: sub_403EB0+5B3↑j
.text:0040447F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00404486                 call    ds:libintl_gettext
.text:0040448C                 mov     [esp+5Ch+var_50], edi
.text:00404490                 mov     ebx, [esp+5Ch+arg_4]
.text:00404494                 mov     edx, ds:_iob
.text:0040449A                 mov     esi, [ebx]
.text:0040449C                 add     edx, 40h ; '@'
.text:0040449F                 mov     [esp+5Ch+Str2], eax ; Format
.text:004044A3                 mov     [esp+5Ch+MaxCount], esi
.text:004044A7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004044AA                 call    fprintf
.text:004044AF                 jmp     short loc_404465
.text:004044B1 ; ---------------------------------------------------------------------------
.text:004044B1
.text:004044B1 loc_4044B1:                             ; CODE XREF: sub_403EB0+578↑j
.text:004044B1                 cmp     byte ptr [ecx], 0
.text:004044B4                 jnz     loc_404433
.text:004044BA                 mov     dword ptr [ebp+0Ch], 0
.text:004044C1                 jmp     loc_404439
.text:004044C6 ; ---------------------------------------------------------------------------
.text:004044C6
.text:004044C6 loc_4044C6:                             ; CODE XREF: sub_403EB0+55E↑j
.text:004044C6                 movzx   edx, byte ptr [eax+1]
.text:004044CA                 cmp     dl, 3Bh ; ';'
.text:004044CD                 jnz     loc_404418
.text:004044D3                 mov     [esp+5Ch+var_2C], 0
.text:004044DB                 mov     [esp+5Ch+var_30], 0
.text:004044E3                 mov     [esp+5Ch+var_34], 0
.text:004044EB                 mov     [esp+5Ch+var_38], 0
.text:004044F3                 cmp     byte ptr [ecx], 0
.text:004044F6                 jz      loc_40476B
.text:004044FC                 inc     dword ptr [ebp+0]
.text:004044FF                 mov     [ebp+0Ch], ecx
.text:00404502
.text:00404502 loc_404502:                             ; CODE XREF: sub_403EB0+8D4↓j
.text:00404502                 mov     edi, [ebp+0Ch]
.text:00404505                 mov     [ebp+14h], edi
.text:00404508                 movzx   eax, byte ptr [edi]
.text:0040450B                 test    al, al
.text:0040450D                 jz      short loc_40451F
.text:0040450F                 cmp     al, 3Dh ; '='
.text:00404511                 jz      short loc_40451F
.text:00404513
.text:00404513 loc_404513:                             ; CODE XREF: sub_403EB0+66D↓j
.text:00404513                 inc     edi
.text:00404514                 movzx   eax, byte ptr [edi]
.text:00404517                 test    al, al
.text:00404519                 jz      short loc_40451F
.text:0040451B                 cmp     al, 3Dh ; '='
.text:0040451D                 jnz     short loc_404513
.text:0040451F
.text:0040451F loc_40451F:                             ; CODE XREF: sub_403EB0+65D↑j
.text:0040451F                                         ; sub_403EB0+661↑j ...
.text:0040451F                 mov     [esp+5Ch+var_3C], 0
.text:00404527                 mov     esi, [esp+5Ch+arg_C]
.text:0040452B                 mov     eax, [esi]
.text:0040452D                 test    eax, eax
.text:0040452F                 jz      loc_4046B0
.text:00404535                 mov     ecx, eax
.text:00404537
.text:00404537 loc_404537:                             ; CODE XREF: sub_403EB0+6B3↓j
.text:00404537                 mov     ebx, [ebp+14h]
.text:0040453A                 mov     eax, edi
.text:0040453C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040453F                 sub     eax, ebx
.text:00404541                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00404545                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00404549                 call    strncmp
.text:0040454E                 test    eax, eax
.text:00404550                 jz      loc_404717
.text:00404556
.text:00404556 loc_404556:                             ; CODE XREF: sub_403EB0+88C↓j
.text:00404556                                         ; sub_403EB0+89D↓j
.text:00404556                 inc     [esp+5Ch+var_3C]
.text:0040455A                 add     esi, 10h
.text:0040455D                 mov     edx, [esi]
.text:0040455F                 test    edx, edx
.text:00404561                 mov     ecx, edx
.text:00404563                 jnz     short loc_404537
.text:00404565
.text:00404565 loc_404565:                             ; CODE XREF: sub_403EB0+8B6↓j
.text:00404565                 mov     esi, [esp+5Ch+var_34]
.text:00404569                 test    esi, esi
.text:0040456B                 jz      short loc_404579
.text:0040456D                 mov     ebx, [esp+5Ch+var_30]
.text:00404571                 test    ebx, ebx
.text:00404573                 jz      loc_4046C1
.text:00404579
.text:00404579 loc_404579:                             ; CODE XREF: sub_403EB0+6BB↑j
.text:00404579                 mov     esi, [esp+5Ch+var_2C]
.text:0040457D                 test    esi, esi
.text:0040457F                 jz      loc_4046B0
.text:00404585                 cmp     byte ptr [edi], 0
.text:00404588                 jz      loc_404630
.text:0040458E                 mov     ecx, [esp+5Ch+var_2C]
.text:00404592                 mov     ebx, [ecx+4]
.text:00404595                 test    ebx, ebx
.text:00404597                 jz      short loc_4045D8
.text:00404599                 lea     edx, [edi+1]
.text:0040459C                 mov     [ebp+0Ch], edx
.text:0040459F
.text:0040459F loc_40459F:                             ; CODE XREF: sub_403EB0+788↓j
.text:0040459F                                         ; sub_403EB0+7A7↓j
.text:0040459F                 mov     edi, [ebp+14h]
.text:004045A2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004045A5                 call    strlen
.text:004045AA                 add     [ebp+14h], eax
.text:004045AD                 mov     eax, [esp+5Ch+arg_10]
.text:004045B1                 test    eax, eax
.text:004045B3                 jz      short loc_4045C0
.text:004045B5                 mov     edx, [esp+5Ch+var_38]
.text:004045B9                 mov     ebp, [esp+5Ch+arg_10]
.text:004045BD                 mov     [ebp+0], edx
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: sub_403EB0+703↑j
.text:004045C0                 mov     eax, [esp+5Ch+var_2C]
.text:004045C4                 mov     ecx, [eax+8]
.text:004045C7                 test    ecx, ecx
.text:004045C9                 jnz     loc_40418A
.text:004045CF                 mov     ecx, [esp+5Ch+var_2C]
.text:004045D3                 jmp     loc_404182
.text:004045D8 ; ---------------------------------------------------------------------------
.text:004045D8
.text:004045D8 loc_4045D8:                             ; CODE XREF: sub_403EB0+6E7↑j
.text:004045D8                 mov     eax, [esp+5Ch+var_14]
.text:004045DC                 test    eax, eax
.text:004045DE                 jnz     short loc_4045F3
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: sub_403EB0+779↓j
.text:004045E0                 mov     ecx, [ebp+14h]
.text:004045E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004045E6                 call    strlen
.text:004045EB                 add     [ebp+14h], eax
.text:004045EE                 jmp     loc_404208
.text:004045F3 ; ---------------------------------------------------------------------------
.text:004045F3
.text:004045F3 loc_4045F3:                             ; CODE XREF: sub_403EB0+72E↑j
.text:004045F3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004045FA                 call    ds:libintl_gettext
.text:00404600                 mov     edx, [esp+5Ch+var_2C]
.text:00404604                 mov     ebx, [esp+5Ch+arg_4]
.text:00404608                 mov     edi, [edx]
.text:0040460A                 mov     [esp+5Ch+var_50], edi
.text:0040460E                 mov     edi, ds:_iob
.text:00404614                 mov     esi, [ebx]
.text:00404616                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040461A                 add     edi, 40h ; '@'
.text:0040461D                 mov     [esp+5Ch+MaxCount], esi
.text:00404621                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00404624                 call    fprintf
.text:00404629                 jmp     short loc_4045E0
.text:00404629 ; ---------------------------------------------------------------------------
.text:0040462B                 align 10h
.text:00404630
.text:00404630 loc_404630:                             ; CODE XREF: sub_403EB0+6D8↑j
.text:00404630                 mov     esi, [esp+5Ch+var_2C]
.text:00404634                 cmp     dword ptr [esi+4], 1
.text:00404638                 jnz     loc_40459F
.text:0040463E                 mov     ecx, [ebp+0]
.text:00404641                 cmp     ecx, [esp+5Ch+arg_0]
.text:00404645                 jge     short loc_40465C
.text:00404647                 mov     eax, [esp+5Ch+arg_4]
.text:0040464B                 lea     ebx, [ecx+1]
.text:0040464E                 mov     [ebp+0], ebx
.text:00404651                 mov     edi, [eax+ecx*4]
.text:00404654                 mov     [ebp+0Ch], edi
.text:00404657                 jmp     loc_40459F
.text:0040465C ; ---------------------------------------------------------------------------
.text:0040465C
.text:0040465C loc_40465C:                             ; CODE XREF: sub_403EB0+795↑j
.text:0040465C                 mov     edx, [esp+5Ch+var_14]
.text:00404660                 test    edx, edx
.text:00404662                 jnz     short loc_404677
.text:00404664
.text:00404664 loc_404664:                             ; CODE XREF: sub_403EB0+7FE↓j
.text:00404664                 mov     edx, [ebp+14h]
.text:00404667                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040466A                 call    strlen
.text:0040466F                 add     [ebp+14h], eax
.text:00404672                 jmp     loc_404299
.text:00404677 ; ---------------------------------------------------------------------------
.text:00404677
.text:00404677 loc_404677:                             ; CODE XREF: sub_403EB0+7B2↑j
.text:00404677                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040467E                 call    ds:libintl_gettext
.text:00404684                 mov     ecx, [ebp+0]
.text:00404687                 mov     ebx, [esp+5Ch+arg_4]
.text:0040468B                 mov     edi, [ebx+ecx*4-4]
.text:0040468F                 mov     ecx, ds:_iob
.text:00404695                 mov     [esp+5Ch+var_50], edi
.text:00404699                 mov     esi, [ebx]
.text:0040469B                 add     ecx, 40h ; '@'
.text:0040469E                 mov     [esp+5Ch+Str2], eax ; Format
.text:004046A2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004046A5                 mov     [esp+5Ch+MaxCount], esi
.text:004046A9                 call    fprintf
.text:004046AE                 jmp     short loc_404664
.text:004046B0 ; ---------------------------------------------------------------------------
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: sub_403EB0+67F↑j
.text:004046B0                                         ; sub_403EB0+6CF↑j
.text:004046B0                 mov     dword ptr [ebp+14h], 0
.text:004046B7                 mov     eax, 57h ; 'W'
.text:004046BC                 jmp     loc_404007
.text:004046C1 ; ---------------------------------------------------------------------------
.text:004046C1
.text:004046C1 loc_4046C1:                             ; CODE XREF: sub_403EB0+6C3↑j
.text:004046C1                 mov     edi, [esp+5Ch+var_14]
.text:004046C5                 test    edi, edi
.text:004046C7                 jnz     short loc_4046DF
.text:004046C9
.text:004046C9 loc_4046C9:                             ; CODE XREF: sub_403EB0+865↓j
.text:004046C9                 mov     edx, [ebp+14h]
.text:004046CC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004046CF                 call    strlen
.text:004046D4                 add     [ebp+14h], eax
.text:004046D7                 inc     dword ptr [ebp+0]
.text:004046DA                 jmp     loc_404208
.text:004046DF ; ---------------------------------------------------------------------------
.text:004046DF
.text:004046DF loc_4046DF:                             ; CODE XREF: sub_403EB0+817↑j
.text:004046DF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004046E6                 call    ds:libintl_gettext
.text:004046EC                 mov     ecx, [ebp+0]
.text:004046EF                 mov     ebx, [esp+5Ch+arg_4]
.text:004046F3                 mov     edi, [ebx+ecx*4]
.text:004046F6                 mov     ecx, ds:_iob
.text:004046FC                 mov     [esp+5Ch+var_50], edi
.text:00404700                 mov     esi, [ebx]
.text:00404702                 add     ecx, 40h ; '@'
.text:00404705                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404709                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040470C                 mov     [esp+5Ch+MaxCount], esi
.text:00404710                 call    fprintf
.text:00404715                 jmp     short loc_4046C9
.text:00404717 ; ---------------------------------------------------------------------------
.text:00404717
.text:00404717 loc_404717:                             ; CODE XREF: sub_403EB0+6A0↑j
.text:00404717                 mov     edx, [ebp+14h]
.text:0040471A                 mov     ebx, edi
.text:0040471C                 mov     ecx, [esi]
.text:0040471E                 sub     ebx, edx
.text:00404720                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404723                 call    strlen
.text:00404728                 cmp     ebx, eax
.text:0040472A                 jz      short loc_404752
.text:0040472C                 mov     ebx, [esp+5Ch+var_2C]
.text:00404730                 test    ebx, ebx
.text:00404732                 jz      short loc_404741
.text:00404734                 mov     [esp+5Ch+var_34], 1
.text:0040473C                 jmp     loc_404556
.text:00404741 ; ---------------------------------------------------------------------------
.text:00404741
.text:00404741 loc_404741:                             ; CODE XREF: sub_403EB0+882↑j
.text:00404741                 mov     [esp+5Ch+var_2C], esi
.text:00404745                 mov     ecx, [esp+5Ch+var_3C]
.text:00404749                 mov     [esp+5Ch+var_38], ecx
.text:0040474D                 jmp     loc_404556
.text:00404752 ; ---------------------------------------------------------------------------
.text:00404752
.text:00404752 loc_404752:                             ; CODE XREF: sub_403EB0+87A↑j
.text:00404752                 mov     [esp+5Ch+var_2C], esi
.text:00404756                 mov     eax, [esp+5Ch+var_3C]
.text:0040475A                 mov     [esp+5Ch+var_30], 1
.text:00404762                 mov     [esp+5Ch+var_38], eax
.text:00404766                 jmp     loc_404565
.text:0040476B ; ---------------------------------------------------------------------------
.text:0040476B
.text:0040476B loc_40476B:                             ; CODE XREF: sub_403EB0+646↑j
.text:0040476B                 mov     edx, [ebp+0]
.text:0040476E                 cmp     edx, [esp+5Ch+arg_0]
.text:00404772                 jz      short loc_404789
.text:00404774                 mov     ebx, [esp+5Ch+arg_4]
.text:00404778                 lea     esi, [edx+1]
.text:0040477B                 mov     [ebp+0], esi
.text:0040477E                 mov     edi, [ebx+edx*4]
.text:00404781                 mov     [ebp+0Ch], edi
.text:00404784                 jmp     loc_404502
.text:00404789 ; ---------------------------------------------------------------------------
.text:00404789
.text:00404789 loc_404789:                             ; CODE XREF: sub_403EB0+8C2↑j
.text:00404789                 mov     edi, [esp+5Ch+var_14]
.text:0040478D                 test    edi, edi
.text:0040478F                 jnz     short loc_4047AC
.text:00404791
.text:00404791 loc_404791:                             ; CODE XREF: sub_403EB0+92C↓j
.text:00404791                 mov     [ebp+8], esi
.text:00404794                 mov     ebp, [esp+5Ch+Str]
.text:00404798                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040479C                 jz      short loc_4047A8
.text:0040479E                 mov     bl, 3Fh ; '?'
.text:004047A0
.text:004047A0 loc_4047A0:                             ; CODE XREF: sub_403EB0+8FA↓j
.text:004047A0                 movsx   eax, bl
.text:004047A3                 jmp     loc_404007
.text:004047A8 ; ---------------------------------------------------------------------------
.text:004047A8
.text:004047A8 loc_4047A8:                             ; CODE XREF: sub_403EB0+8EC↑j
.text:004047A8                 mov     bl, 3Ah ; ':'
.text:004047AA                 jmp     short loc_4047A0
.text:004047AC ; ---------------------------------------------------------------------------
.text:004047AC
.text:004047AC loc_4047AC:                             ; CODE XREF: sub_403EB0+8DF↑j
.text:004047AC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004047B3                 call    ds:libintl_gettext
.text:004047B9                 mov     [esp+5Ch+var_50], esi
.text:004047BD                 mov     edx, [esp+5Ch+arg_4]
.text:004047C1                 mov     ecx, ds:_iob
.text:004047C7                 mov     ebx, [edx]
.text:004047C9                 add     ecx, 40h ; '@'
.text:004047CC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004047D0                 mov     [esp+5Ch+MaxCount], ebx
.text:004047D4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004047D7                 call    fprintf
.text:004047DC                 jmp     short loc_404791
.text:004047DC ; ---------------------------------------------------------------------------
.text:004047DE                 align 10h
.text:004047E0
.text:004047E0 loc_4047E0:                             ; CODE XREF: sub_403EB0+54C↑j
.text:004047E0                                         ; sub_403EB0+555↑j
.text:004047E0                 mov     eax, [esp+5Ch+var_14]
.text:004047E4                 test    eax, eax
.text:004047E6                 jz      short loc_40481F
.text:004047E8                 mov     ebx, [ebp+1Ch]
.text:004047EB                 test    ebx, ebx
.text:004047ED                 jz      short loc_404827
.text:004047EF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004047F6
.text:004047F6 loc_4047F6:                             ; CODE XREF: sub_403EB0+97E↓j
.text:004047F6                 call    ds:libintl_gettext
.text:004047FC                 mov     [esp+5Ch+var_50], esi
.text:00404800                 mov     ebx, [esp+5Ch+arg_4]
.text:00404804                 mov     edx, ds:_iob
.text:0040480A                 mov     esi, [ebx]
.text:0040480C                 add     edx, 40h ; '@'
.text:0040480F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404813                 mov     [esp+5Ch+MaxCount], esi
.text:00404817                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040481A                 call    fprintf
.text:0040481F
.text:0040481F loc_40481F:                             ; CODE XREF: sub_403EB0+936↑j
.text:0040481F                 mov     [ebp+8], edi
.text:00404822                 jmp     loc_404208
.text:00404827 ; ---------------------------------------------------------------------------
.text:00404827
.text:00404827 loc_404827:                             ; CODE XREF: sub_403EB0+93D↑j
.text:00404827                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040482E                 jmp     short loc_4047F6
.text:00404830 ; ---------------------------------------------------------------------------
.text:00404830
.text:00404830 loc_404830:                             ; CODE XREF: sub_403EB0+26E↑j
.text:00404830                 mov     edi, [esp+5Ch+var_14]
.text:00404834                 test    edi, edi
.text:00404836                 jnz     short loc_40484E
.text:00404838
.text:00404838 loc_404838:                             ; CODE XREF: sub_403EB0+9D4↓j
.text:00404838                 mov     edx, [ebp+14h]
.text:0040483B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040483E                 call    strlen
.text:00404843                 add     [ebp+14h], eax
.text:00404846                 inc     dword ptr [ebp+0]
.text:00404849                 jmp     loc_40438E
.text:0040484E ; ---------------------------------------------------------------------------
.text:0040484E
.text:0040484E loc_40484E:                             ; CODE XREF: sub_403EB0+986↑j
.text:0040484E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00404855                 call    ds:libintl_gettext
.text:0040485B                 mov     ebx, [ebp+0]
.text:0040485E                 mov     edi, [esp+5Ch+arg_4]
.text:00404862                 mov     ecx, [edi+ebx*4]
.text:00404865                 mov     ebx, ds:_iob
.text:0040486B                 mov     [esp+5Ch+var_50], ecx
.text:0040486F                 mov     esi, [edi]
.text:00404871                 add     ebx, 40h ; '@'
.text:00404874                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404878                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040487B                 mov     [esp+5Ch+MaxCount], esi
.text:0040487F                 call    fprintf
.text:00404884                 jmp     short loc_404838
.text:00404886 ; ---------------------------------------------------------------------------
.text:00404886
.text:00404886 loc_404886:                             ; CODE XREF: sub_403EB0+246↑j
.text:00404886                 mov     ecx, [ebp+14h]
.text:00404889                 mov     ebx, edi
.text:0040488B                 mov     edx, [esi]
.text:0040488D                 sub     ebx, ecx
.text:0040488F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404892                 call    strlen
.text:00404897                 cmp     ebx, eax
.text:00404899                 jz      short loc_4048F1
.text:0040489B                 mov     ebx, [esp+5Ch+var_18]
.text:0040489F                 test    ebx, ebx
.text:004048A1                 jz      short loc_4048E0
.text:004048A3                 mov     edx, [esp+5Ch+arg_14]
.text:004048A7                 test    edx, edx
.text:004048A9                 jnz     short loc_4048B7
.text:004048AB                 mov     ecx, [esp+5Ch+var_18]
.text:004048AF                 mov     ebx, [esi+4]
.text:004048B2                 cmp     [ecx+4], ebx
.text:004048B5                 jz      short loc_4048C4
.text:004048B7
.text:004048B7 loc_4048B7:                             ; CODE XREF: sub_403EB0+9F9↑j
.text:004048B7                                         ; sub_403EB0+A1A↓j ...
.text:004048B7                 mov     [esp+5Ch+var_20], 1
.text:004048BF                 jmp     loc_4040FC
.text:004048C4 ; ---------------------------------------------------------------------------
.text:004048C4
.text:004048C4 loc_4048C4:                             ; CODE XREF: sub_403EB0+A05↑j
.text:004048C4                 mov     edx, [esi+8]
.text:004048C7                 cmp     [ecx+8], edx
.text:004048CA                 jnz     short loc_4048B7
.text:004048CC                 mov     ebx, [esi+0Ch]
.text:004048CF                 cmp     [ecx+0Ch], ebx
.text:004048D2                 jnz     short loc_4048B7
.text:004048D4                 jmp     loc_4040FC
.text:004048D4 ; ---------------------------------------------------------------------------
.text:004048D9                 align 10h
.text:004048E0
.text:004048E0 loc_4048E0:                             ; CODE XREF: sub_403EB0+9F1↑j
.text:004048E0                 mov     [esp+5Ch+var_18], esi
.text:004048E4                 mov     eax, [esp+5Ch+var_28]
.text:004048E8                 mov     [esp+5Ch+var_24], eax
.text:004048EC                 jmp     loc_4040FC
.text:004048F1 ; ---------------------------------------------------------------------------
.text:004048F1
.text:004048F1 loc_4048F1:                             ; CODE XREF: sub_403EB0+9E9↑j
.text:004048F1                 mov     [esp+5Ch+var_18], esi
.text:004048F5                 mov     ecx, [esp+5Ch+var_28]
.text:004048F9                 mov     [esp+5Ch+var_1C], 1
.text:00404901                 mov     [esp+5Ch+var_24], ecx
.text:00404905                 jmp     loc_404110
.text:0040490A ; ---------------------------------------------------------------------------
.text:0040490A
.text:0040490A loc_40490A:                             ; CODE XREF: sub_403EB0+1BF↑j
.text:0040490A                 mov     eax, [esp+5Ch+Str]
.text:0040490E                 movsx   esi, dl
.text:00404911                 mov     [esp+5Ch+Str2], esi ; Val
.text:00404915                 mov     [esp+5Ch+Str1], eax ; Str
.text:00404918                 call    strchr
.text:0040491D                 test    eax, eax
.text:0040491F                 jnz     loc_4043D0
.text:00404925                 jmp     loc_404075
.text:0040492A ; ---------------------------------------------------------------------------
.text:0040492A
.text:0040492A loc_40492A:                             ; CODE XREF: sub_403EB0+17C↑j
.text:0040492A                 mov     ecx, 1
.text:0040492F                 jmp     loc_404032
.text:00404934 ; ---------------------------------------------------------------------------
.text:00404934
.text:00404934 loc_404934:                             ; CODE XREF: sub_403EB0+D4↑j
.text:00404934                                         ; sub_403EB0+130↑j
.text:00404934                 mov     eax, [ebp+20h]
.text:00404937                 cmp     eax, [ebp+24h]
.text:0040493A                 jz      loc_404010
.text:00404940                 mov     [ebp+0], eax
.text:00404943                 jmp     loc_404010
.text:00404948 ; ---------------------------------------------------------------------------
.text:00404948
.text:00404948 loc_404948:                             ; CODE XREF: sub_403EB0+FE↑j
.text:00404948                 mov     [ebp+20h], eax
.text:0040494B                 jmp     loc_403FD0
.text:00404950 ; ---------------------------------------------------------------------------
.text:00404950
.text:00404950 loc_404950:                             ; CODE XREF: sub_403EB0+CA↑j
.text:00404950                 mov     edx, [ebp+20h]
.text:00404953                 mov     eax, [ebp+24h]
.text:00404956                 cmp     edx, eax
.text:00404958                 jz      short loc_4049D0
.text:0040495A                 cmp     eax, ebx
.text:0040495C                 jz      short loc_404971
.text:0040495E                 mov     [esp+5Ch+Str2], ebp
.text:00404962                 mov     ebx, [esp+5Ch+arg_4]
.text:00404966                 mov     [esp+5Ch+Str1], ebx
.text:00404969                 call    sub_404B60
.text:0040496E                 mov     ebx, [ebp+0]
.text:00404971
.text:00404971 loc_404971:                             ; CODE XREF: sub_403EB0+AAC↑j
.text:00404971                                         ; sub_403EB0+B22↓j ...
.text:00404971                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404975                 jge     short loc_4049C0
.text:00404977                 mov     esi, [esp+5Ch+arg_4]
.text:0040497B                 mov     eax, [esi+ebx*4]
.text:0040497E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404981                 jz      short loc_4049C8
.text:00404983                 lea     esi, [esi+0]
.text:00404989                 lea     edi, [edi+0]
.text:00404990
.text:00404990 loc_404990:                             ; CODE XREF: sub_403EB0+AFC↓j
.text:00404990                                         ; sub_403EB0+B1C↓j
.text:00404990                 lea     eax, [ebx+1]
.text:00404993                 mov     ebx, eax
.text:00404995                 mov     [ebp+0], eax
.text:00404998                 cmp     eax, [esp+5Ch+arg_0]
.text:0040499C                 jge     short loc_4049C0
.text:0040499E                 mov     edi, [esp+5Ch+arg_4]
.text:004049A2                 mov     edx, [edi+eax*4]
.text:004049A5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004049A8                 jz      short loc_4049B0
.text:004049AA
.text:004049AA loc_4049AA:                             ; CODE XREF: sub_403EB0+B04↓j
.text:004049AA                 mov     ebx, eax
.text:004049AC                 jmp     short loc_404990
.text:004049AC ; ---------------------------------------------------------------------------
.text:004049AE                 align 10h
.text:004049B0
.text:004049B0 loc_4049B0:                             ; CODE XREF: sub_403EB0+AF8↑j
.text:004049B0                 cmp     byte ptr [edx+1], 0
.text:004049B4                 jz      short loc_4049AA
.text:004049B6                 lea     esi, [esi+0]
.text:004049B9                 lea     edi, [edi+0]
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: sub_403EB0+AC5↑j
.text:004049C0                                         ; sub_403EB0+AEC↑j ...
.text:004049C0                 mov     [ebp+24h], ebx
.text:004049C3                 jmp     loc_403F80
.text:004049C8 ; ---------------------------------------------------------------------------
.text:004049C8
.text:004049C8 loc_4049C8:                             ; CODE XREF: sub_403EB0+AD1↑j
.text:004049C8                 cmp     byte ptr [eax+1], 0
.text:004049CC                 jz      short loc_404990
.text:004049CE                 jmp     short loc_4049C0
.text:004049D0 ; ---------------------------------------------------------------------------
.text:004049D0
.text:004049D0 loc_4049D0:                             ; CODE XREF: sub_403EB0+AA8↑j
.text:004049D0                 cmp     edx, ebx
.text:004049D2                 jz      short loc_404971
.text:004049D4                 mov     [ebp+20h], ebx
.text:004049D7                 jmp     short loc_404971
.text:004049D9 ; ---------------------------------------------------------------------------
.text:004049D9
.text:004049D9 loc_4049D9:                             ; CODE XREF: sub_403EB0+88↑j
.text:004049D9                 mov     dword ptr [ebp+18h], 0
.text:004049E0                 mov     esi, [esp+5Ch+Str]
.text:004049E4
.text:004049E4 loc_4049E4:                             ; CODE XREF: sub_403EB0+B49↓j
.text:004049E4                 inc     esi
.text:004049E5                 jmp     loc_403F48
.text:004049E5 ; ---------------------------------------------------------------------------
.text:004049EA                 align 10h
.text:004049F0
.text:004049F0 loc_4049F0:                             ; CODE XREF: sub_403EB0+80↑j
.text:004049F0                 mov     dword ptr [ebp+18h], 2
.text:004049F7                 mov     esi, ecx
.text:004049F9                 jmp     short loc_4049E4
.text:004049F9 ; ---------------------------------------------------------------------------
.text:004049FB                 align 10h
.text:00404A00
.text:00404A00 loc_404A00:                             ; CODE XREF: sub_403EB0+69↑j
.text:00404A00                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00404A07                 call    getenv
.text:00404A0C                 test    eax, eax
.text:00404A0E                 jz      loc_403F24
.text:00404A14                 jmp     loc_403F1F
.text:00404A14 ; ---------------------------------------------------------------------------
.text:00404A19                 align 10h
.text:00404A20
.text:00404A20 loc_404A20:                             ; CODE XREF: sub_403EB0+3F↑j
.text:00404A20                 mov     dword ptr [ebp+0], 1
.text:00404A27                 mov     ebx, 1
.text:00404A2C                 jmp     loc_403F00
.text:00404A2C sub_403EB0      endp
.text:00404A2C
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A31                 jmp     short sub_404A40
.text:00404A31 ; ---------------------------------------------------------------------------
.text:00404A33                 align 10h
.text:00404A40
.text:00404A40 ; =============== S U B R O U T I N E =======================================
.text:00404A40
.text:00404A40
.text:00404A40 ; int __cdecl sub_404A40(int, int, char *, int, int, int, int)
.text:00404A40 sub_404A40      proc near               ; CODE XREF: .text:00404A31↑j
.text:00404A40                                         ; sub_405180+3A↓p ...
.text:00404A40
.text:00404A40 var_2C          = dword ptr -2Ch
.text:00404A40 var_28          = dword ptr -28h
.text:00404A40 Str             = dword ptr -24h
.text:00404A40 var_20          = dword ptr -20h
.text:00404A40 var_1C          = dword ptr -1Ch
.text:00404A40 var_18          = dword ptr -18h
.text:00404A40 var_14          = dword ptr -14h
.text:00404A40 var_10          = dword ptr -10h
.text:00404A40 arg_0           = dword ptr  4
.text:00404A40 arg_4           = dword ptr  8
.text:00404A40 arg_8           = dword ptr  0Ch
.text:00404A40 arg_C           = dword ptr  10h
.text:00404A40 arg_10          = dword ptr  14h
.text:00404A40 arg_14          = dword ptr  18h
.text:00404A40 arg_18          = dword ptr  1Ch
.text:00404A40
.text:00404A40                 sub     esp, 2Ch
.text:00404A43                 mov     edx, dword_411020
.text:00404A49                 mov     [esp+2Ch+var_10], offset dword_412030 ; int
.text:00404A51                 mov     ecx, dword_411024
.text:00404A57                 mov     ds:dword_412030, edx
.text:00404A5D                 mov     edx, [esp+2Ch+arg_18]
.text:00404A61                 mov     ds:dword_412034, ecx
.text:00404A67                 mov     ecx, [esp+2Ch+arg_14]
.text:00404A6B                 mov     [esp+2Ch+var_14], edx ; int
.text:00404A6F                 mov     edx, [esp+2Ch+arg_10]
.text:00404A73                 mov     [esp+2Ch+var_18], ecx ; int
.text:00404A77                 mov     ecx, [esp+2Ch+arg_C]
.text:00404A7B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00404A7F                 mov     edx, [esp+2Ch+arg_8]
.text:00404A83                 mov     [esp+2Ch+var_20], ecx ; int
.text:00404A87                 mov     ecx, [esp+2Ch+arg_4]
.text:00404A8B                 mov     [esp+2Ch+Str], edx ; Str
.text:00404A8F                 mov     edx, [esp+2Ch+arg_0]
.text:00404A93                 mov     [esp+2Ch+var_28], ecx ; int
.text:00404A97                 mov     [esp+2Ch+var_2C], edx ; int
.text:00404A9A                 call    sub_403EB0
.text:00404A9F                 mov     ecx, ds:dword_412030
.text:00404AA5                 mov     dword_411020, ecx
.text:00404AAB                 mov     ecx, ds:dword_41203C
.text:00404AB1                 mov     ds:dword_412500, ecx
.text:00404AB7                 mov     ecx, ds:dword_412038
.text:00404ABD                 mov     dword_411028, ecx
.text:00404AC3                 add     esp, 2Ch
.text:00404AC6                 retn
.text:00404AC6 sub_404A40      endp
.text:00404AC6
.text:00404AC6 ; ---------------------------------------------------------------------------
.text:00404AC7                 align 10h
.text:00404AD0                 sub     esp, 2Ch
.text:00404AD3                 mov     edx, dword_411020
.text:00404AD9                 mov     dword ptr [esp+1Ch], offset dword_412030
.text:00404AE1                 mov     ecx, dword_411024
.text:00404AE7                 mov     dword ptr [esp+18h], 1
.text:00404AEF                 mov     ds:dword_412030, edx
.text:00404AF5                 mov     edx, [esp+38h]
.text:00404AF9                 mov     ds:dword_412034, ecx
.text:00404AFF                 mov     ecx, [esp+34h]
.text:00404B03                 mov     [esp+8], edx
.text:00404B07                 mov     edx, [esp+30h]
.text:00404B0B                 mov     [esp+4], ecx
.text:00404B0F                 mov     dword ptr [esp+14h], 0
.text:00404B17                 mov     dword ptr [esp+10h], 0
.text:00404B1F                 mov     dword ptr [esp+0Ch], 0
.text:00404B27                 mov     [esp], edx
.text:00404B2A                 call    sub_403EB0
.text:00404B2F                 mov     ecx, ds:dword_412030
.text:00404B35                 mov     dword_411020, ecx
.text:00404B3B                 mov     ecx, ds:dword_41203C
.text:00404B41                 mov     ds:dword_412500, ecx
.text:00404B47                 mov     ecx, ds:dword_412038
.text:00404B4D                 mov     dword_411028, ecx
.text:00404B53                 add     esp, 2Ch
.text:00404B56                 retn
.text:00404B56 ; ---------------------------------------------------------------------------
.text:00404B57                 align 10h
.text:00404B60
.text:00404B60 ; =============== S U B R O U T I N E =======================================
.text:00404B60
.text:00404B60
.text:00404B60 sub_404B60      proc near               ; CODE XREF: sub_403EB0+113↑p
.text:00404B60                                         ; sub_403EB0+AB9↑p
.text:00404B60
.text:00404B60 var_2C          = dword ptr -2Ch
.text:00404B60 var_28          = dword ptr -28h
.text:00404B60 var_24          = dword ptr -24h
.text:00404B60 var_20          = dword ptr -20h
.text:00404B60 var_1C          = dword ptr -1Ch
.text:00404B60 var_18          = dword ptr -18h
.text:00404B60 var_14          = dword ptr -14h
.text:00404B60 arg_0           = dword ptr  4
.text:00404B60 arg_4           = dword ptr  8
.text:00404B60
.text:00404B60                 push    ebp
.text:00404B61                 push    edi
.text:00404B62                 push    esi
.text:00404B63                 push    ebx
.text:00404B64                 sub     esp, 1Ch
.text:00404B67                 mov     ecx, [esp+2Ch+arg_4]
.text:00404B6B                 mov     eax, [esp+2Ch+arg_4]
.text:00404B6F                 mov     ebx, [esp+2Ch+arg_4]
.text:00404B73                 mov     edx, [ecx+20h]
.text:00404B76                 mov     edi, [esp+2Ch+arg_0]
.text:00404B7A                 mov     ecx, [ebx]
.text:00404B7C                 mov     [esp+2Ch+var_2C], edx
.text:00404B7F                 mov     [esp+2Ch+var_14], edx
.text:00404B83                 mov     edx, [eax+24h]
.text:00404B86                 mov     [esp+2Ch+var_28], ecx
.text:00404B8A                 mov     [esp+2Ch+var_1C], ecx
.text:00404B8E                 cmp     ecx, edx
.text:00404B90                 mov     [esp+2Ch+var_18], edx
.text:00404B94                 jle     short loc_404C10
.text:00404B96                 mov     esi, [esp+2Ch+var_2C]
.text:00404B99                 cmp     edx, esi
.text:00404B9B                 jle     short loc_404C10
.text:00404B9D                 lea     esi, [esi+0]
.text:00404BA0
.text:00404BA0 loc_404BA0:                             ; CODE XREF: sub_404B60+A1↓j
.text:00404BA0                 mov     ebx, [esp+2Ch+var_1C]
.text:00404BA4                 mov     edx, [esp+2Ch+var_18]
.text:00404BA8                 mov     ebp, [esp+2Ch+var_18]
.text:00404BAC                 mov     eax, [esp+2Ch+var_14]
.text:00404BB0                 sub     ebx, edx
.text:00404BB2                 mov     [esp+2Ch+var_20], ebx
.text:00404BB6                 sub     ebp, eax
.text:00404BB8                 cmp     ebx, ebp
.text:00404BBA                 jle     short loc_404C35
.text:00404BBC                 xor     esi, esi
.text:00404BBE                 cmp     esi, ebp
.text:00404BC0                 jge     short loc_404BED
.text:00404BC2                 mov     ecx, [esp+2Ch+var_1C]
.text:00404BC6                 sub     ecx, ebp
.text:00404BC8                 mov     [esp+2Ch+var_24], ecx
.text:00404BCC                 lea     esi, [esi+0]
.text:00404BD0
.text:00404BD0 loc_404BD0:                             ; CODE XREF: sub_404B60+8B↓j
.text:00404BD0                 mov     ecx, [esp+2Ch+var_14]
.text:00404BD4                 mov     edx, [esp+2Ch+var_24]
.text:00404BD8                 add     ecx, esi
.text:00404BDA                 add     edx, esi
.text:00404BDC                 mov     ebx, [edi+ecx*4]
.text:00404BDF                 mov     eax, [edi+edx*4]
.text:00404BE2                 inc     esi
.text:00404BE3                 cmp     esi, ebp
.text:00404BE5                 mov     [edi+ecx*4], eax
.text:00404BE8                 mov     [edi+edx*4], ebx
.text:00404BEB                 jl      short loc_404BD0
.text:00404BED
.text:00404BED loc_404BED:                             ; CODE XREF: sub_404B60+60↑j
.text:00404BED                 sub     [esp+2Ch+var_1C], ebp
.text:00404BF1
.text:00404BF1 loc_404BF1:                             ; CODE XREF: sub_404B60+107↓j
.text:00404BF1                 mov     eax, [esp+2Ch+var_18]
.text:00404BF5                 cmp     [esp+2Ch+var_1C], eax
.text:00404BF9                 jle     short loc_404C10
.text:00404BFB                 mov     ebp, [esp+2Ch+var_14]
.text:00404BFF                 cmp     eax, ebp
.text:00404C01                 jg      short loc_404BA0
.text:00404C03                 lea     esi, [esi+0]
.text:00404C09                 lea     edi, [edi+0]
.text:00404C10
.text:00404C10 loc_404C10:                             ; CODE XREF: sub_404B60+34↑j
.text:00404C10                                         ; sub_404B60+3B↑j ...
.text:00404C10                 mov     esi, [esp+2Ch+var_28]
.text:00404C14                 mov     ecx, [esp+2Ch+var_18]
.text:00404C18                 mov     eax, [esp+2Ch+var_2C]
.text:00404C1B                 mov     edi, [esp+2Ch+arg_4]
.text:00404C1F                 mov     edx, [esp+2Ch+var_28]
.text:00404C23                 sub     esi, ecx
.text:00404C25                 add     esi, eax
.text:00404C27                 mov     [edi+20h], esi
.text:00404C2A                 mov     [edi+24h], edx
.text:00404C2D                 add     esp, 1Ch
.text:00404C30                 pop     ebx
.text:00404C31                 pop     esi
.text:00404C32                 pop     edi
.text:00404C33                 pop     ebp
.text:00404C34                 retn
.text:00404C35 ; ---------------------------------------------------------------------------
.text:00404C35
.text:00404C35 loc_404C35:                             ; CODE XREF: sub_404B60+5A↑j
.text:00404C35                 xor     esi, esi
.text:00404C37                 cmp     esi, [esp+2Ch+var_20]
.text:00404C3B                 jge     short loc_404C5F
.text:00404C3D                 lea     esi, [esi+0]
.text:00404C40
.text:00404C40 loc_404C40:                             ; CODE XREF: sub_404B60+FD↓j
.text:00404C40                 mov     ebx, [esp+2Ch+var_14]
.text:00404C44                 mov     ebp, [esp+2Ch+var_18]
.text:00404C48                 add     ebx, esi
.text:00404C4A                 add     ebp, esi
.text:00404C4C                 mov     edx, [edi+ebx*4]
.text:00404C4F                 inc     esi
.text:00404C50                 cmp     esi, [esp+2Ch+var_20]
.text:00404C54                 mov     ecx, [edi+ebp*4]
.text:00404C57                 mov     [edi+ebx*4], ecx
.text:00404C5A                 mov     [edi+ebp*4], edx
.text:00404C5D                 jl      short loc_404C40
.text:00404C5F
.text:00404C5F loc_404C5F:                             ; CODE XREF: sub_404B60+DB↑j
.text:00404C5F                 mov     esi, [esp+2Ch+var_20]
.text:00404C63                 add     [esp+2Ch+var_14], esi
.text:00404C67                 jmp     short loc_404BF1
.text:00404C67 sub_404B60      endp
.text:00404C67
.text:00404C67 ; ---------------------------------------------------------------------------
.text:00404C69                 align 20h
.text:00404C80 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404C80                                         ; DATA XREF: .data:Buffer↓o
.text:00404CB2 ; const char aSSS[]
.text:00404CB2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404F70+50↓o
.text:00404CBE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00404CBE                                         ; DATA XREF: sub_404F70:loc_405011↓o
.text:00404CCE                 align 20h
.text:00404CE0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00404CE0                                         ; DATA XREF: sub_404F70+100↓o
.text:00404CE0                 db 'ere is NO',0Ah
.text:00404CE0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00404CE0                 db 'R PURPOSE.',0Ah,0
.text:00404D78 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404D78                                         ; DATA XREF: sub_404F70:loc_4050B1↓o
.text:00404D8F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00404D8F                                         ; DATA XREF: sub_404F70:loc_4050BD↓o
.text:00404DAB                 align 20h
.text:00404DC0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00404DC0                                         ; DATA XREF: sub_404F70:loc_4050C9↓o
.text:00404DC0                 db 'and %s.',0Ah,0
.text:00404DE0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00404DE0                                         ; DATA XREF: sub_404F70:loc_4050D5↓o
.text:00404DE0                 db '%s, and %s.',0Ah,0
.text:00404E04                 align 20h
.text:00404E20 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404E20                                         ; DATA XREF: sub_404F70:loc_4050E1↓o
.text:00404E20                 db '%s, %s, and %s.',0Ah,0
.text:00404E48                 align 20h
.text:00404E60 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404E60                                         ; DATA XREF: sub_404F70:loc_4050ED↓o
.text:00404E60                 db '%s, %s, %s, and %s.',0Ah,0
.text:00404E8C                 align 20h
.text:00404EA0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00404EA0                                         ; DATA XREF: sub_404F70:loc_4050F9↓o
.text:00404EA0                 db '%s, %s, %s, %s,',0Ah
.text:00404EA0                 db 'and %s.',0Ah,0
.text:00404ED0                 align 20h
.text:00404EE0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00404EE0                                         ; DATA XREF: sub_404F70:loc_405105↓o
.text:00404EE0                 db '%s, %s, %s, %s,',0Ah
.text:00404EE0                 db '%s, and %s.',0Ah,0
.text:00404F14                 align 10h
.text:00404F20 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404F20                                         ; DATA XREF: sub_404F70:def_404FDD↓o
.text:00404F20                 db '%s, %s, %s, %s,',0Ah
.text:00404F20                 db '%s, %s, and others.',0Ah,0
.text:00404F5C ; const char aSS_1[]
.text:00404F5C aSS_1           db '%s %s',0Ah,0        ; DATA XREF: sub_404F70+1B5↓o
.text:00404F63                 align 10h
.text:00404F70
.text:00404F70 ; =============== S U B R O U T I N E =======================================
.text:00404F70
.text:00404F70
.text:00404F70 ; int __cdecl sub_404F70(FILE *, FILE *, int, int, va_list)
.text:00404F70 sub_404F70      proc near               ; CODE XREF: sub_405140+2A↓p
.text:00404F70
.text:00404F70 Stream          = dword ptr -2Ch
.text:00404F70 Format          = dword ptr -28h
.text:00404F70 ArgList         = dword ptr -24h
.text:00404F70 var_20          = dword ptr -20h
.text:00404F70 var_1C          = dword ptr -1Ch
.text:00404F70 var_14          = dword ptr -14h
.text:00404F70 arg_0           = dword ptr  4
.text:00404F70 arg_4           = dword ptr  8
.text:00404F70 arg_8           = dword ptr  0Ch
.text:00404F70 arg_C           = dword ptr  10h
.text:00404F70 arg_10          = dword ptr  14h
.text:00404F70
.text:00404F70                 push    ebp
.text:00404F71                 push    edi
.text:00404F72                 push    esi
.text:00404F73                 push    ebx
.text:00404F74                 sub     esp, 1Ch
.text:00404F77                 xor     ebx, ebx
.text:00404F79                 mov     edi, [esp+2Ch+arg_10]
.text:00404F7D                 mov     edx, [esp+2Ch+arg_8]
.text:00404F81                 mov     esi, [esp+2Ch+arg_0]
.text:00404F85                 mov     eax, [edi]
.text:00404F87                 mov     ecx, [esp+2Ch+arg_4]
.text:00404F8B                 mov     [esp+2Ch+var_14], edx
.text:00404F8F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404F93                 lea     edx, [edi+4]
.text:00404F96                 test    eax, eax
.text:00404F98                 jz      short loc_404FAC
.text:00404F9A                 lea     esi, [esi+0]
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_404F70+3A↓j
.text:00404FA0                 mov     eax, edx
.text:00404FA2                 inc     ebx
.text:00404FA3                 mov     eax, [eax]
.text:00404FA5                 add     edx, 4
.text:00404FA8                 test    eax, eax
.text:00404FAA                 jnz     short loc_404FA0
.text:00404FAC
.text:00404FAC loc_404FAC:                             ; CODE XREF: sub_404F70+28↑j
.text:00404FAC                 test    ecx, ecx
.text:00404FAE                 jz      loc_40511D
.text:00404FB4                 mov     [esp+2Ch+var_1C], ebp
.text:00404FB8                 mov     edx, [esp+2Ch+var_14]
.text:00404FBC                 mov     [esp+2Ch+ArgList], ecx
.text:00404FC0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00404FC8                 mov     [esp+2Ch+var_20], edx
.text:00404FCC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404FCF                 call    fprintf
.text:00404FD4
.text:00404FD4 loc_404FD4:                             ; CODE XREF: sub_404F70+1C9↓j
.text:00404FD4                 cmp     ebx, 9          ; switch 10 cases
.text:00404FD7                 ja      def_404FDD      ; jumptable 00404FDD default case
.text:00404FDD                 jmp     ds:jpt_404FDD[ebx*4] ; switch jump
.text:00404FDD ; ---------------------------------------------------------------------------
.text:00404FE4 jpt_404FDD      dd offset loc_40500C    ; DATA XREF: sub_404F70+6D↑r
.text:00404FE4                 dd offset loc_405011    ; jump table for switch statement
.text:00404FE4                 dd offset loc_4050B1
.text:00404FE4                 dd offset loc_4050BD
.text:00404FE4                 dd offset loc_4050C9
.text:00404FE4                 dd offset loc_4050D5
.text:00404FE4                 dd offset loc_4050E1
.text:00404FE4                 dd offset loc_4050ED
.text:00404FE4                 dd offset loc_4050F9
.text:00404FE4                 dd offset loc_405105
.text:0040500C ; ---------------------------------------------------------------------------
.text:0040500C
.text:0040500C loc_40500C:                             ; CODE XREF: sub_404F70+6D↑j
.text:0040500C                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:0040500C                 call    abort           ; jumptable 00404FDD case 0
.text:00405011 ; ---------------------------------------------------------------------------
.text:00405011
.text:00405011 loc_405011:                             ; CODE XREF: sub_404F70+6D↑j
.text:00405011                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:00405011                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00404FDD case 1
.text:00405018                 nop
.text:00405019                 lea     esi, [esi+0]
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_404F70+148↓j
.text:00405020                                         ; sub_404F70+154↓j ...
.text:00405020                 call    ds:libintl_gettext
.text:00405026                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040502A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040502D                 mov     [esp+2Ch+Format], eax ; Format
.text:00405031                 call    vfprintf
.text:00405036                 mov     ebx, [esi+4]
.text:00405039                 dec     ebx
.text:0040503A                 test    ebx, ebx
.text:0040503C                 mov     [esi+4], ebx
.text:0040503F                 js      short loc_40509F
.text:00405041                 mov     edi, [esi]
.text:00405043                 mov     byte ptr [edi], 0Ah
.text:00405046                 inc     dword ptr [esi]
.text:00405048
.text:00405048 loc_405048:                             ; CODE XREF: sub_404F70+13F↓j
.text:00405048                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040504C                 mov     edx, Buffer
.text:00405052                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00405055                 call    fputs
.text:0040505A                 mov     ebp, [esi+4]
.text:0040505D                 dec     ebp
.text:0040505E                 test    ebp, ebp
.text:00405060                 mov     [esi+4], ebp
.text:00405063                 js      short loc_40508D
.text:00405065                 mov     ecx, [esi]
.text:00405067                 mov     byte ptr [ecx], 0Ah
.text:0040506A                 inc     dword ptr [esi]
.text:0040506C
.text:0040506C loc_40506C:                             ; CODE XREF: sub_404F70+12D↓j
.text:0040506C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405070                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00405077                 call    ds:libintl_gettext
.text:0040507D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405081                 add     esp, 1Ch
.text:00405084                 pop     ebx
.text:00405085                 pop     esi
.text:00405086                 pop     edi
.text:00405087                 pop     ebp
.text:00405088                 jmp     fputs
.text:0040508D ; ---------------------------------------------------------------------------
.text:0040508D
.text:0040508D loc_40508D:                             ; CODE XREF: sub_404F70+F3↑j
.text:0040508D                 mov     [esp+2Ch+Format], esi ; File
.text:00405091                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405098                 call    _flsbuf
.text:0040509D                 jmp     short loc_40506C
.text:0040509F ; ---------------------------------------------------------------------------
.text:0040509F
.text:0040509F loc_40509F:                             ; CODE XREF: sub_404F70+CF↑j
.text:0040509F                 mov     [esp+2Ch+Format], esi ; File
.text:004050A3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004050AA                 call    _flsbuf
.text:004050AF                 jmp     short loc_405048
.text:004050B1 ; ---------------------------------------------------------------------------
.text:004050B1
.text:004050B1 loc_4050B1:                             ; CODE XREF: sub_404F70+6D↑j
.text:004050B1                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:004050B1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00404FDD case 2
.text:004050B8                 jmp     loc_405020
.text:004050BD ; ---------------------------------------------------------------------------
.text:004050BD
.text:004050BD loc_4050BD:                             ; CODE XREF: sub_404F70+6D↑j
.text:004050BD                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:004050BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00404FDD case 3
.text:004050C4                 jmp     loc_405020
.text:004050C9 ; ---------------------------------------------------------------------------
.text:004050C9
.text:004050C9 loc_4050C9:                             ; CODE XREF: sub_404F70+6D↑j
.text:004050C9                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:004050C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00404FDD case 4
.text:004050D0                 jmp     loc_405020
.text:004050D5 ; ---------------------------------------------------------------------------
.text:004050D5
.text:004050D5 loc_4050D5:                             ; CODE XREF: sub_404F70+6D↑j
.text:004050D5                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:004050D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00404FDD case 5
.text:004050DC                 jmp     loc_405020
.text:004050E1 ; ---------------------------------------------------------------------------
.text:004050E1
.text:004050E1 loc_4050E1:                             ; CODE XREF: sub_404F70+6D↑j
.text:004050E1                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:004050E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00404FDD case 6
.text:004050E8                 jmp     loc_405020
.text:004050ED ; ---------------------------------------------------------------------------
.text:004050ED
.text:004050ED loc_4050ED:                             ; CODE XREF: sub_404F70+6D↑j
.text:004050ED                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:004050ED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00404FDD case 7
.text:004050F4                 jmp     loc_405020
.text:004050F9 ; ---------------------------------------------------------------------------
.text:004050F9
.text:004050F9 loc_4050F9:                             ; CODE XREF: sub_404F70+6D↑j
.text:004050F9                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:004050F9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00404FDD case 8
.text:00405100                 jmp     loc_405020
.text:00405105 ; ---------------------------------------------------------------------------
.text:00405105
.text:00405105 loc_405105:                             ; CODE XREF: sub_404F70+6D↑j
.text:00405105                                         ; DATA XREF: sub_404F70:jpt_404FDD↑o
.text:00405105                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00404FDD case 9
.text:0040510C                 jmp     loc_405020
.text:00405111 ; ---------------------------------------------------------------------------
.text:00405111
.text:00405111 def_404FDD:                             ; CODE XREF: sub_404F70+67↑j
.text:00405111                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00404FDD default case
.text:00405118                 jmp     loc_405020
.text:0040511D ; ---------------------------------------------------------------------------
.text:0040511D
.text:0040511D loc_40511D:                             ; CODE XREF: sub_404F70+3E↑j
.text:0040511D                 mov     [esp+2Ch+var_20], ebp
.text:00405121                 mov     ecx, [esp+2Ch+var_14]
.text:00405125                 mov     [esp+2Ch+Format], offset aSS_1 ; "%s %s\n"
.text:0040512D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405130                 mov     [esp+2Ch+ArgList], ecx
.text:00405134                 call    fprintf
.text:00405139                 jmp     loc_404FD4
.text:00405139 sub_404F70      endp
.text:00405139
.text:00405139 ; ---------------------------------------------------------------------------
.text:0040513E                 align 10h
.text:00405140
.text:00405140 ; =============== S U B R O U T I N E =======================================
.text:00405140
.text:00405140
.text:00405140 ; int __cdecl sub_405140(FILE *, FILE *, int, int, char)
.text:00405140 sub_405140      proc near               ; CODE XREF: sub_401A30+28F↑p
.text:00405140
.text:00405140 var_1C          = dword ptr -1Ch
.text:00405140 var_18          = dword ptr -18h
.text:00405140 var_14          = dword ptr -14h
.text:00405140 var_10          = dword ptr -10h
.text:00405140 var_C           = dword ptr -0Ch
.text:00405140 arg_0           = dword ptr  4
.text:00405140 arg_4           = dword ptr  8
.text:00405140 arg_8           = dword ptr  0Ch
.text:00405140 arg_C           = dword ptr  10h
.text:00405140 arg_10          = byte ptr  14h
.text:00405140
.text:00405140                 sub     esp, 1Ch
.text:00405143                 mov     edx, [esp+1Ch+arg_C]
.text:00405147                 lea     ecx, [esp+1Ch+arg_10]
.text:0040514B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040514F                 mov     ecx, [esp+1Ch+arg_8]
.text:00405153                 mov     [esp+1Ch+var_10], edx ; int
.text:00405157                 mov     edx, [esp+1Ch+arg_4]
.text:0040515B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040515F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00405163                 mov     edx, [esp+1Ch+arg_0]
.text:00405167                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040516A                 call    sub_404F70
.text:0040516F                 add     esp, 1Ch
.text:00405172                 retn
.text:00405172 sub_405140      endp
.text:00405172
.text:00405172 ; ---------------------------------------------------------------------------
.text:00405173                 align 10h
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180
.text:00405180 ; int __cdecl sub_405180(int, int, char *, int, int)
.text:00405180 sub_405180      proc near               ; CODE XREF: sub_401A30+E5↑p
.text:00405180
.text:00405180 var_1C          = dword ptr -1Ch
.text:00405180 var_18          = dword ptr -18h
.text:00405180 var_14          = dword ptr -14h
.text:00405180 var_10          = dword ptr -10h
.text:00405180 var_C           = dword ptr -0Ch
.text:00405180 var_8           = dword ptr -8
.text:00405180 var_4           = dword ptr -4
.text:00405180 arg_0           = dword ptr  4
.text:00405180 arg_4           = dword ptr  8
.text:00405180 arg_8           = dword ptr  0Ch
.text:00405180 arg_C           = dword ptr  10h
.text:00405180 arg_10          = dword ptr  14h
.text:00405180
.text:00405180                 sub     esp, 1Ch
.text:00405183                 mov     edx, [esp+1Ch+arg_C]
.text:00405187                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040518F                 mov     ecx, [esp+1Ch+arg_10]
.text:00405193                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040519B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040519F                 mov     edx, [esp+1Ch+arg_4]
.text:004051A3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004051A7                 mov     ecx, [esp+1Ch+arg_8]
.text:004051AB                 mov     [esp+1Ch+var_18], edx ; int
.text:004051AF                 mov     edx, [esp+1Ch+arg_0]
.text:004051B3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004051B7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004051BA                 call    sub_404A40
.text:004051BF                 add     esp, 1Ch
.text:004051C2                 retn
.text:004051C2 sub_405180      endp
.text:004051C2
.text:004051C2 ; ---------------------------------------------------------------------------
.text:004051C3                 align 10h
.text:004051D0                 sub     esp, 2Ch
.text:004051D3                 mov     edx, [esp+44h]
.text:004051D7                 mov     dword ptr [esp+18h], 0
.text:004051DF                 mov     ecx, [esp+40h]
.text:004051E3                 mov     dword ptr [esp+14h], 0
.text:004051EB                 mov     [esp+1Ch], edx
.text:004051EF                 mov     edx, [esp+3Ch]
.text:004051F3                 mov     [esp+10h], ecx
.text:004051F7                 mov     ecx, [esp+38h]
.text:004051FB                 mov     [esp+0Ch], edx
.text:004051FF                 mov     edx, [esp+34h]
.text:00405203                 mov     [esp+8], ecx
.text:00405207                 mov     [esp+4], edx
.text:0040520B                 mov     edx, [esp+30h]
.text:0040520F                 mov     [esp], edx
.text:00405212                 call    sub_403EB0
.text:00405217                 add     esp, 2Ch
.text:0040521A                 retn
.text:0040521A ; ---------------------------------------------------------------------------
.text:0040521B                 align 10h
.text:00405220                 sub     esp, 1Ch
.text:00405223                 mov     edx, [esp+2Ch]
.text:00405227                 mov     dword ptr [esp+18h], 0
.text:0040522F                 mov     ecx, [esp+30h]
.text:00405233                 mov     dword ptr [esp+14h], 1
.text:0040523B                 mov     [esp+0Ch], edx
.text:0040523F                 mov     edx, [esp+24h]
.text:00405243                 mov     [esp+10h], ecx
.text:00405247                 mov     ecx, [esp+28h]
.text:0040524B                 mov     [esp+4], edx
.text:0040524F                 mov     edx, [esp+20h]
.text:00405253                 mov     [esp+8], ecx
.text:00405257                 mov     [esp], edx
.text:0040525A                 call    sub_404A40
.text:0040525F                 add     esp, 1Ch
.text:00405262                 retn
.text:00405262 ; ---------------------------------------------------------------------------
.text:00405263                 align 10h
.text:00405270                 sub     esp, 2Ch
.text:00405273                 mov     edx, [esp+44h]
.text:00405277                 mov     dword ptr [esp+18h], 0
.text:0040527F                 mov     ecx, [esp+40h]
.text:00405283                 mov     dword ptr [esp+14h], 1
.text:0040528B                 mov     [esp+1Ch], edx
.text:0040528F                 mov     edx, [esp+3Ch]
.text:00405293                 mov     [esp+10h], ecx
.text:00405297                 mov     ecx, [esp+38h]
.text:0040529B                 mov     [esp+0Ch], edx
.text:0040529F                 mov     edx, [esp+34h]
.text:004052A3                 mov     [esp+8], ecx
.text:004052A7                 mov     [esp+4], edx
.text:004052AB                 mov     edx, [esp+30h]
.text:004052AF                 mov     [esp], edx
.text:004052B2                 call    sub_403EB0
.text:004052B7                 add     esp, 2Ch
.text:004052BA                 retn
.text:004052BA ; ---------------------------------------------------------------------------
.text:004052BB                 align 10h
.text:004052C0 ; const char aPosix2Version[]
.text:004052C0 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_4052D0+C↓o
.text:004052D0
.text:004052D0 ; =============== S U B R O U T I N E =======================================
.text:004052D0
.text:004052D0
.text:004052D0 sub_4052D0      proc near               ; CODE XREF: sub_401A30:loc_40240D↑p
.text:004052D0
.text:004052D0 VarName         = dword ptr -1Ch
.text:004052D0 EndPtr          = dword ptr -18h
.text:004052D0 Radix           = dword ptr -14h
.text:004052D0 var_8           = dword ptr -8
.text:004052D0 var_4           = dword ptr -4
.text:004052D0
.text:004052D0                 sub     esp, 1Ch
.text:004052D3                 mov     [esp+1Ch+var_4], ebx
.text:004052D7                 mov     ebx, 30A29h
.text:004052DC                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:004052E3                 call    getenv
.text:004052E8                 test    eax, eax
.text:004052EA                 jz      short loc_4052F1
.text:004052EC                 cmp     byte ptr [eax], 0
.text:004052EF                 jnz     short loc_405300
.text:004052F1
.text:004052F1 loc_4052F1:                             ; CODE XREF: sub_4052D0+1A↑j
.text:004052F1                                         ; sub_4052D0+4F↓j ...
.text:004052F1                 mov     eax, ebx
.text:004052F3                 mov     ebx, [esp+1Ch+var_4]
.text:004052F7                 add     esp, 1Ch
.text:004052FA                 retn
.text:004052FA ; ---------------------------------------------------------------------------
.text:004052FB                 align 10h
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: sub_4052D0+1F↑j
.text:00405300                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00405308                 lea     ecx, [esp+1Ch+var_8]
.text:0040530C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00405310                 mov     [esp+1Ch+VarName], eax ; String
.text:00405313                 call    strtol
.text:00405318                 mov     ecx, [esp+1Ch+var_8]
.text:0040531C                 cmp     byte ptr [ecx], 0
.text:0040531F                 jnz     short loc_4052F1
.text:00405321                 mov     ebx, eax
.text:00405323                 jmp     short loc_4052F1
.text:00405323 sub_4052D0      endp
.text:00405323
.text:00405323 ; ---------------------------------------------------------------------------
.text:00405325                 align 10h
.text:00405330                 mov     edx, [esp+4]
.text:00405334                 mov     ds:dword_412060, edx
.text:0040533A                 retn
.text:0040533A ; ---------------------------------------------------------------------------
.text:0040533B aWriteError_0   db 'write error',0      ; DATA XREF: sub_405360:loc_4053A9↓o
.text:00405347 ; const char aSS_2[]
.text:00405347 aSS_2           db '%s: %s',0           ; DATA XREF: sub_405360+77↓o
.text:0040534E ; const char aS_1[]
.text:0040534E aS_1            db '%s',0               ; DATA XREF: sub_405360+A0↓o
.text:00405351 ; ---------------------------------------------------------------------------
.text:00405351                 jmp     short sub_405360
.text:00405351 ; ---------------------------------------------------------------------------
.text:00405353                 align 10h
.text:00405360
.text:00405360 ; =============== S U B R O U T I N E =======================================
.text:00405360
.text:00405360
.text:00405360 ; void __cdecl sub_405360()
.text:00405360 sub_405360      proc near               ; CODE XREF: .text:00405351↑j
.text:00405360                                         ; DATA XREF: sub_401A30+83↑o
.text:00405360
.text:00405360 Stream          = dword ptr -2Ch
.text:00405360 ErrorMessage    = dword ptr -28h
.text:00405360 var_24          = dword ptr -24h
.text:00405360 var_20          = byte ptr -20h
.text:00405360 var_1C          = dword ptr -1Ch
.text:00405360 var_9           = byte ptr -9
.text:00405360
.text:00405360                 push    esi
.text:00405361                 push    ebx
.text:00405362                 sub     esp, 24h
.text:00405365                 mov     edx, ds:_iob
.text:0040536B                 mov     ecx, [edx+2Ch]
.text:0040536E                 lea     esi, [edx+20h]
.text:00405371                 shr     ecx, 5
.text:00405374                 mov     bl, cl
.text:00405376                 mov     ecx, [edx+20h]
.text:00405379                 and     bl, 1
.text:0040537C                 cmp     ecx, [esi+8]
.text:0040537F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405382                 setz    [esp+2Ch+var_9]
.text:00405387                 call    fclose
.text:0040538C                 test    eax, eax
.text:0040538E                 setnz   al
.text:00405391                 test    bl, bl
.text:00405393                 jnz     loc_405423
.text:00405399                 test    al, al
.text:0040539B                 jz      short loc_4053F0
.text:0040539D
.text:0040539D loc_40539D:                             ; CODE XREF: sub_405360+CD↓j
.text:0040539D                 call    _errno
.text:004053A2                 mov     esi, [eax]
.text:004053A4
.text:004053A4 loc_4053A4:                             ; CODE XREF: sub_405360+C7↓j
.text:004053A4                 cmp     esi, 9
.text:004053A7                 jz      short loc_405416
.text:004053A9
.text:004053A9 loc_4053A9:                             ; CODE XREF: sub_405360+B8↓j
.text:004053A9                                         ; sub_405360+C1↓j
.text:004053A9                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:004053B0                 call    ds:libintl_gettext
.text:004053B6                 mov     ebx, eax
.text:004053B8                 mov     eax, ds:dword_412060
.text:004053BD                 test    eax, eax
.text:004053BF                 jz      short loc_4053F6
.text:004053C1                 mov     [esp+2Ch+Stream], eax ; char *
.text:004053C4                 call    sub_4077A0
.text:004053C9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:004053CD                 mov     edx, Code
.text:004053D3                 mov     [esp+2Ch+var_1C], ebx
.text:004053D7                 mov     [esp+2Ch+var_24], offset aSS_2 ; "%s: %s"
.text:004053DF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004053E3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004053E6                 call    sub_407AC0
.text:004053EB                 nop
.text:004053EC                 lea     esi, [esi+0]
.text:004053F0
.text:004053F0 loc_4053F0:                             ; CODE XREF: sub_405360+3B↑j
.text:004053F0                                         ; sub_405360+B4↓j ...
.text:004053F0                 add     esp, 24h
.text:004053F3                 pop     ebx
.text:004053F4                 pop     esi
.text:004053F5                 retn
.text:004053F6 ; ---------------------------------------------------------------------------
.text:004053F6
.text:004053F6 loc_4053F6:                             ; CODE XREF: sub_405360+5F↑j
.text:004053F6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004053FA                 mov     ebx, Code
.text:00405400                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00405408                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040540C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040540F                 call    sub_407AC0
.text:00405414                 jmp     short loc_4053F0
.text:00405416 ; ---------------------------------------------------------------------------
.text:00405416
.text:00405416 loc_405416:                             ; CODE XREF: sub_405360+47↑j
.text:00405416                 test    bl, bl
.text:00405418                 jnz     short loc_4053A9
.text:0040541A                 cmp     [esp+2Ch+var_9], 0
.text:0040541F                 jnz     short loc_4053F0
.text:00405421                 jmp     short loc_4053A9
.text:00405423 ; ---------------------------------------------------------------------------
.text:00405423
.text:00405423 loc_405423:                             ; CODE XREF: sub_405360+33↑j
.text:00405423                 xor     esi, esi
.text:00405425                 test    al, al
.text:00405427                 jz      loc_4053A4
.text:0040542D                 jmp     loc_40539D
.text:0040542D sub_405360      endp
.text:0040542D
.text:0040542D ; ---------------------------------------------------------------------------
.text:00405432                 align 10h
.text:00405440 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00405440                                         ; DATA XREF: sub_4054B0+C79↓o
.text:00405468                 align 20h
.text:00405480 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00405480                                         ; DATA XREF: sub_4054B0+C81↓o
.text:004054A6                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0
.text:004054B0 ; int __cdecl sub_4054B0(int, int, int, int, char *Str)
.text:004054B0 sub_4054B0      proc near               ; CODE XREF: sub_401A30+16A↑p
.text:004054B0                                         ; sub_401A30+457↑p ...
.text:004054B0
.text:004054B0 C               = dword ptr -13Ch
.text:004054B0 Type            = dword ptr -138h
.text:004054B0 Radix           = dword ptr -134h
.text:004054B0 var_130         = dword ptr -130h
.text:004054B0 var_124         = dword ptr -124h
.text:004054B0 var_120         = dword ptr -120h
.text:004054B0 var_11C         = dword ptr -11Ch
.text:004054B0 var_118         = dword ptr -118h
.text:004054B0 var_114         = dword ptr -114h
.text:004054B0 var_110         = dword ptr -110h
.text:004054B0 var_10C         = dword ptr -10Ch
.text:004054B0 var_108         = dword ptr -108h
.text:004054B0 var_104         = dword ptr -104h
.text:004054B0 var_100         = dword ptr -100h
.text:004054B0 var_F8          = dword ptr -0F8h
.text:004054B0 var_F4          = dword ptr -0F4h
.text:004054B0 var_F0          = dword ptr -0F0h
.text:004054B0 var_EC          = dword ptr -0ECh
.text:004054B0 var_E8          = dword ptr -0E8h
.text:004054B0 var_E4          = dword ptr -0E4h
.text:004054B0 var_E0          = dword ptr -0E0h
.text:004054B0 var_D8          = dword ptr -0D8h
.text:004054B0 var_D4          = dword ptr -0D4h
.text:004054B0 var_D0          = dword ptr -0D0h
.text:004054B0 var_CC          = dword ptr -0CCh
.text:004054B0 var_C8          = dword ptr -0C8h
.text:004054B0 var_C4          = dword ptr -0C4h
.text:004054B0 var_C0          = dword ptr -0C0h
.text:004054B0 var_B8          = dword ptr -0B8h
.text:004054B0 var_B4          = dword ptr -0B4h
.text:004054B0 var_B0          = dword ptr -0B0h
.text:004054B0 var_AC          = dword ptr -0ACh
.text:004054B0 var_A8          = dword ptr -0A8h
.text:004054B0 var_A4          = dword ptr -0A4h
.text:004054B0 var_A0          = dword ptr -0A0h
.text:004054B0 var_98          = dword ptr -98h
.text:004054B0 var_94          = dword ptr -94h
.text:004054B0 var_90          = dword ptr -90h
.text:004054B0 var_8C          = dword ptr -8Ch
.text:004054B0 var_88          = dword ptr -88h
.text:004054B0 var_84          = dword ptr -84h
.text:004054B0 var_80          = dword ptr -80h
.text:004054B0 var_78          = dword ptr -78h
.text:004054B0 var_74          = dword ptr -74h
.text:004054B0 var_70          = dword ptr -70h
.text:004054B0 var_6C          = dword ptr -6Ch
.text:004054B0 var_68          = dword ptr -68h
.text:004054B0 var_64          = dword ptr -64h
.text:004054B0 var_60          = dword ptr -60h
.text:004054B0 var_5C          = dword ptr -5Ch
.text:004054B0 var_58          = dword ptr -58h
.text:004054B0 var_50          = dword ptr -50h
.text:004054B0 var_4C          = dword ptr -4Ch
.text:004054B0 var_48          = dword ptr -48h
.text:004054B0 var_44          = dword ptr -44h
.text:004054B0 var_40          = dword ptr -40h
.text:004054B0 var_3C          = dword ptr -3Ch
.text:004054B0 var_38          = dword ptr -38h
.text:004054B0 var_34          = dword ptr -34h
.text:004054B0 var_30          = dword ptr -30h
.text:004054B0 var_29          = byte ptr -29h
.text:004054B0 var_28          = dword ptr -28h
.text:004054B0 var_24          = dword ptr -24h
.text:004054B0 var_20          = dword ptr -20h
.text:004054B0 var_18          = byte ptr -18h
.text:004054B0 arg_0           = dword ptr  4
.text:004054B0 arg_4           = dword ptr  8
.text:004054B0 arg_8           = dword ptr  0Ch
.text:004054B0 arg_C           = dword ptr  10h
.text:004054B0 Str             = dword ptr  14h
.text:004054B0
.text:004054B0                 push    ebp
.text:004054B1                 xor     eax, eax
.text:004054B3                 push    edi
.text:004054B4                 push    esi
.text:004054B5                 push    ebx
.text:004054B6                 sub     esp, 12Ch
.text:004054BC                 mov     ebp, [esp+13Ch+arg_8]
.text:004054C3                 mov     [esp+13Ch+var_28], eax
.text:004054CA                 mov     esi, [esp+13Ch+arg_0]
.text:004054D1                 cmp     ebp, 24h ; '$'
.text:004054D4                 ja      loc_406121
.text:004054DA                 mov     edi, [esp+13Ch+arg_4]
.text:004054E1                 test    edi, edi
.text:004054E3                 jz      loc_406115
.text:004054E9
.text:004054E9 loc_4054E9:                             ; CODE XREF: sub_4054B0+C6C↓j
.text:004054E9                 movzx   edx, byte ptr [esi]
.text:004054EC                 mov     ebx, esi
.text:004054EE                 mov     [esp+13Ch+var_29], dl
.text:004054F5                 lea     esi, [esi+0]
.text:004054F9                 lea     edi, [edi+0]
.text:00405500
.text:00405500 loc_405500:                             ; CODE XREF: sub_4054B0+86↓j
.text:00405500                 movzx   edx, [esp+13Ch+var_29]
.text:00405508                 mov     ecx, ds:__mb_cur_max
.text:0040550E                 cmp     dword ptr [ecx], 1
.text:00405511                 jz      loc_406102
.text:00405517                 mov     [esp+13Ch+Type], 8 ; Type
.text:0040551F                 mov     [esp+13Ch+C], edx ; C
.text:00405522                 call    _isctype
.text:00405527
.text:00405527 loc_405527:                             ; CODE XREF: sub_4054B0+C60↓j
.text:00405527                 test    eax, eax
.text:00405529                 jz      short loc_405538
.text:0040552B                 inc     ebx
.text:0040552C                 movzx   eax, byte ptr [ebx]
.text:0040552F                 mov     [esp+13Ch+var_29], al
.text:00405536                 jmp     short loc_405500
.text:00405538 ; ---------------------------------------------------------------------------
.text:00405538
.text:00405538 loc_405538:                             ; CODE XREF: sub_4054B0+79↑j
.text:00405538                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00405540                 mov     eax, 4
.text:00405545                 jz      short loc_4055C2
.text:00405547                 call    _errno
.text:0040554C                 mov     dword ptr [eax], 0
.text:00405552                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00405556                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0040555A                 mov     [esp+13Ch+C], esi ; String
.text:0040555D                 call    _strtoull
.text:00405562                 mov     [esp+13Ch+var_24], eax
.text:00405569                 mov     eax, [edi]
.text:0040556B                 mov     [esp+13Ch+var_20], edx
.text:00405572                 cmp     eax, esi
.text:00405574                 jz      loc_4060BC
.text:0040557A                 call    _errno
.text:0040557F                 mov     ebx, [eax]
.text:00405581                 test    ebx, ebx
.text:00405583                 jnz     loc_406097
.text:00405589
.text:00405589 loc_405589:                             ; CODE XREF: sub_4054B0+BFD↓j
.text:00405589                                         ; sub_4054B0+C4D↓j
.text:00405589                 mov     ebp, [esp+13Ch+Str]
.text:00405590                 test    ebp, ebp
.text:00405592                 jz      loc_406078
.text:00405598                 mov     ebx, [edi]
.text:0040559A                 movzx   eax, byte ptr [ebx]
.text:0040559D                 test    al, al
.text:0040559F                 jnz     short loc_4055CD
.text:004055A1
.text:004055A1 loc_4055A1:                             ; CODE XREF: sub_4054B0+312↓j
.text:004055A1                                         ; sub_4054B0+320↓j
.text:004055A1                 mov     edx, [esp+13Ch+var_24]
.text:004055A8                 mov     edi, [esp+13Ch+var_20]
.text:004055AF                 mov     ebx, [esp+13Ch+arg_C]
.text:004055B6                 mov     [ebx], edx
.text:004055B8                 mov     [ebx+4], edi
.text:004055BB
.text:004055BB loc_4055BB:                             ; CODE XREF: sub_4054B0+BE2↓j
.text:004055BB                 mov     eax, [esp+13Ch+var_28]
.text:004055C2
.text:004055C2 loc_4055C2:                             ; CODE XREF: sub_4054B0+95↑j
.text:004055C2                                         ; sub_4054B0+16C↓j ...
.text:004055C2                 add     esp, 12Ch
.text:004055C8                 pop     ebx
.text:004055C9                 pop     esi
.text:004055CA                 pop     edi
.text:004055CB                 pop     ebp
.text:004055CC                 retn
.text:004055CD ; ---------------------------------------------------------------------------
.text:004055CD
.text:004055CD loc_4055CD:                             ; CODE XREF: sub_4054B0+EF↑j
.text:004055CD                 mov     esi, [esp+13Ch+Str]
.text:004055D4                 mov     ecx, 1
.text:004055D9                 movsx   ebp, al
.text:004055DC                 mov     [esp+13Ch+var_30], ecx
.text:004055E3                 mov     ebx, 400h
.text:004055E8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004055EC                 mov     [esp+13Ch+C], esi ; Str
.text:004055EF                 call    strchr
.text:004055F4                 test    eax, eax
.text:004055F6                 jnz     short loc_40561E
.text:004055F8
.text:004055F8 def_405669:                             ; CODE XREF: sub_4054B0+1B7↓j
.text:004055F8                                         ; sub_4054B0+1B9↓j
.text:004055F8                                         ; DATA XREF: ...
.text:004055F8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00405669 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004055FF                 mov     esi, [esp+13Ch+var_24]
.text:00405606                 mov     ebp, [esp+13Ch+var_20]
.text:0040560D                 mov     edi, [esp+13Ch+arg_C]
.text:00405614                 or      eax, 2
.text:00405617                 mov     [edi], esi
.text:00405619                 mov     [edi+4], ebp
.text:0040561C                 jmp     short loc_4055C2
.text:0040561E ; ---------------------------------------------------------------------------
.text:0040561E
.text:0040561E loc_40561E:                             ; CODE XREF: sub_4054B0+146↑j
.text:0040561E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00405626                 mov     edx, [esp+13Ch+Str]
.text:0040562D                 mov     [esp+13Ch+C], edx ; Str
.text:00405630                 call    strchr
.text:00405635                 test    eax, eax
.text:00405637                 jz      loc_406071
.text:0040563D                 mov     edx, [edi]
.text:0040563F                 movsx   eax, byte ptr [edx+1]
.text:00405643                 cmp     eax, 44h ; 'D'
.text:00405646                 jz      loc_406037
.text:0040564C                 cmp     eax, 44h ; 'D'
.text:0040564F                 jg      loc_40604D
.text:00405655                 cmp     eax, 42h ; 'B'
.text:00405658                 jz      loc_406037
.text:0040565E
.text:0040565E loc_40565E:                             ; CODE XREF: sub_4054B0+B98↓j
.text:0040565E                                         ; sub_4054B0+BA0↓j ...
.text:0040565E                 movsx   eax, byte ptr [edx]
.text:00405661                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00405664                 cmp     eax, 35h
.text:00405667                 ja      short def_405669 ; jumptable 00405669 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00405669                 jmp     ds:jpt_405669[eax*4] ; switch jump
.text:00405669 ; ---------------------------------------------------------------------------
.text:00405670 jpt_405669      dd offset loc_4057F4, offset def_405669, offset def_405669
.text:00405670                                         ; DATA XREF: sub_4054B0+1B9↑r
.text:00405670                 dd offset loc_40584E, offset def_405669, offset loc_405C17 ; jump table for switch statement
.text:00405670                 dd offset def_405669, offset def_405669, offset def_405669
.text:00405670                 dd offset loc_405D26, offset def_405669, offset loc_405DEF
.text:00405670                 dd offset def_405669, offset def_405669, offset loc_40595D
.text:00405670                 dd offset def_405669, offset def_405669, offset def_405669
.text:00405670                 dd offset loc_405EFE, offset def_405669, offset def_405669
.text:00405670                 dd offset def_405669, offset def_405669, offset loc_405A6C
.text:00405670                 dd offset loc_405B3E, offset def_405669, offset def_405669
.text:00405670                 dd offset def_405669, offset def_405669, offset def_405669
.text:00405670                 dd offset def_405669, offset def_405669, offset loc_405748
.text:00405670                 dd offset loc_405C10, offset def_405669, offset def_405669
.text:00405670                 dd offset def_405669, offset loc_405C17, offset def_405669
.text:00405670                 dd offset def_405669, offset def_405669, offset loc_405D26
.text:00405670                 dd offset def_405669, offset loc_405DEF, offset def_405669
.text:00405670                 dd offset def_405669, offset def_405669, offset def_405669
.text:00405670                 dd offset def_405669, offset def_405669, offset loc_405EFE
.text:00405670                 dd offset def_405669, offset def_405669, offset loc_405FD7
.text:00405748 ; ---------------------------------------------------------------------------
.text:00405748
.text:00405748 loc_405748:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405748                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405748                 mov     [esp+13Ch+Radix], 200h ; jumptable 00405669 case 98
.text:00405750                 lea     ebp, [esp+13Ch+var_24]
.text:00405757                 mov     [esp+13Ch+var_130], 0
.text:0040575F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405766                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040576E                 call    sub_40F4C0
.text:00405773                 mov     esi, [esp+13Ch+var_20]
.text:0040577A                 mov     ecx, [esp+13Ch+var_24]
.text:00405781                 cmp     edx, esi
.text:00405783                 ja      short loc_40578B
.text:00405785                 jb      short loc_4057D5
.text:00405787                 cmp     eax, ecx
.text:00405789                 jb      short loc_4057D5
.text:0040578B
.text:0040578B loc_40578B:                             ; CODE XREF: sub_4054B0+2D3↑j
.text:0040578B                 mov     esi, [ebp+0]
.text:0040578E                 mov     eax, 200h
.text:00405793                 mov     ebx, [ebp+4]
.text:00405796                 mul     esi
.text:00405798                 mov     ecx, ebx
.text:0040579A                 shl     ecx, 9
.text:0040579D
.text:0040579D loc_40579D:                             ; CODE XREF: sub_4054B0+399↓j
.text:0040579D                 mov     esi, edx
.text:0040579F                 lea     edx, [ecx+esi]
.text:004057A2
.text:004057A2 loc_4057A2:                             ; CODE XREF: sub_4054B0+B82↓j
.text:004057A2                 mov     [ebp+0], eax
.text:004057A5                 xor     eax, eax
.text:004057A7                 mov     [ebp+4], edx
.text:004057AA
.text:004057AA loc_4057AA:                             ; CODE XREF: sub_4054B0+342↓j
.text:004057AA                                         ; sub_4054B0+459↓j ...
.text:004057AA                 mov     edx, [edi]
.text:004057AC
.text:004057AC loc_4057AC:                             ; CODE XREF: sub_4054B0+762↓j
.text:004057AC                 or      [esp+13Ch+var_28], eax
.text:004057B3                 mov     eax, [esp+13Ch+var_30]
.text:004057BA                 lea     ecx, [eax+edx]
.text:004057BD                 mov     [edi], ecx
.text:004057BF                 cmp     byte ptr [ecx], 0
.text:004057C2                 jz      loc_4055A1
.text:004057C8                 or      [esp+13Ch+var_28], 2
.text:004057D0                 jmp     loc_4055A1
.text:004057D5 ; ---------------------------------------------------------------------------
.text:004057D5
.text:004057D5 loc_4057D5:                             ; CODE XREF: sub_4054B0+2D5↑j
.text:004057D5                                         ; sub_4054B0+2D9↑j ...
.text:004057D5                 mov     edx, 0FFFFFFFFh
.text:004057DA                 mov     ebp, 0FFFFFFFFh
.text:004057DF                 mov     eax, 1
.text:004057E4                 mov     [esp+13Ch+var_24], edx
.text:004057EB                 mov     [esp+13Ch+var_20], ebp
.text:004057F2                 jmp     short loc_4057AA
.text:004057F4 ; ---------------------------------------------------------------------------
.text:004057F4
.text:004057F4 loc_4057F4:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:004057F4                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:004057F4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00405669 case 66
.text:004057FC                 lea     ebp, [esp+13Ch+var_24]
.text:00405803                 mov     [esp+13Ch+var_130], 0
.text:0040580B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405812                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040581A                 call    sub_40F4C0
.text:0040581F                 mov     esi, [esp+13Ch+var_20]
.text:00405826                 mov     ecx, [esp+13Ch+var_24]
.text:0040582D                 cmp     edx, esi
.text:0040582F                 ja      short loc_405837
.text:00405831                 jb      short loc_4057D5
.text:00405833                 cmp     eax, ecx
.text:00405835                 jb      short loc_4057D5
.text:00405837
.text:00405837 loc_405837:                             ; CODE XREF: sub_4054B0+37F↑j
.text:00405837                 mov     esi, [ebp+0]
.text:0040583A                 mov     eax, 400h
.text:0040583F                 mov     ebx, [ebp+4]
.text:00405842                 mul     esi
.text:00405844                 mov     ecx, ebx
.text:00405846                 shl     ecx, 0Ah
.text:00405849                 jmp     loc_40579D
.text:0040584E ; ---------------------------------------------------------------------------
.text:0040584E
.text:0040584E loc_40584E:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:0040584E                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:0040584E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00405669 case 69
.text:00405855                 mov     ecx, ebx
.text:00405857                 xor     ebp, ebp
.text:00405859                 mov     [esp+13Ch+var_34], ebp
.text:00405860                 sar     ecx, 1Fh
.text:00405863                 mov     ebx, [esp+13Ch+var_3C]
.text:0040586A                 mov     [esp+13Ch+var_38], ecx
.text:00405871                 lea     esi, [esp+13Ch+var_24]
.text:00405878                 mov     ebp, 5
.text:0040587D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405884                 mov     edx, [esp+13Ch+var_38]
.text:0040588B                 mov     [esp+13Ch+Radix], ebx
.text:0040588F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405897                 mov     [esp+13Ch+var_130], edx
.text:0040589B                 call    sub_40F4C0
.text:004058A0                 mov     [esp+13Ch+var_44], eax
.text:004058A7                 mov     [esp+13Ch+var_40], edx
.text:004058AE
.text:004058AE loc_4058AE:                             ; CODE XREF: sub_4054B0+450↓j
.text:004058AE                 mov     ebx, [esi+4]
.text:004058B1                 mov     eax, [esi]
.text:004058B3                 cmp     [esp+13Ch+var_40], ebx
.text:004058BA                 mov     [esp+13Ch+var_48], ebx
.text:004058C1                 mov     [esp+13Ch+var_4C], eax
.text:004058C8                 ja      short loc_40590E
.text:004058CA                 mov     ecx, [esp+13Ch+var_48]
.text:004058D1                 cmp     [esp+13Ch+var_40], ecx
.text:004058D8                 jb      short loc_4058E3
.text:004058DA                 cmp     [esp+13Ch+var_44], eax
.text:004058E1                 jnb     short loc_40590E
.text:004058E3
.text:004058E3 loc_4058E3:                             ; CODE XREF: sub_4054B0+428↑j
.text:004058E3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004058E9                 mov     eax, 1
.text:004058EE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004058F5
.text:004058F5 loc_4058F5:                             ; CODE XREF: sub_4054B0+4AB↓j
.text:004058F5                 or      [esp+13Ch+var_34], eax
.text:004058FC                 dec     ebp
.text:004058FD                 cmp     ebp, 0FFFFFFFFh
.text:00405900                 jnz     short loc_4058AE
.text:00405902                 mov     eax, [esp+13Ch+var_34]
.text:00405909                 jmp     loc_4057AA
.text:0040590E ; ---------------------------------------------------------------------------
.text:0040590E
.text:0040590E loc_40590E:                             ; CODE XREF: sub_4054B0+418↑j
.text:0040590E                                         ; sub_4054B0+431↑j
.text:0040590E                 mov     ecx, [esp+13Ch+var_38]
.text:00405915                 mov     eax, [esp+13Ch+var_4C]
.text:0040591C                 mov     ebx, [esp+13Ch+var_4C]
.text:00405923                 mul     [esp+13Ch+var_3C]
.text:0040592A                 imul    ebx, ecx
.text:0040592D                 mov     ecx, edx
.text:0040592F                 mov     [esp+13Ch+var_124], eax
.text:00405933                 add     ecx, ebx
.text:00405935                 mov     edx, [esp+13Ch+var_3C]
.text:0040593C                 mov     ebx, [esp+13Ch+var_48]
.text:00405943                 imul    edx, ebx
.text:00405946                 mov     ebx, [esp+13Ch+var_124]
.text:0040594A                 mov     [esi], ebx
.text:0040594C                 add     ecx, edx
.text:0040594E                 mov     [esp+13Ch+var_120], ecx
.text:00405952                 mov     eax, [esp+13Ch+var_120]
.text:00405956                 mov     [esi+4], eax
.text:00405959                 xor     eax, eax
.text:0040595B                 jmp     short loc_4058F5
.text:0040595D ; ---------------------------------------------------------------------------
.text:0040595D
.text:0040595D loc_40595D:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:0040595D                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:0040595D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00405669 case 80
.text:00405964                 mov     eax, ebx
.text:00405966                 xor     ebp, ebp
.text:00405968                 mov     [esp+13Ch+var_98], ebp
.text:0040596F                 sar     eax, 1Fh
.text:00405972                 mov     edx, [esp+13Ch+var_A4]
.text:00405979                 mov     [esp+13Ch+var_A0], eax
.text:00405980                 lea     esi, [esp+13Ch+var_24]
.text:00405987                 mov     ebp, 4
.text:0040598C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405993                 mov     ebx, [esp+13Ch+var_A0]
.text:0040599A                 mov     [esp+13Ch+Radix], edx
.text:0040599E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004059A6                 mov     [esp+13Ch+var_130], ebx
.text:004059AA                 call    sub_40F4C0
.text:004059AF                 mov     [esp+13Ch+var_AC], eax
.text:004059B6                 mov     [esp+13Ch+var_A8], edx
.text:004059BD
.text:004059BD loc_4059BD:                             ; CODE XREF: sub_4054B0+55F↓j
.text:004059BD                 mov     ebx, [esi+4]
.text:004059C0                 mov     edx, [esi]
.text:004059C2                 cmp     [esp+13Ch+var_A8], ebx
.text:004059C9                 mov     [esp+13Ch+var_B0], ebx
.text:004059D0                 mov     [esp+13Ch+var_B4], edx
.text:004059D7                 ja      short loc_405A1D
.text:004059D9                 mov     eax, [esp+13Ch+var_B0]
.text:004059E0                 cmp     [esp+13Ch+var_A8], eax
.text:004059E7                 jb      short loc_4059F2
.text:004059E9                 cmp     [esp+13Ch+var_AC], edx
.text:004059F0                 jnb     short loc_405A1D
.text:004059F2
.text:004059F2 loc_4059F2:                             ; CODE XREF: sub_4054B0+537↑j
.text:004059F2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004059F8                 mov     eax, 1
.text:004059FD                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405A04
.text:00405A04 loc_405A04:                             ; CODE XREF: sub_4054B0+5BA↓j
.text:00405A04                 or      [esp+13Ch+var_98], eax
.text:00405A0B                 dec     ebp
.text:00405A0C                 cmp     ebp, 0FFFFFFFFh
.text:00405A0F                 jnz     short loc_4059BD
.text:00405A11                 mov     eax, [esp+13Ch+var_98]
.text:00405A18                 jmp     loc_4057AA
.text:00405A1D ; ---------------------------------------------------------------------------
.text:00405A1D
.text:00405A1D loc_405A1D:                             ; CODE XREF: sub_4054B0+527↑j
.text:00405A1D                                         ; sub_4054B0+540↑j
.text:00405A1D                 mov     ecx, [esp+13Ch+var_A0]
.text:00405A24                 mov     eax, [esp+13Ch+var_B4]
.text:00405A2B                 mov     ebx, [esp+13Ch+var_B4]
.text:00405A32                 mul     [esp+13Ch+var_A4]
.text:00405A39                 imul    ebx, ecx
.text:00405A3C                 mov     ecx, edx
.text:00405A3E                 mov     [esp+13Ch+var_124], eax
.text:00405A42                 add     ecx, ebx
.text:00405A44                 mov     edx, [esp+13Ch+var_A4]
.text:00405A4B                 mov     ebx, [esp+13Ch+var_B0]
.text:00405A52                 xor     eax, eax
.text:00405A54                 imul    edx, ebx
.text:00405A57                 add     ecx, edx
.text:00405A59                 mov     [esp+13Ch+var_120], ecx
.text:00405A5D                 mov     ebx, [esp+13Ch+var_120]
.text:00405A61                 mov     ecx, [esp+13Ch+var_124]
.text:00405A65                 mov     [esi+4], ebx
.text:00405A68                 mov     [esi], ecx
.text:00405A6A                 jmp     short loc_405A04
.text:00405A6C ; ---------------------------------------------------------------------------
.text:00405A6C
.text:00405A6C loc_405A6C:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405A6C                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405A6C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00405669 case 89
.text:00405A70                 mov     eax, ebx
.text:00405A72                 lea     esi, [esp+13Ch+var_24]
.text:00405A79                 mov     [esp+13Ch+var_D8], 0
.text:00405A81                 sar     eax, 1Fh
.text:00405A84                 mov     edx, [esp+13Ch+var_E4]
.text:00405A88                 mov     [esp+13Ch+var_E0], eax
.text:00405A8C                 mov     ebp, 7
.text:00405A91                 mov     ebx, [esp+13Ch+var_E0]
.text:00405A95                 mov     [esp+13Ch+Radix], edx
.text:00405A99                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405AA0                 mov     [esp+13Ch+var_130], ebx
.text:00405AA4                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405AAC                 call    sub_40F4C0
.text:00405AB1                 mov     [esp+13Ch+var_EC], eax
.text:00405AB5                 mov     [esp+13Ch+var_E8], edx
.text:00405AB9
.text:00405AB9 loc_405AB9:                             ; CODE XREF: sub_4054B0+646↓j
.text:00405AB9                 mov     ebx, [esi+4]
.text:00405ABC                 mov     edx, [esi]
.text:00405ABE                 cmp     [esp+13Ch+var_E8], ebx
.text:00405AC2                 mov     [esp+13Ch+var_F0], ebx
.text:00405AC6                 mov     [esp+13Ch+var_F4], edx
.text:00405ACA                 ja      short loc_405B01
.text:00405ACC                 mov     eax, [esp+13Ch+var_F0]
.text:00405AD0                 cmp     [esp+13Ch+var_E8], eax
.text:00405AD4                 jb      short loc_405ADC
.text:00405AD6                 cmp     [esp+13Ch+var_EC], edx
.text:00405ADA                 jnb     short loc_405B01
.text:00405ADC
.text:00405ADC loc_405ADC:                             ; CODE XREF: sub_4054B0+624↑j
.text:00405ADC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405AE2                 mov     eax, 1
.text:00405AE7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405AEE
.text:00405AEE loc_405AEE:                             ; CODE XREF: sub_4054B0+68C↓j
.text:00405AEE                 or      [esp+13Ch+var_D8], eax
.text:00405AF2                 dec     ebp
.text:00405AF3                 cmp     ebp, 0FFFFFFFFh
.text:00405AF6                 jnz     short loc_405AB9
.text:00405AF8                 mov     eax, [esp+13Ch+var_D8]
.text:00405AFC                 jmp     loc_4057AA
.text:00405B01 ; ---------------------------------------------------------------------------
.text:00405B01
.text:00405B01 loc_405B01:                             ; CODE XREF: sub_4054B0+61A↑j
.text:00405B01                                         ; sub_4054B0+62A↑j
.text:00405B01                 mov     ecx, [esp+13Ch+var_E0]
.text:00405B05                 mov     eax, [esp+13Ch+var_F4]
.text:00405B09                 mov     ebx, [esp+13Ch+var_F4]
.text:00405B0D                 mul     [esp+13Ch+var_E4]
.text:00405B11                 imul    ebx, ecx
.text:00405B14                 mov     ecx, edx
.text:00405B16                 mov     [esp+13Ch+var_124], eax
.text:00405B1A                 add     ecx, ebx
.text:00405B1C                 mov     edx, [esp+13Ch+var_E4]
.text:00405B20                 mov     ebx, [esp+13Ch+var_F0]
.text:00405B24                 xor     eax, eax
.text:00405B26                 imul    edx, ebx
.text:00405B29                 add     ecx, edx
.text:00405B2B                 mov     [esp+13Ch+var_120], ecx
.text:00405B2F                 mov     ebx, [esp+13Ch+var_120]
.text:00405B33                 mov     ecx, [esp+13Ch+var_124]
.text:00405B37                 mov     [esi+4], ebx
.text:00405B3A                 mov     [esi], ecx
.text:00405B3C                 jmp     short loc_405AEE
.text:00405B3E ; ---------------------------------------------------------------------------
.text:00405B3E
.text:00405B3E loc_405B3E:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405B3E                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405B3E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00405669 case 90
.text:00405B42                 mov     eax, ebx
.text:00405B44                 lea     esi, [esp+13Ch+var_24]
.text:00405B4B                 mov     [esp+13Ch+var_F8], 0
.text:00405B53                 sar     eax, 1Fh
.text:00405B56                 mov     edx, [esp+13Ch+var_104]
.text:00405B5A                 mov     [esp+13Ch+var_100], eax
.text:00405B5E                 mov     ebp, 6
.text:00405B63                 mov     ebx, [esp+13Ch+var_100]
.text:00405B67                 mov     [esp+13Ch+Radix], edx
.text:00405B6B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405B72                 mov     [esp+13Ch+var_130], ebx
.text:00405B76                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405B7E                 call    sub_40F4C0
.text:00405B83                 mov     [esp+13Ch+var_10C], eax
.text:00405B87                 mov     [esp+13Ch+var_108], edx
.text:00405B8B
.text:00405B8B loc_405B8B:                             ; CODE XREF: sub_4054B0+718↓j
.text:00405B8B                 mov     ebx, [esi+4]
.text:00405B8E                 mov     edx, [esi]
.text:00405B90                 cmp     [esp+13Ch+var_108], ebx
.text:00405B94                 mov     [esp+13Ch+var_110], ebx
.text:00405B98                 mov     [esp+13Ch+var_114], edx
.text:00405B9C                 ja      short loc_405BD3
.text:00405B9E                 mov     eax, [esp+13Ch+var_110]
.text:00405BA2                 cmp     [esp+13Ch+var_108], eax
.text:00405BA6                 jb      short loc_405BAE
.text:00405BA8                 cmp     [esp+13Ch+var_10C], edx
.text:00405BAC                 jnb     short loc_405BD3
.text:00405BAE
.text:00405BAE loc_405BAE:                             ; CODE XREF: sub_4054B0+6F6↑j
.text:00405BAE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405BB4                 mov     eax, 1
.text:00405BB9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: sub_4054B0+75E↓j
.text:00405BC0                 or      [esp+13Ch+var_F8], eax
.text:00405BC4                 dec     ebp
.text:00405BC5                 cmp     ebp, 0FFFFFFFFh
.text:00405BC8                 jnz     short loc_405B8B
.text:00405BCA                 mov     eax, [esp+13Ch+var_F8]
.text:00405BCE                 jmp     loc_4057AA
.text:00405BD3 ; ---------------------------------------------------------------------------
.text:00405BD3
.text:00405BD3 loc_405BD3:                             ; CODE XREF: sub_4054B0+6EC↑j
.text:00405BD3                                         ; sub_4054B0+6FC↑j
.text:00405BD3                 mov     eax, [esp+13Ch+var_114]
.text:00405BD7                 mov     ebx, [esp+13Ch+var_100]
.text:00405BDB                 mul     [esp+13Ch+var_104]
.text:00405BDF                 mov     ecx, edx
.text:00405BE1                 mov     edx, [esp+13Ch+var_104]
.text:00405BE5                 mov     [esp+13Ch+var_124], eax
.text:00405BE9                 mov     eax, [esp+13Ch+var_114]
.text:00405BED                 imul    eax, ebx
.text:00405BF0                 mov     ebx, [esp+13Ch+var_110]
.text:00405BF4                 imul    edx, ebx
.text:00405BF7                 add     ecx, eax
.text:00405BF9                 xor     eax, eax
.text:00405BFB                 add     ecx, edx
.text:00405BFD                 mov     [esp+13Ch+var_120], ecx
.text:00405C01                 mov     ebx, [esp+13Ch+var_120]
.text:00405C05                 mov     ecx, [esp+13Ch+var_124]
.text:00405C09                 mov     [esi+4], ebx
.text:00405C0C                 mov     [esi], ecx
.text:00405C0E                 jmp     short loc_405BC0
.text:00405C10 ; ---------------------------------------------------------------------------
.text:00405C10
.text:00405C10 loc_405C10:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405C10                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405C10                 xor     eax, eax        ; jumptable 00405669 case 99
.text:00405C12                 jmp     loc_4057AC
.text:00405C17 ; ---------------------------------------------------------------------------
.text:00405C17
.text:00405C17 loc_405C17:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405C17                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405C17                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00405669 cases 71,103
.text:00405C1E                 mov     eax, ebx
.text:00405C20                 xor     ebp, ebp
.text:00405C22                 mov     [esp+13Ch+var_50], ebp
.text:00405C29                 sar     eax, 1Fh
.text:00405C2C                 mov     edx, [esp+13Ch+var_5C]
.text:00405C33                 mov     [esp+13Ch+var_58], eax
.text:00405C3A                 lea     esi, [esp+13Ch+var_24]
.text:00405C41                 mov     ebp, 2
.text:00405C46                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405C4D                 mov     ebx, [esp+13Ch+var_58]
.text:00405C54                 mov     [esp+13Ch+Radix], edx
.text:00405C58                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405C60                 mov     [esp+13Ch+var_130], ebx
.text:00405C64                 call    sub_40F4C0
.text:00405C69                 mov     [esp+13Ch+var_64], eax
.text:00405C70                 mov     [esp+13Ch+var_60], edx
.text:00405C77
.text:00405C77 loc_405C77:                             ; CODE XREF: sub_4054B0+819↓j
.text:00405C77                 mov     ebx, [esi+4]
.text:00405C7A                 mov     edx, [esi]
.text:00405C7C                 cmp     [esp+13Ch+var_60], ebx
.text:00405C83                 mov     [esp+13Ch+var_68], ebx
.text:00405C8A                 mov     [esp+13Ch+var_6C], edx
.text:00405C91                 ja      short loc_405CD7
.text:00405C93                 mov     eax, [esp+13Ch+var_68]
.text:00405C9A                 cmp     [esp+13Ch+var_60], eax
.text:00405CA1                 jb      short loc_405CAC
.text:00405CA3                 cmp     [esp+13Ch+var_64], edx
.text:00405CAA                 jnb     short loc_405CD7
.text:00405CAC
.text:00405CAC loc_405CAC:                             ; CODE XREF: sub_4054B0+7F1↑j
.text:00405CAC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405CB2                 mov     eax, 1
.text:00405CB7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405CBE
.text:00405CBE loc_405CBE:                             ; CODE XREF: sub_4054B0+874↓j
.text:00405CBE                 or      [esp+13Ch+var_50], eax
.text:00405CC5                 dec     ebp
.text:00405CC6                 cmp     ebp, 0FFFFFFFFh
.text:00405CC9                 jnz     short loc_405C77
.text:00405CCB                 mov     eax, [esp+13Ch+var_50]
.text:00405CD2                 jmp     loc_4057AA
.text:00405CD7 ; ---------------------------------------------------------------------------
.text:00405CD7
.text:00405CD7 loc_405CD7:                             ; CODE XREF: sub_4054B0+7E1↑j
.text:00405CD7                                         ; sub_4054B0+7FA↑j
.text:00405CD7                 mov     ecx, [esp+13Ch+var_58]
.text:00405CDE                 mov     eax, [esp+13Ch+var_6C]
.text:00405CE5                 mov     ebx, [esp+13Ch+var_6C]
.text:00405CEC                 mul     [esp+13Ch+var_5C]
.text:00405CF3                 imul    ebx, ecx
.text:00405CF6                 mov     ecx, edx
.text:00405CF8                 mov     [esp+13Ch+var_124], eax
.text:00405CFC                 add     ecx, ebx
.text:00405CFE                 mov     edx, [esp+13Ch+var_5C]
.text:00405D05                 mov     ebx, [esp+13Ch+var_68]
.text:00405D0C                 xor     eax, eax
.text:00405D0E                 imul    edx, ebx
.text:00405D11                 add     ecx, edx
.text:00405D13                 mov     [esp+13Ch+var_120], ecx
.text:00405D17                 mov     ebx, [esp+13Ch+var_120]
.text:00405D1B                 mov     ecx, [esp+13Ch+var_124]
.text:00405D1F                 mov     [esi+4], ebx
.text:00405D22                 mov     [esi], ecx
.text:00405D24                 jmp     short loc_405CBE
.text:00405D26 ; ---------------------------------------------------------------------------
.text:00405D26
.text:00405D26 loc_405D26:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405D26                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405D26                 mov     [esp+13Ch+var_74], ebx ; jumptable 00405669 cases 75,107
.text:00405D2D                 mov     eax, ebx
.text:00405D2F                 lea     esi, [esp+13Ch+var_24]
.text:00405D36                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405D3D                 sar     eax, 1Fh
.text:00405D40                 mov     edx, [esp+13Ch+var_74]
.text:00405D47                 mov     [esp+13Ch+var_70], eax
.text:00405D4E                 mov     ebx, [esp+13Ch+var_70]
.text:00405D55                 mov     [esp+13Ch+Radix], edx
.text:00405D59                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405D61                 mov     [esp+13Ch+var_130], ebx
.text:00405D65                 call    sub_40F4C0
.text:00405D6A                 mov     ebp, [esp+13Ch+var_20]
.text:00405D71                 mov     ecx, [esp+13Ch+var_24]
.text:00405D78                 cmp     edx, ebp
.text:00405D7A                 mov     [esp+13Ch+var_11C], ecx
.text:00405D7E                 mov     [esp+13Ch+var_118], ebp
.text:00405D82                 ja      short loc_405DA9
.text:00405D84                 cmp     edx, [esp+13Ch+var_118]
.text:00405D88                 jb      short loc_405D8E
.text:00405D8A                 cmp     eax, ecx
.text:00405D8C                 jnb     short loc_405DA9
.text:00405D8E
.text:00405D8E loc_405D8E:                             ; CODE XREF: sub_4054B0+8D8↑j
.text:00405D8E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405D94                 mov     edx, 1
.text:00405D99                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405DA0
.text:00405DA0 loc_405DA0:                             ; CODE XREF: sub_4054B0+93D↓j
.text:00405DA0                 xor     eax, eax
.text:00405DA2                 or      eax, edx
.text:00405DA4                 jmp     loc_4057AA
.text:00405DA9 ; ---------------------------------------------------------------------------
.text:00405DA9
.text:00405DA9 loc_405DA9:                             ; CODE XREF: sub_4054B0+8D2↑j
.text:00405DA9                                         ; sub_4054B0+8DC↑j
.text:00405DA9                 mov     eax, [esp+13Ch+var_11C]
.text:00405DAD                 mov     ebp, [esp+13Ch+var_11C]
.text:00405DB1                 mov     ebx, [esp+13Ch+var_118]
.text:00405DB5                 mul     [esp+13Ch+var_74]
.text:00405DBC                 mov     [esp+13Ch+var_124], eax
.text:00405DC0                 mov     eax, [esp+13Ch+var_70]
.text:00405DC7                 mov     ecx, [esp+13Ch+var_124]
.text:00405DCB                 imul    ebp, eax
.text:00405DCE                 mov     eax, edx
.text:00405DD0                 xor     edx, edx
.text:00405DD2                 mov     [esi], ecx
.text:00405DD4                 add     eax, ebp
.text:00405DD6                 mov     ebp, [esp+13Ch+var_74]
.text:00405DDD                 imul    ebp, ebx
.text:00405DE0                 add     eax, ebp
.text:00405DE2                 mov     [esp+13Ch+var_120], eax
.text:00405DE6                 mov     ebp, [esp+13Ch+var_120]
.text:00405DEA                 mov     [esi+4], ebp
.text:00405DED                 jmp     short loc_405DA0
.text:00405DEF ; ---------------------------------------------------------------------------
.text:00405DEF
.text:00405DEF loc_405DEF:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405DEF                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405DEF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00405669 cases 77,109
.text:00405DF6                 mov     eax, ebx
.text:00405DF8                 xor     ebp, ebp
.text:00405DFA                 mov     [esp+13Ch+var_78], ebp
.text:00405E01                 sar     eax, 1Fh
.text:00405E04                 mov     edx, [esp+13Ch+var_84]
.text:00405E0B                 mov     [esp+13Ch+var_80], eax
.text:00405E12                 lea     esi, [esp+13Ch+var_24]
.text:00405E19                 mov     ebp, 1
.text:00405E1E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405E25                 mov     ecx, [esp+13Ch+var_80]
.text:00405E2C                 mov     [esp+13Ch+Radix], edx
.text:00405E30                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405E38                 mov     [esp+13Ch+var_130], ecx
.text:00405E3C                 call    sub_40F4C0
.text:00405E41                 mov     [esp+13Ch+var_8C], eax
.text:00405E48                 mov     [esp+13Ch+var_88], edx
.text:00405E4F
.text:00405E4F loc_405E4F:                             ; CODE XREF: sub_4054B0+9F1↓j
.text:00405E4F                 mov     ebx, [esi+4]
.text:00405E52                 mov     edx, [esi]
.text:00405E54                 cmp     [esp+13Ch+var_88], ebx
.text:00405E5B                 mov     [esp+13Ch+var_90], ebx
.text:00405E62                 mov     [esp+13Ch+var_94], edx
.text:00405E69                 ja      short loc_405EAF
.text:00405E6B                 mov     eax, [esp+13Ch+var_90]
.text:00405E72                 cmp     [esp+13Ch+var_88], eax
.text:00405E79                 jb      short loc_405E84
.text:00405E7B                 cmp     [esp+13Ch+var_8C], edx
.text:00405E82                 jnb     short loc_405EAF
.text:00405E84
.text:00405E84 loc_405E84:                             ; CODE XREF: sub_4054B0+9C9↑j
.text:00405E84                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405E8A                 mov     eax, 1
.text:00405E8F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405E96
.text:00405E96 loc_405E96:                             ; CODE XREF: sub_4054B0+A4C↓j
.text:00405E96                 or      [esp+13Ch+var_78], eax
.text:00405E9D                 dec     ebp
.text:00405E9E                 cmp     ebp, 0FFFFFFFFh
.text:00405EA1                 jnz     short loc_405E4F
.text:00405EA3                 mov     eax, [esp+13Ch+var_78]
.text:00405EAA                 jmp     loc_4057AA
.text:00405EAF ; ---------------------------------------------------------------------------
.text:00405EAF
.text:00405EAF loc_405EAF:                             ; CODE XREF: sub_4054B0+9B9↑j
.text:00405EAF                                         ; sub_4054B0+9D2↑j
.text:00405EAF                 mov     ecx, [esp+13Ch+var_80]
.text:00405EB6                 mov     eax, [esp+13Ch+var_94]
.text:00405EBD                 mov     ebx, [esp+13Ch+var_94]
.text:00405EC4                 mul     [esp+13Ch+var_84]
.text:00405ECB                 imul    ebx, ecx
.text:00405ECE                 mov     ecx, edx
.text:00405ED0                 mov     [esp+13Ch+var_124], eax
.text:00405ED4                 add     ecx, ebx
.text:00405ED6                 mov     edx, [esp+13Ch+var_84]
.text:00405EDD                 mov     ebx, [esp+13Ch+var_90]
.text:00405EE4                 xor     eax, eax
.text:00405EE6                 imul    edx, ebx
.text:00405EE9                 add     ecx, edx
.text:00405EEB                 mov     [esp+13Ch+var_120], ecx
.text:00405EEF                 mov     ebx, [esp+13Ch+var_120]
.text:00405EF3                 mov     ecx, [esp+13Ch+var_124]
.text:00405EF7                 mov     [esi+4], ebx
.text:00405EFA                 mov     [esi], ecx
.text:00405EFC                 jmp     short loc_405E96
.text:00405EFE ; ---------------------------------------------------------------------------
.text:00405EFE
.text:00405EFE loc_405EFE:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405EFE                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405EFE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00405669 cases 84,116
.text:00405F02                 mov     eax, ebx
.text:00405F04                 xor     ebp, ebp
.text:00405F06                 mov     [esp+13Ch+var_B8], ebp
.text:00405F0D                 sar     eax, 1Fh
.text:00405F10                 mov     edx, [esp+13Ch+var_C4]
.text:00405F14                 mov     [esp+13Ch+var_C0], eax
.text:00405F18                 lea     esi, [esp+13Ch+var_24]
.text:00405F1F                 mov     ebp, 3
.text:00405F24                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405F2B                 mov     ebx, [esp+13Ch+var_C0]
.text:00405F2F                 mov     [esp+13Ch+Radix], edx
.text:00405F33                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405F3B                 mov     [esp+13Ch+var_130], ebx
.text:00405F3F                 call    sub_40F4C0
.text:00405F44                 mov     [esp+13Ch+var_CC], eax
.text:00405F48                 mov     [esp+13Ch+var_C8], edx
.text:00405F4C
.text:00405F4C loc_405F4C:                             ; CODE XREF: sub_4054B0+ADC↓j
.text:00405F4C                 mov     ebx, [esi+4]
.text:00405F4F                 mov     edx, [esi]
.text:00405F51                 cmp     [esp+13Ch+var_C8], ebx
.text:00405F55                 mov     [esp+13Ch+var_D0], ebx
.text:00405F59                 mov     [esp+13Ch+var_D4], edx
.text:00405F5D                 ja      short loc_405F9A
.text:00405F5F                 mov     eax, [esp+13Ch+var_D0]
.text:00405F63                 cmp     [esp+13Ch+var_C8], eax
.text:00405F67                 jb      short loc_405F6F
.text:00405F69                 cmp     [esp+13Ch+var_CC], edx
.text:00405F6D                 jnb     short loc_405F9A
.text:00405F6F
.text:00405F6F loc_405F6F:                             ; CODE XREF: sub_4054B0+AB7↑j
.text:00405F6F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00405F75                 mov     eax, 1
.text:00405F7A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00405F81
.text:00405F81 loc_405F81:                             ; CODE XREF: sub_4054B0+B25↓j
.text:00405F81                 or      [esp+13Ch+var_B8], eax
.text:00405F88                 dec     ebp
.text:00405F89                 cmp     ebp, 0FFFFFFFFh
.text:00405F8C                 jnz     short loc_405F4C
.text:00405F8E                 mov     eax, [esp+13Ch+var_B8]
.text:00405F95                 jmp     loc_4057AA
.text:00405F9A ; ---------------------------------------------------------------------------
.text:00405F9A
.text:00405F9A loc_405F9A:                             ; CODE XREF: sub_4054B0+AAD↑j
.text:00405F9A                                         ; sub_4054B0+ABD↑j
.text:00405F9A                 mov     ecx, [esp+13Ch+var_C0]
.text:00405F9E                 mov     eax, [esp+13Ch+var_D4]
.text:00405FA2                 mov     ebx, [esp+13Ch+var_D4]
.text:00405FA6                 mul     [esp+13Ch+var_C4]
.text:00405FAA                 imul    ebx, ecx
.text:00405FAD                 mov     ecx, edx
.text:00405FAF                 mov     [esp+13Ch+var_124], eax
.text:00405FB3                 add     ecx, ebx
.text:00405FB5                 mov     edx, [esp+13Ch+var_C4]
.text:00405FB9                 mov     ebx, [esp+13Ch+var_D0]
.text:00405FBD                 xor     eax, eax
.text:00405FBF                 imul    edx, ebx
.text:00405FC2                 add     ecx, edx
.text:00405FC4                 mov     [esp+13Ch+var_120], ecx
.text:00405FC8                 mov     ebx, [esp+13Ch+var_120]
.text:00405FCC                 mov     ecx, [esp+13Ch+var_124]
.text:00405FD0                 mov     [esi+4], ebx
.text:00405FD3                 mov     [esi], ecx
.text:00405FD5                 jmp     short loc_405F81
.text:00405FD7 ; ---------------------------------------------------------------------------
.text:00405FD7
.text:00405FD7 loc_405FD7:                             ; CODE XREF: sub_4054B0+1B9↑j
.text:00405FD7                                         ; DATA XREF: sub_4054B0:jpt_405669↑o
.text:00405FD7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00405669 case 119
.text:00405FDF                 lea     ebp, [esp+13Ch+var_24]
.text:00405FE6                 mov     [esp+13Ch+var_130], 0
.text:00405FEE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00405FF5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00405FFD                 call    sub_40F4C0
.text:00406002                 mov     esi, [esp+13Ch+var_20]
.text:00406009                 mov     ecx, [esp+13Ch+var_24]
.text:00406010                 cmp     edx, esi
.text:00406012                 ja      short loc_406022
.text:00406014                 jb      loc_4057D5
.text:0040601A                 cmp     eax, ecx
.text:0040601C                 jb      loc_4057D5
.text:00406022
.text:00406022 loc_406022:                             ; CODE XREF: sub_4054B0+B62↑j
.text:00406022                 mov     esi, [ebp+0]
.text:00406025                 mov     eax, 2
.text:0040602A                 mov     ecx, [ebp+4]
.text:0040602D                 mul     esi
.text:0040602F                 lea     edx, [edx+ecx*2]
.text:00406032                 jmp     loc_4057A2
.text:00406037 ; ---------------------------------------------------------------------------
.text:00406037
.text:00406037 loc_406037:                             ; CODE XREF: sub_4054B0+196↑j
.text:00406037                                         ; sub_4054B0+1A8↑j
.text:00406037                 mov     esi, 2
.text:0040603C                 mov     ebx, 3E8h
.text:00406041                 mov     [esp+13Ch+var_30], esi
.text:00406048                 jmp     loc_40565E
.text:0040604D ; ---------------------------------------------------------------------------
.text:0040604D
.text:0040604D loc_40604D:                             ; CODE XREF: sub_4054B0+19F↑j
.text:0040604D                 cmp     eax, 69h ; 'i'
.text:00406050                 jnz     loc_40565E
.text:00406056                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040605A                 jnz     loc_40565E
.text:00406060                 mov     eax, 3
.text:00406065                 mov     [esp+13Ch+var_30], eax
.text:0040606C                 jmp     loc_40565E
.text:00406071 ; ---------------------------------------------------------------------------
.text:00406071
.text:00406071 loc_406071:                             ; CODE XREF: sub_4054B0+187↑j
.text:00406071                 mov     edx, [edi]
.text:00406073                 jmp     loc_40565E
.text:00406078 ; ---------------------------------------------------------------------------
.text:00406078
.text:00406078 loc_406078:                             ; CODE XREF: sub_4054B0+E2↑j
.text:00406078                 mov     edx, [esp+13Ch+var_24]
.text:0040607F                 mov     ecx, [esp+13Ch+var_20]
.text:00406086                 mov     edi, [esp+13Ch+arg_C]
.text:0040608D                 mov     [edi], edx
.text:0040608F                 mov     [edi+4], ecx
.text:00406092                 jmp     loc_4055BB
.text:00406097 ; ---------------------------------------------------------------------------
.text:00406097
.text:00406097 loc_406097:                             ; CODE XREF: sub_4054B0+D3↑j
.text:00406097                 call    _errno
.text:0040609C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040609F                 jnz     short loc_4060B2
.text:004060A1                 mov     esi, 1
.text:004060A6                 mov     [esp+13Ch+var_28], esi
.text:004060AD                 jmp     loc_405589
.text:004060B2 ; ---------------------------------------------------------------------------
.text:004060B2
.text:004060B2 loc_4060B2:                             ; CODE XREF: sub_4054B0+BEF↑j
.text:004060B2                                         ; sub_4054B0+C15↓j ...
.text:004060B2                 mov     eax, 4
.text:004060B7                 jmp     loc_4055C2
.text:004060BC ; ---------------------------------------------------------------------------
.text:004060BC
.text:004060BC loc_4060BC:                             ; CODE XREF: sub_4054B0+C4↑j
.text:004060BC                 mov     ebx, [esp+13Ch+Str]
.text:004060C3                 test    ebx, ebx
.text:004060C5                 jz      short loc_4060B2
.text:004060C7                 movzx   eax, byte ptr [eax]
.text:004060CA                 test    al, al
.text:004060CC                 jz      short loc_4060B2
.text:004060CE                 mov     esi, [esp+13Ch+Str]
.text:004060D5                 movsx   ebp, al
.text:004060D8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004060DC                 mov     [esp+13Ch+C], esi ; Str
.text:004060DF                 call    strchr
.text:004060E4                 test    eax, eax
.text:004060E6                 jz      short loc_4060B2
.text:004060E8                 mov     ecx, 1
.text:004060ED                 xor     edx, edx
.text:004060EF                 mov     [esp+13Ch+var_24], ecx
.text:004060F6                 mov     [esp+13Ch+var_20], edx
.text:004060FD                 jmp     loc_405589
.text:00406102 ; ---------------------------------------------------------------------------
.text:00406102
.text:00406102 loc_406102:                             ; CODE XREF: sub_4054B0+61↑j
.text:00406102                 mov     eax, ds:_pctype
.text:00406107                 mov     ecx, [eax]
.text:00406109                 movzx   eax, word ptr [ecx+edx*2]
.text:0040610D                 and     eax, 8
.text:00406110                 jmp     loc_405527
.text:00406115 ; ---------------------------------------------------------------------------
.text:00406115
.text:00406115 loc_406115:                             ; CODE XREF: sub_4054B0+33↑j
.text:00406115                 lea     edi, [esp+13Ch+var_18]
.text:0040611C                 jmp     loc_4054E9
.text:00406121 ; ---------------------------------------------------------------------------
.text:00406121
.text:00406121 loc_406121:                             ; CODE XREF: sub_4054B0+24↑j
.text:00406121                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00406129                 mov     [esp+13Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00406131                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00406138                 call    _assert
.text:00406138 sub_4054B0      endp
.text:00406138
.text:00406138 ; ---------------------------------------------------------------------------
.text:0040613D                 align 10h
.text:00406140
.text:00406140 ; =============== S U B R O U T I N E =======================================
.text:00406140
.text:00406140
.text:00406140 sub_406140      proc near               ; CODE XREF: sub_402EE0+1C0↑p
.text:00406140
.text:00406140 var_1C          = dword ptr -1Ch
.text:00406140 var_18          = dword ptr -18h
.text:00406140 var_14          = dword ptr -14h
.text:00406140 var_10          = dword ptr -10h
.text:00406140 arg_0           = dword ptr  4
.text:00406140 arg_4           = dword ptr  8
.text:00406140 arg_8           = dword ptr  0Ch
.text:00406140
.text:00406140                 push    edi
.text:00406141                 push    esi
.text:00406142                 push    ebx
.text:00406143                 sub     esp, 10h
.text:00406146                 mov     esi, [esp+1Ch+arg_4]
.text:0040614A                 mov     edx, [esp+1Ch+arg_8]
.text:0040614E                 mov     ebx, [esp+1Ch+arg_0]
.text:00406152                 test    esi, esi
.text:00406154                 mov     byte ptr [edx+15h], 0
.text:00406158                 lea     edi, [edx+15h]
.text:0040615B                 js      short loc_4061B0
.text:0040615D                 lea     esi, [esi+0]
.text:00406160
.text:00406160 loc_406160:                             ; CODE XREF: sub_406140+65↓j
.text:00406160                 mov     [esp+1Ch+var_1C], ebx
.text:00406163                 dec     edi
.text:00406164                 mov     [esp+1Ch+var_18], esi
.text:00406168                 mov     [esp+1Ch+var_14], 0Ah
.text:00406170                 mov     [esp+1Ch+var_10], 0
.text:00406178                 call    sub_40F5E0
.text:0040617D                 add     al, 30h ; '0'
.text:0040617F                 mov     [edi], al
.text:00406181                 mov     [esp+1Ch+var_1C], ebx
.text:00406184                 mov     [esp+1Ch+var_18], esi
.text:00406188                 mov     [esp+1Ch+var_14], 0Ah
.text:00406190                 mov     [esp+1Ch+var_10], 0
.text:00406198                 call    sub_40F7A0
.text:0040619D                 mov     ebx, eax
.text:0040619F                 mov     esi, edx
.text:004061A1                 mov     eax, edx
.text:004061A3                 or      eax, ebx
.text:004061A5                 jnz     short loc_406160
.text:004061A7
.text:004061A7 loc_4061A7:                             ; CODE XREF: sub_406140+BB↓j
.text:004061A7                 add     esp, 10h
.text:004061AA                 mov     eax, edi
.text:004061AC                 pop     ebx
.text:004061AD                 pop     esi
.text:004061AE                 pop     edi
.text:004061AF                 retn
.text:004061B0 ; ---------------------------------------------------------------------------
.text:004061B0
.text:004061B0 loc_4061B0:                             ; CODE XREF: sub_406140+1B↑j
.text:004061B0                                         ; sub_406140+B5↓j
.text:004061B0                 mov     [esp+1Ch+var_1C], ebx
.text:004061B3                 dec     edi
.text:004061B4                 mov     [esp+1Ch+var_18], esi
.text:004061B8                 mov     [esp+1Ch+var_14], 0Ah
.text:004061C0                 mov     [esp+1Ch+var_10], 0
.text:004061C8                 call    sub_40F5E0
.text:004061CD                 mov     cl, 30h ; '0'
.text:004061CF                 sub     cl, al
.text:004061D1                 mov     [edi], cl
.text:004061D3                 mov     [esp+1Ch+var_1C], ebx
.text:004061D6                 mov     [esp+1Ch+var_18], esi
.text:004061DA                 mov     [esp+1Ch+var_14], 0Ah
.text:004061E2                 mov     [esp+1Ch+var_10], 0
.text:004061EA                 call    sub_40F7A0
.text:004061EF                 mov     ebx, eax
.text:004061F1                 mov     esi, edx
.text:004061F3                 or      edx, ebx
.text:004061F5                 jnz     short loc_4061B0
.text:004061F7                 dec     edi
.text:004061F8                 mov     byte ptr [edi], 2Dh ; '-'
.text:004061FB                 jmp     short loc_4061A7
.text:004061FB sub_406140      endp
.text:004061FB
.text:004061FB ; ---------------------------------------------------------------------------
.text:004061FD                 align 10h
.text:00406200
.text:00406200 ; =============== S U B R O U T I N E =======================================
.text:00406200
.text:00406200
.text:00406200 sub_406200      proc near               ; CODE XREF: sub_403770+53↑p
.text:00406200
.text:00406200 Size            = dword ptr -0Ch
.text:00406200 var_4           = dword ptr -4
.text:00406200 arg_0           = dword ptr  4
.text:00406200 arg_4           = dword ptr  8
.text:00406200
.text:00406200                 sub     esp, 0Ch
.text:00406203                 xor     edx, edx
.text:00406205                 mov     ecx, [esp+0Ch+arg_4]
.text:00406209                 mov     [esp+0Ch+var_4], ebx
.text:0040620D                 mov     eax, 0FFFFFFFFh
.text:00406212                 mov     ebx, [esp+0Ch+arg_0]
.text:00406216                 div     ecx
.text:00406218                 cmp     eax, ebx
.text:0040621A                 jb      short loc_406239
.text:0040621C                 mov     edx, ebx
.text:0040621E                 imul    edx, ecx
.text:00406221                 mov     [esp+0Ch+Size], edx ; Size
.text:00406224                 call    malloc
.text:00406229                 test    eax, eax
.text:0040622B                 jz      short loc_406235
.text:0040622D
.text:0040622D loc_40622D:                             ; CODE XREF: sub_406200+37↓j
.text:0040622D                 mov     ebx, [esp+0Ch+var_4]
.text:00406231                 add     esp, 0Ch
.text:00406234                 retn
.text:00406235 ; ---------------------------------------------------------------------------
.text:00406235
.text:00406235 loc_406235:                             ; CODE XREF: sub_406200+2B↑j
.text:00406235                 test    ebx, ebx
.text:00406237                 jz      short loc_40622D
.text:00406239
.text:00406239 loc_406239:                             ; CODE XREF: sub_406200+1A↑j
.text:00406239                 call    sub_407A30
.text:00406239 sub_406200      endp
.text:00406239
.text:00406239 ; ---------------------------------------------------------------------------
.text:0040623E                 align 10h
.text:00406240
.text:00406240 ; =============== S U B R O U T I N E =======================================
.text:00406240
.text:00406240
.text:00406240 ; int __cdecl sub_406240(size_t)
.text:00406240 sub_406240      proc near               ; CODE XREF: sub_402B50+23↑p
.text:00406240                                         ; sub_402B50+4F↑p ...
.text:00406240
.text:00406240 Size            = dword ptr -0Ch
.text:00406240 var_4           = dword ptr -4
.text:00406240 arg_0           = dword ptr  4
.text:00406240
.text:00406240                 sub     esp, 0Ch
.text:00406243                 mov     [esp+0Ch+var_4], ebx
.text:00406247                 mov     ebx, [esp+0Ch+arg_0]
.text:0040624B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040624E                 call    malloc
.text:00406253                 test    eax, eax
.text:00406255                 jz      short loc_406260
.text:00406257
.text:00406257 loc_406257:                             ; CODE XREF: sub_406240+22↓j
.text:00406257                 mov     ebx, [esp+0Ch+var_4]
.text:0040625B                 add     esp, 0Ch
.text:0040625E                 retn
.text:0040625E ; ---------------------------------------------------------------------------
.text:0040625F                 align 10h
.text:00406260
.text:00406260 loc_406260:                             ; CODE XREF: sub_406240+15↑j
.text:00406260                 test    ebx, ebx
.text:00406262                 jz      short loc_406257
.text:00406264                 call    sub_407A30
.text:00406264 sub_406240      endp
.text:00406264
.text:00406264 ; ---------------------------------------------------------------------------
.text:00406269                 align 10h
.text:00406270                 sub     esp, 1Ch
.text:00406273                 xor     edx, edx
.text:00406275                 mov     eax, 0FFFFFFFFh
.text:0040627A                 mov     [esp+14h], ebx
.text:0040627E                 mov     ecx, [esp+20h]
.text:00406282                 mov     ebx, [esp+28h]
.text:00406286                 mov     [esp+18h], esi
.text:0040628A                 mov     esi, [esp+24h]
.text:0040628E                 div     ebx
.text:00406290                 cmp     eax, esi
.text:00406292                 jb      short loc_4062C4
.text:00406294                 mov     [esp], ecx
.text:00406297                 mov     edx, esi
.text:00406299                 imul    edx, ebx
.text:0040629C                 mov     [esp+4], edx
.text:004062A0                 call    realloc
.text:004062A5                 test    eax, eax
.text:004062A7                 mov     ecx, eax
.text:004062A9                 jz      short loc_4062C0
.text:004062AB
.text:004062AB loc_4062AB:                             ; CODE XREF: .text:004062C2↓j
.text:004062AB                 mov     ebx, [esp+14h]
.text:004062AF                 mov     eax, ecx
.text:004062B1                 mov     esi, [esp+18h]
.text:004062B5                 add     esp, 1Ch
.text:004062B8                 retn
.text:004062B8 ; ---------------------------------------------------------------------------
.text:004062B9                 align 10h
.text:004062C0
.text:004062C0 loc_4062C0:                             ; CODE XREF: .text:004062A9↑j
.text:004062C0                 test    esi, esi
.text:004062C2                 jz      short loc_4062AB
.text:004062C4
.text:004062C4 loc_4062C4:                             ; CODE XREF: .text:00406292↑j
.text:004062C4                 call    sub_407A30
.text:004062C4 ; ---------------------------------------------------------------------------
.text:004062C9                 align 10h
.text:004062D0
.text:004062D0 ; =============== S U B R O U T I N E =======================================
.text:004062D0
.text:004062D0
.text:004062D0 ; int __cdecl sub_4062D0(void *, size_t)
.text:004062D0 sub_4062D0      proc near               ; CODE XREF: sub_407840+5B↓p
.text:004062D0
.text:004062D0 Block           = dword ptr -0Ch
.text:004062D0 Size            = dword ptr -8
.text:004062D0 var_4           = dword ptr -4
.text:004062D0 arg_0           = dword ptr  4
.text:004062D0 arg_4           = dword ptr  8
.text:004062D0
.text:004062D0                 sub     esp, 0Ch
.text:004062D3                 mov     edx, [esp+0Ch+arg_0]
.text:004062D7                 mov     [esp+0Ch+var_4], ebx
.text:004062DB                 mov     ebx, [esp+0Ch+arg_4]
.text:004062DF                 mov     [esp+0Ch+Block], edx ; Block
.text:004062E2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004062E6                 call    realloc
.text:004062EB                 test    eax, eax
.text:004062ED                 jz      short loc_4062F7
.text:004062EF
.text:004062EF loc_4062EF:                             ; CODE XREF: sub_4062D0+29↓j
.text:004062EF                 mov     ebx, [esp+0Ch+var_4]
.text:004062F3                 add     esp, 0Ch
.text:004062F6                 retn
.text:004062F7 ; ---------------------------------------------------------------------------
.text:004062F7
.text:004062F7 loc_4062F7:                             ; CODE XREF: sub_4062D0+1D↑j
.text:004062F7                 test    ebx, ebx
.text:004062F9                 jz      short loc_4062EF
.text:004062FB                 call    sub_407A30
.text:004062FB sub_4062D0      endp
.text:004062FB
.text:00406300 ; ---------------------------------------------------------------------------
.text:00406300                 jmp     sub_406450
.text:00406300 ; ---------------------------------------------------------------------------
.text:00406305                 align 10h
.text:00406310                 sub     esp, 0Ch
.text:00406313                 mov     edx, [esp+14h]
.text:00406317                 mov     dword ptr [esp+8], 1
.text:0040631F                 mov     [esp+4], edx
.text:00406323                 mov     edx, [esp+10h]
.text:00406327                 mov     [esp], edx
.text:0040632A                 call    sub_406450
.text:0040632F                 add     esp, 0Ch
.text:00406332                 retn
.text:00406332 ; ---------------------------------------------------------------------------
.text:00406333                 align 10h
.text:00406340                 sub     esp, 1Ch
.text:00406343                 mov     [esp+18h], ebx
.text:00406347                 mov     ebx, [esp+20h]
.text:0040634B                 mov     [esp], ebx
.text:0040634E                 call    malloc
.text:00406353                 test    eax, eax
.text:00406355                 jz      short loc_406373
.text:00406357
.text:00406357 loc_406357:                             ; CODE XREF: .text:00406375↓j
.text:00406357                 mov     [esp+8], ebx
.text:0040635B                 mov     dword ptr [esp+4], 0
.text:00406363                 mov     [esp], eax
.text:00406366                 call    memset
.text:0040636B                 mov     ebx, [esp+18h]
.text:0040636F                 add     esp, 1Ch
.text:00406372                 retn
.text:00406373 ; ---------------------------------------------------------------------------
.text:00406373
.text:00406373 loc_406373:                             ; CODE XREF: .text:00406355↑j
.text:00406373                 test    ebx, ebx
.text:00406375                 jz      short loc_406357
.text:00406377                 call    sub_407A30
.text:00406377 ; ---------------------------------------------------------------------------
.text:0040637C                 align 10h
.text:00406380
.text:00406380 ; =============== S U B R O U T I N E =======================================
.text:00406380
.text:00406380
.text:00406380 ; int __cdecl sub_406380(size_t, size_t)
.text:00406380 sub_406380      proc near               ; CODE XREF: sub_403770+210↑p
.text:00406380
.text:00406380 Count           = dword ptr -0Ch
.text:00406380 Size            = dword ptr -8
.text:00406380 var_4           = dword ptr -4
.text:00406380 arg_0           = dword ptr  4
.text:00406380 arg_4           = dword ptr  8
.text:00406380
.text:00406380                 sub     esp, 0Ch
.text:00406383                 xor     edx, edx
.text:00406385                 mov     ecx, [esp+0Ch+arg_4]
.text:00406389                 mov     [esp+0Ch+var_4], ebx
.text:0040638D                 mov     eax, 0FFFFFFFFh
.text:00406392                 mov     ebx, [esp+0Ch+arg_0]
.text:00406396                 div     ecx
.text:00406398                 cmp     eax, ebx
.text:0040639A                 jb      short loc_4063B8
.text:0040639C                 mov     [esp+0Ch+Size], ecx ; Size
.text:004063A0                 mov     [esp+0Ch+Count], ebx ; Count
.text:004063A3                 call    calloc
.text:004063A8                 test    eax, eax
.text:004063AA                 jz      short loc_4063B4
.text:004063AC
.text:004063AC loc_4063AC:                             ; CODE XREF: sub_406380+36↓j
.text:004063AC                 mov     ebx, [esp+0Ch+var_4]
.text:004063B0                 add     esp, 0Ch
.text:004063B3                 retn
.text:004063B4 ; ---------------------------------------------------------------------------
.text:004063B4
.text:004063B4 loc_4063B4:                             ; CODE XREF: sub_406380+2A↑j
.text:004063B4                 test    ebx, ebx
.text:004063B6                 jz      short loc_4063AC
.text:004063B8
.text:004063B8 loc_4063B8:                             ; CODE XREF: sub_406380+1A↑j
.text:004063B8                 call    sub_407A30
.text:004063B8 sub_406380      endp
.text:004063B8
.text:004063B8 ; ---------------------------------------------------------------------------
.text:004063BD                 align 10h
.text:004063C0                 sub     esp, 1Ch
.text:004063C3                 mov     [esp+18h], ebx
.text:004063C7                 mov     ebx, [esp+24h]
.text:004063CB                 mov     [esp], ebx
.text:004063CE                 call    malloc
.text:004063D3                 test    eax, eax
.text:004063D5                 mov     edx, eax
.text:004063D7                 jz      short loc_4063F5
.text:004063D9
.text:004063D9 loc_4063D9:                             ; CODE XREF: .text:004063F7↓j
.text:004063D9                 mov     [esp+8], ebx
.text:004063DD                 mov     ecx, [esp+20h]
.text:004063E1                 mov     [esp], edx
.text:004063E4                 mov     [esp+4], ecx
.text:004063E8                 call    memcpy
.text:004063ED                 mov     ebx, [esp+18h]
.text:004063F1                 add     esp, 1Ch
.text:004063F4                 retn
.text:004063F5 ; ---------------------------------------------------------------------------
.text:004063F5
.text:004063F5 loc_4063F5:                             ; CODE XREF: .text:004063D7↑j
.text:004063F5                 test    ebx, ebx
.text:004063F7                 jz      short loc_4063D9
.text:004063F9                 call    sub_407A30
.text:004063F9 ; ---------------------------------------------------------------------------
.text:004063FE                 align 10h
.text:00406400                 sub     esp, 1Ch
.text:00406403                 mov     [esp+18h], esi
.text:00406407                 mov     esi, [esp+20h]
.text:0040640B                 mov     [esp+14h], ebx
.text:0040640F                 mov     [esp], esi
.text:00406412                 call    strlen
.text:00406417                 lea     ebx, [eax+1]
.text:0040641A                 mov     [esp], ebx
.text:0040641D                 call    malloc
.text:00406422                 test    eax, eax
.text:00406424                 jz      short loc_406442
.text:00406426
.text:00406426 loc_406426:                             ; CODE XREF: .text:00406444↓j
.text:00406426                 mov     [esp+8], ebx
.text:0040642A                 mov     [esp+4], esi
.text:0040642E                 mov     [esp], eax
.text:00406431                 call    memcpy
.text:00406436                 mov     ebx, [esp+14h]
.text:0040643A                 mov     esi, [esp+18h]
.text:0040643E                 add     esp, 1Ch
.text:00406441                 retn
.text:00406442 ; ---------------------------------------------------------------------------
.text:00406442
.text:00406442 loc_406442:                             ; CODE XREF: .text:00406424↑j
.text:00406442                 test    ebx, ebx
.text:00406444                 jz      short loc_406426
.text:00406446                 call    sub_407A30
.text:00406446 ; ---------------------------------------------------------------------------
.text:0040644B                 align 10h
.text:00406450
.text:00406450 ; =============== S U B R O U T I N E =======================================
.text:00406450
.text:00406450
.text:00406450 ; int __cdecl sub_406450(void *, int, int)
.text:00406450 sub_406450      proc near               ; CODE XREF: .text:00406300↑j
.text:00406450                                         ; .text:0040632A↑p
.text:00406450
.text:00406450 Block           = dword ptr -1Ch
.text:00406450 Size            = dword ptr -18h
.text:00406450 var_C           = dword ptr -0Ch
.text:00406450 var_8           = dword ptr -8
.text:00406450 var_4           = dword ptr -4
.text:00406450 arg_0           = dword ptr  4
.text:00406450 arg_4           = dword ptr  8
.text:00406450 arg_8           = dword ptr  0Ch
.text:00406450
.text:00406450                 sub     esp, 1Ch
.text:00406453                 mov     [esp+1Ch+var_8], esi
.text:00406457                 mov     esi, [esp+1Ch+arg_0]
.text:0040645B                 mov     [esp+1Ch+var_4], edi
.text:0040645F                 mov     edi, [esp+1Ch+arg_4]
.text:00406463                 test    esi, esi
.text:00406465                 mov     [esp+1Ch+var_C], ebx
.text:00406469                 mov     ecx, [edi]
.text:0040646B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040646F                 jz      short loc_4064B0
.text:00406471                 xor     edx, edx
.text:00406473                 mov     eax, 7FFFFFFFh
.text:00406478                 div     ebx
.text:0040647A                 cmp     eax, ecx
.text:0040647C                 jb      short loc_4064A9
.text:0040647E                 add     ecx, ecx
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: sub_406450+62↓j
.text:00406480                                         ; sub_406450+71↓j ...
.text:00406480                 mov     [edi], ecx
.text:00406482                 imul    ebx, ecx
.text:00406485                 mov     [esp+1Ch+Block], esi ; Block
.text:00406488                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040648C                 call    realloc
.text:00406491                 test    eax, eax
.text:00406493                 jz      short loc_4064A5
.text:00406495
.text:00406495 loc_406495:                             ; CODE XREF: sub_406450+57↓j
.text:00406495                 mov     ebx, [esp+1Ch+var_C]
.text:00406499                 mov     esi, [esp+1Ch+var_8]
.text:0040649D                 mov     edi, [esp+1Ch+var_4]
.text:004064A1                 add     esp, 1Ch
.text:004064A4                 retn
.text:004064A5 ; ---------------------------------------------------------------------------
.text:004064A5
.text:004064A5 loc_4064A5:                             ; CODE XREF: sub_406450+43↑j
.text:004064A5                 test    ebx, ebx
.text:004064A7                 jz      short loc_406495
.text:004064A9
.text:004064A9 loc_4064A9:                             ; CODE XREF: sub_406450+2C↑j
.text:004064A9                 call    sub_407A30
.text:004064A9 ; ---------------------------------------------------------------------------
.text:004064AE                 align 10h
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: sub_406450+1F↑j
.text:004064B0                 test    ecx, ecx
.text:004064B2                 jnz     short loc_406480
.text:004064B4                 xor     edx, edx
.text:004064B6                 mov     eax, 40h ; '@'
.text:004064BB                 div     ebx
.text:004064BD                 test    eax, eax
.text:004064BF                 mov     ecx, eax
.text:004064C1                 jnz     short loc_406480
.text:004064C3                 mov     ecx, 1
.text:004064C8                 jmp     short loc_406480
.text:004064C8 sub_406450      endp
.text:004064C8
.text:004064C8 ; ---------------------------------------------------------------------------
.text:004064CA                 align 10h
.text:004064D0
.text:004064D0 ; =============== S U B R O U T I N E =======================================
.text:004064D0
.text:004064D0
.text:004064D0 sub_4064D0      proc near               ; CODE XREF: sub_403770+8A↑p
.text:004064D0                                         ; sub_403770+259↑p
.text:004064D0
.text:004064D0 var_1C          = dword ptr -1Ch
.text:004064D0 var_18          = dword ptr -18h
.text:004064D0 var_14          = dword ptr -14h
.text:004064D0 arg_0           = dword ptr  4
.text:004064D0 arg_4           = dword ptr  8
.text:004064D0 arg_8           = dword ptr  0Ch
.text:004064D0
.text:004064D0                 push    ebp
.text:004064D1                 push    edi
.text:004064D2                 xor     edi, edi
.text:004064D4                 push    esi
.text:004064D5                 push    ebx
.text:004064D6                 sub     esp, 0Ch
.text:004064D9                 mov     ebx, [esp+1Ch+arg_8]
.text:004064DD                 mov     ebp, [esp+1Ch+arg_0]
.text:004064E1                 mov     esi, [esp+1Ch+arg_4]
.text:004064E5                 test    ebx, ebx
.text:004064E7                 jnz     short loc_4064F3
.text:004064E9
.text:004064E9 loc_4064E9:                             ; CODE XREF: sub_4064D0+36↓j
.text:004064E9                                         ; sub_4064D0+44↓j ...
.text:004064E9                 add     esp, 0Ch
.text:004064EC                 mov     eax, edi
.text:004064EE                 pop     ebx
.text:004064EF                 pop     esi
.text:004064F0                 pop     edi
.text:004064F1                 pop     ebp
.text:004064F2                 retn
.text:004064F3 ; ---------------------------------------------------------------------------
.text:004064F3
.text:004064F3 loc_4064F3:                             ; CODE XREF: sub_4064D0+17↑j
.text:004064F3                                         ; sub_4064D0+42↓j
.text:004064F3                 mov     [esp+1Ch+var_14], ebx
.text:004064F7                 mov     [esp+1Ch+var_18], esi
.text:004064FB                 mov     [esp+1Ch+var_1C], ebp
.text:004064FE                 call    sub_4065A0
.text:00406503                 cmp     eax, 0FFFFFFFFh
.text:00406506                 jz      short loc_4064E9
.text:00406508                 test    eax, eax
.text:0040650A                 jz      short loc_406516
.text:0040650C                 add     edi, eax
.text:0040650E                 add     esi, eax
.text:00406510                 sub     ebx, eax
.text:00406512                 jnz     short loc_4064F3
.text:00406514                 jmp     short loc_4064E9
.text:00406516 ; ---------------------------------------------------------------------------
.text:00406516
.text:00406516 loc_406516:                             ; CODE XREF: sub_4064D0+3A↑j
.text:00406516                 call    _errno
.text:0040651B                 mov     dword ptr [eax], 0
.text:00406521                 jmp     short loc_4064E9
.text:00406521 sub_4064D0      endp
.text:00406521
.text:00406521 ; ---------------------------------------------------------------------------
.text:00406523                 align 10h
.text:00406530
.text:00406530 ; =============== S U B R O U T I N E =======================================
.text:00406530
.text:00406530
.text:00406530 sub_406530      proc near               ; CODE XREF: sub_401A30+8F6↑p
.text:00406530                                         ; sub_403770+4BA↑p
.text:00406530
.text:00406530 var_1C          = dword ptr -1Ch
.text:00406530 var_18          = dword ptr -18h
.text:00406530 var_14          = dword ptr -14h
.text:00406530 var_10          = dword ptr -10h
.text:00406530 arg_0           = dword ptr  4
.text:00406530 arg_4           = dword ptr  8
.text:00406530 arg_8           = dword ptr  0Ch
.text:00406530
.text:00406530                 push    edi
.text:00406531                 push    esi
.text:00406532                 push    ebx
.text:00406533                 sub     esp, 10h
.text:00406536                 mov     edx, [esp+1Ch+arg_8]
.text:0040653A                 mov     ebx, [esp+1Ch+arg_0]
.text:0040653E                 mov     esi, [esp+1Ch+arg_4]
.text:00406542                 lea     edi, [edx+15h]
.text:00406545                 mov     byte ptr [edx+15h], 0
.text:00406549                 lea     esi, [esi+0]
.text:00406550
.text:00406550 loc_406550:                             ; CODE XREF: sub_406530+63↓j
.text:00406550                 mov     [esp+1Ch+var_1C], ebx
.text:00406553                 dec     edi
.text:00406554                 mov     [esp+1Ch+var_18], esi
.text:00406558                 mov     [esp+1Ch+var_14], 0Ah
.text:00406560                 mov     [esp+1Ch+var_10], 0
.text:00406568                 call    sub_40F900
.text:0040656D                 add     al, 30h ; '0'
.text:0040656F                 mov     [edi], al
.text:00406571                 mov     [esp+1Ch+var_1C], ebx
.text:00406574                 mov     [esp+1Ch+var_18], esi
.text:00406578                 mov     [esp+1Ch+var_14], 0Ah
.text:00406580                 mov     [esp+1Ch+var_10], 0
.text:00406588                 call    sub_40F4C0
.text:0040658D                 mov     ebx, eax
.text:0040658F                 mov     esi, edx
.text:00406591                 or      edx, ebx
.text:00406593                 jnz     short loc_406550
.text:00406595                 add     esp, 10h
.text:00406598                 mov     eax, edi
.text:0040659A                 pop     ebx
.text:0040659B                 pop     esi
.text:0040659C                 pop     edi
.text:0040659D                 retn
.text:0040659D sub_406530      endp
.text:0040659D
.text:0040659D ; ---------------------------------------------------------------------------
.text:0040659E                 align 10h
.text:004065A0
.text:004065A0 ; =============== S U B R O U T I N E =======================================
.text:004065A0
.text:004065A0
.text:004065A0 sub_4065A0      proc near               ; CODE XREF: sub_4027F0+20D↑p
.text:004065A0                                         ; sub_402B50+69↑p ...
.text:004065A0
.text:004065A0 FileHandle      = dword ptr -1Ch
.text:004065A0 DstBuf          = dword ptr -18h
.text:004065A0 MaxCharCount    = dword ptr -14h
.text:004065A0 arg_0           = dword ptr  4
.text:004065A0 arg_4           = dword ptr  8
.text:004065A0 arg_8           = dword ptr  0Ch
.text:004065A0
.text:004065A0                 push    ebp
.text:004065A1                 push    edi
.text:004065A2                 push    esi
.text:004065A3                 push    ebx
.text:004065A4                 sub     esp, 0Ch
.text:004065A7                 mov     ebp, [esp+1Ch+arg_0]
.text:004065AB                 mov     edi, [esp+1Ch+arg_4]
.text:004065AF                 mov     ebx, [esp+1Ch+arg_8]
.text:004065B3                 lea     esi, [esi+0]
.text:004065B9                 lea     edi, [edi+0]
.text:004065C0
.text:004065C0 loc_4065C0:                             ; CODE XREF: sub_4065A0+3E↓j
.text:004065C0                                         ; sub_4065A0+57↓j
.text:004065C0                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:004065C4                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:004065C8                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:004065CB                 call    _read
.text:004065D0                 test    eax, eax
.text:004065D2                 mov     esi, eax
.text:004065D4                 jns     short loc_4065F9
.text:004065D6                 call    _errno
.text:004065DB                 cmp     dword ptr [eax], 4
.text:004065DE                 jz      short loc_4065C0
.text:004065E0                 call    _errno
.text:004065E5                 cmp     dword ptr [eax], 16h
.text:004065E8                 jnz     short loc_4065F9
.text:004065EA                 cmp     ebx, 7FFFE000h
.text:004065F0                 jbe     short loc_4065F9
.text:004065F2                 mov     ebx, 7FFFE000h
.text:004065F7                 jmp     short loc_4065C0
.text:004065F9 ; ---------------------------------------------------------------------------
.text:004065F9
.text:004065F9 loc_4065F9:                             ; CODE XREF: sub_4065A0+34↑j
.text:004065F9                                         ; sub_4065A0+48↑j ...
.text:004065F9                 add     esp, 0Ch
.text:004065FC                 mov     eax, esi
.text:004065FE                 pop     ebx
.text:004065FF                 pop     esi
.text:00406600                 pop     edi
.text:00406601                 pop     ebp
.text:00406602                 retn
.text:00406602 sub_4065A0      endp
.text:00406602
.text:00406602 ; ---------------------------------------------------------------------------
.text:00406603                 align 10h
.text:00406610                 sub     esp, 0Ch
.text:00406613                 mov     edx, [esp+14h]
.text:00406617                 mov     dword ptr [esp+4], 5
.text:0040661F                 mov     [esp+8], edx
.text:00406623                 mov     edx, [esp+10h]
.text:00406627                 mov     [esp], edx
.text:0040662A                 call    sub_407430
.text:0040662F                 add     esp, 0Ch
.text:00406632                 retn
.text:00406632 ; ---------------------------------------------------------------------------
.text:00406633                 align 10h
.text:00406640
.text:00406640 ; =============== S U B R O U T I N E =======================================
.text:00406640
.text:00406640
.text:00406640 ; int __cdecl sub_406640(char *)
.text:00406640 sub_406640      proc near               ; CODE XREF: sub_401A30+758↑p
.text:00406640                                         ; sub_401A30+8D1↑p ...
.text:00406640
.text:00406640 var_C           = dword ptr -0Ch
.text:00406640 var_8           = dword ptr -8
.text:00406640 var_4           = dword ptr -4
.text:00406640 arg_0           = dword ptr  4
.text:00406640
.text:00406640                 sub     esp, 0Ch
.text:00406643                 mov     edx, [esp+0Ch+arg_0]
.text:00406647                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040664F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00406656                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040665A                 call    sub_407430
.text:0040665F                 add     esp, 0Ch
.text:00406662                 retn
.text:00406662 sub_406640      endp
.text:00406662
.text:00406662 ; ---------------------------------------------------------------------------
.text:00406663                 align 10h
.text:00406670 aLiteral        db 'literal',0          ; DATA XREF: .text:004066B0↓o
.text:00406678 aShell          db 'shell',0            ; DATA XREF: .text:004066B4↓o
.text:0040667E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004066B8↓o
.text:0040668B aC              db 'c',0                ; DATA XREF: .text:004066BC↓o
.text:0040668D aEscape         db 'escape',0           ; DATA XREF: .text:004066C0↓o
.text:00406694 aLocale         db 'locale',0           ; DATA XREF: .text:004066C4↓o
.text:0040669B aClocale        db 'clocale',0          ; DATA XREF: .text:004066C8↓o
.text:004066A3                 align 10h
.text:004066B0                 dd offset aLiteral      ; "literal"
.text:004066B4                 dd offset aShell        ; "shell"
.text:004066B8                 dd offset aShellAlways  ; "shell-always"
.text:004066BC                 dd offset aC            ; "c"
.text:004066C0                 dd offset aEscape       ; "escape"
.text:004066C4                 dd offset aLocale       ; "locale"
.text:004066C8                 dd offset aClocale      ; "clocale"
.text:004066CC                 dd 2 dup(0)
.text:004066D4                 dd 1, 2, 3, 4, 5, 6
.text:004066EC asc_4066EC:                             ; DATA XREF: sub_406700+7E↓o
.text:004066EC                                         ; sub_406700+A39↓o ...
.text:004066EC                 text "UTF-16LE", '"',27h,'`'
.text:004066F2                 align 10h
.text:00406700
.text:00406700 ; =============== S U B R O U T I N E =======================================
.text:00406700
.text:00406700
.text:00406700 ; int __cdecl sub_406700(int, int, char *Str, int, int, int)
.text:00406700 sub_406700      proc near               ; CODE XREF: sub_406700+43A↓p
.text:00406700                                         ; .text:004072C3↓p ...
.text:00406700
.text:00406700 C               = dword ptr -4Ch
.text:00406700 Type            = dword ptr -48h
.text:00406700 SizeInBytes     = dword ptr -44h
.text:00406700 State           = dword ptr -40h
.text:00406700 var_3C          = dword ptr -3Ch
.text:00406700 var_38          = dword ptr -38h
.text:00406700 var_34          = dword ptr -34h
.text:00406700 var_30          = dword ptr -30h
.text:00406700 var_29          = byte ptr -29h
.text:00406700 var_28          = dword ptr -28h
.text:00406700 var_22          = byte ptr -22h
.text:00406700 var_21          = byte ptr -21h
.text:00406700 var_20          = dword ptr -20h
.text:00406700 var_1C          = dword ptr -1Ch
.text:00406700 var_18          = mbstate_t ptr -18h
.text:00406700 arg_0           = dword ptr  4
.text:00406700 arg_4           = dword ptr  8
.text:00406700 Str             = dword ptr  0Ch
.text:00406700 arg_C           = dword ptr  10h
.text:00406700 arg_10          = dword ptr  14h
.text:00406700 arg_14          = dword ptr  18h
.text:00406700
.text:00406700                 push    ebp
.text:00406701                 push    edi
.text:00406702                 push    esi
.text:00406703                 push    ebx
.text:00406704                 sub     esp, 3Ch
.text:00406707                 mov     edx, ds:__mb_cur_max
.text:0040670D                 mov     [esp+4Ch+var_34], 0
.text:00406715                 mov     [esp+4Ch+var_1C], 0
.text:0040671D                 cmp     dword ptr [edx], 1
.text:00406720                 mov     [esp+4Ch+var_20], 0
.text:00406728                 mov     [esp+4Ch+var_21], 0
.text:0040672D                 setz    [esp+4Ch+var_22]
.text:00406732                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00406737                 ja      short def_40673D ; jumptable 0040673D default case, cases 0,1
.text:00406739                 mov     edx, [esp+4Ch+arg_10]
.text:0040673D                 jmp     ds:jpt_40673D[edx*4] ; switch jump
.text:0040673D ; ---------------------------------------------------------------------------
.text:00406744 jpt_40673D      dd offset def_40673D    ; DATA XREF: sub_406700+3D↑r
.text:00406744                 dd offset def_40673D    ; jump table for switch statement
.text:00406744                 dd offset loc_407085
.text:00406744                 dd offset loc_406760
.text:00406744                 dd offset loc_4070AB
.text:00406744                 dd offset loc_4070B5
.text:00406744                 dd offset loc_4070B5
.text:00406760 ; ---------------------------------------------------------------------------
.text:00406760
.text:00406760 loc_406760:                             ; CODE XREF: sub_406700+3D↑j
.text:00406760                                         ; DATA XREF: sub_406700:jpt_40673D↑o
.text:00406760                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040673D case 3
.text:00406764                 cmp     [esp+4Ch+var_34], eax
.text:00406768                 jnb     short loc_406771
.text:0040676A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040676E                 mov     byte ptr [ebx], 22h ; '"'
.text:00406771
.text:00406771 loc_406771:                             ; CODE XREF: sub_406700+68↑j
.text:00406771                 mov     [esp+4Ch+var_34], 1
.text:00406779                 mov     [esp+4Ch+var_21], 1
.text:0040677E                 mov     [esp+4Ch+var_1C], offset asc_4066EC ; "\"'`"
.text:00406786
.text:00406786 loc_406786:                             ; CODE XREF: sub_406700+9A6↓j
.text:00406786                 mov     [esp+4Ch+var_20], 1
.text:0040678E
.text:0040678E def_40673D:                             ; CODE XREF: sub_406700+37↑j
.text:0040678E                                         ; sub_406700+3D↑j ...
.text:0040678E                 xor     ebp, ebp        ; jumptable 0040673D default case, cases 0,1
.text:00406790
.text:00406790 loc_406790:                             ; CODE XREF: sub_406700+3DB↓j
.text:00406790                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00406795                 jz      loc_407077
.text:0040679B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040679F
.text:0040679F loc_40679F:                             ; CODE XREF: sub_406700+980↓j
.text:0040679F                 jz      loc_40700E
.text:004067A5                 cmp     [esp+4Ch+var_21], 0
.text:004067AA                 jz      short loc_4067F0
.text:004067AC                 mov     esi, [esp+4Ch+var_20]
.text:004067B0                 test    esi, esi
.text:004067B2                 jz      short loc_4067F0
.text:004067B4                 mov     ecx, [esp+4Ch+var_20]
.text:004067B8                 lea     edi, [ecx+ebp]
.text:004067BB                 cmp     edi, [esp+4Ch+arg_C]
.text:004067BF                 ja      short loc_4067F0
.text:004067C1                 cld
.text:004067C2                 mov     ebx, [esp+4Ch+Str]
.text:004067C6                 mov     edi, [esp+4Ch+var_1C]
.text:004067CA                 add     ebx, ebp
.text:004067CC                 mov     esi, ebx
.text:004067CE                 cmp     ecx, ecx
.text:004067D0                 repe cmpsb
.text:004067D2                 jnz     short loc_4067F0
.text:004067D4                 mov     edx, [esp+4Ch+arg_4]
.text:004067D8                 cmp     [esp+4Ch+var_34], edx
.text:004067DC                 jnb     short loc_4067EA
.text:004067DE                 mov     ecx, [esp+4Ch+arg_0]
.text:004067E2                 mov     eax, [esp+4Ch+var_34]
.text:004067E6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004067EA
.text:004067EA loc_4067EA:                             ; CODE XREF: sub_406700+DC↑j
.text:004067EA                 inc     [esp+4Ch+var_34]
.text:004067EE                 mov     esi, esi
.text:004067F0
.text:004067F0 loc_4067F0:                             ; CODE XREF: sub_406700+AA↑j
.text:004067F0                                         ; sub_406700+B2↑j ...
.text:004067F0                 mov     edi, [esp+4Ch+Str]
.text:004067F4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004067F9                 movzx   eax, bl
.text:004067FC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004067FF                 ja      def_406805      ; jumptable 00406805 default case, cases 1-6,14-31,64
.text:00406805                 jmp     ds:jpt_406805[eax*4] ; switch jump
.text:00406805 ; ---------------------------------------------------------------------------
.text:0040680C jpt_406805      dd offset loc_406A08, offset def_406805, offset def_406805
.text:0040680C                                         ; DATA XREF: sub_406700+105↑r
.text:0040680C                 dd offset def_406805, offset def_406805, offset def_406805 ; jump table for switch statement
.text:0040680C                 dd offset def_406805, offset loc_406AE0, offset loc_406AFE
.text:0040680C                 dd offset loc_406B02, offset loc_406B47, offset loc_406B4B
.text:0040680C                 dd offset loc_406B4F, offset loc_406B53, offset def_406805
.text:0040680C                 dd offset def_406805, offset def_406805, offset def_406805
.text:0040680C                 dd offset def_406805, offset def_406805, offset def_406805
.text:0040680C                 dd offset def_406805, offset def_406805, offset def_406805
.text:0040680C                 dd offset def_406805, offset def_406805, offset def_406805
.text:0040680C                 dd offset def_406805, offset def_406805, offset def_406805
.text:0040680C                 dd offset def_406805, offset def_406805, offset loc_406FD8
.text:0040680C                 dd offset loc_406FD8, offset loc_406FD8, offset loc_406FFA
.text:0040680C                 dd offset loc_406FD8, offset def_406C02, offset loc_406FD8
.text:0040680C                 dd offset loc_406B57, offset loc_406FD8, offset loc_406FD8
.text:0040680C                 dd offset loc_406FD8, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset loc_406FD8
.text:0040680C                 dd offset loc_406FD8, offset loc_406FD8, offset loc_406FD8
.text:0040680C                 dd offset loc_406BBC, offset def_406805, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset loc_406FD8, offset loc_406FD1
.text:0040680C                 dd offset def_406C02, offset loc_406FD8, offset def_406C02
.text:0040680C                 dd offset loc_406FD8, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset def_406C02, offset def_406C02, offset def_406C02
.text:0040680C                 dd offset loc_406FE8, offset loc_406FD8, offset loc_406FE8
.text:0040680C                 dd offset loc_406FFA
.text:00406A08 ; ---------------------------------------------------------------------------
.text:00406A08
.text:00406A08 loc_406A08:                             ; CODE XREF: sub_406700+105↑j
.text:00406A08                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406A08                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00406805 case 0
.text:00406A0D                 lea     eax, [ebp+1]
.text:00406A10                 jz      loc_406AC0
.text:00406A16                 mov     esi, [esp+4Ch+arg_4]
.text:00406A1A                 cmp     [esp+4Ch+var_34], esi
.text:00406A1E                 jnb     short loc_406A2C
.text:00406A20                 mov     eax, [esp+4Ch+arg_0]
.text:00406A24                 mov     ebx, [esp+4Ch+var_34]
.text:00406A28                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00406A2C
.text:00406A2C loc_406A2C:                             ; CODE XREF: sub_406700+31E↑j
.text:00406A2C                 inc     [esp+4Ch+var_34]
.text:00406A30                 mov     edx, [esp+4Ch+arg_4]
.text:00406A34                 cmp     [esp+4Ch+var_34], edx
.text:00406A38                 jnb     short loc_406A46
.text:00406A3A                 mov     edi, [esp+4Ch+arg_0]
.text:00406A3E                 mov     ecx, [esp+4Ch+var_34]
.text:00406A42                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00406A46
.text:00406A46 loc_406A46:                             ; CODE XREF: sub_406700+338↑j
.text:00406A46                 inc     [esp+4Ch+var_34]
.text:00406A4A                 mov     esi, [esp+4Ch+arg_4]
.text:00406A4E                 cmp     [esp+4Ch+var_34], esi
.text:00406A52                 jnb     short loc_406A60
.text:00406A54                 mov     ebx, [esp+4Ch+arg_0]
.text:00406A58                 mov     eax, [esp+4Ch+var_34]
.text:00406A5C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00406A60
.text:00406A60 loc_406A60:                             ; CODE XREF: sub_406700+352↑j
.text:00406A60                 inc     [esp+4Ch+var_34]
.text:00406A64                 mov     bl, 30h ; '0'
.text:00406A66                 lea     esi, [esi+0]
.text:00406A69                 lea     edi, [edi+0]
.text:00406A70
.text:00406A70 def_406C02:                             ; CODE XREF: sub_406700+105↑j
.text:00406A70                                         ; sub_406700+463↓j ...
.text:00406A70                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406A70                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406A75                 lea     eax, [ebp+1]
.text:00406A78                 jz      short loc_406AC0
.text:00406A7A                 mov     cl, bl
.text:00406A7C                 mov     edi, [esp+4Ch+arg_14]
.text:00406A80                 mov     esi, 1
.text:00406A85                 shr     cl, 5
.text:00406A88                 movzx   edx, cl
.text:00406A8B                 mov     ecx, ebx
.text:00406A8D                 and     ecx, 1Fh
.text:00406A90                 shl     esi, cl
.text:00406A92                 test    [edi+edx*4+4], esi
.text:00406A96                 jz      short loc_406AB2
.text:00406A98
.text:00406A98 loc_406A98:                             ; CODE XREF: sub_406700+3FC↓j
.text:00406A98                 mov     edx, [esp+4Ch+arg_4]
.text:00406A9C                 cmp     [esp+4Ch+var_34], edx
.text:00406AA0                 jnb     short loc_406AAE
.text:00406AA2                 mov     edi, [esp+4Ch+arg_0]
.text:00406AA6                 mov     esi, [esp+4Ch+var_34]
.text:00406AAA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00406AAE
.text:00406AAE loc_406AAE:                             ; CODE XREF: sub_406700+3A0↑j
.text:00406AAE                 inc     [esp+4Ch+var_34]
.text:00406AB2
.text:00406AB2 loc_406AB2:                             ; CODE XREF: sub_406700+396↑j
.text:00406AB2                 lea     eax, [ebp+1]
.text:00406AB5                 lea     esi, [esi+0]
.text:00406AB9                 lea     edi, [edi+0]
.text:00406AC0
.text:00406AC0 loc_406AC0:                             ; CODE XREF: sub_406700+310↑j
.text:00406AC0                                         ; sub_406700+378↑j ...
.text:00406AC0                 mov     ebp, [esp+4Ch+arg_4]
.text:00406AC4                 cmp     [esp+4Ch+var_34], ebp
.text:00406AC8                 jnb     short loc_406AD5
.text:00406ACA                 mov     edx, [esp+4Ch+arg_0]
.text:00406ACE                 mov     ecx, [esp+4Ch+var_34]
.text:00406AD2                 mov     [ecx+edx], bl
.text:00406AD5
.text:00406AD5 loc_406AD5:                             ; CODE XREF: sub_406700+3C8↑j
.text:00406AD5                 inc     [esp+4Ch+var_34]
.text:00406AD9                 mov     ebp, eax
.text:00406ADB                 jmp     loc_406790
.text:00406AE0 ; ---------------------------------------------------------------------------
.text:00406AE0
.text:00406AE0 loc_406AE0:                             ; CODE XREF: sub_406700+105↑j
.text:00406AE0                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406AE0                 mov     dl, 61h ; 'a'   ; jumptable 00406805 case 7
.text:00406AE2                 lea     esi, [esi+0]
.text:00406AE9                 lea     edi, [edi+0]
.text:00406AF0
.text:00406AF0 loc_406AF0:                             ; CODE XREF: sub_406700+400↓j
.text:00406AF0                                         ; sub_406700+409↓j ...
.text:00406AF0                 cmp     [esp+4Ch+var_21], 0
.text:00406AF5                 lea     eax, [ebp+1]
.text:00406AF8                 jz      short loc_406AC0
.text:00406AFA                 mov     bl, dl
.text:00406AFC                 jmp     short loc_406A98
.text:00406AFE ; ---------------------------------------------------------------------------
.text:00406AFE
.text:00406AFE loc_406AFE:                             ; CODE XREF: sub_406700+105↑j
.text:00406AFE                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406AFE                 mov     dl, 62h ; 'b'   ; jumptable 00406805 case 8
.text:00406B00                 jmp     short loc_406AF0
.text:00406B02 ; ---------------------------------------------------------------------------
.text:00406B02
.text:00406B02 loc_406B02:                             ; CODE XREF: sub_406700+105↑j
.text:00406B02                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406B02                 mov     dl, 74h ; 't'   ; jumptable 00406805 case 9
.text:00406B04
.text:00406B04 loc_406B04:                             ; CODE XREF: sub_406700+449↓j
.text:00406B04                                         ; sub_406700+455↓j ...
.text:00406B04                 cmp     [esp+4Ch+arg_10], 1
.text:00406B09                 jnz     short loc_406AF0
.text:00406B0B
.text:00406B0B loc_406B0B:                             ; CODE XREF: sub_406700+45C↓j
.text:00406B0B                                         ; sub_406700+4C1↓j ...
.text:00406B0B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00406ED2 cases 91,92,94,96,124
.text:00406B13                 mov     eax, [esp+4Ch+arg_14]
.text:00406B17                 mov     edx, [esp+4Ch+arg_C]
.text:00406B1B                 mov     ecx, [esp+4Ch+Str]
.text:00406B1F                 mov     ebx, [esp+4Ch+arg_4]
.text:00406B23                 mov     [esp+4Ch+var_38], eax ; int
.text:00406B27                 mov     ebp, [esp+4Ch+arg_0]
.text:00406B2B                 mov     [esp+4Ch+State], edx ; int
.text:00406B2F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00406B33                 mov     [esp+4Ch+Type], ebx ; int
.text:00406B37                 mov     [esp+4Ch+C], ebp ; int
.text:00406B3A                 call    sub_406700
.text:00406B3F
.text:00406B3F loc_406B3F:                             ; CODE XREF: sub_406700+972↓j
.text:00406B3F                 add     esp, 3Ch
.text:00406B42                 pop     ebx
.text:00406B43                 pop     esi
.text:00406B44                 pop     edi
.text:00406B45                 pop     ebp
.text:00406B46                 retn
.text:00406B47 ; ---------------------------------------------------------------------------
.text:00406B47
.text:00406B47 loc_406B47:                             ; CODE XREF: sub_406700+105↑j
.text:00406B47                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406B47                 mov     dl, 6Eh ; 'n'   ; jumptable 00406805 case 10
.text:00406B49                 jmp     short loc_406B04
.text:00406B4B ; ---------------------------------------------------------------------------
.text:00406B4B
.text:00406B4B loc_406B4B:                             ; CODE XREF: sub_406700+105↑j
.text:00406B4B                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406B4B                 mov     dl, 76h ; 'v'   ; jumptable 00406805 case 11
.text:00406B4D                 jmp     short loc_406AF0
.text:00406B4F ; ---------------------------------------------------------------------------
.text:00406B4F
.text:00406B4F loc_406B4F:                             ; CODE XREF: sub_406700+105↑j
.text:00406B4F                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406B4F                 mov     dl, 66h ; 'f'   ; jumptable 00406805 case 12
.text:00406B51                 jmp     short loc_406AF0
.text:00406B53 ; ---------------------------------------------------------------------------
.text:00406B53
.text:00406B53 loc_406B53:                             ; CODE XREF: sub_406700+105↑j
.text:00406B53                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406B53                 mov     dl, 72h ; 'r'   ; jumptable 00406805 case 13
.text:00406B55                 jmp     short loc_406B04
.text:00406B57 ; ---------------------------------------------------------------------------
.text:00406B57
.text:00406B57 loc_406B57:                             ; CODE XREF: sub_406700+105↑j
.text:00406B57                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406B57                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00406805 case 39
.text:00406B5C                 jz      short loc_406B0B ; jumptable 00406ED2 cases 91,92,94,96,124
.text:00406B5E                 cmp     [esp+4Ch+arg_10], 2
.text:00406B63                 jnz     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406B63                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406B69                 mov     edx, [esp+4Ch+arg_4]
.text:00406B6D                 cmp     [esp+4Ch+var_34], edx
.text:00406B71                 jnb     short loc_406B7F
.text:00406B73                 mov     ecx, [esp+4Ch+arg_0]
.text:00406B77                 mov     edi, [esp+4Ch+var_34]
.text:00406B7B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00406B7F
.text:00406B7F loc_406B7F:                             ; CODE XREF: sub_406700+471↑j
.text:00406B7F                 inc     [esp+4Ch+var_34]
.text:00406B83                 mov     eax, [esp+4Ch+arg_4]
.text:00406B87                 cmp     [esp+4Ch+var_34], eax
.text:00406B8B                 jnb     short loc_406B99
.text:00406B8D                 mov     esi, [esp+4Ch+arg_0]
.text:00406B91                 mov     edx, [esp+4Ch+var_34]
.text:00406B95                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00406B99
.text:00406B99 loc_406B99:                             ; CODE XREF: sub_406700+48B↑j
.text:00406B99                 inc     [esp+4Ch+var_34]
.text:00406B9D                 mov     edi, [esp+4Ch+arg_4]
.text:00406BA1                 cmp     [esp+4Ch+var_34], edi
.text:00406BA5                 jnb     short loc_406BB3
.text:00406BA7                 mov     ecx, [esp+4Ch+arg_0]
.text:00406BAB                 mov     eax, [esp+4Ch+var_34]
.text:00406BAF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00406BB3
.text:00406BB3 loc_406BB3:                             ; CODE XREF: sub_406700+4A5↑j
.text:00406BB3                                         ; sub_406700+5C4↓j ...
.text:00406BB3                 inc     [esp+4Ch+var_34]
.text:00406BB7                 jmp     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406BB7                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406BBC ; ---------------------------------------------------------------------------
.text:00406BBC
.text:00406BBC loc_406BBC:                             ; CODE XREF: sub_406700+105↑j
.text:00406BBC                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406BBC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00406805 case 63
.text:00406BC1                 jz      loc_406B0B      ; jumptable 00406ED2 cases 91,92,94,96,124
.text:00406BC7                 cmp     [esp+4Ch+arg_10], 3
.text:00406BCC                 jnz     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406BCC                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406BD2                 lea     edx, [ebp+2]
.text:00406BD5                 cmp     edx, [esp+4Ch+arg_C]
.text:00406BD9                 jnb     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406BD9                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406BDF                 mov     esi, [esp+4Ch+Str]
.text:00406BE3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00406BE8                 jnz     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406BE8                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406BEE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00406BF3                 movsx   eax, cl
.text:00406BF6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00406BF9                 cmp     eax, 1Dh
.text:00406BFC                 ja      def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406BFC                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406C02                 jmp     ds:jpt_406C02[eax*4] ; switch jump
.text:00406C02 ; ---------------------------------------------------------------------------
.text:00406C09                 align 4
.text:00406C0C jpt_406C02      dd offset loc_406C84    ; DATA XREF: sub_406700+502↑r
.text:00406C0C                 dd offset def_406C02    ; jump table for switch statement
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset loc_406C84
.text:00406C0C                 dd offset loc_406C84
.text:00406C0C                 dd offset loc_406C84
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset loc_406C84
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset loc_406C84
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset def_406C02
.text:00406C0C                 dd offset loc_406C84
.text:00406C0C                 dd offset loc_406C84
.text:00406C0C                 dd offset loc_406C84
.text:00406C84 ; ---------------------------------------------------------------------------
.text:00406C84
.text:00406C84 loc_406C84:                             ; CODE XREF: sub_406700+502↑j
.text:00406C84                                         ; DATA XREF: sub_406700:jpt_406C02↑o
.text:00406C84                 mov     ebp, edx        ; jumptable 00406C02 cases 33,39-41,45,47,60-62
.text:00406C86                 mov     bl, cl
.text:00406C88                 mov     edx, [esp+4Ch+arg_4]
.text:00406C8C                 cmp     [esp+4Ch+var_34], edx
.text:00406C90                 jnb     short loc_406C9E
.text:00406C92                 mov     ecx, [esp+4Ch+arg_0]
.text:00406C96                 mov     edi, [esp+4Ch+var_34]
.text:00406C9A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00406C9E
.text:00406C9E loc_406C9E:                             ; CODE XREF: sub_406700+590↑j
.text:00406C9E                 inc     [esp+4Ch+var_34]
.text:00406CA2                 mov     eax, [esp+4Ch+arg_4]
.text:00406CA6                 cmp     [esp+4Ch+var_34], eax
.text:00406CAA                 jnb     short loc_406CB8
.text:00406CAC                 mov     edx, [esp+4Ch+arg_0]
.text:00406CB0                 mov     esi, [esp+4Ch+var_34]
.text:00406CB4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00406CB8
.text:00406CB8 loc_406CB8:                             ; CODE XREF: sub_406700+5AA↑j
.text:00406CB8                 inc     [esp+4Ch+var_34]
.text:00406CBC                 mov     edi, [esp+4Ch+arg_4]
.text:00406CC0                 cmp     [esp+4Ch+var_34], edi
.text:00406CC4                 jnb     loc_406BB3
.text:00406CCA                 mov     eax, [esp+4Ch+arg_0]
.text:00406CCE                 mov     ecx, [esp+4Ch+var_34]
.text:00406CD2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00406CD6                 jmp     loc_406BB3
.text:00406CD6 ; ---------------------------------------------------------------------------
.text:00406CDB                 align 10h
.text:00406CE0
.text:00406CE0 def_406805:                             ; CODE XREF: sub_406700+FF↑j
.text:00406CE0                                         ; sub_406700+105↑j
.text:00406CE0                                         ; DATA XREF: ...
.text:00406CE0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00406805 default case, cases 1-6,14-31,64
.text:00406CE5                 jz      loc_406E10
.text:00406CEB                 mov     [esp+4Ch+var_28], 1
.text:00406CF3                 mov     esi, ds:__mb_cur_max
.text:00406CF9                 movzx   edx, bl
.text:00406CFC                 cmp     dword ptr [esi], 1
.text:00406CFF                 jz      loc_406DF4
.text:00406D05                 mov     [esp+4Ch+Type], 157h ; Type
.text:00406D0D                 mov     [esp+4Ch+C], edx ; C
.text:00406D10                 call    _isctype
.text:00406D15
.text:00406D15 loc_406D15:                             ; CODE XREF: sub_406700+705↓j
.text:00406D15                 test    eax, eax
.text:00406D17                 setnz   [esp+4Ch+var_29]
.text:00406D1C
.text:00406D1C loc_406D1C:                             ; CODE XREF: sub_406700+7A5↓j
.text:00406D1C                 cmp     [esp+4Ch+var_21], 0
.text:00406D21                 lea     eax, [ebp+1]
.text:00406D24                 jz      loc_406AC0
.text:00406D2A                 cmp     [esp+4Ch+var_29], 0
.text:00406D2F                 jnz     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406D2F                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406D35
.text:00406D35 loc_406D35:                             ; CODE XREF: sub_406700+7AB↓j
.text:00406D35                 mov     eax, [esp+4Ch+var_28]
.text:00406D39                 lea     edx, [eax+ebp]
.text:00406D3C                 lea     esi, [esi+0]
.text:00406D40
.text:00406D40 loc_406D40:                             ; CODE XREF: sub_406700+6EF↓j
.text:00406D40                 cmp     [esp+4Ch+var_21], 0
.text:00406D45                 jz      short loc_406DC0
.text:00406D47                 cmp     [esp+4Ch+var_29], 0
.text:00406D4C                 jnz     short loc_406DC0
.text:00406D4E                 mov     edi, [esp+4Ch+arg_4]
.text:00406D52                 cmp     [esp+4Ch+var_34], edi
.text:00406D56                 jnb     short loc_406D64
.text:00406D58                 mov     esi, [esp+4Ch+arg_0]
.text:00406D5C                 mov     eax, [esp+4Ch+var_34]
.text:00406D60                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00406D64
.text:00406D64 loc_406D64:                             ; CODE XREF: sub_406700+656↑j
.text:00406D64                 inc     [esp+4Ch+var_34]
.text:00406D68                 mov     ecx, [esp+4Ch+arg_4]
.text:00406D6C                 cmp     [esp+4Ch+var_34], ecx
.text:00406D70                 jnb     short loc_406D85
.text:00406D72                 mov     cl, bl
.text:00406D74                 mov     esi, [esp+4Ch+arg_0]
.text:00406D78                 mov     edi, [esp+4Ch+var_34]
.text:00406D7C                 shr     cl, 6
.text:00406D7F                 add     cl, 30h ; '0'
.text:00406D82                 mov     [edi+esi], cl
.text:00406D85
.text:00406D85 loc_406D85:                             ; CODE XREF: sub_406700+670↑j
.text:00406D85                 inc     [esp+4Ch+var_34]
.text:00406D89                 mov     edi, [esp+4Ch+arg_4]
.text:00406D8D                 cmp     [esp+4Ch+var_34], edi
.text:00406D91                 jnb     short loc_406DA9
.text:00406D93                 mov     cl, bl
.text:00406D95                 mov     esi, [esp+4Ch+arg_0]
.text:00406D99                 shr     cl, 3
.text:00406D9C                 mov     edi, [esp+4Ch+var_34]
.text:00406DA0                 and     cl, 7
.text:00406DA3                 add     cl, 30h ; '0'
.text:00406DA6                 mov     [edi+esi], cl
.text:00406DA9
.text:00406DA9 loc_406DA9:                             ; CODE XREF: sub_406700+691↑j
.text:00406DA9                 inc     [esp+4Ch+var_34]
.text:00406DAD                 and     bl, 7
.text:00406DB0                 add     bl, 30h ; '0'
.text:00406DB3                 lea     esi, [esi+0]
.text:00406DB9                 lea     edi, [edi+0]
.text:00406DC0
.text:00406DC0 loc_406DC0:                             ; CODE XREF: sub_406700+645↑j
.text:00406DC0                                         ; sub_406700+64C↑j
.text:00406DC0                 lea     eax, [ebp+1]
.text:00406DC3                 cmp     edx, eax
.text:00406DC5                 jbe     loc_406AC0
.text:00406DCB                 mov     ebp, [esp+4Ch+arg_4]
.text:00406DCF                 cmp     [esp+4Ch+var_34], ebp
.text:00406DD3                 jnb     short loc_406DE0
.text:00406DD5                 mov     ecx, [esp+4Ch+arg_0]
.text:00406DD9                 mov     edi, [esp+4Ch+var_34]
.text:00406DDD                 mov     [edi+ecx], bl
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: sub_406700+6D3↑j
.text:00406DE0                 inc     [esp+4Ch+var_34]
.text:00406DE4                 mov     ebp, eax
.text:00406DE6                 mov     eax, [esp+4Ch+Str]
.text:00406DEA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00406DEF                 jmp     loc_406D40
.text:00406DF4 ; ---------------------------------------------------------------------------
.text:00406DF4
.text:00406DF4 loc_406DF4:                             ; CODE XREF: sub_406700+5FF↑j
.text:00406DF4                 mov     ecx, ds:_pctype
.text:00406DFA                 mov     edi, [ecx]
.text:00406DFC                 movzx   eax, word ptr [edi+edx*2]
.text:00406E00                 and     eax, 157h
.text:00406E05                 jmp     loc_406D15
.text:00406E05 ; ---------------------------------------------------------------------------
.text:00406E0A                 align 10h
.text:00406E10
.text:00406E10 loc_406E10:                             ; CODE XREF: sub_406700+5E5↑j
.text:00406E10                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00406E15                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00406E1D                 mov     [esp+4Ch+var_28], 0
.text:00406E25                 mov     [esp+4Ch+var_29], 1
.text:00406E2A                 jz      loc_406FBC
.text:00406E30
.text:00406E30 loc_406E30:                             ; CODE XREF: sub_406700+8CC↓j
.text:00406E30                 mov     ecx, [esp+4Ch+arg_C]
.text:00406E34                 lea     edx, [esp+4Ch+var_18]
.text:00406E38                 mov     edi, [esp+4Ch+Str]
.text:00406E3C                 mov     [esp+4Ch+State], edx ; State
.text:00406E40                 lea     esi, [esp+4Ch+var_18._State]
.text:00406E44                 sub     ecx, ebp
.text:00406E46                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00406E4A                 add     edi, ebp
.text:00406E4C                 mov     [esp+4Ch+var_30], edi
.text:00406E50                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00406E54                 mov     [esp+4Ch+C], esi ; DstCh
.text:00406E57                 call    mbrtowc
.text:00406E5C                 test    eax, eax
.text:00406E5E                 mov     edi, eax
.text:00406E60                 jz      short loc_406EA0
.text:00406E62                 cmp     eax, 0FFFFFFFFh
.text:00406E65                 jz      loc_406FB2
.text:00406E6B                 cmp     eax, 0FFFFFFFEh
.text:00406E6E                 jz      loc_406F72
.text:00406E74                 cmp     [esp+4Ch+arg_10], 1
.text:00406E79                 jz      short loc_406EB0
.text:00406E7B
.text:00406E7B loc_406E7B:                             ; CODE XREF: sub_406700+7B9↓j
.text:00406E7B                                         ; sub_406700+86D↓j
.text:00406E7B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00406E80                 mov     [esp+4Ch+Type], 157h ; Type
.text:00406E88                 mov     [esp+4Ch+C], ecx ; C
.text:00406E8B                 call    iswctype
.text:00406E90                 test    eax, eax
.text:00406E92                 jnz     short loc_406E99
.text:00406E94                 mov     [esp+4Ch+var_29], 0
.text:00406E99
.text:00406E99 loc_406E99:                             ; CODE XREF: sub_406700+792↑j
.text:00406E99                 mov     [esp+4Ch+var_28], edi
.text:00406E9D                 lea     esi, [esi+0]
.text:00406EA0
.text:00406EA0 loc_406EA0:                             ; CODE XREF: sub_406700+760↑j
.text:00406EA0                                         ; sub_406700+87B↓j ...
.text:00406EA0                 cmp     [esp+4Ch+var_28], 1
.text:00406EA5                 jbe     loc_406D1C
.text:00406EAB                 jmp     loc_406D35
.text:00406EB0 ; ---------------------------------------------------------------------------
.text:00406EB0
.text:00406EB0 loc_406EB0:                             ; CODE XREF: sub_406700+779↑j
.text:00406EB0                 cmp     [esp+4Ch+arg_10], eax
.text:00406EB4                 mov     edx, 1
.text:00406EB9                 jnb     short loc_406E7B
.text:00406EBB
.text:00406EBB loc_406EBB:                             ; CODE XREF: sub_406700+867↓j
.text:00406EBB                 mov     ecx, [esp+4Ch+Str]
.text:00406EBF                 lea     esi, [edx+ebp]
.text:00406EC2                 movsx   eax, byte ptr [esi+ecx]
.text:00406EC6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00406EC9                 cmp     eax, 21h
.text:00406ECC                 ja      def_406ED2      ; jumptable 00406ED2 default case, cases 93,95,97-123
.text:00406ED2                 jmp     ds:jpt_406ED2[eax*4] ; switch jump
.text:00406ED2 ; ---------------------------------------------------------------------------
.text:00406ED9                 align 4
.text:00406EDC jpt_406ED2      dd offset loc_406B0B    ; DATA XREF: sub_406700+7D2↑r
.text:00406EDC                 dd offset loc_406B0B    ; jump table for switch statement
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset loc_406B0B
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset loc_406B0B
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset def_406ED2
.text:00406EDC                 dd offset loc_406B0B
.text:00406F64 ; ---------------------------------------------------------------------------
.text:00406F64
.text:00406F64 def_406ED2:                             ; CODE XREF: sub_406700+7CC↑j
.text:00406F64                                         ; sub_406700+7D2↑j
.text:00406F64                                         ; DATA XREF: ...
.text:00406F64                 inc     edx             ; jumptable 00406ED2 default case, cases 93,95,97-123
.text:00406F65                 cmp     edx, edi
.text:00406F67                 jb      loc_406EBB
.text:00406F6D                 jmp     loc_406E7B
.text:00406F72 ; ---------------------------------------------------------------------------
.text:00406F72
.text:00406F72 loc_406F72:                             ; CODE XREF: sub_406700+76E↑j
.text:00406F72                 cmp     ebp, [esp+4Ch+arg_C]
.text:00406F76                 mov     [esp+4Ch+var_29], 0
.text:00406F7B                 jnb     loc_406EA0
.text:00406F81                 mov     eax, [esp+4Ch+var_30]
.text:00406F85                 cmp     byte ptr [eax], 0
.text:00406F88                 jz      loc_406EA0
.text:00406F8E
.text:00406F8E loc_406F8E:                             ; CODE XREF: sub_406700+8AB↓j
.text:00406F8E                 inc     [esp+4Ch+var_28]
.text:00406F92                 mov     esi, [esp+4Ch+var_28]
.text:00406F96                 lea     eax, [esi+ebp]
.text:00406F99                 cmp     eax, [esp+4Ch+arg_C]
.text:00406F9D                 jnb     loc_406EA0
.text:00406FA3                 mov     edi, [esp+4Ch+Str]
.text:00406FA7                 cmp     byte ptr [eax+edi], 0
.text:00406FAB                 jnz     short loc_406F8E
.text:00406FAD                 jmp     loc_406EA0
.text:00406FB2 ; ---------------------------------------------------------------------------
.text:00406FB2
.text:00406FB2 loc_406FB2:                             ; CODE XREF: sub_406700+765↑j
.text:00406FB2                 mov     [esp+4Ch+var_29], 0
.text:00406FB7                 jmp     loc_406EA0
.text:00406FBC ; ---------------------------------------------------------------------------
.text:00406FBC
.text:00406FBC loc_406FBC:                             ; CODE XREF: sub_406700+72A↑j
.text:00406FBC                 mov     edx, [esp+4Ch+Str]
.text:00406FC0                 mov     [esp+4Ch+C], edx ; Str
.text:00406FC3                 call    strlen
.text:00406FC8                 mov     [esp+4Ch+arg_C], eax
.text:00406FCC                 jmp     loc_406E30
.text:00406FD1 ; ---------------------------------------------------------------------------
.text:00406FD1
.text:00406FD1 loc_406FD1:                             ; CODE XREF: sub_406700+105↑j
.text:00406FD1                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406FD1                 mov     dl, bl          ; jumptable 00406805 case 92
.text:00406FD3                 jmp     loc_406B04
.text:00406FD8 ; ---------------------------------------------------------------------------
.text:00406FD8
.text:00406FD8 loc_406FD8:                             ; CODE XREF: sub_406700+105↑j
.text:00406FD8                                         ; sub_406700+902↓j
.text:00406FD8                                         ; DATA XREF: ...
.text:00406FD8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00406805 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00406FDD                 jnz     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406FDD                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406FE3                 jmp     loc_406B0B      ; jumptable 00406ED2 cases 91,92,94,96,124
.text:00406FE8 ; ---------------------------------------------------------------------------
.text:00406FE8
.text:00406FE8 loc_406FE8:                             ; CODE XREF: sub_406700+105↑j
.text:00406FE8                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406FE8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00406805 cases 123,125
.text:00406FED                 jz      short loc_407004
.text:00406FEF                 cmp     [esp+4Ch+arg_C], 1
.text:00406FF4
.text:00406FF4 loc_406FF4:                             ; CODE XREF: sub_406700+90C↓j
.text:00406FF4                 jnz     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406FF4                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00406FFA
.text:00406FFA loc_406FFA:                             ; CODE XREF: sub_406700+105↑j
.text:00406FFA                                         ; DATA XREF: sub_406700:jpt_406805↑o
.text:00406FFA                 test    ebp, ebp        ; jumptable 00406805 cases 35,126
.text:00406FFC                 jnz     def_406C02      ; jumptable 00406805 cases 37,43-58,65-90,93,95,97-122
.text:00406FFC                                         ; jumptable 00406C02 default case, cases 34-38,42-44,46,48-59
.text:00407002                 jmp     short loc_406FD8 ; jumptable 00406805 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00407004 ; ---------------------------------------------------------------------------
.text:00407004
.text:00407004 loc_407004:                             ; CODE XREF: sub_406700+8ED↑j
.text:00407004                 mov     esi, [esp+4Ch+Str]
.text:00407008                 cmp     byte ptr [esi+1], 0
.text:0040700C                 jmp     short loc_406FF4
.text:0040700E ; ---------------------------------------------------------------------------
.text:0040700E
.text:0040700E loc_40700E:                             ; CODE XREF: sub_406700:loc_40679F↑j
.text:0040700E                 test    ebp, ebp
.text:00407010                 jnz     short loc_40701D
.text:00407012                 cmp     [esp+4Ch+arg_10], 1
.text:00407017                 jz      loc_406B0B      ; jumptable 00406ED2 cases 91,92,94,96,124
.text:0040701D
.text:0040701D loc_40701D:                             ; CODE XREF: sub_406700+910↑j
.text:0040701D                 mov     esi, [esp+4Ch+var_1C]
.text:00407021                 test    esi, esi
.text:00407023                 jz      short loc_407058
.text:00407025                 mov     edi, [esp+4Ch+var_1C]
.text:00407029                 movzx   eax, byte ptr [edi]
.text:0040702C                 test    al, al
.text:0040702E                 jz      short loc_407058
.text:00407030
.text:00407030 loc_407030:                             ; CODE XREF: sub_406700+956↓j
.text:00407030                 mov     ebp, [esp+4Ch+arg_4]
.text:00407034                 cmp     [esp+4Ch+var_34], ebp
.text:00407038                 jnb     short loc_407045
.text:0040703A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040703E                 mov     ebx, [esp+4Ch+var_34]
.text:00407042                 mov     [ebx+ecx], al
.text:00407045
.text:00407045 loc_407045:                             ; CODE XREF: sub_406700+938↑j
.text:00407045                 inc     [esp+4Ch+var_1C]
.text:00407049                 inc     [esp+4Ch+var_34]
.text:0040704D                 mov     edx, [esp+4Ch+var_1C]
.text:00407051                 movzx   eax, byte ptr [edx]
.text:00407054                 test    al, al
.text:00407056                 jnz     short loc_407030
.text:00407058
.text:00407058 loc_407058:                             ; CODE XREF: sub_406700+923↑j
.text:00407058                                         ; sub_406700+92E↑j
.text:00407058                 mov     eax, [esp+4Ch+arg_4]
.text:0040705C                 cmp     [esp+4Ch+var_34], eax
.text:00407060                 jnb     short loc_40706E
.text:00407062                 mov     edi, [esp+4Ch+arg_0]
.text:00407066                 mov     esi, [esp+4Ch+var_34]
.text:0040706A                 mov     byte ptr [esi+edi], 0
.text:0040706E
.text:0040706E loc_40706E:                             ; CODE XREF: sub_406700+960↑j
.text:0040706E                 mov     eax, [esp+4Ch+var_34]
.text:00407072                 jmp     loc_406B3F
.text:00407077 ; ---------------------------------------------------------------------------
.text:00407077
.text:00407077 loc_407077:                             ; CODE XREF: sub_406700+95↑j
.text:00407077                 mov     ebx, [esp+4Ch+Str]
.text:0040707B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00407080                 jmp     loc_40679F
.text:00407085 ; ---------------------------------------------------------------------------
.text:00407085
.text:00407085 loc_407085:                             ; CODE XREF: sub_406700+3D↑j
.text:00407085                                         ; DATA XREF: sub_406700:jpt_40673D↑o
.text:00407085                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040673D case 2
.text:00407089                 cmp     [esp+4Ch+var_34], edx
.text:0040708D                 jnb     short loc_407096
.text:0040708F                 mov     ecx, [esp+4Ch+arg_0]
.text:00407093                 mov     byte ptr [ecx], 27h ; '''
.text:00407096
.text:00407096 loc_407096:                             ; CODE XREF: sub_406700+98D↑j
.text:00407096                 mov     [esp+4Ch+var_34], 1
.text:0040709E                 mov     [esp+4Ch+var_1C], 4066EEh
.text:004070A6                 jmp     loc_406786
.text:004070AB ; ---------------------------------------------------------------------------
.text:004070AB
.text:004070AB loc_4070AB:                             ; CODE XREF: sub_406700+3D↑j
.text:004070AB                                         ; DATA XREF: sub_406700:jpt_40673D↑o
.text:004070AB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040673D case 4
.text:004070B0                 jmp     def_40673D      ; jumptable 0040673D default case, cases 0,1
.text:004070B5 ; ---------------------------------------------------------------------------
.text:004070B5
.text:004070B5 loc_4070B5:                             ; CODE XREF: sub_406700+3D↑j
.text:004070B5                                         ; DATA XREF: sub_406700:jpt_40673D↑o
.text:004070B5                 mov     [esp+4Ch+C], 4066F0h ; jumptable 0040673D cases 5,6
.text:004070BC                 call    ds:libintl_gettext
.text:004070C2                 cmp     eax, 4066F0h
.text:004070C7                 mov     edi, eax
.text:004070C9                 jz      short loc_407140
.text:004070CB
.text:004070CB loc_4070CB:                             ; CODE XREF: sub_406700+A45↓j
.text:004070CB                                         ; sub_406700+A4C↓j
.text:004070CB                 mov     [esp+4Ch+C], 4066EEh
.text:004070D2                 call    ds:libintl_gettext
.text:004070D8                 cmp     eax, 4066EEh
.text:004070DD                 mov     edx, eax
.text:004070DF                 jz      short loc_407132
.text:004070E1
.text:004070E1 loc_4070E1:                             ; CODE XREF: sub_406700+A37↓j
.text:004070E1                                         ; sub_406700+A3E↓j
.text:004070E1                 mov     [esp+4Ch+var_1C], edi
.text:004070E5                 cmp     byte ptr [edi], 0
.text:004070E8                 jz      short loc_407118
.text:004070EA
.text:004070EA loc_4070EA:                             ; CODE XREF: sub_406700+A16↓j
.text:004070EA                 mov     ecx, [esp+4Ch+arg_4]
.text:004070EE                 cmp     [esp+4Ch+var_34], ecx
.text:004070F2                 jnb     short loc_407107
.text:004070F4                 mov     ebp, [esp+4Ch+var_1C]
.text:004070F8                 mov     edi, [esp+4Ch+arg_0]
.text:004070FC                 mov     esi, [esp+4Ch+var_34]
.text:00407100                 movzx   ebx, byte ptr [ebp+0]
.text:00407104                 mov     [esi+edi], bl
.text:00407107
.text:00407107 loc_407107:                             ; CODE XREF: sub_406700+9F2↑j
.text:00407107                 inc     [esp+4Ch+var_1C]
.text:0040710B                 inc     [esp+4Ch+var_34]
.text:0040710F                 mov     eax, [esp+4Ch+var_1C]
.text:00407113                 cmp     byte ptr [eax], 0
.text:00407116                 jnz     short loc_4070EA
.text:00407118
.text:00407118 loc_407118:                             ; CODE XREF: sub_406700+9E8↑j
.text:00407118                 mov     [esp+4Ch+var_21], 1
.text:0040711D                 mov     [esp+4Ch+var_1C], edx
.text:00407121                 mov     [esp+4Ch+C], edx ; Str
.text:00407124                 call    strlen
.text:00407129                 mov     [esp+4Ch+var_20], eax
.text:0040712D                 jmp     def_40673D      ; jumptable 0040673D default case, cases 0,1
.text:00407132 ; ---------------------------------------------------------------------------
.text:00407132
.text:00407132 loc_407132:                             ; CODE XREF: sub_406700+9DF↑j
.text:00407132                 cmp     [esp+4Ch+arg_10], 6
.text:00407137                 jnz     short loc_4070E1
.text:00407139                 mov     edx, offset asc_4066EC ; "\"'`"
.text:0040713E                 jmp     short loc_4070E1
.text:00407140 ; ---------------------------------------------------------------------------
.text:00407140
.text:00407140 loc_407140:                             ; CODE XREF: sub_406700+9C9↑j
.text:00407140                 cmp     [esp+4Ch+arg_10], 6
.text:00407145                 jnz     short loc_4070CB
.text:00407147                 mov     edi, offset asc_4066EC ; "\"'`"
.text:0040714C                 jmp     loc_4070CB
.text:0040714C sub_406700      endp
.text:0040714C
.text:00407151 ; ---------------------------------------------------------------------------
.text:00407151                 jmp     short loc_407160
.text:00407151 ; ---------------------------------------------------------------------------
.text:00407153                 align 10h
.text:00407160
.text:00407160 loc_407160:                             ; CODE XREF: .text:00407151↑j
.text:00407160                 sub     esp, 0Ch
.text:00407163                 mov     [esp+4], ebx
.text:00407167                 mov     [esp+8], esi
.text:0040716B                 call    _errno
.text:00407170                 mov     esi, [eax]
.text:00407172                 mov     dword ptr [esp], 24h ; '$'
.text:00407179                 call    sub_406240
.text:0040717E                 mov     edx, [esp+10h]
.text:00407182                 mov     ebx, eax
.text:00407184                 test    edx, edx
.text:00407186                 jz      short loc_4071D1
.text:00407188
.text:00407188 loc_407188:                             ; CODE XREF: .text:004071D6↓j
.text:00407188                 mov     ecx, [edx]
.text:0040718A                 mov     [ebx], ecx
.text:0040718C                 mov     ecx, [edx+4]
.text:0040718F                 mov     [ebx+4], ecx
.text:00407192                 mov     ecx, [edx+8]
.text:00407195                 mov     [ebx+8], ecx
.text:00407198                 mov     ecx, [edx+0Ch]
.text:0040719B                 mov     [ebx+0Ch], ecx
.text:0040719E                 mov     ecx, [edx+10h]
.text:004071A1                 mov     [ebx+10h], ecx
.text:004071A4                 mov     ecx, [edx+14h]
.text:004071A7                 mov     [ebx+14h], ecx
.text:004071AA                 mov     ecx, [edx+18h]
.text:004071AD                 mov     [ebx+18h], ecx
.text:004071B0                 mov     ecx, [edx+1Ch]
.text:004071B3                 mov     [ebx+1Ch], ecx
.text:004071B6                 mov     ecx, [edx+20h]
.text:004071B9                 mov     [ebx+20h], ecx
.text:004071BC                 call    _errno
.text:004071C1                 mov     [eax], esi
.text:004071C3                 mov     esi, [esp+8]
.text:004071C7                 mov     eax, ebx
.text:004071C9                 mov     ebx, [esp+4]
.text:004071CD                 add     esp, 0Ch
.text:004071D0                 retn
.text:004071D1 ; ---------------------------------------------------------------------------
.text:004071D1
.text:004071D1 loc_4071D1:                             ; CODE XREF: .text:00407186↑j
.text:004071D1                 mov     edx, offset dword_412170
.text:004071D6                 jmp     short loc_407188
.text:004071D6 ; ---------------------------------------------------------------------------
.text:004071D8                 align 10h
.text:004071E0                 mov     eax, [esp+4]
.text:004071E4                 test    eax, eax
.text:004071E6                 jz      short loc_4071F0
.text:004071E8
.text:004071E8 loc_4071E8:                             ; CODE XREF: .text:004071F5↓j
.text:004071E8                 mov     eax, [eax]
.text:004071EA                 retn
.text:004071EA ; ---------------------------------------------------------------------------
.text:004071EB                 align 10h
.text:004071F0
.text:004071F0 loc_4071F0:                             ; CODE XREF: .text:004071E6↑j
.text:004071F0                 mov     eax, offset dword_412170
.text:004071F5                 jmp     short loc_4071E8
.text:004071F5 ; ---------------------------------------------------------------------------
.text:004071F7                 align 10h
.text:00407200                 mov     edx, [esp+4]
.text:00407204                 test    edx, edx
.text:00407206                 jz      short loc_407210
.text:00407208
.text:00407208 loc_407208:                             ; CODE XREF: .text:00407215↓j
.text:00407208                 mov     ecx, [esp+8]
.text:0040720C                 mov     [edx], ecx
.text:0040720E                 retn
.text:0040720E ; ---------------------------------------------------------------------------
.text:0040720F                 align 10h
.text:00407210
.text:00407210 loc_407210:                             ; CODE XREF: .text:00407206↑j
.text:00407210                 mov     edx, offset dword_412170
.text:00407215                 jmp     short loc_407208
.text:00407215 ; ---------------------------------------------------------------------------
.text:00407217                 align 10h
.text:00407220                 sub     esp, 8
.text:00407223                 mov     eax, [esp+0Ch]
.text:00407227                 movzx   ecx, byte ptr [esp+10h]
.text:0040722C                 mov     [esp], ebx
.text:0040722F                 mov     ebx, [esp+14h]
.text:00407233                 mov     [esp+4], esi
.text:00407237                 mov     dl, cl
.text:00407239                 shr     dl, 5
.text:0040723C                 movzx   edx, dl
.text:0040723F                 shl     edx, 2
.text:00407242                 test    eax, eax
.text:00407244                 lea     esi, [edx+eax+4]
.text:00407248                 jz      short loc_407270
.text:0040724A
.text:0040724A loc_40724A:                             ; CODE XREF: .text:00407276↓j
.text:0040724A                 mov     edx, [esi]
.text:0040724C                 and     ecx, 1Fh
.text:0040724F                 and     ebx, 1
.text:00407252                 mov     eax, edx
.text:00407254                 shr     eax, cl
.text:00407256                 and     eax, 1
.text:00407259                 xor     ebx, eax
.text:0040725B                 shl     ebx, cl
.text:0040725D                 xor     edx, ebx
.text:0040725F                 mov     [esi], edx
.text:00407261                 mov     ebx, [esp]
.text:00407264                 mov     esi, [esp+4]
.text:00407268                 add     esp, 8
.text:0040726B                 retn
.text:0040726B ; ---------------------------------------------------------------------------
.text:0040726C                 align 10h
.text:00407270
.text:00407270 loc_407270:                             ; CODE XREF: .text:00407248↑j
.text:00407270                 lea     esi, dword_412174[edx]
.text:00407276                 jmp     short loc_40724A
.text:00407276 ; ---------------------------------------------------------------------------
.text:00407278                 align 10h
.text:00407280                 sub     esp, 2Ch
.text:00407283                 mov     [esp+24h], ebx
.text:00407287                 mov     ebx, [esp+40h]
.text:0040728B                 mov     [esp+28h], esi
.text:0040728F                 test    ebx, ebx
.text:00407291                 jz      short loc_4072E0
.text:00407293
.text:00407293 loc_407293:                             ; CODE XREF: .text:004072E5↓j
.text:00407293                 call    _errno
.text:00407298                 mov     esi, [eax]
.text:0040729A                 mov     [esp+14h], ebx
.text:0040729E                 mov     edx, [ebx]
.text:004072A0                 mov     ecx, [esp+38h]
.text:004072A4                 mov     ebx, [esp+3Ch]
.text:004072A8                 mov     [esp+10h], edx
.text:004072AC                 mov     edx, [esp+34h]
.text:004072B0                 mov     [esp+0Ch], ebx
.text:004072B4                 mov     [esp+8], ecx
.text:004072B8                 mov     [esp+4], edx
.text:004072BC                 mov     edx, [esp+30h]
.text:004072C0                 mov     [esp], edx
.text:004072C3                 call    sub_406700
.text:004072C8                 mov     ebx, eax
.text:004072CA                 call    _errno
.text:004072CF                 mov     [eax], esi
.text:004072D1                 mov     esi, [esp+28h]
.text:004072D5                 mov     eax, ebx
.text:004072D7                 mov     ebx, [esp+24h]
.text:004072DB                 add     esp, 2Ch
.text:004072DE                 retn
.text:004072DE ; ---------------------------------------------------------------------------
.text:004072DF                 align 10h
.text:004072E0
.text:004072E0 loc_4072E0:                             ; CODE XREF: .text:00407291↑j
.text:004072E0                 mov     ebx, offset dword_412170
.text:004072E5                 jmp     short loc_407293
.text:004072E5 ; ---------------------------------------------------------------------------
.text:004072E7                 align 10h
.text:004072F0                 push    ebp
.text:004072F1                 push    edi
.text:004072F2                 push    esi
.text:004072F3                 push    ebx
.text:004072F4                 sub     esp, 2Ch
.text:004072F7                 mov     ebp, [esp+48h]
.text:004072FB                 call    _errno
.text:00407300                 mov     edx, [eax]
.text:00407302                 test    ebp, ebp
.text:00407304                 mov     ebx, ebp
.text:00407306                 mov     [esp+28h], edx
.text:0040730A                 jz      loc_4073C0
.text:00407310
.text:00407310 loc_407310:                             ; CODE XREF: .text:004073C5↓j
.text:00407310                 call    _errno
.text:00407315                 mov     edi, [eax]
.text:00407317                 mov     esi, ebp
.text:00407319                 mov     [esp+14h], ebx
.text:0040731D                 mov     ecx, [ebx]
.text:0040731F                 mov     dword ptr [esp], 0
.text:00407326                 mov     edx, [esp+44h]
.text:0040732A                 mov     dword ptr [esp+4], 0
.text:00407332                 mov     eax, [esp+40h]
.text:00407336                 mov     [esp+10h], ecx
.text:0040733A                 mov     [esp+0Ch], edx
.text:0040733E                 mov     [esp+8], eax
.text:00407342                 call    sub_406700
.text:00407347                 mov     ebx, eax
.text:00407349                 call    _errno
.text:0040734E                 mov     [eax], edi
.text:00407350                 lea     edi, [ebx+1]
.text:00407353                 mov     [esp], edi
.text:00407356                 call    sub_406240
.text:0040735B                 mov     [esp+24h], eax
.text:0040735F                 test    ebp, ebp
.text:00407361                 jz      short loc_4073B2
.text:00407363
.text:00407363 loc_407363:                             ; CODE XREF: .text:004073B7↓j
.text:00407363                 call    _errno
.text:00407368                 mov     ebp, [eax]
.text:0040736A                 mov     [esp+14h], esi
.text:0040736E                 mov     ecx, [esi]
.text:00407370                 mov     [esp+4], edi
.text:00407374                 mov     edx, [esp+44h]
.text:00407378                 mov     esi, [esp+24h]
.text:0040737C                 mov     [esp+10h], ecx
.text:00407380                 mov     eax, [esp+40h]
.text:00407384                 mov     [esp+0Ch], edx
.text:00407388                 mov     [esp], esi
.text:0040738B                 mov     [esp+8], eax
.text:0040738F                 call    sub_406700
.text:00407394                 call    _errno
.text:00407399                 mov     [eax], ebp
.text:0040739B                 call    _errno
.text:004073A0                 mov     ebx, [esp+28h]
.text:004073A4                 mov     [eax], ebx
.text:004073A6                 mov     eax, [esp+24h]
.text:004073AA                 add     esp, 2Ch
.text:004073AD                 pop     ebx
.text:004073AE                 pop     esi
.text:004073AF                 pop     edi
.text:004073B0                 pop     ebp
.text:004073B1                 retn
.text:004073B2 ; ---------------------------------------------------------------------------
.text:004073B2
.text:004073B2 loc_4073B2:                             ; CODE XREF: .text:00407361↑j
.text:004073B2                 mov     esi, offset dword_412170
.text:004073B7                 jmp     short loc_407363
.text:004073B7 ; ---------------------------------------------------------------------------
.text:004073B9                 align 10h
.text:004073C0
.text:004073C0 loc_4073C0:                             ; CODE XREF: .text:0040730A↑j
.text:004073C0                 mov     ebx, offset dword_412170
.text:004073C5                 jmp     loc_407310
.text:004073C5 ; ---------------------------------------------------------------------------
.text:004073CA                 align 10h
.text:004073D0                 sub     esp, 1Ch
.text:004073D3                 mov     edx, [esp+24h]
.text:004073D7                 mov     dword ptr [esp+0Ch], offset dword_412170
.text:004073DF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004073E7                 mov     [esp+4], edx
.text:004073EB                 mov     edx, [esp+20h]
.text:004073EF                 mov     [esp], edx
.text:004073F2                 call    sub_407840
.text:004073F7                 add     esp, 1Ch
.text:004073FA                 retn
.text:004073FA ; ---------------------------------------------------------------------------
.text:004073FB                 align 10h
.text:00407400                 sub     esp, 1Ch
.text:00407403                 mov     edx, [esp+20h]
.text:00407407                 mov     dword ptr [esp+0Ch], offset dword_412170
.text:0040740F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00407417                 mov     [esp+4], edx
.text:0040741B                 mov     dword ptr [esp], 0
.text:00407422                 call    sub_407840
.text:00407427                 add     esp, 1Ch
.text:0040742A                 retn
.text:0040742A ; ---------------------------------------------------------------------------
.text:0040742B                 align 10h
.text:00407430
.text:00407430 ; =============== S U B R O U T I N E =======================================
.text:00407430
.text:00407430
.text:00407430 ; int __cdecl sub_407430(int, int, char *)
.text:00407430 sub_407430      proc near               ; CODE XREF: .text:0040662A↑p
.text:00407430                                         ; sub_406640+1A↑p
.text:00407430
.text:00407430 var_BC          = dword ptr -0BCh
.text:00407430 var_B8          = dword ptr -0B8h
.text:00407430 var_B4          = dword ptr -0B4h
.text:00407430 var_B0          = dword ptr -0B0h
.text:00407430 var_AC          = dword ptr -0ACh
.text:00407430 var_A8          = dword ptr -0A8h
.text:00407430 var_A4          = dword ptr -0A4h
.text:00407430 var_A0          = dword ptr -0A0h
.text:00407430 var_9C          = dword ptr -9Ch
.text:00407430 var_98          = dword ptr -98h
.text:00407430 var_94          = dword ptr -94h
.text:00407430 var_90          = dword ptr -90h
.text:00407430 var_8C          = dword ptr -8Ch
.text:00407430 var_7C          = dword ptr -7Ch
.text:00407430 var_78          = dword ptr -78h
.text:00407430 var_74          = dword ptr -74h
.text:00407430 var_70          = dword ptr -70h
.text:00407430 var_6C          = dword ptr -6Ch
.text:00407430 var_68          = dword ptr -68h
.text:00407430 var_64          = dword ptr -64h
.text:00407430 var_60          = dword ptr -60h
.text:00407430 var_5C          = dword ptr -5Ch
.text:00407430 var_4C          = dword ptr -4Ch
.text:00407430 var_48          = dword ptr -48h
.text:00407430 var_44          = dword ptr -44h
.text:00407430 var_40          = dword ptr -40h
.text:00407430 var_3C          = dword ptr -3Ch
.text:00407430 var_38          = dword ptr -38h
.text:00407430 var_34          = dword ptr -34h
.text:00407430 var_30          = dword ptr -30h
.text:00407430 var_2C          = dword ptr -2Ch
.text:00407430 arg_0           = dword ptr  4
.text:00407430 arg_4           = dword ptr  8
.text:00407430 arg_8           = dword ptr  0Ch
.text:00407430
.text:00407430                 push    ebp
.text:00407431                 xor     eax, eax
.text:00407433                 mov     ecx, 8
.text:00407438                 push    edi
.text:00407439                 push    esi
.text:0040743A                 push    ebx
.text:0040743B                 sub     esp, 0ACh
.text:00407441                 mov     ebp, [esp+0BCh+arg_4]
.text:00407448                 cld
.text:00407449                 lea     edi, [esp+0BCh+var_A8]
.text:0040744D                 mov     [esp+0BCh+var_AC], ebp
.text:00407451                 rep stosd
.text:00407453                 mov     eax, [esp+0BCh+var_8C]
.text:00407457                 mov     edi, [esp+0BCh+var_AC]
.text:0040745B                 mov     esi, [esp+0BCh+var_A8]
.text:0040745F                 mov     [esp+0BCh+var_5C], eax
.text:00407463                 mov     ebp, [esp+0BCh+var_A4]
.text:00407467                 mov     eax, [esp+0BCh+var_AC]
.text:0040746B                 mov     [esp+0BCh+var_7C], edi
.text:0040746F                 mov     ecx, [esp+0BCh+var_94]
.text:00407473                 mov     edi, [esp+0BCh+var_A0]
.text:00407477                 mov     [esp+0BCh+var_78], esi
.text:0040747B                 mov     edx, [esp+0BCh+var_90]
.text:0040747F                 mov     esi, [esp+0BCh+var_9C]
.text:00407483                 mov     [esp+0BCh+var_4C], eax
.text:00407487                 mov     ebx, [esp+0BCh+var_98]
.text:0040748B                 mov     eax, [esp+0BCh+var_A8]
.text:0040748F                 mov     [esp+0BCh+var_74], ebp
.text:00407493                 mov     [esp+0BCh+var_70], edi
.text:00407497                 mov     [esp+0BCh+var_6C], esi
.text:0040749B                 mov     [esp+0BCh+var_68], ebx
.text:0040749F                 mov     [esp+0BCh+var_64], ecx
.text:004074A3                 mov     [esp+0BCh+var_60], edx
.text:004074A7                 mov     [esp+0BCh+var_48], eax
.text:004074AB                 mov     [esp+0BCh+var_44], ebp
.text:004074AF                 mov     [esp+0BCh+var_40], edi
.text:004074B3                 mov     [esp+0BCh+var_3C], esi
.text:004074BA                 mov     [esp+0BCh+var_38], ebx
.text:004074C1                 mov     ebx, [esp+0BCh+var_8C]
.text:004074C5                 mov     [esp+0BCh+var_30], edx
.text:004074CC                 mov     edx, [esp+0BCh+arg_8]
.text:004074D3                 mov     [esp+0BCh+var_34], ecx
.text:004074DA                 lea     ecx, [esp+0BCh+var_4C]
.text:004074DE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004074E2                 mov     edx, [esp+0BCh+arg_0]
.text:004074E9                 mov     [esp+0BCh+var_2C], ebx
.text:004074F0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004074F4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004074FC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004074FF                 call    sub_407840
.text:00407504                 add     esp, 0ACh
.text:0040750A                 pop     ebx
.text:0040750B                 pop     esi
.text:0040750C                 pop     edi
.text:0040750D                 pop     ebp
.text:0040750E                 retn
.text:0040750E sub_407430      endp
.text:0040750E
.text:0040750E ; ---------------------------------------------------------------------------
.text:0040750F                 align 10h
.text:00407510                 push    ebp
.text:00407511                 xor     eax, eax
.text:00407513                 mov     ecx, 8
.text:00407518                 push    edi
.text:00407519                 push    esi
.text:0040751A                 push    ebx
.text:0040751B                 sub     esp, 0ACh
.text:00407521                 mov     edx, [esp+0C4h]
.text:00407528                 cld
.text:00407529                 lea     edi, [esp+14h]
.text:0040752D                 mov     [esp+10h], edx
.text:00407531                 rep stosd
.text:00407533                 mov     eax, [esp+30h]
.text:00407537                 mov     ebp, [esp+10h]
.text:0040753B                 mov     edi, [esp+14h]
.text:0040753F                 mov     [esp+60h], eax
.text:00407543                 mov     esi, [esp+20h]
.text:00407547                 mov     eax, [esp+10h]
.text:0040754B                 mov     [esp+40h], ebp
.text:0040754F                 mov     ecx, [esp+28h]
.text:00407553                 mov     ebp, [esp+18h]
.text:00407557                 mov     [esp+44h], edi
.text:0040755B                 mov     edx, [esp+2Ch]
.text:0040755F                 mov     edi, [esp+1Ch]
.text:00407563                 mov     [esp+70h], eax
.text:00407567                 mov     ebx, [esp+24h]
.text:0040756B                 mov     eax, [esp+14h]
.text:0040756F                 mov     [esp+48h], ebp
.text:00407573                 mov     [esp+4Ch], edi
.text:00407577                 mov     [esp+50h], esi
.text:0040757B                 mov     [esp+54h], ebx
.text:0040757F                 mov     [esp+58h], ecx
.text:00407583                 mov     [esp+5Ch], edx
.text:00407587                 mov     [esp+74h], eax
.text:0040758B                 mov     [esp+78h], ebp
.text:0040758F                 mov     [esp+7Ch], edi
.text:00407593                 mov     [esp+80h], esi
.text:0040759A                 mov     [esp+84h], ebx
.text:004075A1                 mov     esi, [esp+30h]
.text:004075A5                 lea     ebx, [esp+70h]
.text:004075A9                 mov     [esp+8Ch], edx
.text:004075B0                 mov     edx, [esp+0C8h]
.text:004075B7                 mov     [esp+88h], ecx
.text:004075BE                 mov     ecx, [esp+0CCh]
.text:004075C5                 mov     [esp+4], edx
.text:004075C9                 mov     edx, [esp+0C0h]
.text:004075D0                 mov     [esp+90h], esi
.text:004075D7                 mov     [esp+0Ch], ebx
.text:004075DB                 mov     [esp+8], ecx
.text:004075DF                 mov     [esp], edx
.text:004075E2                 call    sub_407840
.text:004075E7                 add     esp, 0ACh
.text:004075ED                 pop     ebx
.text:004075EE                 pop     esi
.text:004075EF                 pop     edi
.text:004075F0                 pop     ebp
.text:004075F1                 retn
.text:004075F1 ; ---------------------------------------------------------------------------
.text:004075F2                 align 10h
.text:00407600                 push    ebp
.text:00407601                 xor     eax, eax
.text:00407603                 mov     ecx, 8
.text:00407608                 push    edi
.text:00407609                 push    esi
.text:0040760A                 push    ebx
.text:0040760B                 sub     esp, 0ACh
.text:00407611                 mov     edi, [esp+0C0h]
.text:00407618                 cld
.text:00407619                 mov     [esp+10h], edi
.text:0040761D                 lea     edi, [esp+14h]
.text:00407621                 rep stosd
.text:00407623                 mov     eax, [esp+30h]
.text:00407627                 mov     esi, [esp+10h]
.text:0040762B                 mov     ebx, [esp+14h]
.text:0040762F                 mov     [esp+60h], eax
.text:00407633                 mov     ebp, [esp+18h]
.text:00407637                 mov     eax, [esp+10h]
.text:0040763B                 mov     [esp+40h], esi
.text:0040763F                 mov     edi, [esp+1Ch]
.text:00407643                 mov     esi, [esp+20h]
.text:00407647                 mov     [esp+44h], ebx
.text:0040764B                 mov     ecx, [esp+28h]
.text:0040764F                 mov     edx, [esp+2Ch]
.text:00407653                 mov     [esp+70h], eax
.text:00407657                 mov     ebx, [esp+24h]
.text:0040765B                 mov     eax, [esp+14h]
.text:0040765F                 mov     [esp+48h], ebp
.text:00407663                 mov     [esp+4Ch], edi
.text:00407667                 mov     [esp+50h], esi
.text:0040766B                 mov     [esp+54h], ebx
.text:0040766F                 mov     [esp+58h], ecx
.text:00407673                 mov     [esp+5Ch], edx
.text:00407677                 mov     [esp+74h], eax
.text:0040767B                 mov     [esp+78h], ebp
.text:0040767F                 mov     [esp+7Ch], edi
.text:00407683                 mov     [esp+80h], esi
.text:0040768A                 mov     [esp+84h], ebx
.text:00407691                 mov     [esp+8Ch], edx
.text:00407698                 lea     edx, [esp+70h]
.text:0040769C                 mov     [esp+88h], ecx
.text:004076A3                 mov     ecx, [esp+30h]
.text:004076A7                 mov     [esp+0Ch], edx
.text:004076AB                 mov     edx, [esp+0C4h]
.text:004076B2                 mov     [esp+90h], ecx
.text:004076B9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004076C1                 mov     [esp+4], edx
.text:004076C5                 mov     dword ptr [esp], 0
.text:004076CC                 call    sub_407840
.text:004076D1                 add     esp, 0ACh
.text:004076D7                 pop     ebx
.text:004076D8                 pop     esi
.text:004076D9                 pop     edi
.text:004076DA                 pop     ebp
.text:004076DB                 retn
.text:004076DB ; ---------------------------------------------------------------------------
.text:004076DC                 align 10h
.text:004076E0                 push    edi
.text:004076E1                 push    esi
.text:004076E2                 push    ebx
.text:004076E3                 sub     esp, 40h
.text:004076E6                 mov     edx, ds:dword_41217C
.text:004076EC                 mov     ebx, ds:dword_412170
.text:004076F2                 mov     esi, ds:dword_412178
.text:004076F8                 mov     edi, ds:dword_412174
.text:004076FE                 mov     [esp+1Ch], edx
.text:00407702                 mov     ecx, ds:dword_412180
.text:00407708                 mov     edx, ds:dword_412190
.text:0040770E                 mov     [esp+10h], ebx
.text:00407712                 mov     ebx, ds:dword_412184
.text:00407718                 mov     [esp+30h], edx
.text:0040771C                 movzx   edx, byte ptr [esp+54h]
.text:00407721                 mov     [esp+18h], esi
.text:00407725                 mov     esi, ds:dword_41218C
.text:0040772B                 mov     [esp+14h], edi
.text:0040772F                 mov     edi, ds:dword_412188
.text:00407735                 mov     [esp+20h], ecx
.text:00407739                 mov     cl, dl
.text:0040773B                 shr     cl, 5
.text:0040773E                 mov     [esp+24h], ebx
.text:00407742                 movzx   ebx, cl
.text:00407745                 mov     [esp+2Ch], esi
.text:00407749                 lea     esi, [esp+10h]
.text:0040774D                 mov     [esp+28h], edi
.text:00407751                 lea     edi, [esi+ebx*4]
.text:00407754                 mov     ebx, edx
.text:00407756                 mov     edx, [edi+4]
.text:00407759                 and     ebx, 1Fh
.text:0040775C                 mov     cl, bl
.text:0040775E                 mov     eax, edx
.text:00407760                 shr     eax, cl
.text:00407762                 and     eax, 1
.text:00407765                 xor     eax, 1
.text:00407768                 shl     eax, cl
.text:0040776A                 xor     edx, eax
.text:0040776C                 mov     [edi+4], edx
.text:0040776F                 mov     edx, [esp+50h]
.text:00407773                 mov     [esp+0Ch], esi
.text:00407777                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040777F                 mov     [esp+4], edx
.text:00407783                 mov     dword ptr [esp], 0
.text:0040778A                 call    sub_407840
.text:0040778F                 add     esp, 40h
.text:00407792                 pop     ebx
.text:00407793                 pop     esi
.text:00407794                 pop     edi
.text:00407795                 retn
.text:00407795 ; ---------------------------------------------------------------------------
.text:00407796                 align 10h
.text:004077A0
.text:004077A0 ; =============== S U B R O U T I N E =======================================
.text:004077A0
.text:004077A0
.text:004077A0 ; int __cdecl sub_4077A0(char *)
.text:004077A0 sub_4077A0      proc near               ; CODE XREF: sub_405360+64↑p
.text:004077A0
.text:004077A0 var_4C          = dword ptr -4Ch
.text:004077A0 var_48          = dword ptr -48h
.text:004077A0 var_44          = dword ptr -44h
.text:004077A0 var_40          = dword ptr -40h
.text:004077A0 var_3C          = dword ptr -3Ch
.text:004077A0 var_38          = dword ptr -38h
.text:004077A0 var_34          = dword ptr -34h
.text:004077A0 var_30          = dword ptr -30h
.text:004077A0 var_2C          = dword ptr -2Ch
.text:004077A0 var_28          = dword ptr -28h
.text:004077A0 var_24          = dword ptr -24h
.text:004077A0 var_20          = dword ptr -20h
.text:004077A0 var_1C          = dword ptr -1Ch
.text:004077A0 arg_0           = dword ptr  4
.text:004077A0
.text:004077A0                 sub     esp, 4Ch
.text:004077A3                 mov     ecx, ds:dword_412170
.text:004077A9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004077B1                 mov     edx, ds:dword_412174
.text:004077B7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004077BE                 mov     [esp+4Ch+var_3C], ecx
.text:004077C2                 mov     ecx, ds:dword_41217C
.text:004077C8                 mov     [esp+4Ch+var_38], edx
.text:004077CC                 mov     edx, ds:dword_412178
.text:004077D2                 mov     [esp+4Ch+var_30], ecx
.text:004077D6                 mov     ecx, ds:dword_412180
.text:004077DC                 mov     eax, edx
.text:004077DE                 shr     eax, 1Ah
.text:004077E1                 and     eax, 1
.text:004077E4                 xor     eax, 1
.text:004077E7                 mov     [esp+4Ch+var_2C], ecx
.text:004077EB                 shl     eax, 1Ah
.text:004077EE                 mov     ecx, ds:dword_412184
.text:004077F4                 xor     edx, eax
.text:004077F6                 mov     [esp+4Ch+var_34], edx
.text:004077FA                 mov     edx, [esp+4Ch+arg_0]
.text:004077FE                 mov     [esp+4Ch+var_28], ecx
.text:00407802                 mov     ecx, ds:dword_412188
.text:00407808                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040780C                 mov     [esp+4Ch+var_24], ecx
.text:00407810                 mov     ecx, ds:dword_41218C
.text:00407816                 mov     [esp+4Ch+var_20], ecx
.text:0040781A                 mov     ecx, ds:dword_412190
.text:00407820                 mov     [esp+4Ch+var_1C], ecx
.text:00407824                 lea     ecx, [esp+4Ch+var_3C]
.text:00407828                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040782C                 call    sub_407840
.text:00407831                 add     esp, 4Ch
.text:00407834                 retn
.text:00407834 sub_4077A0      endp
.text:00407834
.text:00407834 ; ---------------------------------------------------------------------------
.text:00407835                 align 10h
.text:00407840
.text:00407840 ; =============== S U B R O U T I N E =======================================
.text:00407840
.text:00407840
.text:00407840 ; int __cdecl sub_407840(int, char *, int, int)
.text:00407840 sub_407840      proc near               ; CODE XREF: .text:004073F2↑p
.text:00407840                                         ; .text:00407422↑p ...
.text:00407840
.text:00407840 Block           = dword ptr -2Ch
.text:00407840 var_28          = dword ptr -28h
.text:00407840 Str             = dword ptr -24h
.text:00407840 var_20          = dword ptr -20h
.text:00407840 var_1C          = dword ptr -1Ch
.text:00407840 var_18          = dword ptr -18h
.text:00407840 var_14          = dword ptr -14h
.text:00407840 arg_0           = dword ptr  4
.text:00407840 arg_4           = dword ptr  8
.text:00407840 arg_8           = dword ptr  0Ch
.text:00407840 arg_C           = dword ptr  10h
.text:00407840
.text:00407840                 push    ebp
.text:00407841                 push    edi
.text:00407842                 push    esi
.text:00407843                 push    ebx
.text:00407844                 sub     esp, 1Ch
.text:00407847                 call    _errno
.text:0040784C                 mov     edx, [eax]
.text:0040784E                 mov     eax, [esp+2Ch+arg_0]
.text:00407852                 mov     [esp+2Ch+var_14], edx
.text:00407856                 test    eax, eax
.text:00407858                 js      loc_4079FA
.text:0040785E                 mov     eax, [esp+2Ch+arg_0]
.text:00407862                 cmp     dword_411050, eax
.text:00407868                 ja      short loc_4078E0
.text:0040786A                 mov     esi, eax
.text:0040786C                 inc     esi
.text:0040786D                 cmp     esi, 1FFFFFFFh
.text:00407873                 ja      loc_4079FF
.text:00407879                 mov     ebx, off_41105C
.text:0040787F                 cmp     ebx, offset dword_411054
.text:00407885                 jz      loc_4079D1
.text:0040788B
.text:0040788B loc_40788B:                             ; CODE XREF: sub_407840+1B5↓j
.text:0040788B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040788E                 lea     ecx, ds:0[esi*8]
.text:00407895                 mov     ebp, esi
.text:00407897                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040789B                 call    sub_4062D0
.text:004078A0                 mov     off_41105C, eax
.text:004078A5                 mov     ebx, dword_411050
.text:004078AB                 sub     ebp, ebx
.text:004078AD                 lea     edi, [eax+ebx*8]
.text:004078B0                 lea     eax, ds:0[ebp*8]
.text:004078B7                 cmp     eax, 7
.text:004078BA                 jbe     short loc_4078D0
.text:004078BC                 test    edi, 4
.text:004078C2                 jz      short loc_4078D0
.text:004078C4                 mov     dword ptr [edi], 0
.text:004078CA                 sub     eax, 4
.text:004078CD                 add     edi, 4
.text:004078D0
.text:004078D0 loc_4078D0:                             ; CODE XREF: sub_407840+7A↑j
.text:004078D0                                         ; sub_407840+82↑j
.text:004078D0                 cld
.text:004078D1                 mov     ecx, eax
.text:004078D3                 shr     ecx, 2
.text:004078D6                 xor     eax, eax
.text:004078D8                 rep stosd
.text:004078DA                 mov     dword_411050, esi
.text:004078E0
.text:004078E0 loc_4078E0:                             ; CODE XREF: sub_407840+28↑j
.text:004078E0                 mov     esi, off_41105C
.text:004078E6                 mov     eax, [esp+2Ch+arg_0]
.text:004078EA                 mov     ebp, [esi+eax*8]
.text:004078ED                 mov     edi, [esi+eax*8+4]
.text:004078F1                 mov     esi, [esp+2Ch+arg_C]
.text:004078F5                 test    esi, esi
.text:004078F7                 jz      loc_4079C7
.text:004078FD
.text:004078FD loc_4078FD:                             ; CODE XREF: sub_407840+18C↓j
.text:004078FD                 call    _errno
.text:00407902                 mov     ebx, [eax]
.text:00407904                 mov     [esp+2Ch+var_18], esi ; int
.text:00407908                 mov     ecx, [esi]
.text:0040790A                 mov     [esp+2Ch+Block], edi ; int
.text:0040790D                 mov     edx, [esp+2Ch+arg_8]
.text:00407911                 mov     [esp+2Ch+var_28], ebp ; int
.text:00407915                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00407919                 mov     ecx, [esp+2Ch+arg_4]
.text:0040791D                 mov     [esp+2Ch+var_20], edx ; int
.text:00407921                 mov     [esp+2Ch+Str], ecx ; Str
.text:00407925                 call    sub_406700
.text:0040792A                 mov     esi, eax
.text:0040792C                 call    _errno
.text:00407931                 mov     [eax], ebx
.text:00407933                 cmp     ebp, esi
.text:00407935                 ja      short loc_4079AB
.text:00407937                 lea     ebp, [esi+1]
.text:0040793A                 mov     ebx, off_41105C
.text:00407940                 cmp     edi, offset unk_412070
.text:00407946                 mov     esi, [esp+2Ch+arg_0]
.text:0040794A                 mov     [ebx+esi*8], ebp
.text:0040794D                 jz      short loc_40795D
.text:0040794F                 mov     [esp+2Ch+Block], edi ; Block
.text:00407952                 call    free
.text:00407957                 mov     ebx, off_41105C
.text:0040795D
.text:0040795D loc_40795D:                             ; CODE XREF: sub_407840+10D↑j
.text:0040795D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00407960                 call    sub_406240
.text:00407965                 mov     esi, [esp+2Ch+arg_C]
.text:00407969                 mov     edi, eax
.text:0040796B                 mov     eax, [esp+2Ch+arg_0]
.text:0040796F                 test    esi, esi
.text:00407971                 mov     [ebx+eax*8+4], edi
.text:00407975                 jz      short loc_4079C0
.text:00407977
.text:00407977 loc_407977:                             ; CODE XREF: sub_407840+185↓j
.text:00407977                 call    _errno
.text:0040797C                 mov     ebx, [eax]
.text:0040797E                 mov     [esp+2Ch+var_18], esi ; int
.text:00407982                 mov     ecx, [esi]
.text:00407984                 mov     [esp+2Ch+Block], edi ; int
.text:00407987                 mov     edx, [esp+2Ch+arg_8]
.text:0040798B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040798F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00407993                 mov     ecx, [esp+2Ch+arg_4]
.text:00407997                 mov     [esp+2Ch+var_20], edx ; int
.text:0040799B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040799F                 call    sub_406700
.text:004079A4                 call    _errno
.text:004079A9                 mov     [eax], ebx
.text:004079AB
.text:004079AB loc_4079AB:                             ; CODE XREF: sub_407840+F5↑j
.text:004079AB                 call    _errno
.text:004079B0                 mov     ebp, [esp+2Ch+var_14]
.text:004079B4                 mov     [eax], ebp
.text:004079B6                 add     esp, 1Ch
.text:004079B9                 mov     eax, edi
.text:004079BB                 pop     ebx
.text:004079BC                 pop     esi
.text:004079BD                 pop     edi
.text:004079BE                 pop     ebp
.text:004079BF                 retn
.text:004079C0 ; ---------------------------------------------------------------------------
.text:004079C0
.text:004079C0 loc_4079C0:                             ; CODE XREF: sub_407840+135↑j
.text:004079C0                 mov     esi, offset dword_412170
.text:004079C5                 jmp     short loc_407977
.text:004079C7 ; ---------------------------------------------------------------------------
.text:004079C7
.text:004079C7 loc_4079C7:                             ; CODE XREF: sub_407840+B7↑j
.text:004079C7                 mov     esi, offset dword_412170
.text:004079CC                 jmp     loc_4078FD
.text:004079D1 ; ---------------------------------------------------------------------------
.text:004079D1
.text:004079D1 loc_4079D1:                             ; CODE XREF: sub_407840+45↑j
.text:004079D1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004079D8                 call    sub_406240
.text:004079DD                 mov     off_41105C, eax
.text:004079E2                 mov     edi, dword_411054
.text:004079E8                 mov     ebx, eax
.text:004079EA                 mov     ecx, off_411058
.text:004079F0                 mov     [eax], edi
.text:004079F2                 mov     [eax+4], ecx
.text:004079F5                 jmp     loc_40788B
.text:004079FA ; ---------------------------------------------------------------------------
.text:004079FA
.text:004079FA loc_4079FA:                             ; CODE XREF: sub_407840+18↑j
.text:004079FA                 call    abort
.text:004079FF ; ---------------------------------------------------------------------------
.text:004079FF
.text:004079FF loc_4079FF:                             ; CODE XREF: sub_407840+33↑j
.text:004079FF                 call    sub_407A30
.text:004079FF sub_407840      endp
.text:004079FF
.text:004079FF ; ---------------------------------------------------------------------------
.text:00407A04                 align 10h
.text:00407A10
.text:00407A10 loc_407A10:                             ; DATA XREF: sub_407A30+3↓o
.text:00407A10                 insd
.text:00407A11                 db      65h
.text:00407A11                 insd
.text:00407A13                 outsd
.text:00407A14                 jb      short loc_407A8F
.text:00407A16                 and     [ebp+78h], ah
.text:00407A19                 push    74737561h
.text:00407A1E
.text:00407A1E loc_407A1E:                             ; DATA XREF: sub_407A30+10↓o
.text:00407A1E                 db      65h
.text:00407A1E                 add     fs:0B68D0073h, ah
.text:00407A1E ; ---------------------------------------------------------------------------
.text:00407A26                 dw 0
.text:00407A28                 align 10h
.text:00407A30
.text:00407A30 ; =============== S U B R O U T I N E =======================================
.text:00407A30
.text:00407A30 ; Attributes: noreturn
.text:00407A30
.text:00407A30 sub_407A30      proc near               ; CODE XREF: sub_406200:loc_406239↑p
.text:00407A30                                         ; sub_406240+24↑p ...
.text:00407A30
.text:00407A30 Code            = dword ptr -1Ch
.text:00407A30 ErrorMessage    = dword ptr -18h
.text:00407A30 var_14          = dword ptr -14h
.text:00407A30 var_10          = byte ptr -10h
.text:00407A30
.text:00407A30                 sub     esp, 1Ch
.text:00407A33                 mov     [esp+1Ch+Code], offset loc_407A10
.text:00407A3A                 call    ds:libintl_gettext
.text:00407A40                 mov     [esp+1Ch+var_14], (offset loc_407A1E+3) ; char *
.text:00407A48                 mov     edx, Code
.text:00407A4E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00407A56                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00407A5A                 mov     [esp+1Ch+Code], edx ; Code
.text:00407A5D                 call    sub_407AC0
.text:00407A62                 call    abort
.text:00407A62 sub_407A30      endp
.text:00407A62
.text:00407A62 ; ---------------------------------------------------------------------------
.text:00407A67                 align 10h
.text:00407A70
.text:00407A70 ; =============== S U B R O U T I N E =======================================
.text:00407A70
.text:00407A70 ; Attributes: thunk
.text:00407A70
.text:00407A70 libintl_bindtextdomain proc near
.text:00407A70                 jmp     ds:__imp_libintl_bindtextdomain
.text:00407A70 libintl_bindtextdomain endp
.text:00407A70
.text:00407A70 ; ---------------------------------------------------------------------------
.text:00407A76                 align 10h
.text:00407A80                 jmp     ds:libintl_textdomain
.text:00407A80 ; ---------------------------------------------------------------------------
.text:00407A86                 db 2 dup(90h)
.text:00407A88                 dd 0
.text:00407A8C                 db 3 dup(0)
.text:00407A8F ; ---------------------------------------------------------------------------
.text:00407A8F
.text:00407A8F loc_407A8F:                             ; CODE XREF: .text:00407A14↑j
.text:00407A8F                 add     bh, bh
.text:00407A91                 and     eax, offset libintl_gettext
.text:00407A96                 nop
.text:00407A97                 nop
.text:00407A97 ; ---------------------------------------------------------------------------
.text:00407A98                 dd 2 dup(0)
.text:00407AA0 ; const char aS[]
.text:00407AA0 aS              db ': %s',0             ; DATA XREF: sub_407AC0+B8↓o
.text:00407AA0                                         ; sub_407BC4+122↓o
.text:00407AA5 aUnknownSystemE db 'Unknown system error',0
.text:00407AA5                                         ; DATA XREF: sub_407AC0:loc_407B8D↓o
.text:00407AA5                                         ; sub_407BC4:loc_407CFE↓o
.text:00407ABA ; const char aS_0[]
.text:00407ABA aS_0            db '%s: ',0             ; DATA XREF: sub_407AC0:loc_407B94↓o
.text:00407ABF                 align 10h
.text:00407AC0
.text:00407AC0 ; =============== S U B R O U T I N E =======================================
.text:00407AC0
.text:00407AC0
.text:00407AC0 ; int __cdecl sub_407AC0(int Code, int ErrorMessage, char *, char)
.text:00407AC0 sub_407AC0      proc near               ; CODE XREF: sub_401A30+1BC↑p
.text:00407AC0                                         ; sub_401A30+1FA↑p ...
.text:00407AC0
.text:00407AC0 Stream          = dword ptr -1Ch
.text:00407AC0 Format          = dword ptr -18h
.text:00407AC0 ArgList         = dword ptr -14h
.text:00407AC0 Code            = dword ptr  4
.text:00407AC0 ErrorMessage    = dword ptr  8
.text:00407AC0 arg_8           = dword ptr  0Ch
.text:00407AC0 arg_C           = byte ptr  10h
.text:00407AC0
.text:00407AC0                 push    esi
.text:00407AC1                 push    ebx
.text:00407AC2                 sub     esp, 14h
.text:00407AC5                 mov     edx, ds:_iob
.text:00407ACB                 mov     esi, [esp+1Ch+Code]
.text:00407ACF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00407AD3                 add     edx, 20h ; ' '
.text:00407AD6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407AD9                 call    fflush
.text:00407ADE                 mov     eax, ds:dword_412510
.text:00407AE3                 test    eax, eax
.text:00407AE5                 jz      loc_407B94
.text:00407AEB                 call    eax ; dword_412510
.text:00407AED
.text:00407AED loc_407AED:                             ; CODE XREF: sub_407AC0+F7↓j
.text:00407AED                 lea     edx, [esp+1Ch+arg_C]
.text:00407AF1                 mov     ecx, [esp+1Ch+arg_8]
.text:00407AF5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00407AF9                 mov     edx, ds:_iob
.text:00407AFF                 mov     [esp+1Ch+Format], ecx ; Format
.text:00407B03                 add     edx, 40h ; '@'
.text:00407B06                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407B09                 call    vfprintf
.text:00407B0E                 inc     ds:dword_412520
.text:00407B14                 test    ebx, ebx
.text:00407B16                 jnz     short loc_407B62
.text:00407B18
.text:00407B18 loc_407B18:                             ; CODE XREF: sub_407AC0+CB↓j
.text:00407B18                 mov     edx, ds:_iob
.text:00407B1E                 lea     ecx, [edx+40h]
.text:00407B21                 mov     ebx, [ecx+4]
.text:00407B24                 dec     ebx
.text:00407B25                 test    ebx, ebx
.text:00407B27                 mov     [ecx+4], ebx
.text:00407B2A                 js      short loc_407B50
.text:00407B2C                 mov     ecx, [edx+40h]
.text:00407B2F                 mov     byte ptr [ecx], 0Ah
.text:00407B32                 inc     dword ptr [edx+40h]
.text:00407B35
.text:00407B35 loc_407B35:                             ; CODE XREF: sub_407AC0+A0↓j
.text:00407B35                 mov     edx, ds:_iob
.text:00407B3B                 add     edx, 40h ; '@'
.text:00407B3E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407B41                 call    fflush
.text:00407B46                 test    esi, esi
.text:00407B48                 jnz     short loc_407BBC
.text:00407B4A                 add     esp, 14h
.text:00407B4D                 pop     ebx
.text:00407B4E                 pop     esi
.text:00407B4F                 retn
.text:00407B50 ; ---------------------------------------------------------------------------
.text:00407B50
.text:00407B50 loc_407B50:                             ; CODE XREF: sub_407AC0+6A↑j
.text:00407B50                 mov     [esp+1Ch+Format], ecx ; File
.text:00407B54                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00407B5B                 call    _flsbuf
.text:00407B60                 jmp     short loc_407B35
.text:00407B62 ; ---------------------------------------------------------------------------
.text:00407B62
.text:00407B62 loc_407B62:                             ; CODE XREF: sub_407AC0+56↑j
.text:00407B62                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00407B65                 call    strerror
.text:00407B6A                 test    eax, eax
.text:00407B6C                 jz      short loc_407B8D
.text:00407B6E
.text:00407B6E loc_407B6E:                             ; CODE XREF: sub_407AC0+D2↓j
.text:00407B6E                 mov     [esp+1Ch+ArgList], eax
.text:00407B72                 mov     ebx, ds:_iob
.text:00407B78                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:00407B80                 add     ebx, 40h ; '@'
.text:00407B83                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00407B86                 call    fprintf
.text:00407B8B                 jmp     short loc_407B18
.text:00407B8D ; ---------------------------------------------------------------------------
.text:00407B8D
.text:00407B8D loc_407B8D:                             ; CODE XREF: sub_407AC0+AC↑j
.text:00407B8D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00407B92                 jmp     short loc_407B6E
.text:00407B94 ; ---------------------------------------------------------------------------
.text:00407B94
.text:00407B94 loc_407B94:                             ; CODE XREF: sub_407AC0+25↑j
.text:00407B94                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:00407B9C                 mov     edx, ds:_iob
.text:00407BA2                 mov     ecx, ds:dword_4124E0
.text:00407BA8                 add     edx, 40h ; '@'
.text:00407BAB                 mov     [esp+1Ch+ArgList], ecx
.text:00407BAF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00407BB2                 call    fprintf
.text:00407BB7                 jmp     loc_407AED
.text:00407BBC ; ---------------------------------------------------------------------------
.text:00407BBC
.text:00407BBC loc_407BBC:                             ; CODE XREF: sub_407AC0+88↑j
.text:00407BBC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00407BBF                 call    exit
.text:00407BBF sub_407AC0      endp
.text:00407BBF
.text:00407BC4
.text:00407BC4 ; =============== S U B R O U T I N E =======================================
.text:00407BC4
.text:00407BC4
.text:00407BC4 ; int __cdecl sub_407BC4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00407BC4 sub_407BC4      proc near               ; DATA XREF: sub_407BC4+77↓o
.text:00407BC4
.text:00407BC4 Stream          = dword ptr -28h
.text:00407BC4 Format          = dword ptr -24h
.text:00407BC4 ArgList         = dword ptr -20h
.text:00407BC4 var_1C          = dword ptr -1Ch
.text:00407BC4 Code            = dword ptr  8
.text:00407BC4 ErrorMessage    = dword ptr  0Ch
.text:00407BC4 Str2            = dword ptr  10h
.text:00407BC4 arg_10          = dword ptr  14h
.text:00407BC4 arg_14          = dword ptr  18h
.text:00407BC4 arg_18          = byte ptr  1Ch
.text:00407BC4
.text:00407BC4                 and     eax, 64253A73h
.text:00407BC9                 cmp     ah, [eax]
.text:00407BCB
.text:00407BCB loc_407BCB:                             ; DATA XREF: sub_407BC4:loc_407D05↓o
.text:00407BCB                 add     ds:55003A73h, ah
.text:00407BD1                 push    edi
.text:00407BD2                 push    esi
.text:00407BD3                 push    ebx
.text:00407BD4                 sub     esp, 1Ch
.text:00407BD7                 mov     edx, ds:dword_412550
.text:00407BDD                 mov     ebp, [esp+28h+Code]
.text:00407BE1                 mov     edi, [esp+28h+ErrorMessage]
.text:00407BE5                 test    edx, edx
.text:00407BE7                 mov     ebx, [esp+28h+Str2]
.text:00407BEB                 mov     esi, [esp+28h+arg_10]
.text:00407BEF                 jz      short loc_407C09
.text:00407BF1                 cmp     ds:dword_4121B0, esi
.text:00407BF7                 jz      loc_407D30
.text:00407BFD
.text:00407BFD loc_407BFD:                             ; CODE XREF: sub_407BC4+18D↓j
.text:00407BFD                 mov     ds:Str1, ebx
.text:00407C03                 mov     ds:dword_4121B0, esi
.text:00407C09
.text:00407C09 loc_407C09:                             ; CODE XREF: sub_407BC4+2B↑j
.text:00407C09                 mov     edx, ds:_iob
.text:00407C0F                 add     edx, 20h ; ' '
.text:00407C12                 mov     [esp+28h+Stream], edx ; Stream
.text:00407C15                 call    fflush
.text:00407C1A                 mov     eax, ds:dword_412510
.text:00407C1F                 test    eax, eax
.text:00407C21                 jz      loc_407D05
.text:00407C27                 call    eax ; dword_412510
.text:00407C29
.text:00407C29 loc_407C29:                             ; CODE XREF: sub_407BC4+164↓j
.text:00407C29                 test    ebx, ebx
.text:00407C2B                 jz      short loc_407C4E
.text:00407C2D                 mov     [esp+28h+ArgList], ebx
.text:00407C31                 mov     ebx, ds:_iob
.text:00407C37                 mov     [esp+28h+var_1C], esi
.text:00407C3B                 mov     [esp+28h+Format], offset sub_407BC4 ; Format
.text:00407C43                 add     ebx, 40h ; '@'
.text:00407C46                 mov     [esp+28h+Stream], ebx ; Stream
.text:00407C49                 call    fprintf
.text:00407C4E
.text:00407C4E loc_407C4E:                             ; CODE XREF: sub_407BC4+67↑j
.text:00407C4E                 mov     esi, ds:_iob
.text:00407C54                 lea     edx, [esp+28h+arg_18]
.text:00407C58                 mov     ecx, [esp+28h+arg_14]
.text:00407C5C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00407C60                 add     esi, 40h ; '@'
.text:00407C63                 mov     [esp+28h+Format], ecx ; Format
.text:00407C67                 mov     [esp+28h+Stream], esi ; Stream
.text:00407C6A                 call    vfprintf
.text:00407C6F                 inc     ds:dword_412520
.text:00407C75                 test    edi, edi
.text:00407C77                 jnz     short loc_407CD0
.text:00407C79
.text:00407C79 loc_407C79:                             ; CODE XREF: sub_407BC4+135↓j
.text:00407C79                 mov     edx, ds:_iob
.text:00407C7F                 lea     ecx, [edx+40h]
.text:00407C82                 mov     ebx, [ecx+4]
.text:00407C85                 dec     ebx
.text:00407C86                 test    ebx, ebx
.text:00407C88                 mov     [ecx+4], ebx
.text:00407C8B                 js      short loc_407CB7
.text:00407C8D                 mov     esi, [edx+40h]
.text:00407C90                 mov     byte ptr [esi], 0Ah
.text:00407C93                 inc     dword ptr [edx+40h]
.text:00407C96
.text:00407C96 loc_407C96:                             ; CODE XREF: sub_407BC4+103↓j
.text:00407C96                 mov     ecx, ds:_iob
.text:00407C9C                 add     ecx, 40h ; '@'
.text:00407C9F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407CA2                 call    fflush
.text:00407CA7                 test    ebp, ebp
.text:00407CA9                 jnz     loc_407D56
.text:00407CAF
.text:00407CAF loc_407CAF:                             ; CODE XREF: sub_407BC4+173↓j
.text:00407CAF                                         ; sub_407BC4+187↓j
.text:00407CAF                 add     esp, 1Ch
.text:00407CB2                 pop     ebx
.text:00407CB3                 pop     esi
.text:00407CB4                 pop     edi
.text:00407CB5                 pop     ebp
.text:00407CB6                 retn
.text:00407CB7 ; ---------------------------------------------------------------------------
.text:00407CB7
.text:00407CB7 loc_407CB7:                             ; CODE XREF: sub_407BC4+C7↑j
.text:00407CB7                 mov     [esp+28h+Format], ecx ; File
.text:00407CBB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00407CC2                 call    _flsbuf
.text:00407CC7                 jmp     short loc_407C96
.text:00407CC7 ; ---------------------------------------------------------------------------
.text:00407CC9                 align 10h
.text:00407CD0
.text:00407CD0 loc_407CD0:                             ; CODE XREF: sub_407BC4+B3↑j
.text:00407CD0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00407CD3                 call    strerror
.text:00407CD8                 test    eax, eax
.text:00407CDA                 jz      short loc_407CFE
.text:00407CDC
.text:00407CDC loc_407CDC:                             ; CODE XREF: sub_407BC4+13F↓j
.text:00407CDC                 mov     [esp+28h+ArgList], eax
.text:00407CE0                 mov     edi, ds:_iob
.text:00407CE6                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:00407CEE                 add     edi, 40h ; '@'
.text:00407CF1                 mov     [esp+28h+Stream], edi ; Stream
.text:00407CF4                 call    fprintf
.text:00407CF9                 jmp     loc_407C79
.text:00407CFE ; ---------------------------------------------------------------------------
.text:00407CFE
.text:00407CFE loc_407CFE:                             ; CODE XREF: sub_407BC4+116↑j
.text:00407CFE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00407D03                 jmp     short loc_407CDC
.text:00407D05 ; ---------------------------------------------------------------------------
.text:00407D05
.text:00407D05 loc_407D05:                             ; CODE XREF: sub_407BC4+5D↑j
.text:00407D05                 mov     [esp+28h+Format], (offset loc_407BCB+1) ; Format
.text:00407D0D                 mov     ecx, ds:_iob
.text:00407D13                 mov     edx, ds:dword_4124E0
.text:00407D19                 add     ecx, 40h ; '@'
.text:00407D1C                 mov     [esp+28h+ArgList], edx
.text:00407D20                 mov     [esp+28h+Stream], ecx ; Stream
.text:00407D23                 call    fprintf
.text:00407D28                 jmp     loc_407C29
.text:00407D28 ; ---------------------------------------------------------------------------
.text:00407D2D                 align 10h
.text:00407D30
.text:00407D30 loc_407D30:                             ; CODE XREF: sub_407BC4+33↑j
.text:00407D30                 mov     eax, ds:Str1
.text:00407D35                 cmp     ebx, eax
.text:00407D37                 jz      loc_407CAF
.text:00407D3D                 mov     [esp+28h+Format], ebx ; Str2
.text:00407D41                 mov     [esp+28h+Stream], eax ; Str1
.text:00407D44                 call    strcmp
.text:00407D49                 test    eax, eax
.text:00407D4B                 jz      loc_407CAF
.text:00407D51                 jmp     loc_407BFD
.text:00407D56 ; ---------------------------------------------------------------------------
.text:00407D56
.text:00407D56 loc_407D56:                             ; CODE XREF: sub_407BC4+E5↑j
.text:00407D56                 mov     [esp+28h+Stream], ebp ; Code
.text:00407D59                 call    exit
.text:00407D59 sub_407BC4      endp ; sp-analysis failed
.text:00407D59
.text:00407D59 ; ---------------------------------------------------------------------------
.text:00407D5E                 align 10h
.text:00407D60
.text:00407D60 ; =============== S U B R O U T I N E =======================================
.text:00407D60
.text:00407D60
.text:00407D60 ; int __cdecl sub_407D60(char *, int)
.text:00407D60 sub_407D60      proc near               ; CODE XREF: sub_4027F0+5E↑p
.text:00407D60                                         ; sub_4034F0+16A↑p
.text:00407D60
.text:00407D60 hNamedPipe      = dword ptr -0Ch
.text:00407D60 Str             = dword ptr -8
.text:00407D60 var_4           = dword ptr -4
.text:00407D60 arg_0           = dword ptr  4
.text:00407D60 arg_4           = dword ptr  8
.text:00407D60
.text:00407D60                 sub     esp, 0Ch
.text:00407D63                 mov     edx, [esp+0Ch+arg_4]
.text:00407D67                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:00407D6E                 mov     [esp+0Ch+var_4], edx ; int
.text:00407D72                 mov     edx, [esp+0Ch+arg_0]
.text:00407D76                 mov     [esp+0Ch+Str], edx ; Str
.text:00407D7A                 call    sub_407FD0
.text:00407D7F                 add     esp, 0Ch
.text:00407D82                 retn
.text:00407D82 sub_407D60      endp
.text:00407D82
.text:00407D82 ; ---------------------------------------------------------------------------
.text:00407D83 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00407D83                                         ; DATA XREF: .text:00407E6E↓o
.text:00407D96 aModeO          db 'mode:      %#o',0Ah,0
.text:00407D96                                         ; DATA XREF: .text:00407E84↓o
.text:00407DA6 aUidLd          db 'uid:       %ld',0Ah,0
.text:00407DA6                                         ; DATA XREF: .text:00407E97↓o
.text:00407DB6 aGidLd          db 'gid:       %ld',0Ah,0
.text:00407DB6                                         ; DATA XREF: .text:00407EAA↓o
.text:00407DC6 aDevLu          db 'dev:       %lu',0Ah,0
.text:00407DC6                                         ; DATA XREF: .text:00407EBD↓o
.text:00407DD6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00407DD6                                         ; DATA XREF: .text:00407ED0↓o
.text:00407DE6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00407DE6                                         ; DATA XREF: .text:00407EE6↓o
.text:00407DF8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00407DF8                                         ; DATA XREF: .text:00407EFD↓o
.text:00407E07 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00407E07                                         ; DATA XREF: .text:00407F13↓o
.text:00407E19 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00407E19                                         ; DATA XREF: .text:00407F39↓o
.text:00407E2C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:00407E2C                                         ; DATA XREF: .text:00407F5B↓o
.text:00407E3F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:00407E3F                                         ; DATA XREF: .text:00407F7D↓o
.text:00407E53                 align 10h
.text:00407E60                 push    ebx
.text:00407E61                 sub     esp, 18h
.text:00407E64                 mov     ebx, [esp+20h]
.text:00407E68                 mov     edx, [ebx+8]
.text:00407E6B                 mov     ecx, [ebx+0Ch]
.text:00407E6E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00407E75                 mov     [esp+4], edx
.text:00407E79                 mov     [esp+8], ecx
.text:00407E7D                 call    printf
.text:00407E82                 mov     ecx, [ebx]
.text:00407E84                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:00407E8B                 mov     [esp+4], ecx
.text:00407E8F                 call    printf
.text:00407E94                 mov     edx, [ebx+1Ch]
.text:00407E97                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:00407E9E                 mov     [esp+4], edx
.text:00407EA2                 call    printf
.text:00407EA7                 mov     ecx, [ebx+20h]
.text:00407EAA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00407EB1                 mov     [esp+4], ecx
.text:00407EB5                 call    printf
.text:00407EBA                 mov     edx, [ebx+10h]
.text:00407EBD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00407EC4                 mov     [esp+4], edx
.text:00407EC8                 call    printf
.text:00407ECD                 mov     ecx, [ebx+18h]
.text:00407ED0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00407ED7                 mov     [esp+4], ecx
.text:00407EDB                 call    printf
.text:00407EE0                 mov     edx, [ebx+30h]
.text:00407EE3                 mov     ecx, [ebx+34h]
.text:00407EE6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:00407EED                 mov     [esp+4], edx
.text:00407EF1                 mov     [esp+8], ecx
.text:00407EF5                 call    printf
.text:00407EFA                 mov     ecx, [ebx+50h]
.text:00407EFD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00407F04                 mov     [esp+4], ecx
.text:00407F08                 call    printf
.text:00407F0D                 mov     ecx, [ebx+5Ch]
.text:00407F10                 mov     edx, [ebx+58h]
.text:00407F13                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:00407F1A                 mov     [esp+8], ecx
.text:00407F1E                 mov     [esp+4], edx
.text:00407F22                 call    printf
.text:00407F27                 lea     edx, [ebx+38h]
.text:00407F2A                 mov     [esp], edx
.text:00407F2D                 call    ctime
.text:00407F32                 mov     [esp+8], eax
.text:00407F36                 mov     ecx, [ebx+38h]
.text:00407F39                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00407F40                 mov     [esp+4], ecx
.text:00407F44                 call    printf
.text:00407F49                 lea     edx, [ebx+40h]
.text:00407F4C                 mov     [esp], edx
.text:00407F4F                 call    ctime
.text:00407F54                 mov     [esp+8], eax
.text:00407F58                 mov     ecx, [ebx+40h]
.text:00407F5B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00407F62                 mov     [esp+4], ecx
.text:00407F66                 call    printf
.text:00407F6B                 lea     edx, [ebx+48h]
.text:00407F6E                 mov     [esp], edx
.text:00407F71                 call    ctime
.text:00407F76                 mov     [esp+8], eax
.text:00407F7A                 mov     edx, [ebx+48h]
.text:00407F7D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00407F84                 mov     [esp+4], edx
.text:00407F88                 call    printf
.text:00407F8D                 add     esp, 18h
.text:00407F90                 xor     eax, eax
.text:00407F92                 pop     ebx
.text:00407F93                 retn
.text:00407F93 ; ---------------------------------------------------------------------------
.text:00407F94                 align 10h
.text:00407FA0 ; const char aFxstat64BadFil[]
.text:00407FA0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00407FA0                                         ; DATA XREF: sub_407FD0+7B↓o
.text:00407FC4                 align 10h
.text:00407FD0
.text:00407FD0 ; =============== S U B R O U T I N E =======================================
.text:00407FD0
.text:00407FD0
.text:00407FD0 ; int __cdecl sub_407FD0(HANDLE hNamedPipe, char *Str, int)
.text:00407FD0 sub_407FD0      proc near               ; CODE XREF: sub_407D60+1A↑p
.text:00407FD0                                         ; .text:0040A769↓p
.text:00407FD0
.text:00407FD0 hFindFile       = dword ptr -1A0h
.text:00407FD0 var_19C         = dword ptr -19Ch
.text:00407FD0 hLibModule      = dword ptr -198h
.text:00407FD0 lpFindFileData  = dword ptr -194h
.text:00407FD0 lpModuleName    = dword ptr -18Ch
.text:00407FD0 lpProcName      = dword ptr -188h
.text:00407FD0 var_184         = dword ptr -184h
.text:00407FD0 var_180         = dword ptr -180h
.text:00407FD0 var_17C         = dword ptr -17Ch
.text:00407FD0 var_178         = dword ptr -178h
.text:00407FD0 var_174         = dword ptr -174h
.text:00407FD0 var_170         = dword ptr -170h
.text:00407FD0 var_16C         = dword ptr -16Ch
.text:00407FD0 var_168         = dword ptr -168h
.text:00407FD0 var_164         = dword ptr -164h
.text:00407FD0 hModule         = dword ptr -160h
.text:00407FD0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00407FD0 FileHandle      = dword ptr -1Ch
.text:00407FD0 var_18          = dword ptr -18h
.text:00407FD0 var_10          = dword ptr -10h
.text:00407FD0 var_C           = dword ptr -0Ch
.text:00407FD0 lpFileName      = dword ptr -8
.text:00407FD0 var_4           = dword ptr -4
.text:00407FD0 hNamedPipe      = dword ptr  4
.text:00407FD0 Str             = dword ptr  8
.text:00407FD0 arg_8           = dword ptr  0Ch
.text:00407FD0
.text:00407FD0                 sub     esp, 1Ch
.text:00407FD3                 mov     edx, [esp+1Ch+Str]
.text:00407FD7                 mov     [esp+1Ch+var_C], ebx
.text:00407FDB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:00407FDF                 mov     [esp+1Ch+lpFileName], esi
.text:00407FE3                 mov     esi, [esp+1Ch+arg_8]
.text:00407FE7                 test    ebx, ebx
.text:00407FE9                 mov     [esp+1Ch+var_4], edi
.text:00407FED                 jnz     short loc_408027
.text:00407FEF                 test    edx, edx
.text:00407FF1                 js      short loc_408047
.text:00407FF3                 test    esi, esi
.text:00407FF5                 jz      short loc_408027
.text:00407FF7                 cld
.text:00407FF8                 mov     eax, ebx
.text:00407FFA                 mov     edi, esi
.text:00407FFC                 mov     ecx, 18h
.text:00408001                 rep stosd
.text:00408003                 mov     [esp+1Ch+Str], esi
.text:00408007                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040800A                 call    _get_osfhandle
.text:0040800F                 mov     [esp+1Ch+hNamedPipe], eax
.text:00408013                 mov     ebx, [esp+1Ch+var_C]
.text:00408017                 mov     esi, [esp+1Ch+lpFileName]
.text:0040801B                 mov     edi, [esp+1Ch+var_4]
.text:0040801F                 add     esp, 1Ch
.text:00408022                 jmp     loc_4083B0
.text:00408027 ; ---------------------------------------------------------------------------
.text:00408027
.text:00408027 loc_408027:                             ; CODE XREF: sub_407FD0+1D↑j
.text:00408027                                         ; sub_407FD0+25↑j
.text:00408027                 call    _errno
.text:0040802C                 mov     dword ptr [eax], 16h
.text:00408032
.text:00408032 loc_408032:                             ; CODE XREF: sub_407FD0+92↓j
.text:00408032                 mov     ebx, [esp+1Ch+var_C]
.text:00408036                 mov     eax, 0FFFFFFFFh
.text:0040803B                 mov     esi, [esp+1Ch+lpFileName]
.text:0040803F                 mov     edi, [esp+1Ch+var_4]
.text:00408043                 add     esp, 1Ch
.text:00408046                 retn
.text:00408047 ; ---------------------------------------------------------------------------
.text:00408047
.text:00408047 loc_408047:                             ; CODE XREF: sub_407FD0+21↑j
.text:00408047                 mov     [esp+1Ch+var_18], edx
.text:0040804B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00408052                 call    printf
.text:00408057                 call    _errno
.text:0040805C                 mov     dword ptr [eax], 9
.text:00408062                 jmp     short loc_408032
.text:00408062 ; ---------------------------------------------------------------------------
.text:00408064                 align 20h
.text:00408080 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00408080                                         ; DATA XREF: .data:off_411064↓o
.text:00408094 ; const CHAR ModuleName[]
.text:00408094 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_407FD0+101↓o
.text:00408094                                         ; sub_407FD0+26C↓o ...
.text:004080A1 ; const CHAR ProcName[]
.text:004080A1 ProcName        db 'GetFileAttributesExA',0
.text:004080A1                                         ; DATA XREF: sub_407FD0+118↓o
.text:004080B6                 align 10h
.text:004080C0
.text:004080C0 loc_4080C0:                             ; CODE XREF: .text:00409264↓p
.text:004080C0                                         ; sub_409660+37↓p
.text:004080C0                 push    ebp
.text:004080C1                 push    edi
.text:004080C2                 push    esi
.text:004080C3                 push    ebx
.text:004080C4                 sub     esp, 17Ch
.text:004080CA                 mov     ebx, [esp+18Ch+Str]
.text:004080D1                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:004080D8                 call    GetModuleHandleA
.text:004080DD                 sub     esp, 4
.text:004080E0                 mov     [esp+18Ch+hModule], eax
.text:004080E4                 mov     edx, [esp+18Ch+hModule]
.text:004080E8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:004080F0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:004080F3                 call    GetProcAddress
.text:004080F8                 sub     esp, 8
.text:004080FB                 mov     ebp, eax
.text:004080FD                 mov     eax, [esp+18Ch+hNamedPipe]
.text:00408104                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00408107                 call    GetFileAttributesA
.text:0040810C                 sub     esp, 4
.text:0040810F                 mov     [esp+18Ch+var_164], eax
.text:00408113                 xor     eax, eax
.text:00408115                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040811A                 jz      short loc_408171
.text:0040811C                 cld
.text:0040811D                 mov     ecx, 50h ; 'P'
.text:00408122                 lea     esi, [esp+18Ch+FindFileData]
.text:00408126                 mov     edi, esi
.text:00408128                 test    ebp, ebp
.text:0040812A                 rep stosd
.text:0040812C                 mov     [esp+18Ch+var_170], 0
.text:00408134                 jz      short loc_408155
.text:00408136                 mov     [esp+18Ch+var_184], ebx
.text:0040813A                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:00408141                 mov     [esp+18Ch+lpProcName], 0
.text:00408149                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040814C                 call    ebp
.text:0040814E                 sub     esp, 0Ch
.text:00408151                 mov     [esp+198h+var_17C], eax
.text:00408155
.text:00408155 loc_408155:                             ; CODE XREF: sub_407FD0+164↑j
.text:00408155                 mov     eax, [esp+198h+var_17C]
.text:00408159                 test    eax, eax
.text:0040815B                 jz      short loc_408180
.text:0040815D
.text:0040815D loc_40815D:                             ; CODE XREF: sub_407FD0+221↓j
.text:0040815D                                         ; sub_407FD0+23B↓j
.text:0040815D                 mov     ebx, [esp+198h+var_16C]
.text:00408161                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:00408164                 call    FreeLibrary
.text:00408169                 sub     esp, 4
.text:0040816C                 mov     eax, 1
.text:00408171
.text:00408171 loc_408171:                             ; CODE XREF: sub_407FD0+14A↑j
.text:00408171                 add     esp, 17Ch
.text:00408177                 pop     ebx
.text:00408178                 pop     esi
.text:00408179                 pop     edi
.text:0040817A                 pop     ebp
.text:0040817B                 retn
.text:0040817B ; ---------------------------------------------------------------------------
.text:0040817C                 align 10h
.text:00408180
.text:00408180 loc_408180:                             ; CODE XREF: sub_407FD0+18B↑j
.text:00408180                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:00408184                 mov     edx, [esp+198h+lpFileName]
.text:0040818B                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:0040818E                 call    FindFirstFileA
.text:00408193                 sub     esp, 8
.text:00408196                 xor     ecx, ecx
.text:00408198                 cmp     eax, 0FFFFFFFFh
.text:0040819B                 setnz   cl
.text:0040819E                 mov     edi, [esp+198h+var_168]
.text:004081A2                 mov     [ebx], edi
.text:004081A4                 mov     esi, [esp+198h+hModule]
.text:004081A8                 mov     [esp+198h+var_17C], ecx
.text:004081AC                 mov     ecx, [esp+198h+var_164]
.text:004081B0                 mov     [ebx+8], esi
.text:004081B3                 mov     [ebx+4], ecx
.text:004081B6                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:004081BA                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:004081BE                 mov     [ebx+0Ch], ebp
.text:004081C1                 mov     [ebx+10h], edi
.text:004081C4                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:004081C8                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:004081CC                 mov     [ebx+18h], esi
.text:004081CF                 mov     [ebx+14h], ecx
.text:004081D2                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:004081D6                 mov     [ebx+1Ch], ebp
.text:004081D9                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:004081DD                 mov     [ebx+20h], edi
.text:004081E0                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:004081E3                 call    FindClose
.text:004081E8                 sub     esp, 4
.text:004081EB                 mov     esi, [esp+198h+var_17C]
.text:004081EF                 test    esi, esi
.text:004081F1                 jnz     loc_40815D
.text:004081F7                 cld
.text:004081F8                 mov     eax, [esp+198h+var_17C]
.text:004081FC                 mov     ecx, 9
.text:00408201                 mov     edi, ebx
.text:00408203                 rep stosd
.text:00408205                 mov     ebp, [esp+198h+var_170]
.text:00408209                 mov     [ebx], ebp
.text:0040820B                 jmp     loc_40815D
.text:0040820B ; ---------------------------------------------------------------------------
.text:00408210 ; const CHAR aFindfirstfilee[]
.text:00408210 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_407FD0+283↓o
.text:00408221 ; ---------------------------------------------------------------------------
.text:00408221
.text:00408221 loc_408221:                             ; DATA XREF: sub_407FD0:loc_4082BD↓o
.text:00408221                 pop     esp
.text:00408222                 sub     al, [eax]
.text:00408224                 lea     esi, [esi+0]
.text:0040822A                 lea     edi, [edi+0]
.text:00408230
.text:00408230 loc_408230:                             ; CODE XREF: .text:00409363↓p
.text:00408230                                         ; sub_409660+3FA↓p ...
.text:00408230                 push    ebp
.text:00408231                 push    edi
.text:00408232                 xor     edi, edi
.text:00408234                 push    esi
.text:00408235                 push    ebx
.text:00408236                 sub     esp, 17Ch
.text:0040823C                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:00408243                 call    LoadLibraryA
.text:00408248                 sub     esp, 4
.text:0040824B                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:0040824F                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:00408253                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040825B                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:0040825E                 call    GetProcAddress
.text:00408263                 sub     esp, 8
.text:00408266                 mov     edx, [esp+188h+Str]
.text:0040826D                 mov     [esp+188h+hModule], eax
.text:00408271                 mov     [esp+188h+lpProcName], edx ; Str
.text:00408274                 call    strlen
.text:00408279                 lea     edx, [eax+5]
.text:0040827C                 mov     ebx, eax
.text:0040827E                 mov     [esp+188h+lpProcName], edx ; Size
.text:00408281                 call    malloc
.text:00408286                 mov     esi, eax
.text:00408288                 test    esi, esi
.text:0040828A                 mov     eax, 1
.text:0040828F                 jz      loc_40836D
.text:00408295                 mov     [esp+188h+lpProcName], esi ; Destination
.text:00408298                 mov     ebp, [esp+188h+Str]
.text:0040829F                 mov     [esp+188h+var_184], ebp ; Source
.text:004082A3                 call    strcpy
.text:004082A8                 movzx   eax, byte ptr [ebx+esi-1]
.text:004082AD                 cmp     al, 2Fh ; '/'
.text:004082AF                 jz      loc_40839B
.text:004082B5                 cmp     al, 5Ch ; '\'
.text:004082B7                 jz      loc_40839B
.text:004082BD
.text:004082BD loc_4082BD:                             ; CODE XREF: sub_407FD0+3D0↓j
.text:004082BD                 mov     [esp+188h+var_184], offset loc_408221 ; Source
.text:004082C5                 mov     [esp+188h+lpProcName], esi ; Destination
.text:004082C8                 call    strcat
.text:004082CD                 mov     eax, [esp+188h+hModule]
.text:004082D1                 test    eax, eax
.text:004082D3                 jz      loc_408395
.text:004082D9                 mov     [esp+188h+var_174], 0
.text:004082E1                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:004082E5                 mov     [esp+188h+var_178], 0
.text:004082ED                 mov     [esp+188h+var_17C], 1
.text:004082F5                 mov     [esp+188h+var_180], ebp
.text:004082F9                 mov     [esp+188h+var_184], 0
.text:00408301                 mov     [esp+188h+lpProcName], esi
.text:00408304                 call    [esp+188h+hModule]
.text:00408308                 sub     esp, 18h
.text:0040830B                 mov     ebx, eax
.text:0040830D                 cmp     eax, 0FFFFFFFFh
.text:00408310                 jz      short loc_408378
.text:00408312                 lea     esi, [esi+0]
.text:00408319                 lea     edi, [edi+0]
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: sub_407FD0+369↓j
.text:00408320                                         ; sub_407FD0+3C1↓j
.text:00408320                 test    byte ptr [esp+1A0h+var_170], 10h
.text:00408325                 jz      short loc_408328
.text:00408327                 inc     edi
.text:00408328
.text:00408328 loc_408328:                             ; CODE XREF: sub_407FD0+355↑j
.text:00408328                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040832C                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040832F                 call    FindNextFileA
.text:00408334                 sub     esp, 8
.text:00408337                 test    eax, eax
.text:00408339                 jnz     short loc_408320
.text:0040833B                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040833E                 call    FindClose
.text:00408343                 sub     esp, 4
.text:00408346                 mov     esi, [esp+1A0h+var_174]
.text:0040834A                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:0040834D                 call    FreeLibrary
.text:00408352                 sub     esp, 4
.text:00408355                 mov     ebx, [esp+1A0h+var_10]
.text:0040835C                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:0040835F                 call    sub_40A800
.text:00408364                 test    eax, eax
.text:00408366                 jz      short loc_40836B
.text:00408368                 add     edi, 2
.text:0040836B
.text:0040836B loc_40836B:                             ; CODE XREF: sub_407FD0+396↑j
.text:0040836B                 mov     eax, edi
.text:0040836D
.text:0040836D loc_40836D:                             ; CODE XREF: sub_407FD0+2BF↑j
.text:0040836D                                         ; sub_407FD0+3C3↓j
.text:0040836D                 add     esp, 17Ch
.text:00408373                 pop     ebx
.text:00408374                 pop     esi
.text:00408375                 pop     edi
.text:00408376                 pop     ebp
.text:00408377                 retn
.text:00408378 ; ---------------------------------------------------------------------------
.text:00408378
.text:00408378 loc_408378:                             ; CODE XREF: sub_407FD0+340↑j
.text:00408378                                         ; sub_407FD0+3C9↓j
.text:00408378                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040837C                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:0040837F                 call    FindFirstFileA
.text:00408384                 mov     ebx, eax
.text:00408386                 sub     esp, 8
.text:00408389                 cmp     ebx, 0FFFFFFFFh
.text:0040838C                 mov     eax, 2
.text:00408391                 jnz     short loc_408320
.text:00408393                 jmp     short loc_40836D
.text:00408395 ; ---------------------------------------------------------------------------
.text:00408395
.text:00408395 loc_408395:                             ; CODE XREF: sub_407FD0+303↑j
.text:00408395                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:00408399                 jmp     short loc_408378
.text:0040839B ; ---------------------------------------------------------------------------
.text:0040839B
.text:0040839B loc_40839B:                             ; CODE XREF: sub_407FD0+2DF↑j
.text:0040839B                                         ; sub_407FD0+2E7↑j
.text:0040839B                 mov     byte ptr [ebx+esi-1], 0
.text:004083A0                 jmp     loc_4082BD
.text:004083A0 ; ---------------------------------------------------------------------------
.text:004083A5                 align 10h
.text:004083B0
.text:004083B0 loc_4083B0:                             ; CODE XREF: sub_407FD0+52↑j
.text:004083B0                                         ; sub_40D9B0-3E89↓p
.text:004083B0                 push    ebp
.text:004083B1                 mov     eax, 0FFFFFFFFh
.text:004083B6                 push    edi
.text:004083B7                 push    esi
.text:004083B8                 push    ebx
.text:004083B9                 sub     esp, 0DCh
.text:004083BF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:004083C6                 mov     ebp, [esp+0ECh+Str]
.text:004083CD                 cmp     esi, 0FFFFFFFFh
.text:004083D0                 jz      loc_408751
.text:004083D6                 cld
.text:004083D7                 xor     eax, eax
.text:004083D9                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:004083E0                 mov     ecx, 0Dh
.text:004083E5                 mov     edi, ebx
.text:004083E7                 rep stosd
.text:004083E9                 mov     dword ptr [ebp+18h], 1
.text:004083F0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:004083F3                 call    GetFileType
.text:004083F8                 sub     esp, 4
.text:004083FB                 xor     edx, edx
.text:004083FD                 cmp     eax, 2
.text:00408400                 jz      loc_408830
.text:00408406                 cmp     eax, 3
.text:00408409                 jz      loc_408820
.text:0040840F
.text:0040840F loc_40840F:                             ; CODE XREF: sub_407FD0+855↓j
.text:0040840F                                         ; sub_407FD0+865↓j
.text:0040840F                 or      [ebp+0], edx
.text:00408412                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:00408416                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00408419                 call    GetFileInformationByHandle
.text:0040841E                 sub     esp, 8
.text:00408421                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00408428                 test    ecx, ecx
.text:0040842A                 jnz     short loc_408460
.text:0040842C                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:00408433                 test    edx, edx
.text:00408435                 jnz     short loc_408460
.text:00408437                 mov     edx, [ebp+0]
.text:0040843A                 and     edx, 0F000h
.text:00408440                 cmp     edx, 1000h
.text:00408446                 jz      loc_4087B6
.text:0040844C
.text:0040844C loc_40844C:                             ; CODE XREF: sub_407FD0+839↓j
.text:0040844C                                         ; sub_407FD0+845↓j
.text:0040844C                 test    ecx, ecx
.text:0040844E                 jnz     short loc_408460
.text:00408450                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:00408457                 test    edx, edx
.text:00408459                 jz      loc_408794
.text:0040845F                 nop
.text:00408460
.text:00408460 loc_408460:                             ; CODE XREF: sub_407FD0+45A↑j
.text:00408460                                         ; sub_407FD0+465↑j ...
.text:00408460                 cld
.text:00408461                 mov     esi, ebx
.text:00408463                 mov     dword ptr [ebp+14h], 0
.text:0040846A                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:0040846E                 mov     ecx, 0Dh
.text:00408473                 rep movsd
.text:00408475                 xor     ebx, ebx
.text:00408477                 xor     edi, edi
.text:00408479                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:00408480                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:00408484                 or      edx, ebx
.text:00408486                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:0040848A                 mov     [ebp+8], edx
.text:0040848D                 or      edi, esi
.text:0040848F                 xor     edx, edx
.text:00408491                 mov     [ebp+0Ch], edi
.text:00408494                 test    bl, 10h
.text:00408497                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:0040849B                 setz    dl
.text:0040849E                 mov     [ebp+10h], esi
.text:004084A1                 dec     edx
.text:004084A2                 and     edx, 0FFFFC000h
.text:004084A8                 add     edx, 8000h
.text:004084AE                 or      edx, 124h
.text:004084B4                 test    bl, 1
.text:004084B7                 movzx   eax, dx
.text:004084BA                 jnz     short loc_4084C1
.text:004084BC                 or      eax, 92h
.text:004084C1
.text:004084C1 loc_4084C1:                             ; CODE XREF: sub_407FD0+4EA↑j
.text:004084C1                 or      [ebp+0], eax
.text:004084C4                 xor     edx, edx
.text:004084C6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:004084CA                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:004084CE                 mov     eax, edx
.text:004084D0                 xor     esi, esi
.text:004084D2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:004084D6                 mov     edi, ebx
.text:004084D8                 or      eax, edi
.text:004084DA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:004084DE                 mov     ebx, ecx
.text:004084E0                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:004084E4                 or      ebx, esi
.text:004084E6                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:004084EA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:004084EE                 xor     ebx, ebx
.text:004084F0                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:004084F4                 mov     [ebp+34h], esi
.text:004084F7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:004084FB                 mov     [ebp+18h], edi
.text:004084FE                 xor     edi, edi
.text:00408500                 or      esi, ebx
.text:00408502                 mov     [ebp+30h], ecx
.text:00408505                 or      edi, edx
.text:00408507                 mov     edx, esi
.text:00408509                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00408511                 sub     edx, 0D53E8000h
.text:00408517                 mov     ebx, edi
.text:00408519                 sbb     ebx, 19DB1DEh
.text:0040851F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00408523                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040852B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040852E                 call    sub_40F4C0
.text:00408533                 mov     ecx, eax
.text:00408535                 shr     eax, 1Fh
.text:00408538                 dec     eax
.text:00408539                 and     ecx, eax
.text:0040853B                 mov     [ebp+38h], ecx
.text:0040853E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:00408541                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:00408545                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040854D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00408555                 call    sub_40F900
.text:0040855A                 lea     ebx, [eax+eax*4]
.text:0040855D                 xor     ecx, ecx
.text:0040855F                 lea     esi, [ebx+ebx*4]
.text:00408562                 shl     esi, 2
.text:00408565                 mov     edi, esi
.text:00408567                 shr     edi, 1Fh
.text:0040856A                 dec     edi
.text:0040856B                 and     edi, esi
.text:0040856D                 mov     [ebp+3Ch], edi
.text:00408570                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:00408574                 xor     edi, edi
.text:00408576                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:0040857E                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:00408582                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040858A                 or      esi, ecx
.text:0040858C                 or      edi, edx
.text:0040858E                 mov     edx, esi
.text:00408590                 mov     ecx, edi
.text:00408592                 sub     edx, 0D53E8000h
.text:00408598                 sbb     ecx, 19DB1DEh
.text:0040859E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:004085A2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:004085A5                 call    sub_40F4C0
.text:004085AA                 mov     ebx, eax
.text:004085AC                 shr     eax, 1Fh
.text:004085AF                 dec     eax
.text:004085B0                 and     ebx, eax
.text:004085B2                 mov     [ebp+48h], ebx
.text:004085B5                 xor     ebx, ebx
.text:004085B7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:004085BA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:004085BE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:004085C6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:004085CE                 call    sub_40F900
.text:004085D3                 lea     ecx, [eax+eax*4]
.text:004085D6                 lea     esi, [ecx+ecx*4]
.text:004085D9                 shl     esi, 2
.text:004085DC                 mov     edi, esi
.text:004085DE                 shr     edi, 1Fh
.text:004085E1                 dec     edi
.text:004085E2                 and     edi, esi
.text:004085E4                 mov     [ebp+4Ch], edi
.text:004085E7                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:004085EB                 xor     edi, edi
.text:004085ED                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:004085F5                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:004085F9                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00408601                 or      esi, ebx
.text:00408603                 or      edi, edx
.text:00408605                 mov     edx, esi
.text:00408607                 mov     ebx, edi
.text:00408609                 sub     edx, 0D53E8000h
.text:0040860F                 sbb     ebx, 19DB1DEh
.text:00408615                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00408619                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040861C                 call    sub_40F4C0
.text:00408621                 mov     ecx, eax
.text:00408623                 shr     eax, 1Fh
.text:00408626                 dec     eax
.text:00408627                 and     ecx, eax
.text:00408629                 mov     [ebp+40h], ecx
.text:0040862C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:00408630                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00408638                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00408640                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:00408643                 call    sub_40F900
.text:00408648                 mov     dword ptr [ebp+50h], 200h
.text:0040864F                 lea     ebx, [eax+eax*4]
.text:00408652                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00408656                 lea     edx, [ebx+ebx*4]
.text:00408659                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040865D                 shl     edx, 2
.text:00408660                 mov     ecx, edx
.text:00408662                 shr     ecx, 1Fh
.text:00408665                 dec     ecx
.text:00408666                 and     ecx, edx
.text:00408668                 test    edi, edi
.text:0040866A                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040866E                 mov     [ebp+44h], ecx
.text:00408671                 js      loc_408787
.text:00408677
.text:00408677 loc_408677:                             ; CODE XREF: sub_407FD0+7BF↓j
.text:00408677                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:0040867B                 xor     esi, esi
.text:0040867D                 mov     ecx, eax
.text:0040867F                 shrd    ecx, edx, 9
.text:00408683                 mov     ebx, edx
.text:00408685                 mov     eax, esi
.text:00408687                 and     edi, 1FFh
.text:0040868D                 sar     ebx, 9
.text:00408690                 or      eax, edi
.text:00408692                 jz      short loc_40869A
.text:00408694                 add     ecx, 1
.text:00408697                 adc     ebx, 0
.text:0040869A
.text:0040869A loc_40869A:                             ; CODE XREF: sub_407FD0+6C2↑j
.text:0040869A                 mov     [ebp+5Ch], ebx
.text:0040869D                 mov     esi, dword_411060
.text:004086A3                 xor     edi, edi
.text:004086A5                 mov     [ebp+58h], ecx
.text:004086A8                 mov     ebx, dword_411060
.text:004086AE                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:004086B2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:004086B6                 mov     [ebp+50h], ebx
.text:004086B9                 shr     ebx, 9
.text:004086BC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:004086C0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:004086C4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:004086C8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:004086CB                 call    sub_40F4C0
.text:004086D0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:004086D4                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:004086D8                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:004086DC                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:004086E0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:004086E4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:004086E8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:004086F0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:004086F4                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:004086F7                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:004086FB                 call    sub_40F900
.text:00408700                 mov     ebx, edx
.text:00408702                 or      ebx, eax
.text:00408704                 jz      short loc_408760
.text:00408706                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040870A                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040870E                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00408712                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:00408716                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040871A                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0040871F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:00408723                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:00408728                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040872C                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:00408730                 mov     ebx, edx
.text:00408732                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:00408736                 mov     esi, eax
.text:00408738                 mov     eax, ebx
.text:0040873A                 imul    ecx, edx
.text:0040873D                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00408741                 imul    edx, edi
.text:00408744                 add     eax, ecx
.text:00408746                 lea     edi, [edx+eax]
.text:00408749
.text:00408749 loc_408749:                             ; CODE XREF: sub_407FD0+7B5↓j
.text:00408749                 mov     [ebp+58h], esi
.text:0040874C                 xor     eax, eax
.text:0040874E                 mov     [ebp+5Ch], edi
.text:00408751
.text:00408751 loc_408751:                             ; CODE XREF: sub_407FD0+400↑j
.text:00408751                 add     esp, 0DCh
.text:00408757                 pop     ebx
.text:00408758                 pop     esi
.text:00408759                 pop     edi
.text:0040875A                 pop     ebp
.text:0040875B                 retn
.text:0040875B ; ---------------------------------------------------------------------------
.text:0040875C                 align 10h
.text:00408760
.text:00408760 loc_408760:                             ; CODE XREF: sub_407FD0+734↑j
.text:00408760                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:00408764                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:00408768                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040876C                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00408770                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00408774                 imul    ebx, edi
.text:00408777                 mov     esi, eax
.text:00408779                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040877D                 add     edx, ebx
.text:0040877F                 imul    ecx, eax
.text:00408782                 lea     edi, [ecx+edx]
.text:00408785                 jmp     short loc_408749
.text:00408787 ; ---------------------------------------------------------------------------
.text:00408787
.text:00408787 loc_408787:                             ; CODE XREF: sub_407FD0+6A1↑j
.text:00408787                 add     eax, 1FFh
.text:0040878C                 adc     edx, 0
.text:0040878F                 jmp     loc_408677
.text:00408794 ; ---------------------------------------------------------------------------
.text:00408794
.text:00408794 loc_408794:                             ; CODE XREF: sub_407FD0+489↑j
.text:00408794                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00408797                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040879E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:004087A2                 call    GetFileSize
.text:004087A7                 sub     esp, 8
.text:004087AA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:004087B1                 jmp     loc_408460
.text:004087B6 ; ---------------------------------------------------------------------------
.text:004087B6
.text:004087B6 loc_4087B6:                             ; CODE XREF: sub_407FD0+476↑j
.text:004087B6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:004087BE                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:004087C2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:004087CA                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:004087CE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:004087D6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:004087DE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:004087E6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:004087E9                 call    PeekNamedPipe
.text:004087EE                 sub     esp, 18h
.text:004087F1                 test    eax, eax
.text:004087F3                 jz      short loc_40880E
.text:004087F5                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:004087F9                 xor     eax, eax
.text:004087FB                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:00408802                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:00408809                 jmp     loc_40844C
.text:0040880E ; ---------------------------------------------------------------------------
.text:0040880E
.text:0040880E loc_40880E:                             ; CODE XREF: sub_407FD0+823↑j
.text:0040880E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00408815                 jmp     loc_40844C
.text:00408815 ; ---------------------------------------------------------------------------
.text:0040881A                 align 10h
.text:00408820
.text:00408820 loc_408820:                             ; CODE XREF: sub_407FD0+439↑j
.text:00408820                 mov     edx, 1000h
.text:00408825                 jmp     loc_40840F
.text:00408825 ; ---------------------------------------------------------------------------
.text:0040882A                 align 10h
.text:00408830
.text:00408830 loc_408830:                             ; CODE XREF: sub_407FD0+430↑j
.text:00408830                 mov     edx, 2000h
.text:00408835                 jmp     loc_40840F
.text:00408835 sub_407FD0      endp ; sp-analysis failed
.text:00408835
.text:00408835 ; ---------------------------------------------------------------------------
.text:0040883A aLnk            db '.lnk',0             ; DATA XREF: sub_408880+E0↓o
.text:0040883A                                         ; .text:00408F2A↓o ...
.text:0040883F ; const CHAR aKernel32[]
.text:0040883F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_408880+12D↓o
.text:0040883F                                         ; .text:004095DB↓o
.text:00408848 ; const CHAR aGetcompressedf[]
.text:00408848 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00408848                                         ; DATA XREF: sub_408880+13E↓o
.text:00408848                                         ; .text:004095EC↓o
.text:0040885F ; const CHAR aGetbinarytypea[]
.text:0040885F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_408880+333↓o
.text:0040885F                                         ; .text:00408F86↓o ...
.text:0040886E ; const char aPathext[]
.text:0040886E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_408880:loc_408C67↓o
.text:0040886E                                         ; .text:loc_409030↓o ...
.text:00408876                 align 10h
.text:00408880
.text:00408880 ; =============== S U B R O U T I N E =======================================
.text:00408880
.text:00408880
.text:00408880 ; int __cdecl sub_408880(char *String1, int)
.text:00408880 sub_408880      proc near               ; CODE XREF: sub_409660+3CD↓p
.text:00408880                                         ; sub_40D9B0-3E6B↓p
.text:00408880
.text:00408880 Str             = dword ptr -6Ch
.text:00408880 lpProcName      = dword ptr -68h
.text:00408880 var_64          = dword ptr -64h
.text:00408880 var_60          = dword ptr -60h
.text:00408880 var_5C          = dword ptr -5Ch
.text:00408880 var_4C          = dword ptr -4Ch
.text:00408880 var_48          = dword ptr -48h
.text:00408880 var_44          = dword ptr -44h
.text:00408880 var_40          = dword ptr -40h
.text:00408880 var_3C          = dword ptr -3Ch
.text:00408880 var_38          = dword ptr -38h
.text:00408880 lpRootPathName  = dword ptr -30h
.text:00408880 var_2C          = byte ptr -2Ch
.text:00408880 var_28          = dword ptr -28h
.text:00408880 var_24          = dword ptr -24h
.text:00408880 var_20          = dword ptr -20h
.text:00408880 var_1C          = dword ptr -1Ch
.text:00408880 var_18          = byte ptr -18h
.text:00408880 String1         = dword ptr  4
.text:00408880 arg_4           = dword ptr  8
.text:00408880
.text:00408880                 push    ebp
.text:00408881                 push    edi
.text:00408882                 push    esi
.text:00408883                 push    ebx
.text:00408884                 sub     esp, 5Ch
.text:00408887                 mov     edx, [esp+6Ch+String1]
.text:0040888B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040888E                 call    sub_40A430
.text:00408893                 mov     [esp+6Ch+Str], eax
.text:00408896                 call    sub_40A000
.text:0040889B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040889F                 test    eax, eax
.text:004088A1                 jz      loc_408AD3
.text:004088A7                 mov     [esp+6Ch+Str], eax ; Str
.text:004088AA                 call    strlen
.text:004088AF                 mov     edx, [esp+6Ch+arg_4]
.text:004088B3                 mov     ebx, eax
.text:004088B5                 mov     esi, [edx+0Ch]
.text:004088B8                 mov     edi, [edx+8]
.text:004088BB                 mov     eax, esi
.text:004088BD                 or      eax, edi
.text:004088BF                 jz      loc_408CE0
.text:004088C5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004088C9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004088CC                 call    GetDriveTypeA
.text:004088D1                 sub     esp, 4
.text:004088D4                 cmp     eax, 4
.text:004088D7                 jz      loc_408CE0
.text:004088DD
.text:004088DD loc_4088DD:                             ; CODE XREF: sub_408880+48A↓j
.text:004088DD                                         ; sub_408880+4B2↓j
.text:004088DD                 mov     edx, [esp+6Ch+arg_4]
.text:004088E1                 mov     esi, [edx+14h]
.text:004088E4                 mov     edi, [edx+10h]
.text:004088E7                 mov     ecx, esi
.text:004088E9                 or      ecx, edi
.text:004088EB                 jnz     short loc_408915
.text:004088ED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:004088F1                 xor     esi, esi
.text:004088F3                 xor     edi, edi
.text:004088F5                 test    ebp, ebp
.text:004088F7                 jz      short loc_408907
.text:004088F9                 movzx   ebx, byte ptr [ebp+0]
.text:004088FD                 test    bl, bl
.text:004088FF                 mov     cl, bl
.text:00408901                 jnz     loc_408C91
.text:00408907
.text:00408907 loc_408907:                             ; CODE XREF: sub_408880+77↑j
.text:00408907                 xor     eax, eax
.text:00408909                 xor     edx, edx
.text:0040890B
.text:0040890B loc_40890B:                             ; CODE XREF: sub_408880+458↓j
.text:0040890B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040890F                 mov     [ebp+10h], eax
.text:00408912                 mov     [ebp+14h], edx
.text:00408915
.text:00408915 loc_408915:                             ; CODE XREF: sub_408880+6B↑j
.text:00408915                 mov     edi, [esp+6Ch+String1]
.text:00408919                 xor     ebx, ebx
.text:0040891B                 test    edi, edi
.text:0040891D                 jz      loc_408B93
.text:00408923                 mov     esi, [esp+6Ch+String1]
.text:00408927                 cmp     byte ptr [esi], 0
.text:0040892A                 jnz     loc_408BA0
.text:00408930
.text:00408930 loc_408930:                             ; CODE XREF: sub_408880+38C↓j
.text:00408930                                         ; sub_408880+397↓j
.text:00408930                 mov     ebp, [esp+6Ch+String1]
.text:00408934                 test    ebp, ebp
.text:00408936                 jz      loc_408B93
.text:0040893C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408944                 mov     edi, [esp+6Ch+String1]
.text:00408948                 mov     [esp+6Ch+Str], edi ; Str
.text:0040894B                 call    strrchr
.text:00408950                 test    eax, eax
.text:00408952                 jz      loc_408B93
.text:00408958                 cld
.text:00408959                 mov     ecx, 5
.text:0040895E                 mov     esi, eax
.text:00408960                 mov     edi, offset aLnk ; ".lnk"
.text:00408965                 repe cmpsb
.text:00408967                 setz    cl
.text:0040896A                 movzx   eax, cl
.text:0040896D                 lea     esi, [esi+0]
.text:00408970
.text:00408970 loc_408970:                             ; CODE XREF: sub_408880+315↓j
.text:00408970                 test    eax, eax
.text:00408972                 jz      short loc_40897A
.text:00408974                 or      ebx, 0A000h
.text:0040897A
.text:0040897A loc_40897A:                             ; CODE XREF: sub_408880+F2↑j
.text:0040897A                 mov     esi, [esp+6Ch+arg_4]
.text:0040897E                 xor     ecx, ecx
.text:00408980                 mov     edi, ds:dword_4121C0
.text:00408986                 or      [esi], ebx
.text:00408988                 mov     ebx, [esi+14h]
.text:0040898B                 mov     ebp, [esi+10h]
.text:0040898E                 mov     eax, ebx
.text:00408990                 xor     eax, ecx
.text:00408992                 xor     ebp, edi
.text:00408994                 or      eax, ebp
.text:00408996                 jnz     loc_408B20
.text:0040899C
.text:0040899C loc_40899C:                             ; CODE XREF: sub_408880+30E↓j
.text:0040899C                 mov     ecx, dword_411060
.text:004089A2                 xor     esi, esi
.text:004089A4                 xor     edi, edi
.text:004089A6                 mov     edx, [esp+6Ch+arg_4]
.text:004089AA                 mov     [edx+50h], ecx
.text:004089AD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004089B4                 call    LoadLibraryA
.text:004089B9                 sub     esp, 4
.text:004089BC                 mov     ebp, eax
.text:004089BE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004089C6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004089C9                 call    GetProcAddress
.text:004089CE                 sub     esp, 8
.text:004089D1                 test    eax, eax
.text:004089D3                 jz      short loc_408A08
.text:004089D5                 mov     ebx, [esp+6Ch+String1]
.text:004089D9                 lea     esi, [esp+6Ch+var_2C]
.text:004089DD                 mov     [esp+6Ch+lpProcName], esi
.text:004089E1                 mov     [esp+6Ch+Str], ebx
.text:004089E4                 call    eax
.text:004089E6                 sub     esp, 8
.text:004089E9                 mov     ebx, eax
.text:004089EB                 cmp     eax, 0FFFFFFFFh
.text:004089EE                 jz      loc_408B09
.text:004089F4
.text:004089F4 loc_4089F4:                             ; CODE XREF: sub_408880+29A↓j
.text:004089F4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:004089F8                 mov     ecx, ebx
.text:004089FA                 xor     edi, edi
.text:004089FC                 xor     ebx, ebx
.text:004089FE                 mov     edx, esi
.text:00408A00                 mov     esi, ecx
.text:00408A02                 or      esi, edi
.text:00408A04                 mov     edi, ebx
.text:00408A06                 or      edi, edx
.text:00408A08
.text:00408A08 loc_408A08:                             ; CODE XREF: sub_408880+153↑j
.text:00408A08                                         ; sub_408880+294↓j
.text:00408A08                 test    ebp, ebp
.text:00408A0A                 jz      short loc_408A17
.text:00408A0C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00408A0F                 call    FreeLibrary
.text:00408A14                 sub     esp, 4
.text:00408A17
.text:00408A17 loc_408A17:                             ; CODE XREF: sub_408880+18A↑j
.text:00408A17                 mov     ebp, edi
.text:00408A19                 mov     edx, ebp
.text:00408A1B                 mov     edi, esi
.text:00408A1D                 or      edx, esi
.text:00408A1F                 jnz     short loc_408A2B
.text:00408A21                 mov     eax, [esp+6Ch+arg_4]
.text:00408A25                 mov     edi, [eax+30h]
.text:00408A28                 mov     ebp, [eax+34h]
.text:00408A2B
.text:00408A2B loc_408A2B:                             ; CODE XREF: sub_408880+19F↑j
.text:00408A2B                 mov     [esp+6Ch+lpProcName], ebp
.text:00408A2F                 mov     ebx, dword_411060
.text:00408A35                 xor     esi, esi
.text:00408A37                 mov     [esp+6Ch+var_60], esi
.text:00408A3B                 mov     [esp+6Ch+Str], edi
.text:00408A3E                 mov     [esp+6Ch+var_64], ebx
.text:00408A42                 call    sub_40F4C0
.text:00408A47                 mov     [esp+6Ch+var_3C], eax
.text:00408A4B                 mov     ecx, dword_411060
.text:00408A51                 mov     [esp+6Ch+lpProcName], ebp
.text:00408A55                 mov     [esp+6Ch+var_38], edx
.text:00408A59                 shr     ecx, 9
.text:00408A5C                 mov     [esp+6Ch+var_44], ecx
.text:00408A60                 mov     [esp+6Ch+var_40], 0
.text:00408A68                 mov     [esp+6Ch+var_64], ebx
.text:00408A6C                 mov     [esp+6Ch+var_60], esi
.text:00408A70                 mov     [esp+6Ch+Str], edi
.text:00408A73                 call    sub_40F900
.text:00408A78                 mov     ebp, edx
.text:00408A7A                 or      ebp, eax
.text:00408A7C                 jz      short loc_408AE0
.text:00408A7E                 mov     ebp, [esp+6Ch+var_3C]
.text:00408A82                 mov     esi, [esp+6Ch+var_38]
.text:00408A86                 mov     eax, [esp+6Ch+var_44]
.text:00408A8A                 mov     [esp+6Ch+var_4C], ebp
.text:00408A8E                 mov     ecx, [esp+6Ch+var_40]
.text:00408A92                 mov     ebx, [esp+6Ch+var_44]
.text:00408A96                 add     [esp+6Ch+var_4C], 1
.text:00408A9B                 mov     [esp+6Ch+var_48], esi
.text:00408A9F                 mov     edi, [esp+6Ch+var_4C]
.text:00408AA3                 adc     [esp+6Ch+var_48], 0
.text:00408AA8                 mul     [esp+6Ch+var_4C]
.text:00408AAC                 imul    ecx, edi
.text:00408AAF                 mov     esi, eax
.text:00408AB1                 mov     eax, [esp+6Ch+var_48]
.text:00408AB5                 add     edx, ecx
.text:00408AB7                 imul    ebx, eax
.text:00408ABA                 lea     edi, [ebx+edx]
.text:00408ABD
.text:00408ABD loc_408ABD:                             ; CODE XREF: sub_408880+287↓j
.text:00408ABD                 mov     ebx, [esp+6Ch+arg_4]
.text:00408AC1                 mov     [ebx+58h], esi
.text:00408AC4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00408AC8                 mov     [ebx+5Ch], edi
.text:00408ACB                 mov     [esp+6Ch+Str], esi ; Block
.text:00408ACE                 call    free
.text:00408AD3
.text:00408AD3 loc_408AD3:                             ; CODE XREF: sub_408880+21↑j
.text:00408AD3                 add     esp, 5Ch
.text:00408AD6                 xor     eax, eax
.text:00408AD8                 pop     ebx
.text:00408AD9                 pop     esi
.text:00408ADA                 pop     edi
.text:00408ADB                 pop     ebp
.text:00408ADC                 retn
.text:00408ADC ; ---------------------------------------------------------------------------
.text:00408ADD                 align 10h
.text:00408AE0
.text:00408AE0 loc_408AE0:                             ; CODE XREF: sub_408880+1FC↑j
.text:00408AE0                 mov     eax, [esp+6Ch+var_3C]
.text:00408AE4                 mov     edi, [esp+6Ch+var_40]
.text:00408AE8                 mov     ecx, [esp+6Ch+var_3C]
.text:00408AEC                 mul     [esp+6Ch+var_44]
.text:00408AF0                 mov     ebx, [esp+6Ch+var_44]
.text:00408AF4                 imul    ecx, edi
.text:00408AF7                 mov     ebp, edx
.text:00408AF9                 mov     esi, eax
.text:00408AFB                 mov     edx, [esp+6Ch+var_38]
.text:00408AFF                 add     ebp, ecx
.text:00408B01                 imul    ebx, edx
.text:00408B04                 lea     edi, [ebx+ebp]
.text:00408B07                 jmp     short loc_408ABD
.text:00408B09 ; ---------------------------------------------------------------------------
.text:00408B09
.text:00408B09 loc_408B09:                             ; CODE XREF: sub_408880+16E↑j
.text:00408B09                 call    GetLastError
.text:00408B0E                 xor     esi, esi
.text:00408B10                 xor     edi, edi
.text:00408B12                 test    eax, eax
.text:00408B14                 jnz     loc_408A08
.text:00408B1A                 jmp     loc_4089F4
.text:00408B1A ; ---------------------------------------------------------------------------
.text:00408B1F                 align 10h
.text:00408B20
.text:00408B20 loc_408B20:                             ; CODE XREF: sub_408880+116↑j
.text:00408B20                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00408B24                 lea     ecx, [esp+6Ch+var_20]
.text:00408B28                 lea     ebx, [esp+6Ch+var_1C]
.text:00408B2C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00408B30                 lea     edi, [esp+6Ch+var_24]
.text:00408B34                 lea     ebp, [esp+6Ch+var_28]
.text:00408B38                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:00408B3C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00408B40                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00408B44                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00408B47                 call    sub_40AE50
.text:00408B4C                 test    eax, eax
.text:00408B4E                 jnz     short loc_408B70
.text:00408B50                 mov     [esp+6Ch+var_28], 1
.text:00408B58                 mov     [esp+6Ch+var_24], 200h
.text:00408B60                 mov     [esp+6Ch+var_20], 0
.text:00408B68                 mov     [esp+6Ch+var_1C], 0
.text:00408B70
.text:00408B70 loc_408B70:                             ; CODE XREF: sub_408880+2CE↑j
.text:00408B70                 mov     ebp, [esp+6Ch+var_24]
.text:00408B74                 mov     edi, [esp+6Ch+var_28]
.text:00408B78                 mov     eax, [esp+6Ch+arg_4]
.text:00408B7C                 imul    ebp, edi
.text:00408B7F                 mov     esi, [eax+10h]
.text:00408B82                 mov     dword_411060, ebp
.text:00408B88                 mov     ds:dword_4121C0, esi
.text:00408B8E                 jmp     loc_40899C
.text:00408B93 ; ---------------------------------------------------------------------------
.text:00408B93
.text:00408B93 loc_408B93:                             ; CODE XREF: sub_408880+9D↑j
.text:00408B93                                         ; sub_408880+B6↑j ...
.text:00408B93                 xor     eax, eax
.text:00408B95                 jmp     loc_408970
.text:00408B95 ; ---------------------------------------------------------------------------
.text:00408B9A                 align 10h
.text:00408BA0
.text:00408BA0 loc_408BA0:                             ; CODE XREF: sub_408880+AA↑j
.text:00408BA0                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:00408BA7                 xor     ebp, ebp
.text:00408BA9                 call    GetModuleHandleA
.text:00408BAE                 sub     esp, 4
.text:00408BB1                 mov     edi, eax
.text:00408BB3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408BBB                 mov     [esp+6Ch+Str], eax ; hModule
.text:00408BBE                 call    GetProcAddress
.text:00408BC3                 sub     esp, 8
.text:00408BC6                 mov     edx, eax
.text:00408BC8                 test    eax, eax
.text:00408BCA                 jz      short loc_408BE4
.text:00408BCC                 mov     eax, [esp+6Ch+String1]
.text:00408BD0                 lea     ecx, [esp+6Ch+var_18]
.text:00408BD4                 mov     [esp+6Ch+lpProcName], ecx
.text:00408BD8                 mov     [esp+6Ch+Str], eax
.text:00408BDB                 call    edx
.text:00408BDD                 sub     esp, 8
.text:00408BE0                 test    eax, eax
.text:00408BE2                 jnz     short loc_408C48
.text:00408BE4
.text:00408BE4 loc_408BE4:                             ; CODE XREF: sub_408880+34A↑j
.text:00408BE4                 mov     edx, ds:Str
.text:00408BEA                 test    edx, edx
.text:00408BEC                 jz      short loc_408C67
.text:00408BEE
.text:00408BEE loc_408BEE:                             ; CODE XREF: sub_408880+3FA↓j
.text:00408BEE                                         ; sub_408880+40C↓j
.text:00408BEE                 mov     eax, [esp+6Ch+String1]
.text:00408BF2                 test    eax, eax
.text:00408BF4                 jz      short loc_408BFF
.text:00408BF6                 mov     esi, [esp+6Ch+String1]
.text:00408BFA                 cmp     byte ptr [esi], 0
.text:00408BFD                 jnz     short loc_408C1C
.text:00408BFF
.text:00408BFF loc_408BFF:                             ; CODE XREF: sub_408880+374↑j
.text:00408BFF                                         ; sub_408880+3B0↓j ...
.text:00408BFF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00408C02                 call    FreeLibrary
.text:00408C07                 sub     esp, 4
.text:00408C0A                 test    ebp, ebp
.text:00408C0C                 jz      loc_408930
.text:00408C12                 mov     ebx, 49h ; 'I'
.text:00408C17                 jmp     loc_408930
.text:00408C1C ; ---------------------------------------------------------------------------
.text:00408C1C
.text:00408C1C loc_408C1C:                             ; CODE XREF: sub_408880+37D↑j
.text:00408C1C                 mov     [esp+6Ch+Str], esi ; Str
.text:00408C1F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00408C27                 call    strrchr
.text:00408C2C                 test    eax, eax
.text:00408C2E                 mov     esi, eax
.text:00408C30                 jz      short loc_408BFF
.text:00408C32                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00408C36                 mov     ecx, ds:Str
.text:00408C3C                 mov     [esp+6Ch+Str], ecx ; Str
.text:00408C3F                 call    strstr
.text:00408C44                 test    eax, eax
.text:00408C46                 jz      short loc_408C4F
.text:00408C48
.text:00408C48 loc_408C48:                             ; CODE XREF: sub_408880+362↑j
.text:00408C48                                         ; sub_408880+3E5↓j
.text:00408C48                 mov     ebp, 1
.text:00408C4D                 jmp     short loc_408BFF
.text:00408C4F ; ---------------------------------------------------------------------------
.text:00408C4F
.text:00408C4F loc_408C4F:                             ; CODE XREF: sub_408880+3C6↑j
.text:00408C4F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00408C53                 mov     edx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:00408C59                 mov     [esp+6Ch+Str], edx ; Str
.text:00408C5C                 call    strstr
.text:00408C61                 test    eax, eax
.text:00408C63                 jz      short loc_408BFF
.text:00408C65                 jmp     short loc_408C48
.text:00408C67 ; ---------------------------------------------------------------------------
.text:00408C67
.text:00408C67 loc_408C67:                             ; CODE XREF: sub_408880+36C↑j
.text:00408C67                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:00408C6E                 call    getenv
.text:00408C73                 mov     ds:Str, eax
.text:00408C78                 test    eax, eax
.text:00408C7A                 jnz     loc_408BEE
.text:00408C80                 mov     esi, off_411064 ; ".com;.exe;.bat;.cmd"
.text:00408C86                 mov     ds:Str, esi
.text:00408C8C                 jmp     loc_408BEE
.text:00408C91 ; ---------------------------------------------------------------------------
.text:00408C91
.text:00408C91 loc_408C91:                             ; CODE XREF: sub_408880+81↑j
.text:00408C91                                         ; sub_408880+452↓j
.text:00408C91                 shld    edi, esi, 8
.text:00408C95                 movsx   eax, cl
.text:00408C98                 shl     esi, 8
.text:00408C9B                 cdq
.text:00408C9C                 add     esi, eax
.text:00408C9E                 adc     edi, edx
.text:00408CA0                 mov     edx, edi
.text:00408CA2                 xor     ebx, ebx
.text:00408CA4                 and     edx, 0FF000000h
.text:00408CAA                 mov     eax, edx
.text:00408CAC                 or      eax, ebx
.text:00408CAE                 jz      short loc_408CC9
.text:00408CB0                 mov     ecx, edx
.text:00408CB2                 xor     eax, eax
.text:00408CB4                 shr     ecx, 10h
.text:00408CB7                 mov     edx, esi
.text:00408CB9                 xor     edx, ecx
.text:00408CBB                 mov     ecx, edi
.text:00408CBD                 xor     ecx, eax
.text:00408CBF                 mov     esi, edx
.text:00408CC1                 mov     edi, ecx
.text:00408CC3                 and     edi, 0FFFFFFh
.text:00408CC9
.text:00408CC9 loc_408CC9:                             ; CODE XREF: sub_408880+42E↑j
.text:00408CC9                 inc     ebp
.text:00408CCA                 movzx   ebx, byte ptr [ebp+0]
.text:00408CCE                 test    bl, bl
.text:00408CD0                 mov     cl, bl
.text:00408CD2                 jnz     short loc_408C91
.text:00408CD4                 mov     eax, esi
.text:00408CD6                 mov     edx, edi
.text:00408CD8                 jmp     loc_40890B
.text:00408CD8 ; ---------------------------------------------------------------------------
.text:00408CDD                 align 10h
.text:00408CE0
.text:00408CE0 loc_408CE0:                             ; CODE XREF: sub_408880+3F↑j
.text:00408CE0                                         ; sub_408880+57↑j
.text:00408CE0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00408CE4                 mov     ebp, [esp+6Ch+String1]
.text:00408CE8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:00408CEC                 mov     [esp+6Ch+Str], ebp ; String1
.text:00408CEF                 call    _stricmp
.text:00408CF4                 test    eax, eax
.text:00408CF6                 jnz     short loc_408D10
.text:00408CF8                 mov     ebx, [esp+6Ch+arg_4]
.text:00408CFC                 mov     dword ptr [ebx+8], 5
.text:00408D03                 mov     dword ptr [ebx+0Ch], 50000h
.text:00408D0A                 jmp     loc_4088DD
.text:00408D0A ; ---------------------------------------------------------------------------
.text:00408D0F                 align 10h
.text:00408D10
.text:00408D10 loc_408D10:                             ; CODE XREF: sub_408880+476↑j
.text:00408D10                 mov     ebp, [esp+6Ch+String1]
.text:00408D14                 xor     esi, esi
.text:00408D16                 xor     edi, edi
.text:00408D18                 add     ebp, ebx
.text:00408D1A                 jz      short loc_408D24
.text:00408D1C                 movzx   ecx, byte ptr [ebp+0]
.text:00408D20                 test    cl, cl
.text:00408D22                 jnz     short loc_408D37
.text:00408D24
.text:00408D24 loc_408D24:                             ; CODE XREF: sub_408880+49A↑j
.text:00408D24                 xor     eax, eax
.text:00408D26                 xor     edx, edx
.text:00408D28
.text:00408D28 loc_408D28:                             ; CODE XREF: sub_408880+4FE↓j
.text:00408D28                 mov     ebp, [esp+6Ch+arg_4]
.text:00408D2C                 mov     [ebp+8], eax
.text:00408D2F                 mov     [ebp+0Ch], edx
.text:00408D32                 jmp     loc_4088DD
.text:00408D37 ; ---------------------------------------------------------------------------
.text:00408D37
.text:00408D37 loc_408D37:                             ; CODE XREF: sub_408880+4A2↑j
.text:00408D37                                         ; sub_408880+4F8↓j
.text:00408D37                 shld    edi, esi, 8
.text:00408D3B                 movsx   eax, cl
.text:00408D3E                 shl     esi, 8
.text:00408D41                 cdq
.text:00408D42                 add     esi, eax
.text:00408D44                 adc     edi, edx
.text:00408D46                 mov     edx, edi
.text:00408D48                 xor     ebx, ebx
.text:00408D4A                 and     edx, 0FF000000h
.text:00408D50                 mov     eax, edx
.text:00408D52                 or      eax, ebx
.text:00408D54                 jz      short loc_408D6F
.text:00408D56                 mov     ecx, edx
.text:00408D58                 xor     eax, eax
.text:00408D5A                 shr     ecx, 10h
.text:00408D5D                 mov     edx, esi
.text:00408D5F                 xor     edx, ecx
.text:00408D61                 mov     ecx, edi
.text:00408D63                 xor     ecx, eax
.text:00408D65                 mov     esi, edx
.text:00408D67                 mov     edi, ecx
.text:00408D69                 and     edi, 0FFFFFFh
.text:00408D6F
.text:00408D6F loc_408D6F:                             ; CODE XREF: sub_408880+4D4↑j
.text:00408D6F                 inc     ebp
.text:00408D70                 movzx   ebx, byte ptr [ebp+0]
.text:00408D74                 test    bl, bl
.text:00408D76                 mov     cl, bl
.text:00408D78                 jnz     short loc_408D37
.text:00408D7A                 mov     eax, esi
.text:00408D7C                 mov     edx, edi
.text:00408D7E                 jmp     short loc_408D28
.text:00408D7E sub_408880      endp
.text:00408D7E
.text:00408D80
.text:00408D80 ; =============== S U B R O U T I N E =======================================
.text:00408D80
.text:00408D80
.text:00408D80 ; int __cdecl sub_408D80(LPCSTR)
.text:00408D80 sub_408D80      proc near               ; CODE XREF: sub_40A550+CA↓p
.text:00408D80
.text:00408D80 lpRootPathName  = dword ptr -83Ch
.text:00408D80 lpVolumeNameBuffer= dword ptr -838h
.text:00408D80 nVolumeNameSize = dword ptr -834h
.text:00408D80 lpVolumeSerialNumber= dword ptr -830h
.text:00408D80 lpMaximumComponentLength= dword ptr -82Ch
.text:00408D80 lpFileSystemFlags= dword ptr -828h
.text:00408D80 lpFileSystemNameBuffer= dword ptr -824h
.text:00408D80 nFileSystemNameSize= dword ptr -820h
.text:00408D80 VolumeSerialNumber= dword ptr -818h
.text:00408D80 MaximumComponentLength= dword ptr -814h
.text:00408D80 FileSystemFlags = dword ptr -810h
.text:00408D80 FileSystemNameBuffer= byte ptr -80Ch
.text:00408D80 VolumeNameBuffer= byte ptr -40Ch
.text:00408D80 var_4           = dword ptr -4
.text:00408D80 arg_0           = dword ptr  4
.text:00408D80
.text:00408D80                 sub     esp, 83Ch
.text:00408D86                 mov     [esp+83Ch+var_4], ebx
.text:00408D8D                 mov     ebx, [esp+83Ch+arg_0]
.text:00408D94                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00408D97                 call    sub_40A430
.text:00408D9C                 mov     [esp+83Ch+lpRootPathName], eax
.text:00408D9F                 call    sub_40A000
.text:00408DA4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00408DA7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:00408DAB                 mov     ebx, eax
.text:00408DAD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00408DB1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00408DB5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00408DB9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:00408DBD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00408DC1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00408DC5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00408DCC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00408DD0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00408DD4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00408DDC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00408DE4                 call    GetVolumeInformationA
.text:00408DE9                 sub     esp, 20h
.text:00408DEC                 test    eax, eax
.text:00408DEE                 setz    cl
.text:00408DF1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00408DF4                 movzx   edx, cl
.text:00408DF7                 dec     edx
.text:00408DF8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00408DFC                 call    free
.text:00408E01                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00408E05                 mov     ebx, [esp+83Ch+var_4]
.text:00408E0C                 add     esp, 83Ch
.text:00408E12                 retn
.text:00408E12 sub_408D80      endp
.text:00408E12
.text:00408E12 ; ---------------------------------------------------------------------------
.text:00408E13                 align 10h
.text:00408E20                 push    ebp
.text:00408E21                 push    edi
.text:00408E22                 xor     edi, edi
.text:00408E24                 push    esi
.text:00408E25                 xor     esi, esi
.text:00408E27                 push    ebx
.text:00408E28                 mov     ebp, [esp+14h]
.text:00408E2C                 test    ebp, ebp
.text:00408E2E                 jz      short loc_408E38
.text:00408E30                 movzx   ecx, byte ptr [ebp+0]
.text:00408E34                 test    cl, cl
.text:00408E36                 jnz     short loc_408E41
.text:00408E38
.text:00408E38 loc_408E38:                             ; CODE XREF: .text:00408E2E↑j
.text:00408E38                 xor     eax, eax
.text:00408E3A                 xor     edx, edx
.text:00408E3C
.text:00408E3C loc_408E3C:                             ; CODE XREF: .text:00408E88↓j
.text:00408E3C                 pop     ebx
.text:00408E3D                 pop     esi
.text:00408E3E                 pop     edi
.text:00408E3F                 pop     ebp
.text:00408E40                 retn
.text:00408E41 ; ---------------------------------------------------------------------------
.text:00408E41
.text:00408E41 loc_408E41:                             ; CODE XREF: .text:00408E36↑j
.text:00408E41                                         ; .text:00408E82↓j
.text:00408E41                 shld    edi, esi, 8
.text:00408E45                 movsx   eax, cl
.text:00408E48                 shl     esi, 8
.text:00408E4B                 cdq
.text:00408E4C                 add     esi, eax
.text:00408E4E                 adc     edi, edx
.text:00408E50                 mov     edx, edi
.text:00408E52                 xor     ebx, ebx
.text:00408E54                 and     edx, 0FF000000h
.text:00408E5A                 mov     eax, edx
.text:00408E5C                 or      eax, ebx
.text:00408E5E                 jz      short loc_408E79
.text:00408E60                 mov     ecx, edx
.text:00408E62                 xor     eax, eax
.text:00408E64                 shr     ecx, 10h
.text:00408E67                 mov     edx, esi
.text:00408E69                 xor     edx, ecx
.text:00408E6B                 mov     ecx, edi
.text:00408E6D                 xor     ecx, eax
.text:00408E6F                 mov     esi, edx
.text:00408E71                 mov     edi, ecx
.text:00408E73                 and     edi, 0FFFFFFh
.text:00408E79
.text:00408E79 loc_408E79:                             ; CODE XREF: .text:00408E5E↑j
.text:00408E79                 inc     ebp
.text:00408E7A                 movzx   ebx, byte ptr [ebp+0]
.text:00408E7E                 test    bl, bl
.text:00408E80                 mov     cl, bl
.text:00408E82                 jnz     short loc_408E41
.text:00408E84                 mov     eax, esi
.text:00408E86                 mov     edx, edi
.text:00408E88                 jmp     short loc_408E3C
.text:00408E88 ; ---------------------------------------------------------------------------
.text:00408E8A                 align 10h
.text:00408E90                 sub     esp, 2Ch
.text:00408E93                 lea     edx, [esp+24h]
.text:00408E97                 lea     ecx, [esp+28h]
.text:00408E9B                 mov     [esp+0Ch], edx
.text:00408E9F                 lea     edx, [esp+1Ch]
.text:00408EA3                 mov     [esp+4], edx
.text:00408EA7                 mov     edx, [esp+30h]
.text:00408EAB                 mov     [esp+10h], ecx
.text:00408EAF                 lea     ecx, [esp+20h]
.text:00408EB3                 mov     [esp+8], ecx
.text:00408EB7                 mov     [esp], edx
.text:00408EBA                 call    sub_40AE50
.text:00408EBF                 test    eax, eax
.text:00408EC1                 jnz     short loc_408EE3
.text:00408EC3                 mov     dword ptr [esp+1Ch], 1
.text:00408ECB                 mov     dword ptr [esp+20h], 200h
.text:00408ED3                 mov     dword ptr [esp+24h], 0
.text:00408EDB                 mov     dword ptr [esp+28h], 0
.text:00408EE3
.text:00408EE3 loc_408EE3:                             ; CODE XREF: .text:00408EC1↑j
.text:00408EE3                 mov     eax, [esp+20h]
.text:00408EE7                 mov     ecx, [esp+1Ch]
.text:00408EEB                 add     esp, 2Ch
.text:00408EEE                 imul    eax, ecx
.text:00408EF1                 retn
.text:00408EF1 ; ---------------------------------------------------------------------------
.text:00408EF2                 align 10h
.text:00408F00                 sub     esp, 1Ch
.text:00408F03                 mov     eax, [esp+20h]
.text:00408F07                 mov     [esp+14h], esi
.text:00408F0B                 mov     [esp+18h], edi
.text:00408F0F                 test    eax, eax
.text:00408F11                 jz      short loc_408F50
.text:00408F13                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408F1B                 mov     [esp], eax
.text:00408F1E                 call    strrchr
.text:00408F23                 test    eax, eax
.text:00408F25                 jz      short loc_408F50
.text:00408F27                 cld
.text:00408F28                 mov     esi, eax
.text:00408F2A                 mov     edi, offset aLnk ; ".lnk"
.text:00408F2F                 mov     ecx, 5
.text:00408F34                 repe cmpsb
.text:00408F36                 setz    dl
.text:00408F39                 movzx   eax, dl
.text:00408F3C                 lea     esi, [esi+0]
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: .text:00408F52↓j
.text:00408F40                 mov     esi, [esp+14h]
.text:00408F44                 mov     edi, [esp+18h]
.text:00408F48                 add     esp, 1Ch
.text:00408F4B                 retn
.text:00408F4B ; ---------------------------------------------------------------------------
.text:00408F4C                 align 10h
.text:00408F50
.text:00408F50 loc_408F50:                             ; CODE XREF: .text:00408F11↑j
.text:00408F50                                         ; .text:00408F25↑j
.text:00408F50                 xor     eax, eax
.text:00408F52                 jmp     short loc_408F40
.text:00408F52 ; ---------------------------------------------------------------------------
.text:00408F54                 align 10h
.text:00408F60                 sub     esp, 1Ch
.text:00408F63                 mov     [esp+10h], ebx
.text:00408F67                 mov     ebx, [esp+20h]
.text:00408F6B                 mov     [esp+14h], esi
.text:00408F6F                 mov     [esp+18h], edi
.text:00408F73                 xor     edi, edi
.text:00408F75                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00408F7C                 call    GetModuleHandleA
.text:00408F81                 sub     esp, 4
.text:00408F84                 mov     esi, eax
.text:00408F86                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00408F8E                 mov     [esp], eax
.text:00408F91                 call    GetProcAddress
.text:00408F96                 sub     esp, 8
.text:00408F99                 test    eax, eax
.text:00408F9B                 jz      short loc_408FB1
.text:00408F9D                 mov     [esp], ebx
.text:00408FA0                 lea     ecx, [esp+0Ch]
.text:00408FA4                 mov     [esp+4], ecx
.text:00408FA8                 call    eax
.text:00408FAA                 sub     esp, 8
.text:00408FAD                 test    eax, eax
.text:00408FAF                 jnz     short loc_409010
.text:00408FB1
.text:00408FB1 loc_408FB1:                             ; CODE XREF: .text:00408F9B↑j
.text:00408FB1                 mov     eax, ds:Str
.text:00408FB6                 test    eax, eax
.text:00408FB8                 jz      short loc_409030
.text:00408FBA
.text:00408FBA loc_408FBA:                             ; CODE XREF: .text:00409043↓j
.text:00408FBA                                         ; .text:00409055↓j
.text:00408FBA                 test    ebx, ebx
.text:00408FBC                 jz      short loc_408FC3
.text:00408FBE                 cmp     byte ptr [ebx], 0
.text:00408FC1                 jnz     short loc_408FE0
.text:00408FC3
.text:00408FC3 loc_408FC3:                             ; CODE XREF: .text:00408FBC↑j
.text:00408FC3                                         ; .text:00408FF4↓j ...
.text:00408FC3                 mov     [esp], esi
.text:00408FC6                 call    FreeLibrary
.text:00408FCB                 sub     esp, 4
.text:00408FCE                 mov     eax, edi
.text:00408FD0                 mov     ebx, [esp+10h]
.text:00408FD4                 mov     esi, [esp+14h]
.text:00408FD8                 mov     edi, [esp+18h]
.text:00408FDC                 add     esp, 1Ch
.text:00408FDF                 retn
.text:00408FE0 ; ---------------------------------------------------------------------------
.text:00408FE0
.text:00408FE0 loc_408FE0:                             ; CODE XREF: .text:00408FC1↑j
.text:00408FE0                 mov     [esp], ebx
.text:00408FE3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00408FEB                 call    strrchr
.text:00408FF0                 test    eax, eax
.text:00408FF2                 mov     ebx, eax
.text:00408FF4                 jz      short loc_408FC3
.text:00408FF6                 mov     [esp+4], eax
.text:00408FFA                 mov     ecx, ds:Str
.text:00409000                 mov     [esp], ecx
.text:00409003                 call    strstr
.text:00409008                 test    eax, eax
.text:0040900A                 jz      short loc_409017
.text:0040900C                 lea     esi, [esi+0]
.text:00409010
.text:00409010 loc_409010:                             ; CODE XREF: .text:00408FAF↑j
.text:00409010                                         ; .text:0040902D↓j
.text:00409010                 mov     edi, 1
.text:00409015                 jmp     short loc_408FC3
.text:00409017 ; ---------------------------------------------------------------------------
.text:00409017
.text:00409017 loc_409017:                             ; CODE XREF: .text:0040900A↑j
.text:00409017                 mov     [esp+4], ebx
.text:0040901B                 mov     ebx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:00409021                 mov     [esp], ebx
.text:00409024                 call    strstr
.text:00409029                 test    eax, eax
.text:0040902B                 jz      short loc_408FC3
.text:0040902D                 jmp     short loc_409010
.text:0040902D ; ---------------------------------------------------------------------------
.text:0040902F                 align 10h
.text:00409030
.text:00409030 loc_409030:                             ; CODE XREF: .text:00408FB8↑j
.text:00409030                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00409037                 call    getenv
.text:0040903C                 mov     ds:Str, eax
.text:00409041                 test    eax, eax
.text:00409043                 jnz     loc_408FBA
.text:00409049                 mov     edx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:0040904F                 mov     ds:Str, edx
.text:00409055                 jmp     loc_408FBA
.text:00409055 ; ---------------------------------------------------------------------------
.text:0040905A                 align 10h
.text:00409060                 sub     esp, 0Ch
.text:00409063                 mov     edx, [esp+10h]
.text:00409067                 mov     [esp], edx
.text:0040906A                 call    GetFileType
.text:0040906F                 sub     esp, 4
.text:00409072                 xor     edx, edx
.text:00409074                 cmp     eax, 2
.text:00409077                 jz      short loc_409090
.text:00409079                 cmp     eax, 3
.text:0040907C                 jz      short loc_409084
.text:0040907E
.text:0040907E loc_40907E:                             ; CODE XREF: .text:00409089↓j
.text:0040907E                                         ; .text:00409095↓j
.text:0040907E                 mov     eax, edx
.text:00409080                 add     esp, 0Ch
.text:00409083                 retn
.text:00409084 ; ---------------------------------------------------------------------------
.text:00409084
.text:00409084 loc_409084:                             ; CODE XREF: .text:0040907C↑j
.text:00409084                 mov     edx, 1000h
.text:00409089                 jmp     short loc_40907E
.text:00409089 ; ---------------------------------------------------------------------------
.text:0040908B                 align 10h
.text:00409090
.text:00409090 loc_409090:                             ; CODE XREF: .text:00409077↑j
.text:00409090                 mov     edx, 2000h
.text:00409095                 jmp     short loc_40907E
.text:00409095 ; ---------------------------------------------------------------------------
.text:00409097                 align 10h
.text:004090A0                 mov     ecx, [esp+4]
.text:004090A4                 xor     edx, edx
.text:004090A6                 test    cl, 10h
.text:004090A9                 setz    dl
.text:004090AC                 dec     edx
.text:004090AD                 and     edx, 0FFFFC000h
.text:004090B3                 add     edx, 8000h
.text:004090B9                 or      edx, 124h
.text:004090BF                 test    cl, 1
.text:004090C2                 movzx   eax, dx
.text:004090C5                 jnz     short locret_4090CC
.text:004090C7                 or      eax, 92h
.text:004090CC
.text:004090CC locret_4090CC:                          ; CODE XREF: .text:004090C5↑j
.text:004090CC                 retn
.text:004090CC ; ---------------------------------------------------------------------------
.text:004090CD                 align 10h
.text:004090D0                 sub     esp, 2Ch
.text:004090D3                 mov     [esp+20h], esi
.text:004090D7                 mov     esi, [esp+30h]
.text:004090DB                 mov     [esp+1Ch], ebx
.text:004090DF                 xor     ebx, ebx
.text:004090E1                 test    esi, esi
.text:004090E3                 mov     [esp+24h], edi
.text:004090E7                 mov     [esp+28h], ebp
.text:004090EB                 jz      short loc_409140
.text:004090ED                 cmp     byte ptr [esi], 0
.text:004090F0                 jnz     short loc_409144
.text:004090F2
.text:004090F2 loc_4090F2:                             ; CODE XREF: .text:004091AC↓j
.text:004090F2                                         ; .text:004091B7↓j
.text:004090F2                 test    esi, esi
.text:004090F4                 jz      short loc_409140
.text:004090F6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004090FE                 mov     [esp], esi
.text:00409101                 call    strrchr
.text:00409106                 test    eax, eax
.text:00409108                 jz      short loc_409140
.text:0040910A                 cld
.text:0040910B                 mov     ecx, 5
.text:00409110                 mov     esi, eax
.text:00409112                 mov     edi, offset aLnk ; ".lnk"
.text:00409117                 repe cmpsb
.text:00409119                 setz    cl
.text:0040911C                 movzx   eax, cl
.text:0040911F                 nop
.text:00409120
.text:00409120 loc_409120:                             ; CODE XREF: .text:00409142↓j
.text:00409120                 test    eax, eax
.text:00409122                 jz      short loc_40912A
.text:00409124                 or      ebx, 0A000h
.text:0040912A
.text:0040912A loc_40912A:                             ; CODE XREF: .text:00409122↑j
.text:0040912A                 mov     eax, ebx
.text:0040912C                 mov     esi, [esp+20h]
.text:00409130                 mov     ebx, [esp+1Ch]
.text:00409134                 mov     edi, [esp+24h]
.text:00409138                 mov     ebp, [esp+28h]
.text:0040913C                 add     esp, 2Ch
.text:0040913F                 retn
.text:00409140 ; ---------------------------------------------------------------------------
.text:00409140
.text:00409140 loc_409140:                             ; CODE XREF: .text:004090EB↑j
.text:00409140                                         ; .text:004090F4↑j ...
.text:00409140                 xor     eax, eax
.text:00409142                 jmp     short loc_409120
.text:00409144 ; ---------------------------------------------------------------------------
.text:00409144
.text:00409144 loc_409144:                             ; CODE XREF: .text:004090F0↑j
.text:00409144                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0040914B                 call    GetModuleHandleA
.text:00409150                 sub     esp, 4
.text:00409153                 mov     ebp, eax
.text:00409155                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040915D                 mov     [esp], eax
.text:00409160                 call    GetProcAddress
.text:00409165                 sub     esp, 8
.text:00409168                 test    eax, eax
.text:0040916A                 mov     dword ptr [esp+14h], 0
.text:00409172                 jz      short loc_409188
.text:00409174                 mov     [esp], esi
.text:00409177                 lea     ecx, [esp+18h]
.text:0040917B                 mov     [esp+4], ecx
.text:0040917F                 call    eax
.text:00409181                 sub     esp, 8
.text:00409184                 test    eax, eax
.text:00409186                 jnz     short loc_4091E8
.text:00409188
.text:00409188 loc_409188:                             ; CODE XREF: .text:00409172↑j
.text:00409188                 mov     edx, ds:Str
.text:0040918E                 test    edx, edx
.text:00409190                 jz      short loc_409210
.text:00409192
.text:00409192 loc_409192:                             ; CODE XREF: .text:00409223↓j
.text:00409192                                         ; .text:00409235↓j
.text:00409192                 test    esi, esi
.text:00409194                 jz      short loc_40919B
.text:00409196                 cmp     byte ptr [esi], 0
.text:00409199                 jnz     short loc_4091BC
.text:0040919B
.text:0040919B loc_40919B:                             ; CODE XREF: .text:00409194↑j
.text:0040919B                                         ; .text:004091D0↓j ...
.text:0040919B                 mov     [esp], ebp
.text:0040919E                 call    FreeLibrary
.text:004091A3                 sub     esp, 4
.text:004091A6                 mov     eax, [esp+14h]
.text:004091AA                 test    eax, eax
.text:004091AC                 jz      loc_4090F2
.text:004091B2                 mov     ebx, 49h ; 'I'
.text:004091B7                 jmp     loc_4090F2
.text:004091BC ; ---------------------------------------------------------------------------
.text:004091BC
.text:004091BC loc_4091BC:                             ; CODE XREF: .text:00409199↑j
.text:004091BC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004091C4                 mov     [esp], esi
.text:004091C7                 call    strrchr
.text:004091CC                 test    eax, eax
.text:004091CE                 mov     edi, eax
.text:004091D0                 jz      short loc_40919B
.text:004091D2                 mov     [esp+4], eax
.text:004091D6                 mov     edx, ds:Str
.text:004091DC                 mov     [esp], edx
.text:004091DF                 call    strstr
.text:004091E4                 test    eax, eax
.text:004091E6                 jz      short loc_4091F2
.text:004091E8
.text:004091E8 loc_4091E8:                             ; CODE XREF: .text:00409186↑j
.text:004091E8                                         ; .text:00409208↓j
.text:004091E8                 mov     dword ptr [esp+14h], 1
.text:004091F0                 jmp     short loc_40919B
.text:004091F2 ; ---------------------------------------------------------------------------
.text:004091F2
.text:004091F2 loc_4091F2:                             ; CODE XREF: .text:004091E6↑j
.text:004091F2                 mov     [esp+4], edi
.text:004091F6                 mov     edi, off_411064 ; ".com;.exe;.bat;.cmd"
.text:004091FC                 mov     [esp], edi
.text:004091FF                 call    strstr
.text:00409204                 test    eax, eax
.text:00409206                 jz      short loc_40919B
.text:00409208                 jmp     short loc_4091E8
.text:00409208 ; ---------------------------------------------------------------------------
.text:0040920A                 align 10h
.text:00409210
.text:00409210 loc_409210:                             ; CODE XREF: .text:00409190↑j
.text:00409210                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00409217                 call    getenv
.text:0040921C                 mov     ds:Str, eax
.text:00409221                 test    eax, eax
.text:00409223                 jnz     loc_409192
.text:00409229                 mov     ecx, off_411064 ; ".com;.exe;.bat;.cmd"
.text:0040922F                 mov     ds:Str, ecx
.text:00409235                 jmp     loc_409192
.text:00409235 ; ---------------------------------------------------------------------------
.text:0040923A                 align 10h
.text:00409240                 push    esi
.text:00409241                 push    ebx
.text:00409242                 sub     esp, 864h
.text:00409248                 mov     ebx, [esp+870h]
.text:0040924F                 lea     edx, [esp+830h]
.text:00409256                 mov     esi, [esp+874h]
.text:0040925D                 mov     [esp+4], edx
.text:00409261                 mov     [esp], ebx
.text:00409264                 call    loc_4080C0
.text:00409269                 xor     edx, edx
.text:0040926B                 test    eax, eax
.text:0040926D                 jz      loc_409355
.text:00409273                 mov     ecx, [esp+830h]
.text:0040927A                 test    cl, 10h
.text:0040927D                 mov     [esi], ecx
.text:0040927F                 mov     eax, [esp+834h]
.text:00409286                 mov     edx, [esp+838h]
.text:0040928D                 mov     [esi+4], eax
.text:00409290                 mov     [esi+8], edx
.text:00409293                 mov     eax, [esp+83Ch]
.text:0040929A                 mov     edx, [esp+840h]
.text:004092A1                 mov     [esi+0Ch], eax
.text:004092A4                 mov     [esi+10h], edx
.text:004092A7                 mov     edx, [esp+848h]
.text:004092AE                 mov     eax, [esp+844h]
.text:004092B5                 mov     [esi+18h], edx
.text:004092B8                 mov     [esi+14h], eax
.text:004092BB                 mov     edx, [esp+84Ch]
.text:004092C2                 mov     [esi+20h], edx
.text:004092C5                 mov     edx, [esp+850h]
.text:004092CC                 mov     [esi+24h], edx
.text:004092CF                 jnz     loc_409360
.text:004092D5                 mov     dword ptr [esi+28h], 1
.text:004092DC
.text:004092DC loc_4092DC:                             ; CODE XREF: .text:0040936B↓j
.text:004092DC                 mov     [esp], ebx
.text:004092DF                 call    sub_40A430
.text:004092E4                 mov     [esp], eax
.text:004092E7                 call    sub_40A000
.text:004092EC                 mov     [esp], eax
.text:004092EF                 lea     edx, [esp+30h]
.text:004092F3                 mov     ebx, eax
.text:004092F5                 mov     [esp+18h], edx
.text:004092F9                 lea     ecx, [esp+2Ch]
.text:004092FD                 lea     edx, [esp+28h]
.text:00409301                 mov     [esp+14h], ecx
.text:00409305                 lea     ecx, [esp+24h]
.text:00409309                 mov     [esp+10h], edx
.text:0040930D                 lea     edx, [esp+430h]
.text:00409314                 mov     [esp+0Ch], ecx
.text:00409318                 mov     [esp+4], edx
.text:0040931C                 mov     dword ptr [esp+1Ch], 400h
.text:00409324                 mov     dword ptr [esp+8], 400h
.text:0040932C                 call    GetVolumeInformationA
.text:00409331                 sub     esp, 20h
.text:00409334                 test    eax, eax
.text:00409336                 setz    cl
.text:00409339                 mov     [esp], ebx
.text:0040933C                 movzx   edx, cl
.text:0040933F                 dec     edx
.text:00409340                 and     [esp+24h], edx
.text:00409344                 call    free
.text:00409349                 mov     ecx, [esp+24h]
.text:0040934D                 mov     edx, 1
.text:00409352                 mov     [esi+1Ch], ecx
.text:00409355
.text:00409355 loc_409355:                             ; CODE XREF: .text:0040926D↑j
.text:00409355                 add     esp, 864h
.text:0040935B                 mov     eax, edx
.text:0040935D                 pop     ebx
.text:0040935E                 pop     esi
.text:0040935F                 retn
.text:00409360 ; ---------------------------------------------------------------------------
.text:00409360
.text:00409360 loc_409360:                             ; CODE XREF: .text:004092CF↑j
.text:00409360                 mov     [esp], ebx
.text:00409363                 call    loc_408230
.text:00409368                 mov     [esi+28h], eax
.text:0040936B                 jmp     loc_4092DC
.text:00409370 ; ---------------------------------------------------------------------------
.text:00409370                 push    ebp
.text:00409371                 xor     edx, edx
.text:00409373                 push    edi
.text:00409374                 push    esi
.text:00409375                 xor     esi, esi
.text:00409377                 push    ebx
.text:00409378                 sub     esp, 1Ch
.text:0040937B                 mov     ebx, [esp+5Ch]
.text:0040937F                 mov     ecx, [esp+30h]
.text:00409383                 mov     edi, [esp+60h]
.text:00409387                 or      esi, ebx
.text:00409389                 mov     eax, [esp+4Ch]
.text:0040938D                 or      edi, edx
.text:0040938F                 mov     ebx, [esp+64h]
.text:00409393                 xor     edx, edx
.text:00409395                 test    cl, 10h
.text:00409398                 setz    dl
.text:0040939B                 mov     [ebx+10h], eax
.text:0040939E                 mov     [ebx+8], edi
.text:004093A1                 mov     [ebx+0Ch], esi
.text:004093A4                 dec     edx
.text:004093A5                 and     edx, 0FFFFC000h
.text:004093AB                 mov     dword ptr [ebx+14h], 0
.text:004093B2                 add     edx, 8000h
.text:004093B8                 or      edx, 124h
.text:004093BE                 test    cl, 1
.text:004093C1                 movzx   eax, dx
.text:004093C4                 jnz     short loc_4093CB
.text:004093C6                 or      eax, 92h
.text:004093CB
.text:004093CB loc_4093CB:                             ; CODE XREF: .text:004093C4↑j
.text:004093CB                 mov     ebx, [esp+54h]
.text:004093CF                 xor     edx, edx
.text:004093D1                 xor     ebp, ebp
.text:004093D3                 mov     edi, [esp+50h]
.text:004093D7                 mov     ecx, [esp+64h]
.text:004093DB                 mov     esi, edi
.text:004093DD                 or      [ecx], eax
.text:004093DF                 mov     edi, ebx
.text:004093E1                 or      edi, ebp
.text:004093E3                 mov     ebp, edx
.text:004093E5                 mov     ebx, [esp+64h]
.text:004093E9                 or      ebp, esi
.text:004093EB                 mov     esi, [esp+58h]
.text:004093EF                 mov     edx, [esp+40h]
.text:004093F3                 mov     [ebx+30h], edi
.text:004093F6                 mov     [ebx+18h], esi
.text:004093F9                 mov     ecx, edx
.text:004093FB                 xor     esi, esi
.text:004093FD                 mov     [ebx+34h], ebp
.text:00409400                 xor     edx, edx
.text:00409402                 or      esi, ecx
.text:00409404                 mov     dword ptr [esp+8], 989680h
.text:0040940C                 mov     ebx, [esp+3Ch]
.text:00409410                 mov     ecx, esi
.text:00409412                 mov     dword ptr [esp+0Ch], 0
.text:0040941A                 or      ebx, edx
.text:0040941C                 mov     edx, ebx
.text:0040941E                 sub     edx, 0D53E8000h
.text:00409424                 sbb     ecx, 19DB1DEh
.text:0040942A                 mov     [esp+4], ecx
.text:0040942E                 mov     [esp], edx
.text:00409431                 call    sub_40F4C0
.text:00409436                 mov     edx, eax
.text:00409438                 mov     ecx, [esp+64h]
.text:0040943C                 shr     eax, 1Fh
.text:0040943F                 dec     eax
.text:00409440                 and     edx, eax
.text:00409442                 mov     [ecx+38h], edx
.text:00409445                 mov     [esp], ebx
.text:00409448                 mov     [esp+4], esi
.text:0040944C                 mov     dword ptr [esp+8], 989680h
.text:00409454                 mov     dword ptr [esp+0Ch], 0
.text:0040945C                 call    sub_40F900
.text:00409461                 lea     ecx, [eax+eax*4]
.text:00409464                 lea     esi, [ecx+ecx*4]
.text:00409467                 mov     eax, [esp+64h]
.text:0040946B                 shl     esi, 2
.text:0040946E                 mov     ebx, esi
.text:00409470                 shr     ebx, 1Fh
.text:00409473                 dec     ebx
.text:00409474                 and     ebx, esi
.text:00409476                 xor     esi, esi
.text:00409478                 mov     [eax+3Ch], ebx
.text:0040947B                 mov     edx, [esp+38h]
.text:0040947F                 mov     dword ptr [esp+8], 989680h
.text:00409487                 mov     ebx, [esp+34h]
.text:0040948B                 mov     dword ptr [esp+0Ch], 0
.text:00409493                 mov     ecx, edx
.text:00409495                 xor     edx, edx
.text:00409497                 or      ebx, edx
.text:00409499                 or      esi, ecx
.text:0040949B                 mov     edx, ebx
.text:0040949D                 sub     edx, 0D53E8000h
.text:004094A3                 mov     ecx, esi
.text:004094A5                 sbb     ecx, 19DB1DEh
.text:004094AB                 mov     [esp+4], ecx
.text:004094AF                 mov     [esp], edx
.text:004094B2                 call    sub_40F4C0
.text:004094B7                 mov     edx, eax
.text:004094B9                 mov     ecx, [esp+64h]
.text:004094BD                 shr     eax, 1Fh
.text:004094C0                 dec     eax
.text:004094C1                 and     edx, eax
.text:004094C3                 mov     [ecx+48h], edx
.text:004094C6                 mov     [esp], ebx
.text:004094C9                 mov     [esp+4], esi
.text:004094CD                 mov     dword ptr [esp+8], 989680h
.text:004094D5                 mov     dword ptr [esp+0Ch], 0
.text:004094DD                 call    sub_40F900
.text:004094E2                 lea     edx, [eax+eax*4]
.text:004094E5                 mov     ebx, [esp+64h]
.text:004094E9                 lea     ecx, [edx+edx*4]
.text:004094EC                 shl     ecx, 2
.text:004094EF                 mov     esi, ecx
.text:004094F1                 shr     esi, 1Fh
.text:004094F4                 dec     esi
.text:004094F5                 and     esi, ecx
.text:004094F7                 mov     [ebx+4Ch], esi
.text:004094FA                 mov     edx, [esp+48h]
.text:004094FE                 xor     esi, esi
.text:00409500                 mov     dword ptr [esp+8], 989680h
.text:00409508                 mov     ebx, [esp+44h]
.text:0040950C                 mov     dword ptr [esp+0Ch], 0
.text:00409514                 mov     ecx, edx
.text:00409516                 xor     edx, edx
.text:00409518                 or      ebx, edx
.text:0040951A                 or      esi, ecx
.text:0040951C                 mov     edx, ebx
.text:0040951E                 sub     edx, 0D53E8000h
.text:00409524                 mov     ecx, esi
.text:00409526                 sbb     ecx, 19DB1DEh
.text:0040952C                 mov     [esp+4], ecx
.text:00409530                 mov     [esp], edx
.text:00409533                 call    sub_40F4C0
.text:00409538                 mov     edx, eax
.text:0040953A                 mov     ecx, [esp+64h]
.text:0040953E                 shr     eax, 1Fh
.text:00409541                 dec     eax
.text:00409542                 and     edx, eax
.text:00409544                 mov     [ecx+40h], edx
.text:00409547                 mov     [esp+4], esi
.text:0040954B                 mov     dword ptr [esp+8], 989680h
.text:00409553                 mov     dword ptr [esp+0Ch], 0
.text:0040955B                 mov     [esp], ebx
.text:0040955E                 call    sub_40F900
.text:00409563                 lea     edx, [eax+eax*4]
.text:00409566                 lea     esi, [edx+edx*4]
.text:00409569                 mov     eax, [esp+64h]
.text:0040956D                 shl     esi, 2
.text:00409570                 mov     edx, ebp
.text:00409572                 mov     ecx, esi
.text:00409574                 mov     dword ptr [eax+50h], 200h
.text:0040957B                 shr     ecx, 1Fh
.text:0040957E                 dec     ecx
.text:0040957F                 and     ecx, esi
.text:00409581                 test    ebp, ebp
.text:00409583                 mov     [eax+44h], ecx
.text:00409586                 mov     eax, edi
.text:00409588                 js      short loc_4095C2
.text:0040958A
.text:0040958A loc_40958A:                             ; CODE XREF: .text:004095CA↓j
.text:0040958A                 xor     esi, esi
.text:0040958C                 mov     ebp, edi
.text:0040958E                 mov     ecx, eax
.text:00409590                 shrd    ecx, edx, 9
.text:00409594                 mov     ebx, edx
.text:00409596                 and     ebp, 1FFh
.text:0040959C                 mov     eax, esi
.text:0040959E                 sar     ebx, 9
.text:004095A1                 or      eax, ebp
.text:004095A3                 jz      short loc_4095AB
.text:004095A5                 add     ecx, 1
.text:004095A8                 adc     ebx, 0
.text:004095AB
.text:004095AB loc_4095AB:                             ; CODE XREF: .text:004095A3↑j
.text:004095AB                 mov     edx, [esp+64h]
.text:004095AF                 mov     eax, 1
.text:004095B4                 mov     [edx+58h], ecx
.text:004095B7                 mov     [edx+5Ch], ebx
.text:004095BA                 add     esp, 1Ch
.text:004095BD                 pop     ebx
.text:004095BE                 pop     esi
.text:004095BF                 pop     edi
.text:004095C0                 pop     ebp
.text:004095C1                 retn
.text:004095C2 ; ---------------------------------------------------------------------------
.text:004095C2
.text:004095C2 loc_4095C2:                             ; CODE XREF: .text:00409588↑j
.text:004095C2                 add     eax, 1FFh
.text:004095C7                 adc     edx, 0
.text:004095CA                 jmp     short loc_40958A
.text:004095CA ; ---------------------------------------------------------------------------
.text:004095CC                 align 10h
.text:004095D0                 push    ebp
.text:004095D1                 push    edi
.text:004095D2                 xor     edi, edi
.text:004095D4                 push    esi
.text:004095D5                 xor     esi, esi
.text:004095D7                 push    ebx
.text:004095D8                 sub     esp, 0Ch
.text:004095DB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:004095E2                 call    LoadLibraryA
.text:004095E7                 sub     esp, 4
.text:004095EA                 mov     ebp, eax
.text:004095EC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004095F4                 mov     [esp], eax
.text:004095F7                 call    GetProcAddress
.text:004095FC                 sub     esp, 8
.text:004095FF                 test    eax, eax
.text:00409601                 jz      short loc_409632
.text:00409603                 lea     ecx, [esp+8]
.text:00409607                 mov     [esp+4], ecx
.text:0040960B                 mov     ecx, [esp+20h]
.text:0040960F                 mov     [esp], ecx
.text:00409612                 call    eax
.text:00409614                 sub     esp, 8
.text:00409617                 mov     ebx, eax
.text:00409619                 cmp     eax, 0FFFFFFFFh
.text:0040961C                 jz      short loc_40964D
.text:0040961E
.text:0040961E loc_40961E:                             ; CODE XREF: .text:00409656↓j
.text:0040961E                 mov     esi, [esp+8]
.text:00409622                 mov     ecx, ebx
.text:00409624                 xor     edi, edi
.text:00409626                 xor     ebx, ebx
.text:00409628                 mov     edx, esi
.text:0040962A                 mov     esi, ecx
.text:0040962C                 or      esi, edi
.text:0040962E                 mov     edi, ebx
.text:00409630                 or      edi, edx
.text:00409632
.text:00409632 loc_409632:                             ; CODE XREF: .text:00409601↑j
.text:00409632                                         ; .text:00409654↓j
.text:00409632                 test    ebp, ebp
.text:00409634                 jz      short loc_409641
.text:00409636                 mov     [esp], ebp
.text:00409639                 call    FreeLibrary
.text:0040963E                 sub     esp, 4
.text:00409641
.text:00409641 loc_409641:                             ; CODE XREF: .text:00409634↑j
.text:00409641                 add     esp, 0Ch
.text:00409644                 mov     eax, esi
.text:00409646                 mov     edx, edi
.text:00409648                 pop     ebx
.text:00409649                 pop     esi
.text:0040964A                 pop     edi
.text:0040964B                 pop     ebp
.text:0040964C                 retn
.text:0040964D ; ---------------------------------------------------------------------------
.text:0040964D
.text:0040964D loc_40964D:                             ; CODE XREF: .text:0040961C↑j
.text:0040964D                 call    GetLastError
.text:00409652                 test    eax, eax
.text:00409654                 jnz     short loc_409632
.text:00409656                 jmp     short loc_40961E
.text:00409656 ; ---------------------------------------------------------------------------
.text:00409658                 align 10h
.text:00409660
.text:00409660 ; =============== S U B R O U T I N E =======================================
.text:00409660
.text:00409660
.text:00409660 ; int __cdecl sub_409660(LPCSTR, int)
.text:00409660 sub_409660      proc near               ; CODE XREF: sub_40D9B0-3E0F↓p
.text:00409660
.text:00409660 lpRootPathName  = dword ptr -8FCh
.text:00409660 lpVolumeNameBuffer= dword ptr -8F8h
.text:00409660 nVolumeNameSize = dword ptr -8F4h
.text:00409660 lpVolumeSerialNumber= dword ptr -8F0h
.text:00409660 lpMaximumComponentLength= dword ptr -8ECh
.text:00409660 lpFileSystemFlags= dword ptr -8E8h
.text:00409660 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00409660 nFileSystemNameSize= dword ptr -8E0h
.text:00409660 VolumeSerialNumber= dword ptr -8D8h
.text:00409660 MaximumComponentLength= dword ptr -8D4h
.text:00409660 FileSystemFlags = dword ptr -8D0h
.text:00409660 var_8CC         = dword ptr -8CCh
.text:00409660 var_8C8         = dword ptr -8C8h
.text:00409660 var_8C4         = dword ptr -8C4h
.text:00409660 var_8C0         = dword ptr -8C0h
.text:00409660 var_8BC         = dword ptr -8BCh
.text:00409660 var_8B8         = dword ptr -8B8h
.text:00409660 var_8B4         = dword ptr -8B4h
.text:00409660 var_8B0         = dword ptr -8B0h
.text:00409660 var_8AC         = dword ptr -8ACh
.text:00409660 var_8A8         = dword ptr -8A8h
.text:00409660 var_8A4         = dword ptr -8A4h
.text:00409660 var_8A0         = dword ptr -8A0h
.text:00409660 var_89C         = dword ptr -89Ch
.text:00409660 FileSystemNameBuffer= byte ptr -88Ch
.text:00409660 VolumeNameBuffer= byte ptr -48Ch
.text:00409660 var_8C          = dword ptr -8Ch
.text:00409660 var_88          = dword ptr -88h
.text:00409660 var_84          = dword ptr -84h
.text:00409660 var_80          = dword ptr -80h
.text:00409660 var_7C          = dword ptr -7Ch
.text:00409660 var_78          = dword ptr -78h
.text:00409660 var_74          = dword ptr -74h
.text:00409660 var_70          = dword ptr -70h
.text:00409660 var_6C          = dword ptr -6Ch
.text:00409660 var_5C          = dword ptr -5Ch
.text:00409660 var_58          = dword ptr -58h
.text:00409660 var_54          = dword ptr -54h
.text:00409660 var_50          = dword ptr -50h
.text:00409660 var_4C          = dword ptr -4Ch
.text:00409660 var_48          = dword ptr -48h
.text:00409660 var_44          = dword ptr -44h
.text:00409660 var_3C          = dword ptr -3Ch
.text:00409660 var_38          = dword ptr -38h
.text:00409660 var_34          = dword ptr -34h
.text:00409660 arg_0           = dword ptr  4
.text:00409660 arg_4           = dword ptr  8
.text:00409660
.text:00409660                 push    ebp
.text:00409661                 xor     eax, eax
.text:00409663                 mov     ecx, 0Dh
.text:00409668                 push    edi
.text:00409669                 push    esi
.text:0040966A                 push    ebx
.text:0040966B                 sub     esp, 8ECh
.text:00409671                 lea     edi, [esp+8FCh+var_5C]
.text:00409678                 cld
.text:00409679                 lea     edx, [esp+8FCh+var_8C]
.text:00409680                 rep stosd
.text:00409682                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:00409686                 lea     esi, [esp+8FCh+var_5C]
.text:0040968D                 mov     edx, [esp+8FCh+arg_0]
.text:00409694                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409697                 call    loc_4080C0
.text:0040969C                 test    eax, eax
.text:0040969E                 mov     edx, 0FFFFFFFFh
.text:004096A3                 jz      loc_409A34
.text:004096A9                 mov     edx, [esp+8FCh+var_88]
.text:004096B0                 mov     ebp, [esp+8FCh+var_84]
.text:004096B7                 mov     edi, [esp+8FCh+var_80]
.text:004096BE                 mov     [esp+8FCh+var_58], edx
.text:004096C5                 mov     ecx, [esp+8FCh+var_7C]
.text:004096CC                 mov     ebx, [esp+8FCh+var_8C]
.text:004096D3                 mov     [esp+8FCh+var_54], ebp
.text:004096DA                 mov     edx, [esp+8FCh+var_78]
.text:004096E1                 mov     ebp, [esp+8FCh+var_74]
.text:004096E8                 mov     [esp+8FCh+var_50], edi
.text:004096EF                 test    bl, 10h
.text:004096F2                 mov     edi, [esp+8FCh+var_70]
.text:004096F9                 mov     [esp+8FCh+var_4C], ecx
.text:00409700                 mov     ecx, [esp+8FCh+var_6C]
.text:00409707                 mov     [esp+8FCh+var_5C], ebx
.text:0040970E                 mov     [esp+8FCh+var_48], edx
.text:00409715                 mov     [esp+8FCh+var_44], ebp
.text:0040971C                 mov     [esp+8FCh+var_3C], edi
.text:00409723                 mov     [esp+8FCh+var_38], ecx
.text:0040972A                 jnz     loc_409A50
.text:00409730                 mov     ebx, 1
.text:00409735                 mov     [esp+8FCh+var_34], ebx
.text:0040973C
.text:0040973C loc_40973C:                             ; CODE XREF: sub_409660+406↓j
.text:0040973C                 mov     eax, [esp+8FCh+arg_0]
.text:00409743                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00409747                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040974B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040974E                 call    sub_40A430
.text:00409753                 mov     [esp+8FCh+lpRootPathName], eax
.text:00409756                 call    sub_40A000
.text:0040975B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040975F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00409763                 mov     ebp, eax
.text:00409765                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00409769                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040976D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00409774                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00409778                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040977C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00409780                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00409788                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00409790                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00409793                 call    GetVolumeInformationA
.text:00409798                 sub     esp, 20h
.text:0040979B                 test    eax, eax
.text:0040979D                 lea     edi, [esp+8FCh+var_8CC]
.text:004097A1                 setz    bl
.text:004097A4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004097A7                 xor     ebp, ebp
.text:004097A9                 movzx   edx, bl
.text:004097AC                 dec     edx
.text:004097AD                 xor     ebx, ebx
.text:004097AF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004097B3                 call    free
.text:004097B8                 cld
.text:004097B9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004097BD                 mov     [esi+1Ch], ecx
.text:004097C0                 mov     ecx, 0Dh
.text:004097C5                 rep movsd
.text:004097C7                 mov     edi, [esp+8FCh+var_8A0]
.text:004097CB                 mov     edx, [esp+8FCh+var_89C]
.text:004097CF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004097D3                 or      ebp, edi
.text:004097D5                 mov     esi, [esp+8FCh+var_8B0]
.text:004097D9                 mov     edi, [esp+8FCh+arg_4]
.text:004097E0                 or      edx, ebx
.text:004097E2                 mov     [edi+8], edx
.text:004097E5                 xor     edx, edx
.text:004097E7                 test    cl, 10h
.text:004097EA                 setz    dl
.text:004097ED                 mov     [edi+0Ch], ebp
.text:004097F0                 mov     [edi+10h], esi
.text:004097F3                 mov     dword ptr [edi+14h], 0
.text:004097FA                 dec     edx
.text:004097FB                 and     edx, 0FFFFC000h
.text:00409801                 add     edx, 8000h
.text:00409807                 or      edx, 124h
.text:0040980D                 test    cl, 1
.text:00409810                 movzx   eax, dx
.text:00409813                 jnz     short loc_40981A
.text:00409815                 or      eax, 92h
.text:0040981A
.text:0040981A loc_40981A:                             ; CODE XREF: sub_409660+1B3↑j
.text:0040981A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040981E                 xor     edx, edx
.text:00409820                 xor     ebp, ebp
.text:00409822                 mov     edi, [esp+8FCh+var_8AC]
.text:00409826                 mov     ecx, [esp+8FCh+arg_4]
.text:0040982D                 mov     esi, edi
.text:0040982F                 or      [ecx], eax
.text:00409831                 mov     edi, ebx
.text:00409833                 or      edi, ebp
.text:00409835                 mov     ebp, edx
.text:00409837                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040983B                 or      ebp, esi
.text:0040983D                 mov     esi, [esp+8FCh+arg_4]
.text:00409844                 mov     edx, [esp+8FCh+var_8BC]
.text:00409848                 mov     [esi+18h], ebx
.text:0040984B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040984F                 mov     ecx, edx
.text:00409851                 mov     [esi+30h], edi
.text:00409854                 xor     edx, edx
.text:00409856                 mov     [esi+34h], ebp
.text:00409859                 or      ebx, edx
.text:0040985B                 xor     esi, esi
.text:0040985D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409865                 or      esi, ecx
.text:00409867                 mov     edx, ebx
.text:00409869                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409871                 sub     edx, 0D53E8000h
.text:00409877                 mov     ecx, esi
.text:00409879                 sbb     ecx, 19DB1DEh
.text:0040987F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409883                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409886                 call    sub_40F4C0
.text:0040988B                 mov     edx, eax
.text:0040988D                 mov     ecx, [esp+8FCh+arg_4]
.text:00409894                 shr     eax, 1Fh
.text:00409897                 dec     eax
.text:00409898                 and     edx, eax
.text:0040989A                 mov     [ecx+38h], edx
.text:0040989D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004098A0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004098A4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004098AC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004098B4                 call    sub_40F900
.text:004098B9                 lea     ecx, [eax+eax*4]
.text:004098BC                 lea     ebx, [ecx+ecx*4]
.text:004098BF                 mov     eax, [esp+8FCh+arg_4]
.text:004098C6                 shl     ebx, 2
.text:004098C9                 mov     esi, ebx
.text:004098CB                 shr     esi, 1Fh
.text:004098CE                 dec     esi
.text:004098CF                 and     esi, ebx
.text:004098D1                 mov     [eax+3Ch], esi
.text:004098D4                 mov     edx, [esp+8FCh+var_8C4]
.text:004098D8                 xor     esi, esi
.text:004098DA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004098E2                 mov     ebx, [esp+8FCh+var_8C8]
.text:004098E6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004098EE                 mov     ecx, edx
.text:004098F0                 xor     edx, edx
.text:004098F2                 or      ebx, edx
.text:004098F4                 or      esi, ecx
.text:004098F6                 mov     edx, ebx
.text:004098F8                 sub     edx, 0D53E8000h
.text:004098FE                 mov     ecx, esi
.text:00409900                 sbb     ecx, 19DB1DEh
.text:00409906                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040990A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040990D                 call    sub_40F4C0
.text:00409912                 mov     edx, eax
.text:00409914                 mov     ecx, [esp+8FCh+arg_4]
.text:0040991B                 shr     eax, 1Fh
.text:0040991E                 dec     eax
.text:0040991F                 and     edx, eax
.text:00409921                 mov     [ecx+48h], edx
.text:00409924                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00409927                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040992B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409933                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040993B                 call    sub_40F900
.text:00409940                 lea     ecx, [eax+eax*4]
.text:00409943                 lea     ebx, [ecx+ecx*4]
.text:00409946                 mov     eax, [esp+8FCh+arg_4]
.text:0040994D                 shl     ebx, 2
.text:00409950                 mov     esi, ebx
.text:00409952                 shr     esi, 1Fh
.text:00409955                 dec     esi
.text:00409956                 and     esi, ebx
.text:00409958                 mov     [eax+4Ch], esi
.text:0040995B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040995F                 xor     esi, esi
.text:00409961                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00409969                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040996D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00409975                 mov     ecx, edx
.text:00409977                 xor     edx, edx
.text:00409979                 or      ebx, edx
.text:0040997B                 or      esi, ecx
.text:0040997D                 mov     edx, ebx
.text:0040997F                 sub     edx, 0D53E8000h
.text:00409985                 mov     ecx, esi
.text:00409987                 sbb     ecx, 19DB1DEh
.text:0040998D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00409991                 mov     [esp+8FCh+lpRootPathName], edx
.text:00409994                 call    sub_40F4C0
.text:00409999                 mov     edx, eax
.text:0040999B                 mov     ecx, [esp+8FCh+arg_4]
.text:004099A2                 shr     eax, 1Fh
.text:004099A5                 dec     eax
.text:004099A6                 and     edx, eax
.text:004099A8                 mov     [ecx+40h], edx
.text:004099AB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004099AE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004099B2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004099BA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004099C2                 call    sub_40F900
.text:004099C7                 lea     ebx, [eax+eax*4]
.text:004099CA                 mov     esi, [esp+8FCh+arg_4]
.text:004099D1                 lea     edx, [ebx+ebx*4]
.text:004099D4                 shl     edx, 2
.text:004099D7                 mov     eax, edi
.text:004099D9                 mov     ecx, edx
.text:004099DB                 mov     dword ptr [esi+50h], 200h
.text:004099E2                 shr     ecx, 1Fh
.text:004099E5                 dec     ecx
.text:004099E6                 and     ecx, edx
.text:004099E8                 test    ebp, ebp
.text:004099EA                 mov     edx, ebp
.text:004099EC                 mov     [esi+44h], ecx
.text:004099EF                 js      short loc_409A41
.text:004099F1
.text:004099F1 loc_4099F1:                             ; CODE XREF: sub_409660+3E9↓j
.text:004099F1                 xor     esi, esi
.text:004099F3                 mov     ebp, edi
.text:004099F5                 mov     ecx, eax
.text:004099F7                 shrd    ecx, edx, 9
.text:004099FB                 mov     ebx, edx
.text:004099FD                 and     ebp, 1FFh
.text:00409A03                 mov     eax, esi
.text:00409A05                 sar     ebx, 9
.text:00409A08                 or      eax, ebp
.text:00409A0A                 jz      short loc_409A12
.text:00409A0C                 add     ecx, 1
.text:00409A0F                 adc     ebx, 0
.text:00409A12
.text:00409A12 loc_409A12:                             ; CODE XREF: sub_409660+3AA↑j
.text:00409A12                 mov     edx, [esp+8FCh+arg_4]
.text:00409A19                 mov     [edx+5Ch], ebx
.text:00409A1C                 mov     ebx, [esp+8FCh+arg_0]
.text:00409A23                 mov     [edx+58h], ecx
.text:00409A26                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00409A2A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:00409A2D                 call    sub_408880
.text:00409A32                 xor     edx, edx
.text:00409A34
.text:00409A34 loc_409A34:                             ; CODE XREF: sub_409660+43↑j
.text:00409A34                 add     esp, 8ECh
.text:00409A3A                 mov     eax, edx
.text:00409A3C                 pop     ebx
.text:00409A3D                 pop     esi
.text:00409A3E                 pop     edi
.text:00409A3F                 pop     ebp
.text:00409A40                 retn
.text:00409A41 ; ---------------------------------------------------------------------------
.text:00409A41
.text:00409A41 loc_409A41:                             ; CODE XREF: sub_409660+38F↑j
.text:00409A41                 add     eax, 1FFh
.text:00409A46                 adc     edx, 0
.text:00409A49                 jmp     short loc_4099F1
.text:00409A49 ; ---------------------------------------------------------------------------
.text:00409A4B                 align 10h
.text:00409A50
.text:00409A50 loc_409A50:                             ; CODE XREF: sub_409660+CA↑j
.text:00409A50                 mov     eax, [esp+8FCh+arg_0]
.text:00409A57                 mov     [esp+8FCh+lpRootPathName], eax
.text:00409A5A                 call    loc_408230
.text:00409A5F                 mov     [esp+8FCh+var_34], eax
.text:00409A66                 jmp     loc_40973C
.text:00409A66 sub_409660      endp
.text:00409A66
.text:00409A66 ; ---------------------------------------------------------------------------
.text:00409A6B                 align 10h
.text:00409A70 ; START OF FUNCTION CHUNK FOR sub_40D9B0
.text:00409A70
.text:00409A70 loc_409A70:                             ; CODE XREF: sub_40D9B0+26↓j
.text:00409A70                 cld
.text:00409A71                 sub     esp, 2Ch
.text:00409A74                 xor     eax, eax
.text:00409A76                 mov     [esp+2Ch+var_10], ebx
.text:00409A7A                 mov     ecx, 18h
.text:00409A7F                 mov     ebx, [esp+2Ch+arg_0]
.text:00409A83                 mov     [esp+2Ch+var_C], esi
.text:00409A87                 mov     esi, [esp+2Ch+arg_4]
.text:00409A8B                 test    ebx, ebx
.text:00409A8D                 mov     [esp+2Ch+var_8], edi
.text:00409A91                 mov     edi, esi
.text:00409A93                 mov     [esp+2Ch+var_4], ebp
.text:00409A97                 rep stosd
.text:00409A99                 jz      short loc_409AA0
.text:00409A9B                 cmp     byte ptr [ebx], 0
.text:00409A9E                 jnz     short loc_409AB8
.text:00409AA0
.text:00409AA0 loc_409AA0:                             ; CODE XREF: sub_40D9B0-3F17↑j
.text:00409AA0                 xor     edx, edx
.text:00409AA2
.text:00409AA2 loc_409AA2:                             ; CODE XREF: sub_40D9B0-3EE1↓j
.text:00409AA2                                         ; sub_40D9B0-3E38↓j
.text:00409AA2                 mov     ebx, [esp+2Ch+var_10]
.text:00409AA6                 mov     eax, edx
.text:00409AA8                 mov     esi, [esp+2Ch+var_C]
.text:00409AAC                 mov     edi, [esp+2Ch+var_8]
.text:00409AB0                 mov     ebp, [esp+2Ch+var_4]
.text:00409AB4                 add     esp, 2Ch
.text:00409AB7                 retn
.text:00409AB8 ; ---------------------------------------------------------------------------
.text:00409AB8
.text:00409AB8 loc_409AB8:                             ; CODE XREF: sub_40D9B0-3F12↑j
.text:00409AB8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00409AC0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00409AC3                 call    sub_40B620
.text:00409AC8                 test    eax, eax
.text:00409ACA                 mov     edx, 0FFFFFFFFh
.text:00409ACF                 jnz     short loc_409AA2
.text:00409AD1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00409AD4                 call    sub_40B4D0
.text:00409AD9                 mov     [esp+2Ch+lpFileName], eax
.text:00409ADC                 call    sub_40A000
.text:00409AE1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00409AE4                 mov     ebp, eax
.text:00409AE6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:00409AEE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00409AF6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:00409AFE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00409B06                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:00409B0E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00409B16                 call    CreateFileA
.text:00409B1B                 sub     esp, 1Ch
.text:00409B1E                 mov     ebx, eax
.text:00409B20                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:00409B24                 mov     [esp+2Ch+lpFileName], eax
.text:00409B27                 call    loc_4083B0
.text:00409B2C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:00409B2F                 mov     edi, eax
.text:00409B31                 call    CloseHandle
.text:00409B36                 sub     esp, 4
.text:00409B39                 cmp     edi, 0FFFFFFFFh
.text:00409B3C                 jz      short loc_409B9A
.text:00409B3E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00409B42                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00409B45                 call    sub_408880
.text:00409B4A
.text:00409B4A loc_409B4A:                             ; CODE XREF: sub_40D9B0-3E08↓j
.text:00409B4A                 mov     edx, [esi]
.text:00409B4C                 and     edx, 0F000h
.text:00409B52                 cmp     edx, 4000h
.text:00409B58                 jz      short loc_409B8D
.text:00409B5A
.text:00409B5A loc_409B5A:                             ; CODE XREF: sub_40D9B0-3E18↓j
.text:00409B5A                 cmp     edi, 0FFFFFFFFh
.text:00409B5D                 jz      short loc_409B7D
.text:00409B5F
.text:00409B5F loc_409B5F:                             ; CODE XREF: sub_40D9B0-3E25↓j
.text:00409B5F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00409B66                 call    SetErrorMode
.text:00409B6B                 sub     esp, 4
.text:00409B6E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00409B71                 call    free
.text:00409B76                 mov     edx, edi
.text:00409B78                 jmp     loc_409AA2
.text:00409B7D ; ---------------------------------------------------------------------------
.text:00409B7D
.text:00409B7D loc_409B7D:                             ; CODE XREF: sub_40D9B0-3E53↑j
.text:00409B7D                 call    sub_40B480
.text:00409B82                 mov     esi, eax
.text:00409B84                 call    _errno
.text:00409B89                 mov     [eax], esi
.text:00409B8B                 jmp     short loc_409B5F
.text:00409B8D ; ---------------------------------------------------------------------------
.text:00409B8D
.text:00409B8D loc_409B8D:                             ; CODE XREF: sub_40D9B0-3E58↑j
.text:00409B8D                 mov     [esp+2Ch+lpFileName], ebp
.text:00409B90                 call    loc_408230
.text:00409B95                 mov     [esi+18h], eax
.text:00409B98                 jmp     short loc_409B5A
.text:00409B9A ; ---------------------------------------------------------------------------
.text:00409B9A
.text:00409B9A loc_409B9A:                             ; CODE XREF: sub_40D9B0-3E74↑j
.text:00409B9A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00409B9E                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:00409BA1                 call    sub_409660
.text:00409BA6                 mov     edi, eax
.text:00409BA8                 jmp     short loc_409B4A
.text:00409BA8 ; END OF FUNCTION CHUNK FOR sub_40D9B0
.text:00409BA8 ; ---------------------------------------------------------------------------
.text:00409BAA                 align 10h
.text:00409BB0
.text:00409BB0 ; =============== S U B R O U T I N E =======================================
.text:00409BB0
.text:00409BB0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00409BB0
.text:00409BB0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00409BB0 _win32_longpath proc near               ; CODE XREF: .text:0040A374↓p
.text:00409BB0
.text:00409BB0 C               = dword ptr -278h
.text:00409BB0 lpFindFileData  = dword ptr -274h
.text:00409BB0 Destination     = byte ptr -268h
.text:00409BB0 var_267         = byte ptr -267h
.text:00409BB0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00409BB0 lpFileName      = dword ptr  8
.text:00409BB0
.text:00409BB0                 push    ebp
.text:00409BB1                 xor     eax, eax
.text:00409BB3                 push    edi
.text:00409BB4                 push    esi
.text:00409BB5                 push    ebx
.text:00409BB6                 sub     esp, 26Ch
.text:00409BBC                 mov     esi, [esp+278h+lpFileName]
.text:00409BC3                 lea     ebp, [esp+278h+Destination]
.text:00409BC7                 test    esi, esi
.text:00409BC9                 jz      loc_409D27
.text:00409BCF                 movsx   edx, byte ptr [esi]
.text:00409BD2                 mov     [esp+278h+C], edx ; C
.text:00409BD5                 call    isalpha
.text:00409BDA                 test    eax, eax
.text:00409BDC                 jz      short loc_409BEF
.text:00409BDE                 mov     eax, [esp+278h+lpFileName]
.text:00409BE5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00409BE9                 jz      loc_409F2B
.text:00409BEF
.text:00409BEF loc_409BEF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00409BEF                 mov     edx, [esp+278h+lpFileName]
.text:00409BF6                 movzx   eax, byte ptr [edx]
.text:00409BF9                 cmp     al, 2Fh ; '/'
.text:00409BFB                 jz      loc_409E0B
.text:00409C01                 cmp     al, 5Ch ; '\'
.text:00409C03                 jz      loc_409E0B
.text:00409C09
.text:00409C09 loc_409C09:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00409C09                                         ; _win32_longpath+2B1↓j ...
.text:00409C09                 mov     [ebp+268h+Destination], 0
.text:00409C0D                 movzx   ebx, byte ptr [esi]
.text:00409C10                 test    bl, bl
.text:00409C12                 jz      loc_409D09
.text:00409C18                 nop
.text:00409C19                 lea     esi, [esi+0]
.text:00409C20
.text:00409C20 loc_409C20:                             ; CODE XREF: _win32_longpath+153↓j
.text:00409C20                 cmp     bl, 2Fh ; '/'
.text:00409C23                 jz      loc_409DC0
.text:00409C29                 cmp     bl, 5Ch ; '\'
.text:00409C2C                 jz      loc_409DC0
.text:00409C32
.text:00409C32 loc_409C32:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00409C32                                         ; _win32_longpath+22C↓j ...
.text:00409C32                 cmp     bl, 2Eh ; '.'
.text:00409C35                 jz      loc_409D60
.text:00409C3B
.text:00409C3B loc_409C3B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00409C3B                                         ; _win32_longpath+203↓j
.text:00409C3B                 test    bl, bl
.text:00409C3D                 jz      loc_409D09
.text:00409C43                 cmp     bl, 2Fh ; '/'
.text:00409C46                 jz      short loc_409C62
.text:00409C48                 cmp     bl, 5Ch ; '\'
.text:00409C4B                 jz      short loc_409C62
.text:00409C4D                 lea     esi, [esi+0]
.text:00409C50
.text:00409C50 loc_409C50:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00409C50                 inc     esi
.text:00409C51                 movzx   ebx, byte ptr [esi]
.text:00409C54                 test    bl, bl
.text:00409C56                 jz      short loc_409C62
.text:00409C58                 cmp     bl, 2Fh ; '/'
.text:00409C5B                 jz      short loc_409C62
.text:00409C5D                 cmp     bl, 5Ch ; '\'
.text:00409C60                 jnz     short loc_409C50
.text:00409C62
.text:00409C62 loc_409C62:                             ; CODE XREF: _win32_longpath+96↑j
.text:00409C62                                         ; _win32_longpath+9B↑j ...
.text:00409C62                 mov     byte ptr [esi], 0
.text:00409C65                 lea     edx, [esp+278h+FindFileData]
.text:00409C6C                 mov     eax, [esp+278h+lpFileName]
.text:00409C73                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00409C77                 mov     [esp+278h+C], eax ; lpFileName
.text:00409C7A                 call    FindFirstFileA
.text:00409C7F                 mov     [esi], bl
.text:00409C81                 sub     esp, 8
.text:00409C84                 mov     edi, eax
.text:00409C86                 cmp     eax, 0FFFFFFFFh
.text:00409C89                 jz      loc_409D4C
.text:00409C8F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00409C96                 mov     ecx, ebx
.text:00409C98                 nop
.text:00409C99                 lea     esi, [esi+0]
.text:00409CA0
.text:00409CA0 loc_409CA0:                             ; CODE XREF: _win32_longpath+105↓j
.text:00409CA0                 mov     eax, [ebx]
.text:00409CA2                 add     ebx, 4
.text:00409CA5                 lea     edx, [eax-1010101h]
.text:00409CAB                 not     eax
.text:00409CAD                 and     edx, eax
.text:00409CAF                 and     edx, 80808080h
.text:00409CB5                 jz      short loc_409CA0
.text:00409CB7                 test    edx, 8080h
.text:00409CBD                 jnz     short loc_409CC5
.text:00409CBF                 shr     edx, 10h
.text:00409CC2                 add     ebx, 2
.text:00409CC5
.text:00409CC5 loc_409CC5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00409CC5                 add     dl, dl
.text:00409CC7                 sbb     ebx, 3
.text:00409CCA                 sub     ebx, ecx
.text:00409CCC                 lea     ecx, [esp+278h+Destination]
.text:00409CD0                 sub     ecx, ebp
.text:00409CD2                 add     ecx, 105h
.text:00409CD8                 cmp     ecx, ebx
.text:00409CDA                 jle     short loc_409D32
.text:00409CDC                 mov     [esp+278h+C], ebp ; Destination
.text:00409CDF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00409CE6                 add     ebp, ebx
.text:00409CE8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00409CEC                 call    strcpy
.text:00409CF1                 mov     [esp+278h+C], edi ; hFindFile
.text:00409CF4                 call    FindClose
.text:00409CF9                 sub     esp, 4
.text:00409CFC
.text:00409CFC loc_409CFC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00409CFC                 movzx   ecx, byte ptr [esi]
.text:00409CFF                 test    cl, cl
.text:00409D01                 mov     bl, cl
.text:00409D03                 jnz     loc_409C20
.text:00409D09
.text:00409D09 loc_409D09:                             ; CODE XREF: _win32_longpath+62↑j
.text:00409D09                                         ; _win32_longpath+8D↑j
.text:00409D09                 mov     esi, [esp+278h+lpFileName]
.text:00409D10                 lea     ebp, [esp+278h+Destination]
.text:00409D14                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00409D18                 mov     [esp+278h+C], esi ; Destination
.text:00409D1B                 call    strcpy
.text:00409D20                 mov     eax, [esp+278h+lpFileName]
.text:00409D27
.text:00409D27 loc_409D27:                             ; CODE XREF: _win32_longpath+19↑j
.text:00409D27                                         ; _win32_longpath+19A↓j
.text:00409D27                 add     esp, 26Ch
.text:00409D2D                 pop     ebx
.text:00409D2E                 pop     esi
.text:00409D2F                 pop     edi
.text:00409D30                 pop     ebp
.text:00409D31                 retn
.text:00409D32 ; ---------------------------------------------------------------------------
.text:00409D32
.text:00409D32 loc_409D32:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00409D32                 mov     [esp+278h+C], edi ; hFindFile
.text:00409D35                 call    FindClose
.text:00409D3A                 sub     esp, 4
.text:00409D3D                 call    _errno
.text:00409D42                 mov     dword ptr [eax], 22h ; '"'
.text:00409D48
.text:00409D48 loc_409D48:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00409D48                 xor     eax, eax
.text:00409D4A                 jmp     short loc_409D27
.text:00409D4C ; ---------------------------------------------------------------------------
.text:00409D4C
.text:00409D4C loc_409D4C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00409D4C                 call    _errno
.text:00409D51                 mov     dword ptr [eax], 16h
.text:00409D57                 jmp     short loc_409D48
.text:00409D57 ; ---------------------------------------------------------------------------
.text:00409D59                 align 10h
.text:00409D60
.text:00409D60 loc_409D60:                             ; CODE XREF: _win32_longpath+85↑j
.text:00409D60                 movzx   eax, byte ptr [esi+1]
.text:00409D64                 test    al, al
.text:00409D66                 jnz     short loc_409D95
.text:00409D68
.text:00409D68 loc_409D68:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00409D68                                         ; _win32_longpath+1EB↓j ...
.text:00409D68                 test    bl, bl
.text:00409D6A                 jz      short loc_409D8C
.text:00409D6C                 cmp     bl, 2Fh ; '/'
.text:00409D6F                 jz      short loc_409D8C
.text:00409D71                 cmp     bl, 5Ch ; '\'
.text:00409D74                 jz      short loc_409D8C
.text:00409D76
.text:00409D76 loc_409D76:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00409D76                 mov     [ebp+268h+Destination], bl
.text:00409D79                 inc     esi
.text:00409D7A                 inc     ebp
.text:00409D7B                 movzx   ebx, byte ptr [esi]
.text:00409D7E                 test    bl, bl
.text:00409D80                 jz      short loc_409D8C
.text:00409D82                 cmp     bl, 2Fh ; '/'
.text:00409D85                 jz      short loc_409D8C
.text:00409D87                 cmp     bl, 5Ch ; '\'
.text:00409D8A                 jnz     short loc_409D76
.text:00409D8C
.text:00409D8C loc_409D8C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00409D8C                                         ; _win32_longpath+1BF↑j ...
.text:00409D8C                 mov     [ebp+268h+Destination], 0
.text:00409D90                 jmp     loc_409CFC
.text:00409D95 ; ---------------------------------------------------------------------------
.text:00409D95
.text:00409D95 loc_409D95:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00409D95                 cmp     al, 2Fh ; '/'
.text:00409D97                 jz      short loc_409D68
.text:00409D99                 cmp     al, 5Ch ; '\'
.text:00409D9B                 jz      short loc_409D68
.text:00409D9D                 cmp     al, 2Eh ; '.'
.text:00409D9F                 jnz     loc_409C3B
.text:00409DA5                 movzx   eax, byte ptr [esi+2]
.text:00409DA9                 test    al, al
.text:00409DAB                 jz      short loc_409D68
.text:00409DAD                 cmp     al, 2Fh ; '/'
.text:00409DAF                 jz      short loc_409D68
.text:00409DB1                 cmp     al, 5Ch ; '\'
.text:00409DB3                 jnz     loc_409C3B
.text:00409DB9                 jmp     short loc_409D68
.text:00409DB9 ; ---------------------------------------------------------------------------
.text:00409DBB                 align 10h
.text:00409DC0
.text:00409DC0 loc_409DC0:                             ; CODE XREF: _win32_longpath+73↑j
.text:00409DC0                                         ; _win32_longpath+7C↑j
.text:00409DC0                 mov     [ebp+268h+Destination], bl
.text:00409DC3                 inc     esi
.text:00409DC4                 inc     ebp
.text:00409DC5                 mov     [ebp+268h+Destination], 0
.text:00409DC9                 movzx   ebx, byte ptr [esi]
.text:00409DCC                 test    bl, bl
.text:00409DCE                 jz      loc_409C32
.text:00409DD4                 cmp     bl, 2Fh ; '/'
.text:00409DD7                 jz      short loc_409DF0
.text:00409DD9                 cmp     bl, 5Ch ; '\'
.text:00409DDC                 jnz     loc_409C32
.text:00409DE2                 lea     esi, [esi+0]
.text:00409DE9                 lea     edi, [edi+0]
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: _win32_longpath+227↑j
.text:00409DF0                                         ; _win32_longpath+24F↓j ...
.text:00409DF0                 inc     esi
.text:00409DF1                 movzx   ebx, byte ptr [esi]
.text:00409DF4                 test    bl, bl
.text:00409DF6                 jz      loc_409C32
.text:00409DFC                 cmp     bl, 2Fh ; '/'
.text:00409DFF                 jz      short loc_409DF0
.text:00409E01                 cmp     bl, 5Ch ; '\'
.text:00409E04                 jz      short loc_409DF0
.text:00409E06                 jmp     loc_409C32
.text:00409E0B ; ---------------------------------------------------------------------------
.text:00409E0B
.text:00409E0B loc_409E0B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00409E0B                                         ; _win32_longpath+53↑j
.text:00409E0B                 mov     edi, [esp+278h+lpFileName]
.text:00409E12                 movzx   edx, byte ptr [edi+1]
.text:00409E16                 cmp     dl, 2Fh ; '/'
.text:00409E19                 jz      short loc_409E24
.text:00409E1B                 cmp     dl, 5Ch ; '\'
.text:00409E1E                 jnz     loc_409C09
.text:00409E24
.text:00409E24 loc_409E24:                             ; CODE XREF: _win32_longpath+269↑j
.text:00409E24                 mov     esi, [esp+278h+lpFileName]
.text:00409E2B                 mov     [ebp+268h+Destination], al
.text:00409E2E                 mov     ecx, [esp+278h+lpFileName]
.text:00409E35                 inc     ebp
.text:00409E36                 add     esi, 2
.text:00409E39                 movzx   ebx, byte ptr [ecx+1]
.text:00409E3D                 mov     [ebp+268h+Destination], bl
.text:00409E40                 inc     ebp
.text:00409E41                 movzx   eax, byte ptr [ecx+2]
.text:00409E45                 test    al, al
.text:00409E47                 jz      loc_409F23
.text:00409E4D                 cmp     al, 2Fh ; '/'
.text:00409E4F                 jz      loc_409F08
.text:00409E55                 cmp     al, 5Ch ; '\'
.text:00409E57                 mov     bl, al
.text:00409E59                 jz      loc_409F08
.text:00409E5F
.text:00409E5F loc_409E5F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00409E5F                                         ; _win32_longpath+376↓j
.text:00409E5F                 test    bl, bl
.text:00409E61                 jz      loc_409C09
.text:00409E67                 cmp     bl, 2Fh ; '/'
.text:00409E6A                 jz      short loc_409E8B
.text:00409E6C                 cmp     bl, 5Ch ; '\'
.text:00409E6F                 jz      short loc_409E8B
.text:00409E71
.text:00409E71 loc_409E71:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00409E71                 mov     [ebp+268h+Destination], bl
.text:00409E74                 inc     esi
.text:00409E75                 inc     ebp
.text:00409E76                 movzx   ebx, byte ptr [esi]
.text:00409E79                 test    bl, bl
.text:00409E7B                 jz      loc_409C09
.text:00409E81                 cmp     bl, 2Fh ; '/'
.text:00409E84                 jz      short loc_409E8B
.text:00409E86                 cmp     bl, 5Ch ; '\'
.text:00409E89                 jnz     short loc_409E71
.text:00409E8B
.text:00409E8B loc_409E8B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00409E8B                                         ; _win32_longpath+2BF↑j ...
.text:00409E8B                 test    bl, bl
.text:00409E8D                 jz      loc_409C09
.text:00409E93                 mov     [ebp+268h+Destination], bl
.text:00409E96                 inc     esi
.text:00409E97                 inc     ebp
.text:00409E98                 movzx   ebx, byte ptr [esi]
.text:00409E9B                 test    bl, bl
.text:00409E9D                 jz      loc_409C09
.text:00409EA3                 cmp     bl, 2Fh ; '/'
.text:00409EA6                 jz      short loc_409EF0
.text:00409EA8                 cmp     bl, 5Ch ; '\'
.text:00409EAB                 jz      short loc_409EF0
.text:00409EAD
.text:00409EAD loc_409EAD:                             ; CODE XREF: _win32_longpath+356↓j
.text:00409EAD                 test    bl, bl
.text:00409EAF                 jz      loc_409C09
.text:00409EB5                 cmp     bl, 2Fh ; '/'
.text:00409EB8                 jz      loc_409C09
.text:00409EBE                 cmp     bl, 5Ch ; '\'
.text:00409EC1                 jz      loc_409C09
.text:00409EC7
.text:00409EC7 loc_409EC7:                             ; CODE XREF: _win32_longpath+333↓j
.text:00409EC7                 mov     [ebp+268h+Destination], bl
.text:00409ECA                 inc     esi
.text:00409ECB                 inc     ebp
.text:00409ECC                 movzx   ebx, byte ptr [esi]
.text:00409ECF                 test    bl, bl
.text:00409ED1                 jz      loc_409C09
.text:00409ED7                 cmp     bl, 2Fh ; '/'
.text:00409EDA                 jz      loc_409C09
.text:00409EE0                 cmp     bl, 5Ch ; '\'
.text:00409EE3                 jnz     short loc_409EC7
.text:00409EE5                 jmp     loc_409C09
.text:00409EE5 ; ---------------------------------------------------------------------------
.text:00409EEA                 align 10h
.text:00409EF0
.text:00409EF0 loc_409EF0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00409EF0                                         ; _win32_longpath+2FB↑j ...
.text:00409EF0                 inc     esi
.text:00409EF1                 movzx   ebx, byte ptr [esi]
.text:00409EF4                 test    bl, bl
.text:00409EF6                 jz      loc_409C09
.text:00409EFC                 cmp     bl, 2Fh ; '/'
.text:00409EFF                 jz      short loc_409EF0
.text:00409F01                 cmp     bl, 5Ch ; '\'
.text:00409F04                 jz      short loc_409EF0
.text:00409F06                 jmp     short loc_409EAD
.text:00409F08 ; ---------------------------------------------------------------------------
.text:00409F08
.text:00409F08 loc_409F08:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00409F08                                         ; _win32_longpath+2A9↑j ...
.text:00409F08                 inc     esi
.text:00409F09                 movzx   ebx, byte ptr [esi]
.text:00409F0C                 test    bl, bl
.text:00409F0E                 jz      loc_409C09
.text:00409F14                 cmp     bl, 2Fh ; '/'
.text:00409F17                 jz      short loc_409F08
.text:00409F19                 cmp     bl, 5Ch ; '\'
.text:00409F1C                 jz      short loc_409F08
.text:00409F1E                 jmp     loc_409E5F
.text:00409F23 ; ---------------------------------------------------------------------------
.text:00409F23
.text:00409F23 loc_409F23:                             ; CODE XREF: _win32_longpath+297↑j
.text:00409F23                 movzx   ebx, byte ptr [esi]
.text:00409F26                 jmp     loc_409E5F
.text:00409F2B ; ---------------------------------------------------------------------------
.text:00409F2B
.text:00409F2B loc_409F2B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00409F2B                 movzx   ecx, byte ptr [eax]
.text:00409F2E                 mov     esi, eax
.text:00409F30                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00409F35                 add     esi, 2
.text:00409F38                 lea     ebp, [esp+12h]
.text:00409F3C                 mov     [esp+278h+Destination], cl
.text:00409F40                 jmp     loc_409C09
.text:00409F40 _win32_longpath endp
.text:00409F40
.text:00409F40 ; ---------------------------------------------------------------------------
.text:00409F45                 align 10h
.text:00409F50                 sub     esp, 0Ch
.text:00409F53                 mov     edx, [esp+10h]
.text:00409F57                 mov     dword ptr [esp+4], 0
.text:00409F5F                 mov     [esp], edx
.text:00409F62                 call    sub_40B620
.text:00409F67                 inc     eax
.text:00409F68                 setnz   dl
.text:00409F6B                 add     esp, 0Ch
.text:00409F6E                 movzx   eax, dl
.text:00409F71                 retn
.text:00409F71 ; ---------------------------------------------------------------------------
.text:00409F72                 align 10h
.text:00409F80
.text:00409F80 ; =============== S U B R O U T I N E =======================================
.text:00409F80
.text:00409F80
.text:00409F80 sub_409F80      proc near               ; CODE XREF: sub_40B4F0+AA↓p
.text:00409F80                                         ; sub_40DD80+B4↓p
.text:00409F80
.text:00409F80 arg_0           = dword ptr  4
.text:00409F80
.text:00409F80                 mov     ecx, [esp+arg_0]
.text:00409F84                 mov     edx, ecx
.text:00409F86                 movzx   eax, byte ptr [ecx]
.text:00409F89                 test    al, al
.text:00409F8B                 jz      short loc_409F9C
.text:00409F8D                 lea     esi, [esi+0]
.text:00409F90
.text:00409F90 loc_409F90:                             ; CODE XREF: sub_409F80+1A↓j
.text:00409F90                 cmp     al, 5Ch ; '\'
.text:00409F92                 jz      short loc_409FA0
.text:00409F94
.text:00409F94 loc_409F94:                             ; CODE XREF: sub_409F80+23↓j
.text:00409F94                 inc     edx
.text:00409F95                 movzx   eax, byte ptr [edx]
.text:00409F98                 test    al, al
.text:00409F9A                 jnz     short loc_409F90
.text:00409F9C
.text:00409F9C loc_409F9C:                             ; CODE XREF: sub_409F80+B↑j
.text:00409F9C                 mov     eax, ecx
.text:00409F9E                 retn
.text:00409F9E ; ---------------------------------------------------------------------------
.text:00409F9F                 align 10h
.text:00409FA0
.text:00409FA0 loc_409FA0:                             ; CODE XREF: sub_409F80+12↑j
.text:00409FA0                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409FA3                 jmp     short loc_409F94
.text:00409FA3 sub_409F80      endp
.text:00409FA3
.text:00409FA3 ; ---------------------------------------------------------------------------
.text:00409FA5                 align 10h
.text:00409FB0                 push    ebx
.text:00409FB1                 sub     esp, 8
.text:00409FB4                 mov     ebx, [esp+14h]
.text:00409FB8                 mov     edx, [esp+10h]
.text:00409FBC                 mov     [esp], ebx
.text:00409FBF                 mov     [esp+4], edx
.text:00409FC3                 call    strcpy
.text:00409FC8                 movzx   eax, byte ptr [ebx]
.text:00409FCB                 mov     edx, ebx
.text:00409FCD                 test    al, al
.text:00409FCF                 jz      short loc_409FEC
.text:00409FD1                 jmp     short loc_409FE0
.text:00409FD1 ; ---------------------------------------------------------------------------
.text:00409FD3                 align 10h
.text:00409FE0
.text:00409FE0 loc_409FE0:                             ; CODE XREF: .text:00409FD1↑j
.text:00409FE0                                         ; .text:00409FEA↓j
.text:00409FE0                 cmp     al, 5Ch ; '\'
.text:00409FE2                 jz      short loc_409FF3
.text:00409FE4
.text:00409FE4 loc_409FE4:                             ; CODE XREF: .text:00409FF6↓j
.text:00409FE4                 inc     edx
.text:00409FE5                 movzx   eax, byte ptr [edx]
.text:00409FE8                 test    al, al
.text:00409FEA                 jnz     short loc_409FE0
.text:00409FEC
.text:00409FEC loc_409FEC:                             ; CODE XREF: .text:00409FCF↑j
.text:00409FEC                 add     esp, 8
.text:00409FEF                 xor     eax, eax
.text:00409FF1                 pop     ebx
.text:00409FF2                 retn
.text:00409FF3 ; ---------------------------------------------------------------------------
.text:00409FF3
.text:00409FF3 loc_409FF3:                             ; CODE XREF: .text:00409FE2↑j
.text:00409FF3                 mov     byte ptr [edx], 2Fh ; '/'
.text:00409FF6                 jmp     short loc_409FE4
.text:00409FF6 ; ---------------------------------------------------------------------------
.text:00409FF8                 align 10h
.text:0040A000
.text:0040A000 ; =============== S U B R O U T I N E =======================================
.text:0040A000
.text:0040A000
.text:0040A000 sub_40A000      proc near               ; CODE XREF: sub_408880+16↑p
.text:0040A000                                         ; sub_408D80+1F↑p ...
.text:0040A000
.text:0040A000 arg_0           = dword ptr  4
.text:0040A000
.text:0040A000                 mov     ecx, [esp+arg_0]
.text:0040A004                 mov     edx, ecx
.text:0040A006                 movzx   eax, byte ptr [ecx]
.text:0040A009                 test    al, al
.text:0040A00B                 jz      short loc_40A01C
.text:0040A00D                 lea     esi, [esi+0]
.text:0040A010
.text:0040A010 loc_40A010:                             ; CODE XREF: sub_40A000+1A↓j
.text:0040A010                 cmp     al, 2Fh ; '/'
.text:0040A012                 jz      short loc_40A020
.text:0040A014
.text:0040A014 loc_40A014:                             ; CODE XREF: sub_40A000+23↓j
.text:0040A014                 inc     edx
.text:0040A015                 movzx   eax, byte ptr [edx]
.text:0040A018                 test    al, al
.text:0040A01A                 jnz     short loc_40A010
.text:0040A01C
.text:0040A01C loc_40A01C:                             ; CODE XREF: sub_40A000+B↑j
.text:0040A01C                 mov     eax, ecx
.text:0040A01E                 retn
.text:0040A01E ; ---------------------------------------------------------------------------
.text:0040A01F                 align 10h
.text:0040A020
.text:0040A020 loc_40A020:                             ; CODE XREF: sub_40A000+12↑j
.text:0040A020                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A023                 jmp     short loc_40A014
.text:0040A023 sub_40A000      endp
.text:0040A023
.text:0040A023 ; ---------------------------------------------------------------------------
.text:0040A025                 align 10h
.text:0040A030                 push    ebx
.text:0040A031                 sub     esp, 8
.text:0040A034                 mov     ebx, [esp+14h]
.text:0040A038                 mov     edx, [esp+10h]
.text:0040A03C                 mov     [esp], ebx
.text:0040A03F                 mov     [esp+4], edx
.text:0040A043                 call    strcpy
.text:0040A048                 movzx   eax, byte ptr [ebx]
.text:0040A04B                 mov     edx, ebx
.text:0040A04D                 test    al, al
.text:0040A04F                 jz      short loc_40A06C
.text:0040A051                 jmp     short loc_40A060
.text:0040A051 ; ---------------------------------------------------------------------------
.text:0040A053                 align 10h
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: .text:0040A051↑j
.text:0040A060                                         ; .text:0040A06A↓j
.text:0040A060                 cmp     al, 2Fh ; '/'
.text:0040A062                 jz      short loc_40A073
.text:0040A064
.text:0040A064 loc_40A064:                             ; CODE XREF: .text:0040A076↓j
.text:0040A064                 inc     edx
.text:0040A065                 movzx   eax, byte ptr [edx]
.text:0040A068                 test    al, al
.text:0040A06A                 jnz     short loc_40A060
.text:0040A06C
.text:0040A06C loc_40A06C:                             ; CODE XREF: .text:0040A04F↑j
.text:0040A06C                 add     esp, 8
.text:0040A06F                 xor     eax, eax
.text:0040A071                 pop     ebx
.text:0040A072                 retn
.text:0040A073 ; ---------------------------------------------------------------------------
.text:0040A073
.text:0040A073 loc_40A073:                             ; CODE XREF: .text:0040A062↑j
.text:0040A073                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A076                 jmp     short loc_40A064
.text:0040A076 ; ---------------------------------------------------------------------------
.text:0040A078                 align 10h
.text:0040A080                 push    ebx
.text:0040A081                 sub     esp, 8
.text:0040A084                 mov     ebx, [esp+14h]
.text:0040A088                 mov     edx, [esp+10h]
.text:0040A08C                 mov     [esp+4], ebx
.text:0040A090                 mov     [esp], edx
.text:0040A093                 call    sub_40B4A0
.text:0040A098                 movzx   eax, byte ptr [ebx]
.text:0040A09B                 mov     edx, ebx
.text:0040A09D                 test    al, al
.text:0040A09F                 jz      short loc_40A0BC
.text:0040A0A1                 jmp     short loc_40A0B0
.text:0040A0A1 ; ---------------------------------------------------------------------------
.text:0040A0A3                 align 10h
.text:0040A0B0
.text:0040A0B0 loc_40A0B0:                             ; CODE XREF: .text:0040A0A1↑j
.text:0040A0B0                                         ; .text:0040A0BA↓j
.text:0040A0B0                 cmp     al, 2Fh ; '/'
.text:0040A0B2                 jz      short loc_40A0C3
.text:0040A0B4
.text:0040A0B4 loc_40A0B4:                             ; CODE XREF: .text:0040A0C6↓j
.text:0040A0B4                 inc     edx
.text:0040A0B5                 movzx   eax, byte ptr [edx]
.text:0040A0B8                 test    al, al
.text:0040A0BA                 jnz     short loc_40A0B0
.text:0040A0BC
.text:0040A0BC loc_40A0BC:                             ; CODE XREF: .text:0040A09F↑j
.text:0040A0BC                 add     esp, 8
.text:0040A0BF                 xor     eax, eax
.text:0040A0C1                 pop     ebx
.text:0040A0C2                 retn
.text:0040A0C3 ; ---------------------------------------------------------------------------
.text:0040A0C3
.text:0040A0C3 loc_40A0C3:                             ; CODE XREF: .text:0040A0B2↑j
.text:0040A0C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A0C6                 jmp     short loc_40A0B4
.text:0040A0C6 ; ---------------------------------------------------------------------------
.text:0040A0C8                 align 10h
.text:0040A0D0                 push    ebx
.text:0040A0D1                 sub     esp, 8
.text:0040A0D4                 mov     ebx, [esp+14h]
.text:0040A0D8                 mov     edx, [esp+10h]
.text:0040A0DC                 mov     [esp], ebx
.text:0040A0DF                 mov     [esp+4], edx
.text:0040A0E3                 call    sub_40B4A0
.text:0040A0E8                 movzx   eax, byte ptr [ebx]
.text:0040A0EB                 mov     edx, ebx
.text:0040A0ED                 test    al, al
.text:0040A0EF                 jz      short loc_40A10C
.text:0040A0F1                 jmp     short loc_40A100
.text:0040A0F1 ; ---------------------------------------------------------------------------
.text:0040A0F3                 align 10h
.text:0040A100
.text:0040A100 loc_40A100:                             ; CODE XREF: .text:0040A0F1↑j
.text:0040A100                                         ; .text:0040A10A↓j
.text:0040A100                 cmp     al, 5Ch ; '\'
.text:0040A102                 jz      short loc_40A111
.text:0040A104
.text:0040A104 loc_40A104:                             ; CODE XREF: .text:0040A114↓j
.text:0040A104                 inc     edx
.text:0040A105                 movzx   eax, byte ptr [edx]
.text:0040A108                 test    al, al
.text:0040A10A                 jnz     short loc_40A100
.text:0040A10C
.text:0040A10C loc_40A10C:                             ; CODE XREF: .text:0040A0EF↑j
.text:0040A10C                 add     esp, 8
.text:0040A10F                 pop     ebx
.text:0040A110                 retn
.text:0040A111 ; ---------------------------------------------------------------------------
.text:0040A111
.text:0040A111 loc_40A111:                             ; CODE XREF: .text:0040A102↑j
.text:0040A111                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040A114                 jmp     short loc_40A104
.text:0040A114 ; ---------------------------------------------------------------------------
.text:0040A116                 align 10h
.text:0040A120
.text:0040A120 ; =============== S U B R O U T I N E =======================================
.text:0040A120
.text:0040A120
.text:0040A120 ; int __cdecl sub_40A120(LPSTR)
.text:0040A120 sub_40A120      proc near               ; CODE XREF: .text:0040A1AE↓p
.text:0040A120                                         ; .text:0040A1EE↓p ...
.text:0040A120
.text:0040A120 hModule         = dword ptr -1Ch
.text:0040A120 lpFilename      = dword ptr -18h
.text:0040A120 nSize           = dword ptr -14h
.text:0040A120 arg_0           = dword ptr  4
.text:0040A120
.text:0040A120                 push    esi
.text:0040A121                 push    ebx
.text:0040A122                 sub     esp, 14h
.text:0040A125                 mov     esi, [esp+1Ch+arg_0]
.text:0040A129                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040A131                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040A138                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040A13C                 call    GetModuleFileNameA
.text:0040A141                 sub     esp, 0Ch
.text:0040A144                 test    eax, eax
.text:0040A146                 jz      short loc_40A188
.text:0040A148                 cmp     eax, 104h
.text:0040A14D                 jg      short loc_40A179
.text:0040A14F
.text:0040A14F loc_40A14F:                             ; CODE XREF: sub_40A120+66↓j
.text:0040A14F                                         ; sub_40A120+78↓j
.text:0040A14F                 movzx   eax, byte ptr [esi]
.text:0040A152                 mov     edx, esi
.text:0040A154                 test    al, al
.text:0040A156                 jz      short loc_40A16C
.text:0040A158                 nop
.text:0040A159                 lea     esi, [esi+0]
.text:0040A160
.text:0040A160 loc_40A160:                             ; CODE XREF: sub_40A120+4A↓j
.text:0040A160                 cmp     al, 5Ch ; '\'
.text:0040A162                 jz      short loc_40A174
.text:0040A164
.text:0040A164 loc_40A164:                             ; CODE XREF: sub_40A120+57↓j
.text:0040A164                 inc     edx
.text:0040A165                 movzx   eax, byte ptr [edx]
.text:0040A168                 test    al, al
.text:0040A16A                 jnz     short loc_40A160
.text:0040A16C
.text:0040A16C loc_40A16C:                             ; CODE XREF: sub_40A120+36↑j
.text:0040A16C                 add     esp, 14h
.text:0040A16F                 mov     eax, esi
.text:0040A171                 pop     ebx
.text:0040A172                 pop     esi
.text:0040A173                 retn
.text:0040A174 ; ---------------------------------------------------------------------------
.text:0040A174
.text:0040A174 loc_40A174:                             ; CODE XREF: sub_40A120+42↑j
.text:0040A174                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040A177                 jmp     short loc_40A164
.text:0040A179 ; ---------------------------------------------------------------------------
.text:0040A179
.text:0040A179 loc_40A179:                             ; CODE XREF: sub_40A120+2D↑j
.text:0040A179                 call    _errno
.text:0040A17E                 mov     dword ptr [eax], 26h ; '&'
.text:0040A184                 xor     esi, esi
.text:0040A186                 jmp     short loc_40A14F
.text:0040A188 ; ---------------------------------------------------------------------------
.text:0040A188
.text:0040A188 loc_40A188:                             ; CODE XREF: sub_40A120+26↑j
.text:0040A188                 call    sub_40B480
.text:0040A18D                 mov     ebx, eax
.text:0040A18F                 xor     esi, esi
.text:0040A191                 call    _errno
.text:0040A196                 mov     [eax], ebx
.text:0040A198                 jmp     short loc_40A14F
.text:0040A198 sub_40A120      endp
.text:0040A198
.text:0040A198 ; ---------------------------------------------------------------------------
.text:0040A19A                 align 10h
.text:0040A1A0                 sub     esp, 0Ch
.text:0040A1A3                 mov     [esp+8], ebx
.text:0040A1A7                 mov     ebx, [esp+10h]
.text:0040A1AB                 mov     [esp], ebx
.text:0040A1AE                 call    sub_40A120
.text:0040A1B3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040A1BB                 mov     [esp], ebx
.text:0040A1BE                 call    strrchr
.text:0040A1C3                 test    eax, eax
.text:0040A1C5                 jz      short loc_40A1CA
.text:0040A1C7                 lea     ebx, [eax+1]
.text:0040A1CA
.text:0040A1CA loc_40A1CA:                             ; CODE XREF: .text:0040A1C5↑j
.text:0040A1CA                 mov     eax, ebx
.text:0040A1CC                 mov     ebx, [esp+8]
.text:0040A1D0                 add     esp, 0Ch
.text:0040A1D3                 retn
.text:0040A1D3 ; ---------------------------------------------------------------------------
.text:0040A1D4                 align 10h
.text:0040A1E0                 sub     esp, 0Ch
.text:0040A1E3                 mov     [esp+8], ebx
.text:0040A1E7                 mov     ebx, [esp+10h]
.text:0040A1EB                 mov     [esp], ebx
.text:0040A1EE                 call    sub_40A120
.text:0040A1F3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040A1FB                 mov     [esp], ebx
.text:0040A1FE                 call    strrchr
.text:0040A203                 test    eax, eax
.text:0040A205                 jz      short loc_40A20A
.text:0040A207                 mov     byte ptr [eax], 0
.text:0040A20A
.text:0040A20A loc_40A20A:                             ; CODE XREF: .text:0040A205↑j
.text:0040A20A                 mov     eax, ebx
.text:0040A20C                 mov     ebx, [esp+8]
.text:0040A210                 add     esp, 0Ch
.text:0040A213                 retn
.text:0040A213 ; ---------------------------------------------------------------------------
.text:0040A214                 align 10h
.text:0040A220                 sub     esp, 0Ch
.text:0040A223                 mov     [esp+8], ebx
.text:0040A227                 mov     ebx, [esp+10h]
.text:0040A22B                 mov     [esp], ebx
.text:0040A22E                 call    sub_40A120
.text:0040A233                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040A23B                 mov     [esp], ebx
.text:0040A23E                 call    strrchr
.text:0040A243                 test    eax, eax
.text:0040A245                 jz      short loc_40A24A
.text:0040A247                 mov     byte ptr [eax], 0
.text:0040A24A
.text:0040A24A loc_40A24A:                             ; CODE XREF: .text:0040A245↑j
.text:0040A24A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040A252                 mov     [esp], ebx
.text:0040A255                 call    strrchr
.text:0040A25A                 test    eax, eax
.text:0040A25C                 jz      short loc_40A261
.text:0040A25E                 mov     byte ptr [eax], 0
.text:0040A261
.text:0040A261 loc_40A261:                             ; CODE XREF: .text:0040A25C↑j
.text:0040A261                 mov     eax, ebx
.text:0040A263                 mov     ebx, [esp+8]
.text:0040A267                 add     esp, 0Ch
.text:0040A26A                 retn
.text:0040A26A ; ---------------------------------------------------------------------------
.text:0040A26B                 align 10h
.text:0040A270                 sub     esp, 1Ch
.text:0040A273                 mov     edx, [esp+20h]
.text:0040A277                 mov     [esp+10h], ebx
.text:0040A27B                 xor     ebx, ebx
.text:0040A27D                 mov     [esp+14h], esi
.text:0040A281                 mov     [esp+18h], edi
.text:0040A285                 mov     [esp], edx
.text:0040A288                 call    sub_40B4D0
.text:0040A28D                 mov     edx, [esp+24h]
.text:0040A291                 mov     edi, eax
.text:0040A293                 mov     [esp], edx
.text:0040A296                 call    sub_40B4D0
.text:0040A29B                 mov     [esp+4], eax
.text:0040A29F                 mov     esi, eax
.text:0040A2A1                 mov     [esp], edi
.text:0040A2A4                 call    _stricmp_0
.text:0040A2A9                 mov     [esp], edi
.text:0040A2AC                 test    eax, eax
.text:0040A2AE                 setz    bl
.text:0040A2B1                 call    free
.text:0040A2B6                 mov     [esp], esi
.text:0040A2B9                 call    free
.text:0040A2BE                 mov     eax, ebx
.text:0040A2C0                 mov     esi, [esp+14h]
.text:0040A2C4                 mov     ebx, [esp+10h]
.text:0040A2C8                 mov     edi, [esp+18h]
.text:0040A2CC                 add     esp, 1Ch
.text:0040A2CF                 retn
.text:0040A2D0 ; ---------------------------------------------------------------------------
.text:0040A2D0                 xor     eax, eax
.text:0040A2D2                 retn
.text:0040A2D2 ; ---------------------------------------------------------------------------
.text:0040A2D3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040A307↓o
.text:0040A2E0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040A316↓o
.text:0040A2F0 ; ---------------------------------------------------------------------------
.text:0040A2F0                 sub     esp, 1Ch
.text:0040A2F3                 mov     [esp+10h], ebx
.text:0040A2F7                 mov     ebx, [esp+20h]
.text:0040A2FB                 mov     [esp+18h], edi
.text:0040A2FF                 mov     edi, [esp+24h]
.text:0040A303                 mov     [esp+14h], esi
.text:0040A307                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040A30E                 call    GetModuleHandleA
.text:0040A313                 sub     esp, 4
.text:0040A316                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040A31E                 mov     [esp], eax
.text:0040A321                 call    GetProcAddress
.text:0040A326                 sub     esp, 8
.text:0040A329                 test    eax, eax
.text:0040A32B                 jz      short loc_40A343
.text:0040A32D                 mov     dword ptr [esp+8], 104h
.text:0040A335                 mov     [esp+4], ebx
.text:0040A339                 mov     [esp], edi
.text:0040A33C                 call    eax
.text:0040A33E                 sub     esp, 0Ch
.text:0040A341                 mov     esi, eax
.text:0040A343
.text:0040A343 loc_40A343:                             ; CODE XREF: .text:0040A32B↑j
.text:0040A343                 test    esi, esi
.text:0040A345                 jz      short loc_40A360
.text:0040A347
.text:0040A347 loc_40A347:                             ; CODE XREF: .text:0040A37B↓j
.text:0040A347                 mov     eax, ebx
.text:0040A349                 mov     esi, [esp+14h]
.text:0040A34D                 mov     ebx, [esp+10h]
.text:0040A351                 mov     edi, [esp+18h]
.text:0040A355                 add     esp, 1Ch
.text:0040A358                 retn
.text:0040A358 ; ---------------------------------------------------------------------------
.text:0040A359                 align 10h
.text:0040A360
.text:0040A360 loc_40A360:                             ; CODE XREF: .text:0040A345↑j
.text:0040A360                 call    sub_40BF60
.text:0040A365                 mov     [esp], ebx
.text:0040A368                 mov     [esp+4], edi
.text:0040A36C                 call    strcpy
.text:0040A371                 mov     [esp], ebx
.text:0040A374                 call    _win32_longpath
.text:0040A379                 mov     ebx, eax
.text:0040A37B                 jmp     short loc_40A347
.text:0040A37B ; ---------------------------------------------------------------------------
.text:0040A37D                 align 10h
.text:0040A380                 sub     esp, 1Ch
.text:0040A383                 mov     [esp+18h], edi
.text:0040A387                 mov     edi, [esp+20h]
.text:0040A38B                 mov     [esp+10h], ebx
.text:0040A38F                 mov     [esp+14h], esi
.text:0040A393                 mov     dword ptr [esp+8], 0
.text:0040A39B                 mov     dword ptr [esp+4], 0
.text:0040A3A3                 mov     [esp], edi
.text:0040A3A6                 call    GetShortPathNameA
.text:0040A3AB                 sub     esp, 0Ch
.text:0040A3AE                 mov     ebx, eax
.text:0040A3B0                 test    eax, eax
.text:0040A3B2                 jz      short loc_40A400
.text:0040A3B4                 lea     edx, [eax+1]
.text:0040A3B7                 mov     [esp], edx
.text:0040A3BA                 call    malloc
.text:0040A3BF                 test    eax, eax
.text:0040A3C1                 mov     esi, eax
.text:0040A3C3                 jz      short loc_40A400
.text:0040A3C5                 mov     [esp+8], ebx
.text:0040A3C9                 mov     [esp+4], eax
.text:0040A3CD                 mov     [esp], edi
.text:0040A3D0                 call    GetShortPathNameA
.text:0040A3D5                 sub     esp, 0Ch
.text:0040A3D8                 mov     edx, esi
.text:0040A3DA                 test    eax, eax
.text:0040A3DC                 jz      short loc_40A3F2
.text:0040A3DE                 mov     esi, esi
.text:0040A3E0
.text:0040A3E0 loc_40A3E0:                             ; CODE XREF: .text:0040A410↓j
.text:0040A3E0                 mov     ebx, [esp+10h]
.text:0040A3E4                 mov     eax, edx
.text:0040A3E6                 mov     esi, [esp+14h]
.text:0040A3EA                 mov     edi, [esp+18h]
.text:0040A3EE                 add     esp, 1Ch
.text:0040A3F1                 retn
.text:0040A3F2 ; ---------------------------------------------------------------------------
.text:0040A3F2
.text:0040A3F2 loc_40A3F2:                             ; CODE XREF: .text:0040A3DC↑j
.text:0040A3F2                 mov     [esp], esi
.text:0040A3F5                 call    free
.text:0040A3FA                 lea     esi, [esi+0]
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: .text:0040A3B2↑j
.text:0040A400                                         ; .text:0040A3C3↑j
.text:0040A400                 call    sub_40B480
.text:0040A405                 mov     esi, eax
.text:0040A407                 call    _errno
.text:0040A40C                 mov     [eax], esi
.text:0040A40E                 mov     edx, edi
.text:0040A410                 jmp     short loc_40A3E0
.text:0040A410 ; ---------------------------------------------------------------------------
.text:0040A412                 align 10h
.text:0040A420 ; const char String[4]
.text:0040A420 String          db ' :/',0              ; DATA XREF: sub_40A430+FA↓o
.text:0040A424                 align 10h
.text:0040A430
.text:0040A430 ; =============== S U B R O U T I N E =======================================
.text:0040A430
.text:0040A430
.text:0040A430 ; int __cdecl sub_40A430(LPCSTR)
.text:0040A430 sub_40A430      proc near               ; CODE XREF: sub_408880+E↑p
.text:0040A430                                         ; sub_408D80+17↑p ...
.text:0040A430
.text:0040A430 Str             = dword ptr -1Ch
.text:0040A430 Val             = dword ptr -18h
.text:0040A430 Count           = dword ptr -14h
.text:0040A430 var_10          = dword ptr -10h
.text:0040A430 var_C           = dword ptr -0Ch
.text:0040A430 var_8           = dword ptr -8
.text:0040A430 var_4           = dword ptr -4
.text:0040A430 arg_0           = dword ptr  4
.text:0040A430
.text:0040A430                 sub     esp, 1Ch
.text:0040A433                 mov     edx, [esp+1Ch+arg_0]
.text:0040A437                 mov     [esp+1Ch+var_8], edi
.text:0040A43B                 mov     [esp+1Ch+var_10], ebx
.text:0040A43F                 mov     [esp+1Ch+var_C], esi
.text:0040A443                 mov     [esp+1Ch+var_4], ebp
.text:0040A447                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040A44A                 call    sub_40B4D0
.text:0040A44F                 test    eax, eax
.text:0040A451                 mov     edi, eax
.text:0040A453                 jz      short loc_40A490
.text:0040A455                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A458                 call    strlen
.text:0040A45D                 cmp     eax, 2
.text:0040A460                 jbe     short loc_40A46C
.text:0040A462                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040A466                 jz      loc_40A520
.text:0040A46C
.text:0040A46C loc_40A46C:                             ; CODE XREF: sub_40A430+30↑j
.text:0040A46C                                         ; sub_40A430+F4↓j
.text:0040A46C                 test    edi, edi
.text:0040A46E                 jz      short loc_40A490
.text:0040A470                 mov     [esp+1Ch+Str], edi ; Str
.text:0040A473                 call    strlen
.text:0040A478                 cmp     eax, 4
.text:0040A47B                 mov     ebp, eax
.text:0040A47D                 jle     short loc_40A490
.text:0040A47F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040A482                 jz      short loc_40A4B0
.text:0040A484                 lea     esi, [esi+0]
.text:0040A48A                 lea     edi, [edi+0]
.text:0040A490
.text:0040A490 loc_40A490:                             ; CODE XREF: sub_40A430+23↑j
.text:0040A490                                         ; sub_40A430+3E↑j ...
.text:0040A490                 xor     esi, esi
.text:0040A492
.text:0040A492 loc_40A492:                             ; CODE XREF: sub_40A430+CD↓j
.text:0040A492                                         ; sub_40A430+115↓j
.text:0040A492                 mov     [esp+1Ch+Str], edi ; Block
.text:0040A495                 call    free
.text:0040A49A                 mov     eax, esi
.text:0040A49C                 mov     ebx, [esp+1Ch+var_10]
.text:0040A4A0                 mov     esi, [esp+1Ch+var_C]
.text:0040A4A4                 mov     edi, [esp+1Ch+var_8]
.text:0040A4A8                 mov     ebp, [esp+1Ch+var_4]
.text:0040A4AC                 add     esp, 1Ch
.text:0040A4AF                 retn
.text:0040A4B0 ; ---------------------------------------------------------------------------
.text:0040A4B0
.text:0040A4B0 loc_40A4B0:                             ; CODE XREF: sub_40A430+52↑j
.text:0040A4B0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040A4B4                 jnz     short loc_40A490
.text:0040A4B6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A4BE                 lea     ecx, [edi+2]
.text:0040A4C1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040A4C4                 call    strchr
.text:0040A4C9                 test    eax, eax
.text:0040A4CB                 jnz     short loc_40A4FF
.text:0040A4CD
.text:0040A4CD loc_40A4CD:                             ; CODE XREF: sub_40A430+E2↓j
.text:0040A4CD                 inc     ebp
.text:0040A4CE
.text:0040A4CE loc_40A4CE:                             ; CODE XREF: sub_40A430+E9↓j
.text:0040A4CE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040A4D6                 lea     ebx, [ebp+1]
.text:0040A4D9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040A4DC                 call    calloc
.text:0040A4E1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040A4E4                 mov     esi, eax
.text:0040A4E6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040A4EA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040A4EE                 call    strncpy
.text:0040A4F3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040A4F8                 mov     byte ptr [ebp+esi+0], 0
.text:0040A4FD                 jmp     short loc_40A492
.text:0040A4FF ; ---------------------------------------------------------------------------
.text:0040A4FF
.text:0040A4FF loc_40A4FF:                             ; CODE XREF: sub_40A430+9B↑j
.text:0040A4FF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040A507                 inc     eax
.text:0040A508                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A50B                 call    strchr
.text:0040A510                 test    eax, eax
.text:0040A512                 jz      short loc_40A4CD
.text:0040A514                 sub     eax, edi
.text:0040A516                 lea     ebp, [eax+1]
.text:0040A519                 jmp     short loc_40A4CE
.text:0040A519 ; ---------------------------------------------------------------------------
.text:0040A51B                 align 10h
.text:0040A520
.text:0040A520 loc_40A520:                             ; CODE XREF: sub_40A430+36↑j
.text:0040A520                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040A524                 jnz     loc_40A46C
.text:0040A52A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040A531                 call    _strdup
.text:0040A536                 movsx   edx, byte ptr [edi]
.text:0040A539                 mov     esi, eax
.text:0040A53B                 mov     [esp+1Ch+Str], edx ; C
.text:0040A53E                 call    toupper
.text:0040A543                 mov     [esi], al
.text:0040A545                 jmp     loc_40A492
.text:0040A545 sub_40A430      endp
.text:0040A545
.text:0040A545 ; ---------------------------------------------------------------------------
.text:0040A54A                 align 10h
.text:0040A550
.text:0040A550 ; =============== S U B R O U T I N E =======================================
.text:0040A550
.text:0040A550
.text:0040A550 sub_40A550      proc near               ; CODE XREF: .text:0040A6A4↓p
.text:0040A550                                         ; .text:0040A788↓p
.text:0040A550
.text:0040A550 Str             = dword ptr -2Ch
.text:0040A550 Val             = dword ptr -28h
.text:0040A550 var_18          = dword ptr -18h
.text:0040A550 var_11          = byte ptr -11h
.text:0040A550 arg_0           = dword ptr  4
.text:0040A550
.text:0040A550                 push    ebp
.text:0040A551                 push    edi
.text:0040A552                 push    esi
.text:0040A553                 push    ebx
.text:0040A554                 sub     esp, 1Ch
.text:0040A557                 mov     edx, [esp+2Ch+arg_0]
.text:0040A55B                 cmp     edx, ds:dword_4121F0
.text:0040A561                 mov     [esp+2Ch+var_11], 0
.text:0040A566                 jz      loc_40A664
.text:0040A56C                 mov     ebx, ds:dword_4121E0
.text:0040A572                 test    ebx, ebx
.text:0040A574                 jz      short loc_40A5E2
.text:0040A576
.text:0040A576 loc_40A576:                             ; CODE XREF: sub_40A550+10F↓j
.text:0040A576                 mov     ebx, [esp+2Ch+arg_0]
.text:0040A57A                 xor     edi, edi
.text:0040A57C                 xor     esi, esi
.text:0040A57E                 mov     ebp, offset dword_412208
.text:0040A583                 lea     esi, [esi+0]
.text:0040A589                 lea     edi, [edi+0]
.text:0040A590
.text:0040A590 loc_40A590:                             ; CODE XREF: sub_40A550+60↓j
.text:0040A590                 mov     edx, [ebp+4]
.text:0040A593                 mov     ecx, edi
.text:0040A595                 mov     eax, [ebp+0]
.text:0040A598                 shl     ecx, 4
.text:0040A59B                 mov     [esp+2Ch+var_18], ecx
.text:0040A59F                 mov     ecx, edx
.text:0040A5A1                 xor     eax, ebx
.text:0040A5A3                 xor     ecx, esi
.text:0040A5A5                 or      ecx, eax
.text:0040A5A7                 jz      short loc_40A5D1
.text:0040A5A9                 inc     edi
.text:0040A5AA                 add     ebp, 10h
.text:0040A5AD                 cmp     edi, 20h ; ' '
.text:0040A5B0                 jle     short loc_40A590
.text:0040A5B2
.text:0040A5B2 loc_40A5B2:                             ; CODE XREF: sub_40A550+90↓j
.text:0040A5B2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040A5B7                 mov     eax, [esp+2Ch+arg_0]
.text:0040A5BB                 mov     byte_411070, bl
.text:0040A5C1                 mov     ds:dword_4121F0, eax
.text:0040A5C6                 movsx   eax, bl
.text:0040A5C9
.text:0040A5C9 loc_40A5C9:                             ; CODE XREF: sub_40A550+11B↓j
.text:0040A5C9                 add     esp, 1Ch
.text:0040A5CC                 pop     ebx
.text:0040A5CD                 pop     esi
.text:0040A5CE                 pop     edi
.text:0040A5CF                 pop     ebp
.text:0040A5D0                 retn
.text:0040A5D1 ; ---------------------------------------------------------------------------
.text:0040A5D1
.text:0040A5D1 loc_40A5D1:                             ; CODE XREF: sub_40A550+57↑j
.text:0040A5D1                 mov     edx, [esp+2Ch+var_18]
.text:0040A5D5                 movzx   eax, byte ptr ds:dword_412200[edx]
.text:0040A5DC                 mov     [esp+2Ch+var_11], al
.text:0040A5E0                 jmp     short loc_40A5B2
.text:0040A5E2 ; ---------------------------------------------------------------------------
.text:0040A5E2
.text:0040A5E2 loc_40A5E2:                             ; CODE XREF: sub_40A550+24↑j
.text:0040A5E2                 mov     [esp+2Ch+Str], 0
.text:0040A5E9                 call    sub_40CD40
.text:0040A5EE                 test    eax, eax
.text:0040A5F0                 mov     ebx, eax
.text:0040A5F2                 jz      short loc_40A64C
.text:0040A5F4                 movzx   ecx, byte ptr [eax]
.text:0040A5F7                 mov     esi, 0FFFFFFF0h
.text:0040A5FC                 test    cl, cl
.text:0040A5FE                 jz      short loc_40A64C
.text:0040A600
.text:0040A600 loc_40A600:                             ; CODE XREF: sub_40A550+FA↓j
.text:0040A600                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040A603                 movsx   ebp, cl
.text:0040A606                 add     esi, 10h
.text:0040A609                 mov     ds:dword_412200[esi], ebp
.text:0040A60F                 mov     edi, ebp
.text:0040A611                 sar     edi, 1Fh
.text:0040A614                 mov     ds:dword_412204[esi], edi
.text:0040A61A                 call    sub_408D80
.text:0040A61F                 mov     ds:dword_412208[esi], eax
.text:0040A625                 xor     ecx, ecx
.text:0040A627                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040A62A                 mov     ds:dword_41220C[esi], ecx
.text:0040A630                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040A638                 call    strchr
.text:0040A63D                 mov     ebx, eax
.text:0040A63F                 inc     ebx
.text:0040A640                 jz      short loc_40A64C
.text:0040A642                 movzx   edx, byte ptr [eax+1]
.text:0040A646                 test    dl, dl
.text:0040A648                 mov     cl, dl
.text:0040A64A                 jnz     short loc_40A600
.text:0040A64C
.text:0040A64C loc_40A64C:                             ; CODE XREF: sub_40A550+A2↑j
.text:0040A64C                                         ; sub_40A550+AE↑j ...
.text:0040A64C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040A64F                 mov     esi, 1
.text:0040A654                 mov     ds:dword_4121E0, esi
.text:0040A65A                 call    free
.text:0040A65F                 jmp     loc_40A576
.text:0040A664 ; ---------------------------------------------------------------------------
.text:0040A664
.text:0040A664 loc_40A664:                             ; CODE XREF: sub_40A550+16↑j
.text:0040A664                 movsx   eax, byte_411070
.text:0040A66B                 jmp     loc_40A5C9
.text:0040A66B sub_40A550      endp
.text:0040A66B
.text:0040A66B ; ---------------------------------------------------------------------------
.text:0040A670 dword_40A670    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040A670                                         ; DATA XREF: .text:0040A693↓o
.text:0040A670                                         ; .text:0040A773↓o
.text:0040A680 ; ---------------------------------------------------------------------------
.text:0040A680                 sub     esp, 1Ch
.text:0040A683                 mov     [esp+14h], esi
.text:0040A687                 mov     esi, [esp+20h]
.text:0040A68B                 mov     [esp+18h], edi
.text:0040A68F                 mov     [esp+10h], ebx
.text:0040A693                 mov     dword ptr [esp], offset dword_40A670
.text:0040A69A                 call    _strdup
.text:0040A69F                 mov     [esp], esi
.text:0040A6A2                 mov     edi, eax
.text:0040A6A4                 call    sub_40A550
.text:0040A6A9                 mov     [edi], al
.text:0040A6AB                 test    al, al
.text:0040A6AD                 jz      short loc_40A6C1
.text:0040A6AF                 mov     eax, edi
.text:0040A6B1                 mov     ebx, [esp+10h]
.text:0040A6B5                 mov     esi, [esp+14h]
.text:0040A6B9                 mov     edi, [esp+18h]
.text:0040A6BD                 add     esp, 1Ch
.text:0040A6C0                 retn
.text:0040A6C1 ; ---------------------------------------------------------------------------
.text:0040A6C1
.text:0040A6C1 loc_40A6C1:                             ; CODE XREF: .text:0040A6AD↑j
.text:0040A6C1                 mov     [esp], edi
.text:0040A6C4                 call    free
.text:0040A6C9                 mov     dword ptr [esp+4], 0
.text:0040A6D1                 mov     dword ptr [esp], 0
.text:0040A6D8                 call    GetCurrentDirectoryA
.text:0040A6DD                 sub     esp, 8
.text:0040A6E0                 lea     esi, [eax+1]
.text:0040A6E3                 mov     [esp], esi
.text:0040A6E6                 call    malloc
.text:0040A6EB                 mov     [esp+4], eax
.text:0040A6EF                 mov     edi, eax
.text:0040A6F1                 mov     [esp], esi
.text:0040A6F4                 call    GetCurrentDirectoryA
.text:0040A6F9                 sub     esp, 8
.text:0040A6FC                 test    eax, eax
.text:0040A6FE                 jnz     short loc_40A720
.text:0040A700                 mov     dword ptr [esp+20h], 40A674h
.text:0040A708                 mov     ebx, [esp+10h]
.text:0040A70C                 mov     esi, [esp+14h]
.text:0040A710                 mov     edi, [esp+18h]
.text:0040A714                 add     esp, 1Ch
.text:0040A717                 jmp     _strdup
.text:0040A717 ; ---------------------------------------------------------------------------
.text:0040A71C                 align 10h
.text:0040A720
.text:0040A720 loc_40A720:                             ; CODE XREF: .text:0040A6FE↑j
.text:0040A720                 mov     [esp+20h], edi
.text:0040A724                 mov     ebx, [esp+10h]
.text:0040A728                 mov     esi, [esp+14h]
.text:0040A72C                 mov     edi, [esp+18h]
.text:0040A730                 add     esp, 1Ch
.text:0040A733                 jmp     sub_40A430
.text:0040A733 ; ---------------------------------------------------------------------------
.text:0040A738                 align 10h
.text:0040A740                 sub     esp, 7Ch
.text:0040A743                 lea     edx, [esp+10h]
.text:0040A747                 mov     [esp+8], edx
.text:0040A74B                 mov     edx, [esp+80h]
.text:0040A752                 mov     [esp+70h], ebx
.text:0040A756                 mov     [esp+74h], esi
.text:0040A75A                 mov     [esp+4], edx
.text:0040A75E                 mov     [esp+78h], edi
.text:0040A762                 mov     dword ptr [esp], 0
.text:0040A769                 call    sub_407FD0
.text:0040A76E                 xor     edx, edx
.text:0040A770                 inc     eax
.text:0040A771                 jz      short loc_40A795
.text:0040A773                 mov     dword ptr [esp], offset dword_40A670
.text:0040A77A                 mov     esi, [esp+20h]
.text:0040A77E                 call    _strdup
.text:0040A783                 mov     edi, eax
.text:0040A785                 mov     [esp], esi
.text:0040A788                 call    sub_40A550
.text:0040A78D                 mov     [edi], al
.text:0040A78F                 test    al, al
.text:0040A791                 mov     edx, edi
.text:0040A793                 jz      short loc_40A7A7
.text:0040A795
.text:0040A795 loc_40A795:                             ; CODE XREF: .text:0040A771↑j
.text:0040A795                                         ; .text:0040A7F4↓j
.text:0040A795                 mov     ebx, [esp+70h]
.text:0040A799                 mov     eax, edx
.text:0040A79B                 mov     esi, [esp+74h]
.text:0040A79F                 mov     edi, [esp+78h]
.text:0040A7A3                 add     esp, 7Ch
.text:0040A7A6                 retn
.text:0040A7A7 ; ---------------------------------------------------------------------------
.text:0040A7A7
.text:0040A7A7 loc_40A7A7:                             ; CODE XREF: .text:0040A793↑j
.text:0040A7A7                 mov     [esp], edi
.text:0040A7AA                 call    free
.text:0040A7AF                 mov     dword ptr [esp+4], 0
.text:0040A7B7                 mov     dword ptr [esp], 0
.text:0040A7BE                 call    GetCurrentDirectoryA
.text:0040A7C3                 sub     esp, 8
.text:0040A7C6                 lea     esi, [eax+1]
.text:0040A7C9                 mov     [esp], esi
.text:0040A7CC                 call    malloc
.text:0040A7D1                 mov     [esp+4], eax
.text:0040A7D5                 mov     edi, eax
.text:0040A7D7                 mov     [esp], esi
.text:0040A7DA                 call    GetCurrentDirectoryA
.text:0040A7DF                 sub     esp, 8
.text:0040A7E2                 test    eax, eax
.text:0040A7E4                 jnz     short loc_40A7F6
.text:0040A7E6                 mov     dword ptr [esp], 40A674h
.text:0040A7ED                 call    _strdup
.text:0040A7F2
.text:0040A7F2 loc_40A7F2:                             ; CODE XREF: .text:0040A7FE↓j
.text:0040A7F2                 mov     edx, eax
.text:0040A7F4                 jmp     short loc_40A795
.text:0040A7F6 ; ---------------------------------------------------------------------------
.text:0040A7F6
.text:0040A7F6 loc_40A7F6:                             ; CODE XREF: .text:0040A7E4↑j
.text:0040A7F6                 mov     [esp], edi
.text:0040A7F9                 call    sub_40A430
.text:0040A7FE                 jmp     short loc_40A7F2
.text:0040A800
.text:0040A800 ; =============== S U B R O U T I N E =======================================
.text:0040A800
.text:0040A800
.text:0040A800 ; int __cdecl sub_40A800(LPCSTR)
.text:0040A800 sub_40A800      proc near               ; CODE XREF: sub_407FD0+38F↑p
.text:0040A800
.text:0040A800 String1         = dword ptr -1Ch
.text:0040A800 String2         = dword ptr -18h
.text:0040A800 var_C           = dword ptr -0Ch
.text:0040A800 var_8           = dword ptr -8
.text:0040A800 var_4           = dword ptr -4
.text:0040A800 arg_0           = dword ptr  4
.text:0040A800
.text:0040A800                 sub     esp, 1Ch
.text:0040A803                 mov     [esp+1Ch+var_4], edi
.text:0040A807                 mov     edi, [esp+1Ch+arg_0]
.text:0040A80B                 mov     [esp+1Ch+var_C], ebx
.text:0040A80F                 mov     [esp+1Ch+var_8], esi
.text:0040A813                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A816                 call    sub_40B4D0
.text:0040A81B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040A81E                 mov     esi, eax
.text:0040A820                 call    sub_40A430
.text:0040A825                 mov     [esp+1Ch+String2], eax ; String2
.text:0040A829                 mov     ebx, eax
.text:0040A82B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040A82E                 call    _stricmp
.text:0040A833                 test    eax, eax
.text:0040A835                 setz    dl
.text:0040A838                 test    esi, esi
.text:0040A83A                 movzx   edi, dl
.text:0040A83D                 jz      short loc_40A847
.text:0040A83F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040A842                 call    free
.text:0040A847
.text:0040A847 loc_40A847:                             ; CODE XREF: sub_40A800+3D↑j
.text:0040A847                 test    ebx, ebx
.text:0040A849                 jz      short loc_40A853
.text:0040A84B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040A84E                 call    free
.text:0040A853
.text:0040A853 loc_40A853:                             ; CODE XREF: sub_40A800+49↑j
.text:0040A853                 mov     eax, edi
.text:0040A855                 mov     ebx, [esp+1Ch+var_C]
.text:0040A859                 mov     esi, [esp+1Ch+var_8]
.text:0040A85D                 mov     edi, [esp+1Ch+var_4]
.text:0040A861                 add     esp, 1Ch
.text:0040A864                 retn
.text:0040A864 sub_40A800      endp
.text:0040A864
.text:0040A864 ; ---------------------------------------------------------------------------
.text:0040A865                 align 10h
.text:0040A870 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040A8C1↓o
.text:0040A879 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040A879                                         ; DATA XREF: .text:0040A8D2↓o
.text:0040A88D ; const CHAR FileName[]
.text:0040A88D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040AA1C↓o
.text:0040A88D                                         ; sub_40AE50+17C↓o
.text:0040A898 ; ---------------------------------------------------------------------------
.text:0040A898
.text:0040A898 loc_40A898:                             ; DATA XREF: .text:0040AB32↓o
.text:0040A898                 dec     esi
.text:0040A899                 push    esp
.text:0040A89A                 inc     esi
.text:0040A89B                 push    ebx
.text:0040A89C                 add     [esi+41h], al
.text:0040A89F                 push    esp
.text:0040A8A0                 xor     esi, [edx]
.text:0040A8A2                 add     [esi+41h], al
.text:0040A8A5                 push    esp
.text:0040A8A6                 add     [ebx+44h], al
.text:0040A8A9                 inc     esi
.text:0040A8AA                 push    ebx
.text:0040A8AB
.text:0040A8AB loc_40A8AB:                             ; CODE XREF: sub_40AE50+101↓p
.text:0040A8AB                 add     [ebp+55002674h], cl
.text:0040A8B1                 push    edi
.text:0040A8B2                 push    esi
.text:0040A8B3                 push    ebx
.text:0040A8B4                 sub     esp, 8BCh
.text:0040A8BA                 mov     ebp, [esp+8D0h]
.text:0040A8C1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040A8C8                 call    LoadLibraryA
.text:0040A8CD                 sub     esp, 4
.text:0040A8D0                 mov     edi, eax
.text:0040A8D2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040A8DA                 mov     [esp], eax
.text:0040A8DD                 call    GetProcAddress
.text:0040A8E2                 sub     esp, 8
.text:0040A8E5                 mov     esi, eax
.text:0040A8E7                 test    ebp, ebp
.text:0040A8E9                 mov     dword ptr [esp+20h], 0
.text:0040A8F1                 jz      loc_40AE31
.text:0040A8F7                 mov     [esp], ebp
.text:0040A8FA                 call    sub_40A000
.text:0040A8FF                 mov     [esp], eax
.text:0040A902                 mov     ebp, eax
.text:0040A904                 call    strlen
.text:0040A909                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040A90E                 mov     ebx, eax
.text:0040A910                 jz      short loc_40A92C
.text:0040A912                 mov     [esp], ebp
.text:0040A915                 lea     edx, [eax+1]
.text:0040A918                 mov     [esp+4], edx
.text:0040A91C                 call    realloc
.text:0040A921                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040A925                 mov     ebp, eax
.text:0040A927                 mov     byte ptr [ebx+eax+1], 0
.text:0040A92C
.text:0040A92C loc_40A92C:                             ; CODE XREF: .text:0040A910↑j
.text:0040A92C                 mov     dword ptr [esp+1Ch], 400h
.text:0040A934                 lea     edx, [esp+0B0h]
.text:0040A93B                 lea     ebx, [esp+5Ch]
.text:0040A93F                 mov     [esp+18h], edx
.text:0040A943                 lea     ecx, [esp+58h]
.text:0040A947                 lea     edx, [esp+54h]
.text:0040A94B                 mov     [esp+14h], ebx
.text:0040A94F                 lea     eax, [esp+4B0h]
.text:0040A956                 mov     [esp+10h], ecx
.text:0040A95A                 mov     [esp+0Ch], edx
.text:0040A95E                 mov     dword ptr [esp+8], 400h
.text:0040A966                 mov     [esp+4], eax
.text:0040A96A                 mov     [esp], ebp
.text:0040A96D                 call    GetVolumeInformationA
.text:0040A972                 sub     esp, 20h
.text:0040A975                 test    eax, eax
.text:0040A977                 jz      loc_40AE0E
.text:0040A97D                 test    esi, esi
.text:0040A97F                 jz      short loc_40A9A5
.text:0040A981                 mov     [esp], ebp
.text:0040A984                 lea     edx, [esp+48h]
.text:0040A988                 lea     ebx, [esp+40h]
.text:0040A98C                 mov     [esp+0Ch], edx
.text:0040A990                 lea     ecx, [esp+38h]
.text:0040A994                 mov     [esp+8], ebx
.text:0040A998                 mov     [esp+4], ecx
.text:0040A99C                 call    esi
.text:0040A99E                 sub     esp, 10h
.text:0040A9A1                 mov     [esp+20h], eax
.text:0040A9A5
.text:0040A9A5 loc_40A9A5:                             ; CODE XREF: .text:0040A97F↑j
.text:0040A9A5                 test    edi, edi
.text:0040A9A7                 jz      short loc_40A9B4
.text:0040A9A9                 mov     [esp], edi
.text:0040A9AC                 call    FreeLibrary
.text:0040A9B1                 sub     esp, 4
.text:0040A9B4
.text:0040A9B4 loc_40A9B4:                             ; CODE XREF: .text:0040A9A7↑j
.text:0040A9B4                 call    sub_40BF60
.text:0040A9B9                 test    eax, eax
.text:0040A9BB                 lea     esi, [esp+28h]
.text:0040A9BF                 jz      loc_40ADF0
.text:0040A9C5                 call    sub_40BF60
.text:0040A9CA                 test    eax, eax
.text:0040A9CC                 jz      short loc_40A9DC
.text:0040A9CE                 call    sub_40BEB0
.text:0040A9D3                 cmp     eax, 0Bh
.text:0040A9D6                 jle     loc_40ADC4
.text:0040A9DC
.text:0040A9DC loc_40A9DC:                             ; CODE XREF: .text:0040A9CC↑j
.text:0040A9DC                 cld
.text:0040A9DD                 xor     eax, eax
.text:0040A9DF                 lea     ebx, [esp+60h]
.text:0040A9E3                 mov     ecx, 7
.text:0040A9E8                 mov     edi, ebx
.text:0040A9EA                 rep stosd
.text:0040A9EC                 mov     dword ptr [esp+18h], 0
.text:0040A9F4                 mov     dword ptr [esp+14h], 4000000h
.text:0040A9FC                 mov     dword ptr [esp+10h], 0
.text:0040AA04                 mov     dword ptr [esp+0Ch], 0
.text:0040AA0C                 mov     dword ptr [esp+8], 0
.text:0040AA14                 mov     dword ptr [esp+4], 0
.text:0040AA1C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040AA23                 call    CreateFileA
.text:0040AA28                 sub     esp, 1Ch
.text:0040AA2B                 mov     edi, eax
.text:0040AA2D                 cmp     eax, 0FFFFFFFFh
.text:0040AA30                 jz      short loc_40AAB0
.text:0040AA32                 mov     [esp+10h], ebx
.text:0040AA36                 lea     edx, [esp+80h]
.text:0040AA3D                 lea     ecx, [esp+24h]
.text:0040AA41                 mov     [esp+70h], edx
.text:0040AA45                 mov     [esp+18h], ecx
.text:0040AA49                 mov     [esp+8], ebx
.text:0040AA4D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040AA55                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040AA5D                 mov     [esp+64h], ebp
.text:0040AA61                 mov     dword ptr [esp+78h], 1
.text:0040AA69                 mov     dword ptr [esp+1Ch], 0
.text:0040AA71                 mov     dword ptr [esp+14h], 1Ch
.text:0040AA79                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040AA81                 mov     dword ptr [esp+4], 6
.text:0040AA89                 mov     [esp], eax
.text:0040AA8C                 call    DeviceIoControl
.text:0040AA91                 sub     esp, 20h
.text:0040AA94                 mov     ebx, eax
.text:0040AA96                 mov     [esp], edi
.text:0040AA99                 call    CloseHandle
.text:0040AA9E                 sub     esp, 4
.text:0040AAA1                 test    ebx, ebx
.text:0040AAA3                 jz      short loc_40AAB0
.text:0040AAA5                 test    byte ptr [esp+78h], 1
.text:0040AAAA                 jz      loc_40AD90
.text:0040AAB0
.text:0040AAB0 loc_40AAB0:                             ; CODE XREF: .text:0040AA30↑j
.text:0040AAB0                                         ; .text:0040AAA3↑j
.text:0040AAB0                 call    sub_40B480
.text:0040AAB5                 mov     edi, eax
.text:0040AAB7                 call    _errno
.text:0040AABC                 mov     [eax], edi
.text:0040AABE                 xor     eax, eax
.text:0040AAC0
.text:0040AAC0 loc_40AAC0:                             ; CODE XREF: .text:0040ADBF↓j
.text:0040AAC0                                         ; .text:0040ADEB↓j
.text:0040AAC0                 test    eax, eax
.text:0040AAC2                 jnz     short loc_40AAE4
.text:0040AAC4                 mov     dword ptr [esp+34h], 1
.text:0040AACC                 mov     dword ptr [esp+30h], 200h
.text:0040AAD4                 mov     dword ptr [esp+2Ch], 0
.text:0040AADC                 mov     dword ptr [esp+28h], 0
.text:0040AAE4
.text:0040AAE4 loc_40AAE4:                             ; CODE XREF: .text:0040AAC2↑j
.text:0040AAE4                 mov     edx, [esp+30h]
.text:0040AAE8                 mov     edi, [esp+34h]
.text:0040AAEC                 mov     ecx, [esp+20h]
.text:0040AAF0                 imul    edi, edx
.text:0040AAF3                 test    ecx, ecx
.text:0040AAF5                 jnz     short loc_40AB1D
.text:0040AAF7                 mov     eax, [esp+28h]
.text:0040AAFB                 mul     edi
.text:0040AAFD                 mov     esi, eax
.text:0040AAFF                 mov     eax, [esp+2Ch]
.text:0040AB03                 mov     [esp+44h], edx
.text:0040AB07                 mov     [esp+40h], esi
.text:0040AB0B                 mul     edi
.text:0040AB0D                 mov     [esp+48h], eax
.text:0040AB11                 mov     [esp+4Ch], edx
.text:0040AB15                 mov     [esp+38h], eax
.text:0040AB19                 mov     [esp+3Ch], edx
.text:0040AB1D
.text:0040AB1D loc_40AB1D:                             ; CODE XREF: .text:0040AAF5↑j
.text:0040AB1D                 mov     ebx, [esp+5Ch]
.text:0040AB21                 lea     edx, [esp+0B0h]
.text:0040AB28                 mov     ecx, [esp+8D4h]
.text:0040AB2F                 mov     [ecx+48h], ebx
.text:0040AB32                 mov     dword ptr [esp+4], offset loc_40A898
.text:0040AB3A                 mov     [esp], edx
.text:0040AB3D                 call    _stricmp
.text:0040AB42                 test    eax, eax
.text:0040AB44                 jnz     loc_40AD00
.text:0040AB4A                 mov     esi, [esp+8D4h]
.text:0040AB51                 mov     dword ptr [esi], 5346544Eh
.text:0040AB57
.text:0040AB57 loc_40AB57:                             ; CODE XREF: .text:0040AD28↓j
.text:0040AB57                                         ; .text:0040AD55↓j ...
.text:0040AB57                 mov     ebx, [esp+30h]
.text:0040AB5B                 mov     esi, [esp+8D4h]
.text:0040AB62                 mov     [esi+4], ebx
.text:0040AB65                 mov     [esi+8], ebx
.text:0040AB68                 mov     ebx, [esi+8]
.text:0040AB6B                 mov     [esi+0Ch], edi
.text:0040AB6E                 mov     ecx, [esp+44h]
.text:0040AB72                 xor     esi, esi
.text:0040AB74                 mov     [esp+8], ebx
.text:0040AB78                 mov     edx, [esp+40h]
.text:0040AB7C                 mov     [esp+0Ch], esi
.text:0040AB80                 mov     [esp+4], ecx
.text:0040AB84                 mov     [esp], edx
.text:0040AB87                 call    sub_40F4C0
.text:0040AB8C                 mov     ecx, [esp+8D4h]
.text:0040AB93                 mov     [ecx+10h], eax
.text:0040AB96                 mov     [ecx+14h], edx
.text:0040AB99                 mov     ecx, [esp+4Ch]
.text:0040AB9D                 mov     [esp+8], ebx
.text:0040ABA1                 mov     edx, [esp+48h]
.text:0040ABA5                 mov     [esp+0Ch], esi
.text:0040ABA9                 mov     [esp+4], ecx
.text:0040ABAD                 mov     [esp], edx
.text:0040ABB0                 call    sub_40F4C0
.text:0040ABB5                 mov     ecx, [esp+8D4h]
.text:0040ABBC                 mov     [ecx+18h], eax
.text:0040ABBF                 mov     [ecx+1Ch], edx
.text:0040ABC2                 mov     ecx, [esp+38h]
.text:0040ABC6                 mov     [esp+8], ebx
.text:0040ABCA                 mov     ebx, [esp+3Ch]
.text:0040ABCE                 mov     [esp+0Ch], esi
.text:0040ABD2                 mov     [esp], ecx
.text:0040ABD5                 mov     [esp+4], ebx
.text:0040ABD9                 call    sub_40F4C0
.text:0040ABDE                 mov     esi, [esp+8D4h]
.text:0040ABE5                 mov     [esi+20h], eax
.text:0040ABE8                 mov     [esi+24h], edx
.text:0040ABEB                 mov     ecx, [esp+44h]
.text:0040ABEF                 mov     esi, edi
.text:0040ABF1                 mov     [esp+8], esi
.text:0040ABF5                 mov     edx, [esp+40h]
.text:0040ABF9                 xor     edi, edi
.text:0040ABFB                 mov     [esp+0Ch], edi
.text:0040ABFF                 mov     [esp+4], ecx
.text:0040AC03                 mov     [esp], edx
.text:0040AC06                 call    sub_40F4C0
.text:0040AC0B                 mov     ebx, [esp+8D4h]
.text:0040AC12                 mov     [ebx+28h], eax
.text:0040AC15                 mov     [ebx+2Ch], edx
.text:0040AC18                 mov     ecx, [esp+4Ch]
.text:0040AC1C                 mov     [esp+8], esi
.text:0040AC20                 mov     edx, [esp+48h]
.text:0040AC24                 mov     [esp+0Ch], edi
.text:0040AC28                 mov     [esp+4], ecx
.text:0040AC2C                 mov     [esp], edx
.text:0040AC2F                 call    sub_40F4C0
.text:0040AC34                 mov     ebx, [esp+8D4h]
.text:0040AC3B                 mov     [ebx+30h], eax
.text:0040AC3E                 mov     [ebx+34h], edx
.text:0040AC41                 mov     ecx, [esp+3Ch]
.text:0040AC45                 mov     [esp+8], esi
.text:0040AC49                 mov     edx, [esp+38h]
.text:0040AC4D                 mov     [esp+0Ch], edi
.text:0040AC51                 mov     [esp+4], ecx
.text:0040AC55                 mov     [esp], edx
.text:0040AC58                 call    sub_40F4C0
.text:0040AC5D                 mov     edx, [esp+8D4h]
.text:0040AC64                 lea     ecx, [esp+0B0h]
.text:0040AC6B                 mov     [edx+38h], eax
.text:0040AC6E                 mov     esi, [esp+58h]
.text:0040AC72                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040AC79                 mov     [edx+110h], esi
.text:0040AC7F                 mov     esi, edx
.text:0040AC81                 add     esi, 4Ch ; 'L'
.text:0040AC84                 movzx   ebx, word ptr [esp+56h]
.text:0040AC89                 movzx   edi, word ptr [esp+54h]
.text:0040AC8E                 mov     [edx+3Ch], ebx
.text:0040AC91                 lea     ebx, [esp+4B0h]
.text:0040AC98                 mov     [edx+40h], edi
.text:0040AC9B                 mov     [esp+4], ecx
.text:0040AC9F                 mov     dword ptr [esp+8], 10h
.text:0040ACA7                 mov     [esp], esi
.text:0040ACAA                 call    strncpy
.text:0040ACAF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040ACB7                 mov     edi, [esp+8D4h]
.text:0040ACBE                 mov     [esp+4], ebx
.text:0040ACC2                 add     edi, 5Ch ; '\'
.text:0040ACC5                 mov     [esp], edi
.text:0040ACC8                 call    strncpy
.text:0040ACCD                 mov     [esp+4], ebp
.text:0040ACD1                 mov     ebp, [esp+8D4h]
.text:0040ACD8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040ACE0                 add     ebp, 0B6h ; '¶'
.text:0040ACE6                 mov     [esp], ebp
.text:0040ACE9                 call    strncpy
.text:0040ACEE                 xor     eax, eax
.text:0040ACF0
.text:0040ACF0 loc_40ACF0:                             ; CODE XREF: .text:0040AE2C↓j
.text:0040ACF0                 add     esp, 8BCh
.text:0040ACF6                 pop     ebx
.text:0040ACF7                 pop     esi
.text:0040ACF8                 pop     edi
.text:0040ACF9                 pop     ebp
.text:0040ACFA                 retn
.text:0040ACFA ; ---------------------------------------------------------------------------
.text:0040ACFB                 align 10h
.text:0040AD00
.text:0040AD00 loc_40AD00:                             ; CODE XREF: .text:0040AB44↑j
.text:0040AD00                 mov     dword ptr [esp+4], 40A89Dh
.text:0040AD08                 lea     eax, [esp+0B0h]
.text:0040AD0F                 mov     [esp], eax
.text:0040AD12                 call    _stricmp
.text:0040AD17                 test    eax, eax
.text:0040AD19                 jnz     short loc_40AD2D
.text:0040AD1B                 mov     edx, [esp+8D4h]
.text:0040AD22                 mov     dword ptr [edx], 4008h
.text:0040AD28                 jmp     loc_40AB57
.text:0040AD2D ; ---------------------------------------------------------------------------
.text:0040AD2D
.text:0040AD2D loc_40AD2D:                             ; CODE XREF: .text:0040AD19↑j
.text:0040AD2D                 mov     dword ptr [esp+4], 40A8A3h
.text:0040AD35                 lea     ecx, [esp+0B0h]
.text:0040AD3C                 mov     [esp], ecx
.text:0040AD3F                 call    _stricmp
.text:0040AD44                 test    eax, eax
.text:0040AD46                 jnz     short loc_40AD5A
.text:0040AD48                 mov     ebx, [esp+8D4h]
.text:0040AD4F                 mov     dword ptr [ebx], 4006h
.text:0040AD55                 jmp     loc_40AB57
.text:0040AD5A ; ---------------------------------------------------------------------------
.text:0040AD5A
.text:0040AD5A loc_40AD5A:                             ; CODE XREF: .text:0040AD46↑j
.text:0040AD5A                 mov     dword ptr [esp+4], 40A8A7h
.text:0040AD62                 lea     eax, [esp+0B0h]
.text:0040AD69                 mov     [esp], eax
.text:0040AD6C                 call    _stricmp
.text:0040AD71                 test    eax, eax
.text:0040AD73                 mov     esi, [esp+8D4h]
.text:0040AD7A                 setnz   cl
.text:0040AD7D                 movzx   edx, cl
.text:0040AD80                 dec     edx
.text:0040AD81                 and     edx, 4000h
.text:0040AD87                 mov     [esi], edx
.text:0040AD89                 jmp     loc_40AB57
.text:0040AD89 ; ---------------------------------------------------------------------------
.text:0040AD8E                 align 10h
.text:0040AD90
.text:0040AD90 loc_40AD90:                             ; CODE XREF: .text:0040AAAA↑j
.text:0040AD90                 mov     edi, [esp+84h]
.text:0040AD97                 mov     eax, 1
.text:0040AD9C                 mov     edx, [esp+88h]
.text:0040ADA3                 mov     ecx, [esp+8Ch]
.text:0040ADAA                 mov     ebx, [esp+90h]
.text:0040ADB1                 mov     [esp+34h], edi
.text:0040ADB5                 mov     [esp+30h], edx
.text:0040ADB9                 mov     [esp+2Ch], ecx
.text:0040ADBD                 mov     [esi], ebx
.text:0040ADBF                 jmp     loc_40AAC0
.text:0040ADC4 ; ---------------------------------------------------------------------------
.text:0040ADC4
.text:0040ADC4 loc_40ADC4:                             ; CODE XREF: .text:0040A9D6↑j
.text:0040ADC4                 mov     [esp+10h], esi
.text:0040ADC8                 lea     eax, [esp+2Ch]
.text:0040ADCC                 lea     esi, [esp+30h]
.text:0040ADD0                 mov     [esp+0Ch], eax
.text:0040ADD4                 lea     edi, [esp+34h]
.text:0040ADD8                 mov     [esp+8], esi
.text:0040ADDC                 mov     [esp+4], edi
.text:0040ADE0
.text:0040ADE0 loc_40ADE0:                             ; CODE XREF: .text:0040AE0C↓j
.text:0040ADE0                 mov     [esp], ebp
.text:0040ADE3                 call    GetDiskFreeSpaceA
.text:0040ADE8                 sub     esp, 14h
.text:0040ADEB                 jmp     loc_40AAC0
.text:0040ADF0 ; ---------------------------------------------------------------------------
.text:0040ADF0
.text:0040ADF0 loc_40ADF0:                             ; CODE XREF: .text:0040A9BF↑j
.text:0040ADF0                 mov     [esp+10h], esi
.text:0040ADF4                 lea     ebx, [esp+2Ch]
.text:0040ADF8                 lea     eax, [esp+30h]
.text:0040ADFC                 mov     [esp+0Ch], ebx
.text:0040AE00                 lea     esi, [esp+34h]
.text:0040AE04                 mov     [esp+8], eax
.text:0040AE08                 mov     [esp+4], esi
.text:0040AE0C                 jmp     short loc_40ADE0
.text:0040AE0E ; ---------------------------------------------------------------------------
.text:0040AE0E
.text:0040AE0E loc_40AE0E:                             ; CODE XREF: .text:0040A977↑j
.text:0040AE0E                 mov     [esp], edi
.text:0040AE11                 call    FreeLibrary
.text:0040AE16                 sub     esp, 4
.text:0040AE19                 call    sub_40B480
.text:0040AE1E                 mov     esi, eax
.text:0040AE20                 call    _errno
.text:0040AE25                 mov     [eax], esi
.text:0040AE27
.text:0040AE27 loc_40AE27:                             ; CODE XREF: .text:0040AE47↓j
.text:0040AE27                 mov     eax, 0FFFFFFFFh
.text:0040AE2C                 jmp     loc_40ACF0
.text:0040AE31 ; ---------------------------------------------------------------------------
.text:0040AE31
.text:0040AE31 loc_40AE31:                             ; CODE XREF: .text:0040A8F1↑j
.text:0040AE31                 mov     [esp], edi
.text:0040AE34                 call    FreeLibrary
.text:0040AE39                 sub     esp, 4
.text:0040AE3C                 call    _errno
.text:0040AE41                 mov     dword ptr [eax], 2
.text:0040AE47                 jmp     short loc_40AE27
.text:0040AE47 ; ---------------------------------------------------------------------------
.text:0040AE49                 align 10h
.text:0040AE50
.text:0040AE50 ; =============== S U B R O U T I N E =======================================
.text:0040AE50
.text:0040AE50
.text:0040AE50 ; int __cdecl sub_40AE50(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040AE50 sub_40AE50      proc near               ; CODE XREF: sub_408880+2C7↑p
.text:0040AE50                                         ; .text:00408EBA↑p
.text:0040AE50
.text:0040AE50 lpFileName      = dword ptr -9Ch
.text:0040AE50 dwDesiredAccess = dword ptr -98h
.text:0040AE50 dwShareMode     = dword ptr -94h
.text:0040AE50 lpSecurityAttributes= dword ptr -90h
.text:0040AE50 dwCreationDisposition= dword ptr -8Ch
.text:0040AE50 dwFlagsAndAttributes= dword ptr -88h
.text:0040AE50 hTemplateFile   = dword ptr -84h
.text:0040AE50 lpOverlapped    = dword ptr -80h
.text:0040AE50 BytesReturned   = dword ptr -70h
.text:0040AE50 InBuffer        = byte ptr -6Ch
.text:0040AE50 var_68          = dword ptr -68h
.text:0040AE50 var_64          = dword ptr -64h
.text:0040AE50 var_60          = dword ptr -60h
.text:0040AE50 var_5C          = dword ptr -5Ch
.text:0040AE50 var_54          = dword ptr -54h
.text:0040AE50 var_4C          = byte ptr -4Ch
.text:0040AE50 var_48          = dword ptr -48h
.text:0040AE50 var_44          = dword ptr -44h
.text:0040AE50 var_40          = dword ptr -40h
.text:0040AE50 var_3C          = dword ptr -3Ch
.text:0040AE50 lpRootPathName  = dword ptr -2Ch
.text:0040AE50 lpSectorsPerCluster= dword ptr -28h
.text:0040AE50 lpBytesPerSector= dword ptr -24h
.text:0040AE50 lpNumberOfFreeClusters= dword ptr -20h
.text:0040AE50 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040AE50 var_18          = dword ptr -18h
.text:0040AE50 var_14          = dword ptr -14h
.text:0040AE50 var_10          = dword ptr -10h
.text:0040AE50 var_C           = dword ptr -0Ch
.text:0040AE50 var_8           = dword ptr -8
.text:0040AE50 var_4           = dword ptr -4
.text:0040AE50 arg_0           = dword ptr  4
.text:0040AE50 arg_4           = dword ptr  8
.text:0040AE50 arg_8           = dword ptr  0Ch
.text:0040AE50 arg_C           = dword ptr  10h
.text:0040AE50 arg_10          = dword ptr  14h
.text:0040AE50
.text:0040AE50                 sub     esp, 2Ch
.text:0040AE53                 mov     edx, [esp+2Ch+arg_0]
.text:0040AE57                 mov     [esp+2Ch+var_10], ebx
.text:0040AE5B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040AE5F                 mov     [esp+2Ch+var_C], esi
.text:0040AE63                 mov     esi, [esp+2Ch+arg_C]
.text:0040AE67                 mov     [esp+2Ch+var_8], edi
.text:0040AE6B                 mov     edi, [esp+2Ch+arg_8]
.text:0040AE6F                 mov     [esp+2Ch+var_4], ebp
.text:0040AE73                 mov     ebp, [esp+2Ch+arg_4]
.text:0040AE77                 mov     [esp+2Ch+var_14], edx
.text:0040AE7B                 call    sub_40BF60
.text:0040AE80                 test    eax, eax
.text:0040AE82                 jz      short loc_40AEB4
.text:0040AE84                 mov     [esp+2Ch+arg_10], ebx
.text:0040AE88                 mov     edx, [esp+2Ch+var_14]
.text:0040AE8C                 mov     ebx, [esp+2Ch+var_10]
.text:0040AE90                 mov     [esp+2Ch+arg_C], esi
.text:0040AE94                 mov     esi, [esp+2Ch+var_C]
.text:0040AE98                 mov     [esp+2Ch+arg_8], edi
.text:0040AE9C                 mov     edi, [esp+2Ch+var_8]
.text:0040AEA0                 mov     [esp+2Ch+arg_4], ebp
.text:0040AEA4                 mov     ebp, [esp+2Ch+var_4]
.text:0040AEA8                 mov     [esp+2Ch+arg_0], edx
.text:0040AEAC                 add     esp, 2Ch
.text:0040AEAF                 jmp     loc_40AF60
.text:0040AEB4 ; ---------------------------------------------------------------------------
.text:0040AEB4
.text:0040AEB4 loc_40AEB4:                             ; CODE XREF: sub_40AE50+32↑j
.text:0040AEB4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040AEB8                 mov     ecx, [esp+2Ch+var_14]
.text:0040AEBC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040AEC0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040AEC4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040AEC8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040AECB                 call    GetDiskFreeSpaceA
.text:0040AED0                 sub     esp, 14h
.text:0040AED3                 mov     ebx, [esp+2Ch+var_10]
.text:0040AED7                 mov     esi, [esp+2Ch+var_C]
.text:0040AEDB                 mov     edi, [esp+2Ch+var_8]
.text:0040AEDF                 mov     ebp, [esp+2Ch+var_4]
.text:0040AEE3                 add     esp, 2Ch
.text:0040AEE6                 retn
.text:0040AEE6 ; ---------------------------------------------------------------------------
.text:0040AEE7                 align 10h
.text:0040AEF0
.text:0040AEF0 loc_40AEF0:                             ; CODE XREF: .text:0040C27D↓p
.text:0040AEF0                 sub     esp, 1Ch
.text:0040AEF3                 mov     [esp+1Ch+var_4], esi
.text:0040AEF7                 mov     esi, [esp+1Ch+arg_0]
.text:0040AEFB                 mov     [esp+1Ch+var_8], ebx
.text:0040AEFF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040AF02                 call    sub_40A430
.text:0040AF07                 test    eax, eax
.text:0040AF09                 mov     ebx, eax
.text:0040AF0B                 jz      short loc_40AF20
.text:0040AF0D                 cmp     byte ptr [eax], 0
.text:0040AF10                 jz      short loc_40AF20
.text:0040AF12                 test    esi, esi
.text:0040AF14                 jz      short loc_40AF20
.text:0040AF16                 cmp     byte ptr [esi], 0
.text:0040AF19                 jnz     short loc_40AF46
.text:0040AF1B                 nop
.text:0040AF1C                 lea     esi, [esi+0]
.text:0040AF20
.text:0040AF20 loc_40AF20:                             ; CODE XREF: sub_40AE50+BB↑j
.text:0040AF20                                         ; sub_40AE50+C0↑j ...
.text:0040AF20                 call    _errno
.text:0040AF25                 mov     dword ptr [eax], 2
.text:0040AF2B                 mov     esi, 0FFFFFFFFh
.text:0040AF30
.text:0040AF30 loc_40AF30:                             ; CODE XREF: sub_40AE50+108↓j
.text:0040AF30                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040AF33                 call    free
.text:0040AF38                 mov     eax, esi
.text:0040AF3A                 mov     ebx, [esp+1Ch+var_8]
.text:0040AF3E                 mov     esi, [esp+1Ch+var_4]
.text:0040AF42                 add     esp, 1Ch
.text:0040AF45                 retn
.text:0040AF46 ; ---------------------------------------------------------------------------
.text:0040AF46
.text:0040AF46 loc_40AF46:                             ; CODE XREF: sub_40AE50+C9↑j
.text:0040AF46                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040AF49                 mov     edx, [esp+1Ch+arg_4]
.text:0040AF4D                 mov     [esp+1Ch+var_18], edx
.text:0040AF51                 call    near ptr loc_40A8AB+5
.text:0040AF56                 mov     esi, eax
.text:0040AF58                 jmp     short loc_40AF30
.text:0040AF58 ; ---------------------------------------------------------------------------
.text:0040AF5A                 align 10h
.text:0040AF60
.text:0040AF60 loc_40AF60:                             ; CODE XREF: sub_40AE50+5F↑j
.text:0040AF60                 push    ebp
.text:0040AF61                 push    edi
.text:0040AF62                 push    esi
.text:0040AF63                 push    ebx
.text:0040AF64                 sub     esp, 8Ch
.text:0040AF6A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040AF71                 call    sub_40BF60
.text:0040AF76                 test    eax, eax
.text:0040AF78                 jz      short loc_40AF88
.text:0040AF7A                 call    sub_40BEB0
.text:0040AF7F                 cmp     eax, 0Bh
.text:0040AF82                 jle     loc_40B0B0
.text:0040AF88
.text:0040AF88 loc_40AF88:                             ; CODE XREF: sub_40AE50+128↑j
.text:0040AF88                 cld
.text:0040AF89                 xor     eax, eax
.text:0040AF8B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040AF8F                 mov     ecx, 7
.text:0040AF94                 mov     edi, ebx
.text:0040AF96                 lea     esi, [esp+9Ch+var_4C]
.text:0040AF9A                 rep stosd
.text:0040AF9C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040AFA4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040AFAC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040AFB4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040AFBC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040AFC4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040AFCC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040AFD3                 call    CreateFileA
.text:0040AFD8                 sub     esp, 1Ch
.text:0040AFDB                 mov     edi, eax
.text:0040AFDD                 cmp     eax, 0FFFFFFFFh
.text:0040AFE0                 jz      short loc_40B055
.text:0040AFE2                 mov     [esp+9Ch+var_68], ebp
.text:0040AFE6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040AFEA                 mov     [esp+9Ch+var_5C], esi
.text:0040AFEE                 mov     [esp+9Ch+var_60], 7303h
.text:0040AFF6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040AFFE                 mov     [esp+9Ch+var_54], 1
.text:0040B006                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040B00E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040B012                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040B01A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040B01E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040B026                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040B02A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040B032                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040B035                 call    DeviceIoControl
.text:0040B03A                 sub     esp, 20h
.text:0040B03D                 mov     esi, eax
.text:0040B03F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040B042                 call    CloseHandle
.text:0040B047                 sub     esp, 4
.text:0040B04A                 test    esi, esi
.text:0040B04C                 jz      short loc_40B055
.text:0040B04E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040B053                 jz      short loc_40B070
.text:0040B055
.text:0040B055 loc_40B055:                             ; CODE XREF: sub_40AE50+190↑j
.text:0040B055                                         ; sub_40AE50+1FC↑j
.text:0040B055                 call    sub_40B480
.text:0040B05A                 mov     edi, eax
.text:0040B05C                 call    _errno
.text:0040B061                 mov     [eax], edi
.text:0040B063                 xor     eax, eax
.text:0040B065
.text:0040B065 loc_40B065:                             ; CODE XREF: sub_40AE50+25A↓j
.text:0040B065                                         ; sub_40AE50+297↓j
.text:0040B065                 add     esp, 8Ch
.text:0040B06B                 pop     ebx
.text:0040B06C                 pop     esi
.text:0040B06D                 pop     edi
.text:0040B06E                 pop     ebp
.text:0040B06F                 retn
.text:0040B070 ; ---------------------------------------------------------------------------
.text:0040B070
.text:0040B070 loc_40B070:                             ; CODE XREF: sub_40AE50+203↑j
.text:0040B070                 mov     edx, [esp+9Ch+var_48]
.text:0040B074                 mov     eax, 1
.text:0040B079                 mov     ebx, [esp+9Ch+arg_4]
.text:0040B080                 mov     ebp, [esp+9Ch+arg_8]
.text:0040B087                 mov     ecx, [esp+9Ch+arg_C]
.text:0040B08E                 mov     [ebx], edx
.text:0040B090                 mov     edi, [esp+9Ch+var_44]
.text:0040B094                 mov     ebx, [esp+9Ch+arg_10]
.text:0040B09B                 mov     [ebp+0], edi
.text:0040B09E                 mov     esi, [esp+9Ch+var_40]
.text:0040B0A2                 mov     [ecx], esi
.text:0040B0A4                 mov     edx, [esp+9Ch+var_3C]
.text:0040B0A8                 mov     [ebx], edx
.text:0040B0AA                 jmp     short loc_40B065
.text:0040B0AA ; ---------------------------------------------------------------------------
.text:0040B0AC                 align 10h
.text:0040B0B0
.text:0040B0B0 loc_40B0B0:                             ; CODE XREF: sub_40AE50+132↑j
.text:0040B0B0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040B0B3                 mov     eax, [esp+9Ch+arg_C]
.text:0040B0BA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040B0C1                 mov     edx, [esp+9Ch+arg_8]
.text:0040B0C8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040B0CC                 mov     eax, [esp+9Ch+arg_4]
.text:0040B0D3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040B0D7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040B0DB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040B0DF                 call    GetDiskFreeSpaceA
.text:0040B0E4                 sub     esp, 14h
.text:0040B0E7                 jmp     loc_40B065
.text:0040B0E7 sub_40AE50      endp ; sp-analysis failed
.text:0040B0E7
.text:0040B0E7 ; ---------------------------------------------------------------------------
.text:0040B0EC                 align 10h
.text:0040B0F0
.text:0040B0F0 ; =============== S U B R O U T I N E =======================================
.text:0040B0F0
.text:0040B0F0
.text:0040B0F0 sub_40B0F0      proc near               ; CODE XREF: sub_402EE0+218↑p
.text:0040B0F0
.text:0040B0F0 var_9           = byte ptr -9
.text:0040B0F0 arg_0           = dword ptr  4
.text:0040B0F0 arg_4           = byte ptr  8
.text:0040B0F0 arg_8           = dword ptr  0Ch
.text:0040B0F0
.text:0040B0F0                 push    esi
.text:0040B0F1                 push    ebx
.text:0040B0F2                 sub     esp, 4
.text:0040B0F5                 mov     ecx, [esp+0Ch+arg_8]
.text:0040B0F9                 movzx   edx, [esp+0Ch+arg_4]
.text:0040B0FE                 mov     [esp+0Ch+var_9], dl
.text:0040B102                 mov     edx, [esp+0Ch+arg_0]
.text:0040B106                 add     edx, ecx
.text:0040B108                 test    ecx, ecx
.text:0040B10A                 jz      short loc_40B140
.text:0040B10C                 test    dl, 3
.text:0040B10F                 jz      short loc_40B140
.text:0040B111                 jmp     short loc_40B120
.text:0040B111 ; ---------------------------------------------------------------------------
.text:0040B113                 align 10h
.text:0040B120
.text:0040B120 loc_40B120:                             ; CODE XREF: sub_40B0F0+21↑j
.text:0040B120                                         ; sub_40B0F0+44↓j
.text:0040B120                 movzx   ebx, [esp+0Ch+var_9]
.text:0040B125                 dec     edx
.text:0040B126                 cmp     [edx], bl
.text:0040B128                 jz      loc_40B1D7
.text:0040B12E                 dec     ecx
.text:0040B12F                 jz      short loc_40B140
.text:0040B131                 test    dl, 3
.text:0040B134                 jnz     short loc_40B120
.text:0040B136                 lea     esi, [esi+0]
.text:0040B139                 lea     edi, [edi+0]
.text:0040B140
.text:0040B140 loc_40B140:                             ; CODE XREF: sub_40B0F0+1A↑j
.text:0040B140                                         ; sub_40B0F0+1F↑j ...
.text:0040B140                 mov     ebx, edx
.text:0040B142                 movzx   edx, [esp+0Ch+var_9]
.text:0040B147                 mov     esi, edx
.text:0040B149                 shl     esi, 8
.text:0040B14C                 or      esi, edx
.text:0040B14E                 mov     edx, esi
.text:0040B150                 shl     edx, 10h
.text:0040B153                 or      esi, edx
.text:0040B155                 cmp     ecx, 3
.text:0040B158                 jbe     short loc_40B1A8
.text:0040B15A                 lea     esi, [esi+0]
.text:0040B160
.text:0040B160 loc_40B160:                             ; CODE XREF: sub_40B0F0+B6↓j
.text:0040B160                 sub     ebx, 4
.text:0040B163                 mov     eax, [ebx]
.text:0040B165                 xor     eax, esi
.text:0040B167                 lea     edx, [eax+7EFEFEFFh]
.text:0040B16D                 not     eax
.text:0040B16F                 xor     edx, eax
.text:0040B171                 and     edx, 81010100h
.text:0040B177                 jz      short loc_40B1A0
.text:0040B179                 movzx   edx, [esp+0Ch+var_9]
.text:0040B17E                 cmp     [ebx+3], dl
.text:0040B181                 jz      short loc_40B1E9
.text:0040B183                 movzx   edx, [esp+0Ch+var_9]
.text:0040B188                 cmp     [ebx+2], dl
.text:0040B18B                 jz      short loc_40B1E4
.text:0040B18D                 movzx   edx, [esp+0Ch+var_9]
.text:0040B192                 cmp     [ebx+1], dl
.text:0040B195                 jz      short loc_40B1DF
.text:0040B197                 movzx   edx, [esp+0Ch+var_9]
.text:0040B19C                 cmp     [ebx], dl
.text:0040B19E                 jz      short loc_40B1DB
.text:0040B1A0
.text:0040B1A0 loc_40B1A0:                             ; CODE XREF: sub_40B0F0+87↑j
.text:0040B1A0                 sub     ecx, 4
.text:0040B1A3                 cmp     ecx, 3
.text:0040B1A6                 ja      short loc_40B160
.text:0040B1A8
.text:0040B1A8 loc_40B1A8:                             ; CODE XREF: sub_40B0F0+68↑j
.text:0040B1A8                 mov     esi, ecx
.text:0040B1AA                 mov     edx, ebx
.text:0040B1AC                 dec     ecx
.text:0040B1AD                 test    esi, esi
.text:0040B1AF                 jz      short loc_40B1D1
.text:0040B1B1                 jmp     short loc_40B1C0
.text:0040B1B1 ; ---------------------------------------------------------------------------
.text:0040B1B3                 align 10h
.text:0040B1C0
.text:0040B1C0 loc_40B1C0:                             ; CODE XREF: sub_40B0F0+C1↑j
.text:0040B1C0                                         ; sub_40B0F0+DF↓j
.text:0040B1C0                 movzx   ebx, [esp+0Ch+var_9]
.text:0040B1C5                 dec     edx
.text:0040B1C6                 cmp     [edx], bl
.text:0040B1C8                 jz      short loc_40B1D7
.text:0040B1CA                 mov     esi, ecx
.text:0040B1CC                 dec     ecx
.text:0040B1CD                 test    esi, esi
.text:0040B1CF                 jnz     short loc_40B1C0
.text:0040B1D1
.text:0040B1D1 loc_40B1D1:                             ; CODE XREF: sub_40B0F0+BF↑j
.text:0040B1D1                 xor     eax, eax
.text:0040B1D3
.text:0040B1D3 loc_40B1D3:                             ; CODE XREF: sub_40B0F0+E9↓j
.text:0040B1D3                                         ; sub_40B0F0+ED↓j ...
.text:0040B1D3                 pop     edx
.text:0040B1D4                 pop     ebx
.text:0040B1D5                 pop     esi
.text:0040B1D6                 retn
.text:0040B1D7 ; ---------------------------------------------------------------------------
.text:0040B1D7
.text:0040B1D7 loc_40B1D7:                             ; CODE XREF: sub_40B0F0+38↑j
.text:0040B1D7                                         ; sub_40B0F0+D8↑j
.text:0040B1D7                 mov     eax, edx
.text:0040B1D9                 jmp     short loc_40B1D3
.text:0040B1DB ; ---------------------------------------------------------------------------
.text:0040B1DB
.text:0040B1DB loc_40B1DB:                             ; CODE XREF: sub_40B0F0+AE↑j
.text:0040B1DB                 mov     eax, ebx
.text:0040B1DD                 jmp     short loc_40B1D3
.text:0040B1DF ; ---------------------------------------------------------------------------
.text:0040B1DF
.text:0040B1DF loc_40B1DF:                             ; CODE XREF: sub_40B0F0+A5↑j
.text:0040B1DF                 lea     eax, [ebx+1]
.text:0040B1E2                 jmp     short loc_40B1D3
.text:0040B1E4 ; ---------------------------------------------------------------------------
.text:0040B1E4
.text:0040B1E4 loc_40B1E4:                             ; CODE XREF: sub_40B0F0+9B↑j
.text:0040B1E4                 lea     eax, [ebx+2]
.text:0040B1E7                 jmp     short loc_40B1D3
.text:0040B1E9 ; ---------------------------------------------------------------------------
.text:0040B1E9
.text:0040B1E9 loc_40B1E9:                             ; CODE XREF: sub_40B0F0+91↑j
.text:0040B1E9                 lea     eax, [ebx+3]
.text:0040B1EC                 jmp     short loc_40B1D3
.text:0040B1EC sub_40B0F0      endp
.text:0040B1EC
.text:0040B1EC ; ---------------------------------------------------------------------------
.text:0040B1EE                 align 10h
.text:0040B1F0
.text:0040B1F0 ; =============== S U B R O U T I N E =======================================
.text:0040B1F0
.text:0040B1F0 ; Attributes: info_from_lumina
.text:0040B1F0
.text:0040B1F0 ___get_errno    proc near               ; CODE XREF: sub_40B480+B↓p
.text:0040B1F0
.text:0040B1F0 arg_0           = dword ptr  4
.text:0040B1F0
.text:0040B1F0                 mov     eax, [esp+arg_0]
.text:0040B1F4                 cmp     eax, 53h ; 'S'
.text:0040B1F7                 jg      loc_40B2F0
.text:0040B1FD                 cmp     eax, 52h ; 'R'
.text:0040B200                 jge     short loc_40B252
.text:0040B202                 cmp     eax, 0Fh
.text:0040B205                 jz      short loc_40B220
.text:0040B207                 cmp     eax, 0Fh
.text:0040B20A                 jg      short loc_40B280
.text:0040B20C                 cmp     eax, 9
.text:0040B20F                 jg      short loc_40B260
.text:0040B211                 cmp     eax, 7
.text:0040B214                 jge     short loc_40B259
.text:0040B216                 cmp     eax, 3
.text:0040B219                 jg      short loc_40B23A
.text:0040B21B                 cmp     eax, 2
.text:0040B21E                 jl      short loc_40B233
.text:0040B220
.text:0040B220 loc_40B220:                             ; CODE XREF: ___get_errno+15↑j
.text:0040B220                                         ; ___get_errno+9D↓j ...
.text:0040B220                 mov     edx, 2
.text:0040B225                 lea     esi, [esi+0]
.text:0040B229                 lea     edi, [edi+0]
.text:0040B230
.text:0040B230 loc_40B230:                             ; CODE XREF: ___get_errno+48↓j
.text:0040B230                                         ; ___get_errno+59↓j ...
.text:0040B230                 mov     eax, edx
.text:0040B232                 retn
.text:0040B233 ; ---------------------------------------------------------------------------
.text:0040B233
.text:0040B233 loc_40B233:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040B233                                         ; ___get_errno+78↓j ...
.text:0040B233                 mov     edx, 16h
.text:0040B238                 jmp     short loc_40B230
.text:0040B23A ; ---------------------------------------------------------------------------
.text:0040B23A
.text:0040B23A loc_40B23A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040B23A                 cmp     eax, 5
.text:0040B23D                 jz      short loc_40B252
.text:0040B23F                 cmp     eax, 5
.text:0040B242                 jg      short loc_40B24B
.text:0040B244                 mov     edx, 18h
.text:0040B249                 jmp     short loc_40B230
.text:0040B24B ; ---------------------------------------------------------------------------
.text:0040B24B
.text:0040B24B loc_40B24B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040B24B                                         ; ___get_errno+180↓j
.text:0040B24B                 mov     edx, 9
.text:0040B250                 jmp     short loc_40B230
.text:0040B252 ; ---------------------------------------------------------------------------
.text:0040B252
.text:0040B252 loc_40B252:                             ; CODE XREF: ___get_errno+10↑j
.text:0040B252                                         ; ___get_errno+4D↑j ...
.text:0040B252                 mov     edx, 0Dh
.text:0040B257                 jmp     short loc_40B230
.text:0040B259 ; ---------------------------------------------------------------------------
.text:0040B259
.text:0040B259 loc_40B259:                             ; CODE XREF: ___get_errno+24↑j
.text:0040B259                                         ; ___get_errno+73↓j ...
.text:0040B259                 mov     edx, 0Ch
.text:0040B25E                 jmp     short loc_40B230
.text:0040B260 ; ---------------------------------------------------------------------------
.text:0040B260
.text:0040B260 loc_40B260:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040B260                 cmp     eax, 0Dh
.text:0040B263                 jg      short loc_40B259
.text:0040B265                 cmp     eax, 0Ch
.text:0040B268                 jge     short loc_40B233
.text:0040B26A                 cmp     eax, 0Ah
.text:0040B26D                 mov     edx, 7
.text:0040B272                 jz      short loc_40B230
.text:0040B274                 cmp     eax, 0Bh
.text:0040B277                 jnz     short loc_40B233
.text:0040B279
.text:0040B279 loc_40B279:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040B279                 mov     edx, 8
.text:0040B27E                 jmp     short loc_40B230
.text:0040B280 ; ---------------------------------------------------------------------------
.text:0040B280
.text:0040B280 loc_40B280:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040B280                 cmp     eax, 22h ; '"'
.text:0040B283                 jg      short loc_40B2B4
.text:0040B285                 cmp     eax, 16h
.text:0040B288                 jge     short loc_40B252
.text:0040B28A                 cmp     eax, 12h
.text:0040B28D                 jz      short loc_40B220
.text:0040B28F                 cmp     eax, 12h
.text:0040B292                 jg      short loc_40B2A5
.text:0040B294                 cmp     eax, 10h
.text:0040B297                 jz      short loc_40B252
.text:0040B299                 mov     edx, 12h
.text:0040B29E                 cmp     eax, 11h
.text:0040B2A1
.text:0040B2A1 loc_40B2A1:                             ; CODE XREF: ___get_errno+172↓j
.text:0040B2A1                                         ; ___get_errno+24C↓j ...
.text:0040B2A1                 jnz     short loc_40B233
.text:0040B2A3                 jmp     short loc_40B230
.text:0040B2A5 ; ---------------------------------------------------------------------------
.text:0040B2A5
.text:0040B2A5 loc_40B2A5:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040B2A5                 cmp     eax, 14h
.text:0040B2A8                 jle     short loc_40B252
.text:0040B2AA
.text:0040B2AA loc_40B2AA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040B2AA                 mov     edx, 10h
.text:0040B2AF                 jmp     loc_40B230
.text:0040B2B4 ; ---------------------------------------------------------------------------
.text:0040B2B4
.text:0040B2B4 loc_40B2B4:                             ; CODE XREF: ___get_errno+93↑j
.text:0040B2B4                 cmp     eax, 41h ; 'A'
.text:0040B2B7                 jz      short loc_40B252
.text:0040B2B9                 cmp     eax, 41h ; 'A'
.text:0040B2BC                 jg      short loc_40B2D1
.text:0040B2BE                 cmp     eax, 24h ; '$'
.text:0040B2C1                 jz      short loc_40B252
.text:0040B2C3                 cmp     eax, 35h ; '5'
.text:0040B2C6                 jnz     loc_40B233
.text:0040B2CC                 jmp     loc_40B220
.text:0040B2D1 ; ---------------------------------------------------------------------------
.text:0040B2D1
.text:0040B2D1 loc_40B2D1:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040B2D1                 cmp     eax, 43h ; 'C'
.text:0040B2D4                 jz      loc_40B220
.text:0040B2DA                 cmp     eax, 50h ; 'P'
.text:0040B2DD                 jnz     loc_40B233
.text:0040B2E3
.text:0040B2E3 loc_40B2E3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040B2E3                 mov     edx, 11h
.text:0040B2E8                 jmp     loc_40B230
.text:0040B2E8 ; ---------------------------------------------------------------------------
.text:0040B2ED                 align 10h
.text:0040B2F0
.text:0040B2F0 loc_40B2F0:                             ; CODE XREF: ___get_errno+7↑j
.text:0040B2F0                 cmp     eax, 0A1h ; '¡'
.text:0040B2F5                 jz      loc_40B220
.text:0040B2FB                 cmp     eax, 0A1h ; '¡'
.text:0040B300                 jg      loc_40B3B0
.text:0040B306                 cmp     eax, 81h
.text:0040B30B                 jg      short loc_40B375
.text:0040B30D                 cmp     eax, 80h ; '€'
.text:0040B312                 mov     edx, 0Ah
.text:0040B317                 jge     loc_40B230
.text:0040B31D                 cmp     eax, 6Ch ; 'l'
.text:0040B320                 jz      loc_40B252
.text:0040B326                 cmp     eax, 6Ch ; 'l'
.text:0040B329                 jg      short loc_40B347
.text:0040B32B                 cmp     eax, 57h ; 'W'
.text:0040B32E                 jz      loc_40B233
.text:0040B334                 cmp     eax, 59h ; 'Y'
.text:0040B337                 jnz     loc_40B233
.text:0040B33D
.text:0040B33D loc_40B33D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040B33D                                         ; ___get_errno+23C↓j
.text:0040B33D                 mov     edx, 0Bh
.text:0040B342                 jmp     loc_40B230
.text:0040B347 ; ---------------------------------------------------------------------------
.text:0040B347
.text:0040B347 loc_40B347:                             ; CODE XREF: ___get_errno+139↑j
.text:0040B347                 cmp     eax, 70h ; 'p'
.text:0040B34A                 mov     edx, 1Ch
.text:0040B34F                 jz      loc_40B230
.text:0040B355                 cmp     eax, 70h ; 'p'
.text:0040B358                 jg      short loc_40B367
.text:0040B35A                 mov     edx, 20h ; ' '
.text:0040B35F                 cmp     eax, 6Dh ; 'm'
.text:0040B362                 jmp     loc_40B2A1
.text:0040B367 ; ---------------------------------------------------------------------------
.text:0040B367
.text:0040B367 loc_40B367:                             ; CODE XREF: ___get_errno+168↑j
.text:0040B367                 cmp     eax, 72h ; 'r'
.text:0040B36A
.text:0040B36A loc_40B36A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040B36A                 jnz     loc_40B233
.text:0040B370                 jmp     loc_40B24B
.text:0040B375 ; ---------------------------------------------------------------------------
.text:0040B375
.text:0040B375 loc_40B375:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040B375                 cmp     eax, 84h ; '„'
.text:0040B37A                 jz      loc_40B252
.text:0040B380                 cmp     eax, 84h ; '„'
.text:0040B385                 jg      short loc_40B38E
.text:0040B387                 cmp     eax, 82h ; '‚'
.text:0040B38C                 jmp     short loc_40B36A
.text:0040B38E ; ---------------------------------------------------------------------------
.text:0040B38E
.text:0040B38E loc_40B38E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040B38E                 cmp     eax, 91h ; '‘'
.text:0040B393                 mov     edx, 29h ; ')'
.text:0040B398                 jz      loc_40B230
.text:0040B39E                 cmp     eax, 9Eh ; 'ž'
.text:0040B3A3
.text:0040B3A3 loc_40B3A3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040B3A3                 jnz     loc_40B233
.text:0040B3A9                 jmp     loc_40B252
.text:0040B3A9 ; ---------------------------------------------------------------------------
.text:0040B3AE                 align 10h
.text:0040B3B0
.text:0040B3B0 loc_40B3B0:                             ; CODE XREF: ___get_errno+110↑j
.text:0040B3B0                 cmp     eax, 0CEh ; 'Î'
.text:0040B3B5                 jz      loc_40B220
.text:0040B3BB                 cmp     eax, 0CEh ; 'Î'
.text:0040B3C0                 jg      short loc_40B410
.text:0040B3C2                 cmp     eax, 0AAh ; 'ª'
.text:0040B3C7                 jz      loc_40B2AA
.text:0040B3CD                 cmp     eax, 0AAh ; 'ª'
.text:0040B3D2                 jg      short loc_40B3E6
.text:0040B3D4                 cmp     eax, 0A4h ; '¤'
.text:0040B3D9                 jz      loc_40B33D
.text:0040B3DF                 cmp     eax, 0A7h ; '§'
.text:0040B3E4                 jmp     short loc_40B3A3
.text:0040B3E6 ; ---------------------------------------------------------------------------
.text:0040B3E6
.text:0040B3E6 loc_40B3E6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040B3E6                 cmp     eax, 0B7h ; '·'
.text:0040B3EB                 jz      loc_40B2E3
.text:0040B3F1                 cmp     eax, 0B7h ; '·'
.text:0040B3F6                 jl      loc_40B233
.text:0040B3FC                 sub     eax, 0BCh ; '¼'
.text:0040B401                 cmp     eax, 0Eh
.text:0040B404                 ja      loc_40B233
.text:0040B40A                 jmp     loc_40B279
.text:0040B40A ; ---------------------------------------------------------------------------
.text:0040B40F                 align 10h
.text:0040B410
.text:0040B410 loc_40B410:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040B410                 cmp     eax, 46Bh
.text:0040B415                 mov     edx, 24h ; '$'
.text:0040B41A                 jz      loc_40B230
.text:0040B420                 cmp     eax, 46Bh
.text:0040B425                 jg      short loc_40B441
.text:0040B427                 cmp     eax, 0D7h ; '×'
.text:0040B42C                 jz      loc_40B33D
.text:0040B432                 mov     edx, 5
.text:0040B437                 cmp     eax, 45Dh
.text:0040B43C                 jmp     loc_40B2A1
.text:0040B441 ; ---------------------------------------------------------------------------
.text:0040B441
.text:0040B441 loc_40B441:                             ; CODE XREF: ___get_errno+235↑j
.text:0040B441                 cmp     eax, 4D5h
.text:0040B446                 mov     edx, 4
.text:0040B44B                 jz      loc_40B230
.text:0040B451                 cmp     eax, 4D5h
.text:0040B456                 jg      short loc_40B467
.text:0040B458                 mov     edx, 13h
.text:0040B45D                 cmp     eax, 4B0h
.text:0040B462                 jmp     loc_40B2A1
.text:0040B467 ; ---------------------------------------------------------------------------
.text:0040B467
.text:0040B467 loc_40B467:                             ; CODE XREF: ___get_errno+266↑j
.text:0040B467                 cmp     eax, 718h
.text:0040B46C                 jnz     loc_40B233
.text:0040B472                 jmp     loc_40B259
.text:0040B472 ___get_errno    endp
.text:0040B472
.text:0040B472 ; ---------------------------------------------------------------------------
.text:0040B477                 align 10h
.text:0040B480
.text:0040B480 ; =============== S U B R O U T I N E =======================================
.text:0040B480
.text:0040B480
.text:0040B480 sub_40B480      proc near               ; CODE XREF: sub_40D9B0:loc_409B7D↑p
.text:0040B480                                         ; sub_40A120:loc_40A188↑p ...
.text:0040B480
.text:0040B480 var_C           = dword ptr -0Ch
.text:0040B480
.text:0040B480                 sub     esp, 0Ch
.text:0040B483                 call    GetLastError
.text:0040B488                 mov     [esp+0Ch+var_C], eax
.text:0040B48B                 call    ___get_errno
.text:0040B490                 add     esp, 0Ch
.text:0040B493                 retn
.text:0040B493 sub_40B480      endp
.text:0040B493
.text:0040B493 ; ---------------------------------------------------------------------------
.text:0040B494                 align 10h
.text:0040B4A0
.text:0040B4A0 ; =============== S U B R O U T I N E =======================================
.text:0040B4A0
.text:0040B4A0
.text:0040B4A0 sub_40B4A0      proc near               ; CODE XREF: .text:0040A093↑p
.text:0040B4A0                                         ; .text:0040A0E3↑p
.text:0040B4A0
.text:0040B4A0 arg_4           = dword ptr  8
.text:0040B4A0
.text:0040B4A0                 sub     esp, 0Ch
.text:0040B4A3                 mov     edx, [esp+0Ch+arg_4]
.text:0040B4A7                 test    edx, edx
.text:0040B4A9                 jz      short loc_40B4B0
.text:0040B4AB                 add     esp, 0Ch
.text:0040B4AE                 jmp     short sub_40B4F0
.text:0040B4B0 ; ---------------------------------------------------------------------------
.text:0040B4B0
.text:0040B4B0 loc_40B4B0:                             ; CODE XREF: sub_40B4A0+9↑j
.text:0040B4B0                 call    _errno
.text:0040B4B5                 mov     dword ptr [eax], 16h
.text:0040B4BB                 xor     eax, eax
.text:0040B4BD                 add     esp, 0Ch
.text:0040B4C0                 retn
.text:0040B4C0 sub_40B4A0      endp
.text:0040B4C0
.text:0040B4C1 ; ---------------------------------------------------------------------------
.text:0040B4C1                 jmp     short sub_40B4D0
.text:0040B4C1 ; ---------------------------------------------------------------------------
.text:0040B4C3                 align 10h
.text:0040B4D0
.text:0040B4D0 ; =============== S U B R O U T I N E =======================================
.text:0040B4D0
.text:0040B4D0
.text:0040B4D0 ; int __cdecl sub_40B4D0(LPCSTR)
.text:0040B4D0 sub_40B4D0      proc near               ; CODE XREF: sub_40D9B0-3EDC↑p
.text:0040B4D0                                         ; .text:0040A288↑p ...
.text:0040B4D0
.text:0040B4D0 lpFileName      = dword ptr -0Ch
.text:0040B4D0 Destination     = dword ptr -8
.text:0040B4D0 arg_0           = dword ptr  4
.text:0040B4D0
.text:0040B4D0                 sub     esp, 0Ch
.text:0040B4D3                 mov     edx, [esp+0Ch+arg_0]
.text:0040B4D7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040B4DF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040B4E2                 call    sub_40B4F0
.text:0040B4E7                 add     esp, 0Ch
.text:0040B4EA                 retn
.text:0040B4EA sub_40B4D0      endp
.text:0040B4EA
.text:0040B4EA ; ---------------------------------------------------------------------------
.text:0040B4EB                 align 10h
.text:0040B4F0
.text:0040B4F0 ; =============== S U B R O U T I N E =======================================
.text:0040B4F0
.text:0040B4F0
.text:0040B4F0 ; int __cdecl sub_40B4F0(LPCSTR lpFileName, char *Destination)
.text:0040B4F0 sub_40B4F0      proc near               ; CODE XREF: sub_40B4A0+E↑j
.text:0040B4F0                                         ; sub_40B4D0+12↑p
.text:0040B4F0
.text:0040B4F0 Size            = dword ptr -2Ch
.text:0040B4F0 nBufferLength   = dword ptr -28h
.text:0040B4F0 lpBuffer        = dword ptr -24h
.text:0040B4F0 lpFilePart      = dword ptr -20h
.text:0040B4F0 FilePart        = dword ptr -14h
.text:0040B4F0 lpFileName      = dword ptr  4
.text:0040B4F0 Destination     = dword ptr  8
.text:0040B4F0
.text:0040B4F0                 push    ebp
.text:0040B4F1                 push    edi
.text:0040B4F2                 push    esi
.text:0040B4F3                 push    ebx
.text:0040B4F4                 sub     esp, 1Ch
.text:0040B4F7                 mov     edi, [esp+2Ch+lpFileName]
.text:0040B4FB                 mov     ebp, [esp+2Ch+Destination]
.text:0040B4FF                 test    edi, edi
.text:0040B501                 jz      loc_40B609
.text:0040B507                 cmp     byte ptr [edi], 0
.text:0040B50A                 jz      loc_40B5FC
.text:0040B510                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040B517                 call    malloc
.text:0040B51C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040B520                 lea     edx, [esp+2Ch+FilePart]
.text:0040B524                 mov     ebx, eax
.text:0040B526                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040B52A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040B532                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040B535                 call    GetFullPathNameA
.text:0040B53A                 sub     esp, 10h
.text:0040B53D                 mov     esi, eax
.text:0040B53F                 test    eax, eax
.text:0040B541                 jz      loc_40B5EA
.text:0040B547                 cmp     eax, 104h
.text:0040B54C                 jle     short loc_40B55D
.text:0040B54E                 test    ebp, ebp
.text:0040B550                 jz      short loc_40B5B9
.text:0040B552                 call    _errno
.text:0040B557                 mov     dword ptr [eax], 26h ; '&'
.text:0040B55D
.text:0040B55D loc_40B55D:                             ; CODE XREF: sub_40B4F0+5C↑j
.text:0040B55D                                         ; sub_40B4F0+F5↓j
.text:0040B55D                 call    _errno
.text:0040B562                 mov     edi, [eax]
.text:0040B564                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040B56C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040B56F                 call    sub_40B620
.text:0040B574                 test    eax, eax
.text:0040B576                 jnz     short loc_40B590
.text:0040B578                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040B57D                 cmp     al, 2Fh ; '/'
.text:0040B57F                 jz      short loc_40B590
.text:0040B581                 cmp     al, 5Ch ; '\'
.text:0040B583                 jz      short loc_40B590
.text:0040B585                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040B589                 mov     byte ptr [esi+ebx+1], 0
.text:0040B58E                 mov     esi, esi
.text:0040B590
.text:0040B590 loc_40B590:                             ; CODE XREF: sub_40B4F0+86↑j
.text:0040B590                                         ; sub_40B4F0+8F↑j ...
.text:0040B590                 call    _errno
.text:0040B595                 mov     [eax], edi
.text:0040B597                 mov     [esp+2Ch+Size], ebx
.text:0040B59A                 call    sub_409F80
.text:0040B59F                 test    ebp, ebp
.text:0040B5A1                 mov     eax, ebx
.text:0040B5A3                 jz      short loc_40B5B1
.text:0040B5A5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040B5A9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040B5AC                 call    strcpy
.text:0040B5B1
.text:0040B5B1 loc_40B5B1:                             ; CODE XREF: sub_40B4F0+B3↑j
.text:0040B5B1                                         ; sub_40B4F0+10A↓j
.text:0040B5B1                 add     esp, 1Ch
.text:0040B5B4                 pop     ebx
.text:0040B5B5                 pop     esi
.text:0040B5B6                 pop     edi
.text:0040B5B7                 pop     ebp
.text:0040B5B8                 retn
.text:0040B5B9 ; ---------------------------------------------------------------------------
.text:0040B5B9
.text:0040B5B9 loc_40B5B9:                             ; CODE XREF: sub_40B4F0+60↑j
.text:0040B5B9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040B5BC                 lea     ecx, [eax+2]
.text:0040B5BF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040B5C3                 call    realloc
.text:0040B5C8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040B5CC                 lea     edx, [esp+2Ch+FilePart]
.text:0040B5D0                 mov     ebx, eax
.text:0040B5D2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040B5D6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040B5DA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040B5DD                 call    GetFullPathNameA
.text:0040B5E2                 sub     esp, 10h
.text:0040B5E5                 jmp     loc_40B55D
.text:0040B5EA ; ---------------------------------------------------------------------------
.text:0040B5EA
.text:0040B5EA loc_40B5EA:                             ; CODE XREF: sub_40B4F0+51↑j
.text:0040B5EA                 call    sub_40B480
.text:0040B5EF                 mov     esi, eax
.text:0040B5F1                 call    _errno
.text:0040B5F6                 mov     [eax], esi
.text:0040B5F8
.text:0040B5F8 loc_40B5F8:                             ; CODE XREF: sub_40B4F0+117↓j
.text:0040B5F8                                         ; sub_40B4F0+124↓j
.text:0040B5F8                 xor     eax, eax
.text:0040B5FA                 jmp     short loc_40B5B1
.text:0040B5FC ; ---------------------------------------------------------------------------
.text:0040B5FC
.text:0040B5FC loc_40B5FC:                             ; CODE XREF: sub_40B4F0+1A↑j
.text:0040B5FC                 call    _errno
.text:0040B601                 mov     dword ptr [eax], 2
.text:0040B607                 jmp     short loc_40B5F8
.text:0040B609 ; ---------------------------------------------------------------------------
.text:0040B609
.text:0040B609 loc_40B609:                             ; CODE XREF: sub_40B4F0+11↑j
.text:0040B609                 call    _errno
.text:0040B60E                 mov     dword ptr [eax], 16h
.text:0040B614                 jmp     short loc_40B5F8
.text:0040B614 sub_40B4F0      endp
.text:0040B614
.text:0040B614 ; ---------------------------------------------------------------------------
.text:0040B616                 align 10h
.text:0040B620
.text:0040B620 ; =============== S U B R O U T I N E =======================================
.text:0040B620
.text:0040B620
.text:0040B620 ; int __cdecl sub_40B620(LPCSTR lpFileName, int)
.text:0040B620 sub_40B620      proc near               ; CODE XREF: sub_40D9B0-3EED↑p
.text:0040B620                                         ; .text:00409F62↑p ...
.text:0040B620
.text:0040B620 uMode           = dword ptr -1Ch
.text:0040B620 var_10          = dword ptr -10h
.text:0040B620 var_C           = dword ptr -0Ch
.text:0040B620 var_8           = dword ptr -8
.text:0040B620 var_4           = dword ptr -4
.text:0040B620 lpFileName      = dword ptr  4
.text:0040B620 arg_4           = dword ptr  8
.text:0040B620
.text:0040B620                 sub     esp, 1Ch
.text:0040B623                 mov     [esp+1Ch+var_10], ebx
.text:0040B627                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040B62B                 mov     [esp+1Ch+var_4], ebp
.text:0040B62F                 xor     ebp, ebp
.text:0040B631                 test    ebx, ebx
.text:0040B633                 mov     [esp+1Ch+var_C], esi
.text:0040B637                 mov     esi, [esp+1Ch+arg_4]
.text:0040B63B                 mov     [esp+1Ch+var_8], edi
.text:0040B63F                 jz      short loc_40B649
.text:0040B641                 test    esi, 0FFFFFFE8h
.text:0040B647                 jz      short loc_40B670
.text:0040B649
.text:0040B649 loc_40B649:                             ; CODE XREF: sub_40B620+1F↑j
.text:0040B649                 call    _errno
.text:0040B64E                 mov     dword ptr [eax], 16h
.text:0040B654
.text:0040B654 loc_40B654:                             ; CODE XREF: sub_40B620+B1↓j
.text:0040B654                 mov     eax, 0FFFFFFFFh
.text:0040B659
.text:0040B659 loc_40B659:                             ; CODE XREF: sub_40B620+86↓j
.text:0040B659                                         ; sub_40B620+A4↓j
.text:0040B659                 mov     ebx, [esp+1Ch+var_10]
.text:0040B65D                 mov     esi, [esp+1Ch+var_C]
.text:0040B661                 mov     edi, [esp+1Ch+var_8]
.text:0040B665                 mov     ebp, [esp+1Ch+var_4]
.text:0040B669                 add     esp, 1Ch
.text:0040B66C                 retn
.text:0040B66C ; ---------------------------------------------------------------------------
.text:0040B66D                 align 10h
.text:0040B670
.text:0040B670 loc_40B670:                             ; CODE XREF: sub_40B620+27↑j
.text:0040B670                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040B677                 call    SetErrorMode
.text:0040B67C                 sub     esp, 4
.text:0040B67F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040B682                 call    GetFileAttributesA
.text:0040B687                 sub     esp, 4
.text:0040B68A                 mov     edi, eax
.text:0040B68C                 cmp     eax, 0FFFFFFFFh
.text:0040B68F                 jz      short loc_40B6D3
.text:0040B691
.text:0040B691 loc_40B691:                             ; CODE XREF: sub_40B620+C6↓j
.text:0040B691                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040B698                 call    SetErrorMode
.text:0040B69D                 sub     esp, 4
.text:0040B6A0                 mov     eax, 0FFFFFFFFh
.text:0040B6A5                 inc     ebp
.text:0040B6A6                 jz      short loc_40B659
.text:0040B6A8                 test    esi, 10h
.text:0040B6AE                 jz      short loc_40B6B8
.text:0040B6B0                 test    edi, 10h
.text:0040B6B6                 jz      short loc_40B6C6
.text:0040B6B8
.text:0040B6B8 loc_40B6B8:                             ; CODE XREF: sub_40B620+8E↑j
.text:0040B6B8                 and     esi, 2
.text:0040B6BB                 jz      short loc_40B6C2
.text:0040B6BD                 and     edi, 1
.text:0040B6C0                 jnz     short loc_40B6C6
.text:0040B6C2
.text:0040B6C2 loc_40B6C2:                             ; CODE XREF: sub_40B620+9B↑j
.text:0040B6C2                 xor     eax, eax
.text:0040B6C4                 jmp     short loc_40B659
.text:0040B6C6 ; ---------------------------------------------------------------------------
.text:0040B6C6
.text:0040B6C6 loc_40B6C6:                             ; CODE XREF: sub_40B620+96↑j
.text:0040B6C6                                         ; sub_40B620+A0↑j
.text:0040B6C6                 call    _errno
.text:0040B6CB                 mov     dword ptr [eax], 0Dh
.text:0040B6D1                 jmp     short loc_40B654
.text:0040B6D3 ; ---------------------------------------------------------------------------
.text:0040B6D3
.text:0040B6D3 loc_40B6D3:                             ; CODE XREF: sub_40B620+6F↑j
.text:0040B6D3                 call    sub_40B480
.text:0040B6D8                 mov     ebp, eax
.text:0040B6DA                 call    _errno
.text:0040B6DF                 mov     [eax], ebp
.text:0040B6E1                 mov     ebp, 0FFFFFFFFh
.text:0040B6E6                 jmp     short loc_40B691
.text:0040B6E6 sub_40B620      endp
.text:0040B6E6
.text:0040B6E6 ; ---------------------------------------------------------------------------
.text:0040B6E8                 align 10h
.text:0040B6F0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040B90F↓o
.text:0040B6FC aLu             db '%lu',0              ; DATA XREF: .text:0040B91F↓o
.text:0040B700 asc_40B700      db ' ',0                ; DATA XREF: .text:loc_40BA08↓o
.text:0040B702                 align 10h
.text:0040B710 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040B710                                         ; DATA XREF: .text:0040BA3F↓o
.text:0040B730 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40BA4D↓o
.text:0040B73C aServer         db ' Server',0          ; DATA XREF: .text:0040BA76↓o
.text:0040B73C                                         ; .text:loc_40BBEE↓o
.text:0040B744 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40BA88↓o
.text:0040B755 aDatacenterServ db ' Datacenter Server',0
.text:0040B755                                         ; DATA XREF: .text:loc_40BA92↓o
.text:0040B768 aStandardEditio db ' Standard Edition',0
.text:0040B768                                         ; DATA XREF: .text:0040BABA↓o
.text:0040B77A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40BAC4↓o
.text:0040B787 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040B787                                         ; DATA XREF: .text:loc_40BACE↓o
.text:0040B79B aDatacenterEdit db ' Datacenter Edition',0
.text:0040B79B                                         ; DATA XREF: .text:loc_40BAD8↓o
.text:0040B7AF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040BAEB↓o
.text:0040B7BD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40BAF5↓o
.text:0040B7BD                                         ; .text:loc_40BC00↓o
.text:0040B7CB                 align 10h
.text:0040B7D0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040B7D0                                         ; DATA XREF: .text:0040BB22↓o
.text:0040B800 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040BB69↓o
.text:0040B80C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040BBA4↓o
.text:0040B812 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040BBBB↓o
.text:0040B81B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040BBD2↓o
.text:0040B824                 align 10h
.text:0040B830 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040B830                                         ; DATA XREF: .text:0040BD47↓o
.text:0040B853                 db 1Dh dup(90h)
.text:0040B870 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040B870                                         ; DATA XREF: .text:0040BDA6↓o
.text:0040B896 ; ---------------------------------------------------------------------------
.text:0040B896
.text:0040B896 loc_40B896:                             ; DATA XREF: .text:loc_40BE11↓o
.text:0040B896                 and     [ebx+45h], dl
.text:0040B899                 add     [eax], ah
.text:0040B89B                 push    ebx
.text:0040B89C                 push    eax
.text:0040B89D                 xor     [eax], eax
.text:0040B89F
.text:0040B89F loc_40B89F:                             ; DATA XREF: .text:loc_40BE8B↓o
.text:0040B89F                 and     [edi+53h], cl
.text:0040B8A2                 push    edx
.text:0040B8A3                 xor     al, [eax]
.text:0040B8A5                 lea     esi, [esi+0]
.text:0040B8A9                 lea     edi, [edi+0]
.text:0040B8B0                 push    edi
.text:0040B8B1                 push    esi
.text:0040B8B2                 push    ebx
.text:0040B8B3                 sub     esp, 130h
.text:0040B8B9                 mov     ebx, [esp+140h]
.text:0040B8C0                 call    sub_40BFC0
.text:0040B8C5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040B8CA                 cmp     eax, 1
.text:0040B8CD                 jz      loc_40BD70
.text:0040B8D3                 cmp     eax, 1
.text:0040B8D6                 jb      loc_40BD46
.text:0040B8DC                 cmp     eax, 2
.text:0040B8DF                 jz      loc_40B990
.text:0040B8E5                 cmp     eax, 3
.text:0040B8E8                 jz      short loc_40B94F
.text:0040B8EA                 lea     esi, [esi+0]
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: .text:0040B985↓j
.text:0040B8F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040B8F6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040B8FC
.text:0040B8FC loc_40B8FC:                             ; CODE XREF: .text:0040BD8F↓j
.text:0040B8FC                 mov     [esp+10h], edx
.text:0040B900                 mov     ebx, [esp+144h]
.text:0040B907                 mov     [esp+0Ch], ecx
.text:0040B90B                 mov     [esp+8], eax
.text:0040B90F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040B917                 mov     [esp], ebx
.text:0040B91A                 call    sprintf
.text:0040B91F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040B927                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040B92D                 mov     ecx, [esp+148h]
.text:0040B934                 mov     [esp+8], edi
.text:0040B938                 mov     [esp], ecx
.text:0040B93B                 call    sprintf
.text:0040B940                 mov     eax, 1
.text:0040B945
.text:0040B945 loc_40B945:                             ; CODE XREF: .text:0040BB3F↓j
.text:0040B945                                         ; .text:0040BB8C↓j
.text:0040B945                 add     esp, 130h
.text:0040B94B                 pop     ebx
.text:0040B94C                 pop     esi
.text:0040B94D                 pop     edi
.text:0040B94E                 retn
.text:0040B94F ; ---------------------------------------------------------------------------
.text:0040B94F
.text:0040B94F loc_40B94F:                             ; CODE XREF: .text:0040B8E8↑j
.text:0040B94F                 mov     dword ptr [ebx], 7263694Dh
.text:0040B955                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B95C                 mov     dword ptr [ebx+8], 69572074h
.text:0040B963                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B96A                 mov     dword ptr [ebx+10h], 45432073h
.text:0040B971                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040B977                 mov     esi, esi
.text:0040B979                 lea     edi, [edi+0]
.text:0040B980
.text:0040B980 loc_40B980:                             ; CODE XREF: .text:0040BA28↓j
.text:0040B980                                         ; .text:0040BD69↓j ...
.text:0040B980                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040B985                 jmp     loc_40B8F0
.text:0040B985 ; ---------------------------------------------------------------------------
.text:0040B98A                 align 10h
.text:0040B990
.text:0040B990 loc_40B990:                             ; CODE XREF: .text:0040B8DF↑j
.text:0040B990                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040B996                 cmp     edx, 3
.text:0040B999                 mov     eax, edx
.text:0040B99B                 jz      loc_40BD05
.text:0040B9A1
.text:0040B9A1 loc_40B9A1:                             ; CODE XREF: .text:0040BD0C↓j
.text:0040B9A1                 cmp     eax, 4
.text:0040B9A4                 jz      loc_40BCC5
.text:0040B9AA
.text:0040B9AA loc_40B9AA:                             ; CODE XREF: .text:0040BCCD↓j
.text:0040B9AA                 cmp     eax, 4
.text:0040B9AD                 ja      loc_40BC12
.text:0040B9B3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040B9B9                 test    ecx, ecx
.text:0040B9BB                 jnz     loc_40BC12
.text:0040B9C1                 mov     dword ptr [ebx], 7263694Dh
.text:0040B9C7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040B9CE                 mov     dword ptr [ebx+8], 69572074h
.text:0040B9D5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040B9DC                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040B9E3
.text:0040B9E3 loc_40B9E3:                             ; CODE XREF: .text:0040BC85↓j
.text:0040B9E3                 mov     byte ptr [ebx+14h], 0
.text:0040B9E7
.text:0040B9E7 loc_40B9E7:                             ; CODE XREF: .text:0040BC15↓j
.text:0040B9E7                                         ; .text:0040BC2C↓j ...
.text:0040B9E7                 mov     esi, dword_411080
.text:0040B9ED                 test    esi, esi
.text:0040B9EF                 jz      loc_40BB02
.text:0040B9F5                 movzx   eax, ds:byte_4124AA
.text:0040B9FC                 cmp     al, 1
.text:0040B9FE                 jz      loc_40BAE2
.text:0040BA04                 cmp     al, 3
.text:0040BA06                 jz      short loc_40BA2D
.text:0040BA08
.text:0040BA08 loc_40BA08:                             ; CODE XREF: .text:0040BA4B↓j
.text:0040BA08                                         ; .text:0040BA86↓j ...
.text:0040BA08                 mov     dword ptr [esp+4], offset asc_40B700 ; " "
.text:0040BA10                 mov     [esp], ebx
.text:0040BA13                 call    strcat
.text:0040BA18                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040BA20                 mov     [esp], ebx
.text:0040BA23                 call    strcat
.text:0040BA28                 jmp     loc_40B980
.text:0040BA2D ; ---------------------------------------------------------------------------
.text:0040BA2D
.text:0040BA2D loc_40BA2D:                             ; CODE XREF: .text:0040BA06↑j
.text:0040BA2D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040BA34                 jz      short loc_40BA56
.text:0040BA36
.text:0040BA36 loc_40BA36:                             ; CODE XREF: .text:0040BA62↓j
.text:0040BA36                 test    byte ptr ds:word_4124A8, 2
.text:0040BA3D                 jz      short loc_40BA4D
.text:0040BA3F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040BA46
.text:0040BA46 loc_40BA46:                             ; CODE XREF: .text:0040BA54↓j
.text:0040BA46                 call    printf
.text:0040BA4B                 jmp     short loc_40BA08
.text:0040BA4D ; ---------------------------------------------------------------------------
.text:0040BA4D
.text:0040BA4D loc_40BA4D:                             ; CODE XREF: .text:0040BA3D↑j
.text:0040BA4D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040BA54                 jmp     short loc_40BA46
.text:0040BA56 ; ---------------------------------------------------------------------------
.text:0040BA56
.text:0040BA56 loc_40BA56:                             ; CODE XREF: .text:0040BA34↑j
.text:0040BA56                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040BA5B                 cmp     eax, 2
.text:0040BA5E                 jz      short loc_40BAA0
.text:0040BA60                 test    eax, eax
.text:0040BA62                 jnz     short loc_40BA36
.text:0040BA64                 cmp     byte ptr ds:word_4124A8, 0
.text:0040BA6B                 js      short loc_40BA92
.text:0040BA6D                 test    byte ptr ds:word_4124A8, 2
.text:0040BA74                 jnz     short loc_40BA88
.text:0040BA76                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040BA7E
.text:0040BA7E loc_40BA7E:                             ; CODE XREF: .text:0040BA90↓j
.text:0040BA7E                                         ; .text:0040BA9A↓j ...
.text:0040BA7E                 mov     [esp], ebx
.text:0040BA81                 call    strcat
.text:0040BA86                 jmp     short loc_40BA08
.text:0040BA88 ; ---------------------------------------------------------------------------
.text:0040BA88
.text:0040BA88 loc_40BA88:                             ; CODE XREF: .text:0040BA74↑j
.text:0040BA88                                         ; .text:0040BBE9↓j
.text:0040BA88                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040BA90                 jmp     short loc_40BA7E
.text:0040BA92 ; ---------------------------------------------------------------------------
.text:0040BA92
.text:0040BA92 loc_40BA92:                             ; CODE XREF: .text:0040BA6B↑j
.text:0040BA92                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040BA9A                 jmp     short loc_40BA7E
.text:0040BA9A ; ---------------------------------------------------------------------------
.text:0040BA9C                 align 10h
.text:0040BAA0
.text:0040BAA0 loc_40BAA0:                             ; CODE XREF: .text:0040BA5E↑j
.text:0040BAA0                 cmp     byte ptr ds:word_4124A8, 0
.text:0040BAA7                 js      short loc_40BAD8
.text:0040BAA9                 movzx   eax, ds:word_4124A8
.text:0040BAB0                 test    al, 2
.text:0040BAB2                 jnz     short loc_40BACE
.text:0040BAB4                 cmp     ax, 400h
.text:0040BAB8                 jz      short loc_40BAC4
.text:0040BABA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040BAC2                 jmp     short loc_40BA7E
.text:0040BAC4 ; ---------------------------------------------------------------------------
.text:0040BAC4
.text:0040BAC4 loc_40BAC4:                             ; CODE XREF: .text:0040BAB8↑j
.text:0040BAC4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040BACC                 jmp     short loc_40BA7E
.text:0040BACE ; ---------------------------------------------------------------------------
.text:0040BACE
.text:0040BACE loc_40BACE:                             ; CODE XREF: .text:0040BAB2↑j
.text:0040BACE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040BAD6                 jmp     short loc_40BA7E
.text:0040BAD8 ; ---------------------------------------------------------------------------
.text:0040BAD8
.text:0040BAD8 loc_40BAD8:                             ; CODE XREF: .text:0040BAA7↑j
.text:0040BAD8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040BAE0                 jmp     short loc_40BA7E
.text:0040BAE2 ; ---------------------------------------------------------------------------
.text:0040BAE2
.text:0040BAE2 loc_40BAE2:                             ; CODE XREF: .text:0040B9FE↑j
.text:0040BAE2                 test    byte ptr ds:word_4124A8+1, 2
.text:0040BAE9                 jz      short loc_40BAF5
.text:0040BAEB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040BAF3                 jmp     short loc_40BA7E
.text:0040BAF5 ; ---------------------------------------------------------------------------
.text:0040BAF5
.text:0040BAF5 loc_40BAF5:                             ; CODE XREF: .text:0040BAE9↑j
.text:0040BAF5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040BAFD                 jmp     loc_40BA7E
.text:0040BB02 ; ---------------------------------------------------------------------------
.text:0040BB02
.text:0040BB02 loc_40BB02:                             ; CODE XREF: .text:0040B9EF↑j
.text:0040BB02                 mov     dword ptr [esp+28h], 0FFh
.text:0040BB0A                 lea     edx, [esp+2Ch]
.text:0040BB0E                 mov     [esp+10h], edx
.text:0040BB12                 mov     dword ptr [esp+0Ch], 1
.text:0040BB1A                 mov     dword ptr [esp+8], 0
.text:0040BB22                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040BB2A                 mov     dword ptr [esp], 80000002h
.text:0040BB31                 call    RegOpenKeyExA
.text:0040BB36                 mov     edi, eax
.text:0040BB38                 sub     esp, 14h
.text:0040BB3B                 xor     eax, eax
.text:0040BB3D                 test    edi, edi
.text:0040BB3F                 jnz     loc_40B945
.text:0040BB45                 mov     dword ptr [esp+0Ch], 0
.text:0040BB4D                 mov     edi, [esp+2Ch]
.text:0040BB51                 lea     esi, [esp+28h]
.text:0040BB55                 mov     [esp+14h], esi
.text:0040BB59                 lea     esi, [esp+30h]
.text:0040BB5D                 mov     [esp+10h], esi
.text:0040BB61                 mov     dword ptr [esp+8], 0
.text:0040BB69                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040BB71                 mov     [esp], edi
.text:0040BB74                 call    RegQueryValueExA
.text:0040BB79                 sub     esp, 18h
.text:0040BB7C                 test    eax, eax
.text:0040BB7E                 jnz     short loc_40BB8A
.text:0040BB80                 cmp     dword ptr [esp+28h], 0FFh
.text:0040BB88                 jbe     short loc_40BB91
.text:0040BB8A
.text:0040BB8A loc_40BB8A:                             ; CODE XREF: .text:0040BB7E↑j
.text:0040BB8A                 xor     eax, eax
.text:0040BB8C                 jmp     loc_40B945
.text:0040BB91 ; ---------------------------------------------------------------------------
.text:0040BB91
.text:0040BB91 loc_40BB91:                             ; CODE XREF: .text:0040BB88↑j
.text:0040BB91                 mov     edx, [esp+2Ch]
.text:0040BB95                 mov     [esp], edx
.text:0040BB98                 call    RegCloseKey
.text:0040BB9D                 sub     esp, 4
.text:0040BBA0                 mov     [esp+4], esi
.text:0040BBA4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040BBAB                 call    lstrcmpiA
.text:0040BBB0                 sub     esp, 8
.text:0040BBB3                 test    eax, eax
.text:0040BBB5                 jz      short loc_40BC00
.text:0040BBB7
.text:0040BBB7 loc_40BBB7:                             ; CODE XREF: .text:0040BC10↓j
.text:0040BBB7                 mov     [esp+4], esi
.text:0040BBBB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040BBC2                 call    lstrcmpiA
.text:0040BBC7                 sub     esp, 8
.text:0040BBCA                 test    eax, eax
.text:0040BBCC                 jz      short loc_40BBEE
.text:0040BBCE
.text:0040BBCE loc_40BBCE:                             ; CODE XREF: .text:0040BBFE↓j
.text:0040BBCE                 mov     [esp+4], esi
.text:0040BBD2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040BBD9                 call    lstrcmpiA
.text:0040BBDE                 sub     esp, 8
.text:0040BBE1                 test    eax, eax
.text:0040BBE3                 jnz     loc_40BA08
.text:0040BBE9                 jmp     loc_40BA88
.text:0040BBEE ; ---------------------------------------------------------------------------
.text:0040BBEE
.text:0040BBEE loc_40BBEE:                             ; CODE XREF: .text:0040BBCC↑j
.text:0040BBEE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040BBF6                 mov     [esp], ebx
.text:0040BBF9                 call    strcat
.text:0040BBFE                 jmp     short loc_40BBCE
.text:0040BC00 ; ---------------------------------------------------------------------------
.text:0040BC00
.text:0040BC00 loc_40BC00:                             ; CODE XREF: .text:0040BBB5↑j
.text:0040BC00                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040BC08                 mov     [esp], ebx
.text:0040BC0B                 call    strcat
.text:0040BC10                 jmp     short loc_40BBB7
.text:0040BC12 ; ---------------------------------------------------------------------------
.text:0040BC12
.text:0040BC12 loc_40BC12:                             ; CODE XREF: .text:0040B9AD↑j
.text:0040BC12                                         ; .text:0040B9BB↑j
.text:0040BC12                 cmp     eax, 5
.text:0040BC15                 jnz     loc_40B9E7
.text:0040BC1B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040BC20                 cmp     eax, 2
.text:0040BC23                 jz      short loc_40BC8A
.text:0040BC25                 cmp     eax, 1
.text:0040BC28                 jz      short loc_40BC63
.text:0040BC2A                 test    eax, eax
.text:0040BC2C                 jnz     loc_40B9E7
.text:0040BC32                 mov     dword ptr [ebx], 7263694Dh
.text:0040BC38                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BC3F                 mov     dword ptr [ebx+8], 69572074h
.text:0040BC46                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BC4D                 mov     dword ptr [ebx+10h], 30322073h
.text:0040BC54                 mov     word ptr [ebx+14h], 3030h
.text:0040BC5A                 mov     byte ptr [ebx+16h], 0
.text:0040BC5E                 jmp     loc_40B9E7
.text:0040BC63 ; ---------------------------------------------------------------------------
.text:0040BC63
.text:0040BC63 loc_40BC63:                             ; CODE XREF: .text:0040BC28↑j
.text:0040BC63                 mov     dword ptr [ebx], 7263694Dh
.text:0040BC69                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BC70                 mov     dword ptr [ebx+8], 69572074h
.text:0040BC77                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BC7E                 mov     dword ptr [ebx+10h], 50582073h
.text:0040BC85                 jmp     loc_40B9E3
.text:0040BC8A ; ---------------------------------------------------------------------------
.text:0040BC8A
.text:0040BC8A loc_40BC8A:                             ; CODE XREF: .text:0040BC23↑j
.text:0040BC8A                 mov     dword ptr [ebx], 7263694Dh
.text:0040BC90                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BC97                 mov     dword ptr [ebx+8], 69572074h
.text:0040BC9E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BCA5                 mov     dword ptr [ebx+10h], 65532073h
.text:0040BCAC                 mov     dword ptr [ebx+14h], 72657672h
.text:0040BCB3                 mov     dword ptr [ebx+18h], 30303220h
.text:0040BCBA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040BCC0                 jmp     loc_40B9E7
.text:0040BCC5 ; ---------------------------------------------------------------------------
.text:0040BCC5
.text:0040BCC5 loc_40BCC5:                             ; CODE XREF: .text:0040B9A4↑j
.text:0040BCC5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040BCCB                 test    edx, edx
.text:0040BCCD                 jnz     loc_40B9AA
.text:0040BCD3                 mov     dword ptr [ebx], 7263694Dh
.text:0040BCD9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BCE0                 mov     dword ptr [ebx+8], 69572074h
.text:0040BCE7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BCEE                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040BCF5                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040BCFC                 mov     byte ptr [ebx+18h], 0
.text:0040BD00                 jmp     loc_40B9E7
.text:0040BD05 ; ---------------------------------------------------------------------------
.text:0040BD05
.text:0040BD05 loc_40BD05:                             ; CODE XREF: .text:0040B99B↑j
.text:0040BD05                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040BD0C                 jnz     loc_40B9A1
.text:0040BD12                 mov     dword ptr [ebx], 7263694Dh
.text:0040BD18                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BD1F                 mov     dword ptr [ebx+8], 69572074h
.text:0040BD26                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BD2D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040BD34                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040BD3B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040BD41                 jmp     loc_40B9E7
.text:0040BD46 ; ---------------------------------------------------------------------------
.text:0040BD46
.text:0040BD46 loc_40BD46:                             ; CODE XREF: .text:0040B8D6↑j
.text:0040BD46                 cld
.text:0040BD47                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040BD4C                 mov     ecx, 8
.text:0040BD51                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040BD58                 mov     edi, ebx
.text:0040BD5A                 rep movsd
.text:0040BD5C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040BD63                 mov     [edi+2], dl
.text:0040BD66                 mov     [edi], si
.text:0040BD69                 jmp     loc_40B980
.text:0040BD69 ; ---------------------------------------------------------------------------
.text:0040BD6E                 align 10h
.text:0040BD70
.text:0040BD70 loc_40BD70:                             ; CODE XREF: .text:0040B8CD↑j
.text:0040BD70                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040BD76                 cmp     ecx, 4
.text:0040BD79                 jz      loc_40BE30
.text:0040BD7F
.text:0040BD7F loc_40BD7F:                             ; CODE XREF: .text:0040BE86↓j
.text:0040BD7F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040BD85
.text:0040BD85 loc_40BD85:                             ; CODE XREF: .text:0040BE38↓j
.text:0040BD85                 cmp     ecx, 4
.text:0040BD88                 jz      short loc_40BD94
.text:0040BD8A
.text:0040BD8A loc_40BD8A:                             ; CODE XREF: .text:0040BD9C↓j
.text:0040BD8A                                         ; .text:0040BDA1↓j
.text:0040BD8A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040BD8F                 jmp     loc_40B8FC
.text:0040BD94 ; ---------------------------------------------------------------------------
.text:0040BD94
.text:0040BD94 loc_40BD94:                             ; CODE XREF: .text:0040BD88↑j
.text:0040BD94                 cmp     edx, 0Ah
.text:0040BD97                 jz      short loc_40BDC1
.text:0040BD99
.text:0040BD99 loc_40BD99:                             ; CODE XREF: .text:0040BE0F↓j
.text:0040BD99                 cmp     ecx, 4
.text:0040BD9C                 jnz     short loc_40BD8A
.text:0040BD9E                 cmp     edx, 5Ah ; 'Z'
.text:0040BDA1                 jnz     short loc_40BD8A
.text:0040BDA3                 cld
.text:0040BDA4                 mov     edi, ebx
.text:0040BDA6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040BDAB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040BDB2                 mov     ecx, 9
.text:0040BDB7                 rep movsd
.text:0040BDB9                 mov     [edi], bx
.text:0040BDBC                 jmp     loc_40B980
.text:0040BDC1 ; ---------------------------------------------------------------------------
.text:0040BDC1
.text:0040BDC1 loc_40BDC1:                             ; CODE XREF: .text:0040BD97↑j
.text:0040BDC1                 mov     dword ptr [ebx], 7263694Dh
.text:0040BDC7                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BDCE                 mov     dword ptr [ebx+8], 69572074h
.text:0040BDD5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BDDC                 mov     dword ptr [ebx+10h], 38392073h
.text:0040BDE3                 mov     byte ptr [ebx+14h], 0
.text:0040BDE7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040BDED                 lea     edi, [edx-7CFh]
.text:0040BDF3                 cmp     edi, 0B7h ; '·'
.text:0040BDF9                 jbe     short loc_40BE23
.text:0040BDFB                 cmp     edx, 886h
.text:0040BE01                 ja      short loc_40BE11
.text:0040BE03
.text:0040BE03 loc_40BE03:                             ; CODE XREF: .text:0040BE21↓j
.text:0040BE03                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040BE09                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040BE0F                 jmp     short loc_40BD99
.text:0040BE11 ; ---------------------------------------------------------------------------
.text:0040BE11
.text:0040BE11 loc_40BE11:                             ; CODE XREF: .text:0040BE01↑j
.text:0040BE11                 mov     dword ptr [esp+4], offset loc_40B896
.text:0040BE19
.text:0040BE19 loc_40BE19:                             ; CODE XREF: .text:0040BE2B↓j
.text:0040BE19                 mov     [esp], ebx
.text:0040BE1C                 call    strcat
.text:0040BE21                 jmp     short loc_40BE03
.text:0040BE23 ; ---------------------------------------------------------------------------
.text:0040BE23
.text:0040BE23 loc_40BE23:                             ; CODE XREF: .text:0040BDF9↑j
.text:0040BE23                 mov     dword ptr [esp+4], 40B89Ah
.text:0040BE2B                 jmp     short loc_40BE19
.text:0040BE2B ; ---------------------------------------------------------------------------
.text:0040BE2D                 align 10h
.text:0040BE30
.text:0040BE30 loc_40BE30:                             ; CODE XREF: .text:0040BD79↑j
.text:0040BE30                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040BE36                 test    edx, edx
.text:0040BE38                 jnz     loc_40BD85
.text:0040BE3E                 mov     dword ptr [ebx], 7263694Dh
.text:0040BE44                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040BE4B                 mov     dword ptr [ebx+8], 69572074h
.text:0040BE52                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040BE59                 mov     dword ptr [ebx+10h], 35392073h
.text:0040BE60                 mov     byte ptr [ebx+14h], 0
.text:0040BE64                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040BE6A                 lea     ecx, [edx-3B7h]
.text:0040BE70                 cmp     ecx, 81h
.text:0040BE76                 jbe     short loc_40BE9D
.text:0040BE78                 cmp     edx, 438h
.text:0040BE7E                 ja      short loc_40BE8B
.text:0040BE80
.text:0040BE80 loc_40BE80:                             ; CODE XREF: .text:0040BE9B↓j
.text:0040BE80                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040BE86                 jmp     loc_40BD7F
.text:0040BE8B ; ---------------------------------------------------------------------------
.text:0040BE8B
.text:0040BE8B loc_40BE8B:                             ; CODE XREF: .text:0040BE7E↑j
.text:0040BE8B                 mov     dword ptr [esp+4], offset loc_40B89F
.text:0040BE93
.text:0040BE93 loc_40BE93:                             ; CODE XREF: .text:0040BEA5↓j
.text:0040BE93                 mov     [esp], ebx
.text:0040BE96                 call    strcat
.text:0040BE9B                 jmp     short loc_40BE80
.text:0040BE9D ; ---------------------------------------------------------------------------
.text:0040BE9D
.text:0040BE9D loc_40BE9D:                             ; CODE XREF: .text:0040BE76↑j
.text:0040BE9D                 mov     dword ptr [esp+4], 40B89Ah
.text:0040BEA5                 jmp     short loc_40BE93
.text:0040BEA5 ; ---------------------------------------------------------------------------
.text:0040BEA7                 align 10h
.text:0040BEB0
.text:0040BEB0 ; =============== S U B R O U T I N E =======================================
.text:0040BEB0
.text:0040BEB0
.text:0040BEB0 sub_40BEB0      proc near               ; CODE XREF: .text:0040A9CE↑p
.text:0040BEB0                                         ; sub_40AE50+12A↑p
.text:0040BEB0                 sub     esp, 0Ch
.text:0040BEB3                 call    sub_40BFC0
.text:0040BEB8                 mov     eax, ds:dword_412400
.text:0040BEBD                 add     esp, 0Ch
.text:0040BEC0                 retn
.text:0040BEC0 sub_40BEB0      endp
.text:0040BEC0
.text:0040BEC1 ; ---------------------------------------------------------------------------
.text:0040BEC1                 jmp     short loc_40BED0
.text:0040BEC1 ; ---------------------------------------------------------------------------
.text:0040BEC3                 align 10h
.text:0040BED0
.text:0040BED0 loc_40BED0:                             ; CODE XREF: .text:0040BEC1↑j
.text:0040BED0                 sub     esp, 0Ch
.text:0040BED3                 call    sub_40BFC0
.text:0040BED8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040BEDD                 add     esp, 0Ch
.text:0040BEE0                 retn
.text:0040BEE1 ; ---------------------------------------------------------------------------
.text:0040BEE1                 jmp     short loc_40BEF0
.text:0040BEE1 ; ---------------------------------------------------------------------------
.text:0040BEE3                 align 10h
.text:0040BEF0
.text:0040BEF0 loc_40BEF0:                             ; CODE XREF: .text:0040BEE1↑j
.text:0040BEF0                 sub     esp, 0Ch
.text:0040BEF3                 call    sub_40BFC0
.text:0040BEF8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040BEFD                 add     esp, 0Ch
.text:0040BF00                 retn
.text:0040BF01 ; ---------------------------------------------------------------------------
.text:0040BF01                 jmp     short loc_40BF10
.text:0040BF01 ; ---------------------------------------------------------------------------
.text:0040BF03                 align 10h
.text:0040BF10
.text:0040BF10 loc_40BF10:                             ; CODE XREF: .text:0040BF01↑j
.text:0040BF10                 sub     esp, 0Ch
.text:0040BF13                 call    sub_40BFC0
.text:0040BF18                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040BF1D                 add     esp, 0Ch
.text:0040BF20                 retn
.text:0040BF21 ; ---------------------------------------------------------------------------
.text:0040BF21                 jmp     short loc_40BF30
.text:0040BF21 ; ---------------------------------------------------------------------------
.text:0040BF23                 align 10h
.text:0040BF30
.text:0040BF30 loc_40BF30:                             ; CODE XREF: .text:0040BF21↑j
.text:0040BF30                 sub     esp, 0Ch
.text:0040BF33                 call    GetVersion
.text:0040BF38                 shr     eax, 10h
.text:0040BF3B                 add     esp, 0Ch
.text:0040BF3E                 retn
.text:0040BF3E ; ---------------------------------------------------------------------------
.text:0040BF3F                 align 10h
.text:0040BF40                 sub     esp, 0Ch
.text:0040BF43                 call    sub_40BFC0
.text:0040BF48                 xor     eax, eax
.text:0040BF4A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040BF51                 setz    al
.text:0040BF54                 add     esp, 0Ch
.text:0040BF57                 retn
.text:0040BF57 ; ---------------------------------------------------------------------------
.text:0040BF58                 align 10h
.text:0040BF60
.text:0040BF60 ; =============== S U B R O U T I N E =======================================
.text:0040BF60
.text:0040BF60
.text:0040BF60 sub_40BF60      proc near               ; CODE XREF: .text:loc_40A360↑p
.text:0040BF60                                         ; .text:loc_40A9B4↑p ...
.text:0040BF60                 sub     esp, 0Ch
.text:0040BF63                 call    sub_40BFC0
.text:0040BF68                 xor     eax, eax
.text:0040BF6A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040BF71                 setz    al
.text:0040BF74                 add     esp, 0Ch
.text:0040BF77                 retn
.text:0040BF77 sub_40BF60      endp
.text:0040BF77
.text:0040BF77 ; ---------------------------------------------------------------------------
.text:0040BF78                 align 10h
.text:0040BF80                 sub     esp, 0Ch
.text:0040BF83                 call    sub_40BFC0
.text:0040BF88                 xor     eax, eax
.text:0040BF8A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040BF91                 setz    al
.text:0040BF94                 add     esp, 0Ch
.text:0040BF97                 retn
.text:0040BF97 ; ---------------------------------------------------------------------------
.text:0040BF98                 align 10h
.text:0040BFA0                 sub     esp, 0Ch
.text:0040BFA3                 call    sub_40BFC0
.text:0040BFA8                 xor     eax, eax
.text:0040BFAA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040BFB1                 setz    al
.text:0040BFB4                 add     esp, 0Ch
.text:0040BFB7                 retn
.text:0040BFB7 ; ---------------------------------------------------------------------------
.text:0040BFB8                 align 10h
.text:0040BFC0
.text:0040BFC0 ; =============== S U B R O U T I N E =======================================
.text:0040BFC0
.text:0040BFC0
.text:0040BFC0 sub_40BFC0      proc near               ; CODE XREF: .text:0040B8C0↑p
.text:0040BFC0                                         ; sub_40BEB0+3↑p ...
.text:0040BFC0
.text:0040BFC0 lpVersionInformation= dword ptr -0BCh
.text:0040BFC0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040BFC0
.text:0040BFC0                 sub     esp, 0BCh
.text:0040BFC6                 mov     edx, ds:dword_4124B0
.text:0040BFCC                 test    edx, edx
.text:0040BFCE                 jz      short loc_40BFE0
.text:0040BFD0
.text:0040BFD0 loc_40BFD0:                             ; CODE XREF: sub_40BFC0+7B↓j
.text:0040BFD0                 mov     edx, 1
.text:0040BFD5
.text:0040BFD5 loc_40BFD5:                             ; CODE XREF: sub_40BFC0+217↓j
.text:0040BFD5                 mov     eax, edx
.text:0040BFD7                 add     esp, 0BCh
.text:0040BFDD                 retn
.text:0040BFDD ; ---------------------------------------------------------------------------
.text:0040BFDE                 align 10h
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: sub_40BFC0+E↑j
.text:0040BFE0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040BFE7                 mov     edx, 9Ch ; 'œ'
.text:0040BFEC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040BFF2                 call    GetVersionExA
.text:0040BFF7                 sub     esp, 4
.text:0040BFFA                 test    eax, eax
.text:0040BFFC                 jz      loc_40C1B4
.text:0040C002
.text:0040C002 loc_40C002:                             ; CODE XREF: sub_40BFC0+245↓j
.text:0040C002                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040C009                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C00E                 cmp     eax, 1
.text:0040C011                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040C017                 jz      loc_40C100
.text:0040C01D                 cmp     eax, 1
.text:0040C020                 jb      loc_40C0F0
.text:0040C026                 cmp     eax, 2
.text:0040C029                 jz      short loc_40C04A
.text:0040C02B                 cmp     eax, 3
.text:0040C02E                 jz      short loc_40C03D
.text:0040C030
.text:0040C030 loc_40C030:                             ; CODE XREF: sub_40BFC0+88↓j
.text:0040C030                                         ; sub_40BFC0+C0↓j ...
.text:0040C030                 mov     edx, 1
.text:0040C035                 mov     ds:dword_4124B0, edx
.text:0040C03B                 jmp     short loc_40BFD0
.text:0040C03D ; ---------------------------------------------------------------------------
.text:0040C03D
.text:0040C03D loc_40C03D:                             ; CODE XREF: sub_40BFC0+6E↑j
.text:0040C03D                 mov     ecx, 17h
.text:0040C042
.text:0040C042 loc_40C042:                             ; CODE XREF: sub_40BFC0+1A7↓j
.text:0040C042                 mov     ds:dword_412400, ecx
.text:0040C048                 jmp     short loc_40C030
.text:0040C04A ; ---------------------------------------------------------------------------
.text:0040C04A
.text:0040C04A loc_40C04A:                             ; CODE XREF: sub_40BFC0+69↑j
.text:0040C04A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040C04F                 cmp     eax, 3
.text:0040C052                 jz      short loc_40C0CB
.text:0040C054                 cmp     eax, 4
.text:0040C057                 jz      short loc_40C0BA
.text:0040C059
.text:0040C059 loc_40C059:                             ; CODE XREF: sub_40BFC0+102↓j
.text:0040C059                 cmp     eax, 4
.text:0040C05C                 ja      short loc_40C082
.text:0040C05E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040C064                 test    ecx, ecx
.text:0040C066                 jnz     short loc_40C082
.text:0040C068                 mov     edx, 1Eh
.text:0040C06D
.text:0040C06D loc_40C06D:                             ; CODE XREF: sub_40BFC0+DF↓j
.text:0040C06D                 mov     ds:dword_412400, edx
.text:0040C073
.text:0040C073 loc_40C073:                             ; CODE XREF: sub_40BFC0+C5↓j
.text:0040C073                                         ; sub_40BFC0+D8↓j ...
.text:0040C073                 movzx   ecx, ds:word_4124A4
.text:0040C07A                 add     ds:dword_412400, ecx
.text:0040C080                 jmp     short loc_40C030
.text:0040C082 ; ---------------------------------------------------------------------------
.text:0040C082
.text:0040C082 loc_40C082:                             ; CODE XREF: sub_40BFC0+9C↑j
.text:0040C082                                         ; sub_40BFC0+A6↑j
.text:0040C082                 cmp     eax, 5
.text:0040C085                 jnz     short loc_40C073
.text:0040C087                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C08C                 cmp     eax, 2
.text:0040C08F                 jz      short loc_40C0AE
.text:0040C091                 cmp     eax, 1
.text:0040C094                 jz      short loc_40C0A1
.text:0040C096                 test    eax, eax
.text:0040C098                 jnz     short loc_40C073
.text:0040C09A                 mov     edx, 32h ; '2'
.text:0040C09F                 jmp     short loc_40C06D
.text:0040C0A1 ; ---------------------------------------------------------------------------
.text:0040C0A1
.text:0040C0A1 loc_40C0A1:                             ; CODE XREF: sub_40BFC0+D4↑j
.text:0040C0A1                 mov     ecx, 3Ch ; '<'
.text:0040C0A6
.text:0040C0A6 loc_40C0A6:                             ; CODE XREF: sub_40BFC0+122↓j
.text:0040C0A6                 mov     ds:dword_412400, ecx
.text:0040C0AC                 jmp     short loc_40C073
.text:0040C0AE ; ---------------------------------------------------------------------------
.text:0040C0AE
.text:0040C0AE loc_40C0AE:                             ; CODE XREF: sub_40BFC0+CF↑j
.text:0040C0AE                 mov     eax, 46h ; 'F'
.text:0040C0B3
.text:0040C0B3 loc_40C0B3:                             ; CODE XREF: sub_40BFC0+109↓j
.text:0040C0B3                                         ; sub_40BFC0+129↓j
.text:0040C0B3                 mov     ds:dword_412400, eax
.text:0040C0B8                 jmp     short loc_40C073
.text:0040C0BA ; ---------------------------------------------------------------------------
.text:0040C0BA
.text:0040C0BA loc_40C0BA:                             ; CODE XREF: sub_40BFC0+97↑j
.text:0040C0BA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040C0C0                 test    ecx, ecx
.text:0040C0C2                 jnz     short loc_40C059
.text:0040C0C4                 mov     eax, 28h ; '('
.text:0040C0C9                 jmp     short loc_40C0B3
.text:0040C0CB ; ---------------------------------------------------------------------------
.text:0040C0CB
.text:0040C0CB loc_40C0CB:                             ; CODE XREF: sub_40BFC0+92↑j
.text:0040C0CB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C0D0                 cmp     eax, 33h ; '3'
.text:0040C0D3                 jz      short loc_40C0E4
.text:0040C0D5                 cmp     eax, 5
.text:0040C0D8                 setz    cl
.text:0040C0DB                 movzx   edx, cl
.text:0040C0DE                 lea     ecx, [edx+edx*4+1Eh]
.text:0040C0E2                 jmp     short loc_40C0A6
.text:0040C0E4 ; ---------------------------------------------------------------------------
.text:0040C0E4
.text:0040C0E4 loc_40C0E4:                             ; CODE XREF: sub_40BFC0+113↑j
.text:0040C0E4                 mov     eax, 24h ; '$'
.text:0040C0E9                 jmp     short loc_40C0B3
.text:0040C0E9 ; ---------------------------------------------------------------------------
.text:0040C0EB                 align 10h
.text:0040C0F0
.text:0040C0F0 loc_40C0F0:                             ; CODE XREF: sub_40BFC0+60↑j
.text:0040C0F0                 mov     edx, 2
.text:0040C0F5                 mov     ds:dword_412400, edx
.text:0040C0FB                 jmp     loc_40C030
.text:0040C100 ; ---------------------------------------------------------------------------
.text:0040C100
.text:0040C100 loc_40C100:                             ; CODE XREF: sub_40BFC0+57↑j
.text:0040C100                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C106                 cmp     ecx, 4
.text:0040C109                 jnz     loc_40C030
.text:0040C10F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C114                 test    eax, eax
.text:0040C116                 jnz     short loc_40C13A
.text:0040C118                 mov     eax, 0Ah
.text:0040C11D                 mov     ds:dword_412400, eax
.text:0040C122                 lea     eax, [edx-3B7h]
.text:0040C128                 cmp     eax, 81h
.text:0040C12D                 ja      short loc_40C1A5
.text:0040C12F                 mov     edx, 0Bh
.text:0040C134
.text:0040C134 loc_40C134:                             ; CODE XREF: sub_40BFC0+1F2↓j
.text:0040C134                 mov     ds:dword_412400, edx
.text:0040C13A
.text:0040C13A loc_40C13A:                             ; CODE XREF: sub_40BFC0+156↑j
.text:0040C13A                                         ; sub_40BFC0+1EB↓j
.text:0040C13A                 cmp     ecx, 4
.text:0040C13D                 jnz     loc_40C030
.text:0040C143                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040C14A                 jz      short loc_40C16C
.text:0040C14C
.text:0040C14C loc_40C14C:                             ; CODE XREF: sub_40BFC0+1D4↓j
.text:0040C14C                                         ; sub_40BFC0+1DC↓j
.text:0040C14C                 cmp     ecx, 4
.text:0040C14F                 jnz     loc_40C030
.text:0040C155                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040C15C                 jnz     loc_40C030
.text:0040C162                 mov     ecx, 12h
.text:0040C167                 jmp     loc_40C042
.text:0040C16C ; ---------------------------------------------------------------------------
.text:0040C16C
.text:0040C16C loc_40C16C:                             ; CODE XREF: sub_40BFC0+18A↑j
.text:0040C16C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040C172                 mov     eax, 0Eh
.text:0040C177                 mov     ds:dword_412400, eax
.text:0040C17C                 lea     eax, [edx-7CFh]
.text:0040C182                 cmp     eax, 0B7h ; '·'
.text:0040C187                 ja      short loc_40C196
.text:0040C189                 mov     edx, 0Fh
.text:0040C18E
.text:0040C18E loc_40C18E:                             ; CODE XREF: sub_40BFC0+1E3↓j
.text:0040C18E                 mov     ds:dword_412400, edx
.text:0040C194                 jmp     short loc_40C14C
.text:0040C196 ; ---------------------------------------------------------------------------
.text:0040C196
.text:0040C196 loc_40C196:                             ; CODE XREF: sub_40BFC0+1C7↑j
.text:0040C196                 cmp     edx, 886h
.text:0040C19C                 jbe     short loc_40C14C
.text:0040C19E                 mov     edx, 10h
.text:0040C1A3                 jmp     short loc_40C18E
.text:0040C1A5 ; ---------------------------------------------------------------------------
.text:0040C1A5
.text:0040C1A5 loc_40C1A5:                             ; CODE XREF: sub_40BFC0+16D↑j
.text:0040C1A5                 cmp     edx, 438h
.text:0040C1AB                 jbe     short loc_40C13A
.text:0040C1AD                 mov     edx, 0Ch
.text:0040C1B2                 jmp     short loc_40C134
.text:0040C1B4 ; ---------------------------------------------------------------------------
.text:0040C1B4
.text:0040C1B4 loc_40C1B4:                             ; CODE XREF: sub_40BFC0+3C↑j
.text:0040C1B4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040C1BC                 xor     edx, edx
.text:0040C1BE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040C1C2                 mov     dword_411080, edx
.text:0040C1C8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040C1CB                 call    GetVersionExA
.text:0040C1D0                 sub     esp, 4
.text:0040C1D3                 xor     edx, edx
.text:0040C1D5                 test    eax, eax
.text:0040C1D7                 jz      loc_40BFD5
.text:0040C1DD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040C1E1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040C1E5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040C1EB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040C1EF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040C1F5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040C1F9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040C1FF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040C205                 jmp     loc_40C002
.text:0040C205 sub_40BFC0      endp
.text:0040C205
.text:0040C205 ; ---------------------------------------------------------------------------
.text:0040C20A                 align 10h
.text:0040C210 aNotset         db 'notset',0           ; DATA XREF: .data:off_411090↓o
.text:0040C210                                         ; .data:off_411094↓o
.text:0040C217 ; ---------------------------------------------------------------------------
.text:0040C217
.text:0040C217 loc_40C217:                             ; DATA XREF: .text:loc_40C2B5↓o
.text:0040C217                 jb      short loc_40C290
.text:0040C219                 add     [eax], ah
.text:0040C21B                 or      [eax], eax
.text:0040C21D
.text:0040C21D loc_40C21D:                             ; DATA XREF: .text:0040C308↓o
.text:0040C21D                                         ; .text:0040C36E↓o ...
.text:0040C21D                 add     [eax], ah
.text:0040C21F                 and     eax, 64252064h
.text:0040C224                 and     [eax], al
.text:0040C226                 lea     esi, [esi+0]
.text:0040C229                 lea     edi, [edi+0]
.text:0040C230                 push    ebp
.text:0040C231                 push    edi
.text:0040C232                 push    esi
.text:0040C233                 push    ebx
.text:0040C234                 sub     esp, 14Ch
.text:0040C23A                 mov     edx, off_411090 ; "notset"
.text:0040C240                 mov     edi, [esp+164h]
.text:0040C247                 mov     ebp, [esp+168h]
.text:0040C24E                 mov     [esp+4], edx
.text:0040C252                 mov     edx, off_411094 ; "notset"
.text:0040C258                 mov     [esp], edx
.text:0040C25B                 call    strcmp
.text:0040C260                 test    eax, eax
.text:0040C262                 jz      loc_40C650
.text:0040C268
.text:0040C268 loc_40C268:                             ; CODE XREF: .text:0040C69C↓j
.text:0040C268                 lea     ebx, [esp+20h]
.text:0040C26C                 lea     esi, [esi+0]
.text:0040C270
.text:0040C270 loc_40C270:                             ; CODE XREF: .text:0040C2A6↓j
.text:0040C270                 mov     [esp+4], ebx
.text:0040C274                 mov     ecx, off_411094 ; "notset"
.text:0040C27A                 mov     [esp], ecx
.text:0040C27D                 call    loc_40AEF0
.text:0040C282                 test    eax, eax
.text:0040C284                 jns     short loc_40C2B5
.text:0040C286                 mov     eax, off_411094 ; "notset"
.text:0040C28B                 cmp     byte ptr [eax], 0
.text:0040C28E                 jz      short loc_40C2A8
.text:0040C290
.text:0040C290 loc_40C290:                             ; CODE XREF: .text:loc_40C217↑j
.text:0040C290                 mov     dword ptr [esp+4], 0
.text:0040C298                 mov     [esp], eax
.text:0040C29B                 call    strchr
.text:0040C2A0                 inc     eax
.text:0040C2A1                 mov     off_411094, eax ; "notset"
.text:0040C2A6                 jmp     short loc_40C270
.text:0040C2A8 ; ---------------------------------------------------------------------------
.text:0040C2A8
.text:0040C2A8 loc_40C2A8:                             ; CODE XREF: .text:0040C28E↑j
.text:0040C2A8                 xor     eax, eax
.text:0040C2AA
.text:0040C2AA loc_40C2AA:                             ; CODE XREF: .text:0040C46C↓j
.text:0040C2AA                 add     esp, 14Ch
.text:0040C2B0                 pop     ebx
.text:0040C2B1                 pop     esi
.text:0040C2B2                 pop     edi
.text:0040C2B3                 pop     ebp
.text:0040C2B4                 retn
.text:0040C2B5 ; ---------------------------------------------------------------------------
.text:0040C2B5
.text:0040C2B5 loc_40C2B5:                             ; CODE XREF: .text:0040C284↑j
.text:0040C2B5                 mov     dword ptr [edi+0Ch], offset loc_40C217
.text:0040C2BC                 lea     ecx, [esp+0D6h]
.text:0040C2C3                 lea     edx, [esp+6Ch]
.text:0040C2C7                 mov     [edi+4], ecx
.text:0040C2CA                 lea     ebx, [esp+7Ch]
.text:0040C2CE                 mov     [edi+8], edx
.text:0040C2D1                 mov     [edi], ebx
.text:0040C2D3                 mov     [esp], ebp
.text:0040C2D6                 mov     [esp+4], edi
.text:0040C2DA                 call    ___addmntentstr
.text:0040C2DF                 mov     [esp], ebp
.text:0040C2E2                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C2EA                 call    strspn
.text:0040C2EF                 mov     dword ptr [esp+4], 0
.text:0040C2F7                 mov     ebx, off_411094 ; "notset"
.text:0040C2FD                 lea     esi, [eax+ebp]
.text:0040C300                 mov     [esp+1Ch], esi
.text:0040C304                 lea     ebp, [esp+1Ch]
.text:0040C308                 mov     esi, offset loc_40C21D
.text:0040C30D                 mov     [esp], ebx
.text:0040C310                 call    strchr
.text:0040C315                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C31D                 inc     eax
.text:0040C31E                 mov     off_411094, eax ; "notset"
.text:0040C323                 mov     [esp], ebp
.text:0040C326                 call    sub_40CF90
.text:0040C32B                 test    eax, eax
.text:0040C32D                 mov     ebx, eax
.text:0040C32F                 jz      short loc_40C358
.text:0040C331                 mov     edx, eax
.text:0040C333                 mov     ecx, eax
.text:0040C335                 lea     esi, [esi+0]
.text:0040C339                 lea     edi, [edi+0]
.text:0040C340
.text:0040C340 loc_40C340:                             ; CODE XREF: .text:0040C356↓j
.text:0040C340                 movzx   eax, byte ptr [edx]
.text:0040C343                 cmp     al, 5Ch ; '\'
.text:0040C345                 jz      loc_40C5F4
.text:0040C34B
.text:0040C34B loc_40C34B:                             ; CODE XREF: .text:0040C5FC↓j
.text:0040C34B                                         ; .text:0040C60A↓j ...
.text:0040C34B                 mov     [ecx], al
.text:0040C34D
.text:0040C34D loc_40C34D:                             ; CODE XREF: .text:0040C61E↓j
.text:0040C34D                 inc     ecx
.text:0040C34E
.text:0040C34E loc_40C34E:                             ; CODE XREF: .text:0040C636↓j
.text:0040C34E                 movzx   eax, byte ptr [edx]
.text:0040C351                 mov     esi, ebx
.text:0040C353                 inc     edx
.text:0040C354                 test    al, al
.text:0040C356                 jnz     short loc_40C340
.text:0040C358
.text:0040C358 loc_40C358:                             ; CODE XREF: .text:0040C32F↑j
.text:0040C358                 mov     [edi], esi
.text:0040C35A                 mov     eax, [esp+1Ch]
.text:0040C35E                 test    eax, eax
.text:0040C360                 jnz     loc_40C5DB
.text:0040C366
.text:0040C366 loc_40C366:                             ; CODE XREF: .text:0040C5EF↓j
.text:0040C366                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C36E                 mov     esi, offset loc_40C21D
.text:0040C373                 mov     [esp], ebp
.text:0040C376                 call    sub_40CF90
.text:0040C37B                 test    eax, eax
.text:0040C37D                 mov     ebx, eax
.text:0040C37F                 jz      short loc_40C3A8
.text:0040C381                 mov     edx, eax
.text:0040C383                 mov     ecx, eax
.text:0040C385                 lea     esi, [esi+0]
.text:0040C389                 lea     edi, [edi+0]
.text:0040C390
.text:0040C390 loc_40C390:                             ; CODE XREF: .text:0040C3A6↓j
.text:0040C390                 movzx   eax, byte ptr [edx]
.text:0040C393                 cmp     al, 5Ch ; '\'
.text:0040C395                 jz      loc_40C583
.text:0040C39B
.text:0040C39B loc_40C39B:                             ; CODE XREF: .text:0040C58B↓j
.text:0040C39B                                         ; .text:0040C599↓j ...
.text:0040C39B                 mov     [ecx], al
.text:0040C39D
.text:0040C39D loc_40C39D:                             ; CODE XREF: .text:0040C5AD↓j
.text:0040C39D                 inc     ecx
.text:0040C39E
.text:0040C39E loc_40C39E:                             ; CODE XREF: .text:0040C5C5↓j
.text:0040C39E                 movzx   eax, byte ptr [edx]
.text:0040C3A1                 mov     esi, ebx
.text:0040C3A3                 inc     edx
.text:0040C3A4                 test    al, al
.text:0040C3A6                 jnz     short loc_40C390
.text:0040C3A8
.text:0040C3A8 loc_40C3A8:                             ; CODE XREF: .text:0040C37F↑j
.text:0040C3A8                 mov     [edi+4], esi
.text:0040C3AB                 mov     eax, [esp+1Ch]
.text:0040C3AF                 test    eax, eax
.text:0040C3B1                 jnz     loc_40C56A
.text:0040C3B7
.text:0040C3B7 loc_40C3B7:                             ; CODE XREF: .text:0040C57E↓j
.text:0040C3B7                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C3BF                 mov     esi, offset loc_40C21D
.text:0040C3C4                 mov     [esp], ebp
.text:0040C3C7                 call    sub_40CF90
.text:0040C3CC                 test    eax, eax
.text:0040C3CE                 mov     ebx, eax
.text:0040C3D0                 jz      short loc_40C3F8
.text:0040C3D2                 mov     edx, eax
.text:0040C3D4                 mov     ecx, eax
.text:0040C3D6                 lea     esi, [esi+0]
.text:0040C3D9                 lea     edi, [edi+0]
.text:0040C3E0
.text:0040C3E0 loc_40C3E0:                             ; CODE XREF: .text:0040C3F6↓j
.text:0040C3E0                 movzx   eax, byte ptr [edx]
.text:0040C3E3                 cmp     al, 5Ch ; '\'
.text:0040C3E5                 jz      loc_40C512
.text:0040C3EB
.text:0040C3EB loc_40C3EB:                             ; CODE XREF: .text:0040C51A↓j
.text:0040C3EB                                         ; .text:0040C528↓j ...
.text:0040C3EB                 mov     [ecx], al
.text:0040C3ED
.text:0040C3ED loc_40C3ED:                             ; CODE XREF: .text:0040C53C↓j
.text:0040C3ED                 inc     ecx
.text:0040C3EE
.text:0040C3EE loc_40C3EE:                             ; CODE XREF: .text:0040C554↓j
.text:0040C3EE                 movzx   eax, byte ptr [edx]
.text:0040C3F1                 mov     esi, ebx
.text:0040C3F3                 inc     edx
.text:0040C3F4                 test    al, al
.text:0040C3F6                 jnz     short loc_40C3E0
.text:0040C3F8
.text:0040C3F8 loc_40C3F8:                             ; CODE XREF: .text:0040C3D0↑j
.text:0040C3F8                 mov     [edi+8], esi
.text:0040C3FB                 mov     eax, [esp+1Ch]
.text:0040C3FF                 test    eax, eax
.text:0040C401                 jnz     loc_40C4F9
.text:0040C407
.text:0040C407 loc_40C407:                             ; CODE XREF: .text:0040C50D↓j
.text:0040C407                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C40F                 mov     esi, offset loc_40C21D
.text:0040C414                 mov     [esp], ebp
.text:0040C417                 call    sub_40CF90
.text:0040C41C                 test    eax, eax
.text:0040C41E                 mov     ebx, eax
.text:0040C420                 jz      short loc_40C444
.text:0040C422                 mov     edx, eax
.text:0040C424                 mov     ecx, eax
.text:0040C426                 lea     esi, [esi+0]
.text:0040C429                 lea     edi, [edi+0]
.text:0040C430
.text:0040C430 loc_40C430:                             ; CODE XREF: .text:0040C442↓j
.text:0040C430                 movzx   eax, byte ptr [edx]
.text:0040C433                 cmp     al, 5Ch ; '\'
.text:0040C435                 jz      short loc_40C4A5
.text:0040C437
.text:0040C437 loc_40C437:                             ; CODE XREF: .text:0040C4AD↓j
.text:0040C437                                         ; .text:0040C4B7↓j ...
.text:0040C437                 mov     [ecx], al
.text:0040C439
.text:0040C439 loc_40C439:                             ; CODE XREF: .text:0040C4CB↓j
.text:0040C439                 inc     ecx
.text:0040C43A
.text:0040C43A loc_40C43A:                             ; CODE XREF: .text:0040C4E3↓j
.text:0040C43A                 movzx   eax, byte ptr [edx]
.text:0040C43D                 mov     esi, ebx
.text:0040C43F                 inc     edx
.text:0040C440                 test    al, al
.text:0040C442                 jnz     short loc_40C430
.text:0040C444
.text:0040C444 loc_40C444:                             ; CODE XREF: .text:0040C420↑j
.text:0040C444                 mov     [edi+0Ch], esi
.text:0040C447                 xor     eax, eax
.text:0040C449                 mov     edx, [esp+1Ch]
.text:0040C44D                 test    edx, edx
.text:0040C44F                 jnz     short loc_40C485
.text:0040C451
.text:0040C451 loc_40C451:                             ; CODE XREF: .text:0040C4A3↓j
.text:0040C451                 cmp     eax, 1
.text:0040C454                 jz      short loc_40C47C
.text:0040C456                 cmp     eax, 1
.text:0040C459                 jle     short loc_40C471
.text:0040C45B
.text:0040C45B loc_40C45B:                             ; CODE XREF: .text:0040C473↓j
.text:0040C45B                                         ; .text:0040C483↓j
.text:0040C45B                 mov     edx, [esp+160h]
.text:0040C462                 mov     [esp], edx
.text:0040C465                 call    sub_40CF30
.text:0040C46A                 mov     eax, edi
.text:0040C46C                 jmp     loc_40C2AA
.text:0040C471 ; ---------------------------------------------------------------------------
.text:0040C471
.text:0040C471 loc_40C471:                             ; CODE XREF: .text:0040C459↑j
.text:0040C471                 test    eax, eax
.text:0040C473                 jnz     short loc_40C45B
.text:0040C475                 mov     dword ptr [edi+10h], 0
.text:0040C47C
.text:0040C47C loc_40C47C:                             ; CODE XREF: .text:0040C454↑j
.text:0040C47C                 mov     dword ptr [edi+14h], 0
.text:0040C483                 jmp     short loc_40C45B
.text:0040C485 ; ---------------------------------------------------------------------------
.text:0040C485
.text:0040C485 loc_40C485:                             ; CODE XREF: .text:0040C44F↑j
.text:0040C485                 mov     dword ptr [esp+4], 40C21Eh
.text:0040C48D                 lea     esi, [edi+14h]
.text:0040C490                 lea     ebp, [edi+10h]
.text:0040C493                 mov     [esp+0Ch], esi
.text:0040C497                 mov     [esp+8], ebp
.text:0040C49B                 mov     [esp], edx
.text:0040C49E                 call    sscanf
.text:0040C4A3                 jmp     short loc_40C451
.text:0040C4A5 ; ---------------------------------------------------------------------------
.text:0040C4A5
.text:0040C4A5 loc_40C4A5:                             ; CODE XREF: .text:0040C435↑j
.text:0040C4A5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C4A9                 jz      short loc_40C4E8
.text:0040C4AB
.text:0040C4AB loc_40C4AB:                             ; CODE XREF: .text:0040C4EC↓j
.text:0040C4AB                                         ; .text:0040C4F2↓j
.text:0040C4AB                 cmp     al, 5Ch ; '\'
.text:0040C4AD                 jnz     short loc_40C437
.text:0040C4AF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C4B3                 jz      short loc_40C4D0
.text:0040C4B5
.text:0040C4B5 loc_40C4B5:                             ; CODE XREF: .text:0040C4D4↓j
.text:0040C4B5                                         ; .text:0040C4DA↓j
.text:0040C4B5                 cmp     al, 5Ch ; '\'
.text:0040C4B7                 jnz     loc_40C437
.text:0040C4BD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C4C1                 jnz     loc_40C437
.text:0040C4C7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C4CA                 inc     edx
.text:0040C4CB                 jmp     loc_40C439
.text:0040C4D0 ; ---------------------------------------------------------------------------
.text:0040C4D0
.text:0040C4D0 loc_40C4D0:                             ; CODE XREF: .text:0040C4B3↑j
.text:0040C4D0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C4D4                 jnz     short loc_40C4B5
.text:0040C4D6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C4DA                 jnz     short loc_40C4B5
.text:0040C4DC                 mov     byte ptr [ecx], 9
.text:0040C4DF
.text:0040C4DF loc_40C4DF:                             ; CODE XREF: .text:0040C4F7↓j
.text:0040C4DF                 inc     ecx
.text:0040C4E0                 add     edx, 3
.text:0040C4E3                 jmp     loc_40C43A
.text:0040C4E8 ; ---------------------------------------------------------------------------
.text:0040C4E8
.text:0040C4E8 loc_40C4E8:                             ; CODE XREF: .text:0040C4A9↑j
.text:0040C4E8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C4EC                 jnz     short loc_40C4AB
.text:0040C4EE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C4F2                 jnz     short loc_40C4AB
.text:0040C4F4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C4F7                 jmp     short loc_40C4DF
.text:0040C4F9 ; ---------------------------------------------------------------------------
.text:0040C4F9
.text:0040C4F9 loc_40C4F9:                             ; CODE XREF: .text:0040C401↑j
.text:0040C4F9                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C501                 mov     [esp], eax
.text:0040C504                 call    strspn
.text:0040C509                 add     [esp+1Ch], eax
.text:0040C50D                 jmp     loc_40C407
.text:0040C512 ; ---------------------------------------------------------------------------
.text:0040C512
.text:0040C512 loc_40C512:                             ; CODE XREF: .text:0040C3E5↑j
.text:0040C512                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C516                 jz      short loc_40C559
.text:0040C518
.text:0040C518 loc_40C518:                             ; CODE XREF: .text:0040C55D↓j
.text:0040C518                                         ; .text:0040C563↓j
.text:0040C518                 cmp     al, 5Ch ; '\'
.text:0040C51A                 jnz     loc_40C3EB
.text:0040C520                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C524                 jz      short loc_40C541
.text:0040C526
.text:0040C526 loc_40C526:                             ; CODE XREF: .text:0040C545↓j
.text:0040C526                                         ; .text:0040C54B↓j
.text:0040C526                 cmp     al, 5Ch ; '\'
.text:0040C528                 jnz     loc_40C3EB
.text:0040C52E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C532                 jnz     loc_40C3EB
.text:0040C538                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C53B                 inc     edx
.text:0040C53C                 jmp     loc_40C3ED
.text:0040C541 ; ---------------------------------------------------------------------------
.text:0040C541
.text:0040C541 loc_40C541:                             ; CODE XREF: .text:0040C524↑j
.text:0040C541                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C545                 jnz     short loc_40C526
.text:0040C547                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C54B                 jnz     short loc_40C526
.text:0040C54D                 mov     byte ptr [ecx], 9
.text:0040C550
.text:0040C550 loc_40C550:                             ; CODE XREF: .text:0040C568↓j
.text:0040C550                 inc     ecx
.text:0040C551                 add     edx, 3
.text:0040C554                 jmp     loc_40C3EE
.text:0040C559 ; ---------------------------------------------------------------------------
.text:0040C559
.text:0040C559 loc_40C559:                             ; CODE XREF: .text:0040C516↑j
.text:0040C559                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C55D                 jnz     short loc_40C518
.text:0040C55F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C563                 jnz     short loc_40C518
.text:0040C565                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C568                 jmp     short loc_40C550
.text:0040C56A ; ---------------------------------------------------------------------------
.text:0040C56A
.text:0040C56A loc_40C56A:                             ; CODE XREF: .text:0040C3B1↑j
.text:0040C56A                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C572                 mov     [esp], eax
.text:0040C575                 call    strspn
.text:0040C57A                 add     [esp+1Ch], eax
.text:0040C57E                 jmp     loc_40C3B7
.text:0040C583 ; ---------------------------------------------------------------------------
.text:0040C583
.text:0040C583 loc_40C583:                             ; CODE XREF: .text:0040C395↑j
.text:0040C583                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C587                 jz      short loc_40C5CA
.text:0040C589
.text:0040C589 loc_40C589:                             ; CODE XREF: .text:0040C5CE↓j
.text:0040C589                                         ; .text:0040C5D4↓j
.text:0040C589                 cmp     al, 5Ch ; '\'
.text:0040C58B                 jnz     loc_40C39B
.text:0040C591                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C595                 jz      short loc_40C5B2
.text:0040C597
.text:0040C597 loc_40C597:                             ; CODE XREF: .text:0040C5B6↓j
.text:0040C597                                         ; .text:0040C5BC↓j
.text:0040C597                 cmp     al, 5Ch ; '\'
.text:0040C599                 jnz     loc_40C39B
.text:0040C59F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C5A3                 jnz     loc_40C39B
.text:0040C5A9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C5AC                 inc     edx
.text:0040C5AD                 jmp     loc_40C39D
.text:0040C5B2 ; ---------------------------------------------------------------------------
.text:0040C5B2
.text:0040C5B2 loc_40C5B2:                             ; CODE XREF: .text:0040C595↑j
.text:0040C5B2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C5B6                 jnz     short loc_40C597
.text:0040C5B8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C5BC                 jnz     short loc_40C597
.text:0040C5BE                 mov     byte ptr [ecx], 9
.text:0040C5C1
.text:0040C5C1 loc_40C5C1:                             ; CODE XREF: .text:0040C5D9↓j
.text:0040C5C1                 inc     ecx
.text:0040C5C2                 add     edx, 3
.text:0040C5C5                 jmp     loc_40C39E
.text:0040C5CA ; ---------------------------------------------------------------------------
.text:0040C5CA
.text:0040C5CA loc_40C5CA:                             ; CODE XREF: .text:0040C587↑j
.text:0040C5CA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C5CE                 jnz     short loc_40C589
.text:0040C5D0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C5D4                 jnz     short loc_40C589
.text:0040C5D6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C5D9                 jmp     short loc_40C5C1
.text:0040C5DB ; ---------------------------------------------------------------------------
.text:0040C5DB
.text:0040C5DB loc_40C5DB:                             ; CODE XREF: .text:0040C360↑j
.text:0040C5DB                 mov     dword ptr [esp+4], 40C21Ah
.text:0040C5E3                 mov     [esp], eax
.text:0040C5E6                 call    strspn
.text:0040C5EB                 add     [esp+1Ch], eax
.text:0040C5EF                 jmp     loc_40C366
.text:0040C5F4 ; ---------------------------------------------------------------------------
.text:0040C5F4
.text:0040C5F4 loc_40C5F4:                             ; CODE XREF: .text:0040C345↑j
.text:0040C5F4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C5F8                 jz      short loc_40C63B
.text:0040C5FA
.text:0040C5FA loc_40C5FA:                             ; CODE XREF: .text:0040C63F↓j
.text:0040C5FA                                         ; .text:0040C645↓j
.text:0040C5FA                 cmp     al, 5Ch ; '\'
.text:0040C5FC                 jnz     loc_40C34B
.text:0040C602                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040C606                 jz      short loc_40C623
.text:0040C608
.text:0040C608 loc_40C608:                             ; CODE XREF: .text:0040C627↓j
.text:0040C608                                         ; .text:0040C62D↓j
.text:0040C608                 cmp     al, 5Ch ; '\'
.text:0040C60A                 jnz     loc_40C34B
.text:0040C610                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040C614                 jnz     loc_40C34B
.text:0040C61A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040C61D                 inc     edx
.text:0040C61E                 jmp     loc_40C34D
.text:0040C623 ; ---------------------------------------------------------------------------
.text:0040C623
.text:0040C623 loc_40C623:                             ; CODE XREF: .text:0040C606↑j
.text:0040C623                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040C627                 jnz     short loc_40C608
.text:0040C629                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040C62D                 jnz     short loc_40C608
.text:0040C62F                 mov     byte ptr [ecx], 9
.text:0040C632
.text:0040C632 loc_40C632:                             ; CODE XREF: .text:0040C64A↓j
.text:0040C632                 inc     ecx
.text:0040C633                 add     edx, 3
.text:0040C636                 jmp     loc_40C34E
.text:0040C63B ; ---------------------------------------------------------------------------
.text:0040C63B
.text:0040C63B loc_40C63B:                             ; CODE XREF: .text:0040C5F8↑j
.text:0040C63B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040C63F                 jnz     short loc_40C5FA
.text:0040C641                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040C645                 jnz     short loc_40C5FA
.text:0040C647                 mov     byte ptr [ecx], 20h ; ' '
.text:0040C64A                 jmp     short loc_40C632
.text:0040C64A ; ---------------------------------------------------------------------------
.text:0040C64C                 align 10h
.text:0040C650
.text:0040C650 loc_40C650:                             ; CODE XREF: .text:0040C262↑j
.text:0040C650                 mov     dword ptr [esp+4], 0
.text:0040C658                 mov     dword ptr [esp], 0
.text:0040C65F                 call    GetLogicalDriveStringsA
.text:0040C664                 sub     esp, 8
.text:0040C667                 mov     ebx, eax
.text:0040C669                 call    GetProcessHeap
.text:0040C66E                 mov     [esp], eax
.text:0040C671                 mov     [esp+8], ebx
.text:0040C675                 mov     dword ptr [esp+4], 0
.text:0040C67D                 call    HeapAlloc
.text:0040C682                 sub     esp, 0Ch
.text:0040C685                 mov     esi, eax
.text:0040C687                 mov     [esp+4], eax
.text:0040C68B                 mov     [esp], ebx
.text:0040C68E                 call    GetLogicalDriveStringsA
.text:0040C693                 mov     off_411094, esi ; "notset"
.text:0040C699                 sub     esp, 8
.text:0040C69C                 jmp     loc_40C268
.text:0040C69C ; ---------------------------------------------------------------------------
.text:0040C6A1 ; const char aSSSSDD[]
.text:0040C6A1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040C6A1                                         ; DATA XREF: .text:0040C7E0↓o
.text:0040C6A1                                         ; ___addmntentstr+F0↓o
.text:0040C6B4                 align 10h
.text:0040C6C0                 push    esi
.text:0040C6C1                 push    ebx
.text:0040C6C2                 sub     esp, 44h
.text:0040C6C5                 mov     ebx, [esp+54h]
.text:0040C6C9                 mov     esi, [esp+50h]
.text:0040C6CD                 mov     edx, [ebx]
.text:0040C6CF                 mov     [esp+20h], edx
.text:0040C6D3                 mov     ecx, [ebx+4]
.text:0040C6D6                 mov     [esp+24h], ecx
.text:0040C6DA                 mov     edx, [ebx+8]
.text:0040C6DD                 mov     [esp+28h], edx
.text:0040C6E1                 mov     ecx, [ebx+0Ch]
.text:0040C6E4                 mov     [esp+2Ch], ecx
.text:0040C6E8                 mov     edx, [ebx+10h]
.text:0040C6EB                 mov     [esp+30h], edx
.text:0040C6EF                 mov     ecx, [ebx+14h]
.text:0040C6F2                 mov     dword ptr [esp+8], 2
.text:0040C6FA                 mov     dword ptr [esp+4], 0
.text:0040C702                 mov     [esp+34h], ecx
.text:0040C706                 mov     [esp], esi
.text:0040C709                 call    sub_40CF20
.text:0040C70E ; ---------------------------------------------------------------------------
.text:0040C70E                 test    eax, eax
.text:0040C710                 mov     edx, 1
.text:0040C715                 jnz     loc_40C815
.text:0040C71B                 mov     ebx, [esp+20h]
.text:0040C71F                 mov     edx, ebx
.text:0040C721                 movzx   eax, byte ptr [ebx]
.text:0040C724                 test    al, al
.text:0040C726                 jz      short loc_40C750
.text:0040C728                 nop
.text:0040C729                 lea     esi, [esi+0]
.text:0040C730
.text:0040C730 loc_40C730:                             ; CODE XREF: .text:0040C74E↓j
.text:0040C730                 cmp     al, 20h ; ' '
.text:0040C732                 jz      loc_40C98A
.text:0040C738                 cmp     al, 9
.text:0040C73A                 jz      loc_40C98A
.text:0040C740                 cmp     al, 5Ch ; '\'
.text:0040C742                 jz      loc_40C98A
.text:0040C748                 inc     ebx
.text:0040C749                 movzx   eax, byte ptr [ebx]
.text:0040C74C                 test    al, al
.text:0040C74E                 jnz     short loc_40C730
.text:0040C750
.text:0040C750 loc_40C750:                             ; CODE XREF: .text:0040C726↑j
.text:0040C750                                         ; .text:0040C98C↓j ...
.text:0040C750                 mov     ebx, [esp+24h]
.text:0040C754                 mov     edx, ebx
.text:0040C756                 movzx   eax, byte ptr [ebx]
.text:0040C759                 test    al, al
.text:0040C75B                 jz      short loc_40C780
.text:0040C75D                 lea     esi, [esi+0]
.text:0040C760
.text:0040C760 loc_40C760:                             ; CODE XREF: .text:0040C77E↓j
.text:0040C760                 cmp     al, 20h ; ' '
.text:0040C762                 jz      loc_40C90A
.text:0040C768                 cmp     al, 9
.text:0040C76A                 jz      loc_40C90A
.text:0040C770                 cmp     al, 5Ch ; '\'
.text:0040C772                 jz      loc_40C90A
.text:0040C778                 inc     ebx
.text:0040C779                 movzx   eax, byte ptr [ebx]
.text:0040C77C                 test    al, al
.text:0040C77E                 jnz     short loc_40C760
.text:0040C780
.text:0040C780 loc_40C780:                             ; CODE XREF: .text:0040C75B↑j
.text:0040C780                                         ; .text:0040C90C↓j ...
.text:0040C780                 mov     ebx, [esp+28h]
.text:0040C784                 mov     edx, ebx
.text:0040C786                 movzx   eax, byte ptr [ebx]
.text:0040C789                 test    al, al
.text:0040C78B                 jz      short loc_40C7B0
.text:0040C78D                 lea     esi, [esi+0]
.text:0040C790
.text:0040C790 loc_40C790:                             ; CODE XREF: .text:0040C7AE↓j
.text:0040C790                 cmp     al, 20h ; ' '
.text:0040C792                 jz      loc_40C88E
.text:0040C798                 cmp     al, 9
.text:0040C79A                 jz      loc_40C88E
.text:0040C7A0                 cmp     al, 5Ch ; '\'
.text:0040C7A2                 jz      loc_40C88E
.text:0040C7A8                 inc     ebx
.text:0040C7A9                 movzx   eax, byte ptr [ebx]
.text:0040C7AC                 test    al, al
.text:0040C7AE                 jnz     short loc_40C790
.text:0040C7B0
.text:0040C7B0 loc_40C7B0:                             ; CODE XREF: .text:0040C78B↑j
.text:0040C7B0                                         ; .text:0040C890↓j ...
.text:0040C7B0                 mov     edx, [esp+2Ch]
.text:0040C7B4                 mov     ebx, edx
.text:0040C7B6                 movzx   eax, byte ptr [edx]
.text:0040C7B9                 test    al, al
.text:0040C7BB                 jz      short loc_40C7D4
.text:0040C7BD                 lea     esi, [esi+0]
.text:0040C7C0
.text:0040C7C0 loc_40C7C0:                             ; CODE XREF: .text:0040C7D2↓j
.text:0040C7C0                 cmp     al, 20h ; ' '
.text:0040C7C2                 jz      short loc_40C81D
.text:0040C7C4                 cmp     al, 9
.text:0040C7C6                 jz      short loc_40C81D
.text:0040C7C8                 cmp     al, 5Ch ; '\'
.text:0040C7CA                 jz      short loc_40C81D
.text:0040C7CC                 inc     ebx
.text:0040C7CD                 movzx   eax, byte ptr [ebx]
.text:0040C7D0                 test    al, al
.text:0040C7D2                 jnz     short loc_40C7C0
.text:0040C7D4
.text:0040C7D4 loc_40C7D4:                             ; CODE XREF: .text:0040C7BB↑j
.text:0040C7D4                                         ; .text:0040C81F↓j ...
.text:0040C7D4                 mov     [esp+14h], edx
.text:0040C7D8                 mov     ecx, [esp+34h]
.text:0040C7DC                 mov     ebx, [esp+30h]
.text:0040C7E0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040C7E8                 mov     edx, [esp+24h]
.text:0040C7EC                 mov     [esp+1Ch], ecx
.text:0040C7F0                 mov     ecx, [esp+28h]
.text:0040C7F4                 mov     [esp+18h], ebx
.text:0040C7F8                 mov     ebx, [esp+20h]
.text:0040C7FC                 mov     [esp+0Ch], edx
.text:0040C800                 mov     [esp+10h], ecx
.text:0040C804                 mov     [esp+8], ebx
.text:0040C808                 mov     [esp], esi
.text:0040C80B                 call    fprintf
.text:0040C810                 mov     edx, eax
.text:0040C812                 shr     edx, 1Fh
.text:0040C815
.text:0040C815 loc_40C815:                             ; CODE XREF: .text:0040C715↑j
.text:0040C815                 add     esp, 44h
.text:0040C818                 mov     eax, edx
.text:0040C81A                 pop     ebx
.text:0040C81B                 pop     esi
.text:0040C81C                 retn
.text:0040C81D ; ---------------------------------------------------------------------------
.text:0040C81D
.text:0040C81D loc_40C81D:                             ; CODE XREF: .text:0040C7C2↑j
.text:0040C81D                                         ; .text:0040C7C6↑j ...
.text:0040C81D                 test    al, al
.text:0040C81F                 jz      short loc_40C7D4
.text:0040C821                 mov     [esp], edx
.text:0040C824                 mov     ebx, edx
.text:0040C826                 call    strlen
.text:0040C82B                 lea     edx, ds:1[eax*4]
.text:0040C832                 mov     [esp], edx
.text:0040C835                 call    malloc
.text:0040C83A                 mov     [esp+2Ch], eax
.text:0040C83E                 mov     edx, eax
.text:0040C840
.text:0040C840 loc_40C840:                             ; CODE XREF: .text:0040C858↓j
.text:0040C840                 movzx   eax, byte ptr [ebx]
.text:0040C843                 cmp     al, 20h ; ' '
.text:0040C845                 jz      short loc_40C87D
.text:0040C847                 cmp     al, 9
.text:0040C849                 jz      short loc_40C86C
.text:0040C84B                 cmp     al, 5Ch ; '\'
.text:0040C84D                 jz      short loc_40C863
.text:0040C84F                 mov     [edx], al
.text:0040C851
.text:0040C851 loc_40C851:                             ; CODE XREF: .text:0040C86A↓j
.text:0040C851                                         ; .text:0040C87B↓j ...
.text:0040C851                 movzx   ecx, byte ptr [ebx]
.text:0040C854                 inc     edx
.text:0040C855                 inc     ebx
.text:0040C856                 test    cl, cl
.text:0040C858                 jnz     short loc_40C840
.text:0040C85A                 mov     edx, [esp+2Ch]
.text:0040C85E                 jmp     loc_40C7D4
.text:0040C863 ; ---------------------------------------------------------------------------
.text:0040C863
.text:0040C863 loc_40C863:                             ; CODE XREF: .text:0040C84D↑j
.text:0040C863                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C866                 inc     edx
.text:0040C867                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C86A                 jmp     short loc_40C851
.text:0040C86C ; ---------------------------------------------------------------------------
.text:0040C86C
.text:0040C86C loc_40C86C:                             ; CODE XREF: .text:0040C849↑j
.text:0040C86C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C86F                 inc     edx
.text:0040C870                 mov     byte ptr [edx], 30h ; '0'
.text:0040C873                 inc     edx
.text:0040C874                 mov     byte ptr [edx], 31h ; '1'
.text:0040C877                 inc     edx
.text:0040C878                 mov     byte ptr [edx], 32h ; '2'
.text:0040C87B                 jmp     short loc_40C851
.text:0040C87D ; ---------------------------------------------------------------------------
.text:0040C87D
.text:0040C87D loc_40C87D:                             ; CODE XREF: .text:0040C845↑j
.text:0040C87D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C880                 inc     edx
.text:0040C881                 mov     byte ptr [edx], 30h ; '0'
.text:0040C884                 inc     edx
.text:0040C885                 mov     byte ptr [edx], 34h ; '4'
.text:0040C888                 inc     edx
.text:0040C889                 mov     byte ptr [edx], 30h ; '0'
.text:0040C88C                 jmp     short loc_40C851
.text:0040C88E ; ---------------------------------------------------------------------------
.text:0040C88E
.text:0040C88E loc_40C88E:                             ; CODE XREF: .text:0040C792↑j
.text:0040C88E                                         ; .text:0040C79A↑j ...
.text:0040C88E                 test    al, al
.text:0040C890                 jz      loc_40C7B0
.text:0040C896                 mov     [esp], edx
.text:0040C899                 mov     ebx, edx
.text:0040C89B                 call    strlen
.text:0040C8A0                 lea     edx, ds:1[eax*4]
.text:0040C8A7                 mov     [esp], edx
.text:0040C8AA                 call    malloc
.text:0040C8AF                 mov     [esp+28h], eax
.text:0040C8B3                 mov     edx, eax
.text:0040C8B5                 lea     esi, [esi+0]
.text:0040C8B9                 lea     edi, [edi+0]
.text:0040C8C0
.text:0040C8C0 loc_40C8C0:                             ; CODE XREF: .text:0040C8D8↓j
.text:0040C8C0                 movzx   eax, byte ptr [ebx]
.text:0040C8C3                 cmp     al, 20h ; ' '
.text:0040C8C5                 jz      short loc_40C8F9
.text:0040C8C7                 cmp     al, 9
.text:0040C8C9                 jz      short loc_40C8E8
.text:0040C8CB                 cmp     al, 5Ch ; '\'
.text:0040C8CD                 jz      short loc_40C8DF
.text:0040C8CF                 mov     [edx], al
.text:0040C8D1
.text:0040C8D1 loc_40C8D1:                             ; CODE XREF: .text:0040C8E6↓j
.text:0040C8D1                                         ; .text:0040C8F7↓j ...
.text:0040C8D1                 movzx   ecx, byte ptr [ebx]
.text:0040C8D4                 inc     edx
.text:0040C8D5                 inc     ebx
.text:0040C8D6                 test    cl, cl
.text:0040C8D8                 jnz     short loc_40C8C0
.text:0040C8DA                 jmp     loc_40C7B0
.text:0040C8DF ; ---------------------------------------------------------------------------
.text:0040C8DF
.text:0040C8DF loc_40C8DF:                             ; CODE XREF: .text:0040C8CD↑j
.text:0040C8DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C8E2                 inc     edx
.text:0040C8E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C8E6                 jmp     short loc_40C8D1
.text:0040C8E8 ; ---------------------------------------------------------------------------
.text:0040C8E8
.text:0040C8E8 loc_40C8E8:                             ; CODE XREF: .text:0040C8C9↑j
.text:0040C8E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C8EB                 inc     edx
.text:0040C8EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C8EF                 inc     edx
.text:0040C8F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C8F3                 inc     edx
.text:0040C8F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C8F7                 jmp     short loc_40C8D1
.text:0040C8F9 ; ---------------------------------------------------------------------------
.text:0040C8F9
.text:0040C8F9 loc_40C8F9:                             ; CODE XREF: .text:0040C8C5↑j
.text:0040C8F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C8FC                 inc     edx
.text:0040C8FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040C900                 inc     edx
.text:0040C901                 mov     byte ptr [edx], 34h ; '4'
.text:0040C904                 inc     edx
.text:0040C905                 mov     byte ptr [edx], 30h ; '0'
.text:0040C908                 jmp     short loc_40C8D1
.text:0040C90A ; ---------------------------------------------------------------------------
.text:0040C90A
.text:0040C90A loc_40C90A:                             ; CODE XREF: .text:0040C762↑j
.text:0040C90A                                         ; .text:0040C76A↑j ...
.text:0040C90A                 test    al, al
.text:0040C90C                 jz      loc_40C780
.text:0040C912                 mov     [esp], edx
.text:0040C915                 mov     ebx, edx
.text:0040C917                 call    strlen
.text:0040C91C                 lea     edx, ds:1[eax*4]
.text:0040C923                 mov     [esp], edx
.text:0040C926                 call    malloc
.text:0040C92B                 mov     [esp+24h], eax
.text:0040C92F                 mov     edx, eax
.text:0040C931                 jmp     short loc_40C940
.text:0040C931 ; ---------------------------------------------------------------------------
.text:0040C933                 align 10h
.text:0040C940
.text:0040C940 loc_40C940:                             ; CODE XREF: .text:0040C931↑j
.text:0040C940                                         ; .text:0040C958↓j
.text:0040C940                 movzx   eax, byte ptr [ebx]
.text:0040C943                 cmp     al, 20h ; ' '
.text:0040C945                 jz      short loc_40C979
.text:0040C947                 cmp     al, 9
.text:0040C949                 jz      short loc_40C968
.text:0040C94B                 cmp     al, 5Ch ; '\'
.text:0040C94D                 jz      short loc_40C95F
.text:0040C94F                 mov     [edx], al
.text:0040C951
.text:0040C951 loc_40C951:                             ; CODE XREF: .text:0040C966↓j
.text:0040C951                                         ; .text:0040C977↓j ...
.text:0040C951                 movzx   ecx, byte ptr [ebx]
.text:0040C954                 inc     edx
.text:0040C955                 inc     ebx
.text:0040C956                 test    cl, cl
.text:0040C958                 jnz     short loc_40C940
.text:0040C95A                 jmp     loc_40C780
.text:0040C95F ; ---------------------------------------------------------------------------
.text:0040C95F
.text:0040C95F loc_40C95F:                             ; CODE XREF: .text:0040C94D↑j
.text:0040C95F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C962                 inc     edx
.text:0040C963                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C966                 jmp     short loc_40C951
.text:0040C968 ; ---------------------------------------------------------------------------
.text:0040C968
.text:0040C968 loc_40C968:                             ; CODE XREF: .text:0040C949↑j
.text:0040C968                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C96B                 inc     edx
.text:0040C96C                 mov     byte ptr [edx], 30h ; '0'
.text:0040C96F                 inc     edx
.text:0040C970                 mov     byte ptr [edx], 31h ; '1'
.text:0040C973                 inc     edx
.text:0040C974                 mov     byte ptr [edx], 32h ; '2'
.text:0040C977                 jmp     short loc_40C951
.text:0040C979 ; ---------------------------------------------------------------------------
.text:0040C979
.text:0040C979 loc_40C979:                             ; CODE XREF: .text:0040C945↑j
.text:0040C979                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C97C                 inc     edx
.text:0040C97D                 mov     byte ptr [edx], 30h ; '0'
.text:0040C980                 inc     edx
.text:0040C981                 mov     byte ptr [edx], 34h ; '4'
.text:0040C984                 inc     edx
.text:0040C985                 mov     byte ptr [edx], 30h ; '0'
.text:0040C988                 jmp     short loc_40C951
.text:0040C98A ; ---------------------------------------------------------------------------
.text:0040C98A
.text:0040C98A loc_40C98A:                             ; CODE XREF: .text:0040C732↑j
.text:0040C98A                                         ; .text:0040C73A↑j ...
.text:0040C98A                 test    al, al
.text:0040C98C                 jz      loc_40C750
.text:0040C992                 mov     [esp], edx
.text:0040C995                 mov     ebx, edx
.text:0040C997                 call    strlen
.text:0040C99C                 lea     ecx, ds:1[eax*4]
.text:0040C9A3                 mov     [esp], ecx
.text:0040C9A6                 call    malloc
.text:0040C9AB                 mov     [esp+20h], eax
.text:0040C9AF                 mov     edx, eax
.text:0040C9B1                 jmp     short loc_40C9C0
.text:0040C9B1 ; ---------------------------------------------------------------------------
.text:0040C9B3                 align 10h
.text:0040C9C0
.text:0040C9C0 loc_40C9C0:                             ; CODE XREF: .text:0040C9B1↑j
.text:0040C9C0                                         ; .text:0040C9D8↓j
.text:0040C9C0                 movzx   eax, byte ptr [ebx]
.text:0040C9C3                 cmp     al, 20h ; ' '
.text:0040C9C5                 jz      short loc_40C9F9
.text:0040C9C7                 cmp     al, 9
.text:0040C9C9                 jz      short loc_40C9E8
.text:0040C9CB                 cmp     al, 5Ch ; '\'
.text:0040C9CD                 jz      short loc_40C9DF
.text:0040C9CF                 mov     [edx], al
.text:0040C9D1
.text:0040C9D1 loc_40C9D1:                             ; CODE XREF: .text:0040C9E6↓j
.text:0040C9D1                                         ; .text:0040C9F7↓j ...
.text:0040C9D1                 movzx   ecx, byte ptr [ebx]
.text:0040C9D4                 inc     edx
.text:0040C9D5                 inc     ebx
.text:0040C9D6                 test    cl, cl
.text:0040C9D8                 jnz     short loc_40C9C0
.text:0040C9DA                 jmp     loc_40C750
.text:0040C9DF ; ---------------------------------------------------------------------------
.text:0040C9DF
.text:0040C9DF loc_40C9DF:                             ; CODE XREF: .text:0040C9CD↑j
.text:0040C9DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9E2                 inc     edx
.text:0040C9E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9E6                 jmp     short loc_40C9D1
.text:0040C9E8 ; ---------------------------------------------------------------------------
.text:0040C9E8
.text:0040C9E8 loc_40C9E8:                             ; CODE XREF: .text:0040C9C9↑j
.text:0040C9E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9EB                 inc     edx
.text:0040C9EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040C9EF                 inc     edx
.text:0040C9F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040C9F3                 inc     edx
.text:0040C9F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040C9F7                 jmp     short loc_40C9D1
.text:0040C9F9 ; ---------------------------------------------------------------------------
.text:0040C9F9
.text:0040C9F9 loc_40C9F9:                             ; CODE XREF: .text:0040C9C5↑j
.text:0040C9F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040C9FC                 inc     edx
.text:0040C9FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040CA00                 inc     edx
.text:0040CA01                 mov     byte ptr [edx], 34h ; '4'
.text:0040CA04                 inc     edx
.text:0040CA05                 mov     byte ptr [edx], 30h ; '0'
.text:0040CA08                 jmp     short loc_40C9D1
.text:0040CA08 ; ---------------------------------------------------------------------------
.text:0040CA0A                 align 10h
.text:0040CA10
.text:0040CA10 ; =============== S U B R O U T I N E =======================================
.text:0040CA10
.text:0040CA10 ; Attributes: info_from_lumina
.text:0040CA10
.text:0040CA10 ; int __cdecl __addmntentstr(char *, int)
.text:0040CA10 ___addmntentstr proc near               ; CODE XREF: .text:0040C2DA↑p
.text:0040CA10
.text:0040CA10 Buffer          = dword ptr -4Ch
.text:0040CA10 Format          = dword ptr -48h
.text:0040CA10 var_44          = dword ptr -44h
.text:0040CA10 var_40          = dword ptr -40h
.text:0040CA10 var_3C          = dword ptr -3Ch
.text:0040CA10 var_38          = dword ptr -38h
.text:0040CA10 var_34          = dword ptr -34h
.text:0040CA10 var_30          = dword ptr -30h
.text:0040CA10 var_2C          = dword ptr -2Ch
.text:0040CA10 var_28          = dword ptr -28h
.text:0040CA10 var_24          = dword ptr -24h
.text:0040CA10 Str             = dword ptr -20h
.text:0040CA10 var_1C          = dword ptr -1Ch
.text:0040CA10 var_18          = dword ptr -18h
.text:0040CA10 arg_0           = dword ptr  4
.text:0040CA10 arg_4           = dword ptr  8
.text:0040CA10
.text:0040CA10                 push    ebx
.text:0040CA11                 sub     esp, 48h
.text:0040CA14                 mov     edx, [esp+4Ch+arg_4]
.text:0040CA18                 mov     ecx, [edx]
.text:0040CA1A                 mov     [esp+4Ch+var_2C], ecx
.text:0040CA1E                 mov     ebx, [edx+4]
.text:0040CA21                 mov     [esp+4Ch+var_28], ebx
.text:0040CA25                 mov     ebx, [edx+8]
.text:0040CA28                 mov     [esp+4Ch+var_24], ebx
.text:0040CA2C                 mov     ebx, [edx+0Ch]
.text:0040CA2F                 mov     [esp+4Ch+Str], ebx
.text:0040CA33                 mov     ebx, [edx+10h]
.text:0040CA36                 mov     [esp+4Ch+var_1C], ebx
.text:0040CA3A                 mov     ebx, [edx+14h]
.text:0040CA3D                 mov     [esp+4Ch+var_18], ebx
.text:0040CA41                 mov     ebx, ecx
.text:0040CA43                 movzx   eax, byte ptr [ecx]
.text:0040CA46                 test    al, al
.text:0040CA48                 jz      loc_40CD31
.text:0040CA4E                 mov     esi, esi
.text:0040CA50
.text:0040CA50 loc_40CA50:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040CA50                 cmp     al, 20h ; ' '
.text:0040CA52                 jz      loc_40CCB0
.text:0040CA58                 cmp     al, 9
.text:0040CA5A                 jz      loc_40CCB0
.text:0040CA60                 cmp     al, 5Ch ; '\'
.text:0040CA62                 jz      loc_40CCB0
.text:0040CA68                 inc     ebx
.text:0040CA69                 movzx   eax, byte ptr [ebx]
.text:0040CA6C                 test    al, al
.text:0040CA6E                 jnz     short loc_40CA50
.text:0040CA70
.text:0040CA70 loc_40CA70:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040CA70                                         ; ___addmntentstr+2EA↓j
.text:0040CA70                 mov     ebx, [esp+4Ch+var_28]
.text:0040CA74                 mov     edx, ebx
.text:0040CA76                 movzx   eax, byte ptr [ebx]
.text:0040CA79                 test    al, al
.text:0040CA7B                 jz      short loc_40CAA0
.text:0040CA7D                 lea     esi, [esi+0]
.text:0040CA80
.text:0040CA80 loc_40CA80:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040CA80                 cmp     al, 20h ; ' '
.text:0040CA82                 jz      loc_40CC2A
.text:0040CA88                 cmp     al, 9
.text:0040CA8A                 jz      loc_40CC2A
.text:0040CA90                 cmp     al, 5Ch ; '\'
.text:0040CA92                 jz      loc_40CC2A
.text:0040CA98                 inc     ebx
.text:0040CA99                 movzx   eax, byte ptr [ebx]
.text:0040CA9C                 test    al, al
.text:0040CA9E                 jnz     short loc_40CA80
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040CAA0                                         ; ___addmntentstr+21C↓j ...
.text:0040CAA0                 mov     ebx, [esp+4Ch+var_24]
.text:0040CAA4                 mov     edx, ebx
.text:0040CAA6                 movzx   eax, byte ptr [ebx]
.text:0040CAA9                 test    al, al
.text:0040CAAB                 jz      short loc_40CAD0
.text:0040CAAD                 lea     esi, [esi+0]
.text:0040CAB0
.text:0040CAB0 loc_40CAB0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040CAB0                 cmp     al, 20h ; ' '
.text:0040CAB2                 jz      loc_40CBAE
.text:0040CAB8                 cmp     al, 9
.text:0040CABA                 jz      loc_40CBAE
.text:0040CAC0                 cmp     al, 5Ch ; '\'
.text:0040CAC2                 jz      loc_40CBAE
.text:0040CAC8                 inc     ebx
.text:0040CAC9                 movzx   eax, byte ptr [ebx]
.text:0040CACC                 test    al, al
.text:0040CACE                 jnz     short loc_40CAB0
.text:0040CAD0
.text:0040CAD0 loc_40CAD0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040CAD0                                         ; ___addmntentstr+1A0↓j ...
.text:0040CAD0                 mov     edx, [esp+4Ch+Str]
.text:0040CAD4                 mov     ebx, edx
.text:0040CAD6                 movzx   eax, byte ptr [edx]
.text:0040CAD9                 test    al, al
.text:0040CADB                 jz      short loc_40CAF4
.text:0040CADD                 lea     esi, [esi+0]
.text:0040CAE0
.text:0040CAE0 loc_40CAE0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040CAE0                 cmp     al, 20h ; ' '
.text:0040CAE2                 jz      short loc_40CB3C
.text:0040CAE4                 cmp     al, 9
.text:0040CAE6                 jz      short loc_40CB3C
.text:0040CAE8                 cmp     al, 5Ch ; '\'
.text:0040CAEA                 jz      short loc_40CB3C
.text:0040CAEC                 inc     ebx
.text:0040CAED                 movzx   eax, byte ptr [ebx]
.text:0040CAF0                 test    al, al
.text:0040CAF2                 jnz     short loc_40CAE0
.text:0040CAF4
.text:0040CAF4 loc_40CAF4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040CAF4                                         ; ___addmntentstr+12E↓j ...
.text:0040CAF4                 mov     [esp+4Ch+var_38], edx
.text:0040CAF8                 mov     ebx, [esp+4Ch+var_18]
.text:0040CAFC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040CB00                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040CB08                 mov     edx, [esp+4Ch+var_2C]
.text:0040CB0C                 mov     [esp+4Ch+var_30], ebx
.text:0040CB10                 mov     ebx, [esp+4Ch+var_24]
.text:0040CB14                 mov     [esp+4Ch+var_34], ecx
.text:0040CB18                 mov     ecx, [esp+4Ch+var_28]
.text:0040CB1C                 mov     [esp+4Ch+var_3C], ebx
.text:0040CB20                 mov     ebx, [esp+4Ch+arg_0]
.text:0040CB24                 mov     [esp+4Ch+var_40], ecx
.text:0040CB28                 mov     [esp+4Ch+var_44], edx
.text:0040CB2C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040CB2F                 call    sprintf
.text:0040CB34                 add     esp, 48h
.text:0040CB37                 shr     eax, 1Fh
.text:0040CB3A                 pop     ebx
.text:0040CB3B                 retn
.text:0040CB3C ; ---------------------------------------------------------------------------
.text:0040CB3C
.text:0040CB3C loc_40CB3C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040CB3C                                         ; ___addmntentstr+D6↑j ...
.text:0040CB3C                 test    al, al
.text:0040CB3E                 jz      short loc_40CAF4
.text:0040CB40                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040CB43                 mov     ebx, edx
.text:0040CB45                 call    strlen
.text:0040CB4A                 lea     edx, ds:1[eax*4]
.text:0040CB51                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CB54                 call    malloc
.text:0040CB59                 mov     [esp+4Ch+Str], eax
.text:0040CB5D                 mov     edx, eax
.text:0040CB5F                 nop
.text:0040CB60
.text:0040CB60 loc_40CB60:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040CB60                 movzx   eax, byte ptr [ebx]
.text:0040CB63                 cmp     al, 20h ; ' '
.text:0040CB65                 jz      short loc_40CB9D
.text:0040CB67                 cmp     al, 9
.text:0040CB69                 jz      short loc_40CB8C
.text:0040CB6B                 cmp     al, 5Ch ; '\'
.text:0040CB6D                 jz      short loc_40CB83
.text:0040CB6F                 mov     [edx], al
.text:0040CB71
.text:0040CB71 loc_40CB71:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040CB71                                         ; ___addmntentstr+18B↓j ...
.text:0040CB71                 movzx   ecx, byte ptr [ebx]
.text:0040CB74                 inc     edx
.text:0040CB75                 inc     ebx
.text:0040CB76                 test    cl, cl
.text:0040CB78                 jnz     short loc_40CB60
.text:0040CB7A                 mov     edx, [esp+4Ch+Str]
.text:0040CB7E                 jmp     loc_40CAF4
.text:0040CB83 ; ---------------------------------------------------------------------------
.text:0040CB83
.text:0040CB83 loc_40CB83:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040CB83                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CB86                 inc     edx
.text:0040CB87                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CB8A                 jmp     short loc_40CB71
.text:0040CB8C ; ---------------------------------------------------------------------------
.text:0040CB8C
.text:0040CB8C loc_40CB8C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040CB8C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CB8F                 inc     edx
.text:0040CB90                 mov     byte ptr [edx], 30h ; '0'
.text:0040CB93                 inc     edx
.text:0040CB94                 mov     byte ptr [edx], 31h ; '1'
.text:0040CB97                 inc     edx
.text:0040CB98                 mov     byte ptr [edx], 32h ; '2'
.text:0040CB9B                 jmp     short loc_40CB71
.text:0040CB9D ; ---------------------------------------------------------------------------
.text:0040CB9D
.text:0040CB9D loc_40CB9D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040CB9D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CBA0                 inc     edx
.text:0040CBA1                 mov     byte ptr [edx], 30h ; '0'
.text:0040CBA4                 inc     edx
.text:0040CBA5                 mov     byte ptr [edx], 34h ; '4'
.text:0040CBA8                 inc     edx
.text:0040CBA9                 mov     byte ptr [edx], 30h ; '0'
.text:0040CBAC                 jmp     short loc_40CB71
.text:0040CBAE ; ---------------------------------------------------------------------------
.text:0040CBAE
.text:0040CBAE loc_40CBAE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040CBAE                                         ; ___addmntentstr+AA↑j ...
.text:0040CBAE                 test    al, al
.text:0040CBB0                 jz      loc_40CAD0
.text:0040CBB6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040CBB9                 mov     ebx, edx
.text:0040CBBB                 call    strlen
.text:0040CBC0                 lea     edx, ds:1[eax*4]
.text:0040CBC7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CBCA                 call    malloc
.text:0040CBCF                 mov     [esp+4Ch+var_24], eax
.text:0040CBD3                 mov     edx, eax
.text:0040CBD5                 lea     esi, [esi+0]
.text:0040CBD9                 lea     edi, [edi+0]
.text:0040CBE0
.text:0040CBE0 loc_40CBE0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040CBE0                 movzx   eax, byte ptr [ebx]
.text:0040CBE3                 cmp     al, 20h ; ' '
.text:0040CBE5                 jz      short loc_40CC19
.text:0040CBE7                 cmp     al, 9
.text:0040CBE9                 jz      short loc_40CC08
.text:0040CBEB                 cmp     al, 5Ch ; '\'
.text:0040CBED                 jz      short loc_40CBFF
.text:0040CBEF                 mov     [edx], al
.text:0040CBF1
.text:0040CBF1 loc_40CBF1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040CBF1                                         ; ___addmntentstr+207↓j ...
.text:0040CBF1                 movzx   ecx, byte ptr [ebx]
.text:0040CBF4                 inc     edx
.text:0040CBF5                 inc     ebx
.text:0040CBF6                 test    cl, cl
.text:0040CBF8                 jnz     short loc_40CBE0
.text:0040CBFA                 jmp     loc_40CAD0
.text:0040CBFF ; ---------------------------------------------------------------------------
.text:0040CBFF
.text:0040CBFF loc_40CBFF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040CBFF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC02                 inc     edx
.text:0040CC03                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC06                 jmp     short loc_40CBF1
.text:0040CC08 ; ---------------------------------------------------------------------------
.text:0040CC08
.text:0040CC08 loc_40CC08:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040CC08                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC0B                 inc     edx
.text:0040CC0C                 mov     byte ptr [edx], 30h ; '0'
.text:0040CC0F                 inc     edx
.text:0040CC10                 mov     byte ptr [edx], 31h ; '1'
.text:0040CC13                 inc     edx
.text:0040CC14                 mov     byte ptr [edx], 32h ; '2'
.text:0040CC17                 jmp     short loc_40CBF1
.text:0040CC19 ; ---------------------------------------------------------------------------
.text:0040CC19
.text:0040CC19 loc_40CC19:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040CC19                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC1C                 inc     edx
.text:0040CC1D                 mov     byte ptr [edx], 30h ; '0'
.text:0040CC20                 inc     edx
.text:0040CC21                 mov     byte ptr [edx], 34h ; '4'
.text:0040CC24                 inc     edx
.text:0040CC25                 mov     byte ptr [edx], 30h ; '0'
.text:0040CC28                 jmp     short loc_40CBF1
.text:0040CC2A ; ---------------------------------------------------------------------------
.text:0040CC2A
.text:0040CC2A loc_40CC2A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040CC2A                                         ; ___addmntentstr+7A↑j ...
.text:0040CC2A                 test    al, al
.text:0040CC2C                 jz      loc_40CAA0
.text:0040CC32                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040CC35                 mov     ebx, edx
.text:0040CC37                 call    strlen
.text:0040CC3C                 lea     edx, ds:1[eax*4]
.text:0040CC43                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CC46                 call    malloc
.text:0040CC4B                 mov     [esp+4Ch+var_28], eax
.text:0040CC4F                 mov     edx, eax
.text:0040CC51                 jmp     short loc_40CC60
.text:0040CC51 ; ---------------------------------------------------------------------------
.text:0040CC53                 align 10h
.text:0040CC60
.text:0040CC60 loc_40CC60:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040CC60                                         ; ___addmntentstr+268↓j
.text:0040CC60                 movzx   eax, byte ptr [ebx]
.text:0040CC63                 cmp     al, 20h ; ' '
.text:0040CC65                 jz      short loc_40CC99
.text:0040CC67                 cmp     al, 9
.text:0040CC69                 jz      short loc_40CC88
.text:0040CC6B                 cmp     al, 5Ch ; '\'
.text:0040CC6D                 jz      short loc_40CC7F
.text:0040CC6F                 mov     [edx], al
.text:0040CC71
.text:0040CC71 loc_40CC71:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040CC71                                         ; ___addmntentstr+287↓j ...
.text:0040CC71                 movzx   ecx, byte ptr [ebx]
.text:0040CC74                 inc     edx
.text:0040CC75                 inc     ebx
.text:0040CC76                 test    cl, cl
.text:0040CC78                 jnz     short loc_40CC60
.text:0040CC7A                 jmp     loc_40CAA0
.text:0040CC7F ; ---------------------------------------------------------------------------
.text:0040CC7F
.text:0040CC7F loc_40CC7F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040CC7F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC82                 inc     edx
.text:0040CC83                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC86                 jmp     short loc_40CC71
.text:0040CC88 ; ---------------------------------------------------------------------------
.text:0040CC88
.text:0040CC88 loc_40CC88:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040CC88                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC8B                 inc     edx
.text:0040CC8C                 mov     byte ptr [edx], 30h ; '0'
.text:0040CC8F                 inc     edx
.text:0040CC90                 mov     byte ptr [edx], 31h ; '1'
.text:0040CC93                 inc     edx
.text:0040CC94                 mov     byte ptr [edx], 32h ; '2'
.text:0040CC97                 jmp     short loc_40CC71
.text:0040CC99 ; ---------------------------------------------------------------------------
.text:0040CC99
.text:0040CC99 loc_40CC99:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040CC99                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CC9C                 inc     edx
.text:0040CC9D                 mov     byte ptr [edx], 30h ; '0'
.text:0040CCA0                 inc     edx
.text:0040CCA1                 mov     byte ptr [edx], 34h ; '4'
.text:0040CCA4                 inc     edx
.text:0040CCA5                 mov     byte ptr [edx], 30h ; '0'
.text:0040CCA8                 jmp     short loc_40CC71
.text:0040CCA8 ; ---------------------------------------------------------------------------
.text:0040CCAA                 align 10h
.text:0040CCB0
.text:0040CCB0 loc_40CCB0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040CCB0                                         ; ___addmntentstr+4A↑j ...
.text:0040CCB0                 test    al, al
.text:0040CCB2                 jz      loc_40CA70
.text:0040CCB8                 mov     ebx, [esp+4Ch+var_2C]
.text:0040CCBC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040CCBF                 call    strlen
.text:0040CCC4                 lea     edx, ds:1[eax*4]
.text:0040CCCB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040CCCE                 call    malloc
.text:0040CCD3                 mov     [esp+4Ch+var_2C], eax
.text:0040CCD7                 mov     edx, eax
.text:0040CCD9                 lea     esi, [esi+0]
.text:0040CCE0
.text:0040CCE0 loc_40CCE0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040CCE0                 movzx   eax, byte ptr [ebx]
.text:0040CCE3                 cmp     al, 20h ; ' '
.text:0040CCE5                 jz      short loc_40CD20
.text:0040CCE7                 cmp     al, 9
.text:0040CCE9                 jz      short loc_40CD08
.text:0040CCEB                 cmp     al, 5Ch ; '\'
.text:0040CCED                 jz      short loc_40CCFF
.text:0040CCEF                 mov     [edx], al
.text:0040CCF1
.text:0040CCF1 loc_40CCF1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040CCF1                                         ; ___addmntentstr+307↓j ...
.text:0040CCF1                 movzx   ecx, byte ptr [ebx]
.text:0040CCF4                 inc     edx
.text:0040CCF5                 inc     ebx
.text:0040CCF6                 test    cl, cl
.text:0040CCF8                 jnz     short loc_40CCE0
.text:0040CCFA                 jmp     loc_40CA70
.text:0040CCFF ; ---------------------------------------------------------------------------
.text:0040CCFF
.text:0040CCFF loc_40CCFF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040CCFF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD02                 inc     edx
.text:0040CD03                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD06                 jmp     short loc_40CCF1
.text:0040CD08 ; ---------------------------------------------------------------------------
.text:0040CD08
.text:0040CD08 loc_40CD08:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040CD08                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD0B                 inc     edx
.text:0040CD0C                 mov     byte ptr [edx], 30h ; '0'
.text:0040CD0F                 inc     edx
.text:0040CD10                 mov     byte ptr [edx], 31h ; '1'
.text:0040CD13                 inc     edx
.text:0040CD14                 mov     byte ptr [edx], 32h ; '2'
.text:0040CD17                 jmp     short loc_40CCF1
.text:0040CD17 ; ---------------------------------------------------------------------------
.text:0040CD19                 align 10h
.text:0040CD20
.text:0040CD20 loc_40CD20:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040CD20                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040CD23                 inc     edx
.text:0040CD24                 mov     byte ptr [edx], 30h ; '0'
.text:0040CD27                 inc     edx
.text:0040CD28                 mov     byte ptr [edx], 34h ; '4'
.text:0040CD2B                 inc     edx
.text:0040CD2C                 mov     byte ptr [edx], 30h ; '0'
.text:0040CD2F                 jmp     short loc_40CCF1
.text:0040CD31 ; ---------------------------------------------------------------------------
.text:0040CD31
.text:0040CD31 loc_40CD31:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040CD31                 movzx   eax, byte ptr [ecx]
.text:0040CD34                 jmp     loc_40CCB0
.text:0040CD34 ___addmntentstr endp
.text:0040CD34
.text:0040CD34 ; ---------------------------------------------------------------------------
.text:0040CD39                 align 10h
.text:0040CD40
.text:0040CD40 ; =============== S U B R O U T I N E =======================================
.text:0040CD40
.text:0040CD40
.text:0040CD40 sub_40CD40      proc near               ; CODE XREF: sub_40A550+99↑p
.text:0040CD40
.text:0040CD40 nBufferLength   = dword ptr -1Ch
.text:0040CD40 lpBuffer        = dword ptr -18h
.text:0040CD40 dwBytes         = dword ptr -14h
.text:0040CD40 var_8           = dword ptr -8
.text:0040CD40 var_4           = dword ptr -4
.text:0040CD40
.text:0040CD40                 sub     esp, 1Ch
.text:0040CD43                 mov     [esp+1Ch+var_8], ebx
.text:0040CD47                 mov     [esp+1Ch+var_4], esi
.text:0040CD4B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040CD53                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040CD5A                 call    GetLogicalDriveStringsA
.text:0040CD5F                 sub     esp, 8
.text:0040CD62                 mov     ebx, eax
.text:0040CD64                 call    GetProcessHeap
.text:0040CD69                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040CD6C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040CD70                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040CD78                 call    HeapAlloc
.text:0040CD7D                 sub     esp, 0Ch
.text:0040CD80                 mov     esi, eax
.text:0040CD82                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040CD85                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040CD89                 call    GetLogicalDriveStringsA
.text:0040CD8E                 sub     esp, 8
.text:0040CD91                 mov     eax, esi
.text:0040CD93                 mov     ebx, [esp+1Ch+var_8]
.text:0040CD97                 mov     esi, [esp+1Ch+var_4]
.text:0040CD9B                 add     esp, 1Ch
.text:0040CD9E                 retn
.text:0040CD9E sub_40CD40      endp
.text:0040CD9E
.text:0040CD9F
.text:0040CD9F ; =============== S U B R O U T I N E =======================================
.text:0040CD9F
.text:0040CD9F
.text:0040CD9F ; int __cdecl sub_40CD9F(char *, char *)
.text:0040CD9F sub_40CD9F      proc near               ; DATA XREF: sub_40CD9F:loc_40CE2D↓o
.text:0040CD9F
.text:0040CD9F FileName        = dword ptr -1Ch
.text:0040CD9F Mode            = dword ptr -18h
.text:0040CD9F dwBytes         = dword ptr -14h
.text:0040CD9F arg_0           = dword ptr  4
.text:0040CD9F arg_4           = dword ptr  8
.text:0040CD9F
.text:0040CD9F                 ja      short $+2
.text:0040CDA1
.text:0040CDA1 loc_40CDA1:                             ; CODE XREF: sub_40CD9F↑j
.text:0040CDA1                 jmp     short loc_40CDB0
.text:0040CDA1 ; ---------------------------------------------------------------------------
.text:0040CDA3                 align 10h
.text:0040CDB0
.text:0040CDB0 loc_40CDB0:                             ; CODE XREF: sub_40CD9F:loc_40CDA1↑j
.text:0040CDB0                 push    edi
.text:0040CDB1                 push    esi
.text:0040CDB2                 push    ebx
.text:0040CDB3                 sub     esp, 10h
.text:0040CDB6                 mov     ebx, [esp+1Ch+arg_0]
.text:0040CDBA                 mov     edx, [esp+1Ch+arg_4]
.text:0040CDBE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040CDC1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040CDC5                 call    fopen
.text:0040CDCA                 test    eax, eax
.text:0040CDCC                 mov     edi, eax
.text:0040CDCE                 jz      short loc_40CE2D
.text:0040CDD0
.text:0040CDD0 loc_40CDD0:                             ; CODE XREF: sub_40CD9F+A2↓j
.text:0040CDD0                                         ; sub_40CD9F+AB↓j
.text:0040CDD0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040CDD8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040CDDF                 call    GetLogicalDriveStringsA
.text:0040CDE4                 sub     esp, 8
.text:0040CDE7                 mov     esi, eax
.text:0040CDE9                 call    GetProcessHeap
.text:0040CDEE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040CDF1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040CDF5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040CDFD                 call    HeapAlloc
.text:0040CE02                 sub     esp, 0Ch
.text:0040CE05                 mov     ebx, eax
.text:0040CE07                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040CE0A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040CE0E                 call    GetLogicalDriveStringsA
.text:0040CE13                 mov     off_411094, ebx ; "notset"
.text:0040CE19                 sub     esp, 8
.text:0040CE1C                 xor     eax, eax
.text:0040CE1E                 test    ebx, ebx
.text:0040CE20                 setz    al
.text:0040CE23                 add     esp, 10h
.text:0040CE26                 pop     ebx
.text:0040CE27                 dec     eax
.text:0040CE28                 and     eax, edi
.text:0040CE2A                 pop     esi
.text:0040CE2B                 pop     edi
.text:0040CE2C                 retn
.text:0040CE2D ; ---------------------------------------------------------------------------
.text:0040CE2D
.text:0040CE2D loc_40CE2D:                             ; CODE XREF: sub_40CD9F+2F↑j
.text:0040CE2D                 mov     [esp+1Ch+Mode], offset sub_40CD9F ; Mode
.text:0040CE35                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040CE38                 call    fopen
.text:0040CE3D                 test    eax, eax
.text:0040CE3F                 mov     edi, eax
.text:0040CE41                 jnz     short loc_40CDD0
.text:0040CE43                 call    sub_40D030
.text:0040CE48                 mov     edi, eax
.text:0040CE4A                 jmp     short loc_40CDD0
.text:0040CE4A sub_40CD9F      endp
.text:0040CE4A
.text:0040CE4A ; ---------------------------------------------------------------------------
.text:0040CE4C                 align 10h
.text:0040CE50                 sub     esp, 0Ch
.text:0040CE53                 mov     eax, [esp+10h]
.text:0040CE57                 test    eax, eax
.text:0040CE59                 jz      short loc_40CE63
.text:0040CE5B                 mov     [esp], eax
.text:0040CE5E                 call    fclose
.text:0040CE63
.text:0040CE63 loc_40CE63:                             ; CODE XREF: .text:0040CE59↑j
.text:0040CE63                 call    GetProcessHeap
.text:0040CE68                 mov     [esp], eax
.text:0040CE6B                 mov     ecx, off_411094 ; "notset"
.text:0040CE71                 mov     dword ptr [esp+4], 0
.text:0040CE79                 mov     [esp+8], ecx
.text:0040CE7D                 call    HeapFree
.text:0040CE82                 mov     edx, off_411090 ; "notset"
.text:0040CE88                 sub     esp, 0Ch
.text:0040CE8B                 mov     eax, 1
.text:0040CE90                 mov     off_411094, edx ; "notset"
.text:0040CE96                 add     esp, 0Ch
.text:0040CE99                 retn
.text:0040CE99 ; ---------------------------------------------------------------------------
.text:0040CE9A                 align 10h
.text:0040CEA0                 push    edi
.text:0040CEA1                 push    esi
.text:0040CEA2                 push    ebx
.text:0040CEA3                 sub     esp, 10h
.text:0040CEA6                 mov     edi, [esp+24h]
.text:0040CEAA                 mov     [esp], edi
.text:0040CEAD                 call    strlen
.text:0040CEB2                 mov     edx, [esp+20h]
.text:0040CEB6                 mov     esi, eax
.text:0040CEB8                 mov     ebx, [edx+0Ch]
.text:0040CEBB                 nop
.text:0040CEBC                 lea     esi, [esi+0]
.text:0040CEC0
.text:0040CEC0 loc_40CEC0:                             ; CODE XREF: .text:0040CEF1↓j
.text:0040CEC0                 mov     [esp+4], edi
.text:0040CEC4                 mov     [esp], ebx
.text:0040CEC7                 call    strstr
.text:0040CECC                 test    eax, eax
.text:0040CECE                 jz      short loc_40CEF3
.text:0040CED0                 cmp     eax, ebx
.text:0040CED2                 jz      short loc_40CEF5
.text:0040CED4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040CED8                 jz      short loc_40CF00
.text:0040CEDA
.text:0040CEDA loc_40CEDA:                             ; CODE XREF: .text:0040CF10↓j
.text:0040CEDA                 mov     [esp], ebx
.text:0040CEDD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040CEE5                 call    strchr
.text:0040CEEA                 test    eax, eax
.text:0040CEEC                 mov     ebx, eax
.text:0040CEEE                 jz      short loc_40CEF3
.text:0040CEF0                 inc     ebx
.text:0040CEF1                 jmp     short loc_40CEC0
.text:0040CEF3 ; ---------------------------------------------------------------------------
.text:0040CEF3
.text:0040CEF3 loc_40CEF3:                             ; CODE XREF: .text:0040CECE↑j
.text:0040CEF3                                         ; .text:0040CEEE↑j
.text:0040CEF3                 xor     eax, eax
.text:0040CEF5
.text:0040CEF5 loc_40CEF5:                             ; CODE XREF: .text:0040CED2↑j
.text:0040CEF5                                         ; .text:0040CF06↓j ...
.text:0040CEF5                 add     esp, 10h
.text:0040CEF8                 pop     ebx
.text:0040CEF9                 pop     esi
.text:0040CEFA                 pop     edi
.text:0040CEFB                 retn
.text:0040CEFB ; ---------------------------------------------------------------------------
.text:0040CEFC                 align 10h
.text:0040CF00
.text:0040CF00 loc_40CF00:                             ; CODE XREF: .text:0040CED8↑j
.text:0040CF00                 movzx   edx, byte ptr [esi+eax]
.text:0040CF04                 test    dl, dl
.text:0040CF06                 jz      short loc_40CEF5
.text:0040CF08                 cmp     dl, 3Dh ; '='
.text:0040CF0B                 jz      short loc_40CEF5
.text:0040CF0D                 cmp     dl, 2Ch ; ','
.text:0040CF10                 jnz     short loc_40CEDA
.text:0040CF12                 jmp     short loc_40CEF5
.text:0040CF12 ; ---------------------------------------------------------------------------
.text:0040CF14                 align 10h
.text:0040CF20
.text:0040CF20 ; =============== S U B R O U T I N E =======================================
.text:0040CF20
.text:0040CF20 ; Attributes: noreturn
.text:0040CF20
.text:0040CF20 sub_40CF20      proc near               ; CODE XREF: .text:0040C709↑p
.text:0040CF20                                         ; sub_40CF20↓j
.text:0040CF20                 jmp     short sub_40CF20
.text:0040CF20 sub_40CF20      endp
.text:0040CF20
.text:0040CF20 ; ---------------------------------------------------------------------------
.text:0040CF22                 align 10h
.text:0040CF30
.text:0040CF30 ; =============== S U B R O U T I N E =======================================
.text:0040CF30
.text:0040CF30
.text:0040CF30 sub_40CF30      proc near               ; CODE XREF: .text:0040C465↑p
.text:0040CF30
.text:0040CF30 FileHandle      = dword ptr -1Ch
.text:0040CF30 dwFileOffsetLow = dword ptr -18h
.text:0040CF30 dwFileOffsetHigh= dword ptr -14h
.text:0040CF30 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040CF30 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040CF30 var_8           = dword ptr -8
.text:0040CF30 var_4           = dword ptr -4
.text:0040CF30 arg_0           = dword ptr  4
.text:0040CF30
.text:0040CF30                 sub     esp, 1Ch
.text:0040CF33                 mov     edx, [esp+1Ch+arg_0]
.text:0040CF37                 mov     [esp+1Ch+var_4], esi
.text:0040CF3B                 mov     [esp+1Ch+var_8], ebx
.text:0040CF3F                 mov     ebx, [edx+10h]
.text:0040CF42                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CF45                 call    _get_osfhandle
.text:0040CF4A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040CF4D                 mov     esi, eax
.text:0040CF4F                 call    _filelengthi64
.text:0040CF54                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040CF58                 cdq
.text:0040CF59                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040CF5C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040CF60                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040CF68                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040CF70                 call    UnlockFile
.text:0040CF75                 sub     esp, 14h
.text:0040CF78                 mov     ebx, [esp+1Ch+var_8]
.text:0040CF7C                 mov     esi, [esp+1Ch+var_4]
.text:0040CF80                 add     esp, 1Ch
.text:0040CF83                 retn
.text:0040CF83 sub_40CF30      endp
.text:0040CF83
.text:0040CF83 ; ---------------------------------------------------------------------------
.text:0040CF84                 align 10h
.text:0040CF90
.text:0040CF90 ; =============== S U B R O U T I N E =======================================
.text:0040CF90
.text:0040CF90
.text:0040CF90 ; int __cdecl sub_40CF90(int, char *Control)
.text:0040CF90 sub_40CF90      proc near               ; CODE XREF: .text:0040C326↑p
.text:0040CF90                                         ; .text:0040C376↑p ...
.text:0040CF90
.text:0040CF90 Str             = dword ptr -1Ch
.text:0040CF90 Val             = dword ptr -18h
.text:0040CF90 var_8           = dword ptr -8
.text:0040CF90 var_4           = dword ptr -4
.text:0040CF90 arg_0           = dword ptr  4
.text:0040CF90 Control         = dword ptr  8
.text:0040CF90
.text:0040CF90                 sub     esp, 1Ch
.text:0040CF93                 xor     eax, eax
.text:0040CF95                 mov     edx, [esp+1Ch+Control]
.text:0040CF99                 mov     [esp+1Ch+var_4], esi
.text:0040CF9D                 mov     esi, [esp+1Ch+arg_0]
.text:0040CFA1                 mov     [esp+1Ch+var_8], ebx
.text:0040CFA5                 mov     ebx, [esi]
.text:0040CFA7                 test    ebx, ebx
.text:0040CFA9                 jz      short loc_40CFD8
.text:0040CFAB                 movzx   eax, byte ptr [edx]
.text:0040CFAE                 test    al, al
.text:0040CFB0                 jz      short loc_40CFD0
.text:0040CFB2                 cmp     byte ptr [edx+1], 0
.text:0040CFB6                 jnz     short loc_40D010
.text:0040CFB8                 movzx   ecx, byte ptr [ebx]
.text:0040CFBB                 mov     edx, ebx
.text:0040CFBD                 cmp     cl, al
.text:0040CFBF                 jz      short loc_40D002
.text:0040CFC1                 test    cl, cl
.text:0040CFC3                 jnz     short loc_40CFE4
.text:0040CFC5                 lea     esi, [esi+0]
.text:0040CFC9                 lea     edi, [edi+0]
.text:0040CFD0
.text:0040CFD0 loc_40CFD0:                             ; CODE XREF: sub_40CF90+20↑j
.text:0040CFD0                                         ; sub_40CF90+74↓j
.text:0040CFD0                 mov     dword ptr [esi], 0
.text:0040CFD6
.text:0040CFD6 loc_40CFD6:                             ; CODE XREF: sub_40CF90+7C↓j
.text:0040CFD6                 mov     eax, ebx
.text:0040CFD8
.text:0040CFD8 loc_40CFD8:                             ; CODE XREF: sub_40CF90+19↑j
.text:0040CFD8                 mov     ebx, [esp+1Ch+var_8]
.text:0040CFDC                 mov     esi, [esp+1Ch+var_4]
.text:0040CFE0                 add     esp, 1Ch
.text:0040CFE3                 retn
.text:0040CFE4 ; ---------------------------------------------------------------------------
.text:0040CFE4
.text:0040CFE4 loc_40CFE4:                             ; CODE XREF: sub_40CF90+33↑j
.text:0040CFE4                 movsx   edx, al
.text:0040CFE7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040CFEB                 lea     edx, [ebx+1]
.text:0040CFEE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040CFF1                 call    strchr
.text:0040CFF6                 lea     esi, [esi+0]
.text:0040CFF9                 lea     edi, [edi+0]
.text:0040D000
.text:0040D000 loc_40D000:                             ; CODE XREF: sub_40CF90+8C↓j
.text:0040D000                 mov     edx, eax
.text:0040D002
.text:0040D002 loc_40D002:                             ; CODE XREF: sub_40CF90+2F↑j
.text:0040D002                 test    edx, edx
.text:0040D004                 jz      short loc_40CFD0
.text:0040D006                 mov     byte ptr [edx], 0
.text:0040D009                 inc     edx
.text:0040D00A                 mov     [esi], edx
.text:0040D00C                 jmp     short loc_40CFD6
.text:0040D00C ; ---------------------------------------------------------------------------
.text:0040D00E                 align 10h
.text:0040D010
.text:0040D010 loc_40D010:                             ; CODE XREF: sub_40CF90+26↑j
.text:0040D010                 mov     [esp+1Ch+Val], edx ; Control
.text:0040D014                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040D017                 call    strpbrk
.text:0040D01C                 jmp     short loc_40D000
.text:0040D01C sub_40CF90      endp
.text:0040D01C
.text:0040D01C ; ---------------------------------------------------------------------------
.text:0040D01E                 align 10h
.text:0040D020 ; const char aTmpf[]
.text:0040D020 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40D030+20↓o
.text:0040D025 ; const char aWBd[]
.text:0040D025 aWBd            db 'w+bD',0             ; DATA XREF: sub_40D030+5E↓o
.text:0040D02A                 align 10h
.text:0040D030
.text:0040D030 ; =============== S U B R O U T I N E =======================================
.text:0040D030
.text:0040D030
.text:0040D030 sub_40D030      proc near               ; CODE XREF: sub_40CD9F+A4↑p
.text:0040D030
.text:0040D030 FileHandle      = dword ptr -13Ch
.text:0040D030 Format          = dword ptr -138h
.text:0040D030 var_134         = dword ptr -134h
.text:0040D030 var_130         = dword ptr -130h
.text:0040D030 var_12C         = dword ptr -12Ch
.text:0040D030 Buffer          = byte ptr -11Ch
.text:0040D030 var_8           = dword ptr -8
.text:0040D030 var_4           = dword ptr -4
.text:0040D030
.text:0040D030                 sub     esp, 13Ch
.text:0040D036                 mov     [esp+13Ch+var_8], ebx
.text:0040D03D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040D041                 mov     [esp+13Ch+var_4], esi
.text:0040D048                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040D050                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040D058                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040D060                 mov     [esp+13Ch+Format], 104h ; int
.text:0040D068                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040D06B                 call    sub_40D100
.text:0040D070                 xor     edx, edx
.text:0040D072                 test    eax, eax
.text:0040D074                 jnz     short loc_40D0A6
.text:0040D076                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040D079                 mov     [esp+13Ch+Format], 0 ; int
.text:0040D081                 call    sub_40D480
.text:0040D086                 xor     edx, edx
.text:0040D088                 mov     ebx, eax
.text:0040D08A                 test    eax, eax
.text:0040D08C                 js      short loc_40D0A6
.text:0040D08E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040D096                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040D099                 call    _fdopen
.text:0040D09E                 test    eax, eax
.text:0040D0A0                 mov     esi, eax
.text:0040D0A2                 jz      short loc_40D0BD
.text:0040D0A4
.text:0040D0A4 loc_40D0A4:                             ; CODE XREF: sub_40D030+95↓j
.text:0040D0A4                 mov     edx, esi
.text:0040D0A6
.text:0040D0A6 loc_40D0A6:                             ; CODE XREF: sub_40D030+44↑j
.text:0040D0A6                                         ; sub_40D030+5C↑j
.text:0040D0A6                 mov     ebx, [esp+13Ch+var_8]
.text:0040D0AD                 mov     eax, edx
.text:0040D0AF                 mov     esi, [esp+13Ch+var_4]
.text:0040D0B6                 add     esp, 13Ch
.text:0040D0BC                 retn
.text:0040D0BD ; ---------------------------------------------------------------------------
.text:0040D0BD
.text:0040D0BD loc_40D0BD:                             ; CODE XREF: sub_40D030+72↑j
.text:0040D0BD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040D0C0                 call    _close_0
.text:0040D0C5                 jmp     short loc_40D0A4
.text:0040D0C5 sub_40D030      endp
.text:0040D0C5
.text:0040D0C5 ; ---------------------------------------------------------------------------
.text:0040D0C7                 align 10h
.text:0040D0D0 aFile           db 'file',0             ; DATA XREF: sub_40D100:loc_40D12C↓o
.text:0040D0D5 ; const char aSSxxxxxx[]
.text:0040D0D5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40D100+9B↓o
.text:0040D0E5 ; const char aTemp[]
.text:0040D0E5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40D100:loc_40D1E2↓o
.text:0040D0E5                                         ; sub_40D100:loc_40D222↓o ...
.text:0040D0EA ; const char aTmp[]
.text:0040D0EA aTmp            db '/tmp',0             ; DATA XREF: sub_40D100+12F↓o
.text:0040D0EA                                         ; sub_40D100+141↓o ...
.text:0040D0EF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40D100:loc_40D2A0↓o
.text:0040D0F6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40D100:loc_40D330↓o
.text:0040D0FA                 align 10h
.text:0040D100
.text:0040D100 ; =============== S U B R O U T I N E =======================================
.text:0040D100
.text:0040D100
.text:0040D100 ; int __cdecl sub_40D100(char *Buffer, int, char *, char *, int)
.text:0040D100 sub_40D100      proc near               ; CODE XREF: sub_40D030+3B↑p
.text:0040D100
.text:0040D100 Str             = dword ptr -1BCh
.text:0040D100 Format          = dword ptr -1B8h
.text:0040D100 var_1B4         = dword ptr -1B4h
.text:0040D100 var_1B0         = dword ptr -1B0h
.text:0040D100 var_1AC         = dword ptr -1ACh
.text:0040D100 var_1A8         = dword ptr -1A8h
.text:0040D100 var_19C         = dword ptr -19Ch
.text:0040D100 var_13C         = dword ptr -13Ch
.text:0040D100 var_DC          = dword ptr -0DCh
.text:0040D100 var_7C          = dword ptr -7Ch
.text:0040D100 Buffer          = dword ptr  4
.text:0040D100 arg_4           = dword ptr  8
.text:0040D100 arg_8           = dword ptr  0Ch
.text:0040D100 arg_C           = dword ptr  10h
.text:0040D100 arg_10          = dword ptr  14h
.text:0040D100
.text:0040D100                 push    ebp
.text:0040D101                 push    edi
.text:0040D102                 push    esi
.text:0040D103                 push    ebx
.text:0040D104                 sub     esp, 1ACh
.text:0040D10A                 mov     eax, [esp+1BCh+arg_C]
.text:0040D111                 mov     esi, [esp+1BCh+arg_8]
.text:0040D118                 test    eax, eax
.text:0040D11A                 jz      short loc_40D12C
.text:0040D11C                 mov     edx, [esp+1BCh+arg_C]
.text:0040D123                 cmp     byte ptr [edx], 0
.text:0040D126                 jnz     loc_40D360
.text:0040D12C
.text:0040D12C loc_40D12C:                             ; CODE XREF: sub_40D100+1A↑j
.text:0040D12C                 mov     eax, offset aFile ; "file"
.text:0040D131                 mov     ebp, 4
.text:0040D136                 mov     [esp+1BCh+arg_C], eax
.text:0040D13D
.text:0040D13D loc_40D13D:                             ; CODE XREF: sub_40D100+274↓j
.text:0040D13D                                         ; sub_40D100+27F↓j
.text:0040D13D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040D144                 test    ebx, ebx
.text:0040D146                 jnz     loc_40D2A0
.text:0040D14C
.text:0040D14C loc_40D14C:                             ; CODE XREF: sub_40D100+21C↓j
.text:0040D14C                                         ; sub_40D100+224↓j ...
.text:0040D14C                 test    esi, esi
.text:0040D14E                 jz      loc_40D1E2
.text:0040D154
.text:0040D154 loc_40D154:                             ; CODE XREF: sub_40D100+176↓j
.text:0040D154                                         ; sub_40D100+19A↓j
.text:0040D154                 mov     [esp+1BCh+Str], esi ; Str
.text:0040D157                 call    strlen
.text:0040D15C                 test    eax, eax
.text:0040D15E                 mov     edx, eax
.text:0040D160                 jz      short loc_40D170
.text:0040D162                 movzx   eax, byte ptr [eax+esi-1]
.text:0040D167                 cmp     al, 2Fh ; '/'
.text:0040D169                 jz      short loc_40D1D0
.text:0040D16B                 cmp     al, 5Ch ; '\'
.text:0040D16D                 jz      short loc_40D1D0
.text:0040D16F                 nop
.text:0040D170
.text:0040D170 loc_40D170:                             ; CODE XREF: sub_40D100+60↑j
.text:0040D170                                         ; sub_40D100+D1↓j ...
.text:0040D170                 lea     edi, [ebp+edx+8]
.text:0040D174                 cmp     [esp+1BCh+arg_4], edi
.text:0040D17B                 jb      short loc_40D1B8
.text:0040D17D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040D181                 mov     ecx, [esp+1BCh+arg_C]
.text:0040D188                 mov     ebp, [esp+1BCh+Buffer]
.text:0040D18F                 mov     [esp+1BCh+var_1B0], esi
.text:0040D193                 mov     [esp+1BCh+var_1A8], ecx
.text:0040D197                 mov     [esp+1BCh+var_1B4], edx
.text:0040D19B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040D1A3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040D1A6                 call    sprintf
.text:0040D1AB                 xor     eax, eax
.text:0040D1AD
.text:0040D1AD loc_40D1AD:                             ; CODE XREF: sub_40D100+C8↓j
.text:0040D1AD                 add     esp, 1ACh
.text:0040D1B3                 pop     ebx
.text:0040D1B4                 pop     esi
.text:0040D1B5                 pop     edi
.text:0040D1B6                 pop     ebp
.text:0040D1B7                 retn
.text:0040D1B8 ; ---------------------------------------------------------------------------
.text:0040D1B8
.text:0040D1B8 loc_40D1B8:                             ; CODE XREF: sub_40D100+7B↑j
.text:0040D1B8                 call    _errno
.text:0040D1BD                 mov     dword ptr [eax], 16h
.text:0040D1C3
.text:0040D1C3 loc_40D1C3:                             ; CODE XREF: sub_40D100+187↓j
.text:0040D1C3                 mov     eax, 0FFFFFFFFh
.text:0040D1C8                 jmp     short loc_40D1AD
.text:0040D1C8 ; ---------------------------------------------------------------------------
.text:0040D1CA                 align 10h
.text:0040D1D0
.text:0040D1D0 loc_40D1D0:                             ; CODE XREF: sub_40D100+69↑j
.text:0040D1D0                                         ; sub_40D100+6D↑j ...
.text:0040D1D0                 dec     edx
.text:0040D1D1                 jz      short loc_40D170
.text:0040D1D3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040D1D8                 cmp     al, 2Fh ; '/'
.text:0040D1DA                 jz      short loc_40D1D0
.text:0040D1DC                 cmp     al, 5Ch ; '\'
.text:0040D1DE                 jz      short loc_40D1D0
.text:0040D1E0                 jmp     short loc_40D170
.text:0040D1E2 ; ---------------------------------------------------------------------------
.text:0040D1E2
.text:0040D1E2 loc_40D1E2:                             ; CODE XREF: sub_40D100+4E↑j
.text:0040D1E2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D1E9                 lea     esi, [esp+1BCh+var_13C]
.text:0040D1F0                 call    getenv
.text:0040D1F5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040D1F9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040D1FD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D204                 call    sub_40DA00
.text:0040D209                 test    eax, eax
.text:0040D20B                 jnz     short loc_40D222
.text:0040D20D                 mov     edi, [esp+1BCh+var_13C]
.text:0040D214                 and     edi, 0F000h
.text:0040D21A                 cmp     edi, 4000h
.text:0040D220                 jz      short loc_40D28C
.text:0040D222
.text:0040D222 loc_40D222:                             ; CODE XREF: sub_40D100+10B↑j
.text:0040D222                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D229                 call    getenv
.text:0040D22E                 cld
.text:0040D22F                 mov     edx, offset aTmp ; "/tmp"
.text:0040D234                 mov     esi, eax
.text:0040D236                 mov     ecx, 5
.text:0040D23B                 mov     edi, edx
.text:0040D23D                 repe cmpsb
.text:0040D23F                 jz      short loc_40D27C
.text:0040D241                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040D249                 lea     ecx, [esp+1BCh+var_19C]
.text:0040D24D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040D251                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D258                 call    sub_40DA00
.text:0040D25D                 test    eax, eax
.text:0040D25F                 jnz     short loc_40D27C
.text:0040D261                 mov     ebx, [esp+1BCh+var_19C]
.text:0040D265                 mov     esi, offset aTmp ; "/tmp"
.text:0040D26A                 and     ebx, 0F000h
.text:0040D270                 cmp     ebx, 4000h
.text:0040D276                 jz      loc_40D154
.text:0040D27C
.text:0040D27C loc_40D27C:                             ; CODE XREF: sub_40D100+13F↑j
.text:0040D27C                                         ; sub_40D100+15F↑j
.text:0040D27C                 call    _errno
.text:0040D281                 mov     dword ptr [eax], 2
.text:0040D287                 jmp     loc_40D1C3
.text:0040D28C ; ---------------------------------------------------------------------------
.text:0040D28C
.text:0040D28C loc_40D28C:                             ; CODE XREF: sub_40D100+120↑j
.text:0040D28C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D293                 call    getenv
.text:0040D298                 mov     esi, eax
.text:0040D29A                 jmp     loc_40D154
.text:0040D29A ; ---------------------------------------------------------------------------
.text:0040D29F                 align 10h
.text:0040D2A0
.text:0040D2A0 loc_40D2A0:                             ; CODE XREF: sub_40D100+46↑j
.text:0040D2A0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040D2A7                 call    sub_40D990
.text:0040D2AC                 test    eax, eax
.text:0040D2AE                 mov     ebx, eax
.text:0040D2B0                 jz      short loc_40D330
.text:0040D2B2
.text:0040D2B2 loc_40D2B2:                             ; CODE XREF: sub_40D100+240↓j
.text:0040D2B2                                         ; sub_40D100+256↓j
.text:0040D2B2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040D2B6                 lea     edi, [esp+1BCh+var_7C]
.text:0040D2BD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040D2C1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D2C8                 call    sub_40DA00
.text:0040D2CD                 test    eax, eax
.text:0040D2CF                 jnz     short loc_40D2E6
.text:0040D2D1                 mov     edx, [esp+1BCh+var_7C]
.text:0040D2D8                 and     edx, 0F000h
.text:0040D2DE                 cmp     edx, 4000h
.text:0040D2E4                 jz      short loc_40D329
.text:0040D2E6
.text:0040D2E6 loc_40D2E6:                             ; CODE XREF: sub_40D100+1CF↑j
.text:0040D2E6                                         ; sub_40D100+25C↓j
.text:0040D2E6                 test    esi, esi
.text:0040D2E8                 jz      short loc_40D322
.text:0040D2EA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040D2EE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040D2F5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040D2F9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040D300                 call    sub_40DA00
.text:0040D305                 test    eax, eax
.text:0040D307                 jnz     short loc_40D322
.text:0040D309                 mov     ebx, [esp+1BCh+var_DC]
.text:0040D310                 and     ebx, 0F000h
.text:0040D316                 cmp     ebx, 4000h
.text:0040D31C                 jz      loc_40D14C
.text:0040D322
.text:0040D322 loc_40D322:                             ; CODE XREF: sub_40D100+1E8↑j
.text:0040D322                                         ; sub_40D100+207↑j
.text:0040D322                 xor     esi, esi
.text:0040D324                 jmp     loc_40D14C
.text:0040D329 ; ---------------------------------------------------------------------------
.text:0040D329
.text:0040D329 loc_40D329:                             ; CODE XREF: sub_40D100+1E4↑j
.text:0040D329                 mov     esi, ebx
.text:0040D32B                 jmp     loc_40D14C
.text:0040D330 ; ---------------------------------------------------------------------------
.text:0040D330
.text:0040D330 loc_40D330:                             ; CODE XREF: sub_40D100+1B0↑j
.text:0040D330                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040D337                 call    sub_40D990
.text:0040D33C                 test    eax, eax
.text:0040D33E                 mov     ebx, eax
.text:0040D340                 jnz     loc_40D2B2
.text:0040D346                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040D34D                 call    sub_40D990
.text:0040D352                 test    eax, eax
.text:0040D354                 mov     ebx, eax
.text:0040D356                 jnz     loc_40D2B2
.text:0040D35C                 jmp     short loc_40D2E6
.text:0040D35C ; ---------------------------------------------------------------------------
.text:0040D35E                 align 10h
.text:0040D360
.text:0040D360 loc_40D360:                             ; CODE XREF: sub_40D100+26↑j
.text:0040D360                 mov     ecx, [esp+1BCh+arg_C]
.text:0040D367                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040D36A                 call    strlen
.text:0040D36F                 cmp     eax, 5
.text:0040D372                 mov     ebp, eax
.text:0040D374                 jbe     loc_40D13D
.text:0040D37A                 mov     ebp, 5
.text:0040D37F                 jmp     loc_40D13D
.text:0040D37F sub_40D100      endp
.text:0040D37F
.text:0040D37F ; ---------------------------------------------------------------------------
.text:0040D384                 align 10h
.text:0040D390 byte_40D390     db 61h                  ; DATA XREF: sub_40D480+DC↓r
.text:0040D390                                         ; sub_40D480+122↓r ...
.text:0040D391 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040D3CF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40D480+39↓o
.text:0040D3D6                 db 1Ah dup(90h)
.text:0040D3F0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040D3F0                                         ; DATA XREF: sub_40D480:loc_40D6F8↓o
.text:0040D40F                 align 10h
.text:0040D410 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040D410                                         ; DATA XREF: sub_40D480+405↓o
.text:0040D43B                 db 15h dup(90h)
.text:0040D450 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040D450                                         ; DATA XREF: sub_40D480+40D↓o
.text:0040D473                 align 10h
.text:0040D480
.text:0040D480 ; =============== S U B R O U T I N E =======================================
.text:0040D480
.text:0040D480
.text:0040D480 ; int __cdecl sub_40D480(char *FileName, int)
.text:0040D480 sub_40D480      proc near               ; CODE XREF: sub_40D030+51↑p
.text:0040D480
.text:0040D480 Str             = dword ptr -9Ch
.text:0040D480 OpenFlag        = dword ptr -98h
.text:0040D480 var_94          = dword ptr -94h
.text:0040D480 var_90          = dword ptr -90h
.text:0040D480 var_8C          = dword ptr -8Ch
.text:0040D480 var_88          = dword ptr -88h
.text:0040D480 var_84          = dword ptr -84h
.text:0040D480 var_80          = dword ptr -80h
.text:0040D480 var_7C          = dword ptr -7Ch
.text:0040D480 FileName        = dword ptr  4
.text:0040D480 arg_4           = dword ptr  8
.text:0040D480
.text:0040D480                 push    ebp
.text:0040D481                 push    edi
.text:0040D482                 push    esi
.text:0040D483                 push    ebx
.text:0040D484                 sub     esp, 8Ch
.text:0040D48A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040D492                 call    _errno
.text:0040D497                 mov     edx, [eax]
.text:0040D499                 mov     [esp+9Ch+var_8C], edx
.text:0040D49D                 mov     edx, [esp+9Ch+FileName]
.text:0040D4A4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040D4A7                 call    strlen
.text:0040D4AC                 cmp     eax, 5
.text:0040D4AF                 jle     short loc_40D4CD
.text:0040D4B1                 cld
.text:0040D4B2                 mov     ecx, [esp+9Ch+FileName]
.text:0040D4B9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040D4BE                 lea     esi, [eax+ecx-6]
.text:0040D4C2                 mov     ecx, 7
.text:0040D4C7                 mov     ebp, esi
.text:0040D4C9                 repe cmpsb
.text:0040D4CB                 jz      short loc_40D4E8
.text:0040D4CD
.text:0040D4CD loc_40D4CD:                             ; CODE XREF: sub_40D480+2F↑j
.text:0040D4CD                 call    _errno
.text:0040D4D2                 mov     dword ptr [eax], 16h
.text:0040D4D8
.text:0040D4D8 loc_40D4D8:                             ; CODE XREF: sub_40D480+295↓j
.text:0040D4D8                                         ; sub_40D480+2D8↓j ...
.text:0040D4D8                 mov     eax, 0FFFFFFFFh
.text:0040D4DD
.text:0040D4DD loc_40D4DD:                             ; CODE XREF: sub_40D480+2EF↓j
.text:0040D4DD                                         ; sub_40D480+332↓j
.text:0040D4DD                 add     esp, 8Ch
.text:0040D4E3                 pop     ebx
.text:0040D4E4                 pop     esi
.text:0040D4E5                 pop     edi
.text:0040D4E6                 pop     ebp
.text:0040D4E7                 retn
.text:0040D4E8 ; ---------------------------------------------------------------------------
.text:0040D4E8
.text:0040D4E8 loc_40D4E8:                             ; CODE XREF: sub_40D480+4B↑j
.text:0040D4E8                 mov     ecx, ds:dword_4124C4
.text:0040D4EE                 mov     edi, ds:dword_4124C0
.text:0040D4F4                 mov     eax, ecx
.text:0040D4F6                 or      eax, edi
.text:0040D4F8                 jz      loc_40D833
.text:0040D4FE
.text:0040D4FE loc_40D4FE:                             ; CODE XREF: sub_40D480+3F8↓j
.text:0040D4FE                 rdtsc
.text:0040D500                 mov     edi, edx
.text:0040D502                 mov     esi, eax
.text:0040D504                 call    _getpid
.text:0040D509                 mov     ebx, eax
.text:0040D50B                 mov     edx, esi
.text:0040D50D                 sar     ebx, 1Fh
.text:0040D510                 xor     edx, eax
.text:0040D512                 mov     ecx, edi
.text:0040D514                 xor     ecx, ebx
.text:0040D516                 mov     ebx, edx
.text:0040D518                 mov     esi, ecx
.text:0040D51A                 add     ebx, ds:dword_4124C0
.text:0040D520                 adc     esi, ds:dword_4124C4
.text:0040D526                 xor     edi, edi
.text:0040D528                 mov     ds:dword_4124C0, ebx
.text:0040D52E                 mov     ds:dword_4124C4, esi
.text:0040D534                 lea     esi, [esi+0]
.text:0040D53A                 lea     edi, [edi+0]
.text:0040D540
.text:0040D540 loc_40D540:                             ; CODE XREF: sub_40D480+2C7↓j
.text:0040D540                 mov     [esp+9Ch+Str], ebx
.text:0040D543                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D547                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D54F                 mov     [esp+9Ch+var_90], 0
.text:0040D557                 call    sub_40F900
.text:0040D55C                 movzx   ecx, ds:byte_40D390[eax]
.text:0040D563                 mov     [ebp+0], cl
.text:0040D566                 mov     [esp+9Ch+Str], ebx
.text:0040D569                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D56D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D575                 mov     [esp+9Ch+var_90], 0
.text:0040D57D                 call    sub_40F4C0
.text:0040D582                 mov     [esp+9Ch+Str], eax
.text:0040D585                 mov     ebx, eax
.text:0040D587                 mov     esi, edx
.text:0040D589                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D591                 mov     [esp+9Ch+var_90], 0
.text:0040D599                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D59D                 call    sub_40F900
.text:0040D5A2                 movzx   edx, ds:byte_40D390[eax]
.text:0040D5A9                 mov     [ebp+1], dl
.text:0040D5AC                 mov     [esp+9Ch+Str], ebx
.text:0040D5AF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D5B3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D5BB                 mov     [esp+9Ch+var_90], 0
.text:0040D5C3                 call    sub_40F4C0
.text:0040D5C8                 mov     [esp+9Ch+Str], eax
.text:0040D5CB                 mov     ebx, eax
.text:0040D5CD                 mov     esi, edx
.text:0040D5CF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D5D7                 mov     [esp+9Ch+var_90], 0
.text:0040D5DF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D5E3                 call    sub_40F900
.text:0040D5E8                 movzx   ecx, ds:byte_40D390[eax]
.text:0040D5EF                 mov     [ebp+2], cl
.text:0040D5F2                 mov     [esp+9Ch+Str], ebx
.text:0040D5F5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D5F9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D601                 mov     [esp+9Ch+var_90], 0
.text:0040D609                 call    sub_40F4C0
.text:0040D60E                 mov     [esp+9Ch+Str], eax
.text:0040D611                 mov     ebx, eax
.text:0040D613                 mov     esi, edx
.text:0040D615                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D61D                 mov     [esp+9Ch+var_90], 0
.text:0040D625                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D629                 call    sub_40F900
.text:0040D62E                 movzx   edx, ds:byte_40D390[eax]
.text:0040D635                 mov     [ebp+3], dl
.text:0040D638                 mov     [esp+9Ch+Str], ebx
.text:0040D63B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D63F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D647                 mov     [esp+9Ch+var_90], 0
.text:0040D64F                 call    sub_40F4C0
.text:0040D654                 mov     [esp+9Ch+Str], eax
.text:0040D657                 mov     ebx, eax
.text:0040D659                 mov     esi, edx
.text:0040D65B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D663                 mov     [esp+9Ch+var_90], 0
.text:0040D66B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D66F                 call    sub_40F900
.text:0040D674                 movzx   ecx, ds:byte_40D390[eax]
.text:0040D67B                 mov     [ebp+4], cl
.text:0040D67E                 mov     [esp+9Ch+Str], ebx
.text:0040D681                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D689                 mov     [esp+9Ch+var_90], 0
.text:0040D691                 mov     [esp+9Ch+OpenFlag], esi
.text:0040D695                 call    sub_40F4C0
.text:0040D69A                 mov     [esp+9Ch+Str], eax
.text:0040D69D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040D6A5                 mov     [esp+9Ch+var_90], 0
.text:0040D6AD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040D6B1                 call    sub_40F900
.text:0040D6B6                 movzx   ebx, ds:byte_40D390[eax]
.text:0040D6BD                 mov     [ebp+5], bl
.text:0040D6C0                 cmp     [esp+9Ch+arg_4], 1
.text:0040D6C8                 jz      loc_40D817
.text:0040D6CE                 cmp     [esp+9Ch+arg_4], 1
.text:0040D6D6                 jle     loc_40D7E0
.text:0040D6DC                 cmp     [esp+9Ch+arg_4], 2
.text:0040D6E4                 jz      loc_40D7B7
.text:0040D6EA                 cmp     [esp+9Ch+arg_4], 3
.text:0040D6F2                 jz      loc_40D774
.text:0040D6F8
.text:0040D6F8 loc_40D6F8:                             ; CODE XREF: sub_40D480+369↓j
.text:0040D6F8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040D6FD                 test    ebx, ebx
.text:0040D6FF                 jnz     loc_40D87D
.text:0040D705
.text:0040D705 loc_40D705:                             ; CODE XREF: sub_40D480+354↓j
.text:0040D705                 mov     eax, [esp+9Ch+var_88]
.text:0040D709                 test    eax, eax
.text:0040D70B                 jns     short loc_40D760
.text:0040D70D                 call    _errno
.text:0040D712                 cmp     dword ptr [eax], 11h
.text:0040D715                 jnz     loc_40D4D8
.text:0040D71B
.text:0040D71B loc_40D71B:                             ; CODE XREF: sub_40D480+315↓j
.text:0040D71B                 mov     edx, ds:dword_4124C0
.text:0040D721                 mov     ecx, ds:dword_4124C4
.text:0040D727                 add     edx, 1E61h
.text:0040D72D                 adc     ecx, 0
.text:0040D730                 mov     ebx, edx
.text:0040D732                 inc     edi
.text:0040D733                 mov     ds:dword_4124C0, edx
.text:0040D739                 cmp     edi, 3A2F8h
.text:0040D73F                 mov     esi, ecx
.text:0040D741                 mov     ds:dword_4124C4, ecx
.text:0040D747                 jb      loc_40D540
.text:0040D74D                 call    _errno
.text:0040D752                 mov     dword ptr [eax], 11h
.text:0040D758                 jmp     loc_40D4D8
.text:0040D758 ; ---------------------------------------------------------------------------
.text:0040D75D                 align 10h
.text:0040D760
.text:0040D760 loc_40D760:                             ; CODE XREF: sub_40D480+28B↑j
.text:0040D760                 call    _errno
.text:0040D765                 mov     esi, [esp+9Ch+var_8C]
.text:0040D769                 mov     [eax], esi
.text:0040D76B                 mov     eax, [esp+9Ch+var_88]
.text:0040D76F                 jmp     loc_40D4DD
.text:0040D774 ; ---------------------------------------------------------------------------
.text:0040D774
.text:0040D774 loc_40D774:                             ; CODE XREF: sub_40D480+272↑j
.text:0040D774                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040D77B                 mov     ecx, [esp+9Ch+FileName]
.text:0040D782                 lea     esi, [esp+9Ch+var_7C]
.text:0040D786                 mov     [esp+9Ch+var_94], esi ; int
.text:0040D78A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040D78E                 call    sub_40D9B0
.text:0040D793                 test    eax, eax
.text:0040D795                 jns     short loc_40D71B
.text:0040D797                 call    _errno
.text:0040D79C                 cmp     dword ptr [eax], 2
.text:0040D79F                 jnz     loc_40D4D8
.text:0040D7A5                 call    _errno
.text:0040D7AA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040D7AE                 mov     [eax], ebx
.text:0040D7B0                 xor     eax, eax
.text:0040D7B2                 jmp     loc_40D4DD
.text:0040D7B7 ; ---------------------------------------------------------------------------
.text:0040D7B7
.text:0040D7B7 loc_40D7B7:                             ; CODE XREF: sub_40D480+264↑j
.text:0040D7B7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040D7BF                 mov     edx, [esp+9Ch+FileName]
.text:0040D7C6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040D7C9                 call    sub_40D8B0
.text:0040D7CE                 mov     esi, esi
.text:0040D7D0
.text:0040D7D0 loc_40D7D0:                             ; CODE XREF: sub_40D480+395↓j
.text:0040D7D0                 mov     [esp+9Ch+var_88], eax
.text:0040D7D4                 jmp     loc_40D705
.text:0040D7D4 ; ---------------------------------------------------------------------------
.text:0040D7D9                 align 10h
.text:0040D7E0
.text:0040D7E0 loc_40D7E0:                             ; CODE XREF: sub_40D480+256↑j
.text:0040D7E0                 mov     eax, [esp+9Ch+arg_4]
.text:0040D7E7                 test    eax, eax
.text:0040D7E9                 jnz     loc_40D6F8
.text:0040D7EF                 mov     [esp+9Ch+var_94], 180h
.text:0040D7F7                 mov     esi, [esp+9Ch+FileName]
.text:0040D7FE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040D806                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040D809                 lea     esi, [esi+0]
.text:0040D810
.text:0040D810 loc_40D810:                             ; CODE XREF: sub_40D480+3B1↓j
.text:0040D810                 call    _open_0
.text:0040D815                 jmp     short loc_40D7D0
.text:0040D817 ; ---------------------------------------------------------------------------
.text:0040D817
.text:0040D817 loc_40D817:                             ; CODE XREF: sub_40D480+248↑j
.text:0040D817                 mov     [esp+9Ch+var_94], 180h
.text:0040D81F                 mov     ebx, [esp+9Ch+FileName]
.text:0040D826                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040D82E                 mov     [esp+9Ch+Str], ebx
.text:0040D831                 jmp     short loc_40D810
.text:0040D833 ; ---------------------------------------------------------------------------
.text:0040D833
.text:0040D833 loc_40D833:                             ; CODE XREF: sub_40D480+78↑j
.text:0040D833                 mov     [esp+9Ch+OpenFlag], 0
.text:0040D83B                 lea     ebx, [esp+9Ch+var_84]
.text:0040D83F                 mov     [esp+9Ch+Str], ebx
.text:0040D842                 call    sub_40D930
.text:0040D847                 mov     edi, [esp+9Ch+var_80]
.text:0040D84B                 mov     edx, [esp+9Ch+var_84]
.text:0040D84F                 mov     ecx, edi
.text:0040D851                 mov     ebx, edi
.text:0040D853                 shl     ecx, 10h
.text:0040D856                 sar     ebx, 1Fh
.text:0040D859                 shld    ebx, edi, 10h
.text:0040D85D                 mov     esi, edx
.text:0040D85F                 mov     edi, edx
.text:0040D861                 mov     edx, ecx
.text:0040D863                 sar     edi, 1Fh
.text:0040D866                 xor     edx, esi
.text:0040D868                 mov     ds:dword_4124C0, edx
.text:0040D86E                 mov     esi, ebx
.text:0040D870                 xor     esi, edi
.text:0040D872                 mov     ds:dword_4124C4, esi
.text:0040D878                 jmp     loc_40D4FE
.text:0040D87D ; ---------------------------------------------------------------------------
.text:0040D87D
.text:0040D87D loc_40D87D:                             ; CODE XREF: sub_40D480+27F↑j
.text:0040D87D                 mov     [esp+9Ch+var_94], 151h
.text:0040D885                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040D88D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040D894                 call    _assert
.text:0040D894 sub_40D480      endp
.text:0040D894
.text:0040D894 ; ---------------------------------------------------------------------------
.text:0040D899                 db 17h dup(90h)
.text:0040D8B0
.text:0040D8B0 ; =============== S U B R O U T I N E =======================================
.text:0040D8B0
.text:0040D8B0
.text:0040D8B0 ; int __cdecl sub_40D8B0(LPCSTR, int AccessMode)
.text:0040D8B0 sub_40D8B0      proc near               ; CODE XREF: sub_40D480+349↑p
.text:0040D8B0
.text:0040D8B0 lpPathName      = dword ptr -1Ch
.text:0040D8B0 lpSecurityAttributes= dword ptr -18h
.text:0040D8B0 var_8           = dword ptr -8
.text:0040D8B0 var_4           = dword ptr -4
.text:0040D8B0 arg_0           = dword ptr  4
.text:0040D8B0 AccessMode      = dword ptr  8
.text:0040D8B0
.text:0040D8B0                 sub     esp, 1Ch
.text:0040D8B3                 mov     [esp+1Ch+var_8], ebx
.text:0040D8B7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D8BB                 mov     [esp+1Ch+var_4], esi
.text:0040D8BF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040D8C3                 test    ebx, ebx
.text:0040D8C5                 jz      short loc_40D915
.text:0040D8C7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040D8CF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040D8D2                 call    CreateDirectoryA
.text:0040D8D7                 sub     esp, 8
.text:0040D8DA                 test    eax, eax
.text:0040D8DC                 jz      short loc_40D8F6
.text:0040D8DE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040D8E2                 mov     esi, [esp+1Ch+var_4]
.text:0040D8E6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040D8EA                 mov     ebx, [esp+1Ch+var_8]
.text:0040D8EE                 add     esp, 1Ch
.text:0040D8F1                 jmp     _chmod
.text:0040D8F6 ; ---------------------------------------------------------------------------
.text:0040D8F6
.text:0040D8F6 loc_40D8F6:                             ; CODE XREF: sub_40D8B0+2C↑j
.text:0040D8F6                 call    sub_40B480
.text:0040D8FB                 mov     esi, eax
.text:0040D8FD                 call    _errno
.text:0040D902                 mov     [eax], esi
.text:0040D904
.text:0040D904 loc_40D904:                             ; CODE XREF: sub_40D8B0+70↓j
.text:0040D904                 mov     ebx, [esp+1Ch+var_8]
.text:0040D908                 mov     eax, 0FFFFFFFFh
.text:0040D90D                 mov     esi, [esp+1Ch+var_4]
.text:0040D911                 add     esp, 1Ch
.text:0040D914                 retn
.text:0040D915 ; ---------------------------------------------------------------------------
.text:0040D915
.text:0040D915 loc_40D915:                             ; CODE XREF: sub_40D8B0+15↑j
.text:0040D915                 call    _errno
.text:0040D91A                 mov     dword ptr [eax], 16h
.text:0040D920                 jmp     short loc_40D904
.text:0040D920 sub_40D8B0      endp
.text:0040D920
.text:0040D920 ; ---------------------------------------------------------------------------
.text:0040D922                 align 10h
.text:0040D930
.text:0040D930 ; =============== S U B R O U T I N E =======================================
.text:0040D930
.text:0040D930
.text:0040D930 sub_40D930      proc near               ; CODE XREF: sub_40D480+3C2↑p
.text:0040D930
.text:0040D930 var_1C          = dword ptr -1Ch
.text:0040D930 var_18          = dword ptr -18h
.text:0040D930 var_C           = dword ptr -0Ch
.text:0040D930 var_8           = dword ptr -8
.text:0040D930 var_4           = dword ptr -4
.text:0040D930 arg_0           = dword ptr  4
.text:0040D930 arg_4           = dword ptr  8
.text:0040D930
.text:0040D930                 sub     esp, 1Ch
.text:0040D933                 mov     edx, [esp+1Ch+arg_4]
.text:0040D937                 mov     [esp+1Ch+var_4], ebx
.text:0040D93B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D93F                 mov     [esp+1Ch+var_18], edx
.text:0040D943                 lea     edx, [esp+1Ch+var_C]
.text:0040D947                 mov     [esp+1Ch+var_1C], edx
.text:0040D94A                 call    sub_40DAC0
.text:0040D94F                 test    eax, eax
.text:0040D951                 mov     edx, 0FFFFFFFFh
.text:0040D956                 jnz     short loc_40D97A
.text:0040D958                 mov     ecx, [esp+1Ch+var_C]
.text:0040D95C                 mov     edx, 10624DD3h
.text:0040D961                 mov     [ebx], ecx
.text:0040D963                 mov     ecx, [esp+1Ch+var_8]
.text:0040D967                 mov     eax, ecx
.text:0040D969                 imul    edx
.text:0040D96B                 mov     eax, ecx
.text:0040D96D                 sar     eax, 1Fh
.text:0040D970                 sar     edx, 6
.text:0040D973                 sub     edx, eax
.text:0040D975                 mov     [ebx+4], edx
.text:0040D978                 xor     edx, edx
.text:0040D97A
.text:0040D97A loc_40D97A:                             ; CODE XREF: sub_40D930+26↑j
.text:0040D97A                 mov     ebx, [esp+1Ch+var_4]
.text:0040D97E                 mov     eax, edx
.text:0040D980                 add     esp, 1Ch
.text:0040D983                 retn
.text:0040D983 sub_40D930      endp
.text:0040D983
.text:0040D983 ; ---------------------------------------------------------------------------
.text:0040D984                 align 10h
.text:0040D990
.text:0040D990 ; =============== S U B R O U T I N E =======================================
.text:0040D990
.text:0040D990
.text:0040D990 sub_40D990      proc near               ; CODE XREF: sub_40D100+1A7↑p
.text:0040D990                                         ; sub_40D100+237↑p ...
.text:0040D990                 mov     edx, ds:dword_4124D0
.text:0040D996                 test    edx, edx
.text:0040D998                 jnz     short loc_40D9A0
.text:0040D99A                 jmp     getenv
.text:0040D99A ; ---------------------------------------------------------------------------
.text:0040D99F                 align 10h
.text:0040D9A0
.text:0040D9A0 loc_40D9A0:                             ; CODE XREF: sub_40D990+8↑j
.text:0040D9A0                 xor     eax, eax
.text:0040D9A2                 retn
.text:0040D9A2 sub_40D990      endp
.text:0040D9A2
.text:0040D9A2 ; ---------------------------------------------------------------------------
.text:0040D9A3                 align 10h
.text:0040D9B0
.text:0040D9B0 ; =============== S U B R O U T I N E =======================================
.text:0040D9B0
.text:0040D9B0
.text:0040D9B0 ; int __cdecl sub_40D9B0(LPCSTR, int, int)
.text:0040D9B0 sub_40D9B0      proc near               ; CODE XREF: sub_40D480+30E↑p
.text:0040D9B0                                         ; sub_40DA00+42↓p ...
.text:0040D9B0
.text:0040D9B0 lpFileName      = dword ptr -2Ch
.text:0040D9B0 dwDesiredAccess = dword ptr -28h
.text:0040D9B0 dwShareMode     = dword ptr -24h
.text:0040D9B0 lpSecurityAttributes= dword ptr -20h
.text:0040D9B0 dwCreationDisposition= dword ptr -1Ch
.text:0040D9B0 dwFlagsAndAttributes= dword ptr -18h
.text:0040D9B0 hTemplateFile   = dword ptr -14h
.text:0040D9B0 var_10          = dword ptr -10h
.text:0040D9B0 var_C           = dword ptr -0Ch
.text:0040D9B0 var_8           = dword ptr -8
.text:0040D9B0 var_4           = dword ptr -4
.text:0040D9B0 arg_0           = dword ptr  4
.text:0040D9B0 arg_4           = dword ptr  8
.text:0040D9B0 arg_8           = dword ptr  0Ch
.text:0040D9B0
.text:0040D9B0 ; FUNCTION CHUNK AT .text:00409A70 SIZE 0000013A BYTES
.text:0040D9B0
.text:0040D9B0                 sub     esp, 0Ch
.text:0040D9B3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040D9B7                 mov     edx, [esp+0Ch+arg_4]
.text:0040D9BB                 mov     eax, [esp+0Ch+arg_8]
.text:0040D9BF                 test    ecx, ecx
.text:0040D9C1                 jnz     short loc_40D9E0
.text:0040D9C3                 test    edx, edx
.text:0040D9C5                 jz      short loc_40D9E0
.text:0040D9C7                 test    eax, eax
.text:0040D9C9                 jz      short loc_40D9E0
.text:0040D9CB                 mov     [esp+0Ch+arg_4], eax
.text:0040D9CF                 mov     [esp+0Ch+arg_0], edx
.text:0040D9D3                 add     esp, 0Ch
.text:0040D9D6                 jmp     loc_409A70
.text:0040D9D6 ; ---------------------------------------------------------------------------
.text:0040D9DB                 align 10h
.text:0040D9E0
.text:0040D9E0 loc_40D9E0:                             ; CODE XREF: sub_40D9B0+11↑j
.text:0040D9E0                                         ; sub_40D9B0+15↑j ...
.text:0040D9E0                 call    _errno
.text:0040D9E5                 mov     dword ptr [eax], 16h
.text:0040D9EB                 mov     eax, 0FFFFFFFFh
.text:0040D9F0                 add     esp, 0Ch
.text:0040D9F3                 retn
.text:0040D9F3 sub_40D9B0      endp
.text:0040D9F3
.text:0040D9F3 ; ---------------------------------------------------------------------------
.text:0040D9F4                 align 10h
.text:0040DA00
.text:0040DA00 ; =============== S U B R O U T I N E =======================================
.text:0040DA00
.text:0040DA00
.text:0040DA00 ; int __cdecl sub_40DA00(LPCSTR, char *, int)
.text:0040DA00 sub_40DA00      proc near               ; CODE XREF: sub_40D100+104↑p
.text:0040DA00                                         ; sub_40D100+158↑p ...
.text:0040DA00
.text:0040DA00 var_13C         = dword ptr -13Ch
.text:0040DA00 lpString1       = dword ptr -138h
.text:0040DA00 var_134         = dword ptr -134h
.text:0040DA00 String1         = byte ptr -12Ch
.text:0040DA00 var_10          = dword ptr -10h
.text:0040DA00 var_C           = dword ptr -0Ch
.text:0040DA00 var_8           = dword ptr -8
.text:0040DA00 var_4           = dword ptr -4
.text:0040DA00 arg_0           = dword ptr  4
.text:0040DA00 arg_4           = dword ptr  8
.text:0040DA00 arg_8           = dword ptr  0Ch
.text:0040DA00
.text:0040DA00                 sub     esp, 13Ch
.text:0040DA06                 mov     [esp+13Ch+var_10], ebx
.text:0040DA0D                 mov     ebx, [esp+13Ch+arg_8]
.text:0040DA14                 mov     [esp+13Ch+var_C], esi
.text:0040DA1B                 mov     esi, [esp+13Ch+arg_4]
.text:0040DA22                 mov     [esp+13Ch+var_8], edi
.text:0040DA29                 mov     edi, [esp+13Ch+arg_0]
.text:0040DA30                 mov     [esp+13Ch+var_4], ebp
.text:0040DA37                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040DA3B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040DA3F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040DA42                 call    sub_40D9B0
.text:0040DA47                 cmp     eax, 0FFFFFFFFh
.text:0040DA4A                 mov     edx, eax
.text:0040DA4C                 jz      short loc_40DA5E
.text:0040DA4E                 mov     ecx, [ebx]
.text:0040DA50                 and     ecx, 0F000h
.text:0040DA56                 cmp     ecx, 0A000h
.text:0040DA5C                 jz      short loc_40DA83
.text:0040DA5E
.text:0040DA5E loc_40DA5E:                             ; CODE XREF: sub_40DA00+4C↑j
.text:0040DA5E                                         ; sub_40DA00+A1↓j ...
.text:0040DA5E                 mov     ebx, [esp+13Ch+var_10]
.text:0040DA65                 mov     eax, edx
.text:0040DA67                 mov     esi, [esp+13Ch+var_C]
.text:0040DA6E                 mov     edi, [esp+13Ch+var_8]
.text:0040DA75                 mov     ebp, [esp+13Ch+var_4]
.text:0040DA7C                 add     esp, 13Ch
.text:0040DA82                 retn
.text:0040DA83 ; ---------------------------------------------------------------------------
.text:0040DA83
.text:0040DA83 loc_40DA83:                             ; CODE XREF: sub_40DA00+5C↑j
.text:0040DA83                 mov     [esp+13Ch+var_134], 104h
.text:0040DA8B                 lea     ebp, [esp+13Ch+String1]
.text:0040DA8F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040DA93                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040DA96                 call    sub_40DD80
.text:0040DA9B                 inc     eax
.text:0040DA9C                 mov     edx, 0FFFFFFFFh
.text:0040DAA1                 jz      short loc_40DA5E
.text:0040DAA3                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040DAA7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040DAAB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040DAAE                 call    sub_40D9B0
.text:0040DAB3                 mov     edx, eax
.text:0040DAB5                 jmp     short loc_40DA5E
.text:0040DAB5 sub_40DA00      endp
.text:0040DAB5
.text:0040DAB5 ; ---------------------------------------------------------------------------
.text:0040DAB7                 align 10h
.text:0040DAC0
.text:0040DAC0 ; =============== S U B R O U T I N E =======================================
.text:0040DAC0
.text:0040DAC0
.text:0040DAC0 sub_40DAC0      proc near               ; CODE XREF: sub_40D930+1A↑p
.text:0040DAC0
.text:0040DAC0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040DAC0 var_D8          = dword ptr -0D8h
.text:0040DAC0 var_D4          = dword ptr -0D4h
.text:0040DAC0 var_D0          = dword ptr -0D0h
.text:0040DAC0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040DAC0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040DAC0 arg_0           = dword ptr  4
.text:0040DAC0 arg_4           = dword ptr  8
.text:0040DAC0
.text:0040DAC0                 push    edi
.text:0040DAC1                 push    esi
.text:0040DAC2                 push    ebx
.text:0040DAC3                 sub     esp, 0D0h
.text:0040DAC9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040DAD0                 mov     edi, [esp+0DCh+arg_0]
.text:0040DAD7                 test    ebx, ebx
.text:0040DAD9                 jz      short loc_40DB04
.text:0040DADB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040DADF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040DAE2                 call    GetTimeZoneInformation
.text:0040DAE7                 sub     esp, 4
.text:0040DAEA                 cmp     eax, 0FFFFFFFFh
.text:0040DAED                 jz      loc_40DB85
.text:0040DAF3                 xor     ecx, ecx
.text:0040DAF5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040DAF9                 cmp     eax, 2
.text:0040DAFC                 setz    cl
.text:0040DAFF                 mov     [ebx], esi
.text:0040DB01                 mov     [ebx+4], ecx
.text:0040DB04
.text:0040DB04 loc_40DB04:                             ; CODE XREF: sub_40DAC0+19↑j
.text:0040DB04                                         ; sub_40DAC0+E0↓j
.text:0040DB04                 test    edi, edi
.text:0040DB06                 jz      short loc_40DB79
.text:0040DB08                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040DB0C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040DB0F                 call    GetSystemTimeAsFileTime
.text:0040DB14                 sub     esp, 4
.text:0040DB17                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040DB1B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040DB23                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040DB27                 mov     [esp+0DCh+var_D0], 0
.text:0040DB2F                 add     ebx, 2AC18000h
.text:0040DB35                 adc     esi, 0FE624E21h
.text:0040DB3B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040DB3F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040DB42                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040DB46                 mov     [esp+0DCh+var_D8], esi
.text:0040DB4A                 call    sub_40F4C0
.text:0040DB4F                 mov     [edi], eax
.text:0040DB51                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040DB54                 mov     [esp+0DCh+var_D4], 989680h
.text:0040DB5C                 mov     [esp+0DCh+var_D0], 0
.text:0040DB64                 mov     [esp+0DCh+var_D8], esi
.text:0040DB68                 call    sub_40F900
.text:0040DB6D                 lea     ebx, [eax+eax*4]
.text:0040DB70                 lea     edx, [ebx+ebx*4]
.text:0040DB73                 shl     edx, 2
.text:0040DB76                 mov     [edi+4], edx
.text:0040DB79
.text:0040DB79 loc_40DB79:                             ; CODE XREF: sub_40DAC0+46↑j
.text:0040DB79                 add     esp, 0D0h
.text:0040DB7F                 xor     eax, eax
.text:0040DB81                 pop     ebx
.text:0040DB82                 pop     esi
.text:0040DB83                 pop     edi
.text:0040DB84                 retn
.text:0040DB85 ; ---------------------------------------------------------------------------
.text:0040DB85
.text:0040DB85 loc_40DB85:                             ; CODE XREF: sub_40DAC0+2D↑j
.text:0040DB85                 mov     dword ptr [ebx], 0
.text:0040DB8B                 mov     dword ptr [ebx+4], 0
.text:0040DB92                 call    sub_40B480
.text:0040DB97                 mov     esi, eax
.text:0040DB99                 call    _errno
.text:0040DB9E                 mov     [eax], esi
.text:0040DBA0                 jmp     loc_40DB04
.text:0040DBA0 sub_40DAC0      endp
.text:0040DBA0
.text:0040DBA0 ; ---------------------------------------------------------------------------
.text:0040DBA5                 align 10h
.text:0040DBB0                 sub     esp, 0Ch
.text:0040DBB3                 mov     [esp+4], ebx
.text:0040DBB7                 mov     [esp+8], esi
.text:0040DBBB                 xor     esi, esi
.text:0040DBBD                 call    sub_40DE90
.text:0040DBC2                 mov     ebx, eax
.text:0040DBC4                 call    sub_40DE80
.text:0040DBC9                 cmp     ebx, eax
.text:0040DBCB                 jz      short loc_40DBE4
.text:0040DBCD
.text:0040DBCD loc_40DBCD:                             ; CODE XREF: .text:0040DBF2↓j
.text:0040DBCD                 mov     esi, 1
.text:0040DBD2
.text:0040DBD2 loc_40DBD2:                             ; CODE XREF: .text:0040DBF4↓j
.text:0040DBD2                 mov     ds:dword_4124D0, esi
.text:0040DBD8                 mov     ebx, [esp+4]
.text:0040DBDC                 mov     esi, [esp+8]
.text:0040DBE0                 add     esp, 0Ch
.text:0040DBE3                 retn
.text:0040DBE4 ; ---------------------------------------------------------------------------
.text:0040DBE4
.text:0040DBE4 loc_40DBE4:                             ; CODE XREF: .text:0040DBCB↑j
.text:0040DBE4                 call    sub_40DE70
.text:0040DBE9                 mov     ebx, eax
.text:0040DBEB                 call    sub_40DE60
.text:0040DBF0                 cmp     ebx, eax
.text:0040DBF2                 jnz     short loc_40DBCD
.text:0040DBF4                 jmp     short loc_40DBD2
.text:0040DBF4 ; ---------------------------------------------------------------------------
.text:0040DBF6                 align 10h
.text:0040DC00
.text:0040DC00 ; =============== S U B R O U T I N E =======================================
.text:0040DC00
.text:0040DC00
.text:0040DC00 ; int __cdecl sub_40DC00(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040DC00 sub_40DC00      proc near               ; CODE XREF: sub_40DD80+93↓p
.text:0040DC00
.text:0040DC00 pvReserved      = dword ptr -35Ch
.text:0040DC00 pUnkOuter       = dword ptr -358h
.text:0040DC00 dwClsContext    = dword ptr -354h
.text:0040DC00 riid            = dword ptr -350h
.text:0040DC00 ppv             = dword ptr -34Ch
.text:0040DC00 cchWideChar     = dword ptr -348h
.text:0040DC00 var_334         = byte ptr -334h
.text:0040DC00 var_330         = dword ptr -330h
.text:0040DC00 String2         = byte ptr -32Ch
.text:0040DC00 WideCharStr     = word ptr -21Ch
.text:0040DC00 lpMultiByteStr  = dword ptr  4
.text:0040DC00 lpString1       = dword ptr  8
.text:0040DC00
.text:0040DC00                 push    edi
.text:0040DC01                 push    esi
.text:0040DC02                 push    ebx
.text:0040DC03                 sub     esp, 350h
.text:0040DC09                 mov     edi, [esp+35Ch+lpString1]
.text:0040DC10                 mov     byte ptr [edi], 0
.text:0040DC13                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040DC1A                 call    OleInitialize
.text:0040DC1F                 sub     esp, 4
.text:0040DC22                 cmp     eax, 1
.text:0040DC25                 ja      loc_40DD5F
.text:0040DC2B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040DC33                 lea     ecx, [esp+35Ch+var_330]
.text:0040DC37                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040DC3B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040DC43                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040DC4B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040DC52                 call    CoCreateInstance
.text:0040DC57                 sub     esp, 14h
.text:0040DC5A                 test    eax, eax
.text:0040DC5C                 js      loc_40DD5F
.text:0040DC62                 mov     ebx, [esp+35Ch+var_330]
.text:0040DC66                 lea     edx, [esp+35Ch+var_334]
.text:0040DC6A                 mov     esi, [ebx]
.text:0040DC6C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040DC70                 mov     [esp+35Ch+pvReserved], ebx
.text:0040DC73                 xor     ebx, ebx
.text:0040DC75                 mov     [esp+35Ch+pUnkOuter], offset dword_40EC70
.text:0040DC7D                 call    dword ptr [esi]
.text:0040DC7F                 sub     esp, 0Ch
.text:0040DC82                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040DC89                 call    AreFileApisANSI
.text:0040DC8E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040DC96                 test    eax, eax
.text:0040DC98                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040DC9F                 setz    bl
.text:0040DCA2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040DCA6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040DCAE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040DCB2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040DCBA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040DCBD                 call    MultiByteToWideChar
.text:0040DCC2                 sub     esp, 18h
.text:0040DCC5                 test    eax, eax
.text:0040DCC7                 js      loc_40DD5F
.text:0040DCCD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040DCD1                 mov     ebx, [edx]
.text:0040DCD3                 mov     [esp+35Ch+dwClsContext], 0
.text:0040DCDB                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040DCDF                 mov     [esp+35Ch+pvReserved], edx
.text:0040DCE2                 call    dword ptr [ebx+14h]
.text:0040DCE5                 sub     esp, 0Ch
.text:0040DCE8                 test    eax, eax
.text:0040DCEA                 js      short loc_40DD5F
.text:0040DCEC                 mov     ebx, [esp+35Ch+var_330]
.text:0040DCF0                 lea     esi, [esp+35Ch+String2]
.text:0040DCF4                 mov     ecx, [ebx]
.text:0040DCF6                 mov     [esp+35Ch+pvReserved], ebx
.text:0040DCF9                 mov     [esp+35Ch+ppv], 0
.text:0040DD01                 mov     [esp+35Ch+riid], 0
.text:0040DD09                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040DD11                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040DD15                 call    dword ptr [ecx+0Ch]
.text:0040DD18                 sub     esp, 14h
.text:0040DD1B                 mov     ebx, eax
.text:0040DD1D                 test    eax, eax
.text:0040DD1F                 js      short loc_40DD5F
.text:0040DD21                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040DD25                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040DD28                 call    lstrcpyA
.text:0040DD2D                 sub     esp, 8
.text:0040DD30                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040DD34                 mov     ecx, [edi]
.text:0040DD36                 mov     [esp+35Ch+pvReserved], edi
.text:0040DD39                 call    dword ptr [ecx+8]
.text:0040DD3C                 sub     esp, 4
.text:0040DD3F                 mov     edx, [esp+35Ch+var_330]
.text:0040DD43                 mov     esi, [edx]
.text:0040DD45                 mov     [esp+35Ch+pvReserved], edx
.text:0040DD48                 call    dword ptr [esi+8]
.text:0040DD4B                 sub     esp, 4
.text:0040DD4E                 call    CoUninitialize
.text:0040DD53                 mov     eax, ebx
.text:0040DD55
.text:0040DD55 loc_40DD55:                             ; CODE XREF: sub_40DC00+177↓j
.text:0040DD55                 add     esp, 350h
.text:0040DD5B                 pop     ebx
.text:0040DD5C                 pop     esi
.text:0040DD5D                 pop     edi
.text:0040DD5E                 retn
.text:0040DD5F ; ---------------------------------------------------------------------------
.text:0040DD5F
.text:0040DD5F loc_40DD5F:                             ; CODE XREF: sub_40DC00+25↑j
.text:0040DD5F                                         ; sub_40DC00+5C↑j ...
.text:0040DD5F                 call    sub_40B480
.text:0040DD64                 mov     edi, eax
.text:0040DD66                 call    _errno
.text:0040DD6B                 mov     [eax], edi
.text:0040DD6D                 call    CoUninitialize
.text:0040DD72                 mov     eax, 0FFFFFFFFh
.text:0040DD77                 jmp     short loc_40DD55
.text:0040DD77 sub_40DC00      endp
.text:0040DD77
.text:0040DD77 ; ---------------------------------------------------------------------------
.text:0040DD79 ; const char Source[]
.text:0040DD79 Source          db '.lnk',0             ; DATA XREF: sub_40DD80+53↓o
.text:0040DD79                                         ; sub_40DD80:loc_40DDE5↓o
.text:0040DD7E                 align 10h
.text:0040DD80
.text:0040DD80 ; =============== S U B R O U T I N E =======================================
.text:0040DD80
.text:0040DD80
.text:0040DD80 ; int __cdecl sub_40DD80(char *, LPSTR lpString1)
.text:0040DD80 sub_40DD80      proc near               ; CODE XREF: sub_40DA00+96↑p
.text:0040DD80
.text:0040DD80 Str             = dword ptr -1Ch
.text:0040DD80 Source          = dword ptr -18h
.text:0040DD80 Destination     = dword ptr -14h
.text:0040DD80 arg_0           = dword ptr  4
.text:0040DD80 lpString1       = dword ptr  8
.text:0040DD80
.text:0040DD80                 push    ebp
.text:0040DD81                 push    edi
.text:0040DD82                 push    esi
.text:0040DD83                 push    ebx
.text:0040DD84                 sub     esp, 0Ch
.text:0040DD87                 mov     ebx, [esp+1Ch+arg_0]
.text:0040DD8B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040DD8F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040DD92                 call    strlen
.text:0040DD97                 add     eax, 5
.text:0040DD9A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040DD9D                 call    malloc
.text:0040DDA2                 mov     [esp+1Ch+Destination], eax
.text:0040DDA6                 test    eax, eax
.text:0040DDA8                 jz      loc_40DE50
.text:0040DDAE                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040DDB2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040DDB5                 call    strcpy
.text:0040DDBA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040DDC2                 mov     eax, [esp+1Ch+Destination]
.text:0040DDC6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040DDC9                 call    strrchr
.text:0040DDCE                 test    eax, eax
.text:0040DDD0                 jz      short loc_40DDE5
.text:0040DDD2                 cld
.text:0040DDD3                 mov     ebx, offset Source ; ".lnk"
.text:0040DDD8                 mov     ecx, 5
.text:0040DDDD                 mov     esi, eax
.text:0040DDDF                 mov     edi, ebx
.text:0040DDE1                 repe cmpsb
.text:0040DDE3                 jz      short loc_40DDF9
.text:0040DDE5
.text:0040DDE5 loc_40DDE5:                             ; CODE XREF: sub_40DD80+50↑j
.text:0040DDE5                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0040DDED                 mov     edx, [esp+1Ch+Destination]
.text:0040DDF1                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040DDF4                 call    strcat
.text:0040DDF9
.text:0040DDF9 loc_40DDF9:                             ; CODE XREF: sub_40DD80+63↑j
.text:0040DDF9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040DE00                 call    SetErrorMode
.text:0040DE05                 sub     esp, 4
.text:0040DE08                 mov     ebx, [esp+1Ch+Destination]
.text:0040DE0C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040DE10                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040DE13                 call    sub_40DC00
.text:0040DE18                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040DE1B                 mov     esi, eax
.text:0040DE1D                 call    free
.text:0040DE22                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040DE29                 call    SetErrorMode
.text:0040DE2E                 sub     esp, 4
.text:0040DE31                 mov     [esp+1Ch+Str], ebp
.text:0040DE34                 call    sub_409F80
.text:0040DE39                 inc     esi
.text:0040DE3A                 jz      short loc_40DE50
.text:0040DE3C                 mov     [esp+1Ch+arg_0], ebp
.text:0040DE40                 add     esp, 0Ch
.text:0040DE43                 pop     ebx
.text:0040DE44                 pop     esi
.text:0040DE45                 pop     edi
.text:0040DE46                 pop     ebp
.text:0040DE47                 jmp     strlen
.text:0040DE47 ; ---------------------------------------------------------------------------
.text:0040DE4C                 align 10h
.text:0040DE50
.text:0040DE50 loc_40DE50:                             ; CODE XREF: sub_40DD80+28↑j
.text:0040DE50                                         ; sub_40DD80+BA↑j
.text:0040DE50                 add     esp, 0Ch
.text:0040DE53                 mov     eax, 0FFFFFFFFh
.text:0040DE58                 pop     ebx
.text:0040DE59                 pop     esi
.text:0040DE5A                 pop     edi
.text:0040DE5B                 pop     ebp
.text:0040DE5C                 retn
.text:0040DE5C sub_40DD80      endp
.text:0040DE5C
.text:0040DE5C ; ---------------------------------------------------------------------------
.text:0040DE5D                 align 10h
.text:0040DE60
.text:0040DE60 ; =============== S U B R O U T I N E =======================================
.text:0040DE60
.text:0040DE60
.text:0040DE60 sub_40DE60      proc near               ; CODE XREF: .text:0040DBEB↑p
.text:0040DE60                 xor     eax, eax
.text:0040DE62                 retn
.text:0040DE62 sub_40DE60      endp
.text:0040DE62
.text:0040DE62 ; ---------------------------------------------------------------------------
.text:0040DE63                 align 10h
.text:0040DE70
.text:0040DE70 ; =============== S U B R O U T I N E =======================================
.text:0040DE70
.text:0040DE70
.text:0040DE70 sub_40DE70      proc near               ; CODE XREF: .text:loc_40DBE4↑p
.text:0040DE70                 xor     eax, eax
.text:0040DE72                 retn
.text:0040DE72 sub_40DE70      endp
.text:0040DE72
.text:0040DE72 ; ---------------------------------------------------------------------------
.text:0040DE73                 align 10h
.text:0040DE80
.text:0040DE80 ; =============== S U B R O U T I N E =======================================
.text:0040DE80
.text:0040DE80
.text:0040DE80 sub_40DE80      proc near               ; CODE XREF: .text:0040DBC4↑p
.text:0040DE80                 xor     eax, eax
.text:0040DE82                 retn
.text:0040DE82 sub_40DE80      endp
.text:0040DE82
.text:0040DE82 ; ---------------------------------------------------------------------------
.text:0040DE83                 align 10h
.text:0040DE90
.text:0040DE90 ; =============== S U B R O U T I N E =======================================
.text:0040DE90
.text:0040DE90
.text:0040DE90 sub_40DE90      proc near               ; CODE XREF: .text:0040DBBD↑p
.text:0040DE90                 xor     eax, eax
.text:0040DE92                 retn
.text:0040DE92 sub_40DE90      endp
.text:0040DE92
.text:0040DE92 ; ---------------------------------------------------------------------------
.text:0040DE93                 align 10h
.text:0040DEA0
.text:0040DEA0 ; =============== S U B R O U T I N E =======================================
.text:0040DEA0
.text:0040DEA0 ; Attributes: thunk
.text:0040DEA0
.text:0040DEA0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040DEA0 OleInitialize   proc near               ; CODE XREF: sub_40DC00+1A↑p
.text:0040DEA0
.text:0040DEA0 pvReserved      = dword ptr  4
.text:0040DEA0
.text:0040DEA0                 jmp     ds:__imp_OleInitialize
.text:0040DEA0 OleInitialize   endp
.text:0040DEA0
.text:0040DEA0 ; ---------------------------------------------------------------------------
.text:0040DEA6                 align 10h
.text:0040DEB0
.text:0040DEB0 ; =============== S U B R O U T I N E =======================================
.text:0040DEB0
.text:0040DEB0 ; Attributes: thunk
.text:0040DEB0
.text:0040DEB0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040DEB0 CoCreateInstance proc near              ; CODE XREF: sub_40DC00+52↑p
.text:0040DEB0
.text:0040DEB0 rclsid          = dword ptr  4
.text:0040DEB0 pUnkOuter       = dword ptr  8
.text:0040DEB0 dwClsContext    = dword ptr  0Ch
.text:0040DEB0 riid            = dword ptr  10h
.text:0040DEB0 ppv             = dword ptr  14h
.text:0040DEB0
.text:0040DEB0                 jmp     ds:__imp_CoCreateInstance
.text:0040DEB0 CoCreateInstance endp
.text:0040DEB0
.text:0040DEB0 ; ---------------------------------------------------------------------------
.text:0040DEB6                 align 10h
.text:0040DEC0
.text:0040DEC0 ; =============== S U B R O U T I N E =======================================
.text:0040DEC0
.text:0040DEC0 ; Attributes: thunk
.text:0040DEC0
.text:0040DEC0 ; void __stdcall CoUninitialize()
.text:0040DEC0 CoUninitialize  proc near               ; CODE XREF: sub_40DC00+14E↑p
.text:0040DEC0                                         ; sub_40DC00+16D↑p
.text:0040DEC0                 jmp     ds:__imp_CoUninitialize
.text:0040DEC0 CoUninitialize  endp
.text:0040DEC0
.text:0040DEC0 ; ---------------------------------------------------------------------------
.text:0040DEC6                 align 10h
.text:0040DED0                 add     al, 0BAh ; 'º'
.text:0040DED2                 retf
.text:0040DED2 ; ---------------------------------------------------------------------------
.text:0040DED3                 db 7Eh
.text:0040DED4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040DED4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040DED4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040DED4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040DED4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040DED4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040DED4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040DED4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040DED4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040DED4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040DED4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040DED4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040DED4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040DED4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040DED4                 dd 0C4426C00h, 330h, 0
.text:0040E008                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040E008                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040E008                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040E008                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040E058                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E058                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040E058                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040E058                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040E058                 dd 0BA94B00h, 1Bh, 0
.text:0040E0B8                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040E0C8                 dd 0C0h, 46000000h, 331h, 0
.text:0040E0D8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E0D8                 dd 312h, 0
.text:0040E0F8                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040E108                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040E118                 dd 0C0h, 46000000h, 311h, 0
.text:0040E128                 dd 0C0h, 46000000h, 313h, 0
.text:0040E138                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040E148                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040E158                 dd 0C0h, 46000000h, 310h, 0
.text:0040E168                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E168                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040E198                 dd 0C0h, 46000000h, 319h, 0
.text:0040E1A8                 dd 0C0h, 46000000h, 315h, 0
.text:0040E1B8                 dd 0C0h, 46000000h, 316h, 0
.text:0040E1C8                 dd 0C0h, 46000000h, 315h, 0
.text:0040E1D8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040E1E8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040E1E8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040E1E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040E228                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040E228                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040E228                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040E228                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040E228                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040E228                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040E228                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040E228                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040E228                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040E228                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040E228                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040E228                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E228                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040E228                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040E228                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040E228                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E228                 dd 2DE81h, 0
.text:0040E378                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040E390                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040E390                 dd 0
.text:0040E3A8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E3A8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040E3A8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040E3A8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040E3A8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040E3A8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040E3A8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040E3A8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040E3A8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040E3A8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040E3A8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040E3A8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040E3A8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040E3A8                 dd 10Fh, 0
.text:0040E4B8                 dd 0C0h, 46000000h, 125h, 0
.text:0040E4C8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040E4C8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040E4C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040E508                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040E508                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E508                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040E508                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040E508                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040E568                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040E578                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040E578                 dd 140h, 0
.text:0040E598                 dd 0C0h, 46000000h, 1, 0
.text:0040E5A8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040E5A8                 dd 71D3400h, 13Dh, 0
.text:0040E5C8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040E5C8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040E5C8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040E5C8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040E618                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040E618                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040E618                 dd 20405h, 0
.text:0040E648                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040E658                 dd 0C0h, 46000000h, 20406h, 0
.text:0040E668                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040E678                 dd 0C0h, 46000000h, 110h, 0
.text:0040E688                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040E698                 dd 0C0h, 46000000h, 123h, 0
.text:0040E6A8                 dd 0C0h, 46000000h, 124h, 0
.text:0040E6B8                 dd 0C0h, 46000000h, 13h, 0
.text:0040E6C8                 dd 0C0h, 46000000h, 14h, 0
.text:0040E6D8                 dd 0C0h, 46000000h, 15h, 0
.text:0040E6E8                 dd 0C0h, 46000000h, 20400h, 0
.text:0040E6F8                 dd 0C0h, 46000000h, 121h, 0
.text:0040E708                 dd 0C0h, 46000000h, 122h, 0
.text:0040E718                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040E728                 dd 0C0h, 46000000h, 108h, 0
.text:0040E738                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040E738                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040E738                 dd 103h, 0
.text:0040E768                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040E778                 dd 0C0h, 46000000h, 106h, 0
.text:0040E788                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E788                 dd 107h, 0
.text:0040E7A8                 dd 0C0h, 46000000h, 102h, 0
.text:0040E7B8                 dd 0C0h, 46000000h, 104h, 0
.text:0040E7C8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040E7C8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040E7C8                 dd 105h, 0
.text:0040E7F8                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040E808                 dd 0C0h, 46000000h, 139h, 0
.text:0040E818                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040E828                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040E828                 dd 101h, 0
.text:0040E848                 dd 0C0h, 46000000h, 100h, 0
.text:0040E858                 dd 0C0h, 46000000h, 20404h, 0
.text:0040E868                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040E868                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040E898                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040E898                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040E898                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040E898                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040E8E8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E8E8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040E8E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040E8E8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040E8E8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040E8E8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040E968                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040E968                 dd 0Ah, 0
.text:0040E988                 dd 0C0h, 46000000h, 2, 0
.text:0040E998                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040E9A8                 dd 0C0h, 46000000h, 3, 0
.text:0040E9B8                 dd 0C0h, 46000000h, 16h, 0
.text:0040E9C8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040E9C8                 dd 1608D74Fh, 0Fh, 0
.text:0040E9E8                 dd 0C0h, 46000000h, 20h, 0
.text:0040E9F8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040E9F8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040E9F8                 dd 0
.text:0040EA28                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040EA38                 dd 0C0h, 46000000h, 128h, 0
.text:0040EA48                 dd 0C0h, 46000000h, 129h, 0
.text:0040EA58                 dd 0C0h, 46000000h, 118h, 0
.text:0040EA68                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040EA68                 dd 70474000h, 11Bh, 0
.text:0040EA88                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040EA88                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040EA88                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040EA88                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040EA88                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040EAE8                 dd 0C0h, 46000000h, 116h, 0
.text:0040EAF8                 dd 0C0h, 46000000h, 113h, 0
.text:0040EB08                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040EB08                 dd 119h, 0
.text:0040EB28                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040EB28                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040EB28                 dd 0
.text:0040EB58                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040EB68                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040EB78                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040EB88                 dd 0C0h, 46000000h, 112h, 0
.text:0040EB98                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040EB98                 dd 18E6000h, 120h, 0
.text:0040EBB8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040EBB8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040EBB8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040EBF8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040EBF8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040EC28                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EC28                 dd 11Ah, 0
.text:0040EC48                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040EC48                 dd 10Ch, 0
.text:0040EC68                 dd 0C0h, 46000000h
.text:0040EC70 dword_40EC70    dd 10Bh, 0              ; DATA XREF: sub_40DC00+75↑o
.text:0040EC78                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040EC78                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040EC78                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040EC78                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040ECC8                 dd 0C0h, 46000000h, 109h, 0
.text:0040ECD8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040ECD8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040ECD8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040ECD8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040ECD8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040ECD8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040ECD8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040ECD8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040ECD8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040ECD8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040ECD8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040EDB8                 dd 0C0h, 46000000h, 138h, 0
.text:0040EDC8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040EDC8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040EDC8                 dd 27h, 0
.text:0040EDF8                 dd 0C0h, 46000000h, 8, 0
.text:0040EE08                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040EE08                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040EE08                 dd 20D00h, 0
.text:0040EE38                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040EE48                 dd 0C0h, 46000000h, 12h, 0
.text:0040EE58                 dd 0C0h, 46000000h, 4, 0
.text:0040EE68                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EE68                 dd 7, 0
.text:0040EE88                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EE88                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040EEB8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040EEB8                 dd 126h, 0
.text:0040EED8                 dd 0C0h, 46000000h, 10h, 0
.text:0040EEE8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040EEE8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040EF18                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040EF18                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040EF18                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040EF58                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040EF68                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040EF78                 dd 0C0h, 46000000h, 26h, 0
.text:0040EF88                 dd 0C0h, 46000000h, 6, 0
.text:0040EF98                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040EF98                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040EF98                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040EFD8                 dd 0C0h, 46000000h, 20403h, 0
.text:0040EFE8                 dd 0C0h, 46000000h, 20401h, 0
.text:0040EFF8                 dd 0C0h, 46000000h, 20412h, 0
.text:0040F008                 dd 0C0h, 46000000h, 20402h, 0
.text:0040F018                 dd 0C0h, 46000000h, 20411h, 0
.text:0040F028                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040F038                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040F038                 dd 10Dh, 0
.text:0040F058                 dd 0C0h, 46000000h, 127h, 0
.text:0040F068                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040F068                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040F068                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040F0A8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040F0A8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040F0A8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040F0E8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040F0F8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040F108                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040F118                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040F128                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040F138                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040F148                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040F158                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040F168                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040F178                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040F188                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040F198                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040F1A8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040F1B8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040F1C8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040F1D8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040F1E8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040F1F8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040F208                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040F218                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040F228                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040F238                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040F248                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040F258                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040F268                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040F278                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040F288                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040F298                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040F2A8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040F2B8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040F2C8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040F2D8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040F2E8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040F2F8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040F308                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040F318                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040F318                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040F340
.text:0040F340 ; =============== S U B R O U T I N E =======================================
.text:0040F340
.text:0040F340 ; Attributes: thunk
.text:0040F340
.text:0040F340 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040F340 mbrtowc         proc near               ; CODE XREF: sub_406700+757↑p
.text:0040F340
.text:0040F340 DstCh           = dword ptr  4
.text:0040F340 SrcCh           = dword ptr  8
.text:0040F340 SizeInBytes     = dword ptr  0Ch
.text:0040F340 State           = dword ptr  10h
.text:0040F340
.text:0040F340                 jmp     ds:__imp_mbrtowc
.text:0040F340 mbrtowc         endp
.text:0040F340
.text:0040F340 ; ---------------------------------------------------------------------------
.text:0040F346                 align 10h
.text:0040F350
.text:0040F350 ; =============== S U B R O U T I N E =======================================
.text:0040F350
.text:0040F350 ; Attributes: bp-based frame
.text:0040F350
.text:0040F350 sub_40F350      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040F350                 push    ebp
.text:0040F351                 mov     ecx, offset byte_412000
.text:0040F356                 cmp     ecx, offset byte_412000
.text:0040F35C                 mov     ebp, esp
.text:0040F35E                 jnb     short loc_40F376
.text:0040F360
.text:0040F360 loc_40F360:                             ; CODE XREF: sub_40F350+24↓j
.text:0040F360                 mov     edx, [ecx+4]
.text:0040F363                 mov     eax, [ecx]
.text:0040F365                 add     ecx, 8
.text:0040F368                 add     [edx+400000h], eax
.text:0040F36E                 cmp     ecx, offset byte_412000
.text:0040F374                 jb      short loc_40F360
.text:0040F376
.text:0040F376 loc_40F376:                             ; CODE XREF: sub_40F350+E↑j
.text:0040F376                 pop     ebp
.text:0040F377                 retn
.text:0040F377 sub_40F350      endp
.text:0040F377
.text:0040F377 ; ---------------------------------------------------------------------------
.text:0040F378                 align 10h
.text:0040F380
.text:0040F380 ; =============== S U B R O U T I N E =======================================
.text:0040F380
.text:0040F380 ; Attributes: bp-based frame
.text:0040F380
.text:0040F380 sub_40F380      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040F380                                         ; TopLevelExceptionFilter+D7↑p
.text:0040F380                 push    ebp
.text:0040F381                 mov     ebp, esp
.text:0040F383                 fninit
.text:0040F385                 pop     ebp
.text:0040F386                 retn
.text:0040F386 sub_40F380      endp
.text:0040F386
.text:0040F386 ; ---------------------------------------------------------------------------
.text:0040F387                 align 10h
.text:0040F390
.text:0040F390 ; =============== S U B R O U T I N E =======================================
.text:0040F390
.text:0040F390 ; Attributes: bp-based frame
.text:0040F390
.text:0040F390 ; void __cdecl sub_40F390()
.text:0040F390 sub_40F390      proc near               ; DATA XREF: .text:loc_40F3D9↓o
.text:0040F390                                         ; sub_40F420:loc_40F44E↓o
.text:0040F390                 push    ebp
.text:0040F391                 mov     ebp, esp
.text:0040F393                 sub     esp, 8
.text:0040F396                 mov     eax, off_4110D4
.text:0040F39B                 mov     edx, [eax]
.text:0040F39D                 test    edx, edx
.text:0040F39F                 jnz     short loc_40F3A5
.text:0040F3A1
.text:0040F3A1 loc_40F3A1:                             ; CODE XREF: sub_40F390+2C↓j
.text:0040F3A1                 mov     esp, ebp
.text:0040F3A3                 pop     ebp
.text:0040F3A4                 retn
.text:0040F3A5 ; ---------------------------------------------------------------------------
.text:0040F3A5
.text:0040F3A5 loc_40F3A5:                             ; CODE XREF: sub_40F390+F↑j
.text:0040F3A5                                         ; sub_40F390+2A↓j
.text:0040F3A5                 call    dword ptr [eax]
.text:0040F3A7                 mov     edx, off_4110D4
.text:0040F3AD                 mov     ecx, [edx+4]
.text:0040F3B0                 lea     eax, [edx+4]
.text:0040F3B3                 mov     off_4110D4, eax
.text:0040F3B8                 test    ecx, ecx
.text:0040F3BA                 jnz     short loc_40F3A5
.text:0040F3BC                 jmp     short loc_40F3A1
.text:0040F3BC sub_40F390      endp
.text:0040F3BC
.text:0040F3BC ; ---------------------------------------------------------------------------
.text:0040F3BE                 align 10h
.text:0040F3C0                 push    ebp
.text:0040F3C1                 mov     ebp, esp
.text:0040F3C3                 sub     esp, 8
.text:0040F3C6                 mov     [ebp-4], ebx
.text:0040F3C9                 mov     eax, ds:dword_410920
.text:0040F3CE                 cmp     eax, 0FFFFFFFFh
.text:0040F3D1                 jz      short loc_40F3FC
.text:0040F3D3
.text:0040F3D3 loc_40F3D3:                             ; CODE XREF: .text:0040F406↓j
.text:0040F3D3                                         ; .text:0040F419↓j
.text:0040F3D3                 test    eax, eax
.text:0040F3D5                 mov     ebx, eax
.text:0040F3D7                 jnz     short loc_40F3F0
.text:0040F3D9
.text:0040F3D9 loc_40F3D9:                             ; CODE XREF: .text:0040F3FA↓j
.text:0040F3D9                 mov     dword ptr [esp], offset sub_40F390
.text:0040F3E0                 call    sub_401040
.text:0040F3E5                 mov     ebx, [ebp-4]
.text:0040F3E8                 mov     esp, ebp
.text:0040F3EA                 pop     ebp
.text:0040F3EB                 retn
.text:0040F3EB ; ---------------------------------------------------------------------------
.text:0040F3EC                 align 10h
.text:0040F3F0
.text:0040F3F0 loc_40F3F0:                             ; CODE XREF: .text:0040F3D7↑j
.text:0040F3F0                                         ; .text:0040F3F8↓j
.text:0040F3F0                 call    ds:dword_410920[ebx*4]
.text:0040F3F7                 dec     ebx
.text:0040F3F8                 jnz     short loc_40F3F0
.text:0040F3FA                 jmp     short loc_40F3D9
.text:0040F3FC ; ---------------------------------------------------------------------------
.text:0040F3FC
.text:0040F3FC loc_40F3FC:                             ; CODE XREF: .text:0040F3D1↑j
.text:0040F3FC                 mov     ecx, ds:dword_410924
.text:0040F402                 xor     eax, eax
.text:0040F404                 test    ecx, ecx
.text:0040F406                 jz      short loc_40F3D3
.text:0040F408                 mov     edx, offset dword_410920
.text:0040F40D                 lea     esi, [esi+0]
.text:0040F410
.text:0040F410 loc_40F410:                             ; CODE XREF: .text:0040F417↓j
.text:0040F410                 inc     eax
.text:0040F411                 mov     ecx, [edx+eax*4+4]
.text:0040F415                 test    ecx, ecx
.text:0040F417                 jnz     short loc_40F410
.text:0040F419                 jmp     short loc_40F3D3
.text:0040F419 ; ---------------------------------------------------------------------------
.text:0040F41B                 align 10h
.text:0040F420
.text:0040F420 ; =============== S U B R O U T I N E =======================================
.text:0040F420
.text:0040F420 ; Attributes: bp-based frame
.text:0040F420
.text:0040F420 sub_40F420      proc near               ; CODE XREF: sub_401A30+16↑p
.text:0040F420
.text:0040F420 var_8           = dword ptr -8
.text:0040F420 var_4           = dword ptr -4
.text:0040F420
.text:0040F420                 push    ebp
.text:0040F421                 mov     ebp, esp
.text:0040F423                 sub     esp, 8
.text:0040F426                 mov     [ebp+var_4], ebx
.text:0040F429                 mov     edx, dword_4110D0
.text:0040F42F                 test    edx, edx
.text:0040F431                 jnz     short loc_40F45A
.text:0040F433                 mov     eax, ds:dword_410920
.text:0040F438                 mov     edx, 1
.text:0040F43D                 mov     dword_4110D0, edx
.text:0040F443                 cmp     eax, 0FFFFFFFFh
.text:0040F446                 jz      short loc_40F46D
.text:0040F448
.text:0040F448 loc_40F448:                             ; CODE XREF: sub_40F420+57↓j
.text:0040F448                                         ; sub_40F420+69↓j
.text:0040F448                 test    eax, eax
.text:0040F44A                 mov     ebx, eax
.text:0040F44C                 jnz     short loc_40F461
.text:0040F44E
.text:0040F44E loc_40F44E:                             ; CODE XREF: sub_40F420+4B↓j
.text:0040F44E                 mov     [esp+8+var_8], offset sub_40F390 ; void (__cdecl *)()
.text:0040F455                 call    sub_401040
.text:0040F45A
.text:0040F45A loc_40F45A:                             ; CODE XREF: sub_40F420+11↑j
.text:0040F45A                 mov     ebx, [ebp+var_4]
.text:0040F45D                 mov     esp, ebp
.text:0040F45F                 pop     ebp
.text:0040F460                 retn
.text:0040F461 ; ---------------------------------------------------------------------------
.text:0040F461
.text:0040F461 loc_40F461:                             ; CODE XREF: sub_40F420+2C↑j
.text:0040F461                                         ; sub_40F420+49↓j
.text:0040F461                 call    ds:dword_410920[ebx*4]
.text:0040F468                 dec     ebx
.text:0040F469                 jnz     short loc_40F461
.text:0040F46B                 jmp     short loc_40F44E
.text:0040F46D ; ---------------------------------------------------------------------------
.text:0040F46D
.text:0040F46D loc_40F46D:                             ; CODE XREF: sub_40F420+26↑j
.text:0040F46D                 mov     ecx, ds:dword_410924
.text:0040F473                 xor     eax, eax
.text:0040F475                 test    ecx, ecx
.text:0040F477                 jz      short loc_40F448
.text:0040F479                 mov     edx, offset dword_410920
.text:0040F47E                 mov     esi, esi
.text:0040F480
.text:0040F480 loc_40F480:                             ; CODE XREF: sub_40F420+67↓j
.text:0040F480                 inc     eax
.text:0040F481                 mov     ebx, [edx+eax*4+4]
.text:0040F485                 test    ebx, ebx
.text:0040F487                 jnz     short loc_40F480
.text:0040F489                 jmp     short loc_40F448
.text:0040F489 sub_40F420      endp
.text:0040F489
.text:0040F489 ; ---------------------------------------------------------------------------
.text:0040F48B                 align 10h
.text:0040F490
.text:0040F490 ; =============== S U B R O U T I N E =======================================
.text:0040F490
.text:0040F490 ; Attributes: info_from_lumina
.text:0040F490
.text:0040F490 ; void *__cdecl _alloca(size_t Size)
.text:0040F490 __alloca        proc near               ; CODE XREF: sub_401A30+11↑p
.text:0040F490                 push    ecx
.text:0040F491                 mov     ecx, esp
.text:0040F493                 add     ecx, 8
.text:0040F496
.text:0040F496 loc_40F496:                             ; CODE XREF: __alloca+1B↓j
.text:0040F496                 cmp     eax, 1000h
.text:0040F49B                 jb      short loc_40F4AD
.text:0040F49D                 sub     ecx, 1000h
.text:0040F4A3                 or      dword ptr [ecx], 0
.text:0040F4A6                 sub     eax, 1000h
.text:0040F4AB                 jmp     short loc_40F496
.text:0040F4AD ; ---------------------------------------------------------------------------
.text:0040F4AD
.text:0040F4AD loc_40F4AD:                             ; CODE XREF: __alloca+B↑j
.text:0040F4AD                 sub     ecx, eax
.text:0040F4AF                 or      dword ptr [ecx], 0
.text:0040F4B2                 mov     eax, esp
.text:0040F4B4                 mov     esp, ecx
.text:0040F4B6                 mov     ecx, [eax]
.text:0040F4B8                 mov     eax, [eax+4]
.text:0040F4BB                 jmp     eax
.text:0040F4BB __alloca        endp
.text:0040F4BB
.text:0040F4BB ; ---------------------------------------------------------------------------
.text:0040F4BD                 align 10h
.text:0040F4C0
.text:0040F4C0 ; =============== S U B R O U T I N E =======================================
.text:0040F4C0
.text:0040F4C0 ; Attributes: bp-based frame
.text:0040F4C0
.text:0040F4C0 sub_40F4C0      proc near               ; CODE XREF: sub_4054B0+2BE↑p
.text:0040F4C0                                         ; sub_4054B0+36A↑p ...
.text:0040F4C0
.text:0040F4C0 var_24          = dword ptr -24h
.text:0040F4C0 var_20          = dword ptr -20h
.text:0040F4C0 var_1C          = dword ptr -1Ch
.text:0040F4C0 var_18          = dword ptr -18h
.text:0040F4C0 var_14          = dword ptr -14h
.text:0040F4C0 var_C           = dword ptr -0Ch
.text:0040F4C0 var_8           = dword ptr -8
.text:0040F4C0 var_4           = dword ptr -4
.text:0040F4C0 arg_0           = dword ptr  8
.text:0040F4C0 arg_4           = dword ptr  0Ch
.text:0040F4C0 arg_8           = dword ptr  10h
.text:0040F4C0 arg_C           = dword ptr  14h
.text:0040F4C0
.text:0040F4C0                 push    ebp
.text:0040F4C1                 mov     ebp, esp
.text:0040F4C3                 sub     esp, 28h
.text:0040F4C6                 mov     [ebp+var_C], ebx
.text:0040F4C9                 mov     edx, [ebp+arg_C]
.text:0040F4CC                 mov     ecx, [ebp+arg_0]
.text:0040F4CF                 mov     [ebp+var_8], esi
.text:0040F4D2                 mov     eax, [ebp+arg_8]
.text:0040F4D5                 test    edx, edx
.text:0040F4D7                 mov     [ebp+var_4], edi
.text:0040F4DA                 mov     ebx, [ebp+arg_4]
.text:0040F4DD                 mov     esi, eax
.text:0040F4DF                 mov     [ebp+var_18], 0
.text:0040F4E6                 mov     [ebp+var_14], 0
.text:0040F4ED                 mov     [ebp+var_1C], ecx
.text:0040F4F0                 jnz     short loc_40F542
.text:0040F4F2                 cmp     eax, ebx
.text:0040F4F4                 jbe     short loc_40F520
.text:0040F4F6                 mov     eax, ecx
.text:0040F4F8                 mov     edx, ebx
.text:0040F4FA                 div     esi
.text:0040F4FC                 mov     edi, eax
.text:0040F4FE                 mov     esi, esi
.text:0040F500
.text:0040F500 loc_40F500:                             ; CODE XREF: sub_40F4C0+88↓j
.text:0040F500                                         ; sub_40F4C0+A4↓j ...
.text:0040F500                 xor     ecx, ecx
.text:0040F502
.text:0040F502 loc_40F502:                             ; CODE XREF: sub_40F4C0+80↓j
.text:0040F502                 mov     [ebp+var_18], edi
.text:0040F505                 mov     ebx, [ebp+var_C]
.text:0040F508                 mov     eax, [ebp+var_18]
.text:0040F50B                 mov     [ebp+var_14], ecx
.text:0040F50E                 mov     esi, [ebp+var_8]
.text:0040F511                 mov     edx, [ebp+var_14]
.text:0040F514                 mov     edi, [ebp+var_4]
.text:0040F517                 mov     esp, ebp
.text:0040F519                 pop     ebp
.text:0040F51A                 retn
.text:0040F51A ; ---------------------------------------------------------------------------
.text:0040F51B                 align 10h
.text:0040F520
.text:0040F520 loc_40F520:                             ; CODE XREF: sub_40F4C0+34↑j
.text:0040F520                 test    eax, eax
.text:0040F522                 jnz     short loc_40F531
.text:0040F524                 mov     eax, 1
.text:0040F529                 xor     ecx, ecx
.text:0040F52B                 xor     edx, edx
.text:0040F52D                 div     ecx
.text:0040F52F                 mov     esi, eax
.text:0040F531
.text:0040F531 loc_40F531:                             ; CODE XREF: sub_40F4C0+62↑j
.text:0040F531                 mov     eax, ebx
.text:0040F533                 xor     edx, edx
.text:0040F535                 div     esi
.text:0040F537                 mov     ecx, eax
.text:0040F539                 mov     eax, [ebp+var_1C]
.text:0040F53C                 div     esi
.text:0040F53E                 mov     edi, eax
.text:0040F540                 jmp     short loc_40F502
.text:0040F542 ; ---------------------------------------------------------------------------
.text:0040F542
.text:0040F542 loc_40F542:                             ; CODE XREF: sub_40F4C0+30↑j
.text:0040F542                 cmp     edx, ebx
.text:0040F544                 jbe     short loc_40F550
.text:0040F546                 xor     edi, edi
.text:0040F548                 jmp     short loc_40F500
.text:0040F548 ; ---------------------------------------------------------------------------
.text:0040F54A                 align 10h
.text:0040F550
.text:0040F550 loc_40F550:                             ; CODE XREF: sub_40F4C0+84↑j
.text:0040F550                 bsr     eax, edx
.text:0040F553                 xor     eax, 1Fh
.text:0040F556                 mov     [ebp+var_20], eax
.text:0040F559                 jnz     short loc_40F570
.text:0040F55B                 cmp     ebx, edx
.text:0040F55D                 ja      short loc_40F566
.text:0040F55F                 xor     edi, edi
.text:0040F561                 cmp     [ebp+var_1C], esi
.text:0040F564                 jb      short loc_40F500
.text:0040F566
.text:0040F566 loc_40F566:                             ; CODE XREF: sub_40F4C0+9D↑j
.text:0040F566                 mov     edi, 1
.text:0040F56B                 jmp     short loc_40F500
.text:0040F56B ; ---------------------------------------------------------------------------
.text:0040F56D                 align 10h
.text:0040F570
.text:0040F570 loc_40F570:                             ; CODE XREF: sub_40F4C0+99↑j
.text:0040F570                 mov     eax, [ebp+var_20]
.text:0040F573                 mov     ecx, 20h ; ' '
.text:0040F578                 sub     ecx, eax
.text:0040F57A                 mov     [ebp+var_24], ecx
.text:0040F57D                 mov     eax, esi
.text:0040F57F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F583                 shl     edx, cl
.text:0040F585                 mov     edi, edx
.text:0040F587                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F58B                 mov     edx, ebx
.text:0040F58D                 shr     eax, cl
.text:0040F58F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F593                 or      edi, eax
.text:0040F595                 mov     eax, [ebp+var_1C]
.text:0040F598                 shl     esi, cl
.text:0040F59A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F59E                 shr     edx, cl
.text:0040F5A0                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F5A4                 shl     ebx, cl
.text:0040F5A6                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040F5AA                 shr     eax, cl
.text:0040F5AC                 or      ebx, eax
.text:0040F5AE                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040F5B2                 mov     eax, ebx
.text:0040F5B4                 div     edi
.text:0040F5B6                 mov     ebx, edx
.text:0040F5B8                 mov     edi, eax
.text:0040F5BA                 shl     [ebp+var_1C], cl
.text:0040F5BD                 mul     esi
.text:0040F5BF                 cmp     edx, ebx
.text:0040F5C1                 ja      short loc_40F5D4
.text:0040F5C3                 cmp     edx, ebx
.text:0040F5C5                 jnz     loc_40F500
.text:0040F5CB                 cmp     eax, [ebp+var_1C]
.text:0040F5CE                 jbe     loc_40F500
.text:0040F5D4
.text:0040F5D4 loc_40F5D4:                             ; CODE XREF: sub_40F4C0+101↑j
.text:0040F5D4                 dec     edi
.text:0040F5D5                 jmp     loc_40F500
.text:0040F5D5 sub_40F4C0      endp
.text:0040F5D5
.text:0040F5D5 ; ---------------------------------------------------------------------------
.text:0040F5DA                 align 10h
.text:0040F5E0
.text:0040F5E0 ; =============== S U B R O U T I N E =======================================
.text:0040F5E0
.text:0040F5E0 ; Attributes: bp-based frame
.text:0040F5E0
.text:0040F5E0 sub_40F5E0      proc near               ; CODE XREF: sub_406140+38↑p
.text:0040F5E0                                         ; sub_406140+88↑p
.text:0040F5E0
.text:0040F5E0 var_3C          = dword ptr -3Ch
.text:0040F5E0 var_34          = dword ptr -34h
.text:0040F5E0 var_30          = dword ptr -30h
.text:0040F5E0 var_2C          = dword ptr -2Ch
.text:0040F5E0 var_28          = dword ptr -28h
.text:0040F5E0 var_24          = dword ptr -24h
.text:0040F5E0 var_1C          = dword ptr -1Ch
.text:0040F5E0 var_18          = dword ptr -18h
.text:0040F5E0 var_14          = dword ptr -14h
.text:0040F5E0 arg_0           = dword ptr  8
.text:0040F5E0 arg_4           = dword ptr  0Ch
.text:0040F5E0 arg_8           = dword ptr  10h
.text:0040F5E0 arg_C           = dword ptr  14h
.text:0040F5E0
.text:0040F5E0                 push    ebp
.text:0040F5E1                 mov     ebp, esp
.text:0040F5E3                 push    edi
.text:0040F5E4                 push    esi
.text:0040F5E5                 push    ebx
.text:0040F5E6                 sub     esp, 34h
.text:0040F5E9                 mov     ebx, [ebp+arg_4]
.text:0040F5EC                 mov     [ebp+var_28], 0
.text:0040F5F3                 mov     ecx, [ebp+arg_0]
.text:0040F5F6                 mov     eax, [ebp+arg_8]
.text:0040F5F9                 mov     [ebp+var_24], 0
.text:0040F600                 test    ebx, ebx
.text:0040F602                 mov     edx, [ebp+arg_C]
.text:0040F605                 mov     [ebp+var_1C], 0
.text:0040F60C                 js      loc_40F784
.text:0040F612
.text:0040F612 loc_40F612:                             ; CODE XREF: sub_40F5E0+1B2↓j
.text:0040F612                 test    edx, edx
.text:0040F614                 js      loc_40F778
.text:0040F61A
.text:0040F61A loc_40F61A:                             ; CODE XREF: sub_40F5E0+19F↓j
.text:0040F61A                 mov     [ebp+var_2C], edx
.text:0040F61D                 test    edx, edx
.text:0040F61F                 mov     esi, eax
.text:0040F621                 mov     [ebp+var_30], ecx
.text:0040F624                 mov     edi, ebx
.text:0040F626                 jnz     short loc_40F691
.text:0040F628                 cmp     eax, ebx
.text:0040F62A                 jbe     short loc_40F674
.text:0040F62C                 mov     eax, ecx
.text:0040F62E                 mov     edx, ebx
.text:0040F630                 div     esi
.text:0040F632
.text:0040F632 loc_40F632:                             ; CODE XREF: sub_40F5E0+AF↓j
.text:0040F632                 mov     [ebp+var_30], edx
.text:0040F635                 lea     ecx, [ebp+var_18]
.text:0040F638                 test    ecx, ecx
.text:0040F63A                 jz      short loc_40F655
.text:0040F63C                 mov     [ebp+var_24], 0
.text:0040F643
.text:0040F643 loc_40F643:                             ; CODE XREF: sub_40F5E0+FE↓j
.text:0040F643                 mov     eax, [ebp+var_30]
.text:0040F646                 mov     [ebp+var_28], eax
.text:0040F649                 mov     edx, [ebp+var_28]
.text:0040F64C                 mov     ecx, [ebp+var_24]
.text:0040F64F                 mov     [ebp+var_18], edx
.text:0040F652                 mov     [ebp+var_14], ecx
.text:0040F655
.text:0040F655 loc_40F655:                             ; CODE XREF: sub_40F5E0+5A↑j
.text:0040F655                                         ; sub_40F5E0+C8↓j ...
.text:0040F655                 mov     eax, [ebp+var_1C]
.text:0040F658                 test    eax, eax
.text:0040F65A                 jz      short loc_40F666
.text:0040F65C                 neg     [ebp+var_18]
.text:0040F65F                 adc     [ebp+var_14], 0
.text:0040F663                 neg     [ebp+var_14]
.text:0040F666
.text:0040F666 loc_40F666:                             ; CODE XREF: sub_40F5E0+7A↑j
.text:0040F666                 mov     eax, [ebp+var_18]
.text:0040F669                 mov     edx, [ebp+var_14]
.text:0040F66C                 add     esp, 34h
.text:0040F66F                 pop     ebx
.text:0040F670                 pop     esi
.text:0040F671                 pop     edi
.text:0040F672                 pop     ebp
.text:0040F673                 retn
.text:0040F674 ; ---------------------------------------------------------------------------
.text:0040F674
.text:0040F674 loc_40F674:                             ; CODE XREF: sub_40F5E0+4A↑j
.text:0040F674                 test    eax, eax
.text:0040F676                 jnz     short loc_40F683
.text:0040F678                 mov     eax, 1
.text:0040F67D                 xor     edx, edx
.text:0040F67F                 div     esi
.text:0040F681                 mov     esi, eax
.text:0040F683
.text:0040F683 loc_40F683:                             ; CODE XREF: sub_40F5E0+96↑j
.text:0040F683                 mov     eax, edi
.text:0040F685                 mov     edx, [ebp+var_2C]
.text:0040F688                 div     esi
.text:0040F68A                 mov     eax, [ebp+var_30]
.text:0040F68D                 div     esi
.text:0040F68F                 jmp     short loc_40F632
.text:0040F691 ; ---------------------------------------------------------------------------
.text:0040F691
.text:0040F691 loc_40F691:                             ; CODE XREF: sub_40F5E0+46↑j
.text:0040F691                 cmp     [ebp+var_2C], ebx
.text:0040F694                 jbe     short loc_40F6B0
.text:0040F696                 mov     [ebp+var_28], ecx
.text:0040F699
.text:0040F699 loc_40F699:                             ; CODE XREF: sub_40F5E0+17E↓j
.text:0040F699                 mov     [ebp+var_24], edi
.text:0040F69C                 mov     eax, [ebp+var_28]
.text:0040F69F                 mov     edx, [ebp+var_24]
.text:0040F6A2                 mov     [ebp+var_18], eax
.text:0040F6A5                 mov     [ebp+var_14], edx
.text:0040F6A8                 jmp     short loc_40F655
.text:0040F6A8 ; ---------------------------------------------------------------------------
.text:0040F6AA                 align 10h
.text:0040F6B0
.text:0040F6B0 loc_40F6B0:                             ; CODE XREF: sub_40F5E0+B4↑j
.text:0040F6B0                 bsr     eax, [ebp+var_2C]
.text:0040F6B4                 mov     ebx, eax
.text:0040F6B6                 xor     ebx, 1Fh
.text:0040F6B9                 jnz     short loc_40F6E3
.text:0040F6BB                 cmp     edi, [ebp+var_2C]
.text:0040F6BE                 ja      short loc_40F6C5
.text:0040F6C0                 cmp     [ebp+var_30], esi
.text:0040F6C3                 jb      short loc_40F6D0
.text:0040F6C5
.text:0040F6C5 loc_40F6C5:                             ; CODE XREF: sub_40F5E0+DE↑j
.text:0040F6C5                 mov     edx, [ebp+var_30]
.text:0040F6C8                 sub     edx, esi
.text:0040F6CA                 sbb     edi, [ebp+var_2C]
.text:0040F6CD                 mov     [ebp+var_30], edx
.text:0040F6D0
.text:0040F6D0 loc_40F6D0:                             ; CODE XREF: sub_40F5E0+E3↑j
.text:0040F6D0                 lea     ecx, [ebp+var_18]
.text:0040F6D3                 test    ecx, ecx
.text:0040F6D5                 jz      loc_40F655
.text:0040F6DB                 mov     [ebp+var_24], edi
.text:0040F6DE                 jmp     loc_40F643
.text:0040F6E3 ; ---------------------------------------------------------------------------
.text:0040F6E3
.text:0040F6E3 loc_40F6E3:                             ; CODE XREF: sub_40F5E0+D9↑j
.text:0040F6E3                 mov     edx, [ebp+var_2C]
.text:0040F6E6                 mov     eax, 20h ; ' '
.text:0040F6EB                 mov     cl, bl
.text:0040F6ED                 sub     eax, ebx
.text:0040F6EF                 mov     [ebp+var_34], eax
.text:0040F6F2                 shl     edx, cl
.text:0040F6F4                 mov     eax, esi
.text:0040F6F6                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F6FA                 shr     eax, cl
.text:0040F6FC                 mov     cl, bl
.text:0040F6FE                 shl     esi, cl
.text:0040F700                 or      edx, eax
.text:0040F702                 mov     eax, [ebp+var_30]
.text:0040F705                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F709                 mov     [ebp+var_2C], edx
.text:0040F70C                 mov     edx, edi
.text:0040F70E                 shr     edx, cl
.text:0040F710                 mov     cl, bl
.text:0040F712                 shl     edi, cl
.text:0040F714                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F718                 shr     eax, cl
.text:0040F71A                 or      edi, eax
.text:0040F71C                 mov     eax, edi
.text:0040F71E                 mov     cl, bl
.text:0040F720                 div     [ebp+var_2C]
.text:0040F723                 shl     [ebp+var_30], cl
.text:0040F726                 mov     edi, edx
.text:0040F728                 mul     esi
.text:0040F72A                 mov     [ebp+var_3C], eax
.text:0040F72D                 cmp     edx, edi
.text:0040F72F                 ja      short loc_40F76B
.text:0040F731                 cmp     edx, edi
.text:0040F733                 jz      short loc_40F763
.text:0040F735
.text:0040F735 loc_40F735:                             ; CODE XREF: sub_40F5E0+189↓j
.text:0040F735                                         ; sub_40F5E0+196↓j
.text:0040F735                 lea     eax, [ebp+var_18]
.text:0040F738                 test    eax, eax
.text:0040F73A                 jz      loc_40F655
.text:0040F740                 movzx   ecx, byte ptr [ebp+var_34]
.text:0040F744                 mov     eax, [ebp+var_30]
.text:0040F747                 sub     eax, [ebp+var_3C]
.text:0040F74A                 sbb     edi, edx
.text:0040F74C                 mov     [ebp+var_30], eax
.text:0040F74F                 mov     edx, edi
.text:0040F751                 shl     edx, cl
.text:0040F753                 mov     cl, bl
.text:0040F755                 shr     eax, cl
.text:0040F757                 or      edx, eax
.text:0040F759                 mov     [ebp+var_28], edx
.text:0040F75C                 shr     edi, cl
.text:0040F75E                 jmp     loc_40F699
.text:0040F763 ; ---------------------------------------------------------------------------
.text:0040F763
.text:0040F763 loc_40F763:                             ; CODE XREF: sub_40F5E0+153↑j
.text:0040F763                 mov     eax, [ebp+var_30]
.text:0040F766                 cmp     [ebp+var_3C], eax
.text:0040F769                 jbe     short loc_40F735
.text:0040F76B
.text:0040F76B loc_40F76B:                             ; CODE XREF: sub_40F5E0+14F↑j
.text:0040F76B                 mov     ecx, [ebp+var_3C]
.text:0040F76E                 sub     ecx, esi
.text:0040F770                 sbb     edx, [ebp+var_2C]
.text:0040F773                 mov     [ebp+var_3C], ecx
.text:0040F776                 jmp     short loc_40F735
.text:0040F778 ; ---------------------------------------------------------------------------
.text:0040F778
.text:0040F778 loc_40F778:                             ; CODE XREF: sub_40F5E0+34↑j
.text:0040F778                 neg     eax
.text:0040F77A                 adc     edx, 0
.text:0040F77D                 neg     edx
.text:0040F77F                 jmp     loc_40F61A
.text:0040F784 ; ---------------------------------------------------------------------------
.text:0040F784
.text:0040F784 loc_40F784:                             ; CODE XREF: sub_40F5E0+2C↑j
.text:0040F784                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:0040F78B                 neg     ecx
.text:0040F78D                 adc     ebx, 0
.text:0040F790                 neg     ebx
.text:0040F792                 jmp     loc_40F612
.text:0040F792 sub_40F5E0      endp
.text:0040F792
.text:0040F792 ; ---------------------------------------------------------------------------
.text:0040F797                 align 10h
.text:0040F7A0
.text:0040F7A0 ; =============== S U B R O U T I N E =======================================
.text:0040F7A0
.text:0040F7A0 ; Attributes: bp-based frame
.text:0040F7A0
.text:0040F7A0 sub_40F7A0      proc near               ; CODE XREF: sub_406140+58↑p
.text:0040F7A0                                         ; sub_406140+AA↑p
.text:0040F7A0
.text:0040F7A0 var_2C          = dword ptr -2Ch
.text:0040F7A0 var_28          = dword ptr -28h
.text:0040F7A0 var_24          = dword ptr -24h
.text:0040F7A0 var_20          = dword ptr -20h
.text:0040F7A0 var_1C          = dword ptr -1Ch
.text:0040F7A0 var_14          = dword ptr -14h
.text:0040F7A0 arg_0           = dword ptr  8
.text:0040F7A0 arg_4           = dword ptr  0Ch
.text:0040F7A0 arg_8           = dword ptr  10h
.text:0040F7A0 arg_C           = dword ptr  14h
.text:0040F7A0
.text:0040F7A0                 push    ebp
.text:0040F7A1                 mov     ebp, esp
.text:0040F7A3                 push    edi
.text:0040F7A4                 push    esi
.text:0040F7A5                 push    ebx
.text:0040F7A6                 sub     esp, 24h
.text:0040F7A9                 mov     ebx, [ebp+arg_4]
.text:0040F7AC                 mov     [ebp+var_20], 0
.text:0040F7B3                 mov     ecx, [ebp+arg_0]
.text:0040F7B6                 mov     eax, [ebp+arg_8]
.text:0040F7B9                 mov     [ebp+var_1C], 0
.text:0040F7C0                 test    ebx, ebx
.text:0040F7C2                 mov     edx, [ebp+arg_C]
.text:0040F7C5                 mov     [ebp+var_14], 0
.text:0040F7CC                 js      loc_40F8E0
.text:0040F7D2
.text:0040F7D2 loc_40F7D2:                             ; CODE XREF: sub_40F7A0+14E↓j
.text:0040F7D2                 test    edx, edx
.text:0040F7D4                 js      loc_40F8D0
.text:0040F7DA
.text:0040F7DA loc_40F7DA:                             ; CODE XREF: sub_40F7A0+13A↓j
.text:0040F7DA                 mov     [ebp+var_24], ecx
.text:0040F7DD                 test    edx, edx
.text:0040F7DF                 mov     esi, eax
.text:0040F7E1                 jnz     short loc_40F836
.text:0040F7E3                 cmp     eax, ebx
.text:0040F7E5                 jbe     short loc_40F814
.text:0040F7E7                 mov     eax, ecx
.text:0040F7E9                 mov     edx, ebx
.text:0040F7EB                 div     esi
.text:0040F7ED                 mov     edi, eax
.text:0040F7EF                 nop
.text:0040F7F0
.text:0040F7F0 loc_40F7F0:                             ; CODE XREF: sub_40F7A0+9C↓j
.text:0040F7F0                                         ; sub_40F7A0+B4↓j ...
.text:0040F7F0                 xor     ecx, ecx
.text:0040F7F2
.text:0040F7F2 loc_40F7F2:                             ; CODE XREF: sub_40F7A0+94↓j
.text:0040F7F2                 mov     [ebp+var_1C], ecx
.text:0040F7F5                 mov     ecx, [ebp+var_14]
.text:0040F7F8                 mov     [ebp+var_20], edi
.text:0040F7FB                 mov     eax, [ebp+var_20]
.text:0040F7FE                 mov     edx, [ebp+var_1C]
.text:0040F801                 test    ecx, ecx
.text:0040F803                 jz      short loc_40F80C
.text:0040F805                 neg     eax
.text:0040F807                 adc     edx, 0
.text:0040F80A                 neg     edx
.text:0040F80C
.text:0040F80C loc_40F80C:                             ; CODE XREF: sub_40F7A0+63↑j
.text:0040F80C                 add     esp, 24h
.text:0040F80F                 pop     ebx
.text:0040F810                 pop     esi
.text:0040F811                 pop     edi
.text:0040F812                 pop     ebp
.text:0040F813                 retn
.text:0040F814 ; ---------------------------------------------------------------------------
.text:0040F814
.text:0040F814 loc_40F814:                             ; CODE XREF: sub_40F7A0+45↑j
.text:0040F814                 test    eax, eax
.text:0040F816                 jnz     short loc_40F825
.text:0040F818                 mov     eax, 1
.text:0040F81D                 xor     ecx, ecx
.text:0040F81F                 xor     edx, edx
.text:0040F821                 div     ecx
.text:0040F823                 mov     esi, eax
.text:0040F825
.text:0040F825 loc_40F825:                             ; CODE XREF: sub_40F7A0+76↑j
.text:0040F825                 mov     eax, ebx
.text:0040F827                 xor     edx, edx
.text:0040F829                 div     esi
.text:0040F82B                 mov     ecx, eax
.text:0040F82D                 mov     eax, [ebp+var_24]
.text:0040F830                 div     esi
.text:0040F832                 mov     edi, eax
.text:0040F834                 jmp     short loc_40F7F2
.text:0040F836 ; ---------------------------------------------------------------------------
.text:0040F836
.text:0040F836 loc_40F836:                             ; CODE XREF: sub_40F7A0+41↑j
.text:0040F836                 cmp     edx, ebx
.text:0040F838                 jbe     short loc_40F840
.text:0040F83A                 xor     edi, edi
.text:0040F83C                 jmp     short loc_40F7F0
.text:0040F83C ; ---------------------------------------------------------------------------
.text:0040F83E                 align 10h
.text:0040F840
.text:0040F840 loc_40F840:                             ; CODE XREF: sub_40F7A0+98↑j
.text:0040F840                 bsr     eax, edx
.text:0040F843                 xor     eax, 1Fh
.text:0040F846                 mov     [ebp+var_28], eax
.text:0040F849                 jnz     short loc_40F860
.text:0040F84B                 cmp     ebx, edx
.text:0040F84D                 ja      short loc_40F856
.text:0040F84F                 xor     edi, edi
.text:0040F851                 cmp     [ebp+var_24], esi
.text:0040F854                 jb      short loc_40F7F0
.text:0040F856
.text:0040F856 loc_40F856:                             ; CODE XREF: sub_40F7A0+AD↑j
.text:0040F856                 mov     edi, 1
.text:0040F85B                 jmp     short loc_40F7F0
.text:0040F85B ; ---------------------------------------------------------------------------
.text:0040F85D                 align 10h
.text:0040F860
.text:0040F860 loc_40F860:                             ; CODE XREF: sub_40F7A0+A9↑j
.text:0040F860                 mov     eax, [ebp+var_28]
.text:0040F863                 mov     ecx, 20h ; ' '
.text:0040F868                 sub     ecx, eax
.text:0040F86A                 mov     [ebp+var_2C], ecx
.text:0040F86D                 mov     eax, esi
.text:0040F86F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F873                 shl     edx, cl
.text:0040F875                 mov     edi, edx
.text:0040F877                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F87B                 mov     edx, ebx
.text:0040F87D                 shr     eax, cl
.text:0040F87F                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F883                 or      edi, eax
.text:0040F885                 mov     eax, [ebp+var_24]
.text:0040F888                 shl     esi, cl
.text:0040F88A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F88E                 shr     edx, cl
.text:0040F890                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F894                 shl     ebx, cl
.text:0040F896                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F89A                 shr     eax, cl
.text:0040F89C                 or      ebx, eax
.text:0040F89E                 movzx   ecx, byte ptr [ebp+var_28]
.text:0040F8A2                 mov     eax, ebx
.text:0040F8A4                 div     edi
.text:0040F8A6                 mov     ebx, edx
.text:0040F8A8                 mov     edi, eax
.text:0040F8AA                 shl     [ebp+var_24], cl
.text:0040F8AD                 mul     esi
.text:0040F8AF                 cmp     edx, ebx
.text:0040F8B1                 ja      short loc_40F8C4
.text:0040F8B3                 cmp     edx, ebx
.text:0040F8B5                 jnz     loc_40F7F0
.text:0040F8BB                 cmp     eax, [ebp+var_24]
.text:0040F8BE                 jbe     loc_40F7F0
.text:0040F8C4
.text:0040F8C4 loc_40F8C4:                             ; CODE XREF: sub_40F7A0+111↑j
.text:0040F8C4                 dec     edi
.text:0040F8C5                 jmp     loc_40F7F0
.text:0040F8C5 ; ---------------------------------------------------------------------------
.text:0040F8CA                 align 10h
.text:0040F8D0
.text:0040F8D0 loc_40F8D0:                             ; CODE XREF: sub_40F7A0+34↑j
.text:0040F8D0                 not     [ebp+var_14]
.text:0040F8D3                 neg     eax
.text:0040F8D5                 adc     edx, 0
.text:0040F8D8                 neg     edx
.text:0040F8DA                 jmp     loc_40F7DA
.text:0040F8DA ; ---------------------------------------------------------------------------
.text:0040F8DF                 align 10h
.text:0040F8E0
.text:0040F8E0 loc_40F8E0:                             ; CODE XREF: sub_40F7A0+2C↑j
.text:0040F8E0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:0040F8E7                 neg     ecx
.text:0040F8E9                 adc     ebx, 0
.text:0040F8EC                 neg     ebx
.text:0040F8EE                 jmp     loc_40F7D2
.text:0040F8EE sub_40F7A0      endp
.text:0040F8EE
.text:0040F8EE ; ---------------------------------------------------------------------------
.text:0040F8F3                 align 10h
.text:0040F900
.text:0040F900 ; =============== S U B R O U T I N E =======================================
.text:0040F900
.text:0040F900 ; Attributes: bp-based frame
.text:0040F900
.text:0040F900 sub_40F900      proc near               ; CODE XREF: sub_406530+38↑p
.text:0040F900                                         ; sub_407FD0+585↑p ...
.text:0040F900
.text:0040F900 var_34          = dword ptr -34h
.text:0040F900 var_2C          = dword ptr -2Ch
.text:0040F900 var_28          = dword ptr -28h
.text:0040F900 var_24          = dword ptr -24h
.text:0040F900 var_20          = dword ptr -20h
.text:0040F900 var_1C          = dword ptr -1Ch
.text:0040F900 var_18          = dword ptr -18h
.text:0040F900 var_14          = dword ptr -14h
.text:0040F900 arg_0           = dword ptr  8
.text:0040F900 arg_4           = dword ptr  0Ch
.text:0040F900 arg_8           = dword ptr  10h
.text:0040F900 arg_C           = dword ptr  14h
.text:0040F900
.text:0040F900                 push    ebp
.text:0040F901                 mov     ebp, esp
.text:0040F903                 push    edi
.text:0040F904                 push    esi
.text:0040F905                 push    ebx
.text:0040F906                 sub     esp, 2Ch
.text:0040F909                 mov     edx, [ebp+arg_C]
.text:0040F90C                 mov     [ebp+var_20], 0
.text:0040F913                 mov     ecx, [ebp+arg_0]
.text:0040F916                 mov     ebx, [ebp+arg_4]
.text:0040F919                 mov     [ebp+var_1C], 0
.text:0040F920                 mov     eax, [ebp+arg_8]
.text:0040F923                 test    edx, edx
.text:0040F925                 mov     [ebp+var_24], edx
.text:0040F928                 mov     edi, ebx
.text:0040F92A                 mov     esi, eax
.text:0040F92C                 mov     [ebp+var_28], ecx
.text:0040F92F                 jnz     short loc_40F990
.text:0040F931                 cmp     eax, ebx
.text:0040F933                 jbe     short loc_40F970
.text:0040F935                 mov     eax, ecx
.text:0040F937                 mov     edx, ebx
.text:0040F939                 div     esi
.text:0040F93B
.text:0040F93B loc_40F93B:                             ; CODE XREF: sub_40F900+8B↓j
.text:0040F93B                 mov     [ebp+var_28], edx
.text:0040F93E                 lea     ecx, [ebp+var_18]
.text:0040F941                 test    ecx, ecx
.text:0040F943                 jz      short loc_40F95E
.text:0040F945                 mov     [ebp+var_1C], 0
.text:0040F94C
.text:0040F94C loc_40F94C:                             ; CODE XREF: sub_40F900+DA↓j
.text:0040F94C                 mov     eax, [ebp+var_28]
.text:0040F94F                 mov     [ebp+var_20], eax
.text:0040F952                 mov     edx, [ebp+var_20]
.text:0040F955                 mov     ecx, [ebp+var_1C]
.text:0040F958                 mov     [ebp+var_18], edx
.text:0040F95B                 mov     [ebp+var_14], ecx
.text:0040F95E
.text:0040F95E loc_40F95E:                             ; CODE XREF: sub_40F900+43↑j
.text:0040F95E                                         ; sub_40F900+A7↓j ...
.text:0040F95E                 mov     eax, [ebp+var_18]
.text:0040F961                 mov     edx, [ebp+var_14]
.text:0040F964                 add     esp, 2Ch
.text:0040F967                 pop     ebx
.text:0040F968                 pop     esi
.text:0040F969                 pop     edi
.text:0040F96A                 pop     ebp
.text:0040F96B                 retn
.text:0040F96B ; ---------------------------------------------------------------------------
.text:0040F96C                 align 10h
.text:0040F970
.text:0040F970 loc_40F970:                             ; CODE XREF: sub_40F900+33↑j
.text:0040F970                 test    eax, eax
.text:0040F972                 jnz     short loc_40F97F
.text:0040F974                 mov     eax, 1
.text:0040F979                 xor     edx, edx
.text:0040F97B                 div     esi
.text:0040F97D                 mov     esi, eax
.text:0040F97F
.text:0040F97F loc_40F97F:                             ; CODE XREF: sub_40F900+72↑j
.text:0040F97F                 mov     eax, edi
.text:0040F981                 mov     edx, [ebp+var_24]
.text:0040F984                 div     esi
.text:0040F986                 mov     eax, [ebp+var_28]
.text:0040F989                 div     esi
.text:0040F98B                 jmp     short loc_40F93B
.text:0040F98B ; ---------------------------------------------------------------------------
.text:0040F98D                 align 10h
.text:0040F990
.text:0040F990 loc_40F990:                             ; CODE XREF: sub_40F900+2F↑j
.text:0040F990                 cmp     [ebp+var_24], ebx
.text:0040F993                 jbe     short loc_40F9B0
.text:0040F995                 mov     [ebp+var_20], ecx
.text:0040F998
.text:0040F998 loc_40F998:                             ; CODE XREF: sub_40F900+15B↓j
.text:0040F998                 mov     [ebp+var_1C], edi
.text:0040F99B                 mov     eax, [ebp+var_20]
.text:0040F99E                 mov     edx, [ebp+var_1C]
.text:0040F9A1                 mov     [ebp+var_18], eax
.text:0040F9A4                 mov     [ebp+var_14], edx
.text:0040F9A7                 jmp     short loc_40F95E
.text:0040F9A7 ; ---------------------------------------------------------------------------
.text:0040F9A9                 align 10h
.text:0040F9B0
.text:0040F9B0 loc_40F9B0:                             ; CODE XREF: sub_40F900+93↑j
.text:0040F9B0                 bsr     eax, [ebp+var_24]
.text:0040F9B4                 mov     ebx, eax
.text:0040F9B6                 xor     ebx, 1Fh
.text:0040F9B9                 jnz     short loc_40F9E0
.text:0040F9BB                 cmp     edi, [ebp+var_24]
.text:0040F9BE                 ja      short loc_40F9C5
.text:0040F9C0                 cmp     [ebp+var_28], esi
.text:0040F9C3                 jb      short loc_40F9D0
.text:0040F9C5
.text:0040F9C5 loc_40F9C5:                             ; CODE XREF: sub_40F900+BE↑j
.text:0040F9C5                 mov     edx, [ebp+var_28]
.text:0040F9C8                 sub     edx, esi
.text:0040F9CA                 sbb     edi, [ebp+var_24]
.text:0040F9CD                 mov     [ebp+var_28], edx
.text:0040F9D0
.text:0040F9D0 loc_40F9D0:                             ; CODE XREF: sub_40F900+C3↑j
.text:0040F9D0                 lea     ecx, [ebp+var_18]
.text:0040F9D3                 test    ecx, ecx
.text:0040F9D5                 jz      short loc_40F95E
.text:0040F9D7                 mov     [ebp+var_1C], edi
.text:0040F9DA                 jmp     loc_40F94C
.text:0040F9DA ; ---------------------------------------------------------------------------
.text:0040F9DF                 align 10h
.text:0040F9E0
.text:0040F9E0 loc_40F9E0:                             ; CODE XREF: sub_40F900+B9↑j
.text:0040F9E0                 mov     edx, [ebp+var_24]
.text:0040F9E3                 mov     eax, 20h ; ' '
.text:0040F9E8                 mov     cl, bl
.text:0040F9EA                 sub     eax, ebx
.text:0040F9EC                 mov     [ebp+var_2C], eax
.text:0040F9EF                 shl     edx, cl
.text:0040F9F1                 mov     eax, esi
.text:0040F9F3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040F9F7                 shr     eax, cl
.text:0040F9F9                 mov     cl, bl
.text:0040F9FB                 shl     esi, cl
.text:0040F9FD                 or      edx, eax
.text:0040F9FF                 mov     eax, [ebp+var_28]
.text:0040FA02                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040FA06                 mov     [ebp+var_24], edx
.text:0040FA09                 mov     edx, edi
.text:0040FA0B                 shr     edx, cl
.text:0040FA0D                 mov     cl, bl
.text:0040FA0F                 shl     edi, cl
.text:0040FA11                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040FA15                 shr     eax, cl
.text:0040FA17                 or      edi, eax
.text:0040FA19                 mov     eax, edi
.text:0040FA1B                 mov     cl, bl
.text:0040FA1D                 div     [ebp+var_24]
.text:0040FA20                 shl     [ebp+var_28], cl
.text:0040FA23                 mov     edi, edx
.text:0040FA25                 mul     esi
.text:0040FA27                 mov     [ebp+var_34], eax
.text:0040FA2A                 cmp     edx, edi
.text:0040FA2C                 ja      short loc_40FA68
.text:0040FA2E                 cmp     edx, edi
.text:0040FA30                 jz      short loc_40FA60
.text:0040FA32
.text:0040FA32 loc_40FA32:                             ; CODE XREF: sub_40F900+166↓j
.text:0040FA32                                         ; sub_40F900+173↓j
.text:0040FA32                 lea     eax, [ebp+var_18]
.text:0040FA35                 test    eax, eax
.text:0040FA37                 jz      loc_40F95E
.text:0040FA3D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040FA41                 mov     eax, [ebp+var_28]
.text:0040FA44                 sub     eax, [ebp+var_34]
.text:0040FA47                 sbb     edi, edx
.text:0040FA49                 mov     [ebp+var_28], eax
.text:0040FA4C                 mov     edx, edi
.text:0040FA4E                 shl     edx, cl
.text:0040FA50                 mov     cl, bl
.text:0040FA52                 shr     eax, cl
.text:0040FA54                 or      edx, eax
.text:0040FA56                 mov     [ebp+var_20], edx
.text:0040FA59                 shr     edi, cl
.text:0040FA5B                 jmp     loc_40F998
.text:0040FA60 ; ---------------------------------------------------------------------------
.text:0040FA60
.text:0040FA60 loc_40FA60:                             ; CODE XREF: sub_40F900+130↑j
.text:0040FA60                 mov     eax, [ebp+var_28]
.text:0040FA63                 cmp     [ebp+var_34], eax
.text:0040FA66                 jbe     short loc_40FA32
.text:0040FA68
.text:0040FA68 loc_40FA68:                             ; CODE XREF: sub_40F900+12C↑j
.text:0040FA68                 mov     ecx, [ebp+var_34]
.text:0040FA6B                 sub     ecx, esi
.text:0040FA6D                 sbb     edx, [ebp+var_24]
.text:0040FA70                 mov     [ebp+var_34], ecx
.text:0040FA73                 jmp     short loc_40FA32
.text:0040FA73 sub_40F900      endp
.text:0040FA73
.text:0040FA73 ; ---------------------------------------------------------------------------
.text:0040FA75                 align 10h
.text:0040FA80
.text:0040FA80 ; =============== S U B R O U T I N E =======================================
.text:0040FA80
.text:0040FA80 ; Attributes: thunk
.text:0040FA80
.text:0040FA80 ; int __cdecl close(int FileHandle)
.text:0040FA80 _close          proc near               ; CODE XREF: sub_401A30+714↑p
.text:0040FA80                                         ; sub_401A30+743↑p
.text:0040FA80
.text:0040FA80 FileHandle      = dword ptr  4
.text:0040FA80
.text:0040FA80                 jmp     ds:__imp__close
.text:0040FA80 _close          endp
.text:0040FA80
.text:0040FA80 ; ---------------------------------------------------------------------------
.text:0040FA86                 align 10h
.text:0040FA90
.text:0040FA90 ; =============== S U B R O U T I N E =======================================
.text:0040FA90
.text:0040FA90 ; Attributes: thunk
.text:0040FA90
.text:0040FA90 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040FA90 _open           proc near               ; CODE XREF: sub_401A30+8BF↑p
.text:0040FA90
.text:0040FA90 FileName        = dword ptr  4
.text:0040FA90 OpenFlag        = dword ptr  8
.text:0040FA90
.text:0040FA90                 jmp     ds:__imp__open
.text:0040FA90 _open           endp
.text:0040FA90
.text:0040FA90 ; ---------------------------------------------------------------------------
.text:0040FA96                 align 10h
.text:0040FAA0
.text:0040FAA0 ; =============== S U B R O U T I N E =======================================
.text:0040FAA0
.text:0040FAA0 ; Attributes: thunk
.text:0040FAA0
.text:0040FAA0 ; int __cdecl isatty(int FileHandle)
.text:0040FAA0 _isatty         proc near               ; CODE XREF: sub_401A30+60F↑p
.text:0040FAA0                                         ; sub_401A30+80F↑p ...
.text:0040FAA0
.text:0040FAA0 FileHandle      = dword ptr  4
.text:0040FAA0
.text:0040FAA0                 jmp     ds:__imp__isatty
.text:0040FAA0 _isatty         endp
.text:0040FAA0
.text:0040FAA0 ; ---------------------------------------------------------------------------
.text:0040FAA6                 align 10h
.text:0040FAB0
.text:0040FAB0 ; =============== S U B R O U T I N E =======================================
.text:0040FAB0
.text:0040FAB0 ; Attributes: thunk
.text:0040FAB0
.text:0040FAB0 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0040FAB0 _read           proc near               ; CODE XREF: sub_4065A0+2B↑p
.text:0040FAB0
.text:0040FAB0 FileHandle      = dword ptr  4
.text:0040FAB0 DstBuf          = dword ptr  8
.text:0040FAB0 MaxCharCount    = dword ptr  0Ch
.text:0040FAB0
.text:0040FAB0                 jmp     ds:__imp__read
.text:0040FAB0 _read           endp
.text:0040FAB0
.text:0040FAB0 ; ---------------------------------------------------------------------------
.text:0040FAB6                 align 10h
.text:0040FAC0
.text:0040FAC0 ; =============== S U B R O U T I N E =======================================
.text:0040FAC0
.text:0040FAC0 ; Attributes: thunk
.text:0040FAC0
.text:0040FAC0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040FAC0 _stricmp        proc near               ; CODE XREF: sub_408880+46F↑p
.text:0040FAC0                                         ; sub_40A800+2E↑p ...
.text:0040FAC0
.text:0040FAC0 String1         = dword ptr  4
.text:0040FAC0 String2         = dword ptr  8
.text:0040FAC0
.text:0040FAC0                 jmp     ds:__imp__stricmp
.text:0040FAC0 _stricmp        endp
.text:0040FAC0
.text:0040FAC0 ; ---------------------------------------------------------------------------
.text:0040FAC6                 align 10h
.text:0040FAD0
.text:0040FAD0 ; =============== S U B R O U T I N E =======================================
.text:0040FAD0
.text:0040FAD0 ; Attributes: thunk
.text:0040FAD0
.text:0040FAD0 ; char *__cdecl strdup(const char *String)
.text:0040FAD0 _strdup         proc near               ; CODE XREF: sub_40A430+101↑p
.text:0040FAD0                                         ; .text:0040A69A↑p ...
.text:0040FAD0
.text:0040FAD0 String          = dword ptr  4
.text:0040FAD0
.text:0040FAD0                 jmp     ds:__imp__strdup
.text:0040FAD0 _strdup         endp
.text:0040FAD0
.text:0040FAD0 ; ---------------------------------------------------------------------------
.text:0040FAD6                 align 10h
.text:0040FAE0
.text:0040FAE0 ; =============== S U B R O U T I N E =======================================
.text:0040FAE0
.text:0040FAE0 ; Attributes: thunk
.text:0040FAE0
.text:0040FAE0 ; int __cdecl getpid()
.text:0040FAE0 _getpid         proc near               ; CODE XREF: sub_40D480+84↑p
.text:0040FAE0                 jmp     ds:__imp__getpid
.text:0040FAE0 _getpid         endp
.text:0040FAE0
.text:0040FAE0 ; ---------------------------------------------------------------------------
.text:0040FAE6                 align 10h
.text:0040FAF0
.text:0040FAF0 ; =============== S U B R O U T I N E =======================================
.text:0040FAF0
.text:0040FAF0 ; Attributes: thunk
.text:0040FAF0
.text:0040FAF0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040FAF0 _chmod          proc near               ; CODE XREF: sub_40D8B0+41↑j
.text:0040FAF0
.text:0040FAF0 FileName        = dword ptr  4
.text:0040FAF0 AccessMode      = dword ptr  8
.text:0040FAF0
.text:0040FAF0                 jmp     ds:__imp__chmod
.text:0040FAF0 _chmod          endp
.text:0040FAF0
.text:0040FAF0 ; ---------------------------------------------------------------------------
.text:0040FAF6                 align 10h
.text:0040FB00
.text:0040FB00 ; =============== S U B R O U T I N E =======================================
.text:0040FB00
.text:0040FB00 ; Attributes: info_from_lumina
.text:0040FB00
.text:0040FB00 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:0040FB00 _strtoull       proc near               ; CODE XREF: sub_4054B0+AD↑p
.text:0040FB00
.text:0040FB00 C               = dword ptr -3Ch
.text:0040FB00 Type            = dword ptr -38h
.text:0040FB00 var_34          = dword ptr -34h
.text:0040FB00 var_30          = dword ptr -30h
.text:0040FB00 var_2C          = dword ptr -2Ch
.text:0040FB00 var_28          = dword ptr -28h
.text:0040FB00 var_24          = dword ptr -24h
.text:0040FB00 var_20          = dword ptr -20h
.text:0040FB00 var_1C          = dword ptr -1Ch
.text:0040FB00 var_18          = dword ptr -18h
.text:0040FB00 String          = dword ptr  4
.text:0040FB00 EndPtr          = dword ptr  8
.text:0040FB00 Radix           = dword ptr  0Ch
.text:0040FB00
.text:0040FB00                 push    ebp
.text:0040FB01                 push    edi
.text:0040FB02                 push    esi
.text:0040FB03                 push    ebx
.text:0040FB04                 sub     esp, 2Ch
.text:0040FB07                 mov     edx, [esp+3Ch+EndPtr]
.text:0040FB0B                 test    edx, edx
.text:0040FB0D                 jz      short loc_40FB19
.text:0040FB0F                 mov     eax, [esp+3Ch+String]
.text:0040FB13                 mov     ecx, [esp+3Ch+EndPtr]
.text:0040FB17                 mov     [ecx], eax
.text:0040FB19
.text:0040FB19 loc_40FB19:                             ; CODE XREF: _strtoull+D↑j
.text:0040FB19                 mov     edx, [esp+3Ch+Radix]
.text:0040FB1D                 test    edx, edx
.text:0040FB1F                 js      short loc_40FB2F
.text:0040FB21                 cmp     [esp+3Ch+Radix], 1
.text:0040FB26                 jz      short loc_40FB2F
.text:0040FB28                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:0040FB2D                 jle     short loc_40FB46
.text:0040FB2F
.text:0040FB2F loc_40FB2F:                             ; CODE XREF: _strtoull+1F↑j
.text:0040FB2F                                         ; _strtoull+26↑j
.text:0040FB2F                 call    _errno
.text:0040FB34                 mov     dword ptr [eax], 21h ; '!'
.text:0040FB3A
.text:0040FB3A loc_40FB3A:                             ; CODE XREF: _strtoull+FF↓j
.text:0040FB3A                                         ; _strtoull+109↓j
.text:0040FB3A                 xor     eax, eax
.text:0040FB3C                 xor     edx, edx
.text:0040FB3E
.text:0040FB3E loc_40FB3E:                             ; CODE XREF: _strtoull+244↓j
.text:0040FB3E                                         ; _strtoull+251↓j ...
.text:0040FB3E                 add     esp, 2Ch
.text:0040FB41                 pop     ebx
.text:0040FB42                 pop     esi
.text:0040FB43                 pop     edi
.text:0040FB44                 pop     ebp
.text:0040FB45                 retn
.text:0040FB46 ; ---------------------------------------------------------------------------
.text:0040FB46
.text:0040FB46 loc_40FB46:                             ; CODE XREF: _strtoull+2D↑j
.text:0040FB46                 mov     ecx, ds:__mb_cur_max
.text:0040FB4C                 lea     esi, [esi+0]
.text:0040FB50
.text:0040FB50 loc_40FB50:                             ; CODE XREF: _strtoull+7E↓j
.text:0040FB50                 cmp     dword ptr [ecx], 1
.text:0040FB53                 mov     esi, [esp+3Ch+String]
.text:0040FB57                 movsx   edx, byte ptr [esi]
.text:0040FB5A                 jz      loc_40FF32
.text:0040FB60                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040FB68                 mov     [esp+3Ch+C], edx ; C
.text:0040FB6B                 call    _isctype
.text:0040FB70                 mov     ecx, ds:__mb_cur_max
.text:0040FB76
.text:0040FB76 loc_40FB76:                             ; CODE XREF: _strtoull+445↓j
.text:0040FB76                 test    eax, eax
.text:0040FB78                 jz      short loc_40FB80
.text:0040FB7A                 inc     [esp+3Ch+String]
.text:0040FB7E                 jmp     short loc_40FB50
.text:0040FB80 ; ---------------------------------------------------------------------------
.text:0040FB80
.text:0040FB80 loc_40FB80:                             ; CODE XREF: _strtoull+78↑j
.text:0040FB80                 mov     esi, [esp+3Ch+String]
.text:0040FB84                 xor     ebx, ebx
.text:0040FB86                 movzx   edx, byte ptr [esi]
.text:0040FB89                 cmp     dl, 2Dh ; '-'
.text:0040FB8C                 setz    bl
.text:0040FB8F                 test    ebx, ebx
.text:0040FB91                 mov     [esp+3Ch+var_20], ebx
.text:0040FB95                 jnz     loc_40FF22
.text:0040FB9B                 cmp     dl, 2Bh ; '+'
.text:0040FB9E                 jz      loc_40FF22
.text:0040FBA4
.text:0040FBA4 loc_40FBA4:                             ; CODE XREF: _strtoull+42D↓j
.text:0040FBA4                 mov     ebp, [esp+3Ch+Radix]
.text:0040FBA8                 test    ebp, ebp
.text:0040FBAA                 jnz     short loc_40FBBD
.text:0040FBAC                 cmp     dl, 30h ; '0'
.text:0040FBAF                 jz      loc_40FEF9
.text:0040FBB5                 mov     [esp+3Ch+Radix], 0Ah
.text:0040FBBD
.text:0040FBBD loc_40FBBD:                             ; CODE XREF: _strtoull+AA↑j
.text:0040FBBD                                         ; _strtoull+40F↓j ...
.text:0040FBBD                 cmp     [esp+3Ch+Radix], 10h
.text:0040FBC2                 jz      loc_40FECB
.text:0040FBC8
.text:0040FBC8 loc_40FBC8:                             ; CODE XREF: _strtoull+3CE↓j
.text:0040FBC8                                         ; _strtoull+3E2↓j ...
.text:0040FBC8                 cmp     dword ptr [ecx], 1
.text:0040FBCB                 movsx   ebx, dl
.text:0040FBCE                 jz      loc_40FEB3
.text:0040FBD4                 mov     [esp+3Ch+Type], 4 ; Type
.text:0040FBDC                 mov     [esp+3Ch+C], ebx ; C
.text:0040FBDF                 call    _isctype
.text:0040FBE4                 mov     esi, [esp+3Ch+String]
.text:0040FBE8                 movzx   edx, byte ptr [esi]
.text:0040FBEB
.text:0040FBEB loc_40FBEB:                             ; CODE XREF: _strtoull+3C6↓j
.text:0040FBEB                 test    eax, eax
.text:0040FBED                 jz      loc_40FE1C
.text:0040FBF3                 movsx   eax, dl
.text:0040FBF6                 sub     eax, 30h ; '0'
.text:0040FBF9
.text:0040FBF9 loc_40FBF9:                             ; CODE XREF: _strtoull+34B↓j
.text:0040FBF9                                         ; _strtoull+37C↓j ...
.text:0040FBF9                 inc     [esp+3Ch+String]
.text:0040FBFD                 test    eax, eax
.text:0040FBFF                 js      loc_40FB3A
.text:0040FC05                 cmp     eax, [esp+3Ch+Radix]
.text:0040FC09                 jge     loc_40FB3A
.text:0040FC0F                 mov     [esp+3Ch+var_1C], eax
.text:0040FC13                 mov     edx, eax
.text:0040FC15                 sar     edx, 1Fh
.text:0040FC18                 mov     [esp+3Ch+var_18], edx
.text:0040FC1C                 mov     [esp+3Ch+var_24], 0
.text:0040FC24                 lea     esi, [esi+0]
.text:0040FC2A                 lea     edi, [edi+0]
.text:0040FC30
.text:0040FC30 loc_40FC30:                             ; CODE XREF: _strtoull+20C↓j
.text:0040FC30                 mov     ebp, [esp+3Ch+String]
.text:0040FC34                 mov     ebx, ds:__mb_cur_max
.text:0040FC3A                 movzx   edx, byte ptr [ebp+0]
.text:0040FC3E                 cmp     dword ptr [ebx], 1
.text:0040FC41                 movsx   ecx, dl
.text:0040FC44                 jz      loc_40FE05
.text:0040FC4A                 mov     [esp+3Ch+C], ecx ; C
.text:0040FC4D                 mov     [esp+3Ch+Type], 4 ; Type
.text:0040FC55                 call    _isctype
.text:0040FC5A                 mov     ecx, [esp+3Ch+String]
.text:0040FC5E                 movzx   edx, byte ptr [ecx]
.text:0040FC61
.text:0040FC61 loc_40FC61:                             ; CODE XREF: _strtoull+317↓j
.text:0040FC61                 test    eax, eax
.text:0040FC63                 jz      loc_40FD70
.text:0040FC69                 movsx   edi, dl
.text:0040FC6C                 lea     ebp, [edi-30h]
.text:0040FC6F
.text:0040FC6F loc_40FC6F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0040FC6F                 test    ebp, ebp
.text:0040FC71                 js      loc_40FD1B
.text:0040FC77                 cmp     ebp, [esp+3Ch+Radix]
.text:0040FC7B                 jge     loc_40FD1B
.text:0040FC81                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:0040FC88                 mov     eax, [esp+3Ch+Radix]
.text:0040FC8C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:0040FC94                 cdq
.text:0040FC95                 mov     esi, eax
.text:0040FC97                 mov     [esp+3Ch+var_34], eax
.text:0040FC9B                 mov     edi, edx
.text:0040FC9D                 mov     [esp+3Ch+var_30], edx
.text:0040FCA1                 call    sub_40F4C0
.text:0040FCA6                 add     eax, 1
.text:0040FCA9                 adc     edx, 0
.text:0040FCAC                 cmp     [esp+3Ch+var_18], edx
.text:0040FCB0                 ja      short loc_40FD00
.text:0040FCB2                 jb      short loc_40FCBA
.text:0040FCB4                 cmp     [esp+3Ch+var_1C], eax
.text:0040FCB8                 ja      short loc_40FD00
.text:0040FCBA
.text:0040FCBA loc_40FCBA:                             ; CODE XREF: _strtoull+1B2↑j
.text:0040FCBA                 mov     eax, [esp+3Ch+var_1C]
.text:0040FCBE                 mov     ebx, ebp
.text:0040FCC0                 mul     esi
.text:0040FCC2                 mov     ecx, edx
.text:0040FCC4                 mov     [esp+3Ch+var_2C], eax
.text:0040FCC8                 mov     eax, [esp+3Ch+var_18]
.text:0040FCCC                 mov     [esp+3Ch+var_28], edx
.text:0040FCD0                 imul    eax, esi
.text:0040FCD3                 mov     esi, [esp+3Ch+var_1C]
.text:0040FCD7                 imul    esi, edi
.text:0040FCDA                 add     ecx, eax
.text:0040FCDC                 lea     edi, [esi+ecx]
.text:0040FCDF                 mov     esi, ebp
.text:0040FCE1                 sar     esi, 1Fh
.text:0040FCE4                 add     ebx, [esp+3Ch+var_2C]
.text:0040FCE8                 mov     [esp+3Ch+var_28], edi
.text:0040FCEC                 adc     esi, [esp+3Ch+var_28]
.text:0040FCF0                 cmp     esi, [esp+3Ch+var_18]
.text:0040FCF4                 jb      short loc_40FD00
.text:0040FCF6                 ja      short loc_40FD11
.text:0040FCF8                 cmp     ebx, [esp+3Ch+var_1C]
.text:0040FCFC                 jnb     short loc_40FD11
.text:0040FCFE                 mov     esi, esi
.text:0040FD00
.text:0040FD00 loc_40FD00:                             ; CODE XREF: _strtoull+1B0↑j
.text:0040FD00                                         ; _strtoull+1B8↑j ...
.text:0040FD00                 mov     [esp+3Ch+var_24], 1
.text:0040FD08
.text:0040FD08 loc_40FD08:                             ; CODE XREF: _strtoull+219↓j
.text:0040FD08                 inc     [esp+3Ch+String]
.text:0040FD0C                 jmp     loc_40FC30
.text:0040FD11 ; ---------------------------------------------------------------------------
.text:0040FD11
.text:0040FD11 loc_40FD11:                             ; CODE XREF: _strtoull+1F6↑j
.text:0040FD11                                         ; _strtoull+1FC↑j
.text:0040FD11                 mov     [esp+3Ch+var_1C], ebx
.text:0040FD15                 mov     [esp+3Ch+var_18], esi
.text:0040FD19                 jmp     short loc_40FD08
.text:0040FD1B ; ---------------------------------------------------------------------------
.text:0040FD1B
.text:0040FD1B loc_40FD1B:                             ; CODE XREF: _strtoull+171↑j
.text:0040FD1B                                         ; _strtoull+17B↑j
.text:0040FD1B                 mov     eax, [esp+3Ch+EndPtr]
.text:0040FD1F                 test    eax, eax
.text:0040FD21                 jz      short loc_40FD2E
.text:0040FD23                 mov     ecx, [esp+3Ch+String]
.text:0040FD27                 mov     ebp, [esp+3Ch+EndPtr]
.text:0040FD2B                 mov     [ebp+0], ecx
.text:0040FD2E
.text:0040FD2E loc_40FD2E:                             ; CODE XREF: _strtoull+221↑j
.text:0040FD2E                 mov     esi, [esp+3Ch+var_24]
.text:0040FD32                 test    esi, esi
.text:0040FD34                 jnz     short loc_40FD56
.text:0040FD36                 mov     ebx, [esp+3Ch+var_20]
.text:0040FD3A                 mov     eax, [esp+3Ch+var_1C]
.text:0040FD3E                 mov     edx, [esp+3Ch+var_18]
.text:0040FD42                 test    ebx, ebx
.text:0040FD44                 jz      loc_40FB3E
.text:0040FD4A                 neg     eax
.text:0040FD4C                 adc     edx, 0
.text:0040FD4F                 neg     edx
.text:0040FD51                 jmp     loc_40FB3E
.text:0040FD56 ; ---------------------------------------------------------------------------
.text:0040FD56
.text:0040FD56 loc_40FD56:                             ; CODE XREF: _strtoull+234↑j
.text:0040FD56                 call    _errno
.text:0040FD5B                 mov     edx, 0FFFFFFFFh
.text:0040FD60                 mov     dword ptr [eax], 22h ; '"'
.text:0040FD66                 mov     eax, 0FFFFFFFFh
.text:0040FD6B                 jmp     loc_40FB3E
.text:0040FD70 ; ---------------------------------------------------------------------------
.text:0040FD70
.text:0040FD70 loc_40FD70:                             ; CODE XREF: _strtoull+163↑j
.text:0040FD70                 mov     ebp, ds:__mb_cur_max
.text:0040FD76                 movsx   ecx, dl
.text:0040FD79                 cmp     dword ptr [ebp+0], 1
.text:0040FD7D                 jz      short loc_40FDF1
.text:0040FD7F                 mov     [esp+3Ch+Type], 1 ; Type
.text:0040FD87                 mov     [esp+3Ch+C], ecx ; C
.text:0040FD8A                 call    _isctype
.text:0040FD8F                 mov     ebp, [esp+3Ch+String]
.text:0040FD93                 movzx   edx, byte ptr [ebp+0]
.text:0040FD97
.text:0040FD97 loc_40FD97:                             ; CODE XREF: _strtoull+303↓j
.text:0040FD97                 test    eax, eax
.text:0040FD99                 jz      short loc_40FDA8
.text:0040FD9B                 movsx   eax, dl
.text:0040FD9E                 sub     eax, 37h ; '7'
.text:0040FDA1
.text:0040FDA1 loc_40FDA1:                             ; CODE XREF: _strtoull+2D4↓j
.text:0040FDA1                                         ; _strtoull+2DB↓j
.text:0040FDA1                 mov     ebp, eax
.text:0040FDA3                 jmp     loc_40FC6F
.text:0040FDA8 ; ---------------------------------------------------------------------------
.text:0040FDA8
.text:0040FDA8 loc_40FDA8:                             ; CODE XREF: _strtoull+299↑j
.text:0040FDA8                 mov     ecx, ds:__mb_cur_max
.text:0040FDAE                 movsx   edx, dl
.text:0040FDB1                 cmp     dword ptr [ecx], 1
.text:0040FDB4                 jz      short loc_40FDDD
.text:0040FDB6                 mov     [esp+3Ch+Type], 2 ; Type
.text:0040FDBE                 mov     [esp+3Ch+C], edx ; C
.text:0040FDC1                 call    _isctype
.text:0040FDC6
.text:0040FDC6 loc_40FDC6:                             ; CODE XREF: _strtoull+2EF↓j
.text:0040FDC6                 test    eax, eax
.text:0040FDC8                 jz      short loc_40FDD6
.text:0040FDCA                 mov     edx, [esp+3Ch+String]
.text:0040FDCE                 movsx   eax, byte ptr [edx]
.text:0040FDD1                 sub     eax, 57h ; 'W'
.text:0040FDD4                 jmp     short loc_40FDA1
.text:0040FDD6 ; ---------------------------------------------------------------------------
.text:0040FDD6
.text:0040FDD6 loc_40FDD6:                             ; CODE XREF: _strtoull+2C8↑j
.text:0040FDD6                 mov     eax, 0FFFFFFFFh
.text:0040FDDB                 jmp     short loc_40FDA1
.text:0040FDDD ; ---------------------------------------------------------------------------
.text:0040FDDD
.text:0040FDDD loc_40FDDD:                             ; CODE XREF: _strtoull+2B4↑j
.text:0040FDDD                 mov     edi, ds:_pctype
.text:0040FDE3                 mov     ebx, [edi]
.text:0040FDE5                 movzx   esi, word ptr [ebx+edx*2]
.text:0040FDE9                 and     esi, 2
.text:0040FDEC                 movzx   eax, si
.text:0040FDEF                 jmp     short loc_40FDC6
.text:0040FDF1 ; ---------------------------------------------------------------------------
.text:0040FDF1
.text:0040FDF1 loc_40FDF1:                             ; CODE XREF: _strtoull+27D↑j
.text:0040FDF1                 mov     edi, ds:_pctype
.text:0040FDF7                 mov     ebx, [edi]
.text:0040FDF9                 movzx   esi, word ptr [ebx+ecx*2]
.text:0040FDFD                 and     esi, 1
.text:0040FE00                 movzx   eax, si
.text:0040FE03                 jmp     short loc_40FD97
.text:0040FE05 ; ---------------------------------------------------------------------------
.text:0040FE05
.text:0040FE05 loc_40FE05:                             ; CODE XREF: _strtoull+144↑j
.text:0040FE05                 mov     ebx, ds:_pctype
.text:0040FE0B                 mov     esi, [ebx]
.text:0040FE0D                 movzx   edi, word ptr [esi+ecx*2]
.text:0040FE11                 and     edi, 4
.text:0040FE14                 movzx   eax, di
.text:0040FE17                 jmp     loc_40FC61
.text:0040FE1C ; ---------------------------------------------------------------------------
.text:0040FE1C
.text:0040FE1C loc_40FE1C:                             ; CODE XREF: _strtoull+ED↑j
.text:0040FE1C                 mov     ebx, ds:__mb_cur_max
.text:0040FE22                 movsx   ecx, dl
.text:0040FE25                 cmp     dword ptr [ebx], 1
.text:0040FE28                 jz      short loc_40FE9F
.text:0040FE2A                 mov     [esp+3Ch+C], ecx ; C
.text:0040FE2D                 mov     [esp+3Ch+Type], 1 ; Type
.text:0040FE35                 call    _isctype
.text:0040FE3A                 mov     ecx, [esp+3Ch+String]
.text:0040FE3E                 movzx   edx, byte ptr [ecx]
.text:0040FE41
.text:0040FE41 loc_40FE41:                             ; CODE XREF: _strtoull+3B1↓j
.text:0040FE41                 test    eax, eax
.text:0040FE43                 jz      short loc_40FE50
.text:0040FE45                 movsx   eax, dl
.text:0040FE48                 sub     eax, 37h ; '7'
.text:0040FE4B                 jmp     loc_40FBF9
.text:0040FE50 ; ---------------------------------------------------------------------------
.text:0040FE50
.text:0040FE50 loc_40FE50:                             ; CODE XREF: _strtoull+343↑j
.text:0040FE50                 mov     ebx, ds:__mb_cur_max
.text:0040FE56                 movsx   edx, dl
.text:0040FE59                 cmp     dword ptr [ebx], 1
.text:0040FE5C                 jz      short loc_40FE8B
.text:0040FE5E                 mov     [esp+3Ch+Type], 2 ; Type
.text:0040FE66                 mov     [esp+3Ch+C], edx ; C
.text:0040FE69                 call    _isctype
.text:0040FE6E
.text:0040FE6E loc_40FE6E:                             ; CODE XREF: _strtoull+39D↓j
.text:0040FE6E                 test    eax, eax
.text:0040FE70                 jz      short loc_40FE81
.text:0040FE72                 mov     ecx, [esp+3Ch+String]
.text:0040FE76                 movsx   eax, byte ptr [ecx]
.text:0040FE79                 sub     eax, 57h ; 'W'
.text:0040FE7C                 jmp     loc_40FBF9
.text:0040FE81 ; ---------------------------------------------------------------------------
.text:0040FE81
.text:0040FE81 loc_40FE81:                             ; CODE XREF: _strtoull+370↑j
.text:0040FE81                 mov     eax, 0FFFFFFFFh
.text:0040FE86                 jmp     loc_40FBF9
.text:0040FE8B ; ---------------------------------------------------------------------------
.text:0040FE8B
.text:0040FE8B loc_40FE8B:                             ; CODE XREF: _strtoull+35C↑j
.text:0040FE8B                 mov     esi, ds:_pctype
.text:0040FE91                 mov     edi, [esi]
.text:0040FE93                 movzx   ebp, word ptr [edi+edx*2]
.text:0040FE97                 and     ebp, 2
.text:0040FE9A                 movzx   eax, bp
.text:0040FE9D                 jmp     short loc_40FE6E
.text:0040FE9F ; ---------------------------------------------------------------------------
.text:0040FE9F
.text:0040FE9F loc_40FE9F:                             ; CODE XREF: _strtoull+328↑j
.text:0040FE9F                 mov     esi, ds:_pctype
.text:0040FEA5                 mov     edi, [esi]
.text:0040FEA7                 movzx   ebp, word ptr [edi+ecx*2]
.text:0040FEAB                 and     ebp, 1
.text:0040FEAE                 movzx   eax, bp
.text:0040FEB1                 jmp     short loc_40FE41
.text:0040FEB3 ; ---------------------------------------------------------------------------
.text:0040FEB3
.text:0040FEB3 loc_40FEB3:                             ; CODE XREF: _strtoull+CE↑j
.text:0040FEB3                 mov     edi, ds:_pctype
.text:0040FEB9                 mov     ebp, [edi]
.text:0040FEBB                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:0040FEC0                 and     ecx, 4
.text:0040FEC3                 movzx   eax, cx
.text:0040FEC6                 jmp     loc_40FBEB
.text:0040FECB ; ---------------------------------------------------------------------------
.text:0040FECB
.text:0040FECB loc_40FECB:                             ; CODE XREF: _strtoull+C2↑j
.text:0040FECB                 cmp     dl, 30h ; '0'
.text:0040FECE                 jnz     loc_40FBC8
.text:0040FED4                 mov     esi, [esp+3Ch+String]
.text:0040FED8                 movzx   eax, byte ptr [esi+1]
.text:0040FEDC                 cmp     al, 58h ; 'X'
.text:0040FEDE                 jz      short loc_40FEE8
.text:0040FEE0                 cmp     al, 78h ; 'x'
.text:0040FEE2                 jnz     loc_40FBC8
.text:0040FEE8
.text:0040FEE8 loc_40FEE8:                             ; CODE XREF: _strtoull+3DE↑j
.text:0040FEE8                 add     [esp+3Ch+String], 2
.text:0040FEED                 mov     ebx, [esp+3Ch+String]
.text:0040FEF1                 movzx   edx, byte ptr [ebx]
.text:0040FEF4                 jmp     loc_40FBC8
.text:0040FEF9 ; ---------------------------------------------------------------------------
.text:0040FEF9
.text:0040FEF9 loc_40FEF9:                             ; CODE XREF: _strtoull+AF↑j
.text:0040FEF9                 mov     edi, [esp+3Ch+String]
.text:0040FEFD                 movzx   eax, byte ptr [edi+1]
.text:0040FF01                 cmp     al, 58h ; 'X'
.text:0040FF03                 jz      short loc_40FF15
.text:0040FF05                 mov     [esp+3Ch+Radix], 8
.text:0040FF0D                 cmp     al, 78h ; 'x'
.text:0040FF0F                 jnz     loc_40FBBD
.text:0040FF15
.text:0040FF15 loc_40FF15:                             ; CODE XREF: _strtoull+403↑j
.text:0040FF15                 mov     [esp+3Ch+Radix], 10h
.text:0040FF1D                 jmp     loc_40FBBD
.text:0040FF22 ; ---------------------------------------------------------------------------
.text:0040FF22
.text:0040FF22 loc_40FF22:                             ; CODE XREF: _strtoull+95↑j
.text:0040FF22                                         ; _strtoull+9E↑j
.text:0040FF22                 inc     [esp+3Ch+String]
.text:0040FF26                 mov     eax, [esp+3Ch+String]
.text:0040FF2A                 movzx   edx, byte ptr [eax]
.text:0040FF2D                 jmp     loc_40FBA4
.text:0040FF32 ; ---------------------------------------------------------------------------
.text:0040FF32
.text:0040FF32 loc_40FF32:                             ; CODE XREF: _strtoull+5A↑j
.text:0040FF32                 mov     ebp, ds:_pctype
.text:0040FF38                 mov     edi, [ebp+0]
.text:0040FF3B                 movzx   ebx, word ptr [edi+edx*2]
.text:0040FF3F                 and     ebx, 8
.text:0040FF42                 movzx   eax, bx
.text:0040FF45                 jmp     loc_40FB76
.text:0040FF45 _strtoull       endp
.text:0040FF45
.text:0040FF45 ; ---------------------------------------------------------------------------
.text:0040FF4A                 align 10h
.text:0040FF50                 jmp     ds:__set_app_type
.text:0040FF50 ; ---------------------------------------------------------------------------
.text:0040FF56                 align 10h
.text:0040FF60
.text:0040FF60 ; =============== S U B R O U T I N E =======================================
.text:0040FF60
.text:0040FF60 ; Attributes: thunk
.text:0040FF60
.text:0040FF60 ; void __cdecl cexit()
.text:0040FF60 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:0040FF60                 jmp     ds:__imp__cexit
.text:0040FF60 _cexit          endp
.text:0040FF60
.text:0040FF60 ; ---------------------------------------------------------------------------
.text:0040FF66                 align 10h
.text:0040FF70
.text:0040FF70 ; =============== S U B R O U T I N E =======================================
.text:0040FF70
.text:0040FF70 ; Attributes: thunk
.text:0040FF70
.text:0040FF70 ; char ***__cdecl _p__environ()
.text:0040FF70 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040FF70                 jmp     ds:__imp___p__environ
.text:0040FF70 __p__environ    endp
.text:0040FF70
.text:0040FF70 ; ---------------------------------------------------------------------------
.text:0040FF76                 align 10h
.text:0040FF80
.text:0040FF80 ; =============== S U B R O U T I N E =======================================
.text:0040FF80
.text:0040FF80 ; Attributes: thunk
.text:0040FF80
.text:0040FF80 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040FF80 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040FF80                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040FF80
.text:0040FF80 Signal          = dword ptr  4
.text:0040FF80 Function        = dword ptr  8
.text:0040FF80
.text:0040FF80                 jmp     ds:__imp_signal
.text:0040FF80 signal          endp
.text:0040FF80
.text:0040FF80 ; ---------------------------------------------------------------------------
.text:0040FF86                 align 10h
.text:0040FF90
.text:0040FF90 ; =============== S U B R O U T I N E =======================================
.text:0040FF90
.text:0040FF90 ; Attributes: thunk
.text:0040FF90
.text:0040FF90 ; int *__cdecl _p__fmode()
.text:0040FF90 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040FF90                 jmp     ds:__imp___p__fmode
.text:0040FF90 __p__fmode      endp
.text:0040FF90
.text:0040FF90 ; ---------------------------------------------------------------------------
.text:0040FF96                 align 10h
.text:0040FFA0
.text:0040FFA0 ; =============== S U B R O U T I N E =======================================
.text:0040FFA0
.text:0040FFA0 ; Attributes: thunk
.text:0040FFA0
.text:0040FFA0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040FFA0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040FFA0                                         ; sub_401080+90↑p ...
.text:0040FFA0
.text:0040FFA0 FileHandle      = dword ptr  4
.text:0040FFA0 Mode            = dword ptr  8
.text:0040FFA0
.text:0040FFA0                 jmp     ds:__imp__setmode
.text:0040FFA0 _setmode        endp
.text:0040FFA0
.text:0040FFA0 ; ---------------------------------------------------------------------------
.text:0040FFA6                 align 10h
.text:0040FFB0
.text:0040FFB0 ; =============== S U B R O U T I N E =======================================
.text:0040FFB0
.text:0040FFB0 ; Attributes: thunk
.text:0040FFB0
.text:0040FFB0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040FFB0                 jmp     ds:__imp___getmainargs
.text:0040FFB0 __getmainargs   endp
.text:0040FFB0
.text:0040FFB0 ; ---------------------------------------------------------------------------
.text:0040FFB6                 align 10h
.text:0040FFC0
.text:0040FFC0 ; =============== S U B R O U T I N E =======================================
.text:0040FFC0
.text:0040FFC0 ; Attributes: thunk
.text:0040FFC0
.text:0040FFC0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040FFC0 setlocale       proc near               ; CODE XREF: sub_401A30+5C↑p
.text:0040FFC0
.text:0040FFC0 Category        = dword ptr  4
.text:0040FFC0 Locale          = dword ptr  8
.text:0040FFC0
.text:0040FFC0                 jmp     ds:__imp_setlocale
.text:0040FFC0 setlocale       endp
.text:0040FFC0
.text:0040FFC0 ; ---------------------------------------------------------------------------
.text:0040FFC6                 align 10h
.text:0040FFD0
.text:0040FFD0 ; =============== S U B R O U T I N E =======================================
.text:0040FFD0
.text:0040FFD0 ; Attributes: thunk
.text:0040FFD0
.text:0040FFD0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040FFD0 memcpy          proc near               ; CODE XREF: sub_402B50+177↑p
.text:0040FFD0                                         ; .text:004063E8↑p ...
.text:0040FFD0
.text:0040FFD0 Src             = dword ptr  8
.text:0040FFD0 Size            = dword ptr  0Ch
.text:0040FFD0
.text:0040FFD0                 jmp     ds:__imp_memcpy
.text:0040FFD0 memcpy          endp
.text:0040FFD0
.text:0040FFD0 ; ---------------------------------------------------------------------------
.text:0040FFD6                 align 10h
.text:0040FFE0
.text:0040FFE0 ; =============== S U B R O U T I N E =======================================
.text:0040FFE0
.text:0040FFE0 ; Attributes: thunk
.text:0040FFE0
.text:0040FFE0 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:0040FFE0 memchr          proc near               ; CODE XREF: sub_402B50+B3↑p
.text:0040FFE0                                         ; sub_402B50+278↑p
.text:0040FFE0
.text:0040FFE0 Buf             = dword ptr  4
.text:0040FFE0 Val             = dword ptr  8
.text:0040FFE0 MaxCount        = dword ptr  0Ch
.text:0040FFE0
.text:0040FFE0                 jmp     ds:__imp_memchr
.text:0040FFE0 memchr          endp
.text:0040FFE0
.text:0040FFE0 ; ---------------------------------------------------------------------------
.text:0040FFE6                 align 10h
.text:0040FFF0
.text:0040FFF0 ; =============== S U B R O U T I N E =======================================
.text:0040FFF0
.text:0040FFF0 ; Attributes: thunk
.text:0040FFF0
.text:0040FFF0 ; void __cdecl free(void *Block)
.text:0040FFF0 free            proc near               ; CODE XREF: sub_402B50+1A0↑p
.text:0040FFF0                                         ; sub_402B50+2C5↑p ...
.text:0040FFF0
.text:0040FFF0 Block           = dword ptr  4
.text:0040FFF0
.text:0040FFF0                 jmp     ds:__imp_free
.text:0040FFF0 free            endp
.text:0040FFF0
.text:0040FFF0 ; ---------------------------------------------------------------------------
.text:0040FFF6                 align 10h
.text:00410000
.text:00410000 ; =============== S U B R O U T I N E =======================================
.text:00410000
.text:00410000 ; Attributes: thunk
.text:00410000
.text:00410000 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00410000 fwrite          proc near               ; CODE XREF: sub_4027F0+24E↑p
.text:00410000                                         ; sub_402B50+144↑p ...
.text:00410000
.text:00410000 Buffer          = dword ptr  4
.text:00410000 ElementSize     = dword ptr  8
.text:00410000 ElementCount    = dword ptr  0Ch
.text:00410000 Stream          = dword ptr  10h
.text:00410000
.text:00410000                 jmp     ds:__imp_fwrite
.text:00410000 fwrite          endp
.text:00410000
.text:00410000 ; ---------------------------------------------------------------------------
.text:00410006                 align 10h
.text:00410010
.text:00410010 ; =============== S U B R O U T I N E =======================================
.text:00410010
.text:00410010 ; Attributes: noreturn thunk
.text:00410010
.text:00410010 ; void __cdecl __noreturn abort()
.text:00410010 abort           proc near               ; CODE XREF: sub_4027F0:loc_402A72↑p
.text:00410010                                         ; sub_402EE0:loc_403262↑p ...
.text:00410010                 jmp     ds:__imp_abort
.text:00410010 abort           endp
.text:00410010
.text:00410010 ; ---------------------------------------------------------------------------
.text:00410016                 align 10h
.text:00410020
.text:00410020 ; =============== S U B R O U T I N E =======================================
.text:00410020
.text:00410020 ; Attributes: thunk
.text:00410020
.text:00410020 ; int *__cdecl errno()
.text:00410020 _errno          proc near               ; CODE XREF: sub_401A30+71D↑p
.text:00410020                                         ; sub_401A30+76E↑p ...
.text:00410020                 jmp     ds:__imp__errno
.text:00410020 _errno          endp
.text:00410020
.text:00410020 ; ---------------------------------------------------------------------------
.text:00410026                 align 10h
.text:00410030
.text:00410030 ; =============== S U B R O U T I N E =======================================
.text:00410030
.text:00410030 ; Attributes: noreturn thunk
.text:00410030
.text:00410030 ; void __cdecl __noreturn exit(int Code)
.text:00410030 exit            proc near               ; CODE XREF: sub_401A30:loc_401C77↑p
.text:00410030                                         ; .text:0040262B↑p ...
.text:00410030
.text:00410030 Code            = dword ptr  4
.text:00410030
.text:00410030                 jmp     ds:__imp_exit
.text:00410030 exit            endp
.text:00410030
.text:00410030 ; ---------------------------------------------------------------------------
.text:00410036                 align 10h
.text:00410040
.text:00410040 ; =============== S U B R O U T I N E =======================================
.text:00410040
.text:00410040 ; Attributes: thunk
.text:00410040
.text:00410040 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00410040 fputs           proc near               ; CODE XREF: sub_401A30+2D9↑p
.text:00410040                                         ; sub_401A30+2FB↑p ...
.text:00410040
.text:00410040 Buffer          = dword ptr  4
.text:00410040 Stream          = dword ptr  8
.text:00410040
.text:00410040                 jmp     ds:__imp_fputs
.text:00410040 fputs           endp
.text:00410040
.text:00410040 ; ---------------------------------------------------------------------------
.text:00410046                 align 10h
.text:00410050
.text:00410050 ; =============== S U B R O U T I N E =======================================
.text:00410050
.text:00410050 ; Attributes: thunk
.text:00410050
.text:00410050 ; int printf(const char *const Format, ...)
.text:00410050 printf          proc near               ; CODE XREF: sub_401A30+2B7↑p
.text:00410050                                         ; sub_401A30+3C2↑p ...
.text:00410050
.text:00410050 Format          = dword ptr  4
.text:00410050
.text:00410050                 jmp     ds:__imp_printf
.text:00410050 printf          endp
.text:00410050
.text:00410050 ; ---------------------------------------------------------------------------
.text:00410056                 align 10h
.text:00410060
.text:00410060 ; =============== S U B R O U T I N E =======================================
.text:00410060
.text:00410060 ; Attributes: thunk
.text:00410060
.text:00410060 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00410060 fprintf         proc near               ; CODE XREF: sub_401A30+23B↑p
.text:00410060                                         ; .text:00402623↑p ...
.text:00410060
.text:00410060 Stream          = dword ptr  4
.text:00410060 Format          = dword ptr  8
.text:00410060
.text:00410060                 jmp     ds:__imp_fprintf
.text:00410060 fprintf         endp
.text:00410060
.text:00410060 ; ---------------------------------------------------------------------------
.text:00410066                 align 10h
.text:00410070
.text:00410070 ; =============== S U B R O U T I N E =======================================
.text:00410070
.text:00410070 ; Attributes: thunk
.text:00410070
.text:00410070 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00410070 _lseeki64       proc near               ; CODE XREF: sub_401A30+644↑p
.text:00410070                                         ; sub_401A30+668↑p ...
.text:00410070
.text:00410070 FileHandle      = dword ptr  4
.text:00410070 Offset          = qword ptr  8
.text:00410070 Origin          = dword ptr  10h
.text:00410070
.text:00410070                 jmp     ds:__imp__lseeki64
.text:00410070 _lseeki64       endp
.text:00410070
.text:00410070 ; ---------------------------------------------------------------------------
.text:00410076                 align 10h
.text:00410080
.text:00410080 ; =============== S U B R O U T I N E =======================================
.text:00410080
.text:00410080 ; Attributes: thunk
.text:00410080
.text:00410080 ; size_t __cdecl strlen(const char *Str)
.text:00410080 strlen          proc near               ; CODE XREF: sub_403EB0+2A9↑p
.text:00410080                                         ; sub_403EB0+346↑p ...
.text:00410080
.text:00410080 Str             = dword ptr  4
.text:00410080
.text:00410080                 jmp     ds:__imp_strlen
.text:00410080 strlen          endp
.text:00410080
.text:00410080 ; ---------------------------------------------------------------------------
.text:00410086                 align 10h
.text:00410090
.text:00410090 ; =============== S U B R O U T I N E =======================================
.text:00410090
.text:00410090 ; Attributes: thunk
.text:00410090
.text:00410090 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00410090 strncmp         proc near               ; CODE XREF: sub_403EB0+23F↑p
.text:00410090                                         ; sub_403EB0+699↑p
.text:00410090
.text:00410090 Str1            = dword ptr  4
.text:00410090 Str2            = dword ptr  8
.text:00410090 MaxCount        = dword ptr  0Ch
.text:00410090
.text:00410090                 jmp     ds:__imp_strncmp
.text:00410090 strncmp         endp
.text:00410090
.text:00410090 ; ---------------------------------------------------------------------------
.text:00410096                 align 10h
.text:004100A0
.text:004100A0 ; =============== S U B R O U T I N E =======================================
.text:004100A0
.text:004100A0 ; Attributes: thunk
.text:004100A0
.text:004100A0 ; char *__cdecl getenv(const char *VarName)
.text:004100A0 getenv          proc near               ; CODE XREF: sub_403EB0+B57↑p
.text:004100A0                                         ; sub_4052D0+13↑p ...
.text:004100A0
.text:004100A0 VarName         = dword ptr  4
.text:004100A0
.text:004100A0                 jmp     ds:__imp_getenv
.text:004100A0 getenv          endp
.text:004100A0
.text:004100A0 ; ---------------------------------------------------------------------------
.text:004100A6                 align 10h
.text:004100B0
.text:004100B0 ; =============== S U B R O U T I N E =======================================
.text:004100B0
.text:004100B0 ; Attributes: thunk
.text:004100B0
.text:004100B0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004100B0 strchr          proc near               ; CODE XREF: sub_403EB0+469↑p
.text:004100B0                                         ; sub_403EB0+53A↑p ...
.text:004100B0
.text:004100B0 Str             = dword ptr  4
.text:004100B0 Val             = dword ptr  8
.text:004100B0
.text:004100B0                 jmp     ds:__imp_strchr
.text:004100B0 strchr          endp
.text:004100B0
.text:004100B0 ; ---------------------------------------------------------------------------
.text:004100B6                 align 10h
.text:004100C0
.text:004100C0 ; =============== S U B R O U T I N E =======================================
.text:004100C0
.text:004100C0 ; Attributes: thunk
.text:004100C0
.text:004100C0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004100C0 vfprintf        proc near               ; CODE XREF: sub_404F70+C1↑p
.text:004100C0                                         ; sub_407AC0+49↑p ...
.text:004100C0
.text:004100C0 Stream          = dword ptr  4
.text:004100C0 Format          = dword ptr  8
.text:004100C0 ArgList         = dword ptr  0Ch
.text:004100C0
.text:004100C0                 jmp     ds:__imp_vfprintf
.text:004100C0 vfprintf        endp
.text:004100C0
.text:004100C0 ; ---------------------------------------------------------------------------
.text:004100C6                 align 10h
.text:004100D0
.text:004100D0 ; =============== S U B R O U T I N E =======================================
.text:004100D0
.text:004100D0 ; Attributes: thunk
.text:004100D0
.text:004100D0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004100D0 _flsbuf         proc near               ; CODE XREF: sub_404F70+128↑p
.text:004100D0                                         ; sub_404F70+13A↑p ...
.text:004100D0
.text:004100D0 File            = dword ptr  8
.text:004100D0
.text:004100D0                 jmp     ds:__imp__flsbuf
.text:004100D0 _flsbuf         endp
.text:004100D0
.text:004100D0 ; ---------------------------------------------------------------------------
.text:004100D6                 align 10h
.text:004100E0
.text:004100E0 ; =============== S U B R O U T I N E =======================================
.text:004100E0
.text:004100E0 ; Attributes: thunk
.text:004100E0
.text:004100E0 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:004100E0 strtol          proc near               ; CODE XREF: sub_4052D0+43↑p
.text:004100E0
.text:004100E0 String          = dword ptr  4
.text:004100E0 EndPtr          = dword ptr  8
.text:004100E0 Radix           = dword ptr  0Ch
.text:004100E0
.text:004100E0                 jmp     ds:__imp_strtol
.text:004100E0 strtol          endp
.text:004100E0
.text:004100E0 ; ---------------------------------------------------------------------------
.text:004100E6                 align 10h
.text:004100F0
.text:004100F0 ; =============== S U B R O U T I N E =======================================
.text:004100F0
.text:004100F0 ; Attributes: thunk
.text:004100F0
.text:004100F0 ; int __cdecl fclose(FILE *Stream)
.text:004100F0 fclose          proc near               ; CODE XREF: sub_405360+27↑p
.text:004100F0                                         ; .text:0040CE5E↑p
.text:004100F0
.text:004100F0 Stream          = dword ptr  4
.text:004100F0
.text:004100F0                 jmp     ds:__imp_fclose
.text:004100F0 fclose          endp
.text:004100F0
.text:004100F0 ; ---------------------------------------------------------------------------
.text:004100F6                 align 10h
.text:00410100
.text:00410100 ; =============== S U B R O U T I N E =======================================
.text:00410100
.text:00410100 ; Attributes: noreturn thunk
.text:00410100
.text:00410100 _assert         proc near               ; CODE XREF: sub_4054B0+C88↑p
.text:00410100                                         ; sub_40D480+414↑p
.text:00410100                 jmp     ds:__imp__assert
.text:00410100 _assert         endp
.text:00410100
.text:00410100 ; ---------------------------------------------------------------------------
.text:00410106                 align 10h
.text:00410110
.text:00410110 ; =============== S U B R O U T I N E =======================================
.text:00410110
.text:00410110 ; Attributes: thunk
.text:00410110
.text:00410110 ; int __cdecl isctype(int C, int Type)
.text:00410110 _isctype        proc near               ; CODE XREF: sub_4054B0+72↑p
.text:00410110                                         ; sub_406700+610↑p ...
.text:00410110
.text:00410110 C               = dword ptr  4
.text:00410110 Type            = dword ptr  8
.text:00410110
.text:00410110                 jmp     ds:__imp__isctype
.text:00410110 _isctype        endp
.text:00410110
.text:00410110 ; ---------------------------------------------------------------------------
.text:00410116                 align 10h
.text:00410120
.text:00410120 ; =============== S U B R O U T I N E =======================================
.text:00410120
.text:00410120 ; Attributes: thunk
.text:00410120
.text:00410120 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00410120 memset          proc near               ; CODE XREF: .text:00406366↑p
.text:00410120
.text:00410120 Val             = dword ptr  8
.text:00410120 Size            = dword ptr  0Ch
.text:00410120
.text:00410120                 jmp     ds:__imp_memset
.text:00410120 memset          endp
.text:00410120
.text:00410120 ; ---------------------------------------------------------------------------
.text:00410126                 align 10h
.text:00410130
.text:00410130 ; =============== S U B R O U T I N E =======================================
.text:00410130
.text:00410130 ; Attributes: thunk
.text:00410130
.text:00410130 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00410130 calloc          proc near               ; CODE XREF: sub_406380+23↑p
.text:00410130                                         ; sub_40A430+AC↑p
.text:00410130
.text:00410130 Count           = dword ptr  4
.text:00410130 Size            = dword ptr  8
.text:00410130
.text:00410130                 jmp     ds:__imp_calloc
.text:00410130 calloc          endp
.text:00410130
.text:00410130 ; ---------------------------------------------------------------------------
.text:00410136                 align 10h
.text:00410140
.text:00410140 ; =============== S U B R O U T I N E =======================================
.text:00410140
.text:00410140 ; Attributes: thunk
.text:00410140
.text:00410140 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00410140 realloc         proc near               ; CODE XREF: .text:004062A0↑p
.text:00410140                                         ; sub_4062D0+16↑p ...
.text:00410140
.text:00410140 Block           = dword ptr  4
.text:00410140 Size            = dword ptr  8
.text:00410140
.text:00410140                 jmp     ds:__imp_realloc
.text:00410140 realloc         endp
.text:00410140
.text:00410140 ; ---------------------------------------------------------------------------
.text:00410146                 align 10h
.text:00410150
.text:00410150 ; =============== S U B R O U T I N E =======================================
.text:00410150
.text:00410150 ; Attributes: thunk
.text:00410150
.text:00410150 ; void *__cdecl malloc(size_t Size)
.text:00410150 malloc          proc near               ; CODE XREF: sub_406200+24↑p
.text:00410150                                         ; sub_406240+E↑p ...
.text:00410150
.text:00410150 Size            = dword ptr  4
.text:00410150
.text:00410150                 jmp     ds:__imp_malloc
.text:00410150 malloc          endp
.text:00410150
.text:00410150 ; ---------------------------------------------------------------------------
.text:00410156                 align 10h
.text:00410160
.text:00410160 ; =============== S U B R O U T I N E =======================================
.text:00410160
.text:00410160 ; Attributes: thunk
.text:00410160
.text:00410160 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00410160 iswctype        proc near               ; CODE XREF: sub_406700+78B↑p
.text:00410160
.text:00410160 C               = word ptr  4
.text:00410160 Type            = word ptr  8
.text:00410160
.text:00410160                 jmp     ds:__imp_iswctype
.text:00410160 iswctype        endp
.text:00410160
.text:00410160 ; ---------------------------------------------------------------------------
.text:00410166                 align 10h
.text:00410170
.text:00410170 ; =============== S U B R O U T I N E =======================================
.text:00410170
.text:00410170 ; Attributes: thunk
.text:00410170
.text:00410170 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00410170 strcmp          proc near               ; CODE XREF: sub_407BC4+180↑p
.text:00410170                                         ; .text:0040C25B↑p
.text:00410170
.text:00410170 Str1            = dword ptr  4
.text:00410170 Str2            = dword ptr  8
.text:00410170
.text:00410170                 jmp     ds:__imp_strcmp
.text:00410170 strcmp          endp
.text:00410170
.text:00410170 ; ---------------------------------------------------------------------------
.text:00410176                 align 10h
.text:00410180
.text:00410180 ; =============== S U B R O U T I N E =======================================
.text:00410180
.text:00410180 ; Attributes: thunk
.text:00410180
.text:00410180 ; int __cdecl fflush(FILE *Stream)
.text:00410180 fflush          proc near               ; CODE XREF: sub_407AC0+19↑p
.text:00410180                                         ; sub_407AC0+81↑p ...
.text:00410180
.text:00410180 Stream          = dword ptr  4
.text:00410180
.text:00410180                 jmp     ds:__imp_fflush
.text:00410180 fflush          endp
.text:00410180
.text:00410180 ; ---------------------------------------------------------------------------
.text:00410186                 align 10h
.text:00410190
.text:00410190 ; =============== S U B R O U T I N E =======================================
.text:00410190
.text:00410190 ; Attributes: thunk
.text:00410190
.text:00410190 ; char *__cdecl strerror(int ErrorMessage)
.text:00410190 strerror        proc near               ; CODE XREF: sub_407AC0+A5↑p
.text:00410190                                         ; sub_407BC4+10F↑p
.text:00410190
.text:00410190 ErrorMessage    = dword ptr  4
.text:00410190
.text:00410190                 jmp     ds:__imp_strerror
.text:00410190 strerror        endp
.text:00410190
.text:00410190 ; ---------------------------------------------------------------------------
.text:00410196                 align 10h
.text:004101A0
.text:004101A0 ; =============== S U B R O U T I N E =======================================
.text:004101A0
.text:004101A0 ; Attributes: thunk
.text:004101A0
.text:004101A0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:004101A0 ctime           proc near               ; CODE XREF: .text:00407F2D↑p
.text:004101A0                                         ; .text:00407F4F↑p ...
.text:004101A0
.text:004101A0 Time            = dword ptr  4
.text:004101A0
.text:004101A0                 jmp     ds:__imp_ctime
.text:004101A0 ctime           endp
.text:004101A0
.text:004101A0 ; ---------------------------------------------------------------------------
.text:004101A6                 align 10h
.text:004101B0
.text:004101B0 ; =============== S U B R O U T I N E =======================================
.text:004101B0
.text:004101B0 ; Attributes: thunk
.text:004101B0
.text:004101B0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:004101B0 _get_osfhandle  proc near               ; CODE XREF: sub_407FD0+3A↑p
.text:004101B0                                         ; sub_40CF30+15↑p
.text:004101B0
.text:004101B0 FileHandle      = dword ptr  4
.text:004101B0
.text:004101B0                 jmp     ds:__imp__get_osfhandle
.text:004101B0 _get_osfhandle  endp
.text:004101B0
.text:004101B0 ; ---------------------------------------------------------------------------
.text:004101B6                 align 10h
.text:004101C0
.text:004101C0 ; =============== S U B R O U T I N E =======================================
.text:004101C0
.text:004101C0 ; Attributes: thunk
.text:004101C0
.text:004101C0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004101C0 strcat          proc near               ; CODE XREF: sub_407FD0+2F8↑p
.text:004101C0                                         ; .text:0040BA13↑p ...
.text:004101C0
.text:004101C0 Destination     = dword ptr  4
.text:004101C0 Source          = dword ptr  8
.text:004101C0
.text:004101C0                 jmp     ds:__imp_strcat
.text:004101C0 strcat          endp
.text:004101C0
.text:004101C0 ; ---------------------------------------------------------------------------
.text:004101C6                 align 10h
.text:004101D0
.text:004101D0 ; =============== S U B R O U T I N E =======================================
.text:004101D0
.text:004101D0 ; Attributes: thunk
.text:004101D0
.text:004101D0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004101D0 strcpy          proc near               ; CODE XREF: sub_407FD0+2D3↑p
.text:004101D0                                         ; _win32_longpath+13C↑p ...
.text:004101D0
.text:004101D0 Destination     = dword ptr  4
.text:004101D0 Source          = dword ptr  8
.text:004101D0
.text:004101D0                 jmp     ds:__imp_strcpy
.text:004101D0 strcpy          endp
.text:004101D0
.text:004101D0 ; ---------------------------------------------------------------------------
.text:004101D6                 align 10h
.text:004101E0
.text:004101E0 ; =============== S U B R O U T I N E =======================================
.text:004101E0
.text:004101E0 ; Attributes: thunk
.text:004101E0
.text:004101E0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:004101E0 strstr          proc near               ; CODE XREF: sub_408880+3BF↑p
.text:004101E0                                         ; sub_408880+3DC↑p ...
.text:004101E0
.text:004101E0 Str             = dword ptr  4
.text:004101E0 SubStr          = dword ptr  8
.text:004101E0
.text:004101E0                 jmp     ds:__imp_strstr
.text:004101E0 strstr          endp
.text:004101E0
.text:004101E0 ; ---------------------------------------------------------------------------
.text:004101E6                 align 10h
.text:004101F0
.text:004101F0 ; =============== S U B R O U T I N E =======================================
.text:004101F0
.text:004101F0 ; Attributes: thunk
.text:004101F0
.text:004101F0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004101F0 strrchr         proc near               ; CODE XREF: sub_408880+CB↑p
.text:004101F0                                         ; sub_408880+3A7↑p ...
.text:004101F0
.text:004101F0 Str             = dword ptr  4
.text:004101F0
.text:004101F0                 jmp     ds:__imp_strrchr
.text:004101F0 strrchr         endp
.text:004101F0
.text:004101F0 ; ---------------------------------------------------------------------------
.text:004101F6                 align 10h
.text:00410200
.text:00410200 ; =============== S U B R O U T I N E =======================================
.text:00410200
.text:00410200 ; Attributes: thunk
.text:00410200
.text:00410200 ; int __cdecl isalpha(int C)
.text:00410200 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00410200
.text:00410200 C               = dword ptr  4
.text:00410200
.text:00410200                 jmp     ds:__imp_isalpha
.text:00410200 isalpha         endp
.text:00410200
.text:00410200 ; ---------------------------------------------------------------------------
.text:00410206                 align 10h
.text:00410210
.text:00410210 ; =============== S U B R O U T I N E =======================================
.text:00410210
.text:00410210 ; Attributes: thunk
.text:00410210
.text:00410210 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00410210 _stricmp_0      proc near               ; CODE XREF: .text:0040A2A4↑p
.text:00410210
.text:00410210 String1         = dword ptr  4
.text:00410210 String2         = dword ptr  8
.text:00410210
.text:00410210                 jmp     ds:__imp__stricmp_0
.text:00410210 _stricmp_0      endp
.text:00410210
.text:00410210 ; ---------------------------------------------------------------------------
.text:00410216                 align 10h
.text:00410220
.text:00410220 ; =============== S U B R O U T I N E =======================================
.text:00410220
.text:00410220 ; Attributes: thunk
.text:00410220
.text:00410220 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00410220 strncpy         proc near               ; CODE XREF: sub_40A430+BE↑p
.text:00410220                                         ; .text:0040ACAA↑p ...
.text:00410220
.text:00410220 Destination     = dword ptr  4
.text:00410220 Source          = dword ptr  8
.text:00410220 Count           = dword ptr  0Ch
.text:00410220
.text:00410220                 jmp     ds:__imp_strncpy
.text:00410220 strncpy         endp
.text:00410220
.text:00410220 ; ---------------------------------------------------------------------------
.text:00410226                 align 10h
.text:00410230
.text:00410230 ; =============== S U B R O U T I N E =======================================
.text:00410230
.text:00410230 ; Attributes: thunk
.text:00410230
.text:00410230 ; int __cdecl toupper(int C)
.text:00410230 toupper         proc near               ; CODE XREF: sub_40A430+10E↑p
.text:00410230
.text:00410230 C               = dword ptr  4
.text:00410230
.text:00410230                 jmp     ds:__imp_toupper
.text:00410230 toupper         endp
.text:00410230
.text:00410230 ; ---------------------------------------------------------------------------
.text:00410236                 align 10h
.text:00410240
.text:00410240 ; =============== S U B R O U T I N E =======================================
.text:00410240
.text:00410240 ; Attributes: thunk
.text:00410240
.text:00410240 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00410240 sprintf         proc near               ; CODE XREF: .text:0040B91A↑p
.text:00410240                                         ; .text:0040B93B↑p ...
.text:00410240
.text:00410240 Buffer          = dword ptr  4
.text:00410240 Format          = dword ptr  8
.text:00410240
.text:00410240                 jmp     ds:__imp_sprintf
.text:00410240 sprintf         endp
.text:00410240
.text:00410240 ; ---------------------------------------------------------------------------
.text:00410246                 align 10h
.text:00410250
.text:00410250 ; =============== S U B R O U T I N E =======================================
.text:00410250
.text:00410250 ; Attributes: thunk
.text:00410250
.text:00410250 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00410250 sscanf          proc near               ; CODE XREF: .text:0040C49E↑p
.text:00410250
.text:00410250 Buffer          = dword ptr  4
.text:00410250 Format          = dword ptr  8
.text:00410250
.text:00410250                 jmp     ds:__imp_sscanf
.text:00410250 sscanf          endp
.text:00410250
.text:00410250 ; ---------------------------------------------------------------------------
.text:00410256                 align 10h
.text:00410260
.text:00410260 ; =============== S U B R O U T I N E =======================================
.text:00410260
.text:00410260 ; Attributes: thunk
.text:00410260
.text:00410260 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00410260 strspn          proc near               ; CODE XREF: .text:0040C2EA↑p
.text:00410260                                         ; .text:0040C504↑p ...
.text:00410260
.text:00410260 Str             = dword ptr  4
.text:00410260 Control         = dword ptr  8
.text:00410260
.text:00410260                 jmp     ds:__imp_strspn
.text:00410260 strspn          endp
.text:00410260
.text:00410260 ; ---------------------------------------------------------------------------
.text:00410266                 align 10h
.text:00410270
.text:00410270 ; =============== S U B R O U T I N E =======================================
.text:00410270
.text:00410270 ; Attributes: thunk
.text:00410270
.text:00410270 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00410270 fopen           proc near               ; CODE XREF: sub_40CD9F+26↑p
.text:00410270                                         ; sub_40CD9F+99↑p
.text:00410270
.text:00410270 FileName        = dword ptr  4
.text:00410270 Mode            = dword ptr  8
.text:00410270
.text:00410270                 jmp     ds:__imp_fopen
.text:00410270 fopen           endp
.text:00410270
.text:00410270 ; ---------------------------------------------------------------------------
.text:00410276                 align 10h
.text:00410280
.text:00410280 ; =============== S U B R O U T I N E =======================================
.text:00410280
.text:00410280 ; Attributes: thunk
.text:00410280
.text:00410280 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00410280 _filelengthi64  proc near               ; CODE XREF: sub_40CF30+1F↑p
.text:00410280
.text:00410280 FileHandle      = dword ptr  4
.text:00410280
.text:00410280                 jmp     ds:__imp__filelengthi64
.text:00410280 _filelengthi64  endp
.text:00410280
.text:00410280 ; ---------------------------------------------------------------------------
.text:00410286                 align 10h
.text:00410290
.text:00410290 ; =============== S U B R O U T I N E =======================================
.text:00410290
.text:00410290 ; Attributes: thunk
.text:00410290
.text:00410290 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00410290 strpbrk         proc near               ; CODE XREF: sub_40CF90+87↑p
.text:00410290
.text:00410290 Str             = dword ptr  4
.text:00410290 Control         = dword ptr  8
.text:00410290
.text:00410290                 jmp     ds:__imp_strpbrk
.text:00410290 strpbrk         endp
.text:00410290
.text:00410290 ; ---------------------------------------------------------------------------
.text:00410296                 align 10h
.text:004102A0
.text:004102A0 ; =============== S U B R O U T I N E =======================================
.text:004102A0
.text:004102A0 ; Attributes: thunk
.text:004102A0
.text:004102A0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004102A0 _fdopen         proc near               ; CODE XREF: sub_40D030+69↑p
.text:004102A0
.text:004102A0 FileHandle      = dword ptr  4
.text:004102A0 Format          = dword ptr  8
.text:004102A0
.text:004102A0                 jmp     ds:__imp__fdopen
.text:004102A0 _fdopen         endp
.text:004102A0
.text:004102A0 ; ---------------------------------------------------------------------------
.text:004102A6                 align 10h
.text:004102B0
.text:004102B0 ; =============== S U B R O U T I N E =======================================
.text:004102B0
.text:004102B0 ; Attributes: thunk
.text:004102B0
.text:004102B0 ; int __cdecl close_0(int FileHandle)
.text:004102B0 _close_0        proc near               ; CODE XREF: sub_40D030+90↑p
.text:004102B0
.text:004102B0 FileHandle      = dword ptr  4
.text:004102B0
.text:004102B0                 jmp     ds:__imp__close_0
.text:004102B0 _close_0        endp
.text:004102B0
.text:004102B0 ; ---------------------------------------------------------------------------
.text:004102B6                 align 10h
.text:004102C0
.text:004102C0 ; =============== S U B R O U T I N E =======================================
.text:004102C0
.text:004102C0 ; Attributes: thunk
.text:004102C0
.text:004102C0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004102C0 _open_0         proc near               ; CODE XREF: sub_40D480:loc_40D810↑p
.text:004102C0
.text:004102C0 FileName        = dword ptr  4
.text:004102C0 OpenFlag        = dword ptr  8
.text:004102C0
.text:004102C0                 jmp     ds:__imp__open_0
.text:004102C0 _open_0         endp
.text:004102C0
.text:004102C0 ; ---------------------------------------------------------------------------
.text:004102C6                 align 10h
.text:004102D0
.text:004102D0 ; =============== S U B R O U T I N E =======================================
.text:004102D0
.text:004102D0 ; Attributes: thunk
.text:004102D0
.text:004102D0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004102D0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004102D0
.text:004102D0 lpTopLevelExceptionFilter= dword ptr  4
.text:004102D0
.text:004102D0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004102D0 SetUnhandledExceptionFilter endp
.text:004102D0
.text:004102D0 ; ---------------------------------------------------------------------------
.text:004102D6                 align 10h
.text:004102E0
.text:004102E0 ; =============== S U B R O U T I N E =======================================
.text:004102E0
.text:004102E0 ; Attributes: noreturn thunk
.text:004102E0
.text:004102E0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004102E0 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:004102E0
.text:004102E0 uExitCode       = dword ptr  4
.text:004102E0
.text:004102E0                 jmp     ds:__imp_ExitProcess
.text:004102E0 ExitProcess     endp
.text:004102E0
.text:004102E0 ; ---------------------------------------------------------------------------
.text:004102E6                 align 10h
.text:004102F0
.text:004102F0 ; =============== S U B R O U T I N E =======================================
.text:004102F0
.text:004102F0 ; Attributes: thunk
.text:004102F0
.text:004102F0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:004102F0 GetModuleHandleA proc near              ; CODE XREF: sub_407FD0+108↑p
.text:004102F0                                         ; sub_408880+329↑p ...
.text:004102F0
.text:004102F0 lpModuleName    = dword ptr  4
.text:004102F0
.text:004102F0                 jmp     ds:__imp_GetModuleHandleA
.text:004102F0 GetModuleHandleA endp
.text:004102F0
.text:004102F0 ; ---------------------------------------------------------------------------
.text:004102F6                 align 10h
.text:00410300
.text:00410300 ; =============== S U B R O U T I N E =======================================
.text:00410300
.text:00410300 ; Attributes: thunk
.text:00410300
.text:00410300 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00410300 GetProcAddress  proc near               ; CODE XREF: sub_407FD0+123↑p
.text:00410300                                         ; sub_407FD0+28E↑p ...
.text:00410300
.text:00410300 hModule         = dword ptr  4
.text:00410300 lpProcName      = dword ptr  8
.text:00410300
.text:00410300                 jmp     ds:__imp_GetProcAddress
.text:00410300 GetProcAddress  endp
.text:00410300
.text:00410300 ; ---------------------------------------------------------------------------
.text:00410306                 align 10h
.text:00410310
.text:00410310 ; =============== S U B R O U T I N E =======================================
.text:00410310
.text:00410310 ; Attributes: thunk
.text:00410310
.text:00410310 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00410310 GetFileAttributesA proc near            ; CODE XREF: sub_407FD0+137↑p
.text:00410310                                         ; sub_40B620+62↑p
.text:00410310
.text:00410310 lpFileName      = dword ptr  4
.text:00410310
.text:00410310                 jmp     ds:__imp_GetFileAttributesA
.text:00410310 GetFileAttributesA endp
.text:00410310
.text:00410310 ; ---------------------------------------------------------------------------
.text:00410316                 align 10h
.text:00410320
.text:00410320 ; =============== S U B R O U T I N E =======================================
.text:00410320
.text:00410320 ; Attributes: thunk
.text:00410320
.text:00410320 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00410320 FreeLibrary     proc near               ; CODE XREF: sub_407FD0+194↑p
.text:00410320                                         ; sub_407FD0+37D↑p ...
.text:00410320
.text:00410320 hLibModule      = dword ptr  4
.text:00410320
.text:00410320                 jmp     ds:__imp_FreeLibrary
.text:00410320 FreeLibrary     endp
.text:00410320
.text:00410320 ; ---------------------------------------------------------------------------
.text:00410326                 align 10h
.text:00410330
.text:00410330 ; =============== S U B R O U T I N E =======================================
.text:00410330
.text:00410330 ; Attributes: thunk
.text:00410330
.text:00410330 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00410330 FindFirstFileA  proc near               ; CODE XREF: sub_407FD0+1BE↑p
.text:00410330                                         ; sub_407FD0+3AF↑p ...
.text:00410330
.text:00410330 lpFileName      = dword ptr  4
.text:00410330 lpFindFileData  = dword ptr  8
.text:00410330
.text:00410330                 jmp     ds:__imp_FindFirstFileA
.text:00410330 FindFirstFileA  endp
.text:00410330
.text:00410330 ; ---------------------------------------------------------------------------
.text:00410336                 align 10h
.text:00410340
.text:00410340 ; =============== S U B R O U T I N E =======================================
.text:00410340
.text:00410340 ; Attributes: thunk
.text:00410340
.text:00410340 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00410340 FindClose       proc near               ; CODE XREF: sub_407FD0+213↑p
.text:00410340                                         ; sub_407FD0+36E↑p ...
.text:00410340
.text:00410340 hFindFile       = dword ptr  4
.text:00410340
.text:00410340                 jmp     ds:__imp_FindClose
.text:00410340 FindClose       endp
.text:00410340
.text:00410340 ; ---------------------------------------------------------------------------
.text:00410346                 align 10h
.text:00410350
.text:00410350 ; =============== S U B R O U T I N E =======================================
.text:00410350
.text:00410350 ; Attributes: thunk
.text:00410350
.text:00410350 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00410350 LoadLibraryA    proc near               ; CODE XREF: sub_407FD0+273↑p
.text:00410350                                         ; sub_408880+134↑p ...
.text:00410350
.text:00410350 lpLibFileName   = dword ptr  4
.text:00410350
.text:00410350                 jmp     ds:__imp_LoadLibraryA
.text:00410350 LoadLibraryA    endp
.text:00410350
.text:00410350 ; ---------------------------------------------------------------------------
.text:00410356                 align 10h
.text:00410360
.text:00410360 ; =============== S U B R O U T I N E =======================================
.text:00410360
.text:00410360 ; Attributes: thunk
.text:00410360
.text:00410360 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00410360 FindNextFileA   proc near               ; CODE XREF: sub_407FD0+35F↑p
.text:00410360
.text:00410360 hFindFile       = dword ptr  4
.text:00410360 lpFindFileData  = dword ptr  8
.text:00410360
.text:00410360                 jmp     ds:__imp_FindNextFileA
.text:00410360 FindNextFileA   endp
.text:00410360
.text:00410360 ; ---------------------------------------------------------------------------
.text:00410366                 align 10h
.text:00410370
.text:00410370 ; =============== S U B R O U T I N E =======================================
.text:00410370
.text:00410370 ; Attributes: thunk
.text:00410370
.text:00410370 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00410370 GetFileType     proc near               ; CODE XREF: sub_407FD0+423↑p
.text:00410370                                         ; .text:0040906A↑p
.text:00410370
.text:00410370 hFile           = dword ptr  4
.text:00410370
.text:00410370                 jmp     ds:__imp_GetFileType
.text:00410370 GetFileType     endp
.text:00410370
.text:00410370 ; ---------------------------------------------------------------------------
.text:00410376                 align 10h
.text:00410380
.text:00410380 ; =============== S U B R O U T I N E =======================================
.text:00410380
.text:00410380 ; Attributes: thunk
.text:00410380
.text:00410380 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00410380 GetFileInformationByHandle proc near    ; CODE XREF: sub_407FD0+449↑p
.text:00410380
.text:00410380 hFile           = dword ptr  4
.text:00410380 lpFileInformation= dword ptr  8
.text:00410380
.text:00410380                 jmp     ds:__imp_GetFileInformationByHandle
.text:00410380 GetFileInformationByHandle endp
.text:00410380
.text:00410380 ; ---------------------------------------------------------------------------
.text:00410386                 align 10h
.text:00410390
.text:00410390 ; =============== S U B R O U T I N E =======================================
.text:00410390
.text:00410390 ; Attributes: thunk
.text:00410390
.text:00410390 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00410390 GetFileSize     proc near               ; CODE XREF: sub_407FD0+7D2↑p
.text:00410390
.text:00410390 hFile           = dword ptr  4
.text:00410390 lpFileSizeHigh  = dword ptr  8
.text:00410390
.text:00410390                 jmp     ds:__imp_GetFileSize
.text:00410390 GetFileSize     endp
.text:00410390
.text:00410390 ; ---------------------------------------------------------------------------
.text:00410396                 align 10h
.text:004103A0
.text:004103A0 ; =============== S U B R O U T I N E =======================================
.text:004103A0
.text:004103A0 ; Attributes: thunk
.text:004103A0
.text:004103A0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:004103A0 PeekNamedPipe   proc near               ; CODE XREF: sub_407FD0+819↑p
.text:004103A0
.text:004103A0 hNamedPipe      = dword ptr  4
.text:004103A0 lpBuffer        = dword ptr  8
.text:004103A0 nBufferSize     = dword ptr  0Ch
.text:004103A0 lpBytesRead     = dword ptr  10h
.text:004103A0 lpTotalBytesAvail= dword ptr  14h
.text:004103A0 lpBytesLeftThisMessage= dword ptr  18h
.text:004103A0
.text:004103A0                 jmp     ds:__imp_PeekNamedPipe
.text:004103A0 PeekNamedPipe   endp
.text:004103A0
.text:004103A0 ; ---------------------------------------------------------------------------
.text:004103A6                 align 10h
.text:004103B0
.text:004103B0 ; =============== S U B R O U T I N E =======================================
.text:004103B0
.text:004103B0 ; Attributes: thunk
.text:004103B0
.text:004103B0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:004103B0 GetDriveTypeA   proc near               ; CODE XREF: sub_408880+4C↑p
.text:004103B0
.text:004103B0 lpRootPathName  = dword ptr  4
.text:004103B0
.text:004103B0                 jmp     ds:__imp_GetDriveTypeA
.text:004103B0 GetDriveTypeA   endp
.text:004103B0
.text:004103B0 ; ---------------------------------------------------------------------------
.text:004103B6                 align 10h
.text:004103C0
.text:004103C0 ; =============== S U B R O U T I N E =======================================
.text:004103C0
.text:004103C0 ; Attributes: thunk
.text:004103C0
.text:004103C0 ; DWORD __stdcall GetLastError()
.text:004103C0 GetLastError    proc near               ; CODE XREF: sub_408880:loc_408B09↑p
.text:004103C0                                         ; .text:loc_40964D↑p ...
.text:004103C0                 jmp     ds:__imp_GetLastError
.text:004103C0 GetLastError    endp
.text:004103C0
.text:004103C0 ; ---------------------------------------------------------------------------
.text:004103C6                 align 10h
.text:004103D0
.text:004103D0 ; =============== S U B R O U T I N E =======================================
.text:004103D0
.text:004103D0 ; Attributes: thunk
.text:004103D0
.text:004103D0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:004103D0 GetVolumeInformationA proc near         ; CODE XREF: sub_408D80+64↑p
.text:004103D0                                         ; .text:0040932C↑p ...
.text:004103D0
.text:004103D0 lpRootPathName  = dword ptr  4
.text:004103D0 lpVolumeNameBuffer= dword ptr  8
.text:004103D0 nVolumeNameSize = dword ptr  0Ch
.text:004103D0 lpVolumeSerialNumber= dword ptr  10h
.text:004103D0 lpMaximumComponentLength= dword ptr  14h
.text:004103D0 lpFileSystemFlags= dword ptr  18h
.text:004103D0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:004103D0 nFileSystemNameSize= dword ptr  20h
.text:004103D0
.text:004103D0                 jmp     ds:__imp_GetVolumeInformationA
.text:004103D0 GetVolumeInformationA endp
.text:004103D0
.text:004103D0 ; ---------------------------------------------------------------------------
.text:004103D6                 align 10h
.text:004103E0
.text:004103E0 ; =============== S U B R O U T I N E =======================================
.text:004103E0
.text:004103E0 ; Attributes: thunk
.text:004103E0
.text:004103E0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:004103E0 CreateFileA     proc near               ; CODE XREF: sub_40D9B0-3E9A↑p
.text:004103E0                                         ; .text:0040AA23↑p ...
.text:004103E0
.text:004103E0 lpFileName      = dword ptr  4
.text:004103E0 dwDesiredAccess = dword ptr  8
.text:004103E0 dwShareMode     = dword ptr  0Ch
.text:004103E0 lpSecurityAttributes= dword ptr  10h
.text:004103E0 dwCreationDisposition= dword ptr  14h
.text:004103E0 dwFlagsAndAttributes= dword ptr  18h
.text:004103E0 hTemplateFile   = dword ptr  1Ch
.text:004103E0
.text:004103E0                 jmp     ds:__imp_CreateFileA
.text:004103E0 CreateFileA     endp
.text:004103E0
.text:004103E0 ; ---------------------------------------------------------------------------
.text:004103E6                 align 10h
.text:004103F0
.text:004103F0 ; =============== S U B R O U T I N E =======================================
.text:004103F0
.text:004103F0 ; Attributes: thunk
.text:004103F0
.text:004103F0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:004103F0 CloseHandle     proc near               ; CODE XREF: sub_40D9B0-3E7F↑p
.text:004103F0                                         ; .text:0040AA99↑p ...
.text:004103F0
.text:004103F0 hObject         = dword ptr  4
.text:004103F0
.text:004103F0                 jmp     ds:__imp_CloseHandle
.text:004103F0 CloseHandle     endp
.text:004103F0
.text:004103F0 ; ---------------------------------------------------------------------------
.text:004103F6                 align 10h
.text:00410400
.text:00410400 ; =============== S U B R O U T I N E =======================================
.text:00410400
.text:00410400 ; Attributes: thunk
.text:00410400
.text:00410400 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00410400 SetErrorMode    proc near               ; CODE XREF: sub_40D9B0-3E4A↑p
.text:00410400                                         ; sub_40B620+57↑p ...
.text:00410400
.text:00410400 uMode           = dword ptr  4
.text:00410400
.text:00410400                 jmp     ds:__imp_SetErrorMode
.text:00410400 SetErrorMode    endp
.text:00410400
.text:00410400 ; ---------------------------------------------------------------------------
.text:00410406                 align 10h
.text:00410410
.text:00410410 ; =============== S U B R O U T I N E =======================================
.text:00410410
.text:00410410 ; Attributes: thunk
.text:00410410
.text:00410410 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00410410 GetModuleFileNameA proc near            ; CODE XREF: sub_40A120+1C↑p
.text:00410410
.text:00410410 hModule         = dword ptr  4
.text:00410410 lpFilename      = dword ptr  8
.text:00410410 nSize           = dword ptr  0Ch
.text:00410410
.text:00410410                 jmp     ds:__imp_GetModuleFileNameA
.text:00410410 GetModuleFileNameA endp
.text:00410410
.text:00410410 ; ---------------------------------------------------------------------------
.text:00410416                 align 10h
.text:00410420
.text:00410420 ; =============== S U B R O U T I N E =======================================
.text:00410420
.text:00410420 ; Attributes: thunk
.text:00410420
.text:00410420 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00410420 GetShortPathNameA proc near             ; CODE XREF: .text:0040A3A6↑p
.text:00410420                                         ; .text:0040A3D0↑p
.text:00410420
.text:00410420 lpszLongPath    = dword ptr  4
.text:00410420 lpszShortPath   = dword ptr  8
.text:00410420 cchBuffer       = dword ptr  0Ch
.text:00410420
.text:00410420                 jmp     ds:__imp_GetShortPathNameA
.text:00410420 GetShortPathNameA endp
.text:00410420
.text:00410420 ; ---------------------------------------------------------------------------
.text:00410426                 align 10h
.text:00410430
.text:00410430 ; =============== S U B R O U T I N E =======================================
.text:00410430
.text:00410430 ; Attributes: thunk
.text:00410430
.text:00410430 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00410430 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040A6D8↑p
.text:00410430                                         ; .text:0040A6F4↑p ...
.text:00410430
.text:00410430 nBufferLength   = dword ptr  4
.text:00410430 lpBuffer        = dword ptr  8
.text:00410430
.text:00410430                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00410430 GetCurrentDirectoryA endp
.text:00410430
.text:00410430 ; ---------------------------------------------------------------------------
.text:00410436                 align 10h
.text:00410440
.text:00410440 ; =============== S U B R O U T I N E =======================================
.text:00410440
.text:00410440 ; Attributes: thunk
.text:00410440
.text:00410440 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00410440 DeviceIoControl proc near               ; CODE XREF: .text:0040AA8C↑p
.text:00410440                                         ; sub_40AE50+1E5↑p
.text:00410440
.text:00410440 hDevice         = dword ptr  4
.text:00410440 dwIoControlCode = dword ptr  8
.text:00410440 lpInBuffer      = dword ptr  0Ch
.text:00410440 nInBufferSize   = dword ptr  10h
.text:00410440 lpOutBuffer     = dword ptr  14h
.text:00410440 nOutBufferSize  = dword ptr  18h
.text:00410440 lpBytesReturned = dword ptr  1Ch
.text:00410440 lpOverlapped    = dword ptr  20h
.text:00410440
.text:00410440                 jmp     ds:__imp_DeviceIoControl
.text:00410440 DeviceIoControl endp
.text:00410440
.text:00410440 ; ---------------------------------------------------------------------------
.text:00410446                 align 10h
.text:00410450
.text:00410450 ; =============== S U B R O U T I N E =======================================
.text:00410450
.text:00410450 ; Attributes: thunk
.text:00410450
.text:00410450 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00410450 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040ADE3↑p
.text:00410450                                         ; sub_40AE50+7B↑p ...
.text:00410450
.text:00410450 lpRootPathName  = dword ptr  4
.text:00410450 lpSectorsPerCluster= dword ptr  8
.text:00410450 lpBytesPerSector= dword ptr  0Ch
.text:00410450 lpNumberOfFreeClusters= dword ptr  10h
.text:00410450 lpTotalNumberOfClusters= dword ptr  14h
.text:00410450
.text:00410450                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00410450 GetDiskFreeSpaceA endp
.text:00410450
.text:00410450 ; ---------------------------------------------------------------------------
.text:00410456                 align 10h
.text:00410460
.text:00410460 ; =============== S U B R O U T I N E =======================================
.text:00410460
.text:00410460 ; Attributes: thunk
.text:00410460
.text:00410460 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00410460 GetFullPathNameA proc near              ; CODE XREF: sub_40B4F0+45↑p
.text:00410460                                         ; sub_40B4F0+ED↑p
.text:00410460
.text:00410460 lpFileName      = dword ptr  4
.text:00410460 nBufferLength   = dword ptr  8
.text:00410460 lpBuffer        = dword ptr  0Ch
.text:00410460 lpFilePart      = dword ptr  10h
.text:00410460
.text:00410460                 jmp     ds:__imp_GetFullPathNameA
.text:00410460 GetFullPathNameA endp
.text:00410460
.text:00410460 ; ---------------------------------------------------------------------------
.text:00410466                 align 10h
.text:00410470
.text:00410470 ; =============== S U B R O U T I N E =======================================
.text:00410470
.text:00410470 ; Attributes: thunk
.text:00410470
.text:00410470 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00410470 lstrcmpiA       proc near               ; CODE XREF: .text:0040BBAB↑p
.text:00410470                                         ; .text:0040BBC2↑p ...
.text:00410470
.text:00410470 lpString1       = dword ptr  4
.text:00410470 lpString2       = dword ptr  8
.text:00410470
.text:00410470                 jmp     ds:__imp_lstrcmpiA
.text:00410470 lstrcmpiA       endp
.text:00410470
.text:00410470 ; ---------------------------------------------------------------------------
.text:00410476                 align 10h
.text:00410480
.text:00410480 ; =============== S U B R O U T I N E =======================================
.text:00410480
.text:00410480 ; Attributes: thunk
.text:00410480
.text:00410480 ; DWORD __stdcall GetVersion()
.text:00410480 GetVersion      proc near               ; CODE XREF: .text:0040BF33↑p
.text:00410480                 jmp     ds:__imp_GetVersion
.text:00410480 GetVersion      endp
.text:00410480
.text:00410480 ; ---------------------------------------------------------------------------
.text:00410486                 align 10h
.text:00410490
.text:00410490 ; =============== S U B R O U T I N E =======================================
.text:00410490
.text:00410490 ; Attributes: thunk
.text:00410490
.text:00410490 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00410490 GetVersionExA   proc near               ; CODE XREF: sub_40BFC0+32↑p
.text:00410490                                         ; sub_40BFC0+20B↑p
.text:00410490
.text:00410490 lpVersionInformation= dword ptr  4
.text:00410490
.text:00410490                 jmp     ds:__imp_GetVersionExA
.text:00410490 GetVersionExA   endp
.text:00410490
.text:00410490 ; ---------------------------------------------------------------------------
.text:00410496                 align 10h
.text:004104A0
.text:004104A0 ; =============== S U B R O U T I N E =======================================
.text:004104A0
.text:004104A0 ; Attributes: thunk
.text:004104A0
.text:004104A0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004104A0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040C65F↑p
.text:004104A0                                         ; .text:0040C68E↑p ...
.text:004104A0
.text:004104A0 nBufferLength   = dword ptr  4
.text:004104A0 lpBuffer        = dword ptr  8
.text:004104A0
.text:004104A0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:004104A0 GetLogicalDriveStringsA endp
.text:004104A0
.text:004104A0 ; ---------------------------------------------------------------------------
.text:004104A6                 align 10h
.text:004104B0
.text:004104B0 ; =============== S U B R O U T I N E =======================================
.text:004104B0
.text:004104B0 ; Attributes: thunk
.text:004104B0
.text:004104B0 ; HANDLE __stdcall GetProcessHeap()
.text:004104B0 GetProcessHeap  proc near               ; CODE XREF: .text:0040C669↑p
.text:004104B0                                         ; sub_40CD40+24↑p ...
.text:004104B0                 jmp     ds:__imp_GetProcessHeap
.text:004104B0 GetProcessHeap  endp
.text:004104B0
.text:004104B0 ; ---------------------------------------------------------------------------
.text:004104B6                 align 10h
.text:004104C0
.text:004104C0 ; =============== S U B R O U T I N E =======================================
.text:004104C0
.text:004104C0 ; Attributes: thunk
.text:004104C0
.text:004104C0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:004104C0 HeapAlloc       proc near               ; CODE XREF: .text:0040C67D↑p
.text:004104C0                                         ; sub_40CD40+38↑p ...
.text:004104C0
.text:004104C0 hHeap           = dword ptr  4
.text:004104C0 dwFlags         = dword ptr  8
.text:004104C0 dwBytes         = dword ptr  0Ch
.text:004104C0
.text:004104C0                 jmp     ds:__imp_HeapAlloc
.text:004104C0 HeapAlloc       endp
.text:004104C0
.text:004104C0 ; ---------------------------------------------------------------------------
.text:004104C6                 align 10h
.text:004104D0
.text:004104D0 ; =============== S U B R O U T I N E =======================================
.text:004104D0
.text:004104D0 ; Attributes: thunk
.text:004104D0
.text:004104D0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:004104D0 HeapFree        proc near               ; CODE XREF: .text:0040CE7D↑p
.text:004104D0
.text:004104D0 hHeap           = dword ptr  4
.text:004104D0 dwFlags         = dword ptr  8
.text:004104D0 lpMem           = dword ptr  0Ch
.text:004104D0
.text:004104D0                 jmp     ds:__imp_HeapFree
.text:004104D0 HeapFree        endp
.text:004104D0
.text:004104D0 ; ---------------------------------------------------------------------------
.text:004104D6                 align 10h
.text:004104E0
.text:004104E0 ; =============== S U B R O U T I N E =======================================
.text:004104E0
.text:004104E0 ; Attributes: thunk
.text:004104E0
.text:004104E0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:004104E0 UnlockFile      proc near               ; CODE XREF: sub_40CF30+40↑p
.text:004104E0
.text:004104E0 hFile           = dword ptr  4
.text:004104E0 dwFileOffsetLow = dword ptr  8
.text:004104E0 dwFileOffsetHigh= dword ptr  0Ch
.text:004104E0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:004104E0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:004104E0
.text:004104E0                 jmp     ds:__imp_UnlockFile
.text:004104E0 UnlockFile      endp
.text:004104E0
.text:004104E0 ; ---------------------------------------------------------------------------
.text:004104E6                 align 10h
.text:004104F0
.text:004104F0 ; =============== S U B R O U T I N E =======================================
.text:004104F0
.text:004104F0 ; Attributes: thunk
.text:004104F0
.text:004104F0 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:004104F0 CreateDirectoryA proc near              ; CODE XREF: sub_40D8B0+22↑p
.text:004104F0
.text:004104F0 lpPathName      = dword ptr  4
.text:004104F0 lpSecurityAttributes= dword ptr  8
.text:004104F0
.text:004104F0                 jmp     ds:__imp_CreateDirectoryA
.text:004104F0 CreateDirectoryA endp
.text:004104F0
.text:004104F0 ; ---------------------------------------------------------------------------
.text:004104F6                 align 10h
.text:00410500
.text:00410500 ; =============== S U B R O U T I N E =======================================
.text:00410500
.text:00410500 ; Attributes: thunk
.text:00410500
.text:00410500 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00410500 GetTimeZoneInformation proc near        ; CODE XREF: sub_40DAC0+22↑p
.text:00410500
.text:00410500 lpTimeZoneInformation= dword ptr  4
.text:00410500
.text:00410500                 jmp     ds:__imp_GetTimeZoneInformation
.text:00410500 GetTimeZoneInformation endp
.text:00410500
.text:00410500 ; ---------------------------------------------------------------------------
.text:00410506                 align 10h
.text:00410510
.text:00410510 ; =============== S U B R O U T I N E =======================================
.text:00410510
.text:00410510 ; Attributes: thunk
.text:00410510
.text:00410510 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00410510 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40DAC0+4F↑p
.text:00410510
.text:00410510 lpSystemTimeAsFileTime= dword ptr  4
.text:00410510
.text:00410510                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00410510 GetSystemTimeAsFileTime endp
.text:00410510
.text:00410510 ; ---------------------------------------------------------------------------
.text:00410516                 align 10h
.text:00410520
.text:00410520 ; =============== S U B R O U T I N E =======================================
.text:00410520
.text:00410520 ; Attributes: thunk
.text:00410520
.text:00410520 ; BOOL __stdcall AreFileApisANSI()
.text:00410520 AreFileApisANSI proc near               ; CODE XREF: sub_40DC00+89↑p
.text:00410520                 jmp     ds:__imp_AreFileApisANSI
.text:00410520 AreFileApisANSI endp
.text:00410520
.text:00410520 ; ---------------------------------------------------------------------------
.text:00410526                 align 10h
.text:00410530
.text:00410530 ; =============== S U B R O U T I N E =======================================
.text:00410530
.text:00410530 ; Attributes: thunk
.text:00410530
.text:00410530 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00410530 MultiByteToWideChar proc near           ; CODE XREF: sub_40DC00+BD↑p
.text:00410530
.text:00410530 CodePage        = dword ptr  4
.text:00410530 dwFlags         = dword ptr  8
.text:00410530 lpMultiByteStr  = dword ptr  0Ch
.text:00410530 cbMultiByte     = dword ptr  10h
.text:00410530 lpWideCharStr   = dword ptr  14h
.text:00410530 cchWideChar     = dword ptr  18h
.text:00410530
.text:00410530                 jmp     ds:__imp_MultiByteToWideChar
.text:00410530 MultiByteToWideChar endp
.text:00410530
.text:00410530 ; ---------------------------------------------------------------------------
.text:00410536                 align 10h
.text:00410540
.text:00410540 ; =============== S U B R O U T I N E =======================================
.text:00410540
.text:00410540 ; Attributes: thunk
.text:00410540
.text:00410540 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00410540 lstrcpyA        proc near               ; CODE XREF: sub_40DC00+128↑p
.text:00410540
.text:00410540 lpString1       = dword ptr  4
.text:00410540 lpString2       = dword ptr  8
.text:00410540
.text:00410540                 jmp     ds:__imp_lstrcpyA
.text:00410540 lstrcpyA        endp
.text:00410540
.text:00410540 ; ---------------------------------------------------------------------------
.text:00410546                 align 10h
.text:00410550
.text:00410550 ; =============== S U B R O U T I N E =======================================
.text:00410550
.text:00410550 ; Attributes: thunk
.text:00410550
.text:00410550 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00410550 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040BB31↑p
.text:00410550
.text:00410550 hKey            = dword ptr  4
.text:00410550 lpSubKey        = dword ptr  8
.text:00410550 ulOptions       = dword ptr  0Ch
.text:00410550 samDesired      = dword ptr  10h
.text:00410550 phkResult       = dword ptr  14h
.text:00410550
.text:00410550                 jmp     ds:__imp_RegOpenKeyExA
.text:00410550 RegOpenKeyExA   endp
.text:00410550
.text:00410550 ; ---------------------------------------------------------------------------
.text:00410556                 align 10h
.text:00410560
.text:00410560 ; =============== S U B R O U T I N E =======================================
.text:00410560
.text:00410560 ; Attributes: thunk
.text:00410560
.text:00410560 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00410560 RegQueryValueExA proc near              ; CODE XREF: .text:0040BB74↑p
.text:00410560
.text:00410560 hKey            = dword ptr  4
.text:00410560 lpValueName     = dword ptr  8
.text:00410560 lpReserved      = dword ptr  0Ch
.text:00410560 lpType          = dword ptr  10h
.text:00410560 lpData          = dword ptr  14h
.text:00410560 lpcbData        = dword ptr  18h
.text:00410560
.text:00410560                 jmp     ds:__imp_RegQueryValueExA
.text:00410560 RegQueryValueExA endp
.text:00410560
.text:00410560 ; ---------------------------------------------------------------------------
.text:00410566                 align 10h
.text:00410570
.text:00410570 ; =============== S U B R O U T I N E =======================================
.text:00410570
.text:00410570 ; Attributes: thunk
.text:00410570
.text:00410570 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00410570 RegCloseKey     proc near               ; CODE XREF: .text:0040BB98↑p
.text:00410570
.text:00410570 hKey            = dword ptr  4
.text:00410570
.text:00410570                 jmp     ds:__imp_RegCloseKey
.text:00410570 RegCloseKey     endp
.text:00410570
.text:00410570 ; ---------------------------------------------------------------------------
.text:00410576                 db 2 dup(90h)
.text:00410578                 dd 2 dup(0)
.text:00410580                 dd 21400h, 0
.text:00410588                 dd 0C0h, 46000000h
.text:00410590 ; const IID rclsid
.text:00410590 rclsid          dd 21401h               ; Data1
.text:00410590                                         ; DATA XREF: sub_40DC00+4B↑o
.text:00410590                 dw 0                    ; Data2
.text:00410590                 dw 0                    ; Data3
.text:00410590                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004105A0                 dd 214A0h, 0
.text:004105A8                 dd 0C0h, 46000000h, 214A1h, 0
.text:004105B8                 dd 0C0h, 46000000h, 214D0h, 0
.text:004105C8                 dd 0C0h, 46000000h, 214D1h, 0
.text:004105D8                 dd 0C0h, 46000000h, 214D2h, 0
.text:004105E8                 dd 0C0h, 46000000h, 214E1h, 0
.text:004105F8                 dd 0C0h, 46000000h, 214E2h, 0
.text:00410608                 dd 0C0h, 46000000h, 214E3h, 0
.text:00410618                 dd 0C0h, 46000000h, 214E4h, 0
.text:00410628                 dd 0C0h, 46000000h, 21500h, 0
.text:00410638                 dd 0C0h, 46000000h, 214E5h, 0
.text:00410648                 dd 0C0h, 46000000h, 214E6h, 0
.text:00410658                 dd 0C0h, 46000000h, 214E8h, 0
.text:00410668                 dd 0C0h, 46000000h, 214E9h, 0
.text:00410678                 dd 0C0h, 46000000h, 214EAh, 0
.text:00410688                 dd 0C0h, 46000000h, 214EBh, 0
.text:00410698                 dd 0C0h, 46000000h
.text:004106A0 ; const IID riid
.text:004106A0 riid            dd 214EEh               ; Data1
.text:004106A0                                         ; DATA XREF: sub_40DC00+2B↑o
.text:004106A0                 dw 0                    ; Data2
.text:004106A0                 dw 0                    ; Data3
.text:004106A0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004106B0                 dd 214EFh, 0
.text:004106B8                 dd 0C0h, 46000000h, 214F0h, 0
.text:004106C8                 dd 0C0h, 46000000h, 214F1h, 0
.text:004106D8                 dd 0C0h, 46000000h, 214F2h, 0
.text:004106E8                 dd 0C0h, 46000000h, 214F3h, 0
.text:004106F8                 dd 0C0h, 46000000h, 214F4h, 0
.text:00410708                 dd 0C0h, 46000000h, 214F5h, 0
.text:00410718                 dd 0C0h, 46000000h, 214F6h, 0
.text:00410728                 dd 0C0h, 46000000h, 214F7h, 0
.text:00410738                 dd 0C0h, 46000000h, 214F8h, 0
.text:00410748                 dd 0C0h, 46000000h, 214F9h, 0
.text:00410758                 dd 0C0h, 46000000h, 214FAh, 0
.text:00410768                 dd 0C0h, 46000000h, 214FBh, 0
.text:00410778                 dd 0C0h, 46000000h, 214FCh, 0
.text:00410788                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00410788                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00410788                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00410788                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00410788                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00410788                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00410788                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00410788                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00410788                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00410788                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00410858                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00410868                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00410878                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00410888                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00410898                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00410898                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00410898                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00410898                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00410898                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00410898                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00410898                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00410920 dword_410920    dd 0FFFFFFFFh           ; DATA XREF: .text:0040F3C9↑r
.text:00410920                                         ; .text:loc_40F3F0↑r ...
.text:00410924 dword_410924    dd 0                    ; DATA XREF: .text:loc_40F3FC↑r
.text:00410924                                         ; sub_40F420:loc_40F46D↑r
.text:00410928                 dd 0FFFFFFFFh
.text:0041092C dword_41092C    dd 35h dup(0)           ; DATA XREF: .data:off_4110D4↓o
.text:00410A00                 dd 180h dup(?)
.text:00410A00 _text           ends
.text:00410A00
.data:00411000 ; Section 2. (virtual address 00011000)
.data:00411000 ; Virtual size                  : 000000F0 (    240.)
.data:00411000 ; Section size in file          : 00000200 (    512.)
.data:00411000 ; Offset to raw data for section: 0000FE00
.data:00411000 ; Flags C0000040: Data Readable Writable
.data:00411000 ; Alignment     : default
.data:00411000 ; ===========================================================================
.data:00411000
.data:00411000 ; Segment type: Pure data
.data:00411000 ; Segment permissions: Read/Write
.data:00411000 _data           segment para public 'DATA' use32
.data:00411000                 assume cs:_data
.data:00411000                 ;org 411000h
.data:00411000 dword_411000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00411000                                         ; sub_401080+CC↑r
.data:00411004 dword_411004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00411004                                         ; sub_401080+D4↑r
.data:00411008                 align 10h
.data:00411010 byte_411010     db 1                    ; DATA XREF: sub_401A30+5BF↑r
.data:00411010                                         ; sub_401A30+5EB↑w
.data:00411011                 align 10h
.data:00411020 dword_411020    dd 1                    ; DATA XREF: sub_401A30+50D↑r
.data:00411020                                         ; sub_401A30:loc_401F6D↑r ...
.data:00411024 dword_411024    dd 1                    ; DATA XREF: sub_404A40+11↑r
.data:00411024                                         ; .text:00404AE1↑r
.data:00411028 dword_411028    dd 3Fh                  ; DATA XREF: sub_404A40+7D↑w
.data:00411028                                         ; .text:00404B4D↑w
.data:0041102C                 align 10h
.data:00411030 ; char *Buffer
.data:00411030 Buffer          dd offset aCopyrightC2005
.data:00411030                                         ; DATA XREF: sub_404F70+DC↑r
.data:00411030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00411034                 align 10h
.data:00411040 ; int Code
.data:00411040 Code            dd 1                    ; DATA XREF: sub_405360+6D↑r
.data:00411040                                         ; sub_405360+9A↑r ...
.data:00411044                 align 10h
.data:00411050 dword_411050    dd 1                    ; DATA XREF: sub_407840+22↑r
.data:00411050                                         ; sub_407840+65↑r ...
.data:00411054 dword_411054    dd 100h                 ; DATA XREF: sub_407840+3F↑o
.data:00411054                                         ; sub_407840+1A2↑r ...
.data:00411058 off_411058      dd offset unk_412070    ; DATA XREF: sub_407840+1AA↑r
.data:0041105C ; void *off_41105C
.data:0041105C off_41105C      dd offset dword_411054  ; DATA XREF: sub_407840+39↑r
.data:0041105C                                         ; sub_407840+60↑w ...
.data:00411060 dword_411060    dd 200h                 ; DATA XREF: sub_407FD0+6CD↑r
.data:00411060                                         ; sub_407FD0+6D8↑r ...
.data:00411064 ; char *off_411064
.data:00411064 off_411064      dd offset aComExeBatCmd ; DATA XREF: sub_408880+3D3↑r
.data:00411064                                         ; sub_408880+400↑r ...
.data:00411064                                         ; ".com;.exe;.bat;.cmd"
.data:00411068                 align 10h
.data:00411070 byte_411070     db 41h                  ; DATA XREF: sub_40A550+6B↑w
.data:00411070                                         ; sub_40A550:loc_40A664↑r
.data:00411071                 align 10h
.data:00411080 dword_411080    dd 1                    ; DATA XREF: .text:loc_40B9E7↑r
.data:00411080                                         ; sub_40BFC0+202↑w
.data:00411084                 align 10h
.data:00411090 off_411090      dd offset aNotset       ; DATA XREF: .text:0040C23A↑r
.data:00411090                                         ; .text:0040CE82↑r
.data:00411090                                         ; "notset"
.data:00411094 off_411094      dd offset aNotset       ; DATA XREF: .text:0040C252↑r
.data:00411094                                         ; .text:0040C274↑r ...
.data:00411094                                         ; "notset"
.data:00411098                 align 10h
.data:004110A0 dword_4110A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004110A4                 align 10h
.data:004110B0 ; int Mode
.data:004110B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004110B0                                         ; sub_401080+80↑r ...
.data:004110B4                 align 10h
.data:004110C0 dword_4110C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004110C0                                         ; sub_401080+BA↑r
.data:004110C4                 align 10h
.data:004110D0 dword_4110D0    dd 0                    ; DATA XREF: sub_40F420+9↑r
.data:004110D0                                         ; sub_40F420+1D↑w
.data:004110D4 off_4110D4      dd offset dword_41092C  ; DATA XREF: sub_40F390+6↑r
.data:004110D4                                         ; sub_40F390+17↑r ...
.data:004110D8                 align 1000h
.data:004110D8 _data           ends
.data:004110D8
.bss:00412000 ; Section 3. (virtual address 00012000)
.bss:00412000 ; Virtual size                  : 00000580 (   1408.)
.bss:00412000 ; Section size in file          : 00000000 (      0.)
.bss:00412000 ; Offset to raw data for section: 00000000
.bss:00412000 ; Flags C0000080: Bss Readable Writable
.bss:00412000 ; Alignment     : default
.bss:00412000 ; ===========================================================================
.bss:00412000
.bss:00412000 ; Segment type: Uninitialized
.bss:00412000 ; Segment permissions: Read/Write
.bss:00412000 _bss            segment para public 'BSS' use32
.bss:00412000                 assume cs:_bss
.bss:00412000                 ;org 412000h
.bss:00412000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00412000 byte_412000     db ?                    ; DATA XREF: sub_401A30+3F9↑w
.bss:00412000                                         ; sub_401A30:loc_40204C↑r ...
.bss:00412001                 align 10h
.bss:00412010 byte_412010     db ?                    ; DATA XREF: sub_401A30+9A↑w
.bss:00412010                                         ; sub_401A30:loc_401F45↑w ...
.bss:00412011                 align 10h
.bss:00412020 byte_412020     db ?                    ; DATA XREF: sub_401A30+93↑w
.bss:00412020                                         ; sub_401A30+59A↑w ...
.bss:00412021                 align 10h
.bss:00412030 dword_412030    dd ?                    ; DATA XREF: sub_404A40+9↑o
.bss:00412030                                         ; sub_404A40+17↑w ...
.bss:00412034 dword_412034    dd ?                    ; DATA XREF: sub_404A40+21↑w
.bss:00412034                                         ; .text:00404AF9↑w
.bss:00412038 dword_412038    dd ?                    ; DATA XREF: sub_404A40+77↑r
.bss:00412038                                         ; .text:00404B47↑r
.bss:0041203C dword_41203C    dd ?                    ; DATA XREF: sub_404A40+6B↑r
.bss:0041203C                                         ; .text:00404B3B↑r
.bss:00412040                 db    ? ;
.bss:00412041                 db    ? ;
.bss:00412042                 db    ? ;
.bss:00412043                 db    ? ;
.bss:00412044                 db    ? ;
.bss:00412045                 db    ? ;
.bss:00412046                 db    ? ;
.bss:00412047                 db    ? ;
.bss:00412048                 db    ? ;
.bss:00412049                 db    ? ;
.bss:0041204A                 db    ? ;
.bss:0041204B                 db    ? ;
.bss:0041204C                 db    ? ;
.bss:0041204D                 db    ? ;
.bss:0041204E                 db    ? ;
.bss:0041204F                 db    ? ;
.bss:00412050                 db    ? ;
.bss:00412051                 db    ? ;
.bss:00412052                 db    ? ;
.bss:00412053                 db    ? ;
.bss:00412054                 db    ? ;
.bss:00412055                 db    ? ;
.bss:00412056                 db    ? ;
.bss:00412057                 db    ? ;
.bss:00412058                 db    ? ;
.bss:00412059                 db    ? ;
.bss:0041205A                 db    ? ;
.bss:0041205B                 db    ? ;
.bss:0041205C                 db    ? ;
.bss:0041205D                 db    ? ;
.bss:0041205E                 db    ? ;
.bss:0041205F                 db    ? ;
.bss:00412060 ; char *dword_412060
.bss:00412060 dword_412060    dd ?                    ; DATA XREF: .text:00405334↑w
.bss:00412060                                         ; sub_405360+58↑r
.bss:00412064                 align 10h
.bss:00412070 unk_412070      db    ? ;               ; DATA XREF: sub_407840+100↑o
.bss:00412070                                         ; .data:off_411058↑o
.bss:00412071                 db    ? ;
.bss:00412072                 db    ? ;
.bss:00412073                 db    ? ;
.bss:00412074                 db    ? ;
.bss:00412075                 db    ? ;
.bss:00412076                 db    ? ;
.bss:00412077                 db    ? ;
.bss:00412078                 db    ? ;
.bss:00412079                 db    ? ;
.bss:0041207A                 db    ? ;
.bss:0041207B                 db    ? ;
.bss:0041207C                 db    ? ;
.bss:0041207D                 db    ? ;
.bss:0041207E                 db    ? ;
.bss:0041207F                 db    ? ;
.bss:00412080                 db    ? ;
.bss:00412081                 db    ? ;
.bss:00412082                 db    ? ;
.bss:00412083                 db    ? ;
.bss:00412084                 db    ? ;
.bss:00412085                 db    ? ;
.bss:00412086                 db    ? ;
.bss:00412087                 db    ? ;
.bss:00412088                 db    ? ;
.bss:00412089                 db    ? ;
.bss:0041208A                 db    ? ;
.bss:0041208B                 db    ? ;
.bss:0041208C                 db    ? ;
.bss:0041208D                 db    ? ;
.bss:0041208E                 db    ? ;
.bss:0041208F                 db    ? ;
.bss:00412090                 db    ? ;
.bss:00412091                 db    ? ;
.bss:00412092                 db    ? ;
.bss:00412093                 db    ? ;
.bss:00412094                 db    ? ;
.bss:00412095                 db    ? ;
.bss:00412096                 db    ? ;
.bss:00412097                 db    ? ;
.bss:00412098                 db    ? ;
.bss:00412099                 db    ? ;
.bss:0041209A                 db    ? ;
.bss:0041209B                 db    ? ;
.bss:0041209C                 db    ? ;
.bss:0041209D                 db    ? ;
.bss:0041209E                 db    ? ;
.bss:0041209F                 db    ? ;
.bss:004120A0                 db    ? ;
.bss:004120A1                 db    ? ;
.bss:004120A2                 db    ? ;
.bss:004120A3                 db    ? ;
.bss:004120A4                 db    ? ;
.bss:004120A5                 db    ? ;
.bss:004120A6                 db    ? ;
.bss:004120A7                 db    ? ;
.bss:004120A8                 db    ? ;
.bss:004120A9                 db    ? ;
.bss:004120AA                 db    ? ;
.bss:004120AB                 db    ? ;
.bss:004120AC                 db    ? ;
.bss:004120AD                 db    ? ;
.bss:004120AE                 db    ? ;
.bss:004120AF                 db    ? ;
.bss:004120B0                 db    ? ;
.bss:004120B1                 db    ? ;
.bss:004120B2                 db    ? ;
.bss:004120B3                 db    ? ;
.bss:004120B4                 db    ? ;
.bss:004120B5                 db    ? ;
.bss:004120B6                 db    ? ;
.bss:004120B7                 db    ? ;
.bss:004120B8                 db    ? ;
.bss:004120B9                 db    ? ;
.bss:004120BA                 db    ? ;
.bss:004120BB                 db    ? ;
.bss:004120BC                 db    ? ;
.bss:004120BD                 db    ? ;
.bss:004120BE                 db    ? ;
.bss:004120BF                 db    ? ;
.bss:004120C0                 db    ? ;
.bss:004120C1                 db    ? ;
.bss:004120C2                 db    ? ;
.bss:004120C3                 db    ? ;
.bss:004120C4                 db    ? ;
.bss:004120C5                 db    ? ;
.bss:004120C6                 db    ? ;
.bss:004120C7                 db    ? ;
.bss:004120C8                 db    ? ;
.bss:004120C9                 db    ? ;
.bss:004120CA                 db    ? ;
.bss:004120CB                 db    ? ;
.bss:004120CC                 db    ? ;
.bss:004120CD                 db    ? ;
.bss:004120CE                 db    ? ;
.bss:004120CF                 db    ? ;
.bss:004120D0                 db    ? ;
.bss:004120D1                 db    ? ;
.bss:004120D2                 db    ? ;
.bss:004120D3                 db    ? ;
.bss:004120D4                 db    ? ;
.bss:004120D5                 db    ? ;
.bss:004120D6                 db    ? ;
.bss:004120D7                 db    ? ;
.bss:004120D8                 db    ? ;
.bss:004120D9                 db    ? ;
.bss:004120DA                 db    ? ;
.bss:004120DB                 db    ? ;
.bss:004120DC                 db    ? ;
.bss:004120DD                 db    ? ;
.bss:004120DE                 db    ? ;
.bss:004120DF                 db    ? ;
.bss:004120E0                 db    ? ;
.bss:004120E1                 db    ? ;
.bss:004120E2                 db    ? ;
.bss:004120E3                 db    ? ;
.bss:004120E4                 db    ? ;
.bss:004120E5                 db    ? ;
.bss:004120E6                 db    ? ;
.bss:004120E7                 db    ? ;
.bss:004120E8                 db    ? ;
.bss:004120E9                 db    ? ;
.bss:004120EA                 db    ? ;
.bss:004120EB                 db    ? ;
.bss:004120EC                 db    ? ;
.bss:004120ED                 db    ? ;
.bss:004120EE                 db    ? ;
.bss:004120EF                 db    ? ;
.bss:004120F0                 db    ? ;
.bss:004120F1                 db    ? ;
.bss:004120F2                 db    ? ;
.bss:004120F3                 db    ? ;
.bss:004120F4                 db    ? ;
.bss:004120F5                 db    ? ;
.bss:004120F6                 db    ? ;
.bss:004120F7                 db    ? ;
.bss:004120F8                 db    ? ;
.bss:004120F9                 db    ? ;
.bss:004120FA                 db    ? ;
.bss:004120FB                 db    ? ;
.bss:004120FC                 db    ? ;
.bss:004120FD                 db    ? ;
.bss:004120FE                 db    ? ;
.bss:004120FF                 db    ? ;
.bss:00412100                 db    ? ;
.bss:00412101                 db    ? ;
.bss:00412102                 db    ? ;
.bss:00412103                 db    ? ;
.bss:00412104                 db    ? ;
.bss:00412105                 db    ? ;
.bss:00412106                 db    ? ;
.bss:00412107                 db    ? ;
.bss:00412108                 db    ? ;
.bss:00412109                 db    ? ;
.bss:0041210A                 db    ? ;
.bss:0041210B                 db    ? ;
.bss:0041210C                 db    ? ;
.bss:0041210D                 db    ? ;
.bss:0041210E                 db    ? ;
.bss:0041210F                 db    ? ;
.bss:00412110                 db    ? ;
.bss:00412111                 db    ? ;
.bss:00412112                 db    ? ;
.bss:00412113                 db    ? ;
.bss:00412114                 db    ? ;
.bss:00412115                 db    ? ;
.bss:00412116                 db    ? ;
.bss:00412117                 db    ? ;
.bss:00412118                 db    ? ;
.bss:00412119                 db    ? ;
.bss:0041211A                 db    ? ;
.bss:0041211B                 db    ? ;
.bss:0041211C                 db    ? ;
.bss:0041211D                 db    ? ;
.bss:0041211E                 db    ? ;
.bss:0041211F                 db    ? ;
.bss:00412120                 db    ? ;
.bss:00412121                 db    ? ;
.bss:00412122                 db    ? ;
.bss:00412123                 db    ? ;
.bss:00412124                 db    ? ;
.bss:00412125                 db    ? ;
.bss:00412126                 db    ? ;
.bss:00412127                 db    ? ;
.bss:00412128                 db    ? ;
.bss:00412129                 db    ? ;
.bss:0041212A                 db    ? ;
.bss:0041212B                 db    ? ;
.bss:0041212C                 db    ? ;
.bss:0041212D                 db    ? ;
.bss:0041212E                 db    ? ;
.bss:0041212F                 db    ? ;
.bss:00412130                 db    ? ;
.bss:00412131                 db    ? ;
.bss:00412132                 db    ? ;
.bss:00412133                 db    ? ;
.bss:00412134                 db    ? ;
.bss:00412135                 db    ? ;
.bss:00412136                 db    ? ;
.bss:00412137                 db    ? ;
.bss:00412138                 db    ? ;
.bss:00412139                 db    ? ;
.bss:0041213A                 db    ? ;
.bss:0041213B                 db    ? ;
.bss:0041213C                 db    ? ;
.bss:0041213D                 db    ? ;
.bss:0041213E                 db    ? ;
.bss:0041213F                 db    ? ;
.bss:00412140                 db    ? ;
.bss:00412141                 db    ? ;
.bss:00412142                 db    ? ;
.bss:00412143                 db    ? ;
.bss:00412144                 db    ? ;
.bss:00412145                 db    ? ;
.bss:00412146                 db    ? ;
.bss:00412147                 db    ? ;
.bss:00412148                 db    ? ;
.bss:00412149                 db    ? ;
.bss:0041214A                 db    ? ;
.bss:0041214B                 db    ? ;
.bss:0041214C                 db    ? ;
.bss:0041214D                 db    ? ;
.bss:0041214E                 db    ? ;
.bss:0041214F                 db    ? ;
.bss:00412150                 db    ? ;
.bss:00412151                 db    ? ;
.bss:00412152                 db    ? ;
.bss:00412153                 db    ? ;
.bss:00412154                 db    ? ;
.bss:00412155                 db    ? ;
.bss:00412156                 db    ? ;
.bss:00412157                 db    ? ;
.bss:00412158                 db    ? ;
.bss:00412159                 db    ? ;
.bss:0041215A                 db    ? ;
.bss:0041215B                 db    ? ;
.bss:0041215C                 db    ? ;
.bss:0041215D                 db    ? ;
.bss:0041215E                 db    ? ;
.bss:0041215F                 db    ? ;
.bss:00412160                 db    ? ;
.bss:00412161                 db    ? ;
.bss:00412162                 db    ? ;
.bss:00412163                 db    ? ;
.bss:00412164                 db    ? ;
.bss:00412165                 db    ? ;
.bss:00412166                 db    ? ;
.bss:00412167                 db    ? ;
.bss:00412168                 db    ? ;
.bss:00412169                 db    ? ;
.bss:0041216A                 db    ? ;
.bss:0041216B                 db    ? ;
.bss:0041216C                 db    ? ;
.bss:0041216D                 db    ? ;
.bss:0041216E                 db    ? ;
.bss:0041216F                 db    ? ;
.bss:00412170 dword_412170    dd ?                    ; DATA XREF: .text:loc_4071D1↑o
.bss:00412170                                         ; .text:loc_4071F0↑o ...
.bss:00412174 dword_412174    dd ?                    ; DATA XREF: .text:loc_407270↑o
.bss:00412174                                         ; .text:004076F8↑r ...
.bss:00412178 dword_412178    dd ?                    ; DATA XREF: .text:004076F2↑r
.bss:00412178                                         ; sub_4077A0+2C↑r
.bss:0041217C dword_41217C    dd ?                    ; DATA XREF: .text:004076E6↑r
.bss:0041217C                                         ; sub_4077A0+22↑r
.bss:00412180 dword_412180    dd ?                    ; DATA XREF: .text:00407702↑r
.bss:00412180                                         ; sub_4077A0+36↑r
.bss:00412184 dword_412184    dd ?                    ; DATA XREF: .text:00407712↑r
.bss:00412184                                         ; sub_4077A0+4E↑r
.bss:00412188 dword_412188    dd ?                    ; DATA XREF: .text:0040772F↑r
.bss:00412188                                         ; sub_4077A0+62↑r
.bss:0041218C dword_41218C    dd ?                    ; DATA XREF: .text:00407725↑r
.bss:0041218C                                         ; sub_4077A0+70↑r
.bss:00412190 dword_412190    dd ?                    ; DATA XREF: .text:00407708↑r
.bss:00412190                                         ; sub_4077A0+7A↑r
.bss:00412194                 align 10h
.bss:004121A0 ; char *Str1
.bss:004121A0 Str1            dd ?                    ; DATA XREF: sub_407BC4:loc_407BFD↑w
.bss:004121A0                                         ; sub_407BC4:loc_407D30↑r
.bss:004121A4                 align 10h
.bss:004121B0 dword_4121B0    dd ?                    ; DATA XREF: sub_407BC4+2D↑r
.bss:004121B0                                         ; sub_407BC4+3F↑w
.bss:004121B4                 align 10h
.bss:004121C0 dword_4121C0    dd ?                    ; DATA XREF: sub_408880+100↑r
.bss:004121C0                                         ; sub_408880+308↑w
.bss:004121C4                 align 10h
.bss:004121D0 ; char *Str
.bss:004121D0 Str             dd ?                    ; DATA XREF: sub_408880:loc_408BE4↑r
.bss:004121D0                                         ; sub_408880+3B6↑r ...
.bss:004121D4                 align 10h
.bss:004121E0 dword_4121E0    dd ?                    ; DATA XREF: sub_40A550+1C↑r
.bss:004121E0                                         ; sub_40A550+104↑w
.bss:004121E4                 align 10h
.bss:004121F0 dword_4121F0    dd ?                    ; DATA XREF: sub_40A550+B↑r
.bss:004121F0                                         ; sub_40A550+71↑w
.bss:004121F4                 align 10h
.bss:00412200 dword_412200    dd ?                    ; DATA XREF: sub_40A550+85↑r
.bss:00412200                                         ; sub_40A550+B9↑w
.bss:00412204 dword_412204    dd ?                    ; DATA XREF: sub_40A550+C4↑w
.bss:00412208 dword_412208    dd ?                    ; DATA XREF: sub_40A550+2E↑o
.bss:00412208                                         ; sub_40A550+CF↑w
.bss:0041220C dword_41220C    dd ?                    ; DATA XREF: sub_40A550+DA↑w
.bss:00412210                 align 200h
.bss:00412400 dword_412400    dd ?                    ; DATA XREF: sub_40BEB0+8↑r
.bss:00412400                                         ; sub_40BFC0:loc_40C042↑w ...
.bss:00412404                 align 10h
.bss:00412410 ; struct _OSVERSIONINFOA VersionInformation
.bss:00412410 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40BFC0:loc_40BFE0↑o
.bss:00412410                                         ; sub_40BFC0+2C↑w ...
.bss:004124A4 word_4124A4     dw ?                    ; DATA XREF: sub_40BFC0:loc_40C073↑r
.bss:004124A6                 align 4
.bss:004124A8 word_4124A8     dw ?                    ; DATA XREF: .text:loc_40BA36↑r
.bss:004124A8                                         ; .text:0040BA64↑r ...
.bss:004124AA byte_4124AA     db ?                    ; DATA XREF: .text:0040B9F5↑r
.bss:004124AB                 align 10h
.bss:004124B0 dword_4124B0    dd ?                    ; DATA XREF: sub_40BFC0+6↑r
.bss:004124B0                                         ; sub_40BFC0+75↑w
.bss:004124B4                 align 10h
.bss:004124C0 dword_4124C0    dd ?                    ; DATA XREF: sub_40D480+6E↑r
.bss:004124C0                                         ; sub_40D480+9A↑r ...
.bss:004124C4 dword_4124C4    dd ?                    ; DATA XREF: sub_40D480:loc_40D4E8↑r
.bss:004124C4                                         ; sub_40D480+A0↑r ...
.bss:004124C8                 align 10h
.bss:004124D0 dword_4124D0    dd ?                    ; DATA XREF: sub_40D990↑r
.bss:004124D0                                         ; .text:loc_40DBD2↑w
.bss:004124D4                 align 10h
.bss:004124E0 dword_4124E0    dd ?                    ; DATA XREF: sub_401A30+40↑w
.bss:004124E0                                         ; sub_401A30+227↑r ...
.bss:004124E4                 align 20h
.bss:00412500 ; char dword_412500[]
.bss:00412500 dword_412500    dd ?                    ; DATA XREF: sub_401A30+12B↑r
.bss:00412500                                         ; sub_401A30+209↑w ...
.bss:00412504                 align 10h
.bss:00412510 dword_412510    dd ?                    ; CODE XREF: sub_407BC4+63↑p
.bss:00412510                                         ; DATA XREF: sub_407AC0+1E↑r ...
.bss:00412514                 align 10h
.bss:00412520 dword_412520    dd ?                    ; DATA XREF: sub_407AC0+4E↑w
.bss:00412520                                         ; sub_407BC4+AB↑w
.bss:00412524                 db    ? ;
.bss:00412525                 db    ? ;
.bss:00412526                 db    ? ;
.bss:00412527                 db    ? ;
.bss:00412528                 db    ? ;
.bss:00412529                 db    ? ;
.bss:0041252A                 db    ? ;
.bss:0041252B                 db    ? ;
.bss:0041252C                 db    ? ;
.bss:0041252D                 db    ? ;
.bss:0041252E                 db    ? ;
.bss:0041252F                 db    ? ;
.bss:00412530                 db    ? ;
.bss:00412531                 db    ? ;
.bss:00412532                 db    ? ;
.bss:00412533                 db    ? ;
.bss:00412534                 db    ? ;
.bss:00412535                 db    ? ;
.bss:00412536                 db    ? ;
.bss:00412537                 db    ? ;
.bss:00412538                 db    ? ;
.bss:00412539                 db    ? ;
.bss:0041253A                 db    ? ;
.bss:0041253B                 db    ? ;
.bss:0041253C                 db    ? ;
.bss:0041253D                 db    ? ;
.bss:0041253E                 db    ? ;
.bss:0041253F                 db    ? ;
.bss:00412540                 db    ? ;
.bss:00412541                 db    ? ;
.bss:00412542                 db    ? ;
.bss:00412543                 db    ? ;
.bss:00412544                 db    ? ;
.bss:00412545                 db    ? ;
.bss:00412546                 db    ? ;
.bss:00412547                 db    ? ;
.bss:00412548                 db    ? ;
.bss:00412549                 db    ? ;
.bss:0041254A                 db    ? ;
.bss:0041254B                 db    ? ;
.bss:0041254C                 db    ? ;
.bss:0041254D                 db    ? ;
.bss:0041254E                 db    ? ;
.bss:0041254F                 db    ? ;
.bss:00412550 dword_412550    dd ?                    ; DATA XREF: sub_407BC4+13↑r
.bss:00412554                 align 1000h
.bss:00412554 _bss            ends
.bss:00412554
.idata:00413000 ; Section 4. (virtual address 00013000)
.idata:00413000 ; Virtual size                  : 00000E00 (   3584.)
.idata:00413000 ; Section size in file          : 00000E00 (   3584.)
.idata:00413000 ; Offset to raw data for section: 00010000
.idata:00413000 ; Flags C0000040: Data Readable Writable
.idata:00413000 ; Alignment     : default
.idata:00413000 ; ===========================================================================
.idata:00413000
.idata:00413000 ; Segment type: Externs
.idata:00413000 ; _idata
.idata:00413000
.idata:00413001
.idata:004132B8 ;
.idata:004132B8 ; Imports from libintl3.dll
.idata:004132B8 ;
.idata:004132B8                 extrn __imp_libintl_bindtextdomain:dword
.idata:004132B8                                         ; CODE XREF: sub_401A30+70↑p
.idata:004132B8                                         ; DATA XREF: sub_401A30+70↑r ...
.idata:004132BC                 extrn libintl_gettext:dword
.idata:004132BC                                         ; CODE XREF: sub_401A30+197↑p
.idata:004132BC                                         ; sub_401A30+1CA↑p ...
.idata:004132C0                 extrn libintl_textdomain:dword
.idata:004132C0                                         ; CODE XREF: sub_401A30+7D↑p
.idata:004132C0                                         ; DATA XREF: sub_401A30+7D↑r ...
.idata:004132C4
.idata:004132CC ;
.idata:004132CC ; Imports from ADVAPI32.DLL
.idata:004132CC ;
.idata:004132CC ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004132CC                 extrn __imp_RegCloseKey:dword
.idata:004132CC                                         ; DATA XREF: RegCloseKey↑r
.idata:004132D0 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004132D0                 extrn __imp_RegOpenKeyExA:dword
.idata:004132D0                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004132D4 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004132D4                 extrn __imp_RegQueryValueExA:dword
.idata:004132D4                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004132D8
.idata:004132E0 ;
.idata:004132E0 ; Imports from KERNEL32.dll
.idata:004132E0 ;
.idata:004132E0 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004132E0                 extrn __imp_AreFileApisANSI:dword
.idata:004132E0                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004132E4 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004132E4                 extrn __imp_CloseHandle:dword
.idata:004132E4                                         ; DATA XREF: CloseHandle↑r
.idata:004132E8 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004132E8                 extrn __imp_CreateDirectoryA:dword
.idata:004132E8                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004132EC ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004132EC                 extrn __imp_CreateFileA:dword
.idata:004132EC                                         ; DATA XREF: CreateFileA↑r
.idata:004132F0 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004132F0                 extrn __imp_DeviceIoControl:dword
.idata:004132F0                                         ; DATA XREF: DeviceIoControl↑r
.idata:004132F4 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004132F4                 extrn __imp_ExitProcess:dword
.idata:004132F4                                         ; DATA XREF: ExitProcess↑r
.idata:004132F8 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004132F8                 extrn __imp_FindClose:dword
.idata:004132F8                                         ; DATA XREF: FindClose↑r
.idata:004132FC ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004132FC                 extrn __imp_FindFirstFileA:dword
.idata:004132FC                                         ; DATA XREF: FindFirstFileA↑r
.idata:00413300 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00413300                 extrn __imp_FindNextFileA:dword
.idata:00413300                                         ; DATA XREF: FindNextFileA↑r
.idata:00413304 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00413304                 extrn __imp_FreeLibrary:dword
.idata:00413304                                         ; DATA XREF: FreeLibrary↑r
.idata:00413308 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00413308                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00413308                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041330C ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041330C                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041330C                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:00413310 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:00413310                 extrn __imp_GetDriveTypeA:dword
.idata:00413310                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00413314 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00413314                 extrn __imp_GetFileAttributesA:dword
.idata:00413314                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00413318 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00413318                 extrn __imp_GetFileInformationByHandle:dword
.idata:00413318                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041331C ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041331C                 extrn __imp_GetFileSize:dword
.idata:0041331C                                         ; DATA XREF: GetFileSize↑r
.idata:00413320 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00413320                 extrn __imp_GetFileType:dword
.idata:00413320                                         ; DATA XREF: GetFileType↑r
.idata:00413324 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00413324                 extrn __imp_GetFullPathNameA:dword
.idata:00413324                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00413328 ; DWORD (__stdcall *GetLastError)()
.idata:00413328                 extrn __imp_GetLastError:dword
.idata:00413328                                         ; DATA XREF: GetLastError↑r
.idata:0041332C ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041332C                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041332C                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:00413330 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:00413330                 extrn __imp_GetModuleFileNameA:dword
.idata:00413330                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00413334 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00413334                 extrn __imp_GetModuleHandleA:dword
.idata:00413334                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00413338 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00413338                 extrn __imp_GetProcAddress:dword
.idata:00413338                                         ; DATA XREF: GetProcAddress↑r
.idata:0041333C ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041333C                 extrn __imp_GetProcessHeap:dword
.idata:0041333C                                         ; DATA XREF: GetProcessHeap↑r
.idata:00413340 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:00413340                 extrn __imp_GetShortPathNameA:dword
.idata:00413340                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00413344 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00413344                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00413344                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00413348 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00413348                 extrn __imp_GetTimeZoneInformation:dword
.idata:00413348                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041334C ; DWORD (__stdcall *GetVersion)()
.idata:0041334C                 extrn __imp_GetVersion:dword
.idata:0041334C                                         ; DATA XREF: GetVersion↑r
.idata:00413350 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00413350                 extrn __imp_GetVersionExA:dword
.idata:00413350                                         ; DATA XREF: GetVersionExA↑r
.idata:00413354 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00413354                 extrn __imp_GetVolumeInformationA:dword
.idata:00413354                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00413358 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00413358                 extrn __imp_HeapAlloc:dword
.idata:00413358                                         ; DATA XREF: HeapAlloc↑r
.idata:0041335C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041335C                 extrn __imp_HeapFree:dword
.idata:0041335C                                         ; DATA XREF: HeapFree↑r
.idata:00413360 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00413360                 extrn __imp_LoadLibraryA:dword
.idata:00413360                                         ; DATA XREF: LoadLibraryA↑r
.idata:00413364 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00413364                 extrn __imp_MultiByteToWideChar:dword
.idata:00413364                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00413368 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00413368                 extrn __imp_PeekNamedPipe:dword
.idata:00413368                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041336C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041336C                 extrn __imp_SetErrorMode:dword
.idata:0041336C                                         ; DATA XREF: SetErrorMode↑r
.idata:00413370 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00413370                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00413370                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00413374 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00413374                 extrn __imp_UnlockFile:dword
.idata:00413374                                         ; DATA XREF: UnlockFile↑r
.idata:00413378 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00413378                 extrn __imp_lstrcmpiA:dword
.idata:00413378                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041337C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041337C                 extrn __imp_lstrcpyA:dword
.idata:0041337C                                         ; DATA XREF: lstrcpyA↑r
.idata:00413380
.idata:00413388 ;
.idata:00413388 ; Imports from msvcrt.dll
.idata:00413388 ;
.idata:00413388 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00413388                 extrn __imp__chmod:dword
.idata:00413388                                         ; DATA XREF: _chmod↑r
.idata:0041338C ; int (__cdecl *_close)(int FileHandle)
.idata:0041338C                 extrn __imp__close:dword
.idata:0041338C                                         ; DATA XREF: _close↑r
.idata:00413390 ; int (__cdecl *_getpid)()
.idata:00413390                 extrn __imp__getpid:dword
.idata:00413390                                         ; DATA XREF: _getpid↑r
.idata:00413394 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00413394                 extrn __imp__isatty:dword
.idata:00413394                                         ; DATA XREF: _isatty↑r
.idata:00413398 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00413398                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041339C ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0041339C                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:004133A0 ; char *(__cdecl *_strdup)(const char *String)
.idata:004133A0                 extrn __imp__strdup:dword
.idata:004133A0                                         ; DATA XREF: _strdup↑r
.idata:004133A4 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004133A4                 extrn __imp__stricmp:dword
.idata:004133A4                                         ; DATA XREF: _stricmp↑r
.idata:004133A8
.idata:004133B0 ;
.idata:004133B0 ; Imports from MSVCP60.DLL
.idata:004133B0 ;
.idata:004133B0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004133B0                 extrn __imp_mbrtowc:dword
.idata:004133B0                                         ; DATA XREF: mbrtowc↑r
.idata:004133B4
.idata:004133BC ;
.idata:004133BC ; Imports from msvcrt.dll
.idata:004133BC ;
.idata:004133BC                 extrn __imp___getmainargs:dword
.idata:004133BC                                         ; DATA XREF: __getmainargs↑r
.idata:004133C0 ; int _mb_cur_max
.idata:004133C0                 extrn __mb_cur_max:dword
.idata:004133C0                                         ; DATA XREF: sub_4054B0+58↑r
.idata:004133C0                                         ; sub_406700+7↑r ...
.idata:004133C4 ; char ***(__cdecl *__p__environ)()
.idata:004133C4                 extrn __imp___p__environ:dword
.idata:004133C4                                         ; DATA XREF: __p__environ↑r
.idata:004133C8 ; int *(__cdecl *__p__fmode)()
.idata:004133C8                 extrn __imp___p__fmode:dword
.idata:004133C8                                         ; DATA XREF: __p__fmode↑r
.idata:004133CC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004133CC                 extrn __set_app_type:dword
.idata:004133CC                                         ; CODE XREF: start+D↑p
.idata:004133CC                                         ; .text:0040102D↑p
.idata:004133CC                                         ; DATA XREF: ...
.idata:004133D0                 extrn __imp__assert:dword
.idata:004133D0                                         ; DATA XREF: _assert↑r
.idata:004133D4 ; void (__cdecl *_cexit)()
.idata:004133D4                 extrn __imp__cexit:dword
.idata:004133D4                                         ; DATA XREF: _cexit↑r
.idata:004133D8 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004133D8                 extrn __imp__close_0:dword
.idata:004133D8                                         ; DATA XREF: _close_0↑r
.idata:004133DC ; int *(__cdecl *_errno)()
.idata:004133DC                 extrn __imp__errno:dword
.idata:004133DC                                         ; DATA XREF: _errno↑r
.idata:004133E0 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004133E0                 extrn __imp__fdopen:dword
.idata:004133E0                                         ; DATA XREF: _fdopen↑r
.idata:004133E4 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004133E4                 extrn __imp__filelengthi64:dword
.idata:004133E4                                         ; DATA XREF: _filelengthi64↑r
.idata:004133E8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004133E8                 extrn __imp__flsbuf:dword
.idata:004133E8                                         ; DATA XREF: _flsbuf↑r
.idata:004133EC ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004133EC                 extrn __imp__get_osfhandle:dword
.idata:004133EC                                         ; DATA XREF: _get_osfhandle↑r
.idata:004133F0 ; FILE iob[]
.idata:004133F0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004133F0                                         ; sub_401080+75↑r ...
.idata:004133F4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004133F4                 extrn __imp__isctype:dword
.idata:004133F4                                         ; DATA XREF: _isctype↑r
.idata:004133F8 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:004133F8                 extrn __imp__lseeki64:dword
.idata:004133F8                                         ; DATA XREF: _lseeki64↑r
.idata:004133FC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004133FC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004133FC                                         ; DATA XREF: .text:0040106C↑r
.idata:00413400 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:00413400                 extrn __imp__open_0:dword
.idata:00413400                                         ; DATA XREF: _open_0↑r
.idata:00413404 ; const unsigned __int16 *pctype
.idata:00413404                 extrn _pctype:dword     ; DATA XREF: sub_4054B0:loc_406102↑r
.idata:00413404                                         ; sub_406700:loc_406DF4↑r ...
.idata:00413408 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00413408                 extrn __imp__setmode:dword
.idata:00413408                                         ; DATA XREF: _setmode↑r
.idata:0041340C ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041340C                 extrn __imp__stricmp_0:dword
.idata:0041340C                                         ; DATA XREF: _stricmp_0↑r
.idata:00413410 ; void (__cdecl __noreturn *abort)()
.idata:00413410                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00413414 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00413414                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00413414                                         ; DATA XREF: sub_401040+C↑r
.idata:00413418 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00413418                 extrn __imp_calloc:dword
.idata:00413418                                         ; DATA XREF: calloc↑r
.idata:0041341C ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0041341C                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00413420 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00413420                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00413424 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00413424                 extrn __imp_fclose:dword
.idata:00413424                                         ; DATA XREF: fclose↑r
.idata:00413428 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00413428                 extrn __imp_fflush:dword
.idata:00413428                                         ; DATA XREF: fflush↑r
.idata:0041342C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041342C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00413430 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00413430                 extrn __imp_fprintf:dword
.idata:00413430                                         ; DATA XREF: fprintf↑r
.idata:00413434 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00413434                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00413438 ; void (__cdecl *free)(void *Block)
.idata:00413438                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041343C ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0041343C                 extrn __imp_fwrite:dword
.idata:0041343C                                         ; DATA XREF: fwrite↑r
.idata:00413440 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00413440                 extrn __imp_getenv:dword
.idata:00413440                                         ; DATA XREF: getenv↑r
.idata:00413444 ; int (__cdecl *isalpha)(int C)
.idata:00413444                 extrn __imp_isalpha:dword
.idata:00413444                                         ; DATA XREF: isalpha↑r
.idata:00413448 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00413448                 extrn __imp_iswctype:dword
.idata:00413448                                         ; DATA XREF: iswctype↑r
.idata:0041344C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041344C                 extrn __imp_malloc:dword
.idata:0041344C                                         ; DATA XREF: malloc↑r
.idata:00413450 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:00413450                 extrn __imp_memchr:dword
.idata:00413450                                         ; DATA XREF: memchr↑r
.idata:00413454 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00413454                 extrn __imp_memcpy:dword
.idata:00413454                                         ; DATA XREF: memcpy↑r
.idata:00413458 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00413458                 extrn __imp_memset:dword
.idata:00413458                                         ; DATA XREF: memset↑r
.idata:0041345C ; int (*printf)(const char *const Format, ...)
.idata:0041345C                 extrn __imp_printf:dword
.idata:0041345C                                         ; DATA XREF: printf↑r
.idata:00413460 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00413460                 extrn __imp_realloc:dword
.idata:00413460                                         ; DATA XREF: realloc↑r
.idata:00413464 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00413464                 extrn __imp_setlocale:dword
.idata:00413464                                         ; DATA XREF: setlocale↑r
.idata:00413468 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00413468                 extrn __imp_signal:dword
.idata:00413468                                         ; DATA XREF: signal↑r
.idata:0041346C ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041346C                 extrn __imp_sprintf:dword
.idata:0041346C                                         ; DATA XREF: sprintf↑r
.idata:00413470 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00413470                 extrn __imp_sscanf:dword
.idata:00413470                                         ; DATA XREF: sscanf↑r
.idata:00413474 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00413474                 extrn __imp_strcat:dword
.idata:00413474                                         ; DATA XREF: strcat↑r
.idata:00413478 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00413478                 extrn __imp_strchr:dword
.idata:00413478                                         ; DATA XREF: strchr↑r
.idata:0041347C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041347C                 extrn __imp_strcmp:dword
.idata:0041347C                                         ; DATA XREF: strcmp↑r
.idata:00413480 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00413480                 extrn __imp_strcpy:dword
.idata:00413480                                         ; DATA XREF: strcpy↑r
.idata:00413484 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00413484                 extrn __imp_strerror:dword
.idata:00413484                                         ; DATA XREF: strerror↑r
.idata:00413488 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00413488                 extrn __imp_strlen:dword
.idata:00413488                                         ; DATA XREF: strlen↑r
.idata:0041348C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041348C                 extrn __imp_strncmp:dword
.idata:0041348C                                         ; DATA XREF: strncmp↑r
.idata:00413490 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00413490                 extrn __imp_strncpy:dword
.idata:00413490                                         ; DATA XREF: strncpy↑r
.idata:00413494 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00413494                 extrn __imp_strpbrk:dword
.idata:00413494                                         ; DATA XREF: strpbrk↑r
.idata:00413498 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00413498                 extrn __imp_strrchr:dword
.idata:00413498                                         ; DATA XREF: strrchr↑r
.idata:0041349C ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041349C                 extrn __imp_strspn:dword
.idata:0041349C                                         ; DATA XREF: strspn↑r
.idata:004134A0 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004134A0                 extrn __imp_strstr:dword
.idata:004134A0                                         ; DATA XREF: strstr↑r
.idata:004134A4 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:004134A4                 extrn __imp_strtol:dword
.idata:004134A4                                         ; DATA XREF: strtol↑r
.idata:004134A8 ; int (__cdecl *toupper)(int C)
.idata:004134A8                 extrn __imp_toupper:dword
.idata:004134A8                                         ; DATA XREF: toupper↑r
.idata:004134AC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004134AC                 extrn __imp_vfprintf:dword
.idata:004134AC                                         ; DATA XREF: vfprintf↑r
.idata:004134B0
.idata:004134B8 ;
.idata:004134B8 ; Imports from OLE32.dll
.idata:004134B8 ;
.idata:004134B8 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004134B8                 extrn __imp_CoCreateInstance:dword
.idata:004134B8                                         ; DATA XREF: CoCreateInstance↑r
.idata:004134BC ; void (__stdcall *CoUninitialize)()
.idata:004134BC                 extrn __imp_CoUninitialize:dword
.idata:004134BC                                         ; DATA XREF: CoUninitialize↑r
.idata:004134C0 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004134C0                 extrn __imp_OleInitialize:dword
.idata:004134C0                                         ; DATA XREF: OleInitialize↑r
.idata:004134C4
.idata:004134C4
.idata:004134C4
.idata:004134C4                 end start
