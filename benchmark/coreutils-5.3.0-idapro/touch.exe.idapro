.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : C6627232409107B3DB5096EAF7DC11B27F34B2FC53DF3A3A8394C5E1E093FC00
.text:00401000 ; Input MD5    : A5297E58B61AE30D539E2DA2083F2580
.text:00401000 ; Input CRC32  : C3B7DF43
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/touch.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A250 (Wed Apr 20 18:41:20 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00010C40 (  68672.)
.text:00401000 ; Section size in file          : 00010E00 (  69120.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401A00+76↓p
.text:00401040                                         ; .text:00410E40↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_410DE0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_412000
.text:004010A2                 mov     edx, dword_4120A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_412004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4120C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4120C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_410DB0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_412000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_412004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401A00
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_410DE0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aTime_0         db 'time',0             ; DATA XREF: .text:off_4012C0↓o
.text:00401285 aNoCreate       db 'no-create',0        ; DATA XREF: .text:004012D0↓o
.text:0040128F aDate           db 'date',0             ; DATA XREF: .text:004012E0↓o
.text:00401294 aFile           db 'file',0             ; DATA XREF: .text:004012F0↓o
.text:00401299 aReference      db 'reference',0        ; DATA XREF: .text:00401300↓o
.text:004012A3 aHelp           db 'help',0             ; DATA XREF: .text:00401310↓o
.text:004012A8 aVersion        db 'version',0          ; DATA XREF: .text:00401320↓o
.text:004012B0                 align 20h
.text:004012C0 off_4012C0      dd offset aTime_0       ; DATA XREF: sub_401A00+A8↓o
.text:004012C0                                         ; "time"
.text:004012C4                 dd 1, 0
.text:004012CC                 dd 80h
.text:004012D0                 dd offset aNoCreate     ; "no-create"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 63h
.text:004012E0                 dd offset aDate         ; "date"
.text:004012E4                 dd 1, 0
.text:004012EC                 dd 64h
.text:004012F0                 dd offset aFile         ; "file"
.text:004012F4                 dd 1, 0
.text:004012FC                 dd 72h
.text:00401300                 dd offset aReference    ; "reference"
.text:00401304                 dd 1, 0
.text:0040130C                 dd 72h
.text:00401310                 dd offset aHelp         ; "help"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 0FFFFFF7Eh
.text:00401320                 dd offset aVersion      ; "version"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401340 aAtime          db 'atime',0            ; DATA XREF: .text:off_401360↓o
.text:00401346 aAccess         db 'access',0           ; DATA XREF: .text:00401364↓o
.text:0040134D aUse            db 'use',0              ; DATA XREF: .text:00401368↓o
.text:00401351 aMtime          db 'mtime',0            ; DATA XREF: .text:0040136C↓o
.text:00401357 aModify         db 'modify',0           ; DATA XREF: .text:00401370↓o
.text:0040135E                 align 10h
.text:00401360 off_401360      dd offset aAtime        ; DATA XREF: sub_401A00+32E↓o
.text:00401360                                         ; "atime"
.text:00401364                 dd offset aAccess       ; "access"
.text:00401368                 dd offset aUse          ; "use"
.text:0040136C                 dd offset aMtime        ; "mtime"
.text:00401370                 dd offset aModify       ; "modify"
.text:00401374                 align 8
.text:00401378 dword_401378    dd 1                    ; DATA XREF: sub_401A00+322↓o
.text:00401378                                         ; sub_401A00+346↓r
.text:0040137C                 dd 2 dup(1), 2 dup(2)
.text:0040138C ; const char Locale
.text:0040138C Locale          db 0                    ; DATA XREF: sub_401A00+33↓o
.text:0040138D                 align 20h
.text:004013A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013A0                                         ; DATA XREF: sub_401A00+4D↓o
.text:004013C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401A00+55↓o
.text:004013C3                                         ; sub_401A00+62↓o
.text:004013CD ; const char aAcdFmrT[]
.text:004013CD aAcdFmrT        db 'acd:fmr:t:',0       ; DATA XREF: sub_401A00+B0↓o
.text:004013D8                 align 10h
.text:004013E0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013E0                                         ; DATA XREF: sub_401A00:loc_401B04↓o
.text:004013E0                                         ; sub_402280+C↓o
.text:00401407 aRandySmith     db 'Randy Smith',0      ; DATA XREF: sub_401A00+15D↓o
.text:00401413                 align 10h
.text:00401420 aArnoldRobbinsJ db 'Arnold Robbins, Jim Kingdon, David MacKenzie',0
.text:00401420                                         ; DATA XREF: sub_401A00+165↓o
.text:0040144D aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: sub_401A00+170↓o
.text:00401458 a530            db '5.3.0',0            ; DATA XREF: sub_401A00+178↓o
.text:0040145E aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401A00+180↓o
.text:0040146C ; const FILE stru_40146C
.text:0040146C stru_40146C     FILE <63756F74h, 0B48D0068h, 26h, 27BC8D00h, 0, 67617355h, 25203A65h, \
.text:0040146C                                         ; DATA XREF: sub_401A00+188↓o
.text:0040146C                       4F5B2073h>
.text:0040148C                 db  50h ; P
.text:0040148D                 db  54h ; T
.text:0040148E                 db  49h ; I
.text:0040148F                 db  4Fh ; O
.text:00401490                 db  4Eh ; N
.text:00401491                 db  5Dh ; ]
.text:00401492                 db  2Eh ; .
.text:00401493                 db  2Eh ; .
.text:00401494                 db  2Eh ; .
.text:00401495                 db  20h
.text:00401496                 db  46h ; F
.text:00401497                 db  49h ; I
.text:00401498                 db  4Ch ; L
.text:00401499                 db  45h ; E
.text:0040149A                 db  2Eh ; .
.text:0040149B                 db  2Eh ; .
.text:0040149C                 db  2Eh ; .
.text:0040149D                 db  0Ah
.text:0040149E                 db    0
.text:0040149F                 align 10h
.text:004014A0 aUpdateTheAcces db 'Update the access and modification times of each FILE to the curr'
.text:004014A0                                         ; DATA XREF: sub_401A00+1C0↓o
.text:004014A0                                         ; sub_402280+5F↓o
.text:004014A0                 db 'ent time.',0Ah
.text:004014A0                 db 0Ah,0
.text:004014ED                 align 20h
.text:00401500 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401500                                         ; DATA XREF: sub_401A00+1E2↓o
.text:00401500                                         ; sub_402280+81↓o
.text:00401500                 db 'ns too.',0Ah,0
.text:0040154A                 align 20h
.text:00401560 aAChangeOnlyThe db '  -a                     change only the access time',0Ah
.text:00401560                                         ; DATA XREF: sub_401A00+204↓o
.text:00401560                                         ; sub_402280+A3↓o
.text:00401560                 db '  -c, --no-create        do not create any files',0Ah
.text:00401560                 db '  -d, --date=STRING      parse STRING and use it instead of curre'
.text:00401560                 db 'nt time',0Ah
.text:00401560                 db '  -f                     (ignored)',0Ah
.text:00401560                 db '  -m                     change only the modification time',0Ah,0
.text:0040166E                 align 20h
.text:00401680 aRReferenceFile db '  -r, --reference=FILE   use this file',27h,'s times instead of c'
.text:00401680                                         ; DATA XREF: sub_401A00+226↓o
.text:00401680                                         ; sub_402280+C5↓o
.text:00401680                 db 'urrent time',0Ah
.text:00401680                 db '  -t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of cur'
.text:00401680                 db 'rent time',0Ah
.text:00401680                 db '  --time=WORD            change the specified time:',0Ah
.text:00401680                 db '                           WORD is access, atime, or use: equival'
.text:00401680                 db 'ent to -a',0Ah
.text:00401680                 db '                           WORD is modify or mtime: equivalent to'
.text:00401680                 db ' -m',0Ah,0
.text:004017D7                 align 10h
.text:004017E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004017E0                                         ; DATA XREF: sub_401A00+248↓o
.text:004017E0                                         ; sub_402280+E7↓o
.text:0040180D                 align 20h
.text:00401820 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401820                                         ; DATA XREF: sub_401A00+26A↓o
.text:00401820                                         ; sub_402280+109↓o
.text:00401856                 align 10h
.text:00401860 aNoteThatTheDAn db 0Ah                  ; DATA XREF: sub_401A00+28C↓o
.text:00401860                                         ; sub_402280+12B↓o
.text:00401860                 db 'Note that the -d and -t options accept different time-date format'
.text:00401860                 db 's.',0Ah,0
.text:004018A6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401A00+2AE↓o
.text:004018A6                                         ; sub_402280+14D↓o
.text:004018A6                 db 'Report bugs to <%s>.',0Ah,0
.text:004018BD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004018BD                                         ; DATA XREF: sub_401A00+2BB↓o
.text:004018BD                                         ; sub_402280+15A↓o
.text:004018D3 ; const char aTime[]
.text:004018D3 aTime           db '--time',0           ; DATA XREF: sub_401A00+33A↓o
.text:004018DA aInvalidDateFor db 'invalid date format %s',0
.text:004018DA                                         ; DATA XREF: sub_401A00+3BA↓o
.text:004018DA                                         ; sub_401A00+6BE↓o ...
.text:004018F1                 db 0EBh, 0Dh, 90h
.text:004018F4                 align 10h
.text:00401900 aCannotSpecifyT db 'cannot specify times from more than one source',0
.text:00401900                                         ; DATA XREF: sub_401A00:loc_401E43↓o
.text:0040192F aMissingFileOpe db 'missing file operand',0
.text:0040192F                                         ; DATA XREF: sub_401A00+518↓o
.text:00401944 aCannotGetTimeO db 'cannot get time of day',0
.text:00401944                                         ; DATA XREF: sub_401A00:loc_401F70↓o
.text:0040195B ; const char VarName[]
.text:0040195B VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401A00+60F↓o
.text:0040196B                 align 20h
.text:00401980 aWarningTouchSI db 'warning: `touch %s',27h,' is obsolete; use `touch -t %04ld%02d%02'
.text:00401980                                         ; DATA XREF: sub_401A00+642↓o
.text:00401980                 db 'd%02d%02d.%02d',27h,0
.text:004019CB                 align 20h
.text:004019E0 aFailedToGetAtt db 'failed to get attributes of %s',0
.text:004019E0                                         ; DATA XREF: sub_401A00+82A↓o
.text:004019E0                                         ; sub_402420+72↓o
.text:004019FF                 align 10h
.text:00401A00
.text:00401A00 ; =============== S U B R O U T I N E =======================================
.text:00401A00
.text:00401A00 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401A00
.text:00401A00 sub_401A00      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401A00
.text:00401A00 Category        = dword ptr -0E8h
.text:00401A00 Locale          = dword ptr -0E4h
.text:00401A00 var_E0          = dword ptr -0E0h
.text:00401A00 var_DC          = byte ptr -0DCh
.text:00401A00 var_D8          = byte ptr -0D8h
.text:00401A00 var_D4          = dword ptr -0D4h
.text:00401A00 var_D0          = dword ptr -0D0h
.text:00401A00 var_CC          = dword ptr -0CCh
.text:00401A00 var_C8          = dword ptr -0C8h
.text:00401A00 var_C4          = dword ptr -0C4h
.text:00401A00 var_AC          = dword ptr -0ACh
.text:00401A00 var_A8          = dword ptr -0A8h
.text:00401A00 var_A4          = byte ptr -0A4h
.text:00401A00 var_A0          = byte ptr -0A0h
.text:00401A00 var_9C          = byte ptr -9Ch
.text:00401A00 var_98          = dword ptr -98h
.text:00401A00 var_94          = byte ptr -94h
.text:00401A00 var_90          = byte ptr -90h
.text:00401A00 var_8A          = byte ptr -8Ah
.text:00401A00 var_89          = byte ptr -89h
.text:00401A00 var_88          = dword ptr -88h
.text:00401A00 var_50          = dword ptr -50h
.text:00401A00 var_4C          = dword ptr -4Ch
.text:00401A00 var_48          = dword ptr -48h
.text:00401A00 var_44          = dword ptr -44h
.text:00401A00 arg_0           = dword ptr  8
.text:00401A00 arg_4           = dword ptr  0Ch
.text:00401A00
.text:00401A00                 push    ebp
.text:00401A01                 xor     eax, eax
.text:00401A03                 mov     ebp, esp
.text:00401A05                 push    edi
.text:00401A06                 push    esi
.text:00401A07                 push    ebx
.text:00401A08                 sub     esp, 0DCh
.text:00401A0E                 xor     ebx, ebx
.text:00401A10                 mov     edi, [ebp+arg_4]
.text:00401A13                 and     esp, 0FFFFFFF0h
.text:00401A16                 mov     esi, [ebp+arg_0]
.text:00401A19                 call    __alloca
.text:00401A1E                 call    sub_410E80
.text:00401A23                 mov     [ebp+var_89], 0
.text:00401A2A                 mov     edx, [edi]
.text:00401A2C                 mov     [ebp+var_8A], 1
.text:00401A33                 mov     [esp+0E8h+Locale], offset Locale ; Locale
.text:00401A3B                 mov     ds:dword_413530, edx
.text:00401A41                 mov     [esp+0E8h+Category], 0 ; Category
.text:00401A48                 call    setlocale
.text:00401A4D                 mov     [esp+0E8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401A55                 mov     [esp+0E8h+Category], offset aCoreutils ; "coreutils"
.text:00401A5C                 call    ds:__imp_libintl_bindtextdomain
.text:00401A62                 mov     [esp+0E8h+Category], offset aCoreutils ; "coreutils"
.text:00401A69                 call    ds:libintl_textdomain
.text:00401A6F                 mov     [esp+0E8h+Category], offset sub_4047B0 ; void (__cdecl *)()
.text:00401A76                 call    sub_401040
.text:00401A7B                 mov     ds:byte_413020, 0
.text:00401A82                 xor     edx, edx
.text:00401A84                 mov     ds:dword_413000, edx
.text:00401A8A                 mov     ds:byte_413010, 0
.text:00401A91                 jmp     short loc_401AA0
.text:00401A91 ; ---------------------------------------------------------------------------
.text:00401A93                 align 10h
.text:00401AA0
.text:00401AA0 loc_401AA0:                             ; CODE XREF: sub_401A00+91↑j
.text:00401AA0                                         ; sub_401A00+102↓j ...
.text:00401AA0                 mov     dword ptr [esp+0E8h+var_D8], 0 ; int
.text:00401AA8                 mov     dword ptr [esp+0E8h+var_DC], offset off_4012C0 ; char
.text:00401AB0                 mov     [esp+0E8h+var_E0], offset aAcdFmrT ; "acd:fmr:t:"
.text:00401AB8                 mov     [esp+0E8h+Locale], edi ; int
.text:00401ABC                 mov     [esp+0E8h+Category], esi ; int
.text:00401ABF                 call    sub_404640
.text:00401AC4                 cmp     eax, 0FFFFFFFFh
.text:00401AC7                 jz      loc_401E13
.text:00401ACD                 cmp     eax, 64h ; 'd'
.text:00401AD0                 jz      loc_401E08
.text:00401AD6                 cmp     eax, 64h ; 'd'
.text:00401AD9                 jg      loc_401CD0
.text:00401ADF                 cmp     eax, 0FFFFFF7Eh
.text:00401AE4                 jz      loc_401BA1
.text:00401AEA                 cmp     eax, 0FFFFFF7Eh
.text:00401AEF                 jle     short loc_401B48
.text:00401AF1                 cmp     eax, 61h ; 'a'
.text:00401AF4                 jz      short loc_401B3C
.text:00401AF6                 cmp     eax, 63h ; 'c'
.text:00401AF9                 jnz     short loc_401B04
.text:00401AFB                 mov     ds:byte_413010, 1
.text:00401B02                 jmp     short loc_401AA0
.text:00401B04 ; ---------------------------------------------------------------------------
.text:00401B04
.text:00401B04 loc_401B04:                             ; CODE XREF: sub_401A00+F9↑j
.text:00401B04                                         ; sub_401A00+14D↓j ...
.text:00401B04                 mov     [esp+0E8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401B0B                 call    ds:libintl_gettext
.text:00401B11                 mov     ebx, ds:_iob
.text:00401B17                 mov     esi, ds:dword_413530
.text:00401B1D                 add     ebx, 40h ; '@'
.text:00401B20                 mov     [esp+0E8h+var_E0], esi
.text:00401B24                 mov     [esp+0E8h+Locale], eax ; Format
.text:00401B28                 mov     [esp+0E8h+Category], ebx ; Stream
.text:00401B2B                 call    fprintf
.text:00401B30                 mov     [esp+0E8h+Category], 1 ; Code
.text:00401B37
.text:00401B37 loc_401B37:                             ; CODE XREF: sub_401A00+19F↓j
.text:00401B37                                         ; sub_401A00+537↓j
.text:00401B37                 call    exit
.text:00401B3C ; ---------------------------------------------------------------------------
.text:00401B3C
.text:00401B3C loc_401B3C:                             ; CODE XREF: sub_401A00+F4↑j
.text:00401B3C                 or      ds:dword_413000, 1
.text:00401B43                 jmp     loc_401AA0
.text:00401B48 ; ---------------------------------------------------------------------------
.text:00401B48
.text:00401B48 loc_401B48:                             ; CODE XREF: sub_401A00+EF↑j
.text:00401B48                 cmp     eax, 0FFFFFF7Dh
.text:00401B4D                 jnz     short loc_401B04
.text:00401B4F                 mov     [esp+0E8h+var_CC], 0
.text:00401B57                 mov     edx, ds:_iob
.text:00401B5D                 mov     [esp+0E8h+var_D0], offset aRandySmith ; "Randy Smith"
.text:00401B65                 mov     [esp+0E8h+var_D4], offset aArnoldRobbinsJ ; "Arnold Robbins, Jim Kingdon, David MacK"...
.text:00401B6D                 add     edx, 20h ; ' '
.text:00401B70                 mov     dword ptr [esp+0E8h+var_D8], offset aPaulRubin ; "Paul Rubin"
.text:00401B78                 mov     dword ptr [esp+0E8h+var_DC], offset a530 ; "5.3.0"
.text:00401B80                 mov     [esp+0E8h+var_E0], offset aGnuCoreutils ; "GNU coreutils"
.text:00401B88                 mov     [esp+0E8h+Locale], offset stru_40146C ; FILE *
.text:00401B90                 mov     [esp+0E8h+Category], edx ; FILE *
.text:00401B93                 call    sub_404240
.text:00401B98
.text:00401B98 loc_401B98:                             ; CODE XREF: sub_401A00+2CB↓j
.text:00401B98                 mov     [esp+0E8h+Category], 0
.text:00401B9F                 jmp     short loc_401B37
.text:00401BA1 ; ---------------------------------------------------------------------------
.text:00401BA1
.text:00401BA1 loc_401BA1:                             ; CODE XREF: sub_401A00+E4↑j
.text:00401BA1                 mov     [esp+0E8h+Category], offset stru_40146C._charbuf
.text:00401BA8                 call    ds:libintl_gettext
.text:00401BAE                 mov     ecx, ds:dword_413530
.text:00401BB4                 mov     [esp+0E8h+Category], eax ; Format
.text:00401BB7                 mov     [esp+0E8h+Locale], ecx
.text:00401BBB                 call    printf
.text:00401BC0                 mov     [esp+0E8h+Category], offset aUpdateTheAcces ; "Update the access and modification time"...
.text:00401BC7                 call    ds:libintl_gettext
.text:00401BCD                 mov     edi, ds:_iob
.text:00401BD3                 add     edi, 20h ; ' '
.text:00401BD6                 mov     [esp+0E8h+Locale], edi ; Stream
.text:00401BDA                 mov     [esp+0E8h+Category], eax ; Buffer
.text:00401BDD                 call    fputs
.text:00401BE2                 mov     [esp+0E8h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401BE9                 call    ds:libintl_gettext
.text:00401BEF                 mov     esi, ds:_iob
.text:00401BF5                 add     esi, 20h ; ' '
.text:00401BF8                 mov     [esp+0E8h+Locale], esi ; Stream
.text:00401BFC                 mov     [esp+0E8h+Category], eax ; Buffer
.text:00401BFF                 call    fputs
.text:00401C04                 mov     [esp+0E8h+Category], offset aAChangeOnlyThe ; "  -a                     change only th"...
.text:00401C0B                 call    ds:libintl_gettext
.text:00401C11                 mov     ebx, ds:_iob
.text:00401C17                 add     ebx, 20h ; ' '
.text:00401C1A                 mov     [esp+0E8h+Locale], ebx ; Stream
.text:00401C1E                 mov     [esp+0E8h+Category], eax ; Buffer
.text:00401C21                 call    fputs
.text:00401C26                 mov     [esp+0E8h+Category], offset aRReferenceFile ; "  -r, --reference=FILE   use this file'"...
.text:00401C2D                 call    ds:libintl_gettext
.text:00401C33                 mov     ecx, ds:_iob
.text:00401C39                 add     ecx, 20h ; ' '
.text:00401C3C                 mov     [esp+0E8h+Locale], ecx ; Stream
.text:00401C40                 mov     [esp+0E8h+Category], eax ; Buffer
.text:00401C43                 call    fputs
.text:00401C48                 mov     [esp+0E8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401C4F                 call    ds:libintl_gettext
.text:00401C55                 mov     edi, ds:_iob
.text:00401C5B                 add     edi, 20h ; ' '
.text:00401C5E                 mov     [esp+0E8h+Locale], edi ; Stream
.text:00401C62                 mov     [esp+0E8h+Category], eax ; Buffer
.text:00401C65                 call    fputs
.text:00401C6A                 mov     [esp+0E8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401C71                 call    ds:libintl_gettext
.text:00401C77                 mov     esi, ds:_iob
.text:00401C7D                 add     esi, 20h ; ' '
.text:00401C80                 mov     [esp+0E8h+Locale], esi ; Stream
.text:00401C84                 mov     [esp+0E8h+Category], eax ; Buffer
.text:00401C87                 call    fputs
.text:00401C8C                 mov     [esp+0E8h+Category], offset aNoteThatTheDAn ; "\nNote that the -d and -t options accep"...
.text:00401C93                 call    ds:libintl_gettext
.text:00401C99                 mov     ebx, ds:_iob
.text:00401C9F                 add     ebx, 20h ; ' '
.text:00401CA2                 mov     [esp+0E8h+Locale], ebx ; Stream
.text:00401CA6                 mov     [esp+0E8h+Category], eax ; Buffer
.text:00401CA9                 call    fputs
.text:00401CAE                 mov     [esp+0E8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401CB5                 call    ds:libintl_gettext
.text:00401CBB                 mov     [esp+0E8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401CC3                 mov     [esp+0E8h+Category], eax ; Format
.text:00401CC6                 call    printf
.text:00401CCB                 jmp     loc_401B98
.text:00401CD0 ; ---------------------------------------------------------------------------
.text:00401CD0
.text:00401CD0 loc_401CD0:                             ; CODE XREF: sub_401A00+D9↑j
.text:00401CD0                 cmp     eax, 72h ; 'r'
.text:00401CD3                 jz      loc_401DF0
.text:00401CD9                 cmp     eax, 72h ; 'r'
.text:00401CDC                 jg      short loc_401D00
.text:00401CDE                 cmp     eax, 66h ; 'f'
.text:00401CE1                 jz      loc_401AA0
.text:00401CE7                 cmp     eax, 6Dh ; 'm'
.text:00401CEA                 jnz     loc_401B04
.text:00401CF0                 or      ds:dword_413000, 2
.text:00401CF7                 jmp     loc_401AA0
.text:00401CF7 ; ---------------------------------------------------------------------------
.text:00401CFC                 align 10h
.text:00401D00
.text:00401D00 loc_401D00:                             ; CODE XREF: sub_401A00+2DC↑j
.text:00401D00                 cmp     eax, 74h ; 't'
.text:00401D03                 jz      short loc_401D58
.text:00401D05                 add     eax, 0FFFFFF80h
.text:00401D08                 jnz     loc_401B04
.text:00401D0E                 mov     dword ptr [esp+0E8h+var_D8], 4 ; int
.text:00401D16                 mov     edx, off_412010
.text:00401D1C                 mov     ecx, ds:dword_413550
.text:00401D22                 mov     dword ptr [esp+0E8h+var_DC], offset dword_401378 ; int
.text:00401D2A                 mov     [esp+0E8h+var_D4], edx ; int
.text:00401D2E                 mov     [esp+0E8h+var_E0], offset off_401360 ; int
.text:00401D36                 mov     [esp+0E8h+Locale], ecx ; char *
.text:00401D3A                 mov     [esp+0E8h+Category], offset aTime ; "--time"
.text:00401D41                 call    sub_4029E0
.text:00401D46                 mov     edx, ds:dword_401378[eax*4]
.text:00401D4D                 or      ds:dword_413000, edx
.text:00401D53                 jmp     loc_401AA0
.text:00401D58 ; ---------------------------------------------------------------------------
.text:00401D58
.text:00401D58 loc_401D58:                             ; CODE XREF: sub_401A00+303↑j
.text:00401D58                 mov     [esp+0E8h+var_E0], 0Dh ; int
.text:00401D60                 mov     edx, ds:dword_413550
.text:00401D66                 mov     [esp+0E8h+Category], offset Time ; int
.text:00401D6D                 mov     [esp+0E8h+Locale], edx ; char *
.text:00401D71                 call    sub_404280
.text:00401D76                 test    al, al
.text:00401D78                 jz      short loc_401DA6
.text:00401D7A
.text:00401D7A loc_401D7A:                             ; CODE XREF: sub_401A00+3E9↓j
.text:00401D7A                 mov     [ebp+var_89], 1
.text:00401D81                 xor     ecx, ecx
.text:00401D83                 mov     edx, ds:Time
.text:00401D89                 mov     ds:dword_413044, ecx
.text:00401D8F                 mov     ecx, ds:dword_413044
.text:00401D95                 mov     ds:dword_413048, edx
.text:00401D9B                 mov     ds:dword_41304C, ecx
.text:00401DA1                 jmp     loc_401AA0
.text:00401DA6 ; ---------------------------------------------------------------------------
.text:00401DA6
.text:00401DA6 loc_401DA6:                             ; CODE XREF: sub_401A00+378↑j
.text:00401DA6                 mov     edx, ds:dword_413550
.text:00401DAC                 mov     [esp+0E8h+Category], edx ; char *
.text:00401DAF                 call    sub_4049A0
.text:00401DB4                 mov     dword ptr [ebp+var_90], eax
.text:00401DBA                 mov     [esp+0E8h+Category], offset aInvalidDateFor ; "invalid date format %s"
.text:00401DC1                 call    ds:libintl_gettext
.text:00401DC7                 mov     [esp+0E8h+Locale], 0 ; ErrorMessage
.text:00401DCF                 mov     ecx, dword ptr [ebp+var_90]
.text:00401DD5                 mov     [esp+0E8h+Category], 1 ; Code
.text:00401DDC                 mov     dword ptr [esp+0E8h+var_DC], ecx ; char
.text:00401DE0                 mov     [esp+0E8h+var_E0], eax ; char *
.text:00401DE4                 call    sub_409010
.text:00401DE9                 jmp     short loc_401D7A
.text:00401DE9 ; ---------------------------------------------------------------------------
.text:00401DEB                 align 10h
.text:00401DF0
.text:00401DF0 loc_401DF0:                             ; CODE XREF: sub_401A00+2D3↑j
.text:00401DF0                 mov     ds:byte_413020, 1
.text:00401DF7                 mov     ecx, ds:dword_413550
.text:00401DFD                 mov     ds:dword_413050, ecx
.text:00401E03                 jmp     loc_401AA0
.text:00401E08 ; ---------------------------------------------------------------------------
.text:00401E08
.text:00401E08 loc_401E08:                             ; CODE XREF: sub_401A00+D0↑j
.text:00401E08                 mov     ebx, ds:dword_413550
.text:00401E0E                 jmp     loc_401AA0
.text:00401E13 ; ---------------------------------------------------------------------------
.text:00401E13
.text:00401E13 loc_401E13:                             ; CODE XREF: sub_401A00+C7↑j
.text:00401E13                 mov     ecx, ds:dword_413000
.text:00401E19                 test    ecx, ecx
.text:00401E1B                 jnz     short loc_401E27
.text:00401E1D                 mov     eax, 3
.text:00401E22                 mov     ds:dword_413000, eax
.text:00401E27
.text:00401E27 loc_401E27:                             ; CODE XREF: sub_401A00+41B↑j
.text:00401E27                 cmp     [ebp+var_89], 0
.text:00401E2E                 jz      loc_402270
.text:00401E34                 movzx   eax, ds:byte_413020
.text:00401E3B                 test    al, al
.text:00401E3D                 jnz     short loc_401E43
.text:00401E3F                 test    ebx, ebx
.text:00401E41                 jz      short loc_401E6D
.text:00401E43
.text:00401E43 loc_401E43:                             ; CODE XREF: sub_401A00+43D↑j
.text:00401E43                 mov     [esp+0E8h+Category], offset aCannotSpecifyT ; "cannot specify times from more than one"...
.text:00401E4A
.text:00401E4A loc_401E4A:                             ; CODE XREF: sub_401A00+51F↓j
.text:00401E4A                 call    ds:libintl_gettext
.text:00401E50                 mov     [esp+0E8h+Locale], 0 ; ErrorMessage
.text:00401E58                 mov     [esp+0E8h+Category], 0 ; Code
.text:00401E5F                 mov     [esp+0E8h+var_E0], eax ; char *
.text:00401E63                 call    sub_409010
.text:00401E68                 jmp     loc_401B04
.text:00401E6D ; ---------------------------------------------------------------------------
.text:00401E6D
.text:00401E6D loc_401E6D:                             ; CODE XREF: sub_401A00+441↑j
.text:00401E6D                                         ; sub_401A00+877↓j
.text:00401E6D                 test    al, al
.text:00401E6F                 jnz     loc_4020F2
.text:00401E75                 test    ebx, ebx
.text:00401E77                 jz      short loc_401EB8
.text:00401E79                 mov     [esp+0E8h+var_E0], 0 ; __time32_t *
.text:00401E81                 mov     [esp+0E8h+Locale], ebx ; int
.text:00401E85                 mov     [esp+0E8h+Category], offset Time ; int
.text:00401E8C                 call    sub_406830
.text:00401E91                 test    al, al
.text:00401E93                 jz      loc_4020B0
.text:00401E99
.text:00401E99 loc_401E99:                             ; CODE XREF: sub_401A00+6ED↓j
.text:00401E99                 mov     [ebp+var_89], 1
.text:00401EA0                 mov     ebx, ds:Time
.text:00401EA6                 mov     ecx, ds:dword_413044
.text:00401EAC                 mov     ds:dword_413048, ebx
.text:00401EB2                 mov     ds:dword_41304C, ecx
.text:00401EB8
.text:00401EB8 loc_401EB8:                             ; CODE XREF: sub_401A00+477↑j
.text:00401EB8                 cmp     [ebp+var_89], 0
.text:00401EBF                 jnz     short loc_401F0F
.text:00401EC1                 mov     eax, dword_412020
.text:00401EC6                 mov     ecx, esi
.text:00401EC8                 sub     ecx, eax
.text:00401ECA                 dec     ecx
.text:00401ECB                 jg      loc_401FB5
.text:00401ED1
.text:00401ED1 loc_401ED1:                             ; CODE XREF: sub_401A00+5BF↓j
.text:00401ED1                                         ; sub_401A00+5E8↓j ...
.text:00401ED1                 cmp     [ebp+var_89], 0
.text:00401ED8                 jnz     short loc_401F0F
.text:00401EDA                 cmp     ds:dword_413000, 3
.text:00401EE1                 jz      loc_401FA9
.text:00401EE7                 mov     [esp+0E8h+Category], offset Time
.text:00401EEE                 call    sub_403C90
.text:00401EF3                 test    eax, eax
.text:00401EF5                 jnz     short loc_401F70
.text:00401EF7
.text:00401EF7 loc_401EF7:                             ; CODE XREF: sub_401A00+5A4↓j
.text:00401EF7                 mov     edx, ds:Time
.text:00401EFD                 mov     ebx, ds:dword_413044
.text:00401F03                 mov     ds:dword_413048, edx
.text:00401F09                 mov     ds:dword_41304C, ebx
.text:00401F0F
.text:00401F0F loc_401F0F:                             ; CODE XREF: sub_401A00+4BF↑j
.text:00401F0F                                         ; sub_401A00+4D8↑j ...
.text:00401F0F                 mov     eax, dword_412020
.text:00401F14                 cmp     eax, esi
.text:00401F16                 jnz     short loc_401F24
.text:00401F18                 mov     [esp+0E8h+Category], offset aMissingFileOpe ; "missing file operand"
.text:00401F1F                 jmp     loc_401E4A
.text:00401F24 ; ---------------------------------------------------------------------------
.text:00401F24
.text:00401F24 loc_401F24:                             ; CODE XREF: sub_401A00+516↑j
.text:00401F24                 cmp     eax, esi
.text:00401F26                 jl      short loc_401F3C
.text:00401F28
.text:00401F28 loc_401F28:                             ; CODE XREF: sub_401A00+56D↓j
.text:00401F28                 xor     ebx, ebx
.text:00401F2A                 cmp     [ebp+var_8A], 0
.text:00401F31                 setz    bl
.text:00401F34                 mov     [esp+0E8h+Category], ebx
.text:00401F37                 jmp     loc_401B37
.text:00401F3C ; ---------------------------------------------------------------------------
.text:00401F3C
.text:00401F3C loc_401F3C:                             ; CODE XREF: sub_401A00+526↑j
.text:00401F3C                                         ; sub_401A00+56B↓j
.text:00401F3C                 mov     ecx, [edi+eax*4]
.text:00401F3F                 xor     ebx, ebx
.text:00401F41                 mov     [esp+0E8h+Category], ecx ; FileName
.text:00401F44                 call    sub_402420
.text:00401F49                 test    al, al
.text:00401F4B                 jz      short loc_401F58
.text:00401F4D                 cmp     [ebp+var_8A], 0
.text:00401F54                 jz      short loc_401F58
.text:00401F56                 mov     bl, 1
.text:00401F58
.text:00401F58 loc_401F58:                             ; CODE XREF: sub_401A00+54B↑j
.text:00401F58                                         ; sub_401A00+554↑j
.text:00401F58                 mov     [ebp+var_8A], bl
.text:00401F5E                 mov     eax, dword_412020
.text:00401F63                 inc     eax
.text:00401F64                 mov     dword_412020, eax
.text:00401F69                 cmp     eax, esi
.text:00401F6B                 jl      short loc_401F3C
.text:00401F6D                 jmp     short loc_401F28
.text:00401F6D ; ---------------------------------------------------------------------------
.text:00401F6F                 align 10h
.text:00401F70
.text:00401F70 loc_401F70:                             ; CODE XREF: sub_401A00+4F5↑j
.text:00401F70                 mov     [esp+0E8h+Category], offset aCannotGetTimeO ; "cannot get time of day"
.text:00401F77                 call    ds:libintl_gettext
.text:00401F7D                 mov     [ebp+var_AC], eax
.text:00401F83                 call    _errno
.text:00401F88                 mov     ecx, [ebp+var_AC]
.text:00401F8E                 mov     [esp+0E8h+var_E0], ecx ; char *
.text:00401F92                 mov     edx, [eax]
.text:00401F94                 mov     [esp+0E8h+Category], 1 ; Code
.text:00401F9B                 mov     [esp+0E8h+Locale], edx ; ErrorMessage
.text:00401F9F                 call    sub_409010
.text:00401FA4                 jmp     loc_401EF7
.text:00401FA9 ; ---------------------------------------------------------------------------
.text:00401FA9
.text:00401FA9 loc_401FA9:                             ; CODE XREF: sub_401A00+4E1↑j
.text:00401FA9                 mov     ds:byte_413030, 1
.text:00401FB0                 jmp     loc_401F0F
.text:00401FB5 ; ---------------------------------------------------------------------------
.text:00401FB5
.text:00401FB5 loc_401FB5:                             ; CODE XREF: sub_401A00+4CB↑j
.text:00401FB5                 call    sub_403D20
.text:00401FBA                 cmp     eax, 30DAFh
.text:00401FBF                 jg      loc_401ED1
.text:00401FC5                 mov     [esp+0E8h+var_E0], 2 ; int
.text:00401FCD                 mov     ebx, dword_412020
.text:00401FD3                 mov     edx, [edi+ebx*4]
.text:00401FD6                 mov     [esp+0E8h+Category], offset Time ; int
.text:00401FDD                 mov     [esp+0E8h+Locale], edx ; char *
.text:00401FE1                 call    sub_404280
.text:00401FE6                 test    al, al
.text:00401FE8                 jz      loc_401ED1
.text:00401FEE                 mov     [ebp+var_89], 1
.text:00401FF5                 xor     ebx, ebx
.text:00401FF7                 mov     edx, ds:Time
.text:00401FFD                 mov     ds:dword_413044, ebx
.text:00402003                 mov     ecx, ds:dword_413044
.text:00402009                 mov     ds:dword_413048, edx
.text:0040200F                 mov     [esp+0E8h+Category], offset VarName ; "POSIXLY_CORRECT"
.text:00402016                 mov     ds:dword_41304C, ecx
.text:0040201C                 call    getenv
.text:00402021                 test    eax, eax
.text:00402023                 jz      short loc_402030
.text:00402025
.text:00402025 loc_402025:                             ; CODE XREF: sub_401A00+6AA↓j
.text:00402025                 inc     dword_412020
.text:0040202B                 jmp     loc_401ED1
.text:00402030 ; ---------------------------------------------------------------------------
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401A00+623↑j
.text:00402030                 mov     [esp+0E8h+Category], offset Time ; Time
.text:00402037                 call    localtime
.text:0040203C                 mov     [ebp+var_A8], eax
.text:00402042                 mov     [esp+0E8h+Category], offset aWarningTouchSI ; "warning: `touch %s' is obsolete; use `t"...
.text:00402049                 call    ds:libintl_gettext
.text:0040204F                 mov     ecx, [ebp+var_A8]
.text:00402055                 mov     ebx, [ecx]
.text:00402057                 mov     [esp+0E8h+var_C4], ebx
.text:0040205B                 mov     ebx, [ecx+4]
.text:0040205E                 mov     [esp+0E8h+var_C8], ebx
.text:00402062                 mov     ebx, [ecx+8]
.text:00402065                 mov     [esp+0E8h+var_CC], ebx
.text:00402069                 mov     ebx, [ecx+0Ch]
.text:0040206C                 mov     [esp+0E8h+var_D0], ebx
.text:00402070                 mov     ebx, [ecx+10h]
.text:00402073                 inc     ebx
.text:00402074                 mov     [esp+0E8h+var_D4], ebx
.text:00402078                 mov     ebx, [ecx+14h]
.text:0040207B                 add     ebx, 76Ch
.text:00402081                 mov     dword ptr [esp+0E8h+var_D8], ebx
.text:00402085                 mov     ebx, dword_412020
.text:0040208B                 mov     ecx, [edi+ebx*4]
.text:0040208E                 mov     [esp+0E8h+var_E0], eax ; char *
.text:00402092                 mov     [esp+0E8h+Locale], 0 ; ErrorMessage
.text:0040209A                 mov     dword ptr [esp+0E8h+var_DC], ecx ; char
.text:0040209E                 mov     [esp+0E8h+Category], 0 ; Code
.text:004020A5                 call    sub_409010
.text:004020AA                 jmp     loc_402025
.text:004020AA ; ---------------------------------------------------------------------------
.text:004020AF                 align 10h
.text:004020B0
.text:004020B0 loc_4020B0:                             ; CODE XREF: sub_401A00+493↑j
.text:004020B0                 mov     [esp+0E8h+Category], ebx ; char *
.text:004020B3                 call    sub_4049A0
.text:004020B8                 mov     dword ptr [ebp+var_A4], eax
.text:004020BE                 mov     [esp+0E8h+Category], offset aInvalidDateFor ; "invalid date format %s"
.text:004020C5                 call    ds:libintl_gettext
.text:004020CB                 mov     [esp+0E8h+Locale], 0 ; ErrorMessage
.text:004020D3                 mov     edx, dword ptr [ebp+var_A4]
.text:004020D9                 mov     [esp+0E8h+Category], 1 ; Code
.text:004020E0                 mov     dword ptr [esp+0E8h+var_DC], edx ; char
.text:004020E4                 mov     [esp+0E8h+var_E0], eax ; char *
.text:004020E8                 call    sub_409010
.text:004020ED                 jmp     loc_401E99
.text:004020F2 ; ---------------------------------------------------------------------------
.text:004020F2
.text:004020F2 loc_4020F2:                             ; CODE XREF: sub_401A00+46F↑j
.text:004020F2                 mov     edx, ds:dword_413050
.text:004020F8                 lea     ecx, [ebp+var_88]
.text:004020FE                 mov     [esp+0E8h+Locale], ecx ; int
.text:00402102                 mov     [esp+0E8h+Category], edx ; char *
.text:00402105                 call    sub_40BDC0
.text:0040210A                 test    eax, eax
.text:0040210C                 jnz     loc_402216
.text:00402112
.text:00402112 loc_402112:                             ; CODE XREF: sub_401A00+868↓j
.text:00402112                 mov     ecx, [ebp+var_50]
.text:00402115                 test    ebx, ebx
.text:00402117                 mov     edx, [ebp+var_4C]
.text:0040211A                 mov     ds:Time, ecx
.text:00402120                 mov     ecx, [ebp+var_48]
.text:00402123                 mov     ds:dword_413044, edx
.text:00402129                 mov     edx, [ebp+var_44]
.text:0040212C                 mov     ds:dword_413048, ecx
.text:00402132                 mov     ds:dword_41304C, edx
.text:00402138                 jz      loc_401F0F
.text:0040213E                 mov     eax, ds:dword_413000
.text:00402143                 test    al, 1
.text:00402145                 jnz     short loc_4021B1
.text:00402147
.text:00402147 loc_402147:                             ; CODE XREF: sub_401A00+7D2↓j
.text:00402147                 test    al, 2
.text:00402149                 jz      loc_401F0F
.text:0040214F                 mov     [esp+0E8h+var_E0], offset dword_413048 ; __time32_t *
.text:00402157                 mov     [esp+0E8h+Locale], ebx ; int
.text:0040215B                 mov     [esp+0E8h+Category], offset dword_413048 ; int
.text:00402162                 call    sub_406830
.text:00402167                 test    al, al
.text:00402169                 jnz     loc_401F0F
.text:0040216F                 mov     [esp+0E8h+Category], ebx ; char *
.text:00402172                 call    sub_4049A0
.text:00402177                 mov     dword ptr [ebp+var_A0], eax
.text:0040217D                 mov     [esp+0E8h+Category], offset aInvalidDateFor ; "invalid date format %s"
.text:00402184                 call    ds:libintl_gettext
.text:0040218A                 mov     [esp+0E8h+Locale], 0 ; ErrorMessage
.text:00402192                 mov     ebx, dword ptr [ebp+var_A0]
.text:00402198                 mov     [esp+0E8h+Category], 1 ; Code
.text:0040219F                 mov     dword ptr [esp+0E8h+var_DC], ebx ; char
.text:004021A3                 mov     [esp+0E8h+var_E0], eax ; char *
.text:004021A7                 call    sub_409010
.text:004021AC                 jmp     loc_401F0F
.text:004021B1 ; ---------------------------------------------------------------------------
.text:004021B1
.text:004021B1 loc_4021B1:                             ; CODE XREF: sub_401A00+745↑j
.text:004021B1                 mov     [esp+0E8h+var_E0], offset Time ; __time32_t *
.text:004021B9                 mov     [esp+0E8h+Locale], ebx ; int
.text:004021BD                 mov     [esp+0E8h+Category], offset Time ; int
.text:004021C4                 call    sub_406830
.text:004021C9                 test    al, al
.text:004021CB                 jz      short loc_4021D7
.text:004021CD
.text:004021CD loc_4021CD:                             ; CODE XREF: sub_401A00+814↓j
.text:004021CD                 mov     eax, ds:dword_413000
.text:004021D2                 jmp     loc_402147
.text:004021D7 ; ---------------------------------------------------------------------------
.text:004021D7
.text:004021D7 loc_4021D7:                             ; CODE XREF: sub_401A00+7CB↑j
.text:004021D7                 mov     [esp+0E8h+Category], ebx ; char *
.text:004021DA                 call    sub_4049A0
.text:004021DF                 mov     dword ptr [ebp+var_9C], eax
.text:004021E5                 mov     [esp+0E8h+Category], offset aInvalidDateFor ; "invalid date format %s"
.text:004021EC                 call    ds:libintl_gettext
.text:004021F2                 mov     [esp+0E8h+Locale], 0 ; ErrorMessage
.text:004021FA                 mov     edx, dword ptr [ebp+var_9C]
.text:00402200                 mov     [esp+0E8h+Category], 1 ; Code
.text:00402207                 mov     dword ptr [esp+0E8h+var_DC], edx ; char
.text:0040220B                 mov     [esp+0E8h+var_E0], eax ; char *
.text:0040220F                 call    sub_409010
.text:00402214                 jmp     short loc_4021CD
.text:00402216 ; ---------------------------------------------------------------------------
.text:00402216
.text:00402216 loc_402216:                             ; CODE XREF: sub_401A00+70C↑j
.text:00402216                 mov     ecx, ds:dword_413050
.text:0040221C                 mov     [esp+0E8h+Category], ecx ; char *
.text:0040221F                 call    sub_4049A0
.text:00402224                 mov     dword ptr [ebp+var_94], eax
.text:0040222A                 mov     [esp+0E8h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:00402231                 call    ds:libintl_gettext
.text:00402237                 mov     [ebp+var_98], eax
.text:0040223D                 call    _errno
.text:00402242                 mov     edx, dword ptr [ebp+var_94]
.text:00402248                 mov     ecx, [ebp+var_98]
.text:0040224E                 mov     dword ptr [esp+0E8h+var_DC], edx ; char
.text:00402252                 mov     [esp+0E8h+var_E0], ecx ; char *
.text:00402256                 mov     edx, [eax]
.text:00402258                 mov     [esp+0E8h+Category], 1 ; Code
.text:0040225F                 mov     [esp+0E8h+Locale], edx ; ErrorMessage
.text:00402263                 call    sub_409010
.text:00402268                 jmp     loc_402112
.text:00402268 ; ---------------------------------------------------------------------------
.text:0040226D                 align 10h
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_401A00+42E↑j
.text:00402270                 movzx   eax, ds:byte_413020
.text:00402277                 jmp     loc_401E6D
.text:00402277 sub_401A00      endp
.text:00402277
.text:00402277 ; ---------------------------------------------------------------------------
.text:0040227C                 align 10h
.text:00402280
.text:00402280 ; =============== S U B R O U T I N E =======================================
.text:00402280
.text:00402280 ; Attributes: noreturn
.text:00402280
.text:00402280 ; void __cdecl __noreturn sub_402280(int Code)
.text:00402280 sub_402280      proc near               ; CODE XREF: sub_402C50+A↓p
.text:00402280
.text:00402280 Stream          = dword ptr -1Ch
.text:00402280 Format          = dword ptr -18h
.text:00402280 var_14          = dword ptr -14h
.text:00402280 Code            = dword ptr  4
.text:00402280
.text:00402280                 push    ebx
.text:00402281                 sub     esp, 18h
.text:00402284                 mov     ebx, [esp+1Ch+Code]
.text:00402288                 test    ebx, ebx
.text:0040228A                 jz      short loc_4022C0
.text:0040228C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402293                 call    ds:libintl_gettext
.text:00402299                 mov     edx, ds:_iob
.text:0040229F                 mov     ecx, ds:dword_413530
.text:004022A5                 add     edx, 40h ; '@'
.text:004022A8                 mov     [esp+1Ch+var_14], ecx
.text:004022AC                 mov     [esp+1Ch+Format], eax ; Format
.text:004022B0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004022B3                 call    fprintf
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_402280+16A↓j
.text:004022B8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004022BB                 call    exit
.text:004022C0 ; ---------------------------------------------------------------------------
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_402280+A↑j
.text:004022C0                 mov     [esp+1Ch+Stream], offset stru_40146C._charbuf
.text:004022C7                 call    ds:libintl_gettext
.text:004022CD                 mov     ecx, ds:dword_413530
.text:004022D3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004022D6                 mov     [esp+1Ch+Format], ecx
.text:004022DA                 call    printf
.text:004022DF                 mov     [esp+1Ch+Stream], offset aUpdateTheAcces ; "Update the access and modification time"...
.text:004022E6                 call    ds:libintl_gettext
.text:004022EC                 mov     ecx, ds:_iob
.text:004022F2                 add     ecx, 20h ; ' '
.text:004022F5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004022F9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004022FC                 call    fputs
.text:00402301                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402308                 call    ds:libintl_gettext
.text:0040230E                 mov     ecx, ds:_iob
.text:00402314                 add     ecx, 20h ; ' '
.text:00402317                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040231B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040231E                 call    fputs
.text:00402323                 mov     [esp+1Ch+Stream], offset aAChangeOnlyThe ; "  -a                     change only th"...
.text:0040232A                 call    ds:libintl_gettext
.text:00402330                 mov     ecx, ds:_iob
.text:00402336                 add     ecx, 20h ; ' '
.text:00402339                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040233D                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402340                 call    fputs
.text:00402345                 mov     [esp+1Ch+Stream], offset aRReferenceFile ; "  -r, --reference=FILE   use this file'"...
.text:0040234C                 call    ds:libintl_gettext
.text:00402352                 mov     ecx, ds:_iob
.text:00402358                 add     ecx, 20h ; ' '
.text:0040235B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040235F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402362                 call    fputs
.text:00402367                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040236E                 call    ds:libintl_gettext
.text:00402374                 mov     ecx, ds:_iob
.text:0040237A                 add     ecx, 20h ; ' '
.text:0040237D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402381                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402384                 call    fputs
.text:00402389                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402390                 call    ds:libintl_gettext
.text:00402396                 mov     ecx, ds:_iob
.text:0040239C                 add     ecx, 20h ; ' '
.text:0040239F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004023A3                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004023A6                 call    fputs
.text:004023AB                 mov     [esp+1Ch+Stream], offset aNoteThatTheDAn ; "\nNote that the -d and -t options accep"...
.text:004023B2                 call    ds:libintl_gettext
.text:004023B8                 mov     ecx, ds:_iob
.text:004023BE                 add     ecx, 20h ; ' '
.text:004023C1                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004023C5                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004023C8                 call    fputs
.text:004023CD                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004023D4                 call    ds:libintl_gettext
.text:004023DA                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004023E2                 mov     [esp+1Ch+Stream], eax ; Format
.text:004023E5                 call    printf
.text:004023EA                 jmp     loc_4022B8
.text:004023EA sub_402280      endp
.text:004023EA
.text:004023EA ; ---------------------------------------------------------------------------
.text:004023EF aCreatingS      db 'creating %s',0      ; DATA XREF: sub_402420+CC↓o
.text:004023FB aSettingTimesOf db 'setting times of %s',0
.text:004023FB                                         ; DATA XREF: sub_402420+175↓o
.text:0040240F aCannotTouchS   db 'cannot touch %s',0  ; DATA XREF: sub_402420+1B2↓o
.text:0040241F                 align 10h
.text:00402420
.text:00402420 ; =============== S U B R O U T I N E =======================================
.text:00402420
.text:00402420
.text:00402420 ; int __cdecl sub_402420(char *FileName)
.text:00402420 sub_402420      proc near               ; CODE XREF: sub_401A00+544↑p
.text:00402420
.text:00402420 FileHandle      = dword ptr -0BCh
.text:00402420 OpenFlag        = dword ptr -0B8h
.text:00402420 var_B4          = dword ptr -0B4h
.text:00402420 var_B0          = byte ptr -0B0h
.text:00402420 var_9D          = byte ptr -9Dh
.text:00402420 var_9C          = dword ptr -9Ch
.text:00402420 var_98          = dword ptr -98h
.text:00402420 var_94          = dword ptr -94h
.text:00402420 var_90          = dword ptr -90h
.text:00402420 var_8C          = dword ptr -8Ch
.text:00402420 var_54          = dword ptr -54h
.text:00402420 var_50          = dword ptr -50h
.text:00402420 var_4C          = dword ptr -4Ch
.text:00402420 var_48          = dword ptr -48h
.text:00402420 FileName        = dword ptr  4
.text:00402420
.text:00402420                 push    ebp
.text:00402421                 xor     ebp, ebp
.text:00402423                 push    edi
.text:00402424                 mov     edi, 0FFFFFFFFh
.text:00402429                 push    esi
.text:0040242A                 push    ebx
.text:0040242B                 sub     esp, 0ACh
.text:00402431                 mov     esi, [esp+0BCh+FileName]
.text:00402438                 cmp     ds:byte_413010, 0
.text:0040243F                 jz      loc_402665
.text:00402445
.text:00402445 loc_402445:                             ; CODE XREF: sub_402420+262↓j
.text:00402445                                         ; sub_402420+270↓j ...
.text:00402445                 cmp     ds:dword_413000, 3
.text:0040244C                 jz      loc_402510
.text:00402452                 cmp     edi, 0FFFFFFFFh
.text:00402455                 jz      loc_402650
.text:0040245B                 mov     [esp+0BCh+FileHandle], edi
.text:0040245E                 lea     edx, [esp+0BCh+var_8C]
.text:00402462                 mov     [esp+0BCh+OpenFlag], edx
.text:00402466                 call    sub_4092B0
.text:0040246B
.text:0040246B loc_40246B:                             ; CODE XREF: sub_402420+240↓j
.text:0040246B                 test    eax, eax
.text:0040246D                 jz      loc_402510
.text:00402473                 test    ebp, ebp
.text:00402475                 jnz     short loc_4024E4
.text:00402477                 cmp     ds:byte_413010, 0
.text:0040247E                 jz      short loc_40248A
.text:00402480                 call    _errno
.text:00402485                 cmp     dword ptr [eax], 2
.text:00402488                 jz      short loc_4024DD
.text:0040248A
.text:0040248A loc_40248A:                             ; CODE XREF: sub_402420+5E↑j
.text:0040248A                 mov     [esp+0BCh+FileHandle], esi ; char *
.text:0040248D                 call    sub_4049A0
.text:00402492                 mov     [esp+0BCh+FileHandle], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:00402499                 mov     ebx, eax
.text:0040249B                 call    ds:libintl_gettext
.text:004024A1                 mov     ebp, eax
.text:004024A3                 call    _errno
.text:004024A8                 mov     dword ptr [esp+0BCh+var_B0], ebx ; char
.text:004024AC                 mov     [esp+0BCh+var_B4], ebp ; char *
.text:004024B0                 mov     ecx, [eax]
.text:004024B2                 mov     [esp+0BCh+OpenFlag], ecx ; ErrorMessage
.text:004024B6
.text:004024B6 loc_4024B6:                             ; CODE XREF: sub_402420+E7↓j
.text:004024B6                 mov     [esp+0BCh+FileHandle], 0 ; Code
.text:004024BD                 call    sub_409010
.text:004024C2                 cmp     edi, 0FFFFFFFFh
.text:004024C5                 jz      short loc_4024D0
.text:004024C7                 mov     [esp+0BCh+FileHandle], edi ; FileHandle
.text:004024CA                 call    _close
.text:004024CF                 nop
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_402420+A5↑j
.text:004024D0                                         ; sub_402420+1A5↓j
.text:004024D0                 xor     eax, eax
.text:004024D2
.text:004024D2 loc_4024D2:                             ; CODE XREF: sub_402420+C2↓j
.text:004024D2                                         ; sub_402420+14C↓j
.text:004024D2                 add     esp, 0ACh
.text:004024D8                 pop     ebx
.text:004024D9                 pop     esi
.text:004024DA                 pop     edi
.text:004024DB                 pop     ebp
.text:004024DC                 retn
.text:004024DD ; ---------------------------------------------------------------------------
.text:004024DD
.text:004024DD loc_4024DD:                             ; CODE XREF: sub_402420+68↑j
.text:004024DD                                         ; sub_402420+167↓j
.text:004024DD                 mov     eax, 1
.text:004024E2                 jmp     short loc_4024D2
.text:004024E4 ; ---------------------------------------------------------------------------
.text:004024E4
.text:004024E4 loc_4024E4:                             ; CODE XREF: sub_402420+55↑j
.text:004024E4                 mov     [esp+0BCh+FileHandle], esi ; char *
.text:004024E7                 call    sub_4049A0
.text:004024EC                 mov     [esp+0BCh+FileHandle], offset aCreatingS ; "creating %s"
.text:004024F3                 mov     esi, eax
.text:004024F5                 call    ds:libintl_gettext
.text:004024FB                 mov     dword ptr [esp+0BCh+var_B0], esi
.text:004024FF                 mov     [esp+0BCh+OpenFlag], ebp
.text:00402503                 mov     [esp+0BCh+var_B4], eax
.text:00402507                 jmp     short loc_4024B6
.text:00402507 ; ---------------------------------------------------------------------------
.text:00402509                 align 10h
.text:00402510
.text:00402510 loc_402510:                             ; CODE XREF: sub_402420+2C↑j
.text:00402510                                         ; sub_402420+4D↑j
.text:00402510                 cmp     ds:byte_413030, 0
.text:00402517                 jz      loc_4025F0
.text:0040251D                 xor     eax, eax
.text:0040251F
.text:0040251F loc_40251F:                             ; CODE XREF: sub_402420+20C↓j
.text:0040251F                 mov     [esp+0BCh+var_B4], eax ; int
.text:00402523                 mov     [esp+0BCh+OpenFlag], esi ; char *
.text:00402527                 mov     [esp+0BCh+FileHandle], edi ; int
.text:0040252A                 call    sub_404890
.text:0040252F                 test    eax, eax
.text:00402531                 setz    bl
.text:00402534                 cmp     edi, 0FFFFFFFFh
.text:00402537                 jz      short loc_402565
.text:00402539                 mov     [esp+0BCh+var_9D], 0
.text:0040253E                 mov     [esp+0BCh+FileHandle], edi ; FileHandle
.text:00402541                 call    _close
.text:00402546                 test    eax, eax
.text:00402548                 jnz     short loc_402560
.text:0040254A                 test    bl, bl
.text:0040254C                 jz      short loc_402560
.text:0040254E                 mov     [esp+0BCh+var_9D], 1
.text:00402553                 lea     esi, [esi+0]
.text:00402559                 lea     edi, [edi+0]
.text:00402560
.text:00402560 loc_402560:                             ; CODE XREF: sub_402420+128↑j
.text:00402560                                         ; sub_402420+12C↑j
.text:00402560                 movzx   ebx, [esp+0BCh+var_9D]
.text:00402565
.text:00402565 loc_402565:                             ; CODE XREF: sub_402420+117↑j
.text:00402565                 test    bl, bl
.text:00402567                 mov     eax, 1
.text:0040256C                 jnz     loc_4024D2
.text:00402572                 test    ebp, ebp
.text:00402574                 jnz     short loc_4025CA
.text:00402576                 cmp     ds:byte_413010, 0
.text:0040257D                 jz      short loc_40258D
.text:0040257F                 call    _errno
.text:00402584                 cmp     dword ptr [eax], 2
.text:00402587                 jz      loc_4024DD
.text:0040258D
.text:0040258D loc_40258D:                             ; CODE XREF: sub_402420+15D↑j
.text:0040258D                 mov     [esp+0BCh+FileHandle], esi ; char *
.text:00402590                 call    sub_4049A0
.text:00402595                 mov     [esp+0BCh+FileHandle], offset aSettingTimesOf ; "setting times of %s"
.text:0040259C                 mov     ebx, eax
.text:0040259E                 call    ds:libintl_gettext
.text:004025A4                 mov     ebp, eax
.text:004025A6                 call    _errno
.text:004025AB                 mov     dword ptr [esp+0BCh+var_B0], ebx ; char
.text:004025AF                 mov     [esp+0BCh+var_B4], ebp ; char *
.text:004025B3                 mov     esi, [eax]
.text:004025B5                 mov     [esp+0BCh+OpenFlag], esi ; ErrorMessage
.text:004025B9
.text:004025B9 loc_4025B9:                             ; CODE XREF: sub_402420+1CD↓j
.text:004025B9                 mov     [esp+0BCh+FileHandle], 0 ; Code
.text:004025C0                 call    sub_409010
.text:004025C5                 jmp     loc_4024D0
.text:004025CA ; ---------------------------------------------------------------------------
.text:004025CA
.text:004025CA loc_4025CA:                             ; CODE XREF: sub_402420+154↑j
.text:004025CA                 mov     [esp+0BCh+FileHandle], esi ; char *
.text:004025CD                 call    sub_4049A0
.text:004025D2                 mov     [esp+0BCh+FileHandle], offset aCannotTouchS ; "cannot touch %s"
.text:004025D9                 mov     edi, eax
.text:004025DB                 call    ds:libintl_gettext
.text:004025E1                 mov     dword ptr [esp+0BCh+var_B0], edi
.text:004025E5                 mov     [esp+0BCh+OpenFlag], ebp
.text:004025E9                 mov     [esp+0BCh+var_B4], eax
.text:004025ED                 jmp     short loc_4025B9
.text:004025ED ; ---------------------------------------------------------------------------
.text:004025EF                 align 10h
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_402420+F7↑j
.text:004025F0                 mov     ecx, ds:dword_413000
.text:004025F6                 test    cl, 1
.text:004025F9                 jz      short loc_402643
.text:004025FB                 mov     edx, ds:Time
.text:00402601                 mov     ebx, ds:dword_413044
.text:00402607
.text:00402607 loc_402607:                             ; CODE XREF: sub_402420+22B↓j
.text:00402607                 mov     [esp+0BCh+var_9C], edx
.text:0040260B                 mov     [esp+0BCh+var_98], ebx
.text:0040260F                 test    cl, 2
.text:00402612                 jz      short loc_402631
.text:00402614                 mov     ebx, ds:dword_413048
.text:0040261A                 mov     ecx, ds:dword_41304C
.text:00402620                 mov     [esp+0BCh+var_94], ebx
.text:00402624                 mov     [esp+0BCh+var_90], ecx
.text:00402628
.text:00402628 loc_402628:                             ; CODE XREF: sub_402420+221↓j
.text:00402628                 lea     eax, [esp+0BCh+var_9C]
.text:0040262C                 jmp     loc_40251F
.text:00402631 ; ---------------------------------------------------------------------------
.text:00402631
.text:00402631 loc_402631:                             ; CODE XREF: sub_402420+1F2↑j
.text:00402631                 mov     ecx, [esp+0BCh+var_4C]
.text:00402635                 mov     edx, [esp+0BCh+var_48]
.text:00402639                 mov     [esp+0BCh+var_94], ecx
.text:0040263D                 mov     [esp+0BCh+var_90], edx
.text:00402641                 jmp     short loc_402628
.text:00402643 ; ---------------------------------------------------------------------------
.text:00402643
.text:00402643 loc_402643:                             ; CODE XREF: sub_402420+1D9↑j
.text:00402643                 mov     edx, [esp+0BCh+var_54]
.text:00402647                 mov     ebx, [esp+0BCh+var_50]
.text:0040264B                 jmp     short loc_402607
.text:0040264B ; ---------------------------------------------------------------------------
.text:0040264D                 align 10h
.text:00402650
.text:00402650 loc_402650:                             ; CODE XREF: sub_402420+35↑j
.text:00402650                 mov     [esp+0BCh+FileHandle], esi ; char *
.text:00402653                 lea     edx, [esp+0BCh+var_8C]
.text:00402657                 mov     [esp+0BCh+OpenFlag], edx ; int
.text:0040265B                 call    sub_40BDC0
.text:00402660                 jmp     loc_40246B
.text:00402665 ; ---------------------------------------------------------------------------
.text:00402665
.text:00402665 loc_402665:                             ; CODE XREF: sub_402420+1F↑j
.text:00402665                 mov     [esp+0BCh+var_B4], 1B6h
.text:0040266D                 mov     [esp+0BCh+OpenFlag], 105h ; OpenFlag
.text:00402675                 mov     [esp+0BCh+FileHandle], esi ; FileName
.text:00402678                 call    _open
.text:0040267D                 cmp     eax, 0FFFFFFFFh
.text:00402680                 mov     edi, eax
.text:00402682                 jnz     loc_402445
.text:00402688                 call    _errno
.text:0040268D                 cmp     dword ptr [eax], 15h
.text:00402690                 jz      loc_402445
.text:00402696                 call    _errno
.text:0040269B                 cmp     dword ptr [eax], 16h
.text:0040269E                 jz      loc_402445
.text:004026A4                 call    _errno
.text:004026A9                 cmp     dword ptr [eax], 1
.text:004026AC                 jz      loc_402445
.text:004026B2                 call    _errno
.text:004026B7                 mov     ebp, [eax]
.text:004026B9                 jmp     loc_402445
.text:004026B9 sub_402420      endp
.text:004026B9
.text:004026B9 ; ---------------------------------------------------------------------------
.text:004026BE                 align 10h
.text:004026C0
.text:004026C0 ; =============== S U B R O U T I N E =======================================
.text:004026C0
.text:004026C0
.text:004026C0 ; int __cdecl sub_4026C0(char *, int, int, int)
.text:004026C0 sub_4026C0      proc near               ; CODE XREF: sub_4029E0+32↓p
.text:004026C0
.text:004026C0 Str             = dword ptr -2Ch
.text:004026C0 Str2            = dword ptr -28h
.text:004026C0 MaxCount        = dword ptr -24h
.text:004026C0 var_20          = dword ptr -20h
.text:004026C0 var_19          = byte ptr -19h
.text:004026C0 var_18          = dword ptr -18h
.text:004026C0 var_14          = dword ptr -14h
.text:004026C0 arg_0           = dword ptr  4
.text:004026C0 arg_4           = dword ptr  8
.text:004026C0 arg_8           = dword ptr  0Ch
.text:004026C0 arg_C           = dword ptr  10h
.text:004026C0
.text:004026C0                 push    ebp
.text:004026C1                 push    edi
.text:004026C2                 push    esi
.text:004026C3                 push    ebx
.text:004026C4                 sub     esp, 1Ch
.text:004026C7                 xor     ebx, ebx
.text:004026C9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:004026D1                 mov     edx, [esp+2Ch+arg_0]
.text:004026D5                 mov     ebp, [esp+2Ch+arg_C]
.text:004026D9                 mov     [esp+2Ch+var_19], 0
.text:004026DE                 mov     [esp+2Ch+Str], edx ; Str
.text:004026E1                 call    strlen
.text:004026E6                 mov     [esp+2Ch+var_14], eax
.text:004026EA                 mov     ecx, [esp+2Ch+arg_4]
.text:004026EE                 mov     eax, [ecx]
.text:004026F0                 test    eax, eax
.text:004026F2                 jz      short loc_402738
.text:004026F4                 mov     [esp+2Ch+var_20], 0
.text:004026FC                 lea     esi, [esi+0]
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: sub_4026C0+6A↓j
.text:00402700                 mov     [esp+2Ch+Str], eax ; Str1
.text:00402703                 mov     esi, [esp+2Ch+var_14]
.text:00402707                 mov     ecx, [esp+2Ch+arg_0]
.text:0040270B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040270F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00402713                 call    strncmp
.text:00402718                 test    eax, eax
.text:0040271A                 jz      short loc_402746
.text:0040271C
.text:0040271C loc_40271C:                             ; CODE XREF: sub_4026C0+CA↓j
.text:0040271C                                         ; sub_4026C0+D1↓j ...
.text:0040271C                 add     [esp+2Ch+var_20], ebp
.text:00402720                 inc     ebx
.text:00402721                 mov     esi, [esp+2Ch+arg_4]
.text:00402725                 mov     eax, [esi+ebx*4]
.text:00402728                 test    eax, eax
.text:0040272A                 jnz     short loc_402700
.text:0040272C                 cmp     [esp+2Ch+var_19], 0
.text:00402731                 mov     edx, 0FFFFFFFEh
.text:00402736                 jnz     short loc_40273C
.text:00402738
.text:00402738 loc_402738:                             ; CODE XREF: sub_4026C0+32↑j
.text:00402738                 mov     edx, [esp+2Ch+var_18]
.text:0040273C
.text:0040273C loc_40273C:                             ; CODE XREF: sub_4026C0+76↑j
.text:0040273C                                         ; sub_4026C0+9B↓j
.text:0040273C                 add     esp, 1Ch
.text:0040273F                 mov     eax, edx
.text:00402741                 pop     ebx
.text:00402742                 pop     esi
.text:00402743                 pop     edi
.text:00402744                 pop     ebp
.text:00402745                 retn
.text:00402746 ; ---------------------------------------------------------------------------
.text:00402746
.text:00402746 loc_402746:                             ; CODE XREF: sub_4026C0+5A↑j
.text:00402746                 mov     eax, [esp+2Ch+arg_4]
.text:0040274A                 mov     edi, [eax+ebx*4]
.text:0040274D                 mov     [esp+2Ch+Str], edi ; Str
.text:00402750                 call    strlen
.text:00402755                 cmp     eax, [esp+2Ch+var_14]
.text:00402759                 mov     edx, ebx
.text:0040275B                 jz      short loc_40273C
.text:0040275D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00402762                 jz      short loc_402793
.text:00402764                 mov     ecx, [esp+2Ch+arg_8]
.text:00402768                 test    ecx, ecx
.text:0040276A                 jz      short loc_40278C
.text:0040276C                 cld
.text:0040276D                 mov     edi, [esp+2Ch+var_18]
.text:00402771                 mov     ecx, ebp
.text:00402773                 mov     esi, [esp+2Ch+arg_8]
.text:00402777                 mov     edx, [esp+2Ch+var_20]
.text:0040277B                 imul    edi, ebp
.text:0040277E                 add     esi, edi
.text:00402780                 mov     edi, [esp+2Ch+arg_8]
.text:00402784                 add     edi, edx
.text:00402786                 cmp     ebp, ebp
.text:00402788                 repe cmpsb
.text:0040278A                 jz      short loc_40271C
.text:0040278C
.text:0040278C loc_40278C:                             ; CODE XREF: sub_4026C0+AA↑j
.text:0040278C                 mov     [esp+2Ch+var_19], 1
.text:00402791                 jmp     short loc_40271C
.text:00402793 ; ---------------------------------------------------------------------------
.text:00402793
.text:00402793 loc_402793:                             ; CODE XREF: sub_4026C0+A2↑j
.text:00402793                 mov     [esp+2Ch+var_18], ebx
.text:00402797                 jmp     short loc_40271C
.text:00402797 sub_4026C0      endp
.text:00402797
.text:00402797 ; ---------------------------------------------------------------------------
.text:00402799 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:00402799                                         ; DATA XREF: .text:004027F2↓o
.text:00402799                                         ; sub_4029E0+5A↓o
.text:004027B6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:004027B6                                         ; DATA XREF: .text:loc_402860↓o
.text:004027B6                                         ; sub_4029E0:loc_402BD6↓o
.text:004027D1 ; ---------------------------------------------------------------------------
.text:004027D1                 jmp     short loc_4027E0
.text:004027D1 ; ---------------------------------------------------------------------------
.text:004027D3                 align 10h
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: .text:004027D1↑j
.text:004027E0                 sub     esp, 1Ch
.text:004027E3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:004027E8                 mov     [esp+14h], ebx
.text:004027EC                 mov     [esp+18h], esi
.text:004027F0                 jz      short loc_402860
.text:004027F2                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:004027F9
.text:004027F9 loc_4027F9:                             ; CODE XREF: .text:00402867↓j
.text:004027F9                 call    ds:libintl_gettext
.text:004027FF                 mov     dword ptr [esp], 1
.text:00402806                 mov     edx, [esp+20h]
.text:0040280A                 mov     esi, eax
.text:0040280C                 mov     [esp+4], edx
.text:00402810                 call    sub_404970
.text:00402815                 mov     dword ptr [esp+4], 5
.text:0040281D                 mov     edx, [esp+24h]
.text:00402821                 mov     ebx, eax
.text:00402823                 mov     dword ptr [esp], 0
.text:0040282A                 mov     [esp+8], edx
.text:0040282E                 call    sub_4086B0
.text:00402833                 mov     [esp+0Ch], eax
.text:00402837                 mov     [esp+10h], ebx
.text:0040283B                 mov     [esp+8], esi
.text:0040283F                 mov     dword ptr [esp+4], 0
.text:00402847                 mov     dword ptr [esp], 0
.text:0040284E                 call    sub_409010
.text:00402853                 mov     ebx, [esp+14h]
.text:00402857                 mov     esi, [esp+18h]
.text:0040285B                 add     esp, 1Ch
.text:0040285E                 retn
.text:0040285E ; ---------------------------------------------------------------------------
.text:0040285F                 align 10h
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: .text:004027F0↑j
.text:00402860                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00402867                 jmp     short loc_4027F9
.text:00402867 ; ---------------------------------------------------------------------------
.text:00402869 aValidArguments db 'Valid arguments are:',0
.text:00402869                                         ; DATA XREF: .text:004028B3↓o
.text:00402869                                         ; sub_4029E0+CB↓o
.text:0040287E ; const char Format[]
.text:0040287E Format          db 0Ah                  ; DATA XREF: .text:0040292D↓o
.text:0040287E                                         ; sub_4029E0:loc_402B18↓o
.text:0040287E                 db '  - `%s',27h,0
.text:00402888 ; const char aS_0[]
.text:00402888 aS_0            db ', `%s',27h,0        ; DATA XREF: .text:004029BA↓o
.text:00402888                                         ; sub_4029E0:loc_402BB0↓o
.text:0040288F                 align 10h
.text:00402890                 push    ebp
.text:00402891                 push    edi
.text:00402892                 push    esi
.text:00402893                 push    ebx
.text:00402894                 sub     esp, 2Ch
.text:00402897                 mov     ecx, [esp+40h]
.text:0040289B                 mov     dword ptr [esp+1Ch], 0
.text:004028A3                 mov     eax, [esp+44h]
.text:004028A7                 mov     ebp, [esp+48h]
.text:004028AB                 mov     [esp+28h], ecx
.text:004028AF                 mov     [esp+24h], eax
.text:004028B3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:004028BA                 call    ds:libintl_gettext
.text:004028C0                 mov     edx, ds:_iob
.text:004028C6                 add     edx, 40h ; '@'
.text:004028C9                 mov     [esp], edx
.text:004028CC                 mov     [esp+4], eax
.text:004028D0                 call    fprintf
.text:004028D5                 mov     dword ptr [esp+20h], 0
.text:004028DD                 mov     edx, [esp+28h]
.text:004028E1                 mov     eax, [edx]
.text:004028E3                 test    eax, eax
.text:004028E5                 jz      short loc_402965
.text:004028E7                 mov     dword ptr [esp+14h], 0
.text:004028EF                 mov     esi, [esp+24h]
.text:004028F3                 mov     ebx, eax
.text:004028F5                 mov     [esp+18h], esi
.text:004028F9                 lea     esi, [esi+0]
.text:00402900
.text:00402900 loc_402900:                             ; CODE XREF: .text:00402963↓j
.text:00402900                 mov     edi, [esp+20h]
.text:00402904                 test    edi, edi
.text:00402906                 jz      short loc_402923
.text:00402908                 cld
.text:00402909                 mov     edi, [esp+24h]
.text:0040290D                 mov     ecx, ebp
.text:0040290F                 mov     edx, [esp+14h]
.text:00402913                 mov     esi, [esp+1Ch]
.text:00402917                 add     edi, edx
.text:00402919                 cmp     ebp, ebp
.text:0040291B                 repe cmpsb
.text:0040291D                 jz      loc_4029B0
.text:00402923
.text:00402923 loc_402923:                             ; CODE XREF: .text:00402906↑j
.text:00402923                 mov     [esp+8], ebx
.text:00402927                 mov     ecx, ds:_iob
.text:0040292D                 mov     dword ptr [esp+4], offset Format ; "\n  - `%s'"
.text:00402935                 add     ecx, 40h ; '@'
.text:00402938                 mov     [esp], ecx
.text:0040293B                 call    fprintf
.text:00402940                 mov     ebx, [esp+18h]
.text:00402944                 mov     [esp+1Ch], ebx
.text:00402948
.text:00402948 loc_402948:                             ; CODE XREF: .text:004029CD↓j
.text:00402948                 inc     dword ptr [esp+20h]
.text:0040294C                 mov     eax, [esp+28h]
.text:00402950                 add     [esp+14h], ebp
.text:00402954                 mov     edx, [esp+20h]
.text:00402958                 add     [esp+18h], ebp
.text:0040295C                 mov     edi, [eax+edx*4]
.text:0040295F                 test    edi, edi
.text:00402961                 mov     ebx, edi
.text:00402963                 jnz     short loc_402900
.text:00402965
.text:00402965 loc_402965:                             ; CODE XREF: .text:004028E5↑j
.text:00402965                 mov     ebx, ds:_iob
.text:0040296B                 mov     ebp, [ebx+44h]
.text:0040296E                 dec     ebp
.text:0040296F                 mov     [ebx+44h], ebp
.text:00402972                 test    ebp, ebp
.text:00402974                 js      short loc_40298D
.text:00402976                 mov     ecx, ds:_iob
.text:0040297C                 mov     esi, [ecx+40h]
.text:0040297F                 mov     byte ptr [esi], 0Ah
.text:00402982                 inc     dword ptr [ecx+40h]
.text:00402985                 add     esp, 2Ch
.text:00402988                 pop     ebx
.text:00402989                 pop     esi
.text:0040298A                 pop     edi
.text:0040298B                 pop     ebp
.text:0040298C                 retn
.text:0040298D ; ---------------------------------------------------------------------------
.text:0040298D
.text:0040298D loc_40298D:                             ; CODE XREF: .text:00402974↑j
.text:0040298D                 mov     dword ptr [esp+40h], 0Ah
.text:00402995                 mov     edi, ds:_iob
.text:0040299B                 add     edi, 40h ; '@'
.text:0040299E                 mov     [esp+44h], edi
.text:004029A2                 add     esp, 2Ch
.text:004029A5                 pop     ebx
.text:004029A6                 pop     esi
.text:004029A7                 pop     edi
.text:004029A8                 pop     ebp
.text:004029A9                 jmp     _flsbuf
.text:004029A9 ; ---------------------------------------------------------------------------
.text:004029AE                 align 10h
.text:004029B0
.text:004029B0 loc_4029B0:                             ; CODE XREF: .text:0040291D↑j
.text:004029B0                 mov     [esp+8], ebx
.text:004029B4                 mov     esi, ds:_iob
.text:004029BA                 mov     dword ptr [esp+4], offset aS_0 ; ", `%s'"
.text:004029C2                 add     esi, 40h ; '@'
.text:004029C5                 mov     [esp], esi
.text:004029C8                 call    fprintf
.text:004029CD                 jmp     loc_402948
.text:004029CD ; ---------------------------------------------------------------------------
.text:004029D2                 align 10h
.text:004029E0
.text:004029E0 ; =============== S U B R O U T I N E =======================================
.text:004029E0
.text:004029E0
.text:004029E0 ; int __cdecl sub_4029E0(char *, char *, int, int, int, int)
.text:004029E0 sub_4029E0      proc near               ; CODE XREF: sub_401A00+341↑p
.text:004029E0
.text:004029E0 Stream          = dword ptr -4Ch
.text:004029E0 Format          = dword ptr -48h
.text:004029E0 var_44          = dword ptr -44h
.text:004029E0 var_40          = byte ptr -40h
.text:004029E0 var_3C          = dword ptr -3Ch
.text:004029E0 var_2C          = dword ptr -2Ch
.text:004029E0 var_28          = dword ptr -28h
.text:004029E0 var_24          = dword ptr -24h
.text:004029E0 var_20          = dword ptr -20h
.text:004029E0 var_1C          = dword ptr -1Ch
.text:004029E0 var_18          = dword ptr -18h
.text:004029E0 var_14          = dword ptr -14h
.text:004029E0 var_10          = dword ptr -10h
.text:004029E0 var_C           = dword ptr -0Ch
.text:004029E0 var_8           = dword ptr -8
.text:004029E0 var_4           = dword ptr -4
.text:004029E0 arg_0           = dword ptr  4
.text:004029E0 arg_4           = dword ptr  8
.text:004029E0 arg_8           = dword ptr  0Ch
.text:004029E0 arg_C           = dword ptr  10h
.text:004029E0 arg_10          = dword ptr  14h
.text:004029E0 arg_14          = dword ptr  18h
.text:004029E0
.text:004029E0                 sub     esp, 4Ch
.text:004029E3                 mov     edx, [esp+4Ch+arg_10]
.text:004029E7                 mov     [esp+4Ch+var_10], ebx
.text:004029EB                 mov     ebx, [esp+4Ch+arg_C]
.text:004029EF                 mov     [esp+4Ch+var_C], esi
.text:004029F3                 mov     esi, [esp+4Ch+arg_4]
.text:004029F7                 mov     [esp+4Ch+var_4], ebp
.text:004029FB                 mov     ebp, [esp+4Ch+arg_8]
.text:004029FF                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00402A03                 mov     [esp+4Ch+var_8], edi
.text:00402A07                 mov     [esp+4Ch+var_44], ebx ; int
.text:00402A0B                 mov     [esp+4Ch+Format], ebp ; int
.text:00402A0F                 mov     [esp+4Ch+Stream], esi ; char *
.text:00402A12                 call    sub_4026C0
.text:00402A17                 test    eax, eax
.text:00402A19                 mov     edx, eax
.text:00402A1B                 js      short loc_402A33
.text:00402A1D
.text:00402A1D loc_402A1D:                             ; CODE XREF: sub_4029E0+1AA↓j
.text:00402A1D                 mov     ebx, [esp+4Ch+var_10]
.text:00402A21                 mov     eax, edx
.text:00402A23                 mov     esi, [esp+4Ch+var_C]
.text:00402A27                 mov     edi, [esp+4Ch+var_8]
.text:00402A2B                 mov     ebp, [esp+4Ch+var_4]
.text:00402A2F                 add     esp, 4Ch
.text:00402A32                 retn
.text:00402A33 ; ---------------------------------------------------------------------------
.text:00402A33
.text:00402A33 loc_402A33:                             ; CODE XREF: sub_4029E0+3B↑j
.text:00402A33                 inc     eax
.text:00402A34                 jz      loc_402BD6
.text:00402A3A                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00402A41
.text:00402A41 loc_402A41:                             ; CODE XREF: sub_4029E0+1FD↓j
.text:00402A41                 call    ds:libintl_gettext
.text:00402A47                 mov     [esp+4Ch+Stream], 1 ; int
.text:00402A4E                 mov     edi, [esp+4Ch+arg_0]
.text:00402A52                 mov     [esp+4Ch+var_14], eax
.text:00402A56                 mov     [esp+4Ch+Format], edi ; char *
.text:00402A5A                 call    sub_404970
.text:00402A5F                 mov     [esp+4Ch+var_18], eax
.text:00402A63                 mov     [esp+4Ch+var_44], esi ; char *
.text:00402A67                 mov     [esp+4Ch+Format], 5 ; int
.text:00402A6F                 mov     [esp+4Ch+Stream], 0 ; int
.text:00402A76                 call    sub_4086B0
.text:00402A7B                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:00402A7F                 mov     ecx, [esp+4Ch+var_18]
.text:00402A83                 mov     eax, [esp+4Ch+var_14]
.text:00402A87                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00402A8F                 mov     [esp+4Ch+var_3C], ecx
.text:00402A93                 mov     [esp+4Ch+var_44], eax ; char *
.text:00402A97                 mov     [esp+4Ch+Stream], 0 ; Code
.text:00402A9E                 call    sub_409010
.text:00402AA3                 mov     [esp+4Ch+var_20], 0
.text:00402AAB                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:00402AB2                 call    ds:libintl_gettext
.text:00402AB8                 mov     edx, ds:_iob
.text:00402ABE                 add     edx, 40h ; '@'
.text:00402AC1                 mov     [esp+4Ch+Format], eax ; Format
.text:00402AC5                 mov     [esp+4Ch+Stream], edx ; Stream
.text:00402AC8                 call    fprintf
.text:00402ACD                 mov     [esp+4Ch+var_1C], 0
.text:00402AD5                 mov     eax, [ebp+0]
.text:00402AD8                 test    eax, eax
.text:00402ADA                 jz      loc_402B61
.text:00402AE0                 mov     [esp+4Ch+var_24], eax
.text:00402AE4                 mov     [esp+4Ch+var_28], ebx
.text:00402AE8                 mov     [esp+4Ch+var_2C], 0
.text:00402AF0
.text:00402AF0 loc_402AF0:                             ; CODE XREF: sub_4029E0+17F↓j
.text:00402AF0                 mov     esi, [esp+4Ch+var_1C]
.text:00402AF4                 test    esi, esi
.text:00402AF6                 jz      short loc_402B18
.text:00402AF8                 cld
.text:00402AF9                 mov     eax, [esp+4Ch+var_2C]
.text:00402AFD                 mov     edx, [esp+4Ch+arg_10]
.text:00402B01                 mov     esi, [esp+4Ch+var_20]
.text:00402B05                 lea     ecx, [eax+ebx]
.text:00402B08                 mov     edi, ecx
.text:00402B0A                 mov     ecx, [esp+4Ch+arg_10]
.text:00402B0E                 cmp     edx, edx
.text:00402B10                 repe cmpsb
.text:00402B12                 jz      loc_402BB0
.text:00402B18
.text:00402B18 loc_402B18:                             ; CODE XREF: sub_4029E0+116↑j
.text:00402B18                 mov     [esp+4Ch+Format], offset Format ; "\n  - `%s'"
.text:00402B20                 mov     esi, ds:_iob
.text:00402B26                 mov     ecx, [esp+4Ch+var_24]
.text:00402B2A                 add     esi, 40h ; '@'
.text:00402B2D                 mov     [esp+4Ch+var_44], ecx
.text:00402B31                 mov     [esp+4Ch+Stream], esi ; Stream
.text:00402B34                 call    fprintf
.text:00402B39                 mov     edi, [esp+4Ch+var_28]
.text:00402B3D                 mov     [esp+4Ch+var_20], edi
.text:00402B41
.text:00402B41 loc_402B41:                             ; CODE XREF: sub_4029E0+1F1↓j
.text:00402B41                 inc     [esp+4Ch+var_1C]
.text:00402B45                 mov     ecx, [esp+4Ch+arg_10]
.text:00402B49                 add     [esp+4Ch+var_2C], ecx
.text:00402B4D                 mov     esi, [esp+4Ch+var_1C]
.text:00402B51                 add     [esp+4Ch+var_28], ecx
.text:00402B55                 mov     edi, [ebp+esi*4+0]
.text:00402B59                 test    edi, edi
.text:00402B5B                 mov     [esp+4Ch+var_24], edi
.text:00402B5F                 jnz     short loc_402AF0
.text:00402B61
.text:00402B61 loc_402B61:                             ; CODE XREF: sub_4029E0+FA↑j
.text:00402B61                 mov     ebp, ds:_iob
.text:00402B67                 mov     ebx, [ebp+44h]
.text:00402B6A                 dec     ebx
.text:00402B6B                 mov     [ebp+44h], ebx
.text:00402B6E                 test    ebx, ebx
.text:00402B70                 js      short loc_402B8F
.text:00402B72                 mov     edi, ds:_iob
.text:00402B78                 mov     eax, [edi+40h]
.text:00402B7B                 mov     byte ptr [eax], 0Ah
.text:00402B7E                 inc     dword ptr [edi+40h]
.text:00402B81
.text:00402B81 loc_402B81:                             ; CODE XREF: sub_4029E0+1C8↓j
.text:00402B81                 call    [esp+4Ch+arg_14]
.text:00402B85                 mov     edx, 0FFFFFFFFh
.text:00402B8A                 jmp     loc_402A1D
.text:00402B8F ; ---------------------------------------------------------------------------
.text:00402B8F
.text:00402B8F loc_402B8F:                             ; CODE XREF: sub_4029E0+190↑j
.text:00402B8F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:00402B96                 mov     edx, ds:_iob
.text:00402B9C                 add     edx, 40h ; '@'
.text:00402B9F                 mov     [esp+4Ch+Format], edx ; File
.text:00402BA3                 call    _flsbuf
.text:00402BA8                 jmp     short loc_402B81
.text:00402BA8 ; ---------------------------------------------------------------------------
.text:00402BAA                 align 10h
.text:00402BB0
.text:00402BB0 loc_402BB0:                             ; CODE XREF: sub_4029E0+132↑j
.text:00402BB0                 mov     [esp+4Ch+Format], offset aS_0 ; ", `%s'"
.text:00402BB8                 mov     edx, ds:_iob
.text:00402BBE                 mov     eax, [esp+4Ch+var_24]
.text:00402BC2                 add     edx, 40h ; '@'
.text:00402BC5                 mov     [esp+4Ch+var_44], eax
.text:00402BC9                 mov     [esp+4Ch+Stream], edx ; Stream
.text:00402BCC                 call    fprintf
.text:00402BD1                 jmp     loc_402B41
.text:00402BD6 ; ---------------------------------------------------------------------------
.text:00402BD6
.text:00402BD6 loc_402BD6:                             ; CODE XREF: sub_4029E0+54↑j
.text:00402BD6                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00402BDD                 jmp     loc_402A41
.text:00402BDD sub_4029E0      endp
.text:00402BDD
.text:00402BDD ; ---------------------------------------------------------------------------
.text:00402BE2                 align 10h
.text:00402BF0                 push    ebp
.text:00402BF1                 push    edi
.text:00402BF2                 push    esi
.text:00402BF3                 push    ebx
.text:00402BF4                 sub     esp, 4
.text:00402BF7                 mov     ecx, [esp+1Ch]
.text:00402BFB                 mov     dword ptr [esp], 0
.text:00402C02                 mov     ebx, [esp+24h]
.text:00402C06                 mov     edx, [ecx]
.text:00402C08                 test    edx, edx
.text:00402C0A                 jz      short loc_402C35
.text:00402C0C                 cld
.text:00402C0D                 xor     ebp, ebp
.text:00402C0F                 nop
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: .text:00402C33↓j
.text:00402C10                 mov     edi, [esp+20h]
.text:00402C14                 mov     ecx, ebx
.text:00402C16                 mov     esi, [esp+18h]
.text:00402C1A                 add     edi, ebp
.text:00402C1C                 cmp     ebx, ebx
.text:00402C1E                 repe cmpsb
.text:00402C20                 jz      short loc_402C3D
.text:00402C22                 inc     dword ptr [esp]
.text:00402C25                 add     ebp, ebx
.text:00402C27                 mov     eax, [esp+1Ch]
.text:00402C2B                 mov     ecx, [esp]
.text:00402C2E                 mov     edi, [eax+ecx*4]
.text:00402C31                 test    edi, edi
.text:00402C33                 jnz     short loc_402C10
.text:00402C35
.text:00402C35 loc_402C35:                             ; CODE XREF: .text:00402C0A↑j
.text:00402C35                 xor     eax, eax
.text:00402C37
.text:00402C37 loc_402C37:                             ; CODE XREF: .text:00402C47↓j
.text:00402C37                 pop     ebp
.text:00402C38                 pop     ebx
.text:00402C39                 pop     esi
.text:00402C3A                 pop     edi
.text:00402C3B                 pop     ebp
.text:00402C3C                 retn
.text:00402C3D ; ---------------------------------------------------------------------------
.text:00402C3D
.text:00402C3D loc_402C3D:                             ; CODE XREF: .text:00402C20↑j
.text:00402C3D                 mov     esi, [esp]
.text:00402C40                 mov     ebx, [esp+1Ch]
.text:00402C44                 mov     eax, [ebx+esi*4]
.text:00402C47                 jmp     short loc_402C37
.text:00402C47 ; ---------------------------------------------------------------------------
.text:00402C49                 align 10h
.text:00402C50
.text:00402C50 ; =============== S U B R O U T I N E =======================================
.text:00402C50
.text:00402C50 ; Attributes: noreturn
.text:00402C50
.text:00402C50 sub_402C50      proc near               ; DATA XREF: .data:off_412010↓o
.text:00402C50
.text:00402C50 Code            = dword ptr -0Ch
.text:00402C50
.text:00402C50                 sub     esp, 0Ch
.text:00402C53                 mov     [esp+0Ch+Code], 1 ; Code
.text:00402C5A                 call    sub_402280
.text:00402C5A sub_402C50      endp
.text:00402C5A
.text:00402C5A ; ---------------------------------------------------------------------------
.text:00402C5F                 db  83h ; ƒ
.text:00402C60                 db 0C4h ; Ä
.text:00402C61                 db  0Ch
.text:00402C62                 db 0C3h ; Ã
.text:00402C63                 align 10h
.text:00402C70 dword_402C70    dd 90002D2Dh, 7 dup(90909090h)
.text:00402C70                                         ; DATA XREF: sub_402EC0+E4↓o
.text:00402C90 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402C90                                         ; DATA XREF: sub_402EC0+2FC↓o
.text:00402CBD                 db 13h dup(90h)
.text:00402CD0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402CD0                                         ; DATA XREF: sub_402EC0:loc_403222↓o
.text:00402CFD                 db 13h dup(90h)
.text:00402D10 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402D10                                         ; DATA XREF: sub_402EC0:loc_4032C0↓o
.text:00402D10                                         ; sub_402EC0:loc_403687↓o
.text:00402D36                 db 1Ah dup(90h)
.text:00402D50 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402D50                                         ; DATA XREF: sub_402EC0+48E↓o
.text:00402D70 dword_402D70    dd 90909000h, 7 dup(90909090h)
.text:00402D70                                         ; DATA XREF: sub_402EC0:loc_403391↓o
.text:00402D90 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402D90                                         ; DATA XREF: sub_402EC0:loc_4033AA↓o
.text:00402DB0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402DB0                                         ; DATA XREF: sub_402EC0:loc_40348F↓o
.text:00402DB0                                         ; sub_402EC0:loc_4037BC↓o
.text:00402DD7                 db 19h dup(90h)
.text:00402DF0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402DF0                                         ; DATA XREF: sub_402EC0:loc_403603↓o
.text:00402E1E                 db 12h dup(90h)
.text:00402E30 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402E30                                         ; DATA XREF: sub_402EC0:loc_4036EF↓o
.text:00402E51 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402E51                                         ; DATA XREF: sub_402EC0+93F↓o
.text:00402E6B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00402E6B                                         ; DATA XREF: sub_402EC0:loc_403837↓o
.text:00402E85 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402E85                                         ; DATA XREF: sub_402EC0:loc_40385E↓o
.text:00402EA3 ; const char aPosixlyCorrect_0[]
.text:00402EA3 aPosixlyCorrect_0 db 'POSIXLY_CORRECT',0
.text:00402EA3                                         ; DATA XREF: sub_402EC0:loc_403A10↓o
.text:00402EB3                 align 10h
.text:00402EC0
.text:00402EC0 ; =============== S U B R O U T I N E =======================================
.text:00402EC0
.text:00402EC0
.text:00402EC0 ; int __cdecl sub_402EC0(int, int, char *Str, int, int, int, int, int)
.text:00402EC0 sub_402EC0      proc near               ; CODE XREF: sub_403A50+5A↓p
.text:00402EC0                                         ; .text:00403B3A↓p ...
.text:00402EC0
.text:00402EC0 Str1            = dword ptr -5Ch
.text:00402EC0 Str2            = dword ptr -58h
.text:00402EC0 MaxCount        = dword ptr -54h
.text:00402EC0 var_50          = dword ptr -50h
.text:00402EC0 var_4C          = dword ptr -4Ch
.text:00402EC0 var_3C          = dword ptr -3Ch
.text:00402EC0 var_38          = dword ptr -38h
.text:00402EC0 var_34          = dword ptr -34h
.text:00402EC0 var_30          = dword ptr -30h
.text:00402EC0 var_2C          = dword ptr -2Ch
.text:00402EC0 var_28          = dword ptr -28h
.text:00402EC0 var_24          = dword ptr -24h
.text:00402EC0 var_20          = dword ptr -20h
.text:00402EC0 var_1C          = dword ptr -1Ch
.text:00402EC0 var_18          = dword ptr -18h
.text:00402EC0 var_14          = dword ptr -14h
.text:00402EC0 arg_0           = dword ptr  4
.text:00402EC0 arg_4           = dword ptr  8
.text:00402EC0 Str             = dword ptr  0Ch
.text:00402EC0 arg_C           = dword ptr  10h
.text:00402EC0 arg_10          = dword ptr  14h
.text:00402EC0 arg_14          = dword ptr  18h
.text:00402EC0 arg_18          = dword ptr  1Ch
.text:00402EC0 arg_1C          = dword ptr  20h
.text:00402EC0
.text:00402EC0                 push    ebp
.text:00402EC1                 mov     eax, 0FFFFFFFFh
.text:00402EC6                 push    edi
.text:00402EC7                 push    esi
.text:00402EC8                 push    ebx
.text:00402EC9                 sub     esp, 4Ch
.text:00402ECC                 mov     esi, [esp+5Ch+Str]
.text:00402ED0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402ED4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402ED7                 mov     ebx, [ebp+4]
.text:00402EDA                 setz    dl
.text:00402EDD                 movzx   ecx, dl
.text:00402EE0                 dec     ecx
.text:00402EE1                 and     ecx, ebx
.text:00402EE3                 mov     [esp+5Ch+var_14], ecx
.text:00402EE7                 mov     ecx, [esp+5Ch+arg_0]
.text:00402EEB                 test    ecx, ecx
.text:00402EED                 jle     loc_403017
.text:00402EF3                 mov     dword ptr [ebp+0Ch], 0
.text:00402EFA                 mov     ebx, [ebp+0]
.text:00402EFD                 test    ebx, ebx
.text:00402EFF                 jz      loc_403A30
.text:00402F05                 mov     edi, [ebp+10h]
.text:00402F08                 test    edi, edi
.text:00402F0A                 jnz     short loc_402F63
.text:00402F0C                 lea     esi, [esi+0]
.text:00402F10
.text:00402F10 loc_402F10:                             ; CODE XREF: sub_402EC0+B7C↓j
.text:00402F10                 mov     [ebp+24h], ebx
.text:00402F13                 mov     esi, [esp+5Ch+Str]
.text:00402F17                 mov     [ebp+20h], ebx
.text:00402F1A                 mov     ecx, [esp+5Ch+arg_18]
.text:00402F1E                 xor     ebx, ebx
.text:00402F20                 mov     dword ptr [ebp+14h], 0
.text:00402F27                 test    ecx, ecx
.text:00402F29                 jz      loc_403A10
.text:00402F2F
.text:00402F2F loc_402F2F:                             ; CODE XREF: sub_402EC0+B64↓j
.text:00402F2F                 mov     ebx, 1
.text:00402F34
.text:00402F34 loc_402F34:                             ; CODE XREF: sub_402EC0+B5E↓j
.text:00402F34                 mov     [ebp+1Ch], ebx
.text:00402F37                 mov     ecx, [esp+5Ch+Str]
.text:00402F3B                 movzx   eax, byte ptr [ecx]
.text:00402F3E                 cmp     al, 2Dh ; '-'
.text:00402F40                 jz      loc_403A00
.text:00402F46                 cmp     al, 2Bh ; '+'
.text:00402F48                 jz      loc_4039E9
.text:00402F4E                 xor     edx, edx
.text:00402F50                 test    ebx, ebx
.text:00402F52                 setz    dl
.text:00402F55                 mov     [ebp+18h], edx
.text:00402F58
.text:00402F58 loc_402F58:                             ; CODE XREF: sub_402EC0+B35↓j
.text:00402F58                 mov     [esp+5Ch+Str], esi
.text:00402F5C                 mov     dword ptr [ebp+10h], 1
.text:00402F63
.text:00402F63 loc_402F63:                             ; CODE XREF: sub_402EC0+4A↑j
.text:00402F63                 mov     eax, [ebp+14h]
.text:00402F66                 test    eax, eax
.text:00402F68                 jz      short loc_402F73
.text:00402F6A                 cmp     byte ptr [eax], 0
.text:00402F6D                 jnz     loc_403050
.text:00402F73
.text:00402F73 loc_402F73:                             ; CODE XREF: sub_402EC0+A8↑j
.text:00402F73                 mov     ebx, [ebp+0]
.text:00402F76                 cmp     [ebp+24h], ebx
.text:00402F79                 jle     short loc_402F7E
.text:00402F7B                 mov     [ebp+24h], ebx
.text:00402F7E
.text:00402F7E loc_402F7E:                             ; CODE XREF: sub_402EC0+B9↑j
.text:00402F7E                 cmp     [ebp+20h], ebx
.text:00402F81                 jle     short loc_402F86
.text:00402F83                 mov     [ebp+20h], ebx
.text:00402F86
.text:00402F86 loc_402F86:                             ; CODE XREF: sub_402EC0+C1↑j
.text:00402F86                 cmp     dword ptr [ebp+18h], 1
.text:00402F8A                 jz      loc_403960
.text:00402F90
.text:00402F90 loc_402F90:                             ; CODE XREF: sub_402EC0+B13↓j
.text:00402F90                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402F94                 jz      loc_403944
.text:00402F9A                 cld
.text:00402F9B                 mov     ecx, [esp+5Ch+arg_4]
.text:00402F9F                 mov     edx, 3
.text:00402FA4                 mov     edi, offset dword_402C70
.text:00402FA9                 mov     esi, [ecx+ebx*4]
.text:00402FAC                 mov     ecx, edx
.text:00402FAE                 repe cmpsb
.text:00402FB0                 jnz     short loc_402FEC
.text:00402FB2                 mov     edx, [ebp+24h]
.text:00402FB5                 lea     eax, [ebx+1]
.text:00402FB8                 cmp     [ebp+20h], edx
.text:00402FBB                 mov     [ebp+0], eax
.text:00402FBE                 jz      loc_403958
.text:00402FC4                 cmp     edx, eax
.text:00402FC6                 jz      short loc_402FE0
.text:00402FC8                 mov     [esp+5Ch+Str2], ebp
.text:00402FCC                 mov     ebx, [esp+5Ch+arg_4]
.text:00402FD0                 mov     [esp+5Ch+Str1], ebx
.text:00402FD3                 call    sub_403B70
.text:00402FD8                 nop
.text:00402FD9                 lea     esi, [esi+0]
.text:00402FE0
.text:00402FE0 loc_402FE0:                             ; CODE XREF: sub_402EC0+106↑j
.text:00402FE0                                         ; sub_402EC0+A9B↓j
.text:00402FE0                 mov     eax, [esp+5Ch+arg_0]
.text:00402FE4                 mov     ebx, eax
.text:00402FE6                 mov     [ebp+24h], eax
.text:00402FE9                 mov     [ebp+0], eax
.text:00402FEC
.text:00402FEC loc_402FEC:                             ; CODE XREF: sub_402EC0+F0↑j
.text:00402FEC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402FF0                 jz      loc_403944
.text:00402FF6                 mov     esi, [esp+5Ch+arg_4]
.text:00402FFA                 mov     eax, [esi+ebx*4]
.text:00402FFD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403000                 jz      short loc_403027
.text:00403002
.text:00403002 loc_403002:                             ; CODE XREF: sub_402EC0+16D↓j
.text:00403002                 mov     edx, [ebp+18h]
.text:00403005                 test    edx, edx
.text:00403007                 jz      short loc_403020
.text:00403009                 mov     [ebp+0Ch], eax
.text:0040300C                 lea     edi, [ebx+1]
.text:0040300F                 mov     eax, 1
.text:00403014                 mov     [ebp+0], edi
.text:00403017
.text:00403017 loc_403017:                             ; CODE XREF: sub_402EC0+2D↑j
.text:00403017                                         ; sub_402EC0+165↓j ...
.text:00403017                 add     esp, 4Ch
.text:0040301A                 pop     ebx
.text:0040301B                 pop     esi
.text:0040301C                 pop     edi
.text:0040301D                 pop     ebp
.text:0040301E                 retn
.text:0040301E ; ---------------------------------------------------------------------------
.text:0040301F                 align 10h
.text:00403020
.text:00403020 loc_403020:                             ; CODE XREF: sub_402EC0+147↑j
.text:00403020                                         ; sub_402EC0+A8A↓j ...
.text:00403020                 mov     eax, 0FFFFFFFFh
.text:00403025                 jmp     short loc_403017
.text:00403027 ; ---------------------------------------------------------------------------
.text:00403027
.text:00403027 loc_403027:                             ; CODE XREF: sub_402EC0+140↑j
.text:00403027                 movzx   edx, byte ptr [eax+1]
.text:0040302B                 test    dl, dl
.text:0040302D                 jz      short loc_403002
.text:0040302F                 mov     ebx, [esp+5Ch+arg_C]
.text:00403033                 xor     ecx, ecx
.text:00403035                 test    ebx, ebx
.text:00403037                 jz      short loc_403042
.text:00403039                 cmp     dl, 2Dh ; '-'
.text:0040303C                 jz      loc_40393A
.text:00403042
.text:00403042 loc_403042:                             ; CODE XREF: sub_402EC0+177↑j
.text:00403042                                         ; sub_402EC0+A7F↓j
.text:00403042                 lea     esi, [ecx+eax+1]
.text:00403046                 mov     [ebp+14h], esi
.text:00403049                 lea     esi, [esi+0]
.text:00403050
.text:00403050 loc_403050:                             ; CODE XREF: sub_402EC0+AD↑j
.text:00403050                 mov     ecx, [esp+5Ch+arg_C]
.text:00403054                 test    ecx, ecx
.text:00403056                 jz      loc_4033E0
.text:0040305C                 mov     edx, [ebp+0]
.text:0040305F                 mov     edi, [esp+5Ch+arg_4]
.text:00403063                 mov     eax, [edi+edx*4]
.text:00403066                 movzx   edx, byte ptr [eax+1]
.text:0040306A                 cmp     dl, 2Dh ; '-'
.text:0040306D                 jz      short loc_403085
.text:0040306F                 mov     ebx, [esp+5Ch+arg_14]
.text:00403073                 test    ebx, ebx
.text:00403075                 jz      loc_4033E0
.text:0040307B                 cmp     byte ptr [eax+2], 0
.text:0040307F                 jz      loc_40391A
.text:00403085
.text:00403085 loc_403085:                             ; CODE XREF: sub_402EC0+1AD↑j
.text:00403085                                         ; sub_402EC0+A75↓j
.text:00403085                 mov     [esp+5Ch+var_18], 0
.text:0040308D                 mov     ecx, [ebp+14h]
.text:00403090                 mov     [esp+5Ch+var_1C], 0
.text:00403098                 mov     [esp+5Ch+var_20], 0
.text:004030A0                 mov     edi, ecx
.text:004030A2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:004030AA                 movzx   eax, byte ptr [ecx]
.text:004030AD                 test    al, al
.text:004030AF                 jz      short loc_4030CC
.text:004030B1                 cmp     al, 3Dh ; '='
.text:004030B3                 jz      short loc_4030CC
.text:004030B5                 lea     esi, [esi+0]
.text:004030B9                 lea     edi, [edi+0]
.text:004030C0
.text:004030C0 loc_4030C0:                             ; CODE XREF: sub_402EC0+20A↓j
.text:004030C0                 inc     edi
.text:004030C1                 movzx   eax, byte ptr [edi]
.text:004030C4                 test    al, al
.text:004030C6                 jz      short loc_4030CC
.text:004030C8                 cmp     al, 3Dh ; '='
.text:004030CA                 jnz     short loc_4030C0
.text:004030CC
.text:004030CC loc_4030CC:                             ; CODE XREF: sub_402EC0+1EF↑j
.text:004030CC                                         ; sub_402EC0+1F3↑j ...
.text:004030CC                 mov     [esp+5Ch+var_28], 0
.text:004030D4                 mov     esi, [esp+5Ch+arg_C]
.text:004030D8                 mov     ebx, [esi]
.text:004030DA                 test    ebx, ebx
.text:004030DC                 mov     edx, ebx
.text:004030DE                 jz      loc_403300
.text:004030E4                 lea     esi, [esi+0]
.text:004030EA                 lea     edi, [edi+0]
.text:004030F0
.text:004030F0 loc_4030F0:                             ; CODE XREF: sub_402EC0+25E↓j
.text:004030F0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004030F4                 mov     ebx, edi
.text:004030F6                 sub     ebx, ecx
.text:004030F8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004030FC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004030FF                 call    strncmp
.text:00403104                 test    eax, eax
.text:00403106                 jz      loc_403896
.text:0040310C
.text:0040310C loc_40310C:                             ; CODE XREF: sub_402EC0+A0F↓j
.text:0040310C                                         ; sub_402EC0+A24↓j ...
.text:0040310C                 inc     [esp+5Ch+var_28]
.text:00403110                 add     esi, 10h
.text:00403113                 mov     ecx, [esi]
.text:00403115                 test    ecx, ecx
.text:00403117                 mov     edx, ecx
.text:00403119                 jz      short loc_403120
.text:0040311B                 mov     ecx, [ebp+14h]
.text:0040311E                 jmp     short loc_4030F0
.text:00403120 ; ---------------------------------------------------------------------------
.text:00403120
.text:00403120 loc_403120:                             ; CODE XREF: sub_402EC0+259↑j
.text:00403120                                         ; sub_402EC0+A55↓j
.text:00403120                 mov     esi, [esp+5Ch+var_20]
.text:00403124                 test    esi, esi
.text:00403126                 jz      short loc_403134
.text:00403128                 mov     edx, [esp+5Ch+var_1C]
.text:0040312C                 test    edx, edx
.text:0040312E                 jz      loc_403840
.text:00403134
.text:00403134 loc_403134:                             ; CODE XREF: sub_402EC0+266↑j
.text:00403134                 mov     eax, [esp+5Ch+var_18]
.text:00403138                 test    eax, eax
.text:0040313A                 jz      loc_403300
.text:00403140                 mov     ecx, [ebp+0]
.text:00403143                 lea     eax, [ecx+1]
.text:00403146                 mov     [ebp+0], eax
.text:00403149                 cmp     byte ptr [edi], 0
.text:0040314C                 jz      loc_403260
.text:00403152                 mov     ecx, [esp+5Ch+var_18]
.text:00403156                 mov     esi, [ecx+4]
.text:00403159                 test    esi, esi
.text:0040315B                 jz      short loc_4031A6
.text:0040315D                 lea     ebx, [edi+1]
.text:00403160                 mov     [ebp+0Ch], ebx
.text:00403163
.text:00403163 loc_403163:                             ; CODE XREF: sub_402EC0+3A8↓j
.text:00403163                                         ; sub_402EC0+3C4↓j
.text:00403163                 mov     ebx, [ebp+14h]
.text:00403166                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403169                 call    strlen
.text:0040316E                 add     [ebp+14h], eax
.text:00403171                 mov     esi, [esp+5Ch+arg_10]
.text:00403175                 test    esi, esi
.text:00403177                 jz      short loc_403183
.text:00403179                 mov     ebp, [esp+5Ch+var_24]
.text:0040317D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403181                 mov     [ecx], ebp
.text:00403183
.text:00403183 loc_403183:                             ; CODE XREF: sub_402EC0+2B7↑j
.text:00403183                 mov     eax, [esp+5Ch+var_18]
.text:00403187                 mov     ecx, [eax+8]
.text:0040318A                 test    ecx, ecx
.text:0040318C                 jnz     short loc_40319A
.text:0040318E                 mov     ecx, [esp+5Ch+var_18]
.text:00403192
.text:00403192 loc_403192:                             ; CODE XREF: sub_402EC0+723↓j
.text:00403192                 mov     eax, [ecx+0Ch]
.text:00403195                 jmp     loc_403017
.text:0040319A ; ---------------------------------------------------------------------------
.text:0040319A
.text:0040319A loc_40319A:                             ; CODE XREF: sub_402EC0+2CC↑j
.text:0040319A                                         ; sub_402EC0+719↓j
.text:0040319A                 mov     esi, [eax+0Ch]
.text:0040319D                 xor     eax, eax
.text:0040319F                 mov     [ecx], esi
.text:004031A1                 jmp     loc_403017
.text:004031A6 ; ---------------------------------------------------------------------------
.text:004031A6
.text:004031A6 loc_4031A6:                             ; CODE XREF: sub_402EC0+29B↑j
.text:004031A6                 mov     edi, [esp+5Ch+var_14]
.text:004031AA                 test    edi, edi
.text:004031AC                 jz      short loc_403200
.text:004031AE                 mov     esi, [esp+5Ch+arg_4]
.text:004031B2                 mov     edx, [esi+eax*4-4]
.text:004031B6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004031BA                 jz      short loc_403222
.text:004031BC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004031C3                 call    ds:libintl_gettext
.text:004031C9                 mov     edx, [esp+5Ch+var_18]
.text:004031CD                 mov     edi, [edx]
.text:004031CF                 mov     [esp+5Ch+var_4C], edi
.text:004031D3                 mov     ebx, [ebp+0]
.text:004031D6                 mov     edi, [esp+5Ch+arg_4]
.text:004031DA                 mov     ecx, [edi+ebx*4-4]
.text:004031DE                 movsx   esi, byte ptr [ecx]
.text:004031E1                 mov     ecx, ds:_iob
.text:004031E7                 add     ecx, 40h ; '@'
.text:004031EA                 mov     [esp+5Ch+var_50], esi
.text:004031EE                 mov     ebx, [edi]
.text:004031F0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004031F4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004031F7                 mov     [esp+5Ch+MaxCount], ebx
.text:004031FB                 call    fprintf
.text:00403200
.text:00403200 loc_403200:                             ; CODE XREF: sub_402EC0+2EC↑j
.text:00403200                                         ; sub_402EC0+398↓j
.text:00403200                 mov     ecx, [ebp+14h]
.text:00403203                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403206                 call    strlen
.text:0040320B                 add     [ebp+14h], eax
.text:0040320E                 mov     eax, [esp+5Ch+var_18]
.text:00403212                 mov     esi, [eax+0Ch]
.text:00403215                 mov     [ebp+8], esi
.text:00403218
.text:00403218 loc_403218:                             ; CODE XREF: sub_402EC0+4E5↓j
.text:00403218                                         ; sub_402EC0+73E↓j ...
.text:00403218                 mov     eax, 3Fh ; '?'
.text:0040321D                 jmp     loc_403017
.text:00403222 ; ---------------------------------------------------------------------------
.text:00403222
.text:00403222 loc_403222:                             ; CODE XREF: sub_402EC0+2FA↑j
.text:00403222                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00403229                 call    ds:libintl_gettext
.text:0040322F                 mov     edx, [esp+5Ch+var_18]
.text:00403233                 mov     edi, [esp+5Ch+arg_4]
.text:00403237                 mov     ecx, ds:_iob
.text:0040323D                 mov     esi, [edx]
.text:0040323F                 add     ecx, 40h ; '@'
.text:00403242                 mov     [esp+5Ch+var_50], esi
.text:00403246                 mov     ebx, [edi]
.text:00403248                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040324C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040324F                 mov     [esp+5Ch+MaxCount], ebx
.text:00403253                 call    fprintf
.text:00403258                 jmp     short loc_403200
.text:00403258 ; ---------------------------------------------------------------------------
.text:0040325A                 align 10h
.text:00403260
.text:00403260 loc_403260:                             ; CODE XREF: sub_402EC0+28C↑j
.text:00403260                 mov     ebx, [esp+5Ch+var_18]
.text:00403264                 cmp     dword ptr [ebx+4], 1
.text:00403268                 jnz     loc_403163
.text:0040326E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403272                 jge     short loc_403289
.text:00403274                 mov     ebx, [esp+5Ch+arg_4]
.text:00403278                 lea     edi, [ecx+2]
.text:0040327B                 mov     [ebp+0], edi
.text:0040327E                 mov     esi, [ebx+eax*4]
.text:00403281                 mov     [ebp+0Ch], esi
.text:00403284                 jmp     loc_403163
.text:00403289 ; ---------------------------------------------------------------------------
.text:00403289
.text:00403289 loc_403289:                             ; CODE XREF: sub_402EC0+3B2↑j
.text:00403289                 mov     edx, [esp+5Ch+var_14]
.text:0040328D                 test    edx, edx
.text:0040328F                 jnz     short loc_4032C0
.text:00403291
.text:00403291 loc_403291:                             ; CODE XREF: sub_402EC0+437↓j
.text:00403291                 mov     edx, [ebp+14h]
.text:00403294                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403297                 call    strlen
.text:0040329C                 add     [ebp+14h], eax
.text:0040329F                 mov     eax, [esp+5Ch+var_18]
.text:004032A3                 mov     edi, [eax+0Ch]
.text:004032A6                 mov     [ebp+8], edi
.text:004032A9
.text:004032A9 loc_4032A9:                             ; CODE XREF: sub_402EC0+7C2↓j
.text:004032A9                 mov     ebp, [esp+5Ch+Str]
.text:004032AD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004032B1                 setnz   bl
.text:004032B4                 movzx   esi, bl
.text:004032B7                 lea     eax, [esi+esi*4+3Ah]
.text:004032BB                 jmp     loc_403017
.text:004032C0 ; ---------------------------------------------------------------------------
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_402EC0+3CF↑j
.text:004032C0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004032C7                 call    ds:libintl_gettext
.text:004032CD                 mov     ecx, [ebp+0]
.text:004032D0                 mov     esi, [esp+5Ch+arg_4]
.text:004032D4                 mov     ebx, [esi+ecx*4-4]
.text:004032D8                 mov     ecx, ds:_iob
.text:004032DE                 mov     [esp+5Ch+var_50], ebx
.text:004032E2                 mov     edi, [esi]
.text:004032E4                 add     ecx, 40h ; '@'
.text:004032E7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004032EB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004032EE                 mov     [esp+5Ch+MaxCount], edi
.text:004032F2                 call    fprintf
.text:004032F7                 jmp     short loc_403291
.text:004032F7 ; ---------------------------------------------------------------------------
.text:004032F9                 align 10h
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_402EC0+21E↑j
.text:00403300                                         ; sub_402EC0+27A↑j
.text:00403300                 mov     eax, [esp+5Ch+arg_14]
.text:00403304                 test    eax, eax
.text:00403306                 jz      short loc_403336
.text:00403308                 mov     ebx, [ebp+0]
.text:0040330B                 mov     esi, [esp+5Ch+arg_4]
.text:0040330F                 mov     edi, [esi+ebx*4]
.text:00403312                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403316                 jz      short loc_403339
.text:00403318                 mov     ecx, [ebp+14h]
.text:0040331B                 mov     edx, [esp+5Ch+Str]
.text:0040331F                 movsx   ebx, byte ptr [ecx]
.text:00403322                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403325                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00403329                 call    strchr
.text:0040332E                 test    eax, eax
.text:00403330                 jnz     loc_4033E0
.text:00403336
.text:00403336 loc_403336:                             ; CODE XREF: sub_402EC0+446↑j
.text:00403336                 mov     ebx, [ebp+0]
.text:00403339
.text:00403339 loc_403339:                             ; CODE XREF: sub_402EC0+456↑j
.text:00403339                 mov     eax, [esp+5Ch+var_14]
.text:0040333D                 test    eax, eax
.text:0040333F                 jz      short loc_403391
.text:00403341                 mov     esi, [esp+5Ch+arg_4]
.text:00403345                 mov     edi, [esi+ebx*4]
.text:00403348                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040334C                 jz      short loc_4033AA
.text:0040334E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403355                 call    ds:libintl_gettext
.text:0040335B                 mov     edi, [ebp+14h]
.text:0040335E                 mov     [esp+5Ch+var_4C], edi
.text:00403362                 mov     ebx, [ebp+0]
.text:00403365                 mov     edi, [esp+5Ch+arg_4]
.text:00403369                 mov     esi, [edi+ebx*4]
.text:0040336C                 movsx   ecx, byte ptr [esi]
.text:0040336F                 mov     esi, ds:_iob
.text:00403375                 add     esi, 40h ; '@'
.text:00403378                 mov     [esp+5Ch+var_50], ecx
.text:0040337C                 mov     ebx, [edi]
.text:0040337E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403382                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403385                 mov     [esp+5Ch+MaxCount], ebx
.text:00403389                 call    fprintf
.text:0040338E
.text:0040338E loc_40338E:                             ; CODE XREF: sub_402EC0+51D↓j
.text:0040338E                 mov     ebx, [ebp+0]
.text:00403391
.text:00403391 loc_403391:                             ; CODE XREF: sub_402EC0+47F↑j
.text:00403391                 mov     dword ptr [ebp+14h], offset dword_402D70
.text:00403398                 lea     edx, [ebx+1]
.text:0040339B                 mov     [ebp+0], edx
.text:0040339E
.text:0040339E loc_40339E:                             ; CODE XREF: sub_402EC0+999↓j
.text:0040339E                 mov     dword ptr [ebp+8], 0
.text:004033A5                 jmp     loc_403218
.text:004033AA ; ---------------------------------------------------------------------------
.text:004033AA
.text:004033AA loc_4033AA:                             ; CODE XREF: sub_402EC0+48C↑j
.text:004033AA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004033B1                 call    ds:libintl_gettext
.text:004033B7                 mov     ecx, [ebp+14h]
.text:004033BA                 mov     edi, [esp+5Ch+arg_4]
.text:004033BE                 mov     edx, ds:_iob
.text:004033C4                 mov     [esp+5Ch+var_50], ecx
.text:004033C8                 mov     ebx, [edi]
.text:004033CA                 add     edx, 40h ; '@'
.text:004033CD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004033D1                 mov     [esp+5Ch+MaxCount], ebx
.text:004033D5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004033D8                 call    fprintf
.text:004033DD                 jmp     short loc_40338E
.text:004033DD ; ---------------------------------------------------------------------------
.text:004033DF                 align 10h
.text:004033E0
.text:004033E0 loc_4033E0:                             ; CODE XREF: sub_402EC0+196↑j
.text:004033E0                                         ; sub_402EC0+1B5↑j ...
.text:004033E0                 mov     esi, [ebp+14h]
.text:004033E3                 movzx   ebx, byte ptr [esi]
.text:004033E6                 inc     esi
.text:004033E7                 mov     [ebp+14h], esi
.text:004033EA                 mov     ecx, [esp+5Ch+Str]
.text:004033EE                 movsx   esi, bl
.text:004033F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004033F5                 mov     edi, esi
.text:004033F7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004033FA                 call    strchr
.text:004033FF                 mov     ecx, [ebp+14h]
.text:00403402                 cmp     byte ptr [ecx], 0
.text:00403405                 jnz     short loc_40340A
.text:00403407                 inc     dword ptr [ebp+0]
.text:0040340A
.text:0040340A loc_40340A:                             ; CODE XREF: sub_402EC0+545↑j
.text:0040340A                 test    eax, eax
.text:0040340C                 jz      loc_4037F0
.text:00403412                 cmp     bl, 3Ah ; ':'
.text:00403415                 jz      loc_4037F0
.text:0040341B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040341E                 jz      loc_4034D6
.text:00403424                 movzx   edx, byte ptr [eax+1]
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_402EC0+61D↓j
.text:00403428                 cmp     dl, 3Ah ; ':'
.text:0040342B                 jz      short loc_403434
.text:0040342D
.text:0040342D loc_40342D:                             ; CODE XREF: sub_402EC0+590↓j
.text:0040342D                 mov     eax, esi
.text:0040342F                 jmp     loc_403017
.text:00403434 ; ---------------------------------------------------------------------------
.text:00403434
.text:00403434 loc_403434:                             ; CODE XREF: sub_402EC0+56B↑j
.text:00403434                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403438                 jz      loc_4034C1
.text:0040343E                 cmp     byte ptr [ecx], 0
.text:00403441                 jz      short loc_403452
.text:00403443
.text:00403443 loc_403443:                             ; CODE XREF: sub_402EC0+604↓j
.text:00403443                 inc     dword ptr [ebp+0]
.text:00403446                 mov     [ebp+0Ch], ecx
.text:00403449
.text:00403449 loc_403449:                             ; CODE XREF: sub_402EC0+5AB↓j
.text:00403449                                         ; sub_402EC0+5C6↓j ...
.text:00403449                 mov     dword ptr [ebp+14h], 0
.text:00403450                 jmp     short loc_40342D
.text:00403452 ; ---------------------------------------------------------------------------
.text:00403452
.text:00403452 loc_403452:                             ; CODE XREF: sub_402EC0+581↑j
.text:00403452                 mov     ecx, [ebp+0]
.text:00403455                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403459                 jz      short loc_40346D
.text:0040345B                 mov     eax, [esp+5Ch+arg_4]
.text:0040345F                 lea     edx, [ecx+1]
.text:00403462                 mov     [ebp+0], edx
.text:00403465                 mov     ebx, [eax+ecx*4]
.text:00403468                 mov     [ebp+0Ch], ebx
.text:0040346B                 jmp     short loc_403449
.text:0040346D ; ---------------------------------------------------------------------------
.text:0040346D
.text:0040346D loc_40346D:                             ; CODE XREF: sub_402EC0+599↑j
.text:0040346D                 mov     ecx, [esp+5Ch+var_14]
.text:00403471                 test    ecx, ecx
.text:00403473                 jnz     short loc_40348F
.text:00403475
.text:00403475 loc_403475:                             ; CODE XREF: sub_402EC0+5FF↓j
.text:00403475                 mov     [ebp+8], edi
.text:00403478                 mov     edi, [esp+5Ch+Str]
.text:0040347C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040347F                 jz      short loc_403488
.text:00403481                 mov     esi, 3Fh ; '?'
.text:00403486                 jmp     short loc_403449
.text:00403488 ; ---------------------------------------------------------------------------
.text:00403488
.text:00403488 loc_403488:                             ; CODE XREF: sub_402EC0+5BF↑j
.text:00403488                 mov     esi, 3Ah ; ':'
.text:0040348D                 jmp     short loc_403449
.text:0040348F ; ---------------------------------------------------------------------------
.text:0040348F
.text:0040348F loc_40348F:                             ; CODE XREF: sub_402EC0+5B3↑j
.text:0040348F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403496                 call    ds:libintl_gettext
.text:0040349C                 mov     [esp+5Ch+var_50], edi
.text:004034A0                 mov     ebx, [esp+5Ch+arg_4]
.text:004034A4                 mov     edx, ds:_iob
.text:004034AA                 mov     esi, [ebx]
.text:004034AC                 add     edx, 40h ; '@'
.text:004034AF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034B3                 mov     [esp+5Ch+MaxCount], esi
.text:004034B7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004034BA                 call    fprintf
.text:004034BF                 jmp     short loc_403475
.text:004034C1 ; ---------------------------------------------------------------------------
.text:004034C1
.text:004034C1 loc_4034C1:                             ; CODE XREF: sub_402EC0+578↑j
.text:004034C1                 cmp     byte ptr [ecx], 0
.text:004034C4                 jnz     loc_403443
.text:004034CA                 mov     dword ptr [ebp+0Ch], 0
.text:004034D1                 jmp     loc_403449
.text:004034D6 ; ---------------------------------------------------------------------------
.text:004034D6
.text:004034D6 loc_4034D6:                             ; CODE XREF: sub_402EC0+55E↑j
.text:004034D6                 movzx   edx, byte ptr [eax+1]
.text:004034DA                 cmp     dl, 3Bh ; ';'
.text:004034DD                 jnz     loc_403428
.text:004034E3                 mov     [esp+5Ch+var_2C], 0
.text:004034EB                 mov     [esp+5Ch+var_30], 0
.text:004034F3                 mov     [esp+5Ch+var_34], 0
.text:004034FB                 mov     [esp+5Ch+var_38], 0
.text:00403503                 cmp     byte ptr [ecx], 0
.text:00403506                 jz      loc_40377B
.text:0040350C                 inc     dword ptr [ebp+0]
.text:0040350F                 mov     [ebp+0Ch], ecx
.text:00403512
.text:00403512 loc_403512:                             ; CODE XREF: sub_402EC0+8D4↓j
.text:00403512                 mov     edi, [ebp+0Ch]
.text:00403515                 mov     [ebp+14h], edi
.text:00403518                 movzx   eax, byte ptr [edi]
.text:0040351B                 test    al, al
.text:0040351D                 jz      short loc_40352F
.text:0040351F                 cmp     al, 3Dh ; '='
.text:00403521                 jz      short loc_40352F
.text:00403523
.text:00403523 loc_403523:                             ; CODE XREF: sub_402EC0+66D↓j
.text:00403523                 inc     edi
.text:00403524                 movzx   eax, byte ptr [edi]
.text:00403527                 test    al, al
.text:00403529                 jz      short loc_40352F
.text:0040352B                 cmp     al, 3Dh ; '='
.text:0040352D                 jnz     short loc_403523
.text:0040352F
.text:0040352F loc_40352F:                             ; CODE XREF: sub_402EC0+65D↑j
.text:0040352F                                         ; sub_402EC0+661↑j ...
.text:0040352F                 mov     [esp+5Ch+var_3C], 0
.text:00403537                 mov     esi, [esp+5Ch+arg_C]
.text:0040353B                 mov     eax, [esi]
.text:0040353D                 test    eax, eax
.text:0040353F                 jz      loc_4036C0
.text:00403545                 mov     ecx, eax
.text:00403547
.text:00403547 loc_403547:                             ; CODE XREF: sub_402EC0+6B3↓j
.text:00403547                 mov     ebx, [ebp+14h]
.text:0040354A                 mov     eax, edi
.text:0040354C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040354F                 sub     eax, ebx
.text:00403551                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403555                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403559                 call    strncmp
.text:0040355E                 test    eax, eax
.text:00403560                 jz      loc_403727
.text:00403566
.text:00403566 loc_403566:                             ; CODE XREF: sub_402EC0+88C↓j
.text:00403566                                         ; sub_402EC0+89D↓j
.text:00403566                 inc     [esp+5Ch+var_3C]
.text:0040356A                 add     esi, 10h
.text:0040356D                 mov     edx, [esi]
.text:0040356F                 test    edx, edx
.text:00403571                 mov     ecx, edx
.text:00403573                 jnz     short loc_403547
.text:00403575
.text:00403575 loc_403575:                             ; CODE XREF: sub_402EC0+8B6↓j
.text:00403575                 mov     esi, [esp+5Ch+var_34]
.text:00403579                 test    esi, esi
.text:0040357B                 jz      short loc_403589
.text:0040357D                 mov     ebx, [esp+5Ch+var_30]
.text:00403581                 test    ebx, ebx
.text:00403583                 jz      loc_4036D1
.text:00403589
.text:00403589 loc_403589:                             ; CODE XREF: sub_402EC0+6BB↑j
.text:00403589                 mov     esi, [esp+5Ch+var_2C]
.text:0040358D                 test    esi, esi
.text:0040358F                 jz      loc_4036C0
.text:00403595                 cmp     byte ptr [edi], 0
.text:00403598                 jz      loc_403640
.text:0040359E                 mov     ecx, [esp+5Ch+var_2C]
.text:004035A2                 mov     ebx, [ecx+4]
.text:004035A5                 test    ebx, ebx
.text:004035A7                 jz      short loc_4035E8
.text:004035A9                 lea     edx, [edi+1]
.text:004035AC                 mov     [ebp+0Ch], edx
.text:004035AF
.text:004035AF loc_4035AF:                             ; CODE XREF: sub_402EC0+788↓j
.text:004035AF                                         ; sub_402EC0+7A7↓j
.text:004035AF                 mov     edi, [ebp+14h]
.text:004035B2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004035B5                 call    strlen
.text:004035BA                 add     [ebp+14h], eax
.text:004035BD                 mov     eax, [esp+5Ch+arg_10]
.text:004035C1                 test    eax, eax
.text:004035C3                 jz      short loc_4035D0
.text:004035C5                 mov     edx, [esp+5Ch+var_38]
.text:004035C9                 mov     ebp, [esp+5Ch+arg_10]
.text:004035CD                 mov     [ebp+0], edx
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_402EC0+703↑j
.text:004035D0                 mov     eax, [esp+5Ch+var_2C]
.text:004035D4                 mov     ecx, [eax+8]
.text:004035D7                 test    ecx, ecx
.text:004035D9                 jnz     loc_40319A
.text:004035DF                 mov     ecx, [esp+5Ch+var_2C]
.text:004035E3                 jmp     loc_403192
.text:004035E8 ; ---------------------------------------------------------------------------
.text:004035E8
.text:004035E8 loc_4035E8:                             ; CODE XREF: sub_402EC0+6E7↑j
.text:004035E8                 mov     eax, [esp+5Ch+var_14]
.text:004035EC                 test    eax, eax
.text:004035EE                 jnz     short loc_403603
.text:004035F0
.text:004035F0 loc_4035F0:                             ; CODE XREF: sub_402EC0+779↓j
.text:004035F0                 mov     ecx, [ebp+14h]
.text:004035F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004035F6                 call    strlen
.text:004035FB                 add     [ebp+14h], eax
.text:004035FE                 jmp     loc_403218
.text:00403603 ; ---------------------------------------------------------------------------
.text:00403603
.text:00403603 loc_403603:                             ; CODE XREF: sub_402EC0+72E↑j
.text:00403603                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040360A                 call    ds:libintl_gettext
.text:00403610                 mov     edx, [esp+5Ch+var_2C]
.text:00403614                 mov     ebx, [esp+5Ch+arg_4]
.text:00403618                 mov     edi, [edx]
.text:0040361A                 mov     [esp+5Ch+var_50], edi
.text:0040361E                 mov     edi, ds:_iob
.text:00403624                 mov     esi, [ebx]
.text:00403626                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040362A                 add     edi, 40h ; '@'
.text:0040362D                 mov     [esp+5Ch+MaxCount], esi
.text:00403631                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403634                 call    fprintf
.text:00403639                 jmp     short loc_4035F0
.text:00403639 ; ---------------------------------------------------------------------------
.text:0040363B                 align 10h
.text:00403640
.text:00403640 loc_403640:                             ; CODE XREF: sub_402EC0+6D8↑j
.text:00403640                 mov     esi, [esp+5Ch+var_2C]
.text:00403644                 cmp     dword ptr [esi+4], 1
.text:00403648                 jnz     loc_4035AF
.text:0040364E                 mov     ecx, [ebp+0]
.text:00403651                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403655                 jge     short loc_40366C
.text:00403657                 mov     eax, [esp+5Ch+arg_4]
.text:0040365B                 lea     ebx, [ecx+1]
.text:0040365E                 mov     [ebp+0], ebx
.text:00403661                 mov     edi, [eax+ecx*4]
.text:00403664                 mov     [ebp+0Ch], edi
.text:00403667                 jmp     loc_4035AF
.text:0040366C ; ---------------------------------------------------------------------------
.text:0040366C
.text:0040366C loc_40366C:                             ; CODE XREF: sub_402EC0+795↑j
.text:0040366C                 mov     edx, [esp+5Ch+var_14]
.text:00403670                 test    edx, edx
.text:00403672                 jnz     short loc_403687
.text:00403674
.text:00403674 loc_403674:                             ; CODE XREF: sub_402EC0+7FE↓j
.text:00403674                 mov     edx, [ebp+14h]
.text:00403677                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040367A                 call    strlen
.text:0040367F                 add     [ebp+14h], eax
.text:00403682                 jmp     loc_4032A9
.text:00403687 ; ---------------------------------------------------------------------------
.text:00403687
.text:00403687 loc_403687:                             ; CODE XREF: sub_402EC0+7B2↑j
.text:00403687                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040368E                 call    ds:libintl_gettext
.text:00403694                 mov     ecx, [ebp+0]
.text:00403697                 mov     ebx, [esp+5Ch+arg_4]
.text:0040369B                 mov     edi, [ebx+ecx*4-4]
.text:0040369F                 mov     ecx, ds:_iob
.text:004036A5                 mov     [esp+5Ch+var_50], edi
.text:004036A9                 mov     esi, [ebx]
.text:004036AB                 add     ecx, 40h ; '@'
.text:004036AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004036B2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004036B5                 mov     [esp+5Ch+MaxCount], esi
.text:004036B9                 call    fprintf
.text:004036BE                 jmp     short loc_403674
.text:004036C0 ; ---------------------------------------------------------------------------
.text:004036C0
.text:004036C0 loc_4036C0:                             ; CODE XREF: sub_402EC0+67F↑j
.text:004036C0                                         ; sub_402EC0+6CF↑j
.text:004036C0                 mov     dword ptr [ebp+14h], 0
.text:004036C7                 mov     eax, 57h ; 'W'
.text:004036CC                 jmp     loc_403017
.text:004036D1 ; ---------------------------------------------------------------------------
.text:004036D1
.text:004036D1 loc_4036D1:                             ; CODE XREF: sub_402EC0+6C3↑j
.text:004036D1                 mov     edi, [esp+5Ch+var_14]
.text:004036D5                 test    edi, edi
.text:004036D7                 jnz     short loc_4036EF
.text:004036D9
.text:004036D9 loc_4036D9:                             ; CODE XREF: sub_402EC0+865↓j
.text:004036D9                 mov     edx, [ebp+14h]
.text:004036DC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004036DF                 call    strlen
.text:004036E4                 add     [ebp+14h], eax
.text:004036E7                 inc     dword ptr [ebp+0]
.text:004036EA                 jmp     loc_403218
.text:004036EF ; ---------------------------------------------------------------------------
.text:004036EF
.text:004036EF loc_4036EF:                             ; CODE XREF: sub_402EC0+817↑j
.text:004036EF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004036F6                 call    ds:libintl_gettext
.text:004036FC                 mov     ecx, [ebp+0]
.text:004036FF                 mov     ebx, [esp+5Ch+arg_4]
.text:00403703                 mov     edi, [ebx+ecx*4]
.text:00403706                 mov     ecx, ds:_iob
.text:0040370C                 mov     [esp+5Ch+var_50], edi
.text:00403710                 mov     esi, [ebx]
.text:00403712                 add     ecx, 40h ; '@'
.text:00403715                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403719                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040371C                 mov     [esp+5Ch+MaxCount], esi
.text:00403720                 call    fprintf
.text:00403725                 jmp     short loc_4036D9
.text:00403727 ; ---------------------------------------------------------------------------
.text:00403727
.text:00403727 loc_403727:                             ; CODE XREF: sub_402EC0+6A0↑j
.text:00403727                 mov     edx, [ebp+14h]
.text:0040372A                 mov     ebx, edi
.text:0040372C                 mov     ecx, [esi]
.text:0040372E                 sub     ebx, edx
.text:00403730                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403733                 call    strlen
.text:00403738                 cmp     ebx, eax
.text:0040373A                 jz      short loc_403762
.text:0040373C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403740                 test    ebx, ebx
.text:00403742                 jz      short loc_403751
.text:00403744                 mov     [esp+5Ch+var_34], 1
.text:0040374C                 jmp     loc_403566
.text:00403751 ; ---------------------------------------------------------------------------
.text:00403751
.text:00403751 loc_403751:                             ; CODE XREF: sub_402EC0+882↑j
.text:00403751                 mov     [esp+5Ch+var_2C], esi
.text:00403755                 mov     ecx, [esp+5Ch+var_3C]
.text:00403759                 mov     [esp+5Ch+var_38], ecx
.text:0040375D                 jmp     loc_403566
.text:00403762 ; ---------------------------------------------------------------------------
.text:00403762
.text:00403762 loc_403762:                             ; CODE XREF: sub_402EC0+87A↑j
.text:00403762                 mov     [esp+5Ch+var_2C], esi
.text:00403766                 mov     eax, [esp+5Ch+var_3C]
.text:0040376A                 mov     [esp+5Ch+var_30], 1
.text:00403772                 mov     [esp+5Ch+var_38], eax
.text:00403776                 jmp     loc_403575
.text:0040377B ; ---------------------------------------------------------------------------
.text:0040377B
.text:0040377B loc_40377B:                             ; CODE XREF: sub_402EC0+646↑j
.text:0040377B                 mov     edx, [ebp+0]
.text:0040377E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403782                 jz      short loc_403799
.text:00403784                 mov     ebx, [esp+5Ch+arg_4]
.text:00403788                 lea     esi, [edx+1]
.text:0040378B                 mov     [ebp+0], esi
.text:0040378E                 mov     edi, [ebx+edx*4]
.text:00403791                 mov     [ebp+0Ch], edi
.text:00403794                 jmp     loc_403512
.text:00403799 ; ---------------------------------------------------------------------------
.text:00403799
.text:00403799 loc_403799:                             ; CODE XREF: sub_402EC0+8C2↑j
.text:00403799                 mov     edi, [esp+5Ch+var_14]
.text:0040379D                 test    edi, edi
.text:0040379F                 jnz     short loc_4037BC
.text:004037A1
.text:004037A1 loc_4037A1:                             ; CODE XREF: sub_402EC0+92C↓j
.text:004037A1                 mov     [ebp+8], esi
.text:004037A4                 mov     ebp, [esp+5Ch+Str]
.text:004037A8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004037AC                 jz      short loc_4037B8
.text:004037AE                 mov     bl, 3Fh ; '?'
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_402EC0+8FA↓j
.text:004037B0                 movsx   eax, bl
.text:004037B3                 jmp     loc_403017
.text:004037B8 ; ---------------------------------------------------------------------------
.text:004037B8
.text:004037B8 loc_4037B8:                             ; CODE XREF: sub_402EC0+8EC↑j
.text:004037B8                 mov     bl, 3Ah ; ':'
.text:004037BA                 jmp     short loc_4037B0
.text:004037BC ; ---------------------------------------------------------------------------
.text:004037BC
.text:004037BC loc_4037BC:                             ; CODE XREF: sub_402EC0+8DF↑j
.text:004037BC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004037C3                 call    ds:libintl_gettext
.text:004037C9                 mov     [esp+5Ch+var_50], esi
.text:004037CD                 mov     edx, [esp+5Ch+arg_4]
.text:004037D1                 mov     ecx, ds:_iob
.text:004037D7                 mov     ebx, [edx]
.text:004037D9                 add     ecx, 40h ; '@'
.text:004037DC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004037E0                 mov     [esp+5Ch+MaxCount], ebx
.text:004037E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004037E7                 call    fprintf
.text:004037EC                 jmp     short loc_4037A1
.text:004037EC ; ---------------------------------------------------------------------------
.text:004037EE                 align 10h
.text:004037F0
.text:004037F0 loc_4037F0:                             ; CODE XREF: sub_402EC0+54C↑j
.text:004037F0                                         ; sub_402EC0+555↑j
.text:004037F0                 mov     eax, [esp+5Ch+var_14]
.text:004037F4                 test    eax, eax
.text:004037F6                 jz      short loc_40382F
.text:004037F8                 mov     ebx, [ebp+1Ch]
.text:004037FB                 test    ebx, ebx
.text:004037FD                 jz      short loc_403837
.text:004037FF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00403806
.text:00403806 loc_403806:                             ; CODE XREF: sub_402EC0+97E↓j
.text:00403806                 call    ds:libintl_gettext
.text:0040380C                 mov     [esp+5Ch+var_50], esi
.text:00403810                 mov     ebx, [esp+5Ch+arg_4]
.text:00403814                 mov     edx, ds:_iob
.text:0040381A                 mov     esi, [ebx]
.text:0040381C                 add     edx, 40h ; '@'
.text:0040381F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403823                 mov     [esp+5Ch+MaxCount], esi
.text:00403827                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040382A                 call    fprintf
.text:0040382F
.text:0040382F loc_40382F:                             ; CODE XREF: sub_402EC0+936↑j
.text:0040382F                 mov     [ebp+8], edi
.text:00403832                 jmp     loc_403218
.text:00403837 ; ---------------------------------------------------------------------------
.text:00403837
.text:00403837 loc_403837:                             ; CODE XREF: sub_402EC0+93D↑j
.text:00403837                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040383E                 jmp     short loc_403806
.text:00403840 ; ---------------------------------------------------------------------------
.text:00403840
.text:00403840 loc_403840:                             ; CODE XREF: sub_402EC0+26E↑j
.text:00403840                 mov     edi, [esp+5Ch+var_14]
.text:00403844                 test    edi, edi
.text:00403846                 jnz     short loc_40385E
.text:00403848
.text:00403848 loc_403848:                             ; CODE XREF: sub_402EC0+9D4↓j
.text:00403848                 mov     edx, [ebp+14h]
.text:0040384B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040384E                 call    strlen
.text:00403853                 add     [ebp+14h], eax
.text:00403856                 inc     dword ptr [ebp+0]
.text:00403859                 jmp     loc_40339E
.text:0040385E ; ---------------------------------------------------------------------------
.text:0040385E
.text:0040385E loc_40385E:                             ; CODE XREF: sub_402EC0+986↑j
.text:0040385E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403865                 call    ds:libintl_gettext
.text:0040386B                 mov     ebx, [ebp+0]
.text:0040386E                 mov     edi, [esp+5Ch+arg_4]
.text:00403872                 mov     ecx, [edi+ebx*4]
.text:00403875                 mov     ebx, ds:_iob
.text:0040387B                 mov     [esp+5Ch+var_50], ecx
.text:0040387F                 mov     esi, [edi]
.text:00403881                 add     ebx, 40h ; '@'
.text:00403884                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403888                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040388B                 mov     [esp+5Ch+MaxCount], esi
.text:0040388F                 call    fprintf
.text:00403894                 jmp     short loc_403848
.text:00403896 ; ---------------------------------------------------------------------------
.text:00403896
.text:00403896 loc_403896:                             ; CODE XREF: sub_402EC0+246↑j
.text:00403896                 mov     ecx, [ebp+14h]
.text:00403899                 mov     ebx, edi
.text:0040389B                 mov     edx, [esi]
.text:0040389D                 sub     ebx, ecx
.text:0040389F                 mov     [esp+5Ch+Str1], edx ; Str
.text:004038A2                 call    strlen
.text:004038A7                 cmp     ebx, eax
.text:004038A9                 jz      short loc_403901
.text:004038AB                 mov     ebx, [esp+5Ch+var_18]
.text:004038AF                 test    ebx, ebx
.text:004038B1                 jz      short loc_4038F0
.text:004038B3                 mov     edx, [esp+5Ch+arg_14]
.text:004038B7                 test    edx, edx
.text:004038B9                 jnz     short loc_4038C7
.text:004038BB                 mov     ecx, [esp+5Ch+var_18]
.text:004038BF                 mov     ebx, [esi+4]
.text:004038C2                 cmp     [ecx+4], ebx
.text:004038C5                 jz      short loc_4038D4
.text:004038C7
.text:004038C7 loc_4038C7:                             ; CODE XREF: sub_402EC0+9F9↑j
.text:004038C7                                         ; sub_402EC0+A1A↓j ...
.text:004038C7                 mov     [esp+5Ch+var_20], 1
.text:004038CF                 jmp     loc_40310C
.text:004038D4 ; ---------------------------------------------------------------------------
.text:004038D4
.text:004038D4 loc_4038D4:                             ; CODE XREF: sub_402EC0+A05↑j
.text:004038D4                 mov     edx, [esi+8]
.text:004038D7                 cmp     [ecx+8], edx
.text:004038DA                 jnz     short loc_4038C7
.text:004038DC                 mov     ebx, [esi+0Ch]
.text:004038DF                 cmp     [ecx+0Ch], ebx
.text:004038E2                 jnz     short loc_4038C7
.text:004038E4                 jmp     loc_40310C
.text:004038E4 ; ---------------------------------------------------------------------------
.text:004038E9                 align 10h
.text:004038F0
.text:004038F0 loc_4038F0:                             ; CODE XREF: sub_402EC0+9F1↑j
.text:004038F0                 mov     [esp+5Ch+var_18], esi
.text:004038F4                 mov     eax, [esp+5Ch+var_28]
.text:004038F8                 mov     [esp+5Ch+var_24], eax
.text:004038FC                 jmp     loc_40310C
.text:00403901 ; ---------------------------------------------------------------------------
.text:00403901
.text:00403901 loc_403901:                             ; CODE XREF: sub_402EC0+9E9↑j
.text:00403901                 mov     [esp+5Ch+var_18], esi
.text:00403905                 mov     ecx, [esp+5Ch+var_28]
.text:00403909                 mov     [esp+5Ch+var_1C], 1
.text:00403911                 mov     [esp+5Ch+var_24], ecx
.text:00403915                 jmp     loc_403120
.text:0040391A ; ---------------------------------------------------------------------------
.text:0040391A
.text:0040391A loc_40391A:                             ; CODE XREF: sub_402EC0+1BF↑j
.text:0040391A                 mov     eax, [esp+5Ch+Str]
.text:0040391E                 movsx   esi, dl
.text:00403921                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403925                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403928                 call    strchr
.text:0040392D                 test    eax, eax
.text:0040392F                 jnz     loc_4033E0
.text:00403935                 jmp     loc_403085
.text:0040393A ; ---------------------------------------------------------------------------
.text:0040393A
.text:0040393A loc_40393A:                             ; CODE XREF: sub_402EC0+17C↑j
.text:0040393A                 mov     ecx, 1
.text:0040393F                 jmp     loc_403042
.text:00403944 ; ---------------------------------------------------------------------------
.text:00403944
.text:00403944 loc_403944:                             ; CODE XREF: sub_402EC0+D4↑j
.text:00403944                                         ; sub_402EC0+130↑j
.text:00403944                 mov     eax, [ebp+20h]
.text:00403947                 cmp     eax, [ebp+24h]
.text:0040394A                 jz      loc_403020
.text:00403950                 mov     [ebp+0], eax
.text:00403953                 jmp     loc_403020
.text:00403958 ; ---------------------------------------------------------------------------
.text:00403958
.text:00403958 loc_403958:                             ; CODE XREF: sub_402EC0+FE↑j
.text:00403958                 mov     [ebp+20h], eax
.text:0040395B                 jmp     loc_402FE0
.text:00403960 ; ---------------------------------------------------------------------------
.text:00403960
.text:00403960 loc_403960:                             ; CODE XREF: sub_402EC0+CA↑j
.text:00403960                 mov     edx, [ebp+20h]
.text:00403963                 mov     eax, [ebp+24h]
.text:00403966                 cmp     edx, eax
.text:00403968                 jz      short loc_4039E0
.text:0040396A                 cmp     eax, ebx
.text:0040396C                 jz      short loc_403981
.text:0040396E                 mov     [esp+5Ch+Str2], ebp
.text:00403972                 mov     ebx, [esp+5Ch+arg_4]
.text:00403976                 mov     [esp+5Ch+Str1], ebx
.text:00403979                 call    sub_403B70
.text:0040397E                 mov     ebx, [ebp+0]
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: sub_402EC0+AAC↑j
.text:00403981                                         ; sub_402EC0+B22↓j ...
.text:00403981                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403985                 jge     short loc_4039D0
.text:00403987                 mov     esi, [esp+5Ch+arg_4]
.text:0040398B                 mov     eax, [esi+ebx*4]
.text:0040398E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403991                 jz      short loc_4039D8
.text:00403993                 lea     esi, [esi+0]
.text:00403999                 lea     edi, [edi+0]
.text:004039A0
.text:004039A0 loc_4039A0:                             ; CODE XREF: sub_402EC0+AFC↓j
.text:004039A0                                         ; sub_402EC0+B1C↓j
.text:004039A0                 lea     eax, [ebx+1]
.text:004039A3                 mov     ebx, eax
.text:004039A5                 mov     [ebp+0], eax
.text:004039A8                 cmp     eax, [esp+5Ch+arg_0]
.text:004039AC                 jge     short loc_4039D0
.text:004039AE                 mov     edi, [esp+5Ch+arg_4]
.text:004039B2                 mov     edx, [edi+eax*4]
.text:004039B5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004039B8                 jz      short loc_4039C0
.text:004039BA
.text:004039BA loc_4039BA:                             ; CODE XREF: sub_402EC0+B04↓j
.text:004039BA                 mov     ebx, eax
.text:004039BC                 jmp     short loc_4039A0
.text:004039BC ; ---------------------------------------------------------------------------
.text:004039BE                 align 10h
.text:004039C0
.text:004039C0 loc_4039C0:                             ; CODE XREF: sub_402EC0+AF8↑j
.text:004039C0                 cmp     byte ptr [edx+1], 0
.text:004039C4                 jz      short loc_4039BA
.text:004039C6                 lea     esi, [esi+0]
.text:004039C9                 lea     edi, [edi+0]
.text:004039D0
.text:004039D0 loc_4039D0:                             ; CODE XREF: sub_402EC0+AC5↑j
.text:004039D0                                         ; sub_402EC0+AEC↑j ...
.text:004039D0                 mov     [ebp+24h], ebx
.text:004039D3                 jmp     loc_402F90
.text:004039D8 ; ---------------------------------------------------------------------------
.text:004039D8
.text:004039D8 loc_4039D8:                             ; CODE XREF: sub_402EC0+AD1↑j
.text:004039D8                 cmp     byte ptr [eax+1], 0
.text:004039DC                 jz      short loc_4039A0
.text:004039DE                 jmp     short loc_4039D0
.text:004039E0 ; ---------------------------------------------------------------------------
.text:004039E0
.text:004039E0 loc_4039E0:                             ; CODE XREF: sub_402EC0+AA8↑j
.text:004039E0                 cmp     edx, ebx
.text:004039E2                 jz      short loc_403981
.text:004039E4                 mov     [ebp+20h], ebx
.text:004039E7                 jmp     short loc_403981
.text:004039E9 ; ---------------------------------------------------------------------------
.text:004039E9
.text:004039E9 loc_4039E9:                             ; CODE XREF: sub_402EC0+88↑j
.text:004039E9                 mov     dword ptr [ebp+18h], 0
.text:004039F0                 mov     esi, [esp+5Ch+Str]
.text:004039F4
.text:004039F4 loc_4039F4:                             ; CODE XREF: sub_402EC0+B49↓j
.text:004039F4                 inc     esi
.text:004039F5                 jmp     loc_402F58
.text:004039F5 ; ---------------------------------------------------------------------------
.text:004039FA                 align 10h
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_402EC0+80↑j
.text:00403A00                 mov     dword ptr [ebp+18h], 2
.text:00403A07                 mov     esi, ecx
.text:00403A09                 jmp     short loc_4039F4
.text:00403A09 ; ---------------------------------------------------------------------------
.text:00403A0B                 align 10h
.text:00403A10
.text:00403A10 loc_403A10:                             ; CODE XREF: sub_402EC0+69↑j
.text:00403A10                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00403A17                 call    getenv
.text:00403A1C                 test    eax, eax
.text:00403A1E                 jz      loc_402F34
.text:00403A24                 jmp     loc_402F2F
.text:00403A24 ; ---------------------------------------------------------------------------
.text:00403A29                 align 10h
.text:00403A30
.text:00403A30 loc_403A30:                             ; CODE XREF: sub_402EC0+3F↑j
.text:00403A30                 mov     dword ptr [ebp+0], 1
.text:00403A37                 mov     ebx, 1
.text:00403A3C                 jmp     loc_402F10
.text:00403A3C sub_402EC0      endp
.text:00403A3C
.text:00403A41 ; ---------------------------------------------------------------------------
.text:00403A41                 jmp     short sub_403A50
.text:00403A41 ; ---------------------------------------------------------------------------
.text:00403A43                 align 10h
.text:00403A50
.text:00403A50 ; =============== S U B R O U T I N E =======================================
.text:00403A50
.text:00403A50
.text:00403A50 ; int __cdecl sub_403A50(int, int, char *, int, int, int, int)
.text:00403A50 sub_403A50      proc near               ; CODE XREF: .text:00403A41↑j
.text:00403A50                                         ; sub_404640+3A↓p ...
.text:00403A50
.text:00403A50 var_2C          = dword ptr -2Ch
.text:00403A50 var_28          = dword ptr -28h
.text:00403A50 Str             = dword ptr -24h
.text:00403A50 var_20          = dword ptr -20h
.text:00403A50 var_1C          = dword ptr -1Ch
.text:00403A50 var_18          = dword ptr -18h
.text:00403A50 var_14          = dword ptr -14h
.text:00403A50 var_10          = dword ptr -10h
.text:00403A50 arg_0           = dword ptr  4
.text:00403A50 arg_4           = dword ptr  8
.text:00403A50 arg_8           = dword ptr  0Ch
.text:00403A50 arg_C           = dword ptr  10h
.text:00403A50 arg_10          = dword ptr  14h
.text:00403A50 arg_14          = dword ptr  18h
.text:00403A50 arg_18          = dword ptr  1Ch
.text:00403A50
.text:00403A50                 sub     esp, 2Ch
.text:00403A53                 mov     edx, dword_412020
.text:00403A59                 mov     [esp+2Ch+var_10], offset dword_413060 ; int
.text:00403A61                 mov     ecx, dword_412024
.text:00403A67                 mov     ds:dword_413060, edx
.text:00403A6D                 mov     edx, [esp+2Ch+arg_18]
.text:00403A71                 mov     ds:dword_413064, ecx
.text:00403A77                 mov     ecx, [esp+2Ch+arg_14]
.text:00403A7B                 mov     [esp+2Ch+var_14], edx ; int
.text:00403A7F                 mov     edx, [esp+2Ch+arg_10]
.text:00403A83                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403A87                 mov     ecx, [esp+2Ch+arg_C]
.text:00403A8B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00403A8F                 mov     edx, [esp+2Ch+arg_8]
.text:00403A93                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403A97                 mov     ecx, [esp+2Ch+arg_4]
.text:00403A9B                 mov     [esp+2Ch+Str], edx ; Str
.text:00403A9F                 mov     edx, [esp+2Ch+arg_0]
.text:00403AA3                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403AA7                 mov     [esp+2Ch+var_2C], edx ; int
.text:00403AAA                 call    sub_402EC0
.text:00403AAF                 mov     ecx, ds:dword_413060
.text:00403AB5                 mov     dword_412020, ecx
.text:00403ABB                 mov     ecx, ds:dword_41306C
.text:00403AC1                 mov     ds:dword_413550, ecx
.text:00403AC7                 mov     ecx, ds:dword_413068
.text:00403ACD                 mov     dword_412028, ecx
.text:00403AD3                 add     esp, 2Ch
.text:00403AD6                 retn
.text:00403AD6 sub_403A50      endp
.text:00403AD6
.text:00403AD6 ; ---------------------------------------------------------------------------
.text:00403AD7                 align 10h
.text:00403AE0                 sub     esp, 2Ch
.text:00403AE3                 mov     edx, dword_412020
.text:00403AE9                 mov     dword ptr [esp+1Ch], offset dword_413060
.text:00403AF1                 mov     ecx, dword_412024
.text:00403AF7                 mov     dword ptr [esp+18h], 1
.text:00403AFF                 mov     ds:dword_413060, edx
.text:00403B05                 mov     edx, [esp+38h]
.text:00403B09                 mov     ds:dword_413064, ecx
.text:00403B0F                 mov     ecx, [esp+34h]
.text:00403B13                 mov     [esp+8], edx
.text:00403B17                 mov     edx, [esp+30h]
.text:00403B1B                 mov     [esp+4], ecx
.text:00403B1F                 mov     dword ptr [esp+14h], 0
.text:00403B27                 mov     dword ptr [esp+10h], 0
.text:00403B2F                 mov     dword ptr [esp+0Ch], 0
.text:00403B37                 mov     [esp], edx
.text:00403B3A                 call    sub_402EC0
.text:00403B3F                 mov     ecx, ds:dword_413060
.text:00403B45                 mov     dword_412020, ecx
.text:00403B4B                 mov     ecx, ds:dword_41306C
.text:00403B51                 mov     ds:dword_413550, ecx
.text:00403B57                 mov     ecx, ds:dword_413068
.text:00403B5D                 mov     dword_412028, ecx
.text:00403B63                 add     esp, 2Ch
.text:00403B66                 retn
.text:00403B66 ; ---------------------------------------------------------------------------
.text:00403B67                 align 10h
.text:00403B70
.text:00403B70 ; =============== S U B R O U T I N E =======================================
.text:00403B70
.text:00403B70
.text:00403B70 sub_403B70      proc near               ; CODE XREF: sub_402EC0+113↑p
.text:00403B70                                         ; sub_402EC0+AB9↑p
.text:00403B70
.text:00403B70 var_2C          = dword ptr -2Ch
.text:00403B70 var_28          = dword ptr -28h
.text:00403B70 var_24          = dword ptr -24h
.text:00403B70 var_20          = dword ptr -20h
.text:00403B70 var_1C          = dword ptr -1Ch
.text:00403B70 var_18          = dword ptr -18h
.text:00403B70 var_14          = dword ptr -14h
.text:00403B70 arg_0           = dword ptr  4
.text:00403B70 arg_4           = dword ptr  8
.text:00403B70
.text:00403B70                 push    ebp
.text:00403B71                 push    edi
.text:00403B72                 push    esi
.text:00403B73                 push    ebx
.text:00403B74                 sub     esp, 1Ch
.text:00403B77                 mov     ecx, [esp+2Ch+arg_4]
.text:00403B7B                 mov     eax, [esp+2Ch+arg_4]
.text:00403B7F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403B83                 mov     edx, [ecx+20h]
.text:00403B86                 mov     edi, [esp+2Ch+arg_0]
.text:00403B8A                 mov     ecx, [ebx]
.text:00403B8C                 mov     [esp+2Ch+var_2C], edx
.text:00403B8F                 mov     [esp+2Ch+var_14], edx
.text:00403B93                 mov     edx, [eax+24h]
.text:00403B96                 mov     [esp+2Ch+var_28], ecx
.text:00403B9A                 mov     [esp+2Ch+var_1C], ecx
.text:00403B9E                 cmp     ecx, edx
.text:00403BA0                 mov     [esp+2Ch+var_18], edx
.text:00403BA4                 jle     short loc_403C20
.text:00403BA6                 mov     esi, [esp+2Ch+var_2C]
.text:00403BA9                 cmp     edx, esi
.text:00403BAB                 jle     short loc_403C20
.text:00403BAD                 lea     esi, [esi+0]
.text:00403BB0
.text:00403BB0 loc_403BB0:                             ; CODE XREF: sub_403B70+A1↓j
.text:00403BB0                 mov     ebx, [esp+2Ch+var_1C]
.text:00403BB4                 mov     edx, [esp+2Ch+var_18]
.text:00403BB8                 mov     ebp, [esp+2Ch+var_18]
.text:00403BBC                 mov     eax, [esp+2Ch+var_14]
.text:00403BC0                 sub     ebx, edx
.text:00403BC2                 mov     [esp+2Ch+var_20], ebx
.text:00403BC6                 sub     ebp, eax
.text:00403BC8                 cmp     ebx, ebp
.text:00403BCA                 jle     short loc_403C45
.text:00403BCC                 xor     esi, esi
.text:00403BCE                 cmp     esi, ebp
.text:00403BD0                 jge     short loc_403BFD
.text:00403BD2                 mov     ecx, [esp+2Ch+var_1C]
.text:00403BD6                 sub     ecx, ebp
.text:00403BD8                 mov     [esp+2Ch+var_24], ecx
.text:00403BDC                 lea     esi, [esi+0]
.text:00403BE0
.text:00403BE0 loc_403BE0:                             ; CODE XREF: sub_403B70+8B↓j
.text:00403BE0                 mov     ecx, [esp+2Ch+var_14]
.text:00403BE4                 mov     edx, [esp+2Ch+var_24]
.text:00403BE8                 add     ecx, esi
.text:00403BEA                 add     edx, esi
.text:00403BEC                 mov     ebx, [edi+ecx*4]
.text:00403BEF                 mov     eax, [edi+edx*4]
.text:00403BF2                 inc     esi
.text:00403BF3                 cmp     esi, ebp
.text:00403BF5                 mov     [edi+ecx*4], eax
.text:00403BF8                 mov     [edi+edx*4], ebx
.text:00403BFB                 jl      short loc_403BE0
.text:00403BFD
.text:00403BFD loc_403BFD:                             ; CODE XREF: sub_403B70+60↑j
.text:00403BFD                 sub     [esp+2Ch+var_1C], ebp
.text:00403C01
.text:00403C01 loc_403C01:                             ; CODE XREF: sub_403B70+107↓j
.text:00403C01                 mov     eax, [esp+2Ch+var_18]
.text:00403C05                 cmp     [esp+2Ch+var_1C], eax
.text:00403C09                 jle     short loc_403C20
.text:00403C0B                 mov     ebp, [esp+2Ch+var_14]
.text:00403C0F                 cmp     eax, ebp
.text:00403C11                 jg      short loc_403BB0
.text:00403C13                 lea     esi, [esi+0]
.text:00403C19                 lea     edi, [edi+0]
.text:00403C20
.text:00403C20 loc_403C20:                             ; CODE XREF: sub_403B70+34↑j
.text:00403C20                                         ; sub_403B70+3B↑j ...
.text:00403C20                 mov     esi, [esp+2Ch+var_28]
.text:00403C24                 mov     ecx, [esp+2Ch+var_18]
.text:00403C28                 mov     eax, [esp+2Ch+var_2C]
.text:00403C2B                 mov     edi, [esp+2Ch+arg_4]
.text:00403C2F                 mov     edx, [esp+2Ch+var_28]
.text:00403C33                 sub     esi, ecx
.text:00403C35                 add     esi, eax
.text:00403C37                 mov     [edi+20h], esi
.text:00403C3A                 mov     [edi+24h], edx
.text:00403C3D                 add     esp, 1Ch
.text:00403C40                 pop     ebx
.text:00403C41                 pop     esi
.text:00403C42                 pop     edi
.text:00403C43                 pop     ebp
.text:00403C44                 retn
.text:00403C45 ; ---------------------------------------------------------------------------
.text:00403C45
.text:00403C45 loc_403C45:                             ; CODE XREF: sub_403B70+5A↑j
.text:00403C45                 xor     esi, esi
.text:00403C47                 cmp     esi, [esp+2Ch+var_20]
.text:00403C4B                 jge     short loc_403C6F
.text:00403C4D                 lea     esi, [esi+0]
.text:00403C50
.text:00403C50 loc_403C50:                             ; CODE XREF: sub_403B70+FD↓j
.text:00403C50                 mov     ebx, [esp+2Ch+var_14]
.text:00403C54                 mov     ebp, [esp+2Ch+var_18]
.text:00403C58                 add     ebx, esi
.text:00403C5A                 add     ebp, esi
.text:00403C5C                 mov     edx, [edi+ebx*4]
.text:00403C5F                 inc     esi
.text:00403C60                 cmp     esi, [esp+2Ch+var_20]
.text:00403C64                 mov     ecx, [edi+ebp*4]
.text:00403C67                 mov     [edi+ebx*4], ecx
.text:00403C6A                 mov     [edi+ebp*4], edx
.text:00403C6D                 jl      short loc_403C50
.text:00403C6F
.text:00403C6F loc_403C6F:                             ; CODE XREF: sub_403B70+DB↑j
.text:00403C6F                 mov     esi, [esp+2Ch+var_20]
.text:00403C73                 add     [esp+2Ch+var_14], esi
.text:00403C77                 jmp     short loc_403C01
.text:00403C77 sub_403B70      endp
.text:00403C77
.text:00403C77 ; ---------------------------------------------------------------------------
.text:00403C79                 db 17h dup(90h)
.text:00403C90
.text:00403C90 ; =============== S U B R O U T I N E =======================================
.text:00403C90
.text:00403C90
.text:00403C90 sub_403C90      proc near               ; CODE XREF: sub_401A00+4EE↑p
.text:00403C90                                         ; sub_406830+D6E↓p
.text:00403C90
.text:00403C90 Time            = dword ptr -1Ch
.text:00403C90 var_18          = dword ptr -18h
.text:00403C90 var_C           = dword ptr -0Ch
.text:00403C90 var_8           = dword ptr -8
.text:00403C90 var_4           = dword ptr -4
.text:00403C90 arg_0           = dword ptr  4
.text:00403C90
.text:00403C90                 sub     esp, 1Ch
.text:00403C93                 mov     [esp+1Ch+var_4], ebx
.text:00403C97                 mov     ebx, [esp+1Ch+arg_0]
.text:00403C9B                 mov     [esp+1Ch+Time], 0
.text:00403CA2                 mov     [esp+1Ch+var_18], ebx
.text:00403CA6                 call    sub_40C830
.text:00403CAB                 xor     edx, edx
.text:00403CAD                 test    eax, eax
.text:00403CAF                 jnz     short loc_403CC0
.text:00403CB1
.text:00403CB1 loc_403CB1:                             ; CODE XREF: sub_403C90+5D↓j
.text:00403CB1                                         ; sub_403C90+73↓j
.text:00403CB1                 mov     ebx, [esp+1Ch+var_4]
.text:00403CB5                 mov     eax, edx
.text:00403CB7                 add     esp, 1Ch
.text:00403CBA                 retn
.text:00403CBA ; ---------------------------------------------------------------------------
.text:00403CBB                 align 10h
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403C90+1F↑j
.text:00403CC0                 mov     [esp+1Ch+var_18], 0
.text:00403CC8                 lea     edx, [esp+1Ch+var_C]
.text:00403CCC                 mov     [esp+1Ch+Time], edx
.text:00403CCF                 call    sub_40C7D0
.text:00403CD4                 test    eax, eax
.text:00403CD6                 jnz     short loc_403CEF
.text:00403CD8                 mov     ecx, [esp+1Ch+var_C]
.text:00403CDC                 mov     [ebx], ecx
.text:00403CDE                 mov     edx, [esp+1Ch+var_8]
.text:00403CE2                 imul    edx, 3E8h
.text:00403CE8                 mov     [ebx+4], edx
.text:00403CEB
.text:00403CEB loc_403CEB:                             ; CODE XREF: sub_403C90+7E↓j
.text:00403CEB                 xor     edx, edx
.text:00403CED                 jmp     short loc_403CB1
.text:00403CEF ; ---------------------------------------------------------------------------
.text:00403CEF
.text:00403CEF loc_403CEF:                             ; CODE XREF: sub_403C90+46↑j
.text:00403CEF                 mov     [esp+1Ch+Time], 0 ; Time
.text:00403CF6                 call    time
.text:00403CFB                 cmp     eax, 0FFFFFFFFh
.text:00403CFE                 mov     edx, 0FFFFFFFFh
.text:00403D03                 jz      short loc_403CB1
.text:00403D05                 mov     [ebx], eax
.text:00403D07                 mov     dword ptr [ebx+4], 0
.text:00403D0E                 jmp     short loc_403CEB
.text:00403D0E sub_403C90      endp
.text:00403D0E
.text:00403D0E ; ---------------------------------------------------------------------------
.text:00403D10 ; const char aPosix2Version[]
.text:00403D10 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_403D20+C↓o
.text:00403D20
.text:00403D20 ; =============== S U B R O U T I N E =======================================
.text:00403D20
.text:00403D20
.text:00403D20 sub_403D20      proc near               ; CODE XREF: sub_401A00:loc_401FB5↑p
.text:00403D20
.text:00403D20 VarName         = dword ptr -1Ch
.text:00403D20 EndPtr          = dword ptr -18h
.text:00403D20 Radix           = dword ptr -14h
.text:00403D20 var_8           = dword ptr -8
.text:00403D20 var_4           = dword ptr -4
.text:00403D20
.text:00403D20                 sub     esp, 1Ch
.text:00403D23                 mov     [esp+1Ch+var_4], ebx
.text:00403D27                 mov     ebx, 30A29h
.text:00403D2C                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:00403D33                 call    getenv
.text:00403D38                 test    eax, eax
.text:00403D3A                 jz      short loc_403D41
.text:00403D3C                 cmp     byte ptr [eax], 0
.text:00403D3F                 jnz     short loc_403D50
.text:00403D41
.text:00403D41 loc_403D41:                             ; CODE XREF: sub_403D20+1A↑j
.text:00403D41                                         ; sub_403D20+4F↓j ...
.text:00403D41                 mov     eax, ebx
.text:00403D43                 mov     ebx, [esp+1Ch+var_4]
.text:00403D47                 add     esp, 1Ch
.text:00403D4A                 retn
.text:00403D4A ; ---------------------------------------------------------------------------
.text:00403D4B                 align 10h
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403D20+1F↑j
.text:00403D50                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00403D58                 lea     ecx, [esp+1Ch+var_8]
.text:00403D5C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00403D60                 mov     [esp+1Ch+VarName], eax ; String
.text:00403D63                 call    strtol
.text:00403D68                 mov     ecx, [esp+1Ch+var_8]
.text:00403D6C                 cmp     byte ptr [ecx], 0
.text:00403D6F                 jnz     short loc_403D41
.text:00403D71                 mov     ebx, eax
.text:00403D73                 jmp     short loc_403D41
.text:00403D73 sub_403D20      endp
.text:00403D73
.text:00403D73 ; ---------------------------------------------------------------------------
.text:00403D75                 align 10h
.text:00403D80 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403D80                                         ; DATA XREF: .data:Buffer↓o
.text:00403DB2 ; const char aSSS[]
.text:00403DB2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404070+50↓o
.text:00403DBE aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403DBE                                         ; DATA XREF: sub_404070:loc_404111↓o
.text:00403DCE                 align 20h
.text:00403DE0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403DE0                                         ; DATA XREF: sub_404070+100↓o
.text:00403DE0                 db 'ere is NO',0Ah
.text:00403DE0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403DE0                 db 'R PURPOSE.',0Ah,0
.text:00403E78 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403E78                                         ; DATA XREF: sub_404070:loc_4041B1↓o
.text:00403E8F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00403E8F                                         ; DATA XREF: sub_404070:loc_4041BD↓o
.text:00403EAB                 align 20h
.text:00403EC0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403EC0                                         ; DATA XREF: sub_404070:loc_4041C9↓o
.text:00403EC0                 db 'and %s.',0Ah,0
.text:00403EE0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403EE0                                         ; DATA XREF: sub_404070:loc_4041D5↓o
.text:00403EE0                 db '%s, and %s.',0Ah,0
.text:00403F04                 align 20h
.text:00403F20 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403F20                                         ; DATA XREF: sub_404070:loc_4041E1↓o
.text:00403F20                 db '%s, %s, and %s.',0Ah,0
.text:00403F48                 align 20h
.text:00403F60 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403F60                                         ; DATA XREF: sub_404070:loc_4041ED↓o
.text:00403F60                 db '%s, %s, %s, and %s.',0Ah,0
.text:00403F8C                 align 20h
.text:00403FA0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403FA0                                         ; DATA XREF: sub_404070:loc_4041F9↓o
.text:00403FA0                 db '%s, %s, %s, %s,',0Ah
.text:00403FA0                 db 'and %s.',0Ah,0
.text:00403FD0                 align 20h
.text:00403FE0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403FE0                                         ; DATA XREF: sub_404070:loc_404205↓o
.text:00403FE0                 db '%s, %s, %s, %s,',0Ah
.text:00403FE0                 db '%s, and %s.',0Ah,0
.text:00404014                 align 10h
.text:00404020 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404020                                         ; DATA XREF: sub_404070:def_4040DD↓o
.text:00404020                 db '%s, %s, %s, %s,',0Ah
.text:00404020                 db '%s, %s, and others.',0Ah,0
.text:0040405C ; const char aSS[]
.text:0040405C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_404070+1B5↓o
.text:00404063                 align 10h
.text:00404070
.text:00404070 ; =============== S U B R O U T I N E =======================================
.text:00404070
.text:00404070
.text:00404070 ; int __cdecl sub_404070(FILE *, FILE *, int, int, va_list)
.text:00404070 sub_404070      proc near               ; CODE XREF: sub_404240+2A↓p
.text:00404070
.text:00404070 Stream          = dword ptr -2Ch
.text:00404070 Format          = dword ptr -28h
.text:00404070 ArgList         = dword ptr -24h
.text:00404070 var_20          = dword ptr -20h
.text:00404070 var_1C          = dword ptr -1Ch
.text:00404070 var_14          = dword ptr -14h
.text:00404070 arg_0           = dword ptr  4
.text:00404070 arg_4           = dword ptr  8
.text:00404070 arg_8           = dword ptr  0Ch
.text:00404070 arg_C           = dword ptr  10h
.text:00404070 arg_10          = dword ptr  14h
.text:00404070
.text:00404070                 push    ebp
.text:00404071                 push    edi
.text:00404072                 push    esi
.text:00404073                 push    ebx
.text:00404074                 sub     esp, 1Ch
.text:00404077                 xor     ebx, ebx
.text:00404079                 mov     edi, [esp+2Ch+arg_10]
.text:0040407D                 mov     edx, [esp+2Ch+arg_8]
.text:00404081                 mov     esi, [esp+2Ch+arg_0]
.text:00404085                 mov     eax, [edi]
.text:00404087                 mov     ecx, [esp+2Ch+arg_4]
.text:0040408B                 mov     [esp+2Ch+var_14], edx
.text:0040408F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404093                 lea     edx, [edi+4]
.text:00404096                 test    eax, eax
.text:00404098                 jz      short loc_4040AC
.text:0040409A                 lea     esi, [esi+0]
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_404070+3A↓j
.text:004040A0                 mov     eax, edx
.text:004040A2                 inc     ebx
.text:004040A3                 mov     eax, [eax]
.text:004040A5                 add     edx, 4
.text:004040A8                 test    eax, eax
.text:004040AA                 jnz     short loc_4040A0
.text:004040AC
.text:004040AC loc_4040AC:                             ; CODE XREF: sub_404070+28↑j
.text:004040AC                 test    ecx, ecx
.text:004040AE                 jz      loc_40421D
.text:004040B4                 mov     [esp+2Ch+var_1C], ebp
.text:004040B8                 mov     edx, [esp+2Ch+var_14]
.text:004040BC                 mov     [esp+2Ch+ArgList], ecx
.text:004040C0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:004040C8                 mov     [esp+2Ch+var_20], edx
.text:004040CC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004040CF                 call    fprintf
.text:004040D4
.text:004040D4 loc_4040D4:                             ; CODE XREF: sub_404070+1C9↓j
.text:004040D4                 cmp     ebx, 9          ; switch 10 cases
.text:004040D7                 ja      def_4040DD      ; jumptable 004040DD default case
.text:004040DD                 jmp     ds:jpt_4040DD[ebx*4] ; switch jump
.text:004040DD ; ---------------------------------------------------------------------------
.text:004040E4 jpt_4040DD      dd offset loc_40410C    ; DATA XREF: sub_404070+6D↑r
.text:004040E4                 dd offset loc_404111    ; jump table for switch statement
.text:004040E4                 dd offset loc_4041B1
.text:004040E4                 dd offset loc_4041BD
.text:004040E4                 dd offset loc_4041C9
.text:004040E4                 dd offset loc_4041D5
.text:004040E4                 dd offset loc_4041E1
.text:004040E4                 dd offset loc_4041ED
.text:004040E4                 dd offset loc_4041F9
.text:004040E4                 dd offset loc_404205
.text:0040410C ; ---------------------------------------------------------------------------
.text:0040410C
.text:0040410C loc_40410C:                             ; CODE XREF: sub_404070+6D↑j
.text:0040410C                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:0040410C                 call    abort           ; jumptable 004040DD case 0
.text:00404111 ; ---------------------------------------------------------------------------
.text:00404111
.text:00404111 loc_404111:                             ; CODE XREF: sub_404070+6D↑j
.text:00404111                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:00404111                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004040DD case 1
.text:00404118                 nop
.text:00404119                 lea     esi, [esi+0]
.text:00404120
.text:00404120 loc_404120:                             ; CODE XREF: sub_404070+148↓j
.text:00404120                                         ; sub_404070+154↓j ...
.text:00404120                 call    ds:libintl_gettext
.text:00404126                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040412A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040412D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404131                 call    vfprintf
.text:00404136                 mov     ebx, [esi+4]
.text:00404139                 dec     ebx
.text:0040413A                 test    ebx, ebx
.text:0040413C                 mov     [esi+4], ebx
.text:0040413F                 js      short loc_40419F
.text:00404141                 mov     edi, [esi]
.text:00404143                 mov     byte ptr [edi], 0Ah
.text:00404146                 inc     dword ptr [esi]
.text:00404148
.text:00404148 loc_404148:                             ; CODE XREF: sub_404070+13F↓j
.text:00404148                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040414C                 mov     edx, Buffer
.text:00404152                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404155                 call    fputs
.text:0040415A                 mov     ebp, [esi+4]
.text:0040415D                 dec     ebp
.text:0040415E                 test    ebp, ebp
.text:00404160                 mov     [esi+4], ebp
.text:00404163                 js      short loc_40418D
.text:00404165                 mov     ecx, [esi]
.text:00404167                 mov     byte ptr [ecx], 0Ah
.text:0040416A                 inc     dword ptr [esi]
.text:0040416C
.text:0040416C loc_40416C:                             ; CODE XREF: sub_404070+12D↓j
.text:0040416C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404170                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00404177                 call    ds:libintl_gettext
.text:0040417D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404181                 add     esp, 1Ch
.text:00404184                 pop     ebx
.text:00404185                 pop     esi
.text:00404186                 pop     edi
.text:00404187                 pop     ebp
.text:00404188                 jmp     fputs
.text:0040418D ; ---------------------------------------------------------------------------
.text:0040418D
.text:0040418D loc_40418D:                             ; CODE XREF: sub_404070+F3↑j
.text:0040418D                 mov     [esp+2Ch+Format], esi ; File
.text:00404191                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404198                 call    _flsbuf
.text:0040419D                 jmp     short loc_40416C
.text:0040419F ; ---------------------------------------------------------------------------
.text:0040419F
.text:0040419F loc_40419F:                             ; CODE XREF: sub_404070+CF↑j
.text:0040419F                 mov     [esp+2Ch+Format], esi ; File
.text:004041A3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004041AA                 call    _flsbuf
.text:004041AF                 jmp     short loc_404148
.text:004041B1 ; ---------------------------------------------------------------------------
.text:004041B1
.text:004041B1 loc_4041B1:                             ; CODE XREF: sub_404070+6D↑j
.text:004041B1                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:004041B1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004040DD case 2
.text:004041B8                 jmp     loc_404120
.text:004041BD ; ---------------------------------------------------------------------------
.text:004041BD
.text:004041BD loc_4041BD:                             ; CODE XREF: sub_404070+6D↑j
.text:004041BD                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:004041BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004040DD case 3
.text:004041C4                 jmp     loc_404120
.text:004041C9 ; ---------------------------------------------------------------------------
.text:004041C9
.text:004041C9 loc_4041C9:                             ; CODE XREF: sub_404070+6D↑j
.text:004041C9                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:004041C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004040DD case 4
.text:004041D0                 jmp     loc_404120
.text:004041D5 ; ---------------------------------------------------------------------------
.text:004041D5
.text:004041D5 loc_4041D5:                             ; CODE XREF: sub_404070+6D↑j
.text:004041D5                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:004041D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004040DD case 5
.text:004041DC                 jmp     loc_404120
.text:004041E1 ; ---------------------------------------------------------------------------
.text:004041E1
.text:004041E1 loc_4041E1:                             ; CODE XREF: sub_404070+6D↑j
.text:004041E1                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:004041E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004040DD case 6
.text:004041E8                 jmp     loc_404120
.text:004041ED ; ---------------------------------------------------------------------------
.text:004041ED
.text:004041ED loc_4041ED:                             ; CODE XREF: sub_404070+6D↑j
.text:004041ED                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:004041ED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004040DD case 7
.text:004041F4                 jmp     loc_404120
.text:004041F9 ; ---------------------------------------------------------------------------
.text:004041F9
.text:004041F9 loc_4041F9:                             ; CODE XREF: sub_404070+6D↑j
.text:004041F9                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:004041F9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004040DD case 8
.text:00404200                 jmp     loc_404120
.text:00404205 ; ---------------------------------------------------------------------------
.text:00404205
.text:00404205 loc_404205:                             ; CODE XREF: sub_404070+6D↑j
.text:00404205                                         ; DATA XREF: sub_404070:jpt_4040DD↑o
.text:00404205                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004040DD case 9
.text:0040420C                 jmp     loc_404120
.text:00404211 ; ---------------------------------------------------------------------------
.text:00404211
.text:00404211 def_4040DD:                             ; CODE XREF: sub_404070+67↑j
.text:00404211                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004040DD default case
.text:00404218                 jmp     loc_404120
.text:0040421D ; ---------------------------------------------------------------------------
.text:0040421D
.text:0040421D loc_40421D:                             ; CODE XREF: sub_404070+3E↑j
.text:0040421D                 mov     [esp+2Ch+var_20], ebp
.text:00404221                 mov     ecx, [esp+2Ch+var_14]
.text:00404225                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040422D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404230                 mov     [esp+2Ch+ArgList], ecx
.text:00404234                 call    fprintf
.text:00404239                 jmp     loc_4040D4
.text:00404239 sub_404070      endp
.text:00404239
.text:00404239 ; ---------------------------------------------------------------------------
.text:0040423E                 align 10h
.text:00404240
.text:00404240 ; =============== S U B R O U T I N E =======================================
.text:00404240
.text:00404240
.text:00404240 ; int __cdecl sub_404240(FILE *, FILE *, int, int, char)
.text:00404240 sub_404240      proc near               ; CODE XREF: sub_401A00+193↑p
.text:00404240
.text:00404240 var_1C          = dword ptr -1Ch
.text:00404240 var_18          = dword ptr -18h
.text:00404240 var_14          = dword ptr -14h
.text:00404240 var_10          = dword ptr -10h
.text:00404240 var_C           = dword ptr -0Ch
.text:00404240 arg_0           = dword ptr  4
.text:00404240 arg_4           = dword ptr  8
.text:00404240 arg_8           = dword ptr  0Ch
.text:00404240 arg_C           = dword ptr  10h
.text:00404240 arg_10          = byte ptr  14h
.text:00404240
.text:00404240                 sub     esp, 1Ch
.text:00404243                 mov     edx, [esp+1Ch+arg_C]
.text:00404247                 lea     ecx, [esp+1Ch+arg_10]
.text:0040424B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040424F                 mov     ecx, [esp+1Ch+arg_8]
.text:00404253                 mov     [esp+1Ch+var_10], edx ; int
.text:00404257                 mov     edx, [esp+1Ch+arg_4]
.text:0040425B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040425F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00404263                 mov     edx, [esp+1Ch+arg_0]
.text:00404267                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040426A                 call    sub_404070
.text:0040426F                 add     esp, 1Ch
.text:00404272                 retn
.text:00404272 sub_404240      endp
.text:00404272
.text:00404272 ; ---------------------------------------------------------------------------
.text:00404273                 align 10h
.text:00404280
.text:00404280 ; =============== S U B R O U T I N E =======================================
.text:00404280
.text:00404280
.text:00404280 ; int __cdecl sub_404280(int, char *, int)
.text:00404280 sub_404280      proc near               ; CODE XREF: sub_401A00+371↑p
.text:00404280                                         ; sub_401A00+5E1↑p
.text:00404280
.text:00404280 Tm              = dword ptr -8Ch
.text:00404280 var_88          = dword ptr -88h
.text:00404280 var_84          = dword ptr -84h
.text:00404280 Time            = dword ptr -70h
.text:00404280 var_6C          = tm ptr -6Ch
.text:00404280 var_3C          = dword ptr -3Ch
.text:00404280 var_38          = dword ptr -38h
.text:00404280 var_34          = dword ptr -34h
.text:00404280 var_30          = dword ptr -30h
.text:00404280 var_2C          = dword ptr -2Ch
.text:00404280 var_28          = dword ptr -28h
.text:00404280 var_24          = dword ptr -24h
.text:00404280 var_20          = dword ptr -20h
.text:00404280 var_4           = dword ptr -4
.text:00404280 arg_0           = dword ptr  4
.text:00404280 arg_4           = dword ptr  8
.text:00404280 arg_8           = dword ptr  0Ch
.text:00404280
.text:00404280                 sub     esp, 8Ch
.text:00404286                 mov     edx, [esp+8Ch+arg_4]
.text:0040428D                 mov     [esp+8Ch+var_4], ebx
.text:00404294                 mov     ecx, [esp+8Ch+arg_8]
.text:0040429B                 xor     ebx, ebx
.text:0040429D                 mov     [esp+8Ch+var_88], edx ; char *
.text:004042A1                 lea     edx, [esp+8Ch+var_3C]
.text:004042A5                 mov     [esp+8Ch+var_84], ecx ; int
.text:004042A9                 mov     [esp+8Ch+Tm], edx ; int
.text:004042AC                 call    sub_4043A0
.text:004042B1                 test    eax, eax
.text:004042B3                 jz      short loc_4042C5
.text:004042B5
.text:004042B5 loc_4042B5:                             ; CODE XREF: sub_404280+E3↓j
.text:004042B5                                         ; sub_404280+FB↓j ...
.text:004042B5                 mov     eax, ebx
.text:004042B7                 mov     ebx, [esp+8Ch+var_4]
.text:004042BE                 add     esp, 8Ch
.text:004042C4                 retn
.text:004042C5 ; ---------------------------------------------------------------------------
.text:004042C5
.text:004042C5 loc_4042C5:                             ; CODE XREF: sub_404280+33↑j
.text:004042C5                 mov     [esp+8Ch+var_6C.tm_isdst], 0FFFFFFFFh
.text:004042CD                 mov     ebx, [esp+8Ch+var_38]
.text:004042D1                 mov     edx, [esp+8Ch+var_3C]
.text:004042D5                 mov     ecx, [esp+8Ch+var_34]
.text:004042D9                 mov     [esp+8Ch+var_6C.tm_min], ebx
.text:004042DD                 mov     ebx, [esp+8Ch+var_2C]
.text:004042E1                 mov     [esp+8Ch+var_6C.tm_sec], edx
.text:004042E5                 mov     edx, [esp+8Ch+var_30]
.text:004042E9                 mov     [esp+8Ch+var_6C.tm_mon], ebx
.text:004042ED                 mov     ebx, [esp+8Ch+var_20]
.text:004042F1                 mov     [esp+8Ch+var_6C.tm_hour], ecx
.text:004042F5                 mov     ecx, [esp+8Ch+var_28]
.text:004042F9                 mov     [esp+8Ch+var_6C.tm_mday], edx
.text:004042FD                 mov     edx, [esp+8Ch+var_24]
.text:00404301                 mov     [esp+8Ch+var_6C.tm_yday], ebx
.text:00404305                 lea     ebx, [esp+8Ch+var_6C]
.text:00404309                 mov     [esp+8Ch+var_6C.tm_year], ecx
.text:0040430D                 mov     [esp+8Ch+var_6C.tm_wday], edx
.text:00404311                 mov     [esp+8Ch+Tm], ebx ; Tm
.text:00404314                 call    mktime
.text:00404319                 mov     [esp+8Ch+Time], eax
.text:0040431D                 mov     ecx, ebx
.text:0040431F                 inc     eax
.text:00404320                 jz      short loc_404380
.text:00404322
.text:00404322 loc_404322:                             ; CODE XREF: sub_404280+112↓j
.text:00404322                 mov     ebx, [esp+8Ch+var_28]
.text:00404326                 mov     edx, [ecx+14h]
.text:00404329                 mov     eax, [ecx+10h]
.text:0040432C                 xor     edx, ebx
.text:0040432E                 mov     ebx, [esp+8Ch+var_2C]
.text:00404332                 xor     eax, ebx
.text:00404334                 or      edx, eax
.text:00404336                 mov     ebx, [esp+8Ch+var_30]
.text:0040433A                 mov     eax, [ecx+0Ch]
.text:0040433D                 xor     eax, ebx
.text:0040433F                 or      edx, eax
.text:00404341                 mov     ebx, [esp+8Ch+var_34]
.text:00404345                 mov     eax, [ecx+8]
.text:00404348                 xor     eax, ebx
.text:0040434A                 or      edx, eax
.text:0040434C                 mov     ebx, [esp+8Ch+var_38]
.text:00404350                 mov     eax, [ecx+4]
.text:00404353                 xor     eax, ebx
.text:00404355                 or      edx, eax
.text:00404357                 mov     ebx, [esp+8Ch+var_3C]
.text:0040435B                 mov     eax, [ecx]
.text:0040435D                 xor     eax, ebx
.text:0040435F                 xor     ebx, ebx
.text:00404361                 or      edx, eax
.text:00404363                 jnz     loc_4042B5
.text:00404369                 mov     eax, [esp+8Ch+Time]
.text:0040436D                 mov     ebx, 1
.text:00404372                 mov     ecx, [esp+8Ch+arg_0]
.text:00404379                 mov     [ecx], eax
.text:0040437B                 jmp     loc_4042B5
.text:00404380 ; ---------------------------------------------------------------------------
.text:00404380
.text:00404380 loc_404380:                             ; CODE XREF: sub_404280+A0↑j
.text:00404380                 lea     ecx, [esp+8Ch+Time]
.text:00404384                 xor     ebx, ebx
.text:00404386                 mov     [esp+8Ch+Tm], ecx ; Time
.text:00404389                 call    localtime
.text:0040438E                 test    eax, eax
.text:00404390                 mov     ecx, eax
.text:00404392                 jnz     short loc_404322
.text:00404394                 jmp     loc_4042B5
.text:00404394 sub_404280      endp
.text:00404394
.text:00404394 ; ---------------------------------------------------------------------------
.text:00404399                 align 10h
.text:004043A0
.text:004043A0 ; =============== S U B R O U T I N E =======================================
.text:004043A0
.text:004043A0
.text:004043A0 ; int __cdecl sub_4043A0(int, char *, int)
.text:004043A0 sub_4043A0      proc near               ; CODE XREF: sub_404280+2C↑p
.text:004043A0
.text:004043A0 Str             = dword ptr -5Ch
.text:004043A0 Val             = dword ptr -58h
.text:004043A0 var_54          = dword ptr -54h
.text:004043A0 var_50          = dword ptr -50h
.text:004043A0 var_44          = dword ptr -44h
.text:004043A0 var_40          = dword ptr -40h
.text:004043A0 var_3C          = dword ptr -3Ch
.text:004043A0 arg_0           = dword ptr  4
.text:004043A0 arg_4           = dword ptr  8
.text:004043A0 arg_8           = dword ptr  0Ch
.text:004043A0
.text:004043A0                 push    ebp
.text:004043A1                 push    edi
.text:004043A2                 push    esi
.text:004043A3                 push    ebx
.text:004043A4                 sub     esp, 4Ch
.text:004043A7                 mov     ebp, [esp+5Ch+arg_4]
.text:004043AB                 mov     [esp+5Ch+var_40], 0
.text:004043B3                 mov     edi, [esp+5Ch+arg_8]
.text:004043B7                 mov     [esp+5Ch+Str], ebp ; Str
.text:004043BA                 call    strlen
.text:004043BF                 test    edi, 8
.text:004043C5                 mov     esi, eax
.text:004043C7                 jnz     loc_404570
.text:004043CD
.text:004043CD loc_4043CD:                             ; CODE XREF: sub_4043A0+1E6↓j
.text:004043CD                 mov     ebx, esi
.text:004043CF
.text:004043CF loc_4043CF:                             ; CODE XREF: sub_4043A0+1F0↓j
.text:004043CF                 cmp     ebx, 8
.text:004043D2                 jz      short loc_4043F0
.text:004043D4                 cmp     ebx, 0Ah
.text:004043D7                 jz      short loc_4043F0
.text:004043D9                 cmp     ebx, 0Ch
.text:004043DC                 mov     edx, 1
.text:004043E1                 jz      short loc_4043F0
.text:004043E3
.text:004043E3 loc_4043E3:                             ; CODE XREF: sub_4043A0+63↓j
.text:004043E3                                         ; sub_4043A0+6A↓j ...
.text:004043E3                 add     esp, 4Ch
.text:004043E6                 mov     eax, edx
.text:004043E8                 pop     ebx
.text:004043E9                 pop     esi
.text:004043EA                 pop     edi
.text:004043EB                 pop     ebp
.text:004043EC                 retn
.text:004043EC ; ---------------------------------------------------------------------------
.text:004043ED                 align 10h
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: sub_4043A0+32↑j
.text:004043F0                                         ; sub_4043A0+37↑j ...
.text:004043F0                 mov     edx, [esp+5Ch+var_40]
.text:004043F4                 test    edx, edx
.text:004043F6                 jz      short loc_40440C
.text:004043F8                 test    edi, 8
.text:004043FE                 mov     edx, 1
.text:00404403                 jz      short loc_4043E3
.text:00404405                 sub     esi, ebx
.text:00404407                 cmp     esi, 3
.text:0040440A                 jnz     short loc_4043E3
.text:0040440C
.text:0040440C loc_40440C:                             ; CODE XREF: sub_4043A0+56↑j
.text:0040440C                 xor     ecx, ecx
.text:0040440E                 cmp     ecx, ebx
.text:00404410                 jnb     short loc_404436
.text:00404412                 lea     esi, [esi+0]
.text:00404419                 lea     edi, [edi+0]
.text:00404420
.text:00404420 loc_404420:                             ; CODE XREF: sub_4043A0+94↓j
.text:00404420                 movsx   esi, byte ptr [ecx+ebp]
.text:00404424                 mov     edx, 1
.text:00404429                 sub     esi, 30h ; '0'
.text:0040442C                 cmp     esi, 9
.text:0040442F                 ja      short loc_4043E3
.text:00404431                 inc     ecx
.text:00404432                 cmp     ecx, ebx
.text:00404434                 jb      short loc_404420
.text:00404436
.text:00404436 loc_404436:                             ; CODE XREF: sub_4043A0+70↑j
.text:00404436                 shr     ebx, 1
.text:00404438                 xor     ecx, ecx
.text:0040443A                 cmp     ecx, ebx
.text:0040443C                 mov     [esp+5Ch+var_44], ebx
.text:00404440                 jnb     short loc_40446F
.text:00404442                 lea     esi, [esi+0]
.text:00404449                 lea     edi, [edi+0]
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: sub_4043A0+CD↓j
.text:00404450                 movsx   edx, byte ptr [ebp+ecx*2+0]
.text:00404455                 lea     eax, [edx+edx*4]
.text:00404458                 movsx   edx, byte ptr [ebp+ecx*2+1]
.text:0040445D                 lea     esi, [edx+eax*2-210h]
.text:00404464                 mov     [esp+ecx*4+5Ch+var_3C], esi
.text:00404468                 inc     ecx
.text:00404469                 cmp     ecx, [esp+5Ch+var_44]
.text:0040446D                 jb      short loc_404450
.text:0040446F
.text:0040446F loc_40446F:                             ; CODE XREF: sub_4043A0+A0↑j
.text:0040446F                 test    edi, 1
.text:00404475                 lea     esi, [esp+5Ch+var_3C]
.text:00404479                 jnz     loc_40452D
.text:0040447F
.text:0040447F loc_40447F:                             ; CODE XREF: sub_4043A0+1CB↓j
.text:0040447F                 mov     ebp, [esi]
.text:00404481                 sub     ebx, 4
.text:00404484                 add     esi, 4
.text:00404487                 mov     edx, [esp+5Ch+arg_0]
.text:0040448B                 dec     ebp
.text:0040448C                 mov     [edx+10h], ebp
.text:0040448F                 mov     ecx, [esi]
.text:00404491                 add     esi, 4
.text:00404494                 mov     [edx+0Ch], ecx
.text:00404497                 mov     ebp, [esi]
.text:00404499                 add     esi, 4
.text:0040449C                 mov     [edx+8], ebp
.text:0040449F                 mov     ecx, [esi]
.text:004044A1                 add     esi, 4
.text:004044A4                 test    edi, 2
.text:004044AA                 mov     [edx+4], ecx
.text:004044AD                 jnz     short loc_404507
.text:004044AF
.text:004044AF loc_4044AF:                             ; CODE XREF: sub_4043A0+18B↓j
.text:004044AF                 mov     edi, [esp+5Ch+var_40]
.text:004044B3                 test    edi, edi
.text:004044B5                 jz      short loc_4044FB
.text:004044B7                 inc     [esp+5Ch+var_40]
.text:004044BB                 mov     ecx, [esp+5Ch+var_40]
.text:004044BF                 movsx   edx, byte ptr [ecx]
.text:004044C2                 lea     ebx, [edx-30h]
.text:004044C5                 cmp     ebx, 9
.text:004044C8                 ja      short loc_4044DA
.text:004044CA                 mov     edi, [esp+5Ch+var_40]
.text:004044CE                 movsx   ecx, byte ptr [edi+1]
.text:004044D2                 lea     ebp, [ecx-30h]
.text:004044D5                 cmp     ebp, 9
.text:004044D8                 jbe     short loc_4044E4
.text:004044DA
.text:004044DA loc_4044DA:                             ; CODE XREF: sub_4043A0+128↑j
.text:004044DA                 mov     edx, 1
.text:004044DF                 jmp     loc_4043E3
.text:004044E4 ; ---------------------------------------------------------------------------
.text:004044E4
.text:004044E4 loc_4044E4:                             ; CODE XREF: sub_4043A0+138↑j
.text:004044E4                 mov     esi, [esp+5Ch+arg_0]
.text:004044E8                 lea     ebx, [edx+edx*4]
.text:004044EB                 lea     edx, [ecx+ebx*2-210h]
.text:004044F2                 mov     [esi], edx
.text:004044F4
.text:004044F4 loc_4044F4:                             ; CODE XREF: sub_4043A0+165↓j
.text:004044F4                 xor     edx, edx
.text:004044F6                 jmp     loc_4043E3
.text:004044FB ; ---------------------------------------------------------------------------
.text:004044FB
.text:004044FB loc_4044FB:                             ; CODE XREF: sub_4043A0+115↑j
.text:004044FB                 mov     esi, [esp+5Ch+arg_0]
.text:004044FF                 mov     dword ptr [esi], 0
.text:00404505                 jmp     short loc_4044F4
.text:00404507 ; ---------------------------------------------------------------------------
.text:00404507
.text:00404507 loc_404507:                             ; CODE XREF: sub_4043A0+10D↑j
.text:00404507                 mov     [esp+5Ch+Str], edx
.text:0040450A                 and     edi, 4
.text:0040450D                 mov     [esp+5Ch+var_50], edi
.text:00404511                 mov     [esp+5Ch+var_54], ebx
.text:00404515                 mov     [esp+5Ch+Val], esi
.text:00404519                 call    sub_4045A0
.text:0040451E                 test    eax, eax
.text:00404520                 mov     edx, 1
.text:00404525                 jnz     loc_4043E3
.text:0040452B                 jmp     short loc_4044AF
.text:0040452D ; ---------------------------------------------------------------------------
.text:0040452D
.text:0040452D loc_40452D:                             ; CODE XREF: sub_4043A0+D9↑j
.text:0040452D                 mov     [esp+5Ch+Val], esi
.text:00404531                 mov     ebx, [esp+5Ch+var_44]
.text:00404535                 mov     ebp, edi
.text:00404537                 mov     ecx, [esp+5Ch+arg_0]
.text:0040453B                 and     ebp, 4
.text:0040453E                 mov     [esp+5Ch+var_50], ebp
.text:00404542                 sub     ebx, 4
.text:00404545                 mov     [esp+5Ch+var_54], ebx
.text:00404549                 mov     [esp+5Ch+Str], ecx
.text:0040454C                 call    sub_4045A0
.text:00404551                 test    eax, eax
.text:00404553                 mov     edx, 1
.text:00404558                 jnz     loc_4043E3
.text:0040455E                 mov     eax, [esp+5Ch+var_44]
.text:00404562                 mov     ebx, 4
.text:00404567                 lea     esi, [esi+eax*4-10h]
.text:0040456B                 jmp     loc_40447F
.text:00404570 ; ---------------------------------------------------------------------------
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_4043A0+27↑j
.text:00404570                 mov     [esp+5Ch+Val], 2Eh ; '.' ; Val
.text:00404578                 mov     [esp+5Ch+Str], ebp ; Str
.text:0040457B                 call    strchr
.text:00404580                 mov     [esp+5Ch+var_40], eax
.text:00404584                 test    eax, eax
.text:00404586                 jz      loc_4043CD
.text:0040458C                 mov     ebx, eax
.text:0040458E                 sub     ebx, ebp
.text:00404590                 jmp     loc_4043CF
.text:00404590 sub_4043A0      endp
.text:00404590
.text:00404590 ; ---------------------------------------------------------------------------
.text:00404595                 align 10h
.text:004045A0
.text:004045A0 ; =============== S U B R O U T I N E =======================================
.text:004045A0
.text:004045A0
.text:004045A0 sub_4045A0      proc near               ; CODE XREF: sub_4043A0+179↑p
.text:004045A0                                         ; sub_4043A0+1AC↑p
.text:004045A0
.text:004045A0 Time            = dword ptr -1Ch
.text:004045A0 var_C           = dword ptr -0Ch
.text:004045A0 var_8           = dword ptr -8
.text:004045A0 var_4           = dword ptr -4
.text:004045A0 arg_0           = dword ptr  4
.text:004045A0 arg_4           = dword ptr  8
.text:004045A0 arg_8           = dword ptr  0Ch
.text:004045A0 arg_C           = dword ptr  10h
.text:004045A0
.text:004045A0                 sub     esp, 1Ch
.text:004045A3                 mov     eax, [esp+1Ch+arg_8]
.text:004045A7                 mov     [esp+1Ch+var_4], esi
.text:004045AB                 mov     edx, [esp+1Ch+arg_4]
.text:004045AF                 mov     [esp+1Ch+var_8], ebx
.text:004045B3                 mov     esi, [esp+1Ch+arg_0]
.text:004045B7                 cmp     eax, 1
.text:004045BA                 jz      short loc_404620
.text:004045BC                 cmp     eax, 1
.text:004045BF                 jb      short loc_4045F6
.text:004045C1                 cmp     eax, 2
.text:004045C4                 jnz     short loc_40462F
.text:004045C6                 mov     ebx, [esp+1Ch+arg_C]
.text:004045CA                 mov     eax, 1
.text:004045CF                 test    ebx, ebx
.text:004045D1                 jz      short loc_4045EA
.text:004045D3                 mov     ecx, [edx]
.text:004045D5                 lea     ebx, [ecx+ecx*4]
.text:004045D8                 lea     ecx, [ebx+ebx*4]
.text:004045DB                 mov     ebx, [edx+4]
.text:004045DE                 lea     eax, [ebx+ecx*4-76Ch]
.text:004045E5
.text:004045E5 loc_4045E5:                             ; CODE XREF: sub_4045A0+78↓j
.text:004045E5                                         ; sub_4045A0+8D↓j
.text:004045E5                 mov     [esi+14h], eax
.text:004045E8
.text:004045E8 loc_4045E8:                             ; CODE XREF: sub_4045A0+88↓j
.text:004045E8                 xor     eax, eax
.text:004045EA
.text:004045EA loc_4045EA:                             ; CODE XREF: sub_4045A0+31↑j
.text:004045EA                                         ; sub_4045A0+73↓j
.text:004045EA                 mov     ebx, [esp+1Ch+var_8]
.text:004045EE                 mov     esi, [esp+1Ch+var_4]
.text:004045F2                 add     esp, 1Ch
.text:004045F5                 retn
.text:004045F6 ; ---------------------------------------------------------------------------
.text:004045F6
.text:004045F6 loc_4045F6:                             ; CODE XREF: sub_4045A0+1F↑j
.text:004045F6                 lea     ebx, [esp+1Ch+var_C]
.text:004045FA                 mov     [esp+1Ch+Time], ebx ; Time
.text:004045FD                 call    time
.text:00404602                 mov     [esp+1Ch+Time], ebx ; Time
.text:00404605                 call    localtime
.text:0040460A                 mov     edx, eax
.text:0040460C                 test    edx, edx
.text:0040460E                 mov     eax, 1
.text:00404613                 jz      short loc_4045EA
.text:00404615                 mov     eax, [edx+14h]
.text:00404618                 jmp     short loc_4045E5
.text:00404618 ; ---------------------------------------------------------------------------
.text:0040461A                 align 10h
.text:00404620
.text:00404620 loc_404620:                             ; CODE XREF: sub_4045A0+1A↑j
.text:00404620                 mov     eax, [edx]
.text:00404622                 mov     [esi+14h], eax
.text:00404625                 cmp     dword ptr [edx], 44h ; 'D'
.text:00404628                 jg      short loc_4045E8
.text:0040462A                 add     eax, 64h ; 'd'
.text:0040462D                 jmp     short loc_4045E5
.text:0040462F ; ---------------------------------------------------------------------------
.text:0040462F
.text:0040462F loc_40462F:                             ; CODE XREF: sub_4045A0+24↑j
.text:0040462F                 call    abort
.text:0040462F sub_4045A0      endp
.text:0040462F
.text:0040462F ; ---------------------------------------------------------------------------
.text:00404634                 align 10h
.text:00404640
.text:00404640 ; =============== S U B R O U T I N E =======================================
.text:00404640
.text:00404640
.text:00404640 ; int __cdecl sub_404640(int, int, char *, int, int)
.text:00404640 sub_404640      proc near               ; CODE XREF: sub_401A00+BF↑p
.text:00404640
.text:00404640 var_1C          = dword ptr -1Ch
.text:00404640 var_18          = dword ptr -18h
.text:00404640 var_14          = dword ptr -14h
.text:00404640 var_10          = dword ptr -10h
.text:00404640 var_C           = dword ptr -0Ch
.text:00404640 var_8           = dword ptr -8
.text:00404640 var_4           = dword ptr -4
.text:00404640 arg_0           = dword ptr  4
.text:00404640 arg_4           = dword ptr  8
.text:00404640 arg_8           = dword ptr  0Ch
.text:00404640 arg_C           = dword ptr  10h
.text:00404640 arg_10          = dword ptr  14h
.text:00404640
.text:00404640                 sub     esp, 1Ch
.text:00404643                 mov     edx, [esp+1Ch+arg_C]
.text:00404647                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040464F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404653                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040465B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040465F                 mov     edx, [esp+1Ch+arg_4]
.text:00404663                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404667                 mov     ecx, [esp+1Ch+arg_8]
.text:0040466B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040466F                 mov     edx, [esp+1Ch+arg_0]
.text:00404673                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404677                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040467A                 call    sub_403A50
.text:0040467F                 add     esp, 1Ch
.text:00404682                 retn
.text:00404682 sub_404640      endp
.text:00404682
.text:00404682 ; ---------------------------------------------------------------------------
.text:00404683                 align 10h
.text:00404690                 sub     esp, 2Ch
.text:00404693                 mov     edx, [esp+44h]
.text:00404697                 mov     dword ptr [esp+18h], 0
.text:0040469F                 mov     ecx, [esp+40h]
.text:004046A3                 mov     dword ptr [esp+14h], 0
.text:004046AB                 mov     [esp+1Ch], edx
.text:004046AF                 mov     edx, [esp+3Ch]
.text:004046B3                 mov     [esp+10h], ecx
.text:004046B7                 mov     ecx, [esp+38h]
.text:004046BB                 mov     [esp+0Ch], edx
.text:004046BF                 mov     edx, [esp+34h]
.text:004046C3                 mov     [esp+8], ecx
.text:004046C7                 mov     [esp+4], edx
.text:004046CB                 mov     edx, [esp+30h]
.text:004046CF                 mov     [esp], edx
.text:004046D2                 call    sub_402EC0
.text:004046D7                 add     esp, 2Ch
.text:004046DA                 retn
.text:004046DA ; ---------------------------------------------------------------------------
.text:004046DB                 align 10h
.text:004046E0                 sub     esp, 1Ch
.text:004046E3                 mov     edx, [esp+2Ch]
.text:004046E7                 mov     dword ptr [esp+18h], 0
.text:004046EF                 mov     ecx, [esp+30h]
.text:004046F3                 mov     dword ptr [esp+14h], 1
.text:004046FB                 mov     [esp+0Ch], edx
.text:004046FF                 mov     edx, [esp+24h]
.text:00404703                 mov     [esp+10h], ecx
.text:00404707                 mov     ecx, [esp+28h]
.text:0040470B                 mov     [esp+4], edx
.text:0040470F                 mov     edx, [esp+20h]
.text:00404713                 mov     [esp+8], ecx
.text:00404717                 mov     [esp], edx
.text:0040471A                 call    sub_403A50
.text:0040471F                 add     esp, 1Ch
.text:00404722                 retn
.text:00404722 ; ---------------------------------------------------------------------------
.text:00404723                 align 10h
.text:00404730                 sub     esp, 2Ch
.text:00404733                 mov     edx, [esp+44h]
.text:00404737                 mov     dword ptr [esp+18h], 0
.text:0040473F                 mov     ecx, [esp+40h]
.text:00404743                 mov     dword ptr [esp+14h], 1
.text:0040474B                 mov     [esp+1Ch], edx
.text:0040474F                 mov     edx, [esp+3Ch]
.text:00404753                 mov     [esp+10h], ecx
.text:00404757                 mov     ecx, [esp+38h]
.text:0040475B                 mov     [esp+0Ch], edx
.text:0040475F                 mov     edx, [esp+34h]
.text:00404763                 mov     [esp+8], ecx
.text:00404767                 mov     [esp+4], edx
.text:0040476B                 mov     edx, [esp+30h]
.text:0040476F                 mov     [esp], edx
.text:00404772                 call    sub_402EC0
.text:00404777                 add     esp, 2Ch
.text:0040477A                 retn
.text:0040477A ; ---------------------------------------------------------------------------
.text:0040477B                 align 10h
.text:00404780                 mov     edx, [esp+4]
.text:00404784                 mov     ds:dword_413090, edx
.text:0040478A                 retn
.text:0040478A ; ---------------------------------------------------------------------------
.text:0040478B aWriteError     db 'write error',0      ; DATA XREF: sub_4047B0:loc_4047F9↓o
.text:00404797 ; const char aSS_0[]
.text:00404797 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4047B0+77↓o
.text:0040479E ; const char aS_4[]
.text:0040479E aS_4            db '%s',0               ; DATA XREF: sub_4047B0+A0↓o
.text:004047A1 ; ---------------------------------------------------------------------------
.text:004047A1                 jmp     short sub_4047B0
.text:004047A1 ; ---------------------------------------------------------------------------
.text:004047A3                 align 10h
.text:004047B0
.text:004047B0 ; =============== S U B R O U T I N E =======================================
.text:004047B0
.text:004047B0
.text:004047B0 ; void __cdecl sub_4047B0()
.text:004047B0 sub_4047B0      proc near               ; CODE XREF: .text:004047A1↑j
.text:004047B0                                         ; DATA XREF: sub_401A00+6F↑o
.text:004047B0
.text:004047B0 Stream          = dword ptr -2Ch
.text:004047B0 ErrorMessage    = dword ptr -28h
.text:004047B0 var_24          = dword ptr -24h
.text:004047B0 var_20          = byte ptr -20h
.text:004047B0 var_1C          = dword ptr -1Ch
.text:004047B0 var_9           = byte ptr -9
.text:004047B0
.text:004047B0                 push    esi
.text:004047B1                 push    ebx
.text:004047B2                 sub     esp, 24h
.text:004047B5                 mov     edx, ds:_iob
.text:004047BB                 mov     ecx, [edx+2Ch]
.text:004047BE                 lea     esi, [edx+20h]
.text:004047C1                 shr     ecx, 5
.text:004047C4                 mov     bl, cl
.text:004047C6                 mov     ecx, [edx+20h]
.text:004047C9                 and     bl, 1
.text:004047CC                 cmp     ecx, [esi+8]
.text:004047CF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004047D2                 setz    [esp+2Ch+var_9]
.text:004047D7                 call    fclose
.text:004047DC                 test    eax, eax
.text:004047DE                 setnz   al
.text:004047E1                 test    bl, bl
.text:004047E3                 jnz     loc_404873
.text:004047E9                 test    al, al
.text:004047EB                 jz      short loc_404840
.text:004047ED
.text:004047ED loc_4047ED:                             ; CODE XREF: sub_4047B0+CD↓j
.text:004047ED                 call    _errno
.text:004047F2                 mov     esi, [eax]
.text:004047F4
.text:004047F4 loc_4047F4:                             ; CODE XREF: sub_4047B0+C7↓j
.text:004047F4                 cmp     esi, 9
.text:004047F7                 jz      short loc_404866
.text:004047F9
.text:004047F9 loc_4047F9:                             ; CODE XREF: sub_4047B0+B8↓j
.text:004047F9                                         ; sub_4047B0+C1↓j
.text:004047F9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404800                 call    ds:libintl_gettext
.text:00404806                 mov     ebx, eax
.text:00404808                 mov     eax, ds:dword_413090
.text:0040480D                 test    eax, eax
.text:0040480F                 jz      short loc_404846
.text:00404811                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404814                 call    sub_408A20
.text:00404819                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040481D                 mov     edx, Code
.text:00404823                 mov     [esp+2Ch+var_1C], ebx
.text:00404827                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040482F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404833                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404836                 call    sub_409010
.text:0040483B                 nop
.text:0040483C                 lea     esi, [esi+0]
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: sub_4047B0+3B↑j
.text:00404840                                         ; sub_4047B0+B4↓j ...
.text:00404840                 add     esp, 24h
.text:00404843                 pop     ebx
.text:00404844                 pop     esi
.text:00404845                 retn
.text:00404846 ; ---------------------------------------------------------------------------
.text:00404846
.text:00404846 loc_404846:                             ; CODE XREF: sub_4047B0+5F↑j
.text:00404846                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040484A                 mov     ebx, Code
.text:00404850                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:00404858                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040485C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040485F                 call    sub_409010
.text:00404864                 jmp     short loc_404840
.text:00404866 ; ---------------------------------------------------------------------------
.text:00404866
.text:00404866 loc_404866:                             ; CODE XREF: sub_4047B0+47↑j
.text:00404866                 test    bl, bl
.text:00404868                 jnz     short loc_4047F9
.text:0040486A                 cmp     [esp+2Ch+var_9], 0
.text:0040486F                 jnz     short loc_404840
.text:00404871                 jmp     short loc_4047F9
.text:00404873 ; ---------------------------------------------------------------------------
.text:00404873
.text:00404873 loc_404873:                             ; CODE XREF: sub_4047B0+33↑j
.text:00404873                 xor     esi, esi
.text:00404875                 test    al, al
.text:00404877                 jz      loc_4047F4
.text:0040487D                 jmp     loc_4047ED
.text:0040487D sub_4047B0      endp
.text:0040487D
.text:0040487D ; ---------------------------------------------------------------------------
.text:00404882                 align 10h
.text:00404890
.text:00404890 ; =============== S U B R O U T I N E =======================================
.text:00404890
.text:00404890
.text:00404890 ; int __cdecl sub_404890(int, char *, int)
.text:00404890 sub_404890      proc near               ; CODE XREF: sub_402420+10A↑p
.text:00404890                                         ; .text:0040495A↓p
.text:00404890
.text:00404890 var_2C          = dword ptr -2Ch
.text:00404890 var_28          = dword ptr -28h
.text:00404890 var_1C          = dword ptr -1Ch
.text:00404890 var_18          = dword ptr -18h
.text:00404890 var_14          = dword ptr -14h
.text:00404890 var_10          = dword ptr -10h
.text:00404890 arg_0           = dword ptr  4
.text:00404890 arg_4           = dword ptr  8
.text:00404890 arg_8           = dword ptr  0Ch
.text:00404890
.text:00404890                 push    edi
.text:00404891                 push    esi
.text:00404892                 push    ebx
.text:00404893                 sub     esp, 20h
.text:00404896                 xor     ebx, ebx
.text:00404898                 mov     ecx, [esp+2Ch+arg_8]
.text:0040489C                 mov     esi, [esp+2Ch+arg_0]
.text:004048A0                 test    ecx, ecx
.text:004048A2                 jz      short loc_4048E4
.text:004048A4                 mov     ebx, [ecx]
.text:004048A6                 mov     [esp+2Ch+var_1C], ebx
.text:004048AA                 mov     edi, [ecx+4]
.text:004048AD                 mov     ebx, 10624DD3h
.text:004048B2                 mov     eax, edi
.text:004048B4                 imul    ebx
.text:004048B6                 mov     eax, edi
.text:004048B8                 sar     eax, 1Fh
.text:004048BB                 sar     edx, 6
.text:004048BE                 sub     edx, eax
.text:004048C0                 mov     [esp+2Ch+var_18], edx
.text:004048C4                 mov     edx, [ecx+8]
.text:004048C7                 mov     [esp+2Ch+var_14], edx
.text:004048CB                 mov     edi, [ecx+0Ch]
.text:004048CE                 mov     eax, edi
.text:004048D0                 imul    ebx
.text:004048D2                 mov     ebx, edi
.text:004048D4                 sar     ebx, 1Fh
.text:004048D7                 sar     edx, 6
.text:004048DA                 sub     edx, ebx
.text:004048DC                 lea     ebx, [esp+2Ch+var_1C]
.text:004048E0                 mov     [esp+2Ch+var_10], edx
.text:004048E4
.text:004048E4 loc_4048E4:                             ; CODE XREF: sub_404890+12↑j
.text:004048E4                 test    esi, esi
.text:004048E6                 js      short loc_404917
.text:004048E8                 mov     [esp+2Ch+var_28], ebx
.text:004048EC                 mov     [esp+2Ch+var_2C], esi
.text:004048EF                 call    sub_40C970
.text:004048F4                 xor     edx, edx
.text:004048F6                 test    eax, eax
.text:004048F8                 jnz     short loc_404903
.text:004048FA
.text:004048FA loc_4048FA:                             ; CODE XREF: sub_404890+99↓j
.text:004048FA                                         ; sub_404890+A0↓j
.text:004048FA                 add     esp, 20h
.text:004048FD                 mov     eax, edx
.text:004048FF                 pop     ebx
.text:00404900                 pop     esi
.text:00404901                 pop     edi
.text:00404902                 retn
.text:00404903 ; ---------------------------------------------------------------------------
.text:00404903
.text:00404903 loc_404903:                             ; CODE XREF: sub_404890+68↑j
.text:00404903                 call    _errno
.text:00404908                 mov     eax, [eax]
.text:0040490A                 cmp     eax, 5
.text:0040490D                 jz      short loc_40492B
.text:0040490F                 cmp     eax, 5
.text:00404912                 jg      short loc_404932
.text:00404914                 dec     eax
.text:00404915
.text:00404915 loc_404915:                             ; CODE XREF: sub_404890+AA↓j
.text:00404915                 jz      short loc_40492B
.text:00404917
.text:00404917 loc_404917:                             ; CODE XREF: sub_404890+56↑j
.text:00404917                 mov     [esp+2Ch+var_28], ebx ; int
.text:0040491B                 mov     ecx, [esp+2Ch+arg_4]
.text:0040491F                 mov     [esp+2Ch+var_2C], ecx ; char *
.text:00404922                 call    sub_40C670
.text:00404927                 mov     edx, eax
.text:00404929                 jmp     short loc_4048FA
.text:0040492B ; ---------------------------------------------------------------------------
.text:0040492B
.text:0040492B loc_40492B:                             ; CODE XREF: sub_404890+7D↑j
.text:0040492B                                         ; sub_404890:loc_404915↑j ...
.text:0040492B                 mov     edx, 0FFFFFFFFh
.text:00404930                 jmp     short loc_4048FA
.text:00404932 ; ---------------------------------------------------------------------------
.text:00404932
.text:00404932 loc_404932:                             ; CODE XREF: sub_404890+82↑j
.text:00404932                 cmp     eax, 0Dh
.text:00404935                 jz      short loc_40492B
.text:00404937                 cmp     eax, 1Eh
.text:0040493A                 jmp     short loc_404915
.text:0040493A sub_404890      endp
.text:0040493A
.text:0040493A ; ---------------------------------------------------------------------------
.text:0040493C                 align 10h
.text:00404940                 sub     esp, 0Ch
.text:00404943                 mov     edx, [esp+14h]
.text:00404947                 mov     dword ptr [esp], 0FFFFFFFFh
.text:0040494E                 mov     [esp+8], edx
.text:00404952                 mov     edx, [esp+10h]
.text:00404956                 mov     [esp+4], edx
.text:0040495A                 call    sub_404890
.text:0040495F                 add     esp, 0Ch
.text:00404962                 retn
.text:00404962 ; ---------------------------------------------------------------------------
.text:00404963                 align 10h
.text:00404970
.text:00404970 ; =============== S U B R O U T I N E =======================================
.text:00404970
.text:00404970
.text:00404970 ; int __cdecl sub_404970(int, char *)
.text:00404970 sub_404970      proc near               ; CODE XREF: .text:00402810↑p
.text:00404970                                         ; sub_4029E0+7A↑p
.text:00404970
.text:00404970 var_C           = dword ptr -0Ch
.text:00404970 var_8           = dword ptr -8
.text:00404970 var_4           = dword ptr -4
.text:00404970 arg_0           = dword ptr  4
.text:00404970 arg_4           = dword ptr  8
.text:00404970
.text:00404970                 sub     esp, 0Ch
.text:00404973                 mov     edx, [esp+0Ch+arg_4]
.text:00404977                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040497F                 mov     [esp+0Ch+var_4], edx ; char *
.text:00404983                 mov     edx, [esp+0Ch+arg_0]
.text:00404987                 mov     [esp+0Ch+var_C], edx ; int
.text:0040498A                 call    sub_4086B0
.text:0040498F                 add     esp, 0Ch
.text:00404992                 retn
.text:00404992 sub_404970      endp
.text:00404992
.text:00404992 ; ---------------------------------------------------------------------------
.text:00404993                 align 10h
.text:004049A0
.text:004049A0 ; =============== S U B R O U T I N E =======================================
.text:004049A0
.text:004049A0
.text:004049A0 ; int __cdecl sub_4049A0(char *)
.text:004049A0 sub_4049A0      proc near               ; CODE XREF: sub_401A00+3AF↑p
.text:004049A0                                         ; sub_401A00+6B3↑p ...
.text:004049A0
.text:004049A0 var_C           = dword ptr -0Ch
.text:004049A0 var_8           = dword ptr -8
.text:004049A0 var_4           = dword ptr -4
.text:004049A0 arg_0           = dword ptr  4
.text:004049A0
.text:004049A0                 sub     esp, 0Ch
.text:004049A3                 mov     edx, [esp+0Ch+arg_0]
.text:004049A7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004049AF                 mov     [esp+0Ch+var_C], 0 ; int
.text:004049B6                 mov     [esp+0Ch+var_4], edx ; char *
.text:004049BA                 call    sub_4086B0
.text:004049BF                 add     esp, 0Ch
.text:004049C2                 retn
.text:004049C2 sub_4049A0      endp
.text:004049C2
.text:004049C2 ; ---------------------------------------------------------------------------
.text:004049C3                 align 10h
.text:004049D0 byte_4049D0     db 0                    ; DATA XREF: sub_404E00+1A3↓r
.text:004049D1                 db 3 dup(2)
.text:004049D4                 dd 0Ah dup(2020202h), 19020218h, 2 dup(2020202h), 2170202h
.text:004049D4                 dd 2020202h, 2020216h, 2Fh dup(2020202h), 4030201h, 8070605h
.text:004049D4                 dd 0C0B0A09h, 100F0E0Dh, 14131211h, 26748D15h, 27BC8D00h
.text:004049D4                 dd 0
.text:00404AF0 byte_404AF0     db 0                    ; DATA XREF: sub_404E00:def_405006↓r
.text:00404AF1                 db 1Ah, 2 dup(1Bh)
.text:00404AF4                 dd 1E1D1D1Ch, 1E1E1E1Eh, 1F1F1E1Eh, 201F1F1Fh, 21212120h
.text:00404AF4                 dd 22222221h, 23232322h, 23232323h, 24242323h, 6 dup(25252525h)
.text:00404AF4                 dd 26262525h, 28282727h, 2B2A2A29h, 9090902Bh, 4 dup(90909090h)
.text:00404B50 byte_404B50     db 0                    ; DATA XREF: sub_404E00:loc_404FCF↓r
.text:00404B51                 db 2, 2 dup(1)
.text:00404B54                 dd 1020002h, 1010101h, 4020101h, 1070605h, 1030102h, 2020102h
.text:00404B54                 dd 3050302h, 4020303h, 1020302h, 5 dup(1020202h), 2020202h
.text:00404B54                 dd 1010102h, 1010101h, 20001h, 90909001h, 4 dup(90909090h)
.text:00404BB0 byte_404BB0     db 5                    ; DATA XREF: sub_404E00:loc_404FC0↓r
.text:00404BB1                 db 2 dup(0), 2
.text:00404BB4                 dd 44474503h, 43420446h, 17331901h, 3B1337h, 2B41002Fh
.text:00404BB4                 dd 480015h, 8070600h, 0C0A0B09h, 141A0D27h, 301B2200h
.text:00404BB4                 dd 3C2C3834h, 32491828h, 3E2E3A36h, 35311C2Ah, 2D24390Eh
.text:00404BB4                 dd 293Dh
.text:00404BF4                 dd 26403F00h, 16000021h, 4B1F2520h, 4C4A231Dh, 0F0049h
.text:00404BF4                                         ; DATA XREF: sub_404E00:loc_405194↓r
.text:00404BF4                 dd 491E4B10h, 2FF1211h, 1E1D0403h, 2221201Fh, 0A092423h
.text:00404BF4                 dd 564B250Bh, 4 dup(90909090h)
.text:00404C30 byte_404C30     db 0F3h                 ; DATA XREF: sub_404E00:loc_404F6D↓r
.text:00404C30                                         ; sub_404E00:loc_4058D0↓r
.text:00404C31                 db 2Ah, 2Bh, 0BEh
.text:00404C34                 dd 0BEBEBE10h, 0BEBEBEBEh, 0BEBE1DBEh, 0FCBE36BEh, 0BEBE21BEh
.text:00404C34                 dd 31FB27FEh, 0BEBEBE32h, 0BEBEBEBEh, 0BEBEBE3Fh, 0BEBE2C33h
.text:00404C34                 dd 0BEBEBEBEh, 0BE2FBEBEh, 2 dup(0BEBEBEBEh), 0BE26BEBEh
.text:00404C34                 dd 3035BEBEh
.text:00404C74                 dd 0BEBEBE37h, 0BE3938BEh, 0FABEBEBEh, 0BEBEBE34h, 3BBE152Fh
.text:00404C74                                         ; DATA XREF: sub_404E00+36D↓r
.text:00404C74                 dd 2FBE29BEh, 4 dup(0BEBEBEBEh), 0EFBFBEF4h, 4 dup(90909090h)
.text:00404CB0 byte_404CB0     db 39h                  ; DATA XREF: sub_404E00:loc_4051A3↓r
.text:00404CB0                                         ; sub_404E00:loc_405930↓r ...
.text:00404CB1                 db 3Ah, 31h, 3Bh
.text:00404CB4                 dd 3E3D3C53h, 4140013Fh, 29284254h, 58435532h, 0F0E0D44h
.text:00404CB4                 dd 125D1110h, 16151413h, 1A191817h, 2B2A1C1Bh, 0C082C06h
.text:00404CB4                 dd 342E332Dh, 5335302Fh, 38372636h, 5B274D4Ch, 8070605h
.text:00404CB4                 dd 4F474645h, 4E4A4849h, 5150595Ch, 905A5752h, 4 dup(90909090h)
.text:00404D10 byte_404D10     db 5                    ; DATA XREF: sub_404E00+1B1↓r
.text:00404D10                                         ; sub_404E00+389↓r ...
.text:00404D11                 db 6, 4, 8
.text:00404D14                 dd 0C0B0A0Ah, 100F160Dh, 13121212h, 54171712h, 7060519h
.text:00404D14                 dd 0B5B0908h, 0F0E0D0Ch, 13121110h, 6051514h, 150813h
.text:00404D14                 dd 80D060Bh, 0A0B100Fh, 100F180Dh, 12041312h, 15141312h
.text:00404D14                 dd 13030F0Fh, 12171218h, 13135559h, 90131913h, 4 dup(90909090h)
.text:00404D14                 dd 1C1B1600h, 1413121Dh, 28272615h, 7060500h, 0C0B0908h
.text:00404D14                 dd 100F0E0Dh, 14131211h, 201F1E15h, 24232221h, 4182925h
.text:00404D14                 dd 6051312h, 0F0D0B08h, 6120410h, 0F0D0B08h, 8060510h
.text:00404D14                 dd 0D0C0B0Ah, 1712100Fh, 30F0F19h, 2A171812h, 13121312h
.text:00404D14                 dd 0A131313h, 192B1712h, 1213282Ah
.text:00404DCC                 db 2Bh, 2Ah
.text:00404DCE aSyntaxError    db 'syntax error',0     ; DATA XREF: sub_404E00:loc_4059A0↓o
.text:00404DDB aParserStackOve db 'parser stack overflow',0
.text:00404DDB                                         ; DATA XREF: sub_404E00:loc_405A56↓o
.text:00404DF1 ; ---------------------------------------------------------------------------
.text:00404DF1                 jmp     short sub_404E00
.text:00404DF1 ; ---------------------------------------------------------------------------
.text:00404DF3                 align 10h
.text:00404E00
.text:00404E00 ; =============== S U B R O U T I N E =======================================
.text:00404E00
.text:00404E00
.text:00404E00 sub_404E00      proc near               ; CODE XREF: .text:00404DF1↑j
.text:00404E00                                         ; sub_406830+22D↓p
.text:00404E00
.text:00404E00 Size            = dword ptr -1ACh
.text:00404E00 Src             = dword ptr -1A8h
.text:00404E00 var_1A4         = dword ptr -1A4h
.text:00404E00 var_1A0         = dword ptr -1A0h
.text:00404E00 var_190         = dword ptr -190h
.text:00404E00 var_18C         = dword ptr -18Ch
.text:00404E00 var_188         = dword ptr -188h
.text:00404E00 var_180         = dword ptr -180h
.text:00404E00 Block           = dword ptr -178h
.text:00404E00 var_174         = dword ptr -174h
.text:00404E00 var_170         = dword ptr -170h
.text:00404E00 var_16C         = dword ptr -16Ch
.text:00404E00 var_168         = dword ptr -168h
.text:00404E00 var_164         = dword ptr -164h
.text:00404E00 var_160         = dword ptr -160h
.text:00404E00 var_15C         = dword ptr -15Ch
.text:00404E00 var_158         = dword ptr -158h
.text:00404E00 var_154         = dword ptr -154h
.text:00404E00 var_14C         = byte ptr -14Ch
.text:00404E00 var_5C          = byte ptr -5Ch
.text:00404E00 var_2C          = dword ptr -2Ch
.text:00404E00 var_28          = dword ptr -28h
.text:00404E00 var_24          = dword ptr -24h
.text:00404E00 arg_0           = dword ptr  4
.text:00404E00
.text:00404E00                 push    ebp
.text:00404E01                 xor     ebp, ebp
.text:00404E03                 push    edi
.text:00404E04                 push    esi
.text:00404E05                 push    ebx
.text:00404E06                 sub     esp, 19Ch
.text:00404E0C                 lea     edx, [esp+1ACh+var_5C]
.text:00404E13                 mov     [esp+1ACh+var_168], edx
.text:00404E17                 lea     ecx, [esp+1ACh+var_14C]
.text:00404E1B                 mov     edi, edx
.text:00404E1D                 mov     [esp+1ACh+var_16C], ecx
.text:00404E21                 mov     ebx, ecx
.text:00404E23                 mov     [esp+1ACh+var_170], 14h
.text:00404E2B                 mov     [esp+1ACh+var_164], 0
.text:00404E33                 mov     [esp+1ACh+var_160], 0FFFFFFFEh
.text:00404E3B
.text:00404E3B loc_404E3B:                             ; CODE XREF: sub_404E00+39E↓j
.text:00404E3B                 mov     [edi], bp
.text:00404E3E                 mov     edx, [esp+1ACh+var_170]
.text:00404E42                 mov     ecx, [esp+1ACh+var_168]
.text:00404E46                 add     edx, edx
.text:00404E48                 lea     esi, [edx+ecx-2]
.text:00404E4C                 cmp     esi, edi
.text:00404E4E                 ja      loc_404F6D
.text:00404E54                 sub     edi, ecx
.text:00404E56                 sar     edi, 1
.text:00404E58                 inc     edi
.text:00404E59                 cmp     [esp+1ACh+var_170], 13h
.text:00404E5E                 mov     [esp+1ACh+var_174], edi
.text:00404E62                 ja      loc_405A56
.text:00404E68                 mov     [esp+1ACh+var_170], edx
.text:00404E6C                 cmp     edx, 14h
.text:00404E6F                 jbe     short loc_404E79
.text:00404E71                 mov     [esp+1ACh+var_170], 14h
.text:00404E79
.text:00404E79 loc_404E79:                             ; CODE XREF: sub_404E00+6F↑j
.text:00404E79                 mov     ebx, [esp+1ACh+var_170]
.text:00404E7D                 mov     eax, [esp+1ACh+var_170]
.text:00404E81                 mov     edi, [esp+1ACh+var_168]
.text:00404E85                 shl     ebx, 3
.text:00404E88                 sub     ebx, eax
.text:00404E8A                 lea     ecx, [ebx+ebx+0Bh]
.text:00404E8E                 mov     [esp+1ACh+Block], edi
.text:00404E92                 mov     [esp+1ACh+Size], ecx ; Size
.text:00404E95                 call    malloc
.text:00404E9A                 mov     [esp+1ACh+var_180], eax
.text:00404E9E                 test    eax, eax
.text:00404EA0                 jz      loc_405A56
.text:00404EA6                 mov     ebx, [esp+1ACh+var_174]
.text:00404EAA                 mov     esi, [esp+1ACh+var_168]
.text:00404EAE                 mov     eax, [esp+1ACh+var_180]
.text:00404EB2                 add     ebx, ebx
.text:00404EB4                 mov     [esp+1ACh+var_1A4], ebx ; Size
.text:00404EB8                 mov     [esp+1ACh+Src], esi ; Src
.text:00404EBC                 mov     [esp+1ACh+Size], eax ; void *
.text:00404EBF                 call    memcpy
.text:00404EC4                 mov     edx, [esp+1ACh+var_170]
.text:00404EC8                 mov     eax, 0AAAAAAABh
.text:00404ECD                 mov     edi, [esp+1ACh+var_180]
.text:00404ED1                 lea     ecx, [edx+edx+0Bh]
.text:00404ED5                 mul     ecx
.text:00404ED7                 mov     ecx, [esp+1ACh+var_174]
.text:00404EDB                 mov     [esp+1ACh+var_168], edi
.text:00404EDF                 shr     edx, 3
.text:00404EE2                 add     ebx, ecx
.text:00404EE4                 lea     esi, [edx+edx*2]
.text:00404EE7                 lea     edx, ds:0[ebx*4]
.text:00404EEE                 lea     eax, [edi+esi*4]
.text:00404EF1                 mov     [esp+1ACh+var_180], eax
.text:00404EF5                 cmp     edx, 7
.text:00404EF8                 mov     edi, eax
.text:00404EFA                 mov     eax, [esp+1ACh+var_16C]
.text:00404EFE                 jbe     short loc_404F14
.text:00404F00                 test    byte ptr [esp+1ACh+var_180], 4
.text:00404F05                 jz      short loc_404F14
.text:00404F07                 mov     esi, [eax]
.text:00404F09                 sub     edx, 4
.text:00404F0C                 add     eax, 4
.text:00404F0F                 mov     [edi], esi
.text:00404F11                 add     edi, 4
.text:00404F14
.text:00404F14 loc_404F14:                             ; CODE XREF: sub_404E00+FE↑j
.text:00404F14                                         ; sub_404E00+105↑j
.text:00404F14                 cld
.text:00404F15                 mov     ecx, edx
.text:00404F17                 shr     ecx, 2
.text:00404F1A                 mov     esi, eax
.text:00404F1C                 rep movsd
.text:00404F1E                 lea     edi, [esp+1ACh+var_5C]
.text:00404F25                 mov     esi, [esp+1ACh+var_170]
.text:00404F29                 mov     edx, [esp+1ACh+var_180]
.text:00404F2D                 add     esi, esi
.text:00404F2F                 cmp     [esp+1ACh+Block], edi
.text:00404F33                 mov     [esp+1ACh+var_16C], edx
.text:00404F37                 jz      short loc_404F45
.text:00404F39                 mov     eax, [esp+1ACh+Block]
.text:00404F3D                 mov     [esp+1ACh+Size], eax ; Block
.text:00404F40                 call    free
.text:00404F45
.text:00404F45 loc_404F45:                             ; CODE XREF: sub_404E00+137↑j
.text:00404F45                 mov     eax, [esp+1ACh+var_174]
.text:00404F49                 mov     edx, [esp+1ACh+var_168]
.text:00404F4D                 mov     ebx, [esp+1ACh+var_174]
.text:00404F51                 mov     ecx, [esp+1ACh+var_16C]
.text:00404F55                 add     eax, eax
.text:00404F57                 lea     edi, [eax+edx-2]
.text:00404F5B                 add     eax, ebx
.text:00404F5D                 lea     ebx, [ecx+eax*4-0Ch]
.text:00404F61                 lea     ecx, [esi+edx-2]
.text:00404F65                 cmp     ecx, edi
.text:00404F67                 jbe     loc_405901
.text:00404F6D
.text:00404F6D loc_404F6D:                             ; CODE XREF: sub_404E00+4E↑j
.text:00404F6D                 movsx   esi, ss:byte_404C30[ebp]
.text:00404F74                 cmp     esi, 0FFFFFFBEh
.text:00404F77                 jz      short loc_404FC0
.text:00404F79                 cmp     [esp+1ACh+var_160], 0FFFFFFFEh
.text:00404F7E                 jz      loc_405A33
.text:00404F84
.text:00404F84 loc_404F84:                             ; CODE XREF: sub_404E00+C51↓j
.text:00404F84                 mov     edx, [esp+1ACh+var_160]
.text:00404F88                 test    edx, edx
.text:00404F8A                 jle     loc_405A24
.text:00404F90                 cmp     [esp+1ACh+var_160], 114h
.text:00404F98                 mov     edx, 2
.text:00404F9D                 ja      short loc_404FAA
.text:00404F9F                 mov     eax, [esp+1ACh+var_160]
.text:00404FA3                 movzx   edx, ds:byte_4049D0[eax]
.text:00404FAA
.text:00404FAA loc_404FAA:                             ; CODE XREF: sub_404E00+19D↑j
.text:00404FAA                                         ; sub_404E00+C2E↓j
.text:00404FAA                 add     esi, edx
.text:00404FAC                 cmp     esi, 4Eh ; 'N'
.text:00404FAF                 ja      short loc_404FC0
.text:00404FB1                 movzx   ecx, ds:byte_404D10[esi]
.text:00404FB8                 cmp     ecx, edx
.text:00404FBA                 jz      loc_4059BC
.text:00404FC0
.text:00404FC0 loc_404FC0:                             ; CODE XREF: sub_404E00+177↑j
.text:00404FC0                                         ; sub_404E00+1AF↑j
.text:00404FC0                 movzx   esi, ss:byte_404BB0[ebp]
.text:00404FC7                 test    esi, esi
.text:00404FC9                 jz      loc_4058A6
.text:00404FCF
.text:00404FCF loc_404FCF:                             ; CODE XREF: sub_404E00+C1F↓j
.text:00404FCF                 movzx   ebp, ds:byte_404B50[esi]
.text:00404FD6                 mov     edx, 1
.text:00404FDB                 sub     edx, ebp
.text:00404FDD                 lea     eax, [edx+edx*2]
.text:00404FE0                 shl     eax, 2
.text:00404FE3                 mov     ecx, [ebx+eax]
.text:00404FE6                 mov     [esp+1ACh+var_15C], ecx
.text:00404FEA                 mov     ecx, [ebx+eax+4]
.text:00404FEE                 mov     [esp+1ACh+var_158], ecx
.text:00404FF2                 mov     ecx, [ebx+eax+8]
.text:00404FF6                 lea     eax, [esi-4]    ; switch 73 cases
.text:00404FF9                 cmp     eax, 48h
.text:00404FFC                 mov     [esp+1ACh+var_154], ecx
.text:00405000                 ja      def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405006                 jmp     ds:jpt_405006[eax*4] ; switch jump
.text:00405006 ; ---------------------------------------------------------------------------
.text:0040500D                 align 10h
.text:00405010 jpt_405006      dd offset loc_405134, offset def_405006, offset def_405006
.text:00405010                                         ; DATA XREF: sub_404E00+206↑r
.text:00405010                 dd offset loc_4051AC, offset loc_4051B8, offset loc_4051C4 ; jump table for switch statement
.text:00405010                 dd offset loc_4051D3, offset loc_4051E2, offset loc_4051F1
.text:00405010                 dd offset def_405006, offset loc_405200, offset loc_40522C
.text:00405010                 dd offset loc_40524F, offset loc_4052A8, offset loc_4052D3
.text:00405010                 dd offset loc_405331, offset loc_405342, offset loc_405360
.text:00405010                 dd offset loc_405364, offset loc_40538D, offset loc_405394
.text:00405010                 dd offset loc_40539F, offset loc_4053BE, offset loc_4053D7
.text:00405010                 dd offset loc_4053E6, offset loc_4053F7, offset loc_40540F
.text:00405010                 dd offset loc_405468, offset loc_405490, offset loc_4054AA
.text:00405010                 dd offset loc_4054D2, offset loc_4054DA, offset loc_4054F7
.text:00405010                 dd offset loc_40550E, offset loc_405523, offset def_405006
.text:00405010                 dd offset loc_405544, offset loc_40555B, offset loc_405572
.text:00405010                 dd offset loc_405579, offset loc_40557D, offset loc_405594
.text:00405010                 dd offset loc_4055AB, offset loc_4055B2, offset loc_4055B6
.text:00405010                 dd offset loc_4055CD, offset loc_4055E4, offset loc_4055EB
.text:00405010                 dd offset loc_4055EF, offset loc_405606, offset loc_40561D
.text:00405010                 dd offset loc_405624, offset loc_405628, offset loc_40563F
.text:00405010                 dd offset loc_405656, offset loc_40565D, offset loc_405661
.text:00405010                 dd offset loc_405678, offset loc_40568F, offset loc_405696
.text:00405010                 dd offset loc_4056B8, offset loc_4056DA, offset def_405006
.text:00405010                 dd offset def_405006, offset def_405006, offset loc_4056DE
.text:00405010                 dd offset def_405006, offset loc_4056DE, offset loc_4056F2
.text:00405010                 dd offset loc_40587C, offset loc_405889, offset loc_405895
.text:00405010                 dd offset loc_4058A2
.text:00405134 ; ---------------------------------------------------------------------------
.text:00405134
.text:00405134 loc_405134:                             ; CODE XREF: sub_404E00+206↑j
.text:00405134                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405134                 mov     eax, [ebx]      ; jumptable 00405006 case 4
.text:00405136                 mov     edx, [ebx+4]
.text:00405139                 mov     ecx, [esp+1ACh+arg_0]
.text:00405140                 mov     [ecx+34h], eax
.text:00405143                 mov     [ecx+38h], edx
.text:00405146                 mov     byte ptr [ecx+58h], 1
.text:0040514A
.text:0040514A def_405006:                             ; CODE XREF: sub_404E00+200↑j
.text:0040514A                                         ; sub_404E00+206↑j ...
.text:0040514A                 movzx   esi, ds:byte_404AF0[esi] ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405151                 lea     ecx, [ebp+ebp+0]
.text:00405155                 lea     edx, [ebp+ecx+0]
.text:00405159                 shl     edx, 2
.text:0040515C                 sub     edi, ecx
.text:0040515E                 mov     ecx, [esp+1ACh+var_15C]
.text:00405162                 sub     ebx, edx
.text:00405164                 add     ebx, 0Ch
.text:00405167                 mov     [ebx], ecx
.text:00405169                 mov     edx, [esp+1ACh+var_158]
.text:0040516D                 movsx   ecx, byte ptr ds:dword_404C74[esi]
.text:00405174                 mov     [ebx+4], edx
.text:00405177                 mov     ebp, [esp+1ACh+var_154]
.text:0040517B                 movsx   edx, word ptr [edi]
.text:0040517E                 mov     [ebx+8], ebp
.text:00405181                 lea     ebp, [edx+ecx]
.text:00405184                 cmp     ebp, 4Eh ; 'N'
.text:00405187                 ja      short loc_405194
.text:00405189                 movzx   ecx, ss:byte_404D10[ebp]
.text:00405190                 cmp     ecx, edx
.text:00405192                 jz      short loc_4051A3
.text:00405194
.text:00405194 loc_405194:                             ; CODE XREF: sub_404E00+387↑j
.text:00405194                 movsx   ebp, byte ptr ds:dword_404BF4[esi]
.text:0040519B
.text:0040519B loc_40519B:                             ; CODE XREF: sub_404E00+3AA↓j
.text:0040519B                                         ; sub_404E00+B62↓j
.text:0040519B                 add     edi, 2
.text:0040519E                 jmp     loc_404E3B
.text:004051A3 ; ---------------------------------------------------------------------------
.text:004051A3
.text:004051A3 loc_4051A3:                             ; CODE XREF: sub_404E00+392↑j
.text:004051A3                 movzx   ebp, ss:byte_404CB0[ebp]
.text:004051AA                 jmp     short loc_40519B
.text:004051AC ; ---------------------------------------------------------------------------
.text:004051AC
.text:004051AC loc_4051AC:                             ; CODE XREF: sub_404E00+206↑j
.text:004051AC                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004051AC                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00405006 case 7
.text:004051B3                 inc     dword ptr [ecx+6Ch]
.text:004051B6                 jmp     short def_405006 ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004051B8 ; ---------------------------------------------------------------------------
.text:004051B8
.text:004051B8 loc_4051B8:                             ; CODE XREF: sub_404E00+206↑j
.text:004051B8                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004051B8                 mov     eax, [esp+1ACh+arg_0] ; jumptable 00405006 case 8
.text:004051BF                 inc     dword ptr [eax+64h]
.text:004051C2                 jmp     short def_405006 ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004051C4 ; ---------------------------------------------------------------------------
.text:004051C4
.text:004051C4 loc_4051C4:                             ; CODE XREF: sub_404E00+206↑j
.text:004051C4                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004051C4                 mov     edx, [esp+1ACh+arg_0] ; jumptable 00405006 case 9
.text:004051CB                 inc     dword ptr [edx+70h]
.text:004051CE                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004051D3 ; ---------------------------------------------------------------------------
.text:004051D3
.text:004051D3 loc_4051D3:                             ; CODE XREF: sub_404E00+206↑j
.text:004051D3                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004051D3                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00405006 case 10
.text:004051DA                 inc     dword ptr [ecx+5Ch]
.text:004051DD                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004051E2 ; ---------------------------------------------------------------------------
.text:004051E2
.text:004051E2 loc_4051E2:                             ; CODE XREF: sub_404E00+206↑j
.text:004051E2                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004051E2                 mov     eax, [esp+1ACh+arg_0] ; jumptable 00405006 case 11
.text:004051E9                 inc     dword ptr [eax+60h]
.text:004051EC                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004051F1 ; ---------------------------------------------------------------------------
.text:004051F1
.text:004051F1 loc_4051F1:                             ; CODE XREF: sub_404E00+206↑j
.text:004051F1                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004051F1                 mov     edx, [esp+1ACh+arg_0] ; jumptable 00405006 case 12
.text:004051F8                 inc     dword ptr [edx+68h]
.text:004051FB                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405200 ; ---------------------------------------------------------------------------
.text:00405200
.text:00405200 loc_405200:                             ; CODE XREF: sub_404E00+206↑j
.text:00405200                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405200                 mov     edx, [ebx-8]    ; jumptable 00405006 case 14
.text:00405203                 mov     ecx, [esp+1ACh+arg_0]
.text:0040520A                 mov     [ecx+2Ch], edx
.text:0040520D                 mov     dword ptr [ecx+30h], 0
.text:00405214                 mov     dword ptr [ecx+34h], 0
.text:0040521B                 mov     dword ptr [ecx+38h], 0
.text:00405222
.text:00405222 loc_405222:                             ; CODE XREF: sub_404E00+44D↓j
.text:00405222                                         ; sub_404E00+4CE↓j
.text:00405222                 mov     edx, [ebx]
.text:00405224                 mov     [ecx+14h], edx
.text:00405227                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040522C ; ---------------------------------------------------------------------------
.text:0040522C
.text:0040522C loc_40522C:                             ; CODE XREF: sub_404E00+206↑j
.text:0040522C                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040522C                 mov     edx, [ebx-20h]  ; jumptable 00405006 case 15
.text:0040522F                 mov     ecx, [esp+1ACh+arg_0]
.text:00405236                 mov     [ecx+2Ch], edx
.text:00405239                 mov     edx, [ebx-8]
.text:0040523C                 mov     dword ptr [ecx+34h], 0
.text:00405243                 mov     dword ptr [ecx+38h], 0
.text:0040524A                 mov     [ecx+30h], edx
.text:0040524D                 jmp     short loc_405222
.text:0040524F ; ---------------------------------------------------------------------------
.text:0040524F
.text:0040524F loc_40524F:                             ; CODE XREF: sub_404E00+206↑j
.text:0040524F                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040524F                 mov     edx, [ebx-2Ch]  ; jumptable 00405006 case 16
.text:00405252                 mov     ecx, [esp+1ACh+arg_0]
.text:00405259                 mov     [ecx+2Ch], edx
.text:0040525C                 mov     edx, [ebx-14h]
.text:0040525F                 inc     dword ptr [ecx+70h]
.text:00405262                 mov     dword ptr [ecx+34h], 0
.text:00405269                 mov     [ecx+30h], edx
.text:0040526C                 mov     dword ptr [ecx+38h], 0
.text:00405273                 mov     dword ptr [ecx+14h], 2
.text:0040527A                 mov     edx, [ebx]
.text:0040527C                 mov     [esp+1ACh+var_1A0], edx
.text:00405280                 mov     ecx, [ebx-0Ch]
.text:00405283                 mov     [esp+1ACh+Size], ecx
.text:00405286                 mov     edx, [ebx-8]
.text:00405289                 mov     [esp+1ACh+Src], edx
.text:0040528D                 mov     ecx, [ebx-4]
.text:00405290                 mov     [esp+1ACh+var_1A4], ecx
.text:00405294                 call    sub_4063D0
.text:00405299
.text:00405299 loc_405299:                             ; CODE XREF: sub_404E00+588↓j
.text:00405299                                         ; sub_404E00+59A↓j
.text:00405299                 mov     edx, [esp+1ACh+arg_0]
.text:004052A0                 mov     [edx+10h], eax
.text:004052A3                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004052A8 ; ---------------------------------------------------------------------------
.text:004052A8
.text:004052A8 loc_4052A8:                             ; CODE XREF: sub_404E00+206↑j
.text:004052A8                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004052A8                 mov     edx, [ebx-38h]  ; jumptable 00405006 case 17
.text:004052AB                 mov     ecx, [esp+1ACh+arg_0]
.text:004052B2                 mov     [ecx+2Ch], edx
.text:004052B5                 mov     edx, [ebx-20h]
.text:004052B8                 mov     [ecx+30h], edx
.text:004052BB                 mov     eax, [ebx-0Ch]
.text:004052BE                 mov     edx, [ebx-8]
.text:004052C1                 mov     ecx, [esp+1ACh+arg_0]
.text:004052C8                 mov     [ecx+34h], eax
.text:004052CB                 mov     [ecx+38h], edx
.text:004052CE                 jmp     loc_405222
.text:004052D3 ; ---------------------------------------------------------------------------
.text:004052D3
.text:004052D3 loc_4052D3:                             ; CODE XREF: sub_404E00+206↑j
.text:004052D3                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004052D3                 mov     edx, [ebx-44h]  ; jumptable 00405006 case 18
.text:004052D6                 mov     ecx, [esp+1ACh+arg_0]
.text:004052DD                 mov     [ecx+2Ch], edx
.text:004052E0                 mov     edx, [ebx-2Ch]
.text:004052E3                 mov     [ecx+30h], edx
.text:004052E6                 mov     ecx, [esp+1ACh+arg_0]
.text:004052ED                 mov     edx, [ebx-14h]
.text:004052F0                 mov     eax, [ebx-18h]
.text:004052F3                 inc     dword ptr [ecx+70h]
.text:004052F6                 mov     [ecx+38h], edx
.text:004052F9                 mov     [ecx+34h], eax
.text:004052FC                 mov     dword ptr [ecx+14h], 2
.text:00405303                 mov     edx, [ebx]
.text:00405305                 mov     [esp+1ACh+var_1A0], edx
.text:00405309                 mov     ecx, [ebx-0Ch]
.text:0040530C                 mov     [esp+1ACh+Size], ecx
.text:0040530F                 mov     edx, [ebx-8]
.text:00405312                 mov     [esp+1ACh+Src], edx
.text:00405316                 mov     ecx, [ebx-4]
.text:00405319                 mov     [esp+1ACh+var_1A4], ecx
.text:0040531D                 call    sub_4063D0
.text:00405322
.text:00405322 loc_405322:                             ; CODE XREF: sub_404E00+562↓j
.text:00405322                                         ; sub_404E00+592↓j
.text:00405322                 mov     ecx, [esp+1ACh+arg_0]
.text:00405329                 mov     [ecx+10h], eax
.text:0040532C                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405331 ; ---------------------------------------------------------------------------
.text:00405331
.text:00405331 loc_405331:                             ; CODE XREF: sub_404E00+206↑j
.text:00405331                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405331                 mov     ecx, [ebx]      ; jumptable 00405006 case 19
.text:00405333                 mov     edx, [esp+1ACh+arg_0]
.text:0040533A                 mov     [edx+0Ch], ecx
.text:0040533D                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405342 ; ---------------------------------------------------------------------------
.text:00405342
.text:00405342 loc_405342:                             ; CODE XREF: sub_404E00+206↑j
.text:00405342                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405342                 mov     eax, [ebx-0Ch]  ; jumptable 00405006 case 20
.text:00405345                 mov     edx, 1
.text:0040534A                 test    eax, eax
.text:0040534C                 js      short loc_405351
.text:0040534E                 lea     edx, [eax+1]
.text:00405351
.text:00405351 loc_405351:                             ; CODE XREF: sub_404E00+54C↑j
.text:00405351                 mov     ecx, [esp+1ACh+arg_0]
.text:00405358                 mov     [ecx+0Ch], edx
.text:0040535B                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405360 ; ---------------------------------------------------------------------------
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: sub_404E00+206↑j
.text:00405360                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405360                 mov     eax, [ebx]      ; jumptable 00405006 case 21
.text:00405362                 jmp     short loc_405322
.text:00405364 ; ---------------------------------------------------------------------------
.text:00405364
.text:00405364 loc_405364:                             ; CODE XREF: sub_404E00+206↑j
.text:00405364                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405364                 mov     ecx, [ebx]      ; jumptable 00405006 case 22
.text:00405366                 mov     [esp+1ACh+var_1A0], ecx
.text:0040536A                 mov     edx, [ebx-0Ch]
.text:0040536D                 mov     [esp+1ACh+Size], edx
.text:00405370                 mov     ecx, [ebx-8]
.text:00405373                 mov     [esp+1ACh+Src], ecx
.text:00405377                 mov     edx, [ebx-4]
.text:0040537A                 mov     [esp+1ACh+var_1A4], edx
.text:0040537E                 call    sub_4063D0
.text:00405383                 mov     ecx, [ebx-18h]
.text:00405386                 add     eax, ecx
.text:00405388                 jmp     loc_405299
.text:0040538D ; ---------------------------------------------------------------------------
.text:0040538D
.text:0040538D loc_40538D:                             ; CODE XREF: sub_404E00+206↑j
.text:0040538D                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040538D                 mov     eax, [ebx]      ; jumptable 00405006 case 23
.text:0040538F                 add     eax, 3Ch ; '<'
.text:00405392                 jmp     short loc_405322
.text:00405394 ; ---------------------------------------------------------------------------
.text:00405394
.text:00405394 loc_405394:                             ; CODE XREF: sub_404E00+206↑j
.text:00405394                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405394                 mov     eax, [ebx-0Ch]  ; jumptable 00405006 case 24
.text:00405397                 add     eax, 3Ch ; '<'
.text:0040539A                 jmp     loc_405299
.text:0040539F ; ---------------------------------------------------------------------------
.text:0040539F
.text:0040539F loc_40539F:                             ; CODE XREF: sub_404E00+206↑j
.text:0040539F                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040539F                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00405006 case 25
.text:004053A6                 mov     edx, [esp+1ACh+arg_0]
.text:004053AD                 mov     dword ptr [ecx+4], 1
.text:004053B4
.text:004053B4 loc_4053B4:                             ; CODE XREF: sub_404E00+5E4↓j
.text:004053B4                 mov     eax, [ebx]
.text:004053B6                 mov     [edx+8], eax
.text:004053B9                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004053BE ; ---------------------------------------------------------------------------
.text:004053BE
.text:004053BE loc_4053BE:                             ; CODE XREF: sub_404E00+206↑j
.text:004053BE                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004053BE                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00405006 case 26
.text:004053C5                 mov     dword ptr [ecx+4], 1
.text:004053CC                 mov     eax, [ebx-0Ch]
.text:004053CF
.text:004053CF loc_4053CF:                             ; CODE XREF: sub_404E00+5F5↓j
.text:004053CF                 mov     [ecx+8], eax
.text:004053D2                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004053D7 ; ---------------------------------------------------------------------------
.text:004053D7
.text:004053D7 loc_4053D7:                             ; CODE XREF: sub_404E00+206↑j
.text:004053D7                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004053D7                 mov     ecx, [ebx-0Ch]  ; jumptable 00405006 case 27
.text:004053DA                 mov     edx, [esp+1ACh+arg_0]
.text:004053E1                 mov     [edx+4], ecx
.text:004053E4                 jmp     short loc_4053B4
.text:004053E6 ; ---------------------------------------------------------------------------
.text:004053E6
.text:004053E6 loc_4053E6:                             ; CODE XREF: sub_404E00+206↑j
.text:004053E6                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004053E6                 mov     edx, [ebx-8]    ; jumptable 00405006 case 28
.text:004053E9                 mov     ecx, [esp+1ACh+arg_0]
.text:004053F0                 mov     [ecx+4], edx
.text:004053F3                 mov     eax, [ebx]
.text:004053F5                 jmp     short loc_4053CF
.text:004053F7 ; ---------------------------------------------------------------------------
.text:004053F7
.text:004053F7 loc_4053F7:                             ; CODE XREF: sub_404E00+206↑j
.text:004053F7                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004053F7                 mov     eax, [ebx-14h]  ; jumptable 00405006 case 29
.text:004053FA
.text:004053FA loc_4053FA:                             ; CODE XREF: sub_404E00+6D5↓j
.text:004053FA                 mov     ecx, [esp+1ACh+arg_0]
.text:00405401                 mov     [ecx+24h], eax
.text:00405404                 mov     edx, [ebx+4]
.text:00405407                 mov     [ecx+28h], edx
.text:0040540A                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040540F ; ---------------------------------------------------------------------------
.text:0040540F
.text:0040540F loc_40540F:                             ; CODE XREF: sub_404E00+206↑j
.text:0040540F                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040540F                 cmp     dword ptr [ebx-28h], 3 ; jumptable 00405006 case 30
.text:00405413                 jbe     short loc_40543F
.text:00405415                 mov     edx, [ebx-30h]
.text:00405418                 mov     ecx, [esp+1ACh+arg_0]
.text:0040541F                 mov     [ecx+18h], edx
.text:00405422                 mov     edx, [ebx-2Ch]
.text:00405425                 mov     [ecx+1Ch], edx
.text:00405428                 mov     edx, [ebx-28h]
.text:0040542B                 mov     [ecx+20h], edx
.text:0040542E                 mov     edx, [ebx-14h]
.text:00405431                 mov     [ecx+24h], edx
.text:00405434                 mov     eax, [ebx+4]
.text:00405437
.text:00405437 loc_405437:                             ; CODE XREF: sub_404E00+68E↓j
.text:00405437                 mov     [ecx+28h], eax
.text:0040543A                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040543F ; ---------------------------------------------------------------------------
.text:0040543F
.text:0040543F loc_40543F:                             ; CODE XREF: sub_404E00+613↑j
.text:0040543F                 mov     ecx, [ebx-2Ch]
.text:00405442                 mov     edx, [esp+1ACh+arg_0]
.text:00405449                 mov     [edx+24h], ecx
.text:0040544C                 mov     ecx, [ebx-14h]
.text:0040544F                 mov     [edx+28h], ecx
.text:00405452                 mov     ecx, [ebx]
.text:00405454                 mov     [edx+18h], ecx
.text:00405457                 mov     eax, [ebx+4]
.text:0040545A
.text:0040545A loc_40545A:                             ; CODE XREF: sub_404E00+6A8↓j
.text:0040545A                 mov     [edx+1Ch], eax
.text:0040545D                 mov     ecx, [ebx+8]
.text:00405460                 mov     [edx+20h], ecx
.text:00405463                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405468 ; ---------------------------------------------------------------------------
.text:00405468
.text:00405468 loc_405468:                             ; CODE XREF: sub_404E00+206↑j
.text:00405468                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405468                 mov     edx, [ebx-18h]  ; jumptable 00405006 case 31
.text:0040546B                 mov     ecx, [esp+1ACh+arg_0]
.text:00405472                 mov     [ecx+18h], edx
.text:00405475                 mov     edx, [ebx-14h]
.text:00405478                 mov     [ecx+1Ch], edx
.text:0040547B                 mov     edx, [ebx-10h]
.text:0040547E                 mov     [ecx+20h], edx
.text:00405481                 mov     edx, [ebx-8]
.text:00405484                 neg     edx
.text:00405486                 mov     [ecx+24h], edx
.text:00405489                 mov     eax, [ebx+4]
.text:0040548C                 neg     eax
.text:0040548E                 jmp     short loc_405437
.text:00405490 ; ---------------------------------------------------------------------------
.text:00405490
.text:00405490 loc_405490:                             ; CODE XREF: sub_404E00+206↑j
.text:00405490                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405490                 mov     ecx, [ebx-14h]  ; jumptable 00405006 case 32
.text:00405493                 mov     edx, [esp+1ACh+arg_0]
.text:0040549A                 mov     [edx+28h], ecx
.text:0040549D                 mov     ecx, [ebx-0Ch]
.text:004054A0                 mov     [edx+24h], ecx
.text:004054A3                 mov     eax, [ebx+4]
.text:004054A6                 neg     eax
.text:004054A8                 jmp     short loc_40545A
.text:004054AA ; ---------------------------------------------------------------------------
.text:004054AA
.text:004054AA loc_4054AA:                             ; CODE XREF: sub_404E00+206↑j
.text:004054AA                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004054AA                 mov     edx, [ebx-18h]  ; jumptable 00405006 case 33
.text:004054AD                 mov     ecx, [esp+1ACh+arg_0]
.text:004054B4                 mov     [ecx+24h], edx
.text:004054B7                 mov     edx, [ebx-8]
.text:004054BA                 neg     edx
.text:004054BC                 mov     [ecx+28h], edx
.text:004054BF                 mov     eax, [ebx+4]
.text:004054C2                 neg     eax
.text:004054C4
.text:004054C4 loc_4054C4:                             ; CODE XREF: sub_404E00+6F5↓j
.text:004054C4                 mov     [ecx+1Ch], eax
.text:004054C7                 mov     eax, [ebx+8]
.text:004054CA
.text:004054CA loc_4054CA:                             ; CODE XREF: sub_404E00+9E0↓j
.text:004054CA                 mov     [ecx+20h], eax
.text:004054CD                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004054D2 ; ---------------------------------------------------------------------------
.text:004054D2
.text:004054D2 loc_4054D2:                             ; CODE XREF: sub_404E00+206↑j
.text:004054D2                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004054D2                 mov     eax, [ebx-0Ch]  ; jumptable 00405006 case 34
.text:004054D5                 jmp     loc_4053FA
.text:004054DA ; ---------------------------------------------------------------------------
.text:004054DA
.text:004054DA loc_4054DA:                             ; CODE XREF: sub_404E00+206↑j
.text:004054DA                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004054DA                 mov     edx, [ebx-24h]  ; jumptable 00405006 case 35
.text:004054DD                 mov     ecx, [esp+1ACh+arg_0]
.text:004054E4                 mov     [ecx+24h], edx
.text:004054E7                 mov     edx, [ebx-14h]
.text:004054EA                 mov     [ecx+28h], edx
.text:004054ED
.text:004054ED loc_4054ED:                             ; CODE XREF: sub_404E00+721↓j
.text:004054ED                 mov     eax, [ebx]
.text:004054EF
.text:004054EF loc_4054EF:                             ; CODE XREF: sub_404E00+927↓j
.text:004054EF                 mov     [ecx+18h], eax
.text:004054F2                 mov     eax, [ebx+4]
.text:004054F5                 jmp     short loc_4054C4
.text:004054F7 ; ---------------------------------------------------------------------------
.text:004054F7
.text:004054F7 loc_4054F7:                             ; CODE XREF: sub_404E00+206↑j
.text:004054F7                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004054F7                 mov     edx, [ebx-8]    ; jumptable 00405006 case 36
.text:004054FA                 mov     ecx, [esp+1ACh+arg_0]
.text:00405501                 mov     [ecx+28h], edx
.text:00405504                 mov     edx, [ebx]
.text:00405506                 mov     [ecx+24h], edx
.text:00405509                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040550E ; ---------------------------------------------------------------------------
.text:0040550E
.text:0040550E loc_40550E:                             ; CODE XREF: sub_404E00+206↑j
.text:0040550E                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040550E                 mov     edx, [ebx-14h]  ; jumptable 00405006 case 37
.text:00405511                 mov     ecx, [esp+1ACh+arg_0]
.text:00405518                 mov     [ecx+28h], edx
.text:0040551B                 mov     edx, [ebx-0Ch]
.text:0040551E                 mov     [ecx+24h], edx
.text:00405521                 jmp     short loc_4054ED
.text:00405523 ; ---------------------------------------------------------------------------
.text:00405523
.text:00405523 loc_405523:                             ; CODE XREF: sub_404E00+206↑j
.text:00405523                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405523                 mov     ecx, [esp+1ACh+arg_0] ; jumptable 00405006 case 38
.text:0040552A                 neg     dword ptr [ecx+54h]
.text:0040552D                 neg     dword ptr [ecx+50h]
.text:00405530                 neg     dword ptr [ecx+4Ch]
.text:00405533                 neg     dword ptr [ecx+48h]
.text:00405536                 neg     dword ptr [ecx+44h]
.text:00405539                 neg     dword ptr [ecx+40h]
.text:0040553C                 neg     dword ptr [ecx+3Ch]
.text:0040553F                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405544 ; ---------------------------------------------------------------------------
.text:00405544
.text:00405544 loc_405544:                             ; CODE XREF: sub_404E00+206↑j
.text:00405544                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405544                 mov     eax, [ebx]      ; jumptable 00405006 case 40
.text:00405546                 mov     edx, [ebx-0Ch]
.text:00405549
.text:00405549 loc_405549:                             ; CODE XREF: sub_404E00+777↓j
.text:00405549                 imul    eax, edx
.text:0040554C                 mov     ecx, [esp+1ACh+arg_0]
.text:00405553                 add     [ecx+3Ch], eax
.text:00405556                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040555B ; ---------------------------------------------------------------------------
.text:0040555B
.text:0040555B loc_40555B:                             ; CODE XREF: sub_404E00+206↑j
.text:0040555B                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040555B                 mov     eax, [ebx]      ; jumptable 00405006 case 41
.text:0040555D                 mov     ecx, [ebx-8]
.text:00405560                 imul    eax, ecx
.text:00405563
.text:00405563 loc_405563:                             ; CODE XREF: sub_404E00+77B↓j
.text:00405563                 mov     edx, [esp+1ACh+arg_0]
.text:0040556A                 add     [edx+3Ch], eax
.text:0040556D                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405572 ; ---------------------------------------------------------------------------
.text:00405572
.text:00405572 loc_405572:                             ; CODE XREF: sub_404E00+206↑j
.text:00405572                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405572                 mov     eax, [ebx]      ; jumptable 00405006 case 42
.text:00405574                 mov     edx, [ebx-8]
.text:00405577                 jmp     short loc_405549
.text:00405579 ; ---------------------------------------------------------------------------
.text:00405579
.text:00405579 loc_405579:                             ; CODE XREF: sub_404E00+206↑j
.text:00405579                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405579                 mov     eax, [ebx]      ; jumptable 00405006 case 43
.text:0040557B                 jmp     short loc_405563
.text:0040557D ; ---------------------------------------------------------------------------
.text:0040557D
.text:0040557D loc_40557D:                             ; CODE XREF: sub_404E00+206↑j
.text:0040557D                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040557D                 mov     eax, [ebx]      ; jumptable 00405006 case 44
.text:0040557F                 mov     ecx, [ebx-0Ch]
.text:00405582
.text:00405582 loc_405582:                             ; CODE XREF: sub_404E00+7B0↓j
.text:00405582                 imul    eax, ecx
.text:00405585                 mov     ecx, [esp+1ACh+arg_0]
.text:0040558C                 add     [ecx+40h], eax
.text:0040558F                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405594 ; ---------------------------------------------------------------------------
.text:00405594
.text:00405594 loc_405594:                             ; CODE XREF: sub_404E00+206↑j
.text:00405594                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405594                 mov     eax, [ebx]      ; jumptable 00405006 case 45
.text:00405596                 mov     edx, [ebx-8]
.text:00405599                 imul    eax, edx
.text:0040559C
.text:0040559C loc_40559C:                             ; CODE XREF: sub_404E00+7B4↓j
.text:0040559C                 mov     edx, [esp+1ACh+arg_0]
.text:004055A3                 add     [edx+40h], eax
.text:004055A6                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004055AB ; ---------------------------------------------------------------------------
.text:004055AB
.text:004055AB loc_4055AB:                             ; CODE XREF: sub_404E00+206↑j
.text:004055AB                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004055AB                 mov     eax, [ebx]      ; jumptable 00405006 case 46
.text:004055AD                 mov     ecx, [ebx-8]
.text:004055B0                 jmp     short loc_405582
.text:004055B2 ; ---------------------------------------------------------------------------
.text:004055B2
.text:004055B2 loc_4055B2:                             ; CODE XREF: sub_404E00+206↑j
.text:004055B2                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004055B2                 mov     eax, [ebx]      ; jumptable 00405006 case 47
.text:004055B4                 jmp     short loc_40559C
.text:004055B6 ; ---------------------------------------------------------------------------
.text:004055B6
.text:004055B6 loc_4055B6:                             ; CODE XREF: sub_404E00+206↑j
.text:004055B6                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004055B6                 mov     eax, [ebx]      ; jumptable 00405006 case 48
.text:004055B8                 mov     edx, [ebx-0Ch]
.text:004055BB
.text:004055BB loc_4055BB:                             ; CODE XREF: sub_404E00+7E9↓j
.text:004055BB                 imul    eax, edx
.text:004055BE                 mov     ecx, [esp+1ACh+arg_0]
.text:004055C5                 add     [ecx+44h], eax
.text:004055C8                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004055CD ; ---------------------------------------------------------------------------
.text:004055CD
.text:004055CD loc_4055CD:                             ; CODE XREF: sub_404E00+206↑j
.text:004055CD                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004055CD                 mov     eax, [ebx]      ; jumptable 00405006 case 49
.text:004055CF                 mov     ecx, [ebx-8]
.text:004055D2                 imul    eax, ecx
.text:004055D5
.text:004055D5 loc_4055D5:                             ; CODE XREF: sub_404E00+7ED↓j
.text:004055D5                 mov     edx, [esp+1ACh+arg_0]
.text:004055DC                 add     [edx+44h], eax
.text:004055DF                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004055E4 ; ---------------------------------------------------------------------------
.text:004055E4
.text:004055E4 loc_4055E4:                             ; CODE XREF: sub_404E00+206↑j
.text:004055E4                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004055E4                 mov     eax, [ebx]      ; jumptable 00405006 case 50
.text:004055E6                 mov     edx, [ebx-8]
.text:004055E9                 jmp     short loc_4055BB
.text:004055EB ; ---------------------------------------------------------------------------
.text:004055EB
.text:004055EB loc_4055EB:                             ; CODE XREF: sub_404E00+206↑j
.text:004055EB                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004055EB                 mov     eax, [ebx]      ; jumptable 00405006 case 51
.text:004055ED                 jmp     short loc_4055D5
.text:004055EF ; ---------------------------------------------------------------------------
.text:004055EF
.text:004055EF loc_4055EF:                             ; CODE XREF: sub_404E00+206↑j
.text:004055EF                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004055EF                 mov     eax, [ebx]      ; jumptable 00405006 case 52
.text:004055F1                 mov     ecx, [ebx-0Ch]
.text:004055F4
.text:004055F4 loc_4055F4:                             ; CODE XREF: sub_404E00+822↓j
.text:004055F4                 imul    eax, ecx
.text:004055F7                 mov     ecx, [esp+1ACh+arg_0]
.text:004055FE                 add     [ecx+48h], eax
.text:00405601                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405606 ; ---------------------------------------------------------------------------
.text:00405606
.text:00405606 loc_405606:                             ; CODE XREF: sub_404E00+206↑j
.text:00405606                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405606                 mov     eax, [ebx]      ; jumptable 00405006 case 53
.text:00405608                 mov     edx, [ebx-8]
.text:0040560B                 imul    eax, edx
.text:0040560E
.text:0040560E loc_40560E:                             ; CODE XREF: sub_404E00+826↓j
.text:0040560E                 mov     edx, [esp+1ACh+arg_0]
.text:00405615                 add     [edx+48h], eax
.text:00405618                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040561D ; ---------------------------------------------------------------------------
.text:0040561D
.text:0040561D loc_40561D:                             ; CODE XREF: sub_404E00+206↑j
.text:0040561D                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040561D                 mov     eax, [ebx]      ; jumptable 00405006 case 54
.text:0040561F                 mov     ecx, [ebx-8]
.text:00405622                 jmp     short loc_4055F4
.text:00405624 ; ---------------------------------------------------------------------------
.text:00405624
.text:00405624 loc_405624:                             ; CODE XREF: sub_404E00+206↑j
.text:00405624                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405624                 mov     eax, [ebx]      ; jumptable 00405006 case 55
.text:00405626                 jmp     short loc_40560E
.text:00405628 ; ---------------------------------------------------------------------------
.text:00405628
.text:00405628 loc_405628:                             ; CODE XREF: sub_404E00+206↑j
.text:00405628                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405628                 mov     eax, [ebx]      ; jumptable 00405006 case 56
.text:0040562A                 mov     edx, [ebx-0Ch]
.text:0040562D
.text:0040562D loc_40562D:                             ; CODE XREF: sub_404E00+85B↓j
.text:0040562D                 imul    eax, edx
.text:00405630                 mov     ecx, [esp+1ACh+arg_0]
.text:00405637                 add     [ecx+4Ch], eax
.text:0040563A                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040563F ; ---------------------------------------------------------------------------
.text:0040563F
.text:0040563F loc_40563F:                             ; CODE XREF: sub_404E00+206↑j
.text:0040563F                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040563F                 mov     eax, [ebx]      ; jumptable 00405006 case 57
.text:00405641                 mov     ecx, [ebx-8]
.text:00405644                 imul    eax, ecx
.text:00405647
.text:00405647 loc_405647:                             ; CODE XREF: sub_404E00+85F↓j
.text:00405647                 mov     edx, [esp+1ACh+arg_0]
.text:0040564E                 add     [edx+4Ch], eax
.text:00405651                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405656 ; ---------------------------------------------------------------------------
.text:00405656
.text:00405656 loc_405656:                             ; CODE XREF: sub_404E00+206↑j
.text:00405656                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405656                 mov     eax, [ebx]      ; jumptable 00405006 case 58
.text:00405658                 mov     edx, [ebx-8]
.text:0040565B                 jmp     short loc_40562D
.text:0040565D ; ---------------------------------------------------------------------------
.text:0040565D
.text:0040565D loc_40565D:                             ; CODE XREF: sub_404E00+206↑j
.text:0040565D                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040565D                 mov     eax, [ebx]      ; jumptable 00405006 case 59
.text:0040565F                 jmp     short loc_405647
.text:00405661 ; ---------------------------------------------------------------------------
.text:00405661
.text:00405661 loc_405661:                             ; CODE XREF: sub_404E00+206↑j
.text:00405661                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405661                 mov     eax, [ebx]      ; jumptable 00405006 case 60
.text:00405663                 mov     ecx, [ebx-0Ch]
.text:00405666
.text:00405666 loc_405666:                             ; CODE XREF: sub_404E00+894↓j
.text:00405666                 imul    eax, ecx
.text:00405669                 mov     ecx, [esp+1ACh+arg_0]
.text:00405670                 add     [ecx+50h], eax
.text:00405673                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405678 ; ---------------------------------------------------------------------------
.text:00405678
.text:00405678 loc_405678:                             ; CODE XREF: sub_404E00+206↑j
.text:00405678                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405678                 mov     eax, [ebx]      ; jumptable 00405006 case 61
.text:0040567A                 mov     edx, [ebx-8]
.text:0040567D                 imul    eax, edx
.text:00405680
.text:00405680 loc_405680:                             ; CODE XREF: sub_404E00+8DC↓j
.text:00405680                 mov     edx, [esp+1ACh+arg_0]
.text:00405687                 add     [edx+50h], eax
.text:0040568A                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040568F ; ---------------------------------------------------------------------------
.text:0040568F
.text:0040568F loc_40568F:                             ; CODE XREF: sub_404E00+206↑j
.text:0040568F                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040568F                 mov     eax, [ebx]      ; jumptable 00405006 case 62
.text:00405691                 mov     ecx, [ebx-8]
.text:00405694                 jmp     short loc_405666
.text:00405696 ; ---------------------------------------------------------------------------
.text:00405696
.text:00405696 loc_405696:                             ; CODE XREF: sub_404E00+206↑j
.text:00405696                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405696                 mov     eax, [ebx-0Ch]  ; jumptable 00405006 case 63
.text:00405699                 mov     edx, [ebx]
.text:0040569B                 mov     ecx, [esp+1ACh+arg_0]
.text:004056A2                 imul    edx, eax
.text:004056A5                 add     [ecx+50h], edx
.text:004056A8                 mov     eax, [ebx]
.text:004056AA                 mov     edx, [ebx-8]
.text:004056AD                 imul    eax, edx
.text:004056B0                 add     [ecx+54h], eax
.text:004056B3                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004056B8 ; ---------------------------------------------------------------------------
.text:004056B8
.text:004056B8 loc_4056B8:                             ; CODE XREF: sub_404E00+206↑j
.text:004056B8                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004056B8                 mov     eax, [ebx-0Ch]  ; jumptable 00405006 case 64
.text:004056BB                 mov     ecx, [ebx]
.text:004056BD                 mov     edx, [esp+1ACh+arg_0]
.text:004056C4                 imul    ecx, eax
.text:004056C7                 add     [edx+50h], ecx
.text:004056CA                 mov     eax, [ebx]
.text:004056CC                 mov     ecx, [ebx-8]
.text:004056CF                 imul    eax, ecx
.text:004056D2                 add     [edx+54h], eax
.text:004056D5                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004056DA ; ---------------------------------------------------------------------------
.text:004056DA
.text:004056DA loc_4056DA:                             ; CODE XREF: sub_404E00+206↑j
.text:004056DA                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004056DA                 mov     eax, [ebx]      ; jumptable 00405006 case 65
.text:004056DC                 jmp     short loc_405680
.text:004056DE ; ---------------------------------------------------------------------------
.text:004056DE
.text:004056DE loc_4056DE:                             ; CODE XREF: sub_404E00+206↑j
.text:004056DE                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004056DE                 mov     ecx, [ebx+4]    ; jumptable 00405006 cases 69,71
.text:004056E1                 mov     [esp+1ACh+var_158], 0
.text:004056E9                 mov     [esp+1ACh+var_15C], ecx
.text:004056ED                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004056F2 ; ---------------------------------------------------------------------------
.text:004056F2
.text:004056F2 loc_4056F2:                             ; CODE XREF: sub_404E00+206↑j
.text:004056F2                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004056F2                 mov     edx, [esp+1ACh+arg_0] ; jumptable 00405006 case 72
.text:004056F9                 mov     eax, [edx+5Ch]
.text:004056FC                 test    eax, eax
.text:004056FE                 jz      loc_405874
.text:00405704                 mov     ecx, [edx+68h]
.text:00405707                 test    ecx, ecx
.text:00405709                 jnz     loc_405874
.text:0040570F                 mov     ecx, [edx+6Ch]
.text:00405712                 test    ecx, ecx
.text:00405714                 jnz     short loc_40571E
.text:00405716                 mov     edx, [ebx+8]
.text:00405719                 cmp     edx, 2
.text:0040571C                 jbe     short loc_40572C
.text:0040571E
.text:0040571E loc_40571E:                             ; CODE XREF: sub_404E00+914↑j
.text:0040571E                 mov     eax, [ebx]
.text:00405720                 mov     ecx, [esp+1ACh+arg_0]
.text:00405727                 jmp     loc_4054EF
.text:0040572C ; ---------------------------------------------------------------------------
.text:0040572C
.text:0040572C loc_40572C:                             ; CODE XREF: sub_404E00+91C↑j
.text:0040572C                                         ; sub_404E00+A77↓j
.text:0040572C                 cmp     edx, 4
.text:0040572F                 jbe     loc_4057E5
.text:00405735                 mov     ecx, [esp+1ACh+arg_0]
.text:0040573C                 inc     eax
.text:0040573D                 mov     [ecx+5Ch], eax
.text:00405740                 mov     ecx, [ebx+4]
.text:00405743                 mov     eax, 51EB851Fh
.text:00405748                 imul    ecx
.text:0040574A                 mov     eax, ecx
.text:0040574C                 mov     [esp+1ACh+var_188], edx
.text:00405750                 sar     edx, 5
.text:00405753                 mov     [esp+1ACh+var_18C], edx
.text:00405757                 cdq
.text:00405758                 sub     [esp+1ACh+var_18C], edx
.text:0040575C                 mov     edx, [esp+1ACh+var_18C]
.text:00405760                 lea     eax, [edx+edx*4]
.text:00405763                 lea     edx, [eax+eax*4]
.text:00405766                 shl     edx, 2
.text:00405769                 mov     eax, 51EB851Fh
.text:0040576E                 sub     ecx, edx
.text:00405770                 mov     edx, [esp+1ACh+arg_0]
.text:00405777                 mov     [edx+28h], ecx
.text:0040577A                 mov     ecx, [ebx+4]
.text:0040577D                 imul    dword ptr [ebx+4]
.text:00405780                 mov     eax, 51EB851Fh
.text:00405785                 sar     ecx, 1Fh
.text:00405788                 sar     edx, 5
.text:0040578B                 sub     edx, ecx
.text:0040578D                 mov     [esp+1ACh+var_190], edx
.text:00405791                 imul    edx
.text:00405793                 mov     ecx, edx
.text:00405795                 mov     edx, [esp+1ACh+var_190]
.text:00405799                 sar     ecx, 5
.text:0040579C                 sar     edx, 1Fh
.text:0040579F                 sub     ecx, edx
.text:004057A1                 lea     eax, [ecx+ecx*4]
.text:004057A4                 mov     ecx, [esp+1ACh+var_190]
.text:004057A8                 lea     edx, [eax+eax*4]
.text:004057AB                 mov     eax, [esp+1ACh+arg_0]
.text:004057B2                 shl     edx, 2
.text:004057B5                 sub     ecx, edx
.text:004057B7                 mov     [eax+24h], ecx
.text:004057BA                 mov     edx, 68DB8BADh
.text:004057BF                 mov     ecx, [ebx+4]
.text:004057C2                 mov     eax, ecx
.text:004057C4                 imul    edx
.text:004057C6                 mov     eax, ecx
.text:004057C8                 sar     eax, 1Fh
.text:004057CB                 mov     ecx, [esp+1ACh+arg_0]
.text:004057D2                 sar     edx, 0Ch
.text:004057D5                 sub     edx, eax
.text:004057D7                 mov     [ecx+1Ch], edx
.text:004057DA                 mov     eax, [ebx+8]
.text:004057DD                 sub     eax, 4
.text:004057E0                 jmp     loc_4054CA
.text:004057E5 ; ---------------------------------------------------------------------------
.text:004057E5
.text:004057E5 loc_4057E5:                             ; CODE XREF: sub_404E00+92F↑j
.text:004057E5                 mov     edx, [esp+1ACh+arg_0]
.text:004057EC                 inc     dword ptr [edx+6Ch]
.text:004057EF                 cmp     dword ptr [ebx+8], 2
.text:004057F3                 ja      short loc_40582A
.text:004057F5                 mov     edx, [ebx+4]
.text:004057F8                 mov     ecx, [esp+1ACh+arg_0]
.text:004057FF                 mov     [ecx+2Ch], edx
.text:00405802                 mov     dword ptr [ecx+30h], 0
.text:00405809
.text:00405809 loc_405809:                             ; CODE XREF: sub_404E00+A72↓j
.text:00405809                 mov     eax, [esp+1ACh+arg_0]
.text:00405810                 mov     dword ptr [eax+34h], 0
.text:00405817                 mov     dword ptr [eax+38h], 0
.text:0040581E                 mov     dword ptr [eax+14h], 2
.text:00405825                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:0040582A ; ---------------------------------------------------------------------------
.text:0040582A
.text:0040582A loc_40582A:                             ; CODE XREF: sub_404E00+9F3↑j
.text:0040582A                 mov     eax, 51EB851Fh
.text:0040582F                 imul    dword ptr [ebx+4]
.text:00405832                 mov     eax, 51EB851Fh
.text:00405837                 mov     ecx, edx
.text:00405839                 mov     edx, [ebx+4]
.text:0040583C                 sar     ecx, 5
.text:0040583F                 sar     edx, 1Fh
.text:00405842                 sub     ecx, edx
.text:00405844                 mov     edx, [esp+1ACh+arg_0]
.text:0040584B                 mov     [edx+2Ch], ecx
.text:0040584E                 mov     ecx, [ebx+4]
.text:00405851                 imul    ecx
.text:00405853                 mov     eax, ecx
.text:00405855                 sar     eax, 1Fh
.text:00405858                 sar     edx, 5
.text:0040585B                 sub     edx, eax
.text:0040585D                 lea     edx, [edx+edx*4]
.text:00405860                 lea     eax, [edx+edx*4]
.text:00405863                 shl     eax, 2
.text:00405866                 sub     ecx, eax
.text:00405868                 mov     eax, [esp+1ACh+arg_0]
.text:0040586F                 mov     [eax+30h], ecx
.text:00405872                 jmp     short loc_405809
.text:00405874 ; ---------------------------------------------------------------------------
.text:00405874
.text:00405874 loc_405874:                             ; CODE XREF: sub_404E00+8FE↑j
.text:00405874                                         ; sub_404E00+909↑j
.text:00405874                 mov     edx, [ebx+8]
.text:00405877                 jmp     loc_40572C
.text:0040587C ; ---------------------------------------------------------------------------
.text:0040587C
.text:0040587C loc_40587C:                             ; CODE XREF: sub_404E00+206↑j
.text:0040587C                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:0040587C                 mov     [esp+1ACh+var_15C], 0FFFFFFFFh ; jumptable 00405006 case 73
.text:00405884                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405889 ; ---------------------------------------------------------------------------
.text:00405889
.text:00405889 loc_405889:                             ; CODE XREF: sub_404E00+206↑j
.text:00405889                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405889                 mov     eax, [ebx+4]    ; jumptable 00405006 case 74
.text:0040588C
.text:0040588C loc_40588C:                             ; CODE XREF: sub_404E00+AA4↓j
.text:0040588C                 mov     [esp+1ACh+var_15C], eax
.text:00405890                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:00405895 ; ---------------------------------------------------------------------------
.text:00405895
.text:00405895 loc_405895:                             ; CODE XREF: sub_404E00+206↑j
.text:00405895                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:00405895                 mov     [esp+1ACh+var_15C], 2 ; jumptable 00405006 case 75
.text:0040589D                 jmp     def_405006      ; jumptable 00405006 default case, cases 5,6,13,39,66-68,70
.text:004058A2 ; ---------------------------------------------------------------------------
.text:004058A2
.text:004058A2 loc_4058A2:                             ; CODE XREF: sub_404E00+206↑j
.text:004058A2                                         ; DATA XREF: sub_404E00:jpt_405006↑o
.text:004058A2                 mov     eax, [ebx]      ; jumptable 00405006 case 76
.text:004058A4                 jmp     short loc_40588C
.text:004058A6 ; ---------------------------------------------------------------------------
.text:004058A6
.text:004058A6 loc_4058A6:                             ; CODE XREF: sub_404E00+1C9↑j
.text:004058A6                                         ; sub_404E00+C17↓j
.text:004058A6                 mov     esi, [esp+1ACh+var_164]
.text:004058AA                 test    esi, esi
.text:004058AC                 jz      loc_4059A0
.text:004058B2
.text:004058B2 loc_4058B2:                             ; CODE XREF: sub_404E00+BB7↓j
.text:004058B2                 cmp     [esp+1ACh+var_164], 3
.text:004058B7                 jz      loc_405970
.text:004058BD
.text:004058BD loc_4058BD:                             ; CODE XREF: sub_404E00+B80↓j
.text:004058BD                                         ; sub_404E00+B8B↓j
.text:004058BD                 mov     [esp+1ACh+var_164], 3
.text:004058C5                 lea     esi, [esi+0]
.text:004058C9                 lea     edi, [edi+0]
.text:004058D0
.text:004058D0 loc_4058D0:                             ; CODE XREF: sub_404E00+AFF↓j
.text:004058D0                 movsx   esi, ss:byte_404C30[ebp]
.text:004058D7                 cmp     esi, 0FFFFFFBEh
.text:004058DA                 jz      short loc_4058F0
.text:004058DC                 inc     esi
.text:004058DD                 cmp     esi, 4Eh ; 'N'
.text:004058E0                 ja      short loc_4058F0
.text:004058E2                 cmp     ds:byte_404D10[esi], 1
.text:004058E9                 jz      short loc_405930
.text:004058EB                 nop
.text:004058EC                 lea     esi, [esi+0]
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_404E00+ADA↑j
.text:004058F0                                         ; sub_404E00+AE0↑j ...
.text:004058F0                 cmp     edi, [esp+1ACh+var_168]
.text:004058F4                 jz      short loc_405901
.text:004058F6                 sub     edi, 2
.text:004058F9                 sub     ebx, 0Ch
.text:004058FC                 movsx   ebp, word ptr [edi]
.text:004058FF                 jmp     short loc_4058D0
.text:00405901 ; ---------------------------------------------------------------------------
.text:00405901
.text:00405901 loc_405901:                             ; CODE XREF: sub_404E00+167↑j
.text:00405901                                         ; sub_404E00+AF4↑j ...
.text:00405901                 mov     ebx, 1
.text:00405906
.text:00405906 loc_405906:                             ; CODE XREF: sub_404E00+B69↓j
.text:00405906                                         ; sub_404E00+C72↓j
.text:00405906                 lea     esi, [esp+1ACh+var_5C]
.text:0040590D                 cmp     [esp+1ACh+var_168], esi
.text:00405911                 jz      short loc_40591F
.text:00405913                 mov     eax, [esp+1ACh+var_168]
.text:00405917                 mov     [esp+1ACh+Size], eax ; Block
.text:0040591A                 call    free
.text:0040591F
.text:0040591F loc_40591F:                             ; CODE XREF: sub_404E00+B11↑j
.text:0040591F                 add     esp, 19Ch
.text:00405925                 mov     eax, ebx
.text:00405927                 pop     ebx
.text:00405928                 pop     esi
.text:00405929                 pop     edi
.text:0040592A                 pop     ebp
.text:0040592B                 retn
.text:0040592B ; ---------------------------------------------------------------------------
.text:0040592C                 align 10h
.text:00405930
.text:00405930 loc_405930:                             ; CODE XREF: sub_404E00+AE9↑j
.text:00405930                 movzx   esi, ds:byte_404CB0[esi]
.text:00405937                 test    esi, esi
.text:00405939                 jle     short loc_4058F0
.text:0040593B                 cmp     esi, 0Ch
.text:0040593E                 jz      short loc_405967
.text:00405940                 mov     edx, [esp+1ACh+var_2C]
.text:00405947                 add     ebx, 0Ch
.text:0040594A                 mov     [ebx], edx
.text:0040594C                 mov     ecx, [esp+1ACh+var_28]
.text:00405953                 mov     [ebx+4], ecx
.text:00405956                 mov     ebp, [esp+1ACh+var_24]
.text:0040595D                 mov     [ebx+8], ebp
.text:00405960
.text:00405960 loc_405960:                             ; CODE XREF: sub_404E00+C02↓j
.text:00405960                                         ; sub_404E00+C0C↓j
.text:00405960                 mov     ebp, esi
.text:00405962                 jmp     loc_40519B
.text:00405967 ; ---------------------------------------------------------------------------
.text:00405967
.text:00405967 loc_405967:                             ; CODE XREF: sub_404E00+B3E↑j
.text:00405967                                         ; sub_404E00+BCA↓j
.text:00405967                 xor     ebx, ebx
.text:00405969                 jmp     short loc_405906
.text:00405969 ; ---------------------------------------------------------------------------
.text:0040596B                 align 10h
.text:00405970
.text:00405970 loc_405970:                             ; CODE XREF: sub_404E00+AB7↑j
.text:00405970                 mov     ecx, [esp+1ACh+var_160]
.text:00405974                 test    ecx, ecx
.text:00405976                 jle     short loc_405985
.text:00405978                 mov     [esp+1ACh+var_160], 0FFFFFFFEh
.text:00405980                 jmp     loc_4058BD
.text:00405985 ; ---------------------------------------------------------------------------
.text:00405985
.text:00405985 loc_405985:                             ; CODE XREF: sub_404E00+B76↑j
.text:00405985                 mov     edx, [esp+1ACh+var_160]
.text:00405989                 test    edx, edx
.text:0040598B                 jnz     loc_4058BD
.text:00405991
.text:00405991 loc_405991:                             ; CODE XREF: sub_404E00+B98↓j
.text:00405991                 sub     edi, 2
.text:00405994                 cmp     edi, [esp+1ACh+var_168]
.text:00405998                 jnz     short loc_405991
.text:0040599A                 jmp     loc_405901
.text:0040599A ; ---------------------------------------------------------------------------
.text:0040599F                 align 10h
.text:004059A0
.text:004059A0 loc_4059A0:                             ; CODE XREF: sub_404E00+AAC↑j
.text:004059A0                 mov     [esp+1ACh+Src], offset aSyntaxError ; "syntax error"
.text:004059A8                 mov     eax, [esp+1ACh+arg_0]
.text:004059AF                 mov     [esp+1ACh+Size], eax
.text:004059B2                 call    sub_406810
.text:004059B7                 jmp     loc_4058B2
.text:004059BC ; ---------------------------------------------------------------------------
.text:004059BC
.text:004059BC loc_4059BC:                             ; CODE XREF: sub_404E00+1BA↑j
.text:004059BC                 movzx   esi, ds:byte_404CB0[esi]
.text:004059C3                 test    esi, esi
.text:004059C5                 jle     short loc_405A11
.text:004059C7                 cmp     esi, 0Ch
.text:004059CA                 jz      short loc_405967
.text:004059CC                 mov     eax, [esp+1ACh+var_160]
.text:004059D0                 test    eax, eax
.text:004059D2                 jz      short loc_4059DC
.text:004059D4                 mov     [esp+1ACh+var_160], 0FFFFFFFEh
.text:004059DC
.text:004059DC loc_4059DC:                             ; CODE XREF: sub_404E00+BD2↑j
.text:004059DC                 mov     ebp, [esp+1ACh+var_2C]
.text:004059E3                 add     ebx, 0Ch
.text:004059E6                 mov     [ebx], ebp
.text:004059E8                 mov     edx, [esp+1ACh+var_28]
.text:004059EF                 mov     ebp, [esp+1ACh+var_164]
.text:004059F3                 mov     [ebx+4], edx
.text:004059F6                 mov     ecx, [esp+1ACh+var_24]
.text:004059FD                 test    ebp, ebp
.text:004059FF                 mov     [ebx+8], ecx
.text:00405A02                 jz      loc_405960
.text:00405A08                 dec     [esp+1ACh+var_164]
.text:00405A0C                 jmp     loc_405960
.text:00405A11 ; ---------------------------------------------------------------------------
.text:00405A11
.text:00405A11 loc_405A11:                             ; CODE XREF: sub_404E00+BC5↑j
.text:00405A11                 lea     edx, [esi+1]
.text:00405A14                 cmp     edx, 1
.text:00405A17                 jbe     loc_4058A6
.text:00405A1D                 neg     esi
.text:00405A1F                 jmp     loc_404FCF
.text:00405A24 ; ---------------------------------------------------------------------------
.text:00405A24
.text:00405A24 loc_405A24:                             ; CODE XREF: sub_404E00+18A↑j
.text:00405A24                 mov     [esp+1ACh+var_160], 0
.text:00405A2C                 xor     edx, edx
.text:00405A2E                 jmp     loc_404FAA
.text:00405A33 ; ---------------------------------------------------------------------------
.text:00405A33
.text:00405A33 loc_405A33:                             ; CODE XREF: sub_404E00+17E↑j
.text:00405A33                 mov     ecx, [esp+1ACh+arg_0]
.text:00405A3A                 lea     edx, [esp+1ACh+var_2C]
.text:00405A41                 mov     [esp+1ACh+Size], edx
.text:00405A44                 mov     [esp+1ACh+Src], ecx
.text:00405A48                 call    sub_406420
.text:00405A4D                 mov     [esp+1ACh+var_160], eax
.text:00405A51                 jmp     loc_404F84
.text:00405A56 ; ---------------------------------------------------------------------------
.text:00405A56
.text:00405A56 loc_405A56:                             ; CODE XREF: sub_404E00+62↑j
.text:00405A56                                         ; sub_404E00+A0↑j
.text:00405A56                 mov     [esp+1ACh+Src], offset aParserStackOve ; "parser stack overflow"
.text:00405A5E                 mov     edi, [esp+1ACh+arg_0]
.text:00405A65                 mov     ebx, 2
.text:00405A6A                 mov     [esp+1ACh+Size], edi
.text:00405A6D                 call    sub_406810
.text:00405A72                 jmp     loc_405906
.text:00405A72 sub_404E00      endp
.text:00405A72
.text:00405A72 ; ---------------------------------------------------------------------------
.text:00405A77 byte_405A77     db 41h                  ; DATA XREF: .text:Str2↓o
.text:00405A78 dword_405A78    dd 2E41004Dh, 50002E4Dh, 2E50004Dh, 89002E4Dh, 27BC8DF6h
.text:00405A78                                         ; DATA XREF: .text:00405A9C↓o
.text:00405A78                                         ; .text:00405AA8↓o
.text:00405A78                 dd 0
.text:00405A90 ; char *const Str2
.text:00405A90 Str2            dd offset byte_405A77   ; DATA XREF: sub_4075C0:loc_407614↓r
.text:00405A90                                         ; sub_4075C0+59↓o
.text:00405A94                 dd 109h, 0
.text:00405A9C                 dd offset dword_405A78+2
.text:00405AA0                 dd 109h, 0
.text:00405AA8                 dd offset dword_405A78+7
.text:00405AAC                 dd 109h, 1, 405A82h, 109h, 1, 3 dup(0)
.text:00405ACC dword_405ACC    dd 545344h              ; DATA XREF: .text:off_405AD0↓o
.text:00405AD0 ; char *const off_405AD0
.text:00405AD0 off_405AD0      dd offset dword_405ACC  ; DATA XREF: sub_4075C0+15E↓r
.text:00405AD0                                         ; sub_4075C0+16F↓o
.text:00405AD4                 dd 103h, 0
.text:00405ADC aJanuary        db 'JANUARY',0          ; DATA XREF: .text:off_405B90↓o
.text:00405AE4 aFebruary       db 'FEBRUARY',0         ; DATA XREF: .text:00405B9C↓o
.text:00405AED aMarch          db 'MARCH',0            ; DATA XREF: .text:00405BA8↓o
.text:00405AF3 aApril          db 'APRIL',0            ; DATA XREF: .text:00405BB4↓o
.text:00405AF9 aMay            db 'MAY',0              ; DATA XREF: .text:00405BC0↓o
.text:00405AFD aJune           db 'JUNE',0             ; DATA XREF: .text:00405BCC↓o
.text:00405B02 aJuly           db 'JULY',0             ; DATA XREF: .text:00405BD8↓o
.text:00405B07 aAugust         db 'AUGUST',0           ; DATA XREF: .text:00405BE4↓o
.text:00405B0E aSeptember      db 'SEPTEMBER',0        ; DATA XREF: .text:00405BF0↓o
.text:00405B18 aSept           db 'SEPT',0             ; DATA XREF: .text:00405BFC↓o
.text:00405B1D aOctober        db 'OCTOBER',0          ; DATA XREF: .text:00405C08↓o
.text:00405B25 aNovember       db 'NOVEMBER',0         ; DATA XREF: .text:00405C14↓o
.text:00405B2E aDecember       db 'DECEMBER',0         ; DATA XREF: .text:00405C20↓o
.text:00405B37 aSunday         db 'SUNDAY',0           ; DATA XREF: .text:00405C2C↓o
.text:00405B3E aMonday         db 'MONDAY',0           ; DATA XREF: .text:00405C38↓o
.text:00405B45 aTuesday        db 'TUESDAY',0          ; DATA XREF: .text:00405C44↓o
.text:00405B4D aTues           db 'TUES',0             ; DATA XREF: .text:00405C50↓o
.text:00405B52 aWednesday      db 'WEDNESDAY',0        ; DATA XREF: .text:00405C5C↓o
.text:00405B5C aWednes         db 'WEDNES',0           ; DATA XREF: .text:00405C68↓o
.text:00405B63 aThursday       db 'THURSDAY',0         ; DATA XREF: .text:00405C74↓o
.text:00405B6C aThur           db 'THUR',0             ; DATA XREF: .text:00405C80↓o
.text:00405B71 aThurs          db 'THURS',0            ; DATA XREF: .text:00405C8C↓o
.text:00405B77 aFriday         db 'FRIDAY',0           ; DATA XREF: .text:00405C98↓o
.text:00405B7E aSaturday       db 'SATURDAY',0         ; DATA XREF: .text:00405CA4↓o
.text:00405B87                 align 10h
.text:00405B90 off_405B90      dd offset aJanuary      ; DATA XREF: sub_4075C0:loc_407670↓r
.text:00405B90                                         ; sub_4075C0+B6↓o
.text:00405B90                                         ; "JANUARY"
.text:00405B94                 dd 10Bh, 1
.text:00405B9C                 dd offset aFebruary     ; "FEBRUARY"
.text:00405BA0                 dd 10Bh, 2
.text:00405BA8                 dd offset aMarch        ; "MARCH"
.text:00405BAC                 dd 10Bh, 3
.text:00405BB4                 dd offset aApril        ; "APRIL"
.text:00405BB8                 dd 10Bh, 4
.text:00405BC0                 dd offset aMay          ; "MAY"
.text:00405BC4                 dd 10Bh, 5
.text:00405BCC                 dd offset aJune         ; "JUNE"
.text:00405BD0                 dd 10Bh, 6
.text:00405BD8                 dd offset aJuly         ; "JULY"
.text:00405BDC                 dd 10Bh, 7
.text:00405BE4                 dd offset aAugust       ; "AUGUST"
.text:00405BE8                 dd 10Bh, 8
.text:00405BF0                 dd offset aSeptember    ; "SEPTEMBER"
.text:00405BF4                 dd 10Bh, 9
.text:00405BFC                 dd offset aSept         ; "SEPT"
.text:00405C00                 dd 10Bh, 9
.text:00405C08                 dd offset aOctober      ; "OCTOBER"
.text:00405C0C                 dd 10Bh, 0Ah
.text:00405C14                 dd offset aNovember     ; "NOVEMBER"
.text:00405C18                 dd 10Bh, 0Bh
.text:00405C20                 dd offset aDecember     ; "DECEMBER"
.text:00405C24                 dd 10Bh, 0Ch
.text:00405C2C                 dd offset aSunday       ; "SUNDAY"
.text:00405C30                 dd 104h, 0
.text:00405C38                 dd offset aMonday       ; "MONDAY"
.text:00405C3C                 dd 104h, 1
.text:00405C44                 dd offset aTuesday      ; "TUESDAY"
.text:00405C48                 dd 104h, 2
.text:00405C50                 dd offset aTues         ; "TUES"
.text:00405C54                 dd 104h, 2
.text:00405C5C                 dd offset aWednesday    ; "WEDNESDAY"
.text:00405C60                 dd 104h, 3
.text:00405C68                 dd offset aWednes       ; "WEDNES"
.text:00405C6C                 dd 104h, 3
.text:00405C74                 dd offset aThursday     ; "THURSDAY"
.text:00405C78                 dd 104h, 4
.text:00405C80                 dd offset aThur         ; "THUR"
.text:00405C84                 dd 104h, 4
.text:00405C8C                 dd offset aThurs        ; "THURS"
.text:00405C90                 dd 104h, 4
.text:00405C98                 dd offset aFriday       ; "FRIDAY"
.text:00405C9C                 dd 104h, 5
.text:00405CA4                 dd offset aSaturday     ; "SATURDAY"
.text:00405CA8                 dd 104h, 6, 3 dup(0)
.text:00405CBC aYear           db 'YEAR',0             ; DATA XREF: .text:off_405D10↓o
.text:00405CC1 aMonth          db 'MONTH',0            ; DATA XREF: .text:00405D1C↓o
.text:00405CC7 aFortnight      db 'FORTNIGHT',0        ; DATA XREF: .text:00405D28↓o
.text:00405CD1 aWeek           db 'WEEK',0             ; DATA XREF: .text:00405D34↓o
.text:00405CD6 aDay            db 'DAY',0              ; DATA XREF: .text:00405D40↓o
.text:00405CDA aHour           db 'HOUR',0             ; DATA XREF: .text:00405D4C↓o
.text:00405CDF aMinute         db 'MINUTE',0           ; DATA XREF: .text:00405D58↓o
.text:00405CE6 aMin            db 'MIN',0              ; DATA XREF: .text:00405D64↓o
.text:00405CEA aSecond         db 'SECOND',0           ; DATA XREF: .text:00405D70↓o
.text:00405CF1 aSec            db 'SEC',0              ; DATA XREF: .text:00405D7C↓o
.text:00405CF5                 db 1Bh dup(90h)
.text:00405D10 ; char *const off_405D10
.text:00405D10 off_405D10      dd offset aYear         ; DATA XREF: sub_4075C0+176↓r
.text:00405D10                                         ; sub_4075C0+17B↓o ...
.text:00405D10                                         ; "YEAR"
.text:00405D14                 dd 10Fh, 1
.text:00405D1C                 dd offset aMonth        ; "MONTH"
.text:00405D20                 dd 10Ch, 1
.text:00405D28                 dd offset aFortnight    ; "FORTNIGHT"
.text:00405D2C                 dd 105h, 0Eh
.text:00405D34                 dd offset aWeek         ; "WEEK"
.text:00405D38                 dd 105h, 7
.text:00405D40                 dd offset aDay          ; "DAY"
.text:00405D44                 dd 105h, 1
.text:00405D4C                 dd offset aHour         ; "HOUR"
.text:00405D50                 dd 107h, 1
.text:00405D58                 dd offset aMinute       ; "MINUTE"
.text:00405D5C                 dd 10Ah, 1
.text:00405D64                 dd offset aMin          ; "MIN"
.text:00405D68                 dd 10Ah, 1
.text:00405D70                 dd offset aSecond       ; "SECOND"
.text:00405D74                 dd 10Eh, 1
.text:00405D7C                 dd offset aSec          ; "SEC"
.text:00405D80                 dd 10Eh, 1, 3 dup(0)
.text:00405D94 aTomorrow       db 'TOMORROW',0         ; DATA XREF: .text:off_405E10↓o
.text:00405D9D aYesterday      db 'YESTERDAY',0        ; DATA XREF: .text:00405E1C↓o
.text:00405DA7 aToday          db 'TODAY',0            ; DATA XREF: .text:00405E28↓o
.text:00405DAD aNow            db 'NOW',0              ; DATA XREF: .text:00405E34↓o
.text:00405DB1 aLast           db 'LAST',0             ; DATA XREF: .text:00405E40↓o
.text:00405DB6 aThis           db 'THIS',0             ; DATA XREF: .text:00405E4C↓o
.text:00405DBB aNext           db 'NEXT',0             ; DATA XREF: .text:00405E58↓o
.text:00405DC0 aFirst          db 'FIRST',0            ; DATA XREF: .text:00405E64↓o
.text:00405DC6 aThird          db 'THIRD',0            ; DATA XREF: .text:00405E70↓o
.text:00405DCC aFourth         db 'FOURTH',0           ; DATA XREF: .text:00405E7C↓o
.text:00405DD3 aFifth          db 'FIFTH',0            ; DATA XREF: .text:00405E88↓o
.text:00405DD9 aSixth          db 'SIXTH',0            ; DATA XREF: .text:00405E94↓o
.text:00405DDF aSeventh        db 'SEVENTH',0          ; DATA XREF: .text:00405EA0↓o
.text:00405DE7 aEighth         db 'EIGHTH',0           ; DATA XREF: .text:00405EAC↓o
.text:00405DEE aNinth          db 'NINTH',0            ; DATA XREF: .text:00405EB8↓o
.text:00405DF4 aTenth          db 'TENTH',0            ; DATA XREF: .text:00405EC4↓o
.text:00405DFA aEleventh       db 'ELEVENTH',0         ; DATA XREF: .text:00405ED0↓o
.text:00405E03 aTwelfth        db 'TWELFTH',0          ; DATA XREF: .text:00405EDC↓o
.text:00405E0B aAgo            db 'AGO',0              ; DATA XREF: .text:00405EE8↓o
.text:00405E0F                 align 10h
.text:00405E10 ; char *const off_405E10
.text:00405E10 off_405E10      dd offset aTomorrow     ; DATA XREF: sub_4075C0:loc_40776A↓r
.text:00405E10                                         ; sub_4075C0+1AF↓o
.text:00405E10                                         ; "TOMORROW"
.text:00405E14                 dd 105h, 1
.text:00405E1C                 dd offset aYesterday    ; "YESTERDAY"
.text:00405E20                 dd 105h, 0FFFFFFFFh
.text:00405E28                 dd offset aToday        ; "TODAY"
.text:00405E2C                 dd 105h, 0
.text:00405E34                 dd offset aNow          ; "NOW"
.text:00405E38                 dd 105h, 0
.text:00405E40                 dd offset aLast         ; "LAST"
.text:00405E44                 dd 10Dh, 0FFFFFFFFh
.text:00405E4C                 dd offset aThis         ; "THIS"
.text:00405E50                 dd 10Dh, 0
.text:00405E58                 dd offset aNext         ; "NEXT"
.text:00405E5C                 dd 10Dh, 1
.text:00405E64                 dd offset aFirst        ; "FIRST"
.text:00405E68                 dd 10Dh, 1
.text:00405E70                 dd offset aThird        ; "THIRD"
.text:00405E74                 dd 10Dh, 3
.text:00405E7C                 dd offset aFourth       ; "FOURTH"
.text:00405E80                 dd 10Dh, 4
.text:00405E88                 dd offset aFifth        ; "FIFTH"
.text:00405E8C                 dd 10Dh, 5
.text:00405E94                 dd offset aSixth        ; "SIXTH"
.text:00405E98                 dd 10Dh, 6
.text:00405EA0                 dd offset aSeventh      ; "SEVENTH"
.text:00405EA4                 dd 10Dh, 7
.text:00405EAC                 dd offset aEighth       ; "EIGHTH"
.text:00405EB0                 dd 10Dh, 8
.text:00405EB8                 dd offset aNinth        ; "NINTH"
.text:00405EBC                 dd 10Dh, 9
.text:00405EC4                 dd offset aTenth        ; "TENTH"
.text:00405EC8                 dd 10Dh, 0Ah
.text:00405ED0                 dd offset aEleventh     ; "ELEVENTH"
.text:00405ED4                 dd 10Dh, 0Bh
.text:00405EDC                 dd offset aTwelfth      ; "TWELFTH"
.text:00405EE0                 dd 10Dh, 0Ch
.text:00405EE8                 dd offset aAgo          ; "AGO"
.text:00405EEC                 dd 102h, 1, 3 dup(0)
.text:00405F00 dword_405F00    dd 544D47h, 55005455h, 57004354h, 57005445h, 545345h, 545342h
.text:00405F00                                         ; DATA XREF: .text:off_405FF0↓o
.text:00405F00                                         ; .text:00405FFC↓o ...
.text:00405F00                 dd 545241h, 545242h, 54535242h, 54534E00h, 54444E00h, 54534100h
.text:00405F00                 dd 54444100h, 544C4300h, 534C4300h, 53450054h, 44450054h
.text:00405F00                 dd 53430054h, 44430054h, 534D0054h, 444D0054h, 53500054h
.text:00405F00                 dd 44500054h, 4B410054h, 41005453h, 54444Bh, 545348h, 54534148h
.text:00405F00                 dd 44414800h, 53530054h, 41570054h, 2 dup(45430054h), 4D005453h
.text:00405F00                 dd 4D005445h, 4D005A45h, 545345h, 5A53454Dh, 54454500h
.text:00405F00                 dd 53454500h, 41430054h, 41530054h, 45005453h, 4D005441h
.text:00405F00                 dd 4D004B53h, 49004453h, 53005453h, 4B005447h, 4A005453h
.text:00405F00                 dd 47005453h, 4E005453h, 54535Ah, 54445A4Eh, 90909000h
.text:00405F00                 dd 6 dup(90909090h)
.text:00405FF0 ; char *const off_405FF0
.text:00405FF0 off_405FF0      dd offset dword_405F00  ; DATA XREF: sub_4075C0:loc_4076DB↓r
.text:00405FF0                                         ; sub_4075C0+120↓o ...
.text:00405FF4                 dd 110h, 0
.text:00405FFC                 dd offset dword_405F00+4
.text:00406000                 dd 110h, 0
.text:00406008                 dd offset dword_405F00+7
.text:0040600C                 dd 110h, 0
.text:00406014                 dd offset dword_405F00+0Bh
.text:00406018                 dd 110h, 0
.text:00406020                 dd offset dword_405F00+0Fh
.text:00406024                 dd 106h, 0
.text:0040602C                 dd offset dword_405F00+14h
.text:00406030                 dd 106h, 0
.text:00406038 ; ---------------------------------------------------------------------------
.text:00406038                 sbb     [edi+40h], bl
.text:0040603B                 add     [eax], dl
.text:0040603D                 add     [eax], eax
.text:0040603F                 add     [edi+edi*8-1], cl
.text:00406043                 call    fword ptr [edi+ebx*2]
.text:00406046                 inc     eax
.text:00406047                 add     [eax], dl
.text:00406049                 add     [eax], eax
.text:0040604B                 add     [edi+edi*8-1], cl
.text:0040604F                 jmp     dword ptr [eax]
.text:00406051 ; ---------------------------------------------------------------------------
.text:00406051                 pop     edi
.text:00406052                 inc     eax
.text:00406053                 add     [esi], al
.text:00406055                 add     [eax], eax
.text:00406057                 add     [edi+edi*8-1], cl
.text:0040605B                 jmp     dword ptr ds:1000405Fh
.text:0040605B ; ---------------------------------------------------------------------------
.text:00406061                 db 1, 2 dup(0)
.text:00406064                 dd 0FFFFFF2Eh, 405F29h, 106h, 0FFFFFF2Eh, 405F2Dh, 110h
.text:00406064                 dd 0FFFFFF10h, 405F31h, 106h, 0FFFFFF10h, 405F35h, 110h
.text:00406064                 dd 0FFFFFF10h, 405F39h, 106h, 0FFFFFF10h, 405F3Eh, 110h
.text:00406064                 dd 0FFFFFED4h, 405F42h, 106h, 0FFFFFED4h, 405F46h, 110h
.text:00406064                 dd 0FFFFFE98h, 405F4Ah, 106h, 0FFFFFE98h, 405F4Eh, 110h
.text:00406064                 dd 0FFFFFE5Ch, 405F52h, 106h, 0FFFFFE5Ch, 405F56h, 110h
.text:00406064                 dd 0FFFFFE20h, 405F5Ah, 106h, 0FFFFFE20h, 405F5Eh, 110h
.text:00406064                 dd 0FFFFFDE4h, 405F63h, 106h, 0FFFFFDE4h, 405F68h, 110h
.text:00406064                 dd 0FFFFFDA8h, 405F6Ch, 110h, 0FFFFFDA8h, 405F71h, 106h
.text:00406064                 dd 0FFFFFDA8h, 405F76h, 110h, 0FFFFFD30h, 405F7Ah, 110h
.text:00406064                 dd 3Ch, 405F7Eh, 110h, 3Ch, 405F82h, 106h, 3Ch, 405F87h
.text:00406064                 dd 110h, 3Ch, 405F8Bh, 110h, 3Ch, 405F8Fh, 106h, 3Ch, 405F94h
.text:00406064                 dd 106h, 3Ch, 405F99h, 110h, 78h, 405F9Dh, 106h, 78h, 405FA2h
.text:00406064                 dd 110h, 78h, 405FA6h, 110h, 78h, 405FABh, 110h, 0B4h
.text:00406064                 dd 405FAFh, 110h, 0B4h, 405FB3h, 106h, 0B4h, 405FB7h, 110h
.text:00406064                 dd 14Ah, 405FBBh, 110h, 1E0h, 405FBFh, 110h, 21Ch, 405FC3h
.text:00406064                 dd 110h, 21Ch, 405FC7h, 110h, 258h, 405FCBh, 110h, 2D0h
.text:00406064                 dd 405FD0h, 106h, 2D0h, 3 dup(0)
.text:00406254 aAbcdefghiklmno:                        ; DATA XREF: .text:off_406290↓o
.text:00406254                 text "UTF-16LE", 'ABCDEFGHIKLMNOPQRSTUVWXYZ'
.text:00406286                 align 10h
.text:00406290 off_406290      dd offset aAbcdefghiklmno
.text:00406290                                         ; DATA XREF: sub_4075C0:loc_407821↓r
.text:00406290                                         ; sub_4075C0+266↓o
.text:00406290                                         ; "ABCDEFGHIKLMNOPQRSTUVWXYZ"
.text:00406294                 dd 110h, 0FFFFFFC4h, 406256h, 110h, 0FFFFFF88h, 406258h
.text:00406294                 dd 110h, 0FFFFFF4Ch, 40625Ah, 110h, 0FFFFFF10h, 40625Ch
.text:00406294                 dd 110h, 0FFFFFED4h, 40625Eh, 110h, 0FFFFFE98h, 406260h
.text:00406294                 dd 110h, 0FFFFFE5Ch, 406262h, 110h, 0FFFFFE20h, 406264h
.text:00406294                 dd 110h, 0FFFFFDE4h, 406266h, 110h, 0FFFFFDA8h, 406268h
.text:00406294                 dd 110h, 0FFFFFD6Ch, 40626Ah, 110h, 0FFFFFD30h, 40626Ch
.text:00406294                 dd 110h, 3Ch, 40626Eh, 110h, 78h, 406270h, 110h, 0B4h
.text:00406294                 dd 406272h, 110h, 0F0h, 406274h, 110h, 12Ch, 406276h, 110h
.text:00406294                 dd 168h, 406278h, 110h, 1A4h, 40627Ah, 110h, 1E0h, 40627Ch
.text:00406294                 dd 110h, 21Ch, 40627Eh, 110h, 258h, 406280h, 110h, 294h
.text:00406294                 dd 406282h, 110h, 2D0h, 406284h, 110h, 4 dup(0)
.text:004063C8                 align 10h
.text:004063D0
.text:004063D0 ; =============== S U B R O U T I N E =======================================
.text:004063D0
.text:004063D0
.text:004063D0 sub_4063D0      proc near               ; CODE XREF: sub_404E00+494↑p
.text:004063D0                                         ; sub_404E00+51D↑p ...
.text:004063D0
.text:004063D0 arg_0           = byte ptr  4
.text:004063D0 arg_4           = dword ptr  8
.text:004063D0 arg_C           = dword ptr  10h
.text:004063D0
.text:004063D0                 mov     ecx, [esp+arg_C]
.text:004063D4                 test    ecx, ecx
.text:004063D6                 js      short loc_4063F3
.text:004063D8                 mov     edx, [esp+arg_4]
.text:004063DC                 mov     eax, edx
.text:004063DE                 shl     eax, 4
.text:004063E1                 sub     eax, edx
.text:004063E3                 shl     eax, 2
.text:004063E6                 cmp     [esp+arg_0], 0
.text:004063EB                 jz      short loc_4063F0
.text:004063ED                 sub     eax, ecx
.text:004063EF                 retn
.text:004063F0 ; ---------------------------------------------------------------------------
.text:004063F0
.text:004063F0 loc_4063F0:                             ; CODE XREF: sub_4063D0+1B↑j
.text:004063F0                 add     eax, ecx
.text:004063F2                 retn
.text:004063F3 ; ---------------------------------------------------------------------------
.text:004063F3
.text:004063F3 loc_4063F3:                             ; CODE XREF: sub_4063D0+6↑j
.text:004063F3                 mov     ecx, [esp+arg_4]
.text:004063F7                 mov     edx, 51EB851Fh
.text:004063FC                 mov     eax, ecx
.text:004063FE                 imul    edx
.text:00406400                 mov     eax, ecx
.text:00406402                 sar     eax, 1Fh
.text:00406405                 sar     edx, 5
.text:00406408                 sub     edx, eax
.text:0040640A                 mov     eax, edx
.text:0040640C                 shl     eax, 4
.text:0040640F                 sub     eax, edx
.text:00406411                 lea     edx, [edx+edx*4]
.text:00406414                 lea     edx, [edx+edx*4]
.text:00406417                 shl     edx, 2
.text:0040641A                 sub     ecx, edx
.text:0040641C                 lea     eax, [ecx+eax*4]
.text:0040641F                 retn
.text:0040641F sub_4063D0      endp
.text:0040641F
.text:00406420
.text:00406420 ; =============== S U B R O U T I N E =======================================
.text:00406420
.text:00406420
.text:00406420 sub_406420      proc near               ; CODE XREF: sub_404E00+C48↑p
.text:00406420
.text:00406420 C               = dword ptr -5Ch
.text:00406420 Type            = dword ptr -58h
.text:00406420 var_45          = byte ptr -45h
.text:00406420 var_44          = dword ptr -44h
.text:00406420 var_40          = dword ptr -40h
.text:00406420 Str             = byte ptr -3Ch
.text:00406420 var_29          = byte ptr -29h
.text:00406420 arg_0           = dword ptr  4
.text:00406420 arg_4           = dword ptr  8
.text:00406420
.text:00406420                 push    ebp
.text:00406421                 push    edi
.text:00406422                 push    esi
.text:00406423                 push    ebx
.text:00406424                 sub     esp, 4Ch
.text:00406427                 mov     edi, [esp+5Ch+arg_4]
.text:0040642B                 nop
.text:0040642C                 lea     esi, [esi+0]
.text:00406430
.text:00406430 loc_406430:                             ; CODE XREF: sub_406420+AC↓j
.text:00406430                                         ; sub_406420+1CA↓j ...
.text:00406430                 mov     edx, [edi]
.text:00406432                 mov     ecx, ds:__mb_cur_max
.text:00406438                 movzx   ebx, byte ptr [edx]
.text:0040643B                 cmp     dword ptr [ecx], 1
.text:0040643E                 movzx   edx, bl
.text:00406441                 jz      loc_4067F7
.text:00406447                 mov     [esp+5Ch+Type], 8 ; Type
.text:0040644F                 mov     [esp+5Ch+C], edx ; C
.text:00406452                 call    _isctype
.text:00406457
.text:00406457 loc_406457:                             ; CODE XREF: sub_406420+3E6↓j
.text:00406457                 test    eax, eax
.text:00406459                 jnz     loc_4067F0
.text:0040645F                 movzx   edx, bl
.text:00406462                 lea     ebp, [edx-30h]
.text:00406465                 cmp     ebp, 9
.text:00406468                 jbe     loc_406590
.text:0040646E                 cmp     bl, 2Dh ; '-'
.text:00406471                 jz      loc_4067E2
.text:00406477                 cmp     bl, 2Bh ; '+'
.text:0040647A                 jz      loc_406590
.text:00406480                 mov     esi, ds:__mb_cur_max
.text:00406486                 cmp     dword ptr [esi], 1
.text:00406489                 jz      loc_406572
.text:0040648F                 mov     [esp+5Ch+Type], 103h ; Type
.text:00406497                 mov     [esp+5Ch+C], edx ; C
.text:0040649A                 call    _isctype
.text:0040649F
.text:0040649F loc_40649F:                             ; CODE XREF: sub_406420+164↓j
.text:0040649F                 test    eax, eax
.text:004064A1                 jnz     short loc_4064EE
.text:004064A3                 xor     edx, edx
.text:004064A5                 cmp     bl, 28h ; '('
.text:004064A8                 jnz     short loc_4064E1
.text:004064AA                 lea     esi, [esi+0]
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: sub_406420+AA↓j
.text:004064B0                 mov     ecx, [edi]
.text:004064B2                 xor     ebp, ebp
.text:004064B4                 movzx   ebx, byte ptr [ecx]
.text:004064B7                 inc     ecx
.text:004064B8                 mov     [edi], ecx
.text:004064BA                 test    bl, bl
.text:004064BC                 jz      short loc_4064D7
.text:004064BE                 cmp     bl, 28h ; '('
.text:004064C1                 jz      short loc_4064D4
.text:004064C3                 cmp     bl, 29h ; ')'
.text:004064C6                 jz      short loc_4064D1
.text:004064C8
.text:004064C8 loc_4064C8:                             ; CODE XREF: sub_406420+B2↓j
.text:004064C8                                         ; sub_406420+B5↓j
.text:004064C8                 test    edx, edx
.text:004064CA                 jnz     short loc_4064B0
.text:004064CC                 jmp     loc_406430
.text:004064D1 ; ---------------------------------------------------------------------------
.text:004064D1
.text:004064D1 loc_4064D1:                             ; CODE XREF: sub_406420+A6↑j
.text:004064D1                 dec     edx
.text:004064D2                 jmp     short loc_4064C8
.text:004064D4 ; ---------------------------------------------------------------------------
.text:004064D4
.text:004064D4 loc_4064D4:                             ; CODE XREF: sub_406420+A1↑j
.text:004064D4                 inc     edx
.text:004064D5                 jmp     short loc_4064C8
.text:004064D7 ; ---------------------------------------------------------------------------
.text:004064D7
.text:004064D7 loc_4064D7:                             ; CODE XREF: sub_406420+9C↑j
.text:004064D7                                         ; sub_406420+CC↓j ...
.text:004064D7                 add     esp, 4Ch
.text:004064DA                 mov     eax, ebp
.text:004064DC                 pop     ebx
.text:004064DD                 pop     esi
.text:004064DE                 pop     edi
.text:004064DF                 pop     ebp
.text:004064E0                 retn
.text:004064E1 ; ---------------------------------------------------------------------------
.text:004064E1
.text:004064E1 loc_4064E1:                             ; CODE XREF: sub_406420+88↑j
.text:004064E1                 mov     ebp, [edi]
.text:004064E3                 movsx   ebx, byte ptr [ebp+0]
.text:004064E7                 inc     ebp
.text:004064E8                 mov     [edi], ebp
.text:004064EA                 mov     ebp, ebx
.text:004064EC                 jmp     short loc_4064D7
.text:004064EE ; ---------------------------------------------------------------------------
.text:004064EE
.text:004064EE loc_4064EE:                             ; CODE XREF: sub_406420+81↑j
.text:004064EE                 lea     esi, [esp+5Ch+Str]
.text:004064F2                 lea     ebp, [esp+5Ch+var_29]
.text:004064F6
.text:004064F6 loc_4064F6:                             ; CODE XREF: sub_406420+108↓j
.text:004064F6                                         ; sub_406420+10D↓j
.text:004064F6                 cmp     esi, ebp
.text:004064F8                 jnb     short loc_4064FD
.text:004064FA                 mov     [esi], bl
.text:004064FC                 inc     esi
.text:004064FD
.text:004064FD loc_4064FD:                             ; CODE XREF: sub_406420+D8↑j
.text:004064FD                 mov     ecx, [edi]
.text:004064FF                 lea     ebx, [ecx+1]
.text:00406502                 mov     [edi], ebx
.text:00406504                 movzx   ebx, byte ptr [ecx+1]
.text:00406508                 mov     ecx, ds:__mb_cur_max
.text:0040650E                 movzx   edx, bl
.text:00406511                 cmp     dword ptr [ecx], 1
.text:00406514                 jz      short loc_406560
.text:00406516                 mov     [esp+5Ch+Type], 103h ; Type
.text:0040651E                 mov     [esp+5Ch+C], edx ; C
.text:00406521                 call    _isctype
.text:00406526
.text:00406526 loc_406526:                             ; CODE XREF: sub_406420+150↓j
.text:00406526                 test    eax, eax
.text:00406528                 jnz     short loc_4064F6
.text:0040652A                 cmp     bl, 2Eh ; '.'
.text:0040652D                 jz      short loc_4064F6
.text:0040652F                 mov     byte ptr [esi], 0
.text:00406532                 lea     edx, [esp+5Ch+Str]
.text:00406536                 mov     ebp, 3Fh ; '?'
.text:0040653B                 mov     [esp+5Ch+Type], edx ; Str
.text:0040653F                 mov     [esp+5Ch+C], edi ; int
.text:00406542                 call    sub_4075C0
.text:00406547                 test    eax, eax
.text:00406549                 jz      short loc_4064D7
.text:0040654B                 mov     esi, [eax+8]
.text:0040654E                 mov     edi, [esp+5Ch+arg_0]
.text:00406552                 mov     [edi], esi
.text:00406554                 mov     ebp, [eax+4]
.text:00406557                 jmp     loc_4064D7
.text:00406557 ; ---------------------------------------------------------------------------
.text:0040655C                 align 10h
.text:00406560
.text:00406560 loc_406560:                             ; CODE XREF: sub_406420+F4↑j
.text:00406560                 mov     eax, ds:_pctype
.text:00406565                 mov     ecx, [eax]
.text:00406567                 movzx   eax, word ptr [ecx+edx*2]
.text:0040656B                 and     eax, 103h
.text:00406570                 jmp     short loc_406526
.text:00406572 ; ---------------------------------------------------------------------------
.text:00406572
.text:00406572 loc_406572:                             ; CODE XREF: sub_406420+69↑j
.text:00406572                 mov     ebp, ds:_pctype
.text:00406578                 mov     ecx, [ebp+0]
.text:0040657B                 movzx   eax, word ptr [ecx+edx*2]
.text:0040657F                 and     eax, 103h
.text:00406584                 jmp     loc_40649F
.text:00406584 ; ---------------------------------------------------------------------------
.text:00406589                 align 10h
.text:00406590
.text:00406590 loc_406590:                             ; CODE XREF: sub_406420+48↑j
.text:00406590                                         ; sub_406420+5A↑j
.text:00406590                 cmp     bl, 2Dh ; '-'
.text:00406593                 jz      loc_4067E2
.text:00406599                 cmp     bl, 2Bh ; '+'
.text:0040659C                 jnz     loc_4067D5
.text:004065A2                 mov     [esp+5Ch+var_40], 1
.text:004065AA                 lea     esi, [esi+0]
.text:004065B0
.text:004065B0 loc_4065B0:                             ; CODE XREF: sub_406420+1BF↓j
.text:004065B0                                         ; sub_406420+3CA↓j
.text:004065B0                 mov     esi, [edi]
.text:004065B2                 lea     eax, [esi+1]
.text:004065B5                 mov     [edi], eax
.text:004065B7                 mov     ecx, ds:__mb_cur_max
.text:004065BD                 movzx   ebx, byte ptr [esi+1]
.text:004065C1                 cmp     dword ptr [ecx], 1
.text:004065C4                 movzx   edx, bl
.text:004065C7                 jz      loc_4067C0
.text:004065CD                 mov     [esp+5Ch+Type], 8 ; Type
.text:004065D5                 mov     [esp+5Ch+C], edx ; C
.text:004065D8                 call    _isctype
.text:004065DD
.text:004065DD loc_4065DD:                             ; CODE XREF: sub_406420+3B0↓j
.text:004065DD                 test    eax, eax
.text:004065DF                 jnz     short loc_4065B0
.text:004065E1                 movzx   edx, bl
.text:004065E4                 sub     edx, 30h ; '0'
.text:004065E7                 cmp     edx, 9
.text:004065EA                 ja      loc_406430
.text:004065F0
.text:004065F0 loc_4065F0:                             ; CODE XREF: sub_406420+3BD↓j
.text:004065F0                 mov     esi, [edi]
.text:004065F2                 xor     edx, edx
.text:004065F4                 lea     esi, [esi+0]
.text:004065FA                 lea     edi, [edi+0]
.text:00406600
.text:00406600 loc_406600:                             ; CODE XREF: sub_406420+216↓j
.text:00406600                 movzx   ebp, bl
.text:00406603                 lea     ecx, [ebp+edx-30h]
.text:00406607                 cmp     ecx, edx
.text:00406609                 mov     ebp, 3Fh ; '?'
.text:0040660E                 jb      loc_4064D7
.text:00406614                 inc     esi
.text:00406615                 movzx   ebx, byte ptr [esi]
.text:00406618                 movzx   edx, bl
.text:0040661B                 sub     edx, 30h ; '0'
.text:0040661E                 cmp     edx, 9
.text:00406621                 ja      short loc_406638
.text:00406623                 cmp     ecx, 19999999h
.text:00406629                 ja      loc_4064D7
.text:0040662F                 lea     ebp, [ecx+ecx*4]
.text:00406632                 lea     edx, [ebp+ebp+0]
.text:00406636                 jmp     short loc_406600
.text:00406638 ; ---------------------------------------------------------------------------
.text:00406638
.text:00406638 loc_406638:                             ; CODE XREF: sub_406420+201↑j
.text:00406638                 cmp     bl, 2Eh ; '.'
.text:0040663B                 jz      short loc_4066A4
.text:0040663D                 cmp     bl, 2Ch ; ','
.text:00406640                 jz      short loc_4066A4
.text:00406642
.text:00406642 loc_406642:                             ; CODE XREF: sub_406420+28E↓j
.text:00406642                 mov     ebx, [esp+5Ch+var_40]
.text:00406646                 mov     edx, [esp+5Ch+arg_0]
.text:0040664A                 shr     ebx, 1Fh
.text:0040664D                 mov     [edx], bl
.text:0040664F                 mov     ebp, [esp+5Ch+var_40]
.text:00406653                 test    ebp, ebp
.text:00406655                 js      short loc_40668F
.text:00406657                 mov     edx, [esp+5Ch+arg_0]
.text:0040665B                 test    ecx, ecx
.text:0040665D                 mov     ebp, 3Fh ; '?'
.text:00406662                 mov     [edx+4], ecx
.text:00406665                 js      loc_4064D7
.text:0040666B
.text:0040666B loc_40666B:                             ; CODE XREF: sub_406420+27D↓j
.text:0040666B                 mov     eax, [edi]
.text:0040666D                 mov     ebx, esi
.text:0040666F                 xor     ecx, ecx
.text:00406671                 mov     ebp, [esp+5Ch+arg_0]
.text:00406675                 sub     ebx, eax
.text:00406677                 mov     [ebp+8], ebx
.text:0040667A                 cmp     [esp+5Ch+var_40], 0
.text:0040667F                 mov     [edi], esi
.text:00406681                 setz    cl
.text:00406684                 lea     ebp, [ecx+111h]
.text:0040668A                 jmp     loc_4064D7
.text:0040668F ; ---------------------------------------------------------------------------
.text:0040668F
.text:0040668F loc_40668F:                             ; CODE XREF: sub_406420+235↑j
.text:0040668F                 mov     ebx, ecx
.text:00406691                 mov     ebp, 3Fh ; '?'
.text:00406696                 neg     ebx
.text:00406698                 mov     [edx+4], ebx
.text:0040669B                 test    ebx, ebx
.text:0040669D                 jle     short loc_40666B
.text:0040669F                 jmp     loc_4064D7
.text:004066A4 ; ---------------------------------------------------------------------------
.text:004066A4
.text:004066A4 loc_4066A4:                             ; CODE XREF: sub_406420+21B↑j
.text:004066A4                                         ; sub_406420+220↑j
.text:004066A4                 movsx   ebx, byte ptr [esi+1]
.text:004066A8                 sub     ebx, 30h ; '0'
.text:004066AB                 cmp     ebx, 9
.text:004066AE                 ja      short loc_406642
.text:004066B0                 mov     edx, [esp+5Ch+var_40]
.text:004066B4                 test    edx, edx
.text:004066B6                 js      loc_4067A5
.text:004066BC                 mov     [esp+5Ch+var_44], ecx
.text:004066C0                 test    ecx, ecx
.text:004066C2                 mov     ebp, 3Fh ; '?'
.text:004066C7                 js      loc_4064D7
.text:004066CD
.text:004066CD loc_4066CD:                             ; CODE XREF: sub_406420+392↓j
.text:004066CD                 inc     esi
.text:004066CE                 movsx   ebp, byte ptr [esi]
.text:004066D1                 inc     esi
.text:004066D2                 movzx   ecx, byte ptr [esi]
.text:004066D5                 lea     ebx, [ebp-30h]
.text:004066D8                 mov     [esp+5Ch+var_45], cl
.text:004066DC                 mov     ecx, 7
.text:004066E1
.text:004066E1 loc_4066E1:                             ; CODE XREF: sub_406420+2E1↓j
.text:004066E1                 lea     edx, [ebx+ebx*4]
.text:004066E4                 lea     ebx, [edx+edx]
.text:004066E7                 movsx   edx, [esp+5Ch+var_45]
.text:004066EC                 lea     ebp, [edx-30h]
.text:004066EF                 cmp     ebp, 9
.text:004066F2                 ja      short loc_406700
.text:004066F4                 inc     esi
.text:004066F5                 lea     ebx, [edx+ebx-30h]
.text:004066F9                 movzx   eax, byte ptr [esi]
.text:004066FC                 mov     [esp+5Ch+var_45], al
.text:00406700
.text:00406700 loc_406700:                             ; CODE XREF: sub_406420+2D2↑j
.text:00406700                 dec     ecx
.text:00406701                 jns     short loc_4066E1
.text:00406703                 mov     ecx, [esp+5Ch+var_40]
.text:00406707                 test    ecx, ecx
.text:00406709                 js      short loc_406770
.text:0040670B
.text:0040670B loc_40670B:                             ; CODE XREF: sub_406420+35E↓j
.text:0040670B                                         ; sub_406420+37A↓j ...
.text:0040670B                 movsx   edx, [esp+5Ch+var_45]
.text:00406710                 sub     edx, 30h ; '0'
.text:00406713                 cmp     edx, 9
.text:00406716                 ja      short loc_406724
.text:00406718
.text:00406718 loc_406718:                             ; CODE XREF: sub_406420+302↓j
.text:00406718                 inc     esi
.text:00406719                 movsx   ecx, byte ptr [esi]
.text:0040671C                 sub     ecx, 30h ; '0'
.text:0040671F                 cmp     ecx, 9
.text:00406722                 jbe     short loc_406718
.text:00406724
.text:00406724 loc_406724:                             ; CODE XREF: sub_406420+2F6↑j
.text:00406724                 mov     ebp, [esp+5Ch+var_40]
.text:00406728                 test    ebp, ebp
.text:0040672A                 js      short loc_406750
.text:0040672C
.text:0040672C loc_40672C:                             ; CODE XREF: sub_406420+332↓j
.text:0040672C                                         ; sub_406420+343↓j
.text:0040672C                 mov     eax, [esp+5Ch+var_44]
.text:00406730                 mov     ecx, [esp+5Ch+arg_0]
.text:00406734                 mov     [ecx+4], ebx
.text:00406737                 xor     ebx, ebx
.text:00406739                 mov     [ecx], eax
.text:0040673B                 cmp     [esp+5Ch+var_40], 0
.text:00406740                 mov     [edi], esi
.text:00406742                 setz    bl
.text:00406745                 lea     ebp, [ebx+113h]
.text:0040674B                 jmp     loc_4064D7
.text:00406750 ; ---------------------------------------------------------------------------
.text:00406750
.text:00406750 loc_406750:                             ; CODE XREF: sub_406420+30A↑j
.text:00406750                 test    ebx, ebx
.text:00406752                 jz      short loc_40672C
.text:00406754                 dec     [esp+5Ch+var_44]
.text:00406758                 jns     short loc_406765
.text:0040675A                 mov     edx, 3B9ACA00h
.text:0040675F                 sub     edx, ebx
.text:00406761                 mov     ebx, edx
.text:00406763                 jmp     short loc_40672C
.text:00406765 ; ---------------------------------------------------------------------------
.text:00406765
.text:00406765 loc_406765:                             ; CODE XREF: sub_406420+338↑j
.text:00406765                 mov     ebp, 3Fh ; '?'
.text:0040676A                 jmp     loc_4064D7
.text:0040676A ; ---------------------------------------------------------------------------
.text:0040676F                 align 10h
.text:00406770
.text:00406770 loc_406770:                             ; CODE XREF: sub_406420+2E9↑j
.text:00406770                 movzx   edx, [esp+5Ch+var_45]
.text:00406775                 movsx   ebp, dl
.text:00406778                 sub     ebp, 30h ; '0'
.text:0040677B                 cmp     ebp, 9
.text:0040677E                 ja      short loc_40670B
.text:00406780
.text:00406780 loc_406780:                             ; CODE XREF: sub_406420+378↓j
.text:00406780                 cmp     dl, 30h ; '0'
.text:00406783                 jnz     short loc_40679F
.text:00406785                 inc     esi
.text:00406786                 movzx   eax, byte ptr [esi]
.text:00406789                 movsx   ebp, al
.text:0040678C                 mov     dl, al
.text:0040678E                 mov     [esp+5Ch+var_45], al
.text:00406792                 sub     ebp, 30h ; '0'
.text:00406795                 cmp     ebp, 9
.text:00406798                 jbe     short loc_406780
.text:0040679A                 jmp     loc_40670B
.text:0040679F ; ---------------------------------------------------------------------------
.text:0040679F
.text:0040679F loc_40679F:                             ; CODE XREF: sub_406420+363↑j
.text:0040679F                 inc     ebx
.text:004067A0                 jmp     loc_40670B
.text:004067A5 ; ---------------------------------------------------------------------------
.text:004067A5
.text:004067A5 loc_4067A5:                             ; CODE XREF: sub_406420+296↑j
.text:004067A5                 neg     ecx
.text:004067A7                 mov     ebp, 3Fh ; '?'
.text:004067AC                 test    ecx, ecx
.text:004067AE                 mov     [esp+5Ch+var_44], ecx
.text:004067B2                 jle     loc_4066CD
.text:004067B8                 jmp     loc_4064D7
.text:004067B8 ; ---------------------------------------------------------------------------
.text:004067BD                 align 10h
.text:004067C0
.text:004067C0 loc_4067C0:                             ; CODE XREF: sub_406420+1A7↑j
.text:004067C0                 mov     ecx, ds:_pctype
.text:004067C6                 mov     ebp, [ecx]
.text:004067C8                 movzx   eax, word ptr [ebp+edx*2+0]
.text:004067CD                 and     eax, 8
.text:004067D0                 jmp     loc_4065DD
.text:004067D5 ; ---------------------------------------------------------------------------
.text:004067D5
.text:004067D5 loc_4067D5:                             ; CODE XREF: sub_406420+17C↑j
.text:004067D5                 mov     [esp+5Ch+var_40], 0
.text:004067DD                 jmp     loc_4065F0
.text:004067E2 ; ---------------------------------------------------------------------------
.text:004067E2
.text:004067E2 loc_4067E2:                             ; CODE XREF: sub_406420+51↑j
.text:004067E2                                         ; sub_406420+173↑j
.text:004067E2                 mov     [esp+5Ch+var_40], 0FFFFFFFFh
.text:004067EA                 jmp     loc_4065B0
.text:004067EA ; ---------------------------------------------------------------------------
.text:004067EF                 align 10h
.text:004067F0
.text:004067F0 loc_4067F0:                             ; CODE XREF: sub_406420+39↑j
.text:004067F0                 inc     dword ptr [edi]
.text:004067F2                 jmp     loc_406430
.text:004067F7 ; ---------------------------------------------------------------------------
.text:004067F7
.text:004067F7 loc_4067F7:                             ; CODE XREF: sub_406420+21↑j
.text:004067F7                 mov     esi, ds:_pctype
.text:004067FD                 mov     ecx, [esi]
.text:004067FF                 movzx   eax, word ptr [ecx+edx*2]
.text:00406803                 and     eax, 8
.text:00406806                 jmp     loc_406457
.text:00406806 sub_406420      endp
.text:00406806
.text:00406806 ; ---------------------------------------------------------------------------
.text:0040680B                 align 10h
.text:00406810
.text:00406810 ; =============== S U B R O U T I N E =======================================
.text:00406810
.text:00406810
.text:00406810 sub_406810      proc near               ; CODE XREF: sub_404E00+BB2↑p
.text:00406810                                         ; sub_404E00+C6D↑p
.text:00406810                 xor     eax, eax
.text:00406812                 retn
.text:00406812 sub_406810      endp
.text:00406812
.text:00406812 ; ---------------------------------------------------------------------------
.text:00406813 aTz             db 'TZ="',0             ; DATA XREF: sub_406830+8E↓o
.text:00406818 ; const char aTz_0[]
.text:00406818 aTz_0           db 'TZ',0               ; DATA XREF: sub_406830+2B6↓o
.text:00406818                                         ; sub_406830:loc_406B2E↓o ...
.text:0040681B ; const char aXxxSLd02d[]
.text:0040681B aXxxSLd02d      db 'XXX%s%ld:%02d',0    ; DATA XREF: sub_406830+551↓o
.text:00406829 asc_406829      db '-',0                ; DATA XREF: sub_406830+55C↓o
.text:0040682B                 align 10h
.text:00406830
.text:00406830 ; =============== S U B R O U T I N E =======================================
.text:00406830
.text:00406830
.text:00406830 ; int __cdecl sub_406830(int, int, __time32_t *)
.text:00406830 sub_406830      proc near               ; CODE XREF: sub_401A00+48C↑p
.text:00406830                                         ; sub_401A00+762↑p ...
.text:00406830
.text:00406830 Time            = dword ptr -2BCh
.text:00406830 Type            = dword ptr -2B8h
.text:00406830 Size            = dword ptr -2B4h
.text:00406830 var_2B0         = dword ptr -2B0h
.text:00406830 var_2AC         = dword ptr -2ACh
.text:00406830 var_290         = dword ptr -290h
.text:00406830 var_28C         = dword ptr -28Ch
.text:00406830 var_288         = dword ptr -288h
.text:00406830 var_284         = dword ptr -284h
.text:00406830 var_280         = dword ptr -280h
.text:00406830 var_27C         = dword ptr -27Ch
.text:00406830 var_278         = dword ptr -278h
.text:00406830 var_274         = dword ptr -274h
.text:00406830 var_270         = dword ptr -270h
.text:00406830 var_26C         = dword ptr -26Ch
.text:00406830 var_268         = dword ptr -268h
.text:00406830 var_264         = dword ptr -264h
.text:00406830 var_260         = dword ptr -260h
.text:00406830 var_25C         = dword ptr -25Ch
.text:00406830 var_256         = byte ptr -256h
.text:00406830 var_255         = byte ptr -255h
.text:00406830 var_254         = dword ptr -254h
.text:00406830 var_24D         = byte ptr -24Dh
.text:00406830 Block           = dword ptr -24Ch
.text:00406830 var_245         = byte ptr -245h
.text:00406830 var_244         = dword ptr -244h
.text:00406830 var_240         = dword ptr -240h
.text:00406830 var_23C         = dword ptr -23Ch
.text:00406830 var_238         = dword ptr -238h
.text:00406830 var_234         = byte ptr -234h
.text:00406830 Buffer          = byte ptr -22Ch
.text:00406830 var_20C         = dword ptr -20Ch
.text:00406830 var_208         = dword ptr -208h
.text:00406830 var_204         = dword ptr -204h
.text:00406830 Source          = byte ptr -1FCh
.text:00406830 var_18C         = byte ptr -18Ch
.text:00406830 var_11C         = dword ptr -11Ch
.text:00406830 var_118         = dword ptr -118h
.text:00406830 var_114         = dword ptr -114h
.text:00406830 var_110         = dword ptr -110h
.text:00406830 var_10C         = dword ptr -10Ch
.text:00406830 var_108         = dword ptr -108h
.text:00406830 var_104         = dword ptr -104h
.text:00406830 var_100         = dword ptr -100h
.text:00406830 var_FC          = dword ptr -0FCh
.text:00406830 var_F8          = dword ptr -0F8h
.text:00406830 var_F4          = dword ptr -0F4h
.text:00406830 var_F0          = dword ptr -0F0h
.text:00406830 var_EC          = dword ptr -0ECh
.text:00406830 var_E8          = dword ptr -0E8h
.text:00406830 var_E4          = dword ptr -0E4h
.text:00406830 var_E0          = dword ptr -0E0h
.text:00406830 var_DC          = dword ptr -0DCh
.text:00406830 var_D8          = dword ptr -0D8h
.text:00406830 var_D4          = dword ptr -0D4h
.text:00406830 var_D0          = dword ptr -0D0h
.text:00406830 var_CC          = dword ptr -0CCh
.text:00406830 var_C8          = dword ptr -0C8h
.text:00406830 var_C4          = byte ptr -0C4h
.text:00406830 var_C0          = dword ptr -0C0h
.text:00406830 var_BC          = dword ptr -0BCh
.text:00406830 var_B8          = dword ptr -0B8h
.text:00406830 var_B4          = dword ptr -0B4h
.text:00406830 var_B0          = dword ptr -0B0h
.text:00406830 var_AC          = dword ptr -0ACh
.text:00406830 Str1            = dword ptr -0A8h
.text:00406830 var_A0          = dword ptr -0A0h
.text:00406830 Str2            = dword ptr -9Ch
.text:00406830 var_90          = dword ptr -90h
.text:00406830 var_7C          = dword ptr -7Ch
.text:00406830 var_78          = dword ptr -78h
.text:00406830 var_74          = dword ptr -74h
.text:00406830 var_70          = dword ptr -70h
.text:00406830 var_6C          = dword ptr -6Ch
.text:00406830 var_68          = dword ptr -68h
.text:00406830 var_64          = dword ptr -64h
.text:00406830 var_60          = dword ptr -60h
.text:00406830 var_5C          = dword ptr -5Ch
.text:00406830 Tm              = tm ptr -4Ch
.text:00406830 arg_0           = dword ptr  4
.text:00406830 arg_4           = dword ptr  8
.text:00406830 arg_8           = dword ptr  0Ch
.text:00406830
.text:00406830                 push    ebp
.text:00406831                 push    edi
.text:00406832                 push    esi
.text:00406833                 push    ebx
.text:00406834                 sub     esp, 2ACh
.text:0040683A                 mov     eax, [esp+2BCh+arg_8]
.text:00406841                 mov     [esp+2BCh+var_245], 0
.text:00406846                 mov     [esp+2BCh+Block], 0
.text:0040684E                 test    eax, eax
.text:00406850                 mov     [esp+2BCh+var_24D], 1
.text:00406855                 jz      loc_407594
.text:0040685B
.text:0040685B loc_40685B:                             ; CODE XREF: sub_406830+D7F↓j
.text:0040685B                 mov     ecx, [eax+4]
.text:0040685E                 mov     [esp+2BCh+Time], eax ; Time
.text:00406861                 mov     [esp+2BCh+var_244], ecx
.text:00406865                 call    localtime
.text:0040686A                 xor     edx, edx
.text:0040686C                 mov     ebp, eax
.text:0040686E                 test    eax, eax
.text:00406870                 jz      loc_406B21
.text:00406876                 lea     esi, [esi+0]
.text:00406879                 lea     edi, [edi+0]
.text:00406880
.text:00406880 loc_406880:                             ; CODE XREF: sub_406830+84↓j
.text:00406880                 mov     ecx, ds:__mb_cur_max
.text:00406886                 mov     eax, [esp+2BCh+arg_4]
.text:0040688D                 cmp     dword ptr [ecx], 1
.text:00406890                 movzx   edx, byte ptr [eax]
.text:00406893                 jz      loc_407580
.text:00406899                 mov     [esp+2BCh+Type], 8 ; Type
.text:004068A1                 mov     [esp+2BCh+Time], edx ; C
.text:004068A4                 call    _isctype
.text:004068A9
.text:004068A9 loc_4068A9:                             ; CODE XREF: sub_406830+D5F↓j
.text:004068A9                 test    eax, eax
.text:004068AB                 jz      short loc_4068B6
.text:004068AD                 inc     [esp+2BCh+arg_4]
.text:004068B4                 jmp     short loc_406880
.text:004068B6 ; ---------------------------------------------------------------------------
.text:004068B6
.text:004068B6 loc_4068B6:                             ; CODE XREF: sub_406830+7B↑j
.text:004068B6                 cld
.text:004068B7                 mov     esi, [esp+2BCh+arg_4]
.text:004068BE                 mov     edi, offset aTz ; "TZ=\""
.text:004068C3                 mov     ecx, 4
.text:004068C8                 repe cmpsb
.text:004068CA                 jnz     short loc_40690D
.text:004068CC                 mov     edx, [esp+2BCh+arg_4]
.text:004068D3                 mov     edi, 1
.text:004068D8                 mov     ecx, [esp+2BCh+arg_4]
.text:004068DF                 add     edx, 4
.text:004068E2                 mov     ebx, edx
.text:004068E4                 mov     [esp+2BCh+var_254], edx
.text:004068E8                 movzx   eax, byte ptr [ecx+4]
.text:004068EC                 test    al, al
.text:004068EE                 jz      short loc_40690D
.text:004068F0
.text:004068F0 loc_4068F0:                             ; CODE XREF: sub_406830+DB↓j
.text:004068F0                 cmp     al, 5Ch ; '\'
.text:004068F2                 jz      loc_407559
.text:004068F8                 cmp     al, 22h ; '"'
.text:004068FA                 lea     edx, [ebx+1]
.text:004068FD                 jz      loc_40745E
.text:00406903
.text:00406903 loc_406903:                             ; CODE XREF: sub_406830+CF4↓j
.text:00406903                                         ; sub_406830+D36↓j ...
.text:00406903                 movzx   eax, byte ptr [edx]
.text:00406906                 inc     edi
.text:00406907                 mov     ebx, edx
.text:00406909                 test    al, al
.text:0040690B                 jnz     short loc_4068F0
.text:0040690D
.text:0040690D loc_40690D:                             ; CODE XREF: sub_406830+9A↑j
.text:0040690D                                         ; sub_406830+BE↑j ...
.text:0040690D                 mov     [esp+2BCh+var_C4], 0
.text:00406915                 mov     esi, 4
.text:0040691A                 mov     ecx, [ebp+14h]
.text:0040691D                 mov     [esp+2BCh+var_FC], esi
.text:00406924                 mov     eax, [esp+2BCh+arg_4]
.text:0040692B                 mov     ebx, [ebp+10h]
.text:0040692E                 mov     edi, [ebp+0Ch]
.text:00406931                 add     ecx, 76Ch
.text:00406937                 mov     edx, [ebp+8]
.text:0040693A                 mov     [esp+2BCh+var_100], ecx
.text:00406941                 inc     ebx
.text:00406942                 mov     esi, [ebp+0]
.text:00406945                 mov     [esp+2BCh+var_F8], ebx
.text:0040694C                 mov     ecx, [ebp+4]
.text:0040694F                 mov     ebx, [ebp+20h]
.text:00406952                 mov     [esp+2BCh+var_11C], eax
.text:00406959                 xor     ebp, ebp
.text:0040695B                 mov     eax, [esp+2BCh+var_244]
.text:0040695F                 mov     [esp+2BCh+var_F4], edi
.text:00406966                 mov     edi, 2
.text:0040696B                 mov     [esp+2BCh+var_F0], edx
.text:00406972                 xor     edx, edx
.text:00406974                 mov     [esp+2BCh+var_EC], ecx
.text:0040697B                 xor     ecx, ecx
.text:0040697D                 mov     [esp+2BCh+var_E8], esi
.text:00406984                 xor     esi, esi
.text:00406986                 mov     [esp+2BCh+Tm.tm_isdst], ebx
.text:0040698D                 xor     ebx, ebx
.text:0040698F                 mov     [esp+2BCh+var_108], edi
.text:00406996                 xor     edi, edi
.text:00406998                 mov     [esp+2BCh+var_E4], eax
.text:0040699F                 xor     eax, eax
.text:004069A1                 mov     [esp+2BCh+var_C8], edx
.text:004069A8                 xor     edx, edx
.text:004069AA                 mov     [esp+2BCh+var_CC], ecx
.text:004069B1                 xor     ecx, ecx
.text:004069B3                 mov     [esp+2BCh+var_D0], esi
.text:004069BA                 xor     esi, esi
.text:004069BC                 mov     [esp+2BCh+var_D4], ebx
.text:004069C3                 xor     ebx, ebx
.text:004069C5                 mov     [esp+2BCh+var_DC], edi
.text:004069CC                 xor     edi, edi
.text:004069CE                 mov     [esp+2BCh+var_E0], ebp
.text:004069D5                 xor     ebp, ebp
.text:004069D7                 mov     [esp+2BCh+var_C0], edx
.text:004069DE                 lea     edx, [esp+2BCh+var_AC]
.text:004069E5                 mov     [esp+2BCh+var_BC], ecx
.text:004069EC                 xor     ecx, ecx
.text:004069EE                 mov     [esp+2BCh+var_B0], ebx
.text:004069F5                 mov     [esp+2BCh+var_D8], eax
.text:004069FC                 mov     [esp+2BCh+var_B4], esi
.text:00406A03                 mov     [esp+2BCh+var_B8], edi
.text:00406A0A                 mov     [esp+2BCh+var_AC], ebp
.text:00406A11                 mov     ebx, ds:_tzname
.text:00406A17
.text:00406A17 loc_406A17:                             ; CODE XREF: sub_406830+1FE↓j
.text:00406A17                 mov     [edx+0Ch], ecx
.text:00406A1A                 mov     ebp, [ebx+ecx*4]
.text:00406A1D                 inc     ecx
.text:00406A1E                 mov     dword ptr [edx+8], 108h
.text:00406A25                 mov     [edx+4], ebp
.text:00406A28                 add     edx, 0Ch
.text:00406A2B                 cmp     ecx, 1
.text:00406A2E                 jle     short loc_406A17
.text:00406A30                 xor     edx, edx
.text:00406A32                 mov     [esp+2BCh+var_90], edx
.text:00406A39                 mov     edx, [esp+2BCh+Str1]
.text:00406A40                 test    edx, edx
.text:00406A42                 jz      short loc_406A53
.text:00406A44                 mov     eax, [esp+2BCh+Str2]
.text:00406A4B                 test    eax, eax
.text:00406A4D                 jnz     loc_407430
.text:00406A53
.text:00406A53 loc_406A53:                             ; CODE XREF: sub_406830+212↑j
.text:00406A53                                         ; sub_406830+C0E↓j ...
.text:00406A53                 lea     ebx, [esp+2BCh+var_11C]
.text:00406A5A                 mov     [esp+2BCh+Time], ebx
.text:00406A5D                 call    sub_404E00
.text:00406A62                 test    eax, eax
.text:00406A64                 jnz     short loc_406AC1
.text:00406A66                 cmp     [esp+2BCh+var_C4], 0
.text:00406A6E                 jnz     loc_407410
.text:00406A74                 mov     ecx, [esp+2BCh+var_B0]
.text:00406A7B                 cmp     ecx, 1
.text:00406A7E                 ja      short loc_406AC1
.text:00406A80                 mov     ebx, [esp+2BCh+var_C0]
.text:00406A87                 cmp     ebx, 1
.text:00406A8A                 ja      short loc_406AC1
.text:00406A8C                 mov     edi, [esp+2BCh+var_BC]
.text:00406A93                 cmp     edi, 1
.text:00406A96                 ja      short loc_406AC1
.text:00406A98                 mov     ebp, [esp+2BCh+var_B8]
.text:00406A9F                 mov     eax, [esp+2BCh+var_AC]
.text:00406AA6                 mov     esi, ebp
.text:00406AA8                 add     esi, eax
.text:00406AAA                 cmp     esi, 1
.text:00406AAD                 ja      short loc_406AC1
.text:00406AAF                 test    ebp, ebp
.text:00406AB1                 jz      loc_406B3C
.text:00406AB7                 cmp     [esp+2BCh+var_110], 1
.text:00406ABF                 jle     short loc_406B3C
.text:00406AC1
.text:00406AC1 loc_406AC1:                             ; CODE XREF: sub_406830+234↑j
.text:00406AC1                                         ; sub_406830+24E↑j ...
.text:00406AC1                 mov     [esp+2BCh+var_24D], 0
.text:00406AC6
.text:00406AC6 loc_406AC6:                             ; CODE XREF: sub_406830+945↓j
.text:00406AC6                                         ; sub_406830+BFB↓j
.text:00406AC6                 cmp     [esp+2BCh+var_245], 0
.text:00406ACB                 jz      short loc_406B03
.text:00406ACD                 movzx   ebx, [esp+2BCh+var_24D]
.text:00406AD2                 mov     edx, [esp+2BCh+Block]
.text:00406AD6                 test    edx, edx
.text:00406AD8                 jz      short loc_406B2E
.text:00406ADA                 mov     [esp+2BCh+Size], 1 ; int
.text:00406AE2                 mov     ecx, [esp+2BCh+Block]
.text:00406AE6                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:00406AED                 mov     [esp+2BCh+Type], ecx ; Source
.text:00406AF1                 call    sub_40C9B0
.text:00406AF6
.text:00406AF6 loc_406AF6:                             ; CODE XREF: sub_406830+30A↓j
.text:00406AF6                 mov     [esp+2BCh+var_24D], bl
.text:00406AFA                 test    eax, eax
.text:00406AFC                 jz      short loc_406B03
.text:00406AFE                 mov     [esp+2BCh+var_24D], 0
.text:00406B03
.text:00406B03 loc_406B03:                             ; CODE XREF: sub_406830+29B↑j
.text:00406B03                                         ; sub_406830+2CC↑j
.text:00406B03                 lea     esi, [esp+2BCh+var_18C]
.text:00406B0A                 cmp     [esp+2BCh+Block], esi
.text:00406B0E                 jz      short loc_406B1C
.text:00406B10                 mov     edi, [esp+2BCh+Block]
.text:00406B14                 mov     [esp+2BCh+Time], edi ; Block
.text:00406B17                 call    free
.text:00406B1C
.text:00406B1C loc_406B1C:                             ; CODE XREF: sub_406830+2DE↑j
.text:00406B1C                 movzx   edx, [esp+2BCh+var_24D]
.text:00406B21
.text:00406B21 loc_406B21:                             ; CODE XREF: sub_406830+40↑j
.text:00406B21                                         ; sub_406830+D77↓j
.text:00406B21                 add     esp, 2ACh
.text:00406B27                 mov     eax, edx
.text:00406B29                 pop     ebx
.text:00406B2A                 pop     esi
.text:00406B2B                 pop     edi
.text:00406B2C                 pop     ebp
.text:00406B2D                 retn
.text:00406B2E ; ---------------------------------------------------------------------------
.text:00406B2E
.text:00406B2E loc_406B2E:                             ; CODE XREF: sub_406830+2A8↑j
.text:00406B2E                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:00406B35                 call    sub_40CA90
.text:00406B3A                 jmp     short loc_406AF6
.text:00406B3C ; ---------------------------------------------------------------------------
.text:00406B3C
.text:00406B3C loc_406B3C:                             ; CODE XREF: sub_406830+281↑j
.text:00406B3C                                         ; sub_406830+28F↑j
.text:00406B3C                 mov     edx, [esp+2BCh+var_104]
.text:00406B43                 mov     eax, [esp+2BCh+var_100]
.text:00406B4A                 mov     [esp+2BCh+var_20C], edx
.text:00406B51                 mov     edx, [esp+2BCh+var_FC]
.text:00406B58                 test    eax, eax
.text:00406B5A                 mov     [esp+2BCh+var_208], eax
.text:00406B61                 mov     [esp+2BCh+var_204], edx
.text:00406B68                 js      loc_407403
.text:00406B6E                 cmp     edx, 2
.text:00406B71                 jz      loc_4073EA
.text:00406B77
.text:00406B77 loc_406B77:                             ; CODE XREF: sub_406830+BC4↓j
.text:00406B77                                         ; sub_406830+BCE↓j ...
.text:00406B77                 mov     edx, [esp+2BCh+var_F8]
.text:00406B7E                 sub     eax, 76Ch
.text:00406B83                 mov     esi, [esp+2BCh+var_F4]
.text:00406B8A                 mov     [esp+2BCh+Tm.tm_year], eax
.text:00406B91                 dec     edx
.text:00406B92                 test    ecx, ecx
.text:00406B94                 mov     [esp+2BCh+Tm.tm_mon], edx
.text:00406B9B                 mov     [esp+2BCh+Tm.tm_mday], esi
.text:00406BA2                 jnz     short loc_406BC3
.text:00406BA4                 mov     esi, [esp+2BCh+var_B4]
.text:00406BAB                 test    esi, esi
.text:00406BAD                 jz      loc_4073C1
.text:00406BB3                 test    ebx, ebx
.text:00406BB5                 jnz     loc_4073C1
.text:00406BBB                 test    edi, edi
.text:00406BBD                 jnz     loc_4073C1
.text:00406BC3
.text:00406BC3 loc_406BC3:                             ; CODE XREF: sub_406830+372↑j
.text:00406BC3                 mov     eax, [esp+2BCh+var_108]
.text:00406BCA                 mov     esi, [esp+2BCh+var_F0]
.text:00406BD1                 cmp     eax, 1
.text:00406BD4                 jz      loc_4073A0
.text:00406BDA                 cmp     eax, 1
.text:00406BDD                 jle     loc_40737C
.text:00406BE3
.text:00406BE3 loc_406BE3:                             ; CODE XREF: sub_406830+B4E↓j
.text:00406BE3                 cmp     esi, 18h
.text:00406BE6                 sbb     edx, edx
.text:00406BE8                 not     edx
.text:00406BEA                 or      edx, esi
.text:00406BEC
.text:00406BEC loc_406BEC:                             ; CODE XREF: sub_406830+B5C↓j
.text:00406BEC                                         ; sub_406830+B6B↓j ...
.text:00406BEC                 mov     [esp+2BCh+Tm.tm_hour], edx
.text:00406BF3                 test    edx, edx
.text:00406BF5                 js      loc_406AC1
.text:00406BFB                 mov     edx, [esp+2BCh+var_EC]
.text:00406C02                 mov     esi, [esp+2BCh+var_E8]
.text:00406C09                 mov     [esp+2BCh+Tm.tm_min], edx
.text:00406C10                 mov     [esp+2BCh+Tm.tm_sec], esi
.text:00406C17
.text:00406C17 loc_406C17:                             ; CODE XREF: sub_406830+BB5↓j
.text:00406C17                 or      ebx, edi
.text:00406C19                 or      ebx, ecx
.text:00406C1B                 setz    bl
.text:00406C1E                 movzx   edi, bl
.text:00406C21                 dec     edi
.text:00406C22                 or      [esp+2BCh+Tm.tm_isdst], edi
.text:00406C29                 test    ebp, ebp
.text:00406C2B                 jz      short loc_406C3B
.text:00406C2D                 mov     ebp, [esp+2BCh+var_110]
.text:00406C34                 mov     [esp+2BCh+Tm.tm_isdst], ebp
.text:00406C3B
.text:00406C3B loc_406C3B:                             ; CODE XREF: sub_406830+3FB↑j
.text:00406C3B                 mov     edi, [esp+2BCh+Tm.tm_sec]
.text:00406C42                 mov     edx, [esp+2BCh+Tm.tm_min]
.text:00406C49                 mov     esi, [esp+2BCh+Tm.tm_hour]
.text:00406C50                 mov     [esp+2BCh+var_7C], edi
.text:00406C57                 mov     ecx, [esp+2BCh+Tm.tm_mday]
.text:00406C5E                 mov     ebp, [esp+2BCh+Tm.tm_mon]
.text:00406C65                 mov     [esp+2BCh+var_78], edx
.text:00406C6C                 mov     edi, [esp+2BCh+Tm.tm_wday]
.text:00406C73                 mov     ebx, [esp+2BCh+Tm.tm_year]
.text:00406C7A                 mov     [esp+2BCh+var_74], esi
.text:00406C81                 mov     edx, [esp+2BCh+Tm.tm_yday]
.text:00406C88                 mov     esi, [esp+2BCh+Tm.tm_isdst]
.text:00406C8F                 mov     [esp+2BCh+var_70], ecx
.text:00406C96                 lea     ecx, [esp+2BCh+Tm]
.text:00406C9D                 mov     [esp+2BCh+var_6C], ebp
.text:00406CA4                 mov     [esp+2BCh+var_64], edi
.text:00406CAB                 lea     edi, [esp+2BCh+var_7C]
.text:00406CB2                 mov     [esp+2BCh+Time], ecx ; Tm
.text:00406CB5                 mov     [esp+2BCh+var_68], ebx
.text:00406CBC                 mov     [esp+2BCh+var_60], edx
.text:00406CC3                 mov     [esp+2BCh+var_5C], esi
.text:00406CCA                 call    mktime
.text:00406CCF                 mov     [esp+2BCh+var_238], eax
.text:00406CD6                 cmp     eax, 0FFFFFFFFh
.text:00406CD9                 mov     ebp, eax
.text:00406CDB                 lea     ecx, [esp+2BCh+Tm]
.text:00406CE2                 jz      loc_40735E
.text:00406CE8
.text:00406CE8 loc_406CE8:                             ; CODE XREF: sub_406830+B41↓j
.text:00406CE8                 mov     esi, [edi]
.text:00406CEA                 mov     eax, [edi+4]
.text:00406CED                 mov     edx, [ecx]
.text:00406CEF                 mov     ebx, [ecx+4]
.text:00406CF2                 xor     edx, esi
.text:00406CF4                 xor     ebx, eax
.text:00406CF6                 mov     esi, [ecx+8]
.text:00406CF9                 or      edx, ebx
.text:00406CFB                 mov     eax, [edi+8]
.text:00406CFE                 mov     ebx, [ecx+0Ch]
.text:00406D01                 xor     esi, eax
.text:00406D03                 mov     eax, [edi+0Ch]
.text:00406D06                 or      edx, esi
.text:00406D08                 mov     esi, [ecx+10h]
.text:00406D0B                 xor     ebx, eax
.text:00406D0D                 mov     eax, [edi+10h]
.text:00406D10                 or      edx, ebx
.text:00406D12                 xor     esi, eax
.text:00406D14                 or      edx, esi
.text:00406D16                 mov     eax, [edi+14h]
.text:00406D19                 mov     esi, [ecx+14h]
.text:00406D1C                 xor     esi, eax
.text:00406D1E                 or      edx, esi
.text:00406D20                 jz      loc_406EB2
.text:00406D26
.text:00406D26 loc_406D26:                             ; CODE XREF: sub_406830+B47↓j
.text:00406D26                 mov     ebp, [esp+2BCh+var_AC]
.text:00406D2D                 test    ebp, ebp
.text:00406D2F                 jz      loc_406AC1
.text:00406D35                 mov     ebp, [esp+2BCh+var_10C]
.text:00406D3C                 test    ebp, ebp
.text:00406D3E                 mov     ecx, ebp
.text:00406D40                 js      loc_407357
.text:00406D46
.text:00406D46 loc_406D46:                             ; CODE XREF: sub_406830+B29↓j
.text:00406D46                 mov     esi, 88888889h
.text:00406D4B                 mov     eax, ecx
.text:00406D4D                 mov     ebx, ecx
.text:00406D4F                 imul    esi
.text:00406D51                 sar     ebx, 1Fh
.text:00406D54                 lea     esi, [ecx+edx]
.text:00406D57                 sar     esi, 5
.text:00406D5A                 sub     esi, ebx
.text:00406D5C                 mov     edx, esi
.text:00406D5E                 shl     edx, 4
.text:00406D61                 sub     edx, esi
.text:00406D63                 shl     edx, 2
.text:00406D66                 sub     ecx, edx
.text:00406D68                 cmp     [esp+2BCh+var_245], 0
.text:00406D6D                 mov     [esp+2BCh+var_25C], ecx
.text:00406D71                 jz      loc_407307
.text:00406D77
.text:00406D77 loc_406D77:                             ; CODE XREF: sub_406830+B14↓j
.text:00406D77                 mov     [esp+2BCh+var_2B0], esi
.text:00406D7B                 mov     eax, [esp+2BCh+var_25C]
.text:00406D7F                 mov     edx, ebp
.text:00406D81                 mov     [esp+2BCh+Type], offset aXxxSLd02d ; "XXX%s%ld:%02d"
.text:00406D89                 shr     edx, 1Fh
.text:00406D8C                 add     edx, offset asc_406829 ; "-"
.text:00406D92                 mov     [esp+2BCh+Size], edx
.text:00406D96                 lea     ebp, [esp+2BCh+Buffer]
.text:00406D9D                 mov     [esp+2BCh+var_2AC], eax
.text:00406DA1                 mov     [esp+2BCh+Time], ebp ; Buffer
.text:00406DA4                 call    sprintf
.text:00406DA9                 mov     [esp+2BCh+Size], 1 ; int
.text:00406DB1                 mov     [esp+2BCh+Type], ebp ; Source
.text:00406DB5                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:00406DBC                 call    sub_40C9B0
.text:00406DC1                 test    eax, eax
.text:00406DC3                 jnz     loc_406AC1
.text:00406DC9                 mov     [esp+2BCh+var_245], 1
.text:00406DCE                 mov     edx, [esp+2BCh+var_7C]
.text:00406DD5                 mov     ebp, [esp+2BCh+var_78]
.text:00406DDC                 mov     ecx, [esp+2BCh+var_74]
.text:00406DE3                 mov     ebx, [esp+2BCh+var_70]
.text:00406DEA                 mov     [esp+2BCh+Tm.tm_sec], edx
.text:00406DF1                 mov     esi, [esp+2BCh+var_6C]
.text:00406DF8                 mov     [esp+2BCh+Tm.tm_min], ebp
.text:00406DFF                 mov     edx, [esp+2BCh+var_68]
.text:00406E06                 mov     [esp+2BCh+Tm.tm_hour], ecx
.text:00406E0D                 mov     ebp, [esp+2BCh+var_64]
.text:00406E14                 mov     [esp+2BCh+Tm.tm_mday], ebx
.text:00406E1B                 mov     ecx, [esp+2BCh+var_60]
.text:00406E22                 mov     [esp+2BCh+Tm.tm_mon], esi
.text:00406E29                 mov     ebx, [esp+2BCh+var_5C]
.text:00406E30                 lea     esi, [esp+2BCh+Tm]
.text:00406E37                 mov     [esp+2BCh+Tm.tm_wday], ebp
.text:00406E3E                 mov     [esp+2BCh+Tm.tm_yday], ecx
.text:00406E45                 mov     [esp+2BCh+Tm.tm_year], edx
.text:00406E4C                 mov     [esp+2BCh+Tm.tm_isdst], ebx
.text:00406E53                 mov     [esp+2BCh+Time], esi ; Tm
.text:00406E56                 call    mktime
.text:00406E5B                 mov     [esp+2BCh+var_23C], eax
.text:00406E62                 cmp     eax, 0FFFFFFFFh
.text:00406E65                 mov     ebp, eax
.text:00406E67                 lea     ecx, [esp+2BCh+Tm]
.text:00406E6E                 jz      loc_4072E9
.text:00406E74
.text:00406E74 loc_406E74:                             ; CODE XREF: sub_406830+ACC↓j
.text:00406E74                 mov     esi, [edi]
.text:00406E76                 mov     eax, [edi+4]
.text:00406E79                 mov     edx, [ecx]
.text:00406E7B                 mov     ebx, [ecx+4]
.text:00406E7E                 xor     edx, esi
.text:00406E80                 xor     ebx, eax
.text:00406E82                 mov     esi, [ecx+8]
.text:00406E85                 or      edx, ebx
.text:00406E87                 mov     eax, [edi+8]
.text:00406E8A                 mov     ebx, [ecx+0Ch]
.text:00406E8D                 xor     esi, eax
.text:00406E8F                 mov     eax, [edi+0Ch]
.text:00406E92                 or      edx, esi
.text:00406E94                 mov     esi, [ecx+10h]
.text:00406E97                 xor     ebx, eax
.text:00406E99                 mov     eax, [edi+10h]
.text:00406E9C                 or      edx, ebx
.text:00406E9E                 mov     ebx, [ecx+14h]
.text:00406EA1                 xor     esi, eax
.text:00406EA3                 mov     eax, [edi+14h]
.text:00406EA6                 or      edx, esi
.text:00406EA8                 xor     ebx, eax
.text:00406EAA                 or      edx, ebx
.text:00406EAC                 jnz     loc_406AC1
.text:00406EB2
.text:00406EB2 loc_406EB2:                             ; CODE XREF: sub_406830+4F0↑j
.text:00406EB2                 mov     edi, [esp+2BCh+var_BC]
.text:00406EB9                 test    edi, edi
.text:00406EBB                 jz      loc_406F45
.text:00406EC1                 mov     ecx, [esp+2BCh+var_C0]
.text:00406EC8                 test    ecx, ecx
.text:00406ECA                 jnz     short loc_406F45
.text:00406ECC                 mov     edx, [esp+2BCh+Tm.tm_wday]
.text:00406ED3                 mov     eax, 92492493h
.text:00406ED8                 mov     ecx, [esp+2BCh+var_114]
.text:00406EDF                 mov     ebp, [esp+2BCh+var_118]
.text:00406EE6                 sub     ecx, edx
.text:00406EE8                 add     ecx, 7
.text:00406EEB                 imul    ecx
.text:00406EED                 mov     edi, ecx
.text:00406EEF                 sar     edi, 1Fh
.text:00406EF2                 lea     esi, [edx+ecx]
.text:00406EF5                 sar     esi, 2
.text:00406EF8                 sub     esi, edi
.text:00406EFA                 lea     ebx, ds:0[esi*8]
.text:00406F01                 sub     ebx, esi
.text:00406F03                 lea     edx, ds:0[ebp*8]
.text:00406F0A                 sub     ecx, ebx
.text:00406F0C                 sub     edx, ebp
.text:00406F0E                 test    ebp, ebp
.text:00406F10                 jle     short loc_406F15
.text:00406F12                 sub     edx, 7
.text:00406F15
.text:00406F15 loc_406F15:                             ; CODE XREF: sub_406830+6E0↑j
.text:00406F15                 lea     ebp, [edx+ecx]
.text:00406F18                 mov     ecx, 0FFFFFFFFh
.text:00406F1D                 lea     eax, [esp+2BCh+Tm]
.text:00406F24                 add     [esp+2BCh+Tm.tm_mday], ebp
.text:00406F2B                 mov     [esp+2BCh+Tm.tm_isdst], ecx
.text:00406F32                 mov     [esp+2BCh+Time], eax ; Tm
.text:00406F35                 call    mktime
.text:00406F3A                 cmp     eax, 0FFFFFFFFh
.text:00406F3D                 mov     ebp, eax
.text:00406F3F                 jz      loc_406AC1
.text:00406F45
.text:00406F45 loc_406F45:                             ; CODE XREF: sub_406830+68B↑j
.text:00406F45                                         ; sub_406830+69A↑j
.text:00406F45                 mov     ebx, [esp+2BCh+var_AC]
.text:00406F4C                 test    ebx, ebx
.text:00406F4E                 jnz     loc_407182
.text:00406F54
.text:00406F54 loc_406F54:                             ; CODE XREF: sub_406830+A94↓j
.text:00406F54                 mov     edx, [esp+2BCh+var_E0]
.text:00406F5B                 mov     esi, [esp+2BCh+var_DC]
.text:00406F62                 mov     edi, [esp+2BCh+var_D8]
.text:00406F69                 mov     [esp+2BCh+var_26C], edx
.text:00406F6D                 or      edx, esi
.text:00406F6F                 or      edx, edi
.text:00406F71                 jz      loc_407013
.text:00406F77                 mov     eax, [esp+2BCh+Tm.tm_year]
.text:00406F7E                 mov     ecx, [esp+2BCh+var_26C]
.text:00406F82                 mov     edx, [esp+2BCh+Tm.tm_mon]
.text:00406F89                 lea     ebp, [ecx+eax]
.text:00406F8C                 mov     ecx, [esp+2BCh+Tm.tm_mday]
.text:00406F93                 lea     ebx, [esi+edx]
.text:00406F96                 mov     [esp+2BCh+var_270], ebx
.text:00406F9A                 lea     ebx, [edi+ecx]
.text:00406F9D                 mov     [esp+2BCh+var_274], ebx
.text:00406FA1                 xor     ebx, ebx
.text:00406FA3                 cmp     ebp, eax
.text:00406FA5                 setl    bl
.text:00406FA8                 xor     eax, eax
.text:00406FAA                 cmp     [esp+2BCh+var_270], edx
.text:00406FAE                 mov     edx, edi
.text:00406FB0                 mov     edi, [esp+2BCh+var_26C]
.text:00406FB4                 setl    al
.text:00406FB7                 shr     esi, 1Fh
.text:00406FBA                 xor     esi, eax
.text:00406FBC                 xor     eax, eax
.text:00406FBE                 cmp     [esp+2BCh+var_274], ecx
.text:00406FC2                 setl    al
.text:00406FC5                 shr     edx, 1Fh
.text:00406FC8                 xor     edx, eax
.text:00406FCA                 test    edi, edi
.text:00406FCC                 js      loc_40717A
.text:00406FD2
.text:00406FD2 loc_406FD2:                             ; CODE XREF: sub_406830+94D↓j
.text:00406FD2                 or      ebx, esi
.text:00406FD4                 or      ebx, edx
.text:00406FD6                 jnz     loc_406AC1
.text:00406FDC                 mov     [esp+2BCh+Tm.tm_year], ebp
.text:00406FE3                 mov     eax, [esp+2BCh+var_270]
.text:00406FE7                 lea     ebp, [esp+2BCh+Tm]
.text:00406FEE                 mov     [esp+2BCh+Time], ebp ; Tm
.text:00406FF1                 mov     esi, [esp+2BCh+var_274]
.text:00406FF5                 mov     [esp+2BCh+Tm.tm_mon], eax
.text:00406FFC                 mov     [esp+2BCh+Tm.tm_mday], esi
.text:00407003                 call    mktime
.text:00407008                 cmp     eax, 0FFFFFFFFh
.text:0040700B                 mov     ebp, eax
.text:0040700D                 jz      loc_406AC1
.text:00407013
.text:00407013 loc_407013:                             ; CODE XREF: sub_406830+741↑j
.text:00407013                 mov     edi, [esp+2BCh+var_E4]
.text:0040701A                 mov     eax, 44B82FA1h
.text:0040701F                 mov     ebx, [esp+2BCh+var_C8]
.text:00407026                 add     ebx, edi
.text:00407028                 imul    ebx
.text:0040702A                 mov     edi, [esp+2BCh+var_D0]
.text:00407031                 mov     eax, ebx
.text:00407033                 mov     esi, edx
.text:00407035                 sar     esi, 1Ch
.text:00407038                 cdq
.text:00407039                 sub     esi, edx
.text:0040703B                 imul    esi, 3B9ACA00h
.text:00407041                 sub     eax, esi
.text:00407043                 mov     ecx, eax
.text:00407045                 add     ecx, 3B9ACA00h
.text:0040704B                 mov     eax, 44B82FA1h
.text:00407050                 imul    ecx
.text:00407052                 mov     eax, ecx
.text:00407054                 mov     esi, edx
.text:00407056                 sar     esi, 1Ch
.text:00407059                 cdq
.text:0040705A                 sub     esi, edx
.text:0040705C                 mov     eax, 44B82FA1h
.text:00407061                 imul    esi, 3B9ACA00h
.text:00407067                 mov     edx, [esp+2BCh+var_CC]
.text:0040706E                 sub     ecx, esi
.text:00407070                 mov     esi, [esp+2BCh+var_D4]
.text:00407077                 mov     [esp+2BCh+var_278], ecx
.text:0040707B                 mov     ecx, edi
.text:0040707D                 imul    esi, 0E10h
.text:00407083                 shl     ecx, 4
.text:00407086                 sub     ecx, edi
.text:00407088                 shl     ecx, 2
.text:0040708B                 mov     [esp+2BCh+var_27C], esi
.text:0040708F                 add     esi, ebp
.text:00407091                 mov     [esp+2BCh+var_280], esi
.text:00407095                 add     esi, ecx
.text:00407097                 mov     [esp+2BCh+var_284], esi
.text:0040709B                 add     esi, edx
.text:0040709D                 mov     edx, [esp+2BCh+var_278]
.text:004070A1                 mov     [esp+2BCh+var_288], esi
.text:004070A5                 mov     esi, 91A2B3C5h
.text:004070AA                 sub     ebx, edx
.text:004070AC                 imul    ebx
.text:004070AE                 mov     eax, [esp+2BCh+var_288]
.text:004070B2                 sar     ebx, 1Fh
.text:004070B5                 sar     edx, 1Ch
.text:004070B8                 sub     edx, ebx
.text:004070BA                 add     eax, edx
.text:004070BC                 mov     [esp+2BCh+var_290], eax
.text:004070C0                 mov     eax, [esp+2BCh+var_27C]
.text:004070C4                 mov     [esp+2BCh+var_28C], edx
.text:004070C8                 imul    esi
.text:004070CA                 mov     eax, [esp+2BCh+var_27C]
.text:004070CE                 mov     esi, [esp+2BCh+var_27C]
.text:004070D2                 mov     ebx, edx
.text:004070D4                 add     ebx, eax
.text:004070D6                 mov     edx, [esp+2BCh+var_D4]
.text:004070DD                 sar     esi, 1Fh
.text:004070E0                 mov     eax, ecx
.text:004070E2                 sar     ebx, 0Bh
.text:004070E5                 sub     ebx, esi
.text:004070E7                 mov     esi, 88888889h
.text:004070EC                 xor     ebx, edx
.text:004070EE                 imul    esi
.text:004070F0                 mov     esi, ecx
.text:004070F2                 sar     esi, 1Fh
.text:004070F5                 add     edx, ecx
.text:004070F7                 sar     edx, 5
.text:004070FA                 sub     edx, esi
.text:004070FC                 xor     edx, edi
.text:004070FE                 mov     esi, [esp+2BCh+var_284]
.text:00407102                 or      ebx, edx
.text:00407104                 xor     edx, edx
.text:00407106                 mov     edi, [esp+2BCh+var_280]
.text:0040710A                 cmp     [esp+2BCh+var_280], ebp
.text:0040710E                 mov     ebp, [esp+2BCh+var_27C]
.text:00407112                 setl    dl
.text:00407115                 shr     ebp, 1Fh
.text:00407118                 xor     eax, eax
.text:0040711A                 xor     ebp, edx
.text:0040711C                 or      ebx, ebp
.text:0040711E                 mov     ebp, [esp+2BCh+var_CC]
.text:00407125                 cmp     [esp+2BCh+var_284], edi
.text:00407129                 mov     edi, [esp+2BCh+var_28C]
.text:0040712D                 setl    al
.text:00407130                 shr     ecx, 1Fh
.text:00407133                 xor     edx, edx
.text:00407135                 xor     ecx, eax
.text:00407137                 or      ebx, ecx
.text:00407139                 mov     ecx, [esp+2BCh+var_288]
.text:0040713D                 cmp     [esp+2BCh+var_288], esi
.text:00407141                 setl    dl
.text:00407144                 shr     ebp, 1Fh
.text:00407147                 xor     ebp, edx
.text:00407149                 or      ebx, ebp
.text:0040714B                 xor     edx, edx
.text:0040714D                 cmp     [esp+2BCh+var_290], ecx
.text:00407151                 setl    dl
.text:00407154                 shr     edi, 1Fh
.text:00407157                 xor     edi, edx
.text:00407159                 or      ebx, edi
.text:0040715B                 jnz     loc_406AC1
.text:00407161                 mov     ebx, [esp+2BCh+arg_0]
.text:00407168                 mov     eax, [esp+2BCh+var_290]
.text:0040716C                 mov     ebp, [esp+2BCh+var_278]
.text:00407170                 mov     [ebx], eax
.text:00407172                 mov     [ebx+4], ebp
.text:00407175                 jmp     loc_406AC6
.text:0040717A ; ---------------------------------------------------------------------------
.text:0040717A
.text:0040717A loc_40717A:                             ; CODE XREF: sub_406830+79C↑j
.text:0040717A                 xor     ebx, 1
.text:0040717D                 jmp     loc_406FD2
.text:00407182 ; ---------------------------------------------------------------------------
.text:00407182
.text:00407182 loc_407182:                             ; CODE XREF: sub_406830+71E↑j
.text:00407182                 mov     [esp+2BCh+var_240], ebp
.text:00407186                 mov     edx, [esp+2BCh+var_10C]
.text:0040718D                 lea     esi, [esp+2BCh+var_240]
.text:00407191                 mov     [esp+2BCh+Time], esi ; Time
.text:00407194                 mov     edi, edx
.text:00407196                 shl     edi, 4
.text:00407199                 sub     edi, edx
.text:0040719B                 shl     edi, 2
.text:0040719E                 mov     [esp+2BCh+var_260], edi
.text:004071A2                 call    gmtime
.text:004071A7                 mov     [esp+2BCh+var_264], eax
.text:004071AB                 test    eax, eax
.text:004071AD                 jz      loc_406AC1
.text:004071B3                 mov     eax, [esp+2BCh+Tm.tm_year]
.text:004071BA                 test    al, 3
.text:004071BC                 jnz     loc_4072DB
.text:004071C2                 sar     eax, 2
.text:004071C5                 lea     esi, [eax+1DAh]
.text:004071CB
.text:004071CB loc_4071CB:                             ; CODE XREF: sub_406830+AB4↓j
.text:004071CB                 mov     ecx, [esp+2BCh+var_264]
.text:004071CF                 mov     eax, [ecx+14h]
.text:004071D2                 test    al, 3
.text:004071D4                 mov     [esp+2BCh+var_268], eax
.text:004071D8                 jnz     loc_4072C9
.text:004071DE                 sar     eax, 2
.text:004071E1                 lea     edi, [eax+1DAh]
.text:004071E7
.text:004071E7 loc_4071E7:                             ; CODE XREF: sub_406830+AA6↓j
.text:004071E7                 mov     ebx, 51EB851Fh
.text:004071EC                 mov     eax, esi
.text:004071EE                 mov     ecx, esi
.text:004071F0                 imul    ebx
.text:004071F2                 sar     ecx, 1Fh
.text:004071F5                 sar     edx, 3
.text:004071F8                 sub     edx, ecx
.text:004071FA                 lea     ecx, [edx+edx*4]
.text:004071FD                 lea     eax, [ecx+ecx*4]
.text:00407200                 mov     ecx, esi
.text:00407202                 sub     ecx, eax
.text:00407204                 sub     esi, edi
.text:00407206                 shr     ecx, 1Fh
.text:00407209                 mov     eax, edi
.text:0040720B                 sub     edx, ecx
.text:0040720D                 mov     ecx, edx
.text:0040720F                 imul    ebx
.text:00407211                 mov     ebx, edi
.text:00407213                 sar     ebx, 1Fh
.text:00407216                 sar     edx, 3
.text:00407219                 sub     edx, ebx
.text:0040721B                 lea     ebx, [edx+edx*4]
.text:0040721E                 lea     eax, [ebx+ebx*4]
.text:00407221                 mov     ebx, edi
.text:00407223                 sub     ebx, eax
.text:00407225                 mov     eax, ebx
.text:00407227                 shr     eax, 1Fh
.text:0040722A                 mov     ebx, ecx
.text:0040722C                 sub     edx, eax
.text:0040722E                 sar     ebx, 2
.text:00407231                 mov     eax, edx
.text:00407233                 sub     ecx, eax
.text:00407235                 sar     edx, 2
.text:00407238                 sub     esi, ecx
.text:0040723A                 sub     ebx, edx
.text:0040723C                 lea     edi, [ebx+esi]
.text:0040723F                 mov     edx, [esp+2BCh+Tm.tm_year]
.text:00407246                 mov     esi, [esp+2BCh+var_268]
.text:0040724A                 mov     ebx, [esp+2BCh+Tm.tm_yday]
.text:00407251                 sub     edx, esi
.text:00407253                 lea     ecx, [edx+edx*8]
.text:00407256                 lea     esi, [edx+ecx*8]
.text:00407259                 lea     ecx, [esi+esi*4]
.text:0040725C                 mov     esi, [esp+2BCh+var_264]
.text:00407260                 add     ecx, edi
.text:00407262                 mov     edx, [esi+1Ch]
.text:00407265                 mov     eax, [esi+4]
.text:00407268                 sub     ebx, edx
.text:0040726A                 add     ecx, ebx
.text:0040726C                 lea     edi, [ecx+ecx*2]
.text:0040726F                 mov     edx, [esp+2BCh+Tm.tm_hour]
.text:00407276                 mov     ecx, [esi+8]
.text:00407279                 sub     edx, ecx
.text:0040727B                 lea     ecx, [edx+edi*8]
.text:0040727E                 mov     edx, [esp+2BCh+Tm.tm_min]
.text:00407285                 mov     ebx, ecx
.text:00407287                 shl     ebx, 4
.text:0040728A                 sub     ebx, ecx
.text:0040728C                 sub     edx, eax
.text:0040728E                 mov     ecx, [esp+2BCh+Tm.tm_sec]
.text:00407295                 lea     edi, [edx+ebx*4]
.text:00407298                 mov     eax, [esi]
.text:0040729A                 mov     ebx, edi
.text:0040729C                 shl     ebx, 4
.text:0040729F                 mov     esi, [esp+2BCh+var_260]
.text:004072A3                 sub     ebx, edi
.text:004072A5                 sub     ecx, eax
.text:004072A7                 lea     edi, [ecx+ebx*4]
.text:004072AA                 sub     esi, edi
.text:004072AC                 mov     ecx, ebp
.text:004072AE                 sub     ecx, esi
.text:004072B0                 xor     edx, edx
.text:004072B2                 cmp     ebp, ecx
.text:004072B4                 setl    dl
.text:004072B7                 shr     esi, 1Fh
.text:004072BA                 cmp     edx, esi
.text:004072BC                 jnz     loc_406AC1
.text:004072C2                 mov     ebp, ecx
.text:004072C4                 jmp     loc_406F54
.text:004072C9 ; ---------------------------------------------------------------------------
.text:004072C9
.text:004072C9 loc_4072C9:                             ; CODE XREF: sub_406830+9A8↑j
.text:004072C9                 mov     ebx, [esp+2BCh+var_268]
.text:004072CD                 sar     ebx, 2
.text:004072D0                 lea     edi, [ebx+1DBh]
.text:004072D6                 jmp     loc_4071E7
.text:004072DB ; ---------------------------------------------------------------------------
.text:004072DB
.text:004072DB loc_4072DB:                             ; CODE XREF: sub_406830+98C↑j
.text:004072DB                 sar     eax, 2
.text:004072DE                 lea     esi, [eax+1DBh]
.text:004072E4                 jmp     loc_4071CB
.text:004072E9 ; ---------------------------------------------------------------------------
.text:004072E9
.text:004072E9 loc_4072E9:                             ; CODE XREF: sub_406830+63E↑j
.text:004072E9                 lea     esi, [esp+2BCh+var_23C]
.text:004072F0                 mov     [esp+2BCh+Time], esi ; Time
.text:004072F3                 call    localtime
.text:004072F8                 test    eax, eax
.text:004072FA                 mov     ecx, eax
.text:004072FC                 jnz     loc_406E74
.text:00407302                 jmp     loc_406AC1
.text:00407307 ; ---------------------------------------------------------------------------
.text:00407307
.text:00407307 loc_407307:                             ; CODE XREF: sub_406830+541↑j
.text:00407307                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:0040730E                 call    getenv
.text:00407313                 test    eax, eax
.text:00407315                 mov     ebx, eax
.text:00407317                 jz      short loc_407340
.text:00407319                 mov     [esp+2BCh+Time], eax ; Str
.text:0040731C                 call    strlen
.text:00407321                 inc     eax
.text:00407322                 cmp     eax, 64h ; 'd'
.text:00407325                 ja      short loc_407349
.text:00407327                 mov     [esp+2BCh+Size], eax ; Size
.text:0040732B                 lea     ecx, [esp+2BCh+var_18C]
.text:00407332                 mov     [esp+2BCh+Type], ebx ; Src
.text:00407336                 mov     [esp+2BCh+Time], ecx ; void *
.text:00407339                 call    memcpy
.text:0040733E
.text:0040733E loc_40733E:                             ; CODE XREF: sub_406830+B25↓j
.text:0040733E                 mov     ebx, eax
.text:00407340
.text:00407340 loc_407340:                             ; CODE XREF: sub_406830+AE7↑j
.text:00407340                 mov     [esp+2BCh+Block], ebx
.text:00407344                 jmp     loc_406D77
.text:00407349 ; ---------------------------------------------------------------------------
.text:00407349
.text:00407349 loc_407349:                             ; CODE XREF: sub_406830+AF5↑j
.text:00407349                 mov     [esp+2BCh+Type], eax ; size_t
.text:0040734D                 mov     [esp+2BCh+Time], ebx ; void *
.text:00407350                 call    sub_408E50
.text:00407355                 jmp     short loc_40733E
.text:00407357 ; ---------------------------------------------------------------------------
.text:00407357
.text:00407357 loc_407357:                             ; CODE XREF: sub_406830+510↑j
.text:00407357                 neg     ecx
.text:00407359                 jmp     loc_406D46
.text:0040735E ; ---------------------------------------------------------------------------
.text:0040735E
.text:0040735E loc_40735E:                             ; CODE XREF: sub_406830+4B2↑j
.text:0040735E                 lea     ebx, [esp+2BCh+var_238]
.text:00407365                 mov     [esp+2BCh+Time], ebx ; Time
.text:00407368                 call    localtime
.text:0040736D                 test    eax, eax
.text:0040736F                 mov     ecx, eax
.text:00407371                 jnz     loc_406CE8
.text:00407377                 jmp     loc_406D26
.text:0040737C ; ---------------------------------------------------------------------------
.text:0040737C
.text:0040737C loc_40737C:                             ; CODE XREF: sub_406830+3AD↑j
.text:0040737C                 test    eax, eax
.text:0040737E                 jnz     loc_406BE3
.text:00407384                 lea     eax, [esi-1]
.text:00407387                 mov     edx, esi
.text:00407389                 cmp     eax, 0Ah
.text:0040738C                 jbe     loc_406BEC
.text:00407392                 xor     edx, edx
.text:00407394                 cmp     esi, 0Ch
.text:00407397                 setz    dl
.text:0040739A                 dec     edx
.text:0040739B                 jmp     loc_406BEC
.text:004073A0 ; ---------------------------------------------------------------------------
.text:004073A0
.text:004073A0 loc_4073A0:                             ; CODE XREF: sub_406830+3A4↑j
.text:004073A0                 lea     edx, [esi-1]
.text:004073A3                 cmp     edx, 0Ah
.text:004073A6                 ja      short loc_4073B0
.text:004073A8                 lea     edx, [esi+0Ch]
.text:004073AB                 jmp     loc_406BEC
.text:004073B0 ; ---------------------------------------------------------------------------
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: sub_406830+B76↑j
.text:004073B0                 xor     edx, edx
.text:004073B2                 cmp     esi, 0Ch
.text:004073B5                 setz    dl
.text:004073B8                 dec     edx
.text:004073B9                 or      edx, 0Ch
.text:004073BC                 jmp     loc_406BEC
.text:004073C1 ; ---------------------------------------------------------------------------
.text:004073C1
.text:004073C1 loc_4073C1:                             ; CODE XREF: sub_406830+37D↑j
.text:004073C1                                         ; sub_406830+385↑j ...
.text:004073C1                 xor     edx, edx
.text:004073C3                 xor     esi, esi
.text:004073C5                 mov     [esp+2BCh+Tm.tm_sec], edx
.text:004073CC                 xor     edx, edx
.text:004073CE                 mov     [esp+2BCh+Tm.tm_min], esi
.text:004073D5                 xor     esi, esi
.text:004073D7                 mov     [esp+2BCh+Tm.tm_hour], edx
.text:004073DE                 mov     [esp+2BCh+var_E4], esi
.text:004073E5                 jmp     loc_406C17
.text:004073EA ; ---------------------------------------------------------------------------
.text:004073EA
.text:004073EA loc_4073EA:                             ; CODE XREF: sub_406830+341↑j
.text:004073EA                 cmp     eax, 44h ; 'D'
.text:004073ED                 jg      short loc_4073F9
.text:004073EF                 add     eax, 7D0h
.text:004073F4                 jmp     loc_406B77
.text:004073F9 ; ---------------------------------------------------------------------------
.text:004073F9
.text:004073F9 loc_4073F9:                             ; CODE XREF: sub_406830+BBD↑j
.text:004073F9                 add     eax, 76Ch
.text:004073FE                 jmp     loc_406B77
.text:00407403 ; ---------------------------------------------------------------------------
.text:00407403
.text:00407403 loc_407403:                             ; CODE XREF: sub_406830+338↑j
.text:00407403                 neg     eax
.text:00407405                 jmp     loc_406B77
.text:00407405 ; ---------------------------------------------------------------------------
.text:0040740A                 align 10h
.text:00407410
.text:00407410 loc_407410:                             ; CODE XREF: sub_406830+23E↑j
.text:00407410                 mov     edx, [esp+2BCh+var_E8]
.text:00407417                 mov     ecx, [esp+2BCh+var_E4]
.text:0040741E                 mov     ebp, [esp+2BCh+arg_0]
.text:00407425                 mov     [ebp+0], edx
.text:00407428                 mov     [ebp+4], ecx
.text:0040742B                 jmp     loc_406AC6
.text:00407430 ; ---------------------------------------------------------------------------
.text:00407430
.text:00407430 loc_407430:                             ; CODE XREF: sub_406830+21D↑j
.text:00407430                 mov     [esp+2BCh+Type], eax ; Str2
.text:00407434                 mov     [esp+2BCh+Time], edx ; Str1
.text:00407437                 call    strcmp
.text:0040743C                 test    eax, eax
.text:0040743E                 jnz     loc_406A53
.text:00407444                 mov     esi, 0FFFFFFFFh
.text:00407449                 xor     edi, edi
.text:0040744B                 mov     [esp+2BCh+var_A0], esi
.text:00407452                 mov     [esp+2BCh+Str2], edi
.text:00407459                 jmp     loc_406A53
.text:0040745E ; ---------------------------------------------------------------------------
.text:0040745E
.text:0040745E loc_40745E:                             ; CODE XREF: sub_406830+CD↑j
.text:0040745E                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:00407465                 cmp     edi, 64h ; 'd'
.text:00407468                 setnbe  [esp+2BCh+var_255]
.text:0040746D                 call    getenv
.text:00407472                 test    eax, eax
.text:00407474                 mov     ebx, eax
.text:00407476                 jz      short loc_4074A3
.text:00407478                 mov     [esp+2BCh+Time], eax ; Str
.text:0040747B                 call    strlen
.text:00407480                 inc     eax
.text:00407481                 cmp     eax, 64h ; 'd'
.text:00407484                 ja      loc_407548
.text:0040748A                 mov     [esp+2BCh+Size], eax ; Size
.text:0040748E                 lea     eax, [esp+2BCh+var_18C]
.text:00407495                 mov     [esp+2BCh+Type], ebx ; Src
.text:00407499                 mov     [esp+2BCh+Time], eax ; void *
.text:0040749C                 call    memcpy
.text:004074A1
.text:004074A1 loc_4074A1:                             ; CODE XREF: sub_406830+D24↓j
.text:004074A1                 mov     ebx, eax
.text:004074A3
.text:004074A3 loc_4074A3:                             ; CODE XREF: sub_406830+C46↑j
.text:004074A3                 cmp     [esp+2BCh+var_255], 0
.text:004074A8                 mov     [esp+2BCh+Block], ebx
.text:004074AC                 jnz     loc_407539
.text:004074B2                 lea     esi, [esp+2BCh+Source]
.text:004074B9
.text:004074B9 loc_4074B9:                             ; CODE XREF: sub_406830+D13↓j
.text:004074B9                 mov     ebx, [esp+2BCh+var_254]
.text:004074BD                 mov     edx, esi
.text:004074BF                 movzx   eax, byte ptr [ebx]
.text:004074C2                 cmp     al, 22h ; '"'
.text:004074C4                 jz      short loc_4074E1
.text:004074C6                 lea     esi, [esi+0]
.text:004074C9                 lea     edi, [edi+0]
.text:004074D0
.text:004074D0 loc_4074D0:                             ; CODE XREF: sub_406830+CAF↓j
.text:004074D0                 mov     ecx, edx
.text:004074D2                 inc     edx
.text:004074D3                 cmp     al, 5Ch ; '\'
.text:004074D5                 jz      short loc_407533
.text:004074D7
.text:004074D7 loc_4074D7:                             ; CODE XREF: sub_406830+D07↓j
.text:004074D7                 mov     [ecx], al
.text:004074D9                 inc     ebx
.text:004074DA                 movzx   eax, byte ptr [ebx]
.text:004074DD                 cmp     al, 22h ; '"'
.text:004074DF                 jnz     short loc_4074D0
.text:004074E1
.text:004074E1 loc_4074E1:                             ; CODE XREF: sub_406830+C94↑j
.text:004074E1                 mov     byte ptr [edx], 0
.text:004074E4                 mov     [esp+2BCh+Size], 1 ; int
.text:004074EC                 mov     [esp+2BCh+Type], esi ; Source
.text:004074F0                 mov     [esp+2BCh+Time], offset aTz_0 ; "TZ"
.text:004074F7                 call    sub_40C9B0
.text:004074FC                 test    eax, eax
.text:004074FE                 setz    [esp+2BCh+var_256]
.text:00407503                 cmp     [esp+2BCh+var_255], 0
.text:00407508                 jnz     short loc_407529
.text:0040750A
.text:0040750A loc_40750A:                             ; CODE XREF: sub_406830+D01↓j
.text:0040750A                 cmp     [esp+2BCh+var_256], 0
.text:0040750F                 jz      loc_406AC1
.text:00407515                 mov     [esp+2BCh+var_245], 1
.text:0040751A                 inc     ebx
.text:0040751B                 mov     edx, ebx
.text:0040751D                 mov     [esp+2BCh+arg_4], ebx
.text:00407524                 jmp     loc_406903
.text:00407529 ; ---------------------------------------------------------------------------
.text:00407529
.text:00407529 loc_407529:                             ; CODE XREF: sub_406830+CD8↑j
.text:00407529                 mov     [esp+2BCh+Time], esi ; Block
.text:0040752C                 call    free
.text:00407531                 jmp     short loc_40750A
.text:00407533 ; ---------------------------------------------------------------------------
.text:00407533
.text:00407533 loc_407533:                             ; CODE XREF: sub_406830+CA5↑j
.text:00407533                 inc     ebx
.text:00407534                 movzx   eax, byte ptr [ebx]
.text:00407537                 jmp     short loc_4074D7
.text:00407539 ; ---------------------------------------------------------------------------
.text:00407539
.text:00407539 loc_407539:                             ; CODE XREF: sub_406830+C7C↑j
.text:00407539                 mov     [esp+2BCh+Time], edi ; size_t
.text:0040753C                 call    sub_408CD0
.text:00407541                 mov     esi, eax
.text:00407543                 jmp     loc_4074B9
.text:00407548 ; ---------------------------------------------------------------------------
.text:00407548
.text:00407548 loc_407548:                             ; CODE XREF: sub_406830+C54↑j
.text:00407548                 mov     [esp+2BCh+Type], eax ; size_t
.text:0040754C                 mov     [esp+2BCh+Time], ebx ; void *
.text:0040754F                 call    sub_408E50
.text:00407554                 jmp     loc_4074A1
.text:00407559 ; ---------------------------------------------------------------------------
.text:00407559
.text:00407559 loc_407559:                             ; CODE XREF: sub_406830+C2↑j
.text:00407559                 inc     ebx
.text:0040755A                 movzx   eax, byte ptr [ebx]
.text:0040755D                 cmp     al, 5Ch ; '\'
.text:0040755F                 jz      short loc_407571
.text:00407561                 cmp     al, 22h ; '"'
.text:00407563                 lea     edx, [ebx+1]
.text:00407566                 jz      loc_406903
.text:0040756C                 jmp     loc_40690D
.text:00407571 ; ---------------------------------------------------------------------------
.text:00407571
.text:00407571 loc_407571:                             ; CODE XREF: sub_406830+D2F↑j
.text:00407571                 lea     edx, [ebx+1]
.text:00407574                 jmp     loc_406903
.text:00407574 ; ---------------------------------------------------------------------------
.text:00407579                 align 10h
.text:00407580
.text:00407580 loc_407580:                             ; CODE XREF: sub_406830+63↑j
.text:00407580                 mov     esi, ds:_pctype
.text:00407586                 mov     ebx, [esi]
.text:00407588                 movzx   eax, word ptr [ebx+edx*2]
.text:0040758C                 and     eax, 8
.text:0040758F                 jmp     loc_4068A9
.text:00407594 ; ---------------------------------------------------------------------------
.text:00407594
.text:00407594 loc_407594:                             ; CODE XREF: sub_406830+25↑j
.text:00407594                 lea     ebx, [esp+2BCh+var_234]
.text:0040759B                 mov     [esp+2BCh+Time], ebx
.text:0040759E                 call    sub_403C90
.text:004075A3                 xor     edx, edx
.text:004075A5                 test    eax, eax
.text:004075A7                 jnz     loc_406B21
.text:004075AD                 mov     eax, ebx
.text:004075AF                 jmp     loc_40685B
.text:004075AF sub_406830      endp
.text:004075AF
.text:004075AF ; ---------------------------------------------------------------------------
.text:004075B4                 align 10h
.text:004075C0
.text:004075C0 ; =============== S U B R O U T I N E =======================================
.text:004075C0
.text:004075C0
.text:004075C0 ; int __cdecl sub_4075C0(int, char *Str)
.text:004075C0 sub_4075C0      proc near               ; CODE XREF: sub_406420+122↑p
.text:004075C0
.text:004075C0 C               = dword ptr -2Ch
.text:004075C0 Type            = dword ptr -28h
.text:004075C0 MaxCount        = dword ptr -24h
.text:004075C0 var_18          = dword ptr -18h
.text:004075C0 var_11          = byte ptr -11h
.text:004075C0 arg_0           = dword ptr  4
.text:004075C0 Str             = dword ptr  8
.text:004075C0
.text:004075C0                 push    ebp
.text:004075C1                 push    edi
.text:004075C2                 push    esi
.text:004075C3                 push    ebx
.text:004075C4                 sub     esp, 1Ch
.text:004075C7                 mov     edi, [esp+2Ch+Str]
.text:004075CB                 mov     ebp, [esp+2Ch+arg_0]
.text:004075CF                 mov     esi, edi
.text:004075D1                 movzx   ebx, byte ptr [edi]
.text:004075D4                 test    bl, bl
.text:004075D6                 jz      short loc_407614
.text:004075D8                 nop
.text:004075D9                 lea     esi, [esi+0]
.text:004075E0
.text:004075E0 loc_4075E0:                             ; CODE XREF: sub_4075C0+52↓j
.text:004075E0                 mov     ecx, ds:__mb_cur_max
.text:004075E6                 movzx   edx, bl
.text:004075E9                 cmp     dword ptr [ecx], 1
.text:004075EC                 jz      loc_4078D0
.text:004075F2                 mov     [esp+2Ch+Type], 2 ; Type
.text:004075FA                 mov     [esp+2Ch+C], edx ; C
.text:004075FD                 call    _isctype
.text:00407602
.text:00407602 loc_407602:                             ; CODE XREF: sub_4075C0+31E↓j
.text:00407602                 test    eax, eax
.text:00407604                 jnz     loc_4078B7
.text:0040760A
.text:0040760A loc_40760A:                             ; CODE XREF: sub_4075C0+304↓j
.text:0040760A                 inc     esi
.text:0040760B                 movzx   ecx, byte ptr [esi]
.text:0040760E                 test    cl, cl
.text:00407610                 mov     bl, cl
.text:00407612                 jnz     short loc_4075E0
.text:00407614
.text:00407614 loc_407614:                             ; CODE XREF: sub_4075C0+16↑j
.text:00407614                 mov     eax, ds:Str2
.text:00407619                 mov     ebx, offset Str2
.text:0040761E                 test    eax, eax
.text:00407620                 jz      short loc_40764F
.text:00407622                 lea     esi, [esi+0]
.text:00407629                 lea     edi, [edi+0]
.text:00407630
.text:00407630 loc_407630:                             ; CODE XREF: sub_4075C0+8D↓j
.text:00407630                 mov     [esp+2Ch+Type], eax ; Str2
.text:00407634                 mov     [esp+2Ch+C], edi ; Str1
.text:00407637                 call    strcmp
.text:0040763C                 test    eax, eax
.text:0040763E                 mov     edx, ebx
.text:00407640                 jz      loc_407711
.text:00407646                 add     ebx, 0Ch
.text:00407649                 mov     eax, [ebx]
.text:0040764B                 test    eax, eax
.text:0040764D                 jnz     short loc_407630
.text:0040764F
.text:0040764F loc_40764F:                             ; CODE XREF: sub_4075C0+60↑j
.text:0040764F                 mov     [esp+2Ch+C], edi ; Str
.text:00407652                 call    strlen
.text:00407657                 mov     [esp+2Ch+var_11], 0
.text:0040765C                 cmp     eax, 3
.text:0040765F                 mov     esi, eax
.text:00407661                 jz      loc_4078AD
.text:00407667                 cmp     eax, 4
.text:0040766A                 jz      loc_4078A3
.text:00407670
.text:00407670 loc_407670:                             ; CODE XREF: sub_4075C0+2E7↓j
.text:00407670                                         ; sub_4075C0+2F2↓j
.text:00407670                 mov     edx, ds:off_405B90 ; "JANUARY"
.text:00407676                 mov     ebx, offset off_405B90 ; "JANUARY"
.text:0040767B                 test    edx, edx
.text:0040767D                 jz      short loc_4076B2
.text:0040767F                 nop
.text:00407680
.text:00407680 loc_407680:                             ; CODE XREF: sub_4075C0+F0↓j
.text:00407680                 cmp     [esp+2Ch+var_11], 0
.text:00407685                 jz      loc_407890
.text:0040768B                 mov     [esp+2Ch+MaxCount], 3 ; MaxCount
.text:00407693                 mov     ecx, [ebx]
.text:00407695                 mov     [esp+2Ch+C], edi ; Str1
.text:00407698                 mov     [esp+2Ch+Type], ecx ; Str2
.text:0040769C                 call    strncmp
.text:004076A1
.text:004076A1 loc_4076A1:                             ; CODE XREF: sub_4075C0+2DE↓j
.text:004076A1                 test    eax, eax
.text:004076A3                 jz      loc_407848
.text:004076A9                 add     ebx, 0Ch
.text:004076AC                 mov     ecx, [ebx]
.text:004076AE                 test    ecx, ecx
.text:004076B0                 jnz     short loc_407680
.text:004076B2
.text:004076B2 loc_4076B2:                             ; CODE XREF: sub_4075C0+BD↑j
.text:004076B2                 mov     eax, [ebp+74h]
.text:004076B5                 lea     ebx, [ebp+74h]
.text:004076B8                 mov     [esp+2Ch+var_18], ebx
.text:004076BC                 test    eax, eax
.text:004076BE                 jz      short loc_4076DB
.text:004076C0
.text:004076C0 loc_4076C0:                             ; CODE XREF: sub_4075C0+119↓j
.text:004076C0                 mov     [esp+2Ch+Type], eax ; Str2
.text:004076C4                 mov     [esp+2Ch+C], edi ; Str1
.text:004076C7                 call    strcmp
.text:004076CC                 test    eax, eax
.text:004076CE                 mov     edx, ebx
.text:004076D0                 jz      short loc_40770D
.text:004076D2                 add     ebx, 0Ch
.text:004076D5                 mov     eax, [ebx]
.text:004076D7                 test    eax, eax
.text:004076D9                 jnz     short loc_4076C0
.text:004076DB
.text:004076DB loc_4076DB:                             ; CODE XREF: sub_4075C0+FE↑j
.text:004076DB                 mov     eax, ds:off_405FF0
.text:004076E0                 mov     ebx, offset off_405FF0
.text:004076E5                 test    eax, eax
.text:004076E7                 jz      short loc_40770B
.text:004076E9                 lea     esi, [esi+0]
.text:004076F0
.text:004076F0 loc_4076F0:                             ; CODE XREF: sub_4075C0+149↓j
.text:004076F0                 mov     [esp+2Ch+Type], eax ; Str2
.text:004076F4                 mov     [esp+2Ch+C], edi ; Str1
.text:004076F7                 call    strcmp
.text:004076FC                 test    eax, eax
.text:004076FE                 mov     edx, ebx
.text:00407700                 jz      short loc_40770D
.text:00407702                 add     ebx, 0Ch
.text:00407705                 mov     eax, [ebx]
.text:00407707                 test    eax, eax
.text:00407709                 jnz     short loc_4076F0
.text:0040770B
.text:0040770B loc_40770B:                             ; CODE XREF: sub_4075C0+127↑j
.text:0040770B                 xor     edx, edx
.text:0040770D
.text:0040770D loc_40770D:                             ; CODE XREF: sub_4075C0+110↑j
.text:0040770D                                         ; sub_4075C0+140↑j
.text:0040770D                 test    edx, edx
.text:0040770F                 jz      short loc_40771B
.text:00407711
.text:00407711 loc_407711:                             ; CODE XREF: sub_4075C0+80↑j
.text:00407711                                         ; sub_4075C0+174↓j ...
.text:00407711                 add     esp, 1Ch
.text:00407714                 mov     eax, edx
.text:00407716                 pop     ebx
.text:00407717                 pop     esi
.text:00407718                 pop     edi
.text:00407719                 pop     ebp
.text:0040771A                 retn
.text:0040771B ; ---------------------------------------------------------------------------
.text:0040771B
.text:0040771B loc_40771B:                             ; CODE XREF: sub_4075C0+14F↑j
.text:0040771B                 mov     [esp+2Ch+C], edi ; Str1
.text:0040771E                 mov     ebx, ds:off_405AD0
.text:00407724                 mov     [esp+2Ch+Type], ebx ; Str2
.text:00407728                 call    strcmp
.text:0040772D                 test    eax, eax
.text:0040772F                 mov     edx, offset off_405AD0
.text:00407734                 jz      short loc_407711
.text:00407736                 mov     eax, ds:off_405D10 ; "YEAR"
.text:0040773B                 mov     ebx, offset off_405D10 ; "YEAR"
.text:00407740                 test    eax, eax
.text:00407742                 jz      short loc_40775F
.text:00407744
.text:00407744 loc_407744:                             ; CODE XREF: sub_4075C0+19D↓j
.text:00407744                 mov     [esp+2Ch+Type], eax ; Str2
.text:00407748                 mov     [esp+2Ch+C], edi ; Str1
.text:0040774B                 call    strcmp
.text:00407750                 test    eax, eax
.text:00407752                 mov     edx, ebx
.text:00407754                 jz      short loc_407711
.text:00407756                 add     ebx, 0Ch
.text:00407759                 mov     eax, [ebx]
.text:0040775B                 test    eax, eax
.text:0040775D                 jnz     short loc_407744
.text:0040775F
.text:0040775F loc_40775F:                             ; CODE XREF: sub_4075C0+182↑j
.text:0040775F                 cmp     byte ptr [esi+edi-1], 53h ; 'S'
.text:00407764                 jz      loc_40784F
.text:0040776A
.text:0040776A loc_40776A:                             ; CODE XREF: sub_4075C0+2C6↓j
.text:0040776A                 mov     eax, ds:off_405E10 ; "TOMORROW"
.text:0040776F                 mov     ebx, offset off_405E10 ; "TOMORROW"
.text:00407774                 test    eax, eax
.text:00407776                 jz      short loc_407793
.text:00407778
.text:00407778 loc_407778:                             ; CODE XREF: sub_4075C0+1D1↓j
.text:00407778                 mov     [esp+2Ch+Type], eax ; Str2
.text:0040777C                 mov     [esp+2Ch+C], edi ; Str1
.text:0040777F                 call    strcmp
.text:00407784                 test    eax, eax
.text:00407786                 mov     edx, ebx
.text:00407788                 jz      short loc_407711
.text:0040778A                 add     ebx, 0Ch
.text:0040778D                 mov     eax, [ebx]
.text:0040778F                 test    eax, eax
.text:00407791                 jnz     short loc_407778
.text:00407793
.text:00407793 loc_407793:                             ; CODE XREF: sub_4075C0+1B6↑j
.text:00407793                 dec     esi
.text:00407794                 jz      loc_407821
.text:0040779A
.text:0040779A loc_40779A:                             ; CODE XREF: sub_4075C0+26D↓j
.text:0040779A                 movzx   ecx, byte ptr [edi]
.text:0040779D
.text:0040779D loc_40779D:                             ; CODE XREF: sub_4075C0+283↓j
.text:0040779D                 mov     [edi], cl
.text:0040779F                 xor     ebx, ebx
.text:004077A1                 mov     edx, edi
.text:004077A3                 test    cl, cl
.text:004077A5                 mov     esi, edi
.text:004077A7                 jz      short loc_407816
.text:004077A9
.text:004077A9 loc_4077A9:                             ; CODE XREF: sub_4075C0+1F7↓j
.text:004077A9                 cmp     byte ptr [edx], 2Eh ; '.'
.text:004077AC                 jz      short loc_40781D
.text:004077AE                 inc     esi
.text:004077AF
.text:004077AF loc_4077AF:                             ; CODE XREF: sub_4075C0+25F↓j
.text:004077AF                 inc     edx
.text:004077B0                 movzx   ecx, byte ptr [edx]
.text:004077B3                 test    cl, cl
.text:004077B5                 mov     [esi], cl
.text:004077B7                 jnz     short loc_4077A9
.text:004077B9                 test    bl, bl
.text:004077BB                 jz      short loc_407816
.text:004077BD                 mov     eax, [ebp+74h]
.text:004077C0                 mov     ebx, [esp+2Ch+var_18]
.text:004077C4                 test    eax, eax
.text:004077C6                 jz      short loc_4077E3
.text:004077C8
.text:004077C8 loc_4077C8:                             ; CODE XREF: sub_4075C0+221↓j
.text:004077C8                 mov     [esp+2Ch+Type], eax ; Str2
.text:004077CC                 mov     [esp+2Ch+C], edi ; Str1
.text:004077CF                 call    strcmp
.text:004077D4                 test    eax, eax
.text:004077D6                 mov     edx, ebx
.text:004077D8                 jz      short loc_40780E
.text:004077DA                 add     ebx, 0Ch
.text:004077DD                 mov     eax, [ebx]
.text:004077DF                 test    eax, eax
.text:004077E1                 jnz     short loc_4077C8
.text:004077E3
.text:004077E3 loc_4077E3:                             ; CODE XREF: sub_4075C0+206↑j
.text:004077E3                 mov     eax, ds:off_405FF0
.text:004077E8                 mov     ebx, offset off_405FF0
.text:004077ED                 test    eax, eax
.text:004077EF                 jz      short loc_40780C
.text:004077F1
.text:004077F1 loc_4077F1:                             ; CODE XREF: sub_4075C0+24A↓j
.text:004077F1                 mov     [esp+2Ch+Type], eax ; Str2
.text:004077F5                 mov     [esp+2Ch+C], edi ; Str1
.text:004077F8                 call    strcmp
.text:004077FD                 test    eax, eax
.text:004077FF                 mov     edx, ebx
.text:00407801                 jz      short loc_40780E
.text:00407803                 add     ebx, 0Ch
.text:00407806                 mov     eax, [ebx]
.text:00407808                 test    eax, eax
.text:0040780A                 jnz     short loc_4077F1
.text:0040780C
.text:0040780C loc_40780C:                             ; CODE XREF: sub_4075C0+22F↑j
.text:0040780C                 xor     edx, edx
.text:0040780E
.text:0040780E loc_40780E:                             ; CODE XREF: sub_4075C0+218↑j
.text:0040780E                                         ; sub_4075C0+241↑j
.text:0040780E                 test    edx, edx
.text:00407810                 jnz     loc_407711
.text:00407816
.text:00407816 loc_407816:                             ; CODE XREF: sub_4075C0+1E7↑j
.text:00407816                                         ; sub_4075C0+1FB↑j
.text:00407816                 xor     edx, edx
.text:00407818                 jmp     loc_407711
.text:0040781D ; ---------------------------------------------------------------------------
.text:0040781D
.text:0040781D loc_40781D:                             ; CODE XREF: sub_4075C0+1EC↑j
.text:0040781D                 mov     bl, 1
.text:0040781F                 jmp     short loc_4077AF
.text:00407821 ; ---------------------------------------------------------------------------
.text:00407821
.text:00407821 loc_407821:                             ; CODE XREF: sub_4075C0+1D4↑j
.text:00407821                 mov     eax, ds:off_406290 ; "ABCDEFGHIKLMNOPQRSTUVWXYZ"
.text:00407826                 mov     ebx, offset off_406290 ; "ABCDEFGHIKLMNOPQRSTUVWXYZ"
.text:0040782B                 test    eax, eax
.text:0040782D                 jz      loc_40779A
.text:00407833                 movzx   ecx, byte ptr [edi]
.text:00407836
.text:00407836 loc_407836:                             ; CODE XREF: sub_4075C0+281↓j
.text:00407836                 cmp     cl, [eax]
.text:00407838                 jz      short loc_407848
.text:0040783A                 add     ebx, 0Ch
.text:0040783D                 mov     eax, [ebx]
.text:0040783F                 test    eax, eax
.text:00407841                 jnz     short loc_407836
.text:00407843                 jmp     loc_40779D
.text:00407848 ; ---------------------------------------------------------------------------
.text:00407848
.text:00407848 loc_407848:                             ; CODE XREF: sub_4075C0+E3↑j
.text:00407848                                         ; sub_4075C0+278↑j
.text:00407848                 mov     edx, ebx
.text:0040784A                 jmp     loc_407711
.text:0040784F ; ---------------------------------------------------------------------------
.text:0040784F
.text:0040784F loc_40784F:                             ; CODE XREF: sub_4075C0+1A4↑j
.text:0040784F                 mov     byte ptr [esi+edi-1], 0
.text:00407854                 mov     ebx, offset off_405D10 ; "YEAR"
.text:00407859                 mov     eax, ds:off_405D10 ; "YEAR"
.text:0040785E                 test    eax, eax
.text:00407860                 jz      short loc_407881
.text:00407862
.text:00407862 loc_407862:                             ; CODE XREF: sub_4075C0+2BF↓j
.text:00407862                 mov     [esp+2Ch+Type], eax ; Str2
.text:00407866                 mov     [esp+2Ch+C], edi ; Str1
.text:00407869                 call    strcmp
.text:0040786E                 test    eax, eax
.text:00407870                 mov     edx, ebx
.text:00407872                 jz      loc_407711
.text:00407878                 add     ebx, 0Ch
.text:0040787B                 mov     eax, [ebx]
.text:0040787D                 test    eax, eax
.text:0040787F                 jnz     short loc_407862
.text:00407881
.text:00407881 loc_407881:                             ; CODE XREF: sub_4075C0+2A0↑j
.text:00407881                 mov     byte ptr [esi+edi-1], 53h ; 'S'
.text:00407886                 jmp     loc_40776A
.text:00407886 ; ---------------------------------------------------------------------------
.text:0040788B                 align 10h
.text:00407890
.text:00407890 loc_407890:                             ; CODE XREF: sub_4075C0+C5↑j
.text:00407890                 mov     edx, [ebx]
.text:00407892                 mov     [esp+2Ch+C], edi ; Str1
.text:00407895                 mov     [esp+2Ch+Type], edx ; Str2
.text:00407899                 call    strcmp
.text:0040789E                 jmp     loc_4076A1
.text:004078A3 ; ---------------------------------------------------------------------------
.text:004078A3
.text:004078A3 loc_4078A3:                             ; CODE XREF: sub_4075C0+AA↑j
.text:004078A3                 cmp     byte ptr [edi+3], 2Eh ; '.'
.text:004078A7                 jnz     loc_407670
.text:004078AD
.text:004078AD loc_4078AD:                             ; CODE XREF: sub_4075C0+A1↑j
.text:004078AD                 mov     [esp+2Ch+var_11], 1
.text:004078B2                 jmp     loc_407670
.text:004078B7 ; ---------------------------------------------------------------------------
.text:004078B7
.text:004078B7 loc_4078B7:                             ; CODE XREF: sub_4075C0+44↑j
.text:004078B7                 movzx   edx, bl
.text:004078BA                 mov     [esp+2Ch+C], edx ; C
.text:004078BD                 call    toupper
.text:004078C2                 mov     [esi], al
.text:004078C4                 jmp     loc_40760A
.text:004078C4 ; ---------------------------------------------------------------------------
.text:004078C9                 align 10h
.text:004078D0
.text:004078D0 loc_4078D0:                             ; CODE XREF: sub_4075C0+2C↑j
.text:004078D0                 mov     eax, ds:_pctype
.text:004078D5                 mov     ecx, [eax]
.text:004078D7                 movzx   eax, word ptr [ecx+edx*2]
.text:004078DB                 and     eax, 2
.text:004078DE                 jmp     loc_407602
.text:004078DE sub_4075C0      endp
.text:004078DE
.text:004078DE ; ---------------------------------------------------------------------------
.text:004078E3                 align 10h
.text:004078F0 aLiteral        db 'literal',0          ; DATA XREF: .text:00407930↓o
.text:004078F8 aShell          db 'shell',0            ; DATA XREF: .text:00407934↓o
.text:004078FE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00407938↓o
.text:0040790B aC              db 'c',0                ; DATA XREF: .text:0040793C↓o
.text:0040790D aEscape         db 'escape',0           ; DATA XREF: .text:00407940↓o
.text:00407914 aLocale         db 'locale',0           ; DATA XREF: .text:00407944↓o
.text:0040791B aClocale        db 'clocale',0          ; DATA XREF: .text:00407948↓o
.text:00407923                 align 10h
.text:00407930                 dd offset aLiteral      ; "literal"
.text:00407934                 dd offset aShell        ; "shell"
.text:00407938                 dd offset aShellAlways  ; "shell-always"
.text:0040793C                 dd offset aC            ; "c"
.text:00407940                 dd offset aEscape       ; "escape"
.text:00407944                 dd offset aLocale       ; "locale"
.text:00407948                 dd offset aClocale      ; "clocale"
.text:0040794C                 dd 2 dup(0)
.text:00407954                 dd 1, 2, 3, 4, 5, 6
.text:0040796C asc_40796C:                             ; DATA XREF: sub_407980+7E↓o
.text:0040796C                                         ; sub_407980+A39↓o ...
.text:0040796C                 text "UTF-16LE", '"',27h,'`'
.text:00407972                 align 10h
.text:00407980
.text:00407980 ; =============== S U B R O U T I N E =======================================
.text:00407980
.text:00407980
.text:00407980 ; int __cdecl sub_407980(int, int, char *Str, int, int, int)
.text:00407980 sub_407980      proc near               ; CODE XREF: sub_407980+43A↓p
.text:00407980                                         ; .text:00408543↓p ...
.text:00407980
.text:00407980 C               = dword ptr -4Ch
.text:00407980 Type            = dword ptr -48h
.text:00407980 SizeInBytes     = dword ptr -44h
.text:00407980 State           = dword ptr -40h
.text:00407980 var_3C          = dword ptr -3Ch
.text:00407980 var_38          = dword ptr -38h
.text:00407980 var_34          = dword ptr -34h
.text:00407980 var_30          = dword ptr -30h
.text:00407980 var_29          = byte ptr -29h
.text:00407980 var_28          = dword ptr -28h
.text:00407980 var_22          = byte ptr -22h
.text:00407980 var_21          = byte ptr -21h
.text:00407980 var_20          = dword ptr -20h
.text:00407980 var_1C          = dword ptr -1Ch
.text:00407980 var_18          = mbstate_t ptr -18h
.text:00407980 arg_0           = dword ptr  4
.text:00407980 arg_4           = dword ptr  8
.text:00407980 Str             = dword ptr  0Ch
.text:00407980 arg_C           = dword ptr  10h
.text:00407980 arg_10          = dword ptr  14h
.text:00407980 arg_14          = dword ptr  18h
.text:00407980
.text:00407980                 push    ebp
.text:00407981                 push    edi
.text:00407982                 push    esi
.text:00407983                 push    ebx
.text:00407984                 sub     esp, 3Ch
.text:00407987                 mov     edx, ds:__mb_cur_max
.text:0040798D                 mov     [esp+4Ch+var_34], 0
.text:00407995                 mov     [esp+4Ch+var_1C], 0
.text:0040799D                 cmp     dword ptr [edx], 1
.text:004079A0                 mov     [esp+4Ch+var_20], 0
.text:004079A8                 mov     [esp+4Ch+var_21], 0
.text:004079AD                 setz    [esp+4Ch+var_22]
.text:004079B2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004079B7                 ja      short def_4079BD ; jumptable 004079BD default case, cases 0,1
.text:004079B9                 mov     edx, [esp+4Ch+arg_10]
.text:004079BD                 jmp     ds:jpt_4079BD[edx*4] ; switch jump
.text:004079BD ; ---------------------------------------------------------------------------
.text:004079C4 jpt_4079BD      dd offset def_4079BD    ; DATA XREF: sub_407980+3D↑r
.text:004079C4                 dd offset def_4079BD    ; jump table for switch statement
.text:004079C4                 dd offset loc_408305
.text:004079C4                 dd offset loc_4079E0
.text:004079C4                 dd offset loc_40832B
.text:004079C4                 dd offset loc_408335
.text:004079C4                 dd offset loc_408335
.text:004079E0 ; ---------------------------------------------------------------------------
.text:004079E0
.text:004079E0 loc_4079E0:                             ; CODE XREF: sub_407980+3D↑j
.text:004079E0                                         ; DATA XREF: sub_407980:jpt_4079BD↑o
.text:004079E0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004079BD case 3
.text:004079E4                 cmp     [esp+4Ch+var_34], eax
.text:004079E8                 jnb     short loc_4079F1
.text:004079EA                 mov     ebx, [esp+4Ch+arg_0]
.text:004079EE                 mov     byte ptr [ebx], 22h ; '"'
.text:004079F1
.text:004079F1 loc_4079F1:                             ; CODE XREF: sub_407980+68↑j
.text:004079F1                 mov     [esp+4Ch+var_34], 1
.text:004079F9                 mov     [esp+4Ch+var_21], 1
.text:004079FE                 mov     [esp+4Ch+var_1C], offset asc_40796C ; "\"'`"
.text:00407A06
.text:00407A06 loc_407A06:                             ; CODE XREF: sub_407980+9A6↓j
.text:00407A06                 mov     [esp+4Ch+var_20], 1
.text:00407A0E
.text:00407A0E def_4079BD:                             ; CODE XREF: sub_407980+37↑j
.text:00407A0E                                         ; sub_407980+3D↑j ...
.text:00407A0E                 xor     ebp, ebp        ; jumptable 004079BD default case, cases 0,1
.text:00407A10
.text:00407A10 loc_407A10:                             ; CODE XREF: sub_407980+3DB↓j
.text:00407A10                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407A15                 jz      loc_4082F7
.text:00407A1B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00407A1F
.text:00407A1F loc_407A1F:                             ; CODE XREF: sub_407980+980↓j
.text:00407A1F                 jz      loc_40828E
.text:00407A25                 cmp     [esp+4Ch+var_21], 0
.text:00407A2A                 jz      short loc_407A70
.text:00407A2C                 mov     esi, [esp+4Ch+var_20]
.text:00407A30                 test    esi, esi
.text:00407A32                 jz      short loc_407A70
.text:00407A34                 mov     ecx, [esp+4Ch+var_20]
.text:00407A38                 lea     edi, [ecx+ebp]
.text:00407A3B                 cmp     edi, [esp+4Ch+arg_C]
.text:00407A3F                 ja      short loc_407A70
.text:00407A41                 cld
.text:00407A42                 mov     ebx, [esp+4Ch+Str]
.text:00407A46                 mov     edi, [esp+4Ch+var_1C]
.text:00407A4A                 add     ebx, ebp
.text:00407A4C                 mov     esi, ebx
.text:00407A4E                 cmp     ecx, ecx
.text:00407A50                 repe cmpsb
.text:00407A52                 jnz     short loc_407A70
.text:00407A54                 mov     edx, [esp+4Ch+arg_4]
.text:00407A58                 cmp     [esp+4Ch+var_34], edx
.text:00407A5C                 jnb     short loc_407A6A
.text:00407A5E                 mov     ecx, [esp+4Ch+arg_0]
.text:00407A62                 mov     eax, [esp+4Ch+var_34]
.text:00407A66                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00407A6A
.text:00407A6A loc_407A6A:                             ; CODE XREF: sub_407980+DC↑j
.text:00407A6A                 inc     [esp+4Ch+var_34]
.text:00407A6E                 mov     esi, esi
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: sub_407980+AA↑j
.text:00407A70                                         ; sub_407980+B2↑j ...
.text:00407A70                 mov     edi, [esp+4Ch+Str]
.text:00407A74                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00407A79                 movzx   eax, bl
.text:00407A7C                 cmp     eax, 7Eh        ; switch 127 cases
.text:00407A7F                 ja      def_407A85      ; jumptable 00407A85 default case, cases 1-6,14-31,64
.text:00407A85                 jmp     ds:jpt_407A85[eax*4] ; switch jump
.text:00407A85 ; ---------------------------------------------------------------------------
.text:00407A8C jpt_407A85      dd offset loc_407C88, offset def_407A85, offset def_407A85
.text:00407A8C                                         ; DATA XREF: sub_407980+105↑r
.text:00407A8C                 dd offset def_407A85, offset def_407A85, offset def_407A85 ; jump table for switch statement
.text:00407A8C                 dd offset def_407A85, offset loc_407D60, offset loc_407D7E
.text:00407A8C                 dd offset loc_407D82, offset loc_407DC7, offset loc_407DCB
.text:00407A8C                 dd offset loc_407DCF, offset loc_407DD3, offset def_407A85
.text:00407A8C                 dd offset def_407A85, offset def_407A85, offset def_407A85
.text:00407A8C                 dd offset def_407A85, offset def_407A85, offset def_407A85
.text:00407A8C                 dd offset def_407A85, offset def_407A85, offset def_407A85
.text:00407A8C                 dd offset def_407A85, offset def_407A85, offset def_407A85
.text:00407A8C                 dd offset def_407A85, offset def_407A85, offset def_407A85
.text:00407A8C                 dd offset def_407A85, offset def_407A85, offset loc_408258
.text:00407A8C                 dd offset loc_408258, offset loc_408258, offset loc_40827A
.text:00407A8C                 dd offset loc_408258, offset def_407E82, offset loc_408258
.text:00407A8C                 dd offset loc_407DD7, offset loc_408258, offset loc_408258
.text:00407A8C                 dd offset loc_408258, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset loc_408258
.text:00407A8C                 dd offset loc_408258, offset loc_408258, offset loc_408258
.text:00407A8C                 dd offset loc_407E3C, offset def_407A85, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset loc_408258, offset loc_408251
.text:00407A8C                 dd offset def_407E82, offset loc_408258, offset def_407E82
.text:00407A8C                 dd offset loc_408258, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset def_407E82, offset def_407E82, offset def_407E82
.text:00407A8C                 dd offset loc_408268, offset loc_408258, offset loc_408268
.text:00407A8C                 dd offset loc_40827A
.text:00407C88 ; ---------------------------------------------------------------------------
.text:00407C88
.text:00407C88 loc_407C88:                             ; CODE XREF: sub_407980+105↑j
.text:00407C88                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407C88                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407A85 case 0
.text:00407C8D                 lea     eax, [ebp+1]
.text:00407C90                 jz      loc_407D40
.text:00407C96                 mov     esi, [esp+4Ch+arg_4]
.text:00407C9A                 cmp     [esp+4Ch+var_34], esi
.text:00407C9E                 jnb     short loc_407CAC
.text:00407CA0                 mov     eax, [esp+4Ch+arg_0]
.text:00407CA4                 mov     ebx, [esp+4Ch+var_34]
.text:00407CA8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00407CAC
.text:00407CAC loc_407CAC:                             ; CODE XREF: sub_407980+31E↑j
.text:00407CAC                 inc     [esp+4Ch+var_34]
.text:00407CB0                 mov     edx, [esp+4Ch+arg_4]
.text:00407CB4                 cmp     [esp+4Ch+var_34], edx
.text:00407CB8                 jnb     short loc_407CC6
.text:00407CBA                 mov     edi, [esp+4Ch+arg_0]
.text:00407CBE                 mov     ecx, [esp+4Ch+var_34]
.text:00407CC2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00407CC6
.text:00407CC6 loc_407CC6:                             ; CODE XREF: sub_407980+338↑j
.text:00407CC6                 inc     [esp+4Ch+var_34]
.text:00407CCA                 mov     esi, [esp+4Ch+arg_4]
.text:00407CCE                 cmp     [esp+4Ch+var_34], esi
.text:00407CD2                 jnb     short loc_407CE0
.text:00407CD4                 mov     ebx, [esp+4Ch+arg_0]
.text:00407CD8                 mov     eax, [esp+4Ch+var_34]
.text:00407CDC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00407CE0
.text:00407CE0 loc_407CE0:                             ; CODE XREF: sub_407980+352↑j
.text:00407CE0                 inc     [esp+4Ch+var_34]
.text:00407CE4                 mov     bl, 30h ; '0'
.text:00407CE6                 lea     esi, [esi+0]
.text:00407CE9                 lea     edi, [edi+0]
.text:00407CF0
.text:00407CF0 def_407E82:                             ; CODE XREF: sub_407980+105↑j
.text:00407CF0                                         ; sub_407980+463↓j ...
.text:00407CF0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407CF0                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407CF5                 lea     eax, [ebp+1]
.text:00407CF8                 jz      short loc_407D40
.text:00407CFA                 mov     cl, bl
.text:00407CFC                 mov     edi, [esp+4Ch+arg_14]
.text:00407D00                 mov     esi, 1
.text:00407D05                 shr     cl, 5
.text:00407D08                 movzx   edx, cl
.text:00407D0B                 mov     ecx, ebx
.text:00407D0D                 and     ecx, 1Fh
.text:00407D10                 shl     esi, cl
.text:00407D12                 test    [edi+edx*4+4], esi
.text:00407D16                 jz      short loc_407D32
.text:00407D18
.text:00407D18 loc_407D18:                             ; CODE XREF: sub_407980+3FC↓j
.text:00407D18                 mov     edx, [esp+4Ch+arg_4]
.text:00407D1C                 cmp     [esp+4Ch+var_34], edx
.text:00407D20                 jnb     short loc_407D2E
.text:00407D22                 mov     edi, [esp+4Ch+arg_0]
.text:00407D26                 mov     esi, [esp+4Ch+var_34]
.text:00407D2A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00407D2E
.text:00407D2E loc_407D2E:                             ; CODE XREF: sub_407980+3A0↑j
.text:00407D2E                 inc     [esp+4Ch+var_34]
.text:00407D32
.text:00407D32 loc_407D32:                             ; CODE XREF: sub_407980+396↑j
.text:00407D32                 lea     eax, [ebp+1]
.text:00407D35                 lea     esi, [esi+0]
.text:00407D39                 lea     edi, [edi+0]
.text:00407D40
.text:00407D40 loc_407D40:                             ; CODE XREF: sub_407980+310↑j
.text:00407D40                                         ; sub_407980+378↑j ...
.text:00407D40                 mov     ebp, [esp+4Ch+arg_4]
.text:00407D44                 cmp     [esp+4Ch+var_34], ebp
.text:00407D48                 jnb     short loc_407D55
.text:00407D4A                 mov     edx, [esp+4Ch+arg_0]
.text:00407D4E                 mov     ecx, [esp+4Ch+var_34]
.text:00407D52                 mov     [ecx+edx], bl
.text:00407D55
.text:00407D55 loc_407D55:                             ; CODE XREF: sub_407980+3C8↑j
.text:00407D55                 inc     [esp+4Ch+var_34]
.text:00407D59                 mov     ebp, eax
.text:00407D5B                 jmp     loc_407A10
.text:00407D60 ; ---------------------------------------------------------------------------
.text:00407D60
.text:00407D60 loc_407D60:                             ; CODE XREF: sub_407980+105↑j
.text:00407D60                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407D60                 mov     dl, 61h ; 'a'   ; jumptable 00407A85 case 7
.text:00407D62                 lea     esi, [esi+0]
.text:00407D69                 lea     edi, [edi+0]
.text:00407D70
.text:00407D70 loc_407D70:                             ; CODE XREF: sub_407980+400↓j
.text:00407D70                                         ; sub_407980+409↓j ...
.text:00407D70                 cmp     [esp+4Ch+var_21], 0
.text:00407D75                 lea     eax, [ebp+1]
.text:00407D78                 jz      short loc_407D40
.text:00407D7A                 mov     bl, dl
.text:00407D7C                 jmp     short loc_407D18
.text:00407D7E ; ---------------------------------------------------------------------------
.text:00407D7E
.text:00407D7E loc_407D7E:                             ; CODE XREF: sub_407980+105↑j
.text:00407D7E                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407D7E                 mov     dl, 62h ; 'b'   ; jumptable 00407A85 case 8
.text:00407D80                 jmp     short loc_407D70
.text:00407D82 ; ---------------------------------------------------------------------------
.text:00407D82
.text:00407D82 loc_407D82:                             ; CODE XREF: sub_407980+105↑j
.text:00407D82                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407D82                 mov     dl, 74h ; 't'   ; jumptable 00407A85 case 9
.text:00407D84
.text:00407D84 loc_407D84:                             ; CODE XREF: sub_407980+449↓j
.text:00407D84                                         ; sub_407980+455↓j ...
.text:00407D84                 cmp     [esp+4Ch+arg_10], 1
.text:00407D89                 jnz     short loc_407D70
.text:00407D8B
.text:00407D8B loc_407D8B:                             ; CODE XREF: sub_407980+45C↓j
.text:00407D8B                                         ; sub_407980+4C1↓j ...
.text:00407D8B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00408152 cases 91,92,94,96,124
.text:00407D93                 mov     eax, [esp+4Ch+arg_14]
.text:00407D97                 mov     edx, [esp+4Ch+arg_C]
.text:00407D9B                 mov     ecx, [esp+4Ch+Str]
.text:00407D9F                 mov     ebx, [esp+4Ch+arg_4]
.text:00407DA3                 mov     [esp+4Ch+var_38], eax ; int
.text:00407DA7                 mov     ebp, [esp+4Ch+arg_0]
.text:00407DAB                 mov     [esp+4Ch+State], edx ; int
.text:00407DAF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00407DB3                 mov     [esp+4Ch+Type], ebx ; int
.text:00407DB7                 mov     [esp+4Ch+C], ebp ; int
.text:00407DBA                 call    sub_407980
.text:00407DBF
.text:00407DBF loc_407DBF:                             ; CODE XREF: sub_407980+972↓j
.text:00407DBF                 add     esp, 3Ch
.text:00407DC2                 pop     ebx
.text:00407DC3                 pop     esi
.text:00407DC4                 pop     edi
.text:00407DC5                 pop     ebp
.text:00407DC6                 retn
.text:00407DC7 ; ---------------------------------------------------------------------------
.text:00407DC7
.text:00407DC7 loc_407DC7:                             ; CODE XREF: sub_407980+105↑j
.text:00407DC7                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407DC7                 mov     dl, 6Eh ; 'n'   ; jumptable 00407A85 case 10
.text:00407DC9                 jmp     short loc_407D84
.text:00407DCB ; ---------------------------------------------------------------------------
.text:00407DCB
.text:00407DCB loc_407DCB:                             ; CODE XREF: sub_407980+105↑j
.text:00407DCB                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407DCB                 mov     dl, 76h ; 'v'   ; jumptable 00407A85 case 11
.text:00407DCD                 jmp     short loc_407D70
.text:00407DCF ; ---------------------------------------------------------------------------
.text:00407DCF
.text:00407DCF loc_407DCF:                             ; CODE XREF: sub_407980+105↑j
.text:00407DCF                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407DCF                 mov     dl, 66h ; 'f'   ; jumptable 00407A85 case 12
.text:00407DD1                 jmp     short loc_407D70
.text:00407DD3 ; ---------------------------------------------------------------------------
.text:00407DD3
.text:00407DD3 loc_407DD3:                             ; CODE XREF: sub_407980+105↑j
.text:00407DD3                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407DD3                 mov     dl, 72h ; 'r'   ; jumptable 00407A85 case 13
.text:00407DD5                 jmp     short loc_407D84
.text:00407DD7 ; ---------------------------------------------------------------------------
.text:00407DD7
.text:00407DD7 loc_407DD7:                             ; CODE XREF: sub_407980+105↑j
.text:00407DD7                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407DD7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407A85 case 39
.text:00407DDC                 jz      short loc_407D8B ; jumptable 00408152 cases 91,92,94,96,124
.text:00407DDE                 cmp     [esp+4Ch+arg_10], 2
.text:00407DE3                 jnz     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407DE3                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407DE9                 mov     edx, [esp+4Ch+arg_4]
.text:00407DED                 cmp     [esp+4Ch+var_34], edx
.text:00407DF1                 jnb     short loc_407DFF
.text:00407DF3                 mov     ecx, [esp+4Ch+arg_0]
.text:00407DF7                 mov     edi, [esp+4Ch+var_34]
.text:00407DFB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00407DFF
.text:00407DFF loc_407DFF:                             ; CODE XREF: sub_407980+471↑j
.text:00407DFF                 inc     [esp+4Ch+var_34]
.text:00407E03                 mov     eax, [esp+4Ch+arg_4]
.text:00407E07                 cmp     [esp+4Ch+var_34], eax
.text:00407E0B                 jnb     short loc_407E19
.text:00407E0D                 mov     esi, [esp+4Ch+arg_0]
.text:00407E11                 mov     edx, [esp+4Ch+var_34]
.text:00407E15                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00407E19
.text:00407E19 loc_407E19:                             ; CODE XREF: sub_407980+48B↑j
.text:00407E19                 inc     [esp+4Ch+var_34]
.text:00407E1D                 mov     edi, [esp+4Ch+arg_4]
.text:00407E21                 cmp     [esp+4Ch+var_34], edi
.text:00407E25                 jnb     short loc_407E33
.text:00407E27                 mov     ecx, [esp+4Ch+arg_0]
.text:00407E2B                 mov     eax, [esp+4Ch+var_34]
.text:00407E2F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00407E33
.text:00407E33 loc_407E33:                             ; CODE XREF: sub_407980+4A5↑j
.text:00407E33                                         ; sub_407980+5C4↓j ...
.text:00407E33                 inc     [esp+4Ch+var_34]
.text:00407E37                 jmp     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407E37                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407E3C ; ---------------------------------------------------------------------------
.text:00407E3C
.text:00407E3C loc_407E3C:                             ; CODE XREF: sub_407980+105↑j
.text:00407E3C                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00407E3C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407A85 case 63
.text:00407E41                 jz      loc_407D8B      ; jumptable 00408152 cases 91,92,94,96,124
.text:00407E47                 cmp     [esp+4Ch+arg_10], 3
.text:00407E4C                 jnz     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407E4C                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407E52                 lea     edx, [ebp+2]
.text:00407E55                 cmp     edx, [esp+4Ch+arg_C]
.text:00407E59                 jnb     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407E59                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407E5F                 mov     esi, [esp+4Ch+Str]
.text:00407E63                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00407E68                 jnz     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407E68                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407E6E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00407E73                 movsx   eax, cl
.text:00407E76                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00407E79                 cmp     eax, 1Dh
.text:00407E7C                 ja      def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407E7C                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407E82                 jmp     ds:jpt_407E82[eax*4] ; switch jump
.text:00407E82 ; ---------------------------------------------------------------------------
.text:00407E89                 align 4
.text:00407E8C jpt_407E82      dd offset loc_407F04    ; DATA XREF: sub_407980+502↑r
.text:00407E8C                 dd offset def_407E82    ; jump table for switch statement
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset loc_407F04
.text:00407E8C                 dd offset loc_407F04
.text:00407E8C                 dd offset loc_407F04
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset loc_407F04
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset loc_407F04
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset def_407E82
.text:00407E8C                 dd offset loc_407F04
.text:00407E8C                 dd offset loc_407F04
.text:00407E8C                 dd offset loc_407F04
.text:00407F04 ; ---------------------------------------------------------------------------
.text:00407F04
.text:00407F04 loc_407F04:                             ; CODE XREF: sub_407980+502↑j
.text:00407F04                                         ; DATA XREF: sub_407980:jpt_407E82↑o
.text:00407F04                 mov     ebp, edx        ; jumptable 00407E82 cases 33,39-41,45,47,60-62
.text:00407F06                 mov     bl, cl
.text:00407F08                 mov     edx, [esp+4Ch+arg_4]
.text:00407F0C                 cmp     [esp+4Ch+var_34], edx
.text:00407F10                 jnb     short loc_407F1E
.text:00407F12                 mov     ecx, [esp+4Ch+arg_0]
.text:00407F16                 mov     edi, [esp+4Ch+var_34]
.text:00407F1A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00407F1E
.text:00407F1E loc_407F1E:                             ; CODE XREF: sub_407980+590↑j
.text:00407F1E                 inc     [esp+4Ch+var_34]
.text:00407F22                 mov     eax, [esp+4Ch+arg_4]
.text:00407F26                 cmp     [esp+4Ch+var_34], eax
.text:00407F2A                 jnb     short loc_407F38
.text:00407F2C                 mov     edx, [esp+4Ch+arg_0]
.text:00407F30                 mov     esi, [esp+4Ch+var_34]
.text:00407F34                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00407F38
.text:00407F38 loc_407F38:                             ; CODE XREF: sub_407980+5AA↑j
.text:00407F38                 inc     [esp+4Ch+var_34]
.text:00407F3C                 mov     edi, [esp+4Ch+arg_4]
.text:00407F40                 cmp     [esp+4Ch+var_34], edi
.text:00407F44                 jnb     loc_407E33
.text:00407F4A                 mov     eax, [esp+4Ch+arg_0]
.text:00407F4E                 mov     ecx, [esp+4Ch+var_34]
.text:00407F52                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00407F56                 jmp     loc_407E33
.text:00407F56 ; ---------------------------------------------------------------------------
.text:00407F5B                 align 10h
.text:00407F60
.text:00407F60 def_407A85:                             ; CODE XREF: sub_407980+FF↑j
.text:00407F60                                         ; sub_407980+105↑j
.text:00407F60                                         ; DATA XREF: ...
.text:00407F60                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00407A85 default case, cases 1-6,14-31,64
.text:00407F65                 jz      loc_408090
.text:00407F6B                 mov     [esp+4Ch+var_28], 1
.text:00407F73                 mov     esi, ds:__mb_cur_max
.text:00407F79                 movzx   edx, bl
.text:00407F7C                 cmp     dword ptr [esi], 1
.text:00407F7F                 jz      loc_408074
.text:00407F85                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407F8D                 mov     [esp+4Ch+C], edx ; C
.text:00407F90                 call    _isctype
.text:00407F95
.text:00407F95 loc_407F95:                             ; CODE XREF: sub_407980+705↓j
.text:00407F95                 test    eax, eax
.text:00407F97                 setnz   [esp+4Ch+var_29]
.text:00407F9C
.text:00407F9C loc_407F9C:                             ; CODE XREF: sub_407980+7A5↓j
.text:00407F9C                 cmp     [esp+4Ch+var_21], 0
.text:00407FA1                 lea     eax, [ebp+1]
.text:00407FA4                 jz      loc_407D40
.text:00407FAA                 cmp     [esp+4Ch+var_29], 0
.text:00407FAF                 jnz     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00407FAF                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00407FB5
.text:00407FB5 loc_407FB5:                             ; CODE XREF: sub_407980+7AB↓j
.text:00407FB5                 mov     eax, [esp+4Ch+var_28]
.text:00407FB9                 lea     edx, [eax+ebp]
.text:00407FBC                 lea     esi, [esi+0]
.text:00407FC0
.text:00407FC0 loc_407FC0:                             ; CODE XREF: sub_407980+6EF↓j
.text:00407FC0                 cmp     [esp+4Ch+var_21], 0
.text:00407FC5                 jz      short loc_408040
.text:00407FC7                 cmp     [esp+4Ch+var_29], 0
.text:00407FCC                 jnz     short loc_408040
.text:00407FCE                 mov     edi, [esp+4Ch+arg_4]
.text:00407FD2                 cmp     [esp+4Ch+var_34], edi
.text:00407FD6                 jnb     short loc_407FE4
.text:00407FD8                 mov     esi, [esp+4Ch+arg_0]
.text:00407FDC                 mov     eax, [esp+4Ch+var_34]
.text:00407FE0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00407FE4
.text:00407FE4 loc_407FE4:                             ; CODE XREF: sub_407980+656↑j
.text:00407FE4                 inc     [esp+4Ch+var_34]
.text:00407FE8                 mov     ecx, [esp+4Ch+arg_4]
.text:00407FEC                 cmp     [esp+4Ch+var_34], ecx
.text:00407FF0                 jnb     short loc_408005
.text:00407FF2                 mov     cl, bl
.text:00407FF4                 mov     esi, [esp+4Ch+arg_0]
.text:00407FF8                 mov     edi, [esp+4Ch+var_34]
.text:00407FFC                 shr     cl, 6
.text:00407FFF                 add     cl, 30h ; '0'
.text:00408002                 mov     [edi+esi], cl
.text:00408005
.text:00408005 loc_408005:                             ; CODE XREF: sub_407980+670↑j
.text:00408005                 inc     [esp+4Ch+var_34]
.text:00408009                 mov     edi, [esp+4Ch+arg_4]
.text:0040800D                 cmp     [esp+4Ch+var_34], edi
.text:00408011                 jnb     short loc_408029
.text:00408013                 mov     cl, bl
.text:00408015                 mov     esi, [esp+4Ch+arg_0]
.text:00408019                 shr     cl, 3
.text:0040801C                 mov     edi, [esp+4Ch+var_34]
.text:00408020                 and     cl, 7
.text:00408023                 add     cl, 30h ; '0'
.text:00408026                 mov     [edi+esi], cl
.text:00408029
.text:00408029 loc_408029:                             ; CODE XREF: sub_407980+691↑j
.text:00408029                 inc     [esp+4Ch+var_34]
.text:0040802D                 and     bl, 7
.text:00408030                 add     bl, 30h ; '0'
.text:00408033                 lea     esi, [esi+0]
.text:00408039                 lea     edi, [edi+0]
.text:00408040
.text:00408040 loc_408040:                             ; CODE XREF: sub_407980+645↑j
.text:00408040                                         ; sub_407980+64C↑j
.text:00408040                 lea     eax, [ebp+1]
.text:00408043                 cmp     edx, eax
.text:00408045                 jbe     loc_407D40
.text:0040804B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040804F                 cmp     [esp+4Ch+var_34], ebp
.text:00408053                 jnb     short loc_408060
.text:00408055                 mov     ecx, [esp+4Ch+arg_0]
.text:00408059                 mov     edi, [esp+4Ch+var_34]
.text:0040805D                 mov     [edi+ecx], bl
.text:00408060
.text:00408060 loc_408060:                             ; CODE XREF: sub_407980+6D3↑j
.text:00408060                 inc     [esp+4Ch+var_34]
.text:00408064                 mov     ebp, eax
.text:00408066                 mov     eax, [esp+4Ch+Str]
.text:0040806A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040806F                 jmp     loc_407FC0
.text:00408074 ; ---------------------------------------------------------------------------
.text:00408074
.text:00408074 loc_408074:                             ; CODE XREF: sub_407980+5FF↑j
.text:00408074                 mov     ecx, ds:_pctype
.text:0040807A                 mov     edi, [ecx]
.text:0040807C                 movzx   eax, word ptr [edi+edx*2]
.text:00408080                 and     eax, 157h
.text:00408085                 jmp     loc_407F95
.text:00408085 ; ---------------------------------------------------------------------------
.text:0040808A                 align 10h
.text:00408090
.text:00408090 loc_408090:                             ; CODE XREF: sub_407980+5E5↑j
.text:00408090                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00408095                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040809D                 mov     [esp+4Ch+var_28], 0
.text:004080A5                 mov     [esp+4Ch+var_29], 1
.text:004080AA                 jz      loc_40823C
.text:004080B0
.text:004080B0 loc_4080B0:                             ; CODE XREF: sub_407980+8CC↓j
.text:004080B0                 mov     ecx, [esp+4Ch+arg_C]
.text:004080B4                 lea     edx, [esp+4Ch+var_18]
.text:004080B8                 mov     edi, [esp+4Ch+Str]
.text:004080BC                 mov     [esp+4Ch+State], edx ; State
.text:004080C0                 lea     esi, [esp+4Ch+var_18._State]
.text:004080C4                 sub     ecx, ebp
.text:004080C6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:004080CA                 add     edi, ebp
.text:004080CC                 mov     [esp+4Ch+var_30], edi
.text:004080D0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:004080D4                 mov     [esp+4Ch+C], esi ; DstCh
.text:004080D7                 call    mbrtowc
.text:004080DC                 test    eax, eax
.text:004080DE                 mov     edi, eax
.text:004080E0                 jz      short loc_408120
.text:004080E2                 cmp     eax, 0FFFFFFFFh
.text:004080E5                 jz      loc_408232
.text:004080EB                 cmp     eax, 0FFFFFFFEh
.text:004080EE                 jz      loc_4081F2
.text:004080F4                 cmp     [esp+4Ch+arg_10], 1
.text:004080F9                 jz      short loc_408130
.text:004080FB
.text:004080FB loc_4080FB:                             ; CODE XREF: sub_407980+7B9↓j
.text:004080FB                                         ; sub_407980+86D↓j
.text:004080FB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00408100                 mov     [esp+4Ch+Type], 157h ; Type
.text:00408108                 mov     [esp+4Ch+C], ecx ; C
.text:0040810B                 call    iswctype
.text:00408110                 test    eax, eax
.text:00408112                 jnz     short loc_408119
.text:00408114                 mov     [esp+4Ch+var_29], 0
.text:00408119
.text:00408119 loc_408119:                             ; CODE XREF: sub_407980+792↑j
.text:00408119                 mov     [esp+4Ch+var_28], edi
.text:0040811D                 lea     esi, [esi+0]
.text:00408120
.text:00408120 loc_408120:                             ; CODE XREF: sub_407980+760↑j
.text:00408120                                         ; sub_407980+87B↓j ...
.text:00408120                 cmp     [esp+4Ch+var_28], 1
.text:00408125                 jbe     loc_407F9C
.text:0040812B                 jmp     loc_407FB5
.text:00408130 ; ---------------------------------------------------------------------------
.text:00408130
.text:00408130 loc_408130:                             ; CODE XREF: sub_407980+779↑j
.text:00408130                 cmp     [esp+4Ch+arg_10], eax
.text:00408134                 mov     edx, 1
.text:00408139                 jnb     short loc_4080FB
.text:0040813B
.text:0040813B loc_40813B:                             ; CODE XREF: sub_407980+867↓j
.text:0040813B                 mov     ecx, [esp+4Ch+Str]
.text:0040813F                 lea     esi, [edx+ebp]
.text:00408142                 movsx   eax, byte ptr [esi+ecx]
.text:00408146                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00408149                 cmp     eax, 21h
.text:0040814C                 ja      def_408152      ; jumptable 00408152 default case, cases 93,95,97-123
.text:00408152                 jmp     ds:jpt_408152[eax*4] ; switch jump
.text:00408152 ; ---------------------------------------------------------------------------
.text:00408159                 align 4
.text:0040815C jpt_408152      dd offset loc_407D8B    ; DATA XREF: sub_407980+7D2↑r
.text:0040815C                 dd offset loc_407D8B    ; jump table for switch statement
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset loc_407D8B
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset loc_407D8B
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset def_408152
.text:0040815C                 dd offset loc_407D8B
.text:004081E4 ; ---------------------------------------------------------------------------
.text:004081E4
.text:004081E4 def_408152:                             ; CODE XREF: sub_407980+7CC↑j
.text:004081E4                                         ; sub_407980+7D2↑j
.text:004081E4                                         ; DATA XREF: ...
.text:004081E4                 inc     edx             ; jumptable 00408152 default case, cases 93,95,97-123
.text:004081E5                 cmp     edx, edi
.text:004081E7                 jb      loc_40813B
.text:004081ED                 jmp     loc_4080FB
.text:004081F2 ; ---------------------------------------------------------------------------
.text:004081F2
.text:004081F2 loc_4081F2:                             ; CODE XREF: sub_407980+76E↑j
.text:004081F2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004081F6                 mov     [esp+4Ch+var_29], 0
.text:004081FB                 jnb     loc_408120
.text:00408201                 mov     eax, [esp+4Ch+var_30]
.text:00408205                 cmp     byte ptr [eax], 0
.text:00408208                 jz      loc_408120
.text:0040820E
.text:0040820E loc_40820E:                             ; CODE XREF: sub_407980+8AB↓j
.text:0040820E                 inc     [esp+4Ch+var_28]
.text:00408212                 mov     esi, [esp+4Ch+var_28]
.text:00408216                 lea     eax, [esi+ebp]
.text:00408219                 cmp     eax, [esp+4Ch+arg_C]
.text:0040821D                 jnb     loc_408120
.text:00408223                 mov     edi, [esp+4Ch+Str]
.text:00408227                 cmp     byte ptr [eax+edi], 0
.text:0040822B                 jnz     short loc_40820E
.text:0040822D                 jmp     loc_408120
.text:00408232 ; ---------------------------------------------------------------------------
.text:00408232
.text:00408232 loc_408232:                             ; CODE XREF: sub_407980+765↑j
.text:00408232                 mov     [esp+4Ch+var_29], 0
.text:00408237                 jmp     loc_408120
.text:0040823C ; ---------------------------------------------------------------------------
.text:0040823C
.text:0040823C loc_40823C:                             ; CODE XREF: sub_407980+72A↑j
.text:0040823C                 mov     edx, [esp+4Ch+Str]
.text:00408240                 mov     [esp+4Ch+C], edx ; Str
.text:00408243                 call    strlen
.text:00408248                 mov     [esp+4Ch+arg_C], eax
.text:0040824C                 jmp     loc_4080B0
.text:00408251 ; ---------------------------------------------------------------------------
.text:00408251
.text:00408251 loc_408251:                             ; CODE XREF: sub_407980+105↑j
.text:00408251                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00408251                 mov     dl, bl          ; jumptable 00407A85 case 92
.text:00408253                 jmp     loc_407D84
.text:00408258 ; ---------------------------------------------------------------------------
.text:00408258
.text:00408258 loc_408258:                             ; CODE XREF: sub_407980+105↑j
.text:00408258                                         ; sub_407980+902↓j
.text:00408258                                         ; DATA XREF: ...
.text:00408258                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407A85 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040825D                 jnz     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:0040825D                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00408263                 jmp     loc_407D8B      ; jumptable 00408152 cases 91,92,94,96,124
.text:00408268 ; ---------------------------------------------------------------------------
.text:00408268
.text:00408268 loc_408268:                             ; CODE XREF: sub_407980+105↑j
.text:00408268                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:00408268                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00407A85 cases 123,125
.text:0040826D                 jz      short loc_408284
.text:0040826F                 cmp     [esp+4Ch+arg_C], 1
.text:00408274
.text:00408274 loc_408274:                             ; CODE XREF: sub_407980+90C↓j
.text:00408274                 jnz     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:00408274                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:0040827A
.text:0040827A loc_40827A:                             ; CODE XREF: sub_407980+105↑j
.text:0040827A                                         ; DATA XREF: sub_407980:jpt_407A85↑o
.text:0040827A                 test    ebp, ebp        ; jumptable 00407A85 cases 35,126
.text:0040827C                 jnz     def_407E82      ; jumptable 00407A85 cases 37,43-58,65-90,93,95,97-122
.text:0040827C                                         ; jumptable 00407E82 default case, cases 34-38,42-44,46,48-59
.text:00408282                 jmp     short loc_408258 ; jumptable 00407A85 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408284 ; ---------------------------------------------------------------------------
.text:00408284
.text:00408284 loc_408284:                             ; CODE XREF: sub_407980+8ED↑j
.text:00408284                 mov     esi, [esp+4Ch+Str]
.text:00408288                 cmp     byte ptr [esi+1], 0
.text:0040828C                 jmp     short loc_408274
.text:0040828E ; ---------------------------------------------------------------------------
.text:0040828E
.text:0040828E loc_40828E:                             ; CODE XREF: sub_407980:loc_407A1F↑j
.text:0040828E                 test    ebp, ebp
.text:00408290                 jnz     short loc_40829D
.text:00408292                 cmp     [esp+4Ch+arg_10], 1
.text:00408297                 jz      loc_407D8B      ; jumptable 00408152 cases 91,92,94,96,124
.text:0040829D
.text:0040829D loc_40829D:                             ; CODE XREF: sub_407980+910↑j
.text:0040829D                 mov     esi, [esp+4Ch+var_1C]
.text:004082A1                 test    esi, esi
.text:004082A3                 jz      short loc_4082D8
.text:004082A5                 mov     edi, [esp+4Ch+var_1C]
.text:004082A9                 movzx   eax, byte ptr [edi]
.text:004082AC                 test    al, al
.text:004082AE                 jz      short loc_4082D8
.text:004082B0
.text:004082B0 loc_4082B0:                             ; CODE XREF: sub_407980+956↓j
.text:004082B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004082B4                 cmp     [esp+4Ch+var_34], ebp
.text:004082B8                 jnb     short loc_4082C5
.text:004082BA                 mov     ecx, [esp+4Ch+arg_0]
.text:004082BE                 mov     ebx, [esp+4Ch+var_34]
.text:004082C2                 mov     [ebx+ecx], al
.text:004082C5
.text:004082C5 loc_4082C5:                             ; CODE XREF: sub_407980+938↑j
.text:004082C5                 inc     [esp+4Ch+var_1C]
.text:004082C9                 inc     [esp+4Ch+var_34]
.text:004082CD                 mov     edx, [esp+4Ch+var_1C]
.text:004082D1                 movzx   eax, byte ptr [edx]
.text:004082D4                 test    al, al
.text:004082D6                 jnz     short loc_4082B0
.text:004082D8
.text:004082D8 loc_4082D8:                             ; CODE XREF: sub_407980+923↑j
.text:004082D8                                         ; sub_407980+92E↑j
.text:004082D8                 mov     eax, [esp+4Ch+arg_4]
.text:004082DC                 cmp     [esp+4Ch+var_34], eax
.text:004082E0                 jnb     short loc_4082EE
.text:004082E2                 mov     edi, [esp+4Ch+arg_0]
.text:004082E6                 mov     esi, [esp+4Ch+var_34]
.text:004082EA                 mov     byte ptr [esi+edi], 0
.text:004082EE
.text:004082EE loc_4082EE:                             ; CODE XREF: sub_407980+960↑j
.text:004082EE                 mov     eax, [esp+4Ch+var_34]
.text:004082F2                 jmp     loc_407DBF
.text:004082F7 ; ---------------------------------------------------------------------------
.text:004082F7
.text:004082F7 loc_4082F7:                             ; CODE XREF: sub_407980+95↑j
.text:004082F7                 mov     ebx, [esp+4Ch+Str]
.text:004082FB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00408300                 jmp     loc_407A1F
.text:00408305 ; ---------------------------------------------------------------------------
.text:00408305
.text:00408305 loc_408305:                             ; CODE XREF: sub_407980+3D↑j
.text:00408305                                         ; DATA XREF: sub_407980:jpt_4079BD↑o
.text:00408305                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004079BD case 2
.text:00408309                 cmp     [esp+4Ch+var_34], edx
.text:0040830D                 jnb     short loc_408316
.text:0040830F                 mov     ecx, [esp+4Ch+arg_0]
.text:00408313                 mov     byte ptr [ecx], 27h ; '''
.text:00408316
.text:00408316 loc_408316:                             ; CODE XREF: sub_407980+98D↑j
.text:00408316                 mov     [esp+4Ch+var_34], 1
.text:0040831E                 mov     [esp+4Ch+var_1C], 40796Eh
.text:00408326                 jmp     loc_407A06
.text:0040832B ; ---------------------------------------------------------------------------
.text:0040832B
.text:0040832B loc_40832B:                             ; CODE XREF: sub_407980+3D↑j
.text:0040832B                                         ; DATA XREF: sub_407980:jpt_4079BD↑o
.text:0040832B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004079BD case 4
.text:00408330                 jmp     def_4079BD      ; jumptable 004079BD default case, cases 0,1
.text:00408335 ; ---------------------------------------------------------------------------
.text:00408335
.text:00408335 loc_408335:                             ; CODE XREF: sub_407980+3D↑j
.text:00408335                                         ; DATA XREF: sub_407980:jpt_4079BD↑o
.text:00408335                 mov     [esp+4Ch+C], 407970h ; jumptable 004079BD cases 5,6
.text:0040833C                 call    ds:libintl_gettext
.text:00408342                 cmp     eax, 407970h
.text:00408347                 mov     edi, eax
.text:00408349                 jz      short loc_4083C0
.text:0040834B
.text:0040834B loc_40834B:                             ; CODE XREF: sub_407980+A45↓j
.text:0040834B                                         ; sub_407980+A4C↓j
.text:0040834B                 mov     [esp+4Ch+C], 40796Eh
.text:00408352                 call    ds:libintl_gettext
.text:00408358                 cmp     eax, 40796Eh
.text:0040835D                 mov     edx, eax
.text:0040835F                 jz      short loc_4083B2
.text:00408361
.text:00408361 loc_408361:                             ; CODE XREF: sub_407980+A37↓j
.text:00408361                                         ; sub_407980+A3E↓j
.text:00408361                 mov     [esp+4Ch+var_1C], edi
.text:00408365                 cmp     byte ptr [edi], 0
.text:00408368                 jz      short loc_408398
.text:0040836A
.text:0040836A loc_40836A:                             ; CODE XREF: sub_407980+A16↓j
.text:0040836A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040836E                 cmp     [esp+4Ch+var_34], ecx
.text:00408372                 jnb     short loc_408387
.text:00408374                 mov     ebp, [esp+4Ch+var_1C]
.text:00408378                 mov     edi, [esp+4Ch+arg_0]
.text:0040837C                 mov     esi, [esp+4Ch+var_34]
.text:00408380                 movzx   ebx, byte ptr [ebp+0]
.text:00408384                 mov     [esi+edi], bl
.text:00408387
.text:00408387 loc_408387:                             ; CODE XREF: sub_407980+9F2↑j
.text:00408387                 inc     [esp+4Ch+var_1C]
.text:0040838B                 inc     [esp+4Ch+var_34]
.text:0040838F                 mov     eax, [esp+4Ch+var_1C]
.text:00408393                 cmp     byte ptr [eax], 0
.text:00408396                 jnz     short loc_40836A
.text:00408398
.text:00408398 loc_408398:                             ; CODE XREF: sub_407980+9E8↑j
.text:00408398                 mov     [esp+4Ch+var_21], 1
.text:0040839D                 mov     [esp+4Ch+var_1C], edx
.text:004083A1                 mov     [esp+4Ch+C], edx ; Str
.text:004083A4                 call    strlen
.text:004083A9                 mov     [esp+4Ch+var_20], eax
.text:004083AD                 jmp     def_4079BD      ; jumptable 004079BD default case, cases 0,1
.text:004083B2 ; ---------------------------------------------------------------------------
.text:004083B2
.text:004083B2 loc_4083B2:                             ; CODE XREF: sub_407980+9DF↑j
.text:004083B2                 cmp     [esp+4Ch+arg_10], 6
.text:004083B7                 jnz     short loc_408361
.text:004083B9                 mov     edx, offset asc_40796C ; "\"'`"
.text:004083BE                 jmp     short loc_408361
.text:004083C0 ; ---------------------------------------------------------------------------
.text:004083C0
.text:004083C0 loc_4083C0:                             ; CODE XREF: sub_407980+9C9↑j
.text:004083C0                 cmp     [esp+4Ch+arg_10], 6
.text:004083C5                 jnz     short loc_40834B
.text:004083C7                 mov     edi, offset asc_40796C ; "\"'`"
.text:004083CC                 jmp     loc_40834B
.text:004083CC sub_407980      endp
.text:004083CC
.text:004083D1 ; ---------------------------------------------------------------------------
.text:004083D1                 jmp     short loc_4083E0
.text:004083D1 ; ---------------------------------------------------------------------------
.text:004083D3                 align 10h
.text:004083E0
.text:004083E0 loc_4083E0:                             ; CODE XREF: .text:004083D1↑j
.text:004083E0                 sub     esp, 0Ch
.text:004083E3                 mov     [esp+4], ebx
.text:004083E7                 mov     [esp+8], esi
.text:004083EB                 call    _errno
.text:004083F0                 mov     esi, [eax]
.text:004083F2                 mov     dword ptr [esp], 24h ; '$'
.text:004083F9                 call    sub_408CD0
.text:004083FE                 mov     edx, [esp+10h]
.text:00408402                 mov     ebx, eax
.text:00408404                 test    edx, edx
.text:00408406                 jz      short loc_408451
.text:00408408
.text:00408408 loc_408408:                             ; CODE XREF: .text:00408456↓j
.text:00408408                 mov     ecx, [edx]
.text:0040840A                 mov     [ebx], ecx
.text:0040840C                 mov     ecx, [edx+4]
.text:0040840F                 mov     [ebx+4], ecx
.text:00408412                 mov     ecx, [edx+8]
.text:00408415                 mov     [ebx+8], ecx
.text:00408418                 mov     ecx, [edx+0Ch]
.text:0040841B                 mov     [ebx+0Ch], ecx
.text:0040841E                 mov     ecx, [edx+10h]
.text:00408421                 mov     [ebx+10h], ecx
.text:00408424                 mov     ecx, [edx+14h]
.text:00408427                 mov     [ebx+14h], ecx
.text:0040842A                 mov     ecx, [edx+18h]
.text:0040842D                 mov     [ebx+18h], ecx
.text:00408430                 mov     ecx, [edx+1Ch]
.text:00408433                 mov     [ebx+1Ch], ecx
.text:00408436                 mov     ecx, [edx+20h]
.text:00408439                 mov     [ebx+20h], ecx
.text:0040843C                 call    _errno
.text:00408441                 mov     [eax], esi
.text:00408443                 mov     esi, [esp+8]
.text:00408447                 mov     eax, ebx
.text:00408449                 mov     ebx, [esp+4]
.text:0040844D                 add     esp, 0Ch
.text:00408450                 retn
.text:00408451 ; ---------------------------------------------------------------------------
.text:00408451
.text:00408451 loc_408451:                             ; CODE XREF: .text:00408406↑j
.text:00408451                 mov     edx, offset dword_4131A0
.text:00408456                 jmp     short loc_408408
.text:00408456 ; ---------------------------------------------------------------------------
.text:00408458                 align 10h
.text:00408460                 mov     eax, [esp+4]
.text:00408464                 test    eax, eax
.text:00408466                 jz      short loc_408470
.text:00408468
.text:00408468 loc_408468:                             ; CODE XREF: .text:00408475↓j
.text:00408468                 mov     eax, [eax]
.text:0040846A                 retn
.text:0040846A ; ---------------------------------------------------------------------------
.text:0040846B                 align 10h
.text:00408470
.text:00408470 loc_408470:                             ; CODE XREF: .text:00408466↑j
.text:00408470                 mov     eax, offset dword_4131A0
.text:00408475                 jmp     short loc_408468
.text:00408475 ; ---------------------------------------------------------------------------
.text:00408477                 align 10h
.text:00408480                 mov     edx, [esp+4]
.text:00408484                 test    edx, edx
.text:00408486                 jz      short loc_408490
.text:00408488
.text:00408488 loc_408488:                             ; CODE XREF: .text:00408495↓j
.text:00408488                 mov     ecx, [esp+8]
.text:0040848C                 mov     [edx], ecx
.text:0040848E                 retn
.text:0040848E ; ---------------------------------------------------------------------------
.text:0040848F                 align 10h
.text:00408490
.text:00408490 loc_408490:                             ; CODE XREF: .text:00408486↑j
.text:00408490                 mov     edx, offset dword_4131A0
.text:00408495                 jmp     short loc_408488
.text:00408495 ; ---------------------------------------------------------------------------
.text:00408497                 align 10h
.text:004084A0                 sub     esp, 8
.text:004084A3                 mov     eax, [esp+0Ch]
.text:004084A7                 movzx   ecx, byte ptr [esp+10h]
.text:004084AC                 mov     [esp], ebx
.text:004084AF                 mov     ebx, [esp+14h]
.text:004084B3                 mov     [esp+4], esi
.text:004084B7                 mov     dl, cl
.text:004084B9                 shr     dl, 5
.text:004084BC                 movzx   edx, dl
.text:004084BF                 shl     edx, 2
.text:004084C2                 test    eax, eax
.text:004084C4                 lea     esi, [edx+eax+4]
.text:004084C8                 jz      short loc_4084F0
.text:004084CA
.text:004084CA loc_4084CA:                             ; CODE XREF: .text:004084F6↓j
.text:004084CA                 mov     edx, [esi]
.text:004084CC                 and     ecx, 1Fh
.text:004084CF                 and     ebx, 1
.text:004084D2                 mov     eax, edx
.text:004084D4                 shr     eax, cl
.text:004084D6                 and     eax, 1
.text:004084D9                 xor     ebx, eax
.text:004084DB                 shl     ebx, cl
.text:004084DD                 xor     edx, ebx
.text:004084DF                 mov     [esi], edx
.text:004084E1                 mov     ebx, [esp]
.text:004084E4                 mov     esi, [esp+4]
.text:004084E8                 add     esp, 8
.text:004084EB                 retn
.text:004084EB ; ---------------------------------------------------------------------------
.text:004084EC                 align 10h
.text:004084F0
.text:004084F0 loc_4084F0:                             ; CODE XREF: .text:004084C8↑j
.text:004084F0                 lea     esi, dword_4131A4[edx]
.text:004084F6                 jmp     short loc_4084CA
.text:004084F6 ; ---------------------------------------------------------------------------
.text:004084F8                 align 10h
.text:00408500                 sub     esp, 2Ch
.text:00408503                 mov     [esp+24h], ebx
.text:00408507                 mov     ebx, [esp+40h]
.text:0040850B                 mov     [esp+28h], esi
.text:0040850F                 test    ebx, ebx
.text:00408511                 jz      short loc_408560
.text:00408513
.text:00408513 loc_408513:                             ; CODE XREF: .text:00408565↓j
.text:00408513                 call    _errno
.text:00408518                 mov     esi, [eax]
.text:0040851A                 mov     [esp+14h], ebx
.text:0040851E                 mov     edx, [ebx]
.text:00408520                 mov     ecx, [esp+38h]
.text:00408524                 mov     ebx, [esp+3Ch]
.text:00408528                 mov     [esp+10h], edx
.text:0040852C                 mov     edx, [esp+34h]
.text:00408530                 mov     [esp+0Ch], ebx
.text:00408534                 mov     [esp+8], ecx
.text:00408538                 mov     [esp+4], edx
.text:0040853C                 mov     edx, [esp+30h]
.text:00408540                 mov     [esp], edx
.text:00408543                 call    sub_407980
.text:00408548                 mov     ebx, eax
.text:0040854A                 call    _errno
.text:0040854F                 mov     [eax], esi
.text:00408551                 mov     esi, [esp+28h]
.text:00408555                 mov     eax, ebx
.text:00408557                 mov     ebx, [esp+24h]
.text:0040855B                 add     esp, 2Ch
.text:0040855E                 retn
.text:0040855E ; ---------------------------------------------------------------------------
.text:0040855F                 align 10h
.text:00408560
.text:00408560 loc_408560:                             ; CODE XREF: .text:00408511↑j
.text:00408560                 mov     ebx, offset dword_4131A0
.text:00408565                 jmp     short loc_408513
.text:00408565 ; ---------------------------------------------------------------------------
.text:00408567                 align 10h
.text:00408570                 push    ebp
.text:00408571                 push    edi
.text:00408572                 push    esi
.text:00408573                 push    ebx
.text:00408574                 sub     esp, 2Ch
.text:00408577                 mov     ebp, [esp+48h]
.text:0040857B                 call    _errno
.text:00408580                 mov     edx, [eax]
.text:00408582                 test    ebp, ebp
.text:00408584                 mov     ebx, ebp
.text:00408586                 mov     [esp+28h], edx
.text:0040858A                 jz      loc_408640
.text:00408590
.text:00408590 loc_408590:                             ; CODE XREF: .text:00408645↓j
.text:00408590                 call    _errno
.text:00408595                 mov     edi, [eax]
.text:00408597                 mov     esi, ebp
.text:00408599                 mov     [esp+14h], ebx
.text:0040859D                 mov     ecx, [ebx]
.text:0040859F                 mov     dword ptr [esp], 0
.text:004085A6                 mov     edx, [esp+44h]
.text:004085AA                 mov     dword ptr [esp+4], 0
.text:004085B2                 mov     eax, [esp+40h]
.text:004085B6                 mov     [esp+10h], ecx
.text:004085BA                 mov     [esp+0Ch], edx
.text:004085BE                 mov     [esp+8], eax
.text:004085C2                 call    sub_407980
.text:004085C7                 mov     ebx, eax
.text:004085C9                 call    _errno
.text:004085CE                 mov     [eax], edi
.text:004085D0                 lea     edi, [ebx+1]
.text:004085D3                 mov     [esp], edi
.text:004085D6                 call    sub_408CD0
.text:004085DB                 mov     [esp+24h], eax
.text:004085DF                 test    ebp, ebp
.text:004085E1                 jz      short loc_408632
.text:004085E3
.text:004085E3 loc_4085E3:                             ; CODE XREF: .text:00408637↓j
.text:004085E3                 call    _errno
.text:004085E8                 mov     ebp, [eax]
.text:004085EA                 mov     [esp+14h], esi
.text:004085EE                 mov     ecx, [esi]
.text:004085F0                 mov     [esp+4], edi
.text:004085F4                 mov     edx, [esp+44h]
.text:004085F8                 mov     esi, [esp+24h]
.text:004085FC                 mov     [esp+10h], ecx
.text:00408600                 mov     eax, [esp+40h]
.text:00408604                 mov     [esp+0Ch], edx
.text:00408608                 mov     [esp], esi
.text:0040860B                 mov     [esp+8], eax
.text:0040860F                 call    sub_407980
.text:00408614                 call    _errno
.text:00408619                 mov     [eax], ebp
.text:0040861B                 call    _errno
.text:00408620                 mov     ebx, [esp+28h]
.text:00408624                 mov     [eax], ebx
.text:00408626                 mov     eax, [esp+24h]
.text:0040862A                 add     esp, 2Ch
.text:0040862D                 pop     ebx
.text:0040862E                 pop     esi
.text:0040862F                 pop     edi
.text:00408630                 pop     ebp
.text:00408631                 retn
.text:00408632 ; ---------------------------------------------------------------------------
.text:00408632
.text:00408632 loc_408632:                             ; CODE XREF: .text:004085E1↑j
.text:00408632                 mov     esi, offset dword_4131A0
.text:00408637                 jmp     short loc_4085E3
.text:00408637 ; ---------------------------------------------------------------------------
.text:00408639                 align 10h
.text:00408640
.text:00408640 loc_408640:                             ; CODE XREF: .text:0040858A↑j
.text:00408640                 mov     ebx, offset dword_4131A0
.text:00408645                 jmp     loc_408590
.text:00408645 ; ---------------------------------------------------------------------------
.text:0040864A                 align 10h
.text:00408650                 sub     esp, 1Ch
.text:00408653                 mov     edx, [esp+24h]
.text:00408657                 mov     dword ptr [esp+0Ch], offset dword_4131A0
.text:0040865F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408667                 mov     [esp+4], edx
.text:0040866B                 mov     edx, [esp+20h]
.text:0040866F                 mov     [esp], edx
.text:00408672                 call    sub_408AC0
.text:00408677                 add     esp, 1Ch
.text:0040867A                 retn
.text:0040867A ; ---------------------------------------------------------------------------
.text:0040867B                 align 10h
.text:00408680                 sub     esp, 1Ch
.text:00408683                 mov     edx, [esp+20h]
.text:00408687                 mov     dword ptr [esp+0Ch], offset dword_4131A0
.text:0040868F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408697                 mov     [esp+4], edx
.text:0040869B                 mov     dword ptr [esp], 0
.text:004086A2                 call    sub_408AC0
.text:004086A7                 add     esp, 1Ch
.text:004086AA                 retn
.text:004086AA ; ---------------------------------------------------------------------------
.text:004086AB                 align 10h
.text:004086B0
.text:004086B0 ; =============== S U B R O U T I N E =======================================
.text:004086B0
.text:004086B0
.text:004086B0 ; int __cdecl sub_4086B0(int, int, char *)
.text:004086B0 sub_4086B0      proc near               ; CODE XREF: .text:0040282E↑p
.text:004086B0                                         ; sub_4029E0+96↑p ...
.text:004086B0
.text:004086B0 var_BC          = dword ptr -0BCh
.text:004086B0 var_B8          = dword ptr -0B8h
.text:004086B0 var_B4          = dword ptr -0B4h
.text:004086B0 var_B0          = dword ptr -0B0h
.text:004086B0 var_AC          = dword ptr -0ACh
.text:004086B0 var_A8          = dword ptr -0A8h
.text:004086B0 var_A4          = dword ptr -0A4h
.text:004086B0 var_A0          = dword ptr -0A0h
.text:004086B0 var_9C          = dword ptr -9Ch
.text:004086B0 var_98          = dword ptr -98h
.text:004086B0 var_94          = dword ptr -94h
.text:004086B0 var_90          = dword ptr -90h
.text:004086B0 var_8C          = dword ptr -8Ch
.text:004086B0 var_7C          = dword ptr -7Ch
.text:004086B0 var_78          = dword ptr -78h
.text:004086B0 var_74          = dword ptr -74h
.text:004086B0 var_70          = dword ptr -70h
.text:004086B0 var_6C          = dword ptr -6Ch
.text:004086B0 var_68          = dword ptr -68h
.text:004086B0 var_64          = dword ptr -64h
.text:004086B0 var_60          = dword ptr -60h
.text:004086B0 var_5C          = dword ptr -5Ch
.text:004086B0 var_4C          = dword ptr -4Ch
.text:004086B0 var_48          = dword ptr -48h
.text:004086B0 var_44          = dword ptr -44h
.text:004086B0 var_40          = dword ptr -40h
.text:004086B0 var_3C          = dword ptr -3Ch
.text:004086B0 var_38          = dword ptr -38h
.text:004086B0 var_34          = dword ptr -34h
.text:004086B0 var_30          = dword ptr -30h
.text:004086B0 var_2C          = dword ptr -2Ch
.text:004086B0 arg_0           = dword ptr  4
.text:004086B0 arg_4           = dword ptr  8
.text:004086B0 arg_8           = dword ptr  0Ch
.text:004086B0
.text:004086B0                 push    ebp
.text:004086B1                 xor     eax, eax
.text:004086B3                 mov     ecx, 8
.text:004086B8                 push    edi
.text:004086B9                 push    esi
.text:004086BA                 push    ebx
.text:004086BB                 sub     esp, 0ACh
.text:004086C1                 mov     ebp, [esp+0BCh+arg_4]
.text:004086C8                 cld
.text:004086C9                 lea     edi, [esp+0BCh+var_A8]
.text:004086CD                 mov     [esp+0BCh+var_AC], ebp
.text:004086D1                 rep stosd
.text:004086D3                 mov     eax, [esp+0BCh+var_8C]
.text:004086D7                 mov     edi, [esp+0BCh+var_AC]
.text:004086DB                 mov     esi, [esp+0BCh+var_A8]
.text:004086DF                 mov     [esp+0BCh+var_5C], eax
.text:004086E3                 mov     ebp, [esp+0BCh+var_A4]
.text:004086E7                 mov     eax, [esp+0BCh+var_AC]
.text:004086EB                 mov     [esp+0BCh+var_7C], edi
.text:004086EF                 mov     ecx, [esp+0BCh+var_94]
.text:004086F3                 mov     edi, [esp+0BCh+var_A0]
.text:004086F7                 mov     [esp+0BCh+var_78], esi
.text:004086FB                 mov     edx, [esp+0BCh+var_90]
.text:004086FF                 mov     esi, [esp+0BCh+var_9C]
.text:00408703                 mov     [esp+0BCh+var_4C], eax
.text:00408707                 mov     ebx, [esp+0BCh+var_98]
.text:0040870B                 mov     eax, [esp+0BCh+var_A8]
.text:0040870F                 mov     [esp+0BCh+var_74], ebp
.text:00408713                 mov     [esp+0BCh+var_70], edi
.text:00408717                 mov     [esp+0BCh+var_6C], esi
.text:0040871B                 mov     [esp+0BCh+var_68], ebx
.text:0040871F                 mov     [esp+0BCh+var_64], ecx
.text:00408723                 mov     [esp+0BCh+var_60], edx
.text:00408727                 mov     [esp+0BCh+var_48], eax
.text:0040872B                 mov     [esp+0BCh+var_44], ebp
.text:0040872F                 mov     [esp+0BCh+var_40], edi
.text:00408733                 mov     [esp+0BCh+var_3C], esi
.text:0040873A                 mov     [esp+0BCh+var_38], ebx
.text:00408741                 mov     ebx, [esp+0BCh+var_8C]
.text:00408745                 mov     [esp+0BCh+var_30], edx
.text:0040874C                 mov     edx, [esp+0BCh+arg_8]
.text:00408753                 mov     [esp+0BCh+var_34], ecx
.text:0040875A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040875E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00408762                 mov     edx, [esp+0BCh+arg_0]
.text:00408769                 mov     [esp+0BCh+var_2C], ebx
.text:00408770                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00408774                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040877C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040877F                 call    sub_408AC0
.text:00408784                 add     esp, 0ACh
.text:0040878A                 pop     ebx
.text:0040878B                 pop     esi
.text:0040878C                 pop     edi
.text:0040878D                 pop     ebp
.text:0040878E                 retn
.text:0040878E sub_4086B0      endp
.text:0040878E
.text:0040878E ; ---------------------------------------------------------------------------
.text:0040878F                 align 10h
.text:00408790                 push    ebp
.text:00408791                 xor     eax, eax
.text:00408793                 mov     ecx, 8
.text:00408798                 push    edi
.text:00408799                 push    esi
.text:0040879A                 push    ebx
.text:0040879B                 sub     esp, 0ACh
.text:004087A1                 mov     edx, [esp+0C4h]
.text:004087A8                 cld
.text:004087A9                 lea     edi, [esp+14h]
.text:004087AD                 mov     [esp+10h], edx
.text:004087B1                 rep stosd
.text:004087B3                 mov     eax, [esp+30h]
.text:004087B7                 mov     ebp, [esp+10h]
.text:004087BB                 mov     edi, [esp+14h]
.text:004087BF                 mov     [esp+60h], eax
.text:004087C3                 mov     esi, [esp+20h]
.text:004087C7                 mov     eax, [esp+10h]
.text:004087CB                 mov     [esp+40h], ebp
.text:004087CF                 mov     ecx, [esp+28h]
.text:004087D3                 mov     ebp, [esp+18h]
.text:004087D7                 mov     [esp+44h], edi
.text:004087DB                 mov     edx, [esp+2Ch]
.text:004087DF                 mov     edi, [esp+1Ch]
.text:004087E3                 mov     [esp+70h], eax
.text:004087E7                 mov     ebx, [esp+24h]
.text:004087EB                 mov     eax, [esp+14h]
.text:004087EF                 mov     [esp+48h], ebp
.text:004087F3                 mov     [esp+4Ch], edi
.text:004087F7                 mov     [esp+50h], esi
.text:004087FB                 mov     [esp+54h], ebx
.text:004087FF                 mov     [esp+58h], ecx
.text:00408803                 mov     [esp+5Ch], edx
.text:00408807                 mov     [esp+74h], eax
.text:0040880B                 mov     [esp+78h], ebp
.text:0040880F                 mov     [esp+7Ch], edi
.text:00408813                 mov     [esp+80h], esi
.text:0040881A                 mov     [esp+84h], ebx
.text:00408821                 mov     esi, [esp+30h]
.text:00408825                 lea     ebx, [esp+70h]
.text:00408829                 mov     [esp+8Ch], edx
.text:00408830                 mov     edx, [esp+0C8h]
.text:00408837                 mov     [esp+88h], ecx
.text:0040883E                 mov     ecx, [esp+0CCh]
.text:00408845                 mov     [esp+4], edx
.text:00408849                 mov     edx, [esp+0C0h]
.text:00408850                 mov     [esp+90h], esi
.text:00408857                 mov     [esp+0Ch], ebx
.text:0040885B                 mov     [esp+8], ecx
.text:0040885F                 mov     [esp], edx
.text:00408862                 call    sub_408AC0
.text:00408867                 add     esp, 0ACh
.text:0040886D                 pop     ebx
.text:0040886E                 pop     esi
.text:0040886F                 pop     edi
.text:00408870                 pop     ebp
.text:00408871                 retn
.text:00408871 ; ---------------------------------------------------------------------------
.text:00408872                 align 10h
.text:00408880                 push    ebp
.text:00408881                 xor     eax, eax
.text:00408883                 mov     ecx, 8
.text:00408888                 push    edi
.text:00408889                 push    esi
.text:0040888A                 push    ebx
.text:0040888B                 sub     esp, 0ACh
.text:00408891                 mov     edi, [esp+0C0h]
.text:00408898                 cld
.text:00408899                 mov     [esp+10h], edi
.text:0040889D                 lea     edi, [esp+14h]
.text:004088A1                 rep stosd
.text:004088A3                 mov     eax, [esp+30h]
.text:004088A7                 mov     esi, [esp+10h]
.text:004088AB                 mov     ebx, [esp+14h]
.text:004088AF                 mov     [esp+60h], eax
.text:004088B3                 mov     ebp, [esp+18h]
.text:004088B7                 mov     eax, [esp+10h]
.text:004088BB                 mov     [esp+40h], esi
.text:004088BF                 mov     edi, [esp+1Ch]
.text:004088C3                 mov     esi, [esp+20h]
.text:004088C7                 mov     [esp+44h], ebx
.text:004088CB                 mov     ecx, [esp+28h]
.text:004088CF                 mov     edx, [esp+2Ch]
.text:004088D3                 mov     [esp+70h], eax
.text:004088D7                 mov     ebx, [esp+24h]
.text:004088DB                 mov     eax, [esp+14h]
.text:004088DF                 mov     [esp+48h], ebp
.text:004088E3                 mov     [esp+4Ch], edi
.text:004088E7                 mov     [esp+50h], esi
.text:004088EB                 mov     [esp+54h], ebx
.text:004088EF                 mov     [esp+58h], ecx
.text:004088F3                 mov     [esp+5Ch], edx
.text:004088F7                 mov     [esp+74h], eax
.text:004088FB                 mov     [esp+78h], ebp
.text:004088FF                 mov     [esp+7Ch], edi
.text:00408903                 mov     [esp+80h], esi
.text:0040890A                 mov     [esp+84h], ebx
.text:00408911                 mov     [esp+8Ch], edx
.text:00408918                 lea     edx, [esp+70h]
.text:0040891C                 mov     [esp+88h], ecx
.text:00408923                 mov     ecx, [esp+30h]
.text:00408927                 mov     [esp+0Ch], edx
.text:0040892B                 mov     edx, [esp+0C4h]
.text:00408932                 mov     [esp+90h], ecx
.text:00408939                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408941                 mov     [esp+4], edx
.text:00408945                 mov     dword ptr [esp], 0
.text:0040894C                 call    sub_408AC0
.text:00408951                 add     esp, 0ACh
.text:00408957                 pop     ebx
.text:00408958                 pop     esi
.text:00408959                 pop     edi
.text:0040895A                 pop     ebp
.text:0040895B                 retn
.text:0040895B ; ---------------------------------------------------------------------------
.text:0040895C                 align 10h
.text:00408960                 push    edi
.text:00408961                 push    esi
.text:00408962                 push    ebx
.text:00408963                 sub     esp, 40h
.text:00408966                 mov     edx, ds:dword_4131AC
.text:0040896C                 mov     ebx, ds:dword_4131A0
.text:00408972                 mov     esi, ds:dword_4131A8
.text:00408978                 mov     edi, ds:dword_4131A4
.text:0040897E                 mov     [esp+1Ch], edx
.text:00408982                 mov     ecx, ds:dword_4131B0
.text:00408988                 mov     edx, ds:dword_4131C0
.text:0040898E                 mov     [esp+10h], ebx
.text:00408992                 mov     ebx, ds:dword_4131B4
.text:00408998                 mov     [esp+30h], edx
.text:0040899C                 movzx   edx, byte ptr [esp+54h]
.text:004089A1                 mov     [esp+18h], esi
.text:004089A5                 mov     esi, ds:dword_4131BC
.text:004089AB                 mov     [esp+14h], edi
.text:004089AF                 mov     edi, ds:dword_4131B8
.text:004089B5                 mov     [esp+20h], ecx
.text:004089B9                 mov     cl, dl
.text:004089BB                 shr     cl, 5
.text:004089BE                 mov     [esp+24h], ebx
.text:004089C2                 movzx   ebx, cl
.text:004089C5                 mov     [esp+2Ch], esi
.text:004089C9                 lea     esi, [esp+10h]
.text:004089CD                 mov     [esp+28h], edi
.text:004089D1                 lea     edi, [esi+ebx*4]
.text:004089D4                 mov     ebx, edx
.text:004089D6                 mov     edx, [edi+4]
.text:004089D9                 and     ebx, 1Fh
.text:004089DC                 mov     cl, bl
.text:004089DE                 mov     eax, edx
.text:004089E0                 shr     eax, cl
.text:004089E2                 and     eax, 1
.text:004089E5                 xor     eax, 1
.text:004089E8                 shl     eax, cl
.text:004089EA                 xor     edx, eax
.text:004089EC                 mov     [edi+4], edx
.text:004089EF                 mov     edx, [esp+50h]
.text:004089F3                 mov     [esp+0Ch], esi
.text:004089F7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004089FF                 mov     [esp+4], edx
.text:00408A03                 mov     dword ptr [esp], 0
.text:00408A0A                 call    sub_408AC0
.text:00408A0F                 add     esp, 40h
.text:00408A12                 pop     ebx
.text:00408A13                 pop     esi
.text:00408A14                 pop     edi
.text:00408A15                 retn
.text:00408A15 ; ---------------------------------------------------------------------------
.text:00408A16                 align 10h
.text:00408A20
.text:00408A20 ; =============== S U B R O U T I N E =======================================
.text:00408A20
.text:00408A20
.text:00408A20 ; int __cdecl sub_408A20(char *)
.text:00408A20 sub_408A20      proc near               ; CODE XREF: sub_4047B0+64↑p
.text:00408A20
.text:00408A20 var_4C          = dword ptr -4Ch
.text:00408A20 var_48          = dword ptr -48h
.text:00408A20 var_44          = dword ptr -44h
.text:00408A20 var_40          = dword ptr -40h
.text:00408A20 var_3C          = dword ptr -3Ch
.text:00408A20 var_38          = dword ptr -38h
.text:00408A20 var_34          = dword ptr -34h
.text:00408A20 var_30          = dword ptr -30h
.text:00408A20 var_2C          = dword ptr -2Ch
.text:00408A20 var_28          = dword ptr -28h
.text:00408A20 var_24          = dword ptr -24h
.text:00408A20 var_20          = dword ptr -20h
.text:00408A20 var_1C          = dword ptr -1Ch
.text:00408A20 arg_0           = dword ptr  4
.text:00408A20
.text:00408A20                 sub     esp, 4Ch
.text:00408A23                 mov     ecx, ds:dword_4131A0
.text:00408A29                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00408A31                 mov     edx, ds:dword_4131A4
.text:00408A37                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00408A3E                 mov     [esp+4Ch+var_3C], ecx
.text:00408A42                 mov     ecx, ds:dword_4131AC
.text:00408A48                 mov     [esp+4Ch+var_38], edx
.text:00408A4C                 mov     edx, ds:dword_4131A8
.text:00408A52                 mov     [esp+4Ch+var_30], ecx
.text:00408A56                 mov     ecx, ds:dword_4131B0
.text:00408A5C                 mov     eax, edx
.text:00408A5E                 shr     eax, 1Ah
.text:00408A61                 and     eax, 1
.text:00408A64                 xor     eax, 1
.text:00408A67                 mov     [esp+4Ch+var_2C], ecx
.text:00408A6B                 shl     eax, 1Ah
.text:00408A6E                 mov     ecx, ds:dword_4131B4
.text:00408A74                 xor     edx, eax
.text:00408A76                 mov     [esp+4Ch+var_34], edx
.text:00408A7A                 mov     edx, [esp+4Ch+arg_0]
.text:00408A7E                 mov     [esp+4Ch+var_28], ecx
.text:00408A82                 mov     ecx, ds:dword_4131B8
.text:00408A88                 mov     [esp+4Ch+var_48], edx ; char *
.text:00408A8C                 mov     [esp+4Ch+var_24], ecx
.text:00408A90                 mov     ecx, ds:dword_4131BC
.text:00408A96                 mov     [esp+4Ch+var_20], ecx
.text:00408A9A                 mov     ecx, ds:dword_4131C0
.text:00408AA0                 mov     [esp+4Ch+var_1C], ecx
.text:00408AA4                 lea     ecx, [esp+4Ch+var_3C]
.text:00408AA8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00408AAC                 call    sub_408AC0
.text:00408AB1                 add     esp, 4Ch
.text:00408AB4                 retn
.text:00408AB4 sub_408A20      endp
.text:00408AB4
.text:00408AB4 ; ---------------------------------------------------------------------------
.text:00408AB5                 align 10h
.text:00408AC0
.text:00408AC0 ; =============== S U B R O U T I N E =======================================
.text:00408AC0
.text:00408AC0
.text:00408AC0 ; int __cdecl sub_408AC0(int, char *, int, int)
.text:00408AC0 sub_408AC0      proc near               ; CODE XREF: .text:00408672↑p
.text:00408AC0                                         ; .text:004086A2↑p ...
.text:00408AC0
.text:00408AC0 Block           = dword ptr -2Ch
.text:00408AC0 var_28          = dword ptr -28h
.text:00408AC0 Str             = dword ptr -24h
.text:00408AC0 var_20          = dword ptr -20h
.text:00408AC0 var_1C          = dword ptr -1Ch
.text:00408AC0 var_18          = dword ptr -18h
.text:00408AC0 var_14          = dword ptr -14h
.text:00408AC0 arg_0           = dword ptr  4
.text:00408AC0 arg_4           = dword ptr  8
.text:00408AC0 arg_8           = dword ptr  0Ch
.text:00408AC0 arg_C           = dword ptr  10h
.text:00408AC0
.text:00408AC0                 push    ebp
.text:00408AC1                 push    edi
.text:00408AC2                 push    esi
.text:00408AC3                 push    ebx
.text:00408AC4                 sub     esp, 1Ch
.text:00408AC7                 call    _errno
.text:00408ACC                 mov     edx, [eax]
.text:00408ACE                 mov     eax, [esp+2Ch+arg_0]
.text:00408AD2                 mov     [esp+2Ch+var_14], edx
.text:00408AD6                 test    eax, eax
.text:00408AD8                 js      loc_408C7A
.text:00408ADE                 mov     eax, [esp+2Ch+arg_0]
.text:00408AE2                 cmp     dword_412040, eax
.text:00408AE8                 ja      short loc_408B60
.text:00408AEA                 mov     esi, eax
.text:00408AEC                 inc     esi
.text:00408AED                 cmp     esi, 1FFFFFFFh
.text:00408AF3                 ja      loc_408C7F
.text:00408AF9                 mov     ebx, off_41204C
.text:00408AFF                 cmp     ebx, offset dword_412044
.text:00408B05                 jz      loc_408C51
.text:00408B0B
.text:00408B0B loc_408B0B:                             ; CODE XREF: sub_408AC0+1B5↓j
.text:00408B0B                 mov     [esp+2Ch+Block], ebx ; void *
.text:00408B0E                 lea     ecx, ds:0[esi*8]
.text:00408B15                 mov     ebp, esi
.text:00408B17                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:00408B1B                 call    sub_408D60
.text:00408B20                 mov     off_41204C, eax
.text:00408B25                 mov     ebx, dword_412040
.text:00408B2B                 sub     ebp, ebx
.text:00408B2D                 lea     edi, [eax+ebx*8]
.text:00408B30                 lea     eax, ds:0[ebp*8]
.text:00408B37                 cmp     eax, 7
.text:00408B3A                 jbe     short loc_408B50
.text:00408B3C                 test    edi, 4
.text:00408B42                 jz      short loc_408B50
.text:00408B44                 mov     dword ptr [edi], 0
.text:00408B4A                 sub     eax, 4
.text:00408B4D                 add     edi, 4
.text:00408B50
.text:00408B50 loc_408B50:                             ; CODE XREF: sub_408AC0+7A↑j
.text:00408B50                                         ; sub_408AC0+82↑j
.text:00408B50                 cld
.text:00408B51                 mov     ecx, eax
.text:00408B53                 shr     ecx, 2
.text:00408B56                 xor     eax, eax
.text:00408B58                 rep stosd
.text:00408B5A                 mov     dword_412040, esi
.text:00408B60
.text:00408B60 loc_408B60:                             ; CODE XREF: sub_408AC0+28↑j
.text:00408B60                 mov     esi, off_41204C
.text:00408B66                 mov     eax, [esp+2Ch+arg_0]
.text:00408B6A                 mov     ebp, [esi+eax*8]
.text:00408B6D                 mov     edi, [esi+eax*8+4]
.text:00408B71                 mov     esi, [esp+2Ch+arg_C]
.text:00408B75                 test    esi, esi
.text:00408B77                 jz      loc_408C47
.text:00408B7D
.text:00408B7D loc_408B7D:                             ; CODE XREF: sub_408AC0+18C↓j
.text:00408B7D                 call    _errno
.text:00408B82                 mov     ebx, [eax]
.text:00408B84                 mov     [esp+2Ch+var_18], esi ; int
.text:00408B88                 mov     ecx, [esi]
.text:00408B8A                 mov     [esp+2Ch+Block], edi ; int
.text:00408B8D                 mov     edx, [esp+2Ch+arg_8]
.text:00408B91                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408B95                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408B99                 mov     ecx, [esp+2Ch+arg_4]
.text:00408B9D                 mov     [esp+2Ch+var_20], edx ; int
.text:00408BA1                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408BA5                 call    sub_407980
.text:00408BAA                 mov     esi, eax
.text:00408BAC                 call    _errno
.text:00408BB1                 mov     [eax], ebx
.text:00408BB3                 cmp     ebp, esi
.text:00408BB5                 ja      short loc_408C2B
.text:00408BB7                 lea     ebp, [esi+1]
.text:00408BBA                 mov     ebx, off_41204C
.text:00408BC0                 cmp     edi, offset unk_4130A0
.text:00408BC6                 mov     esi, [esp+2Ch+arg_0]
.text:00408BCA                 mov     [ebx+esi*8], ebp
.text:00408BCD                 jz      short loc_408BDD
.text:00408BCF                 mov     [esp+2Ch+Block], edi ; Block
.text:00408BD2                 call    free
.text:00408BD7                 mov     ebx, off_41204C
.text:00408BDD
.text:00408BDD loc_408BDD:                             ; CODE XREF: sub_408AC0+10D↑j
.text:00408BDD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408BE0                 call    sub_408CD0
.text:00408BE5                 mov     esi, [esp+2Ch+arg_C]
.text:00408BE9                 mov     edi, eax
.text:00408BEB                 mov     eax, [esp+2Ch+arg_0]
.text:00408BEF                 test    esi, esi
.text:00408BF1                 mov     [ebx+eax*8+4], edi
.text:00408BF5                 jz      short loc_408C40
.text:00408BF7
.text:00408BF7 loc_408BF7:                             ; CODE XREF: sub_408AC0+185↓j
.text:00408BF7                 call    _errno
.text:00408BFC                 mov     ebx, [eax]
.text:00408BFE                 mov     [esp+2Ch+var_18], esi ; int
.text:00408C02                 mov     ecx, [esi]
.text:00408C04                 mov     [esp+2Ch+Block], edi ; int
.text:00408C07                 mov     edx, [esp+2Ch+arg_8]
.text:00408C0B                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408C0F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408C13                 mov     ecx, [esp+2Ch+arg_4]
.text:00408C17                 mov     [esp+2Ch+var_20], edx ; int
.text:00408C1B                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408C1F                 call    sub_407980
.text:00408C24                 call    _errno
.text:00408C29                 mov     [eax], ebx
.text:00408C2B
.text:00408C2B loc_408C2B:                             ; CODE XREF: sub_408AC0+F5↑j
.text:00408C2B                 call    _errno
.text:00408C30                 mov     ebp, [esp+2Ch+var_14]
.text:00408C34                 mov     [eax], ebp
.text:00408C36                 add     esp, 1Ch
.text:00408C39                 mov     eax, edi
.text:00408C3B                 pop     ebx
.text:00408C3C                 pop     esi
.text:00408C3D                 pop     edi
.text:00408C3E                 pop     ebp
.text:00408C3F                 retn
.text:00408C40 ; ---------------------------------------------------------------------------
.text:00408C40
.text:00408C40 loc_408C40:                             ; CODE XREF: sub_408AC0+135↑j
.text:00408C40                 mov     esi, offset dword_4131A0
.text:00408C45                 jmp     short loc_408BF7
.text:00408C47 ; ---------------------------------------------------------------------------
.text:00408C47
.text:00408C47 loc_408C47:                             ; CODE XREF: sub_408AC0+B7↑j
.text:00408C47                 mov     esi, offset dword_4131A0
.text:00408C4C                 jmp     loc_408B7D
.text:00408C51 ; ---------------------------------------------------------------------------
.text:00408C51
.text:00408C51 loc_408C51:                             ; CODE XREF: sub_408AC0+45↑j
.text:00408C51                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00408C58                 call    sub_408CD0
.text:00408C5D                 mov     off_41204C, eax
.text:00408C62                 mov     edi, dword_412044
.text:00408C68                 mov     ebx, eax
.text:00408C6A                 mov     ecx, off_412048
.text:00408C70                 mov     [eax], edi
.text:00408C72                 mov     [eax+4], ecx
.text:00408C75                 jmp     loc_408B0B
.text:00408C7A ; ---------------------------------------------------------------------------
.text:00408C7A
.text:00408C7A loc_408C7A:                             ; CODE XREF: sub_408AC0+18↑j
.text:00408C7A                 call    abort
.text:00408C7F ; ---------------------------------------------------------------------------
.text:00408C7F
.text:00408C7F loc_408C7F:                             ; CODE XREF: sub_408AC0+33↑j
.text:00408C7F                 call    sub_408F80
.text:00408C7F sub_408AC0      endp
.text:00408C7F
.text:00408C7F ; ---------------------------------------------------------------------------
.text:00408C84                 align 10h
.text:00408C90
.text:00408C90 ; =============== S U B R O U T I N E =======================================
.text:00408C90
.text:00408C90
.text:00408C90 sub_408C90      proc near
.text:00408C90
.text:00408C90 Size            = dword ptr -0Ch
.text:00408C90 var_4           = dword ptr -4
.text:00408C90 arg_0           = dword ptr  4
.text:00408C90 arg_4           = dword ptr  8
.text:00408C90
.text:00408C90                 sub     esp, 0Ch
.text:00408C93                 xor     edx, edx
.text:00408C95                 mov     ecx, [esp+0Ch+arg_4]
.text:00408C99                 mov     [esp+0Ch+var_4], ebx
.text:00408C9D                 mov     eax, 0FFFFFFFFh
.text:00408CA2                 mov     ebx, [esp+0Ch+arg_0]
.text:00408CA6                 div     ecx
.text:00408CA8                 cmp     eax, ebx
.text:00408CAA                 jb      short loc_408CC9
.text:00408CAC                 mov     edx, ebx
.text:00408CAE                 imul    edx, ecx
.text:00408CB1                 mov     [esp+0Ch+Size], edx ; Size
.text:00408CB4                 call    malloc
.text:00408CB9                 test    eax, eax
.text:00408CBB                 jz      short loc_408CC5
.text:00408CBD
.text:00408CBD loc_408CBD:                             ; CODE XREF: sub_408C90+37↓j
.text:00408CBD                 mov     ebx, [esp+0Ch+var_4]
.text:00408CC1                 add     esp, 0Ch
.text:00408CC4                 retn
.text:00408CC5 ; ---------------------------------------------------------------------------
.text:00408CC5
.text:00408CC5 loc_408CC5:                             ; CODE XREF: sub_408C90+2B↑j
.text:00408CC5                 test    ebx, ebx
.text:00408CC7                 jz      short loc_408CBD
.text:00408CC9
.text:00408CC9 loc_408CC9:                             ; CODE XREF: sub_408C90+1A↑j
.text:00408CC9                 call    sub_408F80
.text:00408CC9 sub_408C90      endp
.text:00408CC9
.text:00408CC9 ; ---------------------------------------------------------------------------
.text:00408CCE                 align 10h
.text:00408CD0
.text:00408CD0 ; =============== S U B R O U T I N E =======================================
.text:00408CD0
.text:00408CD0
.text:00408CD0 ; int __cdecl sub_408CD0(size_t)
.text:00408CD0 sub_408CD0      proc near               ; CODE XREF: sub_406830+D0C↑p
.text:00408CD0                                         ; .text:004083F9↑p ...
.text:00408CD0
.text:00408CD0 Size            = dword ptr -0Ch
.text:00408CD0 var_4           = dword ptr -4
.text:00408CD0 arg_0           = dword ptr  4
.text:00408CD0
.text:00408CD0                 sub     esp, 0Ch
.text:00408CD3                 mov     [esp+0Ch+var_4], ebx
.text:00408CD7                 mov     ebx, [esp+0Ch+arg_0]
.text:00408CDB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408CDE                 call    malloc
.text:00408CE3                 test    eax, eax
.text:00408CE5                 jz      short loc_408CF0
.text:00408CE7
.text:00408CE7 loc_408CE7:                             ; CODE XREF: sub_408CD0+22↓j
.text:00408CE7                 mov     ebx, [esp+0Ch+var_4]
.text:00408CEB                 add     esp, 0Ch
.text:00408CEE                 retn
.text:00408CEE ; ---------------------------------------------------------------------------
.text:00408CEF                 align 10h
.text:00408CF0
.text:00408CF0 loc_408CF0:                             ; CODE XREF: sub_408CD0+15↑j
.text:00408CF0                 test    ebx, ebx
.text:00408CF2                 jz      short loc_408CE7
.text:00408CF4                 call    sub_408F80
.text:00408CF4 sub_408CD0      endp
.text:00408CF4
.text:00408CF4 ; ---------------------------------------------------------------------------
.text:00408CF9                 align 10h
.text:00408D00                 sub     esp, 1Ch
.text:00408D03                 xor     edx, edx
.text:00408D05                 mov     eax, 0FFFFFFFFh
.text:00408D0A                 mov     [esp+14h], ebx
.text:00408D0E                 mov     ecx, [esp+20h]
.text:00408D12                 mov     ebx, [esp+28h]
.text:00408D16                 mov     [esp+18h], esi
.text:00408D1A                 mov     esi, [esp+24h]
.text:00408D1E                 div     ebx
.text:00408D20                 cmp     eax, esi
.text:00408D22                 jb      short loc_408D54
.text:00408D24                 mov     [esp], ecx
.text:00408D27                 mov     edx, esi
.text:00408D29                 imul    edx, ebx
.text:00408D2C                 mov     [esp+4], edx
.text:00408D30                 call    realloc
.text:00408D35                 test    eax, eax
.text:00408D37                 mov     ecx, eax
.text:00408D39                 jz      short loc_408D50
.text:00408D3B
.text:00408D3B loc_408D3B:                             ; CODE XREF: .text:00408D52↓j
.text:00408D3B                 mov     ebx, [esp+14h]
.text:00408D3F                 mov     eax, ecx
.text:00408D41                 mov     esi, [esp+18h]
.text:00408D45                 add     esp, 1Ch
.text:00408D48                 retn
.text:00408D48 ; ---------------------------------------------------------------------------
.text:00408D49                 align 10h
.text:00408D50
.text:00408D50 loc_408D50:                             ; CODE XREF: .text:00408D39↑j
.text:00408D50                 test    esi, esi
.text:00408D52                 jz      short loc_408D3B
.text:00408D54
.text:00408D54 loc_408D54:                             ; CODE XREF: .text:00408D22↑j
.text:00408D54                 call    sub_408F80
.text:00408D54 ; ---------------------------------------------------------------------------
.text:00408D59                 align 10h
.text:00408D60
.text:00408D60 ; =============== S U B R O U T I N E =======================================
.text:00408D60
.text:00408D60
.text:00408D60 ; int __cdecl sub_408D60(void *, size_t)
.text:00408D60 sub_408D60      proc near               ; CODE XREF: sub_408AC0+5B↑p
.text:00408D60
.text:00408D60 Block           = dword ptr -0Ch
.text:00408D60 Size            = dword ptr -8
.text:00408D60 var_4           = dword ptr -4
.text:00408D60 arg_0           = dword ptr  4
.text:00408D60 arg_4           = dword ptr  8
.text:00408D60
.text:00408D60                 sub     esp, 0Ch
.text:00408D63                 mov     edx, [esp+0Ch+arg_0]
.text:00408D67                 mov     [esp+0Ch+var_4], ebx
.text:00408D6B                 mov     ebx, [esp+0Ch+arg_4]
.text:00408D6F                 mov     [esp+0Ch+Block], edx ; Block
.text:00408D72                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408D76                 call    realloc
.text:00408D7B                 test    eax, eax
.text:00408D7D                 jz      short loc_408D87
.text:00408D7F
.text:00408D7F loc_408D7F:                             ; CODE XREF: sub_408D60+29↓j
.text:00408D7F                 mov     ebx, [esp+0Ch+var_4]
.text:00408D83                 add     esp, 0Ch
.text:00408D86                 retn
.text:00408D87 ; ---------------------------------------------------------------------------
.text:00408D87
.text:00408D87 loc_408D87:                             ; CODE XREF: sub_408D60+1D↑j
.text:00408D87                 test    ebx, ebx
.text:00408D89                 jz      short loc_408D7F
.text:00408D8B                 call    sub_408F80
.text:00408D8B sub_408D60      endp
.text:00408D8B
.text:00408D90 ; ---------------------------------------------------------------------------
.text:00408D90                 jmp     sub_408EE0
.text:00408D90 ; ---------------------------------------------------------------------------
.text:00408D95                 align 10h
.text:00408DA0                 sub     esp, 0Ch
.text:00408DA3                 mov     edx, [esp+14h]
.text:00408DA7                 mov     dword ptr [esp+8], 1
.text:00408DAF                 mov     [esp+4], edx
.text:00408DB3                 mov     edx, [esp+10h]
.text:00408DB7                 mov     [esp], edx
.text:00408DBA                 call    sub_408EE0
.text:00408DBF                 add     esp, 0Ch
.text:00408DC2                 retn
.text:00408DC2 ; ---------------------------------------------------------------------------
.text:00408DC3                 align 10h
.text:00408DD0                 sub     esp, 1Ch
.text:00408DD3                 mov     [esp+18h], ebx
.text:00408DD7                 mov     ebx, [esp+20h]
.text:00408DDB                 mov     [esp], ebx
.text:00408DDE                 call    malloc
.text:00408DE3                 test    eax, eax
.text:00408DE5                 jz      short loc_408E03
.text:00408DE7
.text:00408DE7 loc_408DE7:                             ; CODE XREF: .text:00408E05↓j
.text:00408DE7                 mov     [esp+8], ebx
.text:00408DEB                 mov     dword ptr [esp+4], 0
.text:00408DF3                 mov     [esp], eax
.text:00408DF6                 call    memset
.text:00408DFB                 mov     ebx, [esp+18h]
.text:00408DFF                 add     esp, 1Ch
.text:00408E02                 retn
.text:00408E03 ; ---------------------------------------------------------------------------
.text:00408E03
.text:00408E03 loc_408E03:                             ; CODE XREF: .text:00408DE5↑j
.text:00408E03                 test    ebx, ebx
.text:00408E05                 jz      short loc_408DE7
.text:00408E07                 call    sub_408F80
.text:00408E07 ; ---------------------------------------------------------------------------
.text:00408E0C                 align 10h
.text:00408E10                 sub     esp, 0Ch
.text:00408E13                 xor     edx, edx
.text:00408E15                 mov     ecx, [esp+14h]
.text:00408E19                 mov     [esp+8], ebx
.text:00408E1D                 mov     eax, 0FFFFFFFFh
.text:00408E22                 mov     ebx, [esp+10h]
.text:00408E26                 div     ecx
.text:00408E28                 cmp     eax, ebx
.text:00408E2A                 jb      short loc_408E48
.text:00408E2C                 mov     [esp+4], ecx
.text:00408E30                 mov     [esp], ebx
.text:00408E33                 call    calloc
.text:00408E38                 test    eax, eax
.text:00408E3A                 jz      short loc_408E44
.text:00408E3C
.text:00408E3C loc_408E3C:                             ; CODE XREF: .text:00408E46↓j
.text:00408E3C                 mov     ebx, [esp+8]
.text:00408E40                 add     esp, 0Ch
.text:00408E43                 retn
.text:00408E44 ; ---------------------------------------------------------------------------
.text:00408E44
.text:00408E44 loc_408E44:                             ; CODE XREF: .text:00408E3A↑j
.text:00408E44                 test    ebx, ebx
.text:00408E46                 jz      short loc_408E3C
.text:00408E48
.text:00408E48 loc_408E48:                             ; CODE XREF: .text:00408E2A↑j
.text:00408E48                 call    sub_408F80
.text:00408E48 ; ---------------------------------------------------------------------------
.text:00408E4D                 align 10h
.text:00408E50
.text:00408E50 ; =============== S U B R O U T I N E =======================================
.text:00408E50
.text:00408E50
.text:00408E50 ; int __cdecl sub_408E50(void *, size_t)
.text:00408E50 sub_408E50      proc near               ; CODE XREF: sub_406830+B20↑p
.text:00408E50                                         ; sub_406830+D1F↑p
.text:00408E50
.text:00408E50 Size            = dword ptr -1Ch
.text:00408E50 Src             = dword ptr -18h
.text:00408E50 var_14          = dword ptr -14h
.text:00408E50 var_4           = dword ptr -4
.text:00408E50 arg_0           = dword ptr  4
.text:00408E50 arg_4           = dword ptr  8
.text:00408E50
.text:00408E50                 sub     esp, 1Ch
.text:00408E53                 mov     [esp+1Ch+var_4], ebx
.text:00408E57                 mov     ebx, [esp+1Ch+arg_4]
.text:00408E5B                 mov     [esp+1Ch+Size], ebx ; Size
.text:00408E5E                 call    malloc
.text:00408E63                 test    eax, eax
.text:00408E65                 mov     edx, eax
.text:00408E67                 jz      short loc_408E85
.text:00408E69
.text:00408E69 loc_408E69:                             ; CODE XREF: sub_408E50+37↓j
.text:00408E69                 mov     [esp+1Ch+var_14], ebx ; Size
.text:00408E6D                 mov     ecx, [esp+1Ch+arg_0]
.text:00408E71                 mov     [esp+1Ch+Size], edx ; void *
.text:00408E74                 mov     [esp+1Ch+Src], ecx ; Src
.text:00408E78                 call    memcpy
.text:00408E7D                 mov     ebx, [esp+1Ch+var_4]
.text:00408E81                 add     esp, 1Ch
.text:00408E84                 retn
.text:00408E85 ; ---------------------------------------------------------------------------
.text:00408E85
.text:00408E85 loc_408E85:                             ; CODE XREF: sub_408E50+17↑j
.text:00408E85                 test    ebx, ebx
.text:00408E87                 jz      short loc_408E69
.text:00408E89                 call    sub_408F80
.text:00408E89 sub_408E50      endp
.text:00408E89
.text:00408E89 ; ---------------------------------------------------------------------------
.text:00408E8E                 align 10h
.text:00408E90                 sub     esp, 1Ch
.text:00408E93                 mov     [esp+18h], esi
.text:00408E97                 mov     esi, [esp+20h]
.text:00408E9B                 mov     [esp+14h], ebx
.text:00408E9F                 mov     [esp], esi
.text:00408EA2                 call    strlen
.text:00408EA7                 lea     ebx, [eax+1]
.text:00408EAA                 mov     [esp], ebx
.text:00408EAD                 call    malloc
.text:00408EB2                 test    eax, eax
.text:00408EB4                 jz      short loc_408ED2
.text:00408EB6
.text:00408EB6 loc_408EB6:                             ; CODE XREF: .text:00408ED4↓j
.text:00408EB6                 mov     [esp+8], ebx
.text:00408EBA                 mov     [esp+4], esi
.text:00408EBE                 mov     [esp], eax
.text:00408EC1                 call    memcpy
.text:00408EC6                 mov     ebx, [esp+14h]
.text:00408ECA                 mov     esi, [esp+18h]
.text:00408ECE                 add     esp, 1Ch
.text:00408ED1                 retn
.text:00408ED2 ; ---------------------------------------------------------------------------
.text:00408ED2
.text:00408ED2 loc_408ED2:                             ; CODE XREF: .text:00408EB4↑j
.text:00408ED2                 test    ebx, ebx
.text:00408ED4                 jz      short loc_408EB6
.text:00408ED6                 call    sub_408F80
.text:00408ED6 ; ---------------------------------------------------------------------------
.text:00408EDB                 align 10h
.text:00408EE0
.text:00408EE0 ; =============== S U B R O U T I N E =======================================
.text:00408EE0
.text:00408EE0
.text:00408EE0 ; int __cdecl sub_408EE0(void *, int, int)
.text:00408EE0 sub_408EE0      proc near               ; CODE XREF: .text:00408D90↑j
.text:00408EE0                                         ; .text:00408DBA↑p
.text:00408EE0
.text:00408EE0 Block           = dword ptr -1Ch
.text:00408EE0 Size            = dword ptr -18h
.text:00408EE0 var_C           = dword ptr -0Ch
.text:00408EE0 var_8           = dword ptr -8
.text:00408EE0 var_4           = dword ptr -4
.text:00408EE0 arg_0           = dword ptr  4
.text:00408EE0 arg_4           = dword ptr  8
.text:00408EE0 arg_8           = dword ptr  0Ch
.text:00408EE0
.text:00408EE0                 sub     esp, 1Ch
.text:00408EE3                 mov     [esp+1Ch+var_8], esi
.text:00408EE7                 mov     esi, [esp+1Ch+arg_0]
.text:00408EEB                 mov     [esp+1Ch+var_4], edi
.text:00408EEF                 mov     edi, [esp+1Ch+arg_4]
.text:00408EF3                 test    esi, esi
.text:00408EF5                 mov     [esp+1Ch+var_C], ebx
.text:00408EF9                 mov     ecx, [edi]
.text:00408EFB                 mov     ebx, [esp+1Ch+arg_8]
.text:00408EFF                 jz      short loc_408F40
.text:00408F01                 xor     edx, edx
.text:00408F03                 mov     eax, 7FFFFFFFh
.text:00408F08                 div     ebx
.text:00408F0A                 cmp     eax, ecx
.text:00408F0C                 jb      short loc_408F39
.text:00408F0E                 add     ecx, ecx
.text:00408F10
.text:00408F10 loc_408F10:                             ; CODE XREF: sub_408EE0+62↓j
.text:00408F10                                         ; sub_408EE0+71↓j ...
.text:00408F10                 mov     [edi], ecx
.text:00408F12                 imul    ebx, ecx
.text:00408F15                 mov     [esp+1Ch+Block], esi ; Block
.text:00408F18                 mov     [esp+1Ch+Size], ebx ; Size
.text:00408F1C                 call    realloc
.text:00408F21                 test    eax, eax
.text:00408F23                 jz      short loc_408F35
.text:00408F25
.text:00408F25 loc_408F25:                             ; CODE XREF: sub_408EE0+57↓j
.text:00408F25                 mov     ebx, [esp+1Ch+var_C]
.text:00408F29                 mov     esi, [esp+1Ch+var_8]
.text:00408F2D                 mov     edi, [esp+1Ch+var_4]
.text:00408F31                 add     esp, 1Ch
.text:00408F34                 retn
.text:00408F35 ; ---------------------------------------------------------------------------
.text:00408F35
.text:00408F35 loc_408F35:                             ; CODE XREF: sub_408EE0+43↑j
.text:00408F35                 test    ebx, ebx
.text:00408F37                 jz      short loc_408F25
.text:00408F39
.text:00408F39 loc_408F39:                             ; CODE XREF: sub_408EE0+2C↑j
.text:00408F39                 call    sub_408F80
.text:00408F39 ; ---------------------------------------------------------------------------
.text:00408F3E                 align 10h
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: sub_408EE0+1F↑j
.text:00408F40                 test    ecx, ecx
.text:00408F42                 jnz     short loc_408F10
.text:00408F44                 xor     edx, edx
.text:00408F46                 mov     eax, 40h ; '@'
.text:00408F4B                 div     ebx
.text:00408F4D                 test    eax, eax
.text:00408F4F                 mov     ecx, eax
.text:00408F51                 jnz     short loc_408F10
.text:00408F53                 mov     ecx, 1
.text:00408F58                 jmp     short loc_408F10
.text:00408F58 sub_408EE0      endp
.text:00408F58
.text:00408F58 ; ---------------------------------------------------------------------------
.text:00408F5A                 align 10h
.text:00408F60 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_408F80+3↓o
.text:00408F71 ; const char aS_1[]
.text:00408F71 aS_1            db '%s',0               ; DATA XREF: sub_408F80+10↓o
.text:00408F74                 align 10h
.text:00408F80
.text:00408F80 ; =============== S U B R O U T I N E =======================================
.text:00408F80
.text:00408F80 ; Attributes: noreturn
.text:00408F80
.text:00408F80 sub_408F80      proc near               ; CODE XREF: sub_408AC0:loc_408C7F↑p
.text:00408F80                                         ; sub_408C90:loc_408CC9↑p ...
.text:00408F80
.text:00408F80 Code            = dword ptr -1Ch
.text:00408F80 ErrorMessage    = dword ptr -18h
.text:00408F80 var_14          = dword ptr -14h
.text:00408F80 var_10          = byte ptr -10h
.text:00408F80
.text:00408F80                 sub     esp, 1Ch
.text:00408F83                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00408F8A                 call    ds:libintl_gettext
.text:00408F90                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:00408F98                 mov     edx, Code
.text:00408F9E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00408FA6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00408FAA                 mov     [esp+1Ch+Code], edx ; Code
.text:00408FAD                 call    sub_409010
.text:00408FB2                 call    abort
.text:00408FB2 sub_408F80      endp
.text:00408FB2
.text:00408FB2 ; ---------------------------------------------------------------------------
.text:00408FB7                 align 10h
.text:00408FC0
.text:00408FC0 ; =============== S U B R O U T I N E =======================================
.text:00408FC0
.text:00408FC0 ; Attributes: thunk
.text:00408FC0
.text:00408FC0 libintl_bindtextdomain proc near
.text:00408FC0                 jmp     ds:__imp_libintl_bindtextdomain
.text:00408FC0 libintl_bindtextdomain endp
.text:00408FC0
.text:00408FC0 ; ---------------------------------------------------------------------------
.text:00408FC6                 align 10h
.text:00408FD0                 jmp     ds:libintl_textdomain
.text:00408FD0 ; ---------------------------------------------------------------------------
.text:00408FD6                 align 10h
.text:00408FE0                 jmp     ds:libintl_gettext
.text:00408FE0 ; ---------------------------------------------------------------------------
.text:00408FE6                 align 10h
.text:00408FF0 ; const char aS_2[]
.text:00408FF0 aS_2            db ': %s',0             ; DATA XREF: sub_409010+B8↓o
.text:00408FF0                                         ; sub_409114+122↓o
.text:00408FF5 aUnknownSystemE db 'Unknown system error',0
.text:00408FF5                                         ; DATA XREF: sub_409010:loc_4090DD↓o
.text:00408FF5                                         ; sub_409114:loc_40924E↓o
.text:0040900A ; const char aS_3[]
.text:0040900A aS_3            db '%s: ',0             ; DATA XREF: sub_409010:loc_4090E4↓o
.text:0040900F                 align 10h
.text:00409010
.text:00409010 ; =============== S U B R O U T I N E =======================================
.text:00409010
.text:00409010
.text:00409010 ; int __cdecl sub_409010(int Code, int ErrorMessage, char *, char)
.text:00409010 sub_409010      proc near               ; CODE XREF: sub_401A00+3E4↑p
.text:00409010                                         ; sub_401A00+463↑p ...
.text:00409010
.text:00409010 Stream          = dword ptr -1Ch
.text:00409010 Format          = dword ptr -18h
.text:00409010 ArgList         = dword ptr -14h
.text:00409010 Code            = dword ptr  4
.text:00409010 ErrorMessage    = dword ptr  8
.text:00409010 arg_8           = dword ptr  0Ch
.text:00409010 arg_C           = byte ptr  10h
.text:00409010
.text:00409010                 push    esi
.text:00409011                 push    ebx
.text:00409012                 sub     esp, 14h
.text:00409015                 mov     edx, ds:_iob
.text:0040901B                 mov     esi, [esp+1Ch+Code]
.text:0040901F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00409023                 add     edx, 20h ; ' '
.text:00409026                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409029                 call    fflush
.text:0040902E                 mov     eax, ds:dword_413560
.text:00409033                 test    eax, eax
.text:00409035                 jz      loc_4090E4
.text:0040903B                 call    eax ; dword_413560
.text:0040903D
.text:0040903D loc_40903D:                             ; CODE XREF: sub_409010+F7↓j
.text:0040903D                 lea     edx, [esp+1Ch+arg_C]
.text:00409041                 mov     ecx, [esp+1Ch+arg_8]
.text:00409045                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00409049                 mov     edx, ds:_iob
.text:0040904F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00409053                 add     edx, 40h ; '@'
.text:00409056                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409059                 call    vfprintf
.text:0040905E                 inc     ds:dword_413570
.text:00409064                 test    ebx, ebx
.text:00409066                 jnz     short loc_4090B2
.text:00409068
.text:00409068 loc_409068:                             ; CODE XREF: sub_409010+CB↓j
.text:00409068                 mov     edx, ds:_iob
.text:0040906E                 lea     ecx, [edx+40h]
.text:00409071                 mov     ebx, [ecx+4]
.text:00409074                 dec     ebx
.text:00409075                 test    ebx, ebx
.text:00409077                 mov     [ecx+4], ebx
.text:0040907A                 js      short loc_4090A0
.text:0040907C                 mov     ecx, [edx+40h]
.text:0040907F                 mov     byte ptr [ecx], 0Ah
.text:00409082                 inc     dword ptr [edx+40h]
.text:00409085
.text:00409085 loc_409085:                             ; CODE XREF: sub_409010+A0↓j
.text:00409085                 mov     edx, ds:_iob
.text:0040908B                 add     edx, 40h ; '@'
.text:0040908E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409091                 call    fflush
.text:00409096                 test    esi, esi
.text:00409098                 jnz     short loc_40910C
.text:0040909A                 add     esp, 14h
.text:0040909D                 pop     ebx
.text:0040909E                 pop     esi
.text:0040909F                 retn
.text:004090A0 ; ---------------------------------------------------------------------------
.text:004090A0
.text:004090A0 loc_4090A0:                             ; CODE XREF: sub_409010+6A↑j
.text:004090A0                 mov     [esp+1Ch+Format], ecx ; File
.text:004090A4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004090AB                 call    _flsbuf
.text:004090B0                 jmp     short loc_409085
.text:004090B2 ; ---------------------------------------------------------------------------
.text:004090B2
.text:004090B2 loc_4090B2:                             ; CODE XREF: sub_409010+56↑j
.text:004090B2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004090B5                 call    strerror
.text:004090BA                 test    eax, eax
.text:004090BC                 jz      short loc_4090DD
.text:004090BE
.text:004090BE loc_4090BE:                             ; CODE XREF: sub_409010+D2↓j
.text:004090BE                 mov     [esp+1Ch+ArgList], eax
.text:004090C2                 mov     ebx, ds:_iob
.text:004090C8                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:004090D0                 add     ebx, 40h ; '@'
.text:004090D3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004090D6                 call    fprintf
.text:004090DB                 jmp     short loc_409068
.text:004090DD ; ---------------------------------------------------------------------------
.text:004090DD
.text:004090DD loc_4090DD:                             ; CODE XREF: sub_409010+AC↑j
.text:004090DD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004090E2                 jmp     short loc_4090BE
.text:004090E4 ; ---------------------------------------------------------------------------
.text:004090E4
.text:004090E4 loc_4090E4:                             ; CODE XREF: sub_409010+25↑j
.text:004090E4                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:004090EC                 mov     edx, ds:_iob
.text:004090F2                 mov     ecx, ds:dword_413530
.text:004090F8                 add     edx, 40h ; '@'
.text:004090FB                 mov     [esp+1Ch+ArgList], ecx
.text:004090FF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409102                 call    fprintf
.text:00409107                 jmp     loc_40903D
.text:0040910C ; ---------------------------------------------------------------------------
.text:0040910C
.text:0040910C loc_40910C:                             ; CODE XREF: sub_409010+88↑j
.text:0040910C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040910F                 call    exit
.text:0040910F sub_409010      endp
.text:0040910F
.text:00409114
.text:00409114 ; =============== S U B R O U T I N E =======================================
.text:00409114
.text:00409114
.text:00409114 ; int __cdecl sub_409114(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00409114 sub_409114      proc near               ; DATA XREF: sub_409114+77↓o
.text:00409114
.text:00409114 Stream          = dword ptr -28h
.text:00409114 Format          = dword ptr -24h
.text:00409114 ArgList         = dword ptr -20h
.text:00409114 var_1C          = dword ptr -1Ch
.text:00409114 Code            = dword ptr  8
.text:00409114 ErrorMessage    = dword ptr  0Ch
.text:00409114 Str2            = dword ptr  10h
.text:00409114 arg_10          = dword ptr  14h
.text:00409114 arg_14          = dword ptr  18h
.text:00409114 arg_18          = byte ptr  1Ch
.text:00409114
.text:00409114                 and     eax, 64253A73h
.text:00409119                 cmp     ah, [eax]
.text:0040911B
.text:0040911B loc_40911B:                             ; DATA XREF: sub_409114:loc_409255↓o
.text:0040911B                 add     ds:55003A73h, ah
.text:00409121                 push    edi
.text:00409122                 push    esi
.text:00409123                 push    ebx
.text:00409124                 sub     esp, 1Ch
.text:00409127                 mov     edx, ds:dword_4135A0
.text:0040912D                 mov     ebp, [esp+28h+Code]
.text:00409131                 mov     edi, [esp+28h+ErrorMessage]
.text:00409135                 test    edx, edx
.text:00409137                 mov     ebx, [esp+28h+Str2]
.text:0040913B                 mov     esi, [esp+28h+arg_10]
.text:0040913F                 jz      short loc_409159
.text:00409141                 cmp     ds:dword_4131E0, esi
.text:00409147                 jz      loc_409280
.text:0040914D
.text:0040914D loc_40914D:                             ; CODE XREF: sub_409114+18D↓j
.text:0040914D                 mov     ds:Str1, ebx
.text:00409153                 mov     ds:dword_4131E0, esi
.text:00409159
.text:00409159 loc_409159:                             ; CODE XREF: sub_409114+2B↑j
.text:00409159                 mov     edx, ds:_iob
.text:0040915F                 add     edx, 20h ; ' '
.text:00409162                 mov     [esp+28h+Stream], edx ; Stream
.text:00409165                 call    fflush
.text:0040916A                 mov     eax, ds:dword_413560
.text:0040916F                 test    eax, eax
.text:00409171                 jz      loc_409255
.text:00409177                 call    eax ; dword_413560
.text:00409179
.text:00409179 loc_409179:                             ; CODE XREF: sub_409114+164↓j
.text:00409179                 test    ebx, ebx
.text:0040917B                 jz      short loc_40919E
.text:0040917D                 mov     [esp+28h+ArgList], ebx
.text:00409181                 mov     ebx, ds:_iob
.text:00409187                 mov     [esp+28h+var_1C], esi
.text:0040918B                 mov     [esp+28h+Format], offset sub_409114 ; Format
.text:00409193                 add     ebx, 40h ; '@'
.text:00409196                 mov     [esp+28h+Stream], ebx ; Stream
.text:00409199                 call    fprintf
.text:0040919E
.text:0040919E loc_40919E:                             ; CODE XREF: sub_409114+67↑j
.text:0040919E                 mov     esi, ds:_iob
.text:004091A4                 lea     edx, [esp+28h+arg_18]
.text:004091A8                 mov     ecx, [esp+28h+arg_14]
.text:004091AC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004091B0                 add     esi, 40h ; '@'
.text:004091B3                 mov     [esp+28h+Format], ecx ; Format
.text:004091B7                 mov     [esp+28h+Stream], esi ; Stream
.text:004091BA                 call    vfprintf
.text:004091BF                 inc     ds:dword_413570
.text:004091C5                 test    edi, edi
.text:004091C7                 jnz     short loc_409220
.text:004091C9
.text:004091C9 loc_4091C9:                             ; CODE XREF: sub_409114+135↓j
.text:004091C9                 mov     edx, ds:_iob
.text:004091CF                 lea     ecx, [edx+40h]
.text:004091D2                 mov     ebx, [ecx+4]
.text:004091D5                 dec     ebx
.text:004091D6                 test    ebx, ebx
.text:004091D8                 mov     [ecx+4], ebx
.text:004091DB                 js      short loc_409207
.text:004091DD                 mov     esi, [edx+40h]
.text:004091E0                 mov     byte ptr [esi], 0Ah
.text:004091E3                 inc     dword ptr [edx+40h]
.text:004091E6
.text:004091E6 loc_4091E6:                             ; CODE XREF: sub_409114+103↓j
.text:004091E6                 mov     ecx, ds:_iob
.text:004091EC                 add     ecx, 40h ; '@'
.text:004091EF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004091F2                 call    fflush
.text:004091F7                 test    ebp, ebp
.text:004091F9                 jnz     loc_4092A6
.text:004091FF
.text:004091FF loc_4091FF:                             ; CODE XREF: sub_409114+173↓j
.text:004091FF                                         ; sub_409114+187↓j
.text:004091FF                 add     esp, 1Ch
.text:00409202                 pop     ebx
.text:00409203                 pop     esi
.text:00409204                 pop     edi
.text:00409205                 pop     ebp
.text:00409206                 retn
.text:00409207 ; ---------------------------------------------------------------------------
.text:00409207
.text:00409207 loc_409207:                             ; CODE XREF: sub_409114+C7↑j
.text:00409207                 mov     [esp+28h+Format], ecx ; File
.text:0040920B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00409212                 call    _flsbuf
.text:00409217                 jmp     short loc_4091E6
.text:00409217 ; ---------------------------------------------------------------------------
.text:00409219                 align 10h
.text:00409220
.text:00409220 loc_409220:                             ; CODE XREF: sub_409114+B3↑j
.text:00409220                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00409223                 call    strerror
.text:00409228                 test    eax, eax
.text:0040922A                 jz      short loc_40924E
.text:0040922C
.text:0040922C loc_40922C:                             ; CODE XREF: sub_409114+13F↓j
.text:0040922C                 mov     [esp+28h+ArgList], eax
.text:00409230                 mov     edi, ds:_iob
.text:00409236                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:0040923E                 add     edi, 40h ; '@'
.text:00409241                 mov     [esp+28h+Stream], edi ; Stream
.text:00409244                 call    fprintf
.text:00409249                 jmp     loc_4091C9
.text:0040924E ; ---------------------------------------------------------------------------
.text:0040924E
.text:0040924E loc_40924E:                             ; CODE XREF: sub_409114+116↑j
.text:0040924E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409253                 jmp     short loc_40922C
.text:00409255 ; ---------------------------------------------------------------------------
.text:00409255
.text:00409255 loc_409255:                             ; CODE XREF: sub_409114+5D↑j
.text:00409255                 mov     [esp+28h+Format], (offset loc_40911B+1) ; Format
.text:0040925D                 mov     ecx, ds:_iob
.text:00409263                 mov     edx, ds:dword_413530
.text:00409269                 add     ecx, 40h ; '@'
.text:0040926C                 mov     [esp+28h+ArgList], edx
.text:00409270                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409273                 call    fprintf
.text:00409278                 jmp     loc_409179
.text:00409278 ; ---------------------------------------------------------------------------
.text:0040927D                 align 10h
.text:00409280
.text:00409280 loc_409280:                             ; CODE XREF: sub_409114+33↑j
.text:00409280                 mov     eax, ds:Str1
.text:00409285                 cmp     ebx, eax
.text:00409287                 jz      loc_4091FF
.text:0040928D                 mov     [esp+28h+Format], ebx ; Str2
.text:00409291                 mov     [esp+28h+Stream], eax ; Str1
.text:00409294                 call    strcmp
.text:00409299                 test    eax, eax
.text:0040929B                 jz      loc_4091FF
.text:004092A1                 jmp     loc_40914D
.text:004092A6 ; ---------------------------------------------------------------------------
.text:004092A6
.text:004092A6 loc_4092A6:                             ; CODE XREF: sub_409114+E5↑j
.text:004092A6                 mov     [esp+28h+Stream], ebp ; Code
.text:004092A9                 call    exit
.text:004092A9 sub_409114      endp ; sp-analysis failed
.text:004092A9
.text:004092A9 ; ---------------------------------------------------------------------------
.text:004092AE                 align 10h
.text:004092B0
.text:004092B0 ; =============== S U B R O U T I N E =======================================
.text:004092B0
.text:004092B0
.text:004092B0 sub_4092B0      proc near               ; CODE XREF: sub_402420+46↑p
.text:004092B0
.text:004092B0 hNamedPipe      = dword ptr -0Ch
.text:004092B0 var_8           = dword ptr -8
.text:004092B0 var_4           = dword ptr -4
.text:004092B0 arg_0           = dword ptr  4
.text:004092B0 arg_4           = dword ptr  8
.text:004092B0
.text:004092B0                 sub     esp, 0Ch
.text:004092B3                 mov     edx, [esp+0Ch+arg_4]
.text:004092B7                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:004092BE                 mov     [esp+0Ch+var_4], edx ; int
.text:004092C2                 mov     edx, [esp+0Ch+arg_0]
.text:004092C6                 mov     [esp+0Ch+var_8], edx ; int
.text:004092CA                 call    sub_409520
.text:004092CF                 add     esp, 0Ch
.text:004092D2                 retn
.text:004092D2 sub_4092B0      endp
.text:004092D2
.text:004092D2 ; ---------------------------------------------------------------------------
.text:004092D3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:004092D3                                         ; DATA XREF: .text:004093BE↓o
.text:004092E6 aModeO          db 'mode:      %#o',0Ah,0
.text:004092E6                                         ; DATA XREF: .text:004093D4↓o
.text:004092F6 aUidLd          db 'uid:       %ld',0Ah,0
.text:004092F6                                         ; DATA XREF: .text:004093E7↓o
.text:00409306 aGidLd          db 'gid:       %ld',0Ah,0
.text:00409306                                         ; DATA XREF: .text:004093FA↓o
.text:00409316 aDevLu          db 'dev:       %lu',0Ah,0
.text:00409316                                         ; DATA XREF: .text:0040940D↓o
.text:00409326 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00409326                                         ; DATA XREF: .text:00409420↓o
.text:00409336 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00409336                                         ; DATA XREF: .text:00409436↓o
.text:00409348 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00409348                                         ; DATA XREF: .text:0040944D↓o
.text:00409357 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00409357                                         ; DATA XREF: .text:00409463↓o
.text:00409369 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00409369                                         ; DATA XREF: .text:00409489↓o
.text:0040937C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0040937C                                         ; DATA XREF: .text:004094AB↓o
.text:0040938F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0040938F                                         ; DATA XREF: .text:004094CD↓o
.text:004093A3                 align 10h
.text:004093B0                 push    ebx
.text:004093B1                 sub     esp, 18h
.text:004093B4                 mov     ebx, [esp+20h]
.text:004093B8                 mov     edx, [ebx+8]
.text:004093BB                 mov     ecx, [ebx+0Ch]
.text:004093BE                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:004093C5                 mov     [esp+4], edx
.text:004093C9                 mov     [esp+8], ecx
.text:004093CD                 call    printf
.text:004093D2                 mov     ecx, [ebx]
.text:004093D4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:004093DB                 mov     [esp+4], ecx
.text:004093DF                 call    printf
.text:004093E4                 mov     edx, [ebx+1Ch]
.text:004093E7                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:004093EE                 mov     [esp+4], edx
.text:004093F2                 call    printf
.text:004093F7                 mov     ecx, [ebx+20h]
.text:004093FA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00409401                 mov     [esp+4], ecx
.text:00409405                 call    printf
.text:0040940A                 mov     edx, [ebx+10h]
.text:0040940D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00409414                 mov     [esp+4], edx
.text:00409418                 call    printf
.text:0040941D                 mov     ecx, [ebx+18h]
.text:00409420                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00409427                 mov     [esp+4], ecx
.text:0040942B                 call    printf
.text:00409430                 mov     edx, [ebx+30h]
.text:00409433                 mov     ecx, [ebx+34h]
.text:00409436                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0040943D                 mov     [esp+4], edx
.text:00409441                 mov     [esp+8], ecx
.text:00409445                 call    printf
.text:0040944A                 mov     ecx, [ebx+50h]
.text:0040944D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00409454                 mov     [esp+4], ecx
.text:00409458                 call    printf
.text:0040945D                 mov     ecx, [ebx+5Ch]
.text:00409460                 mov     edx, [ebx+58h]
.text:00409463                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0040946A                 mov     [esp+8], ecx
.text:0040946E                 mov     [esp+4], edx
.text:00409472                 call    printf
.text:00409477                 lea     edx, [ebx+38h]
.text:0040947A                 mov     [esp], edx
.text:0040947D                 call    ctime
.text:00409482                 mov     [esp+8], eax
.text:00409486                 mov     ecx, [ebx+38h]
.text:00409489                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00409490                 mov     [esp+4], ecx
.text:00409494                 call    printf
.text:00409499                 lea     edx, [ebx+40h]
.text:0040949C                 mov     [esp], edx
.text:0040949F                 call    ctime
.text:004094A4                 mov     [esp+8], eax
.text:004094A8                 mov     ecx, [ebx+40h]
.text:004094AB                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:004094B2                 mov     [esp+4], ecx
.text:004094B6                 call    printf
.text:004094BB                 lea     edx, [ebx+48h]
.text:004094BE                 mov     [esp], edx
.text:004094C1                 call    ctime
.text:004094C6                 mov     [esp+8], eax
.text:004094CA                 mov     edx, [ebx+48h]
.text:004094CD                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:004094D4                 mov     [esp+4], edx
.text:004094D8                 call    printf
.text:004094DD                 add     esp, 18h
.text:004094E0                 xor     eax, eax
.text:004094E2                 pop     ebx
.text:004094E3                 retn
.text:004094E3 ; ---------------------------------------------------------------------------
.text:004094E4                 align 10h
.text:004094F0 ; const char aFxstat64BadFil[]
.text:004094F0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:004094F0                                         ; DATA XREF: sub_409520+7B↓o
.text:00409514                 align 10h
.text:00409520
.text:00409520 ; =============== S U B R O U T I N E =======================================
.text:00409520
.text:00409520
.text:00409520 ; int __cdecl sub_409520(HANDLE hNamedPipe, int, int)
.text:00409520 sub_409520      proc near               ; CODE XREF: sub_4092B0+1A↑p
.text:00409520                                         ; .text:0040BCB9↓p
.text:00409520
.text:00409520 FileHandle      = dword ptr -1Ch
.text:00409520 var_18          = dword ptr -18h
.text:00409520 var_C           = dword ptr -0Ch
.text:00409520 var_8           = dword ptr -8
.text:00409520 var_4           = dword ptr -4
.text:00409520 hNamedPipe      = dword ptr  4
.text:00409520 arg_4           = dword ptr  8
.text:00409520 arg_8           = dword ptr  0Ch
.text:00409520
.text:00409520                 sub     esp, 1Ch
.text:00409523                 mov     edx, [esp+1Ch+arg_4]
.text:00409527                 mov     [esp+1Ch+var_C], ebx
.text:0040952B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040952F                 mov     [esp+1Ch+var_8], esi
.text:00409533                 mov     esi, [esp+1Ch+arg_8]
.text:00409537                 test    ebx, ebx
.text:00409539                 mov     [esp+1Ch+var_4], edi
.text:0040953D                 jnz     short loc_409577
.text:0040953F                 test    edx, edx
.text:00409541                 js      short loc_409597
.text:00409543                 test    esi, esi
.text:00409545                 jz      short loc_409577
.text:00409547                 cld
.text:00409548                 mov     eax, ebx
.text:0040954A                 mov     edi, esi
.text:0040954C                 mov     ecx, 18h
.text:00409551                 rep stosd
.text:00409553                 mov     [esp+1Ch+arg_4], esi ; int
.text:00409557                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040955A                 call    _get_osfhandle
.text:0040955F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00409563                 mov     ebx, [esp+1Ch+var_C]
.text:00409567                 mov     esi, [esp+1Ch+var_8]
.text:0040956B                 mov     edi, [esp+1Ch+var_4]
.text:0040956F                 add     esp, 1Ch
.text:00409572                 jmp     sub_409900
.text:00409577 ; ---------------------------------------------------------------------------
.text:00409577
.text:00409577 loc_409577:                             ; CODE XREF: sub_409520+1D↑j
.text:00409577                                         ; sub_409520+25↑j
.text:00409577                 call    _errno
.text:0040957C                 mov     dword ptr [eax], 16h
.text:00409582
.text:00409582 loc_409582:                             ; CODE XREF: sub_409520+92↓j
.text:00409582                 mov     ebx, [esp+1Ch+var_C]
.text:00409586                 mov     eax, 0FFFFFFFFh
.text:0040958B                 mov     esi, [esp+1Ch+var_8]
.text:0040958F                 mov     edi, [esp+1Ch+var_4]
.text:00409593                 add     esp, 1Ch
.text:00409596                 retn
.text:00409597 ; ---------------------------------------------------------------------------
.text:00409597
.text:00409597 loc_409597:                             ; CODE XREF: sub_409520+21↑j
.text:00409597                 mov     [esp+1Ch+var_18], edx
.text:0040959B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:004095A2                 call    printf
.text:004095A7                 call    _errno
.text:004095AC                 mov     dword ptr [eax], 9
.text:004095B2                 jmp     short loc_409582
.text:004095B2 sub_409520      endp
.text:004095B2
.text:004095B2 ; ---------------------------------------------------------------------------
.text:004095B4                 db 1Ch dup(90h)
.text:004095D0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004095D0                                         ; DATA XREF: .data:off_412064↓o
.text:004095E4 ; const CHAR LibFileName[]
.text:004095E4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_409610+11↓o
.text:004095E4                                         ; sub_409780+C↓o ...
.text:004095F1 ; const CHAR ProcName[]
.text:004095F1 ProcName        db 'GetFileAttributesExA',0
.text:004095F1                                         ; DATA XREF: sub_409610+28↓o
.text:00409606                 align 10h
.text:00409610
.text:00409610 ; =============== S U B R O U T I N E =======================================
.text:00409610
.text:00409610
.text:00409610 ; int __cdecl sub_409610(LPCSTR lpFileName, int)
.text:00409610 sub_409610      proc near               ; CODE XREF: .text:0040A7B4↓p
.text:00409610                                         ; sub_40ABB0+37↓p
.text:00409610
.text:00409610 lpModuleName    = dword ptr -18Ch
.text:00409610 lpProcName      = dword ptr -188h
.text:00409610 var_184         = dword ptr -184h
.text:00409610 var_170         = dword ptr -170h
.text:00409610 var_164         = dword ptr -164h
.text:00409610 hModule         = dword ptr -160h
.text:00409610 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00409610 lpFileName      = dword ptr  4
.text:00409610 arg_4           = dword ptr  8
.text:00409610
.text:00409610                 push    ebp
.text:00409611                 push    edi
.text:00409612                 push    esi
.text:00409613                 push    ebx
.text:00409614                 sub     esp, 17Ch
.text:0040961A                 mov     ebx, [esp+18Ch+arg_4]
.text:00409621                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00409628                 call    GetModuleHandleA
.text:0040962D                 sub     esp, 4
.text:00409630                 mov     [esp+18Ch+hModule], eax
.text:00409634                 mov     edx, [esp+18Ch+hModule]
.text:00409638                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00409640                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00409643                 call    GetProcAddress
.text:00409648                 sub     esp, 8
.text:0040964B                 mov     ebp, eax
.text:0040964D                 mov     eax, [esp+18Ch+lpFileName]
.text:00409654                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00409657                 call    GetFileAttributesA
.text:0040965C                 sub     esp, 4
.text:0040965F                 mov     [esp+18Ch+var_164], eax
.text:00409663                 xor     eax, eax
.text:00409665                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040966A                 jz      short loc_4096C1
.text:0040966C                 cld
.text:0040966D                 mov     ecx, 50h ; 'P'
.text:00409672                 lea     esi, [esp+18Ch+FindFileData]
.text:00409676                 mov     edi, esi
.text:00409678                 test    ebp, ebp
.text:0040967A                 rep stosd
.text:0040967C                 mov     [esp+18Ch+var_170], 0
.text:00409684                 jz      short loc_4096A5
.text:00409686                 mov     [esp+18Ch+var_184], ebx
.text:0040968A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00409691                 mov     [esp+18Ch+lpProcName], 0
.text:00409699                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040969C                 call    ebp
.text:0040969E                 sub     esp, 0Ch
.text:004096A1                 mov     [esp+18Ch+var_170], eax
.text:004096A5
.text:004096A5 loc_4096A5:                             ; CODE XREF: sub_409610+74↑j
.text:004096A5                 mov     eax, [esp+18Ch+var_170]
.text:004096A9                 test    eax, eax
.text:004096AB                 jz      short loc_4096D0
.text:004096AD
.text:004096AD loc_4096AD:                             ; CODE XREF: sub_409610+131↓j
.text:004096AD                                         ; sub_409610+14B↓j
.text:004096AD                 mov     ebx, [esp+18Ch+hModule]
.text:004096B1                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:004096B4                 call    FreeLibrary
.text:004096B9                 sub     esp, 4
.text:004096BC                 mov     eax, 1
.text:004096C1
.text:004096C1 loc_4096C1:                             ; CODE XREF: sub_409610+5A↑j
.text:004096C1                 add     esp, 17Ch
.text:004096C7                 pop     ebx
.text:004096C8                 pop     esi
.text:004096C9                 pop     edi
.text:004096CA                 pop     ebp
.text:004096CB                 retn
.text:004096CB ; ---------------------------------------------------------------------------
.text:004096CC                 align 10h
.text:004096D0
.text:004096D0 loc_4096D0:                             ; CODE XREF: sub_409610+9B↑j
.text:004096D0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004096D4                 mov     edx, [esp+18Ch+lpFileName]
.text:004096DB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004096DE                 call    FindFirstFileA
.text:004096E3                 sub     esp, 8
.text:004096E6                 xor     ecx, ecx
.text:004096E8                 cmp     eax, 0FFFFFFFFh
.text:004096EB                 setnz   cl
.text:004096EE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004096F2                 mov     [ebx], edi
.text:004096F4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004096F8                 mov     [esp+18Ch+var_170], ecx
.text:004096FC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00409700                 mov     [ebx+8], esi
.text:00409703                 mov     [ebx+4], ecx
.text:00409706                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040970A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040970E                 mov     [ebx+0Ch], ebp
.text:00409711                 mov     [ebx+10h], edi
.text:00409714                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00409718                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040971C                 mov     [ebx+18h], esi
.text:0040971F                 mov     [ebx+14h], ecx
.text:00409722                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00409726                 mov     [ebx+1Ch], ebp
.text:00409729                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040972D                 mov     [ebx+20h], edi
.text:00409730                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00409733                 call    FindClose
.text:00409738                 sub     esp, 4
.text:0040973B                 mov     esi, [esp+18Ch+var_170]
.text:0040973F                 test    esi, esi
.text:00409741                 jnz     loc_4096AD
.text:00409747                 cld
.text:00409748                 mov     eax, [esp+18Ch+var_170]
.text:0040974C                 mov     ecx, 9
.text:00409751                 mov     edi, ebx
.text:00409753                 rep stosd
.text:00409755                 mov     ebp, [esp+18Ch+var_164]
.text:00409759                 mov     [ebx], ebp
.text:0040975B                 jmp     loc_4096AD
.text:0040975B sub_409610      endp
.text:0040975B
.text:0040975B ; ---------------------------------------------------------------------------
.text:00409760 ; const CHAR aFindfirstfilee[]
.text:00409760 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_409780+23↓o
.text:00409771 ; const char Source[]
.text:00409771 Source          db '\*',0               ; DATA XREF: sub_409780:loc_40980D↓o
.text:00409774                 align 10h
.text:00409780
.text:00409780 ; =============== S U B R O U T I N E =======================================
.text:00409780
.text:00409780
.text:00409780 ; int __cdecl sub_409780(char *Str)
.text:00409780 sub_409780      proc near               ; CODE XREF: .text:0040A8B3↓p
.text:00409780                                         ; sub_40ABB0+3FA↓p ...
.text:00409780
.text:00409780 lpLibFileName   = dword ptr -18Ch
.text:00409780 lpProcName      = dword ptr -188h
.text:00409780 var_184         = dword ptr -184h
.text:00409780 var_180         = dword ptr -180h
.text:00409780 var_17C         = dword ptr -17Ch
.text:00409780 var_178         = dword ptr -178h
.text:00409780 var_164         = dword ptr -164h
.text:00409780 hModule         = dword ptr -160h
.text:00409780 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00409780 Str             = dword ptr  4
.text:00409780
.text:00409780                 push    ebp
.text:00409781                 push    edi
.text:00409782                 xor     edi, edi
.text:00409784                 push    esi
.text:00409785                 push    ebx
.text:00409786                 sub     esp, 17Ch
.text:0040978C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00409793                 call    LoadLibraryA
.text:00409798                 sub     esp, 4
.text:0040979B                 mov     [esp+18Ch+hModule], eax
.text:0040979F                 mov     ecx, [esp+18Ch+hModule]
.text:004097A3                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:004097AB                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:004097AE                 call    GetProcAddress
.text:004097B3                 sub     esp, 8
.text:004097B6                 mov     edx, [esp+18Ch+Str]
.text:004097BD                 mov     [esp+18Ch+var_164], eax
.text:004097C1                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:004097C4                 call    strlen
.text:004097C9                 lea     edx, [eax+5]
.text:004097CC                 mov     ebx, eax
.text:004097CE                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:004097D1                 call    malloc
.text:004097D6                 mov     esi, eax
.text:004097D8                 test    esi, esi
.text:004097DA                 mov     eax, 1
.text:004097DF                 jz      loc_4098BD
.text:004097E5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004097E8                 mov     ebp, [esp+18Ch+Str]
.text:004097EF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:004097F3                 call    strcpy
.text:004097F8                 movzx   eax, byte ptr [ebx+esi-1]
.text:004097FD                 cmp     al, 2Fh ; '/'
.text:004097FF                 jz      loc_4098EB
.text:00409805                 cmp     al, 5Ch ; '\'
.text:00409807                 jz      loc_4098EB
.text:0040980D
.text:0040980D loc_40980D:                             ; CODE XREF: sub_409780+170↓j
.text:0040980D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00409815                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00409818                 call    strcat
.text:0040981D                 mov     eax, [esp+18Ch+var_164]
.text:00409821                 test    eax, eax
.text:00409823                 jz      loc_4098E5
.text:00409829                 mov     [esp+18Ch+var_178], 0
.text:00409831                 lea     ebp, [esp+18Ch+FindFileData]
.text:00409835                 mov     [esp+18Ch+var_17C], 0
.text:0040983D                 mov     [esp+18Ch+var_180], 1
.text:00409845                 mov     [esp+18Ch+var_184], ebp
.text:00409849                 mov     [esp+18Ch+lpProcName], 0
.text:00409851                 mov     [esp+18Ch+lpLibFileName], esi
.text:00409854                 call    [esp+18Ch+var_164]
.text:00409858                 sub     esp, 18h
.text:0040985B                 mov     ebx, eax
.text:0040985D                 cmp     eax, 0FFFFFFFFh
.text:00409860                 jz      short loc_4098C8
.text:00409862                 lea     esi, [esi+0]
.text:00409869                 lea     edi, [edi+0]
.text:00409870
.text:00409870 loc_409870:                             ; CODE XREF: sub_409780+109↓j
.text:00409870                                         ; sub_409780+161↓j
.text:00409870                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00409875                 jz      short loc_409878
.text:00409877                 inc     edi
.text:00409878
.text:00409878 loc_409878:                             ; CODE XREF: sub_409780+F5↑j
.text:00409878                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040987C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040987F                 call    FindNextFileA
.text:00409884                 sub     esp, 8
.text:00409887                 test    eax, eax
.text:00409889                 jnz     short loc_409870
.text:0040988B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040988E                 call    FindClose
.text:00409893                 sub     esp, 4
.text:00409896                 mov     esi, [esp+18Ch+hModule]
.text:0040989A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040989D                 call    FreeLibrary
.text:004098A2                 sub     esp, 4
.text:004098A5                 mov     ebx, [esp+18Ch+Str]
.text:004098AC                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:004098AF                 call    sub_40BD50
.text:004098B4                 test    eax, eax
.text:004098B6                 jz      short loc_4098BB
.text:004098B8                 add     edi, 2
.text:004098BB
.text:004098BB loc_4098BB:                             ; CODE XREF: sub_409780+136↑j
.text:004098BB                 mov     eax, edi
.text:004098BD
.text:004098BD loc_4098BD:                             ; CODE XREF: sub_409780+5F↑j
.text:004098BD                                         ; sub_409780+163↓j
.text:004098BD                 add     esp, 17Ch
.text:004098C3                 pop     ebx
.text:004098C4                 pop     esi
.text:004098C5                 pop     edi
.text:004098C6                 pop     ebp
.text:004098C7                 retn
.text:004098C8 ; ---------------------------------------------------------------------------
.text:004098C8
.text:004098C8 loc_4098C8:                             ; CODE XREF: sub_409780+E0↑j
.text:004098C8                                         ; sub_409780+169↓j
.text:004098C8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:004098CC                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:004098CF                 call    FindFirstFileA
.text:004098D4                 mov     ebx, eax
.text:004098D6                 sub     esp, 8
.text:004098D9                 cmp     ebx, 0FFFFFFFFh
.text:004098DC                 mov     eax, 2
.text:004098E1                 jnz     short loc_409870
.text:004098E3                 jmp     short loc_4098BD
.text:004098E5 ; ---------------------------------------------------------------------------
.text:004098E5
.text:004098E5 loc_4098E5:                             ; CODE XREF: sub_409780+A3↑j
.text:004098E5                 lea     ebp, [esp+18Ch+FindFileData]
.text:004098E9                 jmp     short loc_4098C8
.text:004098EB ; ---------------------------------------------------------------------------
.text:004098EB
.text:004098EB loc_4098EB:                             ; CODE XREF: sub_409780+7F↑j
.text:004098EB                                         ; sub_409780+87↑j
.text:004098EB                 mov     byte ptr [ebx+esi-1], 0
.text:004098F0                 jmp     loc_40980D
.text:004098F0 sub_409780      endp
.text:004098F0
.text:004098F0 ; ---------------------------------------------------------------------------
.text:004098F5                 align 10h
.text:00409900
.text:00409900 ; =============== S U B R O U T I N E =======================================
.text:00409900
.text:00409900
.text:00409900 ; int __cdecl sub_409900(HANDLE hNamedPipe, int)
.text:00409900 sub_409900      proc near               ; CODE XREF: sub_409520+52↑j
.text:00409900                                         ; sub_40ECA0-3C29↓p
.text:00409900
.text:00409900 hFile           = dword ptr -0ECh
.text:00409900 lpFileInformation= dword ptr -0E8h
.text:00409900 nBufferSize     = dword ptr -0E4h
.text:00409900 lpBytesRead     = dword ptr -0E0h
.text:00409900 lpTotalBytesAvail= dword ptr -0DCh
.text:00409900 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00409900 var_C4          = dword ptr -0C4h
.text:00409900 var_C0          = dword ptr -0C0h
.text:00409900 var_BC          = dword ptr -0BCh
.text:00409900 var_B8          = dword ptr -0B8h
.text:00409900 var_B4          = dword ptr -0B4h
.text:00409900 var_B0          = dword ptr -0B0h
.text:00409900 var_AC          = dword ptr -0ACh
.text:00409900 var_A8          = dword ptr -0A8h
.text:00409900 TotalBytesAvail = dword ptr -0A0h
.text:00409900 var_9C          = dword ptr -9Ch
.text:00409900 var_98          = dword ptr -98h
.text:00409900 var_94          = dword ptr -94h
.text:00409900 var_90          = dword ptr -90h
.text:00409900 var_8C          = dword ptr -8Ch
.text:00409900 var_88          = dword ptr -88h
.text:00409900 var_84          = dword ptr -84h
.text:00409900 var_80          = dword ptr -80h
.text:00409900 var_7C          = dword ptr -7Ch
.text:00409900 var_78          = dword ptr -78h
.text:00409900 var_74          = dword ptr -74h
.text:00409900 var_70          = dword ptr -70h
.text:00409900 var_6C          = dword ptr -6Ch
.text:00409900 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00409900 hNamedPipe      = dword ptr  4
.text:00409900 arg_4           = dword ptr  8
.text:00409900
.text:00409900                 push    ebp
.text:00409901                 mov     eax, 0FFFFFFFFh
.text:00409906                 push    edi
.text:00409907                 push    esi
.text:00409908                 push    ebx
.text:00409909                 sub     esp, 0DCh
.text:0040990F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00409916                 mov     ebp, [esp+0ECh+arg_4]
.text:0040991D                 cmp     esi, 0FFFFFFFFh
.text:00409920                 jz      loc_409CA1
.text:00409926                 cld
.text:00409927                 xor     eax, eax
.text:00409929                 lea     ebx, [esp+0ECh+FileInformation]
.text:00409930                 mov     ecx, 0Dh
.text:00409935                 mov     edi, ebx
.text:00409937                 rep stosd
.text:00409939                 mov     dword ptr [ebp+18h], 1
.text:00409940                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409943                 call    GetFileType
.text:00409948                 sub     esp, 4
.text:0040994B                 xor     edx, edx
.text:0040994D                 cmp     eax, 2
.text:00409950                 jz      loc_409D80
.text:00409956                 cmp     eax, 3
.text:00409959                 jz      loc_409D70
.text:0040995F
.text:0040995F loc_40995F:                             ; CODE XREF: sub_409900+475↓j
.text:0040995F                                         ; sub_409900+485↓j
.text:0040995F                 or      [ebp+0], edx
.text:00409962                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00409966                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409969                 call    GetFileInformationByHandle
.text:0040996E                 sub     esp, 8
.text:00409971                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00409978                 test    ecx, ecx
.text:0040997A                 jnz     short loc_4099B0
.text:0040997C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409983                 test    edx, edx
.text:00409985                 jnz     short loc_4099B0
.text:00409987                 mov     edx, [ebp+0]
.text:0040998A                 and     edx, 0F000h
.text:00409990                 cmp     edx, 1000h
.text:00409996                 jz      loc_409D06
.text:0040999C
.text:0040999C loc_40999C:                             ; CODE XREF: sub_409900+459↓j
.text:0040999C                                         ; sub_409900+465↓j
.text:0040999C                 test    ecx, ecx
.text:0040999E                 jnz     short loc_4099B0
.text:004099A0                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004099A7                 test    edx, edx
.text:004099A9                 jz      loc_409CE4
.text:004099AF                 nop
.text:004099B0
.text:004099B0 loc_4099B0:                             ; CODE XREF: sub_409900+7A↑j
.text:004099B0                                         ; sub_409900+85↑j ...
.text:004099B0                 cld
.text:004099B1                 mov     esi, ebx
.text:004099B3                 mov     dword ptr [ebp+14h], 0
.text:004099BA                 lea     edi, [esp+0ECh+var_9C]
.text:004099BE                 mov     ecx, 0Dh
.text:004099C3                 rep movsd
.text:004099C5                 xor     ebx, ebx
.text:004099C7                 xor     edi, edi
.text:004099C9                 mov     edx, [esp+0ECh+var_6C]
.text:004099D0                 mov     esi, [esp+0ECh+var_70]
.text:004099D4                 or      edx, ebx
.text:004099D6                 mov     ebx, [esp+0ECh+var_9C]
.text:004099DA                 mov     [ebp+8], edx
.text:004099DD                 or      edi, esi
.text:004099DF                 xor     edx, edx
.text:004099E1                 mov     [ebp+0Ch], edi
.text:004099E4                 test    bl, 10h
.text:004099E7                 mov     esi, [esp+0ECh+var_80]
.text:004099EB                 setz    dl
.text:004099EE                 mov     [ebp+10h], esi
.text:004099F1                 dec     edx
.text:004099F2                 and     edx, 0FFFFC000h
.text:004099F8                 add     edx, 8000h
.text:004099FE                 or      edx, 124h
.text:00409A04                 test    bl, 1
.text:00409A07                 movzx   eax, dx
.text:00409A0A                 jnz     short loc_409A11
.text:00409A0C                 or      eax, 92h
.text:00409A11
.text:00409A11 loc_409A11:                             ; CODE XREF: sub_409900+10A↑j
.text:00409A11                 or      [ebp+0], eax
.text:00409A14                 xor     edx, edx
.text:00409A16                 mov     ebx, [esp+0ECh+var_7C]
.text:00409A1A                 mov     ecx, [esp+0ECh+var_78]
.text:00409A1E                 mov     eax, edx
.text:00409A20                 xor     esi, esi
.text:00409A22                 mov     edx, [esp+0ECh+var_8C]
.text:00409A26                 mov     edi, ebx
.text:00409A28                 or      eax, edi
.text:00409A2A                 mov     [esp+0ECh+var_A8], eax
.text:00409A2E                 mov     ebx, ecx
.text:00409A30                 mov     edi, [esp+0ECh+var_74]
.text:00409A34                 or      ebx, esi
.text:00409A36                 mov     esi, [esp+0ECh+var_A8]
.text:00409A3A                 mov     [esp+0ECh+var_AC], ebx
.text:00409A3E                 xor     ebx, ebx
.text:00409A40                 mov     ecx, [esp+0ECh+var_AC]
.text:00409A44                 mov     [ebp+34h], esi
.text:00409A47                 mov     esi, [esp+0ECh+var_90]
.text:00409A4B                 mov     [ebp+18h], edi
.text:00409A4E                 xor     edi, edi
.text:00409A50                 or      esi, ebx
.text:00409A52                 mov     [ebp+30h], ecx
.text:00409A55                 or      edi, edx
.text:00409A57                 mov     edx, esi
.text:00409A59                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409A61                 sub     edx, 0D53E8000h
.text:00409A67                 mov     ebx, edi
.text:00409A69                 sbb     ebx, 19DB1DEh
.text:00409A6F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00409A73                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409A7B                 mov     [esp+0ECh+hFile], edx
.text:00409A7E                 call    sub_410F20
.text:00409A83                 mov     ecx, eax
.text:00409A85                 shr     eax, 1Fh
.text:00409A88                 dec     eax
.text:00409A89                 and     ecx, eax
.text:00409A8B                 mov     [ebp+38h], ecx
.text:00409A8E                 mov     [esp+0ECh+hFile], esi
.text:00409A91                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409A95                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409A9D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409AA5                 call    sub_411040
.text:00409AAA                 lea     ebx, [eax+eax*4]
.text:00409AAD                 xor     ecx, ecx
.text:00409AAF                 lea     esi, [ebx+ebx*4]
.text:00409AB2                 shl     esi, 2
.text:00409AB5                 mov     edi, esi
.text:00409AB7                 shr     edi, 1Fh
.text:00409ABA                 dec     edi
.text:00409ABB                 and     edi, esi
.text:00409ABD                 mov     [ebp+3Ch], edi
.text:00409AC0                 mov     esi, [esp+0ECh+var_98]
.text:00409AC4                 xor     edi, edi
.text:00409AC6                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409ACE                 mov     edx, [esp+0ECh+var_94]
.text:00409AD2                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409ADA                 or      esi, ecx
.text:00409ADC                 or      edi, edx
.text:00409ADE                 mov     edx, esi
.text:00409AE0                 mov     ecx, edi
.text:00409AE2                 sub     edx, 0D53E8000h
.text:00409AE8                 sbb     ecx, 19DB1DEh
.text:00409AEE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00409AF2                 mov     [esp+0ECh+hFile], edx
.text:00409AF5                 call    sub_410F20
.text:00409AFA                 mov     ebx, eax
.text:00409AFC                 shr     eax, 1Fh
.text:00409AFF                 dec     eax
.text:00409B00                 and     ebx, eax
.text:00409B02                 mov     [ebp+48h], ebx
.text:00409B05                 xor     ebx, ebx
.text:00409B07                 mov     [esp+0ECh+hFile], esi
.text:00409B0A                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409B0E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409B16                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409B1E                 call    sub_411040
.text:00409B23                 lea     ecx, [eax+eax*4]
.text:00409B26                 lea     esi, [ecx+ecx*4]
.text:00409B29                 shl     esi, 2
.text:00409B2C                 mov     edi, esi
.text:00409B2E                 shr     edi, 1Fh
.text:00409B31                 dec     edi
.text:00409B32                 and     edi, esi
.text:00409B34                 mov     [ebp+4Ch], edi
.text:00409B37                 mov     esi, [esp+0ECh+var_88]
.text:00409B3B                 xor     edi, edi
.text:00409B3D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409B45                 mov     edx, [esp+0ECh+var_84]
.text:00409B49                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409B51                 or      esi, ebx
.text:00409B53                 or      edi, edx
.text:00409B55                 mov     edx, esi
.text:00409B57                 mov     ebx, edi
.text:00409B59                 sub     edx, 0D53E8000h
.text:00409B5F                 sbb     ebx, 19DB1DEh
.text:00409B65                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00409B69                 mov     [esp+0ECh+hFile], edx
.text:00409B6C                 call    sub_410F20
.text:00409B71                 mov     ecx, eax
.text:00409B73                 shr     eax, 1Fh
.text:00409B76                 dec     eax
.text:00409B77                 and     ecx, eax
.text:00409B79                 mov     [ebp+40h], ecx
.text:00409B7C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409B80                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409B88                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409B90                 mov     [esp+0ECh+hFile], esi
.text:00409B93                 call    sub_411040
.text:00409B98                 mov     dword ptr [ebp+50h], 200h
.text:00409B9F                 lea     ebx, [eax+eax*4]
.text:00409BA2                 mov     edi, [esp+0ECh+var_A8]
.text:00409BA6                 lea     edx, [ebx+ebx*4]
.text:00409BA9                 mov     eax, [esp+0ECh+var_AC]
.text:00409BAD                 shl     edx, 2
.text:00409BB0                 mov     ecx, edx
.text:00409BB2                 shr     ecx, 1Fh
.text:00409BB5                 dec     ecx
.text:00409BB6                 and     ecx, edx
.text:00409BB8                 test    edi, edi
.text:00409BBA                 mov     edx, [esp+0ECh+var_A8]
.text:00409BBE                 mov     [ebp+44h], ecx
.text:00409BC1                 js      loc_409CD7
.text:00409BC7
.text:00409BC7 loc_409BC7:                             ; CODE XREF: sub_409900+3DF↓j
.text:00409BC7                 mov     edi, [esp+0ECh+var_AC]
.text:00409BCB                 xor     esi, esi
.text:00409BCD                 mov     ecx, eax
.text:00409BCF                 shrd    ecx, edx, 9
.text:00409BD3                 mov     ebx, edx
.text:00409BD5                 mov     eax, esi
.text:00409BD7                 and     edi, 1FFh
.text:00409BDD                 sar     ebx, 9
.text:00409BE0                 or      eax, edi
.text:00409BE2                 jz      short loc_409BEA
.text:00409BE4                 add     ecx, 1
.text:00409BE7                 adc     ebx, 0
.text:00409BEA
.text:00409BEA loc_409BEA:                             ; CODE XREF: sub_409900+2E2↑j
.text:00409BEA                 mov     [ebp+5Ch], ebx
.text:00409BED                 mov     esi, dword_412060
.text:00409BF3                 xor     edi, edi
.text:00409BF5                 mov     [ebp+58h], ecx
.text:00409BF8                 mov     ebx, dword_412060
.text:00409BFE                 mov     ecx, [esp+0ECh+var_A8]
.text:00409C02                 mov     edx, [esp+0ECh+var_AC]
.text:00409C06                 mov     [ebp+50h], ebx
.text:00409C09                 shr     ebx, 9
.text:00409C0C                 mov     [esp+0ECh+lpBytesRead], edi
.text:00409C10                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00409C14                 mov     [esp+0ECh+nBufferSize], esi
.text:00409C18                 mov     [esp+0ECh+hFile], edx
.text:00409C1B                 call    sub_410F20
.text:00409C20                 mov     [esp+0ECh+lpBytesRead], edi
.text:00409C24                 mov     ecx, [esp+0ECh+var_AC]
.text:00409C28                 mov     edi, [esp+0ECh+var_A8]
.text:00409C2C                 mov     [esp+0ECh+var_BC], ebx
.text:00409C30                 mov     [esp+0ECh+var_B4], eax
.text:00409C34                 mov     [esp+0ECh+var_B0], edx
.text:00409C38                 mov     [esp+0ECh+var_B8], 0
.text:00409C40                 mov     [esp+0ECh+nBufferSize], esi
.text:00409C44                 mov     [esp+0ECh+hFile], ecx
.text:00409C47                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409C4B                 call    sub_411040
.text:00409C50                 mov     ebx, edx
.text:00409C52                 or      ebx, eax
.text:00409C54                 jz      short loc_409CB0
.text:00409C56                 mov     edi, [esp+0ECh+var_B4]
.text:00409C5A                 mov     esi, [esp+0ECh+var_B0]
.text:00409C5E                 mov     eax, [esp+0ECh+var_BC]
.text:00409C62                 mov     [esp+0ECh+var_C4], edi
.text:00409C66                 mov     ecx, [esp+0ECh+var_B8]
.text:00409C6A                 add     [esp+0ECh+var_C4], 1
.text:00409C6F                 mov     [esp+0ECh+var_C0], esi
.text:00409C73                 adc     [esp+0ECh+var_C0], 0
.text:00409C78                 mul     [esp+0ECh+var_C4]
.text:00409C7C                 mov     edi, [esp+0ECh+var_C0]
.text:00409C80                 mov     ebx, edx
.text:00409C82                 mov     edx, [esp+0ECh+var_C4]
.text:00409C86                 mov     esi, eax
.text:00409C88                 mov     eax, ebx
.text:00409C8A                 imul    ecx, edx
.text:00409C8D                 mov     edx, [esp+0ECh+var_BC]
.text:00409C91                 imul    edx, edi
.text:00409C94                 add     eax, ecx
.text:00409C96                 lea     edi, [edx+eax]
.text:00409C99
.text:00409C99 loc_409C99:                             ; CODE XREF: sub_409900+3D5↓j
.text:00409C99                 mov     [ebp+58h], esi
.text:00409C9C                 xor     eax, eax
.text:00409C9E                 mov     [ebp+5Ch], edi
.text:00409CA1
.text:00409CA1 loc_409CA1:                             ; CODE XREF: sub_409900+20↑j
.text:00409CA1                 add     esp, 0DCh
.text:00409CA7                 pop     ebx
.text:00409CA8                 pop     esi
.text:00409CA9                 pop     edi
.text:00409CAA                 pop     ebp
.text:00409CAB                 retn
.text:00409CAB ; ---------------------------------------------------------------------------
.text:00409CAC                 align 10h
.text:00409CB0
.text:00409CB0 loc_409CB0:                             ; CODE XREF: sub_409900+354↑j
.text:00409CB0                 mov     eax, [esp+0ECh+var_B4]
.text:00409CB4                 mov     edi, [esp+0ECh+var_B8]
.text:00409CB8                 mov     ebx, [esp+0ECh+var_B4]
.text:00409CBC                 mul     [esp+0ECh+var_BC]
.text:00409CC0                 mov     ecx, [esp+0ECh+var_BC]
.text:00409CC4                 imul    ebx, edi
.text:00409CC7                 mov     esi, eax
.text:00409CC9                 mov     eax, [esp+0ECh+var_B0]
.text:00409CCD                 add     edx, ebx
.text:00409CCF                 imul    ecx, eax
.text:00409CD2                 lea     edi, [ecx+edx]
.text:00409CD5                 jmp     short loc_409C99
.text:00409CD7 ; ---------------------------------------------------------------------------
.text:00409CD7
.text:00409CD7 loc_409CD7:                             ; CODE XREF: sub_409900+2C1↑j
.text:00409CD7                 add     eax, 1FFh
.text:00409CDC                 adc     edx, 0
.text:00409CDF                 jmp     loc_409BC7
.text:00409CE4 ; ---------------------------------------------------------------------------
.text:00409CE4
.text:00409CE4 loc_409CE4:                             ; CODE XREF: sub_409900+A9↑j
.text:00409CE4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409CE7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409CEE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00409CF2                 call    GetFileSize
.text:00409CF7                 sub     esp, 8
.text:00409CFA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00409D01                 jmp     loc_4099B0
.text:00409D06 ; ---------------------------------------------------------------------------
.text:00409D06
.text:00409D06 loc_409D06:                             ; CODE XREF: sub_409900+96↑j
.text:00409D06                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00409D0E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00409D12                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00409D1A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00409D1E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00409D26                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00409D2E                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00409D36                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00409D39                 call    PeekNamedPipe
.text:00409D3E                 sub     esp, 18h
.text:00409D41                 test    eax, eax
.text:00409D43                 jz      short loc_409D5E
.text:00409D45                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00409D49                 xor     eax, eax
.text:00409D4B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00409D52                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00409D59                 jmp     loc_40999C
.text:00409D5E ; ---------------------------------------------------------------------------
.text:00409D5E
.text:00409D5E loc_409D5E:                             ; CODE XREF: sub_409900+443↑j
.text:00409D5E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00409D65                 jmp     loc_40999C
.text:00409D65 ; ---------------------------------------------------------------------------
.text:00409D6A                 align 10h
.text:00409D70
.text:00409D70 loc_409D70:                             ; CODE XREF: sub_409900+59↑j
.text:00409D70                 mov     edx, 1000h
.text:00409D75                 jmp     loc_40995F
.text:00409D75 ; ---------------------------------------------------------------------------
.text:00409D7A                 align 10h
.text:00409D80
.text:00409D80 loc_409D80:                             ; CODE XREF: sub_409900+50↑j
.text:00409D80                 mov     edx, 2000h
.text:00409D85                 jmp     loc_40995F
.text:00409D85 sub_409900      endp
.text:00409D85
.text:00409D85 ; ---------------------------------------------------------------------------
.text:00409D8A aLnk            db '.lnk',0             ; DATA XREF: sub_409DD0+E0↓o
.text:00409D8A                                         ; sub_40A450+2A↓o ...
.text:00409D8F ; const CHAR aKernel32[]
.text:00409D8F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_409DD0+12D↓o
.text:00409D8F                                         ; .text:0040AB2B↓o
.text:00409D98 ; const CHAR aGetcompressedf[]
.text:00409D98 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00409D98                                         ; DATA XREF: sub_409DD0+13E↓o
.text:00409D98                                         ; .text:0040AB3C↓o
.text:00409DAF ; const CHAR aGetbinarytypea[]
.text:00409DAF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_409DD0+333↓o
.text:00409DAF                                         ; .text:0040A4D6↓o ...
.text:00409DBE ; const char aPathext[]
.text:00409DBE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_409DD0:loc_40A1B7↓o
.text:00409DBE                                         ; .text:loc_40A580↓o ...
.text:00409DC6                 align 10h
.text:00409DD0
.text:00409DD0 ; =============== S U B R O U T I N E =======================================
.text:00409DD0
.text:00409DD0
.text:00409DD0 ; int __cdecl sub_409DD0(char *String1, int)
.text:00409DD0 sub_409DD0      proc near               ; CODE XREF: sub_40ABB0+3CD↓p
.text:00409DD0                                         ; sub_40ECA0-3C0B↓p
.text:00409DD0
.text:00409DD0 Str             = dword ptr -6Ch
.text:00409DD0 lpProcName      = dword ptr -68h
.text:00409DD0 var_64          = dword ptr -64h
.text:00409DD0 var_60          = dword ptr -60h
.text:00409DD0 var_5C          = dword ptr -5Ch
.text:00409DD0 var_4C          = dword ptr -4Ch
.text:00409DD0 var_48          = dword ptr -48h
.text:00409DD0 var_44          = dword ptr -44h
.text:00409DD0 var_40          = dword ptr -40h
.text:00409DD0 var_3C          = dword ptr -3Ch
.text:00409DD0 var_38          = dword ptr -38h
.text:00409DD0 lpRootPathName  = dword ptr -30h
.text:00409DD0 var_2C          = byte ptr -2Ch
.text:00409DD0 var_28          = dword ptr -28h
.text:00409DD0 var_24          = dword ptr -24h
.text:00409DD0 var_20          = dword ptr -20h
.text:00409DD0 var_1C          = dword ptr -1Ch
.text:00409DD0 var_18          = byte ptr -18h
.text:00409DD0 String1         = dword ptr  4
.text:00409DD0 arg_4           = dword ptr  8
.text:00409DD0
.text:00409DD0                 push    ebp
.text:00409DD1                 push    edi
.text:00409DD2                 push    esi
.text:00409DD3                 push    ebx
.text:00409DD4                 sub     esp, 5Ch
.text:00409DD7                 mov     edx, [esp+6Ch+String1]
.text:00409DDB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00409DDE                 call    sub_40B980
.text:00409DE3                 mov     [esp+6Ch+Str], eax
.text:00409DE6                 call    sub_40B550
.text:00409DEB                 mov     [esp+6Ch+lpRootPathName], eax
.text:00409DEF                 test    eax, eax
.text:00409DF1                 jz      loc_40A023
.text:00409DF7                 mov     [esp+6Ch+Str], eax ; Str
.text:00409DFA                 call    strlen
.text:00409DFF                 mov     edx, [esp+6Ch+arg_4]
.text:00409E03                 mov     ebx, eax
.text:00409E05                 mov     esi, [edx+0Ch]
.text:00409E08                 mov     edi, [edx+8]
.text:00409E0B                 mov     eax, esi
.text:00409E0D                 or      eax, edi
.text:00409E0F                 jz      loc_40A230
.text:00409E15                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00409E19                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:00409E1C                 call    GetDriveTypeA
.text:00409E21                 sub     esp, 4
.text:00409E24                 cmp     eax, 4
.text:00409E27                 jz      loc_40A230
.text:00409E2D
.text:00409E2D loc_409E2D:                             ; CODE XREF: sub_409DD0+48A↓j
.text:00409E2D                                         ; sub_409DD0+4B2↓j
.text:00409E2D                 mov     edx, [esp+6Ch+arg_4]
.text:00409E31                 mov     esi, [edx+14h]
.text:00409E34                 mov     edi, [edx+10h]
.text:00409E37                 mov     ecx, esi
.text:00409E39                 or      ecx, edi
.text:00409E3B                 jnz     short loc_409E65
.text:00409E3D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00409E41                 xor     esi, esi
.text:00409E43                 xor     edi, edi
.text:00409E45                 test    ebp, ebp
.text:00409E47                 jz      short loc_409E57
.text:00409E49                 movzx   ebx, byte ptr [ebp+0]
.text:00409E4D                 test    bl, bl
.text:00409E4F                 mov     cl, bl
.text:00409E51                 jnz     loc_40A1E1
.text:00409E57
.text:00409E57 loc_409E57:                             ; CODE XREF: sub_409DD0+77↑j
.text:00409E57                 xor     eax, eax
.text:00409E59                 xor     edx, edx
.text:00409E5B
.text:00409E5B loc_409E5B:                             ; CODE XREF: sub_409DD0+458↓j
.text:00409E5B                 mov     ebp, [esp+6Ch+arg_4]
.text:00409E5F                 mov     [ebp+10h], eax
.text:00409E62                 mov     [ebp+14h], edx
.text:00409E65
.text:00409E65 loc_409E65:                             ; CODE XREF: sub_409DD0+6B↑j
.text:00409E65                 mov     edi, [esp+6Ch+String1]
.text:00409E69                 xor     ebx, ebx
.text:00409E6B                 test    edi, edi
.text:00409E6D                 jz      loc_40A0E3
.text:00409E73                 mov     esi, [esp+6Ch+String1]
.text:00409E77                 cmp     byte ptr [esi], 0
.text:00409E7A                 jnz     loc_40A0F0
.text:00409E80
.text:00409E80 loc_409E80:                             ; CODE XREF: sub_409DD0+38C↓j
.text:00409E80                                         ; sub_409DD0+397↓j
.text:00409E80                 mov     ebp, [esp+6Ch+String1]
.text:00409E84                 test    ebp, ebp
.text:00409E86                 jz      loc_40A0E3
.text:00409E8C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00409E94                 mov     edi, [esp+6Ch+String1]
.text:00409E98                 mov     [esp+6Ch+Str], edi ; Str
.text:00409E9B                 call    strrchr
.text:00409EA0                 test    eax, eax
.text:00409EA2                 jz      loc_40A0E3
.text:00409EA8                 cld
.text:00409EA9                 mov     ecx, 5
.text:00409EAE                 mov     esi, eax
.text:00409EB0                 mov     edi, offset aLnk ; ".lnk"
.text:00409EB5                 repe cmpsb
.text:00409EB7                 setz    cl
.text:00409EBA                 movzx   eax, cl
.text:00409EBD                 lea     esi, [esi+0]
.text:00409EC0
.text:00409EC0 loc_409EC0:                             ; CODE XREF: sub_409DD0+315↓j
.text:00409EC0                 test    eax, eax
.text:00409EC2                 jz      short loc_409ECA
.text:00409EC4                 or      ebx, 0A000h
.text:00409ECA
.text:00409ECA loc_409ECA:                             ; CODE XREF: sub_409DD0+F2↑j
.text:00409ECA                 mov     esi, [esp+6Ch+arg_4]
.text:00409ECE                 xor     ecx, ecx
.text:00409ED0                 mov     edi, ds:dword_4131F0
.text:00409ED6                 or      [esi], ebx
.text:00409ED8                 mov     ebx, [esi+14h]
.text:00409EDB                 mov     ebp, [esi+10h]
.text:00409EDE                 mov     eax, ebx
.text:00409EE0                 xor     eax, ecx
.text:00409EE2                 xor     ebp, edi
.text:00409EE4                 or      eax, ebp
.text:00409EE6                 jnz     loc_40A070
.text:00409EEC
.text:00409EEC loc_409EEC:                             ; CODE XREF: sub_409DD0+30E↓j
.text:00409EEC                 mov     ecx, dword_412060
.text:00409EF2                 xor     esi, esi
.text:00409EF4                 xor     edi, edi
.text:00409EF6                 mov     edx, [esp+6Ch+arg_4]
.text:00409EFA                 mov     [edx+50h], ecx
.text:00409EFD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00409F04                 call    LoadLibraryA
.text:00409F09                 sub     esp, 4
.text:00409F0C                 mov     ebp, eax
.text:00409F0E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00409F16                 mov     [esp+6Ch+Str], eax ; hModule
.text:00409F19                 call    GetProcAddress
.text:00409F1E                 sub     esp, 8
.text:00409F21                 test    eax, eax
.text:00409F23                 jz      short loc_409F58
.text:00409F25                 mov     ebx, [esp+6Ch+String1]
.text:00409F29                 lea     esi, [esp+6Ch+var_2C]
.text:00409F2D                 mov     [esp+6Ch+lpProcName], esi
.text:00409F31                 mov     [esp+6Ch+Str], ebx
.text:00409F34                 call    eax
.text:00409F36                 sub     esp, 8
.text:00409F39                 mov     ebx, eax
.text:00409F3B                 cmp     eax, 0FFFFFFFFh
.text:00409F3E                 jz      loc_40A059
.text:00409F44
.text:00409F44 loc_409F44:                             ; CODE XREF: sub_409DD0+29A↓j
.text:00409F44                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00409F48                 mov     ecx, ebx
.text:00409F4A                 xor     edi, edi
.text:00409F4C                 xor     ebx, ebx
.text:00409F4E                 mov     edx, esi
.text:00409F50                 mov     esi, ecx
.text:00409F52                 or      esi, edi
.text:00409F54                 mov     edi, ebx
.text:00409F56                 or      edi, edx
.text:00409F58
.text:00409F58 loc_409F58:                             ; CODE XREF: sub_409DD0+153↑j
.text:00409F58                                         ; sub_409DD0+294↓j
.text:00409F58                 test    ebp, ebp
.text:00409F5A                 jz      short loc_409F67
.text:00409F5C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:00409F5F                 call    FreeLibrary
.text:00409F64                 sub     esp, 4
.text:00409F67
.text:00409F67 loc_409F67:                             ; CODE XREF: sub_409DD0+18A↑j
.text:00409F67                 mov     ebp, edi
.text:00409F69                 mov     edx, ebp
.text:00409F6B                 mov     edi, esi
.text:00409F6D                 or      edx, esi
.text:00409F6F                 jnz     short loc_409F7B
.text:00409F71                 mov     eax, [esp+6Ch+arg_4]
.text:00409F75                 mov     edi, [eax+30h]
.text:00409F78                 mov     ebp, [eax+34h]
.text:00409F7B
.text:00409F7B loc_409F7B:                             ; CODE XREF: sub_409DD0+19F↑j
.text:00409F7B                 mov     [esp+6Ch+lpProcName], ebp
.text:00409F7F                 mov     ebx, dword_412060
.text:00409F85                 xor     esi, esi
.text:00409F87                 mov     [esp+6Ch+var_60], esi
.text:00409F8B                 mov     [esp+6Ch+Str], edi
.text:00409F8E                 mov     [esp+6Ch+var_64], ebx
.text:00409F92                 call    sub_410F20
.text:00409F97                 mov     [esp+6Ch+var_3C], eax
.text:00409F9B                 mov     ecx, dword_412060
.text:00409FA1                 mov     [esp+6Ch+lpProcName], ebp
.text:00409FA5                 mov     [esp+6Ch+var_38], edx
.text:00409FA9                 shr     ecx, 9
.text:00409FAC                 mov     [esp+6Ch+var_44], ecx
.text:00409FB0                 mov     [esp+6Ch+var_40], 0
.text:00409FB8                 mov     [esp+6Ch+var_64], ebx
.text:00409FBC                 mov     [esp+6Ch+var_60], esi
.text:00409FC0                 mov     [esp+6Ch+Str], edi
.text:00409FC3                 call    sub_411040
.text:00409FC8                 mov     ebp, edx
.text:00409FCA                 or      ebp, eax
.text:00409FCC                 jz      short loc_40A030
.text:00409FCE                 mov     ebp, [esp+6Ch+var_3C]
.text:00409FD2                 mov     esi, [esp+6Ch+var_38]
.text:00409FD6                 mov     eax, [esp+6Ch+var_44]
.text:00409FDA                 mov     [esp+6Ch+var_4C], ebp
.text:00409FDE                 mov     ecx, [esp+6Ch+var_40]
.text:00409FE2                 mov     ebx, [esp+6Ch+var_44]
.text:00409FE6                 add     [esp+6Ch+var_4C], 1
.text:00409FEB                 mov     [esp+6Ch+var_48], esi
.text:00409FEF                 mov     edi, [esp+6Ch+var_4C]
.text:00409FF3                 adc     [esp+6Ch+var_48], 0
.text:00409FF8                 mul     [esp+6Ch+var_4C]
.text:00409FFC                 imul    ecx, edi
.text:00409FFF                 mov     esi, eax
.text:0040A001                 mov     eax, [esp+6Ch+var_48]
.text:0040A005                 add     edx, ecx
.text:0040A007                 imul    ebx, eax
.text:0040A00A                 lea     edi, [ebx+edx]
.text:0040A00D
.text:0040A00D loc_40A00D:                             ; CODE XREF: sub_409DD0+287↓j
.text:0040A00D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040A011                 mov     [ebx+58h], esi
.text:0040A014                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040A018                 mov     [ebx+5Ch], edi
.text:0040A01B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040A01E                 call    free
.text:0040A023
.text:0040A023 loc_40A023:                             ; CODE XREF: sub_409DD0+21↑j
.text:0040A023                 add     esp, 5Ch
.text:0040A026                 xor     eax, eax
.text:0040A028                 pop     ebx
.text:0040A029                 pop     esi
.text:0040A02A                 pop     edi
.text:0040A02B                 pop     ebp
.text:0040A02C                 retn
.text:0040A02C ; ---------------------------------------------------------------------------
.text:0040A02D                 align 10h
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: sub_409DD0+1FC↑j
.text:0040A030                 mov     eax, [esp+6Ch+var_3C]
.text:0040A034                 mov     edi, [esp+6Ch+var_40]
.text:0040A038                 mov     ecx, [esp+6Ch+var_3C]
.text:0040A03C                 mul     [esp+6Ch+var_44]
.text:0040A040                 mov     ebx, [esp+6Ch+var_44]
.text:0040A044                 imul    ecx, edi
.text:0040A047                 mov     ebp, edx
.text:0040A049                 mov     esi, eax
.text:0040A04B                 mov     edx, [esp+6Ch+var_38]
.text:0040A04F                 add     ebp, ecx
.text:0040A051                 imul    ebx, edx
.text:0040A054                 lea     edi, [ebx+ebp]
.text:0040A057                 jmp     short loc_40A00D
.text:0040A059 ; ---------------------------------------------------------------------------
.text:0040A059
.text:0040A059 loc_40A059:                             ; CODE XREF: sub_409DD0+16E↑j
.text:0040A059                 call    GetLastError
.text:0040A05E                 xor     esi, esi
.text:0040A060                 xor     edi, edi
.text:0040A062                 test    eax, eax
.text:0040A064                 jnz     loc_409F58
.text:0040A06A                 jmp     loc_409F44
.text:0040A06A ; ---------------------------------------------------------------------------
.text:0040A06F                 align 10h
.text:0040A070
.text:0040A070 loc_40A070:                             ; CODE XREF: sub_409DD0+116↑j
.text:0040A070                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040A074                 lea     ecx, [esp+6Ch+var_20]
.text:0040A078                 lea     ebx, [esp+6Ch+var_1C]
.text:0040A07C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040A080                 lea     edi, [esp+6Ch+var_24]
.text:0040A084                 lea     ebp, [esp+6Ch+var_28]
.text:0040A088                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040A08C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040A090                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040A094                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040A097                 call    sub_40C3D0
.text:0040A09C                 test    eax, eax
.text:0040A09E                 jnz     short loc_40A0C0
.text:0040A0A0                 mov     [esp+6Ch+var_28], 1
.text:0040A0A8                 mov     [esp+6Ch+var_24], 200h
.text:0040A0B0                 mov     [esp+6Ch+var_20], 0
.text:0040A0B8                 mov     [esp+6Ch+var_1C], 0
.text:0040A0C0
.text:0040A0C0 loc_40A0C0:                             ; CODE XREF: sub_409DD0+2CE↑j
.text:0040A0C0                 mov     ebp, [esp+6Ch+var_24]
.text:0040A0C4                 mov     edi, [esp+6Ch+var_28]
.text:0040A0C8                 mov     eax, [esp+6Ch+arg_4]
.text:0040A0CC                 imul    ebp, edi
.text:0040A0CF                 mov     esi, [eax+10h]
.text:0040A0D2                 mov     dword_412060, ebp
.text:0040A0D8                 mov     ds:dword_4131F0, esi
.text:0040A0DE                 jmp     loc_409EEC
.text:0040A0E3 ; ---------------------------------------------------------------------------
.text:0040A0E3
.text:0040A0E3 loc_40A0E3:                             ; CODE XREF: sub_409DD0+9D↑j
.text:0040A0E3                                         ; sub_409DD0+B6↑j ...
.text:0040A0E3                 xor     eax, eax
.text:0040A0E5                 jmp     loc_409EC0
.text:0040A0E5 ; ---------------------------------------------------------------------------
.text:0040A0EA                 align 10h
.text:0040A0F0
.text:0040A0F0 loc_40A0F0:                             ; CODE XREF: sub_409DD0+AA↑j
.text:0040A0F0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040A0F7                 xor     ebp, ebp
.text:0040A0F9                 call    GetModuleHandleA
.text:0040A0FE                 sub     esp, 4
.text:0040A101                 mov     edi, eax
.text:0040A103                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A10B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040A10E                 call    GetProcAddress
.text:0040A113                 sub     esp, 8
.text:0040A116                 mov     edx, eax
.text:0040A118                 test    eax, eax
.text:0040A11A                 jz      short loc_40A134
.text:0040A11C                 mov     eax, [esp+6Ch+String1]
.text:0040A120                 lea     ecx, [esp+6Ch+var_18]
.text:0040A124                 mov     [esp+6Ch+lpProcName], ecx
.text:0040A128                 mov     [esp+6Ch+Str], eax
.text:0040A12B                 call    edx
.text:0040A12D                 sub     esp, 8
.text:0040A130                 test    eax, eax
.text:0040A132                 jnz     short loc_40A198
.text:0040A134
.text:0040A134 loc_40A134:                             ; CODE XREF: sub_409DD0+34A↑j
.text:0040A134                 mov     edx, ds:Str
.text:0040A13A                 test    edx, edx
.text:0040A13C                 jz      short loc_40A1B7
.text:0040A13E
.text:0040A13E loc_40A13E:                             ; CODE XREF: sub_409DD0+3FA↓j
.text:0040A13E                                         ; sub_409DD0+40C↓j
.text:0040A13E                 mov     eax, [esp+6Ch+String1]
.text:0040A142                 test    eax, eax
.text:0040A144                 jz      short loc_40A14F
.text:0040A146                 mov     esi, [esp+6Ch+String1]
.text:0040A14A                 cmp     byte ptr [esi], 0
.text:0040A14D                 jnz     short loc_40A16C
.text:0040A14F
.text:0040A14F loc_40A14F:                             ; CODE XREF: sub_409DD0+374↑j
.text:0040A14F                                         ; sub_409DD0+3B0↓j ...
.text:0040A14F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040A152                 call    FreeLibrary
.text:0040A157                 sub     esp, 4
.text:0040A15A                 test    ebp, ebp
.text:0040A15C                 jz      loc_409E80
.text:0040A162                 mov     ebx, 49h ; 'I'
.text:0040A167                 jmp     loc_409E80
.text:0040A16C ; ---------------------------------------------------------------------------
.text:0040A16C
.text:0040A16C loc_40A16C:                             ; CODE XREF: sub_409DD0+37D↑j
.text:0040A16C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040A16F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040A177                 call    strrchr
.text:0040A17C                 test    eax, eax
.text:0040A17E                 mov     esi, eax
.text:0040A180                 jz      short loc_40A14F
.text:0040A182                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040A186                 mov     ecx, ds:Str
.text:0040A18C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040A18F                 call    strstr
.text:0040A194                 test    eax, eax
.text:0040A196                 jz      short loc_40A19F
.text:0040A198
.text:0040A198 loc_40A198:                             ; CODE XREF: sub_409DD0+362↑j
.text:0040A198                                         ; sub_409DD0+3E5↓j
.text:0040A198                 mov     ebp, 1
.text:0040A19D                 jmp     short loc_40A14F
.text:0040A19F ; ---------------------------------------------------------------------------
.text:0040A19F
.text:0040A19F loc_40A19F:                             ; CODE XREF: sub_409DD0+3C6↑j
.text:0040A19F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040A1A3                 mov     edx, off_412064 ; ".com;.exe;.bat;.cmd"
.text:0040A1A9                 mov     [esp+6Ch+Str], edx ; Str
.text:0040A1AC                 call    strstr
.text:0040A1B1                 test    eax, eax
.text:0040A1B3                 jz      short loc_40A14F
.text:0040A1B5                 jmp     short loc_40A198
.text:0040A1B7 ; ---------------------------------------------------------------------------
.text:0040A1B7
.text:0040A1B7 loc_40A1B7:                             ; CODE XREF: sub_409DD0+36C↑j
.text:0040A1B7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040A1BE                 call    getenv
.text:0040A1C3                 mov     ds:Str, eax
.text:0040A1C8                 test    eax, eax
.text:0040A1CA                 jnz     loc_40A13E
.text:0040A1D0                 mov     esi, off_412064 ; ".com;.exe;.bat;.cmd"
.text:0040A1D6                 mov     ds:Str, esi
.text:0040A1DC                 jmp     loc_40A13E
.text:0040A1E1 ; ---------------------------------------------------------------------------
.text:0040A1E1
.text:0040A1E1 loc_40A1E1:                             ; CODE XREF: sub_409DD0+81↑j
.text:0040A1E1                                         ; sub_409DD0+452↓j
.text:0040A1E1                 shld    edi, esi, 8
.text:0040A1E5                 movsx   eax, cl
.text:0040A1E8                 shl     esi, 8
.text:0040A1EB                 cdq
.text:0040A1EC                 add     esi, eax
.text:0040A1EE                 adc     edi, edx
.text:0040A1F0                 mov     edx, edi
.text:0040A1F2                 xor     ebx, ebx
.text:0040A1F4                 and     edx, 0FF000000h
.text:0040A1FA                 mov     eax, edx
.text:0040A1FC                 or      eax, ebx
.text:0040A1FE                 jz      short loc_40A219
.text:0040A200                 mov     ecx, edx
.text:0040A202                 xor     eax, eax
.text:0040A204                 shr     ecx, 10h
.text:0040A207                 mov     edx, esi
.text:0040A209                 xor     edx, ecx
.text:0040A20B                 mov     ecx, edi
.text:0040A20D                 xor     ecx, eax
.text:0040A20F                 mov     esi, edx
.text:0040A211                 mov     edi, ecx
.text:0040A213                 and     edi, 0FFFFFFh
.text:0040A219
.text:0040A219 loc_40A219:                             ; CODE XREF: sub_409DD0+42E↑j
.text:0040A219                 inc     ebp
.text:0040A21A                 movzx   ebx, byte ptr [ebp+0]
.text:0040A21E                 test    bl, bl
.text:0040A220                 mov     cl, bl
.text:0040A222                 jnz     short loc_40A1E1
.text:0040A224                 mov     eax, esi
.text:0040A226                 mov     edx, edi
.text:0040A228                 jmp     loc_409E5B
.text:0040A228 ; ---------------------------------------------------------------------------
.text:0040A22D                 align 10h
.text:0040A230
.text:0040A230 loc_40A230:                             ; CODE XREF: sub_409DD0+3F↑j
.text:0040A230                                         ; sub_409DD0+57↑j
.text:0040A230                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040A234                 mov     ebp, [esp+6Ch+String1]
.text:0040A238                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040A23C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040A23F                 call    _stricmp
.text:0040A244                 test    eax, eax
.text:0040A246                 jnz     short loc_40A260
.text:0040A248                 mov     ebx, [esp+6Ch+arg_4]
.text:0040A24C                 mov     dword ptr [ebx+8], 5
.text:0040A253                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040A25A                 jmp     loc_409E2D
.text:0040A25A ; ---------------------------------------------------------------------------
.text:0040A25F                 align 10h
.text:0040A260
.text:0040A260 loc_40A260:                             ; CODE XREF: sub_409DD0+476↑j
.text:0040A260                 mov     ebp, [esp+6Ch+String1]
.text:0040A264                 xor     esi, esi
.text:0040A266                 xor     edi, edi
.text:0040A268                 add     ebp, ebx
.text:0040A26A                 jz      short loc_40A274
.text:0040A26C                 movzx   ecx, byte ptr [ebp+0]
.text:0040A270                 test    cl, cl
.text:0040A272                 jnz     short loc_40A287
.text:0040A274
.text:0040A274 loc_40A274:                             ; CODE XREF: sub_409DD0+49A↑j
.text:0040A274                 xor     eax, eax
.text:0040A276                 xor     edx, edx
.text:0040A278
.text:0040A278 loc_40A278:                             ; CODE XREF: sub_409DD0+4FE↓j
.text:0040A278                 mov     ebp, [esp+6Ch+arg_4]
.text:0040A27C                 mov     [ebp+8], eax
.text:0040A27F                 mov     [ebp+0Ch], edx
.text:0040A282                 jmp     loc_409E2D
.text:0040A287 ; ---------------------------------------------------------------------------
.text:0040A287
.text:0040A287 loc_40A287:                             ; CODE XREF: sub_409DD0+4A2↑j
.text:0040A287                                         ; sub_409DD0+4F8↓j
.text:0040A287                 shld    edi, esi, 8
.text:0040A28B                 movsx   eax, cl
.text:0040A28E                 shl     esi, 8
.text:0040A291                 cdq
.text:0040A292                 add     esi, eax
.text:0040A294                 adc     edi, edx
.text:0040A296                 mov     edx, edi
.text:0040A298                 xor     ebx, ebx
.text:0040A29A                 and     edx, 0FF000000h
.text:0040A2A0                 mov     eax, edx
.text:0040A2A2                 or      eax, ebx
.text:0040A2A4                 jz      short loc_40A2BF
.text:0040A2A6                 mov     ecx, edx
.text:0040A2A8                 xor     eax, eax
.text:0040A2AA                 shr     ecx, 10h
.text:0040A2AD                 mov     edx, esi
.text:0040A2AF                 xor     edx, ecx
.text:0040A2B1                 mov     ecx, edi
.text:0040A2B3                 xor     ecx, eax
.text:0040A2B5                 mov     esi, edx
.text:0040A2B7                 mov     edi, ecx
.text:0040A2B9                 and     edi, 0FFFFFFh
.text:0040A2BF
.text:0040A2BF loc_40A2BF:                             ; CODE XREF: sub_409DD0+4D4↑j
.text:0040A2BF                 inc     ebp
.text:0040A2C0                 movzx   ebx, byte ptr [ebp+0]
.text:0040A2C4                 test    bl, bl
.text:0040A2C6                 mov     cl, bl
.text:0040A2C8                 jnz     short loc_40A287
.text:0040A2CA                 mov     eax, esi
.text:0040A2CC                 mov     edx, edi
.text:0040A2CE                 jmp     short loc_40A278
.text:0040A2CE sub_409DD0      endp
.text:0040A2CE
.text:0040A2D0
.text:0040A2D0 ; =============== S U B R O U T I N E =======================================
.text:0040A2D0
.text:0040A2D0
.text:0040A2D0 ; int __cdecl sub_40A2D0(LPCSTR)
.text:0040A2D0 sub_40A2D0      proc near               ; CODE XREF: sub_40BAA0+CA↓p
.text:0040A2D0
.text:0040A2D0 lpRootPathName  = dword ptr -83Ch
.text:0040A2D0 lpVolumeNameBuffer= dword ptr -838h
.text:0040A2D0 nVolumeNameSize = dword ptr -834h
.text:0040A2D0 lpVolumeSerialNumber= dword ptr -830h
.text:0040A2D0 lpMaximumComponentLength= dword ptr -82Ch
.text:0040A2D0 lpFileSystemFlags= dword ptr -828h
.text:0040A2D0 lpFileSystemNameBuffer= dword ptr -824h
.text:0040A2D0 nFileSystemNameSize= dword ptr -820h
.text:0040A2D0 VolumeSerialNumber= dword ptr -818h
.text:0040A2D0 MaximumComponentLength= dword ptr -814h
.text:0040A2D0 FileSystemFlags = dword ptr -810h
.text:0040A2D0 FileSystemNameBuffer= byte ptr -80Ch
.text:0040A2D0 VolumeNameBuffer= byte ptr -40Ch
.text:0040A2D0 var_4           = dword ptr -4
.text:0040A2D0 arg_0           = dword ptr  4
.text:0040A2D0
.text:0040A2D0                 sub     esp, 83Ch
.text:0040A2D6                 mov     [esp+83Ch+var_4], ebx
.text:0040A2DD                 mov     ebx, [esp+83Ch+arg_0]
.text:0040A2E4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040A2E7                 call    sub_40B980
.text:0040A2EC                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040A2EF                 call    sub_40B550
.text:0040A2F4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040A2F7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040A2FB                 mov     ebx, eax
.text:0040A2FD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040A301                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040A305                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040A309                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040A30D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040A311                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040A315                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040A31C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040A320                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040A324                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040A32C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040A334                 call    GetVolumeInformationA
.text:0040A339                 sub     esp, 20h
.text:0040A33C                 test    eax, eax
.text:0040A33E                 setz    cl
.text:0040A341                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040A344                 movzx   edx, cl
.text:0040A347                 dec     edx
.text:0040A348                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040A34C                 call    free
.text:0040A351                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040A355                 mov     ebx, [esp+83Ch+var_4]
.text:0040A35C                 add     esp, 83Ch
.text:0040A362                 retn
.text:0040A362 sub_40A2D0      endp
.text:0040A362
.text:0040A362 ; ---------------------------------------------------------------------------
.text:0040A363                 align 10h
.text:0040A370                 push    ebp
.text:0040A371                 push    edi
.text:0040A372                 xor     edi, edi
.text:0040A374                 push    esi
.text:0040A375                 xor     esi, esi
.text:0040A377                 push    ebx
.text:0040A378                 mov     ebp, [esp+14h]
.text:0040A37C                 test    ebp, ebp
.text:0040A37E                 jz      short loc_40A388
.text:0040A380                 movzx   ecx, byte ptr [ebp+0]
.text:0040A384                 test    cl, cl
.text:0040A386                 jnz     short loc_40A391
.text:0040A388
.text:0040A388 loc_40A388:                             ; CODE XREF: .text:0040A37E↑j
.text:0040A388                 xor     eax, eax
.text:0040A38A                 xor     edx, edx
.text:0040A38C
.text:0040A38C loc_40A38C:                             ; CODE XREF: .text:0040A3D8↓j
.text:0040A38C                 pop     ebx
.text:0040A38D                 pop     esi
.text:0040A38E                 pop     edi
.text:0040A38F                 pop     ebp
.text:0040A390                 retn
.text:0040A391 ; ---------------------------------------------------------------------------
.text:0040A391
.text:0040A391 loc_40A391:                             ; CODE XREF: .text:0040A386↑j
.text:0040A391                                         ; .text:0040A3D2↓j
.text:0040A391                 shld    edi, esi, 8
.text:0040A395                 movsx   eax, cl
.text:0040A398                 shl     esi, 8
.text:0040A39B                 cdq
.text:0040A39C                 add     esi, eax
.text:0040A39E                 adc     edi, edx
.text:0040A3A0                 mov     edx, edi
.text:0040A3A2                 xor     ebx, ebx
.text:0040A3A4                 and     edx, 0FF000000h
.text:0040A3AA                 mov     eax, edx
.text:0040A3AC                 or      eax, ebx
.text:0040A3AE                 jz      short loc_40A3C9
.text:0040A3B0                 mov     ecx, edx
.text:0040A3B2                 xor     eax, eax
.text:0040A3B4                 shr     ecx, 10h
.text:0040A3B7                 mov     edx, esi
.text:0040A3B9                 xor     edx, ecx
.text:0040A3BB                 mov     ecx, edi
.text:0040A3BD                 xor     ecx, eax
.text:0040A3BF                 mov     esi, edx
.text:0040A3C1                 mov     edi, ecx
.text:0040A3C3                 and     edi, 0FFFFFFh
.text:0040A3C9
.text:0040A3C9 loc_40A3C9:                             ; CODE XREF: .text:0040A3AE↑j
.text:0040A3C9                 inc     ebp
.text:0040A3CA                 movzx   ebx, byte ptr [ebp+0]
.text:0040A3CE                 test    bl, bl
.text:0040A3D0                 mov     cl, bl
.text:0040A3D2                 jnz     short loc_40A391
.text:0040A3D4                 mov     eax, esi
.text:0040A3D6                 mov     edx, edi
.text:0040A3D8                 jmp     short loc_40A38C
.text:0040A3D8 ; ---------------------------------------------------------------------------
.text:0040A3DA                 align 10h
.text:0040A3E0                 sub     esp, 2Ch
.text:0040A3E3                 lea     edx, [esp+24h]
.text:0040A3E7                 lea     ecx, [esp+28h]
.text:0040A3EB                 mov     [esp+0Ch], edx
.text:0040A3EF                 lea     edx, [esp+1Ch]
.text:0040A3F3                 mov     [esp+4], edx
.text:0040A3F7                 mov     edx, [esp+30h]
.text:0040A3FB                 mov     [esp+10h], ecx
.text:0040A3FF                 lea     ecx, [esp+20h]
.text:0040A403                 mov     [esp+8], ecx
.text:0040A407                 mov     [esp], edx
.text:0040A40A                 call    sub_40C3D0
.text:0040A40F                 test    eax, eax
.text:0040A411                 jnz     short loc_40A433
.text:0040A413                 mov     dword ptr [esp+1Ch], 1
.text:0040A41B                 mov     dword ptr [esp+20h], 200h
.text:0040A423                 mov     dword ptr [esp+24h], 0
.text:0040A42B                 mov     dword ptr [esp+28h], 0
.text:0040A433
.text:0040A433 loc_40A433:                             ; CODE XREF: .text:0040A411↑j
.text:0040A433                 mov     eax, [esp+20h]
.text:0040A437                 mov     ecx, [esp+1Ch]
.text:0040A43B                 add     esp, 2Ch
.text:0040A43E                 imul    eax, ecx
.text:0040A441                 retn
.text:0040A441 ; ---------------------------------------------------------------------------
.text:0040A442                 align 10h
.text:0040A450
.text:0040A450 ; =============== S U B R O U T I N E =======================================
.text:0040A450
.text:0040A450
.text:0040A450 ; int __cdecl sub_40A450(char *)
.text:0040A450 sub_40A450      proc near               ; CODE XREF: sub_40C670+30↓p
.text:0040A450
.text:0040A450 Str             = dword ptr -1Ch
.text:0040A450 var_18          = dword ptr -18h
.text:0040A450 var_8           = dword ptr -8
.text:0040A450 var_4           = dword ptr -4
.text:0040A450 arg_0           = dword ptr  4
.text:0040A450
.text:0040A450                 sub     esp, 1Ch
.text:0040A453                 mov     eax, [esp+1Ch+arg_0]
.text:0040A457                 mov     [esp+1Ch+var_8], esi
.text:0040A45B                 mov     [esp+1Ch+var_4], edi
.text:0040A45F                 test    eax, eax
.text:0040A461                 jz      short loc_40A4A0
.text:0040A463                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:0040A46B                 mov     [esp+1Ch+Str], eax ; Str
.text:0040A46E                 call    strrchr
.text:0040A473                 test    eax, eax
.text:0040A475                 jz      short loc_40A4A0
.text:0040A477                 cld
.text:0040A478                 mov     esi, eax
.text:0040A47A                 mov     edi, offset aLnk ; ".lnk"
.text:0040A47F                 mov     ecx, 5
.text:0040A484                 repe cmpsb
.text:0040A486                 setz    dl
.text:0040A489                 movzx   eax, dl
.text:0040A48C                 lea     esi, [esi+0]
.text:0040A490
.text:0040A490 loc_40A490:                             ; CODE XREF: sub_40A450+52↓j
.text:0040A490                 mov     esi, [esp+1Ch+var_8]
.text:0040A494                 mov     edi, [esp+1Ch+var_4]
.text:0040A498                 add     esp, 1Ch
.text:0040A49B                 retn
.text:0040A49B ; ---------------------------------------------------------------------------
.text:0040A49C                 align 10h
.text:0040A4A0
.text:0040A4A0 loc_40A4A0:                             ; CODE XREF: sub_40A450+11↑j
.text:0040A4A0                                         ; sub_40A450+25↑j
.text:0040A4A0                 xor     eax, eax
.text:0040A4A2                 jmp     short loc_40A490
.text:0040A4A2 sub_40A450      endp
.text:0040A4A2
.text:0040A4A2 ; ---------------------------------------------------------------------------
.text:0040A4A4                 align 10h
.text:0040A4B0                 sub     esp, 1Ch
.text:0040A4B3                 mov     [esp+10h], ebx
.text:0040A4B7                 mov     ebx, [esp+20h]
.text:0040A4BB                 mov     [esp+14h], esi
.text:0040A4BF                 mov     [esp+18h], edi
.text:0040A4C3                 xor     edi, edi
.text:0040A4C5                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040A4CC                 call    GetModuleHandleA
.text:0040A4D1                 sub     esp, 4
.text:0040A4D4                 mov     esi, eax
.text:0040A4D6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A4DE                 mov     [esp], eax
.text:0040A4E1                 call    GetProcAddress
.text:0040A4E6                 sub     esp, 8
.text:0040A4E9                 test    eax, eax
.text:0040A4EB                 jz      short loc_40A501
.text:0040A4ED                 mov     [esp], ebx
.text:0040A4F0                 lea     ecx, [esp+0Ch]
.text:0040A4F4                 mov     [esp+4], ecx
.text:0040A4F8                 call    eax
.text:0040A4FA                 sub     esp, 8
.text:0040A4FD                 test    eax, eax
.text:0040A4FF                 jnz     short loc_40A560
.text:0040A501
.text:0040A501 loc_40A501:                             ; CODE XREF: .text:0040A4EB↑j
.text:0040A501                 mov     eax, ds:Str
.text:0040A506                 test    eax, eax
.text:0040A508                 jz      short loc_40A580
.text:0040A50A
.text:0040A50A loc_40A50A:                             ; CODE XREF: .text:0040A593↓j
.text:0040A50A                                         ; .text:0040A5A5↓j
.text:0040A50A                 test    ebx, ebx
.text:0040A50C                 jz      short loc_40A513
.text:0040A50E                 cmp     byte ptr [ebx], 0
.text:0040A511                 jnz     short loc_40A530
.text:0040A513
.text:0040A513 loc_40A513:                             ; CODE XREF: .text:0040A50C↑j
.text:0040A513                                         ; .text:0040A544↓j ...
.text:0040A513                 mov     [esp], esi
.text:0040A516                 call    FreeLibrary
.text:0040A51B                 sub     esp, 4
.text:0040A51E                 mov     eax, edi
.text:0040A520                 mov     ebx, [esp+10h]
.text:0040A524                 mov     esi, [esp+14h]
.text:0040A528                 mov     edi, [esp+18h]
.text:0040A52C                 add     esp, 1Ch
.text:0040A52F                 retn
.text:0040A530 ; ---------------------------------------------------------------------------
.text:0040A530
.text:0040A530 loc_40A530:                             ; CODE XREF: .text:0040A511↑j
.text:0040A530                 mov     [esp], ebx
.text:0040A533                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A53B                 call    strrchr
.text:0040A540                 test    eax, eax
.text:0040A542                 mov     ebx, eax
.text:0040A544                 jz      short loc_40A513
.text:0040A546                 mov     [esp+4], eax
.text:0040A54A                 mov     ecx, ds:Str
.text:0040A550                 mov     [esp], ecx
.text:0040A553                 call    strstr
.text:0040A558                 test    eax, eax
.text:0040A55A                 jz      short loc_40A567
.text:0040A55C                 lea     esi, [esi+0]
.text:0040A560
.text:0040A560 loc_40A560:                             ; CODE XREF: .text:0040A4FF↑j
.text:0040A560                                         ; .text:0040A57D↓j
.text:0040A560                 mov     edi, 1
.text:0040A565                 jmp     short loc_40A513
.text:0040A567 ; ---------------------------------------------------------------------------
.text:0040A567
.text:0040A567 loc_40A567:                             ; CODE XREF: .text:0040A55A↑j
.text:0040A567                 mov     [esp+4], ebx
.text:0040A56B                 mov     ebx, off_412064 ; ".com;.exe;.bat;.cmd"
.text:0040A571                 mov     [esp], ebx
.text:0040A574                 call    strstr
.text:0040A579                 test    eax, eax
.text:0040A57B                 jz      short loc_40A513
.text:0040A57D                 jmp     short loc_40A560
.text:0040A57D ; ---------------------------------------------------------------------------
.text:0040A57F                 align 10h
.text:0040A580
.text:0040A580 loc_40A580:                             ; CODE XREF: .text:0040A508↑j
.text:0040A580                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040A587                 call    getenv
.text:0040A58C                 mov     ds:Str, eax
.text:0040A591                 test    eax, eax
.text:0040A593                 jnz     loc_40A50A
.text:0040A599                 mov     edx, off_412064 ; ".com;.exe;.bat;.cmd"
.text:0040A59F                 mov     ds:Str, edx
.text:0040A5A5                 jmp     loc_40A50A
.text:0040A5A5 ; ---------------------------------------------------------------------------
.text:0040A5AA                 align 10h
.text:0040A5B0                 sub     esp, 0Ch
.text:0040A5B3                 mov     edx, [esp+10h]
.text:0040A5B7                 mov     [esp], edx
.text:0040A5BA                 call    GetFileType
.text:0040A5BF                 sub     esp, 4
.text:0040A5C2                 xor     edx, edx
.text:0040A5C4                 cmp     eax, 2
.text:0040A5C7                 jz      short loc_40A5E0
.text:0040A5C9                 cmp     eax, 3
.text:0040A5CC                 jz      short loc_40A5D4
.text:0040A5CE
.text:0040A5CE loc_40A5CE:                             ; CODE XREF: .text:0040A5D9↓j
.text:0040A5CE                                         ; .text:0040A5E5↓j
.text:0040A5CE                 mov     eax, edx
.text:0040A5D0                 add     esp, 0Ch
.text:0040A5D3                 retn
.text:0040A5D4 ; ---------------------------------------------------------------------------
.text:0040A5D4
.text:0040A5D4 loc_40A5D4:                             ; CODE XREF: .text:0040A5CC↑j
.text:0040A5D4                 mov     edx, 1000h
.text:0040A5D9                 jmp     short loc_40A5CE
.text:0040A5D9 ; ---------------------------------------------------------------------------
.text:0040A5DB                 align 10h
.text:0040A5E0
.text:0040A5E0 loc_40A5E0:                             ; CODE XREF: .text:0040A5C7↑j
.text:0040A5E0                 mov     edx, 2000h
.text:0040A5E5                 jmp     short loc_40A5CE
.text:0040A5E5 ; ---------------------------------------------------------------------------
.text:0040A5E7                 align 10h
.text:0040A5F0                 mov     ecx, [esp+4]
.text:0040A5F4                 xor     edx, edx
.text:0040A5F6                 test    cl, 10h
.text:0040A5F9                 setz    dl
.text:0040A5FC                 dec     edx
.text:0040A5FD                 and     edx, 0FFFFC000h
.text:0040A603                 add     edx, 8000h
.text:0040A609                 or      edx, 124h
.text:0040A60F                 test    cl, 1
.text:0040A612                 movzx   eax, dx
.text:0040A615                 jnz     short locret_40A61C
.text:0040A617                 or      eax, 92h
.text:0040A61C
.text:0040A61C locret_40A61C:                          ; CODE XREF: .text:0040A615↑j
.text:0040A61C                 retn
.text:0040A61C ; ---------------------------------------------------------------------------
.text:0040A61D                 align 10h
.text:0040A620                 sub     esp, 2Ch
.text:0040A623                 mov     [esp+20h], esi
.text:0040A627                 mov     esi, [esp+30h]
.text:0040A62B                 mov     [esp+1Ch], ebx
.text:0040A62F                 xor     ebx, ebx
.text:0040A631                 test    esi, esi
.text:0040A633                 mov     [esp+24h], edi
.text:0040A637                 mov     [esp+28h], ebp
.text:0040A63B                 jz      short loc_40A690
.text:0040A63D                 cmp     byte ptr [esi], 0
.text:0040A640                 jnz     short loc_40A694
.text:0040A642
.text:0040A642 loc_40A642:                             ; CODE XREF: .text:0040A6FC↓j
.text:0040A642                                         ; .text:0040A707↓j
.text:0040A642                 test    esi, esi
.text:0040A644                 jz      short loc_40A690
.text:0040A646                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A64E                 mov     [esp], esi
.text:0040A651                 call    strrchr
.text:0040A656                 test    eax, eax
.text:0040A658                 jz      short loc_40A690
.text:0040A65A                 cld
.text:0040A65B                 mov     ecx, 5
.text:0040A660                 mov     esi, eax
.text:0040A662                 mov     edi, offset aLnk ; ".lnk"
.text:0040A667                 repe cmpsb
.text:0040A669                 setz    cl
.text:0040A66C                 movzx   eax, cl
.text:0040A66F                 nop
.text:0040A670
.text:0040A670 loc_40A670:                             ; CODE XREF: .text:0040A692↓j
.text:0040A670                 test    eax, eax
.text:0040A672                 jz      short loc_40A67A
.text:0040A674                 or      ebx, 0A000h
.text:0040A67A
.text:0040A67A loc_40A67A:                             ; CODE XREF: .text:0040A672↑j
.text:0040A67A                 mov     eax, ebx
.text:0040A67C                 mov     esi, [esp+20h]
.text:0040A680                 mov     ebx, [esp+1Ch]
.text:0040A684                 mov     edi, [esp+24h]
.text:0040A688                 mov     ebp, [esp+28h]
.text:0040A68C                 add     esp, 2Ch
.text:0040A68F                 retn
.text:0040A690 ; ---------------------------------------------------------------------------
.text:0040A690
.text:0040A690 loc_40A690:                             ; CODE XREF: .text:0040A63B↑j
.text:0040A690                                         ; .text:0040A644↑j ...
.text:0040A690                 xor     eax, eax
.text:0040A692                 jmp     short loc_40A670
.text:0040A694 ; ---------------------------------------------------------------------------
.text:0040A694
.text:0040A694 loc_40A694:                             ; CODE XREF: .text:0040A640↑j
.text:0040A694                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040A69B                 call    GetModuleHandleA
.text:0040A6A0                 sub     esp, 4
.text:0040A6A3                 mov     ebp, eax
.text:0040A6A5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040A6AD                 mov     [esp], eax
.text:0040A6B0                 call    GetProcAddress
.text:0040A6B5                 sub     esp, 8
.text:0040A6B8                 test    eax, eax
.text:0040A6BA                 mov     dword ptr [esp+14h], 0
.text:0040A6C2                 jz      short loc_40A6D8
.text:0040A6C4                 mov     [esp], esi
.text:0040A6C7                 lea     ecx, [esp+18h]
.text:0040A6CB                 mov     [esp+4], ecx
.text:0040A6CF                 call    eax
.text:0040A6D1                 sub     esp, 8
.text:0040A6D4                 test    eax, eax
.text:0040A6D6                 jnz     short loc_40A738
.text:0040A6D8
.text:0040A6D8 loc_40A6D8:                             ; CODE XREF: .text:0040A6C2↑j
.text:0040A6D8                 mov     edx, ds:Str
.text:0040A6DE                 test    edx, edx
.text:0040A6E0                 jz      short loc_40A760
.text:0040A6E2
.text:0040A6E2 loc_40A6E2:                             ; CODE XREF: .text:0040A773↓j
.text:0040A6E2                                         ; .text:0040A785↓j
.text:0040A6E2                 test    esi, esi
.text:0040A6E4                 jz      short loc_40A6EB
.text:0040A6E6                 cmp     byte ptr [esi], 0
.text:0040A6E9                 jnz     short loc_40A70C
.text:0040A6EB
.text:0040A6EB loc_40A6EB:                             ; CODE XREF: .text:0040A6E4↑j
.text:0040A6EB                                         ; .text:0040A720↓j ...
.text:0040A6EB                 mov     [esp], ebp
.text:0040A6EE                 call    FreeLibrary
.text:0040A6F3                 sub     esp, 4
.text:0040A6F6                 mov     eax, [esp+14h]
.text:0040A6FA                 test    eax, eax
.text:0040A6FC                 jz      loc_40A642
.text:0040A702                 mov     ebx, 49h ; 'I'
.text:0040A707                 jmp     loc_40A642
.text:0040A70C ; ---------------------------------------------------------------------------
.text:0040A70C
.text:0040A70C loc_40A70C:                             ; CODE XREF: .text:0040A6E9↑j
.text:0040A70C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040A714                 mov     [esp], esi
.text:0040A717                 call    strrchr
.text:0040A71C                 test    eax, eax
.text:0040A71E                 mov     edi, eax
.text:0040A720                 jz      short loc_40A6EB
.text:0040A722                 mov     [esp+4], eax
.text:0040A726                 mov     edx, ds:Str
.text:0040A72C                 mov     [esp], edx
.text:0040A72F                 call    strstr
.text:0040A734                 test    eax, eax
.text:0040A736                 jz      short loc_40A742
.text:0040A738
.text:0040A738 loc_40A738:                             ; CODE XREF: .text:0040A6D6↑j
.text:0040A738                                         ; .text:0040A758↓j
.text:0040A738                 mov     dword ptr [esp+14h], 1
.text:0040A740                 jmp     short loc_40A6EB
.text:0040A742 ; ---------------------------------------------------------------------------
.text:0040A742
.text:0040A742 loc_40A742:                             ; CODE XREF: .text:0040A736↑j
.text:0040A742                 mov     [esp+4], edi
.text:0040A746                 mov     edi, off_412064 ; ".com;.exe;.bat;.cmd"
.text:0040A74C                 mov     [esp], edi
.text:0040A74F                 call    strstr
.text:0040A754                 test    eax, eax
.text:0040A756                 jz      short loc_40A6EB
.text:0040A758                 jmp     short loc_40A738
.text:0040A758 ; ---------------------------------------------------------------------------
.text:0040A75A                 align 10h
.text:0040A760
.text:0040A760 loc_40A760:                             ; CODE XREF: .text:0040A6E0↑j
.text:0040A760                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:0040A767                 call    getenv
.text:0040A76C                 mov     ds:Str, eax
.text:0040A771                 test    eax, eax
.text:0040A773                 jnz     loc_40A6E2
.text:0040A779                 mov     ecx, off_412064 ; ".com;.exe;.bat;.cmd"
.text:0040A77F                 mov     ds:Str, ecx
.text:0040A785                 jmp     loc_40A6E2
.text:0040A785 ; ---------------------------------------------------------------------------
.text:0040A78A                 align 10h
.text:0040A790                 push    esi
.text:0040A791                 push    ebx
.text:0040A792                 sub     esp, 864h
.text:0040A798                 mov     ebx, [esp+870h]
.text:0040A79F                 lea     edx, [esp+830h]
.text:0040A7A6                 mov     esi, [esp+874h]
.text:0040A7AD                 mov     [esp+4], edx
.text:0040A7B1                 mov     [esp], ebx
.text:0040A7B4                 call    sub_409610
.text:0040A7B9                 xor     edx, edx
.text:0040A7BB                 test    eax, eax
.text:0040A7BD                 jz      loc_40A8A5
.text:0040A7C3                 mov     ecx, [esp+830h]
.text:0040A7CA                 test    cl, 10h
.text:0040A7CD                 mov     [esi], ecx
.text:0040A7CF                 mov     eax, [esp+834h]
.text:0040A7D6                 mov     edx, [esp+838h]
.text:0040A7DD                 mov     [esi+4], eax
.text:0040A7E0                 mov     [esi+8], edx
.text:0040A7E3                 mov     eax, [esp+83Ch]
.text:0040A7EA                 mov     edx, [esp+840h]
.text:0040A7F1                 mov     [esi+0Ch], eax
.text:0040A7F4                 mov     [esi+10h], edx
.text:0040A7F7                 mov     edx, [esp+848h]
.text:0040A7FE                 mov     eax, [esp+844h]
.text:0040A805                 mov     [esi+18h], edx
.text:0040A808                 mov     [esi+14h], eax
.text:0040A80B                 mov     edx, [esp+84Ch]
.text:0040A812                 mov     [esi+20h], edx
.text:0040A815                 mov     edx, [esp+850h]
.text:0040A81C                 mov     [esi+24h], edx
.text:0040A81F                 jnz     loc_40A8B0
.text:0040A825                 mov     dword ptr [esi+28h], 1
.text:0040A82C
.text:0040A82C loc_40A82C:                             ; CODE XREF: .text:0040A8BB↓j
.text:0040A82C                 mov     [esp], ebx
.text:0040A82F                 call    sub_40B980
.text:0040A834                 mov     [esp], eax
.text:0040A837                 call    sub_40B550
.text:0040A83C                 mov     [esp], eax
.text:0040A83F                 lea     edx, [esp+30h]
.text:0040A843                 mov     ebx, eax
.text:0040A845                 mov     [esp+18h], edx
.text:0040A849                 lea     ecx, [esp+2Ch]
.text:0040A84D                 lea     edx, [esp+28h]
.text:0040A851                 mov     [esp+14h], ecx
.text:0040A855                 lea     ecx, [esp+24h]
.text:0040A859                 mov     [esp+10h], edx
.text:0040A85D                 lea     edx, [esp+430h]
.text:0040A864                 mov     [esp+0Ch], ecx
.text:0040A868                 mov     [esp+4], edx
.text:0040A86C                 mov     dword ptr [esp+1Ch], 400h
.text:0040A874                 mov     dword ptr [esp+8], 400h
.text:0040A87C                 call    GetVolumeInformationA
.text:0040A881                 sub     esp, 20h
.text:0040A884                 test    eax, eax
.text:0040A886                 setz    cl
.text:0040A889                 mov     [esp], ebx
.text:0040A88C                 movzx   edx, cl
.text:0040A88F                 dec     edx
.text:0040A890                 and     [esp+24h], edx
.text:0040A894                 call    free
.text:0040A899                 mov     ecx, [esp+24h]
.text:0040A89D                 mov     edx, 1
.text:0040A8A2                 mov     [esi+1Ch], ecx
.text:0040A8A5
.text:0040A8A5 loc_40A8A5:                             ; CODE XREF: .text:0040A7BD↑j
.text:0040A8A5                 add     esp, 864h
.text:0040A8AB                 mov     eax, edx
.text:0040A8AD                 pop     ebx
.text:0040A8AE                 pop     esi
.text:0040A8AF                 retn
.text:0040A8B0 ; ---------------------------------------------------------------------------
.text:0040A8B0
.text:0040A8B0 loc_40A8B0:                             ; CODE XREF: .text:0040A81F↑j
.text:0040A8B0                 mov     [esp], ebx
.text:0040A8B3                 call    sub_409780
.text:0040A8B8                 mov     [esi+28h], eax
.text:0040A8BB                 jmp     loc_40A82C
.text:0040A8C0 ; ---------------------------------------------------------------------------
.text:0040A8C0                 push    ebp
.text:0040A8C1                 xor     edx, edx
.text:0040A8C3                 push    edi
.text:0040A8C4                 push    esi
.text:0040A8C5                 xor     esi, esi
.text:0040A8C7                 push    ebx
.text:0040A8C8                 sub     esp, 1Ch
.text:0040A8CB                 mov     ebx, [esp+5Ch]
.text:0040A8CF                 mov     ecx, [esp+30h]
.text:0040A8D3                 mov     edi, [esp+60h]
.text:0040A8D7                 or      esi, ebx
.text:0040A8D9                 mov     eax, [esp+4Ch]
.text:0040A8DD                 or      edi, edx
.text:0040A8DF                 mov     ebx, [esp+64h]
.text:0040A8E3                 xor     edx, edx
.text:0040A8E5                 test    cl, 10h
.text:0040A8E8                 setz    dl
.text:0040A8EB                 mov     [ebx+10h], eax
.text:0040A8EE                 mov     [ebx+8], edi
.text:0040A8F1                 mov     [ebx+0Ch], esi
.text:0040A8F4                 dec     edx
.text:0040A8F5                 and     edx, 0FFFFC000h
.text:0040A8FB                 mov     dword ptr [ebx+14h], 0
.text:0040A902                 add     edx, 8000h
.text:0040A908                 or      edx, 124h
.text:0040A90E                 test    cl, 1
.text:0040A911                 movzx   eax, dx
.text:0040A914                 jnz     short loc_40A91B
.text:0040A916                 or      eax, 92h
.text:0040A91B
.text:0040A91B loc_40A91B:                             ; CODE XREF: .text:0040A914↑j
.text:0040A91B                 mov     ebx, [esp+54h]
.text:0040A91F                 xor     edx, edx
.text:0040A921                 xor     ebp, ebp
.text:0040A923                 mov     edi, [esp+50h]
.text:0040A927                 mov     ecx, [esp+64h]
.text:0040A92B                 mov     esi, edi
.text:0040A92D                 or      [ecx], eax
.text:0040A92F                 mov     edi, ebx
.text:0040A931                 or      edi, ebp
.text:0040A933                 mov     ebp, edx
.text:0040A935                 mov     ebx, [esp+64h]
.text:0040A939                 or      ebp, esi
.text:0040A93B                 mov     esi, [esp+58h]
.text:0040A93F                 mov     edx, [esp+40h]
.text:0040A943                 mov     [ebx+30h], edi
.text:0040A946                 mov     [ebx+18h], esi
.text:0040A949                 mov     ecx, edx
.text:0040A94B                 xor     esi, esi
.text:0040A94D                 mov     [ebx+34h], ebp
.text:0040A950                 xor     edx, edx
.text:0040A952                 or      esi, ecx
.text:0040A954                 mov     dword ptr [esp+8], 989680h
.text:0040A95C                 mov     ebx, [esp+3Ch]
.text:0040A960                 mov     ecx, esi
.text:0040A962                 mov     dword ptr [esp+0Ch], 0
.text:0040A96A                 or      ebx, edx
.text:0040A96C                 mov     edx, ebx
.text:0040A96E                 sub     edx, 0D53E8000h
.text:0040A974                 sbb     ecx, 19DB1DEh
.text:0040A97A                 mov     [esp+4], ecx
.text:0040A97E                 mov     [esp], edx
.text:0040A981                 call    sub_410F20
.text:0040A986                 mov     edx, eax
.text:0040A988                 mov     ecx, [esp+64h]
.text:0040A98C                 shr     eax, 1Fh
.text:0040A98F                 dec     eax
.text:0040A990                 and     edx, eax
.text:0040A992                 mov     [ecx+38h], edx
.text:0040A995                 mov     [esp], ebx
.text:0040A998                 mov     [esp+4], esi
.text:0040A99C                 mov     dword ptr [esp+8], 989680h
.text:0040A9A4                 mov     dword ptr [esp+0Ch], 0
.text:0040A9AC                 call    sub_411040
.text:0040A9B1                 lea     ecx, [eax+eax*4]
.text:0040A9B4                 lea     esi, [ecx+ecx*4]
.text:0040A9B7                 mov     eax, [esp+64h]
.text:0040A9BB                 shl     esi, 2
.text:0040A9BE                 mov     ebx, esi
.text:0040A9C0                 shr     ebx, 1Fh
.text:0040A9C3                 dec     ebx
.text:0040A9C4                 and     ebx, esi
.text:0040A9C6                 xor     esi, esi
.text:0040A9C8                 mov     [eax+3Ch], ebx
.text:0040A9CB                 mov     edx, [esp+38h]
.text:0040A9CF                 mov     dword ptr [esp+8], 989680h
.text:0040A9D7                 mov     ebx, [esp+34h]
.text:0040A9DB                 mov     dword ptr [esp+0Ch], 0
.text:0040A9E3                 mov     ecx, edx
.text:0040A9E5                 xor     edx, edx
.text:0040A9E7                 or      ebx, edx
.text:0040A9E9                 or      esi, ecx
.text:0040A9EB                 mov     edx, ebx
.text:0040A9ED                 sub     edx, 0D53E8000h
.text:0040A9F3                 mov     ecx, esi
.text:0040A9F5                 sbb     ecx, 19DB1DEh
.text:0040A9FB                 mov     [esp+4], ecx
.text:0040A9FF                 mov     [esp], edx
.text:0040AA02                 call    sub_410F20
.text:0040AA07                 mov     edx, eax
.text:0040AA09                 mov     ecx, [esp+64h]
.text:0040AA0D                 shr     eax, 1Fh
.text:0040AA10                 dec     eax
.text:0040AA11                 and     edx, eax
.text:0040AA13                 mov     [ecx+48h], edx
.text:0040AA16                 mov     [esp], ebx
.text:0040AA19                 mov     [esp+4], esi
.text:0040AA1D                 mov     dword ptr [esp+8], 989680h
.text:0040AA25                 mov     dword ptr [esp+0Ch], 0
.text:0040AA2D                 call    sub_411040
.text:0040AA32                 lea     edx, [eax+eax*4]
.text:0040AA35                 mov     ebx, [esp+64h]
.text:0040AA39                 lea     ecx, [edx+edx*4]
.text:0040AA3C                 shl     ecx, 2
.text:0040AA3F                 mov     esi, ecx
.text:0040AA41                 shr     esi, 1Fh
.text:0040AA44                 dec     esi
.text:0040AA45                 and     esi, ecx
.text:0040AA47                 mov     [ebx+4Ch], esi
.text:0040AA4A                 mov     edx, [esp+48h]
.text:0040AA4E                 xor     esi, esi
.text:0040AA50                 mov     dword ptr [esp+8], 989680h
.text:0040AA58                 mov     ebx, [esp+44h]
.text:0040AA5C                 mov     dword ptr [esp+0Ch], 0
.text:0040AA64                 mov     ecx, edx
.text:0040AA66                 xor     edx, edx
.text:0040AA68                 or      ebx, edx
.text:0040AA6A                 or      esi, ecx
.text:0040AA6C                 mov     edx, ebx
.text:0040AA6E                 sub     edx, 0D53E8000h
.text:0040AA74                 mov     ecx, esi
.text:0040AA76                 sbb     ecx, 19DB1DEh
.text:0040AA7C                 mov     [esp+4], ecx
.text:0040AA80                 mov     [esp], edx
.text:0040AA83                 call    sub_410F20
.text:0040AA88                 mov     edx, eax
.text:0040AA8A                 mov     ecx, [esp+64h]
.text:0040AA8E                 shr     eax, 1Fh
.text:0040AA91                 dec     eax
.text:0040AA92                 and     edx, eax
.text:0040AA94                 mov     [ecx+40h], edx
.text:0040AA97                 mov     [esp+4], esi
.text:0040AA9B                 mov     dword ptr [esp+8], 989680h
.text:0040AAA3                 mov     dword ptr [esp+0Ch], 0
.text:0040AAAB                 mov     [esp], ebx
.text:0040AAAE                 call    sub_411040
.text:0040AAB3                 lea     edx, [eax+eax*4]
.text:0040AAB6                 lea     esi, [edx+edx*4]
.text:0040AAB9                 mov     eax, [esp+64h]
.text:0040AABD                 shl     esi, 2
.text:0040AAC0                 mov     edx, ebp
.text:0040AAC2                 mov     ecx, esi
.text:0040AAC4                 mov     dword ptr [eax+50h], 200h
.text:0040AACB                 shr     ecx, 1Fh
.text:0040AACE                 dec     ecx
.text:0040AACF                 and     ecx, esi
.text:0040AAD1                 test    ebp, ebp
.text:0040AAD3                 mov     [eax+44h], ecx
.text:0040AAD6                 mov     eax, edi
.text:0040AAD8                 js      short loc_40AB12
.text:0040AADA
.text:0040AADA loc_40AADA:                             ; CODE XREF: .text:0040AB1A↓j
.text:0040AADA                 xor     esi, esi
.text:0040AADC                 mov     ebp, edi
.text:0040AADE                 mov     ecx, eax
.text:0040AAE0                 shrd    ecx, edx, 9
.text:0040AAE4                 mov     ebx, edx
.text:0040AAE6                 and     ebp, 1FFh
.text:0040AAEC                 mov     eax, esi
.text:0040AAEE                 sar     ebx, 9
.text:0040AAF1                 or      eax, ebp
.text:0040AAF3                 jz      short loc_40AAFB
.text:0040AAF5                 add     ecx, 1
.text:0040AAF8                 adc     ebx, 0
.text:0040AAFB
.text:0040AAFB loc_40AAFB:                             ; CODE XREF: .text:0040AAF3↑j
.text:0040AAFB                 mov     edx, [esp+64h]
.text:0040AAFF                 mov     eax, 1
.text:0040AB04                 mov     [edx+58h], ecx
.text:0040AB07                 mov     [edx+5Ch], ebx
.text:0040AB0A                 add     esp, 1Ch
.text:0040AB0D                 pop     ebx
.text:0040AB0E                 pop     esi
.text:0040AB0F                 pop     edi
.text:0040AB10                 pop     ebp
.text:0040AB11                 retn
.text:0040AB12 ; ---------------------------------------------------------------------------
.text:0040AB12
.text:0040AB12 loc_40AB12:                             ; CODE XREF: .text:0040AAD8↑j
.text:0040AB12                 add     eax, 1FFh
.text:0040AB17                 adc     edx, 0
.text:0040AB1A                 jmp     short loc_40AADA
.text:0040AB1A ; ---------------------------------------------------------------------------
.text:0040AB1C                 align 10h
.text:0040AB20                 push    ebp
.text:0040AB21                 push    edi
.text:0040AB22                 xor     edi, edi
.text:0040AB24                 push    esi
.text:0040AB25                 xor     esi, esi
.text:0040AB27                 push    ebx
.text:0040AB28                 sub     esp, 0Ch
.text:0040AB2B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040AB32                 call    LoadLibraryA
.text:0040AB37                 sub     esp, 4
.text:0040AB3A                 mov     ebp, eax
.text:0040AB3C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040AB44                 mov     [esp], eax
.text:0040AB47                 call    GetProcAddress
.text:0040AB4C                 sub     esp, 8
.text:0040AB4F                 test    eax, eax
.text:0040AB51                 jz      short loc_40AB82
.text:0040AB53                 lea     ecx, [esp+8]
.text:0040AB57                 mov     [esp+4], ecx
.text:0040AB5B                 mov     ecx, [esp+20h]
.text:0040AB5F                 mov     [esp], ecx
.text:0040AB62                 call    eax
.text:0040AB64                 sub     esp, 8
.text:0040AB67                 mov     ebx, eax
.text:0040AB69                 cmp     eax, 0FFFFFFFFh
.text:0040AB6C                 jz      short loc_40AB9D
.text:0040AB6E
.text:0040AB6E loc_40AB6E:                             ; CODE XREF: .text:0040ABA6↓j
.text:0040AB6E                 mov     esi, [esp+8]
.text:0040AB72                 mov     ecx, ebx
.text:0040AB74                 xor     edi, edi
.text:0040AB76                 xor     ebx, ebx
.text:0040AB78                 mov     edx, esi
.text:0040AB7A                 mov     esi, ecx
.text:0040AB7C                 or      esi, edi
.text:0040AB7E                 mov     edi, ebx
.text:0040AB80                 or      edi, edx
.text:0040AB82
.text:0040AB82 loc_40AB82:                             ; CODE XREF: .text:0040AB51↑j
.text:0040AB82                                         ; .text:0040ABA4↓j
.text:0040AB82                 test    ebp, ebp
.text:0040AB84                 jz      short loc_40AB91
.text:0040AB86                 mov     [esp], ebp
.text:0040AB89                 call    FreeLibrary
.text:0040AB8E                 sub     esp, 4
.text:0040AB91
.text:0040AB91 loc_40AB91:                             ; CODE XREF: .text:0040AB84↑j
.text:0040AB91                 add     esp, 0Ch
.text:0040AB94                 mov     eax, esi
.text:0040AB96                 mov     edx, edi
.text:0040AB98                 pop     ebx
.text:0040AB99                 pop     esi
.text:0040AB9A                 pop     edi
.text:0040AB9B                 pop     ebp
.text:0040AB9C                 retn
.text:0040AB9D ; ---------------------------------------------------------------------------
.text:0040AB9D
.text:0040AB9D loc_40AB9D:                             ; CODE XREF: .text:0040AB6C↑j
.text:0040AB9D                 call    GetLastError
.text:0040ABA2                 test    eax, eax
.text:0040ABA4                 jnz     short loc_40AB82
.text:0040ABA6                 jmp     short loc_40AB6E
.text:0040ABA6 ; ---------------------------------------------------------------------------
.text:0040ABA8                 align 10h
.text:0040ABB0
.text:0040ABB0 ; =============== S U B R O U T I N E =======================================
.text:0040ABB0
.text:0040ABB0
.text:0040ABB0 ; int __cdecl sub_40ABB0(LPCSTR lpFileName, int)
.text:0040ABB0 sub_40ABB0      proc near               ; CODE XREF: sub_40ECA0-3BAF↓p
.text:0040ABB0
.text:0040ABB0 lpRootPathName  = dword ptr -8FCh
.text:0040ABB0 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040ABB0 nVolumeNameSize = dword ptr -8F4h
.text:0040ABB0 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040ABB0 lpMaximumComponentLength= dword ptr -8ECh
.text:0040ABB0 lpFileSystemFlags= dword ptr -8E8h
.text:0040ABB0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040ABB0 nFileSystemNameSize= dword ptr -8E0h
.text:0040ABB0 VolumeSerialNumber= dword ptr -8D8h
.text:0040ABB0 MaximumComponentLength= dword ptr -8D4h
.text:0040ABB0 FileSystemFlags = dword ptr -8D0h
.text:0040ABB0 var_8CC         = dword ptr -8CCh
.text:0040ABB0 var_8C8         = dword ptr -8C8h
.text:0040ABB0 var_8C4         = dword ptr -8C4h
.text:0040ABB0 var_8C0         = dword ptr -8C0h
.text:0040ABB0 var_8BC         = dword ptr -8BCh
.text:0040ABB0 var_8B8         = dword ptr -8B8h
.text:0040ABB0 var_8B4         = dword ptr -8B4h
.text:0040ABB0 var_8B0         = dword ptr -8B0h
.text:0040ABB0 var_8AC         = dword ptr -8ACh
.text:0040ABB0 var_8A8         = dword ptr -8A8h
.text:0040ABB0 var_8A4         = dword ptr -8A4h
.text:0040ABB0 var_8A0         = dword ptr -8A0h
.text:0040ABB0 var_89C         = dword ptr -89Ch
.text:0040ABB0 FileSystemNameBuffer= byte ptr -88Ch
.text:0040ABB0 VolumeNameBuffer= byte ptr -48Ch
.text:0040ABB0 var_8C          = dword ptr -8Ch
.text:0040ABB0 var_88          = dword ptr -88h
.text:0040ABB0 var_84          = dword ptr -84h
.text:0040ABB0 var_80          = dword ptr -80h
.text:0040ABB0 var_7C          = dword ptr -7Ch
.text:0040ABB0 var_78          = dword ptr -78h
.text:0040ABB0 var_74          = dword ptr -74h
.text:0040ABB0 var_70          = dword ptr -70h
.text:0040ABB0 var_6C          = dword ptr -6Ch
.text:0040ABB0 var_5C          = dword ptr -5Ch
.text:0040ABB0 var_58          = dword ptr -58h
.text:0040ABB0 var_54          = dword ptr -54h
.text:0040ABB0 var_50          = dword ptr -50h
.text:0040ABB0 var_4C          = dword ptr -4Ch
.text:0040ABB0 var_48          = dword ptr -48h
.text:0040ABB0 var_44          = dword ptr -44h
.text:0040ABB0 var_3C          = dword ptr -3Ch
.text:0040ABB0 var_38          = dword ptr -38h
.text:0040ABB0 var_34          = dword ptr -34h
.text:0040ABB0 lpFileName      = dword ptr  4
.text:0040ABB0 arg_4           = dword ptr  8
.text:0040ABB0
.text:0040ABB0                 push    ebp
.text:0040ABB1                 xor     eax, eax
.text:0040ABB3                 mov     ecx, 0Dh
.text:0040ABB8                 push    edi
.text:0040ABB9                 push    esi
.text:0040ABBA                 push    ebx
.text:0040ABBB                 sub     esp, 8ECh
.text:0040ABC1                 lea     edi, [esp+8FCh+var_5C]
.text:0040ABC8                 cld
.text:0040ABC9                 lea     edx, [esp+8FCh+var_8C]
.text:0040ABD0                 rep stosd
.text:0040ABD2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040ABD6                 lea     esi, [esp+8FCh+var_5C]
.text:0040ABDD                 mov     edx, [esp+8FCh+lpFileName]
.text:0040ABE4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040ABE7                 call    sub_409610
.text:0040ABEC                 test    eax, eax
.text:0040ABEE                 mov     edx, 0FFFFFFFFh
.text:0040ABF3                 jz      loc_40AF84
.text:0040ABF9                 mov     edx, [esp+8FCh+var_88]
.text:0040AC00                 mov     ebp, [esp+8FCh+var_84]
.text:0040AC07                 mov     edi, [esp+8FCh+var_80]
.text:0040AC0E                 mov     [esp+8FCh+var_58], edx
.text:0040AC15                 mov     ecx, [esp+8FCh+var_7C]
.text:0040AC1C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040AC23                 mov     [esp+8FCh+var_54], ebp
.text:0040AC2A                 mov     edx, [esp+8FCh+var_78]
.text:0040AC31                 mov     ebp, [esp+8FCh+var_74]
.text:0040AC38                 mov     [esp+8FCh+var_50], edi
.text:0040AC3F                 test    bl, 10h
.text:0040AC42                 mov     edi, [esp+8FCh+var_70]
.text:0040AC49                 mov     [esp+8FCh+var_4C], ecx
.text:0040AC50                 mov     ecx, [esp+8FCh+var_6C]
.text:0040AC57                 mov     [esp+8FCh+var_5C], ebx
.text:0040AC5E                 mov     [esp+8FCh+var_48], edx
.text:0040AC65                 mov     [esp+8FCh+var_44], ebp
.text:0040AC6C                 mov     [esp+8FCh+var_3C], edi
.text:0040AC73                 mov     [esp+8FCh+var_38], ecx
.text:0040AC7A                 jnz     loc_40AFA0
.text:0040AC80                 mov     ebx, 1
.text:0040AC85                 mov     [esp+8FCh+var_34], ebx
.text:0040AC8C
.text:0040AC8C loc_40AC8C:                             ; CODE XREF: sub_40ABB0+406↓j
.text:0040AC8C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040AC93                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040AC97                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040AC9B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040AC9E                 call    sub_40B980
.text:0040ACA3                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040ACA6                 call    sub_40B550
.text:0040ACAB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040ACAF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040ACB3                 mov     ebp, eax
.text:0040ACB5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040ACB9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040ACBD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040ACC4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040ACC8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040ACCC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040ACD0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040ACD8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040ACE0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040ACE3                 call    GetVolumeInformationA
.text:0040ACE8                 sub     esp, 20h
.text:0040ACEB                 test    eax, eax
.text:0040ACED                 lea     edi, [esp+8FCh+var_8CC]
.text:0040ACF1                 setz    bl
.text:0040ACF4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040ACF7                 xor     ebp, ebp
.text:0040ACF9                 movzx   edx, bl
.text:0040ACFC                 dec     edx
.text:0040ACFD                 xor     ebx, ebx
.text:0040ACFF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040AD03                 call    free
.text:0040AD08                 cld
.text:0040AD09                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040AD0D                 mov     [esi+1Ch], ecx
.text:0040AD10                 mov     ecx, 0Dh
.text:0040AD15                 rep movsd
.text:0040AD17                 mov     edi, [esp+8FCh+var_8A0]
.text:0040AD1B                 mov     edx, [esp+8FCh+var_89C]
.text:0040AD1F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040AD23                 or      ebp, edi
.text:0040AD25                 mov     esi, [esp+8FCh+var_8B0]
.text:0040AD29                 mov     edi, [esp+8FCh+arg_4]
.text:0040AD30                 or      edx, ebx
.text:0040AD32                 mov     [edi+8], edx
.text:0040AD35                 xor     edx, edx
.text:0040AD37                 test    cl, 10h
.text:0040AD3A                 setz    dl
.text:0040AD3D                 mov     [edi+0Ch], ebp
.text:0040AD40                 mov     [edi+10h], esi
.text:0040AD43                 mov     dword ptr [edi+14h], 0
.text:0040AD4A                 dec     edx
.text:0040AD4B                 and     edx, 0FFFFC000h
.text:0040AD51                 add     edx, 8000h
.text:0040AD57                 or      edx, 124h
.text:0040AD5D                 test    cl, 1
.text:0040AD60                 movzx   eax, dx
.text:0040AD63                 jnz     short loc_40AD6A
.text:0040AD65                 or      eax, 92h
.text:0040AD6A
.text:0040AD6A loc_40AD6A:                             ; CODE XREF: sub_40ABB0+1B3↑j
.text:0040AD6A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040AD6E                 xor     edx, edx
.text:0040AD70                 xor     ebp, ebp
.text:0040AD72                 mov     edi, [esp+8FCh+var_8AC]
.text:0040AD76                 mov     ecx, [esp+8FCh+arg_4]
.text:0040AD7D                 mov     esi, edi
.text:0040AD7F                 or      [ecx], eax
.text:0040AD81                 mov     edi, ebx
.text:0040AD83                 or      edi, ebp
.text:0040AD85                 mov     ebp, edx
.text:0040AD87                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040AD8B                 or      ebp, esi
.text:0040AD8D                 mov     esi, [esp+8FCh+arg_4]
.text:0040AD94                 mov     edx, [esp+8FCh+var_8BC]
.text:0040AD98                 mov     [esi+18h], ebx
.text:0040AD9B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040AD9F                 mov     ecx, edx
.text:0040ADA1                 mov     [esi+30h], edi
.text:0040ADA4                 xor     edx, edx
.text:0040ADA6                 mov     [esi+34h], ebp
.text:0040ADA9                 or      ebx, edx
.text:0040ADAB                 xor     esi, esi
.text:0040ADAD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040ADB5                 or      esi, ecx
.text:0040ADB7                 mov     edx, ebx
.text:0040ADB9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040ADC1                 sub     edx, 0D53E8000h
.text:0040ADC7                 mov     ecx, esi
.text:0040ADC9                 sbb     ecx, 19DB1DEh
.text:0040ADCF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040ADD3                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040ADD6                 call    sub_410F20
.text:0040ADDB                 mov     edx, eax
.text:0040ADDD                 mov     ecx, [esp+8FCh+arg_4]
.text:0040ADE4                 shr     eax, 1Fh
.text:0040ADE7                 dec     eax
.text:0040ADE8                 and     edx, eax
.text:0040ADEA                 mov     [ecx+38h], edx
.text:0040ADED                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040ADF0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040ADF4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040ADFC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AE04                 call    sub_411040
.text:0040AE09                 lea     ecx, [eax+eax*4]
.text:0040AE0C                 lea     ebx, [ecx+ecx*4]
.text:0040AE0F                 mov     eax, [esp+8FCh+arg_4]
.text:0040AE16                 shl     ebx, 2
.text:0040AE19                 mov     esi, ebx
.text:0040AE1B                 shr     esi, 1Fh
.text:0040AE1E                 dec     esi
.text:0040AE1F                 and     esi, ebx
.text:0040AE21                 mov     [eax+3Ch], esi
.text:0040AE24                 mov     edx, [esp+8FCh+var_8C4]
.text:0040AE28                 xor     esi, esi
.text:0040AE2A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AE32                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040AE36                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AE3E                 mov     ecx, edx
.text:0040AE40                 xor     edx, edx
.text:0040AE42                 or      ebx, edx
.text:0040AE44                 or      esi, ecx
.text:0040AE46                 mov     edx, ebx
.text:0040AE48                 sub     edx, 0D53E8000h
.text:0040AE4E                 mov     ecx, esi
.text:0040AE50                 sbb     ecx, 19DB1DEh
.text:0040AE56                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040AE5A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040AE5D                 call    sub_410F20
.text:0040AE62                 mov     edx, eax
.text:0040AE64                 mov     ecx, [esp+8FCh+arg_4]
.text:0040AE6B                 shr     eax, 1Fh
.text:0040AE6E                 dec     eax
.text:0040AE6F                 and     edx, eax
.text:0040AE71                 mov     [ecx+48h], edx
.text:0040AE74                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040AE77                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040AE7B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AE83                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AE8B                 call    sub_411040
.text:0040AE90                 lea     ecx, [eax+eax*4]
.text:0040AE93                 lea     ebx, [ecx+ecx*4]
.text:0040AE96                 mov     eax, [esp+8FCh+arg_4]
.text:0040AE9D                 shl     ebx, 2
.text:0040AEA0                 mov     esi, ebx
.text:0040AEA2                 shr     esi, 1Fh
.text:0040AEA5                 dec     esi
.text:0040AEA6                 and     esi, ebx
.text:0040AEA8                 mov     [eax+4Ch], esi
.text:0040AEAB                 mov     edx, [esp+8FCh+var_8B4]
.text:0040AEAF                 xor     esi, esi
.text:0040AEB1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AEB9                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040AEBD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AEC5                 mov     ecx, edx
.text:0040AEC7                 xor     edx, edx
.text:0040AEC9                 or      ebx, edx
.text:0040AECB                 or      esi, ecx
.text:0040AECD                 mov     edx, ebx
.text:0040AECF                 sub     edx, 0D53E8000h
.text:0040AED5                 mov     ecx, esi
.text:0040AED7                 sbb     ecx, 19DB1DEh
.text:0040AEDD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040AEE1                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040AEE4                 call    sub_410F20
.text:0040AEE9                 mov     edx, eax
.text:0040AEEB                 mov     ecx, [esp+8FCh+arg_4]
.text:0040AEF2                 shr     eax, 1Fh
.text:0040AEF5                 dec     eax
.text:0040AEF6                 and     edx, eax
.text:0040AEF8                 mov     [ecx+40h], edx
.text:0040AEFB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040AEFE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040AF02                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040AF0A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040AF12                 call    sub_411040
.text:0040AF17                 lea     ebx, [eax+eax*4]
.text:0040AF1A                 mov     esi, [esp+8FCh+arg_4]
.text:0040AF21                 lea     edx, [ebx+ebx*4]
.text:0040AF24                 shl     edx, 2
.text:0040AF27                 mov     eax, edi
.text:0040AF29                 mov     ecx, edx
.text:0040AF2B                 mov     dword ptr [esi+50h], 200h
.text:0040AF32                 shr     ecx, 1Fh
.text:0040AF35                 dec     ecx
.text:0040AF36                 and     ecx, edx
.text:0040AF38                 test    ebp, ebp
.text:0040AF3A                 mov     edx, ebp
.text:0040AF3C                 mov     [esi+44h], ecx
.text:0040AF3F                 js      short loc_40AF91
.text:0040AF41
.text:0040AF41 loc_40AF41:                             ; CODE XREF: sub_40ABB0+3E9↓j
.text:0040AF41                 xor     esi, esi
.text:0040AF43                 mov     ebp, edi
.text:0040AF45                 mov     ecx, eax
.text:0040AF47                 shrd    ecx, edx, 9
.text:0040AF4B                 mov     ebx, edx
.text:0040AF4D                 and     ebp, 1FFh
.text:0040AF53                 mov     eax, esi
.text:0040AF55                 sar     ebx, 9
.text:0040AF58                 or      eax, ebp
.text:0040AF5A                 jz      short loc_40AF62
.text:0040AF5C                 add     ecx, 1
.text:0040AF5F                 adc     ebx, 0
.text:0040AF62
.text:0040AF62 loc_40AF62:                             ; CODE XREF: sub_40ABB0+3AA↑j
.text:0040AF62                 mov     edx, [esp+8FCh+arg_4]
.text:0040AF69                 mov     [edx+5Ch], ebx
.text:0040AF6C                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040AF73                 mov     [edx+58h], ecx
.text:0040AF76                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040AF7A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040AF7D                 call    sub_409DD0
.text:0040AF82                 xor     edx, edx
.text:0040AF84
.text:0040AF84 loc_40AF84:                             ; CODE XREF: sub_40ABB0+43↑j
.text:0040AF84                 add     esp, 8ECh
.text:0040AF8A                 mov     eax, edx
.text:0040AF8C                 pop     ebx
.text:0040AF8D                 pop     esi
.text:0040AF8E                 pop     edi
.text:0040AF8F                 pop     ebp
.text:0040AF90                 retn
.text:0040AF91 ; ---------------------------------------------------------------------------
.text:0040AF91
.text:0040AF91 loc_40AF91:                             ; CODE XREF: sub_40ABB0+38F↑j
.text:0040AF91                 add     eax, 1FFh
.text:0040AF96                 adc     edx, 0
.text:0040AF99                 jmp     short loc_40AF41
.text:0040AF99 ; ---------------------------------------------------------------------------
.text:0040AF9B                 align 10h
.text:0040AFA0
.text:0040AFA0 loc_40AFA0:                             ; CODE XREF: sub_40ABB0+CA↑j
.text:0040AFA0                 mov     eax, [esp+8FCh+lpFileName]
.text:0040AFA7                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040AFAA                 call    sub_409780
.text:0040AFAF                 mov     [esp+8FCh+var_34], eax
.text:0040AFB6                 jmp     loc_40AC8C
.text:0040AFB6 sub_40ABB0      endp
.text:0040AFB6
.text:0040AFB6 ; ---------------------------------------------------------------------------
.text:0040AFBB                 align 10h
.text:0040AFC0 ; START OF FUNCTION CHUNK FOR sub_40ECA0
.text:0040AFC0
.text:0040AFC0 loc_40AFC0:                             ; CODE XREF: sub_40ECA0+26↓j
.text:0040AFC0                 cld
.text:0040AFC1                 sub     esp, 2Ch
.text:0040AFC4                 xor     eax, eax
.text:0040AFC6                 mov     [esp+2Ch+var_10], ebx
.text:0040AFCA                 mov     ecx, 18h
.text:0040AFCF                 mov     ebx, [esp+2Ch+arg_0]
.text:0040AFD3                 mov     [esp+2Ch+var_C], esi
.text:0040AFD7                 mov     esi, [esp+2Ch+arg_4]
.text:0040AFDB                 test    ebx, ebx
.text:0040AFDD                 mov     [esp+2Ch+var_8], edi
.text:0040AFE1                 mov     edi, esi
.text:0040AFE3                 mov     [esp+2Ch+var_4], ebp
.text:0040AFE7                 rep stosd
.text:0040AFE9                 jz      short loc_40AFF0
.text:0040AFEB                 cmp     byte ptr [ebx], 0
.text:0040AFEE                 jnz     short loc_40B008
.text:0040AFF0
.text:0040AFF0 loc_40AFF0:                             ; CODE XREF: sub_40ECA0-3CB7↑j
.text:0040AFF0                 xor     edx, edx
.text:0040AFF2
.text:0040AFF2 loc_40AFF2:                             ; CODE XREF: sub_40ECA0-3C81↓j
.text:0040AFF2                                         ; sub_40ECA0-3BD8↓j
.text:0040AFF2                 mov     ebx, [esp+2Ch+var_10]
.text:0040AFF6                 mov     eax, edx
.text:0040AFF8                 mov     esi, [esp+2Ch+var_C]
.text:0040AFFC                 mov     edi, [esp+2Ch+var_8]
.text:0040B000                 mov     ebp, [esp+2Ch+var_4]
.text:0040B004                 add     esp, 2Ch
.text:0040B007                 retn
.text:0040B008 ; ---------------------------------------------------------------------------
.text:0040B008
.text:0040B008 loc_40B008:                             ; CODE XREF: sub_40ECA0-3CB2↑j
.text:0040B008                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040B010                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040B013                 call    sub_40CFA0
.text:0040B018                 test    eax, eax
.text:0040B01A                 mov     edx, 0FFFFFFFFh
.text:0040B01F                 jnz     short loc_40AFF2
.text:0040B021                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040B024                 call    sub_40CE50
.text:0040B029                 mov     [esp+2Ch+lpFileName], eax
.text:0040B02C                 call    sub_40B550
.text:0040B031                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040B034                 mov     ebp, eax
.text:0040B036                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040B03E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040B046                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040B04E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040B056                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040B05E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040B066                 call    CreateFileA
.text:0040B06B                 sub     esp, 1Ch
.text:0040B06E                 mov     ebx, eax
.text:0040B070                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B074                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040B077                 call    sub_409900
.text:0040B07C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040B07F                 mov     edi, eax
.text:0040B081                 call    CloseHandle
.text:0040B086                 sub     esp, 4
.text:0040B089                 cmp     edi, 0FFFFFFFFh
.text:0040B08C                 jz      short loc_40B0EA
.text:0040B08E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B092                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040B095                 call    sub_409DD0
.text:0040B09A
.text:0040B09A loc_40B09A:                             ; CODE XREF: sub_40ECA0-3BA8↓j
.text:0040B09A                 mov     edx, [esi]
.text:0040B09C                 and     edx, 0F000h
.text:0040B0A2                 cmp     edx, 4000h
.text:0040B0A8                 jz      short loc_40B0DD
.text:0040B0AA
.text:0040B0AA loc_40B0AA:                             ; CODE XREF: sub_40ECA0-3BB8↓j
.text:0040B0AA                 cmp     edi, 0FFFFFFFFh
.text:0040B0AD                 jz      short loc_40B0CD
.text:0040B0AF
.text:0040B0AF loc_40B0AF:                             ; CODE XREF: sub_40ECA0-3BC5↓j
.text:0040B0AF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040B0B6                 call    SetErrorMode
.text:0040B0BB                 sub     esp, 4
.text:0040B0BE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040B0C1                 call    free
.text:0040B0C6                 mov     edx, edi
.text:0040B0C8                 jmp     loc_40AFF2
.text:0040B0CD ; ---------------------------------------------------------------------------
.text:0040B0CD
.text:0040B0CD loc_40B0CD:                             ; CODE XREF: sub_40ECA0-3BF3↑j
.text:0040B0CD                 call    sub_40CE00
.text:0040B0D2                 mov     esi, eax
.text:0040B0D4                 call    _errno
.text:0040B0D9                 mov     [eax], esi
.text:0040B0DB                 jmp     short loc_40B0AF
.text:0040B0DD ; ---------------------------------------------------------------------------
.text:0040B0DD
.text:0040B0DD loc_40B0DD:                             ; CODE XREF: sub_40ECA0-3BF8↑j
.text:0040B0DD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040B0E0                 call    sub_409780
.text:0040B0E5                 mov     [esi+18h], eax
.text:0040B0E8                 jmp     short loc_40B0AA
.text:0040B0EA ; ---------------------------------------------------------------------------
.text:0040B0EA
.text:0040B0EA loc_40B0EA:                             ; CODE XREF: sub_40ECA0-3C14↑j
.text:0040B0EA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040B0EE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040B0F1                 call    sub_40ABB0
.text:0040B0F6                 mov     edi, eax
.text:0040B0F8                 jmp     short loc_40B09A
.text:0040B0F8 ; END OF FUNCTION CHUNK FOR sub_40ECA0
.text:0040B0F8 ; ---------------------------------------------------------------------------
.text:0040B0FA                 align 10h
.text:0040B100
.text:0040B100 ; =============== S U B R O U T I N E =======================================
.text:0040B100
.text:0040B100 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040B100
.text:0040B100 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040B100 _win32_longpath proc near               ; CODE XREF: .text:0040B8C4↓p
.text:0040B100
.text:0040B100 C               = dword ptr -278h
.text:0040B100 lpFindFileData  = dword ptr -274h
.text:0040B100 Destination     = byte ptr -268h
.text:0040B100 var_267         = byte ptr -267h
.text:0040B100 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040B100 lpFileName      = dword ptr  8
.text:0040B100
.text:0040B100                 push    ebp
.text:0040B101                 xor     eax, eax
.text:0040B103                 push    edi
.text:0040B104                 push    esi
.text:0040B105                 push    ebx
.text:0040B106                 sub     esp, 26Ch
.text:0040B10C                 mov     esi, [esp+278h+lpFileName]
.text:0040B113                 lea     ebp, [esp+278h+Destination]
.text:0040B117                 test    esi, esi
.text:0040B119                 jz      loc_40B277
.text:0040B11F                 movsx   edx, byte ptr [esi]
.text:0040B122                 mov     [esp+278h+C], edx ; C
.text:0040B125                 call    isalpha
.text:0040B12A                 test    eax, eax
.text:0040B12C                 jz      short loc_40B13F
.text:0040B12E                 mov     eax, [esp+278h+lpFileName]
.text:0040B135                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040B139                 jz      loc_40B47B
.text:0040B13F
.text:0040B13F loc_40B13F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040B13F                 mov     edx, [esp+278h+lpFileName]
.text:0040B146                 movzx   eax, byte ptr [edx]
.text:0040B149                 cmp     al, 2Fh ; '/'
.text:0040B14B                 jz      loc_40B35B
.text:0040B151                 cmp     al, 5Ch ; '\'
.text:0040B153                 jz      loc_40B35B
.text:0040B159
.text:0040B159 loc_40B159:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040B159                                         ; _win32_longpath+2B1↓j ...
.text:0040B159                 mov     [ebp+268h+Destination], 0
.text:0040B15D                 movzx   ebx, byte ptr [esi]
.text:0040B160                 test    bl, bl
.text:0040B162                 jz      loc_40B259
.text:0040B168                 nop
.text:0040B169                 lea     esi, [esi+0]
.text:0040B170
.text:0040B170 loc_40B170:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040B170                 cmp     bl, 2Fh ; '/'
.text:0040B173                 jz      loc_40B310
.text:0040B179                 cmp     bl, 5Ch ; '\'
.text:0040B17C                 jz      loc_40B310
.text:0040B182
.text:0040B182 loc_40B182:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040B182                                         ; _win32_longpath+22C↓j ...
.text:0040B182                 cmp     bl, 2Eh ; '.'
.text:0040B185                 jz      loc_40B2B0
.text:0040B18B
.text:0040B18B loc_40B18B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040B18B                                         ; _win32_longpath+203↓j
.text:0040B18B                 test    bl, bl
.text:0040B18D                 jz      loc_40B259
.text:0040B193                 cmp     bl, 2Fh ; '/'
.text:0040B196                 jz      short loc_40B1B2
.text:0040B198                 cmp     bl, 5Ch ; '\'
.text:0040B19B                 jz      short loc_40B1B2
.text:0040B19D                 lea     esi, [esi+0]
.text:0040B1A0
.text:0040B1A0 loc_40B1A0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040B1A0                 inc     esi
.text:0040B1A1                 movzx   ebx, byte ptr [esi]
.text:0040B1A4                 test    bl, bl
.text:0040B1A6                 jz      short loc_40B1B2
.text:0040B1A8                 cmp     bl, 2Fh ; '/'
.text:0040B1AB                 jz      short loc_40B1B2
.text:0040B1AD                 cmp     bl, 5Ch ; '\'
.text:0040B1B0                 jnz     short loc_40B1A0
.text:0040B1B2
.text:0040B1B2 loc_40B1B2:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040B1B2                                         ; _win32_longpath+9B↑j ...
.text:0040B1B2                 mov     byte ptr [esi], 0
.text:0040B1B5                 lea     edx, [esp+278h+FindFileData]
.text:0040B1BC                 mov     eax, [esp+278h+lpFileName]
.text:0040B1C3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040B1C7                 mov     [esp+278h+C], eax ; lpFileName
.text:0040B1CA                 call    FindFirstFileA
.text:0040B1CF                 mov     [esi], bl
.text:0040B1D1                 sub     esp, 8
.text:0040B1D4                 mov     edi, eax
.text:0040B1D6                 cmp     eax, 0FFFFFFFFh
.text:0040B1D9                 jz      loc_40B29C
.text:0040B1DF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040B1E6                 mov     ecx, ebx
.text:0040B1E8                 nop
.text:0040B1E9                 lea     esi, [esi+0]
.text:0040B1F0
.text:0040B1F0 loc_40B1F0:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040B1F0                 mov     eax, [ebx]
.text:0040B1F2                 add     ebx, 4
.text:0040B1F5                 lea     edx, [eax-1010101h]
.text:0040B1FB                 not     eax
.text:0040B1FD                 and     edx, eax
.text:0040B1FF                 and     edx, 80808080h
.text:0040B205                 jz      short loc_40B1F0
.text:0040B207                 test    edx, 8080h
.text:0040B20D                 jnz     short loc_40B215
.text:0040B20F                 shr     edx, 10h
.text:0040B212                 add     ebx, 2
.text:0040B215
.text:0040B215 loc_40B215:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040B215                 add     dl, dl
.text:0040B217                 sbb     ebx, 3
.text:0040B21A                 sub     ebx, ecx
.text:0040B21C                 lea     ecx, [esp+278h+Destination]
.text:0040B220                 sub     ecx, ebp
.text:0040B222                 add     ecx, 105h
.text:0040B228                 cmp     ecx, ebx
.text:0040B22A                 jle     short loc_40B282
.text:0040B22C                 mov     [esp+278h+C], ebp ; Destination
.text:0040B22F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040B236                 add     ebp, ebx
.text:0040B238                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040B23C                 call    strcpy
.text:0040B241                 mov     [esp+278h+C], edi ; hFindFile
.text:0040B244                 call    FindClose
.text:0040B249                 sub     esp, 4
.text:0040B24C
.text:0040B24C loc_40B24C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040B24C                 movzx   ecx, byte ptr [esi]
.text:0040B24F                 test    cl, cl
.text:0040B251                 mov     bl, cl
.text:0040B253                 jnz     loc_40B170
.text:0040B259
.text:0040B259 loc_40B259:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040B259                                         ; _win32_longpath+8D↑j
.text:0040B259                 mov     esi, [esp+278h+lpFileName]
.text:0040B260                 lea     ebp, [esp+278h+Destination]
.text:0040B264                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040B268                 mov     [esp+278h+C], esi ; Destination
.text:0040B26B                 call    strcpy
.text:0040B270                 mov     eax, [esp+278h+lpFileName]
.text:0040B277
.text:0040B277 loc_40B277:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040B277                                         ; _win32_longpath+19A↓j
.text:0040B277                 add     esp, 26Ch
.text:0040B27D                 pop     ebx
.text:0040B27E                 pop     esi
.text:0040B27F                 pop     edi
.text:0040B280                 pop     ebp
.text:0040B281                 retn
.text:0040B282 ; ---------------------------------------------------------------------------
.text:0040B282
.text:0040B282 loc_40B282:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040B282                 mov     [esp+278h+C], edi ; hFindFile
.text:0040B285                 call    FindClose
.text:0040B28A                 sub     esp, 4
.text:0040B28D                 call    _errno
.text:0040B292                 mov     dword ptr [eax], 22h ; '"'
.text:0040B298
.text:0040B298 loc_40B298:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040B298                 xor     eax, eax
.text:0040B29A                 jmp     short loc_40B277
.text:0040B29C ; ---------------------------------------------------------------------------
.text:0040B29C
.text:0040B29C loc_40B29C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040B29C                 call    _errno
.text:0040B2A1                 mov     dword ptr [eax], 16h
.text:0040B2A7                 jmp     short loc_40B298
.text:0040B2A7 ; ---------------------------------------------------------------------------
.text:0040B2A9                 align 10h
.text:0040B2B0
.text:0040B2B0 loc_40B2B0:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040B2B0                 movzx   eax, byte ptr [esi+1]
.text:0040B2B4                 test    al, al
.text:0040B2B6                 jnz     short loc_40B2E5
.text:0040B2B8
.text:0040B2B8 loc_40B2B8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040B2B8                                         ; _win32_longpath+1EB↓j ...
.text:0040B2B8                 test    bl, bl
.text:0040B2BA                 jz      short loc_40B2DC
.text:0040B2BC                 cmp     bl, 2Fh ; '/'
.text:0040B2BF                 jz      short loc_40B2DC
.text:0040B2C1                 cmp     bl, 5Ch ; '\'
.text:0040B2C4                 jz      short loc_40B2DC
.text:0040B2C6
.text:0040B2C6 loc_40B2C6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040B2C6                 mov     [ebp+268h+Destination], bl
.text:0040B2C9                 inc     esi
.text:0040B2CA                 inc     ebp
.text:0040B2CB                 movzx   ebx, byte ptr [esi]
.text:0040B2CE                 test    bl, bl
.text:0040B2D0                 jz      short loc_40B2DC
.text:0040B2D2                 cmp     bl, 2Fh ; '/'
.text:0040B2D5                 jz      short loc_40B2DC
.text:0040B2D7                 cmp     bl, 5Ch ; '\'
.text:0040B2DA                 jnz     short loc_40B2C6
.text:0040B2DC
.text:0040B2DC loc_40B2DC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040B2DC                                         ; _win32_longpath+1BF↑j ...
.text:0040B2DC                 mov     [ebp+268h+Destination], 0
.text:0040B2E0                 jmp     loc_40B24C
.text:0040B2E5 ; ---------------------------------------------------------------------------
.text:0040B2E5
.text:0040B2E5 loc_40B2E5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040B2E5                 cmp     al, 2Fh ; '/'
.text:0040B2E7                 jz      short loc_40B2B8
.text:0040B2E9                 cmp     al, 5Ch ; '\'
.text:0040B2EB                 jz      short loc_40B2B8
.text:0040B2ED                 cmp     al, 2Eh ; '.'
.text:0040B2EF                 jnz     loc_40B18B
.text:0040B2F5                 movzx   eax, byte ptr [esi+2]
.text:0040B2F9                 test    al, al
.text:0040B2FB                 jz      short loc_40B2B8
.text:0040B2FD                 cmp     al, 2Fh ; '/'
.text:0040B2FF                 jz      short loc_40B2B8
.text:0040B301                 cmp     al, 5Ch ; '\'
.text:0040B303                 jnz     loc_40B18B
.text:0040B309                 jmp     short loc_40B2B8
.text:0040B309 ; ---------------------------------------------------------------------------
.text:0040B30B                 align 10h
.text:0040B310
.text:0040B310 loc_40B310:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040B310                                         ; _win32_longpath+7C↑j
.text:0040B310                 mov     [ebp+268h+Destination], bl
.text:0040B313                 inc     esi
.text:0040B314                 inc     ebp
.text:0040B315                 mov     [ebp+268h+Destination], 0
.text:0040B319                 movzx   ebx, byte ptr [esi]
.text:0040B31C                 test    bl, bl
.text:0040B31E                 jz      loc_40B182
.text:0040B324                 cmp     bl, 2Fh ; '/'
.text:0040B327                 jz      short loc_40B340
.text:0040B329                 cmp     bl, 5Ch ; '\'
.text:0040B32C                 jnz     loc_40B182
.text:0040B332                 lea     esi, [esi+0]
.text:0040B339                 lea     edi, [edi+0]
.text:0040B340
.text:0040B340 loc_40B340:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040B340                                         ; _win32_longpath+24F↓j ...
.text:0040B340                 inc     esi
.text:0040B341                 movzx   ebx, byte ptr [esi]
.text:0040B344                 test    bl, bl
.text:0040B346                 jz      loc_40B182
.text:0040B34C                 cmp     bl, 2Fh ; '/'
.text:0040B34F                 jz      short loc_40B340
.text:0040B351                 cmp     bl, 5Ch ; '\'
.text:0040B354                 jz      short loc_40B340
.text:0040B356                 jmp     loc_40B182
.text:0040B35B ; ---------------------------------------------------------------------------
.text:0040B35B
.text:0040B35B loc_40B35B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040B35B                                         ; _win32_longpath+53↑j
.text:0040B35B                 mov     edi, [esp+278h+lpFileName]
.text:0040B362                 movzx   edx, byte ptr [edi+1]
.text:0040B366                 cmp     dl, 2Fh ; '/'
.text:0040B369                 jz      short loc_40B374
.text:0040B36B                 cmp     dl, 5Ch ; '\'
.text:0040B36E                 jnz     loc_40B159
.text:0040B374
.text:0040B374 loc_40B374:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040B374                 mov     esi, [esp+278h+lpFileName]
.text:0040B37B                 mov     [ebp+268h+Destination], al
.text:0040B37E                 mov     ecx, [esp+278h+lpFileName]
.text:0040B385                 inc     ebp
.text:0040B386                 add     esi, 2
.text:0040B389                 movzx   ebx, byte ptr [ecx+1]
.text:0040B38D                 mov     [ebp+268h+Destination], bl
.text:0040B390                 inc     ebp
.text:0040B391                 movzx   eax, byte ptr [ecx+2]
.text:0040B395                 test    al, al
.text:0040B397                 jz      loc_40B473
.text:0040B39D                 cmp     al, 2Fh ; '/'
.text:0040B39F                 jz      loc_40B458
.text:0040B3A5                 cmp     al, 5Ch ; '\'
.text:0040B3A7                 mov     bl, al
.text:0040B3A9                 jz      loc_40B458
.text:0040B3AF
.text:0040B3AF loc_40B3AF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040B3AF                                         ; _win32_longpath+376↓j
.text:0040B3AF                 test    bl, bl
.text:0040B3B1                 jz      loc_40B159
.text:0040B3B7                 cmp     bl, 2Fh ; '/'
.text:0040B3BA                 jz      short loc_40B3DB
.text:0040B3BC                 cmp     bl, 5Ch ; '\'
.text:0040B3BF                 jz      short loc_40B3DB
.text:0040B3C1
.text:0040B3C1 loc_40B3C1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040B3C1                 mov     [ebp+268h+Destination], bl
.text:0040B3C4                 inc     esi
.text:0040B3C5                 inc     ebp
.text:0040B3C6                 movzx   ebx, byte ptr [esi]
.text:0040B3C9                 test    bl, bl
.text:0040B3CB                 jz      loc_40B159
.text:0040B3D1                 cmp     bl, 2Fh ; '/'
.text:0040B3D4                 jz      short loc_40B3DB
.text:0040B3D6                 cmp     bl, 5Ch ; '\'
.text:0040B3D9                 jnz     short loc_40B3C1
.text:0040B3DB
.text:0040B3DB loc_40B3DB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040B3DB                                         ; _win32_longpath+2BF↑j ...
.text:0040B3DB                 test    bl, bl
.text:0040B3DD                 jz      loc_40B159
.text:0040B3E3                 mov     [ebp+268h+Destination], bl
.text:0040B3E6                 inc     esi
.text:0040B3E7                 inc     ebp
.text:0040B3E8                 movzx   ebx, byte ptr [esi]
.text:0040B3EB                 test    bl, bl
.text:0040B3ED                 jz      loc_40B159
.text:0040B3F3                 cmp     bl, 2Fh ; '/'
.text:0040B3F6                 jz      short loc_40B440
.text:0040B3F8                 cmp     bl, 5Ch ; '\'
.text:0040B3FB                 jz      short loc_40B440
.text:0040B3FD
.text:0040B3FD loc_40B3FD:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040B3FD                 test    bl, bl
.text:0040B3FF                 jz      loc_40B159
.text:0040B405                 cmp     bl, 2Fh ; '/'
.text:0040B408                 jz      loc_40B159
.text:0040B40E                 cmp     bl, 5Ch ; '\'
.text:0040B411                 jz      loc_40B159
.text:0040B417
.text:0040B417 loc_40B417:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040B417                 mov     [ebp+268h+Destination], bl
.text:0040B41A                 inc     esi
.text:0040B41B                 inc     ebp
.text:0040B41C                 movzx   ebx, byte ptr [esi]
.text:0040B41F                 test    bl, bl
.text:0040B421                 jz      loc_40B159
.text:0040B427                 cmp     bl, 2Fh ; '/'
.text:0040B42A                 jz      loc_40B159
.text:0040B430                 cmp     bl, 5Ch ; '\'
.text:0040B433                 jnz     short loc_40B417
.text:0040B435                 jmp     loc_40B159
.text:0040B435 ; ---------------------------------------------------------------------------
.text:0040B43A                 align 10h
.text:0040B440
.text:0040B440 loc_40B440:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040B440                                         ; _win32_longpath+2FB↑j ...
.text:0040B440                 inc     esi
.text:0040B441                 movzx   ebx, byte ptr [esi]
.text:0040B444                 test    bl, bl
.text:0040B446                 jz      loc_40B159
.text:0040B44C                 cmp     bl, 2Fh ; '/'
.text:0040B44F                 jz      short loc_40B440
.text:0040B451                 cmp     bl, 5Ch ; '\'
.text:0040B454                 jz      short loc_40B440
.text:0040B456                 jmp     short loc_40B3FD
.text:0040B458 ; ---------------------------------------------------------------------------
.text:0040B458
.text:0040B458 loc_40B458:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040B458                                         ; _win32_longpath+2A9↑j ...
.text:0040B458                 inc     esi
.text:0040B459                 movzx   ebx, byte ptr [esi]
.text:0040B45C                 test    bl, bl
.text:0040B45E                 jz      loc_40B159
.text:0040B464                 cmp     bl, 2Fh ; '/'
.text:0040B467                 jz      short loc_40B458
.text:0040B469                 cmp     bl, 5Ch ; '\'
.text:0040B46C                 jz      short loc_40B458
.text:0040B46E                 jmp     loc_40B3AF
.text:0040B473 ; ---------------------------------------------------------------------------
.text:0040B473
.text:0040B473 loc_40B473:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040B473                 movzx   ebx, byte ptr [esi]
.text:0040B476                 jmp     loc_40B3AF
.text:0040B47B ; ---------------------------------------------------------------------------
.text:0040B47B
.text:0040B47B loc_40B47B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040B47B                 movzx   ecx, byte ptr [eax]
.text:0040B47E                 mov     esi, eax
.text:0040B480                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040B485                 add     esi, 2
.text:0040B488                 lea     ebp, [esp+12h]
.text:0040B48C                 mov     [esp+278h+Destination], cl
.text:0040B490                 jmp     loc_40B159
.text:0040B490 _win32_longpath endp
.text:0040B490
.text:0040B490 ; ---------------------------------------------------------------------------
.text:0040B495                 align 10h
.text:0040B4A0                 sub     esp, 0Ch
.text:0040B4A3                 mov     edx, [esp+10h]
.text:0040B4A7                 mov     dword ptr [esp+4], 0
.text:0040B4AF                 mov     [esp], edx
.text:0040B4B2                 call    sub_40CFA0
.text:0040B4B7                 inc     eax
.text:0040B4B8                 setnz   dl
.text:0040B4BB                 add     esp, 0Ch
.text:0040B4BE                 movzx   eax, dl
.text:0040B4C1                 retn
.text:0040B4C1 ; ---------------------------------------------------------------------------
.text:0040B4C2                 align 10h
.text:0040B4D0
.text:0040B4D0 ; =============== S U B R O U T I N E =======================================
.text:0040B4D0
.text:0040B4D0
.text:0040B4D0 sub_40B4D0      proc near               ; CODE XREF: sub_40CE70+AA↓p
.text:0040B4D0                                         ; sub_40EBC0+B4↓p
.text:0040B4D0
.text:0040B4D0 arg_0           = dword ptr  4
.text:0040B4D0
.text:0040B4D0                 mov     ecx, [esp+arg_0]
.text:0040B4D4                 mov     edx, ecx
.text:0040B4D6                 movzx   eax, byte ptr [ecx]
.text:0040B4D9                 test    al, al
.text:0040B4DB                 jz      short loc_40B4EC
.text:0040B4DD                 lea     esi, [esi+0]
.text:0040B4E0
.text:0040B4E0 loc_40B4E0:                             ; CODE XREF: sub_40B4D0+1A↓j
.text:0040B4E0                 cmp     al, 5Ch ; '\'
.text:0040B4E2                 jz      short loc_40B4F0
.text:0040B4E4
.text:0040B4E4 loc_40B4E4:                             ; CODE XREF: sub_40B4D0+23↓j
.text:0040B4E4                 inc     edx
.text:0040B4E5                 movzx   eax, byte ptr [edx]
.text:0040B4E8                 test    al, al
.text:0040B4EA                 jnz     short loc_40B4E0
.text:0040B4EC
.text:0040B4EC loc_40B4EC:                             ; CODE XREF: sub_40B4D0+B↑j
.text:0040B4EC                 mov     eax, ecx
.text:0040B4EE                 retn
.text:0040B4EE ; ---------------------------------------------------------------------------
.text:0040B4EF                 align 10h
.text:0040B4F0
.text:0040B4F0 loc_40B4F0:                             ; CODE XREF: sub_40B4D0+12↑j
.text:0040B4F0                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B4F3                 jmp     short loc_40B4E4
.text:0040B4F3 sub_40B4D0      endp
.text:0040B4F3
.text:0040B4F3 ; ---------------------------------------------------------------------------
.text:0040B4F5                 align 10h
.text:0040B500                 push    ebx
.text:0040B501                 sub     esp, 8
.text:0040B504                 mov     ebx, [esp+14h]
.text:0040B508                 mov     edx, [esp+10h]
.text:0040B50C                 mov     [esp], ebx
.text:0040B50F                 mov     [esp+4], edx
.text:0040B513                 call    strcpy
.text:0040B518                 movzx   eax, byte ptr [ebx]
.text:0040B51B                 mov     edx, ebx
.text:0040B51D                 test    al, al
.text:0040B51F                 jz      short loc_40B53C
.text:0040B521                 jmp     short loc_40B530
.text:0040B521 ; ---------------------------------------------------------------------------
.text:0040B523                 align 10h
.text:0040B530
.text:0040B530 loc_40B530:                             ; CODE XREF: .text:0040B521↑j
.text:0040B530                                         ; .text:0040B53A↓j
.text:0040B530                 cmp     al, 5Ch ; '\'
.text:0040B532                 jz      short loc_40B543
.text:0040B534
.text:0040B534 loc_40B534:                             ; CODE XREF: .text:0040B546↓j
.text:0040B534                 inc     edx
.text:0040B535                 movzx   eax, byte ptr [edx]
.text:0040B538                 test    al, al
.text:0040B53A                 jnz     short loc_40B530
.text:0040B53C
.text:0040B53C loc_40B53C:                             ; CODE XREF: .text:0040B51F↑j
.text:0040B53C                 add     esp, 8
.text:0040B53F                 xor     eax, eax
.text:0040B541                 pop     ebx
.text:0040B542                 retn
.text:0040B543 ; ---------------------------------------------------------------------------
.text:0040B543
.text:0040B543 loc_40B543:                             ; CODE XREF: .text:0040B532↑j
.text:0040B543                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B546                 jmp     short loc_40B534
.text:0040B546 ; ---------------------------------------------------------------------------
.text:0040B548                 align 10h
.text:0040B550
.text:0040B550 ; =============== S U B R O U T I N E =======================================
.text:0040B550
.text:0040B550
.text:0040B550 sub_40B550      proc near               ; CODE XREF: sub_409DD0+16↑p
.text:0040B550                                         ; sub_40A2D0+1F↑p ...
.text:0040B550
.text:0040B550 arg_0           = dword ptr  4
.text:0040B550
.text:0040B550                 mov     ecx, [esp+arg_0]
.text:0040B554                 mov     edx, ecx
.text:0040B556                 movzx   eax, byte ptr [ecx]
.text:0040B559                 test    al, al
.text:0040B55B                 jz      short loc_40B56C
.text:0040B55D                 lea     esi, [esi+0]
.text:0040B560
.text:0040B560 loc_40B560:                             ; CODE XREF: sub_40B550+1A↓j
.text:0040B560                 cmp     al, 2Fh ; '/'
.text:0040B562                 jz      short loc_40B570
.text:0040B564
.text:0040B564 loc_40B564:                             ; CODE XREF: sub_40B550+23↓j
.text:0040B564                 inc     edx
.text:0040B565                 movzx   eax, byte ptr [edx]
.text:0040B568                 test    al, al
.text:0040B56A                 jnz     short loc_40B560
.text:0040B56C
.text:0040B56C loc_40B56C:                             ; CODE XREF: sub_40B550+B↑j
.text:0040B56C                 mov     eax, ecx
.text:0040B56E                 retn
.text:0040B56E ; ---------------------------------------------------------------------------
.text:0040B56F                 align 10h
.text:0040B570
.text:0040B570 loc_40B570:                             ; CODE XREF: sub_40B550+12↑j
.text:0040B570                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B573                 jmp     short loc_40B564
.text:0040B573 sub_40B550      endp
.text:0040B573
.text:0040B573 ; ---------------------------------------------------------------------------
.text:0040B575                 align 10h
.text:0040B580                 push    ebx
.text:0040B581                 sub     esp, 8
.text:0040B584                 mov     ebx, [esp+14h]
.text:0040B588                 mov     edx, [esp+10h]
.text:0040B58C                 mov     [esp], ebx
.text:0040B58F                 mov     [esp+4], edx
.text:0040B593                 call    strcpy
.text:0040B598                 movzx   eax, byte ptr [ebx]
.text:0040B59B                 mov     edx, ebx
.text:0040B59D                 test    al, al
.text:0040B59F                 jz      short loc_40B5BC
.text:0040B5A1                 jmp     short loc_40B5B0
.text:0040B5A1 ; ---------------------------------------------------------------------------
.text:0040B5A3                 align 10h
.text:0040B5B0
.text:0040B5B0 loc_40B5B0:                             ; CODE XREF: .text:0040B5A1↑j
.text:0040B5B0                                         ; .text:0040B5BA↓j
.text:0040B5B0                 cmp     al, 2Fh ; '/'
.text:0040B5B2                 jz      short loc_40B5C3
.text:0040B5B4
.text:0040B5B4 loc_40B5B4:                             ; CODE XREF: .text:0040B5C6↓j
.text:0040B5B4                 inc     edx
.text:0040B5B5                 movzx   eax, byte ptr [edx]
.text:0040B5B8                 test    al, al
.text:0040B5BA                 jnz     short loc_40B5B0
.text:0040B5BC
.text:0040B5BC loc_40B5BC:                             ; CODE XREF: .text:0040B59F↑j
.text:0040B5BC                 add     esp, 8
.text:0040B5BF                 xor     eax, eax
.text:0040B5C1                 pop     ebx
.text:0040B5C2                 retn
.text:0040B5C3 ; ---------------------------------------------------------------------------
.text:0040B5C3
.text:0040B5C3 loc_40B5C3:                             ; CODE XREF: .text:0040B5B2↑j
.text:0040B5C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B5C6                 jmp     short loc_40B5B4
.text:0040B5C6 ; ---------------------------------------------------------------------------
.text:0040B5C8                 align 10h
.text:0040B5D0                 push    ebx
.text:0040B5D1                 sub     esp, 8
.text:0040B5D4                 mov     ebx, [esp+14h]
.text:0040B5D8                 mov     edx, [esp+10h]
.text:0040B5DC                 mov     [esp+4], ebx
.text:0040B5E0                 mov     [esp], edx
.text:0040B5E3                 call    sub_40CE20
.text:0040B5E8                 movzx   eax, byte ptr [ebx]
.text:0040B5EB                 mov     edx, ebx
.text:0040B5ED                 test    al, al
.text:0040B5EF                 jz      short loc_40B60C
.text:0040B5F1                 jmp     short loc_40B600
.text:0040B5F1 ; ---------------------------------------------------------------------------
.text:0040B5F3                 align 10h
.text:0040B600
.text:0040B600 loc_40B600:                             ; CODE XREF: .text:0040B5F1↑j
.text:0040B600                                         ; .text:0040B60A↓j
.text:0040B600                 cmp     al, 2Fh ; '/'
.text:0040B602                 jz      short loc_40B613
.text:0040B604
.text:0040B604 loc_40B604:                             ; CODE XREF: .text:0040B616↓j
.text:0040B604                 inc     edx
.text:0040B605                 movzx   eax, byte ptr [edx]
.text:0040B608                 test    al, al
.text:0040B60A                 jnz     short loc_40B600
.text:0040B60C
.text:0040B60C loc_40B60C:                             ; CODE XREF: .text:0040B5EF↑j
.text:0040B60C                 add     esp, 8
.text:0040B60F                 xor     eax, eax
.text:0040B611                 pop     ebx
.text:0040B612                 retn
.text:0040B613 ; ---------------------------------------------------------------------------
.text:0040B613
.text:0040B613 loc_40B613:                             ; CODE XREF: .text:0040B602↑j
.text:0040B613                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040B616                 jmp     short loc_40B604
.text:0040B616 ; ---------------------------------------------------------------------------
.text:0040B618                 align 10h
.text:0040B620                 push    ebx
.text:0040B621                 sub     esp, 8
.text:0040B624                 mov     ebx, [esp+14h]
.text:0040B628                 mov     edx, [esp+10h]
.text:0040B62C                 mov     [esp], ebx
.text:0040B62F                 mov     [esp+4], edx
.text:0040B633                 call    sub_40CE20
.text:0040B638                 movzx   eax, byte ptr [ebx]
.text:0040B63B                 mov     edx, ebx
.text:0040B63D                 test    al, al
.text:0040B63F                 jz      short loc_40B65C
.text:0040B641                 jmp     short loc_40B650
.text:0040B641 ; ---------------------------------------------------------------------------
.text:0040B643                 align 10h
.text:0040B650
.text:0040B650 loc_40B650:                             ; CODE XREF: .text:0040B641↑j
.text:0040B650                                         ; .text:0040B65A↓j
.text:0040B650                 cmp     al, 5Ch ; '\'
.text:0040B652                 jz      short loc_40B661
.text:0040B654
.text:0040B654 loc_40B654:                             ; CODE XREF: .text:0040B664↓j
.text:0040B654                 inc     edx
.text:0040B655                 movzx   eax, byte ptr [edx]
.text:0040B658                 test    al, al
.text:0040B65A                 jnz     short loc_40B650
.text:0040B65C
.text:0040B65C loc_40B65C:                             ; CODE XREF: .text:0040B63F↑j
.text:0040B65C                 add     esp, 8
.text:0040B65F                 pop     ebx
.text:0040B660                 retn
.text:0040B661 ; ---------------------------------------------------------------------------
.text:0040B661
.text:0040B661 loc_40B661:                             ; CODE XREF: .text:0040B652↑j
.text:0040B661                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B664                 jmp     short loc_40B654
.text:0040B664 ; ---------------------------------------------------------------------------
.text:0040B666                 align 10h
.text:0040B670
.text:0040B670 ; =============== S U B R O U T I N E =======================================
.text:0040B670
.text:0040B670
.text:0040B670 ; int __cdecl sub_40B670(LPSTR)
.text:0040B670 sub_40B670      proc near               ; CODE XREF: .text:0040B6FE↓p
.text:0040B670                                         ; .text:0040B73E↓p ...
.text:0040B670
.text:0040B670 hModule         = dword ptr -1Ch
.text:0040B670 lpFilename      = dword ptr -18h
.text:0040B670 nSize           = dword ptr -14h
.text:0040B670 arg_0           = dword ptr  4
.text:0040B670
.text:0040B670                 push    esi
.text:0040B671                 push    ebx
.text:0040B672                 sub     esp, 14h
.text:0040B675                 mov     esi, [esp+1Ch+arg_0]
.text:0040B679                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040B681                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040B688                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040B68C                 call    GetModuleFileNameA
.text:0040B691                 sub     esp, 0Ch
.text:0040B694                 test    eax, eax
.text:0040B696                 jz      short loc_40B6D8
.text:0040B698                 cmp     eax, 104h
.text:0040B69D                 jg      short loc_40B6C9
.text:0040B69F
.text:0040B69F loc_40B69F:                             ; CODE XREF: sub_40B670+66↓j
.text:0040B69F                                         ; sub_40B670+78↓j
.text:0040B69F                 movzx   eax, byte ptr [esi]
.text:0040B6A2                 mov     edx, esi
.text:0040B6A4                 test    al, al
.text:0040B6A6                 jz      short loc_40B6BC
.text:0040B6A8                 nop
.text:0040B6A9                 lea     esi, [esi+0]
.text:0040B6B0
.text:0040B6B0 loc_40B6B0:                             ; CODE XREF: sub_40B670+4A↓j
.text:0040B6B0                 cmp     al, 5Ch ; '\'
.text:0040B6B2                 jz      short loc_40B6C4
.text:0040B6B4
.text:0040B6B4 loc_40B6B4:                             ; CODE XREF: sub_40B670+57↓j
.text:0040B6B4                 inc     edx
.text:0040B6B5                 movzx   eax, byte ptr [edx]
.text:0040B6B8                 test    al, al
.text:0040B6BA                 jnz     short loc_40B6B0
.text:0040B6BC
.text:0040B6BC loc_40B6BC:                             ; CODE XREF: sub_40B670+36↑j
.text:0040B6BC                 add     esp, 14h
.text:0040B6BF                 mov     eax, esi
.text:0040B6C1                 pop     ebx
.text:0040B6C2                 pop     esi
.text:0040B6C3                 retn
.text:0040B6C4 ; ---------------------------------------------------------------------------
.text:0040B6C4
.text:0040B6C4 loc_40B6C4:                             ; CODE XREF: sub_40B670+42↑j
.text:0040B6C4                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040B6C7                 jmp     short loc_40B6B4
.text:0040B6C9 ; ---------------------------------------------------------------------------
.text:0040B6C9
.text:0040B6C9 loc_40B6C9:                             ; CODE XREF: sub_40B670+2D↑j
.text:0040B6C9                 call    _errno
.text:0040B6CE                 mov     dword ptr [eax], 26h ; '&'
.text:0040B6D4                 xor     esi, esi
.text:0040B6D6                 jmp     short loc_40B69F
.text:0040B6D8 ; ---------------------------------------------------------------------------
.text:0040B6D8
.text:0040B6D8 loc_40B6D8:                             ; CODE XREF: sub_40B670+26↑j
.text:0040B6D8                 call    sub_40CE00
.text:0040B6DD                 mov     ebx, eax
.text:0040B6DF                 xor     esi, esi
.text:0040B6E1                 call    _errno
.text:0040B6E6                 mov     [eax], ebx
.text:0040B6E8                 jmp     short loc_40B69F
.text:0040B6E8 sub_40B670      endp
.text:0040B6E8
.text:0040B6E8 ; ---------------------------------------------------------------------------
.text:0040B6EA                 align 10h
.text:0040B6F0                 sub     esp, 0Ch
.text:0040B6F3                 mov     [esp+8], ebx
.text:0040B6F7                 mov     ebx, [esp+10h]
.text:0040B6FB                 mov     [esp], ebx
.text:0040B6FE                 call    sub_40B670
.text:0040B703                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B70B                 mov     [esp], ebx
.text:0040B70E                 call    strrchr
.text:0040B713                 test    eax, eax
.text:0040B715                 jz      short loc_40B71A
.text:0040B717                 lea     ebx, [eax+1]
.text:0040B71A
.text:0040B71A loc_40B71A:                             ; CODE XREF: .text:0040B715↑j
.text:0040B71A                 mov     eax, ebx
.text:0040B71C                 mov     ebx, [esp+8]
.text:0040B720                 add     esp, 0Ch
.text:0040B723                 retn
.text:0040B723 ; ---------------------------------------------------------------------------
.text:0040B724                 align 10h
.text:0040B730                 sub     esp, 0Ch
.text:0040B733                 mov     [esp+8], ebx
.text:0040B737                 mov     ebx, [esp+10h]
.text:0040B73B                 mov     [esp], ebx
.text:0040B73E                 call    sub_40B670
.text:0040B743                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B74B                 mov     [esp], ebx
.text:0040B74E                 call    strrchr
.text:0040B753                 test    eax, eax
.text:0040B755                 jz      short loc_40B75A
.text:0040B757                 mov     byte ptr [eax], 0
.text:0040B75A
.text:0040B75A loc_40B75A:                             ; CODE XREF: .text:0040B755↑j
.text:0040B75A                 mov     eax, ebx
.text:0040B75C                 mov     ebx, [esp+8]
.text:0040B760                 add     esp, 0Ch
.text:0040B763                 retn
.text:0040B763 ; ---------------------------------------------------------------------------
.text:0040B764                 align 10h
.text:0040B770                 sub     esp, 0Ch
.text:0040B773                 mov     [esp+8], ebx
.text:0040B777                 mov     ebx, [esp+10h]
.text:0040B77B                 mov     [esp], ebx
.text:0040B77E                 call    sub_40B670
.text:0040B783                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B78B                 mov     [esp], ebx
.text:0040B78E                 call    strrchr
.text:0040B793                 test    eax, eax
.text:0040B795                 jz      short loc_40B79A
.text:0040B797                 mov     byte ptr [eax], 0
.text:0040B79A
.text:0040B79A loc_40B79A:                             ; CODE XREF: .text:0040B795↑j
.text:0040B79A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040B7A2                 mov     [esp], ebx
.text:0040B7A5                 call    strrchr
.text:0040B7AA                 test    eax, eax
.text:0040B7AC                 jz      short loc_40B7B1
.text:0040B7AE                 mov     byte ptr [eax], 0
.text:0040B7B1
.text:0040B7B1 loc_40B7B1:                             ; CODE XREF: .text:0040B7AC↑j
.text:0040B7B1                 mov     eax, ebx
.text:0040B7B3                 mov     ebx, [esp+8]
.text:0040B7B7                 add     esp, 0Ch
.text:0040B7BA                 retn
.text:0040B7BA ; ---------------------------------------------------------------------------
.text:0040B7BB                 align 10h
.text:0040B7C0                 sub     esp, 1Ch
.text:0040B7C3                 mov     edx, [esp+20h]
.text:0040B7C7                 mov     [esp+10h], ebx
.text:0040B7CB                 xor     ebx, ebx
.text:0040B7CD                 mov     [esp+14h], esi
.text:0040B7D1                 mov     [esp+18h], edi
.text:0040B7D5                 mov     [esp], edx
.text:0040B7D8                 call    sub_40CE50
.text:0040B7DD                 mov     edx, [esp+24h]
.text:0040B7E1                 mov     edi, eax
.text:0040B7E3                 mov     [esp], edx
.text:0040B7E6                 call    sub_40CE50
.text:0040B7EB                 mov     [esp+4], eax
.text:0040B7EF                 mov     esi, eax
.text:0040B7F1                 mov     [esp], edi
.text:0040B7F4                 call    _stricmp_0
.text:0040B7F9                 mov     [esp], edi
.text:0040B7FC                 test    eax, eax
.text:0040B7FE                 setz    bl
.text:0040B801                 call    free
.text:0040B806                 mov     [esp], esi
.text:0040B809                 call    free
.text:0040B80E                 mov     eax, ebx
.text:0040B810                 mov     esi, [esp+14h]
.text:0040B814                 mov     ebx, [esp+10h]
.text:0040B818                 mov     edi, [esp+18h]
.text:0040B81C                 add     esp, 1Ch
.text:0040B81F                 retn
.text:0040B820 ; ---------------------------------------------------------------------------
.text:0040B820                 xor     eax, eax
.text:0040B822                 retn
.text:0040B822 ; ---------------------------------------------------------------------------
.text:0040B823 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040B857↓o
.text:0040B830 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040B866↓o
.text:0040B840 ; ---------------------------------------------------------------------------
.text:0040B840                 sub     esp, 1Ch
.text:0040B843                 mov     [esp+10h], ebx
.text:0040B847                 mov     ebx, [esp+20h]
.text:0040B84B                 mov     [esp+18h], edi
.text:0040B84F                 mov     edi, [esp+24h]
.text:0040B853                 mov     [esp+14h], esi
.text:0040B857                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040B85E                 call    GetModuleHandleA
.text:0040B863                 sub     esp, 4
.text:0040B866                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040B86E                 mov     [esp], eax
.text:0040B871                 call    GetProcAddress
.text:0040B876                 sub     esp, 8
.text:0040B879                 test    eax, eax
.text:0040B87B                 jz      short loc_40B893
.text:0040B87D                 mov     dword ptr [esp+8], 104h
.text:0040B885                 mov     [esp+4], ebx
.text:0040B889                 mov     [esp], edi
.text:0040B88C                 call    eax
.text:0040B88E                 sub     esp, 0Ch
.text:0040B891                 mov     esi, eax
.text:0040B893
.text:0040B893 loc_40B893:                             ; CODE XREF: .text:0040B87B↑j
.text:0040B893                 test    esi, esi
.text:0040B895                 jz      short loc_40B8B0
.text:0040B897
.text:0040B897 loc_40B897:                             ; CODE XREF: .text:0040B8CB↓j
.text:0040B897                 mov     eax, ebx
.text:0040B899                 mov     esi, [esp+14h]
.text:0040B89D                 mov     ebx, [esp+10h]
.text:0040B8A1                 mov     edi, [esp+18h]
.text:0040B8A5                 add     esp, 1Ch
.text:0040B8A8                 retn
.text:0040B8A8 ; ---------------------------------------------------------------------------
.text:0040B8A9                 align 10h
.text:0040B8B0
.text:0040B8B0 loc_40B8B0:                             ; CODE XREF: .text:0040B895↑j
.text:0040B8B0                 call    sub_40D8E0
.text:0040B8B5                 mov     [esp], ebx
.text:0040B8B8                 mov     [esp+4], edi
.text:0040B8BC                 call    strcpy
.text:0040B8C1                 mov     [esp], ebx
.text:0040B8C4                 call    _win32_longpath
.text:0040B8C9                 mov     ebx, eax
.text:0040B8CB                 jmp     short loc_40B897
.text:0040B8CB ; ---------------------------------------------------------------------------
.text:0040B8CD                 align 10h
.text:0040B8D0                 sub     esp, 1Ch
.text:0040B8D3                 mov     [esp+18h], edi
.text:0040B8D7                 mov     edi, [esp+20h]
.text:0040B8DB                 mov     [esp+10h], ebx
.text:0040B8DF                 mov     [esp+14h], esi
.text:0040B8E3                 mov     dword ptr [esp+8], 0
.text:0040B8EB                 mov     dword ptr [esp+4], 0
.text:0040B8F3                 mov     [esp], edi
.text:0040B8F6                 call    GetShortPathNameA
.text:0040B8FB                 sub     esp, 0Ch
.text:0040B8FE                 mov     ebx, eax
.text:0040B900                 test    eax, eax
.text:0040B902                 jz      short loc_40B950
.text:0040B904                 lea     edx, [eax+1]
.text:0040B907                 mov     [esp], edx
.text:0040B90A                 call    malloc
.text:0040B90F                 test    eax, eax
.text:0040B911                 mov     esi, eax
.text:0040B913                 jz      short loc_40B950
.text:0040B915                 mov     [esp+8], ebx
.text:0040B919                 mov     [esp+4], eax
.text:0040B91D                 mov     [esp], edi
.text:0040B920                 call    GetShortPathNameA
.text:0040B925                 sub     esp, 0Ch
.text:0040B928                 mov     edx, esi
.text:0040B92A                 test    eax, eax
.text:0040B92C                 jz      short loc_40B942
.text:0040B92E                 mov     esi, esi
.text:0040B930
.text:0040B930 loc_40B930:                             ; CODE XREF: .text:0040B960↓j
.text:0040B930                 mov     ebx, [esp+10h]
.text:0040B934                 mov     eax, edx
.text:0040B936                 mov     esi, [esp+14h]
.text:0040B93A                 mov     edi, [esp+18h]
.text:0040B93E                 add     esp, 1Ch
.text:0040B941                 retn
.text:0040B942 ; ---------------------------------------------------------------------------
.text:0040B942
.text:0040B942 loc_40B942:                             ; CODE XREF: .text:0040B92C↑j
.text:0040B942                 mov     [esp], esi
.text:0040B945                 call    free
.text:0040B94A                 lea     esi, [esi+0]
.text:0040B950
.text:0040B950 loc_40B950:                             ; CODE XREF: .text:0040B902↑j
.text:0040B950                                         ; .text:0040B913↑j
.text:0040B950                 call    sub_40CE00
.text:0040B955                 mov     esi, eax
.text:0040B957                 call    _errno
.text:0040B95C                 mov     [eax], esi
.text:0040B95E                 mov     edx, edi
.text:0040B960                 jmp     short loc_40B930
.text:0040B960 ; ---------------------------------------------------------------------------
.text:0040B962                 align 10h
.text:0040B970 ; const char String[4]
.text:0040B970 String          db ' :/',0              ; DATA XREF: sub_40B980+FA↓o
.text:0040B974                 align 10h
.text:0040B980
.text:0040B980 ; =============== S U B R O U T I N E =======================================
.text:0040B980
.text:0040B980
.text:0040B980 ; int __cdecl sub_40B980(LPCSTR)
.text:0040B980 sub_40B980      proc near               ; CODE XREF: sub_409DD0+E↑p
.text:0040B980                                         ; sub_40A2D0+17↑p ...
.text:0040B980
.text:0040B980 Str             = dword ptr -1Ch
.text:0040B980 Val             = dword ptr -18h
.text:0040B980 Count           = dword ptr -14h
.text:0040B980 var_10          = dword ptr -10h
.text:0040B980 var_C           = dword ptr -0Ch
.text:0040B980 var_8           = dword ptr -8
.text:0040B980 var_4           = dword ptr -4
.text:0040B980 arg_0           = dword ptr  4
.text:0040B980
.text:0040B980                 sub     esp, 1Ch
.text:0040B983                 mov     edx, [esp+1Ch+arg_0]
.text:0040B987                 mov     [esp+1Ch+var_8], edi
.text:0040B98B                 mov     [esp+1Ch+var_10], ebx
.text:0040B98F                 mov     [esp+1Ch+var_C], esi
.text:0040B993                 mov     [esp+1Ch+var_4], ebp
.text:0040B997                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040B99A                 call    sub_40CE50
.text:0040B99F                 test    eax, eax
.text:0040B9A1                 mov     edi, eax
.text:0040B9A3                 jz      short loc_40B9E0
.text:0040B9A5                 mov     [esp+1Ch+Str], eax ; Str
.text:0040B9A8                 call    strlen
.text:0040B9AD                 cmp     eax, 2
.text:0040B9B0                 jbe     short loc_40B9BC
.text:0040B9B2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040B9B6                 jz      loc_40BA70
.text:0040B9BC
.text:0040B9BC loc_40B9BC:                             ; CODE XREF: sub_40B980+30↑j
.text:0040B9BC                                         ; sub_40B980+F4↓j
.text:0040B9BC                 test    edi, edi
.text:0040B9BE                 jz      short loc_40B9E0
.text:0040B9C0                 mov     [esp+1Ch+Str], edi ; Str
.text:0040B9C3                 call    strlen
.text:0040B9C8                 cmp     eax, 4
.text:0040B9CB                 mov     ebp, eax
.text:0040B9CD                 jle     short loc_40B9E0
.text:0040B9CF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040B9D2                 jz      short loc_40BA00
.text:0040B9D4                 lea     esi, [esi+0]
.text:0040B9DA                 lea     edi, [edi+0]
.text:0040B9E0
.text:0040B9E0 loc_40B9E0:                             ; CODE XREF: sub_40B980+23↑j
.text:0040B9E0                                         ; sub_40B980+3E↑j ...
.text:0040B9E0                 xor     esi, esi
.text:0040B9E2
.text:0040B9E2 loc_40B9E2:                             ; CODE XREF: sub_40B980+CD↓j
.text:0040B9E2                                         ; sub_40B980+115↓j
.text:0040B9E2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040B9E5                 call    free
.text:0040B9EA                 mov     eax, esi
.text:0040B9EC                 mov     ebx, [esp+1Ch+var_10]
.text:0040B9F0                 mov     esi, [esp+1Ch+var_C]
.text:0040B9F4                 mov     edi, [esp+1Ch+var_8]
.text:0040B9F8                 mov     ebp, [esp+1Ch+var_4]
.text:0040B9FC                 add     esp, 1Ch
.text:0040B9FF                 retn
.text:0040BA00 ; ---------------------------------------------------------------------------
.text:0040BA00
.text:0040BA00 loc_40BA00:                             ; CODE XREF: sub_40B980+52↑j
.text:0040BA00                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040BA04                 jnz     short loc_40B9E0
.text:0040BA06                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BA0E                 lea     ecx, [edi+2]
.text:0040BA11                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040BA14                 call    strchr
.text:0040BA19                 test    eax, eax
.text:0040BA1B                 jnz     short loc_40BA4F
.text:0040BA1D
.text:0040BA1D loc_40BA1D:                             ; CODE XREF: sub_40B980+E2↓j
.text:0040BA1D                 inc     ebp
.text:0040BA1E
.text:0040BA1E loc_40BA1E:                             ; CODE XREF: sub_40B980+E9↓j
.text:0040BA1E                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040BA26                 lea     ebx, [ebp+1]
.text:0040BA29                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040BA2C                 call    calloc
.text:0040BA31                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040BA34                 mov     esi, eax
.text:0040BA36                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040BA3A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040BA3E                 call    strncpy
.text:0040BA43                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040BA48                 mov     byte ptr [ebp+esi+0], 0
.text:0040BA4D                 jmp     short loc_40B9E2
.text:0040BA4F ; ---------------------------------------------------------------------------
.text:0040BA4F
.text:0040BA4F loc_40BA4F:                             ; CODE XREF: sub_40B980+9B↑j
.text:0040BA4F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BA57                 inc     eax
.text:0040BA58                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BA5B                 call    strchr
.text:0040BA60                 test    eax, eax
.text:0040BA62                 jz      short loc_40BA1D
.text:0040BA64                 sub     eax, edi
.text:0040BA66                 lea     ebp, [eax+1]
.text:0040BA69                 jmp     short loc_40BA1E
.text:0040BA69 ; ---------------------------------------------------------------------------
.text:0040BA6B                 align 10h
.text:0040BA70
.text:0040BA70 loc_40BA70:                             ; CODE XREF: sub_40B980+36↑j
.text:0040BA70                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040BA74                 jnz     loc_40B9BC
.text:0040BA7A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040BA81                 call    _strdup
.text:0040BA86                 movsx   edx, byte ptr [edi]
.text:0040BA89                 mov     esi, eax
.text:0040BA8B                 mov     [esp+1Ch+Str], edx ; C
.text:0040BA8E                 call    toupper
.text:0040BA93                 mov     [esi], al
.text:0040BA95                 jmp     loc_40B9E2
.text:0040BA95 sub_40B980      endp
.text:0040BA95
.text:0040BA95 ; ---------------------------------------------------------------------------
.text:0040BA9A                 align 10h
.text:0040BAA0
.text:0040BAA0 ; =============== S U B R O U T I N E =======================================
.text:0040BAA0
.text:0040BAA0
.text:0040BAA0 sub_40BAA0      proc near               ; CODE XREF: .text:0040BBF4↓p
.text:0040BAA0                                         ; .text:0040BCD8↓p
.text:0040BAA0
.text:0040BAA0 Str             = dword ptr -2Ch
.text:0040BAA0 Val             = dword ptr -28h
.text:0040BAA0 var_18          = dword ptr -18h
.text:0040BAA0 var_11          = byte ptr -11h
.text:0040BAA0 arg_0           = dword ptr  4
.text:0040BAA0
.text:0040BAA0                 push    ebp
.text:0040BAA1                 push    edi
.text:0040BAA2                 push    esi
.text:0040BAA3                 push    ebx
.text:0040BAA4                 sub     esp, 1Ch
.text:0040BAA7                 mov     edx, [esp+2Ch+arg_0]
.text:0040BAAB                 cmp     edx, ds:dword_413220
.text:0040BAB1                 mov     [esp+2Ch+var_11], 0
.text:0040BAB6                 jz      loc_40BBB4
.text:0040BABC                 mov     ebx, ds:dword_413210
.text:0040BAC2                 test    ebx, ebx
.text:0040BAC4                 jz      short loc_40BB32
.text:0040BAC6
.text:0040BAC6 loc_40BAC6:                             ; CODE XREF: sub_40BAA0+10F↓j
.text:0040BAC6                 mov     ebx, [esp+2Ch+arg_0]
.text:0040BACA                 xor     edi, edi
.text:0040BACC                 xor     esi, esi
.text:0040BACE                 mov     ebp, offset dword_413238
.text:0040BAD3                 lea     esi, [esi+0]
.text:0040BAD9                 lea     edi, [edi+0]
.text:0040BAE0
.text:0040BAE0 loc_40BAE0:                             ; CODE XREF: sub_40BAA0+60↓j
.text:0040BAE0                 mov     edx, [ebp+4]
.text:0040BAE3                 mov     ecx, edi
.text:0040BAE5                 mov     eax, [ebp+0]
.text:0040BAE8                 shl     ecx, 4
.text:0040BAEB                 mov     [esp+2Ch+var_18], ecx
.text:0040BAEF                 mov     ecx, edx
.text:0040BAF1                 xor     eax, ebx
.text:0040BAF3                 xor     ecx, esi
.text:0040BAF5                 or      ecx, eax
.text:0040BAF7                 jz      short loc_40BB21
.text:0040BAF9                 inc     edi
.text:0040BAFA                 add     ebp, 10h
.text:0040BAFD                 cmp     edi, 20h ; ' '
.text:0040BB00                 jle     short loc_40BAE0
.text:0040BB02
.text:0040BB02 loc_40BB02:                             ; CODE XREF: sub_40BAA0+90↓j
.text:0040BB02                 movzx   ebx, [esp+2Ch+var_11]
.text:0040BB07                 mov     eax, [esp+2Ch+arg_0]
.text:0040BB0B                 mov     byte_412070, bl
.text:0040BB11                 mov     ds:dword_413220, eax
.text:0040BB16                 movsx   eax, bl
.text:0040BB19
.text:0040BB19 loc_40BB19:                             ; CODE XREF: sub_40BAA0+11B↓j
.text:0040BB19                 add     esp, 1Ch
.text:0040BB1C                 pop     ebx
.text:0040BB1D                 pop     esi
.text:0040BB1E                 pop     edi
.text:0040BB1F                 pop     ebp
.text:0040BB20                 retn
.text:0040BB21 ; ---------------------------------------------------------------------------
.text:0040BB21
.text:0040BB21 loc_40BB21:                             ; CODE XREF: sub_40BAA0+57↑j
.text:0040BB21                 mov     edx, [esp+2Ch+var_18]
.text:0040BB25                 movzx   eax, byte ptr ds:dword_413230[edx]
.text:0040BB2C                 mov     [esp+2Ch+var_11], al
.text:0040BB30                 jmp     short loc_40BB02
.text:0040BB32 ; ---------------------------------------------------------------------------
.text:0040BB32
.text:0040BB32 loc_40BB32:                             ; CODE XREF: sub_40BAA0+24↑j
.text:0040BB32                 mov     [esp+2Ch+Str], 0
.text:0040BB39                 call    sub_40E6C0
.text:0040BB3E                 test    eax, eax
.text:0040BB40                 mov     ebx, eax
.text:0040BB42                 jz      short loc_40BB9C
.text:0040BB44                 movzx   ecx, byte ptr [eax]
.text:0040BB47                 mov     esi, 0FFFFFFF0h
.text:0040BB4C                 test    cl, cl
.text:0040BB4E                 jz      short loc_40BB9C
.text:0040BB50
.text:0040BB50 loc_40BB50:                             ; CODE XREF: sub_40BAA0+FA↓j
.text:0040BB50                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040BB53                 movsx   ebp, cl
.text:0040BB56                 add     esi, 10h
.text:0040BB59                 mov     ds:dword_413230[esi], ebp
.text:0040BB5F                 mov     edi, ebp
.text:0040BB61                 sar     edi, 1Fh
.text:0040BB64                 mov     ds:dword_413234[esi], edi
.text:0040BB6A                 call    sub_40A2D0
.text:0040BB6F                 mov     ds:dword_413238[esi], eax
.text:0040BB75                 xor     ecx, ecx
.text:0040BB77                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040BB7A                 mov     ds:dword_41323C[esi], ecx
.text:0040BB80                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040BB88                 call    strchr
.text:0040BB8D                 mov     ebx, eax
.text:0040BB8F                 inc     ebx
.text:0040BB90                 jz      short loc_40BB9C
.text:0040BB92                 movzx   edx, byte ptr [eax+1]
.text:0040BB96                 test    dl, dl
.text:0040BB98                 mov     cl, dl
.text:0040BB9A                 jnz     short loc_40BB50
.text:0040BB9C
.text:0040BB9C loc_40BB9C:                             ; CODE XREF: sub_40BAA0+A2↑j
.text:0040BB9C                                         ; sub_40BAA0+AE↑j ...
.text:0040BB9C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040BB9F                 mov     esi, 1
.text:0040BBA4                 mov     ds:dword_413210, esi
.text:0040BBAA                 call    free
.text:0040BBAF                 jmp     loc_40BAC6
.text:0040BBB4 ; ---------------------------------------------------------------------------
.text:0040BBB4
.text:0040BBB4 loc_40BBB4:                             ; CODE XREF: sub_40BAA0+16↑j
.text:0040BBB4                 movsx   eax, byte_412070
.text:0040BBBB                 jmp     loc_40BB19
.text:0040BBBB sub_40BAA0      endp
.text:0040BBBB
.text:0040BBBB ; ---------------------------------------------------------------------------
.text:0040BBC0 dword_40BBC0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040BBC0                                         ; DATA XREF: .text:0040BBE3↓o
.text:0040BBC0                                         ; .text:0040BCC3↓o
.text:0040BBD0 ; ---------------------------------------------------------------------------
.text:0040BBD0                 sub     esp, 1Ch
.text:0040BBD3                 mov     [esp+14h], esi
.text:0040BBD7                 mov     esi, [esp+20h]
.text:0040BBDB                 mov     [esp+18h], edi
.text:0040BBDF                 mov     [esp+10h], ebx
.text:0040BBE3                 mov     dword ptr [esp], offset dword_40BBC0
.text:0040BBEA                 call    _strdup
.text:0040BBEF                 mov     [esp], esi
.text:0040BBF2                 mov     edi, eax
.text:0040BBF4                 call    sub_40BAA0
.text:0040BBF9                 mov     [edi], al
.text:0040BBFB                 test    al, al
.text:0040BBFD                 jz      short loc_40BC11
.text:0040BBFF                 mov     eax, edi
.text:0040BC01                 mov     ebx, [esp+10h]
.text:0040BC05                 mov     esi, [esp+14h]
.text:0040BC09                 mov     edi, [esp+18h]
.text:0040BC0D                 add     esp, 1Ch
.text:0040BC10                 retn
.text:0040BC11 ; ---------------------------------------------------------------------------
.text:0040BC11
.text:0040BC11 loc_40BC11:                             ; CODE XREF: .text:0040BBFD↑j
.text:0040BC11                 mov     [esp], edi
.text:0040BC14                 call    free
.text:0040BC19                 mov     dword ptr [esp+4], 0
.text:0040BC21                 mov     dword ptr [esp], 0
.text:0040BC28                 call    GetCurrentDirectoryA
.text:0040BC2D                 sub     esp, 8
.text:0040BC30                 lea     esi, [eax+1]
.text:0040BC33                 mov     [esp], esi
.text:0040BC36                 call    malloc
.text:0040BC3B                 mov     [esp+4], eax
.text:0040BC3F                 mov     edi, eax
.text:0040BC41                 mov     [esp], esi
.text:0040BC44                 call    GetCurrentDirectoryA
.text:0040BC49                 sub     esp, 8
.text:0040BC4C                 test    eax, eax
.text:0040BC4E                 jnz     short loc_40BC70
.text:0040BC50                 mov     dword ptr [esp+20h], 40BBC4h
.text:0040BC58                 mov     ebx, [esp+10h]
.text:0040BC5C                 mov     esi, [esp+14h]
.text:0040BC60                 mov     edi, [esp+18h]
.text:0040BC64                 add     esp, 1Ch
.text:0040BC67                 jmp     _strdup
.text:0040BC67 ; ---------------------------------------------------------------------------
.text:0040BC6C                 align 10h
.text:0040BC70
.text:0040BC70 loc_40BC70:                             ; CODE XREF: .text:0040BC4E↑j
.text:0040BC70                 mov     [esp+20h], edi
.text:0040BC74                 mov     ebx, [esp+10h]
.text:0040BC78                 mov     esi, [esp+14h]
.text:0040BC7C                 mov     edi, [esp+18h]
.text:0040BC80                 add     esp, 1Ch
.text:0040BC83                 jmp     sub_40B980
.text:0040BC83 ; ---------------------------------------------------------------------------
.text:0040BC88                 align 10h
.text:0040BC90                 sub     esp, 7Ch
.text:0040BC93                 lea     edx, [esp+10h]
.text:0040BC97                 mov     [esp+8], edx
.text:0040BC9B                 mov     edx, [esp+80h]
.text:0040BCA2                 mov     [esp+70h], ebx
.text:0040BCA6                 mov     [esp+74h], esi
.text:0040BCAA                 mov     [esp+4], edx
.text:0040BCAE                 mov     [esp+78h], edi
.text:0040BCB2                 mov     dword ptr [esp], 0
.text:0040BCB9                 call    sub_409520
.text:0040BCBE                 xor     edx, edx
.text:0040BCC0                 inc     eax
.text:0040BCC1                 jz      short loc_40BCE5
.text:0040BCC3                 mov     dword ptr [esp], offset dword_40BBC0
.text:0040BCCA                 mov     esi, [esp+20h]
.text:0040BCCE                 call    _strdup
.text:0040BCD3                 mov     edi, eax
.text:0040BCD5                 mov     [esp], esi
.text:0040BCD8                 call    sub_40BAA0
.text:0040BCDD                 mov     [edi], al
.text:0040BCDF                 test    al, al
.text:0040BCE1                 mov     edx, edi
.text:0040BCE3                 jz      short loc_40BCF7
.text:0040BCE5
.text:0040BCE5 loc_40BCE5:                             ; CODE XREF: .text:0040BCC1↑j
.text:0040BCE5                                         ; .text:0040BD44↓j
.text:0040BCE5                 mov     ebx, [esp+70h]
.text:0040BCE9                 mov     eax, edx
.text:0040BCEB                 mov     esi, [esp+74h]
.text:0040BCEF                 mov     edi, [esp+78h]
.text:0040BCF3                 add     esp, 7Ch
.text:0040BCF6                 retn
.text:0040BCF7 ; ---------------------------------------------------------------------------
.text:0040BCF7
.text:0040BCF7 loc_40BCF7:                             ; CODE XREF: .text:0040BCE3↑j
.text:0040BCF7                 mov     [esp], edi
.text:0040BCFA                 call    free
.text:0040BCFF                 mov     dword ptr [esp+4], 0
.text:0040BD07                 mov     dword ptr [esp], 0
.text:0040BD0E                 call    GetCurrentDirectoryA
.text:0040BD13                 sub     esp, 8
.text:0040BD16                 lea     esi, [eax+1]
.text:0040BD19                 mov     [esp], esi
.text:0040BD1C                 call    malloc
.text:0040BD21                 mov     [esp+4], eax
.text:0040BD25                 mov     edi, eax
.text:0040BD27                 mov     [esp], esi
.text:0040BD2A                 call    GetCurrentDirectoryA
.text:0040BD2F                 sub     esp, 8
.text:0040BD32                 test    eax, eax
.text:0040BD34                 jnz     short loc_40BD46
.text:0040BD36                 mov     dword ptr [esp], 40BBC4h
.text:0040BD3D                 call    _strdup
.text:0040BD42
.text:0040BD42 loc_40BD42:                             ; CODE XREF: .text:0040BD4E↓j
.text:0040BD42                 mov     edx, eax
.text:0040BD44                 jmp     short loc_40BCE5
.text:0040BD46 ; ---------------------------------------------------------------------------
.text:0040BD46
.text:0040BD46 loc_40BD46:                             ; CODE XREF: .text:0040BD34↑j
.text:0040BD46                 mov     [esp], edi
.text:0040BD49                 call    sub_40B980
.text:0040BD4E                 jmp     short loc_40BD42
.text:0040BD50
.text:0040BD50 ; =============== S U B R O U T I N E =======================================
.text:0040BD50
.text:0040BD50
.text:0040BD50 ; int __cdecl sub_40BD50(LPCSTR)
.text:0040BD50 sub_40BD50      proc near               ; CODE XREF: sub_409780+12F↑p
.text:0040BD50
.text:0040BD50 String1         = dword ptr -1Ch
.text:0040BD50 String2         = dword ptr -18h
.text:0040BD50 var_C           = dword ptr -0Ch
.text:0040BD50 var_8           = dword ptr -8
.text:0040BD50 var_4           = dword ptr -4
.text:0040BD50 arg_0           = dword ptr  4
.text:0040BD50
.text:0040BD50                 sub     esp, 1Ch
.text:0040BD53                 mov     [esp+1Ch+var_4], edi
.text:0040BD57                 mov     edi, [esp+1Ch+arg_0]
.text:0040BD5B                 mov     [esp+1Ch+var_C], ebx
.text:0040BD5F                 mov     [esp+1Ch+var_8], esi
.text:0040BD63                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040BD66                 call    sub_40CE50
.text:0040BD6B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040BD6E                 mov     esi, eax
.text:0040BD70                 call    sub_40B980
.text:0040BD75                 mov     [esp+1Ch+String2], eax ; String2
.text:0040BD79                 mov     ebx, eax
.text:0040BD7B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040BD7E                 call    _stricmp
.text:0040BD83                 test    eax, eax
.text:0040BD85                 setz    dl
.text:0040BD88                 test    esi, esi
.text:0040BD8A                 movzx   edi, dl
.text:0040BD8D                 jz      short loc_40BD97
.text:0040BD8F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040BD92                 call    free
.text:0040BD97
.text:0040BD97 loc_40BD97:                             ; CODE XREF: sub_40BD50+3D↑j
.text:0040BD97                 test    ebx, ebx
.text:0040BD99                 jz      short loc_40BDA3
.text:0040BD9B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040BD9E                 call    free
.text:0040BDA3
.text:0040BDA3 loc_40BDA3:                             ; CODE XREF: sub_40BD50+49↑j
.text:0040BDA3                 mov     eax, edi
.text:0040BDA5                 mov     ebx, [esp+1Ch+var_C]
.text:0040BDA9                 mov     esi, [esp+1Ch+var_8]
.text:0040BDAD                 mov     edi, [esp+1Ch+var_4]
.text:0040BDB1                 add     esp, 1Ch
.text:0040BDB4                 retn
.text:0040BDB4 sub_40BD50      endp
.text:0040BDB4
.text:0040BDB4 ; ---------------------------------------------------------------------------
.text:0040BDB5                 align 10h
.text:0040BDC0
.text:0040BDC0 ; =============== S U B R O U T I N E =======================================
.text:0040BDC0
.text:0040BDC0
.text:0040BDC0 ; int __cdecl sub_40BDC0(char *, int)
.text:0040BDC0 sub_40BDC0      proc near               ; CODE XREF: sub_401A00+705↑p
.text:0040BDC0                                         ; sub_402420+23B↑p
.text:0040BDC0
.text:0040BDC0 var_C           = dword ptr -0Ch
.text:0040BDC0 var_8           = dword ptr -8
.text:0040BDC0 var_4           = dword ptr -4
.text:0040BDC0 arg_0           = dword ptr  4
.text:0040BDC0 arg_4           = dword ptr  8
.text:0040BDC0
.text:0040BDC0                 sub     esp, 0Ch
.text:0040BDC3                 mov     edx, [esp+0Ch+arg_4]
.text:0040BDC7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040BDCE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040BDD2                 mov     edx, [esp+0Ch+arg_0]
.text:0040BDD6                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040BDDA                 call    sub_40C710
.text:0040BDDF                 add     esp, 0Ch
.text:0040BDE2                 retn
.text:0040BDE2 sub_40BDC0      endp
.text:0040BDE2
.text:0040BDE2 ; ---------------------------------------------------------------------------
.text:0040BDE3                 align 10h
.text:0040BDF0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040BE41↓o
.text:0040BDF9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040BDF9                                         ; DATA XREF: .text:0040BE52↓o
.text:0040BE0D ; const CHAR FileName[]
.text:0040BE0D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0040BF9C↓o
.text:0040BE0D                                         ; sub_40C3D0+17C↓o
.text:0040BE18 ; ---------------------------------------------------------------------------
.text:0040BE18
.text:0040BE18 loc_40BE18:                             ; DATA XREF: .text:0040C0B2↓o
.text:0040BE18                 dec     esi
.text:0040BE19                 push    esp
.text:0040BE1A                 inc     esi
.text:0040BE1B                 push    ebx
.text:0040BE1C                 add     [esi+41h], al
.text:0040BE1F                 push    esp
.text:0040BE20                 xor     esi, [edx]
.text:0040BE22                 add     [esi+41h], al
.text:0040BE25                 push    esp
.text:0040BE26                 add     [ebx+44h], al
.text:0040BE29                 inc     esi
.text:0040BE2A                 push    ebx
.text:0040BE2B
.text:0040BE2B loc_40BE2B:                             ; CODE XREF: sub_40C3D0+101↓p
.text:0040BE2B                 add     [ebp+55002674h], cl
.text:0040BE31                 push    edi
.text:0040BE32                 push    esi
.text:0040BE33                 push    ebx
.text:0040BE34                 sub     esp, 8BCh
.text:0040BE3A                 mov     ebp, [esp+8D0h]
.text:0040BE41                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040BE48                 call    LoadLibraryA
.text:0040BE4D                 sub     esp, 4
.text:0040BE50                 mov     edi, eax
.text:0040BE52                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040BE5A                 mov     [esp], eax
.text:0040BE5D                 call    GetProcAddress
.text:0040BE62                 sub     esp, 8
.text:0040BE65                 mov     esi, eax
.text:0040BE67                 test    ebp, ebp
.text:0040BE69                 mov     dword ptr [esp+20h], 0
.text:0040BE71                 jz      loc_40C3B1
.text:0040BE77                 mov     [esp], ebp
.text:0040BE7A                 call    sub_40B550
.text:0040BE7F                 mov     [esp], eax
.text:0040BE82                 mov     ebp, eax
.text:0040BE84                 call    strlen
.text:0040BE89                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040BE8E                 mov     ebx, eax
.text:0040BE90                 jz      short loc_40BEAC
.text:0040BE92                 mov     [esp], ebp
.text:0040BE95                 lea     edx, [eax+1]
.text:0040BE98                 mov     [esp+4], edx
.text:0040BE9C                 call    realloc
.text:0040BEA1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040BEA5                 mov     ebp, eax
.text:0040BEA7                 mov     byte ptr [ebx+eax+1], 0
.text:0040BEAC
.text:0040BEAC loc_40BEAC:                             ; CODE XREF: .text:0040BE90↑j
.text:0040BEAC                 mov     dword ptr [esp+1Ch], 400h
.text:0040BEB4                 lea     edx, [esp+0B0h]
.text:0040BEBB                 lea     ebx, [esp+5Ch]
.text:0040BEBF                 mov     [esp+18h], edx
.text:0040BEC3                 lea     ecx, [esp+58h]
.text:0040BEC7                 lea     edx, [esp+54h]
.text:0040BECB                 mov     [esp+14h], ebx
.text:0040BECF                 lea     eax, [esp+4B0h]
.text:0040BED6                 mov     [esp+10h], ecx
.text:0040BEDA                 mov     [esp+0Ch], edx
.text:0040BEDE                 mov     dword ptr [esp+8], 400h
.text:0040BEE6                 mov     [esp+4], eax
.text:0040BEEA                 mov     [esp], ebp
.text:0040BEED                 call    GetVolumeInformationA
.text:0040BEF2                 sub     esp, 20h
.text:0040BEF5                 test    eax, eax
.text:0040BEF7                 jz      loc_40C38E
.text:0040BEFD                 test    esi, esi
.text:0040BEFF                 jz      short loc_40BF25
.text:0040BF01                 mov     [esp], ebp
.text:0040BF04                 lea     edx, [esp+48h]
.text:0040BF08                 lea     ebx, [esp+40h]
.text:0040BF0C                 mov     [esp+0Ch], edx
.text:0040BF10                 lea     ecx, [esp+38h]
.text:0040BF14                 mov     [esp+8], ebx
.text:0040BF18                 mov     [esp+4], ecx
.text:0040BF1C                 call    esi
.text:0040BF1E                 sub     esp, 10h
.text:0040BF21                 mov     [esp+20h], eax
.text:0040BF25
.text:0040BF25 loc_40BF25:                             ; CODE XREF: .text:0040BEFF↑j
.text:0040BF25                 test    edi, edi
.text:0040BF27                 jz      short loc_40BF34
.text:0040BF29                 mov     [esp], edi
.text:0040BF2C                 call    FreeLibrary
.text:0040BF31                 sub     esp, 4
.text:0040BF34
.text:0040BF34 loc_40BF34:                             ; CODE XREF: .text:0040BF27↑j
.text:0040BF34                 call    sub_40D8E0
.text:0040BF39                 test    eax, eax
.text:0040BF3B                 lea     esi, [esp+28h]
.text:0040BF3F                 jz      loc_40C370
.text:0040BF45                 call    sub_40D8E0
.text:0040BF4A                 test    eax, eax
.text:0040BF4C                 jz      short loc_40BF5C
.text:0040BF4E                 call    sub_40D830
.text:0040BF53                 cmp     eax, 0Bh
.text:0040BF56                 jle     loc_40C344
.text:0040BF5C
.text:0040BF5C loc_40BF5C:                             ; CODE XREF: .text:0040BF4C↑j
.text:0040BF5C                 cld
.text:0040BF5D                 xor     eax, eax
.text:0040BF5F                 lea     ebx, [esp+60h]
.text:0040BF63                 mov     ecx, 7
.text:0040BF68                 mov     edi, ebx
.text:0040BF6A                 rep stosd
.text:0040BF6C                 mov     dword ptr [esp+18h], 0
.text:0040BF74                 mov     dword ptr [esp+14h], 4000000h
.text:0040BF7C                 mov     dword ptr [esp+10h], 0
.text:0040BF84                 mov     dword ptr [esp+0Ch], 0
.text:0040BF8C                 mov     dword ptr [esp+8], 0
.text:0040BF94                 mov     dword ptr [esp+4], 0
.text:0040BF9C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:0040BFA3                 call    CreateFileA
.text:0040BFA8                 sub     esp, 1Ch
.text:0040BFAB                 mov     edi, eax
.text:0040BFAD                 cmp     eax, 0FFFFFFFFh
.text:0040BFB0                 jz      short loc_40C030
.text:0040BFB2                 mov     [esp+10h], ebx
.text:0040BFB6                 lea     edx, [esp+80h]
.text:0040BFBD                 lea     ecx, [esp+24h]
.text:0040BFC1                 mov     [esp+70h], edx
.text:0040BFC5                 mov     [esp+18h], ecx
.text:0040BFC9                 mov     [esp+8], ebx
.text:0040BFCD                 mov     dword ptr [esp+6Ch], 7303h
.text:0040BFD5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040BFDD                 mov     [esp+64h], ebp
.text:0040BFE1                 mov     dword ptr [esp+78h], 1
.text:0040BFE9                 mov     dword ptr [esp+1Ch], 0
.text:0040BFF1                 mov     dword ptr [esp+14h], 1Ch
.text:0040BFF9                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040C001                 mov     dword ptr [esp+4], 6
.text:0040C009                 mov     [esp], eax
.text:0040C00C                 call    DeviceIoControl
.text:0040C011                 sub     esp, 20h
.text:0040C014                 mov     ebx, eax
.text:0040C016                 mov     [esp], edi
.text:0040C019                 call    CloseHandle
.text:0040C01E                 sub     esp, 4
.text:0040C021                 test    ebx, ebx
.text:0040C023                 jz      short loc_40C030
.text:0040C025                 test    byte ptr [esp+78h], 1
.text:0040C02A                 jz      loc_40C310
.text:0040C030
.text:0040C030 loc_40C030:                             ; CODE XREF: .text:0040BFB0↑j
.text:0040C030                                         ; .text:0040C023↑j
.text:0040C030                 call    sub_40CE00
.text:0040C035                 mov     edi, eax
.text:0040C037                 call    _errno
.text:0040C03C                 mov     [eax], edi
.text:0040C03E                 xor     eax, eax
.text:0040C040
.text:0040C040 loc_40C040:                             ; CODE XREF: .text:0040C33F↓j
.text:0040C040                                         ; .text:0040C36B↓j
.text:0040C040                 test    eax, eax
.text:0040C042                 jnz     short loc_40C064
.text:0040C044                 mov     dword ptr [esp+34h], 1
.text:0040C04C                 mov     dword ptr [esp+30h], 200h
.text:0040C054                 mov     dword ptr [esp+2Ch], 0
.text:0040C05C                 mov     dword ptr [esp+28h], 0
.text:0040C064
.text:0040C064 loc_40C064:                             ; CODE XREF: .text:0040C042↑j
.text:0040C064                 mov     edx, [esp+30h]
.text:0040C068                 mov     edi, [esp+34h]
.text:0040C06C                 mov     ecx, [esp+20h]
.text:0040C070                 imul    edi, edx
.text:0040C073                 test    ecx, ecx
.text:0040C075                 jnz     short loc_40C09D
.text:0040C077                 mov     eax, [esp+28h]
.text:0040C07B                 mul     edi
.text:0040C07D                 mov     esi, eax
.text:0040C07F                 mov     eax, [esp+2Ch]
.text:0040C083                 mov     [esp+44h], edx
.text:0040C087                 mov     [esp+40h], esi
.text:0040C08B                 mul     edi
.text:0040C08D                 mov     [esp+48h], eax
.text:0040C091                 mov     [esp+4Ch], edx
.text:0040C095                 mov     [esp+38h], eax
.text:0040C099                 mov     [esp+3Ch], edx
.text:0040C09D
.text:0040C09D loc_40C09D:                             ; CODE XREF: .text:0040C075↑j
.text:0040C09D                 mov     ebx, [esp+5Ch]
.text:0040C0A1                 lea     edx, [esp+0B0h]
.text:0040C0A8                 mov     ecx, [esp+8D4h]
.text:0040C0AF                 mov     [ecx+48h], ebx
.text:0040C0B2                 mov     dword ptr [esp+4], offset loc_40BE18
.text:0040C0BA                 mov     [esp], edx
.text:0040C0BD                 call    _stricmp
.text:0040C0C2                 test    eax, eax
.text:0040C0C4                 jnz     loc_40C280
.text:0040C0CA                 mov     esi, [esp+8D4h]
.text:0040C0D1                 mov     dword ptr [esi], 5346544Eh
.text:0040C0D7
.text:0040C0D7 loc_40C0D7:                             ; CODE XREF: .text:0040C2A8↓j
.text:0040C0D7                                         ; .text:0040C2D5↓j ...
.text:0040C0D7                 mov     ebx, [esp+30h]
.text:0040C0DB                 mov     esi, [esp+8D4h]
.text:0040C0E2                 mov     [esi+4], ebx
.text:0040C0E5                 mov     [esi+8], ebx
.text:0040C0E8                 mov     ebx, [esi+8]
.text:0040C0EB                 mov     [esi+0Ch], edi
.text:0040C0EE                 mov     ecx, [esp+44h]
.text:0040C0F2                 xor     esi, esi
.text:0040C0F4                 mov     [esp+8], ebx
.text:0040C0F8                 mov     edx, [esp+40h]
.text:0040C0FC                 mov     [esp+0Ch], esi
.text:0040C100                 mov     [esp+4], ecx
.text:0040C104                 mov     [esp], edx
.text:0040C107                 call    sub_410F20
.text:0040C10C                 mov     ecx, [esp+8D4h]
.text:0040C113                 mov     [ecx+10h], eax
.text:0040C116                 mov     [ecx+14h], edx
.text:0040C119                 mov     ecx, [esp+4Ch]
.text:0040C11D                 mov     [esp+8], ebx
.text:0040C121                 mov     edx, [esp+48h]
.text:0040C125                 mov     [esp+0Ch], esi
.text:0040C129                 mov     [esp+4], ecx
.text:0040C12D                 mov     [esp], edx
.text:0040C130                 call    sub_410F20
.text:0040C135                 mov     ecx, [esp+8D4h]
.text:0040C13C                 mov     [ecx+18h], eax
.text:0040C13F                 mov     [ecx+1Ch], edx
.text:0040C142                 mov     ecx, [esp+38h]
.text:0040C146                 mov     [esp+8], ebx
.text:0040C14A                 mov     ebx, [esp+3Ch]
.text:0040C14E                 mov     [esp+0Ch], esi
.text:0040C152                 mov     [esp], ecx
.text:0040C155                 mov     [esp+4], ebx
.text:0040C159                 call    sub_410F20
.text:0040C15E                 mov     esi, [esp+8D4h]
.text:0040C165                 mov     [esi+20h], eax
.text:0040C168                 mov     [esi+24h], edx
.text:0040C16B                 mov     ecx, [esp+44h]
.text:0040C16F                 mov     esi, edi
.text:0040C171                 mov     [esp+8], esi
.text:0040C175                 mov     edx, [esp+40h]
.text:0040C179                 xor     edi, edi
.text:0040C17B                 mov     [esp+0Ch], edi
.text:0040C17F                 mov     [esp+4], ecx
.text:0040C183                 mov     [esp], edx
.text:0040C186                 call    sub_410F20
.text:0040C18B                 mov     ebx, [esp+8D4h]
.text:0040C192                 mov     [ebx+28h], eax
.text:0040C195                 mov     [ebx+2Ch], edx
.text:0040C198                 mov     ecx, [esp+4Ch]
.text:0040C19C                 mov     [esp+8], esi
.text:0040C1A0                 mov     edx, [esp+48h]
.text:0040C1A4                 mov     [esp+0Ch], edi
.text:0040C1A8                 mov     [esp+4], ecx
.text:0040C1AC                 mov     [esp], edx
.text:0040C1AF                 call    sub_410F20
.text:0040C1B4                 mov     ebx, [esp+8D4h]
.text:0040C1BB                 mov     [ebx+30h], eax
.text:0040C1BE                 mov     [ebx+34h], edx
.text:0040C1C1                 mov     ecx, [esp+3Ch]
.text:0040C1C5                 mov     [esp+8], esi
.text:0040C1C9                 mov     edx, [esp+38h]
.text:0040C1CD                 mov     [esp+0Ch], edi
.text:0040C1D1                 mov     [esp+4], ecx
.text:0040C1D5                 mov     [esp], edx
.text:0040C1D8                 call    sub_410F20
.text:0040C1DD                 mov     edx, [esp+8D4h]
.text:0040C1E4                 lea     ecx, [esp+0B0h]
.text:0040C1EB                 mov     [edx+38h], eax
.text:0040C1EE                 mov     esi, [esp+58h]
.text:0040C1F2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040C1F9                 mov     [edx+110h], esi
.text:0040C1FF                 mov     esi, edx
.text:0040C201                 add     esi, 4Ch ; 'L'
.text:0040C204                 movzx   ebx, word ptr [esp+56h]
.text:0040C209                 movzx   edi, word ptr [esp+54h]
.text:0040C20E                 mov     [edx+3Ch], ebx
.text:0040C211                 lea     ebx, [esp+4B0h]
.text:0040C218                 mov     [edx+40h], edi
.text:0040C21B                 mov     [esp+4], ecx
.text:0040C21F                 mov     dword ptr [esp+8], 10h
.text:0040C227                 mov     [esp], esi
.text:0040C22A                 call    strncpy
.text:0040C22F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040C237                 mov     edi, [esp+8D4h]
.text:0040C23E                 mov     [esp+4], ebx
.text:0040C242                 add     edi, 5Ch ; '\'
.text:0040C245                 mov     [esp], edi
.text:0040C248                 call    strncpy
.text:0040C24D                 mov     [esp+4], ebp
.text:0040C251                 mov     ebp, [esp+8D4h]
.text:0040C258                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040C260                 add     ebp, 0B6h ; '¶'
.text:0040C266                 mov     [esp], ebp
.text:0040C269                 call    strncpy
.text:0040C26E                 xor     eax, eax
.text:0040C270
.text:0040C270 loc_40C270:                             ; CODE XREF: .text:0040C3AC↓j
.text:0040C270                 add     esp, 8BCh
.text:0040C276                 pop     ebx
.text:0040C277                 pop     esi
.text:0040C278                 pop     edi
.text:0040C279                 pop     ebp
.text:0040C27A                 retn
.text:0040C27A ; ---------------------------------------------------------------------------
.text:0040C27B                 align 10h
.text:0040C280
.text:0040C280 loc_40C280:                             ; CODE XREF: .text:0040C0C4↑j
.text:0040C280                 mov     dword ptr [esp+4], 40BE1Dh
.text:0040C288                 lea     eax, [esp+0B0h]
.text:0040C28F                 mov     [esp], eax
.text:0040C292                 call    _stricmp
.text:0040C297                 test    eax, eax
.text:0040C299                 jnz     short loc_40C2AD
.text:0040C29B                 mov     edx, [esp+8D4h]
.text:0040C2A2                 mov     dword ptr [edx], 4008h
.text:0040C2A8                 jmp     loc_40C0D7
.text:0040C2AD ; ---------------------------------------------------------------------------
.text:0040C2AD
.text:0040C2AD loc_40C2AD:                             ; CODE XREF: .text:0040C299↑j
.text:0040C2AD                 mov     dword ptr [esp+4], 40BE23h
.text:0040C2B5                 lea     ecx, [esp+0B0h]
.text:0040C2BC                 mov     [esp], ecx
.text:0040C2BF                 call    _stricmp
.text:0040C2C4                 test    eax, eax
.text:0040C2C6                 jnz     short loc_40C2DA
.text:0040C2C8                 mov     ebx, [esp+8D4h]
.text:0040C2CF                 mov     dword ptr [ebx], 4006h
.text:0040C2D5                 jmp     loc_40C0D7
.text:0040C2DA ; ---------------------------------------------------------------------------
.text:0040C2DA
.text:0040C2DA loc_40C2DA:                             ; CODE XREF: .text:0040C2C6↑j
.text:0040C2DA                 mov     dword ptr [esp+4], 40BE27h
.text:0040C2E2                 lea     eax, [esp+0B0h]
.text:0040C2E9                 mov     [esp], eax
.text:0040C2EC                 call    _stricmp
.text:0040C2F1                 test    eax, eax
.text:0040C2F3                 mov     esi, [esp+8D4h]
.text:0040C2FA                 setnz   cl
.text:0040C2FD                 movzx   edx, cl
.text:0040C300                 dec     edx
.text:0040C301                 and     edx, 4000h
.text:0040C307                 mov     [esi], edx
.text:0040C309                 jmp     loc_40C0D7
.text:0040C309 ; ---------------------------------------------------------------------------
.text:0040C30E                 align 10h
.text:0040C310
.text:0040C310 loc_40C310:                             ; CODE XREF: .text:0040C02A↑j
.text:0040C310                 mov     edi, [esp+84h]
.text:0040C317                 mov     eax, 1
.text:0040C31C                 mov     edx, [esp+88h]
.text:0040C323                 mov     ecx, [esp+8Ch]
.text:0040C32A                 mov     ebx, [esp+90h]
.text:0040C331                 mov     [esp+34h], edi
.text:0040C335                 mov     [esp+30h], edx
.text:0040C339                 mov     [esp+2Ch], ecx
.text:0040C33D                 mov     [esi], ebx
.text:0040C33F                 jmp     loc_40C040
.text:0040C344 ; ---------------------------------------------------------------------------
.text:0040C344
.text:0040C344 loc_40C344:                             ; CODE XREF: .text:0040BF56↑j
.text:0040C344                 mov     [esp+10h], esi
.text:0040C348                 lea     eax, [esp+2Ch]
.text:0040C34C                 lea     esi, [esp+30h]
.text:0040C350                 mov     [esp+0Ch], eax
.text:0040C354                 lea     edi, [esp+34h]
.text:0040C358                 mov     [esp+8], esi
.text:0040C35C                 mov     [esp+4], edi
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: .text:0040C38C↓j
.text:0040C360                 mov     [esp], ebp
.text:0040C363                 call    GetDiskFreeSpaceA
.text:0040C368                 sub     esp, 14h
.text:0040C36B                 jmp     loc_40C040
.text:0040C370 ; ---------------------------------------------------------------------------
.text:0040C370
.text:0040C370 loc_40C370:                             ; CODE XREF: .text:0040BF3F↑j
.text:0040C370                 mov     [esp+10h], esi
.text:0040C374                 lea     ebx, [esp+2Ch]
.text:0040C378                 lea     eax, [esp+30h]
.text:0040C37C                 mov     [esp+0Ch], ebx
.text:0040C380                 lea     esi, [esp+34h]
.text:0040C384                 mov     [esp+8], eax
.text:0040C388                 mov     [esp+4], esi
.text:0040C38C                 jmp     short loc_40C360
.text:0040C38E ; ---------------------------------------------------------------------------
.text:0040C38E
.text:0040C38E loc_40C38E:                             ; CODE XREF: .text:0040BEF7↑j
.text:0040C38E                 mov     [esp], edi
.text:0040C391                 call    FreeLibrary
.text:0040C396                 sub     esp, 4
.text:0040C399                 call    sub_40CE00
.text:0040C39E                 mov     esi, eax
.text:0040C3A0                 call    _errno
.text:0040C3A5                 mov     [eax], esi
.text:0040C3A7
.text:0040C3A7 loc_40C3A7:                             ; CODE XREF: .text:0040C3C7↓j
.text:0040C3A7                 mov     eax, 0FFFFFFFFh
.text:0040C3AC                 jmp     loc_40C270
.text:0040C3B1 ; ---------------------------------------------------------------------------
.text:0040C3B1
.text:0040C3B1 loc_40C3B1:                             ; CODE XREF: .text:0040BE71↑j
.text:0040C3B1                 mov     [esp], edi
.text:0040C3B4                 call    FreeLibrary
.text:0040C3B9                 sub     esp, 4
.text:0040C3BC                 call    _errno
.text:0040C3C1                 mov     dword ptr [eax], 2
.text:0040C3C7                 jmp     short loc_40C3A7
.text:0040C3C7 ; ---------------------------------------------------------------------------
.text:0040C3C9                 align 10h
.text:0040C3D0
.text:0040C3D0 ; =============== S U B R O U T I N E =======================================
.text:0040C3D0
.text:0040C3D0
.text:0040C3D0 ; int __cdecl sub_40C3D0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040C3D0 sub_40C3D0      proc near               ; CODE XREF: sub_409DD0+2C7↑p
.text:0040C3D0                                         ; .text:0040A40A↑p
.text:0040C3D0
.text:0040C3D0 lpFileName      = dword ptr -9Ch
.text:0040C3D0 dwDesiredAccess = dword ptr -98h
.text:0040C3D0 dwShareMode     = dword ptr -94h
.text:0040C3D0 lpSecurityAttributes= dword ptr -90h
.text:0040C3D0 dwCreationDisposition= dword ptr -8Ch
.text:0040C3D0 dwFlagsAndAttributes= dword ptr -88h
.text:0040C3D0 hTemplateFile   = dword ptr -84h
.text:0040C3D0 lpOverlapped    = dword ptr -80h
.text:0040C3D0 BytesReturned   = dword ptr -70h
.text:0040C3D0 InBuffer        = byte ptr -6Ch
.text:0040C3D0 var_68          = dword ptr -68h
.text:0040C3D0 var_64          = dword ptr -64h
.text:0040C3D0 var_60          = dword ptr -60h
.text:0040C3D0 var_5C          = dword ptr -5Ch
.text:0040C3D0 var_54          = dword ptr -54h
.text:0040C3D0 var_4C          = byte ptr -4Ch
.text:0040C3D0 var_48          = dword ptr -48h
.text:0040C3D0 var_44          = dword ptr -44h
.text:0040C3D0 var_40          = dword ptr -40h
.text:0040C3D0 var_3C          = dword ptr -3Ch
.text:0040C3D0 lpRootPathName  = dword ptr -2Ch
.text:0040C3D0 lpSectorsPerCluster= dword ptr -28h
.text:0040C3D0 lpBytesPerSector= dword ptr -24h
.text:0040C3D0 lpNumberOfFreeClusters= dword ptr -20h
.text:0040C3D0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040C3D0 var_18          = dword ptr -18h
.text:0040C3D0 var_14          = dword ptr -14h
.text:0040C3D0 var_10          = dword ptr -10h
.text:0040C3D0 var_C           = dword ptr -0Ch
.text:0040C3D0 var_8           = dword ptr -8
.text:0040C3D0 var_4           = dword ptr -4
.text:0040C3D0 arg_0           = dword ptr  4
.text:0040C3D0 arg_4           = dword ptr  8
.text:0040C3D0 arg_8           = dword ptr  0Ch
.text:0040C3D0 arg_C           = dword ptr  10h
.text:0040C3D0 arg_10          = dword ptr  14h
.text:0040C3D0
.text:0040C3D0                 sub     esp, 2Ch
.text:0040C3D3                 mov     edx, [esp+2Ch+arg_0]
.text:0040C3D7                 mov     [esp+2Ch+var_10], ebx
.text:0040C3DB                 mov     ebx, [esp+2Ch+arg_10]
.text:0040C3DF                 mov     [esp+2Ch+var_C], esi
.text:0040C3E3                 mov     esi, [esp+2Ch+arg_C]
.text:0040C3E7                 mov     [esp+2Ch+var_8], edi
.text:0040C3EB                 mov     edi, [esp+2Ch+arg_8]
.text:0040C3EF                 mov     [esp+2Ch+var_4], ebp
.text:0040C3F3                 mov     ebp, [esp+2Ch+arg_4]
.text:0040C3F7                 mov     [esp+2Ch+var_14], edx
.text:0040C3FB                 call    sub_40D8E0
.text:0040C400                 test    eax, eax
.text:0040C402                 jz      short loc_40C434
.text:0040C404                 mov     [esp+2Ch+arg_10], ebx
.text:0040C408                 mov     edx, [esp+2Ch+var_14]
.text:0040C40C                 mov     ebx, [esp+2Ch+var_10]
.text:0040C410                 mov     [esp+2Ch+arg_C], esi
.text:0040C414                 mov     esi, [esp+2Ch+var_C]
.text:0040C418                 mov     [esp+2Ch+arg_8], edi
.text:0040C41C                 mov     edi, [esp+2Ch+var_8]
.text:0040C420                 mov     [esp+2Ch+arg_4], ebp
.text:0040C424                 mov     ebp, [esp+2Ch+var_4]
.text:0040C428                 mov     [esp+2Ch+arg_0], edx
.text:0040C42C                 add     esp, 2Ch
.text:0040C42F                 jmp     loc_40C4E0
.text:0040C434 ; ---------------------------------------------------------------------------
.text:0040C434
.text:0040C434 loc_40C434:                             ; CODE XREF: sub_40C3D0+32↑j
.text:0040C434                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040C438                 mov     ecx, [esp+2Ch+var_14]
.text:0040C43C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040C440                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040C444                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040C448                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040C44B                 call    GetDiskFreeSpaceA
.text:0040C450                 sub     esp, 14h
.text:0040C453                 mov     ebx, [esp+2Ch+var_10]
.text:0040C457                 mov     esi, [esp+2Ch+var_C]
.text:0040C45B                 mov     edi, [esp+2Ch+var_8]
.text:0040C45F                 mov     ebp, [esp+2Ch+var_4]
.text:0040C463                 add     esp, 2Ch
.text:0040C466                 retn
.text:0040C466 ; ---------------------------------------------------------------------------
.text:0040C467                 align 10h
.text:0040C470
.text:0040C470 loc_40C470:                             ; CODE XREF: .text:0040DBFD↓p
.text:0040C470                 sub     esp, 1Ch
.text:0040C473                 mov     [esp+1Ch+var_4], esi
.text:0040C477                 mov     esi, [esp+1Ch+arg_0]
.text:0040C47B                 mov     [esp+1Ch+var_8], ebx
.text:0040C47F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040C482                 call    sub_40B980
.text:0040C487                 test    eax, eax
.text:0040C489                 mov     ebx, eax
.text:0040C48B                 jz      short loc_40C4A0
.text:0040C48D                 cmp     byte ptr [eax], 0
.text:0040C490                 jz      short loc_40C4A0
.text:0040C492                 test    esi, esi
.text:0040C494                 jz      short loc_40C4A0
.text:0040C496                 cmp     byte ptr [esi], 0
.text:0040C499                 jnz     short loc_40C4C6
.text:0040C49B                 nop
.text:0040C49C                 lea     esi, [esi+0]
.text:0040C4A0
.text:0040C4A0 loc_40C4A0:                             ; CODE XREF: sub_40C3D0+BB↑j
.text:0040C4A0                                         ; sub_40C3D0+C0↑j ...
.text:0040C4A0                 call    _errno
.text:0040C4A5                 mov     dword ptr [eax], 2
.text:0040C4AB                 mov     esi, 0FFFFFFFFh
.text:0040C4B0
.text:0040C4B0 loc_40C4B0:                             ; CODE XREF: sub_40C3D0+108↓j
.text:0040C4B0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040C4B3                 call    free
.text:0040C4B8                 mov     eax, esi
.text:0040C4BA                 mov     ebx, [esp+1Ch+var_8]
.text:0040C4BE                 mov     esi, [esp+1Ch+var_4]
.text:0040C4C2                 add     esp, 1Ch
.text:0040C4C5                 retn
.text:0040C4C6 ; ---------------------------------------------------------------------------
.text:0040C4C6
.text:0040C4C6 loc_40C4C6:                             ; CODE XREF: sub_40C3D0+C9↑j
.text:0040C4C6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040C4C9                 mov     edx, [esp+1Ch+arg_4]
.text:0040C4CD                 mov     [esp+1Ch+var_18], edx
.text:0040C4D1                 call    near ptr loc_40BE2B+5
.text:0040C4D6                 mov     esi, eax
.text:0040C4D8                 jmp     short loc_40C4B0
.text:0040C4D8 ; ---------------------------------------------------------------------------
.text:0040C4DA                 align 10h
.text:0040C4E0
.text:0040C4E0 loc_40C4E0:                             ; CODE XREF: sub_40C3D0+5F↑j
.text:0040C4E0                 push    ebp
.text:0040C4E1                 push    edi
.text:0040C4E2                 push    esi
.text:0040C4E3                 push    ebx
.text:0040C4E4                 sub     esp, 8Ch
.text:0040C4EA                 mov     ebp, [esp+9Ch+arg_0]
.text:0040C4F1                 call    sub_40D8E0
.text:0040C4F6                 test    eax, eax
.text:0040C4F8                 jz      short loc_40C508
.text:0040C4FA                 call    sub_40D830
.text:0040C4FF                 cmp     eax, 0Bh
.text:0040C502                 jle     loc_40C630
.text:0040C508
.text:0040C508 loc_40C508:                             ; CODE XREF: sub_40C3D0+128↑j
.text:0040C508                 cld
.text:0040C509                 xor     eax, eax
.text:0040C50B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040C50F                 mov     ecx, 7
.text:0040C514                 mov     edi, ebx
.text:0040C516                 lea     esi, [esp+9Ch+var_4C]
.text:0040C51A                 rep stosd
.text:0040C51C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040C524                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040C52C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040C534                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040C53C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040C544                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040C54C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040C553                 call    CreateFileA
.text:0040C558                 sub     esp, 1Ch
.text:0040C55B                 mov     edi, eax
.text:0040C55D                 cmp     eax, 0FFFFFFFFh
.text:0040C560                 jz      short loc_40C5D5
.text:0040C562                 mov     [esp+9Ch+var_68], ebp
.text:0040C566                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040C56A                 mov     [esp+9Ch+var_5C], esi
.text:0040C56E                 mov     [esp+9Ch+var_60], 7303h
.text:0040C576                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040C57E                 mov     [esp+9Ch+var_54], 1
.text:0040C586                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040C58E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040C592                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040C59A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040C59E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040C5A6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040C5AA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040C5B2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040C5B5                 call    DeviceIoControl
.text:0040C5BA                 sub     esp, 20h
.text:0040C5BD                 mov     esi, eax
.text:0040C5BF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040C5C2                 call    CloseHandle
.text:0040C5C7                 sub     esp, 4
.text:0040C5CA                 test    esi, esi
.text:0040C5CC                 jz      short loc_40C5D5
.text:0040C5CE                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040C5D3                 jz      short loc_40C5F0
.text:0040C5D5
.text:0040C5D5 loc_40C5D5:                             ; CODE XREF: sub_40C3D0+190↑j
.text:0040C5D5                                         ; sub_40C3D0+1FC↑j
.text:0040C5D5                 call    sub_40CE00
.text:0040C5DA                 mov     edi, eax
.text:0040C5DC                 call    _errno
.text:0040C5E1                 mov     [eax], edi
.text:0040C5E3                 xor     eax, eax
.text:0040C5E5
.text:0040C5E5 loc_40C5E5:                             ; CODE XREF: sub_40C3D0+25A↓j
.text:0040C5E5                                         ; sub_40C3D0+297↓j
.text:0040C5E5                 add     esp, 8Ch
.text:0040C5EB                 pop     ebx
.text:0040C5EC                 pop     esi
.text:0040C5ED                 pop     edi
.text:0040C5EE                 pop     ebp
.text:0040C5EF                 retn
.text:0040C5F0 ; ---------------------------------------------------------------------------
.text:0040C5F0
.text:0040C5F0 loc_40C5F0:                             ; CODE XREF: sub_40C3D0+203↑j
.text:0040C5F0                 mov     edx, [esp+9Ch+var_48]
.text:0040C5F4                 mov     eax, 1
.text:0040C5F9                 mov     ebx, [esp+9Ch+arg_4]
.text:0040C600                 mov     ebp, [esp+9Ch+arg_8]
.text:0040C607                 mov     ecx, [esp+9Ch+arg_C]
.text:0040C60E                 mov     [ebx], edx
.text:0040C610                 mov     edi, [esp+9Ch+var_44]
.text:0040C614                 mov     ebx, [esp+9Ch+arg_10]
.text:0040C61B                 mov     [ebp+0], edi
.text:0040C61E                 mov     esi, [esp+9Ch+var_40]
.text:0040C622                 mov     [ecx], esi
.text:0040C624                 mov     edx, [esp+9Ch+var_3C]
.text:0040C628                 mov     [ebx], edx
.text:0040C62A                 jmp     short loc_40C5E5
.text:0040C62A ; ---------------------------------------------------------------------------
.text:0040C62C                 align 10h
.text:0040C630
.text:0040C630 loc_40C630:                             ; CODE XREF: sub_40C3D0+132↑j
.text:0040C630                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040C633                 mov     eax, [esp+9Ch+arg_C]
.text:0040C63A                 mov     ecx, [esp+9Ch+arg_10]
.text:0040C641                 mov     edx, [esp+9Ch+arg_8]
.text:0040C648                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040C64C                 mov     eax, [esp+9Ch+arg_4]
.text:0040C653                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040C657                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040C65B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040C65F                 call    GetDiskFreeSpaceA
.text:0040C664                 sub     esp, 14h
.text:0040C667                 jmp     loc_40C5E5
.text:0040C667 sub_40C3D0      endp ; sp-analysis failed
.text:0040C667
.text:0040C667 ; ---------------------------------------------------------------------------
.text:0040C66C                 align 10h
.text:0040C670
.text:0040C670 ; =============== S U B R O U T I N E =======================================
.text:0040C670
.text:0040C670
.text:0040C670 ; int __cdecl sub_40C670(char *, int)
.text:0040C670 sub_40C670      proc near               ; CODE XREF: sub_404890+92↑p
.text:0040C670
.text:0040C670 var_12C         = dword ptr -12Ch
.text:0040C670 lpString1       = dword ptr -128h
.text:0040C670 var_124         = dword ptr -124h
.text:0040C670 String1         = byte ptr -11Ch
.text:0040C670 var_C           = dword ptr -0Ch
.text:0040C670 var_8           = dword ptr -8
.text:0040C670 var_4           = dword ptr -4
.text:0040C670 arg_0           = dword ptr  4
.text:0040C670 arg_4           = dword ptr  8
.text:0040C670
.text:0040C670                 sub     esp, 12Ch
.text:0040C676                 mov     [esp+12Ch+var_C], ebx
.text:0040C67D                 mov     ebx, [esp+12Ch+arg_0]
.text:0040C684                 mov     [esp+12Ch+var_4], edi
.text:0040C68B                 mov     edi, [esp+12Ch+arg_4]
.text:0040C692                 test    ebx, ebx
.text:0040C694                 mov     [esp+12Ch+var_8], esi
.text:0040C69B                 jz      short loc_40C6FE
.text:0040C69D                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:0040C6A0                 call    sub_40A450
.text:0040C6A5                 test    eax, eax
.text:0040C6A7                 jz      short loc_40C6F5
.text:0040C6A9                 mov     [esp+12Ch+var_124], 104h
.text:0040C6B1                 lea     esi, [esp+12Ch+String1]
.text:0040C6B5                 mov     [esp+12Ch+lpString1], esi ; lpString1
.text:0040C6B9                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:0040C6BC                 call    sub_40EBC0
.text:0040C6C1                 inc     eax
.text:0040C6C2                 mov     edx, 0FFFFFFFFh
.text:0040C6C7                 jz      short loc_40C6D7
.text:0040C6C9                 mov     [esp+12Ch+lpString1], edi ; int
.text:0040C6CD                 mov     [esp+12Ch+var_12C], esi ; LPCSTR
.text:0040C6D0
.text:0040C6D0 loc_40C6D0:                             ; CODE XREF: sub_40C670+8C↓j
.text:0040C6D0                 call    sub_40E9A0
.text:0040C6D5                 mov     edx, eax
.text:0040C6D7
.text:0040C6D7 loc_40C6D7:                             ; CODE XREF: sub_40C670+57↑j
.text:0040C6D7                                         ; sub_40C670+9E↓j
.text:0040C6D7                 mov     ebx, [esp+12Ch+var_C]
.text:0040C6DE                 mov     eax, edx
.text:0040C6E0                 mov     esi, [esp+12Ch+var_8]
.text:0040C6E7                 mov     edi, [esp+12Ch+var_4]
.text:0040C6EE                 add     esp, 12Ch
.text:0040C6F4                 retn
.text:0040C6F5 ; ---------------------------------------------------------------------------
.text:0040C6F5
.text:0040C6F5 loc_40C6F5:                             ; CODE XREF: sub_40C670+37↑j
.text:0040C6F5                 mov     [esp+12Ch+lpString1], edi
.text:0040C6F9                 mov     [esp+12Ch+var_12C], ebx
.text:0040C6FC                 jmp     short loc_40C6D0
.text:0040C6FE ; ---------------------------------------------------------------------------
.text:0040C6FE
.text:0040C6FE loc_40C6FE:                             ; CODE XREF: sub_40C670+2B↑j
.text:0040C6FE                 call    _errno
.text:0040C703                 mov     dword ptr [eax], 16h
.text:0040C709                 mov     edx, 0FFFFFFFFh
.text:0040C70E                 jmp     short loc_40C6D7
.text:0040C70E sub_40C670      endp
.text:0040C70E
.text:0040C710
.text:0040C710 ; =============== S U B R O U T I N E =======================================
.text:0040C710
.text:0040C710
.text:0040C710 ; int __cdecl sub_40C710(LPCSTR, char *, int)
.text:0040C710 sub_40C710      proc near               ; CODE XREF: sub_40BDC0+1A↑p
.text:0040C710                                         ; sub_40F020+104↓p ...
.text:0040C710
.text:0040C710 var_13C         = dword ptr -13Ch
.text:0040C710 lpString1       = dword ptr -138h
.text:0040C710 var_134         = dword ptr -134h
.text:0040C710 String1         = byte ptr -12Ch
.text:0040C710 var_10          = dword ptr -10h
.text:0040C710 var_C           = dword ptr -0Ch
.text:0040C710 var_8           = dword ptr -8
.text:0040C710 var_4           = dword ptr -4
.text:0040C710 arg_0           = dword ptr  4
.text:0040C710 arg_4           = dword ptr  8
.text:0040C710 arg_8           = dword ptr  0Ch
.text:0040C710
.text:0040C710                 sub     esp, 13Ch
.text:0040C716                 mov     [esp+13Ch+var_10], ebx
.text:0040C71D                 mov     ebx, [esp+13Ch+arg_8]
.text:0040C724                 mov     [esp+13Ch+var_C], esi
.text:0040C72B                 mov     esi, [esp+13Ch+arg_4]
.text:0040C732                 mov     [esp+13Ch+var_8], edi
.text:0040C739                 mov     edi, [esp+13Ch+arg_0]
.text:0040C740                 mov     [esp+13Ch+var_4], ebp
.text:0040C747                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040C74B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040C74F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040C752                 call    sub_40ECA0
.text:0040C757                 cmp     eax, 0FFFFFFFFh
.text:0040C75A                 mov     edx, eax
.text:0040C75C                 jz      short loc_40C76E
.text:0040C75E                 mov     ecx, [ebx]
.text:0040C760                 and     ecx, 0F000h
.text:0040C766                 cmp     ecx, 0A000h
.text:0040C76C                 jz      short loc_40C793
.text:0040C76E
.text:0040C76E loc_40C76E:                             ; CODE XREF: sub_40C710+4C↑j
.text:0040C76E                                         ; sub_40C710+A1↓j ...
.text:0040C76E                 mov     ebx, [esp+13Ch+var_10]
.text:0040C775                 mov     eax, edx
.text:0040C777                 mov     esi, [esp+13Ch+var_C]
.text:0040C77E                 mov     edi, [esp+13Ch+var_8]
.text:0040C785                 mov     ebp, [esp+13Ch+var_4]
.text:0040C78C                 add     esp, 13Ch
.text:0040C792                 retn
.text:0040C793 ; ---------------------------------------------------------------------------
.text:0040C793
.text:0040C793 loc_40C793:                             ; CODE XREF: sub_40C710+5C↑j
.text:0040C793                 mov     [esp+13Ch+var_134], 104h
.text:0040C79B                 lea     ebp, [esp+13Ch+String1]
.text:0040C79F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040C7A3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040C7A6                 call    sub_40EBC0
.text:0040C7AB                 inc     eax
.text:0040C7AC                 mov     edx, 0FFFFFFFFh
.text:0040C7B1                 jz      short loc_40C76E
.text:0040C7B3                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040C7B7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040C7BB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040C7BE                 call    sub_40ECA0
.text:0040C7C3                 mov     edx, eax
.text:0040C7C5                 jmp     short loc_40C76E
.text:0040C7C5 sub_40C710      endp
.text:0040C7C5
.text:0040C7C5 ; ---------------------------------------------------------------------------
.text:0040C7C7                 align 10h
.text:0040C7D0
.text:0040C7D0 ; =============== S U B R O U T I N E =======================================
.text:0040C7D0
.text:0040C7D0
.text:0040C7D0 sub_40C7D0      proc near               ; CODE XREF: sub_403C90+3F↑p
.text:0040C7D0                                         ; sub_40F3A0+3C2↓p
.text:0040C7D0
.text:0040C7D0 var_1C          = dword ptr -1Ch
.text:0040C7D0 var_18          = dword ptr -18h
.text:0040C7D0 var_C           = dword ptr -0Ch
.text:0040C7D0 var_8           = dword ptr -8
.text:0040C7D0 var_4           = dword ptr -4
.text:0040C7D0 arg_0           = dword ptr  4
.text:0040C7D0 arg_4           = dword ptr  8
.text:0040C7D0
.text:0040C7D0                 sub     esp, 1Ch
.text:0040C7D3                 mov     edx, [esp+1Ch+arg_4]
.text:0040C7D7                 mov     [esp+1Ch+var_4], ebx
.text:0040C7DB                 mov     ebx, [esp+1Ch+arg_0]
.text:0040C7DF                 mov     [esp+1Ch+var_18], edx
.text:0040C7E3                 lea     edx, [esp+1Ch+var_C]
.text:0040C7E7                 mov     [esp+1Ch+var_1C], edx
.text:0040C7EA                 call    sub_40ECF0
.text:0040C7EF                 test    eax, eax
.text:0040C7F1                 mov     edx, 0FFFFFFFFh
.text:0040C7F6                 jnz     short loc_40C81A
.text:0040C7F8                 mov     ecx, [esp+1Ch+var_C]
.text:0040C7FC                 mov     edx, 10624DD3h
.text:0040C801                 mov     [ebx], ecx
.text:0040C803                 mov     ecx, [esp+1Ch+var_8]
.text:0040C807                 mov     eax, ecx
.text:0040C809                 imul    edx
.text:0040C80B                 mov     eax, ecx
.text:0040C80D                 sar     eax, 1Fh
.text:0040C810                 sar     edx, 6
.text:0040C813                 sub     edx, eax
.text:0040C815                 mov     [ebx+4], edx
.text:0040C818                 xor     edx, edx
.text:0040C81A
.text:0040C81A loc_40C81A:                             ; CODE XREF: sub_40C7D0+26↑j
.text:0040C81A                 mov     ebx, [esp+1Ch+var_4]
.text:0040C81E                 mov     eax, edx
.text:0040C820                 add     esp, 1Ch
.text:0040C823                 retn
.text:0040C823 sub_40C7D0      endp
.text:0040C823
.text:0040C823 ; ---------------------------------------------------------------------------
.text:0040C824                 align 10h
.text:0040C830
.text:0040C830 ; =============== S U B R O U T I N E =======================================
.text:0040C830
.text:0040C830
.text:0040C830 sub_40C830      proc near               ; CODE XREF: sub_403C90+16↑p
.text:0040C830
.text:0040C830 var_2C          = dword ptr -2Ch
.text:0040C830 var_28          = dword ptr -28h
.text:0040C830 var_24          = dword ptr -24h
.text:0040C830 var_20          = dword ptr -20h
.text:0040C830 var_1C          = dword ptr -1Ch
.text:0040C830 var_18          = dword ptr -18h
.text:0040C830 var_10          = dword ptr -10h
.text:0040C830 var_C           = dword ptr -0Ch
.text:0040C830 var_8           = dword ptr -8
.text:0040C830 var_4           = dword ptr -4
.text:0040C830 arg_0           = dword ptr  4
.text:0040C830 arg_4           = dword ptr  8
.text:0040C830
.text:0040C830                 sub     esp, 2Ch
.text:0040C833                 mov     eax, [esp+2Ch+arg_0]
.text:0040C837                 mov     [esp+2Ch+var_10], ebx
.text:0040C83B                 mov     ebx, 0FFFFFFFFh
.text:0040C840                 test    eax, eax
.text:0040C842                 mov     [esp+2Ch+var_C], esi
.text:0040C846                 mov     [esp+2Ch+var_8], edi
.text:0040C84A                 mov     [esp+2Ch+var_4], ebp
.text:0040C84E                 jz      loc_40C940
.text:0040C854                 test    eax, eax
.text:0040C856                 js      loc_40C933
.text:0040C85C                 sub     eax, 2
.text:0040C85F                 cmp     eax, 1
.text:0040C862                 ja      loc_40C933
.text:0040C868                 mov     ebp, ds:dword_413434
.text:0040C86E                 mov     edi, ds:dword_413430
.text:0040C874                 mov     eax, ebp
.text:0040C876                 or      eax, edi
.text:0040C878                 jz      loc_40C916
.text:0040C87E
.text:0040C87E loc_40C87E:                             ; CODE XREF: sub_40C830+FE↓j
.text:0040C87E                 rdtsc
.text:0040C880                 mov     [esp+2Ch+var_24], edi
.text:0040C884                 mov     ebx, eax
.text:0040C886                 mov     esi, edx
.text:0040C888                 mov     [esp+2Ch+var_20], ebp
.text:0040C88C                 mov     [esp+2Ch+var_2C], eax
.text:0040C88F                 mov     [esp+2Ch+var_28], edx
.text:0040C893                 call    sub_410F20
.text:0040C898                 mov     edx, [esp+2Ch+arg_4]
.text:0040C89C                 mov     [edx], eax
.text:0040C89E                 mov     [esp+2Ch+var_2C], ebx
.text:0040C8A1                 mov     ebx, 3B9ACA00h
.text:0040C8A6                 mov     [esp+2Ch+var_24], edi
.text:0040C8AA                 mov     [esp+2Ch+var_20], ebp
.text:0040C8AE                 mov     [esp+2Ch+var_28], esi
.text:0040C8B2                 call    sub_411040
.text:0040C8B7                 mov     [esp+2Ch+var_1C], eax
.text:0040C8BB                 mov     eax, [esp+2Ch+var_1C]
.text:0040C8BF                 mov     [esp+2Ch+var_18], edx
.text:0040C8C3                 mov     [esp+2Ch+var_24], edi
.text:0040C8C7                 mul     ebx
.text:0040C8C9                 mov     ebx, [esp+2Ch+var_18]
.text:0040C8CD                 mov     [esp+2Ch+var_20], ebp
.text:0040C8D1                 imul    ebx, 3B9ACA00h
.text:0040C8D7                 mov     ecx, eax
.text:0040C8D9                 mov     [esp+2Ch+var_2C], ecx
.text:0040C8DC                 lea     edx, [ebx+edx]
.text:0040C8DF                 mov     [esp+2Ch+var_28], edx
.text:0040C8E3                 call    sub_410F20
.text:0040C8E8                 mov     ebx, [esp+2Ch+arg_4]
.text:0040C8EC                 mov     [ebx+4], eax
.text:0040C8EF                 xor     ebx, ebx
.text:0040C8F1                 jmp     short loc_40C900
.text:0040C8F1 ; ---------------------------------------------------------------------------
.text:0040C8F3                 align 10h
.text:0040C900
.text:0040C900 loc_40C900:                             ; CODE XREF: sub_40C830+C1↑j
.text:0040C900                                         ; sub_40C830+FC↓j ...
.text:0040C900                 mov     eax, ebx
.text:0040C902                 mov     esi, [esp+2Ch+var_C]
.text:0040C906                 mov     ebx, [esp+2Ch+var_10]
.text:0040C90A                 mov     edi, [esp+2Ch+var_8]
.text:0040C90E                 mov     ebp, [esp+2Ch+var_4]
.text:0040C912                 add     esp, 2Ch
.text:0040C915                 retn
.text:0040C916 ; ---------------------------------------------------------------------------
.text:0040C916
.text:0040C916 loc_40C916:                             ; CODE XREF: sub_40C830+48↑j
.text:0040C916                 call    sub_40EDE0
.text:0040C91B                 mov     ds:dword_413434, edx
.text:0040C921                 mov     edi, eax
.text:0040C923                 mov     ebp, edx
.text:0040C925                 mov     ds:dword_413430, eax
.text:0040C92A                 or      edx, edi
.text:0040C92C                 jz      short loc_40C900
.text:0040C92E                 jmp     loc_40C87E
.text:0040C933 ; ---------------------------------------------------------------------------
.text:0040C933
.text:0040C933 loc_40C933:                             ; CODE XREF: sub_40C830+26↑j
.text:0040C933                                         ; sub_40C830+32↑j
.text:0040C933                 call    _errno
.text:0040C938                 mov     dword ptr [eax], 16h
.text:0040C93E                 jmp     short loc_40C900
.text:0040C940 ; ---------------------------------------------------------------------------
.text:0040C940
.text:0040C940 loc_40C940:                             ; CODE XREF: sub_40C830+1E↑j
.text:0040C940                 mov     [esp+2Ch+var_28], 0
.text:0040C948                 mov     edx, [esp+2Ch+arg_4]
.text:0040C94C                 mov     [esp+2Ch+var_2C], edx
.text:0040C94F                 call    sub_40ECF0
.text:0040C954                 mov     ebx, eax
.text:0040C956                 jmp     short loc_40C900
.text:0040C956 sub_40C830      endp
.text:0040C956
.text:0040C956 ; ---------------------------------------------------------------------------
.text:0040C958                 align 10h
.text:0040C960                 xor     eax, eax
.text:0040C962                 retn
.text:0040C962 ; ---------------------------------------------------------------------------
.text:0040C963                 align 10h
.text:0040C970
.text:0040C970 ; =============== S U B R O U T I N E =======================================
.text:0040C970
.text:0040C970
.text:0040C970 sub_40C970      proc near               ; CODE XREF: sub_404890+5F↑p
.text:0040C970
.text:0040C970 FileHandle      = dword ptr -0Ch
.text:0040C970 lpFileName      = dword ptr -8
.text:0040C970 var_4           = dword ptr -4
.text:0040C970 arg_0           = dword ptr  4
.text:0040C970 arg_4           = dword ptr  8
.text:0040C970
.text:0040C970                 sub     esp, 0Ch
.text:0040C973                 mov     edx, [esp+0Ch+arg_0]
.text:0040C977                 mov     [esp+0Ch+FileHandle], edx ; FileHandle
.text:0040C97A                 call    _get_osfhandle
.text:0040C97F                 mov     [esp+0Ch+FileHandle], eax ; HANDLE
.text:0040C982                 mov     ecx, [esp+0Ch+arg_4]
.text:0040C986                 mov     [esp+0Ch+lpFileName], 0 ; lpFileName
.text:0040C98E                 mov     [esp+0Ch+var_4], ecx ; int
.text:0040C992                 call    sub_40E8A0
.text:0040C997                 add     esp, 0Ch
.text:0040C99A                 retn
.text:0040C99A sub_40C970      endp
.text:0040C99A
.text:0040C99A ; ---------------------------------------------------------------------------
.text:0040C99B                 align 10h
.text:0040C9A0 ; const char asc_40C9A0[2]
.text:0040C9A0 asc_40C9A0      db '=',0                ; DATA XREF: sub_40C9B0+A2↓o
.text:0040C9A0                                         ; sub_40CA90+72↓o
.text:0040C9A2                 align 10h
.text:0040C9B0
.text:0040C9B0 ; =============== S U B R O U T I N E =======================================
.text:0040C9B0
.text:0040C9B0
.text:0040C9B0 ; int __cdecl sub_40C9B0(char *VarName, char *Source, int)
.text:0040C9B0 sub_40C9B0      proc near               ; CODE XREF: sub_406830+2C1↑p
.text:0040C9B0                                         ; sub_406830+58C↑p ...
.text:0040C9B0
.text:0040C9B0 Str             = dword ptr -1Ch
.text:0040C9B0 Val             = dword ptr -18h
.text:0040C9B0 var_C           = dword ptr -0Ch
.text:0040C9B0 var_8           = dword ptr -8
.text:0040C9B0 var_4           = dword ptr -4
.text:0040C9B0 VarName         = dword ptr  4
.text:0040C9B0 Source          = dword ptr  8
.text:0040C9B0 arg_8           = dword ptr  0Ch
.text:0040C9B0
.text:0040C9B0                 sub     esp, 1Ch
.text:0040C9B3                 mov     [esp+1Ch+var_C], ebx
.text:0040C9B7                 mov     ebx, [esp+1Ch+VarName]
.text:0040C9BB                 mov     [esp+1Ch+var_4], edi
.text:0040C9BF                 mov     edi, [esp+1Ch+Source]
.text:0040C9C3                 test    ebx, ebx
.text:0040C9C5                 mov     [esp+1Ch+var_8], esi
.text:0040C9C9                 jz      short loc_40C9D0
.text:0040C9CB                 cmp     byte ptr [ebx], 0
.text:0040C9CE                 jnz     short loc_40C9F0
.text:0040C9D0
.text:0040C9D0 loc_40C9D0:                             ; CODE XREF: sub_40C9B0+19↑j
.text:0040C9D0                                         ; sub_40C9B0+52↓j
.text:0040C9D0                 call    _errno
.text:0040C9D5                 mov     dword ptr [eax], 16h
.text:0040C9DB                 mov     eax, 0FFFFFFFFh
.text:0040C9E0
.text:0040C9E0 loc_40C9E0:                             ; CODE XREF: sub_40C9B0+6B↓j
.text:0040C9E0                                         ; sub_40C9B0+94↓j ...
.text:0040C9E0                 mov     ebx, [esp+1Ch+var_C]
.text:0040C9E4                 mov     esi, [esp+1Ch+var_8]
.text:0040C9E8                 mov     edi, [esp+1Ch+var_4]
.text:0040C9EC                 add     esp, 1Ch
.text:0040C9EF                 retn
.text:0040C9F0 ; ---------------------------------------------------------------------------
.text:0040C9F0
.text:0040C9F0 loc_40C9F0:                             ; CODE XREF: sub_40C9B0+1E↑j
.text:0040C9F0                 mov     [esp+1Ch+Val], 3Dh ; '=' ; Val
.text:0040C9F8                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040C9FB                 call    strchr
.text:0040CA00                 test    eax, eax
.text:0040CA02                 jnz     short loc_40C9D0
.text:0040CA04                 mov     [esp+1Ch+Str], ebx ; VarName
.text:0040CA07                 call    getenv
.text:0040CA0C                 test    eax, eax
.text:0040CA0E                 jz      short loc_40CA1D
.text:0040CA10                 mov     ecx, [esp+1Ch+arg_8]
.text:0040CA14                 mov     eax, 0FFFFFFFFh
.text:0040CA19                 test    ecx, ecx
.text:0040CA1B                 jz      short loc_40C9E0
.text:0040CA1D
.text:0040CA1D loc_40CA1D:                             ; CODE XREF: sub_40C9B0+5E↑j
.text:0040CA1D                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CA20                 call    strlen
.text:0040CA25                 mov     [esp+1Ch+Str], edi ; Str
.text:0040CA28                 mov     esi, eax
.text:0040CA2A                 call    strlen
.text:0040CA2F                 lea     edx, [eax+esi+2]
.text:0040CA33                 mov     [esp+1Ch+Str], edx ; Size
.text:0040CA36                 call    malloc
.text:0040CA3B                 mov     esi, eax
.text:0040CA3D                 test    esi, esi
.text:0040CA3F                 mov     eax, 0FFFFFFFFh
.text:0040CA44                 jz      short loc_40C9E0
.text:0040CA46                 mov     [esp+1Ch+Val], ebx ; Source
.text:0040CA4A                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040CA4D                 call    strcpy
.text:0040CA52                 mov     [esp+1Ch+Val], offset asc_40C9A0 ; "="
.text:0040CA5A                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040CA5D                 call    strcat
.text:0040CA62                 mov     [esp+1Ch+Val], edi ; Source
.text:0040CA66                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040CA69                 call    strcat
.text:0040CA6E                 mov     [esp+1Ch+Str], esi ; EnvString
.text:0040CA71                 call    _putenv
.text:0040CA76                 mov     [esp+1Ch+Str], esi ; Block
.text:0040CA79                 mov     edi, eax
.text:0040CA7B                 call    free
.text:0040CA80                 mov     eax, edi
.text:0040CA82                 jmp     loc_40C9E0
.text:0040CA82 sub_40C9B0      endp
.text:0040CA82
.text:0040CA82 ; ---------------------------------------------------------------------------
.text:0040CA87                 align 10h
.text:0040CA90
.text:0040CA90 ; =============== S U B R O U T I N E =======================================
.text:0040CA90
.text:0040CA90
.text:0040CA90 ; int __cdecl sub_40CA90(char *Source)
.text:0040CA90 sub_40CA90      proc near               ; CODE XREF: sub_406830+305↑p
.text:0040CA90
.text:0040CA90 Str             = dword ptr -1Ch
.text:0040CA90 Val             = dword ptr -18h
.text:0040CA90 var_8           = dword ptr -8
.text:0040CA90 var_4           = dword ptr -4
.text:0040CA90 Source          = dword ptr  4
.text:0040CA90
.text:0040CA90                 sub     esp, 1Ch
.text:0040CA93                 mov     [esp+1Ch+var_8], ebx
.text:0040CA97                 mov     ebx, [esp+1Ch+Source]
.text:0040CA9B                 mov     [esp+1Ch+var_4], esi
.text:0040CA9F                 test    ebx, ebx
.text:0040CAA1                 jz      short loc_40CAA8
.text:0040CAA3                 cmp     byte ptr [ebx], 0
.text:0040CAA6                 jnz     short loc_40CAC4
.text:0040CAA8
.text:0040CAA8 loc_40CAA8:                             ; CODE XREF: sub_40CA90+11↑j
.text:0040CAA8                                         ; sub_40CA90+46↓j
.text:0040CAA8                 call    _errno
.text:0040CAAD                 mov     dword ptr [eax], 16h
.text:0040CAB3                 mov     eax, 0FFFFFFFFh
.text:0040CAB8
.text:0040CAB8 loc_40CAB8:                             ; CODE XREF: sub_40CA90+64↓j
.text:0040CAB8                                         ; sub_40CA90+96↓j
.text:0040CAB8                 mov     ebx, [esp+1Ch+var_8]
.text:0040CABC                 mov     esi, [esp+1Ch+var_4]
.text:0040CAC0                 add     esp, 1Ch
.text:0040CAC3                 retn
.text:0040CAC4 ; ---------------------------------------------------------------------------
.text:0040CAC4
.text:0040CAC4 loc_40CAC4:                             ; CODE XREF: sub_40CA90+16↑j
.text:0040CAC4                 mov     [esp+1Ch+Val], 3Dh ; '=' ; Val
.text:0040CACC                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CACF                 call    strchr
.text:0040CAD4                 test    eax, eax
.text:0040CAD6                 jnz     short loc_40CAA8
.text:0040CAD8                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CADB                 call    strlen
.text:0040CAE0                 add     eax, 2
.text:0040CAE3                 mov     [esp+1Ch+Str], eax ; Size
.text:0040CAE6                 call    malloc
.text:0040CAEB                 mov     esi, eax
.text:0040CAED                 test    esi, esi
.text:0040CAEF                 mov     eax, 0FFFFFFFFh
.text:0040CAF4                 jz      short loc_40CAB8
.text:0040CAF6                 mov     [esp+1Ch+Val], ebx ; Source
.text:0040CAFA                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040CAFD                 call    strcpy
.text:0040CB02                 mov     [esp+1Ch+Val], offset asc_40C9A0 ; "="
.text:0040CB0A                 mov     [esp+1Ch+Str], esi ; Destination
.text:0040CB0D                 call    strcat
.text:0040CB12                 mov     [esp+1Ch+Str], esi ; EnvString
.text:0040CB15                 call    _putenv
.text:0040CB1A                 mov     [esp+1Ch+Str], esi ; Block
.text:0040CB1D                 mov     ebx, eax
.text:0040CB1F                 call    free
.text:0040CB24                 mov     eax, ebx
.text:0040CB26                 jmp     short loc_40CAB8
.text:0040CB26 sub_40CA90      endp
.text:0040CB26
.text:0040CB26 ; ---------------------------------------------------------------------------
.text:0040CB28                 align 10h
.text:0040CB30                 sub     esp, 0Ch
.text:0040CB33                 call    _errno
.text:0040CB38                 mov     dword ptr [eax], 28h ; '('
.text:0040CB3E                 mov     eax, 0FFFFFFFFh
.text:0040CB43                 add     esp, 0Ch
.text:0040CB46                 retn
.text:0040CB46 ; ---------------------------------------------------------------------------
.text:0040CB47                 align 10h
.text:0040CB50                 sub     esp, 0Ch
.text:0040CB53                 call    _errno
.text:0040CB58                 mov     dword ptr [eax], 28h ; '('
.text:0040CB5E                 add     esp, 0Ch
.text:0040CB61                 retn
.text:0040CB61 ; ---------------------------------------------------------------------------
.text:0040CB62                 align 10h
.text:0040CB70
.text:0040CB70 ; =============== S U B R O U T I N E =======================================
.text:0040CB70
.text:0040CB70 ; Attributes: info_from_lumina
.text:0040CB70
.text:0040CB70 ___get_errno    proc near               ; CODE XREF: sub_40CE00+B↓p
.text:0040CB70
.text:0040CB70 arg_0           = dword ptr  4
.text:0040CB70
.text:0040CB70                 mov     eax, [esp+arg_0]
.text:0040CB74                 cmp     eax, 53h ; 'S'
.text:0040CB77                 jg      loc_40CC70
.text:0040CB7D                 cmp     eax, 52h ; 'R'
.text:0040CB80                 jge     short loc_40CBD2
.text:0040CB82                 cmp     eax, 0Fh
.text:0040CB85                 jz      short loc_40CBA0
.text:0040CB87                 cmp     eax, 0Fh
.text:0040CB8A                 jg      short loc_40CC00
.text:0040CB8C                 cmp     eax, 9
.text:0040CB8F                 jg      short loc_40CBE0
.text:0040CB91                 cmp     eax, 7
.text:0040CB94                 jge     short loc_40CBD9
.text:0040CB96                 cmp     eax, 3
.text:0040CB99                 jg      short loc_40CBBA
.text:0040CB9B                 cmp     eax, 2
.text:0040CB9E                 jl      short loc_40CBB3
.text:0040CBA0
.text:0040CBA0 loc_40CBA0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040CBA0                                         ; ___get_errno+9D↓j ...
.text:0040CBA0                 mov     edx, 2
.text:0040CBA5                 lea     esi, [esi+0]
.text:0040CBA9                 lea     edi, [edi+0]
.text:0040CBB0
.text:0040CBB0 loc_40CBB0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040CBB0                                         ; ___get_errno+59↓j ...
.text:0040CBB0                 mov     eax, edx
.text:0040CBB2                 retn
.text:0040CBB3 ; ---------------------------------------------------------------------------
.text:0040CBB3
.text:0040CBB3 loc_40CBB3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040CBB3                                         ; ___get_errno+78↓j ...
.text:0040CBB3                 mov     edx, 16h
.text:0040CBB8                 jmp     short loc_40CBB0
.text:0040CBBA ; ---------------------------------------------------------------------------
.text:0040CBBA
.text:0040CBBA loc_40CBBA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040CBBA                 cmp     eax, 5
.text:0040CBBD                 jz      short loc_40CBD2
.text:0040CBBF                 cmp     eax, 5
.text:0040CBC2                 jg      short loc_40CBCB
.text:0040CBC4                 mov     edx, 18h
.text:0040CBC9                 jmp     short loc_40CBB0
.text:0040CBCB ; ---------------------------------------------------------------------------
.text:0040CBCB
.text:0040CBCB loc_40CBCB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040CBCB                                         ; ___get_errno+180↓j
.text:0040CBCB                 mov     edx, 9
.text:0040CBD0                 jmp     short loc_40CBB0
.text:0040CBD2 ; ---------------------------------------------------------------------------
.text:0040CBD2
.text:0040CBD2 loc_40CBD2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040CBD2                                         ; ___get_errno+4D↑j ...
.text:0040CBD2                 mov     edx, 0Dh
.text:0040CBD7                 jmp     short loc_40CBB0
.text:0040CBD9 ; ---------------------------------------------------------------------------
.text:0040CBD9
.text:0040CBD9 loc_40CBD9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040CBD9                                         ; ___get_errno+73↓j ...
.text:0040CBD9                 mov     edx, 0Ch
.text:0040CBDE                 jmp     short loc_40CBB0
.text:0040CBE0 ; ---------------------------------------------------------------------------
.text:0040CBE0
.text:0040CBE0 loc_40CBE0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040CBE0                 cmp     eax, 0Dh
.text:0040CBE3                 jg      short loc_40CBD9
.text:0040CBE5                 cmp     eax, 0Ch
.text:0040CBE8                 jge     short loc_40CBB3
.text:0040CBEA                 cmp     eax, 0Ah
.text:0040CBED                 mov     edx, 7
.text:0040CBF2                 jz      short loc_40CBB0
.text:0040CBF4                 cmp     eax, 0Bh
.text:0040CBF7                 jnz     short loc_40CBB3
.text:0040CBF9
.text:0040CBF9 loc_40CBF9:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040CBF9                 mov     edx, 8
.text:0040CBFE                 jmp     short loc_40CBB0
.text:0040CC00 ; ---------------------------------------------------------------------------
.text:0040CC00
.text:0040CC00 loc_40CC00:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040CC00                 cmp     eax, 22h ; '"'
.text:0040CC03                 jg      short loc_40CC34
.text:0040CC05                 cmp     eax, 16h
.text:0040CC08                 jge     short loc_40CBD2
.text:0040CC0A                 cmp     eax, 12h
.text:0040CC0D                 jz      short loc_40CBA0
.text:0040CC0F                 cmp     eax, 12h
.text:0040CC12                 jg      short loc_40CC25
.text:0040CC14                 cmp     eax, 10h
.text:0040CC17                 jz      short loc_40CBD2
.text:0040CC19                 mov     edx, 12h
.text:0040CC1E                 cmp     eax, 11h
.text:0040CC21
.text:0040CC21 loc_40CC21:                             ; CODE XREF: ___get_errno+172↓j
.text:0040CC21                                         ; ___get_errno+24C↓j ...
.text:0040CC21                 jnz     short loc_40CBB3
.text:0040CC23                 jmp     short loc_40CBB0
.text:0040CC25 ; ---------------------------------------------------------------------------
.text:0040CC25
.text:0040CC25 loc_40CC25:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040CC25                 cmp     eax, 14h
.text:0040CC28                 jle     short loc_40CBD2
.text:0040CC2A
.text:0040CC2A loc_40CC2A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040CC2A                 mov     edx, 10h
.text:0040CC2F                 jmp     loc_40CBB0
.text:0040CC34 ; ---------------------------------------------------------------------------
.text:0040CC34
.text:0040CC34 loc_40CC34:                             ; CODE XREF: ___get_errno+93↑j
.text:0040CC34                 cmp     eax, 41h ; 'A'
.text:0040CC37                 jz      short loc_40CBD2
.text:0040CC39                 cmp     eax, 41h ; 'A'
.text:0040CC3C                 jg      short loc_40CC51
.text:0040CC3E                 cmp     eax, 24h ; '$'
.text:0040CC41                 jz      short loc_40CBD2
.text:0040CC43                 cmp     eax, 35h ; '5'
.text:0040CC46                 jnz     loc_40CBB3
.text:0040CC4C                 jmp     loc_40CBA0
.text:0040CC51 ; ---------------------------------------------------------------------------
.text:0040CC51
.text:0040CC51 loc_40CC51:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040CC51                 cmp     eax, 43h ; 'C'
.text:0040CC54                 jz      loc_40CBA0
.text:0040CC5A                 cmp     eax, 50h ; 'P'
.text:0040CC5D                 jnz     loc_40CBB3
.text:0040CC63
.text:0040CC63 loc_40CC63:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040CC63                 mov     edx, 11h
.text:0040CC68                 jmp     loc_40CBB0
.text:0040CC68 ; ---------------------------------------------------------------------------
.text:0040CC6D                 align 10h
.text:0040CC70
.text:0040CC70 loc_40CC70:                             ; CODE XREF: ___get_errno+7↑j
.text:0040CC70                 cmp     eax, 0A1h ; '¡'
.text:0040CC75                 jz      loc_40CBA0
.text:0040CC7B                 cmp     eax, 0A1h ; '¡'
.text:0040CC80                 jg      loc_40CD30
.text:0040CC86                 cmp     eax, 81h
.text:0040CC8B                 jg      short loc_40CCF5
.text:0040CC8D                 cmp     eax, 80h ; '€'
.text:0040CC92                 mov     edx, 0Ah
.text:0040CC97                 jge     loc_40CBB0
.text:0040CC9D                 cmp     eax, 6Ch ; 'l'
.text:0040CCA0                 jz      loc_40CBD2
.text:0040CCA6                 cmp     eax, 6Ch ; 'l'
.text:0040CCA9                 jg      short loc_40CCC7
.text:0040CCAB                 cmp     eax, 57h ; 'W'
.text:0040CCAE                 jz      loc_40CBB3
.text:0040CCB4                 cmp     eax, 59h ; 'Y'
.text:0040CCB7                 jnz     loc_40CBB3
.text:0040CCBD
.text:0040CCBD loc_40CCBD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040CCBD                                         ; ___get_errno+23C↓j
.text:0040CCBD                 mov     edx, 0Bh
.text:0040CCC2                 jmp     loc_40CBB0
.text:0040CCC7 ; ---------------------------------------------------------------------------
.text:0040CCC7
.text:0040CCC7 loc_40CCC7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040CCC7                 cmp     eax, 70h ; 'p'
.text:0040CCCA                 mov     edx, 1Ch
.text:0040CCCF                 jz      loc_40CBB0
.text:0040CCD5                 cmp     eax, 70h ; 'p'
.text:0040CCD8                 jg      short loc_40CCE7
.text:0040CCDA                 mov     edx, 20h ; ' '
.text:0040CCDF                 cmp     eax, 6Dh ; 'm'
.text:0040CCE2                 jmp     loc_40CC21
.text:0040CCE7 ; ---------------------------------------------------------------------------
.text:0040CCE7
.text:0040CCE7 loc_40CCE7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040CCE7                 cmp     eax, 72h ; 'r'
.text:0040CCEA
.text:0040CCEA loc_40CCEA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040CCEA                 jnz     loc_40CBB3
.text:0040CCF0                 jmp     loc_40CBCB
.text:0040CCF5 ; ---------------------------------------------------------------------------
.text:0040CCF5
.text:0040CCF5 loc_40CCF5:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040CCF5                 cmp     eax, 84h ; '„'
.text:0040CCFA                 jz      loc_40CBD2
.text:0040CD00                 cmp     eax, 84h ; '„'
.text:0040CD05                 jg      short loc_40CD0E
.text:0040CD07                 cmp     eax, 82h ; '‚'
.text:0040CD0C                 jmp     short loc_40CCEA
.text:0040CD0E ; ---------------------------------------------------------------------------
.text:0040CD0E
.text:0040CD0E loc_40CD0E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040CD0E                 cmp     eax, 91h ; '‘'
.text:0040CD13                 mov     edx, 29h ; ')'
.text:0040CD18                 jz      loc_40CBB0
.text:0040CD1E                 cmp     eax, 9Eh ; 'ž'
.text:0040CD23
.text:0040CD23 loc_40CD23:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040CD23                 jnz     loc_40CBB3
.text:0040CD29                 jmp     loc_40CBD2
.text:0040CD29 ; ---------------------------------------------------------------------------
.text:0040CD2E                 align 10h
.text:0040CD30
.text:0040CD30 loc_40CD30:                             ; CODE XREF: ___get_errno+110↑j
.text:0040CD30                 cmp     eax, 0CEh ; 'Î'
.text:0040CD35                 jz      loc_40CBA0
.text:0040CD3B                 cmp     eax, 0CEh ; 'Î'
.text:0040CD40                 jg      short loc_40CD90
.text:0040CD42                 cmp     eax, 0AAh ; 'ª'
.text:0040CD47                 jz      loc_40CC2A
.text:0040CD4D                 cmp     eax, 0AAh ; 'ª'
.text:0040CD52                 jg      short loc_40CD66
.text:0040CD54                 cmp     eax, 0A4h ; '¤'
.text:0040CD59                 jz      loc_40CCBD
.text:0040CD5F                 cmp     eax, 0A7h ; '§'
.text:0040CD64                 jmp     short loc_40CD23
.text:0040CD66 ; ---------------------------------------------------------------------------
.text:0040CD66
.text:0040CD66 loc_40CD66:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040CD66                 cmp     eax, 0B7h ; '·'
.text:0040CD6B                 jz      loc_40CC63
.text:0040CD71                 cmp     eax, 0B7h ; '·'
.text:0040CD76                 jl      loc_40CBB3
.text:0040CD7C                 sub     eax, 0BCh ; '¼'
.text:0040CD81                 cmp     eax, 0Eh
.text:0040CD84                 ja      loc_40CBB3
.text:0040CD8A                 jmp     loc_40CBF9
.text:0040CD8A ; ---------------------------------------------------------------------------
.text:0040CD8F                 align 10h
.text:0040CD90
.text:0040CD90 loc_40CD90:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040CD90                 cmp     eax, 46Bh
.text:0040CD95                 mov     edx, 24h ; '$'
.text:0040CD9A                 jz      loc_40CBB0
.text:0040CDA0                 cmp     eax, 46Bh
.text:0040CDA5                 jg      short loc_40CDC1
.text:0040CDA7                 cmp     eax, 0D7h ; '×'
.text:0040CDAC                 jz      loc_40CCBD
.text:0040CDB2                 mov     edx, 5
.text:0040CDB7                 cmp     eax, 45Dh
.text:0040CDBC                 jmp     loc_40CC21
.text:0040CDC1 ; ---------------------------------------------------------------------------
.text:0040CDC1
.text:0040CDC1 loc_40CDC1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040CDC1                 cmp     eax, 4D5h
.text:0040CDC6                 mov     edx, 4
.text:0040CDCB                 jz      loc_40CBB0
.text:0040CDD1                 cmp     eax, 4D5h
.text:0040CDD6                 jg      short loc_40CDE7
.text:0040CDD8                 mov     edx, 13h
.text:0040CDDD                 cmp     eax, 4B0h
.text:0040CDE2                 jmp     loc_40CC21
.text:0040CDE7 ; ---------------------------------------------------------------------------
.text:0040CDE7
.text:0040CDE7 loc_40CDE7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040CDE7                 cmp     eax, 718h
.text:0040CDEC                 jnz     loc_40CBB3
.text:0040CDF2                 jmp     loc_40CBD9
.text:0040CDF2 ___get_errno    endp
.text:0040CDF2
.text:0040CDF2 ; ---------------------------------------------------------------------------
.text:0040CDF7                 align 10h
.text:0040CE00
.text:0040CE00 ; =============== S U B R O U T I N E =======================================
.text:0040CE00
.text:0040CE00
.text:0040CE00 sub_40CE00      proc near               ; CODE XREF: sub_40ECA0:loc_40B0CD↑p
.text:0040CE00                                         ; sub_40B670:loc_40B6D8↑p ...
.text:0040CE00
.text:0040CE00 var_C           = dword ptr -0Ch
.text:0040CE00
.text:0040CE00                 sub     esp, 0Ch
.text:0040CE03                 call    GetLastError
.text:0040CE08                 mov     [esp+0Ch+var_C], eax
.text:0040CE0B                 call    ___get_errno
.text:0040CE10                 add     esp, 0Ch
.text:0040CE13                 retn
.text:0040CE13 sub_40CE00      endp
.text:0040CE13
.text:0040CE13 ; ---------------------------------------------------------------------------
.text:0040CE14                 align 10h
.text:0040CE20
.text:0040CE20 ; =============== S U B R O U T I N E =======================================
.text:0040CE20
.text:0040CE20
.text:0040CE20 sub_40CE20      proc near               ; CODE XREF: .text:0040B5E3↑p
.text:0040CE20                                         ; .text:0040B633↑p
.text:0040CE20
.text:0040CE20 arg_4           = dword ptr  8
.text:0040CE20
.text:0040CE20                 sub     esp, 0Ch
.text:0040CE23                 mov     edx, [esp+0Ch+arg_4]
.text:0040CE27                 test    edx, edx
.text:0040CE29                 jz      short loc_40CE30
.text:0040CE2B                 add     esp, 0Ch
.text:0040CE2E                 jmp     short sub_40CE70
.text:0040CE30 ; ---------------------------------------------------------------------------
.text:0040CE30
.text:0040CE30 loc_40CE30:                             ; CODE XREF: sub_40CE20+9↑j
.text:0040CE30                 call    _errno
.text:0040CE35                 mov     dword ptr [eax], 16h
.text:0040CE3B                 xor     eax, eax
.text:0040CE3D                 add     esp, 0Ch
.text:0040CE40                 retn
.text:0040CE40 sub_40CE20      endp
.text:0040CE40
.text:0040CE41 ; ---------------------------------------------------------------------------
.text:0040CE41                 jmp     short sub_40CE50
.text:0040CE41 ; ---------------------------------------------------------------------------
.text:0040CE43                 align 10h
.text:0040CE50
.text:0040CE50 ; =============== S U B R O U T I N E =======================================
.text:0040CE50
.text:0040CE50
.text:0040CE50 ; int __cdecl sub_40CE50(LPCSTR)
.text:0040CE50 sub_40CE50      proc near               ; CODE XREF: sub_40ECA0-3C7C↑p
.text:0040CE50                                         ; .text:0040B7D8↑p ...
.text:0040CE50
.text:0040CE50 lpFileName      = dword ptr -0Ch
.text:0040CE50 Destination     = dword ptr -8
.text:0040CE50 arg_0           = dword ptr  4
.text:0040CE50
.text:0040CE50                 sub     esp, 0Ch
.text:0040CE53                 mov     edx, [esp+0Ch+arg_0]
.text:0040CE57                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040CE5F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040CE62                 call    sub_40CE70
.text:0040CE67                 add     esp, 0Ch
.text:0040CE6A                 retn
.text:0040CE6A sub_40CE50      endp
.text:0040CE6A
.text:0040CE6A ; ---------------------------------------------------------------------------
.text:0040CE6B                 align 10h
.text:0040CE70
.text:0040CE70 ; =============== S U B R O U T I N E =======================================
.text:0040CE70
.text:0040CE70
.text:0040CE70 ; int __cdecl sub_40CE70(LPCSTR lpFileName, char *Destination)
.text:0040CE70 sub_40CE70      proc near               ; CODE XREF: sub_40CE20+E↑j
.text:0040CE70                                         ; sub_40CE50+12↑p
.text:0040CE70
.text:0040CE70 Size            = dword ptr -2Ch
.text:0040CE70 nBufferLength   = dword ptr -28h
.text:0040CE70 lpBuffer        = dword ptr -24h
.text:0040CE70 lpFilePart      = dword ptr -20h
.text:0040CE70 FilePart        = dword ptr -14h
.text:0040CE70 lpFileName      = dword ptr  4
.text:0040CE70 Destination     = dword ptr  8
.text:0040CE70
.text:0040CE70                 push    ebp
.text:0040CE71                 push    edi
.text:0040CE72                 push    esi
.text:0040CE73                 push    ebx
.text:0040CE74                 sub     esp, 1Ch
.text:0040CE77                 mov     edi, [esp+2Ch+lpFileName]
.text:0040CE7B                 mov     ebp, [esp+2Ch+Destination]
.text:0040CE7F                 test    edi, edi
.text:0040CE81                 jz      loc_40CF89
.text:0040CE87                 cmp     byte ptr [edi], 0
.text:0040CE8A                 jz      loc_40CF7C
.text:0040CE90                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040CE97                 call    malloc
.text:0040CE9C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040CEA0                 lea     edx, [esp+2Ch+FilePart]
.text:0040CEA4                 mov     ebx, eax
.text:0040CEA6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040CEAA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040CEB2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040CEB5                 call    GetFullPathNameA
.text:0040CEBA                 sub     esp, 10h
.text:0040CEBD                 mov     esi, eax
.text:0040CEBF                 test    eax, eax
.text:0040CEC1                 jz      loc_40CF6A
.text:0040CEC7                 cmp     eax, 104h
.text:0040CECC                 jle     short loc_40CEDD
.text:0040CECE                 test    ebp, ebp
.text:0040CED0                 jz      short loc_40CF39
.text:0040CED2                 call    _errno
.text:0040CED7                 mov     dword ptr [eax], 26h ; '&'
.text:0040CEDD
.text:0040CEDD loc_40CEDD:                             ; CODE XREF: sub_40CE70+5C↑j
.text:0040CEDD                                         ; sub_40CE70+F5↓j
.text:0040CEDD                 call    _errno
.text:0040CEE2                 mov     edi, [eax]
.text:0040CEE4                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040CEEC                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040CEEF                 call    sub_40CFA0
.text:0040CEF4                 test    eax, eax
.text:0040CEF6                 jnz     short loc_40CF10
.text:0040CEF8                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040CEFD                 cmp     al, 2Fh ; '/'
.text:0040CEFF                 jz      short loc_40CF10
.text:0040CF01                 cmp     al, 5Ch ; '\'
.text:0040CF03                 jz      short loc_40CF10
.text:0040CF05                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040CF09                 mov     byte ptr [esi+ebx+1], 0
.text:0040CF0E                 mov     esi, esi
.text:0040CF10
.text:0040CF10 loc_40CF10:                             ; CODE XREF: sub_40CE70+86↑j
.text:0040CF10                                         ; sub_40CE70+8F↑j ...
.text:0040CF10                 call    _errno
.text:0040CF15                 mov     [eax], edi
.text:0040CF17                 mov     [esp+2Ch+Size], ebx
.text:0040CF1A                 call    sub_40B4D0
.text:0040CF1F                 test    ebp, ebp
.text:0040CF21                 mov     eax, ebx
.text:0040CF23                 jz      short loc_40CF31
.text:0040CF25                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040CF29                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040CF2C                 call    strcpy
.text:0040CF31
.text:0040CF31 loc_40CF31:                             ; CODE XREF: sub_40CE70+B3↑j
.text:0040CF31                                         ; sub_40CE70+10A↓j
.text:0040CF31                 add     esp, 1Ch
.text:0040CF34                 pop     ebx
.text:0040CF35                 pop     esi
.text:0040CF36                 pop     edi
.text:0040CF37                 pop     ebp
.text:0040CF38                 retn
.text:0040CF39 ; ---------------------------------------------------------------------------
.text:0040CF39
.text:0040CF39 loc_40CF39:                             ; CODE XREF: sub_40CE70+60↑j
.text:0040CF39                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040CF3C                 lea     ecx, [eax+2]
.text:0040CF3F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040CF43                 call    realloc
.text:0040CF48                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040CF4C                 lea     edx, [esp+2Ch+FilePart]
.text:0040CF50                 mov     ebx, eax
.text:0040CF52                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040CF56                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040CF5A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040CF5D                 call    GetFullPathNameA
.text:0040CF62                 sub     esp, 10h
.text:0040CF65                 jmp     loc_40CEDD
.text:0040CF6A ; ---------------------------------------------------------------------------
.text:0040CF6A
.text:0040CF6A loc_40CF6A:                             ; CODE XREF: sub_40CE70+51↑j
.text:0040CF6A                 call    sub_40CE00
.text:0040CF6F                 mov     esi, eax
.text:0040CF71                 call    _errno
.text:0040CF76                 mov     [eax], esi
.text:0040CF78
.text:0040CF78 loc_40CF78:                             ; CODE XREF: sub_40CE70+117↓j
.text:0040CF78                                         ; sub_40CE70+124↓j
.text:0040CF78                 xor     eax, eax
.text:0040CF7A                 jmp     short loc_40CF31
.text:0040CF7C ; ---------------------------------------------------------------------------
.text:0040CF7C
.text:0040CF7C loc_40CF7C:                             ; CODE XREF: sub_40CE70+1A↑j
.text:0040CF7C                 call    _errno
.text:0040CF81                 mov     dword ptr [eax], 2
.text:0040CF87                 jmp     short loc_40CF78
.text:0040CF89 ; ---------------------------------------------------------------------------
.text:0040CF89
.text:0040CF89 loc_40CF89:                             ; CODE XREF: sub_40CE70+11↑j
.text:0040CF89                 call    _errno
.text:0040CF8E                 mov     dword ptr [eax], 16h
.text:0040CF94                 jmp     short loc_40CF78
.text:0040CF94 sub_40CE70      endp
.text:0040CF94
.text:0040CF94 ; ---------------------------------------------------------------------------
.text:0040CF96                 align 10h
.text:0040CFA0
.text:0040CFA0 ; =============== S U B R O U T I N E =======================================
.text:0040CFA0
.text:0040CFA0
.text:0040CFA0 ; int __cdecl sub_40CFA0(LPCSTR lpFileName, int)
.text:0040CFA0 sub_40CFA0      proc near               ; CODE XREF: sub_40ECA0-3C8D↑p
.text:0040CFA0                                         ; .text:0040B4B2↑p ...
.text:0040CFA0
.text:0040CFA0 uMode           = dword ptr -1Ch
.text:0040CFA0 var_10          = dword ptr -10h
.text:0040CFA0 var_C           = dword ptr -0Ch
.text:0040CFA0 var_8           = dword ptr -8
.text:0040CFA0 var_4           = dword ptr -4
.text:0040CFA0 lpFileName      = dword ptr  4
.text:0040CFA0 arg_4           = dword ptr  8
.text:0040CFA0
.text:0040CFA0                 sub     esp, 1Ch
.text:0040CFA3                 mov     [esp+1Ch+var_10], ebx
.text:0040CFA7                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040CFAB                 mov     [esp+1Ch+var_4], ebp
.text:0040CFAF                 xor     ebp, ebp
.text:0040CFB1                 test    ebx, ebx
.text:0040CFB3                 mov     [esp+1Ch+var_C], esi
.text:0040CFB7                 mov     esi, [esp+1Ch+arg_4]
.text:0040CFBB                 mov     [esp+1Ch+var_8], edi
.text:0040CFBF                 jz      short loc_40CFC9
.text:0040CFC1                 test    esi, 0FFFFFFE8h
.text:0040CFC7                 jz      short loc_40CFF0
.text:0040CFC9
.text:0040CFC9 loc_40CFC9:                             ; CODE XREF: sub_40CFA0+1F↑j
.text:0040CFC9                 call    _errno
.text:0040CFCE                 mov     dword ptr [eax], 16h
.text:0040CFD4
.text:0040CFD4 loc_40CFD4:                             ; CODE XREF: sub_40CFA0+B1↓j
.text:0040CFD4                 mov     eax, 0FFFFFFFFh
.text:0040CFD9
.text:0040CFD9 loc_40CFD9:                             ; CODE XREF: sub_40CFA0+86↓j
.text:0040CFD9                                         ; sub_40CFA0+A4↓j
.text:0040CFD9                 mov     ebx, [esp+1Ch+var_10]
.text:0040CFDD                 mov     esi, [esp+1Ch+var_C]
.text:0040CFE1                 mov     edi, [esp+1Ch+var_8]
.text:0040CFE5                 mov     ebp, [esp+1Ch+var_4]
.text:0040CFE9                 add     esp, 1Ch
.text:0040CFEC                 retn
.text:0040CFEC ; ---------------------------------------------------------------------------
.text:0040CFED                 align 10h
.text:0040CFF0
.text:0040CFF0 loc_40CFF0:                             ; CODE XREF: sub_40CFA0+27↑j
.text:0040CFF0                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040CFF7                 call    SetErrorMode
.text:0040CFFC                 sub     esp, 4
.text:0040CFFF                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040D002                 call    GetFileAttributesA
.text:0040D007                 sub     esp, 4
.text:0040D00A                 mov     edi, eax
.text:0040D00C                 cmp     eax, 0FFFFFFFFh
.text:0040D00F                 jz      short loc_40D053
.text:0040D011
.text:0040D011 loc_40D011:                             ; CODE XREF: sub_40CFA0+C6↓j
.text:0040D011                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040D018                 call    SetErrorMode
.text:0040D01D                 sub     esp, 4
.text:0040D020                 mov     eax, 0FFFFFFFFh
.text:0040D025                 inc     ebp
.text:0040D026                 jz      short loc_40CFD9
.text:0040D028                 test    esi, 10h
.text:0040D02E                 jz      short loc_40D038
.text:0040D030                 test    edi, 10h
.text:0040D036                 jz      short loc_40D046
.text:0040D038
.text:0040D038 loc_40D038:                             ; CODE XREF: sub_40CFA0+8E↑j
.text:0040D038                 and     esi, 2
.text:0040D03B                 jz      short loc_40D042
.text:0040D03D                 and     edi, 1
.text:0040D040                 jnz     short loc_40D046
.text:0040D042
.text:0040D042 loc_40D042:                             ; CODE XREF: sub_40CFA0+9B↑j
.text:0040D042                 xor     eax, eax
.text:0040D044                 jmp     short loc_40CFD9
.text:0040D046 ; ---------------------------------------------------------------------------
.text:0040D046
.text:0040D046 loc_40D046:                             ; CODE XREF: sub_40CFA0+96↑j
.text:0040D046                                         ; sub_40CFA0+A0↑j
.text:0040D046                 call    _errno
.text:0040D04B                 mov     dword ptr [eax], 0Dh
.text:0040D051                 jmp     short loc_40CFD4
.text:0040D053 ; ---------------------------------------------------------------------------
.text:0040D053
.text:0040D053 loc_40D053:                             ; CODE XREF: sub_40CFA0+6F↑j
.text:0040D053                 call    sub_40CE00
.text:0040D058                 mov     ebp, eax
.text:0040D05A                 call    _errno
.text:0040D05F                 mov     [eax], ebp
.text:0040D061                 mov     ebp, 0FFFFFFFFh
.text:0040D066                 jmp     short loc_40D011
.text:0040D066 sub_40CFA0      endp
.text:0040D066
.text:0040D066 ; ---------------------------------------------------------------------------
.text:0040D068                 align 10h
.text:0040D070 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040D28F↓o
.text:0040D07C aLu             db '%lu',0              ; DATA XREF: .text:0040D29F↓o
.text:0040D080 asc_40D080      db ' ',0                ; DATA XREF: .text:loc_40D388↓o
.text:0040D082                 align 10h
.text:0040D090 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040D090                                         ; DATA XREF: .text:0040D3BF↓o
.text:0040D0B0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40D3CD↓o
.text:0040D0BC aServer         db ' Server',0          ; DATA XREF: .text:0040D3F6↓o
.text:0040D0BC                                         ; .text:loc_40D56E↓o
.text:0040D0C4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40D408↓o
.text:0040D0D5 aDatacenterServ db ' Datacenter Server',0
.text:0040D0D5                                         ; DATA XREF: .text:loc_40D412↓o
.text:0040D0E8 aStandardEditio db ' Standard Edition',0
.text:0040D0E8                                         ; DATA XREF: .text:0040D43A↓o
.text:0040D0FA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40D444↓o
.text:0040D107 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040D107                                         ; DATA XREF: .text:loc_40D44E↓o
.text:0040D11B aDatacenterEdit db ' Datacenter Edition',0
.text:0040D11B                                         ; DATA XREF: .text:loc_40D458↓o
.text:0040D12F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040D46B↓o
.text:0040D13D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40D475↓o
.text:0040D13D                                         ; .text:loc_40D580↓o
.text:0040D14B                 align 10h
.text:0040D150 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040D150                                         ; DATA XREF: .text:0040D4A2↓o
.text:0040D180 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040D4E9↓o
.text:0040D18C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040D524↓o
.text:0040D192 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040D53B↓o
.text:0040D19B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040D552↓o
.text:0040D1A4                 align 10h
.text:0040D1B0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040D1B0                                         ; DATA XREF: .text:0040D6C7↓o
.text:0040D1D3                 db 1Dh dup(90h)
.text:0040D1F0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040D1F0                                         ; DATA XREF: .text:0040D726↓o
.text:0040D216 ; ---------------------------------------------------------------------------
.text:0040D216
.text:0040D216 loc_40D216:                             ; DATA XREF: .text:loc_40D791↓o
.text:0040D216                 and     [ebx+45h], dl
.text:0040D219                 add     [eax], ah
.text:0040D21B                 push    ebx
.text:0040D21C                 push    eax
.text:0040D21D                 xor     [eax], eax
.text:0040D21F
.text:0040D21F loc_40D21F:                             ; DATA XREF: .text:loc_40D80B↓o
.text:0040D21F                 and     [edi+53h], cl
.text:0040D222                 push    edx
.text:0040D223                 xor     al, [eax]
.text:0040D225                 lea     esi, [esi+0]
.text:0040D229                 lea     edi, [edi+0]
.text:0040D230                 push    edi
.text:0040D231                 push    esi
.text:0040D232                 push    ebx
.text:0040D233                 sub     esp, 130h
.text:0040D239                 mov     ebx, [esp+140h]
.text:0040D240                 call    sub_40D940
.text:0040D245                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D24A                 cmp     eax, 1
.text:0040D24D                 jz      loc_40D6F0
.text:0040D253                 cmp     eax, 1
.text:0040D256                 jb      loc_40D6C6
.text:0040D25C                 cmp     eax, 2
.text:0040D25F                 jz      loc_40D310
.text:0040D265                 cmp     eax, 3
.text:0040D268                 jz      short loc_40D2CF
.text:0040D26A                 lea     esi, [esi+0]
.text:0040D270
.text:0040D270 loc_40D270:                             ; CODE XREF: .text:0040D305↓j
.text:0040D270                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040D276                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D27C
.text:0040D27C loc_40D27C:                             ; CODE XREF: .text:0040D70F↓j
.text:0040D27C                 mov     [esp+10h], edx
.text:0040D280                 mov     ebx, [esp+144h]
.text:0040D287                 mov     [esp+0Ch], ecx
.text:0040D28B                 mov     [esp+8], eax
.text:0040D28F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040D297                 mov     [esp], ebx
.text:0040D29A                 call    sprintf
.text:0040D29F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040D2A7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040D2AD                 mov     ecx, [esp+148h]
.text:0040D2B4                 mov     [esp+8], edi
.text:0040D2B8                 mov     [esp], ecx
.text:0040D2BB                 call    sprintf
.text:0040D2C0                 mov     eax, 1
.text:0040D2C5
.text:0040D2C5 loc_40D2C5:                             ; CODE XREF: .text:0040D4BF↓j
.text:0040D2C5                                         ; .text:0040D50C↓j
.text:0040D2C5                 add     esp, 130h
.text:0040D2CB                 pop     ebx
.text:0040D2CC                 pop     esi
.text:0040D2CD                 pop     edi
.text:0040D2CE                 retn
.text:0040D2CF ; ---------------------------------------------------------------------------
.text:0040D2CF
.text:0040D2CF loc_40D2CF:                             ; CODE XREF: .text:0040D268↑j
.text:0040D2CF                 mov     dword ptr [ebx], 7263694Dh
.text:0040D2D5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D2DC                 mov     dword ptr [ebx+8], 69572074h
.text:0040D2E3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D2EA                 mov     dword ptr [ebx+10h], 45432073h
.text:0040D2F1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040D2F7                 mov     esi, esi
.text:0040D2F9                 lea     edi, [edi+0]
.text:0040D300
.text:0040D300 loc_40D300:                             ; CODE XREF: .text:0040D3A8↓j
.text:0040D300                                         ; .text:0040D6E9↓j ...
.text:0040D300                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D305                 jmp     loc_40D270
.text:0040D305 ; ---------------------------------------------------------------------------
.text:0040D30A                 align 10h
.text:0040D310
.text:0040D310 loc_40D310:                             ; CODE XREF: .text:0040D25F↑j
.text:0040D310                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040D316                 cmp     edx, 3
.text:0040D319                 mov     eax, edx
.text:0040D31B                 jz      loc_40D685
.text:0040D321
.text:0040D321 loc_40D321:                             ; CODE XREF: .text:0040D68C↓j
.text:0040D321                 cmp     eax, 4
.text:0040D324                 jz      loc_40D645
.text:0040D32A
.text:0040D32A loc_40D32A:                             ; CODE XREF: .text:0040D64D↓j
.text:0040D32A                 cmp     eax, 4
.text:0040D32D                 ja      loc_40D592
.text:0040D333                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040D339                 test    ecx, ecx
.text:0040D33B                 jnz     loc_40D592
.text:0040D341                 mov     dword ptr [ebx], 7263694Dh
.text:0040D347                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D34E                 mov     dword ptr [ebx+8], 69572074h
.text:0040D355                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D35C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040D363
.text:0040D363 loc_40D363:                             ; CODE XREF: .text:0040D605↓j
.text:0040D363                 mov     byte ptr [ebx+14h], 0
.text:0040D367
.text:0040D367 loc_40D367:                             ; CODE XREF: .text:0040D595↓j
.text:0040D367                                         ; .text:0040D5AC↓j ...
.text:0040D367                 mov     esi, dword_412080
.text:0040D36D                 test    esi, esi
.text:0040D36F                 jz      loc_40D482
.text:0040D375                 movzx   eax, ds:byte_4134EA
.text:0040D37C                 cmp     al, 1
.text:0040D37E                 jz      loc_40D462
.text:0040D384                 cmp     al, 3
.text:0040D386                 jz      short loc_40D3AD
.text:0040D388
.text:0040D388 loc_40D388:                             ; CODE XREF: .text:0040D3CB↓j
.text:0040D388                                         ; .text:0040D406↓j ...
.text:0040D388                 mov     dword ptr [esp+4], offset asc_40D080 ; " "
.text:0040D390                 mov     [esp], ebx
.text:0040D393                 call    strcat
.text:0040D398                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040D3A0                 mov     [esp], ebx
.text:0040D3A3                 call    strcat
.text:0040D3A8                 jmp     loc_40D300
.text:0040D3AD ; ---------------------------------------------------------------------------
.text:0040D3AD
.text:0040D3AD loc_40D3AD:                             ; CODE XREF: .text:0040D386↑j
.text:0040D3AD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040D3B4                 jz      short loc_40D3D6
.text:0040D3B6
.text:0040D3B6 loc_40D3B6:                             ; CODE XREF: .text:0040D3E2↓j
.text:0040D3B6                 test    byte ptr ds:word_4134E8, 2
.text:0040D3BD                 jz      short loc_40D3CD
.text:0040D3BF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040D3C6
.text:0040D3C6 loc_40D3C6:                             ; CODE XREF: .text:0040D3D4↓j
.text:0040D3C6                 call    printf
.text:0040D3CB                 jmp     short loc_40D388
.text:0040D3CD ; ---------------------------------------------------------------------------
.text:0040D3CD
.text:0040D3CD loc_40D3CD:                             ; CODE XREF: .text:0040D3BD↑j
.text:0040D3CD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040D3D4                 jmp     short loc_40D3C6
.text:0040D3D6 ; ---------------------------------------------------------------------------
.text:0040D3D6
.text:0040D3D6 loc_40D3D6:                             ; CODE XREF: .text:0040D3B4↑j
.text:0040D3D6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040D3DB                 cmp     eax, 2
.text:0040D3DE                 jz      short loc_40D420
.text:0040D3E0                 test    eax, eax
.text:0040D3E2                 jnz     short loc_40D3B6
.text:0040D3E4                 cmp     byte ptr ds:word_4134E8, 0
.text:0040D3EB                 js      short loc_40D412
.text:0040D3ED                 test    byte ptr ds:word_4134E8, 2
.text:0040D3F4                 jnz     short loc_40D408
.text:0040D3F6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040D3FE
.text:0040D3FE loc_40D3FE:                             ; CODE XREF: .text:0040D410↓j
.text:0040D3FE                                         ; .text:0040D41A↓j ...
.text:0040D3FE                 mov     [esp], ebx
.text:0040D401                 call    strcat
.text:0040D406                 jmp     short loc_40D388
.text:0040D408 ; ---------------------------------------------------------------------------
.text:0040D408
.text:0040D408 loc_40D408:                             ; CODE XREF: .text:0040D3F4↑j
.text:0040D408                                         ; .text:0040D569↓j
.text:0040D408                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040D410                 jmp     short loc_40D3FE
.text:0040D412 ; ---------------------------------------------------------------------------
.text:0040D412
.text:0040D412 loc_40D412:                             ; CODE XREF: .text:0040D3EB↑j
.text:0040D412                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040D41A                 jmp     short loc_40D3FE
.text:0040D41A ; ---------------------------------------------------------------------------
.text:0040D41C                 align 10h
.text:0040D420
.text:0040D420 loc_40D420:                             ; CODE XREF: .text:0040D3DE↑j
.text:0040D420                 cmp     byte ptr ds:word_4134E8, 0
.text:0040D427                 js      short loc_40D458
.text:0040D429                 movzx   eax, ds:word_4134E8
.text:0040D430                 test    al, 2
.text:0040D432                 jnz     short loc_40D44E
.text:0040D434                 cmp     ax, 400h
.text:0040D438                 jz      short loc_40D444
.text:0040D43A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040D442                 jmp     short loc_40D3FE
.text:0040D444 ; ---------------------------------------------------------------------------
.text:0040D444
.text:0040D444 loc_40D444:                             ; CODE XREF: .text:0040D438↑j
.text:0040D444                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040D44C                 jmp     short loc_40D3FE
.text:0040D44E ; ---------------------------------------------------------------------------
.text:0040D44E
.text:0040D44E loc_40D44E:                             ; CODE XREF: .text:0040D432↑j
.text:0040D44E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040D456                 jmp     short loc_40D3FE
.text:0040D458 ; ---------------------------------------------------------------------------
.text:0040D458
.text:0040D458 loc_40D458:                             ; CODE XREF: .text:0040D427↑j
.text:0040D458                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040D460                 jmp     short loc_40D3FE
.text:0040D462 ; ---------------------------------------------------------------------------
.text:0040D462
.text:0040D462 loc_40D462:                             ; CODE XREF: .text:0040D37E↑j
.text:0040D462                 test    byte ptr ds:word_4134E8+1, 2
.text:0040D469                 jz      short loc_40D475
.text:0040D46B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040D473                 jmp     short loc_40D3FE
.text:0040D475 ; ---------------------------------------------------------------------------
.text:0040D475
.text:0040D475 loc_40D475:                             ; CODE XREF: .text:0040D469↑j
.text:0040D475                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040D47D                 jmp     loc_40D3FE
.text:0040D482 ; ---------------------------------------------------------------------------
.text:0040D482
.text:0040D482 loc_40D482:                             ; CODE XREF: .text:0040D36F↑j
.text:0040D482                 mov     dword ptr [esp+28h], 0FFh
.text:0040D48A                 lea     edx, [esp+2Ch]
.text:0040D48E                 mov     [esp+10h], edx
.text:0040D492                 mov     dword ptr [esp+0Ch], 1
.text:0040D49A                 mov     dword ptr [esp+8], 0
.text:0040D4A2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040D4AA                 mov     dword ptr [esp], 80000002h
.text:0040D4B1                 call    RegOpenKeyExA
.text:0040D4B6                 mov     edi, eax
.text:0040D4B8                 sub     esp, 14h
.text:0040D4BB                 xor     eax, eax
.text:0040D4BD                 test    edi, edi
.text:0040D4BF                 jnz     loc_40D2C5
.text:0040D4C5                 mov     dword ptr [esp+0Ch], 0
.text:0040D4CD                 mov     edi, [esp+2Ch]
.text:0040D4D1                 lea     esi, [esp+28h]
.text:0040D4D5                 mov     [esp+14h], esi
.text:0040D4D9                 lea     esi, [esp+30h]
.text:0040D4DD                 mov     [esp+10h], esi
.text:0040D4E1                 mov     dword ptr [esp+8], 0
.text:0040D4E9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040D4F1                 mov     [esp], edi
.text:0040D4F4                 call    RegQueryValueExA
.text:0040D4F9                 sub     esp, 18h
.text:0040D4FC                 test    eax, eax
.text:0040D4FE                 jnz     short loc_40D50A
.text:0040D500                 cmp     dword ptr [esp+28h], 0FFh
.text:0040D508                 jbe     short loc_40D511
.text:0040D50A
.text:0040D50A loc_40D50A:                             ; CODE XREF: .text:0040D4FE↑j
.text:0040D50A                 xor     eax, eax
.text:0040D50C                 jmp     loc_40D2C5
.text:0040D511 ; ---------------------------------------------------------------------------
.text:0040D511
.text:0040D511 loc_40D511:                             ; CODE XREF: .text:0040D508↑j
.text:0040D511                 mov     edx, [esp+2Ch]
.text:0040D515                 mov     [esp], edx
.text:0040D518                 call    RegCloseKey
.text:0040D51D                 sub     esp, 4
.text:0040D520                 mov     [esp+4], esi
.text:0040D524                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040D52B                 call    lstrcmpiA
.text:0040D530                 sub     esp, 8
.text:0040D533                 test    eax, eax
.text:0040D535                 jz      short loc_40D580
.text:0040D537
.text:0040D537 loc_40D537:                             ; CODE XREF: .text:0040D590↓j
.text:0040D537                 mov     [esp+4], esi
.text:0040D53B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040D542                 call    lstrcmpiA
.text:0040D547                 sub     esp, 8
.text:0040D54A                 test    eax, eax
.text:0040D54C                 jz      short loc_40D56E
.text:0040D54E
.text:0040D54E loc_40D54E:                             ; CODE XREF: .text:0040D57E↓j
.text:0040D54E                 mov     [esp+4], esi
.text:0040D552                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040D559                 call    lstrcmpiA
.text:0040D55E                 sub     esp, 8
.text:0040D561                 test    eax, eax
.text:0040D563                 jnz     loc_40D388
.text:0040D569                 jmp     loc_40D408
.text:0040D56E ; ---------------------------------------------------------------------------
.text:0040D56E
.text:0040D56E loc_40D56E:                             ; CODE XREF: .text:0040D54C↑j
.text:0040D56E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040D576                 mov     [esp], ebx
.text:0040D579                 call    strcat
.text:0040D57E                 jmp     short loc_40D54E
.text:0040D580 ; ---------------------------------------------------------------------------
.text:0040D580
.text:0040D580 loc_40D580:                             ; CODE XREF: .text:0040D535↑j
.text:0040D580                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040D588                 mov     [esp], ebx
.text:0040D58B                 call    strcat
.text:0040D590                 jmp     short loc_40D537
.text:0040D592 ; ---------------------------------------------------------------------------
.text:0040D592
.text:0040D592 loc_40D592:                             ; CODE XREF: .text:0040D32D↑j
.text:0040D592                                         ; .text:0040D33B↑j
.text:0040D592                 cmp     eax, 5
.text:0040D595                 jnz     loc_40D367
.text:0040D59B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040D5A0                 cmp     eax, 2
.text:0040D5A3                 jz      short loc_40D60A
.text:0040D5A5                 cmp     eax, 1
.text:0040D5A8                 jz      short loc_40D5E3
.text:0040D5AA                 test    eax, eax
.text:0040D5AC                 jnz     loc_40D367
.text:0040D5B2                 mov     dword ptr [ebx], 7263694Dh
.text:0040D5B8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D5BF                 mov     dword ptr [ebx+8], 69572074h
.text:0040D5C6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D5CD                 mov     dword ptr [ebx+10h], 30322073h
.text:0040D5D4                 mov     word ptr [ebx+14h], 3030h
.text:0040D5DA                 mov     byte ptr [ebx+16h], 0
.text:0040D5DE                 jmp     loc_40D367
.text:0040D5E3 ; ---------------------------------------------------------------------------
.text:0040D5E3
.text:0040D5E3 loc_40D5E3:                             ; CODE XREF: .text:0040D5A8↑j
.text:0040D5E3                 mov     dword ptr [ebx], 7263694Dh
.text:0040D5E9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D5F0                 mov     dword ptr [ebx+8], 69572074h
.text:0040D5F7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D5FE                 mov     dword ptr [ebx+10h], 50582073h
.text:0040D605                 jmp     loc_40D363
.text:0040D60A ; ---------------------------------------------------------------------------
.text:0040D60A
.text:0040D60A loc_40D60A:                             ; CODE XREF: .text:0040D5A3↑j
.text:0040D60A                 mov     dword ptr [ebx], 7263694Dh
.text:0040D610                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D617                 mov     dword ptr [ebx+8], 69572074h
.text:0040D61E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D625                 mov     dword ptr [ebx+10h], 65532073h
.text:0040D62C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040D633                 mov     dword ptr [ebx+18h], 30303220h
.text:0040D63A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040D640                 jmp     loc_40D367
.text:0040D645 ; ---------------------------------------------------------------------------
.text:0040D645
.text:0040D645 loc_40D645:                             ; CODE XREF: .text:0040D324↑j
.text:0040D645                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D64B                 test    edx, edx
.text:0040D64D                 jnz     loc_40D32A
.text:0040D653                 mov     dword ptr [ebx], 7263694Dh
.text:0040D659                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D660                 mov     dword ptr [ebx+8], 69572074h
.text:0040D667                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D66E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040D675                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040D67C                 mov     byte ptr [ebx+18h], 0
.text:0040D680                 jmp     loc_40D367
.text:0040D685 ; ---------------------------------------------------------------------------
.text:0040D685
.text:0040D685 loc_40D685:                             ; CODE XREF: .text:0040D31B↑j
.text:0040D685                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040D68C                 jnz     loc_40D321
.text:0040D692                 mov     dword ptr [ebx], 7263694Dh
.text:0040D698                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D69F                 mov     dword ptr [ebx+8], 69572074h
.text:0040D6A6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D6AD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040D6B4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040D6BB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040D6C1                 jmp     loc_40D367
.text:0040D6C6 ; ---------------------------------------------------------------------------
.text:0040D6C6
.text:0040D6C6 loc_40D6C6:                             ; CODE XREF: .text:0040D256↑j
.text:0040D6C6                 cld
.text:0040D6C7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040D6CC                 mov     ecx, 8
.text:0040D6D1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040D6D8                 mov     edi, ebx
.text:0040D6DA                 rep movsd
.text:0040D6DC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040D6E3                 mov     [edi+2], dl
.text:0040D6E6                 mov     [edi], si
.text:0040D6E9                 jmp     loc_40D300
.text:0040D6E9 ; ---------------------------------------------------------------------------
.text:0040D6EE                 align 10h
.text:0040D6F0
.text:0040D6F0 loc_40D6F0:                             ; CODE XREF: .text:0040D24D↑j
.text:0040D6F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040D6F6                 cmp     ecx, 4
.text:0040D6F9                 jz      loc_40D7B0
.text:0040D6FF
.text:0040D6FF loc_40D6FF:                             ; CODE XREF: .text:0040D806↓j
.text:0040D6FF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D705
.text:0040D705 loc_40D705:                             ; CODE XREF: .text:0040D7B8↓j
.text:0040D705                 cmp     ecx, 4
.text:0040D708                 jz      short loc_40D714
.text:0040D70A
.text:0040D70A loc_40D70A:                             ; CODE XREF: .text:0040D71C↓j
.text:0040D70A                                         ; .text:0040D721↓j
.text:0040D70A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D70F                 jmp     loc_40D27C
.text:0040D714 ; ---------------------------------------------------------------------------
.text:0040D714
.text:0040D714 loc_40D714:                             ; CODE XREF: .text:0040D708↑j
.text:0040D714                 cmp     edx, 0Ah
.text:0040D717                 jz      short loc_40D741
.text:0040D719
.text:0040D719 loc_40D719:                             ; CODE XREF: .text:0040D78F↓j
.text:0040D719                 cmp     ecx, 4
.text:0040D71C                 jnz     short loc_40D70A
.text:0040D71E                 cmp     edx, 5Ah ; 'Z'
.text:0040D721                 jnz     short loc_40D70A
.text:0040D723                 cld
.text:0040D724                 mov     edi, ebx
.text:0040D726                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040D72B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040D732                 mov     ecx, 9
.text:0040D737                 rep movsd
.text:0040D739                 mov     [edi], bx
.text:0040D73C                 jmp     loc_40D300
.text:0040D741 ; ---------------------------------------------------------------------------
.text:0040D741
.text:0040D741 loc_40D741:                             ; CODE XREF: .text:0040D717↑j
.text:0040D741                 mov     dword ptr [ebx], 7263694Dh
.text:0040D747                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D74E                 mov     dword ptr [ebx+8], 69572074h
.text:0040D755                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D75C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040D763                 mov     byte ptr [ebx+14h], 0
.text:0040D767                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040D76D                 lea     edi, [edx-7CFh]
.text:0040D773                 cmp     edi, 0B7h ; '·'
.text:0040D779                 jbe     short loc_40D7A3
.text:0040D77B                 cmp     edx, 886h
.text:0040D781                 ja      short loc_40D791
.text:0040D783
.text:0040D783 loc_40D783:                             ; CODE XREF: .text:0040D7A1↓j
.text:0040D783                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040D789                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D78F                 jmp     short loc_40D719
.text:0040D791 ; ---------------------------------------------------------------------------
.text:0040D791
.text:0040D791 loc_40D791:                             ; CODE XREF: .text:0040D781↑j
.text:0040D791                 mov     dword ptr [esp+4], offset loc_40D216
.text:0040D799
.text:0040D799 loc_40D799:                             ; CODE XREF: .text:0040D7AB↓j
.text:0040D799                 mov     [esp], ebx
.text:0040D79C                 call    strcat
.text:0040D7A1                 jmp     short loc_40D783
.text:0040D7A3 ; ---------------------------------------------------------------------------
.text:0040D7A3
.text:0040D7A3 loc_40D7A3:                             ; CODE XREF: .text:0040D779↑j
.text:0040D7A3                 mov     dword ptr [esp+4], 40D21Ah
.text:0040D7AB                 jmp     short loc_40D799
.text:0040D7AB ; ---------------------------------------------------------------------------
.text:0040D7AD                 align 10h
.text:0040D7B0
.text:0040D7B0 loc_40D7B0:                             ; CODE XREF: .text:0040D6F9↑j
.text:0040D7B0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040D7B6                 test    edx, edx
.text:0040D7B8                 jnz     loc_40D705
.text:0040D7BE                 mov     dword ptr [ebx], 7263694Dh
.text:0040D7C4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040D7CB                 mov     dword ptr [ebx+8], 69572074h
.text:0040D7D2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040D7D9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040D7E0                 mov     byte ptr [ebx+14h], 0
.text:0040D7E4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040D7EA                 lea     ecx, [edx-3B7h]
.text:0040D7F0                 cmp     ecx, 81h
.text:0040D7F6                 jbe     short loc_40D81D
.text:0040D7F8                 cmp     edx, 438h
.text:0040D7FE                 ja      short loc_40D80B
.text:0040D800
.text:0040D800 loc_40D800:                             ; CODE XREF: .text:0040D81B↓j
.text:0040D800                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040D806                 jmp     loc_40D6FF
.text:0040D80B ; ---------------------------------------------------------------------------
.text:0040D80B
.text:0040D80B loc_40D80B:                             ; CODE XREF: .text:0040D7FE↑j
.text:0040D80B                 mov     dword ptr [esp+4], offset loc_40D21F
.text:0040D813
.text:0040D813 loc_40D813:                             ; CODE XREF: .text:0040D825↓j
.text:0040D813                 mov     [esp], ebx
.text:0040D816                 call    strcat
.text:0040D81B                 jmp     short loc_40D800
.text:0040D81D ; ---------------------------------------------------------------------------
.text:0040D81D
.text:0040D81D loc_40D81D:                             ; CODE XREF: .text:0040D7F6↑j
.text:0040D81D                 mov     dword ptr [esp+4], 40D21Ah
.text:0040D825                 jmp     short loc_40D813
.text:0040D825 ; ---------------------------------------------------------------------------
.text:0040D827                 align 10h
.text:0040D830
.text:0040D830 ; =============== S U B R O U T I N E =======================================
.text:0040D830
.text:0040D830
.text:0040D830 sub_40D830      proc near               ; CODE XREF: .text:0040BF4E↑p
.text:0040D830                                         ; sub_40C3D0+12A↑p
.text:0040D830                 sub     esp, 0Ch
.text:0040D833                 call    sub_40D940
.text:0040D838                 mov     eax, ds:dword_413440
.text:0040D83D                 add     esp, 0Ch
.text:0040D840                 retn
.text:0040D840 sub_40D830      endp
.text:0040D840
.text:0040D841 ; ---------------------------------------------------------------------------
.text:0040D841                 jmp     short loc_40D850
.text:0040D841 ; ---------------------------------------------------------------------------
.text:0040D843                 align 10h
.text:0040D850
.text:0040D850 loc_40D850:                             ; CODE XREF: .text:0040D841↑j
.text:0040D850                 sub     esp, 0Ch
.text:0040D853                 call    sub_40D940
.text:0040D858                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D85D                 add     esp, 0Ch
.text:0040D860                 retn
.text:0040D861 ; ---------------------------------------------------------------------------
.text:0040D861                 jmp     short loc_40D870
.text:0040D861 ; ---------------------------------------------------------------------------
.text:0040D863                 align 10h
.text:0040D870
.text:0040D870 loc_40D870:                             ; CODE XREF: .text:0040D861↑j
.text:0040D870                 sub     esp, 0Ch
.text:0040D873                 call    sub_40D940
.text:0040D878                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040D87D                 add     esp, 0Ch
.text:0040D880                 retn
.text:0040D881 ; ---------------------------------------------------------------------------
.text:0040D881                 jmp     short loc_40D890
.text:0040D881 ; ---------------------------------------------------------------------------
.text:0040D883                 align 10h
.text:0040D890
.text:0040D890 loc_40D890:                             ; CODE XREF: .text:0040D881↑j
.text:0040D890                 sub     esp, 0Ch
.text:0040D893                 call    sub_40D940
.text:0040D898                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040D89D                 add     esp, 0Ch
.text:0040D8A0                 retn
.text:0040D8A1 ; ---------------------------------------------------------------------------
.text:0040D8A1                 jmp     short loc_40D8B0
.text:0040D8A1 ; ---------------------------------------------------------------------------
.text:0040D8A3                 align 10h
.text:0040D8B0
.text:0040D8B0 loc_40D8B0:                             ; CODE XREF: .text:0040D8A1↑j
.text:0040D8B0                 sub     esp, 0Ch
.text:0040D8B3                 call    GetVersion
.text:0040D8B8                 shr     eax, 10h
.text:0040D8BB                 add     esp, 0Ch
.text:0040D8BE                 retn
.text:0040D8BE ; ---------------------------------------------------------------------------
.text:0040D8BF                 align 10h
.text:0040D8C0                 sub     esp, 0Ch
.text:0040D8C3                 call    sub_40D940
.text:0040D8C8                 xor     eax, eax
.text:0040D8CA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040D8D1                 setz    al
.text:0040D8D4                 add     esp, 0Ch
.text:0040D8D7                 retn
.text:0040D8D7 ; ---------------------------------------------------------------------------
.text:0040D8D8                 align 10h
.text:0040D8E0
.text:0040D8E0 ; =============== S U B R O U T I N E =======================================
.text:0040D8E0
.text:0040D8E0
.text:0040D8E0 sub_40D8E0      proc near               ; CODE XREF: .text:loc_40B8B0↑p
.text:0040D8E0                                         ; .text:loc_40BF34↑p ...
.text:0040D8E0                 sub     esp, 0Ch
.text:0040D8E3                 call    sub_40D940
.text:0040D8E8                 xor     eax, eax
.text:0040D8EA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040D8F1                 setz    al
.text:0040D8F4                 add     esp, 0Ch
.text:0040D8F7                 retn
.text:0040D8F7 sub_40D8E0      endp
.text:0040D8F7
.text:0040D8F7 ; ---------------------------------------------------------------------------
.text:0040D8F8                 align 10h
.text:0040D900                 sub     esp, 0Ch
.text:0040D903                 call    sub_40D940
.text:0040D908                 xor     eax, eax
.text:0040D90A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040D911                 setz    al
.text:0040D914                 add     esp, 0Ch
.text:0040D917                 retn
.text:0040D917 ; ---------------------------------------------------------------------------
.text:0040D918                 align 10h
.text:0040D920                 sub     esp, 0Ch
.text:0040D923                 call    sub_40D940
.text:0040D928                 xor     eax, eax
.text:0040D92A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040D931                 setz    al
.text:0040D934                 add     esp, 0Ch
.text:0040D937                 retn
.text:0040D937 ; ---------------------------------------------------------------------------
.text:0040D938                 align 10h
.text:0040D940
.text:0040D940 ; =============== S U B R O U T I N E =======================================
.text:0040D940
.text:0040D940
.text:0040D940 sub_40D940      proc near               ; CODE XREF: .text:0040D240↑p
.text:0040D940                                         ; sub_40D830+3↑p ...
.text:0040D940
.text:0040D940 lpVersionInformation= dword ptr -0BCh
.text:0040D940 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040D940
.text:0040D940                 sub     esp, 0BCh
.text:0040D946                 mov     edx, ds:dword_4134F0
.text:0040D94C                 test    edx, edx
.text:0040D94E                 jz      short loc_40D960
.text:0040D950
.text:0040D950 loc_40D950:                             ; CODE XREF: sub_40D940+7B↓j
.text:0040D950                 mov     edx, 1
.text:0040D955
.text:0040D955 loc_40D955:                             ; CODE XREF: sub_40D940+217↓j
.text:0040D955                 mov     eax, edx
.text:0040D957                 add     esp, 0BCh
.text:0040D95D                 retn
.text:0040D95D ; ---------------------------------------------------------------------------
.text:0040D95E                 align 10h
.text:0040D960
.text:0040D960 loc_40D960:                             ; CODE XREF: sub_40D940+E↑j
.text:0040D960                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040D967                 mov     edx, 9Ch ; 'œ'
.text:0040D96C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040D972                 call    GetVersionExA
.text:0040D977                 sub     esp, 4
.text:0040D97A                 test    eax, eax
.text:0040D97C                 jz      loc_40DB34
.text:0040D982
.text:0040D982 loc_40D982:                             ; CODE XREF: sub_40D940+245↓j
.text:0040D982                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040D989                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040D98E                 cmp     eax, 1
.text:0040D991                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040D997                 jz      loc_40DA80
.text:0040D99D                 cmp     eax, 1
.text:0040D9A0                 jb      loc_40DA70
.text:0040D9A6                 cmp     eax, 2
.text:0040D9A9                 jz      short loc_40D9CA
.text:0040D9AB                 cmp     eax, 3
.text:0040D9AE                 jz      short loc_40D9BD
.text:0040D9B0
.text:0040D9B0 loc_40D9B0:                             ; CODE XREF: sub_40D940+88↓j
.text:0040D9B0                                         ; sub_40D940+C0↓j ...
.text:0040D9B0                 mov     edx, 1
.text:0040D9B5                 mov     ds:dword_4134F0, edx
.text:0040D9BB                 jmp     short loc_40D950
.text:0040D9BD ; ---------------------------------------------------------------------------
.text:0040D9BD
.text:0040D9BD loc_40D9BD:                             ; CODE XREF: sub_40D940+6E↑j
.text:0040D9BD                 mov     ecx, 17h
.text:0040D9C2
.text:0040D9C2 loc_40D9C2:                             ; CODE XREF: sub_40D940+1A7↓j
.text:0040D9C2                 mov     ds:dword_413440, ecx
.text:0040D9C8                 jmp     short loc_40D9B0
.text:0040D9CA ; ---------------------------------------------------------------------------
.text:0040D9CA
.text:0040D9CA loc_40D9CA:                             ; CODE XREF: sub_40D940+69↑j
.text:0040D9CA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040D9CF                 cmp     eax, 3
.text:0040D9D2                 jz      short loc_40DA4B
.text:0040D9D4                 cmp     eax, 4
.text:0040D9D7                 jz      short loc_40DA3A
.text:0040D9D9
.text:0040D9D9 loc_40D9D9:                             ; CODE XREF: sub_40D940+102↓j
.text:0040D9D9                 cmp     eax, 4
.text:0040D9DC                 ja      short loc_40DA02
.text:0040D9DE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040D9E4                 test    ecx, ecx
.text:0040D9E6                 jnz     short loc_40DA02
.text:0040D9E8                 mov     edx, 1Eh
.text:0040D9ED
.text:0040D9ED loc_40D9ED:                             ; CODE XREF: sub_40D940+DF↓j
.text:0040D9ED                 mov     ds:dword_413440, edx
.text:0040D9F3
.text:0040D9F3 loc_40D9F3:                             ; CODE XREF: sub_40D940+C5↓j
.text:0040D9F3                                         ; sub_40D940+D8↓j ...
.text:0040D9F3                 movzx   ecx, ds:word_4134E4
.text:0040D9FA                 add     ds:dword_413440, ecx
.text:0040DA00                 jmp     short loc_40D9B0
.text:0040DA02 ; ---------------------------------------------------------------------------
.text:0040DA02
.text:0040DA02 loc_40DA02:                             ; CODE XREF: sub_40D940+9C↑j
.text:0040DA02                                         ; sub_40D940+A6↑j
.text:0040DA02                 cmp     eax, 5
.text:0040DA05                 jnz     short loc_40D9F3
.text:0040DA07                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DA0C                 cmp     eax, 2
.text:0040DA0F                 jz      short loc_40DA2E
.text:0040DA11                 cmp     eax, 1
.text:0040DA14                 jz      short loc_40DA21
.text:0040DA16                 test    eax, eax
.text:0040DA18                 jnz     short loc_40D9F3
.text:0040DA1A                 mov     edx, 32h ; '2'
.text:0040DA1F                 jmp     short loc_40D9ED
.text:0040DA21 ; ---------------------------------------------------------------------------
.text:0040DA21
.text:0040DA21 loc_40DA21:                             ; CODE XREF: sub_40D940+D4↑j
.text:0040DA21                 mov     ecx, 3Ch ; '<'
.text:0040DA26
.text:0040DA26 loc_40DA26:                             ; CODE XREF: sub_40D940+122↓j
.text:0040DA26                 mov     ds:dword_413440, ecx
.text:0040DA2C                 jmp     short loc_40D9F3
.text:0040DA2E ; ---------------------------------------------------------------------------
.text:0040DA2E
.text:0040DA2E loc_40DA2E:                             ; CODE XREF: sub_40D940+CF↑j
.text:0040DA2E                 mov     eax, 46h ; 'F'
.text:0040DA33
.text:0040DA33 loc_40DA33:                             ; CODE XREF: sub_40D940+109↓j
.text:0040DA33                                         ; sub_40D940+129↓j
.text:0040DA33                 mov     ds:dword_413440, eax
.text:0040DA38                 jmp     short loc_40D9F3
.text:0040DA3A ; ---------------------------------------------------------------------------
.text:0040DA3A
.text:0040DA3A loc_40DA3A:                             ; CODE XREF: sub_40D940+97↑j
.text:0040DA3A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040DA40                 test    ecx, ecx
.text:0040DA42                 jnz     short loc_40D9D9
.text:0040DA44                 mov     eax, 28h ; '('
.text:0040DA49                 jmp     short loc_40DA33
.text:0040DA4B ; ---------------------------------------------------------------------------
.text:0040DA4B
.text:0040DA4B loc_40DA4B:                             ; CODE XREF: sub_40D940+92↑j
.text:0040DA4B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DA50                 cmp     eax, 33h ; '3'
.text:0040DA53                 jz      short loc_40DA64
.text:0040DA55                 cmp     eax, 5
.text:0040DA58                 setz    cl
.text:0040DA5B                 movzx   edx, cl
.text:0040DA5E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040DA62                 jmp     short loc_40DA26
.text:0040DA64 ; ---------------------------------------------------------------------------
.text:0040DA64
.text:0040DA64 loc_40DA64:                             ; CODE XREF: sub_40D940+113↑j
.text:0040DA64                 mov     eax, 24h ; '$'
.text:0040DA69                 jmp     short loc_40DA33
.text:0040DA69 ; ---------------------------------------------------------------------------
.text:0040DA6B                 align 10h
.text:0040DA70
.text:0040DA70 loc_40DA70:                             ; CODE XREF: sub_40D940+60↑j
.text:0040DA70                 mov     edx, 2
.text:0040DA75                 mov     ds:dword_413440, edx
.text:0040DA7B                 jmp     loc_40D9B0
.text:0040DA80 ; ---------------------------------------------------------------------------
.text:0040DA80
.text:0040DA80 loc_40DA80:                             ; CODE XREF: sub_40D940+57↑j
.text:0040DA80                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040DA86                 cmp     ecx, 4
.text:0040DA89                 jnz     loc_40D9B0
.text:0040DA8F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040DA94                 test    eax, eax
.text:0040DA96                 jnz     short loc_40DABA
.text:0040DA98                 mov     eax, 0Ah
.text:0040DA9D                 mov     ds:dword_413440, eax
.text:0040DAA2                 lea     eax, [edx-3B7h]
.text:0040DAA8                 cmp     eax, 81h
.text:0040DAAD                 ja      short loc_40DB25
.text:0040DAAF                 mov     edx, 0Bh
.text:0040DAB4
.text:0040DAB4 loc_40DAB4:                             ; CODE XREF: sub_40D940+1F2↓j
.text:0040DAB4                 mov     ds:dword_413440, edx
.text:0040DABA
.text:0040DABA loc_40DABA:                             ; CODE XREF: sub_40D940+156↑j
.text:0040DABA                                         ; sub_40D940+1EB↓j
.text:0040DABA                 cmp     ecx, 4
.text:0040DABD                 jnz     loc_40D9B0
.text:0040DAC3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040DACA                 jz      short loc_40DAEC
.text:0040DACC
.text:0040DACC loc_40DACC:                             ; CODE XREF: sub_40D940+1D4↓j
.text:0040DACC                                         ; sub_40D940+1DC↓j
.text:0040DACC                 cmp     ecx, 4
.text:0040DACF                 jnz     loc_40D9B0
.text:0040DAD5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040DADC                 jnz     loc_40D9B0
.text:0040DAE2                 mov     ecx, 12h
.text:0040DAE7                 jmp     loc_40D9C2
.text:0040DAEC ; ---------------------------------------------------------------------------
.text:0040DAEC
.text:0040DAEC loc_40DAEC:                             ; CODE XREF: sub_40D940+18A↑j
.text:0040DAEC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040DAF2                 mov     eax, 0Eh
.text:0040DAF7                 mov     ds:dword_413440, eax
.text:0040DAFC                 lea     eax, [edx-7CFh]
.text:0040DB02                 cmp     eax, 0B7h ; '·'
.text:0040DB07                 ja      short loc_40DB16
.text:0040DB09                 mov     edx, 0Fh
.text:0040DB0E
.text:0040DB0E loc_40DB0E:                             ; CODE XREF: sub_40D940+1E3↓j
.text:0040DB0E                 mov     ds:dword_413440, edx
.text:0040DB14                 jmp     short loc_40DACC
.text:0040DB16 ; ---------------------------------------------------------------------------
.text:0040DB16
.text:0040DB16 loc_40DB16:                             ; CODE XREF: sub_40D940+1C7↑j
.text:0040DB16                 cmp     edx, 886h
.text:0040DB1C                 jbe     short loc_40DACC
.text:0040DB1E                 mov     edx, 10h
.text:0040DB23                 jmp     short loc_40DB0E
.text:0040DB25 ; ---------------------------------------------------------------------------
.text:0040DB25
.text:0040DB25 loc_40DB25:                             ; CODE XREF: sub_40D940+16D↑j
.text:0040DB25                 cmp     edx, 438h
.text:0040DB2B                 jbe     short loc_40DABA
.text:0040DB2D                 mov     edx, 0Ch
.text:0040DB32                 jmp     short loc_40DAB4
.text:0040DB34 ; ---------------------------------------------------------------------------
.text:0040DB34
.text:0040DB34 loc_40DB34:                             ; CODE XREF: sub_40D940+3C↑j
.text:0040DB34                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040DB3C                 xor     edx, edx
.text:0040DB3E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040DB42                 mov     dword_412080, edx
.text:0040DB48                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040DB4B                 call    GetVersionExA
.text:0040DB50                 sub     esp, 4
.text:0040DB53                 xor     edx, edx
.text:0040DB55                 test    eax, eax
.text:0040DB57                 jz      loc_40D955
.text:0040DB5D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040DB61                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040DB65                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040DB6B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040DB6F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040DB75                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040DB79                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040DB7F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040DB85                 jmp     loc_40D982
.text:0040DB85 sub_40D940      endp
.text:0040DB85
.text:0040DB85 ; ---------------------------------------------------------------------------
.text:0040DB8A                 align 10h
.text:0040DB90 aNotset         db 'notset',0           ; DATA XREF: .data:off_412090↓o
.text:0040DB90                                         ; .data:off_412094↓o
.text:0040DB97 ; ---------------------------------------------------------------------------
.text:0040DB97
.text:0040DB97 loc_40DB97:                             ; DATA XREF: .text:loc_40DC35↓o
.text:0040DB97                 jb      short loc_40DC10
.text:0040DB99                 add     [eax], ah
.text:0040DB9B                 or      [eax], eax
.text:0040DB9D
.text:0040DB9D loc_40DB9D:                             ; DATA XREF: .text:0040DC88↓o
.text:0040DB9D                                         ; .text:0040DCEE↓o ...
.text:0040DB9D                 add     [eax], ah
.text:0040DB9F                 and     eax, 64252064h
.text:0040DBA4                 and     [eax], al
.text:0040DBA6                 lea     esi, [esi+0]
.text:0040DBA9                 lea     edi, [edi+0]
.text:0040DBB0                 push    ebp
.text:0040DBB1                 push    edi
.text:0040DBB2                 push    esi
.text:0040DBB3                 push    ebx
.text:0040DBB4                 sub     esp, 14Ch
.text:0040DBBA                 mov     edx, off_412090 ; "notset"
.text:0040DBC0                 mov     edi, [esp+164h]
.text:0040DBC7                 mov     ebp, [esp+168h]
.text:0040DBCE                 mov     [esp+4], edx
.text:0040DBD2                 mov     edx, off_412094 ; "notset"
.text:0040DBD8                 mov     [esp], edx
.text:0040DBDB                 call    strcmp
.text:0040DBE0                 test    eax, eax
.text:0040DBE2                 jz      loc_40DFD0
.text:0040DBE8
.text:0040DBE8 loc_40DBE8:                             ; CODE XREF: .text:0040E01C↓j
.text:0040DBE8                 lea     ebx, [esp+20h]
.text:0040DBEC                 lea     esi, [esi+0]
.text:0040DBF0
.text:0040DBF0 loc_40DBF0:                             ; CODE XREF: .text:0040DC26↓j
.text:0040DBF0                 mov     [esp+4], ebx
.text:0040DBF4                 mov     ecx, off_412094 ; "notset"
.text:0040DBFA                 mov     [esp], ecx
.text:0040DBFD                 call    loc_40C470
.text:0040DC02                 test    eax, eax
.text:0040DC04                 jns     short loc_40DC35
.text:0040DC06                 mov     eax, off_412094 ; "notset"
.text:0040DC0B                 cmp     byte ptr [eax], 0
.text:0040DC0E                 jz      short loc_40DC28
.text:0040DC10
.text:0040DC10 loc_40DC10:                             ; CODE XREF: .text:loc_40DB97↑j
.text:0040DC10                 mov     dword ptr [esp+4], 0
.text:0040DC18                 mov     [esp], eax
.text:0040DC1B                 call    strchr
.text:0040DC20                 inc     eax
.text:0040DC21                 mov     off_412094, eax ; "notset"
.text:0040DC26                 jmp     short loc_40DBF0
.text:0040DC28 ; ---------------------------------------------------------------------------
.text:0040DC28
.text:0040DC28 loc_40DC28:                             ; CODE XREF: .text:0040DC0E↑j
.text:0040DC28                 xor     eax, eax
.text:0040DC2A
.text:0040DC2A loc_40DC2A:                             ; CODE XREF: .text:0040DDEC↓j
.text:0040DC2A                 add     esp, 14Ch
.text:0040DC30                 pop     ebx
.text:0040DC31                 pop     esi
.text:0040DC32                 pop     edi
.text:0040DC33                 pop     ebp
.text:0040DC34                 retn
.text:0040DC35 ; ---------------------------------------------------------------------------
.text:0040DC35
.text:0040DC35 loc_40DC35:                             ; CODE XREF: .text:0040DC04↑j
.text:0040DC35                 mov     dword ptr [edi+0Ch], offset loc_40DB97
.text:0040DC3C                 lea     ecx, [esp+0D6h]
.text:0040DC43                 lea     edx, [esp+6Ch]
.text:0040DC47                 mov     [edi+4], ecx
.text:0040DC4A                 lea     ebx, [esp+7Ch]
.text:0040DC4E                 mov     [edi+8], edx
.text:0040DC51                 mov     [edi], ebx
.text:0040DC53                 mov     [esp], ebp
.text:0040DC56                 mov     [esp+4], edi
.text:0040DC5A                 call    ___addmntentstr
.text:0040DC5F                 mov     [esp], ebp
.text:0040DC62                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DC6A                 call    strspn
.text:0040DC6F                 mov     dword ptr [esp+4], 0
.text:0040DC77                 mov     ebx, off_412094 ; "notset"
.text:0040DC7D                 lea     esi, [eax+ebp]
.text:0040DC80                 mov     [esp+1Ch], esi
.text:0040DC84                 lea     ebp, [esp+1Ch]
.text:0040DC88                 mov     esi, offset loc_40DB9D
.text:0040DC8D                 mov     [esp], ebx
.text:0040DC90                 call    strchr
.text:0040DC95                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DC9D                 inc     eax
.text:0040DC9E                 mov     off_412094, eax ; "notset"
.text:0040DCA3                 mov     [esp], ebp
.text:0040DCA6                 call    sub_40EEB0
.text:0040DCAB                 test    eax, eax
.text:0040DCAD                 mov     ebx, eax
.text:0040DCAF                 jz      short loc_40DCD8
.text:0040DCB1                 mov     edx, eax
.text:0040DCB3                 mov     ecx, eax
.text:0040DCB5                 lea     esi, [esi+0]
.text:0040DCB9                 lea     edi, [edi+0]
.text:0040DCC0
.text:0040DCC0 loc_40DCC0:                             ; CODE XREF: .text:0040DCD6↓j
.text:0040DCC0                 movzx   eax, byte ptr [edx]
.text:0040DCC3                 cmp     al, 5Ch ; '\'
.text:0040DCC5                 jz      loc_40DF74
.text:0040DCCB
.text:0040DCCB loc_40DCCB:                             ; CODE XREF: .text:0040DF7C↓j
.text:0040DCCB                                         ; .text:0040DF8A↓j ...
.text:0040DCCB                 mov     [ecx], al
.text:0040DCCD
.text:0040DCCD loc_40DCCD:                             ; CODE XREF: .text:0040DF9E↓j
.text:0040DCCD                 inc     ecx
.text:0040DCCE
.text:0040DCCE loc_40DCCE:                             ; CODE XREF: .text:0040DFB6↓j
.text:0040DCCE                 movzx   eax, byte ptr [edx]
.text:0040DCD1                 mov     esi, ebx
.text:0040DCD3                 inc     edx
.text:0040DCD4                 test    al, al
.text:0040DCD6                 jnz     short loc_40DCC0
.text:0040DCD8
.text:0040DCD8 loc_40DCD8:                             ; CODE XREF: .text:0040DCAF↑j
.text:0040DCD8                 mov     [edi], esi
.text:0040DCDA                 mov     eax, [esp+1Ch]
.text:0040DCDE                 test    eax, eax
.text:0040DCE0                 jnz     loc_40DF5B
.text:0040DCE6
.text:0040DCE6 loc_40DCE6:                             ; CODE XREF: .text:0040DF6F↓j
.text:0040DCE6                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DCEE                 mov     esi, offset loc_40DB9D
.text:0040DCF3                 mov     [esp], ebp
.text:0040DCF6                 call    sub_40EEB0
.text:0040DCFB                 test    eax, eax
.text:0040DCFD                 mov     ebx, eax
.text:0040DCFF                 jz      short loc_40DD28
.text:0040DD01                 mov     edx, eax
.text:0040DD03                 mov     ecx, eax
.text:0040DD05                 lea     esi, [esi+0]
.text:0040DD09                 lea     edi, [edi+0]
.text:0040DD10
.text:0040DD10 loc_40DD10:                             ; CODE XREF: .text:0040DD26↓j
.text:0040DD10                 movzx   eax, byte ptr [edx]
.text:0040DD13                 cmp     al, 5Ch ; '\'
.text:0040DD15                 jz      loc_40DF03
.text:0040DD1B
.text:0040DD1B loc_40DD1B:                             ; CODE XREF: .text:0040DF0B↓j
.text:0040DD1B                                         ; .text:0040DF19↓j ...
.text:0040DD1B                 mov     [ecx], al
.text:0040DD1D
.text:0040DD1D loc_40DD1D:                             ; CODE XREF: .text:0040DF2D↓j
.text:0040DD1D                 inc     ecx
.text:0040DD1E
.text:0040DD1E loc_40DD1E:                             ; CODE XREF: .text:0040DF45↓j
.text:0040DD1E                 movzx   eax, byte ptr [edx]
.text:0040DD21                 mov     esi, ebx
.text:0040DD23                 inc     edx
.text:0040DD24                 test    al, al
.text:0040DD26                 jnz     short loc_40DD10
.text:0040DD28
.text:0040DD28 loc_40DD28:                             ; CODE XREF: .text:0040DCFF↑j
.text:0040DD28                 mov     [edi+4], esi
.text:0040DD2B                 mov     eax, [esp+1Ch]
.text:0040DD2F                 test    eax, eax
.text:0040DD31                 jnz     loc_40DEEA
.text:0040DD37
.text:0040DD37 loc_40DD37:                             ; CODE XREF: .text:0040DEFE↓j
.text:0040DD37                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DD3F                 mov     esi, offset loc_40DB9D
.text:0040DD44                 mov     [esp], ebp
.text:0040DD47                 call    sub_40EEB0
.text:0040DD4C                 test    eax, eax
.text:0040DD4E                 mov     ebx, eax
.text:0040DD50                 jz      short loc_40DD78
.text:0040DD52                 mov     edx, eax
.text:0040DD54                 mov     ecx, eax
.text:0040DD56                 lea     esi, [esi+0]
.text:0040DD59                 lea     edi, [edi+0]
.text:0040DD60
.text:0040DD60 loc_40DD60:                             ; CODE XREF: .text:0040DD76↓j
.text:0040DD60                 movzx   eax, byte ptr [edx]
.text:0040DD63                 cmp     al, 5Ch ; '\'
.text:0040DD65                 jz      loc_40DE92
.text:0040DD6B
.text:0040DD6B loc_40DD6B:                             ; CODE XREF: .text:0040DE9A↓j
.text:0040DD6B                                         ; .text:0040DEA8↓j ...
.text:0040DD6B                 mov     [ecx], al
.text:0040DD6D
.text:0040DD6D loc_40DD6D:                             ; CODE XREF: .text:0040DEBC↓j
.text:0040DD6D                 inc     ecx
.text:0040DD6E
.text:0040DD6E loc_40DD6E:                             ; CODE XREF: .text:0040DED4↓j
.text:0040DD6E                 movzx   eax, byte ptr [edx]
.text:0040DD71                 mov     esi, ebx
.text:0040DD73                 inc     edx
.text:0040DD74                 test    al, al
.text:0040DD76                 jnz     short loc_40DD60
.text:0040DD78
.text:0040DD78 loc_40DD78:                             ; CODE XREF: .text:0040DD50↑j
.text:0040DD78                 mov     [edi+8], esi
.text:0040DD7B                 mov     eax, [esp+1Ch]
.text:0040DD7F                 test    eax, eax
.text:0040DD81                 jnz     loc_40DE79
.text:0040DD87
.text:0040DD87 loc_40DD87:                             ; CODE XREF: .text:0040DE8D↓j
.text:0040DD87                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DD8F                 mov     esi, offset loc_40DB9D
.text:0040DD94                 mov     [esp], ebp
.text:0040DD97                 call    sub_40EEB0
.text:0040DD9C                 test    eax, eax
.text:0040DD9E                 mov     ebx, eax
.text:0040DDA0                 jz      short loc_40DDC4
.text:0040DDA2                 mov     edx, eax
.text:0040DDA4                 mov     ecx, eax
.text:0040DDA6                 lea     esi, [esi+0]
.text:0040DDA9                 lea     edi, [edi+0]
.text:0040DDB0
.text:0040DDB0 loc_40DDB0:                             ; CODE XREF: .text:0040DDC2↓j
.text:0040DDB0                 movzx   eax, byte ptr [edx]
.text:0040DDB3                 cmp     al, 5Ch ; '\'
.text:0040DDB5                 jz      short loc_40DE25
.text:0040DDB7
.text:0040DDB7 loc_40DDB7:                             ; CODE XREF: .text:0040DE2D↓j
.text:0040DDB7                                         ; .text:0040DE37↓j ...
.text:0040DDB7                 mov     [ecx], al
.text:0040DDB9
.text:0040DDB9 loc_40DDB9:                             ; CODE XREF: .text:0040DE4B↓j
.text:0040DDB9                 inc     ecx
.text:0040DDBA
.text:0040DDBA loc_40DDBA:                             ; CODE XREF: .text:0040DE63↓j
.text:0040DDBA                 movzx   eax, byte ptr [edx]
.text:0040DDBD                 mov     esi, ebx
.text:0040DDBF                 inc     edx
.text:0040DDC0                 test    al, al
.text:0040DDC2                 jnz     short loc_40DDB0
.text:0040DDC4
.text:0040DDC4 loc_40DDC4:                             ; CODE XREF: .text:0040DDA0↑j
.text:0040DDC4                 mov     [edi+0Ch], esi
.text:0040DDC7                 xor     eax, eax
.text:0040DDC9                 mov     edx, [esp+1Ch]
.text:0040DDCD                 test    edx, edx
.text:0040DDCF                 jnz     short loc_40DE05
.text:0040DDD1
.text:0040DDD1 loc_40DDD1:                             ; CODE XREF: .text:0040DE23↓j
.text:0040DDD1                 cmp     eax, 1
.text:0040DDD4                 jz      short loc_40DDFC
.text:0040DDD6                 cmp     eax, 1
.text:0040DDD9                 jle     short loc_40DDF1
.text:0040DDDB
.text:0040DDDB loc_40DDDB:                             ; CODE XREF: .text:0040DDF3↓j
.text:0040DDDB                                         ; .text:0040DE03↓j
.text:0040DDDB                 mov     edx, [esp+160h]
.text:0040DDE2                 mov     [esp], edx
.text:0040DDE5                 call    sub_40EE50
.text:0040DDEA                 mov     eax, edi
.text:0040DDEC                 jmp     loc_40DC2A
.text:0040DDF1 ; ---------------------------------------------------------------------------
.text:0040DDF1
.text:0040DDF1 loc_40DDF1:                             ; CODE XREF: .text:0040DDD9↑j
.text:0040DDF1                 test    eax, eax
.text:0040DDF3                 jnz     short loc_40DDDB
.text:0040DDF5                 mov     dword ptr [edi+10h], 0
.text:0040DDFC
.text:0040DDFC loc_40DDFC:                             ; CODE XREF: .text:0040DDD4↑j
.text:0040DDFC                 mov     dword ptr [edi+14h], 0
.text:0040DE03                 jmp     short loc_40DDDB
.text:0040DE05 ; ---------------------------------------------------------------------------
.text:0040DE05
.text:0040DE05 loc_40DE05:                             ; CODE XREF: .text:0040DDCF↑j
.text:0040DE05                 mov     dword ptr [esp+4], 40DB9Eh
.text:0040DE0D                 lea     esi, [edi+14h]
.text:0040DE10                 lea     ebp, [edi+10h]
.text:0040DE13                 mov     [esp+0Ch], esi
.text:0040DE17                 mov     [esp+8], ebp
.text:0040DE1B                 mov     [esp], edx
.text:0040DE1E                 call    sscanf
.text:0040DE23                 jmp     short loc_40DDD1
.text:0040DE25 ; ---------------------------------------------------------------------------
.text:0040DE25
.text:0040DE25 loc_40DE25:                             ; CODE XREF: .text:0040DDB5↑j
.text:0040DE25                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DE29                 jz      short loc_40DE68
.text:0040DE2B
.text:0040DE2B loc_40DE2B:                             ; CODE XREF: .text:0040DE6C↓j
.text:0040DE2B                                         ; .text:0040DE72↓j
.text:0040DE2B                 cmp     al, 5Ch ; '\'
.text:0040DE2D                 jnz     short loc_40DDB7
.text:0040DE2F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DE33                 jz      short loc_40DE50
.text:0040DE35
.text:0040DE35 loc_40DE35:                             ; CODE XREF: .text:0040DE54↓j
.text:0040DE35                                         ; .text:0040DE5A↓j
.text:0040DE35                 cmp     al, 5Ch ; '\'
.text:0040DE37                 jnz     loc_40DDB7
.text:0040DE3D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040DE41                 jnz     loc_40DDB7
.text:0040DE47                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040DE4A                 inc     edx
.text:0040DE4B                 jmp     loc_40DDB9
.text:0040DE50 ; ---------------------------------------------------------------------------
.text:0040DE50
.text:0040DE50 loc_40DE50:                             ; CODE XREF: .text:0040DE33↑j
.text:0040DE50                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040DE54                 jnz     short loc_40DE35
.text:0040DE56                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040DE5A                 jnz     short loc_40DE35
.text:0040DE5C                 mov     byte ptr [ecx], 9
.text:0040DE5F
.text:0040DE5F loc_40DE5F:                             ; CODE XREF: .text:0040DE77↓j
.text:0040DE5F                 inc     ecx
.text:0040DE60                 add     edx, 3
.text:0040DE63                 jmp     loc_40DDBA
.text:0040DE68 ; ---------------------------------------------------------------------------
.text:0040DE68
.text:0040DE68 loc_40DE68:                             ; CODE XREF: .text:0040DE29↑j
.text:0040DE68                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040DE6C                 jnz     short loc_40DE2B
.text:0040DE6E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040DE72                 jnz     short loc_40DE2B
.text:0040DE74                 mov     byte ptr [ecx], 20h ; ' '
.text:0040DE77                 jmp     short loc_40DE5F
.text:0040DE79 ; ---------------------------------------------------------------------------
.text:0040DE79
.text:0040DE79 loc_40DE79:                             ; CODE XREF: .text:0040DD81↑j
.text:0040DE79                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DE81                 mov     [esp], eax
.text:0040DE84                 call    strspn
.text:0040DE89                 add     [esp+1Ch], eax
.text:0040DE8D                 jmp     loc_40DD87
.text:0040DE92 ; ---------------------------------------------------------------------------
.text:0040DE92
.text:0040DE92 loc_40DE92:                             ; CODE XREF: .text:0040DD65↑j
.text:0040DE92                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DE96                 jz      short loc_40DED9
.text:0040DE98
.text:0040DE98 loc_40DE98:                             ; CODE XREF: .text:0040DEDD↓j
.text:0040DE98                                         ; .text:0040DEE3↓j
.text:0040DE98                 cmp     al, 5Ch ; '\'
.text:0040DE9A                 jnz     loc_40DD6B
.text:0040DEA0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DEA4                 jz      short loc_40DEC1
.text:0040DEA6
.text:0040DEA6 loc_40DEA6:                             ; CODE XREF: .text:0040DEC5↓j
.text:0040DEA6                                         ; .text:0040DECB↓j
.text:0040DEA6                 cmp     al, 5Ch ; '\'
.text:0040DEA8                 jnz     loc_40DD6B
.text:0040DEAE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040DEB2                 jnz     loc_40DD6B
.text:0040DEB8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040DEBB                 inc     edx
.text:0040DEBC                 jmp     loc_40DD6D
.text:0040DEC1 ; ---------------------------------------------------------------------------
.text:0040DEC1
.text:0040DEC1 loc_40DEC1:                             ; CODE XREF: .text:0040DEA4↑j
.text:0040DEC1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040DEC5                 jnz     short loc_40DEA6
.text:0040DEC7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040DECB                 jnz     short loc_40DEA6
.text:0040DECD                 mov     byte ptr [ecx], 9
.text:0040DED0
.text:0040DED0 loc_40DED0:                             ; CODE XREF: .text:0040DEE8↓j
.text:0040DED0                 inc     ecx
.text:0040DED1                 add     edx, 3
.text:0040DED4                 jmp     loc_40DD6E
.text:0040DED9 ; ---------------------------------------------------------------------------
.text:0040DED9
.text:0040DED9 loc_40DED9:                             ; CODE XREF: .text:0040DE96↑j
.text:0040DED9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040DEDD                 jnz     short loc_40DE98
.text:0040DEDF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040DEE3                 jnz     short loc_40DE98
.text:0040DEE5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040DEE8                 jmp     short loc_40DED0
.text:0040DEEA ; ---------------------------------------------------------------------------
.text:0040DEEA
.text:0040DEEA loc_40DEEA:                             ; CODE XREF: .text:0040DD31↑j
.text:0040DEEA                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DEF2                 mov     [esp], eax
.text:0040DEF5                 call    strspn
.text:0040DEFA                 add     [esp+1Ch], eax
.text:0040DEFE                 jmp     loc_40DD37
.text:0040DF03 ; ---------------------------------------------------------------------------
.text:0040DF03
.text:0040DF03 loc_40DF03:                             ; CODE XREF: .text:0040DD15↑j
.text:0040DF03                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DF07                 jz      short loc_40DF4A
.text:0040DF09
.text:0040DF09 loc_40DF09:                             ; CODE XREF: .text:0040DF4E↓j
.text:0040DF09                                         ; .text:0040DF54↓j
.text:0040DF09                 cmp     al, 5Ch ; '\'
.text:0040DF0B                 jnz     loc_40DD1B
.text:0040DF11                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DF15                 jz      short loc_40DF32
.text:0040DF17
.text:0040DF17 loc_40DF17:                             ; CODE XREF: .text:0040DF36↓j
.text:0040DF17                                         ; .text:0040DF3C↓j
.text:0040DF17                 cmp     al, 5Ch ; '\'
.text:0040DF19                 jnz     loc_40DD1B
.text:0040DF1F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040DF23                 jnz     loc_40DD1B
.text:0040DF29                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040DF2C                 inc     edx
.text:0040DF2D                 jmp     loc_40DD1D
.text:0040DF32 ; ---------------------------------------------------------------------------
.text:0040DF32
.text:0040DF32 loc_40DF32:                             ; CODE XREF: .text:0040DF15↑j
.text:0040DF32                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040DF36                 jnz     short loc_40DF17
.text:0040DF38                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040DF3C                 jnz     short loc_40DF17
.text:0040DF3E                 mov     byte ptr [ecx], 9
.text:0040DF41
.text:0040DF41 loc_40DF41:                             ; CODE XREF: .text:0040DF59↓j
.text:0040DF41                 inc     ecx
.text:0040DF42                 add     edx, 3
.text:0040DF45                 jmp     loc_40DD1E
.text:0040DF4A ; ---------------------------------------------------------------------------
.text:0040DF4A
.text:0040DF4A loc_40DF4A:                             ; CODE XREF: .text:0040DF07↑j
.text:0040DF4A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040DF4E                 jnz     short loc_40DF09
.text:0040DF50                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040DF54                 jnz     short loc_40DF09
.text:0040DF56                 mov     byte ptr [ecx], 20h ; ' '
.text:0040DF59                 jmp     short loc_40DF41
.text:0040DF5B ; ---------------------------------------------------------------------------
.text:0040DF5B
.text:0040DF5B loc_40DF5B:                             ; CODE XREF: .text:0040DCE0↑j
.text:0040DF5B                 mov     dword ptr [esp+4], 40DB9Ah
.text:0040DF63                 mov     [esp], eax
.text:0040DF66                 call    strspn
.text:0040DF6B                 add     [esp+1Ch], eax
.text:0040DF6F                 jmp     loc_40DCE6
.text:0040DF74 ; ---------------------------------------------------------------------------
.text:0040DF74
.text:0040DF74 loc_40DF74:                             ; CODE XREF: .text:0040DCC5↑j
.text:0040DF74                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DF78                 jz      short loc_40DFBB
.text:0040DF7A
.text:0040DF7A loc_40DF7A:                             ; CODE XREF: .text:0040DFBF↓j
.text:0040DF7A                                         ; .text:0040DFC5↓j
.text:0040DF7A                 cmp     al, 5Ch ; '\'
.text:0040DF7C                 jnz     loc_40DCCB
.text:0040DF82                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040DF86                 jz      short loc_40DFA3
.text:0040DF88
.text:0040DF88 loc_40DF88:                             ; CODE XREF: .text:0040DFA7↓j
.text:0040DF88                                         ; .text:0040DFAD↓j
.text:0040DF88                 cmp     al, 5Ch ; '\'
.text:0040DF8A                 jnz     loc_40DCCB
.text:0040DF90                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040DF94                 jnz     loc_40DCCB
.text:0040DF9A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040DF9D                 inc     edx
.text:0040DF9E                 jmp     loc_40DCCD
.text:0040DFA3 ; ---------------------------------------------------------------------------
.text:0040DFA3
.text:0040DFA3 loc_40DFA3:                             ; CODE XREF: .text:0040DF86↑j
.text:0040DFA3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040DFA7                 jnz     short loc_40DF88
.text:0040DFA9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040DFAD                 jnz     short loc_40DF88
.text:0040DFAF                 mov     byte ptr [ecx], 9
.text:0040DFB2
.text:0040DFB2 loc_40DFB2:                             ; CODE XREF: .text:0040DFCA↓j
.text:0040DFB2                 inc     ecx
.text:0040DFB3                 add     edx, 3
.text:0040DFB6                 jmp     loc_40DCCE
.text:0040DFBB ; ---------------------------------------------------------------------------
.text:0040DFBB
.text:0040DFBB loc_40DFBB:                             ; CODE XREF: .text:0040DF78↑j
.text:0040DFBB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040DFBF                 jnz     short loc_40DF7A
.text:0040DFC1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040DFC5                 jnz     short loc_40DF7A
.text:0040DFC7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040DFCA                 jmp     short loc_40DFB2
.text:0040DFCA ; ---------------------------------------------------------------------------
.text:0040DFCC                 align 10h
.text:0040DFD0
.text:0040DFD0 loc_40DFD0:                             ; CODE XREF: .text:0040DBE2↑j
.text:0040DFD0                 mov     dword ptr [esp+4], 0
.text:0040DFD8                 mov     dword ptr [esp], 0
.text:0040DFDF                 call    GetLogicalDriveStringsA
.text:0040DFE4                 sub     esp, 8
.text:0040DFE7                 mov     ebx, eax
.text:0040DFE9                 call    GetProcessHeap
.text:0040DFEE                 mov     [esp], eax
.text:0040DFF1                 mov     [esp+8], ebx
.text:0040DFF5                 mov     dword ptr [esp+4], 0
.text:0040DFFD                 call    HeapAlloc
.text:0040E002                 sub     esp, 0Ch
.text:0040E005                 mov     esi, eax
.text:0040E007                 mov     [esp+4], eax
.text:0040E00B                 mov     [esp], ebx
.text:0040E00E                 call    GetLogicalDriveStringsA
.text:0040E013                 mov     off_412094, esi ; "notset"
.text:0040E019                 sub     esp, 8
.text:0040E01C                 jmp     loc_40DBE8
.text:0040E01C ; ---------------------------------------------------------------------------
.text:0040E021 ; const char aSSSSDD[]
.text:0040E021 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040E021                                         ; DATA XREF: .text:0040E160↓o
.text:0040E021                                         ; ___addmntentstr+F0↓o
.text:0040E034                 align 10h
.text:0040E040                 push    esi
.text:0040E041                 push    ebx
.text:0040E042                 sub     esp, 44h
.text:0040E045                 mov     ebx, [esp+54h]
.text:0040E049                 mov     esi, [esp+50h]
.text:0040E04D                 mov     edx, [ebx]
.text:0040E04F                 mov     [esp+20h], edx
.text:0040E053                 mov     ecx, [ebx+4]
.text:0040E056                 mov     [esp+24h], ecx
.text:0040E05A                 mov     edx, [ebx+8]
.text:0040E05D                 mov     [esp+28h], edx
.text:0040E061                 mov     ecx, [ebx+0Ch]
.text:0040E064                 mov     [esp+2Ch], ecx
.text:0040E068                 mov     edx, [ebx+10h]
.text:0040E06B                 mov     [esp+30h], edx
.text:0040E06F                 mov     ecx, [ebx+14h]
.text:0040E072                 mov     dword ptr [esp+8], 2
.text:0040E07A                 mov     dword ptr [esp+4], 0
.text:0040E082                 mov     [esp+34h], ecx
.text:0040E086                 mov     [esp], esi
.text:0040E089                 call    sub_40EE40
.text:0040E08E ; ---------------------------------------------------------------------------
.text:0040E08E                 test    eax, eax
.text:0040E090                 mov     edx, 1
.text:0040E095                 jnz     loc_40E195
.text:0040E09B                 mov     ebx, [esp+20h]
.text:0040E09F                 mov     edx, ebx
.text:0040E0A1                 movzx   eax, byte ptr [ebx]
.text:0040E0A4                 test    al, al
.text:0040E0A6                 jz      short loc_40E0D0
.text:0040E0A8                 nop
.text:0040E0A9                 lea     esi, [esi+0]
.text:0040E0B0
.text:0040E0B0 loc_40E0B0:                             ; CODE XREF: .text:0040E0CE↓j
.text:0040E0B0                 cmp     al, 20h ; ' '
.text:0040E0B2                 jz      loc_40E30A
.text:0040E0B8                 cmp     al, 9
.text:0040E0BA                 jz      loc_40E30A
.text:0040E0C0                 cmp     al, 5Ch ; '\'
.text:0040E0C2                 jz      loc_40E30A
.text:0040E0C8                 inc     ebx
.text:0040E0C9                 movzx   eax, byte ptr [ebx]
.text:0040E0CC                 test    al, al
.text:0040E0CE                 jnz     short loc_40E0B0
.text:0040E0D0
.text:0040E0D0 loc_40E0D0:                             ; CODE XREF: .text:0040E0A6↑j
.text:0040E0D0                                         ; .text:0040E30C↓j ...
.text:0040E0D0                 mov     ebx, [esp+24h]
.text:0040E0D4                 mov     edx, ebx
.text:0040E0D6                 movzx   eax, byte ptr [ebx]
.text:0040E0D9                 test    al, al
.text:0040E0DB                 jz      short loc_40E100
.text:0040E0DD                 lea     esi, [esi+0]
.text:0040E0E0
.text:0040E0E0 loc_40E0E0:                             ; CODE XREF: .text:0040E0FE↓j
.text:0040E0E0                 cmp     al, 20h ; ' '
.text:0040E0E2                 jz      loc_40E28A
.text:0040E0E8                 cmp     al, 9
.text:0040E0EA                 jz      loc_40E28A
.text:0040E0F0                 cmp     al, 5Ch ; '\'
.text:0040E0F2                 jz      loc_40E28A
.text:0040E0F8                 inc     ebx
.text:0040E0F9                 movzx   eax, byte ptr [ebx]
.text:0040E0FC                 test    al, al
.text:0040E0FE                 jnz     short loc_40E0E0
.text:0040E100
.text:0040E100 loc_40E100:                             ; CODE XREF: .text:0040E0DB↑j
.text:0040E100                                         ; .text:0040E28C↓j ...
.text:0040E100                 mov     ebx, [esp+28h]
.text:0040E104                 mov     edx, ebx
.text:0040E106                 movzx   eax, byte ptr [ebx]
.text:0040E109                 test    al, al
.text:0040E10B                 jz      short loc_40E130
.text:0040E10D                 lea     esi, [esi+0]
.text:0040E110
.text:0040E110 loc_40E110:                             ; CODE XREF: .text:0040E12E↓j
.text:0040E110                 cmp     al, 20h ; ' '
.text:0040E112                 jz      loc_40E20E
.text:0040E118                 cmp     al, 9
.text:0040E11A                 jz      loc_40E20E
.text:0040E120                 cmp     al, 5Ch ; '\'
.text:0040E122                 jz      loc_40E20E
.text:0040E128                 inc     ebx
.text:0040E129                 movzx   eax, byte ptr [ebx]
.text:0040E12C                 test    al, al
.text:0040E12E                 jnz     short loc_40E110
.text:0040E130
.text:0040E130 loc_40E130:                             ; CODE XREF: .text:0040E10B↑j
.text:0040E130                                         ; .text:0040E210↓j ...
.text:0040E130                 mov     edx, [esp+2Ch]
.text:0040E134                 mov     ebx, edx
.text:0040E136                 movzx   eax, byte ptr [edx]
.text:0040E139                 test    al, al
.text:0040E13B                 jz      short loc_40E154
.text:0040E13D                 lea     esi, [esi+0]
.text:0040E140
.text:0040E140 loc_40E140:                             ; CODE XREF: .text:0040E152↓j
.text:0040E140                 cmp     al, 20h ; ' '
.text:0040E142                 jz      short loc_40E19D
.text:0040E144                 cmp     al, 9
.text:0040E146                 jz      short loc_40E19D
.text:0040E148                 cmp     al, 5Ch ; '\'
.text:0040E14A                 jz      short loc_40E19D
.text:0040E14C                 inc     ebx
.text:0040E14D                 movzx   eax, byte ptr [ebx]
.text:0040E150                 test    al, al
.text:0040E152                 jnz     short loc_40E140
.text:0040E154
.text:0040E154 loc_40E154:                             ; CODE XREF: .text:0040E13B↑j
.text:0040E154                                         ; .text:0040E19F↓j ...
.text:0040E154                 mov     [esp+14h], edx
.text:0040E158                 mov     ecx, [esp+34h]
.text:0040E15C                 mov     ebx, [esp+30h]
.text:0040E160                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040E168                 mov     edx, [esp+24h]
.text:0040E16C                 mov     [esp+1Ch], ecx
.text:0040E170                 mov     ecx, [esp+28h]
.text:0040E174                 mov     [esp+18h], ebx
.text:0040E178                 mov     ebx, [esp+20h]
.text:0040E17C                 mov     [esp+0Ch], edx
.text:0040E180                 mov     [esp+10h], ecx
.text:0040E184                 mov     [esp+8], ebx
.text:0040E188                 mov     [esp], esi
.text:0040E18B                 call    fprintf
.text:0040E190                 mov     edx, eax
.text:0040E192                 shr     edx, 1Fh
.text:0040E195
.text:0040E195 loc_40E195:                             ; CODE XREF: .text:0040E095↑j
.text:0040E195                 add     esp, 44h
.text:0040E198                 mov     eax, edx
.text:0040E19A                 pop     ebx
.text:0040E19B                 pop     esi
.text:0040E19C                 retn
.text:0040E19D ; ---------------------------------------------------------------------------
.text:0040E19D
.text:0040E19D loc_40E19D:                             ; CODE XREF: .text:0040E142↑j
.text:0040E19D                                         ; .text:0040E146↑j ...
.text:0040E19D                 test    al, al
.text:0040E19F                 jz      short loc_40E154
.text:0040E1A1                 mov     [esp], edx
.text:0040E1A4                 mov     ebx, edx
.text:0040E1A6                 call    strlen
.text:0040E1AB                 lea     edx, ds:1[eax*4]
.text:0040E1B2                 mov     [esp], edx
.text:0040E1B5                 call    malloc
.text:0040E1BA                 mov     [esp+2Ch], eax
.text:0040E1BE                 mov     edx, eax
.text:0040E1C0
.text:0040E1C0 loc_40E1C0:                             ; CODE XREF: .text:0040E1D8↓j
.text:0040E1C0                 movzx   eax, byte ptr [ebx]
.text:0040E1C3                 cmp     al, 20h ; ' '
.text:0040E1C5                 jz      short loc_40E1FD
.text:0040E1C7                 cmp     al, 9
.text:0040E1C9                 jz      short loc_40E1EC
.text:0040E1CB                 cmp     al, 5Ch ; '\'
.text:0040E1CD                 jz      short loc_40E1E3
.text:0040E1CF                 mov     [edx], al
.text:0040E1D1
.text:0040E1D1 loc_40E1D1:                             ; CODE XREF: .text:0040E1EA↓j
.text:0040E1D1                                         ; .text:0040E1FB↓j ...
.text:0040E1D1                 movzx   ecx, byte ptr [ebx]
.text:0040E1D4                 inc     edx
.text:0040E1D5                 inc     ebx
.text:0040E1D6                 test    cl, cl
.text:0040E1D8                 jnz     short loc_40E1C0
.text:0040E1DA                 mov     edx, [esp+2Ch]
.text:0040E1DE                 jmp     loc_40E154
.text:0040E1E3 ; ---------------------------------------------------------------------------
.text:0040E1E3
.text:0040E1E3 loc_40E1E3:                             ; CODE XREF: .text:0040E1CD↑j
.text:0040E1E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E1E6                 inc     edx
.text:0040E1E7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E1EA                 jmp     short loc_40E1D1
.text:0040E1EC ; ---------------------------------------------------------------------------
.text:0040E1EC
.text:0040E1EC loc_40E1EC:                             ; CODE XREF: .text:0040E1C9↑j
.text:0040E1EC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E1EF                 inc     edx
.text:0040E1F0                 mov     byte ptr [edx], 30h ; '0'
.text:0040E1F3                 inc     edx
.text:0040E1F4                 mov     byte ptr [edx], 31h ; '1'
.text:0040E1F7                 inc     edx
.text:0040E1F8                 mov     byte ptr [edx], 32h ; '2'
.text:0040E1FB                 jmp     short loc_40E1D1
.text:0040E1FD ; ---------------------------------------------------------------------------
.text:0040E1FD
.text:0040E1FD loc_40E1FD:                             ; CODE XREF: .text:0040E1C5↑j
.text:0040E1FD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E200                 inc     edx
.text:0040E201                 mov     byte ptr [edx], 30h ; '0'
.text:0040E204                 inc     edx
.text:0040E205                 mov     byte ptr [edx], 34h ; '4'
.text:0040E208                 inc     edx
.text:0040E209                 mov     byte ptr [edx], 30h ; '0'
.text:0040E20C                 jmp     short loc_40E1D1
.text:0040E20E ; ---------------------------------------------------------------------------
.text:0040E20E
.text:0040E20E loc_40E20E:                             ; CODE XREF: .text:0040E112↑j
.text:0040E20E                                         ; .text:0040E11A↑j ...
.text:0040E20E                 test    al, al
.text:0040E210                 jz      loc_40E130
.text:0040E216                 mov     [esp], edx
.text:0040E219                 mov     ebx, edx
.text:0040E21B                 call    strlen
.text:0040E220                 lea     edx, ds:1[eax*4]
.text:0040E227                 mov     [esp], edx
.text:0040E22A                 call    malloc
.text:0040E22F                 mov     [esp+28h], eax
.text:0040E233                 mov     edx, eax
.text:0040E235                 lea     esi, [esi+0]
.text:0040E239                 lea     edi, [edi+0]
.text:0040E240
.text:0040E240 loc_40E240:                             ; CODE XREF: .text:0040E258↓j
.text:0040E240                 movzx   eax, byte ptr [ebx]
.text:0040E243                 cmp     al, 20h ; ' '
.text:0040E245                 jz      short loc_40E279
.text:0040E247                 cmp     al, 9
.text:0040E249                 jz      short loc_40E268
.text:0040E24B                 cmp     al, 5Ch ; '\'
.text:0040E24D                 jz      short loc_40E25F
.text:0040E24F                 mov     [edx], al
.text:0040E251
.text:0040E251 loc_40E251:                             ; CODE XREF: .text:0040E266↓j
.text:0040E251                                         ; .text:0040E277↓j ...
.text:0040E251                 movzx   ecx, byte ptr [ebx]
.text:0040E254                 inc     edx
.text:0040E255                 inc     ebx
.text:0040E256                 test    cl, cl
.text:0040E258                 jnz     short loc_40E240
.text:0040E25A                 jmp     loc_40E130
.text:0040E25F ; ---------------------------------------------------------------------------
.text:0040E25F
.text:0040E25F loc_40E25F:                             ; CODE XREF: .text:0040E24D↑j
.text:0040E25F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E262                 inc     edx
.text:0040E263                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E266                 jmp     short loc_40E251
.text:0040E268 ; ---------------------------------------------------------------------------
.text:0040E268
.text:0040E268 loc_40E268:                             ; CODE XREF: .text:0040E249↑j
.text:0040E268                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E26B                 inc     edx
.text:0040E26C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E26F                 inc     edx
.text:0040E270                 mov     byte ptr [edx], 31h ; '1'
.text:0040E273                 inc     edx
.text:0040E274                 mov     byte ptr [edx], 32h ; '2'
.text:0040E277                 jmp     short loc_40E251
.text:0040E279 ; ---------------------------------------------------------------------------
.text:0040E279
.text:0040E279 loc_40E279:                             ; CODE XREF: .text:0040E245↑j
.text:0040E279                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E27C                 inc     edx
.text:0040E27D                 mov     byte ptr [edx], 30h ; '0'
.text:0040E280                 inc     edx
.text:0040E281                 mov     byte ptr [edx], 34h ; '4'
.text:0040E284                 inc     edx
.text:0040E285                 mov     byte ptr [edx], 30h ; '0'
.text:0040E288                 jmp     short loc_40E251
.text:0040E28A ; ---------------------------------------------------------------------------
.text:0040E28A
.text:0040E28A loc_40E28A:                             ; CODE XREF: .text:0040E0E2↑j
.text:0040E28A                                         ; .text:0040E0EA↑j ...
.text:0040E28A                 test    al, al
.text:0040E28C                 jz      loc_40E100
.text:0040E292                 mov     [esp], edx
.text:0040E295                 mov     ebx, edx
.text:0040E297                 call    strlen
.text:0040E29C                 lea     edx, ds:1[eax*4]
.text:0040E2A3                 mov     [esp], edx
.text:0040E2A6                 call    malloc
.text:0040E2AB                 mov     [esp+24h], eax
.text:0040E2AF                 mov     edx, eax
.text:0040E2B1                 jmp     short loc_40E2C0
.text:0040E2B1 ; ---------------------------------------------------------------------------
.text:0040E2B3                 align 10h
.text:0040E2C0
.text:0040E2C0 loc_40E2C0:                             ; CODE XREF: .text:0040E2B1↑j
.text:0040E2C0                                         ; .text:0040E2D8↓j
.text:0040E2C0                 movzx   eax, byte ptr [ebx]
.text:0040E2C3                 cmp     al, 20h ; ' '
.text:0040E2C5                 jz      short loc_40E2F9
.text:0040E2C7                 cmp     al, 9
.text:0040E2C9                 jz      short loc_40E2E8
.text:0040E2CB                 cmp     al, 5Ch ; '\'
.text:0040E2CD                 jz      short loc_40E2DF
.text:0040E2CF                 mov     [edx], al
.text:0040E2D1
.text:0040E2D1 loc_40E2D1:                             ; CODE XREF: .text:0040E2E6↓j
.text:0040E2D1                                         ; .text:0040E2F7↓j ...
.text:0040E2D1                 movzx   ecx, byte ptr [ebx]
.text:0040E2D4                 inc     edx
.text:0040E2D5                 inc     ebx
.text:0040E2D6                 test    cl, cl
.text:0040E2D8                 jnz     short loc_40E2C0
.text:0040E2DA                 jmp     loc_40E100
.text:0040E2DF ; ---------------------------------------------------------------------------
.text:0040E2DF
.text:0040E2DF loc_40E2DF:                             ; CODE XREF: .text:0040E2CD↑j
.text:0040E2DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E2E2                 inc     edx
.text:0040E2E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E2E6                 jmp     short loc_40E2D1
.text:0040E2E8 ; ---------------------------------------------------------------------------
.text:0040E2E8
.text:0040E2E8 loc_40E2E8:                             ; CODE XREF: .text:0040E2C9↑j
.text:0040E2E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E2EB                 inc     edx
.text:0040E2EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040E2EF                 inc     edx
.text:0040E2F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040E2F3                 inc     edx
.text:0040E2F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040E2F7                 jmp     short loc_40E2D1
.text:0040E2F9 ; ---------------------------------------------------------------------------
.text:0040E2F9
.text:0040E2F9 loc_40E2F9:                             ; CODE XREF: .text:0040E2C5↑j
.text:0040E2F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E2FC                 inc     edx
.text:0040E2FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040E300                 inc     edx
.text:0040E301                 mov     byte ptr [edx], 34h ; '4'
.text:0040E304                 inc     edx
.text:0040E305                 mov     byte ptr [edx], 30h ; '0'
.text:0040E308                 jmp     short loc_40E2D1
.text:0040E30A ; ---------------------------------------------------------------------------
.text:0040E30A
.text:0040E30A loc_40E30A:                             ; CODE XREF: .text:0040E0B2↑j
.text:0040E30A                                         ; .text:0040E0BA↑j ...
.text:0040E30A                 test    al, al
.text:0040E30C                 jz      loc_40E0D0
.text:0040E312                 mov     [esp], edx
.text:0040E315                 mov     ebx, edx
.text:0040E317                 call    strlen
.text:0040E31C                 lea     ecx, ds:1[eax*4]
.text:0040E323                 mov     [esp], ecx
.text:0040E326                 call    malloc
.text:0040E32B                 mov     [esp+20h], eax
.text:0040E32F                 mov     edx, eax
.text:0040E331                 jmp     short loc_40E340
.text:0040E331 ; ---------------------------------------------------------------------------
.text:0040E333                 align 10h
.text:0040E340
.text:0040E340 loc_40E340:                             ; CODE XREF: .text:0040E331↑j
.text:0040E340                                         ; .text:0040E358↓j
.text:0040E340                 movzx   eax, byte ptr [ebx]
.text:0040E343                 cmp     al, 20h ; ' '
.text:0040E345                 jz      short loc_40E379
.text:0040E347                 cmp     al, 9
.text:0040E349                 jz      short loc_40E368
.text:0040E34B                 cmp     al, 5Ch ; '\'
.text:0040E34D                 jz      short loc_40E35F
.text:0040E34F                 mov     [edx], al
.text:0040E351
.text:0040E351 loc_40E351:                             ; CODE XREF: .text:0040E366↓j
.text:0040E351                                         ; .text:0040E377↓j ...
.text:0040E351                 movzx   ecx, byte ptr [ebx]
.text:0040E354                 inc     edx
.text:0040E355                 inc     ebx
.text:0040E356                 test    cl, cl
.text:0040E358                 jnz     short loc_40E340
.text:0040E35A                 jmp     loc_40E0D0
.text:0040E35F ; ---------------------------------------------------------------------------
.text:0040E35F
.text:0040E35F loc_40E35F:                             ; CODE XREF: .text:0040E34D↑j
.text:0040E35F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E362                 inc     edx
.text:0040E363                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E366                 jmp     short loc_40E351
.text:0040E368 ; ---------------------------------------------------------------------------
.text:0040E368
.text:0040E368 loc_40E368:                             ; CODE XREF: .text:0040E349↑j
.text:0040E368                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E36B                 inc     edx
.text:0040E36C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E36F                 inc     edx
.text:0040E370                 mov     byte ptr [edx], 31h ; '1'
.text:0040E373                 inc     edx
.text:0040E374                 mov     byte ptr [edx], 32h ; '2'
.text:0040E377                 jmp     short loc_40E351
.text:0040E379 ; ---------------------------------------------------------------------------
.text:0040E379
.text:0040E379 loc_40E379:                             ; CODE XREF: .text:0040E345↑j
.text:0040E379                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E37C                 inc     edx
.text:0040E37D                 mov     byte ptr [edx], 30h ; '0'
.text:0040E380                 inc     edx
.text:0040E381                 mov     byte ptr [edx], 34h ; '4'
.text:0040E384                 inc     edx
.text:0040E385                 mov     byte ptr [edx], 30h ; '0'
.text:0040E388                 jmp     short loc_40E351
.text:0040E388 ; ---------------------------------------------------------------------------
.text:0040E38A                 align 10h
.text:0040E390
.text:0040E390 ; =============== S U B R O U T I N E =======================================
.text:0040E390
.text:0040E390 ; Attributes: info_from_lumina
.text:0040E390
.text:0040E390 ; int __cdecl __addmntentstr(char *, int)
.text:0040E390 ___addmntentstr proc near               ; CODE XREF: .text:0040DC5A↑p
.text:0040E390
.text:0040E390 Buffer          = dword ptr -4Ch
.text:0040E390 Format          = dword ptr -48h
.text:0040E390 var_44          = dword ptr -44h
.text:0040E390 var_40          = dword ptr -40h
.text:0040E390 var_3C          = dword ptr -3Ch
.text:0040E390 var_38          = dword ptr -38h
.text:0040E390 var_34          = dword ptr -34h
.text:0040E390 var_30          = dword ptr -30h
.text:0040E390 var_2C          = dword ptr -2Ch
.text:0040E390 var_28          = dword ptr -28h
.text:0040E390 var_24          = dword ptr -24h
.text:0040E390 Str             = dword ptr -20h
.text:0040E390 var_1C          = dword ptr -1Ch
.text:0040E390 var_18          = dword ptr -18h
.text:0040E390 arg_0           = dword ptr  4
.text:0040E390 arg_4           = dword ptr  8
.text:0040E390
.text:0040E390                 push    ebx
.text:0040E391                 sub     esp, 48h
.text:0040E394                 mov     edx, [esp+4Ch+arg_4]
.text:0040E398                 mov     ecx, [edx]
.text:0040E39A                 mov     [esp+4Ch+var_2C], ecx
.text:0040E39E                 mov     ebx, [edx+4]
.text:0040E3A1                 mov     [esp+4Ch+var_28], ebx
.text:0040E3A5                 mov     ebx, [edx+8]
.text:0040E3A8                 mov     [esp+4Ch+var_24], ebx
.text:0040E3AC                 mov     ebx, [edx+0Ch]
.text:0040E3AF                 mov     [esp+4Ch+Str], ebx
.text:0040E3B3                 mov     ebx, [edx+10h]
.text:0040E3B6                 mov     [esp+4Ch+var_1C], ebx
.text:0040E3BA                 mov     ebx, [edx+14h]
.text:0040E3BD                 mov     [esp+4Ch+var_18], ebx
.text:0040E3C1                 mov     ebx, ecx
.text:0040E3C3                 movzx   eax, byte ptr [ecx]
.text:0040E3C6                 test    al, al
.text:0040E3C8                 jz      loc_40E6B1
.text:0040E3CE                 mov     esi, esi
.text:0040E3D0
.text:0040E3D0 loc_40E3D0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040E3D0                 cmp     al, 20h ; ' '
.text:0040E3D2                 jz      loc_40E630
.text:0040E3D8                 cmp     al, 9
.text:0040E3DA                 jz      loc_40E630
.text:0040E3E0                 cmp     al, 5Ch ; '\'
.text:0040E3E2                 jz      loc_40E630
.text:0040E3E8                 inc     ebx
.text:0040E3E9                 movzx   eax, byte ptr [ebx]
.text:0040E3EC                 test    al, al
.text:0040E3EE                 jnz     short loc_40E3D0
.text:0040E3F0
.text:0040E3F0 loc_40E3F0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040E3F0                                         ; ___addmntentstr+2EA↓j
.text:0040E3F0                 mov     ebx, [esp+4Ch+var_28]
.text:0040E3F4                 mov     edx, ebx
.text:0040E3F6                 movzx   eax, byte ptr [ebx]
.text:0040E3F9                 test    al, al
.text:0040E3FB                 jz      short loc_40E420
.text:0040E3FD                 lea     esi, [esi+0]
.text:0040E400
.text:0040E400 loc_40E400:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040E400                 cmp     al, 20h ; ' '
.text:0040E402                 jz      loc_40E5AA
.text:0040E408                 cmp     al, 9
.text:0040E40A                 jz      loc_40E5AA
.text:0040E410                 cmp     al, 5Ch ; '\'
.text:0040E412                 jz      loc_40E5AA
.text:0040E418                 inc     ebx
.text:0040E419                 movzx   eax, byte ptr [ebx]
.text:0040E41C                 test    al, al
.text:0040E41E                 jnz     short loc_40E400
.text:0040E420
.text:0040E420 loc_40E420:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040E420                                         ; ___addmntentstr+21C↓j ...
.text:0040E420                 mov     ebx, [esp+4Ch+var_24]
.text:0040E424                 mov     edx, ebx
.text:0040E426                 movzx   eax, byte ptr [ebx]
.text:0040E429                 test    al, al
.text:0040E42B                 jz      short loc_40E450
.text:0040E42D                 lea     esi, [esi+0]
.text:0040E430
.text:0040E430 loc_40E430:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040E430                 cmp     al, 20h ; ' '
.text:0040E432                 jz      loc_40E52E
.text:0040E438                 cmp     al, 9
.text:0040E43A                 jz      loc_40E52E
.text:0040E440                 cmp     al, 5Ch ; '\'
.text:0040E442                 jz      loc_40E52E
.text:0040E448                 inc     ebx
.text:0040E449                 movzx   eax, byte ptr [ebx]
.text:0040E44C                 test    al, al
.text:0040E44E                 jnz     short loc_40E430
.text:0040E450
.text:0040E450 loc_40E450:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040E450                                         ; ___addmntentstr+1A0↓j ...
.text:0040E450                 mov     edx, [esp+4Ch+Str]
.text:0040E454                 mov     ebx, edx
.text:0040E456                 movzx   eax, byte ptr [edx]
.text:0040E459                 test    al, al
.text:0040E45B                 jz      short loc_40E474
.text:0040E45D                 lea     esi, [esi+0]
.text:0040E460
.text:0040E460 loc_40E460:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040E460                 cmp     al, 20h ; ' '
.text:0040E462                 jz      short loc_40E4BC
.text:0040E464                 cmp     al, 9
.text:0040E466                 jz      short loc_40E4BC
.text:0040E468                 cmp     al, 5Ch ; '\'
.text:0040E46A                 jz      short loc_40E4BC
.text:0040E46C                 inc     ebx
.text:0040E46D                 movzx   eax, byte ptr [ebx]
.text:0040E470                 test    al, al
.text:0040E472                 jnz     short loc_40E460
.text:0040E474
.text:0040E474 loc_40E474:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040E474                                         ; ___addmntentstr+12E↓j ...
.text:0040E474                 mov     [esp+4Ch+var_38], edx
.text:0040E478                 mov     ebx, [esp+4Ch+var_18]
.text:0040E47C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040E480                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040E488                 mov     edx, [esp+4Ch+var_2C]
.text:0040E48C                 mov     [esp+4Ch+var_30], ebx
.text:0040E490                 mov     ebx, [esp+4Ch+var_24]
.text:0040E494                 mov     [esp+4Ch+var_34], ecx
.text:0040E498                 mov     ecx, [esp+4Ch+var_28]
.text:0040E49C                 mov     [esp+4Ch+var_3C], ebx
.text:0040E4A0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040E4A4                 mov     [esp+4Ch+var_40], ecx
.text:0040E4A8                 mov     [esp+4Ch+var_44], edx
.text:0040E4AC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040E4AF                 call    sprintf
.text:0040E4B4                 add     esp, 48h
.text:0040E4B7                 shr     eax, 1Fh
.text:0040E4BA                 pop     ebx
.text:0040E4BB                 retn
.text:0040E4BC ; ---------------------------------------------------------------------------
.text:0040E4BC
.text:0040E4BC loc_40E4BC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040E4BC                                         ; ___addmntentstr+D6↑j ...
.text:0040E4BC                 test    al, al
.text:0040E4BE                 jz      short loc_40E474
.text:0040E4C0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040E4C3                 mov     ebx, edx
.text:0040E4C5                 call    strlen
.text:0040E4CA                 lea     edx, ds:1[eax*4]
.text:0040E4D1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E4D4                 call    malloc
.text:0040E4D9                 mov     [esp+4Ch+Str], eax
.text:0040E4DD                 mov     edx, eax
.text:0040E4DF                 nop
.text:0040E4E0
.text:0040E4E0 loc_40E4E0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040E4E0                 movzx   eax, byte ptr [ebx]
.text:0040E4E3                 cmp     al, 20h ; ' '
.text:0040E4E5                 jz      short loc_40E51D
.text:0040E4E7                 cmp     al, 9
.text:0040E4E9                 jz      short loc_40E50C
.text:0040E4EB                 cmp     al, 5Ch ; '\'
.text:0040E4ED                 jz      short loc_40E503
.text:0040E4EF                 mov     [edx], al
.text:0040E4F1
.text:0040E4F1 loc_40E4F1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040E4F1                                         ; ___addmntentstr+18B↓j ...
.text:0040E4F1                 movzx   ecx, byte ptr [ebx]
.text:0040E4F4                 inc     edx
.text:0040E4F5                 inc     ebx
.text:0040E4F6                 test    cl, cl
.text:0040E4F8                 jnz     short loc_40E4E0
.text:0040E4FA                 mov     edx, [esp+4Ch+Str]
.text:0040E4FE                 jmp     loc_40E474
.text:0040E503 ; ---------------------------------------------------------------------------
.text:0040E503
.text:0040E503 loc_40E503:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040E503                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E506                 inc     edx
.text:0040E507                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E50A                 jmp     short loc_40E4F1
.text:0040E50C ; ---------------------------------------------------------------------------
.text:0040E50C
.text:0040E50C loc_40E50C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040E50C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E50F                 inc     edx
.text:0040E510                 mov     byte ptr [edx], 30h ; '0'
.text:0040E513                 inc     edx
.text:0040E514                 mov     byte ptr [edx], 31h ; '1'
.text:0040E517                 inc     edx
.text:0040E518                 mov     byte ptr [edx], 32h ; '2'
.text:0040E51B                 jmp     short loc_40E4F1
.text:0040E51D ; ---------------------------------------------------------------------------
.text:0040E51D
.text:0040E51D loc_40E51D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040E51D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E520                 inc     edx
.text:0040E521                 mov     byte ptr [edx], 30h ; '0'
.text:0040E524                 inc     edx
.text:0040E525                 mov     byte ptr [edx], 34h ; '4'
.text:0040E528                 inc     edx
.text:0040E529                 mov     byte ptr [edx], 30h ; '0'
.text:0040E52C                 jmp     short loc_40E4F1
.text:0040E52E ; ---------------------------------------------------------------------------
.text:0040E52E
.text:0040E52E loc_40E52E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040E52E                                         ; ___addmntentstr+AA↑j ...
.text:0040E52E                 test    al, al
.text:0040E530                 jz      loc_40E450
.text:0040E536                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040E539                 mov     ebx, edx
.text:0040E53B                 call    strlen
.text:0040E540                 lea     edx, ds:1[eax*4]
.text:0040E547                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E54A                 call    malloc
.text:0040E54F                 mov     [esp+4Ch+var_24], eax
.text:0040E553                 mov     edx, eax
.text:0040E555                 lea     esi, [esi+0]
.text:0040E559                 lea     edi, [edi+0]
.text:0040E560
.text:0040E560 loc_40E560:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040E560                 movzx   eax, byte ptr [ebx]
.text:0040E563                 cmp     al, 20h ; ' '
.text:0040E565                 jz      short loc_40E599
.text:0040E567                 cmp     al, 9
.text:0040E569                 jz      short loc_40E588
.text:0040E56B                 cmp     al, 5Ch ; '\'
.text:0040E56D                 jz      short loc_40E57F
.text:0040E56F                 mov     [edx], al
.text:0040E571
.text:0040E571 loc_40E571:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040E571                                         ; ___addmntentstr+207↓j ...
.text:0040E571                 movzx   ecx, byte ptr [ebx]
.text:0040E574                 inc     edx
.text:0040E575                 inc     ebx
.text:0040E576                 test    cl, cl
.text:0040E578                 jnz     short loc_40E560
.text:0040E57A                 jmp     loc_40E450
.text:0040E57F ; ---------------------------------------------------------------------------
.text:0040E57F
.text:0040E57F loc_40E57F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040E57F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E582                 inc     edx
.text:0040E583                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E586                 jmp     short loc_40E571
.text:0040E588 ; ---------------------------------------------------------------------------
.text:0040E588
.text:0040E588 loc_40E588:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040E588                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E58B                 inc     edx
.text:0040E58C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E58F                 inc     edx
.text:0040E590                 mov     byte ptr [edx], 31h ; '1'
.text:0040E593                 inc     edx
.text:0040E594                 mov     byte ptr [edx], 32h ; '2'
.text:0040E597                 jmp     short loc_40E571
.text:0040E599 ; ---------------------------------------------------------------------------
.text:0040E599
.text:0040E599 loc_40E599:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040E599                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E59C                 inc     edx
.text:0040E59D                 mov     byte ptr [edx], 30h ; '0'
.text:0040E5A0                 inc     edx
.text:0040E5A1                 mov     byte ptr [edx], 34h ; '4'
.text:0040E5A4                 inc     edx
.text:0040E5A5                 mov     byte ptr [edx], 30h ; '0'
.text:0040E5A8                 jmp     short loc_40E571
.text:0040E5AA ; ---------------------------------------------------------------------------
.text:0040E5AA
.text:0040E5AA loc_40E5AA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040E5AA                                         ; ___addmntentstr+7A↑j ...
.text:0040E5AA                 test    al, al
.text:0040E5AC                 jz      loc_40E420
.text:0040E5B2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040E5B5                 mov     ebx, edx
.text:0040E5B7                 call    strlen
.text:0040E5BC                 lea     edx, ds:1[eax*4]
.text:0040E5C3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E5C6                 call    malloc
.text:0040E5CB                 mov     [esp+4Ch+var_28], eax
.text:0040E5CF                 mov     edx, eax
.text:0040E5D1                 jmp     short loc_40E5E0
.text:0040E5D1 ; ---------------------------------------------------------------------------
.text:0040E5D3                 align 10h
.text:0040E5E0
.text:0040E5E0 loc_40E5E0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040E5E0                                         ; ___addmntentstr+268↓j
.text:0040E5E0                 movzx   eax, byte ptr [ebx]
.text:0040E5E3                 cmp     al, 20h ; ' '
.text:0040E5E5                 jz      short loc_40E619
.text:0040E5E7                 cmp     al, 9
.text:0040E5E9                 jz      short loc_40E608
.text:0040E5EB                 cmp     al, 5Ch ; '\'
.text:0040E5ED                 jz      short loc_40E5FF
.text:0040E5EF                 mov     [edx], al
.text:0040E5F1
.text:0040E5F1 loc_40E5F1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040E5F1                                         ; ___addmntentstr+287↓j ...
.text:0040E5F1                 movzx   ecx, byte ptr [ebx]
.text:0040E5F4                 inc     edx
.text:0040E5F5                 inc     ebx
.text:0040E5F6                 test    cl, cl
.text:0040E5F8                 jnz     short loc_40E5E0
.text:0040E5FA                 jmp     loc_40E420
.text:0040E5FF ; ---------------------------------------------------------------------------
.text:0040E5FF
.text:0040E5FF loc_40E5FF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040E5FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E602                 inc     edx
.text:0040E603                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E606                 jmp     short loc_40E5F1
.text:0040E608 ; ---------------------------------------------------------------------------
.text:0040E608
.text:0040E608 loc_40E608:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040E608                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E60B                 inc     edx
.text:0040E60C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E60F                 inc     edx
.text:0040E610                 mov     byte ptr [edx], 31h ; '1'
.text:0040E613                 inc     edx
.text:0040E614                 mov     byte ptr [edx], 32h ; '2'
.text:0040E617                 jmp     short loc_40E5F1
.text:0040E619 ; ---------------------------------------------------------------------------
.text:0040E619
.text:0040E619 loc_40E619:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040E619                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E61C                 inc     edx
.text:0040E61D                 mov     byte ptr [edx], 30h ; '0'
.text:0040E620                 inc     edx
.text:0040E621                 mov     byte ptr [edx], 34h ; '4'
.text:0040E624                 inc     edx
.text:0040E625                 mov     byte ptr [edx], 30h ; '0'
.text:0040E628                 jmp     short loc_40E5F1
.text:0040E628 ; ---------------------------------------------------------------------------
.text:0040E62A                 align 10h
.text:0040E630
.text:0040E630 loc_40E630:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040E630                                         ; ___addmntentstr+4A↑j ...
.text:0040E630                 test    al, al
.text:0040E632                 jz      loc_40E3F0
.text:0040E638                 mov     ebx, [esp+4Ch+var_2C]
.text:0040E63C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040E63F                 call    strlen
.text:0040E644                 lea     edx, ds:1[eax*4]
.text:0040E64B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040E64E                 call    malloc
.text:0040E653                 mov     [esp+4Ch+var_2C], eax
.text:0040E657                 mov     edx, eax
.text:0040E659                 lea     esi, [esi+0]
.text:0040E660
.text:0040E660 loc_40E660:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040E660                 movzx   eax, byte ptr [ebx]
.text:0040E663                 cmp     al, 20h ; ' '
.text:0040E665                 jz      short loc_40E6A0
.text:0040E667                 cmp     al, 9
.text:0040E669                 jz      short loc_40E688
.text:0040E66B                 cmp     al, 5Ch ; '\'
.text:0040E66D                 jz      short loc_40E67F
.text:0040E66F                 mov     [edx], al
.text:0040E671
.text:0040E671 loc_40E671:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040E671                                         ; ___addmntentstr+307↓j ...
.text:0040E671                 movzx   ecx, byte ptr [ebx]
.text:0040E674                 inc     edx
.text:0040E675                 inc     ebx
.text:0040E676                 test    cl, cl
.text:0040E678                 jnz     short loc_40E660
.text:0040E67A                 jmp     loc_40E3F0
.text:0040E67F ; ---------------------------------------------------------------------------
.text:0040E67F
.text:0040E67F loc_40E67F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040E67F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E682                 inc     edx
.text:0040E683                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E686                 jmp     short loc_40E671
.text:0040E688 ; ---------------------------------------------------------------------------
.text:0040E688
.text:0040E688 loc_40E688:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040E688                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E68B                 inc     edx
.text:0040E68C                 mov     byte ptr [edx], 30h ; '0'
.text:0040E68F                 inc     edx
.text:0040E690                 mov     byte ptr [edx], 31h ; '1'
.text:0040E693                 inc     edx
.text:0040E694                 mov     byte ptr [edx], 32h ; '2'
.text:0040E697                 jmp     short loc_40E671
.text:0040E697 ; ---------------------------------------------------------------------------
.text:0040E699                 align 10h
.text:0040E6A0
.text:0040E6A0 loc_40E6A0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040E6A0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E6A3                 inc     edx
.text:0040E6A4                 mov     byte ptr [edx], 30h ; '0'
.text:0040E6A7                 inc     edx
.text:0040E6A8                 mov     byte ptr [edx], 34h ; '4'
.text:0040E6AB                 inc     edx
.text:0040E6AC                 mov     byte ptr [edx], 30h ; '0'
.text:0040E6AF                 jmp     short loc_40E671
.text:0040E6B1 ; ---------------------------------------------------------------------------
.text:0040E6B1
.text:0040E6B1 loc_40E6B1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040E6B1                 movzx   eax, byte ptr [ecx]
.text:0040E6B4                 jmp     loc_40E630
.text:0040E6B4 ___addmntentstr endp
.text:0040E6B4
.text:0040E6B4 ; ---------------------------------------------------------------------------
.text:0040E6B9                 align 10h
.text:0040E6C0
.text:0040E6C0 ; =============== S U B R O U T I N E =======================================
.text:0040E6C0
.text:0040E6C0
.text:0040E6C0 sub_40E6C0      proc near               ; CODE XREF: sub_40BAA0+99↑p
.text:0040E6C0
.text:0040E6C0 nBufferLength   = dword ptr -1Ch
.text:0040E6C0 lpBuffer        = dword ptr -18h
.text:0040E6C0 dwBytes         = dword ptr -14h
.text:0040E6C0 var_8           = dword ptr -8
.text:0040E6C0 var_4           = dword ptr -4
.text:0040E6C0
.text:0040E6C0                 sub     esp, 1Ch
.text:0040E6C3                 mov     [esp+1Ch+var_8], ebx
.text:0040E6C7                 mov     [esp+1Ch+var_4], esi
.text:0040E6CB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040E6D3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040E6DA                 call    GetLogicalDriveStringsA
.text:0040E6DF                 sub     esp, 8
.text:0040E6E2                 mov     ebx, eax
.text:0040E6E4                 call    GetProcessHeap
.text:0040E6E9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040E6EC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040E6F0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040E6F8                 call    HeapAlloc
.text:0040E6FD                 sub     esp, 0Ch
.text:0040E700                 mov     esi, eax
.text:0040E702                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040E705                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040E709                 call    GetLogicalDriveStringsA
.text:0040E70E                 sub     esp, 8
.text:0040E711                 mov     eax, esi
.text:0040E713                 mov     ebx, [esp+1Ch+var_8]
.text:0040E717                 mov     esi, [esp+1Ch+var_4]
.text:0040E71B                 add     esp, 1Ch
.text:0040E71E                 retn
.text:0040E71E sub_40E6C0      endp
.text:0040E71E
.text:0040E71F
.text:0040E71F ; =============== S U B R O U T I N E =======================================
.text:0040E71F
.text:0040E71F
.text:0040E71F ; int __cdecl sub_40E71F(char *, char *)
.text:0040E71F sub_40E71F      proc near               ; DATA XREF: sub_40E71F:loc_40E7AD↓o
.text:0040E71F
.text:0040E71F FileName        = dword ptr -1Ch
.text:0040E71F Mode            = dword ptr -18h
.text:0040E71F dwBytes         = dword ptr -14h
.text:0040E71F arg_0           = dword ptr  4
.text:0040E71F arg_4           = dword ptr  8
.text:0040E71F
.text:0040E71F                 ja      short $+2
.text:0040E721
.text:0040E721 loc_40E721:                             ; CODE XREF: sub_40E71F↑j
.text:0040E721                 jmp     short loc_40E730
.text:0040E721 ; ---------------------------------------------------------------------------
.text:0040E723                 align 10h
.text:0040E730
.text:0040E730 loc_40E730:                             ; CODE XREF: sub_40E71F:loc_40E721↑j
.text:0040E730                 push    edi
.text:0040E731                 push    esi
.text:0040E732                 push    ebx
.text:0040E733                 sub     esp, 10h
.text:0040E736                 mov     ebx, [esp+1Ch+arg_0]
.text:0040E73A                 mov     edx, [esp+1Ch+arg_4]
.text:0040E73E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040E741                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040E745                 call    fopen
.text:0040E74A                 test    eax, eax
.text:0040E74C                 mov     edi, eax
.text:0040E74E                 jz      short loc_40E7AD
.text:0040E750
.text:0040E750 loc_40E750:                             ; CODE XREF: sub_40E71F+A2↓j
.text:0040E750                                         ; sub_40E71F+AB↓j
.text:0040E750                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040E758                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040E75F                 call    GetLogicalDriveStringsA
.text:0040E764                 sub     esp, 8
.text:0040E767                 mov     esi, eax
.text:0040E769                 call    GetProcessHeap
.text:0040E76E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040E771                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040E775                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040E77D                 call    HeapAlloc
.text:0040E782                 sub     esp, 0Ch
.text:0040E785                 mov     ebx, eax
.text:0040E787                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040E78A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040E78E                 call    GetLogicalDriveStringsA
.text:0040E793                 mov     off_412094, ebx ; "notset"
.text:0040E799                 sub     esp, 8
.text:0040E79C                 xor     eax, eax
.text:0040E79E                 test    ebx, ebx
.text:0040E7A0                 setz    al
.text:0040E7A3                 add     esp, 10h
.text:0040E7A6                 pop     ebx
.text:0040E7A7                 dec     eax
.text:0040E7A8                 and     eax, edi
.text:0040E7AA                 pop     esi
.text:0040E7AB                 pop     edi
.text:0040E7AC                 retn
.text:0040E7AD ; ---------------------------------------------------------------------------
.text:0040E7AD
.text:0040E7AD loc_40E7AD:                             ; CODE XREF: sub_40E71F+2F↑j
.text:0040E7AD                 mov     [esp+1Ch+Mode], offset sub_40E71F ; Mode
.text:0040E7B5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040E7B8                 call    fopen
.text:0040E7BD                 test    eax, eax
.text:0040E7BF                 mov     edi, eax
.text:0040E7C1                 jnz     short loc_40E750
.text:0040E7C3                 call    sub_40EF50
.text:0040E7C8                 mov     edi, eax
.text:0040E7CA                 jmp     short loc_40E750
.text:0040E7CA sub_40E71F      endp
.text:0040E7CA
.text:0040E7CA ; ---------------------------------------------------------------------------
.text:0040E7CC                 align 10h
.text:0040E7D0                 sub     esp, 0Ch
.text:0040E7D3                 mov     eax, [esp+10h]
.text:0040E7D7                 test    eax, eax
.text:0040E7D9                 jz      short loc_40E7E3
.text:0040E7DB                 mov     [esp], eax
.text:0040E7DE                 call    fclose
.text:0040E7E3
.text:0040E7E3 loc_40E7E3:                             ; CODE XREF: .text:0040E7D9↑j
.text:0040E7E3                 call    GetProcessHeap
.text:0040E7E8                 mov     [esp], eax
.text:0040E7EB                 mov     ecx, off_412094 ; "notset"
.text:0040E7F1                 mov     dword ptr [esp+4], 0
.text:0040E7F9                 mov     [esp+8], ecx
.text:0040E7FD                 call    HeapFree
.text:0040E802                 mov     edx, off_412090 ; "notset"
.text:0040E808                 sub     esp, 0Ch
.text:0040E80B                 mov     eax, 1
.text:0040E810                 mov     off_412094, edx ; "notset"
.text:0040E816                 add     esp, 0Ch
.text:0040E819                 retn
.text:0040E819 ; ---------------------------------------------------------------------------
.text:0040E81A                 align 10h
.text:0040E820                 push    edi
.text:0040E821                 push    esi
.text:0040E822                 push    ebx
.text:0040E823                 sub     esp, 10h
.text:0040E826                 mov     edi, [esp+24h]
.text:0040E82A                 mov     [esp], edi
.text:0040E82D                 call    strlen
.text:0040E832                 mov     edx, [esp+20h]
.text:0040E836                 mov     esi, eax
.text:0040E838                 mov     ebx, [edx+0Ch]
.text:0040E83B                 nop
.text:0040E83C                 lea     esi, [esi+0]
.text:0040E840
.text:0040E840 loc_40E840:                             ; CODE XREF: .text:0040E871↓j
.text:0040E840                 mov     [esp+4], edi
.text:0040E844                 mov     [esp], ebx
.text:0040E847                 call    strstr
.text:0040E84C                 test    eax, eax
.text:0040E84E                 jz      short loc_40E873
.text:0040E850                 cmp     eax, ebx
.text:0040E852                 jz      short loc_40E875
.text:0040E854                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040E858                 jz      short loc_40E880
.text:0040E85A
.text:0040E85A loc_40E85A:                             ; CODE XREF: .text:0040E890↓j
.text:0040E85A                 mov     [esp], ebx
.text:0040E85D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040E865                 call    strchr
.text:0040E86A                 test    eax, eax
.text:0040E86C                 mov     ebx, eax
.text:0040E86E                 jz      short loc_40E873
.text:0040E870                 inc     ebx
.text:0040E871                 jmp     short loc_40E840
.text:0040E873 ; ---------------------------------------------------------------------------
.text:0040E873
.text:0040E873 loc_40E873:                             ; CODE XREF: .text:0040E84E↑j
.text:0040E873                                         ; .text:0040E86E↑j
.text:0040E873                 xor     eax, eax
.text:0040E875
.text:0040E875 loc_40E875:                             ; CODE XREF: .text:0040E852↑j
.text:0040E875                                         ; .text:0040E886↓j ...
.text:0040E875                 add     esp, 10h
.text:0040E878                 pop     ebx
.text:0040E879                 pop     esi
.text:0040E87A                 pop     edi
.text:0040E87B                 retn
.text:0040E87B ; ---------------------------------------------------------------------------
.text:0040E87C                 align 10h
.text:0040E880
.text:0040E880 loc_40E880:                             ; CODE XREF: .text:0040E858↑j
.text:0040E880                 movzx   edx, byte ptr [esi+eax]
.text:0040E884                 test    dl, dl
.text:0040E886                 jz      short loc_40E875
.text:0040E888                 cmp     dl, 3Dh ; '='
.text:0040E88B                 jz      short loc_40E875
.text:0040E88D                 cmp     dl, 2Ch ; ','
.text:0040E890                 jnz     short loc_40E85A
.text:0040E892                 jmp     short loc_40E875
.text:0040E892 ; ---------------------------------------------------------------------------
.text:0040E894                 align 10h
.text:0040E8A0
.text:0040E8A0 ; =============== S U B R O U T I N E =======================================
.text:0040E8A0
.text:0040E8A0
.text:0040E8A0 ; int __cdecl sub_40E8A0(HANDLE, LPCSTR lpFileName, int)
.text:0040E8A0 sub_40E8A0      proc near               ; CODE XREF: sub_40C970+22↑p
.text:0040E8A0                                         ; sub_40E9A0+5F↓p
.text:0040E8A0
.text:0040E8A0 hFile           = dword ptr -3Ch
.text:0040E8A0 lpCreationTime  = dword ptr -38h
.text:0040E8A0 lpLastAccessTime= dword ptr -34h
.text:0040E8A0 lpLastWriteTime = dword ptr -30h
.text:0040E8A0 LastWriteTime   = FILETIME ptr -24h
.text:0040E8A0 LastAccessTime  = FILETIME ptr -1Ch
.text:0040E8A0 arg_0           = dword ptr  4
.text:0040E8A0 lpFileName      = dword ptr  8
.text:0040E8A0 arg_8           = dword ptr  0Ch
.text:0040E8A0
.text:0040E8A0                 push    ebp
.text:0040E8A1                 push    edi
.text:0040E8A2                 push    esi
.text:0040E8A3                 push    ebx
.text:0040E8A4                 sub     esp, 2Ch
.text:0040E8A7                 mov     ebp, [esp+3Ch+arg_0]
.text:0040E8AB                 mov     edi, [esp+3Ch+arg_8]
.text:0040E8AF                 cmp     ebp, 0FFFFFFFFh
.text:0040E8B2                 jz      loc_40E981
.text:0040E8B8                 test    edi, edi
.text:0040E8BA                 jz      loc_40E960
.text:0040E8C0                 mov     eax, [edi]
.text:0040E8C2                 mov     esi, 989680h
.text:0040E8C7                 imul    esi
.text:0040E8C9                 mov     ebx, edx
.text:0040E8CB                 mov     ecx, eax
.text:0040E8CD                 mov     edx, [edi+4]
.text:0040E8D0                 lea     eax, [edx+edx*4]
.text:0040E8D3                 add     eax, eax
.text:0040E8D5                 cdq
.text:0040E8D6                 add     ecx, eax
.text:0040E8D8                 adc     ebx, edx
.text:0040E8DA                 add     ecx, 0D53E8000h
.text:0040E8E0                 adc     ebx, 19DB1DEh
.text:0040E8E6                 mov     [esp+3Ch+LastAccessTime.dwLowDateTime], ecx
.text:0040E8EA                 mov     [esp+3Ch+LastAccessTime.dwHighDateTime], ebx
.text:0040E8EE                 mov     eax, [edi+8]
.text:0040E8F1                 imul    esi
.text:0040E8F3                 mov     ecx, edx
.text:0040E8F5                 mov     esi, eax
.text:0040E8F7                 mov     edx, [edi+0Ch]
.text:0040E8FA                 lea     eax, [edx+edx*4]
.text:0040E8FD                 add     eax, eax
.text:0040E8FF                 cdq
.text:0040E900                 add     esi, eax
.text:0040E902                 adc     ecx, edx
.text:0040E904                 add     esi, 0D53E8000h
.text:0040E90A                 adc     ecx, 19DB1DEh
.text:0040E910                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0040E914                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], esi
.text:0040E918
.text:0040E918 loc_40E918:                             ; CODE XREF: sub_40E8A0+DF↓j
.text:0040E918                 mov     [esp+3Ch+lpCreationTime], 0 ; lpCreationTime
.text:0040E920                 lea     eax, [esp+3Ch+LastWriteTime]
.text:0040E924                 lea     edi, [esp+3Ch+LastAccessTime]
.text:0040E928                 mov     [esp+3Ch+lpLastWriteTime], eax ; lpLastWriteTime
.text:0040E92C                 mov     [esp+3Ch+lpLastAccessTime], edi ; lpLastAccessTime
.text:0040E930                 mov     [esp+3Ch+hFile], ebp ; hFile
.text:0040E933                 call    SetFileTime
.text:0040E938                 sub     esp, 10h
.text:0040E93B                 xor     edx, edx
.text:0040E93D                 test    eax, eax
.text:0040E93F
.text:0040E93F loc_40E93F:                             ; CODE XREF: sub_40E8A0+F4↓j
.text:0040E93F                 jz      short loc_40E94B
.text:0040E941
.text:0040E941 loc_40E941:                             ; CODE XREF: sub_40E8A0+BE↓j
.text:0040E941                 add     esp, 2Ch
.text:0040E944                 mov     eax, edx
.text:0040E946                 pop     ebx
.text:0040E947                 pop     esi
.text:0040E948                 pop     edi
.text:0040E949                 pop     ebp
.text:0040E94A                 retn
.text:0040E94B ; ---------------------------------------------------------------------------
.text:0040E94B
.text:0040E94B loc_40E94B:                             ; CODE XREF: sub_40E8A0:loc_40E93F↑j
.text:0040E94B                 call    sub_40CE00
.text:0040E950                 mov     ebp, eax
.text:0040E952                 call    _errno
.text:0040E957                 mov     [eax], ebp
.text:0040E959                 mov     edx, 0FFFFFFFFh
.text:0040E95E                 jmp     short loc_40E941
.text:0040E960 ; ---------------------------------------------------------------------------
.text:0040E960
.text:0040E960 loc_40E960:                             ; CODE XREF: sub_40E8A0+1A↑j
.text:0040E960                 lea     ebx, [esp+3Ch+LastAccessTime]
.text:0040E964                 mov     [esp+3Ch+hFile], ebx ; lpSystemTimeAsFileTime
.text:0040E967                 call    GetSystemTimeAsFileTime
.text:0040E96C                 sub     esp, 4
.text:0040E96F                 mov     edx, [esp+3Ch+LastAccessTime.dwLowDateTime]
.text:0040E973                 mov     ecx, [esp+3Ch+LastAccessTime.dwHighDateTime]
.text:0040E977                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], edx
.text:0040E97B                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0040E97F                 jmp     short loc_40E918
.text:0040E981 ; ---------------------------------------------------------------------------
.text:0040E981
.text:0040E981 loc_40E981:                             ; CODE XREF: sub_40E8A0+12↑j
.text:0040E981                 mov     edx, [esp+3Ch+lpFileName]
.text:0040E985                 mov     [esp+3Ch+hFile], edx ; lpFileName
.text:0040E988                 call    GetFileAttributesA
.text:0040E98D                 sub     esp, 4
.text:0040E990                 xor     edx, edx
.text:0040E992                 test    al, 10h
.text:0040E994                 jmp     short loc_40E93F
.text:0040E994 sub_40E8A0      endp
.text:0040E994
.text:0040E994 ; ---------------------------------------------------------------------------
.text:0040E996                 align 10h
.text:0040E9A0
.text:0040E9A0 ; =============== S U B R O U T I N E =======================================
.text:0040E9A0
.text:0040E9A0
.text:0040E9A0 ; int __cdecl sub_40E9A0(LPCSTR, int)
.text:0040E9A0 sub_40E9A0      proc near               ; CODE XREF: sub_40C670:loc_40C6D0↑p
.text:0040E9A0
.text:0040E9A0 lpFileName      = dword ptr -2Ch
.text:0040E9A0 dwDesiredAccess = dword ptr -28h
.text:0040E9A0 dwShareMode     = dword ptr -24h
.text:0040E9A0 lpSecurityAttributes= dword ptr -20h
.text:0040E9A0 dwCreationDisposition= dword ptr -1Ch
.text:0040E9A0 dwFlagsAndAttributes= dword ptr -18h
.text:0040E9A0 hTemplateFile   = dword ptr -14h
.text:0040E9A0 var_8           = dword ptr -8
.text:0040E9A0 var_4           = dword ptr -4
.text:0040E9A0 arg_0           = dword ptr  4
.text:0040E9A0 arg_4           = dword ptr  8
.text:0040E9A0
.text:0040E9A0                 sub     esp, 2Ch
.text:0040E9A3                 mov     [esp+2Ch+var_8], ebx
.text:0040E9A7                 mov     ebx, [esp+2Ch+arg_0]
.text:0040E9AB                 mov     [esp+2Ch+var_4], esi
.text:0040E9AF                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040E9B7                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000080h ; dwFlagsAndAttributes
.text:0040E9BF                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040E9C7                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040E9CF                 mov     [esp+2Ch+dwShareMode], 3 ; dwShareMode
.text:0040E9D7                 mov     [esp+2Ch+dwDesiredAccess], 100h ; dwDesiredAccess
.text:0040E9DF                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040E9E2                 call    CreateFileA
.text:0040E9E7                 sub     esp, 1Ch
.text:0040E9EA                 mov     esi, eax
.text:0040E9EC                 test    ebx, ebx
.text:0040E9EE                 jz      short loc_40EA1F
.text:0040E9F0                 mov     [esp+2Ch+dwDesiredAccess], ebx ; lpFileName
.text:0040E9F4                 mov     edx, [esp+2Ch+arg_4]
.text:0040E9F8                 mov     [esp+2Ch+lpFileName], eax ; HANDLE
.text:0040E9FB                 mov     [esp+2Ch+dwShareMode], edx ; int
.text:0040E9FF                 call    sub_40E8A0
.text:0040EA04                 mov     [esp+2Ch+lpFileName], esi ; hObject
.text:0040EA07                 mov     ebx, eax
.text:0040EA09                 call    CloseHandle
.text:0040EA0E                 sub     esp, 4
.text:0040EA11                 mov     eax, ebx
.text:0040EA13
.text:0040EA13 loc_40EA13:                             ; CODE XREF: sub_40E9A0+8F↓j
.text:0040EA13                 mov     ebx, [esp+2Ch+var_8]
.text:0040EA17                 mov     esi, [esp+2Ch+var_4]
.text:0040EA1B                 add     esp, 2Ch
.text:0040EA1E                 retn
.text:0040EA1F ; ---------------------------------------------------------------------------
.text:0040EA1F
.text:0040EA1F loc_40EA1F:                             ; CODE XREF: sub_40E9A0+4E↑j
.text:0040EA1F                 call    _errno
.text:0040EA24                 mov     dword ptr [eax], 16h
.text:0040EA2A                 mov     eax, 0FFFFFFFFh
.text:0040EA2F                 jmp     short loc_40EA13
.text:0040EA2F sub_40E9A0      endp
.text:0040EA2F
.text:0040EA2F ; ---------------------------------------------------------------------------
.text:0040EA31                 align 10h
.text:0040EA40
.text:0040EA40 ; =============== S U B R O U T I N E =======================================
.text:0040EA40
.text:0040EA40
.text:0040EA40 ; int __cdecl sub_40EA40(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040EA40 sub_40EA40      proc near               ; CODE XREF: sub_40EBC0+93↓p
.text:0040EA40
.text:0040EA40 pvReserved      = dword ptr -35Ch
.text:0040EA40 pUnkOuter       = dword ptr -358h
.text:0040EA40 dwClsContext    = dword ptr -354h
.text:0040EA40 riid            = dword ptr -350h
.text:0040EA40 ppv             = dword ptr -34Ch
.text:0040EA40 cchWideChar     = dword ptr -348h
.text:0040EA40 var_334         = byte ptr -334h
.text:0040EA40 var_330         = dword ptr -330h
.text:0040EA40 String2         = byte ptr -32Ch
.text:0040EA40 WideCharStr     = word ptr -21Ch
.text:0040EA40 lpMultiByteStr  = dword ptr  4
.text:0040EA40 lpString1       = dword ptr  8
.text:0040EA40
.text:0040EA40                 push    edi
.text:0040EA41                 push    esi
.text:0040EA42                 push    ebx
.text:0040EA43                 sub     esp, 350h
.text:0040EA49                 mov     edi, [esp+35Ch+lpString1]
.text:0040EA50                 mov     byte ptr [edi], 0
.text:0040EA53                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040EA5A                 call    OleInitialize
.text:0040EA5F                 sub     esp, 4
.text:0040EA62                 cmp     eax, 1
.text:0040EA65                 ja      loc_40EB9F
.text:0040EA6B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040EA73                 lea     ecx, [esp+35Ch+var_330]
.text:0040EA77                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040EA7B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040EA83                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040EA8B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040EA92                 call    CoCreateInstance
.text:0040EA97                 sub     esp, 14h
.text:0040EA9A                 test    eax, eax
.text:0040EA9C                 js      loc_40EB9F
.text:0040EAA2                 mov     ebx, [esp+35Ch+var_330]
.text:0040EAA6                 lea     edx, [esp+35Ch+var_334]
.text:0040EAAA                 mov     esi, [ebx]
.text:0040EAAC                 mov     [esp+35Ch+dwClsContext], edx
.text:0040EAB0                 mov     [esp+35Ch+pvReserved], ebx
.text:0040EAB3                 xor     ebx, ebx
.text:0040EAB5                 mov     [esp+35Ch+pUnkOuter], offset dword_4106D0
.text:0040EABD                 call    dword ptr [esi]
.text:0040EABF                 sub     esp, 0Ch
.text:0040EAC2                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040EAC9                 call    AreFileApisANSI
.text:0040EACE                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040EAD6                 test    eax, eax
.text:0040EAD8                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040EADF                 setz    bl
.text:0040EAE2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040EAE6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040EAEE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040EAF2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040EAFA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040EAFD                 call    MultiByteToWideChar
.text:0040EB02                 sub     esp, 18h
.text:0040EB05                 test    eax, eax
.text:0040EB07                 js      loc_40EB9F
.text:0040EB0D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040EB11                 mov     ebx, [edx]
.text:0040EB13                 mov     [esp+35Ch+dwClsContext], 0
.text:0040EB1B                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040EB1F                 mov     [esp+35Ch+pvReserved], edx
.text:0040EB22                 call    dword ptr [ebx+14h]
.text:0040EB25                 sub     esp, 0Ch
.text:0040EB28                 test    eax, eax
.text:0040EB2A                 js      short loc_40EB9F
.text:0040EB2C                 mov     ebx, [esp+35Ch+var_330]
.text:0040EB30                 lea     esi, [esp+35Ch+String2]
.text:0040EB34                 mov     ecx, [ebx]
.text:0040EB36                 mov     [esp+35Ch+pvReserved], ebx
.text:0040EB39                 mov     [esp+35Ch+ppv], 0
.text:0040EB41                 mov     [esp+35Ch+riid], 0
.text:0040EB49                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040EB51                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040EB55                 call    dword ptr [ecx+0Ch]
.text:0040EB58                 sub     esp, 14h
.text:0040EB5B                 mov     ebx, eax
.text:0040EB5D                 test    eax, eax
.text:0040EB5F                 js      short loc_40EB9F
.text:0040EB61                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040EB65                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040EB68                 call    lstrcpyA
.text:0040EB6D                 sub     esp, 8
.text:0040EB70                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040EB74                 mov     ecx, [edi]
.text:0040EB76                 mov     [esp+35Ch+pvReserved], edi
.text:0040EB79                 call    dword ptr [ecx+8]
.text:0040EB7C                 sub     esp, 4
.text:0040EB7F                 mov     edx, [esp+35Ch+var_330]
.text:0040EB83                 mov     esi, [edx]
.text:0040EB85                 mov     [esp+35Ch+pvReserved], edx
.text:0040EB88                 call    dword ptr [esi+8]
.text:0040EB8B                 sub     esp, 4
.text:0040EB8E                 call    CoUninitialize
.text:0040EB93                 mov     eax, ebx
.text:0040EB95
.text:0040EB95 loc_40EB95:                             ; CODE XREF: sub_40EA40+177↓j
.text:0040EB95                 add     esp, 350h
.text:0040EB9B                 pop     ebx
.text:0040EB9C                 pop     esi
.text:0040EB9D                 pop     edi
.text:0040EB9E                 retn
.text:0040EB9F ; ---------------------------------------------------------------------------
.text:0040EB9F
.text:0040EB9F loc_40EB9F:                             ; CODE XREF: sub_40EA40+25↑j
.text:0040EB9F                                         ; sub_40EA40+5C↑j ...
.text:0040EB9F                 call    sub_40CE00
.text:0040EBA4                 mov     edi, eax
.text:0040EBA6                 call    _errno
.text:0040EBAB                 mov     [eax], edi
.text:0040EBAD                 call    CoUninitialize
.text:0040EBB2                 mov     eax, 0FFFFFFFFh
.text:0040EBB7                 jmp     short loc_40EB95
.text:0040EBB7 sub_40EA40      endp
.text:0040EBB7
.text:0040EBB7 ; ---------------------------------------------------------------------------
.text:0040EBB9 ; const char aLnk_0[]
.text:0040EBB9 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40EBC0+53↓o
.text:0040EBB9                                         ; sub_40EBC0:loc_40EC25↓o
.text:0040EBBE                 align 10h
.text:0040EBC0
.text:0040EBC0 ; =============== S U B R O U T I N E =======================================
.text:0040EBC0
.text:0040EBC0
.text:0040EBC0 ; int __cdecl sub_40EBC0(char *, LPSTR lpString1)
.text:0040EBC0 sub_40EBC0      proc near               ; CODE XREF: sub_40C670+4C↑p
.text:0040EBC0                                         ; sub_40C710+96↑p
.text:0040EBC0
.text:0040EBC0 Str             = dword ptr -1Ch
.text:0040EBC0 Source          = dword ptr -18h
.text:0040EBC0 Destination     = dword ptr -14h
.text:0040EBC0 arg_0           = dword ptr  4
.text:0040EBC0 lpString1       = dword ptr  8
.text:0040EBC0
.text:0040EBC0                 push    ebp
.text:0040EBC1                 push    edi
.text:0040EBC2                 push    esi
.text:0040EBC3                 push    ebx
.text:0040EBC4                 sub     esp, 0Ch
.text:0040EBC7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040EBCB                 mov     ebp, [esp+1Ch+lpString1]
.text:0040EBCF                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040EBD2                 call    strlen
.text:0040EBD7                 add     eax, 5
.text:0040EBDA                 mov     [esp+1Ch+Str], eax ; Size
.text:0040EBDD                 call    malloc
.text:0040EBE2                 mov     [esp+1Ch+Destination], eax
.text:0040EBE6                 test    eax, eax
.text:0040EBE8                 jz      loc_40EC90
.text:0040EBEE                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040EBF2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040EBF5                 call    strcpy
.text:0040EBFA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040EC02                 mov     eax, [esp+1Ch+Destination]
.text:0040EC06                 mov     [esp+1Ch+Str], eax ; Str
.text:0040EC09                 call    strrchr
.text:0040EC0E                 test    eax, eax
.text:0040EC10                 jz      short loc_40EC25
.text:0040EC12                 cld
.text:0040EC13                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040EC18                 mov     ecx, 5
.text:0040EC1D                 mov     esi, eax
.text:0040EC1F                 mov     edi, ebx
.text:0040EC21                 repe cmpsb
.text:0040EC23                 jz      short loc_40EC39
.text:0040EC25
.text:0040EC25 loc_40EC25:                             ; CODE XREF: sub_40EBC0+50↑j
.text:0040EC25                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040EC2D                 mov     edx, [esp+1Ch+Destination]
.text:0040EC31                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040EC34                 call    strcat
.text:0040EC39
.text:0040EC39 loc_40EC39:                             ; CODE XREF: sub_40EBC0+63↑j
.text:0040EC39                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040EC40                 call    SetErrorMode
.text:0040EC45                 sub     esp, 4
.text:0040EC48                 mov     ebx, [esp+1Ch+Destination]
.text:0040EC4C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040EC50                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040EC53                 call    sub_40EA40
.text:0040EC58                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040EC5B                 mov     esi, eax
.text:0040EC5D                 call    free
.text:0040EC62                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040EC69                 call    SetErrorMode
.text:0040EC6E                 sub     esp, 4
.text:0040EC71                 mov     [esp+1Ch+Str], ebp
.text:0040EC74                 call    sub_40B4D0
.text:0040EC79                 inc     esi
.text:0040EC7A                 jz      short loc_40EC90
.text:0040EC7C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040EC80                 add     esp, 0Ch
.text:0040EC83                 pop     ebx
.text:0040EC84                 pop     esi
.text:0040EC85                 pop     edi
.text:0040EC86                 pop     ebp
.text:0040EC87                 jmp     strlen
.text:0040EC87 ; ---------------------------------------------------------------------------
.text:0040EC8C                 align 10h
.text:0040EC90
.text:0040EC90 loc_40EC90:                             ; CODE XREF: sub_40EBC0+28↑j
.text:0040EC90                                         ; sub_40EBC0+BA↑j
.text:0040EC90                 add     esp, 0Ch
.text:0040EC93                 mov     eax, 0FFFFFFFFh
.text:0040EC98                 pop     ebx
.text:0040EC99                 pop     esi
.text:0040EC9A                 pop     edi
.text:0040EC9B                 pop     ebp
.text:0040EC9C                 retn
.text:0040EC9C sub_40EBC0      endp
.text:0040EC9C
.text:0040EC9C ; ---------------------------------------------------------------------------
.text:0040EC9D                 align 10h
.text:0040ECA0
.text:0040ECA0 ; =============== S U B R O U T I N E =======================================
.text:0040ECA0
.text:0040ECA0
.text:0040ECA0 ; int __cdecl sub_40ECA0(LPCSTR, int, int)
.text:0040ECA0 sub_40ECA0      proc near               ; CODE XREF: sub_40C710+42↑p
.text:0040ECA0                                         ; sub_40C710+AE↑p ...
.text:0040ECA0
.text:0040ECA0 lpFileName      = dword ptr -2Ch
.text:0040ECA0 dwDesiredAccess = dword ptr -28h
.text:0040ECA0 dwShareMode     = dword ptr -24h
.text:0040ECA0 lpSecurityAttributes= dword ptr -20h
.text:0040ECA0 dwCreationDisposition= dword ptr -1Ch
.text:0040ECA0 dwFlagsAndAttributes= dword ptr -18h
.text:0040ECA0 hTemplateFile   = dword ptr -14h
.text:0040ECA0 var_10          = dword ptr -10h
.text:0040ECA0 var_C           = dword ptr -0Ch
.text:0040ECA0 var_8           = dword ptr -8
.text:0040ECA0 var_4           = dword ptr -4
.text:0040ECA0 arg_0           = dword ptr  4
.text:0040ECA0 arg_4           = dword ptr  8
.text:0040ECA0 arg_8           = dword ptr  0Ch
.text:0040ECA0
.text:0040ECA0 ; FUNCTION CHUNK AT .text:0040AFC0 SIZE 0000013A BYTES
.text:0040ECA0
.text:0040ECA0                 sub     esp, 0Ch
.text:0040ECA3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040ECA7                 mov     edx, [esp+0Ch+arg_4]
.text:0040ECAB                 mov     eax, [esp+0Ch+arg_8]
.text:0040ECAF                 test    ecx, ecx
.text:0040ECB1                 jnz     short loc_40ECD0
.text:0040ECB3                 test    edx, edx
.text:0040ECB5                 jz      short loc_40ECD0
.text:0040ECB7                 test    eax, eax
.text:0040ECB9                 jz      short loc_40ECD0
.text:0040ECBB                 mov     [esp+0Ch+arg_4], eax
.text:0040ECBF                 mov     [esp+0Ch+arg_0], edx
.text:0040ECC3                 add     esp, 0Ch
.text:0040ECC6                 jmp     loc_40AFC0
.text:0040ECC6 ; ---------------------------------------------------------------------------
.text:0040ECCB                 align 10h
.text:0040ECD0
.text:0040ECD0 loc_40ECD0:                             ; CODE XREF: sub_40ECA0+11↑j
.text:0040ECD0                                         ; sub_40ECA0+15↑j ...
.text:0040ECD0                 call    _errno
.text:0040ECD5                 mov     dword ptr [eax], 16h
.text:0040ECDB                 mov     eax, 0FFFFFFFFh
.text:0040ECE0                 add     esp, 0Ch
.text:0040ECE3                 retn
.text:0040ECE3 sub_40ECA0      endp
.text:0040ECE3
.text:0040ECE3 ; ---------------------------------------------------------------------------
.text:0040ECE4                 align 10h
.text:0040ECF0
.text:0040ECF0 ; =============== S U B R O U T I N E =======================================
.text:0040ECF0
.text:0040ECF0
.text:0040ECF0 sub_40ECF0      proc near               ; CODE XREF: sub_40C7D0+1A↑p
.text:0040ECF0                                         ; sub_40C830+11F↑p
.text:0040ECF0
.text:0040ECF0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040ECF0 var_D8          = dword ptr -0D8h
.text:0040ECF0 var_D4          = dword ptr -0D4h
.text:0040ECF0 var_D0          = dword ptr -0D0h
.text:0040ECF0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040ECF0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040ECF0 arg_0           = dword ptr  4
.text:0040ECF0 arg_4           = dword ptr  8
.text:0040ECF0
.text:0040ECF0                 push    edi
.text:0040ECF1                 push    esi
.text:0040ECF2                 push    ebx
.text:0040ECF3                 sub     esp, 0D0h
.text:0040ECF9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040ED00                 mov     edi, [esp+0DCh+arg_0]
.text:0040ED07                 test    ebx, ebx
.text:0040ED09                 jz      short loc_40ED34
.text:0040ED0B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040ED0F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040ED12                 call    GetTimeZoneInformation
.text:0040ED17                 sub     esp, 4
.text:0040ED1A                 cmp     eax, 0FFFFFFFFh
.text:0040ED1D                 jz      loc_40EDB5
.text:0040ED23                 xor     ecx, ecx
.text:0040ED25                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040ED29                 cmp     eax, 2
.text:0040ED2C                 setz    cl
.text:0040ED2F                 mov     [ebx], esi
.text:0040ED31                 mov     [ebx+4], ecx
.text:0040ED34
.text:0040ED34 loc_40ED34:                             ; CODE XREF: sub_40ECF0+19↑j
.text:0040ED34                                         ; sub_40ECF0+E0↓j
.text:0040ED34                 test    edi, edi
.text:0040ED36                 jz      short loc_40EDA9
.text:0040ED38                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040ED3C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040ED3F                 call    GetSystemTimeAsFileTime
.text:0040ED44                 sub     esp, 4
.text:0040ED47                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040ED4B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040ED53                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040ED57                 mov     [esp+0DCh+var_D0], 0
.text:0040ED5F                 add     ebx, 2AC18000h
.text:0040ED65                 adc     esi, 0FE624E21h
.text:0040ED6B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040ED6F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040ED72                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040ED76                 mov     [esp+0DCh+var_D8], esi
.text:0040ED7A                 call    sub_410F20
.text:0040ED7F                 mov     [edi], eax
.text:0040ED81                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040ED84                 mov     [esp+0DCh+var_D4], 989680h
.text:0040ED8C                 mov     [esp+0DCh+var_D0], 0
.text:0040ED94                 mov     [esp+0DCh+var_D8], esi
.text:0040ED98                 call    sub_411040
.text:0040ED9D                 lea     ebx, [eax+eax*4]
.text:0040EDA0                 lea     edx, [ebx+ebx*4]
.text:0040EDA3                 shl     edx, 2
.text:0040EDA6                 mov     [edi+4], edx
.text:0040EDA9
.text:0040EDA9 loc_40EDA9:                             ; CODE XREF: sub_40ECF0+46↑j
.text:0040EDA9                 add     esp, 0D0h
.text:0040EDAF                 xor     eax, eax
.text:0040EDB1                 pop     ebx
.text:0040EDB2                 pop     esi
.text:0040EDB3                 pop     edi
.text:0040EDB4                 retn
.text:0040EDB5 ; ---------------------------------------------------------------------------
.text:0040EDB5
.text:0040EDB5 loc_40EDB5:                             ; CODE XREF: sub_40ECF0+2D↑j
.text:0040EDB5                 mov     dword ptr [ebx], 0
.text:0040EDBB                 mov     dword ptr [ebx+4], 0
.text:0040EDC2                 call    sub_40CE00
.text:0040EDC7                 mov     esi, eax
.text:0040EDC9                 call    _errno
.text:0040EDCE                 mov     [eax], esi
.text:0040EDD0                 jmp     loc_40ED34
.text:0040EDD0 sub_40ECF0      endp
.text:0040EDD0
.text:0040EDD0 ; ---------------------------------------------------------------------------
.text:0040EDD5                 align 10h
.text:0040EDE0
.text:0040EDE0 ; =============== S U B R O U T I N E =======================================
.text:0040EDE0
.text:0040EDE0
.text:0040EDE0 sub_40EDE0      proc near               ; CODE XREF: sub_40C830:loc_40C916↑p
.text:0040EDE0
.text:0040EDE0 lpFrequency     = dword ptr -0Ch
.text:0040EDE0 var_4           = dword ptr -4
.text:0040EDE0
.text:0040EDE0                 sub     esp, 0Ch
.text:0040EDE3                 mov     edx, dword ptr ds:Frequency+4
.text:0040EDE9                 mov     [esp+0Ch+var_4], ebx
.text:0040EDED                 mov     eax, dword ptr ds:Frequency
.text:0040EDF2                 mov     ebx, edx
.text:0040EDF4                 or      ebx, eax
.text:0040EDF6                 jz      short loc_40EE00
.text:0040EDF8
.text:0040EDF8 loc_40EDF8:                             ; CODE XREF: sub_40EDE0+3E↓j
.text:0040EDF8                                         ; sub_40EDE0+52↓j
.text:0040EDF8                 mov     ebx, [esp+0Ch+var_4]
.text:0040EDFC                 add     esp, 0Ch
.text:0040EDFF                 retn
.text:0040EE00 ; ---------------------------------------------------------------------------
.text:0040EE00
.text:0040EE00 loc_40EE00:                             ; CODE XREF: sub_40EDE0+16↑j
.text:0040EE00                 mov     [esp+0Ch+lpFrequency], offset Frequency ; lpFrequency
.text:0040EE07                 call    QueryPerformanceFrequency
.text:0040EE0C                 sub     esp, 4
.text:0040EE0F                 test    eax, eax
.text:0040EE11                 jz      short loc_40EE20
.text:0040EE13                 mov     eax, dword ptr ds:Frequency
.text:0040EE18                 mov     edx, dword ptr ds:Frequency+4
.text:0040EE1E                 jmp     short loc_40EDF8
.text:0040EE20 ; ---------------------------------------------------------------------------
.text:0040EE20
.text:0040EE20 loc_40EE20:                             ; CODE XREF: sub_40EDE0+31↑j
.text:0040EE20                 call    sub_40CE00
.text:0040EE25                 mov     ebx, eax
.text:0040EE27                 call    _errno
.text:0040EE2C                 mov     [eax], ebx
.text:0040EE2E                 xor     edx, edx
.text:0040EE30                 xor     eax, eax
.text:0040EE32                 jmp     short loc_40EDF8
.text:0040EE32 sub_40EDE0      endp
.text:0040EE32
.text:0040EE32 ; ---------------------------------------------------------------------------
.text:0040EE34                 align 10h
.text:0040EE40
.text:0040EE40 ; =============== S U B R O U T I N E =======================================
.text:0040EE40
.text:0040EE40 ; Attributes: noreturn
.text:0040EE40
.text:0040EE40 sub_40EE40      proc near               ; CODE XREF: .text:0040E089↑p
.text:0040EE40                                         ; sub_40EE40↓j
.text:0040EE40                 jmp     short sub_40EE40
.text:0040EE40 sub_40EE40      endp
.text:0040EE40
.text:0040EE40 ; ---------------------------------------------------------------------------
.text:0040EE42                 align 10h
.text:0040EE50
.text:0040EE50 ; =============== S U B R O U T I N E =======================================
.text:0040EE50
.text:0040EE50
.text:0040EE50 sub_40EE50      proc near               ; CODE XREF: .text:0040DDE5↑p
.text:0040EE50
.text:0040EE50 FileHandle      = dword ptr -1Ch
.text:0040EE50 dwFileOffsetLow = dword ptr -18h
.text:0040EE50 dwFileOffsetHigh= dword ptr -14h
.text:0040EE50 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040EE50 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040EE50 var_8           = dword ptr -8
.text:0040EE50 var_4           = dword ptr -4
.text:0040EE50 arg_0           = dword ptr  4
.text:0040EE50
.text:0040EE50                 sub     esp, 1Ch
.text:0040EE53                 mov     edx, [esp+1Ch+arg_0]
.text:0040EE57                 mov     [esp+1Ch+var_4], esi
.text:0040EE5B                 mov     [esp+1Ch+var_8], ebx
.text:0040EE5F                 mov     ebx, [edx+10h]
.text:0040EE62                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040EE65                 call    _get_osfhandle
.text:0040EE6A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040EE6D                 mov     esi, eax
.text:0040EE6F                 call    _filelengthi64
.text:0040EE74                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040EE78                 cdq
.text:0040EE79                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040EE7C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040EE80                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040EE88                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040EE90                 call    UnlockFile
.text:0040EE95                 sub     esp, 14h
.text:0040EE98                 mov     ebx, [esp+1Ch+var_8]
.text:0040EE9C                 mov     esi, [esp+1Ch+var_4]
.text:0040EEA0                 add     esp, 1Ch
.text:0040EEA3                 retn
.text:0040EEA3 sub_40EE50      endp
.text:0040EEA3
.text:0040EEA3 ; ---------------------------------------------------------------------------
.text:0040EEA4                 align 10h
.text:0040EEB0
.text:0040EEB0 ; =============== S U B R O U T I N E =======================================
.text:0040EEB0
.text:0040EEB0
.text:0040EEB0 ; int __cdecl sub_40EEB0(int, char *Control)
.text:0040EEB0 sub_40EEB0      proc near               ; CODE XREF: .text:0040DCA6↑p
.text:0040EEB0                                         ; .text:0040DCF6↑p ...
.text:0040EEB0
.text:0040EEB0 Str             = dword ptr -1Ch
.text:0040EEB0 Val             = dword ptr -18h
.text:0040EEB0 var_8           = dword ptr -8
.text:0040EEB0 var_4           = dword ptr -4
.text:0040EEB0 arg_0           = dword ptr  4
.text:0040EEB0 Control         = dword ptr  8
.text:0040EEB0
.text:0040EEB0                 sub     esp, 1Ch
.text:0040EEB3                 xor     eax, eax
.text:0040EEB5                 mov     edx, [esp+1Ch+Control]
.text:0040EEB9                 mov     [esp+1Ch+var_4], esi
.text:0040EEBD                 mov     esi, [esp+1Ch+arg_0]
.text:0040EEC1                 mov     [esp+1Ch+var_8], ebx
.text:0040EEC5                 mov     ebx, [esi]
.text:0040EEC7                 test    ebx, ebx
.text:0040EEC9                 jz      short loc_40EEF8
.text:0040EECB                 movzx   eax, byte ptr [edx]
.text:0040EECE                 test    al, al
.text:0040EED0                 jz      short loc_40EEF0
.text:0040EED2                 cmp     byte ptr [edx+1], 0
.text:0040EED6                 jnz     short loc_40EF30
.text:0040EED8                 movzx   ecx, byte ptr [ebx]
.text:0040EEDB                 mov     edx, ebx
.text:0040EEDD                 cmp     cl, al
.text:0040EEDF                 jz      short loc_40EF22
.text:0040EEE1                 test    cl, cl
.text:0040EEE3                 jnz     short loc_40EF04
.text:0040EEE5                 lea     esi, [esi+0]
.text:0040EEE9                 lea     edi, [edi+0]
.text:0040EEF0
.text:0040EEF0 loc_40EEF0:                             ; CODE XREF: sub_40EEB0+20↑j
.text:0040EEF0                                         ; sub_40EEB0+74↓j
.text:0040EEF0                 mov     dword ptr [esi], 0
.text:0040EEF6
.text:0040EEF6 loc_40EEF6:                             ; CODE XREF: sub_40EEB0+7C↓j
.text:0040EEF6                 mov     eax, ebx
.text:0040EEF8
.text:0040EEF8 loc_40EEF8:                             ; CODE XREF: sub_40EEB0+19↑j
.text:0040EEF8                 mov     ebx, [esp+1Ch+var_8]
.text:0040EEFC                 mov     esi, [esp+1Ch+var_4]
.text:0040EF00                 add     esp, 1Ch
.text:0040EF03                 retn
.text:0040EF04 ; ---------------------------------------------------------------------------
.text:0040EF04
.text:0040EF04 loc_40EF04:                             ; CODE XREF: sub_40EEB0+33↑j
.text:0040EF04                 movsx   edx, al
.text:0040EF07                 mov     [esp+1Ch+Val], edx ; Val
.text:0040EF0B                 lea     edx, [ebx+1]
.text:0040EF0E                 mov     [esp+1Ch+Str], edx ; Str
.text:0040EF11                 call    strchr
.text:0040EF16                 lea     esi, [esi+0]
.text:0040EF19                 lea     edi, [edi+0]
.text:0040EF20
.text:0040EF20 loc_40EF20:                             ; CODE XREF: sub_40EEB0+8C↓j
.text:0040EF20                 mov     edx, eax
.text:0040EF22
.text:0040EF22 loc_40EF22:                             ; CODE XREF: sub_40EEB0+2F↑j
.text:0040EF22                 test    edx, edx
.text:0040EF24                 jz      short loc_40EEF0
.text:0040EF26                 mov     byte ptr [edx], 0
.text:0040EF29                 inc     edx
.text:0040EF2A                 mov     [esi], edx
.text:0040EF2C                 jmp     short loc_40EEF6
.text:0040EF2C ; ---------------------------------------------------------------------------
.text:0040EF2E                 align 10h
.text:0040EF30
.text:0040EF30 loc_40EF30:                             ; CODE XREF: sub_40EEB0+26↑j
.text:0040EF30                 mov     [esp+1Ch+Val], edx ; Control
.text:0040EF34                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040EF37                 call    strpbrk
.text:0040EF3C                 jmp     short loc_40EF20
.text:0040EF3C sub_40EEB0      endp
.text:0040EF3C
.text:0040EF3C ; ---------------------------------------------------------------------------
.text:0040EF3E                 align 10h
.text:0040EF40 ; const char aTmpf[]
.text:0040EF40 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40EF50+20↓o
.text:0040EF45 ; const char aWBd[]
.text:0040EF45 aWBd            db 'w+bD',0             ; DATA XREF: sub_40EF50+5E↓o
.text:0040EF4A                 align 10h
.text:0040EF50
.text:0040EF50 ; =============== S U B R O U T I N E =======================================
.text:0040EF50
.text:0040EF50
.text:0040EF50 sub_40EF50      proc near               ; CODE XREF: sub_40E71F+A4↑p
.text:0040EF50
.text:0040EF50 FileHandle      = dword ptr -13Ch
.text:0040EF50 Format          = dword ptr -138h
.text:0040EF50 var_134         = dword ptr -134h
.text:0040EF50 var_130         = dword ptr -130h
.text:0040EF50 var_12C         = dword ptr -12Ch
.text:0040EF50 FileName        = byte ptr -11Ch
.text:0040EF50 var_8           = dword ptr -8
.text:0040EF50 var_4           = dword ptr -4
.text:0040EF50
.text:0040EF50                 sub     esp, 13Ch
.text:0040EF56                 mov     [esp+13Ch+var_8], ebx
.text:0040EF5D                 lea     ebx, [esp+13Ch+FileName]
.text:0040EF61                 mov     [esp+13Ch+var_4], esi
.text:0040EF68                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040EF70                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040EF78                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040EF80                 mov     [esp+13Ch+Format], 104h ; int
.text:0040EF88                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040EF8B                 call    sub_40F020
.text:0040EF90                 xor     edx, edx
.text:0040EF92                 test    eax, eax
.text:0040EF94                 jnz     short loc_40EFC6
.text:0040EF96                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040EF99                 mov     [esp+13Ch+Format], 0 ; int
.text:0040EFA1                 call    sub_40F3A0
.text:0040EFA6                 xor     edx, edx
.text:0040EFA8                 mov     ebx, eax
.text:0040EFAA                 test    eax, eax
.text:0040EFAC                 js      short loc_40EFC6
.text:0040EFAE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040EFB6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040EFB9                 call    _fdopen
.text:0040EFBE                 test    eax, eax
.text:0040EFC0                 mov     esi, eax
.text:0040EFC2                 jz      short loc_40EFDD
.text:0040EFC4
.text:0040EFC4 loc_40EFC4:                             ; CODE XREF: sub_40EF50+95↓j
.text:0040EFC4                 mov     edx, esi
.text:0040EFC6
.text:0040EFC6 loc_40EFC6:                             ; CODE XREF: sub_40EF50+44↑j
.text:0040EFC6                                         ; sub_40EF50+5C↑j
.text:0040EFC6                 mov     ebx, [esp+13Ch+var_8]
.text:0040EFCD                 mov     eax, edx
.text:0040EFCF                 mov     esi, [esp+13Ch+var_4]
.text:0040EFD6                 add     esp, 13Ch
.text:0040EFDC                 retn
.text:0040EFDD ; ---------------------------------------------------------------------------
.text:0040EFDD
.text:0040EFDD loc_40EFDD:                             ; CODE XREF: sub_40EF50+72↑j
.text:0040EFDD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040EFE0                 call    _close_0
.text:0040EFE5                 jmp     short loc_40EFC4
.text:0040EFE5 sub_40EF50      endp
.text:0040EFE5
.text:0040EFE5 ; ---------------------------------------------------------------------------
.text:0040EFE7                 align 10h
.text:0040EFF0 aFile_0         db 'file',0             ; DATA XREF: sub_40F020:loc_40F04C↓o
.text:0040EFF5 ; const char aSSxxxxxx[]
.text:0040EFF5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40F020+9B↓o
.text:0040F005 ; const char aTemp[]
.text:0040F005 aTemp           db 'TEMP',0             ; DATA XREF: sub_40F020:loc_40F102↓o
.text:0040F005                                         ; sub_40F020:loc_40F142↓o ...
.text:0040F00A ; const char aTmp[]
.text:0040F00A aTmp            db '/tmp',0             ; DATA XREF: sub_40F020+12F↓o
.text:0040F00A                                         ; sub_40F020+141↓o ...
.text:0040F00F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40F020:loc_40F1C0↓o
.text:0040F016 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40F020:loc_40F250↓o
.text:0040F01A                 align 10h
.text:0040F020
.text:0040F020 ; =============== S U B R O U T I N E =======================================
.text:0040F020
.text:0040F020
.text:0040F020 ; int __cdecl sub_40F020(char *Buffer, int, char *, char *, int)
.text:0040F020 sub_40F020      proc near               ; CODE XREF: sub_40EF50+3B↑p
.text:0040F020
.text:0040F020 Str             = dword ptr -1BCh
.text:0040F020 Format          = dword ptr -1B8h
.text:0040F020 var_1B4         = dword ptr -1B4h
.text:0040F020 var_1B0         = dword ptr -1B0h
.text:0040F020 var_1AC         = dword ptr -1ACh
.text:0040F020 var_1A8         = dword ptr -1A8h
.text:0040F020 var_19C         = dword ptr -19Ch
.text:0040F020 var_13C         = dword ptr -13Ch
.text:0040F020 var_DC          = dword ptr -0DCh
.text:0040F020 var_7C          = dword ptr -7Ch
.text:0040F020 Buffer          = dword ptr  4
.text:0040F020 arg_4           = dword ptr  8
.text:0040F020 arg_8           = dword ptr  0Ch
.text:0040F020 arg_C           = dword ptr  10h
.text:0040F020 arg_10          = dword ptr  14h
.text:0040F020
.text:0040F020                 push    ebp
.text:0040F021                 push    edi
.text:0040F022                 push    esi
.text:0040F023                 push    ebx
.text:0040F024                 sub     esp, 1ACh
.text:0040F02A                 mov     eax, [esp+1BCh+arg_C]
.text:0040F031                 mov     esi, [esp+1BCh+arg_8]
.text:0040F038                 test    eax, eax
.text:0040F03A                 jz      short loc_40F04C
.text:0040F03C                 mov     edx, [esp+1BCh+arg_C]
.text:0040F043                 cmp     byte ptr [edx], 0
.text:0040F046                 jnz     loc_40F280
.text:0040F04C
.text:0040F04C loc_40F04C:                             ; CODE XREF: sub_40F020+1A↑j
.text:0040F04C                 mov     eax, offset aFile_0 ; "file"
.text:0040F051                 mov     ebp, 4
.text:0040F056                 mov     [esp+1BCh+arg_C], eax
.text:0040F05D
.text:0040F05D loc_40F05D:                             ; CODE XREF: sub_40F020+274↓j
.text:0040F05D                                         ; sub_40F020+27F↓j
.text:0040F05D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040F064                 test    ebx, ebx
.text:0040F066                 jnz     loc_40F1C0
.text:0040F06C
.text:0040F06C loc_40F06C:                             ; CODE XREF: sub_40F020+21C↓j
.text:0040F06C                                         ; sub_40F020+224↓j ...
.text:0040F06C                 test    esi, esi
.text:0040F06E                 jz      loc_40F102
.text:0040F074
.text:0040F074 loc_40F074:                             ; CODE XREF: sub_40F020+176↓j
.text:0040F074                                         ; sub_40F020+19A↓j
.text:0040F074                 mov     [esp+1BCh+Str], esi ; Str
.text:0040F077                 call    strlen
.text:0040F07C                 test    eax, eax
.text:0040F07E                 mov     edx, eax
.text:0040F080                 jz      short loc_40F090
.text:0040F082                 movzx   eax, byte ptr [eax+esi-1]
.text:0040F087                 cmp     al, 2Fh ; '/'
.text:0040F089                 jz      short loc_40F0F0
.text:0040F08B                 cmp     al, 5Ch ; '\'
.text:0040F08D                 jz      short loc_40F0F0
.text:0040F08F                 nop
.text:0040F090
.text:0040F090 loc_40F090:                             ; CODE XREF: sub_40F020+60↑j
.text:0040F090                                         ; sub_40F020+D1↓j ...
.text:0040F090                 lea     edi, [ebp+edx+8]
.text:0040F094                 cmp     [esp+1BCh+arg_4], edi
.text:0040F09B                 jb      short loc_40F0D8
.text:0040F09D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040F0A1                 mov     ecx, [esp+1BCh+arg_C]
.text:0040F0A8                 mov     ebp, [esp+1BCh+Buffer]
.text:0040F0AF                 mov     [esp+1BCh+var_1B0], esi
.text:0040F0B3                 mov     [esp+1BCh+var_1A8], ecx
.text:0040F0B7                 mov     [esp+1BCh+var_1B4], edx
.text:0040F0BB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040F0C3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040F0C6                 call    sprintf
.text:0040F0CB                 xor     eax, eax
.text:0040F0CD
.text:0040F0CD loc_40F0CD:                             ; CODE XREF: sub_40F020+C8↓j
.text:0040F0CD                 add     esp, 1ACh
.text:0040F0D3                 pop     ebx
.text:0040F0D4                 pop     esi
.text:0040F0D5                 pop     edi
.text:0040F0D6                 pop     ebp
.text:0040F0D7                 retn
.text:0040F0D8 ; ---------------------------------------------------------------------------
.text:0040F0D8
.text:0040F0D8 loc_40F0D8:                             ; CODE XREF: sub_40F020+7B↑j
.text:0040F0D8                 call    _errno
.text:0040F0DD                 mov     dword ptr [eax], 16h
.text:0040F0E3
.text:0040F0E3 loc_40F0E3:                             ; CODE XREF: sub_40F020+187↓j
.text:0040F0E3                 mov     eax, 0FFFFFFFFh
.text:0040F0E8                 jmp     short loc_40F0CD
.text:0040F0E8 ; ---------------------------------------------------------------------------
.text:0040F0EA                 align 10h
.text:0040F0F0
.text:0040F0F0 loc_40F0F0:                             ; CODE XREF: sub_40F020+69↑j
.text:0040F0F0                                         ; sub_40F020+6D↑j ...
.text:0040F0F0                 dec     edx
.text:0040F0F1                 jz      short loc_40F090
.text:0040F0F3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040F0F8                 cmp     al, 2Fh ; '/'
.text:0040F0FA                 jz      short loc_40F0F0
.text:0040F0FC                 cmp     al, 5Ch ; '\'
.text:0040F0FE                 jz      short loc_40F0F0
.text:0040F100                 jmp     short loc_40F090
.text:0040F102 ; ---------------------------------------------------------------------------
.text:0040F102
.text:0040F102 loc_40F102:                             ; CODE XREF: sub_40F020+4E↑j
.text:0040F102                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040F109                 lea     esi, [esp+1BCh+var_13C]
.text:0040F110                 call    getenv
.text:0040F115                 mov     [esp+1BCh+Format], eax ; char *
.text:0040F119                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040F11D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040F124                 call    sub_40C710
.text:0040F129                 test    eax, eax
.text:0040F12B                 jnz     short loc_40F142
.text:0040F12D                 mov     edi, [esp+1BCh+var_13C]
.text:0040F134                 and     edi, 0F000h
.text:0040F13A                 cmp     edi, 4000h
.text:0040F140                 jz      short loc_40F1AC
.text:0040F142
.text:0040F142 loc_40F142:                             ; CODE XREF: sub_40F020+10B↑j
.text:0040F142                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040F149                 call    getenv
.text:0040F14E                 cld
.text:0040F14F                 mov     edx, offset aTmp ; "/tmp"
.text:0040F154                 mov     esi, eax
.text:0040F156                 mov     ecx, 5
.text:0040F15B                 mov     edi, edx
.text:0040F15D                 repe cmpsb
.text:0040F15F                 jz      short loc_40F19C
.text:0040F161                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040F169                 lea     ecx, [esp+1BCh+var_19C]
.text:0040F16D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040F171                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040F178                 call    sub_40C710
.text:0040F17D                 test    eax, eax
.text:0040F17F                 jnz     short loc_40F19C
.text:0040F181                 mov     ebx, [esp+1BCh+var_19C]
.text:0040F185                 mov     esi, offset aTmp ; "/tmp"
.text:0040F18A                 and     ebx, 0F000h
.text:0040F190                 cmp     ebx, 4000h
.text:0040F196                 jz      loc_40F074
.text:0040F19C
.text:0040F19C loc_40F19C:                             ; CODE XREF: sub_40F020+13F↑j
.text:0040F19C                                         ; sub_40F020+15F↑j
.text:0040F19C                 call    _errno
.text:0040F1A1                 mov     dword ptr [eax], 2
.text:0040F1A7                 jmp     loc_40F0E3
.text:0040F1AC ; ---------------------------------------------------------------------------
.text:0040F1AC
.text:0040F1AC loc_40F1AC:                             ; CODE XREF: sub_40F020+120↑j
.text:0040F1AC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040F1B3                 call    getenv
.text:0040F1B8                 mov     esi, eax
.text:0040F1BA                 jmp     loc_40F074
.text:0040F1BA ; ---------------------------------------------------------------------------
.text:0040F1BF                 align 10h
.text:0040F1C0
.text:0040F1C0 loc_40F1C0:                             ; CODE XREF: sub_40F020+46↑j
.text:0040F1C0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040F1C7                 call    sub_40F850
.text:0040F1CC                 test    eax, eax
.text:0040F1CE                 mov     ebx, eax
.text:0040F1D0                 jz      short loc_40F250
.text:0040F1D2
.text:0040F1D2 loc_40F1D2:                             ; CODE XREF: sub_40F020+240↓j
.text:0040F1D2                                         ; sub_40F020+256↓j
.text:0040F1D2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040F1D6                 lea     edi, [esp+1BCh+var_7C]
.text:0040F1DD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040F1E1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040F1E8                 call    sub_40C710
.text:0040F1ED                 test    eax, eax
.text:0040F1EF                 jnz     short loc_40F206
.text:0040F1F1                 mov     edx, [esp+1BCh+var_7C]
.text:0040F1F8                 and     edx, 0F000h
.text:0040F1FE                 cmp     edx, 4000h
.text:0040F204                 jz      short loc_40F249
.text:0040F206
.text:0040F206 loc_40F206:                             ; CODE XREF: sub_40F020+1CF↑j
.text:0040F206                                         ; sub_40F020+25C↓j
.text:0040F206                 test    esi, esi
.text:0040F208                 jz      short loc_40F242
.text:0040F20A                 mov     [esp+1BCh+Format], esi ; char *
.text:0040F20E                 lea     ecx, [esp+1BCh+var_DC]
.text:0040F215                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040F219                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040F220                 call    sub_40C710
.text:0040F225                 test    eax, eax
.text:0040F227                 jnz     short loc_40F242
.text:0040F229                 mov     ebx, [esp+1BCh+var_DC]
.text:0040F230                 and     ebx, 0F000h
.text:0040F236                 cmp     ebx, 4000h
.text:0040F23C                 jz      loc_40F06C
.text:0040F242
.text:0040F242 loc_40F242:                             ; CODE XREF: sub_40F020+1E8↑j
.text:0040F242                                         ; sub_40F020+207↑j
.text:0040F242                 xor     esi, esi
.text:0040F244                 jmp     loc_40F06C
.text:0040F249 ; ---------------------------------------------------------------------------
.text:0040F249
.text:0040F249 loc_40F249:                             ; CODE XREF: sub_40F020+1E4↑j
.text:0040F249                 mov     esi, ebx
.text:0040F24B                 jmp     loc_40F06C
.text:0040F250 ; ---------------------------------------------------------------------------
.text:0040F250
.text:0040F250 loc_40F250:                             ; CODE XREF: sub_40F020+1B0↑j
.text:0040F250                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040F257                 call    sub_40F850
.text:0040F25C                 test    eax, eax
.text:0040F25E                 mov     ebx, eax
.text:0040F260                 jnz     loc_40F1D2
.text:0040F266                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040F26D                 call    sub_40F850
.text:0040F272                 test    eax, eax
.text:0040F274                 mov     ebx, eax
.text:0040F276                 jnz     loc_40F1D2
.text:0040F27C                 jmp     short loc_40F206
.text:0040F27C ; ---------------------------------------------------------------------------
.text:0040F27E                 align 10h
.text:0040F280
.text:0040F280 loc_40F280:                             ; CODE XREF: sub_40F020+26↑j
.text:0040F280                 mov     ecx, [esp+1BCh+arg_C]
.text:0040F287                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040F28A                 call    strlen
.text:0040F28F                 cmp     eax, 5
.text:0040F292                 mov     ebp, eax
.text:0040F294                 jbe     loc_40F05D
.text:0040F29A                 mov     ebp, 5
.text:0040F29F                 jmp     loc_40F05D
.text:0040F29F sub_40F020      endp
.text:0040F29F
.text:0040F29F ; ---------------------------------------------------------------------------
.text:0040F2A4                 align 10h
.text:0040F2B0 byte_40F2B0     db 61h                  ; DATA XREF: sub_40F3A0+DC↓r
.text:0040F2B0                                         ; sub_40F3A0+122↓r ...
.text:0040F2B1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040F2EF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40F3A0+39↓o
.text:0040F2F6                 db 1Ah dup(90h)
.text:0040F310 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040F310                                         ; DATA XREF: sub_40F3A0:loc_40F618↓o
.text:0040F32F                 align 10h
.text:0040F330 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040F330                                         ; DATA XREF: sub_40F3A0+405↓o
.text:0040F35B                 db 15h dup(90h)
.text:0040F370 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040F370                                         ; DATA XREF: sub_40F3A0+40D↓o
.text:0040F393                 align 10h
.text:0040F3A0
.text:0040F3A0 ; =============== S U B R O U T I N E =======================================
.text:0040F3A0
.text:0040F3A0
.text:0040F3A0 ; int __cdecl sub_40F3A0(char *FileName, int)
.text:0040F3A0 sub_40F3A0      proc near               ; CODE XREF: sub_40EF50+51↑p
.text:0040F3A0
.text:0040F3A0 Str             = dword ptr -9Ch
.text:0040F3A0 OpenFlag        = dword ptr -98h
.text:0040F3A0 var_94          = dword ptr -94h
.text:0040F3A0 var_90          = dword ptr -90h
.text:0040F3A0 var_8C          = dword ptr -8Ch
.text:0040F3A0 var_88          = dword ptr -88h
.text:0040F3A0 var_84          = dword ptr -84h
.text:0040F3A0 var_80          = dword ptr -80h
.text:0040F3A0 var_7C          = dword ptr -7Ch
.text:0040F3A0 FileName        = dword ptr  4
.text:0040F3A0 arg_4           = dword ptr  8
.text:0040F3A0
.text:0040F3A0                 push    ebp
.text:0040F3A1                 push    edi
.text:0040F3A2                 push    esi
.text:0040F3A3                 push    ebx
.text:0040F3A4                 sub     esp, 8Ch
.text:0040F3AA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040F3B2                 call    _errno
.text:0040F3B7                 mov     edx, [eax]
.text:0040F3B9                 mov     [esp+9Ch+var_8C], edx
.text:0040F3BD                 mov     edx, [esp+9Ch+FileName]
.text:0040F3C4                 mov     [esp+9Ch+Str], edx ; Str
.text:0040F3C7                 call    strlen
.text:0040F3CC                 cmp     eax, 5
.text:0040F3CF                 jle     short loc_40F3ED
.text:0040F3D1                 cld
.text:0040F3D2                 mov     ecx, [esp+9Ch+FileName]
.text:0040F3D9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040F3DE                 lea     esi, [eax+ecx-6]
.text:0040F3E2                 mov     ecx, 7
.text:0040F3E7                 mov     ebp, esi
.text:0040F3E9                 repe cmpsb
.text:0040F3EB                 jz      short loc_40F408
.text:0040F3ED
.text:0040F3ED loc_40F3ED:                             ; CODE XREF: sub_40F3A0+2F↑j
.text:0040F3ED                 call    _errno
.text:0040F3F2                 mov     dword ptr [eax], 16h
.text:0040F3F8
.text:0040F3F8 loc_40F3F8:                             ; CODE XREF: sub_40F3A0+295↓j
.text:0040F3F8                                         ; sub_40F3A0+2D8↓j ...
.text:0040F3F8                 mov     eax, 0FFFFFFFFh
.text:0040F3FD
.text:0040F3FD loc_40F3FD:                             ; CODE XREF: sub_40F3A0+2EF↓j
.text:0040F3FD                                         ; sub_40F3A0+332↓j
.text:0040F3FD                 add     esp, 8Ch
.text:0040F403                 pop     ebx
.text:0040F404                 pop     esi
.text:0040F405                 pop     edi
.text:0040F406                 pop     ebp
.text:0040F407                 retn
.text:0040F408 ; ---------------------------------------------------------------------------
.text:0040F408
.text:0040F408 loc_40F408:                             ; CODE XREF: sub_40F3A0+4B↑j
.text:0040F408                 mov     ecx, ds:dword_413514
.text:0040F40E                 mov     edi, ds:dword_413510
.text:0040F414                 mov     eax, ecx
.text:0040F416                 or      eax, edi
.text:0040F418                 jz      loc_40F753
.text:0040F41E
.text:0040F41E loc_40F41E:                             ; CODE XREF: sub_40F3A0+3F8↓j
.text:0040F41E                 rdtsc
.text:0040F420                 mov     edi, edx
.text:0040F422                 mov     esi, eax
.text:0040F424                 call    _getpid
.text:0040F429                 mov     ebx, eax
.text:0040F42B                 mov     edx, esi
.text:0040F42D                 sar     ebx, 1Fh
.text:0040F430                 xor     edx, eax
.text:0040F432                 mov     ecx, edi
.text:0040F434                 xor     ecx, ebx
.text:0040F436                 mov     ebx, edx
.text:0040F438                 mov     esi, ecx
.text:0040F43A                 add     ebx, ds:dword_413510
.text:0040F440                 adc     esi, ds:dword_413514
.text:0040F446                 xor     edi, edi
.text:0040F448                 mov     ds:dword_413510, ebx
.text:0040F44E                 mov     ds:dword_413514, esi
.text:0040F454                 lea     esi, [esi+0]
.text:0040F45A                 lea     edi, [edi+0]
.text:0040F460
.text:0040F460 loc_40F460:                             ; CODE XREF: sub_40F3A0+2C7↓j
.text:0040F460                 mov     [esp+9Ch+Str], ebx
.text:0040F463                 mov     [esp+9Ch+OpenFlag], esi
.text:0040F467                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F46F                 mov     [esp+9Ch+var_90], 0
.text:0040F477                 call    sub_411040
.text:0040F47C                 movzx   ecx, ds:byte_40F2B0[eax]
.text:0040F483                 mov     [ebp+0], cl
.text:0040F486                 mov     [esp+9Ch+Str], ebx
.text:0040F489                 mov     [esp+9Ch+OpenFlag], esi
.text:0040F48D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F495                 mov     [esp+9Ch+var_90], 0
.text:0040F49D                 call    sub_410F20
.text:0040F4A2                 mov     [esp+9Ch+Str], eax
.text:0040F4A5                 mov     ebx, eax
.text:0040F4A7                 mov     esi, edx
.text:0040F4A9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F4B1                 mov     [esp+9Ch+var_90], 0
.text:0040F4B9                 mov     [esp+9Ch+OpenFlag], edx
.text:0040F4BD                 call    sub_411040
.text:0040F4C2                 movzx   edx, ds:byte_40F2B0[eax]
.text:0040F4C9                 mov     [ebp+1], dl
.text:0040F4CC                 mov     [esp+9Ch+Str], ebx
.text:0040F4CF                 mov     [esp+9Ch+OpenFlag], esi
.text:0040F4D3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F4DB                 mov     [esp+9Ch+var_90], 0
.text:0040F4E3                 call    sub_410F20
.text:0040F4E8                 mov     [esp+9Ch+Str], eax
.text:0040F4EB                 mov     ebx, eax
.text:0040F4ED                 mov     esi, edx
.text:0040F4EF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F4F7                 mov     [esp+9Ch+var_90], 0
.text:0040F4FF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040F503                 call    sub_411040
.text:0040F508                 movzx   ecx, ds:byte_40F2B0[eax]
.text:0040F50F                 mov     [ebp+2], cl
.text:0040F512                 mov     [esp+9Ch+Str], ebx
.text:0040F515                 mov     [esp+9Ch+OpenFlag], esi
.text:0040F519                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F521                 mov     [esp+9Ch+var_90], 0
.text:0040F529                 call    sub_410F20
.text:0040F52E                 mov     [esp+9Ch+Str], eax
.text:0040F531                 mov     ebx, eax
.text:0040F533                 mov     esi, edx
.text:0040F535                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F53D                 mov     [esp+9Ch+var_90], 0
.text:0040F545                 mov     [esp+9Ch+OpenFlag], edx
.text:0040F549                 call    sub_411040
.text:0040F54E                 movzx   edx, ds:byte_40F2B0[eax]
.text:0040F555                 mov     [ebp+3], dl
.text:0040F558                 mov     [esp+9Ch+Str], ebx
.text:0040F55B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040F55F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F567                 mov     [esp+9Ch+var_90], 0
.text:0040F56F                 call    sub_410F20
.text:0040F574                 mov     [esp+9Ch+Str], eax
.text:0040F577                 mov     ebx, eax
.text:0040F579                 mov     esi, edx
.text:0040F57B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F583                 mov     [esp+9Ch+var_90], 0
.text:0040F58B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040F58F                 call    sub_411040
.text:0040F594                 movzx   ecx, ds:byte_40F2B0[eax]
.text:0040F59B                 mov     [ebp+4], cl
.text:0040F59E                 mov     [esp+9Ch+Str], ebx
.text:0040F5A1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F5A9                 mov     [esp+9Ch+var_90], 0
.text:0040F5B1                 mov     [esp+9Ch+OpenFlag], esi
.text:0040F5B5                 call    sub_410F20
.text:0040F5BA                 mov     [esp+9Ch+Str], eax
.text:0040F5BD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040F5C5                 mov     [esp+9Ch+var_90], 0
.text:0040F5CD                 mov     [esp+9Ch+OpenFlag], edx
.text:0040F5D1                 call    sub_411040
.text:0040F5D6                 movzx   ebx, ds:byte_40F2B0[eax]
.text:0040F5DD                 mov     [ebp+5], bl
.text:0040F5E0                 cmp     [esp+9Ch+arg_4], 1
.text:0040F5E8                 jz      loc_40F737
.text:0040F5EE                 cmp     [esp+9Ch+arg_4], 1
.text:0040F5F6                 jle     loc_40F700
.text:0040F5FC                 cmp     [esp+9Ch+arg_4], 2
.text:0040F604                 jz      loc_40F6D7
.text:0040F60A                 cmp     [esp+9Ch+arg_4], 3
.text:0040F612                 jz      loc_40F694
.text:0040F618
.text:0040F618 loc_40F618:                             ; CODE XREF: sub_40F3A0+369↓j
.text:0040F618                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040F61D                 test    ebx, ebx
.text:0040F61F                 jnz     loc_40F79D
.text:0040F625
.text:0040F625 loc_40F625:                             ; CODE XREF: sub_40F3A0+354↓j
.text:0040F625                 mov     eax, [esp+9Ch+var_88]
.text:0040F629                 test    eax, eax
.text:0040F62B                 jns     short loc_40F680
.text:0040F62D                 call    _errno
.text:0040F632                 cmp     dword ptr [eax], 11h
.text:0040F635                 jnz     loc_40F3F8
.text:0040F63B
.text:0040F63B loc_40F63B:                             ; CODE XREF: sub_40F3A0+315↓j
.text:0040F63B                 mov     edx, ds:dword_413510
.text:0040F641                 mov     ecx, ds:dword_413514
.text:0040F647                 add     edx, 1E61h
.text:0040F64D                 adc     ecx, 0
.text:0040F650                 mov     ebx, edx
.text:0040F652                 inc     edi
.text:0040F653                 mov     ds:dword_413510, edx
.text:0040F659                 cmp     edi, 3A2F8h
.text:0040F65F                 mov     esi, ecx
.text:0040F661                 mov     ds:dword_413514, ecx
.text:0040F667                 jb      loc_40F460
.text:0040F66D                 call    _errno
.text:0040F672                 mov     dword ptr [eax], 11h
.text:0040F678                 jmp     loc_40F3F8
.text:0040F678 ; ---------------------------------------------------------------------------
.text:0040F67D                 align 10h
.text:0040F680
.text:0040F680 loc_40F680:                             ; CODE XREF: sub_40F3A0+28B↑j
.text:0040F680                 call    _errno
.text:0040F685                 mov     esi, [esp+9Ch+var_8C]
.text:0040F689                 mov     [eax], esi
.text:0040F68B                 mov     eax, [esp+9Ch+var_88]
.text:0040F68F                 jmp     loc_40F3FD
.text:0040F694 ; ---------------------------------------------------------------------------
.text:0040F694
.text:0040F694 loc_40F694:                             ; CODE XREF: sub_40F3A0+272↑j
.text:0040F694                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040F69B                 mov     ecx, [esp+9Ch+FileName]
.text:0040F6A2                 lea     esi, [esp+9Ch+var_7C]
.text:0040F6A6                 mov     [esp+9Ch+var_94], esi ; int
.text:0040F6AA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040F6AE                 call    sub_40ECA0
.text:0040F6B3                 test    eax, eax
.text:0040F6B5                 jns     short loc_40F63B
.text:0040F6B7                 call    _errno
.text:0040F6BC                 cmp     dword ptr [eax], 2
.text:0040F6BF                 jnz     loc_40F3F8
.text:0040F6C5                 call    _errno
.text:0040F6CA                 mov     ebx, [esp+9Ch+var_8C]
.text:0040F6CE                 mov     [eax], ebx
.text:0040F6D0                 xor     eax, eax
.text:0040F6D2                 jmp     loc_40F3FD
.text:0040F6D7 ; ---------------------------------------------------------------------------
.text:0040F6D7
.text:0040F6D7 loc_40F6D7:                             ; CODE XREF: sub_40F3A0+264↑j
.text:0040F6D7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040F6DF                 mov     edx, [esp+9Ch+FileName]
.text:0040F6E6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040F6E9                 call    sub_40F7D0
.text:0040F6EE                 mov     esi, esi
.text:0040F6F0
.text:0040F6F0 loc_40F6F0:                             ; CODE XREF: sub_40F3A0+395↓j
.text:0040F6F0                 mov     [esp+9Ch+var_88], eax
.text:0040F6F4                 jmp     loc_40F625
.text:0040F6F4 ; ---------------------------------------------------------------------------
.text:0040F6F9                 align 10h
.text:0040F700
.text:0040F700 loc_40F700:                             ; CODE XREF: sub_40F3A0+256↑j
.text:0040F700                 mov     eax, [esp+9Ch+arg_4]
.text:0040F707                 test    eax, eax
.text:0040F709                 jnz     loc_40F618
.text:0040F70F                 mov     [esp+9Ch+var_94], 180h
.text:0040F717                 mov     esi, [esp+9Ch+FileName]
.text:0040F71E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040F726                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040F729                 lea     esi, [esi+0]
.text:0040F730
.text:0040F730 loc_40F730:                             ; CODE XREF: sub_40F3A0+3B1↓j
.text:0040F730                 call    _open_0
.text:0040F735                 jmp     short loc_40F6F0
.text:0040F737 ; ---------------------------------------------------------------------------
.text:0040F737
.text:0040F737 loc_40F737:                             ; CODE XREF: sub_40F3A0+248↑j
.text:0040F737                 mov     [esp+9Ch+var_94], 180h
.text:0040F73F                 mov     ebx, [esp+9Ch+FileName]
.text:0040F746                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040F74E                 mov     [esp+9Ch+Str], ebx
.text:0040F751                 jmp     short loc_40F730
.text:0040F753 ; ---------------------------------------------------------------------------
.text:0040F753
.text:0040F753 loc_40F753:                             ; CODE XREF: sub_40F3A0+78↑j
.text:0040F753                 mov     [esp+9Ch+OpenFlag], 0
.text:0040F75B                 lea     ebx, [esp+9Ch+var_84]
.text:0040F75F                 mov     [esp+9Ch+Str], ebx
.text:0040F762                 call    sub_40C7D0
.text:0040F767                 mov     edi, [esp+9Ch+var_80]
.text:0040F76B                 mov     edx, [esp+9Ch+var_84]
.text:0040F76F                 mov     ecx, edi
.text:0040F771                 mov     ebx, edi
.text:0040F773                 shl     ecx, 10h
.text:0040F776                 sar     ebx, 1Fh
.text:0040F779                 shld    ebx, edi, 10h
.text:0040F77D                 mov     esi, edx
.text:0040F77F                 mov     edi, edx
.text:0040F781                 mov     edx, ecx
.text:0040F783                 sar     edi, 1Fh
.text:0040F786                 xor     edx, esi
.text:0040F788                 mov     ds:dword_413510, edx
.text:0040F78E                 mov     esi, ebx
.text:0040F790                 xor     esi, edi
.text:0040F792                 mov     ds:dword_413514, esi
.text:0040F798                 jmp     loc_40F41E
.text:0040F79D ; ---------------------------------------------------------------------------
.text:0040F79D
.text:0040F79D loc_40F79D:                             ; CODE XREF: sub_40F3A0+27F↑j
.text:0040F79D                 mov     [esp+9Ch+var_94], 151h
.text:0040F7A5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040F7AD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040F7B4                 call    _assert
.text:0040F7B4 sub_40F3A0      endp
.text:0040F7B4
.text:0040F7B4 ; ---------------------------------------------------------------------------
.text:0040F7B9                 db 17h dup(90h)
.text:0040F7D0
.text:0040F7D0 ; =============== S U B R O U T I N E =======================================
.text:0040F7D0
.text:0040F7D0
.text:0040F7D0 ; int __cdecl sub_40F7D0(LPCSTR, int AccessMode)
.text:0040F7D0 sub_40F7D0      proc near               ; CODE XREF: sub_40F3A0+349↑p
.text:0040F7D0
.text:0040F7D0 lpPathName      = dword ptr -1Ch
.text:0040F7D0 lpSecurityAttributes= dword ptr -18h
.text:0040F7D0 var_8           = dword ptr -8
.text:0040F7D0 var_4           = dword ptr -4
.text:0040F7D0 arg_0           = dword ptr  4
.text:0040F7D0 AccessMode      = dword ptr  8
.text:0040F7D0
.text:0040F7D0                 sub     esp, 1Ch
.text:0040F7D3                 mov     [esp+1Ch+var_8], ebx
.text:0040F7D7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F7DB                 mov     [esp+1Ch+var_4], esi
.text:0040F7DF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040F7E3                 test    ebx, ebx
.text:0040F7E5                 jz      short loc_40F835
.text:0040F7E7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040F7EF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040F7F2                 call    CreateDirectoryA
.text:0040F7F7                 sub     esp, 8
.text:0040F7FA                 test    eax, eax
.text:0040F7FC                 jz      short loc_40F816
.text:0040F7FE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040F802                 mov     esi, [esp+1Ch+var_4]
.text:0040F806                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040F80A                 mov     ebx, [esp+1Ch+var_8]
.text:0040F80E                 add     esp, 1Ch
.text:0040F811                 jmp     _chmod
.text:0040F816 ; ---------------------------------------------------------------------------
.text:0040F816
.text:0040F816 loc_40F816:                             ; CODE XREF: sub_40F7D0+2C↑j
.text:0040F816                 call    sub_40CE00
.text:0040F81B                 mov     esi, eax
.text:0040F81D                 call    _errno
.text:0040F822                 mov     [eax], esi
.text:0040F824
.text:0040F824 loc_40F824:                             ; CODE XREF: sub_40F7D0+70↓j
.text:0040F824                 mov     ebx, [esp+1Ch+var_8]
.text:0040F828                 mov     eax, 0FFFFFFFFh
.text:0040F82D                 mov     esi, [esp+1Ch+var_4]
.text:0040F831                 add     esp, 1Ch
.text:0040F834                 retn
.text:0040F835 ; ---------------------------------------------------------------------------
.text:0040F835
.text:0040F835 loc_40F835:                             ; CODE XREF: sub_40F7D0+15↑j
.text:0040F835                 call    _errno
.text:0040F83A                 mov     dword ptr [eax], 16h
.text:0040F840                 jmp     short loc_40F824
.text:0040F840 sub_40F7D0      endp
.text:0040F840
.text:0040F840 ; ---------------------------------------------------------------------------
.text:0040F842                 align 10h
.text:0040F850
.text:0040F850 ; =============== S U B R O U T I N E =======================================
.text:0040F850
.text:0040F850
.text:0040F850 sub_40F850      proc near               ; CODE XREF: sub_40F020+1A7↑p
.text:0040F850                                         ; sub_40F020+237↑p ...
.text:0040F850                 mov     edx, ds:dword_413520
.text:0040F856                 test    edx, edx
.text:0040F858                 jnz     short loc_40F860
.text:0040F85A                 jmp     getenv
.text:0040F85A ; ---------------------------------------------------------------------------
.text:0040F85F                 align 10h
.text:0040F860
.text:0040F860 loc_40F860:                             ; CODE XREF: sub_40F850+8↑j
.text:0040F860                 xor     eax, eax
.text:0040F862                 retn
.text:0040F862 sub_40F850      endp
.text:0040F862
.text:0040F862 ; ---------------------------------------------------------------------------
.text:0040F863                 align 10h
.text:0040F870                 sub     esp, 0Ch
.text:0040F873                 mov     [esp+4], ebx
.text:0040F877                 mov     [esp+8], esi
.text:0040F87B                 xor     esi, esi
.text:0040F87D                 call    sub_40F8F0
.text:0040F882                 mov     ebx, eax
.text:0040F884                 call    sub_40F8E0
.text:0040F889                 cmp     ebx, eax
.text:0040F88B                 jz      short loc_40F8A4
.text:0040F88D
.text:0040F88D loc_40F88D:                             ; CODE XREF: .text:0040F8B2↓j
.text:0040F88D                 mov     esi, 1
.text:0040F892
.text:0040F892 loc_40F892:                             ; CODE XREF: .text:0040F8B4↓j
.text:0040F892                 mov     ds:dword_413520, esi
.text:0040F898                 mov     ebx, [esp+4]
.text:0040F89C                 mov     esi, [esp+8]
.text:0040F8A0                 add     esp, 0Ch
.text:0040F8A3                 retn
.text:0040F8A4 ; ---------------------------------------------------------------------------
.text:0040F8A4
.text:0040F8A4 loc_40F8A4:                             ; CODE XREF: .text:0040F88B↑j
.text:0040F8A4                 call    sub_40F8D0
.text:0040F8A9                 mov     ebx, eax
.text:0040F8AB                 call    sub_40F8C0
.text:0040F8B0                 cmp     ebx, eax
.text:0040F8B2                 jnz     short loc_40F88D
.text:0040F8B4                 jmp     short loc_40F892
.text:0040F8B4 ; ---------------------------------------------------------------------------
.text:0040F8B6                 align 10h
.text:0040F8C0
.text:0040F8C0 ; =============== S U B R O U T I N E =======================================
.text:0040F8C0
.text:0040F8C0
.text:0040F8C0 sub_40F8C0      proc near               ; CODE XREF: .text:0040F8AB↑p
.text:0040F8C0                 xor     eax, eax
.text:0040F8C2                 retn
.text:0040F8C2 sub_40F8C0      endp
.text:0040F8C2
.text:0040F8C2 ; ---------------------------------------------------------------------------
.text:0040F8C3                 align 10h
.text:0040F8D0
.text:0040F8D0 ; =============== S U B R O U T I N E =======================================
.text:0040F8D0
.text:0040F8D0
.text:0040F8D0 sub_40F8D0      proc near               ; CODE XREF: .text:loc_40F8A4↑p
.text:0040F8D0                 xor     eax, eax
.text:0040F8D2                 retn
.text:0040F8D2 sub_40F8D0      endp
.text:0040F8D2
.text:0040F8D2 ; ---------------------------------------------------------------------------
.text:0040F8D3                 align 10h
.text:0040F8E0
.text:0040F8E0 ; =============== S U B R O U T I N E =======================================
.text:0040F8E0
.text:0040F8E0
.text:0040F8E0 sub_40F8E0      proc near               ; CODE XREF: .text:0040F884↑p
.text:0040F8E0                 xor     eax, eax
.text:0040F8E2                 retn
.text:0040F8E2 sub_40F8E0      endp
.text:0040F8E2
.text:0040F8E2 ; ---------------------------------------------------------------------------
.text:0040F8E3                 align 10h
.text:0040F8F0
.text:0040F8F0 ; =============== S U B R O U T I N E =======================================
.text:0040F8F0
.text:0040F8F0
.text:0040F8F0 sub_40F8F0      proc near               ; CODE XREF: .text:0040F87D↑p
.text:0040F8F0                 xor     eax, eax
.text:0040F8F2                 retn
.text:0040F8F2 sub_40F8F0      endp
.text:0040F8F2
.text:0040F8F2 ; ---------------------------------------------------------------------------
.text:0040F8F3                 align 10h
.text:0040F900
.text:0040F900 ; =============== S U B R O U T I N E =======================================
.text:0040F900
.text:0040F900 ; Attributes: thunk
.text:0040F900
.text:0040F900 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040F900 OleInitialize   proc near               ; CODE XREF: sub_40EA40+1A↑p
.text:0040F900
.text:0040F900 pvReserved      = dword ptr  4
.text:0040F900
.text:0040F900                 jmp     ds:__imp_OleInitialize
.text:0040F900 OleInitialize   endp
.text:0040F900
.text:0040F900 ; ---------------------------------------------------------------------------
.text:0040F906                 align 10h
.text:0040F910
.text:0040F910 ; =============== S U B R O U T I N E =======================================
.text:0040F910
.text:0040F910 ; Attributes: thunk
.text:0040F910
.text:0040F910 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040F910 CoCreateInstance proc near              ; CODE XREF: sub_40EA40+52↑p
.text:0040F910
.text:0040F910 rclsid          = dword ptr  4
.text:0040F910 pUnkOuter       = dword ptr  8
.text:0040F910 dwClsContext    = dword ptr  0Ch
.text:0040F910 riid            = dword ptr  10h
.text:0040F910 ppv             = dword ptr  14h
.text:0040F910
.text:0040F910                 jmp     ds:__imp_CoCreateInstance
.text:0040F910 CoCreateInstance endp
.text:0040F910
.text:0040F910 ; ---------------------------------------------------------------------------
.text:0040F916                 align 10h
.text:0040F920
.text:0040F920 ; =============== S U B R O U T I N E =======================================
.text:0040F920
.text:0040F920 ; Attributes: thunk
.text:0040F920
.text:0040F920 ; void __stdcall CoUninitialize()
.text:0040F920 CoUninitialize  proc near               ; CODE XREF: sub_40EA40+14E↑p
.text:0040F920                                         ; sub_40EA40+16D↑p
.text:0040F920                 jmp     ds:__imp_CoUninitialize
.text:0040F920 CoUninitialize  endp
.text:0040F920
.text:0040F920 ; ---------------------------------------------------------------------------
.text:0040F926                 align 10h
.text:0040F930                 add     al, 0BAh ; 'º'
.text:0040F932                 retf
.text:0040F932 ; ---------------------------------------------------------------------------
.text:0040F933                 db 7Eh
.text:0040F934                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040F934                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040F934                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040F934                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040F934                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040F934                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040F934                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040F934                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040F934                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040F934                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040F934                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040F934                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040F934                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040F934                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040F934                 dd 0C4426C00h, 330h, 0
.text:0040FA68                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040FA68                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040FA68                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040FA68                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040FAB8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040FAB8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040FAB8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040FAB8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040FAB8                 dd 0BA94B00h, 1Bh, 0
.text:0040FB18                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040FB28                 dd 0C0h, 46000000h, 331h, 0
.text:0040FB38                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040FB38                 dd 312h, 0
.text:0040FB58                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040FB68                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040FB78                 dd 0C0h, 46000000h, 311h, 0
.text:0040FB88                 dd 0C0h, 46000000h, 313h, 0
.text:0040FB98                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040FBA8                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040FBB8                 dd 0C0h, 46000000h, 310h, 0
.text:0040FBC8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040FBC8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040FBF8                 dd 0C0h, 46000000h, 319h, 0
.text:0040FC08                 dd 0C0h, 46000000h, 315h, 0
.text:0040FC18                 dd 0C0h, 46000000h, 316h, 0
.text:0040FC28                 dd 0C0h, 46000000h, 315h, 0
.text:0040FC38                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040FC48                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040FC48                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040FC48                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040FC88                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040FC88                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040FC88                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040FC88                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040FC88                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040FC88                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040FC88                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040FC88                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040FC88                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040FC88                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040FC88                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040FC88                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040FC88                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040FC88                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040FC88                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040FC88                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040FC88                 dd 2DE81h, 0
.text:0040FDD8                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040FDF0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040FDF0                 dd 0
.text:0040FE08                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040FE08                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040FE08                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040FE08                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040FE08                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040FE08                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040FE08                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040FE08                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040FE08                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040FE08                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040FE08                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040FE08                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040FE08                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040FE08                 dd 10Fh, 0
.text:0040FF18                 dd 0C0h, 46000000h, 125h, 0
.text:0040FF28                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040FF28                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040FF28                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040FF68                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040FF68                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040FF68                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040FF68                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040FF68                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040FFC8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040FFD8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040FFD8                 dd 140h, 0
.text:0040FFF8                 dd 0C0h, 46000000h, 1, 0
.text:00410008                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00410008                 dd 71D3400h, 13Dh, 0
.text:00410028                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00410028                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00410028                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00410028                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00410078                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00410078                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00410078                 dd 20405h, 0
.text:004100A8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:004100B8                 dd 0C0h, 46000000h, 20406h, 0
.text:004100C8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:004100D8                 dd 0C0h, 46000000h, 110h, 0
.text:004100E8                 dd 0C0h, 46000000h, 10Eh, 0
.text:004100F8                 dd 0C0h, 46000000h, 123h, 0
.text:00410108                 dd 0C0h, 46000000h, 124h, 0
.text:00410118                 dd 0C0h, 46000000h, 13h, 0
.text:00410128                 dd 0C0h, 46000000h, 14h, 0
.text:00410138                 dd 0C0h, 46000000h, 15h, 0
.text:00410148                 dd 0C0h, 46000000h, 20400h, 0
.text:00410158                 dd 0C0h, 46000000h, 121h, 0
.text:00410168                 dd 0C0h, 46000000h, 122h, 0
.text:00410178                 dd 0C0h, 46000000h, 2E011h, 0
.text:00410188                 dd 0C0h, 46000000h, 108h, 0
.text:00410198                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00410198                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00410198                 dd 103h, 0
.text:004101C8                 dd 0C0h, 46000000h, 2E000h, 0
.text:004101D8                 dd 0C0h, 46000000h, 106h, 0
.text:004101E8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004101E8                 dd 107h, 0
.text:00410208                 dd 0C0h, 46000000h, 102h, 0
.text:00410218                 dd 0C0h, 46000000h, 104h, 0
.text:00410228                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00410228                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00410228                 dd 105h, 0
.text:00410258                 dd 0C0h, 46000000h, 13Bh, 0
.text:00410268                 dd 0C0h, 46000000h, 139h, 0
.text:00410278                 dd 0C0h, 46000000h, 0Dh, 0
.text:00410288                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00410288                 dd 101h, 0
.text:004102A8                 dd 0C0h, 46000000h, 100h, 0
.text:004102B8                 dd 0C0h, 46000000h, 20404h, 0
.text:004102C8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004102C8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:004102F8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:004102F8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:004102F8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:004102F8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00410348                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410348                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00410348                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00410348                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00410348                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00410348                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:004103C8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:004103C8                 dd 0Ah, 0
.text:004103E8                 dd 0C0h, 46000000h, 2, 0
.text:004103F8                 dd 0C0h, 46000000h, 1Dh, 0
.text:00410408                 dd 0C0h, 46000000h, 3, 0
.text:00410418                 dd 0C0h, 46000000h, 16h, 0
.text:00410428                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00410428                 dd 1608D74Fh, 0Fh, 0
.text:00410448                 dd 0C0h, 46000000h, 20h, 0
.text:00410458                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00410458                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00410458                 dd 0
.text:00410488                 dd 0C0h, 46000000h, 11Eh, 0
.text:00410498                 dd 0C0h, 46000000h, 128h, 0
.text:004104A8                 dd 0C0h, 46000000h, 129h, 0
.text:004104B8                 dd 0C0h, 46000000h, 118h, 0
.text:004104C8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:004104C8                 dd 70474000h, 11Bh, 0
.text:004104E8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:004104E8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004104E8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:004104E8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:004104E8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00410548                 dd 0C0h, 46000000h, 116h, 0
.text:00410558                 dd 0C0h, 46000000h, 113h, 0
.text:00410568                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00410568                 dd 119h, 0
.text:00410588                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00410588                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00410588                 dd 0
.text:004105B8                 dd 0C0h, 46000000h, 11Ch, 0
.text:004105C8                 dd 0C0h, 46000000h, 11Dh, 0
.text:004105D8                 dd 0C0h, 46000000h, 11Fh, 0
.text:004105E8                 dd 0C0h, 46000000h, 112h, 0
.text:004105F8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:004105F8                 dd 18E6000h, 120h, 0
.text:00410618                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00410618                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00410618                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00410658                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00410658                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00410688                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00410688                 dd 11Ah, 0
.text:004106A8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:004106A8                 dd 10Ch, 0
.text:004106C8                 dd 0C0h, 46000000h
.text:004106D0 dword_4106D0    dd 10Bh, 0              ; DATA XREF: sub_40EA40+75↑o
.text:004106D8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:004106D8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:004106D8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:004106D8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00410728                 dd 0C0h, 46000000h, 109h, 0
.text:00410738                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00410738                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00410738                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00410738                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00410738                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00410738                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00410738                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00410738                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00410738                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00410738                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00410738                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00410818                 dd 0C0h, 46000000h, 138h, 0
.text:00410828                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00410828                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00410828                 dd 27h, 0
.text:00410858                 dd 0C0h, 46000000h, 8, 0
.text:00410868                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00410868                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00410868                 dd 20D00h, 0
.text:00410898                 dd 0C0h, 46000000h, 20D03h, 0
.text:004108A8                 dd 0C0h, 46000000h, 12h, 0
.text:004108B8                 dd 0C0h, 46000000h, 4, 0
.text:004108C8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004108C8                 dd 7, 0
.text:004108E8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004108E8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00410918                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00410918                 dd 126h, 0
.text:00410938                 dd 0C0h, 46000000h, 10h, 0
.text:00410948                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00410948                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00410978                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00410978                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00410978                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004109B8                 dd 0C0h, 46000000h, 0Bh, 0
.text:004109C8                 dd 0C0h, 46000000h, 0Ch, 0
.text:004109D8                 dd 0C0h, 46000000h, 26h, 0
.text:004109E8                 dd 0C0h, 46000000h, 6, 0
.text:004109F8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:004109F8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:004109F8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00410A38                 dd 0C0h, 46000000h, 20403h, 0
.text:00410A48                 dd 0C0h, 46000000h, 20401h, 0
.text:00410A58                 dd 0C0h, 46000000h, 20412h, 0
.text:00410A68                 dd 0C0h, 46000000h, 20402h, 0
.text:00410A78                 dd 0C0h, 46000000h, 20411h, 0
.text:00410A88                 dd 0C0h, 46000000h, 2 dup(0)
.text:00410A98                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00410A98                 dd 10Dh, 0
.text:00410AB8                 dd 0C0h, 46000000h, 127h, 0
.text:00410AC8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00410AC8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00410AC8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00410B08                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00410B08                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00410B08                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00410B48                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00410B58                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00410B68                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00410B78                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00410B88                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00410B98                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00410BA8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00410BB8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00410BC8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00410BD8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00410BE8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00410BF8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00410C08                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00410C18                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00410C28                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00410C38                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00410C48                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00410C58                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00410C68                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00410C78                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00410C88                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00410C98                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00410CA8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00410CB8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00410CC8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00410CD8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00410CE8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00410CF8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00410D08                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00410D18                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00410D28                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00410D38                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00410D48                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00410D58                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00410D68                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00410D78                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00410D78                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00410DA0
.text:00410DA0 ; =============== S U B R O U T I N E =======================================
.text:00410DA0
.text:00410DA0 ; Attributes: thunk
.text:00410DA0
.text:00410DA0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00410DA0 mbrtowc         proc near               ; CODE XREF: sub_407980+757↑p
.text:00410DA0
.text:00410DA0 DstCh           = dword ptr  4
.text:00410DA0 SrcCh           = dword ptr  8
.text:00410DA0 SizeInBytes     = dword ptr  0Ch
.text:00410DA0 State           = dword ptr  10h
.text:00410DA0
.text:00410DA0                 jmp     ds:__imp_mbrtowc
.text:00410DA0 mbrtowc         endp
.text:00410DA0
.text:00410DA0 ; ---------------------------------------------------------------------------
.text:00410DA6                 align 10h
.text:00410DB0
.text:00410DB0 ; =============== S U B R O U T I N E =======================================
.text:00410DB0
.text:00410DB0 ; Attributes: bp-based frame
.text:00410DB0
.text:00410DB0 sub_410DB0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00410DB0                 push    ebp
.text:00410DB1                 mov     ecx, offset dword_413000
.text:00410DB6                 cmp     ecx, offset dword_413000
.text:00410DBC                 mov     ebp, esp
.text:00410DBE                 jnb     short loc_410DD6
.text:00410DC0
.text:00410DC0 loc_410DC0:                             ; CODE XREF: sub_410DB0+24↓j
.text:00410DC0                 mov     edx, [ecx+4]
.text:00410DC3                 mov     eax, [ecx]
.text:00410DC5                 add     ecx, 8
.text:00410DC8                 add     [edx+400000h], eax
.text:00410DCE                 cmp     ecx, offset dword_413000
.text:00410DD4                 jb      short loc_410DC0
.text:00410DD6
.text:00410DD6 loc_410DD6:                             ; CODE XREF: sub_410DB0+E↑j
.text:00410DD6                 pop     ebp
.text:00410DD7                 retn
.text:00410DD7 sub_410DB0      endp
.text:00410DD7
.text:00410DD7 ; ---------------------------------------------------------------------------
.text:00410DD8                 align 10h
.text:00410DE0
.text:00410DE0 ; =============== S U B R O U T I N E =======================================
.text:00410DE0
.text:00410DE0 ; Attributes: bp-based frame
.text:00410DE0
.text:00410DE0 sub_410DE0      proc near               ; CODE XREF: sub_401080+16↑p
.text:00410DE0                                         ; TopLevelExceptionFilter+D7↑p
.text:00410DE0                 push    ebp
.text:00410DE1                 mov     ebp, esp
.text:00410DE3                 fninit
.text:00410DE5                 pop     ebp
.text:00410DE6                 retn
.text:00410DE6 sub_410DE0      endp
.text:00410DE6
.text:00410DE6 ; ---------------------------------------------------------------------------
.text:00410DE7                 align 10h
.text:00410DF0
.text:00410DF0 ; =============== S U B R O U T I N E =======================================
.text:00410DF0
.text:00410DF0 ; Attributes: bp-based frame
.text:00410DF0
.text:00410DF0 ; void __cdecl sub_410DF0()
.text:00410DF0 sub_410DF0      proc near               ; DATA XREF: .text:loc_410E39↓o
.text:00410DF0                                         ; sub_410E80:loc_410EAE↓o
.text:00410DF0                 push    ebp
.text:00410DF1                 mov     ebp, esp
.text:00410DF3                 sub     esp, 8
.text:00410DF6                 mov     eax, off_4120D4
.text:00410DFB                 mov     edx, [eax]
.text:00410DFD                 test    edx, edx
.text:00410DFF                 jnz     short loc_410E05
.text:00410E01
.text:00410E01 loc_410E01:                             ; CODE XREF: sub_410DF0+2C↓j
.text:00410E01                 mov     esp, ebp
.text:00410E03                 pop     ebp
.text:00410E04                 retn
.text:00410E05 ; ---------------------------------------------------------------------------
.text:00410E05
.text:00410E05 loc_410E05:                             ; CODE XREF: sub_410DF0+F↑j
.text:00410E05                                         ; sub_410DF0+2A↓j
.text:00410E05                 call    dword ptr [eax]
.text:00410E07                 mov     edx, off_4120D4
.text:00410E0D                 mov     ecx, [edx+4]
.text:00410E10                 lea     eax, [edx+4]
.text:00410E13                 mov     off_4120D4, eax
.text:00410E18                 test    ecx, ecx
.text:00410E1A                 jnz     short loc_410E05
.text:00410E1C                 jmp     short loc_410E01
.text:00410E1C sub_410DF0      endp
.text:00410E1C
.text:00410E1C ; ---------------------------------------------------------------------------
.text:00410E1E                 align 10h
.text:00410E20                 push    ebp
.text:00410E21                 mov     ebp, esp
.text:00410E23                 sub     esp, 8
.text:00410E26                 mov     [ebp-4], ebx
.text:00410E29                 mov     eax, ds:dword_411C30
.text:00410E2E                 cmp     eax, 0FFFFFFFFh
.text:00410E31                 jz      short loc_410E5C
.text:00410E33
.text:00410E33 loc_410E33:                             ; CODE XREF: .text:00410E66↓j
.text:00410E33                                         ; .text:00410E79↓j
.text:00410E33                 test    eax, eax
.text:00410E35                 mov     ebx, eax
.text:00410E37                 jnz     short loc_410E50
.text:00410E39
.text:00410E39 loc_410E39:                             ; CODE XREF: .text:00410E5A↓j
.text:00410E39                 mov     dword ptr [esp], offset sub_410DF0
.text:00410E40                 call    sub_401040
.text:00410E45                 mov     ebx, [ebp-4]
.text:00410E48                 mov     esp, ebp
.text:00410E4A                 pop     ebp
.text:00410E4B                 retn
.text:00410E4B ; ---------------------------------------------------------------------------
.text:00410E4C                 align 10h
.text:00410E50
.text:00410E50 loc_410E50:                             ; CODE XREF: .text:00410E37↑j
.text:00410E50                                         ; .text:00410E58↓j
.text:00410E50                 call    ds:dword_411C30[ebx*4]
.text:00410E57                 dec     ebx
.text:00410E58                 jnz     short loc_410E50
.text:00410E5A                 jmp     short loc_410E39
.text:00410E5C ; ---------------------------------------------------------------------------
.text:00410E5C
.text:00410E5C loc_410E5C:                             ; CODE XREF: .text:00410E31↑j
.text:00410E5C                 mov     ecx, ds:dword_411C34
.text:00410E62                 xor     eax, eax
.text:00410E64                 test    ecx, ecx
.text:00410E66                 jz      short loc_410E33
.text:00410E68                 mov     edx, offset dword_411C30
.text:00410E6D                 lea     esi, [esi+0]
.text:00410E70
.text:00410E70 loc_410E70:                             ; CODE XREF: .text:00410E77↓j
.text:00410E70                 inc     eax
.text:00410E71                 mov     ecx, [edx+eax*4+4]
.text:00410E75                 test    ecx, ecx
.text:00410E77                 jnz     short loc_410E70
.text:00410E79                 jmp     short loc_410E33
.text:00410E79 ; ---------------------------------------------------------------------------
.text:00410E7B                 align 10h
.text:00410E80
.text:00410E80 ; =============== S U B R O U T I N E =======================================
.text:00410E80
.text:00410E80 ; Attributes: bp-based frame
.text:00410E80
.text:00410E80 sub_410E80      proc near               ; CODE XREF: sub_401A00+1E↑p
.text:00410E80
.text:00410E80 var_8           = dword ptr -8
.text:00410E80 var_4           = dword ptr -4
.text:00410E80
.text:00410E80                 push    ebp
.text:00410E81                 mov     ebp, esp
.text:00410E83                 sub     esp, 8
.text:00410E86                 mov     [ebp+var_4], ebx
.text:00410E89                 mov     edx, dword_4120D0
.text:00410E8F                 test    edx, edx
.text:00410E91                 jnz     short loc_410EBA
.text:00410E93                 mov     eax, ds:dword_411C30
.text:00410E98                 mov     edx, 1
.text:00410E9D                 mov     dword_4120D0, edx
.text:00410EA3                 cmp     eax, 0FFFFFFFFh
.text:00410EA6                 jz      short loc_410ECD
.text:00410EA8
.text:00410EA8 loc_410EA8:                             ; CODE XREF: sub_410E80+57↓j
.text:00410EA8                                         ; sub_410E80+69↓j
.text:00410EA8                 test    eax, eax
.text:00410EAA                 mov     ebx, eax
.text:00410EAC                 jnz     short loc_410EC1
.text:00410EAE
.text:00410EAE loc_410EAE:                             ; CODE XREF: sub_410E80+4B↓j
.text:00410EAE                 mov     [esp+8+var_8], offset sub_410DF0 ; void (__cdecl *)()
.text:00410EB5                 call    sub_401040
.text:00410EBA
.text:00410EBA loc_410EBA:                             ; CODE XREF: sub_410E80+11↑j
.text:00410EBA                 mov     ebx, [ebp+var_4]
.text:00410EBD                 mov     esp, ebp
.text:00410EBF                 pop     ebp
.text:00410EC0                 retn
.text:00410EC1 ; ---------------------------------------------------------------------------
.text:00410EC1
.text:00410EC1 loc_410EC1:                             ; CODE XREF: sub_410E80+2C↑j
.text:00410EC1                                         ; sub_410E80+49↓j
.text:00410EC1                 call    ds:dword_411C30[ebx*4]
.text:00410EC8                 dec     ebx
.text:00410EC9                 jnz     short loc_410EC1
.text:00410ECB                 jmp     short loc_410EAE
.text:00410ECD ; ---------------------------------------------------------------------------
.text:00410ECD
.text:00410ECD loc_410ECD:                             ; CODE XREF: sub_410E80+26↑j
.text:00410ECD                 mov     ecx, ds:dword_411C34
.text:00410ED3                 xor     eax, eax
.text:00410ED5                 test    ecx, ecx
.text:00410ED7                 jz      short loc_410EA8
.text:00410ED9                 mov     edx, offset dword_411C30
.text:00410EDE                 mov     esi, esi
.text:00410EE0
.text:00410EE0 loc_410EE0:                             ; CODE XREF: sub_410E80+67↓j
.text:00410EE0                 inc     eax
.text:00410EE1                 mov     ebx, [edx+eax*4+4]
.text:00410EE5                 test    ebx, ebx
.text:00410EE7                 jnz     short loc_410EE0
.text:00410EE9                 jmp     short loc_410EA8
.text:00410EE9 sub_410E80      endp
.text:00410EE9
.text:00410EE9 ; ---------------------------------------------------------------------------
.text:00410EEB                 align 10h
.text:00410EF0
.text:00410EF0 ; =============== S U B R O U T I N E =======================================
.text:00410EF0
.text:00410EF0 ; Attributes: info_from_lumina
.text:00410EF0
.text:00410EF0 ; void *__cdecl _alloca(size_t Size)
.text:00410EF0 __alloca        proc near               ; CODE XREF: sub_401A00+19↑p
.text:00410EF0                 push    ecx
.text:00410EF1                 mov     ecx, esp
.text:00410EF3                 add     ecx, 8
.text:00410EF6
.text:00410EF6 loc_410EF6:                             ; CODE XREF: __alloca+1B↓j
.text:00410EF6                 cmp     eax, 1000h
.text:00410EFB                 jb      short loc_410F0D
.text:00410EFD                 sub     ecx, 1000h
.text:00410F03                 or      dword ptr [ecx], 0
.text:00410F06                 sub     eax, 1000h
.text:00410F0B                 jmp     short loc_410EF6
.text:00410F0D ; ---------------------------------------------------------------------------
.text:00410F0D
.text:00410F0D loc_410F0D:                             ; CODE XREF: __alloca+B↑j
.text:00410F0D                 sub     ecx, eax
.text:00410F0F                 or      dword ptr [ecx], 0
.text:00410F12                 mov     eax, esp
.text:00410F14                 mov     esp, ecx
.text:00410F16                 mov     ecx, [eax]
.text:00410F18                 mov     eax, [eax+4]
.text:00410F1B                 jmp     eax
.text:00410F1B __alloca        endp
.text:00410F1B
.text:00410F1B ; ---------------------------------------------------------------------------
.text:00410F1D                 align 10h
.text:00410F20
.text:00410F20 ; =============== S U B R O U T I N E =======================================
.text:00410F20
.text:00410F20 ; Attributes: bp-based frame
.text:00410F20
.text:00410F20 sub_410F20      proc near               ; CODE XREF: sub_409900+17E↑p
.text:00410F20                                         ; sub_409900+1F5↑p ...
.text:00410F20
.text:00410F20 var_24          = dword ptr -24h
.text:00410F20 var_20          = dword ptr -20h
.text:00410F20 var_1C          = dword ptr -1Ch
.text:00410F20 var_18          = dword ptr -18h
.text:00410F20 var_14          = dword ptr -14h
.text:00410F20 var_C           = dword ptr -0Ch
.text:00410F20 var_8           = dword ptr -8
.text:00410F20 var_4           = dword ptr -4
.text:00410F20 arg_0           = dword ptr  8
.text:00410F20 arg_4           = dword ptr  0Ch
.text:00410F20 arg_8           = dword ptr  10h
.text:00410F20 arg_C           = dword ptr  14h
.text:00410F20
.text:00410F20                 push    ebp
.text:00410F21                 mov     ebp, esp
.text:00410F23                 sub     esp, 28h
.text:00410F26                 mov     [ebp+var_C], ebx
.text:00410F29                 mov     edx, [ebp+arg_C]
.text:00410F2C                 mov     ecx, [ebp+arg_0]
.text:00410F2F                 mov     [ebp+var_8], esi
.text:00410F32                 mov     eax, [ebp+arg_8]
.text:00410F35                 test    edx, edx
.text:00410F37                 mov     [ebp+var_4], edi
.text:00410F3A                 mov     ebx, [ebp+arg_4]
.text:00410F3D                 mov     esi, eax
.text:00410F3F                 mov     [ebp+var_18], 0
.text:00410F46                 mov     [ebp+var_14], 0
.text:00410F4D                 mov     [ebp+var_1C], ecx
.text:00410F50                 jnz     short loc_410FA2
.text:00410F52                 cmp     eax, ebx
.text:00410F54                 jbe     short loc_410F80
.text:00410F56                 mov     eax, ecx
.text:00410F58                 mov     edx, ebx
.text:00410F5A                 div     esi
.text:00410F5C                 mov     edi, eax
.text:00410F5E                 mov     esi, esi
.text:00410F60
.text:00410F60 loc_410F60:                             ; CODE XREF: sub_410F20+88↓j
.text:00410F60                                         ; sub_410F20+A4↓j ...
.text:00410F60                 xor     ecx, ecx
.text:00410F62
.text:00410F62 loc_410F62:                             ; CODE XREF: sub_410F20+80↓j
.text:00410F62                 mov     [ebp+var_18], edi
.text:00410F65                 mov     ebx, [ebp+var_C]
.text:00410F68                 mov     eax, [ebp+var_18]
.text:00410F6B                 mov     [ebp+var_14], ecx
.text:00410F6E                 mov     esi, [ebp+var_8]
.text:00410F71                 mov     edx, [ebp+var_14]
.text:00410F74                 mov     edi, [ebp+var_4]
.text:00410F77                 mov     esp, ebp
.text:00410F79                 pop     ebp
.text:00410F7A                 retn
.text:00410F7A ; ---------------------------------------------------------------------------
.text:00410F7B                 align 10h
.text:00410F80
.text:00410F80 loc_410F80:                             ; CODE XREF: sub_410F20+34↑j
.text:00410F80                 test    eax, eax
.text:00410F82                 jnz     short loc_410F91
.text:00410F84                 mov     eax, 1
.text:00410F89                 xor     ecx, ecx
.text:00410F8B                 xor     edx, edx
.text:00410F8D                 div     ecx
.text:00410F8F                 mov     esi, eax
.text:00410F91
.text:00410F91 loc_410F91:                             ; CODE XREF: sub_410F20+62↑j
.text:00410F91                 mov     eax, ebx
.text:00410F93                 xor     edx, edx
.text:00410F95                 div     esi
.text:00410F97                 mov     ecx, eax
.text:00410F99                 mov     eax, [ebp+var_1C]
.text:00410F9C                 div     esi
.text:00410F9E                 mov     edi, eax
.text:00410FA0                 jmp     short loc_410F62
.text:00410FA2 ; ---------------------------------------------------------------------------
.text:00410FA2
.text:00410FA2 loc_410FA2:                             ; CODE XREF: sub_410F20+30↑j
.text:00410FA2                 cmp     edx, ebx
.text:00410FA4                 jbe     short loc_410FB0
.text:00410FA6                 xor     edi, edi
.text:00410FA8                 jmp     short loc_410F60
.text:00410FA8 ; ---------------------------------------------------------------------------
.text:00410FAA                 align 10h
.text:00410FB0
.text:00410FB0 loc_410FB0:                             ; CODE XREF: sub_410F20+84↑j
.text:00410FB0                 bsr     eax, edx
.text:00410FB3                 xor     eax, 1Fh
.text:00410FB6                 mov     [ebp+var_20], eax
.text:00410FB9                 jnz     short loc_410FD0
.text:00410FBB                 cmp     ebx, edx
.text:00410FBD                 ja      short loc_410FC6
.text:00410FBF                 xor     edi, edi
.text:00410FC1                 cmp     [ebp+var_1C], esi
.text:00410FC4                 jb      short loc_410F60
.text:00410FC6
.text:00410FC6 loc_410FC6:                             ; CODE XREF: sub_410F20+9D↑j
.text:00410FC6                 mov     edi, 1
.text:00410FCB                 jmp     short loc_410F60
.text:00410FCB ; ---------------------------------------------------------------------------
.text:00410FCD                 align 10h
.text:00410FD0
.text:00410FD0 loc_410FD0:                             ; CODE XREF: sub_410F20+99↑j
.text:00410FD0                 mov     eax, [ebp+var_20]
.text:00410FD3                 mov     ecx, 20h ; ' '
.text:00410FD8                 sub     ecx, eax
.text:00410FDA                 mov     [ebp+var_24], ecx
.text:00410FDD                 mov     eax, esi
.text:00410FDF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00410FE3                 shl     edx, cl
.text:00410FE5                 mov     edi, edx
.text:00410FE7                 movzx   ecx, byte ptr [ebp+var_24]
.text:00410FEB                 mov     edx, ebx
.text:00410FED                 shr     eax, cl
.text:00410FEF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00410FF3                 or      edi, eax
.text:00410FF5                 mov     eax, [ebp+var_1C]
.text:00410FF8                 shl     esi, cl
.text:00410FFA                 movzx   ecx, byte ptr [ebp+var_24]
.text:00410FFE                 shr     edx, cl
.text:00411000                 movzx   ecx, byte ptr [ebp+var_20]
.text:00411004                 shl     ebx, cl
.text:00411006                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041100A                 shr     eax, cl
.text:0041100C                 or      ebx, eax
.text:0041100E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00411012                 mov     eax, ebx
.text:00411014                 div     edi
.text:00411016                 mov     ebx, edx
.text:00411018                 mov     edi, eax
.text:0041101A                 shl     [ebp+var_1C], cl
.text:0041101D                 mul     esi
.text:0041101F                 cmp     edx, ebx
.text:00411021                 ja      short loc_411034
.text:00411023                 cmp     edx, ebx
.text:00411025                 jnz     loc_410F60
.text:0041102B                 cmp     eax, [ebp+var_1C]
.text:0041102E                 jbe     loc_410F60
.text:00411034
.text:00411034 loc_411034:                             ; CODE XREF: sub_410F20+101↑j
.text:00411034                 dec     edi
.text:00411035                 jmp     loc_410F60
.text:00411035 sub_410F20      endp
.text:00411035
.text:00411035 ; ---------------------------------------------------------------------------
.text:0041103A                 align 10h
.text:00411040
.text:00411040 ; =============== S U B R O U T I N E =======================================
.text:00411040
.text:00411040 ; Attributes: bp-based frame
.text:00411040
.text:00411040 sub_411040      proc near               ; CODE XREF: sub_409900+1A5↑p
.text:00411040                                         ; sub_409900+21E↑p ...
.text:00411040
.text:00411040 var_34          = dword ptr -34h
.text:00411040 var_2C          = dword ptr -2Ch
.text:00411040 var_28          = dword ptr -28h
.text:00411040 var_24          = dword ptr -24h
.text:00411040 var_20          = dword ptr -20h
.text:00411040 var_1C          = dword ptr -1Ch
.text:00411040 var_18          = dword ptr -18h
.text:00411040 var_14          = dword ptr -14h
.text:00411040 arg_0           = dword ptr  8
.text:00411040 arg_4           = dword ptr  0Ch
.text:00411040 arg_8           = dword ptr  10h
.text:00411040 arg_C           = dword ptr  14h
.text:00411040
.text:00411040                 push    ebp
.text:00411041                 mov     ebp, esp
.text:00411043                 push    edi
.text:00411044                 push    esi
.text:00411045                 push    ebx
.text:00411046                 sub     esp, 2Ch
.text:00411049                 mov     edx, [ebp+arg_C]
.text:0041104C                 mov     [ebp+var_20], 0
.text:00411053                 mov     ecx, [ebp+arg_0]
.text:00411056                 mov     ebx, [ebp+arg_4]
.text:00411059                 mov     [ebp+var_1C], 0
.text:00411060                 mov     eax, [ebp+arg_8]
.text:00411063                 test    edx, edx
.text:00411065                 mov     [ebp+var_24], edx
.text:00411068                 mov     edi, ebx
.text:0041106A                 mov     esi, eax
.text:0041106C                 mov     [ebp+var_28], ecx
.text:0041106F                 jnz     short loc_4110D0
.text:00411071                 cmp     eax, ebx
.text:00411073                 jbe     short loc_4110B0
.text:00411075                 mov     eax, ecx
.text:00411077                 mov     edx, ebx
.text:00411079                 div     esi
.text:0041107B
.text:0041107B loc_41107B:                             ; CODE XREF: sub_411040+8B↓j
.text:0041107B                 mov     [ebp+var_28], edx
.text:0041107E                 lea     ecx, [ebp+var_18]
.text:00411081                 test    ecx, ecx
.text:00411083                 jz      short loc_41109E
.text:00411085                 mov     [ebp+var_1C], 0
.text:0041108C
.text:0041108C loc_41108C:                             ; CODE XREF: sub_411040+DA↓j
.text:0041108C                 mov     eax, [ebp+var_28]
.text:0041108F                 mov     [ebp+var_20], eax
.text:00411092                 mov     edx, [ebp+var_20]
.text:00411095                 mov     ecx, [ebp+var_1C]
.text:00411098                 mov     [ebp+var_18], edx
.text:0041109B                 mov     [ebp+var_14], ecx
.text:0041109E
.text:0041109E loc_41109E:                             ; CODE XREF: sub_411040+43↑j
.text:0041109E                                         ; sub_411040+A7↓j ...
.text:0041109E                 mov     eax, [ebp+var_18]
.text:004110A1                 mov     edx, [ebp+var_14]
.text:004110A4                 add     esp, 2Ch
.text:004110A7                 pop     ebx
.text:004110A8                 pop     esi
.text:004110A9                 pop     edi
.text:004110AA                 pop     ebp
.text:004110AB                 retn
.text:004110AB ; ---------------------------------------------------------------------------
.text:004110AC                 align 10h
.text:004110B0
.text:004110B0 loc_4110B0:                             ; CODE XREF: sub_411040+33↑j
.text:004110B0                 test    eax, eax
.text:004110B2                 jnz     short loc_4110BF
.text:004110B4                 mov     eax, 1
.text:004110B9                 xor     edx, edx
.text:004110BB                 div     esi
.text:004110BD                 mov     esi, eax
.text:004110BF
.text:004110BF loc_4110BF:                             ; CODE XREF: sub_411040+72↑j
.text:004110BF                 mov     eax, edi
.text:004110C1                 mov     edx, [ebp+var_24]
.text:004110C4                 div     esi
.text:004110C6                 mov     eax, [ebp+var_28]
.text:004110C9                 div     esi
.text:004110CB                 jmp     short loc_41107B
.text:004110CB ; ---------------------------------------------------------------------------
.text:004110CD                 align 10h
.text:004110D0
.text:004110D0 loc_4110D0:                             ; CODE XREF: sub_411040+2F↑j
.text:004110D0                 cmp     [ebp+var_24], ebx
.text:004110D3                 jbe     short loc_4110F0
.text:004110D5                 mov     [ebp+var_20], ecx
.text:004110D8
.text:004110D8 loc_4110D8:                             ; CODE XREF: sub_411040+15B↓j
.text:004110D8                 mov     [ebp+var_1C], edi
.text:004110DB                 mov     eax, [ebp+var_20]
.text:004110DE                 mov     edx, [ebp+var_1C]
.text:004110E1                 mov     [ebp+var_18], eax
.text:004110E4                 mov     [ebp+var_14], edx
.text:004110E7                 jmp     short loc_41109E
.text:004110E7 ; ---------------------------------------------------------------------------
.text:004110E9                 align 10h
.text:004110F0
.text:004110F0 loc_4110F0:                             ; CODE XREF: sub_411040+93↑j
.text:004110F0                 bsr     eax, [ebp+var_24]
.text:004110F4                 mov     ebx, eax
.text:004110F6                 xor     ebx, 1Fh
.text:004110F9                 jnz     short loc_411120
.text:004110FB                 cmp     edi, [ebp+var_24]
.text:004110FE                 ja      short loc_411105
.text:00411100                 cmp     [ebp+var_28], esi
.text:00411103                 jb      short loc_411110
.text:00411105
.text:00411105 loc_411105:                             ; CODE XREF: sub_411040+BE↑j
.text:00411105                 mov     edx, [ebp+var_28]
.text:00411108                 sub     edx, esi
.text:0041110A                 sbb     edi, [ebp+var_24]
.text:0041110D                 mov     [ebp+var_28], edx
.text:00411110
.text:00411110 loc_411110:                             ; CODE XREF: sub_411040+C3↑j
.text:00411110                 lea     ecx, [ebp+var_18]
.text:00411113                 test    ecx, ecx
.text:00411115                 jz      short loc_41109E
.text:00411117                 mov     [ebp+var_1C], edi
.text:0041111A                 jmp     loc_41108C
.text:0041111A ; ---------------------------------------------------------------------------
.text:0041111F                 align 10h
.text:00411120
.text:00411120 loc_411120:                             ; CODE XREF: sub_411040+B9↑j
.text:00411120                 mov     edx, [ebp+var_24]
.text:00411123                 mov     eax, 20h ; ' '
.text:00411128                 mov     cl, bl
.text:0041112A                 sub     eax, ebx
.text:0041112C                 mov     [ebp+var_2C], eax
.text:0041112F                 shl     edx, cl
.text:00411131                 mov     eax, esi
.text:00411133                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411137                 shr     eax, cl
.text:00411139                 mov     cl, bl
.text:0041113B                 shl     esi, cl
.text:0041113D                 or      edx, eax
.text:0041113F                 mov     eax, [ebp+var_28]
.text:00411142                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411146                 mov     [ebp+var_24], edx
.text:00411149                 mov     edx, edi
.text:0041114B                 shr     edx, cl
.text:0041114D                 mov     cl, bl
.text:0041114F                 shl     edi, cl
.text:00411151                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411155                 shr     eax, cl
.text:00411157                 or      edi, eax
.text:00411159                 mov     eax, edi
.text:0041115B                 mov     cl, bl
.text:0041115D                 div     [ebp+var_24]
.text:00411160                 shl     [ebp+var_28], cl
.text:00411163                 mov     edi, edx
.text:00411165                 mul     esi
.text:00411167                 mov     [ebp+var_34], eax
.text:0041116A                 cmp     edx, edi
.text:0041116C                 ja      short loc_4111A8
.text:0041116E                 cmp     edx, edi
.text:00411170                 jz      short loc_4111A0
.text:00411172
.text:00411172 loc_411172:                             ; CODE XREF: sub_411040+166↓j
.text:00411172                                         ; sub_411040+173↓j
.text:00411172                 lea     eax, [ebp+var_18]
.text:00411175                 test    eax, eax
.text:00411177                 jz      loc_41109E
.text:0041117D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00411181                 mov     eax, [ebp+var_28]
.text:00411184                 sub     eax, [ebp+var_34]
.text:00411187                 sbb     edi, edx
.text:00411189                 mov     [ebp+var_28], eax
.text:0041118C                 mov     edx, edi
.text:0041118E                 shl     edx, cl
.text:00411190                 mov     cl, bl
.text:00411192                 shr     eax, cl
.text:00411194                 or      edx, eax
.text:00411196                 mov     [ebp+var_20], edx
.text:00411199                 shr     edi, cl
.text:0041119B                 jmp     loc_4110D8
.text:004111A0 ; ---------------------------------------------------------------------------
.text:004111A0
.text:004111A0 loc_4111A0:                             ; CODE XREF: sub_411040+130↑j
.text:004111A0                 mov     eax, [ebp+var_28]
.text:004111A3                 cmp     [ebp+var_34], eax
.text:004111A6                 jbe     short loc_411172
.text:004111A8
.text:004111A8 loc_4111A8:                             ; CODE XREF: sub_411040+12C↑j
.text:004111A8                 mov     ecx, [ebp+var_34]
.text:004111AB                 sub     ecx, esi
.text:004111AD                 sbb     edx, [ebp+var_24]
.text:004111B0                 mov     [ebp+var_34], ecx
.text:004111B3                 jmp     short loc_411172
.text:004111B3 sub_411040      endp
.text:004111B3
.text:004111B3 ; ---------------------------------------------------------------------------
.text:004111B5                 align 10h
.text:004111C0
.text:004111C0 ; =============== S U B R O U T I N E =======================================
.text:004111C0
.text:004111C0 ; Attributes: thunk
.text:004111C0
.text:004111C0 ; int __cdecl close(int FileHandle)
.text:004111C0 _close          proc near               ; CODE XREF: sub_402420+AA↑p
.text:004111C0                                         ; sub_402420+121↑p
.text:004111C0
.text:004111C0 FileHandle      = dword ptr  4
.text:004111C0
.text:004111C0                 jmp     ds:__imp__close
.text:004111C0 _close          endp
.text:004111C0
.text:004111C0 ; ---------------------------------------------------------------------------
.text:004111C6                 align 10h
.text:004111D0
.text:004111D0 ; =============== S U B R O U T I N E =======================================
.text:004111D0
.text:004111D0 ; Attributes: thunk
.text:004111D0
.text:004111D0 ; int open(const char *FileName, int OpenFlag, ...)
.text:004111D0 _open           proc near               ; CODE XREF: sub_402420+258↑p
.text:004111D0
.text:004111D0 FileName        = dword ptr  4
.text:004111D0 OpenFlag        = dword ptr  8
.text:004111D0
.text:004111D0                 jmp     ds:__imp__open
.text:004111D0 _open           endp
.text:004111D0
.text:004111D0 ; ---------------------------------------------------------------------------
.text:004111D6                 align 10h
.text:004111E0
.text:004111E0 ; =============== S U B R O U T I N E =======================================
.text:004111E0
.text:004111E0 ; Attributes: thunk
.text:004111E0
.text:004111E0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:004111E0 _stricmp        proc near               ; CODE XREF: sub_409DD0+46F↑p
.text:004111E0                                         ; sub_40BD50+2E↑p ...
.text:004111E0
.text:004111E0 String1         = dword ptr  4
.text:004111E0 String2         = dword ptr  8
.text:004111E0
.text:004111E0                 jmp     ds:__imp__stricmp
.text:004111E0 _stricmp        endp
.text:004111E0
.text:004111E0 ; ---------------------------------------------------------------------------
.text:004111E6                 align 10h
.text:004111F0
.text:004111F0 ; =============== S U B R O U T I N E =======================================
.text:004111F0
.text:004111F0 ; Attributes: thunk
.text:004111F0
.text:004111F0 ; char *__cdecl strdup(const char *String)
.text:004111F0 _strdup         proc near               ; CODE XREF: sub_40B980+101↑p
.text:004111F0                                         ; .text:0040BBEA↑p ...
.text:004111F0
.text:004111F0 String          = dword ptr  4
.text:004111F0
.text:004111F0                 jmp     ds:__imp__strdup
.text:004111F0 _strdup         endp
.text:004111F0
.text:004111F0 ; ---------------------------------------------------------------------------
.text:004111F6                 align 10h
.text:00411200
.text:00411200 ; =============== S U B R O U T I N E =======================================
.text:00411200
.text:00411200 ; Attributes: thunk
.text:00411200
.text:00411200 ; int __cdecl getpid()
.text:00411200 _getpid         proc near               ; CODE XREF: sub_40F3A0+84↑p
.text:00411200                 jmp     ds:__imp__getpid
.text:00411200 _getpid         endp
.text:00411200
.text:00411200 ; ---------------------------------------------------------------------------
.text:00411206                 align 10h
.text:00411210
.text:00411210 ; =============== S U B R O U T I N E =======================================
.text:00411210
.text:00411210 ; Attributes: thunk
.text:00411210
.text:00411210 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00411210 _chmod          proc near               ; CODE XREF: sub_40F7D0+41↑j
.text:00411210
.text:00411210 FileName        = dword ptr  4
.text:00411210 AccessMode      = dword ptr  8
.text:00411210
.text:00411210                 jmp     ds:__imp__chmod
.text:00411210 _chmod          endp
.text:00411210
.text:00411210 ; ---------------------------------------------------------------------------
.text:00411216                 align 10h
.text:00411220                 jmp     ds:__set_app_type
.text:00411220 ; ---------------------------------------------------------------------------
.text:00411226                 align 10h
.text:00411230
.text:00411230 ; =============== S U B R O U T I N E =======================================
.text:00411230
.text:00411230 ; Attributes: thunk
.text:00411230
.text:00411230 ; void __cdecl cexit()
.text:00411230 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00411230                 jmp     ds:__imp__cexit
.text:00411230 _cexit          endp
.text:00411230
.text:00411230 ; ---------------------------------------------------------------------------
.text:00411236                 align 10h
.text:00411240
.text:00411240 ; =============== S U B R O U T I N E =======================================
.text:00411240
.text:00411240 ; Attributes: thunk
.text:00411240
.text:00411240 ; char ***__cdecl _p__environ()
.text:00411240 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00411240                 jmp     ds:__imp___p__environ
.text:00411240 __p__environ    endp
.text:00411240
.text:00411240 ; ---------------------------------------------------------------------------
.text:00411246                 align 10h
.text:00411250
.text:00411250 ; =============== S U B R O U T I N E =======================================
.text:00411250
.text:00411250 ; Attributes: thunk
.text:00411250
.text:00411250 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00411250 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00411250                                         ; TopLevelExceptionFilter+88↑p ...
.text:00411250
.text:00411250 Signal          = dword ptr  4
.text:00411250 Function        = dword ptr  8
.text:00411250
.text:00411250                 jmp     ds:__imp_signal
.text:00411250 signal          endp
.text:00411250
.text:00411250 ; ---------------------------------------------------------------------------
.text:00411256                 align 10h
.text:00411260
.text:00411260 ; =============== S U B R O U T I N E =======================================
.text:00411260
.text:00411260 ; Attributes: thunk
.text:00411260
.text:00411260 ; int *__cdecl _p__fmode()
.text:00411260 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00411260                 jmp     ds:__imp___p__fmode
.text:00411260 __p__fmode      endp
.text:00411260
.text:00411260 ; ---------------------------------------------------------------------------
.text:00411266                 align 10h
.text:00411270
.text:00411270 ; =============== S U B R O U T I N E =======================================
.text:00411270
.text:00411270 ; Attributes: thunk
.text:00411270
.text:00411270 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00411270 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00411270                                         ; sub_401080+90↑p ...
.text:00411270
.text:00411270 FileHandle      = dword ptr  4
.text:00411270 Mode            = dword ptr  8
.text:00411270
.text:00411270                 jmp     ds:__imp__setmode
.text:00411270 _setmode        endp
.text:00411270
.text:00411270 ; ---------------------------------------------------------------------------
.text:00411276                 align 10h
.text:00411280
.text:00411280 ; =============== S U B R O U T I N E =======================================
.text:00411280
.text:00411280 ; Attributes: thunk
.text:00411280
.text:00411280 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00411280                 jmp     ds:__imp___getmainargs
.text:00411280 __getmainargs   endp
.text:00411280
.text:00411280 ; ---------------------------------------------------------------------------
.text:00411286                 align 10h
.text:00411290
.text:00411290 ; =============== S U B R O U T I N E =======================================
.text:00411290
.text:00411290 ; Attributes: thunk
.text:00411290
.text:00411290 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:00411290 localtime       proc near               ; CODE XREF: sub_401A00+637↑p
.text:00411290                                         ; sub_404280+109↑p ...
.text:00411290
.text:00411290 Time            = dword ptr  4
.text:00411290
.text:00411290                 jmp     ds:__imp_localtime
.text:00411290 localtime       endp
.text:00411290
.text:00411290 ; ---------------------------------------------------------------------------
.text:00411296                 align 10h
.text:004112A0
.text:004112A0 ; =============== S U B R O U T I N E =======================================
.text:004112A0
.text:004112A0 ; Attributes: thunk
.text:004112A0
.text:004112A0 ; char *__cdecl getenv(const char *VarName)
.text:004112A0 getenv          proc near               ; CODE XREF: sub_401A00+61C↑p
.text:004112A0                                         ; sub_402EC0+B57↑p ...
.text:004112A0
.text:004112A0 VarName         = dword ptr  4
.text:004112A0
.text:004112A0                 jmp     ds:__imp_getenv
.text:004112A0 getenv          endp
.text:004112A0
.text:004112A0 ; ---------------------------------------------------------------------------
.text:004112A6                 align 10h
.text:004112B0
.text:004112B0 ; =============== S U B R O U T I N E =======================================
.text:004112B0
.text:004112B0 ; Attributes: thunk
.text:004112B0
.text:004112B0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004112B0 setlocale       proc near               ; CODE XREF: sub_401A00+48↑p
.text:004112B0
.text:004112B0 Category        = dword ptr  4
.text:004112B0 Locale          = dword ptr  8
.text:004112B0
.text:004112B0                 jmp     ds:__imp_setlocale
.text:004112B0 setlocale       endp
.text:004112B0
.text:004112B0 ; ---------------------------------------------------------------------------
.text:004112B6                 align 10h
.text:004112C0
.text:004112C0 ; =============== S U B R O U T I N E =======================================
.text:004112C0
.text:004112C0 ; Attributes: noreturn thunk
.text:004112C0
.text:004112C0 ; void __cdecl __noreturn exit(int Code)
.text:004112C0 exit            proc near               ; CODE XREF: sub_401A00:loc_401B37↑p
.text:004112C0                                         ; sub_402280+3B↑p ...
.text:004112C0
.text:004112C0 Code            = dword ptr  4
.text:004112C0
.text:004112C0                 jmp     ds:__imp_exit
.text:004112C0 exit            endp
.text:004112C0
.text:004112C0 ; ---------------------------------------------------------------------------
.text:004112C6                 align 10h
.text:004112D0
.text:004112D0 ; =============== S U B R O U T I N E =======================================
.text:004112D0
.text:004112D0 ; Attributes: thunk
.text:004112D0
.text:004112D0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004112D0 fputs           proc near               ; CODE XREF: sub_401A00+1DD↑p
.text:004112D0                                         ; sub_401A00+1FF↑p ...
.text:004112D0
.text:004112D0 Buffer          = dword ptr  4
.text:004112D0 Stream          = dword ptr  8
.text:004112D0
.text:004112D0                 jmp     ds:__imp_fputs
.text:004112D0 fputs           endp
.text:004112D0
.text:004112D0 ; ---------------------------------------------------------------------------
.text:004112D6                 align 10h
.text:004112E0
.text:004112E0 ; =============== S U B R O U T I N E =======================================
.text:004112E0
.text:004112E0 ; Attributes: thunk
.text:004112E0
.text:004112E0 ; int printf(const char *const Format, ...)
.text:004112E0 printf          proc near               ; CODE XREF: sub_401A00+1BB↑p
.text:004112E0                                         ; sub_401A00+2C6↑p ...
.text:004112E0
.text:004112E0 Format          = dword ptr  4
.text:004112E0
.text:004112E0                 jmp     ds:__imp_printf
.text:004112E0 printf          endp
.text:004112E0
.text:004112E0 ; ---------------------------------------------------------------------------
.text:004112E6                 align 10h
.text:004112F0
.text:004112F0 ; =============== S U B R O U T I N E =======================================
.text:004112F0
.text:004112F0 ; Attributes: thunk
.text:004112F0
.text:004112F0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004112F0 fprintf         proc near               ; CODE XREF: sub_401A00+12B↑p
.text:004112F0                                         ; sub_402280+33↑p ...
.text:004112F0
.text:004112F0 Stream          = dword ptr  4
.text:004112F0 Format          = dword ptr  8
.text:004112F0
.text:004112F0                 jmp     ds:__imp_fprintf
.text:004112F0 fprintf         endp
.text:004112F0
.text:004112F0 ; ---------------------------------------------------------------------------
.text:004112F6                 align 10h
.text:00411300
.text:00411300 ; =============== S U B R O U T I N E =======================================
.text:00411300
.text:00411300 ; Attributes: thunk
.text:00411300
.text:00411300 ; int *__cdecl errno()
.text:00411300 _errno          proc near               ; CODE XREF: sub_401A00+583↑p
.text:00411300                                         ; sub_401A00+83D↑p ...
.text:00411300                 jmp     ds:__imp__errno
.text:00411300 _errno          endp
.text:00411300
.text:00411300 ; ---------------------------------------------------------------------------
.text:00411306                 align 10h
.text:00411310
.text:00411310 ; =============== S U B R O U T I N E =======================================
.text:00411310
.text:00411310 ; Attributes: thunk
.text:00411310
.text:00411310 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00411310 strncmp         proc near               ; CODE XREF: sub_4026C0+53↑p
.text:00411310                                         ; sub_402EC0+23F↑p ...
.text:00411310
.text:00411310 Str1            = dword ptr  4
.text:00411310 Str2            = dword ptr  8
.text:00411310 MaxCount        = dword ptr  0Ch
.text:00411310
.text:00411310                 jmp     ds:__imp_strncmp
.text:00411310 strncmp         endp
.text:00411310
.text:00411310 ; ---------------------------------------------------------------------------
.text:00411316                 align 10h
.text:00411320
.text:00411320 ; =============== S U B R O U T I N E =======================================
.text:00411320
.text:00411320 ; Attributes: thunk
.text:00411320
.text:00411320 ; size_t __cdecl strlen(const char *Str)
.text:00411320 strlen          proc near               ; CODE XREF: sub_4026C0+21↑p
.text:00411320                                         ; sub_4026C0+90↑p ...
.text:00411320
.text:00411320 Str             = dword ptr  4
.text:00411320
.text:00411320                 jmp     ds:__imp_strlen
.text:00411320 strlen          endp
.text:00411320
.text:00411320 ; ---------------------------------------------------------------------------
.text:00411326                 align 10h
.text:00411330
.text:00411330 ; =============== S U B R O U T I N E =======================================
.text:00411330
.text:00411330 ; Attributes: thunk
.text:00411330
.text:00411330 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00411330 _flsbuf         proc near               ; CODE XREF: .text:004029A9↑j
.text:00411330                                         ; sub_4029E0+1C3↑p ...
.text:00411330
.text:00411330 File            = dword ptr  8
.text:00411330
.text:00411330                 jmp     ds:__imp__flsbuf
.text:00411330 _flsbuf         endp
.text:00411330
.text:00411330 ; ---------------------------------------------------------------------------
.text:00411336                 align 10h
.text:00411340
.text:00411340 ; =============== S U B R O U T I N E =======================================
.text:00411340
.text:00411340 ; Attributes: thunk
.text:00411340
.text:00411340 ; char *__cdecl strchr(const char *Str, int Val)
.text:00411340 strchr          proc near               ; CODE XREF: sub_402EC0+469↑p
.text:00411340                                         ; sub_402EC0+53A↑p ...
.text:00411340
.text:00411340 Str             = dword ptr  4
.text:00411340 Val             = dword ptr  8
.text:00411340
.text:00411340                 jmp     ds:__imp_strchr
.text:00411340 strchr          endp
.text:00411340
.text:00411340 ; ---------------------------------------------------------------------------
.text:00411346                 align 10h
.text:00411350
.text:00411350 ; =============== S U B R O U T I N E =======================================
.text:00411350
.text:00411350 ; Attributes: thunk
.text:00411350
.text:00411350 ; __time32_t __cdecl time(__time32_t *const Time)
.text:00411350 time            proc near               ; CODE XREF: sub_403C90+66↑p
.text:00411350                                         ; sub_4045A0+5D↑p
.text:00411350
.text:00411350 Time            = dword ptr  4
.text:00411350
.text:00411350                 jmp     ds:__imp_time
.text:00411350 time            endp
.text:00411350
.text:00411350 ; ---------------------------------------------------------------------------
.text:00411356                 align 10h
.text:00411360
.text:00411360 ; =============== S U B R O U T I N E =======================================
.text:00411360
.text:00411360 ; Attributes: thunk
.text:00411360
.text:00411360 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00411360 strtol          proc near               ; CODE XREF: sub_403D20+43↑p
.text:00411360
.text:00411360 String          = dword ptr  4
.text:00411360 EndPtr          = dword ptr  8
.text:00411360 Radix           = dword ptr  0Ch
.text:00411360
.text:00411360                 jmp     ds:__imp_strtol
.text:00411360 strtol          endp
.text:00411360
.text:00411360 ; ---------------------------------------------------------------------------
.text:00411366                 align 10h
.text:00411370
.text:00411370 ; =============== S U B R O U T I N E =======================================
.text:00411370
.text:00411370 ; Attributes: thunk
.text:00411370
.text:00411370 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00411370 vfprintf        proc near               ; CODE XREF: sub_404070+C1↑p
.text:00411370                                         ; sub_409010+49↑p ...
.text:00411370
.text:00411370 Stream          = dword ptr  4
.text:00411370 Format          = dword ptr  8
.text:00411370 ArgList         = dword ptr  0Ch
.text:00411370
.text:00411370                 jmp     ds:__imp_vfprintf
.text:00411370 vfprintf        endp
.text:00411370
.text:00411370 ; ---------------------------------------------------------------------------
.text:00411376                 align 10h
.text:00411380
.text:00411380 ; =============== S U B R O U T I N E =======================================
.text:00411380
.text:00411380 ; Attributes: noreturn thunk
.text:00411380
.text:00411380 ; void __cdecl __noreturn abort()
.text:00411380 abort           proc near               ; CODE XREF: sub_404070:loc_40410C↑p
.text:00411380                                         ; sub_4045A0:loc_40462F↑p ...
.text:00411380                 jmp     ds:__imp_abort
.text:00411380 abort           endp
.text:00411380
.text:00411380 ; ---------------------------------------------------------------------------
.text:00411386                 align 10h
.text:00411390
.text:00411390 ; =============== S U B R O U T I N E =======================================
.text:00411390
.text:00411390 ; Attributes: thunk
.text:00411390
.text:00411390 ; __time32_t __cdecl mktime(struct tm *const Tm)
.text:00411390 mktime          proc near               ; CODE XREF: sub_404280+94↑p
.text:00411390                                         ; sub_406830+49A↑p ...
.text:00411390
.text:00411390 Tm              = dword ptr  4
.text:00411390
.text:00411390                 jmp     ds:__imp_mktime
.text:00411390 mktime          endp
.text:00411390
.text:00411390 ; ---------------------------------------------------------------------------
.text:00411396                 align 10h
.text:004113A0
.text:004113A0 ; =============== S U B R O U T I N E =======================================
.text:004113A0
.text:004113A0 ; Attributes: thunk
.text:004113A0
.text:004113A0 ; int __cdecl fclose(FILE *Stream)
.text:004113A0 fclose          proc near               ; CODE XREF: sub_4047B0+27↑p
.text:004113A0                                         ; .text:0040E7DE↑p
.text:004113A0
.text:004113A0 Stream          = dword ptr  4
.text:004113A0
.text:004113A0                 jmp     ds:__imp_fclose
.text:004113A0 fclose          endp
.text:004113A0
.text:004113A0 ; ---------------------------------------------------------------------------
.text:004113A6                 align 10h
.text:004113B0
.text:004113B0 ; =============== S U B R O U T I N E =======================================
.text:004113B0
.text:004113B0 ; Attributes: thunk
.text:004113B0
.text:004113B0 ; struct tm *__cdecl gmtime(const __time32_t *const Time)
.text:004113B0 gmtime          proc near               ; CODE XREF: sub_406830+972↑p
.text:004113B0
.text:004113B0 Time            = dword ptr  4
.text:004113B0
.text:004113B0                 jmp     ds:__imp_gmtime
.text:004113B0 gmtime          endp
.text:004113B0
.text:004113B0 ; ---------------------------------------------------------------------------
.text:004113B6                 align 10h
.text:004113C0
.text:004113C0 ; =============== S U B R O U T I N E =======================================
.text:004113C0
.text:004113C0 ; Attributes: thunk
.text:004113C0
.text:004113C0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:004113C0 sprintf         proc near               ; CODE XREF: sub_406830+574↑p
.text:004113C0                                         ; .text:0040D29A↑p ...
.text:004113C0
.text:004113C0 Buffer          = dword ptr  4
.text:004113C0 Format          = dword ptr  8
.text:004113C0
.text:004113C0                 jmp     ds:__imp_sprintf
.text:004113C0 sprintf         endp
.text:004113C0
.text:004113C0 ; ---------------------------------------------------------------------------
.text:004113C6                 align 10h
.text:004113D0
.text:004113D0 ; =============== S U B R O U T I N E =======================================
.text:004113D0
.text:004113D0 ; Attributes: thunk
.text:004113D0
.text:004113D0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004113D0 memcpy          proc near               ; CODE XREF: sub_404E00+BF↑p
.text:004113D0                                         ; sub_406830+B09↑p ...
.text:004113D0
.text:004113D0 Src             = dword ptr  8
.text:004113D0 Size            = dword ptr  0Ch
.text:004113D0
.text:004113D0                 jmp     ds:__imp_memcpy
.text:004113D0 memcpy          endp
.text:004113D0
.text:004113D0 ; ---------------------------------------------------------------------------
.text:004113D6                 align 10h
.text:004113E0
.text:004113E0 ; =============== S U B R O U T I N E =======================================
.text:004113E0
.text:004113E0 ; Attributes: thunk
.text:004113E0
.text:004113E0 ; int __cdecl toupper(int C)
.text:004113E0 toupper         proc near               ; CODE XREF: sub_4075C0+2FD↑p
.text:004113E0                                         ; sub_40B980+10E↑p
.text:004113E0
.text:004113E0 C               = dword ptr  4
.text:004113E0
.text:004113E0                 jmp     ds:__imp_toupper
.text:004113E0 toupper         endp
.text:004113E0
.text:004113E0 ; ---------------------------------------------------------------------------
.text:004113E6                 align 10h
.text:004113F0
.text:004113F0 ; =============== S U B R O U T I N E =======================================
.text:004113F0
.text:004113F0 ; Attributes: thunk
.text:004113F0
.text:004113F0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004113F0 strcmp          proc near               ; CODE XREF: sub_406830+C07↑p
.text:004113F0                                         ; sub_4075C0+77↑p ...
.text:004113F0
.text:004113F0 Str1            = dword ptr  4
.text:004113F0 Str2            = dword ptr  8
.text:004113F0
.text:004113F0                 jmp     ds:__imp_strcmp
.text:004113F0 strcmp          endp
.text:004113F0
.text:004113F0 ; ---------------------------------------------------------------------------
.text:004113F6                 align 10h
.text:00411400
.text:00411400 ; =============== S U B R O U T I N E =======================================
.text:00411400
.text:00411400 ; Attributes: thunk
.text:00411400
.text:00411400 ; void __cdecl free(void *Block)
.text:00411400 free            proc near               ; CODE XREF: sub_404E00+140↑p
.text:00411400                                         ; sub_404E00+B1A↑p ...
.text:00411400
.text:00411400 Block           = dword ptr  4
.text:00411400
.text:00411400                 jmp     ds:__imp_free
.text:00411400 free            endp
.text:00411400
.text:00411400 ; ---------------------------------------------------------------------------
.text:00411406                 align 10h
.text:00411410
.text:00411410 ; =============== S U B R O U T I N E =======================================
.text:00411410
.text:00411410 ; Attributes: thunk
.text:00411410
.text:00411410 ; void *__cdecl malloc(size_t Size)
.text:00411410 malloc          proc near               ; CODE XREF: sub_404E00+95↑p
.text:00411410                                         ; sub_408C90+24↑p ...
.text:00411410
.text:00411410 Size            = dword ptr  4
.text:00411410
.text:00411410                 jmp     ds:__imp_malloc
.text:00411410 malloc          endp
.text:00411410
.text:00411410 ; ---------------------------------------------------------------------------
.text:00411416                 align 10h
.text:00411420
.text:00411420 ; =============== S U B R O U T I N E =======================================
.text:00411420
.text:00411420 ; Attributes: thunk
.text:00411420
.text:00411420 ; int __cdecl isctype(int C, int Type)
.text:00411420 _isctype        proc near               ; CODE XREF: sub_406420+32↑p
.text:00411420                                         ; sub_406420+7A↑p ...
.text:00411420
.text:00411420 C               = dword ptr  4
.text:00411420 Type            = dword ptr  8
.text:00411420
.text:00411420                 jmp     ds:__imp__isctype
.text:00411420 _isctype        endp
.text:00411420
.text:00411420 ; ---------------------------------------------------------------------------
.text:00411426                 align 10h
.text:00411430
.text:00411430 ; =============== S U B R O U T I N E =======================================
.text:00411430
.text:00411430 ; Attributes: thunk
.text:00411430
.text:00411430 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00411430 iswctype        proc near               ; CODE XREF: sub_407980+78B↑p
.text:00411430
.text:00411430 C               = word ptr  4
.text:00411430 Type            = word ptr  8
.text:00411430
.text:00411430                 jmp     ds:__imp_iswctype
.text:00411430 iswctype        endp
.text:00411430
.text:00411430 ; ---------------------------------------------------------------------------
.text:00411436                 align 10h
.text:00411440
.text:00411440 ; =============== S U B R O U T I N E =======================================
.text:00411440
.text:00411440 ; Attributes: thunk
.text:00411440
.text:00411440 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00411440 memset          proc near               ; CODE XREF: .text:00408DF6↑p
.text:00411440
.text:00411440 Val             = dword ptr  8
.text:00411440 Size            = dword ptr  0Ch
.text:00411440
.text:00411440                 jmp     ds:__imp_memset
.text:00411440 memset          endp
.text:00411440
.text:00411440 ; ---------------------------------------------------------------------------
.text:00411446                 align 10h
.text:00411450
.text:00411450 ; =============== S U B R O U T I N E =======================================
.text:00411450
.text:00411450 ; Attributes: thunk
.text:00411450
.text:00411450 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00411450 calloc          proc near               ; CODE XREF: .text:00408E33↑p
.text:00411450                                         ; sub_40B980+AC↑p
.text:00411450
.text:00411450 Count           = dword ptr  4
.text:00411450 Size            = dword ptr  8
.text:00411450
.text:00411450                 jmp     ds:__imp_calloc
.text:00411450 calloc          endp
.text:00411450
.text:00411450 ; ---------------------------------------------------------------------------
.text:00411456                 align 10h
.text:00411460
.text:00411460 ; =============== S U B R O U T I N E =======================================
.text:00411460
.text:00411460 ; Attributes: thunk
.text:00411460
.text:00411460 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00411460 realloc         proc near               ; CODE XREF: .text:00408D30↑p
.text:00411460                                         ; sub_408D60+16↑p ...
.text:00411460
.text:00411460 Block           = dword ptr  4
.text:00411460 Size            = dword ptr  8
.text:00411460
.text:00411460                 jmp     ds:__imp_realloc
.text:00411460 realloc         endp
.text:00411460
.text:00411460 ; ---------------------------------------------------------------------------
.text:00411466                 align 10h
.text:00411470
.text:00411470 ; =============== S U B R O U T I N E =======================================
.text:00411470
.text:00411470 ; Attributes: thunk
.text:00411470
.text:00411470 ; int __cdecl fflush(FILE *Stream)
.text:00411470 fflush          proc near               ; CODE XREF: sub_409010+19↑p
.text:00411470                                         ; sub_409010+81↑p ...
.text:00411470
.text:00411470 Stream          = dword ptr  4
.text:00411470
.text:00411470                 jmp     ds:__imp_fflush
.text:00411470 fflush          endp
.text:00411470
.text:00411470 ; ---------------------------------------------------------------------------
.text:00411476                 align 10h
.text:00411480
.text:00411480 ; =============== S U B R O U T I N E =======================================
.text:00411480
.text:00411480 ; Attributes: thunk
.text:00411480
.text:00411480 ; char *__cdecl strerror(int ErrorMessage)
.text:00411480 strerror        proc near               ; CODE XREF: sub_409010+A5↑p
.text:00411480                                         ; sub_409114+10F↑p
.text:00411480
.text:00411480 ErrorMessage    = dword ptr  4
.text:00411480
.text:00411480                 jmp     ds:__imp_strerror
.text:00411480 strerror        endp
.text:00411480
.text:00411480 ; ---------------------------------------------------------------------------
.text:00411486                 align 10h
.text:00411490
.text:00411490 ; =============== S U B R O U T I N E =======================================
.text:00411490
.text:00411490 ; Attributes: thunk
.text:00411490
.text:00411490 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00411490 ctime           proc near               ; CODE XREF: .text:0040947D↑p
.text:00411490                                         ; .text:0040949F↑p ...
.text:00411490
.text:00411490 Time            = dword ptr  4
.text:00411490
.text:00411490                 jmp     ds:__imp_ctime
.text:00411490 ctime           endp
.text:00411490
.text:00411490 ; ---------------------------------------------------------------------------
.text:00411496                 align 10h
.text:004114A0
.text:004114A0 ; =============== S U B R O U T I N E =======================================
.text:004114A0
.text:004114A0 ; Attributes: thunk
.text:004114A0
.text:004114A0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:004114A0 _get_osfhandle  proc near               ; CODE XREF: sub_409520+3A↑p
.text:004114A0                                         ; sub_40C970+A↑p ...
.text:004114A0
.text:004114A0 FileHandle      = dword ptr  4
.text:004114A0
.text:004114A0                 jmp     ds:__imp__get_osfhandle
.text:004114A0 _get_osfhandle  endp
.text:004114A0
.text:004114A0 ; ---------------------------------------------------------------------------
.text:004114A6                 align 10h
.text:004114B0
.text:004114B0 ; =============== S U B R O U T I N E =======================================
.text:004114B0
.text:004114B0 ; Attributes: thunk
.text:004114B0
.text:004114B0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004114B0 strcat          proc near               ; CODE XREF: sub_409780+98↑p
.text:004114B0                                         ; sub_40C9B0+AD↑p ...
.text:004114B0
.text:004114B0 Destination     = dword ptr  4
.text:004114B0 Source          = dword ptr  8
.text:004114B0
.text:004114B0                 jmp     ds:__imp_strcat
.text:004114B0 strcat          endp
.text:004114B0
.text:004114B0 ; ---------------------------------------------------------------------------
.text:004114B6                 align 10h
.text:004114C0
.text:004114C0 ; =============== S U B R O U T I N E =======================================
.text:004114C0
.text:004114C0 ; Attributes: thunk
.text:004114C0
.text:004114C0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004114C0 strcpy          proc near               ; CODE XREF: sub_409780+73↑p
.text:004114C0                                         ; _win32_longpath+13C↑p ...
.text:004114C0
.text:004114C0 Destination     = dword ptr  4
.text:004114C0 Source          = dword ptr  8
.text:004114C0
.text:004114C0                 jmp     ds:__imp_strcpy
.text:004114C0 strcpy          endp
.text:004114C0
.text:004114C0 ; ---------------------------------------------------------------------------
.text:004114C6                 align 10h
.text:004114D0
.text:004114D0 ; =============== S U B R O U T I N E =======================================
.text:004114D0
.text:004114D0 ; Attributes: thunk
.text:004114D0
.text:004114D0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:004114D0 strstr          proc near               ; CODE XREF: sub_409DD0+3BF↑p
.text:004114D0                                         ; sub_409DD0+3DC↑p ...
.text:004114D0
.text:004114D0 Str             = dword ptr  4
.text:004114D0 SubStr          = dword ptr  8
.text:004114D0
.text:004114D0                 jmp     ds:__imp_strstr
.text:004114D0 strstr          endp
.text:004114D0
.text:004114D0 ; ---------------------------------------------------------------------------
.text:004114D6                 align 10h
.text:004114E0
.text:004114E0 ; =============== S U B R O U T I N E =======================================
.text:004114E0
.text:004114E0 ; Attributes: thunk
.text:004114E0
.text:004114E0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004114E0 strrchr         proc near               ; CODE XREF: sub_409DD0+CB↑p
.text:004114E0                                         ; sub_409DD0+3A7↑p ...
.text:004114E0
.text:004114E0 Str             = dword ptr  4
.text:004114E0
.text:004114E0                 jmp     ds:__imp_strrchr
.text:004114E0 strrchr         endp
.text:004114E0
.text:004114E0 ; ---------------------------------------------------------------------------
.text:004114E6                 align 10h
.text:004114F0
.text:004114F0 ; =============== S U B R O U T I N E =======================================
.text:004114F0
.text:004114F0 ; Attributes: thunk
.text:004114F0
.text:004114F0 ; int __cdecl isalpha(int C)
.text:004114F0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:004114F0
.text:004114F0 C               = dword ptr  4
.text:004114F0
.text:004114F0                 jmp     ds:__imp_isalpha
.text:004114F0 isalpha         endp
.text:004114F0
.text:004114F0 ; ---------------------------------------------------------------------------
.text:004114F6                 align 10h
.text:00411500
.text:00411500 ; =============== S U B R O U T I N E =======================================
.text:00411500
.text:00411500 ; Attributes: thunk
.text:00411500
.text:00411500 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00411500 _stricmp_0      proc near               ; CODE XREF: .text:0040B7F4↑p
.text:00411500
.text:00411500 String1         = dword ptr  4
.text:00411500 String2         = dword ptr  8
.text:00411500
.text:00411500                 jmp     ds:__imp__stricmp_0
.text:00411500 _stricmp_0      endp
.text:00411500
.text:00411500 ; ---------------------------------------------------------------------------
.text:00411506                 align 10h
.text:00411510
.text:00411510 ; =============== S U B R O U T I N E =======================================
.text:00411510
.text:00411510 ; Attributes: thunk
.text:00411510
.text:00411510 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00411510 strncpy         proc near               ; CODE XREF: sub_40B980+BE↑p
.text:00411510                                         ; .text:0040C22A↑p ...
.text:00411510
.text:00411510 Destination     = dword ptr  4
.text:00411510 Source          = dword ptr  8
.text:00411510 Count           = dword ptr  0Ch
.text:00411510
.text:00411510                 jmp     ds:__imp_strncpy
.text:00411510 strncpy         endp
.text:00411510
.text:00411510 ; ---------------------------------------------------------------------------
.text:00411516                 align 10h
.text:00411520
.text:00411520 ; =============== S U B R O U T I N E =======================================
.text:00411520
.text:00411520 ; Attributes: thunk
.text:00411520
.text:00411520 ; int __cdecl putenv(const char *EnvString)
.text:00411520 _putenv         proc near               ; CODE XREF: sub_40C9B0+C1↑p
.text:00411520                                         ; sub_40CA90+85↑p
.text:00411520
.text:00411520 EnvString       = dword ptr  4
.text:00411520
.text:00411520                 jmp     ds:__imp__putenv
.text:00411520 _putenv         endp
.text:00411520
.text:00411520 ; ---------------------------------------------------------------------------
.text:00411526                 align 10h
.text:00411530
.text:00411530 ; =============== S U B R O U T I N E =======================================
.text:00411530
.text:00411530 ; Attributes: thunk
.text:00411530
.text:00411530 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00411530 sscanf          proc near               ; CODE XREF: .text:0040DE1E↑p
.text:00411530
.text:00411530 Buffer          = dword ptr  4
.text:00411530 Format          = dword ptr  8
.text:00411530
.text:00411530                 jmp     ds:__imp_sscanf
.text:00411530 sscanf          endp
.text:00411530
.text:00411530 ; ---------------------------------------------------------------------------
.text:00411536                 align 10h
.text:00411540
.text:00411540 ; =============== S U B R O U T I N E =======================================
.text:00411540
.text:00411540 ; Attributes: thunk
.text:00411540
.text:00411540 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00411540 strspn          proc near               ; CODE XREF: .text:0040DC6A↑p
.text:00411540                                         ; .text:0040DE84↑p ...
.text:00411540
.text:00411540 Str             = dword ptr  4
.text:00411540 Control         = dword ptr  8
.text:00411540
.text:00411540                 jmp     ds:__imp_strspn
.text:00411540 strspn          endp
.text:00411540
.text:00411540 ; ---------------------------------------------------------------------------
.text:00411546                 align 10h
.text:00411550
.text:00411550 ; =============== S U B R O U T I N E =======================================
.text:00411550
.text:00411550 ; Attributes: thunk
.text:00411550
.text:00411550 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00411550 fopen           proc near               ; CODE XREF: sub_40E71F+26↑p
.text:00411550                                         ; sub_40E71F+99↑p
.text:00411550
.text:00411550 FileName        = dword ptr  4
.text:00411550 Mode            = dword ptr  8
.text:00411550
.text:00411550                 jmp     ds:__imp_fopen
.text:00411550 fopen           endp
.text:00411550
.text:00411550 ; ---------------------------------------------------------------------------
.text:00411556                 align 10h
.text:00411560
.text:00411560 ; =============== S U B R O U T I N E =======================================
.text:00411560
.text:00411560 ; Attributes: thunk
.text:00411560
.text:00411560 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00411560 _filelengthi64  proc near               ; CODE XREF: sub_40EE50+1F↑p
.text:00411560
.text:00411560 FileHandle      = dword ptr  4
.text:00411560
.text:00411560                 jmp     ds:__imp__filelengthi64
.text:00411560 _filelengthi64  endp
.text:00411560
.text:00411560 ; ---------------------------------------------------------------------------
.text:00411566                 align 10h
.text:00411570
.text:00411570 ; =============== S U B R O U T I N E =======================================
.text:00411570
.text:00411570 ; Attributes: thunk
.text:00411570
.text:00411570 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00411570 strpbrk         proc near               ; CODE XREF: sub_40EEB0+87↑p
.text:00411570
.text:00411570 Str             = dword ptr  4
.text:00411570 Control         = dword ptr  8
.text:00411570
.text:00411570                 jmp     ds:__imp_strpbrk
.text:00411570 strpbrk         endp
.text:00411570
.text:00411570 ; ---------------------------------------------------------------------------
.text:00411576                 align 10h
.text:00411580
.text:00411580 ; =============== S U B R O U T I N E =======================================
.text:00411580
.text:00411580 ; Attributes: thunk
.text:00411580
.text:00411580 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00411580 _fdopen         proc near               ; CODE XREF: sub_40EF50+69↑p
.text:00411580
.text:00411580 FileHandle      = dword ptr  4
.text:00411580 Format          = dword ptr  8
.text:00411580
.text:00411580                 jmp     ds:__imp__fdopen
.text:00411580 _fdopen         endp
.text:00411580
.text:00411580 ; ---------------------------------------------------------------------------
.text:00411586                 align 10h
.text:00411590
.text:00411590 ; =============== S U B R O U T I N E =======================================
.text:00411590
.text:00411590 ; Attributes: thunk
.text:00411590
.text:00411590 ; int __cdecl close_0(int FileHandle)
.text:00411590 _close_0        proc near               ; CODE XREF: sub_40EF50+90↑p
.text:00411590
.text:00411590 FileHandle      = dword ptr  4
.text:00411590
.text:00411590                 jmp     ds:__imp__close_0
.text:00411590 _close_0        endp
.text:00411590
.text:00411590 ; ---------------------------------------------------------------------------
.text:00411596                 align 10h
.text:004115A0
.text:004115A0 ; =============== S U B R O U T I N E =======================================
.text:004115A0
.text:004115A0 ; Attributes: thunk
.text:004115A0
.text:004115A0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004115A0 _open_0         proc near               ; CODE XREF: sub_40F3A0:loc_40F730↑p
.text:004115A0
.text:004115A0 FileName        = dword ptr  4
.text:004115A0 OpenFlag        = dword ptr  8
.text:004115A0
.text:004115A0                 jmp     ds:__imp__open_0
.text:004115A0 _open_0         endp
.text:004115A0
.text:004115A0 ; ---------------------------------------------------------------------------
.text:004115A6                 align 10h
.text:004115B0
.text:004115B0 ; =============== S U B R O U T I N E =======================================
.text:004115B0
.text:004115B0 ; Attributes: noreturn thunk
.text:004115B0
.text:004115B0 _assert         proc near               ; CODE XREF: sub_40F3A0+414↑p
.text:004115B0                 jmp     ds:__imp__assert
.text:004115B0 _assert         endp
.text:004115B0
.text:004115B0 ; ---------------------------------------------------------------------------
.text:004115B6                 align 10h
.text:004115C0
.text:004115C0 ; =============== S U B R O U T I N E =======================================
.text:004115C0
.text:004115C0 ; Attributes: thunk
.text:004115C0
.text:004115C0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004115C0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004115C0
.text:004115C0 lpTopLevelExceptionFilter= dword ptr  4
.text:004115C0
.text:004115C0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004115C0 SetUnhandledExceptionFilter endp
.text:004115C0
.text:004115C0 ; ---------------------------------------------------------------------------
.text:004115C6                 align 10h
.text:004115D0
.text:004115D0 ; =============== S U B R O U T I N E =======================================
.text:004115D0
.text:004115D0 ; Attributes: noreturn thunk
.text:004115D0
.text:004115D0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004115D0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004115D0
.text:004115D0 uExitCode       = dword ptr  4
.text:004115D0
.text:004115D0                 jmp     ds:__imp_ExitProcess
.text:004115D0 ExitProcess     endp
.text:004115D0
.text:004115D0 ; ---------------------------------------------------------------------------
.text:004115D6                 align 10h
.text:004115E0
.text:004115E0 ; =============== S U B R O U T I N E =======================================
.text:004115E0
.text:004115E0 ; Attributes: thunk
.text:004115E0
.text:004115E0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:004115E0 GetModuleHandleA proc near              ; CODE XREF: sub_409610+18↑p
.text:004115E0                                         ; sub_409DD0+329↑p ...
.text:004115E0
.text:004115E0 lpModuleName    = dword ptr  4
.text:004115E0
.text:004115E0                 jmp     ds:__imp_GetModuleHandleA
.text:004115E0 GetModuleHandleA endp
.text:004115E0
.text:004115E0 ; ---------------------------------------------------------------------------
.text:004115E6                 align 10h
.text:004115F0
.text:004115F0 ; =============== S U B R O U T I N E =======================================
.text:004115F0
.text:004115F0 ; Attributes: thunk
.text:004115F0
.text:004115F0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:004115F0 GetProcAddress  proc near               ; CODE XREF: sub_409610+33↑p
.text:004115F0                                         ; sub_409780+2E↑p ...
.text:004115F0
.text:004115F0 hModule         = dword ptr  4
.text:004115F0 lpProcName      = dword ptr  8
.text:004115F0
.text:004115F0                 jmp     ds:__imp_GetProcAddress
.text:004115F0 GetProcAddress  endp
.text:004115F0
.text:004115F0 ; ---------------------------------------------------------------------------
.text:004115F6                 align 10h
.text:00411600
.text:00411600 ; =============== S U B R O U T I N E =======================================
.text:00411600
.text:00411600 ; Attributes: thunk
.text:00411600
.text:00411600 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00411600 GetFileAttributesA proc near            ; CODE XREF: sub_409610+47↑p
.text:00411600                                         ; sub_40CFA0+62↑p ...
.text:00411600
.text:00411600 lpFileName      = dword ptr  4
.text:00411600
.text:00411600                 jmp     ds:__imp_GetFileAttributesA
.text:00411600 GetFileAttributesA endp
.text:00411600
.text:00411600 ; ---------------------------------------------------------------------------
.text:00411606                 align 10h
.text:00411610
.text:00411610 ; =============== S U B R O U T I N E =======================================
.text:00411610
.text:00411610 ; Attributes: thunk
.text:00411610
.text:00411610 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00411610 FreeLibrary     proc near               ; CODE XREF: sub_409610+A4↑p
.text:00411610                                         ; sub_409780+11D↑p ...
.text:00411610
.text:00411610 hLibModule      = dword ptr  4
.text:00411610
.text:00411610                 jmp     ds:__imp_FreeLibrary
.text:00411610 FreeLibrary     endp
.text:00411610
.text:00411610 ; ---------------------------------------------------------------------------
.text:00411616                 align 10h
.text:00411620
.text:00411620 ; =============== S U B R O U T I N E =======================================
.text:00411620
.text:00411620 ; Attributes: thunk
.text:00411620
.text:00411620 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00411620 FindFirstFileA  proc near               ; CODE XREF: sub_409610+CE↑p
.text:00411620                                         ; sub_409780+14F↑p ...
.text:00411620
.text:00411620 lpFileName      = dword ptr  4
.text:00411620 lpFindFileData  = dword ptr  8
.text:00411620
.text:00411620                 jmp     ds:__imp_FindFirstFileA
.text:00411620 FindFirstFileA  endp
.text:00411620
.text:00411620 ; ---------------------------------------------------------------------------
.text:00411626                 align 10h
.text:00411630
.text:00411630 ; =============== S U B R O U T I N E =======================================
.text:00411630
.text:00411630 ; Attributes: thunk
.text:00411630
.text:00411630 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00411630 FindClose       proc near               ; CODE XREF: sub_409610+123↑p
.text:00411630                                         ; sub_409780+10E↑p ...
.text:00411630
.text:00411630 hFindFile       = dword ptr  4
.text:00411630
.text:00411630                 jmp     ds:__imp_FindClose
.text:00411630 FindClose       endp
.text:00411630
.text:00411630 ; ---------------------------------------------------------------------------
.text:00411636                 align 10h
.text:00411640
.text:00411640 ; =============== S U B R O U T I N E =======================================
.text:00411640
.text:00411640 ; Attributes: thunk
.text:00411640
.text:00411640 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00411640 LoadLibraryA    proc near               ; CODE XREF: sub_409780+13↑p
.text:00411640                                         ; sub_409DD0+134↑p ...
.text:00411640
.text:00411640 lpLibFileName   = dword ptr  4
.text:00411640
.text:00411640                 jmp     ds:__imp_LoadLibraryA
.text:00411640 LoadLibraryA    endp
.text:00411640
.text:00411640 ; ---------------------------------------------------------------------------
.text:00411646                 align 10h
.text:00411650
.text:00411650 ; =============== S U B R O U T I N E =======================================
.text:00411650
.text:00411650 ; Attributes: thunk
.text:00411650
.text:00411650 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00411650 FindNextFileA   proc near               ; CODE XREF: sub_409780+FF↑p
.text:00411650
.text:00411650 hFindFile       = dword ptr  4
.text:00411650 lpFindFileData  = dword ptr  8
.text:00411650
.text:00411650                 jmp     ds:__imp_FindNextFileA
.text:00411650 FindNextFileA   endp
.text:00411650
.text:00411650 ; ---------------------------------------------------------------------------
.text:00411656                 align 10h
.text:00411660
.text:00411660 ; =============== S U B R O U T I N E =======================================
.text:00411660
.text:00411660 ; Attributes: thunk
.text:00411660
.text:00411660 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00411660 GetFileType     proc near               ; CODE XREF: sub_409900+43↑p
.text:00411660                                         ; .text:0040A5BA↑p
.text:00411660
.text:00411660 hFile           = dword ptr  4
.text:00411660
.text:00411660                 jmp     ds:__imp_GetFileType
.text:00411660 GetFileType     endp
.text:00411660
.text:00411660 ; ---------------------------------------------------------------------------
.text:00411666                 align 10h
.text:00411670
.text:00411670 ; =============== S U B R O U T I N E =======================================
.text:00411670
.text:00411670 ; Attributes: thunk
.text:00411670
.text:00411670 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00411670 GetFileInformationByHandle proc near    ; CODE XREF: sub_409900+69↑p
.text:00411670
.text:00411670 hFile           = dword ptr  4
.text:00411670 lpFileInformation= dword ptr  8
.text:00411670
.text:00411670                 jmp     ds:__imp_GetFileInformationByHandle
.text:00411670 GetFileInformationByHandle endp
.text:00411670
.text:00411670 ; ---------------------------------------------------------------------------
.text:00411676                 align 10h
.text:00411680
.text:00411680 ; =============== S U B R O U T I N E =======================================
.text:00411680
.text:00411680 ; Attributes: thunk
.text:00411680
.text:00411680 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00411680 GetFileSize     proc near               ; CODE XREF: sub_409900+3F2↑p
.text:00411680
.text:00411680 hFile           = dword ptr  4
.text:00411680 lpFileSizeHigh  = dword ptr  8
.text:00411680
.text:00411680                 jmp     ds:__imp_GetFileSize
.text:00411680 GetFileSize     endp
.text:00411680
.text:00411680 ; ---------------------------------------------------------------------------
.text:00411686                 align 10h
.text:00411690
.text:00411690 ; =============== S U B R O U T I N E =======================================
.text:00411690
.text:00411690 ; Attributes: thunk
.text:00411690
.text:00411690 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00411690 PeekNamedPipe   proc near               ; CODE XREF: sub_409900+439↑p
.text:00411690
.text:00411690 hNamedPipe      = dword ptr  4
.text:00411690 lpBuffer        = dword ptr  8
.text:00411690 nBufferSize     = dword ptr  0Ch
.text:00411690 lpBytesRead     = dword ptr  10h
.text:00411690 lpTotalBytesAvail= dword ptr  14h
.text:00411690 lpBytesLeftThisMessage= dword ptr  18h
.text:00411690
.text:00411690                 jmp     ds:__imp_PeekNamedPipe
.text:00411690 PeekNamedPipe   endp
.text:00411690
.text:00411690 ; ---------------------------------------------------------------------------
.text:00411696                 align 10h
.text:004116A0
.text:004116A0 ; =============== S U B R O U T I N E =======================================
.text:004116A0
.text:004116A0 ; Attributes: thunk
.text:004116A0
.text:004116A0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:004116A0 GetDriveTypeA   proc near               ; CODE XREF: sub_409DD0+4C↑p
.text:004116A0
.text:004116A0 lpRootPathName  = dword ptr  4
.text:004116A0
.text:004116A0                 jmp     ds:__imp_GetDriveTypeA
.text:004116A0 GetDriveTypeA   endp
.text:004116A0
.text:004116A0 ; ---------------------------------------------------------------------------
.text:004116A6                 align 10h
.text:004116B0
.text:004116B0 ; =============== S U B R O U T I N E =======================================
.text:004116B0
.text:004116B0 ; Attributes: thunk
.text:004116B0
.text:004116B0 ; DWORD __stdcall GetLastError()
.text:004116B0 GetLastError    proc near               ; CODE XREF: sub_409DD0:loc_40A059↑p
.text:004116B0                                         ; .text:loc_40AB9D↑p ...
.text:004116B0                 jmp     ds:__imp_GetLastError
.text:004116B0 GetLastError    endp
.text:004116B0
.text:004116B0 ; ---------------------------------------------------------------------------
.text:004116B6                 align 10h
.text:004116C0
.text:004116C0 ; =============== S U B R O U T I N E =======================================
.text:004116C0
.text:004116C0 ; Attributes: thunk
.text:004116C0
.text:004116C0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:004116C0 GetVolumeInformationA proc near         ; CODE XREF: sub_40A2D0+64↑p
.text:004116C0                                         ; .text:0040A87C↑p ...
.text:004116C0
.text:004116C0 lpRootPathName  = dword ptr  4
.text:004116C0 lpVolumeNameBuffer= dword ptr  8
.text:004116C0 nVolumeNameSize = dword ptr  0Ch
.text:004116C0 lpVolumeSerialNumber= dword ptr  10h
.text:004116C0 lpMaximumComponentLength= dword ptr  14h
.text:004116C0 lpFileSystemFlags= dword ptr  18h
.text:004116C0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:004116C0 nFileSystemNameSize= dword ptr  20h
.text:004116C0
.text:004116C0                 jmp     ds:__imp_GetVolumeInformationA
.text:004116C0 GetVolumeInformationA endp
.text:004116C0
.text:004116C0 ; ---------------------------------------------------------------------------
.text:004116C6                 align 10h
.text:004116D0
.text:004116D0 ; =============== S U B R O U T I N E =======================================
.text:004116D0
.text:004116D0 ; Attributes: thunk
.text:004116D0
.text:004116D0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:004116D0 CreateFileA     proc near               ; CODE XREF: sub_40ECA0-3C3A↑p
.text:004116D0                                         ; .text:0040BFA3↑p ...
.text:004116D0
.text:004116D0 lpFileName      = dword ptr  4
.text:004116D0 dwDesiredAccess = dword ptr  8
.text:004116D0 dwShareMode     = dword ptr  0Ch
.text:004116D0 lpSecurityAttributes= dword ptr  10h
.text:004116D0 dwCreationDisposition= dword ptr  14h
.text:004116D0 dwFlagsAndAttributes= dword ptr  18h
.text:004116D0 hTemplateFile   = dword ptr  1Ch
.text:004116D0
.text:004116D0                 jmp     ds:__imp_CreateFileA
.text:004116D0 CreateFileA     endp
.text:004116D0
.text:004116D0 ; ---------------------------------------------------------------------------
.text:004116D6                 align 10h
.text:004116E0
.text:004116E0 ; =============== S U B R O U T I N E =======================================
.text:004116E0
.text:004116E0 ; Attributes: thunk
.text:004116E0
.text:004116E0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:004116E0 CloseHandle     proc near               ; CODE XREF: sub_40ECA0-3C1F↑p
.text:004116E0                                         ; .text:0040C019↑p ...
.text:004116E0
.text:004116E0 hObject         = dword ptr  4
.text:004116E0
.text:004116E0                 jmp     ds:__imp_CloseHandle
.text:004116E0 CloseHandle     endp
.text:004116E0
.text:004116E0 ; ---------------------------------------------------------------------------
.text:004116E6                 align 10h
.text:004116F0
.text:004116F0 ; =============== S U B R O U T I N E =======================================
.text:004116F0
.text:004116F0 ; Attributes: thunk
.text:004116F0
.text:004116F0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:004116F0 SetErrorMode    proc near               ; CODE XREF: sub_40ECA0-3BEA↑p
.text:004116F0                                         ; sub_40CFA0+57↑p ...
.text:004116F0
.text:004116F0 uMode           = dword ptr  4
.text:004116F0
.text:004116F0                 jmp     ds:__imp_SetErrorMode
.text:004116F0 SetErrorMode    endp
.text:004116F0
.text:004116F0 ; ---------------------------------------------------------------------------
.text:004116F6                 align 10h
.text:00411700
.text:00411700 ; =============== S U B R O U T I N E =======================================
.text:00411700
.text:00411700 ; Attributes: thunk
.text:00411700
.text:00411700 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00411700 GetModuleFileNameA proc near            ; CODE XREF: sub_40B670+1C↑p
.text:00411700
.text:00411700 hModule         = dword ptr  4
.text:00411700 lpFilename      = dword ptr  8
.text:00411700 nSize           = dword ptr  0Ch
.text:00411700
.text:00411700                 jmp     ds:__imp_GetModuleFileNameA
.text:00411700 GetModuleFileNameA endp
.text:00411700
.text:00411700 ; ---------------------------------------------------------------------------
.text:00411706                 align 10h
.text:00411710
.text:00411710 ; =============== S U B R O U T I N E =======================================
.text:00411710
.text:00411710 ; Attributes: thunk
.text:00411710
.text:00411710 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00411710 GetShortPathNameA proc near             ; CODE XREF: .text:0040B8F6↑p
.text:00411710                                         ; .text:0040B920↑p
.text:00411710
.text:00411710 lpszLongPath    = dword ptr  4
.text:00411710 lpszShortPath   = dword ptr  8
.text:00411710 cchBuffer       = dword ptr  0Ch
.text:00411710
.text:00411710                 jmp     ds:__imp_GetShortPathNameA
.text:00411710 GetShortPathNameA endp
.text:00411710
.text:00411710 ; ---------------------------------------------------------------------------
.text:00411716                 align 10h
.text:00411720
.text:00411720 ; =============== S U B R O U T I N E =======================================
.text:00411720
.text:00411720 ; Attributes: thunk
.text:00411720
.text:00411720 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00411720 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040BC28↑p
.text:00411720                                         ; .text:0040BC44↑p ...
.text:00411720
.text:00411720 nBufferLength   = dword ptr  4
.text:00411720 lpBuffer        = dword ptr  8
.text:00411720
.text:00411720                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00411720 GetCurrentDirectoryA endp
.text:00411720
.text:00411720 ; ---------------------------------------------------------------------------
.text:00411726                 align 10h
.text:00411730
.text:00411730 ; =============== S U B R O U T I N E =======================================
.text:00411730
.text:00411730 ; Attributes: thunk
.text:00411730
.text:00411730 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00411730 DeviceIoControl proc near               ; CODE XREF: .text:0040C00C↑p
.text:00411730                                         ; sub_40C3D0+1E5↑p
.text:00411730
.text:00411730 hDevice         = dword ptr  4
.text:00411730 dwIoControlCode = dword ptr  8
.text:00411730 lpInBuffer      = dword ptr  0Ch
.text:00411730 nInBufferSize   = dword ptr  10h
.text:00411730 lpOutBuffer     = dword ptr  14h
.text:00411730 nOutBufferSize  = dword ptr  18h
.text:00411730 lpBytesReturned = dword ptr  1Ch
.text:00411730 lpOverlapped    = dword ptr  20h
.text:00411730
.text:00411730                 jmp     ds:__imp_DeviceIoControl
.text:00411730 DeviceIoControl endp
.text:00411730
.text:00411730 ; ---------------------------------------------------------------------------
.text:00411736                 align 10h
.text:00411740
.text:00411740 ; =============== S U B R O U T I N E =======================================
.text:00411740
.text:00411740 ; Attributes: thunk
.text:00411740
.text:00411740 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00411740 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040C363↑p
.text:00411740                                         ; sub_40C3D0+7B↑p ...
.text:00411740
.text:00411740 lpRootPathName  = dword ptr  4
.text:00411740 lpSectorsPerCluster= dword ptr  8
.text:00411740 lpBytesPerSector= dword ptr  0Ch
.text:00411740 lpNumberOfFreeClusters= dword ptr  10h
.text:00411740 lpTotalNumberOfClusters= dword ptr  14h
.text:00411740
.text:00411740                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00411740 GetDiskFreeSpaceA endp
.text:00411740
.text:00411740 ; ---------------------------------------------------------------------------
.text:00411746                 align 10h
.text:00411750
.text:00411750 ; =============== S U B R O U T I N E =======================================
.text:00411750
.text:00411750 ; Attributes: thunk
.text:00411750
.text:00411750 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00411750 GetFullPathNameA proc near              ; CODE XREF: sub_40CE70+45↑p
.text:00411750                                         ; sub_40CE70+ED↑p
.text:00411750
.text:00411750 lpFileName      = dword ptr  4
.text:00411750 nBufferLength   = dword ptr  8
.text:00411750 lpBuffer        = dword ptr  0Ch
.text:00411750 lpFilePart      = dword ptr  10h
.text:00411750
.text:00411750                 jmp     ds:__imp_GetFullPathNameA
.text:00411750 GetFullPathNameA endp
.text:00411750
.text:00411750 ; ---------------------------------------------------------------------------
.text:00411756                 align 10h
.text:00411760
.text:00411760 ; =============== S U B R O U T I N E =======================================
.text:00411760
.text:00411760 ; Attributes: thunk
.text:00411760
.text:00411760 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00411760 lstrcmpiA       proc near               ; CODE XREF: .text:0040D52B↑p
.text:00411760                                         ; .text:0040D542↑p ...
.text:00411760
.text:00411760 lpString1       = dword ptr  4
.text:00411760 lpString2       = dword ptr  8
.text:00411760
.text:00411760                 jmp     ds:__imp_lstrcmpiA
.text:00411760 lstrcmpiA       endp
.text:00411760
.text:00411760 ; ---------------------------------------------------------------------------
.text:00411766                 align 10h
.text:00411770
.text:00411770 ; =============== S U B R O U T I N E =======================================
.text:00411770
.text:00411770 ; Attributes: thunk
.text:00411770
.text:00411770 ; DWORD __stdcall GetVersion()
.text:00411770 GetVersion      proc near               ; CODE XREF: .text:0040D8B3↑p
.text:00411770                 jmp     ds:__imp_GetVersion
.text:00411770 GetVersion      endp
.text:00411770
.text:00411770 ; ---------------------------------------------------------------------------
.text:00411776                 align 10h
.text:00411780
.text:00411780 ; =============== S U B R O U T I N E =======================================
.text:00411780
.text:00411780 ; Attributes: thunk
.text:00411780
.text:00411780 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00411780 GetVersionExA   proc near               ; CODE XREF: sub_40D940+32↑p
.text:00411780                                         ; sub_40D940+20B↑p
.text:00411780
.text:00411780 lpVersionInformation= dword ptr  4
.text:00411780
.text:00411780                 jmp     ds:__imp_GetVersionExA
.text:00411780 GetVersionExA   endp
.text:00411780
.text:00411780 ; ---------------------------------------------------------------------------
.text:00411786                 align 10h
.text:00411790
.text:00411790 ; =============== S U B R O U T I N E =======================================
.text:00411790
.text:00411790 ; Attributes: thunk
.text:00411790
.text:00411790 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00411790 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040DFDF↑p
.text:00411790                                         ; .text:0040E00E↑p ...
.text:00411790
.text:00411790 nBufferLength   = dword ptr  4
.text:00411790 lpBuffer        = dword ptr  8
.text:00411790
.text:00411790                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00411790 GetLogicalDriveStringsA endp
.text:00411790
.text:00411790 ; ---------------------------------------------------------------------------
.text:00411796                 align 10h
.text:004117A0
.text:004117A0 ; =============== S U B R O U T I N E =======================================
.text:004117A0
.text:004117A0 ; Attributes: thunk
.text:004117A0
.text:004117A0 ; HANDLE __stdcall GetProcessHeap()
.text:004117A0 GetProcessHeap  proc near               ; CODE XREF: .text:0040DFE9↑p
.text:004117A0                                         ; sub_40E6C0+24↑p ...
.text:004117A0                 jmp     ds:__imp_GetProcessHeap
.text:004117A0 GetProcessHeap  endp
.text:004117A0
.text:004117A0 ; ---------------------------------------------------------------------------
.text:004117A6                 align 10h
.text:004117B0
.text:004117B0 ; =============== S U B R O U T I N E =======================================
.text:004117B0
.text:004117B0 ; Attributes: thunk
.text:004117B0
.text:004117B0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:004117B0 HeapAlloc       proc near               ; CODE XREF: .text:0040DFFD↑p
.text:004117B0                                         ; sub_40E6C0+38↑p ...
.text:004117B0
.text:004117B0 hHeap           = dword ptr  4
.text:004117B0 dwFlags         = dword ptr  8
.text:004117B0 dwBytes         = dword ptr  0Ch
.text:004117B0
.text:004117B0                 jmp     ds:__imp_HeapAlloc
.text:004117B0 HeapAlloc       endp
.text:004117B0
.text:004117B0 ; ---------------------------------------------------------------------------
.text:004117B6                 align 10h
.text:004117C0
.text:004117C0 ; =============== S U B R O U T I N E =======================================
.text:004117C0
.text:004117C0 ; Attributes: thunk
.text:004117C0
.text:004117C0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:004117C0 HeapFree        proc near               ; CODE XREF: .text:0040E7FD↑p
.text:004117C0
.text:004117C0 hHeap           = dword ptr  4
.text:004117C0 dwFlags         = dword ptr  8
.text:004117C0 lpMem           = dword ptr  0Ch
.text:004117C0
.text:004117C0                 jmp     ds:__imp_HeapFree
.text:004117C0 HeapFree        endp
.text:004117C0
.text:004117C0 ; ---------------------------------------------------------------------------
.text:004117C6                 align 10h
.text:004117D0
.text:004117D0 ; =============== S U B R O U T I N E =======================================
.text:004117D0
.text:004117D0 ; Attributes: thunk
.text:004117D0
.text:004117D0 ; BOOL __stdcall SetFileTime(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.text:004117D0 SetFileTime     proc near               ; CODE XREF: sub_40E8A0+93↑p
.text:004117D0
.text:004117D0 hFile           = dword ptr  4
.text:004117D0 lpCreationTime  = dword ptr  8
.text:004117D0 lpLastAccessTime= dword ptr  0Ch
.text:004117D0 lpLastWriteTime = dword ptr  10h
.text:004117D0
.text:004117D0                 jmp     ds:__imp_SetFileTime
.text:004117D0 SetFileTime     endp
.text:004117D0
.text:004117D0 ; ---------------------------------------------------------------------------
.text:004117D6                 align 10h
.text:004117E0
.text:004117E0 ; =============== S U B R O U T I N E =======================================
.text:004117E0
.text:004117E0 ; Attributes: thunk
.text:004117E0
.text:004117E0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:004117E0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40E8A0+C7↑p
.text:004117E0                                         ; sub_40ECF0+4F↑p
.text:004117E0
.text:004117E0 lpSystemTimeAsFileTime= dword ptr  4
.text:004117E0
.text:004117E0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:004117E0 GetSystemTimeAsFileTime endp
.text:004117E0
.text:004117E0 ; ---------------------------------------------------------------------------
.text:004117E6                 align 10h
.text:004117F0
.text:004117F0 ; =============== S U B R O U T I N E =======================================
.text:004117F0
.text:004117F0 ; Attributes: thunk
.text:004117F0
.text:004117F0 ; BOOL __stdcall AreFileApisANSI()
.text:004117F0 AreFileApisANSI proc near               ; CODE XREF: sub_40EA40+89↑p
.text:004117F0                 jmp     ds:__imp_AreFileApisANSI
.text:004117F0 AreFileApisANSI endp
.text:004117F0
.text:004117F0 ; ---------------------------------------------------------------------------
.text:004117F6                 align 10h
.text:00411800
.text:00411800 ; =============== S U B R O U T I N E =======================================
.text:00411800
.text:00411800 ; Attributes: thunk
.text:00411800
.text:00411800 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00411800 MultiByteToWideChar proc near           ; CODE XREF: sub_40EA40+BD↑p
.text:00411800
.text:00411800 CodePage        = dword ptr  4
.text:00411800 dwFlags         = dword ptr  8
.text:00411800 lpMultiByteStr  = dword ptr  0Ch
.text:00411800 cbMultiByte     = dword ptr  10h
.text:00411800 lpWideCharStr   = dword ptr  14h
.text:00411800 cchWideChar     = dword ptr  18h
.text:00411800
.text:00411800                 jmp     ds:__imp_MultiByteToWideChar
.text:00411800 MultiByteToWideChar endp
.text:00411800
.text:00411800 ; ---------------------------------------------------------------------------
.text:00411806                 align 10h
.text:00411810
.text:00411810 ; =============== S U B R O U T I N E =======================================
.text:00411810
.text:00411810 ; Attributes: thunk
.text:00411810
.text:00411810 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00411810 lstrcpyA        proc near               ; CODE XREF: sub_40EA40+128↑p
.text:00411810
.text:00411810 lpString1       = dword ptr  4
.text:00411810 lpString2       = dword ptr  8
.text:00411810
.text:00411810                 jmp     ds:__imp_lstrcpyA
.text:00411810 lstrcpyA        endp
.text:00411810
.text:00411810 ; ---------------------------------------------------------------------------
.text:00411816                 align 10h
.text:00411820
.text:00411820 ; =============== S U B R O U T I N E =======================================
.text:00411820
.text:00411820 ; Attributes: thunk
.text:00411820
.text:00411820 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00411820 GetTimeZoneInformation proc near        ; CODE XREF: sub_40ECF0+22↑p
.text:00411820
.text:00411820 lpTimeZoneInformation= dword ptr  4
.text:00411820
.text:00411820                 jmp     ds:__imp_GetTimeZoneInformation
.text:00411820 GetTimeZoneInformation endp
.text:00411820
.text:00411820 ; ---------------------------------------------------------------------------
.text:00411826                 align 10h
.text:00411830
.text:00411830 ; =============== S U B R O U T I N E =======================================
.text:00411830
.text:00411830 ; Attributes: thunk
.text:00411830
.text:00411830 ; BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency)
.text:00411830 QueryPerformanceFrequency proc near     ; CODE XREF: sub_40EDE0+27↑p
.text:00411830
.text:00411830 lpFrequency     = dword ptr  4
.text:00411830
.text:00411830                 jmp     ds:__imp_QueryPerformanceFrequency
.text:00411830 QueryPerformanceFrequency endp
.text:00411830
.text:00411830 ; ---------------------------------------------------------------------------
.text:00411836                 align 10h
.text:00411840
.text:00411840 ; =============== S U B R O U T I N E =======================================
.text:00411840
.text:00411840 ; Attributes: thunk
.text:00411840
.text:00411840 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00411840 UnlockFile      proc near               ; CODE XREF: sub_40EE50+40↑p
.text:00411840
.text:00411840 hFile           = dword ptr  4
.text:00411840 dwFileOffsetLow = dword ptr  8
.text:00411840 dwFileOffsetHigh= dword ptr  0Ch
.text:00411840 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00411840 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00411840
.text:00411840                 jmp     ds:__imp_UnlockFile
.text:00411840 UnlockFile      endp
.text:00411840
.text:00411840 ; ---------------------------------------------------------------------------
.text:00411846                 align 10h
.text:00411850
.text:00411850 ; =============== S U B R O U T I N E =======================================
.text:00411850
.text:00411850 ; Attributes: thunk
.text:00411850
.text:00411850 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00411850 CreateDirectoryA proc near              ; CODE XREF: sub_40F7D0+22↑p
.text:00411850
.text:00411850 lpPathName      = dword ptr  4
.text:00411850 lpSecurityAttributes= dword ptr  8
.text:00411850
.text:00411850                 jmp     ds:__imp_CreateDirectoryA
.text:00411850 CreateDirectoryA endp
.text:00411850
.text:00411850 ; ---------------------------------------------------------------------------
.text:00411856                 align 10h
.text:00411860
.text:00411860 ; =============== S U B R O U T I N E =======================================
.text:00411860
.text:00411860 ; Attributes: thunk
.text:00411860
.text:00411860 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00411860 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040D4B1↑p
.text:00411860
.text:00411860 hKey            = dword ptr  4
.text:00411860 lpSubKey        = dword ptr  8
.text:00411860 ulOptions       = dword ptr  0Ch
.text:00411860 samDesired      = dword ptr  10h
.text:00411860 phkResult       = dword ptr  14h
.text:00411860
.text:00411860                 jmp     ds:__imp_RegOpenKeyExA
.text:00411860 RegOpenKeyExA   endp
.text:00411860
.text:00411860 ; ---------------------------------------------------------------------------
.text:00411866                 align 10h
.text:00411870
.text:00411870 ; =============== S U B R O U T I N E =======================================
.text:00411870
.text:00411870 ; Attributes: thunk
.text:00411870
.text:00411870 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00411870 RegQueryValueExA proc near              ; CODE XREF: .text:0040D4F4↑p
.text:00411870
.text:00411870 hKey            = dword ptr  4
.text:00411870 lpValueName     = dword ptr  8
.text:00411870 lpReserved      = dword ptr  0Ch
.text:00411870 lpType          = dword ptr  10h
.text:00411870 lpData          = dword ptr  14h
.text:00411870 lpcbData        = dword ptr  18h
.text:00411870
.text:00411870                 jmp     ds:__imp_RegQueryValueExA
.text:00411870 RegQueryValueExA endp
.text:00411870
.text:00411870 ; ---------------------------------------------------------------------------
.text:00411876                 align 10h
.text:00411880
.text:00411880 ; =============== S U B R O U T I N E =======================================
.text:00411880
.text:00411880 ; Attributes: thunk
.text:00411880
.text:00411880 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00411880 RegCloseKey     proc near               ; CODE XREF: .text:0040D518↑p
.text:00411880
.text:00411880 hKey            = dword ptr  4
.text:00411880
.text:00411880                 jmp     ds:__imp_RegCloseKey
.text:00411880 RegCloseKey     endp
.text:00411880
.text:00411880 ; ---------------------------------------------------------------------------
.text:00411886                 db 2 dup(90h)
.text:00411888                 dd 2 dup(0)
.text:00411890                 dd 21400h, 0
.text:00411898                 dd 0C0h, 46000000h
.text:004118A0 ; const IID rclsid
.text:004118A0 rclsid          dd 21401h               ; Data1
.text:004118A0                                         ; DATA XREF: sub_40EA40+4B↑o
.text:004118A0                 dw 0                    ; Data2
.text:004118A0                 dw 0                    ; Data3
.text:004118A0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004118B0                 dd 214A0h, 0
.text:004118B8                 dd 0C0h, 46000000h, 214A1h, 0
.text:004118C8                 dd 0C0h, 46000000h, 214D0h, 0
.text:004118D8                 dd 0C0h, 46000000h, 214D1h, 0
.text:004118E8                 dd 0C0h, 46000000h, 214D2h, 0
.text:004118F8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00411908                 dd 0C0h, 46000000h, 214E2h, 0
.text:00411918                 dd 0C0h, 46000000h, 214E3h, 0
.text:00411928                 dd 0C0h, 46000000h, 214E4h, 0
.text:00411938                 dd 0C0h, 46000000h, 21500h, 0
.text:00411948                 dd 0C0h, 46000000h, 214E5h, 0
.text:00411958                 dd 0C0h, 46000000h, 214E6h, 0
.text:00411968                 dd 0C0h, 46000000h, 214E8h, 0
.text:00411978                 dd 0C0h, 46000000h, 214E9h, 0
.text:00411988                 dd 0C0h, 46000000h, 214EAh, 0
.text:00411998                 dd 0C0h, 46000000h, 214EBh, 0
.text:004119A8                 dd 0C0h, 46000000h
.text:004119B0 ; const IID riid
.text:004119B0 riid            dd 214EEh               ; Data1
.text:004119B0                                         ; DATA XREF: sub_40EA40+2B↑o
.text:004119B0                 dw 0                    ; Data2
.text:004119B0                 dw 0                    ; Data3
.text:004119B0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:004119C0                 dd 214EFh, 0
.text:004119C8                 dd 0C0h, 46000000h, 214F0h, 0
.text:004119D8                 dd 0C0h, 46000000h, 214F1h, 0
.text:004119E8                 dd 0C0h, 46000000h, 214F2h, 0
.text:004119F8                 dd 0C0h, 46000000h, 214F3h, 0
.text:00411A08                 dd 0C0h, 46000000h, 214F4h, 0
.text:00411A18                 dd 0C0h, 46000000h, 214F5h, 0
.text:00411A28                 dd 0C0h, 46000000h, 214F6h, 0
.text:00411A38                 dd 0C0h, 46000000h, 214F7h, 0
.text:00411A48                 dd 0C0h, 46000000h, 214F8h, 0
.text:00411A58                 dd 0C0h, 46000000h, 214F9h, 0
.text:00411A68                 dd 0C0h, 46000000h, 214FAh, 0
.text:00411A78                 dd 0C0h, 46000000h, 214FBh, 0
.text:00411A88                 dd 0C0h, 46000000h, 214FCh, 0
.text:00411A98                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00411A98                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00411A98                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00411A98                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00411A98                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00411A98                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00411A98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00411A98                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00411A98                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00411A98                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00411B68                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00411B78                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00411B88                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00411B98                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00411BA8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00411BA8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00411BA8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00411BA8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00411BA8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00411BA8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00411BA8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00411C30 dword_411C30    dd 0FFFFFFFFh           ; DATA XREF: .text:00410E29↑r
.text:00411C30                                         ; .text:loc_410E50↑r ...
.text:00411C34 dword_411C34    dd 0                    ; DATA XREF: .text:loc_410E5C↑r
.text:00411C34                                         ; sub_410E80:loc_410ECD↑r
.text:00411C38                 dd 0FFFFFFFFh
.text:00411C3C dword_411C3C    dd 71h dup(0)           ; DATA XREF: .data:off_4120D4↓o
.text:00411E00                 dd 80h dup(?)
.text:00411E00 _text           ends
.text:00411E00
.data:00412000 ; Section 2. (virtual address 00012000)
.data:00412000 ; Virtual size                  : 000000F0 (    240.)
.data:00412000 ; Section size in file          : 00000200 (    512.)
.data:00412000 ; Offset to raw data for section: 00011200
.data:00412000 ; Flags C0000040: Data Readable Writable
.data:00412000 ; Alignment     : default
.data:00412000 ; ===========================================================================
.data:00412000
.data:00412000 ; Segment type: Pure data
.data:00412000 ; Segment permissions: Read/Write
.data:00412000 _data           segment para public 'DATA' use32
.data:00412000                 assume cs:_data
.data:00412000                 ;org 412000h
.data:00412000 dword_412000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00412000                                         ; sub_401080+CC↑r
.data:00412004 dword_412004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00412004                                         ; sub_401080+D4↑r
.data:00412008                 align 10h
.data:00412010 ; int off_412010
.data:00412010 off_412010      dd offset sub_402C50    ; DATA XREF: sub_401A00+316↑r
.data:00412014                 align 10h
.data:00412020 dword_412020    dd 1                    ; DATA XREF: sub_401A00+4C1↑r
.data:00412020                                         ; sub_401A00:loc_401F0F↑r ...
.data:00412024 dword_412024    dd 1                    ; DATA XREF: sub_403A50+11↑r
.data:00412024                                         ; .text:00403AF1↑r
.data:00412028 dword_412028    dd 3Fh                  ; DATA XREF: sub_403A50+7D↑w
.data:00412028                                         ; .text:00403B5D↑w
.data:0041202C                 align 10h
.data:00412030 ; char *Buffer
.data:00412030 Buffer          dd offset aCopyrightC2005
.data:00412030                                         ; DATA XREF: sub_404070+DC↑r
.data:00412030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00412034                 align 10h
.data:00412040 dword_412040    dd 1                    ; DATA XREF: sub_408AC0+22↑r
.data:00412040                                         ; sub_408AC0+65↑r ...
.data:00412044 dword_412044    dd 100h                 ; DATA XREF: sub_408AC0+3F↑o
.data:00412044                                         ; sub_408AC0+1A2↑r ...
.data:00412048 off_412048      dd offset unk_4130A0    ; DATA XREF: sub_408AC0+1AA↑r
.data:0041204C ; void *off_41204C
.data:0041204C off_41204C      dd offset dword_412044  ; DATA XREF: sub_408AC0+39↑r
.data:0041204C                                         ; sub_408AC0+60↑w ...
.data:00412050 ; int Code
.data:00412050 Code            dd 1                    ; DATA XREF: sub_4047B0+6D↑r
.data:00412050                                         ; sub_4047B0+9A↑r ...
.data:00412054                 align 10h
.data:00412060 dword_412060    dd 200h                 ; DATA XREF: sub_409900+2ED↑r
.data:00412060                                         ; sub_409900+2F8↑r ...
.data:00412064 ; char *off_412064
.data:00412064 off_412064      dd offset aComExeBatCmd ; DATA XREF: sub_409DD0+3D3↑r
.data:00412064                                         ; sub_409DD0+400↑r ...
.data:00412064                                         ; ".com;.exe;.bat;.cmd"
.data:00412068                 align 10h
.data:00412070 byte_412070     db 41h                  ; DATA XREF: sub_40BAA0+6B↑w
.data:00412070                                         ; sub_40BAA0:loc_40BBB4↑r
.data:00412071                 align 10h
.data:00412080 dword_412080    dd 1                    ; DATA XREF: .text:loc_40D367↑r
.data:00412080                                         ; sub_40D940+202↑w
.data:00412084                 align 10h
.data:00412090 off_412090      dd offset aNotset       ; DATA XREF: .text:0040DBBA↑r
.data:00412090                                         ; .text:0040E802↑r
.data:00412090                                         ; "notset"
.data:00412094 off_412094      dd offset aNotset       ; DATA XREF: .text:0040DBD2↑r
.data:00412094                                         ; .text:0040DBF4↑r ...
.data:00412094                                         ; "notset"
.data:00412098                 align 10h
.data:004120A0 dword_4120A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004120A4                 align 10h
.data:004120B0 ; int Mode
.data:004120B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004120B0                                         ; sub_401080+80↑r ...
.data:004120B4                 align 10h
.data:004120C0 dword_4120C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004120C0                                         ; sub_401080+BA↑r
.data:004120C4                 align 10h
.data:004120D0 dword_4120D0    dd 0                    ; DATA XREF: sub_410E80+9↑r
.data:004120D0                                         ; sub_410E80+1D↑w
.data:004120D4 off_4120D4      dd offset dword_411C3C  ; DATA XREF: sub_410DF0+6↑r
.data:004120D4                                         ; sub_410DF0+17↑r ...
.data:004120D8                 align 1000h
.data:004120D8 _data           ends
.data:004120D8
.bss:00413000 ; Section 3. (virtual address 00013000)
.bss:00413000 ; Virtual size                  : 000005D0 (   1488.)
.bss:00413000 ; Section size in file          : 00000000 (      0.)
.bss:00413000 ; Offset to raw data for section: 00000000
.bss:00413000 ; Flags C0000080: Bss Readable Writable
.bss:00413000 ; Alignment     : default
.bss:00413000 ; ===========================================================================
.bss:00413000
.bss:00413000 ; Segment type: Uninitialized
.bss:00413000 ; Segment permissions: Read/Write
.bss:00413000 _bss            segment para public 'BSS' use32
.bss:00413000                 assume cs:_bss
.bss:00413000                 ;org 413000h
.bss:00413000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00413000 dword_413000    dd ?                    ; DATA XREF: sub_401A00+84↑w
.bss:00413000                                         ; sub_401A00:loc_401B3C↑w ...
.bss:00413004                 align 10h
.bss:00413010 byte_413010     db ?                    ; DATA XREF: sub_401A00+8A↑w
.bss:00413010                                         ; sub_401A00+FB↑w ...
.bss:00413011                 align 10h
.bss:00413020 byte_413020     db ?                    ; DATA XREF: sub_401A00+7B↑w
.bss:00413020                                         ; sub_401A00:loc_401DF0↑w ...
.bss:00413021                 align 10h
.bss:00413030 byte_413030     db ?                    ; DATA XREF: sub_401A00:loc_401FA9↑w
.bss:00413030                                         ; sub_402420:loc_402510↑r
.bss:00413031                 align 10h
.bss:00413040 ; __time32_t Time
.bss:00413040 Time            dd ?                    ; DATA XREF: sub_401A00+366↑o
.bss:00413040                                         ; sub_401A00+383↑r ...
.bss:00413044 dword_413044    dd ?                    ; DATA XREF: sub_401A00+389↑w
.bss:00413044                                         ; sub_401A00+38F↑r ...
.bss:00413048 ; __time32_t dword_413048
.bss:00413048 dword_413048    dd ?                    ; DATA XREF: sub_401A00+395↑w
.bss:00413048                                         ; sub_401A00+4AC↑w ...
.bss:0041304C dword_41304C    dd ?                    ; DATA XREF: sub_401A00+39B↑w
.bss:0041304C                                         ; sub_401A00+4B2↑w ...
.bss:00413050 ; char *dword_413050
.bss:00413050 dword_413050    dd ?                    ; DATA XREF: sub_401A00+3FD↑w
.bss:00413050                                         ; sub_401A00:loc_4020F2↑r ...
.bss:00413054                 align 10h
.bss:00413060 dword_413060    dd ?                    ; DATA XREF: sub_403A50+9↑o
.bss:00413060                                         ; sub_403A50+17↑w ...
.bss:00413064 dword_413064    dd ?                    ; DATA XREF: sub_403A50+21↑w
.bss:00413064                                         ; .text:00403B09↑w
.bss:00413068 dword_413068    dd ?                    ; DATA XREF: sub_403A50+77↑r
.bss:00413068                                         ; .text:00403B57↑r
.bss:0041306C dword_41306C    dd ?                    ; DATA XREF: sub_403A50+6B↑r
.bss:0041306C                                         ; .text:00403B4B↑r
.bss:00413070                 db    ? ;
.bss:00413071                 db    ? ;
.bss:00413072                 db    ? ;
.bss:00413073                 db    ? ;
.bss:00413074                 db    ? ;
.bss:00413075                 db    ? ;
.bss:00413076                 db    ? ;
.bss:00413077                 db    ? ;
.bss:00413078                 db    ? ;
.bss:00413079                 db    ? ;
.bss:0041307A                 db    ? ;
.bss:0041307B                 db    ? ;
.bss:0041307C                 db    ? ;
.bss:0041307D                 db    ? ;
.bss:0041307E                 db    ? ;
.bss:0041307F                 db    ? ;
.bss:00413080                 db    ? ;
.bss:00413081                 db    ? ;
.bss:00413082                 db    ? ;
.bss:00413083                 db    ? ;
.bss:00413084                 db    ? ;
.bss:00413085                 db    ? ;
.bss:00413086                 db    ? ;
.bss:00413087                 db    ? ;
.bss:00413088                 db    ? ;
.bss:00413089                 db    ? ;
.bss:0041308A                 db    ? ;
.bss:0041308B                 db    ? ;
.bss:0041308C                 db    ? ;
.bss:0041308D                 db    ? ;
.bss:0041308E                 db    ? ;
.bss:0041308F                 db    ? ;
.bss:00413090 ; char *dword_413090
.bss:00413090 dword_413090    dd ?                    ; DATA XREF: .text:00404784↑w
.bss:00413090                                         ; sub_4047B0+58↑r
.bss:00413094                 align 10h
.bss:004130A0 unk_4130A0      db    ? ;               ; DATA XREF: sub_408AC0+100↑o
.bss:004130A0                                         ; .data:off_412048↑o
.bss:004130A1                 db    ? ;
.bss:004130A2                 db    ? ;
.bss:004130A3                 db    ? ;
.bss:004130A4                 db    ? ;
.bss:004130A5                 db    ? ;
.bss:004130A6                 db    ? ;
.bss:004130A7                 db    ? ;
.bss:004130A8                 db    ? ;
.bss:004130A9                 db    ? ;
.bss:004130AA                 db    ? ;
.bss:004130AB                 db    ? ;
.bss:004130AC                 db    ? ;
.bss:004130AD                 db    ? ;
.bss:004130AE                 db    ? ;
.bss:004130AF                 db    ? ;
.bss:004130B0                 db    ? ;
.bss:004130B1                 db    ? ;
.bss:004130B2                 db    ? ;
.bss:004130B3                 db    ? ;
.bss:004130B4                 db    ? ;
.bss:004130B5                 db    ? ;
.bss:004130B6                 db    ? ;
.bss:004130B7                 db    ? ;
.bss:004130B8                 db    ? ;
.bss:004130B9                 db    ? ;
.bss:004130BA                 db    ? ;
.bss:004130BB                 db    ? ;
.bss:004130BC                 db    ? ;
.bss:004130BD                 db    ? ;
.bss:004130BE                 db    ? ;
.bss:004130BF                 db    ? ;
.bss:004130C0                 db    ? ;
.bss:004130C1                 db    ? ;
.bss:004130C2                 db    ? ;
.bss:004130C3                 db    ? ;
.bss:004130C4                 db    ? ;
.bss:004130C5                 db    ? ;
.bss:004130C6                 db    ? ;
.bss:004130C7                 db    ? ;
.bss:004130C8                 db    ? ;
.bss:004130C9                 db    ? ;
.bss:004130CA                 db    ? ;
.bss:004130CB                 db    ? ;
.bss:004130CC                 db    ? ;
.bss:004130CD                 db    ? ;
.bss:004130CE                 db    ? ;
.bss:004130CF                 db    ? ;
.bss:004130D0                 db    ? ;
.bss:004130D1                 db    ? ;
.bss:004130D2                 db    ? ;
.bss:004130D3                 db    ? ;
.bss:004130D4                 db    ? ;
.bss:004130D5                 db    ? ;
.bss:004130D6                 db    ? ;
.bss:004130D7                 db    ? ;
.bss:004130D8                 db    ? ;
.bss:004130D9                 db    ? ;
.bss:004130DA                 db    ? ;
.bss:004130DB                 db    ? ;
.bss:004130DC                 db    ? ;
.bss:004130DD                 db    ? ;
.bss:004130DE                 db    ? ;
.bss:004130DF                 db    ? ;
.bss:004130E0                 db    ? ;
.bss:004130E1                 db    ? ;
.bss:004130E2                 db    ? ;
.bss:004130E3                 db    ? ;
.bss:004130E4                 db    ? ;
.bss:004130E5                 db    ? ;
.bss:004130E6                 db    ? ;
.bss:004130E7                 db    ? ;
.bss:004130E8                 db    ? ;
.bss:004130E9                 db    ? ;
.bss:004130EA                 db    ? ;
.bss:004130EB                 db    ? ;
.bss:004130EC                 db    ? ;
.bss:004130ED                 db    ? ;
.bss:004130EE                 db    ? ;
.bss:004130EF                 db    ? ;
.bss:004130F0                 db    ? ;
.bss:004130F1                 db    ? ;
.bss:004130F2                 db    ? ;
.bss:004130F3                 db    ? ;
.bss:004130F4                 db    ? ;
.bss:004130F5                 db    ? ;
.bss:004130F6                 db    ? ;
.bss:004130F7                 db    ? ;
.bss:004130F8                 db    ? ;
.bss:004130F9                 db    ? ;
.bss:004130FA                 db    ? ;
.bss:004130FB                 db    ? ;
.bss:004130FC                 db    ? ;
.bss:004130FD                 db    ? ;
.bss:004130FE                 db    ? ;
.bss:004130FF                 db    ? ;
.bss:00413100                 db    ? ;
.bss:00413101                 db    ? ;
.bss:00413102                 db    ? ;
.bss:00413103                 db    ? ;
.bss:00413104                 db    ? ;
.bss:00413105                 db    ? ;
.bss:00413106                 db    ? ;
.bss:00413107                 db    ? ;
.bss:00413108                 db    ? ;
.bss:00413109                 db    ? ;
.bss:0041310A                 db    ? ;
.bss:0041310B                 db    ? ;
.bss:0041310C                 db    ? ;
.bss:0041310D                 db    ? ;
.bss:0041310E                 db    ? ;
.bss:0041310F                 db    ? ;
.bss:00413110                 db    ? ;
.bss:00413111                 db    ? ;
.bss:00413112                 db    ? ;
.bss:00413113                 db    ? ;
.bss:00413114                 db    ? ;
.bss:00413115                 db    ? ;
.bss:00413116                 db    ? ;
.bss:00413117                 db    ? ;
.bss:00413118                 db    ? ;
.bss:00413119                 db    ? ;
.bss:0041311A                 db    ? ;
.bss:0041311B                 db    ? ;
.bss:0041311C                 db    ? ;
.bss:0041311D                 db    ? ;
.bss:0041311E                 db    ? ;
.bss:0041311F                 db    ? ;
.bss:00413120                 db    ? ;
.bss:00413121                 db    ? ;
.bss:00413122                 db    ? ;
.bss:00413123                 db    ? ;
.bss:00413124                 db    ? ;
.bss:00413125                 db    ? ;
.bss:00413126                 db    ? ;
.bss:00413127                 db    ? ;
.bss:00413128                 db    ? ;
.bss:00413129                 db    ? ;
.bss:0041312A                 db    ? ;
.bss:0041312B                 db    ? ;
.bss:0041312C                 db    ? ;
.bss:0041312D                 db    ? ;
.bss:0041312E                 db    ? ;
.bss:0041312F                 db    ? ;
.bss:00413130                 db    ? ;
.bss:00413131                 db    ? ;
.bss:00413132                 db    ? ;
.bss:00413133                 db    ? ;
.bss:00413134                 db    ? ;
.bss:00413135                 db    ? ;
.bss:00413136                 db    ? ;
.bss:00413137                 db    ? ;
.bss:00413138                 db    ? ;
.bss:00413139                 db    ? ;
.bss:0041313A                 db    ? ;
.bss:0041313B                 db    ? ;
.bss:0041313C                 db    ? ;
.bss:0041313D                 db    ? ;
.bss:0041313E                 db    ? ;
.bss:0041313F                 db    ? ;
.bss:00413140                 db    ? ;
.bss:00413141                 db    ? ;
.bss:00413142                 db    ? ;
.bss:00413143                 db    ? ;
.bss:00413144                 db    ? ;
.bss:00413145                 db    ? ;
.bss:00413146                 db    ? ;
.bss:00413147                 db    ? ;
.bss:00413148                 db    ? ;
.bss:00413149                 db    ? ;
.bss:0041314A                 db    ? ;
.bss:0041314B                 db    ? ;
.bss:0041314C                 db    ? ;
.bss:0041314D                 db    ? ;
.bss:0041314E                 db    ? ;
.bss:0041314F                 db    ? ;
.bss:00413150                 db    ? ;
.bss:00413151                 db    ? ;
.bss:00413152                 db    ? ;
.bss:00413153                 db    ? ;
.bss:00413154                 db    ? ;
.bss:00413155                 db    ? ;
.bss:00413156                 db    ? ;
.bss:00413157                 db    ? ;
.bss:00413158                 db    ? ;
.bss:00413159                 db    ? ;
.bss:0041315A                 db    ? ;
.bss:0041315B                 db    ? ;
.bss:0041315C                 db    ? ;
.bss:0041315D                 db    ? ;
.bss:0041315E                 db    ? ;
.bss:0041315F                 db    ? ;
.bss:00413160                 db    ? ;
.bss:00413161                 db    ? ;
.bss:00413162                 db    ? ;
.bss:00413163                 db    ? ;
.bss:00413164                 db    ? ;
.bss:00413165                 db    ? ;
.bss:00413166                 db    ? ;
.bss:00413167                 db    ? ;
.bss:00413168                 db    ? ;
.bss:00413169                 db    ? ;
.bss:0041316A                 db    ? ;
.bss:0041316B                 db    ? ;
.bss:0041316C                 db    ? ;
.bss:0041316D                 db    ? ;
.bss:0041316E                 db    ? ;
.bss:0041316F                 db    ? ;
.bss:00413170                 db    ? ;
.bss:00413171                 db    ? ;
.bss:00413172                 db    ? ;
.bss:00413173                 db    ? ;
.bss:00413174                 db    ? ;
.bss:00413175                 db    ? ;
.bss:00413176                 db    ? ;
.bss:00413177                 db    ? ;
.bss:00413178                 db    ? ;
.bss:00413179                 db    ? ;
.bss:0041317A                 db    ? ;
.bss:0041317B                 db    ? ;
.bss:0041317C                 db    ? ;
.bss:0041317D                 db    ? ;
.bss:0041317E                 db    ? ;
.bss:0041317F                 db    ? ;
.bss:00413180                 db    ? ;
.bss:00413181                 db    ? ;
.bss:00413182                 db    ? ;
.bss:00413183                 db    ? ;
.bss:00413184                 db    ? ;
.bss:00413185                 db    ? ;
.bss:00413186                 db    ? ;
.bss:00413187                 db    ? ;
.bss:00413188                 db    ? ;
.bss:00413189                 db    ? ;
.bss:0041318A                 db    ? ;
.bss:0041318B                 db    ? ;
.bss:0041318C                 db    ? ;
.bss:0041318D                 db    ? ;
.bss:0041318E                 db    ? ;
.bss:0041318F                 db    ? ;
.bss:00413190                 db    ? ;
.bss:00413191                 db    ? ;
.bss:00413192                 db    ? ;
.bss:00413193                 db    ? ;
.bss:00413194                 db    ? ;
.bss:00413195                 db    ? ;
.bss:00413196                 db    ? ;
.bss:00413197                 db    ? ;
.bss:00413198                 db    ? ;
.bss:00413199                 db    ? ;
.bss:0041319A                 db    ? ;
.bss:0041319B                 db    ? ;
.bss:0041319C                 db    ? ;
.bss:0041319D                 db    ? ;
.bss:0041319E                 db    ? ;
.bss:0041319F                 db    ? ;
.bss:004131A0 dword_4131A0    dd ?                    ; DATA XREF: .text:loc_408451↑o
.bss:004131A0                                         ; .text:loc_408470↑o ...
.bss:004131A4 dword_4131A4    dd ?                    ; DATA XREF: .text:loc_4084F0↑o
.bss:004131A4                                         ; .text:00408978↑r ...
.bss:004131A8 dword_4131A8    dd ?                    ; DATA XREF: .text:00408972↑r
.bss:004131A8                                         ; sub_408A20+2C↑r
.bss:004131AC dword_4131AC    dd ?                    ; DATA XREF: .text:00408966↑r
.bss:004131AC                                         ; sub_408A20+22↑r
.bss:004131B0 dword_4131B0    dd ?                    ; DATA XREF: .text:00408982↑r
.bss:004131B0                                         ; sub_408A20+36↑r
.bss:004131B4 dword_4131B4    dd ?                    ; DATA XREF: .text:00408992↑r
.bss:004131B4                                         ; sub_408A20+4E↑r
.bss:004131B8 dword_4131B8    dd ?                    ; DATA XREF: .text:004089AF↑r
.bss:004131B8                                         ; sub_408A20+62↑r
.bss:004131BC dword_4131BC    dd ?                    ; DATA XREF: .text:004089A5↑r
.bss:004131BC                                         ; sub_408A20+70↑r
.bss:004131C0 dword_4131C0    dd ?                    ; DATA XREF: .text:00408988↑r
.bss:004131C0                                         ; sub_408A20+7A↑r
.bss:004131C4                 align 10h
.bss:004131D0 ; char *Str1
.bss:004131D0 Str1            dd ?                    ; DATA XREF: sub_409114:loc_40914D↑w
.bss:004131D0                                         ; sub_409114:loc_409280↑r
.bss:004131D4                 align 10h
.bss:004131E0 dword_4131E0    dd ?                    ; DATA XREF: sub_409114+2D↑r
.bss:004131E0                                         ; sub_409114+3F↑w
.bss:004131E4                 align 10h
.bss:004131F0 dword_4131F0    dd ?                    ; DATA XREF: sub_409DD0+100↑r
.bss:004131F0                                         ; sub_409DD0+308↑w
.bss:004131F4                 align 10h
.bss:00413200 ; char *Str
.bss:00413200 Str             dd ?                    ; DATA XREF: sub_409DD0:loc_40A134↑r
.bss:00413200                                         ; sub_409DD0+3B6↑r ...
.bss:00413204                 align 10h
.bss:00413210 dword_413210    dd ?                    ; DATA XREF: sub_40BAA0+1C↑r
.bss:00413210                                         ; sub_40BAA0+104↑w
.bss:00413214                 align 10h
.bss:00413220 dword_413220    dd ?                    ; DATA XREF: sub_40BAA0+B↑r
.bss:00413220                                         ; sub_40BAA0+71↑w
.bss:00413224                 align 10h
.bss:00413230 dword_413230    dd ?                    ; DATA XREF: sub_40BAA0+85↑r
.bss:00413230                                         ; sub_40BAA0+B9↑w
.bss:00413234 dword_413234    dd ?                    ; DATA XREF: sub_40BAA0+C4↑w
.bss:00413238 dword_413238    dd ?                    ; DATA XREF: sub_40BAA0+2E↑o
.bss:00413238                                         ; sub_40BAA0+CF↑w
.bss:0041323C dword_41323C    dd ?                    ; DATA XREF: sub_40BAA0+DA↑w
.bss:00413240                 db    ? ;
.bss:00413241                 db    ? ;
.bss:00413242                 db    ? ;
.bss:00413243                 db    ? ;
.bss:00413244                 db    ? ;
.bss:00413245                 db    ? ;
.bss:00413246                 db    ? ;
.bss:00413247                 db    ? ;
.bss:00413248                 db    ? ;
.bss:00413249                 db    ? ;
.bss:0041324A                 db    ? ;
.bss:0041324B                 db    ? ;
.bss:0041324C                 db    ? ;
.bss:0041324D                 db    ? ;
.bss:0041324E                 db    ? ;
.bss:0041324F                 db    ? ;
.bss:00413250                 db    ? ;
.bss:00413251                 db    ? ;
.bss:00413252                 db    ? ;
.bss:00413253                 db    ? ;
.bss:00413254                 db    ? ;
.bss:00413255                 db    ? ;
.bss:00413256                 db    ? ;
.bss:00413257                 db    ? ;
.bss:00413258                 db    ? ;
.bss:00413259                 db    ? ;
.bss:0041325A                 db    ? ;
.bss:0041325B                 db    ? ;
.bss:0041325C                 db    ? ;
.bss:0041325D                 db    ? ;
.bss:0041325E                 db    ? ;
.bss:0041325F                 db    ? ;
.bss:00413260                 db    ? ;
.bss:00413261                 db    ? ;
.bss:00413262                 db    ? ;
.bss:00413263                 db    ? ;
.bss:00413264                 db    ? ;
.bss:00413265                 db    ? ;
.bss:00413266                 db    ? ;
.bss:00413267                 db    ? ;
.bss:00413268                 db    ? ;
.bss:00413269                 db    ? ;
.bss:0041326A                 db    ? ;
.bss:0041326B                 db    ? ;
.bss:0041326C                 db    ? ;
.bss:0041326D                 db    ? ;
.bss:0041326E                 db    ? ;
.bss:0041326F                 db    ? ;
.bss:00413270                 db    ? ;
.bss:00413271                 db    ? ;
.bss:00413272                 db    ? ;
.bss:00413273                 db    ? ;
.bss:00413274                 db    ? ;
.bss:00413275                 db    ? ;
.bss:00413276                 db    ? ;
.bss:00413277                 db    ? ;
.bss:00413278                 db    ? ;
.bss:00413279                 db    ? ;
.bss:0041327A                 db    ? ;
.bss:0041327B                 db    ? ;
.bss:0041327C                 db    ? ;
.bss:0041327D                 db    ? ;
.bss:0041327E                 db    ? ;
.bss:0041327F                 db    ? ;
.bss:00413280                 db    ? ;
.bss:00413281                 db    ? ;
.bss:00413282                 db    ? ;
.bss:00413283                 db    ? ;
.bss:00413284                 db    ? ;
.bss:00413285                 db    ? ;
.bss:00413286                 db    ? ;
.bss:00413287                 db    ? ;
.bss:00413288                 db    ? ;
.bss:00413289                 db    ? ;
.bss:0041328A                 db    ? ;
.bss:0041328B                 db    ? ;
.bss:0041328C                 db    ? ;
.bss:0041328D                 db    ? ;
.bss:0041328E                 db    ? ;
.bss:0041328F                 db    ? ;
.bss:00413290                 db    ? ;
.bss:00413291                 db    ? ;
.bss:00413292                 db    ? ;
.bss:00413293                 db    ? ;
.bss:00413294                 db    ? ;
.bss:00413295                 db    ? ;
.bss:00413296                 db    ? ;
.bss:00413297                 db    ? ;
.bss:00413298                 db    ? ;
.bss:00413299                 db    ? ;
.bss:0041329A                 db    ? ;
.bss:0041329B                 db    ? ;
.bss:0041329C                 db    ? ;
.bss:0041329D                 db    ? ;
.bss:0041329E                 db    ? ;
.bss:0041329F                 db    ? ;
.bss:004132A0                 db    ? ;
.bss:004132A1                 db    ? ;
.bss:004132A2                 db    ? ;
.bss:004132A3                 db    ? ;
.bss:004132A4                 db    ? ;
.bss:004132A5                 db    ? ;
.bss:004132A6                 db    ? ;
.bss:004132A7                 db    ? ;
.bss:004132A8                 db    ? ;
.bss:004132A9                 db    ? ;
.bss:004132AA                 db    ? ;
.bss:004132AB                 db    ? ;
.bss:004132AC                 db    ? ;
.bss:004132AD                 db    ? ;
.bss:004132AE                 db    ? ;
.bss:004132AF                 db    ? ;
.bss:004132B0                 db    ? ;
.bss:004132B1                 db    ? ;
.bss:004132B2                 db    ? ;
.bss:004132B3                 db    ? ;
.bss:004132B4                 db    ? ;
.bss:004132B5                 db    ? ;
.bss:004132B6                 db    ? ;
.bss:004132B7                 db    ? ;
.bss:004132B8                 db    ? ;
.bss:004132B9                 db    ? ;
.bss:004132BA                 db    ? ;
.bss:004132BB                 db    ? ;
.bss:004132BC                 db    ? ;
.bss:004132BD                 db    ? ;
.bss:004132BE                 db    ? ;
.bss:004132BF                 db    ? ;
.bss:004132C0                 db    ? ;
.bss:004132C1                 db    ? ;
.bss:004132C2                 db    ? ;
.bss:004132C3                 db    ? ;
.bss:004132C4                 db    ? ;
.bss:004132C5                 db    ? ;
.bss:004132C6                 db    ? ;
.bss:004132C7                 db    ? ;
.bss:004132C8                 db    ? ;
.bss:004132C9                 db    ? ;
.bss:004132CA                 db    ? ;
.bss:004132CB                 db    ? ;
.bss:004132CC                 db    ? ;
.bss:004132CD                 db    ? ;
.bss:004132CE                 db    ? ;
.bss:004132CF                 db    ? ;
.bss:004132D0                 db    ? ;
.bss:004132D1                 db    ? ;
.bss:004132D2                 db    ? ;
.bss:004132D3                 db    ? ;
.bss:004132D4                 db    ? ;
.bss:004132D5                 db    ? ;
.bss:004132D6                 db    ? ;
.bss:004132D7                 db    ? ;
.bss:004132D8                 db    ? ;
.bss:004132D9                 db    ? ;
.bss:004132DA                 db    ? ;
.bss:004132DB                 db    ? ;
.bss:004132DC                 db    ? ;
.bss:004132DD                 db    ? ;
.bss:004132DE                 db    ? ;
.bss:004132DF                 db    ? ;
.bss:004132E0                 db    ? ;
.bss:004132E1                 db    ? ;
.bss:004132E2                 db    ? ;
.bss:004132E3                 db    ? ;
.bss:004132E4                 db    ? ;
.bss:004132E5                 db    ? ;
.bss:004132E6                 db    ? ;
.bss:004132E7                 db    ? ;
.bss:004132E8                 db    ? ;
.bss:004132E9                 db    ? ;
.bss:004132EA                 db    ? ;
.bss:004132EB                 db    ? ;
.bss:004132EC                 db    ? ;
.bss:004132ED                 db    ? ;
.bss:004132EE                 db    ? ;
.bss:004132EF                 db    ? ;
.bss:004132F0                 db    ? ;
.bss:004132F1                 db    ? ;
.bss:004132F2                 db    ? ;
.bss:004132F3                 db    ? ;
.bss:004132F4                 db    ? ;
.bss:004132F5                 db    ? ;
.bss:004132F6                 db    ? ;
.bss:004132F7                 db    ? ;
.bss:004132F8                 db    ? ;
.bss:004132F9                 db    ? ;
.bss:004132FA                 db    ? ;
.bss:004132FB                 db    ? ;
.bss:004132FC                 db    ? ;
.bss:004132FD                 db    ? ;
.bss:004132FE                 db    ? ;
.bss:004132FF                 db    ? ;
.bss:00413300                 db    ? ;
.bss:00413301                 db    ? ;
.bss:00413302                 db    ? ;
.bss:00413303                 db    ? ;
.bss:00413304                 db    ? ;
.bss:00413305                 db    ? ;
.bss:00413306                 db    ? ;
.bss:00413307                 db    ? ;
.bss:00413308                 db    ? ;
.bss:00413309                 db    ? ;
.bss:0041330A                 db    ? ;
.bss:0041330B                 db    ? ;
.bss:0041330C                 db    ? ;
.bss:0041330D                 db    ? ;
.bss:0041330E                 db    ? ;
.bss:0041330F                 db    ? ;
.bss:00413310                 db    ? ;
.bss:00413311                 db    ? ;
.bss:00413312                 db    ? ;
.bss:00413313                 db    ? ;
.bss:00413314                 db    ? ;
.bss:00413315                 db    ? ;
.bss:00413316                 db    ? ;
.bss:00413317                 db    ? ;
.bss:00413318                 db    ? ;
.bss:00413319                 db    ? ;
.bss:0041331A                 db    ? ;
.bss:0041331B                 db    ? ;
.bss:0041331C                 db    ? ;
.bss:0041331D                 db    ? ;
.bss:0041331E                 db    ? ;
.bss:0041331F                 db    ? ;
.bss:00413320                 db    ? ;
.bss:00413321                 db    ? ;
.bss:00413322                 db    ? ;
.bss:00413323                 db    ? ;
.bss:00413324                 db    ? ;
.bss:00413325                 db    ? ;
.bss:00413326                 db    ? ;
.bss:00413327                 db    ? ;
.bss:00413328                 db    ? ;
.bss:00413329                 db    ? ;
.bss:0041332A                 db    ? ;
.bss:0041332B                 db    ? ;
.bss:0041332C                 db    ? ;
.bss:0041332D                 db    ? ;
.bss:0041332E                 db    ? ;
.bss:0041332F                 db    ? ;
.bss:00413330                 db    ? ;
.bss:00413331                 db    ? ;
.bss:00413332                 db    ? ;
.bss:00413333                 db    ? ;
.bss:00413334                 db    ? ;
.bss:00413335                 db    ? ;
.bss:00413336                 db    ? ;
.bss:00413337                 db    ? ;
.bss:00413338                 db    ? ;
.bss:00413339                 db    ? ;
.bss:0041333A                 db    ? ;
.bss:0041333B                 db    ? ;
.bss:0041333C                 db    ? ;
.bss:0041333D                 db    ? ;
.bss:0041333E                 db    ? ;
.bss:0041333F                 db    ? ;
.bss:00413340                 db    ? ;
.bss:00413341                 db    ? ;
.bss:00413342                 db    ? ;
.bss:00413343                 db    ? ;
.bss:00413344                 db    ? ;
.bss:00413345                 db    ? ;
.bss:00413346                 db    ? ;
.bss:00413347                 db    ? ;
.bss:00413348                 db    ? ;
.bss:00413349                 db    ? ;
.bss:0041334A                 db    ? ;
.bss:0041334B                 db    ? ;
.bss:0041334C                 db    ? ;
.bss:0041334D                 db    ? ;
.bss:0041334E                 db    ? ;
.bss:0041334F                 db    ? ;
.bss:00413350                 db    ? ;
.bss:00413351                 db    ? ;
.bss:00413352                 db    ? ;
.bss:00413353                 db    ? ;
.bss:00413354                 db    ? ;
.bss:00413355                 db    ? ;
.bss:00413356                 db    ? ;
.bss:00413357                 db    ? ;
.bss:00413358                 db    ? ;
.bss:00413359                 db    ? ;
.bss:0041335A                 db    ? ;
.bss:0041335B                 db    ? ;
.bss:0041335C                 db    ? ;
.bss:0041335D                 db    ? ;
.bss:0041335E                 db    ? ;
.bss:0041335F                 db    ? ;
.bss:00413360                 db    ? ;
.bss:00413361                 db    ? ;
.bss:00413362                 db    ? ;
.bss:00413363                 db    ? ;
.bss:00413364                 db    ? ;
.bss:00413365                 db    ? ;
.bss:00413366                 db    ? ;
.bss:00413367                 db    ? ;
.bss:00413368                 db    ? ;
.bss:00413369                 db    ? ;
.bss:0041336A                 db    ? ;
.bss:0041336B                 db    ? ;
.bss:0041336C                 db    ? ;
.bss:0041336D                 db    ? ;
.bss:0041336E                 db    ? ;
.bss:0041336F                 db    ? ;
.bss:00413370                 db    ? ;
.bss:00413371                 db    ? ;
.bss:00413372                 db    ? ;
.bss:00413373                 db    ? ;
.bss:00413374                 db    ? ;
.bss:00413375                 db    ? ;
.bss:00413376                 db    ? ;
.bss:00413377                 db    ? ;
.bss:00413378                 db    ? ;
.bss:00413379                 db    ? ;
.bss:0041337A                 db    ? ;
.bss:0041337B                 db    ? ;
.bss:0041337C                 db    ? ;
.bss:0041337D                 db    ? ;
.bss:0041337E                 db    ? ;
.bss:0041337F                 db    ? ;
.bss:00413380                 db    ? ;
.bss:00413381                 db    ? ;
.bss:00413382                 db    ? ;
.bss:00413383                 db    ? ;
.bss:00413384                 db    ? ;
.bss:00413385                 db    ? ;
.bss:00413386                 db    ? ;
.bss:00413387                 db    ? ;
.bss:00413388                 db    ? ;
.bss:00413389                 db    ? ;
.bss:0041338A                 db    ? ;
.bss:0041338B                 db    ? ;
.bss:0041338C                 db    ? ;
.bss:0041338D                 db    ? ;
.bss:0041338E                 db    ? ;
.bss:0041338F                 db    ? ;
.bss:00413390                 db    ? ;
.bss:00413391                 db    ? ;
.bss:00413392                 db    ? ;
.bss:00413393                 db    ? ;
.bss:00413394                 db    ? ;
.bss:00413395                 db    ? ;
.bss:00413396                 db    ? ;
.bss:00413397                 db    ? ;
.bss:00413398                 db    ? ;
.bss:00413399                 db    ? ;
.bss:0041339A                 db    ? ;
.bss:0041339B                 db    ? ;
.bss:0041339C                 db    ? ;
.bss:0041339D                 db    ? ;
.bss:0041339E                 db    ? ;
.bss:0041339F                 db    ? ;
.bss:004133A0                 db    ? ;
.bss:004133A1                 db    ? ;
.bss:004133A2                 db    ? ;
.bss:004133A3                 db    ? ;
.bss:004133A4                 db    ? ;
.bss:004133A5                 db    ? ;
.bss:004133A6                 db    ? ;
.bss:004133A7                 db    ? ;
.bss:004133A8                 db    ? ;
.bss:004133A9                 db    ? ;
.bss:004133AA                 db    ? ;
.bss:004133AB                 db    ? ;
.bss:004133AC                 db    ? ;
.bss:004133AD                 db    ? ;
.bss:004133AE                 db    ? ;
.bss:004133AF                 db    ? ;
.bss:004133B0                 db    ? ;
.bss:004133B1                 db    ? ;
.bss:004133B2                 db    ? ;
.bss:004133B3                 db    ? ;
.bss:004133B4                 db    ? ;
.bss:004133B5                 db    ? ;
.bss:004133B6                 db    ? ;
.bss:004133B7                 db    ? ;
.bss:004133B8                 db    ? ;
.bss:004133B9                 db    ? ;
.bss:004133BA                 db    ? ;
.bss:004133BB                 db    ? ;
.bss:004133BC                 db    ? ;
.bss:004133BD                 db    ? ;
.bss:004133BE                 db    ? ;
.bss:004133BF                 db    ? ;
.bss:004133C0                 db    ? ;
.bss:004133C1                 db    ? ;
.bss:004133C2                 db    ? ;
.bss:004133C3                 db    ? ;
.bss:004133C4                 db    ? ;
.bss:004133C5                 db    ? ;
.bss:004133C6                 db    ? ;
.bss:004133C7                 db    ? ;
.bss:004133C8                 db    ? ;
.bss:004133C9                 db    ? ;
.bss:004133CA                 db    ? ;
.bss:004133CB                 db    ? ;
.bss:004133CC                 db    ? ;
.bss:004133CD                 db    ? ;
.bss:004133CE                 db    ? ;
.bss:004133CF                 db    ? ;
.bss:004133D0                 db    ? ;
.bss:004133D1                 db    ? ;
.bss:004133D2                 db    ? ;
.bss:004133D3                 db    ? ;
.bss:004133D4                 db    ? ;
.bss:004133D5                 db    ? ;
.bss:004133D6                 db    ? ;
.bss:004133D7                 db    ? ;
.bss:004133D8                 db    ? ;
.bss:004133D9                 db    ? ;
.bss:004133DA                 db    ? ;
.bss:004133DB                 db    ? ;
.bss:004133DC                 db    ? ;
.bss:004133DD                 db    ? ;
.bss:004133DE                 db    ? ;
.bss:004133DF                 db    ? ;
.bss:004133E0                 db    ? ;
.bss:004133E1                 db    ? ;
.bss:004133E2                 db    ? ;
.bss:004133E3                 db    ? ;
.bss:004133E4                 db    ? ;
.bss:004133E5                 db    ? ;
.bss:004133E6                 db    ? ;
.bss:004133E7                 db    ? ;
.bss:004133E8                 db    ? ;
.bss:004133E9                 db    ? ;
.bss:004133EA                 db    ? ;
.bss:004133EB                 db    ? ;
.bss:004133EC                 db    ? ;
.bss:004133ED                 db    ? ;
.bss:004133EE                 db    ? ;
.bss:004133EF                 db    ? ;
.bss:004133F0                 db    ? ;
.bss:004133F1                 db    ? ;
.bss:004133F2                 db    ? ;
.bss:004133F3                 db    ? ;
.bss:004133F4                 db    ? ;
.bss:004133F5                 db    ? ;
.bss:004133F6                 db    ? ;
.bss:004133F7                 db    ? ;
.bss:004133F8                 db    ? ;
.bss:004133F9                 db    ? ;
.bss:004133FA                 db    ? ;
.bss:004133FB                 db    ? ;
.bss:004133FC                 db    ? ;
.bss:004133FD                 db    ? ;
.bss:004133FE                 db    ? ;
.bss:004133FF                 db    ? ;
.bss:00413400                 db    ? ;
.bss:00413401                 db    ? ;
.bss:00413402                 db    ? ;
.bss:00413403                 db    ? ;
.bss:00413404                 db    ? ;
.bss:00413405                 db    ? ;
.bss:00413406                 db    ? ;
.bss:00413407                 db    ? ;
.bss:00413408                 db    ? ;
.bss:00413409                 db    ? ;
.bss:0041340A                 db    ? ;
.bss:0041340B                 db    ? ;
.bss:0041340C                 db    ? ;
.bss:0041340D                 db    ? ;
.bss:0041340E                 db    ? ;
.bss:0041340F                 db    ? ;
.bss:00413410                 db    ? ;
.bss:00413411                 db    ? ;
.bss:00413412                 db    ? ;
.bss:00413413                 db    ? ;
.bss:00413414                 db    ? ;
.bss:00413415                 db    ? ;
.bss:00413416                 db    ? ;
.bss:00413417                 db    ? ;
.bss:00413418                 db    ? ;
.bss:00413419                 db    ? ;
.bss:0041341A                 db    ? ;
.bss:0041341B                 db    ? ;
.bss:0041341C                 db    ? ;
.bss:0041341D                 db    ? ;
.bss:0041341E                 db    ? ;
.bss:0041341F                 db    ? ;
.bss:00413420                 db    ? ;
.bss:00413421                 db    ? ;
.bss:00413422                 db    ? ;
.bss:00413423                 db    ? ;
.bss:00413424                 db    ? ;
.bss:00413425                 db    ? ;
.bss:00413426                 db    ? ;
.bss:00413427                 db    ? ;
.bss:00413428                 db    ? ;
.bss:00413429                 db    ? ;
.bss:0041342A                 db    ? ;
.bss:0041342B                 db    ? ;
.bss:0041342C                 db    ? ;
.bss:0041342D                 db    ? ;
.bss:0041342E                 db    ? ;
.bss:0041342F                 db    ? ;
.bss:00413430 dword_413430    dd ?                    ; DATA XREF: sub_40C830+3E↑r
.bss:00413430                                         ; sub_40C830+F5↑w
.bss:00413434 dword_413434    dd ?                    ; DATA XREF: sub_40C830+38↑r
.bss:00413434                                         ; sub_40C830+EB↑w
.bss:00413438                 align 10h
.bss:00413440 dword_413440    dd ?                    ; DATA XREF: sub_40D830+8↑r
.bss:00413440                                         ; sub_40D940:loc_40D9C2↑w ...
.bss:00413444                 align 10h
.bss:00413450 ; struct _OSVERSIONINFOA VersionInformation
.bss:00413450 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40D940:loc_40D960↑o
.bss:00413450                                         ; sub_40D940+2C↑w ...
.bss:004134E4 word_4134E4     dw ?                    ; DATA XREF: sub_40D940:loc_40D9F3↑r
.bss:004134E6                 align 4
.bss:004134E8 word_4134E8     dw ?                    ; DATA XREF: .text:loc_40D3B6↑r
.bss:004134E8                                         ; .text:0040D3E4↑r ...
.bss:004134EA byte_4134EA     db ?                    ; DATA XREF: .text:0040D375↑r
.bss:004134EB                 align 10h
.bss:004134F0 dword_4134F0    dd ?                    ; DATA XREF: sub_40D940+6↑r
.bss:004134F0                                         ; sub_40D940+75↑w
.bss:004134F4                 align 10h
.bss:00413500 ; LARGE_INTEGER Frequency
.bss:00413500 Frequency       LARGE_INTEGER <?>       ; DATA XREF: sub_40EDE0+D↑r
.bss:00413500                                         ; sub_40EDE0:loc_40EE00↑o ...
.bss:00413508                 align 10h
.bss:00413510 dword_413510    dd ?                    ; DATA XREF: sub_40F3A0+6E↑r
.bss:00413510                                         ; sub_40F3A0+9A↑r ...
.bss:00413514 dword_413514    dd ?                    ; DATA XREF: sub_40F3A0:loc_40F408↑r
.bss:00413514                                         ; sub_40F3A0+A0↑r ...
.bss:00413518                 align 10h
.bss:00413520 dword_413520    dd ?                    ; DATA XREF: sub_40F850↑r
.bss:00413520                                         ; .text:loc_40F892↑w
.bss:00413524                 align 10h
.bss:00413530 dword_413530    dd ?                    ; DATA XREF: sub_401A00+3B↑w
.bss:00413530                                         ; sub_401A00+117↑r ...
.bss:00413534                 db    ? ;
.bss:00413535                 db    ? ;
.bss:00413536                 db    ? ;
.bss:00413537                 db    ? ;
.bss:00413538                 db    ? ;
.bss:00413539                 db    ? ;
.bss:0041353A                 db    ? ;
.bss:0041353B                 db    ? ;
.bss:0041353C                 db    ? ;
.bss:0041353D                 db    ? ;
.bss:0041353E                 db    ? ;
.bss:0041353F                 db    ? ;
.bss:00413540                 db    ? ;
.bss:00413541                 db    ? ;
.bss:00413542                 db    ? ;
.bss:00413543                 db    ? ;
.bss:00413544                 db    ? ;
.bss:00413545                 db    ? ;
.bss:00413546                 db    ? ;
.bss:00413547                 db    ? ;
.bss:00413548                 db    ? ;
.bss:00413549                 db    ? ;
.bss:0041354A                 db    ? ;
.bss:0041354B                 db    ? ;
.bss:0041354C                 db    ? ;
.bss:0041354D                 db    ? ;
.bss:0041354E                 db    ? ;
.bss:0041354F                 db    ? ;
.bss:00413550 ; char *dword_413550
.bss:00413550 dword_413550    dd ?                    ; DATA XREF: sub_401A00+31C↑r
.bss:00413550                                         ; sub_401A00+360↑r ...
.bss:00413554                 align 10h
.bss:00413560 dword_413560    dd ?                    ; CODE XREF: sub_409114+63↑p
.bss:00413560                                         ; DATA XREF: sub_409010+1E↑r ...
.bss:00413564                 align 10h
.bss:00413570 dword_413570    dd ?                    ; DATA XREF: sub_409010+4E↑w
.bss:00413570                                         ; sub_409114+AB↑w
.bss:00413574                 db    ? ;
.bss:00413575                 db    ? ;
.bss:00413576                 db    ? ;
.bss:00413577                 db    ? ;
.bss:00413578                 db    ? ;
.bss:00413579                 db    ? ;
.bss:0041357A                 db    ? ;
.bss:0041357B                 db    ? ;
.bss:0041357C                 db    ? ;
.bss:0041357D                 db    ? ;
.bss:0041357E                 db    ? ;
.bss:0041357F                 db    ? ;
.bss:00413580                 db    ? ;
.bss:00413581                 db    ? ;
.bss:00413582                 db    ? ;
.bss:00413583                 db    ? ;
.bss:00413584                 db    ? ;
.bss:00413585                 db    ? ;
.bss:00413586                 db    ? ;
.bss:00413587                 db    ? ;
.bss:00413588                 db    ? ;
.bss:00413589                 db    ? ;
.bss:0041358A                 db    ? ;
.bss:0041358B                 db    ? ;
.bss:0041358C                 db    ? ;
.bss:0041358D                 db    ? ;
.bss:0041358E                 db    ? ;
.bss:0041358F                 db    ? ;
.bss:00413590                 db    ? ;
.bss:00413591                 db    ? ;
.bss:00413592                 db    ? ;
.bss:00413593                 db    ? ;
.bss:00413594                 db    ? ;
.bss:00413595                 db    ? ;
.bss:00413596                 db    ? ;
.bss:00413597                 db    ? ;
.bss:00413598                 db    ? ;
.bss:00413599                 db    ? ;
.bss:0041359A                 db    ? ;
.bss:0041359B                 db    ? ;
.bss:0041359C                 db    ? ;
.bss:0041359D                 db    ? ;
.bss:0041359E                 db    ? ;
.bss:0041359F                 db    ? ;
.bss:004135A0 dword_4135A0    dd ?                    ; DATA XREF: sub_409114+13↑r
.bss:004135A4                 align 1000h
.bss:004135A4 _bss            ends
.bss:004135A4
.idata:00414000 ; Section 4. (virtual address 00014000)
.idata:00414000 ; Virtual size                  : 00000E5C (   3676.)
.idata:00414000 ; Section size in file          : 00001000 (   4096.)
.idata:00414000 ; Offset to raw data for section: 00011400
.idata:00414000 ; Flags C0000040: Data Readable Writable
.idata:00414000 ; Alignment     : default
.idata:00414000 ; ===========================================================================
.idata:00414000
.idata:00414000 ; Segment type: Externs
.idata:00414000 ; _idata
.idata:00414000
.idata:00414001
.idata:004142C4 ;
.idata:004142C4 ; Imports from libintl3.dll
.idata:004142C4 ;
.idata:004142C4                 extrn __imp_libintl_bindtextdomain:dword
.idata:004142C4                                         ; CODE XREF: sub_401A00+5C↑p
.idata:004142C4                                         ; DATA XREF: sub_401A00+5C↑r ...
.idata:004142C8                 extrn libintl_gettext:dword
.idata:004142C8                                         ; CODE XREF: sub_401A00+10B↑p
.idata:004142C8                                         ; sub_401A00+1A8↑p ...
.idata:004142CC                 extrn libintl_textdomain:dword
.idata:004142CC                                         ; CODE XREF: sub_401A00+69↑p
.idata:004142CC                                         ; DATA XREF: sub_401A00+69↑r ...
.idata:004142D0
.idata:004142D8 ;
.idata:004142D8 ; Imports from ADVAPI32.DLL
.idata:004142D8 ;
.idata:004142D8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004142D8                 extrn __imp_RegCloseKey:dword
.idata:004142D8                                         ; DATA XREF: RegCloseKey↑r
.idata:004142DC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004142DC                 extrn __imp_RegOpenKeyExA:dword
.idata:004142DC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004142E0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004142E0                 extrn __imp_RegQueryValueExA:dword
.idata:004142E0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004142E4
.idata:004142EC ;
.idata:004142EC ; Imports from KERNEL32.dll
.idata:004142EC ;
.idata:004142EC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004142EC                 extrn __imp_AreFileApisANSI:dword
.idata:004142EC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004142F0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004142F0                 extrn __imp_CloseHandle:dword
.idata:004142F0                                         ; DATA XREF: CloseHandle↑r
.idata:004142F4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004142F4                 extrn __imp_CreateDirectoryA:dword
.idata:004142F4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004142F8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004142F8                 extrn __imp_CreateFileA:dword
.idata:004142F8                                         ; DATA XREF: CreateFileA↑r
.idata:004142FC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004142FC                 extrn __imp_DeviceIoControl:dword
.idata:004142FC                                         ; DATA XREF: DeviceIoControl↑r
.idata:00414300 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00414300                 extrn __imp_ExitProcess:dword
.idata:00414300                                         ; DATA XREF: ExitProcess↑r
.idata:00414304 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00414304                 extrn __imp_FindClose:dword
.idata:00414304                                         ; DATA XREF: FindClose↑r
.idata:00414308 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00414308                 extrn __imp_FindFirstFileA:dword
.idata:00414308                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041430C ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041430C                 extrn __imp_FindNextFileA:dword
.idata:0041430C                                         ; DATA XREF: FindNextFileA↑r
.idata:00414310 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00414310                 extrn __imp_FreeLibrary:dword
.idata:00414310                                         ; DATA XREF: FreeLibrary↑r
.idata:00414314 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00414314                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00414314                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00414318 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00414318                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00414318                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041431C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041431C                 extrn __imp_GetDriveTypeA:dword
.idata:0041431C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00414320 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00414320                 extrn __imp_GetFileAttributesA:dword
.idata:00414320                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00414324 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00414324                 extrn __imp_GetFileInformationByHandle:dword
.idata:00414324                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00414328 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00414328                 extrn __imp_GetFileSize:dword
.idata:00414328                                         ; DATA XREF: GetFileSize↑r
.idata:0041432C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041432C                 extrn __imp_GetFileType:dword
.idata:0041432C                                         ; DATA XREF: GetFileType↑r
.idata:00414330 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00414330                 extrn __imp_GetFullPathNameA:dword
.idata:00414330                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00414334 ; DWORD (__stdcall *GetLastError)()
.idata:00414334                 extrn __imp_GetLastError:dword
.idata:00414334                                         ; DATA XREF: GetLastError↑r
.idata:00414338 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00414338                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00414338                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041433C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041433C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041433C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00414340 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00414340                 extrn __imp_GetModuleHandleA:dword
.idata:00414340                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00414344 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00414344                 extrn __imp_GetProcAddress:dword
.idata:00414344                                         ; DATA XREF: GetProcAddress↑r
.idata:00414348 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00414348                 extrn __imp_GetProcessHeap:dword
.idata:00414348                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041434C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041434C                 extrn __imp_GetShortPathNameA:dword
.idata:0041434C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00414350 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00414350                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00414350                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00414354 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00414354                 extrn __imp_GetTimeZoneInformation:dword
.idata:00414354                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00414358 ; DWORD (__stdcall *GetVersion)()
.idata:00414358                 extrn __imp_GetVersion:dword
.idata:00414358                                         ; DATA XREF: GetVersion↑r
.idata:0041435C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041435C                 extrn __imp_GetVersionExA:dword
.idata:0041435C                                         ; DATA XREF: GetVersionExA↑r
.idata:00414360 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00414360                 extrn __imp_GetVolumeInformationA:dword
.idata:00414360                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00414364 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00414364                 extrn __imp_HeapAlloc:dword
.idata:00414364                                         ; DATA XREF: HeapAlloc↑r
.idata:00414368 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00414368                 extrn __imp_HeapFree:dword
.idata:00414368                                         ; DATA XREF: HeapFree↑r
.idata:0041436C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041436C                 extrn __imp_LoadLibraryA:dword
.idata:0041436C                                         ; DATA XREF: LoadLibraryA↑r
.idata:00414370 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00414370                 extrn __imp_MultiByteToWideChar:dword
.idata:00414370                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00414374 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00414374                 extrn __imp_PeekNamedPipe:dword
.idata:00414374                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00414378 ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:00414378                 extrn __imp_QueryPerformanceFrequency:dword
.idata:00414378                                         ; DATA XREF: QueryPerformanceFrequency↑r
.idata:0041437C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041437C                 extrn __imp_SetErrorMode:dword
.idata:0041437C                                         ; DATA XREF: SetErrorMode↑r
.idata:00414380 ; BOOL (__stdcall *SetFileTime)(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.idata:00414380                 extrn __imp_SetFileTime:dword
.idata:00414380                                         ; DATA XREF: SetFileTime↑r
.idata:00414384 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00414384                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00414384                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00414388 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00414388                 extrn __imp_UnlockFile:dword
.idata:00414388                                         ; DATA XREF: UnlockFile↑r
.idata:0041438C ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041438C                 extrn __imp_lstrcmpiA:dword
.idata:0041438C                                         ; DATA XREF: lstrcmpiA↑r
.idata:00414390 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00414390                 extrn __imp_lstrcpyA:dword
.idata:00414390                                         ; DATA XREF: lstrcpyA↑r
.idata:00414394
.idata:0041439C ;
.idata:0041439C ; Imports from msvcrt.dll
.idata:0041439C ;
.idata:0041439C ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041439C                 extrn __imp__chmod:dword
.idata:0041439C                                         ; DATA XREF: _chmod↑r
.idata:004143A0 ; int (__cdecl *_close)(int FileHandle)
.idata:004143A0                 extrn __imp__close:dword
.idata:004143A0                                         ; DATA XREF: _close↑r
.idata:004143A4 ; int (__cdecl *_getpid)()
.idata:004143A4                 extrn __imp__getpid:dword
.idata:004143A4                                         ; DATA XREF: _getpid↑r
.idata:004143A8 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004143A8                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004143AC ; char *(__cdecl *_strdup)(const char *String)
.idata:004143AC                 extrn __imp__strdup:dword
.idata:004143AC                                         ; DATA XREF: _strdup↑r
.idata:004143B0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004143B0                 extrn __imp__stricmp:dword
.idata:004143B0                                         ; DATA XREF: _stricmp↑r
.idata:004143B4 ; char *tzname[2]
.idata:004143B4                 extrn _tzname:dword     ; DATA XREF: sub_406830+1E1↑r
.idata:004143B8
.idata:004143C0 ;
.idata:004143C0 ; Imports from MSVCP60.DLL
.idata:004143C0 ;
.idata:004143C0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004143C0                 extrn __imp_mbrtowc:dword
.idata:004143C0                                         ; DATA XREF: mbrtowc↑r
.idata:004143C4
.idata:004143CC ;
.idata:004143CC ; Imports from msvcrt.dll
.idata:004143CC ;
.idata:004143CC                 extrn __imp___getmainargs:dword
.idata:004143CC                                         ; DATA XREF: __getmainargs↑r
.idata:004143D0 ; int _mb_cur_max
.idata:004143D0                 extrn __mb_cur_max:dword
.idata:004143D0                                         ; DATA XREF: sub_406420+12↑r
.idata:004143D0                                         ; sub_406420+60↑r ...
.idata:004143D4 ; char ***(__cdecl *__p__environ)()
.idata:004143D4                 extrn __imp___p__environ:dword
.idata:004143D4                                         ; DATA XREF: __p__environ↑r
.idata:004143D8 ; int *(__cdecl *__p__fmode)()
.idata:004143D8                 extrn __imp___p__fmode:dword
.idata:004143D8                                         ; DATA XREF: __p__fmode↑r
.idata:004143DC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004143DC                 extrn __set_app_type:dword
.idata:004143DC                                         ; CODE XREF: start+D↑p
.idata:004143DC                                         ; .text:0040102D↑p
.idata:004143DC                                         ; DATA XREF: ...
.idata:004143E0                 extrn __imp__assert:dword
.idata:004143E0                                         ; DATA XREF: _assert↑r
.idata:004143E4 ; void (__cdecl *_cexit)()
.idata:004143E4                 extrn __imp__cexit:dword
.idata:004143E4                                         ; DATA XREF: _cexit↑r
.idata:004143E8 ; int (__cdecl *_close_0)(int FileHandle)
.idata:004143E8                 extrn __imp__close_0:dword
.idata:004143E8                                         ; DATA XREF: _close_0↑r
.idata:004143EC ; int *(__cdecl *_errno)()
.idata:004143EC                 extrn __imp__errno:dword
.idata:004143EC                                         ; DATA XREF: _errno↑r
.idata:004143F0 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004143F0                 extrn __imp__fdopen:dword
.idata:004143F0                                         ; DATA XREF: _fdopen↑r
.idata:004143F4 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004143F4                 extrn __imp__filelengthi64:dword
.idata:004143F4                                         ; DATA XREF: _filelengthi64↑r
.idata:004143F8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004143F8                 extrn __imp__flsbuf:dword
.idata:004143F8                                         ; DATA XREF: _flsbuf↑r
.idata:004143FC ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004143FC                 extrn __imp__get_osfhandle:dword
.idata:004143FC                                         ; DATA XREF: _get_osfhandle↑r
.idata:00414400 ; FILE iob[]
.idata:00414400                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00414400                                         ; sub_401080+75↑r ...
.idata:00414404 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00414404                 extrn __imp__isctype:dword
.idata:00414404                                         ; DATA XREF: _isctype↑r
.idata:00414408 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00414408                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00414408                                         ; DATA XREF: .text:0040106C↑r
.idata:0041440C ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0041440C                 extrn __imp__open_0:dword
.idata:0041440C                                         ; DATA XREF: _open_0↑r
.idata:00414410 ; const unsigned __int16 *pctype
.idata:00414410                 extrn _pctype:dword     ; DATA XREF: sub_406420:loc_406560↑r
.idata:00414410                                         ; sub_406420:loc_406572↑r ...
.idata:00414414 ; int (__cdecl *_putenv)(const char *EnvString)
.idata:00414414                 extrn __imp__putenv:dword
.idata:00414414                                         ; DATA XREF: _putenv↑r
.idata:00414418 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00414418                 extrn __imp__setmode:dword
.idata:00414418                                         ; DATA XREF: _setmode↑r
.idata:0041441C ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041441C                 extrn __imp__stricmp_0:dword
.idata:0041441C                                         ; DATA XREF: _stricmp_0↑r
.idata:00414420 ; void (__cdecl __noreturn *abort)()
.idata:00414420                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00414424 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00414424                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00414424                                         ; DATA XREF: sub_401040+C↑r
.idata:00414428 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00414428                 extrn __imp_calloc:dword
.idata:00414428                                         ; DATA XREF: calloc↑r
.idata:0041442C ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0041442C                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00414430 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00414430                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00414434 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00414434                 extrn __imp_fclose:dword
.idata:00414434                                         ; DATA XREF: fclose↑r
.idata:00414438 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00414438                 extrn __imp_fflush:dword
.idata:00414438                                         ; DATA XREF: fflush↑r
.idata:0041443C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041443C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00414440 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00414440                 extrn __imp_fprintf:dword
.idata:00414440                                         ; DATA XREF: fprintf↑r
.idata:00414444 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00414444                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00414448 ; void (__cdecl *free)(void *Block)
.idata:00414448                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041444C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041444C                 extrn __imp_getenv:dword
.idata:0041444C                                         ; DATA XREF: getenv↑r
.idata:00414450 ; struct tm *(__cdecl *gmtime)(const __time32_t *const Time)
.idata:00414450                 extrn __imp_gmtime:dword
.idata:00414450                                         ; DATA XREF: gmtime↑r
.idata:00414454 ; int (__cdecl *isalpha)(int C)
.idata:00414454                 extrn __imp_isalpha:dword
.idata:00414454                                         ; DATA XREF: isalpha↑r
.idata:00414458 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00414458                 extrn __imp_iswctype:dword
.idata:00414458                                         ; DATA XREF: iswctype↑r
.idata:0041445C ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:0041445C                 extrn __imp_localtime:dword
.idata:0041445C                                         ; DATA XREF: localtime↑r
.idata:00414460 ; void *(__cdecl *malloc)(size_t Size)
.idata:00414460                 extrn __imp_malloc:dword
.idata:00414460                                         ; DATA XREF: malloc↑r
.idata:00414464 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00414464                 extrn __imp_memcpy:dword
.idata:00414464                                         ; DATA XREF: memcpy↑r
.idata:00414468 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00414468                 extrn __imp_memset:dword
.idata:00414468                                         ; DATA XREF: memset↑r
.idata:0041446C ; __time32_t (__cdecl *mktime)(struct tm *const Tm)
.idata:0041446C                 extrn __imp_mktime:dword
.idata:0041446C                                         ; DATA XREF: mktime↑r
.idata:00414470 ; int (*printf)(const char *const Format, ...)
.idata:00414470                 extrn __imp_printf:dword
.idata:00414470                                         ; DATA XREF: printf↑r
.idata:00414474 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00414474                 extrn __imp_realloc:dword
.idata:00414474                                         ; DATA XREF: realloc↑r
.idata:00414478 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00414478                 extrn __imp_setlocale:dword
.idata:00414478                                         ; DATA XREF: setlocale↑r
.idata:0041447C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041447C                 extrn __imp_signal:dword
.idata:0041447C                                         ; DATA XREF: signal↑r
.idata:00414480 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00414480                 extrn __imp_sprintf:dword
.idata:00414480                                         ; DATA XREF: sprintf↑r
.idata:00414484 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:00414484                 extrn __imp_sscanf:dword
.idata:00414484                                         ; DATA XREF: sscanf↑r
.idata:00414488 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00414488                 extrn __imp_strcat:dword
.idata:00414488                                         ; DATA XREF: strcat↑r
.idata:0041448C ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041448C                 extrn __imp_strchr:dword
.idata:0041448C                                         ; DATA XREF: strchr↑r
.idata:00414490 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00414490                 extrn __imp_strcmp:dword
.idata:00414490                                         ; DATA XREF: strcmp↑r
.idata:00414494 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:00414494                 extrn __imp_strcpy:dword
.idata:00414494                                         ; DATA XREF: strcpy↑r
.idata:00414498 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00414498                 extrn __imp_strerror:dword
.idata:00414498                                         ; DATA XREF: strerror↑r
.idata:0041449C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041449C                 extrn __imp_strlen:dword
.idata:0041449C                                         ; DATA XREF: strlen↑r
.idata:004144A0 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004144A0                 extrn __imp_strncmp:dword
.idata:004144A0                                         ; DATA XREF: strncmp↑r
.idata:004144A4 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004144A4                 extrn __imp_strncpy:dword
.idata:004144A4                                         ; DATA XREF: strncpy↑r
.idata:004144A8 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004144A8                 extrn __imp_strpbrk:dword
.idata:004144A8                                         ; DATA XREF: strpbrk↑r
.idata:004144AC ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004144AC                 extrn __imp_strrchr:dword
.idata:004144AC                                         ; DATA XREF: strrchr↑r
.idata:004144B0 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004144B0                 extrn __imp_strspn:dword
.idata:004144B0                                         ; DATA XREF: strspn↑r
.idata:004144B4 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004144B4                 extrn __imp_strstr:dword
.idata:004144B4                                         ; DATA XREF: strstr↑r
.idata:004144B8 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:004144B8                 extrn __imp_strtol:dword
.idata:004144B8                                         ; DATA XREF: strtol↑r
.idata:004144BC ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:004144BC                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:004144C0 ; int (__cdecl *toupper)(int C)
.idata:004144C0                 extrn __imp_toupper:dword
.idata:004144C0                                         ; DATA XREF: toupper↑r
.idata:004144C4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004144C4                 extrn __imp_vfprintf:dword
.idata:004144C4                                         ; DATA XREF: vfprintf↑r
.idata:004144C8
.idata:004144D0 ;
.idata:004144D0 ; Imports from OLE32.dll
.idata:004144D0 ;
.idata:004144D0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004144D0                 extrn __imp_CoCreateInstance:dword
.idata:004144D0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004144D4 ; void (__stdcall *CoUninitialize)()
.idata:004144D4                 extrn __imp_CoUninitialize:dword
.idata:004144D4                                         ; DATA XREF: CoUninitialize↑r
.idata:004144D8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004144D8                 extrn __imp_OleInitialize:dword
.idata:004144D8                                         ; DATA XREF: OleInitialize↑r
.idata:004144DC
.idata:004144DC
.idata:004144DC
.idata:004144DC                 end start
