.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 7EAE0A885C7EF8A019B80D55A00E82AF2E9A9465B052156490FF822AC68BC23A
.text:00401000 ; Input MD5    : 858BDB5307C721172E707AF361E2BB82
.text:00401000 ; Input CRC32  : A1336DA1
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/shred.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24E (Wed Apr 20 18:41:18 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00012C90 (  76944.)
.text:00401000 ; Section size in file          : 00012E00 (  77312.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401E80+76↓p
.text:00401040                                         ; .text:004125C0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_412560
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_414000
.text:004010A2                 mov     edx, dword_4140A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_414004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4140C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4140C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_412530
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_414000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_414004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401E80
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_412560
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aExact          db 'exact',0            ; DATA XREF: .text:off_4012C0↓o
.text:00401286 aForce          db 'force',0            ; DATA XREF: .text:004012D0↓o
.text:0040128C aIterations     db 'iterations',0       ; DATA XREF: .text:004012E0↓o
.text:00401297 aSize           db 'size',0             ; DATA XREF: .text:004012F0↓o
.text:0040129C aRemove         db 'remove',0           ; DATA XREF: .text:00401300↓o
.text:004012A3 aVerbose        db 'verbose',0          ; DATA XREF: .text:00401310↓o
.text:004012AB aZero           db 'zero',0             ; DATA XREF: .text:00401320↓o
.text:004012B0 aHelp           db 'help',0             ; DATA XREF: .text:00401330↓o
.text:004012B5 aVersion        db 'version',0          ; DATA XREF: .text:00401340↓o
.text:004012BD                 align 10h
.text:004012C0 off_4012C0      dd offset aExact        ; DATA XREF: sub_401E80+BE↓o
.text:004012C0                                         ; "exact"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 78h
.text:004012D0                 dd offset aForce        ; "force"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 66h
.text:004012E0                 dd offset aIterations   ; "iterations"
.text:004012E4                 dd 1, 0
.text:004012EC                 dd 6Eh
.text:004012F0                 dd offset aSize         ; "size"
.text:004012F4                 dd 1, 0
.text:004012FC                 dd 73h
.text:00401300                 dd offset aRemove       ; "remove"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 75h
.text:00401310                 dd offset aVerbose      ; "verbose"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 76h
.text:00401320                 dd offset aZero         ; "zero"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 7Ah
.text:00401330                 dd offset aHelp         ; "help"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 0FFFFFF7Eh
.text:00401340                 dd offset aVersion      ; "version"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401360 dword_401360    dd 1367DF5Ah            ; DATA XREF: sub_4026E0:loc_4026F0↓r
.text:00401364 ; ---------------------------------------------------------------------------
.text:00401364                 pop     ecx
.text:00401365                 add     cl, bl
.text:00401367                 xchg    eax, ebp
.text:00401368                 dec     ebx
.text:00401369                 db      3Eh
.text:00401369                 push    ss
.text:0040136B                 retn
.text:0040136B ; ---------------------------------------------------------------------------
.text:0040136C                 dd 0F421AD8h, 0D92A4A78h, 0A51A3C49h, 0C4EFEA1Bh, 30609119h
.text:00401380 dword_401380    dd 0FFFFFFFEh, 2, 0     ; DATA XREF: sub_404AB0+19↓o
.text:00401380                                         ; sub_404AB0+71↓o
.text:0040138C                 dd 0FFFh, 2, 555h, 0AAAh, 0FFFFFFFFh, 6, 249h, 492h, 6DBh
.text:0040138C                 dd 924h, 0B6Dh, 0DB6h, 0Ch, 111h, 222h, 333h, 444h, 666h
.text:0040138C                 dd 777h, 888h, 999h, 0BBBh, 0CCCh, 0DDDh, 0EEEh, 0FFFFFFFFh
.text:0040138C                 dd 8, 1000h, 1249h, 1492h, 16DBh, 1924h, 1B6Dh, 1DB6h
.text:0040138C                 dd 1FFFh, 0Eh, 1111h, 1222h, 1333h, 1444h, 1555h, 1666h
.text:0040138C                 dd 1777h, 1888h, 1999h, 1AAAh, 1BBBh, 1CCCh, 1DDDh, 1EEEh
.text:0040138C                 dd 0FFFFFFFFh, 0
.text:0040145C                 align 10h
.text:00401460 ; const char Str[]
.text:00401460 Str             db '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.',0
.text:00401460                                         ; DATA XREF: sub_403800+F4↓o
.text:004014A1 ; const char Locale
.text:004014A1 Locale          db 0                    ; DATA XREF: sub_401E80+33↓o
.text:004014A1                                         ; sub_403D80+CA8↓o
.text:004014A2                 align 20h
.text:004014C0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004014C0                                         ; DATA XREF: sub_401E80+4D↓o
.text:004014E3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401E80+55↓o
.text:004014E3                                         ; sub_401E80+62↓o
.text:004014ED aFnSUvxz        db 'fn:s:uvxz',0        ; DATA XREF: sub_401E80+C6↓o
.text:004014F7 aSInvalidNumber db '%s: invalid number of passes',0
.text:004014F7                                         ; DATA XREF: sub_401E80+19E↓o
.text:00401514                 align 10h
.text:00401520 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401520                                         ; DATA XREF: sub_401E80:loc_40205A↓o
.text:00401520                                         ; sub_4024F0+C↓o
.text:00401547 aColinPlumb     db 'Colin Plumb',0      ; DATA XREF: sub_401E80+233↓o
.text:00401553 a530            db '5.3.0',0            ; DATA XREF: sub_401E80+23B↓o
.text:00401559 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401E80+246↓o
.text:00401567 ; const FILE stru_401567
.text:00401567 stru_401567     FILE <65726873h, 90900064h, 90909090h, 90909090h, 90909090h, \
.text:00401567                                         ; DATA XREF: sub_401E80+24E↓o
.text:00401567                       90909090h, 61735590h, 203A6567h>
.text:00401587                 db  25h ; %
.text:00401588                 db  73h ; s
.text:00401589                 db  20h
.text:0040158A                 db  5Bh ; [
.text:0040158B                 db  4Fh ; O
.text:0040158C                 db  50h ; P
.text:0040158D                 db  54h ; T
.text:0040158E                 db  49h ; I
.text:0040158F                 db  4Fh ; O
.text:00401590                 db  4Eh ; N
.text:00401591                 db  53h ; S
.text:00401592                 db  5Dh ; ]
.text:00401593                 db  20h
.text:00401594                 db  46h ; F
.text:00401595                 db  49h ; I
.text:00401596                 db  4Ch ; L
.text:00401597                 db  45h ; E
.text:00401598                 db  20h
.text:00401599                 db  5Bh ; [
.text:0040159A                 db  2Eh ; .
.text:0040159B                 db  2Eh ; .
.text:0040159C                 db  2Eh ; .
.text:0040159D                 db  5Dh ; ]
.text:0040159E                 db  0Ah
.text:0040159F                 db    0
.text:004015A0 aOverwriteTheSp db 'Overwrite the specified FILE(s) repeatedly, in order to make it h'
.text:004015A0                                         ; DATA XREF: sub_401E80+286↓o
.text:004015A0                                         ; sub_4024F0+5F↓o
.text:004015A0                 db 'arder',0Ah
.text:004015A0                 db 'for even very expensive hardware probing to recover the data.',0Ah
.text:004015A0                 db 0Ah,0
.text:00401627                 align 20h
.text:00401640 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401640                                         ; DATA XREF: sub_401E80+2A8↓o
.text:00401640                                         ; sub_4024F0+81↓o
.text:00401640                 db 'ns too.',0Ah,0
.text:0040168A                 align 20h
.text:004016A0 aFForceChangePe db '  -f, --force    change permissions to allow writing if necessary'
.text:004016A0                                         ; DATA XREF: sub_401E80+2CA↓o
.text:004016A0                                         ; sub_4024F0+A3↓o
.text:004016A0                 db 0Ah
.text:004016A0                 db '  -n, --iterations=N  Overwrite N times instead of the default (%'
.text:004016A0                 db 'd)',0Ah
.text:004016A0                 db '  -s, --size=N   shred this many bytes (suffixes like K, M, G acc'
.text:004016A0                 db 'epted)',0Ah,0
.text:0040176F                 align 20h
.text:00401780 aURemoveTruncat db '  -u, --remove   truncate and remove file after overwriting',0Ah
.text:00401780                                         ; DATA XREF: sub_401E80+2E7↓o
.text:00401780                                         ; sub_4024F0+C0↓o
.text:00401780                 db '  -v, --verbose  show progress',0Ah
.text:00401780                 db '  -x, --exact    do not round file sizes up to the next full bloc'
.text:00401780                 db 'k;',0Ah
.text:00401780                 db '                   this is the default for non-regular files',0Ah
.text:00401780                 db '  -z, --zero     add a final overwrite with zeros to hide shreddi'
.text:00401780                 db 'ng',0Ah,0
.text:004018A1                 align 20h
.text:004018C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004018C0                                         ; DATA XREF: sub_401E80+309↓o
.text:004018C0                                         ; sub_4024F0+E2↓o
.text:004018ED                 align 20h
.text:00401900 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401900                                         ; DATA XREF: sub_401E80+32B↓o
.text:00401900                                         ; sub_4024F0+104↓o
.text:00401936                 align 10h
.text:00401940 aIfFileIsShredS db 0Ah                  ; DATA XREF: sub_401E80+34D↓o
.text:00401940                                         ; sub_4024F0+126↓o
.text:00401940                 db 'If FILE is -, shred standard output.',0Ah
.text:00401940                 db 0Ah
.text:00401940                 db 'Delete FILE(s) if --remove (-u) is specified.  The default is not'
.text:00401940                 db ' to remove',0Ah
.text:00401940                 db 'the files because it is common to operate on device files like /d'
.text:00401940                 db 'ev/hda,',0Ah
.text:00401940                 db 'and those files usually should not be removed.  When operating on'
.text:00401940                 db ' regular',0Ah
.text:00401940                 db 'files, most people use the --remove option.',0Ah
.text:00401940                 db 0Ah,0
.text:00401A74                 align 10h
.text:00401A80 aCautionNoteTha db 'CAUTION: Note that shred relies on a very important assumption:',0Ah
.text:00401A80                                         ; DATA XREF: sub_401E80+36F↓o
.text:00401A80                                         ; sub_4024F0+148↓o
.text:00401A80                 db 'that the file system overwrites data in place.  This is the tradi'
.text:00401A80                 db 'tional',0Ah
.text:00401A80                 db 'way to do things, but many modern file system designs do not sati'
.text:00401A80                 db 'sfy this',0Ah
.text:00401A80                 db 'assumption.  The following are examples of file systems on which '
.text:00401A80                 db 'shred is',0Ah
.text:00401A80                 db 'not effective:',0Ah
.text:00401A80                 db 0Ah,0
.text:00401BAD                 align 20h
.text:00401BC0 aLogStructuredO db '* log-structured or journaled file systems, such as those supplie'
.text:00401BC0                                         ; DATA XREF: sub_401E80+391↓o
.text:00401BC0                                         ; sub_4024F0+16A↓o
.text:00401BC0                 db 'd with',0Ah
.text:00401BC0                 db '  AIX and Solaris (and JFS, ReiserFS, XFS, Ext3, etc.)',0Ah
.text:00401BC0                 db 0Ah
.text:00401BC0                 db '* file systems that write redundant data and carry on even if som'
.text:00401BC0                 db 'e writes',0Ah
.text:00401BC0                 db '  fail, such as RAID-based file systems',0Ah
.text:00401BC0                 db 0Ah
.text:00401BC0                 db '* file systems that make snapshots, such as Network Appliance',27h
.text:00401BC0                 db 's NFS server',0Ah
.text:00401BC0                 db 0Ah,0
.text:00401D00 aFileSystemsTha db '* file systems that cache in temporary locations, such as NFS',0Ah
.text:00401D00                                         ; DATA XREF: sub_401E80+3B3↓o
.text:00401D00                                         ; sub_4024F0+18C↓o
.text:00401D00                 db '  version 3 clients',0Ah
.text:00401D00                 db 0Ah
.text:00401D00                 db '* compressed file systems',0Ah
.text:00401D00                 db 0Ah
.text:00401D00                 db 'In addition, file system backups and remote mirrors may contain c'
.text:00401D00                 db 'opies',0Ah
.text:00401D00                 db 'of the file that cannot be removed, and that will allow a shredde'
.text:00401D00                 db 'd file',0Ah
.text:00401D00                 db 'to be recovered later.',0Ah,0
.text:00401E15 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401E80+3D5↓o
.text:00401E15                                         ; sub_4024F0+1AE↓o
.text:00401E15                 db 'Report bugs to <%s>.',0Ah,0
.text:00401E2C aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401E2C                                         ; DATA XREF: sub_401E80+3E2↓o
.text:00401E2C                                         ; sub_4024F0+1BB↓o
.text:00401E42 ; const char aCbbkkmgtpezy0[]
.text:00401E42 aCbbkkmgtpezy0  db 'cbBkKMGTPEZY0',0    ; DATA XREF: sub_401E80:loc_4022D0↓o
.text:00401E50 aSInvalidFileSi db '%s: invalid file size',0
.text:00401E50                                         ; DATA XREF: sub_401E80+4AF↓o
.text:00401E66 aMissingFileOpe db 'missing file operand',0
.text:00401E66                                         ; DATA XREF: sub_401E80+4F5↓o
.text:00401E7B asc_401E7B      db '-',0                ; DATA XREF: sub_401E80+575↓o
.text:00401E7D                 align 10h
.text:00401E80
.text:00401E80 ; =============== S U B R O U T I N E =======================================
.text:00401E80
.text:00401E80 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401E80
.text:00401E80 sub_401E80      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401E80
.text:00401E80 Category        = dword ptr -4B8h
.text:00401E80 Locale          = dword ptr -4B4h
.text:00401E80 var_4B0         = dword ptr -4B0h
.text:00401E80 var_4AC         = byte ptr -4ACh
.text:00401E80 Str             = dword ptr -4A8h
.text:00401E80 var_4A4         = dword ptr -4A4h
.text:00401E80 var_48E         = byte ptr -48Eh
.text:00401E80 var_48D         = byte ptr -48Dh
.text:00401E80 var_48C         = dword ptr -48Ch
.text:00401E80 var_488         = dword ptr -488h
.text:00401E80 var_484         = dword ptr -484h
.text:00401E80 var_480         = dword ptr -480h
.text:00401E80 var_479         = byte ptr -479h
.text:00401E80 var_478         = dword ptr -478h
.text:00401E80 var_474         = dword ptr -474h
.text:00401E80 var_470         = dword ptr -470h
.text:00401E80 var_46C         = dword ptr -46Ch
.text:00401E80 var_468         = dword ptr -468h
.text:00401E80 var_464         = dword ptr -464h
.text:00401E80 var_460         = dword ptr -460h
.text:00401E80 var_45C         = dword ptr -45Ch
.text:00401E80 var_458         = byte ptr -458h
.text:00401E80 var_457         = byte ptr -457h
.text:00401E80 var_456         = byte ptr -456h
.text:00401E80 var_455         = byte ptr -455h
.text:00401E80 var_448         = dword ptr -448h
.text:00401E80 arg_0           = dword ptr  8
.text:00401E80 arg_4           = dword ptr  0Ch
.text:00401E80
.text:00401E80                 push    ebp
.text:00401E81                 xor     eax, eax
.text:00401E83                 mov     ebp, esp
.text:00401E85                 push    edi
.text:00401E86                 lea     edi, [ebp+var_468]
.text:00401E8C                 push    esi
.text:00401E8D                 push    ebx
.text:00401E8E                 sub     esp, 4ACh
.text:00401E94                 lea     ebx, [ebp+var_448]
.text:00401E9A                 and     esp, 0FFFFFFF0h
.text:00401E9D                 call    __alloca
.text:00401EA2                 call    sub_412600
.text:00401EA7                 mov     [ebp+var_479], 1
.text:00401EAE                 mov     esi, [ebp+arg_4]
.text:00401EB1                 mov     ecx, [esi]
.text:00401EB3                 mov     [esp+4B8h+Locale], offset Locale ; Locale
.text:00401EBB                 mov     [esp+4B8h+Category], 0 ; Category
.text:00401EC2                 mov     ds:dword_415550, ecx
.text:00401EC8                 call    setlocale
.text:00401ECD                 mov     [esp+4B8h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401ED5                 mov     [esp+4B8h+Category], offset aCoreutils ; "coreutils"
.text:00401EDC                 call    ds:libintl_bindtextdomain
.text:00401EE2                 mov     [esp+4B8h+Category], offset aCoreutils ; "coreutils"
.text:00401EE9                 call    ds:libintl_textdomain
.text:00401EEF                 mov     [esp+4B8h+Category], offset sub_408B90 ; void (__cdecl *)()
.text:00401EF6                 call    sub_401040
.text:00401EFB                 mov     [esp+4B8h+Category], ebx
.text:00401EFE                 call    sub_4026E0
.text:00401F03                 cld
.text:00401F04                 xor     eax, eax
.text:00401F06                 mov     ecx, 6
.text:00401F0B                 rep stosd
.text:00401F0D                 mov     eax, 0FFFFFFFFh
.text:00401F12                 mov     edx, 19h
.text:00401F17                 mov     [ebp+var_460], eax
.text:00401F1D                 mov     eax, 0FFFFFFFFh
.text:00401F22                 mov     [ebp+var_464], edx
.text:00401F28                 mov     [ebp+var_45C], eax
.text:00401F2E                 mov     esi, esi
.text:00401F30
.text:00401F30 loc_401F30:                             ; CODE XREF: sub_401E80+1D5↓j
.text:00401F30                                         ; sub_401E80+219↓j ...
.text:00401F30                 mov     [esp+4B8h+Str], 0
.text:00401F38                 mov     ebx, [ebp+arg_4]
.text:00401F3B                 mov     eax, [ebp+arg_0]
.text:00401F3E                 mov     dword ptr [esp+4B8h+var_4AC], offset off_4012C0 ; char
.text:00401F46                 mov     [esp+4B8h+var_4B0], offset aFnSUvxz ; "fn:s:uvxz"
.text:00401F4E                 mov     [esp+4B8h+Locale], ebx
.text:00401F52                 mov     [esp+4B8h+Category], eax
.text:00401F55                 call    sub_408A20
.text:00401F5A                 cmp     eax, 0FFFFFFFFh
.text:00401F5D                 jz      loc_40235C
.text:00401F63                 cmp     eax, 73h ; 's'
.text:00401F66                 jz      loc_4022D0
.text:00401F6C                 cmp     eax, 73h ; 's'
.text:00401F6F                 jg      loc_402277
.text:00401F75                 cmp     eax, 0FFFFFF7Eh
.text:00401F7A                 jz      loc_4020E7
.text:00401F80                 cmp     eax, 0FFFFFF7Eh
.text:00401F85                 jle     loc_40209E
.text:00401F8B                 cmp     eax, 66h ; 'f'
.text:00401F8E                 jz      loc_402092
.text:00401F94                 cmp     eax, 6Eh ; 'n'
.text:00401F97                 jnz     loc_40205A
.text:00401F9D                 mov     [esp+4B8h+Str], 0 ; Str
.text:00401FA5                 mov     edi, ds:dword_415570
.text:00401FAB                 lea     edx, [ebp+var_470]
.text:00401FB1                 mov     dword ptr [esp+4B8h+var_4AC], edx ; int
.text:00401FB5                 mov     [esp+4B8h+var_4B0], 0Ah ; int
.text:00401FBD                 mov     [esp+4B8h+Locale], 0 ; int
.text:00401FC5                 mov     [esp+4B8h+Category], edi ; int
.text:00401FC8                 call    sub_407D90
.text:00401FCD                 test    eax, eax
.text:00401FCF                 jnz     short loc_402010
.text:00401FD1                 mov     edi, [ebp+var_470]
.text:00401FD7                 xor     ecx, ecx
.text:00401FD9                 mov     ebx, [ebp+var_470]
.text:00401FDF                 mov     esi, [ebp+var_46C]
.text:00401FE5                 mov     eax, ecx
.text:00401FE7                 xor     edi, ebx
.text:00401FE9                 xor     eax, esi
.text:00401FEB                 or      eax, edi
.text:00401FED                 jnz     short loc_402010
.text:00401FEF                 xor     ecx, ecx
.text:00401FF1                 mov     edi, ebx
.text:00401FF3                 and     edi, 3FFFFFFFh
.text:00401FF9                 mov     eax, ecx
.text:00401FFB                 xor     edi, ebx
.text:00401FFD                 xor     eax, esi
.text:00401FFF                 or      eax, edi
.text:00402001                 jz      short loc_402049
.text:00402003                 lea     esi, [esi+0]
.text:00402009                 lea     edi, [edi+0]
.text:00402010
.text:00402010 loc_402010:                             ; CODE XREF: sub_401E80+14F↑j
.text:00402010                                         ; sub_401E80+16D↑j
.text:00402010                 mov     ebx, ds:dword_415570
.text:00402016                 mov     [esp+4B8h+Category], ebx ; char *
.text:00402019                 call    sub_406590
.text:0040201E                 mov     [esp+4B8h+Category], offset aSInvalidNumber ; "%s: invalid number of passes"
.text:00402025                 mov     esi, eax
.text:00402027                 call    ds:libintl_gettext
.text:0040202D                 mov     dword ptr [esp+4B8h+var_4AC], esi ; char
.text:00402031                 mov     [esp+4B8h+Locale], 0 ; ErrorMessage
.text:00402039                 mov     [esp+4B8h+Category], 1 ; Code
.text:00402040                 mov     [esp+4B8h+var_4B0], eax ; char *
.text:00402044                 call    sub_40A820
.text:00402049
.text:00402049 loc_402049:                             ; CODE XREF: sub_401E80+181↑j
.text:00402049                 mov     edx, [ebp+var_470]
.text:0040204F                 mov     [ebp+var_464], edx
.text:00402055                 jmp     loc_401F30
.text:0040205A ; ---------------------------------------------------------------------------
.text:0040205A
.text:0040205A loc_40205A:                             ; CODE XREF: sub_401E80+117↑j
.text:0040205A                                         ; sub_401E80+223↓j ...
.text:0040205A                 mov     [esp+4B8h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402061                 call    ds:libintl_gettext
.text:00402067                 mov     ecx, ds:_iob
.text:0040206D                 mov     ebx, ds:dword_415550
.text:00402073                 add     ecx, 40h ; '@'
.text:00402076                 mov     [esp+4B8h+var_4B0], ebx
.text:0040207A                 mov     [esp+4B8h+Locale], eax ; Format
.text:0040207E                 mov     [esp+4B8h+Category], ecx ; Stream
.text:00402081                 call    fprintf
.text:00402086                 mov     [esp+4B8h+Category], 1 ; Code
.text:0040208D
.text:0040208D loc_40208D:                             ; CODE XREF: sub_401E80+265↓j
.text:0040208D                                         ; sub_401E80+613↓j
.text:0040208D                 call    exit
.text:00402092 ; ---------------------------------------------------------------------------
.text:00402092
.text:00402092 loc_402092:                             ; CODE XREF: sub_401E80+10E↑j
.text:00402092                 mov     byte ptr [ebp+var_468], 1
.text:00402099                 jmp     loc_401F30
.text:0040209E ; ---------------------------------------------------------------------------
.text:0040209E
.text:0040209E loc_40209E:                             ; CODE XREF: sub_401E80+105↑j
.text:0040209E                 cmp     eax, 0FFFFFF7Dh
.text:004020A3                 jnz     short loc_40205A
.text:004020A5                 mov     [esp+4B8h+var_4A4], 0
.text:004020AD                 mov     edx, ds:_iob
.text:004020B3                 mov     [esp+4B8h+Str], offset aColinPlumb ; "Colin Plumb"
.text:004020BB                 mov     dword ptr [esp+4B8h+var_4AC], offset a530 ; "5.3.0"
.text:004020C3                 add     edx, 20h ; ' '
.text:004020C6                 mov     [esp+4B8h+var_4B0], offset aGnuCoreutils ; "GNU coreutils"
.text:004020CE                 mov     [esp+4B8h+Locale], offset stru_401567 ; FILE *
.text:004020D6                 mov     [esp+4B8h+Category], edx ; FILE *
.text:004020D9                 call    sub_407CE0
.text:004020DE
.text:004020DE loc_4020DE:                             ; CODE XREF: sub_401E80+3F2↓j
.text:004020DE                 mov     [esp+4B8h+Category], 0
.text:004020E5                 jmp     short loc_40208D
.text:004020E7 ; ---------------------------------------------------------------------------
.text:004020E7
.text:004020E7 loc_4020E7:                             ; CODE XREF: sub_401E80+FA↑j
.text:004020E7                 mov     [esp+4B8h+Category], (offset stru_401567._bufsiz+1)
.text:004020EE                 call    ds:libintl_gettext
.text:004020F4                 mov     esi, ds:dword_415550
.text:004020FA                 mov     [esp+4B8h+Category], eax ; Format
.text:004020FD                 mov     [esp+4B8h+Locale], esi
.text:00402101                 call    printf
.text:00402106                 mov     [esp+4B8h+Category], offset aOverwriteTheSp ; "Overwrite the specified FILE(s) repeate"...
.text:0040210D                 call    ds:libintl_gettext
.text:00402113                 mov     ecx, ds:_iob
.text:00402119                 add     ecx, 20h ; ' '
.text:0040211C                 mov     [esp+4B8h+Locale], ecx ; Stream
.text:00402120                 mov     [esp+4B8h+Category], eax ; Buffer
.text:00402123                 call    fputs
.text:00402128                 mov     [esp+4B8h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:0040212F                 call    ds:libintl_gettext
.text:00402135                 mov     edi, ds:_iob
.text:0040213B                 add     edi, 20h ; ' '
.text:0040213E                 mov     [esp+4B8h+Locale], edi ; Stream
.text:00402142                 mov     [esp+4B8h+Category], eax ; Buffer
.text:00402145                 call    fputs
.text:0040214A                 mov     [esp+4B8h+Category], offset aFForceChangePe ; "  -f, --force    change permissions to "...
.text:00402151                 call    ds:libintl_gettext
.text:00402157                 mov     [esp+4B8h+Locale], 19h
.text:0040215F                 mov     [esp+4B8h+Category], eax ; Format
.text:00402162                 call    printf
.text:00402167                 mov     [esp+4B8h+Category], offset aURemoveTruncat ; "  -u, --remove   truncate and remove fi"...
.text:0040216E                 call    ds:libintl_gettext
.text:00402174                 mov     ebx, ds:_iob
.text:0040217A                 add     ebx, 20h ; ' '
.text:0040217D                 mov     [esp+4B8h+Locale], ebx ; Stream
.text:00402181                 mov     [esp+4B8h+Category], eax ; Buffer
.text:00402184                 call    fputs
.text:00402189                 mov     [esp+4B8h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402190                 call    ds:libintl_gettext
.text:00402196                 mov     esi, ds:_iob
.text:0040219C                 add     esi, 20h ; ' '
.text:0040219F                 mov     [esp+4B8h+Locale], esi ; Stream
.text:004021A3                 mov     [esp+4B8h+Category], eax ; Buffer
.text:004021A6                 call    fputs
.text:004021AB                 mov     [esp+4B8h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004021B2                 call    ds:libintl_gettext
.text:004021B8                 mov     ecx, ds:_iob
.text:004021BE                 add     ecx, 20h ; ' '
.text:004021C1                 mov     [esp+4B8h+Locale], ecx ; Stream
.text:004021C5                 mov     [esp+4B8h+Category], eax ; Buffer
.text:004021C8                 call    fputs
.text:004021CD                 mov     [esp+4B8h+Category], offset aIfFileIsShredS ; "\nIf FILE is -, shred standard output."...
.text:004021D4                 call    ds:libintl_gettext
.text:004021DA                 mov     edi, ds:_iob
.text:004021E0                 add     edi, 20h ; ' '
.text:004021E3                 mov     [esp+4B8h+Locale], edi ; Stream
.text:004021E7                 mov     [esp+4B8h+Category], eax ; Buffer
.text:004021EA                 call    fputs
.text:004021EF                 mov     [esp+4B8h+Category], offset aCautionNoteTha ; "CAUTION: Note that shred relies on a ve"...
.text:004021F6                 call    ds:libintl_gettext
.text:004021FC                 mov     ebx, ds:_iob
.text:00402202                 add     ebx, 20h ; ' '
.text:00402205                 mov     [esp+4B8h+Locale], ebx ; Stream
.text:00402209                 mov     [esp+4B8h+Category], eax ; Buffer
.text:0040220C                 call    fputs
.text:00402211                 mov     [esp+4B8h+Category], offset aLogStructuredO ; "* log-structured or journaled file syst"...
.text:00402218                 call    ds:libintl_gettext
.text:0040221E                 mov     esi, ds:_iob
.text:00402224                 add     esi, 20h ; ' '
.text:00402227                 mov     [esp+4B8h+Locale], esi ; Stream
.text:0040222B                 mov     [esp+4B8h+Category], eax ; Buffer
.text:0040222E                 call    fputs
.text:00402233                 mov     [esp+4B8h+Category], offset aFileSystemsTha ; "* file systems that cache in temporary "...
.text:0040223A                 call    ds:libintl_gettext
.text:00402240                 mov     ecx, ds:_iob
.text:00402246                 add     ecx, 20h ; ' '
.text:00402249                 mov     [esp+4B8h+Locale], ecx ; Stream
.text:0040224D                 mov     [esp+4B8h+Category], eax ; Buffer
.text:00402250                 call    fputs
.text:00402255                 mov     [esp+4B8h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040225C                 call    ds:libintl_gettext
.text:00402262                 mov     [esp+4B8h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040226A                 mov     [esp+4B8h+Category], eax ; Format
.text:0040226D                 call    printf
.text:00402272                 jmp     loc_4020DE
.text:00402277 ; ---------------------------------------------------------------------------
.text:00402277
.text:00402277 loc_402277:                             ; CODE XREF: sub_401E80+EF↑j
.text:00402277                 cmp     eax, 76h ; 'v'
.text:0040227A                 jz      short loc_4022C0
.text:0040227C                 cmp     eax, 76h ; 'v'
.text:0040227F                 jg      short loc_402296
.text:00402281                 cmp     eax, 75h ; 'u'
.text:00402284                 jnz     loc_40205A
.text:0040228A                 mov     [ebp+var_458], 1
.text:00402291                 jmp     loc_401F30
.text:00402296 ; ---------------------------------------------------------------------------
.text:00402296
.text:00402296 loc_402296:                             ; CODE XREF: sub_401E80+3FF↑j
.text:00402296                 cmp     eax, 78h ; 'x'
.text:00402299                 jz      short loc_4022B0
.text:0040229B                 cmp     eax, 7Ah ; 'z'
.text:0040229E                 jnz     loc_40205A
.text:004022A4                 mov     [ebp+var_455], 1
.text:004022AB                 jmp     loc_401F30
.text:004022B0 ; ---------------------------------------------------------------------------
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: sub_401E80+419↑j
.text:004022B0                 mov     [ebp+var_456], 1
.text:004022B7                 jmp     loc_401F30
.text:004022B7 ; ---------------------------------------------------------------------------
.text:004022BC                 align 10h
.text:004022C0
.text:004022C0 loc_4022C0:                             ; CODE XREF: sub_401E80+3FA↑j
.text:004022C0                 mov     [ebp+var_457], 1
.text:004022C7                 jmp     loc_401F30
.text:004022C7 ; ---------------------------------------------------------------------------
.text:004022CC                 align 10h
.text:004022D0
.text:004022D0 loc_4022D0:                             ; CODE XREF: sub_401E80+E6↑j
.text:004022D0                 mov     [esp+4B8h+Str], offset aCbbkkmgtpezy0 ; "cbBkKMGTPEZY0"
.text:004022D8                 mov     edi, ds:dword_415570
.text:004022DE                 lea     ecx, [ebp+var_478]
.text:004022E4                 mov     dword ptr [esp+4B8h+var_4AC], ecx ; int
.text:004022E8                 mov     [esp+4B8h+var_4B0], 0 ; int
.text:004022F0                 mov     [esp+4B8h+Locale], 0 ; int
.text:004022F8                 mov     [esp+4B8h+Category], edi ; int
.text:004022FB                 call    sub_407D90
.text:00402300                 test    eax, eax
.text:00402302                 jnz     short loc_402321
.text:00402304
.text:00402304 loc_402304:                             ; CODE XREF: sub_401E80+4DA↓j
.text:00402304                 mov     edx, [ebp+var_478]
.text:0040230A                 mov     edi, [ebp+var_474]
.text:00402310                 mov     [ebp+var_460], edx
.text:00402316                 mov     [ebp+var_45C], edi
.text:0040231C                 jmp     loc_401F30
.text:00402321 ; ---------------------------------------------------------------------------
.text:00402321
.text:00402321 loc_402321:                             ; CODE XREF: sub_401E80+482↑j
.text:00402321                 mov     ebx, ds:dword_415570
.text:00402327                 mov     [esp+4B8h+Category], ebx ; char *
.text:0040232A                 call    sub_406590
.text:0040232F                 mov     [esp+4B8h+Category], offset aSInvalidFileSi ; "%s: invalid file size"
.text:00402336                 mov     esi, eax
.text:00402338                 call    ds:libintl_gettext
.text:0040233E                 mov     dword ptr [esp+4B8h+var_4AC], esi ; char
.text:00402342                 mov     [esp+4B8h+Locale], 0 ; ErrorMessage
.text:0040234A                 mov     [esp+4B8h+Category], 1 ; Code
.text:00402351                 mov     [esp+4B8h+var_4B0], eax ; char *
.text:00402355                 call    sub_40A820
.text:0040235A                 jmp     short loc_402304
.text:0040235C ; ---------------------------------------------------------------------------
.text:0040235C
.text:0040235C loc_40235C:                             ; CODE XREF: sub_401E80+DD↑j
.text:0040235C                 mov     edi, dword_414020
.text:00402362                 mov     edx, [ebp+arg_4]
.text:00402365                 mov     ebx, [ebp+arg_0]
.text:00402368                 lea     esi, [edx+edi*4]
.text:0040236B                 sub     ebx, edi
.text:0040236D                 mov     [ebp+var_480], esi
.text:00402373                 jnz     short loc_40239F
.text:00402375                 mov     [esp+4B8h+Category], offset aMissingFileOpe ; "missing file operand"
.text:0040237C                 call    ds:libintl_gettext
.text:00402382                 mov     [esp+4B8h+Locale], 0 ; ErrorMessage
.text:0040238A                 mov     [esp+4B8h+Category], 0 ; Code
.text:00402391                 mov     [esp+4B8h+var_4B0], eax ; char *
.text:00402395                 call    sub_40A820
.text:0040239A                 jmp     loc_40205A
.text:0040239F ; ---------------------------------------------------------------------------
.text:0040239F
.text:0040239F loc_40239F:                             ; CODE XREF: sub_401E80+4F3↑j
.text:0040239F                 xor     edi, edi
.text:004023A1                 mov     [ebp+var_484], edi
.text:004023A7                 cmp     [ebp+var_484], ebx
.text:004023AD                 jge     loc_402474
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_401E80+5EE↓j
.text:004023B3                 mov     ecx, [ebp+var_484]
.text:004023B9                 mov     esi, [ebp+var_480]
.text:004023BF                 mov     edi, [esi+ecx*4]
.text:004023C2                 mov     [esp+4B8h+Category], edi ; char *
.text:004023C5                 call    sub_406590
.text:004023CA                 mov     [esp+4B8h+Category], eax ; char *
.text:004023CD                 call    sub_409060
.text:004023D2                 mov     [ebp+var_488], eax
.text:004023D8                 mov     esi, [ebp+var_484]
.text:004023DE                 mov     ecx, 2
.text:004023E3                 cld
.text:004023E4                 mov     eax, [ebp+var_480]
.text:004023EA                 mov     edi, [eax+esi*4]
.text:004023ED                 mov     [ebp+var_48C], edi
.text:004023F3                 mov     esi, edi
.text:004023F5                 mov     edi, offset asc_401E7B ; "-"
.text:004023FA                 repe cmpsb
.text:004023FC                 jnz     loc_402498
.text:00402402                 mov     [ebp+var_48D], 0
.text:00402409                 mov     edx, [ebp+var_488]
.text:0040240F                 lea     eax, [ebp+var_448]
.text:00402415                 mov     [esp+4B8h+var_4B0], eax ; int
.text:00402419                 lea     edi, [ebp+var_468]
.text:0040241F                 mov     dword ptr [esp+4B8h+var_4AC], edi ; int
.text:00402423                 mov     [esp+4B8h+Locale], edx ; char *
.text:00402427                 mov     [esp+4B8h+Category], 1 ; int
.text:0040242E                 call    sub_402BE0
.text:00402433                 test    al, al
.text:00402435                 jz      short loc_402447
.text:00402437                 cmp     [ebp+var_479], 0
.text:0040243E                 jz      short loc_402447
.text:00402440                 mov     [ebp+var_48D], 1
.text:00402447
.text:00402447 loc_402447:                             ; CODE XREF: sub_401E80+5B5↑j
.text:00402447                                         ; sub_401E80+5BE↑j
.text:00402447                 movzx   ecx, [ebp+var_48D]
.text:0040244E
.text:0040244E loc_40244E:                             ; CODE XREF: sub_401E80+666↓j
.text:0040244E                 mov     [ebp+var_479], cl
.text:00402454                 mov     esi, [ebp+var_488]
.text:0040245A                 mov     [esp+4B8h+Category], esi ; Block
.text:0040245D                 call    free
.text:00402462                 inc     [ebp+var_484]
.text:00402468                 cmp     [ebp+var_484], ebx
.text:0040246E                 jl      loc_4023B3
.text:00402474
.text:00402474 loc_402474:                             ; CODE XREF: sub_401E80+52D↑j
.text:00402474                 cld
.text:00402475                 xor     eax, eax
.text:00402477                 mov     ecx, 10Bh
.text:0040247C                 lea     edi, [ebp+var_448]
.text:00402482                 xor     ebx, ebx
.text:00402484                 rep stosd
.text:00402486                 cmp     [ebp+var_479], 0
.text:0040248D                 setz    bl
.text:00402490                 mov     [esp+4B8h+Category], ebx
.text:00402493                 jmp     loc_40208D
.text:00402498 ; ---------------------------------------------------------------------------
.text:00402498
.text:00402498 loc_402498:                             ; CODE XREF: sub_401E80+57C↑j
.text:00402498                 mov     [ebp+var_48E], 0
.text:0040249F                 mov     eax, [ebp+var_488]
.text:004024A5                 lea     edx, [ebp+var_448]
.text:004024AB                 mov     [esp+4B8h+var_4B0], edx ; int
.text:004024AF                 mov     esi, [ebp+var_48C]
.text:004024B5                 lea     edi, [ebp+var_468]
.text:004024BB                 mov     dword ptr [esp+4B8h+var_4AC], edi ; int
.text:004024BF                 mov     [esp+4B8h+Locale], eax ; char *
.text:004024C3                 mov     [esp+4B8h+Category], esi ; LPCSTR
.text:004024C6                 call    sub_402CD0
.text:004024CB                 test    al, al
.text:004024CD                 jz      short loc_4024DF
.text:004024CF                 cmp     [ebp+var_479], 0
.text:004024D6                 jz      short loc_4024DF
.text:004024D8                 mov     [ebp+var_48E], 1
.text:004024DF
.text:004024DF loc_4024DF:                             ; CODE XREF: sub_401E80+64D↑j
.text:004024DF                                         ; sub_401E80+656↑j
.text:004024DF                 movzx   ecx, [ebp+var_48E]
.text:004024E6                 jmp     loc_40244E
.text:004024E6 sub_401E80      endp
.text:004024E6
.text:004024E6 ; ---------------------------------------------------------------------------
.text:004024EB                 align 10h
.text:004024F0
.text:004024F0 ; =============== S U B R O U T I N E =======================================
.text:004024F0
.text:004024F0 ; Attributes: noreturn
.text:004024F0
.text:004024F0 ; void __cdecl __noreturn sub_4024F0(int Code)
.text:004024F0 sub_4024F0      proc near               ; CODE XREF: sub_40A750+A↓p
.text:004024F0
.text:004024F0 Stream          = dword ptr -1Ch
.text:004024F0 Format          = dword ptr -18h
.text:004024F0 var_14          = dword ptr -14h
.text:004024F0 Code            = dword ptr  4
.text:004024F0
.text:004024F0                 push    ebx
.text:004024F1                 sub     esp, 18h
.text:004024F4                 mov     ebx, [esp+1Ch+Code]
.text:004024F8                 test    ebx, ebx
.text:004024FA                 jz      short loc_402530
.text:004024FC                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402503                 call    ds:libintl_gettext
.text:00402509                 mov     edx, ds:_iob
.text:0040250F                 mov     ecx, ds:dword_415550
.text:00402515                 add     edx, 40h ; '@'
.text:00402518                 mov     [esp+1Ch+var_14], ecx
.text:0040251C                 mov     [esp+1Ch+Format], eax ; Format
.text:00402520                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00402523                 call    fprintf
.text:00402528
.text:00402528 loc_402528:                             ; CODE XREF: sub_4024F0+1CB↓j
.text:00402528                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040252B                 call    exit
.text:00402530 ; ---------------------------------------------------------------------------
.text:00402530
.text:00402530 loc_402530:                             ; CODE XREF: sub_4024F0+A↑j
.text:00402530                 mov     [esp+1Ch+Stream], (offset stru_401567._bufsiz+1)
.text:00402537                 call    ds:libintl_gettext
.text:0040253D                 mov     ecx, ds:dword_415550
.text:00402543                 mov     [esp+1Ch+Stream], eax ; Format
.text:00402546                 mov     [esp+1Ch+Format], ecx
.text:0040254A                 call    printf
.text:0040254F                 mov     [esp+1Ch+Stream], offset aOverwriteTheSp ; "Overwrite the specified FILE(s) repeate"...
.text:00402556                 call    ds:libintl_gettext
.text:0040255C                 mov     ecx, ds:_iob
.text:00402562                 add     ecx, 20h ; ' '
.text:00402565                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402569                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040256C                 call    fputs
.text:00402571                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402578                 call    ds:libintl_gettext
.text:0040257E                 mov     ecx, ds:_iob
.text:00402584                 add     ecx, 20h ; ' '
.text:00402587                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040258B                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040258E                 call    fputs
.text:00402593                 mov     [esp+1Ch+Stream], offset aFForceChangePe ; "  -f, --force    change permissions to "...
.text:0040259A                 call    ds:libintl_gettext
.text:004025A0                 mov     [esp+1Ch+Format], 19h
.text:004025A8                 mov     [esp+1Ch+Stream], eax ; Format
.text:004025AB                 call    printf
.text:004025B0                 mov     [esp+1Ch+Stream], offset aURemoveTruncat ; "  -u, --remove   truncate and remove fi"...
.text:004025B7                 call    ds:libintl_gettext
.text:004025BD                 mov     ecx, ds:_iob
.text:004025C3                 add     ecx, 20h ; ' '
.text:004025C6                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004025CA                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004025CD                 call    fputs
.text:004025D2                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004025D9                 call    ds:libintl_gettext
.text:004025DF                 mov     ecx, ds:_iob
.text:004025E5                 add     ecx, 20h ; ' '
.text:004025E8                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004025EC                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004025EF                 call    fputs
.text:004025F4                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004025FB                 call    ds:libintl_gettext
.text:00402601                 mov     ecx, ds:_iob
.text:00402607                 add     ecx, 20h ; ' '
.text:0040260A                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040260E                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402611                 call    fputs
.text:00402616                 mov     [esp+1Ch+Stream], offset aIfFileIsShredS ; "\nIf FILE is -, shred standard output."...
.text:0040261D                 call    ds:libintl_gettext
.text:00402623                 mov     ecx, ds:_iob
.text:00402629                 add     ecx, 20h ; ' '
.text:0040262C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402630                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402633                 call    fputs
.text:00402638                 mov     [esp+1Ch+Stream], offset aCautionNoteTha ; "CAUTION: Note that shred relies on a ve"...
.text:0040263F                 call    ds:libintl_gettext
.text:00402645                 mov     ecx, ds:_iob
.text:0040264B                 add     ecx, 20h ; ' '
.text:0040264E                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402652                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402655                 call    fputs
.text:0040265A                 mov     [esp+1Ch+Stream], offset aLogStructuredO ; "* log-structured or journaled file syst"...
.text:00402661                 call    ds:libintl_gettext
.text:00402667                 mov     ecx, ds:_iob
.text:0040266D                 add     ecx, 20h ; ' '
.text:00402670                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402674                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402677                 call    fputs
.text:0040267C                 mov     [esp+1Ch+Stream], offset aFileSystemsTha ; "* file systems that cache in temporary "...
.text:00402683                 call    ds:libintl_gettext
.text:00402689                 mov     ecx, ds:_iob
.text:0040268F                 add     ecx, 20h ; ' '
.text:00402692                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00402696                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00402699                 call    fputs
.text:0040269E                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:004026A5                 call    ds:libintl_gettext
.text:004026AB                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:004026B3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004026B6                 call    printf
.text:004026BB                 jmp     loc_402528
.text:004026BB sub_4024F0      endp
.text:004026BB
.text:004026BB ; ---------------------------------------------------------------------------
.text:004026C0 ; const char FileName[]
.text:004026C0 FileName        db '/dev/urandom',0     ; DATA XREF: sub_4026E0+312↓o
.text:004026CD ; const char aDevRandom[]
.text:004026CD aDevRandom      db '/dev/random',0      ; DATA XREF: sub_4026E0+3F2↓o
.text:004026D9                 align 10h
.text:004026E0
.text:004026E0 ; =============== S U B R O U T I N E =======================================
.text:004026E0
.text:004026E0
.text:004026E0 sub_4026E0      proc near               ; CODE XREF: sub_401E80+7E↑p
.text:004026E0
.text:004026E0 FileName        = dword ptr -6Ch
.text:004026E0 OpenFlag        = dword ptr -68h
.text:004026E0 MaxCharCount    = dword ptr -64h
.text:004026E0 var_54          = byte ptr -54h
.text:004026E0 var_4C          = dword ptr -4Ch
.text:004026E0 var_48          = dword ptr -48h
.text:004026E0 var_44          = dword ptr -44h
.text:004026E0 var_40          = dword ptr -40h
.text:004026E0 DstBuf          = byte ptr -3Ch
.text:004026E0 arg_0           = dword ptr  4
.text:004026E0
.text:004026E0                 push    ebp
.text:004026E1                 xor     edx, edx
.text:004026E3                 push    edi
.text:004026E4                 push    esi
.text:004026E5                 push    ebx
.text:004026E6                 sub     esp, 5Ch
.text:004026E9                 mov     edi, [esp+6Ch+arg_0]
.text:004026ED                 lea     esi, [esi+0]
.text:004026F0
.text:004026F0 loc_4026F0:                             ; CODE XREF: sub_4026E0+22↓j
.text:004026F0                 mov     ecx, ds:dword_401360[edx*4]
.text:004026F7                 mov     [edi+edx*4+400h], ecx
.text:004026FE                 inc     edx
.text:004026FF                 cmp     edx, 7
.text:00402702                 jle     short loc_4026F0
.text:00402704                 xor     ecx, ecx
.text:00402706                 xor     edx, edx
.text:00402708                 xor     eax, eax
.text:0040270A                 mov     [edi+428h], ecx
.text:00402710                 mov     ebx, 400h
.text:00402715                 mov     ebp, 4
.text:0040271A                 mov     [edi+424h], edx
.text:00402720                 lea     esi, [esp+6Ch+var_40]
.text:00402724                 mov     [edi+420h], eax
.text:0040272A                 call    _getpid
.text:0040272F                 mov     [esp+6Ch+var_40], eax
.text:00402733                 mov     eax, [edi+428h]
.text:00402739                 sub     ebx, eax
.text:0040273B                 cmp     ebp, ebx
.text:0040273D                 jbe     short loc_402783
.text:0040273F                 nop
.text:00402740
.text:00402740 loc_402740:                             ; CODE XREF: sub_4026E0+A1↓j
.text:00402740                 xor     edx, edx
.text:00402742                 lea     ecx, [eax+edi]
.text:00402745                 cmp     edx, ebx
.text:00402747                 jnb     short loc_40275C
.text:00402749                 lea     esi, [esi+0]
.text:00402750
.text:00402750 loc_402750:                             ; CODE XREF: sub_4026E0+7A↓j
.text:00402750                 movzx   eax, byte ptr [edx+esi]
.text:00402754                 xor     [edx+ecx], al
.text:00402757                 inc     edx
.text:00402758                 cmp     edx, ebx
.text:0040275A                 jb      short loc_402750
.text:0040275C
.text:0040275C loc_40275C:                             ; CODE XREF: sub_4026E0+67↑j
.text:0040275C                 mov     [esp+6Ch+OpenFlag], edi
.text:00402760                 sub     ebp, ebx
.text:00402762                 add     esi, ebx
.text:00402764                 mov     [esp+6Ch+FileName], edi
.text:00402767                 xor     ebx, ebx
.text:00402769                 call    sub_402EF0
.text:0040276E                 mov     [edi+428h], ebx
.text:00402774                 xor     eax, eax
.text:00402776                 cmp     ebp, 400h
.text:0040277C                 mov     ebx, 400h
.text:00402781                 ja      short loc_402740
.text:00402783
.text:00402783 loc_402783:                             ; CODE XREF: sub_4026E0+5D↑j
.text:00402783                 xor     edx, edx
.text:00402785                 lea     ecx, [eax+edi]
.text:00402788                 cmp     edx, ebp
.text:0040278A                 jnb     short loc_40279C
.text:0040278C                 lea     esi, [esi+0]
.text:00402790
.text:00402790 loc_402790:                             ; CODE XREF: sub_4026E0+BA↓j
.text:00402790                 movzx   ebx, byte ptr [edx+esi]
.text:00402794                 xor     [edx+ecx], bl
.text:00402797                 inc     edx
.text:00402798                 cmp     edx, ebp
.text:0040279A                 jb      short loc_402790
.text:0040279C
.text:0040279C loc_40279C:                             ; CODE XREF: sub_4026E0+AA↑j
.text:0040279C                 mov     [edi+428h], ebp
.text:004027A2                 mov     ebx, 400h
.text:004027A7                 lea     esi, [esp+6Ch+var_44]
.text:004027AB                 call    sub_40B340
.text:004027B0                 mov     [esp+6Ch+var_44], eax
.text:004027B4                 mov     ebp, 4
.text:004027B9                 mov     eax, [edi+428h]
.text:004027BF                 sub     ebx, eax
.text:004027C1                 cmp     ebp, ebx
.text:004027C3                 jbe     short loc_402813
.text:004027C5                 lea     esi, [esi+0]
.text:004027C9                 lea     edi, [edi+0]
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_4026E0+131↓j
.text:004027D0                 xor     edx, edx
.text:004027D2                 lea     ecx, [eax+edi]
.text:004027D5                 cmp     edx, ebx
.text:004027D7                 jnb     short loc_4027EC
.text:004027D9                 lea     esi, [esi+0]
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: sub_4026E0+10A↓j
.text:004027E0                 movzx   eax, byte ptr [edx+esi]
.text:004027E4                 xor     [edx+ecx], al
.text:004027E7                 inc     edx
.text:004027E8                 cmp     edx, ebx
.text:004027EA                 jb      short loc_4027E0
.text:004027EC
.text:004027EC loc_4027EC:                             ; CODE XREF: sub_4026E0+F7↑j
.text:004027EC                 mov     [esp+6Ch+OpenFlag], edi
.text:004027F0                 sub     ebp, ebx
.text:004027F2                 add     esi, ebx
.text:004027F4                 mov     [esp+6Ch+FileName], edi
.text:004027F7                 mov     ebx, 400h
.text:004027FC                 call    sub_402EF0
.text:00402801                 xor     edx, edx
.text:00402803                 xor     eax, eax
.text:00402805                 cmp     ebp, 400h
.text:0040280B                 mov     [edi+428h], edx
.text:00402811                 ja      short loc_4027D0
.text:00402813
.text:00402813 loc_402813:                             ; CODE XREF: sub_4026E0+E3↑j
.text:00402813                 xor     edx, edx
.text:00402815                 lea     ecx, [eax+edi]
.text:00402818                 cmp     edx, ebp
.text:0040281A                 jnb     short loc_40282C
.text:0040281C                 lea     esi, [esi+0]
.text:00402820
.text:00402820 loc_402820:                             ; CODE XREF: sub_4026E0+14A↓j
.text:00402820                 movzx   ebx, byte ptr [edx+esi]
.text:00402824                 xor     [edx+ecx], bl
.text:00402827                 inc     edx
.text:00402828                 cmp     edx, ebp
.text:0040282A                 jb      short loc_402820
.text:0040282C
.text:0040282C loc_40282C:                             ; CODE XREF: sub_4026E0+13A↑j
.text:0040282C                 mov     [edi+428h], ebp
.text:00402832                 mov     ebx, 400h
.text:00402837                 lea     esi, [esp+6Ch+var_48]
.text:0040283B                 call    sub_40B330
.text:00402840                 mov     [esp+6Ch+var_48], eax
.text:00402844                 mov     ebp, 4
.text:00402849                 mov     eax, [edi+428h]
.text:0040284F                 sub     ebx, eax
.text:00402851                 cmp     ebp, ebx
.text:00402853                 jbe     short loc_4028A3
.text:00402855                 lea     esi, [esi+0]
.text:00402859                 lea     edi, [edi+0]
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_4026E0+1C1↓j
.text:00402860                 xor     edx, edx
.text:00402862                 lea     ecx, [eax+edi]
.text:00402865                 cmp     edx, ebx
.text:00402867                 jnb     short loc_40287C
.text:00402869                 lea     esi, [esi+0]
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_4026E0+19A↓j
.text:00402870                 movzx   eax, byte ptr [edx+esi]
.text:00402874                 xor     [edx+ecx], al
.text:00402877                 inc     edx
.text:00402878                 cmp     edx, ebx
.text:0040287A                 jb      short loc_402870
.text:0040287C
.text:0040287C loc_40287C:                             ; CODE XREF: sub_4026E0+187↑j
.text:0040287C                 mov     [esp+6Ch+OpenFlag], edi
.text:00402880                 sub     ebp, ebx
.text:00402882                 add     esi, ebx
.text:00402884                 mov     [esp+6Ch+FileName], edi
.text:00402887                 mov     ebx, 400h
.text:0040288C                 call    sub_402EF0
.text:00402891                 xor     ecx, ecx
.text:00402893                 xor     eax, eax
.text:00402895                 cmp     ebp, 400h
.text:0040289B                 mov     [edi+428h], ecx
.text:004028A1                 ja      short loc_402860
.text:004028A3
.text:004028A3 loc_4028A3:                             ; CODE XREF: sub_4026E0+173↑j
.text:004028A3                 xor     edx, edx
.text:004028A5                 lea     ecx, [eax+edi]
.text:004028A8                 cmp     edx, ebp
.text:004028AA                 jnb     short loc_4028BC
.text:004028AC                 lea     esi, [esi+0]
.text:004028B0
.text:004028B0 loc_4028B0:                             ; CODE XREF: sub_4026E0+1DA↓j
.text:004028B0                 movzx   ebx, byte ptr [edx+esi]
.text:004028B4                 xor     [edx+ecx], bl
.text:004028B7                 inc     edx
.text:004028B8                 cmp     edx, ebp
.text:004028BA                 jb      short loc_4028B0
.text:004028BC
.text:004028BC loc_4028BC:                             ; CODE XREF: sub_4026E0+1CA↑j
.text:004028BC                 mov     [edi+428h], ebp
.text:004028C2                 mov     ebx, 400h
.text:004028C7                 lea     esi, [esp+6Ch+var_4C]
.text:004028CB                 call    sub_40B320
.text:004028D0                 mov     [esp+6Ch+var_4C], eax
.text:004028D4                 mov     ebp, 4
.text:004028D9                 mov     eax, [edi+428h]
.text:004028DF                 sub     ebx, eax
.text:004028E1                 cmp     ebp, ebx
.text:004028E3                 jbe     short loc_402933
.text:004028E5                 lea     esi, [esi+0]
.text:004028E9                 lea     edi, [edi+0]
.text:004028F0
.text:004028F0 loc_4028F0:                             ; CODE XREF: sub_4026E0+251↓j
.text:004028F0                 xor     edx, edx
.text:004028F2                 lea     ecx, [eax+edi]
.text:004028F5                 cmp     edx, ebx
.text:004028F7                 jnb     short loc_40290C
.text:004028F9                 lea     esi, [esi+0]
.text:00402900
.text:00402900 loc_402900:                             ; CODE XREF: sub_4026E0+22A↓j
.text:00402900                 movzx   eax, byte ptr [edx+esi]
.text:00402904                 xor     [edx+ecx], al
.text:00402907                 inc     edx
.text:00402908                 cmp     edx, ebx
.text:0040290A                 jb      short loc_402900
.text:0040290C
.text:0040290C loc_40290C:                             ; CODE XREF: sub_4026E0+217↑j
.text:0040290C                 mov     [esp+6Ch+OpenFlag], edi
.text:00402910                 sub     ebp, ebx
.text:00402912                 add     esi, ebx
.text:00402914                 mov     [esp+6Ch+FileName], edi
.text:00402917                 mov     ebx, 400h
.text:0040291C                 call    sub_402EF0
.text:00402921                 xor     edx, edx
.text:00402923                 xor     eax, eax
.text:00402925                 cmp     ebp, 400h
.text:0040292B                 mov     [edi+428h], edx
.text:00402931                 ja      short loc_4028F0
.text:00402933
.text:00402933 loc_402933:                             ; CODE XREF: sub_4026E0+203↑j
.text:00402933                 xor     edx, edx
.text:00402935                 lea     ecx, [eax+edi]
.text:00402938                 cmp     edx, ebp
.text:0040293A                 jnb     short loc_40294C
.text:0040293C                 lea     esi, [esi+0]
.text:00402940
.text:00402940 loc_402940:                             ; CODE XREF: sub_4026E0+26A↓j
.text:00402940                 movzx   ebx, byte ptr [edx+esi]
.text:00402944                 xor     [edx+ecx], bl
.text:00402947                 inc     edx
.text:00402948                 cmp     edx, ebp
.text:0040294A                 jb      short loc_402940
.text:0040294C
.text:0040294C loc_40294C:                             ; CODE XREF: sub_4026E0+25A↑j
.text:0040294C                 mov     [edi+428h], ebp
.text:00402952                 lea     ebx, [esp+6Ch+var_54]
.text:00402956                 mov     esi, ebx
.text:00402958                 mov     [esp+6Ch+OpenFlag], ebx
.text:0040295C                 mov     ebp, 8
.text:00402961                 mov     ebx, 400h
.text:00402966                 mov     [esp+6Ch+FileName], 0
.text:0040296D                 call    sub_40B1E0
.text:00402972                 mov     eax, [edi+428h]
.text:00402978                 sub     ebx, eax
.text:0040297A                 cmp     ebp, ebx
.text:0040297C                 jbe     short loc_4029C3
.text:0040297E                 mov     esi, esi
.text:00402980
.text:00402980 loc_402980:                             ; CODE XREF: sub_4026E0+2E1↓j
.text:00402980                 xor     edx, edx
.text:00402982                 lea     ecx, [eax+edi]
.text:00402985                 cmp     edx, ebx
.text:00402987                 jnb     short loc_40299C
.text:00402989                 lea     esi, [esi+0]
.text:00402990
.text:00402990 loc_402990:                             ; CODE XREF: sub_4026E0+2BA↓j
.text:00402990                 movzx   eax, byte ptr [edx+esi]
.text:00402994                 xor     [edx+ecx], al
.text:00402997                 inc     edx
.text:00402998                 cmp     edx, ebx
.text:0040299A                 jb      short loc_402990
.text:0040299C
.text:0040299C loc_40299C:                             ; CODE XREF: sub_4026E0+2A7↑j
.text:0040299C                 mov     [esp+6Ch+OpenFlag], edi
.text:004029A0                 sub     ebp, ebx
.text:004029A2                 add     esi, ebx
.text:004029A4                 mov     [esp+6Ch+FileName], edi
.text:004029A7                 mov     ebx, 400h
.text:004029AC                 call    sub_402EF0
.text:004029B1                 xor     ecx, ecx
.text:004029B3                 xor     eax, eax
.text:004029B5                 cmp     ebp, 400h
.text:004029BB                 mov     [edi+428h], ecx
.text:004029C1                 ja      short loc_402980
.text:004029C3
.text:004029C3 loc_4029C3:                             ; CODE XREF: sub_4026E0+29C↑j
.text:004029C3                 xor     edx, edx
.text:004029C5                 lea     ecx, [eax+edi]
.text:004029C8                 cmp     edx, ebp
.text:004029CA                 jnb     short loc_4029DC
.text:004029CC                 lea     esi, [esi+0]
.text:004029D0
.text:004029D0 loc_4029D0:                             ; CODE XREF: sub_4026E0+2FA↓j
.text:004029D0                 movzx   ebx, byte ptr [edx+esi]
.text:004029D4                 xor     [edx+ecx], bl
.text:004029D7                 inc     edx
.text:004029D8                 cmp     edx, ebp
.text:004029DA                 jb      short loc_4029D0
.text:004029DC
.text:004029DC loc_4029DC:                             ; CODE XREF: sub_4026E0+2EA↑j
.text:004029DC                 mov     [edi+428h], ebp
.text:004029E2                 mov     [esp+6Ch+FileName], edi
.text:004029E5                 call    sub_403090
.text:004029EA                 mov     [esp+6Ch+OpenFlag], 0 ; OpenFlag
.text:004029F2                 mov     [esp+6Ch+FileName], offset FileName ; "/dev/urandom"
.text:004029F9                 call    _open
.text:004029FE                 test    eax, eax
.text:00402A00                 mov     esi, eax
.text:00402A02                 js      loc_402ACA
.text:00402A08                 mov     [esp+6Ch+MaxCharCount], 20h ; ' ' ; MaxCharCount
.text:00402A10                 lea     ebx, [esp+6Ch+DstBuf]
.text:00402A14                 mov     ebp, 20h ; ' '
.text:00402A19                 mov     [esp+6Ch+OpenFlag], ebx ; DstBuf
.text:00402A1D                 mov     [esp+6Ch+FileName], eax ; FileHandle
.text:00402A20                 call    _read
.text:00402A25                 mov     [esp+6Ch+FileName], esi ; FileHandle
.text:00402A28                 mov     esi, ebx
.text:00402A2A                 mov     ebx, 400h
.text:00402A2F                 call    _close
.text:00402A34                 mov     eax, [edi+428h]
.text:00402A3A                 sub     ebx, eax
.text:00402A3C                 cmp     ebp, ebx
.text:00402A3E                 jbe     short loc_402A83
.text:00402A40
.text:00402A40 loc_402A40:                             ; CODE XREF: sub_4026E0+3A1↓j
.text:00402A40                 xor     edx, edx
.text:00402A42                 lea     ecx, [eax+edi]
.text:00402A45                 cmp     edx, ebx
.text:00402A47                 jnb     short loc_402A5C
.text:00402A49                 lea     esi, [esi+0]
.text:00402A50
.text:00402A50 loc_402A50:                             ; CODE XREF: sub_4026E0+37A↓j
.text:00402A50                 movzx   eax, byte ptr [edx+esi]
.text:00402A54                 xor     [edx+ecx], al
.text:00402A57                 inc     edx
.text:00402A58                 cmp     edx, ebx
.text:00402A5A                 jb      short loc_402A50
.text:00402A5C
.text:00402A5C loc_402A5C:                             ; CODE XREF: sub_4026E0+367↑j
.text:00402A5C                 mov     [esp+6Ch+OpenFlag], edi
.text:00402A60                 sub     ebp, ebx
.text:00402A62                 add     esi, ebx
.text:00402A64                 mov     [esp+6Ch+FileName], edi
.text:00402A67                 mov     ebx, 400h
.text:00402A6C                 call    sub_402EF0
.text:00402A71                 xor     edx, edx
.text:00402A73                 xor     eax, eax
.text:00402A75                 cmp     ebp, 400h
.text:00402A7B                 mov     [edi+428h], edx
.text:00402A81                 ja      short loc_402A40
.text:00402A83
.text:00402A83 loc_402A83:                             ; CODE XREF: sub_4026E0+35E↑j
.text:00402A83                 xor     edx, edx
.text:00402A85                 lea     ecx, [eax+edi]
.text:00402A88                 cmp     edx, ebp
.text:00402A8A                 jnb     short loc_402A9C
.text:00402A8C                 lea     esi, [esi+0]
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_4026E0+3BA↓j
.text:00402A90                 movzx   ebx, byte ptr [edx+esi]
.text:00402A94                 xor     [edx+ecx], bl
.text:00402A97                 inc     edx
.text:00402A98                 cmp     edx, ebp
.text:00402A9A                 jb      short loc_402A90
.text:00402A9C
.text:00402A9C loc_402A9C:                             ; CODE XREF: sub_4026E0+3AA↑j
.text:00402A9C                                         ; sub_4026E0+48A↓j ...
.text:00402A9C                 mov     [edi+428h], ebp
.text:00402AA2
.text:00402AA2 loc_402AA2:                             ; CODE XREF: sub_4026E0+402↓j
.text:00402AA2                 mov     [esp+6Ch+OpenFlag], edi
.text:00402AA6                 xor     ebp, ebp
.text:00402AA8                 mov     [esp+6Ch+FileName], edi
.text:00402AAB                 call    sub_402EF0
.text:00402AB0                 mov     [esp+6Ch+OpenFlag], edi
.text:00402AB4                 mov     [esp+6Ch+FileName], edi
.text:00402AB7                 call    sub_402EF0
.text:00402ABC                 mov     [edi+428h], ebp
.text:00402AC2                 add     esp, 5Ch
.text:00402AC5                 pop     ebx
.text:00402AC6                 pop     esi
.text:00402AC7                 pop     edi
.text:00402AC8                 pop     ebp
.text:00402AC9                 retn
.text:00402ACA ; ---------------------------------------------------------------------------
.text:00402ACA
.text:00402ACA loc_402ACA:                             ; CODE XREF: sub_4026E0+322↑j
.text:00402ACA                 mov     [esp+6Ch+OpenFlag], 4 ; OpenFlag
.text:00402AD2                 mov     [esp+6Ch+FileName], offset aDevRandom ; "/dev/random"
.text:00402AD9                 call    _open
.text:00402ADE                 test    eax, eax
.text:00402AE0                 mov     esi, eax
.text:00402AE2                 js      short loc_402AA2
.text:00402AE4                 mov     [esp+6Ch+MaxCharCount], 10h ; MaxCharCount
.text:00402AEC                 lea     ebx, [esp+6Ch+DstBuf]
.text:00402AF0                 mov     ebp, 10h
.text:00402AF5                 mov     [esp+6Ch+OpenFlag], ebx ; DstBuf
.text:00402AF9                 mov     [esp+6Ch+FileName], eax ; FileHandle
.text:00402AFC                 call    _read
.text:00402B01                 mov     [esp+6Ch+FileName], esi ; FileHandle
.text:00402B04                 mov     esi, 400h
.text:00402B09                 call    _close
.text:00402B0E                 mov     eax, [edi+428h]
.text:00402B14                 sub     esi, eax
.text:00402B16                 cmp     ebp, esi
.text:00402B18                 jbe     short loc_402B63
.text:00402B1A
.text:00402B1A loc_402B1A:                             ; CODE XREF: sub_4026E0+481↓j
.text:00402B1A                 xor     edx, edx
.text:00402B1C                 lea     ecx, [eax+edi]
.text:00402B1F                 cmp     edx, esi
.text:00402B21                 jnb     short loc_402B3C
.text:00402B23                 lea     esi, [esi+0]
.text:00402B29                 lea     edi, [edi+0]
.text:00402B30
.text:00402B30 loc_402B30:                             ; CODE XREF: sub_4026E0+45A↓j
.text:00402B30                 movzx   eax, byte ptr [edx+ebx]
.text:00402B34                 xor     [edx+ecx], al
.text:00402B37                 inc     edx
.text:00402B38                 cmp     edx, esi
.text:00402B3A                 jb      short loc_402B30
.text:00402B3C
.text:00402B3C loc_402B3C:                             ; CODE XREF: sub_4026E0+441↑j
.text:00402B3C                 mov     [esp+6Ch+OpenFlag], edi
.text:00402B40                 sub     ebp, esi
.text:00402B42                 add     ebx, esi
.text:00402B44                 mov     [esp+6Ch+FileName], edi
.text:00402B47                 xor     esi, esi
.text:00402B49                 call    sub_402EF0
.text:00402B4E                 mov     [edi+428h], esi
.text:00402B54                 xor     eax, eax
.text:00402B56                 cmp     ebp, 400h
.text:00402B5C                 mov     esi, 400h
.text:00402B61                 ja      short loc_402B1A
.text:00402B63
.text:00402B63 loc_402B63:                             ; CODE XREF: sub_4026E0+438↑j
.text:00402B63                 xor     edx, edx
.text:00402B65                 lea     ecx, [eax+edi]
.text:00402B68                 cmp     edx, ebp
.text:00402B6A                 jnb     loc_402A9C
.text:00402B70
.text:00402B70 loc_402B70:                             ; CODE XREF: sub_4026E0+49A↓j
.text:00402B70                 movzx   eax, byte ptr [edx+ebx]
.text:00402B74                 xor     [edx+ecx], al
.text:00402B77                 inc     edx
.text:00402B78                 cmp     edx, ebp
.text:00402B7A                 jb      short loc_402B70
.text:00402B7C                 jmp     loc_402A9C
.text:00402B7C sub_4026E0      endp
.text:00402B7C
.text:00402B7C ; ---------------------------------------------------------------------------
.text:00402B81                 align 20h
.text:00402BA0 aSCannotShredAp db '%s: cannot shred append-only file descriptor',0
.text:00402BA0                                         ; DATA XREF: sub_402BE0+2B↓o
.text:00402BCD aSFcntlFailed   db '%s: fcntl failed',0 ; DATA XREF: sub_402BE0:loc_402C63↓o
.text:00402BDE                 align 10h
.text:00402BE0
.text:00402BE0 ; =============== S U B R O U T I N E =======================================
.text:00402BE0
.text:00402BE0
.text:00402BE0 ; int __cdecl sub_402BE0(int, char *, int, int)
.text:00402BE0 sub_402BE0      proc near               ; CODE XREF: sub_401E80+5AE↑p
.text:00402BE0                                         ; sub_402CD0+1D3↓p
.text:00402BE0
.text:00402BE0 Code            = dword ptr -1Ch
.text:00402BE0 ErrorMessage    = dword ptr -18h
.text:00402BE0 var_14          = dword ptr -14h
.text:00402BE0 var_10          = byte ptr -10h
.text:00402BE0 var_8           = dword ptr -8
.text:00402BE0 var_4           = dword ptr -4
.text:00402BE0 arg_0           = dword ptr  4
.text:00402BE0 arg_4           = dword ptr  8
.text:00402BE0 arg_8           = dword ptr  0Ch
.text:00402BE0 arg_C           = dword ptr  10h
.text:00402BE0
.text:00402BE0                 sub     esp, 1Ch
.text:00402BE3                 mov     [esp+1Ch+var_8], ebx
.text:00402BE7                 mov     ebx, [esp+1Ch+arg_0]
.text:00402BEB                 mov     [esp+1Ch+var_4], esi
.text:00402BEF                 mov     esi, [esp+1Ch+arg_4]
.text:00402BF3                 mov     [esp+1Ch+ErrorMessage], 3
.text:00402BFB                 mov     [esp+1Ch+Code], ebx
.text:00402BFE                 call    sub_40AF80
.text:00402C03                 test    eax, eax
.text:00402C05                 js      short loc_402C63
.text:00402C07                 test    al, 8
.text:00402C09                 jz      short loc_402C42
.text:00402C0B                 mov     [esp+1Ch+Code], offset aSCannotShredAp ; "%s: cannot shred append-only file descr"...
.text:00402C12                 call    ds:libintl_gettext
.text:00402C18                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:00402C1C                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00402C24                 mov     [esp+1Ch+var_14], eax ; char *
.text:00402C28
.text:00402C28 loc_402C28:                             ; CODE XREF: sub_402BE0+A5↓j
.text:00402C28                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402C2F                 call    sub_40A820
.text:00402C34                 xor     eax, eax
.text:00402C36
.text:00402C36 loc_402C36:                             ; CODE XREF: sub_402BE0+81↓j
.text:00402C36                 mov     ebx, [esp+1Ch+var_8]
.text:00402C3A                 mov     esi, [esp+1Ch+var_4]
.text:00402C3E                 add     esp, 1Ch
.text:00402C41                 retn
.text:00402C42 ; ---------------------------------------------------------------------------
.text:00402C42
.text:00402C42 loc_402C42:                             ; CODE XREF: sub_402BE0+29↑j
.text:00402C42                 mov     [esp+1Ch+ErrorMessage], esi ; char *
.text:00402C46                 mov     ecx, [esp+1Ch+arg_C]
.text:00402C4A                 mov     edx, [esp+1Ch+arg_8]
.text:00402C4E                 mov     [esp+1Ch+Code], ebx ; int
.text:00402C51                 mov     dword ptr [esp+1Ch+var_10], ecx ; int
.text:00402C55                 mov     [esp+1Ch+var_14], edx ; int
.text:00402C59                 call    sub_403230
.text:00402C5E                 movzx   eax, al
.text:00402C61                 jmp     short loc_402C36
.text:00402C63 ; ---------------------------------------------------------------------------
.text:00402C63
.text:00402C63 loc_402C63:                             ; CODE XREF: sub_402BE0+25↑j
.text:00402C63                 mov     [esp+1Ch+Code], offset aSFcntlFailed ; "%s: fcntl failed"
.text:00402C6A                 call    ds:libintl_gettext
.text:00402C70                 mov     ebx, eax
.text:00402C72                 call    _errno
.text:00402C77                 mov     dword ptr [esp+1Ch+var_10], esi
.text:00402C7B                 mov     [esp+1Ch+var_14], ebx
.text:00402C7F                 mov     edx, [eax]
.text:00402C81                 mov     [esp+1Ch+ErrorMessage], edx
.text:00402C85                 jmp     short loc_402C28
.text:00402C85 sub_402BE0      endp
.text:00402C85
.text:00402C85 ; ---------------------------------------------------------------------------
.text:00402C87 aSFailedToClose db '%s: failed to close',0
.text:00402C87                                         ; DATA XREF: sub_402CD0:loc_402D60↓o
.text:00402C87                                         ; sub_403800:loc_403ABA↓o
.text:00402C9B                 align 10h
.text:00402CA0 aSFailedToOpenF db '%s: failed to open for writing',0
.text:00402CA0                                         ; DATA XREF: sub_402CD0+FC↓o
.text:00402CBF aDevFd          db '/dev/fd/',0         ; DATA XREF: sub_402CD0+136↓o
.text:00402CC8                 align 10h
.text:00402CD0
.text:00402CD0 ; =============== S U B R O U T I N E =======================================
.text:00402CD0
.text:00402CD0
.text:00402CD0 ; int __cdecl sub_402CD0(LPCSTR, char *, int, int)
.text:00402CD0 sub_402CD0      proc near               ; CODE XREF: sub_401E80+646↑p
.text:00402CD0
.text:00402CD0 FileName        = dword ptr -2Ch
.text:00402CD0 OpenFlag        = dword ptr -28h
.text:00402CD0 Radix           = dword ptr -24h
.text:00402CD0 var_20          = byte ptr -20h
.text:00402CD0 FileHandle      = dword ptr -1Ch
.text:00402CD0 var_18          = dword ptr -18h
.text:00402CD0 EndPtr          = dword ptr -14h
.text:00402CD0 arg_0           = dword ptr  4
.text:00402CD0 arg_4           = dword ptr  8
.text:00402CD0 arg_8           = dword ptr  0Ch
.text:00402CD0 arg_C           = dword ptr  10h
.text:00402CD0
.text:00402CD0                 push    ebp
.text:00402CD1                 push    edi
.text:00402CD2                 push    esi
.text:00402CD3                 push    ebx
.text:00402CD4                 sub     esp, 1Ch
.text:00402CD7                 mov     ebp, [esp+2Ch+arg_0]
.text:00402CDB                 mov     [esp+2Ch+OpenFlag], 8001h ; OpenFlag
.text:00402CE3                 mov     ebx, [esp+2Ch+arg_8]
.text:00402CE7                 mov     [esp+2Ch+FileName], ebp ; FileName
.text:00402CEA                 call    _open
.text:00402CEF                 mov     [esp+2Ch+FileHandle], eax
.text:00402CF3                 test    eax, eax
.text:00402CF5                 js      loc_402D96
.text:00402CFB
.text:00402CFB loc_402CFB:                             ; CODE XREF: sub_402CD0+F6↓j
.text:00402CFB                 mov     [esp+2Ch+Radix], ebx ; int
.text:00402CFF                 mov     ecx, [esp+2Ch+arg_C]
.text:00402D03                 mov     edx, [esp+2Ch+arg_4]
.text:00402D07                 mov     esi, [esp+2Ch+FileHandle]
.text:00402D0B                 mov     dword ptr [esp+2Ch+var_20], ecx ; int
.text:00402D0F                 mov     [esp+2Ch+OpenFlag], edx ; char *
.text:00402D13                 mov     [esp+2Ch+FileName], esi ; int
.text:00402D16                 call    sub_403230
.text:00402D1B                 mov     bl, al
.text:00402D1D                 mov     eax, [esp+2Ch+FileHandle]
.text:00402D21                 mov     [esp+2Ch+FileName], eax ; FileHandle
.text:00402D24                 call    _close
.text:00402D29                 test    eax, eax
.text:00402D2B                 jnz     short loc_402D60
.text:00402D2D
.text:00402D2D loc_402D2D:                             ; CODE XREF: sub_402CD0+C4↓j
.text:00402D2D                 test    bl, bl
.text:00402D2F                 jz      short loc_402D3B
.text:00402D31                 mov     edi, [esp+2Ch+arg_C]
.text:00402D35                 cmp     byte ptr [edi+10h], 0
.text:00402D39                 jnz     short loc_402D46
.text:00402D3B
.text:00402D3B loc_402D3B:                             ; CODE XREF: sub_402CD0+5F↑j
.text:00402D3B                                         ; sub_402CD0+8C↓j
.text:00402D3B                 movzx   eax, bl
.text:00402D3E
.text:00402D3E loc_402D3E:                             ; CODE XREF: sub_402CD0+130↓j
.text:00402D3E                                         ; sub_402CD0+1DB↓j
.text:00402D3E                 add     esp, 1Ch
.text:00402D41                 pop     ebx
.text:00402D42                 pop     esi
.text:00402D43                 pop     edi
.text:00402D44                 pop     ebp
.text:00402D45                 retn
.text:00402D46 ; ---------------------------------------------------------------------------
.text:00402D46
.text:00402D46 loc_402D46:                             ; CODE XREF: sub_402CD0+69↑j
.text:00402D46                 mov     [esp+2Ch+Radix], edi ; int
.text:00402D4A                 mov     edx, [esp+2Ch+arg_4]
.text:00402D4E                 mov     [esp+2Ch+FileName], ebp ; LPCSTR
.text:00402D51                 mov     [esp+2Ch+OpenFlag], edx ; char
.text:00402D55                 call    sub_403800
.text:00402D5A                 mov     bl, al
.text:00402D5C                 jmp     short loc_402D3B
.text:00402D5C ; ---------------------------------------------------------------------------
.text:00402D5E                 align 10h
.text:00402D60
.text:00402D60 loc_402D60:                             ; CODE XREF: sub_402CD0+5B↑j
.text:00402D60                 mov     [esp+2Ch+FileName], offset aSFailedToClose ; "%s: failed to close"
.text:00402D67                 call    ds:libintl_gettext
.text:00402D6D                 mov     edi, eax
.text:00402D6F                 call    _errno
.text:00402D74                 mov     [esp+2Ch+Radix], edi ; char *
.text:00402D78                 mov     esi, [esp+2Ch+arg_4]
.text:00402D7C                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00402D80                 mov     ebx, [eax]
.text:00402D82                 mov     [esp+2Ch+FileName], 0 ; Code
.text:00402D89                 mov     [esp+2Ch+OpenFlag], ebx ; ErrorMessage
.text:00402D8D                 xor     ebx, ebx
.text:00402D8F                 call    sub_40A820
.text:00402D94                 jmp     short loc_402D2D
.text:00402D96 ; ---------------------------------------------------------------------------
.text:00402D96
.text:00402D96 loc_402D96:                             ; CODE XREF: sub_402CD0+25↑j
.text:00402D96                 call    _errno
.text:00402D9B                 cmp     dword ptr [eax], 0Dh
.text:00402D9E                 jz      loc_402EB0
.text:00402DA4
.text:00402DA4 loc_402DA4:                             ; CODE XREF: sub_402CD0+1E7↓j
.text:00402DA4                 call    _errno
.text:00402DA9                 cmp     dword ptr [eax], 2
.text:00402DAC                 jz      short loc_402E05
.text:00402DAE                 call    _errno
.text:00402DB3                 cmp     dword ptr [eax], 14h
.text:00402DB6                 jz      short loc_402E05
.text:00402DB8                 nop
.text:00402DB9                 lea     esi, [esi+0]
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_402CD0+146↓j
.text:00402DC0                                         ; sub_402CD0+1B1↓j ...
.text:00402DC0                 mov     edx, [esp+2Ch+FileHandle]
.text:00402DC4                 test    edx, edx
.text:00402DC6                 jns     loc_402CFB
.text:00402DCC                 mov     [esp+2Ch+FileName], offset aSFailedToOpenF ; "%s: failed to open for writing"
.text:00402DD3                 call    ds:libintl_gettext
.text:00402DD9                 mov     edi, eax
.text:00402DDB                 call    _errno
.text:00402DE0                 mov     [esp+2Ch+Radix], edi ; char *
.text:00402DE4                 mov     ecx, [esp+2Ch+arg_4]
.text:00402DE8                 mov     dword ptr [esp+2Ch+var_20], ecx ; char
.text:00402DEC                 mov     ebx, [eax]
.text:00402DEE                 mov     [esp+2Ch+FileName], 0 ; Code
.text:00402DF5                 mov     [esp+2Ch+OpenFlag], ebx ; ErrorMessage
.text:00402DF9                 call    sub_40A820
.text:00402DFE                 xor     eax, eax
.text:00402E00                 jmp     loc_402D3E
.text:00402E05 ; ---------------------------------------------------------------------------
.text:00402E05
.text:00402E05 loc_402E05:                             ; CODE XREF: sub_402CD0+DC↑j
.text:00402E05                                         ; sub_402CD0+E6↑j
.text:00402E05                 cld
.text:00402E06                 mov     edx, offset aDevFd ; "/dev/fd/"
.text:00402E0B                 mov     ecx, 8
.text:00402E10                 mov     esi, ebp
.text:00402E12                 mov     edi, edx
.text:00402E14                 repe cmpsb
.text:00402E16                 jnz     short loc_402DC0
.text:00402E18                 call    _errno
.text:00402E1D                 mov     edx, [eax]
.text:00402E1F                 lea     esi, [ebp+8]
.text:00402E22                 lea     edi, [esp+2Ch+EndPtr]
.text:00402E26                 mov     [esp+2Ch+var_18], edx
.text:00402E2A                 call    _errno
.text:00402E2F                 mov     dword ptr [eax], 0
.text:00402E35                 mov     [esp+2Ch+FileName], esi ; String
.text:00402E38                 mov     [esp+2Ch+Radix], 0Ah ; Radix
.text:00402E40                 mov     [esp+2Ch+OpenFlag], edi ; EndPtr
.text:00402E44                 call    strtoul
.text:00402E49                 mov     esi, eax
.text:00402E4B                 call    _errno
.text:00402E50                 mov     ecx, [eax]
.text:00402E52                 test    ecx, ecx
.text:00402E54                 jnz     short loc_402E76
.text:00402E56                 mov     ecx, [esp+2Ch+EndPtr]
.text:00402E5A                 cmp     byte ptr [ecx], 0
.text:00402E5D                 jnz     short loc_402E76
.text:00402E5F                 test    esi, esi
.text:00402E61                 js      short loc_402E76
.text:00402E63                 movzx   edx, byte ptr [ebp+8]
.text:00402E67                 mov     cl, dl
.text:00402E69                 sub     cl, 31h ; '1'
.text:00402E6C                 cmp     cl, 8
.text:00402E6F                 jbe     short loc_402E8C
.text:00402E71                 cmp     dl, 30h ; '0'
.text:00402E74                 jz      short loc_402E86
.text:00402E76
.text:00402E76 loc_402E76:                             ; CODE XREF: sub_402CD0+184↑j
.text:00402E76                                         ; sub_402CD0+18D↑j ...
.text:00402E76                 call    _errno
.text:00402E7B                 mov     esi, [esp+2Ch+var_18]
.text:00402E7F                 mov     [eax], esi
.text:00402E81                 jmp     loc_402DC0
.text:00402E86 ; ---------------------------------------------------------------------------
.text:00402E86
.text:00402E86 loc_402E86:                             ; CODE XREF: sub_402CD0+1A4↑j
.text:00402E86                 cmp     byte ptr [ebp+9], 0
.text:00402E8A                 jnz     short loc_402E76
.text:00402E8C
.text:00402E8C loc_402E8C:                             ; CODE XREF: sub_402CD0+19F↑j
.text:00402E8C                 mov     [esp+2Ch+Radix], ebx ; int
.text:00402E90                 mov     ebp, [esp+2Ch+arg_C]
.text:00402E94                 mov     eax, [esp+2Ch+arg_4]
.text:00402E98                 mov     [esp+2Ch+FileName], esi ; int
.text:00402E9B                 mov     dword ptr [esp+2Ch+var_20], ebp ; int
.text:00402E9F                 mov     [esp+2Ch+OpenFlag], eax ; char *
.text:00402EA3                 call    sub_402BE0
.text:00402EA8                 movzx   eax, al
.text:00402EAB                 jmp     loc_402D3E
.text:00402EB0 ; ---------------------------------------------------------------------------
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402CD0+CE↑j
.text:00402EB0                 mov     edx, [esp+2Ch+arg_C]
.text:00402EB4                 cmp     byte ptr [edx], 0
.text:00402EB7                 jz      loc_402DA4
.text:00402EBD                 mov     [esp+2Ch+OpenFlag], 80h ; '€' ; AccessMode
.text:00402EC5                 mov     [esp+2Ch+FileName], ebp ; FileName
.text:00402EC8                 call    _chmod
.text:00402ECD                 test    eax, eax
.text:00402ECF                 js      loc_402DC0
.text:00402ED5                 mov     [esp+2Ch+OpenFlag], 8001h ; OpenFlag
.text:00402EDD                 mov     [esp+2Ch+FileName], ebp ; FileName
.text:00402EE0                 call    _open
.text:00402EE5                 mov     [esp+2Ch+FileHandle], eax
.text:00402EE9                 jmp     loc_402DC0
.text:00402EE9 sub_402CD0      endp
.text:00402EE9
.text:00402EE9 ; ---------------------------------------------------------------------------
.text:00402EEE                 align 10h
.text:00402EF0
.text:00402EF0 ; =============== S U B R O U T I N E =======================================
.text:00402EF0
.text:00402EF0
.text:00402EF0 sub_402EF0      proc near               ; CODE XREF: sub_4026E0+89↑p
.text:00402EF0                                         ; sub_4026E0+11C↑p ...
.text:00402EF0
.text:00402EF0 var_20          = dword ptr -20h
.text:00402EF0 var_1C          = dword ptr -1Ch
.text:00402EF0 var_18          = dword ptr -18h
.text:00402EF0 var_14          = dword ptr -14h
.text:00402EF0 arg_0           = dword ptr  4
.text:00402EF0 arg_4           = dword ptr  8
.text:00402EF0
.text:00402EF0                 push    ebp
.text:00402EF1                 push    edi
.text:00402EF2                 push    esi
.text:00402EF3                 push    ebx
.text:00402EF4                 sub     esp, 10h
.text:00402EF7                 mov     ecx, [esp+20h+arg_0]
.text:00402EFB                 mov     eax, [ecx+410h]
.text:00402F01                 mov     edx, [ecx+414h]
.text:00402F07                 mov     ebx, [ecx+400h]
.text:00402F0D                 mov     [esp+20h+var_14], eax
.text:00402F11                 mov     esi, [ecx+404h]
.text:00402F17                 mov     edi, [ecx+408h]
.text:00402F1D                 mov     [esp+20h+var_18], edx
.text:00402F21                 mov     ebp, [ecx+40Ch]
.text:00402F27                 mov     ecx, [esp+20h+arg_0]
.text:00402F2B                 mov     eax, [ecx+418h]
.text:00402F31                 mov     ecx, [esp+20h+arg_0]
.text:00402F35                 mov     [esp+20h+var_1C], eax
.text:00402F39                 mov     edx, [ecx+41Ch]
.text:00402F3F                 mov     ecx, [esp+20h+arg_4]
.text:00402F43                 mov     [esp+20h+var_20], edx
.text:00402F46                 mov     edx, [esp+20h+arg_0]
.text:00402F4A                 lea     esi, [esi+0]
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_402EF0+14C↓j
.text:00402F50                 mov     eax, [ecx]
.text:00402F52                 add     ebx, eax
.text:00402F54                 mov     eax, [ecx+4]
.text:00402F57                 add     esi, eax
.text:00402F59                 mov     eax, [ecx+8]
.text:00402F5C                 add     edi, eax
.text:00402F5E                 mov     eax, [ecx+0Ch]
.text:00402F61                 add     ebp, eax
.text:00402F63                 mov     eax, [ecx+10h]
.text:00402F66                 add     [esp+20h+var_14], eax
.text:00402F6A                 mov     eax, [ecx+14h]
.text:00402F6D                 add     [esp+20h+var_18], eax
.text:00402F71                 mov     eax, [ecx+18h]
.text:00402F74                 add     [esp+20h+var_1C], eax
.text:00402F78                 mov     eax, [ecx+1Ch]
.text:00402F7B                 add     [esp+20h+var_20], eax
.text:00402F7E                 mov     eax, esi
.text:00402F80                 shl     eax, 0Bh
.text:00402F83                 xor     ebx, eax
.text:00402F85                 add     esi, edi
.text:00402F87                 mov     eax, edi
.text:00402F89                 shr     eax, 2
.text:00402F8C                 add     ebp, ebx
.text:00402F8E                 xor     esi, eax
.text:00402F90                 add     [esp+20h+var_14], esi
.text:00402F94                 mov     eax, ebp
.text:00402F96                 add     edi, ebp
.text:00402F98                 shl     eax, 8
.text:00402F9B                 xor     edi, eax
.text:00402F9D                 mov     eax, [esp+20h+var_14]
.text:00402FA1                 add     [esp+20h+var_18], edi
.text:00402FA5                 add     ebp, eax
.text:00402FA7                 mov     eax, [esp+20h+var_14]
.text:00402FAB                 shr     eax, 10h
.text:00402FAE                 xor     ebp, eax
.text:00402FB0                 mov     eax, [esp+20h+var_18]
.text:00402FB4                 add     [esp+20h+var_14], eax
.text:00402FB8                 add     [esp+20h+var_1C], ebp
.text:00402FBC                 shl     eax, 0Ah
.text:00402FBF                 xor     [esp+20h+var_14], eax
.text:00402FC3                 mov     eax, [esp+20h+var_14]
.text:00402FC7                 add     [esp+20h+var_20], eax
.text:00402FCA                 mov     eax, [esp+20h+var_1C]
.text:00402FCE                 add     [esp+20h+var_18], eax
.text:00402FD2                 mov     [edx+0Ch], ebp
.text:00402FD5                 shr     eax, 4
.text:00402FD8                 xor     [esp+20h+var_18], eax
.text:00402FDC                 mov     eax, [esp+20h+var_18]
.text:00402FE0                 add     ebx, eax
.text:00402FE2                 mov     eax, [esp+20h+var_20]
.text:00402FE5                 add     [esp+20h+var_1C], eax
.text:00402FE9                 shl     eax, 8
.text:00402FEC                 xor     [esp+20h+var_1C], eax
.text:00402FF0                 add     ecx, 20h ; ' '
.text:00402FF3                 add     [esp+20h+var_20], ebx
.text:00402FF6                 mov     eax, [esp+20h+var_1C]
.text:00402FFA                 add     esi, eax
.text:00402FFC                 mov     [edx+4], esi
.text:00402FFF                 mov     eax, ebx
.text:00403001                 shr     eax, 9
.text:00403004                 xor     [esp+20h+var_20], eax
.text:00403007                 add     ebx, esi
.text:00403009                 mov     [edx], ebx
.text:0040300B                 mov     eax, [esp+20h+var_20]
.text:0040300E                 add     edi, eax
.text:00403010                 mov     [edx+8], edi
.text:00403013                 mov     eax, [esp+20h+var_14]
.text:00403017                 mov     [edx+10h], eax
.text:0040301A                 mov     eax, [esp+20h+var_18]
.text:0040301E                 mov     [edx+14h], eax
.text:00403021                 mov     eax, [esp+20h+var_1C]
.text:00403025                 mov     [edx+18h], eax
.text:00403028                 mov     eax, [esp+20h+var_20]
.text:0040302B                 mov     [edx+1Ch], eax
.text:0040302E                 mov     eax, [esp+20h+arg_0]
.text:00403032                 add     edx, 20h ; ' '
.text:00403035                 add     eax, 3FCh
.text:0040303A                 cmp     edx, eax
.text:0040303C                 jle     loc_402F50
.text:00403042                 mov     ecx, [esp+20h+arg_0]
.text:00403046                 mov     [ecx+400h], ebx
.text:0040304C                 mov     ebx, [esp+20h+var_20]
.text:0040304F                 mov     [ecx+404h], esi
.text:00403055                 mov     esi, [esp+20h+var_1C]
.text:00403059                 mov     [ecx+408h], edi
.text:0040305F                 mov     edi, [esp+20h+var_18]
.text:00403063                 mov     [ecx+40Ch], ebp
.text:00403069                 mov     ebp, [esp+20h+var_14]
.text:0040306D                 mov     [ecx+414h], edi
.text:00403073                 mov     [ecx+418h], esi
.text:00403079                 mov     [ecx+410h], ebp
.text:0040307F                 mov     [ecx+41Ch], ebx
.text:00403085                 add     esp, 10h
.text:00403088                 pop     ebx
.text:00403089                 pop     esi
.text:0040308A                 pop     edi
.text:0040308B                 pop     ebp
.text:0040308C                 retn
.text:0040308C sub_402EF0      endp
.text:0040308C
.text:0040308C ; ---------------------------------------------------------------------------
.text:0040308D                 align 10h
.text:00403090
.text:00403090 ; =============== S U B R O U T I N E =======================================
.text:00403090
.text:00403090
.text:00403090 sub_403090      proc near               ; CODE XREF: sub_4026E0+305↑p
.text:00403090
.text:00403090 Signal          = dword ptr -2Ch
.text:00403090 Function        = dword ptr -28h
.text:00403090 var_24          = dword ptr -24h
.text:00403090 var_20          = dword ptr -20h
.text:00403090 var_1C          = dword ptr -1Ch
.text:00403090 var_18          = dword ptr -18h
.text:00403090 arg_0           = dword ptr  4
.text:00403090
.text:00403090                 push    ebp
.text:00403091                 push    edi
.text:00403092                 push    esi
.text:00403093                 push    ebx
.text:00403094                 sub     esp, 1Ch
.text:00403097                 mov     [esp+2Ch+Function], offset Function ; Function
.text:0040309F                 mov     [esp+2Ch+Signal], 4 ; Signal
.text:004030A6                 call    signal
.text:004030AB                 mov     [esp+2Ch+var_1C], eax
.text:004030AF                 mov     [esp+2Ch+Function], offset Function ; Function
.text:004030B7                 mov     [esp+2Ch+Signal], 0Bh ; Signal
.text:004030BE                 call    signal
.text:004030C3                 mov     [esp+2Ch+var_18], eax
.text:004030C7                 mov     [esp+2Ch+Signal], offset Buf ; Buf
.text:004030CE                 call    _setjmp
.text:004030D3                 test    eax, eax
.text:004030D5                 jz      short loc_403107
.text:004030D7                 mov     [esp+2Ch+Signal], 4 ; Signal
.text:004030DE                 mov     edx, [esp+2Ch+var_1C]
.text:004030E2                 mov     [esp+2Ch+Function], edx ; Function
.text:004030E6                 call    signal
.text:004030EB                 mov     [esp+2Ch+Signal], 0Bh ; Signal
.text:004030F2                 mov     edx, [esp+2Ch+var_18]
.text:004030F6                 mov     [esp+2Ch+Function], edx ; Function
.text:004030FA                 call    signal
.text:004030FF
.text:004030FF loc_4030FF:                             ; CODE XREF: sub_403090+142↓j
.text:004030FF                 add     esp, 1Ch
.text:00403102                 pop     ebx
.text:00403103                 pop     esi
.text:00403104                 pop     edi
.text:00403105                 pop     ebp
.text:00403106                 retn
.text:00403107 ; ---------------------------------------------------------------------------
.text:00403107
.text:00403107 loc_403107:                             ; CODE XREF: sub_403090+45↑j
.text:00403107                 rdtsc
.text:00403109                 mov     [esp+2Ch+var_20], edx
.text:0040310D                 mov     ebx, [esp+2Ch+var_1C]
.text:00403111                 mov     ebp, 8
.text:00403116                 mov     [esp+2Ch+var_24], eax
.text:0040311A                 lea     edi, [esp+2Ch+var_24]
.text:0040311E                 mov     [esp+2Ch+Signal], 4 ; Signal
.text:00403125                 mov     [esp+2Ch+Function], ebx ; Function
.text:00403129                 mov     ebx, 400h
.text:0040312E                 call    signal
.text:00403133                 mov     [esp+2Ch+Signal], 0Bh ; Signal
.text:0040313A                 mov     ecx, [esp+2Ch+var_18]
.text:0040313E                 mov     [esp+2Ch+Function], ecx ; Function
.text:00403142                 call    signal
.text:00403147                 mov     esi, [esp+2Ch+arg_0]
.text:0040314B                 mov     eax, [esi+428h]
.text:00403151                 sub     ebx, eax
.text:00403153                 cmp     ebp, ebx
.text:00403155                 jbe     short loc_4031A1
.text:00403157                 mov     esi, esi
.text:00403159                 lea     edi, [edi+0]
.text:00403160
.text:00403160 loc_403160:                             ; CODE XREF: sub_403090+10F↓j
.text:00403160                 mov     edx, [esi+428h]
.text:00403166                 mov     ecx, esi
.text:00403168                 add     ecx, edx
.text:0040316A                 xor     edx, edx
.text:0040316C                 cmp     edx, ebx
.text:0040316E                 jnb     short loc_40317C
.text:00403170
.text:00403170 loc_403170:                             ; CODE XREF: sub_403090+EA↓j
.text:00403170                 movzx   eax, byte ptr [edx+edi]
.text:00403174                 xor     [edx+ecx], al
.text:00403177                 inc     edx
.text:00403178                 cmp     edx, ebx
.text:0040317A                 jb      short loc_403170
.text:0040317C
.text:0040317C loc_40317C:                             ; CODE XREF: sub_403090+DE↑j
.text:0040317C                 mov     [esp+2Ch+Function], esi
.text:00403180                 sub     ebp, ebx
.text:00403182                 add     edi, ebx
.text:00403184                 mov     [esp+2Ch+Signal], esi
.text:00403187                 mov     ebx, 400h
.text:0040318C                 call    sub_402EF0
.text:00403191                 xor     ecx, ecx
.text:00403193                 cmp     ebp, 400h
.text:00403199                 mov     [esi+428h], ecx
.text:0040319F                 ja      short loc_403160
.text:004031A1
.text:004031A1 loc_4031A1:                             ; CODE XREF: sub_403090+C5↑j
.text:004031A1                 mov     ebx, [esi+428h]
.text:004031A7                 mov     ecx, esi
.text:004031A9                 xor     edx, edx
.text:004031AB                 add     ecx, ebx
.text:004031AD                 cmp     edx, ebp
.text:004031AF                 jnb     short loc_4031CC
.text:004031B1                 jmp     short loc_4031C0
.text:004031B1 ; ---------------------------------------------------------------------------
.text:004031B3                 align 10h
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_403090+121↑j
.text:004031C0                                         ; sub_403090+13A↓j
.text:004031C0                 movzx   ebx, byte ptr [edx+edi]
.text:004031C4                 xor     [edx+ecx], bl
.text:004031C7                 inc     edx
.text:004031C8                 cmp     edx, ebp
.text:004031CA                 jb      short loc_4031C0
.text:004031CC
.text:004031CC loc_4031CC:                             ; CODE XREF: sub_403090+11F↑j
.text:004031CC                 mov     [esi+428h], ebp
.text:004031D2                 jmp     loc_4030FF
.text:004031D2 sub_403090      endp
.text:004031D2
.text:004031D2 ; ---------------------------------------------------------------------------
.text:004031D7 aSErrorTruncati db '%s: error truncating',0
.text:004031D7                                         ; DATA XREF: sub_403230+292↓o
.text:004031EC aSFileHasNegati db '%s: file has negative size',0
.text:004031EC                                         ; DATA XREF: sub_403230+4BC↓o
.text:00403207 aSInvalidFileTy db '%s: invalid file type',0
.text:00403207                                         ; DATA XREF: sub_403230:loc_403722↓o
.text:0040321D aSFstatFailed   db '%s: fstat failed',0 ; DATA XREF: sub_403230:loc_403747↓o
.text:0040322E                 align 10h
.text:00403230
.text:00403230 ; =============== S U B R O U T I N E =======================================
.text:00403230
.text:00403230
.text:00403230 ; int __cdecl sub_403230(int, char *, int, int)
.text:00403230 sub_403230      proc near               ; CODE XREF: sub_402BE0+79↑p
.text:00403230                                         ; sub_402CD0+46↑p
.text:00403230
.text:00403230 FileHandle      = dword ptr -0DCh
.text:00403230 Offset          = qword ptr -0D8h
.text:00403230 Origin          = dword ptr -0D0h
.text:00403230 var_CC          = dword ptr -0CCh
.text:00403230 var_C8          = dword ptr -0C8h
.text:00403230 var_C4          = dword ptr -0C4h
.text:00403230 var_B4          = dword ptr -0B4h
.text:00403230 var_B0          = dword ptr -0B0h
.text:00403230 var_AC          = dword ptr -0ACh
.text:00403230 var_A8          = dword ptr -0A8h
.text:00403230 var_A4          = dword ptr -0A4h
.text:00403230 var_A0          = dword ptr -0A0h
.text:00403230 var_99          = byte ptr -99h
.text:00403230 var_98          = dword ptr -98h
.text:00403230 var_94          = dword ptr -94h
.text:00403230 var_90          = dword ptr -90h
.text:00403230 var_8C          = dword ptr -8Ch
.text:00403230 var_5C          = dword ptr -5Ch
.text:00403230 var_58          = dword ptr -58h
.text:00403230 var_3C          = dword ptr -3Ch
.text:00403230 arg_0           = dword ptr  4
.text:00403230 arg_4           = dword ptr  8
.text:00403230 arg_8           = dword ptr  0Ch
.text:00403230 arg_C           = dword ptr  10h
.text:00403230
.text:00403230                 push    ebp
.text:00403231                 push    edi
.text:00403232                 push    esi
.text:00403233                 push    ebx
.text:00403234                 sub     esp, 0CCh
.text:0040323A                 mov     edx, [esp+0DCh+arg_0]
.text:00403241                 mov     [esp+0DCh+var_99], 1
.text:00403246                 mov     [esp+0DCh+FileHandle], edx ; FileHandle
.text:00403249                 call    _isatty
.text:0040324E                 test    eax, eax
.text:00403250                 jz      loc_403770
.text:00403256
.text:00403256 loc_403256:                             ; CODE XREF: sub_403230+557↓j
.text:00403256                 mov     [esp+0DCh+var_98], 0
.text:0040325E                 mov     ecx, [esp+0DCh+arg_C]
.text:00403265                 cmp     byte ptr [ecx+11h], 0
.text:00403269                 jz      short loc_403278
.text:0040326B                 movzx   ebx, byte ptr [ecx+13h]
.text:0040326F                 mov     esi, [ecx+4]
.text:00403272                 add     ebx, esi
.text:00403274                 mov     [esp+0DCh+var_98], ebx
.text:00403278
.text:00403278 loc_403278:                             ; CODE XREF: sub_403230+39↑j
.text:00403278                 mov     edx, [esp+0DCh+arg_4]
.text:0040327F                 lea     ecx, [esp+0DCh+var_8C]
.text:00403283                 mov     dword ptr [esp+0DCh+Offset], ecx ; int
.text:00403287                 mov     [esp+0DCh+FileHandle], edx ; char *
.text:0040328A                 call    sub_40AB40
.text:0040328F                 test    eax, eax
.text:00403291                 jnz     loc_403747
.text:00403297                 mov     edx, [esp+0DCh+var_8C]
.text:0040329B                 mov     ebp, edx
.text:0040329D                 and     ebp, 0F000h
.text:004032A3                 cmp     ebp, 2000h
.text:004032A9                 jz      loc_40372B
.text:004032AF
.text:004032AF loc_4032AF:                             ; CODE XREF: sub_403230+512↓j
.text:004032AF                 mov     eax, edx
.text:004032B1                 and     eax, 0F000h
.text:004032B6                 cmp     eax, 1000h
.text:004032BB                 jz      loc_403722
.text:004032C1                 cmp     eax, 0C000h
.text:004032C6                 jz      loc_403722
.text:004032CC                 mov     dword ptr [esp+0DCh+Offset], 4
.text:004032D4                 mov     ebp, [esp+0DCh+arg_C]
.text:004032DB                 mov     edi, [ebp+4]
.text:004032DE                 mov     [esp+0DCh+FileHandle], edi
.text:004032E1                 call    sub_408E60
.text:004032E6                 mov     ebx, [esp+0DCh+arg_C]
.text:004032ED                 mov     ebp, eax
.text:004032EF                 mov     esi, [ebx+8]
.text:004032F2                 mov     ecx, [ebx+0Ch]
.text:004032F5                 mov     edx, esi
.text:004032F7                 and     edx, ecx
.text:004032F9                 mov     [esp+0DCh+var_94], esi
.text:004032FD                 inc     edx
.text:004032FE                 mov     [esp+0DCh+var_90], ecx
.text:00403302                 jnz     short loc_403380
.text:00403304                 mov     edx, [esp+0DCh+var_8C]
.text:00403308                 and     edx, 0F000h
.text:0040330E                 cmp     edx, 8000h
.text:00403314                 jz      loc_4036CE
.text:0040331A                 mov     [esp+0DCh+Origin], 2 ; Origin
.text:00403322                 mov     eax, [esp+0DCh+arg_0]
.text:00403329                 mov     dword ptr [esp+0DCh+Offset], 0 ; Offset
.text:00403331                 mov     dword ptr [esp+0DCh+Offset+4], 0
.text:00403339                 mov     [esp+0DCh+FileHandle], eax ; FileHandle
.text:0040333C                 call    _lseeki64
.text:00403341                 mov     [esp+0DCh+var_94], eax
.text:00403345                 test    edx, edx
.text:00403347                 mov     ebx, eax
.text:00403349                 mov     [esp+0DCh+var_90], edx
.text:0040334D                 mov     esi, edx
.text:0040334F                 jle     loc_4036A2
.text:00403355
.text:00403355 loc_403355:                             ; CODE XREF: sub_403230+479↓j
.text:00403355                                         ; sub_403230+499↓j
.text:00403355                 test    esi, esi
.text:00403357                 js      short loc_403380
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: sub_403230+4B6↓j
.text:00403359                 mov     edi, [esp+0DCh+arg_C]
.text:00403360                 cmp     byte ptr [edi+12h], 0
.text:00403364                 jnz     short loc_403380
.text:00403366                 mov     edx, [esp+0DCh+var_8C]
.text:0040336A                 and     edx, 0F000h
.text:00403370                 cmp     edx, 8000h
.text:00403376                 jz      loc_4035AE
.text:0040337C                 lea     esi, [esi+0]
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_403230+D2↑j
.text:00403380                                         ; sub_403230+127↑j ...
.text:00403380                 mov     eax, [esp+0DCh+arg_8]
.text:00403387                 mov     edi, [esp+0DCh+arg_C]
.text:0040338E                 mov     dword ptr [esp+0DCh+Offset+4], eax
.text:00403392                 mov     ebx, [edi+4]
.text:00403395                 mov     [esp+0DCh+FileHandle], ebp
.text:00403398                 mov     dword ptr [esp+0DCh+Offset], ebx
.text:0040339C                 call    sub_404AB0
.text:004033A1                 mov     esi, [esp+0DCh+arg_C]
.text:004033A8                 xor     edx, edx
.text:004033AA                 mov     eax, [esi+4]
.text:004033AD                 cmp     edx, eax
.text:004033AF                 jnb     short loc_403421
.text:004033B1                 lea     esi, [esp+0DCh+var_94]
.text:004033B5                 lea     esi, [esi+0]
.text:004033B9                 lea     edi, [edi+0]
.text:004033C0
.text:004033C0 loc_4033C0:                             ; CODE XREF: sub_403230+1EF↓j
.text:004033C0                 mov     ebx, [esp+0DCh+var_98]
.text:004033C4                 mov     eax, [esp+0DCh+arg_8]
.text:004033CB                 mov     ecx, [esp+0DCh+arg_0]
.text:004033D2                 mov     [esp+0DCh+var_C4], ebx
.text:004033D6                 lea     ebx, [edx+1]
.text:004033D9                 mov     [esp+0DCh+var_C8], ebx
.text:004033DD                 mov     [esp+0DCh+var_CC], eax
.text:004033E1                 mov     edi, [ebp+edx*4+0]
.text:004033E5                 mov     edx, [esp+0DCh+arg_4]
.text:004033EC                 mov     dword ptr [esp+0DCh+Offset+4], esi
.text:004033F0                 mov     [esp+0DCh+Origin], edi
.text:004033F4                 mov     dword ptr [esp+0DCh+Offset], edx
.text:004033F8                 mov     [esp+0DCh+FileHandle], ecx
.text:004033FB                 call    sub_403D80
.text:00403400                 test    eax, eax
.text:00403402                 jz      short loc_403411
.text:00403404                 mov     [esp+0DCh+var_99], 0
.text:00403409                 test    eax, eax
.text:0040340B                 js      loc_40356E
.text:00403411
.text:00403411 loc_403411:                             ; CODE XREF: sub_403230+1D2↑j
.text:00403411                 mov     edi, [esp+0DCh+arg_C]
.text:00403418                 mov     edx, ebx
.text:0040341A                 mov     eax, [edi+4]
.text:0040341D                 cmp     ebx, eax
.text:0040341F                 jb      short loc_4033C0
.text:00403421
.text:00403421 loc_403421:                             ; CODE XREF: sub_403230+17F↑j
.text:00403421                 shl     eax, 2
.text:00403424                 mov     edi, ebp
.text:00403426                 cmp     eax, 7
.text:00403429                 jbe     short loc_403440
.text:0040342B                 test    ebp, 4
.text:00403431                 jz      short loc_403440
.text:00403433                 mov     dword ptr [ebp+0], 0
.text:0040343A                 lea     edi, [ebp+4]
.text:0040343D                 sub     eax, 4
.text:00403440
.text:00403440 loc_403440:                             ; CODE XREF: sub_403230+1F9↑j
.text:00403440                                         ; sub_403230+201↑j
.text:00403440                 cld
.text:00403441                 mov     ecx, eax
.text:00403443                 shr     ecx, 2
.text:00403446                 xor     eax, eax
.text:00403448                 rep stosd
.text:0040344A                 mov     [esp+0DCh+FileHandle], ebp ; Block
.text:0040344D                 call    free
.text:00403452                 mov     eax, [esp+0DCh+arg_C]
.text:00403459                 cmp     byte ptr [eax+13h], 0
.text:0040345D                 jnz     loc_40350D
.text:00403463
.text:00403463 loc_403463:                             ; CODE XREF: sub_403230+324↓j
.text:00403463                                         ; sub_403230+339↓j
.text:00403463                 mov     ecx, [esp+0DCh+arg_C]
.text:0040346A                 cmp     byte ptr [ecx+10h], 0
.text:0040346E                 jnz     short loc_40348D
.text:00403470
.text:00403470 loc_403470:                             ; CODE XREF: sub_403230+27E↓j
.text:00403470                                         ; sub_403230+290↓j
.text:00403470                 movzx   edx, [esp+0DCh+var_99]
.text:00403475                 lea     esi, [esi+0]
.text:00403479                 lea     edi, [edi+0]
.text:00403480
.text:00403480 loc_403480:                             ; CODE XREF: sub_403230+2D8↓j
.text:00403480                                         ; sub_403230+32E↓j
.text:00403480                 add     esp, 0CCh
.text:00403486                 mov     eax, edx
.text:00403488                 pop     ebx
.text:00403489                 pop     esi
.text:0040348A                 pop     edi
.text:0040348B                 pop     ebp
.text:0040348C                 retn
.text:0040348D ; ---------------------------------------------------------------------------
.text:0040348D
.text:0040348D loc_40348D:                             ; CODE XREF: sub_403230+23E↑j
.text:0040348D                 mov     dword ptr [esp+0DCh+Offset], 0
.text:00403495                 mov     eax, [esp+0DCh+arg_0]
.text:0040349C                 mov     dword ptr [esp+0DCh+Offset+4], 0
.text:004034A4                 mov     [esp+0DCh+FileHandle], eax
.text:004034A7                 call    sub_40ACE0
.text:004034AC                 test    eax, eax
.text:004034AE                 jz      short loc_403470
.text:004034B0                 mov     edx, [esp+0DCh+var_8C]
.text:004034B4                 and     edx, 0F000h
.text:004034BA                 cmp     edx, 8000h
.text:004034C0                 jnz     short loc_403470
.text:004034C2                 mov     [esp+0DCh+FileHandle], offset aSErrorTruncati ; "%s: error truncating"
.text:004034C9                 call    ds:libintl_gettext
.text:004034CF                 mov     ebx, eax
.text:004034D1                 call    _errno
.text:004034D6                 mov     esi, [esp+0DCh+arg_4]
.text:004034DD                 mov     [esp+0DCh+Origin], esi ; char
.text:004034E1                 jmp     short loc_4034F0
.text:004034E1 ; ---------------------------------------------------------------------------
.text:004034E3                 align 10h
.text:004034F0
.text:004034F0 loc_4034F0:                             ; CODE XREF: sub_403230+2B1↑j
.text:004034F0                                         ; sub_403230+536↓j
.text:004034F0                 mov     dword ptr [esp+0DCh+Offset+4], ebx ; char *
.text:004034F4                 mov     ebx, [eax]
.text:004034F6                 mov     dword ptr [esp+0DCh+Offset], ebx ; ErrorMessage
.text:004034FA
.text:004034FA loc_4034FA:                             ; CODE XREF: sub_403230+4ED↓j
.text:004034FA                 mov     [esp+0DCh+FileHandle], 0 ; Code
.text:00403501                 call    sub_40A820
.text:00403506
.text:00403506 loc_403506:                             ; CODE XREF: sub_403230+379↓j
.text:00403506                 xor     edx, edx
.text:00403508                 jmp     loc_403480
.text:0040350D ; ---------------------------------------------------------------------------
.text:0040350D
.text:0040350D loc_40350D:                             ; CODE XREF: sub_403230+22D↑j
.text:0040350D                 mov     ebp, [esp+0DCh+var_98]
.text:00403511                 lea     edx, [esp+0DCh+var_94]
.text:00403515                 mov     ebx, [esp+0DCh+arg_8]
.text:0040351C                 mov     ecx, [esp+0DCh+arg_4]
.text:00403523                 mov     [esp+0DCh+var_C4], ebp
.text:00403527                 mov     esi, [eax+4]
.text:0040352A                 mov     dword ptr [esp+0DCh+Offset+4], edx
.text:0040352E                 mov     ebp, [esp+0DCh+arg_0]
.text:00403535                 mov     [esp+0DCh+var_CC], ebx
.text:00403539                 inc     esi
.text:0040353A                 mov     [esp+0DCh+var_C8], esi
.text:0040353E                 mov     [esp+0DCh+Origin], 0
.text:00403546                 mov     dword ptr [esp+0DCh+Offset], ecx
.text:0040354A                 mov     [esp+0DCh+FileHandle], ebp
.text:0040354D                 call    sub_403D80
.text:00403552                 test    eax, eax
.text:00403554                 jz      loc_403463
.text:0040355A                 xor     edx, edx
.text:0040355C                 test    eax, eax
.text:0040355E                 js      loc_403480
.text:00403564                 mov     [esp+0DCh+var_99], 0
.text:00403569                 jmp     loc_403463
.text:0040356E ; ---------------------------------------------------------------------------
.text:0040356E
.text:0040356E loc_40356E:                             ; CODE XREF: sub_403230+1DB↑j
.text:0040356E                 mov     esi, [esp+0DCh+arg_C]
.text:00403575                 mov     edi, ebp
.text:00403577                 mov     eax, [esi+4]
.text:0040357A                 shl     eax, 2
.text:0040357D                 cmp     eax, 7
.text:00403580                 jbe     short loc_403597
.text:00403582                 test    ebp, 4
.text:00403588                 jz      short loc_403597
.text:0040358A                 mov     dword ptr [ebp+0], 0
.text:00403591                 lea     edi, [ebp+4]
.text:00403594                 sub     eax, 4
.text:00403597
.text:00403597 loc_403597:                             ; CODE XREF: sub_403230+350↑j
.text:00403597                                         ; sub_403230+358↑j
.text:00403597                 cld
.text:00403598                 mov     ecx, eax
.text:0040359A                 shr     ecx, 2
.text:0040359D                 xor     eax, eax
.text:0040359F                 rep stosd
.text:004035A1                 mov     [esp+0DCh+FileHandle], ebp ; Block
.text:004035A4                 call    free
.text:004035A9                 jmp     loc_403506
.text:004035AE ; ---------------------------------------------------------------------------
.text:004035AE
.text:004035AE loc_4035AE:                             ; CODE XREF: sub_403230+146↑j
.text:004035AE                 mov     edi, ebx
.text:004035B0                 mov     eax, esi
.text:004035B2                 add     edi, 0FFFFFFFFh
.text:004035B5                 mov     [esp+0DCh+var_AC], edi
.text:004035B9                 mov     edi, [esp+0DCh+var_3C]
.text:004035C0                 adc     eax, 0FFFFFFFFh
.text:004035C3                 mov     [esp+0DCh+var_A8], eax
.text:004035C7                 lea     ecx, [edi-1]
.text:004035CA                 cmp     ecx, 3FFFFFh
.text:004035D0                 ja      short loc_403640
.text:004035D2                 mov     dword ptr [esp+0DCh+Offset+4], edi
.text:004035D6                 mov     edx, [esp+0DCh+var_AC]
.text:004035DA                 mov     eax, edi
.text:004035DC                 mov     ecx, [esp+0DCh+var_A8]
.text:004035E0                 sar     eax, 1Fh
.text:004035E3                 mov     [esp+0DCh+Origin], eax
.text:004035E7                 mov     [esp+0DCh+FileHandle], edx
.text:004035EA                 mov     dword ptr [esp+0DCh+Offset], ecx
.text:004035EE                 call    sub_4128F0
.text:004035F3
.text:004035F3 loc_4035F3:                             ; CODE XREF: sub_403230+456↓j
.text:004035F3                 mov     [esp+0DCh+var_A4], eax
.text:004035F7                 lea     eax, [edi-1]
.text:004035FA                 cmp     eax, 3FFFFFh
.text:004035FF                 mov     [esp+0DCh+var_A0], edx
.text:00403603                 ja      short loc_403637
.text:00403605                 cdq
.text:00403606
.text:00403606 loc_403606:                             ; CODE XREF: sub_403230+40E↓j
.text:00403606                 sub     eax, [esp+0DCh+var_A4]
.text:0040360A                 sbb     edx, [esp+0DCh+var_A0]
.text:0040360E                 add     ebx, eax
.text:00403610                 mov     [esp+0DCh+var_94], ebx
.text:00403614                 adc     esi, edx
.text:00403616                 test    esi, esi
.text:00403618                 mov     [esp+0DCh+var_90], esi
.text:0040361C                 jns     loc_403380
.text:00403622                 mov     [esp+0DCh+var_94], 0FFFFFFFFh
.text:0040362A                 mov     [esp+0DCh+var_90], 7FFFFFFFh
.text:00403632                 jmp     loc_403380
.text:00403637 ; ---------------------------------------------------------------------------
.text:00403637
.text:00403637 loc_403637:                             ; CODE XREF: sub_403230+3D3↑j
.text:00403637                 mov     eax, 1FFh
.text:0040363C                 xor     edx, edx
.text:0040363E                 jmp     short loc_403606
.text:00403640 ; ---------------------------------------------------------------------------
.text:00403640
.text:00403640 loc_403640:                             ; CODE XREF: sub_403230+3A0↑j
.text:00403640                 mov     edx, [esp+0DCh+var_A8]
.text:00403644                 mov     ecx, [esp+0DCh+var_AC]
.text:00403648                 mov     eax, [esp+0DCh+var_A8]
.text:0040364C                 test    edx, edx
.text:0040364E                 mov     [esp+0DCh+var_B4], ecx
.text:00403652                 mov     [esp+0DCh+var_B0], eax
.text:00403656                 js      short loc_40368B
.text:00403658
.text:00403658 loc_403658:                             ; CODE XREF: sub_403230+470↓j
.text:00403658                 mov     eax, [esp+0DCh+var_B0]
.text:0040365C                 mov     ecx, [esp+0DCh+var_B4]
.text:00403660                 mov     edx, [esp+0DCh+var_A8]
.text:00403664                 shrd    ecx, eax, 9
.text:00403668                 sar     eax, 9
.text:0040366B                 shld    eax, ecx, 9
.text:0040366F                 shl     ecx, 9
.text:00403672                 mov     [esp+0DCh+var_B0], eax
.text:00403676                 mov     eax, [esp+0DCh+var_AC]
.text:0040367A                 mov     [esp+0DCh+var_B4], ecx
.text:0040367E                 sub     eax, [esp+0DCh+var_B4]
.text:00403682                 sbb     edx, [esp+0DCh+var_B0]
.text:00403686                 jmp     loc_4035F3
.text:0040368B ; ---------------------------------------------------------------------------
.text:0040368B
.text:0040368B loc_40368B:                             ; CODE XREF: sub_403230+426↑j
.text:0040368B                 mov     edx, ebx
.text:0040368D                 mov     ecx, esi
.text:0040368F                 add     edx, 1FEh
.text:00403695                 adc     ecx, 0
.text:00403698                 mov     [esp+0DCh+var_B4], edx
.text:0040369C                 mov     [esp+0DCh+var_B0], ecx
.text:004036A0                 jmp     short loc_403658
.text:004036A2 ; ---------------------------------------------------------------------------
.text:004036A2
.text:004036A2 loc_4036A2:                             ; CODE XREF: sub_403230+11F↑j
.text:004036A2                 test    edx, edx
.text:004036A4                 js      short loc_4036AF
.text:004036A6                 cmp     eax, 0
.text:004036A9                 ja      loc_403355
.text:004036AF
.text:004036AF loc_4036AF:                             ; CODE XREF: sub_403230+474↑j
.text:004036AF                 mov     [esp+0DCh+var_94], 0FFFFFFFFh
.text:004036B7                 mov     ebx, 0FFFFFFFFh
.text:004036BC                 mov     esi, 0FFFFFFFFh
.text:004036C1                 mov     [esp+0DCh+var_90], 0FFFFFFFFh
.text:004036C9                 jmp     loc_403355
.text:004036CE ; ---------------------------------------------------------------------------
.text:004036CE
.text:004036CE loc_4036CE:                             ; CODE XREF: sub_403230+E4↑j
.text:004036CE                 mov     esi, [esp+0DCh+var_58]
.text:004036D5                 mov     ebx, [esp+0DCh+var_5C]
.text:004036DC                 test    esi, esi
.text:004036DE                 mov     [esp+0DCh+var_94], ebx
.text:004036E2                 mov     [esp+0DCh+var_90], esi
.text:004036E6                 jns     loc_403359
.text:004036EC                 mov     [esp+0DCh+FileHandle], offset aSFileHasNegati ; "%s: file has negative size"
.text:004036F3                 lea     esi, [esi+0]
.text:004036F9                 lea     edi, [edi+0]
.text:00403700
.text:00403700 loc_403700:                             ; CODE XREF: sub_403230+4F9↓j
.text:00403700                 call    ds:libintl_gettext
.text:00403706                 mov     dword ptr [esp+0DCh+Offset], 0
.text:0040370E                 mov     ecx, [esp+0DCh+arg_4]
.text:00403715                 mov     dword ptr [esp+0DCh+Offset+4], eax
.text:00403719                 mov     [esp+0DCh+Origin], ecx
.text:0040371D                 jmp     loc_4034FA
.text:00403722 ; ---------------------------------------------------------------------------
.text:00403722
.text:00403722 loc_403722:                             ; CODE XREF: sub_403230+8B↑j
.text:00403722                                         ; sub_403230+96↑j ...
.text:00403722                 mov     [esp+0DCh+FileHandle], offset aSInvalidFileTy ; "%s: invalid file type"
.text:00403729                 jmp     short loc_403700
.text:0040372B ; ---------------------------------------------------------------------------
.text:0040372B
.text:0040372B loc_40372B:                             ; CODE XREF: sub_403230+79↑j
.text:0040372B                 mov     eax, [esp+0DCh+arg_0]
.text:00403732                 mov     [esp+0DCh+FileHandle], eax ; FileHandle
.text:00403735                 call    _isatty
.text:0040373A                 test    eax, eax
.text:0040373C                 jnz     short loc_403722
.text:0040373E                 mov     edx, [esp+0DCh+var_8C]
.text:00403742                 jmp     loc_4032AF
.text:00403747 ; ---------------------------------------------------------------------------
.text:00403747
.text:00403747 loc_403747:                             ; CODE XREF: sub_403230+61↑j
.text:00403747                 mov     [esp+0DCh+FileHandle], offset aSFstatFailed ; "%s: fstat failed"
.text:0040374E                 call    ds:libintl_gettext
.text:00403754                 mov     ebx, eax
.text:00403756                 call    _errno
.text:0040375B                 mov     edi, [esp+0DCh+arg_4]
.text:00403762                 mov     [esp+0DCh+Origin], edi
.text:00403766                 jmp     loc_4034F0
.text:00403766 ; ---------------------------------------------------------------------------
.text:0040376B                 align 10h
.text:00403770
.text:00403770 loc_403770:                             ; CODE XREF: sub_403230+20↑j
.text:00403770                 mov     dword ptr [esp+0DCh+Offset], 8000h ; Mode
.text:00403778                 mov     eax, [esp+0DCh+arg_0]
.text:0040377F                 mov     [esp+0DCh+FileHandle], eax ; FileHandle
.text:00403782                 call    _setmode
.text:00403787                 jmp     loc_403256
.text:00403787 sub_403230      endp
.text:00403787
.text:00403787 ; ---------------------------------------------------------------------------
.text:0040378C aSRenamedToS    db '%s: renamed to %s',0
.text:0040378C                                         ; DATA XREF: sub_403800:loc_403971↓o
.text:0040379E aSFdatasyncFail db '%s: fdatasync failed',0
.text:0040379E                                         ; DATA XREF: sub_403800+1D4↓o
.text:0040379E                                         ; sub_403800+304↓o ...
.text:004037B3 aSFsyncFailed   db '%s: fsync failed',0 ; DATA XREF: sub_403800+22F↓o
.text:004037B3                                         ; sub_403800+35F↓o ...
.text:004037C4 aSRemoved       db '%s: removed',0      ; DATA XREF: sub_403800:loc_403B72↓o
.text:004037D0 aSFailedToRemov db '%s: failed to remove',0
.text:004037D0                                         ; DATA XREF: sub_403800:loc_403BA7↓o
.text:004037E5 aSRemoving      db '%s: removing',0     ; DATA XREF: sub_403800:loc_403BE6↓o
.text:004037F2                 align 10h
.text:00403800
.text:00403800 ; =============== S U B R O U T I N E =======================================
.text:00403800
.text:00403800
.text:00403800 ; int __cdecl sub_403800(LPCSTR, char, int)
.text:00403800 sub_403800      proc near               ; CODE XREF: sub_402CD0+85↑p
.text:00403800
.text:00403800 FileName        = dword ptr -0CCh
.text:00403800 OpenFlag        = dword ptr -0C8h
.text:00403800 Size            = dword ptr -0C4h
.text:00403800 var_C0          = byte ptr -0C0h
.text:00403800 var_BC          = dword ptr -0BCh
.text:00403800 var_A4          = dword ptr -0A4h
.text:00403800 var_A0          = dword ptr -0A0h
.text:00403800 var_9A          = byte ptr -9Ah
.text:00403800 var_99          = byte ptr -99h
.text:00403800 var_98          = dword ptr -98h
.text:00403800 var_94          = dword ptr -94h
.text:00403800 Block           = dword ptr -90h
.text:00403800 var_8C          = byte ptr -8Ch
.text:00403800 arg_0           = dword ptr  4
.text:00403800 arg_4           = byte ptr  8
.text:00403800 arg_8           = dword ptr  0Ch
.text:00403800
.text:00403800                 push    ebp
.text:00403801                 push    edi
.text:00403802                 push    esi
.text:00403803                 push    ebx
.text:00403804                 sub     esp, 0BCh
.text:0040380A                 mov     edx, [esp+0CCh+arg_0]
.text:00403811                 mov     [esp+0CCh+FileName], edx ; char *
.text:00403814                 call    sub_409060
.text:00403819                 mov     [esp+0CCh+Block], eax
.text:0040381D                 mov     [esp+0CCh+FileName], eax
.text:00403820                 call    sub_408DB0
.text:00403825                 mov     [esp+0CCh+FileName], eax ; char *
.text:00403828                 mov     esi, eax
.text:0040382A                 call    sub_408E10
.text:0040382F                 mov     edi, eax
.text:00403831                 mov     eax, [esp+0CCh+Block]
.text:00403835                 mov     [esp+0CCh+FileName], eax ; void *
.text:00403838                 call    sub_408CE0
.text:0040383D                 mov     [esp+0CCh+var_94], eax
.text:00403841                 mov     [esp+0CCh+FileName], eax ; char *
.text:00403844                 call    sub_406590
.text:00403849                 mov     [esp+0CCh+FileName], eax ; char *
.text:0040384C                 call    sub_409060
.text:00403851                 mov     [esp+0CCh+var_98], eax
.text:00403855                 mov     edx, [esp+0CCh+var_94]
.text:00403859                 mov     [esp+0CCh+var_99], 1
.text:0040385E                 mov     [esp+0CCh+var_9A], 1
.text:00403863                 mov     [esp+0CCh+OpenFlag], 8001h ; OpenFlag
.text:0040386B                 mov     [esp+0CCh+FileName], edx ; FileName
.text:0040386E                 call    _open
.text:00403873                 test    eax, eax
.text:00403875                 mov     ebp, eax
.text:00403877                 js      loc_403C1B
.text:0040387D
.text:0040387D loc_40387D:                             ; CODE XREF: sub_403800+431↓j
.text:0040387D                 mov     ebx, [esp+0CCh+arg_8]
.text:00403884                 cmp     byte ptr [ebx+11h], 0
.text:00403888                 jnz     loc_403BE6
.text:0040388E
.text:0040388E loc_40388E:                             ; CODE XREF: sub_403800+11A↓j
.text:0040388E                                         ; sub_403800+416↓j
.text:0040388E                 test    edi, edi
.text:00403890                 jz      loc_403A42
.text:00403896                 mov     [esp+0CCh+Size], edi ; Size
.text:0040389A                 mov     [esp+0CCh+OpenFlag], 30h ; '0' ; Val
.text:004038A2                 mov     [esp+0CCh+FileName], esi ; void *
.text:004038A5                 call    memset
.text:004038AA                 mov     byte ptr [edi+esi], 0
.text:004038AE                 mov     ecx, esi
.text:004038B0                 lea     edx, [edi-1]
.text:004038B3                 mov     [esp+0CCh+var_A4], edx
.text:004038B7                 mov     ebx, [esp+0CCh+Block]
.text:004038BB                 mov     eax, [esp+0CCh+arg_0]
.text:004038C2                 sub     ecx, ebx
.text:004038C4                 add     ecx, eax
.text:004038C6                 mov     [esp+0CCh+var_A0], ecx
.text:004038CA
.text:004038CA loc_4038CA:                             ; CODE XREF: sub_403800+122↓j
.text:004038CA                 mov     ecx, [esp+0CCh+Block]
.text:004038CE                 lea     eax, [esp+0CCh+var_8C]
.text:004038D2                 mov     [esp+0CCh+OpenFlag], eax
.text:004038D6                 mov     [esp+0CCh+FileName], ecx
.text:004038D9                 call    sub_40AAC0
.text:004038DE                 test    eax, eax
.text:004038E0                 js      short loc_403924
.text:004038E2                 mov     ebx, [esp+0CCh+var_A4]
.text:004038E6                 cmp     ebx, 0FFFFFFFFh
.text:004038E9                 jz      short loc_403916
.text:004038EB                 nop
.text:004038EC                 lea     esi, [esi+0]
.text:004038F0
.text:004038F0 loc_4038F0:                             ; CODE XREF: sub_403800+114↓j
.text:004038F0                 movsx   edx, byte ptr [ebx+esi]
.text:004038F4                 mov     [esp+0CCh+FileName], offset Str ; "0123456789abcdefghijklmnopqrstuvwxyzABC"...
.text:004038FB                 mov     [esp+0CCh+OpenFlag], edx ; Val
.text:004038FF                 call    strchr
.text:00403904                 movzx   eax, byte ptr [eax+1]
.text:00403908                 test    al, al
.text:0040390A                 jnz     short loc_40391F
.text:0040390C                 mov     byte ptr [ebx+esi], 30h ; '0'
.text:00403910                 dec     ebx
.text:00403911                 cmp     ebx, 0FFFFFFFFh
.text:00403914                 jnz     short loc_4038F0
.text:00403916
.text:00403916 loc_403916:                             ; CODE XREF: sub_403800+E9↑j
.text:00403916                                         ; sub_403800+13D↓j ...
.text:00403916                 mov     edi, [esp+0CCh+var_A4]
.text:0040391A                 jmp     loc_40388E
.text:0040391F ; ---------------------------------------------------------------------------
.text:0040391F
.text:0040391F loc_40391F:                             ; CODE XREF: sub_403800+10A↑j
.text:0040391F                 mov     [ebx+esi], al
.text:00403922                 jmp     short loc_4038CA
.text:00403924 ; ---------------------------------------------------------------------------
.text:00403924
.text:00403924 loc_403924:                             ; CODE XREF: sub_403800+E0↑j
.text:00403924                 mov     ecx, [esp+0CCh+Block]
.text:00403928                 mov     ebx, [esp+0CCh+arg_0]
.text:0040392F                 mov     [esp+0CCh+OpenFlag], ecx ; lpFileName
.text:00403933                 mov     [esp+0CCh+FileName], ebx ; LPCSTR
.text:00403936                 call    sub_40AD90
.text:0040393B                 test    eax, eax
.text:0040393D                 jnz     short loc_403916
.text:0040393F                 test    ebp, ebp
.text:00403941                 js      short loc_40394F
.text:00403943                 mov     [esp+0CCh+FileName], ebp ; FileHandle
.text:00403946                 call    j__commit
.text:0040394B                 test    eax, eax
.text:0040394D                 jnz     short loc_4039C3
.text:0040394F
.text:0040394F loc_40394F:                             ; CODE XREF: sub_403800+141↑j
.text:0040394F                                         ; sub_403800+209↓j ...
.text:0040394F                 mov     edx, [esp+0CCh+arg_8]
.text:00403956                 cmp     byte ptr [edx+11h], 0
.text:0040395A                 jz      short loc_4039A7
.text:0040395C                 cmp     [esp+0CCh+var_99], 0
.text:00403961                 mov     ebx, [esp+0CCh+arg_0]
.text:00403968                 jz      short loc_403971
.text:0040396A                 mov     ebx, dword ptr [esp+0CCh+arg_4]
.text:00403971
.text:00403971 loc_403971:                             ; CODE XREF: sub_403800+168↑j
.text:00403971                 mov     [esp+0CCh+FileName], offset aSRenamedToS ; "%s: renamed to %s"
.text:00403978                 call    ds:libintl_gettext
.text:0040397E                 mov     dword ptr [esp+0CCh+var_C0], ebx ; char
.text:00403982                 mov     ecx, [esp+0CCh+Block]
.text:00403986                 mov     [esp+0CCh+OpenFlag], 0 ; ErrorMessage
.text:0040398E                 mov     [esp+0CCh+FileName], 0 ; Code
.text:00403995                 mov     [esp+0CCh+var_BC], ecx
.text:00403999                 mov     [esp+0CCh+Size], eax ; char *
.text:0040399D                 call    sub_40A820
.text:004039A2                 mov     [esp+0CCh+var_99], 0
.text:004039A7
.text:004039A7 loc_4039A7:                             ; CODE XREF: sub_403800+15A↑j
.text:004039A7                 mov     [esp+0CCh+OpenFlag], esi ; Src
.text:004039AB                 lea     ebx, [edi+1]
.text:004039AE                 mov     edi, [esp+0CCh+var_A0]
.text:004039B2                 mov     [esp+0CCh+Size], ebx ; Size
.text:004039B6                 mov     [esp+0CCh+FileName], edi ; void *
.text:004039B9                 call    memcpy
.text:004039BE                 jmp     loc_403916
.text:004039C3 ; ---------------------------------------------------------------------------
.text:004039C3
.text:004039C3 loc_4039C3:                             ; CODE XREF: sub_403800+14D↑j
.text:004039C3                 call    _errno
.text:004039C8                 mov     ebx, [eax]
.text:004039CA                 cmp     ebx, 16h
.text:004039CD                 jz      short loc_403A0E
.text:004039CF                 cmp     ebx, 9
.text:004039D2                 jz      short loc_403A0E
.text:004039D4                 mov     [esp+0CCh+FileName], offset aSFdatasyncFail ; "%s: fdatasync failed"
.text:004039DB
.text:004039DB loc_4039DB:                             ; CODE XREF: sub_403800+236↓j
.text:004039DB                 call    ds:libintl_gettext
.text:004039E1                 mov     [esp+0CCh+OpenFlag], ebx ; ErrorMessage
.text:004039E5                 mov     ecx, [esp+0CCh+var_98]
.text:004039E9                 mov     [esp+0CCh+FileName], 0 ; Code
.text:004039F0                 mov     dword ptr [esp+0CCh+var_C0], ecx ; char
.text:004039F4                 mov     [esp+0CCh+Size], eax ; char *
.text:004039F8                 call    sub_40A820
.text:004039FD                 call    _errno
.text:00403A02                 mov     [eax], ebx
.text:00403A04                 mov     [esp+0CCh+var_9A], 0
.text:00403A09                 jmp     loc_40394F
.text:00403A0E ; ---------------------------------------------------------------------------
.text:00403A0E
.text:00403A0E loc_403A0E:                             ; CODE XREF: sub_403800+1CD↑j
.text:00403A0E                                         ; sub_403800+1D2↑j
.text:00403A0E                 mov     [esp+0CCh+FileName], ebp ; FileHandle
.text:00403A11                 call    _commit
.text:00403A16                 test    eax, eax
.text:00403A18                 jz      loc_40394F
.text:00403A1E                 call    _errno
.text:00403A23                 mov     ebx, [eax]
.text:00403A25                 cmp     ebx, 16h
.text:00403A28                 jz      short loc_403A38
.text:00403A2A                 cmp     ebx, 9
.text:00403A2D                 jz      short loc_403A38
.text:00403A2F                 mov     [esp+0CCh+FileName], offset aSFsyncFailed ; "%s: fsync failed"
.text:00403A36                 jmp     short loc_4039DB
.text:00403A38 ; ---------------------------------------------------------------------------
.text:00403A38
.text:00403A38 loc_403A38:                             ; CODE XREF: sub_403800+228↑j
.text:00403A38                                         ; sub_403800+22D↑j
.text:00403A38                 call    j__flushall
.text:00403A3D                 jmp     loc_40394F
.text:00403A42 ; ---------------------------------------------------------------------------
.text:00403A42
.text:00403A42 loc_403A42:                             ; CODE XREF: sub_403800+90↑j
.text:00403A42                 mov     esi, [esp+0CCh+arg_0]
.text:00403A49                 mov     [esp+0CCh+FileName], esi ; LPCSTR
.text:00403A4C                 call    sub_40AB70
.text:00403A51                 test    eax, eax
.text:00403A53                 jnz     loc_403BA7
.text:00403A59                 mov     edx, [esp+0CCh+arg_8]
.text:00403A60                 cmp     byte ptr [edx+11h], 0
.text:00403A64                 jnz     loc_403B72
.text:00403A6A
.text:00403A6A loc_403A6A:                             ; CODE XREF: sub_403800+3A2↓j
.text:00403A6A                                         ; sub_403800+3E1↓j
.text:00403A6A                 test    ebp, ebp
.text:00403A6C                 js      short loc_403A86
.text:00403A6E                 mov     [esp+0CCh+FileName], ebp ; FileHandle
.text:00403A71                 call    j__commit
.text:00403A76                 test    eax, eax
.text:00403A78                 jnz     short loc_403AF3
.text:00403A7A
.text:00403A7A loc_403A7A:                             ; CODE XREF: sub_403800+339↓j
.text:00403A7A                                         ; sub_403800+348↓j ...
.text:00403A7A                 mov     [esp+0CCh+FileName], ebp ; FileHandle
.text:00403A7D                 call    _close
.text:00403A82                 test    eax, eax
.text:00403A84                 jnz     short loc_403ABA
.text:00403A86
.text:00403A86 loc_403A86:                             ; CODE XREF: sub_403800+26C↑j
.text:00403A86                                         ; sub_403800+2F1↓j
.text:00403A86                 mov     esi, [esp+0CCh+Block]
.text:00403A8A                 mov     [esp+0CCh+FileName], esi ; Block
.text:00403A8D                 call    free
.text:00403A92                 mov     eax, [esp+0CCh+var_94]
.text:00403A96                 mov     [esp+0CCh+FileName], eax ; Block
.text:00403A99                 call    free
.text:00403A9E                 mov     edx, [esp+0CCh+var_98]
.text:00403AA2                 mov     [esp+0CCh+FileName], edx ; Block
.text:00403AA5                 call    free
.text:00403AAA                 movzx   eax, [esp+0CCh+var_9A]
.text:00403AAF                 add     esp, 0BCh
.text:00403AB5                 pop     ebx
.text:00403AB6                 pop     esi
.text:00403AB7                 pop     edi
.text:00403AB8                 pop     ebp
.text:00403AB9                 retn
.text:00403ABA ; ---------------------------------------------------------------------------
.text:00403ABA
.text:00403ABA loc_403ABA:                             ; CODE XREF: sub_403800+284↑j
.text:00403ABA                 mov     [esp+0CCh+FileName], offset aSFailedToClose ; "%s: failed to close"
.text:00403AC1                 call    ds:libintl_gettext
.text:00403AC7                 mov     edi, eax
.text:00403AC9                 call    _errno
.text:00403ACE                 mov     [esp+0CCh+Size], edi ; char *
.text:00403AD2                 mov     ebx, [esp+0CCh+var_98]
.text:00403AD6                 mov     dword ptr [esp+0CCh+var_C0], ebx ; char
.text:00403ADA                 mov     ebp, [eax]
.text:00403ADC                 mov     [esp+0CCh+FileName], 0 ; Code
.text:00403AE3                 mov     [esp+0CCh+OpenFlag], ebp ; ErrorMessage
.text:00403AE7                 call    sub_40A820
.text:00403AEC                 mov     [esp+0CCh+var_9A], 0
.text:00403AF1                 jmp     short loc_403A86
.text:00403AF3 ; ---------------------------------------------------------------------------
.text:00403AF3
.text:00403AF3 loc_403AF3:                             ; CODE XREF: sub_403800+278↑j
.text:00403AF3                 call    _errno
.text:00403AF8                 mov     ebx, [eax]
.text:00403AFA                 cmp     ebx, 16h
.text:00403AFD                 jz      short loc_403B3E
.text:00403AFF                 cmp     ebx, 9
.text:00403B02                 jz      short loc_403B3E
.text:00403B04                 mov     [esp+0CCh+FileName], offset aSFdatasyncFail ; "%s: fdatasync failed"
.text:00403B0B
.text:00403B0B loc_403B0B:                             ; CODE XREF: sub_403800+366↓j
.text:00403B0B                 call    ds:libintl_gettext
.text:00403B11                 mov     [esp+0CCh+OpenFlag], ebx ; ErrorMessage
.text:00403B15                 mov     ecx, [esp+0CCh+var_98]
.text:00403B19                 mov     [esp+0CCh+FileName], 0 ; Code
.text:00403B20                 mov     dword ptr [esp+0CCh+var_C0], ecx ; char
.text:00403B24                 mov     [esp+0CCh+Size], eax ; char *
.text:00403B28                 call    sub_40A820
.text:00403B2D                 call    _errno
.text:00403B32                 mov     [eax], ebx
.text:00403B34                 mov     [esp+0CCh+var_9A], 0
.text:00403B39                 jmp     loc_403A7A
.text:00403B3E ; ---------------------------------------------------------------------------
.text:00403B3E
.text:00403B3E loc_403B3E:                             ; CODE XREF: sub_403800+2FD↑j
.text:00403B3E                                         ; sub_403800+302↑j
.text:00403B3E                 mov     [esp+0CCh+FileName], ebp ; FileHandle
.text:00403B41                 call    _commit
.text:00403B46                 test    eax, eax
.text:00403B48                 jz      loc_403A7A
.text:00403B4E                 call    _errno
.text:00403B53                 mov     ebx, [eax]
.text:00403B55                 cmp     ebx, 16h
.text:00403B58                 jz      short loc_403B68
.text:00403B5A                 cmp     ebx, 9
.text:00403B5D                 jz      short loc_403B68
.text:00403B5F                 mov     [esp+0CCh+FileName], offset aSFsyncFailed ; "%s: fsync failed"
.text:00403B66                 jmp     short loc_403B0B
.text:00403B68 ; ---------------------------------------------------------------------------
.text:00403B68
.text:00403B68 loc_403B68:                             ; CODE XREF: sub_403800+358↑j
.text:00403B68                                         ; sub_403800+35D↑j
.text:00403B68                 call    j__flushall
.text:00403B6D                 jmp     loc_403A7A
.text:00403B72 ; ---------------------------------------------------------------------------
.text:00403B72
.text:00403B72 loc_403B72:                             ; CODE XREF: sub_403800+264↑j
.text:00403B72                 mov     [esp+0CCh+FileName], offset aSRemoved ; "%s: removed"
.text:00403B79                 call    ds:libintl_gettext
.text:00403B7F                 mov     [esp+0CCh+OpenFlag], 0 ; ErrorMessage
.text:00403B87                 mov     esi, dword ptr [esp+0CCh+arg_4]
.text:00403B8E                 mov     [esp+0CCh+FileName], 0 ; Code
.text:00403B95                 mov     dword ptr [esp+0CCh+var_C0], esi ; char
.text:00403B99                 mov     [esp+0CCh+Size], eax ; char *
.text:00403B9D                 call    sub_40A820
.text:00403BA2                 jmp     loc_403A6A
.text:00403BA7 ; ---------------------------------------------------------------------------
.text:00403BA7
.text:00403BA7 loc_403BA7:                             ; CODE XREF: sub_403800+253↑j
.text:00403BA7                 mov     [esp+0CCh+FileName], offset aSFailedToRemov ; "%s: failed to remove"
.text:00403BAE                 call    ds:libintl_gettext
.text:00403BB4                 mov     edi, eax
.text:00403BB6                 call    _errno
.text:00403BBB                 mov     [esp+0CCh+Size], edi ; char *
.text:00403BBF                 mov     ebx, dword ptr [esp+0CCh+arg_4]
.text:00403BC6                 mov     dword ptr [esp+0CCh+var_C0], ebx ; char
.text:00403BCA                 mov     ecx, [eax]
.text:00403BCC                 mov     [esp+0CCh+FileName], 0 ; Code
.text:00403BD3                 mov     [esp+0CCh+OpenFlag], ecx ; ErrorMessage
.text:00403BD7                 call    sub_40A820
.text:00403BDC                 mov     [esp+0CCh+var_9A], 0
.text:00403BE1                 jmp     loc_403A6A
.text:00403BE6 ; ---------------------------------------------------------------------------
.text:00403BE6
.text:00403BE6 loc_403BE6:                             ; CODE XREF: sub_403800+88↑j
.text:00403BE6                 mov     [esp+0CCh+FileName], offset aSRemoving ; "%s: removing"
.text:00403BED                 call    ds:libintl_gettext
.text:00403BF3                 mov     [esp+0CCh+OpenFlag], 0 ; ErrorMessage
.text:00403BFB                 mov     ecx, dword ptr [esp+0CCh+arg_4]
.text:00403C02                 mov     [esp+0CCh+FileName], 0 ; Code
.text:00403C09                 mov     dword ptr [esp+0CCh+var_C0], ecx ; char
.text:00403C0D                 mov     [esp+0CCh+Size], eax ; char *
.text:00403C11                 call    sub_40A820
.text:00403C16                 jmp     loc_40388E
.text:00403C1B ; ---------------------------------------------------------------------------
.text:00403C1B
.text:00403C1B loc_403C1B:                             ; CODE XREF: sub_403800+77↑j
.text:00403C1B                 mov     [esp+0CCh+OpenFlag], 8000h ; OpenFlag
.text:00403C23                 mov     ecx, [esp+0CCh+var_94]
.text:00403C27                 mov     [esp+0CCh+FileName], ecx ; FileName
.text:00403C2A                 call    _open
.text:00403C2F                 mov     ebp, eax
.text:00403C31                 jmp     loc_40387D
.text:00403C31 sub_403800      endp
.text:00403C31
.text:00403C31 ; ---------------------------------------------------------------------------
.text:00403C36                 align 10h
.text:00403C40
.text:00403C40 ; =============== S U B R O U T I N E =======================================
.text:00403C40
.text:00403C40 ; Attributes: noreturn
.text:00403C40
.text:00403C40 ; void __cdecl Function(int)
.text:00403C40 Function        proc near               ; DATA XREF: sub_403090+7↑o
.text:00403C40                                         ; sub_403090+1F↑o
.text:00403C40
.text:00403C40 Buf             = dword ptr -0Ch
.text:00403C40 Value           = dword ptr -8
.text:00403C40
.text:00403C40                 sub     esp, 0Ch
.text:00403C43                 mov     [esp+0Ch+Value], 1 ; Value
.text:00403C4B                 mov     [esp+0Ch+Buf], offset Buf ; Buf
.text:00403C52                 call    longjmp
.text:00403C52 Function        endp
.text:00403C52
.text:00403C52 ; ---------------------------------------------------------------------------
.text:00403C57 ; const char Format[]
.text:00403C57 Format          db '%02x%02x%02x',0     ; DATA XREF: sub_403D80+1AF↓o
.text:00403C64                 align 20h
.text:00403C80 aSPassLuLuSSSD  db '%s: pass %lu/%lu (%s)...%s/%s %d%%',0
.text:00403C80                                         ; DATA XREF: sub_403D80:loc_404277↓o
.text:00403CA3 aSPassLuLuSS    db '%s: pass %lu/%lu (%s)...%s',0
.text:00403CA3                                         ; DATA XREF: sub_403D80:loc_4043E6↓o
.text:00403CBE aSFileTooLarge  db '%s: file too large',0
.text:00403CBE                                         ; DATA XREF: sub_403D80:loc_40444F↓o
.text:00403CD1                 db 0EBh, 0Dh, 90h
.text:00403CD4                 align 10h
.text:00403CE0 aSErrorWritingA db '%s: error writing at offset %s',0
.text:00403CE0                                         ; DATA XREF: sub_403D80+75D↓o
.text:00403CFF aSLseekFailed   db '%s: lseek failed',0 ; DATA XREF: sub_403D80:loc_404594↓o
.text:00403D10 aSPassLuLuS     db '%s: pass %lu/%lu (%s)...',0
.text:00403D10                                         ; DATA XREF: sub_403D80:loc_4049D2↓o
.text:00403D29 aSCannotRewind  db '%s: cannot rewind',0
.text:00403D29                                         ; DATA XREF: sub_403D80:loc_404A79↓o
.text:00403D3B                 align 10h
.text:00403D40 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/shred.c',0
.text:00403D40                                         ; DATA XREF: sub_403D80+D0D↓o
.text:00403D66 aSizeSizeMax    db 'size <= size_max',0 ; DATA XREF: sub_403D80+D15↓o
.text:00403D77                 align 10h
.text:00403D80
.text:00403D80 ; =============== S U B R O U T I N E =======================================
.text:00403D80
.text:00403D80 ; Attributes: bp-based frame
.text:00403D80
.text:00403D80 sub_403D80      proc near               ; CODE XREF: sub_403230+1CB↑p
.text:00403D80                                         ; sub_403230+31D↑p
.text:00403D80
.text:00403D80 FileHandle      = dword ptr -268h
.text:00403D80 Offset          = qword ptr -264h
.text:00403D80 Origin          = dword ptr -25Ch
.text:00403D80 var_258         = dword ptr -258h
.text:00403D80 var_254         = dword ptr -254h
.text:00403D80 var_250         = dword ptr -250h
.text:00403D80 var_24C         = dword ptr -24Ch
.text:00403D80 var_248         = dword ptr -248h
.text:00403D80 var_241         = byte ptr -241h
.text:00403D80 var_22C         = dword ptr -22Ch
.text:00403D80 var_21C         = dword ptr -21Ch
.text:00403D80 var_20C         = dword ptr -20Ch
.text:00403D80 var_208         = dword ptr -208h
.text:00403D80 ErrorMessage    = dword ptr -204h
.text:00403D80 var_200         = dword ptr -200h
.text:00403D80 var_1FC         = dword ptr -1FCh
.text:00403D80 var_1F8         = dword ptr -1F8h
.text:00403D80 Src             = dword ptr -1F4h
.text:00403D80 Str1            = dword ptr -1F0h
.text:00403D80 var_1EA         = byte ptr -1EAh
.text:00403D80 var_1E9         = byte ptr -1E9h
.text:00403D80 var_1E8         = dword ptr -1E8h
.text:00403D80 var_1E4         = dword ptr -1E4h
.text:00403D80 var_1E0         = dword ptr -1E0h
.text:00403D80 var_1DC         = dword ptr -1DCh
.text:00403D80 var_1D8         = dword ptr -1D8h
.text:00403D80 var_1D4         = dword ptr -1D4h
.text:00403D80 var_1D0         = dword ptr -1D0h
.text:00403D80 var_1CC         = dword ptr -1CCh
.text:00403D80 var_1C8         = byte ptr -1C8h
.text:00403D80 var_148         = byte ptr -148h
.text:00403D80 var_C8          = byte ptr -0C8h
.text:00403D80 Destination     = byte ptr -0A8h
.text:00403D80 Buffer          = byte ptr -28h
.text:00403D80 var_24          = word ptr -24h
.text:00403D80 var_22          = byte ptr -22h
.text:00403D80 Size            = dword ptr  8
.text:00403D80 arg_4           = byte ptr  0Ch
.text:00403D80 arg_8           = dword ptr  10h
.text:00403D80 arg_C           = dword ptr  14h
.text:00403D80 arg_10          = dword ptr  18h
.text:00403D80 arg_14          = dword ptr  1Ch
.text:00403D80 arg_18          = dword ptr  20h
.text:00403D80
.text:00403D80                 push    ebp
.text:00403D81                 mov     ebp, esp
.text:00403D83                 push    edi
.text:00403D84                 push    esi
.text:00403D85                 mov     esi, 4
.text:00403D8A                 push    ebx
.text:00403D8B                 sub     esp, 25Ch
.text:00403D91                 mov     eax, [ebp+arg_8]
.text:00403D94                 mov     ecx, [eax+4]
.text:00403D97                 mov     ebx, [eax]
.text:00403D99                 xor     eax, eax
.text:00403D9B                 mov     [ebp+var_1CC], ecx
.text:00403DA1                 mov     [ebp+var_1D0], ebx
.text:00403DA7                 mov     [ebp+var_1E0], eax
.text:00403DAD                 call    sub_40AE10
.text:00403DB2                 mov     ebx, eax
.text:00403DB4                 mov     edi, eax
.text:00403DB6                 mov     ecx, 4
.text:00403DBB                 nop
.text:00403DBC                 lea     esi, [esi+0]
.text:00403DC0
.text:00403DC0 loc_403DC0:                             ; CODE XREF: sub_403D80+4C↓j
.text:00403DC0                 mov     eax, edi
.text:00403DC2                 xor     edx, edx
.text:00403DC4                 mov     edi, ecx
.text:00403DC6                 div     ecx
.text:00403DC8                 test    edx, edx
.text:00403DCA                 mov     ecx, edx
.text:00403DCC                 jnz     short loc_403DC0
.text:00403DCE                 mov     [ebp+var_1E9], 0
.text:00403DD5                 mov     eax, esi
.text:00403DD7                 xor     edx, edx
.text:00403DD9                 div     edi
.text:00403DDB                 mov     esi, [ebp+Size]
.text:00403DDE                 mov     [ebp+var_1EA], 1
.text:00403DE5                 mov     [esp+268h+Origin], 0 ; Origin
.text:00403DED                 mov     dword ptr [esp+268h+Offset], 0 ; Offset
.text:00403DF5                 mov     dword ptr [esp+268h+Offset+4], 0
.text:00403DFD                 mov     [esp+268h+FileHandle], esi ; Size
.text:00403E00                 imul    ebx, eax
.text:00403E03                 call    _lseeki64
.text:00403E08                 and     eax, edx
.text:00403E0A                 inc     eax
.text:00403E0B                 jz      loc_404A79
.text:00403E11                 lea     eax, [ebx+300Eh]
.text:00403E17                 xor     edx, edx
.text:00403E19                 mov     ecx, [ebp+arg_C]
.text:00403E1C                 and     eax, 0FFFFFFF0h
.text:00403E1F                 call    __alloca
.text:00403E24                 lea     edi, [esp+ebx+268h+var_241]
.text:00403E28                 mov     eax, edi
.text:00403E2A                 div     ebx
.text:00403E2C                 sub     edi, edx
.text:00403E2E                 test    ecx, ecx
.text:00403E30                 mov     [ebp+Src], edi
.text:00403E36                 js      loc_404A63
.text:00403E3C                 xor     ebx, ebx
.text:00403E3E                 mov     eax, 3000h
.text:00403E43                 cmp     ebx, [ebp+var_1CC]
.text:00403E49                 mov     [ebp+var_1E4], eax
.text:00403E4F                 mov     eax, 3000h
.text:00403E54                 jl      short loc_403E7D
.text:00403E56                 jg      short loc_403E60
.text:00403E58                 cmp     eax, [ebp+var_1D0]
.text:00403E5E                 jbe     short loc_403E7D
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403D80+D6↑j
.text:00403E60                 mov     esi, [ebp+var_1D0]
.text:00403E66                 mov     ecx, [ebp+var_1CC]
.text:00403E6C                 and     esi, ecx
.text:00403E6E                 inc     esi
.text:00403E6F                 jz      short loc_403E7D
.text:00403E71                 mov     edi, [ebp+var_1D0]
.text:00403E77                 mov     [ebp+var_1E4], edi
.text:00403E7D
.text:00403E7D loc_403E7D:                             ; CODE XREF: sub_403D80+D4↑j
.text:00403E7D                                         ; sub_403D80+DE↑j ...
.text:00403E7D                 mov     ecx, [ebp+arg_C]
.text:00403E80                 mov     ebx, [ebp+Src]
.text:00403E86                 and     ecx, 0FFFh
.text:00403E8C                 mov     esi, ecx
.text:00403E8E                 shl     esi, 0Ch
.text:00403E91                 or      ecx, esi
.text:00403E93                 mov     [ebx+2], cl
.text:00403E96                 mov     eax, ecx
.text:00403E98                 shr     eax, 4
.text:00403E9B                 mov     [ebx], al
.text:00403E9D                 mov     eax, ecx
.text:00403E9F                 shr     eax, 8
.text:00403EA2                 mov     [ebx+1], al
.text:00403EA5                 mov     eax, [ebp+var_1E4]
.text:00403EAB                 mov     ebx, 3
.text:00403EB0                 shr     eax, 1
.text:00403EB2                 cmp     ebx, eax
.text:00403EB4                 jnb     short loc_403EDC
.text:00403EB6                 mov     esi, eax
.text:00403EB8
.text:00403EB8 loc_403EB8:                             ; CODE XREF: sub_403D80+15A↓j
.text:00403EB8                 mov     dword ptr [esp+268h+Offset+4], ebx ; Size
.text:00403EBC                 mov     edx, [ebp+Src]
.text:00403EC2                 mov     ecx, [ebp+Src]
.text:00403EC8                 add     edx, ebx
.text:00403ECA                 add     ebx, ebx
.text:00403ECC                 mov     dword ptr [esp+268h+Offset], ecx ; Src
.text:00403ED0                 mov     [esp+268h+FileHandle], edx ; void *
.text:00403ED3                 call    memcpy
.text:00403ED8                 cmp     ebx, esi
.text:00403EDA                 jb      short loc_403EB8
.text:00403EDC
.text:00403EDC loc_403EDC:                             ; CODE XREF: sub_403D80+134↑j
.text:00403EDC                 cmp     ebx, [ebp+var_1E4]
.text:00403EE2                 jb      loc_404A38
.text:00403EE8
.text:00403EE8 loc_403EE8:                             ; CODE XREF: sub_403D80+CDE↓j
.text:00403EE8                 test    [ebp+arg_C], 1000h
.text:00403EEF                 jz      short loc_403F13
.text:00403EF1                 xor     ebx, ebx
.text:00403EF3                 cmp     ebx, [ebp+var_1E4]
.text:00403EF9                 jnb     short loc_403F13
.text:00403EFB
.text:00403EFB loc_403EFB:                             ; CODE XREF: sub_403D80+191↓j
.text:00403EFB                 mov     eax, [ebp+Src]
.text:00403F01                 xor     byte ptr [ebx+eax], 80h
.text:00403F05                 add     ebx, 200h
.text:00403F0B                 cmp     ebx, [ebp+var_1E4]
.text:00403F11                 jb      short loc_403EFB
.text:00403F13
.text:00403F13 loc_403F13:                             ; CODE XREF: sub_403D80+16F↑j
.text:00403F13                                         ; sub_403D80+179↑j
.text:00403F13                 mov     ebx, [ebp+Src]
.text:00403F19                 lea     edi, [ebp+Buffer]
.text:00403F1C                 movzx   esi, byte ptr [ebx+2]
.text:00403F20                 mov     [esp+268h+var_258], esi
.text:00403F24                 movzx   ecx, byte ptr [ebx+1]
.text:00403F28                 mov     [esp+268h+Origin], ecx
.text:00403F2C                 movzx   edx, byte ptr [ebx]
.text:00403F2F                 mov     dword ptr [esp+268h+Offset], offset Format ; "%02x%02x%02x"
.text:00403F37                 mov     [esp+268h+FileHandle], edi ; Buffer
.text:00403F3A                 mov     dword ptr [esp+268h+Offset+4], edx
.text:00403F3E                 call    sprintf
.text:00403F43
.text:00403F43 loc_403F43:                             ; CODE XREF: sub_403D80+CF4↓j
.text:00403F43                 mov     edi, [ebp+arg_18]
.text:00403F46                 test    edi, edi
.text:00403F48                 jnz     loc_4049D2
.text:00403F4E
.text:00403F4E loc_403F4E:                             ; CODE XREF: sub_403D80+CB3↓j
.text:00403F4E                 xor     eax, eax
.text:00403F50                 xor     edi, edi
.text:00403F52                 mov     [ebp+var_1D8], eax
.text:00403F58                 mov     [ebp+var_1D4], edi
.text:00403F5E
.text:00403F5E loc_403F5E:                             ; CODE XREF: sub_403D80+329↓j
.text:00403F5E                                         ; sub_403D80+372↓j ...
.text:00403F5E                 mov     eax, [ebp+var_1D0]
.text:00403F64                 xor     edx, edx
.text:00403F66                 mov     ebx, 3000h
.text:00403F6B                 sub     eax, [ebp+var_1D8]
.text:00403F71                 mov     ecx, 3000h
.text:00403F76                 mov     [ebp+var_1E4], ebx
.text:00403F7C                 mov     esi, [ebp+var_1CC]
.text:00403F82                 sbb     esi, [ebp+var_1D4]
.text:00403F88                 cmp     edx, esi
.text:00403F8A                 jl      short loc_403FE1
.text:00403F8C                 jg      short loc_403F92
.text:00403F8E                 cmp     ecx, eax
.text:00403F90                 jbe     short loc_403FE1
.text:00403F92
.text:00403F92 loc_403F92:                             ; CODE XREF: sub_403D80+20C↑j
.text:00403F92                 mov     ecx, [ebp+var_1D0]
.text:00403F98                 mov     edi, [ebp+var_1CC]
.text:00403F9E                 and     ecx, edi
.text:00403FA0                 inc     ecx
.text:00403FA1                 jz      short loc_403FE1
.text:00403FA3                 mov     eax, [ebp+var_1D4]
.text:00403FA9                 cmp     [ebp+var_1CC], eax
.text:00403FAF                 jg      short loc_403FC9
.text:00403FB1                 jl      loc_404920
.text:00403FB7                 mov     esi, [ebp+var_1D8]
.text:00403FBD                 cmp     [ebp+var_1D0], esi
.text:00403FC3                 jb      loc_404920
.text:00403FC9
.text:00403FC9 loc_403FC9:                             ; CODE XREF: sub_403D80+22F↑j
.text:00403FC9                 mov     edx, [ebp+var_1D0]
.text:00403FCF                 sub     edx, [ebp+var_1D8]
.text:00403FD5                 mov     [ebp+var_1E4], edx
.text:00403FDB                 jz      loc_404920
.text:00403FE1
.text:00403FE1 loc_403FE1:                             ; CODE XREF: sub_403D80+20A↑j
.text:00403FE1                                         ; sub_403D80+210↑j ...
.text:00403FE1                 mov     ebx, [ebp+arg_C]
.text:00403FE4                 test    ebx, ebx
.text:00403FE6                 js      loc_404638
.text:00403FEC
.text:00403FEC loc_403FEC:                             ; CODE XREF: sub_403D80+8FD↓j
.text:00403FEC                 xor     edx, edx
.text:00403FEE                 mov     ebx, [ebp+var_1E4]
.text:00403FF4                 mov     [ebp+var_1E8], edx
.text:00403FFA                 cmp     [ebp+var_1E8], ebx
.text:00404000                 jnb     short loc_404062
.text:00404002                 mov     eax, [ebp+var_1CC]
.text:00404008                 not     eax
.text:0040400A                 mov     [ebp+var_200], eax
.text:00404010
.text:00404010 loc_404010:                             ; CODE XREF: sub_403D80+2E0↓j
.text:00404010                 mov     ebx, [ebp+var_1E4]
.text:00404016                 mov     edx, [ebp+var_1E8]
.text:0040401C                 mov     edi, [ebp+Src]
.text:00404022                 mov     esi, [ebp+var_1E8]
.text:00404028                 mov     ecx, [ebp+Size]
.text:0040402B                 sub     ebx, edx
.text:0040402D                 mov     dword ptr [esp+268h+Offset+4], ebx ; MaxCharCount
.text:00404031                 add     edi, esi
.text:00404033                 mov     dword ptr [esp+268h+Offset], edi ; Buf
.text:00404037                 mov     [esp+268h+FileHandle], ecx ; FileHandle
.text:0040403A                 call    _write
.text:0040403F                 test    eax, eax
.text:00404041                 jle     loc_404480
.text:00404047
.text:00404047 loc_404047:                             ; CODE XREF: sub_403D80+80F↓j
.text:00404047                                         ; sub_403D80+85B↓j
.text:00404047                 add     [ebp+var_1E8], eax
.text:0040404D                 mov     esi, [ebp+var_1E4]
.text:00404053                 mov     [ebp+var_1EA], 0
.text:0040405A                 cmp     [ebp+var_1E8], esi
.text:00404060                 jb      short loc_404010
.text:00404062
.text:00404062 loc_404062:                             ; CODE XREF: sub_403D80+280↑j
.text:00404062                                         ; sub_403D80+8A0↓j
.text:00404062                 mov     eax, [ebp+var_1E8]
.text:00404068                 xor     ecx, ecx
.text:0040406A                 add     eax, [ebp+var_1D8]
.text:00404070                 adc     ecx, [ebp+var_1D4]
.text:00404076                 cmp     ecx, [ebp+var_1D4]
.text:0040407C                 jg      short loc_404090
.text:0040407E                 jl      loc_40444F
.text:00404084                 cmp     eax, [ebp+var_1D8]
.text:0040408A                 jb      loc_40444F
.text:00404090
.text:00404090 loc_404090:                             ; CODE XREF: sub_403D80+2FC↑j
.text:00404090                 mov     esi, [ebp+var_1E8]
.text:00404096                 xor     ebx, ebx
.text:00404098                 mov     edi, [ebp+arg_18]
.text:0040409B                 add     [ebp+var_1D8], esi
.text:004040A1                 adc     [ebp+var_1D4], ebx
.text:004040A7                 test    edi, edi
.text:004040A9                 jz      loc_403F5E
.text:004040AF                 mov     eax, [ebp+var_1D4]
.text:004040B5                 mov     ebx, [ebp+var_1CC]
.text:004040BB                 mov     ecx, [ebp+var_1D8]
.text:004040C1                 mov     edx, [ebp+var_1D0]
.text:004040C7                 xor     eax, ebx
.text:004040C9                 xor     ecx, edx
.text:004040CB                 or      eax, ecx
.text:004040CD                 jnz     short loc_4040DA
.text:004040CF                 mov     edi, [ebp+Str1]
.text:004040D5                 cmp     byte ptr [edi], 0
.text:004040D8                 jnz     short loc_4040F8
.text:004040DA
.text:004040DA loc_4040DA:                             ; CODE XREF: sub_403D80+34D↑j
.text:004040DA                 mov     [esp+268h+FileHandle], 0 ; Time
.text:004040E1                 call    time
.text:004040E6                 cmp     [ebp+var_1DC], eax
.text:004040EC                 mov     [ebp+var_1E0], eax
.text:004040F2                 jg      loc_403F5E
.text:004040F8
.text:004040F8 loc_4040F8:                             ; CODE XREF: sub_403D80+358↑j
.text:004040F8                 mov     [esp+268h+var_250], 1 ; int
.text:00404100                 mov     esi, [ebp+var_1D4]
.text:00404106                 lea     ebx, [ebp+var_148]
.text:0040410C                 mov     dword ptr [esp+268h+Offset+4], ebx ; Buffer
.text:00404110                 mov     edi, [ebp+var_1D8]
.text:00404116                 mov     [esp+268h+var_24C], 0 ; int
.text:0040411E                 mov     dword ptr [esp+268h+Offset], esi ; int
.text:00404122                 mov     [esp+268h+var_258], 1 ; int
.text:0040412A                 mov     [esp+268h+var_254], 0 ; int
.text:00404132                 mov     [esp+268h+Origin], 1B2h ; int
.text:0040413A                 mov     [esp+268h+FileHandle], edi ; int
.text:0040413D                 call    sub_409170
.text:00404142                 mov     esi, eax
.text:00404144                 mov     ecx, [ebp+var_1CC]
.text:0040414A                 mov     eax, [ebp+var_1D4]
.text:00404150                 mov     ebx, [ebp+var_1D8]
.text:00404156                 mov     edx, [ebp+var_1D0]
.text:0040415C                 xor     eax, ecx
.text:0040415E                 xor     ebx, edx
.text:00404160                 or      eax, ebx
.text:00404162                 jnz     loc_404430
.text:00404168
.text:00404168 loc_404168:                             ; CODE XREF: sub_403D80+6CA↓j
.text:00404168                 mov     ecx, [ebp+var_1D0]
.text:0040416E                 mov     edi, [ebp+var_1CC]
.text:00404174                 and     ecx, edi
.text:00404176                 inc     ecx
.text:00404177                 jz      loc_4043E6
.text:0040417D                 mov     edx, [ebp+var_1CC]
.text:00404183                 mov     edi, 64h ; 'd'
.text:00404188                 or      edx, [ebp+var_1D0]
.text:0040418E                 jz      short loc_404209
.text:00404190                 cmp     [ebp+var_1D4], 28F5C28h
.text:0040419A                 ja      loc_4043A5
.text:004041A0                 jb      short loc_4041B2
.text:004041A2                 cmp     [ebp+var_1D8], 0F5C28F5Ch
.text:004041AC                 ja      loc_4043A5
.text:004041B2
.text:004041B2 loc_4041B2:                             ; CODE XREF: sub_403D80+420↑j
.text:004041B2                 mov     edx, [ebp+var_1D8]
.text:004041B8                 mov     ecx, [ebp+var_1D4]
.text:004041BE                 shld    ecx, edx, 2
.text:004041C2                 shl     edx, 2
.text:004041C5                 add     edx, [ebp+var_1D8]
.text:004041CB                 adc     ecx, [ebp+var_1D4]
.text:004041D1                 mov     ebx, edx
.text:004041D3                 shl     ebx, 2
.text:004041D6                 mov     edi, ecx
.text:004041D8                 shld    edi, edx, 2
.text:004041DC                 add     ebx, edx
.text:004041DE                 mov     edx, [ebp+var_1D0]
.text:004041E4                 adc     edi, ecx
.text:004041E6                 mov     ecx, [ebp+var_1CC]
.text:004041EC                 shld    edi, ebx, 2
.text:004041F0                 shl     ebx, 2
.text:004041F3                 mov     dword ptr [esp+268h+Offset+4], edx
.text:004041F7                 mov     [esp+268h+Origin], ecx
.text:004041FB
.text:004041FB loc_4041FB:                             ; CODE XREF: sub_403D80+661↓j
.text:004041FB                 mov     [esp+268h+FileHandle], ebx
.text:004041FE                 mov     dword ptr [esp+268h+Offset], edi
.text:00404202                 call    sub_412670
.text:00404207                 mov     edi, eax
.text:00404209
.text:00404209 loc_404209:                             ; CODE XREF: sub_403D80+40E↑j
.text:00404209                 mov     [esp+268h+var_250], 1 ; int
.text:00404211                 mov     ebx, [ebp+var_1CC]
.text:00404217                 lea     edx, [ebp+var_1C8]
.text:0040421D                 mov     dword ptr [esp+268h+Offset+4], edx ; Buffer
.text:00404221                 mov     eax, [ebp+var_1D0]
.text:00404227                 mov     [esp+268h+var_24C], 0 ; int
.text:0040422F                 mov     dword ptr [esp+268h+Offset], ebx ; int
.text:00404233                 mov     [esp+268h+var_258], 1 ; int
.text:0040423B                 mov     [esp+268h+var_254], 0 ; int
.text:00404243                 mov     [esp+268h+Origin], 1B0h ; int
.text:0040424B                 mov     [esp+268h+FileHandle], eax ; int
.text:0040424E                 call    sub_409170
.text:00404253                 mov     ecx, [ebp+var_1CC]
.text:00404259                 mov     ebx, eax
.text:0040425B                 mov     edx, [ebp+var_1D4]
.text:00404261                 mov     eax, [ebp+var_1D8]
.text:00404267                 xor     edx, ecx
.text:00404269                 mov     ecx, [ebp+var_1D0]
.text:0040426F                 xor     eax, ecx
.text:00404271                 or      edx, eax
.text:00404273                 jnz     short loc_404277
.text:00404275                 mov     esi, ebx
.text:00404277
.text:00404277 loc_404277:                             ; CODE XREF: sub_403D80+4F3↑j
.text:00404277                 mov     [esp+268h+FileHandle], offset aSPassLuLuSSSD ; "%s: pass %lu/%lu (%s)...%s/%s %d%%"
.text:0040427E                 call    ds:libintl_gettext
.text:00404284                 mov     [esp+24h], edi
.text:00404288                 mov     ecx, [ebp+arg_14]
.text:0040428B                 lea     edi, [ebp+Buffer]
.text:0040428E                 mov     [esp+268h+var_248], ebx
.text:00404292                 mov     ebx, [ebp+arg_18]
.text:00404295                 mov     [esp+268h+var_250], edi
.text:00404299                 mov     edi, dword ptr [ebp+arg_4]
.text:0040429C                 mov     [esp+268h+var_24C], esi
.text:004042A0                 mov     [esp+268h+var_254], ebx
.text:004042A4                 mov     [esp+268h+var_258], ecx
.text:004042A8                 mov     [esp+268h+Origin], edi ; char
.text:004042AC                 mov     dword ptr [esp+268h+Offset+4], eax ; char *
.text:004042B0                 mov     dword ptr [esp+268h+Offset], 0 ; ErrorMessage
.text:004042B8                 mov     [esp+268h+FileHandle], 0 ; Code
.text:004042BF                 call    sub_40A820
.text:004042C4
.text:004042C4 loc_4042C4:                             ; CODE XREF: sub_403D80+6AB↓j
.text:004042C4                 mov     dword ptr [esp+268h+Offset], esi ; Source
.text:004042C8                 lea     edi, [ebp+Destination]
.text:004042CE                 mov     [esp+268h+FileHandle], edi ; Destination
.text:004042D1                 call    strcpy
.text:004042D6                 mov     [ebp+Str1], edi
.text:004042DC                 mov     eax, [ebp+var_1E0]
.text:004042E2                 mov     esi, [ebp+Size]
.text:004042E5                 add     eax, 5
.text:004042E8                 mov     [ebp+var_1DC], eax
.text:004042EE                 mov     [esp+268h+FileHandle], esi ; FileHandle
.text:004042F1                 call    j__commit
.text:004042F6                 test    eax, eax
.text:004042F8                 jz      loc_403F5E
.text:004042FE                 call    _errno
.text:00404303                 mov     ebx, [eax]
.text:00404305                 cmp     ebx, 16h
.text:00404308                 jz      short loc_404361
.text:0040430A                 cmp     ebx, 9
.text:0040430D                 jz      short loc_404361
.text:0040430F                 mov     [esp+268h+FileHandle], offset aSFdatasyncFail ; "%s: fdatasync failed"
.text:00404316                 call    ds:libintl_gettext
.text:0040431C                 mov     ecx, dword ptr [ebp+arg_4]
.text:0040431F                 mov     [esp+268h+Origin], ecx ; char
.text:00404323
.text:00404323 loc_404323:                             ; CODE XREF: sub_403D80+619↓j
.text:00404323                 mov     dword ptr [esp+268h+Offset+4], eax ; char *
.text:00404327                 mov     dword ptr [esp+268h+Offset], ebx ; ErrorMessage
.text:0040432B                 mov     [esp+268h+FileHandle], 0 ; Code
.text:00404332                 call    sub_40A820
.text:00404337                 call    _errno
.text:0040433C                 mov     [eax], ebx
.text:0040433E                 call    _errno
.text:00404343                 cmp     dword ptr [eax], 5
.text:00404346                 jnz     short loc_404354
.text:00404348                 mov     [ebp+var_1E9], 1
.text:0040434F                 jmp     loc_403F5E
.text:00404354 ; ---------------------------------------------------------------------------
.text:00404354
.text:00404354 loc_404354:                             ; CODE XREF: sub_403D80+5C6↑j
.text:00404354                                         ; sub_403D80+6FB↓j ...
.text:00404354                 mov     eax, 0FFFFFFFFh
.text:00404359
.text:00404359 loc_404359:                             ; CODE XREF: sub_403D80+BB6↓j
.text:00404359                 lea     esp, [ebp-0Ch]
.text:0040435C                 pop     ebx
.text:0040435D                 pop     esi
.text:0040435E                 pop     edi
.text:0040435F                 pop     ebp
.text:00404360                 retn
.text:00404361 ; ---------------------------------------------------------------------------
.text:00404361
.text:00404361 loc_404361:                             ; CODE XREF: sub_403D80+588↑j
.text:00404361                                         ; sub_403D80+58D↑j
.text:00404361                 mov     edx, [ebp+Size]
.text:00404364                 mov     [esp+268h+FileHandle], edx ; FileHandle
.text:00404367                 call    _commit
.text:0040436C                 test    eax, eax
.text:0040436E                 jz      loc_403F5E
.text:00404374                 call    _errno
.text:00404379                 mov     ebx, [eax]
.text:0040437B                 cmp     ebx, 16h
.text:0040437E                 jz      short loc_40439B
.text:00404380                 cmp     ebx, 9
.text:00404383                 jz      short loc_40439B
.text:00404385                 mov     [esp+268h+FileHandle], offset aSFsyncFailed ; "%s: fsync failed"
.text:0040438C                 call    ds:libintl_gettext
.text:00404392                 mov     esi, dword ptr [ebp+arg_4]
.text:00404395                 mov     [esp+268h+Origin], esi
.text:00404399                 jmp     short loc_404323
.text:0040439B ; ---------------------------------------------------------------------------
.text:0040439B
.text:0040439B loc_40439B:                             ; CODE XREF: sub_403D80+5FE↑j
.text:0040439B                                         ; sub_403D80+603↑j
.text:0040439B                 call    j__flushall
.text:004043A0                 jmp     loc_403F5E
.text:004043A5 ; ---------------------------------------------------------------------------
.text:004043A5
.text:004043A5 loc_4043A5:                             ; CODE XREF: sub_403D80+41A↑j
.text:004043A5                                         ; sub_403D80+42C↑j
.text:004043A5                 mov     dword ptr [esp+268h+Offset+4], 64h ; 'd'
.text:004043AD                 mov     ecx, [ebp+var_1D0]
.text:004043B3                 mov     eax, [ebp+var_1CC]
.text:004043B9                 mov     [esp+268h+Origin], 0
.text:004043C1                 mov     [esp+268h+FileHandle], ecx
.text:004043C4                 mov     dword ptr [esp+268h+Offset], eax
.text:004043C8                 call    sub_412790
.text:004043CD                 mov     dword ptr [esp+268h+Offset+4], eax
.text:004043D1                 mov     ebx, [ebp+var_1D8]
.text:004043D7                 mov     edi, [ebp+var_1D4]
.text:004043DD                 mov     [esp+268h+Origin], edx
.text:004043E1                 jmp     loc_4041FB
.text:004043E6 ; ---------------------------------------------------------------------------
.text:004043E6
.text:004043E6 loc_4043E6:                             ; CODE XREF: sub_403D80+3F7↑j
.text:004043E6                 mov     [esp+268h+FileHandle], offset aSPassLuLuSS ; "%s: pass %lu/%lu (%s)...%s"
.text:004043ED                 lea     edi, [ebp+Buffer]
.text:004043F0                 call    ds:libintl_gettext
.text:004043F6                 mov     [esp+268h+var_24C], esi
.text:004043FA                 mov     ecx, [ebp+arg_18]
.text:004043FD                 mov     ebx, [ebp+arg_14]
.text:00404400                 mov     [esp+268h+var_250], edi
.text:00404404                 mov     edx, dword ptr [ebp+arg_4]
.text:00404407                 mov     [esp+268h+var_254], ecx
.text:0040440B                 mov     [esp+268h+var_258], ebx
.text:0040440F                 mov     [esp+268h+Origin], edx ; char
.text:00404413                 mov     dword ptr [esp+268h+Offset+4], eax ; char *
.text:00404417                 mov     dword ptr [esp+268h+Offset], 0 ; ErrorMessage
.text:0040441F                 mov     [esp+268h+FileHandle], 0 ; Code
.text:00404426                 call    sub_40A820
.text:0040442B                 jmp     loc_4042C4
.text:00404430 ; ---------------------------------------------------------------------------
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: sub_403D80+3E2↑j
.text:00404430                 mov     dword ptr [esp+268h+Offset], esi ; Str2
.text:00404434                 mov     eax, [ebp+Str1]
.text:0040443A                 mov     [esp+268h+FileHandle], eax ; Str1
.text:0040443D                 call    strcmp
.text:00404442                 test    eax, eax
.text:00404444                 jz      loc_403F5E
.text:0040444A                 jmp     loc_404168
.text:0040444F ; ---------------------------------------------------------------------------
.text:0040444F
.text:0040444F loc_40444F:                             ; CODE XREF: sub_403D80+2FE↑j
.text:0040444F                                         ; sub_403D80+30A↑j
.text:0040444F                 mov     [esp+268h+FileHandle], offset aSFileTooLarge ; "%s: file too large"
.text:00404456                 call    ds:libintl_gettext
.text:0040445C                 mov     dword ptr [esp+268h+Offset], 0 ; ErrorMessage
.text:00404464                 mov     edx, dword ptr [ebp+arg_4]
.text:00404467                 mov     dword ptr [esp+268h+Offset+4], eax ; char *
.text:0040446B                 mov     [esp+268h+Origin], edx ; char
.text:0040446F
.text:0040446F loc_40446F:                             ; CODE XREF: sub_403D80+839↓j
.text:0040446F                 mov     [esp+268h+FileHandle], 0 ; Code
.text:00404476                 call    sub_40A820
.text:0040447B                 jmp     loc_404354
.text:00404480 ; ---------------------------------------------------------------------------
.text:00404480
.text:00404480 loc_404480:                             ; CODE XREF: sub_403D80+2C1↑j
.text:00404480                 test    eax, eax
.text:00404482                 jnz     loc_404625
.text:00404488
.text:00404488 loc_404488:                             ; CODE XREF: sub_403D80+8B3↓j
.text:00404488                 mov     ecx, [ebp+var_1D0]
.text:0040448E                 not     ecx
.text:00404490                 or      ecx, [ebp+var_200]
.text:00404496                 jz      loc_4045E0
.text:0040449C
.text:0040449C loc_40449C:                             ; CODE XREF: sub_403D80+8AD↓j
.text:0040449C                 call    _errno
.text:004044A1                 cmp     [ebp+arg_14], 1
.text:004044A5                 mov     edi, [eax]
.text:004044A7                 mov     [ebp+ErrorMessage], edi
.text:004044AD                 jz      loc_4045BE
.text:004044B3
.text:004044B3 loc_4044B3:                             ; CODE XREF: sub_403D80+845↓j
.text:004044B3                                         ; sub_403D80+853↓j
.text:004044B3                 lea     esi, [ebp+var_C8]
.text:004044B9                 xor     edi, edi
.text:004044BB                 mov     dword ptr [esp+268h+Offset+4], esi
.text:004044BF                 mov     esi, [ebp+var_1E8]
.text:004044C5                 add     esi, [ebp+var_1D8]
.text:004044CB                 adc     edi, [ebp+var_1D4]
.text:004044D1                 mov     [esp+268h+FileHandle], esi
.text:004044D4                 mov     dword ptr [esp+268h+Offset], edi
.text:004044D8                 call    sub_40A0F0
.text:004044DD                 mov     [esp+268h+FileHandle], offset aSErrorWritingA ; "%s: error writing at offset %s"
.text:004044E4                 mov     ebx, eax
.text:004044E6                 call    ds:libintl_gettext
.text:004044EC                 mov     [esp+268h+var_258], ebx
.text:004044F0                 mov     ebx, dword ptr [ebp+arg_4]
.text:004044F3                 mov     [esp+268h+FileHandle], 0 ; Code
.text:004044FA                 mov     dword ptr [esp+268h+Offset+4], eax ; char *
.text:004044FE                 mov     eax, [ebp+ErrorMessage]
.text:00404504                 mov     [esp+268h+Origin], ebx ; char
.text:00404508                 mov     dword ptr [esp+268h+Offset], eax ; ErrorMessage
.text:0040450C                 call    sub_40A820
.text:00404511                 cmp     [ebp+ErrorMessage], 5
.text:00404518                 jnz     loc_404354
.text:0040451E                 test    [ebp+var_1E8], 1FFh
.text:00404528                 jnz     loc_404354
.text:0040452E                 mov     edx, [ebp+var_1E8]
.text:00404534                 add     edx, 200h
.text:0040453A                 cmp     [ebp+var_1E4], edx
.text:00404540                 jb      loc_404354
.text:00404546                 mov     ecx, [ebp+var_1D0]
.text:0040454C                 not     ecx
.text:0040454E                 or      ecx, [ebp+var_200]
.text:00404554                 jz      loc_404354
.text:0040455A                 mov     [esp+268h+Origin], 0 ; Origin
.text:00404562                 mov     eax, [ebp+Size]
.text:00404565                 add     esi, 200h
.text:0040456B                 adc     edi, 0
.text:0040456E                 mov     dword ptr [esp+268h+Offset], esi ; Offset
.text:00404572                 mov     dword ptr [esp+268h+Offset+4], edi
.text:00404576                 mov     [esp+268h+FileHandle], eax ; FileHandle
.text:00404579                 call    _lseeki64
.text:0040457E                 and     eax, edx
.text:00404580                 inc     eax
.text:00404581                 jz      short loc_404594
.text:00404583                 mov     [ebp+var_1E9], 1
.text:0040458A                 mov     eax, 200h
.text:0040458F                 jmp     loc_404047
.text:00404594 ; ---------------------------------------------------------------------------
.text:00404594
.text:00404594 loc_404594:                             ; CODE XREF: sub_403D80+801↑j
.text:00404594                 mov     [esp+268h+FileHandle], offset aSLseekFailed ; "%s: lseek failed"
.text:0040459B
.text:0040459B loc_40459B:                             ; CODE XREF: sub_403D80+D00↓j
.text:0040459B                 call    ds:libintl_gettext
.text:004045A1                 mov     ebx, eax
.text:004045A3                 call    _errno
.text:004045A8                 mov     edi, dword ptr [ebp+arg_4]
.text:004045AB                 mov     [esp+268h+Origin], edi
.text:004045AF                 mov     dword ptr [esp+268h+Offset+4], ebx
.text:004045B3                 mov     ebx, [eax]
.text:004045B5                 mov     dword ptr [esp+268h+Offset], ebx
.text:004045B9                 jmp     loc_40446F
.text:004045BE ; ---------------------------------------------------------------------------
.text:004045BE
.text:004045BE loc_4045BE:                             ; CODE XREF: sub_403D80+72D↑j
.text:004045BE                 cmp     [ebp+var_1EA], 0
.text:004045C5                 jz      loc_4044B3
.text:004045CB                 call    _errno
.text:004045D0                 cmp     dword ptr [eax], 16h
.text:004045D3                 jnz     loc_4044B3
.text:004045D9                 xor     eax, eax
.text:004045DB                 jmp     loc_404047
.text:004045E0 ; ---------------------------------------------------------------------------
.text:004045E0
.text:004045E0 loc_4045E0:                             ; CODE XREF: sub_403D80+716↑j
.text:004045E0                 mov     eax, [ebp+var_1E8]
.text:004045E6                 xor     esi, esi
.text:004045E8                 mov     edx, [ebp+var_1D8]
.text:004045EE                 mov     [ebp+var_1CC], esi
.text:004045F4                 mov     ecx, [ebp+var_1D4]
.text:004045FA                 mov     esi, [ebp+arg_8]
.text:004045FD                 mov     [ebp+var_1D0], eax
.text:00404603                 add     [ebp+var_1D0], edx
.text:00404609                 mov     ebx, [ebp+var_1D0]
.text:0040460F                 adc     [ebp+var_1CC], ecx
.text:00404615                 mov     [esi], ebx
.text:00404617                 mov     edi, [ebp+var_1CC]
.text:0040461D                 mov     [esi+4], edi
.text:00404620                 jmp     loc_404062
.text:00404625 ; ---------------------------------------------------------------------------
.text:00404625
.text:00404625 loc_404625:                             ; CODE XREF: sub_403D80+702↑j
.text:00404625                 call    _errno
.text:0040462A                 cmp     dword ptr [eax], 1Ch
.text:0040462D                 jnz     loc_40449C
.text:00404633                 jmp     loc_404488
.text:00404638 ; ---------------------------------------------------------------------------
.text:00404638
.text:00404638 loc_404638:                             ; CODE XREF: sub_403D80+266↑j
.text:00404638                 mov     ecx, [ebp+var_1E4]
.text:0040463E                 mov     eax, [ebp+Src]
.text:00404644                 add     ecx, 3FFh
.text:0040464A                 mov     [ebp+var_1F8], eax
.text:00404650                 shr     ecx, 0Ah
.text:00404653                 cmp     ecx, 3000h
.text:00404659                 mov     [ebp+var_1FC], ecx
.text:0040465F                 ja      loc_404A85
.text:00404665                 lea     esi, [esi+0]
.text:00404669                 lea     edi, [edi+0]
.text:00404670
.text:00404670 loc_404670:                             ; CODE XREF: sub_403D80+B9B↓j
.text:00404670                 dec     [ebp+var_1FC]
.text:00404676                 cmp     [ebp+var_1FC], 0FFFFFFFFh
.text:0040467D                 jz      loc_403FEC
.text:00404683                 mov     esi, [ebp+arg_10]
.text:00404686                 mov     ebx, [ebp+var_1F8]
.text:0040468C                 mov     ecx, [esi+428h]
.text:00404692                 mov     [ebp+var_21C], ebx
.text:00404698                 mov     edx, [esi+420h]
.text:0040469E                 lea     eax, [esi+200h]
.text:004046A4                 mov     [ebp+var_208], eax
.text:004046AA                 mov     ebx, [esi+424h]
.text:004046B0                 inc     ecx
.text:004046B1                 mov     [esi+428h], ecx
.text:004046B7                 add     ebx, ecx
.text:004046B9                 lea     esi, [esi+0]
.text:004046C0
.text:004046C0 loc_4046C0:                             ; CODE XREF: sub_403D80+A50↓j
.text:004046C0                 mov     ecx, edx
.text:004046C2                 mov     eax, [esi]
.text:004046C4                 shl     ecx, 0Dh
.text:004046C7                 mov     edi, [esi+200h]
.text:004046CD                 xor     edx, ecx
.text:004046CF                 mov     ecx, [ebp+arg_10]
.text:004046D2                 mov     [ebp+var_22C], eax
.text:004046D8                 and     eax, 3FCh
.text:004046DD                 add     edx, edi
.text:004046DF                 mov     edi, [eax+ecx]
.text:004046E2                 add     edi, edx
.text:004046E4                 mov     eax, edi
.text:004046E6                 add     eax, ebx
.text:004046E8                 mov     ebx, [ebp+var_22C]
.text:004046EE                 mov     [esi], eax
.text:004046F0                 shr     eax, 8
.text:004046F3                 and     eax, 3FCh
.text:004046F8                 mov     edi, [eax+ecx]
.text:004046FB                 mov     ecx, [ebp+var_21C]
.text:00404701                 add     ebx, edi
.text:00404703                 mov     [ecx], ebx
.text:00404705                 mov     edi, edx
.text:00404707                 mov     ecx, [esi+4]
.text:0040470A                 mov     eax, [esi+204h]
.text:00404710                 shr     edi, 6
.text:00404713                 xor     edx, edi
.text:00404715                 mov     edi, [ebp+arg_10]
.text:00404718                 add     edx, eax
.text:0040471A                 mov     eax, ecx
.text:0040471C                 and     eax, 3FCh
.text:00404721                 mov     eax, [eax+edi]
.text:00404724                 add     eax, edx
.text:00404726                 add     eax, ebx
.text:00404728                 mov     ebx, ecx
.text:0040472A                 mov     [esi+4], eax
.text:0040472D                 shr     eax, 8
.text:00404730                 and     eax, 3FCh
.text:00404735                 mov     ecx, [eax+edi]
.text:00404738                 add     ebx, ecx
.text:0040473A                 mov     ecx, [ebp+var_21C]
.text:00404740                 mov     [ecx+4], ebx
.text:00404743                 lea     ecx, ds:0[edx*4]
.text:0040474A                 xor     edx, ecx
.text:0040474C                 mov     ecx, [esi+208h]
.text:00404752                 add     edx, ecx
.text:00404754                 mov     ecx, [esi+8]
.text:00404757                 mov     eax, ecx
.text:00404759                 and     eax, 3FCh
.text:0040475E                 mov     eax, [eax+edi]
.text:00404761                 add     eax, edx
.text:00404763                 add     eax, ebx
.text:00404765                 mov     ebx, ecx
.text:00404767                 mov     [esi+8], eax
.text:0040476A                 shr     eax, 8
.text:0040476D                 and     eax, 3FCh
.text:00404772                 mov     ecx, [eax+edi]
.text:00404775                 mov     edi, [ebp+var_21C]
.text:0040477B                 add     ebx, ecx
.text:0040477D                 mov     [edi+8], ebx
.text:00404780                 mov     ecx, edx
.text:00404782                 shr     ecx, 10h
.text:00404785                 xor     edx, ecx
.text:00404787                 mov     eax, [esi+0Ch]
.text:0040478A                 mov     ecx, [esi+20Ch]
.text:00404790                 mov     [ebp+var_22C], eax
.text:00404796                 add     edx, ecx
.text:00404798                 and     eax, 3FCh
.text:0040479D                 mov     ecx, [ebp+arg_10]
.text:004047A0                 mov     eax, [eax+ecx]
.text:004047A3                 add     eax, edx
.text:004047A5                 add     eax, ebx
.text:004047A7                 mov     ebx, [ebp+var_22C]
.text:004047AD                 mov     [esi+0Ch], eax
.text:004047B0                 shr     eax, 8
.text:004047B3                 and     eax, 3FCh
.text:004047B8                 add     ebx, [eax+ecx]
.text:004047BB                 add     esi, 10h
.text:004047BE                 mov     [edi+0Ch], ebx
.text:004047C1                 add     edi, 10h
.text:004047C4                 cmp     esi, [ebp+var_208]
.text:004047CA                 mov     [ebp+var_21C], edi
.text:004047D0                 jb      loc_4046C0
.text:004047D6                 lea     eax, [ecx+400h]
.text:004047DC                 mov     [ebp+var_20C], eax
.text:004047E2                 lea     esi, [esi+0]
.text:004047E9                 lea     edi, [edi+0]
.text:004047F0
.text:004047F0 loc_4047F0:                             ; CODE XREF: sub_403D80+B7C↓j
.text:004047F0                 mov     ecx, [esi-200h]
.text:004047F6                 mov     edi, edx
.text:004047F8                 shl     edi, 0Dh
.text:004047FB                 xor     edx, edi
.text:004047FD                 mov     edi, [esi]
.text:004047FF                 add     edx, ecx
.text:00404801                 mov     ecx, [ebp+arg_10]
.text:00404804                 mov     [ebp+var_22C], edi
.text:0040480A                 and     edi, 3FCh
.text:00404810                 mov     eax, [edi+ecx]
.text:00404813                 add     eax, edx
.text:00404815                 add     eax, ebx
.text:00404817                 mov     ebx, [ebp+var_22C]
.text:0040481D                 mov     [esi], eax
.text:0040481F                 shr     eax, 8
.text:00404822                 and     eax, 3FCh
.text:00404827                 mov     edi, [eax+ecx]
.text:0040482A                 mov     eax, edx
.text:0040482C                 shr     eax, 6
.text:0040482F                 add     ebx, edi
.text:00404831                 xor     edx, eax
.text:00404833                 mov     edi, [ebp+var_21C]
.text:00404839                 mov     [edi], ebx
.text:0040483B                 mov     eax, [esi-1FCh]
.text:00404841                 add     edx, eax
.text:00404843                 mov     eax, [esi+4]
.text:00404846                 mov     [ebp+var_22C], eax
.text:0040484C                 and     eax, 3FCh
.text:00404851                 mov     eax, [eax+ecx]
.text:00404854                 add     eax, edx
.text:00404856                 add     eax, ebx
.text:00404858                 mov     ebx, [ebp+var_22C]
.text:0040485E                 mov     [esi+4], eax
.text:00404861                 shr     eax, 8
.text:00404864                 and     eax, 3FCh
.text:00404869                 add     ebx, [eax+ecx]
.text:0040486C                 mov     [edi+4], ebx
.text:0040486F                 mov     ecx, [esi+8]
.text:00404872                 lea     edi, ds:0[edx*4]
.text:00404879                 mov     eax, [esi-1F8h]
.text:0040487F                 xor     edx, edi
.text:00404881                 mov     edi, [ebp+arg_10]
.text:00404884                 add     edx, eax
.text:00404886                 mov     eax, ecx
.text:00404888                 and     eax, 3FCh
.text:0040488D                 mov     eax, [eax+edi]
.text:00404890                 add     eax, edx
.text:00404892                 add     eax, ebx
.text:00404894                 mov     [esi+8], eax
.text:00404897                 mov     ebx, ecx
.text:00404899                 shr     eax, 8
.text:0040489C                 and     eax, 3FCh
.text:004048A1                 mov     ecx, [eax+edi]
.text:004048A4                 add     ebx, ecx
.text:004048A6                 mov     ecx, [ebp+var_21C]
.text:004048AC                 mov     [ecx+8], ebx
.text:004048AF                 mov     ecx, edx
.text:004048B1                 shr     ecx, 10h
.text:004048B4                 xor     edx, ecx
.text:004048B6                 mov     ecx, [esi-1F4h]
.text:004048BC                 add     edx, ecx
.text:004048BE                 mov     ecx, [esi+0Ch]
.text:004048C1                 mov     eax, ecx
.text:004048C3                 and     eax, 3FCh
.text:004048C8                 mov     eax, [eax+edi]
.text:004048CB                 add     eax, edx
.text:004048CD                 add     eax, ebx
.text:004048CF                 mov     [esi+0Ch], eax
.text:004048D2                 mov     ebx, ecx
.text:004048D4                 shr     eax, 8
.text:004048D7                 and     eax, 3FCh
.text:004048DC                 mov     ecx, [eax+edi]
.text:004048DF                 add     esi, 10h
.text:004048E2                 add     ebx, ecx
.text:004048E4                 mov     ecx, [ebp+var_21C]
.text:004048EA                 mov     [ecx+0Ch], ebx
.text:004048ED                 add     ecx, 10h
.text:004048F0                 mov     [ebp+var_21C], ecx
.text:004048F6                 cmp     esi, [ebp+var_20C]
.text:004048FC                 jb      loc_4047F0
.text:00404902                 add     [ebp+var_1F8], 400h
.text:0040490C                 mov     esi, [ebp+arg_10]
.text:0040490F                 mov     [esi+420h], edx
.text:00404915                 mov     [esi+424h], ebx
.text:0040491B                 jmp     loc_404670
.text:00404920 ; ---------------------------------------------------------------------------
.text:00404920
.text:00404920 loc_404920:                             ; CODE XREF: sub_403D80+231↑j
.text:00404920                                         ; sub_403D80+243↑j ...
.text:00404920                 mov     ebx, [ebp+Size]
.text:00404923                 mov     [esp+268h+FileHandle], ebx ; FileHandle
.text:00404926                 call    j__commit
.text:0040492B                 test    eax, eax
.text:0040492D                 jnz     short loc_40493B
.text:0040492F
.text:0040492F loc_40492F:                             ; CODE XREF: sub_403D80+C10↓j
.text:0040492F                                         ; sub_403D80+C1F↓j ...
.text:0040492F                 movzx   eax, [ebp+var_1E9]
.text:00404936                 jmp     loc_404359
.text:0040493B ; ---------------------------------------------------------------------------
.text:0040493B
.text:0040493B loc_40493B:                             ; CODE XREF: sub_403D80+BAD↑j
.text:0040493B                 call    _errno
.text:00404940                 mov     ebx, [eax]
.text:00404942                 cmp     ebx, 16h
.text:00404945                 jz      short loc_404992
.text:00404947                 cmp     ebx, 9
.text:0040494A                 jz      short loc_404992
.text:0040494C                 mov     [esp+268h+FileHandle], offset aSFdatasyncFail ; "%s: fdatasync failed"
.text:00404953                 call    ds:libintl_gettext
.text:00404959                 mov     edi, dword ptr [ebp+arg_4]
.text:0040495C                 mov     [esp+268h+Origin], edi ; char
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_403D80+C46↓j
.text:00404960                 mov     dword ptr [esp+268h+Offset+4], eax ; char *
.text:00404964                 mov     dword ptr [esp+268h+Offset], ebx ; ErrorMessage
.text:00404968                 mov     [esp+268h+FileHandle], 0 ; Code
.text:0040496F                 call    sub_40A820
.text:00404974                 call    _errno
.text:00404979                 mov     [eax], ebx
.text:0040497B                 call    _errno
.text:00404980                 cmp     dword ptr [eax], 5
.text:00404983                 jnz     loc_404354
.text:00404989                 mov     [ebp+var_1E9], 1
.text:00404990                 jmp     short loc_40492F
.text:00404992 ; ---------------------------------------------------------------------------
.text:00404992
.text:00404992 loc_404992:                             ; CODE XREF: sub_403D80+BC5↑j
.text:00404992                                         ; sub_403D80+BCA↑j
.text:00404992                 mov     eax, [ebp+Size]
.text:00404995                 mov     [esp+268h+FileHandle], eax ; FileHandle
.text:00404998                 call    _commit
.text:0040499D                 test    eax, eax
.text:0040499F                 jz      short loc_40492F
.text:004049A1                 call    _errno
.text:004049A6                 mov     ebx, [eax]
.text:004049A8                 cmp     ebx, 16h
.text:004049AB                 jz      short loc_4049C8
.text:004049AD                 cmp     ebx, 9
.text:004049B0                 jz      short loc_4049C8
.text:004049B2                 mov     [esp+268h+FileHandle], offset aSFsyncFailed ; "%s: fsync failed"
.text:004049B9                 call    ds:libintl_gettext
.text:004049BF                 mov     ecx, dword ptr [ebp+arg_4]
.text:004049C2                 mov     [esp+268h+Origin], ecx
.text:004049C6                 jmp     short loc_404960
.text:004049C8 ; ---------------------------------------------------------------------------
.text:004049C8
.text:004049C8 loc_4049C8:                             ; CODE XREF: sub_403D80+C2B↑j
.text:004049C8                                         ; sub_403D80+C30↑j
.text:004049C8                 call    j__flushall
.text:004049CD                 jmp     loc_40492F
.text:004049D2 ; ---------------------------------------------------------------------------
.text:004049D2
.text:004049D2 loc_4049D2:                             ; CODE XREF: sub_403D80+1C8↑j
.text:004049D2                 mov     [esp+268h+FileHandle], offset aSPassLuLuS ; "%s: pass %lu/%lu (%s)..."
.text:004049D9                 lea     esi, [ebp+Buffer]
.text:004049DC                 call    ds:libintl_gettext
.text:004049E2                 mov     [esp+268h+var_250], esi
.text:004049E6                 mov     ecx, [ebp+arg_18]
.text:004049E9                 mov     edx, dword ptr [ebp+arg_4]
.text:004049EC                 mov     dword ptr [esp+268h+Offset], 0 ; ErrorMessage
.text:004049F4                 mov     ebx, [ebp+arg_14]
.text:004049F7                 mov     [esp+268h+var_254], ecx
.text:004049FB                 mov     [esp+268h+Origin], edx ; char
.text:004049FF                 mov     dword ptr [esp+268h+Offset+4], eax ; char *
.text:00404A03                 mov     [esp+268h+var_258], ebx
.text:00404A07                 mov     [esp+268h+FileHandle], 0 ; Code
.text:00404A0E                 call    sub_40A820
.text:00404A13                 mov     [esp+268h+FileHandle], 0 ; Time
.text:00404A1A                 call    time
.text:00404A1F                 add     eax, 5
.text:00404A22                 mov     [ebp+var_1DC], eax
.text:00404A28                 mov     eax, offset Locale
.text:00404A2D                 mov     [ebp+Str1], eax
.text:00404A33                 jmp     loc_403F4E
.text:00404A38 ; ---------------------------------------------------------------------------
.text:00404A38
.text:00404A38 loc_404A38:                             ; CODE XREF: sub_403D80+162↑j
.text:00404A38                 mov     esi, [ebp+var_1E4]
.text:00404A3E                 mov     edi, [ebp+Src]
.text:00404A44                 sub     esi, ebx
.text:00404A46                 mov     dword ptr [esp+268h+Offset+4], esi ; Size
.text:00404A4A                 add     edi, ebx
.text:00404A4C                 mov     ebx, [ebp+Src]
.text:00404A52                 mov     [esp+268h+FileHandle], edi ; void *
.text:00404A55                 mov     dword ptr [esp+268h+Offset], ebx ; Src
.text:00404A59                 call    memcpy
.text:00404A5E                 jmp     loc_403EE8
.text:00404A63 ; ---------------------------------------------------------------------------
.text:00404A63
.text:00404A63 loc_404A63:                             ; CODE XREF: sub_403D80+B6↑j
.text:00404A63                 mov     dword ptr [ebp+Buffer], 646E6172h
.text:00404A6A                 mov     [ebp+var_24], 6D6Fh
.text:00404A70                 mov     [ebp+var_22], 0
.text:00404A74                 jmp     loc_403F43
.text:00404A79 ; ---------------------------------------------------------------------------
.text:00404A79
.text:00404A79 loc_404A79:                             ; CODE XREF: sub_403D80+8B↑j
.text:00404A79                 mov     [esp+268h+FileHandle], offset aSCannotRewind ; "%s: cannot rewind"
.text:00404A80                 jmp     loc_40459B
.text:00404A85 ; ---------------------------------------------------------------------------
.text:00404A85
.text:00404A85 loc_404A85:                             ; CODE XREF: sub_403D80+8DF↑j
.text:00404A85                 mov     dword ptr [esp+268h+Offset+4], 2DCh
.text:00404A8D                 mov     dword ptr [esp+268h+Offset], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/shred.c"
.text:00404A95                 mov     [esp+268h+FileHandle], offset aSizeSizeMax ; "size <= size_max"
.text:00404A9C                 call    _assert
.text:00404A9C sub_403D80      endp
.text:00404A9C
.text:00404AA1 ; ---------------------------------------------------------------------------
.text:00404AA1                 jmp     short sub_404AB0
.text:00404AA1 ; ---------------------------------------------------------------------------
.text:00404AA3                 align 10h
.text:00404AB0
.text:00404AB0 ; =============== S U B R O U T I N E =======================================
.text:00404AB0
.text:00404AB0
.text:00404AB0 sub_404AB0      proc near               ; CODE XREF: sub_403230+16C↑p
.text:00404AB0                                         ; .text:00404AA1↑j
.text:00404AB0
.text:00404AB0 var_46C         = dword ptr -46Ch
.text:00404AB0 var_468         = dword ptr -468h
.text:00404AB0 var_458         = dword ptr -458h
.text:00404AB0 var_454         = dword ptr -454h
.text:00404AB0 var_450         = dword ptr -450h
.text:00404AB0 var_44C         = dword ptr -44Ch
.text:00404AB0 var_448         = dword ptr -448h
.text:00404AB0 var_444         = dword ptr -444h
.text:00404AB0 var_440         = dword ptr -440h
.text:00404AB0 var_43C         = dword ptr -43Ch
.text:00404AB0 var_438         = dword ptr -438h
.text:00404AB0 var_434         = dword ptr -434h
.text:00404AB0 var_430         = dword ptr -430h
.text:00404AB0 var_42C         = dword ptr -42Ch
.text:00404AB0 var_2C          = dword ptr -2Ch
.text:00404AB0 var_28          = dword ptr -28h
.text:00404AB0 arg_0           = dword ptr  4
.text:00404AB0 arg_4           = dword ptr  8
.text:00404AB0 arg_8           = dword ptr  0Ch
.text:00404AB0
.text:00404AB0                 push    ebp
.text:00404AB1                 push    edi
.text:00404AB2                 push    esi
.text:00404AB3                 push    ebx
.text:00404AB4                 sub     esp, 45Ch
.text:00404ABA                 mov     eax, [esp+46Ch+arg_4]
.text:00404AC1                 test    eax, eax
.text:00404AC3                 jz      loc_404C45
.text:00404AC9                 mov     [esp+46Ch+var_434], offset dword_401380
.text:00404AD1                 mov     ecx, [esp+46Ch+arg_8]
.text:00404AD8                 xor     ebx, ebx
.text:00404ADA                 mov     [esp+46Ch+var_2C], ebx
.text:00404AE1                 mov     edx, [esp+46Ch+arg_0]
.text:00404AE8                 mov     eax, [esp+46Ch+arg_4]
.text:00404AEF                 mov     [esp+46Ch+var_28], ecx
.text:00404AF6                 mov     [esp+46Ch+var_430], 0
.text:00404AFE                 mov     [esp+46Ch+var_438], edx
.text:00404B02                 mov     [esp+46Ch+var_43C], eax
.text:00404B06                 lea     esi, [esi+0]
.text:00404B09                 lea     edi, [edi+0]
.text:00404B10
.text:00404B10 loc_404B10:                             ; CODE XREF: sub_404AB0+79↓j
.text:00404B10                                         ; sub_404AB0+DB↓j
.text:00404B10                 mov     esi, [esp+46Ch+var_434]
.text:00404B14                 mov     ebx, [esi]
.text:00404B16                 add     esi, 4
.text:00404B19                 mov     [esp+46Ch+var_434], esi
.text:00404B1D                 test    ebx, ebx
.text:00404B1F                 jnz     short loc_404B30
.text:00404B21                 mov     [esp+46Ch+var_434], offset dword_401380
.text:00404B29                 jmp     short loc_404B10
.text:00404B29 ; ---------------------------------------------------------------------------
.text:00404B2B                 align 10h
.text:00404B30
.text:00404B30 loc_404B30:                             ; CODE XREF: sub_404AB0+6F↑j
.text:00404B30                 test    ebx, ebx
.text:00404B32                 js      loc_405220
.text:00404B38                 cmp     ebx, [esp+46Ch+var_43C]
.text:00404B3C                 ja      short loc_404B8D
.text:00404B3E                 lea     edx, ds:0[ebx*4]
.text:00404B45                 mov     edi, [esp+46Ch+var_438]
.text:00404B49                 cmp     edx, 7
.text:00404B4C                 mov     esi, [esp+46Ch+var_434]
.text:00404B50                 jbe     short loc_404B70
.text:00404B52                 test    byte ptr [esp+46Ch+var_438], 4
.text:00404B57                 jz      short loc_404B70
.text:00404B59                 mov     ebp, [esi]
.text:00404B5B                 sub     edx, 4
.text:00404B5E                 mov     [edi], ebp
.text:00404B60                 mov     edi, [esp+46Ch+var_438]
.text:00404B64                 mov     esi, [esp+46Ch+var_434]
.text:00404B68                 add     edi, 4
.text:00404B6B                 add     esi, 4
.text:00404B6E                 mov     esi, esi
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: sub_404AB0+A0↑j
.text:00404B70                                         ; sub_404AB0+A7↑j
.text:00404B70                 cld
.text:00404B71                 mov     ecx, edx
.text:00404B73                 shr     ecx, 2
.text:00404B76                 rep movsd
.text:00404B78                 lea     edx, ds:0[ebx*4]
.text:00404B7F                 add     [esp+46Ch+var_434], edx
.text:00404B83                 add     [esp+46Ch+var_438], edx
.text:00404B87
.text:00404B87 loc_404B87:                             ; CODE XREF: sub_404AB0+77C↓j
.text:00404B87                 sub     [esp+46Ch+var_43C], ebx
.text:00404B8B                 jmp     short loc_404B10
.text:00404B8D ; ---------------------------------------------------------------------------
.text:00404B8D
.text:00404B8D loc_404B8D:                             ; CODE XREF: sub_404AB0+8C↑j
.text:00404B8D                 cmp     [esp+46Ch+var_43C], 1
.text:00404B92                 jbe     short loc_404BA3
.text:00404B94                 mov     eax, [esp+46Ch+var_43C]
.text:00404B98                 lea     ecx, [eax+eax*2]
.text:00404B9B                 cmp     ecx, ebx
.text:00404B9D                 jnb     loc_404F1B
.text:00404BA3
.text:00404BA3 loc_404BA3:                             ; CODE XREF: sub_404AB0+E2↑j
.text:00404BA3                 mov     ebx, [esp+46Ch+var_43C]
.text:00404BA7                 add     [esp+46Ch+var_430], ebx
.text:00404BAB
.text:00404BAB loc_404BAB:                             ; CODE XREF: sub_404AB0+707↓j
.text:00404BAB                                         ; sub_404AB0+789↓j
.text:00404BAB                 mov     [esp+46Ch+var_43C], 0
.text:00404BB3                 mov     ebp, [esp+46Ch+var_430]
.text:00404BB7                 mov     edi, [esp+46Ch+arg_4]
.text:00404BBE                 dec     [esp+46Ch+var_430]
.text:00404BC2                 mov     ebx, [esp+46Ch+arg_4]
.text:00404BC9                 sub     edi, ebp
.text:00404BCB                 cmp     [esp+46Ch+var_43C], ebx
.text:00404BCF                 mov     [esp+46Ch+var_444], edi
.text:00404BD3                 mov     ecx, [esp+46Ch+var_430]
.text:00404BD7                 mov     [esp+46Ch+var_440], ecx
.text:00404BDB                 jnb     short loc_404C37
.text:00404BDD                 lea     esi, [esi+0]
.text:00404BE0
.text:00404BE0 loc_404BE0:                             ; CODE XREF: sub_404AB0+185↓j
.text:00404BE0                 mov     eax, [esp+46Ch+var_430]
.text:00404BE4                 cmp     [esp+46Ch+var_440], eax
.text:00404BE8                 ja      short loc_404C50
.text:00404BEA                 mov     ebx, [esp+46Ch+arg_0]
.text:00404BF1                 mov     ecx, [esp+46Ch+var_43C]
.text:00404BF5                 mov     eax, [esp+46Ch+arg_4]
.text:00404BFC                 mov     edx, [esp+46Ch+var_444]
.text:00404C00                 mov     ebp, [esp+46Ch+var_440]
.text:00404C04                 mov     esi, [ebx+ecx*4]
.text:00404C07                 lea     edi, [eax+ebp-1]
.text:00404C0B                 mov     [ebx+edx*4], esi
.text:00404C0E                 inc     edx
.text:00404C0F                 mov     [esp+46Ch+var_440], edi
.text:00404C13                 mov     [esp+46Ch+var_444], edx
.text:00404C17                 mov     dword ptr [ebx+ecx*4], 0FFFFFFFFh
.text:00404C1E
.text:00404C1E loc_404C1E:                             ; CODE XREF: sub_404AB0+408↓j
.text:00404C1E                 inc     [esp+46Ch+var_43C]
.text:00404C22                 mov     edi, [esp+46Ch+var_430]
.text:00404C26                 mov     edx, [esp+46Ch+arg_4]
.text:00404C2D                 sub     [esp+46Ch+var_440], edi
.text:00404C31                 cmp     [esp+46Ch+var_43C], edx
.text:00404C35                 jb      short loc_404BE0
.text:00404C37
.text:00404C37 loc_404C37:                             ; CODE XREF: sub_404AB0+12B↑j
.text:00404C37                 cld
.text:00404C38                 mov     ecx, 102h
.text:00404C3D                 xor     eax, eax
.text:00404C3F                 lea     edi, [esp+46Ch+var_42C]
.text:00404C43                 rep stosd
.text:00404C45
.text:00404C45 loc_404C45:                             ; CODE XREF: sub_404AB0+13↑j
.text:00404C45                 add     esp, 45Ch
.text:00404C4B                 pop     ebx
.text:00404C4C                 pop     esi
.text:00404C4D                 pop     edi
.text:00404C4E                 pop     ebp
.text:00404C4F                 retn
.text:00404C50 ; ---------------------------------------------------------------------------
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: sub_404AB0+138↑j
.text:00404C50                 mov     ebx, [esp+46Ch+var_444]
.text:00404C54                 sub     ebx, [esp+46Ch+var_43C]
.text:00404C58                 jnz     loc_404EBD
.text:00404C5E                 mov     ebx, [esp+46Ch+var_2C]
.text:00404C65                 test    ebx, ebx
.text:00404C67                 jnz     loc_404E84
.text:00404C6D                 mov     ebx, [esp+46Ch+var_28]
.text:00404C74                 lea     ebp, [esp+46Ch+var_42C]
.text:00404C78                 mov     ecx, [ebx+428h]
.text:00404C7E                 mov     esi, [ebx+424h]
.text:00404C84                 mov     edi, ebx
.text:00404C86                 mov     edx, [ebx+420h]
.text:00404C8C                 inc     ecx
.text:00404C8D                 add     esi, ecx
.text:00404C8F                 mov     [ebx+428h], ecx
.text:00404C95                 lea     ecx, [ebx+200h]
.text:00404C9B                 mov     [esp+46Ch+var_458], ecx
.text:00404C9F                 nop
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_404AB0+2C6↓j
.text:00404CA0                 mov     ecx, edx
.text:00404CA2                 shl     ecx, 0Dh
.text:00404CA5                 xor     edx, ecx
.text:00404CA7                 mov     ecx, [edi+200h]
.text:00404CAD                 add     edx, ecx
.text:00404CAF                 mov     ecx, [edi]
.text:00404CB1                 mov     eax, ecx
.text:00404CB3                 and     eax, 3FCh
.text:00404CB8                 mov     eax, [eax+ebx]
.text:00404CBB                 add     eax, edx
.text:00404CBD                 add     eax, esi
.text:00404CBF                 mov     [edi], eax
.text:00404CC1                 shr     eax, 8
.text:00404CC4                 and     eax, 3FCh
.text:00404CC9                 mov     esi, [eax+ebx]
.text:00404CCC                 add     esi, ecx
.text:00404CCE                 mov     ecx, edx
.text:00404CD0                 mov     [ebp+0], esi
.text:00404CD3                 shr     ecx, 6
.text:00404CD6                 xor     edx, ecx
.text:00404CD8                 mov     ecx, [edi+204h]
.text:00404CDE                 add     edx, ecx
.text:00404CE0                 mov     ecx, [edi+4]
.text:00404CE3                 mov     eax, ecx
.text:00404CE5                 and     eax, 3FCh
.text:00404CEA                 mov     eax, [eax+ebx]
.text:00404CED                 add     eax, edx
.text:00404CEF                 add     eax, esi
.text:00404CF1                 mov     [edi+4], eax
.text:00404CF4                 shr     eax, 8
.text:00404CF7                 and     eax, 3FCh
.text:00404CFC                 mov     esi, [eax+ebx]
.text:00404CFF                 add     esi, ecx
.text:00404D01                 lea     ecx, ds:0[edx*4]
.text:00404D08                 mov     [ebp+4], esi
.text:00404D0B                 xor     edx, ecx
.text:00404D0D                 mov     eax, [edi+208h]
.text:00404D13                 mov     ecx, [edi+8]
.text:00404D16                 add     edx, eax
.text:00404D18                 mov     eax, ecx
.text:00404D1A                 and     eax, 3FCh
.text:00404D1F                 mov     eax, [eax+ebx]
.text:00404D22                 add     eax, edx
.text:00404D24                 add     eax, esi
.text:00404D26                 mov     [edi+8], eax
.text:00404D29                 shr     eax, 8
.text:00404D2C                 and     eax, 3FCh
.text:00404D31                 mov     esi, [eax+ebx]
.text:00404D34                 add     esi, ecx
.text:00404D36                 mov     ecx, edx
.text:00404D38                 mov     [ebp+8], esi
.text:00404D3B                 shr     ecx, 10h
.text:00404D3E                 xor     edx, ecx
.text:00404D40                 mov     ecx, [edi+20Ch]
.text:00404D46                 add     edx, ecx
.text:00404D48                 mov     ecx, [edi+0Ch]
.text:00404D4B                 mov     eax, ecx
.text:00404D4D                 and     eax, 3FCh
.text:00404D52                 mov     eax, [eax+ebx]
.text:00404D55                 add     eax, edx
.text:00404D57                 add     eax, esi
.text:00404D59                 mov     [edi+0Ch], eax
.text:00404D5C                 shr     eax, 8
.text:00404D5F                 and     eax, 3FCh
.text:00404D64                 mov     esi, [eax+ebx]
.text:00404D67                 add     edi, 10h
.text:00404D6A                 add     esi, ecx
.text:00404D6C                 mov     [ebp+0Ch], esi
.text:00404D6F                 add     ebp, 10h
.text:00404D72                 cmp     edi, [esp+46Ch+var_458]
.text:00404D76                 jb      loc_404CA0
.text:00404D7C                 lea     eax, [ebx+400h]
.text:00404D82                 mov     [esp+46Ch+var_450], eax
.text:00404D86                 lea     esi, [esi+0]
.text:00404D89                 lea     edi, [edi+0]
.text:00404D90
.text:00404D90 loc_404D90:                             ; CODE XREF: sub_404AB0+3B6↓j
.text:00404D90                 mov     ecx, edx
.text:00404D92                 shl     ecx, 0Dh
.text:00404D95                 xor     edx, ecx
.text:00404D97                 mov     ecx, [edi-200h]
.text:00404D9D                 add     edx, ecx
.text:00404D9F                 mov     ecx, [edi]
.text:00404DA1                 mov     eax, ecx
.text:00404DA3                 and     eax, 3FCh
.text:00404DA8                 mov     eax, [eax+ebx]
.text:00404DAB                 add     eax, edx
.text:00404DAD                 add     eax, esi
.text:00404DAF                 mov     [edi], eax
.text:00404DB1                 shr     eax, 8
.text:00404DB4                 and     eax, 3FCh
.text:00404DB9                 mov     esi, [eax+ebx]
.text:00404DBC                 add     esi, ecx
.text:00404DBE                 mov     ecx, edx
.text:00404DC0                 mov     [ebp+0], esi
.text:00404DC3                 shr     ecx, 6
.text:00404DC6                 xor     edx, ecx
.text:00404DC8                 mov     ecx, [edi-1FCh]
.text:00404DCE                 add     edx, ecx
.text:00404DD0                 mov     ecx, [edi+4]
.text:00404DD3                 mov     eax, ecx
.text:00404DD5                 and     eax, 3FCh
.text:00404DDA                 mov     eax, [eax+ebx]
.text:00404DDD                 add     eax, edx
.text:00404DDF                 add     eax, esi
.text:00404DE1                 mov     [edi+4], eax
.text:00404DE4                 shr     eax, 8
.text:00404DE7                 and     eax, 3FCh
.text:00404DEC                 mov     esi, [eax+ebx]
.text:00404DEF                 add     esi, ecx
.text:00404DF1                 lea     ecx, ds:0[edx*4]
.text:00404DF8                 mov     [ebp+4], esi
.text:00404DFB                 xor     edx, ecx
.text:00404DFD                 mov     ecx, [edi-1F8h]
.text:00404E03                 add     edx, ecx
.text:00404E05                 mov     ecx, [edi+8]
.text:00404E08                 mov     eax, ecx
.text:00404E0A                 and     eax, 3FCh
.text:00404E0F                 mov     eax, [eax+ebx]
.text:00404E12                 add     eax, edx
.text:00404E14                 add     eax, esi
.text:00404E16                 mov     [edi+8], eax
.text:00404E19                 shr     eax, 8
.text:00404E1C                 and     eax, 3FCh
.text:00404E21                 mov     esi, [eax+ebx]
.text:00404E24                 add     esi, ecx
.text:00404E26                 mov     ecx, edx
.text:00404E28                 mov     [ebp+8], esi
.text:00404E2B                 shr     ecx, 10h
.text:00404E2E                 xor     edx, ecx
.text:00404E30                 mov     ecx, [edi-1F4h]
.text:00404E36                 add     edx, ecx
.text:00404E38                 mov     ecx, [edi+0Ch]
.text:00404E3B                 mov     eax, ecx
.text:00404E3D                 and     eax, 3FCh
.text:00404E42                 mov     eax, [eax+ebx]
.text:00404E45                 add     eax, edx
.text:00404E47                 add     eax, esi
.text:00404E49                 mov     [edi+0Ch], eax
.text:00404E4C                 shr     eax, 8
.text:00404E4F                 and     eax, 3FCh
.text:00404E54                 mov     esi, [eax+ebx]
.text:00404E57                 add     edi, 10h
.text:00404E5A                 add     esi, ecx
.text:00404E5C                 mov     [ebp+0Ch], esi
.text:00404E5F                 add     ebp, 10h
.text:00404E62                 cmp     edi, [esp+46Ch+var_450]
.text:00404E66                 jb      loc_404D90
.text:00404E6C                 mov     [ebx+420h], edx
.text:00404E72                 mov     edx, 100h
.text:00404E77                 mov     [ebx+424h], esi
.text:00404E7D                 mov     [esp+46Ch+var_2C], edx
.text:00404E84
.text:00404E84 loc_404E84:                             ; CODE XREF: sub_404AB0+1B7↑j
.text:00404E84                 mov     esi, [esp+46Ch+var_2C]
.text:00404E8B                 dec     esi
.text:00404E8C                 mov     edx, [esp+esi*4+46Ch+var_42C]
.text:00404E90                 mov     [esp+46Ch+var_2C], esi
.text:00404E97
.text:00404E97 loc_404E97:                             ; CODE XREF: sub_404AB0+43F↓j
.text:00404E97                 mov     eax, [esp+46Ch+var_43C]
.text:00404E9B                 mov     ebp, [esp+46Ch+arg_0]
.text:00404EA2                 mov     ebx, [esp+46Ch+var_43C]
.text:00404EA6                 add     edx, eax
.text:00404EA8                 mov     esi, [ebp+edx*4+0]
.text:00404EAC                 mov     ecx, [ebp+ebx*4+0]
.text:00404EB0                 mov     [ebp+ebx*4+0], esi
.text:00404EB4                 mov     [ebp+edx*4+0], ecx
.text:00404EB8                 jmp     loc_404C1E
.text:00404EBD ; ---------------------------------------------------------------------------
.text:00404EBD
.text:00404EBD loc_404EBD:                             ; CODE XREF: sub_404AB0+1A8↑j
.text:00404EBD                 mov     eax, ebx
.text:00404EBF                 xor     edx, edx
.text:00404EC1                 neg     eax
.text:00404EC3                 div     ebx
.text:00404EC5                 mov     esi, edx
.text:00404EC7                 mov     esi, esi
.text:00404EC9                 lea     edi, [edi+0]
.text:00404ED0
.text:00404ED0 loc_404ED0:                             ; CODE XREF: sub_404AB0+439↓j
.text:00404ED0                 mov     eax, [esp+46Ch+var_2C]
.text:00404ED7                 test    eax, eax
.text:00404ED9                 jz      short loc_404EF1
.text:00404EDB
.text:00404EDB loc_404EDB:                             ; CODE XREF: sub_404AB0+469↓j
.text:00404EDB                 dec     eax
.text:00404EDC                 mov     [esp+46Ch+var_2C], eax
.text:00404EE3                 mov     eax, [esp+eax*4+46Ch+var_42C]
.text:00404EE7                 cmp     eax, esi
.text:00404EE9                 jb      short loc_404ED0
.text:00404EEB                 xor     edx, edx
.text:00404EED                 div     ebx
.text:00404EEF                 jmp     short loc_404E97
.text:00404EF1 ; ---------------------------------------------------------------------------
.text:00404EF1
.text:00404EF1 loc_404EF1:                             ; CODE XREF: sub_404AB0+429↑j
.text:00404EF1                 mov     ebp, [esp+46Ch+var_28]
.text:00404EF8                 lea     eax, [esp+46Ch+var_42C]
.text:00404EFC                 mov     edi, 100h
.text:00404F01                 mov     [esp+46Ch+var_468], eax
.text:00404F05                 mov     [esp+46Ch+var_46C], ebp
.text:00404F08                 call    sub_405240
.text:00404F0D                 mov     [esp+46Ch+var_2C], edi
.text:00404F14                 mov     eax, 100h
.text:00404F19                 jmp     short loc_404EDB
.text:00404F1B ; ---------------------------------------------------------------------------
.text:00404F1B
.text:00404F1B loc_404F1B:                             ; CODE XREF: sub_404AB0+ED↑j
.text:00404F1B                                         ; sub_404AB0+701↓j
.text:00404F1B                 mov     esi, ebx
.text:00404F1D                 dec     ebx
.text:00404F1E                 cmp     esi, [esp+46Ch+var_43C]
.text:00404F22                 jz      loc_40518F
.text:00404F28                 mov     esi, ebx
.text:00404F2A                 inc     esi
.text:00404F2B                 jnz     loc_4051BC
.text:00404F31                 mov     edi, [esp+46Ch+var_2C]
.text:00404F38                 test    edi, edi
.text:00404F3A                 jnz     loc_405176
.text:00404F40                 mov     ebp, [esp+46Ch+var_28]
.text:00404F47                 lea     edx, [esp+46Ch+var_42C]
.text:00404F4B                 mov     [esp+46Ch+var_448], edx
.text:00404F4F                 mov     ecx, [ebp+428h]
.text:00404F55                 mov     edi, ebp
.text:00404F57                 mov     esi, [ebp+424h]
.text:00404F5D                 mov     edx, [ebp+420h]
.text:00404F63                 inc     ecx
.text:00404F64                 mov     [ebp+428h], ecx
.text:00404F6A                 add     esi, ecx
.text:00404F6C                 lea     ecx, [ebp+200h]
.text:00404F72                 mov     [esp+46Ch+var_454], ecx
.text:00404F76
.text:00404F76 loc_404F76:                             ; CODE XREF: sub_404AB0+5AF↓j
.text:00404F76                 mov     ecx, edx
.text:00404F78                 mov     eax, [edi+200h]
.text:00404F7E                 shl     ecx, 0Dh
.text:00404F81                 xor     edx, ecx
.text:00404F83                 mov     ecx, [edi]
.text:00404F85                 add     edx, eax
.text:00404F87                 mov     eax, ecx
.text:00404F89                 and     eax, 3FCh
.text:00404F8E                 mov     eax, [eax+ebp]
.text:00404F91                 add     eax, edx
.text:00404F93                 add     eax, esi
.text:00404F95                 mov     [edi], eax
.text:00404F97                 shr     eax, 8
.text:00404F9A                 and     eax, 3FCh
.text:00404F9F                 mov     esi, [eax+ebp]
.text:00404FA2                 mov     eax, [esp+46Ch+var_448]
.text:00404FA6                 add     esi, ecx
.text:00404FA8                 mov     [eax], esi
.text:00404FAA                 mov     ecx, edx
.text:00404FAC                 shr     ecx, 6
.text:00404FAF                 xor     edx, ecx
.text:00404FB1                 mov     ecx, [edi+204h]
.text:00404FB7                 add     edx, ecx
.text:00404FB9                 mov     ecx, [edi+4]
.text:00404FBC                 mov     eax, ecx
.text:00404FBE                 and     eax, 3FCh
.text:00404FC3                 mov     eax, [eax+ebp]
.text:00404FC6                 add     eax, edx
.text:00404FC8                 add     eax, esi
.text:00404FCA                 mov     [edi+4], eax
.text:00404FCD                 shr     eax, 8
.text:00404FD0                 and     eax, 3FCh
.text:00404FD5                 mov     esi, [eax+ebp]
.text:00404FD8                 add     esi, ecx
.text:00404FDA                 mov     ecx, [esp+46Ch+var_448]
.text:00404FDE                 mov     [ecx+4], esi
.text:00404FE1                 lea     ecx, ds:0[edx*4]
.text:00404FE8                 xor     edx, ecx
.text:00404FEA                 mov     ecx, [edi+208h]
.text:00404FF0                 add     edx, ecx
.text:00404FF2                 mov     ecx, [edi+8]
.text:00404FF5                 mov     eax, ecx
.text:00404FF7                 and     eax, 3FCh
.text:00404FFC                 mov     eax, [eax+ebp]
.text:00404FFF                 add     eax, edx
.text:00405001                 add     eax, esi
.text:00405003                 mov     [edi+8], eax
.text:00405006                 shr     eax, 8
.text:00405009                 and     eax, 3FCh
.text:0040500E                 mov     esi, [eax+ebp]
.text:00405011                 mov     eax, [esp+46Ch+var_448]
.text:00405015                 add     esi, ecx
.text:00405017                 mov     [eax+8], esi
.text:0040501A                 mov     ecx, edx
.text:0040501C                 shr     ecx, 10h
.text:0040501F                 xor     edx, ecx
.text:00405021                 mov     ecx, [edi+20Ch]
.text:00405027                 add     edx, ecx
.text:00405029                 mov     ecx, [edi+0Ch]
.text:0040502C                 mov     eax, ecx
.text:0040502E                 and     eax, 3FCh
.text:00405033                 mov     eax, [eax+ebp]
.text:00405036                 add     eax, edx
.text:00405038                 add     eax, esi
.text:0040503A                 mov     [edi+0Ch], eax
.text:0040503D                 shr     eax, 8
.text:00405040                 and     eax, 3FCh
.text:00405045                 mov     esi, [eax+ebp]
.text:00405048                 add     edi, 10h
.text:0040504B                 add     esi, ecx
.text:0040504D                 mov     ecx, [esp+46Ch+var_448]
.text:00405051                 mov     [ecx+0Ch], esi
.text:00405054                 add     ecx, 10h
.text:00405057                 cmp     edi, [esp+46Ch+var_454]
.text:0040505B                 mov     [esp+46Ch+var_448], ecx
.text:0040505F                 jb      loc_404F76
.text:00405065                 lea     eax, [ebp+400h]
.text:0040506B                 mov     [esp+46Ch+var_44C], eax
.text:0040506F
.text:0040506F loc_40506F:                             ; CODE XREF: sub_404AB0+6A8↓j
.text:0040506F                 mov     ecx, edx
.text:00405071                 shl     ecx, 0Dh
.text:00405074                 xor     edx, ecx
.text:00405076                 mov     ecx, [edi-200h]
.text:0040507C                 add     edx, ecx
.text:0040507E                 mov     ecx, [edi]
.text:00405080                 mov     eax, ecx
.text:00405082                 and     eax, 3FCh
.text:00405087                 mov     eax, [eax+ebp]
.text:0040508A                 add     eax, edx
.text:0040508C                 add     eax, esi
.text:0040508E                 mov     [edi], eax
.text:00405090                 shr     eax, 8
.text:00405093                 and     eax, 3FCh
.text:00405098                 mov     esi, [eax+ebp]
.text:0040509B                 add     esi, ecx
.text:0040509D                 mov     ecx, [esp+46Ch+var_448]
.text:004050A1                 mov     [ecx], esi
.text:004050A3                 mov     ecx, edx
.text:004050A5                 shr     ecx, 6
.text:004050A8                 xor     edx, ecx
.text:004050AA                 mov     ecx, [edi-1FCh]
.text:004050B0                 add     edx, ecx
.text:004050B2                 mov     ecx, [edi+4]
.text:004050B5                 mov     eax, ecx
.text:004050B7                 and     eax, 3FCh
.text:004050BC                 mov     eax, [eax+ebp]
.text:004050BF                 add     eax, edx
.text:004050C1                 add     eax, esi
.text:004050C3                 mov     [edi+4], eax
.text:004050C6                 shr     eax, 8
.text:004050C9                 and     eax, 3FCh
.text:004050CE                 mov     esi, [eax+ebp]
.text:004050D1                 mov     eax, [esp+46Ch+var_448]
.text:004050D5                 add     esi, ecx
.text:004050D7                 mov     [eax+4], esi
.text:004050DA                 lea     ecx, ds:0[edx*4]
.text:004050E1                 xor     edx, ecx
.text:004050E3                 mov     ecx, [edi-1F8h]
.text:004050E9                 add     edx, ecx
.text:004050EB                 mov     ecx, [edi+8]
.text:004050EE                 mov     eax, ecx
.text:004050F0                 and     eax, 3FCh
.text:004050F5                 mov     eax, [eax+ebp]
.text:004050F8                 add     eax, edx
.text:004050FA                 add     eax, esi
.text:004050FC                 mov     [edi+8], eax
.text:004050FF                 shr     eax, 8
.text:00405102                 and     eax, 3FCh
.text:00405107                 mov     esi, [eax+ebp]
.text:0040510A                 add     esi, ecx
.text:0040510C                 mov     ecx, [esp+46Ch+var_448]
.text:00405110                 mov     [ecx+8], esi
.text:00405113                 mov     ecx, edx
.text:00405115                 mov     eax, [edi-1F4h]
.text:0040511B                 shr     ecx, 10h
.text:0040511E                 xor     edx, ecx
.text:00405120                 mov     ecx, [edi+0Ch]
.text:00405123                 add     edx, eax
.text:00405125                 mov     eax, ecx
.text:00405127                 and     eax, 3FCh
.text:0040512C                 mov     eax, [eax+ebp]
.text:0040512F                 add     eax, edx
.text:00405131                 add     eax, esi
.text:00405133                 mov     [edi+0Ch], eax
.text:00405136                 shr     eax, 8
.text:00405139                 and     eax, 3FCh
.text:0040513E                 mov     esi, [eax+ebp]
.text:00405141                 add     edi, 10h
.text:00405144                 mov     eax, [esp+46Ch+var_448]
.text:00405148                 add     esi, ecx
.text:0040514A                 mov     [eax+0Ch], esi
.text:0040514D                 add     eax, 10h
.text:00405150                 cmp     edi, [esp+46Ch+var_44C]
.text:00405154                 mov     [esp+46Ch+var_448], eax
.text:00405158                 jb      loc_40506F
.text:0040515E                 mov     [ebp+420h], edx
.text:00405164                 mov     [ebp+424h], esi
.text:0040516A                 mov     ebp, 100h
.text:0040516F                 mov     [esp+46Ch+var_2C], ebp
.text:00405176
.text:00405176 loc_405176:                             ; CODE XREF: sub_404AB0+48A↑j
.text:00405176                 mov     esi, [esp+46Ch+var_2C]
.text:0040517D                 dec     esi
.text:0040517E                 mov     edx, [esp+esi*4+46Ch+var_42C]
.text:00405182                 mov     [esp+46Ch+var_2C], esi
.text:00405189
.text:00405189 loc_405189:                             ; CODE XREF: sub_404AB0+73F↓j
.text:00405189                 cmp     edx, [esp+46Ch+var_43C]
.text:0040518D                 jnb     short loc_4051A6
.text:0040518F
.text:0040518F loc_40518F:                             ; CODE XREF: sub_404AB0+472↑j
.text:0040518F                 dec     [esp+46Ch+var_43C]
.text:00405193                 mov     edx, [esp+46Ch+var_434]
.text:00405197                 mov     edi, [esp+46Ch+var_438]
.text:0040519B                 mov     ebp, [edx]
.text:0040519D                 mov     [edi], ebp
.text:0040519F                 add     edi, 4
.text:004051A2                 mov     [esp+46Ch+var_438], edi
.text:004051A6
.text:004051A6 loc_4051A6:                             ; CODE XREF: sub_404AB0+6DD↑j
.text:004051A6                 add     [esp+46Ch+var_434], 4
.text:004051AB                 mov     esi, [esp+46Ch+var_43C]
.text:004051AF                 test    esi, esi
.text:004051B1                 jnz     loc_404F1B
.text:004051B7                 jmp     loc_404BAB
.text:004051BC ; ---------------------------------------------------------------------------
.text:004051BC
.text:004051BC loc_4051BC:                             ; CODE XREF: sub_404AB0+47B↑j
.text:004051BC                 mov     eax, esi
.text:004051BE                 xor     edx, edx
.text:004051C0                 neg     eax
.text:004051C2                 div     esi
.text:004051C4                 mov     edi, edx
.text:004051C6                 lea     esi, [esi+0]
.text:004051C9                 lea     edi, [edi+0]
.text:004051D0
.text:004051D0 loc_4051D0:                             ; CODE XREF: sub_404AB0+739↓j
.text:004051D0                 mov     eax, [esp+46Ch+var_2C]
.text:004051D7                 test    eax, eax
.text:004051D9                 jz      short loc_4051F1
.text:004051DB
.text:004051DB loc_4051DB:                             ; CODE XREF: sub_404AB0+769↓j
.text:004051DB                 dec     eax
.text:004051DC                 mov     [esp+46Ch+var_2C], eax
.text:004051E3                 mov     eax, [esp+eax*4+46Ch+var_42C]
.text:004051E7                 cmp     eax, edi
.text:004051E9                 jb      short loc_4051D0
.text:004051EB                 xor     edx, edx
.text:004051ED                 div     esi
.text:004051EF                 jmp     short loc_405189
.text:004051F1 ; ---------------------------------------------------------------------------
.text:004051F1
.text:004051F1 loc_4051F1:                             ; CODE XREF: sub_404AB0+729↑j
.text:004051F1                 mov     ecx, [esp+46Ch+var_28]
.text:004051F8                 lea     eax, [esp+46Ch+var_42C]
.text:004051FC                 mov     [esp+46Ch+var_468], eax
.text:00405200                 mov     [esp+46Ch+var_46C], ecx
.text:00405203                 call    sub_405240
.text:00405208                 mov     edx, 100h
.text:0040520D                 mov     eax, 100h
.text:00405212                 mov     [esp+46Ch+var_2C], edx
.text:00405219                 jmp     short loc_4051DB
.text:00405219 ; ---------------------------------------------------------------------------
.text:0040521B                 align 10h
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: sub_404AB0+82↑j
.text:00405220                 neg     ebx
.text:00405222                 cmp     ebx, [esp+46Ch+var_43C]
.text:00405226                 jnb     short loc_405231
.text:00405228                 add     [esp+46Ch+var_430], ebx
.text:0040522C                 jmp     loc_404B87
.text:00405231 ; ---------------------------------------------------------------------------
.text:00405231
.text:00405231 loc_405231:                             ; CODE XREF: sub_404AB0+776↑j
.text:00405231                 mov     edi, [esp+46Ch+var_43C]
.text:00405235                 add     [esp+46Ch+var_430], edi
.text:00405239                 jmp     loc_404BAB
.text:00405239 sub_404AB0      endp
.text:00405239
.text:00405239 ; ---------------------------------------------------------------------------
.text:0040523E                 align 10h
.text:00405240
.text:00405240 ; =============== S U B R O U T I N E =======================================
.text:00405240
.text:00405240
.text:00405240 sub_405240      proc near               ; CODE XREF: sub_404AB0+458↑p
.text:00405240                                         ; sub_404AB0+753↑p
.text:00405240
.text:00405240 var_18          = dword ptr -18h
.text:00405240 var_14          = dword ptr -14h
.text:00405240 arg_0           = dword ptr  4
.text:00405240 arg_4           = dword ptr  8
.text:00405240
.text:00405240                 push    ebp
.text:00405241                 push    edi
.text:00405242                 push    esi
.text:00405243                 push    ebx
.text:00405244                 sub     esp, 8
.text:00405247                 mov     ebp, [esp+18h+arg_0]
.text:0040524B                 mov     edi, [esp+18h+arg_4]
.text:0040524F                 mov     ecx, [ebp+428h]
.text:00405255                 mov     esi, ebp
.text:00405257                 mov     ebx, [ebp+424h]
.text:0040525D                 mov     edx, [ebp+420h]
.text:00405263                 inc     ecx
.text:00405264                 mov     [ebp+428h], ecx
.text:0040526A                 add     ebx, ecx
.text:0040526C                 lea     ecx, [ebp+200h]
.text:00405272                 mov     [esp+18h+var_18], ecx
.text:00405275                 lea     esi, [esi+0]
.text:00405279                 lea     edi, [edi+0]
.text:00405280
.text:00405280 loc_405280:                             ; CODE XREF: sub_405240+114↓j
.text:00405280                 mov     ecx, edx
.text:00405282                 shl     ecx, 0Dh
.text:00405285                 xor     edx, ecx
.text:00405287                 mov     ecx, [esi+200h]
.text:0040528D                 add     edx, ecx
.text:0040528F                 mov     ecx, [esi]
.text:00405291                 mov     eax, ecx
.text:00405293                 and     eax, 3FCh
.text:00405298                 mov     eax, [eax+ebp]
.text:0040529B                 add     eax, edx
.text:0040529D                 add     eax, ebx
.text:0040529F                 mov     [esi], eax
.text:004052A1                 shr     eax, 8
.text:004052A4                 and     eax, 3FCh
.text:004052A9                 mov     ebx, [eax+ebp]
.text:004052AC                 add     ebx, ecx
.text:004052AE                 mov     ecx, edx
.text:004052B0                 mov     [edi], ebx
.text:004052B2                 shr     ecx, 6
.text:004052B5                 mov     eax, [esi+204h]
.text:004052BB                 xor     edx, ecx
.text:004052BD                 mov     ecx, [esi+4]
.text:004052C0                 add     edx, eax
.text:004052C2                 mov     eax, ecx
.text:004052C4                 and     eax, 3FCh
.text:004052C9                 mov     eax, [eax+ebp]
.text:004052CC                 add     eax, edx
.text:004052CE                 add     eax, ebx
.text:004052D0                 mov     [esi+4], eax
.text:004052D3                 shr     eax, 8
.text:004052D6                 and     eax, 3FCh
.text:004052DB                 mov     ebx, [eax+ebp]
.text:004052DE                 add     ebx, ecx
.text:004052E0                 lea     ecx, ds:0[edx*4]
.text:004052E7                 mov     [edi+4], ebx
.text:004052EA                 xor     edx, ecx
.text:004052EC                 mov     ecx, [esi+208h]
.text:004052F2                 add     edx, ecx
.text:004052F4                 mov     ecx, [esi+8]
.text:004052F7                 mov     eax, ecx
.text:004052F9                 and     eax, 3FCh
.text:004052FE                 mov     eax, [eax+ebp]
.text:00405301                 add     eax, edx
.text:00405303                 add     eax, ebx
.text:00405305                 mov     [esi+8], eax
.text:00405308                 shr     eax, 8
.text:0040530B                 and     eax, 3FCh
.text:00405310                 mov     ebx, [eax+ebp]
.text:00405313                 add     ebx, ecx
.text:00405315                 mov     ecx, edx
.text:00405317                 mov     [edi+8], ebx
.text:0040531A                 shr     ecx, 10h
.text:0040531D                 xor     edx, ecx
.text:0040531F                 mov     ecx, [esi+20Ch]
.text:00405325                 add     edx, ecx
.text:00405327                 mov     ecx, [esi+0Ch]
.text:0040532A                 mov     eax, ecx
.text:0040532C                 and     eax, 3FCh
.text:00405331                 mov     eax, [eax+ebp]
.text:00405334                 add     eax, edx
.text:00405336                 add     eax, ebx
.text:00405338                 mov     [esi+0Ch], eax
.text:0040533B                 shr     eax, 8
.text:0040533E                 and     eax, 3FCh
.text:00405343                 mov     ebx, [eax+ebp]
.text:00405346                 add     esi, 10h
.text:00405349                 add     ebx, ecx
.text:0040534B                 mov     [edi+0Ch], ebx
.text:0040534E                 add     edi, 10h
.text:00405351                 cmp     esi, [esp+18h+var_18]
.text:00405354                 jb      loc_405280
.text:0040535A                 lea     ecx, [ebp+400h]
.text:00405360                 mov     [esp+18h+var_14], ecx
.text:00405364                 lea     esi, [esi+0]
.text:0040536A                 lea     edi, [edi+0]
.text:00405370
.text:00405370 loc_405370:                             ; CODE XREF: sub_405240+205↓j
.text:00405370                 mov     ecx, edx
.text:00405372                 shl     ecx, 0Dh
.text:00405375                 xor     edx, ecx
.text:00405377                 mov     ecx, [esi-200h]
.text:0040537D                 add     edx, ecx
.text:0040537F                 mov     ecx, [esi]
.text:00405381                 mov     eax, ecx
.text:00405383                 and     eax, 3FCh
.text:00405388                 mov     eax, [eax+ebp]
.text:0040538B                 add     eax, edx
.text:0040538D                 add     eax, ebx
.text:0040538F                 mov     [esi], eax
.text:00405391                 shr     eax, 8
.text:00405394                 and     eax, 3FCh
.text:00405399                 mov     ebx, [eax+ebp]
.text:0040539C                 add     ebx, ecx
.text:0040539E                 mov     ecx, edx
.text:004053A0                 mov     [edi], ebx
.text:004053A2                 shr     ecx, 6
.text:004053A5                 xor     edx, ecx
.text:004053A7                 mov     ecx, [esi-1FCh]
.text:004053AD                 add     edx, ecx
.text:004053AF                 mov     ecx, [esi+4]
.text:004053B2                 mov     eax, ecx
.text:004053B4                 and     eax, 3FCh
.text:004053B9                 mov     eax, [eax+ebp]
.text:004053BC                 add     eax, edx
.text:004053BE                 add     eax, ebx
.text:004053C0                 mov     [esi+4], eax
.text:004053C3                 shr     eax, 8
.text:004053C6                 and     eax, 3FCh
.text:004053CB                 mov     ebx, [eax+ebp]
.text:004053CE                 add     ebx, ecx
.text:004053D0                 lea     ecx, ds:0[edx*4]
.text:004053D7                 mov     [edi+4], ebx
.text:004053DA                 xor     edx, ecx
.text:004053DC                 mov     ecx, [esi-1F8h]
.text:004053E2                 add     edx, ecx
.text:004053E4                 mov     ecx, [esi+8]
.text:004053E7                 mov     eax, ecx
.text:004053E9                 and     eax, 3FCh
.text:004053EE                 mov     eax, [eax+ebp]
.text:004053F1                 add     eax, edx
.text:004053F3                 add     eax, ebx
.text:004053F5                 mov     [esi+8], eax
.text:004053F8                 shr     eax, 8
.text:004053FB                 and     eax, 3FCh
.text:00405400                 mov     ebx, [eax+ebp]
.text:00405403                 add     ebx, ecx
.text:00405405                 mov     ecx, edx
.text:00405407                 mov     [edi+8], ebx
.text:0040540A                 shr     ecx, 10h
.text:0040540D                 xor     edx, ecx
.text:0040540F                 mov     ecx, [esi-1F4h]
.text:00405415                 add     edx, ecx
.text:00405417                 mov     ecx, [esi+0Ch]
.text:0040541A                 mov     eax, ecx
.text:0040541C                 and     eax, 3FCh
.text:00405421                 mov     eax, [eax+ebp]
.text:00405424                 add     eax, edx
.text:00405426                 add     eax, ebx
.text:00405428                 mov     [esi+0Ch], eax
.text:0040542B                 shr     eax, 8
.text:0040542E                 and     eax, 3FCh
.text:00405433                 mov     ebx, [eax+ebp]
.text:00405436                 add     esi, 10h
.text:00405439                 add     ebx, ecx
.text:0040543B                 mov     [edi+0Ch], ebx
.text:0040543E                 add     edi, 10h
.text:00405441                 cmp     esi, [esp+18h+var_14]
.text:00405445                 jb      loc_405370
.text:0040544B                 mov     [ebp+420h], edx
.text:00405451                 mov     [ebp+424h], ebx
.text:00405457                 add     esp, 8
.text:0040545A                 pop     ebx
.text:0040545B                 pop     esi
.text:0040545C                 pop     edi
.text:0040545D                 pop     ebp
.text:0040545E                 retn
.text:0040545E sub_405240      endp
.text:0040545E
.text:0040545E ; ---------------------------------------------------------------------------
.text:0040545F                 align 10h
.text:00405460 aLiteral        db 'literal',0          ; DATA XREF: .text:004054A0↓o
.text:00405468 aShell          db 'shell',0            ; DATA XREF: .text:004054A4↓o
.text:0040546E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004054A8↓o
.text:0040547B aC              db 'c',0                ; DATA XREF: .text:004054AC↓o
.text:0040547D aEscape         db 'escape',0           ; DATA XREF: .text:004054B0↓o
.text:00405484 aLocale         db 'locale',0           ; DATA XREF: .text:004054B4↓o
.text:0040548B aClocale        db 'clocale',0          ; DATA XREF: .text:004054B8↓o
.text:00405493                 align 10h
.text:004054A0                 dd offset aLiteral      ; "literal"
.text:004054A4                 dd offset aShell        ; "shell"
.text:004054A8                 dd offset aShellAlways  ; "shell-always"
.text:004054AC                 dd offset aC            ; "c"
.text:004054B0                 dd offset aEscape       ; "escape"
.text:004054B4                 dd offset aLocale       ; "locale"
.text:004054B8                 dd offset aClocale      ; "clocale"
.text:004054BC                 dd 2 dup(0)
.text:004054C4                 dd 1, 2, 3, 4, 5, 6
.text:004054DC asc_4054DC:                             ; DATA XREF: sub_4054F0+7E↓o
.text:004054DC                                         ; sub_4054F0+A39↓o ...
.text:004054DC                 text "UTF-16LE", '"',27h,'`'
.text:004054E2                 align 10h
.text:004054F0
.text:004054F0 ; =============== S U B R O U T I N E =======================================
.text:004054F0
.text:004054F0
.text:004054F0 ; int __cdecl sub_4054F0(int, int, char *Str, int, int, int)
.text:004054F0 sub_4054F0      proc near               ; CODE XREF: sub_4054F0+43A↓p
.text:004054F0                                         ; .text:004060B3↓p ...
.text:004054F0
.text:004054F0 C               = dword ptr -4Ch
.text:004054F0 Type            = dword ptr -48h
.text:004054F0 SizeInBytes     = dword ptr -44h
.text:004054F0 State           = dword ptr -40h
.text:004054F0 var_3C          = dword ptr -3Ch
.text:004054F0 var_38          = dword ptr -38h
.text:004054F0 var_34          = dword ptr -34h
.text:004054F0 var_30          = dword ptr -30h
.text:004054F0 var_29          = byte ptr -29h
.text:004054F0 var_28          = dword ptr -28h
.text:004054F0 var_22          = byte ptr -22h
.text:004054F0 var_21          = byte ptr -21h
.text:004054F0 var_20          = dword ptr -20h
.text:004054F0 var_1C          = dword ptr -1Ch
.text:004054F0 var_18          = mbstate_t ptr -18h
.text:004054F0 arg_0           = dword ptr  4
.text:004054F0 arg_4           = dword ptr  8
.text:004054F0 Str             = dword ptr  0Ch
.text:004054F0 arg_C           = dword ptr  10h
.text:004054F0 arg_10          = dword ptr  14h
.text:004054F0 arg_14          = dword ptr  18h
.text:004054F0
.text:004054F0                 push    ebp
.text:004054F1                 push    edi
.text:004054F2                 push    esi
.text:004054F3                 push    ebx
.text:004054F4                 sub     esp, 3Ch
.text:004054F7                 mov     edx, ds:__mb_cur_max
.text:004054FD                 mov     [esp+4Ch+var_34], 0
.text:00405505                 mov     [esp+4Ch+var_1C], 0
.text:0040550D                 cmp     dword ptr [edx], 1
.text:00405510                 mov     [esp+4Ch+var_20], 0
.text:00405518                 mov     [esp+4Ch+var_21], 0
.text:0040551D                 setz    [esp+4Ch+var_22]
.text:00405522                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00405527                 ja      short def_40552D ; jumptable 0040552D default case, cases 0,1
.text:00405529                 mov     edx, [esp+4Ch+arg_10]
.text:0040552D                 jmp     ds:jpt_40552D[edx*4] ; switch jump
.text:0040552D ; ---------------------------------------------------------------------------
.text:00405534 jpt_40552D      dd offset def_40552D    ; DATA XREF: sub_4054F0+3D↑r
.text:00405534                 dd offset def_40552D    ; jump table for switch statement
.text:00405534                 dd offset loc_405E75
.text:00405534                 dd offset loc_405550
.text:00405534                 dd offset loc_405E9B
.text:00405534                 dd offset loc_405EA5
.text:00405534                 dd offset loc_405EA5
.text:00405550 ; ---------------------------------------------------------------------------
.text:00405550
.text:00405550 loc_405550:                             ; CODE XREF: sub_4054F0+3D↑j
.text:00405550                                         ; DATA XREF: sub_4054F0:jpt_40552D↑o
.text:00405550                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040552D case 3
.text:00405554                 cmp     [esp+4Ch+var_34], eax
.text:00405558                 jnb     short loc_405561
.text:0040555A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040555E                 mov     byte ptr [ebx], 22h ; '"'
.text:00405561
.text:00405561 loc_405561:                             ; CODE XREF: sub_4054F0+68↑j
.text:00405561                 mov     [esp+4Ch+var_34], 1
.text:00405569                 mov     [esp+4Ch+var_21], 1
.text:0040556E                 mov     [esp+4Ch+var_1C], offset asc_4054DC ; "\"'`"
.text:00405576
.text:00405576 loc_405576:                             ; CODE XREF: sub_4054F0+9A6↓j
.text:00405576                 mov     [esp+4Ch+var_20], 1
.text:0040557E
.text:0040557E def_40552D:                             ; CODE XREF: sub_4054F0+37↑j
.text:0040557E                                         ; sub_4054F0+3D↑j ...
.text:0040557E                 xor     ebp, ebp        ; jumptable 0040552D default case, cases 0,1
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_4054F0+3DB↓j
.text:00405580                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405585                 jz      loc_405E67
.text:0040558B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040558F
.text:0040558F loc_40558F:                             ; CODE XREF: sub_4054F0+980↓j
.text:0040558F                 jz      loc_405DFE
.text:00405595                 cmp     [esp+4Ch+var_21], 0
.text:0040559A                 jz      short loc_4055E0
.text:0040559C                 mov     esi, [esp+4Ch+var_20]
.text:004055A0                 test    esi, esi
.text:004055A2                 jz      short loc_4055E0
.text:004055A4                 mov     ecx, [esp+4Ch+var_20]
.text:004055A8                 lea     edi, [ecx+ebp]
.text:004055AB                 cmp     edi, [esp+4Ch+arg_C]
.text:004055AF                 ja      short loc_4055E0
.text:004055B1                 cld
.text:004055B2                 mov     ebx, [esp+4Ch+Str]
.text:004055B6                 mov     edi, [esp+4Ch+var_1C]
.text:004055BA                 add     ebx, ebp
.text:004055BC                 mov     esi, ebx
.text:004055BE                 cmp     ecx, ecx
.text:004055C0                 repe cmpsb
.text:004055C2                 jnz     short loc_4055E0
.text:004055C4                 mov     edx, [esp+4Ch+arg_4]
.text:004055C8                 cmp     [esp+4Ch+var_34], edx
.text:004055CC                 jnb     short loc_4055DA
.text:004055CE                 mov     ecx, [esp+4Ch+arg_0]
.text:004055D2                 mov     eax, [esp+4Ch+var_34]
.text:004055D6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004055DA
.text:004055DA loc_4055DA:                             ; CODE XREF: sub_4054F0+DC↑j
.text:004055DA                 inc     [esp+4Ch+var_34]
.text:004055DE                 mov     esi, esi
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_4054F0+AA↑j
.text:004055E0                                         ; sub_4054F0+B2↑j ...
.text:004055E0                 mov     edi, [esp+4Ch+Str]
.text:004055E4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004055E9                 movzx   eax, bl
.text:004055EC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004055EF                 ja      def_4055F5      ; jumptable 004055F5 default case, cases 1-6,14-31,64
.text:004055F5                 jmp     ds:jpt_4055F5[eax*4] ; switch jump
.text:004055F5 ; ---------------------------------------------------------------------------
.text:004055FC jpt_4055F5      dd offset loc_4057F8, offset def_4055F5, offset def_4055F5
.text:004055FC                                         ; DATA XREF: sub_4054F0+105↑r
.text:004055FC                 dd offset def_4055F5, offset def_4055F5, offset def_4055F5 ; jump table for switch statement
.text:004055FC                 dd offset def_4055F5, offset loc_4058D0, offset loc_4058EE
.text:004055FC                 dd offset loc_4058F2, offset loc_405937, offset loc_40593B
.text:004055FC                 dd offset loc_40593F, offset loc_405943, offset def_4055F5
.text:004055FC                 dd offset def_4055F5, offset def_4055F5, offset def_4055F5
.text:004055FC                 dd offset def_4055F5, offset def_4055F5, offset def_4055F5
.text:004055FC                 dd offset def_4055F5, offset def_4055F5, offset def_4055F5
.text:004055FC                 dd offset def_4055F5, offset def_4055F5, offset def_4055F5
.text:004055FC                 dd offset def_4055F5, offset def_4055F5, offset def_4055F5
.text:004055FC                 dd offset def_4055F5, offset def_4055F5, offset loc_405DC8
.text:004055FC                 dd offset loc_405DC8, offset loc_405DC8, offset loc_405DEA
.text:004055FC                 dd offset loc_405DC8, offset def_4059F2, offset loc_405DC8
.text:004055FC                 dd offset loc_405947, offset loc_405DC8, offset loc_405DC8
.text:004055FC                 dd offset loc_405DC8, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset loc_405DC8
.text:004055FC                 dd offset loc_405DC8, offset loc_405DC8, offset loc_405DC8
.text:004055FC                 dd offset loc_4059AC, offset def_4055F5, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset loc_405DC8, offset loc_405DC1
.text:004055FC                 dd offset def_4059F2, offset loc_405DC8, offset def_4059F2
.text:004055FC                 dd offset loc_405DC8, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset def_4059F2, offset def_4059F2, offset def_4059F2
.text:004055FC                 dd offset loc_405DD8, offset loc_405DC8, offset loc_405DD8
.text:004055FC                 dd offset loc_405DEA
.text:004057F8 ; ---------------------------------------------------------------------------
.text:004057F8
.text:004057F8 loc_4057F8:                             ; CODE XREF: sub_4054F0+105↑j
.text:004057F8                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:004057F8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004055F5 case 0
.text:004057FD                 lea     eax, [ebp+1]
.text:00405800                 jz      loc_4058B0
.text:00405806                 mov     esi, [esp+4Ch+arg_4]
.text:0040580A                 cmp     [esp+4Ch+var_34], esi
.text:0040580E                 jnb     short loc_40581C
.text:00405810                 mov     eax, [esp+4Ch+arg_0]
.text:00405814                 mov     ebx, [esp+4Ch+var_34]
.text:00405818                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040581C
.text:0040581C loc_40581C:                             ; CODE XREF: sub_4054F0+31E↑j
.text:0040581C                 inc     [esp+4Ch+var_34]
.text:00405820                 mov     edx, [esp+4Ch+arg_4]
.text:00405824                 cmp     [esp+4Ch+var_34], edx
.text:00405828                 jnb     short loc_405836
.text:0040582A                 mov     edi, [esp+4Ch+arg_0]
.text:0040582E                 mov     ecx, [esp+4Ch+var_34]
.text:00405832                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00405836
.text:00405836 loc_405836:                             ; CODE XREF: sub_4054F0+338↑j
.text:00405836                 inc     [esp+4Ch+var_34]
.text:0040583A                 mov     esi, [esp+4Ch+arg_4]
.text:0040583E                 cmp     [esp+4Ch+var_34], esi
.text:00405842                 jnb     short loc_405850
.text:00405844                 mov     ebx, [esp+4Ch+arg_0]
.text:00405848                 mov     eax, [esp+4Ch+var_34]
.text:0040584C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00405850
.text:00405850 loc_405850:                             ; CODE XREF: sub_4054F0+352↑j
.text:00405850                 inc     [esp+4Ch+var_34]
.text:00405854                 mov     bl, 30h ; '0'
.text:00405856                 lea     esi, [esi+0]
.text:00405859                 lea     edi, [edi+0]
.text:00405860
.text:00405860 def_4059F2:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405860                                         ; sub_4054F0+463↓j ...
.text:00405860                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:00405860                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:00405865                 lea     eax, [ebp+1]
.text:00405868                 jz      short loc_4058B0
.text:0040586A                 mov     cl, bl
.text:0040586C                 mov     edi, [esp+4Ch+arg_14]
.text:00405870                 mov     esi, 1
.text:00405875                 shr     cl, 5
.text:00405878                 movzx   edx, cl
.text:0040587B                 mov     ecx, ebx
.text:0040587D                 and     ecx, 1Fh
.text:00405880                 shl     esi, cl
.text:00405882                 test    [edi+edx*4+4], esi
.text:00405886                 jz      short loc_4058A2
.text:00405888
.text:00405888 loc_405888:                             ; CODE XREF: sub_4054F0+3FC↓j
.text:00405888                 mov     edx, [esp+4Ch+arg_4]
.text:0040588C                 cmp     [esp+4Ch+var_34], edx
.text:00405890                 jnb     short loc_40589E
.text:00405892                 mov     edi, [esp+4Ch+arg_0]
.text:00405896                 mov     esi, [esp+4Ch+var_34]
.text:0040589A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040589E
.text:0040589E loc_40589E:                             ; CODE XREF: sub_4054F0+3A0↑j
.text:0040589E                 inc     [esp+4Ch+var_34]
.text:004058A2
.text:004058A2 loc_4058A2:                             ; CODE XREF: sub_4054F0+396↑j
.text:004058A2                 lea     eax, [ebp+1]
.text:004058A5                 lea     esi, [esi+0]
.text:004058A9                 lea     edi, [edi+0]
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_4054F0+310↑j
.text:004058B0                                         ; sub_4054F0+378↑j ...
.text:004058B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004058B4                 cmp     [esp+4Ch+var_34], ebp
.text:004058B8                 jnb     short loc_4058C5
.text:004058BA                 mov     edx, [esp+4Ch+arg_0]
.text:004058BE                 mov     ecx, [esp+4Ch+var_34]
.text:004058C2                 mov     [ecx+edx], bl
.text:004058C5
.text:004058C5 loc_4058C5:                             ; CODE XREF: sub_4054F0+3C8↑j
.text:004058C5                 inc     [esp+4Ch+var_34]
.text:004058C9                 mov     ebp, eax
.text:004058CB                 jmp     loc_405580
.text:004058D0 ; ---------------------------------------------------------------------------
.text:004058D0
.text:004058D0 loc_4058D0:                             ; CODE XREF: sub_4054F0+105↑j
.text:004058D0                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:004058D0                 mov     dl, 61h ; 'a'   ; jumptable 004055F5 case 7
.text:004058D2                 lea     esi, [esi+0]
.text:004058D9                 lea     edi, [edi+0]
.text:004058E0
.text:004058E0 loc_4058E0:                             ; CODE XREF: sub_4054F0+400↓j
.text:004058E0                                         ; sub_4054F0+409↓j ...
.text:004058E0                 cmp     [esp+4Ch+var_21], 0
.text:004058E5                 lea     eax, [ebp+1]
.text:004058E8                 jz      short loc_4058B0
.text:004058EA                 mov     bl, dl
.text:004058EC                 jmp     short loc_405888
.text:004058EE ; ---------------------------------------------------------------------------
.text:004058EE
.text:004058EE loc_4058EE:                             ; CODE XREF: sub_4054F0+105↑j
.text:004058EE                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:004058EE                 mov     dl, 62h ; 'b'   ; jumptable 004055F5 case 8
.text:004058F0                 jmp     short loc_4058E0
.text:004058F2 ; ---------------------------------------------------------------------------
.text:004058F2
.text:004058F2 loc_4058F2:                             ; CODE XREF: sub_4054F0+105↑j
.text:004058F2                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:004058F2                 mov     dl, 74h ; 't'   ; jumptable 004055F5 case 9
.text:004058F4
.text:004058F4 loc_4058F4:                             ; CODE XREF: sub_4054F0+449↓j
.text:004058F4                                         ; sub_4054F0+455↓j ...
.text:004058F4                 cmp     [esp+4Ch+arg_10], 1
.text:004058F9                 jnz     short loc_4058E0
.text:004058FB
.text:004058FB loc_4058FB:                             ; CODE XREF: sub_4054F0+45C↓j
.text:004058FB                                         ; sub_4054F0+4C1↓j ...
.text:004058FB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00405CC2 cases 91,92,94,96,124
.text:00405903                 mov     eax, [esp+4Ch+arg_14]
.text:00405907                 mov     edx, [esp+4Ch+arg_C]
.text:0040590B                 mov     ecx, [esp+4Ch+Str]
.text:0040590F                 mov     ebx, [esp+4Ch+arg_4]
.text:00405913                 mov     [esp+4Ch+var_38], eax ; int
.text:00405917                 mov     ebp, [esp+4Ch+arg_0]
.text:0040591B                 mov     [esp+4Ch+State], edx ; int
.text:0040591F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00405923                 mov     [esp+4Ch+Type], ebx ; int
.text:00405927                 mov     [esp+4Ch+C], ebp ; int
.text:0040592A                 call    sub_4054F0
.text:0040592F
.text:0040592F loc_40592F:                             ; CODE XREF: sub_4054F0+972↓j
.text:0040592F                 add     esp, 3Ch
.text:00405932                 pop     ebx
.text:00405933                 pop     esi
.text:00405934                 pop     edi
.text:00405935                 pop     ebp
.text:00405936                 retn
.text:00405937 ; ---------------------------------------------------------------------------
.text:00405937
.text:00405937 loc_405937:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405937                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:00405937                 mov     dl, 6Eh ; 'n'   ; jumptable 004055F5 case 10
.text:00405939                 jmp     short loc_4058F4
.text:0040593B ; ---------------------------------------------------------------------------
.text:0040593B
.text:0040593B loc_40593B:                             ; CODE XREF: sub_4054F0+105↑j
.text:0040593B                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:0040593B                 mov     dl, 76h ; 'v'   ; jumptable 004055F5 case 11
.text:0040593D                 jmp     short loc_4058E0
.text:0040593F ; ---------------------------------------------------------------------------
.text:0040593F
.text:0040593F loc_40593F:                             ; CODE XREF: sub_4054F0+105↑j
.text:0040593F                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:0040593F                 mov     dl, 66h ; 'f'   ; jumptable 004055F5 case 12
.text:00405941                 jmp     short loc_4058E0
.text:00405943 ; ---------------------------------------------------------------------------
.text:00405943
.text:00405943 loc_405943:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405943                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:00405943                 mov     dl, 72h ; 'r'   ; jumptable 004055F5 case 13
.text:00405945                 jmp     short loc_4058F4
.text:00405947 ; ---------------------------------------------------------------------------
.text:00405947
.text:00405947 loc_405947:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405947                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:00405947                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004055F5 case 39
.text:0040594C                 jz      short loc_4058FB ; jumptable 00405CC2 cases 91,92,94,96,124
.text:0040594E                 cmp     [esp+4Ch+arg_10], 2
.text:00405953                 jnz     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:00405953                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:00405959                 mov     edx, [esp+4Ch+arg_4]
.text:0040595D                 cmp     [esp+4Ch+var_34], edx
.text:00405961                 jnb     short loc_40596F
.text:00405963                 mov     ecx, [esp+4Ch+arg_0]
.text:00405967                 mov     edi, [esp+4Ch+var_34]
.text:0040596B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040596F
.text:0040596F loc_40596F:                             ; CODE XREF: sub_4054F0+471↑j
.text:0040596F                 inc     [esp+4Ch+var_34]
.text:00405973                 mov     eax, [esp+4Ch+arg_4]
.text:00405977                 cmp     [esp+4Ch+var_34], eax
.text:0040597B                 jnb     short loc_405989
.text:0040597D                 mov     esi, [esp+4Ch+arg_0]
.text:00405981                 mov     edx, [esp+4Ch+var_34]
.text:00405985                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00405989
.text:00405989 loc_405989:                             ; CODE XREF: sub_4054F0+48B↑j
.text:00405989                 inc     [esp+4Ch+var_34]
.text:0040598D                 mov     edi, [esp+4Ch+arg_4]
.text:00405991                 cmp     [esp+4Ch+var_34], edi
.text:00405995                 jnb     short loc_4059A3
.text:00405997                 mov     ecx, [esp+4Ch+arg_0]
.text:0040599B                 mov     eax, [esp+4Ch+var_34]
.text:0040599F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004059A3
.text:004059A3 loc_4059A3:                             ; CODE XREF: sub_4054F0+4A5↑j
.text:004059A3                                         ; sub_4054F0+5C4↓j ...
.text:004059A3                 inc     [esp+4Ch+var_34]
.text:004059A7                 jmp     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:004059A7                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:004059AC ; ---------------------------------------------------------------------------
.text:004059AC
.text:004059AC loc_4059AC:                             ; CODE XREF: sub_4054F0+105↑j
.text:004059AC                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:004059AC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004055F5 case 63
.text:004059B1                 jz      loc_4058FB      ; jumptable 00405CC2 cases 91,92,94,96,124
.text:004059B7                 cmp     [esp+4Ch+arg_10], 3
.text:004059BC                 jnz     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:004059BC                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:004059C2                 lea     edx, [ebp+2]
.text:004059C5                 cmp     edx, [esp+4Ch+arg_C]
.text:004059C9                 jnb     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:004059C9                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:004059CF                 mov     esi, [esp+4Ch+Str]
.text:004059D3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004059D8                 jnz     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:004059D8                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:004059DE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004059E3                 movsx   eax, cl
.text:004059E6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004059E9                 cmp     eax, 1Dh
.text:004059EC                 ja      def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:004059EC                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:004059F2                 jmp     ds:jpt_4059F2[eax*4] ; switch jump
.text:004059F2 ; ---------------------------------------------------------------------------
.text:004059F9                 align 4
.text:004059FC jpt_4059F2      dd offset loc_405A74    ; DATA XREF: sub_4054F0+502↑r
.text:004059FC                 dd offset def_4059F2    ; jump table for switch statement
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset loc_405A74
.text:004059FC                 dd offset loc_405A74
.text:004059FC                 dd offset loc_405A74
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset loc_405A74
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset loc_405A74
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset def_4059F2
.text:004059FC                 dd offset loc_405A74
.text:004059FC                 dd offset loc_405A74
.text:004059FC                 dd offset loc_405A74
.text:00405A74 ; ---------------------------------------------------------------------------
.text:00405A74
.text:00405A74 loc_405A74:                             ; CODE XREF: sub_4054F0+502↑j
.text:00405A74                                         ; DATA XREF: sub_4054F0:jpt_4059F2↑o
.text:00405A74                 mov     ebp, edx        ; jumptable 004059F2 cases 33,39-41,45,47,60-62
.text:00405A76                 mov     bl, cl
.text:00405A78                 mov     edx, [esp+4Ch+arg_4]
.text:00405A7C                 cmp     [esp+4Ch+var_34], edx
.text:00405A80                 jnb     short loc_405A8E
.text:00405A82                 mov     ecx, [esp+4Ch+arg_0]
.text:00405A86                 mov     edi, [esp+4Ch+var_34]
.text:00405A8A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00405A8E
.text:00405A8E loc_405A8E:                             ; CODE XREF: sub_4054F0+590↑j
.text:00405A8E                 inc     [esp+4Ch+var_34]
.text:00405A92                 mov     eax, [esp+4Ch+arg_4]
.text:00405A96                 cmp     [esp+4Ch+var_34], eax
.text:00405A9A                 jnb     short loc_405AA8
.text:00405A9C                 mov     edx, [esp+4Ch+arg_0]
.text:00405AA0                 mov     esi, [esp+4Ch+var_34]
.text:00405AA4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00405AA8
.text:00405AA8 loc_405AA8:                             ; CODE XREF: sub_4054F0+5AA↑j
.text:00405AA8                 inc     [esp+4Ch+var_34]
.text:00405AAC                 mov     edi, [esp+4Ch+arg_4]
.text:00405AB0                 cmp     [esp+4Ch+var_34], edi
.text:00405AB4                 jnb     loc_4059A3
.text:00405ABA                 mov     eax, [esp+4Ch+arg_0]
.text:00405ABE                 mov     ecx, [esp+4Ch+var_34]
.text:00405AC2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00405AC6                 jmp     loc_4059A3
.text:00405AC6 ; ---------------------------------------------------------------------------
.text:00405ACB                 align 10h
.text:00405AD0
.text:00405AD0 def_4055F5:                             ; CODE XREF: sub_4054F0+FF↑j
.text:00405AD0                                         ; sub_4054F0+105↑j
.text:00405AD0                                         ; DATA XREF: ...
.text:00405AD0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004055F5 default case, cases 1-6,14-31,64
.text:00405AD5                 jz      loc_405C00
.text:00405ADB                 mov     [esp+4Ch+var_28], 1
.text:00405AE3                 mov     esi, ds:__mb_cur_max
.text:00405AE9                 movzx   edx, bl
.text:00405AEC                 cmp     dword ptr [esi], 1
.text:00405AEF                 jz      loc_405BE4
.text:00405AF5                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405AFD                 mov     [esp+4Ch+C], edx ; C
.text:00405B00                 call    _isctype
.text:00405B05
.text:00405B05 loc_405B05:                             ; CODE XREF: sub_4054F0+705↓j
.text:00405B05                 test    eax, eax
.text:00405B07                 setnz   [esp+4Ch+var_29]
.text:00405B0C
.text:00405B0C loc_405B0C:                             ; CODE XREF: sub_4054F0+7A5↓j
.text:00405B0C                 cmp     [esp+4Ch+var_21], 0
.text:00405B11                 lea     eax, [ebp+1]
.text:00405B14                 jz      loc_4058B0
.text:00405B1A                 cmp     [esp+4Ch+var_29], 0
.text:00405B1F                 jnz     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:00405B1F                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:00405B25
.text:00405B25 loc_405B25:                             ; CODE XREF: sub_4054F0+7AB↓j
.text:00405B25                 mov     eax, [esp+4Ch+var_28]
.text:00405B29                 lea     edx, [eax+ebp]
.text:00405B2C                 lea     esi, [esi+0]
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_4054F0+6EF↓j
.text:00405B30                 cmp     [esp+4Ch+var_21], 0
.text:00405B35                 jz      short loc_405BB0
.text:00405B37                 cmp     [esp+4Ch+var_29], 0
.text:00405B3C                 jnz     short loc_405BB0
.text:00405B3E                 mov     edi, [esp+4Ch+arg_4]
.text:00405B42                 cmp     [esp+4Ch+var_34], edi
.text:00405B46                 jnb     short loc_405B54
.text:00405B48                 mov     esi, [esp+4Ch+arg_0]
.text:00405B4C                 mov     eax, [esp+4Ch+var_34]
.text:00405B50                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00405B54
.text:00405B54 loc_405B54:                             ; CODE XREF: sub_4054F0+656↑j
.text:00405B54                 inc     [esp+4Ch+var_34]
.text:00405B58                 mov     ecx, [esp+4Ch+arg_4]
.text:00405B5C                 cmp     [esp+4Ch+var_34], ecx
.text:00405B60                 jnb     short loc_405B75
.text:00405B62                 mov     cl, bl
.text:00405B64                 mov     esi, [esp+4Ch+arg_0]
.text:00405B68                 mov     edi, [esp+4Ch+var_34]
.text:00405B6C                 shr     cl, 6
.text:00405B6F                 add     cl, 30h ; '0'
.text:00405B72                 mov     [edi+esi], cl
.text:00405B75
.text:00405B75 loc_405B75:                             ; CODE XREF: sub_4054F0+670↑j
.text:00405B75                 inc     [esp+4Ch+var_34]
.text:00405B79                 mov     edi, [esp+4Ch+arg_4]
.text:00405B7D                 cmp     [esp+4Ch+var_34], edi
.text:00405B81                 jnb     short loc_405B99
.text:00405B83                 mov     cl, bl
.text:00405B85                 mov     esi, [esp+4Ch+arg_0]
.text:00405B89                 shr     cl, 3
.text:00405B8C                 mov     edi, [esp+4Ch+var_34]
.text:00405B90                 and     cl, 7
.text:00405B93                 add     cl, 30h ; '0'
.text:00405B96                 mov     [edi+esi], cl
.text:00405B99
.text:00405B99 loc_405B99:                             ; CODE XREF: sub_4054F0+691↑j
.text:00405B99                 inc     [esp+4Ch+var_34]
.text:00405B9D                 and     bl, 7
.text:00405BA0                 add     bl, 30h ; '0'
.text:00405BA3                 lea     esi, [esi+0]
.text:00405BA9                 lea     edi, [edi+0]
.text:00405BB0
.text:00405BB0 loc_405BB0:                             ; CODE XREF: sub_4054F0+645↑j
.text:00405BB0                                         ; sub_4054F0+64C↑j
.text:00405BB0                 lea     eax, [ebp+1]
.text:00405BB3                 cmp     edx, eax
.text:00405BB5                 jbe     loc_4058B0
.text:00405BBB                 mov     ebp, [esp+4Ch+arg_4]
.text:00405BBF                 cmp     [esp+4Ch+var_34], ebp
.text:00405BC3                 jnb     short loc_405BD0
.text:00405BC5                 mov     ecx, [esp+4Ch+arg_0]
.text:00405BC9                 mov     edi, [esp+4Ch+var_34]
.text:00405BCD                 mov     [edi+ecx], bl
.text:00405BD0
.text:00405BD0 loc_405BD0:                             ; CODE XREF: sub_4054F0+6D3↑j
.text:00405BD0                 inc     [esp+4Ch+var_34]
.text:00405BD4                 mov     ebp, eax
.text:00405BD6                 mov     eax, [esp+4Ch+Str]
.text:00405BDA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00405BDF                 jmp     loc_405B30
.text:00405BE4 ; ---------------------------------------------------------------------------
.text:00405BE4
.text:00405BE4 loc_405BE4:                             ; CODE XREF: sub_4054F0+5FF↑j
.text:00405BE4                 mov     ecx, ds:_pctype
.text:00405BEA                 mov     edi, [ecx]
.text:00405BEC                 movzx   eax, word ptr [edi+edx*2]
.text:00405BF0                 and     eax, 157h
.text:00405BF5                 jmp     loc_405B05
.text:00405BF5 ; ---------------------------------------------------------------------------
.text:00405BFA                 align 10h
.text:00405C00
.text:00405C00 loc_405C00:                             ; CODE XREF: sub_4054F0+5E5↑j
.text:00405C00                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00405C05                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00405C0D                 mov     [esp+4Ch+var_28], 0
.text:00405C15                 mov     [esp+4Ch+var_29], 1
.text:00405C1A                 jz      loc_405DAC
.text:00405C20
.text:00405C20 loc_405C20:                             ; CODE XREF: sub_4054F0+8CC↓j
.text:00405C20                 mov     ecx, [esp+4Ch+arg_C]
.text:00405C24                 lea     edx, [esp+4Ch+var_18]
.text:00405C28                 mov     edi, [esp+4Ch+Str]
.text:00405C2C                 mov     [esp+4Ch+State], edx ; State
.text:00405C30                 lea     esi, [esp+4Ch+var_18._State]
.text:00405C34                 sub     ecx, ebp
.text:00405C36                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00405C3A                 add     edi, ebp
.text:00405C3C                 mov     [esp+4Ch+var_30], edi
.text:00405C40                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00405C44                 mov     [esp+4Ch+C], esi ; DstCh
.text:00405C47                 call    mbrtowc
.text:00405C4C                 test    eax, eax
.text:00405C4E                 mov     edi, eax
.text:00405C50                 jz      short loc_405C90
.text:00405C52                 cmp     eax, 0FFFFFFFFh
.text:00405C55                 jz      loc_405DA2
.text:00405C5B                 cmp     eax, 0FFFFFFFEh
.text:00405C5E                 jz      loc_405D62
.text:00405C64                 cmp     [esp+4Ch+arg_10], 1
.text:00405C69                 jz      short loc_405CA0
.text:00405C6B
.text:00405C6B loc_405C6B:                             ; CODE XREF: sub_4054F0+7B9↓j
.text:00405C6B                                         ; sub_4054F0+86D↓j
.text:00405C6B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00405C70                 mov     [esp+4Ch+Type], 157h ; Type
.text:00405C78                 mov     [esp+4Ch+C], ecx ; C
.text:00405C7B                 call    iswctype
.text:00405C80                 test    eax, eax
.text:00405C82                 jnz     short loc_405C89
.text:00405C84                 mov     [esp+4Ch+var_29], 0
.text:00405C89
.text:00405C89 loc_405C89:                             ; CODE XREF: sub_4054F0+792↑j
.text:00405C89                 mov     [esp+4Ch+var_28], edi
.text:00405C8D                 lea     esi, [esi+0]
.text:00405C90
.text:00405C90 loc_405C90:                             ; CODE XREF: sub_4054F0+760↑j
.text:00405C90                                         ; sub_4054F0+87B↓j ...
.text:00405C90                 cmp     [esp+4Ch+var_28], 1
.text:00405C95                 jbe     loc_405B0C
.text:00405C9B                 jmp     loc_405B25
.text:00405CA0 ; ---------------------------------------------------------------------------
.text:00405CA0
.text:00405CA0 loc_405CA0:                             ; CODE XREF: sub_4054F0+779↑j
.text:00405CA0                 cmp     [esp+4Ch+arg_10], eax
.text:00405CA4                 mov     edx, 1
.text:00405CA9                 jnb     short loc_405C6B
.text:00405CAB
.text:00405CAB loc_405CAB:                             ; CODE XREF: sub_4054F0+867↓j
.text:00405CAB                 mov     ecx, [esp+4Ch+Str]
.text:00405CAF                 lea     esi, [edx+ebp]
.text:00405CB2                 movsx   eax, byte ptr [esi+ecx]
.text:00405CB6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00405CB9                 cmp     eax, 21h
.text:00405CBC                 ja      def_405CC2      ; jumptable 00405CC2 default case, cases 93,95,97-123
.text:00405CC2                 jmp     ds:jpt_405CC2[eax*4] ; switch jump
.text:00405CC2 ; ---------------------------------------------------------------------------
.text:00405CC9                 align 4
.text:00405CCC jpt_405CC2      dd offset loc_4058FB    ; DATA XREF: sub_4054F0+7D2↑r
.text:00405CCC                 dd offset loc_4058FB    ; jump table for switch statement
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset loc_4058FB
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset loc_4058FB
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset def_405CC2
.text:00405CCC                 dd offset loc_4058FB
.text:00405D54 ; ---------------------------------------------------------------------------
.text:00405D54
.text:00405D54 def_405CC2:                             ; CODE XREF: sub_4054F0+7CC↑j
.text:00405D54                                         ; sub_4054F0+7D2↑j
.text:00405D54                                         ; DATA XREF: ...
.text:00405D54                 inc     edx             ; jumptable 00405CC2 default case, cases 93,95,97-123
.text:00405D55                 cmp     edx, edi
.text:00405D57                 jb      loc_405CAB
.text:00405D5D                 jmp     loc_405C6B
.text:00405D62 ; ---------------------------------------------------------------------------
.text:00405D62
.text:00405D62 loc_405D62:                             ; CODE XREF: sub_4054F0+76E↑j
.text:00405D62                 cmp     ebp, [esp+4Ch+arg_C]
.text:00405D66                 mov     [esp+4Ch+var_29], 0
.text:00405D6B                 jnb     loc_405C90
.text:00405D71                 mov     eax, [esp+4Ch+var_30]
.text:00405D75                 cmp     byte ptr [eax], 0
.text:00405D78                 jz      loc_405C90
.text:00405D7E
.text:00405D7E loc_405D7E:                             ; CODE XREF: sub_4054F0+8AB↓j
.text:00405D7E                 inc     [esp+4Ch+var_28]
.text:00405D82                 mov     esi, [esp+4Ch+var_28]
.text:00405D86                 lea     eax, [esi+ebp]
.text:00405D89                 cmp     eax, [esp+4Ch+arg_C]
.text:00405D8D                 jnb     loc_405C90
.text:00405D93                 mov     edi, [esp+4Ch+Str]
.text:00405D97                 cmp     byte ptr [eax+edi], 0
.text:00405D9B                 jnz     short loc_405D7E
.text:00405D9D                 jmp     loc_405C90
.text:00405DA2 ; ---------------------------------------------------------------------------
.text:00405DA2
.text:00405DA2 loc_405DA2:                             ; CODE XREF: sub_4054F0+765↑j
.text:00405DA2                 mov     [esp+4Ch+var_29], 0
.text:00405DA7                 jmp     loc_405C90
.text:00405DAC ; ---------------------------------------------------------------------------
.text:00405DAC
.text:00405DAC loc_405DAC:                             ; CODE XREF: sub_4054F0+72A↑j
.text:00405DAC                 mov     edx, [esp+4Ch+Str]
.text:00405DB0                 mov     [esp+4Ch+C], edx ; Str
.text:00405DB3                 call    strlen
.text:00405DB8                 mov     [esp+4Ch+arg_C], eax
.text:00405DBC                 jmp     loc_405C20
.text:00405DC1 ; ---------------------------------------------------------------------------
.text:00405DC1
.text:00405DC1 loc_405DC1:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405DC1                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:00405DC1                 mov     dl, bl          ; jumptable 004055F5 case 92
.text:00405DC3                 jmp     loc_4058F4
.text:00405DC8 ; ---------------------------------------------------------------------------
.text:00405DC8
.text:00405DC8 loc_405DC8:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405DC8                                         ; sub_4054F0+902↓j
.text:00405DC8                                         ; DATA XREF: ...
.text:00405DC8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004055F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405DCD                 jnz     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:00405DCD                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:00405DD3                 jmp     loc_4058FB      ; jumptable 00405CC2 cases 91,92,94,96,124
.text:00405DD8 ; ---------------------------------------------------------------------------
.text:00405DD8
.text:00405DD8 loc_405DD8:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405DD8                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:00405DD8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004055F5 cases 123,125
.text:00405DDD                 jz      short loc_405DF4
.text:00405DDF                 cmp     [esp+4Ch+arg_C], 1
.text:00405DE4
.text:00405DE4 loc_405DE4:                             ; CODE XREF: sub_4054F0+90C↓j
.text:00405DE4                 jnz     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:00405DE4                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:00405DEA
.text:00405DEA loc_405DEA:                             ; CODE XREF: sub_4054F0+105↑j
.text:00405DEA                                         ; DATA XREF: sub_4054F0:jpt_4055F5↑o
.text:00405DEA                 test    ebp, ebp        ; jumptable 004055F5 cases 35,126
.text:00405DEC                 jnz     def_4059F2      ; jumptable 004055F5 cases 37,43-58,65-90,93,95,97-122
.text:00405DEC                                         ; jumptable 004059F2 default case, cases 34-38,42-44,46,48-59
.text:00405DF2                 jmp     short loc_405DC8 ; jumptable 004055F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00405DF4 ; ---------------------------------------------------------------------------
.text:00405DF4
.text:00405DF4 loc_405DF4:                             ; CODE XREF: sub_4054F0+8ED↑j
.text:00405DF4                 mov     esi, [esp+4Ch+Str]
.text:00405DF8                 cmp     byte ptr [esi+1], 0
.text:00405DFC                 jmp     short loc_405DE4
.text:00405DFE ; ---------------------------------------------------------------------------
.text:00405DFE
.text:00405DFE loc_405DFE:                             ; CODE XREF: sub_4054F0:loc_40558F↑j
.text:00405DFE                 test    ebp, ebp
.text:00405E00                 jnz     short loc_405E0D
.text:00405E02                 cmp     [esp+4Ch+arg_10], 1
.text:00405E07                 jz      loc_4058FB      ; jumptable 00405CC2 cases 91,92,94,96,124
.text:00405E0D
.text:00405E0D loc_405E0D:                             ; CODE XREF: sub_4054F0+910↑j
.text:00405E0D                 mov     esi, [esp+4Ch+var_1C]
.text:00405E11                 test    esi, esi
.text:00405E13                 jz      short loc_405E48
.text:00405E15                 mov     edi, [esp+4Ch+var_1C]
.text:00405E19                 movzx   eax, byte ptr [edi]
.text:00405E1C                 test    al, al
.text:00405E1E                 jz      short loc_405E48
.text:00405E20
.text:00405E20 loc_405E20:                             ; CODE XREF: sub_4054F0+956↓j
.text:00405E20                 mov     ebp, [esp+4Ch+arg_4]
.text:00405E24                 cmp     [esp+4Ch+var_34], ebp
.text:00405E28                 jnb     short loc_405E35
.text:00405E2A                 mov     ecx, [esp+4Ch+arg_0]
.text:00405E2E                 mov     ebx, [esp+4Ch+var_34]
.text:00405E32                 mov     [ebx+ecx], al
.text:00405E35
.text:00405E35 loc_405E35:                             ; CODE XREF: sub_4054F0+938↑j
.text:00405E35                 inc     [esp+4Ch+var_1C]
.text:00405E39                 inc     [esp+4Ch+var_34]
.text:00405E3D                 mov     edx, [esp+4Ch+var_1C]
.text:00405E41                 movzx   eax, byte ptr [edx]
.text:00405E44                 test    al, al
.text:00405E46                 jnz     short loc_405E20
.text:00405E48
.text:00405E48 loc_405E48:                             ; CODE XREF: sub_4054F0+923↑j
.text:00405E48                                         ; sub_4054F0+92E↑j
.text:00405E48                 mov     eax, [esp+4Ch+arg_4]
.text:00405E4C                 cmp     [esp+4Ch+var_34], eax
.text:00405E50                 jnb     short loc_405E5E
.text:00405E52                 mov     edi, [esp+4Ch+arg_0]
.text:00405E56                 mov     esi, [esp+4Ch+var_34]
.text:00405E5A                 mov     byte ptr [esi+edi], 0
.text:00405E5E
.text:00405E5E loc_405E5E:                             ; CODE XREF: sub_4054F0+960↑j
.text:00405E5E                 mov     eax, [esp+4Ch+var_34]
.text:00405E62                 jmp     loc_40592F
.text:00405E67 ; ---------------------------------------------------------------------------
.text:00405E67
.text:00405E67 loc_405E67:                             ; CODE XREF: sub_4054F0+95↑j
.text:00405E67                 mov     ebx, [esp+4Ch+Str]
.text:00405E6B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00405E70                 jmp     loc_40558F
.text:00405E75 ; ---------------------------------------------------------------------------
.text:00405E75
.text:00405E75 loc_405E75:                             ; CODE XREF: sub_4054F0+3D↑j
.text:00405E75                                         ; DATA XREF: sub_4054F0:jpt_40552D↑o
.text:00405E75                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040552D case 2
.text:00405E79                 cmp     [esp+4Ch+var_34], edx
.text:00405E7D                 jnb     short loc_405E86
.text:00405E7F                 mov     ecx, [esp+4Ch+arg_0]
.text:00405E83                 mov     byte ptr [ecx], 27h ; '''
.text:00405E86
.text:00405E86 loc_405E86:                             ; CODE XREF: sub_4054F0+98D↑j
.text:00405E86                 mov     [esp+4Ch+var_34], 1
.text:00405E8E                 mov     [esp+4Ch+var_1C], 4054DEh
.text:00405E96                 jmp     loc_405576
.text:00405E9B ; ---------------------------------------------------------------------------
.text:00405E9B
.text:00405E9B loc_405E9B:                             ; CODE XREF: sub_4054F0+3D↑j
.text:00405E9B                                         ; DATA XREF: sub_4054F0:jpt_40552D↑o
.text:00405E9B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040552D case 4
.text:00405EA0                 jmp     def_40552D      ; jumptable 0040552D default case, cases 0,1
.text:00405EA5 ; ---------------------------------------------------------------------------
.text:00405EA5
.text:00405EA5 loc_405EA5:                             ; CODE XREF: sub_4054F0+3D↑j
.text:00405EA5                                         ; DATA XREF: sub_4054F0:jpt_40552D↑o
.text:00405EA5                 mov     [esp+4Ch+C], 4054E0h ; jumptable 0040552D cases 5,6
.text:00405EAC                 call    ds:libintl_gettext
.text:00405EB2                 cmp     eax, 4054E0h
.text:00405EB7                 mov     edi, eax
.text:00405EB9                 jz      short loc_405F30
.text:00405EBB
.text:00405EBB loc_405EBB:                             ; CODE XREF: sub_4054F0+A45↓j
.text:00405EBB                                         ; sub_4054F0+A4C↓j
.text:00405EBB                 mov     [esp+4Ch+C], 4054DEh
.text:00405EC2                 call    ds:libintl_gettext
.text:00405EC8                 cmp     eax, 4054DEh
.text:00405ECD                 mov     edx, eax
.text:00405ECF                 jz      short loc_405F22
.text:00405ED1
.text:00405ED1 loc_405ED1:                             ; CODE XREF: sub_4054F0+A37↓j
.text:00405ED1                                         ; sub_4054F0+A3E↓j
.text:00405ED1                 mov     [esp+4Ch+var_1C], edi
.text:00405ED5                 cmp     byte ptr [edi], 0
.text:00405ED8                 jz      short loc_405F08
.text:00405EDA
.text:00405EDA loc_405EDA:                             ; CODE XREF: sub_4054F0+A16↓j
.text:00405EDA                 mov     ecx, [esp+4Ch+arg_4]
.text:00405EDE                 cmp     [esp+4Ch+var_34], ecx
.text:00405EE2                 jnb     short loc_405EF7
.text:00405EE4                 mov     ebp, [esp+4Ch+var_1C]
.text:00405EE8                 mov     edi, [esp+4Ch+arg_0]
.text:00405EEC                 mov     esi, [esp+4Ch+var_34]
.text:00405EF0                 movzx   ebx, byte ptr [ebp+0]
.text:00405EF4                 mov     [esi+edi], bl
.text:00405EF7
.text:00405EF7 loc_405EF7:                             ; CODE XREF: sub_4054F0+9F2↑j
.text:00405EF7                 inc     [esp+4Ch+var_1C]
.text:00405EFB                 inc     [esp+4Ch+var_34]
.text:00405EFF                 mov     eax, [esp+4Ch+var_1C]
.text:00405F03                 cmp     byte ptr [eax], 0
.text:00405F06                 jnz     short loc_405EDA
.text:00405F08
.text:00405F08 loc_405F08:                             ; CODE XREF: sub_4054F0+9E8↑j
.text:00405F08                 mov     [esp+4Ch+var_21], 1
.text:00405F0D                 mov     [esp+4Ch+var_1C], edx
.text:00405F11                 mov     [esp+4Ch+C], edx ; Str
.text:00405F14                 call    strlen
.text:00405F19                 mov     [esp+4Ch+var_20], eax
.text:00405F1D                 jmp     def_40552D      ; jumptable 0040552D default case, cases 0,1
.text:00405F22 ; ---------------------------------------------------------------------------
.text:00405F22
.text:00405F22 loc_405F22:                             ; CODE XREF: sub_4054F0+9DF↑j
.text:00405F22                 cmp     [esp+4Ch+arg_10], 6
.text:00405F27                 jnz     short loc_405ED1
.text:00405F29                 mov     edx, offset asc_4054DC ; "\"'`"
.text:00405F2E                 jmp     short loc_405ED1
.text:00405F30 ; ---------------------------------------------------------------------------
.text:00405F30
.text:00405F30 loc_405F30:                             ; CODE XREF: sub_4054F0+9C9↑j
.text:00405F30                 cmp     [esp+4Ch+arg_10], 6
.text:00405F35                 jnz     short loc_405EBB
.text:00405F37                 mov     edi, offset asc_4054DC ; "\"'`"
.text:00405F3C                 jmp     loc_405EBB
.text:00405F3C sub_4054F0      endp
.text:00405F3C
.text:00405F41 ; ---------------------------------------------------------------------------
.text:00405F41                 jmp     short loc_405F50
.text:00405F41 ; ---------------------------------------------------------------------------
.text:00405F43                 align 10h
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: .text:00405F41↑j
.text:00405F50                 sub     esp, 0Ch
.text:00405F53                 mov     [esp+4], ebx
.text:00405F57                 mov     [esp+8], esi
.text:00405F5B                 call    _errno
.text:00405F60                 mov     esi, [eax]
.text:00405F62                 mov     dword ptr [esp], 24h ; '$'
.text:00405F69                 call    sub_408EA0
.text:00405F6E                 mov     edx, [esp+10h]
.text:00405F72                 mov     ebx, eax
.text:00405F74                 test    edx, edx
.text:00405F76                 jz      short loc_405FC1
.text:00405F78
.text:00405F78 loc_405F78:                             ; CODE XREF: .text:00405FC6↓j
.text:00405F78                 mov     ecx, [edx]
.text:00405F7A                 mov     [ebx], ecx
.text:00405F7C                 mov     ecx, [edx+4]
.text:00405F7F                 mov     [ebx+4], ecx
.text:00405F82                 mov     ecx, [edx+8]
.text:00405F85                 mov     [ebx+8], ecx
.text:00405F88                 mov     ecx, [edx+0Ch]
.text:00405F8B                 mov     [ebx+0Ch], ecx
.text:00405F8E                 mov     ecx, [edx+10h]
.text:00405F91                 mov     [ebx+10h], ecx
.text:00405F94                 mov     ecx, [edx+14h]
.text:00405F97                 mov     [ebx+14h], ecx
.text:00405F9A                 mov     ecx, [edx+18h]
.text:00405F9D                 mov     [ebx+18h], ecx
.text:00405FA0                 mov     ecx, [edx+1Ch]
.text:00405FA3                 mov     [ebx+1Ch], ecx
.text:00405FA6                 mov     ecx, [edx+20h]
.text:00405FA9                 mov     [ebx+20h], ecx
.text:00405FAC                 call    _errno
.text:00405FB1                 mov     [eax], esi
.text:00405FB3                 mov     esi, [esp+8]
.text:00405FB7                 mov     eax, ebx
.text:00405FB9                 mov     ebx, [esp+4]
.text:00405FBD                 add     esp, 0Ch
.text:00405FC0                 retn
.text:00405FC1 ; ---------------------------------------------------------------------------
.text:00405FC1
.text:00405FC1 loc_405FC1:                             ; CODE XREF: .text:00405F76↑j
.text:00405FC1                 mov     edx, offset dword_415140
.text:00405FC6                 jmp     short loc_405F78
.text:00405FC6 ; ---------------------------------------------------------------------------
.text:00405FC8                 align 10h
.text:00405FD0                 mov     eax, [esp+4]
.text:00405FD4                 test    eax, eax
.text:00405FD6                 jz      short loc_405FE0
.text:00405FD8
.text:00405FD8 loc_405FD8:                             ; CODE XREF: .text:00405FE5↓j
.text:00405FD8                 mov     eax, [eax]
.text:00405FDA                 retn
.text:00405FDA ; ---------------------------------------------------------------------------
.text:00405FDB                 align 10h
.text:00405FE0
.text:00405FE0 loc_405FE0:                             ; CODE XREF: .text:00405FD6↑j
.text:00405FE0                 mov     eax, offset dword_415140
.text:00405FE5                 jmp     short loc_405FD8
.text:00405FE5 ; ---------------------------------------------------------------------------
.text:00405FE7                 align 10h
.text:00405FF0                 mov     edx, [esp+4]
.text:00405FF4                 test    edx, edx
.text:00405FF6                 jz      short loc_406000
.text:00405FF8
.text:00405FF8 loc_405FF8:                             ; CODE XREF: .text:00406005↓j
.text:00405FF8                 mov     ecx, [esp+8]
.text:00405FFC                 mov     [edx], ecx
.text:00405FFE                 retn
.text:00405FFE ; ---------------------------------------------------------------------------
.text:00405FFF                 align 10h
.text:00406000
.text:00406000 loc_406000:                             ; CODE XREF: .text:00405FF6↑j
.text:00406000                 mov     edx, offset dword_415140
.text:00406005                 jmp     short loc_405FF8
.text:00406005 ; ---------------------------------------------------------------------------
.text:00406007                 align 10h
.text:00406010                 sub     esp, 8
.text:00406013                 mov     eax, [esp+0Ch]
.text:00406017                 movzx   ecx, byte ptr [esp+10h]
.text:0040601C                 mov     [esp], ebx
.text:0040601F                 mov     ebx, [esp+14h]
.text:00406023                 mov     [esp+4], esi
.text:00406027                 mov     dl, cl
.text:00406029                 shr     dl, 5
.text:0040602C                 movzx   edx, dl
.text:0040602F                 shl     edx, 2
.text:00406032                 test    eax, eax
.text:00406034                 lea     esi, [edx+eax+4]
.text:00406038                 jz      short loc_406060
.text:0040603A
.text:0040603A loc_40603A:                             ; CODE XREF: .text:00406066↓j
.text:0040603A                 mov     edx, [esi]
.text:0040603C                 and     ecx, 1Fh
.text:0040603F                 and     ebx, 1
.text:00406042                 mov     eax, edx
.text:00406044                 shr     eax, cl
.text:00406046                 and     eax, 1
.text:00406049                 xor     ebx, eax
.text:0040604B                 shl     ebx, cl
.text:0040604D                 xor     edx, ebx
.text:0040604F                 mov     [esi], edx
.text:00406051                 mov     ebx, [esp]
.text:00406054                 mov     esi, [esp+4]
.text:00406058                 add     esp, 8
.text:0040605B                 retn
.text:0040605B ; ---------------------------------------------------------------------------
.text:0040605C                 align 10h
.text:00406060
.text:00406060 loc_406060:                             ; CODE XREF: .text:00406038↑j
.text:00406060                 lea     esi, dword_415144[edx]
.text:00406066                 jmp     short loc_40603A
.text:00406066 ; ---------------------------------------------------------------------------
.text:00406068                 align 10h
.text:00406070                 sub     esp, 2Ch
.text:00406073                 mov     [esp+24h], ebx
.text:00406077                 mov     ebx, [esp+40h]
.text:0040607B                 mov     [esp+28h], esi
.text:0040607F                 test    ebx, ebx
.text:00406081                 jz      short loc_4060D0
.text:00406083
.text:00406083 loc_406083:                             ; CODE XREF: .text:004060D5↓j
.text:00406083                 call    _errno
.text:00406088                 mov     esi, [eax]
.text:0040608A                 mov     [esp+14h], ebx
.text:0040608E                 mov     edx, [ebx]
.text:00406090                 mov     ecx, [esp+38h]
.text:00406094                 mov     ebx, [esp+3Ch]
.text:00406098                 mov     [esp+10h], edx
.text:0040609C                 mov     edx, [esp+34h]
.text:004060A0                 mov     [esp+0Ch], ebx
.text:004060A4                 mov     [esp+8], ecx
.text:004060A8                 mov     [esp+4], edx
.text:004060AC                 mov     edx, [esp+30h]
.text:004060B0                 mov     [esp], edx
.text:004060B3                 call    sub_4054F0
.text:004060B8                 mov     ebx, eax
.text:004060BA                 call    _errno
.text:004060BF                 mov     [eax], esi
.text:004060C1                 mov     esi, [esp+28h]
.text:004060C5                 mov     eax, ebx
.text:004060C7                 mov     ebx, [esp+24h]
.text:004060CB                 add     esp, 2Ch
.text:004060CE                 retn
.text:004060CE ; ---------------------------------------------------------------------------
.text:004060CF                 align 10h
.text:004060D0
.text:004060D0 loc_4060D0:                             ; CODE XREF: .text:00406081↑j
.text:004060D0                 mov     ebx, offset dword_415140
.text:004060D5                 jmp     short loc_406083
.text:004060D5 ; ---------------------------------------------------------------------------
.text:004060D7                 align 10h
.text:004060E0                 push    ebp
.text:004060E1                 push    edi
.text:004060E2                 push    esi
.text:004060E3                 push    ebx
.text:004060E4                 sub     esp, 2Ch
.text:004060E7                 mov     ebp, [esp+48h]
.text:004060EB                 call    _errno
.text:004060F0                 mov     edx, [eax]
.text:004060F2                 test    ebp, ebp
.text:004060F4                 mov     ebx, ebp
.text:004060F6                 mov     [esp+28h], edx
.text:004060FA                 jz      loc_4061B0
.text:00406100
.text:00406100 loc_406100:                             ; CODE XREF: .text:004061B5↓j
.text:00406100                 call    _errno
.text:00406105                 mov     edi, [eax]
.text:00406107                 mov     esi, ebp
.text:00406109                 mov     [esp+14h], ebx
.text:0040610D                 mov     ecx, [ebx]
.text:0040610F                 mov     dword ptr [esp], 0
.text:00406116                 mov     edx, [esp+44h]
.text:0040611A                 mov     dword ptr [esp+4], 0
.text:00406122                 mov     eax, [esp+40h]
.text:00406126                 mov     [esp+10h], ecx
.text:0040612A                 mov     [esp+0Ch], edx
.text:0040612E                 mov     [esp+8], eax
.text:00406132                 call    sub_4054F0
.text:00406137                 mov     ebx, eax
.text:00406139                 call    _errno
.text:0040613E                 mov     [eax], edi
.text:00406140                 lea     edi, [ebx+1]
.text:00406143                 mov     [esp], edi
.text:00406146                 call    sub_408EA0
.text:0040614B                 mov     [esp+24h], eax
.text:0040614F                 test    ebp, ebp
.text:00406151                 jz      short loc_4061A2
.text:00406153
.text:00406153 loc_406153:                             ; CODE XREF: .text:004061A7↓j
.text:00406153                 call    _errno
.text:00406158                 mov     ebp, [eax]
.text:0040615A                 mov     [esp+14h], esi
.text:0040615E                 mov     ecx, [esi]
.text:00406160                 mov     [esp+4], edi
.text:00406164                 mov     edx, [esp+44h]
.text:00406168                 mov     esi, [esp+24h]
.text:0040616C                 mov     [esp+10h], ecx
.text:00406170                 mov     eax, [esp+40h]
.text:00406174                 mov     [esp+0Ch], edx
.text:00406178                 mov     [esp], esi
.text:0040617B                 mov     [esp+8], eax
.text:0040617F                 call    sub_4054F0
.text:00406184                 call    _errno
.text:00406189                 mov     [eax], ebp
.text:0040618B                 call    _errno
.text:00406190                 mov     ebx, [esp+28h]
.text:00406194                 mov     [eax], ebx
.text:00406196                 mov     eax, [esp+24h]
.text:0040619A                 add     esp, 2Ch
.text:0040619D                 pop     ebx
.text:0040619E                 pop     esi
.text:0040619F                 pop     edi
.text:004061A0                 pop     ebp
.text:004061A1                 retn
.text:004061A2 ; ---------------------------------------------------------------------------
.text:004061A2
.text:004061A2 loc_4061A2:                             ; CODE XREF: .text:00406151↑j
.text:004061A2                 mov     esi, offset dword_415140
.text:004061A7                 jmp     short loc_406153
.text:004061A7 ; ---------------------------------------------------------------------------
.text:004061A9                 align 10h
.text:004061B0
.text:004061B0 loc_4061B0:                             ; CODE XREF: .text:004060FA↑j
.text:004061B0                 mov     ebx, offset dword_415140
.text:004061B5                 jmp     loc_406100
.text:004061B5 ; ---------------------------------------------------------------------------
.text:004061BA                 align 10h
.text:004061C0                 sub     esp, 1Ch
.text:004061C3                 mov     edx, [esp+24h]
.text:004061C7                 mov     dword ptr [esp+0Ch], offset dword_415140
.text:004061CF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004061D7                 mov     [esp+4], edx
.text:004061DB                 mov     edx, [esp+20h]
.text:004061DF                 mov     [esp], edx
.text:004061E2                 call    sub_406630
.text:004061E7                 add     esp, 1Ch
.text:004061EA                 retn
.text:004061EA ; ---------------------------------------------------------------------------
.text:004061EB                 align 10h
.text:004061F0                 sub     esp, 1Ch
.text:004061F3                 mov     edx, [esp+20h]
.text:004061F7                 mov     dword ptr [esp+0Ch], offset dword_415140
.text:004061FF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00406207                 mov     [esp+4], edx
.text:0040620B                 mov     dword ptr [esp], 0
.text:00406212                 call    sub_406630
.text:00406217                 add     esp, 1Ch
.text:0040621A                 retn
.text:0040621A ; ---------------------------------------------------------------------------
.text:0040621B                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220
.text:00406220 ; int __cdecl sub_406220(int, int, char *)
.text:00406220 sub_406220      proc near               ; CODE XREF: .text:0040A32E↓p
.text:00406220                                         ; .text:0040A576↓p ...
.text:00406220
.text:00406220 var_BC          = dword ptr -0BCh
.text:00406220 var_B8          = dword ptr -0B8h
.text:00406220 var_B4          = dword ptr -0B4h
.text:00406220 var_B0          = dword ptr -0B0h
.text:00406220 var_AC          = dword ptr -0ACh
.text:00406220 var_A8          = dword ptr -0A8h
.text:00406220 var_A4          = dword ptr -0A4h
.text:00406220 var_A0          = dword ptr -0A0h
.text:00406220 var_9C          = dword ptr -9Ch
.text:00406220 var_98          = dword ptr -98h
.text:00406220 var_94          = dword ptr -94h
.text:00406220 var_90          = dword ptr -90h
.text:00406220 var_8C          = dword ptr -8Ch
.text:00406220 var_7C          = dword ptr -7Ch
.text:00406220 var_78          = dword ptr -78h
.text:00406220 var_74          = dword ptr -74h
.text:00406220 var_70          = dword ptr -70h
.text:00406220 var_6C          = dword ptr -6Ch
.text:00406220 var_68          = dword ptr -68h
.text:00406220 var_64          = dword ptr -64h
.text:00406220 var_60          = dword ptr -60h
.text:00406220 var_5C          = dword ptr -5Ch
.text:00406220 var_4C          = dword ptr -4Ch
.text:00406220 var_48          = dword ptr -48h
.text:00406220 var_44          = dword ptr -44h
.text:00406220 var_40          = dword ptr -40h
.text:00406220 var_3C          = dword ptr -3Ch
.text:00406220 var_38          = dword ptr -38h
.text:00406220 var_34          = dword ptr -34h
.text:00406220 var_30          = dword ptr -30h
.text:00406220 var_2C          = dword ptr -2Ch
.text:00406220 arg_0           = dword ptr  4
.text:00406220 arg_4           = dword ptr  8
.text:00406220 arg_8           = dword ptr  0Ch
.text:00406220
.text:00406220                 push    ebp
.text:00406221                 xor     eax, eax
.text:00406223                 mov     ecx, 8
.text:00406228                 push    edi
.text:00406229                 push    esi
.text:0040622A                 push    ebx
.text:0040622B                 sub     esp, 0ACh
.text:00406231                 mov     ebp, [esp+0BCh+arg_4]
.text:00406238                 cld
.text:00406239                 lea     edi, [esp+0BCh+var_A8]
.text:0040623D                 mov     [esp+0BCh+var_AC], ebp
.text:00406241                 rep stosd
.text:00406243                 mov     eax, [esp+0BCh+var_8C]
.text:00406247                 mov     edi, [esp+0BCh+var_AC]
.text:0040624B                 mov     esi, [esp+0BCh+var_A8]
.text:0040624F                 mov     [esp+0BCh+var_5C], eax
.text:00406253                 mov     ebp, [esp+0BCh+var_A4]
.text:00406257                 mov     eax, [esp+0BCh+var_AC]
.text:0040625B                 mov     [esp+0BCh+var_7C], edi
.text:0040625F                 mov     ecx, [esp+0BCh+var_94]
.text:00406263                 mov     edi, [esp+0BCh+var_A0]
.text:00406267                 mov     [esp+0BCh+var_78], esi
.text:0040626B                 mov     edx, [esp+0BCh+var_90]
.text:0040626F                 mov     esi, [esp+0BCh+var_9C]
.text:00406273                 mov     [esp+0BCh+var_4C], eax
.text:00406277                 mov     ebx, [esp+0BCh+var_98]
.text:0040627B                 mov     eax, [esp+0BCh+var_A8]
.text:0040627F                 mov     [esp+0BCh+var_74], ebp
.text:00406283                 mov     [esp+0BCh+var_70], edi
.text:00406287                 mov     [esp+0BCh+var_6C], esi
.text:0040628B                 mov     [esp+0BCh+var_68], ebx
.text:0040628F                 mov     [esp+0BCh+var_64], ecx
.text:00406293                 mov     [esp+0BCh+var_60], edx
.text:00406297                 mov     [esp+0BCh+var_48], eax
.text:0040629B                 mov     [esp+0BCh+var_44], ebp
.text:0040629F                 mov     [esp+0BCh+var_40], edi
.text:004062A3                 mov     [esp+0BCh+var_3C], esi
.text:004062AA                 mov     [esp+0BCh+var_38], ebx
.text:004062B1                 mov     ebx, [esp+0BCh+var_8C]
.text:004062B5                 mov     [esp+0BCh+var_30], edx
.text:004062BC                 mov     edx, [esp+0BCh+arg_8]
.text:004062C3                 mov     [esp+0BCh+var_34], ecx
.text:004062CA                 lea     ecx, [esp+0BCh+var_4C]
.text:004062CE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004062D2                 mov     edx, [esp+0BCh+arg_0]
.text:004062D9                 mov     [esp+0BCh+var_2C], ebx
.text:004062E0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004062E4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004062EC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004062EF                 call    sub_406630
.text:004062F4                 add     esp, 0ACh
.text:004062FA                 pop     ebx
.text:004062FB                 pop     esi
.text:004062FC                 pop     edi
.text:004062FD                 pop     ebp
.text:004062FE                 retn
.text:004062FE sub_406220      endp
.text:004062FE
.text:004062FE ; ---------------------------------------------------------------------------
.text:004062FF                 align 10h
.text:00406300                 push    ebp
.text:00406301                 xor     eax, eax
.text:00406303                 mov     ecx, 8
.text:00406308                 push    edi
.text:00406309                 push    esi
.text:0040630A                 push    ebx
.text:0040630B                 sub     esp, 0ACh
.text:00406311                 mov     edx, [esp+0C4h]
.text:00406318                 cld
.text:00406319                 lea     edi, [esp+14h]
.text:0040631D                 mov     [esp+10h], edx
.text:00406321                 rep stosd
.text:00406323                 mov     eax, [esp+30h]
.text:00406327                 mov     ebp, [esp+10h]
.text:0040632B                 mov     edi, [esp+14h]
.text:0040632F                 mov     [esp+60h], eax
.text:00406333                 mov     esi, [esp+20h]
.text:00406337                 mov     eax, [esp+10h]
.text:0040633B                 mov     [esp+40h], ebp
.text:0040633F                 mov     ecx, [esp+28h]
.text:00406343                 mov     ebp, [esp+18h]
.text:00406347                 mov     [esp+44h], edi
.text:0040634B                 mov     edx, [esp+2Ch]
.text:0040634F                 mov     edi, [esp+1Ch]
.text:00406353                 mov     [esp+70h], eax
.text:00406357                 mov     ebx, [esp+24h]
.text:0040635B                 mov     eax, [esp+14h]
.text:0040635F                 mov     [esp+48h], ebp
.text:00406363                 mov     [esp+4Ch], edi
.text:00406367                 mov     [esp+50h], esi
.text:0040636B                 mov     [esp+54h], ebx
.text:0040636F                 mov     [esp+58h], ecx
.text:00406373                 mov     [esp+5Ch], edx
.text:00406377                 mov     [esp+74h], eax
.text:0040637B                 mov     [esp+78h], ebp
.text:0040637F                 mov     [esp+7Ch], edi
.text:00406383                 mov     [esp+80h], esi
.text:0040638A                 mov     [esp+84h], ebx
.text:00406391                 mov     esi, [esp+30h]
.text:00406395                 lea     ebx, [esp+70h]
.text:00406399                 mov     [esp+8Ch], edx
.text:004063A0                 mov     edx, [esp+0C8h]
.text:004063A7                 mov     [esp+88h], ecx
.text:004063AE                 mov     ecx, [esp+0CCh]
.text:004063B5                 mov     [esp+4], edx
.text:004063B9                 mov     edx, [esp+0C0h]
.text:004063C0                 mov     [esp+90h], esi
.text:004063C7                 mov     [esp+0Ch], ebx
.text:004063CB                 mov     [esp+8], ecx
.text:004063CF                 mov     [esp], edx
.text:004063D2                 call    sub_406630
.text:004063D7                 add     esp, 0ACh
.text:004063DD                 pop     ebx
.text:004063DE                 pop     esi
.text:004063DF                 pop     edi
.text:004063E0                 pop     ebp
.text:004063E1                 retn
.text:004063E1 ; ---------------------------------------------------------------------------
.text:004063E2                 align 10h
.text:004063F0                 push    ebp
.text:004063F1                 xor     eax, eax
.text:004063F3                 mov     ecx, 8
.text:004063F8                 push    edi
.text:004063F9                 push    esi
.text:004063FA                 push    ebx
.text:004063FB                 sub     esp, 0ACh
.text:00406401                 mov     edi, [esp+0C0h]
.text:00406408                 cld
.text:00406409                 mov     [esp+10h], edi
.text:0040640D                 lea     edi, [esp+14h]
.text:00406411                 rep stosd
.text:00406413                 mov     eax, [esp+30h]
.text:00406417                 mov     esi, [esp+10h]
.text:0040641B                 mov     ebx, [esp+14h]
.text:0040641F                 mov     [esp+60h], eax
.text:00406423                 mov     ebp, [esp+18h]
.text:00406427                 mov     eax, [esp+10h]
.text:0040642B                 mov     [esp+40h], esi
.text:0040642F                 mov     edi, [esp+1Ch]
.text:00406433                 mov     esi, [esp+20h]
.text:00406437                 mov     [esp+44h], ebx
.text:0040643B                 mov     ecx, [esp+28h]
.text:0040643F                 mov     edx, [esp+2Ch]
.text:00406443                 mov     [esp+70h], eax
.text:00406447                 mov     ebx, [esp+24h]
.text:0040644B                 mov     eax, [esp+14h]
.text:0040644F                 mov     [esp+48h], ebp
.text:00406453                 mov     [esp+4Ch], edi
.text:00406457                 mov     [esp+50h], esi
.text:0040645B                 mov     [esp+54h], ebx
.text:0040645F                 mov     [esp+58h], ecx
.text:00406463                 mov     [esp+5Ch], edx
.text:00406467                 mov     [esp+74h], eax
.text:0040646B                 mov     [esp+78h], ebp
.text:0040646F                 mov     [esp+7Ch], edi
.text:00406473                 mov     [esp+80h], esi
.text:0040647A                 mov     [esp+84h], ebx
.text:00406481                 mov     [esp+8Ch], edx
.text:00406488                 lea     edx, [esp+70h]
.text:0040648C                 mov     [esp+88h], ecx
.text:00406493                 mov     ecx, [esp+30h]
.text:00406497                 mov     [esp+0Ch], edx
.text:0040649B                 mov     edx, [esp+0C4h]
.text:004064A2                 mov     [esp+90h], ecx
.text:004064A9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004064B1                 mov     [esp+4], edx
.text:004064B5                 mov     dword ptr [esp], 0
.text:004064BC                 call    sub_406630
.text:004064C1                 add     esp, 0ACh
.text:004064C7                 pop     ebx
.text:004064C8                 pop     esi
.text:004064C9                 pop     edi
.text:004064CA                 pop     ebp
.text:004064CB                 retn
.text:004064CB ; ---------------------------------------------------------------------------
.text:004064CC                 align 10h
.text:004064D0                 push    edi
.text:004064D1                 push    esi
.text:004064D2                 push    ebx
.text:004064D3                 sub     esp, 40h
.text:004064D6                 mov     edx, ds:dword_41514C
.text:004064DC                 mov     ebx, ds:dword_415140
.text:004064E2                 mov     esi, ds:dword_415148
.text:004064E8                 mov     edi, ds:dword_415144
.text:004064EE                 mov     [esp+1Ch], edx
.text:004064F2                 mov     ecx, ds:dword_415150
.text:004064F8                 mov     edx, ds:dword_415160
.text:004064FE                 mov     [esp+10h], ebx
.text:00406502                 mov     ebx, ds:dword_415154
.text:00406508                 mov     [esp+30h], edx
.text:0040650C                 movzx   edx, byte ptr [esp+54h]
.text:00406511                 mov     [esp+18h], esi
.text:00406515                 mov     esi, ds:dword_41515C
.text:0040651B                 mov     [esp+14h], edi
.text:0040651F                 mov     edi, ds:dword_415158
.text:00406525                 mov     [esp+20h], ecx
.text:00406529                 mov     cl, dl
.text:0040652B                 shr     cl, 5
.text:0040652E                 mov     [esp+24h], ebx
.text:00406532                 movzx   ebx, cl
.text:00406535                 mov     [esp+2Ch], esi
.text:00406539                 lea     esi, [esp+10h]
.text:0040653D                 mov     [esp+28h], edi
.text:00406541                 lea     edi, [esi+ebx*4]
.text:00406544                 mov     ebx, edx
.text:00406546                 mov     edx, [edi+4]
.text:00406549                 and     ebx, 1Fh
.text:0040654C                 mov     cl, bl
.text:0040654E                 mov     eax, edx
.text:00406550                 shr     eax, cl
.text:00406552                 and     eax, 1
.text:00406555                 xor     eax, 1
.text:00406558                 shl     eax, cl
.text:0040655A                 xor     edx, eax
.text:0040655C                 mov     [edi+4], edx
.text:0040655F                 mov     edx, [esp+50h]
.text:00406563                 mov     [esp+0Ch], esi
.text:00406567                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040656F                 mov     [esp+4], edx
.text:00406573                 mov     dword ptr [esp], 0
.text:0040657A                 call    sub_406630
.text:0040657F                 add     esp, 40h
.text:00406582                 pop     ebx
.text:00406583                 pop     esi
.text:00406584                 pop     edi
.text:00406585                 retn
.text:00406585 ; ---------------------------------------------------------------------------
.text:00406586                 align 10h
.text:00406590
.text:00406590 ; =============== S U B R O U T I N E =======================================
.text:00406590
.text:00406590
.text:00406590 ; int __cdecl sub_406590(char *)
.text:00406590 sub_406590      proc near               ; CODE XREF: sub_401E80+199↑p
.text:00406590                                         ; sub_401E80+4AA↑p ...
.text:00406590
.text:00406590 var_4C          = dword ptr -4Ch
.text:00406590 var_48          = dword ptr -48h
.text:00406590 var_44          = dword ptr -44h
.text:00406590 var_40          = dword ptr -40h
.text:00406590 var_3C          = dword ptr -3Ch
.text:00406590 var_38          = dword ptr -38h
.text:00406590 var_34          = dword ptr -34h
.text:00406590 var_30          = dword ptr -30h
.text:00406590 var_2C          = dword ptr -2Ch
.text:00406590 var_28          = dword ptr -28h
.text:00406590 var_24          = dword ptr -24h
.text:00406590 var_20          = dword ptr -20h
.text:00406590 var_1C          = dword ptr -1Ch
.text:00406590 arg_0           = dword ptr  4
.text:00406590
.text:00406590                 sub     esp, 4Ch
.text:00406593                 mov     ecx, ds:dword_415140
.text:00406599                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004065A1                 mov     edx, ds:dword_415144
.text:004065A7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004065AE                 mov     [esp+4Ch+var_3C], ecx
.text:004065B2                 mov     ecx, ds:dword_41514C
.text:004065B8                 mov     [esp+4Ch+var_38], edx
.text:004065BC                 mov     edx, ds:dword_415148
.text:004065C2                 mov     [esp+4Ch+var_30], ecx
.text:004065C6                 mov     ecx, ds:dword_415150
.text:004065CC                 mov     eax, edx
.text:004065CE                 shr     eax, 1Ah
.text:004065D1                 and     eax, 1
.text:004065D4                 xor     eax, 1
.text:004065D7                 mov     [esp+4Ch+var_2C], ecx
.text:004065DB                 shl     eax, 1Ah
.text:004065DE                 mov     ecx, ds:dword_415154
.text:004065E4                 xor     edx, eax
.text:004065E6                 mov     [esp+4Ch+var_34], edx
.text:004065EA                 mov     edx, [esp+4Ch+arg_0]
.text:004065EE                 mov     [esp+4Ch+var_28], ecx
.text:004065F2                 mov     ecx, ds:dword_415158
.text:004065F8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004065FC                 mov     [esp+4Ch+var_24], ecx
.text:00406600                 mov     ecx, ds:dword_41515C
.text:00406606                 mov     [esp+4Ch+var_20], ecx
.text:0040660A                 mov     ecx, ds:dword_415160
.text:00406610                 mov     [esp+4Ch+var_1C], ecx
.text:00406614                 lea     ecx, [esp+4Ch+var_3C]
.text:00406618                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040661C                 call    sub_406630
.text:00406621                 add     esp, 4Ch
.text:00406624                 retn
.text:00406624 sub_406590      endp
.text:00406624
.text:00406624 ; ---------------------------------------------------------------------------
.text:00406625                 align 10h
.text:00406630
.text:00406630 ; =============== S U B R O U T I N E =======================================
.text:00406630
.text:00406630
.text:00406630 ; int __cdecl sub_406630(int, char *, int, int)
.text:00406630 sub_406630      proc near               ; CODE XREF: .text:004061E2↑p
.text:00406630                                         ; .text:00406212↑p ...
.text:00406630
.text:00406630 Block           = dword ptr -2Ch
.text:00406630 var_28          = dword ptr -28h
.text:00406630 Str             = dword ptr -24h
.text:00406630 var_20          = dword ptr -20h
.text:00406630 var_1C          = dword ptr -1Ch
.text:00406630 var_18          = dword ptr -18h
.text:00406630 var_14          = dword ptr -14h
.text:00406630 arg_0           = dword ptr  4
.text:00406630 arg_4           = dword ptr  8
.text:00406630 arg_8           = dword ptr  0Ch
.text:00406630 arg_C           = dword ptr  10h
.text:00406630
.text:00406630                 push    ebp
.text:00406631                 push    edi
.text:00406632                 push    esi
.text:00406633                 push    ebx
.text:00406634                 sub     esp, 1Ch
.text:00406637                 call    _errno
.text:0040663C                 mov     edx, [eax]
.text:0040663E                 mov     eax, [esp+2Ch+arg_0]
.text:00406642                 mov     [esp+2Ch+var_14], edx
.text:00406646                 test    eax, eax
.text:00406648                 js      loc_4067EA
.text:0040664E                 mov     eax, [esp+2Ch+arg_0]
.text:00406652                 cmp     dword_414010, eax
.text:00406658                 ja      short loc_4066D0
.text:0040665A                 mov     esi, eax
.text:0040665C                 inc     esi
.text:0040665D                 cmp     esi, 1FFFFFFFh
.text:00406663                 ja      loc_4067EF
.text:00406669                 mov     ebx, off_41401C
.text:0040666F                 cmp     ebx, offset dword_414014
.text:00406675                 jz      loc_4067C1
.text:0040667B
.text:0040667B loc_40667B:                             ; CODE XREF: sub_406630+1B5↓j
.text:0040667B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040667E                 lea     ecx, ds:0[esi*8]
.text:00406685                 mov     ebp, esi
.text:00406687                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040668B                 call    sub_408F30
.text:00406690                 mov     off_41401C, eax
.text:00406695                 mov     ebx, dword_414010
.text:0040669B                 sub     ebp, ebx
.text:0040669D                 lea     edi, [eax+ebx*8]
.text:004066A0                 lea     eax, ds:0[ebp*8]
.text:004066A7                 cmp     eax, 7
.text:004066AA                 jbe     short loc_4066C0
.text:004066AC                 test    edi, 4
.text:004066B2                 jz      short loc_4066C0
.text:004066B4                 mov     dword ptr [edi], 0
.text:004066BA                 sub     eax, 4
.text:004066BD                 add     edi, 4
.text:004066C0
.text:004066C0 loc_4066C0:                             ; CODE XREF: sub_406630+7A↑j
.text:004066C0                                         ; sub_406630+82↑j
.text:004066C0                 cld
.text:004066C1                 mov     ecx, eax
.text:004066C3                 shr     ecx, 2
.text:004066C6                 xor     eax, eax
.text:004066C8                 rep stosd
.text:004066CA                 mov     dword_414010, esi
.text:004066D0
.text:004066D0 loc_4066D0:                             ; CODE XREF: sub_406630+28↑j
.text:004066D0                 mov     esi, off_41401C
.text:004066D6                 mov     eax, [esp+2Ch+arg_0]
.text:004066DA                 mov     ebp, [esi+eax*8]
.text:004066DD                 mov     edi, [esi+eax*8+4]
.text:004066E1                 mov     esi, [esp+2Ch+arg_C]
.text:004066E5                 test    esi, esi
.text:004066E7                 jz      loc_4067B7
.text:004066ED
.text:004066ED loc_4066ED:                             ; CODE XREF: sub_406630+18C↓j
.text:004066ED                 call    _errno
.text:004066F2                 mov     ebx, [eax]
.text:004066F4                 mov     [esp+2Ch+var_18], esi ; int
.text:004066F8                 mov     ecx, [esi]
.text:004066FA                 mov     [esp+2Ch+Block], edi ; int
.text:004066FD                 mov     edx, [esp+2Ch+arg_8]
.text:00406701                 mov     [esp+2Ch+var_28], ebp ; int
.text:00406705                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406709                 mov     ecx, [esp+2Ch+arg_4]
.text:0040670D                 mov     [esp+2Ch+var_20], edx ; int
.text:00406711                 mov     [esp+2Ch+Str], ecx ; Str
.text:00406715                 call    sub_4054F0
.text:0040671A                 mov     esi, eax
.text:0040671C                 call    _errno
.text:00406721                 mov     [eax], ebx
.text:00406723                 cmp     ebp, esi
.text:00406725                 ja      short loc_40679B
.text:00406727                 lea     ebp, [esi+1]
.text:0040672A                 mov     ebx, off_41401C
.text:00406730                 cmp     edi, offset unk_415040
.text:00406736                 mov     esi, [esp+2Ch+arg_0]
.text:0040673A                 mov     [ebx+esi*8], ebp
.text:0040673D                 jz      short loc_40674D
.text:0040673F                 mov     [esp+2Ch+Block], edi ; Block
.text:00406742                 call    free
.text:00406747                 mov     ebx, off_41401C
.text:0040674D
.text:0040674D loc_40674D:                             ; CODE XREF: sub_406630+10D↑j
.text:0040674D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00406750                 call    sub_408EA0
.text:00406755                 mov     esi, [esp+2Ch+arg_C]
.text:00406759                 mov     edi, eax
.text:0040675B                 mov     eax, [esp+2Ch+arg_0]
.text:0040675F                 test    esi, esi
.text:00406761                 mov     [ebx+eax*8+4], edi
.text:00406765                 jz      short loc_4067B0
.text:00406767
.text:00406767 loc_406767:                             ; CODE XREF: sub_406630+185↓j
.text:00406767                 call    _errno
.text:0040676C                 mov     ebx, [eax]
.text:0040676E                 mov     [esp+2Ch+var_18], esi ; int
.text:00406772                 mov     ecx, [esi]
.text:00406774                 mov     [esp+2Ch+Block], edi ; int
.text:00406777                 mov     edx, [esp+2Ch+arg_8]
.text:0040677B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040677F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00406783                 mov     ecx, [esp+2Ch+arg_4]
.text:00406787                 mov     [esp+2Ch+var_20], edx ; int
.text:0040678B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040678F                 call    sub_4054F0
.text:00406794                 call    _errno
.text:00406799                 mov     [eax], ebx
.text:0040679B
.text:0040679B loc_40679B:                             ; CODE XREF: sub_406630+F5↑j
.text:0040679B                 call    _errno
.text:004067A0                 mov     ebp, [esp+2Ch+var_14]
.text:004067A4                 mov     [eax], ebp
.text:004067A6                 add     esp, 1Ch
.text:004067A9                 mov     eax, edi
.text:004067AB                 pop     ebx
.text:004067AC                 pop     esi
.text:004067AD                 pop     edi
.text:004067AE                 pop     ebp
.text:004067AF                 retn
.text:004067B0 ; ---------------------------------------------------------------------------
.text:004067B0
.text:004067B0 loc_4067B0:                             ; CODE XREF: sub_406630+135↑j
.text:004067B0                 mov     esi, offset dword_415140
.text:004067B5                 jmp     short loc_406767
.text:004067B7 ; ---------------------------------------------------------------------------
.text:004067B7
.text:004067B7 loc_4067B7:                             ; CODE XREF: sub_406630+B7↑j
.text:004067B7                 mov     esi, offset dword_415140
.text:004067BC                 jmp     loc_4066ED
.text:004067C1 ; ---------------------------------------------------------------------------
.text:004067C1
.text:004067C1 loc_4067C1:                             ; CODE XREF: sub_406630+45↑j
.text:004067C1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004067C8                 call    sub_408EA0
.text:004067CD                 mov     off_41401C, eax
.text:004067D2                 mov     edi, dword_414014
.text:004067D8                 mov     ebx, eax
.text:004067DA                 mov     ecx, off_414018
.text:004067E0                 mov     [eax], edi
.text:004067E2                 mov     [eax+4], ecx
.text:004067E5                 jmp     loc_40667B
.text:004067EA ; ---------------------------------------------------------------------------
.text:004067EA
.text:004067EA loc_4067EA:                             ; CODE XREF: sub_406630+18↑j
.text:004067EA                 call    abort
.text:004067EF ; ---------------------------------------------------------------------------
.text:004067EF
.text:004067EF loc_4067EF:                             ; CODE XREF: sub_406630+33↑j
.text:004067EF                 call    sub_40A180
.text:004067EF sub_406630      endp
.text:004067EF
.text:004067EF ; ---------------------------------------------------------------------------
.text:004067F4                 align 10h
.text:00406800
.text:00406800 ; =============== S U B R O U T I N E =======================================
.text:00406800
.text:00406800
.text:00406800 sub_406800      proc near               ; DATA XREF: sub_406980+1B4↓o
.text:00406800                 sub     eax, 9090002Dh
.text:00406805                 nop
.text:00406806                 nop
.text:00406807                 nop
.text:00406808                 nop
.text:00406809                 nop
.text:0040680A                 nop
.text:0040680B                 nop
.text:0040680C                 nop
.text:0040680D                 nop
.text:0040680E                 nop
.text:0040680F                 nop
.text:00406810                 nop
.text:00406811                 nop
.text:00406812                 nop
.text:00406813                 nop
.text:00406814                 nop
.text:00406815                 nop
.text:00406816                 nop
.text:00406817                 nop
.text:00406818                 nop
.text:00406819                 nop
.text:0040681A                 nop
.text:0040681B                 nop
.text:0040681C                 nop
.text:0040681D                 nop
.text:0040681E                 nop
.text:0040681F                 nop
.text:0040681F sub_406800      endp
.text:0040681F
.text:00406820
.text:00406820 ; =============== S U B R O U T I N E =======================================
.text:00406820
.text:00406820
.text:00406820 sub_406820      proc near               ; DATA XREF: sub_406980+3CC↓o
.text:00406820                 and     eax, 6F203A73h
.text:00406825                 jo      short loc_40689B
.text:00406827                 imul    ebp, [edi+6Eh], 63256020h
.text:0040682E                 and     eax, 64202773h
.text:00406833                 outsd
.text:00406834                 db      65h
.text:00406834                 jnb     short loc_4068A5
.text:00406837                 daa
.text:00406838                 jz      short loc_40685A
.text:0040683A                 popa
.text:0040683B                 insb
.text:0040683C                 insb
.text:0040683D                 outsd
.text:0040683E                 ja      short sub_406860
.text:00406840                 popa
.text:00406841                 outsb
.text:00406842                 and     [ecx+72h], ah
.text:00406845                 db      67h
.text:00406845                 jnz     near ptr loc_4068B4+1
.text:00406848                 outs    dx, byte ptr gs:[esi]
.text:0040684A                 jz      short loc_406856
.text:0040684C                 add     [eax-6F6F6F70h], dl
.text:00406852                 nop
.text:00406853                 nop
.text:00406854                 nop
.text:00406855                 nop
.text:00406856
.text:00406856 loc_406856:                             ; CODE XREF: sub_406820+2A↑j
.text:00406856                 nop
.text:00406857                 nop
.text:00406858                 nop
.text:00406859                 nop
.text:0040685A
.text:0040685A loc_40685A:                             ; CODE XREF: sub_406820+18↑j
.text:0040685A                 nop
.text:0040685B                 nop
.text:0040685C                 nop
.text:0040685D                 nop
.text:0040685E                 nop
.text:0040685F                 nop
.text:0040685F sub_406820      endp ; sp-analysis failed
.text:0040685F
.text:00406860
.text:00406860 ; =============== S U B R O U T I N E =======================================
.text:00406860
.text:00406860
.text:00406860 sub_406860      proc near               ; CODE XREF: sub_406820+1E↑j
.text:00406860                                         ; DATA XREF: sub_406980:loc_406DB2↓o
.text:00406860                 and     eax, 6F203A73h
.text:00406865                 jo      short loc_4068DB
.text:00406867                 imul    ebp, [edi+6Eh], 2D2D6020h
.text:0040686E                 and     eax, 64202773h
.text:00406873                 outsd
.text:00406874                 db      65h
.text:00406874                 jnb     short loc_4068E5
.text:00406877                 daa
.text:00406878                 jz      short loc_40689A
.text:0040687A                 popa
.text:0040687B                 insb
.text:0040687C                 insb
.text:0040687D                 outsd
.text:0040687E                 ja      short sub_4068A0
.text:00406880                 popa
.text:00406881                 outsb
.text:00406882                 and     [ecx+72h], ah
.text:00406885                 db      67h
.text:00406885                 jnz     loc_4068F5
.text:00406888                 outs    dx, byte ptr gs:[esi]
.text:0040688A                 jz      short loc_406896
.text:0040688C                 add     [eax-6F6F6F70h], dl
.text:00406892                 nop
.text:00406893                 nop
.text:00406894                 nop
.text:00406895                 nop
.text:00406896
.text:00406896 loc_406896:                             ; CODE XREF: sub_406860+2A↑j
.text:00406896                 nop
.text:00406897                 nop
.text:00406898                 nop
.text:00406899                 nop
.text:0040689A
.text:0040689A loc_40689A:                             ; CODE XREF: sub_406860+18↑j
.text:0040689A                 nop
.text:0040689B
.text:0040689B loc_40689B:                             ; CODE XREF: sub_406820+5↑j
.text:0040689B                 nop
.text:0040689C                 nop
.text:0040689D                 nop
.text:0040689E                 nop
.text:0040689F                 nop
.text:0040689F sub_406860      endp ; sp-analysis failed
.text:0040689F
.text:004068A0
.text:004068A0 ; =============== S U B R O U T I N E =======================================
.text:004068A0
.text:004068A0
.text:004068A0 sub_4068A0      proc near               ; CODE XREF: sub_406860+1E↑j
.text:004068A0                                         ; DATA XREF: sub_406980:loc_406E50↓o ...
.text:004068A0                 and     eax, 6F203A73h
.text:004068A5
.text:004068A5 loc_4068A5:                             ; CODE XREF: sub_406820+14↑j
.text:004068A5                 jo      short loc_40691B
.text:004068A7                 imul    ebp, [edi+6Eh], 73256020h
.text:004068AE                 daa
.text:004068AF                 and     [edx+65h], dh
.text:004068B2                 jno     short near ptr loc_406928+1
.text:004068B4
.text:004068B4 loc_4068B4:                             ; CODE XREF: sub_406820+25↑j
.text:004068B4                 imul    esi, [edx+65h], 6E612073h
.text:004068BB                 and     [ecx+72h], ah
.text:004068BE                 db      67h
.text:004068BE                 jnz     near ptr loc_40692C+2
.text:004068C1                 outs    dx, byte ptr gs:[esi]
.text:004068C3                 jz      short loc_4068CF
.text:004068C5                 add     [eax-6F6F6F70h], dl
.text:004068CB                 nop
.text:004068CC                 nop
.text:004068CD                 nop
.text:004068CE                 nop
.text:004068CF
.text:004068CF loc_4068CF:                             ; CODE XREF: sub_4068A0+23↑j
.text:004068CF                 nop
.text:004068D0                 nop
.text:004068D1                 nop
.text:004068D2                 nop
.text:004068D3                 nop
.text:004068D4                 nop
.text:004068D5                 nop
.text:004068D6                 nop
.text:004068D7                 nop
.text:004068D8                 nop
.text:004068D9                 nop
.text:004068DA                 nop
.text:004068DB
.text:004068DB loc_4068DB:                             ; CODE XREF: sub_406860+5↑j
.text:004068DB                 nop
.text:004068DC                 nop
.text:004068DD                 nop
.text:004068DE                 nop
.text:004068DF                 nop
.text:004068DF sub_4068A0      endp
.text:004068DF
.text:004068E0
.text:004068E0 ; =============== S U B R O U T I N E =======================================
.text:004068E0
.text:004068E0
.text:004068E0 sub_4068E0      proc near               ; DATA XREF: sub_406980+55E↓o
.text:004068E0                 and     eax, 75203A73h
.text:004068E5
.text:004068E5 loc_4068E5:                             ; CODE XREF: sub_406860+14↑j
.text:004068E5                 outsb
.text:004068E6                 jb      short near ptr loc_406947+6
.text:004068E8                 arpl    [edi+67h], bp
.text:004068EB                 outsb
.text:004068EC                 imul    edi, [edx+65h], 706F2064h
.text:004068F3                 jz      short loc_40695E
.text:004068F5
.text:004068F5 loc_4068F5:                             ; CODE XREF: sub_406860+25↑j
.text:004068F5                 outsd
.text:004068F6                 outsb
.text:004068F7                 and     [eax+25h], ah
.text:004068FA                 arpl    ds:0A2773h, sp
.text:00406900
.text:00406900 loc_406900:                             ; DATA XREF: sub_406980:loc_406F21↓o
.text:00406900                 add     [eax-6F6F6F70h], dl
.text:00406906                 nop
.text:00406907                 nop
.text:00406908                 nop
.text:00406909                 nop
.text:0040690A                 nop
.text:0040690B                 nop
.text:0040690C                 nop
.text:0040690D                 nop
.text:0040690E                 nop
.text:0040690F                 nop
.text:00406910                 nop
.text:00406911                 nop
.text:00406912                 nop
.text:00406913                 nop
.text:00406914                 nop
.text:00406915                 nop
.text:00406916                 nop
.text:00406917                 nop
.text:00406918                 nop
.text:00406919                 nop
.text:0040691A                 nop
.text:0040691B
.text:0040691B loc_40691B:                             ; CODE XREF: sub_4068A0:loc_4068A5↑j
.text:0040691B                 nop
.text:0040691C                 nop
.text:0040691D                 nop
.text:0040691E                 nop
.text:0040691F                 nop
.text:0040691F sub_4068E0      endp
.text:0040691F
.text:00406920
.text:00406920 ; =============== S U B R O U T I N E =======================================
.text:00406920
.text:00406920
.text:00406920 sub_406920      proc near               ; DATA XREF: sub_406980:loc_406F3A↓o
.text:00406920                 and     eax, 75203A73h
.text:00406925                 outsb
.text:00406926                 jb      short near ptr loc_406987+6
.text:00406928
.text:00406928 loc_406928:                             ; CODE XREF: sub_4068A0+12↑j
.text:00406928                 arpl    [edi+67h], bp
.text:0040692B                 outsb
.text:0040692C
.text:0040692C loc_40692C:                             ; CODE XREF: sub_4068A0+1E↑j
.text:0040692C                 imul    edi, [edx+65h], 706F2064h
.text:00406933                 jz      short loc_40699E
.text:00406935                 outsd
.text:00406936                 outsb
.text:00406937                 and     [eax+2Dh], ah
.text:0040693A                 sub     eax, 0A277325h
.text:0040693F                 add     ds:6F203A73h, ah
.text:00406945                 jo      short loc_4069BB
.text:00406947
.text:00406947 loc_406947:                             ; CODE XREF: sub_4068E0+6↑j
.text:00406947                 imul    ebp, [edi+6Eh], 71657220h
.text:0040694E                 jnz     short loc_4069B9
.text:00406950                 jb      short loc_4069B7
.text:00406952                 jnb     short loc_406974
.text:00406954                 popa
.text:00406955                 outsb
.text:00406956                 and     [ecx+72h], ah
.text:00406959                 db      67h
.text:00406959                 jnz     near ptr loc_4069C7+2
.text:0040695C                 outs    dx, byte ptr gs:[esi]
.text:0040695E
.text:0040695E loc_40695E:                             ; CODE XREF: sub_4068E0+13↑j
.text:0040695E                 jz      short sub_406980
.text:00406960                 sub     eax, 6325202Dh
.text:00406965                 or      al, [eax]
.text:00406967                 nop
.text:00406968                 nop
.text:00406969                 nop
.text:0040696A                 nop
.text:0040696B                 nop
.text:0040696C                 nop
.text:0040696D                 nop
.text:0040696E                 nop
.text:0040696F                 nop
.text:00406970                 nop
.text:00406971                 nop
.text:00406972                 nop
.text:00406973                 nop
.text:00406974
.text:00406974 loc_406974:                             ; CODE XREF: sub_406920+32↑j
.text:00406974                 nop
.text:00406975                 nop
.text:00406976                 nop
.text:00406977                 nop
.text:00406978                 nop
.text:00406979                 nop
.text:0040697A                 nop
.text:0040697B                 nop
.text:0040697C                 nop
.text:0040697D                 nop
.text:0040697E                 nop
.text:0040697F                 nop
.text:0040697F sub_406920      endp ; sp-analysis failed
.text:0040697F
.text:00406980
.text:00406980 ; =============== S U B R O U T I N E =======================================
.text:00406980
.text:00406980
.text:00406980 ; int __cdecl sub_406980(char *Str2, size_t MaxCount, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char *Str, int, int, int, int)
.text:00406980 sub_406980      proc near               ; CODE XREF: sub_406920:loc_40695E↑j
.text:00406980                                         ; DATA XREF: sub_406980:loc_407193↓o
.text:00406980
.text:00406980 Str2            = dword ptr  4
.text:00406980 MaxCount        = dword ptr  8
.text:00406980 arg_8           = dword ptr  0Ch
.text:00406980 arg_C           = dword ptr  10h
.text:00406980 arg_1C          = dword ptr  20h
.text:00406980 arg_20          = dword ptr  24h
.text:00406980 arg_24          = dword ptr  28h
.text:00406980 arg_28          = dword ptr  2Ch
.text:00406980 arg_2C          = dword ptr  30h
.text:00406980 arg_30          = dword ptr  34h
.text:00406980 arg_34          = dword ptr  38h
.text:00406980 arg_38          = dword ptr  3Ch
.text:00406980 arg_3C          = dword ptr  40h
.text:00406980 arg_40          = dword ptr  44h
.text:00406980 arg_44          = dword ptr  48h
.text:00406980 arg_5C          = dword ptr  60h
.text:00406980 arg_60          = dword ptr  64h
.text:00406980 Str             = dword ptr  68h
.text:00406980 arg_68          = dword ptr  6Ch
.text:00406980 arg_6C          = dword ptr  70h
.text:00406980 arg_70          = dword ptr  74h
.text:00406980 arg_74          = dword ptr  78h
.text:00406980
.text:00406980 ; FUNCTION CHUNK AT .text:004069FB SIZE 00000053 BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00406A64 SIZE 0000014B BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00406BB0 SIZE 0000023A BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00406DF0 SIZE 00000099 BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00406E90 SIZE 000000DF BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00406F70 SIZE 0000025B BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:004071D0 SIZE 000001AE BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00407380 SIZE 000000F9 BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00407480 SIZE 000000CE BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00407550 SIZE 0000003A BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:00407590 SIZE 0000000B BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:004075A0 SIZE 00000019 BYTES
.text:00406980 ; FUNCTION CHUNK AT .text:004075C0 SIZE 00000011 BYTES
.text:00406980
.text:00406980                 and     eax, 6F203A73h
.text:00406985                 jo      short loc_4069FB
.text:00406987
.text:00406987 loc_406987:                             ; CODE XREF: sub_406920+6↑j
.text:00406987                 imul    ebp, [edi+6Eh], 572D6020h
.text:0040698E                 and     ds:64202773h, ah
.text:00406994                 outsd
.text:00406995                 db      65h
.text:00406995                 jnb     short near ptr loc_406A04+2
.text:00406998                 daa
.text:00406999                 jz      short loc_4069BB
.text:0040699B                 popa
.text:0040699C                 insb
.text:0040699D                 insb
.text:0040699E
.text:0040699E loc_40699E:                             ; CODE XREF: sub_406920+13↑j
.text:0040699E                 outsd
.text:0040699F                 ja      short near ptr sub_4069C0+1
.text:004069A1                 popa
.text:004069A2                 outsb
.text:004069A3                 and     [ecx+72h], ah
.text:004069A6                 db      67h
.text:004069A6                 jnz     near ptr loc_406A15+1
.text:004069A9                 outs    dx, byte ptr gs:[esi]
.text:004069AB                 jz      short loc_4069B7
.text:004069AD                 add     [eax-6F6F6F70h], dl
.text:004069B3                 nop
.text:004069B4                 nop
.text:004069B5                 nop
.text:004069B6                 nop
.text:004069B7
.text:004069B7 loc_4069B7:                             ; CODE XREF: sub_406920+30↑j
.text:004069B7                                         ; sub_406980+2B↑j
.text:004069B7                 nop
.text:004069B8                 nop
.text:004069B9
.text:004069B9 loc_4069B9:                             ; CODE XREF: sub_406920+2E↑j
.text:004069B9                 nop
.text:004069BA                 nop
.text:004069BB
.text:004069BB loc_4069BB:                             ; CODE XREF: sub_406920+25↑j
.text:004069BB                                         ; sub_406980+19↑j
.text:004069BB                 nop
.text:004069BC                 nop
.text:004069BD                 nop
.text:004069BE                 nop
.text:004069BF                 nop
.text:004069BF sub_406980      endp ; sp-analysis failed
.text:004069BF
.text:004069C0
.text:004069C0 ; =============== S U B R O U T I N E =======================================
.text:004069C0
.text:004069C0
.text:004069C0 sub_4069C0      proc near               ; CODE XREF: sub_406980+1F↑j
.text:004069C0                                         ; DATA XREF: sub_406980:loc_40727F↓o
.text:004069C0
.text:004069C0 arg_A4          = dword ptr  0A8h
.text:004069C0 arg_B8          = dword ptr  0BCh
.text:004069C0
.text:004069C0 ; FUNCTION CHUNK AT .text:00406A5A SIZE 0000000A BYTES
.text:004069C0
.text:004069C0                 and     eax, 6F203A73h
.text:004069C5                 jo      short loc_406A3B
.text:004069C7
.text:004069C7 loc_4069C7:                             ; CODE XREF: sub_406920+39↑j
.text:004069C7                 imul    ebp, [edi+6Eh], 572D6020h
.text:004069CE                 and     ds:69202773h, ah
.text:004069D4                 jnb     short near ptr loc_4069F3+3
.text:004069D6                 popa
.text:004069D7                 insd
.text:004069D8                 bound   ebp, [ecx+67h]
.text:004069DB                 jnz     short near ptr loc_406A48+4
.text:004069DD                 jnz     short near ptr loc_406A51+1
.text:004069DF                 or      al, [eax]
.text:004069E1
.text:004069E1 loc_4069E1:                             ; DATA XREF: sub_406980+A0F↓o
.text:004069E1                 and     eax, 69203A73h
.text:004069E6                 insb
.text:004069E7                 insb
.text:004069E8                 db      65h, 67h
.text:004069E8                 popa
.text:004069EB                 insb
.text:004069EC                 and     [edi+70h], ch
.text:004069EF                 jz      short loc_406A5A
.text:004069F1                 outsd
.text:004069F2                 outsb
.text:004069F3
.text:004069F3 loc_4069F3:                             ; CODE XREF: sub_4069C0+14↑j
.text:004069F3                 and     ds:6325202Dh, ch
.text:004069F9                 or      al, [eax]
.text:004069F9 sub_4069C0      endp ; sp-analysis failed
.text:004069F9
.text:004069FB ; START OF FUNCTION CHUNK FOR sub_406980
.text:004069FB
.text:004069FB loc_4069FB:                             ; CODE XREF: sub_406980+5↑j
.text:004069FB                                         ; DATA XREF: sub_406980:loc_4073C7↓o
.text:004069FB                 and     eax, 69203A73h
.text:00406A00                 outsb
.text:00406A01                 jbe     short loc_406A64
.text:00406A03                 insb
.text:00406A04
.text:00406A04 loc_406A04:                             ; CODE XREF: sub_406980+15↑j
.text:00406A04                 imul    esp, [eax+6Fh], 6F697470h
.text:00406A0C                 outsb
.text:00406A0D                 and     ds:6325202Dh, ch
.text:00406A13                 or      al, [eax]
.text:00406A15
.text:00406A15 loc_406A15:                             ; CODE XREF: sub_406980+26↑j
.text:00406A15                                         ; DATA XREF: sub_406980:loc_4073EE↓o
.text:00406A15                 and     eax, 6F203A73h
.text:00406A1A                 jo      short near ptr loc_406A8F+1
.text:00406A1C                 imul    ebp, [edi+6Eh], 73256020h
.text:00406A23                 daa
.text:00406A24                 and     [ecx+73h], ch
.text:00406A27                 and     [ecx+6Dh], ah
.text:00406A2A                 bound   ebp, [ecx+67h]
.text:00406A2D                 jnz     short near ptr loc_406A9C+2
.text:00406A2F                 jnz     short near ptr loc_406AA3+1
.text:00406A31                 or      al, [eax]
.text:00406A33
.text:00406A33 loc_406A33:                             ; DATA XREF: sub_406980:loc_4075A0↓o
.text:00406A33                 push    eax
.text:00406A34                 dec     edi
.text:00406A35                 push    ebx
.text:00406A36                 dec     ecx
.text:00406A37                 pop     eax
.text:00406A38                 dec     esp
.text:00406A39                 pop     ecx
.text:00406A3A                 pop     edi
.text:00406A3B
.text:00406A3B loc_406A3B:                             ; CODE XREF: sub_4069C0+5↑j
.text:00406A3B                 inc     ebx
.text:00406A3C                 dec     edi
.text:00406A3D                 push    edx
.text:00406A3E                 push    edx
.text:00406A3F                 inc     ebp
.text:00406A40                 inc     ebx
.text:00406A41                 push    esp
.text:00406A42                 add     [ebp+0B6h], cl
.text:00406A48
.text:00406A48 loc_406A48:                             ; CODE XREF: sub_4069C0+1B↑j
.text:00406A48                 add     [ebp+27BCh], cl
.text:00406A48 ; END OF FUNCTION CHUNK FOR sub_406980
.text:00406A48 ; ---------------------------------------------------------------------------
.text:00406A4E                 dw 0
.text:00406A50 ; ---------------------------------------------------------------------------
.text:00406A50
.text:00406A50 loc_406A50:                             ; CODE XREF: sub_4075E0+5A↓p
.text:00406A50                                         ; .text:004076CA↓p ...
.text:00406A50                 push    ebp
.text:00406A51
.text:00406A51 loc_406A51:                             ; CODE XREF: sub_4069C0+1D↑j
.text:00406A51                 mov     eax, 0FFFFFFFFh
.text:00406A56                 push    edi
.text:00406A57                 push    esi
.text:00406A58                 push    ebx
.text:00406A58 ; ---------------------------------------------------------------------------
.text:00406A59                 db 83h
.text:00406A5A ; ---------------------------------------------------------------------------
.text:00406A5A ; START OF FUNCTION CHUNK FOR sub_4069C0
.text:00406A5A
.text:00406A5A loc_406A5A:                             ; CODE XREF: sub_4069C0+2F↑j
.text:00406A5A                 in      al, dx
.text:00406A5B                 dec     esp
.text:00406A5C                 mov     esi, [esp-40h+arg_A4]
.text:00406A60                 mov     ebp, [esp-40h+arg_B8]
.text:00406A60 ; END OF FUNCTION CHUNK FOR sub_4069C0
.text:00406A64 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00406A64
.text:00406A64 loc_406A64:                             ; CODE XREF: sub_406980+81↑j
.text:00406A64                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00406A67                 mov     ebx, [ebp+4]
.text:00406A6A                 setz    dl
.text:00406A6D                 movzx   ecx, dl
.text:00406A70                 dec     ecx
.text:00406A71                 and     ecx, ebx
.text:00406A73                 mov     [esp+arg_44], ecx
.text:00406A77                 mov     ecx, [esp+arg_5C]
.text:00406A7B                 test    ecx, ecx
.text:00406A7D                 jle     loc_406BA7
.text:00406A83                 mov     dword ptr [ebp+0Ch], 0
.text:00406A8A                 mov     ebx, [ebp+0]
.text:00406A8D                 test    ebx, ebx
.text:00406A8F
.text:00406A8F loc_406A8F:                             ; CODE XREF: sub_406980+9A↑j
.text:00406A8F                 jz      loc_4075C0
.text:00406A95                 mov     edi, [ebp+10h]
.text:00406A98                 test    edi, edi
.text:00406A9A                 jnz     short loc_406AF3
.text:00406A9C
.text:00406A9C loc_406A9C:                             ; CODE XREF: sub_406980+AD↑j
.text:00406A9C                 lea     esi, [esi+0]
.text:00406AA0
.text:00406AA0 loc_406AA0:                             ; CODE XREF: sub_406980+C4C↓j
.text:00406AA0                 mov     [ebp+24h], ebx
.text:00406AA3
.text:00406AA3 loc_406AA3:                             ; CODE XREF: sub_406980+AF↑j
.text:00406AA3                 mov     esi, [esp+Str]
.text:00406AA7                 mov     [ebp+20h], ebx
.text:00406AAA                 mov     ecx, [esp+arg_74]
.text:00406AAE                 xor     ebx, ebx
.text:00406AB0                 mov     dword ptr [ebp+14h], 0
.text:00406AB7                 test    ecx, ecx
.text:00406AB9                 jz      loc_4075A0
.text:00406ABF
.text:00406ABF loc_406ABF:                             ; CODE XREF: sub_406980+C34↓j
.text:00406ABF                 mov     ebx, 1
.text:00406AC4
.text:00406AC4 loc_406AC4:                             ; CODE XREF: sub_406980+C2E↓j
.text:00406AC4                 mov     [ebp+1Ch], ebx
.text:00406AC7                 mov     ecx, [esp+Str]
.text:00406ACB                 movzx   eax, byte ptr [ecx]
.text:00406ACE                 cmp     al, 2Dh ; '-'
.text:00406AD0                 jz      loc_407590
.text:00406AD6                 cmp     al, 2Bh ; '+'
.text:00406AD8                 jz      loc_407579
.text:00406ADE                 xor     edx, edx
.text:00406AE0                 test    ebx, ebx
.text:00406AE2                 setz    dl
.text:00406AE5                 mov     [ebp+18h], edx
.text:00406AE8
.text:00406AE8 loc_406AE8:                             ; CODE XREF: sub_406980+C05↓j
.text:00406AE8                 mov     [esp+Str], esi
.text:00406AEC                 mov     dword ptr [ebp+10h], 1
.text:00406AF3
.text:00406AF3 loc_406AF3:                             ; CODE XREF: sub_406980+11A↑j
.text:00406AF3                 mov     eax, [ebp+14h]
.text:00406AF6                 test    eax, eax
.text:00406AF8                 jz      short loc_406B03
.text:00406AFA                 cmp     byte ptr [eax], 0
.text:00406AFD                 jnz     loc_406BE0
.text:00406B03
.text:00406B03 loc_406B03:                             ; CODE XREF: sub_406980+178↑j
.text:00406B03                 mov     ebx, [ebp+0]
.text:00406B06                 cmp     [ebp+24h], ebx
.text:00406B09                 jle     short loc_406B0E
.text:00406B0B                 mov     [ebp+24h], ebx
.text:00406B0E
.text:00406B0E loc_406B0E:                             ; CODE XREF: sub_406980+189↑j
.text:00406B0E                 cmp     [ebp+20h], ebx
.text:00406B11                 jle     short loc_406B16
.text:00406B13                 mov     [ebp+20h], ebx
.text:00406B16
.text:00406B16 loc_406B16:                             ; CODE XREF: sub_406980+191↑j
.text:00406B16                 cmp     dword ptr [ebp+18h], 1
.text:00406B1A                 jz      loc_4074F0
.text:00406B20
.text:00406B20 loc_406B20:                             ; CODE XREF: sub_406980+BE3↓j
.text:00406B20                 cmp     ebx, [esp+arg_5C]
.text:00406B24                 jz      loc_4074D4
.text:00406B2A                 cld
.text:00406B2B                 mov     ecx, [esp+arg_60]
.text:00406B2F                 mov     edx, 3
.text:00406B34                 mov     edi, offset sub_406800
.text:00406B39                 mov     esi, [ecx+ebx*4]
.text:00406B3C                 mov     ecx, edx
.text:00406B3E                 repe cmpsb
.text:00406B40                 jnz     short loc_406B7C
.text:00406B42                 mov     edx, [ebp+24h]
.text:00406B45                 lea     eax, [ebx+1]
.text:00406B48                 cmp     [ebp+20h], edx
.text:00406B4B                 mov     [ebp+0], eax
.text:00406B4E                 jz      loc_4074E8
.text:00406B54                 cmp     edx, eax
.text:00406B56                 jz      short loc_406B70
.text:00406B58                 mov     [esp+Str2], ebp
.text:00406B5C                 mov     ebx, [esp+arg_60]
.text:00406B60                 mov     [esp+0], ebx
.text:00406B63                 call    sub_407700
.text:00406B68                 nop
.text:00406B69                 lea     esi, [esi+0]
.text:00406B70
.text:00406B70 loc_406B70:                             ; CODE XREF: sub_406980+1D6↑j
.text:00406B70                                         ; sub_406980+B6B↓j
.text:00406B70                 mov     eax, [esp+arg_5C]
.text:00406B74                 mov     ebx, eax
.text:00406B76                 mov     [ebp+24h], eax
.text:00406B79                 mov     [ebp+0], eax
.text:00406B7C
.text:00406B7C loc_406B7C:                             ; CODE XREF: sub_406980+1C0↑j
.text:00406B7C                 cmp     ebx, [esp+arg_5C]
.text:00406B80                 jz      loc_4074D4
.text:00406B86                 mov     esi, [esp+arg_60]
.text:00406B8A                 mov     eax, [esi+ebx*4]
.text:00406B8D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00406B90                 jz      short loc_406BB7
.text:00406B92
.text:00406B92 loc_406B92:                             ; CODE XREF: sub_406980+23D↓j
.text:00406B92                 mov     edx, [ebp+18h]
.text:00406B95                 test    edx, edx
.text:00406B97                 jz      short loc_406BB0
.text:00406B99                 mov     [ebp+0Ch], eax
.text:00406B9C                 lea     edi, [ebx+1]
.text:00406B9F                 mov     eax, 1
.text:00406BA4                 mov     [ebp+0], edi
.text:00406BA7
.text:00406BA7 loc_406BA7:                             ; CODE XREF: sub_406980+FD↑j
.text:00406BA7                                         ; sub_406980+235↓j ...
.text:00406BA7                 add     esp, 4Ch
.text:00406BAA                 pop     ebx
.text:00406BAB                 pop     esi
.text:00406BAC                 pop     edi
.text:00406BAD                 pop     ebp
.text:00406BAE                 retn
.text:00406BAE ; END OF FUNCTION CHUNK FOR sub_406980
.text:00406BAE ; ---------------------------------------------------------------------------
.text:00406BAF                 align 10h
.text:00406BB0 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00406BB0
.text:00406BB0 loc_406BB0:                             ; CODE XREF: sub_406980+217↑j
.text:00406BB0                                         ; sub_406980+B5A↓j ...
.text:00406BB0                 mov     eax, 0FFFFFFFFh
.text:00406BB5                 jmp     short loc_406BA7
.text:00406BB7 ; ---------------------------------------------------------------------------
.text:00406BB7
.text:00406BB7 loc_406BB7:                             ; CODE XREF: sub_406980+210↑j
.text:00406BB7                 movzx   edx, byte ptr [eax+1]
.text:00406BBB                 test    dl, dl
.text:00406BBD                 jz      short loc_406B92
.text:00406BBF                 mov     ebx, [esp+arg_68]
.text:00406BC3                 xor     ecx, ecx
.text:00406BC5                 test    ebx, ebx
.text:00406BC7                 jz      short loc_406BD2
.text:00406BC9                 cmp     dl, 2Dh ; '-'
.text:00406BCC                 jz      loc_4074CA
.text:00406BD2
.text:00406BD2 loc_406BD2:                             ; CODE XREF: sub_406980+247↑j
.text:00406BD2                                         ; sub_406980+B4F↓j
.text:00406BD2                 lea     esi, [ecx+eax+1]
.text:00406BD6                 mov     [ebp+14h], esi
.text:00406BD9                 lea     esi, [esi+0]
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: sub_406980+17D↑j
.text:00406BE0                 mov     ecx, [esp+arg_68]
.text:00406BE4                 test    ecx, ecx
.text:00406BE6                 jz      loc_406F70
.text:00406BEC                 mov     edx, [ebp+0]
.text:00406BEF                 mov     edi, [esp+arg_60]
.text:00406BF3                 mov     eax, [edi+edx*4]
.text:00406BF6                 movzx   edx, byte ptr [eax+1]
.text:00406BFA                 cmp     dl, 2Dh ; '-'
.text:00406BFD                 jz      short loc_406C15
.text:00406BFF                 mov     ebx, [esp+arg_70]
.text:00406C03                 test    ebx, ebx
.text:00406C05                 jz      loc_406F70
.text:00406C0B                 cmp     byte ptr [eax+2], 0
.text:00406C0F                 jz      loc_4074AA
.text:00406C15
.text:00406C15 loc_406C15:                             ; CODE XREF: sub_406980+27D↑j
.text:00406C15                                         ; sub_406980+B45↓j
.text:00406C15                 mov     [esp+arg_40], 0
.text:00406C1D                 mov     ecx, [ebp+14h]
.text:00406C20                 mov     [esp+arg_3C], 0
.text:00406C28                 mov     [esp+arg_38], 0
.text:00406C30                 mov     edi, ecx
.text:00406C32                 mov     [esp+arg_34], 0FFFFFFFFh
.text:00406C3A                 movzx   eax, byte ptr [ecx]
.text:00406C3D                 test    al, al
.text:00406C3F                 jz      short loc_406C5C
.text:00406C41                 cmp     al, 3Dh ; '='
.text:00406C43                 jz      short loc_406C5C
.text:00406C45                 lea     esi, [esi+0]
.text:00406C49                 lea     edi, [edi+0]
.text:00406C50
.text:00406C50 loc_406C50:                             ; CODE XREF: sub_406980+2DA↓j
.text:00406C50                 inc     edi
.text:00406C51                 movzx   eax, byte ptr [edi]
.text:00406C54                 test    al, al
.text:00406C56                 jz      short loc_406C5C
.text:00406C58                 cmp     al, 3Dh ; '='
.text:00406C5A                 jnz     short loc_406C50
.text:00406C5C
.text:00406C5C loc_406C5C:                             ; CODE XREF: sub_406980+2BF↑j
.text:00406C5C                                         ; sub_406980+2C3↑j ...
.text:00406C5C                 mov     [esp+arg_30], 0
.text:00406C64                 mov     esi, [esp+arg_68]
.text:00406C68                 mov     ebx, [esi]
.text:00406C6A                 test    ebx, ebx
.text:00406C6C                 mov     edx, ebx
.text:00406C6E                 jz      loc_406E90
.text:00406C74                 lea     esi, [esi+0]
.text:00406C7A                 lea     edi, [edi+0]
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: sub_406980+32E↓j
.text:00406C80                 mov     [esp+Str2], ecx ; Str2
.text:00406C84                 mov     ebx, edi
.text:00406C86                 sub     ebx, ecx
.text:00406C88                 mov     [esp+MaxCount], ebx ; MaxCount
.text:00406C8C                 mov     [esp+0], edx    ; Str1
.text:00406C8F                 call    strncmp
.text:00406C94                 test    eax, eax
.text:00406C96                 jz      loc_407426
.text:00406C9C
.text:00406C9C loc_406C9C:                             ; CODE XREF: sub_406980+ADF↓j
.text:00406C9C                                         ; sub_406980+AF4↓j ...
.text:00406C9C                 inc     [esp+arg_30]
.text:00406CA0                 add     esi, 10h
.text:00406CA3                 mov     ecx, [esi]
.text:00406CA5                 test    ecx, ecx
.text:00406CA7                 mov     edx, ecx
.text:00406CA9                 jz      short loc_406CB0
.text:00406CAB                 mov     ecx, [ebp+14h]
.text:00406CAE                 jmp     short loc_406C80
.text:00406CB0 ; ---------------------------------------------------------------------------
.text:00406CB0
.text:00406CB0 loc_406CB0:                             ; CODE XREF: sub_406980+329↑j
.text:00406CB0                                         ; sub_406980+B25↓j
.text:00406CB0                 mov     esi, [esp+arg_38]
.text:00406CB4                 test    esi, esi
.text:00406CB6                 jz      short loc_406CC4
.text:00406CB8                 mov     edx, [esp+arg_3C]
.text:00406CBC                 test    edx, edx
.text:00406CBE                 jz      loc_4073D0
.text:00406CC4
.text:00406CC4 loc_406CC4:                             ; CODE XREF: sub_406980+336↑j
.text:00406CC4                 mov     eax, [esp+arg_40]
.text:00406CC8                 test    eax, eax
.text:00406CCA                 jz      loc_406E90
.text:00406CD0                 mov     ecx, [ebp+0]
.text:00406CD3                 lea     eax, [ecx+1]
.text:00406CD6                 mov     [ebp+0], eax
.text:00406CD9                 cmp     byte ptr [edi], 0
.text:00406CDC                 jz      loc_406DF0
.text:00406CE2                 mov     ecx, [esp+arg_40]
.text:00406CE6                 mov     esi, [ecx+4]
.text:00406CE9                 test    esi, esi
.text:00406CEB                 jz      short loc_406D36
.text:00406CED                 lea     ebx, [edi+1]
.text:00406CF0                 mov     [ebp+0Ch], ebx
.text:00406CF3
.text:00406CF3 loc_406CF3:                             ; CODE XREF: sub_406980+478↓j
.text:00406CF3                                         ; sub_406980+494↓j
.text:00406CF3                 mov     ebx, [ebp+14h]
.text:00406CF6                 mov     [esp+0], ebx    ; Str
.text:00406CF9                 call    strlen
.text:00406CFE                 add     [ebp+14h], eax
.text:00406D01                 mov     esi, [esp+arg_6C]
.text:00406D05                 test    esi, esi
.text:00406D07                 jz      short loc_406D13
.text:00406D09                 mov     ebp, [esp+arg_34]
.text:00406D0D                 mov     ecx, [esp+arg_6C]
.text:00406D11                 mov     [ecx], ebp
.text:00406D13
.text:00406D13 loc_406D13:                             ; CODE XREF: sub_406980+387↑j
.text:00406D13                 mov     eax, [esp+arg_40]
.text:00406D17                 mov     ecx, [eax+8]
.text:00406D1A                 test    ecx, ecx
.text:00406D1C                 jnz     short loc_406D2A
.text:00406D1E                 mov     ecx, [esp+arg_40]
.text:00406D22
.text:00406D22 loc_406D22:                             ; CODE XREF: sub_406980+7F3↓j
.text:00406D22                 mov     eax, [ecx+0Ch]
.text:00406D25                 jmp     loc_406BA7
.text:00406D2A ; ---------------------------------------------------------------------------
.text:00406D2A
.text:00406D2A loc_406D2A:                             ; CODE XREF: sub_406980+39C↑j
.text:00406D2A                                         ; sub_406980+7E9↓j
.text:00406D2A                 mov     esi, [eax+0Ch]
.text:00406D2D                 xor     eax, eax
.text:00406D2F                 mov     [ecx], esi
.text:00406D31                 jmp     loc_406BA7
.text:00406D36 ; ---------------------------------------------------------------------------
.text:00406D36
.text:00406D36 loc_406D36:                             ; CODE XREF: sub_406980+36B↑j
.text:00406D36                 mov     edi, [esp+arg_44]
.text:00406D3A                 test    edi, edi
.text:00406D3C                 jz      short loc_406D90
.text:00406D3E                 mov     esi, [esp+arg_60]
.text:00406D42                 mov     edx, [esi+eax*4-4]
.text:00406D46                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00406D4A                 jz      short loc_406DB2
.text:00406D4C                 mov     dword ptr [esp+0], offset sub_406820
.text:00406D53                 call    ds:libintl_gettext
.text:00406D59                 mov     edx, [esp+arg_40]
.text:00406D5D                 mov     edi, [edx]
.text:00406D5F                 mov     [esp+arg_C], edi
.text:00406D63                 mov     ebx, [ebp+0]
.text:00406D66                 mov     edi, [esp+arg_60]
.text:00406D6A                 mov     ecx, [edi+ebx*4-4]
.text:00406D6E                 movsx   esi, byte ptr [ecx]
.text:00406D71                 mov     ecx, ds:_iob
.text:00406D77                 add     ecx, 40h ; '@'
.text:00406D7A                 mov     [esp+arg_8], esi
.text:00406D7E                 mov     ebx, [edi]
.text:00406D80                 mov     [esp+Str2], eax ; Format
.text:00406D84                 mov     [esp+0], ecx    ; Stream
.text:00406D87                 mov     [esp+MaxCount], ebx
.text:00406D8B                 call    fprintf
.text:00406D90
.text:00406D90 loc_406D90:                             ; CODE XREF: sub_406980+3BC↑j
.text:00406D90                                         ; sub_406980+468↓j
.text:00406D90                 mov     ecx, [ebp+14h]
.text:00406D93                 mov     [esp+0], ecx    ; Str
.text:00406D96                 call    strlen
.text:00406D9B                 add     [ebp+14h], eax
.text:00406D9E                 mov     eax, [esp+arg_40]
.text:00406DA2                 mov     esi, [eax+0Ch]
.text:00406DA5                 mov     [ebp+8], esi
.text:00406DA8
.text:00406DA8 loc_406DA8:                             ; CODE XREF: sub_406980+5B5↓j
.text:00406DA8                                         ; sub_406980+80E↓j ...
.text:00406DA8                 mov     eax, 3Fh ; '?'
.text:00406DAD                 jmp     loc_406BA7
.text:00406DB2 ; ---------------------------------------------------------------------------
.text:00406DB2
.text:00406DB2 loc_406DB2:                             ; CODE XREF: sub_406980+3CA↑j
.text:00406DB2                 mov     dword ptr [esp+0], offset sub_406860
.text:00406DB9                 call    ds:libintl_gettext
.text:00406DBF                 mov     edx, [esp+arg_40]
.text:00406DC3                 mov     edi, [esp+arg_60]
.text:00406DC7                 mov     ecx, ds:_iob
.text:00406DCD                 mov     esi, [edx]
.text:00406DCF                 add     ecx, 40h ; '@'
.text:00406DD2                 mov     [esp+arg_8], esi
.text:00406DD6                 mov     ebx, [edi]
.text:00406DD8                 mov     [esp+Str2], eax ; Format
.text:00406DDC                 mov     [esp+0], ecx    ; Stream
.text:00406DDF                 mov     [esp+MaxCount], ebx
.text:00406DE3                 call    fprintf
.text:00406DE8                 jmp     short loc_406D90
.text:00406DE8 ; END OF FUNCTION CHUNK FOR sub_406980
.text:00406DE8 ; ---------------------------------------------------------------------------
.text:00406DEA                 align 10h
.text:00406DF0 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00406DF0
.text:00406DF0 loc_406DF0:                             ; CODE XREF: sub_406980+35C↑j
.text:00406DF0                 mov     ebx, [esp+arg_40]
.text:00406DF4                 cmp     dword ptr [ebx+4], 1
.text:00406DF8                 jnz     loc_406CF3
.text:00406DFE                 cmp     eax, [esp+arg_5C]
.text:00406E02                 jge     short loc_406E19
.text:00406E04                 mov     ebx, [esp+arg_60]
.text:00406E08                 lea     edi, [ecx+2]
.text:00406E0B                 mov     [ebp+0], edi
.text:00406E0E                 mov     esi, [ebx+eax*4]
.text:00406E11                 mov     [ebp+0Ch], esi
.text:00406E14                 jmp     loc_406CF3
.text:00406E19 ; ---------------------------------------------------------------------------
.text:00406E19
.text:00406E19 loc_406E19:                             ; CODE XREF: sub_406980+482↑j
.text:00406E19                 mov     edx, [esp+arg_44]
.text:00406E1D                 test    edx, edx
.text:00406E1F                 jnz     short loc_406E50
.text:00406E21
.text:00406E21 loc_406E21:                             ; CODE XREF: sub_406980+507↓j
.text:00406E21                 mov     edx, [ebp+14h]
.text:00406E24                 mov     [esp+0], edx    ; Str
.text:00406E27                 call    strlen
.text:00406E2C                 add     [ebp+14h], eax
.text:00406E2F                 mov     eax, [esp+arg_40]
.text:00406E33                 mov     edi, [eax+0Ch]
.text:00406E36                 mov     [ebp+8], edi
.text:00406E39
.text:00406E39 loc_406E39:                             ; CODE XREF: sub_406980+892↓j
.text:00406E39                 mov     ebp, [esp+Str]
.text:00406E3D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00406E41                 setnz   bl
.text:00406E44                 movzx   esi, bl
.text:00406E47                 lea     eax, [esi+esi*4+3Ah]
.text:00406E4B                 jmp     loc_406BA7
.text:00406E50 ; ---------------------------------------------------------------------------
.text:00406E50
.text:00406E50 loc_406E50:                             ; CODE XREF: sub_406980+49F↑j
.text:00406E50                 mov     dword ptr [esp+0], offset sub_4068A0
.text:00406E57                 call    ds:libintl_gettext
.text:00406E5D                 mov     ecx, [ebp+0]
.text:00406E60                 mov     esi, [esp+arg_60]
.text:00406E64                 mov     ebx, [esi+ecx*4-4]
.text:00406E68                 mov     ecx, ds:_iob
.text:00406E6E                 mov     [esp+arg_8], ebx
.text:00406E72                 mov     edi, [esi]
.text:00406E74                 add     ecx, 40h ; '@'
.text:00406E77                 mov     [esp+Str2], eax ; Format
.text:00406E7B                 mov     [esp+0], ecx    ; Stream
.text:00406E7E                 mov     [esp+MaxCount], edi
.text:00406E82                 call    fprintf
.text:00406E87                 jmp     short loc_406E21
.text:00406E87 ; END OF FUNCTION CHUNK FOR sub_406980
.text:00406E87 ; ---------------------------------------------------------------------------
.text:00406E89                 align 10h
.text:00406E90 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: sub_406980+2EE↑j
.text:00406E90                                         ; sub_406980+34A↑j
.text:00406E90                 mov     eax, [esp+arg_70]
.text:00406E94                 test    eax, eax
.text:00406E96                 jz      short loc_406EC6
.text:00406E98                 mov     ebx, [ebp+0]
.text:00406E9B                 mov     esi, [esp+arg_60]
.text:00406E9F                 mov     edi, [esi+ebx*4]
.text:00406EA2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00406EA6                 jz      short loc_406EC9
.text:00406EA8                 mov     ecx, [ebp+14h]
.text:00406EAB                 mov     edx, [esp+Str]
.text:00406EAF                 movsx   ebx, byte ptr [ecx]
.text:00406EB2                 mov     [esp+0], edx    ; Str
.text:00406EB5                 mov     [esp+Str2], ebx ; Val
.text:00406EB9                 call    strchr
.text:00406EBE                 test    eax, eax
.text:00406EC0                 jnz     loc_406F70
.text:00406EC6
.text:00406EC6 loc_406EC6:                             ; CODE XREF: sub_406980+516↑j
.text:00406EC6                 mov     ebx, [ebp+0]
.text:00406EC9
.text:00406EC9 loc_406EC9:                             ; CODE XREF: sub_406980+526↑j
.text:00406EC9                 mov     eax, [esp+arg_44]
.text:00406ECD                 test    eax, eax
.text:00406ECF                 jz      short loc_406F21
.text:00406ED1                 mov     esi, [esp+arg_60]
.text:00406ED5                 mov     edi, [esi+ebx*4]
.text:00406ED8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00406EDC                 jz      short loc_406F3A
.text:00406EDE                 mov     dword ptr [esp+0], offset sub_4068E0
.text:00406EE5                 call    ds:libintl_gettext
.text:00406EEB                 mov     edi, [ebp+14h]
.text:00406EEE                 mov     [esp+arg_C], edi
.text:00406EF2                 mov     ebx, [ebp+0]
.text:00406EF5                 mov     edi, [esp+arg_60]
.text:00406EF9                 mov     esi, [edi+ebx*4]
.text:00406EFC                 movsx   ecx, byte ptr [esi]
.text:00406EFF                 mov     esi, ds:_iob
.text:00406F05                 add     esi, 40h ; '@'
.text:00406F08                 mov     [esp+arg_8], ecx
.text:00406F0C                 mov     ebx, [edi]
.text:00406F0E                 mov     [esp+Str2], eax ; Format
.text:00406F12                 mov     [esp+0], esi    ; Stream
.text:00406F15                 mov     [esp+MaxCount], ebx
.text:00406F19                 call    fprintf
.text:00406F1E
.text:00406F1E loc_406F1E:                             ; CODE XREF: sub_406980+5ED↓j
.text:00406F1E                 mov     ebx, [ebp+0]
.text:00406F21
.text:00406F21 loc_406F21:                             ; CODE XREF: sub_406980+54F↑j
.text:00406F21                 mov     dword ptr [ebp+14h], offset loc_406900
.text:00406F28                 lea     edx, [ebx+1]
.text:00406F2B                 mov     [ebp+0], edx
.text:00406F2E
.text:00406F2E loc_406F2E:                             ; CODE XREF: sub_406980+A69↓j
.text:00406F2E                 mov     dword ptr [ebp+8], 0
.text:00406F35                 jmp     loc_406DA8
.text:00406F3A ; ---------------------------------------------------------------------------
.text:00406F3A
.text:00406F3A loc_406F3A:                             ; CODE XREF: sub_406980+55C↑j
.text:00406F3A                 mov     dword ptr [esp+0], offset sub_406920
.text:00406F41                 call    ds:libintl_gettext
.text:00406F47                 mov     ecx, [ebp+14h]
.text:00406F4A                 mov     edi, [esp+arg_60]
.text:00406F4E                 mov     edx, ds:_iob
.text:00406F54                 mov     [esp+arg_8], ecx
.text:00406F58                 mov     ebx, [edi]
.text:00406F5A                 add     edx, 40h ; '@'
.text:00406F5D                 mov     [esp+Str2], eax ; Format
.text:00406F61                 mov     [esp+MaxCount], ebx
.text:00406F65                 mov     [esp+0], edx    ; Stream
.text:00406F68                 call    fprintf
.text:00406F6D                 jmp     short loc_406F1E
.text:00406F6D ; END OF FUNCTION CHUNK FOR sub_406980
.text:00406F6D ; ---------------------------------------------------------------------------
.text:00406F6F                 align 10h
.text:00406F70 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00406F70
.text:00406F70 loc_406F70:                             ; CODE XREF: sub_406980+266↑j
.text:00406F70                                         ; sub_406980+285↑j ...
.text:00406F70                 mov     esi, [ebp+14h]
.text:00406F73                 movzx   ebx, byte ptr [esi]
.text:00406F76                 inc     esi
.text:00406F77                 mov     [ebp+14h], esi
.text:00406F7A                 mov     ecx, [esp+Str]
.text:00406F7E                 movsx   esi, bl
.text:00406F81                 mov     [esp+Str2], esi ; Val
.text:00406F85                 mov     edi, esi
.text:00406F87                 mov     [esp+0], ecx    ; Str
.text:00406F8A                 call    strchr
.text:00406F8F                 mov     ecx, [ebp+14h]
.text:00406F92                 cmp     byte ptr [ecx], 0
.text:00406F95                 jnz     short loc_406F9A
.text:00406F97                 inc     dword ptr [ebp+0]
.text:00406F9A
.text:00406F9A loc_406F9A:                             ; CODE XREF: sub_406980+615↑j
.text:00406F9A                 test    eax, eax
.text:00406F9C                 jz      loc_407380
.text:00406FA2                 cmp     bl, 3Ah ; ':'
.text:00406FA5                 jz      loc_407380
.text:00406FAB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00406FAE                 jz      loc_407066
.text:00406FB4                 movzx   edx, byte ptr [eax+1]
.text:00406FB8
.text:00406FB8 loc_406FB8:                             ; CODE XREF: sub_406980+6ED↓j
.text:00406FB8                 cmp     dl, 3Ah ; ':'
.text:00406FBB                 jz      short loc_406FC4
.text:00406FBD
.text:00406FBD loc_406FBD:                             ; CODE XREF: sub_406980+660↓j
.text:00406FBD                 mov     eax, esi
.text:00406FBF                 jmp     loc_406BA7
.text:00406FC4 ; ---------------------------------------------------------------------------
.text:00406FC4
.text:00406FC4 loc_406FC4:                             ; CODE XREF: sub_406980+63B↑j
.text:00406FC4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00406FC8                 jz      loc_407051
.text:00406FCE                 cmp     byte ptr [ecx], 0
.text:00406FD1                 jz      short loc_406FE2
.text:00406FD3
.text:00406FD3 loc_406FD3:                             ; CODE XREF: sub_406980+6D4↓j
.text:00406FD3                 inc     dword ptr [ebp+0]
.text:00406FD6                 mov     [ebp+0Ch], ecx
.text:00406FD9
.text:00406FD9 loc_406FD9:                             ; CODE XREF: sub_406980+67B↓j
.text:00406FD9                                         ; sub_406980+696↓j ...
.text:00406FD9                 mov     dword ptr [ebp+14h], 0
.text:00406FE0                 jmp     short loc_406FBD
.text:00406FE2 ; ---------------------------------------------------------------------------
.text:00406FE2
.text:00406FE2 loc_406FE2:                             ; CODE XREF: sub_406980+651↑j
.text:00406FE2                 mov     ecx, [ebp+0]
.text:00406FE5                 cmp     ecx, [esp+arg_5C]
.text:00406FE9                 jz      short loc_406FFD
.text:00406FEB                 mov     eax, [esp+arg_60]
.text:00406FEF                 lea     edx, [ecx+1]
.text:00406FF2                 mov     [ebp+0], edx
.text:00406FF5                 mov     ebx, [eax+ecx*4]
.text:00406FF8                 mov     [ebp+0Ch], ebx
.text:00406FFB                 jmp     short loc_406FD9
.text:00406FFD ; ---------------------------------------------------------------------------
.text:00406FFD
.text:00406FFD loc_406FFD:                             ; CODE XREF: sub_406980+669↑j
.text:00406FFD                 mov     ecx, [esp+arg_44]
.text:00407001                 test    ecx, ecx
.text:00407003                 jnz     short loc_40701F
.text:00407005
.text:00407005 loc_407005:                             ; CODE XREF: sub_406980+6CF↓j
.text:00407005                 mov     [ebp+8], edi
.text:00407008                 mov     edi, [esp+Str]
.text:0040700C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040700F                 jz      short loc_407018
.text:00407011                 mov     esi, 3Fh ; '?'
.text:00407016                 jmp     short loc_406FD9
.text:00407018 ; ---------------------------------------------------------------------------
.text:00407018
.text:00407018 loc_407018:                             ; CODE XREF: sub_406980+68F↑j
.text:00407018                 mov     esi, 3Ah ; ':'
.text:0040701D                 jmp     short loc_406FD9
.text:0040701F ; ---------------------------------------------------------------------------
.text:0040701F
.text:0040701F loc_40701F:                             ; CODE XREF: sub_406980+683↑j
.text:0040701F                 mov     dword ptr [esp+0], 406940h
.text:00407026                 call    ds:libintl_gettext
.text:0040702C                 mov     [esp+arg_8], edi
.text:00407030                 mov     ebx, [esp+arg_60]
.text:00407034                 mov     edx, ds:_iob
.text:0040703A                 mov     esi, [ebx]
.text:0040703C                 add     edx, 40h ; '@'
.text:0040703F                 mov     [esp+Str2], eax ; Format
.text:00407043                 mov     [esp+MaxCount], esi
.text:00407047                 mov     [esp+0], edx    ; Stream
.text:0040704A                 call    fprintf
.text:0040704F                 jmp     short loc_407005
.text:00407051 ; ---------------------------------------------------------------------------
.text:00407051
.text:00407051 loc_407051:                             ; CODE XREF: sub_406980+648↑j
.text:00407051                 cmp     byte ptr [ecx], 0
.text:00407054                 jnz     loc_406FD3
.text:0040705A                 mov     dword ptr [ebp+0Ch], 0
.text:00407061                 jmp     loc_406FD9
.text:00407066 ; ---------------------------------------------------------------------------
.text:00407066
.text:00407066 loc_407066:                             ; CODE XREF: sub_406980+62E↑j
.text:00407066                 movzx   edx, byte ptr [eax+1]
.text:0040706A                 cmp     dl, 3Bh ; ';'
.text:0040706D                 jnz     loc_406FB8
.text:00407073                 mov     [esp+arg_2C], 0
.text:0040707B                 mov     [esp+arg_28], 0
.text:00407083                 mov     [esp+arg_24], 0
.text:0040708B                 mov     [esp+arg_20], 0
.text:00407093                 cmp     byte ptr [ecx], 0
.text:00407096                 jz      loc_40730B
.text:0040709C                 inc     dword ptr [ebp+0]
.text:0040709F                 mov     [ebp+0Ch], ecx
.text:004070A2
.text:004070A2 loc_4070A2:                             ; CODE XREF: sub_406980+9A4↓j
.text:004070A2                 mov     edi, [ebp+0Ch]
.text:004070A5                 mov     [ebp+14h], edi
.text:004070A8                 movzx   eax, byte ptr [edi]
.text:004070AB                 test    al, al
.text:004070AD                 jz      short loc_4070BF
.text:004070AF                 cmp     al, 3Dh ; '='
.text:004070B1                 jz      short loc_4070BF
.text:004070B3
.text:004070B3 loc_4070B3:                             ; CODE XREF: sub_406980+73D↓j
.text:004070B3                 inc     edi
.text:004070B4                 movzx   eax, byte ptr [edi]
.text:004070B7                 test    al, al
.text:004070B9                 jz      short loc_4070BF
.text:004070BB                 cmp     al, 3Dh ; '='
.text:004070BD                 jnz     short loc_4070B3
.text:004070BF
.text:004070BF loc_4070BF:                             ; CODE XREF: sub_406980+72D↑j
.text:004070BF                                         ; sub_406980+731↑j ...
.text:004070BF                 mov     [esp+arg_1C], 0
.text:004070C7                 mov     esi, [esp+arg_68]
.text:004070CB                 mov     eax, [esi]
.text:004070CD                 test    eax, eax
.text:004070CF                 jz      loc_407250
.text:004070D5                 mov     ecx, eax
.text:004070D7
.text:004070D7 loc_4070D7:                             ; CODE XREF: sub_406980+783↓j
.text:004070D7                 mov     ebx, [ebp+14h]
.text:004070DA                 mov     eax, edi
.text:004070DC                 mov     [esp+0], ecx    ; Str1
.text:004070DF                 sub     eax, ebx
.text:004070E1                 mov     [esp+MaxCount], eax ; MaxCount
.text:004070E5                 mov     [esp+Str2], ebx ; Str2
.text:004070E9                 call    strncmp
.text:004070EE                 test    eax, eax
.text:004070F0                 jz      loc_4072B7
.text:004070F6
.text:004070F6 loc_4070F6:                             ; CODE XREF: sub_406980+95C↓j
.text:004070F6                                         ; sub_406980+96D↓j
.text:004070F6                 inc     [esp+arg_1C]
.text:004070FA                 add     esi, 10h
.text:004070FD                 mov     edx, [esi]
.text:004070FF                 test    edx, edx
.text:00407101                 mov     ecx, edx
.text:00407103                 jnz     short loc_4070D7
.text:00407105
.text:00407105 loc_407105:                             ; CODE XREF: sub_406980+986↓j
.text:00407105                 mov     esi, [esp+arg_24]
.text:00407109                 test    esi, esi
.text:0040710B                 jz      short loc_407119
.text:0040710D                 mov     ebx, [esp+arg_28]
.text:00407111                 test    ebx, ebx
.text:00407113                 jz      loc_407261
.text:00407119
.text:00407119 loc_407119:                             ; CODE XREF: sub_406980+78B↑j
.text:00407119                 mov     esi, [esp+arg_2C]
.text:0040711D                 test    esi, esi
.text:0040711F                 jz      loc_407250
.text:00407125                 cmp     byte ptr [edi], 0
.text:00407128                 jz      loc_4071D0
.text:0040712E                 mov     ecx, [esp+arg_2C]
.text:00407132                 mov     ebx, [ecx+4]
.text:00407135                 test    ebx, ebx
.text:00407137                 jz      short loc_407178
.text:00407139                 lea     edx, [edi+1]
.text:0040713C                 mov     [ebp+0Ch], edx
.text:0040713F
.text:0040713F loc_40713F:                             ; CODE XREF: sub_406980+858↓j
.text:0040713F                                         ; sub_406980+877↓j
.text:0040713F                 mov     edi, [ebp+14h]
.text:00407142                 mov     [esp+0], edi    ; Str
.text:00407145                 call    strlen
.text:0040714A                 add     [ebp+14h], eax
.text:0040714D                 mov     eax, [esp+arg_6C]
.text:00407151                 test    eax, eax
.text:00407153                 jz      short loc_407160
.text:00407155                 mov     edx, [esp+arg_20]
.text:00407159                 mov     ebp, [esp+arg_6C]
.text:0040715D                 mov     [ebp+0], edx
.text:00407160
.text:00407160 loc_407160:                             ; CODE XREF: sub_406980+7D3↑j
.text:00407160                 mov     eax, [esp+arg_2C]
.text:00407164                 mov     ecx, [eax+8]
.text:00407167                 test    ecx, ecx
.text:00407169                 jnz     loc_406D2A
.text:0040716F                 mov     ecx, [esp+arg_2C]
.text:00407173                 jmp     loc_406D22
.text:00407178 ; ---------------------------------------------------------------------------
.text:00407178
.text:00407178 loc_407178:                             ; CODE XREF: sub_406980+7B7↑j
.text:00407178                 mov     eax, [esp+arg_44]
.text:0040717C                 test    eax, eax
.text:0040717E                 jnz     short loc_407193
.text:00407180
.text:00407180 loc_407180:                             ; CODE XREF: sub_406980+849↓j
.text:00407180                 mov     ecx, [ebp+14h]
.text:00407183                 mov     [esp+0], ecx    ; Str
.text:00407186                 call    strlen
.text:0040718B                 add     [ebp+14h], eax
.text:0040718E                 jmp     loc_406DA8
.text:00407193 ; ---------------------------------------------------------------------------
.text:00407193
.text:00407193 loc_407193:                             ; CODE XREF: sub_406980+7FE↑j
.text:00407193                 mov     dword ptr [esp+0], offset sub_406980
.text:0040719A                 call    ds:libintl_gettext
.text:004071A0                 mov     edx, [esp+arg_2C]
.text:004071A4                 mov     ebx, [esp+arg_60]
.text:004071A8                 mov     edi, [edx]
.text:004071AA                 mov     [esp+arg_8], edi
.text:004071AE                 mov     edi, ds:_iob
.text:004071B4                 mov     esi, [ebx]
.text:004071B6                 mov     [esp+Str2], eax ; Format
.text:004071BA                 add     edi, 40h ; '@'
.text:004071BD                 mov     [esp+MaxCount], esi
.text:004071C1                 mov     [esp+0], edi    ; Stream
.text:004071C4                 call    fprintf
.text:004071C9                 jmp     short loc_407180
.text:004071C9 ; END OF FUNCTION CHUNK FOR sub_406980
.text:004071C9 ; ---------------------------------------------------------------------------
.text:004071CB                 align 10h
.text:004071D0 ; START OF FUNCTION CHUNK FOR sub_406980
.text:004071D0
.text:004071D0 loc_4071D0:                             ; CODE XREF: sub_406980+7A8↑j
.text:004071D0                 mov     esi, [esp+arg_2C]
.text:004071D4                 cmp     dword ptr [esi+4], 1
.text:004071D8                 jnz     loc_40713F
.text:004071DE                 mov     ecx, [ebp+0]
.text:004071E1                 cmp     ecx, [esp+arg_5C]
.text:004071E5                 jge     short loc_4071FC
.text:004071E7                 mov     eax, [esp+arg_60]
.text:004071EB                 lea     ebx, [ecx+1]
.text:004071EE                 mov     [ebp+0], ebx
.text:004071F1                 mov     edi, [eax+ecx*4]
.text:004071F4                 mov     [ebp+0Ch], edi
.text:004071F7                 jmp     loc_40713F
.text:004071FC ; ---------------------------------------------------------------------------
.text:004071FC
.text:004071FC loc_4071FC:                             ; CODE XREF: sub_406980+865↑j
.text:004071FC                 mov     edx, [esp+arg_44]
.text:00407200                 test    edx, edx
.text:00407202                 jnz     short loc_407217
.text:00407204
.text:00407204 loc_407204:                             ; CODE XREF: sub_406980+8CE↓j
.text:00407204                 mov     edx, [ebp+14h]
.text:00407207                 mov     [esp+0], edx    ; Str
.text:0040720A                 call    strlen
.text:0040720F                 add     [ebp+14h], eax
.text:00407212                 jmp     loc_406E39
.text:00407217 ; ---------------------------------------------------------------------------
.text:00407217
.text:00407217 loc_407217:                             ; CODE XREF: sub_406980+882↑j
.text:00407217                 mov     dword ptr [esp+0], offset sub_4068A0
.text:0040721E                 call    ds:libintl_gettext
.text:00407224                 mov     ecx, [ebp+0]
.text:00407227                 mov     ebx, [esp+arg_60]
.text:0040722B                 mov     edi, [ebx+ecx*4-4]
.text:0040722F                 mov     ecx, ds:_iob
.text:00407235                 mov     [esp+arg_8], edi
.text:00407239                 mov     esi, [ebx]
.text:0040723B                 add     ecx, 40h ; '@'
.text:0040723E                 mov     [esp+Str2], eax ; Format
.text:00407242                 mov     [esp+0], ecx    ; Stream
.text:00407245                 mov     [esp+MaxCount], esi
.text:00407249                 call    fprintf
.text:0040724E                 jmp     short loc_407204
.text:00407250 ; ---------------------------------------------------------------------------
.text:00407250
.text:00407250 loc_407250:                             ; CODE XREF: sub_406980+74F↑j
.text:00407250                                         ; sub_406980+79F↑j
.text:00407250                 mov     dword ptr [ebp+14h], 0
.text:00407257                 mov     eax, 57h ; 'W'
.text:0040725C                 jmp     loc_406BA7
.text:00407261 ; ---------------------------------------------------------------------------
.text:00407261
.text:00407261 loc_407261:                             ; CODE XREF: sub_406980+793↑j
.text:00407261                 mov     edi, [esp+arg_44]
.text:00407265                 test    edi, edi
.text:00407267                 jnz     short loc_40727F
.text:00407269
.text:00407269 loc_407269:                             ; CODE XREF: sub_406980+935↓j
.text:00407269                 mov     edx, [ebp+14h]
.text:0040726C                 mov     [esp+0], edx    ; Str
.text:0040726F                 call    strlen
.text:00407274                 add     [ebp+14h], eax
.text:00407277                 inc     dword ptr [ebp+0]
.text:0040727A                 jmp     loc_406DA8
.text:0040727F ; ---------------------------------------------------------------------------
.text:0040727F
.text:0040727F loc_40727F:                             ; CODE XREF: sub_406980+8E7↑j
.text:0040727F                 mov     dword ptr [esp+0], offset sub_4069C0
.text:00407286                 call    ds:libintl_gettext
.text:0040728C                 mov     ecx, [ebp+0]
.text:0040728F                 mov     ebx, [esp+arg_60]
.text:00407293                 mov     edi, [ebx+ecx*4]
.text:00407296                 mov     ecx, ds:_iob
.text:0040729C                 mov     [esp+arg_8], edi
.text:004072A0                 mov     esi, [ebx]
.text:004072A2                 add     ecx, 40h ; '@'
.text:004072A5                 mov     [esp+Str2], eax ; Format
.text:004072A9                 mov     [esp+0], ecx    ; Stream
.text:004072AC                 mov     [esp+MaxCount], esi
.text:004072B0                 call    fprintf
.text:004072B5                 jmp     short loc_407269
.text:004072B7 ; ---------------------------------------------------------------------------
.text:004072B7
.text:004072B7 loc_4072B7:                             ; CODE XREF: sub_406980+770↑j
.text:004072B7                 mov     edx, [ebp+14h]
.text:004072BA                 mov     ebx, edi
.text:004072BC                 mov     ecx, [esi]
.text:004072BE                 sub     ebx, edx
.text:004072C0                 mov     [esp+0], ecx    ; Str
.text:004072C3                 call    strlen
.text:004072C8                 cmp     ebx, eax
.text:004072CA                 jz      short loc_4072F2
.text:004072CC                 mov     ebx, [esp+arg_2C]
.text:004072D0                 test    ebx, ebx
.text:004072D2                 jz      short loc_4072E1
.text:004072D4                 mov     [esp+arg_24], 1
.text:004072DC                 jmp     loc_4070F6
.text:004072E1 ; ---------------------------------------------------------------------------
.text:004072E1
.text:004072E1 loc_4072E1:                             ; CODE XREF: sub_406980+952↑j
.text:004072E1                 mov     [esp+arg_2C], esi
.text:004072E5                 mov     ecx, [esp+arg_1C]
.text:004072E9                 mov     [esp+arg_20], ecx
.text:004072ED                 jmp     loc_4070F6
.text:004072F2 ; ---------------------------------------------------------------------------
.text:004072F2
.text:004072F2 loc_4072F2:                             ; CODE XREF: sub_406980+94A↑j
.text:004072F2                 mov     [esp+arg_2C], esi
.text:004072F6                 mov     eax, [esp+arg_1C]
.text:004072FA                 mov     [esp+arg_28], 1
.text:00407302                 mov     [esp+arg_20], eax
.text:00407306                 jmp     loc_407105
.text:0040730B ; ---------------------------------------------------------------------------
.text:0040730B
.text:0040730B loc_40730B:                             ; CODE XREF: sub_406980+716↑j
.text:0040730B                 mov     edx, [ebp+0]
.text:0040730E                 cmp     edx, [esp+arg_5C]
.text:00407312                 jz      short loc_407329
.text:00407314                 mov     ebx, [esp+arg_60]
.text:00407318                 lea     esi, [edx+1]
.text:0040731B                 mov     [ebp+0], esi
.text:0040731E                 mov     edi, [ebx+edx*4]
.text:00407321                 mov     [ebp+0Ch], edi
.text:00407324                 jmp     loc_4070A2
.text:00407329 ; ---------------------------------------------------------------------------
.text:00407329
.text:00407329 loc_407329:                             ; CODE XREF: sub_406980+992↑j
.text:00407329                 mov     edi, [esp+arg_44]
.text:0040732D                 test    edi, edi
.text:0040732F                 jnz     short loc_40734C
.text:00407331
.text:00407331 loc_407331:                             ; CODE XREF: sub_406980+9FC↓j
.text:00407331                 mov     [ebp+8], esi
.text:00407334                 mov     ebp, [esp+Str]
.text:00407338                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040733C                 jz      short loc_407348
.text:0040733E                 mov     bl, 3Fh ; '?'
.text:00407340
.text:00407340 loc_407340:                             ; CODE XREF: sub_406980+9CA↓j
.text:00407340                 movsx   eax, bl
.text:00407343                 jmp     loc_406BA7
.text:00407348 ; ---------------------------------------------------------------------------
.text:00407348
.text:00407348 loc_407348:                             ; CODE XREF: sub_406980+9BC↑j
.text:00407348                 mov     bl, 3Ah ; ':'
.text:0040734A                 jmp     short loc_407340
.text:0040734C ; ---------------------------------------------------------------------------
.text:0040734C
.text:0040734C loc_40734C:                             ; CODE XREF: sub_406980+9AF↑j
.text:0040734C                 mov     dword ptr [esp+0], 406940h
.text:00407353                 call    ds:libintl_gettext
.text:00407359                 mov     [esp+arg_8], esi
.text:0040735D                 mov     edx, [esp+arg_60]
.text:00407361                 mov     ecx, ds:_iob
.text:00407367                 mov     ebx, [edx]
.text:00407369                 add     ecx, 40h ; '@'
.text:0040736C                 mov     [esp+Str2], eax ; Format
.text:00407370                 mov     [esp+MaxCount], ebx
.text:00407374                 mov     [esp+0], ecx    ; Stream
.text:00407377                 call    fprintf
.text:0040737C                 jmp     short loc_407331
.text:0040737C ; END OF FUNCTION CHUNK FOR sub_406980
.text:0040737C ; ---------------------------------------------------------------------------
.text:0040737E                 align 10h
.text:00407380 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00407380
.text:00407380 loc_407380:                             ; CODE XREF: sub_406980+61C↑j
.text:00407380                                         ; sub_406980+625↑j
.text:00407380                 mov     eax, [esp+arg_44]
.text:00407384                 test    eax, eax
.text:00407386                 jz      short loc_4073BF
.text:00407388                 mov     ebx, [ebp+1Ch]
.text:0040738B                 test    ebx, ebx
.text:0040738D                 jz      short loc_4073C7
.text:0040738F                 mov     dword ptr [esp+0], offset loc_4069E1
.text:00407396
.text:00407396 loc_407396:                             ; CODE XREF: sub_406980+A4E↓j
.text:00407396                 call    ds:libintl_gettext
.text:0040739C                 mov     [esp+arg_8], esi
.text:004073A0                 mov     ebx, [esp+arg_60]
.text:004073A4                 mov     edx, ds:_iob
.text:004073AA                 mov     esi, [ebx]
.text:004073AC                 add     edx, 40h ; '@'
.text:004073AF                 mov     [esp+Str2], eax ; Format
.text:004073B3                 mov     [esp+MaxCount], esi
.text:004073B7                 mov     [esp+0], edx    ; Stream
.text:004073BA                 call    fprintf
.text:004073BF
.text:004073BF loc_4073BF:                             ; CODE XREF: sub_406980+A06↑j
.text:004073BF                 mov     [ebp+8], edi
.text:004073C2                 jmp     loc_406DA8
.text:004073C7 ; ---------------------------------------------------------------------------
.text:004073C7
.text:004073C7 loc_4073C7:                             ; CODE XREF: sub_406980+A0D↑j
.text:004073C7                 mov     dword ptr [esp+0], offset loc_4069FB
.text:004073CE                 jmp     short loc_407396
.text:004073D0 ; ---------------------------------------------------------------------------
.text:004073D0
.text:004073D0 loc_4073D0:                             ; CODE XREF: sub_406980+33E↑j
.text:004073D0                 mov     edi, [esp+arg_44]
.text:004073D4                 test    edi, edi
.text:004073D6                 jnz     short loc_4073EE
.text:004073D8
.text:004073D8 loc_4073D8:                             ; CODE XREF: sub_406980+AA4↓j
.text:004073D8                 mov     edx, [ebp+14h]
.text:004073DB                 mov     [esp+0], edx    ; Str
.text:004073DE                 call    strlen
.text:004073E3                 add     [ebp+14h], eax
.text:004073E6                 inc     dword ptr [ebp+0]
.text:004073E9                 jmp     loc_406F2E
.text:004073EE ; ---------------------------------------------------------------------------
.text:004073EE
.text:004073EE loc_4073EE:                             ; CODE XREF: sub_406980+A56↑j
.text:004073EE                 mov     dword ptr [esp+0], offset loc_406A15
.text:004073F5                 call    ds:libintl_gettext
.text:004073FB                 mov     ebx, [ebp+0]
.text:004073FE                 mov     edi, [esp+arg_60]
.text:00407402                 mov     ecx, [edi+ebx*4]
.text:00407405                 mov     ebx, ds:_iob
.text:0040740B                 mov     [esp+arg_8], ecx
.text:0040740F                 mov     esi, [edi]
.text:00407411                 add     ebx, 40h ; '@'
.text:00407414                 mov     [esp+Str2], eax ; Format
.text:00407418                 mov     [esp+0], ebx    ; Stream
.text:0040741B                 mov     [esp+MaxCount], esi
.text:0040741F                 call    fprintf
.text:00407424                 jmp     short loc_4073D8
.text:00407426 ; ---------------------------------------------------------------------------
.text:00407426
.text:00407426 loc_407426:                             ; CODE XREF: sub_406980+316↑j
.text:00407426                 mov     ecx, [ebp+14h]
.text:00407429                 mov     ebx, edi
.text:0040742B                 mov     edx, [esi]
.text:0040742D                 sub     ebx, ecx
.text:0040742F                 mov     [esp+0], edx    ; Str
.text:00407432                 call    strlen
.text:00407437                 cmp     ebx, eax
.text:00407439                 jz      short loc_407491
.text:0040743B                 mov     ebx, [esp+arg_40]
.text:0040743F                 test    ebx, ebx
.text:00407441                 jz      short loc_407480
.text:00407443                 mov     edx, [esp+arg_70]
.text:00407447                 test    edx, edx
.text:00407449                 jnz     short loc_407457
.text:0040744B                 mov     ecx, [esp+arg_40]
.text:0040744F                 mov     ebx, [esi+4]
.text:00407452                 cmp     [ecx+4], ebx
.text:00407455                 jz      short loc_407464
.text:00407457
.text:00407457 loc_407457:                             ; CODE XREF: sub_406980+AC9↑j
.text:00407457                                         ; sub_406980+AEA↓j ...
.text:00407457                 mov     [esp+arg_38], 1
.text:0040745F                 jmp     loc_406C9C
.text:00407464 ; ---------------------------------------------------------------------------
.text:00407464
.text:00407464 loc_407464:                             ; CODE XREF: sub_406980+AD5↑j
.text:00407464                 mov     edx, [esi+8]
.text:00407467                 cmp     [ecx+8], edx
.text:0040746A                 jnz     short loc_407457
.text:0040746C                 mov     ebx, [esi+0Ch]
.text:0040746F                 cmp     [ecx+0Ch], ebx
.text:00407472                 jnz     short loc_407457
.text:00407474                 jmp     loc_406C9C
.text:00407474 ; END OF FUNCTION CHUNK FOR sub_406980
.text:00407474 ; ---------------------------------------------------------------------------
.text:00407479                 align 10h
.text:00407480 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00407480
.text:00407480 loc_407480:                             ; CODE XREF: sub_406980+AC1↑j
.text:00407480                 mov     [esp+arg_40], esi
.text:00407484                 mov     eax, [esp+arg_30]
.text:00407488                 mov     [esp+arg_34], eax
.text:0040748C                 jmp     loc_406C9C
.text:00407491 ; ---------------------------------------------------------------------------
.text:00407491
.text:00407491 loc_407491:                             ; CODE XREF: sub_406980+AB9↑j
.text:00407491                 mov     [esp+arg_40], esi
.text:00407495                 mov     ecx, [esp+arg_30]
.text:00407499                 mov     [esp+arg_3C], 1
.text:004074A1                 mov     [esp+arg_34], ecx
.text:004074A5                 jmp     loc_406CB0
.text:004074AA ; ---------------------------------------------------------------------------
.text:004074AA
.text:004074AA loc_4074AA:                             ; CODE XREF: sub_406980+28F↑j
.text:004074AA                 mov     eax, [esp+Str]
.text:004074AE                 movsx   esi, dl
.text:004074B1                 mov     [esp+Str2], esi ; Val
.text:004074B5                 mov     [esp+0], eax    ; Str
.text:004074B8                 call    strchr
.text:004074BD                 test    eax, eax
.text:004074BF                 jnz     loc_406F70
.text:004074C5                 jmp     loc_406C15
.text:004074CA ; ---------------------------------------------------------------------------
.text:004074CA
.text:004074CA loc_4074CA:                             ; CODE XREF: sub_406980+24C↑j
.text:004074CA                 mov     ecx, 1
.text:004074CF                 jmp     loc_406BD2
.text:004074D4 ; ---------------------------------------------------------------------------
.text:004074D4
.text:004074D4 loc_4074D4:                             ; CODE XREF: sub_406980+1A4↑j
.text:004074D4                                         ; sub_406980+200↑j
.text:004074D4                 mov     eax, [ebp+20h]
.text:004074D7                 cmp     eax, [ebp+24h]
.text:004074DA                 jz      loc_406BB0
.text:004074E0                 mov     [ebp+0], eax
.text:004074E3                 jmp     loc_406BB0
.text:004074E8 ; ---------------------------------------------------------------------------
.text:004074E8
.text:004074E8 loc_4074E8:                             ; CODE XREF: sub_406980+1CE↑j
.text:004074E8                 mov     [ebp+20h], eax
.text:004074EB                 jmp     loc_406B70
.text:004074F0 ; ---------------------------------------------------------------------------
.text:004074F0
.text:004074F0 loc_4074F0:                             ; CODE XREF: sub_406980+19A↑j
.text:004074F0                 mov     edx, [ebp+20h]
.text:004074F3                 mov     eax, [ebp+24h]
.text:004074F6                 cmp     edx, eax
.text:004074F8                 jz      short loc_407570
.text:004074FA                 cmp     eax, ebx
.text:004074FC                 jz      short loc_407511
.text:004074FE                 mov     [esp+Str2], ebp
.text:00407502                 mov     ebx, [esp+arg_60]
.text:00407506                 mov     [esp+0], ebx
.text:00407509                 call    sub_407700
.text:0040750E                 mov     ebx, [ebp+0]
.text:00407511
.text:00407511 loc_407511:                             ; CODE XREF: sub_406980+B7C↑j
.text:00407511                                         ; sub_406980+BF2↓j ...
.text:00407511                 cmp     ebx, [esp+arg_5C]
.text:00407515                 jge     short loc_407560
.text:00407517                 mov     esi, [esp+arg_60]
.text:0040751B                 mov     eax, [esi+ebx*4]
.text:0040751E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00407521                 jz      short loc_407568
.text:00407523                 lea     esi, [esi+0]
.text:00407529                 lea     edi, [edi+0]
.text:00407530
.text:00407530 loc_407530:                             ; CODE XREF: sub_406980+BCC↓j
.text:00407530                                         ; sub_406980+BEC↓j
.text:00407530                 lea     eax, [ebx+1]
.text:00407533                 mov     ebx, eax
.text:00407535                 mov     [ebp+0], eax
.text:00407538                 cmp     eax, [esp+arg_5C]
.text:0040753C                 jge     short loc_407560
.text:0040753E                 mov     edi, [esp+arg_60]
.text:00407542                 mov     edx, [edi+eax*4]
.text:00407545                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00407548                 jz      short loc_407550
.text:0040754A
.text:0040754A loc_40754A:                             ; CODE XREF: sub_406980+BD4↓j
.text:0040754A                 mov     ebx, eax
.text:0040754C                 jmp     short loc_407530
.text:0040754C ; END OF FUNCTION CHUNK FOR sub_406980
.text:0040754C ; ---------------------------------------------------------------------------
.text:0040754E                 align 10h
.text:00407550 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00407550
.text:00407550 loc_407550:                             ; CODE XREF: sub_406980+BC8↑j
.text:00407550                 cmp     byte ptr [edx+1], 0
.text:00407554                 jz      short loc_40754A
.text:00407556                 lea     esi, [esi+0]
.text:00407559                 lea     edi, [edi+0]
.text:00407560
.text:00407560 loc_407560:                             ; CODE XREF: sub_406980+B95↑j
.text:00407560                                         ; sub_406980+BBC↑j ...
.text:00407560                 mov     [ebp+24h], ebx
.text:00407563                 jmp     loc_406B20
.text:00407568 ; ---------------------------------------------------------------------------
.text:00407568
.text:00407568 loc_407568:                             ; CODE XREF: sub_406980+BA1↑j
.text:00407568                 cmp     byte ptr [eax+1], 0
.text:0040756C                 jz      short loc_407530
.text:0040756E                 jmp     short loc_407560
.text:00407570 ; ---------------------------------------------------------------------------
.text:00407570
.text:00407570 loc_407570:                             ; CODE XREF: sub_406980+B78↑j
.text:00407570                 cmp     edx, ebx
.text:00407572                 jz      short loc_407511
.text:00407574                 mov     [ebp+20h], ebx
.text:00407577                 jmp     short loc_407511
.text:00407579 ; ---------------------------------------------------------------------------
.text:00407579
.text:00407579 loc_407579:                             ; CODE XREF: sub_406980+158↑j
.text:00407579                 mov     dword ptr [ebp+18h], 0
.text:00407580                 mov     esi, [esp+Str]
.text:00407584
.text:00407584 loc_407584:                             ; CODE XREF: sub_406980+C19↓j
.text:00407584                 inc     esi
.text:00407585                 jmp     loc_406AE8
.text:00407585 ; END OF FUNCTION CHUNK FOR sub_406980
.text:00407585 ; ---------------------------------------------------------------------------
.text:0040758A                 align 10h
.text:00407590 ; START OF FUNCTION CHUNK FOR sub_406980
.text:00407590
.text:00407590 loc_407590:                             ; CODE XREF: sub_406980+150↑j
.text:00407590                 mov     dword ptr [ebp+18h], 2
.text:00407597                 mov     esi, ecx
.text:00407599                 jmp     short loc_407584
.text:00407599 ; END OF FUNCTION CHUNK FOR sub_406980
.text:00407599 ; ---------------------------------------------------------------------------
.text:0040759B                 align 10h
.text:004075A0 ; START OF FUNCTION CHUNK FOR sub_406980
.text:004075A0
.text:004075A0 loc_4075A0:                             ; CODE XREF: sub_406980+139↑j
.text:004075A0                 mov     dword ptr [esp+0], offset loc_406A33 ; VarName
.text:004075A7                 call    getenv
.text:004075AC                 test    eax, eax
.text:004075AE                 jz      loc_406AC4
.text:004075B4                 jmp     loc_406ABF
.text:004075B4 ; END OF FUNCTION CHUNK FOR sub_406980
.text:004075B4 ; ---------------------------------------------------------------------------
.text:004075B9                 align 10h
.text:004075C0 ; START OF FUNCTION CHUNK FOR sub_406980
.text:004075C0
.text:004075C0 loc_4075C0:                             ; CODE XREF: sub_406980:loc_406A8F↑j
.text:004075C0                 mov     dword ptr [ebp+0], 1
.text:004075C7                 mov     ebx, 1
.text:004075CC                 jmp     loc_406AA0
.text:004075CC ; END OF FUNCTION CHUNK FOR sub_406980
.text:004075D1 ; ---------------------------------------------------------------------------
.text:004075D1                 jmp     short sub_4075E0
.text:004075D1 ; ---------------------------------------------------------------------------
.text:004075D3                 align 10h
.text:004075E0
.text:004075E0 ; =============== S U B R O U T I N E =======================================
.text:004075E0
.text:004075E0
.text:004075E0 sub_4075E0      proc near               ; CODE XREF: .text:004075D1↑j
.text:004075E0                                         ; sub_408A20+3A↓p ...
.text:004075E0
.text:004075E0 var_2C          = dword ptr -2Ch
.text:004075E0 var_28          = dword ptr -28h
.text:004075E0 var_24          = dword ptr -24h
.text:004075E0 var_20          = dword ptr -20h
.text:004075E0 var_1C          = dword ptr -1Ch
.text:004075E0 var_18          = dword ptr -18h
.text:004075E0 var_14          = dword ptr -14h
.text:004075E0 var_10          = dword ptr -10h
.text:004075E0 arg_0           = dword ptr  4
.text:004075E0 arg_4           = dword ptr  8
.text:004075E0 arg_8           = dword ptr  0Ch
.text:004075E0 arg_C           = dword ptr  10h
.text:004075E0 arg_10          = dword ptr  14h
.text:004075E0 arg_14          = dword ptr  18h
.text:004075E0 arg_18          = dword ptr  1Ch
.text:004075E0
.text:004075E0                 sub     esp, 2Ch
.text:004075E3                 mov     edx, dword_414020
.text:004075E9                 mov     [esp+2Ch+var_10], offset dword_415170
.text:004075F1                 mov     ecx, dword_414024
.text:004075F7                 mov     ds:dword_415170, edx
.text:004075FD                 mov     edx, [esp+2Ch+arg_18]
.text:00407601                 mov     ds:dword_415174, ecx
.text:00407607                 mov     ecx, [esp+2Ch+arg_14]
.text:0040760B                 mov     [esp+2Ch+var_14], edx
.text:0040760F                 mov     edx, [esp+2Ch+arg_10]
.text:00407613                 mov     [esp+2Ch+var_18], ecx
.text:00407617                 mov     ecx, [esp+2Ch+arg_C]
.text:0040761B                 mov     [esp+2Ch+var_1C], edx
.text:0040761F                 mov     edx, [esp+2Ch+arg_8]
.text:00407623                 mov     [esp+2Ch+var_20], ecx
.text:00407627                 mov     ecx, [esp+2Ch+arg_4]
.text:0040762B                 mov     [esp+2Ch+var_24], edx
.text:0040762F                 mov     edx, [esp+2Ch+arg_0]
.text:00407633                 mov     [esp+2Ch+var_28], ecx
.text:00407637                 mov     [esp+2Ch+var_2C], edx
.text:0040763A                 call    loc_406A50
.text:0040763F                 mov     ecx, ds:dword_415170
.text:00407645                 mov     dword_414020, ecx
.text:0040764B                 mov     ecx, ds:dword_41517C
.text:00407651                 mov     ds:dword_415570, ecx
.text:00407657                 mov     ecx, ds:dword_415178
.text:0040765D                 mov     dword_414028, ecx
.text:00407663                 add     esp, 2Ch
.text:00407666                 retn
.text:00407666 sub_4075E0      endp
.text:00407666
.text:00407666 ; ---------------------------------------------------------------------------
.text:00407667                 align 10h
.text:00407670                 sub     esp, 2Ch
.text:00407673                 mov     edx, dword_414020
.text:00407679                 mov     dword ptr [esp+1Ch], offset dword_415170
.text:00407681                 mov     ecx, dword_414024
.text:00407687                 mov     dword ptr [esp+18h], 1
.text:0040768F                 mov     ds:dword_415170, edx
.text:00407695                 mov     edx, [esp+38h]
.text:00407699                 mov     ds:dword_415174, ecx
.text:0040769F                 mov     ecx, [esp+34h]
.text:004076A3                 mov     [esp+8], edx
.text:004076A7                 mov     edx, [esp+30h]
.text:004076AB                 mov     [esp+4], ecx
.text:004076AF                 mov     dword ptr [esp+14h], 0
.text:004076B7                 mov     dword ptr [esp+10h], 0
.text:004076BF                 mov     dword ptr [esp+0Ch], 0
.text:004076C7                 mov     [esp], edx
.text:004076CA                 call    loc_406A50
.text:004076CF                 mov     ecx, ds:dword_415170
.text:004076D5                 mov     dword_414020, ecx
.text:004076DB                 mov     ecx, ds:dword_41517C
.text:004076E1                 mov     ds:dword_415570, ecx
.text:004076E7                 mov     ecx, ds:dword_415178
.text:004076ED                 mov     dword_414028, ecx
.text:004076F3                 add     esp, 2Ch
.text:004076F6                 retn
.text:004076F6 ; ---------------------------------------------------------------------------
.text:004076F7                 align 10h
.text:00407700
.text:00407700 ; =============== S U B R O U T I N E =======================================
.text:00407700
.text:00407700
.text:00407700 sub_407700      proc near               ; CODE XREF: sub_406980+1E3↑p
.text:00407700                                         ; sub_406980+B89↑p
.text:00407700
.text:00407700 var_2C          = dword ptr -2Ch
.text:00407700 var_28          = dword ptr -28h
.text:00407700 var_24          = dword ptr -24h
.text:00407700 var_20          = dword ptr -20h
.text:00407700 var_1C          = dword ptr -1Ch
.text:00407700 var_18          = dword ptr -18h
.text:00407700 var_14          = dword ptr -14h
.text:00407700 arg_0           = dword ptr  4
.text:00407700 arg_4           = dword ptr  8
.text:00407700
.text:00407700                 push    ebp
.text:00407701                 push    edi
.text:00407702                 push    esi
.text:00407703                 push    ebx
.text:00407704                 sub     esp, 1Ch
.text:00407707                 mov     ecx, [esp+2Ch+arg_4]
.text:0040770B                 mov     eax, [esp+2Ch+arg_4]
.text:0040770F                 mov     ebx, [esp+2Ch+arg_4]
.text:00407713                 mov     edx, [ecx+20h]
.text:00407716                 mov     edi, [esp+2Ch+arg_0]
.text:0040771A                 mov     ecx, [ebx]
.text:0040771C                 mov     [esp+2Ch+var_2C], edx
.text:0040771F                 mov     [esp+2Ch+var_14], edx
.text:00407723                 mov     edx, [eax+24h]
.text:00407726                 mov     [esp+2Ch+var_28], ecx
.text:0040772A                 mov     [esp+2Ch+var_1C], ecx
.text:0040772E                 cmp     ecx, edx
.text:00407730                 mov     [esp+2Ch+var_18], edx
.text:00407734                 jle     short loc_4077B0
.text:00407736                 mov     esi, [esp+2Ch+var_2C]
.text:00407739                 cmp     edx, esi
.text:0040773B                 jle     short loc_4077B0
.text:0040773D                 lea     esi, [esi+0]
.text:00407740
.text:00407740 loc_407740:                             ; CODE XREF: sub_407700+A1↓j
.text:00407740                 mov     ebx, [esp+2Ch+var_1C]
.text:00407744                 mov     edx, [esp+2Ch+var_18]
.text:00407748                 mov     ebp, [esp+2Ch+var_18]
.text:0040774C                 mov     eax, [esp+2Ch+var_14]
.text:00407750                 sub     ebx, edx
.text:00407752                 mov     [esp+2Ch+var_20], ebx
.text:00407756                 sub     ebp, eax
.text:00407758                 cmp     ebx, ebp
.text:0040775A                 jle     short loc_4077D5
.text:0040775C                 xor     esi, esi
.text:0040775E                 cmp     esi, ebp
.text:00407760                 jge     short loc_40778D
.text:00407762                 mov     ecx, [esp+2Ch+var_1C]
.text:00407766                 sub     ecx, ebp
.text:00407768                 mov     [esp+2Ch+var_24], ecx
.text:0040776C                 lea     esi, [esi+0]
.text:00407770
.text:00407770 loc_407770:                             ; CODE XREF: sub_407700+8B↓j
.text:00407770                 mov     ecx, [esp+2Ch+var_14]
.text:00407774                 mov     edx, [esp+2Ch+var_24]
.text:00407778                 add     ecx, esi
.text:0040777A                 add     edx, esi
.text:0040777C                 mov     ebx, [edi+ecx*4]
.text:0040777F                 mov     eax, [edi+edx*4]
.text:00407782                 inc     esi
.text:00407783                 cmp     esi, ebp
.text:00407785                 mov     [edi+ecx*4], eax
.text:00407788                 mov     [edi+edx*4], ebx
.text:0040778B                 jl      short loc_407770
.text:0040778D
.text:0040778D loc_40778D:                             ; CODE XREF: sub_407700+60↑j
.text:0040778D                 sub     [esp+2Ch+var_1C], ebp
.text:00407791
.text:00407791 loc_407791:                             ; CODE XREF: sub_407700+107↓j
.text:00407791                 mov     eax, [esp+2Ch+var_18]
.text:00407795                 cmp     [esp+2Ch+var_1C], eax
.text:00407799                 jle     short loc_4077B0
.text:0040779B                 mov     ebp, [esp+2Ch+var_14]
.text:0040779F                 cmp     eax, ebp
.text:004077A1                 jg      short loc_407740
.text:004077A3                 lea     esi, [esi+0]
.text:004077A9                 lea     edi, [edi+0]
.text:004077B0
.text:004077B0 loc_4077B0:                             ; CODE XREF: sub_407700+34↑j
.text:004077B0                                         ; sub_407700+3B↑j ...
.text:004077B0                 mov     esi, [esp+2Ch+var_28]
.text:004077B4                 mov     ecx, [esp+2Ch+var_18]
.text:004077B8                 mov     eax, [esp+2Ch+var_2C]
.text:004077BB                 mov     edi, [esp+2Ch+arg_4]
.text:004077BF                 mov     edx, [esp+2Ch+var_28]
.text:004077C3                 sub     esi, ecx
.text:004077C5                 add     esi, eax
.text:004077C7                 mov     [edi+20h], esi
.text:004077CA                 mov     [edi+24h], edx
.text:004077CD                 add     esp, 1Ch
.text:004077D0                 pop     ebx
.text:004077D1                 pop     esi
.text:004077D2                 pop     edi
.text:004077D3                 pop     ebp
.text:004077D4                 retn
.text:004077D5 ; ---------------------------------------------------------------------------
.text:004077D5
.text:004077D5 loc_4077D5:                             ; CODE XREF: sub_407700+5A↑j
.text:004077D5                 xor     esi, esi
.text:004077D7                 cmp     esi, [esp+2Ch+var_20]
.text:004077DB                 jge     short loc_4077FF
.text:004077DD                 lea     esi, [esi+0]
.text:004077E0
.text:004077E0 loc_4077E0:                             ; CODE XREF: sub_407700+FD↓j
.text:004077E0                 mov     ebx, [esp+2Ch+var_14]
.text:004077E4                 mov     ebp, [esp+2Ch+var_18]
.text:004077E8                 add     ebx, esi
.text:004077EA                 add     ebp, esi
.text:004077EC                 mov     edx, [edi+ebx*4]
.text:004077EF                 inc     esi
.text:004077F0                 cmp     esi, [esp+2Ch+var_20]
.text:004077F4                 mov     ecx, [edi+ebp*4]
.text:004077F7                 mov     [edi+ebx*4], ecx
.text:004077FA                 mov     [edi+ebp*4], edx
.text:004077FD                 jl      short loc_4077E0
.text:004077FF
.text:004077FF loc_4077FF:                             ; CODE XREF: sub_407700+DB↑j
.text:004077FF                 mov     esi, [esp+2Ch+var_20]
.text:00407803                 add     [esp+2Ch+var_14], esi
.text:00407807                 jmp     short loc_407791
.text:00407807 sub_407700      endp
.text:00407807
.text:00407807 ; ---------------------------------------------------------------------------
.text:00407809                 align 20h
.text:00407820 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00407820                                         ; DATA XREF: .data:Buffer↓o
.text:00407852 ; const char aSSS[]
.text:00407852 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_407B10+50↓o
.text:0040785E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040785E                                         ; DATA XREF: sub_407B10:loc_407BB1↓o
.text:0040786E                 align 20h
.text:00407880 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00407880                                         ; DATA XREF: sub_407B10+100↓o
.text:00407880                 db 'ere is NO',0Ah
.text:00407880                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00407880                 db 'R PURPOSE.',0Ah,0
.text:00407918 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00407918                                         ; DATA XREF: sub_407B10:loc_407C51↓o
.text:0040792F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040792F                                         ; DATA XREF: sub_407B10:loc_407C5D↓o
.text:0040794B                 align 20h
.text:00407960 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00407960                                         ; DATA XREF: sub_407B10:loc_407C69↓o
.text:00407960                 db 'and %s.',0Ah,0
.text:00407980 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00407980                                         ; DATA XREF: sub_407B10:loc_407C75↓o
.text:00407980                 db '%s, and %s.',0Ah,0
.text:004079A4                 align 20h
.text:004079C0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:004079C0                                         ; DATA XREF: sub_407B10:loc_407C81↓o
.text:004079C0                 db '%s, %s, and %s.',0Ah,0
.text:004079E8                 align 20h
.text:00407A00 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00407A00                                         ; DATA XREF: sub_407B10:loc_407C8D↓o
.text:00407A00                 db '%s, %s, %s, and %s.',0Ah,0
.text:00407A2C                 align 20h
.text:00407A40 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00407A40                                         ; DATA XREF: sub_407B10:loc_407C99↓o
.text:00407A40                 db '%s, %s, %s, %s,',0Ah
.text:00407A40                 db 'and %s.',0Ah,0
.text:00407A70                 align 20h
.text:00407A80 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00407A80                                         ; DATA XREF: sub_407B10:loc_407CA5↓o
.text:00407A80                 db '%s, %s, %s, %s,',0Ah
.text:00407A80                 db '%s, and %s.',0Ah,0
.text:00407AB4                 align 10h
.text:00407AC0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00407AC0                                         ; DATA XREF: sub_407B10:def_407B7D↓o
.text:00407AC0                 db '%s, %s, %s, %s,',0Ah
.text:00407AC0                 db '%s, %s, and others.',0Ah,0
.text:00407AFC ; const char aSS[]
.text:00407AFC aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_407B10+1B5↓o
.text:00407B03                 align 10h
.text:00407B10
.text:00407B10 ; =============== S U B R O U T I N E =======================================
.text:00407B10
.text:00407B10
.text:00407B10 ; int __cdecl sub_407B10(FILE *, FILE *, int, int, va_list)
.text:00407B10 sub_407B10      proc near               ; CODE XREF: sub_407CE0+2A↓p
.text:00407B10
.text:00407B10 Stream          = dword ptr -2Ch
.text:00407B10 Format          = dword ptr -28h
.text:00407B10 ArgList         = dword ptr -24h
.text:00407B10 var_20          = dword ptr -20h
.text:00407B10 var_1C          = dword ptr -1Ch
.text:00407B10 var_14          = dword ptr -14h
.text:00407B10 arg_0           = dword ptr  4
.text:00407B10 arg_4           = dword ptr  8
.text:00407B10 arg_8           = dword ptr  0Ch
.text:00407B10 arg_C           = dword ptr  10h
.text:00407B10 arg_10          = dword ptr  14h
.text:00407B10
.text:00407B10                 push    ebp
.text:00407B11                 push    edi
.text:00407B12                 push    esi
.text:00407B13                 push    ebx
.text:00407B14                 sub     esp, 1Ch
.text:00407B17                 xor     ebx, ebx
.text:00407B19                 mov     edi, [esp+2Ch+arg_10]
.text:00407B1D                 mov     edx, [esp+2Ch+arg_8]
.text:00407B21                 mov     esi, [esp+2Ch+arg_0]
.text:00407B25                 mov     eax, [edi]
.text:00407B27                 mov     ecx, [esp+2Ch+arg_4]
.text:00407B2B                 mov     [esp+2Ch+var_14], edx
.text:00407B2F                 mov     ebp, [esp+2Ch+arg_C]
.text:00407B33                 lea     edx, [edi+4]
.text:00407B36                 test    eax, eax
.text:00407B38                 jz      short loc_407B4C
.text:00407B3A                 lea     esi, [esi+0]
.text:00407B40
.text:00407B40 loc_407B40:                             ; CODE XREF: sub_407B10+3A↓j
.text:00407B40                 mov     eax, edx
.text:00407B42                 inc     ebx
.text:00407B43                 mov     eax, [eax]
.text:00407B45                 add     edx, 4
.text:00407B48                 test    eax, eax
.text:00407B4A                 jnz     short loc_407B40
.text:00407B4C
.text:00407B4C loc_407B4C:                             ; CODE XREF: sub_407B10+28↑j
.text:00407B4C                 test    ecx, ecx
.text:00407B4E                 jz      loc_407CBD
.text:00407B54                 mov     [esp+2Ch+var_1C], ebp
.text:00407B58                 mov     edx, [esp+2Ch+var_14]
.text:00407B5C                 mov     [esp+2Ch+ArgList], ecx
.text:00407B60                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00407B68                 mov     [esp+2Ch+var_20], edx
.text:00407B6C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407B6F                 call    fprintf
.text:00407B74
.text:00407B74 loc_407B74:                             ; CODE XREF: sub_407B10+1C9↓j
.text:00407B74                 cmp     ebx, 9          ; switch 10 cases
.text:00407B77                 ja      def_407B7D      ; jumptable 00407B7D default case
.text:00407B7D                 jmp     ds:jpt_407B7D[ebx*4] ; switch jump
.text:00407B7D ; ---------------------------------------------------------------------------
.text:00407B84 jpt_407B7D      dd offset loc_407BAC    ; DATA XREF: sub_407B10+6D↑r
.text:00407B84                 dd offset loc_407BB1    ; jump table for switch statement
.text:00407B84                 dd offset loc_407C51
.text:00407B84                 dd offset loc_407C5D
.text:00407B84                 dd offset loc_407C69
.text:00407B84                 dd offset loc_407C75
.text:00407B84                 dd offset loc_407C81
.text:00407B84                 dd offset loc_407C8D
.text:00407B84                 dd offset loc_407C99
.text:00407B84                 dd offset loc_407CA5
.text:00407BAC ; ---------------------------------------------------------------------------
.text:00407BAC
.text:00407BAC loc_407BAC:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407BAC                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407BAC                 call    abort           ; jumptable 00407B7D case 0
.text:00407BB1 ; ---------------------------------------------------------------------------
.text:00407BB1
.text:00407BB1 loc_407BB1:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407BB1                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407BB1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00407B7D case 1
.text:00407BB8                 nop
.text:00407BB9                 lea     esi, [esi+0]
.text:00407BC0
.text:00407BC0 loc_407BC0:                             ; CODE XREF: sub_407B10+148↓j
.text:00407BC0                                         ; sub_407B10+154↓j ...
.text:00407BC0                 call    ds:libintl_gettext
.text:00407BC6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00407BCA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407BCD                 mov     [esp+2Ch+Format], eax ; Format
.text:00407BD1                 call    vfprintf
.text:00407BD6                 mov     ebx, [esi+4]
.text:00407BD9                 dec     ebx
.text:00407BDA                 test    ebx, ebx
.text:00407BDC                 mov     [esi+4], ebx
.text:00407BDF                 js      short loc_407C3F
.text:00407BE1                 mov     edi, [esi]
.text:00407BE3                 mov     byte ptr [edi], 0Ah
.text:00407BE6                 inc     dword ptr [esi]
.text:00407BE8
.text:00407BE8 loc_407BE8:                             ; CODE XREF: sub_407B10+13F↓j
.text:00407BE8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00407BEC                 mov     edx, Buffer
.text:00407BF2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00407BF5                 call    fputs
.text:00407BFA                 mov     ebp, [esi+4]
.text:00407BFD                 dec     ebp
.text:00407BFE                 test    ebp, ebp
.text:00407C00                 mov     [esi+4], ebp
.text:00407C03                 js      short loc_407C2D
.text:00407C05                 mov     ecx, [esi]
.text:00407C07                 mov     byte ptr [ecx], 0Ah
.text:00407C0A                 inc     dword ptr [esi]
.text:00407C0C
.text:00407C0C loc_407C0C:                             ; CODE XREF: sub_407B10+12D↓j
.text:00407C0C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00407C10                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00407C17                 call    ds:libintl_gettext
.text:00407C1D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00407C21                 add     esp, 1Ch
.text:00407C24                 pop     ebx
.text:00407C25                 pop     esi
.text:00407C26                 pop     edi
.text:00407C27                 pop     ebp
.text:00407C28                 jmp     fputs
.text:00407C2D ; ---------------------------------------------------------------------------
.text:00407C2D
.text:00407C2D loc_407C2D:                             ; CODE XREF: sub_407B10+F3↑j
.text:00407C2D                 mov     [esp+2Ch+Format], esi ; File
.text:00407C31                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407C38                 call    _flsbuf
.text:00407C3D                 jmp     short loc_407C0C
.text:00407C3F ; ---------------------------------------------------------------------------
.text:00407C3F
.text:00407C3F loc_407C3F:                             ; CODE XREF: sub_407B10+CF↑j
.text:00407C3F                 mov     [esp+2Ch+Format], esi ; File
.text:00407C43                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407C4A                 call    _flsbuf
.text:00407C4F                 jmp     short loc_407BE8
.text:00407C51 ; ---------------------------------------------------------------------------
.text:00407C51
.text:00407C51 loc_407C51:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407C51                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407C51                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00407B7D case 2
.text:00407C58                 jmp     loc_407BC0
.text:00407C5D ; ---------------------------------------------------------------------------
.text:00407C5D
.text:00407C5D loc_407C5D:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407C5D                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407C5D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00407B7D case 3
.text:00407C64                 jmp     loc_407BC0
.text:00407C69 ; ---------------------------------------------------------------------------
.text:00407C69
.text:00407C69 loc_407C69:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407C69                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407C69                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00407B7D case 4
.text:00407C70                 jmp     loc_407BC0
.text:00407C75 ; ---------------------------------------------------------------------------
.text:00407C75
.text:00407C75 loc_407C75:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407C75                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407C75                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00407B7D case 5
.text:00407C7C                 jmp     loc_407BC0
.text:00407C81 ; ---------------------------------------------------------------------------
.text:00407C81
.text:00407C81 loc_407C81:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407C81                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407C81                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00407B7D case 6
.text:00407C88                 jmp     loc_407BC0
.text:00407C8D ; ---------------------------------------------------------------------------
.text:00407C8D
.text:00407C8D loc_407C8D:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407C8D                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407C8D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00407B7D case 7
.text:00407C94                 jmp     loc_407BC0
.text:00407C99 ; ---------------------------------------------------------------------------
.text:00407C99
.text:00407C99 loc_407C99:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407C99                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407C99                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00407B7D case 8
.text:00407CA0                 jmp     loc_407BC0
.text:00407CA5 ; ---------------------------------------------------------------------------
.text:00407CA5
.text:00407CA5 loc_407CA5:                             ; CODE XREF: sub_407B10+6D↑j
.text:00407CA5                                         ; DATA XREF: sub_407B10:jpt_407B7D↑o
.text:00407CA5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00407B7D case 9
.text:00407CAC                 jmp     loc_407BC0
.text:00407CB1 ; ---------------------------------------------------------------------------
.text:00407CB1
.text:00407CB1 def_407B7D:                             ; CODE XREF: sub_407B10+67↑j
.text:00407CB1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00407B7D default case
.text:00407CB8                 jmp     loc_407BC0
.text:00407CBD ; ---------------------------------------------------------------------------
.text:00407CBD
.text:00407CBD loc_407CBD:                             ; CODE XREF: sub_407B10+3E↑j
.text:00407CBD                 mov     [esp+2Ch+var_20], ebp
.text:00407CC1                 mov     ecx, [esp+2Ch+var_14]
.text:00407CC5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00407CCD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407CD0                 mov     [esp+2Ch+ArgList], ecx
.text:00407CD4                 call    fprintf
.text:00407CD9                 jmp     loc_407B74
.text:00407CD9 sub_407B10      endp
.text:00407CD9
.text:00407CD9 ; ---------------------------------------------------------------------------
.text:00407CDE                 align 10h
.text:00407CE0
.text:00407CE0 ; =============== S U B R O U T I N E =======================================
.text:00407CE0
.text:00407CE0
.text:00407CE0 ; int __cdecl sub_407CE0(FILE *, FILE *, int, int, char)
.text:00407CE0 sub_407CE0      proc near               ; CODE XREF: sub_401E80+259↑p
.text:00407CE0
.text:00407CE0 var_1C          = dword ptr -1Ch
.text:00407CE0 var_18          = dword ptr -18h
.text:00407CE0 var_14          = dword ptr -14h
.text:00407CE0 var_10          = dword ptr -10h
.text:00407CE0 var_C           = dword ptr -0Ch
.text:00407CE0 arg_0           = dword ptr  4
.text:00407CE0 arg_4           = dword ptr  8
.text:00407CE0 arg_8           = dword ptr  0Ch
.text:00407CE0 arg_C           = dword ptr  10h
.text:00407CE0 arg_10          = byte ptr  14h
.text:00407CE0
.text:00407CE0                 sub     esp, 1Ch
.text:00407CE3                 mov     edx, [esp+1Ch+arg_C]
.text:00407CE7                 lea     ecx, [esp+1Ch+arg_10]
.text:00407CEB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00407CEF                 mov     ecx, [esp+1Ch+arg_8]
.text:00407CF3                 mov     [esp+1Ch+var_10], edx ; int
.text:00407CF7                 mov     edx, [esp+1Ch+arg_4]
.text:00407CFB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00407CFF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00407D03                 mov     edx, [esp+1Ch+arg_0]
.text:00407D07                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00407D0A                 call    sub_407B10
.text:00407D0F                 add     esp, 1Ch
.text:00407D12                 retn
.text:00407D12 sub_407CE0      endp
.text:00407D12
.text:00407D12 ; ---------------------------------------------------------------------------
.text:00407D13                 align 10h
.text:00407D20 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00407D20                                         ; DATA XREF: sub_407D90+C79↓o
.text:00407D48                 align 20h
.text:00407D60 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00407D60                                         ; DATA XREF: sub_407D90+C81↓o
.text:00407D86                 align 10h
.text:00407D90
.text:00407D90 ; =============== S U B R O U T I N E =======================================
.text:00407D90
.text:00407D90
.text:00407D90 ; int __cdecl sub_407D90(int, int, int, int, char *Str)
.text:00407D90 sub_407D90      proc near               ; CODE XREF: sub_401E80+148↑p
.text:00407D90                                         ; sub_401E80+47B↑p ...
.text:00407D90
.text:00407D90 C               = dword ptr -13Ch
.text:00407D90 Type            = dword ptr -138h
.text:00407D90 Radix           = dword ptr -134h
.text:00407D90 var_130         = dword ptr -130h
.text:00407D90 var_124         = dword ptr -124h
.text:00407D90 var_120         = dword ptr -120h
.text:00407D90 var_11C         = dword ptr -11Ch
.text:00407D90 var_118         = dword ptr -118h
.text:00407D90 var_114         = dword ptr -114h
.text:00407D90 var_110         = dword ptr -110h
.text:00407D90 var_10C         = dword ptr -10Ch
.text:00407D90 var_108         = dword ptr -108h
.text:00407D90 var_104         = dword ptr -104h
.text:00407D90 var_100         = dword ptr -100h
.text:00407D90 var_F8          = dword ptr -0F8h
.text:00407D90 var_F4          = dword ptr -0F4h
.text:00407D90 var_F0          = dword ptr -0F0h
.text:00407D90 var_EC          = dword ptr -0ECh
.text:00407D90 var_E8          = dword ptr -0E8h
.text:00407D90 var_E4          = dword ptr -0E4h
.text:00407D90 var_E0          = dword ptr -0E0h
.text:00407D90 var_D8          = dword ptr -0D8h
.text:00407D90 var_D4          = dword ptr -0D4h
.text:00407D90 var_D0          = dword ptr -0D0h
.text:00407D90 var_CC          = dword ptr -0CCh
.text:00407D90 var_C8          = dword ptr -0C8h
.text:00407D90 var_C4          = dword ptr -0C4h
.text:00407D90 var_C0          = dword ptr -0C0h
.text:00407D90 var_B8          = dword ptr -0B8h
.text:00407D90 var_B4          = dword ptr -0B4h
.text:00407D90 var_B0          = dword ptr -0B0h
.text:00407D90 var_AC          = dword ptr -0ACh
.text:00407D90 var_A8          = dword ptr -0A8h
.text:00407D90 var_A4          = dword ptr -0A4h
.text:00407D90 var_A0          = dword ptr -0A0h
.text:00407D90 var_98          = dword ptr -98h
.text:00407D90 var_94          = dword ptr -94h
.text:00407D90 var_90          = dword ptr -90h
.text:00407D90 var_8C          = dword ptr -8Ch
.text:00407D90 var_88          = dword ptr -88h
.text:00407D90 var_84          = dword ptr -84h
.text:00407D90 var_80          = dword ptr -80h
.text:00407D90 var_78          = dword ptr -78h
.text:00407D90 var_74          = dword ptr -74h
.text:00407D90 var_70          = dword ptr -70h
.text:00407D90 var_6C          = dword ptr -6Ch
.text:00407D90 var_68          = dword ptr -68h
.text:00407D90 var_64          = dword ptr -64h
.text:00407D90 var_60          = dword ptr -60h
.text:00407D90 var_5C          = dword ptr -5Ch
.text:00407D90 var_58          = dword ptr -58h
.text:00407D90 var_50          = dword ptr -50h
.text:00407D90 var_4C          = dword ptr -4Ch
.text:00407D90 var_48          = dword ptr -48h
.text:00407D90 var_44          = dword ptr -44h
.text:00407D90 var_40          = dword ptr -40h
.text:00407D90 var_3C          = dword ptr -3Ch
.text:00407D90 var_38          = dword ptr -38h
.text:00407D90 var_34          = dword ptr -34h
.text:00407D90 var_30          = dword ptr -30h
.text:00407D90 var_29          = byte ptr -29h
.text:00407D90 var_28          = dword ptr -28h
.text:00407D90 var_24          = dword ptr -24h
.text:00407D90 var_20          = dword ptr -20h
.text:00407D90 var_18          = byte ptr -18h
.text:00407D90 arg_0           = dword ptr  4
.text:00407D90 arg_4           = dword ptr  8
.text:00407D90 arg_8           = dword ptr  0Ch
.text:00407D90 arg_C           = dword ptr  10h
.text:00407D90 Str             = dword ptr  14h
.text:00407D90
.text:00407D90                 push    ebp
.text:00407D91                 xor     eax, eax
.text:00407D93                 push    edi
.text:00407D94                 push    esi
.text:00407D95                 push    ebx
.text:00407D96                 sub     esp, 12Ch
.text:00407D9C                 mov     ebp, [esp+13Ch+arg_8]
.text:00407DA3                 mov     [esp+13Ch+var_28], eax
.text:00407DAA                 mov     esi, [esp+13Ch+arg_0]
.text:00407DB1                 cmp     ebp, 24h ; '$'
.text:00407DB4                 ja      loc_408A01
.text:00407DBA                 mov     edi, [esp+13Ch+arg_4]
.text:00407DC1                 test    edi, edi
.text:00407DC3                 jz      loc_4089F5
.text:00407DC9
.text:00407DC9 loc_407DC9:                             ; CODE XREF: sub_407D90+C6C↓j
.text:00407DC9                 movzx   edx, byte ptr [esi]
.text:00407DCC                 mov     ebx, esi
.text:00407DCE                 mov     [esp+13Ch+var_29], dl
.text:00407DD5                 lea     esi, [esi+0]
.text:00407DD9                 lea     edi, [edi+0]
.text:00407DE0
.text:00407DE0 loc_407DE0:                             ; CODE XREF: sub_407D90+86↓j
.text:00407DE0                 movzx   edx, [esp+13Ch+var_29]
.text:00407DE8                 mov     ecx, ds:__mb_cur_max
.text:00407DEE                 cmp     dword ptr [ecx], 1
.text:00407DF1                 jz      loc_4089E2
.text:00407DF7                 mov     [esp+13Ch+Type], 8 ; Type
.text:00407DFF                 mov     [esp+13Ch+C], edx ; C
.text:00407E02                 call    _isctype
.text:00407E07
.text:00407E07 loc_407E07:                             ; CODE XREF: sub_407D90+C60↓j
.text:00407E07                 test    eax, eax
.text:00407E09                 jz      short loc_407E18
.text:00407E0B                 inc     ebx
.text:00407E0C                 movzx   eax, byte ptr [ebx]
.text:00407E0F                 mov     [esp+13Ch+var_29], al
.text:00407E16                 jmp     short loc_407DE0
.text:00407E18 ; ---------------------------------------------------------------------------
.text:00407E18
.text:00407E18 loc_407E18:                             ; CODE XREF: sub_407D90+79↑j
.text:00407E18                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00407E20                 mov     eax, 4
.text:00407E25                 jz      short loc_407EA2
.text:00407E27                 call    _errno
.text:00407E2C                 mov     dword ptr [eax], 0
.text:00407E32                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00407E36                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:00407E3A                 mov     [esp+13Ch+C], esi ; String
.text:00407E3D                 call    _strtoull
.text:00407E42                 mov     [esp+13Ch+var_24], eax
.text:00407E49                 mov     eax, [edi]
.text:00407E4B                 mov     [esp+13Ch+var_20], edx
.text:00407E52                 cmp     eax, esi
.text:00407E54                 jz      loc_40899C
.text:00407E5A                 call    _errno
.text:00407E5F                 mov     ebx, [eax]
.text:00407E61                 test    ebx, ebx
.text:00407E63                 jnz     loc_408977
.text:00407E69
.text:00407E69 loc_407E69:                             ; CODE XREF: sub_407D90+BFD↓j
.text:00407E69                                         ; sub_407D90+C4D↓j
.text:00407E69                 mov     ebp, [esp+13Ch+Str]
.text:00407E70                 test    ebp, ebp
.text:00407E72                 jz      loc_408958
.text:00407E78                 mov     ebx, [edi]
.text:00407E7A                 movzx   eax, byte ptr [ebx]
.text:00407E7D                 test    al, al
.text:00407E7F                 jnz     short loc_407EAD
.text:00407E81
.text:00407E81 loc_407E81:                             ; CODE XREF: sub_407D90+312↓j
.text:00407E81                                         ; sub_407D90+320↓j
.text:00407E81                 mov     edx, [esp+13Ch+var_24]
.text:00407E88                 mov     edi, [esp+13Ch+var_20]
.text:00407E8F                 mov     ebx, [esp+13Ch+arg_C]
.text:00407E96                 mov     [ebx], edx
.text:00407E98                 mov     [ebx+4], edi
.text:00407E9B
.text:00407E9B loc_407E9B:                             ; CODE XREF: sub_407D90+BE2↓j
.text:00407E9B                 mov     eax, [esp+13Ch+var_28]
.text:00407EA2
.text:00407EA2 loc_407EA2:                             ; CODE XREF: sub_407D90+95↑j
.text:00407EA2                                         ; sub_407D90+16C↓j ...
.text:00407EA2                 add     esp, 12Ch
.text:00407EA8                 pop     ebx
.text:00407EA9                 pop     esi
.text:00407EAA                 pop     edi
.text:00407EAB                 pop     ebp
.text:00407EAC                 retn
.text:00407EAD ; ---------------------------------------------------------------------------
.text:00407EAD
.text:00407EAD loc_407EAD:                             ; CODE XREF: sub_407D90+EF↑j
.text:00407EAD                 mov     esi, [esp+13Ch+Str]
.text:00407EB4                 mov     ecx, 1
.text:00407EB9                 movsx   ebp, al
.text:00407EBC                 mov     [esp+13Ch+var_30], ecx
.text:00407EC3                 mov     ebx, 400h
.text:00407EC8                 mov     [esp+13Ch+Type], ebp ; Val
.text:00407ECC                 mov     [esp+13Ch+C], esi ; Str
.text:00407ECF                 call    strchr
.text:00407ED4                 test    eax, eax
.text:00407ED6                 jnz     short loc_407EFE
.text:00407ED8
.text:00407ED8 def_407F49:                             ; CODE XREF: sub_407D90+1B7↓j
.text:00407ED8                                         ; sub_407D90+1B9↓j
.text:00407ED8                                         ; DATA XREF: ...
.text:00407ED8                 mov     eax, [esp+13Ch+var_28] ; jumptable 00407F49 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00407EDF                 mov     esi, [esp+13Ch+var_24]
.text:00407EE6                 mov     ebp, [esp+13Ch+var_20]
.text:00407EED                 mov     edi, [esp+13Ch+arg_C]
.text:00407EF4                 or      eax, 2
.text:00407EF7                 mov     [edi], esi
.text:00407EF9                 mov     [edi+4], ebp
.text:00407EFC                 jmp     short loc_407EA2
.text:00407EFE ; ---------------------------------------------------------------------------
.text:00407EFE
.text:00407EFE loc_407EFE:                             ; CODE XREF: sub_407D90+146↑j
.text:00407EFE                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00407F06                 mov     edx, [esp+13Ch+Str]
.text:00407F0D                 mov     [esp+13Ch+C], edx ; Str
.text:00407F10                 call    strchr
.text:00407F15                 test    eax, eax
.text:00407F17                 jz      loc_408951
.text:00407F1D                 mov     edx, [edi]
.text:00407F1F                 movsx   eax, byte ptr [edx+1]
.text:00407F23                 cmp     eax, 44h ; 'D'
.text:00407F26                 jz      loc_408917
.text:00407F2C                 cmp     eax, 44h ; 'D'
.text:00407F2F                 jg      loc_40892D
.text:00407F35                 cmp     eax, 42h ; 'B'
.text:00407F38                 jz      loc_408917
.text:00407F3E
.text:00407F3E loc_407F3E:                             ; CODE XREF: sub_407D90+B98↓j
.text:00407F3E                                         ; sub_407D90+BA0↓j ...
.text:00407F3E                 movsx   eax, byte ptr [edx]
.text:00407F41                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00407F44                 cmp     eax, 35h
.text:00407F47                 ja      short def_407F49 ; jumptable 00407F49 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00407F49                 jmp     ds:jpt_407F49[eax*4] ; switch jump
.text:00407F49 ; ---------------------------------------------------------------------------
.text:00407F50 jpt_407F49      dd offset loc_4080D4, offset def_407F49, offset def_407F49
.text:00407F50                                         ; DATA XREF: sub_407D90+1B9↑r
.text:00407F50                 dd offset loc_40812E, offset def_407F49, offset loc_4084F7 ; jump table for switch statement
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset def_407F49
.text:00407F50                 dd offset loc_408606, offset def_407F49, offset loc_4086CF
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset loc_40823D
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset def_407F49
.text:00407F50                 dd offset loc_4087DE, offset def_407F49, offset def_407F49
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset loc_40834C
.text:00407F50                 dd offset loc_40841E, offset def_407F49, offset def_407F49
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset def_407F49
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset loc_408028
.text:00407F50                 dd offset loc_4084F0, offset def_407F49, offset def_407F49
.text:00407F50                 dd offset def_407F49, offset loc_4084F7, offset def_407F49
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset loc_408606
.text:00407F50                 dd offset def_407F49, offset loc_4086CF, offset def_407F49
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset def_407F49
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset loc_4087DE
.text:00407F50                 dd offset def_407F49, offset def_407F49, offset loc_4088B7
.text:00408028 ; ---------------------------------------------------------------------------
.text:00408028
.text:00408028 loc_408028:                             ; CODE XREF: sub_407D90+1B9↑j
.text:00408028                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:00408028                 mov     [esp+13Ch+Radix], 200h ; jumptable 00407F49 case 98
.text:00408030                 lea     ebp, [esp+13Ch+var_24]
.text:00408037                 mov     [esp+13Ch+var_130], 0
.text:0040803F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408046                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040804E                 call    sub_412670
.text:00408053                 mov     esi, [esp+13Ch+var_20]
.text:0040805A                 mov     ecx, [esp+13Ch+var_24]
.text:00408061                 cmp     edx, esi
.text:00408063                 ja      short loc_40806B
.text:00408065                 jb      short loc_4080B5
.text:00408067                 cmp     eax, ecx
.text:00408069                 jb      short loc_4080B5
.text:0040806B
.text:0040806B loc_40806B:                             ; CODE XREF: sub_407D90+2D3↑j
.text:0040806B                 mov     esi, [ebp+0]
.text:0040806E                 mov     eax, 200h
.text:00408073                 mov     ebx, [ebp+4]
.text:00408076                 mul     esi
.text:00408078                 mov     ecx, ebx
.text:0040807A                 shl     ecx, 9
.text:0040807D
.text:0040807D loc_40807D:                             ; CODE XREF: sub_407D90+399↓j
.text:0040807D                 mov     esi, edx
.text:0040807F                 lea     edx, [ecx+esi]
.text:00408082
.text:00408082 loc_408082:                             ; CODE XREF: sub_407D90+B82↓j
.text:00408082                 mov     [ebp+0], eax
.text:00408085                 xor     eax, eax
.text:00408087                 mov     [ebp+4], edx
.text:0040808A
.text:0040808A loc_40808A:                             ; CODE XREF: sub_407D90+342↓j
.text:0040808A                                         ; sub_407D90+459↓j ...
.text:0040808A                 mov     edx, [edi]
.text:0040808C
.text:0040808C loc_40808C:                             ; CODE XREF: sub_407D90+762↓j
.text:0040808C                 or      [esp+13Ch+var_28], eax
.text:00408093                 mov     eax, [esp+13Ch+var_30]
.text:0040809A                 lea     ecx, [eax+edx]
.text:0040809D                 mov     [edi], ecx
.text:0040809F                 cmp     byte ptr [ecx], 0
.text:004080A2                 jz      loc_407E81
.text:004080A8                 or      [esp+13Ch+var_28], 2
.text:004080B0                 jmp     loc_407E81
.text:004080B5 ; ---------------------------------------------------------------------------
.text:004080B5
.text:004080B5 loc_4080B5:                             ; CODE XREF: sub_407D90+2D5↑j
.text:004080B5                                         ; sub_407D90+2D9↑j ...
.text:004080B5                 mov     edx, 0FFFFFFFFh
.text:004080BA                 mov     ebp, 0FFFFFFFFh
.text:004080BF                 mov     eax, 1
.text:004080C4                 mov     [esp+13Ch+var_24], edx
.text:004080CB                 mov     [esp+13Ch+var_20], ebp
.text:004080D2                 jmp     short loc_40808A
.text:004080D4 ; ---------------------------------------------------------------------------
.text:004080D4
.text:004080D4 loc_4080D4:                             ; CODE XREF: sub_407D90+1B9↑j
.text:004080D4                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:004080D4                 mov     [esp+13Ch+Radix], 400h ; jumptable 00407F49 case 66
.text:004080DC                 lea     ebp, [esp+13Ch+var_24]
.text:004080E3                 mov     [esp+13Ch+var_130], 0
.text:004080EB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004080F2                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004080FA                 call    sub_412670
.text:004080FF                 mov     esi, [esp+13Ch+var_20]
.text:00408106                 mov     ecx, [esp+13Ch+var_24]
.text:0040810D                 cmp     edx, esi
.text:0040810F                 ja      short loc_408117
.text:00408111                 jb      short loc_4080B5
.text:00408113                 cmp     eax, ecx
.text:00408115                 jb      short loc_4080B5
.text:00408117
.text:00408117 loc_408117:                             ; CODE XREF: sub_407D90+37F↑j
.text:00408117                 mov     esi, [ebp+0]
.text:0040811A                 mov     eax, 400h
.text:0040811F                 mov     ebx, [ebp+4]
.text:00408122                 mul     esi
.text:00408124                 mov     ecx, ebx
.text:00408126                 shl     ecx, 0Ah
.text:00408129                 jmp     loc_40807D
.text:0040812E ; ---------------------------------------------------------------------------
.text:0040812E
.text:0040812E loc_40812E:                             ; CODE XREF: sub_407D90+1B9↑j
.text:0040812E                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:0040812E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 00407F49 case 69
.text:00408135                 mov     ecx, ebx
.text:00408137                 xor     ebp, ebp
.text:00408139                 mov     [esp+13Ch+var_34], ebp
.text:00408140                 sar     ecx, 1Fh
.text:00408143                 mov     ebx, [esp+13Ch+var_3C]
.text:0040814A                 mov     [esp+13Ch+var_38], ecx
.text:00408151                 lea     esi, [esp+13Ch+var_24]
.text:00408158                 mov     ebp, 5
.text:0040815D                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408164                 mov     edx, [esp+13Ch+var_38]
.text:0040816B                 mov     [esp+13Ch+Radix], ebx
.text:0040816F                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408177                 mov     [esp+13Ch+var_130], edx
.text:0040817B                 call    sub_412670
.text:00408180                 mov     [esp+13Ch+var_44], eax
.text:00408187                 mov     [esp+13Ch+var_40], edx
.text:0040818E
.text:0040818E loc_40818E:                             ; CODE XREF: sub_407D90+450↓j
.text:0040818E                 mov     ebx, [esi+4]
.text:00408191                 mov     eax, [esi]
.text:00408193                 cmp     [esp+13Ch+var_40], ebx
.text:0040819A                 mov     [esp+13Ch+var_48], ebx
.text:004081A1                 mov     [esp+13Ch+var_4C], eax
.text:004081A8                 ja      short loc_4081EE
.text:004081AA                 mov     ecx, [esp+13Ch+var_48]
.text:004081B1                 cmp     [esp+13Ch+var_40], ecx
.text:004081B8                 jb      short loc_4081C3
.text:004081BA                 cmp     [esp+13Ch+var_44], eax
.text:004081C1                 jnb     short loc_4081EE
.text:004081C3
.text:004081C3 loc_4081C3:                             ; CODE XREF: sub_407D90+428↑j
.text:004081C3                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004081C9                 mov     eax, 1
.text:004081CE                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004081D5
.text:004081D5 loc_4081D5:                             ; CODE XREF: sub_407D90+4AB↓j
.text:004081D5                 or      [esp+13Ch+var_34], eax
.text:004081DC                 dec     ebp
.text:004081DD                 cmp     ebp, 0FFFFFFFFh
.text:004081E0                 jnz     short loc_40818E
.text:004081E2                 mov     eax, [esp+13Ch+var_34]
.text:004081E9                 jmp     loc_40808A
.text:004081EE ; ---------------------------------------------------------------------------
.text:004081EE
.text:004081EE loc_4081EE:                             ; CODE XREF: sub_407D90+418↑j
.text:004081EE                                         ; sub_407D90+431↑j
.text:004081EE                 mov     ecx, [esp+13Ch+var_38]
.text:004081F5                 mov     eax, [esp+13Ch+var_4C]
.text:004081FC                 mov     ebx, [esp+13Ch+var_4C]
.text:00408203                 mul     [esp+13Ch+var_3C]
.text:0040820A                 imul    ebx, ecx
.text:0040820D                 mov     ecx, edx
.text:0040820F                 mov     [esp+13Ch+var_124], eax
.text:00408213                 add     ecx, ebx
.text:00408215                 mov     edx, [esp+13Ch+var_3C]
.text:0040821C                 mov     ebx, [esp+13Ch+var_48]
.text:00408223                 imul    edx, ebx
.text:00408226                 mov     ebx, [esp+13Ch+var_124]
.text:0040822A                 mov     [esi], ebx
.text:0040822C                 add     ecx, edx
.text:0040822E                 mov     [esp+13Ch+var_120], ecx
.text:00408232                 mov     eax, [esp+13Ch+var_120]
.text:00408236                 mov     [esi+4], eax
.text:00408239                 xor     eax, eax
.text:0040823B                 jmp     short loc_4081D5
.text:0040823D ; ---------------------------------------------------------------------------
.text:0040823D
.text:0040823D loc_40823D:                             ; CODE XREF: sub_407D90+1B9↑j
.text:0040823D                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:0040823D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 00407F49 case 80
.text:00408244                 mov     eax, ebx
.text:00408246                 xor     ebp, ebp
.text:00408248                 mov     [esp+13Ch+var_98], ebp
.text:0040824F                 sar     eax, 1Fh
.text:00408252                 mov     edx, [esp+13Ch+var_A4]
.text:00408259                 mov     [esp+13Ch+var_A0], eax
.text:00408260                 lea     esi, [esp+13Ch+var_24]
.text:00408267                 mov     ebp, 4
.text:0040826C                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408273                 mov     ebx, [esp+13Ch+var_A0]
.text:0040827A                 mov     [esp+13Ch+Radix], edx
.text:0040827E                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408286                 mov     [esp+13Ch+var_130], ebx
.text:0040828A                 call    sub_412670
.text:0040828F                 mov     [esp+13Ch+var_AC], eax
.text:00408296                 mov     [esp+13Ch+var_A8], edx
.text:0040829D
.text:0040829D loc_40829D:                             ; CODE XREF: sub_407D90+55F↓j
.text:0040829D                 mov     ebx, [esi+4]
.text:004082A0                 mov     edx, [esi]
.text:004082A2                 cmp     [esp+13Ch+var_A8], ebx
.text:004082A9                 mov     [esp+13Ch+var_B0], ebx
.text:004082B0                 mov     [esp+13Ch+var_B4], edx
.text:004082B7                 ja      short loc_4082FD
.text:004082B9                 mov     eax, [esp+13Ch+var_B0]
.text:004082C0                 cmp     [esp+13Ch+var_A8], eax
.text:004082C7                 jb      short loc_4082D2
.text:004082C9                 cmp     [esp+13Ch+var_AC], edx
.text:004082D0                 jnb     short loc_4082FD
.text:004082D2
.text:004082D2 loc_4082D2:                             ; CODE XREF: sub_407D90+537↑j
.text:004082D2                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004082D8                 mov     eax, 1
.text:004082DD                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004082E4
.text:004082E4 loc_4082E4:                             ; CODE XREF: sub_407D90+5BA↓j
.text:004082E4                 or      [esp+13Ch+var_98], eax
.text:004082EB                 dec     ebp
.text:004082EC                 cmp     ebp, 0FFFFFFFFh
.text:004082EF                 jnz     short loc_40829D
.text:004082F1                 mov     eax, [esp+13Ch+var_98]
.text:004082F8                 jmp     loc_40808A
.text:004082FD ; ---------------------------------------------------------------------------
.text:004082FD
.text:004082FD loc_4082FD:                             ; CODE XREF: sub_407D90+527↑j
.text:004082FD                                         ; sub_407D90+540↑j
.text:004082FD                 mov     ecx, [esp+13Ch+var_A0]
.text:00408304                 mov     eax, [esp+13Ch+var_B4]
.text:0040830B                 mov     ebx, [esp+13Ch+var_B4]
.text:00408312                 mul     [esp+13Ch+var_A4]
.text:00408319                 imul    ebx, ecx
.text:0040831C                 mov     ecx, edx
.text:0040831E                 mov     [esp+13Ch+var_124], eax
.text:00408322                 add     ecx, ebx
.text:00408324                 mov     edx, [esp+13Ch+var_A4]
.text:0040832B                 mov     ebx, [esp+13Ch+var_B0]
.text:00408332                 xor     eax, eax
.text:00408334                 imul    edx, ebx
.text:00408337                 add     ecx, edx
.text:00408339                 mov     [esp+13Ch+var_120], ecx
.text:0040833D                 mov     ebx, [esp+13Ch+var_120]
.text:00408341                 mov     ecx, [esp+13Ch+var_124]
.text:00408345                 mov     [esi+4], ebx
.text:00408348                 mov     [esi], ecx
.text:0040834A                 jmp     short loc_4082E4
.text:0040834C ; ---------------------------------------------------------------------------
.text:0040834C
.text:0040834C loc_40834C:                             ; CODE XREF: sub_407D90+1B9↑j
.text:0040834C                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:0040834C                 mov     [esp+13Ch+var_E4], ebx ; jumptable 00407F49 case 89
.text:00408350                 mov     eax, ebx
.text:00408352                 lea     esi, [esp+13Ch+var_24]
.text:00408359                 mov     [esp+13Ch+var_D8], 0
.text:00408361                 sar     eax, 1Fh
.text:00408364                 mov     edx, [esp+13Ch+var_E4]
.text:00408368                 mov     [esp+13Ch+var_E0], eax
.text:0040836C                 mov     ebp, 7
.text:00408371                 mov     ebx, [esp+13Ch+var_E0]
.text:00408375                 mov     [esp+13Ch+Radix], edx
.text:00408379                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408380                 mov     [esp+13Ch+var_130], ebx
.text:00408384                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040838C                 call    sub_412670
.text:00408391                 mov     [esp+13Ch+var_EC], eax
.text:00408395                 mov     [esp+13Ch+var_E8], edx
.text:00408399
.text:00408399 loc_408399:                             ; CODE XREF: sub_407D90+646↓j
.text:00408399                 mov     ebx, [esi+4]
.text:0040839C                 mov     edx, [esi]
.text:0040839E                 cmp     [esp+13Ch+var_E8], ebx
.text:004083A2                 mov     [esp+13Ch+var_F0], ebx
.text:004083A6                 mov     [esp+13Ch+var_F4], edx
.text:004083AA                 ja      short loc_4083E1
.text:004083AC                 mov     eax, [esp+13Ch+var_F0]
.text:004083B0                 cmp     [esp+13Ch+var_E8], eax
.text:004083B4                 jb      short loc_4083BC
.text:004083B6                 cmp     [esp+13Ch+var_EC], edx
.text:004083BA                 jnb     short loc_4083E1
.text:004083BC
.text:004083BC loc_4083BC:                             ; CODE XREF: sub_407D90+624↑j
.text:004083BC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:004083C2                 mov     eax, 1
.text:004083C7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004083CE
.text:004083CE loc_4083CE:                             ; CODE XREF: sub_407D90+68C↓j
.text:004083CE                 or      [esp+13Ch+var_D8], eax
.text:004083D2                 dec     ebp
.text:004083D3                 cmp     ebp, 0FFFFFFFFh
.text:004083D6                 jnz     short loc_408399
.text:004083D8                 mov     eax, [esp+13Ch+var_D8]
.text:004083DC                 jmp     loc_40808A
.text:004083E1 ; ---------------------------------------------------------------------------
.text:004083E1
.text:004083E1 loc_4083E1:                             ; CODE XREF: sub_407D90+61A↑j
.text:004083E1                                         ; sub_407D90+62A↑j
.text:004083E1                 mov     ecx, [esp+13Ch+var_E0]
.text:004083E5                 mov     eax, [esp+13Ch+var_F4]
.text:004083E9                 mov     ebx, [esp+13Ch+var_F4]
.text:004083ED                 mul     [esp+13Ch+var_E4]
.text:004083F1                 imul    ebx, ecx
.text:004083F4                 mov     ecx, edx
.text:004083F6                 mov     [esp+13Ch+var_124], eax
.text:004083FA                 add     ecx, ebx
.text:004083FC                 mov     edx, [esp+13Ch+var_E4]
.text:00408400                 mov     ebx, [esp+13Ch+var_F0]
.text:00408404                 xor     eax, eax
.text:00408406                 imul    edx, ebx
.text:00408409                 add     ecx, edx
.text:0040840B                 mov     [esp+13Ch+var_120], ecx
.text:0040840F                 mov     ebx, [esp+13Ch+var_120]
.text:00408413                 mov     ecx, [esp+13Ch+var_124]
.text:00408417                 mov     [esi+4], ebx
.text:0040841A                 mov     [esi], ecx
.text:0040841C                 jmp     short loc_4083CE
.text:0040841E ; ---------------------------------------------------------------------------
.text:0040841E
.text:0040841E loc_40841E:                             ; CODE XREF: sub_407D90+1B9↑j
.text:0040841E                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:0040841E                 mov     [esp+13Ch+var_104], ebx ; jumptable 00407F49 case 90
.text:00408422                 mov     eax, ebx
.text:00408424                 lea     esi, [esp+13Ch+var_24]
.text:0040842B                 mov     [esp+13Ch+var_F8], 0
.text:00408433                 sar     eax, 1Fh
.text:00408436                 mov     edx, [esp+13Ch+var_104]
.text:0040843A                 mov     [esp+13Ch+var_100], eax
.text:0040843E                 mov     ebp, 6
.text:00408443                 mov     ebx, [esp+13Ch+var_100]
.text:00408447                 mov     [esp+13Ch+Radix], edx
.text:0040844B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408452                 mov     [esp+13Ch+var_130], ebx
.text:00408456                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040845E                 call    sub_412670
.text:00408463                 mov     [esp+13Ch+var_10C], eax
.text:00408467                 mov     [esp+13Ch+var_108], edx
.text:0040846B
.text:0040846B loc_40846B:                             ; CODE XREF: sub_407D90+718↓j
.text:0040846B                 mov     ebx, [esi+4]
.text:0040846E                 mov     edx, [esi]
.text:00408470                 cmp     [esp+13Ch+var_108], ebx
.text:00408474                 mov     [esp+13Ch+var_110], ebx
.text:00408478                 mov     [esp+13Ch+var_114], edx
.text:0040847C                 ja      short loc_4084B3
.text:0040847E                 mov     eax, [esp+13Ch+var_110]
.text:00408482                 cmp     [esp+13Ch+var_108], eax
.text:00408486                 jb      short loc_40848E
.text:00408488                 cmp     [esp+13Ch+var_10C], edx
.text:0040848C                 jnb     short loc_4084B3
.text:0040848E
.text:0040848E loc_40848E:                             ; CODE XREF: sub_407D90+6F6↑j
.text:0040848E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408494                 mov     eax, 1
.text:00408499                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:004084A0
.text:004084A0 loc_4084A0:                             ; CODE XREF: sub_407D90+75E↓j
.text:004084A0                 or      [esp+13Ch+var_F8], eax
.text:004084A4                 dec     ebp
.text:004084A5                 cmp     ebp, 0FFFFFFFFh
.text:004084A8                 jnz     short loc_40846B
.text:004084AA                 mov     eax, [esp+13Ch+var_F8]
.text:004084AE                 jmp     loc_40808A
.text:004084B3 ; ---------------------------------------------------------------------------
.text:004084B3
.text:004084B3 loc_4084B3:                             ; CODE XREF: sub_407D90+6EC↑j
.text:004084B3                                         ; sub_407D90+6FC↑j
.text:004084B3                 mov     eax, [esp+13Ch+var_114]
.text:004084B7                 mov     ebx, [esp+13Ch+var_100]
.text:004084BB                 mul     [esp+13Ch+var_104]
.text:004084BF                 mov     ecx, edx
.text:004084C1                 mov     edx, [esp+13Ch+var_104]
.text:004084C5                 mov     [esp+13Ch+var_124], eax
.text:004084C9                 mov     eax, [esp+13Ch+var_114]
.text:004084CD                 imul    eax, ebx
.text:004084D0                 mov     ebx, [esp+13Ch+var_110]
.text:004084D4                 imul    edx, ebx
.text:004084D7                 add     ecx, eax
.text:004084D9                 xor     eax, eax
.text:004084DB                 add     ecx, edx
.text:004084DD                 mov     [esp+13Ch+var_120], ecx
.text:004084E1                 mov     ebx, [esp+13Ch+var_120]
.text:004084E5                 mov     ecx, [esp+13Ch+var_124]
.text:004084E9                 mov     [esi+4], ebx
.text:004084EC                 mov     [esi], ecx
.text:004084EE                 jmp     short loc_4084A0
.text:004084F0 ; ---------------------------------------------------------------------------
.text:004084F0
.text:004084F0 loc_4084F0:                             ; CODE XREF: sub_407D90+1B9↑j
.text:004084F0                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:004084F0                 xor     eax, eax        ; jumptable 00407F49 case 99
.text:004084F2                 jmp     loc_40808C
.text:004084F7 ; ---------------------------------------------------------------------------
.text:004084F7
.text:004084F7 loc_4084F7:                             ; CODE XREF: sub_407D90+1B9↑j
.text:004084F7                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:004084F7                 mov     [esp+13Ch+var_5C], ebx ; jumptable 00407F49 cases 71,103
.text:004084FE                 mov     eax, ebx
.text:00408500                 xor     ebp, ebp
.text:00408502                 mov     [esp+13Ch+var_50], ebp
.text:00408509                 sar     eax, 1Fh
.text:0040850C                 mov     edx, [esp+13Ch+var_5C]
.text:00408513                 mov     [esp+13Ch+var_58], eax
.text:0040851A                 lea     esi, [esp+13Ch+var_24]
.text:00408521                 mov     ebp, 2
.text:00408526                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040852D                 mov     ebx, [esp+13Ch+var_58]
.text:00408534                 mov     [esp+13Ch+Radix], edx
.text:00408538                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408540                 mov     [esp+13Ch+var_130], ebx
.text:00408544                 call    sub_412670
.text:00408549                 mov     [esp+13Ch+var_64], eax
.text:00408550                 mov     [esp+13Ch+var_60], edx
.text:00408557
.text:00408557 loc_408557:                             ; CODE XREF: sub_407D90+819↓j
.text:00408557                 mov     ebx, [esi+4]
.text:0040855A                 mov     edx, [esi]
.text:0040855C                 cmp     [esp+13Ch+var_60], ebx
.text:00408563                 mov     [esp+13Ch+var_68], ebx
.text:0040856A                 mov     [esp+13Ch+var_6C], edx
.text:00408571                 ja      short loc_4085B7
.text:00408573                 mov     eax, [esp+13Ch+var_68]
.text:0040857A                 cmp     [esp+13Ch+var_60], eax
.text:00408581                 jb      short loc_40858C
.text:00408583                 cmp     [esp+13Ch+var_64], edx
.text:0040858A                 jnb     short loc_4085B7
.text:0040858C
.text:0040858C loc_40858C:                             ; CODE XREF: sub_407D90+7F1↑j
.text:0040858C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408592                 mov     eax, 1
.text:00408597                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:0040859E
.text:0040859E loc_40859E:                             ; CODE XREF: sub_407D90+874↓j
.text:0040859E                 or      [esp+13Ch+var_50], eax
.text:004085A5                 dec     ebp
.text:004085A6                 cmp     ebp, 0FFFFFFFFh
.text:004085A9                 jnz     short loc_408557
.text:004085AB                 mov     eax, [esp+13Ch+var_50]
.text:004085B2                 jmp     loc_40808A
.text:004085B7 ; ---------------------------------------------------------------------------
.text:004085B7
.text:004085B7 loc_4085B7:                             ; CODE XREF: sub_407D90+7E1↑j
.text:004085B7                                         ; sub_407D90+7FA↑j
.text:004085B7                 mov     ecx, [esp+13Ch+var_58]
.text:004085BE                 mov     eax, [esp+13Ch+var_6C]
.text:004085C5                 mov     ebx, [esp+13Ch+var_6C]
.text:004085CC                 mul     [esp+13Ch+var_5C]
.text:004085D3                 imul    ebx, ecx
.text:004085D6                 mov     ecx, edx
.text:004085D8                 mov     [esp+13Ch+var_124], eax
.text:004085DC                 add     ecx, ebx
.text:004085DE                 mov     edx, [esp+13Ch+var_5C]
.text:004085E5                 mov     ebx, [esp+13Ch+var_68]
.text:004085EC                 xor     eax, eax
.text:004085EE                 imul    edx, ebx
.text:004085F1                 add     ecx, edx
.text:004085F3                 mov     [esp+13Ch+var_120], ecx
.text:004085F7                 mov     ebx, [esp+13Ch+var_120]
.text:004085FB                 mov     ecx, [esp+13Ch+var_124]
.text:004085FF                 mov     [esi+4], ebx
.text:00408602                 mov     [esi], ecx
.text:00408604                 jmp     short loc_40859E
.text:00408606 ; ---------------------------------------------------------------------------
.text:00408606
.text:00408606 loc_408606:                             ; CODE XREF: sub_407D90+1B9↑j
.text:00408606                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:00408606                 mov     [esp+13Ch+var_74], ebx ; jumptable 00407F49 cases 75,107
.text:0040860D                 mov     eax, ebx
.text:0040860F                 lea     esi, [esp+13Ch+var_24]
.text:00408616                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040861D                 sar     eax, 1Fh
.text:00408620                 mov     edx, [esp+13Ch+var_74]
.text:00408627                 mov     [esp+13Ch+var_70], eax
.text:0040862E                 mov     ebx, [esp+13Ch+var_70]
.text:00408635                 mov     [esp+13Ch+Radix], edx
.text:00408639                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408641                 mov     [esp+13Ch+var_130], ebx
.text:00408645                 call    sub_412670
.text:0040864A                 mov     ebp, [esp+13Ch+var_20]
.text:00408651                 mov     ecx, [esp+13Ch+var_24]
.text:00408658                 cmp     edx, ebp
.text:0040865A                 mov     [esp+13Ch+var_11C], ecx
.text:0040865E                 mov     [esp+13Ch+var_118], ebp
.text:00408662                 ja      short loc_408689
.text:00408664                 cmp     edx, [esp+13Ch+var_118]
.text:00408668                 jb      short loc_40866E
.text:0040866A                 cmp     eax, ecx
.text:0040866C                 jnb     short loc_408689
.text:0040866E
.text:0040866E loc_40866E:                             ; CODE XREF: sub_407D90+8D8↑j
.text:0040866E                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408674                 mov     edx, 1
.text:00408679                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408680
.text:00408680 loc_408680:                             ; CODE XREF: sub_407D90+93D↓j
.text:00408680                 xor     eax, eax
.text:00408682                 or      eax, edx
.text:00408684                 jmp     loc_40808A
.text:00408689 ; ---------------------------------------------------------------------------
.text:00408689
.text:00408689 loc_408689:                             ; CODE XREF: sub_407D90+8D2↑j
.text:00408689                                         ; sub_407D90+8DC↑j
.text:00408689                 mov     eax, [esp+13Ch+var_11C]
.text:0040868D                 mov     ebp, [esp+13Ch+var_11C]
.text:00408691                 mov     ebx, [esp+13Ch+var_118]
.text:00408695                 mul     [esp+13Ch+var_74]
.text:0040869C                 mov     [esp+13Ch+var_124], eax
.text:004086A0                 mov     eax, [esp+13Ch+var_70]
.text:004086A7                 mov     ecx, [esp+13Ch+var_124]
.text:004086AB                 imul    ebp, eax
.text:004086AE                 mov     eax, edx
.text:004086B0                 xor     edx, edx
.text:004086B2                 mov     [esi], ecx
.text:004086B4                 add     eax, ebp
.text:004086B6                 mov     ebp, [esp+13Ch+var_74]
.text:004086BD                 imul    ebp, ebx
.text:004086C0                 add     eax, ebp
.text:004086C2                 mov     [esp+13Ch+var_120], eax
.text:004086C6                 mov     ebp, [esp+13Ch+var_120]
.text:004086CA                 mov     [esi+4], ebp
.text:004086CD                 jmp     short loc_408680
.text:004086CF ; ---------------------------------------------------------------------------
.text:004086CF
.text:004086CF loc_4086CF:                             ; CODE XREF: sub_407D90+1B9↑j
.text:004086CF                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:004086CF                 mov     [esp+13Ch+var_84], ebx ; jumptable 00407F49 cases 77,109
.text:004086D6                 mov     eax, ebx
.text:004086D8                 xor     ebp, ebp
.text:004086DA                 mov     [esp+13Ch+var_78], ebp
.text:004086E1                 sar     eax, 1Fh
.text:004086E4                 mov     edx, [esp+13Ch+var_84]
.text:004086EB                 mov     [esp+13Ch+var_80], eax
.text:004086F2                 lea     esi, [esp+13Ch+var_24]
.text:004086F9                 mov     ebp, 1
.text:004086FE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00408705                 mov     ecx, [esp+13Ch+var_80]
.text:0040870C                 mov     [esp+13Ch+Radix], edx
.text:00408710                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00408718                 mov     [esp+13Ch+var_130], ecx
.text:0040871C                 call    sub_412670
.text:00408721                 mov     [esp+13Ch+var_8C], eax
.text:00408728                 mov     [esp+13Ch+var_88], edx
.text:0040872F
.text:0040872F loc_40872F:                             ; CODE XREF: sub_407D90+9F1↓j
.text:0040872F                 mov     ebx, [esi+4]
.text:00408732                 mov     edx, [esi]
.text:00408734                 cmp     [esp+13Ch+var_88], ebx
.text:0040873B                 mov     [esp+13Ch+var_90], ebx
.text:00408742                 mov     [esp+13Ch+var_94], edx
.text:00408749                 ja      short loc_40878F
.text:0040874B                 mov     eax, [esp+13Ch+var_90]
.text:00408752                 cmp     [esp+13Ch+var_88], eax
.text:00408759                 jb      short loc_408764
.text:0040875B                 cmp     [esp+13Ch+var_8C], edx
.text:00408762                 jnb     short loc_40878F
.text:00408764
.text:00408764 loc_408764:                             ; CODE XREF: sub_407D90+9C9↑j
.text:00408764                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0040876A                 mov     eax, 1
.text:0040876F                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408776
.text:00408776 loc_408776:                             ; CODE XREF: sub_407D90+A4C↓j
.text:00408776                 or      [esp+13Ch+var_78], eax
.text:0040877D                 dec     ebp
.text:0040877E                 cmp     ebp, 0FFFFFFFFh
.text:00408781                 jnz     short loc_40872F
.text:00408783                 mov     eax, [esp+13Ch+var_78]
.text:0040878A                 jmp     loc_40808A
.text:0040878F ; ---------------------------------------------------------------------------
.text:0040878F
.text:0040878F loc_40878F:                             ; CODE XREF: sub_407D90+9B9↑j
.text:0040878F                                         ; sub_407D90+9D2↑j
.text:0040878F                 mov     ecx, [esp+13Ch+var_80]
.text:00408796                 mov     eax, [esp+13Ch+var_94]
.text:0040879D                 mov     ebx, [esp+13Ch+var_94]
.text:004087A4                 mul     [esp+13Ch+var_84]
.text:004087AB                 imul    ebx, ecx
.text:004087AE                 mov     ecx, edx
.text:004087B0                 mov     [esp+13Ch+var_124], eax
.text:004087B4                 add     ecx, ebx
.text:004087B6                 mov     edx, [esp+13Ch+var_84]
.text:004087BD                 mov     ebx, [esp+13Ch+var_90]
.text:004087C4                 xor     eax, eax
.text:004087C6                 imul    edx, ebx
.text:004087C9                 add     ecx, edx
.text:004087CB                 mov     [esp+13Ch+var_120], ecx
.text:004087CF                 mov     ebx, [esp+13Ch+var_120]
.text:004087D3                 mov     ecx, [esp+13Ch+var_124]
.text:004087D7                 mov     [esi+4], ebx
.text:004087DA                 mov     [esi], ecx
.text:004087DC                 jmp     short loc_408776
.text:004087DE ; ---------------------------------------------------------------------------
.text:004087DE
.text:004087DE loc_4087DE:                             ; CODE XREF: sub_407D90+1B9↑j
.text:004087DE                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:004087DE                 mov     [esp+13Ch+var_C4], ebx ; jumptable 00407F49 cases 84,116
.text:004087E2                 mov     eax, ebx
.text:004087E4                 xor     ebp, ebp
.text:004087E6                 mov     [esp+13Ch+var_B8], ebp
.text:004087ED                 sar     eax, 1Fh
.text:004087F0                 mov     edx, [esp+13Ch+var_C4]
.text:004087F4                 mov     [esp+13Ch+var_C0], eax
.text:004087F8                 lea     esi, [esp+13Ch+var_24]
.text:004087FF                 mov     ebp, 3
.text:00408804                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:0040880B                 mov     ebx, [esp+13Ch+var_C0]
.text:0040880F                 mov     [esp+13Ch+Radix], edx
.text:00408813                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0040881B                 mov     [esp+13Ch+var_130], ebx
.text:0040881F                 call    sub_412670
.text:00408824                 mov     [esp+13Ch+var_CC], eax
.text:00408828                 mov     [esp+13Ch+var_C8], edx
.text:0040882C
.text:0040882C loc_40882C:                             ; CODE XREF: sub_407D90+ADC↓j
.text:0040882C                 mov     ebx, [esi+4]
.text:0040882F                 mov     edx, [esi]
.text:00408831                 cmp     [esp+13Ch+var_C8], ebx
.text:00408835                 mov     [esp+13Ch+var_D0], ebx
.text:00408839                 mov     [esp+13Ch+var_D4], edx
.text:0040883D                 ja      short loc_40887A
.text:0040883F                 mov     eax, [esp+13Ch+var_D0]
.text:00408843                 cmp     [esp+13Ch+var_C8], eax
.text:00408847                 jb      short loc_40884F
.text:00408849                 cmp     [esp+13Ch+var_CC], edx
.text:0040884D                 jnb     short loc_40887A
.text:0040884F
.text:0040884F loc_40884F:                             ; CODE XREF: sub_407D90+AB7↑j
.text:0040884F                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00408855                 mov     eax, 1
.text:0040885A                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00408861
.text:00408861 loc_408861:                             ; CODE XREF: sub_407D90+B25↓j
.text:00408861                 or      [esp+13Ch+var_B8], eax
.text:00408868                 dec     ebp
.text:00408869                 cmp     ebp, 0FFFFFFFFh
.text:0040886C                 jnz     short loc_40882C
.text:0040886E                 mov     eax, [esp+13Ch+var_B8]
.text:00408875                 jmp     loc_40808A
.text:0040887A ; ---------------------------------------------------------------------------
.text:0040887A
.text:0040887A loc_40887A:                             ; CODE XREF: sub_407D90+AAD↑j
.text:0040887A                                         ; sub_407D90+ABD↑j
.text:0040887A                 mov     ecx, [esp+13Ch+var_C0]
.text:0040887E                 mov     eax, [esp+13Ch+var_D4]
.text:00408882                 mov     ebx, [esp+13Ch+var_D4]
.text:00408886                 mul     [esp+13Ch+var_C4]
.text:0040888A                 imul    ebx, ecx
.text:0040888D                 mov     ecx, edx
.text:0040888F                 mov     [esp+13Ch+var_124], eax
.text:00408893                 add     ecx, ebx
.text:00408895                 mov     edx, [esp+13Ch+var_C4]
.text:00408899                 mov     ebx, [esp+13Ch+var_D0]
.text:0040889D                 xor     eax, eax
.text:0040889F                 imul    edx, ebx
.text:004088A2                 add     ecx, edx
.text:004088A4                 mov     [esp+13Ch+var_120], ecx
.text:004088A8                 mov     ebx, [esp+13Ch+var_120]
.text:004088AC                 mov     ecx, [esp+13Ch+var_124]
.text:004088B0                 mov     [esi+4], ebx
.text:004088B3                 mov     [esi], ecx
.text:004088B5                 jmp     short loc_408861
.text:004088B7 ; ---------------------------------------------------------------------------
.text:004088B7
.text:004088B7 loc_4088B7:                             ; CODE XREF: sub_407D90+1B9↑j
.text:004088B7                                         ; DATA XREF: sub_407D90:jpt_407F49↑o
.text:004088B7                 mov     [esp+13Ch+Radix], 2 ; jumptable 00407F49 case 119
.text:004088BF                 lea     ebp, [esp+13Ch+var_24]
.text:004088C6                 mov     [esp+13Ch+var_130], 0
.text:004088CE                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004088D5                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004088DD                 call    sub_412670
.text:004088E2                 mov     esi, [esp+13Ch+var_20]
.text:004088E9                 mov     ecx, [esp+13Ch+var_24]
.text:004088F0                 cmp     edx, esi
.text:004088F2                 ja      short loc_408902
.text:004088F4                 jb      loc_4080B5
.text:004088FA                 cmp     eax, ecx
.text:004088FC                 jb      loc_4080B5
.text:00408902
.text:00408902 loc_408902:                             ; CODE XREF: sub_407D90+B62↑j
.text:00408902                 mov     esi, [ebp+0]
.text:00408905                 mov     eax, 2
.text:0040890A                 mov     ecx, [ebp+4]
.text:0040890D                 mul     esi
.text:0040890F                 lea     edx, [edx+ecx*2]
.text:00408912                 jmp     loc_408082
.text:00408917 ; ---------------------------------------------------------------------------
.text:00408917
.text:00408917 loc_408917:                             ; CODE XREF: sub_407D90+196↑j
.text:00408917                                         ; sub_407D90+1A8↑j
.text:00408917                 mov     esi, 2
.text:0040891C                 mov     ebx, 3E8h
.text:00408921                 mov     [esp+13Ch+var_30], esi
.text:00408928                 jmp     loc_407F3E
.text:0040892D ; ---------------------------------------------------------------------------
.text:0040892D
.text:0040892D loc_40892D:                             ; CODE XREF: sub_407D90+19F↑j
.text:0040892D                 cmp     eax, 69h ; 'i'
.text:00408930                 jnz     loc_407F3E
.text:00408936                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0040893A                 jnz     loc_407F3E
.text:00408940                 mov     eax, 3
.text:00408945                 mov     [esp+13Ch+var_30], eax
.text:0040894C                 jmp     loc_407F3E
.text:00408951 ; ---------------------------------------------------------------------------
.text:00408951
.text:00408951 loc_408951:                             ; CODE XREF: sub_407D90+187↑j
.text:00408951                 mov     edx, [edi]
.text:00408953                 jmp     loc_407F3E
.text:00408958 ; ---------------------------------------------------------------------------
.text:00408958
.text:00408958 loc_408958:                             ; CODE XREF: sub_407D90+E2↑j
.text:00408958                 mov     edx, [esp+13Ch+var_24]
.text:0040895F                 mov     ecx, [esp+13Ch+var_20]
.text:00408966                 mov     edi, [esp+13Ch+arg_C]
.text:0040896D                 mov     [edi], edx
.text:0040896F                 mov     [edi+4], ecx
.text:00408972                 jmp     loc_407E9B
.text:00408977 ; ---------------------------------------------------------------------------
.text:00408977
.text:00408977 loc_408977:                             ; CODE XREF: sub_407D90+D3↑j
.text:00408977                 call    _errno
.text:0040897C                 cmp     dword ptr [eax], 22h ; '"'
.text:0040897F                 jnz     short loc_408992
.text:00408981                 mov     esi, 1
.text:00408986                 mov     [esp+13Ch+var_28], esi
.text:0040898D                 jmp     loc_407E69
.text:00408992 ; ---------------------------------------------------------------------------
.text:00408992
.text:00408992 loc_408992:                             ; CODE XREF: sub_407D90+BEF↑j
.text:00408992                                         ; sub_407D90+C15↓j ...
.text:00408992                 mov     eax, 4
.text:00408997                 jmp     loc_407EA2
.text:0040899C ; ---------------------------------------------------------------------------
.text:0040899C
.text:0040899C loc_40899C:                             ; CODE XREF: sub_407D90+C4↑j
.text:0040899C                 mov     ebx, [esp+13Ch+Str]
.text:004089A3                 test    ebx, ebx
.text:004089A5                 jz      short loc_408992
.text:004089A7                 movzx   eax, byte ptr [eax]
.text:004089AA                 test    al, al
.text:004089AC                 jz      short loc_408992
.text:004089AE                 mov     esi, [esp+13Ch+Str]
.text:004089B5                 movsx   ebp, al
.text:004089B8                 mov     [esp+13Ch+Type], ebp ; Val
.text:004089BC                 mov     [esp+13Ch+C], esi ; Str
.text:004089BF                 call    strchr
.text:004089C4                 test    eax, eax
.text:004089C6                 jz      short loc_408992
.text:004089C8                 mov     ecx, 1
.text:004089CD                 xor     edx, edx
.text:004089CF                 mov     [esp+13Ch+var_24], ecx
.text:004089D6                 mov     [esp+13Ch+var_20], edx
.text:004089DD                 jmp     loc_407E69
.text:004089E2 ; ---------------------------------------------------------------------------
.text:004089E2
.text:004089E2 loc_4089E2:                             ; CODE XREF: sub_407D90+61↑j
.text:004089E2                 mov     eax, ds:_pctype
.text:004089E7                 mov     ecx, [eax]
.text:004089E9                 movzx   eax, word ptr [ecx+edx*2]
.text:004089ED                 and     eax, 8
.text:004089F0                 jmp     loc_407E07
.text:004089F5 ; ---------------------------------------------------------------------------
.text:004089F5
.text:004089F5 loc_4089F5:                             ; CODE XREF: sub_407D90+33↑j
.text:004089F5                 lea     edi, [esp+13Ch+var_18]
.text:004089FC                 jmp     loc_407DC9
.text:00408A01 ; ---------------------------------------------------------------------------
.text:00408A01
.text:00408A01 loc_408A01:                             ; CODE XREF: sub_407D90+24↑j
.text:00408A01                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00408A09                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00408A11                 mov     [esp+13Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00408A18                 call    _assert
.text:00408A18 sub_407D90      endp
.text:00408A18
.text:00408A18 ; ---------------------------------------------------------------------------
.text:00408A1D                 align 10h
.text:00408A20
.text:00408A20 ; =============== S U B R O U T I N E =======================================
.text:00408A20
.text:00408A20
.text:00408A20 sub_408A20      proc near               ; CODE XREF: sub_401E80+D5↑p
.text:00408A20
.text:00408A20 var_1C          = dword ptr -1Ch
.text:00408A20 var_18          = dword ptr -18h
.text:00408A20 var_14          = dword ptr -14h
.text:00408A20 var_10          = dword ptr -10h
.text:00408A20 var_C           = dword ptr -0Ch
.text:00408A20 var_8           = dword ptr -8
.text:00408A20 var_4           = dword ptr -4
.text:00408A20 arg_0           = dword ptr  4
.text:00408A20 arg_4           = dword ptr  8
.text:00408A20 arg_8           = dword ptr  0Ch
.text:00408A20 arg_C           = dword ptr  10h
.text:00408A20 arg_10          = dword ptr  14h
.text:00408A20
.text:00408A20                 sub     esp, 1Ch
.text:00408A23                 mov     edx, [esp+1Ch+arg_C]
.text:00408A27                 mov     [esp+1Ch+var_4], 0
.text:00408A2F                 mov     ecx, [esp+1Ch+arg_10]
.text:00408A33                 mov     [esp+1Ch+var_8], 0
.text:00408A3B                 mov     [esp+1Ch+var_10], edx
.text:00408A3F                 mov     edx, [esp+1Ch+arg_4]
.text:00408A43                 mov     [esp+1Ch+var_C], ecx
.text:00408A47                 mov     ecx, [esp+1Ch+arg_8]
.text:00408A4B                 mov     [esp+1Ch+var_18], edx
.text:00408A4F                 mov     edx, [esp+1Ch+arg_0]
.text:00408A53                 mov     [esp+1Ch+var_14], ecx
.text:00408A57                 mov     [esp+1Ch+var_1C], edx
.text:00408A5A                 call    sub_4075E0
.text:00408A5F                 add     esp, 1Ch
.text:00408A62                 retn
.text:00408A62 sub_408A20      endp
.text:00408A62
.text:00408A62 ; ---------------------------------------------------------------------------
.text:00408A63                 align 10h
.text:00408A70                 sub     esp, 2Ch
.text:00408A73                 mov     edx, [esp+44h]
.text:00408A77                 mov     dword ptr [esp+18h], 0
.text:00408A7F                 mov     ecx, [esp+40h]
.text:00408A83                 mov     dword ptr [esp+14h], 0
.text:00408A8B                 mov     [esp+1Ch], edx
.text:00408A8F                 mov     edx, [esp+3Ch]
.text:00408A93                 mov     [esp+10h], ecx
.text:00408A97                 mov     ecx, [esp+38h]
.text:00408A9B                 mov     [esp+0Ch], edx
.text:00408A9F                 mov     edx, [esp+34h]
.text:00408AA3                 mov     [esp+8], ecx
.text:00408AA7                 mov     [esp+4], edx
.text:00408AAB                 mov     edx, [esp+30h]
.text:00408AAF                 mov     [esp], edx
.text:00408AB2                 call    loc_406A50
.text:00408AB7                 add     esp, 2Ch
.text:00408ABA                 retn
.text:00408ABA ; ---------------------------------------------------------------------------
.text:00408ABB                 align 10h
.text:00408AC0                 sub     esp, 1Ch
.text:00408AC3                 mov     edx, [esp+2Ch]
.text:00408AC7                 mov     dword ptr [esp+18h], 0
.text:00408ACF                 mov     ecx, [esp+30h]
.text:00408AD3                 mov     dword ptr [esp+14h], 1
.text:00408ADB                 mov     [esp+0Ch], edx
.text:00408ADF                 mov     edx, [esp+24h]
.text:00408AE3                 mov     [esp+10h], ecx
.text:00408AE7                 mov     ecx, [esp+28h]
.text:00408AEB                 mov     [esp+4], edx
.text:00408AEF                 mov     edx, [esp+20h]
.text:00408AF3                 mov     [esp+8], ecx
.text:00408AF7                 mov     [esp], edx
.text:00408AFA                 call    sub_4075E0
.text:00408AFF                 add     esp, 1Ch
.text:00408B02                 retn
.text:00408B02 ; ---------------------------------------------------------------------------
.text:00408B03                 align 10h
.text:00408B10                 sub     esp, 2Ch
.text:00408B13                 mov     edx, [esp+44h]
.text:00408B17                 mov     dword ptr [esp+18h], 0
.text:00408B1F                 mov     ecx, [esp+40h]
.text:00408B23                 mov     dword ptr [esp+14h], 1
.text:00408B2B                 mov     [esp+1Ch], edx
.text:00408B2F                 mov     edx, [esp+3Ch]
.text:00408B33                 mov     [esp+10h], ecx
.text:00408B37                 mov     ecx, [esp+38h]
.text:00408B3B                 mov     [esp+0Ch], edx
.text:00408B3F                 mov     edx, [esp+34h]
.text:00408B43                 mov     [esp+8], ecx
.text:00408B47                 mov     [esp+4], edx
.text:00408B4B                 mov     edx, [esp+30h]
.text:00408B4F                 mov     [esp], edx
.text:00408B52                 call    loc_406A50
.text:00408B57                 add     esp, 2Ch
.text:00408B5A                 retn
.text:00408B5A ; ---------------------------------------------------------------------------
.text:00408B5B                 align 10h
.text:00408B60                 mov     edx, [esp+4]
.text:00408B64                 mov     ds:dword_4151A0, edx
.text:00408B6A                 retn
.text:00408B6A ; ---------------------------------------------------------------------------
.text:00408B6B aWriteError     db 'write error',0      ; DATA XREF: sub_408B90:loc_408BD9↓o
.text:00408B77 ; const char aSS_0[]
.text:00408B77 aSS_0           db '%s: %s',0           ; DATA XREF: sub_408B90+77↓o
.text:00408B7E ; const char aS_2[]
.text:00408B7E aS_2            db '%s',0               ; DATA XREF: sub_408B90+A0↓o
.text:00408B81 ; ---------------------------------------------------------------------------
.text:00408B81                 jmp     short sub_408B90
.text:00408B81 ; ---------------------------------------------------------------------------
.text:00408B83                 align 10h
.text:00408B90
.text:00408B90 ; =============== S U B R O U T I N E =======================================
.text:00408B90
.text:00408B90
.text:00408B90 ; void __cdecl sub_408B90()
.text:00408B90 sub_408B90      proc near               ; CODE XREF: .text:00408B81↑j
.text:00408B90                                         ; DATA XREF: sub_401E80+6F↑o
.text:00408B90
.text:00408B90 Stream          = dword ptr -2Ch
.text:00408B90 ErrorMessage    = dword ptr -28h
.text:00408B90 var_24          = dword ptr -24h
.text:00408B90 var_20          = byte ptr -20h
.text:00408B90 var_1C          = dword ptr -1Ch
.text:00408B90 var_9           = byte ptr -9
.text:00408B90
.text:00408B90                 push    esi
.text:00408B91                 push    ebx
.text:00408B92                 sub     esp, 24h
.text:00408B95                 mov     edx, ds:_iob
.text:00408B9B                 mov     ecx, [edx+2Ch]
.text:00408B9E                 lea     esi, [edx+20h]
.text:00408BA1                 shr     ecx, 5
.text:00408BA4                 mov     bl, cl
.text:00408BA6                 mov     ecx, [edx+20h]
.text:00408BA9                 and     bl, 1
.text:00408BAC                 cmp     ecx, [esi+8]
.text:00408BAF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00408BB2                 setz    [esp+2Ch+var_9]
.text:00408BB7                 call    fclose
.text:00408BBC                 test    eax, eax
.text:00408BBE                 setnz   al
.text:00408BC1                 test    bl, bl
.text:00408BC3                 jnz     loc_408C53
.text:00408BC9                 test    al, al
.text:00408BCB                 jz      short loc_408C20
.text:00408BCD
.text:00408BCD loc_408BCD:                             ; CODE XREF: sub_408B90+CD↓j
.text:00408BCD                 call    _errno
.text:00408BD2                 mov     esi, [eax]
.text:00408BD4
.text:00408BD4 loc_408BD4:                             ; CODE XREF: sub_408B90+C7↓j
.text:00408BD4                 cmp     esi, 9
.text:00408BD7                 jz      short loc_408C46
.text:00408BD9
.text:00408BD9 loc_408BD9:                             ; CODE XREF: sub_408B90+B8↓j
.text:00408BD9                                         ; sub_408B90+C1↓j
.text:00408BD9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00408BE0                 call    ds:libintl_gettext
.text:00408BE6                 mov     ebx, eax
.text:00408BE8                 mov     eax, ds:dword_4151A0
.text:00408BED                 test    eax, eax
.text:00408BEF                 jz      short loc_408C26
.text:00408BF1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00408BF4                 call    sub_406590
.text:00408BF9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00408BFD                 mov     edx, Code
.text:00408C03                 mov     [esp+2Ch+var_1C], ebx
.text:00408C07                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00408C0F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00408C13                 mov     [esp+2Ch+Stream], edx ; Code
.text:00408C16                 call    sub_40A820
.text:00408C1B                 nop
.text:00408C1C                 lea     esi, [esi+0]
.text:00408C20
.text:00408C20 loc_408C20:                             ; CODE XREF: sub_408B90+3B↑j
.text:00408C20                                         ; sub_408B90+B4↓j ...
.text:00408C20                 add     esp, 24h
.text:00408C23                 pop     ebx
.text:00408C24                 pop     esi
.text:00408C25                 retn
.text:00408C26 ; ---------------------------------------------------------------------------
.text:00408C26
.text:00408C26 loc_408C26:                             ; CODE XREF: sub_408B90+5F↑j
.text:00408C26                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00408C2A                 mov     ebx, Code
.text:00408C30                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00408C38                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00408C3C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00408C3F                 call    sub_40A820
.text:00408C44                 jmp     short loc_408C20
.text:00408C46 ; ---------------------------------------------------------------------------
.text:00408C46
.text:00408C46 loc_408C46:                             ; CODE XREF: sub_408B90+47↑j
.text:00408C46                 test    bl, bl
.text:00408C48                 jnz     short loc_408BD9
.text:00408C4A                 cmp     [esp+2Ch+var_9], 0
.text:00408C4F                 jnz     short loc_408C20
.text:00408C51                 jmp     short loc_408BD9
.text:00408C53 ; ---------------------------------------------------------------------------
.text:00408C53
.text:00408C53 loc_408C53:                             ; CODE XREF: sub_408B90+33↑j
.text:00408C53                 xor     esi, esi
.text:00408C55                 test    al, al
.text:00408C57                 jz      loc_408BD4
.text:00408C5D                 jmp     loc_408BCD
.text:00408C5D sub_408B90      endp
.text:00408C5D
.text:00408C5D ; ---------------------------------------------------------------------------
.text:00408C62                 align 10h
.text:00408C70                 push    esi
.text:00408C71                 push    ebx
.text:00408C72                 sub     esp, 4
.text:00408C75                 mov     ebx, [esp+10h]
.text:00408C79                 cmp     byte ptr [ebx], 0
.text:00408C7C                 jz      short loc_408C84
.text:00408C7E                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:00408C82                 jz      short loc_408CD6
.text:00408C84
.text:00408C84 loc_408C84:                             ; CODE XREF: .text:00408C7C↑j
.text:00408C84                 xor     esi, esi
.text:00408C86
.text:00408C86 loc_408C86:                             ; CODE XREF: .text:00408CDB↓j
.text:00408C86                 mov     [esp], ebx
.text:00408C89                 call    sub_408DB0
.text:00408C8E                 sub     eax, ebx
.text:00408C90                 cmp     esi, eax
.text:00408C92                 jnb     short loc_408CB6
.text:00408C94                 lea     esi, [esi+0]
.text:00408C9A                 lea     edi, [edi+0]
.text:00408CA0
.text:00408CA0 loc_408CA0:                             ; CODE XREF: .text:00408CB4↓j
.text:00408CA0                 movzx   edx, byte ptr [eax+ebx-1]
.text:00408CA5                 cmp     dl, 2Fh ; '/'
.text:00408CA8                 jz      short loc_408CB1
.text:00408CAA                 cmp     dl, 5Ch ; '\'
.text:00408CAD                 mov     ecx, eax
.text:00408CAF                 jnz     short loc_408CC9
.text:00408CB1
.text:00408CB1 loc_408CB1:                             ; CODE XREF: .text:00408CA8↑j
.text:00408CB1                 dec     eax
.text:00408CB2                 cmp     esi, eax
.text:00408CB4                 jb      short loc_408CA0
.text:00408CB6
.text:00408CB6 loc_408CB6:                             ; CODE XREF: .text:00408C92↑j
.text:00408CB6                 movzx   edx, byte ptr [esi+ebx]
.text:00408CBA                 xor     eax, eax
.text:00408CBC                 cmp     dl, 2Fh ; '/'
.text:00408CBF                 jz      short loc_408CCF
.text:00408CC1                 cmp     dl, 5Ch ; '\'
.text:00408CC4                 jz      short loc_408CCF
.text:00408CC6
.text:00408CC6 loc_408CC6:                             ; CODE XREF: .text:00408CD4↓j
.text:00408CC6                 lea     ecx, [eax+esi]
.text:00408CC9
.text:00408CC9 loc_408CC9:                             ; CODE XREF: .text:00408CAF↑j
.text:00408CC9                 pop     edx
.text:00408CCA                 mov     eax, ecx
.text:00408CCC                 pop     ebx
.text:00408CCD                 pop     esi
.text:00408CCE                 retn
.text:00408CCF ; ---------------------------------------------------------------------------
.text:00408CCF
.text:00408CCF loc_408CCF:                             ; CODE XREF: .text:00408CBF↑j
.text:00408CCF                                         ; .text:00408CC4↑j
.text:00408CCF                 mov     eax, 1
.text:00408CD4                 jmp     short loc_408CC6
.text:00408CD6 ; ---------------------------------------------------------------------------
.text:00408CD6
.text:00408CD6 loc_408CD6:                             ; CODE XREF: .text:00408C82↑j
.text:00408CD6                 mov     esi, 2
.text:00408CDB                 jmp     short loc_408C86
.text:00408CDB ; ---------------------------------------------------------------------------
.text:00408CDD                 align 10h
.text:00408CE0
.text:00408CE0 ; =============== S U B R O U T I N E =======================================
.text:00408CE0
.text:00408CE0
.text:00408CE0 ; int __cdecl sub_408CE0(void *)
.text:00408CE0 sub_408CE0      proc near               ; CODE XREF: sub_403800+38↑p
.text:00408CE0
.text:00408CE0 var_2C          = dword ptr -2Ch
.text:00408CE0 Src             = dword ptr -28h
.text:00408CE0 Size            = dword ptr -24h
.text:00408CE0 var_11          = byte ptr -11h
.text:00408CE0 arg_0           = dword ptr  4
.text:00408CE0
.text:00408CE0                 push    ebp
.text:00408CE1                 push    edi
.text:00408CE2                 push    esi
.text:00408CE3                 push    ebx
.text:00408CE4                 sub     esp, 1Ch
.text:00408CE7                 mov     edi, [esp+2Ch+arg_0]
.text:00408CEB                 cmp     byte ptr [edi], 0
.text:00408CEE                 jz      short loc_408CFA
.text:00408CF0                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00408CF4                 jz      loc_408D97
.text:00408CFA
.text:00408CFA loc_408CFA:                             ; CODE XREF: sub_408CE0+E↑j
.text:00408CFA                 xor     esi, esi
.text:00408CFC
.text:00408CFC loc_408CFC:                             ; CODE XREF: sub_408CE0+BC↓j
.text:00408CFC                 mov     [esp+2Ch+var_2C], edi
.text:00408CFF                 call    sub_408DB0
.text:00408D04                 sub     eax, edi
.text:00408D06                 cmp     esi, eax
.text:00408D08                 jnb     short loc_408D26
.text:00408D0A                 lea     esi, [esi+0]
.text:00408D10
.text:00408D10 loc_408D10:                             ; CODE XREF: sub_408CE0+44↓j
.text:00408D10                 movzx   edx, byte ptr [eax+edi-1]
.text:00408D15                 cmp     dl, 2Fh ; '/'
.text:00408D18                 jz      short loc_408D21
.text:00408D1A                 cmp     dl, 5Ch ; '\'
.text:00408D1D                 mov     ebx, eax
.text:00408D1F                 jnz     short loc_408D37
.text:00408D21
.text:00408D21 loc_408D21:                             ; CODE XREF: sub_408CE0+38↑j
.text:00408D21                 dec     eax
.text:00408D22                 cmp     esi, eax
.text:00408D24                 jb      short loc_408D10
.text:00408D26
.text:00408D26 loc_408D26:                             ; CODE XREF: sub_408CE0+28↑j
.text:00408D26                 movzx   eax, byte ptr [esi+edi]
.text:00408D2A                 xor     edx, edx
.text:00408D2C                 cmp     al, 2Fh ; '/'
.text:00408D2E                 jz      short loc_408D90
.text:00408D30                 cmp     al, 5Ch ; '\'
.text:00408D32                 jz      short loc_408D90
.text:00408D34
.text:00408D34 loc_408D34:                             ; CODE XREF: sub_408CE0+B5↓j
.text:00408D34                 lea     ebx, [edx+esi]
.text:00408D37
.text:00408D37 loc_408D37:                             ; CODE XREF: sub_408CE0+3F↑j
.text:00408D37                 cmp     byte ptr [edi], 0
.text:00408D3A                 mov     ebp, ebx
.text:00408D3C                 jz      short loc_408D44
.text:00408D3E                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00408D42                 jz      short loc_408D8B
.text:00408D44
.text:00408D44 loc_408D44:                             ; CODE XREF: sub_408CE0+5C↑j
.text:00408D44                 test    ebx, ebx
.text:00408D46
.text:00408D46 loc_408D46:                             ; CODE XREF: sub_408CE0+AE↓j
.text:00408D46                 setz    [esp+2Ch+var_11]
.text:00408D4B                 movzx   ecx, [esp+2Ch+var_11]
.text:00408D50                 lea     edx, [ecx+ebx+1]
.text:00408D54                 mov     [esp+2Ch+var_2C], edx ; size_t
.text:00408D57                 call    sub_408EA0
.text:00408D5C                 mov     [esp+2Ch+var_2C], eax ; void *
.text:00408D5F                 mov     esi, eax
.text:00408D61                 mov     [esp+2Ch+Size], ebx ; Size
.text:00408D65                 mov     [esp+2Ch+Src], edi ; Src
.text:00408D69                 call    memcpy
.text:00408D6E                 cmp     [esp+2Ch+var_11], 0
.text:00408D73                 jz      short loc_408D7C
.text:00408D75                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:00408D79                 lea     ebp, [ebx+1]
.text:00408D7C
.text:00408D7C loc_408D7C:                             ; CODE XREF: sub_408CE0+93↑j
.text:00408D7C                 mov     byte ptr [ebp+esi+0], 0
.text:00408D81                 mov     eax, esi
.text:00408D83                 add     esp, 1Ch
.text:00408D86                 pop     ebx
.text:00408D87                 pop     esi
.text:00408D88                 pop     edi
.text:00408D89                 pop     ebp
.text:00408D8A                 retn
.text:00408D8B ; ---------------------------------------------------------------------------
.text:00408D8B
.text:00408D8B loc_408D8B:                             ; CODE XREF: sub_408CE0+62↑j
.text:00408D8B                 cmp     ebx, 2
.text:00408D8E                 jmp     short loc_408D46
.text:00408D90 ; ---------------------------------------------------------------------------
.text:00408D90
.text:00408D90 loc_408D90:                             ; CODE XREF: sub_408CE0+4E↑j
.text:00408D90                                         ; sub_408CE0+52↑j
.text:00408D90                 mov     edx, 1
.text:00408D95                 jmp     short loc_408D34
.text:00408D97 ; ---------------------------------------------------------------------------
.text:00408D97
.text:00408D97 loc_408D97:                             ; CODE XREF: sub_408CE0+14↑j
.text:00408D97                 mov     esi, 2
.text:00408D9C                 jmp     loc_408CFC
.text:00408D9C sub_408CE0      endp
.text:00408D9C
.text:00408D9C ; ---------------------------------------------------------------------------
.text:00408DA1                 align 10h
.text:00408DB0
.text:00408DB0 ; =============== S U B R O U T I N E =======================================
.text:00408DB0
.text:00408DB0
.text:00408DB0 sub_408DB0      proc near               ; CODE XREF: sub_403800+20↑p
.text:00408DB0                                         ; .text:00408C89↑p ...
.text:00408DB0
.text:00408DB0 arg_0           = dword ptr  4
.text:00408DB0
.text:00408DB0                 mov     ecx, [esp+arg_0]
.text:00408DB4                 movzx   eax, byte ptr [ecx]
.text:00408DB7                 test    al, al
.text:00408DB9                 jz      short loc_408DC1
.text:00408DBB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:00408DBF                 jz      short loc_408E07
.text:00408DC1
.text:00408DC1 loc_408DC1:                             ; CODE XREF: sub_408DB0+9↑j
.text:00408DC1                                         ; sub_408DB0+5D↓j
.text:00408DC1                 test    al, al
.text:00408DC3                 mov     edx, ecx
.text:00408DC5                 jz      short loc_408DE0
.text:00408DC7                 movzx   eax, byte ptr [ecx]
.text:00408DCA                 lea     esi, [esi+0]
.text:00408DD0
.text:00408DD0 loc_408DD0:                             ; CODE XREF: sub_408DB0+2E↓j
.text:00408DD0                 cmp     al, 2Fh ; '/'
.text:00408DD2                 jz      short loc_408DE3
.text:00408DD4                 cmp     al, 5Ch ; '\'
.text:00408DD6                 jz      short loc_408DE3
.text:00408DD8
.text:00408DD8 loc_408DD8:                             ; CODE XREF: sub_408DB0+45↓j
.text:00408DD8                 inc     edx
.text:00408DD9                 movzx   eax, byte ptr [edx]
.text:00408DDC                 test    al, al
.text:00408DDE                 jnz     short loc_408DD0
.text:00408DE0
.text:00408DE0 loc_408DE0:                             ; CODE XREF: sub_408DB0+15↑j
.text:00408DE0                                         ; sub_408DB0+50↓j ...
.text:00408DE0                 mov     eax, ecx
.text:00408DE2                 retn
.text:00408DE3 ; ---------------------------------------------------------------------------
.text:00408DE3
.text:00408DE3 loc_408DE3:                             ; CODE XREF: sub_408DB0+22↑j
.text:00408DE3                                         ; sub_408DB0+26↑j ...
.text:00408DE3                 inc     edx
.text:00408DE4                 movzx   eax, byte ptr [edx]
.text:00408DE7                 cmp     al, 2Fh ; '/'
.text:00408DE9                 jz      short loc_408DE3
.text:00408DEB                 cmp     al, 5Ch ; '\'
.text:00408DED                 jz      short loc_408DE3
.text:00408DEF                 test    al, al
.text:00408DF1                 jz      short loc_408DF7
.text:00408DF3                 mov     ecx, edx
.text:00408DF5                 jmp     short loc_408DD8
.text:00408DF7 ; ---------------------------------------------------------------------------
.text:00408DF7
.text:00408DF7 loc_408DF7:                             ; CODE XREF: sub_408DB0+41↑j
.text:00408DF7                 movzx   eax, byte ptr [ecx]
.text:00408DFA                 cmp     al, 2Fh ; '/'
.text:00408DFC                 jz      short loc_408E02
.text:00408DFE                 cmp     al, 5Ch ; '\'
.text:00408E00                 jnz     short loc_408DE0
.text:00408E02
.text:00408E02 loc_408E02:                             ; CODE XREF: sub_408DB0+4C↑j
.text:00408E02                 lea     ecx, [edx-1]
.text:00408E05                 jmp     short loc_408DE0
.text:00408E07 ; ---------------------------------------------------------------------------
.text:00408E07
.text:00408E07 loc_408E07:                             ; CODE XREF: sub_408DB0+F↑j
.text:00408E07                 add     ecx, 2
.text:00408E0A                 movzx   eax, byte ptr [ecx]
.text:00408E0D                 jmp     short loc_408DC1
.text:00408E0D sub_408DB0      endp
.text:00408E0D
.text:00408E0D ; ---------------------------------------------------------------------------
.text:00408E0F                 align 10h
.text:00408E10
.text:00408E10 ; =============== S U B R O U T I N E =======================================
.text:00408E10
.text:00408E10
.text:00408E10 ; int __cdecl sub_408E10(char *)
.text:00408E10 sub_408E10      proc near               ; CODE XREF: sub_403800+2A↑p
.text:00408E10
.text:00408E10 Str             = dword ptr -0Ch
.text:00408E10 arg_0           = dword ptr  4
.text:00408E10
.text:00408E10                 push    ebx
.text:00408E11                 sub     esp, 8
.text:00408E14                 mov     ebx, [esp+0Ch+arg_0]
.text:00408E18                 mov     [esp+0Ch+Str], ebx ; Str
.text:00408E1B                 call    strlen
.text:00408E20                 cmp     eax, 1
.text:00408E23                 jbe     short loc_408E40
.text:00408E25                 movzx   edx, byte ptr [eax+ebx-1]
.text:00408E2A                 cmp     dl, 2Fh ; '/'
.text:00408E2D                 jz      short loc_408E45
.text:00408E2F                 cmp     dl, 5Ch ; '\'
.text:00408E32                 jz      short loc_408E45
.text:00408E34                 lea     esi, [esi+0]
.text:00408E3A                 lea     edi, [edi+0]
.text:00408E40
.text:00408E40 loc_408E40:                             ; CODE XREF: sub_408E10+13↑j
.text:00408E40                                         ; sub_408E10+39↓j ...
.text:00408E40                 add     esp, 8
.text:00408E43                 pop     ebx
.text:00408E44                 retn
.text:00408E45 ; ---------------------------------------------------------------------------
.text:00408E45
.text:00408E45 loc_408E45:                             ; CODE XREF: sub_408E10+1D↑j
.text:00408E45                                         ; sub_408E10+22↑j ...
.text:00408E45                 dec     eax
.text:00408E46                 cmp     eax, 1
.text:00408E49                 jbe     short loc_408E40
.text:00408E4B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00408E50                 cmp     dl, 2Fh ; '/'
.text:00408E53                 jz      short loc_408E45
.text:00408E55                 cmp     dl, 5Ch ; '\'
.text:00408E58                 jz      short loc_408E45
.text:00408E5A                 jmp     short loc_408E40
.text:00408E5A sub_408E10      endp
.text:00408E5A
.text:00408E5A ; ---------------------------------------------------------------------------
.text:00408E5C                 align 10h
.text:00408E60
.text:00408E60 ; =============== S U B R O U T I N E =======================================
.text:00408E60
.text:00408E60
.text:00408E60 sub_408E60      proc near               ; CODE XREF: sub_403230+B1↑p
.text:00408E60
.text:00408E60 Size            = dword ptr -0Ch
.text:00408E60 var_4           = dword ptr -4
.text:00408E60 arg_0           = dword ptr  4
.text:00408E60 arg_4           = dword ptr  8
.text:00408E60
.text:00408E60                 sub     esp, 0Ch
.text:00408E63                 xor     edx, edx
.text:00408E65                 mov     ecx, [esp+0Ch+arg_4]
.text:00408E69                 mov     [esp+0Ch+var_4], ebx
.text:00408E6D                 mov     eax, 0FFFFFFFFh
.text:00408E72                 mov     ebx, [esp+0Ch+arg_0]
.text:00408E76                 div     ecx
.text:00408E78                 cmp     eax, ebx
.text:00408E7A                 jb      short loc_408E99
.text:00408E7C                 mov     edx, ebx
.text:00408E7E                 imul    edx, ecx
.text:00408E81                 mov     [esp+0Ch+Size], edx ; Size
.text:00408E84                 call    malloc
.text:00408E89                 test    eax, eax
.text:00408E8B                 jz      short loc_408E95
.text:00408E8D
.text:00408E8D loc_408E8D:                             ; CODE XREF: sub_408E60+37↓j
.text:00408E8D                 mov     ebx, [esp+0Ch+var_4]
.text:00408E91                 add     esp, 0Ch
.text:00408E94                 retn
.text:00408E95 ; ---------------------------------------------------------------------------
.text:00408E95
.text:00408E95 loc_408E95:                             ; CODE XREF: sub_408E60+2B↑j
.text:00408E95                 test    ebx, ebx
.text:00408E97                 jz      short loc_408E8D
.text:00408E99
.text:00408E99 loc_408E99:                             ; CODE XREF: sub_408E60+1A↑j
.text:00408E99                 call    sub_40A180
.text:00408E99 sub_408E60      endp
.text:00408E99
.text:00408E99 ; ---------------------------------------------------------------------------
.text:00408E9E                 align 10h
.text:00408EA0
.text:00408EA0 ; =============== S U B R O U T I N E =======================================
.text:00408EA0
.text:00408EA0
.text:00408EA0 ; int __cdecl sub_408EA0(size_t)
.text:00408EA0 sub_408EA0      proc near               ; CODE XREF: .text:00405F69↑p
.text:00408EA0                                         ; .text:00406146↑p ...
.text:00408EA0
.text:00408EA0 Size            = dword ptr -0Ch
.text:00408EA0 var_4           = dword ptr -4
.text:00408EA0 arg_0           = dword ptr  4
.text:00408EA0
.text:00408EA0                 sub     esp, 0Ch
.text:00408EA3                 mov     [esp+0Ch+var_4], ebx
.text:00408EA7                 mov     ebx, [esp+0Ch+arg_0]
.text:00408EAB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408EAE                 call    malloc
.text:00408EB3                 test    eax, eax
.text:00408EB5                 jz      short loc_408EC0
.text:00408EB7
.text:00408EB7 loc_408EB7:                             ; CODE XREF: sub_408EA0+22↓j
.text:00408EB7                 mov     ebx, [esp+0Ch+var_4]
.text:00408EBB                 add     esp, 0Ch
.text:00408EBE                 retn
.text:00408EBE ; ---------------------------------------------------------------------------
.text:00408EBF                 align 10h
.text:00408EC0
.text:00408EC0 loc_408EC0:                             ; CODE XREF: sub_408EA0+15↑j
.text:00408EC0                 test    ebx, ebx
.text:00408EC2                 jz      short loc_408EB7
.text:00408EC4                 call    sub_40A180
.text:00408EC4 sub_408EA0      endp
.text:00408EC4
.text:00408EC4 ; ---------------------------------------------------------------------------
.text:00408EC9                 align 10h
.text:00408ED0                 sub     esp, 1Ch
.text:00408ED3                 xor     edx, edx
.text:00408ED5                 mov     eax, 0FFFFFFFFh
.text:00408EDA                 mov     [esp+14h], ebx
.text:00408EDE                 mov     ecx, [esp+20h]
.text:00408EE2                 mov     ebx, [esp+28h]
.text:00408EE6                 mov     [esp+18h], esi
.text:00408EEA                 mov     esi, [esp+24h]
.text:00408EEE                 div     ebx
.text:00408EF0                 cmp     eax, esi
.text:00408EF2                 jb      short loc_408F24
.text:00408EF4                 mov     [esp], ecx
.text:00408EF7                 mov     edx, esi
.text:00408EF9                 imul    edx, ebx
.text:00408EFC                 mov     [esp+4], edx
.text:00408F00                 call    realloc
.text:00408F05                 test    eax, eax
.text:00408F07                 mov     ecx, eax
.text:00408F09                 jz      short loc_408F20
.text:00408F0B
.text:00408F0B loc_408F0B:                             ; CODE XREF: .text:00408F22↓j
.text:00408F0B                 mov     ebx, [esp+14h]
.text:00408F0F                 mov     eax, ecx
.text:00408F11                 mov     esi, [esp+18h]
.text:00408F15                 add     esp, 1Ch
.text:00408F18                 retn
.text:00408F18 ; ---------------------------------------------------------------------------
.text:00408F19                 align 10h
.text:00408F20
.text:00408F20 loc_408F20:                             ; CODE XREF: .text:00408F09↑j
.text:00408F20                 test    esi, esi
.text:00408F22                 jz      short loc_408F0B
.text:00408F24
.text:00408F24 loc_408F24:                             ; CODE XREF: .text:00408EF2↑j
.text:00408F24                 call    sub_40A180
.text:00408F24 ; ---------------------------------------------------------------------------
.text:00408F29                 align 10h
.text:00408F30
.text:00408F30 ; =============== S U B R O U T I N E =======================================
.text:00408F30
.text:00408F30
.text:00408F30 ; int __cdecl sub_408F30(void *, size_t)
.text:00408F30 sub_408F30      proc near               ; CODE XREF: sub_406630+5B↑p
.text:00408F30
.text:00408F30 Block           = dword ptr -0Ch
.text:00408F30 Size            = dword ptr -8
.text:00408F30 var_4           = dword ptr -4
.text:00408F30 arg_0           = dword ptr  4
.text:00408F30 arg_4           = dword ptr  8
.text:00408F30
.text:00408F30                 sub     esp, 0Ch
.text:00408F33                 mov     edx, [esp+0Ch+arg_0]
.text:00408F37                 mov     [esp+0Ch+var_4], ebx
.text:00408F3B                 mov     ebx, [esp+0Ch+arg_4]
.text:00408F3F                 mov     [esp+0Ch+Block], edx ; Block
.text:00408F42                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408F46                 call    realloc
.text:00408F4B                 test    eax, eax
.text:00408F4D                 jz      short loc_408F57
.text:00408F4F
.text:00408F4F loc_408F4F:                             ; CODE XREF: sub_408F30+29↓j
.text:00408F4F                 mov     ebx, [esp+0Ch+var_4]
.text:00408F53                 add     esp, 0Ch
.text:00408F56                 retn
.text:00408F57 ; ---------------------------------------------------------------------------
.text:00408F57
.text:00408F57 loc_408F57:                             ; CODE XREF: sub_408F30+1D↑j
.text:00408F57                 test    ebx, ebx
.text:00408F59                 jz      short loc_408F4F
.text:00408F5B                 call    sub_40A180
.text:00408F5B sub_408F30      endp
.text:00408F5B
.text:00408F60 ; ---------------------------------------------------------------------------
.text:00408F60                 jmp     sub_4090B0
.text:00408F60 ; ---------------------------------------------------------------------------
.text:00408F65                 align 10h
.text:00408F70                 sub     esp, 0Ch
.text:00408F73                 mov     edx, [esp+14h]
.text:00408F77                 mov     dword ptr [esp+8], 1
.text:00408F7F                 mov     [esp+4], edx
.text:00408F83                 mov     edx, [esp+10h]
.text:00408F87                 mov     [esp], edx
.text:00408F8A                 call    sub_4090B0
.text:00408F8F                 add     esp, 0Ch
.text:00408F92                 retn
.text:00408F92 ; ---------------------------------------------------------------------------
.text:00408F93                 align 10h
.text:00408FA0                 sub     esp, 1Ch
.text:00408FA3                 mov     [esp+18h], ebx
.text:00408FA7                 mov     ebx, [esp+20h]
.text:00408FAB                 mov     [esp], ebx
.text:00408FAE                 call    malloc
.text:00408FB3                 test    eax, eax
.text:00408FB5                 jz      short loc_408FD3
.text:00408FB7
.text:00408FB7 loc_408FB7:                             ; CODE XREF: .text:00408FD5↓j
.text:00408FB7                 mov     [esp+8], ebx
.text:00408FBB                 mov     dword ptr [esp+4], 0
.text:00408FC3                 mov     [esp], eax
.text:00408FC6                 call    memset
.text:00408FCB                 mov     ebx, [esp+18h]
.text:00408FCF                 add     esp, 1Ch
.text:00408FD2                 retn
.text:00408FD3 ; ---------------------------------------------------------------------------
.text:00408FD3
.text:00408FD3 loc_408FD3:                             ; CODE XREF: .text:00408FB5↑j
.text:00408FD3                 test    ebx, ebx
.text:00408FD5                 jz      short loc_408FB7
.text:00408FD7                 call    sub_40A180
.text:00408FD7 ; ---------------------------------------------------------------------------
.text:00408FDC                 align 10h
.text:00408FE0                 sub     esp, 0Ch
.text:00408FE3                 xor     edx, edx
.text:00408FE5                 mov     ecx, [esp+14h]
.text:00408FE9                 mov     [esp+8], ebx
.text:00408FED                 mov     eax, 0FFFFFFFFh
.text:00408FF2                 mov     ebx, [esp+10h]
.text:00408FF6                 div     ecx
.text:00408FF8                 cmp     eax, ebx
.text:00408FFA                 jb      short loc_409018
.text:00408FFC                 mov     [esp+4], ecx
.text:00409000                 mov     [esp], ebx
.text:00409003                 call    calloc
.text:00409008                 test    eax, eax
.text:0040900A                 jz      short loc_409014
.text:0040900C
.text:0040900C loc_40900C:                             ; CODE XREF: .text:00409016↓j
.text:0040900C                 mov     ebx, [esp+8]
.text:00409010                 add     esp, 0Ch
.text:00409013                 retn
.text:00409014 ; ---------------------------------------------------------------------------
.text:00409014
.text:00409014 loc_409014:                             ; CODE XREF: .text:0040900A↑j
.text:00409014                 test    ebx, ebx
.text:00409016                 jz      short loc_40900C
.text:00409018
.text:00409018 loc_409018:                             ; CODE XREF: .text:00408FFA↑j
.text:00409018                 call    sub_40A180
.text:00409018 ; ---------------------------------------------------------------------------
.text:0040901D                 align 10h
.text:00409020                 sub     esp, 1Ch
.text:00409023                 mov     [esp+18h], ebx
.text:00409027                 mov     ebx, [esp+24h]
.text:0040902B                 mov     [esp], ebx
.text:0040902E                 call    malloc
.text:00409033                 test    eax, eax
.text:00409035                 mov     edx, eax
.text:00409037                 jz      short loc_409055
.text:00409039
.text:00409039 loc_409039:                             ; CODE XREF: .text:00409057↓j
.text:00409039                 mov     [esp+8], ebx
.text:0040903D                 mov     ecx, [esp+20h]
.text:00409041                 mov     [esp], edx
.text:00409044                 mov     [esp+4], ecx
.text:00409048                 call    memcpy
.text:0040904D                 mov     ebx, [esp+18h]
.text:00409051                 add     esp, 1Ch
.text:00409054                 retn
.text:00409055 ; ---------------------------------------------------------------------------
.text:00409055
.text:00409055 loc_409055:                             ; CODE XREF: .text:00409037↑j
.text:00409055                 test    ebx, ebx
.text:00409057                 jz      short loc_409039
.text:00409059                 call    sub_40A180
.text:00409059 ; ---------------------------------------------------------------------------
.text:0040905E                 align 10h
.text:00409060
.text:00409060 ; =============== S U B R O U T I N E =======================================
.text:00409060
.text:00409060
.text:00409060 ; int __cdecl sub_409060(char *)
.text:00409060 sub_409060      proc near               ; CODE XREF: sub_401E80+54D↑p
.text:00409060                                         ; sub_403800+14↑p ...
.text:00409060
.text:00409060 Str             = dword ptr -1Ch
.text:00409060 Src             = dword ptr -18h
.text:00409060 Size            = dword ptr -14h
.text:00409060 var_8           = dword ptr -8
.text:00409060 var_4           = dword ptr -4
.text:00409060 arg_0           = dword ptr  4
.text:00409060
.text:00409060                 sub     esp, 1Ch
.text:00409063                 mov     [esp+1Ch+var_4], esi
.text:00409067                 mov     esi, [esp+1Ch+arg_0]
.text:0040906B                 mov     [esp+1Ch+var_8], ebx
.text:0040906F                 mov     [esp+1Ch+Str], esi ; Str
.text:00409072                 call    strlen
.text:00409077                 lea     ebx, [eax+1]
.text:0040907A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040907D                 call    malloc
.text:00409082                 test    eax, eax
.text:00409084                 jz      short loc_4090A2
.text:00409086
.text:00409086 loc_409086:                             ; CODE XREF: sub_409060+44↓j
.text:00409086                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040908A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040908E                 mov     [esp+1Ch+Str], eax ; void *
.text:00409091                 call    memcpy
.text:00409096                 mov     ebx, [esp+1Ch+var_8]
.text:0040909A                 mov     esi, [esp+1Ch+var_4]
.text:0040909E                 add     esp, 1Ch
.text:004090A1                 retn
.text:004090A2 ; ---------------------------------------------------------------------------
.text:004090A2
.text:004090A2 loc_4090A2:                             ; CODE XREF: sub_409060+24↑j
.text:004090A2                 test    ebx, ebx
.text:004090A4                 jz      short loc_409086
.text:004090A6                 call    sub_40A180
.text:004090A6 sub_409060      endp
.text:004090A6
.text:004090A6 ; ---------------------------------------------------------------------------
.text:004090AB                 align 10h
.text:004090B0
.text:004090B0 ; =============== S U B R O U T I N E =======================================
.text:004090B0
.text:004090B0
.text:004090B0 ; int __cdecl sub_4090B0(void *, int, int)
.text:004090B0 sub_4090B0      proc near               ; CODE XREF: .text:00408F60↑j
.text:004090B0                                         ; .text:00408F8A↑p
.text:004090B0
.text:004090B0 Block           = dword ptr -1Ch
.text:004090B0 Size            = dword ptr -18h
.text:004090B0 var_C           = dword ptr -0Ch
.text:004090B0 var_8           = dword ptr -8
.text:004090B0 var_4           = dword ptr -4
.text:004090B0 arg_0           = dword ptr  4
.text:004090B0 arg_4           = dword ptr  8
.text:004090B0 arg_8           = dword ptr  0Ch
.text:004090B0
.text:004090B0                 sub     esp, 1Ch
.text:004090B3                 mov     [esp+1Ch+var_8], esi
.text:004090B7                 mov     esi, [esp+1Ch+arg_0]
.text:004090BB                 mov     [esp+1Ch+var_4], edi
.text:004090BF                 mov     edi, [esp+1Ch+arg_4]
.text:004090C3                 test    esi, esi
.text:004090C5                 mov     [esp+1Ch+var_C], ebx
.text:004090C9                 mov     ecx, [edi]
.text:004090CB                 mov     ebx, [esp+1Ch+arg_8]
.text:004090CF                 jz      short loc_409110
.text:004090D1                 xor     edx, edx
.text:004090D3                 mov     eax, 7FFFFFFFh
.text:004090D8                 div     ebx
.text:004090DA                 cmp     eax, ecx
.text:004090DC                 jb      short loc_409109
.text:004090DE                 add     ecx, ecx
.text:004090E0
.text:004090E0 loc_4090E0:                             ; CODE XREF: sub_4090B0+62↓j
.text:004090E0                                         ; sub_4090B0+71↓j ...
.text:004090E0                 mov     [edi], ecx
.text:004090E2                 imul    ebx, ecx
.text:004090E5                 mov     [esp+1Ch+Block], esi ; Block
.text:004090E8                 mov     [esp+1Ch+Size], ebx ; Size
.text:004090EC                 call    realloc
.text:004090F1                 test    eax, eax
.text:004090F3                 jz      short loc_409105
.text:004090F5
.text:004090F5 loc_4090F5:                             ; CODE XREF: sub_4090B0+57↓j
.text:004090F5                 mov     ebx, [esp+1Ch+var_C]
.text:004090F9                 mov     esi, [esp+1Ch+var_8]
.text:004090FD                 mov     edi, [esp+1Ch+var_4]
.text:00409101                 add     esp, 1Ch
.text:00409104                 retn
.text:00409105 ; ---------------------------------------------------------------------------
.text:00409105
.text:00409105 loc_409105:                             ; CODE XREF: sub_4090B0+43↑j
.text:00409105                 test    ebx, ebx
.text:00409107                 jz      short loc_4090F5
.text:00409109
.text:00409109 loc_409109:                             ; CODE XREF: sub_4090B0+2C↑j
.text:00409109                 call    sub_40A180
.text:00409109 ; ---------------------------------------------------------------------------
.text:0040910E                 align 10h
.text:00409110
.text:00409110 loc_409110:                             ; CODE XREF: sub_4090B0+1F↑j
.text:00409110                 test    ecx, ecx
.text:00409112                 jnz     short loc_4090E0
.text:00409114                 xor     edx, edx
.text:00409116                 mov     eax, 40h ; '@'
.text:0040911B                 div     ebx
.text:0040911D                 test    eax, eax
.text:0040911F                 mov     ecx, eax
.text:00409121                 jnz     short loc_4090E0
.text:00409123                 mov     ecx, 1
.text:00409128                 jmp     short loc_4090E0
.text:00409128 sub_4090B0      endp
.text:00409128
.text:00409128 ; ---------------------------------------------------------------------------
.text:0040912A                 align 10h
.text:00409130 byte_409130     db 0                    ; DATA XREF: sub_409170+377↓r
.text:00409131 aKmgtpezy       db 'KMGTPEZY.',0        ; DATA XREF: sub_409170+37↓o
.text:0040913B                 db 0                    ; DATA XREF: sub_409170+8D↓o
.text:0040913C ; const char a0lf[]
.text:0040913C a0lf            db '%.0Lf',0            ; DATA XREF: sub_409170+2B6↓o
.text:00409142 ; const char a1lf[]
.text:00409142 a1lf            db '%.1Lf',0            ; DATA XREF: sub_409170+584↓o
.text:00409148 flt_409148      dd 1.8446744e19         ; DATA XREF: sub_409170:loc_409610↓r
.text:00409148                                         ; sub_409170:loc_40961B↓r ...
.text:0040914C                 align 10h
.text:00409150 tbyte_409150    dt 1.8446744073709551615e19
.text:00409150                                         ; DATA XREF: sub_409170+23E↓r
.text:00409150                                         ; sub_409170+51A↓r ...
.text:0040915A                 align 10h
.text:00409160 tbyte_409160    dt 10.0                 ; DATA XREF: sub_409170+5E4↓r
.text:00409160                                         ; sub_409170:loc_4097C0↓r
.text:0040916A                 align 10h
.text:00409170
.text:00409170 ; =============== S U B R O U T I N E =======================================
.text:00409170
.text:00409170
.text:00409170 ; int __cdecl sub_409170(int, int, char *Buffer, int, int, int, int, int)
.text:00409170 sub_409170      proc near               ; CODE XREF: sub_403D80+3BD↑p
.text:00409170                                         ; sub_403D80+4CE↑p
.text:00409170
.text:00409170 var_C4          = qword ptr -0C4h
.text:00409170 var_BC          = tbyte ptr -0BCh
.text:00409170 var_B0          = dword ptr -0B0h
.text:00409170 var_9C          = tbyte ptr -9Ch
.text:00409170 var_8C          = dword ptr -8Ch
.text:00409170 var_88          = dword ptr -88h
.text:00409170 var_80          = dword ptr -80h
.text:00409170 var_7C          = tbyte ptr -7Ch
.text:00409170 var_64          = dword ptr -64h
.text:00409170 var_60          = dword ptr -60h
.text:00409170 var_5C          = dword ptr -5Ch
.text:00409170 var_58          = dword ptr -58h
.text:00409170 Size            = dword ptr -54h
.text:00409170 Src             = dword ptr -50h
.text:00409170 var_4C          = dword ptr -4Ch
.text:00409170 var_48          = dword ptr -48h
.text:00409170 var_44          = dword ptr -44h
.text:00409170 var_40          = dword ptr -40h
.text:00409170 var_3C          = dword ptr -3Ch
.text:00409170 var_38          = dword ptr -38h
.text:00409170 var_34          = dword ptr -34h
.text:00409170 var_30          = dword ptr -30h
.text:00409170 var_2C          = qword ptr -2Ch
.text:00409170 var_24          = qword ptr -24h
.text:00409170 arg_0           = dword ptr  4
.text:00409170 arg_4           = dword ptr  8
.text:00409170 Buffer          = dword ptr  0Ch
.text:00409170 arg_C           = dword ptr  10h
.text:00409170 arg_10          = dword ptr  14h
.text:00409170 arg_14          = dword ptr  18h
.text:00409170 arg_18          = dword ptr  1Ch
.text:00409170 arg_1C          = dword ptr  20h
.text:00409170
.text:00409170                 push    ebp
.text:00409171                 push    edi
.text:00409172                 push    esi
.text:00409173                 push    ebx
.text:00409174                 sub     esp, 0ACh
.text:0040917A                 mov     ecx, [esp+0BCh+arg_18]
.text:00409181                 mov     [esp+0BCh+var_44], 0FFFFFFFFh
.text:00409189                 mov     eax, [esp+0BCh+arg_C]
.text:00409190                 mov     edi, [esp+0BCh+arg_0]
.text:00409197                 mov     dword ptr [esp+0BCh+var_2C], ecx
.text:0040919E                 mov     esi, [esp+0BCh+arg_4]
.text:004091A5                 xor     ecx, ecx
.text:004091A7                 mov     [esp+0BCh+Src], (offset aKmgtpezy+8) ; "."
.text:004091AF                 and     eax, 3
.text:004091B2                 mov     ebx, [esp+0BCh+arg_1C]
.text:004091B9                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:004091C1                 mov     dword ptr [esp+0BCh+var_24], edi
.text:004091C8                 mov     ebp, [esp+0BCh+Buffer]
.text:004091CF                 mov     dword ptr [esp+0BCh+var_24+4], esi
.text:004091D6                 mov     edi, [esp+0BCh+arg_14]
.text:004091DD                 mov     dword ptr [esp+0BCh+var_2C+4], ebx
.text:004091E4                 mov     esi, [esp+0BCh+arg_10]
.text:004091EB                 setnz   cl
.text:004091EE                 mov     [esp+0BCh+var_30], eax
.text:004091F5                 mov     [esp+0BCh+Size], 1
.text:004091FD                 mov     [esp+0BCh+var_5C], offset byte_40913B
.text:00409205                 dec     ecx
.text:00409206                 and     ecx, 0FFFFFFE8h
.text:00409209                 add     ecx, 400h
.text:0040920F                 mov     [esp+0BCh+var_34], ecx
.text:00409216                 call    localeconv
.text:0040921B                 mov     edx, [eax]
.text:0040921D                 mov     ebx, eax
.text:0040921F                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00409222                 call    strlen
.text:00409227                 lea     ecx, [eax-1]
.text:0040922A                 cmp     ecx, 1
.text:0040922D                 ja      short loc_409239
.text:0040922F                 mov     [esp+0BCh+Size], eax
.text:00409233                 mov     ecx, [ebx]
.text:00409235                 mov     [esp+0BCh+Src], ecx
.text:00409239
.text:00409239 loc_409239:                             ; CODE XREF: sub_409170+BD↑j
.text:00409239                 mov     eax, [ebx+8]
.text:0040923C                 mov     edx, [ebx+4]
.text:0040923F                 mov     [esp+0BCh+var_58], eax
.text:00409243                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:00409246                 call    strlen
.text:0040924B                 cmp     eax, 2
.text:0040924E                 ja      short loc_409257
.text:00409250                 mov     ecx, [ebx+4]
.text:00409253                 mov     [esp+0BCh+var_5C], ecx
.text:00409257
.text:00409257 loc_409257:                             ; CODE XREF: sub_409170+DE↑j
.text:00409257                 cmp     dword ptr [esp+0BCh+var_2C+4], edi
.text:0040925E                 lea     ebx, [ebp+74h]
.text:00409261                 mov     [esp+0BCh+var_4C], ebx
.text:00409265                 mov     [esp+0BCh+var_48], ebx
.text:00409269                 ja      loc_409BA8
.text:0040926F                 jb      short loc_40927E
.text:00409271                 cmp     dword ptr [esp+0BCh+var_2C], esi
.text:00409278                 ja      loc_409BA8
.text:0040927E
.text:0040927E loc_40927E:                             ; CODE XREF: sub_409170+FF↑j
.text:0040927E                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:00409281                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00409288                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:0040928F                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:00409293                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00409297                 mov     [esp+0BCh+var_B0], ecx
.text:0040929B                 call    sub_412AE0
.text:004092A0                 mov     ebx, edx
.text:004092A2                 or      ebx, eax
.text:004092A4                 jnz     loc_409350
.text:004092AA                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:004092AD                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:004092B4                 mov     ebx, dword ptr [esp+0BCh+var_2C+4]
.text:004092BB                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:004092BF                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:004092C3                 mov     [esp+0BCh+var_B0], ebx
.text:004092C7                 call    sub_412670
.text:004092CC                 mov     [esp+0BCh+var_B0], edx
.text:004092D0                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:004092D7                 mov     ecx, [esp+0BCh+var_B0]
.text:004092DB                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:004092DF                 mov     eax, dword ptr [esp+0BCh+var_24]
.text:004092E6                 imul    ebx, ecx
.text:004092E9                 mul     dword ptr [esp+0BCh+var_BC+8]
.text:004092ED                 mov     ecx, edx
.text:004092EF                 add     ecx, ebx
.text:004092F1                 mov     [esp+0BCh+var_3C], eax
.text:004092F8                 mov     edx, dword ptr [esp+0BCh+var_24+4]
.text:004092FF                 mov     ebx, dword ptr [esp+0BCh+var_BC+8]
.text:00409303                 imul    edx, ebx
.text:00409306                 mov     ebx, [esp+0BCh+var_3C]
.text:0040930D                 add     ecx, edx
.text:0040930F                 mov     [esp+0BCh+var_38], ecx
.text:00409316                 mov     eax, [esp+0BCh+var_38]
.text:0040931D                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00409320                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00409324                 call    sub_412670
.text:00409329                 mov     ebx, dword ptr [esp+0BCh+var_24+4]
.text:00409330                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:00409337                 xor     ebx, edx
.text:00409339                 xor     eax, ecx
.text:0040933B                 or      ebx, eax
.text:0040933D                 jz      loc_409818
.text:00409343                 lea     esi, [esi+0]
.text:00409349                 lea     edi, [edi+0]
.text:00409350
.text:00409350 loc_409350:                             ; CODE XREF: sub_409170+134↑j
.text:00409350                                         ; sub_409170+A3C↓j ...
.text:00409350                 fild    [esp+0BCh+var_2C]
.text:00409357                 mov     edx, dword ptr [esp+0BCh+var_2C+4]
.text:0040935E                 test    edx, edx
.text:00409360                 js      loc_40980D
.text:00409366
.text:00409366 loc_409366:                             ; CODE XREF: sub_409170+6A3↓j
.text:00409366                 fild    [esp+0BCh+var_24]
.text:0040936D                 mov     ecx, dword ptr [esp+0BCh+var_24+4]
.text:00409374                 test    ecx, ecx
.text:00409376                 js      loc_409802
.text:0040937C
.text:0040937C loc_40937C:                             ; CODE XREF: sub_409170+698↓j
.text:0040937C                 push    edi
.text:0040937D                 push    esi
.text:0040937E                 fild    [esp+0C4h+var_C4]
.text:00409381                 add     esp, 8
.text:00409384                 test    edi, edi
.text:00409386                 js      loc_4097F7
.text:0040938C
.text:0040938C loc_40938C:                             ; CODE XREF: sub_409170+68D↓j
.text:0040938C                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00409394                 fdivrp  st(2), st
.text:00409396                 fmulp   st(1), st
.text:00409398                 fld     st
.text:0040939A                 fstp    [esp+0BCh+var_7C]
.text:0040939E                 jnz     loc_409626
.text:004093A4                 cmp     [esp+0BCh+var_30], 1
.text:004093AC                 jz      short loc_409420
.text:004093AE                 fld     ds:tbyte_409150
.text:004093B4                 fucomp  st(1)
.text:004093B6                 fnstsw  ax
.text:004093B8                 sahf
.text:004093B9                 jbe     short loc_409420
.text:004093BB                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:004093BE                 xor     ebx, ebx
.text:004093C0                 call    sub_412C70
.text:004093C5                 mov     edi, edx
.text:004093C7                 xor     ecx, ecx
.text:004093C9                 mov     edx, [esp+0BCh+var_30]
.text:004093D0                 mov     esi, eax
.text:004093D2                 test    edx, edx
.text:004093D4                 jnz     short loc_4093FC
.text:004093D6                 push    edi
.text:004093D7                 push    esi
.text:004093D8                 fild    [esp+0C4h+var_C4]
.text:004093DB                 add     esp, 8
.text:004093DE                 test    edi, edi
.text:004093E0                 js      loc_40961B
.text:004093E6
.text:004093E6 loc_4093E6:                             ; CODE XREF: sub_409170+4B1↓j
.text:004093E6                 fld     [esp+0BCh+var_7C]
.text:004093EA                 fxch    st(1)
.text:004093EC                 fucompp
.text:004093EE                 fnstsw  ax
.text:004093F0                 sahf
.text:004093F1                 jp      short loc_4093F5
.text:004093F3                 jz      short loc_4093FC
.text:004093F5
.text:004093F5 loc_4093F5:                             ; CODE XREF: sub_409170+281↑j
.text:004093F5                 mov     ecx, 1
.text:004093FA                 xor     ebx, ebx
.text:004093FC
.text:004093FC loc_4093FC:                             ; CODE XREF: sub_409170+264↑j
.text:004093FC                                         ; sub_409170+283↑j
.text:004093FC                 mov     edx, esi
.text:004093FE                 add     edx, ecx
.text:00409400                 mov     esi, edi
.text:00409402                 adc     esi, ebx
.text:00409404                 push    esi
.text:00409405                 push    edx
.text:00409406                 fild    [esp+0C4h+var_C4]
.text:00409409                 add     esp, 8
.text:0040940C                 test    esi, esi
.text:0040940E                 js      loc_409610
.text:00409414                 lea     esi, [esi+0]
.text:0040941A                 lea     edi, [edi+0]
.text:00409420
.text:00409420 loc_409420:                             ; CODE XREF: sub_409170+23C↑j
.text:00409420                                         ; sub_409170+249↑j ...
.text:00409420                 fstp    [esp+0BCh+var_BC+8]
.text:00409424                 xor     esi, esi
.text:00409426                 mov     dword ptr [esp+0BCh+var_BC+4], offset a0lf ; "%.0Lf"
.text:0040942E                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00409431                 call    sprintf
.text:00409436                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00409439                 call    strlen
.text:0040943E                 mov     ebx, eax
.text:00409440
.text:00409440 loc_409440:                             ; CODE XREF: sub_409170+5C7↓j
.text:00409440                                         ; sub_409170+5D2↓j
.text:00409440                 mov     dword ptr [esp+0BCh+var_BC+8], ebx ; Size
.text:00409444                 mov     edi, [esp+0BCh+var_4C]
.text:00409448                 mov     dword ptr [esp+0BCh+var_BC+4], ebp ; Src
.text:0040944C                 sub     edi, ebx
.text:0040944E                 mov     [esp+0BCh+var_48], edi
.text:00409452                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00409455                 call    memmove
.text:0040945A                 mov     ebp, [esp+0BCh+var_48]
.text:0040945E                 add     ebx, ebp
.text:00409460                 sub     ebx, esi
.text:00409462
.text:00409462 loc_409462:                             ; CODE XREF: sub_409170+97E↓j
.text:00409462                 test    byte ptr [esp+0BCh+arg_C], 4
.text:0040946A                 jnz     loc_4095E1
.text:00409470
.text:00409470 loc_409470:                             ; CODE XREF: sub_409170+49B↓j
.text:00409470                 cmp     byte ptr [esp+0BCh+arg_C], 0
.text:00409478                 jns     loc_409530
.text:0040947E                 mov     esi, [esp+0BCh+var_44]
.text:00409482                 test    esi, esi
.text:00409484                 js      loc_409546
.text:0040948A
.text:0040948A loc_40948A:                             ; CODE XREF: sub_409170+419↓j
.text:0040948A                                         ; sub_409170+44B↓j ...
.text:0040948A                 mov     edi, [esp+0BCh+arg_C]
.text:00409491                 and     edi, 100h
.text:00409497                 or      edi, [esp+0BCh+var_44]
.text:0040949B                 jz      short loc_4094C0
.text:0040949D                 test    byte ptr [esp+0BCh+arg_C], 40h
.text:004094A5                 jz      short loc_4094C0
.text:004094A7                 mov     esi, [esp+0BCh+var_4C]
.text:004094AB                 mov     byte ptr [esi], 20h ; ' '
.text:004094AE                 inc     esi
.text:004094AF                 mov     [esp+0BCh+var_4C], esi
.text:004094B3                 lea     esi, [esi+0]
.text:004094B9                 lea     edi, [edi+0]
.text:004094C0
.text:004094C0 loc_4094C0:                             ; CODE XREF: sub_409170+32B↑j
.text:004094C0                                         ; sub_409170+335↑j
.text:004094C0                 mov     ecx, [esp+0BCh+var_44]
.text:004094C4                 test    ecx, ecx
.text:004094C6                 jz      short loc_4094F0
.text:004094C8                 mov     eax, [esp+0BCh+var_4C]
.text:004094CC                 inc     [esp+0BCh+var_4C]
.text:004094D0                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:004094D8                 jnz     short loc_4094E3
.text:004094DA                 cmp     [esp+0BCh+var_44], 1
.text:004094DF                 mov     dl, 6Bh ; 'k'
.text:004094E1                 jz      short loc_4094EE
.text:004094E3
.text:004094E3 loc_4094E3:                             ; CODE XREF: sub_409170+368↑j
.text:004094E3                 mov     ebx, [esp+0BCh+var_44]
.text:004094E7                 movzx   edx, ds:byte_409130[ebx]
.text:004094EE
.text:004094EE loc_4094EE:                             ; CODE XREF: sub_409170+371↑j
.text:004094EE                 mov     [eax], dl
.text:004094F0
.text:004094F0 loc_4094F0:                             ; CODE XREF: sub_409170+356↑j
.text:004094F0                 test    [esp+0BCh+arg_C], 100h
.text:004094FB                 jz      short loc_409530
.text:004094FD                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00409505                 jz      short loc_40951C
.text:00409507                 mov     edx, [esp+0BCh+var_44]
.text:0040950B                 test    edx, edx
.text:0040950D                 jz      short loc_40951C
.text:0040950F                 mov     ebp, [esp+0BCh+var_4C]
.text:00409513                 mov     byte ptr [ebp+0], 69h ; 'i'
.text:00409517                 inc     ebp
.text:00409518                 mov     [esp+0BCh+var_4C], ebp
.text:0040951C
.text:0040951C loc_40951C:                             ; CODE XREF: sub_409170+395↑j
.text:0040951C                                         ; sub_409170+39D↑j
.text:0040951C                 mov     eax, [esp+0BCh+var_4C]
.text:00409520                 mov     byte ptr [eax], 42h ; 'B'
.text:00409523                 inc     eax
.text:00409524                 mov     [esp+0BCh+var_4C], eax
.text:00409528                 nop
.text:00409529                 lea     esi, [esi+0]
.text:00409530
.text:00409530 loc_409530:                             ; CODE XREF: sub_409170+308↑j
.text:00409530                                         ; sub_409170+38B↑j
.text:00409530                 mov     edi, [esp+0BCh+var_4C]
.text:00409534                 mov     byte ptr [edi], 0
.text:00409537                 mov     eax, [esp+0BCh+var_48]
.text:0040953B                 add     esp, 0ACh
.text:00409541                 pop     ebx
.text:00409542                 pop     esi
.text:00409543                 pop     edi
.text:00409544                 pop     ebp
.text:00409545                 retn
.text:00409546 ; ---------------------------------------------------------------------------
.text:00409546
.text:00409546 loc_409546:                             ; CODE XREF: sub_409170+314↑j
.text:00409546                 mov     [esp+0BCh+var_88], 0
.text:0040954E                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00409555                 cmp     [esp+0BCh+var_88], ebp
.text:00409559                 mov     [esp+0BCh+var_44], 0
.text:00409561                 mov     [esp+0BCh+var_8C], 1
.text:00409569                 jnb     short loc_4095CF
.text:0040956B
.text:0040956B loc_40956B:                             ; CODE XREF: sub_409170+46A↓j
.text:0040956B                 mov     esi, [esp+0BCh+var_34]
.text:00409572                 xor     edi, edi
.text:00409574                 lea     esi, [esi+0]
.text:0040957A                 lea     edi, [edi+0]
.text:00409580
.text:00409580 loc_409580:                             ; CODE XREF: sub_409170+449↓j
.text:00409580                                         ; sub_409170+458↓j
.text:00409580                 inc     [esp+0BCh+var_44]
.text:00409584                 cmp     [esp+0BCh+var_44], 8
.text:00409589                 jz      loc_40948A
.text:0040958F                 mov     eax, [esp+0BCh+var_8C]
.text:00409593                 mov     ebp, [esp+0BCh+var_8C]
.text:00409597                 mov     ebx, [esp+0BCh+var_88]
.text:0040959B                 mul     esi
.text:0040959D                 imul    ebp, edi
.text:004095A0                 imul    ebx, esi
.text:004095A3                 mov     ecx, eax
.text:004095A5                 add     edx, ebp
.text:004095A7                 lea     ebp, [ebx+edx]
.text:004095AA                 cmp     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:004095B1                 mov     [esp+0BCh+var_8C], ecx
.text:004095B5                 mov     [esp+0BCh+var_88], ebp
.text:004095B9                 jb      short loc_409580
.text:004095BB                 ja      loc_40948A
.text:004095C1                 cmp     ecx, dword ptr [esp+0BCh+var_2C]
.text:004095C8                 jb      short loc_409580
.text:004095CA                 jmp     loc_40948A
.text:004095CF ; ---------------------------------------------------------------------------
.text:004095CF
.text:004095CF loc_4095CF:                             ; CODE XREF: sub_409170+3F9↑j
.text:004095CF                 mov     ecx, dword ptr [esp+0BCh+var_2C]
.text:004095D6                 cmp     [esp+0BCh+var_8C], ecx
.text:004095DA                 jb      short loc_40956B
.text:004095DC                 jmp     loc_40948A
.text:004095E1 ; ---------------------------------------------------------------------------
.text:004095E1
.text:004095E1 loc_4095E1:                             ; CODE XREF: sub_409170+2FA↑j
.text:004095E1                 mov     eax, [esp+0BCh+var_48]
.text:004095E5                 mov     edx, [esp+0BCh+var_5C]
.text:004095E9                 mov     edi, [esp+0BCh+var_58]
.text:004095ED                 sub     ebx, eax
.text:004095EF                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; size_t
.text:004095F3                 mov     ebx, [esp+0BCh+var_48]
.text:004095F7                 mov     [esp+0BCh+var_B0], edx ; char *
.text:004095FB                 mov     dword ptr [esp+0BCh+var_BC+8], edi ; int
.text:004095FF                 mov     dword ptr [esp+0BCh+var_BC], ebx ; void *
.text:00409602                 call    sub_409EC0
.text:00409607                 mov     [esp+0BCh+var_48], eax
.text:0040960B                 jmp     loc_409470
.text:00409610 ; ---------------------------------------------------------------------------
.text:00409610
.text:00409610 loc_409610:                             ; CODE XREF: sub_409170+29E↑j
.text:00409610                 fadd    ds:flt_409148
.text:00409616                 jmp     loc_409420
.text:0040961B ; ---------------------------------------------------------------------------
.text:0040961B
.text:0040961B loc_40961B:                             ; CODE XREF: sub_409170+270↑j
.text:0040961B                 fadd    ds:flt_409148
.text:00409621                 jmp     loc_4093E6
.text:00409626 ; ---------------------------------------------------------------------------
.text:00409626
.text:00409626 loc_409626:                             ; CODE XREF: sub_409170+22E↑j
.text:00409626                 fstp    st
.text:00409628                 mov     [esp+0BCh+var_44], 0
.text:00409630                 mov     ebx, [esp+0BCh+var_34]
.text:00409637                 xor     eax, eax
.text:00409639                 push    eax
.text:0040963A                 fld1
.text:0040963C                 push    ebx
.text:0040963D                 fild    [esp+0C4h+var_C4]
.text:00409640                 add     esp, 8
.text:00409643                 lea     esi, [esi+0]
.text:00409649                 lea     edi, [edi+0]
.text:00409650
.text:00409650 loc_409650:                             ; CODE XREF: sub_409170+500↓j
.text:00409650                 fld     [esp+0BCh+var_7C]
.text:00409654                 fxch    st(2)
.text:00409656                 fmul    st, st(1)
.text:00409658                 inc     [esp+0BCh+var_44]
.text:0040965C                 fld     st
.text:0040965E                 fmul    st, st(2)
.text:00409660                 fxch    st(3)
.text:00409662                 fucomp  st(3)
.text:00409664                 fnstsw  ax
.text:00409666                 fstp    st(2)
.text:00409668                 sahf
.text:00409669                 jb      short loc_409672
.text:0040966B                 cmp     [esp+0BCh+var_44], 8
.text:00409670                 jl      short loc_409650
.text:00409672
.text:00409672 loc_409672:                             ; CODE XREF: sub_409170+4F9↑j
.text:00409672                 fstp    st
.text:00409674                 fld     [esp+0BCh+var_7C]
.text:00409678                 cmp     [esp+0BCh+var_30], 1
.text:00409680                 fdivrp  st(1), st
.text:00409682                 fld     st
.text:00409684                 fstp    [esp+0BCh+var_7C]
.text:00409688                 jz      short loc_4096F0
.text:0040968A                 fld     ds:tbyte_409150
.text:00409690                 fucomp  st(1)
.text:00409692                 fnstsw  ax
.text:00409694                 sahf
.text:00409695                 jbe     short loc_4096F0
.text:00409697                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:0040969A                 xor     ebx, ebx
.text:0040969C                 call    sub_412C70
.text:004096A1                 mov     edi, edx
.text:004096A3                 xor     ecx, ecx
.text:004096A5                 mov     edx, [esp+0BCh+var_30]
.text:004096AC                 mov     esi, eax
.text:004096AE                 test    edx, edx
.text:004096B0                 jnz     short loc_4096D8
.text:004096B2                 push    edi
.text:004096B3                 push    esi
.text:004096B4                 fild    [esp+0C4h+var_C4]
.text:004096B7                 add     esp, 8
.text:004096BA                 test    edi, edi
.text:004096BC                 js      loc_4097EC
.text:004096C2
.text:004096C2 loc_4096C2:                             ; CODE XREF: sub_409170+682↓j
.text:004096C2                 fld     [esp+0BCh+var_7C]
.text:004096C6                 fxch    st(1)
.text:004096C8                 fucompp
.text:004096CA                 fnstsw  ax
.text:004096CC                 sahf
.text:004096CD                 jp      short loc_4096D1
.text:004096CF                 jz      short loc_4096D8
.text:004096D1
.text:004096D1 loc_4096D1:                             ; CODE XREF: sub_409170+55D↑j
.text:004096D1                 mov     ecx, 1
.text:004096D6                 xor     ebx, ebx
.text:004096D8
.text:004096D8 loc_4096D8:                             ; CODE XREF: sub_409170+540↑j
.text:004096D8                                         ; sub_409170+55F↑j
.text:004096D8                 mov     edx, esi
.text:004096DA                 add     edx, ecx
.text:004096DC                 mov     esi, edi
.text:004096DE                 adc     esi, ebx
.text:004096E0                 push    esi
.text:004096E1                 push    edx
.text:004096E2                 fild    [esp+0C4h+var_C4]
.text:004096E5                 add     esp, 8
.text:004096E8                 test    esi, esi
.text:004096EA                 js      loc_4097E1
.text:004096F0
.text:004096F0 loc_4096F0:                             ; CODE XREF: sub_409170+518↑j
.text:004096F0                                         ; sub_409170+525↑j ...
.text:004096F0                 fstp    [esp+0BCh+var_BC+8]
.text:004096F4                 mov     dword ptr [esp+0BCh+var_BC+4], offset a1lf ; "%.1Lf"
.text:004096FC                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:004096FF                 call    sprintf
.text:00409704                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00409707                 call    strlen
.text:0040970C                 mov     ebx, eax
.text:0040970E                 mov     esi, [esp+0BCh+Size]
.text:00409712                 mov     eax, [esp+0BCh+Size]
.text:00409716                 inc     esi
.text:00409717                 add     eax, 2
.text:0040971A                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00409722                 jnz     short loc_40972B
.text:00409724                 mov     eax, [esp+0BCh+Size]
.text:00409728                 add     eax, 3
.text:0040972B
.text:0040972B loc_40972B:                             ; CODE XREF: sub_409170+5B2↑j
.text:0040972B                 cmp     eax, ebx
.text:0040972D                 jb      short loc_409748
.text:0040972F                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00409737                 jz      loc_409440
.text:0040973D                 cmp     byte ptr [ebx+ebp-1], 30h ; '0'
.text:00409742                 jnz     loc_409440
.text:00409748
.text:00409748 loc_409748:                             ; CODE XREF: sub_409170+5BD↑j
.text:00409748                 cmp     [esp+0BCh+var_30], 1
.text:00409750                 fld     [esp+0BCh+var_7C]
.text:00409754                 fld     ds:tbyte_409160
.text:0040975A                 fmulp   st(1), st
.text:0040975C                 jz      short loc_4097C0
.text:0040975E                 fld     ds:tbyte_409150
.text:00409764                 fucomp  st(1)
.text:00409766                 fnstsw  ax
.text:00409768                 sahf
.text:00409769                 jbe     short loc_4097C0
.text:0040976B                 fld     st
.text:0040976D                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00409770                 xor     ebx, ebx
.text:00409772                 fstp    [esp+0BCh+var_9C]
.text:00409776                 call    sub_412C70
.text:0040977B                 fld     [esp+0BCh+var_9C]
.text:0040977F                 mov     edi, edx
.text:00409781                 xor     ecx, ecx
.text:00409783                 mov     edx, [esp+0BCh+var_30]
.text:0040978A                 mov     esi, eax
.text:0040978C                 test    edx, edx
.text:0040978E                 jnz     short loc_4097DD
.text:00409790                 push    edi
.text:00409791                 push    esi
.text:00409792                 fild    [esp+0C4h+var_C4]
.text:00409795                 add     esp, 8
.text:00409798                 test    edi, edi
.text:0040979A                 js      short loc_4097D5
.text:0040979C
.text:0040979C loc_40979C:                             ; CODE XREF: sub_409170+66B↓j
.text:0040979C                 fucompp
.text:0040979E                 fnstsw  ax
.text:004097A0                 sahf
.text:004097A1                 jp      short loc_4097A5
.text:004097A3                 jz      short loc_4097AC
.text:004097A5
.text:004097A5 loc_4097A5:                             ; CODE XREF: sub_409170+631↑j
.text:004097A5                 mov     ecx, 1
.text:004097AA                 xor     ebx, ebx
.text:004097AC
.text:004097AC loc_4097AC:                             ; CODE XREF: sub_409170+633↑j
.text:004097AC                                         ; sub_409170+66F↓j
.text:004097AC                 mov     edx, esi
.text:004097AE                 add     edx, ecx
.text:004097B0                 mov     esi, edi
.text:004097B2                 adc     esi, ebx
.text:004097B4                 push    esi
.text:004097B5                 push    edx
.text:004097B6                 fild    [esp+0C4h+var_C4]
.text:004097B9                 add     esp, 8
.text:004097BC                 test    esi, esi
.text:004097BE                 js      short loc_4097CD
.text:004097C0
.text:004097C0 loc_4097C0:                             ; CODE XREF: sub_409170+5EC↑j
.text:004097C0                                         ; sub_409170+5F9↑j ...
.text:004097C0                 fld     ds:tbyte_409160
.text:004097C6                 fdivp   st(1), st
.text:004097C8                 jmp     loc_409420
.text:004097CD ; ---------------------------------------------------------------------------
.text:004097CD
.text:004097CD loc_4097CD:                             ; CODE XREF: sub_409170+64E↑j
.text:004097CD                 fadd    ds:flt_409148
.text:004097D3                 jmp     short loc_4097C0
.text:004097D5 ; ---------------------------------------------------------------------------
.text:004097D5
.text:004097D5 loc_4097D5:                             ; CODE XREF: sub_409170+62A↑j
.text:004097D5                 fadd    ds:flt_409148
.text:004097DB                 jmp     short loc_40979C
.text:004097DD ; ---------------------------------------------------------------------------
.text:004097DD
.text:004097DD loc_4097DD:                             ; CODE XREF: sub_409170+61E↑j
.text:004097DD                 fstp    st
.text:004097DF                 jmp     short loc_4097AC
.text:004097E1 ; ---------------------------------------------------------------------------
.text:004097E1
.text:004097E1 loc_4097E1:                             ; CODE XREF: sub_409170+57A↑j
.text:004097E1                 fadd    ds:flt_409148
.text:004097E7                 jmp     loc_4096F0
.text:004097EC ; ---------------------------------------------------------------------------
.text:004097EC
.text:004097EC loc_4097EC:                             ; CODE XREF: sub_409170+54C↑j
.text:004097EC                 fadd    ds:flt_409148
.text:004097F2                 jmp     loc_4096C2
.text:004097F7 ; ---------------------------------------------------------------------------
.text:004097F7
.text:004097F7 loc_4097F7:                             ; CODE XREF: sub_409170+216↑j
.text:004097F7                 fadd    ds:flt_409148
.text:004097FD                 jmp     loc_40938C
.text:00409802 ; ---------------------------------------------------------------------------
.text:00409802
.text:00409802 loc_409802:                             ; CODE XREF: sub_409170+206↑j
.text:00409802                 fadd    ds:flt_409148
.text:00409808                 jmp     loc_40937C
.text:0040980D ; ---------------------------------------------------------------------------
.text:0040980D
.text:0040980D loc_40980D:                             ; CODE XREF: sub_409170+1F0↑j
.text:0040980D                 fadd    ds:flt_409148
.text:00409813                 jmp     loc_409366
.text:00409818 ; ---------------------------------------------------------------------------
.text:00409818
.text:00409818 loc_409818:                             ; CODE XREF: sub_409170+1CD↑j
.text:00409818                 mov     [esp+0BCh+var_40], 0
.text:00409820
.text:00409820 loc_409820:                             ; CODE XREF: sub_409170+B5E↓j
.text:00409820                 xor     ebp, ebp
.text:00409822
.text:00409822 loc_409822:                             ; CODE XREF: sub_409170+B4D↓j
.text:00409822                                         ; sub_409170+B58↓j ...
.text:00409822                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:0040982A                 jz      loc_4099D7
.text:00409830                 mov     [esp+0BCh+var_44], 0
.text:00409838                 xor     edx, edx
.text:0040983A                 mov     eax, [esp+0BCh+var_34]
.text:00409841                 cmp     edx, [esp+0BCh+var_38]
.text:00409848                 ja      loc_4099D7
.text:0040984E                 jb      short loc_40985D
.text:00409850                 cmp     eax, [esp+0BCh+var_3C]
.text:00409857                 ja      loc_4099D7
.text:0040985D
.text:0040985D loc_40985D:                             ; CODE XREF: sub_409170+6DE↑j
.text:0040985D                 mov     esi, eax
.text:0040985F                 mov     edi, edx
.text:00409861
.text:00409861 loc_409861:                             ; CODE XREF: sub_409170+7AC↓j
.text:00409861                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00409865                 mov     ecx, [esp+0BCh+var_3C]
.text:0040986C                 mov     eax, [esp+0BCh+var_38]
.text:00409873                 mov     [esp+0BCh+var_B0], edi
.text:00409877                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:0040987A                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:0040987E                 call    sub_412AE0
.text:00409883                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00409887                 mov     edx, eax
.text:00409889                 mov     ebx, [esp+0BCh+var_40]
.text:0040988D                 mov     [esp+0BCh+var_B0], edi
.text:00409891                 shl     edx, 2
.text:00409894                 mov     ecx, ebp
.text:00409896                 add     edx, eax
.text:00409898                 lea     eax, [ebx+edx*2]
.text:0040989B                 xor     edx, edx
.text:0040989D                 div     [esp+0BCh+var_34]
.text:004098A4                 sar     ecx, 1
.text:004098A6                 lea     ebx, [ecx+edx*2]
.text:004098A9                 mov     [esp+0BCh+var_80], eax
.text:004098AD                 mov     ecx, [esp+0BCh+var_38]
.text:004098B4                 mov     edx, [esp+0BCh+var_3C]
.text:004098BB                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:004098BF                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:004098C2                 call    sub_412670
.text:004098C7                 cmp     ebx, [esp+0BCh+var_34]
.text:004098CE                 mov     [esp+0BCh+var_3C], eax
.text:004098D5                 mov     ecx, [esp+0BCh+var_80]
.text:004098D9                 mov     [esp+0BCh+var_38], edx
.text:004098E0                 mov     [esp+0BCh+var_40], ecx
.text:004098E4                 jnb     loc_409B91
.text:004098EA                 lea     edx, [ebp+ebx+0]
.text:004098EE                 test    edx, edx
.text:004098F0                 setnz   bl
.text:004098F3                 movzx   ebp, bl
.text:004098F6
.text:004098F6 loc_4098F6:                             ; CODE XREF: sub_409170+A33↓j
.text:004098F6                 inc     [esp+0BCh+var_44]
.text:004098FA                 xor     ebx, ebx
.text:004098FC                 mov     eax, [esp+0BCh+var_34]
.text:00409903                 cmp     ebx, [esp+0BCh+var_38]
.text:0040990A                 ja      short loc_409922
.text:0040990C                 jb      short loc_409917
.text:0040990E                 cmp     eax, [esp+0BCh+var_3C]
.text:00409915                 ja      short loc_409922
.text:00409917
.text:00409917 loc_409917:                             ; CODE XREF: sub_409170+79C↑j
.text:00409917                 cmp     [esp+0BCh+var_44], 8
.text:0040991C                 jl      loc_409861
.text:00409922
.text:00409922 loc_409922:                             ; CODE XREF: sub_409170+79A↑j
.text:00409922                                         ; sub_409170+7A5↑j
.text:00409922                 cmp     [esp+0BCh+var_38], 0
.text:0040992A                 ja      loc_4099D7
.text:00409930                 cmp     [esp+0BCh+var_3C], 9
.text:00409938                 ja      loc_4099D7
.text:0040993E                 cmp     [esp+0BCh+var_30], 1
.text:00409946                 jz      loc_409B79
.text:0040994C                 mov     eax, [esp+0BCh+var_30]
.text:00409953                 test    eax, eax
.text:00409955                 jnz     short loc_40996F
.text:00409957                 test    ebp, ebp
.text:00409959                 jle     short loc_40996F
.text:0040995B
.text:0040995B loc_40995B:                             ; CODE XREF: sub_409170+A16↓j
.text:0040995B                 mov     edx, [esp+0BCh+var_80]
.text:0040995F                 xor     ebp, ebp
.text:00409961                 inc     edx
.text:00409962                 mov     [esp+0BCh+var_40], edx
.text:00409966                 cmp     edx, 0Ah
.text:00409969                 jz      loc_409B5C
.text:0040996F
.text:0040996F loc_40996F:                             ; CODE XREF: sub_409170+7E5↑j
.text:0040996F                                         ; sub_409170+7E9↑j ...
.text:0040996F                 cmp     [esp+0BCh+var_38], 0
.text:00409977                 ja      short loc_4099D7
.text:00409979                 cmp     [esp+0BCh+var_3C], 9
.text:00409981                 ja      short loc_4099D7
.text:00409983                 mov     ecx, [esp+0BCh+var_40]
.text:00409987                 test    ecx, ecx
.text:00409989                 jnz     short loc_409995
.text:0040998B                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00409993                 jnz     short loc_4099D7
.text:00409995
.text:00409995 loc_409995:                             ; CODE XREF: sub_409170+819↑j
.text:00409995                 movzx   edx, byte ptr [esp+0BCh+var_40]
.text:0040999A                 mov     ecx, [esp+0BCh+var_4C]
.text:0040999E                 mov     edi, [esp+0BCh+var_4C]
.text:004099A2                 dec     ecx
.text:004099A3                 add     dl, 30h ; '0'
.text:004099A6                 mov     [esp+0BCh+var_48], ecx
.text:004099AA                 mov     [edi-1], dl
.text:004099AD                 mov     esi, [esp+0BCh+Size]
.text:004099B1                 mov     ebx, [esp+0BCh+Src]
.text:004099B5                 sub     [esp+0BCh+var_48], esi
.text:004099B9                 mov     dword ptr [esp+0BCh+var_BC+8], esi ; Size
.text:004099BD                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; Src
.text:004099C1                 mov     ebp, [esp+0BCh+var_48]
.text:004099C5                 mov     dword ptr [esp+0BCh+var_BC], ebp ; void *
.text:004099C8                 xor     ebp, ebp
.text:004099CA                 call    memcpy
.text:004099CF                 mov     [esp+0BCh+var_40], 0
.text:004099D7
.text:004099D7 loc_4099D7:                             ; CODE XREF: sub_409170+6BA↑j
.text:004099D7                                         ; sub_409170+6D8↑j ...
.text:004099D7                 cmp     [esp+0BCh+var_30], 1
.text:004099DF                 jz      loc_409B21
.text:004099E5                 mov     eax, [esp+0BCh+var_30]
.text:004099EC                 test    eax, eax
.text:004099EE                 jnz     short loc_409A61
.text:004099F0                 mov     edx, [esp+0BCh+var_40]
.text:004099F4                 add     edx, ebp
.text:004099F6                 test    edx, edx
.text:004099F8                 jle     short loc_409A61
.text:004099FA
.text:004099FA loc_4099FA:                             ; CODE XREF: sub_409170:loc_409B4A↓j
.text:004099FA                 add     [esp+0BCh+var_3C], 1
.text:00409A02                 adc     [esp+0BCh+var_38], 0
.text:00409A0A                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00409A12                 jz      short loc_409A61
.text:00409A14                 mov     esi, [esp+0BCh+var_34]
.text:00409A1B                 xor     ebx, ebx
.text:00409A1D                 mov     ebp, [esp+0BCh+var_38]
.text:00409A24                 mov     ecx, [esp+0BCh+var_3C]
.text:00409A2B                 xor     ebp, ebx
.text:00409A2D                 xor     esi, ecx
.text:00409A2F                 or      ebp, esi
.text:00409A31                 jnz     short loc_409A61
.text:00409A33                 cmp     [esp+0BCh+var_44], 8
.text:00409A38                 jge     short loc_409A61
.text:00409A3A                 inc     [esp+0BCh+var_44]
.text:00409A3E                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00409A46                 jz      loc_409AF3
.text:00409A4C
.text:00409A4C loc_409A4C:                             ; CODE XREF: sub_409170+9AC↓j
.text:00409A4C                 mov     ecx, 1
.text:00409A51                 xor     esi, esi
.text:00409A53                 mov     [esp+0BCh+var_3C], ecx
.text:00409A5A                 mov     [esp+0BCh+var_38], esi
.text:00409A61
.text:00409A61 loc_409A61:                             ; CODE XREF: sub_409170+87E↑j
.text:00409A61                                         ; sub_409170+888↑j ...
.text:00409A61                 mov     ebx, [esp+0BCh+var_48]
.text:00409A65                 lea     esi, [esi+0]
.text:00409A69                 lea     edi, [edi+0]
.text:00409A70
.text:00409A70 loc_409A70:                             ; CODE XREF: sub_409170+97C↓j
.text:00409A70                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00409A78                 mov     ecx, [esp+0BCh+var_38]
.text:00409A7F                 mov     ebp, [esp+0BCh+var_3C]
.text:00409A86                 mov     [esp+0BCh+var_B0], 0
.text:00409A8E                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00409A92                 mov     dword ptr [esp+0BCh+var_BC], ebp
.text:00409A95                 call    sub_412AE0
.text:00409A9A                 dec     [esp+0BCh+var_48]
.text:00409A9E                 add     al, 30h ; '0'
.text:00409AA0                 mov     esi, [esp+0BCh+var_48]
.text:00409AA4                 mov     [esi], al
.text:00409AA6                 mov     edx, [esp+0BCh+var_3C]
.text:00409AAD                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00409AB5                 mov     edi, [esp+0BCh+var_38]
.text:00409ABC                 mov     [esp+0BCh+var_B0], 0
.text:00409AC4                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00409AC7                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:00409ACB                 call    sub_412670
.text:00409AD0                 mov     [esp+0BCh+var_38], edx
.text:00409AD7                 mov     ebp, [esp+0BCh+var_38]
.text:00409ADE                 mov     [esp+0BCh+var_3C], eax
.text:00409AE5                 or      ebp, [esp+0BCh+var_3C]
.text:00409AEC                 jnz     short loc_409A70
.text:00409AEE                 jmp     loc_409462
.text:00409AF3 ; ---------------------------------------------------------------------------
.text:00409AF3
.text:00409AF3 loc_409AF3:                             ; CODE XREF: sub_409170+8D6↑j
.text:00409AF3                 dec     [esp+0BCh+var_48]
.text:00409AF7                 mov     edi, [esp+0BCh+var_48]
.text:00409AFB                 mov     byte ptr [edi], 30h ; '0'
.text:00409AFE                 mov     edx, [esp+0BCh+Size]
.text:00409B02                 mov     eax, [esp+0BCh+Src]
.text:00409B06                 mov     dword ptr [esp+0BCh+var_BC+8], edx ; Size
.text:00409B0A                 sub     edi, edx
.text:00409B0C                 mov     [esp+0BCh+var_48], edi
.text:00409B10                 mov     dword ptr [esp+0BCh+var_BC+4], eax ; Src
.text:00409B14                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00409B17                 call    memcpy
.text:00409B1C                 jmp     loc_409A4C
.text:00409B21 ; ---------------------------------------------------------------------------
.text:00409B21
.text:00409B21 loc_409B21:                             ; CODE XREF: sub_409170+86F↑j
.text:00409B21                 mov     ebx, [esp+0BCh+var_3C]
.text:00409B28                 mov     ecx, ebp
.text:00409B2A                 mov     esi, ebp
.text:00409B2C                 sar     esi, 1Fh
.text:00409B2F                 xor     ebp, ebp
.text:00409B31                 and     ebx, 1
.text:00409B34                 add     ecx, ebx
.text:00409B36                 adc     esi, ebp
.text:00409B38                 cmp     esi, 0
.text:00409B3B                 ja      short loc_409B42
.text:00409B3D                 cmp     ecx, 0
.text:00409B40                 jbe     short loc_409B55
.text:00409B42
.text:00409B42 loc_409B42:                             ; CODE XREF: sub_409170+9CB↑j
.text:00409B42                 mov     edi, [esp+0BCh+var_40]
.text:00409B46                 inc     edi
.text:00409B47                 cmp     edi, 5
.text:00409B4A
.text:00409B4A loc_409B4A:                             ; CODE XREF: sub_409170+9EA↓j
.text:00409B4A                 jg      loc_4099FA
.text:00409B50                 jmp     loc_409A61
.text:00409B55 ; ---------------------------------------------------------------------------
.text:00409B55
.text:00409B55 loc_409B55:                             ; CODE XREF: sub_409170+9D0↑j
.text:00409B55                 cmp     [esp+0BCh+var_40], 5
.text:00409B5A                 jmp     short loc_409B4A
.text:00409B5C ; ---------------------------------------------------------------------------
.text:00409B5C
.text:00409B5C loc_409B5C:                             ; CODE XREF: sub_409170+7F9↑j
.text:00409B5C                 add     [esp+0BCh+var_3C], 1
.text:00409B64                 mov     [esp+0BCh+var_40], 0
.text:00409B6C                 adc     [esp+0BCh+var_38], 0
.text:00409B74                 jmp     loc_40996F
.text:00409B79 ; ---------------------------------------------------------------------------
.text:00409B79
.text:00409B79 loc_409B79:                             ; CODE XREF: sub_409170+7D6↑j
.text:00409B79                 mov     edi, [esp+0BCh+var_80]
.text:00409B7D                 and     edi, 1
.text:00409B80                 lea     esi, [edi+ebp]
.text:00409B83                 cmp     esi, 2
.text:00409B86                 jg      loc_40995B
.text:00409B8C                 jmp     loc_40996F
.text:00409B91 ; ---------------------------------------------------------------------------
.text:00409B91
.text:00409B91 loc_409B91:                             ; CODE XREF: sub_409170+774↑j
.text:00409B91                 lea     edx, [ebp+ebx+0]
.text:00409B95                 cmp     [esp+0BCh+var_34], edx
.text:00409B9C                 sbb     ecx, ecx
.text:00409B9E                 not     ecx
.text:00409BA0                 lea     ebp, [ecx+3]
.text:00409BA3                 jmp     loc_4098F6
.text:00409BA8 ; ---------------------------------------------------------------------------
.text:00409BA8
.text:00409BA8 loc_409BA8:                             ; CODE XREF: sub_409170+F9↑j
.text:00409BA8                                         ; sub_409170+108↑j
.text:00409BA8                 mov     eax, edi
.text:00409BAA                 or      eax, esi
.text:00409BAC                 jz      loc_409350
.text:00409BB2                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00409BB6                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00409BBD                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:00409BC4                 mov     [esp+0BCh+var_B0], edi
.text:00409BC8                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00409BCB                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00409BCF                 call    sub_412AE0
.text:00409BD4                 mov     ebx, edx
.text:00409BD6                 or      ebx, eax
.text:00409BD8                 jnz     loc_409350
.text:00409BDE                 mov     [esp+0BCh+var_B0], edi
.text:00409BE2                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00409BE9                 mov     edi, dword ptr [esp+0BCh+var_2C]
.text:00409BF0                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00409BF4                 mov     dword ptr [esp+0BCh+var_BC+4], ebp
.text:00409BF8                 mov     dword ptr [esp+0BCh+var_BC], edi
.text:00409BFB                 call    sub_412670
.text:00409C00                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:00409C04                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:00409C0B                 mov     ebp, edx
.text:00409C0D                 mov     [esp+0BCh+var_B0], edx
.text:00409C11                 mov     esi, dword ptr [esp+0BCh+var_24+4]
.text:00409C18                 mov     edi, eax
.text:00409C1A                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00409C1D                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:00409C21                 call    sub_412AE0
.text:00409C26                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:00409C2A                 mov     ebx, eax
.text:00409C2C                 mov     esi, edx
.text:00409C2E                 shld    esi, eax, 2
.text:00409C32                 mov     [esp+0BCh+var_B0], ebp
.text:00409C36                 shl     ebx, 2
.text:00409C39                 add     ebx, eax
.text:00409C3B                 adc     esi, edx
.text:00409C3D                 shld    esi, ebx, 1
.text:00409C41                 add     ebx, ebx
.text:00409C43                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00409C46                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:00409C4A                 call    sub_412AE0
.text:00409C4F                 shld    edx, eax, 1
.text:00409C53                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:00409C5A                 add     eax, eax
.text:00409C5C                 mov     [esp+0BCh+var_64], eax
.text:00409C60                 mov     eax, dword ptr [esp+0BCh+var_24+4]
.text:00409C67                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:00409C6A                 mov     [esp+0BCh+var_60], edx
.text:00409C6E                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:00409C72                 mov     [esp+0BCh+var_B0], ebp
.text:00409C76                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00409C7A                 call    sub_412670
.text:00409C7F                 mov     [esp+0BCh+var_3C], eax
.text:00409C86                 mov     [esp+0BCh+var_38], edx
.text:00409C8D                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:00409C91                 mov     [esp+0BCh+var_B0], ebp
.text:00409C95                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00409C98                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:00409C9C                 call    sub_412670
.text:00409CA1                 cmp     [esp+0BCh+var_60], ebp
.text:00409CA5                 mov     [esp+0BCh+var_40], eax
.text:00409CA9                 ja      short loc_409CD3
.text:00409CAB                 jb      short loc_409CB3
.text:00409CAD                 cmp     [esp+0BCh+var_64], edi
.text:00409CB1                 jnb     short loc_409CD3
.text:00409CB3
.text:00409CB3 loc_409CB3:                             ; CODE XREF: sub_409170+B3B↑j
.text:00409CB3                 cmp     [esp+0BCh+var_60], 0
.text:00409CB8                 mov     ebp, 1
.text:00409CBD                 ja      loc_409822
.text:00409CC3                 cmp     [esp+0BCh+var_64], 0
.text:00409CC8                 ja      loc_409822
.text:00409CCE                 jmp     loc_409820
.text:00409CD3 ; ---------------------------------------------------------------------------
.text:00409CD3
.text:00409CD3 loc_409CD3:                             ; CODE XREF: sub_409170+B39↑j
.text:00409CD3                                         ; sub_409170+B41↑j
.text:00409CD3                 cmp     ebp, [esp+0BCh+var_60]
.text:00409CD7                 ja      short loc_409CEB
.text:00409CD9                 jb      short loc_409CE1
.text:00409CDB                 cmp     edi, [esp+0BCh+var_64]
.text:00409CDF                 jnb     short loc_409CEB
.text:00409CE1
.text:00409CE1 loc_409CE1:                             ; CODE XREF: sub_409170+B69↑j
.text:00409CE1                 mov     ebp, 3
.text:00409CE6                 jmp     loc_409822
.text:00409CEB ; ---------------------------------------------------------------------------
.text:00409CEB
.text:00409CEB loc_409CEB:                             ; CODE XREF: sub_409170+B67↑j
.text:00409CEB                                         ; sub_409170+B6F↑j
.text:00409CEB                 mov     ebp, 2
.text:00409CF0                 jmp     loc_409822
.text:00409CF0 sub_409170      endp
.text:00409CF0
.text:00409CF0 ; ---------------------------------------------------------------------------
.text:00409CF5 aHumanReadable  db 'human-readable',0   ; DATA XREF: .text:off_409D08↓o
.text:00409D04 aSi             db 'si',0               ; DATA XREF: .text:00409D0C↓o
.text:00409D07                 align 4
.text:00409D08 off_409D08      dd offset aHumanReadable
.text:00409D08                                         ; DATA XREF: sub_409F90+3A↓o
.text:00409D08                                         ; "human-readable"
.text:00409D0C                 dd offset aSi           ; "si"
.text:00409D10                 dd 0
.text:00409D14 unk_409D14      db 0B0h ; °             ; DATA XREF: sub_409F90+32↓o
.text:00409D14                                         ; sub_409F90+54↓r
.text:00409D15                 align 4
.text:00409D18                 db 90h
.text:00409D19                 align 4
.text:00409D1C aBlockSize      db 'block size',0       ; DATA XREF: .text:loc_409E02↓o
.text:00409D1C                                         ; .text:loc_409E54↓o ...
.text:00409D27 aSSTooLarge     db '%s `%s',27h,' too large',0
.text:00409D27                                         ; DATA XREF: .text:00409E13↓o
.text:00409D39                 db 17h dup(90h)
.text:00409D50 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:00409D50                                         ; DATA XREF: .text:00409E65↓o
.text:00409D77 aInvalidSS      db 'invalid %s `%s',27h,0
.text:00409D77                                         ; DATA XREF: .text:00409E86↓o
.text:00409D87 ; const char aPosixlyCorrect[]
.text:00409D87 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: .text:loc_409E90↓o
.text:00409D87                                         ; sub_409F90+11A↓o
.text:00409D97                 align 10h
.text:00409DA0                 sub     esp, 2Ch
.text:00409DA3                 movzx   edx, byte ptr [esp+34h]
.text:00409DA8                 mov     [esp+20h], ebx
.text:00409DAC                 mov     ebx, [esp+38h]
.text:00409DB0                 mov     [esp+24h], esi
.text:00409DB4                 mov     esi, [esp+30h]
.text:00409DB8                 mov     [esp+1Bh], dl
.text:00409DBC                 lea     edx, [esp+1Ch]
.text:00409DC0                 mov     [esp+28h], edi
.text:00409DC4                 mov     [esp+8], edx
.text:00409DC8                 mov     [esp+4], ebx
.text:00409DCC                 mov     [esp], esi
.text:00409DCF                 call    sub_409F90
.text:00409DD4                 mov     edx, [ebx+4]
.text:00409DD7                 mov     ecx, eax
.text:00409DD9                 mov     eax, [ebx]
.text:00409DDB                 mov     edi, edx
.text:00409DDD                 or      edi, eax
.text:00409DDF                 jz      loc_409E90
.text:00409DE5
.text:00409DE5 loc_409DE5:                             ; CODE XREF: .text:00409EB8↓j
.text:00409DE5                 test    ecx, ecx
.text:00409DE7                 jz      short loc_409E40
.text:00409DE9                 cmp     byte ptr [esp+1Bh], 0
.text:00409DEE                 jz      short loc_409E40
.text:00409DF0                 cmp     ecx, 3
.text:00409DF3                 ja      short loc_409E70
.text:00409DF5                 cmp     ecx, 2
.text:00409DF8                 jnb     short loc_409E54
.text:00409DFA                 dec     ecx
.text:00409DFB                 jz      short loc_409E02
.text:00409DFD
.text:00409DFD loc_409DFD:                             ; CODE XREF: .text:00409E73↓j
.text:00409DFD                 call    abort
.text:00409E02 ; ---------------------------------------------------------------------------
.text:00409E02
.text:00409E02 loc_409E02:                             ; CODE XREF: .text:00409DFB↑j
.text:00409E02                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:00409E09                 call    ds:libintl_gettext
.text:00409E0F                 mov     [esp+10h], esi
.text:00409E13                 mov     dword ptr [esp+8], offset aSSTooLarge ; "%s `%s' too large"
.text:00409E1B
.text:00409E1B loc_409E1B:                             ; CODE XREF: .text:00409E6D↓j
.text:00409E1B                                         ; .text:00409E8E↓j
.text:00409E1B                 mov     [esp+0Ch], eax
.text:00409E1F                 mov     dword ptr [esp+4], 0
.text:00409E27                 mov     ecx, Code
.text:00409E2D                 mov     [esp], ecx
.text:00409E30                 call    sub_40A820
.text:00409E35                 lea     esi, [esi+0]
.text:00409E39                 lea     edi, [edi+0]
.text:00409E40
.text:00409E40 loc_409E40:                             ; CODE XREF: .text:00409DE7↑j
.text:00409E40                                         ; .text:00409DEE↑j
.text:00409E40                 mov     eax, [esp+1Ch]
.text:00409E44                 mov     ebx, [esp+20h]
.text:00409E48                 mov     esi, [esp+24h]
.text:00409E4C                 mov     edi, [esp+28h]
.text:00409E50                 add     esp, 2Ch
.text:00409E53                 retn
.text:00409E54 ; ---------------------------------------------------------------------------
.text:00409E54
.text:00409E54 loc_409E54:                             ; CODE XREF: .text:00409DF8↑j
.text:00409E54                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:00409E5B                 call    ds:libintl_gettext
.text:00409E61                 mov     [esp+10h], esi
.text:00409E65                 mov     dword ptr [esp+8], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:00409E6D                 jmp     short loc_409E1B
.text:00409E6D ; ---------------------------------------------------------------------------
.text:00409E6F                 align 10h
.text:00409E70
.text:00409E70 loc_409E70:                             ; CODE XREF: .text:00409DF3↑j
.text:00409E70                 cmp     ecx, 4
.text:00409E73                 jnz     short loc_409DFD
.text:00409E75                 mov     dword ptr [esp], offset aBlockSize ; "block size"
.text:00409E7C                 call    ds:libintl_gettext
.text:00409E82                 mov     [esp+10h], esi
.text:00409E86                 mov     dword ptr [esp+8], offset aInvalidSS ; "invalid %s `%s'"
.text:00409E8E                 jmp     short loc_409E1B
.text:00409E90 ; ---------------------------------------------------------------------------
.text:00409E90
.text:00409E90 loc_409E90:                             ; CODE XREF: .text:00409DDF↑j
.text:00409E90                 mov     dword ptr [esp], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00409E97                 call    getenv
.text:00409E9C                 xor     ecx, ecx
.text:00409E9E                 mov     edx, 200h
.text:00409EA3                 test    eax, eax
.text:00409EA5                 jnz     short loc_409EAE
.text:00409EA7                 mov     edx, 400h
.text:00409EAC                 xor     ecx, ecx
.text:00409EAE
.text:00409EAE loc_409EAE:                             ; CODE XREF: .text:00409EA5↑j
.text:00409EAE                 mov     [ebx+4], ecx
.text:00409EB1                 mov     ecx, 4
.text:00409EB6                 mov     [ebx], edx
.text:00409EB8                 jmp     loc_409DE5
.text:00409EB8 ; ---------------------------------------------------------------------------
.text:00409EBD                 align 10h
.text:00409EC0
.text:00409EC0 ; =============== S U B R O U T I N E =======================================
.text:00409EC0
.text:00409EC0
.text:00409EC0 ; int __cdecl sub_409EC0(void *, size_t, int, char *)
.text:00409EC0 sub_409EC0      proc near               ; CODE XREF: sub_409170+492↑p
.text:00409EC0
.text:00409EC0 Str             = dword ptr -6Ch
.text:00409EC0 Src             = dword ptr -68h
.text:00409EC0 Size            = dword ptr -64h
.text:00409EC0 var_50          = dword ptr -50h
.text:00409EC0 var_4C          = byte ptr -4Ch
.text:00409EC0 arg_0           = dword ptr  4
.text:00409EC0 arg_4           = dword ptr  8
.text:00409EC0 arg_8           = dword ptr  0Ch
.text:00409EC0 arg_C           = dword ptr  10h
.text:00409EC0
.text:00409EC0                 push    ebp
.text:00409EC1                 push    edi
.text:00409EC2                 mov     edi, 0FFFFFFFFh
.text:00409EC7                 push    esi
.text:00409EC8                 push    ebx
.text:00409EC9                 sub     esp, 5Ch
.text:00409ECC                 mov     edx, [esp+6Ch+arg_C]
.text:00409ED0                 mov     ebx, [esp+6Ch+arg_0]
.text:00409ED4                 mov     ebp, [esp+6Ch+arg_8]
.text:00409ED8                 mov     [esp+6Ch+Str], edx ; Str
.text:00409EDB                 call    strlen
.text:00409EE0                 mov     [esp+6Ch+var_50], eax
.text:00409EE4                 mov     esi, [esp+6Ch+arg_4]
.text:00409EE8                 lea     edx, [esp+6Ch+var_4C]
.text:00409EEC                 mov     [esp+6Ch+Src], ebx ; Src
.text:00409EF0                 mov     [esp+6Ch+Str], edx ; void *
.text:00409EF3                 add     ebx, esi
.text:00409EF5                 mov     [esp+6Ch+Size], esi ; Size
.text:00409EF9                 lea     esi, [esi+0]
.text:00409F00
.text:00409F00 loc_409F00:                             ; CODE XREF: sub_409EC0+94↓j
.text:00409F00                 call    memcpy
.text:00409F05                 movzx   eax, byte ptr [ebp+0]
.text:00409F09                 test    al, al
.text:00409F0B                 jz      short loc_409F17
.text:00409F0D                 cmp     al, 7Eh ; '~'
.text:00409F0F                 mov     edi, esi
.text:00409F11                 ja      short loc_409F16
.text:00409F13                 movzx   edi, al
.text:00409F16
.text:00409F16 loc_409F16:                             ; CODE XREF: sub_409EC0+51↑j
.text:00409F16                 inc     ebp
.text:00409F17
.text:00409F17 loc_409F17:                             ; CODE XREF: sub_409EC0+4B↑j
.text:00409F17                 cmp     esi, edi
.text:00409F19                 jnb     short loc_409F1D
.text:00409F1B                 mov     edi, esi
.text:00409F1D
.text:00409F1D loc_409F1D:                             ; CODE XREF: sub_409EC0+59↑j
.text:00409F1D                 mov     [esp+6Ch+Size], edi ; Size
.text:00409F21                 sub     esi, edi
.text:00409F23                 lea     ecx, [esp+6Ch+var_4C]
.text:00409F27                 add     ecx, esi
.text:00409F29                 sub     ebx, edi
.text:00409F2B                 mov     [esp+6Ch+Src], ecx ; Src
.text:00409F2F                 mov     [esp+6Ch+Str], ebx ; void *
.text:00409F32                 call    memcpy
.text:00409F37                 test    esi, esi
.text:00409F39                 jz      short loc_409F56
.text:00409F3B                 mov     edx, [esp+6Ch+var_50]
.text:00409F3F                 mov     ecx, [esp+6Ch+var_50]
.text:00409F43                 sub     ebx, edx
.text:00409F45                 mov     [esp+6Ch+Size], ecx
.text:00409F49                 mov     edx, [esp+6Ch+arg_C]
.text:00409F4D                 mov     [esp+6Ch+Str], ebx
.text:00409F50                 mov     [esp+6Ch+Src], edx
.text:00409F54                 jmp     short loc_409F00
.text:00409F56 ; ---------------------------------------------------------------------------
.text:00409F56
.text:00409F56 loc_409F56:                             ; CODE XREF: sub_409EC0+79↑j
.text:00409F56                 add     esp, 5Ch
.text:00409F59                 mov     eax, ebx
.text:00409F5B                 pop     ebx
.text:00409F5C                 pop     esi
.text:00409F5D                 pop     edi
.text:00409F5E                 pop     ebp
.text:00409F5F                 retn
.text:00409F5F sub_409EC0      endp
.text:00409F5F
.text:00409F5F ; ---------------------------------------------------------------------------
.text:00409F60 ; const char aEeggkkmmppttyy[]
.text:00409F60 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.text:00409F60                                         ; DATA XREF: sub_409F90:loc_40A010↓o
.text:00409F72 ; const char aBlockSize_0[]
.text:00409F72 aBlockSize_0    db 'BLOCK_SIZE',0       ; DATA XREF: sub_409F90:loc_40A07E↓o
.text:00409F7D ; const char aBlocksize[]
.text:00409F7D aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: sub_409F90+104↓o
.text:00409F87                 align 10h
.text:00409F90
.text:00409F90 ; =============== S U B R O U T I N E =======================================
.text:00409F90
.text:00409F90
.text:00409F90 ; int __cdecl sub_409F90(char *, int, int)
.text:00409F90 sub_409F90      proc near               ; CODE XREF: .text:00409DCF↑p
.text:00409F90
.text:00409F90 VarName         = dword ptr -2Ch
.text:00409F90 var_28          = dword ptr -28h
.text:00409F90 var_24          = dword ptr -24h
.text:00409F90 var_20          = dword ptr -20h
.text:00409F90 Str             = dword ptr -1Ch
.text:00409F90 var_10          = dword ptr -10h
.text:00409F90 var_C           = dword ptr -0Ch
.text:00409F90 var_8           = dword ptr -8
.text:00409F90 var_4           = dword ptr -4
.text:00409F90 arg_0           = dword ptr  4
.text:00409F90 arg_4           = dword ptr  8
.text:00409F90 arg_8           = dword ptr  0Ch
.text:00409F90
.text:00409F90                 sub     esp, 2Ch
.text:00409F93                 mov     [esp+2Ch+var_C], ebx
.text:00409F97                 mov     ebx, [esp+2Ch+arg_0]
.text:00409F9B                 mov     [esp+2Ch+var_8], esi
.text:00409F9F                 xor     esi, esi
.text:00409FA1                 test    ebx, ebx
.text:00409FA3                 mov     [esp+2Ch+var_4], edi
.text:00409FA7                 mov     edi, [esp+2Ch+arg_4]
.text:00409FAB                 jz      loc_40A07E
.text:00409FB1
.text:00409FB1 loc_409FB1:                             ; CODE XREF: sub_409F90+FE↓j
.text:00409FB1                                         ; sub_409F90+114↓j
.text:00409FB1                 cmp     byte ptr [ebx], 27h ; '''
.text:00409FB4                 jz      loc_40A073
.text:00409FBA
.text:00409FBA loc_409FBA:                             ; CODE XREF: sub_409F90+E9↓j
.text:00409FBA                 mov     [esp+2Ch+var_20], 4 ; int
.text:00409FC2                 mov     [esp+2Ch+var_24], offset unk_409D14 ; int
.text:00409FCA                 mov     [esp+2Ch+var_28], offset off_409D08 ; int
.text:00409FD2                 mov     [esp+2Ch+VarName], ebx ; char *
.text:00409FD5                 call    sub_40A1C0
.text:00409FDA                 test    eax, eax
.text:00409FDC                 js      short loc_40A010
.text:00409FDE                 mov     dword ptr [edi], 1
.text:00409FE4                 mov     ecx, dword ptr ds:unk_409D14[eax*4]
.text:00409FEB                 mov     dword ptr [edi+4], 0
.text:00409FF2                 or      esi, ecx
.text:00409FF4
.text:00409FF4 loc_409FF4:                             ; CODE XREF: sub_409F90+B9↓j
.text:00409FF4                                         ; sub_409F90+D3↓j ...
.text:00409FF4                 mov     ebx, [esp+2Ch+arg_8]
.text:00409FF8                 xor     eax, eax
.text:00409FFA                 mov     [ebx], esi
.text:00409FFC
.text:00409FFC loc_409FFC:                             ; CODE XREF: sub_409F90+A6↓j
.text:00409FFC                 mov     ebx, [esp+2Ch+var_C]
.text:0040A000                 mov     esi, [esp+2Ch+var_8]
.text:0040A004                 mov     edi, [esp+2Ch+var_4]
.text:0040A008                 add     esp, 2Ch
.text:0040A00B                 retn
.text:0040A00B ; ---------------------------------------------------------------------------
.text:0040A00C                 align 10h
.text:0040A010
.text:0040A010 loc_40A010:                             ; CODE XREF: sub_409F90+4C↑j
.text:0040A010                 mov     [esp+2Ch+Str], offset aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:0040A018                 lea     edx, [esp+2Ch+var_10]
.text:0040A01C                 mov     [esp+2Ch+var_20], edi ; int
.text:0040A020                 mov     [esp+2Ch+var_24], 0 ; int
.text:0040A028                 mov     [esp+2Ch+var_28], edx ; int
.text:0040A02C                 mov     [esp+2Ch+VarName], ebx ; int
.text:0040A02F                 call    sub_407D90
.text:0040A034                 test    eax, eax
.text:0040A036                 jnz     short loc_409FFC
.text:0040A038                 nop
.text:0040A039                 lea     esi, [esi+0]
.text:0040A040
.text:0040A040 loc_40A040:                             ; CODE XREF: sub_409F90+C2↓j
.text:0040A040                 movzx   ecx, byte ptr [ebx]
.text:0040A043                 sub     cl, 30h ; '0'
.text:0040A046                 cmp     cl, 9
.text:0040A049                 jbe     short loc_409FF4
.text:0040A04B                 cmp     ebx, [esp+2Ch+var_10]
.text:0040A04F                 jz      short loc_40A054
.text:0040A051                 inc     ebx
.text:0040A052                 jmp     short loc_40A040
.text:0040A054 ; ---------------------------------------------------------------------------
.text:0040A054
.text:0040A054 loc_40A054:                             ; CODE XREF: sub_409F90+BF↑j
.text:0040A054                 or      esi, 80h
.text:0040A05A                 cmp     byte ptr [ebx-1], 42h ; 'B'
.text:0040A05E                 jz      short loc_40A065
.text:0040A060
.text:0040A060 loc_40A060:                             ; CODE XREF: sub_409F90+E1↓j
.text:0040A060                 or      esi, 20h
.text:0040A063                 jmp     short loc_409FF4
.text:0040A065 ; ---------------------------------------------------------------------------
.text:0040A065
.text:0040A065 loc_40A065:                             ; CODE XREF: sub_409F90+CE↑j
.text:0040A065                 or      esi, 100h
.text:0040A06B                 cmp     byte ptr [ebx-2], 69h ; 'i'
.text:0040A06F                 jnz     short loc_409FF4
.text:0040A071                 jmp     short loc_40A060
.text:0040A073 ; ---------------------------------------------------------------------------
.text:0040A073
.text:0040A073 loc_40A073:                             ; CODE XREF: sub_409F90+24↑j
.text:0040A073                 mov     esi, 4
.text:0040A078                 inc     ebx
.text:0040A079                 jmp     loc_409FBA
.text:0040A07E ; ---------------------------------------------------------------------------
.text:0040A07E
.text:0040A07E loc_40A07E:                             ; CODE XREF: sub_409F90+1B↑j
.text:0040A07E                 mov     [esp+2Ch+VarName], offset aBlockSize_0 ; "BLOCK_SIZE"
.text:0040A085                 call    getenv
.text:0040A08A                 test    eax, eax
.text:0040A08C                 mov     ebx, eax
.text:0040A08E                 jnz     loc_409FB1
.text:0040A094                 mov     [esp+2Ch+VarName], offset aBlocksize ; "BLOCKSIZE"
.text:0040A09B                 call    getenv
.text:0040A0A0                 test    eax, eax
.text:0040A0A2                 mov     ebx, eax
.text:0040A0A4                 jnz     loc_409FB1
.text:0040A0AA                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:0040A0B1                 call    getenv
.text:0040A0B6                 xor     ecx, ecx
.text:0040A0B8                 mov     edx, 200h
.text:0040A0BD                 test    eax, eax
.text:0040A0BF                 jnz     short loc_40A0C8
.text:0040A0C1                 mov     edx, 400h
.text:0040A0C6                 xor     ecx, ecx
.text:0040A0C8
.text:0040A0C8 loc_40A0C8:                             ; CODE XREF: sub_409F90+12F↑j
.text:0040A0C8                 mov     [edi], edx
.text:0040A0CA                 mov     [edi+4], ecx
.text:0040A0CD                 jmp     loc_409FF4
.text:0040A0CD sub_409F90      endp
.text:0040A0CD
.text:0040A0CD ; ---------------------------------------------------------------------------
.text:0040A0D2                 db 1Eh dup(90h)
.text:0040A0F0
.text:0040A0F0 ; =============== S U B R O U T I N E =======================================
.text:0040A0F0
.text:0040A0F0
.text:0040A0F0 sub_40A0F0      proc near               ; CODE XREF: sub_403D80+758↑p
.text:0040A0F0
.text:0040A0F0 var_1C          = dword ptr -1Ch
.text:0040A0F0 var_18          = dword ptr -18h
.text:0040A0F0 var_14          = dword ptr -14h
.text:0040A0F0 var_10          = dword ptr -10h
.text:0040A0F0 arg_0           = dword ptr  4
.text:0040A0F0 arg_4           = dword ptr  8
.text:0040A0F0 arg_8           = dword ptr  0Ch
.text:0040A0F0
.text:0040A0F0                 push    edi
.text:0040A0F1                 push    esi
.text:0040A0F2                 push    ebx
.text:0040A0F3                 sub     esp, 10h
.text:0040A0F6                 mov     edx, [esp+1Ch+arg_8]
.text:0040A0FA                 mov     ebx, [esp+1Ch+arg_0]
.text:0040A0FE                 mov     esi, [esp+1Ch+arg_4]
.text:0040A102                 lea     edi, [edx+15h]
.text:0040A105                 mov     byte ptr [edx+15h], 0
.text:0040A109                 lea     esi, [esi+0]
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: sub_40A0F0+63↓j
.text:0040A110                 mov     [esp+1Ch+var_1C], ebx
.text:0040A113                 dec     edi
.text:0040A114                 mov     [esp+1Ch+var_18], esi
.text:0040A118                 mov     [esp+1Ch+var_14], 0Ah
.text:0040A120                 mov     [esp+1Ch+var_10], 0
.text:0040A128                 call    sub_412AE0
.text:0040A12D                 add     al, 30h ; '0'
.text:0040A12F                 mov     [edi], al
.text:0040A131                 mov     [esp+1Ch+var_1C], ebx
.text:0040A134                 mov     [esp+1Ch+var_18], esi
.text:0040A138                 mov     [esp+1Ch+var_14], 0Ah
.text:0040A140                 mov     [esp+1Ch+var_10], 0
.text:0040A148                 call    sub_412670
.text:0040A14D                 mov     ebx, eax
.text:0040A14F                 mov     esi, edx
.text:0040A151                 or      edx, ebx
.text:0040A153                 jnz     short loc_40A110
.text:0040A155                 add     esp, 10h
.text:0040A158                 mov     eax, edi
.text:0040A15A                 pop     ebx
.text:0040A15B                 pop     esi
.text:0040A15C                 pop     edi
.text:0040A15D                 retn
.text:0040A15D sub_40A0F0      endp
.text:0040A15D
.text:0040A15D ; ---------------------------------------------------------------------------
.text:0040A15E                 align 10h
.text:0040A160 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40A180+3↓o
.text:0040A171 ; const char aS[]
.text:0040A171 aS              db '%s',0               ; DATA XREF: sub_40A180+10↓o
.text:0040A174                 align 10h
.text:0040A180
.text:0040A180 ; =============== S U B R O U T I N E =======================================
.text:0040A180
.text:0040A180 ; Attributes: noreturn
.text:0040A180
.text:0040A180 sub_40A180      proc near               ; CODE XREF: sub_406630:loc_4067EF↑p
.text:0040A180                                         ; sub_408E60:loc_408E99↑p ...
.text:0040A180
.text:0040A180 Code            = dword ptr -1Ch
.text:0040A180 ErrorMessage    = dword ptr -18h
.text:0040A180 var_14          = dword ptr -14h
.text:0040A180 var_10          = byte ptr -10h
.text:0040A180
.text:0040A180                 sub     esp, 1Ch
.text:0040A183                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040A18A                 call    ds:libintl_gettext
.text:0040A190                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:0040A198                 mov     edx, Code
.text:0040A19E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040A1A6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040A1AA                 mov     [esp+1Ch+Code], edx ; Code
.text:0040A1AD                 call    sub_40A820
.text:0040A1B2                 call    abort
.text:0040A1B2 sub_40A180      endp
.text:0040A1B2
.text:0040A1B2 ; ---------------------------------------------------------------------------
.text:0040A1B7                 align 10h
.text:0040A1C0
.text:0040A1C0 ; =============== S U B R O U T I N E =======================================
.text:0040A1C0
.text:0040A1C0
.text:0040A1C0 ; int __cdecl sub_40A1C0(char *, int, int, int)
.text:0040A1C0 sub_40A1C0      proc near               ; CODE XREF: sub_409F90+45↑p
.text:0040A1C0                                         ; .text:0040A512↓p
.text:0040A1C0
.text:0040A1C0 Str             = dword ptr -2Ch
.text:0040A1C0 Str2            = dword ptr -28h
.text:0040A1C0 MaxCount        = dword ptr -24h
.text:0040A1C0 var_20          = dword ptr -20h
.text:0040A1C0 var_19          = byte ptr -19h
.text:0040A1C0 var_18          = dword ptr -18h
.text:0040A1C0 var_14          = dword ptr -14h
.text:0040A1C0 arg_0           = dword ptr  4
.text:0040A1C0 arg_4           = dword ptr  8
.text:0040A1C0 arg_8           = dword ptr  0Ch
.text:0040A1C0 arg_C           = dword ptr  10h
.text:0040A1C0
.text:0040A1C0                 push    ebp
.text:0040A1C1                 push    edi
.text:0040A1C2                 push    esi
.text:0040A1C3                 push    ebx
.text:0040A1C4                 sub     esp, 1Ch
.text:0040A1C7                 xor     ebx, ebx
.text:0040A1C9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040A1D1                 mov     edx, [esp+2Ch+arg_0]
.text:0040A1D5                 mov     ebp, [esp+2Ch+arg_C]
.text:0040A1D9                 mov     [esp+2Ch+var_19], 0
.text:0040A1DE                 mov     [esp+2Ch+Str], edx ; Str
.text:0040A1E1                 call    strlen
.text:0040A1E6                 mov     [esp+2Ch+var_14], eax
.text:0040A1EA                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A1EE                 mov     eax, [ecx]
.text:0040A1F0                 test    eax, eax
.text:0040A1F2                 jz      short loc_40A238
.text:0040A1F4                 mov     [esp+2Ch+var_20], 0
.text:0040A1FC                 lea     esi, [esi+0]
.text:0040A200
.text:0040A200 loc_40A200:                             ; CODE XREF: sub_40A1C0+6A↓j
.text:0040A200                 mov     [esp+2Ch+Str], eax ; Str1
.text:0040A203                 mov     esi, [esp+2Ch+var_14]
.text:0040A207                 mov     ecx, [esp+2Ch+arg_0]
.text:0040A20B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040A20F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:0040A213                 call    strncmp
.text:0040A218                 test    eax, eax
.text:0040A21A                 jz      short loc_40A246
.text:0040A21C
.text:0040A21C loc_40A21C:                             ; CODE XREF: sub_40A1C0+CA↓j
.text:0040A21C                                         ; sub_40A1C0+D1↓j ...
.text:0040A21C                 add     [esp+2Ch+var_20], ebp
.text:0040A220                 inc     ebx
.text:0040A221                 mov     esi, [esp+2Ch+arg_4]
.text:0040A225                 mov     eax, [esi+ebx*4]
.text:0040A228                 test    eax, eax
.text:0040A22A                 jnz     short loc_40A200
.text:0040A22C                 cmp     [esp+2Ch+var_19], 0
.text:0040A231                 mov     edx, 0FFFFFFFEh
.text:0040A236                 jnz     short loc_40A23C
.text:0040A238
.text:0040A238 loc_40A238:                             ; CODE XREF: sub_40A1C0+32↑j
.text:0040A238                 mov     edx, [esp+2Ch+var_18]
.text:0040A23C
.text:0040A23C loc_40A23C:                             ; CODE XREF: sub_40A1C0+76↑j
.text:0040A23C                                         ; sub_40A1C0+9B↓j
.text:0040A23C                 add     esp, 1Ch
.text:0040A23F                 mov     eax, edx
.text:0040A241                 pop     ebx
.text:0040A242                 pop     esi
.text:0040A243                 pop     edi
.text:0040A244                 pop     ebp
.text:0040A245                 retn
.text:0040A246 ; ---------------------------------------------------------------------------
.text:0040A246
.text:0040A246 loc_40A246:                             ; CODE XREF: sub_40A1C0+5A↑j
.text:0040A246                 mov     eax, [esp+2Ch+arg_4]
.text:0040A24A                 mov     edi, [eax+ebx*4]
.text:0040A24D                 mov     [esp+2Ch+Str], edi ; Str
.text:0040A250                 call    strlen
.text:0040A255                 cmp     eax, [esp+2Ch+var_14]
.text:0040A259                 mov     edx, ebx
.text:0040A25B                 jz      short loc_40A23C
.text:0040A25D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:0040A262                 jz      short loc_40A293
.text:0040A264                 mov     ecx, [esp+2Ch+arg_8]
.text:0040A268                 test    ecx, ecx
.text:0040A26A                 jz      short loc_40A28C
.text:0040A26C                 cld
.text:0040A26D                 mov     edi, [esp+2Ch+var_18]
.text:0040A271                 mov     ecx, ebp
.text:0040A273                 mov     esi, [esp+2Ch+arg_8]
.text:0040A277                 mov     edx, [esp+2Ch+var_20]
.text:0040A27B                 imul    edi, ebp
.text:0040A27E                 add     esi, edi
.text:0040A280                 mov     edi, [esp+2Ch+arg_8]
.text:0040A284                 add     edi, edx
.text:0040A286                 cmp     ebp, ebp
.text:0040A288                 repe cmpsb
.text:0040A28A                 jz      short loc_40A21C
.text:0040A28C
.text:0040A28C loc_40A28C:                             ; CODE XREF: sub_40A1C0+AA↑j
.text:0040A28C                 mov     [esp+2Ch+var_19], 1
.text:0040A291                 jmp     short loc_40A21C
.text:0040A293 ; ---------------------------------------------------------------------------
.text:0040A293
.text:0040A293 loc_40A293:                             ; CODE XREF: sub_40A1C0+A2↑j
.text:0040A293                 mov     [esp+2Ch+var_18], ebx
.text:0040A297                 jmp     short loc_40A21C
.text:0040A297 sub_40A1C0      endp
.text:0040A297
.text:0040A297 ; ---------------------------------------------------------------------------
.text:0040A299 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:0040A299                                         ; DATA XREF: .text:0040A2F2↓o
.text:0040A299                                         ; .text:0040A53A↓o
.text:0040A2B6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:0040A2B6                                         ; DATA XREF: .text:loc_40A360↓o
.text:0040A2B6                                         ; .text:loc_40A6D6↓o
.text:0040A2D1 ; ---------------------------------------------------------------------------
.text:0040A2D1                 jmp     short loc_40A2E0
.text:0040A2D1 ; ---------------------------------------------------------------------------
.text:0040A2D3                 align 10h
.text:0040A2E0
.text:0040A2E0 loc_40A2E0:                             ; CODE XREF: .text:0040A2D1↑j
.text:0040A2E0                 sub     esp, 1Ch
.text:0040A2E3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:0040A2E8                 mov     [esp+14h], ebx
.text:0040A2EC                 mov     [esp+18h], esi
.text:0040A2F0                 jz      short loc_40A360
.text:0040A2F2                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040A2F9
.text:0040A2F9 loc_40A2F9:                             ; CODE XREF: .text:0040A367↓j
.text:0040A2F9                 call    ds:libintl_gettext
.text:0040A2FF                 mov     dword ptr [esp], 1
.text:0040A306                 mov     edx, [esp+20h]
.text:0040A30A                 mov     esi, eax
.text:0040A30C                 mov     [esp+4], edx
.text:0040A310                 call    sub_40A770
.text:0040A315                 mov     dword ptr [esp+4], 5
.text:0040A31D                 mov     edx, [esp+24h]
.text:0040A321                 mov     ebx, eax
.text:0040A323                 mov     dword ptr [esp], 0
.text:0040A32A                 mov     [esp+8], edx
.text:0040A32E                 call    sub_406220
.text:0040A333                 mov     [esp+0Ch], eax
.text:0040A337                 mov     [esp+10h], ebx
.text:0040A33B                 mov     [esp+8], esi
.text:0040A33F                 mov     dword ptr [esp+4], 0
.text:0040A347                 mov     dword ptr [esp], 0
.text:0040A34E                 call    sub_40A820
.text:0040A353                 mov     ebx, [esp+14h]
.text:0040A357                 mov     esi, [esp+18h]
.text:0040A35B                 add     esp, 1Ch
.text:0040A35E                 retn
.text:0040A35E ; ---------------------------------------------------------------------------
.text:0040A35F                 align 10h
.text:0040A360
.text:0040A360 loc_40A360:                             ; CODE XREF: .text:0040A2F0↑j
.text:0040A360                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040A367                 jmp     short loc_40A2F9
.text:0040A367 ; ---------------------------------------------------------------------------
.text:0040A369 aValidArguments db 'Valid arguments are:',0
.text:0040A369                                         ; DATA XREF: .text:0040A3B3↓o
.text:0040A369                                         ; .text:0040A5AB↓o
.text:0040A37E ; ---------------------------------------------------------------------------
.text:0040A37E
.text:0040A37E loc_40A37E:                             ; DATA XREF: .text:0040A42D↓o
.text:0040A37E                                         ; .text:loc_40A618↓o
.text:0040A37E                 or      ah, [eax]
.text:0040A380                 and     ds:73256020h, ch
.text:0040A386                 daa
.text:0040A387                 add     [eax], ch
.text:0040A38A                 pusha
.text:0040A38B                 and     eax, 90002773h
.text:0040A390                 push    ebp
.text:0040A391                 push    edi
.text:0040A392                 push    esi
.text:0040A393                 push    ebx
.text:0040A394                 sub     esp, 2Ch
.text:0040A397                 mov     ecx, [esp+40h]
.text:0040A39B                 mov     dword ptr [esp+1Ch], 0
.text:0040A3A3                 mov     eax, [esp+44h]
.text:0040A3A7                 mov     ebp, [esp+48h]
.text:0040A3AB                 mov     [esp+28h], ecx
.text:0040A3AF                 mov     [esp+24h], eax
.text:0040A3B3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040A3BA                 call    ds:libintl_gettext
.text:0040A3C0                 mov     edx, ds:_iob
.text:0040A3C6                 add     edx, 40h ; '@'
.text:0040A3C9                 mov     [esp], edx
.text:0040A3CC                 mov     [esp+4], eax
.text:0040A3D0                 call    fprintf
.text:0040A3D5                 mov     dword ptr [esp+20h], 0
.text:0040A3DD                 mov     edx, [esp+28h]
.text:0040A3E1                 mov     eax, [edx]
.text:0040A3E3                 test    eax, eax
.text:0040A3E5                 jz      short loc_40A465
.text:0040A3E7                 mov     dword ptr [esp+14h], 0
.text:0040A3EF                 mov     esi, [esp+24h]
.text:0040A3F3                 mov     ebx, eax
.text:0040A3F5                 mov     [esp+18h], esi
.text:0040A3F9                 lea     esi, [esi+0]
.text:0040A400
.text:0040A400 loc_40A400:                             ; CODE XREF: .text:0040A463↓j
.text:0040A400                 mov     edi, [esp+20h]
.text:0040A404                 test    edi, edi
.text:0040A406                 jz      short loc_40A423
.text:0040A408                 cld
.text:0040A409                 mov     edi, [esp+24h]
.text:0040A40D                 mov     ecx, ebp
.text:0040A40F                 mov     edx, [esp+14h]
.text:0040A413                 mov     esi, [esp+1Ch]
.text:0040A417                 add     edi, edx
.text:0040A419                 cmp     ebp, ebp
.text:0040A41B                 repe cmpsb
.text:0040A41D                 jz      loc_40A4B0
.text:0040A423
.text:0040A423 loc_40A423:                             ; CODE XREF: .text:0040A406↑j
.text:0040A423                 mov     [esp+8], ebx
.text:0040A427                 mov     ecx, ds:_iob
.text:0040A42D                 mov     dword ptr [esp+4], offset loc_40A37E
.text:0040A435                 add     ecx, 40h ; '@'
.text:0040A438                 mov     [esp], ecx
.text:0040A43B                 call    fprintf
.text:0040A440                 mov     ebx, [esp+18h]
.text:0040A444                 mov     [esp+1Ch], ebx
.text:0040A448
.text:0040A448 loc_40A448:                             ; CODE XREF: .text:0040A4CD↓j
.text:0040A448                 inc     dword ptr [esp+20h]
.text:0040A44C                 mov     eax, [esp+28h]
.text:0040A450                 add     [esp+14h], ebp
.text:0040A454                 mov     edx, [esp+20h]
.text:0040A458                 add     [esp+18h], ebp
.text:0040A45C                 mov     edi, [eax+edx*4]
.text:0040A45F                 test    edi, edi
.text:0040A461                 mov     ebx, edi
.text:0040A463                 jnz     short loc_40A400
.text:0040A465
.text:0040A465 loc_40A465:                             ; CODE XREF: .text:0040A3E5↑j
.text:0040A465                 mov     ebx, ds:_iob
.text:0040A46B                 mov     ebp, [ebx+44h]
.text:0040A46E                 dec     ebp
.text:0040A46F                 mov     [ebx+44h], ebp
.text:0040A472                 test    ebp, ebp
.text:0040A474                 js      short loc_40A48D
.text:0040A476                 mov     ecx, ds:_iob
.text:0040A47C                 mov     esi, [ecx+40h]
.text:0040A47F                 mov     byte ptr [esi], 0Ah
.text:0040A482                 inc     dword ptr [ecx+40h]
.text:0040A485                 add     esp, 2Ch
.text:0040A488                 pop     ebx
.text:0040A489                 pop     esi
.text:0040A48A                 pop     edi
.text:0040A48B                 pop     ebp
.text:0040A48C                 retn
.text:0040A48D ; ---------------------------------------------------------------------------
.text:0040A48D
.text:0040A48D loc_40A48D:                             ; CODE XREF: .text:0040A474↑j
.text:0040A48D                 mov     dword ptr [esp+40h], 0Ah
.text:0040A495                 mov     edi, ds:_iob
.text:0040A49B                 add     edi, 40h ; '@'
.text:0040A49E                 mov     [esp+44h], edi
.text:0040A4A2                 add     esp, 2Ch
.text:0040A4A5                 pop     ebx
.text:0040A4A6                 pop     esi
.text:0040A4A7                 pop     edi
.text:0040A4A8                 pop     ebp
.text:0040A4A9                 jmp     _flsbuf
.text:0040A4A9 ; ---------------------------------------------------------------------------
.text:0040A4AE                 align 10h
.text:0040A4B0
.text:0040A4B0 loc_40A4B0:                             ; CODE XREF: .text:0040A41D↑j
.text:0040A4B0                 mov     [esp+8], ebx
.text:0040A4B4                 mov     esi, ds:_iob
.text:0040A4BA                 mov     dword ptr [esp+4], 40A388h
.text:0040A4C2                 add     esi, 40h ; '@'
.text:0040A4C5                 mov     [esp], esi
.text:0040A4C8                 call    fprintf
.text:0040A4CD                 jmp     loc_40A448
.text:0040A4CD ; ---------------------------------------------------------------------------
.text:0040A4D2                 align 10h
.text:0040A4E0                 sub     esp, 4Ch
.text:0040A4E3                 mov     edx, [esp+60h]
.text:0040A4E7                 mov     [esp+3Ch], ebx
.text:0040A4EB                 mov     ebx, [esp+5Ch]
.text:0040A4EF                 mov     [esp+40h], esi
.text:0040A4F3                 mov     esi, [esp+54h]
.text:0040A4F7                 mov     [esp+48h], ebp
.text:0040A4FB                 mov     ebp, [esp+58h]
.text:0040A4FF                 mov     [esp+0Ch], edx
.text:0040A503                 mov     [esp+44h], edi
.text:0040A507                 mov     [esp+8], ebx
.text:0040A50B                 mov     [esp+4], ebp
.text:0040A50F                 mov     [esp], esi
.text:0040A512                 call    sub_40A1C0
.text:0040A517                 test    eax, eax
.text:0040A519                 mov     edx, eax
.text:0040A51B                 js      short loc_40A533
.text:0040A51D
.text:0040A51D loc_40A51D:                             ; CODE XREF: .text:0040A68A↓j
.text:0040A51D                 mov     ebx, [esp+3Ch]
.text:0040A521                 mov     eax, edx
.text:0040A523                 mov     esi, [esp+40h]
.text:0040A527                 mov     edi, [esp+44h]
.text:0040A52B                 mov     ebp, [esp+48h]
.text:0040A52F                 add     esp, 4Ch
.text:0040A532                 retn
.text:0040A533 ; ---------------------------------------------------------------------------
.text:0040A533
.text:0040A533 loc_40A533:                             ; CODE XREF: .text:0040A51B↑j
.text:0040A533                 inc     eax
.text:0040A534                 jz      loc_40A6D6
.text:0040A53A                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0040A541
.text:0040A541 loc_40A541:                             ; CODE XREF: .text:0040A6DD↓j
.text:0040A541                 call    ds:libintl_gettext
.text:0040A547                 mov     dword ptr [esp], 1
.text:0040A54E                 mov     edi, [esp+50h]
.text:0040A552                 mov     [esp+38h], eax
.text:0040A556                 mov     [esp+4], edi
.text:0040A55A                 call    sub_40A770
.text:0040A55F                 mov     [esp+34h], eax
.text:0040A563                 mov     [esp+8], esi
.text:0040A567                 mov     dword ptr [esp+4], 5
.text:0040A56F                 mov     dword ptr [esp], 0
.text:0040A576                 call    sub_406220
.text:0040A57B                 mov     [esp+0Ch], eax
.text:0040A57F                 mov     ecx, [esp+34h]
.text:0040A583                 mov     eax, [esp+38h]
.text:0040A587                 mov     dword ptr [esp+4], 0
.text:0040A58F                 mov     [esp+10h], ecx
.text:0040A593                 mov     [esp+8], eax
.text:0040A597                 mov     dword ptr [esp], 0
.text:0040A59E                 call    sub_40A820
.text:0040A5A3                 mov     dword ptr [esp+2Ch], 0
.text:0040A5AB                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0040A5B2                 call    ds:libintl_gettext
.text:0040A5B8                 mov     edx, ds:_iob
.text:0040A5BE                 add     edx, 40h ; '@'
.text:0040A5C1                 mov     [esp+4], eax
.text:0040A5C5                 mov     [esp], edx
.text:0040A5C8                 call    fprintf
.text:0040A5CD                 mov     dword ptr [esp+30h], 0
.text:0040A5D5                 mov     eax, [ebp+0]
.text:0040A5D8                 test    eax, eax
.text:0040A5DA                 jz      loc_40A661
.text:0040A5E0                 mov     [esp+28h], eax
.text:0040A5E4                 mov     [esp+24h], ebx
.text:0040A5E8                 mov     dword ptr [esp+20h], 0
.text:0040A5F0
.text:0040A5F0 loc_40A5F0:                             ; CODE XREF: .text:0040A65F↓j
.text:0040A5F0                 mov     esi, [esp+30h]
.text:0040A5F4                 test    esi, esi
.text:0040A5F6                 jz      short loc_40A618
.text:0040A5F8                 cld
.text:0040A5F9                 mov     eax, [esp+20h]
.text:0040A5FD                 mov     edx, [esp+60h]
.text:0040A601                 mov     esi, [esp+2Ch]
.text:0040A605                 lea     ecx, [eax+ebx]
.text:0040A608                 mov     edi, ecx
.text:0040A60A                 mov     ecx, [esp+60h]
.text:0040A60E                 cmp     edx, edx
.text:0040A610                 repe cmpsb
.text:0040A612                 jz      loc_40A6B0
.text:0040A618
.text:0040A618 loc_40A618:                             ; CODE XREF: .text:0040A5F6↑j
.text:0040A618                 mov     dword ptr [esp+4], offset loc_40A37E
.text:0040A620                 mov     esi, ds:_iob
.text:0040A626                 mov     ecx, [esp+28h]
.text:0040A62A                 add     esi, 40h ; '@'
.text:0040A62D                 mov     [esp+8], ecx
.text:0040A631                 mov     [esp], esi
.text:0040A634                 call    fprintf
.text:0040A639                 mov     edi, [esp+24h]
.text:0040A63D                 mov     [esp+2Ch], edi
.text:0040A641
.text:0040A641 loc_40A641:                             ; CODE XREF: .text:0040A6D1↓j
.text:0040A641                 inc     dword ptr [esp+30h]
.text:0040A645                 mov     ecx, [esp+60h]
.text:0040A649                 add     [esp+20h], ecx
.text:0040A64D                 mov     esi, [esp+30h]
.text:0040A651                 add     [esp+24h], ecx
.text:0040A655                 mov     edi, [ebp+esi*4+0]
.text:0040A659                 test    edi, edi
.text:0040A65B                 mov     [esp+28h], edi
.text:0040A65F                 jnz     short loc_40A5F0
.text:0040A661
.text:0040A661 loc_40A661:                             ; CODE XREF: .text:0040A5DA↑j
.text:0040A661                 mov     ebp, ds:_iob
.text:0040A667                 mov     ebx, [ebp+44h]
.text:0040A66A                 dec     ebx
.text:0040A66B                 mov     [ebp+44h], ebx
.text:0040A66E                 test    ebx, ebx
.text:0040A670                 js      short loc_40A68F
.text:0040A672                 mov     edi, ds:_iob
.text:0040A678                 mov     eax, [edi+40h]
.text:0040A67B                 mov     byte ptr [eax], 0Ah
.text:0040A67E                 inc     dword ptr [edi+40h]
.text:0040A681
.text:0040A681 loc_40A681:                             ; CODE XREF: .text:0040A6A8↓j
.text:0040A681                 call    dword ptr [esp+64h]
.text:0040A685                 mov     edx, 0FFFFFFFFh
.text:0040A68A                 jmp     loc_40A51D
.text:0040A68F ; ---------------------------------------------------------------------------
.text:0040A68F
.text:0040A68F loc_40A68F:                             ; CODE XREF: .text:0040A670↑j
.text:0040A68F                 mov     dword ptr [esp], 0Ah
.text:0040A696                 mov     edx, ds:_iob
.text:0040A69C                 add     edx, 40h ; '@'
.text:0040A69F                 mov     [esp+4], edx
.text:0040A6A3                 call    _flsbuf
.text:0040A6A8                 jmp     short loc_40A681
.text:0040A6A8 ; ---------------------------------------------------------------------------
.text:0040A6AA                 align 10h
.text:0040A6B0
.text:0040A6B0 loc_40A6B0:                             ; CODE XREF: .text:0040A612↑j
.text:0040A6B0                 mov     dword ptr [esp+4], 40A388h
.text:0040A6B8                 mov     edx, ds:_iob
.text:0040A6BE                 mov     eax, [esp+28h]
.text:0040A6C2                 add     edx, 40h ; '@'
.text:0040A6C5                 mov     [esp+8], eax
.text:0040A6C9                 mov     [esp], edx
.text:0040A6CC                 call    fprintf
.text:0040A6D1                 jmp     loc_40A641
.text:0040A6D6 ; ---------------------------------------------------------------------------
.text:0040A6D6
.text:0040A6D6 loc_40A6D6:                             ; CODE XREF: .text:0040A534↑j
.text:0040A6D6                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:0040A6DD                 jmp     loc_40A541
.text:0040A6DD ; ---------------------------------------------------------------------------
.text:0040A6E2                 align 10h
.text:0040A6F0                 push    ebp
.text:0040A6F1                 push    edi
.text:0040A6F2                 push    esi
.text:0040A6F3                 push    ebx
.text:0040A6F4                 sub     esp, 4
.text:0040A6F7                 mov     ecx, [esp+1Ch]
.text:0040A6FB                 mov     dword ptr [esp], 0
.text:0040A702                 mov     ebx, [esp+24h]
.text:0040A706                 mov     edx, [ecx]
.text:0040A708                 test    edx, edx
.text:0040A70A                 jz      short loc_40A735
.text:0040A70C                 cld
.text:0040A70D                 xor     ebp, ebp
.text:0040A70F                 nop
.text:0040A710
.text:0040A710 loc_40A710:                             ; CODE XREF: .text:0040A733↓j
.text:0040A710                 mov     edi, [esp+20h]
.text:0040A714                 mov     ecx, ebx
.text:0040A716                 mov     esi, [esp+18h]
.text:0040A71A                 add     edi, ebp
.text:0040A71C                 cmp     ebx, ebx
.text:0040A71E                 repe cmpsb
.text:0040A720                 jz      short loc_40A73D
.text:0040A722                 inc     dword ptr [esp]
.text:0040A725                 add     ebp, ebx
.text:0040A727                 mov     eax, [esp+1Ch]
.text:0040A72B                 mov     ecx, [esp]
.text:0040A72E                 mov     edi, [eax+ecx*4]
.text:0040A731                 test    edi, edi
.text:0040A733                 jnz     short loc_40A710
.text:0040A735
.text:0040A735 loc_40A735:                             ; CODE XREF: .text:0040A70A↑j
.text:0040A735                 xor     eax, eax
.text:0040A737
.text:0040A737 loc_40A737:                             ; CODE XREF: .text:0040A747↓j
.text:0040A737                 pop     ebp
.text:0040A738                 pop     ebx
.text:0040A739                 pop     esi
.text:0040A73A                 pop     edi
.text:0040A73B                 pop     ebp
.text:0040A73C                 retn
.text:0040A73D ; ---------------------------------------------------------------------------
.text:0040A73D
.text:0040A73D loc_40A73D:                             ; CODE XREF: .text:0040A720↑j
.text:0040A73D                 mov     esi, [esp]
.text:0040A740                 mov     ebx, [esp+1Ch]
.text:0040A744                 mov     eax, [ebx+esi*4]
.text:0040A747                 jmp     short loc_40A737
.text:0040A747 ; ---------------------------------------------------------------------------
.text:0040A749                 align 10h
.text:0040A750
.text:0040A750 ; =============== S U B R O U T I N E =======================================
.text:0040A750
.text:0040A750 ; Attributes: noreturn
.text:0040A750
.text:0040A750 sub_40A750      proc near               ; DATA XREF: .data:00414050↓o
.text:0040A750
.text:0040A750 Code            = dword ptr -0Ch
.text:0040A750
.text:0040A750                 sub     esp, 0Ch
.text:0040A753                 mov     [esp+0Ch+Code], 1 ; Code
.text:0040A75A                 call    sub_4024F0
.text:0040A75A sub_40A750      endp
.text:0040A75A
.text:0040A75A ; ---------------------------------------------------------------------------
.text:0040A75F                 db  83h ; ƒ
.text:0040A760                 db 0C4h ; Ä
.text:0040A761                 db  0Ch
.text:0040A762                 db 0C3h ; Ã
.text:0040A763                 align 10h
.text:0040A770
.text:0040A770 ; =============== S U B R O U T I N E =======================================
.text:0040A770
.text:0040A770
.text:0040A770 ; int __cdecl sub_40A770(int, char *)
.text:0040A770 sub_40A770      proc near               ; CODE XREF: .text:0040A310↑p
.text:0040A770                                         ; .text:0040A55A↑p
.text:0040A770
.text:0040A770 var_C           = dword ptr -0Ch
.text:0040A770 var_8           = dword ptr -8
.text:0040A770 var_4           = dword ptr -4
.text:0040A770 arg_0           = dword ptr  4
.text:0040A770 arg_4           = dword ptr  8
.text:0040A770
.text:0040A770                 sub     esp, 0Ch
.text:0040A773                 mov     edx, [esp+0Ch+arg_4]
.text:0040A777                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040A77F                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040A783                 mov     edx, [esp+0Ch+arg_0]
.text:0040A787                 mov     [esp+0Ch+var_C], edx ; int
.text:0040A78A                 call    sub_406220
.text:0040A78F                 add     esp, 0Ch
.text:0040A792                 retn
.text:0040A792 sub_40A770      endp
.text:0040A792
.text:0040A792 ; ---------------------------------------------------------------------------
.text:0040A793                 align 10h
.text:0040A7A0                 sub     esp, 0Ch
.text:0040A7A3                 mov     edx, [esp+10h]
.text:0040A7A7                 mov     dword ptr [esp+4], 5
.text:0040A7AF                 mov     dword ptr [esp], 0
.text:0040A7B6                 mov     [esp+8], edx
.text:0040A7BA                 call    sub_406220
.text:0040A7BF                 add     esp, 0Ch
.text:0040A7C2                 retn
.text:0040A7C2 ; ---------------------------------------------------------------------------
.text:0040A7C3                 align 10h
.text:0040A7D0                 jmp     ds:libintl_bindtextdomain
.text:0040A7D0 ; ---------------------------------------------------------------------------
.text:0040A7D6                 align 10h
.text:0040A7E0                 jmp     ds:libintl_textdomain
.text:0040A7E0 ; ---------------------------------------------------------------------------
.text:0040A7E6                 align 10h
.text:0040A7F0                 jmp     ds:libintl_gettext
.text:0040A7F0 ; ---------------------------------------------------------------------------
.text:0040A7F6                 align 10h
.text:0040A800 ; const char aS_0[]
.text:0040A800 aS_0            db ': %s',0             ; DATA XREF: sub_40A820+B8↓o
.text:0040A800                                         ; sub_40A924+122↓o
.text:0040A805 aUnknownSystemE db 'Unknown system error',0
.text:0040A805                                         ; DATA XREF: sub_40A820:loc_40A8ED↓o
.text:0040A805                                         ; sub_40A924:loc_40AA5E↓o
.text:0040A81A ; const char aS_1[]
.text:0040A81A aS_1            db '%s: ',0             ; DATA XREF: sub_40A820:loc_40A8F4↓o
.text:0040A81F                 align 10h
.text:0040A820
.text:0040A820 ; =============== S U B R O U T I N E =======================================
.text:0040A820
.text:0040A820
.text:0040A820 ; int __cdecl sub_40A820(int Code, int ErrorMessage, char *, char)
.text:0040A820 sub_40A820      proc near               ; CODE XREF: sub_401E80+1C4↑p
.text:0040A820                                         ; sub_401E80+4D5↑p ...
.text:0040A820
.text:0040A820 Stream          = dword ptr -1Ch
.text:0040A820 Format          = dword ptr -18h
.text:0040A820 ArgList         = dword ptr -14h
.text:0040A820 Code            = dword ptr  4
.text:0040A820 ErrorMessage    = dword ptr  8
.text:0040A820 arg_8           = dword ptr  0Ch
.text:0040A820 arg_C           = byte ptr  10h
.text:0040A820
.text:0040A820                 push    esi
.text:0040A821                 push    ebx
.text:0040A822                 sub     esp, 14h
.text:0040A825                 mov     edx, ds:_iob
.text:0040A82B                 mov     esi, [esp+1Ch+Code]
.text:0040A82F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040A833                 add     edx, 20h ; ' '
.text:0040A836                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A839                 call    fflush
.text:0040A83E                 mov     eax, ds:dword_415580
.text:0040A843                 test    eax, eax
.text:0040A845                 jz      loc_40A8F4
.text:0040A84B                 call    eax ; dword_415580
.text:0040A84D
.text:0040A84D loc_40A84D:                             ; CODE XREF: sub_40A820+F7↓j
.text:0040A84D                 lea     edx, [esp+1Ch+arg_C]
.text:0040A851                 mov     ecx, [esp+1Ch+arg_8]
.text:0040A855                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040A859                 mov     edx, ds:_iob
.text:0040A85F                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040A863                 add     edx, 40h ; '@'
.text:0040A866                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A869                 call    vfprintf
.text:0040A86E                 inc     ds:dword_415590
.text:0040A874                 test    ebx, ebx
.text:0040A876                 jnz     short loc_40A8C2
.text:0040A878
.text:0040A878 loc_40A878:                             ; CODE XREF: sub_40A820+CB↓j
.text:0040A878                 mov     edx, ds:_iob
.text:0040A87E                 lea     ecx, [edx+40h]
.text:0040A881                 mov     ebx, [ecx+4]
.text:0040A884                 dec     ebx
.text:0040A885                 test    ebx, ebx
.text:0040A887                 mov     [ecx+4], ebx
.text:0040A88A                 js      short loc_40A8B0
.text:0040A88C                 mov     ecx, [edx+40h]
.text:0040A88F                 mov     byte ptr [ecx], 0Ah
.text:0040A892                 inc     dword ptr [edx+40h]
.text:0040A895
.text:0040A895 loc_40A895:                             ; CODE XREF: sub_40A820+A0↓j
.text:0040A895                 mov     edx, ds:_iob
.text:0040A89B                 add     edx, 40h ; '@'
.text:0040A89E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A8A1                 call    fflush
.text:0040A8A6                 test    esi, esi
.text:0040A8A8                 jnz     short loc_40A91C
.text:0040A8AA                 add     esp, 14h
.text:0040A8AD                 pop     ebx
.text:0040A8AE                 pop     esi
.text:0040A8AF                 retn
.text:0040A8B0 ; ---------------------------------------------------------------------------
.text:0040A8B0
.text:0040A8B0 loc_40A8B0:                             ; CODE XREF: sub_40A820+6A↑j
.text:0040A8B0                 mov     [esp+1Ch+Format], ecx ; File
.text:0040A8B4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040A8BB                 call    _flsbuf
.text:0040A8C0                 jmp     short loc_40A895
.text:0040A8C2 ; ---------------------------------------------------------------------------
.text:0040A8C2
.text:0040A8C2 loc_40A8C2:                             ; CODE XREF: sub_40A820+56↑j
.text:0040A8C2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040A8C5                 call    strerror
.text:0040A8CA                 test    eax, eax
.text:0040A8CC                 jz      short loc_40A8ED
.text:0040A8CE
.text:0040A8CE loc_40A8CE:                             ; CODE XREF: sub_40A820+D2↓j
.text:0040A8CE                 mov     [esp+1Ch+ArgList], eax
.text:0040A8D2                 mov     ebx, ds:_iob
.text:0040A8D8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:0040A8E0                 add     ebx, 40h ; '@'
.text:0040A8E3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040A8E6                 call    fprintf
.text:0040A8EB                 jmp     short loc_40A878
.text:0040A8ED ; ---------------------------------------------------------------------------
.text:0040A8ED
.text:0040A8ED loc_40A8ED:                             ; CODE XREF: sub_40A820+AC↑j
.text:0040A8ED                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040A8F2                 jmp     short loc_40A8CE
.text:0040A8F4 ; ---------------------------------------------------------------------------
.text:0040A8F4
.text:0040A8F4 loc_40A8F4:                             ; CODE XREF: sub_40A820+25↑j
.text:0040A8F4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0040A8FC                 mov     edx, ds:_iob
.text:0040A902                 mov     ecx, ds:dword_415550
.text:0040A908                 add     edx, 40h ; '@'
.text:0040A90B                 mov     [esp+1Ch+ArgList], ecx
.text:0040A90F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040A912                 call    fprintf
.text:0040A917                 jmp     loc_40A84D
.text:0040A91C ; ---------------------------------------------------------------------------
.text:0040A91C
.text:0040A91C loc_40A91C:                             ; CODE XREF: sub_40A820+88↑j
.text:0040A91C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040A91F                 call    exit
.text:0040A91F sub_40A820      endp
.text:0040A91F
.text:0040A924
.text:0040A924 ; =============== S U B R O U T I N E =======================================
.text:0040A924
.text:0040A924
.text:0040A924 ; int __cdecl sub_40A924(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:0040A924 sub_40A924      proc near               ; DATA XREF: sub_40A924+77↓o
.text:0040A924
.text:0040A924 Stream          = dword ptr -28h
.text:0040A924 Format          = dword ptr -24h
.text:0040A924 ArgList         = dword ptr -20h
.text:0040A924 var_1C          = dword ptr -1Ch
.text:0040A924 Code            = dword ptr  8
.text:0040A924 ErrorMessage    = dword ptr  0Ch
.text:0040A924 Str2            = dword ptr  10h
.text:0040A924 arg_10          = dword ptr  14h
.text:0040A924 arg_14          = dword ptr  18h
.text:0040A924 arg_18          = byte ptr  1Ch
.text:0040A924
.text:0040A924                 and     eax, 64253A73h
.text:0040A929                 cmp     ah, [eax]
.text:0040A92B
.text:0040A92B loc_40A92B:                             ; DATA XREF: sub_40A924:loc_40AA65↓o
.text:0040A92B                 add     ds:55003A73h, ah
.text:0040A931                 push    edi
.text:0040A932                 push    esi
.text:0040A933                 push    ebx
.text:0040A934                 sub     esp, 1Ch
.text:0040A937                 mov     edx, ds:dword_4155C0
.text:0040A93D                 mov     ebp, [esp+28h+Code]
.text:0040A941                 mov     edi, [esp+28h+ErrorMessage]
.text:0040A945                 test    edx, edx
.text:0040A947                 mov     ebx, [esp+28h+Str2]
.text:0040A94B                 mov     esi, [esp+28h+arg_10]
.text:0040A94F                 jz      short loc_40A969
.text:0040A951                 cmp     ds:dword_4151C0, esi
.text:0040A957                 jz      loc_40AA90
.text:0040A95D
.text:0040A95D loc_40A95D:                             ; CODE XREF: sub_40A924+18D↓j
.text:0040A95D                 mov     ds:Str1, ebx
.text:0040A963                 mov     ds:dword_4151C0, esi
.text:0040A969
.text:0040A969 loc_40A969:                             ; CODE XREF: sub_40A924+2B↑j
.text:0040A969                 mov     edx, ds:_iob
.text:0040A96F                 add     edx, 20h ; ' '
.text:0040A972                 mov     [esp+28h+Stream], edx ; Stream
.text:0040A975                 call    fflush
.text:0040A97A                 mov     eax, ds:dword_415580
.text:0040A97F                 test    eax, eax
.text:0040A981                 jz      loc_40AA65
.text:0040A987                 call    eax ; dword_415580
.text:0040A989
.text:0040A989 loc_40A989:                             ; CODE XREF: sub_40A924+164↓j
.text:0040A989                 test    ebx, ebx
.text:0040A98B                 jz      short loc_40A9AE
.text:0040A98D                 mov     [esp+28h+ArgList], ebx
.text:0040A991                 mov     ebx, ds:_iob
.text:0040A997                 mov     [esp+28h+var_1C], esi
.text:0040A99B                 mov     [esp+28h+Format], offset sub_40A924 ; Format
.text:0040A9A3                 add     ebx, 40h ; '@'
.text:0040A9A6                 mov     [esp+28h+Stream], ebx ; Stream
.text:0040A9A9                 call    fprintf
.text:0040A9AE
.text:0040A9AE loc_40A9AE:                             ; CODE XREF: sub_40A924+67↑j
.text:0040A9AE                 mov     esi, ds:_iob
.text:0040A9B4                 lea     edx, [esp+28h+arg_18]
.text:0040A9B8                 mov     ecx, [esp+28h+arg_14]
.text:0040A9BC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:0040A9C0                 add     esi, 40h ; '@'
.text:0040A9C3                 mov     [esp+28h+Format], ecx ; Format
.text:0040A9C7                 mov     [esp+28h+Stream], esi ; Stream
.text:0040A9CA                 call    vfprintf
.text:0040A9CF                 inc     ds:dword_415590
.text:0040A9D5                 test    edi, edi
.text:0040A9D7                 jnz     short loc_40AA30
.text:0040A9D9
.text:0040A9D9 loc_40A9D9:                             ; CODE XREF: sub_40A924+135↓j
.text:0040A9D9                 mov     edx, ds:_iob
.text:0040A9DF                 lea     ecx, [edx+40h]
.text:0040A9E2                 mov     ebx, [ecx+4]
.text:0040A9E5                 dec     ebx
.text:0040A9E6                 test    ebx, ebx
.text:0040A9E8                 mov     [ecx+4], ebx
.text:0040A9EB                 js      short loc_40AA17
.text:0040A9ED                 mov     esi, [edx+40h]
.text:0040A9F0                 mov     byte ptr [esi], 0Ah
.text:0040A9F3                 inc     dword ptr [edx+40h]
.text:0040A9F6
.text:0040A9F6 loc_40A9F6:                             ; CODE XREF: sub_40A924+103↓j
.text:0040A9F6                 mov     ecx, ds:_iob
.text:0040A9FC                 add     ecx, 40h ; '@'
.text:0040A9FF                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040AA02                 call    fflush
.text:0040AA07                 test    ebp, ebp
.text:0040AA09                 jnz     loc_40AAB6
.text:0040AA0F
.text:0040AA0F loc_40AA0F:                             ; CODE XREF: sub_40A924+173↓j
.text:0040AA0F                                         ; sub_40A924+187↓j
.text:0040AA0F                 add     esp, 1Ch
.text:0040AA12                 pop     ebx
.text:0040AA13                 pop     esi
.text:0040AA14                 pop     edi
.text:0040AA15                 pop     ebp
.text:0040AA16                 retn
.text:0040AA17 ; ---------------------------------------------------------------------------
.text:0040AA17
.text:0040AA17 loc_40AA17:                             ; CODE XREF: sub_40A924+C7↑j
.text:0040AA17                 mov     [esp+28h+Format], ecx ; File
.text:0040AA1B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:0040AA22                 call    _flsbuf
.text:0040AA27                 jmp     short loc_40A9F6
.text:0040AA27 ; ---------------------------------------------------------------------------
.text:0040AA29                 align 10h
.text:0040AA30
.text:0040AA30 loc_40AA30:                             ; CODE XREF: sub_40A924+B3↑j
.text:0040AA30                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:0040AA33                 call    strerror
.text:0040AA38                 test    eax, eax
.text:0040AA3A                 jz      short loc_40AA5E
.text:0040AA3C
.text:0040AA3C loc_40AA3C:                             ; CODE XREF: sub_40A924+13F↓j
.text:0040AA3C                 mov     [esp+28h+ArgList], eax
.text:0040AA40                 mov     edi, ds:_iob
.text:0040AA46                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040AA4E                 add     edi, 40h ; '@'
.text:0040AA51                 mov     [esp+28h+Stream], edi ; Stream
.text:0040AA54                 call    fprintf
.text:0040AA59                 jmp     loc_40A9D9
.text:0040AA5E ; ---------------------------------------------------------------------------
.text:0040AA5E
.text:0040AA5E loc_40AA5E:                             ; CODE XREF: sub_40A924+116↑j
.text:0040AA5E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:0040AA63                 jmp     short loc_40AA3C
.text:0040AA65 ; ---------------------------------------------------------------------------
.text:0040AA65
.text:0040AA65 loc_40AA65:                             ; CODE XREF: sub_40A924+5D↑j
.text:0040AA65                 mov     [esp+28h+Format], (offset loc_40A92B+1) ; Format
.text:0040AA6D                 mov     ecx, ds:_iob
.text:0040AA73                 mov     edx, ds:dword_415550
.text:0040AA79                 add     ecx, 40h ; '@'
.text:0040AA7C                 mov     [esp+28h+ArgList], edx
.text:0040AA80                 mov     [esp+28h+Stream], ecx ; Stream
.text:0040AA83                 call    fprintf
.text:0040AA88                 jmp     loc_40A989
.text:0040AA88 ; ---------------------------------------------------------------------------
.text:0040AA8D                 align 10h
.text:0040AA90
.text:0040AA90 loc_40AA90:                             ; CODE XREF: sub_40A924+33↑j
.text:0040AA90                 mov     eax, ds:Str1
.text:0040AA95                 cmp     ebx, eax
.text:0040AA97                 jz      loc_40AA0F
.text:0040AA9D                 mov     [esp+28h+Format], ebx ; Str2
.text:0040AAA1                 mov     [esp+28h+Stream], eax ; Str1
.text:0040AAA4                 call    strcmp
.text:0040AAA9                 test    eax, eax
.text:0040AAAB                 jz      loc_40AA0F
.text:0040AAB1                 jmp     loc_40A95D
.text:0040AAB6 ; ---------------------------------------------------------------------------
.text:0040AAB6
.text:0040AAB6 loc_40AAB6:                             ; CODE XREF: sub_40A924+E5↑j
.text:0040AAB6                 mov     [esp+28h+Stream], ebp ; Code
.text:0040AAB9                 call    exit
.text:0040AAB9 sub_40A924      endp ; sp-analysis failed
.text:0040AAB9
.text:0040AAB9 ; ---------------------------------------------------------------------------
.text:0040AABE                 align 10h
.text:0040AAC0
.text:0040AAC0 ; =============== S U B R O U T I N E =======================================
.text:0040AAC0
.text:0040AAC0
.text:0040AAC0 sub_40AAC0      proc near               ; CODE XREF: sub_403800+D9↑p
.text:0040AAC0
.text:0040AAC0 var_C           = dword ptr -0Ch
.text:0040AAC0 var_8           = dword ptr -8
.text:0040AAC0 var_4           = dword ptr -4
.text:0040AAC0 arg_0           = dword ptr  4
.text:0040AAC0 arg_4           = dword ptr  8
.text:0040AAC0
.text:0040AAC0                 sub     esp, 0Ch
.text:0040AAC3                 mov     edx, [esp+0Ch+arg_4]
.text:0040AAC7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040AACE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040AAD2                 mov     edx, [esp+0Ch+arg_0]
.text:0040AAD6                 mov     [esp+0Ch+var_8], edx ; int
.text:0040AADA                 call    sub_40AAF0
.text:0040AADF                 add     esp, 0Ch
.text:0040AAE2                 retn
.text:0040AAE2 sub_40AAC0      endp
.text:0040AAE2
.text:0040AAE2 ; ---------------------------------------------------------------------------
.text:0040AAE3                 align 10h
.text:0040AAF0
.text:0040AAF0 ; =============== S U B R O U T I N E =======================================
.text:0040AAF0
.text:0040AAF0
.text:0040AAF0 ; int __cdecl sub_40AAF0(LPCSTR, int, int)
.text:0040AAF0 sub_40AAF0      proc near               ; CODE XREF: sub_40AAC0+1A↑p
.text:0040AAF0                                         ; sub_40AC20+42↓p ...
.text:0040AAF0
.text:0040AAF0 lpFileName      = dword ptr -2Ch
.text:0040AAF0 dwDesiredAccess = dword ptr -28h
.text:0040AAF0 dwShareMode     = dword ptr -24h
.text:0040AAF0 lpSecurityAttributes= dword ptr -20h
.text:0040AAF0 dwCreationDisposition= dword ptr -1Ch
.text:0040AAF0 dwFlagsAndAttributes= dword ptr -18h
.text:0040AAF0 hTemplateFile   = dword ptr -14h
.text:0040AAF0 var_10          = dword ptr -10h
.text:0040AAF0 var_C           = dword ptr -0Ch
.text:0040AAF0 var_8           = dword ptr -8
.text:0040AAF0 var_4           = dword ptr -4
.text:0040AAF0 arg_0           = dword ptr  4
.text:0040AAF0 arg_4           = dword ptr  8
.text:0040AAF0 arg_8           = dword ptr  0Ch
.text:0040AAF0
.text:0040AAF0 ; FUNCTION CHUNK AT .text:0040CD40 SIZE 0000013A BYTES
.text:0040AAF0
.text:0040AAF0                 sub     esp, 0Ch
.text:0040AAF3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040AAF7                 mov     edx, [esp+0Ch+arg_4]
.text:0040AAFB                 mov     eax, [esp+0Ch+arg_8]
.text:0040AAFF                 test    ecx, ecx
.text:0040AB01                 jnz     short loc_40AB20
.text:0040AB03                 test    edx, edx
.text:0040AB05                 jz      short loc_40AB20
.text:0040AB07                 test    eax, eax
.text:0040AB09                 jz      short loc_40AB20
.text:0040AB0B                 mov     [esp+0Ch+arg_4], eax
.text:0040AB0F                 mov     [esp+0Ch+arg_0], edx
.text:0040AB13                 add     esp, 0Ch
.text:0040AB16                 jmp     loc_40CD40
.text:0040AB16 ; ---------------------------------------------------------------------------
.text:0040AB1B                 align 10h
.text:0040AB20
.text:0040AB20 loc_40AB20:                             ; CODE XREF: sub_40AAF0+11↑j
.text:0040AB20                                         ; sub_40AAF0+15↑j ...
.text:0040AB20                 call    _errno
.text:0040AB25                 mov     dword ptr [eax], 16h
.text:0040AB2B                 mov     eax, 0FFFFFFFFh
.text:0040AB30                 add     esp, 0Ch
.text:0040AB33                 retn
.text:0040AB33 sub_40AAF0      endp
.text:0040AB33
.text:0040AB33 ; ---------------------------------------------------------------------------
.text:0040AB34                 align 10h
.text:0040AB40
.text:0040AB40 ; =============== S U B R O U T I N E =======================================
.text:0040AB40
.text:0040AB40
.text:0040AB40 ; int __cdecl sub_40AB40(char *, int)
.text:0040AB40 sub_40AB40      proc near               ; CODE XREF: sub_403230+5A↑p
.text:0040AB40
.text:0040AB40 var_C           = dword ptr -0Ch
.text:0040AB40 var_8           = dword ptr -8
.text:0040AB40 var_4           = dword ptr -4
.text:0040AB40 arg_0           = dword ptr  4
.text:0040AB40 arg_4           = dword ptr  8
.text:0040AB40
.text:0040AB40                 sub     esp, 0Ch
.text:0040AB43                 mov     edx, [esp+0Ch+arg_4]
.text:0040AB47                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040AB4E                 mov     [esp+0Ch+var_4], edx ; int
.text:0040AB52                 mov     edx, [esp+0Ch+arg_0]
.text:0040AB56                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040AB5A                 call    sub_40AC20
.text:0040AB5F                 add     esp, 0Ch
.text:0040AB62                 retn
.text:0040AB62 sub_40AB40      endp
.text:0040AB62
.text:0040AB62 ; ---------------------------------------------------------------------------
.text:0040AB63                 align 10h
.text:0040AB70
.text:0040AB70 ; =============== S U B R O U T I N E =======================================
.text:0040AB70
.text:0040AB70
.text:0040AB70 ; int __cdecl sub_40AB70(LPCSTR)
.text:0040AB70 sub_40AB70      proc near               ; CODE XREF: sub_403800+24C↑p
.text:0040AB70                                         ; sub_40AD90+6A↓p
.text:0040AB70
.text:0040AB70 lpFileName      = dword ptr -1Ch
.text:0040AB70 AccessMode      = dword ptr -18h
.text:0040AB70 var_8           = dword ptr -8
.text:0040AB70 var_4           = dword ptr -4
.text:0040AB70 arg_0           = dword ptr  4
.text:0040AB70
.text:0040AB70                 sub     esp, 1Ch
.text:0040AB73                 mov     [esp+1Ch+var_8], ebx
.text:0040AB77                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AB7B                 mov     [esp+1Ch+var_4], esi
.text:0040AB7F                 test    ebx, ebx
.text:0040AB81                 jz      loc_40AC12
.text:0040AB87                 call    _errno
.text:0040AB8C                 mov     esi, [eax]
.text:0040AB8E                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:0040AB96                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040AB99                 call    sub_40D130
.text:0040AB9E                 test    eax, eax
.text:0040ABA0                 jnz     short loc_40AC00
.text:0040ABA2
.text:0040ABA2 loc_40ABA2:                             ; CODE XREF: sub_40AB70+A0↓j
.text:0040ABA2                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:0040ABAA                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040ABAD                 call    sub_40D130
.text:0040ABB2                 test    eax, eax
.text:0040ABB4                 jz      short loc_40ABF1
.text:0040ABB6                 call    _errno
.text:0040ABBB                 mov     [eax], esi
.text:0040ABBD                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0040ABC0                 call    DeleteFileA
.text:0040ABC5                 sub     esp, 4
.text:0040ABC8                 xor     edx, edx
.text:0040ABCA                 test    eax, eax
.text:0040ABCC                 jz      short loc_40ABDC
.text:0040ABCE
.text:0040ABCE loc_40ABCE:                             ; CODE XREF: sub_40AB70+7F↓j
.text:0040ABCE                 mov     ebx, [esp+1Ch+var_8]
.text:0040ABD2                 mov     eax, edx
.text:0040ABD4                 mov     esi, [esp+1Ch+var_4]
.text:0040ABD8                 add     esp, 1Ch
.text:0040ABDB                 retn
.text:0040ABDC ; ---------------------------------------------------------------------------
.text:0040ABDC
.text:0040ABDC loc_40ABDC:                             ; CODE XREF: sub_40AB70+5C↑j
.text:0040ABDC                 call    sub_40D110
.text:0040ABE1                 mov     esi, eax
.text:0040ABE3                 call    _errno
.text:0040ABE8                 mov     [eax], esi
.text:0040ABEA
.text:0040ABEA loc_40ABEA:                             ; CODE XREF: sub_40AB70+8C↓j
.text:0040ABEA                                         ; sub_40AB70+AD↓j
.text:0040ABEA                 mov     edx, 0FFFFFFFFh
.text:0040ABEF                 jmp     short loc_40ABCE
.text:0040ABF1 ; ---------------------------------------------------------------------------
.text:0040ABF1
.text:0040ABF1 loc_40ABF1:                             ; CODE XREF: sub_40AB70+44↑j
.text:0040ABF1                 call    _errno
.text:0040ABF6                 mov     dword ptr [eax], 15h
.text:0040ABFC                 jmp     short loc_40ABEA
.text:0040ABFC ; ---------------------------------------------------------------------------
.text:0040ABFE                 align 10h
.text:0040AC00
.text:0040AC00 loc_40AC00:                             ; CODE XREF: sub_40AB70+30↑j
.text:0040AC00                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:0040AC08                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:0040AC0B                 call    _chmod_0
.text:0040AC10                 jmp     short loc_40ABA2
.text:0040AC12 ; ---------------------------------------------------------------------------
.text:0040AC12
.text:0040AC12 loc_40AC12:                             ; CODE XREF: sub_40AB70+11↑j
.text:0040AC12                 call    _errno
.text:0040AC17                 mov     dword ptr [eax], 16h
.text:0040AC1D                 jmp     short loc_40ABEA
.text:0040AC1D sub_40AB70      endp
.text:0040AC1D
.text:0040AC1D ; ---------------------------------------------------------------------------
.text:0040AC1F                 align 10h
.text:0040AC20
.text:0040AC20 ; =============== S U B R O U T I N E =======================================
.text:0040AC20
.text:0040AC20
.text:0040AC20 ; int __cdecl sub_40AC20(LPCSTR, char *, int)
.text:0040AC20 sub_40AC20      proc near               ; CODE XREF: sub_40AB40+1A↑p
.text:0040AC20                                         ; sub_410760+104↓p ...
.text:0040AC20
.text:0040AC20 var_13C         = dword ptr -13Ch
.text:0040AC20 lpString1       = dword ptr -138h
.text:0040AC20 var_134         = dword ptr -134h
.text:0040AC20 String1         = byte ptr -12Ch
.text:0040AC20 var_10          = dword ptr -10h
.text:0040AC20 var_C           = dword ptr -0Ch
.text:0040AC20 var_8           = dword ptr -8
.text:0040AC20 var_4           = dword ptr -4
.text:0040AC20 arg_0           = dword ptr  4
.text:0040AC20 arg_4           = dword ptr  8
.text:0040AC20 arg_8           = dword ptr  0Ch
.text:0040AC20
.text:0040AC20                 sub     esp, 13Ch
.text:0040AC26                 mov     [esp+13Ch+var_10], ebx
.text:0040AC2D                 mov     ebx, [esp+13Ch+arg_8]
.text:0040AC34                 mov     [esp+13Ch+var_C], esi
.text:0040AC3B                 mov     esi, [esp+13Ch+arg_4]
.text:0040AC42                 mov     [esp+13Ch+var_8], edi
.text:0040AC49                 mov     edi, [esp+13Ch+arg_0]
.text:0040AC50                 mov     [esp+13Ch+var_4], ebp
.text:0040AC57                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040AC5B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040AC5F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040AC62                 call    sub_40AAF0
.text:0040AC67                 cmp     eax, 0FFFFFFFFh
.text:0040AC6A                 mov     edx, eax
.text:0040AC6C                 jz      short loc_40AC7E
.text:0040AC6E                 mov     ecx, [ebx]
.text:0040AC70                 and     ecx, 0F000h
.text:0040AC76                 cmp     ecx, 0A000h
.text:0040AC7C                 jz      short loc_40ACA3
.text:0040AC7E
.text:0040AC7E loc_40AC7E:                             ; CODE XREF: sub_40AC20+4C↑j
.text:0040AC7E                                         ; sub_40AC20+A1↓j ...
.text:0040AC7E                 mov     ebx, [esp+13Ch+var_10]
.text:0040AC85                 mov     eax, edx
.text:0040AC87                 mov     esi, [esp+13Ch+var_C]
.text:0040AC8E                 mov     edi, [esp+13Ch+var_8]
.text:0040AC95                 mov     ebp, [esp+13Ch+var_4]
.text:0040AC9C                 add     esp, 13Ch
.text:0040ACA2                 retn
.text:0040ACA3 ; ---------------------------------------------------------------------------
.text:0040ACA3
.text:0040ACA3 loc_40ACA3:                             ; CODE XREF: sub_40AC20+5C↑j
.text:0040ACA3                 mov     [esp+13Ch+var_134], 104h
.text:0040ACAB                 lea     ebp, [esp+13Ch+String1]
.text:0040ACAF                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040ACB3                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040ACB6                 call    sub_40D380
.text:0040ACBB                 inc     eax
.text:0040ACBC                 mov     edx, 0FFFFFFFFh
.text:0040ACC1                 jz      short loc_40AC7E
.text:0040ACC3                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040ACC7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040ACCB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040ACCE                 call    sub_40AAF0
.text:0040ACD3                 mov     edx, eax
.text:0040ACD5                 jmp     short loc_40AC7E
.text:0040ACD5 sub_40AC20      endp
.text:0040ACD5
.text:0040ACD5 ; ---------------------------------------------------------------------------
.text:0040ACD7                 align 10h
.text:0040ACE0
.text:0040ACE0 ; =============== S U B R O U T I N E =======================================
.text:0040ACE0
.text:0040ACE0
.text:0040ACE0 sub_40ACE0      proc near               ; CODE XREF: sub_403230+277↑p
.text:0040ACE0
.text:0040ACE0 FileHandle      = dword ptr -2Ch
.text:0040ACE0 Offset          = qword ptr -28h
.text:0040ACE0 Origin          = dword ptr -20h
.text:0040ACE0 var_10          = dword ptr -10h
.text:0040ACE0 var_C           = dword ptr -0Ch
.text:0040ACE0 var_8           = dword ptr -8
.text:0040ACE0 var_4           = dword ptr -4
.text:0040ACE0 arg_0           = dword ptr  4
.text:0040ACE0 arg_4           = qword ptr  8
.text:0040ACE0
.text:0040ACE0                 sub     esp, 2Ch
.text:0040ACE3                 mov     [esp+2Ch+var_4], ebp
.text:0040ACE7                 mov     ebp, [esp+2Ch+arg_0]
.text:0040ACEB                 mov     [esp+2Ch+var_10], ebx
.text:0040ACEF                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:0040ACF3                 mov     [esp+2Ch+var_C], esi
.text:0040ACF7                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:0040ACFB                 mov     [esp+2Ch+var_8], edi
.text:0040ACFF                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040AD02                 call    _get_osfhandle
.text:0040AD07                 cmp     eax, 0FFFFFFFFh
.text:0040AD0A                 mov     edi, eax
.text:0040AD0C                 jz      short loc_40AD76
.text:0040AD0E                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:0040AD11                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:0040AD19                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:0040AD1D                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:0040AD21                 call    _lseeki64
.text:0040AD26                 mov     ebp, edx
.text:0040AD28                 xor     eax, ebx
.text:0040AD2A                 xor     ebp, esi
.text:0040AD2C                 or      ebp, eax
.text:0040AD2E                 jnz     short loc_40AD69
.text:0040AD30                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:0040AD33                 call    SetEndOfFile
.text:0040AD38                 sub     esp, 4
.text:0040AD3B                 xor     edx, edx
.text:0040AD3D                 test    eax, eax
.text:0040AD3F                 jz      short loc_40AD57
.text:0040AD41
.text:0040AD41 loc_40AD41:                             ; CODE XREF: sub_40ACE0+87↓j
.text:0040AD41                 mov     ebx, [esp+2Ch+var_10]
.text:0040AD45                 mov     eax, edx
.text:0040AD47                 mov     esi, [esp+2Ch+var_C]
.text:0040AD4B                 mov     edi, [esp+2Ch+var_8]
.text:0040AD4F                 mov     ebp, [esp+2Ch+var_4]
.text:0040AD53                 add     esp, 2Ch
.text:0040AD56                 retn
.text:0040AD57 ; ---------------------------------------------------------------------------
.text:0040AD57
.text:0040AD57 loc_40AD57:                             ; CODE XREF: sub_40ACE0+5F↑j
.text:0040AD57                 call    _errno
.text:0040AD5C                 mov     dword ptr [eax], offset sub_40D110
.text:0040AD62
.text:0040AD62 loc_40AD62:                             ; CODE XREF: sub_40ACE0+94↓j
.text:0040AD62                                         ; sub_40ACE0+A1↓j
.text:0040AD62                 mov     edx, 0FFFFFFFFh
.text:0040AD67                 jmp     short loc_40AD41
.text:0040AD69 ; ---------------------------------------------------------------------------
.text:0040AD69
.text:0040AD69 loc_40AD69:                             ; CODE XREF: sub_40ACE0+4E↑j
.text:0040AD69                 call    _errno
.text:0040AD6E                 mov     dword ptr [eax], 16h
.text:0040AD74                 jmp     short loc_40AD62
.text:0040AD76 ; ---------------------------------------------------------------------------
.text:0040AD76
.text:0040AD76 loc_40AD76:                             ; CODE XREF: sub_40ACE0+2C↑j
.text:0040AD76                 call    _errno
.text:0040AD7B                 mov     dword ptr [eax], 9
.text:0040AD81                 jmp     short loc_40AD62
.text:0040AD81 sub_40ACE0      endp
.text:0040AD81
.text:0040AD81 ; ---------------------------------------------------------------------------
.text:0040AD83                 align 10h
.text:0040AD90
.text:0040AD90 ; =============== S U B R O U T I N E =======================================
.text:0040AD90
.text:0040AD90
.text:0040AD90 ; int __cdecl sub_40AD90(LPCSTR, LPCSTR lpFileName)
.text:0040AD90 sub_40AD90      proc near               ; CODE XREF: sub_403800+136↑p
.text:0040AD90
.text:0040AD90 lpExistingFileName= dword ptr -1Ch
.text:0040AD90 lpNewFileName   = dword ptr -18h
.text:0040AD90 var_8           = dword ptr -8
.text:0040AD90 var_4           = dword ptr -4
.text:0040AD90 arg_0           = dword ptr  4
.text:0040AD90 lpFileName      = dword ptr  8
.text:0040AD90
.text:0040AD90                 sub     esp, 1Ch
.text:0040AD93                 mov     [esp+1Ch+var_4], esi
.text:0040AD97                 mov     esi, [esp+1Ch+arg_0]
.text:0040AD9B                 mov     [esp+1Ch+var_8], ebx
.text:0040AD9F                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040ADA3                 test    esi, esi
.text:0040ADA5                 jz      short loc_40AE01
.text:0040ADA7                 test    ebx, ebx
.text:0040ADA9                 jz      short loc_40AE01
.text:0040ADAB                 mov     [esp+1Ch+lpNewFileName], 0 ; int
.text:0040ADB3                 mov     [esp+1Ch+lpExistingFileName], ebx ; lpFileName
.text:0040ADB6                 call    sub_40D130
.text:0040ADBB                 test    eax, eax
.text:0040ADBD                 jz      short loc_40ADF7
.text:0040ADBF
.text:0040ADBF loc_40ADBF:                             ; CODE XREF: sub_40AD90+6F↓j
.text:0040ADBF                 mov     [esp+1Ch+lpNewFileName], ebx ; lpNewFileName
.text:0040ADC3                 mov     [esp+1Ch+lpExistingFileName], esi ; lpExistingFileName
.text:0040ADC6                 call    MoveFileA
.text:0040ADCB                 sub     esp, 8
.text:0040ADCE                 xor     edx, edx
.text:0040ADD0                 test    eax, eax
.text:0040ADD2                 jz      short loc_40ADE2
.text:0040ADD4
.text:0040ADD4 loc_40ADD4:                             ; CODE XREF: sub_40AD90+65↓j
.text:0040ADD4                 mov     ebx, [esp+1Ch+var_8]
.text:0040ADD8                 mov     eax, edx
.text:0040ADDA                 mov     esi, [esp+1Ch+var_4]
.text:0040ADDE                 add     esp, 1Ch
.text:0040ADE1                 retn
.text:0040ADE2 ; ---------------------------------------------------------------------------
.text:0040ADE2
.text:0040ADE2 loc_40ADE2:                             ; CODE XREF: sub_40AD90+42↑j
.text:0040ADE2                 call    sub_40D110
.text:0040ADE7                 mov     esi, eax
.text:0040ADE9                 call    _errno
.text:0040ADEE                 mov     [eax], esi
.text:0040ADF0
.text:0040ADF0 loc_40ADF0:                             ; CODE XREF: sub_40AD90+7C↓j
.text:0040ADF0                 mov     edx, 0FFFFFFFFh
.text:0040ADF5                 jmp     short loc_40ADD4
.text:0040ADF7 ; ---------------------------------------------------------------------------
.text:0040ADF7
.text:0040ADF7 loc_40ADF7:                             ; CODE XREF: sub_40AD90+2D↑j
.text:0040ADF7                 mov     [esp+1Ch+lpExistingFileName], ebx ; LPCSTR
.text:0040ADFA                 call    sub_40AB70
.text:0040ADFF                 jmp     short loc_40ADBF
.text:0040AE01 ; ---------------------------------------------------------------------------
.text:0040AE01
.text:0040AE01 loc_40AE01:                             ; CODE XREF: sub_40AD90+15↑j
.text:0040AE01                                         ; sub_40AD90+19↑j
.text:0040AE01                 call    _errno
.text:0040AE06                 mov     dword ptr [eax], 16h
.text:0040AE0C                 jmp     short loc_40ADF0
.text:0040AE0C sub_40AD90      endp
.text:0040AE0C
.text:0040AE0C ; ---------------------------------------------------------------------------
.text:0040AE0E                 align 10h
.text:0040AE10
.text:0040AE10 ; =============== S U B R O U T I N E =======================================
.text:0040AE10
.text:0040AE10
.text:0040AE10 sub_40AE10      proc near               ; CODE XREF: sub_403D80+2D↑p
.text:0040AE10
.text:0040AE10 lpSystemInfo    = dword ptr -0Ch
.text:0040AE10 var_4           = dword ptr -4
.text:0040AE10
.text:0040AE10                 sub     esp, 0Ch
.text:0040AE13                 mov     [esp+0Ch+var_4], edi
.text:0040AE17                 mov     edi, ds:dword_4151D0
.text:0040AE1D                 test    edi, edi
.text:0040AE1F                 mov     eax, edi
.text:0040AE21                 jz      short loc_40AE30
.text:0040AE23
.text:0040AE23 loc_40AE23:                             ; CODE XREF: sub_40AE10+48↓j
.text:0040AE23                 mov     eax, [edi+4]
.text:0040AE26                 mov     edi, [esp+0Ch+var_4]
.text:0040AE2A                 add     esp, 0Ch
.text:0040AE2D                 retn
.text:0040AE2D ; ---------------------------------------------------------------------------
.text:0040AE2E                 align 10h
.text:0040AE30
.text:0040AE30 loc_40AE30:                             ; CODE XREF: sub_40AE10+11↑j
.text:0040AE30                 cld
.text:0040AE31                 mov     edi, offset SystemInfo
.text:0040AE36                 mov     ecx, 9
.text:0040AE3B                 mov     ds:dword_4151D0, edi
.text:0040AE41                 rep stosd
.text:0040AE43                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:0040AE4A                 call    GetSystemInfo
.text:0040AE4F                 mov     edi, ds:dword_4151D0
.text:0040AE55                 sub     esp, 4
.text:0040AE58                 jmp     short loc_40AE23
.text:0040AE58 sub_40AE10      endp
.text:0040AE58
.text:0040AE58 ; ---------------------------------------------------------------------------
.text:0040AE5A                 align 10h
.text:0040AE60
.text:0040AE60 ; =============== S U B R O U T I N E =======================================
.text:0040AE60
.text:0040AE60
.text:0040AE60 sub_40AE60      proc near               ; CODE XREF: sub_40AF80+152↓p
.text:0040AE60                                         ; .text:0040B14B↓p
.text:0040AE60
.text:0040AE60 FileHandle      = dword ptr -2Ch
.text:0040AE60 Offset          = qword ptr -28h
.text:0040AE60 Origin          = dword ptr -20h
.text:0040AE60 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:0040AE60 hFile           = dword ptr -14h
.text:0040AE60 arg_0           = dword ptr  4
.text:0040AE60 arg_4           = dword ptr  8
.text:0040AE60 arg_8           = dword ptr  0Ch
.text:0040AE60
.text:0040AE60                 push    ebp
.text:0040AE61                 push    edi
.text:0040AE62                 push    esi
.text:0040AE63                 push    ebx
.text:0040AE64                 sub     esp, 1Ch
.text:0040AE67                 mov     ebp, [esp+2Ch+arg_8]
.text:0040AE6B                 mov     edi, [esp+2Ch+arg_0]
.text:0040AE6F                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040AE72                 call    _get_osfhandle
.text:0040AE77                 movsx   edx, word ptr [ebp+2]
.text:0040AE7B                 mov     [esp+2Ch+hFile], eax
.text:0040AE7F                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:0040AE87                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:0040AE8F                 mov     [esp+2Ch+Origin], edx ; Origin
.text:0040AE93                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040AE96                 call    _lseeki64
.text:0040AE9B                 mov     ebx, eax
.text:0040AE9D                 mov     esi, edx
.text:0040AE9F                 mov     edx, [ebp+14h]
.text:0040AEA2                 add     ebx, [ebp+8]
.text:0040AEA5                 mov     eax, [ebp+10h]
.text:0040AEA8                 mov     ecx, edx
.text:0040AEAA                 adc     esi, [ebp+0Ch]
.text:0040AEAD                 or      ecx, eax
.text:0040AEAF                 jz      loc_40AF70
.text:0040AEB5                 add     eax, ebx
.text:0040AEB7                 adc     edx, esi
.text:0040AEB9
.text:0040AEB9 loc_40AEB9:                             ; CODE XREF: sub_40AE60+118↓j
.text:0040AEB9                 cmp     [esp+2Ch+arg_4], 7
.text:0040AEBE                 jz      loc_40AF5E
.text:0040AEC4                 cmp     [esp+2Ch+arg_4], 7
.text:0040AEC9                 jl      short loc_40AEE5
.text:0040AECB                 cmp     [esp+2Ch+arg_4], 9
.text:0040AED0                 jg      short loc_40AEE5
.text:0040AED2                 movsx   ecx, word ptr [ebp+0]
.text:0040AED6                 cmp     ecx, 1
.text:0040AED9                 jl      short loc_40AEE5
.text:0040AEDB                 cmp     ecx, 2
.text:0040AEDE                 jle     short loc_40AF40
.text:0040AEE0                 cmp     ecx, 3
.text:0040AEE3                 jz      short loc_40AEFD
.text:0040AEE5
.text:0040AEE5 loc_40AEE5:                             ; CODE XREF: sub_40AE60+69↑j
.text:0040AEE5                                         ; sub_40AE60+70↑j ...
.text:0040AEE5                 call    _errno
.text:0040AEEA                 mov     dword ptr [eax], 16h
.text:0040AEF0
.text:0040AEF0 loc_40AEF0:                             ; CODE XREF: sub_40AE60+D9↓j
.text:0040AEF0                                         ; sub_40AE60+109↓j
.text:0040AEF0                 mov     eax, 0FFFFFFFFh
.text:0040AEF5
.text:0040AEF5 loc_40AEF5:                             ; CODE XREF: sub_40AE60+C9↓j
.text:0040AEF5                 add     esp, 1Ch
.text:0040AEF8                 pop     ebx
.text:0040AEF9                 pop     esi
.text:0040AEFA                 pop     edi
.text:0040AEFB                 pop     ebp
.text:0040AEFC                 retn
.text:0040AEFD ; ---------------------------------------------------------------------------
.text:0040AEFD
.text:0040AEFD loc_40AEFD:                             ; CODE XREF: sub_40AE60+83↑j
.text:0040AEFD                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:0040AF01                 mov     eax, [esp+2Ch+hFile]
.text:0040AF05                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040AF09                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040AF0D                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040AF11                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:0040AF14                 call    UnlockFile
.text:0040AF19                 lea     esi, [esi+0]
.text:0040AF20
.text:0040AF20 loc_40AF20:                             ; CODE XREF: sub_40AE60+FC↓j
.text:0040AF20                 mov     ecx, eax
.text:0040AF22                 sub     esp, 14h
.text:0040AF25                 xor     eax, eax
.text:0040AF27                 test    ecx, ecx
.text:0040AF29                 jnz     short loc_40AEF5
.text:0040AF2B                 call    sub_40D110
.text:0040AF30                 mov     esi, eax
.text:0040AF32                 call    _errno
.text:0040AF37                 mov     [eax], esi
.text:0040AF39                 jmp     short loc_40AEF0
.text:0040AF39 ; ---------------------------------------------------------------------------
.text:0040AF3B                 align 10h
.text:0040AF40
.text:0040AF40 loc_40AF40:                             ; CODE XREF: sub_40AE60+7E↑j
.text:0040AF40                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:0040AF44                 mov     edx, [esp+2Ch+hFile]
.text:0040AF48                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040AF4C                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:0040AF50                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:0040AF53                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:0040AF57                 call    LockFile
.text:0040AF5C                 jmp     short loc_40AF20
.text:0040AF5E ; ---------------------------------------------------------------------------
.text:0040AF5E
.text:0040AF5E loc_40AF5E:                             ; CODE XREF: sub_40AE60+5E↑j
.text:0040AF5E                 call    _errno
.text:0040AF63                 mov     dword ptr [eax], 28h ; '('
.text:0040AF69                 jmp     short loc_40AEF0
.text:0040AF69 ; ---------------------------------------------------------------------------
.text:0040AF6B                 align 10h
.text:0040AF70
.text:0040AF70 loc_40AF70:                             ; CODE XREF: sub_40AE60+4F↑j
.text:0040AF70                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:0040AF73                 call    _filelengthi64
.text:0040AF78                 jmp     loc_40AEB9
.text:0040AF78 sub_40AE60      endp
.text:0040AF78
.text:0040AF78 ; ---------------------------------------------------------------------------
.text:0040AF7D                 align 10h
.text:0040AF80
.text:0040AF80 ; =============== S U B R O U T I N E =======================================
.text:0040AF80
.text:0040AF80
.text:0040AF80 sub_40AF80      proc near               ; CODE XREF: sub_402BE0+1E↑p
.text:0040AF80
.text:0040AF80 FileHandle      = dword ptr -1Ch
.text:0040AF80 var_18          = dword ptr -18h
.text:0040AF80 var_14          = dword ptr -14h
.text:0040AF80 var_4           = dword ptr -4
.text:0040AF80 arg_0           = dword ptr  4
.text:0040AF80 arg_4           = dword ptr  8
.text:0040AF80 arg_8           = byte ptr  0Ch
.text:0040AF80
.text:0040AF80                 sub     esp, 1Ch
.text:0040AF83                 mov     ecx, [esp+1Ch+arg_0]
.text:0040AF87                 mov     [esp+1Ch+var_4], ebx
.text:0040AF8B                 mov     edx, [esp+1Ch+arg_4]
.text:0040AF8F                 test    ecx, ecx
.text:0040AF91                 js      loc_40B0E9
.text:0040AF97                 cmp     edx, 9          ; switch 10 cases
.text:0040AF9A                 lea     eax, [esp+1Ch+arg_8]
.text:0040AF9E                 ja      def_40AFA4      ; jumptable 0040AFA4 default case
.text:0040AFA4                 jmp     ds:jpt_40AFA4[edx*4] ; switch jump
.text:0040AFA4 ; ---------------------------------------------------------------------------
.text:0040AFAB                 align 4
.text:0040AFAC jpt_40AFA4      dd offset loc_40AFD4    ; DATA XREF: sub_40AF80+24↑r
.text:0040AFAC                 dd offset loc_40AFE8    ; jump table for switch statement
.text:0040AFAC                 dd offset loc_40B008
.text:0040AFAC                 dd offset loc_40B030
.text:0040AFAC                 dd offset loc_40B078
.text:0040AFAC                 dd offset loc_40B0B0
.text:0040AFAC                 dd offset loc_40B0B0
.text:0040AFAC                 dd offset loc_40B0B0
.text:0040AFAC                 dd offset loc_40B0C5
.text:0040AFAC                 dd offset loc_40B0C5
.text:0040AFD4 ; ---------------------------------------------------------------------------
.text:0040AFD4
.text:0040AFD4 loc_40AFD4:                             ; CODE XREF: sub_40AF80+24↑j
.text:0040AFD4                                         ; DATA XREF: sub_40AF80:jpt_40AFA4↑o
.text:0040AFD4                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 0040AFA4 case 0
.text:0040AFD7                 call    _dup
.text:0040AFDC                 lea     esi, [esi+0]
.text:0040AFE0
.text:0040AFE0 loc_40AFE0:                             ; CODE XREF: sub_40AF80+86↓j
.text:0040AFE0                                         ; sub_40AF80+AC↓j ...
.text:0040AFE0                 mov     ebx, [esp+1Ch+var_4]
.text:0040AFE4                 add     esp, 1Ch
.text:0040AFE7                 retn
.text:0040AFE8 ; ---------------------------------------------------------------------------
.text:0040AFE8
.text:0040AFE8 loc_40AFE8:                             ; CODE XREF: sub_40AF80+24↑j
.text:0040AFE8                                         ; DATA XREF: sub_40AF80:jpt_40AFA4↑o
.text:0040AFE8                 mov     eax, ds:__pioinfo ; jumptable 0040AFA4 case 1
.text:0040AFED                 mov     edx, ecx
.text:0040AFEF                 sar     edx, 5
.text:0040AFF2                 and     ecx, 1Fh
.text:0040AFF5                 mov     ebx, [eax+edx*4]
.text:0040AFF8                 lea     eax, [ecx+ecx*8]
.text:0040AFFB                 test    byte ptr [ebx+eax*4+4], 10h
.text:0040B000                 setnz   dl
.text:0040B003                 movzx   eax, dl
.text:0040B006                 jmp     short loc_40AFE0
.text:0040B008 ; ---------------------------------------------------------------------------
.text:0040B008
.text:0040B008 loc_40B008:                             ; CODE XREF: sub_40AF80+24↑j
.text:0040B008                                         ; DATA XREF: sub_40AF80:jpt_40AFA4↑o
.text:0040B008                 test    bl, 1           ; jumptable 0040AFA4 case 2
.text:0040B00B                 jz      short loc_40B013
.text:0040B00D                 and     ebx, 0FFFFFFFEh
.text:0040B010                 or      ebx, 10h
.text:0040B013
.text:0040B013 loc_40B013:                             ; CODE XREF: sub_40AF80+8B↑j
.text:0040B013                 mov     eax, ds:__pioinfo
.text:0040B018                 mov     edx, ecx
.text:0040B01A                 sar     edx, 5
.text:0040B01D                 and     ecx, 1Fh
.text:0040B020                 mov     edx, [eax+edx*4]
.text:0040B023                 lea     eax, [ecx+ecx*8]
.text:0040B026                 mov     [edx+eax*4+4], bl
.text:0040B02A
.text:0040B02A loc_40B02A:                             ; CODE XREF: sub_40AF80+121↓j
.text:0040B02A                 xor     eax, eax
.text:0040B02C                 jmp     short loc_40AFE0
.text:0040B02C ; ---------------------------------------------------------------------------
.text:0040B02E                 align 10h
.text:0040B030
.text:0040B030 loc_40B030:                             ; CODE XREF: sub_40AF80+24↑j
.text:0040B030                                         ; DATA XREF: sub_40AF80:jpt_40AFA4↑o
.text:0040B030                 mov     eax, ds:__pioinfo ; jumptable 0040AFA4 case 3
.text:0040B035                 mov     ebx, ecx
.text:0040B037                 sar     ebx, 5
.text:0040B03A                 and     ecx, 1Fh
.text:0040B03D                 mov     edx, [eax+ebx*4]
.text:0040B040                 lea     ebx, [ecx+ecx*8]
.text:0040B043                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:0040B048                 xor     edx, edx
.text:0040B04A                 test    al, 1
.text:0040B04C                 jz      short loc_40B057
.text:0040B04E                 mov     edx, 2
.text:0040B053
.text:0040B053 loc_40B053:                             ; CODE XREF: sub_40AF80+E0↓j
.text:0040B053                                         ; sub_40AF80+EB↓j ...
.text:0040B053                 mov     eax, edx
.text:0040B055                 jmp     short loc_40AFE0
.text:0040B057 ; ---------------------------------------------------------------------------
.text:0040B057
.text:0040B057 loc_40B057:                             ; CODE XREF: sub_40AF80+CC↑j
.text:0040B057                 test    al, 20h
.text:0040B059                 jz      short loc_40B062
.text:0040B05B                 mov     edx, 8
.text:0040B060                 jmp     short loc_40B053
.text:0040B062 ; ---------------------------------------------------------------------------
.text:0040B062
.text:0040B062 loc_40B062:                             ; CODE XREF: sub_40AF80+D9↑j
.text:0040B062                 test    al, 10h
.text:0040B064                 jz      short loc_40B06D
.text:0040B066                 mov     edx, 80h ; '€'
.text:0040B06B                 jmp     short loc_40B053
.text:0040B06D ; ---------------------------------------------------------------------------
.text:0040B06D
.text:0040B06D loc_40B06D:                             ; CODE XREF: sub_40AF80+E4↑j
.text:0040B06D                 test    al, al
.text:0040B06F                 jns     short loc_40B053
.text:0040B071                 mov     edx, 4000h
.text:0040B076                 jmp     short loc_40B053
.text:0040B078 ; ---------------------------------------------------------------------------
.text:0040B078
.text:0040B078 loc_40B078:                             ; CODE XREF: sub_40AF80+24↑j
.text:0040B078                                         ; DATA XREF: sub_40AF80:jpt_40AFA4↑o
.text:0040B078                 mov     edx, ds:__pioinfo ; jumptable 0040AFA4 case 4
.text:0040B07E                 mov     ebx, [eax]
.text:0040B080                 mov     eax, ecx
.text:0040B082                 sar     eax, 5
.text:0040B085                 and     ecx, 1Fh
.text:0040B088                 mov     edx, [edx+eax*4]
.text:0040B08B                 lea     eax, [ecx+ecx*8]
.text:0040B08E                 shl     eax, 2
.text:0040B091                 xor     ecx, ecx
.text:0040B093                 test    bl, 8
.text:0040B096                 jz      short loc_40B0A3
.text:0040B098                 mov     ecx, 20h ; ' '
.text:0040B09D
.text:0040B09D loc_40B09D:                             ; CODE XREF: sub_40AF80+126↓j
.text:0040B09D                                         ; sub_40AF80+12D↓j
.text:0040B09D                 mov     [edx+eax+4], cl
.text:0040B0A1                 jmp     short loc_40B02A
.text:0040B0A3 ; ---------------------------------------------------------------------------
.text:0040B0A3
.text:0040B0A3 loc_40B0A3:                             ; CODE XREF: sub_40AF80+116↑j
.text:0040B0A3                 test    bh, 40h
.text:0040B0A6                 jz      short loc_40B09D
.text:0040B0A8                 mov     ecx, 80h ; '€'
.text:0040B0AD                 jmp     short loc_40B09D
.text:0040B0AD ; ---------------------------------------------------------------------------
.text:0040B0AF                 align 10h
.text:0040B0B0
.text:0040B0B0 loc_40B0B0:                             ; CODE XREF: sub_40AF80+24↑j
.text:0040B0B0                                         ; DATA XREF: sub_40AF80:jpt_40AFA4↑o
.text:0040B0B0                 call    _errno          ; jumptable 0040AFA4 cases 5-7
.text:0040B0B5                 mov     dword ptr [eax], 28h ; '('
.text:0040B0BB
.text:0040B0BB loc_40B0BB:                             ; CODE XREF: sub_40AF80+167↓j
.text:0040B0BB                                         ; sub_40AF80+174↓j
.text:0040B0BB                 mov     eax, 0FFFFFFFFh
.text:0040B0C0                 jmp     loc_40AFE0
.text:0040B0C5 ; ---------------------------------------------------------------------------
.text:0040B0C5
.text:0040B0C5 loc_40B0C5:                             ; CODE XREF: sub_40AF80+24↑j
.text:0040B0C5                                         ; DATA XREF: sub_40AF80:jpt_40AFA4↑o
.text:0040B0C5                 mov     ebx, [eax]      ; jumptable 0040AFA4 cases 8,9
.text:0040B0C7                 mov     [esp+1Ch+var_18], edx
.text:0040B0CB                 mov     [esp+1Ch+FileHandle], ecx
.text:0040B0CE                 mov     [esp+1Ch+var_14], ebx
.text:0040B0D2                 call    sub_40AE60
.text:0040B0D7                 jmp     loc_40AFE0
.text:0040B0DC ; ---------------------------------------------------------------------------
.text:0040B0DC
.text:0040B0DC def_40AFA4:                             ; CODE XREF: sub_40AF80+1E↑j
.text:0040B0DC                 call    _errno          ; jumptable 0040AFA4 default case
.text:0040B0E1                 mov     dword ptr [eax], 16h
.text:0040B0E7                 jmp     short loc_40B0BB
.text:0040B0E9 ; ---------------------------------------------------------------------------
.text:0040B0E9
.text:0040B0E9 loc_40B0E9:                             ; CODE XREF: sub_40AF80+11↑j
.text:0040B0E9                 call    _errno
.text:0040B0EE                 mov     dword ptr [eax], 9
.text:0040B0F4                 jmp     short loc_40B0BB
.text:0040B0F4 sub_40AF80      endp
.text:0040B0F4
.text:0040B0F4 ; ---------------------------------------------------------------------------
.text:0040B0F6                 align 10h
.text:0040B100                 sub     esp, 3Ch
.text:0040B103                 mov     edx, [esp+48h]
.text:0040B107                 mov     eax, [edx+4]
.text:0040B10A                 movzx   ecx, word ptr [edx]
.text:0040B10D                 mov     [esp+18h], eax
.text:0040B111                 mov     [esp+10h], cx
.text:0040B116                 movzx   ecx, word ptr [edx+2]
.text:0040B11A                 mov     [esp+12h], cx
.text:0040B11F                 mov     ecx, eax
.text:0040B121                 mov     eax, [edx+8]
.text:0040B124                 sar     ecx, 1Fh
.text:0040B127                 mov     [esp+1Ch], ecx
.text:0040B12B                 cdq
.text:0040B12C                 lea     ecx, [esp+10h]
.text:0040B130                 mov     [esp+24h], edx
.text:0040B134                 mov     edx, [esp+44h]
.text:0040B138                 mov     [esp+20h], eax
.text:0040B13C                 mov     [esp+8], ecx
.text:0040B140                 mov     [esp+4], edx
.text:0040B144                 mov     edx, [esp+40h]
.text:0040B148                 mov     [esp], edx
.text:0040B14B                 call    sub_40AE60
.text:0040B150                 add     esp, 3Ch
.text:0040B153                 retn
.text:0040B153 ; ---------------------------------------------------------------------------
.text:0040B154                 align 10h
.text:0040B160                 mov     edx, [esp+4]
.text:0040B164                 xor     eax, eax
.text:0040B166                 test    dl, 1
.text:0040B169                 jz      short loc_40B171
.text:0040B16B                 mov     eax, 2
.text:0040B170                 retn
.text:0040B171 ; ---------------------------------------------------------------------------
.text:0040B171
.text:0040B171 loc_40B171:                             ; CODE XREF: .text:0040B169↑j
.text:0040B171                 test    dl, 20h
.text:0040B174                 jz      short loc_40B180
.text:0040B176                 mov     eax, 8
.text:0040B17B                 retn
.text:0040B17B ; ---------------------------------------------------------------------------
.text:0040B17C                 align 10h
.text:0040B180
.text:0040B180 loc_40B180:                             ; CODE XREF: .text:0040B174↑j
.text:0040B180                 test    dl, 10h
.text:0040B183                 jz      short loc_40B190
.text:0040B185                 mov     eax, 80h ; '€'
.text:0040B18A                 retn
.text:0040B18A ; ---------------------------------------------------------------------------
.text:0040B18B                 align 10h
.text:0040B190
.text:0040B190 loc_40B190:                             ; CODE XREF: .text:0040B183↑j
.text:0040B190                 test    dl, dl
.text:0040B192                 jns     short locret_40B199
.text:0040B194                 mov     eax, 4000h
.text:0040B199
.text:0040B199 locret_40B199:                          ; CODE XREF: .text:0040B192↑j
.text:0040B199                 retn
.text:0040B199 ; ---------------------------------------------------------------------------
.text:0040B19A                 align 10h
.text:0040B1A0                 mov     edx, [esp+4]
.text:0040B1A4                 xor     eax, eax
.text:0040B1A6                 test    dl, 8
.text:0040B1A9                 jz      short loc_40B1B1
.text:0040B1AB                 mov     eax, 20h ; ' '
.text:0040B1B0                 retn
.text:0040B1B1 ; ---------------------------------------------------------------------------
.text:0040B1B1
.text:0040B1B1 loc_40B1B1:                             ; CODE XREF: .text:0040B1A9↑j
.text:0040B1B1                 test    dh, 40h
.text:0040B1B4                 jz      short locret_40B1BB
.text:0040B1B6                 mov     eax, 80h ; '€'
.text:0040B1BB
.text:0040B1BB locret_40B1BB:                          ; CODE XREF: .text:0040B1B4↑j
.text:0040B1BB                 retn
.text:0040B1BB ; ---------------------------------------------------------------------------
.text:0040B1BC                 align 10h
.text:0040B1C0
.text:0040B1C0 ; =============== S U B R O U T I N E =======================================
.text:0040B1C0
.text:0040B1C0 ; Attributes: thunk
.text:0040B1C0
.text:0040B1C0 ; int __cdecl j__flushall()
.text:0040B1C0 j__flushall     proc near               ; CODE XREF: sub_403800:loc_403A38↑p
.text:0040B1C0                                         ; sub_403800:loc_403B68↑p ...
.text:0040B1C0                 jmp     _flushall
.text:0040B1C0 j__flushall     endp
.text:0040B1C0
.text:0040B1C0 ; ---------------------------------------------------------------------------
.text:0040B1C5                 align 10h
.text:0040B1D0
.text:0040B1D0 ; =============== S U B R O U T I N E =======================================
.text:0040B1D0
.text:0040B1D0 ; Attributes: thunk
.text:0040B1D0
.text:0040B1D0 ; int __cdecl j__commit(int FileHandle)
.text:0040B1D0 j__commit       proc near               ; CODE XREF: sub_403800+146↑p
.text:0040B1D0                                         ; sub_403800+271↑p ...
.text:0040B1D0
.text:0040B1D0 FileHandle      = dword ptr  4
.text:0040B1D0
.text:0040B1D0                 jmp     _commit
.text:0040B1D0 j__commit       endp
.text:0040B1D0
.text:0040B1D0 ; ---------------------------------------------------------------------------
.text:0040B1D5                 align 10h
.text:0040B1E0
.text:0040B1E0 ; =============== S U B R O U T I N E =======================================
.text:0040B1E0
.text:0040B1E0
.text:0040B1E0 sub_40B1E0      proc near               ; CODE XREF: sub_4026E0+28D↑p
.text:0040B1E0
.text:0040B1E0 var_2C          = dword ptr -2Ch
.text:0040B1E0 var_28          = dword ptr -28h
.text:0040B1E0 var_24          = dword ptr -24h
.text:0040B1E0 var_20          = dword ptr -20h
.text:0040B1E0 var_1C          = dword ptr -1Ch
.text:0040B1E0 var_18          = dword ptr -18h
.text:0040B1E0 var_10          = dword ptr -10h
.text:0040B1E0 var_C           = dword ptr -0Ch
.text:0040B1E0 var_8           = dword ptr -8
.text:0040B1E0 var_4           = dword ptr -4
.text:0040B1E0 arg_0           = dword ptr  4
.text:0040B1E0 arg_4           = dword ptr  8
.text:0040B1E0
.text:0040B1E0                 sub     esp, 2Ch
.text:0040B1E3                 mov     eax, [esp+2Ch+arg_0]
.text:0040B1E7                 mov     [esp+2Ch+var_10], ebx
.text:0040B1EB                 mov     ebx, 0FFFFFFFFh
.text:0040B1F0                 test    eax, eax
.text:0040B1F2                 mov     [esp+2Ch+var_C], esi
.text:0040B1F6                 mov     [esp+2Ch+var_8], edi
.text:0040B1FA                 mov     [esp+2Ch+var_4], ebp
.text:0040B1FE                 jz      loc_40B2F0
.text:0040B204                 test    eax, eax
.text:0040B206                 js      loc_40B2E3
.text:0040B20C                 sub     eax, 2
.text:0040B20F                 cmp     eax, 1
.text:0040B212                 ja      loc_40B2E3
.text:0040B218                 mov     ebp, ds:dword_415214
.text:0040B21E                 mov     edi, ds:dword_415210
.text:0040B224                 mov     eax, ebp
.text:0040B226                 or      eax, edi
.text:0040B228                 jz      loc_40B2C6
.text:0040B22E
.text:0040B22E loc_40B22E:                             ; CODE XREF: sub_40B1E0+FE↓j
.text:0040B22E                 rdtsc
.text:0040B230                 mov     [esp+2Ch+var_24], edi
.text:0040B234                 mov     ebx, eax
.text:0040B236                 mov     esi, edx
.text:0040B238                 mov     [esp+2Ch+var_20], ebp
.text:0040B23C                 mov     [esp+2Ch+var_2C], eax
.text:0040B23F                 mov     [esp+2Ch+var_28], edx
.text:0040B243                 call    sub_412670
.text:0040B248                 mov     edx, [esp+2Ch+arg_4]
.text:0040B24C                 mov     [edx], eax
.text:0040B24E                 mov     [esp+2Ch+var_2C], ebx
.text:0040B251                 mov     ebx, 3B9ACA00h
.text:0040B256                 mov     [esp+2Ch+var_24], edi
.text:0040B25A                 mov     [esp+2Ch+var_20], ebp
.text:0040B25E                 mov     [esp+2Ch+var_28], esi
.text:0040B262                 call    sub_412AE0
.text:0040B267                 mov     [esp+2Ch+var_1C], eax
.text:0040B26B                 mov     eax, [esp+2Ch+var_1C]
.text:0040B26F                 mov     [esp+2Ch+var_18], edx
.text:0040B273                 mov     [esp+2Ch+var_24], edi
.text:0040B277                 mul     ebx
.text:0040B279                 mov     ebx, [esp+2Ch+var_18]
.text:0040B27D                 mov     [esp+2Ch+var_20], ebp
.text:0040B281                 imul    ebx, 3B9ACA00h
.text:0040B287                 mov     ecx, eax
.text:0040B289                 mov     [esp+2Ch+var_2C], ecx
.text:0040B28C                 lea     edx, [ebx+edx]
.text:0040B28F                 mov     [esp+2Ch+var_28], edx
.text:0040B293                 call    sub_412670
.text:0040B298                 mov     ebx, [esp+2Ch+arg_4]
.text:0040B29C                 mov     [ebx+4], eax
.text:0040B29F                 xor     ebx, ebx
.text:0040B2A1                 jmp     short loc_40B2B0
.text:0040B2A1 ; ---------------------------------------------------------------------------
.text:0040B2A3                 align 10h
.text:0040B2B0
.text:0040B2B0 loc_40B2B0:                             ; CODE XREF: sub_40B1E0+C1↑j
.text:0040B2B0                                         ; sub_40B1E0+FC↓j ...
.text:0040B2B0                 mov     eax, ebx
.text:0040B2B2                 mov     esi, [esp+2Ch+var_C]
.text:0040B2B6                 mov     ebx, [esp+2Ch+var_10]
.text:0040B2BA                 mov     edi, [esp+2Ch+var_8]
.text:0040B2BE                 mov     ebp, [esp+2Ch+var_4]
.text:0040B2C2                 add     esp, 2Ch
.text:0040B2C5                 retn
.text:0040B2C6 ; ---------------------------------------------------------------------------
.text:0040B2C6
.text:0040B2C6 loc_40B2C6:                             ; CODE XREF: sub_40B1E0+48↑j
.text:0040B2C6                 call    sub_40D460
.text:0040B2CB                 mov     ds:dword_415214, edx
.text:0040B2D1                 mov     edi, eax
.text:0040B2D3                 mov     ebp, edx
.text:0040B2D5                 mov     ds:dword_415210, eax
.text:0040B2DA                 or      edx, edi
.text:0040B2DC                 jz      short loc_40B2B0
.text:0040B2DE                 jmp     loc_40B22E
.text:0040B2E3 ; ---------------------------------------------------------------------------
.text:0040B2E3
.text:0040B2E3 loc_40B2E3:                             ; CODE XREF: sub_40B1E0+26↑j
.text:0040B2E3                                         ; sub_40B1E0+32↑j
.text:0040B2E3                 call    _errno
.text:0040B2E8                 mov     dword ptr [eax], 16h
.text:0040B2EE                 jmp     short loc_40B2B0
.text:0040B2F0 ; ---------------------------------------------------------------------------
.text:0040B2F0
.text:0040B2F0 loc_40B2F0:                             ; CODE XREF: sub_40B1E0+1E↑j
.text:0040B2F0                 mov     [esp+2Ch+var_28], 0
.text:0040B2F8                 mov     edx, [esp+2Ch+arg_4]
.text:0040B2FC                 mov     [esp+2Ch+var_2C], edx
.text:0040B2FF                 call    sub_40D4C0
.text:0040B304                 mov     ebx, eax
.text:0040B306                 jmp     short loc_40B2B0
.text:0040B306 sub_40B1E0      endp
.text:0040B306
.text:0040B306 ; ---------------------------------------------------------------------------
.text:0040B308                 align 10h
.text:0040B310                 xor     eax, eax
.text:0040B312                 retn
.text:0040B312 ; ---------------------------------------------------------------------------
.text:0040B313                 align 10h
.text:0040B320
.text:0040B320 ; =============== S U B R O U T I N E =======================================
.text:0040B320
.text:0040B320
.text:0040B320 sub_40B320      proc near               ; CODE XREF: sub_4026E0+1EB↑p
.text:0040B320                                         ; .text:0041104B↓p
.text:0040B320                 xor     eax, eax
.text:0040B322                 retn
.text:0040B322 sub_40B320      endp
.text:0040B322
.text:0040B322 ; ---------------------------------------------------------------------------
.text:0040B323                 align 10h
.text:0040B330
.text:0040B330 ; =============== S U B R O U T I N E =======================================
.text:0040B330
.text:0040B330
.text:0040B330 sub_40B330      proc near               ; CODE XREF: sub_4026E0+15B↑p
.text:0040B330                                         ; .text:00411024↓p
.text:0040B330                 xor     eax, eax
.text:0040B332                 retn
.text:0040B332 sub_40B330      endp
.text:0040B332
.text:0040B332 ; ---------------------------------------------------------------------------
.text:0040B333                 align 10h
.text:0040B340
.text:0040B340 ; =============== S U B R O U T I N E =======================================
.text:0040B340
.text:0040B340
.text:0040B340 sub_40B340      proc near               ; CODE XREF: sub_4026E0+CB↑p
.text:0040B340                 xor     eax, eax
.text:0040B342                 retn
.text:0040B342 sub_40B340      endp
.text:0040B342
.text:0040B342 ; ---------------------------------------------------------------------------
.text:0040B343                 align 10h
.text:0040B350 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:0040B350                                         ; DATA XREF: .data:off_414064↓o
.text:0040B364 ; const CHAR LibFileName[]
.text:0040B364 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_40B390+11↓o
.text:0040B364                                         ; sub_40B500+C↓o ...
.text:0040B371 ; const CHAR ProcName[]
.text:0040B371 ProcName        db 'GetFileAttributesExA',0
.text:0040B371                                         ; DATA XREF: sub_40B390+28↓o
.text:0040B386                 align 10h
.text:0040B390
.text:0040B390 ; =============== S U B R O U T I N E =======================================
.text:0040B390
.text:0040B390
.text:0040B390 ; int __cdecl sub_40B390(LPCSTR lpFileName, int)
.text:0040B390 sub_40B390      proc near               ; CODE XREF: .text:0040C534↓p
.text:0040B390                                         ; sub_40C930+37↓p
.text:0040B390
.text:0040B390 lpModuleName    = dword ptr -18Ch
.text:0040B390 lpProcName      = dword ptr -188h
.text:0040B390 var_184         = dword ptr -184h
.text:0040B390 var_170         = dword ptr -170h
.text:0040B390 var_164         = dword ptr -164h
.text:0040B390 hModule         = dword ptr -160h
.text:0040B390 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040B390 lpFileName      = dword ptr  4
.text:0040B390 arg_4           = dword ptr  8
.text:0040B390
.text:0040B390                 push    ebp
.text:0040B391                 push    edi
.text:0040B392                 push    esi
.text:0040B393                 push    ebx
.text:0040B394                 sub     esp, 17Ch
.text:0040B39A                 mov     ebx, [esp+18Ch+arg_4]
.text:0040B3A1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:0040B3A8                 call    GetModuleHandleA
.text:0040B3AD                 sub     esp, 4
.text:0040B3B0                 mov     [esp+18Ch+hModule], eax
.text:0040B3B4                 mov     edx, [esp+18Ch+hModule]
.text:0040B3B8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:0040B3C0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:0040B3C3                 call    GetProcAddress
.text:0040B3C8                 sub     esp, 8
.text:0040B3CB                 mov     ebp, eax
.text:0040B3CD                 mov     eax, [esp+18Ch+lpFileName]
.text:0040B3D4                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:0040B3D7                 call    GetFileAttributesA
.text:0040B3DC                 sub     esp, 4
.text:0040B3DF                 mov     [esp+18Ch+var_164], eax
.text:0040B3E3                 xor     eax, eax
.text:0040B3E5                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0040B3EA                 jz      short loc_40B441
.text:0040B3EC                 cld
.text:0040B3ED                 mov     ecx, 50h ; 'P'
.text:0040B3F2                 lea     esi, [esp+18Ch+FindFileData]
.text:0040B3F6                 mov     edi, esi
.text:0040B3F8                 test    ebp, ebp
.text:0040B3FA                 rep stosd
.text:0040B3FC                 mov     [esp+18Ch+var_170], 0
.text:0040B404                 jz      short loc_40B425
.text:0040B406                 mov     [esp+18Ch+var_184], ebx
.text:0040B40A                 mov     ecx, [esp+18Ch+lpFileName]
.text:0040B411                 mov     [esp+18Ch+lpProcName], 0
.text:0040B419                 mov     [esp+18Ch+lpModuleName], ecx
.text:0040B41C                 call    ebp
.text:0040B41E                 sub     esp, 0Ch
.text:0040B421                 mov     [esp+18Ch+var_170], eax
.text:0040B425
.text:0040B425 loc_40B425:                             ; CODE XREF: sub_40B390+74↑j
.text:0040B425                 mov     eax, [esp+18Ch+var_170]
.text:0040B429                 test    eax, eax
.text:0040B42B                 jz      short loc_40B450
.text:0040B42D
.text:0040B42D loc_40B42D:                             ; CODE XREF: sub_40B390+131↓j
.text:0040B42D                                         ; sub_40B390+14B↓j
.text:0040B42D                 mov     ebx, [esp+18Ch+hModule]
.text:0040B431                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:0040B434                 call    FreeLibrary
.text:0040B439                 sub     esp, 4
.text:0040B43C                 mov     eax, 1
.text:0040B441
.text:0040B441 loc_40B441:                             ; CODE XREF: sub_40B390+5A↑j
.text:0040B441                 add     esp, 17Ch
.text:0040B447                 pop     ebx
.text:0040B448                 pop     esi
.text:0040B449                 pop     edi
.text:0040B44A                 pop     ebp
.text:0040B44B                 retn
.text:0040B44B ; ---------------------------------------------------------------------------
.text:0040B44C                 align 10h
.text:0040B450
.text:0040B450 loc_40B450:                             ; CODE XREF: sub_40B390+9B↑j
.text:0040B450                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:0040B454                 mov     edx, [esp+18Ch+lpFileName]
.text:0040B45B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:0040B45E                 call    FindFirstFileA
.text:0040B463                 sub     esp, 8
.text:0040B466                 xor     ecx, ecx
.text:0040B468                 cmp     eax, 0FFFFFFFFh
.text:0040B46B                 setnz   cl
.text:0040B46E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:0040B472                 mov     [ebx], edi
.text:0040B474                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:0040B478                 mov     [esp+18Ch+var_170], ecx
.text:0040B47C                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:0040B480                 mov     [ebx+8], esi
.text:0040B483                 mov     [ebx+4], ecx
.text:0040B486                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:0040B48A                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:0040B48E                 mov     [ebx+0Ch], ebp
.text:0040B491                 mov     [ebx+10h], edi
.text:0040B494                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:0040B498                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:0040B49C                 mov     [ebx+18h], esi
.text:0040B49F                 mov     [ebx+14h], ecx
.text:0040B4A2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:0040B4A6                 mov     [ebx+1Ch], ebp
.text:0040B4A9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:0040B4AD                 mov     [ebx+20h], edi
.text:0040B4B0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:0040B4B3                 call    FindClose
.text:0040B4B8                 sub     esp, 4
.text:0040B4BB                 mov     esi, [esp+18Ch+var_170]
.text:0040B4BF                 test    esi, esi
.text:0040B4C1                 jnz     loc_40B42D
.text:0040B4C7                 cld
.text:0040B4C8                 mov     eax, [esp+18Ch+var_170]
.text:0040B4CC                 mov     ecx, 9
.text:0040B4D1                 mov     edi, ebx
.text:0040B4D3                 rep stosd
.text:0040B4D5                 mov     ebp, [esp+18Ch+var_164]
.text:0040B4D9                 mov     [ebx], ebp
.text:0040B4DB                 jmp     loc_40B42D
.text:0040B4DB sub_40B390      endp
.text:0040B4DB
.text:0040B4DB ; ---------------------------------------------------------------------------
.text:0040B4E0 ; const CHAR aFindfirstfilee[]
.text:0040B4E0 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_40B500+23↓o
.text:0040B4F1 ; const char Source[]
.text:0040B4F1 Source          db '\*',0               ; DATA XREF: sub_40B500:loc_40B58D↓o
.text:0040B4F4                 align 10h
.text:0040B500
.text:0040B500 ; =============== S U B R O U T I N E =======================================
.text:0040B500
.text:0040B500
.text:0040B500 ; int __cdecl sub_40B500(char *Str)
.text:0040B500 sub_40B500      proc near               ; CODE XREF: .text:0040C633↓p
.text:0040B500                                         ; sub_40C930+3FA↓p ...
.text:0040B500
.text:0040B500 lpLibFileName   = dword ptr -18Ch
.text:0040B500 lpProcName      = dword ptr -188h
.text:0040B500 var_184         = dword ptr -184h
.text:0040B500 var_180         = dword ptr -180h
.text:0040B500 var_17C         = dword ptr -17Ch
.text:0040B500 var_178         = dword ptr -178h
.text:0040B500 var_164         = dword ptr -164h
.text:0040B500 hModule         = dword ptr -160h
.text:0040B500 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:0040B500 Str             = dword ptr  4
.text:0040B500
.text:0040B500                 push    ebp
.text:0040B501                 push    edi
.text:0040B502                 xor     edi, edi
.text:0040B504                 push    esi
.text:0040B505                 push    ebx
.text:0040B506                 sub     esp, 17Ch
.text:0040B50C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:0040B513                 call    LoadLibraryA
.text:0040B518                 sub     esp, 4
.text:0040B51B                 mov     [esp+18Ch+hModule], eax
.text:0040B51F                 mov     ecx, [esp+18Ch+hModule]
.text:0040B523                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0040B52B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0040B52E                 call    GetProcAddress
.text:0040B533                 sub     esp, 8
.text:0040B536                 mov     edx, [esp+18Ch+Str]
.text:0040B53D                 mov     [esp+18Ch+var_164], eax
.text:0040B541                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:0040B544                 call    strlen
.text:0040B549                 lea     edx, [eax+5]
.text:0040B54C                 mov     ebx, eax
.text:0040B54E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:0040B551                 call    malloc
.text:0040B556                 mov     esi, eax
.text:0040B558                 test    esi, esi
.text:0040B55A                 mov     eax, 1
.text:0040B55F                 jz      loc_40B63D
.text:0040B565                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040B568                 mov     ebp, [esp+18Ch+Str]
.text:0040B56F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:0040B573                 call    strcpy
.text:0040B578                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040B57D                 cmp     al, 2Fh ; '/'
.text:0040B57F                 jz      loc_40B66B
.text:0040B585                 cmp     al, 5Ch ; '\'
.text:0040B587                 jz      loc_40B66B
.text:0040B58D
.text:0040B58D loc_40B58D:                             ; CODE XREF: sub_40B500+170↓j
.text:0040B58D                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:0040B595                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:0040B598                 call    strcat
.text:0040B59D                 mov     eax, [esp+18Ch+var_164]
.text:0040B5A1                 test    eax, eax
.text:0040B5A3                 jz      loc_40B665
.text:0040B5A9                 mov     [esp+18Ch+var_178], 0
.text:0040B5B1                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040B5B5                 mov     [esp+18Ch+var_17C], 0
.text:0040B5BD                 mov     [esp+18Ch+var_180], 1
.text:0040B5C5                 mov     [esp+18Ch+var_184], ebp
.text:0040B5C9                 mov     [esp+18Ch+lpProcName], 0
.text:0040B5D1                 mov     [esp+18Ch+lpLibFileName], esi
.text:0040B5D4                 call    [esp+18Ch+var_164]
.text:0040B5D8                 sub     esp, 18h
.text:0040B5DB                 mov     ebx, eax
.text:0040B5DD                 cmp     eax, 0FFFFFFFFh
.text:0040B5E0                 jz      short loc_40B648
.text:0040B5E2                 lea     esi, [esi+0]
.text:0040B5E9                 lea     edi, [edi+0]
.text:0040B5F0
.text:0040B5F0 loc_40B5F0:                             ; CODE XREF: sub_40B500+109↓j
.text:0040B5F0                                         ; sub_40B500+161↓j
.text:0040B5F0                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:0040B5F5                 jz      short loc_40B5F8
.text:0040B5F7                 inc     edi
.text:0040B5F8
.text:0040B5F8 loc_40B5F8:                             ; CODE XREF: sub_40B500+F5↑j
.text:0040B5F8                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040B5FC                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040B5FF                 call    FindNextFileA
.text:0040B604                 sub     esp, 8
.text:0040B607                 test    eax, eax
.text:0040B609                 jnz     short loc_40B5F0
.text:0040B60B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:0040B60E                 call    FindClose
.text:0040B613                 sub     esp, 4
.text:0040B616                 mov     esi, [esp+18Ch+hModule]
.text:0040B61A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:0040B61D                 call    FreeLibrary
.text:0040B622                 sub     esp, 4
.text:0040B625                 mov     ebx, [esp+18Ch+Str]
.text:0040B62C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:0040B62F                 call    sub_40DB10
.text:0040B634                 test    eax, eax
.text:0040B636                 jz      short loc_40B63B
.text:0040B638                 add     edi, 2
.text:0040B63B
.text:0040B63B loc_40B63B:                             ; CODE XREF: sub_40B500+136↑j
.text:0040B63B                 mov     eax, edi
.text:0040B63D
.text:0040B63D loc_40B63D:                             ; CODE XREF: sub_40B500+5F↑j
.text:0040B63D                                         ; sub_40B500+163↓j
.text:0040B63D                 add     esp, 17Ch
.text:0040B643                 pop     ebx
.text:0040B644                 pop     esi
.text:0040B645                 pop     edi
.text:0040B646                 pop     ebp
.text:0040B647                 retn
.text:0040B648 ; ---------------------------------------------------------------------------
.text:0040B648
.text:0040B648 loc_40B648:                             ; CODE XREF: sub_40B500+E0↑j
.text:0040B648                                         ; sub_40B500+169↓j
.text:0040B648                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:0040B64C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:0040B64F                 call    FindFirstFileA
.text:0040B654                 mov     ebx, eax
.text:0040B656                 sub     esp, 8
.text:0040B659                 cmp     ebx, 0FFFFFFFFh
.text:0040B65C                 mov     eax, 2
.text:0040B661                 jnz     short loc_40B5F0
.text:0040B663                 jmp     short loc_40B63D
.text:0040B665 ; ---------------------------------------------------------------------------
.text:0040B665
.text:0040B665 loc_40B665:                             ; CODE XREF: sub_40B500+A3↑j
.text:0040B665                 lea     ebp, [esp+18Ch+FindFileData]
.text:0040B669                 jmp     short loc_40B648
.text:0040B66B ; ---------------------------------------------------------------------------
.text:0040B66B
.text:0040B66B loc_40B66B:                             ; CODE XREF: sub_40B500+7F↑j
.text:0040B66B                                         ; sub_40B500+87↑j
.text:0040B66B                 mov     byte ptr [ebx+esi-1], 0
.text:0040B670                 jmp     loc_40B58D
.text:0040B670 sub_40B500      endp
.text:0040B670
.text:0040B670 ; ---------------------------------------------------------------------------
.text:0040B675                 align 10h
.text:0040B680
.text:0040B680 ; =============== S U B R O U T I N E =======================================
.text:0040B680
.text:0040B680
.text:0040B680 ; int __cdecl sub_40B680(HANDLE hNamedPipe, int)
.text:0040B680 sub_40B680      proc near               ; CODE XREF: sub_40AAF0+2307↓p
.text:0040B680                                         ; sub_40F9B0+52↓j
.text:0040B680
.text:0040B680 hFile           = dword ptr -0ECh
.text:0040B680 lpFileInformation= dword ptr -0E8h
.text:0040B680 nBufferSize     = dword ptr -0E4h
.text:0040B680 lpBytesRead     = dword ptr -0E0h
.text:0040B680 lpTotalBytesAvail= dword ptr -0DCh
.text:0040B680 lpBytesLeftThisMessage= dword ptr -0D8h
.text:0040B680 var_C4          = dword ptr -0C4h
.text:0040B680 var_C0          = dword ptr -0C0h
.text:0040B680 var_BC          = dword ptr -0BCh
.text:0040B680 var_B8          = dword ptr -0B8h
.text:0040B680 var_B4          = dword ptr -0B4h
.text:0040B680 var_B0          = dword ptr -0B0h
.text:0040B680 var_AC          = dword ptr -0ACh
.text:0040B680 var_A8          = dword ptr -0A8h
.text:0040B680 TotalBytesAvail = dword ptr -0A0h
.text:0040B680 var_9C          = dword ptr -9Ch
.text:0040B680 var_98          = dword ptr -98h
.text:0040B680 var_94          = dword ptr -94h
.text:0040B680 var_90          = dword ptr -90h
.text:0040B680 var_8C          = dword ptr -8Ch
.text:0040B680 var_88          = dword ptr -88h
.text:0040B680 var_84          = dword ptr -84h
.text:0040B680 var_80          = dword ptr -80h
.text:0040B680 var_7C          = dword ptr -7Ch
.text:0040B680 var_78          = dword ptr -78h
.text:0040B680 var_74          = dword ptr -74h
.text:0040B680 var_70          = dword ptr -70h
.text:0040B680 var_6C          = dword ptr -6Ch
.text:0040B680 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:0040B680 hNamedPipe      = dword ptr  4
.text:0040B680 arg_4           = dword ptr  8
.text:0040B680
.text:0040B680                 push    ebp
.text:0040B681                 mov     eax, 0FFFFFFFFh
.text:0040B686                 push    edi
.text:0040B687                 push    esi
.text:0040B688                 push    ebx
.text:0040B689                 sub     esp, 0DCh
.text:0040B68F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:0040B696                 mov     ebp, [esp+0ECh+arg_4]
.text:0040B69D                 cmp     esi, 0FFFFFFFFh
.text:0040B6A0                 jz      loc_40BA21
.text:0040B6A6                 cld
.text:0040B6A7                 xor     eax, eax
.text:0040B6A9                 lea     ebx, [esp+0ECh+FileInformation]
.text:0040B6B0                 mov     ecx, 0Dh
.text:0040B6B5                 mov     edi, ebx
.text:0040B6B7                 rep stosd
.text:0040B6B9                 mov     dword ptr [ebp+18h], 1
.text:0040B6C0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040B6C3                 call    GetFileType
.text:0040B6C8                 sub     esp, 4
.text:0040B6CB                 xor     edx, edx
.text:0040B6CD                 cmp     eax, 2
.text:0040B6D0                 jz      loc_40BB00
.text:0040B6D6                 cmp     eax, 3
.text:0040B6D9                 jz      loc_40BAF0
.text:0040B6DF
.text:0040B6DF loc_40B6DF:                             ; CODE XREF: sub_40B680+475↓j
.text:0040B6DF                                         ; sub_40B680+485↓j
.text:0040B6DF                 or      [ebp+0], edx
.text:0040B6E2                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:0040B6E6                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040B6E9                 call    GetFileInformationByHandle
.text:0040B6EE                 sub     esp, 8
.text:0040B6F1                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040B6F8                 test    ecx, ecx
.text:0040B6FA                 jnz     short loc_40B730
.text:0040B6FC                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040B703                 test    edx, edx
.text:0040B705                 jnz     short loc_40B730
.text:0040B707                 mov     edx, [ebp+0]
.text:0040B70A                 and     edx, 0F000h
.text:0040B710                 cmp     edx, 1000h
.text:0040B716                 jz      loc_40BA86
.text:0040B71C
.text:0040B71C loc_40B71C:                             ; CODE XREF: sub_40B680+459↓j
.text:0040B71C                                         ; sub_40B680+465↓j
.text:0040B71C                 test    ecx, ecx
.text:0040B71E                 jnz     short loc_40B730
.text:0040B720                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040B727                 test    edx, edx
.text:0040B729                 jz      loc_40BA64
.text:0040B72F                 nop
.text:0040B730
.text:0040B730 loc_40B730:                             ; CODE XREF: sub_40B680+7A↑j
.text:0040B730                                         ; sub_40B680+85↑j ...
.text:0040B730                 cld
.text:0040B731                 mov     esi, ebx
.text:0040B733                 mov     dword ptr [ebp+14h], 0
.text:0040B73A                 lea     edi, [esp+0ECh+var_9C]
.text:0040B73E                 mov     ecx, 0Dh
.text:0040B743                 rep movsd
.text:0040B745                 xor     ebx, ebx
.text:0040B747                 xor     edi, edi
.text:0040B749                 mov     edx, [esp+0ECh+var_6C]
.text:0040B750                 mov     esi, [esp+0ECh+var_70]
.text:0040B754                 or      edx, ebx
.text:0040B756                 mov     ebx, [esp+0ECh+var_9C]
.text:0040B75A                 mov     [ebp+8], edx
.text:0040B75D                 or      edi, esi
.text:0040B75F                 xor     edx, edx
.text:0040B761                 mov     [ebp+0Ch], edi
.text:0040B764                 test    bl, 10h
.text:0040B767                 mov     esi, [esp+0ECh+var_80]
.text:0040B76B                 setz    dl
.text:0040B76E                 mov     [ebp+10h], esi
.text:0040B771                 dec     edx
.text:0040B772                 and     edx, 0FFFFC000h
.text:0040B778                 add     edx, 8000h
.text:0040B77E                 or      edx, 124h
.text:0040B784                 test    bl, 1
.text:0040B787                 movzx   eax, dx
.text:0040B78A                 jnz     short loc_40B791
.text:0040B78C                 or      eax, 92h
.text:0040B791
.text:0040B791 loc_40B791:                             ; CODE XREF: sub_40B680+10A↑j
.text:0040B791                 or      [ebp+0], eax
.text:0040B794                 xor     edx, edx
.text:0040B796                 mov     ebx, [esp+0ECh+var_7C]
.text:0040B79A                 mov     ecx, [esp+0ECh+var_78]
.text:0040B79E                 mov     eax, edx
.text:0040B7A0                 xor     esi, esi
.text:0040B7A2                 mov     edx, [esp+0ECh+var_8C]
.text:0040B7A6                 mov     edi, ebx
.text:0040B7A8                 or      eax, edi
.text:0040B7AA                 mov     [esp+0ECh+var_A8], eax
.text:0040B7AE                 mov     ebx, ecx
.text:0040B7B0                 mov     edi, [esp+0ECh+var_74]
.text:0040B7B4                 or      ebx, esi
.text:0040B7B6                 mov     esi, [esp+0ECh+var_A8]
.text:0040B7BA                 mov     [esp+0ECh+var_AC], ebx
.text:0040B7BE                 xor     ebx, ebx
.text:0040B7C0                 mov     ecx, [esp+0ECh+var_AC]
.text:0040B7C4                 mov     [ebp+34h], esi
.text:0040B7C7                 mov     esi, [esp+0ECh+var_90]
.text:0040B7CB                 mov     [ebp+18h], edi
.text:0040B7CE                 xor     edi, edi
.text:0040B7D0                 or      esi, ebx
.text:0040B7D2                 mov     [ebp+30h], ecx
.text:0040B7D5                 or      edi, edx
.text:0040B7D7                 mov     edx, esi
.text:0040B7D9                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040B7E1                 sub     edx, 0D53E8000h
.text:0040B7E7                 mov     ebx, edi
.text:0040B7E9                 sbb     ebx, 19DB1DEh
.text:0040B7EF                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040B7F3                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040B7FB                 mov     [esp+0ECh+hFile], edx
.text:0040B7FE                 call    sub_412670
.text:0040B803                 mov     ecx, eax
.text:0040B805                 shr     eax, 1Fh
.text:0040B808                 dec     eax
.text:0040B809                 and     ecx, eax
.text:0040B80B                 mov     [ebp+38h], ecx
.text:0040B80E                 mov     [esp+0ECh+hFile], esi
.text:0040B811                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040B815                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040B81D                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040B825                 call    sub_412AE0
.text:0040B82A                 lea     ebx, [eax+eax*4]
.text:0040B82D                 xor     ecx, ecx
.text:0040B82F                 lea     esi, [ebx+ebx*4]
.text:0040B832                 shl     esi, 2
.text:0040B835                 mov     edi, esi
.text:0040B837                 shr     edi, 1Fh
.text:0040B83A                 dec     edi
.text:0040B83B                 and     edi, esi
.text:0040B83D                 mov     [ebp+3Ch], edi
.text:0040B840                 mov     esi, [esp+0ECh+var_98]
.text:0040B844                 xor     edi, edi
.text:0040B846                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040B84E                 mov     edx, [esp+0ECh+var_94]
.text:0040B852                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040B85A                 or      esi, ecx
.text:0040B85C                 or      edi, edx
.text:0040B85E                 mov     edx, esi
.text:0040B860                 mov     ecx, edi
.text:0040B862                 sub     edx, 0D53E8000h
.text:0040B868                 sbb     ecx, 19DB1DEh
.text:0040B86E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040B872                 mov     [esp+0ECh+hFile], edx
.text:0040B875                 call    sub_412670
.text:0040B87A                 mov     ebx, eax
.text:0040B87C                 shr     eax, 1Fh
.text:0040B87F                 dec     eax
.text:0040B880                 and     ebx, eax
.text:0040B882                 mov     [ebp+48h], ebx
.text:0040B885                 xor     ebx, ebx
.text:0040B887                 mov     [esp+0ECh+hFile], esi
.text:0040B88A                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040B88E                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040B896                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040B89E                 call    sub_412AE0
.text:0040B8A3                 lea     ecx, [eax+eax*4]
.text:0040B8A6                 lea     esi, [ecx+ecx*4]
.text:0040B8A9                 shl     esi, 2
.text:0040B8AC                 mov     edi, esi
.text:0040B8AE                 shr     edi, 1Fh
.text:0040B8B1                 dec     edi
.text:0040B8B2                 and     edi, esi
.text:0040B8B4                 mov     [ebp+4Ch], edi
.text:0040B8B7                 mov     esi, [esp+0ECh+var_88]
.text:0040B8BB                 xor     edi, edi
.text:0040B8BD                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040B8C5                 mov     edx, [esp+0ECh+var_84]
.text:0040B8C9                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040B8D1                 or      esi, ebx
.text:0040B8D3                 or      edi, edx
.text:0040B8D5                 mov     edx, esi
.text:0040B8D7                 mov     ebx, edi
.text:0040B8D9                 sub     edx, 0D53E8000h
.text:0040B8DF                 sbb     ebx, 19DB1DEh
.text:0040B8E5                 mov     [esp+0ECh+lpFileInformation], ebx
.text:0040B8E9                 mov     [esp+0ECh+hFile], edx
.text:0040B8EC                 call    sub_412670
.text:0040B8F1                 mov     ecx, eax
.text:0040B8F3                 shr     eax, 1Fh
.text:0040B8F6                 dec     eax
.text:0040B8F7                 and     ecx, eax
.text:0040B8F9                 mov     [ebp+40h], ecx
.text:0040B8FC                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040B900                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040B908                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040B910                 mov     [esp+0ECh+hFile], esi
.text:0040B913                 call    sub_412AE0
.text:0040B918                 mov     dword ptr [ebp+50h], 200h
.text:0040B91F                 lea     ebx, [eax+eax*4]
.text:0040B922                 mov     edi, [esp+0ECh+var_A8]
.text:0040B926                 lea     edx, [ebx+ebx*4]
.text:0040B929                 mov     eax, [esp+0ECh+var_AC]
.text:0040B92D                 shl     edx, 2
.text:0040B930                 mov     ecx, edx
.text:0040B932                 shr     ecx, 1Fh
.text:0040B935                 dec     ecx
.text:0040B936                 and     ecx, edx
.text:0040B938                 test    edi, edi
.text:0040B93A                 mov     edx, [esp+0ECh+var_A8]
.text:0040B93E                 mov     [ebp+44h], ecx
.text:0040B941                 js      loc_40BA57
.text:0040B947
.text:0040B947 loc_40B947:                             ; CODE XREF: sub_40B680+3DF↓j
.text:0040B947                 mov     edi, [esp+0ECh+var_AC]
.text:0040B94B                 xor     esi, esi
.text:0040B94D                 mov     ecx, eax
.text:0040B94F                 shrd    ecx, edx, 9
.text:0040B953                 mov     ebx, edx
.text:0040B955                 mov     eax, esi
.text:0040B957                 and     edi, 1FFh
.text:0040B95D                 sar     ebx, 9
.text:0040B960                 or      eax, edi
.text:0040B962                 jz      short loc_40B96A
.text:0040B964                 add     ecx, 1
.text:0040B967                 adc     ebx, 0
.text:0040B96A
.text:0040B96A loc_40B96A:                             ; CODE XREF: sub_40B680+2E2↑j
.text:0040B96A                 mov     [ebp+5Ch], ebx
.text:0040B96D                 mov     esi, dword_414060
.text:0040B973                 xor     edi, edi
.text:0040B975                 mov     [ebp+58h], ecx
.text:0040B978                 mov     ebx, dword_414060
.text:0040B97E                 mov     ecx, [esp+0ECh+var_A8]
.text:0040B982                 mov     edx, [esp+0ECh+var_AC]
.text:0040B986                 mov     [ebp+50h], ebx
.text:0040B989                 shr     ebx, 9
.text:0040B98C                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040B990                 mov     [esp+0ECh+lpFileInformation], ecx
.text:0040B994                 mov     [esp+0ECh+nBufferSize], esi
.text:0040B998                 mov     [esp+0ECh+hFile], edx
.text:0040B99B                 call    sub_412670
.text:0040B9A0                 mov     [esp+0ECh+lpBytesRead], edi
.text:0040B9A4                 mov     ecx, [esp+0ECh+var_AC]
.text:0040B9A8                 mov     edi, [esp+0ECh+var_A8]
.text:0040B9AC                 mov     [esp+0ECh+var_BC], ebx
.text:0040B9B0                 mov     [esp+0ECh+var_B4], eax
.text:0040B9B4                 mov     [esp+0ECh+var_B0], edx
.text:0040B9B8                 mov     [esp+0ECh+var_B8], 0
.text:0040B9C0                 mov     [esp+0ECh+nBufferSize], esi
.text:0040B9C4                 mov     [esp+0ECh+hFile], ecx
.text:0040B9C7                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040B9CB                 call    sub_412AE0
.text:0040B9D0                 mov     ebx, edx
.text:0040B9D2                 or      ebx, eax
.text:0040B9D4                 jz      short loc_40BA30
.text:0040B9D6                 mov     edi, [esp+0ECh+var_B4]
.text:0040B9DA                 mov     esi, [esp+0ECh+var_B0]
.text:0040B9DE                 mov     eax, [esp+0ECh+var_BC]
.text:0040B9E2                 mov     [esp+0ECh+var_C4], edi
.text:0040B9E6                 mov     ecx, [esp+0ECh+var_B8]
.text:0040B9EA                 add     [esp+0ECh+var_C4], 1
.text:0040B9EF                 mov     [esp+0ECh+var_C0], esi
.text:0040B9F3                 adc     [esp+0ECh+var_C0], 0
.text:0040B9F8                 mul     [esp+0ECh+var_C4]
.text:0040B9FC                 mov     edi, [esp+0ECh+var_C0]
.text:0040BA00                 mov     ebx, edx
.text:0040BA02                 mov     edx, [esp+0ECh+var_C4]
.text:0040BA06                 mov     esi, eax
.text:0040BA08                 mov     eax, ebx
.text:0040BA0A                 imul    ecx, edx
.text:0040BA0D                 mov     edx, [esp+0ECh+var_BC]
.text:0040BA11                 imul    edx, edi
.text:0040BA14                 add     eax, ecx
.text:0040BA16                 lea     edi, [edx+eax]
.text:0040BA19
.text:0040BA19 loc_40BA19:                             ; CODE XREF: sub_40B680+3D5↓j
.text:0040BA19                 mov     [ebp+58h], esi
.text:0040BA1C                 xor     eax, eax
.text:0040BA1E                 mov     [ebp+5Ch], edi
.text:0040BA21
.text:0040BA21 loc_40BA21:                             ; CODE XREF: sub_40B680+20↑j
.text:0040BA21                 add     esp, 0DCh
.text:0040BA27                 pop     ebx
.text:0040BA28                 pop     esi
.text:0040BA29                 pop     edi
.text:0040BA2A                 pop     ebp
.text:0040BA2B                 retn
.text:0040BA2B ; ---------------------------------------------------------------------------
.text:0040BA2C                 align 10h
.text:0040BA30
.text:0040BA30 loc_40BA30:                             ; CODE XREF: sub_40B680+354↑j
.text:0040BA30                 mov     eax, [esp+0ECh+var_B4]
.text:0040BA34                 mov     edi, [esp+0ECh+var_B8]
.text:0040BA38                 mov     ebx, [esp+0ECh+var_B4]
.text:0040BA3C                 mul     [esp+0ECh+var_BC]
.text:0040BA40                 mov     ecx, [esp+0ECh+var_BC]
.text:0040BA44                 imul    ebx, edi
.text:0040BA47                 mov     esi, eax
.text:0040BA49                 mov     eax, [esp+0ECh+var_B0]
.text:0040BA4D                 add     edx, ebx
.text:0040BA4F                 imul    ecx, eax
.text:0040BA52                 lea     edi, [ecx+edx]
.text:0040BA55                 jmp     short loc_40BA19
.text:0040BA57 ; ---------------------------------------------------------------------------
.text:0040BA57
.text:0040BA57 loc_40BA57:                             ; CODE XREF: sub_40B680+2C1↑j
.text:0040BA57                 add     eax, 1FFh
.text:0040BA5C                 adc     edx, 0
.text:0040BA5F                 jmp     loc_40B947
.text:0040BA64 ; ---------------------------------------------------------------------------
.text:0040BA64
.text:0040BA64 loc_40BA64:                             ; CODE XREF: sub_40B680+A9↑j
.text:0040BA64                 mov     [esp+0ECh+hFile], esi ; hFile
.text:0040BA67                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0040BA6E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:0040BA72                 call    GetFileSize
.text:0040BA77                 sub     esp, 8
.text:0040BA7A                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:0040BA81                 jmp     loc_40B730
.text:0040BA86 ; ---------------------------------------------------------------------------
.text:0040BA86
.text:0040BA86 loc_40BA86:                             ; CODE XREF: sub_40B680+96↑j
.text:0040BA86                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:0040BA8E                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040BA92                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:0040BA9A                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:0040BA9E                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:0040BAA6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:0040BAAE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:0040BAB6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:0040BAB9                 call    PeekNamedPipe
.text:0040BABE                 sub     esp, 18h
.text:0040BAC1                 test    eax, eax
.text:0040BAC3                 jz      short loc_40BADE
.text:0040BAC5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:0040BAC9                 xor     eax, eax
.text:0040BACB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:0040BAD2                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:0040BAD9                 jmp     loc_40B71C
.text:0040BADE ; ---------------------------------------------------------------------------
.text:0040BADE
.text:0040BADE loc_40BADE:                             ; CODE XREF: sub_40B680+443↑j
.text:0040BADE                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:0040BAE5                 jmp     loc_40B71C
.text:0040BAE5 ; ---------------------------------------------------------------------------
.text:0040BAEA                 align 10h
.text:0040BAF0
.text:0040BAF0 loc_40BAF0:                             ; CODE XREF: sub_40B680+59↑j
.text:0040BAF0                 mov     edx, 1000h
.text:0040BAF5                 jmp     loc_40B6DF
.text:0040BAF5 ; ---------------------------------------------------------------------------
.text:0040BAFA                 align 10h
.text:0040BB00
.text:0040BB00 loc_40BB00:                             ; CODE XREF: sub_40B680+50↑j
.text:0040BB00                 mov     edx, 2000h
.text:0040BB05                 jmp     loc_40B6DF
.text:0040BB05 sub_40B680      endp
.text:0040BB05
.text:0040BB05 ; ---------------------------------------------------------------------------
.text:0040BB0A aLnk            db '.lnk',0             ; DATA XREF: sub_40BB50+E0↓o
.text:0040BB0A                                         ; .text:0040C1FA↓o ...
.text:0040BB0F ; const CHAR aKernel32[]
.text:0040BB0F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_40BB50+12D↓o
.text:0040BB0F                                         ; .text:0040C8AB↓o
.text:0040BB18 ; const CHAR aGetcompressedf[]
.text:0040BB18 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:0040BB18                                         ; DATA XREF: sub_40BB50+13E↓o
.text:0040BB18                                         ; .text:0040C8BC↓o
.text:0040BB2F ; const CHAR aGetbinarytypea[]
.text:0040BB2F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_40BB50+333↓o
.text:0040BB2F                                         ; .text:0040C256↓o ...
.text:0040BB3E ; const char VarName[]
.text:0040BB3E VarName         db 'PATHEXT',0          ; DATA XREF: sub_40BB50:loc_40BF37↓o
.text:0040BB3E                                         ; .text:loc_40C300↓o ...
.text:0040BB46                 align 10h
.text:0040BB50
.text:0040BB50 ; =============== S U B R O U T I N E =======================================
.text:0040BB50
.text:0040BB50
.text:0040BB50 ; int __cdecl sub_40BB50(char *String1, int)
.text:0040BB50 sub_40BB50      proc near               ; CODE XREF: sub_40C930+3CD↓p
.text:0040BB50                                         ; sub_40AAF0+2325↓p
.text:0040BB50
.text:0040BB50 Str             = dword ptr -6Ch
.text:0040BB50 lpProcName      = dword ptr -68h
.text:0040BB50 var_64          = dword ptr -64h
.text:0040BB50 var_60          = dword ptr -60h
.text:0040BB50 var_5C          = dword ptr -5Ch
.text:0040BB50 var_4C          = dword ptr -4Ch
.text:0040BB50 var_48          = dword ptr -48h
.text:0040BB50 var_44          = dword ptr -44h
.text:0040BB50 var_40          = dword ptr -40h
.text:0040BB50 var_3C          = dword ptr -3Ch
.text:0040BB50 var_38          = dword ptr -38h
.text:0040BB50 lpRootPathName  = dword ptr -30h
.text:0040BB50 var_2C          = byte ptr -2Ch
.text:0040BB50 var_28          = dword ptr -28h
.text:0040BB50 var_24          = dword ptr -24h
.text:0040BB50 var_20          = dword ptr -20h
.text:0040BB50 var_1C          = dword ptr -1Ch
.text:0040BB50 var_18          = byte ptr -18h
.text:0040BB50 String1         = dword ptr  4
.text:0040BB50 arg_4           = dword ptr  8
.text:0040BB50
.text:0040BB50                 push    ebp
.text:0040BB51                 push    edi
.text:0040BB52                 push    esi
.text:0040BB53                 push    ebx
.text:0040BB54                 sub     esp, 5Ch
.text:0040BB57                 mov     edx, [esp+6Ch+String1]
.text:0040BB5B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040BB5E                 call    sub_40D740
.text:0040BB63                 mov     [esp+6Ch+Str], eax
.text:0040BB66                 call    sub_40E850
.text:0040BB6B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040BB6F                 test    eax, eax
.text:0040BB71                 jz      loc_40BDA3
.text:0040BB77                 mov     [esp+6Ch+Str], eax ; Str
.text:0040BB7A                 call    strlen
.text:0040BB7F                 mov     edx, [esp+6Ch+arg_4]
.text:0040BB83                 mov     ebx, eax
.text:0040BB85                 mov     esi, [edx+0Ch]
.text:0040BB88                 mov     edi, [edx+8]
.text:0040BB8B                 mov     eax, esi
.text:0040BB8D                 or      eax, edi
.text:0040BB8F                 jz      loc_40BFB0
.text:0040BB95                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:0040BB99                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040BB9C                 call    GetDriveTypeA
.text:0040BBA1                 sub     esp, 4
.text:0040BBA4                 cmp     eax, 4
.text:0040BBA7                 jz      loc_40BFB0
.text:0040BBAD
.text:0040BBAD loc_40BBAD:                             ; CODE XREF: sub_40BB50+48A↓j
.text:0040BBAD                                         ; sub_40BB50+4B2↓j
.text:0040BBAD                 mov     edx, [esp+6Ch+arg_4]
.text:0040BBB1                 mov     esi, [edx+14h]
.text:0040BBB4                 mov     edi, [edx+10h]
.text:0040BBB7                 mov     ecx, esi
.text:0040BBB9                 or      ecx, edi
.text:0040BBBB                 jnz     short loc_40BBE5
.text:0040BBBD                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:0040BBC1                 xor     esi, esi
.text:0040BBC3                 xor     edi, edi
.text:0040BBC5                 test    ebp, ebp
.text:0040BBC7                 jz      short loc_40BBD7
.text:0040BBC9                 movzx   ebx, byte ptr [ebp+0]
.text:0040BBCD                 test    bl, bl
.text:0040BBCF                 mov     cl, bl
.text:0040BBD1                 jnz     loc_40BF61
.text:0040BBD7
.text:0040BBD7 loc_40BBD7:                             ; CODE XREF: sub_40BB50+77↑j
.text:0040BBD7                 xor     eax, eax
.text:0040BBD9                 xor     edx, edx
.text:0040BBDB
.text:0040BBDB loc_40BBDB:                             ; CODE XREF: sub_40BB50+458↓j
.text:0040BBDB                 mov     ebp, [esp+6Ch+arg_4]
.text:0040BBDF                 mov     [ebp+10h], eax
.text:0040BBE2                 mov     [ebp+14h], edx
.text:0040BBE5
.text:0040BBE5 loc_40BBE5:                             ; CODE XREF: sub_40BB50+6B↑j
.text:0040BBE5                 mov     edi, [esp+6Ch+String1]
.text:0040BBE9                 xor     ebx, ebx
.text:0040BBEB                 test    edi, edi
.text:0040BBED                 jz      loc_40BE63
.text:0040BBF3                 mov     esi, [esp+6Ch+String1]
.text:0040BBF7                 cmp     byte ptr [esi], 0
.text:0040BBFA                 jnz     loc_40BE70
.text:0040BC00
.text:0040BC00 loc_40BC00:                             ; CODE XREF: sub_40BB50+38C↓j
.text:0040BC00                                         ; sub_40BB50+397↓j
.text:0040BC00                 mov     ebp, [esp+6Ch+String1]
.text:0040BC04                 test    ebp, ebp
.text:0040BC06                 jz      loc_40BE63
.text:0040BC0C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040BC14                 mov     edi, [esp+6Ch+String1]
.text:0040BC18                 mov     [esp+6Ch+Str], edi ; Str
.text:0040BC1B                 call    strrchr
.text:0040BC20                 test    eax, eax
.text:0040BC22                 jz      loc_40BE63
.text:0040BC28                 cld
.text:0040BC29                 mov     ecx, 5
.text:0040BC2E                 mov     esi, eax
.text:0040BC30                 mov     edi, offset aLnk ; ".lnk"
.text:0040BC35                 repe cmpsb
.text:0040BC37                 setz    cl
.text:0040BC3A                 movzx   eax, cl
.text:0040BC3D                 lea     esi, [esi+0]
.text:0040BC40
.text:0040BC40 loc_40BC40:                             ; CODE XREF: sub_40BB50+315↓j
.text:0040BC40                 test    eax, eax
.text:0040BC42                 jz      short loc_40BC4A
.text:0040BC44                 or      ebx, 0A000h
.text:0040BC4A
.text:0040BC4A loc_40BC4A:                             ; CODE XREF: sub_40BB50+F2↑j
.text:0040BC4A                 mov     esi, [esp+6Ch+arg_4]
.text:0040BC4E                 xor     ecx, ecx
.text:0040BC50                 mov     edi, ds:dword_415220
.text:0040BC56                 or      [esi], ebx
.text:0040BC58                 mov     ebx, [esi+14h]
.text:0040BC5B                 mov     ebp, [esi+10h]
.text:0040BC5E                 mov     eax, ebx
.text:0040BC60                 xor     eax, ecx
.text:0040BC62                 xor     ebp, edi
.text:0040BC64                 or      eax, ebp
.text:0040BC66                 jnz     loc_40BDF0
.text:0040BC6C
.text:0040BC6C loc_40BC6C:                             ; CODE XREF: sub_40BB50+30E↓j
.text:0040BC6C                 mov     ecx, dword_414060
.text:0040BC72                 xor     esi, esi
.text:0040BC74                 xor     edi, edi
.text:0040BC76                 mov     edx, [esp+6Ch+arg_4]
.text:0040BC7A                 mov     [edx+50h], ecx
.text:0040BC7D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:0040BC84                 call    LoadLibraryA
.text:0040BC89                 sub     esp, 4
.text:0040BC8C                 mov     ebp, eax
.text:0040BC8E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040BC96                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040BC99                 call    GetProcAddress
.text:0040BC9E                 sub     esp, 8
.text:0040BCA1                 test    eax, eax
.text:0040BCA3                 jz      short loc_40BCD8
.text:0040BCA5                 mov     ebx, [esp+6Ch+String1]
.text:0040BCA9                 lea     esi, [esp+6Ch+var_2C]
.text:0040BCAD                 mov     [esp+6Ch+lpProcName], esi
.text:0040BCB1                 mov     [esp+6Ch+Str], ebx
.text:0040BCB4                 call    eax
.text:0040BCB6                 sub     esp, 8
.text:0040BCB9                 mov     ebx, eax
.text:0040BCBB                 cmp     eax, 0FFFFFFFFh
.text:0040BCBE                 jz      loc_40BDD9
.text:0040BCC4
.text:0040BCC4 loc_40BCC4:                             ; CODE XREF: sub_40BB50+29A↓j
.text:0040BCC4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:0040BCC8                 mov     ecx, ebx
.text:0040BCCA                 xor     edi, edi
.text:0040BCCC                 xor     ebx, ebx
.text:0040BCCE                 mov     edx, esi
.text:0040BCD0                 mov     esi, ecx
.text:0040BCD2                 or      esi, edi
.text:0040BCD4                 mov     edi, ebx
.text:0040BCD6                 or      edi, edx
.text:0040BCD8
.text:0040BCD8 loc_40BCD8:                             ; CODE XREF: sub_40BB50+153↑j
.text:0040BCD8                                         ; sub_40BB50+294↓j
.text:0040BCD8                 test    ebp, ebp
.text:0040BCDA                 jz      short loc_40BCE7
.text:0040BCDC                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040BCDF                 call    FreeLibrary
.text:0040BCE4                 sub     esp, 4
.text:0040BCE7
.text:0040BCE7 loc_40BCE7:                             ; CODE XREF: sub_40BB50+18A↑j
.text:0040BCE7                 mov     ebp, edi
.text:0040BCE9                 mov     edx, ebp
.text:0040BCEB                 mov     edi, esi
.text:0040BCED                 or      edx, esi
.text:0040BCEF                 jnz     short loc_40BCFB
.text:0040BCF1                 mov     eax, [esp+6Ch+arg_4]
.text:0040BCF5                 mov     edi, [eax+30h]
.text:0040BCF8                 mov     ebp, [eax+34h]
.text:0040BCFB
.text:0040BCFB loc_40BCFB:                             ; CODE XREF: sub_40BB50+19F↑j
.text:0040BCFB                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BCFF                 mov     ebx, dword_414060
.text:0040BD05                 xor     esi, esi
.text:0040BD07                 mov     [esp+6Ch+var_60], esi
.text:0040BD0B                 mov     [esp+6Ch+Str], edi
.text:0040BD0E                 mov     [esp+6Ch+var_64], ebx
.text:0040BD12                 call    sub_412670
.text:0040BD17                 mov     [esp+6Ch+var_3C], eax
.text:0040BD1B                 mov     ecx, dword_414060
.text:0040BD21                 mov     [esp+6Ch+lpProcName], ebp
.text:0040BD25                 mov     [esp+6Ch+var_38], edx
.text:0040BD29                 shr     ecx, 9
.text:0040BD2C                 mov     [esp+6Ch+var_44], ecx
.text:0040BD30                 mov     [esp+6Ch+var_40], 0
.text:0040BD38                 mov     [esp+6Ch+var_64], ebx
.text:0040BD3C                 mov     [esp+6Ch+var_60], esi
.text:0040BD40                 mov     [esp+6Ch+Str], edi
.text:0040BD43                 call    sub_412AE0
.text:0040BD48                 mov     ebp, edx
.text:0040BD4A                 or      ebp, eax
.text:0040BD4C                 jz      short loc_40BDB0
.text:0040BD4E                 mov     ebp, [esp+6Ch+var_3C]
.text:0040BD52                 mov     esi, [esp+6Ch+var_38]
.text:0040BD56                 mov     eax, [esp+6Ch+var_44]
.text:0040BD5A                 mov     [esp+6Ch+var_4C], ebp
.text:0040BD5E                 mov     ecx, [esp+6Ch+var_40]
.text:0040BD62                 mov     ebx, [esp+6Ch+var_44]
.text:0040BD66                 add     [esp+6Ch+var_4C], 1
.text:0040BD6B                 mov     [esp+6Ch+var_48], esi
.text:0040BD6F                 mov     edi, [esp+6Ch+var_4C]
.text:0040BD73                 adc     [esp+6Ch+var_48], 0
.text:0040BD78                 mul     [esp+6Ch+var_4C]
.text:0040BD7C                 imul    ecx, edi
.text:0040BD7F                 mov     esi, eax
.text:0040BD81                 mov     eax, [esp+6Ch+var_48]
.text:0040BD85                 add     edx, ecx
.text:0040BD87                 imul    ebx, eax
.text:0040BD8A                 lea     edi, [ebx+edx]
.text:0040BD8D
.text:0040BD8D loc_40BD8D:                             ; CODE XREF: sub_40BB50+287↓j
.text:0040BD8D                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BD91                 mov     [ebx+58h], esi
.text:0040BD94                 mov     esi, [esp+6Ch+lpRootPathName]
.text:0040BD98                 mov     [ebx+5Ch], edi
.text:0040BD9B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040BD9E                 call    free
.text:0040BDA3
.text:0040BDA3 loc_40BDA3:                             ; CODE XREF: sub_40BB50+21↑j
.text:0040BDA3                 add     esp, 5Ch
.text:0040BDA6                 xor     eax, eax
.text:0040BDA8                 pop     ebx
.text:0040BDA9                 pop     esi
.text:0040BDAA                 pop     edi
.text:0040BDAB                 pop     ebp
.text:0040BDAC                 retn
.text:0040BDAC ; ---------------------------------------------------------------------------
.text:0040BDAD                 align 10h
.text:0040BDB0
.text:0040BDB0 loc_40BDB0:                             ; CODE XREF: sub_40BB50+1FC↑j
.text:0040BDB0                 mov     eax, [esp+6Ch+var_3C]
.text:0040BDB4                 mov     edi, [esp+6Ch+var_40]
.text:0040BDB8                 mov     ecx, [esp+6Ch+var_3C]
.text:0040BDBC                 mul     [esp+6Ch+var_44]
.text:0040BDC0                 mov     ebx, [esp+6Ch+var_44]
.text:0040BDC4                 imul    ecx, edi
.text:0040BDC7                 mov     ebp, edx
.text:0040BDC9                 mov     esi, eax
.text:0040BDCB                 mov     edx, [esp+6Ch+var_38]
.text:0040BDCF                 add     ebp, ecx
.text:0040BDD1                 imul    ebx, edx
.text:0040BDD4                 lea     edi, [ebx+ebp]
.text:0040BDD7                 jmp     short loc_40BD8D
.text:0040BDD9 ; ---------------------------------------------------------------------------
.text:0040BDD9
.text:0040BDD9 loc_40BDD9:                             ; CODE XREF: sub_40BB50+16E↑j
.text:0040BDD9                 call    GetLastError
.text:0040BDDE                 xor     esi, esi
.text:0040BDE0                 xor     edi, edi
.text:0040BDE2                 test    eax, eax
.text:0040BDE4                 jnz     loc_40BCD8
.text:0040BDEA                 jmp     loc_40BCC4
.text:0040BDEA ; ---------------------------------------------------------------------------
.text:0040BDEF                 align 10h
.text:0040BDF0
.text:0040BDF0 loc_40BDF0:                             ; CODE XREF: sub_40BB50+116↑j
.text:0040BDF0                 mov     edx, [esp+6Ch+lpRootPathName]
.text:0040BDF4                 lea     ecx, [esp+6Ch+var_20]
.text:0040BDF8                 lea     ebx, [esp+6Ch+var_1C]
.text:0040BDFC                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:0040BE00                 lea     edi, [esp+6Ch+var_24]
.text:0040BE04                 lea     ebp, [esp+6Ch+var_28]
.text:0040BE08                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040BE0C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:0040BE10                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:0040BE14                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0040BE17                 call    sub_40E160
.text:0040BE1C                 test    eax, eax
.text:0040BE1E                 jnz     short loc_40BE40
.text:0040BE20                 mov     [esp+6Ch+var_28], 1
.text:0040BE28                 mov     [esp+6Ch+var_24], 200h
.text:0040BE30                 mov     [esp+6Ch+var_20], 0
.text:0040BE38                 mov     [esp+6Ch+var_1C], 0
.text:0040BE40
.text:0040BE40 loc_40BE40:                             ; CODE XREF: sub_40BB50+2CE↑j
.text:0040BE40                 mov     ebp, [esp+6Ch+var_24]
.text:0040BE44                 mov     edi, [esp+6Ch+var_28]
.text:0040BE48                 mov     eax, [esp+6Ch+arg_4]
.text:0040BE4C                 imul    ebp, edi
.text:0040BE4F                 mov     esi, [eax+10h]
.text:0040BE52                 mov     dword_414060, ebp
.text:0040BE58                 mov     ds:dword_415220, esi
.text:0040BE5E                 jmp     loc_40BC6C
.text:0040BE63 ; ---------------------------------------------------------------------------
.text:0040BE63
.text:0040BE63 loc_40BE63:                             ; CODE XREF: sub_40BB50+9D↑j
.text:0040BE63                                         ; sub_40BB50+B6↑j ...
.text:0040BE63                 xor     eax, eax
.text:0040BE65                 jmp     loc_40BC40
.text:0040BE65 ; ---------------------------------------------------------------------------
.text:0040BE6A                 align 10h
.text:0040BE70
.text:0040BE70 loc_40BE70:                             ; CODE XREF: sub_40BB50+AA↑j
.text:0040BE70                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:0040BE77                 xor     ebp, ebp
.text:0040BE79                 call    GetModuleHandleA
.text:0040BE7E                 sub     esp, 4
.text:0040BE81                 mov     edi, eax
.text:0040BE83                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040BE8B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040BE8E                 call    GetProcAddress
.text:0040BE93                 sub     esp, 8
.text:0040BE96                 mov     edx, eax
.text:0040BE98                 test    eax, eax
.text:0040BE9A                 jz      short loc_40BEB4
.text:0040BE9C                 mov     eax, [esp+6Ch+String1]
.text:0040BEA0                 lea     ecx, [esp+6Ch+var_18]
.text:0040BEA4                 mov     [esp+6Ch+lpProcName], ecx
.text:0040BEA8                 mov     [esp+6Ch+Str], eax
.text:0040BEAB                 call    edx
.text:0040BEAD                 sub     esp, 8
.text:0040BEB0                 test    eax, eax
.text:0040BEB2                 jnz     short loc_40BF18
.text:0040BEB4
.text:0040BEB4 loc_40BEB4:                             ; CODE XREF: sub_40BB50+34A↑j
.text:0040BEB4                 mov     edx, ds:dword_415230
.text:0040BEBA                 test    edx, edx
.text:0040BEBC                 jz      short loc_40BF37
.text:0040BEBE
.text:0040BEBE loc_40BEBE:                             ; CODE XREF: sub_40BB50+3FA↓j
.text:0040BEBE                                         ; sub_40BB50+40C↓j
.text:0040BEBE                 mov     eax, [esp+6Ch+String1]
.text:0040BEC2                 test    eax, eax
.text:0040BEC4                 jz      short loc_40BECF
.text:0040BEC6                 mov     esi, [esp+6Ch+String1]
.text:0040BECA                 cmp     byte ptr [esi], 0
.text:0040BECD                 jnz     short loc_40BEEC
.text:0040BECF
.text:0040BECF loc_40BECF:                             ; CODE XREF: sub_40BB50+374↑j
.text:0040BECF                                         ; sub_40BB50+3B0↓j ...
.text:0040BECF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:0040BED2                 call    FreeLibrary
.text:0040BED7                 sub     esp, 4
.text:0040BEDA                 test    ebp, ebp
.text:0040BEDC                 jz      loc_40BC00
.text:0040BEE2                 mov     ebx, 49h ; 'I'
.text:0040BEE7                 jmp     loc_40BC00
.text:0040BEEC ; ---------------------------------------------------------------------------
.text:0040BEEC
.text:0040BEEC loc_40BEEC:                             ; CODE XREF: sub_40BB50+37D↑j
.text:0040BEEC                 mov     [esp+6Ch+Str], esi ; Str
.text:0040BEEF                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:0040BEF7                 call    strrchr
.text:0040BEFC                 test    eax, eax
.text:0040BEFE                 mov     esi, eax
.text:0040BF00                 jz      short loc_40BECF
.text:0040BF02                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:0040BF06                 mov     ecx, ds:dword_415230
.text:0040BF0C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040BF0F                 call    strstr
.text:0040BF14                 test    eax, eax
.text:0040BF16                 jz      short loc_40BF1F
.text:0040BF18
.text:0040BF18 loc_40BF18:                             ; CODE XREF: sub_40BB50+362↑j
.text:0040BF18                                         ; sub_40BB50+3E5↓j
.text:0040BF18                 mov     ebp, 1
.text:0040BF1D                 jmp     short loc_40BECF
.text:0040BF1F ; ---------------------------------------------------------------------------
.text:0040BF1F
.text:0040BF1F loc_40BF1F:                             ; CODE XREF: sub_40BB50+3C6↑j
.text:0040BF1F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:0040BF23                 mov     edx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040BF29                 mov     [esp+6Ch+Str], edx ; Str
.text:0040BF2C                 call    strstr
.text:0040BF31                 test    eax, eax
.text:0040BF33                 jz      short loc_40BECF
.text:0040BF35                 jmp     short loc_40BF18
.text:0040BF37 ; ---------------------------------------------------------------------------
.text:0040BF37
.text:0040BF37 loc_40BF37:                             ; CODE XREF: sub_40BB50+36C↑j
.text:0040BF37                 mov     [esp+6Ch+Str], offset VarName ; "PATHEXT"
.text:0040BF3E                 call    getenv
.text:0040BF43                 mov     ds:dword_415230, eax
.text:0040BF48                 test    eax, eax
.text:0040BF4A                 jnz     loc_40BEBE
.text:0040BF50                 mov     esi, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040BF56                 mov     ds:dword_415230, esi
.text:0040BF5C                 jmp     loc_40BEBE
.text:0040BF61 ; ---------------------------------------------------------------------------
.text:0040BF61
.text:0040BF61 loc_40BF61:                             ; CODE XREF: sub_40BB50+81↑j
.text:0040BF61                                         ; sub_40BB50+452↓j
.text:0040BF61                 shld    edi, esi, 8
.text:0040BF65                 movsx   eax, cl
.text:0040BF68                 shl     esi, 8
.text:0040BF6B                 cdq
.text:0040BF6C                 add     esi, eax
.text:0040BF6E                 adc     edi, edx
.text:0040BF70                 mov     edx, edi
.text:0040BF72                 xor     ebx, ebx
.text:0040BF74                 and     edx, 0FF000000h
.text:0040BF7A                 mov     eax, edx
.text:0040BF7C                 or      eax, ebx
.text:0040BF7E                 jz      short loc_40BF99
.text:0040BF80                 mov     ecx, edx
.text:0040BF82                 xor     eax, eax
.text:0040BF84                 shr     ecx, 10h
.text:0040BF87                 mov     edx, esi
.text:0040BF89                 xor     edx, ecx
.text:0040BF8B                 mov     ecx, edi
.text:0040BF8D                 xor     ecx, eax
.text:0040BF8F                 mov     esi, edx
.text:0040BF91                 mov     edi, ecx
.text:0040BF93                 and     edi, 0FFFFFFh
.text:0040BF99
.text:0040BF99 loc_40BF99:                             ; CODE XREF: sub_40BB50+42E↑j
.text:0040BF99                 inc     ebp
.text:0040BF9A                 movzx   ebx, byte ptr [ebp+0]
.text:0040BF9E                 test    bl, bl
.text:0040BFA0                 mov     cl, bl
.text:0040BFA2                 jnz     short loc_40BF61
.text:0040BFA4                 mov     eax, esi
.text:0040BFA6                 mov     edx, edi
.text:0040BFA8                 jmp     loc_40BBDB
.text:0040BFA8 ; ---------------------------------------------------------------------------
.text:0040BFAD                 align 10h
.text:0040BFB0
.text:0040BFB0 loc_40BFB0:                             ; CODE XREF: sub_40BB50+3F↑j
.text:0040BFB0                                         ; sub_40BB50+57↑j
.text:0040BFB0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:0040BFB4                 mov     ebp, [esp+6Ch+String1]
.text:0040BFB8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040BFBC                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040BFBF                 call    _stricmp
.text:0040BFC4                 test    eax, eax
.text:0040BFC6                 jnz     short loc_40BFE0
.text:0040BFC8                 mov     ebx, [esp+6Ch+arg_4]
.text:0040BFCC                 mov     dword ptr [ebx+8], 5
.text:0040BFD3                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040BFDA                 jmp     loc_40BBAD
.text:0040BFDA ; ---------------------------------------------------------------------------
.text:0040BFDF                 align 10h
.text:0040BFE0
.text:0040BFE0 loc_40BFE0:                             ; CODE XREF: sub_40BB50+476↑j
.text:0040BFE0                 mov     ebp, [esp+6Ch+String1]
.text:0040BFE4                 xor     esi, esi
.text:0040BFE6                 xor     edi, edi
.text:0040BFE8                 add     ebp, ebx
.text:0040BFEA                 jz      short loc_40BFF4
.text:0040BFEC                 movzx   ecx, byte ptr [ebp+0]
.text:0040BFF0                 test    cl, cl
.text:0040BFF2                 jnz     short loc_40C007
.text:0040BFF4
.text:0040BFF4 loc_40BFF4:                             ; CODE XREF: sub_40BB50+49A↑j
.text:0040BFF4                 xor     eax, eax
.text:0040BFF6                 xor     edx, edx
.text:0040BFF8
.text:0040BFF8 loc_40BFF8:                             ; CODE XREF: sub_40BB50+4FE↓j
.text:0040BFF8                 mov     ebp, [esp+6Ch+arg_4]
.text:0040BFFC                 mov     [ebp+8], eax
.text:0040BFFF                 mov     [ebp+0Ch], edx
.text:0040C002                 jmp     loc_40BBAD
.text:0040C007 ; ---------------------------------------------------------------------------
.text:0040C007
.text:0040C007 loc_40C007:                             ; CODE XREF: sub_40BB50+4A2↑j
.text:0040C007                                         ; sub_40BB50+4F8↓j
.text:0040C007                 shld    edi, esi, 8
.text:0040C00B                 movsx   eax, cl
.text:0040C00E                 shl     esi, 8
.text:0040C011                 cdq
.text:0040C012                 add     esi, eax
.text:0040C014                 adc     edi, edx
.text:0040C016                 mov     edx, edi
.text:0040C018                 xor     ebx, ebx
.text:0040C01A                 and     edx, 0FF000000h
.text:0040C020                 mov     eax, edx
.text:0040C022                 or      eax, ebx
.text:0040C024                 jz      short loc_40C03F
.text:0040C026                 mov     ecx, edx
.text:0040C028                 xor     eax, eax
.text:0040C02A                 shr     ecx, 10h
.text:0040C02D                 mov     edx, esi
.text:0040C02F                 xor     edx, ecx
.text:0040C031                 mov     ecx, edi
.text:0040C033                 xor     ecx, eax
.text:0040C035                 mov     esi, edx
.text:0040C037                 mov     edi, ecx
.text:0040C039                 and     edi, 0FFFFFFh
.text:0040C03F
.text:0040C03F loc_40C03F:                             ; CODE XREF: sub_40BB50+4D4↑j
.text:0040C03F                 inc     ebp
.text:0040C040                 movzx   ebx, byte ptr [ebp+0]
.text:0040C044                 test    bl, bl
.text:0040C046                 mov     cl, bl
.text:0040C048                 jnz     short loc_40C007
.text:0040C04A                 mov     eax, esi
.text:0040C04C                 mov     edx, edi
.text:0040C04E                 jmp     short loc_40BFF8
.text:0040C04E sub_40BB50      endp
.text:0040C04E
.text:0040C050
.text:0040C050 ; =============== S U B R O U T I N E =======================================
.text:0040C050
.text:0040C050
.text:0040C050 ; int __cdecl sub_40C050(LPCSTR)
.text:0040C050 sub_40C050      proc near               ; CODE XREF: sub_40D860+CA↓p
.text:0040C050
.text:0040C050 lpRootPathName  = dword ptr -83Ch
.text:0040C050 lpVolumeNameBuffer= dword ptr -838h
.text:0040C050 nVolumeNameSize = dword ptr -834h
.text:0040C050 lpVolumeSerialNumber= dword ptr -830h
.text:0040C050 lpMaximumComponentLength= dword ptr -82Ch
.text:0040C050 lpFileSystemFlags= dword ptr -828h
.text:0040C050 lpFileSystemNameBuffer= dword ptr -824h
.text:0040C050 nFileSystemNameSize= dword ptr -820h
.text:0040C050 VolumeSerialNumber= dword ptr -818h
.text:0040C050 MaximumComponentLength= dword ptr -814h
.text:0040C050 FileSystemFlags = dword ptr -810h
.text:0040C050 FileSystemNameBuffer= byte ptr -80Ch
.text:0040C050 VolumeNameBuffer= byte ptr -40Ch
.text:0040C050 var_4           = dword ptr -4
.text:0040C050 arg_0           = dword ptr  4
.text:0040C050
.text:0040C050                 sub     esp, 83Ch
.text:0040C056                 mov     [esp+83Ch+var_4], ebx
.text:0040C05D                 mov     ebx, [esp+83Ch+arg_0]
.text:0040C064                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:0040C067                 call    sub_40D740
.text:0040C06C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0040C06F                 call    sub_40E850
.text:0040C074                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:0040C077                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:0040C07B                 mov     ebx, eax
.text:0040C07D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040C081                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:0040C085                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:0040C089                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:0040C08D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:0040C091                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040C095                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:0040C09C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040C0A0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:0040C0A4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040C0AC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040C0B4                 call    GetVolumeInformationA
.text:0040C0B9                 sub     esp, 20h
.text:0040C0BC                 test    eax, eax
.text:0040C0BE                 setz    cl
.text:0040C0C1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:0040C0C4                 movzx   edx, cl
.text:0040C0C7                 dec     edx
.text:0040C0C8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0040C0CC                 call    free
.text:0040C0D1                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:0040C0D5                 mov     ebx, [esp+83Ch+var_4]
.text:0040C0DC                 add     esp, 83Ch
.text:0040C0E2                 retn
.text:0040C0E2 sub_40C050      endp
.text:0040C0E2
.text:0040C0E2 ; ---------------------------------------------------------------------------
.text:0040C0E3                 align 10h
.text:0040C0F0                 push    ebp
.text:0040C0F1                 push    edi
.text:0040C0F2                 xor     edi, edi
.text:0040C0F4                 push    esi
.text:0040C0F5                 xor     esi, esi
.text:0040C0F7                 push    ebx
.text:0040C0F8                 mov     ebp, [esp+14h]
.text:0040C0FC                 test    ebp, ebp
.text:0040C0FE                 jz      short loc_40C108
.text:0040C100                 movzx   ecx, byte ptr [ebp+0]
.text:0040C104                 test    cl, cl
.text:0040C106                 jnz     short loc_40C111
.text:0040C108
.text:0040C108 loc_40C108:                             ; CODE XREF: .text:0040C0FE↑j
.text:0040C108                 xor     eax, eax
.text:0040C10A                 xor     edx, edx
.text:0040C10C
.text:0040C10C loc_40C10C:                             ; CODE XREF: .text:0040C158↓j
.text:0040C10C                 pop     ebx
.text:0040C10D                 pop     esi
.text:0040C10E                 pop     edi
.text:0040C10F                 pop     ebp
.text:0040C110                 retn
.text:0040C111 ; ---------------------------------------------------------------------------
.text:0040C111
.text:0040C111 loc_40C111:                             ; CODE XREF: .text:0040C106↑j
.text:0040C111                                         ; .text:0040C152↓j
.text:0040C111                 shld    edi, esi, 8
.text:0040C115                 movsx   eax, cl
.text:0040C118                 shl     esi, 8
.text:0040C11B                 cdq
.text:0040C11C                 add     esi, eax
.text:0040C11E                 adc     edi, edx
.text:0040C120                 mov     edx, edi
.text:0040C122                 xor     ebx, ebx
.text:0040C124                 and     edx, 0FF000000h
.text:0040C12A                 mov     eax, edx
.text:0040C12C                 or      eax, ebx
.text:0040C12E                 jz      short loc_40C149
.text:0040C130                 mov     ecx, edx
.text:0040C132                 xor     eax, eax
.text:0040C134                 shr     ecx, 10h
.text:0040C137                 mov     edx, esi
.text:0040C139                 xor     edx, ecx
.text:0040C13B                 mov     ecx, edi
.text:0040C13D                 xor     ecx, eax
.text:0040C13F                 mov     esi, edx
.text:0040C141                 mov     edi, ecx
.text:0040C143                 and     edi, 0FFFFFFh
.text:0040C149
.text:0040C149 loc_40C149:                             ; CODE XREF: .text:0040C12E↑j
.text:0040C149                 inc     ebp
.text:0040C14A                 movzx   ebx, byte ptr [ebp+0]
.text:0040C14E                 test    bl, bl
.text:0040C150                 mov     cl, bl
.text:0040C152                 jnz     short loc_40C111
.text:0040C154                 mov     eax, esi
.text:0040C156                 mov     edx, edi
.text:0040C158                 jmp     short loc_40C10C
.text:0040C158 ; ---------------------------------------------------------------------------
.text:0040C15A                 align 10h
.text:0040C160                 sub     esp, 2Ch
.text:0040C163                 lea     edx, [esp+24h]
.text:0040C167                 lea     ecx, [esp+28h]
.text:0040C16B                 mov     [esp+0Ch], edx
.text:0040C16F                 lea     edx, [esp+1Ch]
.text:0040C173                 mov     [esp+4], edx
.text:0040C177                 mov     edx, [esp+30h]
.text:0040C17B                 mov     [esp+10h], ecx
.text:0040C17F                 lea     ecx, [esp+20h]
.text:0040C183                 mov     [esp+8], ecx
.text:0040C187                 mov     [esp], edx
.text:0040C18A                 call    sub_40E160
.text:0040C18F                 test    eax, eax
.text:0040C191                 jnz     short loc_40C1B3
.text:0040C193                 mov     dword ptr [esp+1Ch], 1
.text:0040C19B                 mov     dword ptr [esp+20h], 200h
.text:0040C1A3                 mov     dword ptr [esp+24h], 0
.text:0040C1AB                 mov     dword ptr [esp+28h], 0
.text:0040C1B3
.text:0040C1B3 loc_40C1B3:                             ; CODE XREF: .text:0040C191↑j
.text:0040C1B3                 mov     eax, [esp+20h]
.text:0040C1B7                 mov     ecx, [esp+1Ch]
.text:0040C1BB                 add     esp, 2Ch
.text:0040C1BE                 imul    eax, ecx
.text:0040C1C1                 retn
.text:0040C1C1 ; ---------------------------------------------------------------------------
.text:0040C1C2                 align 10h
.text:0040C1D0                 sub     esp, 1Ch
.text:0040C1D3                 mov     eax, [esp+20h]
.text:0040C1D7                 mov     [esp+14h], esi
.text:0040C1DB                 mov     [esp+18h], edi
.text:0040C1DF                 test    eax, eax
.text:0040C1E1                 jz      short loc_40C220
.text:0040C1E3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C1EB                 mov     [esp], eax
.text:0040C1EE                 call    strrchr
.text:0040C1F3                 test    eax, eax
.text:0040C1F5                 jz      short loc_40C220
.text:0040C1F7                 cld
.text:0040C1F8                 mov     esi, eax
.text:0040C1FA                 mov     edi, offset aLnk ; ".lnk"
.text:0040C1FF                 mov     ecx, 5
.text:0040C204                 repe cmpsb
.text:0040C206                 setz    dl
.text:0040C209                 movzx   eax, dl
.text:0040C20C                 lea     esi, [esi+0]
.text:0040C210
.text:0040C210 loc_40C210:                             ; CODE XREF: .text:0040C222↓j
.text:0040C210                 mov     esi, [esp+14h]
.text:0040C214                 mov     edi, [esp+18h]
.text:0040C218                 add     esp, 1Ch
.text:0040C21B                 retn
.text:0040C21B ; ---------------------------------------------------------------------------
.text:0040C21C                 align 10h
.text:0040C220
.text:0040C220 loc_40C220:                             ; CODE XREF: .text:0040C1E1↑j
.text:0040C220                                         ; .text:0040C1F5↑j
.text:0040C220                 xor     eax, eax
.text:0040C222                 jmp     short loc_40C210
.text:0040C222 ; ---------------------------------------------------------------------------
.text:0040C224                 align 10h
.text:0040C230                 sub     esp, 1Ch
.text:0040C233                 mov     [esp+10h], ebx
.text:0040C237                 mov     ebx, [esp+20h]
.text:0040C23B                 mov     [esp+14h], esi
.text:0040C23F                 mov     [esp+18h], edi
.text:0040C243                 xor     edi, edi
.text:0040C245                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040C24C                 call    GetModuleHandleA
.text:0040C251                 sub     esp, 4
.text:0040C254                 mov     esi, eax
.text:0040C256                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040C25E                 mov     [esp], eax
.text:0040C261                 call    GetProcAddress
.text:0040C266                 sub     esp, 8
.text:0040C269                 test    eax, eax
.text:0040C26B                 jz      short loc_40C281
.text:0040C26D                 mov     [esp], ebx
.text:0040C270                 lea     ecx, [esp+0Ch]
.text:0040C274                 mov     [esp+4], ecx
.text:0040C278                 call    eax
.text:0040C27A                 sub     esp, 8
.text:0040C27D                 test    eax, eax
.text:0040C27F                 jnz     short loc_40C2E0
.text:0040C281
.text:0040C281 loc_40C281:                             ; CODE XREF: .text:0040C26B↑j
.text:0040C281                 mov     eax, ds:dword_415230
.text:0040C286                 test    eax, eax
.text:0040C288                 jz      short loc_40C300
.text:0040C28A
.text:0040C28A loc_40C28A:                             ; CODE XREF: .text:0040C313↓j
.text:0040C28A                                         ; .text:0040C325↓j
.text:0040C28A                 test    ebx, ebx
.text:0040C28C                 jz      short loc_40C293
.text:0040C28E                 cmp     byte ptr [ebx], 0
.text:0040C291                 jnz     short loc_40C2B0
.text:0040C293
.text:0040C293 loc_40C293:                             ; CODE XREF: .text:0040C28C↑j
.text:0040C293                                         ; .text:0040C2C4↓j ...
.text:0040C293                 mov     [esp], esi
.text:0040C296                 call    FreeLibrary
.text:0040C29B                 sub     esp, 4
.text:0040C29E                 mov     eax, edi
.text:0040C2A0                 mov     ebx, [esp+10h]
.text:0040C2A4                 mov     esi, [esp+14h]
.text:0040C2A8                 mov     edi, [esp+18h]
.text:0040C2AC                 add     esp, 1Ch
.text:0040C2AF                 retn
.text:0040C2B0 ; ---------------------------------------------------------------------------
.text:0040C2B0
.text:0040C2B0 loc_40C2B0:                             ; CODE XREF: .text:0040C291↑j
.text:0040C2B0                 mov     [esp], ebx
.text:0040C2B3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C2BB                 call    strrchr
.text:0040C2C0                 test    eax, eax
.text:0040C2C2                 mov     ebx, eax
.text:0040C2C4                 jz      short loc_40C293
.text:0040C2C6                 mov     [esp+4], eax
.text:0040C2CA                 mov     ecx, ds:dword_415230
.text:0040C2D0                 mov     [esp], ecx
.text:0040C2D3                 call    strstr
.text:0040C2D8                 test    eax, eax
.text:0040C2DA                 jz      short loc_40C2E7
.text:0040C2DC                 lea     esi, [esi+0]
.text:0040C2E0
.text:0040C2E0 loc_40C2E0:                             ; CODE XREF: .text:0040C27F↑j
.text:0040C2E0                                         ; .text:0040C2FD↓j
.text:0040C2E0                 mov     edi, 1
.text:0040C2E5                 jmp     short loc_40C293
.text:0040C2E7 ; ---------------------------------------------------------------------------
.text:0040C2E7
.text:0040C2E7 loc_40C2E7:                             ; CODE XREF: .text:0040C2DA↑j
.text:0040C2E7                 mov     [esp+4], ebx
.text:0040C2EB                 mov     ebx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C2F1                 mov     [esp], ebx
.text:0040C2F4                 call    strstr
.text:0040C2F9                 test    eax, eax
.text:0040C2FB                 jz      short loc_40C293
.text:0040C2FD                 jmp     short loc_40C2E0
.text:0040C2FD ; ---------------------------------------------------------------------------
.text:0040C2FF                 align 10h
.text:0040C300
.text:0040C300 loc_40C300:                             ; CODE XREF: .text:0040C288↑j
.text:0040C300                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:0040C307                 call    getenv
.text:0040C30C                 mov     ds:dword_415230, eax
.text:0040C311                 test    eax, eax
.text:0040C313                 jnz     loc_40C28A
.text:0040C319                 mov     edx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C31F                 mov     ds:dword_415230, edx
.text:0040C325                 jmp     loc_40C28A
.text:0040C325 ; ---------------------------------------------------------------------------
.text:0040C32A                 align 10h
.text:0040C330                 sub     esp, 0Ch
.text:0040C333                 mov     edx, [esp+10h]
.text:0040C337                 mov     [esp], edx
.text:0040C33A                 call    GetFileType
.text:0040C33F                 sub     esp, 4
.text:0040C342                 xor     edx, edx
.text:0040C344                 cmp     eax, 2
.text:0040C347                 jz      short loc_40C360
.text:0040C349                 cmp     eax, 3
.text:0040C34C                 jz      short loc_40C354
.text:0040C34E
.text:0040C34E loc_40C34E:                             ; CODE XREF: .text:0040C359↓j
.text:0040C34E                                         ; .text:0040C365↓j
.text:0040C34E                 mov     eax, edx
.text:0040C350                 add     esp, 0Ch
.text:0040C353                 retn
.text:0040C354 ; ---------------------------------------------------------------------------
.text:0040C354
.text:0040C354 loc_40C354:                             ; CODE XREF: .text:0040C34C↑j
.text:0040C354                 mov     edx, 1000h
.text:0040C359                 jmp     short loc_40C34E
.text:0040C359 ; ---------------------------------------------------------------------------
.text:0040C35B                 align 10h
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: .text:0040C347↑j
.text:0040C360                 mov     edx, 2000h
.text:0040C365                 jmp     short loc_40C34E
.text:0040C365 ; ---------------------------------------------------------------------------
.text:0040C367                 align 10h
.text:0040C370                 mov     ecx, [esp+4]
.text:0040C374                 xor     edx, edx
.text:0040C376                 test    cl, 10h
.text:0040C379                 setz    dl
.text:0040C37C                 dec     edx
.text:0040C37D                 and     edx, 0FFFFC000h
.text:0040C383                 add     edx, 8000h
.text:0040C389                 or      edx, 124h
.text:0040C38F                 test    cl, 1
.text:0040C392                 movzx   eax, dx
.text:0040C395                 jnz     short locret_40C39C
.text:0040C397                 or      eax, 92h
.text:0040C39C
.text:0040C39C locret_40C39C:                          ; CODE XREF: .text:0040C395↑j
.text:0040C39C                 retn
.text:0040C39C ; ---------------------------------------------------------------------------
.text:0040C39D                 align 10h
.text:0040C3A0                 sub     esp, 2Ch
.text:0040C3A3                 mov     [esp+20h], esi
.text:0040C3A7                 mov     esi, [esp+30h]
.text:0040C3AB                 mov     [esp+1Ch], ebx
.text:0040C3AF                 xor     ebx, ebx
.text:0040C3B1                 test    esi, esi
.text:0040C3B3                 mov     [esp+24h], edi
.text:0040C3B7                 mov     [esp+28h], ebp
.text:0040C3BB                 jz      short loc_40C410
.text:0040C3BD                 cmp     byte ptr [esi], 0
.text:0040C3C0                 jnz     short loc_40C414
.text:0040C3C2
.text:0040C3C2 loc_40C3C2:                             ; CODE XREF: .text:0040C47C↓j
.text:0040C3C2                                         ; .text:0040C487↓j
.text:0040C3C2                 test    esi, esi
.text:0040C3C4                 jz      short loc_40C410
.text:0040C3C6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C3CE                 mov     [esp], esi
.text:0040C3D1                 call    strrchr
.text:0040C3D6                 test    eax, eax
.text:0040C3D8                 jz      short loc_40C410
.text:0040C3DA                 cld
.text:0040C3DB                 mov     ecx, 5
.text:0040C3E0                 mov     esi, eax
.text:0040C3E2                 mov     edi, offset aLnk ; ".lnk"
.text:0040C3E7                 repe cmpsb
.text:0040C3E9                 setz    cl
.text:0040C3EC                 movzx   eax, cl
.text:0040C3EF                 nop
.text:0040C3F0
.text:0040C3F0 loc_40C3F0:                             ; CODE XREF: .text:0040C412↓j
.text:0040C3F0                 test    eax, eax
.text:0040C3F2                 jz      short loc_40C3FA
.text:0040C3F4                 or      ebx, 0A000h
.text:0040C3FA
.text:0040C3FA loc_40C3FA:                             ; CODE XREF: .text:0040C3F2↑j
.text:0040C3FA                 mov     eax, ebx
.text:0040C3FC                 mov     esi, [esp+20h]
.text:0040C400                 mov     ebx, [esp+1Ch]
.text:0040C404                 mov     edi, [esp+24h]
.text:0040C408                 mov     ebp, [esp+28h]
.text:0040C40C                 add     esp, 2Ch
.text:0040C40F                 retn
.text:0040C410 ; ---------------------------------------------------------------------------
.text:0040C410
.text:0040C410 loc_40C410:                             ; CODE XREF: .text:0040C3BB↑j
.text:0040C410                                         ; .text:0040C3C4↑j ...
.text:0040C410                 xor     eax, eax
.text:0040C412                 jmp     short loc_40C3F0
.text:0040C414 ; ---------------------------------------------------------------------------
.text:0040C414
.text:0040C414 loc_40C414:                             ; CODE XREF: .text:0040C3C0↑j
.text:0040C414                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0040C41B                 call    GetModuleHandleA
.text:0040C420                 sub     esp, 4
.text:0040C423                 mov     ebp, eax
.text:0040C425                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040C42D                 mov     [esp], eax
.text:0040C430                 call    GetProcAddress
.text:0040C435                 sub     esp, 8
.text:0040C438                 test    eax, eax
.text:0040C43A                 mov     dword ptr [esp+14h], 0
.text:0040C442                 jz      short loc_40C458
.text:0040C444                 mov     [esp], esi
.text:0040C447                 lea     ecx, [esp+18h]
.text:0040C44B                 mov     [esp+4], ecx
.text:0040C44F                 call    eax
.text:0040C451                 sub     esp, 8
.text:0040C454                 test    eax, eax
.text:0040C456                 jnz     short loc_40C4B8
.text:0040C458
.text:0040C458 loc_40C458:                             ; CODE XREF: .text:0040C442↑j
.text:0040C458                 mov     edx, ds:dword_415230
.text:0040C45E                 test    edx, edx
.text:0040C460                 jz      short loc_40C4E0
.text:0040C462
.text:0040C462 loc_40C462:                             ; CODE XREF: .text:0040C4F3↓j
.text:0040C462                                         ; .text:0040C505↓j
.text:0040C462                 test    esi, esi
.text:0040C464                 jz      short loc_40C46B
.text:0040C466                 cmp     byte ptr [esi], 0
.text:0040C469                 jnz     short loc_40C48C
.text:0040C46B
.text:0040C46B loc_40C46B:                             ; CODE XREF: .text:0040C464↑j
.text:0040C46B                                         ; .text:0040C4A0↓j ...
.text:0040C46B                 mov     [esp], ebp
.text:0040C46E                 call    FreeLibrary
.text:0040C473                 sub     esp, 4
.text:0040C476                 mov     eax, [esp+14h]
.text:0040C47A                 test    eax, eax
.text:0040C47C                 jz      loc_40C3C2
.text:0040C482                 mov     ebx, 49h ; 'I'
.text:0040C487                 jmp     loc_40C3C2
.text:0040C48C ; ---------------------------------------------------------------------------
.text:0040C48C
.text:0040C48C loc_40C48C:                             ; CODE XREF: .text:0040C469↑j
.text:0040C48C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0040C494                 mov     [esp], esi
.text:0040C497                 call    strrchr
.text:0040C49C                 test    eax, eax
.text:0040C49E                 mov     edi, eax
.text:0040C4A0                 jz      short loc_40C46B
.text:0040C4A2                 mov     [esp+4], eax
.text:0040C4A6                 mov     edx, ds:dword_415230
.text:0040C4AC                 mov     [esp], edx
.text:0040C4AF                 call    strstr
.text:0040C4B4                 test    eax, eax
.text:0040C4B6                 jz      short loc_40C4C2
.text:0040C4B8
.text:0040C4B8 loc_40C4B8:                             ; CODE XREF: .text:0040C456↑j
.text:0040C4B8                                         ; .text:0040C4D8↓j
.text:0040C4B8                 mov     dword ptr [esp+14h], 1
.text:0040C4C0                 jmp     short loc_40C46B
.text:0040C4C2 ; ---------------------------------------------------------------------------
.text:0040C4C2
.text:0040C4C2 loc_40C4C2:                             ; CODE XREF: .text:0040C4B6↑j
.text:0040C4C2                 mov     [esp+4], edi
.text:0040C4C6                 mov     edi, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C4CC                 mov     [esp], edi
.text:0040C4CF                 call    strstr
.text:0040C4D4                 test    eax, eax
.text:0040C4D6                 jz      short loc_40C46B
.text:0040C4D8                 jmp     short loc_40C4B8
.text:0040C4D8 ; ---------------------------------------------------------------------------
.text:0040C4DA                 align 10h
.text:0040C4E0
.text:0040C4E0 loc_40C4E0:                             ; CODE XREF: .text:0040C460↑j
.text:0040C4E0                 mov     dword ptr [esp], offset VarName ; "PATHEXT"
.text:0040C4E7                 call    getenv
.text:0040C4EC                 mov     ds:dword_415230, eax
.text:0040C4F1                 test    eax, eax
.text:0040C4F3                 jnz     loc_40C462
.text:0040C4F9                 mov     ecx, off_414064 ; ".com;.exe;.bat;.cmd"
.text:0040C4FF                 mov     ds:dword_415230, ecx
.text:0040C505                 jmp     loc_40C462
.text:0040C505 ; ---------------------------------------------------------------------------
.text:0040C50A                 align 10h
.text:0040C510                 push    esi
.text:0040C511                 push    ebx
.text:0040C512                 sub     esp, 864h
.text:0040C518                 mov     ebx, [esp+870h]
.text:0040C51F                 lea     edx, [esp+830h]
.text:0040C526                 mov     esi, [esp+874h]
.text:0040C52D                 mov     [esp+4], edx
.text:0040C531                 mov     [esp], ebx
.text:0040C534                 call    sub_40B390
.text:0040C539                 xor     edx, edx
.text:0040C53B                 test    eax, eax
.text:0040C53D                 jz      loc_40C625
.text:0040C543                 mov     ecx, [esp+830h]
.text:0040C54A                 test    cl, 10h
.text:0040C54D                 mov     [esi], ecx
.text:0040C54F                 mov     eax, [esp+834h]
.text:0040C556                 mov     edx, [esp+838h]
.text:0040C55D                 mov     [esi+4], eax
.text:0040C560                 mov     [esi+8], edx
.text:0040C563                 mov     eax, [esp+83Ch]
.text:0040C56A                 mov     edx, [esp+840h]
.text:0040C571                 mov     [esi+0Ch], eax
.text:0040C574                 mov     [esi+10h], edx
.text:0040C577                 mov     edx, [esp+848h]
.text:0040C57E                 mov     eax, [esp+844h]
.text:0040C585                 mov     [esi+18h], edx
.text:0040C588                 mov     [esi+14h], eax
.text:0040C58B                 mov     edx, [esp+84Ch]
.text:0040C592                 mov     [esi+20h], edx
.text:0040C595                 mov     edx, [esp+850h]
.text:0040C59C                 mov     [esi+24h], edx
.text:0040C59F                 jnz     loc_40C630
.text:0040C5A5                 mov     dword ptr [esi+28h], 1
.text:0040C5AC
.text:0040C5AC loc_40C5AC:                             ; CODE XREF: .text:0040C63B↓j
.text:0040C5AC                 mov     [esp], ebx
.text:0040C5AF                 call    sub_40D740
.text:0040C5B4                 mov     [esp], eax
.text:0040C5B7                 call    sub_40E850
.text:0040C5BC                 mov     [esp], eax
.text:0040C5BF                 lea     edx, [esp+30h]
.text:0040C5C3                 mov     ebx, eax
.text:0040C5C5                 mov     [esp+18h], edx
.text:0040C5C9                 lea     ecx, [esp+2Ch]
.text:0040C5CD                 lea     edx, [esp+28h]
.text:0040C5D1                 mov     [esp+14h], ecx
.text:0040C5D5                 lea     ecx, [esp+24h]
.text:0040C5D9                 mov     [esp+10h], edx
.text:0040C5DD                 lea     edx, [esp+430h]
.text:0040C5E4                 mov     [esp+0Ch], ecx
.text:0040C5E8                 mov     [esp+4], edx
.text:0040C5EC                 mov     dword ptr [esp+1Ch], 400h
.text:0040C5F4                 mov     dword ptr [esp+8], 400h
.text:0040C5FC                 call    GetVolumeInformationA
.text:0040C601                 sub     esp, 20h
.text:0040C604                 test    eax, eax
.text:0040C606                 setz    cl
.text:0040C609                 mov     [esp], ebx
.text:0040C60C                 movzx   edx, cl
.text:0040C60F                 dec     edx
.text:0040C610                 and     [esp+24h], edx
.text:0040C614                 call    free
.text:0040C619                 mov     ecx, [esp+24h]
.text:0040C61D                 mov     edx, 1
.text:0040C622                 mov     [esi+1Ch], ecx
.text:0040C625
.text:0040C625 loc_40C625:                             ; CODE XREF: .text:0040C53D↑j
.text:0040C625                 add     esp, 864h
.text:0040C62B                 mov     eax, edx
.text:0040C62D                 pop     ebx
.text:0040C62E                 pop     esi
.text:0040C62F                 retn
.text:0040C630 ; ---------------------------------------------------------------------------
.text:0040C630
.text:0040C630 loc_40C630:                             ; CODE XREF: .text:0040C59F↑j
.text:0040C630                 mov     [esp], ebx
.text:0040C633                 call    sub_40B500
.text:0040C638                 mov     [esi+28h], eax
.text:0040C63B                 jmp     loc_40C5AC
.text:0040C640 ; ---------------------------------------------------------------------------
.text:0040C640                 push    ebp
.text:0040C641                 xor     edx, edx
.text:0040C643                 push    edi
.text:0040C644                 push    esi
.text:0040C645                 xor     esi, esi
.text:0040C647                 push    ebx
.text:0040C648                 sub     esp, 1Ch
.text:0040C64B                 mov     ebx, [esp+5Ch]
.text:0040C64F                 mov     ecx, [esp+30h]
.text:0040C653                 mov     edi, [esp+60h]
.text:0040C657                 or      esi, ebx
.text:0040C659                 mov     eax, [esp+4Ch]
.text:0040C65D                 or      edi, edx
.text:0040C65F                 mov     ebx, [esp+64h]
.text:0040C663                 xor     edx, edx
.text:0040C665                 test    cl, 10h
.text:0040C668                 setz    dl
.text:0040C66B                 mov     [ebx+10h], eax
.text:0040C66E                 mov     [ebx+8], edi
.text:0040C671                 mov     [ebx+0Ch], esi
.text:0040C674                 dec     edx
.text:0040C675                 and     edx, 0FFFFC000h
.text:0040C67B                 mov     dword ptr [ebx+14h], 0
.text:0040C682                 add     edx, 8000h
.text:0040C688                 or      edx, 124h
.text:0040C68E                 test    cl, 1
.text:0040C691                 movzx   eax, dx
.text:0040C694                 jnz     short loc_40C69B
.text:0040C696                 or      eax, 92h
.text:0040C69B
.text:0040C69B loc_40C69B:                             ; CODE XREF: .text:0040C694↑j
.text:0040C69B                 mov     ebx, [esp+54h]
.text:0040C69F                 xor     edx, edx
.text:0040C6A1                 xor     ebp, ebp
.text:0040C6A3                 mov     edi, [esp+50h]
.text:0040C6A7                 mov     ecx, [esp+64h]
.text:0040C6AB                 mov     esi, edi
.text:0040C6AD                 or      [ecx], eax
.text:0040C6AF                 mov     edi, ebx
.text:0040C6B1                 or      edi, ebp
.text:0040C6B3                 mov     ebp, edx
.text:0040C6B5                 mov     ebx, [esp+64h]
.text:0040C6B9                 or      ebp, esi
.text:0040C6BB                 mov     esi, [esp+58h]
.text:0040C6BF                 mov     edx, [esp+40h]
.text:0040C6C3                 mov     [ebx+30h], edi
.text:0040C6C6                 mov     [ebx+18h], esi
.text:0040C6C9                 mov     ecx, edx
.text:0040C6CB                 xor     esi, esi
.text:0040C6CD                 mov     [ebx+34h], ebp
.text:0040C6D0                 xor     edx, edx
.text:0040C6D2                 or      esi, ecx
.text:0040C6D4                 mov     dword ptr [esp+8], 989680h
.text:0040C6DC                 mov     ebx, [esp+3Ch]
.text:0040C6E0                 mov     ecx, esi
.text:0040C6E2                 mov     dword ptr [esp+0Ch], 0
.text:0040C6EA                 or      ebx, edx
.text:0040C6EC                 mov     edx, ebx
.text:0040C6EE                 sub     edx, 0D53E8000h
.text:0040C6F4                 sbb     ecx, 19DB1DEh
.text:0040C6FA                 mov     [esp+4], ecx
.text:0040C6FE                 mov     [esp], edx
.text:0040C701                 call    sub_412670
.text:0040C706                 mov     edx, eax
.text:0040C708                 mov     ecx, [esp+64h]
.text:0040C70C                 shr     eax, 1Fh
.text:0040C70F                 dec     eax
.text:0040C710                 and     edx, eax
.text:0040C712                 mov     [ecx+38h], edx
.text:0040C715                 mov     [esp], ebx
.text:0040C718                 mov     [esp+4], esi
.text:0040C71C                 mov     dword ptr [esp+8], 989680h
.text:0040C724                 mov     dword ptr [esp+0Ch], 0
.text:0040C72C                 call    sub_412AE0
.text:0040C731                 lea     ecx, [eax+eax*4]
.text:0040C734                 lea     esi, [ecx+ecx*4]
.text:0040C737                 mov     eax, [esp+64h]
.text:0040C73B                 shl     esi, 2
.text:0040C73E                 mov     ebx, esi
.text:0040C740                 shr     ebx, 1Fh
.text:0040C743                 dec     ebx
.text:0040C744                 and     ebx, esi
.text:0040C746                 xor     esi, esi
.text:0040C748                 mov     [eax+3Ch], ebx
.text:0040C74B                 mov     edx, [esp+38h]
.text:0040C74F                 mov     dword ptr [esp+8], 989680h
.text:0040C757                 mov     ebx, [esp+34h]
.text:0040C75B                 mov     dword ptr [esp+0Ch], 0
.text:0040C763                 mov     ecx, edx
.text:0040C765                 xor     edx, edx
.text:0040C767                 or      ebx, edx
.text:0040C769                 or      esi, ecx
.text:0040C76B                 mov     edx, ebx
.text:0040C76D                 sub     edx, 0D53E8000h
.text:0040C773                 mov     ecx, esi
.text:0040C775                 sbb     ecx, 19DB1DEh
.text:0040C77B                 mov     [esp+4], ecx
.text:0040C77F                 mov     [esp], edx
.text:0040C782                 call    sub_412670
.text:0040C787                 mov     edx, eax
.text:0040C789                 mov     ecx, [esp+64h]
.text:0040C78D                 shr     eax, 1Fh
.text:0040C790                 dec     eax
.text:0040C791                 and     edx, eax
.text:0040C793                 mov     [ecx+48h], edx
.text:0040C796                 mov     [esp], ebx
.text:0040C799                 mov     [esp+4], esi
.text:0040C79D                 mov     dword ptr [esp+8], 989680h
.text:0040C7A5                 mov     dword ptr [esp+0Ch], 0
.text:0040C7AD                 call    sub_412AE0
.text:0040C7B2                 lea     edx, [eax+eax*4]
.text:0040C7B5                 mov     ebx, [esp+64h]
.text:0040C7B9                 lea     ecx, [edx+edx*4]
.text:0040C7BC                 shl     ecx, 2
.text:0040C7BF                 mov     esi, ecx
.text:0040C7C1                 shr     esi, 1Fh
.text:0040C7C4                 dec     esi
.text:0040C7C5                 and     esi, ecx
.text:0040C7C7                 mov     [ebx+4Ch], esi
.text:0040C7CA                 mov     edx, [esp+48h]
.text:0040C7CE                 xor     esi, esi
.text:0040C7D0                 mov     dword ptr [esp+8], 989680h
.text:0040C7D8                 mov     ebx, [esp+44h]
.text:0040C7DC                 mov     dword ptr [esp+0Ch], 0
.text:0040C7E4                 mov     ecx, edx
.text:0040C7E6                 xor     edx, edx
.text:0040C7E8                 or      ebx, edx
.text:0040C7EA                 or      esi, ecx
.text:0040C7EC                 mov     edx, ebx
.text:0040C7EE                 sub     edx, 0D53E8000h
.text:0040C7F4                 mov     ecx, esi
.text:0040C7F6                 sbb     ecx, 19DB1DEh
.text:0040C7FC                 mov     [esp+4], ecx
.text:0040C800                 mov     [esp], edx
.text:0040C803                 call    sub_412670
.text:0040C808                 mov     edx, eax
.text:0040C80A                 mov     ecx, [esp+64h]
.text:0040C80E                 shr     eax, 1Fh
.text:0040C811                 dec     eax
.text:0040C812                 and     edx, eax
.text:0040C814                 mov     [ecx+40h], edx
.text:0040C817                 mov     [esp+4], esi
.text:0040C81B                 mov     dword ptr [esp+8], 989680h
.text:0040C823                 mov     dword ptr [esp+0Ch], 0
.text:0040C82B                 mov     [esp], ebx
.text:0040C82E                 call    sub_412AE0
.text:0040C833                 lea     edx, [eax+eax*4]
.text:0040C836                 lea     esi, [edx+edx*4]
.text:0040C839                 mov     eax, [esp+64h]
.text:0040C83D                 shl     esi, 2
.text:0040C840                 mov     edx, ebp
.text:0040C842                 mov     ecx, esi
.text:0040C844                 mov     dword ptr [eax+50h], 200h
.text:0040C84B                 shr     ecx, 1Fh
.text:0040C84E                 dec     ecx
.text:0040C84F                 and     ecx, esi
.text:0040C851                 test    ebp, ebp
.text:0040C853                 mov     [eax+44h], ecx
.text:0040C856                 mov     eax, edi
.text:0040C858                 js      short loc_40C892
.text:0040C85A
.text:0040C85A loc_40C85A:                             ; CODE XREF: .text:0040C89A↓j
.text:0040C85A                 xor     esi, esi
.text:0040C85C                 mov     ebp, edi
.text:0040C85E                 mov     ecx, eax
.text:0040C860                 shrd    ecx, edx, 9
.text:0040C864                 mov     ebx, edx
.text:0040C866                 and     ebp, 1FFh
.text:0040C86C                 mov     eax, esi
.text:0040C86E                 sar     ebx, 9
.text:0040C871                 or      eax, ebp
.text:0040C873                 jz      short loc_40C87B
.text:0040C875                 add     ecx, 1
.text:0040C878                 adc     ebx, 0
.text:0040C87B
.text:0040C87B loc_40C87B:                             ; CODE XREF: .text:0040C873↑j
.text:0040C87B                 mov     edx, [esp+64h]
.text:0040C87F                 mov     eax, 1
.text:0040C884                 mov     [edx+58h], ecx
.text:0040C887                 mov     [edx+5Ch], ebx
.text:0040C88A                 add     esp, 1Ch
.text:0040C88D                 pop     ebx
.text:0040C88E                 pop     esi
.text:0040C88F                 pop     edi
.text:0040C890                 pop     ebp
.text:0040C891                 retn
.text:0040C892 ; ---------------------------------------------------------------------------
.text:0040C892
.text:0040C892 loc_40C892:                             ; CODE XREF: .text:0040C858↑j
.text:0040C892                 add     eax, 1FFh
.text:0040C897                 adc     edx, 0
.text:0040C89A                 jmp     short loc_40C85A
.text:0040C89A ; ---------------------------------------------------------------------------
.text:0040C89C                 align 10h
.text:0040C8A0                 push    ebp
.text:0040C8A1                 push    edi
.text:0040C8A2                 xor     edi, edi
.text:0040C8A4                 push    esi
.text:0040C8A5                 xor     esi, esi
.text:0040C8A7                 push    ebx
.text:0040C8A8                 sub     esp, 0Ch
.text:0040C8AB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040C8B2                 call    LoadLibraryA
.text:0040C8B7                 sub     esp, 4
.text:0040C8BA                 mov     ebp, eax
.text:0040C8BC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040C8C4                 mov     [esp], eax
.text:0040C8C7                 call    GetProcAddress
.text:0040C8CC                 sub     esp, 8
.text:0040C8CF                 test    eax, eax
.text:0040C8D1                 jz      short loc_40C902
.text:0040C8D3                 lea     ecx, [esp+8]
.text:0040C8D7                 mov     [esp+4], ecx
.text:0040C8DB                 mov     ecx, [esp+20h]
.text:0040C8DF                 mov     [esp], ecx
.text:0040C8E2                 call    eax
.text:0040C8E4                 sub     esp, 8
.text:0040C8E7                 mov     ebx, eax
.text:0040C8E9                 cmp     eax, 0FFFFFFFFh
.text:0040C8EC                 jz      short loc_40C91D
.text:0040C8EE
.text:0040C8EE loc_40C8EE:                             ; CODE XREF: .text:0040C926↓j
.text:0040C8EE                 mov     esi, [esp+8]
.text:0040C8F2                 mov     ecx, ebx
.text:0040C8F4                 xor     edi, edi
.text:0040C8F6                 xor     ebx, ebx
.text:0040C8F8                 mov     edx, esi
.text:0040C8FA                 mov     esi, ecx
.text:0040C8FC                 or      esi, edi
.text:0040C8FE                 mov     edi, ebx
.text:0040C900                 or      edi, edx
.text:0040C902
.text:0040C902 loc_40C902:                             ; CODE XREF: .text:0040C8D1↑j
.text:0040C902                                         ; .text:0040C924↓j
.text:0040C902                 test    ebp, ebp
.text:0040C904                 jz      short loc_40C911
.text:0040C906                 mov     [esp], ebp
.text:0040C909                 call    FreeLibrary
.text:0040C90E                 sub     esp, 4
.text:0040C911
.text:0040C911 loc_40C911:                             ; CODE XREF: .text:0040C904↑j
.text:0040C911                 add     esp, 0Ch
.text:0040C914                 mov     eax, esi
.text:0040C916                 mov     edx, edi
.text:0040C918                 pop     ebx
.text:0040C919                 pop     esi
.text:0040C91A                 pop     edi
.text:0040C91B                 pop     ebp
.text:0040C91C                 retn
.text:0040C91D ; ---------------------------------------------------------------------------
.text:0040C91D
.text:0040C91D loc_40C91D:                             ; CODE XREF: .text:0040C8EC↑j
.text:0040C91D                 call    GetLastError
.text:0040C922                 test    eax, eax
.text:0040C924                 jnz     short loc_40C902
.text:0040C926                 jmp     short loc_40C8EE
.text:0040C926 ; ---------------------------------------------------------------------------
.text:0040C928                 align 10h
.text:0040C930
.text:0040C930 ; =============== S U B R O U T I N E =======================================
.text:0040C930
.text:0040C930
.text:0040C930 ; int __cdecl sub_40C930(LPCSTR lpFileName, int)
.text:0040C930 sub_40C930      proc near               ; CODE XREF: sub_40AAF0+2381↓p
.text:0040C930
.text:0040C930 lpRootPathName  = dword ptr -8FCh
.text:0040C930 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040C930 nVolumeNameSize = dword ptr -8F4h
.text:0040C930 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040C930 lpMaximumComponentLength= dword ptr -8ECh
.text:0040C930 lpFileSystemFlags= dword ptr -8E8h
.text:0040C930 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040C930 nFileSystemNameSize= dword ptr -8E0h
.text:0040C930 VolumeSerialNumber= dword ptr -8D8h
.text:0040C930 MaximumComponentLength= dword ptr -8D4h
.text:0040C930 FileSystemFlags = dword ptr -8D0h
.text:0040C930 var_8CC         = dword ptr -8CCh
.text:0040C930 var_8C8         = dword ptr -8C8h
.text:0040C930 var_8C4         = dword ptr -8C4h
.text:0040C930 var_8C0         = dword ptr -8C0h
.text:0040C930 var_8BC         = dword ptr -8BCh
.text:0040C930 var_8B8         = dword ptr -8B8h
.text:0040C930 var_8B4         = dword ptr -8B4h
.text:0040C930 var_8B0         = dword ptr -8B0h
.text:0040C930 var_8AC         = dword ptr -8ACh
.text:0040C930 var_8A8         = dword ptr -8A8h
.text:0040C930 var_8A4         = dword ptr -8A4h
.text:0040C930 var_8A0         = dword ptr -8A0h
.text:0040C930 var_89C         = dword ptr -89Ch
.text:0040C930 FileSystemNameBuffer= byte ptr -88Ch
.text:0040C930 VolumeNameBuffer= byte ptr -48Ch
.text:0040C930 var_8C          = dword ptr -8Ch
.text:0040C930 var_88          = dword ptr -88h
.text:0040C930 var_84          = dword ptr -84h
.text:0040C930 var_80          = dword ptr -80h
.text:0040C930 var_7C          = dword ptr -7Ch
.text:0040C930 var_78          = dword ptr -78h
.text:0040C930 var_74          = dword ptr -74h
.text:0040C930 var_70          = dword ptr -70h
.text:0040C930 var_6C          = dword ptr -6Ch
.text:0040C930 var_5C          = dword ptr -5Ch
.text:0040C930 var_58          = dword ptr -58h
.text:0040C930 var_54          = dword ptr -54h
.text:0040C930 var_50          = dword ptr -50h
.text:0040C930 var_4C          = dword ptr -4Ch
.text:0040C930 var_48          = dword ptr -48h
.text:0040C930 var_44          = dword ptr -44h
.text:0040C930 var_3C          = dword ptr -3Ch
.text:0040C930 var_38          = dword ptr -38h
.text:0040C930 var_34          = dword ptr -34h
.text:0040C930 lpFileName      = dword ptr  4
.text:0040C930 arg_4           = dword ptr  8
.text:0040C930
.text:0040C930                 push    ebp
.text:0040C931                 xor     eax, eax
.text:0040C933                 mov     ecx, 0Dh
.text:0040C938                 push    edi
.text:0040C939                 push    esi
.text:0040C93A                 push    ebx
.text:0040C93B                 sub     esp, 8ECh
.text:0040C941                 lea     edi, [esp+8FCh+var_5C]
.text:0040C948                 cld
.text:0040C949                 lea     edx, [esp+8FCh+var_8C]
.text:0040C950                 rep stosd
.text:0040C952                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040C956                 lea     esi, [esp+8FCh+var_5C]
.text:0040C95D                 mov     edx, [esp+8FCh+lpFileName]
.text:0040C964                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040C967                 call    sub_40B390
.text:0040C96C                 test    eax, eax
.text:0040C96E                 mov     edx, 0FFFFFFFFh
.text:0040C973                 jz      loc_40CD04
.text:0040C979                 mov     edx, [esp+8FCh+var_88]
.text:0040C980                 mov     ebp, [esp+8FCh+var_84]
.text:0040C987                 mov     edi, [esp+8FCh+var_80]
.text:0040C98E                 mov     [esp+8FCh+var_58], edx
.text:0040C995                 mov     ecx, [esp+8FCh+var_7C]
.text:0040C99C                 mov     ebx, [esp+8FCh+var_8C]
.text:0040C9A3                 mov     [esp+8FCh+var_54], ebp
.text:0040C9AA                 mov     edx, [esp+8FCh+var_78]
.text:0040C9B1                 mov     ebp, [esp+8FCh+var_74]
.text:0040C9B8                 mov     [esp+8FCh+var_50], edi
.text:0040C9BF                 test    bl, 10h
.text:0040C9C2                 mov     edi, [esp+8FCh+var_70]
.text:0040C9C9                 mov     [esp+8FCh+var_4C], ecx
.text:0040C9D0                 mov     ecx, [esp+8FCh+var_6C]
.text:0040C9D7                 mov     [esp+8FCh+var_5C], ebx
.text:0040C9DE                 mov     [esp+8FCh+var_48], edx
.text:0040C9E5                 mov     [esp+8FCh+var_44], ebp
.text:0040C9EC                 mov     [esp+8FCh+var_3C], edi
.text:0040C9F3                 mov     [esp+8FCh+var_38], ecx
.text:0040C9FA                 jnz     loc_40CD20
.text:0040CA00                 mov     ebx, 1
.text:0040CA05                 mov     [esp+8FCh+var_34], ebx
.text:0040CA0C
.text:0040CA0C loc_40CA0C:                             ; CODE XREF: sub_40C930+406↓j
.text:0040CA0C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040CA13                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040CA17                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040CA1B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040CA1E                 call    sub_40D740
.text:0040CA23                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040CA26                 call    sub_40E850
.text:0040CA2B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040CA2F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040CA33                 mov     ebp, eax
.text:0040CA35                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040CA39                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040CA3D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040CA44                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040CA48                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040CA4C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040CA50                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040CA58                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040CA60                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040CA63                 call    GetVolumeInformationA
.text:0040CA68                 sub     esp, 20h
.text:0040CA6B                 test    eax, eax
.text:0040CA6D                 lea     edi, [esp+8FCh+var_8CC]
.text:0040CA71                 setz    bl
.text:0040CA74                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040CA77                 xor     ebp, ebp
.text:0040CA79                 movzx   edx, bl
.text:0040CA7C                 dec     edx
.text:0040CA7D                 xor     ebx, ebx
.text:0040CA7F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040CA83                 call    free
.text:0040CA88                 cld
.text:0040CA89                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040CA8D                 mov     [esi+1Ch], ecx
.text:0040CA90                 mov     ecx, 0Dh
.text:0040CA95                 rep movsd
.text:0040CA97                 mov     edi, [esp+8FCh+var_8A0]
.text:0040CA9B                 mov     edx, [esp+8FCh+var_89C]
.text:0040CA9F                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040CAA3                 or      ebp, edi
.text:0040CAA5                 mov     esi, [esp+8FCh+var_8B0]
.text:0040CAA9                 mov     edi, [esp+8FCh+arg_4]
.text:0040CAB0                 or      edx, ebx
.text:0040CAB2                 mov     [edi+8], edx
.text:0040CAB5                 xor     edx, edx
.text:0040CAB7                 test    cl, 10h
.text:0040CABA                 setz    dl
.text:0040CABD                 mov     [edi+0Ch], ebp
.text:0040CAC0                 mov     [edi+10h], esi
.text:0040CAC3                 mov     dword ptr [edi+14h], 0
.text:0040CACA                 dec     edx
.text:0040CACB                 and     edx, 0FFFFC000h
.text:0040CAD1                 add     edx, 8000h
.text:0040CAD7                 or      edx, 124h
.text:0040CADD                 test    cl, 1
.text:0040CAE0                 movzx   eax, dx
.text:0040CAE3                 jnz     short loc_40CAEA
.text:0040CAE5                 or      eax, 92h
.text:0040CAEA
.text:0040CAEA loc_40CAEA:                             ; CODE XREF: sub_40C930+1B3↑j
.text:0040CAEA                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040CAEE                 xor     edx, edx
.text:0040CAF0                 xor     ebp, ebp
.text:0040CAF2                 mov     edi, [esp+8FCh+var_8AC]
.text:0040CAF6                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CAFD                 mov     esi, edi
.text:0040CAFF                 or      [ecx], eax
.text:0040CB01                 mov     edi, ebx
.text:0040CB03                 or      edi, ebp
.text:0040CB05                 mov     ebp, edx
.text:0040CB07                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040CB0B                 or      ebp, esi
.text:0040CB0D                 mov     esi, [esp+8FCh+arg_4]
.text:0040CB14                 mov     edx, [esp+8FCh+var_8BC]
.text:0040CB18                 mov     [esi+18h], ebx
.text:0040CB1B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040CB1F                 mov     ecx, edx
.text:0040CB21                 mov     [esi+30h], edi
.text:0040CB24                 xor     edx, edx
.text:0040CB26                 mov     [esi+34h], ebp
.text:0040CB29                 or      ebx, edx
.text:0040CB2B                 xor     esi, esi
.text:0040CB2D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CB35                 or      esi, ecx
.text:0040CB37                 mov     edx, ebx
.text:0040CB39                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CB41                 sub     edx, 0D53E8000h
.text:0040CB47                 mov     ecx, esi
.text:0040CB49                 sbb     ecx, 19DB1DEh
.text:0040CB4F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040CB53                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040CB56                 call    sub_412670
.text:0040CB5B                 mov     edx, eax
.text:0040CB5D                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CB64                 shr     eax, 1Fh
.text:0040CB67                 dec     eax
.text:0040CB68                 and     edx, eax
.text:0040CB6A                 mov     [ecx+38h], edx
.text:0040CB6D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040CB70                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040CB74                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CB7C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CB84                 call    sub_412AE0
.text:0040CB89                 lea     ecx, [eax+eax*4]
.text:0040CB8C                 lea     ebx, [ecx+ecx*4]
.text:0040CB8F                 mov     eax, [esp+8FCh+arg_4]
.text:0040CB96                 shl     ebx, 2
.text:0040CB99                 mov     esi, ebx
.text:0040CB9B                 shr     esi, 1Fh
.text:0040CB9E                 dec     esi
.text:0040CB9F                 and     esi, ebx
.text:0040CBA1                 mov     [eax+3Ch], esi
.text:0040CBA4                 mov     edx, [esp+8FCh+var_8C4]
.text:0040CBA8                 xor     esi, esi
.text:0040CBAA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CBB2                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040CBB6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CBBE                 mov     ecx, edx
.text:0040CBC0                 xor     edx, edx
.text:0040CBC2                 or      ebx, edx
.text:0040CBC4                 or      esi, ecx
.text:0040CBC6                 mov     edx, ebx
.text:0040CBC8                 sub     edx, 0D53E8000h
.text:0040CBCE                 mov     ecx, esi
.text:0040CBD0                 sbb     ecx, 19DB1DEh
.text:0040CBD6                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040CBDA                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040CBDD                 call    sub_412670
.text:0040CBE2                 mov     edx, eax
.text:0040CBE4                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CBEB                 shr     eax, 1Fh
.text:0040CBEE                 dec     eax
.text:0040CBEF                 and     edx, eax
.text:0040CBF1                 mov     [ecx+48h], edx
.text:0040CBF4                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040CBF7                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040CBFB                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CC03                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CC0B                 call    sub_412AE0
.text:0040CC10                 lea     ecx, [eax+eax*4]
.text:0040CC13                 lea     ebx, [ecx+ecx*4]
.text:0040CC16                 mov     eax, [esp+8FCh+arg_4]
.text:0040CC1D                 shl     ebx, 2
.text:0040CC20                 mov     esi, ebx
.text:0040CC22                 shr     esi, 1Fh
.text:0040CC25                 dec     esi
.text:0040CC26                 and     esi, ebx
.text:0040CC28                 mov     [eax+4Ch], esi
.text:0040CC2B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040CC2F                 xor     esi, esi
.text:0040CC31                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CC39                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040CC3D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CC45                 mov     ecx, edx
.text:0040CC47                 xor     edx, edx
.text:0040CC49                 or      ebx, edx
.text:0040CC4B                 or      esi, ecx
.text:0040CC4D                 mov     edx, ebx
.text:0040CC4F                 sub     edx, 0D53E8000h
.text:0040CC55                 mov     ecx, esi
.text:0040CC57                 sbb     ecx, 19DB1DEh
.text:0040CC5D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040CC61                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040CC64                 call    sub_412670
.text:0040CC69                 mov     edx, eax
.text:0040CC6B                 mov     ecx, [esp+8FCh+arg_4]
.text:0040CC72                 shr     eax, 1Fh
.text:0040CC75                 dec     eax
.text:0040CC76                 and     edx, eax
.text:0040CC78                 mov     [ecx+40h], edx
.text:0040CC7B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040CC7E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040CC82                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040CC8A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040CC92                 call    sub_412AE0
.text:0040CC97                 lea     ebx, [eax+eax*4]
.text:0040CC9A                 mov     esi, [esp+8FCh+arg_4]
.text:0040CCA1                 lea     edx, [ebx+ebx*4]
.text:0040CCA4                 shl     edx, 2
.text:0040CCA7                 mov     eax, edi
.text:0040CCA9                 mov     ecx, edx
.text:0040CCAB                 mov     dword ptr [esi+50h], 200h
.text:0040CCB2                 shr     ecx, 1Fh
.text:0040CCB5                 dec     ecx
.text:0040CCB6                 and     ecx, edx
.text:0040CCB8                 test    ebp, ebp
.text:0040CCBA                 mov     edx, ebp
.text:0040CCBC                 mov     [esi+44h], ecx
.text:0040CCBF                 js      short loc_40CD11
.text:0040CCC1
.text:0040CCC1 loc_40CCC1:                             ; CODE XREF: sub_40C930+3E9↓j
.text:0040CCC1                 xor     esi, esi
.text:0040CCC3                 mov     ebp, edi
.text:0040CCC5                 mov     ecx, eax
.text:0040CCC7                 shrd    ecx, edx, 9
.text:0040CCCB                 mov     ebx, edx
.text:0040CCCD                 and     ebp, 1FFh
.text:0040CCD3                 mov     eax, esi
.text:0040CCD5                 sar     ebx, 9
.text:0040CCD8                 or      eax, ebp
.text:0040CCDA                 jz      short loc_40CCE2
.text:0040CCDC                 add     ecx, 1
.text:0040CCDF                 adc     ebx, 0
.text:0040CCE2
.text:0040CCE2 loc_40CCE2:                             ; CODE XREF: sub_40C930+3AA↑j
.text:0040CCE2                 mov     edx, [esp+8FCh+arg_4]
.text:0040CCE9                 mov     [edx+5Ch], ebx
.text:0040CCEC                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040CCF3                 mov     [edx+58h], ecx
.text:0040CCF6                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040CCFA                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040CCFD                 call    sub_40BB50
.text:0040CD02                 xor     edx, edx
.text:0040CD04
.text:0040CD04 loc_40CD04:                             ; CODE XREF: sub_40C930+43↑j
.text:0040CD04                 add     esp, 8ECh
.text:0040CD0A                 mov     eax, edx
.text:0040CD0C                 pop     ebx
.text:0040CD0D                 pop     esi
.text:0040CD0E                 pop     edi
.text:0040CD0F                 pop     ebp
.text:0040CD10                 retn
.text:0040CD11 ; ---------------------------------------------------------------------------
.text:0040CD11
.text:0040CD11 loc_40CD11:                             ; CODE XREF: sub_40C930+38F↑j
.text:0040CD11                 add     eax, 1FFh
.text:0040CD16                 adc     edx, 0
.text:0040CD19                 jmp     short loc_40CCC1
.text:0040CD19 ; ---------------------------------------------------------------------------
.text:0040CD1B                 align 10h
.text:0040CD20
.text:0040CD20 loc_40CD20:                             ; CODE XREF: sub_40C930+CA↑j
.text:0040CD20                 mov     eax, [esp+8FCh+lpFileName]
.text:0040CD27                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040CD2A                 call    sub_40B500
.text:0040CD2F                 mov     [esp+8FCh+var_34], eax
.text:0040CD36                 jmp     loc_40CA0C
.text:0040CD36 sub_40C930      endp
.text:0040CD36
.text:0040CD36 ; ---------------------------------------------------------------------------
.text:0040CD3B                 align 10h
.text:0040CD40 ; START OF FUNCTION CHUNK FOR sub_40AAF0
.text:0040CD40
.text:0040CD40 loc_40CD40:                             ; CODE XREF: sub_40AAF0+26↑j
.text:0040CD40                 cld
.text:0040CD41                 sub     esp, 2Ch
.text:0040CD44                 xor     eax, eax
.text:0040CD46                 mov     [esp+2Ch+var_10], ebx
.text:0040CD4A                 mov     ecx, 18h
.text:0040CD4F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040CD53                 mov     [esp+2Ch+var_C], esi
.text:0040CD57                 mov     esi, [esp+2Ch+arg_4]
.text:0040CD5B                 test    ebx, ebx
.text:0040CD5D                 mov     [esp+2Ch+var_8], edi
.text:0040CD61                 mov     edi, esi
.text:0040CD63                 mov     [esp+2Ch+var_4], ebp
.text:0040CD67                 rep stosd
.text:0040CD69                 jz      short loc_40CD70
.text:0040CD6B                 cmp     byte ptr [ebx], 0
.text:0040CD6E                 jnz     short loc_40CD88
.text:0040CD70
.text:0040CD70 loc_40CD70:                             ; CODE XREF: sub_40AAF0+2279↑j
.text:0040CD70                 xor     edx, edx
.text:0040CD72
.text:0040CD72 loc_40CD72:                             ; CODE XREF: sub_40AAF0+22AF↓j
.text:0040CD72                                         ; sub_40AAF0+2358↓j
.text:0040CD72                 mov     ebx, [esp+2Ch+var_10]
.text:0040CD76                 mov     eax, edx
.text:0040CD78                 mov     esi, [esp+2Ch+var_C]
.text:0040CD7C                 mov     edi, [esp+2Ch+var_8]
.text:0040CD80                 mov     ebp, [esp+2Ch+var_4]
.text:0040CD84                 add     esp, 2Ch
.text:0040CD87                 retn
.text:0040CD88 ; ---------------------------------------------------------------------------
.text:0040CD88
.text:0040CD88 loc_40CD88:                             ; CODE XREF: sub_40AAF0+227E↑j
.text:0040CD88                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040CD90                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040CD93                 call    sub_40D130
.text:0040CD98                 test    eax, eax
.text:0040CD9A                 mov     edx, 0FFFFFFFFh
.text:0040CD9F                 jnz     short loc_40CD72
.text:0040CDA1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040CDA4                 call    sub_40D5E0
.text:0040CDA9                 mov     [esp+2Ch+lpFileName], eax
.text:0040CDAC                 call    sub_40E850
.text:0040CDB1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040CDB4                 mov     ebp, eax
.text:0040CDB6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040CDBE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040CDC6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040CDCE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040CDD6                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040CDDE                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040CDE6                 call    CreateFileA
.text:0040CDEB                 sub     esp, 1Ch
.text:0040CDEE                 mov     ebx, eax
.text:0040CDF0                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CDF4                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040CDF7                 call    sub_40B680
.text:0040CDFC                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040CDFF                 mov     edi, eax
.text:0040CE01                 call    CloseHandle
.text:0040CE06                 sub     esp, 4
.text:0040CE09                 cmp     edi, 0FFFFFFFFh
.text:0040CE0C                 jz      short loc_40CE6A
.text:0040CE0E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CE12                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040CE15                 call    sub_40BB50
.text:0040CE1A
.text:0040CE1A loc_40CE1A:                             ; CODE XREF: sub_40AAF0+2388↓j
.text:0040CE1A                 mov     edx, [esi]
.text:0040CE1C                 and     edx, 0F000h
.text:0040CE22                 cmp     edx, 4000h
.text:0040CE28                 jz      short loc_40CE5D
.text:0040CE2A
.text:0040CE2A loc_40CE2A:                             ; CODE XREF: sub_40AAF0+2378↓j
.text:0040CE2A                 cmp     edi, 0FFFFFFFFh
.text:0040CE2D                 jz      short loc_40CE4D
.text:0040CE2F
.text:0040CE2F loc_40CE2F:                             ; CODE XREF: sub_40AAF0+236B↓j
.text:0040CE2F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040CE36                 call    SetErrorMode
.text:0040CE3B                 sub     esp, 4
.text:0040CE3E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040CE41                 call    free
.text:0040CE46                 mov     edx, edi
.text:0040CE48                 jmp     loc_40CD72
.text:0040CE4D ; ---------------------------------------------------------------------------
.text:0040CE4D
.text:0040CE4D loc_40CE4D:                             ; CODE XREF: sub_40AAF0+233D↑j
.text:0040CE4D                 call    sub_40D110
.text:0040CE52                 mov     esi, eax
.text:0040CE54                 call    _errno
.text:0040CE59                 mov     [eax], esi
.text:0040CE5B                 jmp     short loc_40CE2F
.text:0040CE5D ; ---------------------------------------------------------------------------
.text:0040CE5D
.text:0040CE5D loc_40CE5D:                             ; CODE XREF: sub_40AAF0+2338↑j
.text:0040CE5D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040CE60                 call    sub_40B500
.text:0040CE65                 mov     [esi+18h], eax
.text:0040CE68                 jmp     short loc_40CE2A
.text:0040CE6A ; ---------------------------------------------------------------------------
.text:0040CE6A
.text:0040CE6A loc_40CE6A:                             ; CODE XREF: sub_40AAF0+231C↑j
.text:0040CE6A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040CE6E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040CE71                 call    sub_40C930
.text:0040CE76                 mov     edi, eax
.text:0040CE78                 jmp     short loc_40CE1A
.text:0040CE78 ; END OF FUNCTION CHUNK FOR sub_40AAF0
.text:0040CE78 ; ---------------------------------------------------------------------------
.text:0040CE7A                 align 10h
.text:0040CE80
.text:0040CE80 ; =============== S U B R O U T I N E =======================================
.text:0040CE80
.text:0040CE80 ; Attributes: info_from_lumina
.text:0040CE80
.text:0040CE80 ___get_errno    proc near               ; CODE XREF: sub_40D110+B↓p
.text:0040CE80
.text:0040CE80 arg_0           = dword ptr  4
.text:0040CE80
.text:0040CE80                 mov     eax, [esp+arg_0]
.text:0040CE84                 cmp     eax, 53h ; 'S'
.text:0040CE87                 jg      loc_40CF80
.text:0040CE8D                 cmp     eax, 52h ; 'R'
.text:0040CE90                 jge     short loc_40CEE2
.text:0040CE92                 cmp     eax, 0Fh
.text:0040CE95                 jz      short loc_40CEB0
.text:0040CE97                 cmp     eax, 0Fh
.text:0040CE9A                 jg      short loc_40CF10
.text:0040CE9C                 cmp     eax, 9
.text:0040CE9F                 jg      short loc_40CEF0
.text:0040CEA1                 cmp     eax, 7
.text:0040CEA4                 jge     short loc_40CEE9
.text:0040CEA6                 cmp     eax, 3
.text:0040CEA9                 jg      short loc_40CECA
.text:0040CEAB                 cmp     eax, 2
.text:0040CEAE                 jl      short loc_40CEC3
.text:0040CEB0
.text:0040CEB0 loc_40CEB0:                             ; CODE XREF: ___get_errno+15↑j
.text:0040CEB0                                         ; ___get_errno+9D↓j ...
.text:0040CEB0                 mov     edx, 2
.text:0040CEB5                 lea     esi, [esi+0]
.text:0040CEB9                 lea     edi, [edi+0]
.text:0040CEC0
.text:0040CEC0 loc_40CEC0:                             ; CODE XREF: ___get_errno+48↓j
.text:0040CEC0                                         ; ___get_errno+59↓j ...
.text:0040CEC0                 mov     eax, edx
.text:0040CEC2                 retn
.text:0040CEC3 ; ---------------------------------------------------------------------------
.text:0040CEC3
.text:0040CEC3 loc_40CEC3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040CEC3                                         ; ___get_errno+78↓j ...
.text:0040CEC3                 mov     edx, 16h
.text:0040CEC8                 jmp     short loc_40CEC0
.text:0040CECA ; ---------------------------------------------------------------------------
.text:0040CECA
.text:0040CECA loc_40CECA:                             ; CODE XREF: ___get_errno+29↑j
.text:0040CECA                 cmp     eax, 5
.text:0040CECD                 jz      short loc_40CEE2
.text:0040CECF                 cmp     eax, 5
.text:0040CED2                 jg      short loc_40CEDB
.text:0040CED4                 mov     edx, 18h
.text:0040CED9                 jmp     short loc_40CEC0
.text:0040CEDB ; ---------------------------------------------------------------------------
.text:0040CEDB
.text:0040CEDB loc_40CEDB:                             ; CODE XREF: ___get_errno+52↑j
.text:0040CEDB                                         ; ___get_errno+180↓j
.text:0040CEDB                 mov     edx, 9
.text:0040CEE0                 jmp     short loc_40CEC0
.text:0040CEE2 ; ---------------------------------------------------------------------------
.text:0040CEE2
.text:0040CEE2 loc_40CEE2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040CEE2                                         ; ___get_errno+4D↑j ...
.text:0040CEE2                 mov     edx, 0Dh
.text:0040CEE7                 jmp     short loc_40CEC0
.text:0040CEE9 ; ---------------------------------------------------------------------------
.text:0040CEE9
.text:0040CEE9 loc_40CEE9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040CEE9                                         ; ___get_errno+73↓j ...
.text:0040CEE9                 mov     edx, 0Ch
.text:0040CEEE                 jmp     short loc_40CEC0
.text:0040CEF0 ; ---------------------------------------------------------------------------
.text:0040CEF0
.text:0040CEF0 loc_40CEF0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040CEF0                 cmp     eax, 0Dh
.text:0040CEF3                 jg      short loc_40CEE9
.text:0040CEF5                 cmp     eax, 0Ch
.text:0040CEF8                 jge     short loc_40CEC3
.text:0040CEFA                 cmp     eax, 0Ah
.text:0040CEFD                 mov     edx, 7
.text:0040CF02                 jz      short loc_40CEC0
.text:0040CF04                 cmp     eax, 0Bh
.text:0040CF07                 jnz     short loc_40CEC3
.text:0040CF09
.text:0040CF09 loc_40CF09:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040CF09                 mov     edx, 8
.text:0040CF0E                 jmp     short loc_40CEC0
.text:0040CF10 ; ---------------------------------------------------------------------------
.text:0040CF10
.text:0040CF10 loc_40CF10:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040CF10                 cmp     eax, 22h ; '"'
.text:0040CF13                 jg      short loc_40CF44
.text:0040CF15                 cmp     eax, 16h
.text:0040CF18                 jge     short loc_40CEE2
.text:0040CF1A                 cmp     eax, 12h
.text:0040CF1D                 jz      short loc_40CEB0
.text:0040CF1F                 cmp     eax, 12h
.text:0040CF22                 jg      short loc_40CF35
.text:0040CF24                 cmp     eax, 10h
.text:0040CF27                 jz      short loc_40CEE2
.text:0040CF29                 mov     edx, 12h
.text:0040CF2E                 cmp     eax, 11h
.text:0040CF31
.text:0040CF31 loc_40CF31:                             ; CODE XREF: ___get_errno+172↓j
.text:0040CF31                                         ; ___get_errno+24C↓j ...
.text:0040CF31                 jnz     short loc_40CEC3
.text:0040CF33                 jmp     short loc_40CEC0
.text:0040CF35 ; ---------------------------------------------------------------------------
.text:0040CF35
.text:0040CF35 loc_40CF35:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040CF35                 cmp     eax, 14h
.text:0040CF38                 jle     short loc_40CEE2
.text:0040CF3A
.text:0040CF3A loc_40CF3A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040CF3A                 mov     edx, 10h
.text:0040CF3F                 jmp     loc_40CEC0
.text:0040CF44 ; ---------------------------------------------------------------------------
.text:0040CF44
.text:0040CF44 loc_40CF44:                             ; CODE XREF: ___get_errno+93↑j
.text:0040CF44                 cmp     eax, 41h ; 'A'
.text:0040CF47                 jz      short loc_40CEE2
.text:0040CF49                 cmp     eax, 41h ; 'A'
.text:0040CF4C                 jg      short loc_40CF61
.text:0040CF4E                 cmp     eax, 24h ; '$'
.text:0040CF51                 jz      short loc_40CEE2
.text:0040CF53                 cmp     eax, 35h ; '5'
.text:0040CF56                 jnz     loc_40CEC3
.text:0040CF5C                 jmp     loc_40CEB0
.text:0040CF61 ; ---------------------------------------------------------------------------
.text:0040CF61
.text:0040CF61 loc_40CF61:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040CF61                 cmp     eax, 43h ; 'C'
.text:0040CF64                 jz      loc_40CEB0
.text:0040CF6A                 cmp     eax, 50h ; 'P'
.text:0040CF6D                 jnz     loc_40CEC3
.text:0040CF73
.text:0040CF73 loc_40CF73:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040CF73                 mov     edx, 11h
.text:0040CF78                 jmp     loc_40CEC0
.text:0040CF78 ; ---------------------------------------------------------------------------
.text:0040CF7D                 align 10h
.text:0040CF80
.text:0040CF80 loc_40CF80:                             ; CODE XREF: ___get_errno+7↑j
.text:0040CF80                 cmp     eax, 0A1h ; '¡'
.text:0040CF85                 jz      loc_40CEB0
.text:0040CF8B                 cmp     eax, 0A1h ; '¡'
.text:0040CF90                 jg      loc_40D040
.text:0040CF96                 cmp     eax, 81h
.text:0040CF9B                 jg      short loc_40D005
.text:0040CF9D                 cmp     eax, 80h ; '€'
.text:0040CFA2                 mov     edx, 0Ah
.text:0040CFA7                 jge     loc_40CEC0
.text:0040CFAD                 cmp     eax, 6Ch ; 'l'
.text:0040CFB0                 jz      loc_40CEE2
.text:0040CFB6                 cmp     eax, 6Ch ; 'l'
.text:0040CFB9                 jg      short loc_40CFD7
.text:0040CFBB                 cmp     eax, 57h ; 'W'
.text:0040CFBE                 jz      loc_40CEC3
.text:0040CFC4                 cmp     eax, 59h ; 'Y'
.text:0040CFC7                 jnz     loc_40CEC3
.text:0040CFCD
.text:0040CFCD loc_40CFCD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040CFCD                                         ; ___get_errno+23C↓j
.text:0040CFCD                 mov     edx, 0Bh
.text:0040CFD2                 jmp     loc_40CEC0
.text:0040CFD7 ; ---------------------------------------------------------------------------
.text:0040CFD7
.text:0040CFD7 loc_40CFD7:                             ; CODE XREF: ___get_errno+139↑j
.text:0040CFD7                 cmp     eax, 70h ; 'p'
.text:0040CFDA                 mov     edx, 1Ch
.text:0040CFDF                 jz      loc_40CEC0
.text:0040CFE5                 cmp     eax, 70h ; 'p'
.text:0040CFE8                 jg      short loc_40CFF7
.text:0040CFEA                 mov     edx, 20h ; ' '
.text:0040CFEF                 cmp     eax, 6Dh ; 'm'
.text:0040CFF2                 jmp     loc_40CF31
.text:0040CFF7 ; ---------------------------------------------------------------------------
.text:0040CFF7
.text:0040CFF7 loc_40CFF7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040CFF7                 cmp     eax, 72h ; 'r'
.text:0040CFFA
.text:0040CFFA loc_40CFFA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040CFFA                 jnz     loc_40CEC3
.text:0040D000                 jmp     loc_40CEDB
.text:0040D005 ; ---------------------------------------------------------------------------
.text:0040D005
.text:0040D005 loc_40D005:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040D005                 cmp     eax, 84h ; '„'
.text:0040D00A                 jz      loc_40CEE2
.text:0040D010                 cmp     eax, 84h ; '„'
.text:0040D015                 jg      short loc_40D01E
.text:0040D017                 cmp     eax, 82h ; '‚'
.text:0040D01C                 jmp     short loc_40CFFA
.text:0040D01E ; ---------------------------------------------------------------------------
.text:0040D01E
.text:0040D01E loc_40D01E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040D01E                 cmp     eax, 91h ; '‘'
.text:0040D023                 mov     edx, 29h ; ')'
.text:0040D028                 jz      loc_40CEC0
.text:0040D02E                 cmp     eax, 9Eh ; 'ž'
.text:0040D033
.text:0040D033 loc_40D033:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040D033                 jnz     loc_40CEC3
.text:0040D039                 jmp     loc_40CEE2
.text:0040D039 ; ---------------------------------------------------------------------------
.text:0040D03E                 align 10h
.text:0040D040
.text:0040D040 loc_40D040:                             ; CODE XREF: ___get_errno+110↑j
.text:0040D040                 cmp     eax, 0CEh ; 'Î'
.text:0040D045                 jz      loc_40CEB0
.text:0040D04B                 cmp     eax, 0CEh ; 'Î'
.text:0040D050                 jg      short loc_40D0A0
.text:0040D052                 cmp     eax, 0AAh ; 'ª'
.text:0040D057                 jz      loc_40CF3A
.text:0040D05D                 cmp     eax, 0AAh ; 'ª'
.text:0040D062                 jg      short loc_40D076
.text:0040D064                 cmp     eax, 0A4h ; '¤'
.text:0040D069                 jz      loc_40CFCD
.text:0040D06F                 cmp     eax, 0A7h ; '§'
.text:0040D074                 jmp     short loc_40D033
.text:0040D076 ; ---------------------------------------------------------------------------
.text:0040D076
.text:0040D076 loc_40D076:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040D076                 cmp     eax, 0B7h ; '·'
.text:0040D07B                 jz      loc_40CF73
.text:0040D081                 cmp     eax, 0B7h ; '·'
.text:0040D086                 jl      loc_40CEC3
.text:0040D08C                 sub     eax, 0BCh ; '¼'
.text:0040D091                 cmp     eax, 0Eh
.text:0040D094                 ja      loc_40CEC3
.text:0040D09A                 jmp     loc_40CF09
.text:0040D09A ; ---------------------------------------------------------------------------
.text:0040D09F                 align 10h
.text:0040D0A0
.text:0040D0A0 loc_40D0A0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040D0A0                 cmp     eax, 46Bh
.text:0040D0A5                 mov     edx, 24h ; '$'
.text:0040D0AA                 jz      loc_40CEC0
.text:0040D0B0                 cmp     eax, 46Bh
.text:0040D0B5                 jg      short loc_40D0D1
.text:0040D0B7                 cmp     eax, 0D7h ; '×'
.text:0040D0BC                 jz      loc_40CFCD
.text:0040D0C2                 mov     edx, 5
.text:0040D0C7                 cmp     eax, 45Dh
.text:0040D0CC                 jmp     loc_40CF31
.text:0040D0D1 ; ---------------------------------------------------------------------------
.text:0040D0D1
.text:0040D0D1 loc_40D0D1:                             ; CODE XREF: ___get_errno+235↑j
.text:0040D0D1                 cmp     eax, 4D5h
.text:0040D0D6                 mov     edx, 4
.text:0040D0DB                 jz      loc_40CEC0
.text:0040D0E1                 cmp     eax, 4D5h
.text:0040D0E6                 jg      short loc_40D0F7
.text:0040D0E8                 mov     edx, 13h
.text:0040D0ED                 cmp     eax, 4B0h
.text:0040D0F2                 jmp     loc_40CF31
.text:0040D0F7 ; ---------------------------------------------------------------------------
.text:0040D0F7
.text:0040D0F7 loc_40D0F7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040D0F7                 cmp     eax, 718h
.text:0040D0FC                 jnz     loc_40CEC3
.text:0040D102                 jmp     loc_40CEE9
.text:0040D102 ___get_errno    endp
.text:0040D102
.text:0040D102 ; ---------------------------------------------------------------------------
.text:0040D107                 align 10h
.text:0040D110
.text:0040D110 ; =============== S U B R O U T I N E =======================================
.text:0040D110
.text:0040D110
.text:0040D110 sub_40D110      proc near               ; CODE XREF: sub_40AB70:loc_40ABDC↑p
.text:0040D110                                         ; sub_40AD90:loc_40ADE2↑p ...
.text:0040D110
.text:0040D110 var_C           = dword ptr -0Ch
.text:0040D110
.text:0040D110                 sub     esp, 0Ch
.text:0040D113                 call    GetLastError
.text:0040D118                 mov     [esp+0Ch+var_C], eax
.text:0040D11B                 call    ___get_errno
.text:0040D120                 add     esp, 0Ch
.text:0040D123                 retn
.text:0040D123 sub_40D110      endp
.text:0040D123
.text:0040D123 ; ---------------------------------------------------------------------------
.text:0040D124                 align 10h
.text:0040D130
.text:0040D130 ; =============== S U B R O U T I N E =======================================
.text:0040D130
.text:0040D130
.text:0040D130 ; int __cdecl sub_40D130(LPCSTR lpFileName, int)
.text:0040D130 sub_40D130      proc near               ; CODE XREF: sub_40AB70+29↑p
.text:0040D130                                         ; sub_40AB70+3D↑p ...
.text:0040D130
.text:0040D130 uMode           = dword ptr -1Ch
.text:0040D130 var_10          = dword ptr -10h
.text:0040D130 var_C           = dword ptr -0Ch
.text:0040D130 var_8           = dword ptr -8
.text:0040D130 var_4           = dword ptr -4
.text:0040D130 lpFileName      = dword ptr  4
.text:0040D130 arg_4           = dword ptr  8
.text:0040D130
.text:0040D130                 sub     esp, 1Ch
.text:0040D133                 mov     [esp+1Ch+var_10], ebx
.text:0040D137                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040D13B                 mov     [esp+1Ch+var_4], ebp
.text:0040D13F                 xor     ebp, ebp
.text:0040D141                 test    ebx, ebx
.text:0040D143                 mov     [esp+1Ch+var_C], esi
.text:0040D147                 mov     esi, [esp+1Ch+arg_4]
.text:0040D14B                 mov     [esp+1Ch+var_8], edi
.text:0040D14F                 jz      short loc_40D159
.text:0040D151                 test    esi, 0FFFFFFE8h
.text:0040D157                 jz      short loc_40D180
.text:0040D159
.text:0040D159 loc_40D159:                             ; CODE XREF: sub_40D130+1F↑j
.text:0040D159                 call    _errno
.text:0040D15E                 mov     dword ptr [eax], 16h
.text:0040D164
.text:0040D164 loc_40D164:                             ; CODE XREF: sub_40D130+B1↓j
.text:0040D164                 mov     eax, 0FFFFFFFFh
.text:0040D169
.text:0040D169 loc_40D169:                             ; CODE XREF: sub_40D130+86↓j
.text:0040D169                                         ; sub_40D130+A4↓j
.text:0040D169                 mov     ebx, [esp+1Ch+var_10]
.text:0040D16D                 mov     esi, [esp+1Ch+var_C]
.text:0040D171                 mov     edi, [esp+1Ch+var_8]
.text:0040D175                 mov     ebp, [esp+1Ch+var_4]
.text:0040D179                 add     esp, 1Ch
.text:0040D17C                 retn
.text:0040D17C ; ---------------------------------------------------------------------------
.text:0040D17D                 align 10h
.text:0040D180
.text:0040D180 loc_40D180:                             ; CODE XREF: sub_40D130+27↑j
.text:0040D180                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040D187                 call    SetErrorMode
.text:0040D18C                 sub     esp, 4
.text:0040D18F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040D192                 call    GetFileAttributesA
.text:0040D197                 sub     esp, 4
.text:0040D19A                 mov     edi, eax
.text:0040D19C                 cmp     eax, 0FFFFFFFFh
.text:0040D19F                 jz      short loc_40D1E3
.text:0040D1A1
.text:0040D1A1 loc_40D1A1:                             ; CODE XREF: sub_40D130+C6↓j
.text:0040D1A1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040D1A8                 call    SetErrorMode
.text:0040D1AD                 sub     esp, 4
.text:0040D1B0                 mov     eax, 0FFFFFFFFh
.text:0040D1B5                 inc     ebp
.text:0040D1B6                 jz      short loc_40D169
.text:0040D1B8                 test    esi, 10h
.text:0040D1BE                 jz      short loc_40D1C8
.text:0040D1C0                 test    edi, 10h
.text:0040D1C6                 jz      short loc_40D1D6
.text:0040D1C8
.text:0040D1C8 loc_40D1C8:                             ; CODE XREF: sub_40D130+8E↑j
.text:0040D1C8                 and     esi, 2
.text:0040D1CB                 jz      short loc_40D1D2
.text:0040D1CD                 and     edi, 1
.text:0040D1D0                 jnz     short loc_40D1D6
.text:0040D1D2
.text:0040D1D2 loc_40D1D2:                             ; CODE XREF: sub_40D130+9B↑j
.text:0040D1D2                 xor     eax, eax
.text:0040D1D4                 jmp     short loc_40D169
.text:0040D1D6 ; ---------------------------------------------------------------------------
.text:0040D1D6
.text:0040D1D6 loc_40D1D6:                             ; CODE XREF: sub_40D130+96↑j
.text:0040D1D6                                         ; sub_40D130+A0↑j
.text:0040D1D6                 call    _errno
.text:0040D1DB                 mov     dword ptr [eax], 0Dh
.text:0040D1E1                 jmp     short loc_40D164
.text:0040D1E3 ; ---------------------------------------------------------------------------
.text:0040D1E3
.text:0040D1E3 loc_40D1E3:                             ; CODE XREF: sub_40D130+6F↑j
.text:0040D1E3                 call    sub_40D110
.text:0040D1E8                 mov     ebp, eax
.text:0040D1EA                 call    _errno
.text:0040D1EF                 mov     [eax], ebp
.text:0040D1F1                 mov     ebp, 0FFFFFFFFh
.text:0040D1F6                 jmp     short loc_40D1A1
.text:0040D1F6 sub_40D130      endp
.text:0040D1F6
.text:0040D1F6 ; ---------------------------------------------------------------------------
.text:0040D1F8                 align 10h
.text:0040D200
.text:0040D200 ; =============== S U B R O U T I N E =======================================
.text:0040D200
.text:0040D200
.text:0040D200 ; int __cdecl sub_40D200(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040D200 sub_40D200      proc near               ; CODE XREF: sub_40D380+93↓p
.text:0040D200
.text:0040D200 pvReserved      = dword ptr -35Ch
.text:0040D200 pUnkOuter       = dword ptr -358h
.text:0040D200 dwClsContext    = dword ptr -354h
.text:0040D200 riid            = dword ptr -350h
.text:0040D200 ppv             = dword ptr -34Ch
.text:0040D200 cchWideChar     = dword ptr -348h
.text:0040D200 var_334         = byte ptr -334h
.text:0040D200 var_330         = dword ptr -330h
.text:0040D200 String2         = byte ptr -32Ch
.text:0040D200 WideCharStr     = word ptr -21Ch
.text:0040D200 lpMultiByteStr  = dword ptr  4
.text:0040D200 lpString1       = dword ptr  8
.text:0040D200
.text:0040D200                 push    edi
.text:0040D201                 push    esi
.text:0040D202                 push    ebx
.text:0040D203                 sub     esp, 350h
.text:0040D209                 mov     edi, [esp+35Ch+lpString1]
.text:0040D210                 mov     byte ptr [edi], 0
.text:0040D213                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040D21A                 call    OleInitialize
.text:0040D21F                 sub     esp, 4
.text:0040D222                 cmp     eax, 1
.text:0040D225                 ja      loc_40D35F
.text:0040D22B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040D233                 lea     ecx, [esp+35Ch+var_330]
.text:0040D237                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040D23B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040D243                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040D24B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040D252                 call    CoCreateInstance
.text:0040D257                 sub     esp, 14h
.text:0040D25A                 test    eax, eax
.text:0040D25C                 js      loc_40D35F
.text:0040D262                 mov     ebx, [esp+35Ch+var_330]
.text:0040D266                 lea     edx, [esp+35Ch+var_334]
.text:0040D26A                 mov     esi, [ebx]
.text:0040D26C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040D270                 mov     [esp+35Ch+pvReserved], ebx
.text:0040D273                 xor     ebx, ebx
.text:0040D275                 mov     [esp+35Ch+pUnkOuter], offset dword_411E50
.text:0040D27D                 call    dword ptr [esi]
.text:0040D27F                 sub     esp, 0Ch
.text:0040D282                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040D289                 call    AreFileApisANSI
.text:0040D28E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040D296                 test    eax, eax
.text:0040D298                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040D29F                 setz    bl
.text:0040D2A2                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040D2A6                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040D2AE                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040D2B2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040D2BA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040D2BD                 call    MultiByteToWideChar
.text:0040D2C2                 sub     esp, 18h
.text:0040D2C5                 test    eax, eax
.text:0040D2C7                 js      loc_40D35F
.text:0040D2CD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040D2D1                 mov     ebx, [edx]
.text:0040D2D3                 mov     [esp+35Ch+dwClsContext], 0
.text:0040D2DB                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040D2DF                 mov     [esp+35Ch+pvReserved], edx
.text:0040D2E2                 call    dword ptr [ebx+14h]
.text:0040D2E5                 sub     esp, 0Ch
.text:0040D2E8                 test    eax, eax
.text:0040D2EA                 js      short loc_40D35F
.text:0040D2EC                 mov     ebx, [esp+35Ch+var_330]
.text:0040D2F0                 lea     esi, [esp+35Ch+String2]
.text:0040D2F4                 mov     ecx, [ebx]
.text:0040D2F6                 mov     [esp+35Ch+pvReserved], ebx
.text:0040D2F9                 mov     [esp+35Ch+ppv], 0
.text:0040D301                 mov     [esp+35Ch+riid], 0
.text:0040D309                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040D311                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040D315                 call    dword ptr [ecx+0Ch]
.text:0040D318                 sub     esp, 14h
.text:0040D31B                 mov     ebx, eax
.text:0040D31D                 test    eax, eax
.text:0040D31F                 js      short loc_40D35F
.text:0040D321                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040D325                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040D328                 call    lstrcpyA
.text:0040D32D                 sub     esp, 8
.text:0040D330                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040D334                 mov     ecx, [edi]
.text:0040D336                 mov     [esp+35Ch+pvReserved], edi
.text:0040D339                 call    dword ptr [ecx+8]
.text:0040D33C                 sub     esp, 4
.text:0040D33F                 mov     edx, [esp+35Ch+var_330]
.text:0040D343                 mov     esi, [edx]
.text:0040D345                 mov     [esp+35Ch+pvReserved], edx
.text:0040D348                 call    dword ptr [esi+8]
.text:0040D34B                 sub     esp, 4
.text:0040D34E                 call    CoUninitialize
.text:0040D353                 mov     eax, ebx
.text:0040D355
.text:0040D355 loc_40D355:                             ; CODE XREF: sub_40D200+177↓j
.text:0040D355                 add     esp, 350h
.text:0040D35B                 pop     ebx
.text:0040D35C                 pop     esi
.text:0040D35D                 pop     edi
.text:0040D35E                 retn
.text:0040D35F ; ---------------------------------------------------------------------------
.text:0040D35F
.text:0040D35F loc_40D35F:                             ; CODE XREF: sub_40D200+25↑j
.text:0040D35F                                         ; sub_40D200+5C↑j ...
.text:0040D35F                 call    sub_40D110
.text:0040D364                 mov     edi, eax
.text:0040D366                 call    _errno
.text:0040D36B                 mov     [eax], edi
.text:0040D36D                 call    CoUninitialize
.text:0040D372                 mov     eax, 0FFFFFFFFh
.text:0040D377                 jmp     short loc_40D355
.text:0040D377 sub_40D200      endp
.text:0040D377
.text:0040D377 ; ---------------------------------------------------------------------------
.text:0040D379 ; const char aLnk_0[]
.text:0040D379 aLnk_0          db '.lnk',0             ; DATA XREF: sub_40D380+53↓o
.text:0040D379                                         ; sub_40D380:loc_40D3E5↓o
.text:0040D37E                 align 10h
.text:0040D380
.text:0040D380 ; =============== S U B R O U T I N E =======================================
.text:0040D380
.text:0040D380
.text:0040D380 ; int __cdecl sub_40D380(char *, LPSTR lpString1)
.text:0040D380 sub_40D380      proc near               ; CODE XREF: sub_40AC20+96↑p
.text:0040D380
.text:0040D380 Str             = dword ptr -1Ch
.text:0040D380 Source          = dword ptr -18h
.text:0040D380 Destination     = dword ptr -14h
.text:0040D380 arg_0           = dword ptr  4
.text:0040D380 lpString1       = dword ptr  8
.text:0040D380
.text:0040D380                 push    ebp
.text:0040D381                 push    edi
.text:0040D382                 push    esi
.text:0040D383                 push    ebx
.text:0040D384                 sub     esp, 0Ch
.text:0040D387                 mov     ebx, [esp+1Ch+arg_0]
.text:0040D38B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040D38F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040D392                 call    strlen
.text:0040D397                 add     eax, 5
.text:0040D39A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040D39D                 call    malloc
.text:0040D3A2                 mov     [esp+1Ch+Destination], eax
.text:0040D3A6                 test    eax, eax
.text:0040D3A8                 jz      loc_40D450
.text:0040D3AE                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040D3B2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D3B5                 call    strcpy
.text:0040D3BA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040D3C2                 mov     eax, [esp+1Ch+Destination]
.text:0040D3C6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D3C9                 call    strrchr
.text:0040D3CE                 test    eax, eax
.text:0040D3D0                 jz      short loc_40D3E5
.text:0040D3D2                 cld
.text:0040D3D3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:0040D3D8                 mov     ecx, 5
.text:0040D3DD                 mov     esi, eax
.text:0040D3DF                 mov     edi, ebx
.text:0040D3E1                 repe cmpsb
.text:0040D3E3                 jz      short loc_40D3F9
.text:0040D3E5
.text:0040D3E5 loc_40D3E5:                             ; CODE XREF: sub_40D380+50↑j
.text:0040D3E5                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:0040D3ED                 mov     edx, [esp+1Ch+Destination]
.text:0040D3F1                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040D3F4                 call    strcat
.text:0040D3F9
.text:0040D3F9 loc_40D3F9:                             ; CODE XREF: sub_40D380+63↑j
.text:0040D3F9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040D400                 call    SetErrorMode
.text:0040D405                 sub     esp, 4
.text:0040D408                 mov     ebx, [esp+1Ch+Destination]
.text:0040D40C                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040D410                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040D413                 call    sub_40D200
.text:0040D418                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040D41B                 mov     esi, eax
.text:0040D41D                 call    free
.text:0040D422                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040D429                 call    SetErrorMode
.text:0040D42E                 sub     esp, 4
.text:0040D431                 mov     [esp+1Ch+Str], ebp
.text:0040D434                 call    sub_40E7D0
.text:0040D439                 inc     esi
.text:0040D43A                 jz      short loc_40D450
.text:0040D43C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:0040D440                 add     esp, 0Ch
.text:0040D443                 pop     ebx
.text:0040D444                 pop     esi
.text:0040D445                 pop     edi
.text:0040D446                 pop     ebp
.text:0040D447                 jmp     strlen
.text:0040D447 ; ---------------------------------------------------------------------------
.text:0040D44C                 align 10h
.text:0040D450
.text:0040D450 loc_40D450:                             ; CODE XREF: sub_40D380+28↑j
.text:0040D450                                         ; sub_40D380+BA↑j
.text:0040D450                 add     esp, 0Ch
.text:0040D453                 mov     eax, 0FFFFFFFFh
.text:0040D458                 pop     ebx
.text:0040D459                 pop     esi
.text:0040D45A                 pop     edi
.text:0040D45B                 pop     ebp
.text:0040D45C                 retn
.text:0040D45C sub_40D380      endp
.text:0040D45C
.text:0040D45C ; ---------------------------------------------------------------------------
.text:0040D45D                 align 10h
.text:0040D460
.text:0040D460 ; =============== S U B R O U T I N E =======================================
.text:0040D460
.text:0040D460
.text:0040D460 sub_40D460      proc near               ; CODE XREF: sub_40B1E0:loc_40B2C6↑p
.text:0040D460
.text:0040D460 lpFrequency     = dword ptr -0Ch
.text:0040D460 var_4           = dword ptr -4
.text:0040D460
.text:0040D460                 sub     esp, 0Ch
.text:0040D463                 mov     edx, dword ptr ds:Frequency+4
.text:0040D469                 mov     [esp+0Ch+var_4], ebx
.text:0040D46D                 mov     eax, dword ptr ds:Frequency
.text:0040D472                 mov     ebx, edx
.text:0040D474                 or      ebx, eax
.text:0040D476                 jz      short loc_40D480
.text:0040D478
.text:0040D478 loc_40D478:                             ; CODE XREF: sub_40D460+3E↓j
.text:0040D478                                         ; sub_40D460+52↓j
.text:0040D478                 mov     ebx, [esp+0Ch+var_4]
.text:0040D47C                 add     esp, 0Ch
.text:0040D47F                 retn
.text:0040D480 ; ---------------------------------------------------------------------------
.text:0040D480
.text:0040D480 loc_40D480:                             ; CODE XREF: sub_40D460+16↑j
.text:0040D480                 mov     [esp+0Ch+lpFrequency], offset Frequency ; lpFrequency
.text:0040D487                 call    QueryPerformanceFrequency
.text:0040D48C                 sub     esp, 4
.text:0040D48F                 test    eax, eax
.text:0040D491                 jz      short loc_40D4A0
.text:0040D493                 mov     eax, dword ptr ds:Frequency
.text:0040D498                 mov     edx, dword ptr ds:Frequency+4
.text:0040D49E                 jmp     short loc_40D478
.text:0040D4A0 ; ---------------------------------------------------------------------------
.text:0040D4A0
.text:0040D4A0 loc_40D4A0:                             ; CODE XREF: sub_40D460+31↑j
.text:0040D4A0                 call    sub_40D110
.text:0040D4A5                 mov     ebx, eax
.text:0040D4A7                 call    _errno
.text:0040D4AC                 mov     [eax], ebx
.text:0040D4AE                 xor     edx, edx
.text:0040D4B0                 xor     eax, eax
.text:0040D4B2                 jmp     short loc_40D478
.text:0040D4B2 sub_40D460      endp
.text:0040D4B2
.text:0040D4B2 ; ---------------------------------------------------------------------------
.text:0040D4B4                 align 10h
.text:0040D4C0
.text:0040D4C0 ; =============== S U B R O U T I N E =======================================
.text:0040D4C0
.text:0040D4C0
.text:0040D4C0 sub_40D4C0      proc near               ; CODE XREF: sub_40B1E0+11F↑p
.text:0040D4C0                                         ; sub_410F90+1A↓p
.text:0040D4C0
.text:0040D4C0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040D4C0 var_D8          = dword ptr -0D8h
.text:0040D4C0 var_D4          = dword ptr -0D4h
.text:0040D4C0 var_D0          = dword ptr -0D0h
.text:0040D4C0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040D4C0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040D4C0 arg_0           = dword ptr  4
.text:0040D4C0 arg_4           = dword ptr  8
.text:0040D4C0
.text:0040D4C0                 push    edi
.text:0040D4C1                 push    esi
.text:0040D4C2                 push    ebx
.text:0040D4C3                 sub     esp, 0D0h
.text:0040D4C9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040D4D0                 mov     edi, [esp+0DCh+arg_0]
.text:0040D4D7                 test    ebx, ebx
.text:0040D4D9                 jz      short loc_40D504
.text:0040D4DB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040D4DF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040D4E2                 call    GetTimeZoneInformation
.text:0040D4E7                 sub     esp, 4
.text:0040D4EA                 cmp     eax, 0FFFFFFFFh
.text:0040D4ED                 jz      loc_40D585
.text:0040D4F3                 xor     ecx, ecx
.text:0040D4F5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040D4F9                 cmp     eax, 2
.text:0040D4FC                 setz    cl
.text:0040D4FF                 mov     [ebx], esi
.text:0040D501                 mov     [ebx+4], ecx
.text:0040D504
.text:0040D504 loc_40D504:                             ; CODE XREF: sub_40D4C0+19↑j
.text:0040D504                                         ; sub_40D4C0+E0↓j
.text:0040D504                 test    edi, edi
.text:0040D506                 jz      short loc_40D579
.text:0040D508                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040D50C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040D50F                 call    GetSystemTimeAsFileTime
.text:0040D514                 sub     esp, 4
.text:0040D517                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040D51B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D523                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040D527                 mov     [esp+0DCh+var_D0], 0
.text:0040D52F                 add     ebx, 2AC18000h
.text:0040D535                 adc     esi, 0FE624E21h
.text:0040D53B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040D53F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D542                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040D546                 mov     [esp+0DCh+var_D8], esi
.text:0040D54A                 call    sub_412670
.text:0040D54F                 mov     [edi], eax
.text:0040D551                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040D554                 mov     [esp+0DCh+var_D4], 989680h
.text:0040D55C                 mov     [esp+0DCh+var_D0], 0
.text:0040D564                 mov     [esp+0DCh+var_D8], esi
.text:0040D568                 call    sub_412AE0
.text:0040D56D                 lea     ebx, [eax+eax*4]
.text:0040D570                 lea     edx, [ebx+ebx*4]
.text:0040D573                 shl     edx, 2
.text:0040D576                 mov     [edi+4], edx
.text:0040D579
.text:0040D579 loc_40D579:                             ; CODE XREF: sub_40D4C0+46↑j
.text:0040D579                 add     esp, 0D0h
.text:0040D57F                 xor     eax, eax
.text:0040D581                 pop     ebx
.text:0040D582                 pop     esi
.text:0040D583                 pop     edi
.text:0040D584                 retn
.text:0040D585 ; ---------------------------------------------------------------------------
.text:0040D585
.text:0040D585 loc_40D585:                             ; CODE XREF: sub_40D4C0+2D↑j
.text:0040D585                 mov     dword ptr [ebx], 0
.text:0040D58B                 mov     dword ptr [ebx+4], 0
.text:0040D592                 call    sub_40D110
.text:0040D597                 mov     esi, eax
.text:0040D599                 call    _errno
.text:0040D59E                 mov     [eax], esi
.text:0040D5A0                 jmp     loc_40D504
.text:0040D5A0 sub_40D4C0      endp
.text:0040D5A0
.text:0040D5A0 ; ---------------------------------------------------------------------------
.text:0040D5A5                 align 10h
.text:0040D5B0
.text:0040D5B0 ; =============== S U B R O U T I N E =======================================
.text:0040D5B0
.text:0040D5B0
.text:0040D5B0 sub_40D5B0      proc near               ; CODE XREF: .text:0040E8E3↓p
.text:0040D5B0                                         ; .text:0040E933↓p
.text:0040D5B0
.text:0040D5B0 arg_4           = dword ptr  8
.text:0040D5B0
.text:0040D5B0                 sub     esp, 0Ch
.text:0040D5B3                 mov     edx, [esp+0Ch+arg_4]
.text:0040D5B7                 test    edx, edx
.text:0040D5B9                 jz      short loc_40D5C0
.text:0040D5BB                 add     esp, 0Ch
.text:0040D5BE                 jmp     short sub_40D600
.text:0040D5C0 ; ---------------------------------------------------------------------------
.text:0040D5C0
.text:0040D5C0 loc_40D5C0:                             ; CODE XREF: sub_40D5B0+9↑j
.text:0040D5C0                 call    _errno
.text:0040D5C5                 mov     dword ptr [eax], 16h
.text:0040D5CB                 xor     eax, eax
.text:0040D5CD                 add     esp, 0Ch
.text:0040D5D0                 retn
.text:0040D5D0 sub_40D5B0      endp
.text:0040D5D0
.text:0040D5D1 ; ---------------------------------------------------------------------------
.text:0040D5D1                 jmp     short sub_40D5E0
.text:0040D5D1 ; ---------------------------------------------------------------------------
.text:0040D5D3                 align 10h
.text:0040D5E0
.text:0040D5E0 ; =============== S U B R O U T I N E =======================================
.text:0040D5E0
.text:0040D5E0
.text:0040D5E0 ; int __cdecl sub_40D5E0(LPCSTR)
.text:0040D5E0 sub_40D5E0      proc near               ; CODE XREF: sub_40AAF0+22B4↑p
.text:0040D5E0                                         ; .text:0040D5D1↑j ...
.text:0040D5E0
.text:0040D5E0 lpFileName      = dword ptr -0Ch
.text:0040D5E0 Destination     = dword ptr -8
.text:0040D5E0 arg_0           = dword ptr  4
.text:0040D5E0
.text:0040D5E0                 sub     esp, 0Ch
.text:0040D5E3                 mov     edx, [esp+0Ch+arg_0]
.text:0040D5E7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040D5EF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040D5F2                 call    sub_40D600
.text:0040D5F7                 add     esp, 0Ch
.text:0040D5FA                 retn
.text:0040D5FA sub_40D5E0      endp
.text:0040D5FA
.text:0040D5FA ; ---------------------------------------------------------------------------
.text:0040D5FB                 align 10h
.text:0040D600
.text:0040D600 ; =============== S U B R O U T I N E =======================================
.text:0040D600
.text:0040D600
.text:0040D600 ; int __cdecl sub_40D600(LPCSTR lpFileName, char *Destination)
.text:0040D600 sub_40D600      proc near               ; CODE XREF: sub_40D5B0+E↑j
.text:0040D600                                         ; sub_40D5E0+12↑p
.text:0040D600
.text:0040D600 Size            = dword ptr -2Ch
.text:0040D600 nBufferLength   = dword ptr -28h
.text:0040D600 lpBuffer        = dword ptr -24h
.text:0040D600 lpFilePart      = dword ptr -20h
.text:0040D600 FilePart        = dword ptr -14h
.text:0040D600 lpFileName      = dword ptr  4
.text:0040D600 Destination     = dword ptr  8
.text:0040D600
.text:0040D600                 push    ebp
.text:0040D601                 push    edi
.text:0040D602                 push    esi
.text:0040D603                 push    ebx
.text:0040D604                 sub     esp, 1Ch
.text:0040D607                 mov     edi, [esp+2Ch+lpFileName]
.text:0040D60B                 mov     ebp, [esp+2Ch+Destination]
.text:0040D60F                 test    edi, edi
.text:0040D611                 jz      loc_40D719
.text:0040D617                 cmp     byte ptr [edi], 0
.text:0040D61A                 jz      loc_40D70C
.text:0040D620                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040D627                 call    malloc
.text:0040D62C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040D630                 lea     edx, [esp+2Ch+FilePart]
.text:0040D634                 mov     ebx, eax
.text:0040D636                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040D63A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040D642                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040D645                 call    GetFullPathNameA
.text:0040D64A                 sub     esp, 10h
.text:0040D64D                 mov     esi, eax
.text:0040D64F                 test    eax, eax
.text:0040D651                 jz      loc_40D6FA
.text:0040D657                 cmp     eax, 104h
.text:0040D65C                 jle     short loc_40D66D
.text:0040D65E                 test    ebp, ebp
.text:0040D660                 jz      short loc_40D6C9
.text:0040D662                 call    _errno
.text:0040D667                 mov     dword ptr [eax], 26h ; '&'
.text:0040D66D
.text:0040D66D loc_40D66D:                             ; CODE XREF: sub_40D600+5C↑j
.text:0040D66D                                         ; sub_40D600+F5↓j
.text:0040D66D                 call    _errno
.text:0040D672                 mov     edi, [eax]
.text:0040D674                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040D67C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040D67F                 call    sub_40D130
.text:0040D684                 test    eax, eax
.text:0040D686                 jnz     short loc_40D6A0
.text:0040D688                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040D68D                 cmp     al, 2Fh ; '/'
.text:0040D68F                 jz      short loc_40D6A0
.text:0040D691                 cmp     al, 5Ch ; '\'
.text:0040D693                 jz      short loc_40D6A0
.text:0040D695                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040D699                 mov     byte ptr [esi+ebx+1], 0
.text:0040D69E                 mov     esi, esi
.text:0040D6A0
.text:0040D6A0 loc_40D6A0:                             ; CODE XREF: sub_40D600+86↑j
.text:0040D6A0                                         ; sub_40D600+8F↑j ...
.text:0040D6A0                 call    _errno
.text:0040D6A5                 mov     [eax], edi
.text:0040D6A7                 mov     [esp+2Ch+Size], ebx
.text:0040D6AA                 call    sub_40E7D0
.text:0040D6AF                 test    ebp, ebp
.text:0040D6B1                 mov     eax, ebx
.text:0040D6B3                 jz      short loc_40D6C1
.text:0040D6B5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040D6B9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040D6BC                 call    strcpy
.text:0040D6C1
.text:0040D6C1 loc_40D6C1:                             ; CODE XREF: sub_40D600+B3↑j
.text:0040D6C1                                         ; sub_40D600+10A↓j
.text:0040D6C1                 add     esp, 1Ch
.text:0040D6C4                 pop     ebx
.text:0040D6C5                 pop     esi
.text:0040D6C6                 pop     edi
.text:0040D6C7                 pop     ebp
.text:0040D6C8                 retn
.text:0040D6C9 ; ---------------------------------------------------------------------------
.text:0040D6C9
.text:0040D6C9 loc_40D6C9:                             ; CODE XREF: sub_40D600+60↑j
.text:0040D6C9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040D6CC                 lea     ecx, [eax+2]
.text:0040D6CF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040D6D3                 call    realloc
.text:0040D6D8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040D6DC                 lea     edx, [esp+2Ch+FilePart]
.text:0040D6E0                 mov     ebx, eax
.text:0040D6E2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040D6E6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040D6EA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040D6ED                 call    GetFullPathNameA
.text:0040D6F2                 sub     esp, 10h
.text:0040D6F5                 jmp     loc_40D66D
.text:0040D6FA ; ---------------------------------------------------------------------------
.text:0040D6FA
.text:0040D6FA loc_40D6FA:                             ; CODE XREF: sub_40D600+51↑j
.text:0040D6FA                 call    sub_40D110
.text:0040D6FF                 mov     esi, eax
.text:0040D701                 call    _errno
.text:0040D706                 mov     [eax], esi
.text:0040D708
.text:0040D708 loc_40D708:                             ; CODE XREF: sub_40D600+117↓j
.text:0040D708                                         ; sub_40D600+124↓j
.text:0040D708                 xor     eax, eax
.text:0040D70A                 jmp     short loc_40D6C1
.text:0040D70C ; ---------------------------------------------------------------------------
.text:0040D70C
.text:0040D70C loc_40D70C:                             ; CODE XREF: sub_40D600+1A↑j
.text:0040D70C                 call    _errno
.text:0040D711                 mov     dword ptr [eax], 2
.text:0040D717                 jmp     short loc_40D708
.text:0040D719 ; ---------------------------------------------------------------------------
.text:0040D719
.text:0040D719 loc_40D719:                             ; CODE XREF: sub_40D600+11↑j
.text:0040D719                 call    _errno
.text:0040D71E                 mov     dword ptr [eax], 16h
.text:0040D724                 jmp     short loc_40D708
.text:0040D724 sub_40D600      endp
.text:0040D724
.text:0040D724 ; ---------------------------------------------------------------------------
.text:0040D726                 align 10h
.text:0040D730 ; const char String[4]
.text:0040D730 String          db ' :/',0              ; DATA XREF: sub_40D740+FA↓o
.text:0040D734                 align 10h
.text:0040D740
.text:0040D740 ; =============== S U B R O U T I N E =======================================
.text:0040D740
.text:0040D740
.text:0040D740 ; int __cdecl sub_40D740(LPCSTR)
.text:0040D740 sub_40D740      proc near               ; CODE XREF: sub_40BB50+E↑p
.text:0040D740                                         ; sub_40C050+17↑p ...
.text:0040D740
.text:0040D740 Str             = dword ptr -1Ch
.text:0040D740 Val             = dword ptr -18h
.text:0040D740 Count           = dword ptr -14h
.text:0040D740 var_10          = dword ptr -10h
.text:0040D740 var_C           = dword ptr -0Ch
.text:0040D740 var_8           = dword ptr -8
.text:0040D740 var_4           = dword ptr -4
.text:0040D740 arg_0           = dword ptr  4
.text:0040D740
.text:0040D740                 sub     esp, 1Ch
.text:0040D743                 mov     edx, [esp+1Ch+arg_0]
.text:0040D747                 mov     [esp+1Ch+var_8], edi
.text:0040D74B                 mov     [esp+1Ch+var_10], ebx
.text:0040D74F                 mov     [esp+1Ch+var_C], esi
.text:0040D753                 mov     [esp+1Ch+var_4], ebp
.text:0040D757                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040D75A                 call    sub_40D5E0
.text:0040D75F                 test    eax, eax
.text:0040D761                 mov     edi, eax
.text:0040D763                 jz      short loc_40D7A0
.text:0040D765                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D768                 call    strlen
.text:0040D76D                 cmp     eax, 2
.text:0040D770                 jbe     short loc_40D77C
.text:0040D772                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040D776                 jz      loc_40D830
.text:0040D77C
.text:0040D77C loc_40D77C:                             ; CODE XREF: sub_40D740+30↑j
.text:0040D77C                                         ; sub_40D740+F4↓j
.text:0040D77C                 test    edi, edi
.text:0040D77E                 jz      short loc_40D7A0
.text:0040D780                 mov     [esp+1Ch+Str], edi ; Str
.text:0040D783                 call    strlen
.text:0040D788                 cmp     eax, 4
.text:0040D78B                 mov     ebp, eax
.text:0040D78D                 jle     short loc_40D7A0
.text:0040D78F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040D792                 jz      short loc_40D7C0
.text:0040D794                 lea     esi, [esi+0]
.text:0040D79A                 lea     edi, [edi+0]
.text:0040D7A0
.text:0040D7A0 loc_40D7A0:                             ; CODE XREF: sub_40D740+23↑j
.text:0040D7A0                                         ; sub_40D740+3E↑j ...
.text:0040D7A0                 xor     esi, esi
.text:0040D7A2
.text:0040D7A2 loc_40D7A2:                             ; CODE XREF: sub_40D740+CD↓j
.text:0040D7A2                                         ; sub_40D740+115↓j
.text:0040D7A2                 mov     [esp+1Ch+Str], edi ; Block
.text:0040D7A5                 call    free
.text:0040D7AA                 mov     eax, esi
.text:0040D7AC                 mov     ebx, [esp+1Ch+var_10]
.text:0040D7B0                 mov     esi, [esp+1Ch+var_C]
.text:0040D7B4                 mov     edi, [esp+1Ch+var_8]
.text:0040D7B8                 mov     ebp, [esp+1Ch+var_4]
.text:0040D7BC                 add     esp, 1Ch
.text:0040D7BF                 retn
.text:0040D7C0 ; ---------------------------------------------------------------------------
.text:0040D7C0
.text:0040D7C0 loc_40D7C0:                             ; CODE XREF: sub_40D740+52↑j
.text:0040D7C0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040D7C4                 jnz     short loc_40D7A0
.text:0040D7C6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D7CE                 lea     ecx, [edi+2]
.text:0040D7D1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040D7D4                 call    strchr
.text:0040D7D9                 test    eax, eax
.text:0040D7DB                 jnz     short loc_40D80F
.text:0040D7DD
.text:0040D7DD loc_40D7DD:                             ; CODE XREF: sub_40D740+E2↓j
.text:0040D7DD                 inc     ebp
.text:0040D7DE
.text:0040D7DE loc_40D7DE:                             ; CODE XREF: sub_40D740+E9↓j
.text:0040D7DE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040D7E6                 lea     ebx, [ebp+1]
.text:0040D7E9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040D7EC                 call    calloc
.text:0040D7F1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040D7F4                 mov     esi, eax
.text:0040D7F6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040D7FA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040D7FE                 call    strncpy
.text:0040D803                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040D808                 mov     byte ptr [ebp+esi+0], 0
.text:0040D80D                 jmp     short loc_40D7A2
.text:0040D80F ; ---------------------------------------------------------------------------
.text:0040D80F
.text:0040D80F loc_40D80F:                             ; CODE XREF: sub_40D740+9B↑j
.text:0040D80F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040D817                 inc     eax
.text:0040D818                 mov     [esp+1Ch+Str], eax ; Str
.text:0040D81B                 call    strchr
.text:0040D820                 test    eax, eax
.text:0040D822                 jz      short loc_40D7DD
.text:0040D824                 sub     eax, edi
.text:0040D826                 lea     ebp, [eax+1]
.text:0040D829                 jmp     short loc_40D7DE
.text:0040D829 ; ---------------------------------------------------------------------------
.text:0040D82B                 align 10h
.text:0040D830
.text:0040D830 loc_40D830:                             ; CODE XREF: sub_40D740+36↑j
.text:0040D830                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040D834                 jnz     loc_40D77C
.text:0040D83A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040D841                 call    _strdup
.text:0040D846                 movsx   edx, byte ptr [edi]
.text:0040D849                 mov     esi, eax
.text:0040D84B                 mov     [esp+1Ch+Str], edx ; C
.text:0040D84E                 call    toupper
.text:0040D853                 mov     [esi], al
.text:0040D855                 jmp     loc_40D7A2
.text:0040D855 sub_40D740      endp
.text:0040D855
.text:0040D855 ; ---------------------------------------------------------------------------
.text:0040D85A                 align 10h
.text:0040D860
.text:0040D860 ; =============== S U B R O U T I N E =======================================
.text:0040D860
.text:0040D860
.text:0040D860 sub_40D860      proc near               ; CODE XREF: .text:0040D9B4↓p
.text:0040D860                                         ; .text:0040DA98↓p
.text:0040D860
.text:0040D860 Str             = dword ptr -2Ch
.text:0040D860 Val             = dword ptr -28h
.text:0040D860 var_18          = dword ptr -18h
.text:0040D860 var_11          = byte ptr -11h
.text:0040D860 arg_0           = dword ptr  4
.text:0040D860
.text:0040D860                 push    ebp
.text:0040D861                 push    edi
.text:0040D862                 push    esi
.text:0040D863                 push    ebx
.text:0040D864                 sub     esp, 1Ch
.text:0040D867                 mov     edx, [esp+2Ch+arg_0]
.text:0040D86B                 cmp     edx, ds:dword_415260
.text:0040D871                 mov     [esp+2Ch+var_11], 0
.text:0040D876                 jz      loc_40D974
.text:0040D87C                 mov     ebx, ds:dword_415250
.text:0040D882                 test    ebx, ebx
.text:0040D884                 jz      short loc_40D8F2
.text:0040D886
.text:0040D886 loc_40D886:                             ; CODE XREF: sub_40D860+10F↓j
.text:0040D886                 mov     ebx, [esp+2Ch+arg_0]
.text:0040D88A                 xor     edi, edi
.text:0040D88C                 xor     esi, esi
.text:0040D88E                 mov     ebp, offset dword_415278
.text:0040D893                 lea     esi, [esi+0]
.text:0040D899                 lea     edi, [edi+0]
.text:0040D8A0
.text:0040D8A0 loc_40D8A0:                             ; CODE XREF: sub_40D860+60↓j
.text:0040D8A0                 mov     edx, [ebp+4]
.text:0040D8A3                 mov     ecx, edi
.text:0040D8A5                 mov     eax, [ebp+0]
.text:0040D8A8                 shl     ecx, 4
.text:0040D8AB                 mov     [esp+2Ch+var_18], ecx
.text:0040D8AF                 mov     ecx, edx
.text:0040D8B1                 xor     eax, ebx
.text:0040D8B3                 xor     ecx, esi
.text:0040D8B5                 or      ecx, eax
.text:0040D8B7                 jz      short loc_40D8E1
.text:0040D8B9                 inc     edi
.text:0040D8BA                 add     ebp, 10h
.text:0040D8BD                 cmp     edi, 20h ; ' '
.text:0040D8C0                 jle     short loc_40D8A0
.text:0040D8C2
.text:0040D8C2 loc_40D8C2:                             ; CODE XREF: sub_40D860+90↓j
.text:0040D8C2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040D8C7                 mov     eax, [esp+2Ch+arg_0]
.text:0040D8CB                 mov     byte_414070, bl
.text:0040D8D1                 mov     ds:dword_415260, eax
.text:0040D8D6                 movsx   eax, bl
.text:0040D8D9
.text:0040D8D9 loc_40D8D9:                             ; CODE XREF: sub_40D860+11B↓j
.text:0040D8D9                 add     esp, 1Ch
.text:0040D8DC                 pop     ebx
.text:0040D8DD                 pop     esi
.text:0040D8DE                 pop     edi
.text:0040D8DF                 pop     ebp
.text:0040D8E0                 retn
.text:0040D8E1 ; ---------------------------------------------------------------------------
.text:0040D8E1
.text:0040D8E1 loc_40D8E1:                             ; CODE XREF: sub_40D860+57↑j
.text:0040D8E1                 mov     edx, [esp+2Ch+var_18]
.text:0040D8E5                 movzx   eax, byte ptr ds:dword_415270[edx]
.text:0040D8EC                 mov     [esp+2Ch+var_11], al
.text:0040D8F0                 jmp     short loc_40D8C2
.text:0040D8F2 ; ---------------------------------------------------------------------------
.text:0040D8F2
.text:0040D8F2 loc_40D8F2:                             ; CODE XREF: sub_40D860+24↑j
.text:0040D8F2                 mov     [esp+2Ch+Str], 0
.text:0040D8F9                 call    sub_40F7A0
.text:0040D8FE                 test    eax, eax
.text:0040D900                 mov     ebx, eax
.text:0040D902                 jz      short loc_40D95C
.text:0040D904                 movzx   ecx, byte ptr [eax]
.text:0040D907                 mov     esi, 0FFFFFFF0h
.text:0040D90C                 test    cl, cl
.text:0040D90E                 jz      short loc_40D95C
.text:0040D910
.text:0040D910 loc_40D910:                             ; CODE XREF: sub_40D860+FA↓j
.text:0040D910                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040D913                 movsx   ebp, cl
.text:0040D916                 add     esi, 10h
.text:0040D919                 mov     ds:dword_415270[esi], ebp
.text:0040D91F                 mov     edi, ebp
.text:0040D921                 sar     edi, 1Fh
.text:0040D924                 mov     ds:dword_415274[esi], edi
.text:0040D92A                 call    sub_40C050
.text:0040D92F                 mov     ds:dword_415278[esi], eax
.text:0040D935                 xor     ecx, ecx
.text:0040D937                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040D93A                 mov     ds:dword_41527C[esi], ecx
.text:0040D940                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040D948                 call    strchr
.text:0040D94D                 mov     ebx, eax
.text:0040D94F                 inc     ebx
.text:0040D950                 jz      short loc_40D95C
.text:0040D952                 movzx   edx, byte ptr [eax+1]
.text:0040D956                 test    dl, dl
.text:0040D958                 mov     cl, dl
.text:0040D95A                 jnz     short loc_40D910
.text:0040D95C
.text:0040D95C loc_40D95C:                             ; CODE XREF: sub_40D860+A2↑j
.text:0040D95C                                         ; sub_40D860+AE↑j ...
.text:0040D95C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040D95F                 mov     esi, 1
.text:0040D964                 mov     ds:dword_415250, esi
.text:0040D96A                 call    free
.text:0040D96F                 jmp     loc_40D886
.text:0040D974 ; ---------------------------------------------------------------------------
.text:0040D974
.text:0040D974 loc_40D974:                             ; CODE XREF: sub_40D860+16↑j
.text:0040D974                 movsx   eax, byte_414070
.text:0040D97B                 jmp     loc_40D8D9
.text:0040D97B sub_40D860      endp
.text:0040D97B
.text:0040D97B ; ---------------------------------------------------------------------------
.text:0040D980 dword_40D980    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040D980                                         ; DATA XREF: .text:0040D9A3↓o
.text:0040D980                                         ; .text:0040DA83↓o
.text:0040D990 ; ---------------------------------------------------------------------------
.text:0040D990                 sub     esp, 1Ch
.text:0040D993                 mov     [esp+14h], esi
.text:0040D997                 mov     esi, [esp+20h]
.text:0040D99B                 mov     [esp+18h], edi
.text:0040D99F                 mov     [esp+10h], ebx
.text:0040D9A3                 mov     dword ptr [esp], offset dword_40D980
.text:0040D9AA                 call    _strdup
.text:0040D9AF                 mov     [esp], esi
.text:0040D9B2                 mov     edi, eax
.text:0040D9B4                 call    sub_40D860
.text:0040D9B9                 mov     [edi], al
.text:0040D9BB                 test    al, al
.text:0040D9BD                 jz      short loc_40D9D1
.text:0040D9BF                 mov     eax, edi
.text:0040D9C1                 mov     ebx, [esp+10h]
.text:0040D9C5                 mov     esi, [esp+14h]
.text:0040D9C9                 mov     edi, [esp+18h]
.text:0040D9CD                 add     esp, 1Ch
.text:0040D9D0                 retn
.text:0040D9D1 ; ---------------------------------------------------------------------------
.text:0040D9D1
.text:0040D9D1 loc_40D9D1:                             ; CODE XREF: .text:0040D9BD↑j
.text:0040D9D1                 mov     [esp], edi
.text:0040D9D4                 call    free
.text:0040D9D9                 mov     dword ptr [esp+4], 0
.text:0040D9E1                 mov     dword ptr [esp], 0
.text:0040D9E8                 call    GetCurrentDirectoryA
.text:0040D9ED                 sub     esp, 8
.text:0040D9F0                 lea     esi, [eax+1]
.text:0040D9F3                 mov     [esp], esi
.text:0040D9F6                 call    malloc
.text:0040D9FB                 mov     [esp+4], eax
.text:0040D9FF                 mov     edi, eax
.text:0040DA01                 mov     [esp], esi
.text:0040DA04                 call    GetCurrentDirectoryA
.text:0040DA09                 sub     esp, 8
.text:0040DA0C                 test    eax, eax
.text:0040DA0E                 jnz     short loc_40DA30
.text:0040DA10                 mov     dword ptr [esp+20h], 40D984h
.text:0040DA18                 mov     ebx, [esp+10h]
.text:0040DA1C                 mov     esi, [esp+14h]
.text:0040DA20                 mov     edi, [esp+18h]
.text:0040DA24                 add     esp, 1Ch
.text:0040DA27                 jmp     _strdup
.text:0040DA27 ; ---------------------------------------------------------------------------
.text:0040DA2C                 align 10h
.text:0040DA30
.text:0040DA30 loc_40DA30:                             ; CODE XREF: .text:0040DA0E↑j
.text:0040DA30                 mov     [esp+20h], edi
.text:0040DA34                 mov     ebx, [esp+10h]
.text:0040DA38                 mov     esi, [esp+14h]
.text:0040DA3C                 mov     edi, [esp+18h]
.text:0040DA40                 add     esp, 1Ch
.text:0040DA43                 jmp     sub_40D740
.text:0040DA43 ; ---------------------------------------------------------------------------
.text:0040DA48                 align 10h
.text:0040DA50                 sub     esp, 7Ch
.text:0040DA53                 lea     edx, [esp+10h]
.text:0040DA57                 mov     [esp+8], edx
.text:0040DA5B                 mov     edx, [esp+80h]
.text:0040DA62                 mov     [esp+70h], ebx
.text:0040DA66                 mov     [esp+74h], esi
.text:0040DA6A                 mov     [esp+4], edx
.text:0040DA6E                 mov     [esp+78h], edi
.text:0040DA72                 mov     dword ptr [esp], 0
.text:0040DA79                 call    sub_40F9B0
.text:0040DA7E                 xor     edx, edx
.text:0040DA80                 inc     eax
.text:0040DA81                 jz      short loc_40DAA5
.text:0040DA83                 mov     dword ptr [esp], offset dword_40D980
.text:0040DA8A                 mov     esi, [esp+20h]
.text:0040DA8E                 call    _strdup
.text:0040DA93                 mov     edi, eax
.text:0040DA95                 mov     [esp], esi
.text:0040DA98                 call    sub_40D860
.text:0040DA9D                 mov     [edi], al
.text:0040DA9F                 test    al, al
.text:0040DAA1                 mov     edx, edi
.text:0040DAA3                 jz      short loc_40DAB7
.text:0040DAA5
.text:0040DAA5 loc_40DAA5:                             ; CODE XREF: .text:0040DA81↑j
.text:0040DAA5                                         ; .text:0040DB04↓j
.text:0040DAA5                 mov     ebx, [esp+70h]
.text:0040DAA9                 mov     eax, edx
.text:0040DAAB                 mov     esi, [esp+74h]
.text:0040DAAF                 mov     edi, [esp+78h]
.text:0040DAB3                 add     esp, 7Ch
.text:0040DAB6                 retn
.text:0040DAB7 ; ---------------------------------------------------------------------------
.text:0040DAB7
.text:0040DAB7 loc_40DAB7:                             ; CODE XREF: .text:0040DAA3↑j
.text:0040DAB7                 mov     [esp], edi
.text:0040DABA                 call    free
.text:0040DABF                 mov     dword ptr [esp+4], 0
.text:0040DAC7                 mov     dword ptr [esp], 0
.text:0040DACE                 call    GetCurrentDirectoryA
.text:0040DAD3                 sub     esp, 8
.text:0040DAD6                 lea     esi, [eax+1]
.text:0040DAD9                 mov     [esp], esi
.text:0040DADC                 call    malloc
.text:0040DAE1                 mov     [esp+4], eax
.text:0040DAE5                 mov     edi, eax
.text:0040DAE7                 mov     [esp], esi
.text:0040DAEA                 call    GetCurrentDirectoryA
.text:0040DAEF                 sub     esp, 8
.text:0040DAF2                 test    eax, eax
.text:0040DAF4                 jnz     short loc_40DB06
.text:0040DAF6                 mov     dword ptr [esp], 40D984h
.text:0040DAFD                 call    _strdup
.text:0040DB02
.text:0040DB02 loc_40DB02:                             ; CODE XREF: .text:0040DB0E↓j
.text:0040DB02                 mov     edx, eax
.text:0040DB04                 jmp     short loc_40DAA5
.text:0040DB06 ; ---------------------------------------------------------------------------
.text:0040DB06
.text:0040DB06 loc_40DB06:                             ; CODE XREF: .text:0040DAF4↑j
.text:0040DB06                 mov     [esp], edi
.text:0040DB09                 call    sub_40D740
.text:0040DB0E                 jmp     short loc_40DB02
.text:0040DB10
.text:0040DB10 ; =============== S U B R O U T I N E =======================================
.text:0040DB10
.text:0040DB10
.text:0040DB10 ; int __cdecl sub_40DB10(LPCSTR)
.text:0040DB10 sub_40DB10      proc near               ; CODE XREF: sub_40B500+12F↑p
.text:0040DB10
.text:0040DB10 String1         = dword ptr -1Ch
.text:0040DB10 String2         = dword ptr -18h
.text:0040DB10 var_C           = dword ptr -0Ch
.text:0040DB10 var_8           = dword ptr -8
.text:0040DB10 var_4           = dword ptr -4
.text:0040DB10 arg_0           = dword ptr  4
.text:0040DB10
.text:0040DB10                 sub     esp, 1Ch
.text:0040DB13                 mov     [esp+1Ch+var_4], edi
.text:0040DB17                 mov     edi, [esp+1Ch+arg_0]
.text:0040DB1B                 mov     [esp+1Ch+var_C], ebx
.text:0040DB1F                 mov     [esp+1Ch+var_8], esi
.text:0040DB23                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040DB26                 call    sub_40D5E0
.text:0040DB2B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040DB2E                 mov     esi, eax
.text:0040DB30                 call    sub_40D740
.text:0040DB35                 mov     [esp+1Ch+String2], eax ; String2
.text:0040DB39                 mov     ebx, eax
.text:0040DB3B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040DB3E                 call    _stricmp
.text:0040DB43                 test    eax, eax
.text:0040DB45                 setz    dl
.text:0040DB48                 test    esi, esi
.text:0040DB4A                 movzx   edi, dl
.text:0040DB4D                 jz      short loc_40DB57
.text:0040DB4F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040DB52                 call    free
.text:0040DB57
.text:0040DB57 loc_40DB57:                             ; CODE XREF: sub_40DB10+3D↑j
.text:0040DB57                 test    ebx, ebx
.text:0040DB59                 jz      short loc_40DB63
.text:0040DB5B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040DB5E                 call    free
.text:0040DB63
.text:0040DB63 loc_40DB63:                             ; CODE XREF: sub_40DB10+49↑j
.text:0040DB63                 mov     eax, edi
.text:0040DB65                 mov     ebx, [esp+1Ch+var_C]
.text:0040DB69                 mov     esi, [esp+1Ch+var_8]
.text:0040DB6D                 mov     edi, [esp+1Ch+var_4]
.text:0040DB71                 add     esp, 1Ch
.text:0040DB74                 retn
.text:0040DB74 sub_40DB10      endp
.text:0040DB74
.text:0040DB74 ; ---------------------------------------------------------------------------
.text:0040DB75                 align 10h
.text:0040DB80 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:0040DBD1↓o
.text:0040DB89 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040DB89                                         ; DATA XREF: .text:0040DBE2↓o
.text:0040DB9D ; const CHAR aVwin32[]
.text:0040DB9D aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040DD2C↓o
.text:0040DB9D                                         ; sub_40E160+17C↓o
.text:0040DBA8 ; ---------------------------------------------------------------------------
.text:0040DBA8
.text:0040DBA8 loc_40DBA8:                             ; DATA XREF: .text:0040DE42↓o
.text:0040DBA8                 dec     esi
.text:0040DBA9                 push    esp
.text:0040DBAA                 inc     esi
.text:0040DBAB                 push    ebx
.text:0040DBAC                 add     [esi+41h], al
.text:0040DBAF                 push    esp
.text:0040DBB0                 xor     esi, [edx]
.text:0040DBB2                 add     [esi+41h], al
.text:0040DBB5                 push    esp
.text:0040DBB6                 add     [ebx+44h], al
.text:0040DBB9                 inc     esi
.text:0040DBBA                 push    ebx
.text:0040DBBB
.text:0040DBBB loc_40DBBB:                             ; CODE XREF: sub_40E160+101↓p
.text:0040DBBB                 add     [ebp+55002674h], cl
.text:0040DBC1                 push    edi
.text:0040DBC2                 push    esi
.text:0040DBC3                 push    ebx
.text:0040DBC4                 sub     esp, 8BCh
.text:0040DBCA                 mov     ebp, [esp+8D0h]
.text:0040DBD1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:0040DBD8                 call    LoadLibraryA
.text:0040DBDD                 sub     esp, 4
.text:0040DBE0                 mov     edi, eax
.text:0040DBE2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040DBEA                 mov     [esp], eax
.text:0040DBED                 call    GetProcAddress
.text:0040DBF2                 sub     esp, 8
.text:0040DBF5                 mov     esi, eax
.text:0040DBF7                 test    ebp, ebp
.text:0040DBF9                 mov     dword ptr [esp+20h], 0
.text:0040DC01                 jz      loc_40E141
.text:0040DC07                 mov     [esp], ebp
.text:0040DC0A                 call    sub_40E850
.text:0040DC0F                 mov     [esp], eax
.text:0040DC12                 mov     ebp, eax
.text:0040DC14                 call    strlen
.text:0040DC19                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040DC1E                 mov     ebx, eax
.text:0040DC20                 jz      short loc_40DC3C
.text:0040DC22                 mov     [esp], ebp
.text:0040DC25                 lea     edx, [eax+1]
.text:0040DC28                 mov     [esp+4], edx
.text:0040DC2C                 call    realloc
.text:0040DC31                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040DC35                 mov     ebp, eax
.text:0040DC37                 mov     byte ptr [ebx+eax+1], 0
.text:0040DC3C
.text:0040DC3C loc_40DC3C:                             ; CODE XREF: .text:0040DC20↑j
.text:0040DC3C                 mov     dword ptr [esp+1Ch], 400h
.text:0040DC44                 lea     edx, [esp+0B0h]
.text:0040DC4B                 lea     ebx, [esp+5Ch]
.text:0040DC4F                 mov     [esp+18h], edx
.text:0040DC53                 lea     ecx, [esp+58h]
.text:0040DC57                 lea     edx, [esp+54h]
.text:0040DC5B                 mov     [esp+14h], ebx
.text:0040DC5F                 lea     eax, [esp+4B0h]
.text:0040DC66                 mov     [esp+10h], ecx
.text:0040DC6A                 mov     [esp+0Ch], edx
.text:0040DC6E                 mov     dword ptr [esp+8], 400h
.text:0040DC76                 mov     [esp+4], eax
.text:0040DC7A                 mov     [esp], ebp
.text:0040DC7D                 call    GetVolumeInformationA
.text:0040DC82                 sub     esp, 20h
.text:0040DC85                 test    eax, eax
.text:0040DC87                 jz      loc_40E11E
.text:0040DC8D                 test    esi, esi
.text:0040DC8F                 jz      short loc_40DCB5
.text:0040DC91                 mov     [esp], ebp
.text:0040DC94                 lea     edx, [esp+48h]
.text:0040DC98                 lea     ebx, [esp+40h]
.text:0040DC9C                 mov     [esp+0Ch], edx
.text:0040DCA0                 lea     ecx, [esp+38h]
.text:0040DCA4                 mov     [esp+8], ebx
.text:0040DCA8                 mov     [esp+4], ecx
.text:0040DCAC                 call    esi
.text:0040DCAE                 sub     esp, 10h
.text:0040DCB1                 mov     [esp+20h], eax
.text:0040DCB5
.text:0040DCB5 loc_40DCB5:                             ; CODE XREF: .text:0040DC8F↑j
.text:0040DCB5                 test    edi, edi
.text:0040DCB7                 jz      short loc_40DCC4
.text:0040DCB9                 mov     [esp], edi
.text:0040DCBC                 call    FreeLibrary
.text:0040DCC1                 sub     esp, 4
.text:0040DCC4
.text:0040DCC4 loc_40DCC4:                             ; CODE XREF: .text:0040DCB7↑j
.text:0040DCC4                 call    sub_4102D0
.text:0040DCC9                 test    eax, eax
.text:0040DCCB                 lea     esi, [esp+28h]
.text:0040DCCF                 jz      loc_40E100
.text:0040DCD5                 call    sub_4102D0
.text:0040DCDA                 test    eax, eax
.text:0040DCDC                 jz      short loc_40DCEC
.text:0040DCDE                 call    sub_410220
.text:0040DCE3                 cmp     eax, 0Bh
.text:0040DCE6                 jle     loc_40E0D4
.text:0040DCEC
.text:0040DCEC loc_40DCEC:                             ; CODE XREF: .text:0040DCDC↑j
.text:0040DCEC                 cld
.text:0040DCED                 xor     eax, eax
.text:0040DCEF                 lea     ebx, [esp+60h]
.text:0040DCF3                 mov     ecx, 7
.text:0040DCF8                 mov     edi, ebx
.text:0040DCFA                 rep stosd
.text:0040DCFC                 mov     dword ptr [esp+18h], 0
.text:0040DD04                 mov     dword ptr [esp+14h], 4000000h
.text:0040DD0C                 mov     dword ptr [esp+10h], 0
.text:0040DD14                 mov     dword ptr [esp+0Ch], 0
.text:0040DD1C                 mov     dword ptr [esp+8], 0
.text:0040DD24                 mov     dword ptr [esp+4], 0
.text:0040DD2C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040DD33                 call    CreateFileA
.text:0040DD38                 sub     esp, 1Ch
.text:0040DD3B                 mov     edi, eax
.text:0040DD3D                 cmp     eax, 0FFFFFFFFh
.text:0040DD40                 jz      short loc_40DDC0
.text:0040DD42                 mov     [esp+10h], ebx
.text:0040DD46                 lea     edx, [esp+80h]
.text:0040DD4D                 lea     ecx, [esp+24h]
.text:0040DD51                 mov     [esp+70h], edx
.text:0040DD55                 mov     [esp+18h], ecx
.text:0040DD59                 mov     [esp+8], ebx
.text:0040DD5D                 mov     dword ptr [esp+6Ch], 7303h
.text:0040DD65                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0040DD6D                 mov     [esp+64h], ebp
.text:0040DD71                 mov     dword ptr [esp+78h], 1
.text:0040DD79                 mov     dword ptr [esp+1Ch], 0
.text:0040DD81                 mov     dword ptr [esp+14h], 1Ch
.text:0040DD89                 mov     dword ptr [esp+0Ch], 1Ch
.text:0040DD91                 mov     dword ptr [esp+4], 6
.text:0040DD99                 mov     [esp], eax
.text:0040DD9C                 call    DeviceIoControl
.text:0040DDA1                 sub     esp, 20h
.text:0040DDA4                 mov     ebx, eax
.text:0040DDA6                 mov     [esp], edi
.text:0040DDA9                 call    CloseHandle
.text:0040DDAE                 sub     esp, 4
.text:0040DDB1                 test    ebx, ebx
.text:0040DDB3                 jz      short loc_40DDC0
.text:0040DDB5                 test    byte ptr [esp+78h], 1
.text:0040DDBA                 jz      loc_40E0A0
.text:0040DDC0
.text:0040DDC0 loc_40DDC0:                             ; CODE XREF: .text:0040DD40↑j
.text:0040DDC0                                         ; .text:0040DDB3↑j
.text:0040DDC0                 call    sub_40D110
.text:0040DDC5                 mov     edi, eax
.text:0040DDC7                 call    _errno
.text:0040DDCC                 mov     [eax], edi
.text:0040DDCE                 xor     eax, eax
.text:0040DDD0
.text:0040DDD0 loc_40DDD0:                             ; CODE XREF: .text:0040E0CF↓j
.text:0040DDD0                                         ; .text:0040E0FB↓j
.text:0040DDD0                 test    eax, eax
.text:0040DDD2                 jnz     short loc_40DDF4
.text:0040DDD4                 mov     dword ptr [esp+34h], 1
.text:0040DDDC                 mov     dword ptr [esp+30h], 200h
.text:0040DDE4                 mov     dword ptr [esp+2Ch], 0
.text:0040DDEC                 mov     dword ptr [esp+28h], 0
.text:0040DDF4
.text:0040DDF4 loc_40DDF4:                             ; CODE XREF: .text:0040DDD2↑j
.text:0040DDF4                 mov     edx, [esp+30h]
.text:0040DDF8                 mov     edi, [esp+34h]
.text:0040DDFC                 mov     ecx, [esp+20h]
.text:0040DE00                 imul    edi, edx
.text:0040DE03                 test    ecx, ecx
.text:0040DE05                 jnz     short loc_40DE2D
.text:0040DE07                 mov     eax, [esp+28h]
.text:0040DE0B                 mul     edi
.text:0040DE0D                 mov     esi, eax
.text:0040DE0F                 mov     eax, [esp+2Ch]
.text:0040DE13                 mov     [esp+44h], edx
.text:0040DE17                 mov     [esp+40h], esi
.text:0040DE1B                 mul     edi
.text:0040DE1D                 mov     [esp+48h], eax
.text:0040DE21                 mov     [esp+4Ch], edx
.text:0040DE25                 mov     [esp+38h], eax
.text:0040DE29                 mov     [esp+3Ch], edx
.text:0040DE2D
.text:0040DE2D loc_40DE2D:                             ; CODE XREF: .text:0040DE05↑j
.text:0040DE2D                 mov     ebx, [esp+5Ch]
.text:0040DE31                 lea     edx, [esp+0B0h]
.text:0040DE38                 mov     ecx, [esp+8D4h]
.text:0040DE3F                 mov     [ecx+48h], ebx
.text:0040DE42                 mov     dword ptr [esp+4], offset loc_40DBA8
.text:0040DE4A                 mov     [esp], edx
.text:0040DE4D                 call    _stricmp
.text:0040DE52                 test    eax, eax
.text:0040DE54                 jnz     loc_40E010
.text:0040DE5A                 mov     esi, [esp+8D4h]
.text:0040DE61                 mov     dword ptr [esi], 5346544Eh
.text:0040DE67
.text:0040DE67 loc_40DE67:                             ; CODE XREF: .text:0040E038↓j
.text:0040DE67                                         ; .text:0040E065↓j ...
.text:0040DE67                 mov     ebx, [esp+30h]
.text:0040DE6B                 mov     esi, [esp+8D4h]
.text:0040DE72                 mov     [esi+4], ebx
.text:0040DE75                 mov     [esi+8], ebx
.text:0040DE78                 mov     ebx, [esi+8]
.text:0040DE7B                 mov     [esi+0Ch], edi
.text:0040DE7E                 mov     ecx, [esp+44h]
.text:0040DE82                 xor     esi, esi
.text:0040DE84                 mov     [esp+8], ebx
.text:0040DE88                 mov     edx, [esp+40h]
.text:0040DE8C                 mov     [esp+0Ch], esi
.text:0040DE90                 mov     [esp+4], ecx
.text:0040DE94                 mov     [esp], edx
.text:0040DE97                 call    sub_412670
.text:0040DE9C                 mov     ecx, [esp+8D4h]
.text:0040DEA3                 mov     [ecx+10h], eax
.text:0040DEA6                 mov     [ecx+14h], edx
.text:0040DEA9                 mov     ecx, [esp+4Ch]
.text:0040DEAD                 mov     [esp+8], ebx
.text:0040DEB1                 mov     edx, [esp+48h]
.text:0040DEB5                 mov     [esp+0Ch], esi
.text:0040DEB9                 mov     [esp+4], ecx
.text:0040DEBD                 mov     [esp], edx
.text:0040DEC0                 call    sub_412670
.text:0040DEC5                 mov     ecx, [esp+8D4h]
.text:0040DECC                 mov     [ecx+18h], eax
.text:0040DECF                 mov     [ecx+1Ch], edx
.text:0040DED2                 mov     ecx, [esp+38h]
.text:0040DED6                 mov     [esp+8], ebx
.text:0040DEDA                 mov     ebx, [esp+3Ch]
.text:0040DEDE                 mov     [esp+0Ch], esi
.text:0040DEE2                 mov     [esp], ecx
.text:0040DEE5                 mov     [esp+4], ebx
.text:0040DEE9                 call    sub_412670
.text:0040DEEE                 mov     esi, [esp+8D4h]
.text:0040DEF5                 mov     [esi+20h], eax
.text:0040DEF8                 mov     [esi+24h], edx
.text:0040DEFB                 mov     ecx, [esp+44h]
.text:0040DEFF                 mov     esi, edi
.text:0040DF01                 mov     [esp+8], esi
.text:0040DF05                 mov     edx, [esp+40h]
.text:0040DF09                 xor     edi, edi
.text:0040DF0B                 mov     [esp+0Ch], edi
.text:0040DF0F                 mov     [esp+4], ecx
.text:0040DF13                 mov     [esp], edx
.text:0040DF16                 call    sub_412670
.text:0040DF1B                 mov     ebx, [esp+8D4h]
.text:0040DF22                 mov     [ebx+28h], eax
.text:0040DF25                 mov     [ebx+2Ch], edx
.text:0040DF28                 mov     ecx, [esp+4Ch]
.text:0040DF2C                 mov     [esp+8], esi
.text:0040DF30                 mov     edx, [esp+48h]
.text:0040DF34                 mov     [esp+0Ch], edi
.text:0040DF38                 mov     [esp+4], ecx
.text:0040DF3C                 mov     [esp], edx
.text:0040DF3F                 call    sub_412670
.text:0040DF44                 mov     ebx, [esp+8D4h]
.text:0040DF4B                 mov     [ebx+30h], eax
.text:0040DF4E                 mov     [ebx+34h], edx
.text:0040DF51                 mov     ecx, [esp+3Ch]
.text:0040DF55                 mov     [esp+8], esi
.text:0040DF59                 mov     edx, [esp+38h]
.text:0040DF5D                 mov     [esp+0Ch], edi
.text:0040DF61                 mov     [esp+4], ecx
.text:0040DF65                 mov     [esp], edx
.text:0040DF68                 call    sub_412670
.text:0040DF6D                 mov     edx, [esp+8D4h]
.text:0040DF74                 lea     ecx, [esp+0B0h]
.text:0040DF7B                 mov     [edx+38h], eax
.text:0040DF7E                 mov     esi, [esp+58h]
.text:0040DF82                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040DF89                 mov     [edx+110h], esi
.text:0040DF8F                 mov     esi, edx
.text:0040DF91                 add     esi, 4Ch ; 'L'
.text:0040DF94                 movzx   ebx, word ptr [esp+56h]
.text:0040DF99                 movzx   edi, word ptr [esp+54h]
.text:0040DF9E                 mov     [edx+3Ch], ebx
.text:0040DFA1                 lea     ebx, [esp+4B0h]
.text:0040DFA8                 mov     [edx+40h], edi
.text:0040DFAB                 mov     [esp+4], ecx
.text:0040DFAF                 mov     dword ptr [esp+8], 10h
.text:0040DFB7                 mov     [esp], esi
.text:0040DFBA                 call    strncpy
.text:0040DFBF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DFC7                 mov     edi, [esp+8D4h]
.text:0040DFCE                 mov     [esp+4], ebx
.text:0040DFD2                 add     edi, 5Ch ; '\'
.text:0040DFD5                 mov     [esp], edi
.text:0040DFD8                 call    strncpy
.text:0040DFDD                 mov     [esp+4], ebp
.text:0040DFE1                 mov     ebp, [esp+8D4h]
.text:0040DFE8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:0040DFF0                 add     ebp, 0B6h ; '¶'
.text:0040DFF6                 mov     [esp], ebp
.text:0040DFF9                 call    strncpy
.text:0040DFFE                 xor     eax, eax
.text:0040E000
.text:0040E000 loc_40E000:                             ; CODE XREF: .text:0040E13C↓j
.text:0040E000                 add     esp, 8BCh
.text:0040E006                 pop     ebx
.text:0040E007                 pop     esi
.text:0040E008                 pop     edi
.text:0040E009                 pop     ebp
.text:0040E00A                 retn
.text:0040E00A ; ---------------------------------------------------------------------------
.text:0040E00B                 align 10h
.text:0040E010
.text:0040E010 loc_40E010:                             ; CODE XREF: .text:0040DE54↑j
.text:0040E010                 mov     dword ptr [esp+4], 40DBADh
.text:0040E018                 lea     eax, [esp+0B0h]
.text:0040E01F                 mov     [esp], eax
.text:0040E022                 call    _stricmp
.text:0040E027                 test    eax, eax
.text:0040E029                 jnz     short loc_40E03D
.text:0040E02B                 mov     edx, [esp+8D4h]
.text:0040E032                 mov     dword ptr [edx], 4008h
.text:0040E038                 jmp     loc_40DE67
.text:0040E03D ; ---------------------------------------------------------------------------
.text:0040E03D
.text:0040E03D loc_40E03D:                             ; CODE XREF: .text:0040E029↑j
.text:0040E03D                 mov     dword ptr [esp+4], 40DBB3h
.text:0040E045                 lea     ecx, [esp+0B0h]
.text:0040E04C                 mov     [esp], ecx
.text:0040E04F                 call    _stricmp
.text:0040E054                 test    eax, eax
.text:0040E056                 jnz     short loc_40E06A
.text:0040E058                 mov     ebx, [esp+8D4h]
.text:0040E05F                 mov     dword ptr [ebx], 4006h
.text:0040E065                 jmp     loc_40DE67
.text:0040E06A ; ---------------------------------------------------------------------------
.text:0040E06A
.text:0040E06A loc_40E06A:                             ; CODE XREF: .text:0040E056↑j
.text:0040E06A                 mov     dword ptr [esp+4], 40DBB7h
.text:0040E072                 lea     eax, [esp+0B0h]
.text:0040E079                 mov     [esp], eax
.text:0040E07C                 call    _stricmp
.text:0040E081                 test    eax, eax
.text:0040E083                 mov     esi, [esp+8D4h]
.text:0040E08A                 setnz   cl
.text:0040E08D                 movzx   edx, cl
.text:0040E090                 dec     edx
.text:0040E091                 and     edx, 4000h
.text:0040E097                 mov     [esi], edx
.text:0040E099                 jmp     loc_40DE67
.text:0040E099 ; ---------------------------------------------------------------------------
.text:0040E09E                 align 10h
.text:0040E0A0
.text:0040E0A0 loc_40E0A0:                             ; CODE XREF: .text:0040DDBA↑j
.text:0040E0A0                 mov     edi, [esp+84h]
.text:0040E0A7                 mov     eax, 1
.text:0040E0AC                 mov     edx, [esp+88h]
.text:0040E0B3                 mov     ecx, [esp+8Ch]
.text:0040E0BA                 mov     ebx, [esp+90h]
.text:0040E0C1                 mov     [esp+34h], edi
.text:0040E0C5                 mov     [esp+30h], edx
.text:0040E0C9                 mov     [esp+2Ch], ecx
.text:0040E0CD                 mov     [esi], ebx
.text:0040E0CF                 jmp     loc_40DDD0
.text:0040E0D4 ; ---------------------------------------------------------------------------
.text:0040E0D4
.text:0040E0D4 loc_40E0D4:                             ; CODE XREF: .text:0040DCE6↑j
.text:0040E0D4                 mov     [esp+10h], esi
.text:0040E0D8                 lea     eax, [esp+2Ch]
.text:0040E0DC                 lea     esi, [esp+30h]
.text:0040E0E0                 mov     [esp+0Ch], eax
.text:0040E0E4                 lea     edi, [esp+34h]
.text:0040E0E8                 mov     [esp+8], esi
.text:0040E0EC                 mov     [esp+4], edi
.text:0040E0F0
.text:0040E0F0 loc_40E0F0:                             ; CODE XREF: .text:0040E11C↓j
.text:0040E0F0                 mov     [esp], ebp
.text:0040E0F3                 call    GetDiskFreeSpaceA
.text:0040E0F8                 sub     esp, 14h
.text:0040E0FB                 jmp     loc_40DDD0
.text:0040E100 ; ---------------------------------------------------------------------------
.text:0040E100
.text:0040E100 loc_40E100:                             ; CODE XREF: .text:0040DCCF↑j
.text:0040E100                 mov     [esp+10h], esi
.text:0040E104                 lea     ebx, [esp+2Ch]
.text:0040E108                 lea     eax, [esp+30h]
.text:0040E10C                 mov     [esp+0Ch], ebx
.text:0040E110                 lea     esi, [esp+34h]
.text:0040E114                 mov     [esp+8], eax
.text:0040E118                 mov     [esp+4], esi
.text:0040E11C                 jmp     short loc_40E0F0
.text:0040E11E ; ---------------------------------------------------------------------------
.text:0040E11E
.text:0040E11E loc_40E11E:                             ; CODE XREF: .text:0040DC87↑j
.text:0040E11E                 mov     [esp], edi
.text:0040E121                 call    FreeLibrary
.text:0040E126                 sub     esp, 4
.text:0040E129                 call    sub_40D110
.text:0040E12E                 mov     esi, eax
.text:0040E130                 call    _errno
.text:0040E135                 mov     [eax], esi
.text:0040E137
.text:0040E137 loc_40E137:                             ; CODE XREF: .text:0040E157↓j
.text:0040E137                 mov     eax, 0FFFFFFFFh
.text:0040E13C                 jmp     loc_40E000
.text:0040E141 ; ---------------------------------------------------------------------------
.text:0040E141
.text:0040E141 loc_40E141:                             ; CODE XREF: .text:0040DC01↑j
.text:0040E141                 mov     [esp], edi
.text:0040E144                 call    FreeLibrary
.text:0040E149                 sub     esp, 4
.text:0040E14C                 call    _errno
.text:0040E151                 mov     dword ptr [eax], 2
.text:0040E157                 jmp     short loc_40E137
.text:0040E157 ; ---------------------------------------------------------------------------
.text:0040E159                 align 10h
.text:0040E160
.text:0040E160 ; =============== S U B R O U T I N E =======================================
.text:0040E160
.text:0040E160
.text:0040E160 ; int __cdecl sub_40E160(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040E160 sub_40E160      proc near               ; CODE XREF: sub_40BB50+2C7↑p
.text:0040E160                                         ; .text:0040C18A↑p
.text:0040E160
.text:0040E160 lpFileName      = dword ptr -9Ch
.text:0040E160 dwDesiredAccess = dword ptr -98h
.text:0040E160 dwShareMode     = dword ptr -94h
.text:0040E160 lpSecurityAttributes= dword ptr -90h
.text:0040E160 dwCreationDisposition= dword ptr -8Ch
.text:0040E160 dwFlagsAndAttributes= dword ptr -88h
.text:0040E160 hTemplateFile   = dword ptr -84h
.text:0040E160 lpOverlapped    = dword ptr -80h
.text:0040E160 BytesReturned   = dword ptr -70h
.text:0040E160 InBuffer        = byte ptr -6Ch
.text:0040E160 var_68          = dword ptr -68h
.text:0040E160 var_64          = dword ptr -64h
.text:0040E160 var_60          = dword ptr -60h
.text:0040E160 var_5C          = dword ptr -5Ch
.text:0040E160 var_54          = dword ptr -54h
.text:0040E160 var_4C          = byte ptr -4Ch
.text:0040E160 var_48          = dword ptr -48h
.text:0040E160 var_44          = dword ptr -44h
.text:0040E160 var_40          = dword ptr -40h
.text:0040E160 var_3C          = dword ptr -3Ch
.text:0040E160 lpRootPathName  = dword ptr -2Ch
.text:0040E160 lpSectorsPerCluster= dword ptr -28h
.text:0040E160 lpBytesPerSector= dword ptr -24h
.text:0040E160 lpNumberOfFreeClusters= dword ptr -20h
.text:0040E160 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040E160 var_18          = dword ptr -18h
.text:0040E160 var_14          = dword ptr -14h
.text:0040E160 var_10          = dword ptr -10h
.text:0040E160 var_C           = dword ptr -0Ch
.text:0040E160 var_8           = dword ptr -8
.text:0040E160 var_4           = dword ptr -4
.text:0040E160 arg_0           = dword ptr  4
.text:0040E160 arg_4           = dword ptr  8
.text:0040E160 arg_8           = dword ptr  0Ch
.text:0040E160 arg_C           = dword ptr  10h
.text:0040E160 arg_10          = dword ptr  14h
.text:0040E160
.text:0040E160                 sub     esp, 2Ch
.text:0040E163                 mov     edx, [esp+2Ch+arg_0]
.text:0040E167                 mov     [esp+2Ch+var_10], ebx
.text:0040E16B                 mov     ebx, [esp+2Ch+arg_10]
.text:0040E16F                 mov     [esp+2Ch+var_C], esi
.text:0040E173                 mov     esi, [esp+2Ch+arg_C]
.text:0040E177                 mov     [esp+2Ch+var_8], edi
.text:0040E17B                 mov     edi, [esp+2Ch+arg_8]
.text:0040E17F                 mov     [esp+2Ch+var_4], ebp
.text:0040E183                 mov     ebp, [esp+2Ch+arg_4]
.text:0040E187                 mov     [esp+2Ch+var_14], edx
.text:0040E18B                 call    sub_4102D0
.text:0040E190                 test    eax, eax
.text:0040E192                 jz      short loc_40E1C4
.text:0040E194                 mov     [esp+2Ch+arg_10], ebx
.text:0040E198                 mov     edx, [esp+2Ch+var_14]
.text:0040E19C                 mov     ebx, [esp+2Ch+var_10]
.text:0040E1A0                 mov     [esp+2Ch+arg_C], esi
.text:0040E1A4                 mov     esi, [esp+2Ch+var_C]
.text:0040E1A8                 mov     [esp+2Ch+arg_8], edi
.text:0040E1AC                 mov     edi, [esp+2Ch+var_8]
.text:0040E1B0                 mov     [esp+2Ch+arg_4], ebp
.text:0040E1B4                 mov     ebp, [esp+2Ch+var_4]
.text:0040E1B8                 mov     [esp+2Ch+arg_0], edx
.text:0040E1BC                 add     esp, 2Ch
.text:0040E1BF                 jmp     loc_40E270
.text:0040E1C4 ; ---------------------------------------------------------------------------
.text:0040E1C4
.text:0040E1C4 loc_40E1C4:                             ; CODE XREF: sub_40E160+32↑j
.text:0040E1C4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040E1C8                 mov     ecx, [esp+2Ch+var_14]
.text:0040E1CC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040E1D0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040E1D4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040E1D8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040E1DB                 call    GetDiskFreeSpaceA
.text:0040E1E0                 sub     esp, 14h
.text:0040E1E3                 mov     ebx, [esp+2Ch+var_10]
.text:0040E1E7                 mov     esi, [esp+2Ch+var_C]
.text:0040E1EB                 mov     edi, [esp+2Ch+var_8]
.text:0040E1EF                 mov     ebp, [esp+2Ch+var_4]
.text:0040E1F3                 add     esp, 2Ch
.text:0040E1F6                 retn
.text:0040E1F6 ; ---------------------------------------------------------------------------
.text:0040E1F7                 align 10h
.text:0040E200
.text:0040E200 loc_40E200:                             ; CODE XREF: .text:0040ECDD↓p
.text:0040E200                 sub     esp, 1Ch
.text:0040E203                 mov     [esp+1Ch+var_4], esi
.text:0040E207                 mov     esi, [esp+1Ch+arg_0]
.text:0040E20B                 mov     [esp+1Ch+var_8], ebx
.text:0040E20F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:0040E212                 call    sub_40D740
.text:0040E217                 test    eax, eax
.text:0040E219                 mov     ebx, eax
.text:0040E21B                 jz      short loc_40E230
.text:0040E21D                 cmp     byte ptr [eax], 0
.text:0040E220                 jz      short loc_40E230
.text:0040E222                 test    esi, esi
.text:0040E224                 jz      short loc_40E230
.text:0040E226                 cmp     byte ptr [esi], 0
.text:0040E229                 jnz     short loc_40E256
.text:0040E22B                 nop
.text:0040E22C                 lea     esi, [esi+0]
.text:0040E230
.text:0040E230 loc_40E230:                             ; CODE XREF: sub_40E160+BB↑j
.text:0040E230                                         ; sub_40E160+C0↑j ...
.text:0040E230                 call    _errno
.text:0040E235                 mov     dword ptr [eax], 2
.text:0040E23B                 mov     esi, 0FFFFFFFFh
.text:0040E240
.text:0040E240 loc_40E240:                             ; CODE XREF: sub_40E160+108↓j
.text:0040E240                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:0040E243                 call    free
.text:0040E248                 mov     eax, esi
.text:0040E24A                 mov     ebx, [esp+1Ch+var_8]
.text:0040E24E                 mov     esi, [esp+1Ch+var_4]
.text:0040E252                 add     esp, 1Ch
.text:0040E255                 retn
.text:0040E256 ; ---------------------------------------------------------------------------
.text:0040E256
.text:0040E256 loc_40E256:                             ; CODE XREF: sub_40E160+C9↑j
.text:0040E256                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:0040E259                 mov     edx, [esp+1Ch+arg_4]
.text:0040E25D                 mov     [esp+1Ch+var_18], edx
.text:0040E261                 call    near ptr loc_40DBBB+5
.text:0040E266                 mov     esi, eax
.text:0040E268                 jmp     short loc_40E240
.text:0040E268 ; ---------------------------------------------------------------------------
.text:0040E26A                 align 10h
.text:0040E270
.text:0040E270 loc_40E270:                             ; CODE XREF: sub_40E160+5F↑j
.text:0040E270                 push    ebp
.text:0040E271                 push    edi
.text:0040E272                 push    esi
.text:0040E273                 push    ebx
.text:0040E274                 sub     esp, 8Ch
.text:0040E27A                 mov     ebp, [esp+9Ch+arg_0]
.text:0040E281                 call    sub_4102D0
.text:0040E286                 test    eax, eax
.text:0040E288                 jz      short loc_40E298
.text:0040E28A                 call    sub_410220
.text:0040E28F                 cmp     eax, 0Bh
.text:0040E292                 jle     loc_40E3C0
.text:0040E298
.text:0040E298 loc_40E298:                             ; CODE XREF: sub_40E160+128↑j
.text:0040E298                 cld
.text:0040E299                 xor     eax, eax
.text:0040E29B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040E29F                 mov     ecx, 7
.text:0040E2A4                 mov     edi, ebx
.text:0040E2A6                 lea     esi, [esp+9Ch+var_4C]
.text:0040E2AA                 rep stosd
.text:0040E2AC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040E2B4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040E2BC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040E2C4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040E2CC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040E2D4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040E2DC                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:0040E2E3                 call    CreateFileA
.text:0040E2E8                 sub     esp, 1Ch
.text:0040E2EB                 mov     edi, eax
.text:0040E2ED                 cmp     eax, 0FFFFFFFFh
.text:0040E2F0                 jz      short loc_40E365
.text:0040E2F2                 mov     [esp+9Ch+var_68], ebp
.text:0040E2F6                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040E2FA                 mov     [esp+9Ch+var_5C], esi
.text:0040E2FE                 mov     [esp+9Ch+var_60], 7303h
.text:0040E306                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040E30E                 mov     [esp+9Ch+var_54], 1
.text:0040E316                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040E31E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040E322                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040E32A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040E32E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040E336                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040E33A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040E342                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040E345                 call    DeviceIoControl
.text:0040E34A                 sub     esp, 20h
.text:0040E34D                 mov     esi, eax
.text:0040E34F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040E352                 call    CloseHandle
.text:0040E357                 sub     esp, 4
.text:0040E35A                 test    esi, esi
.text:0040E35C                 jz      short loc_40E365
.text:0040E35E                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040E363                 jz      short loc_40E380
.text:0040E365
.text:0040E365 loc_40E365:                             ; CODE XREF: sub_40E160+190↑j
.text:0040E365                                         ; sub_40E160+1FC↑j
.text:0040E365                 call    sub_40D110
.text:0040E36A                 mov     edi, eax
.text:0040E36C                 call    _errno
.text:0040E371                 mov     [eax], edi
.text:0040E373                 xor     eax, eax
.text:0040E375
.text:0040E375 loc_40E375:                             ; CODE XREF: sub_40E160+25A↓j
.text:0040E375                                         ; sub_40E160+297↓j
.text:0040E375                 add     esp, 8Ch
.text:0040E37B                 pop     ebx
.text:0040E37C                 pop     esi
.text:0040E37D                 pop     edi
.text:0040E37E                 pop     ebp
.text:0040E37F                 retn
.text:0040E380 ; ---------------------------------------------------------------------------
.text:0040E380
.text:0040E380 loc_40E380:                             ; CODE XREF: sub_40E160+203↑j
.text:0040E380                 mov     edx, [esp+9Ch+var_48]
.text:0040E384                 mov     eax, 1
.text:0040E389                 mov     ebx, [esp+9Ch+arg_4]
.text:0040E390                 mov     ebp, [esp+9Ch+arg_8]
.text:0040E397                 mov     ecx, [esp+9Ch+arg_C]
.text:0040E39E                 mov     [ebx], edx
.text:0040E3A0                 mov     edi, [esp+9Ch+var_44]
.text:0040E3A4                 mov     ebx, [esp+9Ch+arg_10]
.text:0040E3AB                 mov     [ebp+0], edi
.text:0040E3AE                 mov     esi, [esp+9Ch+var_40]
.text:0040E3B2                 mov     [ecx], esi
.text:0040E3B4                 mov     edx, [esp+9Ch+var_3C]
.text:0040E3B8                 mov     [ebx], edx
.text:0040E3BA                 jmp     short loc_40E375
.text:0040E3BA ; ---------------------------------------------------------------------------
.text:0040E3BC                 align 10h
.text:0040E3C0
.text:0040E3C0 loc_40E3C0:                             ; CODE XREF: sub_40E160+132↑j
.text:0040E3C0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040E3C3                 mov     eax, [esp+9Ch+arg_C]
.text:0040E3CA                 mov     ecx, [esp+9Ch+arg_10]
.text:0040E3D1                 mov     edx, [esp+9Ch+arg_8]
.text:0040E3D8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040E3DC                 mov     eax, [esp+9Ch+arg_4]
.text:0040E3E3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040E3E7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040E3EB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040E3EF                 call    GetDiskFreeSpaceA
.text:0040E3F4                 sub     esp, 14h
.text:0040E3F7                 jmp     loc_40E375
.text:0040E3F7 sub_40E160      endp ; sp-analysis failed
.text:0040E3F7
.text:0040E3F7 ; ---------------------------------------------------------------------------
.text:0040E3FC                 align 10h
.text:0040E400
.text:0040E400 ; =============== S U B R O U T I N E =======================================
.text:0040E400
.text:0040E400 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040E400
.text:0040E400 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040E400 _win32_longpath proc near               ; CODE XREF: .text:0040EBC4↓p
.text:0040E400
.text:0040E400 C               = dword ptr -278h
.text:0040E400 lpFindFileData  = dword ptr -274h
.text:0040E400 Destination     = byte ptr -268h
.text:0040E400 var_267         = byte ptr -267h
.text:0040E400 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040E400 lpFileName      = dword ptr  8
.text:0040E400
.text:0040E400                 push    ebp
.text:0040E401                 xor     eax, eax
.text:0040E403                 push    edi
.text:0040E404                 push    esi
.text:0040E405                 push    ebx
.text:0040E406                 sub     esp, 26Ch
.text:0040E40C                 mov     esi, [esp+278h+lpFileName]
.text:0040E413                 lea     ebp, [esp+278h+Destination]
.text:0040E417                 test    esi, esi
.text:0040E419                 jz      loc_40E577
.text:0040E41F                 movsx   edx, byte ptr [esi]
.text:0040E422                 mov     [esp+278h+C], edx ; C
.text:0040E425                 call    isalpha
.text:0040E42A                 test    eax, eax
.text:0040E42C                 jz      short loc_40E43F
.text:0040E42E                 mov     eax, [esp+278h+lpFileName]
.text:0040E435                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040E439                 jz      loc_40E77B
.text:0040E43F
.text:0040E43F loc_40E43F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040E43F                 mov     edx, [esp+278h+lpFileName]
.text:0040E446                 movzx   eax, byte ptr [edx]
.text:0040E449                 cmp     al, 2Fh ; '/'
.text:0040E44B                 jz      loc_40E65B
.text:0040E451                 cmp     al, 5Ch ; '\'
.text:0040E453                 jz      loc_40E65B
.text:0040E459
.text:0040E459 loc_40E459:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040E459                                         ; _win32_longpath+2B1↓j ...
.text:0040E459                 mov     [ebp+268h+Destination], 0
.text:0040E45D                 movzx   ebx, byte ptr [esi]
.text:0040E460                 test    bl, bl
.text:0040E462                 jz      loc_40E559
.text:0040E468                 nop
.text:0040E469                 lea     esi, [esi+0]
.text:0040E470
.text:0040E470 loc_40E470:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040E470                 cmp     bl, 2Fh ; '/'
.text:0040E473                 jz      loc_40E610
.text:0040E479                 cmp     bl, 5Ch ; '\'
.text:0040E47C                 jz      loc_40E610
.text:0040E482
.text:0040E482 loc_40E482:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040E482                                         ; _win32_longpath+22C↓j ...
.text:0040E482                 cmp     bl, 2Eh ; '.'
.text:0040E485                 jz      loc_40E5B0
.text:0040E48B
.text:0040E48B loc_40E48B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040E48B                                         ; _win32_longpath+203↓j
.text:0040E48B                 test    bl, bl
.text:0040E48D                 jz      loc_40E559
.text:0040E493                 cmp     bl, 2Fh ; '/'
.text:0040E496                 jz      short loc_40E4B2
.text:0040E498                 cmp     bl, 5Ch ; '\'
.text:0040E49B                 jz      short loc_40E4B2
.text:0040E49D                 lea     esi, [esi+0]
.text:0040E4A0
.text:0040E4A0 loc_40E4A0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040E4A0                 inc     esi
.text:0040E4A1                 movzx   ebx, byte ptr [esi]
.text:0040E4A4                 test    bl, bl
.text:0040E4A6                 jz      short loc_40E4B2
.text:0040E4A8                 cmp     bl, 2Fh ; '/'
.text:0040E4AB                 jz      short loc_40E4B2
.text:0040E4AD                 cmp     bl, 5Ch ; '\'
.text:0040E4B0                 jnz     short loc_40E4A0
.text:0040E4B2
.text:0040E4B2 loc_40E4B2:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040E4B2                                         ; _win32_longpath+9B↑j ...
.text:0040E4B2                 mov     byte ptr [esi], 0
.text:0040E4B5                 lea     edx, [esp+278h+FindFileData]
.text:0040E4BC                 mov     eax, [esp+278h+lpFileName]
.text:0040E4C3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040E4C7                 mov     [esp+278h+C], eax ; lpFileName
.text:0040E4CA                 call    FindFirstFileA
.text:0040E4CF                 mov     [esi], bl
.text:0040E4D1                 sub     esp, 8
.text:0040E4D4                 mov     edi, eax
.text:0040E4D6                 cmp     eax, 0FFFFFFFFh
.text:0040E4D9                 jz      loc_40E59C
.text:0040E4DF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040E4E6                 mov     ecx, ebx
.text:0040E4E8                 nop
.text:0040E4E9                 lea     esi, [esi+0]
.text:0040E4F0
.text:0040E4F0 loc_40E4F0:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040E4F0                 mov     eax, [ebx]
.text:0040E4F2                 add     ebx, 4
.text:0040E4F5                 lea     edx, [eax-1010101h]
.text:0040E4FB                 not     eax
.text:0040E4FD                 and     edx, eax
.text:0040E4FF                 and     edx, 80808080h
.text:0040E505                 jz      short loc_40E4F0
.text:0040E507                 test    edx, 8080h
.text:0040E50D                 jnz     short loc_40E515
.text:0040E50F                 shr     edx, 10h
.text:0040E512                 add     ebx, 2
.text:0040E515
.text:0040E515 loc_40E515:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040E515                 add     dl, dl
.text:0040E517                 sbb     ebx, 3
.text:0040E51A                 sub     ebx, ecx
.text:0040E51C                 lea     ecx, [esp+278h+Destination]
.text:0040E520                 sub     ecx, ebp
.text:0040E522                 add     ecx, 105h
.text:0040E528                 cmp     ecx, ebx
.text:0040E52A                 jle     short loc_40E582
.text:0040E52C                 mov     [esp+278h+C], ebp ; Destination
.text:0040E52F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040E536                 add     ebp, ebx
.text:0040E538                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040E53C                 call    strcpy
.text:0040E541                 mov     [esp+278h+C], edi ; hFindFile
.text:0040E544                 call    FindClose
.text:0040E549                 sub     esp, 4
.text:0040E54C
.text:0040E54C loc_40E54C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040E54C                 movzx   ecx, byte ptr [esi]
.text:0040E54F                 test    cl, cl
.text:0040E551                 mov     bl, cl
.text:0040E553                 jnz     loc_40E470
.text:0040E559
.text:0040E559 loc_40E559:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040E559                                         ; _win32_longpath+8D↑j
.text:0040E559                 mov     esi, [esp+278h+lpFileName]
.text:0040E560                 lea     ebp, [esp+278h+Destination]
.text:0040E564                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040E568                 mov     [esp+278h+C], esi ; Destination
.text:0040E56B                 call    strcpy
.text:0040E570                 mov     eax, [esp+278h+lpFileName]
.text:0040E577
.text:0040E577 loc_40E577:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040E577                                         ; _win32_longpath+19A↓j
.text:0040E577                 add     esp, 26Ch
.text:0040E57D                 pop     ebx
.text:0040E57E                 pop     esi
.text:0040E57F                 pop     edi
.text:0040E580                 pop     ebp
.text:0040E581                 retn
.text:0040E582 ; ---------------------------------------------------------------------------
.text:0040E582
.text:0040E582 loc_40E582:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040E582                 mov     [esp+278h+C], edi ; hFindFile
.text:0040E585                 call    FindClose
.text:0040E58A                 sub     esp, 4
.text:0040E58D                 call    _errno
.text:0040E592                 mov     dword ptr [eax], 22h ; '"'
.text:0040E598
.text:0040E598 loc_40E598:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040E598                 xor     eax, eax
.text:0040E59A                 jmp     short loc_40E577
.text:0040E59C ; ---------------------------------------------------------------------------
.text:0040E59C
.text:0040E59C loc_40E59C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040E59C                 call    _errno
.text:0040E5A1                 mov     dword ptr [eax], 16h
.text:0040E5A7                 jmp     short loc_40E598
.text:0040E5A7 ; ---------------------------------------------------------------------------
.text:0040E5A9                 align 10h
.text:0040E5B0
.text:0040E5B0 loc_40E5B0:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040E5B0                 movzx   eax, byte ptr [esi+1]
.text:0040E5B4                 test    al, al
.text:0040E5B6                 jnz     short loc_40E5E5
.text:0040E5B8
.text:0040E5B8 loc_40E5B8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040E5B8                                         ; _win32_longpath+1EB↓j ...
.text:0040E5B8                 test    bl, bl
.text:0040E5BA                 jz      short loc_40E5DC
.text:0040E5BC                 cmp     bl, 2Fh ; '/'
.text:0040E5BF                 jz      short loc_40E5DC
.text:0040E5C1                 cmp     bl, 5Ch ; '\'
.text:0040E5C4                 jz      short loc_40E5DC
.text:0040E5C6
.text:0040E5C6 loc_40E5C6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040E5C6                 mov     [ebp+268h+Destination], bl
.text:0040E5C9                 inc     esi
.text:0040E5CA                 inc     ebp
.text:0040E5CB                 movzx   ebx, byte ptr [esi]
.text:0040E5CE                 test    bl, bl
.text:0040E5D0                 jz      short loc_40E5DC
.text:0040E5D2                 cmp     bl, 2Fh ; '/'
.text:0040E5D5                 jz      short loc_40E5DC
.text:0040E5D7                 cmp     bl, 5Ch ; '\'
.text:0040E5DA                 jnz     short loc_40E5C6
.text:0040E5DC
.text:0040E5DC loc_40E5DC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040E5DC                                         ; _win32_longpath+1BF↑j ...
.text:0040E5DC                 mov     [ebp+268h+Destination], 0
.text:0040E5E0                 jmp     loc_40E54C
.text:0040E5E5 ; ---------------------------------------------------------------------------
.text:0040E5E5
.text:0040E5E5 loc_40E5E5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040E5E5                 cmp     al, 2Fh ; '/'
.text:0040E5E7                 jz      short loc_40E5B8
.text:0040E5E9                 cmp     al, 5Ch ; '\'
.text:0040E5EB                 jz      short loc_40E5B8
.text:0040E5ED                 cmp     al, 2Eh ; '.'
.text:0040E5EF                 jnz     loc_40E48B
.text:0040E5F5                 movzx   eax, byte ptr [esi+2]
.text:0040E5F9                 test    al, al
.text:0040E5FB                 jz      short loc_40E5B8
.text:0040E5FD                 cmp     al, 2Fh ; '/'
.text:0040E5FF                 jz      short loc_40E5B8
.text:0040E601                 cmp     al, 5Ch ; '\'
.text:0040E603                 jnz     loc_40E48B
.text:0040E609                 jmp     short loc_40E5B8
.text:0040E609 ; ---------------------------------------------------------------------------
.text:0040E60B                 align 10h
.text:0040E610
.text:0040E610 loc_40E610:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040E610                                         ; _win32_longpath+7C↑j
.text:0040E610                 mov     [ebp+268h+Destination], bl
.text:0040E613                 inc     esi
.text:0040E614                 inc     ebp
.text:0040E615                 mov     [ebp+268h+Destination], 0
.text:0040E619                 movzx   ebx, byte ptr [esi]
.text:0040E61C                 test    bl, bl
.text:0040E61E                 jz      loc_40E482
.text:0040E624                 cmp     bl, 2Fh ; '/'
.text:0040E627                 jz      short loc_40E640
.text:0040E629                 cmp     bl, 5Ch ; '\'
.text:0040E62C                 jnz     loc_40E482
.text:0040E632                 lea     esi, [esi+0]
.text:0040E639                 lea     edi, [edi+0]
.text:0040E640
.text:0040E640 loc_40E640:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040E640                                         ; _win32_longpath+24F↓j ...
.text:0040E640                 inc     esi
.text:0040E641                 movzx   ebx, byte ptr [esi]
.text:0040E644                 test    bl, bl
.text:0040E646                 jz      loc_40E482
.text:0040E64C                 cmp     bl, 2Fh ; '/'
.text:0040E64F                 jz      short loc_40E640
.text:0040E651                 cmp     bl, 5Ch ; '\'
.text:0040E654                 jz      short loc_40E640
.text:0040E656                 jmp     loc_40E482
.text:0040E65B ; ---------------------------------------------------------------------------
.text:0040E65B
.text:0040E65B loc_40E65B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040E65B                                         ; _win32_longpath+53↑j
.text:0040E65B                 mov     edi, [esp+278h+lpFileName]
.text:0040E662                 movzx   edx, byte ptr [edi+1]
.text:0040E666                 cmp     dl, 2Fh ; '/'
.text:0040E669                 jz      short loc_40E674
.text:0040E66B                 cmp     dl, 5Ch ; '\'
.text:0040E66E                 jnz     loc_40E459
.text:0040E674
.text:0040E674 loc_40E674:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040E674                 mov     esi, [esp+278h+lpFileName]
.text:0040E67B                 mov     [ebp+268h+Destination], al
.text:0040E67E                 mov     ecx, [esp+278h+lpFileName]
.text:0040E685                 inc     ebp
.text:0040E686                 add     esi, 2
.text:0040E689                 movzx   ebx, byte ptr [ecx+1]
.text:0040E68D                 mov     [ebp+268h+Destination], bl
.text:0040E690                 inc     ebp
.text:0040E691                 movzx   eax, byte ptr [ecx+2]
.text:0040E695                 test    al, al
.text:0040E697                 jz      loc_40E773
.text:0040E69D                 cmp     al, 2Fh ; '/'
.text:0040E69F                 jz      loc_40E758
.text:0040E6A5                 cmp     al, 5Ch ; '\'
.text:0040E6A7                 mov     bl, al
.text:0040E6A9                 jz      loc_40E758
.text:0040E6AF
.text:0040E6AF loc_40E6AF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040E6AF                                         ; _win32_longpath+376↓j
.text:0040E6AF                 test    bl, bl
.text:0040E6B1                 jz      loc_40E459
.text:0040E6B7                 cmp     bl, 2Fh ; '/'
.text:0040E6BA                 jz      short loc_40E6DB
.text:0040E6BC                 cmp     bl, 5Ch ; '\'
.text:0040E6BF                 jz      short loc_40E6DB
.text:0040E6C1
.text:0040E6C1 loc_40E6C1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040E6C1                 mov     [ebp+268h+Destination], bl
.text:0040E6C4                 inc     esi
.text:0040E6C5                 inc     ebp
.text:0040E6C6                 movzx   ebx, byte ptr [esi]
.text:0040E6C9                 test    bl, bl
.text:0040E6CB                 jz      loc_40E459
.text:0040E6D1                 cmp     bl, 2Fh ; '/'
.text:0040E6D4                 jz      short loc_40E6DB
.text:0040E6D6                 cmp     bl, 5Ch ; '\'
.text:0040E6D9                 jnz     short loc_40E6C1
.text:0040E6DB
.text:0040E6DB loc_40E6DB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040E6DB                                         ; _win32_longpath+2BF↑j ...
.text:0040E6DB                 test    bl, bl
.text:0040E6DD                 jz      loc_40E459
.text:0040E6E3                 mov     [ebp+268h+Destination], bl
.text:0040E6E6                 inc     esi
.text:0040E6E7                 inc     ebp
.text:0040E6E8                 movzx   ebx, byte ptr [esi]
.text:0040E6EB                 test    bl, bl
.text:0040E6ED                 jz      loc_40E459
.text:0040E6F3                 cmp     bl, 2Fh ; '/'
.text:0040E6F6                 jz      short loc_40E740
.text:0040E6F8                 cmp     bl, 5Ch ; '\'
.text:0040E6FB                 jz      short loc_40E740
.text:0040E6FD
.text:0040E6FD loc_40E6FD:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040E6FD                 test    bl, bl
.text:0040E6FF                 jz      loc_40E459
.text:0040E705                 cmp     bl, 2Fh ; '/'
.text:0040E708                 jz      loc_40E459
.text:0040E70E                 cmp     bl, 5Ch ; '\'
.text:0040E711                 jz      loc_40E459
.text:0040E717
.text:0040E717 loc_40E717:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040E717                 mov     [ebp+268h+Destination], bl
.text:0040E71A                 inc     esi
.text:0040E71B                 inc     ebp
.text:0040E71C                 movzx   ebx, byte ptr [esi]
.text:0040E71F                 test    bl, bl
.text:0040E721                 jz      loc_40E459
.text:0040E727                 cmp     bl, 2Fh ; '/'
.text:0040E72A                 jz      loc_40E459
.text:0040E730                 cmp     bl, 5Ch ; '\'
.text:0040E733                 jnz     short loc_40E717
.text:0040E735                 jmp     loc_40E459
.text:0040E735 ; ---------------------------------------------------------------------------
.text:0040E73A                 align 10h
.text:0040E740
.text:0040E740 loc_40E740:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040E740                                         ; _win32_longpath+2FB↑j ...
.text:0040E740                 inc     esi
.text:0040E741                 movzx   ebx, byte ptr [esi]
.text:0040E744                 test    bl, bl
.text:0040E746                 jz      loc_40E459
.text:0040E74C                 cmp     bl, 2Fh ; '/'
.text:0040E74F                 jz      short loc_40E740
.text:0040E751                 cmp     bl, 5Ch ; '\'
.text:0040E754                 jz      short loc_40E740
.text:0040E756                 jmp     short loc_40E6FD
.text:0040E758 ; ---------------------------------------------------------------------------
.text:0040E758
.text:0040E758 loc_40E758:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040E758                                         ; _win32_longpath+2A9↑j ...
.text:0040E758                 inc     esi
.text:0040E759                 movzx   ebx, byte ptr [esi]
.text:0040E75C                 test    bl, bl
.text:0040E75E                 jz      loc_40E459
.text:0040E764                 cmp     bl, 2Fh ; '/'
.text:0040E767                 jz      short loc_40E758
.text:0040E769                 cmp     bl, 5Ch ; '\'
.text:0040E76C                 jz      short loc_40E758
.text:0040E76E                 jmp     loc_40E6AF
.text:0040E773 ; ---------------------------------------------------------------------------
.text:0040E773
.text:0040E773 loc_40E773:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040E773                 movzx   ebx, byte ptr [esi]
.text:0040E776                 jmp     loc_40E6AF
.text:0040E77B ; ---------------------------------------------------------------------------
.text:0040E77B
.text:0040E77B loc_40E77B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040E77B                 movzx   ecx, byte ptr [eax]
.text:0040E77E                 mov     esi, eax
.text:0040E780                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040E785                 add     esi, 2
.text:0040E788                 lea     ebp, [esp+12h]
.text:0040E78C                 mov     [esp+278h+Destination], cl
.text:0040E790                 jmp     loc_40E459
.text:0040E790 _win32_longpath endp
.text:0040E790
.text:0040E790 ; ---------------------------------------------------------------------------
.text:0040E795                 align 10h
.text:0040E7A0                 sub     esp, 0Ch
.text:0040E7A3                 mov     edx, [esp+10h]
.text:0040E7A7                 mov     dword ptr [esp+4], 0
.text:0040E7AF                 mov     [esp], edx
.text:0040E7B2                 call    sub_40D130
.text:0040E7B7                 inc     eax
.text:0040E7B8                 setnz   dl
.text:0040E7BB                 add     esp, 0Ch
.text:0040E7BE                 movzx   eax, dl
.text:0040E7C1                 retn
.text:0040E7C1 ; ---------------------------------------------------------------------------
.text:0040E7C2                 align 10h
.text:0040E7D0
.text:0040E7D0 ; =============== S U B R O U T I N E =======================================
.text:0040E7D0
.text:0040E7D0
.text:0040E7D0 sub_40E7D0      proc near               ; CODE XREF: sub_40D380+B4↑p
.text:0040E7D0                                         ; sub_40D600+AA↑p
.text:0040E7D0
.text:0040E7D0 arg_0           = dword ptr  4
.text:0040E7D0
.text:0040E7D0                 mov     ecx, [esp+arg_0]
.text:0040E7D4                 mov     edx, ecx
.text:0040E7D6                 movzx   eax, byte ptr [ecx]
.text:0040E7D9                 test    al, al
.text:0040E7DB                 jz      short loc_40E7EC
.text:0040E7DD                 lea     esi, [esi+0]
.text:0040E7E0
.text:0040E7E0 loc_40E7E0:                             ; CODE XREF: sub_40E7D0+1A↓j
.text:0040E7E0                 cmp     al, 5Ch ; '\'
.text:0040E7E2                 jz      short loc_40E7F0
.text:0040E7E4
.text:0040E7E4 loc_40E7E4:                             ; CODE XREF: sub_40E7D0+23↓j
.text:0040E7E4                 inc     edx
.text:0040E7E5                 movzx   eax, byte ptr [edx]
.text:0040E7E8                 test    al, al
.text:0040E7EA                 jnz     short loc_40E7E0
.text:0040E7EC
.text:0040E7EC loc_40E7EC:                             ; CODE XREF: sub_40E7D0+B↑j
.text:0040E7EC                 mov     eax, ecx
.text:0040E7EE                 retn
.text:0040E7EE ; ---------------------------------------------------------------------------
.text:0040E7EF                 align 10h
.text:0040E7F0
.text:0040E7F0 loc_40E7F0:                             ; CODE XREF: sub_40E7D0+12↑j
.text:0040E7F0                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040E7F3                 jmp     short loc_40E7E4
.text:0040E7F3 sub_40E7D0      endp
.text:0040E7F3
.text:0040E7F3 ; ---------------------------------------------------------------------------
.text:0040E7F5                 align 10h
.text:0040E800                 push    ebx
.text:0040E801                 sub     esp, 8
.text:0040E804                 mov     ebx, [esp+14h]
.text:0040E808                 mov     edx, [esp+10h]
.text:0040E80C                 mov     [esp], ebx
.text:0040E80F                 mov     [esp+4], edx
.text:0040E813                 call    strcpy
.text:0040E818                 movzx   eax, byte ptr [ebx]
.text:0040E81B                 mov     edx, ebx
.text:0040E81D                 test    al, al
.text:0040E81F                 jz      short loc_40E83C
.text:0040E821                 jmp     short loc_40E830
.text:0040E821 ; ---------------------------------------------------------------------------
.text:0040E823                 align 10h
.text:0040E830
.text:0040E830 loc_40E830:                             ; CODE XREF: .text:0040E821↑j
.text:0040E830                                         ; .text:0040E83A↓j
.text:0040E830                 cmp     al, 5Ch ; '\'
.text:0040E832                 jz      short loc_40E843
.text:0040E834
.text:0040E834 loc_40E834:                             ; CODE XREF: .text:0040E846↓j
.text:0040E834                 inc     edx
.text:0040E835                 movzx   eax, byte ptr [edx]
.text:0040E838                 test    al, al
.text:0040E83A                 jnz     short loc_40E830
.text:0040E83C
.text:0040E83C loc_40E83C:                             ; CODE XREF: .text:0040E81F↑j
.text:0040E83C                 add     esp, 8
.text:0040E83F                 xor     eax, eax
.text:0040E841                 pop     ebx
.text:0040E842                 retn
.text:0040E843 ; ---------------------------------------------------------------------------
.text:0040E843
.text:0040E843 loc_40E843:                             ; CODE XREF: .text:0040E832↑j
.text:0040E843                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040E846                 jmp     short loc_40E834
.text:0040E846 ; ---------------------------------------------------------------------------
.text:0040E848                 align 10h
.text:0040E850
.text:0040E850 ; =============== S U B R O U T I N E =======================================
.text:0040E850
.text:0040E850
.text:0040E850 sub_40E850      proc near               ; CODE XREF: sub_40BB50+16↑p
.text:0040E850                                         ; sub_40C050+1F↑p ...
.text:0040E850
.text:0040E850 arg_0           = dword ptr  4
.text:0040E850
.text:0040E850                 mov     ecx, [esp+arg_0]
.text:0040E854                 mov     edx, ecx
.text:0040E856                 movzx   eax, byte ptr [ecx]
.text:0040E859                 test    al, al
.text:0040E85B                 jz      short loc_40E86C
.text:0040E85D                 lea     esi, [esi+0]
.text:0040E860
.text:0040E860 loc_40E860:                             ; CODE XREF: sub_40E850+1A↓j
.text:0040E860                 cmp     al, 2Fh ; '/'
.text:0040E862                 jz      short loc_40E870
.text:0040E864
.text:0040E864 loc_40E864:                             ; CODE XREF: sub_40E850+23↓j
.text:0040E864                 inc     edx
.text:0040E865                 movzx   eax, byte ptr [edx]
.text:0040E868                 test    al, al
.text:0040E86A                 jnz     short loc_40E860
.text:0040E86C
.text:0040E86C loc_40E86C:                             ; CODE XREF: sub_40E850+B↑j
.text:0040E86C                 mov     eax, ecx
.text:0040E86E                 retn
.text:0040E86E ; ---------------------------------------------------------------------------
.text:0040E86F                 align 10h
.text:0040E870
.text:0040E870 loc_40E870:                             ; CODE XREF: sub_40E850+12↑j
.text:0040E870                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E873                 jmp     short loc_40E864
.text:0040E873 sub_40E850      endp
.text:0040E873
.text:0040E873 ; ---------------------------------------------------------------------------
.text:0040E875                 align 10h
.text:0040E880                 push    ebx
.text:0040E881                 sub     esp, 8
.text:0040E884                 mov     ebx, [esp+14h]
.text:0040E888                 mov     edx, [esp+10h]
.text:0040E88C                 mov     [esp], ebx
.text:0040E88F                 mov     [esp+4], edx
.text:0040E893                 call    strcpy
.text:0040E898                 movzx   eax, byte ptr [ebx]
.text:0040E89B                 mov     edx, ebx
.text:0040E89D                 test    al, al
.text:0040E89F                 jz      short loc_40E8BC
.text:0040E8A1                 jmp     short loc_40E8B0
.text:0040E8A1 ; ---------------------------------------------------------------------------
.text:0040E8A3                 align 10h
.text:0040E8B0
.text:0040E8B0 loc_40E8B0:                             ; CODE XREF: .text:0040E8A1↑j
.text:0040E8B0                                         ; .text:0040E8BA↓j
.text:0040E8B0                 cmp     al, 2Fh ; '/'
.text:0040E8B2                 jz      short loc_40E8C3
.text:0040E8B4
.text:0040E8B4 loc_40E8B4:                             ; CODE XREF: .text:0040E8C6↓j
.text:0040E8B4                 inc     edx
.text:0040E8B5                 movzx   eax, byte ptr [edx]
.text:0040E8B8                 test    al, al
.text:0040E8BA                 jnz     short loc_40E8B0
.text:0040E8BC
.text:0040E8BC loc_40E8BC:                             ; CODE XREF: .text:0040E89F↑j
.text:0040E8BC                 add     esp, 8
.text:0040E8BF                 xor     eax, eax
.text:0040E8C1                 pop     ebx
.text:0040E8C2                 retn
.text:0040E8C3 ; ---------------------------------------------------------------------------
.text:0040E8C3
.text:0040E8C3 loc_40E8C3:                             ; CODE XREF: .text:0040E8B2↑j
.text:0040E8C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E8C6                 jmp     short loc_40E8B4
.text:0040E8C6 ; ---------------------------------------------------------------------------
.text:0040E8C8                 align 10h
.text:0040E8D0                 push    ebx
.text:0040E8D1                 sub     esp, 8
.text:0040E8D4                 mov     ebx, [esp+14h]
.text:0040E8D8                 mov     edx, [esp+10h]
.text:0040E8DC                 mov     [esp+4], ebx
.text:0040E8E0                 mov     [esp], edx
.text:0040E8E3                 call    sub_40D5B0
.text:0040E8E8                 movzx   eax, byte ptr [ebx]
.text:0040E8EB                 mov     edx, ebx
.text:0040E8ED                 test    al, al
.text:0040E8EF                 jz      short loc_40E90C
.text:0040E8F1                 jmp     short loc_40E900
.text:0040E8F1 ; ---------------------------------------------------------------------------
.text:0040E8F3                 align 10h
.text:0040E900
.text:0040E900 loc_40E900:                             ; CODE XREF: .text:0040E8F1↑j
.text:0040E900                                         ; .text:0040E90A↓j
.text:0040E900                 cmp     al, 2Fh ; '/'
.text:0040E902                 jz      short loc_40E913
.text:0040E904
.text:0040E904 loc_40E904:                             ; CODE XREF: .text:0040E916↓j
.text:0040E904                 inc     edx
.text:0040E905                 movzx   eax, byte ptr [edx]
.text:0040E908                 test    al, al
.text:0040E90A                 jnz     short loc_40E900
.text:0040E90C
.text:0040E90C loc_40E90C:                             ; CODE XREF: .text:0040E8EF↑j
.text:0040E90C                 add     esp, 8
.text:0040E90F                 xor     eax, eax
.text:0040E911                 pop     ebx
.text:0040E912                 retn
.text:0040E913 ; ---------------------------------------------------------------------------
.text:0040E913
.text:0040E913 loc_40E913:                             ; CODE XREF: .text:0040E902↑j
.text:0040E913                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040E916                 jmp     short loc_40E904
.text:0040E916 ; ---------------------------------------------------------------------------
.text:0040E918                 align 10h
.text:0040E920                 push    ebx
.text:0040E921                 sub     esp, 8
.text:0040E924                 mov     ebx, [esp+14h]
.text:0040E928                 mov     edx, [esp+10h]
.text:0040E92C                 mov     [esp], ebx
.text:0040E92F                 mov     [esp+4], edx
.text:0040E933                 call    sub_40D5B0
.text:0040E938                 movzx   eax, byte ptr [ebx]
.text:0040E93B                 mov     edx, ebx
.text:0040E93D                 test    al, al
.text:0040E93F                 jz      short loc_40E95C
.text:0040E941                 jmp     short loc_40E950
.text:0040E941 ; ---------------------------------------------------------------------------
.text:0040E943                 align 10h
.text:0040E950
.text:0040E950 loc_40E950:                             ; CODE XREF: .text:0040E941↑j
.text:0040E950                                         ; .text:0040E95A↓j
.text:0040E950                 cmp     al, 5Ch ; '\'
.text:0040E952                 jz      short loc_40E961
.text:0040E954
.text:0040E954 loc_40E954:                             ; CODE XREF: .text:0040E964↓j
.text:0040E954                 inc     edx
.text:0040E955                 movzx   eax, byte ptr [edx]
.text:0040E958                 test    al, al
.text:0040E95A                 jnz     short loc_40E950
.text:0040E95C
.text:0040E95C loc_40E95C:                             ; CODE XREF: .text:0040E93F↑j
.text:0040E95C                 add     esp, 8
.text:0040E95F                 pop     ebx
.text:0040E960                 retn
.text:0040E961 ; ---------------------------------------------------------------------------
.text:0040E961
.text:0040E961 loc_40E961:                             ; CODE XREF: .text:0040E952↑j
.text:0040E961                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040E964                 jmp     short loc_40E954
.text:0040E964 ; ---------------------------------------------------------------------------
.text:0040E966                 align 10h
.text:0040E970
.text:0040E970 ; =============== S U B R O U T I N E =======================================
.text:0040E970
.text:0040E970
.text:0040E970 ; int __cdecl sub_40E970(LPSTR)
.text:0040E970 sub_40E970      proc near               ; CODE XREF: .text:0040E9FE↓p
.text:0040E970                                         ; .text:0040EA3E↓p ...
.text:0040E970
.text:0040E970 hModule         = dword ptr -1Ch
.text:0040E970 lpFilename      = dword ptr -18h
.text:0040E970 nSize           = dword ptr -14h
.text:0040E970 arg_0           = dword ptr  4
.text:0040E970
.text:0040E970                 push    esi
.text:0040E971                 push    ebx
.text:0040E972                 sub     esp, 14h
.text:0040E975                 mov     esi, [esp+1Ch+arg_0]
.text:0040E979                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040E981                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040E988                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040E98C                 call    GetModuleFileNameA
.text:0040E991                 sub     esp, 0Ch
.text:0040E994                 test    eax, eax
.text:0040E996                 jz      short loc_40E9D8
.text:0040E998                 cmp     eax, 104h
.text:0040E99D                 jg      short loc_40E9C9
.text:0040E99F
.text:0040E99F loc_40E99F:                             ; CODE XREF: sub_40E970+66↓j
.text:0040E99F                                         ; sub_40E970+78↓j
.text:0040E99F                 movzx   eax, byte ptr [esi]
.text:0040E9A2                 mov     edx, esi
.text:0040E9A4                 test    al, al
.text:0040E9A6                 jz      short loc_40E9BC
.text:0040E9A8                 nop
.text:0040E9A9                 lea     esi, [esi+0]
.text:0040E9B0
.text:0040E9B0 loc_40E9B0:                             ; CODE XREF: sub_40E970+4A↓j
.text:0040E9B0                 cmp     al, 5Ch ; '\'
.text:0040E9B2                 jz      short loc_40E9C4
.text:0040E9B4
.text:0040E9B4 loc_40E9B4:                             ; CODE XREF: sub_40E970+57↓j
.text:0040E9B4                 inc     edx
.text:0040E9B5                 movzx   eax, byte ptr [edx]
.text:0040E9B8                 test    al, al
.text:0040E9BA                 jnz     short loc_40E9B0
.text:0040E9BC
.text:0040E9BC loc_40E9BC:                             ; CODE XREF: sub_40E970+36↑j
.text:0040E9BC                 add     esp, 14h
.text:0040E9BF                 mov     eax, esi
.text:0040E9C1                 pop     ebx
.text:0040E9C2                 pop     esi
.text:0040E9C3                 retn
.text:0040E9C4 ; ---------------------------------------------------------------------------
.text:0040E9C4
.text:0040E9C4 loc_40E9C4:                             ; CODE XREF: sub_40E970+42↑j
.text:0040E9C4                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040E9C7                 jmp     short loc_40E9B4
.text:0040E9C9 ; ---------------------------------------------------------------------------
.text:0040E9C9
.text:0040E9C9 loc_40E9C9:                             ; CODE XREF: sub_40E970+2D↑j
.text:0040E9C9                 call    _errno
.text:0040E9CE                 mov     dword ptr [eax], 26h ; '&'
.text:0040E9D4                 xor     esi, esi
.text:0040E9D6                 jmp     short loc_40E99F
.text:0040E9D8 ; ---------------------------------------------------------------------------
.text:0040E9D8
.text:0040E9D8 loc_40E9D8:                             ; CODE XREF: sub_40E970+26↑j
.text:0040E9D8                 call    sub_40D110
.text:0040E9DD                 mov     ebx, eax
.text:0040E9DF                 xor     esi, esi
.text:0040E9E1                 call    _errno
.text:0040E9E6                 mov     [eax], ebx
.text:0040E9E8                 jmp     short loc_40E99F
.text:0040E9E8 sub_40E970      endp
.text:0040E9E8
.text:0040E9E8 ; ---------------------------------------------------------------------------
.text:0040E9EA                 align 10h
.text:0040E9F0                 sub     esp, 0Ch
.text:0040E9F3                 mov     [esp+8], ebx
.text:0040E9F7                 mov     ebx, [esp+10h]
.text:0040E9FB                 mov     [esp], ebx
.text:0040E9FE                 call    sub_40E970
.text:0040EA03                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040EA0B                 mov     [esp], ebx
.text:0040EA0E                 call    strrchr
.text:0040EA13                 test    eax, eax
.text:0040EA15                 jz      short loc_40EA1A
.text:0040EA17                 lea     ebx, [eax+1]
.text:0040EA1A
.text:0040EA1A loc_40EA1A:                             ; CODE XREF: .text:0040EA15↑j
.text:0040EA1A                 mov     eax, ebx
.text:0040EA1C                 mov     ebx, [esp+8]
.text:0040EA20                 add     esp, 0Ch
.text:0040EA23                 retn
.text:0040EA23 ; ---------------------------------------------------------------------------
.text:0040EA24                 align 10h
.text:0040EA30                 sub     esp, 0Ch
.text:0040EA33                 mov     [esp+8], ebx
.text:0040EA37                 mov     ebx, [esp+10h]
.text:0040EA3B                 mov     [esp], ebx
.text:0040EA3E                 call    sub_40E970
.text:0040EA43                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040EA4B                 mov     [esp], ebx
.text:0040EA4E                 call    strrchr
.text:0040EA53                 test    eax, eax
.text:0040EA55                 jz      short loc_40EA5A
.text:0040EA57                 mov     byte ptr [eax], 0
.text:0040EA5A
.text:0040EA5A loc_40EA5A:                             ; CODE XREF: .text:0040EA55↑j
.text:0040EA5A                 mov     eax, ebx
.text:0040EA5C                 mov     ebx, [esp+8]
.text:0040EA60                 add     esp, 0Ch
.text:0040EA63                 retn
.text:0040EA63 ; ---------------------------------------------------------------------------
.text:0040EA64                 align 10h
.text:0040EA70                 sub     esp, 0Ch
.text:0040EA73                 mov     [esp+8], ebx
.text:0040EA77                 mov     ebx, [esp+10h]
.text:0040EA7B                 mov     [esp], ebx
.text:0040EA7E                 call    sub_40E970
.text:0040EA83                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040EA8B                 mov     [esp], ebx
.text:0040EA8E                 call    strrchr
.text:0040EA93                 test    eax, eax
.text:0040EA95                 jz      short loc_40EA9A
.text:0040EA97                 mov     byte ptr [eax], 0
.text:0040EA9A
.text:0040EA9A loc_40EA9A:                             ; CODE XREF: .text:0040EA95↑j
.text:0040EA9A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040EAA2                 mov     [esp], ebx
.text:0040EAA5                 call    strrchr
.text:0040EAAA                 test    eax, eax
.text:0040EAAC                 jz      short loc_40EAB1
.text:0040EAAE                 mov     byte ptr [eax], 0
.text:0040EAB1
.text:0040EAB1 loc_40EAB1:                             ; CODE XREF: .text:0040EAAC↑j
.text:0040EAB1                 mov     eax, ebx
.text:0040EAB3                 mov     ebx, [esp+8]
.text:0040EAB7                 add     esp, 0Ch
.text:0040EABA                 retn
.text:0040EABA ; ---------------------------------------------------------------------------
.text:0040EABB                 align 10h
.text:0040EAC0                 sub     esp, 1Ch
.text:0040EAC3                 mov     edx, [esp+20h]
.text:0040EAC7                 mov     [esp+10h], ebx
.text:0040EACB                 xor     ebx, ebx
.text:0040EACD                 mov     [esp+14h], esi
.text:0040EAD1                 mov     [esp+18h], edi
.text:0040EAD5                 mov     [esp], edx
.text:0040EAD8                 call    sub_40D5E0
.text:0040EADD                 mov     edx, [esp+24h]
.text:0040EAE1                 mov     edi, eax
.text:0040EAE3                 mov     [esp], edx
.text:0040EAE6                 call    sub_40D5E0
.text:0040EAEB                 mov     [esp+4], eax
.text:0040EAEF                 mov     esi, eax
.text:0040EAF1                 mov     [esp], edi
.text:0040EAF4                 call    _stricmp_0
.text:0040EAF9                 mov     [esp], edi
.text:0040EAFC                 test    eax, eax
.text:0040EAFE                 setz    bl
.text:0040EB01                 call    free
.text:0040EB06                 mov     [esp], esi
.text:0040EB09                 call    free
.text:0040EB0E                 mov     eax, ebx
.text:0040EB10                 mov     esi, [esp+14h]
.text:0040EB14                 mov     ebx, [esp+10h]
.text:0040EB18                 mov     edi, [esp+18h]
.text:0040EB1C                 add     esp, 1Ch
.text:0040EB1F                 retn
.text:0040EB20 ; ---------------------------------------------------------------------------
.text:0040EB20                 xor     eax, eax
.text:0040EB22                 retn
.text:0040EB22 ; ---------------------------------------------------------------------------
.text:0040EB23 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040EB57↓o
.text:0040EB30 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040EB66↓o
.text:0040EB40 ; ---------------------------------------------------------------------------
.text:0040EB40                 sub     esp, 1Ch
.text:0040EB43                 mov     [esp+10h], ebx
.text:0040EB47                 mov     ebx, [esp+20h]
.text:0040EB4B                 mov     [esp+18h], edi
.text:0040EB4F                 mov     edi, [esp+24h]
.text:0040EB53                 mov     [esp+14h], esi
.text:0040EB57                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040EB5E                 call    GetModuleHandleA
.text:0040EB63                 sub     esp, 4
.text:0040EB66                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040EB6E                 mov     [esp], eax
.text:0040EB71                 call    GetProcAddress
.text:0040EB76                 sub     esp, 8
.text:0040EB79                 test    eax, eax
.text:0040EB7B                 jz      short loc_40EB93
.text:0040EB7D                 mov     dword ptr [esp+8], 104h
.text:0040EB85                 mov     [esp+4], ebx
.text:0040EB89                 mov     [esp], edi
.text:0040EB8C                 call    eax
.text:0040EB8E                 sub     esp, 0Ch
.text:0040EB91                 mov     esi, eax
.text:0040EB93
.text:0040EB93 loc_40EB93:                             ; CODE XREF: .text:0040EB7B↑j
.text:0040EB93                 test    esi, esi
.text:0040EB95                 jz      short loc_40EBB0
.text:0040EB97
.text:0040EB97 loc_40EB97:                             ; CODE XREF: .text:0040EBCB↓j
.text:0040EB97                 mov     eax, ebx
.text:0040EB99                 mov     esi, [esp+14h]
.text:0040EB9D                 mov     ebx, [esp+10h]
.text:0040EBA1                 mov     edi, [esp+18h]
.text:0040EBA5                 add     esp, 1Ch
.text:0040EBA8                 retn
.text:0040EBA8 ; ---------------------------------------------------------------------------
.text:0040EBA9                 align 10h
.text:0040EBB0
.text:0040EBB0 loc_40EBB0:                             ; CODE XREF: .text:0040EB95↑j
.text:0040EBB0                 call    sub_4102D0
.text:0040EBB5                 mov     [esp], ebx
.text:0040EBB8                 mov     [esp+4], edi
.text:0040EBBC                 call    strcpy
.text:0040EBC1                 mov     [esp], ebx
.text:0040EBC4                 call    _win32_longpath
.text:0040EBC9                 mov     ebx, eax
.text:0040EBCB                 jmp     short loc_40EB97
.text:0040EBCB ; ---------------------------------------------------------------------------
.text:0040EBCD                 align 10h
.text:0040EBD0                 sub     esp, 1Ch
.text:0040EBD3                 mov     [esp+18h], edi
.text:0040EBD7                 mov     edi, [esp+20h]
.text:0040EBDB                 mov     [esp+10h], ebx
.text:0040EBDF                 mov     [esp+14h], esi
.text:0040EBE3                 mov     dword ptr [esp+8], 0
.text:0040EBEB                 mov     dword ptr [esp+4], 0
.text:0040EBF3                 mov     [esp], edi
.text:0040EBF6                 call    GetShortPathNameA
.text:0040EBFB                 sub     esp, 0Ch
.text:0040EBFE                 mov     ebx, eax
.text:0040EC00                 test    eax, eax
.text:0040EC02                 jz      short loc_40EC50
.text:0040EC04                 lea     edx, [eax+1]
.text:0040EC07                 mov     [esp], edx
.text:0040EC0A                 call    malloc
.text:0040EC0F                 test    eax, eax
.text:0040EC11                 mov     esi, eax
.text:0040EC13                 jz      short loc_40EC50
.text:0040EC15                 mov     [esp+8], ebx
.text:0040EC19                 mov     [esp+4], eax
.text:0040EC1D                 mov     [esp], edi
.text:0040EC20                 call    GetShortPathNameA
.text:0040EC25                 sub     esp, 0Ch
.text:0040EC28                 mov     edx, esi
.text:0040EC2A                 test    eax, eax
.text:0040EC2C                 jz      short loc_40EC42
.text:0040EC2E                 mov     esi, esi
.text:0040EC30
.text:0040EC30 loc_40EC30:                             ; CODE XREF: .text:0040EC60↓j
.text:0040EC30                 mov     ebx, [esp+10h]
.text:0040EC34                 mov     eax, edx
.text:0040EC36                 mov     esi, [esp+14h]
.text:0040EC3A                 mov     edi, [esp+18h]
.text:0040EC3E                 add     esp, 1Ch
.text:0040EC41                 retn
.text:0040EC42 ; ---------------------------------------------------------------------------
.text:0040EC42
.text:0040EC42 loc_40EC42:                             ; CODE XREF: .text:0040EC2C↑j
.text:0040EC42                 mov     [esp], esi
.text:0040EC45                 call    free
.text:0040EC4A                 lea     esi, [esi+0]
.text:0040EC50
.text:0040EC50 loc_40EC50:                             ; CODE XREF: .text:0040EC02↑j
.text:0040EC50                                         ; .text:0040EC13↑j
.text:0040EC50                 call    sub_40D110
.text:0040EC55                 mov     esi, eax
.text:0040EC57                 call    _errno
.text:0040EC5C                 mov     [eax], esi
.text:0040EC5E                 mov     edx, edi
.text:0040EC60                 jmp     short loc_40EC30
.text:0040EC60 ; ---------------------------------------------------------------------------
.text:0040EC62                 align 10h
.text:0040EC70 aNotset         db 'notset',0           ; DATA XREF: .data:off_414080↓o
.text:0040EC70                                         ; .data:off_414084↓o
.text:0040EC77 ; ---------------------------------------------------------------------------
.text:0040EC77
.text:0040EC77 loc_40EC77:                             ; DATA XREF: .text:loc_40ED15↓o
.text:0040EC77                 jb      short loc_40ECF0
.text:0040EC79                 add     [eax], ah
.text:0040EC7B                 or      [eax], eax
.text:0040EC7D
.text:0040EC7D loc_40EC7D:                             ; DATA XREF: .text:0040ED68↓o
.text:0040EC7D                                         ; .text:0040EDCE↓o ...
.text:0040EC7D                 add     [eax], ah
.text:0040EC7F                 and     eax, 64252064h
.text:0040EC84                 and     [eax], al
.text:0040EC86                 lea     esi, [esi+0]
.text:0040EC89                 lea     edi, [edi+0]
.text:0040EC90                 push    ebp
.text:0040EC91                 push    edi
.text:0040EC92                 push    esi
.text:0040EC93                 push    ebx
.text:0040EC94                 sub     esp, 14Ch
.text:0040EC9A                 mov     edx, off_414080 ; "notset"
.text:0040ECA0                 mov     edi, [esp+164h]
.text:0040ECA7                 mov     ebp, [esp+168h]
.text:0040ECAE                 mov     [esp+4], edx
.text:0040ECB2                 mov     edx, off_414084 ; "notset"
.text:0040ECB8                 mov     [esp], edx
.text:0040ECBB                 call    strcmp
.text:0040ECC0                 test    eax, eax
.text:0040ECC2                 jz      loc_40F0B0
.text:0040ECC8
.text:0040ECC8 loc_40ECC8:                             ; CODE XREF: .text:0040F0FC↓j
.text:0040ECC8                 lea     ebx, [esp+20h]
.text:0040ECCC                 lea     esi, [esi+0]
.text:0040ECD0
.text:0040ECD0 loc_40ECD0:                             ; CODE XREF: .text:0040ED06↓j
.text:0040ECD0                 mov     [esp+4], ebx
.text:0040ECD4                 mov     ecx, off_414084 ; "notset"
.text:0040ECDA                 mov     [esp], ecx
.text:0040ECDD                 call    loc_40E200
.text:0040ECE2                 test    eax, eax
.text:0040ECE4                 jns     short loc_40ED15
.text:0040ECE6                 mov     eax, off_414084 ; "notset"
.text:0040ECEB                 cmp     byte ptr [eax], 0
.text:0040ECEE                 jz      short loc_40ED08
.text:0040ECF0
.text:0040ECF0 loc_40ECF0:                             ; CODE XREF: .text:loc_40EC77↑j
.text:0040ECF0                 mov     dword ptr [esp+4], 0
.text:0040ECF8                 mov     [esp], eax
.text:0040ECFB                 call    strchr
.text:0040ED00                 inc     eax
.text:0040ED01                 mov     off_414084, eax ; "notset"
.text:0040ED06                 jmp     short loc_40ECD0
.text:0040ED08 ; ---------------------------------------------------------------------------
.text:0040ED08
.text:0040ED08 loc_40ED08:                             ; CODE XREF: .text:0040ECEE↑j
.text:0040ED08                 xor     eax, eax
.text:0040ED0A
.text:0040ED0A loc_40ED0A:                             ; CODE XREF: .text:0040EECC↓j
.text:0040ED0A                 add     esp, 14Ch
.text:0040ED10                 pop     ebx
.text:0040ED11                 pop     esi
.text:0040ED12                 pop     edi
.text:0040ED13                 pop     ebp
.text:0040ED14                 retn
.text:0040ED15 ; ---------------------------------------------------------------------------
.text:0040ED15
.text:0040ED15 loc_40ED15:                             ; CODE XREF: .text:0040ECE4↑j
.text:0040ED15                 mov     dword ptr [edi+0Ch], offset loc_40EC77
.text:0040ED1C                 lea     ecx, [esp+0D6h]
.text:0040ED23                 lea     edx, [esp+6Ch]
.text:0040ED27                 mov     [edi+4], ecx
.text:0040ED2A                 lea     ebx, [esp+7Ch]
.text:0040ED2E                 mov     [edi+8], edx
.text:0040ED31                 mov     [edi], ebx
.text:0040ED33                 mov     [esp], ebp
.text:0040ED36                 mov     [esp+4], edi
.text:0040ED3A                 call    ___addmntentstr
.text:0040ED3F                 mov     [esp], ebp
.text:0040ED42                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040ED4A                 call    strspn
.text:0040ED4F                 mov     dword ptr [esp+4], 0
.text:0040ED57                 mov     ebx, off_414084 ; "notset"
.text:0040ED5D                 lea     esi, [eax+ebp]
.text:0040ED60                 mov     [esp+1Ch], esi
.text:0040ED64                 lea     ebp, [esp+1Ch]
.text:0040ED68                 mov     esi, offset loc_40EC7D
.text:0040ED6D                 mov     [esp], ebx
.text:0040ED70                 call    strchr
.text:0040ED75                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040ED7D                 inc     eax
.text:0040ED7E                 mov     off_414084, eax ; "notset"
.text:0040ED83                 mov     [esp], ebp
.text:0040ED86                 call    sub_4105F0
.text:0040ED8B                 test    eax, eax
.text:0040ED8D                 mov     ebx, eax
.text:0040ED8F                 jz      short loc_40EDB8
.text:0040ED91                 mov     edx, eax
.text:0040ED93                 mov     ecx, eax
.text:0040ED95                 lea     esi, [esi+0]
.text:0040ED99                 lea     edi, [edi+0]
.text:0040EDA0
.text:0040EDA0 loc_40EDA0:                             ; CODE XREF: .text:0040EDB6↓j
.text:0040EDA0                 movzx   eax, byte ptr [edx]
.text:0040EDA3                 cmp     al, 5Ch ; '\'
.text:0040EDA5                 jz      loc_40F054
.text:0040EDAB
.text:0040EDAB loc_40EDAB:                             ; CODE XREF: .text:0040F05C↓j
.text:0040EDAB                                         ; .text:0040F06A↓j ...
.text:0040EDAB                 mov     [ecx], al
.text:0040EDAD
.text:0040EDAD loc_40EDAD:                             ; CODE XREF: .text:0040F07E↓j
.text:0040EDAD                 inc     ecx
.text:0040EDAE
.text:0040EDAE loc_40EDAE:                             ; CODE XREF: .text:0040F096↓j
.text:0040EDAE                 movzx   eax, byte ptr [edx]
.text:0040EDB1                 mov     esi, ebx
.text:0040EDB3                 inc     edx
.text:0040EDB4                 test    al, al
.text:0040EDB6                 jnz     short loc_40EDA0
.text:0040EDB8
.text:0040EDB8 loc_40EDB8:                             ; CODE XREF: .text:0040ED8F↑j
.text:0040EDB8                 mov     [edi], esi
.text:0040EDBA                 mov     eax, [esp+1Ch]
.text:0040EDBE                 test    eax, eax
.text:0040EDC0                 jnz     loc_40F03B
.text:0040EDC6
.text:0040EDC6 loc_40EDC6:                             ; CODE XREF: .text:0040F04F↓j
.text:0040EDC6                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040EDCE                 mov     esi, offset loc_40EC7D
.text:0040EDD3                 mov     [esp], ebp
.text:0040EDD6                 call    sub_4105F0
.text:0040EDDB                 test    eax, eax
.text:0040EDDD                 mov     ebx, eax
.text:0040EDDF                 jz      short loc_40EE08
.text:0040EDE1                 mov     edx, eax
.text:0040EDE3                 mov     ecx, eax
.text:0040EDE5                 lea     esi, [esi+0]
.text:0040EDE9                 lea     edi, [edi+0]
.text:0040EDF0
.text:0040EDF0 loc_40EDF0:                             ; CODE XREF: .text:0040EE06↓j
.text:0040EDF0                 movzx   eax, byte ptr [edx]
.text:0040EDF3                 cmp     al, 5Ch ; '\'
.text:0040EDF5                 jz      loc_40EFE3
.text:0040EDFB
.text:0040EDFB loc_40EDFB:                             ; CODE XREF: .text:0040EFEB↓j
.text:0040EDFB                                         ; .text:0040EFF9↓j ...
.text:0040EDFB                 mov     [ecx], al
.text:0040EDFD
.text:0040EDFD loc_40EDFD:                             ; CODE XREF: .text:0040F00D↓j
.text:0040EDFD                 inc     ecx
.text:0040EDFE
.text:0040EDFE loc_40EDFE:                             ; CODE XREF: .text:0040F025↓j
.text:0040EDFE                 movzx   eax, byte ptr [edx]
.text:0040EE01                 mov     esi, ebx
.text:0040EE03                 inc     edx
.text:0040EE04                 test    al, al
.text:0040EE06                 jnz     short loc_40EDF0
.text:0040EE08
.text:0040EE08 loc_40EE08:                             ; CODE XREF: .text:0040EDDF↑j
.text:0040EE08                 mov     [edi+4], esi
.text:0040EE0B                 mov     eax, [esp+1Ch]
.text:0040EE0F                 test    eax, eax
.text:0040EE11                 jnz     loc_40EFCA
.text:0040EE17
.text:0040EE17 loc_40EE17:                             ; CODE XREF: .text:0040EFDE↓j
.text:0040EE17                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040EE1F                 mov     esi, offset loc_40EC7D
.text:0040EE24                 mov     [esp], ebp
.text:0040EE27                 call    sub_4105F0
.text:0040EE2C                 test    eax, eax
.text:0040EE2E                 mov     ebx, eax
.text:0040EE30                 jz      short loc_40EE58
.text:0040EE32                 mov     edx, eax
.text:0040EE34                 mov     ecx, eax
.text:0040EE36                 lea     esi, [esi+0]
.text:0040EE39                 lea     edi, [edi+0]
.text:0040EE40
.text:0040EE40 loc_40EE40:                             ; CODE XREF: .text:0040EE56↓j
.text:0040EE40                 movzx   eax, byte ptr [edx]
.text:0040EE43                 cmp     al, 5Ch ; '\'
.text:0040EE45                 jz      loc_40EF72
.text:0040EE4B
.text:0040EE4B loc_40EE4B:                             ; CODE XREF: .text:0040EF7A↓j
.text:0040EE4B                                         ; .text:0040EF88↓j ...
.text:0040EE4B                 mov     [ecx], al
.text:0040EE4D
.text:0040EE4D loc_40EE4D:                             ; CODE XREF: .text:0040EF9C↓j
.text:0040EE4D                 inc     ecx
.text:0040EE4E
.text:0040EE4E loc_40EE4E:                             ; CODE XREF: .text:0040EFB4↓j
.text:0040EE4E                 movzx   eax, byte ptr [edx]
.text:0040EE51                 mov     esi, ebx
.text:0040EE53                 inc     edx
.text:0040EE54                 test    al, al
.text:0040EE56                 jnz     short loc_40EE40
.text:0040EE58
.text:0040EE58 loc_40EE58:                             ; CODE XREF: .text:0040EE30↑j
.text:0040EE58                 mov     [edi+8], esi
.text:0040EE5B                 mov     eax, [esp+1Ch]
.text:0040EE5F                 test    eax, eax
.text:0040EE61                 jnz     loc_40EF59
.text:0040EE67
.text:0040EE67 loc_40EE67:                             ; CODE XREF: .text:0040EF6D↓j
.text:0040EE67                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040EE6F                 mov     esi, offset loc_40EC7D
.text:0040EE74                 mov     [esp], ebp
.text:0040EE77                 call    sub_4105F0
.text:0040EE7C                 test    eax, eax
.text:0040EE7E                 mov     ebx, eax
.text:0040EE80                 jz      short loc_40EEA4
.text:0040EE82                 mov     edx, eax
.text:0040EE84                 mov     ecx, eax
.text:0040EE86                 lea     esi, [esi+0]
.text:0040EE89                 lea     edi, [edi+0]
.text:0040EE90
.text:0040EE90 loc_40EE90:                             ; CODE XREF: .text:0040EEA2↓j
.text:0040EE90                 movzx   eax, byte ptr [edx]
.text:0040EE93                 cmp     al, 5Ch ; '\'
.text:0040EE95                 jz      short loc_40EF05
.text:0040EE97
.text:0040EE97 loc_40EE97:                             ; CODE XREF: .text:0040EF0D↓j
.text:0040EE97                                         ; .text:0040EF17↓j ...
.text:0040EE97                 mov     [ecx], al
.text:0040EE99
.text:0040EE99 loc_40EE99:                             ; CODE XREF: .text:0040EF2B↓j
.text:0040EE99                 inc     ecx
.text:0040EE9A
.text:0040EE9A loc_40EE9A:                             ; CODE XREF: .text:0040EF43↓j
.text:0040EE9A                 movzx   eax, byte ptr [edx]
.text:0040EE9D                 mov     esi, ebx
.text:0040EE9F                 inc     edx
.text:0040EEA0                 test    al, al
.text:0040EEA2                 jnz     short loc_40EE90
.text:0040EEA4
.text:0040EEA4 loc_40EEA4:                             ; CODE XREF: .text:0040EE80↑j
.text:0040EEA4                 mov     [edi+0Ch], esi
.text:0040EEA7                 xor     eax, eax
.text:0040EEA9                 mov     edx, [esp+1Ch]
.text:0040EEAD                 test    edx, edx
.text:0040EEAF                 jnz     short loc_40EEE5
.text:0040EEB1
.text:0040EEB1 loc_40EEB1:                             ; CODE XREF: .text:0040EF03↓j
.text:0040EEB1                 cmp     eax, 1
.text:0040EEB4                 jz      short loc_40EEDC
.text:0040EEB6                 cmp     eax, 1
.text:0040EEB9                 jle     short loc_40EED1
.text:0040EEBB
.text:0040EEBB loc_40EEBB:                             ; CODE XREF: .text:0040EED3↓j
.text:0040EEBB                                         ; .text:0040EEE3↓j
.text:0040EEBB                 mov     edx, [esp+160h]
.text:0040EEC2                 mov     [esp], edx
.text:0040EEC5                 call    sub_410590
.text:0040EECA                 mov     eax, edi
.text:0040EECC                 jmp     loc_40ED0A
.text:0040EED1 ; ---------------------------------------------------------------------------
.text:0040EED1
.text:0040EED1 loc_40EED1:                             ; CODE XREF: .text:0040EEB9↑j
.text:0040EED1                 test    eax, eax
.text:0040EED3                 jnz     short loc_40EEBB
.text:0040EED5                 mov     dword ptr [edi+10h], 0
.text:0040EEDC
.text:0040EEDC loc_40EEDC:                             ; CODE XREF: .text:0040EEB4↑j
.text:0040EEDC                 mov     dword ptr [edi+14h], 0
.text:0040EEE3                 jmp     short loc_40EEBB
.text:0040EEE5 ; ---------------------------------------------------------------------------
.text:0040EEE5
.text:0040EEE5 loc_40EEE5:                             ; CODE XREF: .text:0040EEAF↑j
.text:0040EEE5                 mov     dword ptr [esp+4], 40EC7Eh
.text:0040EEED                 lea     esi, [edi+14h]
.text:0040EEF0                 lea     ebp, [edi+10h]
.text:0040EEF3                 mov     [esp+0Ch], esi
.text:0040EEF7                 mov     [esp+8], ebp
.text:0040EEFB                 mov     [esp], edx
.text:0040EEFE                 call    sscanf
.text:0040EF03                 jmp     short loc_40EEB1
.text:0040EF05 ; ---------------------------------------------------------------------------
.text:0040EF05
.text:0040EF05 loc_40EF05:                             ; CODE XREF: .text:0040EE95↑j
.text:0040EF05                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF09                 jz      short loc_40EF48
.text:0040EF0B
.text:0040EF0B loc_40EF0B:                             ; CODE XREF: .text:0040EF4C↓j
.text:0040EF0B                                         ; .text:0040EF52↓j
.text:0040EF0B                 cmp     al, 5Ch ; '\'
.text:0040EF0D                 jnz     short loc_40EE97
.text:0040EF0F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF13                 jz      short loc_40EF30
.text:0040EF15
.text:0040EF15 loc_40EF15:                             ; CODE XREF: .text:0040EF34↓j
.text:0040EF15                                         ; .text:0040EF3A↓j
.text:0040EF15                 cmp     al, 5Ch ; '\'
.text:0040EF17                 jnz     loc_40EE97
.text:0040EF1D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040EF21                 jnz     loc_40EE97
.text:0040EF27                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040EF2A                 inc     edx
.text:0040EF2B                 jmp     loc_40EE99
.text:0040EF30 ; ---------------------------------------------------------------------------
.text:0040EF30
.text:0040EF30 loc_40EF30:                             ; CODE XREF: .text:0040EF13↑j
.text:0040EF30                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040EF34                 jnz     short loc_40EF15
.text:0040EF36                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040EF3A                 jnz     short loc_40EF15
.text:0040EF3C                 mov     byte ptr [ecx], 9
.text:0040EF3F
.text:0040EF3F loc_40EF3F:                             ; CODE XREF: .text:0040EF57↓j
.text:0040EF3F                 inc     ecx
.text:0040EF40                 add     edx, 3
.text:0040EF43                 jmp     loc_40EE9A
.text:0040EF48 ; ---------------------------------------------------------------------------
.text:0040EF48
.text:0040EF48 loc_40EF48:                             ; CODE XREF: .text:0040EF09↑j
.text:0040EF48                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040EF4C                 jnz     short loc_40EF0B
.text:0040EF4E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040EF52                 jnz     short loc_40EF0B
.text:0040EF54                 mov     byte ptr [ecx], 20h ; ' '
.text:0040EF57                 jmp     short loc_40EF3F
.text:0040EF59 ; ---------------------------------------------------------------------------
.text:0040EF59
.text:0040EF59 loc_40EF59:                             ; CODE XREF: .text:0040EE61↑j
.text:0040EF59                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040EF61                 mov     [esp], eax
.text:0040EF64                 call    strspn
.text:0040EF69                 add     [esp+1Ch], eax
.text:0040EF6D                 jmp     loc_40EE67
.text:0040EF72 ; ---------------------------------------------------------------------------
.text:0040EF72
.text:0040EF72 loc_40EF72:                             ; CODE XREF: .text:0040EE45↑j
.text:0040EF72                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF76                 jz      short loc_40EFB9
.text:0040EF78
.text:0040EF78 loc_40EF78:                             ; CODE XREF: .text:0040EFBD↓j
.text:0040EF78                                         ; .text:0040EFC3↓j
.text:0040EF78                 cmp     al, 5Ch ; '\'
.text:0040EF7A                 jnz     loc_40EE4B
.text:0040EF80                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EF84                 jz      short loc_40EFA1
.text:0040EF86
.text:0040EF86 loc_40EF86:                             ; CODE XREF: .text:0040EFA5↓j
.text:0040EF86                                         ; .text:0040EFAB↓j
.text:0040EF86                 cmp     al, 5Ch ; '\'
.text:0040EF88                 jnz     loc_40EE4B
.text:0040EF8E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040EF92                 jnz     loc_40EE4B
.text:0040EF98                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040EF9B                 inc     edx
.text:0040EF9C                 jmp     loc_40EE4D
.text:0040EFA1 ; ---------------------------------------------------------------------------
.text:0040EFA1
.text:0040EFA1 loc_40EFA1:                             ; CODE XREF: .text:0040EF84↑j
.text:0040EFA1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040EFA5                 jnz     short loc_40EF86
.text:0040EFA7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040EFAB                 jnz     short loc_40EF86
.text:0040EFAD                 mov     byte ptr [ecx], 9
.text:0040EFB0
.text:0040EFB0 loc_40EFB0:                             ; CODE XREF: .text:0040EFC8↓j
.text:0040EFB0                 inc     ecx
.text:0040EFB1                 add     edx, 3
.text:0040EFB4                 jmp     loc_40EE4E
.text:0040EFB9 ; ---------------------------------------------------------------------------
.text:0040EFB9
.text:0040EFB9 loc_40EFB9:                             ; CODE XREF: .text:0040EF76↑j
.text:0040EFB9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040EFBD                 jnz     short loc_40EF78
.text:0040EFBF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040EFC3                 jnz     short loc_40EF78
.text:0040EFC5                 mov     byte ptr [ecx], 20h ; ' '
.text:0040EFC8                 jmp     short loc_40EFB0
.text:0040EFCA ; ---------------------------------------------------------------------------
.text:0040EFCA
.text:0040EFCA loc_40EFCA:                             ; CODE XREF: .text:0040EE11↑j
.text:0040EFCA                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040EFD2                 mov     [esp], eax
.text:0040EFD5                 call    strspn
.text:0040EFDA                 add     [esp+1Ch], eax
.text:0040EFDE                 jmp     loc_40EE17
.text:0040EFE3 ; ---------------------------------------------------------------------------
.text:0040EFE3
.text:0040EFE3 loc_40EFE3:                             ; CODE XREF: .text:0040EDF5↑j
.text:0040EFE3                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EFE7                 jz      short loc_40F02A
.text:0040EFE9
.text:0040EFE9 loc_40EFE9:                             ; CODE XREF: .text:0040F02E↓j
.text:0040EFE9                                         ; .text:0040F034↓j
.text:0040EFE9                 cmp     al, 5Ch ; '\'
.text:0040EFEB                 jnz     loc_40EDFB
.text:0040EFF1                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040EFF5                 jz      short loc_40F012
.text:0040EFF7
.text:0040EFF7 loc_40EFF7:                             ; CODE XREF: .text:0040F016↓j
.text:0040EFF7                                         ; .text:0040F01C↓j
.text:0040EFF7                 cmp     al, 5Ch ; '\'
.text:0040EFF9                 jnz     loc_40EDFB
.text:0040EFFF                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F003                 jnz     loc_40EDFB
.text:0040F009                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F00C                 inc     edx
.text:0040F00D                 jmp     loc_40EDFD
.text:0040F012 ; ---------------------------------------------------------------------------
.text:0040F012
.text:0040F012 loc_40F012:                             ; CODE XREF: .text:0040EFF5↑j
.text:0040F012                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F016                 jnz     short loc_40EFF7
.text:0040F018                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F01C                 jnz     short loc_40EFF7
.text:0040F01E                 mov     byte ptr [ecx], 9
.text:0040F021
.text:0040F021 loc_40F021:                             ; CODE XREF: .text:0040F039↓j
.text:0040F021                 inc     ecx
.text:0040F022                 add     edx, 3
.text:0040F025                 jmp     loc_40EDFE
.text:0040F02A ; ---------------------------------------------------------------------------
.text:0040F02A
.text:0040F02A loc_40F02A:                             ; CODE XREF: .text:0040EFE7↑j
.text:0040F02A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F02E                 jnz     short loc_40EFE9
.text:0040F030                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F034                 jnz     short loc_40EFE9
.text:0040F036                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F039                 jmp     short loc_40F021
.text:0040F03B ; ---------------------------------------------------------------------------
.text:0040F03B
.text:0040F03B loc_40F03B:                             ; CODE XREF: .text:0040EDC0↑j
.text:0040F03B                 mov     dword ptr [esp+4], 40EC7Ah
.text:0040F043                 mov     [esp], eax
.text:0040F046                 call    strspn
.text:0040F04B                 add     [esp+1Ch], eax
.text:0040F04F                 jmp     loc_40EDC6
.text:0040F054 ; ---------------------------------------------------------------------------
.text:0040F054
.text:0040F054 loc_40F054:                             ; CODE XREF: .text:0040EDA5↑j
.text:0040F054                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F058                 jz      short loc_40F09B
.text:0040F05A
.text:0040F05A loc_40F05A:                             ; CODE XREF: .text:0040F09F↓j
.text:0040F05A                                         ; .text:0040F0A5↓j
.text:0040F05A                 cmp     al, 5Ch ; '\'
.text:0040F05C                 jnz     loc_40EDAB
.text:0040F062                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040F066                 jz      short loc_40F083
.text:0040F068
.text:0040F068 loc_40F068:                             ; CODE XREF: .text:0040F087↓j
.text:0040F068                                         ; .text:0040F08D↓j
.text:0040F068                 cmp     al, 5Ch ; '\'
.text:0040F06A                 jnz     loc_40EDAB
.text:0040F070                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040F074                 jnz     loc_40EDAB
.text:0040F07A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040F07D                 inc     edx
.text:0040F07E                 jmp     loc_40EDAD
.text:0040F083 ; ---------------------------------------------------------------------------
.text:0040F083
.text:0040F083 loc_40F083:                             ; CODE XREF: .text:0040F066↑j
.text:0040F083                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040F087                 jnz     short loc_40F068
.text:0040F089                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040F08D                 jnz     short loc_40F068
.text:0040F08F                 mov     byte ptr [ecx], 9
.text:0040F092
.text:0040F092 loc_40F092:                             ; CODE XREF: .text:0040F0AA↓j
.text:0040F092                 inc     ecx
.text:0040F093                 add     edx, 3
.text:0040F096                 jmp     loc_40EDAE
.text:0040F09B ; ---------------------------------------------------------------------------
.text:0040F09B
.text:0040F09B loc_40F09B:                             ; CODE XREF: .text:0040F058↑j
.text:0040F09B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040F09F                 jnz     short loc_40F05A
.text:0040F0A1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040F0A5                 jnz     short loc_40F05A
.text:0040F0A7                 mov     byte ptr [ecx], 20h ; ' '
.text:0040F0AA                 jmp     short loc_40F092
.text:0040F0AA ; ---------------------------------------------------------------------------
.text:0040F0AC                 align 10h
.text:0040F0B0
.text:0040F0B0 loc_40F0B0:                             ; CODE XREF: .text:0040ECC2↑j
.text:0040F0B0                 mov     dword ptr [esp+4], 0
.text:0040F0B8                 mov     dword ptr [esp], 0
.text:0040F0BF                 call    GetLogicalDriveStringsA
.text:0040F0C4                 sub     esp, 8
.text:0040F0C7                 mov     ebx, eax
.text:0040F0C9                 call    GetProcessHeap
.text:0040F0CE                 mov     [esp], eax
.text:0040F0D1                 mov     [esp+8], ebx
.text:0040F0D5                 mov     dword ptr [esp+4], 0
.text:0040F0DD                 call    HeapAlloc
.text:0040F0E2                 sub     esp, 0Ch
.text:0040F0E5                 mov     esi, eax
.text:0040F0E7                 mov     [esp+4], eax
.text:0040F0EB                 mov     [esp], ebx
.text:0040F0EE                 call    GetLogicalDriveStringsA
.text:0040F0F3                 mov     off_414084, esi ; "notset"
.text:0040F0F9                 sub     esp, 8
.text:0040F0FC                 jmp     loc_40ECC8
.text:0040F0FC ; ---------------------------------------------------------------------------
.text:0040F101 ; const char aSSSSDD[]
.text:0040F101 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040F101                                         ; DATA XREF: .text:0040F240↓o
.text:0040F101                                         ; ___addmntentstr+F0↓o
.text:0040F114                 align 10h
.text:0040F120                 push    esi
.text:0040F121                 push    ebx
.text:0040F122                 sub     esp, 44h
.text:0040F125                 mov     ebx, [esp+54h]
.text:0040F129                 mov     esi, [esp+50h]
.text:0040F12D                 mov     edx, [ebx]
.text:0040F12F                 mov     [esp+20h], edx
.text:0040F133                 mov     ecx, [ebx+4]
.text:0040F136                 mov     [esp+24h], ecx
.text:0040F13A                 mov     edx, [ebx+8]
.text:0040F13D                 mov     [esp+28h], edx
.text:0040F141                 mov     ecx, [ebx+0Ch]
.text:0040F144                 mov     [esp+2Ch], ecx
.text:0040F148                 mov     edx, [ebx+10h]
.text:0040F14B                 mov     [esp+30h], edx
.text:0040F14F                 mov     ecx, [ebx+14h]
.text:0040F152                 mov     dword ptr [esp+8], 2
.text:0040F15A                 mov     dword ptr [esp+4], 0
.text:0040F162                 mov     [esp+34h], ecx
.text:0040F166                 mov     [esp], esi
.text:0040F169                 call    sub_410580
.text:0040F16E ; ---------------------------------------------------------------------------
.text:0040F16E                 test    eax, eax
.text:0040F170                 mov     edx, 1
.text:0040F175                 jnz     loc_40F275
.text:0040F17B                 mov     ebx, [esp+20h]
.text:0040F17F                 mov     edx, ebx
.text:0040F181                 movzx   eax, byte ptr [ebx]
.text:0040F184                 test    al, al
.text:0040F186                 jz      short loc_40F1B0
.text:0040F188                 nop
.text:0040F189                 lea     esi, [esi+0]
.text:0040F190
.text:0040F190 loc_40F190:                             ; CODE XREF: .text:0040F1AE↓j
.text:0040F190                 cmp     al, 20h ; ' '
.text:0040F192                 jz      loc_40F3EA
.text:0040F198                 cmp     al, 9
.text:0040F19A                 jz      loc_40F3EA
.text:0040F1A0                 cmp     al, 5Ch ; '\'
.text:0040F1A2                 jz      loc_40F3EA
.text:0040F1A8                 inc     ebx
.text:0040F1A9                 movzx   eax, byte ptr [ebx]
.text:0040F1AC                 test    al, al
.text:0040F1AE                 jnz     short loc_40F190
.text:0040F1B0
.text:0040F1B0 loc_40F1B0:                             ; CODE XREF: .text:0040F186↑j
.text:0040F1B0                                         ; .text:0040F3EC↓j ...
.text:0040F1B0                 mov     ebx, [esp+24h]
.text:0040F1B4                 mov     edx, ebx
.text:0040F1B6                 movzx   eax, byte ptr [ebx]
.text:0040F1B9                 test    al, al
.text:0040F1BB                 jz      short loc_40F1E0
.text:0040F1BD                 lea     esi, [esi+0]
.text:0040F1C0
.text:0040F1C0 loc_40F1C0:                             ; CODE XREF: .text:0040F1DE↓j
.text:0040F1C0                 cmp     al, 20h ; ' '
.text:0040F1C2                 jz      loc_40F36A
.text:0040F1C8                 cmp     al, 9
.text:0040F1CA                 jz      loc_40F36A
.text:0040F1D0                 cmp     al, 5Ch ; '\'
.text:0040F1D2                 jz      loc_40F36A
.text:0040F1D8                 inc     ebx
.text:0040F1D9                 movzx   eax, byte ptr [ebx]
.text:0040F1DC                 test    al, al
.text:0040F1DE                 jnz     short loc_40F1C0
.text:0040F1E0
.text:0040F1E0 loc_40F1E0:                             ; CODE XREF: .text:0040F1BB↑j
.text:0040F1E0                                         ; .text:0040F36C↓j ...
.text:0040F1E0                 mov     ebx, [esp+28h]
.text:0040F1E4                 mov     edx, ebx
.text:0040F1E6                 movzx   eax, byte ptr [ebx]
.text:0040F1E9                 test    al, al
.text:0040F1EB                 jz      short loc_40F210
.text:0040F1ED                 lea     esi, [esi+0]
.text:0040F1F0
.text:0040F1F0 loc_40F1F0:                             ; CODE XREF: .text:0040F20E↓j
.text:0040F1F0                 cmp     al, 20h ; ' '
.text:0040F1F2                 jz      loc_40F2EE
.text:0040F1F8                 cmp     al, 9
.text:0040F1FA                 jz      loc_40F2EE
.text:0040F200                 cmp     al, 5Ch ; '\'
.text:0040F202                 jz      loc_40F2EE
.text:0040F208                 inc     ebx
.text:0040F209                 movzx   eax, byte ptr [ebx]
.text:0040F20C                 test    al, al
.text:0040F20E                 jnz     short loc_40F1F0
.text:0040F210
.text:0040F210 loc_40F210:                             ; CODE XREF: .text:0040F1EB↑j
.text:0040F210                                         ; .text:0040F2F0↓j ...
.text:0040F210                 mov     edx, [esp+2Ch]
.text:0040F214                 mov     ebx, edx
.text:0040F216                 movzx   eax, byte ptr [edx]
.text:0040F219                 test    al, al
.text:0040F21B                 jz      short loc_40F234
.text:0040F21D                 lea     esi, [esi+0]
.text:0040F220
.text:0040F220 loc_40F220:                             ; CODE XREF: .text:0040F232↓j
.text:0040F220                 cmp     al, 20h ; ' '
.text:0040F222                 jz      short loc_40F27D
.text:0040F224                 cmp     al, 9
.text:0040F226                 jz      short loc_40F27D
.text:0040F228                 cmp     al, 5Ch ; '\'
.text:0040F22A                 jz      short loc_40F27D
.text:0040F22C                 inc     ebx
.text:0040F22D                 movzx   eax, byte ptr [ebx]
.text:0040F230                 test    al, al
.text:0040F232                 jnz     short loc_40F220
.text:0040F234
.text:0040F234 loc_40F234:                             ; CODE XREF: .text:0040F21B↑j
.text:0040F234                                         ; .text:0040F27F↓j ...
.text:0040F234                 mov     [esp+14h], edx
.text:0040F238                 mov     ecx, [esp+34h]
.text:0040F23C                 mov     ebx, [esp+30h]
.text:0040F240                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040F248                 mov     edx, [esp+24h]
.text:0040F24C                 mov     [esp+1Ch], ecx
.text:0040F250                 mov     ecx, [esp+28h]
.text:0040F254                 mov     [esp+18h], ebx
.text:0040F258                 mov     ebx, [esp+20h]
.text:0040F25C                 mov     [esp+0Ch], edx
.text:0040F260                 mov     [esp+10h], ecx
.text:0040F264                 mov     [esp+8], ebx
.text:0040F268                 mov     [esp], esi
.text:0040F26B                 call    fprintf
.text:0040F270                 mov     edx, eax
.text:0040F272                 shr     edx, 1Fh
.text:0040F275
.text:0040F275 loc_40F275:                             ; CODE XREF: .text:0040F175↑j
.text:0040F275                 add     esp, 44h
.text:0040F278                 mov     eax, edx
.text:0040F27A                 pop     ebx
.text:0040F27B                 pop     esi
.text:0040F27C                 retn
.text:0040F27D ; ---------------------------------------------------------------------------
.text:0040F27D
.text:0040F27D loc_40F27D:                             ; CODE XREF: .text:0040F222↑j
.text:0040F27D                                         ; .text:0040F226↑j ...
.text:0040F27D                 test    al, al
.text:0040F27F                 jz      short loc_40F234
.text:0040F281                 mov     [esp], edx
.text:0040F284                 mov     ebx, edx
.text:0040F286                 call    strlen
.text:0040F28B                 lea     edx, ds:1[eax*4]
.text:0040F292                 mov     [esp], edx
.text:0040F295                 call    malloc
.text:0040F29A                 mov     [esp+2Ch], eax
.text:0040F29E                 mov     edx, eax
.text:0040F2A0
.text:0040F2A0 loc_40F2A0:                             ; CODE XREF: .text:0040F2B8↓j
.text:0040F2A0                 movzx   eax, byte ptr [ebx]
.text:0040F2A3                 cmp     al, 20h ; ' '
.text:0040F2A5                 jz      short loc_40F2DD
.text:0040F2A7                 cmp     al, 9
.text:0040F2A9                 jz      short loc_40F2CC
.text:0040F2AB                 cmp     al, 5Ch ; '\'
.text:0040F2AD                 jz      short loc_40F2C3
.text:0040F2AF                 mov     [edx], al
.text:0040F2B1
.text:0040F2B1 loc_40F2B1:                             ; CODE XREF: .text:0040F2CA↓j
.text:0040F2B1                                         ; .text:0040F2DB↓j ...
.text:0040F2B1                 movzx   ecx, byte ptr [ebx]
.text:0040F2B4                 inc     edx
.text:0040F2B5                 inc     ebx
.text:0040F2B6                 test    cl, cl
.text:0040F2B8                 jnz     short loc_40F2A0
.text:0040F2BA                 mov     edx, [esp+2Ch]
.text:0040F2BE                 jmp     loc_40F234
.text:0040F2C3 ; ---------------------------------------------------------------------------
.text:0040F2C3
.text:0040F2C3 loc_40F2C3:                             ; CODE XREF: .text:0040F2AD↑j
.text:0040F2C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2C6                 inc     edx
.text:0040F2C7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2CA                 jmp     short loc_40F2B1
.text:0040F2CC ; ---------------------------------------------------------------------------
.text:0040F2CC
.text:0040F2CC loc_40F2CC:                             ; CODE XREF: .text:0040F2A9↑j
.text:0040F2CC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2CF                 inc     edx
.text:0040F2D0                 mov     byte ptr [edx], 30h ; '0'
.text:0040F2D3                 inc     edx
.text:0040F2D4                 mov     byte ptr [edx], 31h ; '1'
.text:0040F2D7                 inc     edx
.text:0040F2D8                 mov     byte ptr [edx], 32h ; '2'
.text:0040F2DB                 jmp     short loc_40F2B1
.text:0040F2DD ; ---------------------------------------------------------------------------
.text:0040F2DD
.text:0040F2DD loc_40F2DD:                             ; CODE XREF: .text:0040F2A5↑j
.text:0040F2DD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F2E0                 inc     edx
.text:0040F2E1                 mov     byte ptr [edx], 30h ; '0'
.text:0040F2E4                 inc     edx
.text:0040F2E5                 mov     byte ptr [edx], 34h ; '4'
.text:0040F2E8                 inc     edx
.text:0040F2E9                 mov     byte ptr [edx], 30h ; '0'
.text:0040F2EC                 jmp     short loc_40F2B1
.text:0040F2EE ; ---------------------------------------------------------------------------
.text:0040F2EE
.text:0040F2EE loc_40F2EE:                             ; CODE XREF: .text:0040F1F2↑j
.text:0040F2EE                                         ; .text:0040F1FA↑j ...
.text:0040F2EE                 test    al, al
.text:0040F2F0                 jz      loc_40F210
.text:0040F2F6                 mov     [esp], edx
.text:0040F2F9                 mov     ebx, edx
.text:0040F2FB                 call    strlen
.text:0040F300                 lea     edx, ds:1[eax*4]
.text:0040F307                 mov     [esp], edx
.text:0040F30A                 call    malloc
.text:0040F30F                 mov     [esp+28h], eax
.text:0040F313                 mov     edx, eax
.text:0040F315                 lea     esi, [esi+0]
.text:0040F319                 lea     edi, [edi+0]
.text:0040F320
.text:0040F320 loc_40F320:                             ; CODE XREF: .text:0040F338↓j
.text:0040F320                 movzx   eax, byte ptr [ebx]
.text:0040F323                 cmp     al, 20h ; ' '
.text:0040F325                 jz      short loc_40F359
.text:0040F327                 cmp     al, 9
.text:0040F329                 jz      short loc_40F348
.text:0040F32B                 cmp     al, 5Ch ; '\'
.text:0040F32D                 jz      short loc_40F33F
.text:0040F32F                 mov     [edx], al
.text:0040F331
.text:0040F331 loc_40F331:                             ; CODE XREF: .text:0040F346↓j
.text:0040F331                                         ; .text:0040F357↓j ...
.text:0040F331                 movzx   ecx, byte ptr [ebx]
.text:0040F334                 inc     edx
.text:0040F335                 inc     ebx
.text:0040F336                 test    cl, cl
.text:0040F338                 jnz     short loc_40F320
.text:0040F33A                 jmp     loc_40F210
.text:0040F33F ; ---------------------------------------------------------------------------
.text:0040F33F
.text:0040F33F loc_40F33F:                             ; CODE XREF: .text:0040F32D↑j
.text:0040F33F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F342                 inc     edx
.text:0040F343                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F346                 jmp     short loc_40F331
.text:0040F348 ; ---------------------------------------------------------------------------
.text:0040F348
.text:0040F348 loc_40F348:                             ; CODE XREF: .text:0040F329↑j
.text:0040F348                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F34B                 inc     edx
.text:0040F34C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F34F                 inc     edx
.text:0040F350                 mov     byte ptr [edx], 31h ; '1'
.text:0040F353                 inc     edx
.text:0040F354                 mov     byte ptr [edx], 32h ; '2'
.text:0040F357                 jmp     short loc_40F331
.text:0040F359 ; ---------------------------------------------------------------------------
.text:0040F359
.text:0040F359 loc_40F359:                             ; CODE XREF: .text:0040F325↑j
.text:0040F359                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F35C                 inc     edx
.text:0040F35D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F360                 inc     edx
.text:0040F361                 mov     byte ptr [edx], 34h ; '4'
.text:0040F364                 inc     edx
.text:0040F365                 mov     byte ptr [edx], 30h ; '0'
.text:0040F368                 jmp     short loc_40F331
.text:0040F36A ; ---------------------------------------------------------------------------
.text:0040F36A
.text:0040F36A loc_40F36A:                             ; CODE XREF: .text:0040F1C2↑j
.text:0040F36A                                         ; .text:0040F1CA↑j ...
.text:0040F36A                 test    al, al
.text:0040F36C                 jz      loc_40F1E0
.text:0040F372                 mov     [esp], edx
.text:0040F375                 mov     ebx, edx
.text:0040F377                 call    strlen
.text:0040F37C                 lea     edx, ds:1[eax*4]
.text:0040F383                 mov     [esp], edx
.text:0040F386                 call    malloc
.text:0040F38B                 mov     [esp+24h], eax
.text:0040F38F                 mov     edx, eax
.text:0040F391                 jmp     short loc_40F3A0
.text:0040F391 ; ---------------------------------------------------------------------------
.text:0040F393                 align 10h
.text:0040F3A0
.text:0040F3A0 loc_40F3A0:                             ; CODE XREF: .text:0040F391↑j
.text:0040F3A0                                         ; .text:0040F3B8↓j
.text:0040F3A0                 movzx   eax, byte ptr [ebx]
.text:0040F3A3                 cmp     al, 20h ; ' '
.text:0040F3A5                 jz      short loc_40F3D9
.text:0040F3A7                 cmp     al, 9
.text:0040F3A9                 jz      short loc_40F3C8
.text:0040F3AB                 cmp     al, 5Ch ; '\'
.text:0040F3AD                 jz      short loc_40F3BF
.text:0040F3AF                 mov     [edx], al
.text:0040F3B1
.text:0040F3B1 loc_40F3B1:                             ; CODE XREF: .text:0040F3C6↓j
.text:0040F3B1                                         ; .text:0040F3D7↓j ...
.text:0040F3B1                 movzx   ecx, byte ptr [ebx]
.text:0040F3B4                 inc     edx
.text:0040F3B5                 inc     ebx
.text:0040F3B6                 test    cl, cl
.text:0040F3B8                 jnz     short loc_40F3A0
.text:0040F3BA                 jmp     loc_40F1E0
.text:0040F3BF ; ---------------------------------------------------------------------------
.text:0040F3BF
.text:0040F3BF loc_40F3BF:                             ; CODE XREF: .text:0040F3AD↑j
.text:0040F3BF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3C2                 inc     edx
.text:0040F3C3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3C6                 jmp     short loc_40F3B1
.text:0040F3C8 ; ---------------------------------------------------------------------------
.text:0040F3C8
.text:0040F3C8 loc_40F3C8:                             ; CODE XREF: .text:0040F3A9↑j
.text:0040F3C8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3CB                 inc     edx
.text:0040F3CC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F3CF                 inc     edx
.text:0040F3D0                 mov     byte ptr [edx], 31h ; '1'
.text:0040F3D3                 inc     edx
.text:0040F3D4                 mov     byte ptr [edx], 32h ; '2'
.text:0040F3D7                 jmp     short loc_40F3B1
.text:0040F3D9 ; ---------------------------------------------------------------------------
.text:0040F3D9
.text:0040F3D9 loc_40F3D9:                             ; CODE XREF: .text:0040F3A5↑j
.text:0040F3D9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F3DC                 inc     edx
.text:0040F3DD                 mov     byte ptr [edx], 30h ; '0'
.text:0040F3E0                 inc     edx
.text:0040F3E1                 mov     byte ptr [edx], 34h ; '4'
.text:0040F3E4                 inc     edx
.text:0040F3E5                 mov     byte ptr [edx], 30h ; '0'
.text:0040F3E8                 jmp     short loc_40F3B1
.text:0040F3EA ; ---------------------------------------------------------------------------
.text:0040F3EA
.text:0040F3EA loc_40F3EA:                             ; CODE XREF: .text:0040F192↑j
.text:0040F3EA                                         ; .text:0040F19A↑j ...
.text:0040F3EA                 test    al, al
.text:0040F3EC                 jz      loc_40F1B0
.text:0040F3F2                 mov     [esp], edx
.text:0040F3F5                 mov     ebx, edx
.text:0040F3F7                 call    strlen
.text:0040F3FC                 lea     ecx, ds:1[eax*4]
.text:0040F403                 mov     [esp], ecx
.text:0040F406                 call    malloc
.text:0040F40B                 mov     [esp+20h], eax
.text:0040F40F                 mov     edx, eax
.text:0040F411                 jmp     short loc_40F420
.text:0040F411 ; ---------------------------------------------------------------------------
.text:0040F413                 align 10h
.text:0040F420
.text:0040F420 loc_40F420:                             ; CODE XREF: .text:0040F411↑j
.text:0040F420                                         ; .text:0040F438↓j
.text:0040F420                 movzx   eax, byte ptr [ebx]
.text:0040F423                 cmp     al, 20h ; ' '
.text:0040F425                 jz      short loc_40F459
.text:0040F427                 cmp     al, 9
.text:0040F429                 jz      short loc_40F448
.text:0040F42B                 cmp     al, 5Ch ; '\'
.text:0040F42D                 jz      short loc_40F43F
.text:0040F42F                 mov     [edx], al
.text:0040F431
.text:0040F431 loc_40F431:                             ; CODE XREF: .text:0040F446↓j
.text:0040F431                                         ; .text:0040F457↓j ...
.text:0040F431                 movzx   ecx, byte ptr [ebx]
.text:0040F434                 inc     edx
.text:0040F435                 inc     ebx
.text:0040F436                 test    cl, cl
.text:0040F438                 jnz     short loc_40F420
.text:0040F43A                 jmp     loc_40F1B0
.text:0040F43F ; ---------------------------------------------------------------------------
.text:0040F43F
.text:0040F43F loc_40F43F:                             ; CODE XREF: .text:0040F42D↑j
.text:0040F43F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F442                 inc     edx
.text:0040F443                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F446                 jmp     short loc_40F431
.text:0040F448 ; ---------------------------------------------------------------------------
.text:0040F448
.text:0040F448 loc_40F448:                             ; CODE XREF: .text:0040F429↑j
.text:0040F448                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F44B                 inc     edx
.text:0040F44C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F44F                 inc     edx
.text:0040F450                 mov     byte ptr [edx], 31h ; '1'
.text:0040F453                 inc     edx
.text:0040F454                 mov     byte ptr [edx], 32h ; '2'
.text:0040F457                 jmp     short loc_40F431
.text:0040F459 ; ---------------------------------------------------------------------------
.text:0040F459
.text:0040F459 loc_40F459:                             ; CODE XREF: .text:0040F425↑j
.text:0040F459                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F45C                 inc     edx
.text:0040F45D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F460                 inc     edx
.text:0040F461                 mov     byte ptr [edx], 34h ; '4'
.text:0040F464                 inc     edx
.text:0040F465                 mov     byte ptr [edx], 30h ; '0'
.text:0040F468                 jmp     short loc_40F431
.text:0040F468 ; ---------------------------------------------------------------------------
.text:0040F46A                 align 10h
.text:0040F470
.text:0040F470 ; =============== S U B R O U T I N E =======================================
.text:0040F470
.text:0040F470 ; Attributes: info_from_lumina
.text:0040F470
.text:0040F470 ; int __cdecl __addmntentstr(char *, int)
.text:0040F470 ___addmntentstr proc near               ; CODE XREF: .text:0040ED3A↑p
.text:0040F470
.text:0040F470 Buffer          = dword ptr -4Ch
.text:0040F470 Format          = dword ptr -48h
.text:0040F470 var_44          = dword ptr -44h
.text:0040F470 var_40          = dword ptr -40h
.text:0040F470 var_3C          = dword ptr -3Ch
.text:0040F470 var_38          = dword ptr -38h
.text:0040F470 var_34          = dword ptr -34h
.text:0040F470 var_30          = dword ptr -30h
.text:0040F470 var_2C          = dword ptr -2Ch
.text:0040F470 var_28          = dword ptr -28h
.text:0040F470 var_24          = dword ptr -24h
.text:0040F470 Str             = dword ptr -20h
.text:0040F470 var_1C          = dword ptr -1Ch
.text:0040F470 var_18          = dword ptr -18h
.text:0040F470 arg_0           = dword ptr  4
.text:0040F470 arg_4           = dword ptr  8
.text:0040F470
.text:0040F470                 push    ebx
.text:0040F471                 sub     esp, 48h
.text:0040F474                 mov     edx, [esp+4Ch+arg_4]
.text:0040F478                 mov     ecx, [edx]
.text:0040F47A                 mov     [esp+4Ch+var_2C], ecx
.text:0040F47E                 mov     ebx, [edx+4]
.text:0040F481                 mov     [esp+4Ch+var_28], ebx
.text:0040F485                 mov     ebx, [edx+8]
.text:0040F488                 mov     [esp+4Ch+var_24], ebx
.text:0040F48C                 mov     ebx, [edx+0Ch]
.text:0040F48F                 mov     [esp+4Ch+Str], ebx
.text:0040F493                 mov     ebx, [edx+10h]
.text:0040F496                 mov     [esp+4Ch+var_1C], ebx
.text:0040F49A                 mov     ebx, [edx+14h]
.text:0040F49D                 mov     [esp+4Ch+var_18], ebx
.text:0040F4A1                 mov     ebx, ecx
.text:0040F4A3                 movzx   eax, byte ptr [ecx]
.text:0040F4A6                 test    al, al
.text:0040F4A8                 jz      loc_40F791
.text:0040F4AE                 mov     esi, esi
.text:0040F4B0
.text:0040F4B0 loc_40F4B0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040F4B0                 cmp     al, 20h ; ' '
.text:0040F4B2                 jz      loc_40F710
.text:0040F4B8                 cmp     al, 9
.text:0040F4BA                 jz      loc_40F710
.text:0040F4C0                 cmp     al, 5Ch ; '\'
.text:0040F4C2                 jz      loc_40F710
.text:0040F4C8                 inc     ebx
.text:0040F4C9                 movzx   eax, byte ptr [ebx]
.text:0040F4CC                 test    al, al
.text:0040F4CE                 jnz     short loc_40F4B0
.text:0040F4D0
.text:0040F4D0 loc_40F4D0:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040F4D0                                         ; ___addmntentstr+2EA↓j
.text:0040F4D0                 mov     ebx, [esp+4Ch+var_28]
.text:0040F4D4                 mov     edx, ebx
.text:0040F4D6                 movzx   eax, byte ptr [ebx]
.text:0040F4D9                 test    al, al
.text:0040F4DB                 jz      short loc_40F500
.text:0040F4DD                 lea     esi, [esi+0]
.text:0040F4E0
.text:0040F4E0 loc_40F4E0:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040F4E0                 cmp     al, 20h ; ' '
.text:0040F4E2                 jz      loc_40F68A
.text:0040F4E8                 cmp     al, 9
.text:0040F4EA                 jz      loc_40F68A
.text:0040F4F0                 cmp     al, 5Ch ; '\'
.text:0040F4F2                 jz      loc_40F68A
.text:0040F4F8                 inc     ebx
.text:0040F4F9                 movzx   eax, byte ptr [ebx]
.text:0040F4FC                 test    al, al
.text:0040F4FE                 jnz     short loc_40F4E0
.text:0040F500
.text:0040F500 loc_40F500:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040F500                                         ; ___addmntentstr+21C↓j ...
.text:0040F500                 mov     ebx, [esp+4Ch+var_24]
.text:0040F504                 mov     edx, ebx
.text:0040F506                 movzx   eax, byte ptr [ebx]
.text:0040F509                 test    al, al
.text:0040F50B                 jz      short loc_40F530
.text:0040F50D                 lea     esi, [esi+0]
.text:0040F510
.text:0040F510 loc_40F510:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040F510                 cmp     al, 20h ; ' '
.text:0040F512                 jz      loc_40F60E
.text:0040F518                 cmp     al, 9
.text:0040F51A                 jz      loc_40F60E
.text:0040F520                 cmp     al, 5Ch ; '\'
.text:0040F522                 jz      loc_40F60E
.text:0040F528                 inc     ebx
.text:0040F529                 movzx   eax, byte ptr [ebx]
.text:0040F52C                 test    al, al
.text:0040F52E                 jnz     short loc_40F510
.text:0040F530
.text:0040F530 loc_40F530:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040F530                                         ; ___addmntentstr+1A0↓j ...
.text:0040F530                 mov     edx, [esp+4Ch+Str]
.text:0040F534                 mov     ebx, edx
.text:0040F536                 movzx   eax, byte ptr [edx]
.text:0040F539                 test    al, al
.text:0040F53B                 jz      short loc_40F554
.text:0040F53D                 lea     esi, [esi+0]
.text:0040F540
.text:0040F540 loc_40F540:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040F540                 cmp     al, 20h ; ' '
.text:0040F542                 jz      short loc_40F59C
.text:0040F544                 cmp     al, 9
.text:0040F546                 jz      short loc_40F59C
.text:0040F548                 cmp     al, 5Ch ; '\'
.text:0040F54A                 jz      short loc_40F59C
.text:0040F54C                 inc     ebx
.text:0040F54D                 movzx   eax, byte ptr [ebx]
.text:0040F550                 test    al, al
.text:0040F552                 jnz     short loc_40F540
.text:0040F554
.text:0040F554 loc_40F554:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040F554                                         ; ___addmntentstr+12E↓j ...
.text:0040F554                 mov     [esp+4Ch+var_38], edx
.text:0040F558                 mov     ebx, [esp+4Ch+var_18]
.text:0040F55C                 mov     ecx, [esp+4Ch+var_1C]
.text:0040F560                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040F568                 mov     edx, [esp+4Ch+var_2C]
.text:0040F56C                 mov     [esp+4Ch+var_30], ebx
.text:0040F570                 mov     ebx, [esp+4Ch+var_24]
.text:0040F574                 mov     [esp+4Ch+var_34], ecx
.text:0040F578                 mov     ecx, [esp+4Ch+var_28]
.text:0040F57C                 mov     [esp+4Ch+var_3C], ebx
.text:0040F580                 mov     ebx, [esp+4Ch+arg_0]
.text:0040F584                 mov     [esp+4Ch+var_40], ecx
.text:0040F588                 mov     [esp+4Ch+var_44], edx
.text:0040F58C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040F58F                 call    sprintf
.text:0040F594                 add     esp, 48h
.text:0040F597                 shr     eax, 1Fh
.text:0040F59A                 pop     ebx
.text:0040F59B                 retn
.text:0040F59C ; ---------------------------------------------------------------------------
.text:0040F59C
.text:0040F59C loc_40F59C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040F59C                                         ; ___addmntentstr+D6↑j ...
.text:0040F59C                 test    al, al
.text:0040F59E                 jz      short loc_40F554
.text:0040F5A0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F5A3                 mov     ebx, edx
.text:0040F5A5                 call    strlen
.text:0040F5AA                 lea     edx, ds:1[eax*4]
.text:0040F5B1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F5B4                 call    malloc
.text:0040F5B9                 mov     [esp+4Ch+Str], eax
.text:0040F5BD                 mov     edx, eax
.text:0040F5BF                 nop
.text:0040F5C0
.text:0040F5C0 loc_40F5C0:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040F5C0                 movzx   eax, byte ptr [ebx]
.text:0040F5C3                 cmp     al, 20h ; ' '
.text:0040F5C5                 jz      short loc_40F5FD
.text:0040F5C7                 cmp     al, 9
.text:0040F5C9                 jz      short loc_40F5EC
.text:0040F5CB                 cmp     al, 5Ch ; '\'
.text:0040F5CD                 jz      short loc_40F5E3
.text:0040F5CF                 mov     [edx], al
.text:0040F5D1
.text:0040F5D1 loc_40F5D1:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040F5D1                                         ; ___addmntentstr+18B↓j ...
.text:0040F5D1                 movzx   ecx, byte ptr [ebx]
.text:0040F5D4                 inc     edx
.text:0040F5D5                 inc     ebx
.text:0040F5D6                 test    cl, cl
.text:0040F5D8                 jnz     short loc_40F5C0
.text:0040F5DA                 mov     edx, [esp+4Ch+Str]
.text:0040F5DE                 jmp     loc_40F554
.text:0040F5E3 ; ---------------------------------------------------------------------------
.text:0040F5E3
.text:0040F5E3 loc_40F5E3:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040F5E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5E6                 inc     edx
.text:0040F5E7                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5EA                 jmp     short loc_40F5D1
.text:0040F5EC ; ---------------------------------------------------------------------------
.text:0040F5EC
.text:0040F5EC loc_40F5EC:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040F5EC                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F5EF                 inc     edx
.text:0040F5F0                 mov     byte ptr [edx], 30h ; '0'
.text:0040F5F3                 inc     edx
.text:0040F5F4                 mov     byte ptr [edx], 31h ; '1'
.text:0040F5F7                 inc     edx
.text:0040F5F8                 mov     byte ptr [edx], 32h ; '2'
.text:0040F5FB                 jmp     short loc_40F5D1
.text:0040F5FD ; ---------------------------------------------------------------------------
.text:0040F5FD
.text:0040F5FD loc_40F5FD:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040F5FD                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F600                 inc     edx
.text:0040F601                 mov     byte ptr [edx], 30h ; '0'
.text:0040F604                 inc     edx
.text:0040F605                 mov     byte ptr [edx], 34h ; '4'
.text:0040F608                 inc     edx
.text:0040F609                 mov     byte ptr [edx], 30h ; '0'
.text:0040F60C                 jmp     short loc_40F5D1
.text:0040F60E ; ---------------------------------------------------------------------------
.text:0040F60E
.text:0040F60E loc_40F60E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040F60E                                         ; ___addmntentstr+AA↑j ...
.text:0040F60E                 test    al, al
.text:0040F610                 jz      loc_40F530
.text:0040F616                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F619                 mov     ebx, edx
.text:0040F61B                 call    strlen
.text:0040F620                 lea     edx, ds:1[eax*4]
.text:0040F627                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F62A                 call    malloc
.text:0040F62F                 mov     [esp+4Ch+var_24], eax
.text:0040F633                 mov     edx, eax
.text:0040F635                 lea     esi, [esi+0]
.text:0040F639                 lea     edi, [edi+0]
.text:0040F640
.text:0040F640 loc_40F640:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040F640                 movzx   eax, byte ptr [ebx]
.text:0040F643                 cmp     al, 20h ; ' '
.text:0040F645                 jz      short loc_40F679
.text:0040F647                 cmp     al, 9
.text:0040F649                 jz      short loc_40F668
.text:0040F64B                 cmp     al, 5Ch ; '\'
.text:0040F64D                 jz      short loc_40F65F
.text:0040F64F                 mov     [edx], al
.text:0040F651
.text:0040F651 loc_40F651:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040F651                                         ; ___addmntentstr+207↓j ...
.text:0040F651                 movzx   ecx, byte ptr [ebx]
.text:0040F654                 inc     edx
.text:0040F655                 inc     ebx
.text:0040F656                 test    cl, cl
.text:0040F658                 jnz     short loc_40F640
.text:0040F65A                 jmp     loc_40F530
.text:0040F65F ; ---------------------------------------------------------------------------
.text:0040F65F
.text:0040F65F loc_40F65F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040F65F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F662                 inc     edx
.text:0040F663                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F666                 jmp     short loc_40F651
.text:0040F668 ; ---------------------------------------------------------------------------
.text:0040F668
.text:0040F668 loc_40F668:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040F668                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F66B                 inc     edx
.text:0040F66C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F66F                 inc     edx
.text:0040F670                 mov     byte ptr [edx], 31h ; '1'
.text:0040F673                 inc     edx
.text:0040F674                 mov     byte ptr [edx], 32h ; '2'
.text:0040F677                 jmp     short loc_40F651
.text:0040F679 ; ---------------------------------------------------------------------------
.text:0040F679
.text:0040F679 loc_40F679:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040F679                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F67C                 inc     edx
.text:0040F67D                 mov     byte ptr [edx], 30h ; '0'
.text:0040F680                 inc     edx
.text:0040F681                 mov     byte ptr [edx], 34h ; '4'
.text:0040F684                 inc     edx
.text:0040F685                 mov     byte ptr [edx], 30h ; '0'
.text:0040F688                 jmp     short loc_40F651
.text:0040F68A ; ---------------------------------------------------------------------------
.text:0040F68A
.text:0040F68A loc_40F68A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040F68A                                         ; ___addmntentstr+7A↑j ...
.text:0040F68A                 test    al, al
.text:0040F68C                 jz      loc_40F500
.text:0040F692                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040F695                 mov     ebx, edx
.text:0040F697                 call    strlen
.text:0040F69C                 lea     edx, ds:1[eax*4]
.text:0040F6A3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F6A6                 call    malloc
.text:0040F6AB                 mov     [esp+4Ch+var_28], eax
.text:0040F6AF                 mov     edx, eax
.text:0040F6B1                 jmp     short loc_40F6C0
.text:0040F6B1 ; ---------------------------------------------------------------------------
.text:0040F6B3                 align 10h
.text:0040F6C0
.text:0040F6C0 loc_40F6C0:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040F6C0                                         ; ___addmntentstr+268↓j
.text:0040F6C0                 movzx   eax, byte ptr [ebx]
.text:0040F6C3                 cmp     al, 20h ; ' '
.text:0040F6C5                 jz      short loc_40F6F9
.text:0040F6C7                 cmp     al, 9
.text:0040F6C9                 jz      short loc_40F6E8
.text:0040F6CB                 cmp     al, 5Ch ; '\'
.text:0040F6CD                 jz      short loc_40F6DF
.text:0040F6CF                 mov     [edx], al
.text:0040F6D1
.text:0040F6D1 loc_40F6D1:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040F6D1                                         ; ___addmntentstr+287↓j ...
.text:0040F6D1                 movzx   ecx, byte ptr [ebx]
.text:0040F6D4                 inc     edx
.text:0040F6D5                 inc     ebx
.text:0040F6D6                 test    cl, cl
.text:0040F6D8                 jnz     short loc_40F6C0
.text:0040F6DA                 jmp     loc_40F500
.text:0040F6DF ; ---------------------------------------------------------------------------
.text:0040F6DF
.text:0040F6DF loc_40F6DF:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040F6DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F6E2                 inc     edx
.text:0040F6E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F6E6                 jmp     short loc_40F6D1
.text:0040F6E8 ; ---------------------------------------------------------------------------
.text:0040F6E8
.text:0040F6E8 loc_40F6E8:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040F6E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F6EB                 inc     edx
.text:0040F6EC                 mov     byte ptr [edx], 30h ; '0'
.text:0040F6EF                 inc     edx
.text:0040F6F0                 mov     byte ptr [edx], 31h ; '1'
.text:0040F6F3                 inc     edx
.text:0040F6F4                 mov     byte ptr [edx], 32h ; '2'
.text:0040F6F7                 jmp     short loc_40F6D1
.text:0040F6F9 ; ---------------------------------------------------------------------------
.text:0040F6F9
.text:0040F6F9 loc_40F6F9:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040F6F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F6FC                 inc     edx
.text:0040F6FD                 mov     byte ptr [edx], 30h ; '0'
.text:0040F700                 inc     edx
.text:0040F701                 mov     byte ptr [edx], 34h ; '4'
.text:0040F704                 inc     edx
.text:0040F705                 mov     byte ptr [edx], 30h ; '0'
.text:0040F708                 jmp     short loc_40F6D1
.text:0040F708 ; ---------------------------------------------------------------------------
.text:0040F70A                 align 10h
.text:0040F710
.text:0040F710 loc_40F710:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040F710                                         ; ___addmntentstr+4A↑j ...
.text:0040F710                 test    al, al
.text:0040F712                 jz      loc_40F4D0
.text:0040F718                 mov     ebx, [esp+4Ch+var_2C]
.text:0040F71C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040F71F                 call    strlen
.text:0040F724                 lea     edx, ds:1[eax*4]
.text:0040F72B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040F72E                 call    malloc
.text:0040F733                 mov     [esp+4Ch+var_2C], eax
.text:0040F737                 mov     edx, eax
.text:0040F739                 lea     esi, [esi+0]
.text:0040F740
.text:0040F740 loc_40F740:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040F740                 movzx   eax, byte ptr [ebx]
.text:0040F743                 cmp     al, 20h ; ' '
.text:0040F745                 jz      short loc_40F780
.text:0040F747                 cmp     al, 9
.text:0040F749                 jz      short loc_40F768
.text:0040F74B                 cmp     al, 5Ch ; '\'
.text:0040F74D                 jz      short loc_40F75F
.text:0040F74F                 mov     [edx], al
.text:0040F751
.text:0040F751 loc_40F751:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040F751                                         ; ___addmntentstr+307↓j ...
.text:0040F751                 movzx   ecx, byte ptr [ebx]
.text:0040F754                 inc     edx
.text:0040F755                 inc     ebx
.text:0040F756                 test    cl, cl
.text:0040F758                 jnz     short loc_40F740
.text:0040F75A                 jmp     loc_40F4D0
.text:0040F75F ; ---------------------------------------------------------------------------
.text:0040F75F
.text:0040F75F loc_40F75F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040F75F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F762                 inc     edx
.text:0040F763                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F766                 jmp     short loc_40F751
.text:0040F768 ; ---------------------------------------------------------------------------
.text:0040F768
.text:0040F768 loc_40F768:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040F768                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F76B                 inc     edx
.text:0040F76C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F76F                 inc     edx
.text:0040F770                 mov     byte ptr [edx], 31h ; '1'
.text:0040F773                 inc     edx
.text:0040F774                 mov     byte ptr [edx], 32h ; '2'
.text:0040F777                 jmp     short loc_40F751
.text:0040F777 ; ---------------------------------------------------------------------------
.text:0040F779                 align 10h
.text:0040F780
.text:0040F780 loc_40F780:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040F780                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040F783                 inc     edx
.text:0040F784                 mov     byte ptr [edx], 30h ; '0'
.text:0040F787                 inc     edx
.text:0040F788                 mov     byte ptr [edx], 34h ; '4'
.text:0040F78B                 inc     edx
.text:0040F78C                 mov     byte ptr [edx], 30h ; '0'
.text:0040F78F                 jmp     short loc_40F751
.text:0040F791 ; ---------------------------------------------------------------------------
.text:0040F791
.text:0040F791 loc_40F791:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040F791                 movzx   eax, byte ptr [ecx]
.text:0040F794                 jmp     loc_40F710
.text:0040F794 ___addmntentstr endp
.text:0040F794
.text:0040F794 ; ---------------------------------------------------------------------------
.text:0040F799                 align 10h
.text:0040F7A0
.text:0040F7A0 ; =============== S U B R O U T I N E =======================================
.text:0040F7A0
.text:0040F7A0
.text:0040F7A0 sub_40F7A0      proc near               ; CODE XREF: sub_40D860+99↑p
.text:0040F7A0
.text:0040F7A0 nBufferLength   = dword ptr -1Ch
.text:0040F7A0 lpBuffer        = dword ptr -18h
.text:0040F7A0 dwBytes         = dword ptr -14h
.text:0040F7A0 var_8           = dword ptr -8
.text:0040F7A0 var_4           = dword ptr -4
.text:0040F7A0
.text:0040F7A0                 sub     esp, 1Ch
.text:0040F7A3                 mov     [esp+1Ch+var_8], ebx
.text:0040F7A7                 mov     [esp+1Ch+var_4], esi
.text:0040F7AB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040F7B3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040F7BA                 call    GetLogicalDriveStringsA
.text:0040F7BF                 sub     esp, 8
.text:0040F7C2                 mov     ebx, eax
.text:0040F7C4                 call    GetProcessHeap
.text:0040F7C9                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040F7CC                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040F7D0                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040F7D8                 call    HeapAlloc
.text:0040F7DD                 sub     esp, 0Ch
.text:0040F7E0                 mov     esi, eax
.text:0040F7E2                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040F7E5                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040F7E9                 call    GetLogicalDriveStringsA
.text:0040F7EE                 sub     esp, 8
.text:0040F7F1                 mov     eax, esi
.text:0040F7F3                 mov     ebx, [esp+1Ch+var_8]
.text:0040F7F7                 mov     esi, [esp+1Ch+var_4]
.text:0040F7FB                 add     esp, 1Ch
.text:0040F7FE                 retn
.text:0040F7FE sub_40F7A0      endp
.text:0040F7FE
.text:0040F7FF
.text:0040F7FF ; =============== S U B R O U T I N E =======================================
.text:0040F7FF
.text:0040F7FF
.text:0040F7FF ; int __cdecl sub_40F7FF(char *, char *)
.text:0040F7FF sub_40F7FF      proc near               ; DATA XREF: sub_40F7FF:loc_40F88D↓o
.text:0040F7FF
.text:0040F7FF FileName        = dword ptr -1Ch
.text:0040F7FF Mode            = dword ptr -18h
.text:0040F7FF dwBytes         = dword ptr -14h
.text:0040F7FF arg_0           = dword ptr  4
.text:0040F7FF arg_4           = dword ptr  8
.text:0040F7FF
.text:0040F7FF                 ja      short $+2
.text:0040F801
.text:0040F801 loc_40F801:                             ; CODE XREF: sub_40F7FF↑j
.text:0040F801                 jmp     short loc_40F810
.text:0040F801 ; ---------------------------------------------------------------------------
.text:0040F803                 align 10h
.text:0040F810
.text:0040F810 loc_40F810:                             ; CODE XREF: sub_40F7FF:loc_40F801↑j
.text:0040F810                 push    edi
.text:0040F811                 push    esi
.text:0040F812                 push    ebx
.text:0040F813                 sub     esp, 10h
.text:0040F816                 mov     ebx, [esp+1Ch+arg_0]
.text:0040F81A                 mov     edx, [esp+1Ch+arg_4]
.text:0040F81E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040F821                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040F825                 call    fopen
.text:0040F82A                 test    eax, eax
.text:0040F82C                 mov     edi, eax
.text:0040F82E                 jz      short loc_40F88D
.text:0040F830
.text:0040F830 loc_40F830:                             ; CODE XREF: sub_40F7FF+A2↓j
.text:0040F830                                         ; sub_40F7FF+AB↓j
.text:0040F830                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040F838                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040F83F                 call    GetLogicalDriveStringsA
.text:0040F844                 sub     esp, 8
.text:0040F847                 mov     esi, eax
.text:0040F849                 call    GetProcessHeap
.text:0040F84E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040F851                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040F855                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040F85D                 call    HeapAlloc
.text:0040F862                 sub     esp, 0Ch
.text:0040F865                 mov     ebx, eax
.text:0040F867                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040F86A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040F86E                 call    GetLogicalDriveStringsA
.text:0040F873                 mov     off_414084, ebx ; "notset"
.text:0040F879                 sub     esp, 8
.text:0040F87C                 xor     eax, eax
.text:0040F87E                 test    ebx, ebx
.text:0040F880                 setz    al
.text:0040F883                 add     esp, 10h
.text:0040F886                 pop     ebx
.text:0040F887                 dec     eax
.text:0040F888                 and     eax, edi
.text:0040F88A                 pop     esi
.text:0040F88B                 pop     edi
.text:0040F88C                 retn
.text:0040F88D ; ---------------------------------------------------------------------------
.text:0040F88D
.text:0040F88D loc_40F88D:                             ; CODE XREF: sub_40F7FF+2F↑j
.text:0040F88D                 mov     [esp+1Ch+Mode], offset sub_40F7FF ; Mode
.text:0040F895                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040F898                 call    fopen
.text:0040F89D                 test    eax, eax
.text:0040F89F                 mov     edi, eax
.text:0040F8A1                 jnz     short loc_40F830
.text:0040F8A3                 call    sub_410690
.text:0040F8A8                 mov     edi, eax
.text:0040F8AA                 jmp     short loc_40F830
.text:0040F8AA sub_40F7FF      endp
.text:0040F8AA
.text:0040F8AA ; ---------------------------------------------------------------------------
.text:0040F8AC                 align 10h
.text:0040F8B0                 sub     esp, 0Ch
.text:0040F8B3                 mov     eax, [esp+10h]
.text:0040F8B7                 test    eax, eax
.text:0040F8B9                 jz      short loc_40F8C3
.text:0040F8BB                 mov     [esp], eax
.text:0040F8BE                 call    fclose
.text:0040F8C3
.text:0040F8C3 loc_40F8C3:                             ; CODE XREF: .text:0040F8B9↑j
.text:0040F8C3                 call    GetProcessHeap
.text:0040F8C8                 mov     [esp], eax
.text:0040F8CB                 mov     ecx, off_414084 ; "notset"
.text:0040F8D1                 mov     dword ptr [esp+4], 0
.text:0040F8D9                 mov     [esp+8], ecx
.text:0040F8DD                 call    HeapFree
.text:0040F8E2                 mov     edx, off_414080 ; "notset"
.text:0040F8E8                 sub     esp, 0Ch
.text:0040F8EB                 mov     eax, 1
.text:0040F8F0                 mov     off_414084, edx ; "notset"
.text:0040F8F6                 add     esp, 0Ch
.text:0040F8F9                 retn
.text:0040F8F9 ; ---------------------------------------------------------------------------
.text:0040F8FA                 align 10h
.text:0040F900                 push    edi
.text:0040F901                 push    esi
.text:0040F902                 push    ebx
.text:0040F903                 sub     esp, 10h
.text:0040F906                 mov     edi, [esp+24h]
.text:0040F90A                 mov     [esp], edi
.text:0040F90D                 call    strlen
.text:0040F912                 mov     edx, [esp+20h]
.text:0040F916                 mov     esi, eax
.text:0040F918                 mov     ebx, [edx+0Ch]
.text:0040F91B                 nop
.text:0040F91C                 lea     esi, [esi+0]
.text:0040F920
.text:0040F920 loc_40F920:                             ; CODE XREF: .text:0040F951↓j
.text:0040F920                 mov     [esp+4], edi
.text:0040F924                 mov     [esp], ebx
.text:0040F927                 call    strstr
.text:0040F92C                 test    eax, eax
.text:0040F92E                 jz      short loc_40F953
.text:0040F930                 cmp     eax, ebx
.text:0040F932                 jz      short loc_40F955
.text:0040F934                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040F938                 jz      short loc_40F960
.text:0040F93A
.text:0040F93A loc_40F93A:                             ; CODE XREF: .text:0040F970↓j
.text:0040F93A                 mov     [esp], ebx
.text:0040F93D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040F945                 call    strchr
.text:0040F94A                 test    eax, eax
.text:0040F94C                 mov     ebx, eax
.text:0040F94E                 jz      short loc_40F953
.text:0040F950                 inc     ebx
.text:0040F951                 jmp     short loc_40F920
.text:0040F953 ; ---------------------------------------------------------------------------
.text:0040F953
.text:0040F953 loc_40F953:                             ; CODE XREF: .text:0040F92E↑j
.text:0040F953                                         ; .text:0040F94E↑j
.text:0040F953                 xor     eax, eax
.text:0040F955
.text:0040F955 loc_40F955:                             ; CODE XREF: .text:0040F932↑j
.text:0040F955                                         ; .text:0040F966↓j ...
.text:0040F955                 add     esp, 10h
.text:0040F958                 pop     ebx
.text:0040F959                 pop     esi
.text:0040F95A                 pop     edi
.text:0040F95B                 retn
.text:0040F95B ; ---------------------------------------------------------------------------
.text:0040F95C                 align 10h
.text:0040F960
.text:0040F960 loc_40F960:                             ; CODE XREF: .text:0040F938↑j
.text:0040F960                 movzx   edx, byte ptr [esi+eax]
.text:0040F964                 test    dl, dl
.text:0040F966                 jz      short loc_40F955
.text:0040F968                 cmp     dl, 3Dh ; '='
.text:0040F96B                 jz      short loc_40F955
.text:0040F96D                 cmp     dl, 2Ch ; ','
.text:0040F970                 jnz     short loc_40F93A
.text:0040F972                 jmp     short loc_40F955
.text:0040F972 ; ---------------------------------------------------------------------------
.text:0040F974                 align 10h
.text:0040F980 ; const char aFxstat64BadFil[]
.text:0040F980 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040F980                                         ; DATA XREF: sub_40F9B0+7B↓o
.text:0040F9A4                 align 10h
.text:0040F9B0
.text:0040F9B0 ; =============== S U B R O U T I N E =======================================
.text:0040F9B0
.text:0040F9B0
.text:0040F9B0 ; int __cdecl sub_40F9B0(HANDLE hNamedPipe, int, int)
.text:0040F9B0 sub_40F9B0      proc near               ; CODE XREF: .text:0040DA79↑p
.text:0040F9B0
.text:0040F9B0 FileHandle      = dword ptr -1Ch
.text:0040F9B0 var_18          = dword ptr -18h
.text:0040F9B0 var_C           = dword ptr -0Ch
.text:0040F9B0 var_8           = dword ptr -8
.text:0040F9B0 var_4           = dword ptr -4
.text:0040F9B0 hNamedPipe      = dword ptr  4
.text:0040F9B0 arg_4           = dword ptr  8
.text:0040F9B0 arg_8           = dword ptr  0Ch
.text:0040F9B0
.text:0040F9B0                 sub     esp, 1Ch
.text:0040F9B3                 mov     edx, [esp+1Ch+arg_4]
.text:0040F9B7                 mov     [esp+1Ch+var_C], ebx
.text:0040F9BB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040F9BF                 mov     [esp+1Ch+var_8], esi
.text:0040F9C3                 mov     esi, [esp+1Ch+arg_8]
.text:0040F9C7                 test    ebx, ebx
.text:0040F9C9                 mov     [esp+1Ch+var_4], edi
.text:0040F9CD                 jnz     short loc_40FA07
.text:0040F9CF                 test    edx, edx
.text:0040F9D1                 js      short loc_40FA27
.text:0040F9D3                 test    esi, esi
.text:0040F9D5                 jz      short loc_40FA07
.text:0040F9D7                 cld
.text:0040F9D8                 mov     eax, ebx
.text:0040F9DA                 mov     edi, esi
.text:0040F9DC                 mov     ecx, 18h
.text:0040F9E1                 rep stosd
.text:0040F9E3                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040F9E7                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040F9EA                 call    _get_osfhandle
.text:0040F9EF                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040F9F3                 mov     ebx, [esp+1Ch+var_C]
.text:0040F9F7                 mov     esi, [esp+1Ch+var_8]
.text:0040F9FB                 mov     edi, [esp+1Ch+var_4]
.text:0040F9FF                 add     esp, 1Ch
.text:0040FA02                 jmp     sub_40B680
.text:0040FA07 ; ---------------------------------------------------------------------------
.text:0040FA07
.text:0040FA07 loc_40FA07:                             ; CODE XREF: sub_40F9B0+1D↑j
.text:0040FA07                                         ; sub_40F9B0+25↑j
.text:0040FA07                 call    _errno
.text:0040FA0C                 mov     dword ptr [eax], 16h
.text:0040FA12
.text:0040FA12 loc_40FA12:                             ; CODE XREF: sub_40F9B0+92↓j
.text:0040FA12                 mov     ebx, [esp+1Ch+var_C]
.text:0040FA16                 mov     eax, 0FFFFFFFFh
.text:0040FA1B                 mov     esi, [esp+1Ch+var_8]
.text:0040FA1F                 mov     edi, [esp+1Ch+var_4]
.text:0040FA23                 add     esp, 1Ch
.text:0040FA26                 retn
.text:0040FA27 ; ---------------------------------------------------------------------------
.text:0040FA27
.text:0040FA27 loc_40FA27:                             ; CODE XREF: sub_40F9B0+21↑j
.text:0040FA27                 mov     [esp+1Ch+var_18], edx
.text:0040FA2B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040FA32                 call    printf
.text:0040FA37                 call    _errno
.text:0040FA3C                 mov     dword ptr [eax], 9
.text:0040FA42                 jmp     short loc_40FA12
.text:0040FA42 sub_40F9B0      endp
.text:0040FA42
.text:0040FA42 ; ---------------------------------------------------------------------------
.text:0040FA44                 align 20h
.text:0040FA60 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040FC7F↓o
.text:0040FA6C aLu             db '%lu',0              ; DATA XREF: .text:0040FC8F↓o
.text:0040FA70 asc_40FA70      db ' ',0                ; DATA XREF: .text:loc_40FD78↓o
.text:0040FA72                 align 10h
.text:0040FA80 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040FA80                                         ; DATA XREF: .text:0040FDAF↓o
.text:0040FAA0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40FDBD↓o
.text:0040FAAC aServer         db ' Server',0          ; DATA XREF: .text:0040FDE6↓o
.text:0040FAAC                                         ; .text:loc_40FF5E↓o
.text:0040FAB4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40FDF8↓o
.text:0040FAC5 aDatacenterServ db ' Datacenter Server',0
.text:0040FAC5                                         ; DATA XREF: .text:loc_40FE02↓o
.text:0040FAD8 aStandardEditio db ' Standard Edition',0
.text:0040FAD8                                         ; DATA XREF: .text:0040FE2A↓o
.text:0040FAEA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40FE34↓o
.text:0040FAF7 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040FAF7                                         ; DATA XREF: .text:loc_40FE3E↓o
.text:0040FB0B aDatacenterEdit db ' Datacenter Edition',0
.text:0040FB0B                                         ; DATA XREF: .text:loc_40FE48↓o
.text:0040FB1F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040FE5B↓o
.text:0040FB2D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40FE65↓o
.text:0040FB2D                                         ; .text:loc_40FF70↓o
.text:0040FB3B                 align 10h
.text:0040FB40 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040FB40                                         ; DATA XREF: .text:0040FE92↓o
.text:0040FB70 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040FED9↓o
.text:0040FB7C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040FF14↓o
.text:0040FB82 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040FF2B↓o
.text:0040FB8B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040FF42↓o
.text:0040FB94                 align 10h
.text:0040FBA0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040FBA0                                         ; DATA XREF: .text:004100B7↓o
.text:0040FBC3                 align 20h
.text:0040FBE0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040FBE0                                         ; DATA XREF: .text:00410116↓o
.text:0040FC06 ; ---------------------------------------------------------------------------
.text:0040FC06
.text:0040FC06 loc_40FC06:                             ; DATA XREF: .text:loc_410181↓o
.text:0040FC06                 and     [ebx+45h], dl
.text:0040FC09                 add     [eax], ah
.text:0040FC0B                 push    ebx
.text:0040FC0C                 push    eax
.text:0040FC0D                 xor     [eax], eax
.text:0040FC0F
.text:0040FC0F loc_40FC0F:                             ; DATA XREF: .text:loc_4101FB↓o
.text:0040FC0F                 and     [edi+53h], cl
.text:0040FC12                 push    edx
.text:0040FC13                 xor     al, [eax]
.text:0040FC15                 lea     esi, [esi+0]
.text:0040FC19                 lea     edi, [edi+0]
.text:0040FC20                 push    edi
.text:0040FC21                 push    esi
.text:0040FC22                 push    ebx
.text:0040FC23                 sub     esp, 130h
.text:0040FC29                 mov     ebx, [esp+140h]
.text:0040FC30                 call    sub_410330
.text:0040FC35                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040FC3A                 cmp     eax, 1
.text:0040FC3D                 jz      loc_4100E0
.text:0040FC43                 cmp     eax, 1
.text:0040FC46                 jb      loc_4100B6
.text:0040FC4C                 cmp     eax, 2
.text:0040FC4F                 jz      loc_40FD00
.text:0040FC55                 cmp     eax, 3
.text:0040FC58                 jz      short loc_40FCBF
.text:0040FC5A                 lea     esi, [esi+0]
.text:0040FC60
.text:0040FC60 loc_40FC60:                             ; CODE XREF: .text:0040FCF5↓j
.text:0040FC60                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040FC66                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040FC6C
.text:0040FC6C loc_40FC6C:                             ; CODE XREF: .text:004100FF↓j
.text:0040FC6C                 mov     [esp+10h], edx
.text:0040FC70                 mov     ebx, [esp+144h]
.text:0040FC77                 mov     [esp+0Ch], ecx
.text:0040FC7B                 mov     [esp+8], eax
.text:0040FC7F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040FC87                 mov     [esp], ebx
.text:0040FC8A                 call    sprintf
.text:0040FC8F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:0040FC97                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040FC9D                 mov     ecx, [esp+148h]
.text:0040FCA4                 mov     [esp+8], edi
.text:0040FCA8                 mov     [esp], ecx
.text:0040FCAB                 call    sprintf
.text:0040FCB0                 mov     eax, 1
.text:0040FCB5
.text:0040FCB5 loc_40FCB5:                             ; CODE XREF: .text:0040FEAF↓j
.text:0040FCB5                                         ; .text:0040FEFC↓j
.text:0040FCB5                 add     esp, 130h
.text:0040FCBB                 pop     ebx
.text:0040FCBC                 pop     esi
.text:0040FCBD                 pop     edi
.text:0040FCBE                 retn
.text:0040FCBF ; ---------------------------------------------------------------------------
.text:0040FCBF
.text:0040FCBF loc_40FCBF:                             ; CODE XREF: .text:0040FC58↑j
.text:0040FCBF                 mov     dword ptr [ebx], 7263694Dh
.text:0040FCC5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040FCCC                 mov     dword ptr [ebx+8], 69572074h
.text:0040FCD3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040FCDA                 mov     dword ptr [ebx+10h], 45432073h
.text:0040FCE1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040FCE7                 mov     esi, esi
.text:0040FCE9                 lea     edi, [edi+0]
.text:0040FCF0
.text:0040FCF0 loc_40FCF0:                             ; CODE XREF: .text:0040FD98↓j
.text:0040FCF0                                         ; .text:004100D9↓j ...
.text:0040FCF0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040FCF5                 jmp     loc_40FC60
.text:0040FCF5 ; ---------------------------------------------------------------------------
.text:0040FCFA                 align 10h
.text:0040FD00
.text:0040FD00 loc_40FD00:                             ; CODE XREF: .text:0040FC4F↑j
.text:0040FD00                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040FD06                 cmp     edx, 3
.text:0040FD09                 mov     eax, edx
.text:0040FD0B                 jz      loc_410075
.text:0040FD11
.text:0040FD11 loc_40FD11:                             ; CODE XREF: .text:0041007C↓j
.text:0040FD11                 cmp     eax, 4
.text:0040FD14                 jz      loc_410035
.text:0040FD1A
.text:0040FD1A loc_40FD1A:                             ; CODE XREF: .text:0041003D↓j
.text:0040FD1A                 cmp     eax, 4
.text:0040FD1D                 ja      loc_40FF82
.text:0040FD23                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040FD29                 test    ecx, ecx
.text:0040FD2B                 jnz     loc_40FF82
.text:0040FD31                 mov     dword ptr [ebx], 7263694Dh
.text:0040FD37                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040FD3E                 mov     dword ptr [ebx+8], 69572074h
.text:0040FD45                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040FD4C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040FD53
.text:0040FD53 loc_40FD53:                             ; CODE XREF: .text:0040FFF5↓j
.text:0040FD53                 mov     byte ptr [ebx+14h], 0
.text:0040FD57
.text:0040FD57 loc_40FD57:                             ; CODE XREF: .text:0040FF85↓j
.text:0040FD57                                         ; .text:0040FF9C↓j ...
.text:0040FD57                 mov     esi, dword_414090
.text:0040FD5D                 test    esi, esi
.text:0040FD5F                 jz      loc_40FE72
.text:0040FD65                 movzx   eax, ds:byte_41551A
.text:0040FD6C                 cmp     al, 1
.text:0040FD6E                 jz      loc_40FE52
.text:0040FD74                 cmp     al, 3
.text:0040FD76                 jz      short loc_40FD9D
.text:0040FD78
.text:0040FD78 loc_40FD78:                             ; CODE XREF: .text:0040FDBB↓j
.text:0040FD78                                         ; .text:0040FDF6↓j ...
.text:0040FD78                 mov     dword ptr [esp+4], offset asc_40FA70 ; " "
.text:0040FD80                 mov     [esp], ebx
.text:0040FD83                 call    strcat
.text:0040FD88                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040FD90                 mov     [esp], ebx
.text:0040FD93                 call    strcat
.text:0040FD98                 jmp     loc_40FCF0
.text:0040FD9D ; ---------------------------------------------------------------------------
.text:0040FD9D
.text:0040FD9D loc_40FD9D:                             ; CODE XREF: .text:0040FD76↑j
.text:0040FD9D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040FDA4                 jz      short loc_40FDC6
.text:0040FDA6
.text:0040FDA6 loc_40FDA6:                             ; CODE XREF: .text:0040FDD2↓j
.text:0040FDA6                 test    byte ptr ds:word_415518, 2
.text:0040FDAD                 jz      short loc_40FDBD
.text:0040FDAF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040FDB6
.text:0040FDB6 loc_40FDB6:                             ; CODE XREF: .text:0040FDC4↓j
.text:0040FDB6                 call    printf
.text:0040FDBB                 jmp     short loc_40FD78
.text:0040FDBD ; ---------------------------------------------------------------------------
.text:0040FDBD
.text:0040FDBD loc_40FDBD:                             ; CODE XREF: .text:0040FDAD↑j
.text:0040FDBD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040FDC4                 jmp     short loc_40FDB6
.text:0040FDC6 ; ---------------------------------------------------------------------------
.text:0040FDC6
.text:0040FDC6 loc_40FDC6:                             ; CODE XREF: .text:0040FDA4↑j
.text:0040FDC6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040FDCB                 cmp     eax, 2
.text:0040FDCE                 jz      short loc_40FE10
.text:0040FDD0                 test    eax, eax
.text:0040FDD2                 jnz     short loc_40FDA6
.text:0040FDD4                 cmp     byte ptr ds:word_415518, 0
.text:0040FDDB                 js      short loc_40FE02
.text:0040FDDD                 test    byte ptr ds:word_415518, 2
.text:0040FDE4                 jnz     short loc_40FDF8
.text:0040FDE6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040FDEE
.text:0040FDEE loc_40FDEE:                             ; CODE XREF: .text:0040FE00↓j
.text:0040FDEE                                         ; .text:0040FE0A↓j ...
.text:0040FDEE                 mov     [esp], ebx
.text:0040FDF1                 call    strcat
.text:0040FDF6                 jmp     short loc_40FD78
.text:0040FDF8 ; ---------------------------------------------------------------------------
.text:0040FDF8
.text:0040FDF8 loc_40FDF8:                             ; CODE XREF: .text:0040FDE4↑j
.text:0040FDF8                                         ; .text:0040FF59↓j
.text:0040FDF8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040FE00                 jmp     short loc_40FDEE
.text:0040FE02 ; ---------------------------------------------------------------------------
.text:0040FE02
.text:0040FE02 loc_40FE02:                             ; CODE XREF: .text:0040FDDB↑j
.text:0040FE02                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040FE0A                 jmp     short loc_40FDEE
.text:0040FE0A ; ---------------------------------------------------------------------------
.text:0040FE0C                 align 10h
.text:0040FE10
.text:0040FE10 loc_40FE10:                             ; CODE XREF: .text:0040FDCE↑j
.text:0040FE10                 cmp     byte ptr ds:word_415518, 0
.text:0040FE17                 js      short loc_40FE48
.text:0040FE19                 movzx   eax, ds:word_415518
.text:0040FE20                 test    al, 2
.text:0040FE22                 jnz     short loc_40FE3E
.text:0040FE24                 cmp     ax, 400h
.text:0040FE28                 jz      short loc_40FE34
.text:0040FE2A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040FE32                 jmp     short loc_40FDEE
.text:0040FE34 ; ---------------------------------------------------------------------------
.text:0040FE34
.text:0040FE34 loc_40FE34:                             ; CODE XREF: .text:0040FE28↑j
.text:0040FE34                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040FE3C                 jmp     short loc_40FDEE
.text:0040FE3E ; ---------------------------------------------------------------------------
.text:0040FE3E
.text:0040FE3E loc_40FE3E:                             ; CODE XREF: .text:0040FE22↑j
.text:0040FE3E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040FE46                 jmp     short loc_40FDEE
.text:0040FE48 ; ---------------------------------------------------------------------------
.text:0040FE48
.text:0040FE48 loc_40FE48:                             ; CODE XREF: .text:0040FE17↑j
.text:0040FE48                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040FE50                 jmp     short loc_40FDEE
.text:0040FE52 ; ---------------------------------------------------------------------------
.text:0040FE52
.text:0040FE52 loc_40FE52:                             ; CODE XREF: .text:0040FD6E↑j
.text:0040FE52                 test    byte ptr ds:word_415518+1, 2
.text:0040FE59                 jz      short loc_40FE65
.text:0040FE5B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040FE63                 jmp     short loc_40FDEE
.text:0040FE65 ; ---------------------------------------------------------------------------
.text:0040FE65
.text:0040FE65 loc_40FE65:                             ; CODE XREF: .text:0040FE59↑j
.text:0040FE65                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040FE6D                 jmp     loc_40FDEE
.text:0040FE72 ; ---------------------------------------------------------------------------
.text:0040FE72
.text:0040FE72 loc_40FE72:                             ; CODE XREF: .text:0040FD5F↑j
.text:0040FE72                 mov     dword ptr [esp+28h], 0FFh
.text:0040FE7A                 lea     edx, [esp+2Ch]
.text:0040FE7E                 mov     [esp+10h], edx
.text:0040FE82                 mov     dword ptr [esp+0Ch], 1
.text:0040FE8A                 mov     dword ptr [esp+8], 0
.text:0040FE92                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040FE9A                 mov     dword ptr [esp], 80000002h
.text:0040FEA1                 call    RegOpenKeyExA
.text:0040FEA6                 mov     edi, eax
.text:0040FEA8                 sub     esp, 14h
.text:0040FEAB                 xor     eax, eax
.text:0040FEAD                 test    edi, edi
.text:0040FEAF                 jnz     loc_40FCB5
.text:0040FEB5                 mov     dword ptr [esp+0Ch], 0
.text:0040FEBD                 mov     edi, [esp+2Ch]
.text:0040FEC1                 lea     esi, [esp+28h]
.text:0040FEC5                 mov     [esp+14h], esi
.text:0040FEC9                 lea     esi, [esp+30h]
.text:0040FECD                 mov     [esp+10h], esi
.text:0040FED1                 mov     dword ptr [esp+8], 0
.text:0040FED9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040FEE1                 mov     [esp], edi
.text:0040FEE4                 call    RegQueryValueExA
.text:0040FEE9                 sub     esp, 18h
.text:0040FEEC                 test    eax, eax
.text:0040FEEE                 jnz     short loc_40FEFA
.text:0040FEF0                 cmp     dword ptr [esp+28h], 0FFh
.text:0040FEF8                 jbe     short loc_40FF01
.text:0040FEFA
.text:0040FEFA loc_40FEFA:                             ; CODE XREF: .text:0040FEEE↑j
.text:0040FEFA                 xor     eax, eax
.text:0040FEFC                 jmp     loc_40FCB5
.text:0040FF01 ; ---------------------------------------------------------------------------
.text:0040FF01
.text:0040FF01 loc_40FF01:                             ; CODE XREF: .text:0040FEF8↑j
.text:0040FF01                 mov     edx, [esp+2Ch]
.text:0040FF05                 mov     [esp], edx
.text:0040FF08                 call    RegCloseKey
.text:0040FF0D                 sub     esp, 4
.text:0040FF10                 mov     [esp+4], esi
.text:0040FF14                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040FF1B                 call    lstrcmpiA
.text:0040FF20                 sub     esp, 8
.text:0040FF23                 test    eax, eax
.text:0040FF25                 jz      short loc_40FF70
.text:0040FF27
.text:0040FF27 loc_40FF27:                             ; CODE XREF: .text:0040FF80↓j
.text:0040FF27                 mov     [esp+4], esi
.text:0040FF2B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040FF32                 call    lstrcmpiA
.text:0040FF37                 sub     esp, 8
.text:0040FF3A                 test    eax, eax
.text:0040FF3C                 jz      short loc_40FF5E
.text:0040FF3E
.text:0040FF3E loc_40FF3E:                             ; CODE XREF: .text:0040FF6E↓j
.text:0040FF3E                 mov     [esp+4], esi
.text:0040FF42                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040FF49                 call    lstrcmpiA
.text:0040FF4E                 sub     esp, 8
.text:0040FF51                 test    eax, eax
.text:0040FF53                 jnz     loc_40FD78
.text:0040FF59                 jmp     loc_40FDF8
.text:0040FF5E ; ---------------------------------------------------------------------------
.text:0040FF5E
.text:0040FF5E loc_40FF5E:                             ; CODE XREF: .text:0040FF3C↑j
.text:0040FF5E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040FF66                 mov     [esp], ebx
.text:0040FF69                 call    strcat
.text:0040FF6E                 jmp     short loc_40FF3E
.text:0040FF70 ; ---------------------------------------------------------------------------
.text:0040FF70
.text:0040FF70 loc_40FF70:                             ; CODE XREF: .text:0040FF25↑j
.text:0040FF70                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040FF78                 mov     [esp], ebx
.text:0040FF7B                 call    strcat
.text:0040FF80                 jmp     short loc_40FF27
.text:0040FF82 ; ---------------------------------------------------------------------------
.text:0040FF82
.text:0040FF82 loc_40FF82:                             ; CODE XREF: .text:0040FD1D↑j
.text:0040FF82                                         ; .text:0040FD2B↑j
.text:0040FF82                 cmp     eax, 5
.text:0040FF85                 jnz     loc_40FD57
.text:0040FF8B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040FF90                 cmp     eax, 2
.text:0040FF93                 jz      short loc_40FFFA
.text:0040FF95                 cmp     eax, 1
.text:0040FF98                 jz      short loc_40FFD3
.text:0040FF9A                 test    eax, eax
.text:0040FF9C                 jnz     loc_40FD57
.text:0040FFA2                 mov     dword ptr [ebx], 7263694Dh
.text:0040FFA8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040FFAF                 mov     dword ptr [ebx+8], 69572074h
.text:0040FFB6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040FFBD                 mov     dword ptr [ebx+10h], 30322073h
.text:0040FFC4                 mov     word ptr [ebx+14h], 3030h
.text:0040FFCA                 mov     byte ptr [ebx+16h], 0
.text:0040FFCE                 jmp     loc_40FD57
.text:0040FFD3 ; ---------------------------------------------------------------------------
.text:0040FFD3
.text:0040FFD3 loc_40FFD3:                             ; CODE XREF: .text:0040FF98↑j
.text:0040FFD3                 mov     dword ptr [ebx], 7263694Dh
.text:0040FFD9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040FFE0                 mov     dword ptr [ebx+8], 69572074h
.text:0040FFE7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040FFEE                 mov     dword ptr [ebx+10h], 50582073h
.text:0040FFF5                 jmp     loc_40FD53
.text:0040FFFA ; ---------------------------------------------------------------------------
.text:0040FFFA
.text:0040FFFA loc_40FFFA:                             ; CODE XREF: .text:0040FF93↑j
.text:0040FFFA                 mov     dword ptr [ebx], 7263694Dh
.text:00410000                 mov     dword ptr [ebx+4], 666F736Fh
.text:00410007                 mov     dword ptr [ebx+8], 69572074h
.text:0041000E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00410015                 mov     dword ptr [ebx+10h], 65532073h
.text:0041001C                 mov     dword ptr [ebx+14h], 72657672h
.text:00410023                 mov     dword ptr [ebx+18h], 30303220h
.text:0041002A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00410030                 jmp     loc_40FD57
.text:00410035 ; ---------------------------------------------------------------------------
.text:00410035
.text:00410035 loc_410035:                             ; CODE XREF: .text:0040FD14↑j
.text:00410035                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041003B                 test    edx, edx
.text:0041003D                 jnz     loc_40FD1A
.text:00410043                 mov     dword ptr [ebx], 7263694Dh
.text:00410049                 mov     dword ptr [ebx+4], 666F736Fh
.text:00410050                 mov     dword ptr [ebx+8], 69572074h
.text:00410057                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041005E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00410065                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041006C                 mov     byte ptr [ebx+18h], 0
.text:00410070                 jmp     loc_40FD57
.text:00410075 ; ---------------------------------------------------------------------------
.text:00410075
.text:00410075 loc_410075:                             ; CODE XREF: .text:0040FD0B↑j
.text:00410075                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041007C                 jnz     loc_40FD11
.text:00410082                 mov     dword ptr [ebx], 7263694Dh
.text:00410088                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041008F                 mov     dword ptr [ebx+8], 69572074h
.text:00410096                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041009D                 mov     dword ptr [ebx+10h], 544E2073h
.text:004100A4                 mov     dword ptr [ebx+14h], 352E3320h
.text:004100AB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:004100B1                 jmp     loc_40FD57
.text:004100B6 ; ---------------------------------------------------------------------------
.text:004100B6
.text:004100B6 loc_4100B6:                             ; CODE XREF: .text:0040FC46↑j
.text:004100B6                 cld
.text:004100B7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:004100BC                 mov     ecx, 8
.text:004100C1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:004100C8                 mov     edi, ebx
.text:004100CA                 rep movsd
.text:004100CC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:004100D3                 mov     [edi+2], dl
.text:004100D6                 mov     [edi], si
.text:004100D9                 jmp     loc_40FCF0
.text:004100D9 ; ---------------------------------------------------------------------------
.text:004100DE                 align 10h
.text:004100E0
.text:004100E0 loc_4100E0:                             ; CODE XREF: .text:0040FC3D↑j
.text:004100E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004100E6                 cmp     ecx, 4
.text:004100E9                 jz      loc_4101A0
.text:004100EF
.text:004100EF loc_4100EF:                             ; CODE XREF: .text:004101F6↓j
.text:004100EF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004100F5
.text:004100F5 loc_4100F5:                             ; CODE XREF: .text:004101A8↓j
.text:004100F5                 cmp     ecx, 4
.text:004100F8                 jz      short loc_410104
.text:004100FA
.text:004100FA loc_4100FA:                             ; CODE XREF: .text:0041010C↓j
.text:004100FA                                         ; .text:00410111↓j
.text:004100FA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004100FF                 jmp     loc_40FC6C
.text:00410104 ; ---------------------------------------------------------------------------
.text:00410104
.text:00410104 loc_410104:                             ; CODE XREF: .text:004100F8↑j
.text:00410104                 cmp     edx, 0Ah
.text:00410107                 jz      short loc_410131
.text:00410109
.text:00410109 loc_410109:                             ; CODE XREF: .text:0041017F↓j
.text:00410109                 cmp     ecx, 4
.text:0041010C                 jnz     short loc_4100FA
.text:0041010E                 cmp     edx, 5Ah ; 'Z'
.text:00410111                 jnz     short loc_4100FA
.text:00410113                 cld
.text:00410114                 mov     edi, ebx
.text:00410116                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0041011B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00410122                 mov     ecx, 9
.text:00410127                 rep movsd
.text:00410129                 mov     [edi], bx
.text:0041012C                 jmp     loc_40FCF0
.text:00410131 ; ---------------------------------------------------------------------------
.text:00410131
.text:00410131 loc_410131:                             ; CODE XREF: .text:00410107↑j
.text:00410131                 mov     dword ptr [ebx], 7263694Dh
.text:00410137                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041013E                 mov     dword ptr [ebx+8], 69572074h
.text:00410145                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041014C                 mov     dword ptr [ebx+10h], 38392073h
.text:00410153                 mov     byte ptr [ebx+14h], 0
.text:00410157                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041015D                 lea     edi, [edx-7CFh]
.text:00410163                 cmp     edi, 0B7h ; '·'
.text:00410169                 jbe     short loc_410193
.text:0041016B                 cmp     edx, 886h
.text:00410171                 ja      short loc_410181
.text:00410173
.text:00410173 loc_410173:                             ; CODE XREF: .text:00410191↓j
.text:00410173                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00410179                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041017F                 jmp     short loc_410109
.text:00410181 ; ---------------------------------------------------------------------------
.text:00410181
.text:00410181 loc_410181:                             ; CODE XREF: .text:00410171↑j
.text:00410181                 mov     dword ptr [esp+4], offset loc_40FC06
.text:00410189
.text:00410189 loc_410189:                             ; CODE XREF: .text:0041019B↓j
.text:00410189                 mov     [esp], ebx
.text:0041018C                 call    strcat
.text:00410191                 jmp     short loc_410173
.text:00410193 ; ---------------------------------------------------------------------------
.text:00410193
.text:00410193 loc_410193:                             ; CODE XREF: .text:00410169↑j
.text:00410193                 mov     dword ptr [esp+4], 40FC0Ah
.text:0041019B                 jmp     short loc_410189
.text:0041019B ; ---------------------------------------------------------------------------
.text:0041019D                 align 10h
.text:004101A0
.text:004101A0 loc_4101A0:                             ; CODE XREF: .text:004100E9↑j
.text:004101A0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004101A6                 test    edx, edx
.text:004101A8                 jnz     loc_4100F5
.text:004101AE                 mov     dword ptr [ebx], 7263694Dh
.text:004101B4                 mov     dword ptr [ebx+4], 666F736Fh
.text:004101BB                 mov     dword ptr [ebx+8], 69572074h
.text:004101C2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004101C9                 mov     dword ptr [ebx+10h], 35392073h
.text:004101D0                 mov     byte ptr [ebx+14h], 0
.text:004101D4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004101DA                 lea     ecx, [edx-3B7h]
.text:004101E0                 cmp     ecx, 81h
.text:004101E6                 jbe     short loc_41020D
.text:004101E8                 cmp     edx, 438h
.text:004101EE                 ja      short loc_4101FB
.text:004101F0
.text:004101F0 loc_4101F0:                             ; CODE XREF: .text:0041020B↓j
.text:004101F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004101F6                 jmp     loc_4100EF
.text:004101FB ; ---------------------------------------------------------------------------
.text:004101FB
.text:004101FB loc_4101FB:                             ; CODE XREF: .text:004101EE↑j
.text:004101FB                 mov     dword ptr [esp+4], offset loc_40FC0F
.text:00410203
.text:00410203 loc_410203:                             ; CODE XREF: .text:00410215↓j
.text:00410203                 mov     [esp], ebx
.text:00410206                 call    strcat
.text:0041020B                 jmp     short loc_4101F0
.text:0041020D ; ---------------------------------------------------------------------------
.text:0041020D
.text:0041020D loc_41020D:                             ; CODE XREF: .text:004101E6↑j
.text:0041020D                 mov     dword ptr [esp+4], 40FC0Ah
.text:00410215                 jmp     short loc_410203
.text:00410215 ; ---------------------------------------------------------------------------
.text:00410217                 align 10h
.text:00410220
.text:00410220 ; =============== S U B R O U T I N E =======================================
.text:00410220
.text:00410220
.text:00410220 sub_410220      proc near               ; CODE XREF: .text:0040DCDE↑p
.text:00410220                                         ; sub_40E160+12A↑p
.text:00410220                 sub     esp, 0Ch
.text:00410223                 call    sub_410330
.text:00410228                 mov     eax, ds:dword_415470
.text:0041022D                 add     esp, 0Ch
.text:00410230                 retn
.text:00410230 sub_410220      endp
.text:00410230
.text:00410231 ; ---------------------------------------------------------------------------
.text:00410231                 jmp     short loc_410240
.text:00410231 ; ---------------------------------------------------------------------------
.text:00410233                 align 10h
.text:00410240
.text:00410240 loc_410240:                             ; CODE XREF: .text:00410231↑j
.text:00410240                 sub     esp, 0Ch
.text:00410243                 call    sub_410330
.text:00410248                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041024D                 add     esp, 0Ch
.text:00410250                 retn
.text:00410251 ; ---------------------------------------------------------------------------
.text:00410251                 jmp     short loc_410260
.text:00410251 ; ---------------------------------------------------------------------------
.text:00410253                 align 10h
.text:00410260
.text:00410260 loc_410260:                             ; CODE XREF: .text:00410251↑j
.text:00410260                 sub     esp, 0Ch
.text:00410263                 call    sub_410330
.text:00410268                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041026D                 add     esp, 0Ch
.text:00410270                 retn
.text:00410271 ; ---------------------------------------------------------------------------
.text:00410271                 jmp     short loc_410280
.text:00410271 ; ---------------------------------------------------------------------------
.text:00410273                 align 10h
.text:00410280
.text:00410280 loc_410280:                             ; CODE XREF: .text:00410271↑j
.text:00410280                 sub     esp, 0Ch
.text:00410283                 call    sub_410330
.text:00410288                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041028D                 add     esp, 0Ch
.text:00410290                 retn
.text:00410291 ; ---------------------------------------------------------------------------
.text:00410291                 jmp     short loc_4102A0
.text:00410291 ; ---------------------------------------------------------------------------
.text:00410293                 align 10h
.text:004102A0
.text:004102A0 loc_4102A0:                             ; CODE XREF: .text:00410291↑j
.text:004102A0                 sub     esp, 0Ch
.text:004102A3                 call    GetVersion
.text:004102A8                 shr     eax, 10h
.text:004102AB                 add     esp, 0Ch
.text:004102AE                 retn
.text:004102AE ; ---------------------------------------------------------------------------
.text:004102AF                 align 10h
.text:004102B0                 sub     esp, 0Ch
.text:004102B3                 call    sub_410330
.text:004102B8                 xor     eax, eax
.text:004102BA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:004102C1                 setz    al
.text:004102C4                 add     esp, 0Ch
.text:004102C7                 retn
.text:004102C7 ; ---------------------------------------------------------------------------
.text:004102C8                 align 10h
.text:004102D0
.text:004102D0 ; =============== S U B R O U T I N E =======================================
.text:004102D0
.text:004102D0
.text:004102D0 sub_4102D0      proc near               ; CODE XREF: .text:loc_40DCC4↑p
.text:004102D0                                         ; .text:0040DCD5↑p ...
.text:004102D0                 sub     esp, 0Ch
.text:004102D3                 call    sub_410330
.text:004102D8                 xor     eax, eax
.text:004102DA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:004102E1                 setz    al
.text:004102E4                 add     esp, 0Ch
.text:004102E7                 retn
.text:004102E7 sub_4102D0      endp
.text:004102E7
.text:004102E7 ; ---------------------------------------------------------------------------
.text:004102E8                 align 10h
.text:004102F0                 sub     esp, 0Ch
.text:004102F3                 call    sub_410330
.text:004102F8                 xor     eax, eax
.text:004102FA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00410301                 setz    al
.text:00410304                 add     esp, 0Ch
.text:00410307                 retn
.text:00410307 ; ---------------------------------------------------------------------------
.text:00410308                 align 10h
.text:00410310                 sub     esp, 0Ch
.text:00410313                 call    sub_410330
.text:00410318                 xor     eax, eax
.text:0041031A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00410321                 setz    al
.text:00410324                 add     esp, 0Ch
.text:00410327                 retn
.text:00410327 ; ---------------------------------------------------------------------------
.text:00410328                 align 10h
.text:00410330
.text:00410330 ; =============== S U B R O U T I N E =======================================
.text:00410330
.text:00410330
.text:00410330 sub_410330      proc near               ; CODE XREF: .text:0040FC30↑p
.text:00410330                                         ; sub_410220+3↑p ...
.text:00410330
.text:00410330 lpVersionInformation= dword ptr -0BCh
.text:00410330 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00410330
.text:00410330                 sub     esp, 0BCh
.text:00410336                 mov     edx, ds:dword_415520
.text:0041033C                 test    edx, edx
.text:0041033E                 jz      short loc_410350
.text:00410340
.text:00410340 loc_410340:                             ; CODE XREF: sub_410330+7B↓j
.text:00410340                 mov     edx, 1
.text:00410345
.text:00410345 loc_410345:                             ; CODE XREF: sub_410330+217↓j
.text:00410345                 mov     eax, edx
.text:00410347                 add     esp, 0BCh
.text:0041034D                 retn
.text:0041034D ; ---------------------------------------------------------------------------
.text:0041034E                 align 10h
.text:00410350
.text:00410350 loc_410350:                             ; CODE XREF: sub_410330+E↑j
.text:00410350                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00410357                 mov     edx, 9Ch ; 'œ'
.text:0041035C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00410362                 call    GetVersionExA
.text:00410367                 sub     esp, 4
.text:0041036A                 test    eax, eax
.text:0041036C                 jz      loc_410524
.text:00410372
.text:00410372 loc_410372:                             ; CODE XREF: sub_410330+245↓j
.text:00410372                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00410379                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041037E                 cmp     eax, 1
.text:00410381                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00410387                 jz      loc_410470
.text:0041038D                 cmp     eax, 1
.text:00410390                 jb      loc_410460
.text:00410396                 cmp     eax, 2
.text:00410399                 jz      short loc_4103BA
.text:0041039B                 cmp     eax, 3
.text:0041039E                 jz      short loc_4103AD
.text:004103A0
.text:004103A0 loc_4103A0:                             ; CODE XREF: sub_410330+88↓j
.text:004103A0                                         ; sub_410330+C0↓j ...
.text:004103A0                 mov     edx, 1
.text:004103A5                 mov     ds:dword_415520, edx
.text:004103AB                 jmp     short loc_410340
.text:004103AD ; ---------------------------------------------------------------------------
.text:004103AD
.text:004103AD loc_4103AD:                             ; CODE XREF: sub_410330+6E↑j
.text:004103AD                 mov     ecx, 17h
.text:004103B2
.text:004103B2 loc_4103B2:                             ; CODE XREF: sub_410330+1A7↓j
.text:004103B2                 mov     ds:dword_415470, ecx
.text:004103B8                 jmp     short loc_4103A0
.text:004103BA ; ---------------------------------------------------------------------------
.text:004103BA
.text:004103BA loc_4103BA:                             ; CODE XREF: sub_410330+69↑j
.text:004103BA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:004103BF                 cmp     eax, 3
.text:004103C2                 jz      short loc_41043B
.text:004103C4                 cmp     eax, 4
.text:004103C7                 jz      short loc_41042A
.text:004103C9
.text:004103C9 loc_4103C9:                             ; CODE XREF: sub_410330+102↓j
.text:004103C9                 cmp     eax, 4
.text:004103CC                 ja      short loc_4103F2
.text:004103CE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004103D4                 test    ecx, ecx
.text:004103D6                 jnz     short loc_4103F2
.text:004103D8                 mov     edx, 1Eh
.text:004103DD
.text:004103DD loc_4103DD:                             ; CODE XREF: sub_410330+DF↓j
.text:004103DD                 mov     ds:dword_415470, edx
.text:004103E3
.text:004103E3 loc_4103E3:                             ; CODE XREF: sub_410330+C5↓j
.text:004103E3                                         ; sub_410330+D8↓j ...
.text:004103E3                 movzx   ecx, ds:word_415514
.text:004103EA                 add     ds:dword_415470, ecx
.text:004103F0                 jmp     short loc_4103A0
.text:004103F2 ; ---------------------------------------------------------------------------
.text:004103F2
.text:004103F2 loc_4103F2:                             ; CODE XREF: sub_410330+9C↑j
.text:004103F2                                         ; sub_410330+A6↑j
.text:004103F2                 cmp     eax, 5
.text:004103F5                 jnz     short loc_4103E3
.text:004103F7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004103FC                 cmp     eax, 2
.text:004103FF                 jz      short loc_41041E
.text:00410401                 cmp     eax, 1
.text:00410404                 jz      short loc_410411
.text:00410406                 test    eax, eax
.text:00410408                 jnz     short loc_4103E3
.text:0041040A                 mov     edx, 32h ; '2'
.text:0041040F                 jmp     short loc_4103DD
.text:00410411 ; ---------------------------------------------------------------------------
.text:00410411
.text:00410411 loc_410411:                             ; CODE XREF: sub_410330+D4↑j
.text:00410411                 mov     ecx, 3Ch ; '<'
.text:00410416
.text:00410416 loc_410416:                             ; CODE XREF: sub_410330+122↓j
.text:00410416                 mov     ds:dword_415470, ecx
.text:0041041C                 jmp     short loc_4103E3
.text:0041041E ; ---------------------------------------------------------------------------
.text:0041041E
.text:0041041E loc_41041E:                             ; CODE XREF: sub_410330+CF↑j
.text:0041041E                 mov     eax, 46h ; 'F'
.text:00410423
.text:00410423 loc_410423:                             ; CODE XREF: sub_410330+109↓j
.text:00410423                                         ; sub_410330+129↓j
.text:00410423                 mov     ds:dword_415470, eax
.text:00410428                 jmp     short loc_4103E3
.text:0041042A ; ---------------------------------------------------------------------------
.text:0041042A
.text:0041042A loc_41042A:                             ; CODE XREF: sub_410330+97↑j
.text:0041042A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00410430                 test    ecx, ecx
.text:00410432                 jnz     short loc_4103C9
.text:00410434                 mov     eax, 28h ; '('
.text:00410439                 jmp     short loc_410423
.text:0041043B ; ---------------------------------------------------------------------------
.text:0041043B
.text:0041043B loc_41043B:                             ; CODE XREF: sub_410330+92↑j
.text:0041043B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00410440                 cmp     eax, 33h ; '3'
.text:00410443                 jz      short loc_410454
.text:00410445                 cmp     eax, 5
.text:00410448                 setz    cl
.text:0041044B                 movzx   edx, cl
.text:0041044E                 lea     ecx, [edx+edx*4+1Eh]
.text:00410452                 jmp     short loc_410416
.text:00410454 ; ---------------------------------------------------------------------------
.text:00410454
.text:00410454 loc_410454:                             ; CODE XREF: sub_410330+113↑j
.text:00410454                 mov     eax, 24h ; '$'
.text:00410459                 jmp     short loc_410423
.text:00410459 ; ---------------------------------------------------------------------------
.text:0041045B                 align 10h
.text:00410460
.text:00410460 loc_410460:                             ; CODE XREF: sub_410330+60↑j
.text:00410460                 mov     edx, 2
.text:00410465                 mov     ds:dword_415470, edx
.text:0041046B                 jmp     loc_4103A0
.text:00410470 ; ---------------------------------------------------------------------------
.text:00410470
.text:00410470 loc_410470:                             ; CODE XREF: sub_410330+57↑j
.text:00410470                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00410476                 cmp     ecx, 4
.text:00410479                 jnz     loc_4103A0
.text:0041047F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00410484                 test    eax, eax
.text:00410486                 jnz     short loc_4104AA
.text:00410488                 mov     eax, 0Ah
.text:0041048D                 mov     ds:dword_415470, eax
.text:00410492                 lea     eax, [edx-3B7h]
.text:00410498                 cmp     eax, 81h
.text:0041049D                 ja      short loc_410515
.text:0041049F                 mov     edx, 0Bh
.text:004104A4
.text:004104A4 loc_4104A4:                             ; CODE XREF: sub_410330+1F2↓j
.text:004104A4                 mov     ds:dword_415470, edx
.text:004104AA
.text:004104AA loc_4104AA:                             ; CODE XREF: sub_410330+156↑j
.text:004104AA                                         ; sub_410330+1EB↓j
.text:004104AA                 cmp     ecx, 4
.text:004104AD                 jnz     loc_4103A0
.text:004104B3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:004104BA                 jz      short loc_4104DC
.text:004104BC
.text:004104BC loc_4104BC:                             ; CODE XREF: sub_410330+1D4↓j
.text:004104BC                                         ; sub_410330+1DC↓j
.text:004104BC                 cmp     ecx, 4
.text:004104BF                 jnz     loc_4103A0
.text:004104C5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:004104CC                 jnz     loc_4103A0
.text:004104D2                 mov     ecx, 12h
.text:004104D7                 jmp     loc_4103B2
.text:004104DC ; ---------------------------------------------------------------------------
.text:004104DC
.text:004104DC loc_4104DC:                             ; CODE XREF: sub_410330+18A↑j
.text:004104DC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:004104E2                 mov     eax, 0Eh
.text:004104E7                 mov     ds:dword_415470, eax
.text:004104EC                 lea     eax, [edx-7CFh]
.text:004104F2                 cmp     eax, 0B7h ; '·'
.text:004104F7                 ja      short loc_410506
.text:004104F9                 mov     edx, 0Fh
.text:004104FE
.text:004104FE loc_4104FE:                             ; CODE XREF: sub_410330+1E3↓j
.text:004104FE                 mov     ds:dword_415470, edx
.text:00410504                 jmp     short loc_4104BC
.text:00410506 ; ---------------------------------------------------------------------------
.text:00410506
.text:00410506 loc_410506:                             ; CODE XREF: sub_410330+1C7↑j
.text:00410506                 cmp     edx, 886h
.text:0041050C                 jbe     short loc_4104BC
.text:0041050E                 mov     edx, 10h
.text:00410513                 jmp     short loc_4104FE
.text:00410515 ; ---------------------------------------------------------------------------
.text:00410515
.text:00410515 loc_410515:                             ; CODE XREF: sub_410330+16D↑j
.text:00410515                 cmp     edx, 438h
.text:0041051B                 jbe     short loc_4104AA
.text:0041051D                 mov     edx, 0Ch
.text:00410522                 jmp     short loc_4104A4
.text:00410524 ; ---------------------------------------------------------------------------
.text:00410524
.text:00410524 loc_410524:                             ; CODE XREF: sub_410330+3C↑j
.text:00410524                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041052C                 xor     edx, edx
.text:0041052E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00410532                 mov     dword_414090, edx
.text:00410538                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041053B                 call    GetVersionExA
.text:00410540                 sub     esp, 4
.text:00410543                 xor     edx, edx
.text:00410545                 test    eax, eax
.text:00410547                 jz      loc_410345
.text:0041054D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00410551                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00410555                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041055B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041055F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00410565                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00410569                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041056F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00410575                 jmp     loc_410372
.text:00410575 sub_410330      endp
.text:00410575
.text:00410575 ; ---------------------------------------------------------------------------
.text:0041057A                 align 10h
.text:00410580
.text:00410580 ; =============== S U B R O U T I N E =======================================
.text:00410580
.text:00410580 ; Attributes: noreturn
.text:00410580
.text:00410580 sub_410580      proc near               ; CODE XREF: .text:0040F169↑p
.text:00410580                                         ; sub_410580↓j
.text:00410580                 jmp     short sub_410580
.text:00410580 sub_410580      endp
.text:00410580
.text:00410580 ; ---------------------------------------------------------------------------
.text:00410582                 align 10h
.text:00410590
.text:00410590 ; =============== S U B R O U T I N E =======================================
.text:00410590
.text:00410590
.text:00410590 sub_410590      proc near               ; CODE XREF: .text:0040EEC5↑p
.text:00410590
.text:00410590 FileHandle      = dword ptr -1Ch
.text:00410590 dwFileOffsetLow = dword ptr -18h
.text:00410590 dwFileOffsetHigh= dword ptr -14h
.text:00410590 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:00410590 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:00410590 var_8           = dword ptr -8
.text:00410590 var_4           = dword ptr -4
.text:00410590 arg_0           = dword ptr  4
.text:00410590
.text:00410590                 sub     esp, 1Ch
.text:00410593                 mov     edx, [esp+1Ch+arg_0]
.text:00410597                 mov     [esp+1Ch+var_4], esi
.text:0041059B                 mov     [esp+1Ch+var_8], ebx
.text:0041059F                 mov     ebx, [edx+10h]
.text:004105A2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004105A5                 call    _get_osfhandle
.text:004105AA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004105AD                 mov     esi, eax
.text:004105AF                 call    _filelengthi64
.text:004105B4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:004105B8                 cdq
.text:004105B9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:004105BC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:004105C0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:004105C8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:004105D0                 call    UnlockFile
.text:004105D5                 sub     esp, 14h
.text:004105D8                 mov     ebx, [esp+1Ch+var_8]
.text:004105DC                 mov     esi, [esp+1Ch+var_4]
.text:004105E0                 add     esp, 1Ch
.text:004105E3                 retn
.text:004105E3 sub_410590      endp
.text:004105E3
.text:004105E3 ; ---------------------------------------------------------------------------
.text:004105E4                 align 10h
.text:004105F0
.text:004105F0 ; =============== S U B R O U T I N E =======================================
.text:004105F0
.text:004105F0
.text:004105F0 ; int __cdecl sub_4105F0(int, char *Control)
.text:004105F0 sub_4105F0      proc near               ; CODE XREF: .text:0040ED86↑p
.text:004105F0                                         ; .text:0040EDD6↑p ...
.text:004105F0
.text:004105F0 Str             = dword ptr -1Ch
.text:004105F0 Val             = dword ptr -18h
.text:004105F0 var_8           = dword ptr -8
.text:004105F0 var_4           = dword ptr -4
.text:004105F0 arg_0           = dword ptr  4
.text:004105F0 Control         = dword ptr  8
.text:004105F0
.text:004105F0                 sub     esp, 1Ch
.text:004105F3                 xor     eax, eax
.text:004105F5                 mov     edx, [esp+1Ch+Control]
.text:004105F9                 mov     [esp+1Ch+var_4], esi
.text:004105FD                 mov     esi, [esp+1Ch+arg_0]
.text:00410601                 mov     [esp+1Ch+var_8], ebx
.text:00410605                 mov     ebx, [esi]
.text:00410607                 test    ebx, ebx
.text:00410609                 jz      short loc_410638
.text:0041060B                 movzx   eax, byte ptr [edx]
.text:0041060E                 test    al, al
.text:00410610                 jz      short loc_410630
.text:00410612                 cmp     byte ptr [edx+1], 0
.text:00410616                 jnz     short loc_410670
.text:00410618                 movzx   ecx, byte ptr [ebx]
.text:0041061B                 mov     edx, ebx
.text:0041061D                 cmp     cl, al
.text:0041061F                 jz      short loc_410662
.text:00410621                 test    cl, cl
.text:00410623                 jnz     short loc_410644
.text:00410625                 lea     esi, [esi+0]
.text:00410629                 lea     edi, [edi+0]
.text:00410630
.text:00410630 loc_410630:                             ; CODE XREF: sub_4105F0+20↑j
.text:00410630                                         ; sub_4105F0+74↓j
.text:00410630                 mov     dword ptr [esi], 0
.text:00410636
.text:00410636 loc_410636:                             ; CODE XREF: sub_4105F0+7C↓j
.text:00410636                 mov     eax, ebx
.text:00410638
.text:00410638 loc_410638:                             ; CODE XREF: sub_4105F0+19↑j
.text:00410638                 mov     ebx, [esp+1Ch+var_8]
.text:0041063C                 mov     esi, [esp+1Ch+var_4]
.text:00410640                 add     esp, 1Ch
.text:00410643                 retn
.text:00410644 ; ---------------------------------------------------------------------------
.text:00410644
.text:00410644 loc_410644:                             ; CODE XREF: sub_4105F0+33↑j
.text:00410644                 movsx   edx, al
.text:00410647                 mov     [esp+1Ch+Val], edx ; Val
.text:0041064B                 lea     edx, [ebx+1]
.text:0041064E                 mov     [esp+1Ch+Str], edx ; Str
.text:00410651                 call    strchr
.text:00410656                 lea     esi, [esi+0]
.text:00410659                 lea     edi, [edi+0]
.text:00410660
.text:00410660 loc_410660:                             ; CODE XREF: sub_4105F0+8C↓j
.text:00410660                 mov     edx, eax
.text:00410662
.text:00410662 loc_410662:                             ; CODE XREF: sub_4105F0+2F↑j
.text:00410662                 test    edx, edx
.text:00410664                 jz      short loc_410630
.text:00410666                 mov     byte ptr [edx], 0
.text:00410669                 inc     edx
.text:0041066A                 mov     [esi], edx
.text:0041066C                 jmp     short loc_410636
.text:0041066C ; ---------------------------------------------------------------------------
.text:0041066E                 align 10h
.text:00410670
.text:00410670 loc_410670:                             ; CODE XREF: sub_4105F0+26↑j
.text:00410670                 mov     [esp+1Ch+Val], edx ; Control
.text:00410674                 mov     [esp+1Ch+Str], ebx ; Str
.text:00410677                 call    strpbrk
.text:0041067C                 jmp     short loc_410660
.text:0041067C sub_4105F0      endp
.text:0041067C
.text:0041067C ; ---------------------------------------------------------------------------
.text:0041067E                 align 10h
.text:00410680 ; const char aTmpf[]
.text:00410680 aTmpf           db 'tmpf',0             ; DATA XREF: sub_410690+20↓o
.text:00410685 ; const char aWBd[]
.text:00410685 aWBd            db 'w+bD',0             ; DATA XREF: sub_410690+5E↓o
.text:0041068A                 align 10h
.text:00410690
.text:00410690 ; =============== S U B R O U T I N E =======================================
.text:00410690
.text:00410690
.text:00410690 sub_410690      proc near               ; CODE XREF: sub_40F7FF+A4↑p
.text:00410690
.text:00410690 FileHandle      = dword ptr -13Ch
.text:00410690 Format          = dword ptr -138h
.text:00410690 var_134         = dword ptr -134h
.text:00410690 var_130         = dword ptr -130h
.text:00410690 var_12C         = dword ptr -12Ch
.text:00410690 Buffer          = byte ptr -11Ch
.text:00410690 var_8           = dword ptr -8
.text:00410690 var_4           = dword ptr -4
.text:00410690
.text:00410690                 sub     esp, 13Ch
.text:00410696                 mov     [esp+13Ch+var_8], ebx
.text:0041069D                 lea     ebx, [esp+13Ch+Buffer]
.text:004106A1                 mov     [esp+13Ch+var_4], esi
.text:004106A8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:004106B0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:004106B8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:004106C0                 mov     [esp+13Ch+Format], 104h ; int
.text:004106C8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:004106CB                 call    sub_410760
.text:004106D0                 xor     edx, edx
.text:004106D2                 test    eax, eax
.text:004106D4                 jnz     short loc_410706
.text:004106D6                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:004106D9                 mov     [esp+13Ch+Format], 0 ; int
.text:004106E1                 call    sub_410AE0
.text:004106E6                 xor     edx, edx
.text:004106E8                 mov     ebx, eax
.text:004106EA                 test    eax, eax
.text:004106EC                 js      short loc_410706
.text:004106EE                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:004106F6                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:004106F9                 call    _fdopen
.text:004106FE                 test    eax, eax
.text:00410700                 mov     esi, eax
.text:00410702                 jz      short loc_41071D
.text:00410704
.text:00410704 loc_410704:                             ; CODE XREF: sub_410690+95↓j
.text:00410704                 mov     edx, esi
.text:00410706
.text:00410706 loc_410706:                             ; CODE XREF: sub_410690+44↑j
.text:00410706                                         ; sub_410690+5C↑j
.text:00410706                 mov     ebx, [esp+13Ch+var_8]
.text:0041070D                 mov     eax, edx
.text:0041070F                 mov     esi, [esp+13Ch+var_4]
.text:00410716                 add     esp, 13Ch
.text:0041071C                 retn
.text:0041071D ; ---------------------------------------------------------------------------
.text:0041071D
.text:0041071D loc_41071D:                             ; CODE XREF: sub_410690+72↑j
.text:0041071D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:00410720                 call    _close_0
.text:00410725                 jmp     short loc_410704
.text:00410725 sub_410690      endp
.text:00410725
.text:00410725 ; ---------------------------------------------------------------------------
.text:00410727                 align 10h
.text:00410730 aFile           db 'file',0             ; DATA XREF: sub_410760:loc_41078C↓o
.text:00410735 ; const char aSSxxxxxx[]
.text:00410735 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_410760+9B↓o
.text:00410745 ; const char aTemp[]
.text:00410745 aTemp           db 'TEMP',0             ; DATA XREF: sub_410760:loc_410842↓o
.text:00410745                                         ; sub_410760:loc_410882↓o ...
.text:0041074A ; const char aTmp[]
.text:0041074A aTmp            db '/tmp',0             ; DATA XREF: sub_410760+12F↓o
.text:0041074A                                         ; sub_410760+141↓o ...
.text:0041074F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_410760:loc_410900↓o
.text:00410756 aTmp_0          db 'TMP',0              ; DATA XREF: sub_410760:loc_410990↓o
.text:0041075A                 align 10h
.text:00410760
.text:00410760 ; =============== S U B R O U T I N E =======================================
.text:00410760
.text:00410760
.text:00410760 ; int __cdecl sub_410760(char *Buffer, int, char *, char *, int)
.text:00410760 sub_410760      proc near               ; CODE XREF: sub_410690+3B↑p
.text:00410760
.text:00410760 Str             = dword ptr -1BCh
.text:00410760 Format          = dword ptr -1B8h
.text:00410760 var_1B4         = dword ptr -1B4h
.text:00410760 var_1B0         = dword ptr -1B0h
.text:00410760 var_1AC         = dword ptr -1ACh
.text:00410760 var_1A8         = dword ptr -1A8h
.text:00410760 var_19C         = dword ptr -19Ch
.text:00410760 var_13C         = dword ptr -13Ch
.text:00410760 var_DC          = dword ptr -0DCh
.text:00410760 var_7C          = dword ptr -7Ch
.text:00410760 Buffer          = dword ptr  4
.text:00410760 arg_4           = dword ptr  8
.text:00410760 arg_8           = dword ptr  0Ch
.text:00410760 arg_C           = dword ptr  10h
.text:00410760 arg_10          = dword ptr  14h
.text:00410760
.text:00410760                 push    ebp
.text:00410761                 push    edi
.text:00410762                 push    esi
.text:00410763                 push    ebx
.text:00410764                 sub     esp, 1ACh
.text:0041076A                 mov     eax, [esp+1BCh+arg_C]
.text:00410771                 mov     esi, [esp+1BCh+arg_8]
.text:00410778                 test    eax, eax
.text:0041077A                 jz      short loc_41078C
.text:0041077C                 mov     edx, [esp+1BCh+arg_C]
.text:00410783                 cmp     byte ptr [edx], 0
.text:00410786                 jnz     loc_4109C0
.text:0041078C
.text:0041078C loc_41078C:                             ; CODE XREF: sub_410760+1A↑j
.text:0041078C                 mov     eax, offset aFile ; "file"
.text:00410791                 mov     ebp, 4
.text:00410796                 mov     [esp+1BCh+arg_C], eax
.text:0041079D
.text:0041079D loc_41079D:                             ; CODE XREF: sub_410760+274↓j
.text:0041079D                                         ; sub_410760+27F↓j
.text:0041079D                 mov     ebx, [esp+1BCh+arg_10]
.text:004107A4                 test    ebx, ebx
.text:004107A6                 jnz     loc_410900
.text:004107AC
.text:004107AC loc_4107AC:                             ; CODE XREF: sub_410760+21C↓j
.text:004107AC                                         ; sub_410760+224↓j ...
.text:004107AC                 test    esi, esi
.text:004107AE                 jz      loc_410842
.text:004107B4
.text:004107B4 loc_4107B4:                             ; CODE XREF: sub_410760+176↓j
.text:004107B4                                         ; sub_410760+19A↓j
.text:004107B4                 mov     [esp+1BCh+Str], esi ; Str
.text:004107B7                 call    strlen
.text:004107BC                 test    eax, eax
.text:004107BE                 mov     edx, eax
.text:004107C0                 jz      short loc_4107D0
.text:004107C2                 movzx   eax, byte ptr [eax+esi-1]
.text:004107C7                 cmp     al, 2Fh ; '/'
.text:004107C9                 jz      short loc_410830
.text:004107CB                 cmp     al, 5Ch ; '\'
.text:004107CD                 jz      short loc_410830
.text:004107CF                 nop
.text:004107D0
.text:004107D0 loc_4107D0:                             ; CODE XREF: sub_410760+60↑j
.text:004107D0                                         ; sub_410760+D1↓j ...
.text:004107D0                 lea     edi, [ebp+edx+8]
.text:004107D4                 cmp     [esp+1BCh+arg_4], edi
.text:004107DB                 jb      short loc_410818
.text:004107DD                 mov     [esp+1BCh+var_1AC], ebp
.text:004107E1                 mov     ecx, [esp+1BCh+arg_C]
.text:004107E8                 mov     ebp, [esp+1BCh+Buffer]
.text:004107EF                 mov     [esp+1BCh+var_1B0], esi
.text:004107F3                 mov     [esp+1BCh+var_1A8], ecx
.text:004107F7                 mov     [esp+1BCh+var_1B4], edx
.text:004107FB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00410803                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00410806                 call    sprintf
.text:0041080B                 xor     eax, eax
.text:0041080D
.text:0041080D loc_41080D:                             ; CODE XREF: sub_410760+C8↓j
.text:0041080D                 add     esp, 1ACh
.text:00410813                 pop     ebx
.text:00410814                 pop     esi
.text:00410815                 pop     edi
.text:00410816                 pop     ebp
.text:00410817                 retn
.text:00410818 ; ---------------------------------------------------------------------------
.text:00410818
.text:00410818 loc_410818:                             ; CODE XREF: sub_410760+7B↑j
.text:00410818                 call    _errno
.text:0041081D                 mov     dword ptr [eax], 16h
.text:00410823
.text:00410823 loc_410823:                             ; CODE XREF: sub_410760+187↓j
.text:00410823                 mov     eax, 0FFFFFFFFh
.text:00410828                 jmp     short loc_41080D
.text:00410828 ; ---------------------------------------------------------------------------
.text:0041082A                 align 10h
.text:00410830
.text:00410830 loc_410830:                             ; CODE XREF: sub_410760+69↑j
.text:00410830                                         ; sub_410760+6D↑j ...
.text:00410830                 dec     edx
.text:00410831                 jz      short loc_4107D0
.text:00410833                 movzx   eax, byte ptr [edx+esi-1]
.text:00410838                 cmp     al, 2Fh ; '/'
.text:0041083A                 jz      short loc_410830
.text:0041083C                 cmp     al, 5Ch ; '\'
.text:0041083E                 jz      short loc_410830
.text:00410840                 jmp     short loc_4107D0
.text:00410842 ; ---------------------------------------------------------------------------
.text:00410842
.text:00410842 loc_410842:                             ; CODE XREF: sub_410760+4E↑j
.text:00410842                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410849                 lea     esi, [esp+1BCh+var_13C]
.text:00410850                 call    getenv
.text:00410855                 mov     [esp+1BCh+Format], eax ; char *
.text:00410859                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041085D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410864                 call    sub_40AC20
.text:00410869                 test    eax, eax
.text:0041086B                 jnz     short loc_410882
.text:0041086D                 mov     edi, [esp+1BCh+var_13C]
.text:00410874                 and     edi, 0F000h
.text:0041087A                 cmp     edi, 4000h
.text:00410880                 jz      short loc_4108EC
.text:00410882
.text:00410882 loc_410882:                             ; CODE XREF: sub_410760+10B↑j
.text:00410882                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00410889                 call    getenv
.text:0041088E                 cld
.text:0041088F                 mov     edx, offset aTmp ; "/tmp"
.text:00410894                 mov     esi, eax
.text:00410896                 mov     ecx, 5
.text:0041089B                 mov     edi, edx
.text:0041089D                 repe cmpsb
.text:0041089F                 jz      short loc_4108DC
.text:004108A1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:004108A9                 lea     ecx, [esp+1BCh+var_19C]
.text:004108AD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:004108B1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004108B8                 call    sub_40AC20
.text:004108BD                 test    eax, eax
.text:004108BF                 jnz     short loc_4108DC
.text:004108C1                 mov     ebx, [esp+1BCh+var_19C]
.text:004108C5                 mov     esi, offset aTmp ; "/tmp"
.text:004108CA                 and     ebx, 0F000h
.text:004108D0                 cmp     ebx, 4000h
.text:004108D6                 jz      loc_4107B4
.text:004108DC
.text:004108DC loc_4108DC:                             ; CODE XREF: sub_410760+13F↑j
.text:004108DC                                         ; sub_410760+15F↑j
.text:004108DC                 call    _errno
.text:004108E1                 mov     dword ptr [eax], 2
.text:004108E7                 jmp     loc_410823
.text:004108EC ; ---------------------------------------------------------------------------
.text:004108EC
.text:004108EC loc_4108EC:                             ; CODE XREF: sub_410760+120↑j
.text:004108EC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004108F3                 call    getenv
.text:004108F8                 mov     esi, eax
.text:004108FA                 jmp     loc_4107B4
.text:004108FA ; ---------------------------------------------------------------------------
.text:004108FF                 align 10h
.text:00410900
.text:00410900 loc_410900:                             ; CODE XREF: sub_410760+46↑j
.text:00410900                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00410907                 call    sub_410FF0
.text:0041090C                 test    eax, eax
.text:0041090E                 mov     ebx, eax
.text:00410910                 jz      short loc_410990
.text:00410912
.text:00410912 loc_410912:                             ; CODE XREF: sub_410760+240↓j
.text:00410912                                         ; sub_410760+256↓j
.text:00410912                 mov     [esp+1BCh+Format], ebx ; char *
.text:00410916                 lea     edi, [esp+1BCh+var_7C]
.text:0041091D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00410921                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410928                 call    sub_40AC20
.text:0041092D                 test    eax, eax
.text:0041092F                 jnz     short loc_410946
.text:00410931                 mov     edx, [esp+1BCh+var_7C]
.text:00410938                 and     edx, 0F000h
.text:0041093E                 cmp     edx, 4000h
.text:00410944                 jz      short loc_410989
.text:00410946
.text:00410946 loc_410946:                             ; CODE XREF: sub_410760+1CF↑j
.text:00410946                                         ; sub_410760+25C↓j
.text:00410946                 test    esi, esi
.text:00410948                 jz      short loc_410982
.text:0041094A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041094E                 lea     ecx, [esp+1BCh+var_DC]
.text:00410955                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00410959                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00410960                 call    sub_40AC20
.text:00410965                 test    eax, eax
.text:00410967                 jnz     short loc_410982
.text:00410969                 mov     ebx, [esp+1BCh+var_DC]
.text:00410970                 and     ebx, 0F000h
.text:00410976                 cmp     ebx, 4000h
.text:0041097C                 jz      loc_4107AC
.text:00410982
.text:00410982 loc_410982:                             ; CODE XREF: sub_410760+1E8↑j
.text:00410982                                         ; sub_410760+207↑j
.text:00410982                 xor     esi, esi
.text:00410984                 jmp     loc_4107AC
.text:00410989 ; ---------------------------------------------------------------------------
.text:00410989
.text:00410989 loc_410989:                             ; CODE XREF: sub_410760+1E4↑j
.text:00410989                 mov     esi, ebx
.text:0041098B                 jmp     loc_4107AC
.text:00410990 ; ---------------------------------------------------------------------------
.text:00410990
.text:00410990 loc_410990:                             ; CODE XREF: sub_410760+1B0↑j
.text:00410990                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00410997                 call    sub_410FF0
.text:0041099C                 test    eax, eax
.text:0041099E                 mov     ebx, eax
.text:004109A0                 jnz     loc_410912
.text:004109A6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004109AD                 call    sub_410FF0
.text:004109B2                 test    eax, eax
.text:004109B4                 mov     ebx, eax
.text:004109B6                 jnz     loc_410912
.text:004109BC                 jmp     short loc_410946
.text:004109BC ; ---------------------------------------------------------------------------
.text:004109BE                 align 10h
.text:004109C0
.text:004109C0 loc_4109C0:                             ; CODE XREF: sub_410760+26↑j
.text:004109C0                 mov     ecx, [esp+1BCh+arg_C]
.text:004109C7                 mov     [esp+1BCh+Str], ecx ; Str
.text:004109CA                 call    strlen
.text:004109CF                 cmp     eax, 5
.text:004109D2                 mov     ebp, eax
.text:004109D4                 jbe     loc_41079D
.text:004109DA                 mov     ebp, 5
.text:004109DF                 jmp     loc_41079D
.text:004109DF sub_410760      endp
.text:004109DF
.text:004109DF ; ---------------------------------------------------------------------------
.text:004109E4                 align 10h
.text:004109F0 byte_4109F0     db 61h                  ; DATA XREF: sub_410AE0+DC↓r
.text:004109F0                                         ; sub_410AE0+122↓r ...
.text:004109F1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:00410A2F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_410AE0+39↓o
.text:00410A36                 db 1Ah dup(90h)
.text:00410A50 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00410A50                                         ; DATA XREF: sub_410AE0:loc_410D58↓o
.text:00410A6F                 align 10h
.text:00410A70 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00410A70                                         ; DATA XREF: sub_410AE0+405↓o
.text:00410A9B                 db 15h dup(90h)
.text:00410AB0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00410AB0                                         ; DATA XREF: sub_410AE0+40D↓o
.text:00410AD3                 align 10h
.text:00410AE0
.text:00410AE0 ; =============== S U B R O U T I N E =======================================
.text:00410AE0
.text:00410AE0
.text:00410AE0 ; int __cdecl sub_410AE0(char *FileName, int)
.text:00410AE0 sub_410AE0      proc near               ; CODE XREF: sub_410690+51↑p
.text:00410AE0
.text:00410AE0 Str             = dword ptr -9Ch
.text:00410AE0 OpenFlag        = dword ptr -98h
.text:00410AE0 var_94          = dword ptr -94h
.text:00410AE0 var_90          = dword ptr -90h
.text:00410AE0 var_8C          = dword ptr -8Ch
.text:00410AE0 var_88          = dword ptr -88h
.text:00410AE0 var_84          = dword ptr -84h
.text:00410AE0 var_80          = dword ptr -80h
.text:00410AE0 var_7C          = dword ptr -7Ch
.text:00410AE0 FileName        = dword ptr  4
.text:00410AE0 arg_4           = dword ptr  8
.text:00410AE0
.text:00410AE0                 push    ebp
.text:00410AE1                 push    edi
.text:00410AE2                 push    esi
.text:00410AE3                 push    ebx
.text:00410AE4                 sub     esp, 8Ch
.text:00410AEA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00410AF2                 call    _errno
.text:00410AF7                 mov     edx, [eax]
.text:00410AF9                 mov     [esp+9Ch+var_8C], edx
.text:00410AFD                 mov     edx, [esp+9Ch+FileName]
.text:00410B04                 mov     [esp+9Ch+Str], edx ; Str
.text:00410B07                 call    strlen
.text:00410B0C                 cmp     eax, 5
.text:00410B0F                 jle     short loc_410B2D
.text:00410B11                 cld
.text:00410B12                 mov     ecx, [esp+9Ch+FileName]
.text:00410B19                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:00410B1E                 lea     esi, [eax+ecx-6]
.text:00410B22                 mov     ecx, 7
.text:00410B27                 mov     ebp, esi
.text:00410B29                 repe cmpsb
.text:00410B2B                 jz      short loc_410B48
.text:00410B2D
.text:00410B2D loc_410B2D:                             ; CODE XREF: sub_410AE0+2F↑j
.text:00410B2D                 call    _errno
.text:00410B32                 mov     dword ptr [eax], 16h
.text:00410B38
.text:00410B38 loc_410B38:                             ; CODE XREF: sub_410AE0+295↓j
.text:00410B38                                         ; sub_410AE0+2D8↓j ...
.text:00410B38                 mov     eax, 0FFFFFFFFh
.text:00410B3D
.text:00410B3D loc_410B3D:                             ; CODE XREF: sub_410AE0+2EF↓j
.text:00410B3D                                         ; sub_410AE0+332↓j
.text:00410B3D                 add     esp, 8Ch
.text:00410B43                 pop     ebx
.text:00410B44                 pop     esi
.text:00410B45                 pop     edi
.text:00410B46                 pop     ebp
.text:00410B47                 retn
.text:00410B48 ; ---------------------------------------------------------------------------
.text:00410B48
.text:00410B48 loc_410B48:                             ; CODE XREF: sub_410AE0+4B↑j
.text:00410B48                 mov     ecx, ds:dword_415534
.text:00410B4E                 mov     edi, ds:dword_415530
.text:00410B54                 mov     eax, ecx
.text:00410B56                 or      eax, edi
.text:00410B58                 jz      loc_410E93
.text:00410B5E
.text:00410B5E loc_410B5E:                             ; CODE XREF: sub_410AE0+3F8↓j
.text:00410B5E                 rdtsc
.text:00410B60                 mov     edi, edx
.text:00410B62                 mov     esi, eax
.text:00410B64                 call    _getpid
.text:00410B69                 mov     ebx, eax
.text:00410B6B                 mov     edx, esi
.text:00410B6D                 sar     ebx, 1Fh
.text:00410B70                 xor     edx, eax
.text:00410B72                 mov     ecx, edi
.text:00410B74                 xor     ecx, ebx
.text:00410B76                 mov     ebx, edx
.text:00410B78                 mov     esi, ecx
.text:00410B7A                 add     ebx, ds:dword_415530
.text:00410B80                 adc     esi, ds:dword_415534
.text:00410B86                 xor     edi, edi
.text:00410B88                 mov     ds:dword_415530, ebx
.text:00410B8E                 mov     ds:dword_415534, esi
.text:00410B94                 lea     esi, [esi+0]
.text:00410B9A                 lea     edi, [edi+0]
.text:00410BA0
.text:00410BA0 loc_410BA0:                             ; CODE XREF: sub_410AE0+2C7↓j
.text:00410BA0                 mov     [esp+9Ch+Str], ebx
.text:00410BA3                 mov     [esp+9Ch+OpenFlag], esi
.text:00410BA7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410BAF                 mov     [esp+9Ch+var_90], 0
.text:00410BB7                 call    sub_412AE0
.text:00410BBC                 movzx   ecx, ds:byte_4109F0[eax]
.text:00410BC3                 mov     [ebp+0], cl
.text:00410BC6                 mov     [esp+9Ch+Str], ebx
.text:00410BC9                 mov     [esp+9Ch+OpenFlag], esi
.text:00410BCD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410BD5                 mov     [esp+9Ch+var_90], 0
.text:00410BDD                 call    sub_412670
.text:00410BE2                 mov     [esp+9Ch+Str], eax
.text:00410BE5                 mov     ebx, eax
.text:00410BE7                 mov     esi, edx
.text:00410BE9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410BF1                 mov     [esp+9Ch+var_90], 0
.text:00410BF9                 mov     [esp+9Ch+OpenFlag], edx
.text:00410BFD                 call    sub_412AE0
.text:00410C02                 movzx   edx, ds:byte_4109F0[eax]
.text:00410C09                 mov     [ebp+1], dl
.text:00410C0C                 mov     [esp+9Ch+Str], ebx
.text:00410C0F                 mov     [esp+9Ch+OpenFlag], esi
.text:00410C13                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C1B                 mov     [esp+9Ch+var_90], 0
.text:00410C23                 call    sub_412670
.text:00410C28                 mov     [esp+9Ch+Str], eax
.text:00410C2B                 mov     ebx, eax
.text:00410C2D                 mov     esi, edx
.text:00410C2F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C37                 mov     [esp+9Ch+var_90], 0
.text:00410C3F                 mov     [esp+9Ch+OpenFlag], edx
.text:00410C43                 call    sub_412AE0
.text:00410C48                 movzx   ecx, ds:byte_4109F0[eax]
.text:00410C4F                 mov     [ebp+2], cl
.text:00410C52                 mov     [esp+9Ch+Str], ebx
.text:00410C55                 mov     [esp+9Ch+OpenFlag], esi
.text:00410C59                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C61                 mov     [esp+9Ch+var_90], 0
.text:00410C69                 call    sub_412670
.text:00410C6E                 mov     [esp+9Ch+Str], eax
.text:00410C71                 mov     ebx, eax
.text:00410C73                 mov     esi, edx
.text:00410C75                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410C7D                 mov     [esp+9Ch+var_90], 0
.text:00410C85                 mov     [esp+9Ch+OpenFlag], edx
.text:00410C89                 call    sub_412AE0
.text:00410C8E                 movzx   edx, ds:byte_4109F0[eax]
.text:00410C95                 mov     [ebp+3], dl
.text:00410C98                 mov     [esp+9Ch+Str], ebx
.text:00410C9B                 mov     [esp+9Ch+OpenFlag], esi
.text:00410C9F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410CA7                 mov     [esp+9Ch+var_90], 0
.text:00410CAF                 call    sub_412670
.text:00410CB4                 mov     [esp+9Ch+Str], eax
.text:00410CB7                 mov     ebx, eax
.text:00410CB9                 mov     esi, edx
.text:00410CBB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410CC3                 mov     [esp+9Ch+var_90], 0
.text:00410CCB                 mov     [esp+9Ch+OpenFlag], edx
.text:00410CCF                 call    sub_412AE0
.text:00410CD4                 movzx   ecx, ds:byte_4109F0[eax]
.text:00410CDB                 mov     [ebp+4], cl
.text:00410CDE                 mov     [esp+9Ch+Str], ebx
.text:00410CE1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410CE9                 mov     [esp+9Ch+var_90], 0
.text:00410CF1                 mov     [esp+9Ch+OpenFlag], esi
.text:00410CF5                 call    sub_412670
.text:00410CFA                 mov     [esp+9Ch+Str], eax
.text:00410CFD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00410D05                 mov     [esp+9Ch+var_90], 0
.text:00410D0D                 mov     [esp+9Ch+OpenFlag], edx
.text:00410D11                 call    sub_412AE0
.text:00410D16                 movzx   ebx, ds:byte_4109F0[eax]
.text:00410D1D                 mov     [ebp+5], bl
.text:00410D20                 cmp     [esp+9Ch+arg_4], 1
.text:00410D28                 jz      loc_410E77
.text:00410D2E                 cmp     [esp+9Ch+arg_4], 1
.text:00410D36                 jle     loc_410E40
.text:00410D3C                 cmp     [esp+9Ch+arg_4], 2
.text:00410D44                 jz      loc_410E17
.text:00410D4A                 cmp     [esp+9Ch+arg_4], 3
.text:00410D52                 jz      loc_410DD4
.text:00410D58
.text:00410D58 loc_410D58:                             ; CODE XREF: sub_410AE0+369↓j
.text:00410D58                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:00410D5D                 test    ebx, ebx
.text:00410D5F                 jnz     loc_410EDD
.text:00410D65
.text:00410D65 loc_410D65:                             ; CODE XREF: sub_410AE0+354↓j
.text:00410D65                 mov     eax, [esp+9Ch+var_88]
.text:00410D69                 test    eax, eax
.text:00410D6B                 jns     short loc_410DC0
.text:00410D6D                 call    _errno
.text:00410D72                 cmp     dword ptr [eax], 11h
.text:00410D75                 jnz     loc_410B38
.text:00410D7B
.text:00410D7B loc_410D7B:                             ; CODE XREF: sub_410AE0+315↓j
.text:00410D7B                 mov     edx, ds:dword_415530
.text:00410D81                 mov     ecx, ds:dword_415534
.text:00410D87                 add     edx, 1E61h
.text:00410D8D                 adc     ecx, 0
.text:00410D90                 mov     ebx, edx
.text:00410D92                 inc     edi
.text:00410D93                 mov     ds:dword_415530, edx
.text:00410D99                 cmp     edi, 3A2F8h
.text:00410D9F                 mov     esi, ecx
.text:00410DA1                 mov     ds:dword_415534, ecx
.text:00410DA7                 jb      loc_410BA0
.text:00410DAD                 call    _errno
.text:00410DB2                 mov     dword ptr [eax], 11h
.text:00410DB8                 jmp     loc_410B38
.text:00410DB8 ; ---------------------------------------------------------------------------
.text:00410DBD                 align 10h
.text:00410DC0
.text:00410DC0 loc_410DC0:                             ; CODE XREF: sub_410AE0+28B↑j
.text:00410DC0                 call    _errno
.text:00410DC5                 mov     esi, [esp+9Ch+var_8C]
.text:00410DC9                 mov     [eax], esi
.text:00410DCB                 mov     eax, [esp+9Ch+var_88]
.text:00410DCF                 jmp     loc_410B3D
.text:00410DD4 ; ---------------------------------------------------------------------------
.text:00410DD4
.text:00410DD4 loc_410DD4:                             ; CODE XREF: sub_410AE0+272↑j
.text:00410DD4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:00410DDB                 mov     ecx, [esp+9Ch+FileName]
.text:00410DE2                 lea     esi, [esp+9Ch+var_7C]
.text:00410DE6                 mov     [esp+9Ch+var_94], esi ; int
.text:00410DEA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:00410DEE                 call    sub_40AAF0
.text:00410DF3                 test    eax, eax
.text:00410DF5                 jns     short loc_410D7B
.text:00410DF7                 call    _errno
.text:00410DFC                 cmp     dword ptr [eax], 2
.text:00410DFF                 jnz     loc_410B38
.text:00410E05                 call    _errno
.text:00410E0A                 mov     ebx, [esp+9Ch+var_8C]
.text:00410E0E                 mov     [eax], ebx
.text:00410E10                 xor     eax, eax
.text:00410E12                 jmp     loc_410B3D
.text:00410E17 ; ---------------------------------------------------------------------------
.text:00410E17
.text:00410E17 loc_410E17:                             ; CODE XREF: sub_410AE0+264↑j
.text:00410E17                 mov     [esp+9Ch+OpenFlag], 1C0h ; int
.text:00410E1F                 mov     edx, [esp+9Ch+FileName]
.text:00410E26                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00410E29                 call    sub_410F10
.text:00410E2E                 mov     esi, esi
.text:00410E30
.text:00410E30 loc_410E30:                             ; CODE XREF: sub_410AE0+395↓j
.text:00410E30                 mov     [esp+9Ch+var_88], eax
.text:00410E34                 jmp     loc_410D65
.text:00410E34 ; ---------------------------------------------------------------------------
.text:00410E39                 align 10h
.text:00410E40
.text:00410E40 loc_410E40:                             ; CODE XREF: sub_410AE0+256↑j
.text:00410E40                 mov     eax, [esp+9Ch+arg_4]
.text:00410E47                 test    eax, eax
.text:00410E49                 jnz     loc_410D58
.text:00410E4F                 mov     [esp+9Ch+var_94], 180h
.text:00410E57                 mov     esi, [esp+9Ch+FileName]
.text:00410E5E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00410E66                 mov     [esp+9Ch+Str], esi ; FileName
.text:00410E69                 lea     esi, [esi+0]
.text:00410E70
.text:00410E70 loc_410E70:                             ; CODE XREF: sub_410AE0+3B1↓j
.text:00410E70                 call    _open_0
.text:00410E75                 jmp     short loc_410E30
.text:00410E77 ; ---------------------------------------------------------------------------
.text:00410E77
.text:00410E77 loc_410E77:                             ; CODE XREF: sub_410AE0+248↑j
.text:00410E77                 mov     [esp+9Ch+var_94], 180h
.text:00410E7F                 mov     ebx, [esp+9Ch+FileName]
.text:00410E86                 mov     [esp+9Ch+OpenFlag], 8502h
.text:00410E8E                 mov     [esp+9Ch+Str], ebx
.text:00410E91                 jmp     short loc_410E70
.text:00410E93 ; ---------------------------------------------------------------------------
.text:00410E93
.text:00410E93 loc_410E93:                             ; CODE XREF: sub_410AE0+78↑j
.text:00410E93                 mov     [esp+9Ch+OpenFlag], 0
.text:00410E9B                 lea     ebx, [esp+9Ch+var_84]
.text:00410E9F                 mov     [esp+9Ch+Str], ebx
.text:00410EA2                 call    sub_410F90
.text:00410EA7                 mov     edi, [esp+9Ch+var_80]
.text:00410EAB                 mov     edx, [esp+9Ch+var_84]
.text:00410EAF                 mov     ecx, edi
.text:00410EB1                 mov     ebx, edi
.text:00410EB3                 shl     ecx, 10h
.text:00410EB6                 sar     ebx, 1Fh
.text:00410EB9                 shld    ebx, edi, 10h
.text:00410EBD                 mov     esi, edx
.text:00410EBF                 mov     edi, edx
.text:00410EC1                 mov     edx, ecx
.text:00410EC3                 sar     edi, 1Fh
.text:00410EC6                 xor     edx, esi
.text:00410EC8                 mov     ds:dword_415530, edx
.text:00410ECE                 mov     esi, ebx
.text:00410ED0                 xor     esi, edi
.text:00410ED2                 mov     ds:dword_415534, esi
.text:00410ED8                 jmp     loc_410B5E
.text:00410EDD ; ---------------------------------------------------------------------------
.text:00410EDD
.text:00410EDD loc_410EDD:                             ; CODE XREF: sub_410AE0+27F↑j
.text:00410EDD                 mov     [esp+9Ch+var_94], 151h
.text:00410EE5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:00410EED                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00410EF4                 call    _assert
.text:00410EF4 sub_410AE0      endp
.text:00410EF4
.text:00410EF4 ; ---------------------------------------------------------------------------
.text:00410EF9                 db 17h dup(90h)
.text:00410F10
.text:00410F10 ; =============== S U B R O U T I N E =======================================
.text:00410F10
.text:00410F10
.text:00410F10 ; int __cdecl sub_410F10(LPCSTR, int)
.text:00410F10 sub_410F10      proc near               ; CODE XREF: sub_410AE0+349↑p
.text:00410F10
.text:00410F10 lpPathName      = dword ptr -1Ch
.text:00410F10 lpSecurityAttributes= dword ptr -18h
.text:00410F10 var_8           = dword ptr -8
.text:00410F10 var_4           = dword ptr -4
.text:00410F10 arg_0           = dword ptr  4
.text:00410F10 arg_4           = dword ptr  8
.text:00410F10
.text:00410F10                 sub     esp, 1Ch
.text:00410F13                 mov     [esp+1Ch+var_8], ebx
.text:00410F17                 mov     ebx, [esp+1Ch+arg_0]
.text:00410F1B                 mov     [esp+1Ch+var_4], esi
.text:00410F1F                 mov     esi, [esp+1Ch+arg_4]
.text:00410F23                 test    ebx, ebx
.text:00410F25                 jz      short loc_410F75
.text:00410F27                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00410F2F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00410F32                 call    CreateDirectoryA
.text:00410F37                 sub     esp, 8
.text:00410F3A                 test    eax, eax
.text:00410F3C                 jz      short loc_410F56
.text:00410F3E                 mov     [esp+1Ch+arg_4], esi
.text:00410F42                 mov     esi, [esp+1Ch+var_4]
.text:00410F46                 mov     [esp+1Ch+arg_0], ebx
.text:00410F4A                 mov     ebx, [esp+1Ch+var_8]
.text:00410F4E                 add     esp, 1Ch
.text:00410F51                 jmp     _chmod
.text:00410F56 ; ---------------------------------------------------------------------------
.text:00410F56
.text:00410F56 loc_410F56:                             ; CODE XREF: sub_410F10+2C↑j
.text:00410F56                 call    sub_40D110
.text:00410F5B                 mov     esi, eax
.text:00410F5D                 call    _errno
.text:00410F62                 mov     [eax], esi
.text:00410F64
.text:00410F64 loc_410F64:                             ; CODE XREF: sub_410F10+70↓j
.text:00410F64                 mov     ebx, [esp+1Ch+var_8]
.text:00410F68                 mov     eax, 0FFFFFFFFh
.text:00410F6D                 mov     esi, [esp+1Ch+var_4]
.text:00410F71                 add     esp, 1Ch
.text:00410F74                 retn
.text:00410F75 ; ---------------------------------------------------------------------------
.text:00410F75
.text:00410F75 loc_410F75:                             ; CODE XREF: sub_410F10+15↑j
.text:00410F75                 call    _errno
.text:00410F7A                 mov     dword ptr [eax], 16h
.text:00410F80                 jmp     short loc_410F64
.text:00410F80 sub_410F10      endp
.text:00410F80
.text:00410F80 ; ---------------------------------------------------------------------------
.text:00410F82                 align 10h
.text:00410F90
.text:00410F90 ; =============== S U B R O U T I N E =======================================
.text:00410F90
.text:00410F90
.text:00410F90 sub_410F90      proc near               ; CODE XREF: sub_410AE0+3C2↑p
.text:00410F90
.text:00410F90 var_1C          = dword ptr -1Ch
.text:00410F90 var_18          = dword ptr -18h
.text:00410F90 var_C           = dword ptr -0Ch
.text:00410F90 var_8           = dword ptr -8
.text:00410F90 var_4           = dword ptr -4
.text:00410F90 arg_0           = dword ptr  4
.text:00410F90 arg_4           = dword ptr  8
.text:00410F90
.text:00410F90                 sub     esp, 1Ch
.text:00410F93                 mov     edx, [esp+1Ch+arg_4]
.text:00410F97                 mov     [esp+1Ch+var_4], ebx
.text:00410F9B                 mov     ebx, [esp+1Ch+arg_0]
.text:00410F9F                 mov     [esp+1Ch+var_18], edx
.text:00410FA3                 lea     edx, [esp+1Ch+var_C]
.text:00410FA7                 mov     [esp+1Ch+var_1C], edx
.text:00410FAA                 call    sub_40D4C0
.text:00410FAF                 test    eax, eax
.text:00410FB1                 mov     edx, 0FFFFFFFFh
.text:00410FB6                 jnz     short loc_410FDA
.text:00410FB8                 mov     ecx, [esp+1Ch+var_C]
.text:00410FBC                 mov     edx, 10624DD3h
.text:00410FC1                 mov     [ebx], ecx
.text:00410FC3                 mov     ecx, [esp+1Ch+var_8]
.text:00410FC7                 mov     eax, ecx
.text:00410FC9                 imul    edx
.text:00410FCB                 mov     eax, ecx
.text:00410FCD                 sar     eax, 1Fh
.text:00410FD0                 sar     edx, 6
.text:00410FD3                 sub     edx, eax
.text:00410FD5                 mov     [ebx+4], edx
.text:00410FD8                 xor     edx, edx
.text:00410FDA
.text:00410FDA loc_410FDA:                             ; CODE XREF: sub_410F90+26↑j
.text:00410FDA                 mov     ebx, [esp+1Ch+var_4]
.text:00410FDE                 mov     eax, edx
.text:00410FE0                 add     esp, 1Ch
.text:00410FE3                 retn
.text:00410FE3 sub_410F90      endp
.text:00410FE3
.text:00410FE3 ; ---------------------------------------------------------------------------
.text:00410FE4                 align 10h
.text:00410FF0
.text:00410FF0 ; =============== S U B R O U T I N E =======================================
.text:00410FF0
.text:00410FF0
.text:00410FF0 sub_410FF0      proc near               ; CODE XREF: sub_410760+1A7↑p
.text:00410FF0                                         ; sub_410760+237↑p ...
.text:00410FF0                 mov     edx, ds:dword_415540
.text:00410FF6                 test    edx, edx
.text:00410FF8                 jnz     short loc_411000
.text:00410FFA                 jmp     getenv
.text:00410FFA ; ---------------------------------------------------------------------------
.text:00410FFF                 align 10h
.text:00411000
.text:00411000 loc_411000:                             ; CODE XREF: sub_410FF0+8↑j
.text:00411000                 xor     eax, eax
.text:00411002                 retn
.text:00411002 sub_410FF0      endp
.text:00411002
.text:00411002 ; ---------------------------------------------------------------------------
.text:00411003                 align 10h
.text:00411010                 sub     esp, 0Ch
.text:00411013                 mov     [esp+4], ebx
.text:00411017                 mov     [esp+8], esi
.text:0041101B                 xor     esi, esi
.text:0041101D                 call    sub_411070
.text:00411022                 mov     ebx, eax
.text:00411024                 call    sub_40B330
.text:00411029                 cmp     ebx, eax
.text:0041102B                 jz      short loc_411044
.text:0041102D
.text:0041102D loc_41102D:                             ; CODE XREF: .text:00411052↓j
.text:0041102D                 mov     esi, 1
.text:00411032
.text:00411032 loc_411032:                             ; CODE XREF: .text:00411054↓j
.text:00411032                 mov     ds:dword_415540, esi
.text:00411038                 mov     ebx, [esp+4]
.text:0041103C                 mov     esi, [esp+8]
.text:00411040                 add     esp, 0Ch
.text:00411043                 retn
.text:00411044 ; ---------------------------------------------------------------------------
.text:00411044
.text:00411044 loc_411044:                             ; CODE XREF: .text:0041102B↑j
.text:00411044                 call    sub_411060
.text:00411049                 mov     ebx, eax
.text:0041104B                 call    sub_40B320
.text:00411050                 cmp     ebx, eax
.text:00411052                 jnz     short loc_41102D
.text:00411054                 jmp     short loc_411032
.text:00411054 ; ---------------------------------------------------------------------------
.text:00411056                 align 10h
.text:00411060
.text:00411060 ; =============== S U B R O U T I N E =======================================
.text:00411060
.text:00411060
.text:00411060 sub_411060      proc near               ; CODE XREF: .text:loc_411044↑p
.text:00411060                 xor     eax, eax
.text:00411062                 retn
.text:00411062 sub_411060      endp
.text:00411062
.text:00411062 ; ---------------------------------------------------------------------------
.text:00411063                 align 10h
.text:00411070
.text:00411070 ; =============== S U B R O U T I N E =======================================
.text:00411070
.text:00411070
.text:00411070 sub_411070      proc near               ; CODE XREF: .text:0041101D↑p
.text:00411070                 xor     eax, eax
.text:00411072                 retn
.text:00411072 sub_411070      endp
.text:00411072
.text:00411072 ; ---------------------------------------------------------------------------
.text:00411073                 align 10h
.text:00411080
.text:00411080 ; =============== S U B R O U T I N E =======================================
.text:00411080
.text:00411080 ; Attributes: thunk
.text:00411080
.text:00411080 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00411080 OleInitialize   proc near               ; CODE XREF: sub_40D200+1A↑p
.text:00411080
.text:00411080 pvReserved      = dword ptr  4
.text:00411080
.text:00411080                 jmp     ds:__imp_OleInitialize
.text:00411080 OleInitialize   endp
.text:00411080
.text:00411080 ; ---------------------------------------------------------------------------
.text:00411086                 align 10h
.text:00411090
.text:00411090 ; =============== S U B R O U T I N E =======================================
.text:00411090
.text:00411090 ; Attributes: thunk
.text:00411090
.text:00411090 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00411090 CoCreateInstance proc near              ; CODE XREF: sub_40D200+52↑p
.text:00411090
.text:00411090 rclsid          = dword ptr  4
.text:00411090 pUnkOuter       = dword ptr  8
.text:00411090 dwClsContext    = dword ptr  0Ch
.text:00411090 riid            = dword ptr  10h
.text:00411090 ppv             = dword ptr  14h
.text:00411090
.text:00411090                 jmp     ds:__imp_CoCreateInstance
.text:00411090 CoCreateInstance endp
.text:00411090
.text:00411090 ; ---------------------------------------------------------------------------
.text:00411096                 align 10h
.text:004110A0
.text:004110A0 ; =============== S U B R O U T I N E =======================================
.text:004110A0
.text:004110A0 ; Attributes: thunk
.text:004110A0
.text:004110A0 ; void __stdcall CoUninitialize()
.text:004110A0 CoUninitialize  proc near               ; CODE XREF: sub_40D200+14E↑p
.text:004110A0                                         ; sub_40D200+16D↑p
.text:004110A0                 jmp     ds:__imp_CoUninitialize
.text:004110A0 CoUninitialize  endp
.text:004110A0
.text:004110A0 ; ---------------------------------------------------------------------------
.text:004110A6                 align 10h
.text:004110B0                 add     al, 0BAh ; 'º'
.text:004110B2                 retf
.text:004110B2 ; ---------------------------------------------------------------------------
.text:004110B3                 db 7Eh
.text:004110B4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:004110B4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:004110B4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:004110B4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:004110B4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:004110B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:004110B4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:004110B4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:004110B4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:004110B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:004110B4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:004110B4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:004110B4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:004110B4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:004110B4                 dd 0C4426C00h, 330h, 0
.text:004111E8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004111E8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:004111E8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:004111E8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00411238                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411238                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00411238                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00411238                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00411238                 dd 0BA94B00h, 1Bh, 0
.text:00411298                 dd 0C0h, 46000000h, 1Ch, 0
.text:004112A8                 dd 0C0h, 46000000h, 331h, 0
.text:004112B8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004112B8                 dd 312h, 0
.text:004112D8                 dd 0C0h, 46000000h, 30Eh, 0
.text:004112E8                 dd 0C0h, 46000000h, 30Dh, 0
.text:004112F8                 dd 0C0h, 46000000h, 311h, 0
.text:00411308                 dd 0C0h, 46000000h, 313h, 0
.text:00411318                 dd 0C0h, 46000000h, 30Ch, 0
.text:00411328                 dd 0C0h, 46000000h, 30Fh, 0
.text:00411338                 dd 0C0h, 46000000h, 310h, 0
.text:00411348                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411348                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00411378                 dd 0C0h, 46000000h, 319h, 0
.text:00411388                 dd 0C0h, 46000000h, 315h, 0
.text:00411398                 dd 0C0h, 46000000h, 316h, 0
.text:004113A8                 dd 0C0h, 46000000h, 315h, 0
.text:004113B8                 dd 0C0h, 46000000h, 2E005h, 0
.text:004113C8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004113C8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:004113C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00411408                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00411408                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00411408                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00411408                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00411408                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00411408                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00411408                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00411408                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00411408                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00411408                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00411408                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00411408                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411408                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00411408                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00411408                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00411408                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411408                 dd 2DE81h, 0
.text:00411558                 dd 0C0h, 46000000h, 4 dup(0)
.text:00411570                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00411570                 dd 0
.text:00411588                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411588                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00411588                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00411588                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00411588                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00411588                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00411588                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00411588                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00411588                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00411588                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00411588                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00411588                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00411588                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00411588                 dd 10Fh, 0
.text:00411698                 dd 0C0h, 46000000h, 125h, 0
.text:004116A8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:004116A8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:004116A8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:004116E8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:004116E8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004116E8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:004116E8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:004116E8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00411748                 dd 0C0h, 46000000h, 2E012h, 0
.text:00411758                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00411758                 dd 140h, 0
.text:00411778                 dd 0C0h, 46000000h, 1, 0
.text:00411788                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00411788                 dd 71D3400h, 13Dh, 0
.text:004117A8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004117A8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:004117A8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:004117A8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:004117F8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:004117F8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004117F8                 dd 20405h, 0
.text:00411828                 dd 0C0h, 46000000h, 2040Eh, 0
.text:00411838                 dd 0C0h, 46000000h, 20406h, 0
.text:00411848                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00411858                 dd 0C0h, 46000000h, 110h, 0
.text:00411868                 dd 0C0h, 46000000h, 10Eh, 0
.text:00411878                 dd 0C0h, 46000000h, 123h, 0
.text:00411888                 dd 0C0h, 46000000h, 124h, 0
.text:00411898                 dd 0C0h, 46000000h, 13h, 0
.text:004118A8                 dd 0C0h, 46000000h, 14h, 0
.text:004118B8                 dd 0C0h, 46000000h, 15h, 0
.text:004118C8                 dd 0C0h, 46000000h, 20400h, 0
.text:004118D8                 dd 0C0h, 46000000h, 121h, 0
.text:004118E8                 dd 0C0h, 46000000h, 122h, 0
.text:004118F8                 dd 0C0h, 46000000h, 2E011h, 0
.text:00411908                 dd 0C0h, 46000000h, 108h, 0
.text:00411918                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:00411918                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411918                 dd 103h, 0
.text:00411948                 dd 0C0h, 46000000h, 2E000h, 0
.text:00411958                 dd 0C0h, 46000000h, 106h, 0
.text:00411968                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411968                 dd 107h, 0
.text:00411988                 dd 0C0h, 46000000h, 102h, 0
.text:00411998                 dd 0C0h, 46000000h, 104h, 0
.text:004119A8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:004119A8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:004119A8                 dd 105h, 0
.text:004119D8                 dd 0C0h, 46000000h, 13Bh, 0
.text:004119E8                 dd 0C0h, 46000000h, 139h, 0
.text:004119F8                 dd 0C0h, 46000000h, 0Dh, 0
.text:00411A08                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00411A08                 dd 101h, 0
.text:00411A28                 dd 0C0h, 46000000h, 100h, 0
.text:00411A38                 dd 0C0h, 46000000h, 20404h, 0
.text:00411A48                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00411A48                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00411A78                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00411A78                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00411A78                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00411A78                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00411AC8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411AC8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00411AC8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00411AC8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00411AC8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00411AC8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00411B48                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00411B48                 dd 0Ah, 0
.text:00411B68                 dd 0C0h, 46000000h, 2, 0
.text:00411B78                 dd 0C0h, 46000000h, 1Dh, 0
.text:00411B88                 dd 0C0h, 46000000h, 3, 0
.text:00411B98                 dd 0C0h, 46000000h, 16h, 0
.text:00411BA8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00411BA8                 dd 1608D74Fh, 0Fh, 0
.text:00411BC8                 dd 0C0h, 46000000h, 20h, 0
.text:00411BD8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00411BD8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00411BD8                 dd 0
.text:00411C08                 dd 0C0h, 46000000h, 11Eh, 0
.text:00411C18                 dd 0C0h, 46000000h, 128h, 0
.text:00411C28                 dd 0C0h, 46000000h, 129h, 0
.text:00411C38                 dd 0C0h, 46000000h, 118h, 0
.text:00411C48                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00411C48                 dd 70474000h, 11Bh, 0
.text:00411C68                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00411C68                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411C68                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00411C68                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00411C68                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00411CC8                 dd 0C0h, 46000000h, 116h, 0
.text:00411CD8                 dd 0C0h, 46000000h, 113h, 0
.text:00411CE8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00411CE8                 dd 119h, 0
.text:00411D08                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00411D08                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00411D08                 dd 0
.text:00411D38                 dd 0C0h, 46000000h, 11Ch, 0
.text:00411D48                 dd 0C0h, 46000000h, 11Dh, 0
.text:00411D58                 dd 0C0h, 46000000h, 11Fh, 0
.text:00411D68                 dd 0C0h, 46000000h, 112h, 0
.text:00411D78                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00411D78                 dd 18E6000h, 120h, 0
.text:00411D98                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00411D98                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00411D98                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00411DD8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00411DD8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00411E08                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00411E08                 dd 11Ah, 0
.text:00411E28                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00411E28                 dd 10Ch, 0
.text:00411E48                 dd 0C0h, 46000000h
.text:00411E50 dword_411E50    dd 10Bh, 0              ; DATA XREF: sub_40D200+75↑o
.text:00411E58                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00411E58                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00411E58                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00411E58                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00411EA8                 dd 0C0h, 46000000h, 109h, 0
.text:00411EB8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00411EB8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00411EB8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00411EB8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00411EB8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00411EB8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00411EB8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00411EB8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00411EB8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00411EB8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00411EB8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00411F98                 dd 0C0h, 46000000h, 138h, 0
.text:00411FA8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00411FA8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00411FA8                 dd 27h, 0
.text:00411FD8                 dd 0C0h, 46000000h, 8, 0
.text:00411FE8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00411FE8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00411FE8                 dd 20D00h, 0
.text:00412018                 dd 0C0h, 46000000h, 20D03h, 0
.text:00412028                 dd 0C0h, 46000000h, 12h, 0
.text:00412038                 dd 0C0h, 46000000h, 4, 0
.text:00412048                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412048                 dd 7, 0
.text:00412068                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412068                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00412098                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00412098                 dd 126h, 0
.text:004120B8                 dd 0C0h, 46000000h, 10h, 0
.text:004120C8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:004120C8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004120F8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004120F8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004120F8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00412138                 dd 0C0h, 46000000h, 0Bh, 0
.text:00412148                 dd 0C0h, 46000000h, 0Ch, 0
.text:00412158                 dd 0C0h, 46000000h, 26h, 0
.text:00412168                 dd 0C0h, 46000000h, 6, 0
.text:00412178                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00412178                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00412178                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:004121B8                 dd 0C0h, 46000000h, 20403h, 0
.text:004121C8                 dd 0C0h, 46000000h, 20401h, 0
.text:004121D8                 dd 0C0h, 46000000h, 20412h, 0
.text:004121E8                 dd 0C0h, 46000000h, 20402h, 0
.text:004121F8                 dd 0C0h, 46000000h, 20411h, 0
.text:00412208                 dd 0C0h, 46000000h, 2 dup(0)
.text:00412218                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00412218                 dd 10Dh, 0
.text:00412238                 dd 0C0h, 46000000h, 127h, 0
.text:00412248                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00412248                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00412248                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00412288                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00412288                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00412288                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:004122C8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:004122D8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:004122E8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:004122F8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00412308                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00412318                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00412328                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00412338                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00412348                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00412358                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00412368                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00412378                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00412388                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00412398                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:004123A8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:004123B8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:004123C8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:004123D8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:004123E8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:004123F8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00412408                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00412418                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00412428                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00412438                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00412448                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00412458                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00412468                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00412478                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00412488                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00412498                 dd 0C0h, 46000000h, 2DE07h, 0
.text:004124A8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:004124B8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:004124C8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:004124D8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:004124E8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:004124F8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:004124F8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00412520
.text:00412520 ; =============== S U B R O U T I N E =======================================
.text:00412520
.text:00412520 ; Attributes: thunk
.text:00412520
.text:00412520 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00412520 mbrtowc         proc near               ; CODE XREF: sub_4054F0+757↑p
.text:00412520
.text:00412520 DstCh           = dword ptr  4
.text:00412520 SrcCh           = dword ptr  8
.text:00412520 SizeInBytes     = dword ptr  0Ch
.text:00412520 State           = dword ptr  10h
.text:00412520
.text:00412520                 jmp     ds:__imp_mbrtowc
.text:00412520 mbrtowc         endp
.text:00412520
.text:00412520 ; ---------------------------------------------------------------------------
.text:00412526                 align 10h
.text:00412530
.text:00412530 ; =============== S U B R O U T I N E =======================================
.text:00412530
.text:00412530 ; Attributes: bp-based frame
.text:00412530
.text:00412530 sub_412530      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00412530                 push    ebp
.text:00412531                 mov     ecx, offset Buf
.text:00412536                 cmp     ecx, offset Buf
.text:0041253C                 mov     ebp, esp
.text:0041253E                 jnb     short loc_412556
.text:00412540
.text:00412540 loc_412540:                             ; CODE XREF: sub_412530+24↓j
.text:00412540                 mov     edx, [ecx+4]
.text:00412543                 mov     eax, [ecx]
.text:00412545                 add     ecx, 8
.text:00412548                 add     [edx+400000h], eax
.text:0041254E                 cmp     ecx, offset Buf
.text:00412554                 jb      short loc_412540
.text:00412556
.text:00412556 loc_412556:                             ; CODE XREF: sub_412530+E↑j
.text:00412556                 pop     ebp
.text:00412557                 retn
.text:00412557 sub_412530      endp
.text:00412557
.text:00412557 ; ---------------------------------------------------------------------------
.text:00412558                 align 10h
.text:00412560
.text:00412560 ; =============== S U B R O U T I N E =======================================
.text:00412560
.text:00412560 ; Attributes: bp-based frame
.text:00412560
.text:00412560 sub_412560      proc near               ; CODE XREF: sub_401080+16↑p
.text:00412560                                         ; TopLevelExceptionFilter+D7↑p
.text:00412560                 push    ebp
.text:00412561                 mov     ebp, esp
.text:00412563                 fninit
.text:00412565                 pop     ebp
.text:00412566                 retn
.text:00412566 sub_412560      endp
.text:00412566
.text:00412566 ; ---------------------------------------------------------------------------
.text:00412567                 align 10h
.text:00412570
.text:00412570 ; =============== S U B R O U T I N E =======================================
.text:00412570
.text:00412570 ; Attributes: bp-based frame
.text:00412570
.text:00412570 ; void __cdecl sub_412570()
.text:00412570 sub_412570      proc near               ; DATA XREF: .text:loc_4125B9↓o
.text:00412570                                         ; sub_412600:loc_41262E↓o
.text:00412570                 push    ebp
.text:00412571                 mov     ebp, esp
.text:00412573                 sub     esp, 8
.text:00412576                 mov     eax, off_4140D4
.text:0041257B                 mov     edx, [eax]
.text:0041257D                 test    edx, edx
.text:0041257F                 jnz     short loc_412585
.text:00412581
.text:00412581 loc_412581:                             ; CODE XREF: sub_412570+2C↓j
.text:00412581                 mov     esp, ebp
.text:00412583                 pop     ebp
.text:00412584                 retn
.text:00412585 ; ---------------------------------------------------------------------------
.text:00412585
.text:00412585 loc_412585:                             ; CODE XREF: sub_412570+F↑j
.text:00412585                                         ; sub_412570+2A↓j
.text:00412585                 call    dword ptr [eax]
.text:00412587                 mov     edx, off_4140D4
.text:0041258D                 mov     ecx, [edx+4]
.text:00412590                 lea     eax, [edx+4]
.text:00412593                 mov     off_4140D4, eax
.text:00412598                 test    ecx, ecx
.text:0041259A                 jnz     short loc_412585
.text:0041259C                 jmp     short loc_412581
.text:0041259C sub_412570      endp
.text:0041259C
.text:0041259C ; ---------------------------------------------------------------------------
.text:0041259E                 align 10h
.text:004125A0                 push    ebp
.text:004125A1                 mov     ebp, esp
.text:004125A3                 sub     esp, 8
.text:004125A6                 mov     [ebp-4], ebx
.text:004125A9                 mov     eax, ds:dword_413C80
.text:004125AE                 cmp     eax, 0FFFFFFFFh
.text:004125B1                 jz      short loc_4125DC
.text:004125B3
.text:004125B3 loc_4125B3:                             ; CODE XREF: .text:004125E6↓j
.text:004125B3                                         ; .text:004125F9↓j
.text:004125B3                 test    eax, eax
.text:004125B5                 mov     ebx, eax
.text:004125B7                 jnz     short loc_4125D0
.text:004125B9
.text:004125B9 loc_4125B9:                             ; CODE XREF: .text:004125DA↓j
.text:004125B9                 mov     dword ptr [esp], offset sub_412570
.text:004125C0                 call    sub_401040
.text:004125C5                 mov     ebx, [ebp-4]
.text:004125C8                 mov     esp, ebp
.text:004125CA                 pop     ebp
.text:004125CB                 retn
.text:004125CB ; ---------------------------------------------------------------------------
.text:004125CC                 align 10h
.text:004125D0
.text:004125D0 loc_4125D0:                             ; CODE XREF: .text:004125B7↑j
.text:004125D0                                         ; .text:004125D8↓j
.text:004125D0                 call    ds:dword_413C80[ebx*4]
.text:004125D7                 dec     ebx
.text:004125D8                 jnz     short loc_4125D0
.text:004125DA                 jmp     short loc_4125B9
.text:004125DC ; ---------------------------------------------------------------------------
.text:004125DC
.text:004125DC loc_4125DC:                             ; CODE XREF: .text:004125B1↑j
.text:004125DC                 mov     ecx, ds:dword_413C84
.text:004125E2                 xor     eax, eax
.text:004125E4                 test    ecx, ecx
.text:004125E6                 jz      short loc_4125B3
.text:004125E8                 mov     edx, offset dword_413C80
.text:004125ED                 lea     esi, [esi+0]
.text:004125F0
.text:004125F0 loc_4125F0:                             ; CODE XREF: .text:004125F7↓j
.text:004125F0                 inc     eax
.text:004125F1                 mov     ecx, [edx+eax*4+4]
.text:004125F5                 test    ecx, ecx
.text:004125F7                 jnz     short loc_4125F0
.text:004125F9                 jmp     short loc_4125B3
.text:004125F9 ; ---------------------------------------------------------------------------
.text:004125FB                 align 10h
.text:00412600
.text:00412600 ; =============== S U B R O U T I N E =======================================
.text:00412600
.text:00412600 ; Attributes: bp-based frame
.text:00412600
.text:00412600 sub_412600      proc near               ; CODE XREF: sub_401E80+22↑p
.text:00412600
.text:00412600 var_8           = dword ptr -8
.text:00412600 var_4           = dword ptr -4
.text:00412600
.text:00412600                 push    ebp
.text:00412601                 mov     ebp, esp
.text:00412603                 sub     esp, 8
.text:00412606                 mov     [ebp+var_4], ebx
.text:00412609                 mov     edx, dword_4140D0
.text:0041260F                 test    edx, edx
.text:00412611                 jnz     short loc_41263A
.text:00412613                 mov     eax, ds:dword_413C80
.text:00412618                 mov     edx, 1
.text:0041261D                 mov     dword_4140D0, edx
.text:00412623                 cmp     eax, 0FFFFFFFFh
.text:00412626                 jz      short loc_41264D
.text:00412628
.text:00412628 loc_412628:                             ; CODE XREF: sub_412600+57↓j
.text:00412628                                         ; sub_412600+69↓j
.text:00412628                 test    eax, eax
.text:0041262A                 mov     ebx, eax
.text:0041262C                 jnz     short loc_412641
.text:0041262E
.text:0041262E loc_41262E:                             ; CODE XREF: sub_412600+4B↓j
.text:0041262E                 mov     [esp+8+var_8], offset sub_412570 ; void (__cdecl *)()
.text:00412635                 call    sub_401040
.text:0041263A
.text:0041263A loc_41263A:                             ; CODE XREF: sub_412600+11↑j
.text:0041263A                 mov     ebx, [ebp+var_4]
.text:0041263D                 mov     esp, ebp
.text:0041263F                 pop     ebp
.text:00412640                 retn
.text:00412641 ; ---------------------------------------------------------------------------
.text:00412641
.text:00412641 loc_412641:                             ; CODE XREF: sub_412600+2C↑j
.text:00412641                                         ; sub_412600+49↓j
.text:00412641                 call    ds:dword_413C80[ebx*4]
.text:00412648                 dec     ebx
.text:00412649                 jnz     short loc_412641
.text:0041264B                 jmp     short loc_41262E
.text:0041264D ; ---------------------------------------------------------------------------
.text:0041264D
.text:0041264D loc_41264D:                             ; CODE XREF: sub_412600+26↑j
.text:0041264D                 mov     ecx, ds:dword_413C84
.text:00412653                 xor     eax, eax
.text:00412655                 test    ecx, ecx
.text:00412657                 jz      short loc_412628
.text:00412659                 mov     edx, offset dword_413C80
.text:0041265E                 mov     esi, esi
.text:00412660
.text:00412660 loc_412660:                             ; CODE XREF: sub_412600+67↓j
.text:00412660                 inc     eax
.text:00412661                 mov     ebx, [edx+eax*4+4]
.text:00412665                 test    ebx, ebx
.text:00412667                 jnz     short loc_412660
.text:00412669                 jmp     short loc_412628
.text:00412669 sub_412600      endp
.text:00412669
.text:00412669 ; ---------------------------------------------------------------------------
.text:0041266B                 align 10h
.text:00412670
.text:00412670 ; =============== S U B R O U T I N E =======================================
.text:00412670
.text:00412670 ; Attributes: bp-based frame
.text:00412670
.text:00412670 sub_412670      proc near               ; CODE XREF: sub_403D80+482↑p
.text:00412670                                         ; sub_407D90+2BE↑p ...
.text:00412670
.text:00412670 var_24          = dword ptr -24h
.text:00412670 var_20          = dword ptr -20h
.text:00412670 var_1C          = dword ptr -1Ch
.text:00412670 var_18          = dword ptr -18h
.text:00412670 var_14          = dword ptr -14h
.text:00412670 var_C           = dword ptr -0Ch
.text:00412670 var_8           = dword ptr -8
.text:00412670 var_4           = dword ptr -4
.text:00412670 arg_0           = dword ptr  8
.text:00412670 arg_4           = dword ptr  0Ch
.text:00412670 arg_8           = dword ptr  10h
.text:00412670 arg_C           = dword ptr  14h
.text:00412670
.text:00412670                 push    ebp
.text:00412671                 mov     ebp, esp
.text:00412673                 sub     esp, 28h
.text:00412676                 mov     [ebp+var_C], ebx
.text:00412679                 mov     edx, [ebp+arg_C]
.text:0041267C                 mov     ecx, [ebp+arg_0]
.text:0041267F                 mov     [ebp+var_8], esi
.text:00412682                 mov     eax, [ebp+arg_8]
.text:00412685                 test    edx, edx
.text:00412687                 mov     [ebp+var_4], edi
.text:0041268A                 mov     ebx, [ebp+arg_4]
.text:0041268D                 mov     esi, eax
.text:0041268F                 mov     [ebp+var_18], 0
.text:00412696                 mov     [ebp+var_14], 0
.text:0041269D                 mov     [ebp+var_1C], ecx
.text:004126A0                 jnz     short loc_4126F2
.text:004126A2                 cmp     eax, ebx
.text:004126A4                 jbe     short loc_4126D0
.text:004126A6                 mov     eax, ecx
.text:004126A8                 mov     edx, ebx
.text:004126AA                 div     esi
.text:004126AC                 mov     edi, eax
.text:004126AE                 mov     esi, esi
.text:004126B0
.text:004126B0 loc_4126B0:                             ; CODE XREF: sub_412670+88↓j
.text:004126B0                                         ; sub_412670+A4↓j ...
.text:004126B0                 xor     ecx, ecx
.text:004126B2
.text:004126B2 loc_4126B2:                             ; CODE XREF: sub_412670+80↓j
.text:004126B2                 mov     [ebp+var_18], edi
.text:004126B5                 mov     ebx, [ebp+var_C]
.text:004126B8                 mov     eax, [ebp+var_18]
.text:004126BB                 mov     [ebp+var_14], ecx
.text:004126BE                 mov     esi, [ebp+var_8]
.text:004126C1                 mov     edx, [ebp+var_14]
.text:004126C4                 mov     edi, [ebp+var_4]
.text:004126C7                 mov     esp, ebp
.text:004126C9                 pop     ebp
.text:004126CA                 retn
.text:004126CA ; ---------------------------------------------------------------------------
.text:004126CB                 align 10h
.text:004126D0
.text:004126D0 loc_4126D0:                             ; CODE XREF: sub_412670+34↑j
.text:004126D0                 test    eax, eax
.text:004126D2                 jnz     short loc_4126E1
.text:004126D4                 mov     eax, 1
.text:004126D9                 xor     ecx, ecx
.text:004126DB                 xor     edx, edx
.text:004126DD                 div     ecx
.text:004126DF                 mov     esi, eax
.text:004126E1
.text:004126E1 loc_4126E1:                             ; CODE XREF: sub_412670+62↑j
.text:004126E1                 mov     eax, ebx
.text:004126E3                 xor     edx, edx
.text:004126E5                 div     esi
.text:004126E7                 mov     ecx, eax
.text:004126E9                 mov     eax, [ebp+var_1C]
.text:004126EC                 div     esi
.text:004126EE                 mov     edi, eax
.text:004126F0                 jmp     short loc_4126B2
.text:004126F2 ; ---------------------------------------------------------------------------
.text:004126F2
.text:004126F2 loc_4126F2:                             ; CODE XREF: sub_412670+30↑j
.text:004126F2                 cmp     edx, ebx
.text:004126F4                 jbe     short loc_412700
.text:004126F6                 xor     edi, edi
.text:004126F8                 jmp     short loc_4126B0
.text:004126F8 ; ---------------------------------------------------------------------------
.text:004126FA                 align 10h
.text:00412700
.text:00412700 loc_412700:                             ; CODE XREF: sub_412670+84↑j
.text:00412700                 bsr     eax, edx
.text:00412703                 xor     eax, 1Fh
.text:00412706                 mov     [ebp+var_20], eax
.text:00412709                 jnz     short loc_412720
.text:0041270B                 cmp     ebx, edx
.text:0041270D                 ja      short loc_412716
.text:0041270F                 xor     edi, edi
.text:00412711                 cmp     [ebp+var_1C], esi
.text:00412714                 jb      short loc_4126B0
.text:00412716
.text:00412716 loc_412716:                             ; CODE XREF: sub_412670+9D↑j
.text:00412716                 mov     edi, 1
.text:0041271B                 jmp     short loc_4126B0
.text:0041271B ; ---------------------------------------------------------------------------
.text:0041271D                 align 10h
.text:00412720
.text:00412720 loc_412720:                             ; CODE XREF: sub_412670+99↑j
.text:00412720                 mov     eax, [ebp+var_20]
.text:00412723                 mov     ecx, 20h ; ' '
.text:00412728                 sub     ecx, eax
.text:0041272A                 mov     [ebp+var_24], ecx
.text:0041272D                 mov     eax, esi
.text:0041272F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412733                 shl     edx, cl
.text:00412735                 mov     edi, edx
.text:00412737                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041273B                 mov     edx, ebx
.text:0041273D                 shr     eax, cl
.text:0041273F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412743                 or      edi, eax
.text:00412745                 mov     eax, [ebp+var_1C]
.text:00412748                 shl     esi, cl
.text:0041274A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041274E                 shr     edx, cl
.text:00412750                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412754                 shl     ebx, cl
.text:00412756                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041275A                 shr     eax, cl
.text:0041275C                 or      ebx, eax
.text:0041275E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00412762                 mov     eax, ebx
.text:00412764                 div     edi
.text:00412766                 mov     ebx, edx
.text:00412768                 mov     edi, eax
.text:0041276A                 shl     [ebp+var_1C], cl
.text:0041276D                 mul     esi
.text:0041276F                 cmp     edx, ebx
.text:00412771                 ja      short loc_412784
.text:00412773                 cmp     edx, ebx
.text:00412775                 jnz     loc_4126B0
.text:0041277B                 cmp     eax, [ebp+var_1C]
.text:0041277E                 jbe     loc_4126B0
.text:00412784
.text:00412784 loc_412784:                             ; CODE XREF: sub_412670+101↑j
.text:00412784                 dec     edi
.text:00412785                 jmp     loc_4126B0
.text:00412785 sub_412670      endp
.text:00412785
.text:00412785 ; ---------------------------------------------------------------------------
.text:0041278A                 align 10h
.text:00412790
.text:00412790 ; =============== S U B R O U T I N E =======================================
.text:00412790
.text:00412790 ; Attributes: bp-based frame
.text:00412790
.text:00412790 sub_412790      proc near               ; CODE XREF: sub_403D80+648↑p
.text:00412790
.text:00412790 var_2C          = dword ptr -2Ch
.text:00412790 var_28          = dword ptr -28h
.text:00412790 var_24          = dword ptr -24h
.text:00412790 var_20          = dword ptr -20h
.text:00412790 var_1C          = dword ptr -1Ch
.text:00412790 var_14          = dword ptr -14h
.text:00412790 arg_0           = dword ptr  8
.text:00412790 arg_4           = dword ptr  0Ch
.text:00412790 arg_8           = dword ptr  10h
.text:00412790 arg_C           = dword ptr  14h
.text:00412790
.text:00412790                 push    ebp
.text:00412791                 mov     ebp, esp
.text:00412793                 push    edi
.text:00412794                 push    esi
.text:00412795                 push    ebx
.text:00412796                 sub     esp, 24h
.text:00412799                 mov     ebx, [ebp+arg_4]
.text:0041279C                 mov     [ebp+var_20], 0
.text:004127A3                 mov     ecx, [ebp+arg_0]
.text:004127A6                 mov     eax, [ebp+arg_8]
.text:004127A9                 mov     [ebp+var_1C], 0
.text:004127B0                 test    ebx, ebx
.text:004127B2                 mov     edx, [ebp+arg_C]
.text:004127B5                 mov     [ebp+var_14], 0
.text:004127BC                 js      loc_4128D0
.text:004127C2
.text:004127C2 loc_4127C2:                             ; CODE XREF: sub_412790+14E↓j
.text:004127C2                 test    edx, edx
.text:004127C4                 js      loc_4128C0
.text:004127CA
.text:004127CA loc_4127CA:                             ; CODE XREF: sub_412790+13A↓j
.text:004127CA                 mov     [ebp+var_24], ecx
.text:004127CD                 test    edx, edx
.text:004127CF                 mov     esi, eax
.text:004127D1                 jnz     short loc_412826
.text:004127D3                 cmp     eax, ebx
.text:004127D5                 jbe     short loc_412804
.text:004127D7                 mov     eax, ecx
.text:004127D9                 mov     edx, ebx
.text:004127DB                 div     esi
.text:004127DD                 mov     edi, eax
.text:004127DF                 nop
.text:004127E0
.text:004127E0 loc_4127E0:                             ; CODE XREF: sub_412790+9C↓j
.text:004127E0                                         ; sub_412790+B4↓j ...
.text:004127E0                 xor     ecx, ecx
.text:004127E2
.text:004127E2 loc_4127E2:                             ; CODE XREF: sub_412790+94↓j
.text:004127E2                 mov     [ebp+var_1C], ecx
.text:004127E5                 mov     ecx, [ebp+var_14]
.text:004127E8                 mov     [ebp+var_20], edi
.text:004127EB                 mov     eax, [ebp+var_20]
.text:004127EE                 mov     edx, [ebp+var_1C]
.text:004127F1                 test    ecx, ecx
.text:004127F3                 jz      short loc_4127FC
.text:004127F5                 neg     eax
.text:004127F7                 adc     edx, 0
.text:004127FA                 neg     edx
.text:004127FC
.text:004127FC loc_4127FC:                             ; CODE XREF: sub_412790+63↑j
.text:004127FC                 add     esp, 24h
.text:004127FF                 pop     ebx
.text:00412800                 pop     esi
.text:00412801                 pop     edi
.text:00412802                 pop     ebp
.text:00412803                 retn
.text:00412804 ; ---------------------------------------------------------------------------
.text:00412804
.text:00412804 loc_412804:                             ; CODE XREF: sub_412790+45↑j
.text:00412804                 test    eax, eax
.text:00412806                 jnz     short loc_412815
.text:00412808                 mov     eax, 1
.text:0041280D                 xor     ecx, ecx
.text:0041280F                 xor     edx, edx
.text:00412811                 div     ecx
.text:00412813                 mov     esi, eax
.text:00412815
.text:00412815 loc_412815:                             ; CODE XREF: sub_412790+76↑j
.text:00412815                 mov     eax, ebx
.text:00412817                 xor     edx, edx
.text:00412819                 div     esi
.text:0041281B                 mov     ecx, eax
.text:0041281D                 mov     eax, [ebp+var_24]
.text:00412820                 div     esi
.text:00412822                 mov     edi, eax
.text:00412824                 jmp     short loc_4127E2
.text:00412826 ; ---------------------------------------------------------------------------
.text:00412826
.text:00412826 loc_412826:                             ; CODE XREF: sub_412790+41↑j
.text:00412826                 cmp     edx, ebx
.text:00412828                 jbe     short loc_412830
.text:0041282A                 xor     edi, edi
.text:0041282C                 jmp     short loc_4127E0
.text:0041282C ; ---------------------------------------------------------------------------
.text:0041282E                 align 10h
.text:00412830
.text:00412830 loc_412830:                             ; CODE XREF: sub_412790+98↑j
.text:00412830                 bsr     eax, edx
.text:00412833                 xor     eax, 1Fh
.text:00412836                 mov     [ebp+var_28], eax
.text:00412839                 jnz     short loc_412850
.text:0041283B                 cmp     ebx, edx
.text:0041283D                 ja      short loc_412846
.text:0041283F                 xor     edi, edi
.text:00412841                 cmp     [ebp+var_24], esi
.text:00412844                 jb      short loc_4127E0
.text:00412846
.text:00412846 loc_412846:                             ; CODE XREF: sub_412790+AD↑j
.text:00412846                 mov     edi, 1
.text:0041284B                 jmp     short loc_4127E0
.text:0041284B ; ---------------------------------------------------------------------------
.text:0041284D                 align 10h
.text:00412850
.text:00412850 loc_412850:                             ; CODE XREF: sub_412790+A9↑j
.text:00412850                 mov     eax, [ebp+var_28]
.text:00412853                 mov     ecx, 20h ; ' '
.text:00412858                 sub     ecx, eax
.text:0041285A                 mov     [ebp+var_2C], ecx
.text:0041285D                 mov     eax, esi
.text:0041285F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412863                 shl     edx, cl
.text:00412865                 mov     edi, edx
.text:00412867                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041286B                 mov     edx, ebx
.text:0041286D                 shr     eax, cl
.text:0041286F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412873                 or      edi, eax
.text:00412875                 mov     eax, [ebp+var_24]
.text:00412878                 shl     esi, cl
.text:0041287A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041287E                 shr     edx, cl
.text:00412880                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412884                 shl     ebx, cl
.text:00412886                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041288A                 shr     eax, cl
.text:0041288C                 or      ebx, eax
.text:0041288E                 movzx   ecx, byte ptr [ebp+var_28]
.text:00412892                 mov     eax, ebx
.text:00412894                 div     edi
.text:00412896                 mov     ebx, edx
.text:00412898                 mov     edi, eax
.text:0041289A                 shl     [ebp+var_24], cl
.text:0041289D                 mul     esi
.text:0041289F                 cmp     edx, ebx
.text:004128A1                 ja      short loc_4128B4
.text:004128A3                 cmp     edx, ebx
.text:004128A5                 jnz     loc_4127E0
.text:004128AB                 cmp     eax, [ebp+var_24]
.text:004128AE                 jbe     loc_4127E0
.text:004128B4
.text:004128B4 loc_4128B4:                             ; CODE XREF: sub_412790+111↑j
.text:004128B4                 dec     edi
.text:004128B5                 jmp     loc_4127E0
.text:004128B5 ; ---------------------------------------------------------------------------
.text:004128BA                 align 10h
.text:004128C0
.text:004128C0 loc_4128C0:                             ; CODE XREF: sub_412790+34↑j
.text:004128C0                 not     [ebp+var_14]
.text:004128C3                 neg     eax
.text:004128C5                 adc     edx, 0
.text:004128C8                 neg     edx
.text:004128CA                 jmp     loc_4127CA
.text:004128CA ; ---------------------------------------------------------------------------
.text:004128CF                 align 10h
.text:004128D0
.text:004128D0 loc_4128D0:                             ; CODE XREF: sub_412790+2C↑j
.text:004128D0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:004128D7                 neg     ecx
.text:004128D9                 adc     ebx, 0
.text:004128DC                 neg     ebx
.text:004128DE                 jmp     loc_4127C2
.text:004128DE sub_412790      endp
.text:004128DE
.text:004128DE ; ---------------------------------------------------------------------------
.text:004128E3                 align 10h
.text:004128F0
.text:004128F0 ; =============== S U B R O U T I N E =======================================
.text:004128F0
.text:004128F0 ; Attributes: bp-based frame
.text:004128F0
.text:004128F0 sub_4128F0      proc near               ; CODE XREF: sub_403230+3BE↑p
.text:004128F0
.text:004128F0 var_3C          = dword ptr -3Ch
.text:004128F0 var_34          = dword ptr -34h
.text:004128F0 var_30          = dword ptr -30h
.text:004128F0 var_2C          = dword ptr -2Ch
.text:004128F0 var_28          = dword ptr -28h
.text:004128F0 var_24          = dword ptr -24h
.text:004128F0 var_1C          = dword ptr -1Ch
.text:004128F0 var_18          = dword ptr -18h
.text:004128F0 var_14          = dword ptr -14h
.text:004128F0 arg_0           = dword ptr  8
.text:004128F0 arg_4           = dword ptr  0Ch
.text:004128F0 arg_8           = dword ptr  10h
.text:004128F0 arg_C           = dword ptr  14h
.text:004128F0
.text:004128F0                 push    ebp
.text:004128F1                 mov     ebp, esp
.text:004128F3                 push    edi
.text:004128F4                 push    esi
.text:004128F5                 push    ebx
.text:004128F6                 sub     esp, 34h
.text:004128F9                 mov     ebx, [ebp+arg_4]
.text:004128FC                 mov     [ebp+var_28], 0
.text:00412903                 mov     ecx, [ebp+arg_0]
.text:00412906                 mov     eax, [ebp+arg_8]
.text:00412909                 mov     [ebp+var_24], 0
.text:00412910                 test    ebx, ebx
.text:00412912                 mov     edx, [ebp+arg_C]
.text:00412915                 mov     [ebp+var_1C], 0
.text:0041291C                 js      loc_412A94
.text:00412922
.text:00412922 loc_412922:                             ; CODE XREF: sub_4128F0+1B2↓j
.text:00412922                 test    edx, edx
.text:00412924                 js      loc_412A88
.text:0041292A
.text:0041292A loc_41292A:                             ; CODE XREF: sub_4128F0+19F↓j
.text:0041292A                 mov     [ebp+var_2C], edx
.text:0041292D                 test    edx, edx
.text:0041292F                 mov     esi, eax
.text:00412931                 mov     [ebp+var_30], ecx
.text:00412934                 mov     edi, ebx
.text:00412936                 jnz     short loc_4129A1
.text:00412938                 cmp     eax, ebx
.text:0041293A                 jbe     short loc_412984
.text:0041293C                 mov     eax, ecx
.text:0041293E                 mov     edx, ebx
.text:00412940                 div     esi
.text:00412942
.text:00412942 loc_412942:                             ; CODE XREF: sub_4128F0+AF↓j
.text:00412942                 mov     [ebp+var_30], edx
.text:00412945                 lea     ecx, [ebp+var_18]
.text:00412948                 test    ecx, ecx
.text:0041294A                 jz      short loc_412965
.text:0041294C                 mov     [ebp+var_24], 0
.text:00412953
.text:00412953 loc_412953:                             ; CODE XREF: sub_4128F0+FE↓j
.text:00412953                 mov     eax, [ebp+var_30]
.text:00412956                 mov     [ebp+var_28], eax
.text:00412959                 mov     edx, [ebp+var_28]
.text:0041295C                 mov     ecx, [ebp+var_24]
.text:0041295F                 mov     [ebp+var_18], edx
.text:00412962                 mov     [ebp+var_14], ecx
.text:00412965
.text:00412965 loc_412965:                             ; CODE XREF: sub_4128F0+5A↑j
.text:00412965                                         ; sub_4128F0+C8↓j ...
.text:00412965                 mov     eax, [ebp+var_1C]
.text:00412968                 test    eax, eax
.text:0041296A                 jz      short loc_412976
.text:0041296C                 neg     [ebp+var_18]
.text:0041296F                 adc     [ebp+var_14], 0
.text:00412973                 neg     [ebp+var_14]
.text:00412976
.text:00412976 loc_412976:                             ; CODE XREF: sub_4128F0+7A↑j
.text:00412976                 mov     eax, [ebp+var_18]
.text:00412979                 mov     edx, [ebp+var_14]
.text:0041297C                 add     esp, 34h
.text:0041297F                 pop     ebx
.text:00412980                 pop     esi
.text:00412981                 pop     edi
.text:00412982                 pop     ebp
.text:00412983                 retn
.text:00412984 ; ---------------------------------------------------------------------------
.text:00412984
.text:00412984 loc_412984:                             ; CODE XREF: sub_4128F0+4A↑j
.text:00412984                 test    eax, eax
.text:00412986                 jnz     short loc_412993
.text:00412988                 mov     eax, 1
.text:0041298D                 xor     edx, edx
.text:0041298F                 div     esi
.text:00412991                 mov     esi, eax
.text:00412993
.text:00412993 loc_412993:                             ; CODE XREF: sub_4128F0+96↑j
.text:00412993                 mov     eax, edi
.text:00412995                 mov     edx, [ebp+var_2C]
.text:00412998                 div     esi
.text:0041299A                 mov     eax, [ebp+var_30]
.text:0041299D                 div     esi
.text:0041299F                 jmp     short loc_412942
.text:004129A1 ; ---------------------------------------------------------------------------
.text:004129A1
.text:004129A1 loc_4129A1:                             ; CODE XREF: sub_4128F0+46↑j
.text:004129A1                 cmp     [ebp+var_2C], ebx
.text:004129A4                 jbe     short loc_4129C0
.text:004129A6                 mov     [ebp+var_28], ecx
.text:004129A9
.text:004129A9 loc_4129A9:                             ; CODE XREF: sub_4128F0+17E↓j
.text:004129A9                 mov     [ebp+var_24], edi
.text:004129AC                 mov     eax, [ebp+var_28]
.text:004129AF                 mov     edx, [ebp+var_24]
.text:004129B2                 mov     [ebp+var_18], eax
.text:004129B5                 mov     [ebp+var_14], edx
.text:004129B8                 jmp     short loc_412965
.text:004129B8 ; ---------------------------------------------------------------------------
.text:004129BA                 align 10h
.text:004129C0
.text:004129C0 loc_4129C0:                             ; CODE XREF: sub_4128F0+B4↑j
.text:004129C0                 bsr     eax, [ebp+var_2C]
.text:004129C4                 mov     ebx, eax
.text:004129C6                 xor     ebx, 1Fh
.text:004129C9                 jnz     short loc_4129F3
.text:004129CB                 cmp     edi, [ebp+var_2C]
.text:004129CE                 ja      short loc_4129D5
.text:004129D0                 cmp     [ebp+var_30], esi
.text:004129D3                 jb      short loc_4129E0
.text:004129D5
.text:004129D5 loc_4129D5:                             ; CODE XREF: sub_4128F0+DE↑j
.text:004129D5                 mov     edx, [ebp+var_30]
.text:004129D8                 sub     edx, esi
.text:004129DA                 sbb     edi, [ebp+var_2C]
.text:004129DD                 mov     [ebp+var_30], edx
.text:004129E0
.text:004129E0 loc_4129E0:                             ; CODE XREF: sub_4128F0+E3↑j
.text:004129E0                 lea     ecx, [ebp+var_18]
.text:004129E3                 test    ecx, ecx
.text:004129E5                 jz      loc_412965
.text:004129EB                 mov     [ebp+var_24], edi
.text:004129EE                 jmp     loc_412953
.text:004129F3 ; ---------------------------------------------------------------------------
.text:004129F3
.text:004129F3 loc_4129F3:                             ; CODE XREF: sub_4128F0+D9↑j
.text:004129F3                 mov     edx, [ebp+var_2C]
.text:004129F6                 mov     eax, 20h ; ' '
.text:004129FB                 mov     cl, bl
.text:004129FD                 sub     eax, ebx
.text:004129FF                 mov     [ebp+var_34], eax
.text:00412A02                 shl     edx, cl
.text:00412A04                 mov     eax, esi
.text:00412A06                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412A0A                 shr     eax, cl
.text:00412A0C                 mov     cl, bl
.text:00412A0E                 shl     esi, cl
.text:00412A10                 or      edx, eax
.text:00412A12                 mov     eax, [ebp+var_30]
.text:00412A15                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412A19                 mov     [ebp+var_2C], edx
.text:00412A1C                 mov     edx, edi
.text:00412A1E                 shr     edx, cl
.text:00412A20                 mov     cl, bl
.text:00412A22                 shl     edi, cl
.text:00412A24                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412A28                 shr     eax, cl
.text:00412A2A                 or      edi, eax
.text:00412A2C                 mov     eax, edi
.text:00412A2E                 mov     cl, bl
.text:00412A30                 div     [ebp+var_2C]
.text:00412A33                 shl     [ebp+var_30], cl
.text:00412A36                 mov     edi, edx
.text:00412A38                 mul     esi
.text:00412A3A                 mov     [ebp+var_3C], eax
.text:00412A3D                 cmp     edx, edi
.text:00412A3F                 ja      short loc_412A7B
.text:00412A41                 cmp     edx, edi
.text:00412A43                 jz      short loc_412A73
.text:00412A45
.text:00412A45 loc_412A45:                             ; CODE XREF: sub_4128F0+189↓j
.text:00412A45                                         ; sub_4128F0+196↓j
.text:00412A45                 lea     eax, [ebp+var_18]
.text:00412A48                 test    eax, eax
.text:00412A4A                 jz      loc_412965
.text:00412A50                 movzx   ecx, byte ptr [ebp+var_34]
.text:00412A54                 mov     eax, [ebp+var_30]
.text:00412A57                 sub     eax, [ebp+var_3C]
.text:00412A5A                 sbb     edi, edx
.text:00412A5C                 mov     [ebp+var_30], eax
.text:00412A5F                 mov     edx, edi
.text:00412A61                 shl     edx, cl
.text:00412A63                 mov     cl, bl
.text:00412A65                 shr     eax, cl
.text:00412A67                 or      edx, eax
.text:00412A69                 mov     [ebp+var_28], edx
.text:00412A6C                 shr     edi, cl
.text:00412A6E                 jmp     loc_4129A9
.text:00412A73 ; ---------------------------------------------------------------------------
.text:00412A73
.text:00412A73 loc_412A73:                             ; CODE XREF: sub_4128F0+153↑j
.text:00412A73                 mov     eax, [ebp+var_30]
.text:00412A76                 cmp     [ebp+var_3C], eax
.text:00412A79                 jbe     short loc_412A45
.text:00412A7B
.text:00412A7B loc_412A7B:                             ; CODE XREF: sub_4128F0+14F↑j
.text:00412A7B                 mov     ecx, [ebp+var_3C]
.text:00412A7E                 sub     ecx, esi
.text:00412A80                 sbb     edx, [ebp+var_2C]
.text:00412A83                 mov     [ebp+var_3C], ecx
.text:00412A86                 jmp     short loc_412A45
.text:00412A88 ; ---------------------------------------------------------------------------
.text:00412A88
.text:00412A88 loc_412A88:                             ; CODE XREF: sub_4128F0+34↑j
.text:00412A88                 neg     eax
.text:00412A8A                 adc     edx, 0
.text:00412A8D                 neg     edx
.text:00412A8F                 jmp     loc_41292A
.text:00412A94 ; ---------------------------------------------------------------------------
.text:00412A94
.text:00412A94 loc_412A94:                             ; CODE XREF: sub_4128F0+2C↑j
.text:00412A94                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:00412A9B                 neg     ecx
.text:00412A9D                 adc     ebx, 0
.text:00412AA0                 neg     ebx
.text:00412AA2                 jmp     loc_412922
.text:00412AA2 sub_4128F0      endp
.text:00412AA2
.text:00412AA2 ; ---------------------------------------------------------------------------
.text:00412AA7                 align 10h
.text:00412AB0
.text:00412AB0 ; =============== S U B R O U T I N E =======================================
.text:00412AB0
.text:00412AB0 ; Attributes: info_from_lumina
.text:00412AB0
.text:00412AB0 ; void *__cdecl _alloca(size_t Size)
.text:00412AB0 __alloca        proc near               ; CODE XREF: sub_401E80+1D↑p
.text:00412AB0                                         ; sub_403D80+9F↑p
.text:00412AB0                 push    ecx
.text:00412AB1                 mov     ecx, esp
.text:00412AB3                 add     ecx, 8
.text:00412AB6
.text:00412AB6 loc_412AB6:                             ; CODE XREF: __alloca+1B↓j
.text:00412AB6                 cmp     eax, 1000h
.text:00412ABB                 jb      short loc_412ACD
.text:00412ABD                 sub     ecx, 1000h
.text:00412AC3                 or      dword ptr [ecx], 0
.text:00412AC6                 sub     eax, 1000h
.text:00412ACB                 jmp     short loc_412AB6
.text:00412ACD ; ---------------------------------------------------------------------------
.text:00412ACD
.text:00412ACD loc_412ACD:                             ; CODE XREF: __alloca+B↑j
.text:00412ACD                 sub     ecx, eax
.text:00412ACF                 or      dword ptr [ecx], 0
.text:00412AD2                 mov     eax, esp
.text:00412AD4                 mov     esp, ecx
.text:00412AD6                 mov     ecx, [eax]
.text:00412AD8                 mov     eax, [eax+4]
.text:00412ADB                 jmp     eax
.text:00412ADB __alloca        endp
.text:00412ADB
.text:00412ADB ; ---------------------------------------------------------------------------
.text:00412ADD                 align 10h
.text:00412AE0
.text:00412AE0 ; =============== S U B R O U T I N E =======================================
.text:00412AE0
.text:00412AE0 ; Attributes: bp-based frame
.text:00412AE0
.text:00412AE0 sub_412AE0      proc near               ; CODE XREF: sub_409170+12B↑p
.text:00412AE0                                         ; sub_409170+70E↑p ...
.text:00412AE0
.text:00412AE0 var_34          = dword ptr -34h
.text:00412AE0 var_2C          = dword ptr -2Ch
.text:00412AE0 var_28          = dword ptr -28h
.text:00412AE0 var_24          = dword ptr -24h
.text:00412AE0 var_20          = dword ptr -20h
.text:00412AE0 var_1C          = dword ptr -1Ch
.text:00412AE0 var_18          = dword ptr -18h
.text:00412AE0 var_14          = dword ptr -14h
.text:00412AE0 arg_0           = dword ptr  8
.text:00412AE0 arg_4           = dword ptr  0Ch
.text:00412AE0 arg_8           = dword ptr  10h
.text:00412AE0 arg_C           = dword ptr  14h
.text:00412AE0
.text:00412AE0                 push    ebp
.text:00412AE1                 mov     ebp, esp
.text:00412AE3                 push    edi
.text:00412AE4                 push    esi
.text:00412AE5                 push    ebx
.text:00412AE6                 sub     esp, 2Ch
.text:00412AE9                 mov     edx, [ebp+arg_C]
.text:00412AEC                 mov     [ebp+var_20], 0
.text:00412AF3                 mov     ecx, [ebp+arg_0]
.text:00412AF6                 mov     ebx, [ebp+arg_4]
.text:00412AF9                 mov     [ebp+var_1C], 0
.text:00412B00                 mov     eax, [ebp+arg_8]
.text:00412B03                 test    edx, edx
.text:00412B05                 mov     [ebp+var_24], edx
.text:00412B08                 mov     edi, ebx
.text:00412B0A                 mov     esi, eax
.text:00412B0C                 mov     [ebp+var_28], ecx
.text:00412B0F                 jnz     short loc_412B70
.text:00412B11                 cmp     eax, ebx
.text:00412B13                 jbe     short loc_412B50
.text:00412B15                 mov     eax, ecx
.text:00412B17                 mov     edx, ebx
.text:00412B19                 div     esi
.text:00412B1B
.text:00412B1B loc_412B1B:                             ; CODE XREF: sub_412AE0+8B↓j
.text:00412B1B                 mov     [ebp+var_28], edx
.text:00412B1E                 lea     ecx, [ebp+var_18]
.text:00412B21                 test    ecx, ecx
.text:00412B23                 jz      short loc_412B3E
.text:00412B25                 mov     [ebp+var_1C], 0
.text:00412B2C
.text:00412B2C loc_412B2C:                             ; CODE XREF: sub_412AE0+DA↓j
.text:00412B2C                 mov     eax, [ebp+var_28]
.text:00412B2F                 mov     [ebp+var_20], eax
.text:00412B32                 mov     edx, [ebp+var_20]
.text:00412B35                 mov     ecx, [ebp+var_1C]
.text:00412B38                 mov     [ebp+var_18], edx
.text:00412B3B                 mov     [ebp+var_14], ecx
.text:00412B3E
.text:00412B3E loc_412B3E:                             ; CODE XREF: sub_412AE0+43↑j
.text:00412B3E                                         ; sub_412AE0+A7↓j ...
.text:00412B3E                 mov     eax, [ebp+var_18]
.text:00412B41                 mov     edx, [ebp+var_14]
.text:00412B44                 add     esp, 2Ch
.text:00412B47                 pop     ebx
.text:00412B48                 pop     esi
.text:00412B49                 pop     edi
.text:00412B4A                 pop     ebp
.text:00412B4B                 retn
.text:00412B4B ; ---------------------------------------------------------------------------
.text:00412B4C                 align 10h
.text:00412B50
.text:00412B50 loc_412B50:                             ; CODE XREF: sub_412AE0+33↑j
.text:00412B50                 test    eax, eax
.text:00412B52                 jnz     short loc_412B5F
.text:00412B54                 mov     eax, 1
.text:00412B59                 xor     edx, edx
.text:00412B5B                 div     esi
.text:00412B5D                 mov     esi, eax
.text:00412B5F
.text:00412B5F loc_412B5F:                             ; CODE XREF: sub_412AE0+72↑j
.text:00412B5F                 mov     eax, edi
.text:00412B61                 mov     edx, [ebp+var_24]
.text:00412B64                 div     esi
.text:00412B66                 mov     eax, [ebp+var_28]
.text:00412B69                 div     esi
.text:00412B6B                 jmp     short loc_412B1B
.text:00412B6B ; ---------------------------------------------------------------------------
.text:00412B6D                 align 10h
.text:00412B70
.text:00412B70 loc_412B70:                             ; CODE XREF: sub_412AE0+2F↑j
.text:00412B70                 cmp     [ebp+var_24], ebx
.text:00412B73                 jbe     short loc_412B90
.text:00412B75                 mov     [ebp+var_20], ecx
.text:00412B78
.text:00412B78 loc_412B78:                             ; CODE XREF: sub_412AE0+15B↓j
.text:00412B78                 mov     [ebp+var_1C], edi
.text:00412B7B                 mov     eax, [ebp+var_20]
.text:00412B7E                 mov     edx, [ebp+var_1C]
.text:00412B81                 mov     [ebp+var_18], eax
.text:00412B84                 mov     [ebp+var_14], edx
.text:00412B87                 jmp     short loc_412B3E
.text:00412B87 ; ---------------------------------------------------------------------------
.text:00412B89                 align 10h
.text:00412B90
.text:00412B90 loc_412B90:                             ; CODE XREF: sub_412AE0+93↑j
.text:00412B90                 bsr     eax, [ebp+var_24]
.text:00412B94                 mov     ebx, eax
.text:00412B96                 xor     ebx, 1Fh
.text:00412B99                 jnz     short loc_412BC0
.text:00412B9B                 cmp     edi, [ebp+var_24]
.text:00412B9E                 ja      short loc_412BA5
.text:00412BA0                 cmp     [ebp+var_28], esi
.text:00412BA3                 jb      short loc_412BB0
.text:00412BA5
.text:00412BA5 loc_412BA5:                             ; CODE XREF: sub_412AE0+BE↑j
.text:00412BA5                 mov     edx, [ebp+var_28]
.text:00412BA8                 sub     edx, esi
.text:00412BAA                 sbb     edi, [ebp+var_24]
.text:00412BAD                 mov     [ebp+var_28], edx
.text:00412BB0
.text:00412BB0 loc_412BB0:                             ; CODE XREF: sub_412AE0+C3↑j
.text:00412BB0                 lea     ecx, [ebp+var_18]
.text:00412BB3                 test    ecx, ecx
.text:00412BB5                 jz      short loc_412B3E
.text:00412BB7                 mov     [ebp+var_1C], edi
.text:00412BBA                 jmp     loc_412B2C
.text:00412BBA ; ---------------------------------------------------------------------------
.text:00412BBF                 align 10h
.text:00412BC0
.text:00412BC0 loc_412BC0:                             ; CODE XREF: sub_412AE0+B9↑j
.text:00412BC0                 mov     edx, [ebp+var_24]
.text:00412BC3                 mov     eax, 20h ; ' '
.text:00412BC8                 mov     cl, bl
.text:00412BCA                 sub     eax, ebx
.text:00412BCC                 mov     [ebp+var_2C], eax
.text:00412BCF                 shl     edx, cl
.text:00412BD1                 mov     eax, esi
.text:00412BD3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412BD7                 shr     eax, cl
.text:00412BD9                 mov     cl, bl
.text:00412BDB                 shl     esi, cl
.text:00412BDD                 or      edx, eax
.text:00412BDF                 mov     eax, [ebp+var_28]
.text:00412BE2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412BE6                 mov     [ebp+var_24], edx
.text:00412BE9                 mov     edx, edi
.text:00412BEB                 shr     edx, cl
.text:00412BED                 mov     cl, bl
.text:00412BEF                 shl     edi, cl
.text:00412BF1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412BF5                 shr     eax, cl
.text:00412BF7                 or      edi, eax
.text:00412BF9                 mov     eax, edi
.text:00412BFB                 mov     cl, bl
.text:00412BFD                 div     [ebp+var_24]
.text:00412C00                 shl     [ebp+var_28], cl
.text:00412C03                 mov     edi, edx
.text:00412C05                 mul     esi
.text:00412C07                 mov     [ebp+var_34], eax
.text:00412C0A                 cmp     edx, edi
.text:00412C0C                 ja      short loc_412C48
.text:00412C0E                 cmp     edx, edi
.text:00412C10                 jz      short loc_412C40
.text:00412C12
.text:00412C12 loc_412C12:                             ; CODE XREF: sub_412AE0+166↓j
.text:00412C12                                         ; sub_412AE0+173↓j
.text:00412C12                 lea     eax, [ebp+var_18]
.text:00412C15                 test    eax, eax
.text:00412C17                 jz      loc_412B3E
.text:00412C1D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00412C21                 mov     eax, [ebp+var_28]
.text:00412C24                 sub     eax, [ebp+var_34]
.text:00412C27                 sbb     edi, edx
.text:00412C29                 mov     [ebp+var_28], eax
.text:00412C2C                 mov     edx, edi
.text:00412C2E                 shl     edx, cl
.text:00412C30                 mov     cl, bl
.text:00412C32                 shr     eax, cl
.text:00412C34                 or      edx, eax
.text:00412C36                 mov     [ebp+var_20], edx
.text:00412C39                 shr     edi, cl
.text:00412C3B                 jmp     loc_412B78
.text:00412C40 ; ---------------------------------------------------------------------------
.text:00412C40
.text:00412C40 loc_412C40:                             ; CODE XREF: sub_412AE0+130↑j
.text:00412C40                 mov     eax, [ebp+var_28]
.text:00412C43                 cmp     [ebp+var_34], eax
.text:00412C46                 jbe     short loc_412C12
.text:00412C48
.text:00412C48 loc_412C48:                             ; CODE XREF: sub_412AE0+12C↑j
.text:00412C48                 mov     ecx, [ebp+var_34]
.text:00412C4B                 sub     ecx, esi
.text:00412C4D                 sbb     edx, [ebp+var_24]
.text:00412C50                 mov     [ebp+var_34], ecx
.text:00412C53                 jmp     short loc_412C12
.text:00412C53 sub_412AE0      endp
.text:00412C53
.text:00412C53 ; ---------------------------------------------------------------------------
.text:00412C55                 align 10h
.text:00412C60 flt_412C60      dd 2.3283064e-10        ; DATA XREF: sub_412C70+2B↓r
.text:00412C64 flt_412C64      dd 1.8446744e19         ; DATA XREF: sub_412C70:loc_412D04↓r
.text:00412C68                 align 10h
.text:00412C70
.text:00412C70 ; =============== S U B R O U T I N E =======================================
.text:00412C70
.text:00412C70 ; Attributes: bp-based frame
.text:00412C70
.text:00412C70 ; int __cdecl sub_412C70(_TBYTE)
.text:00412C70 sub_412C70      proc near               ; CODE XREF: sub_409170+250↑p
.text:00412C70                                         ; sub_409170+52C↑p ...
.text:00412C70
.text:00412C70 var_20          = qword ptr -20h
.text:00412C70 var_18          = qword ptr -18h
.text:00412C70 var_C           = word ptr -0Ch
.text:00412C70 var_A           = word ptr -0Ah
.text:00412C70 var_4           = dword ptr -4
.text:00412C70 arg_0           = tbyte ptr  8
.text:00412C70
.text:00412C70                 push    ebp
.text:00412C71                 fldz
.text:00412C73                 mov     ebp, esp
.text:00412C75                 sub     esp, 18h
.text:00412C78                 fld     [ebp+arg_0]
.text:00412C7B                 fxch    st(1)
.text:00412C7D                 mov     [ebp+var_4], ebx
.text:00412C80                 fucom   st(1)
.text:00412C82                 fnstsw  ax
.text:00412C84                 sahf
.text:00412C85                 jbe     short loc_412C96
.text:00412C87                 fstp    st
.text:00412C89                 fstp    st
.text:00412C8B                 xor     eax, eax
.text:00412C8D                 xor     edx, edx
.text:00412C8F
.text:00412C8F loc_412C8F:                             ; CODE XREF: sub_412C70+7A↓j
.text:00412C8F                 mov     ebx, [ebp+var_4]
.text:00412C92                 mov     esp, ebp
.text:00412C94                 pop     ebp
.text:00412C95                 retn
.text:00412C96 ; ---------------------------------------------------------------------------
.text:00412C96
.text:00412C96 loc_412C96:                             ; CODE XREF: sub_412C70+15↑j
.text:00412C96                 fnstcw  [ebp+var_A]
.text:00412C99                 xor     ecx, ecx
.text:00412C9B                 fld     ds:flt_412C60
.text:00412CA1                 movzx   eax, [ebp+var_A]
.text:00412CA5                 fmul    st, st(2)
.text:00412CA7                 or      ax, 0C00h
.text:00412CAB                 mov     [ebp+var_C], ax
.text:00412CAF                 fldcw   [ebp+var_C]
.text:00412CB2                 fistp   [ebp+var_18]
.text:00412CB5                 fldcw   [ebp+var_A]
.text:00412CB8                 mov     eax, dword ptr [ebp+var_18]
.text:00412CBB                 mov     ebx, eax
.text:00412CBD                 push    eax
.text:00412CBE                 push    ecx
.text:00412CBF                 fild    [esp+20h+var_20]
.text:00412CC2                 add     esp, 8
.text:00412CC5                 test    eax, eax
.text:00412CC7                 js      short loc_412D04
.text:00412CC9
.text:00412CC9 loc_412CC9:                             ; CODE XREF: sub_412C70+9A↓j
.text:00412CC9                 fsubp   st(2), st
.text:00412CCB                 fucomp  st(1)
.text:00412CCD                 fnstsw  ax
.text:00412CCF                 sahf
.text:00412CD0                 jbe     short loc_412CF0
.text:00412CD2                 fchs
.text:00412CD4                 xor     edx, edx
.text:00412CD6                 fldcw   [ebp+var_C]
.text:00412CD9                 fistp   [ebp+var_18]
.text:00412CDC                 fldcw   [ebp+var_A]
.text:00412CDF                 mov     eax, dword ptr [ebp+var_18]
.text:00412CE2                 sub     ecx, eax
.text:00412CE4                 sbb     ebx, edx
.text:00412CE6
.text:00412CE6 loc_412CE6:                             ; CODE XREF: sub_412C70+92↓j
.text:00412CE6                 mov     eax, ecx
.text:00412CE8                 mov     edx, ebx
.text:00412CEA                 jmp     short loc_412C8F
.text:00412CEA ; ---------------------------------------------------------------------------
.text:00412CEC                 align 10h
.text:00412CF0
.text:00412CF0 loc_412CF0:                             ; CODE XREF: sub_412C70+60↑j
.text:00412CF0                 fldcw   [ebp+var_C]
.text:00412CF3                 fistp   [ebp+var_18]
.text:00412CF6                 fldcw   [ebp+var_A]
.text:00412CF9                 xor     edx, edx
.text:00412CFB                 mov     eax, dword ptr [ebp+var_18]
.text:00412CFE                 add     ecx, eax
.text:00412D00                 adc     ebx, edx
.text:00412D02                 jmp     short loc_412CE6
.text:00412D04 ; ---------------------------------------------------------------------------
.text:00412D04
.text:00412D04 loc_412D04:                             ; CODE XREF: sub_412C70+57↑j
.text:00412D04                 fadd    ds:flt_412C64
.text:00412D0A                 jmp     short loc_412CC9
.text:00412D0A sub_412C70      endp
.text:00412D0A
.text:00412D0A ; ---------------------------------------------------------------------------
.text:00412D0C                 align 10h
.text:00412D10
.text:00412D10 ; =============== S U B R O U T I N E =======================================
.text:00412D10
.text:00412D10 ; Attributes: thunk
.text:00412D10
.text:00412D10 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00412D10 _chmod          proc near               ; CODE XREF: sub_402CD0+1F8↑p
.text:00412D10                                         ; sub_410F10+41↑j
.text:00412D10
.text:00412D10 FileName        = dword ptr  4
.text:00412D10 AccessMode      = dword ptr  8
.text:00412D10
.text:00412D10                 jmp     ds:__imp__chmod
.text:00412D10 _chmod          endp
.text:00412D10
.text:00412D10 ; ---------------------------------------------------------------------------
.text:00412D16                 align 10h
.text:00412D20
.text:00412D20 ; =============== S U B R O U T I N E =======================================
.text:00412D20
.text:00412D20 ; Attributes: thunk
.text:00412D20
.text:00412D20 ; int __cdecl isatty(int FileHandle)
.text:00412D20 _isatty         proc near               ; CODE XREF: sub_403230+19↑p
.text:00412D20                                         ; sub_403230+505↑p
.text:00412D20
.text:00412D20 FileHandle      = dword ptr  4
.text:00412D20
.text:00412D20                 jmp     ds:__imp__isatty
.text:00412D20 _isatty         endp
.text:00412D20
.text:00412D20 ; ---------------------------------------------------------------------------
.text:00412D26                 align 10h
.text:00412D30
.text:00412D30 ; =============== S U B R O U T I N E =======================================
.text:00412D30
.text:00412D30 ; Attributes: thunk
.text:00412D30
.text:00412D30 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:00412D30 _write          proc near               ; CODE XREF: sub_403D80+2BA↑p
.text:00412D30
.text:00412D30 FileHandle      = dword ptr  4
.text:00412D30 Buf             = dword ptr  8
.text:00412D30 MaxCharCount    = dword ptr  0Ch
.text:00412D30
.text:00412D30                 jmp     ds:__imp__write
.text:00412D30 _write          endp
.text:00412D30
.text:00412D30 ; ---------------------------------------------------------------------------
.text:00412D36                 align 10h
.text:00412D40
.text:00412D40 ; =============== S U B R O U T I N E =======================================
.text:00412D40
.text:00412D40 ; Attributes: thunk
.text:00412D40
.text:00412D40 ; int __cdecl close(int FileHandle)
.text:00412D40 _close          proc near               ; CODE XREF: sub_4026E0+34F↑p
.text:00412D40                                         ; sub_4026E0+429↑p ...
.text:00412D40
.text:00412D40 FileHandle      = dword ptr  4
.text:00412D40
.text:00412D40                 jmp     ds:__imp__close
.text:00412D40 _close          endp
.text:00412D40
.text:00412D40 ; ---------------------------------------------------------------------------
.text:00412D46                 align 10h
.text:00412D50
.text:00412D50 ; =============== S U B R O U T I N E =======================================
.text:00412D50
.text:00412D50 ; Attributes: thunk
.text:00412D50
.text:00412D50 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:00412D50 _read           proc near               ; CODE XREF: sub_4026E0+340↑p
.text:00412D50                                         ; sub_4026E0+41C↑p
.text:00412D50
.text:00412D50 FileHandle      = dword ptr  4
.text:00412D50 DstBuf          = dword ptr  8
.text:00412D50 MaxCharCount    = dword ptr  0Ch
.text:00412D50
.text:00412D50                 jmp     ds:__imp__read
.text:00412D50 _read           endp
.text:00412D50
.text:00412D50 ; ---------------------------------------------------------------------------
.text:00412D56                 align 10h
.text:00412D60
.text:00412D60 ; =============== S U B R O U T I N E =======================================
.text:00412D60
.text:00412D60 ; Attributes: thunk
.text:00412D60
.text:00412D60 ; int open(const char *FileName, int OpenFlag, ...)
.text:00412D60 _open           proc near               ; CODE XREF: sub_4026E0+319↑p
.text:00412D60                                         ; sub_4026E0+3F9↑p ...
.text:00412D60
.text:00412D60 FileName        = dword ptr  4
.text:00412D60 OpenFlag        = dword ptr  8
.text:00412D60
.text:00412D60                 jmp     ds:__imp__open
.text:00412D60 _open           endp
.text:00412D60
.text:00412D60 ; ---------------------------------------------------------------------------
.text:00412D66                 align 10h
.text:00412D70
.text:00412D70 ; =============== S U B R O U T I N E =======================================
.text:00412D70
.text:00412D70 ; Attributes: thunk
.text:00412D70
.text:00412D70 ; int __cdecl getpid()
.text:00412D70 _getpid         proc near               ; CODE XREF: sub_4026E0+4A↑p
.text:00412D70                                         ; sub_410AE0+84↑p
.text:00412D70                 jmp     ds:__imp__getpid
.text:00412D70 _getpid         endp
.text:00412D70
.text:00412D70 ; ---------------------------------------------------------------------------
.text:00412D76                 align 10h
.text:00412D80
.text:00412D80 ; =============== S U B R O U T I N E =======================================
.text:00412D80
.text:00412D80 ; Attributes: thunk
.text:00412D80
.text:00412D80 ; int __cdecl dup(int FileHandle)
.text:00412D80 _dup            proc near               ; CODE XREF: sub_40AF80+57↑p
.text:00412D80
.text:00412D80 FileHandle      = dword ptr  4
.text:00412D80
.text:00412D80                 jmp     ds:__imp__dup
.text:00412D80 _dup            endp
.text:00412D80
.text:00412D80 ; ---------------------------------------------------------------------------
.text:00412D86                 align 10h
.text:00412D90
.text:00412D90 ; =============== S U B R O U T I N E =======================================
.text:00412D90
.text:00412D90 ; Attributes: thunk
.text:00412D90
.text:00412D90 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00412D90 _stricmp        proc near               ; CODE XREF: sub_40BB50+46F↑p
.text:00412D90                                         ; sub_40DB10+2E↑p ...
.text:00412D90
.text:00412D90 String1         = dword ptr  4
.text:00412D90 String2         = dword ptr  8
.text:00412D90
.text:00412D90                 jmp     ds:__imp__stricmp
.text:00412D90 _stricmp        endp
.text:00412D90
.text:00412D90 ; ---------------------------------------------------------------------------
.text:00412D96                 align 10h
.text:00412DA0
.text:00412DA0 ; =============== S U B R O U T I N E =======================================
.text:00412DA0
.text:00412DA0 ; Attributes: thunk
.text:00412DA0
.text:00412DA0 ; char *__cdecl strdup(const char *String)
.text:00412DA0 _strdup         proc near               ; CODE XREF: sub_40D740+101↑p
.text:00412DA0                                         ; .text:0040D9AA↑p ...
.text:00412DA0
.text:00412DA0 String          = dword ptr  4
.text:00412DA0
.text:00412DA0                 jmp     ds:__imp__strdup
.text:00412DA0 _strdup         endp
.text:00412DA0
.text:00412DA0 ; ---------------------------------------------------------------------------
.text:00412DA6                 align 10h
.text:00412DB0
.text:00412DB0 ; =============== S U B R O U T I N E =======================================
.text:00412DB0
.text:00412DB0 ; Attributes: info_from_lumina
.text:00412DB0
.text:00412DB0 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:00412DB0 _strtoull       proc near               ; CODE XREF: sub_407D90+AD↑p
.text:00412DB0
.text:00412DB0 C               = dword ptr -3Ch
.text:00412DB0 Type            = dword ptr -38h
.text:00412DB0 var_34          = dword ptr -34h
.text:00412DB0 var_30          = dword ptr -30h
.text:00412DB0 var_2C          = dword ptr -2Ch
.text:00412DB0 var_28          = dword ptr -28h
.text:00412DB0 var_24          = dword ptr -24h
.text:00412DB0 var_20          = dword ptr -20h
.text:00412DB0 var_1C          = dword ptr -1Ch
.text:00412DB0 var_18          = dword ptr -18h
.text:00412DB0 String          = dword ptr  4
.text:00412DB0 EndPtr          = dword ptr  8
.text:00412DB0 Radix           = dword ptr  0Ch
.text:00412DB0
.text:00412DB0                 push    ebp
.text:00412DB1                 push    edi
.text:00412DB2                 push    esi
.text:00412DB3                 push    ebx
.text:00412DB4                 sub     esp, 2Ch
.text:00412DB7                 mov     edx, [esp+3Ch+EndPtr]
.text:00412DBB                 test    edx, edx
.text:00412DBD                 jz      short loc_412DC9
.text:00412DBF                 mov     eax, [esp+3Ch+String]
.text:00412DC3                 mov     ecx, [esp+3Ch+EndPtr]
.text:00412DC7                 mov     [ecx], eax
.text:00412DC9
.text:00412DC9 loc_412DC9:                             ; CODE XREF: _strtoull+D↑j
.text:00412DC9                 mov     edx, [esp+3Ch+Radix]
.text:00412DCD                 test    edx, edx
.text:00412DCF                 js      short loc_412DDF
.text:00412DD1                 cmp     [esp+3Ch+Radix], 1
.text:00412DD6                 jz      short loc_412DDF
.text:00412DD8                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:00412DDD                 jle     short loc_412DF6
.text:00412DDF
.text:00412DDF loc_412DDF:                             ; CODE XREF: _strtoull+1F↑j
.text:00412DDF                                         ; _strtoull+26↑j
.text:00412DDF                 call    _errno
.text:00412DE4                 mov     dword ptr [eax], 21h ; '!'
.text:00412DEA
.text:00412DEA loc_412DEA:                             ; CODE XREF: _strtoull+FF↓j
.text:00412DEA                                         ; _strtoull+109↓j
.text:00412DEA                 xor     eax, eax
.text:00412DEC                 xor     edx, edx
.text:00412DEE
.text:00412DEE loc_412DEE:                             ; CODE XREF: _strtoull+244↓j
.text:00412DEE                                         ; _strtoull+251↓j ...
.text:00412DEE                 add     esp, 2Ch
.text:00412DF1                 pop     ebx
.text:00412DF2                 pop     esi
.text:00412DF3                 pop     edi
.text:00412DF4                 pop     ebp
.text:00412DF5                 retn
.text:00412DF6 ; ---------------------------------------------------------------------------
.text:00412DF6
.text:00412DF6 loc_412DF6:                             ; CODE XREF: _strtoull+2D↑j
.text:00412DF6                 mov     ecx, ds:__mb_cur_max
.text:00412DFC                 lea     esi, [esi+0]
.text:00412E00
.text:00412E00 loc_412E00:                             ; CODE XREF: _strtoull+7E↓j
.text:00412E00                 cmp     dword ptr [ecx], 1
.text:00412E03                 mov     esi, [esp+3Ch+String]
.text:00412E07                 movsx   edx, byte ptr [esi]
.text:00412E0A                 jz      loc_4131E2
.text:00412E10                 mov     [esp+3Ch+Type], 8 ; Type
.text:00412E18                 mov     [esp+3Ch+C], edx ; C
.text:00412E1B                 call    _isctype
.text:00412E20                 mov     ecx, ds:__mb_cur_max
.text:00412E26
.text:00412E26 loc_412E26:                             ; CODE XREF: _strtoull+445↓j
.text:00412E26                 test    eax, eax
.text:00412E28                 jz      short loc_412E30
.text:00412E2A                 inc     [esp+3Ch+String]
.text:00412E2E                 jmp     short loc_412E00
.text:00412E30 ; ---------------------------------------------------------------------------
.text:00412E30
.text:00412E30 loc_412E30:                             ; CODE XREF: _strtoull+78↑j
.text:00412E30                 mov     esi, [esp+3Ch+String]
.text:00412E34                 xor     ebx, ebx
.text:00412E36                 movzx   edx, byte ptr [esi]
.text:00412E39                 cmp     dl, 2Dh ; '-'
.text:00412E3C                 setz    bl
.text:00412E3F                 test    ebx, ebx
.text:00412E41                 mov     [esp+3Ch+var_20], ebx
.text:00412E45                 jnz     loc_4131D2
.text:00412E4B                 cmp     dl, 2Bh ; '+'
.text:00412E4E                 jz      loc_4131D2
.text:00412E54
.text:00412E54 loc_412E54:                             ; CODE XREF: _strtoull+42D↓j
.text:00412E54                 mov     ebp, [esp+3Ch+Radix]
.text:00412E58                 test    ebp, ebp
.text:00412E5A                 jnz     short loc_412E6D
.text:00412E5C                 cmp     dl, 30h ; '0'
.text:00412E5F                 jz      loc_4131A9
.text:00412E65                 mov     [esp+3Ch+Radix], 0Ah
.text:00412E6D
.text:00412E6D loc_412E6D:                             ; CODE XREF: _strtoull+AA↑j
.text:00412E6D                                         ; _strtoull+40F↓j ...
.text:00412E6D                 cmp     [esp+3Ch+Radix], 10h
.text:00412E72                 jz      loc_41317B
.text:00412E78
.text:00412E78 loc_412E78:                             ; CODE XREF: _strtoull+3CE↓j
.text:00412E78                                         ; _strtoull+3E2↓j ...
.text:00412E78                 cmp     dword ptr [ecx], 1
.text:00412E7B                 movsx   ebx, dl
.text:00412E7E                 jz      loc_413163
.text:00412E84                 mov     [esp+3Ch+Type], 4 ; Type
.text:00412E8C                 mov     [esp+3Ch+C], ebx ; C
.text:00412E8F                 call    _isctype
.text:00412E94                 mov     esi, [esp+3Ch+String]
.text:00412E98                 movzx   edx, byte ptr [esi]
.text:00412E9B
.text:00412E9B loc_412E9B:                             ; CODE XREF: _strtoull+3C6↓j
.text:00412E9B                 test    eax, eax
.text:00412E9D                 jz      loc_4130CC
.text:00412EA3                 movsx   eax, dl
.text:00412EA6                 sub     eax, 30h ; '0'
.text:00412EA9
.text:00412EA9 loc_412EA9:                             ; CODE XREF: _strtoull+34B↓j
.text:00412EA9                                         ; _strtoull+37C↓j ...
.text:00412EA9                 inc     [esp+3Ch+String]
.text:00412EAD                 test    eax, eax
.text:00412EAF                 js      loc_412DEA
.text:00412EB5                 cmp     eax, [esp+3Ch+Radix]
.text:00412EB9                 jge     loc_412DEA
.text:00412EBF                 mov     [esp+3Ch+var_1C], eax
.text:00412EC3                 mov     edx, eax
.text:00412EC5                 sar     edx, 1Fh
.text:00412EC8                 mov     [esp+3Ch+var_18], edx
.text:00412ECC                 mov     [esp+3Ch+var_24], 0
.text:00412ED4                 lea     esi, [esi+0]
.text:00412EDA                 lea     edi, [edi+0]
.text:00412EE0
.text:00412EE0 loc_412EE0:                             ; CODE XREF: _strtoull+20C↓j
.text:00412EE0                 mov     ebp, [esp+3Ch+String]
.text:00412EE4                 mov     ebx, ds:__mb_cur_max
.text:00412EEA                 movzx   edx, byte ptr [ebp+0]
.text:00412EEE                 cmp     dword ptr [ebx], 1
.text:00412EF1                 movsx   ecx, dl
.text:00412EF4                 jz      loc_4130B5
.text:00412EFA                 mov     [esp+3Ch+C], ecx ; C
.text:00412EFD                 mov     [esp+3Ch+Type], 4 ; Type
.text:00412F05                 call    _isctype
.text:00412F0A                 mov     ecx, [esp+3Ch+String]
.text:00412F0E                 movzx   edx, byte ptr [ecx]
.text:00412F11
.text:00412F11 loc_412F11:                             ; CODE XREF: _strtoull+317↓j
.text:00412F11                 test    eax, eax
.text:00412F13                 jz      loc_413020
.text:00412F19                 movsx   edi, dl
.text:00412F1C                 lea     ebp, [edi-30h]
.text:00412F1F
.text:00412F1F loc_412F1F:                             ; CODE XREF: _strtoull+2A3↓j
.text:00412F1F                 test    ebp, ebp
.text:00412F21                 js      loc_412FCB
.text:00412F27                 cmp     ebp, [esp+3Ch+Radix]
.text:00412F2B                 jge     loc_412FCB
.text:00412F31                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00412F38                 mov     eax, [esp+3Ch+Radix]
.text:00412F3C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00412F44                 cdq
.text:00412F45                 mov     esi, eax
.text:00412F47                 mov     [esp+3Ch+var_34], eax
.text:00412F4B                 mov     edi, edx
.text:00412F4D                 mov     [esp+3Ch+var_30], edx
.text:00412F51                 call    sub_412670
.text:00412F56                 add     eax, 1
.text:00412F59                 adc     edx, 0
.text:00412F5C                 cmp     [esp+3Ch+var_18], edx
.text:00412F60                 ja      short loc_412FB0
.text:00412F62                 jb      short loc_412F6A
.text:00412F64                 cmp     [esp+3Ch+var_1C], eax
.text:00412F68                 ja      short loc_412FB0
.text:00412F6A
.text:00412F6A loc_412F6A:                             ; CODE XREF: _strtoull+1B2↑j
.text:00412F6A                 mov     eax, [esp+3Ch+var_1C]
.text:00412F6E                 mov     ebx, ebp
.text:00412F70                 mul     esi
.text:00412F72                 mov     ecx, edx
.text:00412F74                 mov     [esp+3Ch+var_2C], eax
.text:00412F78                 mov     eax, [esp+3Ch+var_18]
.text:00412F7C                 mov     [esp+3Ch+var_28], edx
.text:00412F80                 imul    eax, esi
.text:00412F83                 mov     esi, [esp+3Ch+var_1C]
.text:00412F87                 imul    esi, edi
.text:00412F8A                 add     ecx, eax
.text:00412F8C                 lea     edi, [esi+ecx]
.text:00412F8F                 mov     esi, ebp
.text:00412F91                 sar     esi, 1Fh
.text:00412F94                 add     ebx, [esp+3Ch+var_2C]
.text:00412F98                 mov     [esp+3Ch+var_28], edi
.text:00412F9C                 adc     esi, [esp+3Ch+var_28]
.text:00412FA0                 cmp     esi, [esp+3Ch+var_18]
.text:00412FA4                 jb      short loc_412FB0
.text:00412FA6                 ja      short loc_412FC1
.text:00412FA8                 cmp     ebx, [esp+3Ch+var_1C]
.text:00412FAC                 jnb     short loc_412FC1
.text:00412FAE                 mov     esi, esi
.text:00412FB0
.text:00412FB0 loc_412FB0:                             ; CODE XREF: _strtoull+1B0↑j
.text:00412FB0                                         ; _strtoull+1B8↑j ...
.text:00412FB0                 mov     [esp+3Ch+var_24], 1
.text:00412FB8
.text:00412FB8 loc_412FB8:                             ; CODE XREF: _strtoull+219↓j
.text:00412FB8                 inc     [esp+3Ch+String]
.text:00412FBC                 jmp     loc_412EE0
.text:00412FC1 ; ---------------------------------------------------------------------------
.text:00412FC1
.text:00412FC1 loc_412FC1:                             ; CODE XREF: _strtoull+1F6↑j
.text:00412FC1                                         ; _strtoull+1FC↑j
.text:00412FC1                 mov     [esp+3Ch+var_1C], ebx
.text:00412FC5                 mov     [esp+3Ch+var_18], esi
.text:00412FC9                 jmp     short loc_412FB8
.text:00412FCB ; ---------------------------------------------------------------------------
.text:00412FCB
.text:00412FCB loc_412FCB:                             ; CODE XREF: _strtoull+171↑j
.text:00412FCB                                         ; _strtoull+17B↑j
.text:00412FCB                 mov     eax, [esp+3Ch+EndPtr]
.text:00412FCF                 test    eax, eax
.text:00412FD1                 jz      short loc_412FDE
.text:00412FD3                 mov     ecx, [esp+3Ch+String]
.text:00412FD7                 mov     ebp, [esp+3Ch+EndPtr]
.text:00412FDB                 mov     [ebp+0], ecx
.text:00412FDE
.text:00412FDE loc_412FDE:                             ; CODE XREF: _strtoull+221↑j
.text:00412FDE                 mov     esi, [esp+3Ch+var_24]
.text:00412FE2                 test    esi, esi
.text:00412FE4                 jnz     short loc_413006
.text:00412FE6                 mov     ebx, [esp+3Ch+var_20]
.text:00412FEA                 mov     eax, [esp+3Ch+var_1C]
.text:00412FEE                 mov     edx, [esp+3Ch+var_18]
.text:00412FF2                 test    ebx, ebx
.text:00412FF4                 jz      loc_412DEE
.text:00412FFA                 neg     eax
.text:00412FFC                 adc     edx, 0
.text:00412FFF                 neg     edx
.text:00413001                 jmp     loc_412DEE
.text:00413006 ; ---------------------------------------------------------------------------
.text:00413006
.text:00413006 loc_413006:                             ; CODE XREF: _strtoull+234↑j
.text:00413006                 call    _errno
.text:0041300B                 mov     edx, 0FFFFFFFFh
.text:00413010                 mov     dword ptr [eax], 22h ; '"'
.text:00413016                 mov     eax, 0FFFFFFFFh
.text:0041301B                 jmp     loc_412DEE
.text:00413020 ; ---------------------------------------------------------------------------
.text:00413020
.text:00413020 loc_413020:                             ; CODE XREF: _strtoull+163↑j
.text:00413020                 mov     ebp, ds:__mb_cur_max
.text:00413026                 movsx   ecx, dl
.text:00413029                 cmp     dword ptr [ebp+0], 1
.text:0041302D                 jz      short loc_4130A1
.text:0041302F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00413037                 mov     [esp+3Ch+C], ecx ; C
.text:0041303A                 call    _isctype
.text:0041303F                 mov     ebp, [esp+3Ch+String]
.text:00413043                 movzx   edx, byte ptr [ebp+0]
.text:00413047
.text:00413047 loc_413047:                             ; CODE XREF: _strtoull+303↓j
.text:00413047                 test    eax, eax
.text:00413049                 jz      short loc_413058
.text:0041304B                 movsx   eax, dl
.text:0041304E                 sub     eax, 37h ; '7'
.text:00413051
.text:00413051 loc_413051:                             ; CODE XREF: _strtoull+2D4↓j
.text:00413051                                         ; _strtoull+2DB↓j
.text:00413051                 mov     ebp, eax
.text:00413053                 jmp     loc_412F1F
.text:00413058 ; ---------------------------------------------------------------------------
.text:00413058
.text:00413058 loc_413058:                             ; CODE XREF: _strtoull+299↑j
.text:00413058                 mov     ecx, ds:__mb_cur_max
.text:0041305E                 movsx   edx, dl
.text:00413061                 cmp     dword ptr [ecx], 1
.text:00413064                 jz      short loc_41308D
.text:00413066                 mov     [esp+3Ch+Type], 2 ; Type
.text:0041306E                 mov     [esp+3Ch+C], edx ; C
.text:00413071                 call    _isctype
.text:00413076
.text:00413076 loc_413076:                             ; CODE XREF: _strtoull+2EF↓j
.text:00413076                 test    eax, eax
.text:00413078                 jz      short loc_413086
.text:0041307A                 mov     edx, [esp+3Ch+String]
.text:0041307E                 movsx   eax, byte ptr [edx]
.text:00413081                 sub     eax, 57h ; 'W'
.text:00413084                 jmp     short loc_413051
.text:00413086 ; ---------------------------------------------------------------------------
.text:00413086
.text:00413086 loc_413086:                             ; CODE XREF: _strtoull+2C8↑j
.text:00413086                 mov     eax, 0FFFFFFFFh
.text:0041308B                 jmp     short loc_413051
.text:0041308D ; ---------------------------------------------------------------------------
.text:0041308D
.text:0041308D loc_41308D:                             ; CODE XREF: _strtoull+2B4↑j
.text:0041308D                 mov     edi, ds:_pctype
.text:00413093                 mov     ebx, [edi]
.text:00413095                 movzx   esi, word ptr [ebx+edx*2]
.text:00413099                 and     esi, 2
.text:0041309C                 movzx   eax, si
.text:0041309F                 jmp     short loc_413076
.text:004130A1 ; ---------------------------------------------------------------------------
.text:004130A1
.text:004130A1 loc_4130A1:                             ; CODE XREF: _strtoull+27D↑j
.text:004130A1                 mov     edi, ds:_pctype
.text:004130A7                 mov     ebx, [edi]
.text:004130A9                 movzx   esi, word ptr [ebx+ecx*2]
.text:004130AD                 and     esi, 1
.text:004130B0                 movzx   eax, si
.text:004130B3                 jmp     short loc_413047
.text:004130B5 ; ---------------------------------------------------------------------------
.text:004130B5
.text:004130B5 loc_4130B5:                             ; CODE XREF: _strtoull+144↑j
.text:004130B5                 mov     ebx, ds:_pctype
.text:004130BB                 mov     esi, [ebx]
.text:004130BD                 movzx   edi, word ptr [esi+ecx*2]
.text:004130C1                 and     edi, 4
.text:004130C4                 movzx   eax, di
.text:004130C7                 jmp     loc_412F11
.text:004130CC ; ---------------------------------------------------------------------------
.text:004130CC
.text:004130CC loc_4130CC:                             ; CODE XREF: _strtoull+ED↑j
.text:004130CC                 mov     ebx, ds:__mb_cur_max
.text:004130D2                 movsx   ecx, dl
.text:004130D5                 cmp     dword ptr [ebx], 1
.text:004130D8                 jz      short loc_41314F
.text:004130DA                 mov     [esp+3Ch+C], ecx ; C
.text:004130DD                 mov     [esp+3Ch+Type], 1 ; Type
.text:004130E5                 call    _isctype
.text:004130EA                 mov     ecx, [esp+3Ch+String]
.text:004130EE                 movzx   edx, byte ptr [ecx]
.text:004130F1
.text:004130F1 loc_4130F1:                             ; CODE XREF: _strtoull+3B1↓j
.text:004130F1                 test    eax, eax
.text:004130F3                 jz      short loc_413100
.text:004130F5                 movsx   eax, dl
.text:004130F8                 sub     eax, 37h ; '7'
.text:004130FB                 jmp     loc_412EA9
.text:00413100 ; ---------------------------------------------------------------------------
.text:00413100
.text:00413100 loc_413100:                             ; CODE XREF: _strtoull+343↑j
.text:00413100                 mov     ebx, ds:__mb_cur_max
.text:00413106                 movsx   edx, dl
.text:00413109                 cmp     dword ptr [ebx], 1
.text:0041310C                 jz      short loc_41313B
.text:0041310E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00413116                 mov     [esp+3Ch+C], edx ; C
.text:00413119                 call    _isctype
.text:0041311E
.text:0041311E loc_41311E:                             ; CODE XREF: _strtoull+39D↓j
.text:0041311E                 test    eax, eax
.text:00413120                 jz      short loc_413131
.text:00413122                 mov     ecx, [esp+3Ch+String]
.text:00413126                 movsx   eax, byte ptr [ecx]
.text:00413129                 sub     eax, 57h ; 'W'
.text:0041312C                 jmp     loc_412EA9
.text:00413131 ; ---------------------------------------------------------------------------
.text:00413131
.text:00413131 loc_413131:                             ; CODE XREF: _strtoull+370↑j
.text:00413131                 mov     eax, 0FFFFFFFFh
.text:00413136                 jmp     loc_412EA9
.text:0041313B ; ---------------------------------------------------------------------------
.text:0041313B
.text:0041313B loc_41313B:                             ; CODE XREF: _strtoull+35C↑j
.text:0041313B                 mov     esi, ds:_pctype
.text:00413141                 mov     edi, [esi]
.text:00413143                 movzx   ebp, word ptr [edi+edx*2]
.text:00413147                 and     ebp, 2
.text:0041314A                 movzx   eax, bp
.text:0041314D                 jmp     short loc_41311E
.text:0041314F ; ---------------------------------------------------------------------------
.text:0041314F
.text:0041314F loc_41314F:                             ; CODE XREF: _strtoull+328↑j
.text:0041314F                 mov     esi, ds:_pctype
.text:00413155                 mov     edi, [esi]
.text:00413157                 movzx   ebp, word ptr [edi+ecx*2]
.text:0041315B                 and     ebp, 1
.text:0041315E                 movzx   eax, bp
.text:00413161                 jmp     short loc_4130F1
.text:00413163 ; ---------------------------------------------------------------------------
.text:00413163
.text:00413163 loc_413163:                             ; CODE XREF: _strtoull+CE↑j
.text:00413163                 mov     edi, ds:_pctype
.text:00413169                 mov     ebp, [edi]
.text:0041316B                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00413170                 and     ecx, 4
.text:00413173                 movzx   eax, cx
.text:00413176                 jmp     loc_412E9B
.text:0041317B ; ---------------------------------------------------------------------------
.text:0041317B
.text:0041317B loc_41317B:                             ; CODE XREF: _strtoull+C2↑j
.text:0041317B                 cmp     dl, 30h ; '0'
.text:0041317E                 jnz     loc_412E78
.text:00413184                 mov     esi, [esp+3Ch+String]
.text:00413188                 movzx   eax, byte ptr [esi+1]
.text:0041318C                 cmp     al, 58h ; 'X'
.text:0041318E                 jz      short loc_413198
.text:00413190                 cmp     al, 78h ; 'x'
.text:00413192                 jnz     loc_412E78
.text:00413198
.text:00413198 loc_413198:                             ; CODE XREF: _strtoull+3DE↑j
.text:00413198                 add     [esp+3Ch+String], 2
.text:0041319D                 mov     ebx, [esp+3Ch+String]
.text:004131A1                 movzx   edx, byte ptr [ebx]
.text:004131A4                 jmp     loc_412E78
.text:004131A9 ; ---------------------------------------------------------------------------
.text:004131A9
.text:004131A9 loc_4131A9:                             ; CODE XREF: _strtoull+AF↑j
.text:004131A9                 mov     edi, [esp+3Ch+String]
.text:004131AD                 movzx   eax, byte ptr [edi+1]
.text:004131B1                 cmp     al, 58h ; 'X'
.text:004131B3                 jz      short loc_4131C5
.text:004131B5                 mov     [esp+3Ch+Radix], 8
.text:004131BD                 cmp     al, 78h ; 'x'
.text:004131BF                 jnz     loc_412E6D
.text:004131C5
.text:004131C5 loc_4131C5:                             ; CODE XREF: _strtoull+403↑j
.text:004131C5                 mov     [esp+3Ch+Radix], 10h
.text:004131CD                 jmp     loc_412E6D
.text:004131D2 ; ---------------------------------------------------------------------------
.text:004131D2
.text:004131D2 loc_4131D2:                             ; CODE XREF: _strtoull+95↑j
.text:004131D2                                         ; _strtoull+9E↑j
.text:004131D2                 inc     [esp+3Ch+String]
.text:004131D6                 mov     eax, [esp+3Ch+String]
.text:004131DA                 movzx   edx, byte ptr [eax]
.text:004131DD                 jmp     loc_412E54
.text:004131E2 ; ---------------------------------------------------------------------------
.text:004131E2
.text:004131E2 loc_4131E2:                             ; CODE XREF: _strtoull+5A↑j
.text:004131E2                 mov     ebp, ds:_pctype
.text:004131E8                 mov     edi, [ebp+0]
.text:004131EB                 movzx   ebx, word ptr [edi+edx*2]
.text:004131EF                 and     ebx, 8
.text:004131F2                 movzx   eax, bx
.text:004131F5                 jmp     loc_412E26
.text:004131F5 _strtoull       endp
.text:004131F5
.text:004131F5 ; ---------------------------------------------------------------------------
.text:004131FA                 align 10h
.text:00413200                 jmp     ds:__set_app_type
.text:00413200 ; ---------------------------------------------------------------------------
.text:00413206                 align 10h
.text:00413210
.text:00413210 ; =============== S U B R O U T I N E =======================================
.text:00413210
.text:00413210 ; Attributes: thunk
.text:00413210
.text:00413210 ; void __cdecl cexit()
.text:00413210 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00413210                 jmp     ds:__imp__cexit
.text:00413210 _cexit          endp
.text:00413210
.text:00413210 ; ---------------------------------------------------------------------------
.text:00413216                 align 10h
.text:00413220
.text:00413220 ; =============== S U B R O U T I N E =======================================
.text:00413220
.text:00413220 ; Attributes: thunk
.text:00413220
.text:00413220 ; char ***__cdecl _p__environ()
.text:00413220 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00413220                 jmp     ds:__imp___p__environ
.text:00413220 __p__environ    endp
.text:00413220
.text:00413220 ; ---------------------------------------------------------------------------
.text:00413226                 align 10h
.text:00413230
.text:00413230 ; =============== S U B R O U T I N E =======================================
.text:00413230
.text:00413230 ; Attributes: thunk
.text:00413230
.text:00413230 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00413230 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00413230                                         ; TopLevelExceptionFilter+88↑p ...
.text:00413230
.text:00413230 Signal          = dword ptr  4
.text:00413230 Function        = dword ptr  8
.text:00413230
.text:00413230                 jmp     ds:__imp_signal
.text:00413230 signal          endp
.text:00413230
.text:00413230 ; ---------------------------------------------------------------------------
.text:00413236                 align 10h
.text:00413240
.text:00413240 ; =============== S U B R O U T I N E =======================================
.text:00413240
.text:00413240 ; Attributes: thunk
.text:00413240
.text:00413240 ; int *__cdecl _p__fmode()
.text:00413240 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00413240                 jmp     ds:__imp___p__fmode
.text:00413240 __p__fmode      endp
.text:00413240
.text:00413240 ; ---------------------------------------------------------------------------
.text:00413246                 align 10h
.text:00413250
.text:00413250 ; =============== S U B R O U T I N E =======================================
.text:00413250
.text:00413250 ; Attributes: thunk
.text:00413250
.text:00413250 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00413250 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00413250                                         ; sub_401080+90↑p ...
.text:00413250
.text:00413250 FileHandle      = dword ptr  4
.text:00413250 Mode            = dword ptr  8
.text:00413250
.text:00413250                 jmp     ds:__imp__setmode
.text:00413250 _setmode        endp
.text:00413250
.text:00413250 ; ---------------------------------------------------------------------------
.text:00413256                 align 10h
.text:00413260
.text:00413260 ; =============== S U B R O U T I N E =======================================
.text:00413260
.text:00413260 ; Attributes: thunk
.text:00413260
.text:00413260 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00413260                 jmp     ds:__imp___getmainargs
.text:00413260 __getmainargs   endp
.text:00413260
.text:00413260 ; ---------------------------------------------------------------------------
.text:00413266                 align 10h
.text:00413270
.text:00413270 ; =============== S U B R O U T I N E =======================================
.text:00413270
.text:00413270 ; Attributes: thunk
.text:00413270
.text:00413270 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00413270 setlocale       proc near               ; CODE XREF: sub_401E80+48↑p
.text:00413270
.text:00413270 Category        = dword ptr  4
.text:00413270 Locale          = dword ptr  8
.text:00413270
.text:00413270                 jmp     ds:__imp_setlocale
.text:00413270 setlocale       endp
.text:00413270
.text:00413270 ; ---------------------------------------------------------------------------
.text:00413276                 align 10h
.text:00413280
.text:00413280 ; =============== S U B R O U T I N E =======================================
.text:00413280
.text:00413280 ; Attributes: thunk
.text:00413280
.text:00413280 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:00413280 strtoul         proc near               ; CODE XREF: sub_402CD0+174↑p
.text:00413280
.text:00413280 String          = dword ptr  4
.text:00413280 EndPtr          = dword ptr  8
.text:00413280 Radix           = dword ptr  0Ch
.text:00413280
.text:00413280                 jmp     ds:__imp_strtoul
.text:00413280 strtoul         endp
.text:00413280
.text:00413280 ; ---------------------------------------------------------------------------
.text:00413286                 align 10h
.text:00413290
.text:00413290 ; =============== S U B R O U T I N E =======================================
.text:00413290
.text:00413290 ; Attributes: thunk
.text:00413290
.text:00413290 ; void __cdecl free(void *Block)
.text:00413290 free            proc near               ; CODE XREF: sub_401E80+5DD↑p
.text:00413290                                         ; sub_403230+21D↑p ...
.text:00413290
.text:00413290 Block           = dword ptr  4
.text:00413290
.text:00413290                 jmp     ds:__imp_free
.text:00413290 free            endp
.text:00413290
.text:00413290 ; ---------------------------------------------------------------------------
.text:00413296                 align 10h
.text:004132A0
.text:004132A0 ; =============== S U B R O U T I N E =======================================
.text:004132A0
.text:004132A0 ; Attributes: thunk
.text:004132A0
.text:004132A0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004132A0 memset          proc near               ; CODE XREF: sub_403800+A5↑p
.text:004132A0                                         ; .text:00408FC6↑p
.text:004132A0
.text:004132A0 Val             = dword ptr  8
.text:004132A0 Size            = dword ptr  0Ch
.text:004132A0
.text:004132A0                 jmp     ds:__imp_memset
.text:004132A0 memset          endp
.text:004132A0
.text:004132A0 ; ---------------------------------------------------------------------------
.text:004132A6                 align 10h
.text:004132B0
.text:004132B0 ; =============== S U B R O U T I N E =======================================
.text:004132B0
.text:004132B0 ; Attributes: thunk
.text:004132B0
.text:004132B0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004132B0 memcpy          proc near               ; CODE XREF: sub_403800+1B9↑p
.text:004132B0                                         ; sub_403D80+153↑p ...
.text:004132B0
.text:004132B0 Src             = dword ptr  8
.text:004132B0 Size            = dword ptr  0Ch
.text:004132B0
.text:004132B0                 jmp     ds:__imp_memcpy
.text:004132B0 memcpy          endp
.text:004132B0
.text:004132B0 ; ---------------------------------------------------------------------------
.text:004132B6                 align 10h
.text:004132C0
.text:004132C0 ; =============== S U B R O U T I N E =======================================
.text:004132C0
.text:004132C0 ; Attributes: thunk
.text:004132C0
.text:004132C0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:004132C0 strcpy          proc near               ; CODE XREF: sub_403D80+551↑p
.text:004132C0                                         ; sub_40B500+73↑p ...
.text:004132C0
.text:004132C0 Destination     = dword ptr  4
.text:004132C0 Source          = dword ptr  8
.text:004132C0
.text:004132C0                 jmp     ds:__imp_strcpy
.text:004132C0 strcpy          endp
.text:004132C0
.text:004132C0 ; ---------------------------------------------------------------------------
.text:004132C6                 align 10h
.text:004132D0
.text:004132D0 ; =============== S U B R O U T I N E =======================================
.text:004132D0
.text:004132D0 ; Attributes: thunk
.text:004132D0
.text:004132D0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004132D0 strcmp          proc near               ; CODE XREF: sub_403D80+6BD↑p
.text:004132D0                                         ; sub_40A924+180↑p ...
.text:004132D0
.text:004132D0 Str1            = dword ptr  4
.text:004132D0 Str2            = dword ptr  8
.text:004132D0
.text:004132D0                 jmp     ds:__imp_strcmp
.text:004132D0 strcmp          endp
.text:004132D0
.text:004132D0 ; ---------------------------------------------------------------------------
.text:004132D6                 align 10h
.text:004132E0
.text:004132E0 ; =============== S U B R O U T I N E =======================================
.text:004132E0
.text:004132E0 ; Attributes: thunk
.text:004132E0
.text:004132E0 ; __time32_t __cdecl time(__time32_t *const Time)
.text:004132E0 time            proc near               ; CODE XREF: sub_403D80+361↑p
.text:004132E0                                         ; sub_403D80+C9A↑p
.text:004132E0
.text:004132E0 Time            = dword ptr  4
.text:004132E0
.text:004132E0                 jmp     ds:__imp_time
.text:004132E0 time            endp
.text:004132E0
.text:004132E0 ; ---------------------------------------------------------------------------
.text:004132E6                 align 10h
.text:004132F0
.text:004132F0 ; =============== S U B R O U T I N E =======================================
.text:004132F0
.text:004132F0 ; Attributes: thunk
.text:004132F0
.text:004132F0 ; int *__cdecl errno()
.text:004132F0 _errno          proc near               ; CODE XREF: sub_402BE0+92↑p
.text:004132F0                                         ; sub_402CD0+9F↑p ...
.text:004132F0                 jmp     ds:__imp__errno
.text:004132F0 _errno          endp
.text:004132F0
.text:004132F0 ; ---------------------------------------------------------------------------
.text:004132F6                 align 10h
.text:00413300
.text:00413300 ; =============== S U B R O U T I N E =======================================
.text:00413300
.text:00413300 ; Attributes: thunk
.text:00413300
.text:00413300 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00413300 sprintf         proc near               ; CODE XREF: sub_403D80+1BE↑p
.text:00413300                                         ; sub_409170+2C1↑p ...
.text:00413300
.text:00413300 Buffer          = dword ptr  4
.text:00413300 Format          = dword ptr  8
.text:00413300
.text:00413300                 jmp     ds:__imp_sprintf
.text:00413300 sprintf         endp
.text:00413300
.text:00413300 ; ---------------------------------------------------------------------------
.text:00413306                 align 10h
.text:00413310
.text:00413310 ; =============== S U B R O U T I N E =======================================
.text:00413310
.text:00413310 ; Attributes: noreturn thunk
.text:00413310
.text:00413310 _assert         proc near               ; CODE XREF: sub_403D80+D1C↑p
.text:00413310                                         ; sub_407D90+C88↑p ...
.text:00413310                 jmp     ds:__imp__assert
.text:00413310 _assert         endp
.text:00413310
.text:00413310 ; ---------------------------------------------------------------------------
.text:00413316                 align 10h
.text:00413320
.text:00413320 ; =============== S U B R O U T I N E =======================================
.text:00413320
.text:00413320 ; Attributes: thunk
.text:00413320
.text:00413320 ; int __cdecl setjmp(jmp_buf Buf)
.text:00413320 _setjmp         proc near               ; CODE XREF: sub_403090+3E↑p
.text:00413320
.text:00413320 Buf             = dword ptr  4
.text:00413320
.text:00413320                 jmp     ds:__imp__setjmp
.text:00413320 _setjmp         endp
.text:00413320
.text:00413320 ; ---------------------------------------------------------------------------
.text:00413326                 align 10h
.text:00413330
.text:00413330 ; =============== S U B R O U T I N E =======================================
.text:00413330
.text:00413330 ; Attributes: noreturn thunk
.text:00413330
.text:00413330 ; void __cdecl __noreturn longjmp(jmp_buf Buf, int Value)
.text:00413330 longjmp         proc near               ; CODE XREF: Function+12↑p
.text:00413330
.text:00413330 Buf             = dword ptr  4
.text:00413330 Value           = dword ptr  8
.text:00413330
.text:00413330                 jmp     ds:__imp_longjmp
.text:00413330 longjmp         endp
.text:00413330
.text:00413330 ; ---------------------------------------------------------------------------
.text:00413336                 align 10h
.text:00413340
.text:00413340 ; =============== S U B R O U T I N E =======================================
.text:00413340
.text:00413340 ; Attributes: noreturn thunk
.text:00413340
.text:00413340 ; void __cdecl __noreturn exit(int Code)
.text:00413340 exit            proc near               ; CODE XREF: sub_401E80:loc_40208D↑p
.text:00413340                                         ; sub_4024F0+3B↑p ...
.text:00413340
.text:00413340 Code            = dword ptr  4
.text:00413340
.text:00413340                 jmp     ds:__imp_exit
.text:00413340 exit            endp
.text:00413340
.text:00413340 ; ---------------------------------------------------------------------------
.text:00413346                 align 10h
.text:00413350
.text:00413350 ; =============== S U B R O U T I N E =======================================
.text:00413350
.text:00413350 ; Attributes: thunk
.text:00413350
.text:00413350 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00413350 fputs           proc near               ; CODE XREF: sub_401E80+2A3↑p
.text:00413350                                         ; sub_401E80+2C5↑p ...
.text:00413350
.text:00413350 Buffer          = dword ptr  4
.text:00413350 Stream          = dword ptr  8
.text:00413350
.text:00413350                 jmp     ds:__imp_fputs
.text:00413350 fputs           endp
.text:00413350
.text:00413350 ; ---------------------------------------------------------------------------
.text:00413356                 align 10h
.text:00413360
.text:00413360 ; =============== S U B R O U T I N E =======================================
.text:00413360
.text:00413360 ; Attributes: thunk
.text:00413360
.text:00413360 ; int printf(const char *const Format, ...)
.text:00413360 printf          proc near               ; CODE XREF: sub_401E80+281↑p
.text:00413360                                         ; sub_401E80+2E2↑p ...
.text:00413360
.text:00413360 Format          = dword ptr  4
.text:00413360
.text:00413360                 jmp     ds:__imp_printf
.text:00413360 printf          endp
.text:00413360
.text:00413360 ; ---------------------------------------------------------------------------
.text:00413366                 align 10h
.text:00413370
.text:00413370 ; =============== S U B R O U T I N E =======================================
.text:00413370
.text:00413370 ; Attributes: thunk
.text:00413370
.text:00413370 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00413370 fprintf         proc near               ; CODE XREF: sub_401E80+201↑p
.text:00413370                                         ; sub_4024F0+33↑p ...
.text:00413370
.text:00413370 Stream          = dword ptr  4
.text:00413370 Format          = dword ptr  8
.text:00413370
.text:00413370                 jmp     ds:__imp_fprintf
.text:00413370 fprintf         endp
.text:00413370
.text:00413370 ; ---------------------------------------------------------------------------
.text:00413376                 align 10h
.text:00413380
.text:00413380 ; =============== S U B R O U T I N E =======================================
.text:00413380
.text:00413380 ; Attributes: thunk
.text:00413380
.text:00413380 ; char *__cdecl strchr(const char *Str, int Val)
.text:00413380 strchr          proc near               ; CODE XREF: sub_403800+FF↑p
.text:00413380                                         ; sub_406980+539↑p ...
.text:00413380
.text:00413380 Str             = dword ptr  4
.text:00413380 Val             = dword ptr  8
.text:00413380
.text:00413380                 jmp     ds:__imp_strchr
.text:00413380 strchr          endp
.text:00413380
.text:00413380 ; ---------------------------------------------------------------------------
.text:00413386                 align 10h
.text:00413390
.text:00413390 ; =============== S U B R O U T I N E =======================================
.text:00413390
.text:00413390 ; Attributes: thunk
.text:00413390
.text:00413390 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00413390 _lseeki64       proc near               ; CODE XREF: sub_403230+10C↑p
.text:00413390                                         ; sub_403D80+83↑p ...
.text:00413390
.text:00413390 FileHandle      = dword ptr  4
.text:00413390 Offset          = qword ptr  8
.text:00413390 Origin          = dword ptr  10h
.text:00413390
.text:00413390                 jmp     ds:__imp__lseeki64
.text:00413390 _lseeki64       endp
.text:00413390
.text:00413390 ; ---------------------------------------------------------------------------
.text:00413396                 align 10h
.text:004133A0
.text:004133A0 ; =============== S U B R O U T I N E =======================================
.text:004133A0
.text:004133A0 ; Attributes: thunk
.text:004133A0
.text:004133A0 ; int __cdecl commit(int FileHandle)
.text:004133A0 _commit         proc near               ; CODE XREF: sub_403800+211↑p
.text:004133A0                                         ; sub_403800+341↑p ...
.text:004133A0
.text:004133A0 FileHandle      = dword ptr  4
.text:004133A0
.text:004133A0                 jmp     ds:__imp__commit
.text:004133A0 _commit         endp
.text:004133A0
.text:004133A0 ; ---------------------------------------------------------------------------
.text:004133A6                 align 10h
.text:004133B0
.text:004133B0 ; =============== S U B R O U T I N E =======================================
.text:004133B0
.text:004133B0 ; Attributes: noreturn thunk
.text:004133B0
.text:004133B0 ; void __cdecl __noreturn abort()
.text:004133B0 abort           proc near               ; CODE XREF: sub_406630:loc_4067EA↑p
.text:004133B0                                         ; sub_407B10:loc_407BAC↑p ...
.text:004133B0                 jmp     ds:__imp_abort
.text:004133B0 abort           endp
.text:004133B0
.text:004133B0 ; ---------------------------------------------------------------------------
.text:004133B6                 align 10h
.text:004133C0
.text:004133C0 ; =============== S U B R O U T I N E =======================================
.text:004133C0
.text:004133C0 ; Attributes: thunk
.text:004133C0
.text:004133C0 ; size_t __cdecl strlen(const char *Str)
.text:004133C0 strlen          proc near               ; CODE XREF: sub_4054F0+8C3↑p
.text:004133C0                                         ; sub_4054F0+A24↑p ...
.text:004133C0
.text:004133C0 Str             = dword ptr  4
.text:004133C0
.text:004133C0                 jmp     ds:__imp_strlen
.text:004133C0 strlen          endp
.text:004133C0
.text:004133C0 ; ---------------------------------------------------------------------------
.text:004133C6                 align 10h
.text:004133D0
.text:004133D0 ; =============== S U B R O U T I N E =======================================
.text:004133D0
.text:004133D0 ; Attributes: thunk
.text:004133D0
.text:004133D0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004133D0 iswctype        proc near               ; CODE XREF: sub_4054F0+78B↑p
.text:004133D0
.text:004133D0 C               = word ptr  4
.text:004133D0 Type            = word ptr  8
.text:004133D0
.text:004133D0                 jmp     ds:__imp_iswctype
.text:004133D0 iswctype        endp
.text:004133D0
.text:004133D0 ; ---------------------------------------------------------------------------
.text:004133D6                 align 10h
.text:004133E0
.text:004133E0 ; =============== S U B R O U T I N E =======================================
.text:004133E0
.text:004133E0 ; Attributes: thunk
.text:004133E0
.text:004133E0 ; int __cdecl isctype(int C, int Type)
.text:004133E0 _isctype        proc near               ; CODE XREF: sub_4054F0+610↑p
.text:004133E0                                         ; sub_407D90+72↑p ...
.text:004133E0
.text:004133E0 C               = dword ptr  4
.text:004133E0 Type            = dword ptr  8
.text:004133E0
.text:004133E0                 jmp     ds:__imp__isctype
.text:004133E0 _isctype        endp
.text:004133E0
.text:004133E0 ; ---------------------------------------------------------------------------
.text:004133E6                 align 10h
.text:004133F0
.text:004133F0 ; =============== S U B R O U T I N E =======================================
.text:004133F0
.text:004133F0 ; Attributes: thunk
.text:004133F0
.text:004133F0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004133F0 strncmp         proc near               ; CODE XREF: sub_406980+30F↑p
.text:004133F0                                         ; sub_406980+769↑p ...
.text:004133F0
.text:004133F0 Str1            = dword ptr  4
.text:004133F0 Str2            = dword ptr  8
.text:004133F0 MaxCount        = dword ptr  0Ch
.text:004133F0
.text:004133F0                 jmp     ds:__imp_strncmp
.text:004133F0 strncmp         endp
.text:004133F0
.text:004133F0 ; ---------------------------------------------------------------------------
.text:004133F6                 align 10h
.text:00413400
.text:00413400 ; =============== S U B R O U T I N E =======================================
.text:00413400
.text:00413400 ; Attributes: thunk
.text:00413400
.text:00413400 ; char *__cdecl getenv(const char *VarName)
.text:00413400 getenv          proc near               ; CODE XREF: sub_406980+C27↑p
.text:00413400                                         ; .text:00409E97↑p ...
.text:00413400
.text:00413400 VarName         = dword ptr  4
.text:00413400
.text:00413400                 jmp     ds:__imp_getenv
.text:00413400 getenv          endp
.text:00413400
.text:00413400 ; ---------------------------------------------------------------------------
.text:00413406                 align 10h
.text:00413410
.text:00413410 ; =============== S U B R O U T I N E =======================================
.text:00413410
.text:00413410 ; Attributes: thunk
.text:00413410
.text:00413410 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00413410 vfprintf        proc near               ; CODE XREF: sub_407B10+C1↑p
.text:00413410                                         ; sub_40A820+49↑p ...
.text:00413410
.text:00413410 Stream          = dword ptr  4
.text:00413410 Format          = dword ptr  8
.text:00413410 ArgList         = dword ptr  0Ch
.text:00413410
.text:00413410                 jmp     ds:__imp_vfprintf
.text:00413410 vfprintf        endp
.text:00413410
.text:00413410 ; ---------------------------------------------------------------------------
.text:00413416                 align 10h
.text:00413420
.text:00413420 ; =============== S U B R O U T I N E =======================================
.text:00413420
.text:00413420 ; Attributes: thunk
.text:00413420
.text:00413420 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00413420 _flsbuf         proc near               ; CODE XREF: sub_407B10+128↑p
.text:00413420                                         ; sub_407B10+13A↑p ...
.text:00413420
.text:00413420 File            = dword ptr  8
.text:00413420
.text:00413420                 jmp     ds:__imp__flsbuf
.text:00413420 _flsbuf         endp
.text:00413420
.text:00413420 ; ---------------------------------------------------------------------------
.text:00413426                 align 10h
.text:00413430
.text:00413430 ; =============== S U B R O U T I N E =======================================
.text:00413430
.text:00413430 ; Attributes: thunk
.text:00413430
.text:00413430 ; int __cdecl fclose(FILE *Stream)
.text:00413430 fclose          proc near               ; CODE XREF: sub_408B90+27↑p
.text:00413430                                         ; .text:0040F8BE↑p
.text:00413430
.text:00413430 Stream          = dword ptr  4
.text:00413430
.text:00413430                 jmp     ds:__imp_fclose
.text:00413430 fclose          endp
.text:00413430
.text:00413430 ; ---------------------------------------------------------------------------
.text:00413436                 align 10h
.text:00413440
.text:00413440 ; =============== S U B R O U T I N E =======================================
.text:00413440
.text:00413440 ; Attributes: thunk
.text:00413440
.text:00413440 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00413440 calloc          proc near               ; CODE XREF: .text:00409003↑p
.text:00413440                                         ; sub_40D740+AC↑p
.text:00413440
.text:00413440 Count           = dword ptr  4
.text:00413440 Size            = dword ptr  8
.text:00413440
.text:00413440                 jmp     ds:__imp_calloc
.text:00413440 calloc          endp
.text:00413440
.text:00413440 ; ---------------------------------------------------------------------------
.text:00413446                 align 10h
.text:00413450
.text:00413450 ; =============== S U B R O U T I N E =======================================
.text:00413450
.text:00413450 ; Attributes: thunk
.text:00413450
.text:00413450 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00413450 realloc         proc near               ; CODE XREF: .text:00408F00↑p
.text:00413450                                         ; sub_408F30+16↑p ...
.text:00413450
.text:00413450 Block           = dword ptr  4
.text:00413450 Size            = dword ptr  8
.text:00413450
.text:00413450                 jmp     ds:__imp_realloc
.text:00413450 realloc         endp
.text:00413450
.text:00413450 ; ---------------------------------------------------------------------------
.text:00413456                 align 10h
.text:00413460
.text:00413460 ; =============== S U B R O U T I N E =======================================
.text:00413460
.text:00413460 ; Attributes: thunk
.text:00413460
.text:00413460 ; void *__cdecl malloc(size_t Size)
.text:00413460 malloc          proc near               ; CODE XREF: sub_408E60+24↑p
.text:00413460                                         ; sub_408EA0+E↑p ...
.text:00413460
.text:00413460 Size            = dword ptr  4
.text:00413460
.text:00413460                 jmp     ds:__imp_malloc
.text:00413460 malloc          endp
.text:00413460
.text:00413460 ; ---------------------------------------------------------------------------
.text:00413466                 align 10h
.text:00413470
.text:00413470 ; =============== S U B R O U T I N E =======================================
.text:00413470
.text:00413470 ; Attributes: thunk
.text:00413470
.text:00413470 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00413470 memmove         proc near               ; CODE XREF: sub_409170+2E5↑p
.text:00413470
.text:00413470 Src             = dword ptr  8
.text:00413470 Size            = dword ptr  0Ch
.text:00413470
.text:00413470                 jmp     ds:__imp_memmove
.text:00413470 memmove         endp
.text:00413470
.text:00413470 ; ---------------------------------------------------------------------------
.text:00413476                 align 10h
.text:00413480
.text:00413480 ; =============== S U B R O U T I N E =======================================
.text:00413480
.text:00413480 ; Attributes: thunk
.text:00413480
.text:00413480 ; struct lconv *__cdecl localeconv()
.text:00413480 localeconv      proc near               ; CODE XREF: sub_409170+A6↑p
.text:00413480                 jmp     ds:__imp_localeconv
.text:00413480 localeconv      endp
.text:00413480
.text:00413480 ; ---------------------------------------------------------------------------
.text:00413486                 align 10h
.text:00413490
.text:00413490 ; =============== S U B R O U T I N E =======================================
.text:00413490
.text:00413490 ; Attributes: thunk
.text:00413490
.text:00413490 ; int __cdecl fflush(FILE *Stream)
.text:00413490 fflush          proc near               ; CODE XREF: sub_40A820+19↑p
.text:00413490                                         ; sub_40A820+81↑p ...
.text:00413490
.text:00413490 Stream          = dword ptr  4
.text:00413490
.text:00413490                 jmp     ds:__imp_fflush
.text:00413490 fflush          endp
.text:00413490
.text:00413490 ; ---------------------------------------------------------------------------
.text:00413496                 align 10h
.text:004134A0
.text:004134A0 ; =============== S U B R O U T I N E =======================================
.text:004134A0
.text:004134A0 ; Attributes: thunk
.text:004134A0
.text:004134A0 ; char *__cdecl strerror(int ErrorMessage)
.text:004134A0 strerror        proc near               ; CODE XREF: sub_40A820+A5↑p
.text:004134A0                                         ; sub_40A924+10F↑p
.text:004134A0
.text:004134A0 ErrorMessage    = dword ptr  4
.text:004134A0
.text:004134A0                 jmp     ds:__imp_strerror
.text:004134A0 strerror        endp
.text:004134A0
.text:004134A0 ; ---------------------------------------------------------------------------
.text:004134A6                 align 10h
.text:004134B0
.text:004134B0 ; =============== S U B R O U T I N E =======================================
.text:004134B0
.text:004134B0 ; Attributes: thunk
.text:004134B0
.text:004134B0 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:004134B0 _chmod_0        proc near               ; CODE XREF: sub_40AB70+9B↑p
.text:004134B0
.text:004134B0 FileName        = dword ptr  4
.text:004134B0 AccessMode      = dword ptr  8
.text:004134B0
.text:004134B0                 jmp     ds:__imp__chmod_0
.text:004134B0 _chmod_0        endp
.text:004134B0
.text:004134B0 ; ---------------------------------------------------------------------------
.text:004134B6                 align 10h
.text:004134C0
.text:004134C0 ; =============== S U B R O U T I N E =======================================
.text:004134C0
.text:004134C0 ; Attributes: thunk
.text:004134C0
.text:004134C0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:004134C0 _get_osfhandle  proc near               ; CODE XREF: sub_40ACE0+22↑p
.text:004134C0                                         ; sub_40AE60+12↑p ...
.text:004134C0
.text:004134C0 FileHandle      = dword ptr  4
.text:004134C0
.text:004134C0                 jmp     ds:__imp__get_osfhandle
.text:004134C0 _get_osfhandle  endp
.text:004134C0
.text:004134C0 ; ---------------------------------------------------------------------------
.text:004134C6                 align 10h
.text:004134D0
.text:004134D0 ; =============== S U B R O U T I N E =======================================
.text:004134D0
.text:004134D0 ; Attributes: thunk
.text:004134D0
.text:004134D0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:004134D0 _filelengthi64  proc near               ; CODE XREF: sub_40AE60+113↑p
.text:004134D0                                         ; sub_410590+1F↑p
.text:004134D0
.text:004134D0 FileHandle      = dword ptr  4
.text:004134D0
.text:004134D0                 jmp     ds:__imp__filelengthi64
.text:004134D0 _filelengthi64  endp
.text:004134D0
.text:004134D0 ; ---------------------------------------------------------------------------
.text:004134D6                 align 10h
.text:004134E0
.text:004134E0 ; =============== S U B R O U T I N E =======================================
.text:004134E0
.text:004134E0 ; Attributes: thunk
.text:004134E0
.text:004134E0 ; int __cdecl flushall()
.text:004134E0 _flushall       proc near               ; CODE XREF: j__flushall↑j
.text:004134E0                 jmp     ds:__imp__flushall
.text:004134E0 _flushall       endp
.text:004134E0
.text:004134E0 ; ---------------------------------------------------------------------------
.text:004134E6                 align 10h
.text:004134F0
.text:004134F0 ; =============== S U B R O U T I N E =======================================
.text:004134F0
.text:004134F0 ; Attributes: thunk
.text:004134F0
.text:004134F0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:004134F0 strcat          proc near               ; CODE XREF: sub_40B500+98↑p
.text:004134F0                                         ; sub_40D380+74↑p ...
.text:004134F0
.text:004134F0 Destination     = dword ptr  4
.text:004134F0 Source          = dword ptr  8
.text:004134F0
.text:004134F0                 jmp     ds:__imp_strcat
.text:004134F0 strcat          endp
.text:004134F0
.text:004134F0 ; ---------------------------------------------------------------------------
.text:004134F6                 align 10h
.text:00413500
.text:00413500 ; =============== S U B R O U T I N E =======================================
.text:00413500
.text:00413500 ; Attributes: thunk
.text:00413500
.text:00413500 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00413500 strstr          proc near               ; CODE XREF: sub_40BB50+3BF↑p
.text:00413500                                         ; sub_40BB50+3DC↑p ...
.text:00413500
.text:00413500 Str             = dword ptr  4
.text:00413500 SubStr          = dword ptr  8
.text:00413500
.text:00413500                 jmp     ds:__imp_strstr
.text:00413500 strstr          endp
.text:00413500
.text:00413500 ; ---------------------------------------------------------------------------
.text:00413506                 align 10h
.text:00413510
.text:00413510 ; =============== S U B R O U T I N E =======================================
.text:00413510
.text:00413510 ; Attributes: thunk
.text:00413510
.text:00413510 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00413510 strrchr         proc near               ; CODE XREF: sub_40BB50+CB↑p
.text:00413510                                         ; sub_40BB50+3A7↑p ...
.text:00413510
.text:00413510 Str             = dword ptr  4
.text:00413510
.text:00413510                 jmp     ds:__imp_strrchr
.text:00413510 strrchr         endp
.text:00413510
.text:00413510 ; ---------------------------------------------------------------------------
.text:00413516                 align 10h
.text:00413520
.text:00413520 ; =============== S U B R O U T I N E =======================================
.text:00413520
.text:00413520 ; Attributes: thunk
.text:00413520
.text:00413520 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00413520 strncpy         proc near               ; CODE XREF: sub_40D740+BE↑p
.text:00413520                                         ; .text:0040DFBA↑p ...
.text:00413520
.text:00413520 Destination     = dword ptr  4
.text:00413520 Source          = dword ptr  8
.text:00413520 Count           = dword ptr  0Ch
.text:00413520
.text:00413520                 jmp     ds:__imp_strncpy
.text:00413520 strncpy         endp
.text:00413520
.text:00413520 ; ---------------------------------------------------------------------------
.text:00413526                 align 10h
.text:00413530
.text:00413530 ; =============== S U B R O U T I N E =======================================
.text:00413530
.text:00413530 ; Attributes: thunk
.text:00413530
.text:00413530 ; int __cdecl toupper(int C)
.text:00413530 toupper         proc near               ; CODE XREF: sub_40D740+10E↑p
.text:00413530
.text:00413530 C               = dword ptr  4
.text:00413530
.text:00413530                 jmp     ds:__imp_toupper
.text:00413530 toupper         endp
.text:00413530
.text:00413530 ; ---------------------------------------------------------------------------
.text:00413536                 align 10h
.text:00413540
.text:00413540 ; =============== S U B R O U T I N E =======================================
.text:00413540
.text:00413540 ; Attributes: thunk
.text:00413540
.text:00413540 ; int __cdecl isalpha(int C)
.text:00413540 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00413540
.text:00413540 C               = dword ptr  4
.text:00413540
.text:00413540                 jmp     ds:__imp_isalpha
.text:00413540 isalpha         endp
.text:00413540
.text:00413540 ; ---------------------------------------------------------------------------
.text:00413546                 align 10h
.text:00413550
.text:00413550 ; =============== S U B R O U T I N E =======================================
.text:00413550
.text:00413550 ; Attributes: thunk
.text:00413550
.text:00413550 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00413550 _stricmp_0      proc near               ; CODE XREF: .text:0040EAF4↑p
.text:00413550
.text:00413550 String1         = dword ptr  4
.text:00413550 String2         = dword ptr  8
.text:00413550
.text:00413550                 jmp     ds:__imp__stricmp_0
.text:00413550 _stricmp_0      endp
.text:00413550
.text:00413550 ; ---------------------------------------------------------------------------
.text:00413556                 align 10h
.text:00413560
.text:00413560 ; =============== S U B R O U T I N E =======================================
.text:00413560
.text:00413560 ; Attributes: thunk
.text:00413560
.text:00413560 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00413560 sscanf          proc near               ; CODE XREF: .text:0040EEFE↑p
.text:00413560
.text:00413560 Buffer          = dword ptr  4
.text:00413560 Format          = dword ptr  8
.text:00413560
.text:00413560                 jmp     ds:__imp_sscanf
.text:00413560 sscanf          endp
.text:00413560
.text:00413560 ; ---------------------------------------------------------------------------
.text:00413566                 align 10h
.text:00413570
.text:00413570 ; =============== S U B R O U T I N E =======================================
.text:00413570
.text:00413570 ; Attributes: thunk
.text:00413570
.text:00413570 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00413570 strspn          proc near               ; CODE XREF: .text:0040ED4A↑p
.text:00413570                                         ; .text:0040EF64↑p ...
.text:00413570
.text:00413570 Str             = dword ptr  4
.text:00413570 Control         = dword ptr  8
.text:00413570
.text:00413570                 jmp     ds:__imp_strspn
.text:00413570 strspn          endp
.text:00413570
.text:00413570 ; ---------------------------------------------------------------------------
.text:00413576                 align 10h
.text:00413580
.text:00413580 ; =============== S U B R O U T I N E =======================================
.text:00413580
.text:00413580 ; Attributes: thunk
.text:00413580
.text:00413580 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00413580 fopen           proc near               ; CODE XREF: sub_40F7FF+26↑p
.text:00413580                                         ; sub_40F7FF+99↑p
.text:00413580
.text:00413580 FileName        = dword ptr  4
.text:00413580 Mode            = dword ptr  8
.text:00413580
.text:00413580                 jmp     ds:__imp_fopen
.text:00413580 fopen           endp
.text:00413580
.text:00413580 ; ---------------------------------------------------------------------------
.text:00413586                 align 10h
.text:00413590
.text:00413590 ; =============== S U B R O U T I N E =======================================
.text:00413590
.text:00413590 ; Attributes: thunk
.text:00413590
.text:00413590 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00413590 strpbrk         proc near               ; CODE XREF: sub_4105F0+87↑p
.text:00413590
.text:00413590 Str             = dword ptr  4
.text:00413590 Control         = dword ptr  8
.text:00413590
.text:00413590                 jmp     ds:__imp_strpbrk
.text:00413590 strpbrk         endp
.text:00413590
.text:00413590 ; ---------------------------------------------------------------------------
.text:00413596                 align 10h
.text:004135A0
.text:004135A0 ; =============== S U B R O U T I N E =======================================
.text:004135A0
.text:004135A0 ; Attributes: thunk
.text:004135A0
.text:004135A0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:004135A0 _fdopen         proc near               ; CODE XREF: sub_410690+69↑p
.text:004135A0
.text:004135A0 FileHandle      = dword ptr  4
.text:004135A0 Format          = dword ptr  8
.text:004135A0
.text:004135A0                 jmp     ds:__imp__fdopen
.text:004135A0 _fdopen         endp
.text:004135A0
.text:004135A0 ; ---------------------------------------------------------------------------
.text:004135A6                 align 10h
.text:004135B0
.text:004135B0 ; =============== S U B R O U T I N E =======================================
.text:004135B0
.text:004135B0 ; Attributes: thunk
.text:004135B0
.text:004135B0 ; int __cdecl close_0(int FileHandle)
.text:004135B0 _close_0        proc near               ; CODE XREF: sub_410690+90↑p
.text:004135B0
.text:004135B0 FileHandle      = dword ptr  4
.text:004135B0
.text:004135B0                 jmp     ds:__imp__close_0
.text:004135B0 _close_0        endp
.text:004135B0
.text:004135B0 ; ---------------------------------------------------------------------------
.text:004135B6                 align 10h
.text:004135C0
.text:004135C0 ; =============== S U B R O U T I N E =======================================
.text:004135C0
.text:004135C0 ; Attributes: thunk
.text:004135C0
.text:004135C0 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:004135C0 _open_0         proc near               ; CODE XREF: sub_410AE0:loc_410E70↑p
.text:004135C0
.text:004135C0 FileName        = dword ptr  4
.text:004135C0 OpenFlag        = dword ptr  8
.text:004135C0
.text:004135C0                 jmp     ds:__imp__open_0
.text:004135C0 _open_0         endp
.text:004135C0
.text:004135C0 ; ---------------------------------------------------------------------------
.text:004135C6                 align 10h
.text:004135D0
.text:004135D0 ; =============== S U B R O U T I N E =======================================
.text:004135D0
.text:004135D0 ; Attributes: thunk
.text:004135D0
.text:004135D0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004135D0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004135D0
.text:004135D0 lpTopLevelExceptionFilter= dword ptr  4
.text:004135D0
.text:004135D0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004135D0 SetUnhandledExceptionFilter endp
.text:004135D0
.text:004135D0 ; ---------------------------------------------------------------------------
.text:004135D6                 align 10h
.text:004135E0
.text:004135E0 ; =============== S U B R O U T I N E =======================================
.text:004135E0
.text:004135E0 ; Attributes: noreturn thunk
.text:004135E0
.text:004135E0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004135E0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004135E0
.text:004135E0 uExitCode       = dword ptr  4
.text:004135E0
.text:004135E0                 jmp     ds:__imp_ExitProcess
.text:004135E0 ExitProcess     endp
.text:004135E0
.text:004135E0 ; ---------------------------------------------------------------------------
.text:004135E6                 align 10h
.text:004135F0
.text:004135F0 ; =============== S U B R O U T I N E =======================================
.text:004135F0
.text:004135F0 ; Attributes: thunk
.text:004135F0
.text:004135F0 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:004135F0 DeleteFileA     proc near               ; CODE XREF: sub_40AB70+50↑p
.text:004135F0
.text:004135F0 lpFileName      = dword ptr  4
.text:004135F0
.text:004135F0                 jmp     ds:__imp_DeleteFileA
.text:004135F0 DeleteFileA     endp
.text:004135F0
.text:004135F0 ; ---------------------------------------------------------------------------
.text:004135F6                 align 10h
.text:00413600
.text:00413600 ; =============== S U B R O U T I N E =======================================
.text:00413600
.text:00413600 ; Attributes: thunk
.text:00413600
.text:00413600 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:00413600 SetEndOfFile    proc near               ; CODE XREF: sub_40ACE0+53↑p
.text:00413600
.text:00413600 hFile           = dword ptr  4
.text:00413600
.text:00413600                 jmp     ds:__imp_SetEndOfFile
.text:00413600 SetEndOfFile    endp
.text:00413600
.text:00413600 ; ---------------------------------------------------------------------------
.text:00413606                 align 10h
.text:00413610
.text:00413610 ; =============== S U B R O U T I N E =======================================
.text:00413610
.text:00413610 ; Attributes: thunk
.text:00413610
.text:00413610 ; BOOL __stdcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:00413610 MoveFileA       proc near               ; CODE XREF: sub_40AD90+36↑p
.text:00413610
.text:00413610 lpExistingFileName= dword ptr  4
.text:00413610 lpNewFileName   = dword ptr  8
.text:00413610
.text:00413610                 jmp     ds:__imp_MoveFileA
.text:00413610 MoveFileA       endp
.text:00413610
.text:00413610 ; ---------------------------------------------------------------------------
.text:00413616                 align 10h
.text:00413620
.text:00413620 ; =============== S U B R O U T I N E =======================================
.text:00413620
.text:00413620 ; Attributes: thunk
.text:00413620
.text:00413620 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:00413620 GetSystemInfo   proc near               ; CODE XREF: sub_40AE10+3A↑p
.text:00413620
.text:00413620 lpSystemInfo    = dword ptr  4
.text:00413620
.text:00413620                 jmp     ds:__imp_GetSystemInfo
.text:00413620 GetSystemInfo   endp
.text:00413620
.text:00413620 ; ---------------------------------------------------------------------------
.text:00413626                 align 10h
.text:00413630
.text:00413630 ; =============== S U B R O U T I N E =======================================
.text:00413630
.text:00413630 ; Attributes: thunk
.text:00413630
.text:00413630 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00413630 UnlockFile      proc near               ; CODE XREF: sub_40AE60+B4↑p
.text:00413630                                         ; sub_410590+40↑p
.text:00413630
.text:00413630 hFile           = dword ptr  4
.text:00413630 dwFileOffsetLow = dword ptr  8
.text:00413630 dwFileOffsetHigh= dword ptr  0Ch
.text:00413630 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00413630 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00413630
.text:00413630                 jmp     ds:__imp_UnlockFile
.text:00413630 UnlockFile      endp
.text:00413630
.text:00413630 ; ---------------------------------------------------------------------------
.text:00413636                 align 10h
.text:00413640
.text:00413640 ; =============== S U B R O U T I N E =======================================
.text:00413640
.text:00413640 ; Attributes: thunk
.text:00413640
.text:00413640 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:00413640 LockFile        proc near               ; CODE XREF: sub_40AE60+F7↑p
.text:00413640
.text:00413640 hFile           = dword ptr  4
.text:00413640 dwFileOffsetLow = dword ptr  8
.text:00413640 dwFileOffsetHigh= dword ptr  0Ch
.text:00413640 nNumberOfBytesToLockLow= dword ptr  10h
.text:00413640 nNumberOfBytesToLockHigh= dword ptr  14h
.text:00413640
.text:00413640                 jmp     ds:__imp_LockFile
.text:00413640 LockFile        endp
.text:00413640
.text:00413640 ; ---------------------------------------------------------------------------
.text:00413646                 align 10h
.text:00413650
.text:00413650 ; =============== S U B R O U T I N E =======================================
.text:00413650
.text:00413650 ; Attributes: thunk
.text:00413650
.text:00413650 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00413650 GetModuleHandleA proc near              ; CODE XREF: sub_40B390+18↑p
.text:00413650                                         ; sub_40BB50+329↑p ...
.text:00413650
.text:00413650 lpModuleName    = dword ptr  4
.text:00413650
.text:00413650                 jmp     ds:__imp_GetModuleHandleA
.text:00413650 GetModuleHandleA endp
.text:00413650
.text:00413650 ; ---------------------------------------------------------------------------
.text:00413656                 align 10h
.text:00413660
.text:00413660 ; =============== S U B R O U T I N E =======================================
.text:00413660
.text:00413660 ; Attributes: thunk
.text:00413660
.text:00413660 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00413660 GetProcAddress  proc near               ; CODE XREF: sub_40B390+33↑p
.text:00413660                                         ; sub_40B500+2E↑p ...
.text:00413660
.text:00413660 hModule         = dword ptr  4
.text:00413660 lpProcName      = dword ptr  8
.text:00413660
.text:00413660                 jmp     ds:__imp_GetProcAddress
.text:00413660 GetProcAddress  endp
.text:00413660
.text:00413660 ; ---------------------------------------------------------------------------
.text:00413666                 align 10h
.text:00413670
.text:00413670 ; =============== S U B R O U T I N E =======================================
.text:00413670
.text:00413670 ; Attributes: thunk
.text:00413670
.text:00413670 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00413670 GetFileAttributesA proc near            ; CODE XREF: sub_40B390+47↑p
.text:00413670                                         ; sub_40D130+62↑p
.text:00413670
.text:00413670 lpFileName      = dword ptr  4
.text:00413670
.text:00413670                 jmp     ds:__imp_GetFileAttributesA
.text:00413670 GetFileAttributesA endp
.text:00413670
.text:00413670 ; ---------------------------------------------------------------------------
.text:00413676                 align 10h
.text:00413680
.text:00413680 ; =============== S U B R O U T I N E =======================================
.text:00413680
.text:00413680 ; Attributes: thunk
.text:00413680
.text:00413680 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00413680 FreeLibrary     proc near               ; CODE XREF: sub_40B390+A4↑p
.text:00413680                                         ; sub_40B500+11D↑p ...
.text:00413680
.text:00413680 hLibModule      = dword ptr  4
.text:00413680
.text:00413680                 jmp     ds:__imp_FreeLibrary
.text:00413680 FreeLibrary     endp
.text:00413680
.text:00413680 ; ---------------------------------------------------------------------------
.text:00413686                 align 10h
.text:00413690
.text:00413690 ; =============== S U B R O U T I N E =======================================
.text:00413690
.text:00413690 ; Attributes: thunk
.text:00413690
.text:00413690 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00413690 FindFirstFileA  proc near               ; CODE XREF: sub_40B390+CE↑p
.text:00413690                                         ; sub_40B500+14F↑p ...
.text:00413690
.text:00413690 lpFileName      = dword ptr  4
.text:00413690 lpFindFileData  = dword ptr  8
.text:00413690
.text:00413690                 jmp     ds:__imp_FindFirstFileA
.text:00413690 FindFirstFileA  endp
.text:00413690
.text:00413690 ; ---------------------------------------------------------------------------
.text:00413696                 align 10h
.text:004136A0
.text:004136A0 ; =============== S U B R O U T I N E =======================================
.text:004136A0
.text:004136A0 ; Attributes: thunk
.text:004136A0
.text:004136A0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:004136A0 FindClose       proc near               ; CODE XREF: sub_40B390+123↑p
.text:004136A0                                         ; sub_40B500+10E↑p ...
.text:004136A0
.text:004136A0 hFindFile       = dword ptr  4
.text:004136A0
.text:004136A0                 jmp     ds:__imp_FindClose
.text:004136A0 FindClose       endp
.text:004136A0
.text:004136A0 ; ---------------------------------------------------------------------------
.text:004136A6                 align 10h
.text:004136B0
.text:004136B0 ; =============== S U B R O U T I N E =======================================
.text:004136B0
.text:004136B0 ; Attributes: thunk
.text:004136B0
.text:004136B0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:004136B0 LoadLibraryA    proc near               ; CODE XREF: sub_40B500+13↑p
.text:004136B0                                         ; sub_40BB50+134↑p ...
.text:004136B0
.text:004136B0 lpLibFileName   = dword ptr  4
.text:004136B0
.text:004136B0                 jmp     ds:__imp_LoadLibraryA
.text:004136B0 LoadLibraryA    endp
.text:004136B0
.text:004136B0 ; ---------------------------------------------------------------------------
.text:004136B6                 align 10h
.text:004136C0
.text:004136C0 ; =============== S U B R O U T I N E =======================================
.text:004136C0
.text:004136C0 ; Attributes: thunk
.text:004136C0
.text:004136C0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:004136C0 FindNextFileA   proc near               ; CODE XREF: sub_40B500+FF↑p
.text:004136C0
.text:004136C0 hFindFile       = dword ptr  4
.text:004136C0 lpFindFileData  = dword ptr  8
.text:004136C0
.text:004136C0                 jmp     ds:__imp_FindNextFileA
.text:004136C0 FindNextFileA   endp
.text:004136C0
.text:004136C0 ; ---------------------------------------------------------------------------
.text:004136C6                 align 10h
.text:004136D0
.text:004136D0 ; =============== S U B R O U T I N E =======================================
.text:004136D0
.text:004136D0 ; Attributes: thunk
.text:004136D0
.text:004136D0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:004136D0 GetFileType     proc near               ; CODE XREF: sub_40B680+43↑p
.text:004136D0                                         ; .text:0040C33A↑p
.text:004136D0
.text:004136D0 hFile           = dword ptr  4
.text:004136D0
.text:004136D0                 jmp     ds:__imp_GetFileType
.text:004136D0 GetFileType     endp
.text:004136D0
.text:004136D0 ; ---------------------------------------------------------------------------
.text:004136D6                 align 10h
.text:004136E0
.text:004136E0 ; =============== S U B R O U T I N E =======================================
.text:004136E0
.text:004136E0 ; Attributes: thunk
.text:004136E0
.text:004136E0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:004136E0 GetFileInformationByHandle proc near    ; CODE XREF: sub_40B680+69↑p
.text:004136E0
.text:004136E0 hFile           = dword ptr  4
.text:004136E0 lpFileInformation= dword ptr  8
.text:004136E0
.text:004136E0                 jmp     ds:__imp_GetFileInformationByHandle
.text:004136E0 GetFileInformationByHandle endp
.text:004136E0
.text:004136E0 ; ---------------------------------------------------------------------------
.text:004136E6                 align 10h
.text:004136F0
.text:004136F0 ; =============== S U B R O U T I N E =======================================
.text:004136F0
.text:004136F0 ; Attributes: thunk
.text:004136F0
.text:004136F0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:004136F0 GetFileSize     proc near               ; CODE XREF: sub_40B680+3F2↑p
.text:004136F0
.text:004136F0 hFile           = dword ptr  4
.text:004136F0 lpFileSizeHigh  = dword ptr  8
.text:004136F0
.text:004136F0                 jmp     ds:__imp_GetFileSize
.text:004136F0 GetFileSize     endp
.text:004136F0
.text:004136F0 ; ---------------------------------------------------------------------------
.text:004136F6                 align 10h
.text:00413700
.text:00413700 ; =============== S U B R O U T I N E =======================================
.text:00413700
.text:00413700 ; Attributes: thunk
.text:00413700
.text:00413700 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00413700 PeekNamedPipe   proc near               ; CODE XREF: sub_40B680+439↑p
.text:00413700
.text:00413700 hNamedPipe      = dword ptr  4
.text:00413700 lpBuffer        = dword ptr  8
.text:00413700 nBufferSize     = dword ptr  0Ch
.text:00413700 lpBytesRead     = dword ptr  10h
.text:00413700 lpTotalBytesAvail= dword ptr  14h
.text:00413700 lpBytesLeftThisMessage= dword ptr  18h
.text:00413700
.text:00413700                 jmp     ds:__imp_PeekNamedPipe
.text:00413700 PeekNamedPipe   endp
.text:00413700
.text:00413700 ; ---------------------------------------------------------------------------
.text:00413706                 align 10h
.text:00413710
.text:00413710 ; =============== S U B R O U T I N E =======================================
.text:00413710
.text:00413710 ; Attributes: thunk
.text:00413710
.text:00413710 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00413710 GetDriveTypeA   proc near               ; CODE XREF: sub_40BB50+4C↑p
.text:00413710
.text:00413710 lpRootPathName  = dword ptr  4
.text:00413710
.text:00413710                 jmp     ds:__imp_GetDriveTypeA
.text:00413710 GetDriveTypeA   endp
.text:00413710
.text:00413710 ; ---------------------------------------------------------------------------
.text:00413716                 align 10h
.text:00413720
.text:00413720 ; =============== S U B R O U T I N E =======================================
.text:00413720
.text:00413720 ; Attributes: thunk
.text:00413720
.text:00413720 ; DWORD __stdcall GetLastError()
.text:00413720 GetLastError    proc near               ; CODE XREF: sub_40BB50:loc_40BDD9↑p
.text:00413720                                         ; .text:loc_40C91D↑p ...
.text:00413720                 jmp     ds:__imp_GetLastError
.text:00413720 GetLastError    endp
.text:00413720
.text:00413720 ; ---------------------------------------------------------------------------
.text:00413726                 align 10h
.text:00413730
.text:00413730 ; =============== S U B R O U T I N E =======================================
.text:00413730
.text:00413730 ; Attributes: thunk
.text:00413730
.text:00413730 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00413730 GetVolumeInformationA proc near         ; CODE XREF: sub_40C050+64↑p
.text:00413730                                         ; .text:0040C5FC↑p ...
.text:00413730
.text:00413730 lpRootPathName  = dword ptr  4
.text:00413730 lpVolumeNameBuffer= dword ptr  8
.text:00413730 nVolumeNameSize = dword ptr  0Ch
.text:00413730 lpVolumeSerialNumber= dword ptr  10h
.text:00413730 lpMaximumComponentLength= dword ptr  14h
.text:00413730 lpFileSystemFlags= dword ptr  18h
.text:00413730 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00413730 nFileSystemNameSize= dword ptr  20h
.text:00413730
.text:00413730                 jmp     ds:__imp_GetVolumeInformationA
.text:00413730 GetVolumeInformationA endp
.text:00413730
.text:00413730 ; ---------------------------------------------------------------------------
.text:00413736                 align 10h
.text:00413740
.text:00413740 ; =============== S U B R O U T I N E =======================================
.text:00413740
.text:00413740 ; Attributes: thunk
.text:00413740
.text:00413740 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00413740 CreateFileA     proc near               ; CODE XREF: sub_40AAF0+22F6↑p
.text:00413740                                         ; .text:0040DD33↑p ...
.text:00413740
.text:00413740 lpFileName      = dword ptr  4
.text:00413740 dwDesiredAccess = dword ptr  8
.text:00413740 dwShareMode     = dword ptr  0Ch
.text:00413740 lpSecurityAttributes= dword ptr  10h
.text:00413740 dwCreationDisposition= dword ptr  14h
.text:00413740 dwFlagsAndAttributes= dword ptr  18h
.text:00413740 hTemplateFile   = dword ptr  1Ch
.text:00413740
.text:00413740                 jmp     ds:__imp_CreateFileA
.text:00413740 CreateFileA     endp
.text:00413740
.text:00413740 ; ---------------------------------------------------------------------------
.text:00413746                 align 10h
.text:00413750
.text:00413750 ; =============== S U B R O U T I N E =======================================
.text:00413750
.text:00413750 ; Attributes: thunk
.text:00413750
.text:00413750 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00413750 CloseHandle     proc near               ; CODE XREF: sub_40AAF0+2311↑p
.text:00413750                                         ; .text:0040DDA9↑p ...
.text:00413750
.text:00413750 hObject         = dword ptr  4
.text:00413750
.text:00413750                 jmp     ds:__imp_CloseHandle
.text:00413750 CloseHandle     endp
.text:00413750
.text:00413750 ; ---------------------------------------------------------------------------
.text:00413756                 align 10h
.text:00413760
.text:00413760 ; =============== S U B R O U T I N E =======================================
.text:00413760
.text:00413760 ; Attributes: thunk
.text:00413760
.text:00413760 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00413760 SetErrorMode    proc near               ; CODE XREF: sub_40AAF0+2346↑p
.text:00413760                                         ; sub_40D130+57↑p ...
.text:00413760
.text:00413760 uMode           = dword ptr  4
.text:00413760
.text:00413760                 jmp     ds:__imp_SetErrorMode
.text:00413760 SetErrorMode    endp
.text:00413760
.text:00413760 ; ---------------------------------------------------------------------------
.text:00413766                 align 10h
.text:00413770
.text:00413770 ; =============== S U B R O U T I N E =======================================
.text:00413770
.text:00413770 ; Attributes: thunk
.text:00413770
.text:00413770 ; BOOL __stdcall AreFileApisANSI()
.text:00413770 AreFileApisANSI proc near               ; CODE XREF: sub_40D200+89↑p
.text:00413770                 jmp     ds:__imp_AreFileApisANSI
.text:00413770 AreFileApisANSI endp
.text:00413770
.text:00413770 ; ---------------------------------------------------------------------------
.text:00413776                 align 10h
.text:00413780
.text:00413780 ; =============== S U B R O U T I N E =======================================
.text:00413780
.text:00413780 ; Attributes: thunk
.text:00413780
.text:00413780 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00413780 MultiByteToWideChar proc near           ; CODE XREF: sub_40D200+BD↑p
.text:00413780
.text:00413780 CodePage        = dword ptr  4
.text:00413780 dwFlags         = dword ptr  8
.text:00413780 lpMultiByteStr  = dword ptr  0Ch
.text:00413780 cbMultiByte     = dword ptr  10h
.text:00413780 lpWideCharStr   = dword ptr  14h
.text:00413780 cchWideChar     = dword ptr  18h
.text:00413780
.text:00413780                 jmp     ds:__imp_MultiByteToWideChar
.text:00413780 MultiByteToWideChar endp
.text:00413780
.text:00413780 ; ---------------------------------------------------------------------------
.text:00413786                 align 10h
.text:00413790
.text:00413790 ; =============== S U B R O U T I N E =======================================
.text:00413790
.text:00413790 ; Attributes: thunk
.text:00413790
.text:00413790 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00413790 lstrcpyA        proc near               ; CODE XREF: sub_40D200+128↑p
.text:00413790
.text:00413790 lpString1       = dword ptr  4
.text:00413790 lpString2       = dword ptr  8
.text:00413790
.text:00413790                 jmp     ds:__imp_lstrcpyA
.text:00413790 lstrcpyA        endp
.text:00413790
.text:00413790 ; ---------------------------------------------------------------------------
.text:00413796                 align 10h
.text:004137A0
.text:004137A0 ; =============== S U B R O U T I N E =======================================
.text:004137A0
.text:004137A0 ; Attributes: thunk
.text:004137A0
.text:004137A0 ; BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency)
.text:004137A0 QueryPerformanceFrequency proc near     ; CODE XREF: sub_40D460+27↑p
.text:004137A0
.text:004137A0 lpFrequency     = dword ptr  4
.text:004137A0
.text:004137A0                 jmp     ds:__imp_QueryPerformanceFrequency
.text:004137A0 QueryPerformanceFrequency endp
.text:004137A0
.text:004137A0 ; ---------------------------------------------------------------------------
.text:004137A6                 align 10h
.text:004137B0
.text:004137B0 ; =============== S U B R O U T I N E =======================================
.text:004137B0
.text:004137B0 ; Attributes: thunk
.text:004137B0
.text:004137B0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:004137B0 GetTimeZoneInformation proc near        ; CODE XREF: sub_40D4C0+22↑p
.text:004137B0
.text:004137B0 lpTimeZoneInformation= dword ptr  4
.text:004137B0
.text:004137B0                 jmp     ds:__imp_GetTimeZoneInformation
.text:004137B0 GetTimeZoneInformation endp
.text:004137B0
.text:004137B0 ; ---------------------------------------------------------------------------
.text:004137B6                 align 10h
.text:004137C0
.text:004137C0 ; =============== S U B R O U T I N E =======================================
.text:004137C0
.text:004137C0 ; Attributes: thunk
.text:004137C0
.text:004137C0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:004137C0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40D4C0+4F↑p
.text:004137C0
.text:004137C0 lpSystemTimeAsFileTime= dword ptr  4
.text:004137C0
.text:004137C0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:004137C0 GetSystemTimeAsFileTime endp
.text:004137C0
.text:004137C0 ; ---------------------------------------------------------------------------
.text:004137C6                 align 10h
.text:004137D0
.text:004137D0 ; =============== S U B R O U T I N E =======================================
.text:004137D0
.text:004137D0 ; Attributes: thunk
.text:004137D0
.text:004137D0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:004137D0 GetFullPathNameA proc near              ; CODE XREF: sub_40D600+45↑p
.text:004137D0                                         ; sub_40D600+ED↑p
.text:004137D0
.text:004137D0 lpFileName      = dword ptr  4
.text:004137D0 nBufferLength   = dword ptr  8
.text:004137D0 lpBuffer        = dword ptr  0Ch
.text:004137D0 lpFilePart      = dword ptr  10h
.text:004137D0
.text:004137D0                 jmp     ds:__imp_GetFullPathNameA
.text:004137D0 GetFullPathNameA endp
.text:004137D0
.text:004137D0 ; ---------------------------------------------------------------------------
.text:004137D6                 align 10h
.text:004137E0
.text:004137E0 ; =============== S U B R O U T I N E =======================================
.text:004137E0
.text:004137E0 ; Attributes: thunk
.text:004137E0
.text:004137E0 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:004137E0 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040D9E8↑p
.text:004137E0                                         ; .text:0040DA04↑p ...
.text:004137E0
.text:004137E0 nBufferLength   = dword ptr  4
.text:004137E0 lpBuffer        = dword ptr  8
.text:004137E0
.text:004137E0                 jmp     ds:__imp_GetCurrentDirectoryA
.text:004137E0 GetCurrentDirectoryA endp
.text:004137E0
.text:004137E0 ; ---------------------------------------------------------------------------
.text:004137E6                 align 10h
.text:004137F0
.text:004137F0 ; =============== S U B R O U T I N E =======================================
.text:004137F0
.text:004137F0 ; Attributes: thunk
.text:004137F0
.text:004137F0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:004137F0 DeviceIoControl proc near               ; CODE XREF: .text:0040DD9C↑p
.text:004137F0                                         ; sub_40E160+1E5↑p
.text:004137F0
.text:004137F0 hDevice         = dword ptr  4
.text:004137F0 dwIoControlCode = dword ptr  8
.text:004137F0 lpInBuffer      = dword ptr  0Ch
.text:004137F0 nInBufferSize   = dword ptr  10h
.text:004137F0 lpOutBuffer     = dword ptr  14h
.text:004137F0 nOutBufferSize  = dword ptr  18h
.text:004137F0 lpBytesReturned = dword ptr  1Ch
.text:004137F0 lpOverlapped    = dword ptr  20h
.text:004137F0
.text:004137F0                 jmp     ds:__imp_DeviceIoControl
.text:004137F0 DeviceIoControl endp
.text:004137F0
.text:004137F0 ; ---------------------------------------------------------------------------
.text:004137F6                 align 10h
.text:00413800
.text:00413800 ; =============== S U B R O U T I N E =======================================
.text:00413800
.text:00413800 ; Attributes: thunk
.text:00413800
.text:00413800 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00413800 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:0040E0F3↑p
.text:00413800                                         ; sub_40E160+7B↑p ...
.text:00413800
.text:00413800 lpRootPathName  = dword ptr  4
.text:00413800 lpSectorsPerCluster= dword ptr  8
.text:00413800 lpBytesPerSector= dword ptr  0Ch
.text:00413800 lpNumberOfFreeClusters= dword ptr  10h
.text:00413800 lpTotalNumberOfClusters= dword ptr  14h
.text:00413800
.text:00413800                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00413800 GetDiskFreeSpaceA endp
.text:00413800
.text:00413800 ; ---------------------------------------------------------------------------
.text:00413806                 align 10h
.text:00413810
.text:00413810 ; =============== S U B R O U T I N E =======================================
.text:00413810
.text:00413810 ; Attributes: thunk
.text:00413810
.text:00413810 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00413810 GetModuleFileNameA proc near            ; CODE XREF: sub_40E970+1C↑p
.text:00413810
.text:00413810 hModule         = dword ptr  4
.text:00413810 lpFilename      = dword ptr  8
.text:00413810 nSize           = dword ptr  0Ch
.text:00413810
.text:00413810                 jmp     ds:__imp_GetModuleFileNameA
.text:00413810 GetModuleFileNameA endp
.text:00413810
.text:00413810 ; ---------------------------------------------------------------------------
.text:00413816                 align 10h
.text:00413820
.text:00413820 ; =============== S U B R O U T I N E =======================================
.text:00413820
.text:00413820 ; Attributes: thunk
.text:00413820
.text:00413820 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00413820 GetShortPathNameA proc near             ; CODE XREF: .text:0040EBF6↑p
.text:00413820                                         ; .text:0040EC20↑p
.text:00413820
.text:00413820 lpszLongPath    = dword ptr  4
.text:00413820 lpszShortPath   = dword ptr  8
.text:00413820 cchBuffer       = dword ptr  0Ch
.text:00413820
.text:00413820                 jmp     ds:__imp_GetShortPathNameA
.text:00413820 GetShortPathNameA endp
.text:00413820
.text:00413820 ; ---------------------------------------------------------------------------
.text:00413826                 align 10h
.text:00413830
.text:00413830 ; =============== S U B R O U T I N E =======================================
.text:00413830
.text:00413830 ; Attributes: thunk
.text:00413830
.text:00413830 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00413830 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040F0BF↑p
.text:00413830                                         ; .text:0040F0EE↑p ...
.text:00413830
.text:00413830 nBufferLength   = dword ptr  4
.text:00413830 lpBuffer        = dword ptr  8
.text:00413830
.text:00413830                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00413830 GetLogicalDriveStringsA endp
.text:00413830
.text:00413830 ; ---------------------------------------------------------------------------
.text:00413836                 align 10h
.text:00413840
.text:00413840 ; =============== S U B R O U T I N E =======================================
.text:00413840
.text:00413840 ; Attributes: thunk
.text:00413840
.text:00413840 ; HANDLE __stdcall GetProcessHeap()
.text:00413840 GetProcessHeap  proc near               ; CODE XREF: .text:0040F0C9↑p
.text:00413840                                         ; sub_40F7A0+24↑p ...
.text:00413840                 jmp     ds:__imp_GetProcessHeap
.text:00413840 GetProcessHeap  endp
.text:00413840
.text:00413840 ; ---------------------------------------------------------------------------
.text:00413846                 align 10h
.text:00413850
.text:00413850 ; =============== S U B R O U T I N E =======================================
.text:00413850
.text:00413850 ; Attributes: thunk
.text:00413850
.text:00413850 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00413850 HeapAlloc       proc near               ; CODE XREF: .text:0040F0DD↑p
.text:00413850                                         ; sub_40F7A0+38↑p ...
.text:00413850
.text:00413850 hHeap           = dword ptr  4
.text:00413850 dwFlags         = dword ptr  8
.text:00413850 dwBytes         = dword ptr  0Ch
.text:00413850
.text:00413850                 jmp     ds:__imp_HeapAlloc
.text:00413850 HeapAlloc       endp
.text:00413850
.text:00413850 ; ---------------------------------------------------------------------------
.text:00413856                 align 10h
.text:00413860
.text:00413860 ; =============== S U B R O U T I N E =======================================
.text:00413860
.text:00413860 ; Attributes: thunk
.text:00413860
.text:00413860 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00413860 HeapFree        proc near               ; CODE XREF: .text:0040F8DD↑p
.text:00413860
.text:00413860 hHeap           = dword ptr  4
.text:00413860 dwFlags         = dword ptr  8
.text:00413860 lpMem           = dword ptr  0Ch
.text:00413860
.text:00413860                 jmp     ds:__imp_HeapFree
.text:00413860 HeapFree        endp
.text:00413860
.text:00413860 ; ---------------------------------------------------------------------------
.text:00413866                 align 10h
.text:00413870
.text:00413870 ; =============== S U B R O U T I N E =======================================
.text:00413870
.text:00413870 ; Attributes: thunk
.text:00413870
.text:00413870 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00413870 lstrcmpiA       proc near               ; CODE XREF: .text:0040FF1B↑p
.text:00413870                                         ; .text:0040FF32↑p ...
.text:00413870
.text:00413870 lpString1       = dword ptr  4
.text:00413870 lpString2       = dword ptr  8
.text:00413870
.text:00413870                 jmp     ds:__imp_lstrcmpiA
.text:00413870 lstrcmpiA       endp
.text:00413870
.text:00413870 ; ---------------------------------------------------------------------------
.text:00413876                 align 10h
.text:00413880
.text:00413880 ; =============== S U B R O U T I N E =======================================
.text:00413880
.text:00413880 ; Attributes: thunk
.text:00413880
.text:00413880 ; DWORD __stdcall GetVersion()
.text:00413880 GetVersion      proc near               ; CODE XREF: .text:004102A3↑p
.text:00413880                 jmp     ds:__imp_GetVersion
.text:00413880 GetVersion      endp
.text:00413880
.text:00413880 ; ---------------------------------------------------------------------------
.text:00413886                 align 10h
.text:00413890
.text:00413890 ; =============== S U B R O U T I N E =======================================
.text:00413890
.text:00413890 ; Attributes: thunk
.text:00413890
.text:00413890 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00413890 GetVersionExA   proc near               ; CODE XREF: sub_410330+32↑p
.text:00413890                                         ; sub_410330+20B↑p
.text:00413890
.text:00413890 lpVersionInformation= dword ptr  4
.text:00413890
.text:00413890                 jmp     ds:__imp_GetVersionExA
.text:00413890 GetVersionExA   endp
.text:00413890
.text:00413890 ; ---------------------------------------------------------------------------
.text:00413896                 align 10h
.text:004138A0
.text:004138A0 ; =============== S U B R O U T I N E =======================================
.text:004138A0
.text:004138A0 ; Attributes: thunk
.text:004138A0
.text:004138A0 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:004138A0 CreateDirectoryA proc near              ; CODE XREF: sub_410F10+22↑p
.text:004138A0
.text:004138A0 lpPathName      = dword ptr  4
.text:004138A0 lpSecurityAttributes= dword ptr  8
.text:004138A0
.text:004138A0                 jmp     ds:__imp_CreateDirectoryA
.text:004138A0 CreateDirectoryA endp
.text:004138A0
.text:004138A0 ; ---------------------------------------------------------------------------
.text:004138A6                 align 10h
.text:004138B0
.text:004138B0 ; =============== S U B R O U T I N E =======================================
.text:004138B0
.text:004138B0 ; Attributes: thunk
.text:004138B0
.text:004138B0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:004138B0 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040FEA1↑p
.text:004138B0
.text:004138B0 hKey            = dword ptr  4
.text:004138B0 lpSubKey        = dword ptr  8
.text:004138B0 ulOptions       = dword ptr  0Ch
.text:004138B0 samDesired      = dword ptr  10h
.text:004138B0 phkResult       = dword ptr  14h
.text:004138B0
.text:004138B0                 jmp     ds:__imp_RegOpenKeyExA
.text:004138B0 RegOpenKeyExA   endp
.text:004138B0
.text:004138B0 ; ---------------------------------------------------------------------------
.text:004138B6                 align 10h
.text:004138C0
.text:004138C0 ; =============== S U B R O U T I N E =======================================
.text:004138C0
.text:004138C0 ; Attributes: thunk
.text:004138C0
.text:004138C0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:004138C0 RegQueryValueExA proc near              ; CODE XREF: .text:0040FEE4↑p
.text:004138C0
.text:004138C0 hKey            = dword ptr  4
.text:004138C0 lpValueName     = dword ptr  8
.text:004138C0 lpReserved      = dword ptr  0Ch
.text:004138C0 lpType          = dword ptr  10h
.text:004138C0 lpData          = dword ptr  14h
.text:004138C0 lpcbData        = dword ptr  18h
.text:004138C0
.text:004138C0                 jmp     ds:__imp_RegQueryValueExA
.text:004138C0 RegQueryValueExA endp
.text:004138C0
.text:004138C0 ; ---------------------------------------------------------------------------
.text:004138C6                 align 10h
.text:004138D0
.text:004138D0 ; =============== S U B R O U T I N E =======================================
.text:004138D0
.text:004138D0 ; Attributes: thunk
.text:004138D0
.text:004138D0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:004138D0 RegCloseKey     proc near               ; CODE XREF: .text:0040FF08↑p
.text:004138D0
.text:004138D0 hKey            = dword ptr  4
.text:004138D0
.text:004138D0                 jmp     ds:__imp_RegCloseKey
.text:004138D0 RegCloseKey     endp
.text:004138D0
.text:004138D0 ; ---------------------------------------------------------------------------
.text:004138D6                 db 2 dup(90h)
.text:004138D8                 dd 2 dup(0)
.text:004138E0                 dd 21400h, 0
.text:004138E8                 dd 0C0h, 46000000h
.text:004138F0 ; const IID rclsid
.text:004138F0 rclsid          dd 21401h               ; Data1
.text:004138F0                                         ; DATA XREF: sub_40D200+4B↑o
.text:004138F0                 dw 0                    ; Data2
.text:004138F0                 dw 0                    ; Data3
.text:004138F0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413900                 dd 214A0h, 0
.text:00413908                 dd 0C0h, 46000000h, 214A1h, 0
.text:00413918                 dd 0C0h, 46000000h, 214D0h, 0
.text:00413928                 dd 0C0h, 46000000h, 214D1h, 0
.text:00413938                 dd 0C0h, 46000000h, 214D2h, 0
.text:00413948                 dd 0C0h, 46000000h, 214E1h, 0
.text:00413958                 dd 0C0h, 46000000h, 214E2h, 0
.text:00413968                 dd 0C0h, 46000000h, 214E3h, 0
.text:00413978                 dd 0C0h, 46000000h, 214E4h, 0
.text:00413988                 dd 0C0h, 46000000h, 21500h, 0
.text:00413998                 dd 0C0h, 46000000h, 214E5h, 0
.text:004139A8                 dd 0C0h, 46000000h, 214E6h, 0
.text:004139B8                 dd 0C0h, 46000000h, 214E8h, 0
.text:004139C8                 dd 0C0h, 46000000h, 214E9h, 0
.text:004139D8                 dd 0C0h, 46000000h, 214EAh, 0
.text:004139E8                 dd 0C0h, 46000000h, 214EBh, 0
.text:004139F8                 dd 0C0h, 46000000h
.text:00413A00 ; const IID riid
.text:00413A00 riid            dd 214EEh               ; Data1
.text:00413A00                                         ; DATA XREF: sub_40D200+2B↑o
.text:00413A00                 dw 0                    ; Data2
.text:00413A00                 dw 0                    ; Data3
.text:00413A00                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00413A10                 dd 214EFh, 0
.text:00413A18                 dd 0C0h, 46000000h, 214F0h, 0
.text:00413A28                 dd 0C0h, 46000000h, 214F1h, 0
.text:00413A38                 dd 0C0h, 46000000h, 214F2h, 0
.text:00413A48                 dd 0C0h, 46000000h, 214F3h, 0
.text:00413A58                 dd 0C0h, 46000000h, 214F4h, 0
.text:00413A68                 dd 0C0h, 46000000h, 214F5h, 0
.text:00413A78                 dd 0C0h, 46000000h, 214F6h, 0
.text:00413A88                 dd 0C0h, 46000000h, 214F7h, 0
.text:00413A98                 dd 0C0h, 46000000h, 214F8h, 0
.text:00413AA8                 dd 0C0h, 46000000h, 214F9h, 0
.text:00413AB8                 dd 0C0h, 46000000h, 214FAh, 0
.text:00413AC8                 dd 0C0h, 46000000h, 214FBh, 0
.text:00413AD8                 dd 0C0h, 46000000h, 214FCh, 0
.text:00413AE8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00413AE8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00413AE8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00413AE8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00413AE8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413AE8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00413AE8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00413AE8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00413AE8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00413AE8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00413BB8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00413BC8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00413BD8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00413BE8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00413BF8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00413BF8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00413BF8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00413BF8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00413BF8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00413BF8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00413BF8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00413C80 dword_413C80    dd 0FFFFFFFFh           ; DATA XREF: .text:004125A9↑r
.text:00413C80                                         ; .text:loc_4125D0↑r ...
.text:00413C84 dword_413C84    dd 0                    ; DATA XREF: .text:loc_4125DC↑r
.text:00413C84                                         ; sub_412600:loc_41264D↑r
.text:00413C88                 dd 0FFFFFFFFh
.text:00413C8C dword_413C8C    dd 5Dh dup(0)           ; DATA XREF: .data:off_4140D4↓o
.text:00413E00                 dd 80h dup(?)
.text:00413E00 _text           ends
.text:00413E00
.data:00414000 ; Section 2. (virtual address 00014000)
.data:00414000 ; Virtual size                  : 000000F0 (    240.)
.data:00414000 ; Section size in file          : 00000200 (    512.)
.data:00414000 ; Offset to raw data for section: 00013200
.data:00414000 ; Flags C0000040: Data Readable Writable
.data:00414000 ; Alignment     : default
.data:00414000 ; ===========================================================================
.data:00414000
.data:00414000 ; Segment type: Pure data
.data:00414000 ; Segment permissions: Read/Write
.data:00414000 _data           segment para public 'DATA' use32
.data:00414000                 assume cs:_data
.data:00414000                 ;org 414000h
.data:00414000 dword_414000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00414000                                         ; sub_401080+CC↑r
.data:00414004 dword_414004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00414004                                         ; sub_401080+D4↑r
.data:00414008                 align 10h
.data:00414010 dword_414010    dd 1                    ; DATA XREF: sub_406630+22↑r
.data:00414010                                         ; sub_406630+65↑r ...
.data:00414014 dword_414014    dd 100h                 ; DATA XREF: sub_406630+3F↑o
.data:00414014                                         ; sub_406630+1A2↑r ...
.data:00414018 off_414018      dd offset unk_415040    ; DATA XREF: sub_406630+1AA↑r
.data:0041401C ; void *off_41401C
.data:0041401C off_41401C      dd offset dword_414014  ; DATA XREF: sub_406630+39↑r
.data:0041401C                                         ; sub_406630+60↑w ...
.data:00414020 dword_414020    dd 1                    ; DATA XREF: sub_401E80:loc_40235C↑r
.data:00414020                                         ; sub_4075E0+3↑r ...
.data:00414024 dword_414024    dd 1                    ; DATA XREF: sub_4075E0+11↑r
.data:00414024                                         ; .text:00407681↑r
.data:00414028 dword_414028    dd 3Fh                  ; DATA XREF: sub_4075E0+7D↑w
.data:00414028                                         ; .text:004076ED↑w
.data:0041402C                 align 10h
.data:00414030 ; char *Buffer
.data:00414030 Buffer          dd offset aCopyrightC2005
.data:00414030                                         ; DATA XREF: sub_407B10+DC↑r
.data:00414030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00414034                 align 10h
.data:00414040 ; int Code
.data:00414040 Code            dd 1                    ; DATA XREF: sub_408B90+6D↑r
.data:00414040                                         ; sub_408B90+9A↑r ...
.data:00414044                 align 10h
.data:00414050                 dd offset sub_40A750
.data:00414054                 align 10h
.data:00414060 dword_414060    dd 200h                 ; DATA XREF: sub_40B680+2ED↑r
.data:00414060                                         ; sub_40B680+2F8↑r ...
.data:00414064 ; char *off_414064
.data:00414064 off_414064      dd offset aComExeBatCmd ; DATA XREF: sub_40BB50+3D3↑r
.data:00414064                                         ; sub_40BB50+400↑r ...
.data:00414064                                         ; ".com;.exe;.bat;.cmd"
.data:00414068                 align 10h
.data:00414070 byte_414070     db 41h                  ; DATA XREF: sub_40D860+6B↑w
.data:00414070                                         ; sub_40D860:loc_40D974↑r
.data:00414071                 align 10h
.data:00414080 off_414080      dd offset aNotset       ; DATA XREF: .text:0040EC9A↑r
.data:00414080                                         ; .text:0040F8E2↑r
.data:00414080                                         ; "notset"
.data:00414084 off_414084      dd offset aNotset       ; DATA XREF: .text:0040ECB2↑r
.data:00414084                                         ; .text:0040ECD4↑r ...
.data:00414084                                         ; "notset"
.data:00414088                 align 10h
.data:00414090 dword_414090    dd 1                    ; DATA XREF: .text:loc_40FD57↑r
.data:00414090                                         ; sub_410330+202↑w
.data:00414094                 align 10h
.data:004140A0 dword_4140A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004140A4                 align 10h
.data:004140B0 ; int Mode
.data:004140B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004140B0                                         ; sub_401080+80↑r ...
.data:004140B4                 align 10h
.data:004140C0 dword_4140C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004140C0                                         ; sub_401080+BA↑r
.data:004140C4                 align 10h
.data:004140D0 dword_4140D0    dd 0                    ; DATA XREF: sub_412600+9↑r
.data:004140D0                                         ; sub_412600+1D↑w
.data:004140D4 off_4140D4      dd offset dword_413C8C  ; DATA XREF: sub_412570+6↑r
.data:004140D4                                         ; sub_412570+17↑r ...
.data:004140D8                 align 1000h
.data:004140D8 _data           ends
.data:004140D8
.bss:00415000 ; Section 3. (virtual address 00015000)
.bss:00415000 ; Virtual size                  : 000005F0 (   1520.)
.bss:00415000 ; Section size in file          : 00000000 (      0.)
.bss:00415000 ; Offset to raw data for section: 00000000
.bss:00415000 ; Flags C0000080: Bss Readable Writable
.bss:00415000 ; Alignment     : default
.bss:00415000 ; ===========================================================================
.bss:00415000
.bss:00415000 ; Segment type: Uninitialized
.bss:00415000 ; Segment permissions: Read/Write
.bss:00415000 _bss            segment para public 'BSS' use32
.bss:00415000                 assume cs:_bss
.bss:00415000                 ;org 415000h
.bss:00415000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00415000 ; jmp_buf Buf
.bss:00415000 Buf             dd 10h dup(?)           ; DATA XREF: sub_403090+37↑o
.bss:00415000                                         ; Function+B↑o ...
.bss:00415040 unk_415040      db    ? ;               ; DATA XREF: sub_406630+100↑o
.bss:00415040                                         ; .data:off_414018↑o
.bss:00415041                 db    ? ;
.bss:00415042                 db    ? ;
.bss:00415043                 db    ? ;
.bss:00415044                 db    ? ;
.bss:00415045                 db    ? ;
.bss:00415046                 db    ? ;
.bss:00415047                 db    ? ;
.bss:00415048                 db    ? ;
.bss:00415049                 db    ? ;
.bss:0041504A                 db    ? ;
.bss:0041504B                 db    ? ;
.bss:0041504C                 db    ? ;
.bss:0041504D                 db    ? ;
.bss:0041504E                 db    ? ;
.bss:0041504F                 db    ? ;
.bss:00415050                 db    ? ;
.bss:00415051                 db    ? ;
.bss:00415052                 db    ? ;
.bss:00415053                 db    ? ;
.bss:00415054                 db    ? ;
.bss:00415055                 db    ? ;
.bss:00415056                 db    ? ;
.bss:00415057                 db    ? ;
.bss:00415058                 db    ? ;
.bss:00415059                 db    ? ;
.bss:0041505A                 db    ? ;
.bss:0041505B                 db    ? ;
.bss:0041505C                 db    ? ;
.bss:0041505D                 db    ? ;
.bss:0041505E                 db    ? ;
.bss:0041505F                 db    ? ;
.bss:00415060                 db    ? ;
.bss:00415061                 db    ? ;
.bss:00415062                 db    ? ;
.bss:00415063                 db    ? ;
.bss:00415064                 db    ? ;
.bss:00415065                 db    ? ;
.bss:00415066                 db    ? ;
.bss:00415067                 db    ? ;
.bss:00415068                 db    ? ;
.bss:00415069                 db    ? ;
.bss:0041506A                 db    ? ;
.bss:0041506B                 db    ? ;
.bss:0041506C                 db    ? ;
.bss:0041506D                 db    ? ;
.bss:0041506E                 db    ? ;
.bss:0041506F                 db    ? ;
.bss:00415070                 db    ? ;
.bss:00415071                 db    ? ;
.bss:00415072                 db    ? ;
.bss:00415073                 db    ? ;
.bss:00415074                 db    ? ;
.bss:00415075                 db    ? ;
.bss:00415076                 db    ? ;
.bss:00415077                 db    ? ;
.bss:00415078                 db    ? ;
.bss:00415079                 db    ? ;
.bss:0041507A                 db    ? ;
.bss:0041507B                 db    ? ;
.bss:0041507C                 db    ? ;
.bss:0041507D                 db    ? ;
.bss:0041507E                 db    ? ;
.bss:0041507F                 db    ? ;
.bss:00415080                 db    ? ;
.bss:00415081                 db    ? ;
.bss:00415082                 db    ? ;
.bss:00415083                 db    ? ;
.bss:00415084                 db    ? ;
.bss:00415085                 db    ? ;
.bss:00415086                 db    ? ;
.bss:00415087                 db    ? ;
.bss:00415088                 db    ? ;
.bss:00415089                 db    ? ;
.bss:0041508A                 db    ? ;
.bss:0041508B                 db    ? ;
.bss:0041508C                 db    ? ;
.bss:0041508D                 db    ? ;
.bss:0041508E                 db    ? ;
.bss:0041508F                 db    ? ;
.bss:00415090                 db    ? ;
.bss:00415091                 db    ? ;
.bss:00415092                 db    ? ;
.bss:00415093                 db    ? ;
.bss:00415094                 db    ? ;
.bss:00415095                 db    ? ;
.bss:00415096                 db    ? ;
.bss:00415097                 db    ? ;
.bss:00415098                 db    ? ;
.bss:00415099                 db    ? ;
.bss:0041509A                 db    ? ;
.bss:0041509B                 db    ? ;
.bss:0041509C                 db    ? ;
.bss:0041509D                 db    ? ;
.bss:0041509E                 db    ? ;
.bss:0041509F                 db    ? ;
.bss:004150A0                 db    ? ;
.bss:004150A1                 db    ? ;
.bss:004150A2                 db    ? ;
.bss:004150A3                 db    ? ;
.bss:004150A4                 db    ? ;
.bss:004150A5                 db    ? ;
.bss:004150A6                 db    ? ;
.bss:004150A7                 db    ? ;
.bss:004150A8                 db    ? ;
.bss:004150A9                 db    ? ;
.bss:004150AA                 db    ? ;
.bss:004150AB                 db    ? ;
.bss:004150AC                 db    ? ;
.bss:004150AD                 db    ? ;
.bss:004150AE                 db    ? ;
.bss:004150AF                 db    ? ;
.bss:004150B0                 db    ? ;
.bss:004150B1                 db    ? ;
.bss:004150B2                 db    ? ;
.bss:004150B3                 db    ? ;
.bss:004150B4                 db    ? ;
.bss:004150B5                 db    ? ;
.bss:004150B6                 db    ? ;
.bss:004150B7                 db    ? ;
.bss:004150B8                 db    ? ;
.bss:004150B9                 db    ? ;
.bss:004150BA                 db    ? ;
.bss:004150BB                 db    ? ;
.bss:004150BC                 db    ? ;
.bss:004150BD                 db    ? ;
.bss:004150BE                 db    ? ;
.bss:004150BF                 db    ? ;
.bss:004150C0                 db    ? ;
.bss:004150C1                 db    ? ;
.bss:004150C2                 db    ? ;
.bss:004150C3                 db    ? ;
.bss:004150C4                 db    ? ;
.bss:004150C5                 db    ? ;
.bss:004150C6                 db    ? ;
.bss:004150C7                 db    ? ;
.bss:004150C8                 db    ? ;
.bss:004150C9                 db    ? ;
.bss:004150CA                 db    ? ;
.bss:004150CB                 db    ? ;
.bss:004150CC                 db    ? ;
.bss:004150CD                 db    ? ;
.bss:004150CE                 db    ? ;
.bss:004150CF                 db    ? ;
.bss:004150D0                 db    ? ;
.bss:004150D1                 db    ? ;
.bss:004150D2                 db    ? ;
.bss:004150D3                 db    ? ;
.bss:004150D4                 db    ? ;
.bss:004150D5                 db    ? ;
.bss:004150D6                 db    ? ;
.bss:004150D7                 db    ? ;
.bss:004150D8                 db    ? ;
.bss:004150D9                 db    ? ;
.bss:004150DA                 db    ? ;
.bss:004150DB                 db    ? ;
.bss:004150DC                 db    ? ;
.bss:004150DD                 db    ? ;
.bss:004150DE                 db    ? ;
.bss:004150DF                 db    ? ;
.bss:004150E0                 db    ? ;
.bss:004150E1                 db    ? ;
.bss:004150E2                 db    ? ;
.bss:004150E3                 db    ? ;
.bss:004150E4                 db    ? ;
.bss:004150E5                 db    ? ;
.bss:004150E6                 db    ? ;
.bss:004150E7                 db    ? ;
.bss:004150E8                 db    ? ;
.bss:004150E9                 db    ? ;
.bss:004150EA                 db    ? ;
.bss:004150EB                 db    ? ;
.bss:004150EC                 db    ? ;
.bss:004150ED                 db    ? ;
.bss:004150EE                 db    ? ;
.bss:004150EF                 db    ? ;
.bss:004150F0                 db    ? ;
.bss:004150F1                 db    ? ;
.bss:004150F2                 db    ? ;
.bss:004150F3                 db    ? ;
.bss:004150F4                 db    ? ;
.bss:004150F5                 db    ? ;
.bss:004150F6                 db    ? ;
.bss:004150F7                 db    ? ;
.bss:004150F8                 db    ? ;
.bss:004150F9                 db    ? ;
.bss:004150FA                 db    ? ;
.bss:004150FB                 db    ? ;
.bss:004150FC                 db    ? ;
.bss:004150FD                 db    ? ;
.bss:004150FE                 db    ? ;
.bss:004150FF                 db    ? ;
.bss:00415100                 db    ? ;
.bss:00415101                 db    ? ;
.bss:00415102                 db    ? ;
.bss:00415103                 db    ? ;
.bss:00415104                 db    ? ;
.bss:00415105                 db    ? ;
.bss:00415106                 db    ? ;
.bss:00415107                 db    ? ;
.bss:00415108                 db    ? ;
.bss:00415109                 db    ? ;
.bss:0041510A                 db    ? ;
.bss:0041510B                 db    ? ;
.bss:0041510C                 db    ? ;
.bss:0041510D                 db    ? ;
.bss:0041510E                 db    ? ;
.bss:0041510F                 db    ? ;
.bss:00415110                 db    ? ;
.bss:00415111                 db    ? ;
.bss:00415112                 db    ? ;
.bss:00415113                 db    ? ;
.bss:00415114                 db    ? ;
.bss:00415115                 db    ? ;
.bss:00415116                 db    ? ;
.bss:00415117                 db    ? ;
.bss:00415118                 db    ? ;
.bss:00415119                 db    ? ;
.bss:0041511A                 db    ? ;
.bss:0041511B                 db    ? ;
.bss:0041511C                 db    ? ;
.bss:0041511D                 db    ? ;
.bss:0041511E                 db    ? ;
.bss:0041511F                 db    ? ;
.bss:00415120                 db    ? ;
.bss:00415121                 db    ? ;
.bss:00415122                 db    ? ;
.bss:00415123                 db    ? ;
.bss:00415124                 db    ? ;
.bss:00415125                 db    ? ;
.bss:00415126                 db    ? ;
.bss:00415127                 db    ? ;
.bss:00415128                 db    ? ;
.bss:00415129                 db    ? ;
.bss:0041512A                 db    ? ;
.bss:0041512B                 db    ? ;
.bss:0041512C                 db    ? ;
.bss:0041512D                 db    ? ;
.bss:0041512E                 db    ? ;
.bss:0041512F                 db    ? ;
.bss:00415130                 db    ? ;
.bss:00415131                 db    ? ;
.bss:00415132                 db    ? ;
.bss:00415133                 db    ? ;
.bss:00415134                 db    ? ;
.bss:00415135                 db    ? ;
.bss:00415136                 db    ? ;
.bss:00415137                 db    ? ;
.bss:00415138                 db    ? ;
.bss:00415139                 db    ? ;
.bss:0041513A                 db    ? ;
.bss:0041513B                 db    ? ;
.bss:0041513C                 db    ? ;
.bss:0041513D                 db    ? ;
.bss:0041513E                 db    ? ;
.bss:0041513F                 db    ? ;
.bss:00415140 dword_415140    dd ?                    ; DATA XREF: .text:loc_405FC1↑o
.bss:00415140                                         ; .text:loc_405FE0↑o ...
.bss:00415144 dword_415144    dd ?                    ; DATA XREF: .text:loc_406060↑o
.bss:00415144                                         ; .text:004064E8↑r ...
.bss:00415148 dword_415148    dd ?                    ; DATA XREF: .text:004064E2↑r
.bss:00415148                                         ; sub_406590+2C↑r
.bss:0041514C dword_41514C    dd ?                    ; DATA XREF: .text:004064D6↑r
.bss:0041514C                                         ; sub_406590+22↑r
.bss:00415150 dword_415150    dd ?                    ; DATA XREF: .text:004064F2↑r
.bss:00415150                                         ; sub_406590+36↑r
.bss:00415154 dword_415154    dd ?                    ; DATA XREF: .text:00406502↑r
.bss:00415154                                         ; sub_406590+4E↑r
.bss:00415158 dword_415158    dd ?                    ; DATA XREF: .text:0040651F↑r
.bss:00415158                                         ; sub_406590+62↑r
.bss:0041515C dword_41515C    dd ?                    ; DATA XREF: .text:00406515↑r
.bss:0041515C                                         ; sub_406590+70↑r
.bss:00415160 dword_415160    dd ?                    ; DATA XREF: .text:004064F8↑r
.bss:00415160                                         ; sub_406590+7A↑r
.bss:00415164                 align 10h
.bss:00415170 dword_415170    dd ?                    ; DATA XREF: sub_4075E0+9↑o
.bss:00415170                                         ; sub_4075E0+17↑w ...
.bss:00415174 dword_415174    dd ?                    ; DATA XREF: sub_4075E0+21↑w
.bss:00415174                                         ; .text:00407699↑w
.bss:00415178 dword_415178    dd ?                    ; DATA XREF: sub_4075E0+77↑r
.bss:00415178                                         ; .text:004076E7↑r
.bss:0041517C dword_41517C    dd ?                    ; DATA XREF: sub_4075E0+6B↑r
.bss:0041517C                                         ; .text:004076DB↑r
.bss:00415180                 db    ? ;
.bss:00415181                 db    ? ;
.bss:00415182                 db    ? ;
.bss:00415183                 db    ? ;
.bss:00415184                 db    ? ;
.bss:00415185                 db    ? ;
.bss:00415186                 db    ? ;
.bss:00415187                 db    ? ;
.bss:00415188                 db    ? ;
.bss:00415189                 db    ? ;
.bss:0041518A                 db    ? ;
.bss:0041518B                 db    ? ;
.bss:0041518C                 db    ? ;
.bss:0041518D                 db    ? ;
.bss:0041518E                 db    ? ;
.bss:0041518F                 db    ? ;
.bss:00415190                 db    ? ;
.bss:00415191                 db    ? ;
.bss:00415192                 db    ? ;
.bss:00415193                 db    ? ;
.bss:00415194                 db    ? ;
.bss:00415195                 db    ? ;
.bss:00415196                 db    ? ;
.bss:00415197                 db    ? ;
.bss:00415198                 db    ? ;
.bss:00415199                 db    ? ;
.bss:0041519A                 db    ? ;
.bss:0041519B                 db    ? ;
.bss:0041519C                 db    ? ;
.bss:0041519D                 db    ? ;
.bss:0041519E                 db    ? ;
.bss:0041519F                 db    ? ;
.bss:004151A0 ; char *dword_4151A0
.bss:004151A0 dword_4151A0    dd ?                    ; DATA XREF: .text:00408B64↑w
.bss:004151A0                                         ; sub_408B90+58↑r
.bss:004151A4                 align 10h
.bss:004151B0 ; char *Str1
.bss:004151B0 Str1            dd ?                    ; DATA XREF: sub_40A924:loc_40A95D↑w
.bss:004151B0                                         ; sub_40A924:loc_40AA90↑r
.bss:004151B4                 align 10h
.bss:004151C0 dword_4151C0    dd ?                    ; DATA XREF: sub_40A924+2D↑r
.bss:004151C0                                         ; sub_40A924+3F↑w
.bss:004151C4                 align 10h
.bss:004151D0 dword_4151D0    dd ?                    ; DATA XREF: sub_40AE10+7↑r
.bss:004151D0                                         ; sub_40AE10+2B↑w ...
.bss:004151D4                 align 10h
.bss:004151E0 ; struct _SYSTEM_INFO SystemInfo
.bss:004151E0 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_40AE10+21↑o
.bss:004151E0                                         ; sub_40AE10+33↑o
.bss:00415204                 align 10h
.bss:00415210 dword_415210    dd ?                    ; DATA XREF: sub_40B1E0+3E↑r
.bss:00415210                                         ; sub_40B1E0+F5↑w
.bss:00415214 dword_415214    dd ?                    ; DATA XREF: sub_40B1E0+38↑r
.bss:00415214                                         ; sub_40B1E0+EB↑w
.bss:00415218                 align 10h
.bss:00415220 dword_415220    dd ?                    ; DATA XREF: sub_40BB50+100↑r
.bss:00415220                                         ; sub_40BB50+308↑w
.bss:00415224                 align 10h
.bss:00415230 ; char *dword_415230
.bss:00415230 dword_415230    dd ?                    ; DATA XREF: sub_40BB50:loc_40BEB4↑r
.bss:00415230                                         ; sub_40BB50+3B6↑r ...
.bss:00415234                 align 10h
.bss:00415240 ; LARGE_INTEGER Frequency
.bss:00415240 Frequency       LARGE_INTEGER <?>       ; DATA XREF: sub_40D460+D↑r
.bss:00415240                                         ; sub_40D460:loc_40D480↑o ...
.bss:00415248                 align 10h
.bss:00415250 dword_415250    dd ?                    ; DATA XREF: sub_40D860+1C↑r
.bss:00415250                                         ; sub_40D860+104↑w
.bss:00415254                 align 10h
.bss:00415260 dword_415260    dd ?                    ; DATA XREF: sub_40D860+B↑r
.bss:00415260                                         ; sub_40D860+71↑w
.bss:00415264                 align 10h
.bss:00415270 dword_415270    dd ?                    ; DATA XREF: sub_40D860+85↑r
.bss:00415270                                         ; sub_40D860+B9↑w
.bss:00415274 dword_415274    dd ?                    ; DATA XREF: sub_40D860+C4↑w
.bss:00415278 dword_415278    dd ?                    ; DATA XREF: sub_40D860+2E↑o
.bss:00415278                                         ; sub_40D860+CF↑w
.bss:0041527C dword_41527C    dd ?                    ; DATA XREF: sub_40D860+DA↑w
.bss:00415280                 db    ? ;
.bss:00415281                 db    ? ;
.bss:00415282                 db    ? ;
.bss:00415283                 db    ? ;
.bss:00415284                 db    ? ;
.bss:00415285                 db    ? ;
.bss:00415286                 db    ? ;
.bss:00415287                 db    ? ;
.bss:00415288                 db    ? ;
.bss:00415289                 db    ? ;
.bss:0041528A                 db    ? ;
.bss:0041528B                 db    ? ;
.bss:0041528C                 db    ? ;
.bss:0041528D                 db    ? ;
.bss:0041528E                 db    ? ;
.bss:0041528F                 db    ? ;
.bss:00415290                 db    ? ;
.bss:00415291                 db    ? ;
.bss:00415292                 db    ? ;
.bss:00415293                 db    ? ;
.bss:00415294                 db    ? ;
.bss:00415295                 db    ? ;
.bss:00415296                 db    ? ;
.bss:00415297                 db    ? ;
.bss:00415298                 db    ? ;
.bss:00415299                 db    ? ;
.bss:0041529A                 db    ? ;
.bss:0041529B                 db    ? ;
.bss:0041529C                 db    ? ;
.bss:0041529D                 db    ? ;
.bss:0041529E                 db    ? ;
.bss:0041529F                 db    ? ;
.bss:004152A0                 db    ? ;
.bss:004152A1                 db    ? ;
.bss:004152A2                 db    ? ;
.bss:004152A3                 db    ? ;
.bss:004152A4                 db    ? ;
.bss:004152A5                 db    ? ;
.bss:004152A6                 db    ? ;
.bss:004152A7                 db    ? ;
.bss:004152A8                 db    ? ;
.bss:004152A9                 db    ? ;
.bss:004152AA                 db    ? ;
.bss:004152AB                 db    ? ;
.bss:004152AC                 db    ? ;
.bss:004152AD                 db    ? ;
.bss:004152AE                 db    ? ;
.bss:004152AF                 db    ? ;
.bss:004152B0                 db    ? ;
.bss:004152B1                 db    ? ;
.bss:004152B2                 db    ? ;
.bss:004152B3                 db    ? ;
.bss:004152B4                 db    ? ;
.bss:004152B5                 db    ? ;
.bss:004152B6                 db    ? ;
.bss:004152B7                 db    ? ;
.bss:004152B8                 db    ? ;
.bss:004152B9                 db    ? ;
.bss:004152BA                 db    ? ;
.bss:004152BB                 db    ? ;
.bss:004152BC                 db    ? ;
.bss:004152BD                 db    ? ;
.bss:004152BE                 db    ? ;
.bss:004152BF                 db    ? ;
.bss:004152C0                 db    ? ;
.bss:004152C1                 db    ? ;
.bss:004152C2                 db    ? ;
.bss:004152C3                 db    ? ;
.bss:004152C4                 db    ? ;
.bss:004152C5                 db    ? ;
.bss:004152C6                 db    ? ;
.bss:004152C7                 db    ? ;
.bss:004152C8                 db    ? ;
.bss:004152C9                 db    ? ;
.bss:004152CA                 db    ? ;
.bss:004152CB                 db    ? ;
.bss:004152CC                 db    ? ;
.bss:004152CD                 db    ? ;
.bss:004152CE                 db    ? ;
.bss:004152CF                 db    ? ;
.bss:004152D0                 db    ? ;
.bss:004152D1                 db    ? ;
.bss:004152D2                 db    ? ;
.bss:004152D3                 db    ? ;
.bss:004152D4                 db    ? ;
.bss:004152D5                 db    ? ;
.bss:004152D6                 db    ? ;
.bss:004152D7                 db    ? ;
.bss:004152D8                 db    ? ;
.bss:004152D9                 db    ? ;
.bss:004152DA                 db    ? ;
.bss:004152DB                 db    ? ;
.bss:004152DC                 db    ? ;
.bss:004152DD                 db    ? ;
.bss:004152DE                 db    ? ;
.bss:004152DF                 db    ? ;
.bss:004152E0                 db    ? ;
.bss:004152E1                 db    ? ;
.bss:004152E2                 db    ? ;
.bss:004152E3                 db    ? ;
.bss:004152E4                 db    ? ;
.bss:004152E5                 db    ? ;
.bss:004152E6                 db    ? ;
.bss:004152E7                 db    ? ;
.bss:004152E8                 db    ? ;
.bss:004152E9                 db    ? ;
.bss:004152EA                 db    ? ;
.bss:004152EB                 db    ? ;
.bss:004152EC                 db    ? ;
.bss:004152ED                 db    ? ;
.bss:004152EE                 db    ? ;
.bss:004152EF                 db    ? ;
.bss:004152F0                 db    ? ;
.bss:004152F1                 db    ? ;
.bss:004152F2                 db    ? ;
.bss:004152F3                 db    ? ;
.bss:004152F4                 db    ? ;
.bss:004152F5                 db    ? ;
.bss:004152F6                 db    ? ;
.bss:004152F7                 db    ? ;
.bss:004152F8                 db    ? ;
.bss:004152F9                 db    ? ;
.bss:004152FA                 db    ? ;
.bss:004152FB                 db    ? ;
.bss:004152FC                 db    ? ;
.bss:004152FD                 db    ? ;
.bss:004152FE                 db    ? ;
.bss:004152FF                 db    ? ;
.bss:00415300                 db    ? ;
.bss:00415301                 db    ? ;
.bss:00415302                 db    ? ;
.bss:00415303                 db    ? ;
.bss:00415304                 db    ? ;
.bss:00415305                 db    ? ;
.bss:00415306                 db    ? ;
.bss:00415307                 db    ? ;
.bss:00415308                 db    ? ;
.bss:00415309                 db    ? ;
.bss:0041530A                 db    ? ;
.bss:0041530B                 db    ? ;
.bss:0041530C                 db    ? ;
.bss:0041530D                 db    ? ;
.bss:0041530E                 db    ? ;
.bss:0041530F                 db    ? ;
.bss:00415310                 db    ? ;
.bss:00415311                 db    ? ;
.bss:00415312                 db    ? ;
.bss:00415313                 db    ? ;
.bss:00415314                 db    ? ;
.bss:00415315                 db    ? ;
.bss:00415316                 db    ? ;
.bss:00415317                 db    ? ;
.bss:00415318                 db    ? ;
.bss:00415319                 db    ? ;
.bss:0041531A                 db    ? ;
.bss:0041531B                 db    ? ;
.bss:0041531C                 db    ? ;
.bss:0041531D                 db    ? ;
.bss:0041531E                 db    ? ;
.bss:0041531F                 db    ? ;
.bss:00415320                 db    ? ;
.bss:00415321                 db    ? ;
.bss:00415322                 db    ? ;
.bss:00415323                 db    ? ;
.bss:00415324                 db    ? ;
.bss:00415325                 db    ? ;
.bss:00415326                 db    ? ;
.bss:00415327                 db    ? ;
.bss:00415328                 db    ? ;
.bss:00415329                 db    ? ;
.bss:0041532A                 db    ? ;
.bss:0041532B                 db    ? ;
.bss:0041532C                 db    ? ;
.bss:0041532D                 db    ? ;
.bss:0041532E                 db    ? ;
.bss:0041532F                 db    ? ;
.bss:00415330                 db    ? ;
.bss:00415331                 db    ? ;
.bss:00415332                 db    ? ;
.bss:00415333                 db    ? ;
.bss:00415334                 db    ? ;
.bss:00415335                 db    ? ;
.bss:00415336                 db    ? ;
.bss:00415337                 db    ? ;
.bss:00415338                 db    ? ;
.bss:00415339                 db    ? ;
.bss:0041533A                 db    ? ;
.bss:0041533B                 db    ? ;
.bss:0041533C                 db    ? ;
.bss:0041533D                 db    ? ;
.bss:0041533E                 db    ? ;
.bss:0041533F                 db    ? ;
.bss:00415340                 db    ? ;
.bss:00415341                 db    ? ;
.bss:00415342                 db    ? ;
.bss:00415343                 db    ? ;
.bss:00415344                 db    ? ;
.bss:00415345                 db    ? ;
.bss:00415346                 db    ? ;
.bss:00415347                 db    ? ;
.bss:00415348                 db    ? ;
.bss:00415349                 db    ? ;
.bss:0041534A                 db    ? ;
.bss:0041534B                 db    ? ;
.bss:0041534C                 db    ? ;
.bss:0041534D                 db    ? ;
.bss:0041534E                 db    ? ;
.bss:0041534F                 db    ? ;
.bss:00415350                 db    ? ;
.bss:00415351                 db    ? ;
.bss:00415352                 db    ? ;
.bss:00415353                 db    ? ;
.bss:00415354                 db    ? ;
.bss:00415355                 db    ? ;
.bss:00415356                 db    ? ;
.bss:00415357                 db    ? ;
.bss:00415358                 db    ? ;
.bss:00415359                 db    ? ;
.bss:0041535A                 db    ? ;
.bss:0041535B                 db    ? ;
.bss:0041535C                 db    ? ;
.bss:0041535D                 db    ? ;
.bss:0041535E                 db    ? ;
.bss:0041535F                 db    ? ;
.bss:00415360                 db    ? ;
.bss:00415361                 db    ? ;
.bss:00415362                 db    ? ;
.bss:00415363                 db    ? ;
.bss:00415364                 db    ? ;
.bss:00415365                 db    ? ;
.bss:00415366                 db    ? ;
.bss:00415367                 db    ? ;
.bss:00415368                 db    ? ;
.bss:00415369                 db    ? ;
.bss:0041536A                 db    ? ;
.bss:0041536B                 db    ? ;
.bss:0041536C                 db    ? ;
.bss:0041536D                 db    ? ;
.bss:0041536E                 db    ? ;
.bss:0041536F                 db    ? ;
.bss:00415370                 db    ? ;
.bss:00415371                 db    ? ;
.bss:00415372                 db    ? ;
.bss:00415373                 db    ? ;
.bss:00415374                 db    ? ;
.bss:00415375                 db    ? ;
.bss:00415376                 db    ? ;
.bss:00415377                 db    ? ;
.bss:00415378                 db    ? ;
.bss:00415379                 db    ? ;
.bss:0041537A                 db    ? ;
.bss:0041537B                 db    ? ;
.bss:0041537C                 db    ? ;
.bss:0041537D                 db    ? ;
.bss:0041537E                 db    ? ;
.bss:0041537F                 db    ? ;
.bss:00415380                 db    ? ;
.bss:00415381                 db    ? ;
.bss:00415382                 db    ? ;
.bss:00415383                 db    ? ;
.bss:00415384                 db    ? ;
.bss:00415385                 db    ? ;
.bss:00415386                 db    ? ;
.bss:00415387                 db    ? ;
.bss:00415388                 db    ? ;
.bss:00415389                 db    ? ;
.bss:0041538A                 db    ? ;
.bss:0041538B                 db    ? ;
.bss:0041538C                 db    ? ;
.bss:0041538D                 db    ? ;
.bss:0041538E                 db    ? ;
.bss:0041538F                 db    ? ;
.bss:00415390                 db    ? ;
.bss:00415391                 db    ? ;
.bss:00415392                 db    ? ;
.bss:00415393                 db    ? ;
.bss:00415394                 db    ? ;
.bss:00415395                 db    ? ;
.bss:00415396                 db    ? ;
.bss:00415397                 db    ? ;
.bss:00415398                 db    ? ;
.bss:00415399                 db    ? ;
.bss:0041539A                 db    ? ;
.bss:0041539B                 db    ? ;
.bss:0041539C                 db    ? ;
.bss:0041539D                 db    ? ;
.bss:0041539E                 db    ? ;
.bss:0041539F                 db    ? ;
.bss:004153A0                 db    ? ;
.bss:004153A1                 db    ? ;
.bss:004153A2                 db    ? ;
.bss:004153A3                 db    ? ;
.bss:004153A4                 db    ? ;
.bss:004153A5                 db    ? ;
.bss:004153A6                 db    ? ;
.bss:004153A7                 db    ? ;
.bss:004153A8                 db    ? ;
.bss:004153A9                 db    ? ;
.bss:004153AA                 db    ? ;
.bss:004153AB                 db    ? ;
.bss:004153AC                 db    ? ;
.bss:004153AD                 db    ? ;
.bss:004153AE                 db    ? ;
.bss:004153AF                 db    ? ;
.bss:004153B0                 db    ? ;
.bss:004153B1                 db    ? ;
.bss:004153B2                 db    ? ;
.bss:004153B3                 db    ? ;
.bss:004153B4                 db    ? ;
.bss:004153B5                 db    ? ;
.bss:004153B6                 db    ? ;
.bss:004153B7                 db    ? ;
.bss:004153B8                 db    ? ;
.bss:004153B9                 db    ? ;
.bss:004153BA                 db    ? ;
.bss:004153BB                 db    ? ;
.bss:004153BC                 db    ? ;
.bss:004153BD                 db    ? ;
.bss:004153BE                 db    ? ;
.bss:004153BF                 db    ? ;
.bss:004153C0                 db    ? ;
.bss:004153C1                 db    ? ;
.bss:004153C2                 db    ? ;
.bss:004153C3                 db    ? ;
.bss:004153C4                 db    ? ;
.bss:004153C5                 db    ? ;
.bss:004153C6                 db    ? ;
.bss:004153C7                 db    ? ;
.bss:004153C8                 db    ? ;
.bss:004153C9                 db    ? ;
.bss:004153CA                 db    ? ;
.bss:004153CB                 db    ? ;
.bss:004153CC                 db    ? ;
.bss:004153CD                 db    ? ;
.bss:004153CE                 db    ? ;
.bss:004153CF                 db    ? ;
.bss:004153D0                 db    ? ;
.bss:004153D1                 db    ? ;
.bss:004153D2                 db    ? ;
.bss:004153D3                 db    ? ;
.bss:004153D4                 db    ? ;
.bss:004153D5                 db    ? ;
.bss:004153D6                 db    ? ;
.bss:004153D7                 db    ? ;
.bss:004153D8                 db    ? ;
.bss:004153D9                 db    ? ;
.bss:004153DA                 db    ? ;
.bss:004153DB                 db    ? ;
.bss:004153DC                 db    ? ;
.bss:004153DD                 db    ? ;
.bss:004153DE                 db    ? ;
.bss:004153DF                 db    ? ;
.bss:004153E0                 db    ? ;
.bss:004153E1                 db    ? ;
.bss:004153E2                 db    ? ;
.bss:004153E3                 db    ? ;
.bss:004153E4                 db    ? ;
.bss:004153E5                 db    ? ;
.bss:004153E6                 db    ? ;
.bss:004153E7                 db    ? ;
.bss:004153E8                 db    ? ;
.bss:004153E9                 db    ? ;
.bss:004153EA                 db    ? ;
.bss:004153EB                 db    ? ;
.bss:004153EC                 db    ? ;
.bss:004153ED                 db    ? ;
.bss:004153EE                 db    ? ;
.bss:004153EF                 db    ? ;
.bss:004153F0                 db    ? ;
.bss:004153F1                 db    ? ;
.bss:004153F2                 db    ? ;
.bss:004153F3                 db    ? ;
.bss:004153F4                 db    ? ;
.bss:004153F5                 db    ? ;
.bss:004153F6                 db    ? ;
.bss:004153F7                 db    ? ;
.bss:004153F8                 db    ? ;
.bss:004153F9                 db    ? ;
.bss:004153FA                 db    ? ;
.bss:004153FB                 db    ? ;
.bss:004153FC                 db    ? ;
.bss:004153FD                 db    ? ;
.bss:004153FE                 db    ? ;
.bss:004153FF                 db    ? ;
.bss:00415400                 db    ? ;
.bss:00415401                 db    ? ;
.bss:00415402                 db    ? ;
.bss:00415403                 db    ? ;
.bss:00415404                 db    ? ;
.bss:00415405                 db    ? ;
.bss:00415406                 db    ? ;
.bss:00415407                 db    ? ;
.bss:00415408                 db    ? ;
.bss:00415409                 db    ? ;
.bss:0041540A                 db    ? ;
.bss:0041540B                 db    ? ;
.bss:0041540C                 db    ? ;
.bss:0041540D                 db    ? ;
.bss:0041540E                 db    ? ;
.bss:0041540F                 db    ? ;
.bss:00415410                 db    ? ;
.bss:00415411                 db    ? ;
.bss:00415412                 db    ? ;
.bss:00415413                 db    ? ;
.bss:00415414                 db    ? ;
.bss:00415415                 db    ? ;
.bss:00415416                 db    ? ;
.bss:00415417                 db    ? ;
.bss:00415418                 db    ? ;
.bss:00415419                 db    ? ;
.bss:0041541A                 db    ? ;
.bss:0041541B                 db    ? ;
.bss:0041541C                 db    ? ;
.bss:0041541D                 db    ? ;
.bss:0041541E                 db    ? ;
.bss:0041541F                 db    ? ;
.bss:00415420                 db    ? ;
.bss:00415421                 db    ? ;
.bss:00415422                 db    ? ;
.bss:00415423                 db    ? ;
.bss:00415424                 db    ? ;
.bss:00415425                 db    ? ;
.bss:00415426                 db    ? ;
.bss:00415427                 db    ? ;
.bss:00415428                 db    ? ;
.bss:00415429                 db    ? ;
.bss:0041542A                 db    ? ;
.bss:0041542B                 db    ? ;
.bss:0041542C                 db    ? ;
.bss:0041542D                 db    ? ;
.bss:0041542E                 db    ? ;
.bss:0041542F                 db    ? ;
.bss:00415430                 db    ? ;
.bss:00415431                 db    ? ;
.bss:00415432                 db    ? ;
.bss:00415433                 db    ? ;
.bss:00415434                 db    ? ;
.bss:00415435                 db    ? ;
.bss:00415436                 db    ? ;
.bss:00415437                 db    ? ;
.bss:00415438                 db    ? ;
.bss:00415439                 db    ? ;
.bss:0041543A                 db    ? ;
.bss:0041543B                 db    ? ;
.bss:0041543C                 db    ? ;
.bss:0041543D                 db    ? ;
.bss:0041543E                 db    ? ;
.bss:0041543F                 db    ? ;
.bss:00415440                 db    ? ;
.bss:00415441                 db    ? ;
.bss:00415442                 db    ? ;
.bss:00415443                 db    ? ;
.bss:00415444                 db    ? ;
.bss:00415445                 db    ? ;
.bss:00415446                 db    ? ;
.bss:00415447                 db    ? ;
.bss:00415448                 db    ? ;
.bss:00415449                 db    ? ;
.bss:0041544A                 db    ? ;
.bss:0041544B                 db    ? ;
.bss:0041544C                 db    ? ;
.bss:0041544D                 db    ? ;
.bss:0041544E                 db    ? ;
.bss:0041544F                 db    ? ;
.bss:00415450                 db    ? ;
.bss:00415451                 db    ? ;
.bss:00415452                 db    ? ;
.bss:00415453                 db    ? ;
.bss:00415454                 db    ? ;
.bss:00415455                 db    ? ;
.bss:00415456                 db    ? ;
.bss:00415457                 db    ? ;
.bss:00415458                 db    ? ;
.bss:00415459                 db    ? ;
.bss:0041545A                 db    ? ;
.bss:0041545B                 db    ? ;
.bss:0041545C                 db    ? ;
.bss:0041545D                 db    ? ;
.bss:0041545E                 db    ? ;
.bss:0041545F                 db    ? ;
.bss:00415460                 db    ? ;
.bss:00415461                 db    ? ;
.bss:00415462                 db    ? ;
.bss:00415463                 db    ? ;
.bss:00415464                 db    ? ;
.bss:00415465                 db    ? ;
.bss:00415466                 db    ? ;
.bss:00415467                 db    ? ;
.bss:00415468                 db    ? ;
.bss:00415469                 db    ? ;
.bss:0041546A                 db    ? ;
.bss:0041546B                 db    ? ;
.bss:0041546C                 db    ? ;
.bss:0041546D                 db    ? ;
.bss:0041546E                 db    ? ;
.bss:0041546F                 db    ? ;
.bss:00415470 dword_415470    dd ?                    ; DATA XREF: sub_410220+8↑r
.bss:00415470                                         ; sub_410330:loc_4103B2↑w ...
.bss:00415474                 align 10h
.bss:00415480 ; struct _OSVERSIONINFOA VersionInformation
.bss:00415480 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_410330:loc_410350↑o
.bss:00415480                                         ; sub_410330+2C↑w ...
.bss:00415514 word_415514     dw ?                    ; DATA XREF: sub_410330:loc_4103E3↑r
.bss:00415516                 align 4
.bss:00415518 word_415518     dw ?                    ; DATA XREF: .text:loc_40FDA6↑r
.bss:00415518                                         ; .text:0040FDD4↑r ...
.bss:0041551A byte_41551A     db ?                    ; DATA XREF: .text:0040FD65↑r
.bss:0041551B                 align 10h
.bss:00415520 dword_415520    dd ?                    ; DATA XREF: sub_410330+6↑r
.bss:00415520                                         ; sub_410330+75↑w
.bss:00415524                 align 10h
.bss:00415530 dword_415530    dd ?                    ; DATA XREF: sub_410AE0+6E↑r
.bss:00415530                                         ; sub_410AE0+9A↑r ...
.bss:00415534 dword_415534    dd ?                    ; DATA XREF: sub_410AE0:loc_410B48↑r
.bss:00415534                                         ; sub_410AE0+A0↑r ...
.bss:00415538                 align 10h
.bss:00415540 dword_415540    dd ?                    ; DATA XREF: sub_410FF0↑r
.bss:00415540                                         ; .text:loc_411032↑w
.bss:00415544                 align 10h
.bss:00415550 dword_415550    dd ?                    ; DATA XREF: sub_401E80+42↑w
.bss:00415550                                         ; sub_401E80+1ED↑r ...
.bss:00415554                 db    ? ;
.bss:00415555                 db    ? ;
.bss:00415556                 db    ? ;
.bss:00415557                 db    ? ;
.bss:00415558                 db    ? ;
.bss:00415559                 db    ? ;
.bss:0041555A                 db    ? ;
.bss:0041555B                 db    ? ;
.bss:0041555C                 db    ? ;
.bss:0041555D                 db    ? ;
.bss:0041555E                 db    ? ;
.bss:0041555F                 db    ? ;
.bss:00415560                 db    ? ;
.bss:00415561                 db    ? ;
.bss:00415562                 db    ? ;
.bss:00415563                 db    ? ;
.bss:00415564                 db    ? ;
.bss:00415565                 db    ? ;
.bss:00415566                 db    ? ;
.bss:00415567                 db    ? ;
.bss:00415568                 db    ? ;
.bss:00415569                 db    ? ;
.bss:0041556A                 db    ? ;
.bss:0041556B                 db    ? ;
.bss:0041556C                 db    ? ;
.bss:0041556D                 db    ? ;
.bss:0041556E                 db    ? ;
.bss:0041556F                 db    ? ;
.bss:00415570 ; char *dword_415570
.bss:00415570 dword_415570    dd ?                    ; DATA XREF: sub_401E80+125↑r
.bss:00415570                                         ; sub_401E80:loc_402010↑r ...
.bss:00415574                 align 10h
.bss:00415580 dword_415580    dd ?                    ; CODE XREF: sub_40A924+63↑p
.bss:00415580                                         ; DATA XREF: sub_40A820+1E↑r ...
.bss:00415584                 align 10h
.bss:00415590 dword_415590    dd ?                    ; DATA XREF: sub_40A820+4E↑w
.bss:00415590                                         ; sub_40A924+AB↑w
.bss:00415594                 align 40h
.bss:004155C0 dword_4155C0    dd ?                    ; DATA XREF: sub_40A924+13↑r
.bss:004155C4                 align 1000h
.bss:004155C4 _bss            ends
.bss:004155C4
.idata:00416000 ; Section 4. (virtual address 00016000)
.idata:00416000 ; Virtual size                  : 00000F6C (   3948.)
.idata:00416000 ; Section size in file          : 00001000 (   4096.)
.idata:00416000 ; Offset to raw data for section: 00013400
.idata:00416000 ; Flags C0000040: Data Readable Writable
.idata:00416000 ; Alignment     : default
.idata:00416000 ; ===========================================================================
.idata:00416000
.idata:00416000 ; Segment type: Externs
.idata:00416000 ; _idata
.idata:00416000
.idata:00416001
.idata:004162F0 ;
.idata:004162F0 ; Imports from libintl3.dll
.idata:004162F0 ;
.idata:004162F0                 extrn libintl_bindtextdomain:dword
.idata:004162F0                                         ; CODE XREF: sub_401E80+5C↑p
.idata:004162F0                                         ; DATA XREF: sub_401E80+5C↑r ...
.idata:004162F4                 extrn libintl_gettext:dword
.idata:004162F4                                         ; CODE XREF: sub_401E80+1A7↑p
.idata:004162F4                                         ; sub_401E80+1E1↑p ...
.idata:004162F8                 extrn libintl_textdomain:dword
.idata:004162F8                                         ; CODE XREF: sub_401E80+69↑p
.idata:004162F8                                         ; DATA XREF: sub_401E80+69↑r ...
.idata:004162FC
.idata:00416304 ;
.idata:00416304 ; Imports from ADVAPI32.DLL
.idata:00416304 ;
.idata:00416304 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00416304                 extrn __imp_RegCloseKey:dword
.idata:00416304                                         ; DATA XREF: RegCloseKey↑r
.idata:00416308 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00416308                 extrn __imp_RegOpenKeyExA:dword
.idata:00416308                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041630C ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041630C                 extrn __imp_RegQueryValueExA:dword
.idata:0041630C                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00416310
.idata:00416318 ;
.idata:00416318 ; Imports from KERNEL32.dll
.idata:00416318 ;
.idata:00416318 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00416318                 extrn __imp_AreFileApisANSI:dword
.idata:00416318                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041631C ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041631C                 extrn __imp_CloseHandle:dword
.idata:0041631C                                         ; DATA XREF: CloseHandle↑r
.idata:00416320 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00416320                 extrn __imp_CreateDirectoryA:dword
.idata:00416320                                         ; DATA XREF: CreateDirectoryA↑r
.idata:00416324 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:00416324                 extrn __imp_CreateFileA:dword
.idata:00416324                                         ; DATA XREF: CreateFileA↑r
.idata:00416328 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:00416328                 extrn __imp_DeleteFileA:dword
.idata:00416328                                         ; DATA XREF: DeleteFileA↑r
.idata:0041632C ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041632C                 extrn __imp_DeviceIoControl:dword
.idata:0041632C                                         ; DATA XREF: DeviceIoControl↑r
.idata:00416330 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00416330                 extrn __imp_ExitProcess:dword
.idata:00416330                                         ; DATA XREF: ExitProcess↑r
.idata:00416334 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00416334                 extrn __imp_FindClose:dword
.idata:00416334                                         ; DATA XREF: FindClose↑r
.idata:00416338 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00416338                 extrn __imp_FindFirstFileA:dword
.idata:00416338                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041633C ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041633C                 extrn __imp_FindNextFileA:dword
.idata:0041633C                                         ; DATA XREF: FindNextFileA↑r
.idata:00416340 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00416340                 extrn __imp_FreeLibrary:dword
.idata:00416340                                         ; DATA XREF: FreeLibrary↑r
.idata:00416344 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00416344                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00416344                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00416348 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00416348                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00416348                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041634C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041634C                 extrn __imp_GetDriveTypeA:dword
.idata:0041634C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00416350 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00416350                 extrn __imp_GetFileAttributesA:dword
.idata:00416350                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00416354 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00416354                 extrn __imp_GetFileInformationByHandle:dword
.idata:00416354                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00416358 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00416358                 extrn __imp_GetFileSize:dword
.idata:00416358                                         ; DATA XREF: GetFileSize↑r
.idata:0041635C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041635C                 extrn __imp_GetFileType:dword
.idata:0041635C                                         ; DATA XREF: GetFileType↑r
.idata:00416360 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00416360                 extrn __imp_GetFullPathNameA:dword
.idata:00416360                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00416364 ; DWORD (__stdcall *GetLastError)()
.idata:00416364                 extrn __imp_GetLastError:dword
.idata:00416364                                         ; DATA XREF: GetLastError↑r
.idata:00416368 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00416368                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00416368                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041636C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041636C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041636C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00416370 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00416370                 extrn __imp_GetModuleHandleA:dword
.idata:00416370                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00416374 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00416374                 extrn __imp_GetProcAddress:dword
.idata:00416374                                         ; DATA XREF: GetProcAddress↑r
.idata:00416378 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00416378                 extrn __imp_GetProcessHeap:dword
.idata:00416378                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041637C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041637C                 extrn __imp_GetShortPathNameA:dword
.idata:0041637C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00416380 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00416380                 extrn __imp_GetSystemInfo:dword
.idata:00416380                                         ; DATA XREF: GetSystemInfo↑r
.idata:00416384 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00416384                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00416384                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00416388 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00416388                 extrn __imp_GetTimeZoneInformation:dword
.idata:00416388                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041638C ; DWORD (__stdcall *GetVersion)()
.idata:0041638C                 extrn __imp_GetVersion:dword
.idata:0041638C                                         ; DATA XREF: GetVersion↑r
.idata:00416390 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00416390                 extrn __imp_GetVersionExA:dword
.idata:00416390                                         ; DATA XREF: GetVersionExA↑r
.idata:00416394 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00416394                 extrn __imp_GetVolumeInformationA:dword
.idata:00416394                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00416398 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00416398                 extrn __imp_HeapAlloc:dword
.idata:00416398                                         ; DATA XREF: HeapAlloc↑r
.idata:0041639C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041639C                 extrn __imp_HeapFree:dword
.idata:0041639C                                         ; DATA XREF: HeapFree↑r
.idata:004163A0 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:004163A0                 extrn __imp_LoadLibraryA:dword
.idata:004163A0                                         ; DATA XREF: LoadLibraryA↑r
.idata:004163A4 ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:004163A4                 extrn __imp_LockFile:dword
.idata:004163A4                                         ; DATA XREF: LockFile↑r
.idata:004163A8 ; BOOL (__stdcall *MoveFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.idata:004163A8                 extrn __imp_MoveFileA:dword
.idata:004163A8                                         ; DATA XREF: MoveFileA↑r
.idata:004163AC ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004163AC                 extrn __imp_MultiByteToWideChar:dword
.idata:004163AC                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004163B0 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004163B0                 extrn __imp_PeekNamedPipe:dword
.idata:004163B0                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004163B4 ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:004163B4                 extrn __imp_QueryPerformanceFrequency:dword
.idata:004163B4                                         ; DATA XREF: QueryPerformanceFrequency↑r
.idata:004163B8 ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:004163B8                 extrn __imp_SetEndOfFile:dword
.idata:004163B8                                         ; DATA XREF: SetEndOfFile↑r
.idata:004163BC ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:004163BC                 extrn __imp_SetErrorMode:dword
.idata:004163BC                                         ; DATA XREF: SetErrorMode↑r
.idata:004163C0 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004163C0                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004163C0                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004163C4 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004163C4                 extrn __imp_UnlockFile:dword
.idata:004163C4                                         ; DATA XREF: UnlockFile↑r
.idata:004163C8 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004163C8                 extrn __imp_lstrcmpiA:dword
.idata:004163C8                                         ; DATA XREF: lstrcmpiA↑r
.idata:004163CC ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004163CC                 extrn __imp_lstrcpyA:dword
.idata:004163CC                                         ; DATA XREF: lstrcpyA↑r
.idata:004163D0
.idata:004163D8 ;
.idata:004163D8 ; Imports from msvcrt.dll
.idata:004163D8 ;
.idata:004163D8 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:004163D8                 extrn __imp__chmod:dword
.idata:004163D8                                         ; DATA XREF: _chmod↑r
.idata:004163DC ; int (__cdecl *_close)(int FileHandle)
.idata:004163DC                 extrn __imp__close:dword
.idata:004163DC                                         ; DATA XREF: _close↑r
.idata:004163E0 ; int (__cdecl *_dup)(int FileHandle)
.idata:004163E0                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004163E4 ; int (__cdecl *_getpid)()
.idata:004163E4                 extrn __imp__getpid:dword
.idata:004163E4                                         ; DATA XREF: _getpid↑r
.idata:004163E8 ; int (__cdecl *_isatty)(int FileHandle)
.idata:004163E8                 extrn __imp__isatty:dword
.idata:004163E8                                         ; DATA XREF: _isatty↑r
.idata:004163EC ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004163EC                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004163F0 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:004163F0                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:004163F4 ; char *(__cdecl *_strdup)(const char *String)
.idata:004163F4                 extrn __imp__strdup:dword
.idata:004163F4                                         ; DATA XREF: _strdup↑r
.idata:004163F8 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004163F8                 extrn __imp__stricmp:dword
.idata:004163F8                                         ; DATA XREF: _stricmp↑r
.idata:004163FC ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:004163FC                 extrn __imp__write:dword
.idata:004163FC                                         ; DATA XREF: _write↑r
.idata:00416400
.idata:00416408 ;
.idata:00416408 ; Imports from MSVCP60.DLL
.idata:00416408 ;
.idata:00416408 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00416408                 extrn __imp_mbrtowc:dword
.idata:00416408                                         ; DATA XREF: mbrtowc↑r
.idata:0041640C
.idata:00416414 ;
.idata:00416414 ; Imports from msvcrt.dll
.idata:00416414 ;
.idata:00416414                 extrn __imp___getmainargs:dword
.idata:00416414                                         ; DATA XREF: __getmainargs↑r
.idata:00416418 ; int _mb_cur_max
.idata:00416418                 extrn __mb_cur_max:dword
.idata:00416418                                         ; DATA XREF: sub_4054F0+7↑r
.idata:00416418                                         ; sub_4054F0+5F3↑r ...
.idata:0041641C ; char ***(__cdecl *__p__environ)()
.idata:0041641C                 extrn __imp___p__environ:dword
.idata:0041641C                                         ; DATA XREF: __p__environ↑r
.idata:00416420 ; int *(__cdecl *__p__fmode)()
.idata:00416420                 extrn __imp___p__fmode:dword
.idata:00416420                                         ; DATA XREF: __p__fmode↑r
.idata:00416424                 extrn __pioinfo:dword   ; DATA XREF: sub_40AF80:loc_40AFE8↑r
.idata:00416424                                         ; sub_40AF80:loc_40B013↑r ...
.idata:00416428 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00416428                 extrn __set_app_type:dword
.idata:00416428                                         ; CODE XREF: start+D↑p
.idata:00416428                                         ; .text:0040102D↑p
.idata:00416428                                         ; DATA XREF: ...
.idata:0041642C                 extrn __imp__assert:dword
.idata:0041642C                                         ; DATA XREF: _assert↑r
.idata:00416430 ; void (__cdecl *_cexit)()
.idata:00416430                 extrn __imp__cexit:dword
.idata:00416430                                         ; DATA XREF: _cexit↑r
.idata:00416434 ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:00416434                 extrn __imp__chmod_0:dword
.idata:00416434                                         ; DATA XREF: _chmod_0↑r
.idata:00416438 ; int (__cdecl *_close_0)(int FileHandle)
.idata:00416438                 extrn __imp__close_0:dword
.idata:00416438                                         ; DATA XREF: _close_0↑r
.idata:0041643C ; int (__cdecl *_commit)(int FileHandle)
.idata:0041643C                 extrn __imp__commit:dword
.idata:0041643C                                         ; DATA XREF: _commit↑r
.idata:00416440 ; int *(__cdecl *_errno)()
.idata:00416440                 extrn __imp__errno:dword
.idata:00416440                                         ; DATA XREF: _errno↑r
.idata:00416444 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00416444                 extrn __imp__fdopen:dword
.idata:00416444                                         ; DATA XREF: _fdopen↑r
.idata:00416448 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00416448                 extrn __imp__filelengthi64:dword
.idata:00416448                                         ; DATA XREF: _filelengthi64↑r
.idata:0041644C ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041644C                 extrn __imp__flsbuf:dword
.idata:0041644C                                         ; DATA XREF: _flsbuf↑r
.idata:00416450 ; int (__cdecl *_flushall)()
.idata:00416450                 extrn __imp__flushall:dword
.idata:00416450                                         ; DATA XREF: _flushall↑r
.idata:00416454 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00416454                 extrn __imp__get_osfhandle:dword
.idata:00416454                                         ; DATA XREF: _get_osfhandle↑r
.idata:00416458 ; FILE iob[]
.idata:00416458                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00416458                                         ; sub_401080+75↑r ...
.idata:0041645C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041645C                 extrn __imp__isctype:dword
.idata:0041645C                                         ; DATA XREF: _isctype↑r
.idata:00416460 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:00416460                 extrn __imp__lseeki64:dword
.idata:00416460                                         ; DATA XREF: _lseeki64↑r
.idata:00416464 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00416464                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00416464                                         ; DATA XREF: .text:0040106C↑r
.idata:00416468 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:00416468                 extrn __imp__open_0:dword
.idata:00416468                                         ; DATA XREF: _open_0↑r
.idata:0041646C ; const unsigned __int16 *pctype
.idata:0041646C                 extrn _pctype:dword     ; DATA XREF: sub_4054F0:loc_405BE4↑r
.idata:0041646C                                         ; sub_407D90:loc_4089E2↑r ...
.idata:00416470 ; int (__cdecl *_setjmp)(jmp_buf Buf)
.idata:00416470                 extrn __imp__setjmp:dword
.idata:00416470                                         ; DATA XREF: _setjmp↑r
.idata:00416474 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00416474                 extrn __imp__setmode:dword
.idata:00416474                                         ; DATA XREF: _setmode↑r
.idata:00416478 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00416478                 extrn __imp__stricmp_0:dword
.idata:00416478                                         ; DATA XREF: _stricmp_0↑r
.idata:0041647C ; void (__cdecl __noreturn *abort)()
.idata:0041647C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00416480 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00416480                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00416480                                         ; DATA XREF: sub_401040+C↑r
.idata:00416484 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00416484                 extrn __imp_calloc:dword
.idata:00416484                                         ; DATA XREF: calloc↑r
.idata:00416488 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00416488                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041648C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041648C                 extrn __imp_fclose:dword
.idata:0041648C                                         ; DATA XREF: fclose↑r
.idata:00416490 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00416490                 extrn __imp_fflush:dword
.idata:00416490                                         ; DATA XREF: fflush↑r
.idata:00416494 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00416494                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00416498 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00416498                 extrn __imp_fprintf:dword
.idata:00416498                                         ; DATA XREF: fprintf↑r
.idata:0041649C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041649C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004164A0 ; void (__cdecl *free)(void *Block)
.idata:004164A0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004164A4 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004164A4                 extrn __imp_getenv:dword
.idata:004164A4                                         ; DATA XREF: getenv↑r
.idata:004164A8 ; int (__cdecl *isalpha)(int C)
.idata:004164A8                 extrn __imp_isalpha:dword
.idata:004164A8                                         ; DATA XREF: isalpha↑r
.idata:004164AC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004164AC                 extrn __imp_iswctype:dword
.idata:004164AC                                         ; DATA XREF: iswctype↑r
.idata:004164B0 ; struct lconv *(__cdecl *localeconv)()
.idata:004164B0                 extrn __imp_localeconv:dword
.idata:004164B0                                         ; DATA XREF: localeconv↑r
.idata:004164B4 ; void (__cdecl __noreturn *longjmp)(jmp_buf Buf, int Value)
.idata:004164B4                 extrn __imp_longjmp:dword
.idata:004164B4                                         ; DATA XREF: longjmp↑r
.idata:004164B8 ; void *(__cdecl *malloc)(size_t Size)
.idata:004164B8                 extrn __imp_malloc:dword
.idata:004164B8                                         ; DATA XREF: malloc↑r
.idata:004164BC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004164BC                 extrn __imp_memcpy:dword
.idata:004164BC                                         ; DATA XREF: memcpy↑r
.idata:004164C0 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:004164C0                 extrn __imp_memmove:dword
.idata:004164C0                                         ; DATA XREF: memmove↑r
.idata:004164C4 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004164C4                 extrn __imp_memset:dword
.idata:004164C4                                         ; DATA XREF: memset↑r
.idata:004164C8 ; int (*printf)(const char *const Format, ...)
.idata:004164C8                 extrn __imp_printf:dword
.idata:004164C8                                         ; DATA XREF: printf↑r
.idata:004164CC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004164CC                 extrn __imp_realloc:dword
.idata:004164CC                                         ; DATA XREF: realloc↑r
.idata:004164D0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004164D0                 extrn __imp_setlocale:dword
.idata:004164D0                                         ; DATA XREF: setlocale↑r
.idata:004164D4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004164D4                 extrn __imp_signal:dword
.idata:004164D4                                         ; DATA XREF: signal↑r
.idata:004164D8 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004164D8                 extrn __imp_sprintf:dword
.idata:004164D8                                         ; DATA XREF: sprintf↑r
.idata:004164DC ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004164DC                 extrn __imp_sscanf:dword
.idata:004164DC                                         ; DATA XREF: sscanf↑r
.idata:004164E0 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:004164E0                 extrn __imp_strcat:dword
.idata:004164E0                                         ; DATA XREF: strcat↑r
.idata:004164E4 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:004164E4                 extrn __imp_strchr:dword
.idata:004164E4                                         ; DATA XREF: strchr↑r
.idata:004164E8 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:004164E8                 extrn __imp_strcmp:dword
.idata:004164E8                                         ; DATA XREF: strcmp↑r
.idata:004164EC ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:004164EC                 extrn __imp_strcpy:dword
.idata:004164EC                                         ; DATA XREF: strcpy↑r
.idata:004164F0 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:004164F0                 extrn __imp_strerror:dword
.idata:004164F0                                         ; DATA XREF: strerror↑r
.idata:004164F4 ; size_t (__cdecl *strlen)(const char *Str)
.idata:004164F4                 extrn __imp_strlen:dword
.idata:004164F4                                         ; DATA XREF: strlen↑r
.idata:004164F8 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:004164F8                 extrn __imp_strncmp:dword
.idata:004164F8                                         ; DATA XREF: strncmp↑r
.idata:004164FC ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004164FC                 extrn __imp_strncpy:dword
.idata:004164FC                                         ; DATA XREF: strncpy↑r
.idata:00416500 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00416500                 extrn __imp_strpbrk:dword
.idata:00416500                                         ; DATA XREF: strpbrk↑r
.idata:00416504 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00416504                 extrn __imp_strrchr:dword
.idata:00416504                                         ; DATA XREF: strrchr↑r
.idata:00416508 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00416508                 extrn __imp_strspn:dword
.idata:00416508                                         ; DATA XREF: strspn↑r
.idata:0041650C ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041650C                 extrn __imp_strstr:dword
.idata:0041650C                                         ; DATA XREF: strstr↑r
.idata:00416510 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:00416510                 extrn __imp_strtoul:dword
.idata:00416510                                         ; DATA XREF: strtoul↑r
.idata:00416514 ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:00416514                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:00416518 ; int (__cdecl *toupper)(int C)
.idata:00416518                 extrn __imp_toupper:dword
.idata:00416518                                         ; DATA XREF: toupper↑r
.idata:0041651C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041651C                 extrn __imp_vfprintf:dword
.idata:0041651C                                         ; DATA XREF: vfprintf↑r
.idata:00416520
.idata:00416528 ;
.idata:00416528 ; Imports from OLE32.dll
.idata:00416528 ;
.idata:00416528 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00416528                 extrn __imp_CoCreateInstance:dword
.idata:00416528                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041652C ; void (__stdcall *CoUninitialize)()
.idata:0041652C                 extrn __imp_CoUninitialize:dword
.idata:0041652C                                         ; DATA XREF: CoUninitialize↑r
.idata:00416530 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00416530                 extrn __imp_OleInitialize:dword
.idata:00416530                                         ; DATA XREF: OleInitialize↑r
.idata:00416534
.idata:00416534
.idata:00416534
.idata:00416534                 end start
