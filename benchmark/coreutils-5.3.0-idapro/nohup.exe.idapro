.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 46D712477729E92A0EDE8A7D7B904C5CAEBE7E14AE55D5F14F0D22CB80FE260F
.text:00401000 ; Input MD5    : 06F53BE333501CC6BCD1366DA20B388C
.text:00401000 ; Input CRC32  : 5F8B00D8
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/nohup.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24B (Wed Apr 20 18:41:15 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004F70 (  20336.)
.text:00401000 ; Section size in file          : 00005000 (  20480.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401450+75↓p
.text:00401040                                         ; .text:00405BB0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405B50
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405B20
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401450
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405B50
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_401450+27↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_401450+41↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401450+49↓o
.text:004012C3                                         ; sub_401450+56↓o
.text:004012CD aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_401450+85↓o
.text:004012DA a530            db '5.3.0',0            ; DATA XREF: sub_401450+99↓o
.text:004012E0 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401450+A1↓o
.text:004012EE ; const FILE stru_4012EE
.text:004012EE stru_4012EE     FILE <75686F6Eh, 2B0070h, 75686F6Eh, 756F2E70h, 70610074h, 646E6570h, \
.text:004012EE                                         ; DATA XREF: sub_401450+A9↓o
.text:004012EE                                         ; sub_401450+CC↓o ...
.text:004012EE                       20676E69h, 7074756Fh>
.text:0040130E                 db  75h ; u
.text:0040130F                 db  74h ; t
.text:00401310                 db  20h
.text:00401311                 db  74h ; t
.text:00401312                 db  6Fh ; o
.text:00401313                 db  20h
.text:00401314                 db  25h ; %
.text:00401315                 db  73h ; s
.text:00401316                 db    0
.text:00401317 aCannotRunComma db 'cannot run command %s',0
.text:00401317                                         ; DATA XREF: sub_401450+20F↓o
.text:0040132D                 align 20h
.text:00401340 aFailedToRedire_0 db 'failed to redirect standard error',0
.text:00401340                                         ; DATA XREF: sub_401450+27F↓o
.text:00401362                 align 20h
.text:00401380 aFailedToSetThe db 'failed to set the copy of stderr to close on exec',0
.text:00401380                                         ; DATA XREF: sub_401450:loc_4016FE↓o
.text:004013B2                 align 10h
.text:004013C0 aFailedToRedire db 'failed to redirect standard output',0
.text:004013C0                                         ; DATA XREF: sub_401450:loc_401730↓o
.text:004013E3 ; const char VarName[]
.text:004013E3 VarName         db 'HOME',0             ; DATA XREF: sub_401450+317↓o
.text:004013E8 aFailedToOpenS  db 'failed to open %s',0
.text:004013E8                                         ; DATA XREF: sub_401450+37D↓o
.text:004013E8                                         ; sub_401450+3BF↓o
.text:004013FA aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401450:loc_401838↓o
.text:0040140A                 align 20h
.text:00401420 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401420                                         ; DATA XREF: sub_401450+40D↓o
.text:00401420                                         ; sub_401450:loc_40188E↓o ...
.text:00401447                 align 10h
.text:00401450
.text:00401450 ; =============== S U B R O U T I N E =======================================
.text:00401450
.text:00401450 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401450
.text:00401450 sub_401450      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401450
.text:00401450 Category        = dword ptr -48h
.text:00401450 Locale          = dword ptr -44h
.text:00401450 var_40          = dword ptr -40h
.text:00401450 var_3C          = byte ptr -3Ch
.text:00401450 var_38          = dword ptr -38h
.text:00401450 var_34          = dword ptr -34h
.text:00401450 var_30          = byte ptr -30h
.text:00401450 var_2C          = dword ptr -2Ch
.text:00401450 ErrorMessage    = dword ptr -1Ch
.text:00401450 var_18          = dword ptr -18h
.text:00401450 var_11          = byte ptr -11h
.text:00401450 FileHandleSrc   = dword ptr -10h
.text:00401450 arg_0           = dword ptr  8
.text:00401450 arg_4           = dword ptr  0Ch
.text:00401450
.text:00401450                 push    ebp
.text:00401451                 xor     eax, eax
.text:00401453                 mov     ebp, esp
.text:00401455                 push    edi
.text:00401456                 push    esi
.text:00401457                 push    ebx
.text:00401458                 sub     esp, 3Ch
.text:0040145B                 and     esp, 0FFFFFFF0h
.text:0040145E                 call    __alloca
.text:00401463                 mov     ebx, [ebp+arg_0]
.text:00401466                 call    sub_405BF0
.text:0040146B                 mov     [ebp+FileHandleSrc], 0FFFFFFFFh
.text:00401472                 mov     eax, [ebp+arg_4]
.text:00401475                 mov     esi, [eax]
.text:00401477                 mov     [esp+48h+Locale], offset Locale ; Locale
.text:0040147F                 mov     [esp+48h+Category], 0 ; Category
.text:00401486                 mov     ds:dword_407190, esi
.text:0040148C                 call    setlocale
.text:00401491                 mov     [esp+48h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401499                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004014A0                 call    ds:__imp_libintl_bindtextdomain
.text:004014A6                 mov     [esp+48h+Category], offset aCoreutils ; "coreutils"
.text:004014AD                 call    ds:libintl_textdomain
.text:004014B3                 mov     [esp+48h+Category], offset sub_402F80 ; void (__cdecl *)()
.text:004014BA                 mov     ecx, 7Fh
.text:004014BF                 mov     Code, ecx
.text:004014C5                 call    sub_401040
.text:004014CA                 mov     [esp+48h+var_2C], 0
.text:004014D2                 mov     edx, [ebp+arg_4]
.text:004014D5                 mov     dword ptr [esp+48h+var_30], offset aJimMeyering ; "Jim Meyering"
.text:004014DD                 mov     [esp+48h+var_34], offset sub_401A10 ; int
.text:004014E5                 mov     [esp+48h+Locale], edx ; int
.text:004014E9                 mov     [esp+48h+var_38], offset a530 ; "5.3.0"
.text:004014F1                 mov     dword ptr [esp+48h+var_3C], offset aGnuCoreutils ; "GNU coreutils"
.text:004014F9                 mov     [esp+48h+var_40], offset stru_4012EE ; FILE *
.text:00401501                 mov     [esp+48h+Category], ebx ; int
.text:00401504                 call    sub_402E90
.text:00401509                 mov     [esp+48h+var_38], 0 ; int
.text:00401511                 mov     eax, [ebp+arg_4]
.text:00401514                 mov     dword ptr [esp+48h+var_3C], 0 ; char
.text:0040151C                 mov     [esp+48h+var_40], (offset stru_4012EE._cnt+2) ; char *
.text:00401524                 mov     [esp+48h+Locale], eax ; int
.text:00401528                 mov     [esp+48h+Category], ebx ; int
.text:0040152B                 call    sub_402CF0
.text:00401530                 inc     eax
.text:00401531                 jnz     loc_40188E
.text:00401537                 cmp     ebx, dword_406020
.text:0040153D                 jle     loc_401838
.text:00401543                 mov     [esp+48h+Category], 1 ; FileHandle
.text:0040154A                 mov     edi, 1
.text:0040154F                 call    _isatty
.text:00401554                 test    eax, eax
.text:00401556                 jz      loc_4015E5
.text:0040155C                 mov     [ebp+var_18], offset stru_4012EE._base
.text:00401563                 xor     esi, esi
.text:00401565                 mov     [esp+48h+var_40], 180h
.text:0040156D                 mov     [esp+48h+Locale], 109h ; OpenFlag
.text:00401575                 mov     [esp+48h+Category], offset stru_4012EE._base ; FileName
.text:0040157C                 call    _open
.text:00401581                 cmp     eax, 0FFFFFFFFh
.text:00401584                 mov     edi, eax
.text:00401586                 jz      loc_401760
.text:0040158C
.text:0040158C loc_40158C:                             ; CODE XREF: sub_401450+364↓j
.text:0040158C                 mov     [esp+48h+Locale], 1 ; FileHandleDst
.text:00401594                 mov     [esp+48h+Category], edi ; FileHandleSrc
.text:00401597                 call    _dup2
.text:0040159C                 inc     eax
.text:0040159D                 jz      loc_401730
.text:004015A3
.text:004015A3 loc_4015A3:                             ; CODE XREF: sub_401450+30A↓j
.text:004015A3                 mov     eax, [ebp+var_18]
.text:004015A6                 mov     [esp+48h+Category], eax ; char *
.text:004015A9                 call    sub_402BD0
.text:004015AE                 mov     [esp+48h+Category], (offset stru_4012EE._file+2)
.text:004015B5                 mov     ebx, eax
.text:004015B7                 call    ds:libintl_gettext
.text:004015BD                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:004015C1                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:004015C9                 mov     [esp+48h+Category], 0 ; Code
.text:004015D0                 mov     [esp+48h+var_40], eax ; char *
.text:004015D4                 call    sub_404D30
.text:004015D9                 test    esi, esi
.text:004015DB                 jz      short loc_4015E5
.text:004015DD                 mov     [esp+48h+Category], esi ; Block
.text:004015E0                 call    free
.text:004015E5
.text:004015E5 loc_4015E5:                             ; CODE XREF: sub_401450+106↑j
.text:004015E5                                         ; sub_401450+18B↑j
.text:004015E5                 mov     [esp+48h+Category], 2 ; FileHandle
.text:004015EC                 call    _isatty
.text:004015F1                 test    eax, eax
.text:004015F3                 setnz   [ebp+var_11]
.text:004015F7                 cmp     [ebp+var_11], 0
.text:004015FB                 jnz     loc_401690
.text:00401601
.text:00401601 loc_401601:                             ; CODE XREF: sub_401450+279↓j
.text:00401601                                         ; sub_401450+2A9↓j
.text:00401601                 mov     esi, dword_406020
.text:00401607                 mov     edi, [ebp+arg_4]
.text:0040160A                 lea     ebx, [edi+esi*4]
.text:0040160D                 mov     [esp+48h+Locale], ebx ; Arguments
.text:00401611                 mov     ecx, [ebx]
.text:00401613                 mov     [esp+48h+Category], ecx ; FileName
.text:00401616                 call    _execvp
.text:0040161B                 call    _errno
.text:00401620                 cmp     dword ptr [eax], 2
.text:00401623                 setz    dl
.text:00401626                 movzx   esi, dl
.text:00401629                 add     esi, 7Eh ; '~'
.text:0040162C                 call    _errno
.text:00401631                 cmp     [ebp+var_11], 0
.text:00401635                 mov     edi, [eax]
.text:00401637                 jz      short loc_401655
.text:00401639                 cmp     [ebp+FileHandleSrc], 0FFFFFFFFh
.text:0040163D                 jz      short loc_401686
.text:0040163F                 mov     [esp+48h+Locale], 2 ; FileHandleDst
.text:00401647                 mov     edx, [ebp+FileHandleSrc]
.text:0040164A                 mov     [esp+48h+Category], edx ; FileHandleSrc
.text:0040164D                 call    _dup2
.text:00401652                 inc     eax
.text:00401653                 jz      short loc_401686
.text:00401655
.text:00401655 loc_401655:                             ; CODE XREF: sub_401450+1E7↑j
.text:00401655                 mov     ecx, [ebx]
.text:00401657                 mov     [esp+48h+Category], ecx ; char *
.text:0040165A                 call    sub_402BD0
.text:0040165F                 mov     [esp+48h+Category], offset aCannotRunComma ; "cannot run command %s"
.text:00401666                 mov     ebx, eax
.text:00401668                 call    ds:libintl_gettext
.text:0040166E                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:00401672                 mov     [esp+48h+Locale], edi ; ErrorMessage
.text:00401676                 mov     [esp+48h+Category], 0 ; Code
.text:0040167D                 mov     [esp+48h+var_40], eax ; char *
.text:00401681                 call    sub_404D30
.text:00401686
.text:00401686 loc_401686:                             ; CODE XREF: sub_401450+1ED↑j
.text:00401686                                         ; sub_401450+203↑j
.text:00401686                 mov     [esp+48h+Category], esi ; Code
.text:00401689
.text:00401689 loc_401689:                             ; CODE XREF: sub_401450+3B2↓j
.text:00401689                                         ; sub_401450+471↓j
.text:00401689                 call    exit
.text:00401689 ; ---------------------------------------------------------------------------
.text:0040168E                 align 10h
.text:00401690
.text:00401690 loc_401690:                             ; CODE XREF: sub_401450+1AB↑j
.text:00401690                 mov     [esp+48h+Category], 2 ; FileHandle
.text:00401697                 call    _dup
.text:0040169C                 mov     [ebp+FileHandleSrc], eax
.text:0040169F                 cmp     eax, 0FFFFFFFFh
.text:004016A2                 jz      short loc_4016B8
.text:004016A4                 mov     [esp+48h+Locale], 1
.text:004016AC                 mov     [esp+48h+Category], eax
.text:004016AF                 call    sub_402B20
.text:004016B4                 test    eax, eax
.text:004016B6                 jnz     short loc_4016FE
.text:004016B8
.text:004016B8 loc_4016B8:                             ; CODE XREF: sub_401450+252↑j
.text:004016B8                                         ; sub_401450+2D8↓j
.text:004016B8                 mov     [esp+48h+Locale], 2 ; FileHandleDst
.text:004016C0                 mov     [esp+48h+Category], edi ; FileHandleSrc
.text:004016C3                 call    _dup2
.text:004016C8                 inc     eax
.text:004016C9                 jnz     loc_401601
.text:004016CF                 mov     [esp+48h+Category], offset aFailedToRedire_0 ; "failed to redirect standard error"
.text:004016D6                 call    ds:libintl_gettext
.text:004016DC                 mov     esi, eax
.text:004016DE                 call    _errno
.text:004016E3                 mov     [esp+48h+var_40], esi ; char *
.text:004016E7                 mov     edi, [eax]
.text:004016E9                 mov     [esp+48h+Category], 7Fh ; Code
.text:004016F0                 mov     [esp+48h+Locale], edi ; ErrorMessage
.text:004016F4                 call    sub_404D30
.text:004016F9                 jmp     loc_401601
.text:004016FE ; ---------------------------------------------------------------------------
.text:004016FE
.text:004016FE loc_4016FE:                             ; CODE XREF: sub_401450+266↑j
.text:004016FE                 mov     [esp+48h+Category], offset aFailedToSetThe ; "failed to set the copy of stderr to clo"...
.text:00401705                 call    ds:libintl_gettext
.text:0040170B                 mov     esi, eax
.text:0040170D                 call    _errno
.text:00401712                 mov     [esp+48h+var_40], esi ; char *
.text:00401716                 mov     ebx, [eax]
.text:00401718                 mov     [esp+48h+Category], 7Fh ; Code
.text:0040171F                 mov     [esp+48h+Locale], ebx ; ErrorMessage
.text:00401723                 call    sub_404D30
.text:00401728                 jmp     short loc_4016B8
.text:00401728 ; ---------------------------------------------------------------------------
.text:0040172A                 align 10h
.text:00401730
.text:00401730 loc_401730:                             ; CODE XREF: sub_401450+14D↑j
.text:00401730                 mov     [esp+48h+Category], offset aFailedToRedire ; "failed to redirect standard output"
.text:00401737                 call    ds:libintl_gettext
.text:0040173D                 mov     ebx, eax
.text:0040173F                 call    _errno
.text:00401744                 mov     [esp+48h+var_40], ebx ; char *
.text:00401748                 mov     ecx, [eax]
.text:0040174A                 mov     [esp+48h+Category], 7Fh ; Code
.text:00401751                 mov     [esp+48h+Locale], ecx ; ErrorMessage
.text:00401755                 call    sub_404D30
.text:0040175A                 jmp     loc_4015A3
.text:0040175A ; ---------------------------------------------------------------------------
.text:0040175F                 align 10h
.text:00401760
.text:00401760 loc_401760:                             ; CODE XREF: sub_401450+136↑j
.text:00401760                 call    _errno
.text:00401765                 mov     ebx, [eax]
.text:00401767                 mov     [esp+48h+Category], offset VarName ; "HOME"
.text:0040176E                 mov     [ebp+ErrorMessage], ebx
.text:00401771                 call    getenv
.text:00401776                 test    eax, eax
.text:00401778                 jz      short loc_4017AE
.text:0040177A                 mov     [esp+48h+var_40], 0 ; int
.text:00401782                 mov     [esp+48h+Locale], offset stru_4012EE._base ; char *
.text:0040178A                 mov     [esp+48h+Category], eax ; int
.text:0040178D                 call    sub_402C00
.text:00401792                 mov     [esp+48h+Category], eax ; FileName
.text:00401795                 mov     esi, eax
.text:00401797                 mov     [esp+48h+var_40], 180h
.text:0040179F                 mov     [esp+48h+Locale], 109h ; OpenFlag
.text:004017A7                 call    _open
.text:004017AC                 mov     edi, eax
.text:004017AE
.text:004017AE loc_4017AE:                             ; CODE XREF: sub_401450+328↑j
.text:004017AE                 mov     [ebp+var_18], esi
.text:004017B1                 cmp     edi, 0FFFFFFFFh
.text:004017B4                 jnz     loc_40158C
.text:004017BA                 call    _errno
.text:004017BF                 mov     edi, [eax]
.text:004017C1                 mov     [esp+48h+Category], offset stru_4012EE._base ; char *
.text:004017C8                 call    sub_402BD0
.text:004017CD                 mov     [esp+48h+Category], offset aFailedToOpenS ; "failed to open %s"
.text:004017D4                 mov     ebx, eax
.text:004017D6                 call    ds:libintl_gettext
.text:004017DC                 mov     dword ptr [esp+48h+var_3C], ebx ; char
.text:004017E0                 mov     edx, [ebp+ErrorMessage]
.text:004017E3                 mov     [esp+48h+Category], 0 ; Code
.text:004017EA                 mov     [esp+48h+var_40], eax ; char *
.text:004017EE                 mov     [esp+48h+Locale], edx ; ErrorMessage
.text:004017F2                 call    sub_404D30
.text:004017F7                 test    esi, esi
.text:004017F9                 jnz     short loc_401807
.text:004017FB
.text:004017FB loc_4017FB:                             ; CODE XREF: sub_401450+3E6↓j
.text:004017FB                                         ; sub_401450+439↓j
.text:004017FB                 mov     [esp+48h+Category], 7Fh
.text:00401802                 jmp     loc_401689
.text:00401807 ; ---------------------------------------------------------------------------
.text:00401807
.text:00401807 loc_401807:                             ; CODE XREF: sub_401450+3A9↑j
.text:00401807                 mov     [esp+48h+Category], esi ; char *
.text:0040180A                 call    sub_402BD0
.text:0040180F                 mov     [esp+48h+Category], offset aFailedToOpenS ; "failed to open %s"
.text:00401816                 mov     esi, eax
.text:00401818                 call    ds:libintl_gettext
.text:0040181E                 mov     dword ptr [esp+48h+var_3C], esi ; char
.text:00401822                 mov     [esp+48h+Locale], edi ; ErrorMessage
.text:00401826                 mov     [esp+48h+Category], 0 ; Code
.text:0040182D                 mov     [esp+48h+var_40], eax ; char *
.text:00401831                 call    sub_404D30
.text:00401836                 jmp     short loc_4017FB
.text:00401838 ; ---------------------------------------------------------------------------
.text:00401838
.text:00401838 loc_401838:                             ; CODE XREF: sub_401450+ED↑j
.text:00401838                 mov     [esp+48h+Category], offset aMissingOperand ; "missing operand"
.text:0040183F                 call    ds:libintl_gettext
.text:00401845                 mov     [esp+48h+Locale], 0 ; ErrorMessage
.text:0040184D                 mov     [esp+48h+Category], 0 ; Code
.text:00401854                 mov     [esp+48h+var_40], eax ; char *
.text:00401858                 call    sub_404D30
.text:0040185D                 mov     [esp+48h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401864                 call    ds:libintl_gettext
.text:0040186A                 mov     edx, ds:_iob
.text:00401870                 mov     ecx, ds:dword_407190
.text:00401876                 add     edx, 40h ; '@'
.text:00401879                 mov     [esp+48h+var_40], ecx
.text:0040187D                 mov     [esp+48h+Locale], eax ; Format
.text:00401881                 mov     [esp+48h+Category], edx ; Stream
.text:00401884                 call    fprintf
.text:00401889                 jmp     loc_4017FB
.text:0040188E ; ---------------------------------------------------------------------------
.text:0040188E
.text:0040188E loc_40188E:                             ; CODE XREF: sub_401450+E1↑j
.text:0040188E                 mov     [esp+48h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401895                 call    ds:libintl_gettext
.text:0040189B                 mov     ebx, ds:_iob
.text:004018A1                 mov     edi, ds:dword_407190
.text:004018A7                 add     ebx, 40h ; '@'
.text:004018AA                 mov     [esp+48h+var_40], edi
.text:004018AE                 mov     [esp+48h+Locale], eax ; Format
.text:004018B2                 mov     [esp+48h+Category], ebx ; Stream
.text:004018B5                 call    fprintf
.text:004018BA                 mov     [esp+48h+Category], 1
.text:004018C1                 jmp     loc_401689
.text:004018C1 sub_401450      endp
.text:004018C1
.text:004018C1 ; ---------------------------------------------------------------------------
.text:004018C6                 align 20h
.text:004018E0 aUsageSCommandA db 'Usage: %s COMMAND [ARG]...',0Ah
.text:004018E0                                         ; DATA XREF: sub_401A10:loc_401A53↓o
.text:004018E0                 db '  or:  %s OPTION',0Ah,0
.text:0040190D                 align 20h
.text:00401920 aRunCommandIgno db 'Run COMMAND, ignoring hangup signals.',0Ah
.text:00401920                                         ; DATA XREF: sub_401A10+66↓o
.text:00401920                 db 0Ah,0
.text:00401948                 align 20h
.text:00401960 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401960                                         ; DATA XREF: sub_401A10+88↓o
.text:0040198D                 align 20h
.text:004019A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004019A0                                         ; DATA XREF: sub_401A10+AA↓o
.text:004019D6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401A10+CC↓o
.text:004019D6                 db 'Report bugs to <%s>.',0Ah,0
.text:004019ED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004019ED                                         ; DATA XREF: sub_401A10+D9↓o
.text:00401A03                 align 10h
.text:00401A10
.text:00401A10 ; =============== S U B R O U T I N E =======================================
.text:00401A10
.text:00401A10 ; Attributes: noreturn
.text:00401A10
.text:00401A10 ; void __cdecl __noreturn sub_401A10(int Code)
.text:00401A10 sub_401A10      proc near               ; DATA XREF: sub_401450+8D↑o
.text:00401A10
.text:00401A10 Stream          = dword ptr -1Ch
.text:00401A10 Format          = dword ptr -18h
.text:00401A10 var_14          = dword ptr -14h
.text:00401A10 var_4           = dword ptr -4
.text:00401A10 Code            = dword ptr  4
.text:00401A10
.text:00401A10                 sub     esp, 1Ch
.text:00401A13                 mov     [esp+1Ch+var_4], ebx
.text:00401A17                 mov     ebx, [esp+1Ch+Code]
.text:00401A1B                 test    ebx, ebx
.text:00401A1D                 jz      short loc_401A53
.text:00401A1F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401A26                 call    ds:libintl_gettext
.text:00401A2C                 mov     edx, ds:_iob
.text:00401A32                 mov     ecx, ds:dword_407190
.text:00401A38                 add     edx, 40h ; '@'
.text:00401A3B                 mov     [esp+1Ch+var_14], ecx
.text:00401A3F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401A43                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401A46                 call    fprintf
.text:00401A4B
.text:00401A4B loc_401A4B:                             ; CODE XREF: sub_401A10+E9↓j
.text:00401A4B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:00401A4E                 call    exit
.text:00401A53 ; ---------------------------------------------------------------------------
.text:00401A53
.text:00401A53 loc_401A53:                             ; CODE XREF: sub_401A10+D↑j
.text:00401A53                 mov     [esp+1Ch+Stream], offset aUsageSCommandA ; "Usage: %s COMMAND [ARG]...\n  or:  %s O"...
.text:00401A5A                 call    ds:libintl_gettext
.text:00401A60                 mov     ecx, ds:dword_407190
.text:00401A66                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401A69                 mov     [esp+1Ch+var_14], ecx
.text:00401A6D                 mov     [esp+1Ch+Format], ecx
.text:00401A71                 call    printf
.text:00401A76                 mov     [esp+1Ch+Stream], offset aRunCommandIgno ; "Run COMMAND, ignoring hangup signals.\n"...
.text:00401A7D                 call    ds:libintl_gettext
.text:00401A83                 mov     ecx, ds:_iob
.text:00401A89                 add     ecx, 20h ; ' '
.text:00401A8C                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401A90                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401A93                 call    fputs
.text:00401A98                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401A9F                 call    ds:libintl_gettext
.text:00401AA5                 mov     ecx, ds:_iob
.text:00401AAB                 add     ecx, 20h ; ' '
.text:00401AAE                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AB2                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401AB5                 call    fputs
.text:00401ABA                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401AC1                 call    ds:libintl_gettext
.text:00401AC7                 mov     ecx, ds:_iob
.text:00401ACD                 add     ecx, 20h ; ' '
.text:00401AD0                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401AD4                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401AD7                 call    fputs
.text:00401ADC                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401AE3                 call    ds:libintl_gettext
.text:00401AE9                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401AF1                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401AF4                 call    printf
.text:00401AF9                 jmp     loc_401A4B
.text:00401AF9 sub_401A10      endp
.text:00401AF9
.text:00401AF9 ; ---------------------------------------------------------------------------
.text:00401AFE                 align 10h
.text:00401B00 dword_401B00    dd 90002D2Dh, 7 dup(90909090h)
.text:00401B00                                         ; DATA XREF: sub_401D50+E4↓o
.text:00401B20 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401B20                                         ; DATA XREF: sub_401D50+2FC↓o
.text:00401B4D                 align 20h
.text:00401B60 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401B60                                         ; DATA XREF: sub_401D50:loc_4020B2↓o
.text:00401B8D                 align 20h
.text:00401BA0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401BA0                                         ; DATA XREF: sub_401D50:loc_402150↓o
.text:00401BA0                                         ; sub_401D50:loc_402517↓o
.text:00401BC6                 align 20h
.text:00401BE0 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401BE0                                         ; DATA XREF: sub_401D50+48E↓o
.text:00401C00 dword_401C00    dd 90909000h, 7 dup(90909090h)
.text:00401C00                                         ; DATA XREF: sub_401D50:loc_402221↓o
.text:00401C20 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401C20                                         ; DATA XREF: sub_401D50:loc_40223A↓o
.text:00401C40 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401C40                                         ; DATA XREF: sub_401D50:loc_40231F↓o
.text:00401C40                                         ; sub_401D50:loc_40264C↓o
.text:00401C67                 align 20h
.text:00401C80 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401C80                                         ; DATA XREF: sub_401D50:loc_402493↓o
.text:00401CAE                 align 20h
.text:00401CC0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401CC0                                         ; DATA XREF: sub_401D50:loc_40257F↓o
.text:00401CE1 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401CE1                                         ; DATA XREF: sub_401D50+93F↓o
.text:00401CFB aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401CFB                                         ; DATA XREF: sub_401D50:loc_4026C7↓o
.text:00401D15 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401D15                                         ; DATA XREF: sub_401D50:loc_4026EE↓o
.text:00401D33 ; const char aPosixlyCorrect[]
.text:00401D33 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401D50:loc_4028A0↓o
.text:00401D43                 align 10h
.text:00401D50
.text:00401D50 ; =============== S U B R O U T I N E =======================================
.text:00401D50
.text:00401D50
.text:00401D50 ; int __cdecl sub_401D50(int, int, char *Str, int, int, int, int, int)
.text:00401D50 sub_401D50      proc near               ; CODE XREF: sub_4028E0+5A↓p
.text:00401D50                                         ; .text:004029CA↓p ...
.text:00401D50
.text:00401D50 Str1            = dword ptr -5Ch
.text:00401D50 Str2            = dword ptr -58h
.text:00401D50 MaxCount        = dword ptr -54h
.text:00401D50 var_50          = dword ptr -50h
.text:00401D50 var_4C          = dword ptr -4Ch
.text:00401D50 var_3C          = dword ptr -3Ch
.text:00401D50 var_38          = dword ptr -38h
.text:00401D50 var_34          = dword ptr -34h
.text:00401D50 var_30          = dword ptr -30h
.text:00401D50 var_2C          = dword ptr -2Ch
.text:00401D50 var_28          = dword ptr -28h
.text:00401D50 var_24          = dword ptr -24h
.text:00401D50 var_20          = dword ptr -20h
.text:00401D50 var_1C          = dword ptr -1Ch
.text:00401D50 var_18          = dword ptr -18h
.text:00401D50 var_14          = dword ptr -14h
.text:00401D50 arg_0           = dword ptr  4
.text:00401D50 arg_4           = dword ptr  8
.text:00401D50 Str             = dword ptr  0Ch
.text:00401D50 arg_C           = dword ptr  10h
.text:00401D50 arg_10          = dword ptr  14h
.text:00401D50 arg_14          = dword ptr  18h
.text:00401D50 arg_18          = dword ptr  1Ch
.text:00401D50 arg_1C          = dword ptr  20h
.text:00401D50
.text:00401D50                 push    ebp
.text:00401D51                 mov     eax, 0FFFFFFFFh
.text:00401D56                 push    edi
.text:00401D57                 push    esi
.text:00401D58                 push    ebx
.text:00401D59                 sub     esp, 4Ch
.text:00401D5C                 mov     esi, [esp+5Ch+Str]
.text:00401D60                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401D64                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401D67                 mov     ebx, [ebp+4]
.text:00401D6A                 setz    dl
.text:00401D6D                 movzx   ecx, dl
.text:00401D70                 dec     ecx
.text:00401D71                 and     ecx, ebx
.text:00401D73                 mov     [esp+5Ch+var_14], ecx
.text:00401D77                 mov     ecx, [esp+5Ch+arg_0]
.text:00401D7B                 test    ecx, ecx
.text:00401D7D                 jle     loc_401EA7
.text:00401D83                 mov     dword ptr [ebp+0Ch], 0
.text:00401D8A                 mov     ebx, [ebp+0]
.text:00401D8D                 test    ebx, ebx
.text:00401D8F                 jz      loc_4028C0
.text:00401D95                 mov     edi, [ebp+10h]
.text:00401D98                 test    edi, edi
.text:00401D9A                 jnz     short loc_401DF3
.text:00401D9C                 lea     esi, [esi+0]
.text:00401DA0
.text:00401DA0 loc_401DA0:                             ; CODE XREF: sub_401D50+B7C↓j
.text:00401DA0                 mov     [ebp+24h], ebx
.text:00401DA3                 mov     esi, [esp+5Ch+Str]
.text:00401DA7                 mov     [ebp+20h], ebx
.text:00401DAA                 mov     ecx, [esp+5Ch+arg_18]
.text:00401DAE                 xor     ebx, ebx
.text:00401DB0                 mov     dword ptr [ebp+14h], 0
.text:00401DB7                 test    ecx, ecx
.text:00401DB9                 jz      loc_4028A0
.text:00401DBF
.text:00401DBF loc_401DBF:                             ; CODE XREF: sub_401D50+B64↓j
.text:00401DBF                 mov     ebx, 1
.text:00401DC4
.text:00401DC4 loc_401DC4:                             ; CODE XREF: sub_401D50+B5E↓j
.text:00401DC4                 mov     [ebp+1Ch], ebx
.text:00401DC7                 mov     ecx, [esp+5Ch+Str]
.text:00401DCB                 movzx   eax, byte ptr [ecx]
.text:00401DCE                 cmp     al, 2Dh ; '-'
.text:00401DD0                 jz      loc_402890
.text:00401DD6                 cmp     al, 2Bh ; '+'
.text:00401DD8                 jz      loc_402879
.text:00401DDE                 xor     edx, edx
.text:00401DE0                 test    ebx, ebx
.text:00401DE2                 setz    dl
.text:00401DE5                 mov     [ebp+18h], edx
.text:00401DE8
.text:00401DE8 loc_401DE8:                             ; CODE XREF: sub_401D50+B35↓j
.text:00401DE8                 mov     [esp+5Ch+Str], esi
.text:00401DEC                 mov     dword ptr [ebp+10h], 1
.text:00401DF3
.text:00401DF3 loc_401DF3:                             ; CODE XREF: sub_401D50+4A↑j
.text:00401DF3                 mov     eax, [ebp+14h]
.text:00401DF6                 test    eax, eax
.text:00401DF8                 jz      short loc_401E03
.text:00401DFA                 cmp     byte ptr [eax], 0
.text:00401DFD                 jnz     loc_401EE0
.text:00401E03
.text:00401E03 loc_401E03:                             ; CODE XREF: sub_401D50+A8↑j
.text:00401E03                 mov     ebx, [ebp+0]
.text:00401E06                 cmp     [ebp+24h], ebx
.text:00401E09                 jle     short loc_401E0E
.text:00401E0B                 mov     [ebp+24h], ebx
.text:00401E0E
.text:00401E0E loc_401E0E:                             ; CODE XREF: sub_401D50+B9↑j
.text:00401E0E                 cmp     [ebp+20h], ebx
.text:00401E11                 jle     short loc_401E16
.text:00401E13                 mov     [ebp+20h], ebx
.text:00401E16
.text:00401E16 loc_401E16:                             ; CODE XREF: sub_401D50+C1↑j
.text:00401E16                 cmp     dword ptr [ebp+18h], 1
.text:00401E1A                 jz      loc_4027F0
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401D50+B13↓j
.text:00401E20                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401E24                 jz      loc_4027D4
.text:00401E2A                 cld
.text:00401E2B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401E2F                 mov     edx, 3
.text:00401E34                 mov     edi, offset dword_401B00
.text:00401E39                 mov     esi, [ecx+ebx*4]
.text:00401E3C                 mov     ecx, edx
.text:00401E3E                 repe cmpsb
.text:00401E40                 jnz     short loc_401E7C
.text:00401E42                 mov     edx, [ebp+24h]
.text:00401E45                 lea     eax, [ebx+1]
.text:00401E48                 cmp     [ebp+20h], edx
.text:00401E4B                 mov     [ebp+0], eax
.text:00401E4E                 jz      loc_4027E8
.text:00401E54                 cmp     edx, eax
.text:00401E56                 jz      short loc_401E70
.text:00401E58                 mov     [esp+5Ch+Str2], ebp
.text:00401E5C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401E60                 mov     [esp+5Ch+Str1], ebx
.text:00401E63                 call    sub_402A00
.text:00401E68                 nop
.text:00401E69                 lea     esi, [esi+0]
.text:00401E70
.text:00401E70 loc_401E70:                             ; CODE XREF: sub_401D50+106↑j
.text:00401E70                                         ; sub_401D50+A9B↓j
.text:00401E70                 mov     eax, [esp+5Ch+arg_0]
.text:00401E74                 mov     ebx, eax
.text:00401E76                 mov     [ebp+24h], eax
.text:00401E79                 mov     [ebp+0], eax
.text:00401E7C
.text:00401E7C loc_401E7C:                             ; CODE XREF: sub_401D50+F0↑j
.text:00401E7C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401E80                 jz      loc_4027D4
.text:00401E86                 mov     esi, [esp+5Ch+arg_4]
.text:00401E8A                 mov     eax, [esi+ebx*4]
.text:00401E8D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401E90                 jz      short loc_401EB7
.text:00401E92
.text:00401E92 loc_401E92:                             ; CODE XREF: sub_401D50+16D↓j
.text:00401E92                 mov     edx, [ebp+18h]
.text:00401E95                 test    edx, edx
.text:00401E97                 jz      short loc_401EB0
.text:00401E99                 mov     [ebp+0Ch], eax
.text:00401E9C                 lea     edi, [ebx+1]
.text:00401E9F                 mov     eax, 1
.text:00401EA4                 mov     [ebp+0], edi
.text:00401EA7
.text:00401EA7 loc_401EA7:                             ; CODE XREF: sub_401D50+2D↑j
.text:00401EA7                                         ; sub_401D50+165↓j ...
.text:00401EA7                 add     esp, 4Ch
.text:00401EAA                 pop     ebx
.text:00401EAB                 pop     esi
.text:00401EAC                 pop     edi
.text:00401EAD                 pop     ebp
.text:00401EAE                 retn
.text:00401EAE ; ---------------------------------------------------------------------------
.text:00401EAF                 align 10h
.text:00401EB0
.text:00401EB0 loc_401EB0:                             ; CODE XREF: sub_401D50+147↑j
.text:00401EB0                                         ; sub_401D50+A8A↓j ...
.text:00401EB0                 mov     eax, 0FFFFFFFFh
.text:00401EB5                 jmp     short loc_401EA7
.text:00401EB7 ; ---------------------------------------------------------------------------
.text:00401EB7
.text:00401EB7 loc_401EB7:                             ; CODE XREF: sub_401D50+140↑j
.text:00401EB7                 movzx   edx, byte ptr [eax+1]
.text:00401EBB                 test    dl, dl
.text:00401EBD                 jz      short loc_401E92
.text:00401EBF                 mov     ebx, [esp+5Ch+arg_C]
.text:00401EC3                 xor     ecx, ecx
.text:00401EC5                 test    ebx, ebx
.text:00401EC7                 jz      short loc_401ED2
.text:00401EC9                 cmp     dl, 2Dh ; '-'
.text:00401ECC                 jz      loc_4027CA
.text:00401ED2
.text:00401ED2 loc_401ED2:                             ; CODE XREF: sub_401D50+177↑j
.text:00401ED2                                         ; sub_401D50+A7F↓j
.text:00401ED2                 lea     esi, [ecx+eax+1]
.text:00401ED6                 mov     [ebp+14h], esi
.text:00401ED9                 lea     esi, [esi+0]
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_401D50+AD↑j
.text:00401EE0                 mov     ecx, [esp+5Ch+arg_C]
.text:00401EE4                 test    ecx, ecx
.text:00401EE6                 jz      loc_402270
.text:00401EEC                 mov     edx, [ebp+0]
.text:00401EEF                 mov     edi, [esp+5Ch+arg_4]
.text:00401EF3                 mov     eax, [edi+edx*4]
.text:00401EF6                 movzx   edx, byte ptr [eax+1]
.text:00401EFA                 cmp     dl, 2Dh ; '-'
.text:00401EFD                 jz      short loc_401F15
.text:00401EFF                 mov     ebx, [esp+5Ch+arg_14]
.text:00401F03                 test    ebx, ebx
.text:00401F05                 jz      loc_402270
.text:00401F0B                 cmp     byte ptr [eax+2], 0
.text:00401F0F                 jz      loc_4027AA
.text:00401F15
.text:00401F15 loc_401F15:                             ; CODE XREF: sub_401D50+1AD↑j
.text:00401F15                                         ; sub_401D50+A75↓j
.text:00401F15                 mov     [esp+5Ch+var_18], 0
.text:00401F1D                 mov     ecx, [ebp+14h]
.text:00401F20                 mov     [esp+5Ch+var_1C], 0
.text:00401F28                 mov     [esp+5Ch+var_20], 0
.text:00401F30                 mov     edi, ecx
.text:00401F32                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401F3A                 movzx   eax, byte ptr [ecx]
.text:00401F3D                 test    al, al
.text:00401F3F                 jz      short loc_401F5C
.text:00401F41                 cmp     al, 3Dh ; '='
.text:00401F43                 jz      short loc_401F5C
.text:00401F45                 lea     esi, [esi+0]
.text:00401F49                 lea     edi, [edi+0]
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401D50+20A↓j
.text:00401F50                 inc     edi
.text:00401F51                 movzx   eax, byte ptr [edi]
.text:00401F54                 test    al, al
.text:00401F56                 jz      short loc_401F5C
.text:00401F58                 cmp     al, 3Dh ; '='
.text:00401F5A                 jnz     short loc_401F50
.text:00401F5C
.text:00401F5C loc_401F5C:                             ; CODE XREF: sub_401D50+1EF↑j
.text:00401F5C                                         ; sub_401D50+1F3↑j ...
.text:00401F5C                 mov     [esp+5Ch+var_28], 0
.text:00401F64                 mov     esi, [esp+5Ch+arg_C]
.text:00401F68                 mov     ebx, [esi]
.text:00401F6A                 test    ebx, ebx
.text:00401F6C                 mov     edx, ebx
.text:00401F6E                 jz      loc_402190
.text:00401F74                 lea     esi, [esi+0]
.text:00401F7A                 lea     edi, [edi+0]
.text:00401F80
.text:00401F80 loc_401F80:                             ; CODE XREF: sub_401D50+25E↓j
.text:00401F80                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401F84                 mov     ebx, edi
.text:00401F86                 sub     ebx, ecx
.text:00401F88                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401F8C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401F8F                 call    strncmp
.text:00401F94                 test    eax, eax
.text:00401F96                 jz      loc_402726
.text:00401F9C
.text:00401F9C loc_401F9C:                             ; CODE XREF: sub_401D50+A0F↓j
.text:00401F9C                                         ; sub_401D50+A24↓j ...
.text:00401F9C                 inc     [esp+5Ch+var_28]
.text:00401FA0                 add     esi, 10h
.text:00401FA3                 mov     ecx, [esi]
.text:00401FA5                 test    ecx, ecx
.text:00401FA7                 mov     edx, ecx
.text:00401FA9                 jz      short loc_401FB0
.text:00401FAB                 mov     ecx, [ebp+14h]
.text:00401FAE                 jmp     short loc_401F80
.text:00401FB0 ; ---------------------------------------------------------------------------
.text:00401FB0
.text:00401FB0 loc_401FB0:                             ; CODE XREF: sub_401D50+259↑j
.text:00401FB0                                         ; sub_401D50+A55↓j
.text:00401FB0                 mov     esi, [esp+5Ch+var_20]
.text:00401FB4                 test    esi, esi
.text:00401FB6                 jz      short loc_401FC4
.text:00401FB8                 mov     edx, [esp+5Ch+var_1C]
.text:00401FBC                 test    edx, edx
.text:00401FBE                 jz      loc_4026D0
.text:00401FC4
.text:00401FC4 loc_401FC4:                             ; CODE XREF: sub_401D50+266↑j
.text:00401FC4                 mov     eax, [esp+5Ch+var_18]
.text:00401FC8                 test    eax, eax
.text:00401FCA                 jz      loc_402190
.text:00401FD0                 mov     ecx, [ebp+0]
.text:00401FD3                 lea     eax, [ecx+1]
.text:00401FD6                 mov     [ebp+0], eax
.text:00401FD9                 cmp     byte ptr [edi], 0
.text:00401FDC                 jz      loc_4020F0
.text:00401FE2                 mov     ecx, [esp+5Ch+var_18]
.text:00401FE6                 mov     esi, [ecx+4]
.text:00401FE9                 test    esi, esi
.text:00401FEB                 jz      short loc_402036
.text:00401FED                 lea     ebx, [edi+1]
.text:00401FF0                 mov     [ebp+0Ch], ebx
.text:00401FF3
.text:00401FF3 loc_401FF3:                             ; CODE XREF: sub_401D50+3A8↓j
.text:00401FF3                                         ; sub_401D50+3C4↓j
.text:00401FF3                 mov     ebx, [ebp+14h]
.text:00401FF6                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401FF9                 call    strlen
.text:00401FFE                 add     [ebp+14h], eax
.text:00402001                 mov     esi, [esp+5Ch+arg_10]
.text:00402005                 test    esi, esi
.text:00402007                 jz      short loc_402013
.text:00402009                 mov     ebp, [esp+5Ch+var_24]
.text:0040200D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402011                 mov     [ecx], ebp
.text:00402013
.text:00402013 loc_402013:                             ; CODE XREF: sub_401D50+2B7↑j
.text:00402013                 mov     eax, [esp+5Ch+var_18]
.text:00402017                 mov     ecx, [eax+8]
.text:0040201A                 test    ecx, ecx
.text:0040201C                 jnz     short loc_40202A
.text:0040201E                 mov     ecx, [esp+5Ch+var_18]
.text:00402022
.text:00402022 loc_402022:                             ; CODE XREF: sub_401D50+723↓j
.text:00402022                 mov     eax, [ecx+0Ch]
.text:00402025                 jmp     loc_401EA7
.text:0040202A ; ---------------------------------------------------------------------------
.text:0040202A
.text:0040202A loc_40202A:                             ; CODE XREF: sub_401D50+2CC↑j
.text:0040202A                                         ; sub_401D50+719↓j
.text:0040202A                 mov     esi, [eax+0Ch]
.text:0040202D                 xor     eax, eax
.text:0040202F                 mov     [ecx], esi
.text:00402031                 jmp     loc_401EA7
.text:00402036 ; ---------------------------------------------------------------------------
.text:00402036
.text:00402036 loc_402036:                             ; CODE XREF: sub_401D50+29B↑j
.text:00402036                 mov     edi, [esp+5Ch+var_14]
.text:0040203A                 test    edi, edi
.text:0040203C                 jz      short loc_402090
.text:0040203E                 mov     esi, [esp+5Ch+arg_4]
.text:00402042                 mov     edx, [esi+eax*4-4]
.text:00402046                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040204A                 jz      short loc_4020B2
.text:0040204C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402053                 call    ds:libintl_gettext
.text:00402059                 mov     edx, [esp+5Ch+var_18]
.text:0040205D                 mov     edi, [edx]
.text:0040205F                 mov     [esp+5Ch+var_4C], edi
.text:00402063                 mov     ebx, [ebp+0]
.text:00402066                 mov     edi, [esp+5Ch+arg_4]
.text:0040206A                 mov     ecx, [edi+ebx*4-4]
.text:0040206E                 movsx   esi, byte ptr [ecx]
.text:00402071                 mov     ecx, ds:_iob
.text:00402077                 add     ecx, 40h ; '@'
.text:0040207A                 mov     [esp+5Ch+var_50], esi
.text:0040207E                 mov     ebx, [edi]
.text:00402080                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402084                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402087                 mov     [esp+5Ch+MaxCount], ebx
.text:0040208B                 call    fprintf
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401D50+2EC↑j
.text:00402090                                         ; sub_401D50+398↓j
.text:00402090                 mov     ecx, [ebp+14h]
.text:00402093                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402096                 call    strlen
.text:0040209B                 add     [ebp+14h], eax
.text:0040209E                 mov     eax, [esp+5Ch+var_18]
.text:004020A2                 mov     esi, [eax+0Ch]
.text:004020A5                 mov     [ebp+8], esi
.text:004020A8
.text:004020A8 loc_4020A8:                             ; CODE XREF: sub_401D50+4E5↓j
.text:004020A8                                         ; sub_401D50+73E↓j ...
.text:004020A8                 mov     eax, 3Fh ; '?'
.text:004020AD                 jmp     loc_401EA7
.text:004020B2 ; ---------------------------------------------------------------------------
.text:004020B2
.text:004020B2 loc_4020B2:                             ; CODE XREF: sub_401D50+2FA↑j
.text:004020B2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004020B9                 call    ds:libintl_gettext
.text:004020BF                 mov     edx, [esp+5Ch+var_18]
.text:004020C3                 mov     edi, [esp+5Ch+arg_4]
.text:004020C7                 mov     ecx, ds:_iob
.text:004020CD                 mov     esi, [edx]
.text:004020CF                 add     ecx, 40h ; '@'
.text:004020D2                 mov     [esp+5Ch+var_50], esi
.text:004020D6                 mov     ebx, [edi]
.text:004020D8                 mov     [esp+5Ch+Str2], eax ; Format
.text:004020DC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004020DF                 mov     [esp+5Ch+MaxCount], ebx
.text:004020E3                 call    fprintf
.text:004020E8                 jmp     short loc_402090
.text:004020E8 ; ---------------------------------------------------------------------------
.text:004020EA                 align 10h
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401D50+28C↑j
.text:004020F0                 mov     ebx, [esp+5Ch+var_18]
.text:004020F4                 cmp     dword ptr [ebx+4], 1
.text:004020F8                 jnz     loc_401FF3
.text:004020FE                 cmp     eax, [esp+5Ch+arg_0]
.text:00402102                 jge     short loc_402119
.text:00402104                 mov     ebx, [esp+5Ch+arg_4]
.text:00402108                 lea     edi, [ecx+2]
.text:0040210B                 mov     [ebp+0], edi
.text:0040210E                 mov     esi, [ebx+eax*4]
.text:00402111                 mov     [ebp+0Ch], esi
.text:00402114                 jmp     loc_401FF3
.text:00402119 ; ---------------------------------------------------------------------------
.text:00402119
.text:00402119 loc_402119:                             ; CODE XREF: sub_401D50+3B2↑j
.text:00402119                 mov     edx, [esp+5Ch+var_14]
.text:0040211D                 test    edx, edx
.text:0040211F                 jnz     short loc_402150
.text:00402121
.text:00402121 loc_402121:                             ; CODE XREF: sub_401D50+437↓j
.text:00402121                 mov     edx, [ebp+14h]
.text:00402124                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402127                 call    strlen
.text:0040212C                 add     [ebp+14h], eax
.text:0040212F                 mov     eax, [esp+5Ch+var_18]
.text:00402133                 mov     edi, [eax+0Ch]
.text:00402136                 mov     [ebp+8], edi
.text:00402139
.text:00402139 loc_402139:                             ; CODE XREF: sub_401D50+7C2↓j
.text:00402139                 mov     ebp, [esp+5Ch+Str]
.text:0040213D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402141                 setnz   bl
.text:00402144                 movzx   esi, bl
.text:00402147                 lea     eax, [esi+esi*4+3Ah]
.text:0040214B                 jmp     loc_401EA7
.text:00402150 ; ---------------------------------------------------------------------------
.text:00402150
.text:00402150 loc_402150:                             ; CODE XREF: sub_401D50+3CF↑j
.text:00402150                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402157                 call    ds:libintl_gettext
.text:0040215D                 mov     ecx, [ebp+0]
.text:00402160                 mov     esi, [esp+5Ch+arg_4]
.text:00402164                 mov     ebx, [esi+ecx*4-4]
.text:00402168                 mov     ecx, ds:_iob
.text:0040216E                 mov     [esp+5Ch+var_50], ebx
.text:00402172                 mov     edi, [esi]
.text:00402174                 add     ecx, 40h ; '@'
.text:00402177                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040217B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040217E                 mov     [esp+5Ch+MaxCount], edi
.text:00402182                 call    fprintf
.text:00402187                 jmp     short loc_402121
.text:00402187 ; ---------------------------------------------------------------------------
.text:00402189                 align 10h
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401D50+21E↑j
.text:00402190                                         ; sub_401D50+27A↑j
.text:00402190                 mov     eax, [esp+5Ch+arg_14]
.text:00402194                 test    eax, eax
.text:00402196                 jz      short loc_4021C6
.text:00402198                 mov     ebx, [ebp+0]
.text:0040219B                 mov     esi, [esp+5Ch+arg_4]
.text:0040219F                 mov     edi, [esi+ebx*4]
.text:004021A2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004021A6                 jz      short loc_4021C9
.text:004021A8                 mov     ecx, [ebp+14h]
.text:004021AB                 mov     edx, [esp+5Ch+Str]
.text:004021AF                 movsx   ebx, byte ptr [ecx]
.text:004021B2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004021B5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004021B9                 call    strchr
.text:004021BE                 test    eax, eax
.text:004021C0                 jnz     loc_402270
.text:004021C6
.text:004021C6 loc_4021C6:                             ; CODE XREF: sub_401D50+446↑j
.text:004021C6                 mov     ebx, [ebp+0]
.text:004021C9
.text:004021C9 loc_4021C9:                             ; CODE XREF: sub_401D50+456↑j
.text:004021C9                 mov     eax, [esp+5Ch+var_14]
.text:004021CD                 test    eax, eax
.text:004021CF                 jz      short loc_402221
.text:004021D1                 mov     esi, [esp+5Ch+arg_4]
.text:004021D5                 mov     edi, [esi+ebx*4]
.text:004021D8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004021DC                 jz      short loc_40223A
.text:004021DE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:004021E5                 call    ds:libintl_gettext
.text:004021EB                 mov     edi, [ebp+14h]
.text:004021EE                 mov     [esp+5Ch+var_4C], edi
.text:004021F2                 mov     ebx, [ebp+0]
.text:004021F5                 mov     edi, [esp+5Ch+arg_4]
.text:004021F9                 mov     esi, [edi+ebx*4]
.text:004021FC                 movsx   ecx, byte ptr [esi]
.text:004021FF                 mov     esi, ds:_iob
.text:00402205                 add     esi, 40h ; '@'
.text:00402208                 mov     [esp+5Ch+var_50], ecx
.text:0040220C                 mov     ebx, [edi]
.text:0040220E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402212                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402215                 mov     [esp+5Ch+MaxCount], ebx
.text:00402219                 call    fprintf
.text:0040221E
.text:0040221E loc_40221E:                             ; CODE XREF: sub_401D50+51D↓j
.text:0040221E                 mov     ebx, [ebp+0]
.text:00402221
.text:00402221 loc_402221:                             ; CODE XREF: sub_401D50+47F↑j
.text:00402221                 mov     dword ptr [ebp+14h], offset dword_401C00
.text:00402228                 lea     edx, [ebx+1]
.text:0040222B                 mov     [ebp+0], edx
.text:0040222E
.text:0040222E loc_40222E:                             ; CODE XREF: sub_401D50+999↓j
.text:0040222E                 mov     dword ptr [ebp+8], 0
.text:00402235                 jmp     loc_4020A8
.text:0040223A ; ---------------------------------------------------------------------------
.text:0040223A
.text:0040223A loc_40223A:                             ; CODE XREF: sub_401D50+48C↑j
.text:0040223A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402241                 call    ds:libintl_gettext
.text:00402247                 mov     ecx, [ebp+14h]
.text:0040224A                 mov     edi, [esp+5Ch+arg_4]
.text:0040224E                 mov     edx, ds:_iob
.text:00402254                 mov     [esp+5Ch+var_50], ecx
.text:00402258                 mov     ebx, [edi]
.text:0040225A                 add     edx, 40h ; '@'
.text:0040225D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402261                 mov     [esp+5Ch+MaxCount], ebx
.text:00402265                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402268                 call    fprintf
.text:0040226D                 jmp     short loc_40221E
.text:0040226D ; ---------------------------------------------------------------------------
.text:0040226F                 align 10h
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_401D50+196↑j
.text:00402270                                         ; sub_401D50+1B5↑j ...
.text:00402270                 mov     esi, [ebp+14h]
.text:00402273                 movzx   ebx, byte ptr [esi]
.text:00402276                 inc     esi
.text:00402277                 mov     [ebp+14h], esi
.text:0040227A                 mov     ecx, [esp+5Ch+Str]
.text:0040227E                 movsx   esi, bl
.text:00402281                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402285                 mov     edi, esi
.text:00402287                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040228A                 call    strchr
.text:0040228F                 mov     ecx, [ebp+14h]
.text:00402292                 cmp     byte ptr [ecx], 0
.text:00402295                 jnz     short loc_40229A
.text:00402297                 inc     dword ptr [ebp+0]
.text:0040229A
.text:0040229A loc_40229A:                             ; CODE XREF: sub_401D50+545↑j
.text:0040229A                 test    eax, eax
.text:0040229C                 jz      loc_402680
.text:004022A2                 cmp     bl, 3Ah ; ':'
.text:004022A5                 jz      loc_402680
.text:004022AB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004022AE                 jz      loc_402366
.text:004022B4                 movzx   edx, byte ptr [eax+1]
.text:004022B8
.text:004022B8 loc_4022B8:                             ; CODE XREF: sub_401D50+61D↓j
.text:004022B8                 cmp     dl, 3Ah ; ':'
.text:004022BB                 jz      short loc_4022C4
.text:004022BD
.text:004022BD loc_4022BD:                             ; CODE XREF: sub_401D50+590↓j
.text:004022BD                 mov     eax, esi
.text:004022BF                 jmp     loc_401EA7
.text:004022C4 ; ---------------------------------------------------------------------------
.text:004022C4
.text:004022C4 loc_4022C4:                             ; CODE XREF: sub_401D50+56B↑j
.text:004022C4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:004022C8                 jz      loc_402351
.text:004022CE                 cmp     byte ptr [ecx], 0
.text:004022D1                 jz      short loc_4022E2
.text:004022D3
.text:004022D3 loc_4022D3:                             ; CODE XREF: sub_401D50+604↓j
.text:004022D3                 inc     dword ptr [ebp+0]
.text:004022D6                 mov     [ebp+0Ch], ecx
.text:004022D9
.text:004022D9 loc_4022D9:                             ; CODE XREF: sub_401D50+5AB↓j
.text:004022D9                                         ; sub_401D50+5C6↓j ...
.text:004022D9                 mov     dword ptr [ebp+14h], 0
.text:004022E0                 jmp     short loc_4022BD
.text:004022E2 ; ---------------------------------------------------------------------------
.text:004022E2
.text:004022E2 loc_4022E2:                             ; CODE XREF: sub_401D50+581↑j
.text:004022E2                 mov     ecx, [ebp+0]
.text:004022E5                 cmp     ecx, [esp+5Ch+arg_0]
.text:004022E9                 jz      short loc_4022FD
.text:004022EB                 mov     eax, [esp+5Ch+arg_4]
.text:004022EF                 lea     edx, [ecx+1]
.text:004022F2                 mov     [ebp+0], edx
.text:004022F5                 mov     ebx, [eax+ecx*4]
.text:004022F8                 mov     [ebp+0Ch], ebx
.text:004022FB                 jmp     short loc_4022D9
.text:004022FD ; ---------------------------------------------------------------------------
.text:004022FD
.text:004022FD loc_4022FD:                             ; CODE XREF: sub_401D50+599↑j
.text:004022FD                 mov     ecx, [esp+5Ch+var_14]
.text:00402301                 test    ecx, ecx
.text:00402303                 jnz     short loc_40231F
.text:00402305
.text:00402305 loc_402305:                             ; CODE XREF: sub_401D50+5FF↓j
.text:00402305                 mov     [ebp+8], edi
.text:00402308                 mov     edi, [esp+5Ch+Str]
.text:0040230C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040230F                 jz      short loc_402318
.text:00402311                 mov     esi, 3Fh ; '?'
.text:00402316                 jmp     short loc_4022D9
.text:00402318 ; ---------------------------------------------------------------------------
.text:00402318
.text:00402318 loc_402318:                             ; CODE XREF: sub_401D50+5BF↑j
.text:00402318                 mov     esi, 3Ah ; ':'
.text:0040231D                 jmp     short loc_4022D9
.text:0040231F ; ---------------------------------------------------------------------------
.text:0040231F
.text:0040231F loc_40231F:                             ; CODE XREF: sub_401D50+5B3↑j
.text:0040231F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402326                 call    ds:libintl_gettext
.text:0040232C                 mov     [esp+5Ch+var_50], edi
.text:00402330                 mov     ebx, [esp+5Ch+arg_4]
.text:00402334                 mov     edx, ds:_iob
.text:0040233A                 mov     esi, [ebx]
.text:0040233C                 add     edx, 40h ; '@'
.text:0040233F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402343                 mov     [esp+5Ch+MaxCount], esi
.text:00402347                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040234A                 call    fprintf
.text:0040234F                 jmp     short loc_402305
.text:00402351 ; ---------------------------------------------------------------------------
.text:00402351
.text:00402351 loc_402351:                             ; CODE XREF: sub_401D50+578↑j
.text:00402351                 cmp     byte ptr [ecx], 0
.text:00402354                 jnz     loc_4022D3
.text:0040235A                 mov     dword ptr [ebp+0Ch], 0
.text:00402361                 jmp     loc_4022D9
.text:00402366 ; ---------------------------------------------------------------------------
.text:00402366
.text:00402366 loc_402366:                             ; CODE XREF: sub_401D50+55E↑j
.text:00402366                 movzx   edx, byte ptr [eax+1]
.text:0040236A                 cmp     dl, 3Bh ; ';'
.text:0040236D                 jnz     loc_4022B8
.text:00402373                 mov     [esp+5Ch+var_2C], 0
.text:0040237B                 mov     [esp+5Ch+var_30], 0
.text:00402383                 mov     [esp+5Ch+var_34], 0
.text:0040238B                 mov     [esp+5Ch+var_38], 0
.text:00402393                 cmp     byte ptr [ecx], 0
.text:00402396                 jz      loc_40260B
.text:0040239C                 inc     dword ptr [ebp+0]
.text:0040239F                 mov     [ebp+0Ch], ecx
.text:004023A2
.text:004023A2 loc_4023A2:                             ; CODE XREF: sub_401D50+8D4↓j
.text:004023A2                 mov     edi, [ebp+0Ch]
.text:004023A5                 mov     [ebp+14h], edi
.text:004023A8                 movzx   eax, byte ptr [edi]
.text:004023AB                 test    al, al
.text:004023AD                 jz      short loc_4023BF
.text:004023AF                 cmp     al, 3Dh ; '='
.text:004023B1                 jz      short loc_4023BF
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_401D50+66D↓j
.text:004023B3                 inc     edi
.text:004023B4                 movzx   eax, byte ptr [edi]
.text:004023B7                 test    al, al
.text:004023B9                 jz      short loc_4023BF
.text:004023BB                 cmp     al, 3Dh ; '='
.text:004023BD                 jnz     short loc_4023B3
.text:004023BF
.text:004023BF loc_4023BF:                             ; CODE XREF: sub_401D50+65D↑j
.text:004023BF                                         ; sub_401D50+661↑j ...
.text:004023BF                 mov     [esp+5Ch+var_3C], 0
.text:004023C7                 mov     esi, [esp+5Ch+arg_C]
.text:004023CB                 mov     eax, [esi]
.text:004023CD                 test    eax, eax
.text:004023CF                 jz      loc_402550
.text:004023D5                 mov     ecx, eax
.text:004023D7
.text:004023D7 loc_4023D7:                             ; CODE XREF: sub_401D50+6B3↓j
.text:004023D7                 mov     ebx, [ebp+14h]
.text:004023DA                 mov     eax, edi
.text:004023DC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004023DF                 sub     eax, ebx
.text:004023E1                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:004023E5                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:004023E9                 call    strncmp
.text:004023EE                 test    eax, eax
.text:004023F0                 jz      loc_4025B7
.text:004023F6
.text:004023F6 loc_4023F6:                             ; CODE XREF: sub_401D50+88C↓j
.text:004023F6                                         ; sub_401D50+89D↓j
.text:004023F6                 inc     [esp+5Ch+var_3C]
.text:004023FA                 add     esi, 10h
.text:004023FD                 mov     edx, [esi]
.text:004023FF                 test    edx, edx
.text:00402401                 mov     ecx, edx
.text:00402403                 jnz     short loc_4023D7
.text:00402405
.text:00402405 loc_402405:                             ; CODE XREF: sub_401D50+8B6↓j
.text:00402405                 mov     esi, [esp+5Ch+var_34]
.text:00402409                 test    esi, esi
.text:0040240B                 jz      short loc_402419
.text:0040240D                 mov     ebx, [esp+5Ch+var_30]
.text:00402411                 test    ebx, ebx
.text:00402413                 jz      loc_402561
.text:00402419
.text:00402419 loc_402419:                             ; CODE XREF: sub_401D50+6BB↑j
.text:00402419                 mov     esi, [esp+5Ch+var_2C]
.text:0040241D                 test    esi, esi
.text:0040241F                 jz      loc_402550
.text:00402425                 cmp     byte ptr [edi], 0
.text:00402428                 jz      loc_4024D0
.text:0040242E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402432                 mov     ebx, [ecx+4]
.text:00402435                 test    ebx, ebx
.text:00402437                 jz      short loc_402478
.text:00402439                 lea     edx, [edi+1]
.text:0040243C                 mov     [ebp+0Ch], edx
.text:0040243F
.text:0040243F loc_40243F:                             ; CODE XREF: sub_401D50+788↓j
.text:0040243F                                         ; sub_401D50+7A7↓j
.text:0040243F                 mov     edi, [ebp+14h]
.text:00402442                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402445                 call    strlen
.text:0040244A                 add     [ebp+14h], eax
.text:0040244D                 mov     eax, [esp+5Ch+arg_10]
.text:00402451                 test    eax, eax
.text:00402453                 jz      short loc_402460
.text:00402455                 mov     edx, [esp+5Ch+var_38]
.text:00402459                 mov     ebp, [esp+5Ch+arg_10]
.text:0040245D                 mov     [ebp+0], edx
.text:00402460
.text:00402460 loc_402460:                             ; CODE XREF: sub_401D50+703↑j
.text:00402460                 mov     eax, [esp+5Ch+var_2C]
.text:00402464                 mov     ecx, [eax+8]
.text:00402467                 test    ecx, ecx
.text:00402469                 jnz     loc_40202A
.text:0040246F                 mov     ecx, [esp+5Ch+var_2C]
.text:00402473                 jmp     loc_402022
.text:00402478 ; ---------------------------------------------------------------------------
.text:00402478
.text:00402478 loc_402478:                             ; CODE XREF: sub_401D50+6E7↑j
.text:00402478                 mov     eax, [esp+5Ch+var_14]
.text:0040247C                 test    eax, eax
.text:0040247E                 jnz     short loc_402493
.text:00402480
.text:00402480 loc_402480:                             ; CODE XREF: sub_401D50+779↓j
.text:00402480                 mov     ecx, [ebp+14h]
.text:00402483                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402486                 call    strlen
.text:0040248B                 add     [ebp+14h], eax
.text:0040248E                 jmp     loc_4020A8
.text:00402493 ; ---------------------------------------------------------------------------
.text:00402493
.text:00402493 loc_402493:                             ; CODE XREF: sub_401D50+72E↑j
.text:00402493                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040249A                 call    ds:libintl_gettext
.text:004024A0                 mov     edx, [esp+5Ch+var_2C]
.text:004024A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004024A8                 mov     edi, [edx]
.text:004024AA                 mov     [esp+5Ch+var_50], edi
.text:004024AE                 mov     edi, ds:_iob
.text:004024B4                 mov     esi, [ebx]
.text:004024B6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024BA                 add     edi, 40h ; '@'
.text:004024BD                 mov     [esp+5Ch+MaxCount], esi
.text:004024C1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004024C4                 call    fprintf
.text:004024C9                 jmp     short loc_402480
.text:004024C9 ; ---------------------------------------------------------------------------
.text:004024CB                 align 10h
.text:004024D0
.text:004024D0 loc_4024D0:                             ; CODE XREF: sub_401D50+6D8↑j
.text:004024D0                 mov     esi, [esp+5Ch+var_2C]
.text:004024D4                 cmp     dword ptr [esi+4], 1
.text:004024D8                 jnz     loc_40243F
.text:004024DE                 mov     ecx, [ebp+0]
.text:004024E1                 cmp     ecx, [esp+5Ch+arg_0]
.text:004024E5                 jge     short loc_4024FC
.text:004024E7                 mov     eax, [esp+5Ch+arg_4]
.text:004024EB                 lea     ebx, [ecx+1]
.text:004024EE                 mov     [ebp+0], ebx
.text:004024F1                 mov     edi, [eax+ecx*4]
.text:004024F4                 mov     [ebp+0Ch], edi
.text:004024F7                 jmp     loc_40243F
.text:004024FC ; ---------------------------------------------------------------------------
.text:004024FC
.text:004024FC loc_4024FC:                             ; CODE XREF: sub_401D50+795↑j
.text:004024FC                 mov     edx, [esp+5Ch+var_14]
.text:00402500                 test    edx, edx
.text:00402502                 jnz     short loc_402517
.text:00402504
.text:00402504 loc_402504:                             ; CODE XREF: sub_401D50+7FE↓j
.text:00402504                 mov     edx, [ebp+14h]
.text:00402507                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040250A                 call    strlen
.text:0040250F                 add     [ebp+14h], eax
.text:00402512                 jmp     loc_402139
.text:00402517 ; ---------------------------------------------------------------------------
.text:00402517
.text:00402517 loc_402517:                             ; CODE XREF: sub_401D50+7B2↑j
.text:00402517                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040251E                 call    ds:libintl_gettext
.text:00402524                 mov     ecx, [ebp+0]
.text:00402527                 mov     ebx, [esp+5Ch+arg_4]
.text:0040252B                 mov     edi, [ebx+ecx*4-4]
.text:0040252F                 mov     ecx, ds:_iob
.text:00402535                 mov     [esp+5Ch+var_50], edi
.text:00402539                 mov     esi, [ebx]
.text:0040253B                 add     ecx, 40h ; '@'
.text:0040253E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402542                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402545                 mov     [esp+5Ch+MaxCount], esi
.text:00402549                 call    fprintf
.text:0040254E                 jmp     short loc_402504
.text:00402550 ; ---------------------------------------------------------------------------
.text:00402550
.text:00402550 loc_402550:                             ; CODE XREF: sub_401D50+67F↑j
.text:00402550                                         ; sub_401D50+6CF↑j
.text:00402550                 mov     dword ptr [ebp+14h], 0
.text:00402557                 mov     eax, 57h ; 'W'
.text:0040255C                 jmp     loc_401EA7
.text:00402561 ; ---------------------------------------------------------------------------
.text:00402561
.text:00402561 loc_402561:                             ; CODE XREF: sub_401D50+6C3↑j
.text:00402561                 mov     edi, [esp+5Ch+var_14]
.text:00402565                 test    edi, edi
.text:00402567                 jnz     short loc_40257F
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_401D50+865↓j
.text:00402569                 mov     edx, [ebp+14h]
.text:0040256C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040256F                 call    strlen
.text:00402574                 add     [ebp+14h], eax
.text:00402577                 inc     dword ptr [ebp+0]
.text:0040257A                 jmp     loc_4020A8
.text:0040257F ; ---------------------------------------------------------------------------
.text:0040257F
.text:0040257F loc_40257F:                             ; CODE XREF: sub_401D50+817↑j
.text:0040257F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402586                 call    ds:libintl_gettext
.text:0040258C                 mov     ecx, [ebp+0]
.text:0040258F                 mov     ebx, [esp+5Ch+arg_4]
.text:00402593                 mov     edi, [ebx+ecx*4]
.text:00402596                 mov     ecx, ds:_iob
.text:0040259C                 mov     [esp+5Ch+var_50], edi
.text:004025A0                 mov     esi, [ebx]
.text:004025A2                 add     ecx, 40h ; '@'
.text:004025A5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025A9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004025AC                 mov     [esp+5Ch+MaxCount], esi
.text:004025B0                 call    fprintf
.text:004025B5                 jmp     short loc_402569
.text:004025B7 ; ---------------------------------------------------------------------------
.text:004025B7
.text:004025B7 loc_4025B7:                             ; CODE XREF: sub_401D50+6A0↑j
.text:004025B7                 mov     edx, [ebp+14h]
.text:004025BA                 mov     ebx, edi
.text:004025BC                 mov     ecx, [esi]
.text:004025BE                 sub     ebx, edx
.text:004025C0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004025C3                 call    strlen
.text:004025C8                 cmp     ebx, eax
.text:004025CA                 jz      short loc_4025F2
.text:004025CC                 mov     ebx, [esp+5Ch+var_2C]
.text:004025D0                 test    ebx, ebx
.text:004025D2                 jz      short loc_4025E1
.text:004025D4                 mov     [esp+5Ch+var_34], 1
.text:004025DC                 jmp     loc_4023F6
.text:004025E1 ; ---------------------------------------------------------------------------
.text:004025E1
.text:004025E1 loc_4025E1:                             ; CODE XREF: sub_401D50+882↑j
.text:004025E1                 mov     [esp+5Ch+var_2C], esi
.text:004025E5                 mov     ecx, [esp+5Ch+var_3C]
.text:004025E9                 mov     [esp+5Ch+var_38], ecx
.text:004025ED                 jmp     loc_4023F6
.text:004025F2 ; ---------------------------------------------------------------------------
.text:004025F2
.text:004025F2 loc_4025F2:                             ; CODE XREF: sub_401D50+87A↑j
.text:004025F2                 mov     [esp+5Ch+var_2C], esi
.text:004025F6                 mov     eax, [esp+5Ch+var_3C]
.text:004025FA                 mov     [esp+5Ch+var_30], 1
.text:00402602                 mov     [esp+5Ch+var_38], eax
.text:00402606                 jmp     loc_402405
.text:0040260B ; ---------------------------------------------------------------------------
.text:0040260B
.text:0040260B loc_40260B:                             ; CODE XREF: sub_401D50+646↑j
.text:0040260B                 mov     edx, [ebp+0]
.text:0040260E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402612                 jz      short loc_402629
.text:00402614                 mov     ebx, [esp+5Ch+arg_4]
.text:00402618                 lea     esi, [edx+1]
.text:0040261B                 mov     [ebp+0], esi
.text:0040261E                 mov     edi, [ebx+edx*4]
.text:00402621                 mov     [ebp+0Ch], edi
.text:00402624                 jmp     loc_4023A2
.text:00402629 ; ---------------------------------------------------------------------------
.text:00402629
.text:00402629 loc_402629:                             ; CODE XREF: sub_401D50+8C2↑j
.text:00402629                 mov     edi, [esp+5Ch+var_14]
.text:0040262D                 test    edi, edi
.text:0040262F                 jnz     short loc_40264C
.text:00402631
.text:00402631 loc_402631:                             ; CODE XREF: sub_401D50+92C↓j
.text:00402631                 mov     [ebp+8], esi
.text:00402634                 mov     ebp, [esp+5Ch+Str]
.text:00402638                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040263C                 jz      short loc_402648
.text:0040263E                 mov     bl, 3Fh ; '?'
.text:00402640
.text:00402640 loc_402640:                             ; CODE XREF: sub_401D50+8FA↓j
.text:00402640                 movsx   eax, bl
.text:00402643                 jmp     loc_401EA7
.text:00402648 ; ---------------------------------------------------------------------------
.text:00402648
.text:00402648 loc_402648:                             ; CODE XREF: sub_401D50+8EC↑j
.text:00402648                 mov     bl, 3Ah ; ':'
.text:0040264A                 jmp     short loc_402640
.text:0040264C ; ---------------------------------------------------------------------------
.text:0040264C
.text:0040264C loc_40264C:                             ; CODE XREF: sub_401D50+8DF↑j
.text:0040264C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402653                 call    ds:libintl_gettext
.text:00402659                 mov     [esp+5Ch+var_50], esi
.text:0040265D                 mov     edx, [esp+5Ch+arg_4]
.text:00402661                 mov     ecx, ds:_iob
.text:00402667                 mov     ebx, [edx]
.text:00402669                 add     ecx, 40h ; '@'
.text:0040266C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402670                 mov     [esp+5Ch+MaxCount], ebx
.text:00402674                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402677                 call    fprintf
.text:0040267C                 jmp     short loc_402631
.text:0040267C ; ---------------------------------------------------------------------------
.text:0040267E                 align 10h
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_401D50+54C↑j
.text:00402680                                         ; sub_401D50+555↑j
.text:00402680                 mov     eax, [esp+5Ch+var_14]
.text:00402684                 test    eax, eax
.text:00402686                 jz      short loc_4026BF
.text:00402688                 mov     ebx, [ebp+1Ch]
.text:0040268B                 test    ebx, ebx
.text:0040268D                 jz      short loc_4026C7
.text:0040268F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402696
.text:00402696 loc_402696:                             ; CODE XREF: sub_401D50+97E↓j
.text:00402696                 call    ds:libintl_gettext
.text:0040269C                 mov     [esp+5Ch+var_50], esi
.text:004026A0                 mov     ebx, [esp+5Ch+arg_4]
.text:004026A4                 mov     edx, ds:_iob
.text:004026AA                 mov     esi, [ebx]
.text:004026AC                 add     edx, 40h ; '@'
.text:004026AF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026B3                 mov     [esp+5Ch+MaxCount], esi
.text:004026B7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004026BA                 call    fprintf
.text:004026BF
.text:004026BF loc_4026BF:                             ; CODE XREF: sub_401D50+936↑j
.text:004026BF                 mov     [ebp+8], edi
.text:004026C2                 jmp     loc_4020A8
.text:004026C7 ; ---------------------------------------------------------------------------
.text:004026C7
.text:004026C7 loc_4026C7:                             ; CODE XREF: sub_401D50+93D↑j
.text:004026C7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004026CE                 jmp     short loc_402696
.text:004026D0 ; ---------------------------------------------------------------------------
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_401D50+26E↑j
.text:004026D0                 mov     edi, [esp+5Ch+var_14]
.text:004026D4                 test    edi, edi
.text:004026D6                 jnz     short loc_4026EE
.text:004026D8
.text:004026D8 loc_4026D8:                             ; CODE XREF: sub_401D50+9D4↓j
.text:004026D8                 mov     edx, [ebp+14h]
.text:004026DB                 mov     [esp+5Ch+Str1], edx ; Str
.text:004026DE                 call    strlen
.text:004026E3                 add     [ebp+14h], eax
.text:004026E6                 inc     dword ptr [ebp+0]
.text:004026E9                 jmp     loc_40222E
.text:004026EE ; ---------------------------------------------------------------------------
.text:004026EE
.text:004026EE loc_4026EE:                             ; CODE XREF: sub_401D50+986↑j
.text:004026EE                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:004026F5                 call    ds:libintl_gettext
.text:004026FB                 mov     ebx, [ebp+0]
.text:004026FE                 mov     edi, [esp+5Ch+arg_4]
.text:00402702                 mov     ecx, [edi+ebx*4]
.text:00402705                 mov     ebx, ds:_iob
.text:0040270B                 mov     [esp+5Ch+var_50], ecx
.text:0040270F                 mov     esi, [edi]
.text:00402711                 add     ebx, 40h ; '@'
.text:00402714                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402718                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040271B                 mov     [esp+5Ch+MaxCount], esi
.text:0040271F                 call    fprintf
.text:00402724                 jmp     short loc_4026D8
.text:00402726 ; ---------------------------------------------------------------------------
.text:00402726
.text:00402726 loc_402726:                             ; CODE XREF: sub_401D50+246↑j
.text:00402726                 mov     ecx, [ebp+14h]
.text:00402729                 mov     ebx, edi
.text:0040272B                 mov     edx, [esi]
.text:0040272D                 sub     ebx, ecx
.text:0040272F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402732                 call    strlen
.text:00402737                 cmp     ebx, eax
.text:00402739                 jz      short loc_402791
.text:0040273B                 mov     ebx, [esp+5Ch+var_18]
.text:0040273F                 test    ebx, ebx
.text:00402741                 jz      short loc_402780
.text:00402743                 mov     edx, [esp+5Ch+arg_14]
.text:00402747                 test    edx, edx
.text:00402749                 jnz     short loc_402757
.text:0040274B                 mov     ecx, [esp+5Ch+var_18]
.text:0040274F                 mov     ebx, [esi+4]
.text:00402752                 cmp     [ecx+4], ebx
.text:00402755                 jz      short loc_402764
.text:00402757
.text:00402757 loc_402757:                             ; CODE XREF: sub_401D50+9F9↑j
.text:00402757                                         ; sub_401D50+A1A↓j ...
.text:00402757                 mov     [esp+5Ch+var_20], 1
.text:0040275F                 jmp     loc_401F9C
.text:00402764 ; ---------------------------------------------------------------------------
.text:00402764
.text:00402764 loc_402764:                             ; CODE XREF: sub_401D50+A05↑j
.text:00402764                 mov     edx, [esi+8]
.text:00402767                 cmp     [ecx+8], edx
.text:0040276A                 jnz     short loc_402757
.text:0040276C                 mov     ebx, [esi+0Ch]
.text:0040276F                 cmp     [ecx+0Ch], ebx
.text:00402772                 jnz     short loc_402757
.text:00402774                 jmp     loc_401F9C
.text:00402774 ; ---------------------------------------------------------------------------
.text:00402779                 align 10h
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_401D50+9F1↑j
.text:00402780                 mov     [esp+5Ch+var_18], esi
.text:00402784                 mov     eax, [esp+5Ch+var_28]
.text:00402788                 mov     [esp+5Ch+var_24], eax
.text:0040278C                 jmp     loc_401F9C
.text:00402791 ; ---------------------------------------------------------------------------
.text:00402791
.text:00402791 loc_402791:                             ; CODE XREF: sub_401D50+9E9↑j
.text:00402791                 mov     [esp+5Ch+var_18], esi
.text:00402795                 mov     ecx, [esp+5Ch+var_28]
.text:00402799                 mov     [esp+5Ch+var_1C], 1
.text:004027A1                 mov     [esp+5Ch+var_24], ecx
.text:004027A5                 jmp     loc_401FB0
.text:004027AA ; ---------------------------------------------------------------------------
.text:004027AA
.text:004027AA loc_4027AA:                             ; CODE XREF: sub_401D50+1BF↑j
.text:004027AA                 mov     eax, [esp+5Ch+Str]
.text:004027AE                 movsx   esi, dl
.text:004027B1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004027B5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004027B8                 call    strchr
.text:004027BD                 test    eax, eax
.text:004027BF                 jnz     loc_402270
.text:004027C5                 jmp     loc_401F15
.text:004027CA ; ---------------------------------------------------------------------------
.text:004027CA
.text:004027CA loc_4027CA:                             ; CODE XREF: sub_401D50+17C↑j
.text:004027CA                 mov     ecx, 1
.text:004027CF                 jmp     loc_401ED2
.text:004027D4 ; ---------------------------------------------------------------------------
.text:004027D4
.text:004027D4 loc_4027D4:                             ; CODE XREF: sub_401D50+D4↑j
.text:004027D4                                         ; sub_401D50+130↑j
.text:004027D4                 mov     eax, [ebp+20h]
.text:004027D7                 cmp     eax, [ebp+24h]
.text:004027DA                 jz      loc_401EB0
.text:004027E0                 mov     [ebp+0], eax
.text:004027E3                 jmp     loc_401EB0
.text:004027E8 ; ---------------------------------------------------------------------------
.text:004027E8
.text:004027E8 loc_4027E8:                             ; CODE XREF: sub_401D50+FE↑j
.text:004027E8                 mov     [ebp+20h], eax
.text:004027EB                 jmp     loc_401E70
.text:004027F0 ; ---------------------------------------------------------------------------
.text:004027F0
.text:004027F0 loc_4027F0:                             ; CODE XREF: sub_401D50+CA↑j
.text:004027F0                 mov     edx, [ebp+20h]
.text:004027F3                 mov     eax, [ebp+24h]
.text:004027F6                 cmp     edx, eax
.text:004027F8                 jz      short loc_402870
.text:004027FA                 cmp     eax, ebx
.text:004027FC                 jz      short loc_402811
.text:004027FE                 mov     [esp+5Ch+Str2], ebp
.text:00402802                 mov     ebx, [esp+5Ch+arg_4]
.text:00402806                 mov     [esp+5Ch+Str1], ebx
.text:00402809                 call    sub_402A00
.text:0040280E                 mov     ebx, [ebp+0]
.text:00402811
.text:00402811 loc_402811:                             ; CODE XREF: sub_401D50+AAC↑j
.text:00402811                                         ; sub_401D50+B22↓j ...
.text:00402811                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402815                 jge     short loc_402860
.text:00402817                 mov     esi, [esp+5Ch+arg_4]
.text:0040281B                 mov     eax, [esi+ebx*4]
.text:0040281E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402821                 jz      short loc_402868
.text:00402823                 lea     esi, [esi+0]
.text:00402829                 lea     edi, [edi+0]
.text:00402830
.text:00402830 loc_402830:                             ; CODE XREF: sub_401D50+AFC↓j
.text:00402830                                         ; sub_401D50+B1C↓j
.text:00402830                 lea     eax, [ebx+1]
.text:00402833                 mov     ebx, eax
.text:00402835                 mov     [ebp+0], eax
.text:00402838                 cmp     eax, [esp+5Ch+arg_0]
.text:0040283C                 jge     short loc_402860
.text:0040283E                 mov     edi, [esp+5Ch+arg_4]
.text:00402842                 mov     edx, [edi+eax*4]
.text:00402845                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402848                 jz      short loc_402850
.text:0040284A
.text:0040284A loc_40284A:                             ; CODE XREF: sub_401D50+B04↓j
.text:0040284A                 mov     ebx, eax
.text:0040284C                 jmp     short loc_402830
.text:0040284C ; ---------------------------------------------------------------------------
.text:0040284E                 align 10h
.text:00402850
.text:00402850 loc_402850:                             ; CODE XREF: sub_401D50+AF8↑j
.text:00402850                 cmp     byte ptr [edx+1], 0
.text:00402854                 jz      short loc_40284A
.text:00402856                 lea     esi, [esi+0]
.text:00402859                 lea     edi, [edi+0]
.text:00402860
.text:00402860 loc_402860:                             ; CODE XREF: sub_401D50+AC5↑j
.text:00402860                                         ; sub_401D50+AEC↑j ...
.text:00402860                 mov     [ebp+24h], ebx
.text:00402863                 jmp     loc_401E20
.text:00402868 ; ---------------------------------------------------------------------------
.text:00402868
.text:00402868 loc_402868:                             ; CODE XREF: sub_401D50+AD1↑j
.text:00402868                 cmp     byte ptr [eax+1], 0
.text:0040286C                 jz      short loc_402830
.text:0040286E                 jmp     short loc_402860
.text:00402870 ; ---------------------------------------------------------------------------
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: sub_401D50+AA8↑j
.text:00402870                 cmp     edx, ebx
.text:00402872                 jz      short loc_402811
.text:00402874                 mov     [ebp+20h], ebx
.text:00402877                 jmp     short loc_402811
.text:00402879 ; ---------------------------------------------------------------------------
.text:00402879
.text:00402879 loc_402879:                             ; CODE XREF: sub_401D50+88↑j
.text:00402879                 mov     dword ptr [ebp+18h], 0
.text:00402880                 mov     esi, [esp+5Ch+Str]
.text:00402884
.text:00402884 loc_402884:                             ; CODE XREF: sub_401D50+B49↓j
.text:00402884                 inc     esi
.text:00402885                 jmp     loc_401DE8
.text:00402885 ; ---------------------------------------------------------------------------
.text:0040288A                 align 10h
.text:00402890
.text:00402890 loc_402890:                             ; CODE XREF: sub_401D50+80↑j
.text:00402890                 mov     dword ptr [ebp+18h], 2
.text:00402897                 mov     esi, ecx
.text:00402899                 jmp     short loc_402884
.text:00402899 ; ---------------------------------------------------------------------------
.text:0040289B                 align 10h
.text:004028A0
.text:004028A0 loc_4028A0:                             ; CODE XREF: sub_401D50+69↑j
.text:004028A0                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:004028A7                 call    getenv
.text:004028AC                 test    eax, eax
.text:004028AE                 jz      loc_401DC4
.text:004028B4                 jmp     loc_401DBF
.text:004028B4 ; ---------------------------------------------------------------------------
.text:004028B9                 align 10h
.text:004028C0
.text:004028C0 loc_4028C0:                             ; CODE XREF: sub_401D50+3F↑j
.text:004028C0                 mov     dword ptr [ebp+0], 1
.text:004028C7                 mov     ebx, 1
.text:004028CC                 jmp     loc_401DA0
.text:004028CC sub_401D50      endp
.text:004028CC
.text:004028D1 ; ---------------------------------------------------------------------------
.text:004028D1                 jmp     short sub_4028E0
.text:004028D1 ; ---------------------------------------------------------------------------
.text:004028D3                 align 10h
.text:004028E0
.text:004028E0 ; =============== S U B R O U T I N E =======================================
.text:004028E0
.text:004028E0
.text:004028E0 ; int __cdecl sub_4028E0(int, int, char *, int, int, int, int)
.text:004028E0 sub_4028E0      proc near               ; CODE XREF: .text:004028D1↑j
.text:004028E0                                         ; sub_402CF0+3A↓p ...
.text:004028E0
.text:004028E0 var_2C          = dword ptr -2Ch
.text:004028E0 var_28          = dword ptr -28h
.text:004028E0 Str             = dword ptr -24h
.text:004028E0 var_20          = dword ptr -20h
.text:004028E0 var_1C          = dword ptr -1Ch
.text:004028E0 var_18          = dword ptr -18h
.text:004028E0 var_14          = dword ptr -14h
.text:004028E0 var_10          = dword ptr -10h
.text:004028E0 arg_0           = dword ptr  4
.text:004028E0 arg_4           = dword ptr  8
.text:004028E0 arg_8           = dword ptr  0Ch
.text:004028E0 arg_C           = dword ptr  10h
.text:004028E0 arg_10          = dword ptr  14h
.text:004028E0 arg_14          = dword ptr  18h
.text:004028E0 arg_18          = dword ptr  1Ch
.text:004028E0
.text:004028E0                 sub     esp, 2Ch
.text:004028E3                 mov     edx, dword_406020
.text:004028E9                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:004028F1                 mov     ecx, dword_406024
.text:004028F7                 mov     ds:dword_407000, edx
.text:004028FD                 mov     edx, [esp+2Ch+arg_18]
.text:00402901                 mov     ds:dword_407004, ecx
.text:00402907                 mov     ecx, [esp+2Ch+arg_14]
.text:0040290B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040290F                 mov     edx, [esp+2Ch+arg_10]
.text:00402913                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402917                 mov     ecx, [esp+2Ch+arg_C]
.text:0040291B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040291F                 mov     edx, [esp+2Ch+arg_8]
.text:00402923                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402927                 mov     ecx, [esp+2Ch+arg_4]
.text:0040292B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040292F                 mov     edx, [esp+2Ch+arg_0]
.text:00402933                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402937                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040293A                 call    sub_401D50
.text:0040293F                 mov     ecx, ds:dword_407000
.text:00402945                 mov     dword_406020, ecx
.text:0040294B                 mov     ecx, ds:dword_40700C
.text:00402951                 mov     ds:dword_4071B0, ecx
.text:00402957                 mov     ecx, ds:dword_407008
.text:0040295D                 mov     dword_406028, ecx
.text:00402963                 add     esp, 2Ch
.text:00402966                 retn
.text:00402966 sub_4028E0      endp
.text:00402966
.text:00402966 ; ---------------------------------------------------------------------------
.text:00402967                 align 10h
.text:00402970                 sub     esp, 2Ch
.text:00402973                 mov     edx, dword_406020
.text:00402979                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:00402981                 mov     ecx, dword_406024
.text:00402987                 mov     dword ptr [esp+18h], 1
.text:0040298F                 mov     ds:dword_407000, edx
.text:00402995                 mov     edx, [esp+38h]
.text:00402999                 mov     ds:dword_407004, ecx
.text:0040299F                 mov     ecx, [esp+34h]
.text:004029A3                 mov     [esp+8], edx
.text:004029A7                 mov     edx, [esp+30h]
.text:004029AB                 mov     [esp+4], ecx
.text:004029AF                 mov     dword ptr [esp+14h], 0
.text:004029B7                 mov     dword ptr [esp+10h], 0
.text:004029BF                 mov     dword ptr [esp+0Ch], 0
.text:004029C7                 mov     [esp], edx
.text:004029CA                 call    sub_401D50
.text:004029CF                 mov     ecx, ds:dword_407000
.text:004029D5                 mov     dword_406020, ecx
.text:004029DB                 mov     ecx, ds:dword_40700C
.text:004029E1                 mov     ds:dword_4071B0, ecx
.text:004029E7                 mov     ecx, ds:dword_407008
.text:004029ED                 mov     dword_406028, ecx
.text:004029F3                 add     esp, 2Ch
.text:004029F6                 retn
.text:004029F6 ; ---------------------------------------------------------------------------
.text:004029F7                 align 10h
.text:00402A00
.text:00402A00 ; =============== S U B R O U T I N E =======================================
.text:00402A00
.text:00402A00
.text:00402A00 sub_402A00      proc near               ; CODE XREF: sub_401D50+113↑p
.text:00402A00                                         ; sub_401D50+AB9↑p
.text:00402A00
.text:00402A00 var_2C          = dword ptr -2Ch
.text:00402A00 var_28          = dword ptr -28h
.text:00402A00 var_24          = dword ptr -24h
.text:00402A00 var_20          = dword ptr -20h
.text:00402A00 var_1C          = dword ptr -1Ch
.text:00402A00 var_18          = dword ptr -18h
.text:00402A00 var_14          = dword ptr -14h
.text:00402A00 arg_0           = dword ptr  4
.text:00402A00 arg_4           = dword ptr  8
.text:00402A00
.text:00402A00                 push    ebp
.text:00402A01                 push    edi
.text:00402A02                 push    esi
.text:00402A03                 push    ebx
.text:00402A04                 sub     esp, 1Ch
.text:00402A07                 mov     ecx, [esp+2Ch+arg_4]
.text:00402A0B                 mov     eax, [esp+2Ch+arg_4]
.text:00402A0F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402A13                 mov     edx, [ecx+20h]
.text:00402A16                 mov     edi, [esp+2Ch+arg_0]
.text:00402A1A                 mov     ecx, [ebx]
.text:00402A1C                 mov     [esp+2Ch+var_2C], edx
.text:00402A1F                 mov     [esp+2Ch+var_14], edx
.text:00402A23                 mov     edx, [eax+24h]
.text:00402A26                 mov     [esp+2Ch+var_28], ecx
.text:00402A2A                 mov     [esp+2Ch+var_1C], ecx
.text:00402A2E                 cmp     ecx, edx
.text:00402A30                 mov     [esp+2Ch+var_18], edx
.text:00402A34                 jle     short loc_402AB0
.text:00402A36                 mov     esi, [esp+2Ch+var_2C]
.text:00402A39                 cmp     edx, esi
.text:00402A3B                 jle     short loc_402AB0
.text:00402A3D                 lea     esi, [esi+0]
.text:00402A40
.text:00402A40 loc_402A40:                             ; CODE XREF: sub_402A00+A1↓j
.text:00402A40                 mov     ebx, [esp+2Ch+var_1C]
.text:00402A44                 mov     edx, [esp+2Ch+var_18]
.text:00402A48                 mov     ebp, [esp+2Ch+var_18]
.text:00402A4C                 mov     eax, [esp+2Ch+var_14]
.text:00402A50                 sub     ebx, edx
.text:00402A52                 mov     [esp+2Ch+var_20], ebx
.text:00402A56                 sub     ebp, eax
.text:00402A58                 cmp     ebx, ebp
.text:00402A5A                 jle     short loc_402AD5
.text:00402A5C                 xor     esi, esi
.text:00402A5E                 cmp     esi, ebp
.text:00402A60                 jge     short loc_402A8D
.text:00402A62                 mov     ecx, [esp+2Ch+var_1C]
.text:00402A66                 sub     ecx, ebp
.text:00402A68                 mov     [esp+2Ch+var_24], ecx
.text:00402A6C                 lea     esi, [esi+0]
.text:00402A70
.text:00402A70 loc_402A70:                             ; CODE XREF: sub_402A00+8B↓j
.text:00402A70                 mov     ecx, [esp+2Ch+var_14]
.text:00402A74                 mov     edx, [esp+2Ch+var_24]
.text:00402A78                 add     ecx, esi
.text:00402A7A                 add     edx, esi
.text:00402A7C                 mov     ebx, [edi+ecx*4]
.text:00402A7F                 mov     eax, [edi+edx*4]
.text:00402A82                 inc     esi
.text:00402A83                 cmp     esi, ebp
.text:00402A85                 mov     [edi+ecx*4], eax
.text:00402A88                 mov     [edi+edx*4], ebx
.text:00402A8B                 jl      short loc_402A70
.text:00402A8D
.text:00402A8D loc_402A8D:                             ; CODE XREF: sub_402A00+60↑j
.text:00402A8D                 sub     [esp+2Ch+var_1C], ebp
.text:00402A91
.text:00402A91 loc_402A91:                             ; CODE XREF: sub_402A00+107↓j
.text:00402A91                 mov     eax, [esp+2Ch+var_18]
.text:00402A95                 cmp     [esp+2Ch+var_1C], eax
.text:00402A99                 jle     short loc_402AB0
.text:00402A9B                 mov     ebp, [esp+2Ch+var_14]
.text:00402A9F                 cmp     eax, ebp
.text:00402AA1                 jg      short loc_402A40
.text:00402AA3                 lea     esi, [esi+0]
.text:00402AA9                 lea     edi, [edi+0]
.text:00402AB0
.text:00402AB0 loc_402AB0:                             ; CODE XREF: sub_402A00+34↑j
.text:00402AB0                                         ; sub_402A00+3B↑j ...
.text:00402AB0                 mov     esi, [esp+2Ch+var_28]
.text:00402AB4                 mov     ecx, [esp+2Ch+var_18]
.text:00402AB8                 mov     eax, [esp+2Ch+var_2C]
.text:00402ABB                 mov     edi, [esp+2Ch+arg_4]
.text:00402ABF                 mov     edx, [esp+2Ch+var_28]
.text:00402AC3                 sub     esi, ecx
.text:00402AC5                 add     esi, eax
.text:00402AC7                 mov     [edi+20h], esi
.text:00402ACA                 mov     [edi+24h], edx
.text:00402ACD                 add     esp, 1Ch
.text:00402AD0                 pop     ebx
.text:00402AD1                 pop     esi
.text:00402AD2                 pop     edi
.text:00402AD3                 pop     ebp
.text:00402AD4                 retn
.text:00402AD5 ; ---------------------------------------------------------------------------
.text:00402AD5
.text:00402AD5 loc_402AD5:                             ; CODE XREF: sub_402A00+5A↑j
.text:00402AD5                 xor     esi, esi
.text:00402AD7                 cmp     esi, [esp+2Ch+var_20]
.text:00402ADB                 jge     short loc_402AFF
.text:00402ADD                 lea     esi, [esi+0]
.text:00402AE0
.text:00402AE0 loc_402AE0:                             ; CODE XREF: sub_402A00+FD↓j
.text:00402AE0                 mov     ebx, [esp+2Ch+var_14]
.text:00402AE4                 mov     ebp, [esp+2Ch+var_18]
.text:00402AE8                 add     ebx, esi
.text:00402AEA                 add     ebp, esi
.text:00402AEC                 mov     edx, [edi+ebx*4]
.text:00402AEF                 inc     esi
.text:00402AF0                 cmp     esi, [esp+2Ch+var_20]
.text:00402AF4                 mov     ecx, [edi+ebp*4]
.text:00402AF7                 mov     [edi+ebx*4], ecx
.text:00402AFA                 mov     [edi+ebp*4], edx
.text:00402AFD                 jl      short loc_402AE0
.text:00402AFF
.text:00402AFF loc_402AFF:                             ; CODE XREF: sub_402A00+DB↑j
.text:00402AFF                 mov     esi, [esp+2Ch+var_20]
.text:00402B03                 add     [esp+2Ch+var_14], esi
.text:00402B07                 jmp     short loc_402A91
.text:00402B07 sub_402A00      endp
.text:00402B07
.text:00402B07 ; ---------------------------------------------------------------------------
.text:00402B09                 align 20h
.text:00402B20
.text:00402B20 ; =============== S U B R O U T I N E =======================================
.text:00402B20
.text:00402B20
.text:00402B20 sub_402B20      proc near               ; CODE XREF: sub_401450+25F↑p
.text:00402B20
.text:00402B20 var_1C          = dword ptr -1Ch
.text:00402B20 var_18          = dword ptr -18h
.text:00402B20 var_14          = dword ptr -14h
.text:00402B20 var_8           = dword ptr -8
.text:00402B20 var_4           = dword ptr -4
.text:00402B20 arg_0           = dword ptr  4
.text:00402B20 arg_4           = byte ptr  8
.text:00402B20
.text:00402B20                 sub     esp, 1Ch
.text:00402B23                 mov     [esp+1Ch+var_4], esi
.text:00402B27                 mov     esi, [esp+1Ch+arg_0]
.text:00402B2B                 mov     [esp+1Ch+var_8], ebx
.text:00402B2F                 mov     [esp+1Ch+var_14], 0
.text:00402B37                 movzx   ebx, [esp+1Ch+arg_4]
.text:00402B3C                 mov     [esp+1Ch+var_18], 1
.text:00402B44                 mov     [esp+1Ch+var_1C], esi
.text:00402B47                 call    sub_4050F0
.text:00402B4C                 test    eax, eax
.text:00402B4E                 js      short loc_402B82
.text:00402B50                 test    bl, bl
.text:00402B52                 jz      short loc_402B90
.text:00402B54                 mov     edx, eax
.text:00402B56                 or      edx, 1
.text:00402B59
.text:00402B59 loc_402B59:                             ; CODE XREF: sub_402B20+75↓j
.text:00402B59                 cmp     eax, edx
.text:00402B5B                 jz      short loc_402B74
.text:00402B5D                 mov     [esp+1Ch+var_14], edx
.text:00402B61                 mov     [esp+1Ch+var_18], 2
.text:00402B69                 mov     [esp+1Ch+var_1C], esi
.text:00402B6C                 call    sub_4050F0
.text:00402B71                 inc     eax
.text:00402B72                 jz      short loc_402B82
.text:00402B74
.text:00402B74 loc_402B74:                             ; CODE XREF: sub_402B20+3B↑j
.text:00402B74                 xor     eax, eax
.text:00402B76
.text:00402B76 loc_402B76:                             ; CODE XREF: sub_402B20+67↓j
.text:00402B76                 mov     ebx, [esp+1Ch+var_8]
.text:00402B7A                 mov     esi, [esp+1Ch+var_4]
.text:00402B7E                 add     esp, 1Ch
.text:00402B81                 retn
.text:00402B82 ; ---------------------------------------------------------------------------
.text:00402B82
.text:00402B82 loc_402B82:                             ; CODE XREF: sub_402B20+2E↑j
.text:00402B82                                         ; sub_402B20+52↑j
.text:00402B82                 mov     eax, 0FFFFFFFFh
.text:00402B87                 jmp     short loc_402B76
.text:00402B87 ; ---------------------------------------------------------------------------
.text:00402B89                 align 10h
.text:00402B90
.text:00402B90 loc_402B90:                             ; CODE XREF: sub_402B20+32↑j
.text:00402B90                 mov     edx, eax
.text:00402B92                 and     edx, 0FFFFFFFEh
.text:00402B95                 jmp     short loc_402B59
.text:00402B95 sub_402B20      endp
.text:00402B95
.text:00402B95 ; ---------------------------------------------------------------------------
.text:00402B97                 align 10h
.text:00402BA0                 sub     esp, 0Ch
.text:00402BA3                 mov     edx, [esp+14h]
.text:00402BA7                 mov     dword ptr [esp+4], 5
.text:00402BAF                 mov     [esp+8], edx
.text:00402BB3                 mov     edx, [esp+10h]
.text:00402BB7                 mov     [esp], edx
.text:00402BBA                 call    sub_403E20
.text:00402BBF                 add     esp, 0Ch
.text:00402BC2                 retn
.text:00402BC2 ; ---------------------------------------------------------------------------
.text:00402BC3                 align 10h
.text:00402BD0
.text:00402BD0 ; =============== S U B R O U T I N E =======================================
.text:00402BD0
.text:00402BD0
.text:00402BD0 ; int __cdecl sub_402BD0(char *)
.text:00402BD0 sub_402BD0      proc near               ; CODE XREF: sub_401450+159↑p
.text:00402BD0                                         ; sub_401450+20A↑p ...
.text:00402BD0
.text:00402BD0 var_C           = dword ptr -0Ch
.text:00402BD0 var_8           = dword ptr -8
.text:00402BD0 var_4           = dword ptr -4
.text:00402BD0 arg_0           = dword ptr  4
.text:00402BD0
.text:00402BD0                 sub     esp, 0Ch
.text:00402BD3                 mov     edx, [esp+0Ch+arg_0]
.text:00402BD7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00402BDF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402BE6                 mov     [esp+0Ch+var_4], edx ; char *
.text:00402BEA                 call    sub_403E20
.text:00402BEF                 add     esp, 0Ch
.text:00402BF2                 retn
.text:00402BF2 sub_402BD0      endp
.text:00402BF2
.text:00402BF2 ; ---------------------------------------------------------------------------
.text:00402BF3                 align 10h
.text:00402C00
.text:00402C00 ; =============== S U B R O U T I N E =======================================
.text:00402C00
.text:00402C00
.text:00402C00 ; int __cdecl sub_402C00(int, char *, int)
.text:00402C00 sub_402C00      proc near               ; CODE XREF: sub_401450+33D↑p
.text:00402C00
.text:00402C00 Str             = dword ptr -2Ch
.text:00402C00 var_28          = dword ptr -28h
.text:00402C00 var_24          = dword ptr -24h
.text:00402C00 var_18          = dword ptr -18h
.text:00402C00 var_14          = dword ptr -14h
.text:00402C00 arg_0           = dword ptr  4
.text:00402C00 arg_4           = dword ptr  8
.text:00402C00 arg_8           = dword ptr  0Ch
.text:00402C00
.text:00402C00                 push    ebp
.text:00402C01                 push    edi
.text:00402C02                 push    esi
.text:00402C03                 push    ebx
.text:00402C04                 sub     esp, 1Ch
.text:00402C07                 mov     ebp, [esp+2Ch+arg_0]
.text:00402C0B                 mov     [esp+2Ch+Str], ebp
.text:00402C0E                 call    sub_4046D0
.text:00402C13                 mov     [esp+2Ch+Str], eax ; char *
.text:00402C16                 mov     ebx, eax
.text:00402C18                 call    sub_404730
.text:00402C1D                 mov     [esp+2Ch+var_18], 0
.text:00402C25                 mov     ecx, ebx
.text:00402C27                 sub     ecx, ebp
.text:00402C29                 add     ecx, eax
.text:00402C2B                 test    eax, eax
.text:00402C2D                 mov     [esp+2Ch+var_14], ecx
.text:00402C31                 jz      short loc_402C48
.text:00402C33                 movzx   eax, byte ptr [eax+ebx-1]
.text:00402C38                 cmp     al, 2Fh ; '/'
.text:00402C3A                 jz      short loc_402C48
.text:00402C3C                 cmp     al, 5Ch ; '\'
.text:00402C3E                 jz      short loc_402C48
.text:00402C40                 mov     [esp+2Ch+var_18], 1
.text:00402C48
.text:00402C48 loc_402C48:                             ; CODE XREF: sub_402C00+31↑j
.text:00402C48                                         ; sub_402C00+3A↑j ...
.text:00402C48                 mov     ebx, [esp+2Ch+arg_4]
.text:00402C4C                 cmp     byte ptr [ebx], 0
.text:00402C4F                 jz      short loc_402C5B
.text:00402C51                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:00402C55                 jz      loc_402CDF
.text:00402C5B
.text:00402C5B loc_402C5B:                             ; CODE XREF: sub_402C00+4F↑j
.text:00402C5B                                         ; sub_402C00+E2↓j
.text:00402C5B                 movzx   eax, byte ptr [ebx]
.text:00402C5E                 cmp     al, 2Fh ; '/'
.text:00402C60                 jz      short loc_402CD1
.text:00402C62                 cmp     al, 5Ch ; '\'
.text:00402C64                 jz      short loc_402CD1
.text:00402C66
.text:00402C66 loc_402C66:                             ; CODE XREF: sub_402C00+DD↓j
.text:00402C66                 mov     [esp+2Ch+Str], ebx ; Str
.text:00402C69                 call    strlen
.text:00402C6E                 mov     esi, eax
.text:00402C70                 mov     edx, [esp+2Ch+var_14]
.text:00402C74                 mov     eax, [esp+2Ch+var_18]
.text:00402C78                 add     edx, eax
.text:00402C7A                 lea     edi, [esi+edx+1]
.text:00402C7E                 mov     [esp+2Ch+Str], edi ; size_t
.text:00402C81                 call    sub_404440
.text:00402C86                 mov     [esp+2Ch+Str], eax
.text:00402C89                 mov     ecx, [esp+2Ch+var_14]
.text:00402C8D                 mov     edi, eax
.text:00402C8F                 mov     [esp+2Ch+var_28], ebp
.text:00402C93                 mov     [esp+2Ch+var_24], ecx
.text:00402C97                 call    sub_405330
.text:00402C9C                 mov     byte ptr [eax], 2Fh ; '/'
.text:00402C9F                 mov     edx, [esp+2Ch+var_18]
.text:00402CA3                 mov     ecx, [esp+2Ch+arg_8]
.text:00402CA7                 add     eax, edx
.text:00402CA9                 test    ecx, ecx
.text:00402CAB                 jz      short loc_402CB4
.text:00402CAD                 mov     ebp, [esp+2Ch+arg_8]
.text:00402CB1                 mov     [ebp+0], eax
.text:00402CB4
.text:00402CB4 loc_402CB4:                             ; CODE XREF: sub_402C00+AB↑j
.text:00402CB4                 mov     [esp+2Ch+var_24], esi
.text:00402CB8                 mov     [esp+2Ch+var_28], ebx
.text:00402CBC                 mov     [esp+2Ch+Str], eax
.text:00402CBF                 call    sub_405330
.text:00402CC4                 mov     byte ptr [eax], 0
.text:00402CC7                 add     esp, 1Ch
.text:00402CCA                 mov     eax, edi
.text:00402CCC                 pop     ebx
.text:00402CCD                 pop     esi
.text:00402CCE                 pop     edi
.text:00402CCF                 pop     ebp
.text:00402CD0                 retn
.text:00402CD1 ; ---------------------------------------------------------------------------
.text:00402CD1
.text:00402CD1 loc_402CD1:                             ; CODE XREF: sub_402C00+60↑j
.text:00402CD1                                         ; sub_402C00+64↑j ...
.text:00402CD1                 inc     ebx
.text:00402CD2                 movzx   eax, byte ptr [ebx]
.text:00402CD5                 cmp     al, 2Fh ; '/'
.text:00402CD7                 jz      short loc_402CD1
.text:00402CD9                 cmp     al, 5Ch ; '\'
.text:00402CDB                 jz      short loc_402CD1
.text:00402CDD                 jmp     short loc_402C66
.text:00402CDF ; ---------------------------------------------------------------------------
.text:00402CDF
.text:00402CDF loc_402CDF:                             ; CODE XREF: sub_402C00+55↑j
.text:00402CDF                 add     ebx, 2
.text:00402CE2                 jmp     loc_402C5B
.text:00402CE2 sub_402C00      endp
.text:00402CE2
.text:00402CE2 ; ---------------------------------------------------------------------------
.text:00402CE7                 align 10h
.text:00402CF0
.text:00402CF0 ; =============== S U B R O U T I N E =======================================
.text:00402CF0
.text:00402CF0
.text:00402CF0 ; int __cdecl sub_402CF0(int, int, char *, int, int)
.text:00402CF0 sub_402CF0      proc near               ; CODE XREF: sub_401450+DB↑p
.text:00402CF0                                         ; sub_402E90+58↓p
.text:00402CF0
.text:00402CF0 var_1C          = dword ptr -1Ch
.text:00402CF0 var_18          = dword ptr -18h
.text:00402CF0 var_14          = dword ptr -14h
.text:00402CF0 var_10          = dword ptr -10h
.text:00402CF0 var_C           = dword ptr -0Ch
.text:00402CF0 var_8           = dword ptr -8
.text:00402CF0 var_4           = dword ptr -4
.text:00402CF0 arg_0           = dword ptr  4
.text:00402CF0 arg_4           = dword ptr  8
.text:00402CF0 arg_8           = dword ptr  0Ch
.text:00402CF0 arg_C           = dword ptr  10h
.text:00402CF0 arg_10          = dword ptr  14h
.text:00402CF0
.text:00402CF0                 sub     esp, 1Ch
.text:00402CF3                 mov     edx, [esp+1Ch+arg_C]
.text:00402CF7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402CFF                 mov     ecx, [esp+1Ch+arg_10]
.text:00402D03                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402D0B                 mov     [esp+1Ch+var_10], edx ; int
.text:00402D0F                 mov     edx, [esp+1Ch+arg_4]
.text:00402D13                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402D17                 mov     ecx, [esp+1Ch+arg_8]
.text:00402D1B                 mov     [esp+1Ch+var_18], edx ; int
.text:00402D1F                 mov     edx, [esp+1Ch+arg_0]
.text:00402D23                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402D27                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402D2A                 call    sub_4028E0
.text:00402D2F                 add     esp, 1Ch
.text:00402D32                 retn
.text:00402D32 sub_402CF0      endp
.text:00402D32
.text:00402D32 ; ---------------------------------------------------------------------------
.text:00402D33                 align 10h
.text:00402D40                 sub     esp, 2Ch
.text:00402D43                 mov     edx, [esp+44h]
.text:00402D47                 mov     dword ptr [esp+18h], 0
.text:00402D4F                 mov     ecx, [esp+40h]
.text:00402D53                 mov     dword ptr [esp+14h], 0
.text:00402D5B                 mov     [esp+1Ch], edx
.text:00402D5F                 mov     edx, [esp+3Ch]
.text:00402D63                 mov     [esp+10h], ecx
.text:00402D67                 mov     ecx, [esp+38h]
.text:00402D6B                 mov     [esp+0Ch], edx
.text:00402D6F                 mov     edx, [esp+34h]
.text:00402D73                 mov     [esp+8], ecx
.text:00402D77                 mov     [esp+4], edx
.text:00402D7B                 mov     edx, [esp+30h]
.text:00402D7F                 mov     [esp], edx
.text:00402D82                 call    sub_401D50
.text:00402D87                 add     esp, 2Ch
.text:00402D8A                 retn
.text:00402D8A ; ---------------------------------------------------------------------------
.text:00402D8B                 align 10h
.text:00402D90                 sub     esp, 1Ch
.text:00402D93                 mov     edx, [esp+2Ch]
.text:00402D97                 mov     dword ptr [esp+18h], 0
.text:00402D9F                 mov     ecx, [esp+30h]
.text:00402DA3                 mov     dword ptr [esp+14h], 1
.text:00402DAB                 mov     [esp+0Ch], edx
.text:00402DAF                 mov     edx, [esp+24h]
.text:00402DB3                 mov     [esp+10h], ecx
.text:00402DB7                 mov     ecx, [esp+28h]
.text:00402DBB                 mov     [esp+4], edx
.text:00402DBF                 mov     edx, [esp+20h]
.text:00402DC3                 mov     [esp+8], ecx
.text:00402DC7                 mov     [esp], edx
.text:00402DCA                 call    sub_4028E0
.text:00402DCF                 add     esp, 1Ch
.text:00402DD2                 retn
.text:00402DD2 ; ---------------------------------------------------------------------------
.text:00402DD3                 align 10h
.text:00402DE0                 sub     esp, 2Ch
.text:00402DE3                 mov     edx, [esp+44h]
.text:00402DE7                 mov     dword ptr [esp+18h], 0
.text:00402DEF                 mov     ecx, [esp+40h]
.text:00402DF3                 mov     dword ptr [esp+14h], 1
.text:00402DFB                 mov     [esp+1Ch], edx
.text:00402DFF                 mov     edx, [esp+3Ch]
.text:00402E03                 mov     [esp+10h], ecx
.text:00402E07                 mov     ecx, [esp+38h]
.text:00402E0B                 mov     [esp+0Ch], edx
.text:00402E0F                 mov     edx, [esp+34h]
.text:00402E13                 mov     [esp+8], ecx
.text:00402E17                 mov     [esp+4], edx
.text:00402E1B                 mov     edx, [esp+30h]
.text:00402E1F                 mov     [esp], edx
.text:00402E22                 call    sub_401D50
.text:00402E27                 add     esp, 2Ch
.text:00402E2A                 retn
.text:00402E2A ; ---------------------------------------------------------------------------
.text:00402E2B                 align 10h
.text:00402E30 aHelp           db 'help',0             ; DATA XREF: .text:off_402E50↓o
.text:00402E35 aVersion        db 'version',0          ; DATA XREF: .text:00402E60↓o
.text:00402E3D                 db 13h dup(90h)
.text:00402E50 off_402E50      dd offset aHelp         ; DATA XREF: sub_402E90+3D↓o
.text:00402E50                                         ; "help"
.text:00402E54                 dd 2 dup(0)
.text:00402E5C                 dd 68h
.text:00402E60                 dd offset aVersion      ; "version"
.text:00402E64                 dd 2 dup(0)
.text:00402E6C                 dd 76h, 4 dup(0)
.text:00402E80 ; ---------------------------------------------------------------------------
.text:00402E80
.text:00402E80 loc_402E80:                             ; DATA XREF: sub_402E90+45↓o
.text:00402E80                 sub     eax, [eax]
.text:00402E82                 lea     esi, [esi+0]
.text:00402E89                 lea     edi, [edi+0]
.text:00402E90
.text:00402E90 ; =============== S U B R O U T I N E =======================================
.text:00402E90
.text:00402E90
.text:00402E90 ; int __cdecl sub_402E90(int, int, FILE *, int, int, int, char)
.text:00402E90 sub_402E90      proc near               ; CODE XREF: sub_401450+B4↑p
.text:00402E90
.text:00402E90 Code            = dword ptr -1Ch
.text:00402E90 var_18          = dword ptr -18h
.text:00402E90 var_14          = dword ptr -14h
.text:00402E90 var_10          = dword ptr -10h
.text:00402E90 var_C           = dword ptr -0Ch
.text:00402E90 var_4           = dword ptr -4
.text:00402E90 arg_0           = dword ptr  4
.text:00402E90 arg_4           = dword ptr  8
.text:00402E90 arg_8           = dword ptr  0Ch
.text:00402E90 arg_C           = dword ptr  10h
.text:00402E90 arg_10          = dword ptr  14h
.text:00402E90 arg_14          = dword ptr  18h
.text:00402E90 arg_18          = byte ptr  1Ch
.text:00402E90
.text:00402E90                 sub     esp, 1Ch
.text:00402E93                 xor     eax, eax
.text:00402E95                 cmp     [esp+1Ch+arg_0], 2
.text:00402E9A                 mov     [esp+1Ch+var_4], ebx
.text:00402E9E                 mov     ebx, dword_406024
.text:00402EA4                 mov     dword_406024, eax
.text:00402EA9                 jz      short loc_402EC1
.text:00402EAB
.text:00402EAB loc_402EAB:                             ; CODE XREF: sub_402E90+60↓j
.text:00402EAB                                         ; sub_402E90+6A↓j
.text:00402EAB                 mov     dword_406024, ebx
.text:00402EB1                 xor     edx, edx
.text:00402EB3                 mov     ebx, [esp+1Ch+var_4]
.text:00402EB7                 mov     dword_406020, edx
.text:00402EBD                 add     esp, 1Ch
.text:00402EC0                 retn
.text:00402EC1 ; ---------------------------------------------------------------------------
.text:00402EC1
.text:00402EC1 loc_402EC1:                             ; CODE XREF: sub_402E90+19↑j
.text:00402EC1                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402EC9                 mov     edx, [esp+1Ch+arg_4]
.text:00402ECD                 mov     [esp+1Ch+var_10], offset off_402E50 ; int
.text:00402ED5                 mov     [esp+1Ch+var_14], offset loc_402E80 ; char *
.text:00402EDD                 mov     [esp+1Ch+var_18], edx ; int
.text:00402EE1                 mov     [esp+1Ch+Code], 2 ; int
.text:00402EE8                 call    sub_402CF0
.text:00402EED                 cmp     eax, 0FFFFFFFFh
.text:00402EF0                 jz      short loc_402EAB
.text:00402EF2                 cmp     eax, 68h ; 'h'
.text:00402EF5                 jz      short loc_402EFE
.text:00402EF7                 cmp     eax, 76h ; 'v'
.text:00402EFA                 jnz     short loc_402EAB
.text:00402EFC                 jmp     short loc_402F09
.text:00402EFE ; ---------------------------------------------------------------------------
.text:00402EFE
.text:00402EFE loc_402EFE:                             ; CODE XREF: sub_402E90+65↑j
.text:00402EFE                 mov     [esp+1Ch+Code], 0
.text:00402F05                 call    [esp+1Ch+arg_14]
.text:00402F09
.text:00402F09 loc_402F09:                             ; CODE XREF: sub_402E90+6C↑j
.text:00402F09                 mov     ecx, [esp+1Ch+arg_10]
.text:00402F0D                 lea     ebx, [esp+1Ch+arg_18]
.text:00402F11                 mov     edx, [esp+1Ch+arg_C]
.text:00402F15                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402F19                 mov     ebx, [esp+1Ch+arg_8]
.text:00402F1D                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402F21                 mov     ecx, ds:_iob
.text:00402F27                 mov     [esp+1Ch+var_14], edx ; int
.text:00402F2B                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402F2F                 add     ecx, 20h ; ' '
.text:00402F32                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402F35                 call    sub_404A70
.text:00402F3A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402F41                 call    exit
.text:00402F41 sub_402E90      endp
.text:00402F41
.text:00402F41 ; ---------------------------------------------------------------------------
.text:00402F46                 align 10h
.text:00402F50                 mov     edx, [esp+4]
.text:00402F54                 mov     ds:dword_407030, edx
.text:00402F5A                 retn
.text:00402F5A ; ---------------------------------------------------------------------------
.text:00402F5B aWriteError     db 'write error',0      ; DATA XREF: sub_402F80:loc_402FC9↓o
.text:00402F67 ; const char aSS_0[]
.text:00402F67 aSS_0           db '%s: %s',0           ; DATA XREF: sub_402F80+77↓o
.text:00402F6E ; const char aS_2[]
.text:00402F6E aS_2            db '%s',0               ; DATA XREF: sub_402F80+A0↓o
.text:00402F71 ; ---------------------------------------------------------------------------
.text:00402F71                 jmp     short sub_402F80
.text:00402F71 ; ---------------------------------------------------------------------------
.text:00402F73                 align 10h
.text:00402F80
.text:00402F80 ; =============== S U B R O U T I N E =======================================
.text:00402F80
.text:00402F80
.text:00402F80 ; void __cdecl sub_402F80()
.text:00402F80 sub_402F80      proc near               ; CODE XREF: .text:00402F71↑j
.text:00402F80                                         ; DATA XREF: sub_401450+63↑o
.text:00402F80
.text:00402F80 Stream          = dword ptr -2Ch
.text:00402F80 ErrorMessage    = dword ptr -28h
.text:00402F80 var_24          = dword ptr -24h
.text:00402F80 var_20          = byte ptr -20h
.text:00402F80 var_1C          = dword ptr -1Ch
.text:00402F80 var_9           = byte ptr -9
.text:00402F80
.text:00402F80                 push    esi
.text:00402F81                 push    ebx
.text:00402F82                 sub     esp, 24h
.text:00402F85                 mov     edx, ds:_iob
.text:00402F8B                 mov     ecx, [edx+2Ch]
.text:00402F8E                 lea     esi, [edx+20h]
.text:00402F91                 shr     ecx, 5
.text:00402F94                 mov     bl, cl
.text:00402F96                 mov     ecx, [edx+20h]
.text:00402F99                 and     bl, 1
.text:00402F9C                 cmp     ecx, [esi+8]
.text:00402F9F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402FA2                 setz    [esp+2Ch+var_9]
.text:00402FA7                 call    fclose
.text:00402FAC                 test    eax, eax
.text:00402FAE                 setnz   al
.text:00402FB1                 test    bl, bl
.text:00402FB3                 jnz     loc_403043
.text:00402FB9                 test    al, al
.text:00402FBB                 jz      short loc_403010
.text:00402FBD
.text:00402FBD loc_402FBD:                             ; CODE XREF: sub_402F80+CD↓j
.text:00402FBD                 call    _errno
.text:00402FC2                 mov     esi, [eax]
.text:00402FC4
.text:00402FC4 loc_402FC4:                             ; CODE XREF: sub_402F80+C7↓j
.text:00402FC4                 cmp     esi, 9
.text:00402FC7                 jz      short loc_403036
.text:00402FC9
.text:00402FC9 loc_402FC9:                             ; CODE XREF: sub_402F80+B8↓j
.text:00402FC9                                         ; sub_402F80+C1↓j
.text:00402FC9                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402FD0                 call    ds:libintl_gettext
.text:00402FD6                 mov     ebx, eax
.text:00402FD8                 mov     eax, ds:dword_407030
.text:00402FDD                 test    eax, eax
.text:00402FDF                 jz      short loc_403016
.text:00402FE1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402FE4                 call    sub_404190
.text:00402FE9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402FED                 mov     edx, Code
.text:00402FF3                 mov     [esp+2Ch+var_1C], ebx
.text:00402FF7                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00402FFF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00403003                 mov     [esp+2Ch+Stream], edx ; Code
.text:00403006                 call    sub_404D30
.text:0040300B                 nop
.text:0040300C                 lea     esi, [esi+0]
.text:00403010
.text:00403010 loc_403010:                             ; CODE XREF: sub_402F80+3B↑j
.text:00403010                                         ; sub_402F80+B4↓j ...
.text:00403010                 add     esp, 24h
.text:00403013                 pop     ebx
.text:00403014                 pop     esi
.text:00403015                 retn
.text:00403016 ; ---------------------------------------------------------------------------
.text:00403016
.text:00403016 loc_403016:                             ; CODE XREF: sub_402F80+5F↑j
.text:00403016                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040301A                 mov     ebx, Code
.text:00403020                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00403028                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040302C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040302F                 call    sub_404D30
.text:00403034                 jmp     short loc_403010
.text:00403036 ; ---------------------------------------------------------------------------
.text:00403036
.text:00403036 loc_403036:                             ; CODE XREF: sub_402F80+47↑j
.text:00403036                 test    bl, bl
.text:00403038                 jnz     short loc_402FC9
.text:0040303A                 cmp     [esp+2Ch+var_9], 0
.text:0040303F                 jnz     short loc_403010
.text:00403041                 jmp     short loc_402FC9
.text:00403043 ; ---------------------------------------------------------------------------
.text:00403043
.text:00403043 loc_403043:                             ; CODE XREF: sub_402F80+33↑j
.text:00403043                 xor     esi, esi
.text:00403045                 test    al, al
.text:00403047                 jz      loc_402FC4
.text:0040304D                 jmp     loc_402FBD
.text:0040304D sub_402F80      endp
.text:0040304D
.text:0040304D ; ---------------------------------------------------------------------------
.text:00403052                 align 10h
.text:00403060 aLiteral        db 'literal',0          ; DATA XREF: .text:004030A0↓o
.text:00403068 aShell          db 'shell',0            ; DATA XREF: .text:004030A4↓o
.text:0040306E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004030A8↓o
.text:0040307B aC              db 'c',0                ; DATA XREF: .text:004030AC↓o
.text:0040307D aEscape         db 'escape',0           ; DATA XREF: .text:004030B0↓o
.text:00403084 aLocale         db 'locale',0           ; DATA XREF: .text:004030B4↓o
.text:0040308B aClocale        db 'clocale',0          ; DATA XREF: .text:004030B8↓o
.text:00403093                 align 10h
.text:004030A0                 dd offset aLiteral      ; "literal"
.text:004030A4                 dd offset aShell        ; "shell"
.text:004030A8                 dd offset aShellAlways  ; "shell-always"
.text:004030AC                 dd offset aC            ; "c"
.text:004030B0                 dd offset aEscape       ; "escape"
.text:004030B4                 dd offset aLocale       ; "locale"
.text:004030B8                 dd offset aClocale      ; "clocale"
.text:004030BC                 dd 2 dup(0)
.text:004030C4                 dd 1, 2, 3, 4, 5, 6
.text:004030DC asc_4030DC:                             ; DATA XREF: sub_4030F0+7E↓o
.text:004030DC                                         ; sub_4030F0+A39↓o ...
.text:004030DC                 text "UTF-16LE", '"',27h,'`'
.text:004030E2                 align 10h
.text:004030F0
.text:004030F0 ; =============== S U B R O U T I N E =======================================
.text:004030F0
.text:004030F0
.text:004030F0 ; int __cdecl sub_4030F0(int, int, char *Str, int, int, int)
.text:004030F0 sub_4030F0      proc near               ; CODE XREF: sub_4030F0+43A↓p
.text:004030F0                                         ; .text:00403CB3↓p ...
.text:004030F0
.text:004030F0 C               = dword ptr -4Ch
.text:004030F0 Type            = dword ptr -48h
.text:004030F0 SizeInBytes     = dword ptr -44h
.text:004030F0 State           = dword ptr -40h
.text:004030F0 var_3C          = dword ptr -3Ch
.text:004030F0 var_38          = dword ptr -38h
.text:004030F0 var_34          = dword ptr -34h
.text:004030F0 var_30          = dword ptr -30h
.text:004030F0 var_29          = byte ptr -29h
.text:004030F0 var_28          = dword ptr -28h
.text:004030F0 var_22          = byte ptr -22h
.text:004030F0 var_21          = byte ptr -21h
.text:004030F0 var_20          = dword ptr -20h
.text:004030F0 var_1C          = dword ptr -1Ch
.text:004030F0 var_18          = mbstate_t ptr -18h
.text:004030F0 arg_0           = dword ptr  4
.text:004030F0 arg_4           = dword ptr  8
.text:004030F0 Str             = dword ptr  0Ch
.text:004030F0 arg_C           = dword ptr  10h
.text:004030F0 arg_10          = dword ptr  14h
.text:004030F0 arg_14          = dword ptr  18h
.text:004030F0
.text:004030F0                 push    ebp
.text:004030F1                 push    edi
.text:004030F2                 push    esi
.text:004030F3                 push    ebx
.text:004030F4                 sub     esp, 3Ch
.text:004030F7                 mov     edx, ds:__mb_cur_max
.text:004030FD                 mov     [esp+4Ch+var_34], 0
.text:00403105                 mov     [esp+4Ch+var_1C], 0
.text:0040310D                 cmp     dword ptr [edx], 1
.text:00403110                 mov     [esp+4Ch+var_20], 0
.text:00403118                 mov     [esp+4Ch+var_21], 0
.text:0040311D                 setz    [esp+4Ch+var_22]
.text:00403122                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00403127                 ja      short def_40312D ; jumptable 0040312D default case, cases 0,1
.text:00403129                 mov     edx, [esp+4Ch+arg_10]
.text:0040312D                 jmp     ds:jpt_40312D[edx*4] ; switch jump
.text:0040312D ; ---------------------------------------------------------------------------
.text:00403134 jpt_40312D      dd offset def_40312D    ; DATA XREF: sub_4030F0+3D↑r
.text:00403134                 dd offset def_40312D    ; jump table for switch statement
.text:00403134                 dd offset loc_403A75
.text:00403134                 dd offset loc_403150
.text:00403134                 dd offset loc_403A9B
.text:00403134                 dd offset loc_403AA5
.text:00403134                 dd offset loc_403AA5
.text:00403150 ; ---------------------------------------------------------------------------
.text:00403150
.text:00403150 loc_403150:                             ; CODE XREF: sub_4030F0+3D↑j
.text:00403150                                         ; DATA XREF: sub_4030F0:jpt_40312D↑o
.text:00403150                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040312D case 3
.text:00403154                 cmp     [esp+4Ch+var_34], eax
.text:00403158                 jnb     short loc_403161
.text:0040315A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040315E                 mov     byte ptr [ebx], 22h ; '"'
.text:00403161
.text:00403161 loc_403161:                             ; CODE XREF: sub_4030F0+68↑j
.text:00403161                 mov     [esp+4Ch+var_34], 1
.text:00403169                 mov     [esp+4Ch+var_21], 1
.text:0040316E                 mov     [esp+4Ch+var_1C], offset asc_4030DC ; "\"'`"
.text:00403176
.text:00403176 loc_403176:                             ; CODE XREF: sub_4030F0+9A6↓j
.text:00403176                 mov     [esp+4Ch+var_20], 1
.text:0040317E
.text:0040317E def_40312D:                             ; CODE XREF: sub_4030F0+37↑j
.text:0040317E                                         ; sub_4030F0+3D↑j ...
.text:0040317E                 xor     ebp, ebp        ; jumptable 0040312D default case, cases 0,1
.text:00403180
.text:00403180 loc_403180:                             ; CODE XREF: sub_4030F0+3DB↓j
.text:00403180                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403185                 jz      loc_403A67
.text:0040318B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040318F
.text:0040318F loc_40318F:                             ; CODE XREF: sub_4030F0+980↓j
.text:0040318F                 jz      loc_4039FE
.text:00403195                 cmp     [esp+4Ch+var_21], 0
.text:0040319A                 jz      short loc_4031E0
.text:0040319C                 mov     esi, [esp+4Ch+var_20]
.text:004031A0                 test    esi, esi
.text:004031A2                 jz      short loc_4031E0
.text:004031A4                 mov     ecx, [esp+4Ch+var_20]
.text:004031A8                 lea     edi, [ecx+ebp]
.text:004031AB                 cmp     edi, [esp+4Ch+arg_C]
.text:004031AF                 ja      short loc_4031E0
.text:004031B1                 cld
.text:004031B2                 mov     ebx, [esp+4Ch+Str]
.text:004031B6                 mov     edi, [esp+4Ch+var_1C]
.text:004031BA                 add     ebx, ebp
.text:004031BC                 mov     esi, ebx
.text:004031BE                 cmp     ecx, ecx
.text:004031C0                 repe cmpsb
.text:004031C2                 jnz     short loc_4031E0
.text:004031C4                 mov     edx, [esp+4Ch+arg_4]
.text:004031C8                 cmp     [esp+4Ch+var_34], edx
.text:004031CC                 jnb     short loc_4031DA
.text:004031CE                 mov     ecx, [esp+4Ch+arg_0]
.text:004031D2                 mov     eax, [esp+4Ch+var_34]
.text:004031D6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004031DA
.text:004031DA loc_4031DA:                             ; CODE XREF: sub_4030F0+DC↑j
.text:004031DA                 inc     [esp+4Ch+var_34]
.text:004031DE                 mov     esi, esi
.text:004031E0
.text:004031E0 loc_4031E0:                             ; CODE XREF: sub_4030F0+AA↑j
.text:004031E0                                         ; sub_4030F0+B2↑j ...
.text:004031E0                 mov     edi, [esp+4Ch+Str]
.text:004031E4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004031E9                 movzx   eax, bl
.text:004031EC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004031EF                 ja      def_4031F5      ; jumptable 004031F5 default case, cases 1-6,14-31,64
.text:004031F5                 jmp     ds:jpt_4031F5[eax*4] ; switch jump
.text:004031F5 ; ---------------------------------------------------------------------------
.text:004031FC jpt_4031F5      dd offset loc_4033F8, offset def_4031F5, offset def_4031F5
.text:004031FC                                         ; DATA XREF: sub_4030F0+105↑r
.text:004031FC                 dd offset def_4031F5, offset def_4031F5, offset def_4031F5 ; jump table for switch statement
.text:004031FC                 dd offset def_4031F5, offset loc_4034D0, offset loc_4034EE
.text:004031FC                 dd offset loc_4034F2, offset loc_403537, offset loc_40353B
.text:004031FC                 dd offset loc_40353F, offset loc_403543, offset def_4031F5
.text:004031FC                 dd offset def_4031F5, offset def_4031F5, offset def_4031F5
.text:004031FC                 dd offset def_4031F5, offset def_4031F5, offset def_4031F5
.text:004031FC                 dd offset def_4031F5, offset def_4031F5, offset def_4031F5
.text:004031FC                 dd offset def_4031F5, offset def_4031F5, offset def_4031F5
.text:004031FC                 dd offset def_4031F5, offset def_4031F5, offset def_4031F5
.text:004031FC                 dd offset def_4031F5, offset def_4031F5, offset loc_4039C8
.text:004031FC                 dd offset loc_4039C8, offset loc_4039C8, offset loc_4039EA
.text:004031FC                 dd offset loc_4039C8, offset def_4035F2, offset loc_4039C8
.text:004031FC                 dd offset loc_403547, offset loc_4039C8, offset loc_4039C8
.text:004031FC                 dd offset loc_4039C8, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset loc_4039C8
.text:004031FC                 dd offset loc_4039C8, offset loc_4039C8, offset loc_4039C8
.text:004031FC                 dd offset loc_4035AC, offset def_4031F5, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset loc_4039C8, offset loc_4039C1
.text:004031FC                 dd offset def_4035F2, offset loc_4039C8, offset def_4035F2
.text:004031FC                 dd offset loc_4039C8, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset def_4035F2, offset def_4035F2, offset def_4035F2
.text:004031FC                 dd offset loc_4039D8, offset loc_4039C8, offset loc_4039D8
.text:004031FC                 dd offset loc_4039EA
.text:004033F8 ; ---------------------------------------------------------------------------
.text:004033F8
.text:004033F8 loc_4033F8:                             ; CODE XREF: sub_4030F0+105↑j
.text:004033F8                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004033F8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004031F5 case 0
.text:004033FD                 lea     eax, [ebp+1]
.text:00403400                 jz      loc_4034B0
.text:00403406                 mov     esi, [esp+4Ch+arg_4]
.text:0040340A                 cmp     [esp+4Ch+var_34], esi
.text:0040340E                 jnb     short loc_40341C
.text:00403410                 mov     eax, [esp+4Ch+arg_0]
.text:00403414                 mov     ebx, [esp+4Ch+var_34]
.text:00403418                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040341C
.text:0040341C loc_40341C:                             ; CODE XREF: sub_4030F0+31E↑j
.text:0040341C                 inc     [esp+4Ch+var_34]
.text:00403420                 mov     edx, [esp+4Ch+arg_4]
.text:00403424                 cmp     [esp+4Ch+var_34], edx
.text:00403428                 jnb     short loc_403436
.text:0040342A                 mov     edi, [esp+4Ch+arg_0]
.text:0040342E                 mov     ecx, [esp+4Ch+var_34]
.text:00403432                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403436
.text:00403436 loc_403436:                             ; CODE XREF: sub_4030F0+338↑j
.text:00403436                 inc     [esp+4Ch+var_34]
.text:0040343A                 mov     esi, [esp+4Ch+arg_4]
.text:0040343E                 cmp     [esp+4Ch+var_34], esi
.text:00403442                 jnb     short loc_403450
.text:00403444                 mov     ebx, [esp+4Ch+arg_0]
.text:00403448                 mov     eax, [esp+4Ch+var_34]
.text:0040344C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403450
.text:00403450 loc_403450:                             ; CODE XREF: sub_4030F0+352↑j
.text:00403450                 inc     [esp+4Ch+var_34]
.text:00403454                 mov     bl, 30h ; '0'
.text:00403456                 lea     esi, [esi+0]
.text:00403459                 lea     edi, [edi+0]
.text:00403460
.text:00403460 def_4035F2:                             ; CODE XREF: sub_4030F0+105↑j
.text:00403460                                         ; sub_4030F0+463↓j ...
.text:00403460                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:00403460                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:00403465                 lea     eax, [ebp+1]
.text:00403468                 jz      short loc_4034B0
.text:0040346A                 mov     cl, bl
.text:0040346C                 mov     edi, [esp+4Ch+arg_14]
.text:00403470                 mov     esi, 1
.text:00403475                 shr     cl, 5
.text:00403478                 movzx   edx, cl
.text:0040347B                 mov     ecx, ebx
.text:0040347D                 and     ecx, 1Fh
.text:00403480                 shl     esi, cl
.text:00403482                 test    [edi+edx*4+4], esi
.text:00403486                 jz      short loc_4034A2
.text:00403488
.text:00403488 loc_403488:                             ; CODE XREF: sub_4030F0+3FC↓j
.text:00403488                 mov     edx, [esp+4Ch+arg_4]
.text:0040348C                 cmp     [esp+4Ch+var_34], edx
.text:00403490                 jnb     short loc_40349E
.text:00403492                 mov     edi, [esp+4Ch+arg_0]
.text:00403496                 mov     esi, [esp+4Ch+var_34]
.text:0040349A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040349E
.text:0040349E loc_40349E:                             ; CODE XREF: sub_4030F0+3A0↑j
.text:0040349E                 inc     [esp+4Ch+var_34]
.text:004034A2
.text:004034A2 loc_4034A2:                             ; CODE XREF: sub_4030F0+396↑j
.text:004034A2                 lea     eax, [ebp+1]
.text:004034A5                 lea     esi, [esi+0]
.text:004034A9                 lea     edi, [edi+0]
.text:004034B0
.text:004034B0 loc_4034B0:                             ; CODE XREF: sub_4030F0+310↑j
.text:004034B0                                         ; sub_4030F0+378↑j ...
.text:004034B0                 mov     ebp, [esp+4Ch+arg_4]
.text:004034B4                 cmp     [esp+4Ch+var_34], ebp
.text:004034B8                 jnb     short loc_4034C5
.text:004034BA                 mov     edx, [esp+4Ch+arg_0]
.text:004034BE                 mov     ecx, [esp+4Ch+var_34]
.text:004034C2                 mov     [ecx+edx], bl
.text:004034C5
.text:004034C5 loc_4034C5:                             ; CODE XREF: sub_4030F0+3C8↑j
.text:004034C5                 inc     [esp+4Ch+var_34]
.text:004034C9                 mov     ebp, eax
.text:004034CB                 jmp     loc_403180
.text:004034D0 ; ---------------------------------------------------------------------------
.text:004034D0
.text:004034D0 loc_4034D0:                             ; CODE XREF: sub_4030F0+105↑j
.text:004034D0                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004034D0                 mov     dl, 61h ; 'a'   ; jumptable 004031F5 case 7
.text:004034D2                 lea     esi, [esi+0]
.text:004034D9                 lea     edi, [edi+0]
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_4030F0+400↓j
.text:004034E0                                         ; sub_4030F0+409↓j ...
.text:004034E0                 cmp     [esp+4Ch+var_21], 0
.text:004034E5                 lea     eax, [ebp+1]
.text:004034E8                 jz      short loc_4034B0
.text:004034EA                 mov     bl, dl
.text:004034EC                 jmp     short loc_403488
.text:004034EE ; ---------------------------------------------------------------------------
.text:004034EE
.text:004034EE loc_4034EE:                             ; CODE XREF: sub_4030F0+105↑j
.text:004034EE                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004034EE                 mov     dl, 62h ; 'b'   ; jumptable 004031F5 case 8
.text:004034F0                 jmp     short loc_4034E0
.text:004034F2 ; ---------------------------------------------------------------------------
.text:004034F2
.text:004034F2 loc_4034F2:                             ; CODE XREF: sub_4030F0+105↑j
.text:004034F2                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004034F2                 mov     dl, 74h ; 't'   ; jumptable 004031F5 case 9
.text:004034F4
.text:004034F4 loc_4034F4:                             ; CODE XREF: sub_4030F0+449↓j
.text:004034F4                                         ; sub_4030F0+455↓j ...
.text:004034F4                 cmp     [esp+4Ch+arg_10], 1
.text:004034F9                 jnz     short loc_4034E0
.text:004034FB
.text:004034FB loc_4034FB:                             ; CODE XREF: sub_4030F0+45C↓j
.text:004034FB                                         ; sub_4030F0+4C1↓j ...
.text:004034FB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004038C2 cases 91,92,94,96,124
.text:00403503                 mov     eax, [esp+4Ch+arg_14]
.text:00403507                 mov     edx, [esp+4Ch+arg_C]
.text:0040350B                 mov     ecx, [esp+4Ch+Str]
.text:0040350F                 mov     ebx, [esp+4Ch+arg_4]
.text:00403513                 mov     [esp+4Ch+var_38], eax ; int
.text:00403517                 mov     ebp, [esp+4Ch+arg_0]
.text:0040351B                 mov     [esp+4Ch+State], edx ; int
.text:0040351F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00403523                 mov     [esp+4Ch+Type], ebx ; int
.text:00403527                 mov     [esp+4Ch+C], ebp ; int
.text:0040352A                 call    sub_4030F0
.text:0040352F
.text:0040352F loc_40352F:                             ; CODE XREF: sub_4030F0+972↓j
.text:0040352F                 add     esp, 3Ch
.text:00403532                 pop     ebx
.text:00403533                 pop     esi
.text:00403534                 pop     edi
.text:00403535                 pop     ebp
.text:00403536                 retn
.text:00403537 ; ---------------------------------------------------------------------------
.text:00403537
.text:00403537 loc_403537:                             ; CODE XREF: sub_4030F0+105↑j
.text:00403537                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:00403537                 mov     dl, 6Eh ; 'n'   ; jumptable 004031F5 case 10
.text:00403539                 jmp     short loc_4034F4
.text:0040353B ; ---------------------------------------------------------------------------
.text:0040353B
.text:0040353B loc_40353B:                             ; CODE XREF: sub_4030F0+105↑j
.text:0040353B                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:0040353B                 mov     dl, 76h ; 'v'   ; jumptable 004031F5 case 11
.text:0040353D                 jmp     short loc_4034E0
.text:0040353F ; ---------------------------------------------------------------------------
.text:0040353F
.text:0040353F loc_40353F:                             ; CODE XREF: sub_4030F0+105↑j
.text:0040353F                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:0040353F                 mov     dl, 66h ; 'f'   ; jumptable 004031F5 case 12
.text:00403541                 jmp     short loc_4034E0
.text:00403543 ; ---------------------------------------------------------------------------
.text:00403543
.text:00403543 loc_403543:                             ; CODE XREF: sub_4030F0+105↑j
.text:00403543                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:00403543                 mov     dl, 72h ; 'r'   ; jumptable 004031F5 case 13
.text:00403545                 jmp     short loc_4034F4
.text:00403547 ; ---------------------------------------------------------------------------
.text:00403547
.text:00403547 loc_403547:                             ; CODE XREF: sub_4030F0+105↑j
.text:00403547                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:00403547                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004031F5 case 39
.text:0040354C                 jz      short loc_4034FB ; jumptable 004038C2 cases 91,92,94,96,124
.text:0040354E                 cmp     [esp+4Ch+arg_10], 2
.text:00403553                 jnz     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:00403553                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:00403559                 mov     edx, [esp+4Ch+arg_4]
.text:0040355D                 cmp     [esp+4Ch+var_34], edx
.text:00403561                 jnb     short loc_40356F
.text:00403563                 mov     ecx, [esp+4Ch+arg_0]
.text:00403567                 mov     edi, [esp+4Ch+var_34]
.text:0040356B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040356F
.text:0040356F loc_40356F:                             ; CODE XREF: sub_4030F0+471↑j
.text:0040356F                 inc     [esp+4Ch+var_34]
.text:00403573                 mov     eax, [esp+4Ch+arg_4]
.text:00403577                 cmp     [esp+4Ch+var_34], eax
.text:0040357B                 jnb     short loc_403589
.text:0040357D                 mov     esi, [esp+4Ch+arg_0]
.text:00403581                 mov     edx, [esp+4Ch+var_34]
.text:00403585                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403589
.text:00403589 loc_403589:                             ; CODE XREF: sub_4030F0+48B↑j
.text:00403589                 inc     [esp+4Ch+var_34]
.text:0040358D                 mov     edi, [esp+4Ch+arg_4]
.text:00403591                 cmp     [esp+4Ch+var_34], edi
.text:00403595                 jnb     short loc_4035A3
.text:00403597                 mov     ecx, [esp+4Ch+arg_0]
.text:0040359B                 mov     eax, [esp+4Ch+var_34]
.text:0040359F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004035A3
.text:004035A3 loc_4035A3:                             ; CODE XREF: sub_4030F0+4A5↑j
.text:004035A3                                         ; sub_4030F0+5C4↓j ...
.text:004035A3                 inc     [esp+4Ch+var_34]
.text:004035A7                 jmp     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004035A7                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004035AC ; ---------------------------------------------------------------------------
.text:004035AC
.text:004035AC loc_4035AC:                             ; CODE XREF: sub_4030F0+105↑j
.text:004035AC                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004035AC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004031F5 case 63
.text:004035B1                 jz      loc_4034FB      ; jumptable 004038C2 cases 91,92,94,96,124
.text:004035B7                 cmp     [esp+4Ch+arg_10], 3
.text:004035BC                 jnz     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004035BC                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004035C2                 lea     edx, [ebp+2]
.text:004035C5                 cmp     edx, [esp+4Ch+arg_C]
.text:004035C9                 jnb     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004035C9                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004035CF                 mov     esi, [esp+4Ch+Str]
.text:004035D3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004035D8                 jnz     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004035D8                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004035DE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004035E3                 movsx   eax, cl
.text:004035E6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004035E9                 cmp     eax, 1Dh
.text:004035EC                 ja      def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004035EC                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004035F2                 jmp     ds:jpt_4035F2[eax*4] ; switch jump
.text:004035F2 ; ---------------------------------------------------------------------------
.text:004035F9                 align 4
.text:004035FC jpt_4035F2      dd offset loc_403674    ; DATA XREF: sub_4030F0+502↑r
.text:004035FC                 dd offset def_4035F2    ; jump table for switch statement
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset loc_403674
.text:004035FC                 dd offset loc_403674
.text:004035FC                 dd offset loc_403674
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset loc_403674
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset loc_403674
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset def_4035F2
.text:004035FC                 dd offset loc_403674
.text:004035FC                 dd offset loc_403674
.text:004035FC                 dd offset loc_403674
.text:00403674 ; ---------------------------------------------------------------------------
.text:00403674
.text:00403674 loc_403674:                             ; CODE XREF: sub_4030F0+502↑j
.text:00403674                                         ; DATA XREF: sub_4030F0:jpt_4035F2↑o
.text:00403674                 mov     ebp, edx        ; jumptable 004035F2 cases 33,39-41,45,47,60-62
.text:00403676                 mov     bl, cl
.text:00403678                 mov     edx, [esp+4Ch+arg_4]
.text:0040367C                 cmp     [esp+4Ch+var_34], edx
.text:00403680                 jnb     short loc_40368E
.text:00403682                 mov     ecx, [esp+4Ch+arg_0]
.text:00403686                 mov     edi, [esp+4Ch+var_34]
.text:0040368A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040368E
.text:0040368E loc_40368E:                             ; CODE XREF: sub_4030F0+590↑j
.text:0040368E                 inc     [esp+4Ch+var_34]
.text:00403692                 mov     eax, [esp+4Ch+arg_4]
.text:00403696                 cmp     [esp+4Ch+var_34], eax
.text:0040369A                 jnb     short loc_4036A8
.text:0040369C                 mov     edx, [esp+4Ch+arg_0]
.text:004036A0                 mov     esi, [esp+4Ch+var_34]
.text:004036A4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004036A8
.text:004036A8 loc_4036A8:                             ; CODE XREF: sub_4030F0+5AA↑j
.text:004036A8                 inc     [esp+4Ch+var_34]
.text:004036AC                 mov     edi, [esp+4Ch+arg_4]
.text:004036B0                 cmp     [esp+4Ch+var_34], edi
.text:004036B4                 jnb     loc_4035A3
.text:004036BA                 mov     eax, [esp+4Ch+arg_0]
.text:004036BE                 mov     ecx, [esp+4Ch+var_34]
.text:004036C2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004036C6                 jmp     loc_4035A3
.text:004036C6 ; ---------------------------------------------------------------------------
.text:004036CB                 align 10h
.text:004036D0
.text:004036D0 def_4031F5:                             ; CODE XREF: sub_4030F0+FF↑j
.text:004036D0                                         ; sub_4030F0+105↑j
.text:004036D0                                         ; DATA XREF: ...
.text:004036D0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004031F5 default case, cases 1-6,14-31,64
.text:004036D5                 jz      loc_403800
.text:004036DB                 mov     [esp+4Ch+var_28], 1
.text:004036E3                 mov     esi, ds:__mb_cur_max
.text:004036E9                 movzx   edx, bl
.text:004036EC                 cmp     dword ptr [esi], 1
.text:004036EF                 jz      loc_4037E4
.text:004036F5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004036FD                 mov     [esp+4Ch+C], edx ; C
.text:00403700                 call    _isctype
.text:00403705
.text:00403705 loc_403705:                             ; CODE XREF: sub_4030F0+705↓j
.text:00403705                 test    eax, eax
.text:00403707                 setnz   [esp+4Ch+var_29]
.text:0040370C
.text:0040370C loc_40370C:                             ; CODE XREF: sub_4030F0+7A5↓j
.text:0040370C                 cmp     [esp+4Ch+var_21], 0
.text:00403711                 lea     eax, [ebp+1]
.text:00403714                 jz      loc_4034B0
.text:0040371A                 cmp     [esp+4Ch+var_29], 0
.text:0040371F                 jnz     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:0040371F                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:00403725
.text:00403725 loc_403725:                             ; CODE XREF: sub_4030F0+7AB↓j
.text:00403725                 mov     eax, [esp+4Ch+var_28]
.text:00403729                 lea     edx, [eax+ebp]
.text:0040372C                 lea     esi, [esi+0]
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: sub_4030F0+6EF↓j
.text:00403730                 cmp     [esp+4Ch+var_21], 0
.text:00403735                 jz      short loc_4037B0
.text:00403737                 cmp     [esp+4Ch+var_29], 0
.text:0040373C                 jnz     short loc_4037B0
.text:0040373E                 mov     edi, [esp+4Ch+arg_4]
.text:00403742                 cmp     [esp+4Ch+var_34], edi
.text:00403746                 jnb     short loc_403754
.text:00403748                 mov     esi, [esp+4Ch+arg_0]
.text:0040374C                 mov     eax, [esp+4Ch+var_34]
.text:00403750                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403754
.text:00403754 loc_403754:                             ; CODE XREF: sub_4030F0+656↑j
.text:00403754                 inc     [esp+4Ch+var_34]
.text:00403758                 mov     ecx, [esp+4Ch+arg_4]
.text:0040375C                 cmp     [esp+4Ch+var_34], ecx
.text:00403760                 jnb     short loc_403775
.text:00403762                 mov     cl, bl
.text:00403764                 mov     esi, [esp+4Ch+arg_0]
.text:00403768                 mov     edi, [esp+4Ch+var_34]
.text:0040376C                 shr     cl, 6
.text:0040376F                 add     cl, 30h ; '0'
.text:00403772                 mov     [edi+esi], cl
.text:00403775
.text:00403775 loc_403775:                             ; CODE XREF: sub_4030F0+670↑j
.text:00403775                 inc     [esp+4Ch+var_34]
.text:00403779                 mov     edi, [esp+4Ch+arg_4]
.text:0040377D                 cmp     [esp+4Ch+var_34], edi
.text:00403781                 jnb     short loc_403799
.text:00403783                 mov     cl, bl
.text:00403785                 mov     esi, [esp+4Ch+arg_0]
.text:00403789                 shr     cl, 3
.text:0040378C                 mov     edi, [esp+4Ch+var_34]
.text:00403790                 and     cl, 7
.text:00403793                 add     cl, 30h ; '0'
.text:00403796                 mov     [edi+esi], cl
.text:00403799
.text:00403799 loc_403799:                             ; CODE XREF: sub_4030F0+691↑j
.text:00403799                 inc     [esp+4Ch+var_34]
.text:0040379D                 and     bl, 7
.text:004037A0                 add     bl, 30h ; '0'
.text:004037A3                 lea     esi, [esi+0]
.text:004037A9                 lea     edi, [edi+0]
.text:004037B0
.text:004037B0 loc_4037B0:                             ; CODE XREF: sub_4030F0+645↑j
.text:004037B0                                         ; sub_4030F0+64C↑j
.text:004037B0                 lea     eax, [ebp+1]
.text:004037B3                 cmp     edx, eax
.text:004037B5                 jbe     loc_4034B0
.text:004037BB                 mov     ebp, [esp+4Ch+arg_4]
.text:004037BF                 cmp     [esp+4Ch+var_34], ebp
.text:004037C3                 jnb     short loc_4037D0
.text:004037C5                 mov     ecx, [esp+4Ch+arg_0]
.text:004037C9                 mov     edi, [esp+4Ch+var_34]
.text:004037CD                 mov     [edi+ecx], bl
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_4030F0+6D3↑j
.text:004037D0                 inc     [esp+4Ch+var_34]
.text:004037D4                 mov     ebp, eax
.text:004037D6                 mov     eax, [esp+4Ch+Str]
.text:004037DA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004037DF                 jmp     loc_403730
.text:004037E4 ; ---------------------------------------------------------------------------
.text:004037E4
.text:004037E4 loc_4037E4:                             ; CODE XREF: sub_4030F0+5FF↑j
.text:004037E4                 mov     ecx, ds:_pctype
.text:004037EA                 mov     edi, [ecx]
.text:004037EC                 movzx   eax, word ptr [edi+edx*2]
.text:004037F0                 and     eax, 157h
.text:004037F5                 jmp     loc_403705
.text:004037F5 ; ---------------------------------------------------------------------------
.text:004037FA                 align 10h
.text:00403800
.text:00403800 loc_403800:                             ; CODE XREF: sub_4030F0+5E5↑j
.text:00403800                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00403805                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040380D                 mov     [esp+4Ch+var_28], 0
.text:00403815                 mov     [esp+4Ch+var_29], 1
.text:0040381A                 jz      loc_4039AC
.text:00403820
.text:00403820 loc_403820:                             ; CODE XREF: sub_4030F0+8CC↓j
.text:00403820                 mov     ecx, [esp+4Ch+arg_C]
.text:00403824                 lea     edx, [esp+4Ch+var_18]
.text:00403828                 mov     edi, [esp+4Ch+Str]
.text:0040382C                 mov     [esp+4Ch+State], edx ; State
.text:00403830                 lea     esi, [esp+4Ch+var_18._State]
.text:00403834                 sub     ecx, ebp
.text:00403836                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040383A                 add     edi, ebp
.text:0040383C                 mov     [esp+4Ch+var_30], edi
.text:00403840                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403844                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403847                 call    mbrtowc
.text:0040384C                 test    eax, eax
.text:0040384E                 mov     edi, eax
.text:00403850                 jz      short loc_403890
.text:00403852                 cmp     eax, 0FFFFFFFFh
.text:00403855                 jz      loc_4039A2
.text:0040385B                 cmp     eax, 0FFFFFFFEh
.text:0040385E                 jz      loc_403962
.text:00403864                 cmp     [esp+4Ch+arg_10], 1
.text:00403869                 jz      short loc_4038A0
.text:0040386B
.text:0040386B loc_40386B:                             ; CODE XREF: sub_4030F0+7B9↓j
.text:0040386B                                         ; sub_4030F0+86D↓j
.text:0040386B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403870                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403878                 mov     [esp+4Ch+C], ecx ; C
.text:0040387B                 call    iswctype
.text:00403880                 test    eax, eax
.text:00403882                 jnz     short loc_403889
.text:00403884                 mov     [esp+4Ch+var_29], 0
.text:00403889
.text:00403889 loc_403889:                             ; CODE XREF: sub_4030F0+792↑j
.text:00403889                 mov     [esp+4Ch+var_28], edi
.text:0040388D                 lea     esi, [esi+0]
.text:00403890
.text:00403890 loc_403890:                             ; CODE XREF: sub_4030F0+760↑j
.text:00403890                                         ; sub_4030F0+87B↓j ...
.text:00403890                 cmp     [esp+4Ch+var_28], 1
.text:00403895                 jbe     loc_40370C
.text:0040389B                 jmp     loc_403725
.text:004038A0 ; ---------------------------------------------------------------------------
.text:004038A0
.text:004038A0 loc_4038A0:                             ; CODE XREF: sub_4030F0+779↑j
.text:004038A0                 cmp     [esp+4Ch+arg_10], eax
.text:004038A4                 mov     edx, 1
.text:004038A9                 jnb     short loc_40386B
.text:004038AB
.text:004038AB loc_4038AB:                             ; CODE XREF: sub_4030F0+867↓j
.text:004038AB                 mov     ecx, [esp+4Ch+Str]
.text:004038AF                 lea     esi, [edx+ebp]
.text:004038B2                 movsx   eax, byte ptr [esi+ecx]
.text:004038B6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004038B9                 cmp     eax, 21h
.text:004038BC                 ja      def_4038C2      ; jumptable 004038C2 default case, cases 93,95,97-123
.text:004038C2                 jmp     ds:jpt_4038C2[eax*4] ; switch jump
.text:004038C2 ; ---------------------------------------------------------------------------
.text:004038C9                 align 4
.text:004038CC jpt_4038C2      dd offset loc_4034FB    ; DATA XREF: sub_4030F0+7D2↑r
.text:004038CC                 dd offset loc_4034FB    ; jump table for switch statement
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset loc_4034FB
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset loc_4034FB
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset def_4038C2
.text:004038CC                 dd offset loc_4034FB
.text:00403954 ; ---------------------------------------------------------------------------
.text:00403954
.text:00403954 def_4038C2:                             ; CODE XREF: sub_4030F0+7CC↑j
.text:00403954                                         ; sub_4030F0+7D2↑j
.text:00403954                                         ; DATA XREF: ...
.text:00403954                 inc     edx             ; jumptable 004038C2 default case, cases 93,95,97-123
.text:00403955                 cmp     edx, edi
.text:00403957                 jb      loc_4038AB
.text:0040395D                 jmp     loc_40386B
.text:00403962 ; ---------------------------------------------------------------------------
.text:00403962
.text:00403962 loc_403962:                             ; CODE XREF: sub_4030F0+76E↑j
.text:00403962                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403966                 mov     [esp+4Ch+var_29], 0
.text:0040396B                 jnb     loc_403890
.text:00403971                 mov     eax, [esp+4Ch+var_30]
.text:00403975                 cmp     byte ptr [eax], 0
.text:00403978                 jz      loc_403890
.text:0040397E
.text:0040397E loc_40397E:                             ; CODE XREF: sub_4030F0+8AB↓j
.text:0040397E                 inc     [esp+4Ch+var_28]
.text:00403982                 mov     esi, [esp+4Ch+var_28]
.text:00403986                 lea     eax, [esi+ebp]
.text:00403989                 cmp     eax, [esp+4Ch+arg_C]
.text:0040398D                 jnb     loc_403890
.text:00403993                 mov     edi, [esp+4Ch+Str]
.text:00403997                 cmp     byte ptr [eax+edi], 0
.text:0040399B                 jnz     short loc_40397E
.text:0040399D                 jmp     loc_403890
.text:004039A2 ; ---------------------------------------------------------------------------
.text:004039A2
.text:004039A2 loc_4039A2:                             ; CODE XREF: sub_4030F0+765↑j
.text:004039A2                 mov     [esp+4Ch+var_29], 0
.text:004039A7                 jmp     loc_403890
.text:004039AC ; ---------------------------------------------------------------------------
.text:004039AC
.text:004039AC loc_4039AC:                             ; CODE XREF: sub_4030F0+72A↑j
.text:004039AC                 mov     edx, [esp+4Ch+Str]
.text:004039B0                 mov     [esp+4Ch+C], edx ; Str
.text:004039B3                 call    strlen
.text:004039B8                 mov     [esp+4Ch+arg_C], eax
.text:004039BC                 jmp     loc_403820
.text:004039C1 ; ---------------------------------------------------------------------------
.text:004039C1
.text:004039C1 loc_4039C1:                             ; CODE XREF: sub_4030F0+105↑j
.text:004039C1                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004039C1                 mov     dl, bl          ; jumptable 004031F5 case 92
.text:004039C3                 jmp     loc_4034F4
.text:004039C8 ; ---------------------------------------------------------------------------
.text:004039C8
.text:004039C8 loc_4039C8:                             ; CODE XREF: sub_4030F0+105↑j
.text:004039C8                                         ; sub_4030F0+902↓j
.text:004039C8                                         ; DATA XREF: ...
.text:004039C8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004031F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004039CD                 jnz     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004039CD                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004039D3                 jmp     loc_4034FB      ; jumptable 004038C2 cases 91,92,94,96,124
.text:004039D8 ; ---------------------------------------------------------------------------
.text:004039D8
.text:004039D8 loc_4039D8:                             ; CODE XREF: sub_4030F0+105↑j
.text:004039D8                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004039D8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004031F5 cases 123,125
.text:004039DD                 jz      short loc_4039F4
.text:004039DF                 cmp     [esp+4Ch+arg_C], 1
.text:004039E4
.text:004039E4 loc_4039E4:                             ; CODE XREF: sub_4030F0+90C↓j
.text:004039E4                 jnz     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004039E4                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004039EA
.text:004039EA loc_4039EA:                             ; CODE XREF: sub_4030F0+105↑j
.text:004039EA                                         ; DATA XREF: sub_4030F0:jpt_4031F5↑o
.text:004039EA                 test    ebp, ebp        ; jumptable 004031F5 cases 35,126
.text:004039EC                 jnz     def_4035F2      ; jumptable 004031F5 cases 37,43-58,65-90,93,95,97-122
.text:004039EC                                         ; jumptable 004035F2 default case, cases 34-38,42-44,46,48-59
.text:004039F2                 jmp     short loc_4039C8 ; jumptable 004031F5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004039F4 ; ---------------------------------------------------------------------------
.text:004039F4
.text:004039F4 loc_4039F4:                             ; CODE XREF: sub_4030F0+8ED↑j
.text:004039F4                 mov     esi, [esp+4Ch+Str]
.text:004039F8                 cmp     byte ptr [esi+1], 0
.text:004039FC                 jmp     short loc_4039E4
.text:004039FE ; ---------------------------------------------------------------------------
.text:004039FE
.text:004039FE loc_4039FE:                             ; CODE XREF: sub_4030F0:loc_40318F↑j
.text:004039FE                 test    ebp, ebp
.text:00403A00                 jnz     short loc_403A0D
.text:00403A02                 cmp     [esp+4Ch+arg_10], 1
.text:00403A07                 jz      loc_4034FB      ; jumptable 004038C2 cases 91,92,94,96,124
.text:00403A0D
.text:00403A0D loc_403A0D:                             ; CODE XREF: sub_4030F0+910↑j
.text:00403A0D                 mov     esi, [esp+4Ch+var_1C]
.text:00403A11                 test    esi, esi
.text:00403A13                 jz      short loc_403A48
.text:00403A15                 mov     edi, [esp+4Ch+var_1C]
.text:00403A19                 movzx   eax, byte ptr [edi]
.text:00403A1C                 test    al, al
.text:00403A1E                 jz      short loc_403A48
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_4030F0+956↓j
.text:00403A20                 mov     ebp, [esp+4Ch+arg_4]
.text:00403A24                 cmp     [esp+4Ch+var_34], ebp
.text:00403A28                 jnb     short loc_403A35
.text:00403A2A                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A2E                 mov     ebx, [esp+4Ch+var_34]
.text:00403A32                 mov     [ebx+ecx], al
.text:00403A35
.text:00403A35 loc_403A35:                             ; CODE XREF: sub_4030F0+938↑j
.text:00403A35                 inc     [esp+4Ch+var_1C]
.text:00403A39                 inc     [esp+4Ch+var_34]
.text:00403A3D                 mov     edx, [esp+4Ch+var_1C]
.text:00403A41                 movzx   eax, byte ptr [edx]
.text:00403A44                 test    al, al
.text:00403A46                 jnz     short loc_403A20
.text:00403A48
.text:00403A48 loc_403A48:                             ; CODE XREF: sub_4030F0+923↑j
.text:00403A48                                         ; sub_4030F0+92E↑j
.text:00403A48                 mov     eax, [esp+4Ch+arg_4]
.text:00403A4C                 cmp     [esp+4Ch+var_34], eax
.text:00403A50                 jnb     short loc_403A5E
.text:00403A52                 mov     edi, [esp+4Ch+arg_0]
.text:00403A56                 mov     esi, [esp+4Ch+var_34]
.text:00403A5A                 mov     byte ptr [esi+edi], 0
.text:00403A5E
.text:00403A5E loc_403A5E:                             ; CODE XREF: sub_4030F0+960↑j
.text:00403A5E                 mov     eax, [esp+4Ch+var_34]
.text:00403A62                 jmp     loc_40352F
.text:00403A67 ; ---------------------------------------------------------------------------
.text:00403A67
.text:00403A67 loc_403A67:                             ; CODE XREF: sub_4030F0+95↑j
.text:00403A67                 mov     ebx, [esp+4Ch+Str]
.text:00403A6B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403A70                 jmp     loc_40318F
.text:00403A75 ; ---------------------------------------------------------------------------
.text:00403A75
.text:00403A75 loc_403A75:                             ; CODE XREF: sub_4030F0+3D↑j
.text:00403A75                                         ; DATA XREF: sub_4030F0:jpt_40312D↑o
.text:00403A75                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040312D case 2
.text:00403A79                 cmp     [esp+4Ch+var_34], edx
.text:00403A7D                 jnb     short loc_403A86
.text:00403A7F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403A83                 mov     byte ptr [ecx], 27h ; '''
.text:00403A86
.text:00403A86 loc_403A86:                             ; CODE XREF: sub_4030F0+98D↑j
.text:00403A86                 mov     [esp+4Ch+var_34], 1
.text:00403A8E                 mov     [esp+4Ch+var_1C], 4030DEh
.text:00403A96                 jmp     loc_403176
.text:00403A9B ; ---------------------------------------------------------------------------
.text:00403A9B
.text:00403A9B loc_403A9B:                             ; CODE XREF: sub_4030F0+3D↑j
.text:00403A9B                                         ; DATA XREF: sub_4030F0:jpt_40312D↑o
.text:00403A9B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040312D case 4
.text:00403AA0                 jmp     def_40312D      ; jumptable 0040312D default case, cases 0,1
.text:00403AA5 ; ---------------------------------------------------------------------------
.text:00403AA5
.text:00403AA5 loc_403AA5:                             ; CODE XREF: sub_4030F0+3D↑j
.text:00403AA5                                         ; DATA XREF: sub_4030F0:jpt_40312D↑o
.text:00403AA5                 mov     [esp+4Ch+C], 4030E0h ; jumptable 0040312D cases 5,6
.text:00403AAC                 call    ds:libintl_gettext
.text:00403AB2                 cmp     eax, 4030E0h
.text:00403AB7                 mov     edi, eax
.text:00403AB9                 jz      short loc_403B30
.text:00403ABB
.text:00403ABB loc_403ABB:                             ; CODE XREF: sub_4030F0+A45↓j
.text:00403ABB                                         ; sub_4030F0+A4C↓j
.text:00403ABB                 mov     [esp+4Ch+C], 4030DEh
.text:00403AC2                 call    ds:libintl_gettext
.text:00403AC8                 cmp     eax, 4030DEh
.text:00403ACD                 mov     edx, eax
.text:00403ACF                 jz      short loc_403B22
.text:00403AD1
.text:00403AD1 loc_403AD1:                             ; CODE XREF: sub_4030F0+A37↓j
.text:00403AD1                                         ; sub_4030F0+A3E↓j
.text:00403AD1                 mov     [esp+4Ch+var_1C], edi
.text:00403AD5                 cmp     byte ptr [edi], 0
.text:00403AD8                 jz      short loc_403B08
.text:00403ADA
.text:00403ADA loc_403ADA:                             ; CODE XREF: sub_4030F0+A16↓j
.text:00403ADA                 mov     ecx, [esp+4Ch+arg_4]
.text:00403ADE                 cmp     [esp+4Ch+var_34], ecx
.text:00403AE2                 jnb     short loc_403AF7
.text:00403AE4                 mov     ebp, [esp+4Ch+var_1C]
.text:00403AE8                 mov     edi, [esp+4Ch+arg_0]
.text:00403AEC                 mov     esi, [esp+4Ch+var_34]
.text:00403AF0                 movzx   ebx, byte ptr [ebp+0]
.text:00403AF4                 mov     [esi+edi], bl
.text:00403AF7
.text:00403AF7 loc_403AF7:                             ; CODE XREF: sub_4030F0+9F2↑j
.text:00403AF7                 inc     [esp+4Ch+var_1C]
.text:00403AFB                 inc     [esp+4Ch+var_34]
.text:00403AFF                 mov     eax, [esp+4Ch+var_1C]
.text:00403B03                 cmp     byte ptr [eax], 0
.text:00403B06                 jnz     short loc_403ADA
.text:00403B08
.text:00403B08 loc_403B08:                             ; CODE XREF: sub_4030F0+9E8↑j
.text:00403B08                 mov     [esp+4Ch+var_21], 1
.text:00403B0D                 mov     [esp+4Ch+var_1C], edx
.text:00403B11                 mov     [esp+4Ch+C], edx ; Str
.text:00403B14                 call    strlen
.text:00403B19                 mov     [esp+4Ch+var_20], eax
.text:00403B1D                 jmp     def_40312D      ; jumptable 0040312D default case, cases 0,1
.text:00403B22 ; ---------------------------------------------------------------------------
.text:00403B22
.text:00403B22 loc_403B22:                             ; CODE XREF: sub_4030F0+9DF↑j
.text:00403B22                 cmp     [esp+4Ch+arg_10], 6
.text:00403B27                 jnz     short loc_403AD1
.text:00403B29                 mov     edx, offset asc_4030DC ; "\"'`"
.text:00403B2E                 jmp     short loc_403AD1
.text:00403B30 ; ---------------------------------------------------------------------------
.text:00403B30
.text:00403B30 loc_403B30:                             ; CODE XREF: sub_4030F0+9C9↑j
.text:00403B30                 cmp     [esp+4Ch+arg_10], 6
.text:00403B35                 jnz     short loc_403ABB
.text:00403B37                 mov     edi, offset asc_4030DC ; "\"'`"
.text:00403B3C                 jmp     loc_403ABB
.text:00403B3C sub_4030F0      endp
.text:00403B3C
.text:00403B41 ; ---------------------------------------------------------------------------
.text:00403B41                 jmp     short loc_403B50
.text:00403B41 ; ---------------------------------------------------------------------------
.text:00403B43                 align 10h
.text:00403B50
.text:00403B50 loc_403B50:                             ; CODE XREF: .text:00403B41↑j
.text:00403B50                 sub     esp, 0Ch
.text:00403B53                 mov     [esp+4], ebx
.text:00403B57                 mov     [esp+8], esi
.text:00403B5B                 call    _errno
.text:00403B60                 mov     esi, [eax]
.text:00403B62                 mov     dword ptr [esp], 24h ; '$'
.text:00403B69                 call    sub_404440
.text:00403B6E                 mov     edx, [esp+10h]
.text:00403B72                 mov     ebx, eax
.text:00403B74                 test    edx, edx
.text:00403B76                 jz      short loc_403BC1
.text:00403B78
.text:00403B78 loc_403B78:                             ; CODE XREF: .text:00403BC6↓j
.text:00403B78                 mov     ecx, [edx]
.text:00403B7A                 mov     [ebx], ecx
.text:00403B7C                 mov     ecx, [edx+4]
.text:00403B7F                 mov     [ebx+4], ecx
.text:00403B82                 mov     ecx, [edx+8]
.text:00403B85                 mov     [ebx+8], ecx
.text:00403B88                 mov     ecx, [edx+0Ch]
.text:00403B8B                 mov     [ebx+0Ch], ecx
.text:00403B8E                 mov     ecx, [edx+10h]
.text:00403B91                 mov     [ebx+10h], ecx
.text:00403B94                 mov     ecx, [edx+14h]
.text:00403B97                 mov     [ebx+14h], ecx
.text:00403B9A                 mov     ecx, [edx+18h]
.text:00403B9D                 mov     [ebx+18h], ecx
.text:00403BA0                 mov     ecx, [edx+1Ch]
.text:00403BA3                 mov     [ebx+1Ch], ecx
.text:00403BA6                 mov     ecx, [edx+20h]
.text:00403BA9                 mov     [ebx+20h], ecx
.text:00403BAC                 call    _errno
.text:00403BB1                 mov     [eax], esi
.text:00403BB3                 mov     esi, [esp+8]
.text:00403BB7                 mov     eax, ebx
.text:00403BB9                 mov     ebx, [esp+4]
.text:00403BBD                 add     esp, 0Ch
.text:00403BC0                 retn
.text:00403BC1 ; ---------------------------------------------------------------------------
.text:00403BC1
.text:00403BC1 loc_403BC1:                             ; CODE XREF: .text:00403B76↑j
.text:00403BC1                 mov     edx, offset dword_407140
.text:00403BC6                 jmp     short loc_403B78
.text:00403BC6 ; ---------------------------------------------------------------------------
.text:00403BC8                 align 10h
.text:00403BD0                 mov     eax, [esp+4]
.text:00403BD4                 test    eax, eax
.text:00403BD6                 jz      short loc_403BE0
.text:00403BD8
.text:00403BD8 loc_403BD8:                             ; CODE XREF: .text:00403BE5↓j
.text:00403BD8                 mov     eax, [eax]
.text:00403BDA                 retn
.text:00403BDA ; ---------------------------------------------------------------------------
.text:00403BDB                 align 10h
.text:00403BE0
.text:00403BE0 loc_403BE0:                             ; CODE XREF: .text:00403BD6↑j
.text:00403BE0                 mov     eax, offset dword_407140
.text:00403BE5                 jmp     short loc_403BD8
.text:00403BE5 ; ---------------------------------------------------------------------------
.text:00403BE7                 align 10h
.text:00403BF0                 mov     edx, [esp+4]
.text:00403BF4                 test    edx, edx
.text:00403BF6                 jz      short loc_403C00
.text:00403BF8
.text:00403BF8 loc_403BF8:                             ; CODE XREF: .text:00403C05↓j
.text:00403BF8                 mov     ecx, [esp+8]
.text:00403BFC                 mov     [edx], ecx
.text:00403BFE                 retn
.text:00403BFE ; ---------------------------------------------------------------------------
.text:00403BFF                 align 10h
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: .text:00403BF6↑j
.text:00403C00                 mov     edx, offset dword_407140
.text:00403C05                 jmp     short loc_403BF8
.text:00403C05 ; ---------------------------------------------------------------------------
.text:00403C07                 align 10h
.text:00403C10                 sub     esp, 8
.text:00403C13                 mov     eax, [esp+0Ch]
.text:00403C17                 movzx   ecx, byte ptr [esp+10h]
.text:00403C1C                 mov     [esp], ebx
.text:00403C1F                 mov     ebx, [esp+14h]
.text:00403C23                 mov     [esp+4], esi
.text:00403C27                 mov     dl, cl
.text:00403C29                 shr     dl, 5
.text:00403C2C                 movzx   edx, dl
.text:00403C2F                 shl     edx, 2
.text:00403C32                 test    eax, eax
.text:00403C34                 lea     esi, [edx+eax+4]
.text:00403C38                 jz      short loc_403C60
.text:00403C3A
.text:00403C3A loc_403C3A:                             ; CODE XREF: .text:00403C66↓j
.text:00403C3A                 mov     edx, [esi]
.text:00403C3C                 and     ecx, 1Fh
.text:00403C3F                 and     ebx, 1
.text:00403C42                 mov     eax, edx
.text:00403C44                 shr     eax, cl
.text:00403C46                 and     eax, 1
.text:00403C49                 xor     ebx, eax
.text:00403C4B                 shl     ebx, cl
.text:00403C4D                 xor     edx, ebx
.text:00403C4F                 mov     [esi], edx
.text:00403C51                 mov     ebx, [esp]
.text:00403C54                 mov     esi, [esp+4]
.text:00403C58                 add     esp, 8
.text:00403C5B                 retn
.text:00403C5B ; ---------------------------------------------------------------------------
.text:00403C5C                 align 10h
.text:00403C60
.text:00403C60 loc_403C60:                             ; CODE XREF: .text:00403C38↑j
.text:00403C60                 lea     esi, dword_407144[edx]
.text:00403C66                 jmp     short loc_403C3A
.text:00403C66 ; ---------------------------------------------------------------------------
.text:00403C68                 align 10h
.text:00403C70                 sub     esp, 2Ch
.text:00403C73                 mov     [esp+24h], ebx
.text:00403C77                 mov     ebx, [esp+40h]
.text:00403C7B                 mov     [esp+28h], esi
.text:00403C7F                 test    ebx, ebx
.text:00403C81                 jz      short loc_403CD0
.text:00403C83
.text:00403C83 loc_403C83:                             ; CODE XREF: .text:00403CD5↓j
.text:00403C83                 call    _errno
.text:00403C88                 mov     esi, [eax]
.text:00403C8A                 mov     [esp+14h], ebx
.text:00403C8E                 mov     edx, [ebx]
.text:00403C90                 mov     ecx, [esp+38h]
.text:00403C94                 mov     ebx, [esp+3Ch]
.text:00403C98                 mov     [esp+10h], edx
.text:00403C9C                 mov     edx, [esp+34h]
.text:00403CA0                 mov     [esp+0Ch], ebx
.text:00403CA4                 mov     [esp+8], ecx
.text:00403CA8                 mov     [esp+4], edx
.text:00403CAC                 mov     edx, [esp+30h]
.text:00403CB0                 mov     [esp], edx
.text:00403CB3                 call    sub_4030F0
.text:00403CB8                 mov     ebx, eax
.text:00403CBA                 call    _errno
.text:00403CBF                 mov     [eax], esi
.text:00403CC1                 mov     esi, [esp+28h]
.text:00403CC5                 mov     eax, ebx
.text:00403CC7                 mov     ebx, [esp+24h]
.text:00403CCB                 add     esp, 2Ch
.text:00403CCE                 retn
.text:00403CCE ; ---------------------------------------------------------------------------
.text:00403CCF                 align 10h
.text:00403CD0
.text:00403CD0 loc_403CD0:                             ; CODE XREF: .text:00403C81↑j
.text:00403CD0                 mov     ebx, offset dword_407140
.text:00403CD5                 jmp     short loc_403C83
.text:00403CD5 ; ---------------------------------------------------------------------------
.text:00403CD7                 align 10h
.text:00403CE0                 push    ebp
.text:00403CE1                 push    edi
.text:00403CE2                 push    esi
.text:00403CE3                 push    ebx
.text:00403CE4                 sub     esp, 2Ch
.text:00403CE7                 mov     ebp, [esp+48h]
.text:00403CEB                 call    _errno
.text:00403CF0                 mov     edx, [eax]
.text:00403CF2                 test    ebp, ebp
.text:00403CF4                 mov     ebx, ebp
.text:00403CF6                 mov     [esp+28h], edx
.text:00403CFA                 jz      loc_403DB0
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: .text:00403DB5↓j
.text:00403D00                 call    _errno
.text:00403D05                 mov     edi, [eax]
.text:00403D07                 mov     esi, ebp
.text:00403D09                 mov     [esp+14h], ebx
.text:00403D0D                 mov     ecx, [ebx]
.text:00403D0F                 mov     dword ptr [esp], 0
.text:00403D16                 mov     edx, [esp+44h]
.text:00403D1A                 mov     dword ptr [esp+4], 0
.text:00403D22                 mov     eax, [esp+40h]
.text:00403D26                 mov     [esp+10h], ecx
.text:00403D2A                 mov     [esp+0Ch], edx
.text:00403D2E                 mov     [esp+8], eax
.text:00403D32                 call    sub_4030F0
.text:00403D37                 mov     ebx, eax
.text:00403D39                 call    _errno
.text:00403D3E                 mov     [eax], edi
.text:00403D40                 lea     edi, [ebx+1]
.text:00403D43                 mov     [esp], edi
.text:00403D46                 call    sub_404440
.text:00403D4B                 mov     [esp+24h], eax
.text:00403D4F                 test    ebp, ebp
.text:00403D51                 jz      short loc_403DA2
.text:00403D53
.text:00403D53 loc_403D53:                             ; CODE XREF: .text:00403DA7↓j
.text:00403D53                 call    _errno
.text:00403D58                 mov     ebp, [eax]
.text:00403D5A                 mov     [esp+14h], esi
.text:00403D5E                 mov     ecx, [esi]
.text:00403D60                 mov     [esp+4], edi
.text:00403D64                 mov     edx, [esp+44h]
.text:00403D68                 mov     esi, [esp+24h]
.text:00403D6C                 mov     [esp+10h], ecx
.text:00403D70                 mov     eax, [esp+40h]
.text:00403D74                 mov     [esp+0Ch], edx
.text:00403D78                 mov     [esp], esi
.text:00403D7B                 mov     [esp+8], eax
.text:00403D7F                 call    sub_4030F0
.text:00403D84                 call    _errno
.text:00403D89                 mov     [eax], ebp
.text:00403D8B                 call    _errno
.text:00403D90                 mov     ebx, [esp+28h]
.text:00403D94                 mov     [eax], ebx
.text:00403D96                 mov     eax, [esp+24h]
.text:00403D9A                 add     esp, 2Ch
.text:00403D9D                 pop     ebx
.text:00403D9E                 pop     esi
.text:00403D9F                 pop     edi
.text:00403DA0                 pop     ebp
.text:00403DA1                 retn
.text:00403DA2 ; ---------------------------------------------------------------------------
.text:00403DA2
.text:00403DA2 loc_403DA2:                             ; CODE XREF: .text:00403D51↑j
.text:00403DA2                 mov     esi, offset dword_407140
.text:00403DA7                 jmp     short loc_403D53
.text:00403DA7 ; ---------------------------------------------------------------------------
.text:00403DA9                 align 10h
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: .text:00403CFA↑j
.text:00403DB0                 mov     ebx, offset dword_407140
.text:00403DB5                 jmp     loc_403D00
.text:00403DB5 ; ---------------------------------------------------------------------------
.text:00403DBA                 align 10h
.text:00403DC0                 sub     esp, 1Ch
.text:00403DC3                 mov     edx, [esp+24h]
.text:00403DC7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403DCF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403DD7                 mov     [esp+4], edx
.text:00403DDB                 mov     edx, [esp+20h]
.text:00403DDF                 mov     [esp], edx
.text:00403DE2                 call    sub_404230
.text:00403DE7                 add     esp, 1Ch
.text:00403DEA                 retn
.text:00403DEA ; ---------------------------------------------------------------------------
.text:00403DEB                 align 10h
.text:00403DF0                 sub     esp, 1Ch
.text:00403DF3                 mov     edx, [esp+20h]
.text:00403DF7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403DFF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403E07                 mov     [esp+4], edx
.text:00403E0B                 mov     dword ptr [esp], 0
.text:00403E12                 call    sub_404230
.text:00403E17                 add     esp, 1Ch
.text:00403E1A                 retn
.text:00403E1A ; ---------------------------------------------------------------------------
.text:00403E1B                 align 10h
.text:00403E20
.text:00403E20 ; =============== S U B R O U T I N E =======================================
.text:00403E20
.text:00403E20
.text:00403E20 ; int __cdecl sub_403E20(int, int, char *)
.text:00403E20 sub_403E20      proc near               ; CODE XREF: .text:00402BBA↑p
.text:00403E20                                         ; sub_402BD0+1A↑p
.text:00403E20
.text:00403E20 var_BC          = dword ptr -0BCh
.text:00403E20 var_B8          = dword ptr -0B8h
.text:00403E20 var_B4          = dword ptr -0B4h
.text:00403E20 var_B0          = dword ptr -0B0h
.text:00403E20 var_AC          = dword ptr -0ACh
.text:00403E20 var_A8          = dword ptr -0A8h
.text:00403E20 var_A4          = dword ptr -0A4h
.text:00403E20 var_A0          = dword ptr -0A0h
.text:00403E20 var_9C          = dword ptr -9Ch
.text:00403E20 var_98          = dword ptr -98h
.text:00403E20 var_94          = dword ptr -94h
.text:00403E20 var_90          = dword ptr -90h
.text:00403E20 var_8C          = dword ptr -8Ch
.text:00403E20 var_7C          = dword ptr -7Ch
.text:00403E20 var_78          = dword ptr -78h
.text:00403E20 var_74          = dword ptr -74h
.text:00403E20 var_70          = dword ptr -70h
.text:00403E20 var_6C          = dword ptr -6Ch
.text:00403E20 var_68          = dword ptr -68h
.text:00403E20 var_64          = dword ptr -64h
.text:00403E20 var_60          = dword ptr -60h
.text:00403E20 var_5C          = dword ptr -5Ch
.text:00403E20 var_4C          = dword ptr -4Ch
.text:00403E20 var_48          = dword ptr -48h
.text:00403E20 var_44          = dword ptr -44h
.text:00403E20 var_40          = dword ptr -40h
.text:00403E20 var_3C          = dword ptr -3Ch
.text:00403E20 var_38          = dword ptr -38h
.text:00403E20 var_34          = dword ptr -34h
.text:00403E20 var_30          = dword ptr -30h
.text:00403E20 var_2C          = dword ptr -2Ch
.text:00403E20 arg_0           = dword ptr  4
.text:00403E20 arg_4           = dword ptr  8
.text:00403E20 arg_8           = dword ptr  0Ch
.text:00403E20
.text:00403E20                 push    ebp
.text:00403E21                 xor     eax, eax
.text:00403E23                 mov     ecx, 8
.text:00403E28                 push    edi
.text:00403E29                 push    esi
.text:00403E2A                 push    ebx
.text:00403E2B                 sub     esp, 0ACh
.text:00403E31                 mov     ebp, [esp+0BCh+arg_4]
.text:00403E38                 cld
.text:00403E39                 lea     edi, [esp+0BCh+var_A8]
.text:00403E3D                 mov     [esp+0BCh+var_AC], ebp
.text:00403E41                 rep stosd
.text:00403E43                 mov     eax, [esp+0BCh+var_8C]
.text:00403E47                 mov     edi, [esp+0BCh+var_AC]
.text:00403E4B                 mov     esi, [esp+0BCh+var_A8]
.text:00403E4F                 mov     [esp+0BCh+var_5C], eax
.text:00403E53                 mov     ebp, [esp+0BCh+var_A4]
.text:00403E57                 mov     eax, [esp+0BCh+var_AC]
.text:00403E5B                 mov     [esp+0BCh+var_7C], edi
.text:00403E5F                 mov     ecx, [esp+0BCh+var_94]
.text:00403E63                 mov     edi, [esp+0BCh+var_A0]
.text:00403E67                 mov     [esp+0BCh+var_78], esi
.text:00403E6B                 mov     edx, [esp+0BCh+var_90]
.text:00403E6F                 mov     esi, [esp+0BCh+var_9C]
.text:00403E73                 mov     [esp+0BCh+var_4C], eax
.text:00403E77                 mov     ebx, [esp+0BCh+var_98]
.text:00403E7B                 mov     eax, [esp+0BCh+var_A8]
.text:00403E7F                 mov     [esp+0BCh+var_74], ebp
.text:00403E83                 mov     [esp+0BCh+var_70], edi
.text:00403E87                 mov     [esp+0BCh+var_6C], esi
.text:00403E8B                 mov     [esp+0BCh+var_68], ebx
.text:00403E8F                 mov     [esp+0BCh+var_64], ecx
.text:00403E93                 mov     [esp+0BCh+var_60], edx
.text:00403E97                 mov     [esp+0BCh+var_48], eax
.text:00403E9B                 mov     [esp+0BCh+var_44], ebp
.text:00403E9F                 mov     [esp+0BCh+var_40], edi
.text:00403EA3                 mov     [esp+0BCh+var_3C], esi
.text:00403EAA                 mov     [esp+0BCh+var_38], ebx
.text:00403EB1                 mov     ebx, [esp+0BCh+var_8C]
.text:00403EB5                 mov     [esp+0BCh+var_30], edx
.text:00403EBC                 mov     edx, [esp+0BCh+arg_8]
.text:00403EC3                 mov     [esp+0BCh+var_34], ecx
.text:00403ECA                 lea     ecx, [esp+0BCh+var_4C]
.text:00403ECE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403ED2                 mov     edx, [esp+0BCh+arg_0]
.text:00403ED9                 mov     [esp+0BCh+var_2C], ebx
.text:00403EE0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403EE4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403EEC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403EEF                 call    sub_404230
.text:00403EF4                 add     esp, 0ACh
.text:00403EFA                 pop     ebx
.text:00403EFB                 pop     esi
.text:00403EFC                 pop     edi
.text:00403EFD                 pop     ebp
.text:00403EFE                 retn
.text:00403EFE sub_403E20      endp
.text:00403EFE
.text:00403EFE ; ---------------------------------------------------------------------------
.text:00403EFF                 align 10h
.text:00403F00                 push    ebp
.text:00403F01                 xor     eax, eax
.text:00403F03                 mov     ecx, 8
.text:00403F08                 push    edi
.text:00403F09                 push    esi
.text:00403F0A                 push    ebx
.text:00403F0B                 sub     esp, 0ACh
.text:00403F11                 mov     edx, [esp+0C4h]
.text:00403F18                 cld
.text:00403F19                 lea     edi, [esp+14h]
.text:00403F1D                 mov     [esp+10h], edx
.text:00403F21                 rep stosd
.text:00403F23                 mov     eax, [esp+30h]
.text:00403F27                 mov     ebp, [esp+10h]
.text:00403F2B                 mov     edi, [esp+14h]
.text:00403F2F                 mov     [esp+60h], eax
.text:00403F33                 mov     esi, [esp+20h]
.text:00403F37                 mov     eax, [esp+10h]
.text:00403F3B                 mov     [esp+40h], ebp
.text:00403F3F                 mov     ecx, [esp+28h]
.text:00403F43                 mov     ebp, [esp+18h]
.text:00403F47                 mov     [esp+44h], edi
.text:00403F4B                 mov     edx, [esp+2Ch]
.text:00403F4F                 mov     edi, [esp+1Ch]
.text:00403F53                 mov     [esp+70h], eax
.text:00403F57                 mov     ebx, [esp+24h]
.text:00403F5B                 mov     eax, [esp+14h]
.text:00403F5F                 mov     [esp+48h], ebp
.text:00403F63                 mov     [esp+4Ch], edi
.text:00403F67                 mov     [esp+50h], esi
.text:00403F6B                 mov     [esp+54h], ebx
.text:00403F6F                 mov     [esp+58h], ecx
.text:00403F73                 mov     [esp+5Ch], edx
.text:00403F77                 mov     [esp+74h], eax
.text:00403F7B                 mov     [esp+78h], ebp
.text:00403F7F                 mov     [esp+7Ch], edi
.text:00403F83                 mov     [esp+80h], esi
.text:00403F8A                 mov     [esp+84h], ebx
.text:00403F91                 mov     esi, [esp+30h]
.text:00403F95                 lea     ebx, [esp+70h]
.text:00403F99                 mov     [esp+8Ch], edx
.text:00403FA0                 mov     edx, [esp+0C8h]
.text:00403FA7                 mov     [esp+88h], ecx
.text:00403FAE                 mov     ecx, [esp+0CCh]
.text:00403FB5                 mov     [esp+4], edx
.text:00403FB9                 mov     edx, [esp+0C0h]
.text:00403FC0                 mov     [esp+90h], esi
.text:00403FC7                 mov     [esp+0Ch], ebx
.text:00403FCB                 mov     [esp+8], ecx
.text:00403FCF                 mov     [esp], edx
.text:00403FD2                 call    sub_404230
.text:00403FD7                 add     esp, 0ACh
.text:00403FDD                 pop     ebx
.text:00403FDE                 pop     esi
.text:00403FDF                 pop     edi
.text:00403FE0                 pop     ebp
.text:00403FE1                 retn
.text:00403FE1 ; ---------------------------------------------------------------------------
.text:00403FE2                 align 10h
.text:00403FF0                 push    ebp
.text:00403FF1                 xor     eax, eax
.text:00403FF3                 mov     ecx, 8
.text:00403FF8                 push    edi
.text:00403FF9                 push    esi
.text:00403FFA                 push    ebx
.text:00403FFB                 sub     esp, 0ACh
.text:00404001                 mov     edi, [esp+0C0h]
.text:00404008                 cld
.text:00404009                 mov     [esp+10h], edi
.text:0040400D                 lea     edi, [esp+14h]
.text:00404011                 rep stosd
.text:00404013                 mov     eax, [esp+30h]
.text:00404017                 mov     esi, [esp+10h]
.text:0040401B                 mov     ebx, [esp+14h]
.text:0040401F                 mov     [esp+60h], eax
.text:00404023                 mov     ebp, [esp+18h]
.text:00404027                 mov     eax, [esp+10h]
.text:0040402B                 mov     [esp+40h], esi
.text:0040402F                 mov     edi, [esp+1Ch]
.text:00404033                 mov     esi, [esp+20h]
.text:00404037                 mov     [esp+44h], ebx
.text:0040403B                 mov     ecx, [esp+28h]
.text:0040403F                 mov     edx, [esp+2Ch]
.text:00404043                 mov     [esp+70h], eax
.text:00404047                 mov     ebx, [esp+24h]
.text:0040404B                 mov     eax, [esp+14h]
.text:0040404F                 mov     [esp+48h], ebp
.text:00404053                 mov     [esp+4Ch], edi
.text:00404057                 mov     [esp+50h], esi
.text:0040405B                 mov     [esp+54h], ebx
.text:0040405F                 mov     [esp+58h], ecx
.text:00404063                 mov     [esp+5Ch], edx
.text:00404067                 mov     [esp+74h], eax
.text:0040406B                 mov     [esp+78h], ebp
.text:0040406F                 mov     [esp+7Ch], edi
.text:00404073                 mov     [esp+80h], esi
.text:0040407A                 mov     [esp+84h], ebx
.text:00404081                 mov     [esp+8Ch], edx
.text:00404088                 lea     edx, [esp+70h]
.text:0040408C                 mov     [esp+88h], ecx
.text:00404093                 mov     ecx, [esp+30h]
.text:00404097                 mov     [esp+0Ch], edx
.text:0040409B                 mov     edx, [esp+0C4h]
.text:004040A2                 mov     [esp+90h], ecx
.text:004040A9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004040B1                 mov     [esp+4], edx
.text:004040B5                 mov     dword ptr [esp], 0
.text:004040BC                 call    sub_404230
.text:004040C1                 add     esp, 0ACh
.text:004040C7                 pop     ebx
.text:004040C8                 pop     esi
.text:004040C9                 pop     edi
.text:004040CA                 pop     ebp
.text:004040CB                 retn
.text:004040CB ; ---------------------------------------------------------------------------
.text:004040CC                 align 10h
.text:004040D0                 push    edi
.text:004040D1                 push    esi
.text:004040D2                 push    ebx
.text:004040D3                 sub     esp, 40h
.text:004040D6                 mov     edx, ds:dword_40714C
.text:004040DC                 mov     ebx, ds:dword_407140
.text:004040E2                 mov     esi, ds:dword_407148
.text:004040E8                 mov     edi, ds:dword_407144
.text:004040EE                 mov     [esp+1Ch], edx
.text:004040F2                 mov     ecx, ds:dword_407150
.text:004040F8                 mov     edx, ds:dword_407160
.text:004040FE                 mov     [esp+10h], ebx
.text:00404102                 mov     ebx, ds:dword_407154
.text:00404108                 mov     [esp+30h], edx
.text:0040410C                 movzx   edx, byte ptr [esp+54h]
.text:00404111                 mov     [esp+18h], esi
.text:00404115                 mov     esi, ds:dword_40715C
.text:0040411B                 mov     [esp+14h], edi
.text:0040411F                 mov     edi, ds:dword_407158
.text:00404125                 mov     [esp+20h], ecx
.text:00404129                 mov     cl, dl
.text:0040412B                 shr     cl, 5
.text:0040412E                 mov     [esp+24h], ebx
.text:00404132                 movzx   ebx, cl
.text:00404135                 mov     [esp+2Ch], esi
.text:00404139                 lea     esi, [esp+10h]
.text:0040413D                 mov     [esp+28h], edi
.text:00404141                 lea     edi, [esi+ebx*4]
.text:00404144                 mov     ebx, edx
.text:00404146                 mov     edx, [edi+4]
.text:00404149                 and     ebx, 1Fh
.text:0040414C                 mov     cl, bl
.text:0040414E                 mov     eax, edx
.text:00404150                 shr     eax, cl
.text:00404152                 and     eax, 1
.text:00404155                 xor     eax, 1
.text:00404158                 shl     eax, cl
.text:0040415A                 xor     edx, eax
.text:0040415C                 mov     [edi+4], edx
.text:0040415F                 mov     edx, [esp+50h]
.text:00404163                 mov     [esp+0Ch], esi
.text:00404167                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040416F                 mov     [esp+4], edx
.text:00404173                 mov     dword ptr [esp], 0
.text:0040417A                 call    sub_404230
.text:0040417F                 add     esp, 40h
.text:00404182                 pop     ebx
.text:00404183                 pop     esi
.text:00404184                 pop     edi
.text:00404185                 retn
.text:00404185 ; ---------------------------------------------------------------------------
.text:00404186                 align 10h
.text:00404190
.text:00404190 ; =============== S U B R O U T I N E =======================================
.text:00404190
.text:00404190
.text:00404190 ; int __cdecl sub_404190(char *)
.text:00404190 sub_404190      proc near               ; CODE XREF: sub_402F80+64↑p
.text:00404190
.text:00404190 var_4C          = dword ptr -4Ch
.text:00404190 var_48          = dword ptr -48h
.text:00404190 var_44          = dword ptr -44h
.text:00404190 var_40          = dword ptr -40h
.text:00404190 var_3C          = dword ptr -3Ch
.text:00404190 var_38          = dword ptr -38h
.text:00404190 var_34          = dword ptr -34h
.text:00404190 var_30          = dword ptr -30h
.text:00404190 var_2C          = dword ptr -2Ch
.text:00404190 var_28          = dword ptr -28h
.text:00404190 var_24          = dword ptr -24h
.text:00404190 var_20          = dword ptr -20h
.text:00404190 var_1C          = dword ptr -1Ch
.text:00404190 arg_0           = dword ptr  4
.text:00404190
.text:00404190                 sub     esp, 4Ch
.text:00404193                 mov     ecx, ds:dword_407140
.text:00404199                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004041A1                 mov     edx, ds:dword_407144
.text:004041A7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004041AE                 mov     [esp+4Ch+var_3C], ecx
.text:004041B2                 mov     ecx, ds:dword_40714C
.text:004041B8                 mov     [esp+4Ch+var_38], edx
.text:004041BC                 mov     edx, ds:dword_407148
.text:004041C2                 mov     [esp+4Ch+var_30], ecx
.text:004041C6                 mov     ecx, ds:dword_407150
.text:004041CC                 mov     eax, edx
.text:004041CE                 shr     eax, 1Ah
.text:004041D1                 and     eax, 1
.text:004041D4                 xor     eax, 1
.text:004041D7                 mov     [esp+4Ch+var_2C], ecx
.text:004041DB                 shl     eax, 1Ah
.text:004041DE                 mov     ecx, ds:dword_407154
.text:004041E4                 xor     edx, eax
.text:004041E6                 mov     [esp+4Ch+var_34], edx
.text:004041EA                 mov     edx, [esp+4Ch+arg_0]
.text:004041EE                 mov     [esp+4Ch+var_28], ecx
.text:004041F2                 mov     ecx, ds:dword_407158
.text:004041F8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004041FC                 mov     [esp+4Ch+var_24], ecx
.text:00404200                 mov     ecx, ds:dword_40715C
.text:00404206                 mov     [esp+4Ch+var_20], ecx
.text:0040420A                 mov     ecx, ds:dword_407160
.text:00404210                 mov     [esp+4Ch+var_1C], ecx
.text:00404214                 lea     ecx, [esp+4Ch+var_3C]
.text:00404218                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040421C                 call    sub_404230
.text:00404221                 add     esp, 4Ch
.text:00404224                 retn
.text:00404224 sub_404190      endp
.text:00404224
.text:00404224 ; ---------------------------------------------------------------------------
.text:00404225                 align 10h
.text:00404230
.text:00404230 ; =============== S U B R O U T I N E =======================================
.text:00404230
.text:00404230
.text:00404230 ; int __cdecl sub_404230(int, char *, int, int)
.text:00404230 sub_404230      proc near               ; CODE XREF: .text:00403DE2↑p
.text:00404230                                         ; .text:00403E12↑p ...
.text:00404230
.text:00404230 Block           = dword ptr -2Ch
.text:00404230 var_28          = dword ptr -28h
.text:00404230 Str             = dword ptr -24h
.text:00404230 var_20          = dword ptr -20h
.text:00404230 var_1C          = dword ptr -1Ch
.text:00404230 var_18          = dword ptr -18h
.text:00404230 var_14          = dword ptr -14h
.text:00404230 arg_0           = dword ptr  4
.text:00404230 arg_4           = dword ptr  8
.text:00404230 arg_8           = dword ptr  0Ch
.text:00404230 arg_C           = dword ptr  10h
.text:00404230
.text:00404230                 push    ebp
.text:00404231                 push    edi
.text:00404232                 push    esi
.text:00404233                 push    ebx
.text:00404234                 sub     esp, 1Ch
.text:00404237                 call    _errno
.text:0040423C                 mov     edx, [eax]
.text:0040423E                 mov     eax, [esp+2Ch+arg_0]
.text:00404242                 mov     [esp+2Ch+var_14], edx
.text:00404246                 test    eax, eax
.text:00404248                 js      loc_4043EA
.text:0040424E                 mov     eax, [esp+2Ch+arg_0]
.text:00404252                 cmp     dword_406030, eax
.text:00404258                 ja      short loc_4042D0
.text:0040425A                 mov     esi, eax
.text:0040425C                 inc     esi
.text:0040425D                 cmp     esi, 1FFFFFFFh
.text:00404263                 ja      loc_4043EF
.text:00404269                 mov     ebx, off_40603C
.text:0040426F                 cmp     ebx, offset dword_406034
.text:00404275                 jz      loc_4043C1
.text:0040427B
.text:0040427B loc_40427B:                             ; CODE XREF: sub_404230+1B5↓j
.text:0040427B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040427E                 lea     ecx, ds:0[esi*8]
.text:00404285                 mov     ebp, esi
.text:00404287                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040428B                 call    sub_4044D0
.text:00404290                 mov     off_40603C, eax
.text:00404295                 mov     ebx, dword_406030
.text:0040429B                 sub     ebp, ebx
.text:0040429D                 lea     edi, [eax+ebx*8]
.text:004042A0                 lea     eax, ds:0[ebp*8]
.text:004042A7                 cmp     eax, 7
.text:004042AA                 jbe     short loc_4042C0
.text:004042AC                 test    edi, 4
.text:004042B2                 jz      short loc_4042C0
.text:004042B4                 mov     dword ptr [edi], 0
.text:004042BA                 sub     eax, 4
.text:004042BD                 add     edi, 4
.text:004042C0
.text:004042C0 loc_4042C0:                             ; CODE XREF: sub_404230+7A↑j
.text:004042C0                                         ; sub_404230+82↑j
.text:004042C0                 cld
.text:004042C1                 mov     ecx, eax
.text:004042C3                 shr     ecx, 2
.text:004042C6                 xor     eax, eax
.text:004042C8                 rep stosd
.text:004042CA                 mov     dword_406030, esi
.text:004042D0
.text:004042D0 loc_4042D0:                             ; CODE XREF: sub_404230+28↑j
.text:004042D0                 mov     esi, off_40603C
.text:004042D6                 mov     eax, [esp+2Ch+arg_0]
.text:004042DA                 mov     ebp, [esi+eax*8]
.text:004042DD                 mov     edi, [esi+eax*8+4]
.text:004042E1                 mov     esi, [esp+2Ch+arg_C]
.text:004042E5                 test    esi, esi
.text:004042E7                 jz      loc_4043B7
.text:004042ED
.text:004042ED loc_4042ED:                             ; CODE XREF: sub_404230+18C↓j
.text:004042ED                 call    _errno
.text:004042F2                 mov     ebx, [eax]
.text:004042F4                 mov     [esp+2Ch+var_18], esi ; int
.text:004042F8                 mov     ecx, [esi]
.text:004042FA                 mov     [esp+2Ch+Block], edi ; int
.text:004042FD                 mov     edx, [esp+2Ch+arg_8]
.text:00404301                 mov     [esp+2Ch+var_28], ebp ; int
.text:00404305                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404309                 mov     ecx, [esp+2Ch+arg_4]
.text:0040430D                 mov     [esp+2Ch+var_20], edx ; int
.text:00404311                 mov     [esp+2Ch+Str], ecx ; Str
.text:00404315                 call    sub_4030F0
.text:0040431A                 mov     esi, eax
.text:0040431C                 call    _errno
.text:00404321                 mov     [eax], ebx
.text:00404323                 cmp     ebp, esi
.text:00404325                 ja      short loc_40439B
.text:00404327                 lea     ebp, [esi+1]
.text:0040432A                 mov     ebx, off_40603C
.text:00404330                 cmp     edi, offset unk_407040
.text:00404336                 mov     esi, [esp+2Ch+arg_0]
.text:0040433A                 mov     [ebx+esi*8], ebp
.text:0040433D                 jz      short loc_40434D
.text:0040433F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404342                 call    free
.text:00404347                 mov     ebx, off_40603C
.text:0040434D
.text:0040434D loc_40434D:                             ; CODE XREF: sub_404230+10D↑j
.text:0040434D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404350                 call    sub_404440
.text:00404355                 mov     esi, [esp+2Ch+arg_C]
.text:00404359                 mov     edi, eax
.text:0040435B                 mov     eax, [esp+2Ch+arg_0]
.text:0040435F                 test    esi, esi
.text:00404361                 mov     [ebx+eax*8+4], edi
.text:00404365                 jz      short loc_4043B0
.text:00404367
.text:00404367 loc_404367:                             ; CODE XREF: sub_404230+185↓j
.text:00404367                 call    _errno
.text:0040436C                 mov     ebx, [eax]
.text:0040436E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404372                 mov     ecx, [esi]
.text:00404374                 mov     [esp+2Ch+Block], edi ; int
.text:00404377                 mov     edx, [esp+2Ch+arg_8]
.text:0040437B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040437F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404383                 mov     ecx, [esp+2Ch+arg_4]
.text:00404387                 mov     [esp+2Ch+var_20], edx ; int
.text:0040438B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040438F                 call    sub_4030F0
.text:00404394                 call    _errno
.text:00404399                 mov     [eax], ebx
.text:0040439B
.text:0040439B loc_40439B:                             ; CODE XREF: sub_404230+F5↑j
.text:0040439B                 call    _errno
.text:004043A0                 mov     ebp, [esp+2Ch+var_14]
.text:004043A4                 mov     [eax], ebp
.text:004043A6                 add     esp, 1Ch
.text:004043A9                 mov     eax, edi
.text:004043AB                 pop     ebx
.text:004043AC                 pop     esi
.text:004043AD                 pop     edi
.text:004043AE                 pop     ebp
.text:004043AF                 retn
.text:004043B0 ; ---------------------------------------------------------------------------
.text:004043B0
.text:004043B0 loc_4043B0:                             ; CODE XREF: sub_404230+135↑j
.text:004043B0                 mov     esi, offset dword_407140
.text:004043B5                 jmp     short loc_404367
.text:004043B7 ; ---------------------------------------------------------------------------
.text:004043B7
.text:004043B7 loc_4043B7:                             ; CODE XREF: sub_404230+B7↑j
.text:004043B7                 mov     esi, offset dword_407140
.text:004043BC                 jmp     loc_4042ED
.text:004043C1 ; ---------------------------------------------------------------------------
.text:004043C1
.text:004043C1 loc_4043C1:                             ; CODE XREF: sub_404230+45↑j
.text:004043C1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004043C8                 call    sub_404440
.text:004043CD                 mov     off_40603C, eax
.text:004043D2                 mov     edi, dword_406034
.text:004043D8                 mov     ebx, eax
.text:004043DA                 mov     ecx, off_406038
.text:004043E0                 mov     [eax], edi
.text:004043E2                 mov     [eax+4], ecx
.text:004043E5                 jmp     loc_40427B
.text:004043EA ; ---------------------------------------------------------------------------
.text:004043EA
.text:004043EA loc_4043EA:                             ; CODE XREF: sub_404230+18↑j
.text:004043EA                 call    abort
.text:004043EF ; ---------------------------------------------------------------------------
.text:004043EF
.text:004043EF loc_4043EF:                             ; CODE XREF: sub_404230+33↑j
.text:004043EF                 call    sub_404CA0
.text:004043EF sub_404230      endp
.text:004043EF
.text:004043EF ; ---------------------------------------------------------------------------
.text:004043F4                 align 10h
.text:00404400
.text:00404400 ; =============== S U B R O U T I N E =======================================
.text:00404400
.text:00404400
.text:00404400 sub_404400      proc near
.text:00404400
.text:00404400 Size            = dword ptr -0Ch
.text:00404400 var_4           = dword ptr -4
.text:00404400 arg_0           = dword ptr  4
.text:00404400 arg_4           = dword ptr  8
.text:00404400
.text:00404400                 sub     esp, 0Ch
.text:00404403                 xor     edx, edx
.text:00404405                 mov     ecx, [esp+0Ch+arg_4]
.text:00404409                 mov     [esp+0Ch+var_4], ebx
.text:0040440D                 mov     eax, 0FFFFFFFFh
.text:00404412                 mov     ebx, [esp+0Ch+arg_0]
.text:00404416                 div     ecx
.text:00404418                 cmp     eax, ebx
.text:0040441A                 jb      short loc_404439
.text:0040441C                 mov     edx, ebx
.text:0040441E                 imul    edx, ecx
.text:00404421                 mov     [esp+0Ch+Size], edx ; Size
.text:00404424                 call    malloc
.text:00404429                 test    eax, eax
.text:0040442B                 jz      short loc_404435
.text:0040442D
.text:0040442D loc_40442D:                             ; CODE XREF: sub_404400+37↓j
.text:0040442D                 mov     ebx, [esp+0Ch+var_4]
.text:00404431                 add     esp, 0Ch
.text:00404434                 retn
.text:00404435 ; ---------------------------------------------------------------------------
.text:00404435
.text:00404435 loc_404435:                             ; CODE XREF: sub_404400+2B↑j
.text:00404435                 test    ebx, ebx
.text:00404437                 jz      short loc_40442D
.text:00404439
.text:00404439 loc_404439:                             ; CODE XREF: sub_404400+1A↑j
.text:00404439                 call    sub_404CA0
.text:00404439 sub_404400      endp
.text:00404439
.text:00404439 ; ---------------------------------------------------------------------------
.text:0040443E                 align 10h
.text:00404440
.text:00404440 ; =============== S U B R O U T I N E =======================================
.text:00404440
.text:00404440
.text:00404440 ; int __cdecl sub_404440(size_t)
.text:00404440 sub_404440      proc near               ; CODE XREF: sub_402C00+81↑p
.text:00404440                                         ; .text:00403B69↑p ...
.text:00404440
.text:00404440 Size            = dword ptr -0Ch
.text:00404440 var_4           = dword ptr -4
.text:00404440 arg_0           = dword ptr  4
.text:00404440
.text:00404440                 sub     esp, 0Ch
.text:00404443                 mov     [esp+0Ch+var_4], ebx
.text:00404447                 mov     ebx, [esp+0Ch+arg_0]
.text:0040444B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040444E                 call    malloc
.text:00404453                 test    eax, eax
.text:00404455                 jz      short loc_404460
.text:00404457
.text:00404457 loc_404457:                             ; CODE XREF: sub_404440+22↓j
.text:00404457                 mov     ebx, [esp+0Ch+var_4]
.text:0040445B                 add     esp, 0Ch
.text:0040445E                 retn
.text:0040445E ; ---------------------------------------------------------------------------
.text:0040445F                 align 10h
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_404440+15↑j
.text:00404460                 test    ebx, ebx
.text:00404462                 jz      short loc_404457
.text:00404464                 call    sub_404CA0
.text:00404464 sub_404440      endp
.text:00404464
.text:00404464 ; ---------------------------------------------------------------------------
.text:00404469                 align 10h
.text:00404470                 sub     esp, 1Ch
.text:00404473                 xor     edx, edx
.text:00404475                 mov     eax, 0FFFFFFFFh
.text:0040447A                 mov     [esp+14h], ebx
.text:0040447E                 mov     ecx, [esp+20h]
.text:00404482                 mov     ebx, [esp+28h]
.text:00404486                 mov     [esp+18h], esi
.text:0040448A                 mov     esi, [esp+24h]
.text:0040448E                 div     ebx
.text:00404490                 cmp     eax, esi
.text:00404492                 jb      short loc_4044C4
.text:00404494                 mov     [esp], ecx
.text:00404497                 mov     edx, esi
.text:00404499                 imul    edx, ebx
.text:0040449C                 mov     [esp+4], edx
.text:004044A0                 call    realloc
.text:004044A5                 test    eax, eax
.text:004044A7                 mov     ecx, eax
.text:004044A9                 jz      short loc_4044C0
.text:004044AB
.text:004044AB loc_4044AB:                             ; CODE XREF: .text:004044C2↓j
.text:004044AB                 mov     ebx, [esp+14h]
.text:004044AF                 mov     eax, ecx
.text:004044B1                 mov     esi, [esp+18h]
.text:004044B5                 add     esp, 1Ch
.text:004044B8                 retn
.text:004044B8 ; ---------------------------------------------------------------------------
.text:004044B9                 align 10h
.text:004044C0
.text:004044C0 loc_4044C0:                             ; CODE XREF: .text:004044A9↑j
.text:004044C0                 test    esi, esi
.text:004044C2                 jz      short loc_4044AB
.text:004044C4
.text:004044C4 loc_4044C4:                             ; CODE XREF: .text:00404492↑j
.text:004044C4                 call    sub_404CA0
.text:004044C4 ; ---------------------------------------------------------------------------
.text:004044C9                 align 10h
.text:004044D0
.text:004044D0 ; =============== S U B R O U T I N E =======================================
.text:004044D0
.text:004044D0
.text:004044D0 ; int __cdecl sub_4044D0(void *, size_t)
.text:004044D0 sub_4044D0      proc near               ; CODE XREF: sub_404230+5B↑p
.text:004044D0
.text:004044D0 Block           = dword ptr -0Ch
.text:004044D0 Size            = dword ptr -8
.text:004044D0 var_4           = dword ptr -4
.text:004044D0 arg_0           = dword ptr  4
.text:004044D0 arg_4           = dword ptr  8
.text:004044D0
.text:004044D0                 sub     esp, 0Ch
.text:004044D3                 mov     edx, [esp+0Ch+arg_0]
.text:004044D7                 mov     [esp+0Ch+var_4], ebx
.text:004044DB                 mov     ebx, [esp+0Ch+arg_4]
.text:004044DF                 mov     [esp+0Ch+Block], edx ; Block
.text:004044E2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004044E6                 call    realloc
.text:004044EB                 test    eax, eax
.text:004044ED                 jz      short loc_4044F7
.text:004044EF
.text:004044EF loc_4044EF:                             ; CODE XREF: sub_4044D0+29↓j
.text:004044EF                 mov     ebx, [esp+0Ch+var_4]
.text:004044F3                 add     esp, 0Ch
.text:004044F6                 retn
.text:004044F7 ; ---------------------------------------------------------------------------
.text:004044F7
.text:004044F7 loc_4044F7:                             ; CODE XREF: sub_4044D0+1D↑j
.text:004044F7                 test    ebx, ebx
.text:004044F9                 jz      short loc_4044EF
.text:004044FB                 call    sub_404CA0
.text:004044FB sub_4044D0      endp
.text:004044FB
.text:00404500 ; ---------------------------------------------------------------------------
.text:00404500                 jmp     sub_404650
.text:00404500 ; ---------------------------------------------------------------------------
.text:00404505                 align 10h
.text:00404510                 sub     esp, 0Ch
.text:00404513                 mov     edx, [esp+14h]
.text:00404517                 mov     dword ptr [esp+8], 1
.text:0040451F                 mov     [esp+4], edx
.text:00404523                 mov     edx, [esp+10h]
.text:00404527                 mov     [esp], edx
.text:0040452A                 call    sub_404650
.text:0040452F                 add     esp, 0Ch
.text:00404532                 retn
.text:00404532 ; ---------------------------------------------------------------------------
.text:00404533                 align 10h
.text:00404540                 sub     esp, 1Ch
.text:00404543                 mov     [esp+18h], ebx
.text:00404547                 mov     ebx, [esp+20h]
.text:0040454B                 mov     [esp], ebx
.text:0040454E                 call    malloc
.text:00404553                 test    eax, eax
.text:00404555                 jz      short loc_404573
.text:00404557
.text:00404557 loc_404557:                             ; CODE XREF: .text:00404575↓j
.text:00404557                 mov     [esp+8], ebx
.text:0040455B                 mov     dword ptr [esp+4], 0
.text:00404563                 mov     [esp], eax
.text:00404566                 call    memset
.text:0040456B                 mov     ebx, [esp+18h]
.text:0040456F                 add     esp, 1Ch
.text:00404572                 retn
.text:00404573 ; ---------------------------------------------------------------------------
.text:00404573
.text:00404573 loc_404573:                             ; CODE XREF: .text:00404555↑j
.text:00404573                 test    ebx, ebx
.text:00404575                 jz      short loc_404557
.text:00404577                 call    sub_404CA0
.text:00404577 ; ---------------------------------------------------------------------------
.text:0040457C                 align 10h
.text:00404580                 sub     esp, 0Ch
.text:00404583                 xor     edx, edx
.text:00404585                 mov     ecx, [esp+14h]
.text:00404589                 mov     [esp+8], ebx
.text:0040458D                 mov     eax, 0FFFFFFFFh
.text:00404592                 mov     ebx, [esp+10h]
.text:00404596                 div     ecx
.text:00404598                 cmp     eax, ebx
.text:0040459A                 jb      short loc_4045B8
.text:0040459C                 mov     [esp+4], ecx
.text:004045A0                 mov     [esp], ebx
.text:004045A3                 call    calloc
.text:004045A8                 test    eax, eax
.text:004045AA                 jz      short loc_4045B4
.text:004045AC
.text:004045AC loc_4045AC:                             ; CODE XREF: .text:004045B6↓j
.text:004045AC                 mov     ebx, [esp+8]
.text:004045B0                 add     esp, 0Ch
.text:004045B3                 retn
.text:004045B4 ; ---------------------------------------------------------------------------
.text:004045B4
.text:004045B4 loc_4045B4:                             ; CODE XREF: .text:004045AA↑j
.text:004045B4                 test    ebx, ebx
.text:004045B6                 jz      short loc_4045AC
.text:004045B8
.text:004045B8 loc_4045B8:                             ; CODE XREF: .text:0040459A↑j
.text:004045B8                 call    sub_404CA0
.text:004045B8 ; ---------------------------------------------------------------------------
.text:004045BD                 align 10h
.text:004045C0                 sub     esp, 1Ch
.text:004045C3                 mov     [esp+18h], ebx
.text:004045C7                 mov     ebx, [esp+24h]
.text:004045CB                 mov     [esp], ebx
.text:004045CE                 call    malloc
.text:004045D3                 test    eax, eax
.text:004045D5                 mov     edx, eax
.text:004045D7                 jz      short loc_4045F5
.text:004045D9
.text:004045D9 loc_4045D9:                             ; CODE XREF: .text:004045F7↓j
.text:004045D9                 mov     [esp+8], ebx
.text:004045DD                 mov     ecx, [esp+20h]
.text:004045E1                 mov     [esp], edx
.text:004045E4                 mov     [esp+4], ecx
.text:004045E8                 call    memcpy
.text:004045ED                 mov     ebx, [esp+18h]
.text:004045F1                 add     esp, 1Ch
.text:004045F4                 retn
.text:004045F5 ; ---------------------------------------------------------------------------
.text:004045F5
.text:004045F5 loc_4045F5:                             ; CODE XREF: .text:004045D7↑j
.text:004045F5                 test    ebx, ebx
.text:004045F7                 jz      short loc_4045D9
.text:004045F9                 call    sub_404CA0
.text:004045F9 ; ---------------------------------------------------------------------------
.text:004045FE                 align 10h
.text:00404600                 sub     esp, 1Ch
.text:00404603                 mov     [esp+18h], esi
.text:00404607                 mov     esi, [esp+20h]
.text:0040460B                 mov     [esp+14h], ebx
.text:0040460F                 mov     [esp], esi
.text:00404612                 call    strlen
.text:00404617                 lea     ebx, [eax+1]
.text:0040461A                 mov     [esp], ebx
.text:0040461D                 call    malloc
.text:00404622                 test    eax, eax
.text:00404624                 jz      short loc_404642
.text:00404626
.text:00404626 loc_404626:                             ; CODE XREF: .text:00404644↓j
.text:00404626                 mov     [esp+8], ebx
.text:0040462A                 mov     [esp+4], esi
.text:0040462E                 mov     [esp], eax
.text:00404631                 call    memcpy
.text:00404636                 mov     ebx, [esp+14h]
.text:0040463A                 mov     esi, [esp+18h]
.text:0040463E                 add     esp, 1Ch
.text:00404641                 retn
.text:00404642 ; ---------------------------------------------------------------------------
.text:00404642
.text:00404642 loc_404642:                             ; CODE XREF: .text:00404624↑j
.text:00404642                 test    ebx, ebx
.text:00404644                 jz      short loc_404626
.text:00404646                 call    sub_404CA0
.text:00404646 ; ---------------------------------------------------------------------------
.text:0040464B                 align 10h
.text:00404650
.text:00404650 ; =============== S U B R O U T I N E =======================================
.text:00404650
.text:00404650
.text:00404650 ; int __cdecl sub_404650(void *, int, int)
.text:00404650 sub_404650      proc near               ; CODE XREF: .text:00404500↑j
.text:00404650                                         ; .text:0040452A↑p
.text:00404650
.text:00404650 Block           = dword ptr -1Ch
.text:00404650 Size            = dword ptr -18h
.text:00404650 var_C           = dword ptr -0Ch
.text:00404650 var_8           = dword ptr -8
.text:00404650 var_4           = dword ptr -4
.text:00404650 arg_0           = dword ptr  4
.text:00404650 arg_4           = dword ptr  8
.text:00404650 arg_8           = dword ptr  0Ch
.text:00404650
.text:00404650                 sub     esp, 1Ch
.text:00404653                 mov     [esp+1Ch+var_8], esi
.text:00404657                 mov     esi, [esp+1Ch+arg_0]
.text:0040465B                 mov     [esp+1Ch+var_4], edi
.text:0040465F                 mov     edi, [esp+1Ch+arg_4]
.text:00404663                 test    esi, esi
.text:00404665                 mov     [esp+1Ch+var_C], ebx
.text:00404669                 mov     ecx, [edi]
.text:0040466B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040466F                 jz      short loc_4046B0
.text:00404671                 xor     edx, edx
.text:00404673                 mov     eax, 7FFFFFFFh
.text:00404678                 div     ebx
.text:0040467A                 cmp     eax, ecx
.text:0040467C                 jb      short loc_4046A9
.text:0040467E                 add     ecx, ecx
.text:00404680
.text:00404680 loc_404680:                             ; CODE XREF: sub_404650+62↓j
.text:00404680                                         ; sub_404650+71↓j ...
.text:00404680                 mov     [edi], ecx
.text:00404682                 imul    ebx, ecx
.text:00404685                 mov     [esp+1Ch+Block], esi ; Block
.text:00404688                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040468C                 call    realloc
.text:00404691                 test    eax, eax
.text:00404693                 jz      short loc_4046A5
.text:00404695
.text:00404695 loc_404695:                             ; CODE XREF: sub_404650+57↓j
.text:00404695                 mov     ebx, [esp+1Ch+var_C]
.text:00404699                 mov     esi, [esp+1Ch+var_8]
.text:0040469D                 mov     edi, [esp+1Ch+var_4]
.text:004046A1                 add     esp, 1Ch
.text:004046A4                 retn
.text:004046A5 ; ---------------------------------------------------------------------------
.text:004046A5
.text:004046A5 loc_4046A5:                             ; CODE XREF: sub_404650+43↑j
.text:004046A5                 test    ebx, ebx
.text:004046A7                 jz      short loc_404695
.text:004046A9
.text:004046A9 loc_4046A9:                             ; CODE XREF: sub_404650+2C↑j
.text:004046A9                 call    sub_404CA0
.text:004046A9 ; ---------------------------------------------------------------------------
.text:004046AE                 align 10h
.text:004046B0
.text:004046B0 loc_4046B0:                             ; CODE XREF: sub_404650+1F↑j
.text:004046B0                 test    ecx, ecx
.text:004046B2                 jnz     short loc_404680
.text:004046B4                 xor     edx, edx
.text:004046B6                 mov     eax, 40h ; '@'
.text:004046BB                 div     ebx
.text:004046BD                 test    eax, eax
.text:004046BF                 mov     ecx, eax
.text:004046C1                 jnz     short loc_404680
.text:004046C3                 mov     ecx, 1
.text:004046C8                 jmp     short loc_404680
.text:004046C8 sub_404650      endp
.text:004046C8
.text:004046C8 ; ---------------------------------------------------------------------------
.text:004046CA                 align 10h
.text:004046D0
.text:004046D0 ; =============== S U B R O U T I N E =======================================
.text:004046D0
.text:004046D0
.text:004046D0 sub_4046D0      proc near               ; CODE XREF: sub_402C00+E↑p
.text:004046D0
.text:004046D0 arg_0           = dword ptr  4
.text:004046D0
.text:004046D0                 mov     ecx, [esp+arg_0]
.text:004046D4                 movzx   eax, byte ptr [ecx]
.text:004046D7                 test    al, al
.text:004046D9                 jz      short loc_4046E1
.text:004046DB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:004046DF                 jz      short loc_404727
.text:004046E1
.text:004046E1 loc_4046E1:                             ; CODE XREF: sub_4046D0+9↑j
.text:004046E1                                         ; sub_4046D0+5D↓j
.text:004046E1                 test    al, al
.text:004046E3                 mov     edx, ecx
.text:004046E5                 jz      short loc_404700
.text:004046E7                 movzx   eax, byte ptr [ecx]
.text:004046EA                 lea     esi, [esi+0]
.text:004046F0
.text:004046F0 loc_4046F0:                             ; CODE XREF: sub_4046D0+2E↓j
.text:004046F0                 cmp     al, 2Fh ; '/'
.text:004046F2                 jz      short loc_404703
.text:004046F4                 cmp     al, 5Ch ; '\'
.text:004046F6                 jz      short loc_404703
.text:004046F8
.text:004046F8 loc_4046F8:                             ; CODE XREF: sub_4046D0+45↓j
.text:004046F8                 inc     edx
.text:004046F9                 movzx   eax, byte ptr [edx]
.text:004046FC                 test    al, al
.text:004046FE                 jnz     short loc_4046F0
.text:00404700
.text:00404700 loc_404700:                             ; CODE XREF: sub_4046D0+15↑j
.text:00404700                                         ; sub_4046D0+50↓j ...
.text:00404700                 mov     eax, ecx
.text:00404702                 retn
.text:00404703 ; ---------------------------------------------------------------------------
.text:00404703
.text:00404703 loc_404703:                             ; CODE XREF: sub_4046D0+22↑j
.text:00404703                                         ; sub_4046D0+26↑j ...
.text:00404703                 inc     edx
.text:00404704                 movzx   eax, byte ptr [edx]
.text:00404707                 cmp     al, 2Fh ; '/'
.text:00404709                 jz      short loc_404703
.text:0040470B                 cmp     al, 5Ch ; '\'
.text:0040470D                 jz      short loc_404703
.text:0040470F                 test    al, al
.text:00404711                 jz      short loc_404717
.text:00404713                 mov     ecx, edx
.text:00404715                 jmp     short loc_4046F8
.text:00404717 ; ---------------------------------------------------------------------------
.text:00404717
.text:00404717 loc_404717:                             ; CODE XREF: sub_4046D0+41↑j
.text:00404717                 movzx   eax, byte ptr [ecx]
.text:0040471A                 cmp     al, 2Fh ; '/'
.text:0040471C                 jz      short loc_404722
.text:0040471E                 cmp     al, 5Ch ; '\'
.text:00404720                 jnz     short loc_404700
.text:00404722
.text:00404722 loc_404722:                             ; CODE XREF: sub_4046D0+4C↑j
.text:00404722                 lea     ecx, [edx-1]
.text:00404725                 jmp     short loc_404700
.text:00404727 ; ---------------------------------------------------------------------------
.text:00404727
.text:00404727 loc_404727:                             ; CODE XREF: sub_4046D0+F↑j
.text:00404727                 add     ecx, 2
.text:0040472A                 movzx   eax, byte ptr [ecx]
.text:0040472D                 jmp     short loc_4046E1
.text:0040472D sub_4046D0      endp
.text:0040472D
.text:0040472D ; ---------------------------------------------------------------------------
.text:0040472F                 align 10h
.text:00404730
.text:00404730 ; =============== S U B R O U T I N E =======================================
.text:00404730
.text:00404730
.text:00404730 ; int __cdecl sub_404730(char *)
.text:00404730 sub_404730      proc near               ; CODE XREF: sub_402C00+18↑p
.text:00404730
.text:00404730 Str             = dword ptr -0Ch
.text:00404730 arg_0           = dword ptr  4
.text:00404730
.text:00404730                 push    ebx
.text:00404731                 sub     esp, 8
.text:00404734                 mov     ebx, [esp+0Ch+arg_0]
.text:00404738                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040473B                 call    strlen
.text:00404740                 cmp     eax, 1
.text:00404743                 jbe     short loc_404760
.text:00404745                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040474A                 cmp     dl, 2Fh ; '/'
.text:0040474D                 jz      short loc_404765
.text:0040474F                 cmp     dl, 5Ch ; '\'
.text:00404752                 jz      short loc_404765
.text:00404754                 lea     esi, [esi+0]
.text:0040475A                 lea     edi, [edi+0]
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_404730+13↑j
.text:00404760                                         ; sub_404730+39↓j ...
.text:00404760                 add     esp, 8
.text:00404763                 pop     ebx
.text:00404764                 retn
.text:00404765 ; ---------------------------------------------------------------------------
.text:00404765
.text:00404765 loc_404765:                             ; CODE XREF: sub_404730+1D↑j
.text:00404765                                         ; sub_404730+22↑j ...
.text:00404765                 dec     eax
.text:00404766                 cmp     eax, 1
.text:00404769                 jbe     short loc_404760
.text:0040476B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00404770                 cmp     dl, 2Fh ; '/'
.text:00404773                 jz      short loc_404765
.text:00404775                 cmp     dl, 5Ch ; '\'
.text:00404778                 jz      short loc_404765
.text:0040477A                 jmp     short loc_404760
.text:0040477A sub_404730      endp
.text:0040477A
.text:0040477A ; ---------------------------------------------------------------------------
.text:0040477C                 align 10h
.text:00404780 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00404780                                         ; DATA XREF: .data:Buffer↓o
.text:004047B2 ; const char Format[]
.text:004047B2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_404A70+50↓o
.text:004047BE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004047BE                                         ; DATA XREF: sub_404A70:loc_404B11↓o
.text:004047CE                 align 20h
.text:004047E0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004047E0                                         ; DATA XREF: sub_404A70+100↓o
.text:004047E0                 db 'ere is NO',0Ah
.text:004047E0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004047E0                 db 'R PURPOSE.',0Ah,0
.text:00404878 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00404878                                         ; DATA XREF: sub_404A70:loc_404BB1↓o
.text:0040488F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040488F                                         ; DATA XREF: sub_404A70:loc_404BBD↓o
.text:004048AB                 align 20h
.text:004048C0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004048C0                                         ; DATA XREF: sub_404A70:loc_404BC9↓o
.text:004048C0                 db 'and %s.',0Ah,0
.text:004048E0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004048E0                                         ; DATA XREF: sub_404A70:loc_404BD5↓o
.text:004048E0                 db '%s, and %s.',0Ah,0
.text:00404904                 align 20h
.text:00404920 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00404920                                         ; DATA XREF: sub_404A70:loc_404BE1↓o
.text:00404920                 db '%s, %s, and %s.',0Ah,0
.text:00404948                 align 20h
.text:00404960 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00404960                                         ; DATA XREF: sub_404A70:loc_404BED↓o
.text:00404960                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040498C                 align 20h
.text:004049A0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004049A0                                         ; DATA XREF: sub_404A70:loc_404BF9↓o
.text:004049A0                 db '%s, %s, %s, %s,',0Ah
.text:004049A0                 db 'and %s.',0Ah,0
.text:004049D0                 align 20h
.text:004049E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004049E0                                         ; DATA XREF: sub_404A70:loc_404C05↓o
.text:004049E0                 db '%s, %s, %s, %s,',0Ah
.text:004049E0                 db '%s, and %s.',0Ah,0
.text:00404A14                 align 10h
.text:00404A20 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00404A20                                         ; DATA XREF: sub_404A70:def_404ADD↓o
.text:00404A20                 db '%s, %s, %s, %s,',0Ah
.text:00404A20                 db '%s, %s, and others.',0Ah,0
.text:00404A5C ; const char aSS[]
.text:00404A5C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_404A70+1B5↓o
.text:00404A63                 align 10h
.text:00404A70
.text:00404A70 ; =============== S U B R O U T I N E =======================================
.text:00404A70
.text:00404A70
.text:00404A70 ; int __cdecl sub_404A70(FILE *, FILE *, int, int, va_list)
.text:00404A70 sub_404A70      proc near               ; CODE XREF: sub_402E90+A5↑p
.text:00404A70                                         ; .text:00404C6A↓p
.text:00404A70
.text:00404A70 Stream          = dword ptr -2Ch
.text:00404A70 Format          = dword ptr -28h
.text:00404A70 ArgList         = dword ptr -24h
.text:00404A70 var_20          = dword ptr -20h
.text:00404A70 var_1C          = dword ptr -1Ch
.text:00404A70 var_14          = dword ptr -14h
.text:00404A70 arg_0           = dword ptr  4
.text:00404A70 arg_4           = dword ptr  8
.text:00404A70 arg_8           = dword ptr  0Ch
.text:00404A70 arg_C           = dword ptr  10h
.text:00404A70 arg_10          = dword ptr  14h
.text:00404A70
.text:00404A70                 push    ebp
.text:00404A71                 push    edi
.text:00404A72                 push    esi
.text:00404A73                 push    ebx
.text:00404A74                 sub     esp, 1Ch
.text:00404A77                 xor     ebx, ebx
.text:00404A79                 mov     edi, [esp+2Ch+arg_10]
.text:00404A7D                 mov     edx, [esp+2Ch+arg_8]
.text:00404A81                 mov     esi, [esp+2Ch+arg_0]
.text:00404A85                 mov     eax, [edi]
.text:00404A87                 mov     ecx, [esp+2Ch+arg_4]
.text:00404A8B                 mov     [esp+2Ch+var_14], edx
.text:00404A8F                 mov     ebp, [esp+2Ch+arg_C]
.text:00404A93                 lea     edx, [edi+4]
.text:00404A96                 test    eax, eax
.text:00404A98                 jz      short loc_404AAC
.text:00404A9A                 lea     esi, [esi+0]
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: sub_404A70+3A↓j
.text:00404AA0                 mov     eax, edx
.text:00404AA2                 inc     ebx
.text:00404AA3                 mov     eax, [eax]
.text:00404AA5                 add     edx, 4
.text:00404AA8                 test    eax, eax
.text:00404AAA                 jnz     short loc_404AA0
.text:00404AAC
.text:00404AAC loc_404AAC:                             ; CODE XREF: sub_404A70+28↑j
.text:00404AAC                 test    ecx, ecx
.text:00404AAE                 jz      loc_404C1D
.text:00404AB4                 mov     [esp+2Ch+var_1C], ebp
.text:00404AB8                 mov     edx, [esp+2Ch+var_14]
.text:00404ABC                 mov     [esp+2Ch+ArgList], ecx
.text:00404AC0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00404AC8                 mov     [esp+2Ch+var_20], edx
.text:00404ACC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404ACF                 call    fprintf
.text:00404AD4
.text:00404AD4 loc_404AD4:                             ; CODE XREF: sub_404A70+1C9↓j
.text:00404AD4                 cmp     ebx, 9          ; switch 10 cases
.text:00404AD7                 ja      def_404ADD      ; jumptable 00404ADD default case
.text:00404ADD                 jmp     ds:jpt_404ADD[ebx*4] ; switch jump
.text:00404ADD ; ---------------------------------------------------------------------------
.text:00404AE4 jpt_404ADD      dd offset loc_404B0C    ; DATA XREF: sub_404A70+6D↑r
.text:00404AE4                 dd offset loc_404B11    ; jump table for switch statement
.text:00404AE4                 dd offset loc_404BB1
.text:00404AE4                 dd offset loc_404BBD
.text:00404AE4                 dd offset loc_404BC9
.text:00404AE4                 dd offset loc_404BD5
.text:00404AE4                 dd offset loc_404BE1
.text:00404AE4                 dd offset loc_404BED
.text:00404AE4                 dd offset loc_404BF9
.text:00404AE4                 dd offset loc_404C05
.text:00404B0C ; ---------------------------------------------------------------------------
.text:00404B0C
.text:00404B0C loc_404B0C:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404B0C                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404B0C                 call    abort           ; jumptable 00404ADD case 0
.text:00404B11 ; ---------------------------------------------------------------------------
.text:00404B11
.text:00404B11 loc_404B11:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404B11                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404B11                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00404ADD case 1
.text:00404B18                 nop
.text:00404B19                 lea     esi, [esi+0]
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: sub_404A70+148↓j
.text:00404B20                                         ; sub_404A70+154↓j ...
.text:00404B20                 call    ds:libintl_gettext
.text:00404B26                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00404B2A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404B2D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404B31                 call    vfprintf
.text:00404B36                 mov     ebx, [esi+4]
.text:00404B39                 dec     ebx
.text:00404B3A                 test    ebx, ebx
.text:00404B3C                 mov     [esi+4], ebx
.text:00404B3F                 js      short loc_404B9F
.text:00404B41                 mov     edi, [esi]
.text:00404B43                 mov     byte ptr [edi], 0Ah
.text:00404B46                 inc     dword ptr [esi]
.text:00404B48
.text:00404B48 loc_404B48:                             ; CODE XREF: sub_404A70+13F↓j
.text:00404B48                 mov     [esp+2Ch+Format], esi ; Stream
.text:00404B4C                 mov     edx, Buffer
.text:00404B52                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00404B55                 call    fputs
.text:00404B5A                 mov     ebp, [esi+4]
.text:00404B5D                 dec     ebp
.text:00404B5E                 test    ebp, ebp
.text:00404B60                 mov     [esi+4], ebp
.text:00404B63                 js      short loc_404B8D
.text:00404B65                 mov     ecx, [esi]
.text:00404B67                 mov     byte ptr [ecx], 0Ah
.text:00404B6A                 inc     dword ptr [esi]
.text:00404B6C
.text:00404B6C loc_404B6C:                             ; CODE XREF: sub_404A70+12D↓j
.text:00404B6C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00404B70                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00404B77                 call    ds:libintl_gettext
.text:00404B7D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00404B81                 add     esp, 1Ch
.text:00404B84                 pop     ebx
.text:00404B85                 pop     esi
.text:00404B86                 pop     edi
.text:00404B87                 pop     ebp
.text:00404B88                 jmp     fputs
.text:00404B8D ; ---------------------------------------------------------------------------
.text:00404B8D
.text:00404B8D loc_404B8D:                             ; CODE XREF: sub_404A70+F3↑j
.text:00404B8D                 mov     [esp+2Ch+Format], esi ; File
.text:00404B91                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404B98                 call    _flsbuf
.text:00404B9D                 jmp     short loc_404B6C
.text:00404B9F ; ---------------------------------------------------------------------------
.text:00404B9F
.text:00404B9F loc_404B9F:                             ; CODE XREF: sub_404A70+CF↑j
.text:00404B9F                 mov     [esp+2Ch+Format], esi ; File
.text:00404BA3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00404BAA                 call    _flsbuf
.text:00404BAF                 jmp     short loc_404B48
.text:00404BB1 ; ---------------------------------------------------------------------------
.text:00404BB1
.text:00404BB1 loc_404BB1:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404BB1                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404BB1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00404ADD case 2
.text:00404BB8                 jmp     loc_404B20
.text:00404BBD ; ---------------------------------------------------------------------------
.text:00404BBD
.text:00404BBD loc_404BBD:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404BBD                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404BBD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00404ADD case 3
.text:00404BC4                 jmp     loc_404B20
.text:00404BC9 ; ---------------------------------------------------------------------------
.text:00404BC9
.text:00404BC9 loc_404BC9:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404BC9                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404BC9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00404ADD case 4
.text:00404BD0                 jmp     loc_404B20
.text:00404BD5 ; ---------------------------------------------------------------------------
.text:00404BD5
.text:00404BD5 loc_404BD5:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404BD5                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404BD5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00404ADD case 5
.text:00404BDC                 jmp     loc_404B20
.text:00404BE1 ; ---------------------------------------------------------------------------
.text:00404BE1
.text:00404BE1 loc_404BE1:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404BE1                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404BE1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00404ADD case 6
.text:00404BE8                 jmp     loc_404B20
.text:00404BED ; ---------------------------------------------------------------------------
.text:00404BED
.text:00404BED loc_404BED:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404BED                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404BED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00404ADD case 7
.text:00404BF4                 jmp     loc_404B20
.text:00404BF9 ; ---------------------------------------------------------------------------
.text:00404BF9
.text:00404BF9 loc_404BF9:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404BF9                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404BF9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00404ADD case 8
.text:00404C00                 jmp     loc_404B20
.text:00404C05 ; ---------------------------------------------------------------------------
.text:00404C05
.text:00404C05 loc_404C05:                             ; CODE XREF: sub_404A70+6D↑j
.text:00404C05                                         ; DATA XREF: sub_404A70:jpt_404ADD↑o
.text:00404C05                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00404ADD case 9
.text:00404C0C                 jmp     loc_404B20
.text:00404C11 ; ---------------------------------------------------------------------------
.text:00404C11
.text:00404C11 def_404ADD:                             ; CODE XREF: sub_404A70+67↑j
.text:00404C11                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00404ADD default case
.text:00404C18                 jmp     loc_404B20
.text:00404C1D ; ---------------------------------------------------------------------------
.text:00404C1D
.text:00404C1D loc_404C1D:                             ; CODE XREF: sub_404A70+3E↑j
.text:00404C1D                 mov     [esp+2Ch+var_20], ebp
.text:00404C21                 mov     ecx, [esp+2Ch+var_14]
.text:00404C25                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00404C2D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404C30                 mov     [esp+2Ch+ArgList], ecx
.text:00404C34                 call    fprintf
.text:00404C39                 jmp     loc_404AD4
.text:00404C39 sub_404A70      endp
.text:00404C39
.text:00404C39 ; ---------------------------------------------------------------------------
.text:00404C3E                 align 10h
.text:00404C40                 sub     esp, 1Ch
.text:00404C43                 mov     edx, [esp+2Ch]
.text:00404C47                 lea     ecx, [esp+30h]
.text:00404C4B                 mov     [esp+10h], ecx
.text:00404C4F                 mov     ecx, [esp+28h]
.text:00404C53                 mov     [esp+0Ch], edx
.text:00404C57                 mov     edx, [esp+24h]
.text:00404C5B                 mov     [esp+8], ecx
.text:00404C5F                 mov     [esp+4], edx
.text:00404C63                 mov     edx, [esp+20h]
.text:00404C67                 mov     [esp], edx
.text:00404C6A                 call    sub_404A70
.text:00404C6F                 add     esp, 1Ch
.text:00404C72                 retn
.text:00404C72 ; ---------------------------------------------------------------------------
.text:00404C73                 align 10h
.text:00404C80 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404CA0+3↓o
.text:00404C91 ; const char aS[]
.text:00404C91 aS              db '%s',0               ; DATA XREF: sub_404CA0+10↓o
.text:00404C94                 align 10h
.text:00404CA0
.text:00404CA0 ; =============== S U B R O U T I N E =======================================
.text:00404CA0
.text:00404CA0 ; Attributes: noreturn
.text:00404CA0
.text:00404CA0 sub_404CA0      proc near               ; CODE XREF: sub_404230:loc_4043EF↑p
.text:00404CA0                                         ; sub_404400:loc_404439↑p ...
.text:00404CA0
.text:00404CA0 Code            = dword ptr -1Ch
.text:00404CA0 ErrorMessage    = dword ptr -18h
.text:00404CA0 var_14          = dword ptr -14h
.text:00404CA0 var_10          = byte ptr -10h
.text:00404CA0
.text:00404CA0                 sub     esp, 1Ch
.text:00404CA3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00404CAA                 call    ds:libintl_gettext
.text:00404CB0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404CB8                 mov     edx, Code
.text:00404CBE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404CC6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00404CCA                 mov     [esp+1Ch+Code], edx ; Code
.text:00404CCD                 call    sub_404D30
.text:00404CD2                 call    abort
.text:00404CD2 sub_404CA0      endp
.text:00404CD2
.text:00404CD2 ; ---------------------------------------------------------------------------
.text:00404CD7                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0 ; Attributes: thunk
.text:00404CE0
.text:00404CE0 libintl_bindtextdomain proc near
.text:00404CE0                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404CE0 libintl_bindtextdomain endp
.text:00404CE0
.text:00404CE0 ; ---------------------------------------------------------------------------
.text:00404CE6                 align 10h
.text:00404CF0                 jmp     ds:libintl_textdomain
.text:00404CF0 ; ---------------------------------------------------------------------------
.text:00404CF6                 align 10h
.text:00404D00                 jmp     ds:libintl_gettext
.text:00404D00 ; ---------------------------------------------------------------------------
.text:00404D06                 align 10h
.text:00404D10 ; const char aS_0[]
.text:00404D10 aS_0            db ': %s',0             ; DATA XREF: sub_404D30+B8↓o
.text:00404D10                                         ; sub_404E34+122↓o
.text:00404D15 aUnknownSystemE db 'Unknown system error',0
.text:00404D15                                         ; DATA XREF: sub_404D30:loc_404DFD↓o
.text:00404D15                                         ; sub_404E34:loc_404F6E↓o
.text:00404D2A ; const char aS_1[]
.text:00404D2A aS_1            db '%s: ',0             ; DATA XREF: sub_404D30:loc_404E04↓o
.text:00404D2F                 align 10h
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30
.text:00404D30 ; int __cdecl sub_404D30(int Code, int ErrorMessage, char *, char)
.text:00404D30 sub_404D30      proc near               ; CODE XREF: sub_401450+184↑p
.text:00404D30                                         ; sub_401450+231↑p ...
.text:00404D30
.text:00404D30 Stream          = dword ptr -1Ch
.text:00404D30 Format          = dword ptr -18h
.text:00404D30 ArgList         = dword ptr -14h
.text:00404D30 Code            = dword ptr  4
.text:00404D30 ErrorMessage    = dword ptr  8
.text:00404D30 arg_8           = dword ptr  0Ch
.text:00404D30 arg_C           = byte ptr  10h
.text:00404D30
.text:00404D30                 push    esi
.text:00404D31                 push    ebx
.text:00404D32                 sub     esp, 14h
.text:00404D35                 mov     edx, ds:_iob
.text:00404D3B                 mov     esi, [esp+1Ch+Code]
.text:00404D3F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404D43                 add     edx, 20h ; ' '
.text:00404D46                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404D49                 call    fflush
.text:00404D4E                 mov     eax, ds:dword_4071C0
.text:00404D53                 test    eax, eax
.text:00404D55                 jz      loc_404E04
.text:00404D5B                 call    eax ; dword_4071C0
.text:00404D5D
.text:00404D5D loc_404D5D:                             ; CODE XREF: sub_404D30+F7↓j
.text:00404D5D                 lea     edx, [esp+1Ch+arg_C]
.text:00404D61                 mov     ecx, [esp+1Ch+arg_8]
.text:00404D65                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404D69                 mov     edx, ds:_iob
.text:00404D6F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404D73                 add     edx, 40h ; '@'
.text:00404D76                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404D79                 call    vfprintf
.text:00404D7E                 inc     ds:dword_4071D0
.text:00404D84                 test    ebx, ebx
.text:00404D86                 jnz     short loc_404DD2
.text:00404D88
.text:00404D88 loc_404D88:                             ; CODE XREF: sub_404D30+CB↓j
.text:00404D88                 mov     edx, ds:_iob
.text:00404D8E                 lea     ecx, [edx+40h]
.text:00404D91                 mov     ebx, [ecx+4]
.text:00404D94                 dec     ebx
.text:00404D95                 test    ebx, ebx
.text:00404D97                 mov     [ecx+4], ebx
.text:00404D9A                 js      short loc_404DC0
.text:00404D9C                 mov     ecx, [edx+40h]
.text:00404D9F                 mov     byte ptr [ecx], 0Ah
.text:00404DA2                 inc     dword ptr [edx+40h]
.text:00404DA5
.text:00404DA5 loc_404DA5:                             ; CODE XREF: sub_404D30+A0↓j
.text:00404DA5                 mov     edx, ds:_iob
.text:00404DAB                 add     edx, 40h ; '@'
.text:00404DAE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404DB1                 call    fflush
.text:00404DB6                 test    esi, esi
.text:00404DB8                 jnz     short loc_404E2C
.text:00404DBA                 add     esp, 14h
.text:00404DBD                 pop     ebx
.text:00404DBE                 pop     esi
.text:00404DBF                 retn
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC0
.text:00404DC0 loc_404DC0:                             ; CODE XREF: sub_404D30+6A↑j
.text:00404DC0                 mov     [esp+1Ch+Format], ecx ; File
.text:00404DC4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404DCB                 call    _flsbuf
.text:00404DD0                 jmp     short loc_404DA5
.text:00404DD2 ; ---------------------------------------------------------------------------
.text:00404DD2
.text:00404DD2 loc_404DD2:                             ; CODE XREF: sub_404D30+56↑j
.text:00404DD2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404DD5                 call    strerror
.text:00404DDA                 test    eax, eax
.text:00404DDC                 jz      short loc_404DFD
.text:00404DDE
.text:00404DDE loc_404DDE:                             ; CODE XREF: sub_404D30+D2↓j
.text:00404DDE                 mov     [esp+1Ch+ArgList], eax
.text:00404DE2                 mov     ebx, ds:_iob
.text:00404DE8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404DF0                 add     ebx, 40h ; '@'
.text:00404DF3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404DF6                 call    fprintf
.text:00404DFB                 jmp     short loc_404D88
.text:00404DFD ; ---------------------------------------------------------------------------
.text:00404DFD
.text:00404DFD loc_404DFD:                             ; CODE XREF: sub_404D30+AC↑j
.text:00404DFD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404E02                 jmp     short loc_404DDE
.text:00404E04 ; ---------------------------------------------------------------------------
.text:00404E04
.text:00404E04 loc_404E04:                             ; CODE XREF: sub_404D30+25↑j
.text:00404E04                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:00404E0C                 mov     edx, ds:_iob
.text:00404E12                 mov     ecx, ds:dword_407190
.text:00404E18                 add     edx, 40h ; '@'
.text:00404E1B                 mov     [esp+1Ch+ArgList], ecx
.text:00404E1F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404E22                 call    fprintf
.text:00404E27                 jmp     loc_404D5D
.text:00404E2C ; ---------------------------------------------------------------------------
.text:00404E2C
.text:00404E2C loc_404E2C:                             ; CODE XREF: sub_404D30+88↑j
.text:00404E2C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404E2F                 call    exit
.text:00404E2F sub_404D30      endp
.text:00404E2F
.text:00404E34
.text:00404E34 ; =============== S U B R O U T I N E =======================================
.text:00404E34
.text:00404E34
.text:00404E34 ; int __cdecl sub_404E34(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404E34 sub_404E34      proc near               ; DATA XREF: sub_404E34+77↓o
.text:00404E34
.text:00404E34 Stream          = dword ptr -28h
.text:00404E34 Format          = dword ptr -24h
.text:00404E34 ArgList         = dword ptr -20h
.text:00404E34 var_1C          = dword ptr -1Ch
.text:00404E34 Code            = dword ptr  8
.text:00404E34 ErrorMessage    = dword ptr  0Ch
.text:00404E34 Str2            = dword ptr  10h
.text:00404E34 arg_10          = dword ptr  14h
.text:00404E34 arg_14          = dword ptr  18h
.text:00404E34 arg_18          = byte ptr  1Ch
.text:00404E34
.text:00404E34                 and     eax, 64253A73h
.text:00404E39                 cmp     ah, [eax]
.text:00404E3B
.text:00404E3B loc_404E3B:                             ; DATA XREF: sub_404E34:loc_404F75↓o
.text:00404E3B                 add     ds:55003A73h, ah
.text:00404E41                 push    edi
.text:00404E42                 push    esi
.text:00404E43                 push    ebx
.text:00404E44                 sub     esp, 1Ch
.text:00404E47                 mov     edx, ds:dword_407200
.text:00404E4D                 mov     ebp, [esp+28h+Code]
.text:00404E51                 mov     edi, [esp+28h+ErrorMessage]
.text:00404E55                 test    edx, edx
.text:00404E57                 mov     ebx, [esp+28h+Str2]
.text:00404E5B                 mov     esi, [esp+28h+arg_10]
.text:00404E5F                 jz      short loc_404E79
.text:00404E61                 cmp     ds:dword_407180, esi
.text:00404E67                 jz      loc_404FA0
.text:00404E6D
.text:00404E6D loc_404E6D:                             ; CODE XREF: sub_404E34+18D↓j
.text:00404E6D                 mov     ds:Str1, ebx
.text:00404E73                 mov     ds:dword_407180, esi
.text:00404E79
.text:00404E79 loc_404E79:                             ; CODE XREF: sub_404E34+2B↑j
.text:00404E79                 mov     edx, ds:_iob
.text:00404E7F                 add     edx, 20h ; ' '
.text:00404E82                 mov     [esp+28h+Stream], edx ; Stream
.text:00404E85                 call    fflush
.text:00404E8A                 mov     eax, ds:dword_4071C0
.text:00404E8F                 test    eax, eax
.text:00404E91                 jz      loc_404F75
.text:00404E97                 call    eax ; dword_4071C0
.text:00404E99
.text:00404E99 loc_404E99:                             ; CODE XREF: sub_404E34+164↓j
.text:00404E99                 test    ebx, ebx
.text:00404E9B                 jz      short loc_404EBE
.text:00404E9D                 mov     [esp+28h+ArgList], ebx
.text:00404EA1                 mov     ebx, ds:_iob
.text:00404EA7                 mov     [esp+28h+var_1C], esi
.text:00404EAB                 mov     [esp+28h+Format], offset sub_404E34 ; Format
.text:00404EB3                 add     ebx, 40h ; '@'
.text:00404EB6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404EB9                 call    fprintf
.text:00404EBE
.text:00404EBE loc_404EBE:                             ; CODE XREF: sub_404E34+67↑j
.text:00404EBE                 mov     esi, ds:_iob
.text:00404EC4                 lea     edx, [esp+28h+arg_18]
.text:00404EC8                 mov     ecx, [esp+28h+arg_14]
.text:00404ECC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404ED0                 add     esi, 40h ; '@'
.text:00404ED3                 mov     [esp+28h+Format], ecx ; Format
.text:00404ED7                 mov     [esp+28h+Stream], esi ; Stream
.text:00404EDA                 call    vfprintf
.text:00404EDF                 inc     ds:dword_4071D0
.text:00404EE5                 test    edi, edi
.text:00404EE7                 jnz     short loc_404F40
.text:00404EE9
.text:00404EE9 loc_404EE9:                             ; CODE XREF: sub_404E34+135↓j
.text:00404EE9                 mov     edx, ds:_iob
.text:00404EEF                 lea     ecx, [edx+40h]
.text:00404EF2                 mov     ebx, [ecx+4]
.text:00404EF5                 dec     ebx
.text:00404EF6                 test    ebx, ebx
.text:00404EF8                 mov     [ecx+4], ebx
.text:00404EFB                 js      short loc_404F27
.text:00404EFD                 mov     esi, [edx+40h]
.text:00404F00                 mov     byte ptr [esi], 0Ah
.text:00404F03                 inc     dword ptr [edx+40h]
.text:00404F06
.text:00404F06 loc_404F06:                             ; CODE XREF: sub_404E34+103↓j
.text:00404F06                 mov     ecx, ds:_iob
.text:00404F0C                 add     ecx, 40h ; '@'
.text:00404F0F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404F12                 call    fflush
.text:00404F17                 test    ebp, ebp
.text:00404F19                 jnz     loc_404FC6
.text:00404F1F
.text:00404F1F loc_404F1F:                             ; CODE XREF: sub_404E34+173↓j
.text:00404F1F                                         ; sub_404E34+187↓j
.text:00404F1F                 add     esp, 1Ch
.text:00404F22                 pop     ebx
.text:00404F23                 pop     esi
.text:00404F24                 pop     edi
.text:00404F25                 pop     ebp
.text:00404F26                 retn
.text:00404F27 ; ---------------------------------------------------------------------------
.text:00404F27
.text:00404F27 loc_404F27:                             ; CODE XREF: sub_404E34+C7↑j
.text:00404F27                 mov     [esp+28h+Format], ecx ; File
.text:00404F2B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404F32                 call    _flsbuf
.text:00404F37                 jmp     short loc_404F06
.text:00404F37 ; ---------------------------------------------------------------------------
.text:00404F39                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: sub_404E34+B3↑j
.text:00404F40                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404F43                 call    strerror
.text:00404F48                 test    eax, eax
.text:00404F4A                 jz      short loc_404F6E
.text:00404F4C
.text:00404F4C loc_404F4C:                             ; CODE XREF: sub_404E34+13F↓j
.text:00404F4C                 mov     [esp+28h+ArgList], eax
.text:00404F50                 mov     edi, ds:_iob
.text:00404F56                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404F5E                 add     edi, 40h ; '@'
.text:00404F61                 mov     [esp+28h+Stream], edi ; Stream
.text:00404F64                 call    fprintf
.text:00404F69                 jmp     loc_404EE9
.text:00404F6E ; ---------------------------------------------------------------------------
.text:00404F6E
.text:00404F6E loc_404F6E:                             ; CODE XREF: sub_404E34+116↑j
.text:00404F6E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404F73                 jmp     short loc_404F4C
.text:00404F75 ; ---------------------------------------------------------------------------
.text:00404F75
.text:00404F75 loc_404F75:                             ; CODE XREF: sub_404E34+5D↑j
.text:00404F75                 mov     [esp+28h+Format], (offset loc_404E3B+1) ; Format
.text:00404F7D                 mov     ecx, ds:_iob
.text:00404F83                 mov     edx, ds:dword_407190
.text:00404F89                 add     ecx, 40h ; '@'
.text:00404F8C                 mov     [esp+28h+ArgList], edx
.text:00404F90                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404F93                 call    fprintf
.text:00404F98                 jmp     loc_404E99
.text:00404F98 ; ---------------------------------------------------------------------------
.text:00404F9D                 align 10h
.text:00404FA0
.text:00404FA0 loc_404FA0:                             ; CODE XREF: sub_404E34+33↑j
.text:00404FA0                 mov     eax, ds:Str1
.text:00404FA5                 cmp     ebx, eax
.text:00404FA7                 jz      loc_404F1F
.text:00404FAD                 mov     [esp+28h+Format], ebx ; Str2
.text:00404FB1                 mov     [esp+28h+Stream], eax ; Str1
.text:00404FB4                 call    strcmp
.text:00404FB9                 test    eax, eax
.text:00404FBB                 jz      loc_404F1F
.text:00404FC1                 jmp     loc_404E6D
.text:00404FC6 ; ---------------------------------------------------------------------------
.text:00404FC6
.text:00404FC6 loc_404FC6:                             ; CODE XREF: sub_404E34+E5↑j
.text:00404FC6                 mov     [esp+28h+Stream], ebp ; Code
.text:00404FC9                 call    exit
.text:00404FC9 sub_404E34      endp ; sp-analysis failed
.text:00404FC9
.text:00404FC9 ; ---------------------------------------------------------------------------
.text:00404FCE                 align 10h
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0
.text:00404FD0 sub_404FD0      proc near               ; CODE XREF: sub_4050F0+152↓p
.text:00404FD0                                         ; .text:004052BB↓p
.text:00404FD0
.text:00404FD0 FileHandle      = dword ptr -2Ch
.text:00404FD0 Offset          = qword ptr -28h
.text:00404FD0 Origin          = dword ptr -20h
.text:00404FD0 nNumberOfBytesToUnlockHigh= dword ptr -1Ch
.text:00404FD0 hFile           = dword ptr -14h
.text:00404FD0 arg_0           = dword ptr  4
.text:00404FD0 arg_4           = dword ptr  8
.text:00404FD0 arg_8           = dword ptr  0Ch
.text:00404FD0
.text:00404FD0                 push    ebp
.text:00404FD1                 push    edi
.text:00404FD2                 push    esi
.text:00404FD3                 push    ebx
.text:00404FD4                 sub     esp, 1Ch
.text:00404FD7                 mov     ebp, [esp+2Ch+arg_8]
.text:00404FDB                 mov     edi, [esp+2Ch+arg_0]
.text:00404FDF                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00404FE2                 call    _get_osfhandle
.text:00404FE7                 movsx   edx, word ptr [ebp+2]
.text:00404FEB                 mov     [esp+2Ch+hFile], eax
.text:00404FEF                 mov     dword ptr [esp+2Ch+Offset], 0 ; Offset
.text:00404FF7                 mov     dword ptr [esp+2Ch+Offset+4], 0
.text:00404FFF                 mov     [esp+2Ch+Origin], edx ; Origin
.text:00405003                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:00405006                 call    _lseeki64
.text:0040500B                 mov     ebx, eax
.text:0040500D                 mov     esi, edx
.text:0040500F                 mov     edx, [ebp+14h]
.text:00405012                 add     ebx, [ebp+8]
.text:00405015                 mov     eax, [ebp+10h]
.text:00405018                 mov     ecx, edx
.text:0040501A                 adc     esi, [ebp+0Ch]
.text:0040501D                 or      ecx, eax
.text:0040501F                 jz      loc_4050E0
.text:00405025                 add     eax, ebx
.text:00405027                 adc     edx, esi
.text:00405029
.text:00405029 loc_405029:                             ; CODE XREF: sub_404FD0+118↓j
.text:00405029                 cmp     [esp+2Ch+arg_4], 7
.text:0040502E                 jz      loc_4050CE
.text:00405034                 cmp     [esp+2Ch+arg_4], 7
.text:00405039                 jl      short loc_405055
.text:0040503B                 cmp     [esp+2Ch+arg_4], 9
.text:00405040                 jg      short loc_405055
.text:00405042                 movsx   ecx, word ptr [ebp+0]
.text:00405046                 cmp     ecx, 1
.text:00405049                 jl      short loc_405055
.text:0040504B                 cmp     ecx, 2
.text:0040504E                 jle     short loc_4050B0
.text:00405050                 cmp     ecx, 3
.text:00405053                 jz      short loc_40506D
.text:00405055
.text:00405055 loc_405055:                             ; CODE XREF: sub_404FD0+69↑j
.text:00405055                                         ; sub_404FD0+70↑j ...
.text:00405055                 call    _errno
.text:0040505A                 mov     dword ptr [eax], 16h
.text:00405060
.text:00405060 loc_405060:                             ; CODE XREF: sub_404FD0+D9↓j
.text:00405060                                         ; sub_404FD0+109↓j
.text:00405060                 mov     eax, 0FFFFFFFFh
.text:00405065
.text:00405065 loc_405065:                             ; CODE XREF: sub_404FD0+C9↓j
.text:00405065                 add     esp, 1Ch
.text:00405068                 pop     ebx
.text:00405069                 pop     esi
.text:0040506A                 pop     edi
.text:0040506B                 pop     ebp
.text:0040506C                 retn
.text:0040506D ; ---------------------------------------------------------------------------
.text:0040506D
.text:0040506D loc_40506D:                             ; CODE XREF: sub_404FD0+83↑j
.text:0040506D                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToUnlockLow
.text:00405071                 mov     eax, [esp+2Ch+hFile]
.text:00405075                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:00405079                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:0040507D                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:00405081                 mov     [esp+2Ch+FileHandle], eax ; hFile
.text:00405084                 call    UnlockFile
.text:00405089                 lea     esi, [esi+0]
.text:00405090
.text:00405090 loc_405090:                             ; CODE XREF: sub_404FD0+FC↓j
.text:00405090                 mov     ecx, eax
.text:00405092                 sub     esp, 14h
.text:00405095                 xor     eax, eax
.text:00405097                 test    ecx, ecx
.text:00405099                 jnz     short loc_405065
.text:0040509B                 call    sub_405660
.text:004050A0                 mov     esi, eax
.text:004050A2                 call    _errno
.text:004050A7                 mov     [eax], esi
.text:004050A9                 jmp     short loc_405060
.text:004050A9 ; ---------------------------------------------------------------------------
.text:004050AB                 align 10h
.text:004050B0
.text:004050B0 loc_4050B0:                             ; CODE XREF: sub_404FD0+7E↑j
.text:004050B0                 mov     [esp+2Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToLockHigh
.text:004050B4                 mov     edx, [esp+2Ch+hFile]
.text:004050B8                 mov     dword ptr [esp+2Ch+Offset+4], esi ; dwFileOffsetHigh
.text:004050BC                 mov     dword ptr [esp+2Ch+Offset], ebx ; dwFileOffsetLow
.text:004050C0                 mov     [esp+2Ch+FileHandle], edx ; hFile
.text:004050C3                 mov     [esp+2Ch+Origin], eax ; nNumberOfBytesToLockLow
.text:004050C7                 call    LockFile
.text:004050CC                 jmp     short loc_405090
.text:004050CE ; ---------------------------------------------------------------------------
.text:004050CE
.text:004050CE loc_4050CE:                             ; CODE XREF: sub_404FD0+5E↑j
.text:004050CE                 call    _errno
.text:004050D3                 mov     dword ptr [eax], 28h ; '('
.text:004050D9                 jmp     short loc_405060
.text:004050D9 ; ---------------------------------------------------------------------------
.text:004050DB                 align 10h
.text:004050E0
.text:004050E0 loc_4050E0:                             ; CODE XREF: sub_404FD0+4F↑j
.text:004050E0                 mov     [esp+2Ch+FileHandle], edi ; FileHandle
.text:004050E3                 call    _filelengthi64
.text:004050E8                 jmp     loc_405029
.text:004050E8 sub_404FD0      endp
.text:004050E8
.text:004050E8 ; ---------------------------------------------------------------------------
.text:004050ED                 align 10h
.text:004050F0
.text:004050F0 ; =============== S U B R O U T I N E =======================================
.text:004050F0
.text:004050F0
.text:004050F0 sub_4050F0      proc near               ; CODE XREF: sub_402B20+27↑p
.text:004050F0                                         ; sub_402B20+4C↑p
.text:004050F0
.text:004050F0 FileHandle      = dword ptr -1Ch
.text:004050F0 var_18          = dword ptr -18h
.text:004050F0 var_14          = dword ptr -14h
.text:004050F0 var_4           = dword ptr -4
.text:004050F0 arg_0           = dword ptr  4
.text:004050F0 arg_4           = dword ptr  8
.text:004050F0 arg_8           = byte ptr  0Ch
.text:004050F0
.text:004050F0                 sub     esp, 1Ch
.text:004050F3                 mov     ecx, [esp+1Ch+arg_0]
.text:004050F7                 mov     [esp+1Ch+var_4], ebx
.text:004050FB                 mov     edx, [esp+1Ch+arg_4]
.text:004050FF                 test    ecx, ecx
.text:00405101                 js      loc_405259
.text:00405107                 cmp     edx, 9          ; switch 10 cases
.text:0040510A                 lea     eax, [esp+1Ch+arg_8]
.text:0040510E                 ja      def_405114      ; jumptable 00405114 default case
.text:00405114                 jmp     ds:jpt_405114[edx*4] ; switch jump
.text:00405114 ; ---------------------------------------------------------------------------
.text:0040511B                 align 4
.text:0040511C jpt_405114      dd offset loc_405144    ; DATA XREF: sub_4050F0+24↑r
.text:0040511C                 dd offset loc_405158    ; jump table for switch statement
.text:0040511C                 dd offset loc_405178
.text:0040511C                 dd offset loc_4051A0
.text:0040511C                 dd offset loc_4051E8
.text:0040511C                 dd offset loc_405220
.text:0040511C                 dd offset loc_405220
.text:0040511C                 dd offset loc_405220
.text:0040511C                 dd offset loc_405235
.text:0040511C                 dd offset loc_405235
.text:00405144 ; ---------------------------------------------------------------------------
.text:00405144
.text:00405144 loc_405144:                             ; CODE XREF: sub_4050F0+24↑j
.text:00405144                                         ; DATA XREF: sub_4050F0:jpt_405114↑o
.text:00405144                 mov     [esp+1Ch+FileHandle], ecx ; jumptable 00405114 case 0
.text:00405147                 call    _dup
.text:0040514C                 lea     esi, [esi+0]
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: sub_4050F0+86↓j
.text:00405150                                         ; sub_4050F0+AC↓j ...
.text:00405150                 mov     ebx, [esp+1Ch+var_4]
.text:00405154                 add     esp, 1Ch
.text:00405157                 retn
.text:00405158 ; ---------------------------------------------------------------------------
.text:00405158
.text:00405158 loc_405158:                             ; CODE XREF: sub_4050F0+24↑j
.text:00405158                                         ; DATA XREF: sub_4050F0:jpt_405114↑o
.text:00405158                 mov     eax, ds:__pioinfo ; jumptable 00405114 case 1
.text:0040515D                 mov     edx, ecx
.text:0040515F                 sar     edx, 5
.text:00405162                 and     ecx, 1Fh
.text:00405165                 mov     ebx, [eax+edx*4]
.text:00405168                 lea     eax, [ecx+ecx*8]
.text:0040516B                 test    byte ptr [ebx+eax*4+4], 10h
.text:00405170                 setnz   dl
.text:00405173                 movzx   eax, dl
.text:00405176                 jmp     short loc_405150
.text:00405178 ; ---------------------------------------------------------------------------
.text:00405178
.text:00405178 loc_405178:                             ; CODE XREF: sub_4050F0+24↑j
.text:00405178                                         ; DATA XREF: sub_4050F0:jpt_405114↑o
.text:00405178                 test    bl, 1           ; jumptable 00405114 case 2
.text:0040517B                 jz      short loc_405183
.text:0040517D                 and     ebx, 0FFFFFFFEh
.text:00405180                 or      ebx, 10h
.text:00405183
.text:00405183 loc_405183:                             ; CODE XREF: sub_4050F0+8B↑j
.text:00405183                 mov     eax, ds:__pioinfo
.text:00405188                 mov     edx, ecx
.text:0040518A                 sar     edx, 5
.text:0040518D                 and     ecx, 1Fh
.text:00405190                 mov     edx, [eax+edx*4]
.text:00405193                 lea     eax, [ecx+ecx*8]
.text:00405196                 mov     [edx+eax*4+4], bl
.text:0040519A
.text:0040519A loc_40519A:                             ; CODE XREF: sub_4050F0+121↓j
.text:0040519A                 xor     eax, eax
.text:0040519C                 jmp     short loc_405150
.text:0040519C ; ---------------------------------------------------------------------------
.text:0040519E                 align 10h
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_4050F0+24↑j
.text:004051A0                                         ; DATA XREF: sub_4050F0:jpt_405114↑o
.text:004051A0                 mov     eax, ds:__pioinfo ; jumptable 00405114 case 3
.text:004051A5                 mov     ebx, ecx
.text:004051A7                 sar     ebx, 5
.text:004051AA                 and     ecx, 1Fh
.text:004051AD                 mov     edx, [eax+ebx*4]
.text:004051B0                 lea     ebx, [ecx+ecx*8]
.text:004051B3                 movsx   eax, byte ptr [edx+ebx*4+4]
.text:004051B8                 xor     edx, edx
.text:004051BA                 test    al, 1
.text:004051BC                 jz      short loc_4051C7
.text:004051BE                 mov     edx, 2
.text:004051C3
.text:004051C3 loc_4051C3:                             ; CODE XREF: sub_4050F0+E0↓j
.text:004051C3                                         ; sub_4050F0+EB↓j ...
.text:004051C3                 mov     eax, edx
.text:004051C5                 jmp     short loc_405150
.text:004051C7 ; ---------------------------------------------------------------------------
.text:004051C7
.text:004051C7 loc_4051C7:                             ; CODE XREF: sub_4050F0+CC↑j
.text:004051C7                 test    al, 20h
.text:004051C9                 jz      short loc_4051D2
.text:004051CB                 mov     edx, 8
.text:004051D0                 jmp     short loc_4051C3
.text:004051D2 ; ---------------------------------------------------------------------------
.text:004051D2
.text:004051D2 loc_4051D2:                             ; CODE XREF: sub_4050F0+D9↑j
.text:004051D2                 test    al, 10h
.text:004051D4                 jz      short loc_4051DD
.text:004051D6                 mov     edx, 80h ; '€'
.text:004051DB                 jmp     short loc_4051C3
.text:004051DD ; ---------------------------------------------------------------------------
.text:004051DD
.text:004051DD loc_4051DD:                             ; CODE XREF: sub_4050F0+E4↑j
.text:004051DD                 test    al, al
.text:004051DF                 jns     short loc_4051C3
.text:004051E1                 mov     edx, 4000h
.text:004051E6                 jmp     short loc_4051C3
.text:004051E8 ; ---------------------------------------------------------------------------
.text:004051E8
.text:004051E8 loc_4051E8:                             ; CODE XREF: sub_4050F0+24↑j
.text:004051E8                                         ; DATA XREF: sub_4050F0:jpt_405114↑o
.text:004051E8                 mov     edx, ds:__pioinfo ; jumptable 00405114 case 4
.text:004051EE                 mov     ebx, [eax]
.text:004051F0                 mov     eax, ecx
.text:004051F2                 sar     eax, 5
.text:004051F5                 and     ecx, 1Fh
.text:004051F8                 mov     edx, [edx+eax*4]
.text:004051FB                 lea     eax, [ecx+ecx*8]
.text:004051FE                 shl     eax, 2
.text:00405201                 xor     ecx, ecx
.text:00405203                 test    bl, 8
.text:00405206                 jz      short loc_405213
.text:00405208                 mov     ecx, 20h ; ' '
.text:0040520D
.text:0040520D loc_40520D:                             ; CODE XREF: sub_4050F0+126↓j
.text:0040520D                                         ; sub_4050F0+12D↓j
.text:0040520D                 mov     [edx+eax+4], cl
.text:00405211                 jmp     short loc_40519A
.text:00405213 ; ---------------------------------------------------------------------------
.text:00405213
.text:00405213 loc_405213:                             ; CODE XREF: sub_4050F0+116↑j
.text:00405213                 test    bh, 40h
.text:00405216                 jz      short loc_40520D
.text:00405218                 mov     ecx, 80h ; '€'
.text:0040521D                 jmp     short loc_40520D
.text:0040521D ; ---------------------------------------------------------------------------
.text:0040521F                 align 10h
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: sub_4050F0+24↑j
.text:00405220                                         ; DATA XREF: sub_4050F0:jpt_405114↑o
.text:00405220                 call    _errno          ; jumptable 00405114 cases 5-7
.text:00405225                 mov     dword ptr [eax], 28h ; '('
.text:0040522B
.text:0040522B loc_40522B:                             ; CODE XREF: sub_4050F0+167↓j
.text:0040522B                                         ; sub_4050F0+174↓j
.text:0040522B                 mov     eax, 0FFFFFFFFh
.text:00405230                 jmp     loc_405150
.text:00405235 ; ---------------------------------------------------------------------------
.text:00405235
.text:00405235 loc_405235:                             ; CODE XREF: sub_4050F0+24↑j
.text:00405235                                         ; DATA XREF: sub_4050F0:jpt_405114↑o
.text:00405235                 mov     ebx, [eax]      ; jumptable 00405114 cases 8,9
.text:00405237                 mov     [esp+1Ch+var_18], edx
.text:0040523B                 mov     [esp+1Ch+FileHandle], ecx
.text:0040523E                 mov     [esp+1Ch+var_14], ebx
.text:00405242                 call    sub_404FD0
.text:00405247                 jmp     loc_405150
.text:0040524C ; ---------------------------------------------------------------------------
.text:0040524C
.text:0040524C def_405114:                             ; CODE XREF: sub_4050F0+1E↑j
.text:0040524C                 call    _errno          ; jumptable 00405114 default case
.text:00405251                 mov     dword ptr [eax], 16h
.text:00405257                 jmp     short loc_40522B
.text:00405259 ; ---------------------------------------------------------------------------
.text:00405259
.text:00405259 loc_405259:                             ; CODE XREF: sub_4050F0+11↑j
.text:00405259                 call    _errno
.text:0040525E                 mov     dword ptr [eax], 9
.text:00405264                 jmp     short loc_40522B
.text:00405264 sub_4050F0      endp
.text:00405264
.text:00405264 ; ---------------------------------------------------------------------------
.text:00405266                 align 10h
.text:00405270                 sub     esp, 3Ch
.text:00405273                 mov     edx, [esp+48h]
.text:00405277                 mov     eax, [edx+4]
.text:0040527A                 movzx   ecx, word ptr [edx]
.text:0040527D                 mov     [esp+18h], eax
.text:00405281                 mov     [esp+10h], cx
.text:00405286                 movzx   ecx, word ptr [edx+2]
.text:0040528A                 mov     [esp+12h], cx
.text:0040528F                 mov     ecx, eax
.text:00405291                 mov     eax, [edx+8]
.text:00405294                 sar     ecx, 1Fh
.text:00405297                 mov     [esp+1Ch], ecx
.text:0040529B                 cdq
.text:0040529C                 lea     ecx, [esp+10h]
.text:004052A0                 mov     [esp+24h], edx
.text:004052A4                 mov     edx, [esp+44h]
.text:004052A8                 mov     [esp+20h], eax
.text:004052AC                 mov     [esp+8], ecx
.text:004052B0                 mov     [esp+4], edx
.text:004052B4                 mov     edx, [esp+40h]
.text:004052B8                 mov     [esp], edx
.text:004052BB                 call    sub_404FD0
.text:004052C0                 add     esp, 3Ch
.text:004052C3                 retn
.text:004052C3 ; ---------------------------------------------------------------------------
.text:004052C4                 align 10h
.text:004052D0                 mov     edx, [esp+4]
.text:004052D4                 xor     eax, eax
.text:004052D6                 test    dl, 1
.text:004052D9                 jz      short loc_4052E1
.text:004052DB                 mov     eax, 2
.text:004052E0                 retn
.text:004052E1 ; ---------------------------------------------------------------------------
.text:004052E1
.text:004052E1 loc_4052E1:                             ; CODE XREF: .text:004052D9↑j
.text:004052E1                 test    dl, 20h
.text:004052E4                 jz      short loc_4052F0
.text:004052E6                 mov     eax, 8
.text:004052EB                 retn
.text:004052EB ; ---------------------------------------------------------------------------
.text:004052EC                 align 10h
.text:004052F0
.text:004052F0 loc_4052F0:                             ; CODE XREF: .text:004052E4↑j
.text:004052F0                 test    dl, 10h
.text:004052F3                 jz      short loc_405300
.text:004052F5                 mov     eax, 80h ; '€'
.text:004052FA                 retn
.text:004052FA ; ---------------------------------------------------------------------------
.text:004052FB                 align 10h
.text:00405300
.text:00405300 loc_405300:                             ; CODE XREF: .text:004052F3↑j
.text:00405300                 test    dl, dl
.text:00405302                 jns     short locret_405309
.text:00405304                 mov     eax, 4000h
.text:00405309
.text:00405309 locret_405309:                          ; CODE XREF: .text:00405302↑j
.text:00405309                 retn
.text:00405309 ; ---------------------------------------------------------------------------
.text:0040530A                 align 10h
.text:00405310                 mov     edx, [esp+4]
.text:00405314                 xor     eax, eax
.text:00405316                 test    dl, 8
.text:00405319                 jz      short loc_405321
.text:0040531B                 mov     eax, 20h ; ' '
.text:00405320                 retn
.text:00405321 ; ---------------------------------------------------------------------------
.text:00405321
.text:00405321 loc_405321:                             ; CODE XREF: .text:00405319↑j
.text:00405321                 test    dh, 40h
.text:00405324                 jz      short locret_40532B
.text:00405326                 mov     eax, 80h ; '€'
.text:0040532B
.text:0040532B locret_40532B:                          ; CODE XREF: .text:00405324↑j
.text:0040532B                 retn
.text:0040532B ; ---------------------------------------------------------------------------
.text:0040532C                 align 10h
.text:00405330
.text:00405330 ; =============== S U B R O U T I N E =======================================
.text:00405330
.text:00405330
.text:00405330 sub_405330      proc near               ; CODE XREF: sub_402C00+97↑p
.text:00405330                                         ; sub_402C00+BF↑p
.text:00405330
.text:00405330 var_1C          = dword ptr -1Ch
.text:00405330 var_18          = dword ptr -18h
.text:00405330 var_14          = dword ptr -14h
.text:00405330 arg_0           = dword ptr  4
.text:00405330 arg_4           = dword ptr  8
.text:00405330 arg_8           = dword ptr  0Ch
.text:00405330
.text:00405330                 push    edi
.text:00405331                 push    esi
.text:00405332                 push    ebx
.text:00405333                 sub     esp, 10h
.text:00405336                 mov     edi, [esp+1Ch+arg_8]
.text:0040533A                 mov     esi, [esp+1Ch+arg_0]
.text:0040533E                 mov     ebx, [esp+1Ch+arg_4]
.text:00405342                 cmp     edi, 0Fh
.text:00405345                 jbe     short loc_405390
.text:00405347                 mov     ecx, esi
.text:00405349                 neg     ecx
.text:0040534B                 and     ecx, 3
.text:0040534E                 sub     edi, ecx
.text:00405350                 mov     edx, ecx
.text:00405352                 test    ecx, ecx
.text:00405354                 jz      short loc_40536A
.text:00405356                 lea     esi, [esi+0]
.text:00405359                 lea     edi, [edi+0]
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: sub_405330+38↓j
.text:00405360                 movzx   ecx, byte ptr [ebx]
.text:00405363                 inc     ebx
.text:00405364                 mov     [esi], cl
.text:00405366                 inc     esi
.text:00405367                 dec     edx
.text:00405368                 jnz     short loc_405360
.text:0040536A
.text:0040536A loc_40536A:                             ; CODE XREF: sub_405330+24↑j
.text:0040536A                 test    bl, 3
.text:0040536D                 jnz     short loc_4053B3
.text:0040536F                 mov     [esp+1Ch+var_18], ebx
.text:00405373                 mov     edx, edi
.text:00405375                 shr     edx, 2
.text:00405378                 mov     [esp+1Ch+var_14], edx
.text:0040537C                 mov     [esp+1Ch+var_1C], esi
.text:0040537F                 call    sub_405680
.text:00405384
.text:00405384 loc_405384:                             ; CODE XREF: sub_405330+98↓j
.text:00405384                 mov     edx, edi
.text:00405386                 and     edx, 0FFFFFFFCh
.text:00405389                 and     edi, 3
.text:0040538C                 add     ebx, edx
.text:0040538E                 add     esi, edx
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: sub_405330+15↑j
.text:00405390                 test    edi, edi
.text:00405392                 mov     edx, edi
.text:00405394                 jz      short loc_4053AA
.text:00405396                 lea     esi, [esi+0]
.text:00405399                 lea     edi, [edi+0]
.text:004053A0
.text:004053A0 loc_4053A0:                             ; CODE XREF: sub_405330+78↓j
.text:004053A0                 movzx   ecx, byte ptr [ebx]
.text:004053A3                 inc     ebx
.text:004053A4                 mov     [esi], cl
.text:004053A6                 inc     esi
.text:004053A7                 dec     edx
.text:004053A8                 jnz     short loc_4053A0
.text:004053AA
.text:004053AA loc_4053AA:                             ; CODE XREF: sub_405330+64↑j
.text:004053AA                 add     esp, 10h
.text:004053AD                 mov     eax, esi
.text:004053AF                 pop     ebx
.text:004053B0                 pop     esi
.text:004053B1                 pop     edi
.text:004053B2                 retn
.text:004053B3 ; ---------------------------------------------------------------------------
.text:004053B3
.text:004053B3 loc_4053B3:                             ; CODE XREF: sub_405330+3D↑j
.text:004053B3                 mov     [esp+1Ch+var_18], ebx
.text:004053B7                 mov     ecx, edi
.text:004053B9                 shr     ecx, 2
.text:004053BC                 mov     [esp+1Ch+var_14], ecx
.text:004053C0                 mov     [esp+1Ch+var_1C], esi
.text:004053C3                 call    sub_405780
.text:004053C8                 jmp     short loc_405384
.text:004053C8 sub_405330      endp
.text:004053C8
.text:004053C8 ; ---------------------------------------------------------------------------
.text:004053CA                 align 10h
.text:004053D0
.text:004053D0 ; =============== S U B R O U T I N E =======================================
.text:004053D0
.text:004053D0 ; Attributes: info_from_lumina
.text:004053D0
.text:004053D0 ___get_errno    proc near               ; CODE XREF: sub_405660+B↓p
.text:004053D0
.text:004053D0 arg_0           = dword ptr  4
.text:004053D0
.text:004053D0                 mov     eax, [esp+arg_0]
.text:004053D4                 cmp     eax, 53h ; 'S'
.text:004053D7                 jg      loc_4054D0
.text:004053DD                 cmp     eax, 52h ; 'R'
.text:004053E0                 jge     short loc_405432
.text:004053E2                 cmp     eax, 0Fh
.text:004053E5                 jz      short loc_405400
.text:004053E7                 cmp     eax, 0Fh
.text:004053EA                 jg      short loc_405460
.text:004053EC                 cmp     eax, 9
.text:004053EF                 jg      short loc_405440
.text:004053F1                 cmp     eax, 7
.text:004053F4                 jge     short loc_405439
.text:004053F6                 cmp     eax, 3
.text:004053F9                 jg      short loc_40541A
.text:004053FB                 cmp     eax, 2
.text:004053FE                 jl      short loc_405413
.text:00405400
.text:00405400 loc_405400:                             ; CODE XREF: ___get_errno+15↑j
.text:00405400                                         ; ___get_errno+9D↓j ...
.text:00405400                 mov     edx, 2
.text:00405405                 lea     esi, [esi+0]
.text:00405409                 lea     edi, [edi+0]
.text:00405410
.text:00405410 loc_405410:                             ; CODE XREF: ___get_errno+48↓j
.text:00405410                                         ; ___get_errno+59↓j ...
.text:00405410                 mov     eax, edx
.text:00405412                 retn
.text:00405413 ; ---------------------------------------------------------------------------
.text:00405413
.text:00405413 loc_405413:                             ; CODE XREF: ___get_errno+2E↑j
.text:00405413                                         ; ___get_errno+78↓j ...
.text:00405413                 mov     edx, 16h
.text:00405418                 jmp     short loc_405410
.text:0040541A ; ---------------------------------------------------------------------------
.text:0040541A
.text:0040541A loc_40541A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040541A                 cmp     eax, 5
.text:0040541D                 jz      short loc_405432
.text:0040541F                 cmp     eax, 5
.text:00405422                 jg      short loc_40542B
.text:00405424                 mov     edx, 18h
.text:00405429                 jmp     short loc_405410
.text:0040542B ; ---------------------------------------------------------------------------
.text:0040542B
.text:0040542B loc_40542B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040542B                                         ; ___get_errno+180↓j
.text:0040542B                 mov     edx, 9
.text:00405430                 jmp     short loc_405410
.text:00405432 ; ---------------------------------------------------------------------------
.text:00405432
.text:00405432 loc_405432:                             ; CODE XREF: ___get_errno+10↑j
.text:00405432                                         ; ___get_errno+4D↑j ...
.text:00405432                 mov     edx, 0Dh
.text:00405437                 jmp     short loc_405410
.text:00405439 ; ---------------------------------------------------------------------------
.text:00405439
.text:00405439 loc_405439:                             ; CODE XREF: ___get_errno+24↑j
.text:00405439                                         ; ___get_errno+73↓j ...
.text:00405439                 mov     edx, 0Ch
.text:0040543E                 jmp     short loc_405410
.text:00405440 ; ---------------------------------------------------------------------------
.text:00405440
.text:00405440 loc_405440:                             ; CODE XREF: ___get_errno+1F↑j
.text:00405440                 cmp     eax, 0Dh
.text:00405443                 jg      short loc_405439
.text:00405445                 cmp     eax, 0Ch
.text:00405448                 jge     short loc_405413
.text:0040544A                 cmp     eax, 0Ah
.text:0040544D                 mov     edx, 7
.text:00405452                 jz      short loc_405410
.text:00405454                 cmp     eax, 0Bh
.text:00405457                 jnz     short loc_405413
.text:00405459
.text:00405459 loc_405459:                             ; CODE XREF: ___get_errno+21A↓j
.text:00405459                 mov     edx, 8
.text:0040545E                 jmp     short loc_405410
.text:00405460 ; ---------------------------------------------------------------------------
.text:00405460
.text:00405460 loc_405460:                             ; CODE XREF: ___get_errno+1A↑j
.text:00405460                 cmp     eax, 22h ; '"'
.text:00405463                 jg      short loc_405494
.text:00405465                 cmp     eax, 16h
.text:00405468                 jge     short loc_405432
.text:0040546A                 cmp     eax, 12h
.text:0040546D                 jz      short loc_405400
.text:0040546F                 cmp     eax, 12h
.text:00405472                 jg      short loc_405485
.text:00405474                 cmp     eax, 10h
.text:00405477                 jz      short loc_405432
.text:00405479                 mov     edx, 12h
.text:0040547E                 cmp     eax, 11h
.text:00405481
.text:00405481 loc_405481:                             ; CODE XREF: ___get_errno+172↓j
.text:00405481                                         ; ___get_errno+24C↓j ...
.text:00405481                 jnz     short loc_405413
.text:00405483                 jmp     short loc_405410
.text:00405485 ; ---------------------------------------------------------------------------
.text:00405485
.text:00405485 loc_405485:                             ; CODE XREF: ___get_errno+A2↑j
.text:00405485                 cmp     eax, 14h
.text:00405488                 jle     short loc_405432
.text:0040548A
.text:0040548A loc_40548A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040548A                 mov     edx, 10h
.text:0040548F                 jmp     loc_405410
.text:00405494 ; ---------------------------------------------------------------------------
.text:00405494
.text:00405494 loc_405494:                             ; CODE XREF: ___get_errno+93↑j
.text:00405494                 cmp     eax, 41h ; 'A'
.text:00405497                 jz      short loc_405432
.text:00405499                 cmp     eax, 41h ; 'A'
.text:0040549C                 jg      short loc_4054B1
.text:0040549E                 cmp     eax, 24h ; '$'
.text:004054A1                 jz      short loc_405432
.text:004054A3                 cmp     eax, 35h ; '5'
.text:004054A6                 jnz     loc_405413
.text:004054AC                 jmp     loc_405400
.text:004054B1 ; ---------------------------------------------------------------------------
.text:004054B1
.text:004054B1 loc_4054B1:                             ; CODE XREF: ___get_errno+CC↑j
.text:004054B1                 cmp     eax, 43h ; 'C'
.text:004054B4                 jz      loc_405400
.text:004054BA                 cmp     eax, 50h ; 'P'
.text:004054BD                 jnz     loc_405413
.text:004054C3
.text:004054C3 loc_4054C3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004054C3                 mov     edx, 11h
.text:004054C8                 jmp     loc_405410
.text:004054C8 ; ---------------------------------------------------------------------------
.text:004054CD                 align 10h
.text:004054D0
.text:004054D0 loc_4054D0:                             ; CODE XREF: ___get_errno+7↑j
.text:004054D0                 cmp     eax, 0A1h ; '¡'
.text:004054D5                 jz      loc_405400
.text:004054DB                 cmp     eax, 0A1h ; '¡'
.text:004054E0                 jg      loc_405590
.text:004054E6                 cmp     eax, 81h
.text:004054EB                 jg      short loc_405555
.text:004054ED                 cmp     eax, 80h ; '€'
.text:004054F2                 mov     edx, 0Ah
.text:004054F7                 jge     loc_405410
.text:004054FD                 cmp     eax, 6Ch ; 'l'
.text:00405500                 jz      loc_405432
.text:00405506                 cmp     eax, 6Ch ; 'l'
.text:00405509                 jg      short loc_405527
.text:0040550B                 cmp     eax, 57h ; 'W'
.text:0040550E                 jz      loc_405413
.text:00405514                 cmp     eax, 59h ; 'Y'
.text:00405517                 jnz     loc_405413
.text:0040551D
.text:0040551D loc_40551D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040551D                                         ; ___get_errno+23C↓j
.text:0040551D                 mov     edx, 0Bh
.text:00405522                 jmp     loc_405410
.text:00405527 ; ---------------------------------------------------------------------------
.text:00405527
.text:00405527 loc_405527:                             ; CODE XREF: ___get_errno+139↑j
.text:00405527                 cmp     eax, 70h ; 'p'
.text:0040552A                 mov     edx, 1Ch
.text:0040552F                 jz      loc_405410
.text:00405535                 cmp     eax, 70h ; 'p'
.text:00405538                 jg      short loc_405547
.text:0040553A                 mov     edx, 20h ; ' '
.text:0040553F                 cmp     eax, 6Dh ; 'm'
.text:00405542                 jmp     loc_405481
.text:00405547 ; ---------------------------------------------------------------------------
.text:00405547
.text:00405547 loc_405547:                             ; CODE XREF: ___get_errno+168↑j
.text:00405547                 cmp     eax, 72h ; 'r'
.text:0040554A
.text:0040554A loc_40554A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040554A                 jnz     loc_405413
.text:00405550                 jmp     loc_40542B
.text:00405555 ; ---------------------------------------------------------------------------
.text:00405555
.text:00405555 loc_405555:                             ; CODE XREF: ___get_errno+11B↑j
.text:00405555                 cmp     eax, 84h ; '„'
.text:0040555A                 jz      loc_405432
.text:00405560                 cmp     eax, 84h ; '„'
.text:00405565                 jg      short loc_40556E
.text:00405567                 cmp     eax, 82h ; '‚'
.text:0040556C                 jmp     short loc_40554A
.text:0040556E ; ---------------------------------------------------------------------------
.text:0040556E
.text:0040556E loc_40556E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040556E                 cmp     eax, 91h ; '‘'
.text:00405573                 mov     edx, 29h ; ')'
.text:00405578                 jz      loc_405410
.text:0040557E                 cmp     eax, 9Eh ; 'ž'
.text:00405583
.text:00405583 loc_405583:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00405583                 jnz     loc_405413
.text:00405589                 jmp     loc_405432
.text:00405589 ; ---------------------------------------------------------------------------
.text:0040558E                 align 10h
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: ___get_errno+110↑j
.text:00405590                 cmp     eax, 0CEh ; 'Î'
.text:00405595                 jz      loc_405400
.text:0040559B                 cmp     eax, 0CEh ; 'Î'
.text:004055A0                 jg      short loc_4055F0
.text:004055A2                 cmp     eax, 0AAh ; 'ª'
.text:004055A7                 jz      loc_40548A
.text:004055AD                 cmp     eax, 0AAh ; 'ª'
.text:004055B2                 jg      short loc_4055C6
.text:004055B4                 cmp     eax, 0A4h ; '¤'
.text:004055B9                 jz      loc_40551D
.text:004055BF                 cmp     eax, 0A7h ; '§'
.text:004055C4                 jmp     short loc_405583
.text:004055C6 ; ---------------------------------------------------------------------------
.text:004055C6
.text:004055C6 loc_4055C6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004055C6                 cmp     eax, 0B7h ; '·'
.text:004055CB                 jz      loc_4054C3
.text:004055D1                 cmp     eax, 0B7h ; '·'
.text:004055D6                 jl      loc_405413
.text:004055DC                 sub     eax, 0BCh ; '¼'
.text:004055E1                 cmp     eax, 0Eh
.text:004055E4                 ja      loc_405413
.text:004055EA                 jmp     loc_405459
.text:004055EA ; ---------------------------------------------------------------------------
.text:004055EF                 align 10h
.text:004055F0
.text:004055F0 loc_4055F0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:004055F0                 cmp     eax, 46Bh
.text:004055F5                 mov     edx, 24h ; '$'
.text:004055FA                 jz      loc_405410
.text:00405600                 cmp     eax, 46Bh
.text:00405605                 jg      short loc_405621
.text:00405607                 cmp     eax, 0D7h ; '×'
.text:0040560C                 jz      loc_40551D
.text:00405612                 mov     edx, 5
.text:00405617                 cmp     eax, 45Dh
.text:0040561C                 jmp     loc_405481
.text:00405621 ; ---------------------------------------------------------------------------
.text:00405621
.text:00405621 loc_405621:                             ; CODE XREF: ___get_errno+235↑j
.text:00405621                 cmp     eax, 4D5h
.text:00405626                 mov     edx, 4
.text:0040562B                 jz      loc_405410
.text:00405631                 cmp     eax, 4D5h
.text:00405636                 jg      short loc_405647
.text:00405638                 mov     edx, 13h
.text:0040563D                 cmp     eax, 4B0h
.text:00405642                 jmp     loc_405481
.text:00405647 ; ---------------------------------------------------------------------------
.text:00405647
.text:00405647 loc_405647:                             ; CODE XREF: ___get_errno+266↑j
.text:00405647                 cmp     eax, 718h
.text:0040564C                 jnz     loc_405413
.text:00405652                 jmp     loc_405439
.text:00405652 ___get_errno    endp
.text:00405652
.text:00405652 ; ---------------------------------------------------------------------------
.text:00405657                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660
.text:00405660 sub_405660      proc near               ; CODE XREF: sub_404FD0+CB↑p
.text:00405660
.text:00405660 var_C           = dword ptr -0Ch
.text:00405660
.text:00405660                 sub     esp, 0Ch
.text:00405663                 call    GetLastError
.text:00405668                 mov     [esp+0Ch+var_C], eax
.text:0040566B                 call    ___get_errno
.text:00405670                 add     esp, 0Ch
.text:00405673                 retn
.text:00405673 sub_405660      endp
.text:00405673
.text:00405673 ; ---------------------------------------------------------------------------
.text:00405674                 align 10h
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680
.text:00405680 sub_405680      proc near               ; CODE XREF: sub_405330+4F↑p
.text:00405680
.text:00405680 var_8           = dword ptr -8
.text:00405680 var_4           = dword ptr -4
.text:00405680 arg_0           = dword ptr  4
.text:00405680 arg_4           = dword ptr  8
.text:00405680 arg_8           = dword ptr  0Ch
.text:00405680
.text:00405680                 sub     esp, 8
.text:00405683                 mov     ecx, [esp+8+arg_0]
.text:00405687                 mov     [esp+8+var_8], ebx
.text:0040568A                 mov     ebx, [esp+8+arg_8]
.text:0040568E                 mov     [esp+8+var_4], esi
.text:00405692                 mov     edx, [esp+8+arg_4]
.text:00405696                 mov     eax, ebx
.text:00405698                 and     eax, 7
.text:0040569B                 cmp     eax, 7          ; switch 8 cases
.text:0040569E                 ja      short def_4056A0 ; jumptable 004056A0 default case
.text:004056A0                 jmp     ds:jpt_4056A0[eax*4] ; switch jump
.text:004056A0 ; ---------------------------------------------------------------------------
.text:004056A7                 align 4
.text:004056A8 jpt_4056A0      dd offset loc_40572A    ; DATA XREF: sub_405680+20↑r
.text:004056A8                 dd offset loc_405731    ; jump table for switch statement
.text:004056A8                 dd offset loc_4056C8
.text:004056A8                 dd offset loc_405739
.text:004056A8                 dd offset loc_405746
.text:004056A8                 dd offset loc_405753
.text:004056A8                 dd offset loc_405760
.text:004056A8                 dd offset loc_40576D
.text:004056C8 ; ---------------------------------------------------------------------------
.text:004056C8
.text:004056C8 loc_4056C8:                             ; CODE XREF: sub_405680+20↑j
.text:004056C8                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:004056C8                 mov     eax, [edx]      ; jumptable 004056A0 case 2
.text:004056CA                 sub     ecx, 1Ch
.text:004056CD                 add     ebx, 6
.text:004056D0                 sub     edx, 18h
.text:004056D3                 lea     esi, [esi+0]
.text:004056D9                 lea     edi, [edi+0]
.text:004056E0
.text:004056E0 loc_4056E0:                             ; CODE XREF: sub_405680+A8↓j
.text:004056E0                 mov     esi, [edx+1Ch]
.text:004056E3                 add     edx, 20h ; ' '
.text:004056E6                 mov     [ecx+1Ch], eax
.text:004056E9                 add     ecx, 20h ; ' '
.text:004056EC                 sub     ebx, 8
.text:004056EF                 jnz     short def_4056A0 ; jumptable 004056A0 default case
.text:004056F1                 mov     [ecx], esi
.text:004056F3                 mov     ebx, [esp+8+var_8]
.text:004056F6                 mov     esi, [esp+8+var_4]
.text:004056FA                 add     esp, 8
.text:004056FD                 retn
.text:004056FD ; ---------------------------------------------------------------------------
.text:004056FE                 align 10h
.text:00405700
.text:00405700 def_4056A0:                             ; CODE XREF: sub_405680+1E↑j
.text:00405700                                         ; sub_405680+6F↑j ...
.text:00405700                 mov     eax, [edx]      ; jumptable 004056A0 default case
.text:00405702                 mov     [ecx], esi
.text:00405704
.text:00405704 loc_405704:                             ; CODE XREF: sub_405680+AF↓j
.text:00405704                 mov     esi, [edx+4]
.text:00405707                 mov     [ecx+4], eax
.text:0040570A
.text:0040570A loc_40570A:                             ; CODE XREF: sub_405680+F6↓j
.text:0040570A                 mov     eax, [edx+8]
.text:0040570D                 mov     [ecx+8], esi
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_405680+EB↓j
.text:00405710                 mov     esi, [edx+0Ch]
.text:00405713                 mov     [ecx+0Ch], eax
.text:00405716
.text:00405716 loc_405716:                             ; CODE XREF: sub_405680+DE↓j
.text:00405716                 mov     eax, [edx+10h]
.text:00405719                 mov     [ecx+10h], esi
.text:0040571C
.text:0040571C loc_40571C:                             ; CODE XREF: sub_405680+D1↓j
.text:0040571C                 mov     esi, [edx+14h]
.text:0040571F                 mov     [ecx+14h], eax
.text:00405722
.text:00405722 loc_405722:                             ; CODE XREF: sub_405680+C4↓j
.text:00405722                 mov     eax, [edx+18h]
.text:00405725                 mov     [ecx+18h], esi
.text:00405728                 jmp     short loc_4056E0
.text:0040572A ; ---------------------------------------------------------------------------
.text:0040572A
.text:0040572A loc_40572A:                             ; CODE XREF: sub_405680+20↑j
.text:0040572A                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:0040572A                 mov     eax, [edx]      ; jumptable 004056A0 case 0
.text:0040572C                 sub     ecx, 4
.text:0040572F                 jmp     short loc_405704
.text:00405731 ; ---------------------------------------------------------------------------
.text:00405731
.text:00405731 loc_405731:                             ; CODE XREF: sub_405680+20↑j
.text:00405731                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:00405731                 mov     esi, [edx]      ; jumptable 004056A0 case 1
.text:00405733                 dec     ebx
.text:00405734                 add     edx, 4
.text:00405737                 jmp     short def_4056A0 ; jumptable 004056A0 default case
.text:00405739 ; ---------------------------------------------------------------------------
.text:00405739
.text:00405739 loc_405739:                             ; CODE XREF: sub_405680+20↑j
.text:00405739                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:00405739                 mov     esi, [edx]      ; jumptable 004056A0 case 3
.text:0040573B                 sub     ecx, 18h
.text:0040573E                 add     ebx, 5
.text:00405741                 sub     edx, 14h
.text:00405744                 jmp     short loc_405722
.text:00405746 ; ---------------------------------------------------------------------------
.text:00405746
.text:00405746 loc_405746:                             ; CODE XREF: sub_405680+20↑j
.text:00405746                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:00405746                 mov     eax, [edx]      ; jumptable 004056A0 case 4
.text:00405748                 sub     ecx, 14h
.text:0040574B                 add     ebx, 4
.text:0040574E                 sub     edx, 10h
.text:00405751                 jmp     short loc_40571C
.text:00405753 ; ---------------------------------------------------------------------------
.text:00405753
.text:00405753 loc_405753:                             ; CODE XREF: sub_405680+20↑j
.text:00405753                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:00405753                 mov     esi, [edx]      ; jumptable 004056A0 case 5
.text:00405755                 sub     ecx, 10h
.text:00405758                 add     ebx, 3
.text:0040575B                 sub     edx, 0Ch
.text:0040575E                 jmp     short loc_405716
.text:00405760 ; ---------------------------------------------------------------------------
.text:00405760
.text:00405760 loc_405760:                             ; CODE XREF: sub_405680+20↑j
.text:00405760                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:00405760                 mov     eax, [edx]      ; jumptable 004056A0 case 6
.text:00405762                 sub     ecx, 0Ch
.text:00405765                 add     ebx, 2
.text:00405768                 sub     edx, 8
.text:0040576B                 jmp     short loc_405710
.text:0040576D ; ---------------------------------------------------------------------------
.text:0040576D
.text:0040576D loc_40576D:                             ; CODE XREF: sub_405680+20↑j
.text:0040576D                                         ; DATA XREF: sub_405680:jpt_4056A0↑o
.text:0040576D                 mov     esi, [edx]      ; jumptable 004056A0 case 7
.text:0040576F                 sub     ecx, 8
.text:00405772                 inc     ebx
.text:00405773                 sub     edx, 4
.text:00405776                 jmp     short loc_40570A
.text:00405776 sub_405680      endp
.text:00405776
.text:00405776 ; ---------------------------------------------------------------------------
.text:00405778                 align 10h
.text:00405780
.text:00405780 ; =============== S U B R O U T I N E =======================================
.text:00405780
.text:00405780
.text:00405780 sub_405780      proc near               ; CODE XREF: sub_405330+93↑p
.text:00405780
.text:00405780 var_1C          = dword ptr -1Ch
.text:00405780 var_18          = dword ptr -18h
.text:00405780 var_14          = dword ptr -14h
.text:00405780 arg_0           = dword ptr  4
.text:00405780 arg_4           = dword ptr  8
.text:00405780 arg_8           = dword ptr  0Ch
.text:00405780
.text:00405780                 push    ebp
.text:00405781                 push    edi
.text:00405782                 push    esi
.text:00405783                 push    ebx
.text:00405784                 sub     esp, 0Ch
.text:00405787                 mov     edx, [esp+1Ch+arg_4]
.text:0040578B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00405793                 mov     eax, [esp+1Ch+arg_8]
.text:00405797                 mov     esi, [esp+1Ch+arg_0]
.text:0040579B                 mov     ecx, edx
.text:0040579D                 and     ecx, 3
.text:004057A0                 and     eax, 3
.text:004057A3                 shl     ecx, 3
.text:004057A6                 and     edx, 0FFFFFFFCh
.text:004057A9                 sub     [esp+1Ch+var_14], ecx
.text:004057AD                 cmp     eax, 1
.text:004057B0                 mov     [esp+1Ch+var_18], ecx
.text:004057B4                 jz      loc_4058A0
.text:004057BA                 cmp     eax, 1
.text:004057BD                 jb      loc_405890
.text:004057C3                 cmp     eax, 2
.text:004057C6                 jz      loc_405874
.text:004057CC                 cmp     eax, 3
.text:004057CF                 jz      loc_405863
.text:004057D5
.text:004057D5 loc_4057D5:                             ; CODE XREF: sub_405780+C7↓j
.text:004057D5                                         ; sub_405780+12C↓j
.text:004057D5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004057DA                 mov     eax, edi
.text:004057DC                 mov     ebx, [edx]
.text:004057DE                 shr     ebp, cl
.text:004057E0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004057E5                 shl     eax, cl
.text:004057E7                 or      ebp, eax
.text:004057E9                 mov     [esi], ebp
.text:004057EB
.text:004057EB loc_4057EB:                             ; CODE XREF: sub_405780+11B↓j
.text:004057EB                 mov     ecx, [edx+4]
.text:004057EE                 mov     ebp, ebx
.text:004057F0                 mov     [esp+1Ch+var_1C], ecx
.text:004057F3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004057F8                 shr     edi, cl
.text:004057FA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004057FF                 shl     ebp, cl
.text:00405801                 or      edi, ebp
.text:00405803                 mov     [esi+4], edi
.text:00405806
.text:00405806 loc_405806:                             ; CODE XREF: sub_405780+F2↓j
.text:00405806                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040580B                 mov     edi, [esp+1Ch+var_1C]
.text:0040580E                 mov     ebp, [edx+8]
.text:00405811                 shr     ebx, cl
.text:00405813                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405818                 shl     edi, cl
.text:0040581A                 or      ebx, edi
.text:0040581C                 mov     [esi+8], ebx
.text:0040581F
.text:0040581F loc_40581F:                             ; CODE XREF: sub_405780+107↓j
.text:0040581F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00405824                 mov     ebx, ebp
.text:00405826                 mov     edi, [edx+0Ch]
.text:00405829                 add     edx, 10h
.text:0040582C                 shr     [esp+1Ch+var_1C], cl
.text:0040582F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405834                 shl     ebx, cl
.text:00405836                 or      [esp+1Ch+var_1C], ebx
.text:00405839                 mov     ebx, [esp+1Ch+var_1C]
.text:0040583C                 mov     [esi+0Ch], ebx
.text:0040583F                 add     esi, 10h
.text:00405842                 sub     [esp+1Ch+arg_8], 4
.text:00405847                 jnz     short loc_4057D5
.text:00405849                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0040584E                 shr     ebp, cl
.text:00405850                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00405855                 shl     edi, cl
.text:00405857                 or      ebp, edi
.text:00405859                 mov     [esi], ebp
.text:0040585B                 add     esp, 0Ch
.text:0040585E                 pop     ebx
.text:0040585F                 pop     esi
.text:00405860                 pop     edi
.text:00405861                 pop     ebp
.text:00405862                 retn
.text:00405863 ; ---------------------------------------------------------------------------
.text:00405863
.text:00405863 loc_405863:                             ; CODE XREF: sub_405780+4F↑j
.text:00405863                 inc     [esp+1Ch+arg_8]
.text:00405867                 sub     esi, 8
.text:0040586A                 mov     eax, [edx+4]
.text:0040586D                 mov     ebx, [edx]
.text:0040586F                 mov     [esp+1Ch+var_1C], eax
.text:00405872                 jmp     short loc_405806
.text:00405874 ; ---------------------------------------------------------------------------
.text:00405874
.text:00405874 loc_405874:                             ; CODE XREF: sub_405780+46↑j
.text:00405874                 add     [esp+1Ch+arg_8], 2
.text:00405879                 sub     esi, 0Ch
.text:0040587C                 mov     ecx, [edx]
.text:0040587E                 mov     ebp, [edx+4]
.text:00405881                 sub     edx, 4
.text:00405884                 mov     [esp+1Ch+var_1C], ecx
.text:00405887                 jmp     short loc_40581F
.text:00405887 ; ---------------------------------------------------------------------------
.text:00405889                 align 10h
.text:00405890
.text:00405890 loc_405890:                             ; CODE XREF: sub_405780+3D↑j
.text:00405890                 mov     edi, [edx]
.text:00405892                 sub     esi, 4
.text:00405895                 mov     ebx, [edx+4]
.text:00405898                 add     edx, 4
.text:0040589B                 jmp     loc_4057EB
.text:004058A0 ; ---------------------------------------------------------------------------
.text:004058A0
.text:004058A0 loc_4058A0:                             ; CODE XREF: sub_405780+34↑j
.text:004058A0                 dec     [esp+1Ch+arg_8]
.text:004058A4                 mov     ebp, [edx]
.text:004058A6                 mov     edi, [edx+4]
.text:004058A9                 add     edx, 8
.text:004058AC                 jmp     loc_4057D5
.text:004058AC sub_405780      endp
.text:004058AC
.text:004058B1 ; ---------------------------------------------------------------------------
.text:004058B1                 jmp     short loc_4058C0
.text:004058B1 ; ---------------------------------------------------------------------------
.text:004058B3                 align 10h
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: .text:004058B1↑j
.text:004058C0                 sub     esp, 8
.text:004058C3                 mov     ecx, [esp+0Ch]
.text:004058C7                 mov     [esp+4], esi
.text:004058CB                 mov     esi, [esp+14h]
.text:004058CF                 mov     [esp], ebx
.text:004058D2                 mov     edx, [esp+10h]
.text:004058D6                 mov     eax, esi
.text:004058D8                 and     eax, 7
.text:004058DB                 cmp     eax, 7          ; switch 8 cases
.text:004058DE                 ja      short def_4058E0 ; jumptable 004058E0 default case
.text:004058E0                 jmp     ds:jpt_4058E0[eax*4] ; switch jump
.text:004058E0 ; ---------------------------------------------------------------------------
.text:004058E7                 align 4
.text:004058E8 jpt_4058E0      dd offset loc_40596C    ; DATA XREF: .text:004058E0↑r
.text:004058E8                 dd offset loc_405977    ; jump table for switch statement
.text:004058E8                 dd offset loc_405908
.text:004058E8                 dd offset loc_405983
.text:004058E8                 dd offset loc_405991
.text:004058E8                 dd offset loc_40599F
.text:004058E8                 dd offset loc_4059AD
.text:004058E8                 dd offset loc_4059BB
.text:00405908 ; ---------------------------------------------------------------------------
.text:00405908
.text:00405908 loc_405908:                             ; CODE XREF: .text:004058E0↑j
.text:00405908                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:00405908                 sub     edx, 8          ; jumptable 004058E0 case 2
.text:0040590B                 sub     ecx, 4
.text:0040590E                 mov     eax, [edx+4]
.text:00405911                 add     esi, 6
.text:00405914                 lea     esi, [esi+0]
.text:0040591A                 lea     edi, [edi+0]
.text:00405920
.text:00405920 loc_405920:                             ; CODE XREF: .text:0040596A↓j
.text:00405920                 mov     ebx, [edx]
.text:00405922                 sub     edx, 20h ; ' '
.text:00405925                 mov     [ecx], eax
.text:00405927                 sub     ecx, 20h ; ' '
.text:0040592A                 sub     esi, 8
.text:0040592D                 jnz     short def_4058E0 ; jumptable 004058E0 default case
.text:0040592F                 mov     [ecx+1Ch], ebx
.text:00405932                 mov     ebx, [esp]
.text:00405935                 mov     esi, [esp+4]
.text:00405939                 add     esp, 8
.text:0040593C                 retn
.text:0040593C ; ---------------------------------------------------------------------------
.text:0040593D                 align 10h
.text:00405940
.text:00405940 def_4058E0:                             ; CODE XREF: .text:004058DE↑j
.text:00405940                                         ; .text:0040592D↑j ...
.text:00405940                 mov     eax, [edx+1Ch]  ; jumptable 004058E0 default case
.text:00405943                 mov     [ecx+1Ch], ebx
.text:00405946
.text:00405946 loc_405946:                             ; CODE XREF: .text:00405975↓j
.text:00405946                 mov     ebx, [edx+18h]
.text:00405949                 mov     [ecx+18h], eax
.text:0040594C
.text:0040594C loc_40594C:                             ; CODE XREF: .text:004059C5↓j
.text:0040594C                 mov     eax, [edx+14h]
.text:0040594F                 mov     [ecx+14h], ebx
.text:00405952
.text:00405952 loc_405952:                             ; CODE XREF: .text:004059B9↓j
.text:00405952                 mov     ebx, [edx+10h]
.text:00405955                 mov     [ecx+10h], eax
.text:00405958
.text:00405958 loc_405958:                             ; CODE XREF: .text:004059AB↓j
.text:00405958                 mov     eax, [edx+0Ch]
.text:0040595B                 mov     [ecx+0Ch], ebx
.text:0040595E
.text:0040595E loc_40595E:                             ; CODE XREF: .text:0040599D↓j
.text:0040595E                 mov     ebx, [edx+8]
.text:00405961                 mov     [ecx+8], eax
.text:00405964
.text:00405964 loc_405964:                             ; CODE XREF: .text:0040598F↓j
.text:00405964                 mov     eax, [edx+4]
.text:00405967                 mov     [ecx+4], ebx
.text:0040596A                 jmp     short loc_405920
.text:0040596C ; ---------------------------------------------------------------------------
.text:0040596C
.text:0040596C loc_40596C:                             ; CODE XREF: .text:004058E0↑j
.text:0040596C                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:0040596C                 sub     edx, 20h ; ' '  ; jumptable 004058E0 case 0
.text:0040596F                 sub     ecx, 1Ch
.text:00405972                 mov     eax, [edx+1Ch]
.text:00405975                 jmp     short loc_405946
.text:00405977 ; ---------------------------------------------------------------------------
.text:00405977
.text:00405977 loc_405977:                             ; CODE XREF: .text:004058E0↑j
.text:00405977                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:00405977                 sub     edx, 24h ; '$'  ; jumptable 004058E0 case 1
.text:0040597A                 sub     ecx, 20h ; ' '
.text:0040597D                 mov     ebx, [edx+20h]
.text:00405980                 dec     esi
.text:00405981                 jmp     short def_4058E0 ; jumptable 004058E0 default case
.text:00405983 ; ---------------------------------------------------------------------------
.text:00405983
.text:00405983 loc_405983:                             ; CODE XREF: .text:004058E0↑j
.text:00405983                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:00405983                 sub     edx, 0Ch        ; jumptable 004058E0 case 3
.text:00405986                 sub     ecx, 8
.text:00405989                 mov     ebx, [edx+8]
.text:0040598C                 add     esi, 5
.text:0040598F                 jmp     short loc_405964
.text:00405991 ; ---------------------------------------------------------------------------
.text:00405991
.text:00405991 loc_405991:                             ; CODE XREF: .text:004058E0↑j
.text:00405991                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:00405991                 sub     edx, 10h        ; jumptable 004058E0 case 4
.text:00405994                 sub     ecx, 0Ch
.text:00405997                 mov     eax, [edx+0Ch]
.text:0040599A                 add     esi, 4
.text:0040599D                 jmp     short loc_40595E
.text:0040599F ; ---------------------------------------------------------------------------
.text:0040599F
.text:0040599F loc_40599F:                             ; CODE XREF: .text:004058E0↑j
.text:0040599F                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:0040599F                 sub     edx, 14h        ; jumptable 004058E0 case 5
.text:004059A2                 sub     ecx, 10h
.text:004059A5                 mov     ebx, [edx+10h]
.text:004059A8                 add     esi, 3
.text:004059AB                 jmp     short loc_405958
.text:004059AD ; ---------------------------------------------------------------------------
.text:004059AD
.text:004059AD loc_4059AD:                             ; CODE XREF: .text:004058E0↑j
.text:004059AD                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:004059AD                 sub     edx, 18h        ; jumptable 004058E0 case 6
.text:004059B0                 sub     ecx, 14h
.text:004059B3                 mov     eax, [edx+14h]
.text:004059B6                 add     esi, 2
.text:004059B9                 jmp     short loc_405952
.text:004059BB ; ---------------------------------------------------------------------------
.text:004059BB
.text:004059BB loc_4059BB:                             ; CODE XREF: .text:004058E0↑j
.text:004059BB                                         ; DATA XREF: .text:jpt_4058E0↑o
.text:004059BB                 sub     edx, 1Ch        ; jumptable 004058E0 case 7
.text:004059BE                 sub     ecx, 18h
.text:004059C1                 mov     ebx, [edx+18h]
.text:004059C4                 inc     esi
.text:004059C5                 jmp     short loc_40594C
.text:004059C5 ; ---------------------------------------------------------------------------
.text:004059C7                 align 10h
.text:004059D0                 push    ebp
.text:004059D1                 push    edi
.text:004059D2                 push    esi
.text:004059D3                 push    ebx
.text:004059D4                 sub     esp, 8
.text:004059D7                 mov     edx, [esp+20h]
.text:004059DB                 mov     dword ptr [esp+4], 20h ; ' '
.text:004059E3                 mov     eax, [esp+24h]
.text:004059E7                 mov     ecx, edx
.text:004059E9                 and     ecx, 3
.text:004059EC                 and     eax, 3
.text:004059EF                 shl     ecx, 3
.text:004059F2                 sub     [esp+4], ecx
.text:004059F6                 and     edx, 0FFFFFFFCh
.text:004059F9                 add     edx, 4
.text:004059FC                 mov     [esp], ecx
.text:004059FF                 cmp     eax, 1
.text:00405A02                 jz      loc_405AF8
.text:00405A08                 cmp     eax, 1
.text:00405A0B                 jb      loc_405AE5
.text:00405A11                 cmp     eax, 2
.text:00405A14                 jz      loc_405AD0
.text:00405A1A                 cmp     eax, 3
.text:00405A1D                 jz      loc_405ABC
.text:00405A23
.text:00405A23 loc_405A23:                             ; CODE XREF: .text:00405A9C↓j
.text:00405A23                                         ; .text:00405B0A↓j
.text:00405A23                 movzx   ecx, byte ptr [esp]
.text:00405A27                 mov     eax, edi
.text:00405A29                 mov     ebx, [esp+1Ch]
.text:00405A2D                 mov     esi, [edx+0Ch]
.text:00405A30                 shr     eax, cl
.text:00405A32                 movzx   ecx, byte ptr [esp+4]
.text:00405A37                 shl     ebp, cl
.text:00405A39                 or      eax, ebp
.text:00405A3B                 mov     [ebx+0Ch], eax
.text:00405A3E
.text:00405A3E loc_405A3E:                             ; CODE XREF: .text:00405AF3↓j
.text:00405A3E                 movzx   ecx, byte ptr [esp]
.text:00405A42                 mov     ebp, esi
.text:00405A44                 mov     ebx, [edx+8]
.text:00405A47                 shr     ebp, cl
.text:00405A49                 movzx   ecx, byte ptr [esp+4]
.text:00405A4E                 shl     edi, cl
.text:00405A50                 or      ebp, edi
.text:00405A52                 mov     edi, [esp+1Ch]
.text:00405A56                 mov     [edi+8], ebp
.text:00405A59
.text:00405A59 loc_405A59:                             ; CODE XREF: .text:00405ACE↓j
.text:00405A59                 movzx   ecx, byte ptr [esp]
.text:00405A5D                 mov     edi, ebx
.text:00405A5F                 mov     ebp, [edx+4]
.text:00405A62                 shr     edi, cl
.text:00405A64                 movzx   ecx, byte ptr [esp+4]
.text:00405A69                 shl     esi, cl
.text:00405A6B                 or      edi, esi
.text:00405A6D                 mov     esi, [esp+1Ch]
.text:00405A71                 mov     [esi+4], edi
.text:00405A74
.text:00405A74 loc_405A74:                             ; CODE XREF: .text:00405AE3↓j
.text:00405A74                 movzx   ecx, byte ptr [esp]
.text:00405A78                 mov     esi, ebp
.text:00405A7A                 mov     edi, [edx]
.text:00405A7C                 sub     edx, 10h
.text:00405A7F                 shr     esi, cl
.text:00405A81                 movzx   ecx, byte ptr [esp+4]
.text:00405A86                 shl     ebx, cl
.text:00405A88                 or      esi, ebx
.text:00405A8A                 mov     ebx, [esp+1Ch]
.text:00405A8E                 mov     [ebx], esi
.text:00405A90                 sub     ebx, 10h
.text:00405A93                 sub     dword ptr [esp+24h], 4
.text:00405A98                 mov     [esp+1Ch], ebx
.text:00405A9C                 jnz     short loc_405A23
.text:00405A9E                 movzx   ecx, byte ptr [esp]
.text:00405AA2                 mov     edx, [esp+1Ch]
.text:00405AA6                 shr     edi, cl
.text:00405AA8                 movzx   ecx, byte ptr [esp+4]
.text:00405AAD                 shl     ebp, cl
.text:00405AAF                 or      edi, ebp
.text:00405AB1                 mov     [edx+0Ch], edi
.text:00405AB4                 add     esp, 8
.text:00405AB7                 pop     ebx
.text:00405AB8                 pop     esi
.text:00405AB9                 pop     edi
.text:00405ABA                 pop     ebp
.text:00405ABB                 retn
.text:00405ABC ; ---------------------------------------------------------------------------
.text:00405ABC
.text:00405ABC loc_405ABC:                             ; CODE XREF: .text:00405A1D↑j
.text:00405ABC                 sub     dword ptr [esp+1Ch], 8
.text:00405AC1                 sub     edx, 10h
.text:00405AC4                 inc     dword ptr [esp+24h]
.text:00405AC8                 mov     esi, [edx+0Ch]
.text:00405ACB                 mov     ebx, [edx+8]
.text:00405ACE                 jmp     short loc_405A59
.text:00405AD0 ; ---------------------------------------------------------------------------
.text:00405AD0
.text:00405AD0 loc_405AD0:                             ; CODE XREF: .text:00405A14↑j
.text:00405AD0                 sub     dword ptr [esp+1Ch], 4
.text:00405AD5                 sub     edx, 0Ch
.text:00405AD8                 add     dword ptr [esp+24h], 2
.text:00405ADD                 mov     ebx, [edx+8]
.text:00405AE0                 mov     ebp, [edx+4]
.text:00405AE3                 jmp     short loc_405A74
.text:00405AE5 ; ---------------------------------------------------------------------------
.text:00405AE5
.text:00405AE5 loc_405AE5:                             ; CODE XREF: .text:00405A0B↑j
.text:00405AE5                 sub     dword ptr [esp+1Ch], 0Ch
.text:00405AEA                 sub     edx, 14h
.text:00405AED                 mov     edi, [edx+10h]
.text:00405AF0                 mov     esi, [edx+0Ch]
.text:00405AF3                 jmp     loc_405A3E
.text:00405AF8 ; ---------------------------------------------------------------------------
.text:00405AF8
.text:00405AF8 loc_405AF8:                             ; CODE XREF: .text:00405A02↑j
.text:00405AF8                 sub     dword ptr [esp+1Ch], 10h
.text:00405AFD                 sub     edx, 18h
.text:00405B00                 dec     dword ptr [esp+24h]
.text:00405B04                 mov     ebp, [edx+14h]
.text:00405B07                 mov     edi, [edx+10h]
.text:00405B0A                 jmp     loc_405A23
.text:00405B0A ; ---------------------------------------------------------------------------
.text:00405B0F                 align 10h
.text:00405B10
.text:00405B10 ; =============== S U B R O U T I N E =======================================
.text:00405B10
.text:00405B10 ; Attributes: thunk
.text:00405B10
.text:00405B10 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405B10 mbrtowc         proc near               ; CODE XREF: sub_4030F0+757↑p
.text:00405B10
.text:00405B10 DstCh           = dword ptr  4
.text:00405B10 SrcCh           = dword ptr  8
.text:00405B10 SizeInBytes     = dword ptr  0Ch
.text:00405B10 State           = dword ptr  10h
.text:00405B10
.text:00405B10                 jmp     ds:__imp_mbrtowc
.text:00405B10 mbrtowc         endp
.text:00405B10
.text:00405B10 ; ---------------------------------------------------------------------------
.text:00405B16                 align 10h
.text:00405B20
.text:00405B20 ; =============== S U B R O U T I N E =======================================
.text:00405B20
.text:00405B20 ; Attributes: bp-based frame
.text:00405B20
.text:00405B20 sub_405B20      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405B20                 push    ebp
.text:00405B21                 mov     ecx, offset dword_407000
.text:00405B26                 cmp     ecx, offset dword_407000
.text:00405B2C                 mov     ebp, esp
.text:00405B2E                 jnb     short loc_405B46
.text:00405B30
.text:00405B30 loc_405B30:                             ; CODE XREF: sub_405B20+24↓j
.text:00405B30                 mov     edx, [ecx+4]
.text:00405B33                 mov     eax, [ecx]
.text:00405B35                 add     ecx, 8
.text:00405B38                 add     [edx+400000h], eax
.text:00405B3E                 cmp     ecx, offset dword_407000
.text:00405B44                 jb      short loc_405B30
.text:00405B46
.text:00405B46 loc_405B46:                             ; CODE XREF: sub_405B20+E↑j
.text:00405B46                 pop     ebp
.text:00405B47                 retn
.text:00405B47 sub_405B20      endp
.text:00405B47
.text:00405B47 ; ---------------------------------------------------------------------------
.text:00405B48                 align 10h
.text:00405B50
.text:00405B50 ; =============== S U B R O U T I N E =======================================
.text:00405B50
.text:00405B50 ; Attributes: bp-based frame
.text:00405B50
.text:00405B50 sub_405B50      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405B50                                         ; TopLevelExceptionFilter+D7↑p
.text:00405B50                 push    ebp
.text:00405B51                 mov     ebp, esp
.text:00405B53                 fninit
.text:00405B55                 pop     ebp
.text:00405B56                 retn
.text:00405B56 sub_405B50      endp
.text:00405B56
.text:00405B56 ; ---------------------------------------------------------------------------
.text:00405B57                 align 10h
.text:00405B60
.text:00405B60 ; =============== S U B R O U T I N E =======================================
.text:00405B60
.text:00405B60 ; Attributes: bp-based frame
.text:00405B60
.text:00405B60 ; void __cdecl sub_405B60()
.text:00405B60 sub_405B60      proc near               ; DATA XREF: .text:loc_405BA9↓o
.text:00405B60                                         ; sub_405BF0:loc_405C1E↓o
.text:00405B60                 push    ebp
.text:00405B61                 mov     ebp, esp
.text:00405B63                 sub     esp, 8
.text:00405B66                 mov     eax, off_406084
.text:00405B6B                 mov     edx, [eax]
.text:00405B6D                 test    edx, edx
.text:00405B6F                 jnz     short loc_405B75
.text:00405B71
.text:00405B71 loc_405B71:                             ; CODE XREF: sub_405B60+2C↓j
.text:00405B71                 mov     esp, ebp
.text:00405B73                 pop     ebp
.text:00405B74                 retn
.text:00405B75 ; ---------------------------------------------------------------------------
.text:00405B75
.text:00405B75 loc_405B75:                             ; CODE XREF: sub_405B60+F↑j
.text:00405B75                                         ; sub_405B60+2A↓j
.text:00405B75                 call    dword ptr [eax]
.text:00405B77                 mov     edx, off_406084
.text:00405B7D                 mov     ecx, [edx+4]
.text:00405B80                 lea     eax, [edx+4]
.text:00405B83                 mov     off_406084, eax
.text:00405B88                 test    ecx, ecx
.text:00405B8A                 jnz     short loc_405B75
.text:00405B8C                 jmp     short loc_405B71
.text:00405B8C sub_405B60      endp
.text:00405B8C
.text:00405B8C ; ---------------------------------------------------------------------------
.text:00405B8E                 align 10h
.text:00405B90                 push    ebp
.text:00405B91                 mov     ebp, esp
.text:00405B93                 sub     esp, 8
.text:00405B96                 mov     [ebp-4], ebx
.text:00405B99                 mov     eax, ds:dword_405F60
.text:00405B9E                 cmp     eax, 0FFFFFFFFh
.text:00405BA1                 jz      short loc_405BCC
.text:00405BA3
.text:00405BA3 loc_405BA3:                             ; CODE XREF: .text:00405BD6↓j
.text:00405BA3                                         ; .text:00405BE9↓j
.text:00405BA3                 test    eax, eax
.text:00405BA5                 mov     ebx, eax
.text:00405BA7                 jnz     short loc_405BC0
.text:00405BA9
.text:00405BA9 loc_405BA9:                             ; CODE XREF: .text:00405BCA↓j
.text:00405BA9                 mov     dword ptr [esp], offset sub_405B60
.text:00405BB0                 call    sub_401040
.text:00405BB5                 mov     ebx, [ebp-4]
.text:00405BB8                 mov     esp, ebp
.text:00405BBA                 pop     ebp
.text:00405BBB                 retn
.text:00405BBB ; ---------------------------------------------------------------------------
.text:00405BBC                 align 10h
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: .text:00405BA7↑j
.text:00405BC0                                         ; .text:00405BC8↓j
.text:00405BC0                 call    ds:dword_405F60[ebx*4]
.text:00405BC7                 dec     ebx
.text:00405BC8                 jnz     short loc_405BC0
.text:00405BCA                 jmp     short loc_405BA9
.text:00405BCC ; ---------------------------------------------------------------------------
.text:00405BCC
.text:00405BCC loc_405BCC:                             ; CODE XREF: .text:00405BA1↑j
.text:00405BCC                 mov     ecx, ds:dword_405F64
.text:00405BD2                 xor     eax, eax
.text:00405BD4                 test    ecx, ecx
.text:00405BD6                 jz      short loc_405BA3
.text:00405BD8                 mov     edx, offset dword_405F60
.text:00405BDD                 lea     esi, [esi+0]
.text:00405BE0
.text:00405BE0 loc_405BE0:                             ; CODE XREF: .text:00405BE7↓j
.text:00405BE0                 inc     eax
.text:00405BE1                 mov     ecx, [edx+eax*4+4]
.text:00405BE5                 test    ecx, ecx
.text:00405BE7                 jnz     short loc_405BE0
.text:00405BE9                 jmp     short loc_405BA3
.text:00405BE9 ; ---------------------------------------------------------------------------
.text:00405BEB                 align 10h
.text:00405BF0
.text:00405BF0 ; =============== S U B R O U T I N E =======================================
.text:00405BF0
.text:00405BF0 ; Attributes: bp-based frame
.text:00405BF0
.text:00405BF0 sub_405BF0      proc near               ; CODE XREF: sub_401450+16↑p
.text:00405BF0
.text:00405BF0 var_8           = dword ptr -8
.text:00405BF0 var_4           = dword ptr -4
.text:00405BF0
.text:00405BF0                 push    ebp
.text:00405BF1                 mov     ebp, esp
.text:00405BF3                 sub     esp, 8
.text:00405BF6                 mov     [ebp+var_4], ebx
.text:00405BF9                 mov     edx, dword_406080
.text:00405BFF                 test    edx, edx
.text:00405C01                 jnz     short loc_405C2A
.text:00405C03                 mov     eax, ds:dword_405F60
.text:00405C08                 mov     edx, 1
.text:00405C0D                 mov     dword_406080, edx
.text:00405C13                 cmp     eax, 0FFFFFFFFh
.text:00405C16                 jz      short loc_405C3D
.text:00405C18
.text:00405C18 loc_405C18:                             ; CODE XREF: sub_405BF0+57↓j
.text:00405C18                                         ; sub_405BF0+69↓j
.text:00405C18                 test    eax, eax
.text:00405C1A                 mov     ebx, eax
.text:00405C1C                 jnz     short loc_405C31
.text:00405C1E
.text:00405C1E loc_405C1E:                             ; CODE XREF: sub_405BF0+4B↓j
.text:00405C1E                 mov     [esp+8+var_8], offset sub_405B60 ; void (__cdecl *)()
.text:00405C25                 call    sub_401040
.text:00405C2A
.text:00405C2A loc_405C2A:                             ; CODE XREF: sub_405BF0+11↑j
.text:00405C2A                 mov     ebx, [ebp+var_4]
.text:00405C2D                 mov     esp, ebp
.text:00405C2F                 pop     ebp
.text:00405C30                 retn
.text:00405C31 ; ---------------------------------------------------------------------------
.text:00405C31
.text:00405C31 loc_405C31:                             ; CODE XREF: sub_405BF0+2C↑j
.text:00405C31                                         ; sub_405BF0+49↓j
.text:00405C31                 call    ds:dword_405F60[ebx*4]
.text:00405C38                 dec     ebx
.text:00405C39                 jnz     short loc_405C31
.text:00405C3B                 jmp     short loc_405C1E
.text:00405C3D ; ---------------------------------------------------------------------------
.text:00405C3D
.text:00405C3D loc_405C3D:                             ; CODE XREF: sub_405BF0+26↑j
.text:00405C3D                 mov     ecx, ds:dword_405F64
.text:00405C43                 xor     eax, eax
.text:00405C45                 test    ecx, ecx
.text:00405C47                 jz      short loc_405C18
.text:00405C49                 mov     edx, offset dword_405F60
.text:00405C4E                 mov     esi, esi
.text:00405C50
.text:00405C50 loc_405C50:                             ; CODE XREF: sub_405BF0+67↓j
.text:00405C50                 inc     eax
.text:00405C51                 mov     ebx, [edx+eax*4+4]
.text:00405C55                 test    ebx, ebx
.text:00405C57                 jnz     short loc_405C50
.text:00405C59                 jmp     short loc_405C18
.text:00405C59 sub_405BF0      endp
.text:00405C59
.text:00405C59 ; ---------------------------------------------------------------------------
.text:00405C5B                 align 10h
.text:00405C60
.text:00405C60 ; =============== S U B R O U T I N E =======================================
.text:00405C60
.text:00405C60 ; Attributes: info_from_lumina
.text:00405C60
.text:00405C60 ; void *__cdecl _alloca(size_t Size)
.text:00405C60 __alloca        proc near               ; CODE XREF: sub_401450+E↑p
.text:00405C60                 push    ecx
.text:00405C61                 mov     ecx, esp
.text:00405C63                 add     ecx, 8
.text:00405C66
.text:00405C66 loc_405C66:                             ; CODE XREF: __alloca+1B↓j
.text:00405C66                 cmp     eax, 1000h
.text:00405C6B                 jb      short loc_405C7D
.text:00405C6D                 sub     ecx, 1000h
.text:00405C73                 or      dword ptr [ecx], 0
.text:00405C76                 sub     eax, 1000h
.text:00405C7B                 jmp     short loc_405C66
.text:00405C7D ; ---------------------------------------------------------------------------
.text:00405C7D
.text:00405C7D loc_405C7D:                             ; CODE XREF: __alloca+B↑j
.text:00405C7D                 sub     ecx, eax
.text:00405C7F                 or      dword ptr [ecx], 0
.text:00405C82                 mov     eax, esp
.text:00405C84                 mov     esp, ecx
.text:00405C86                 mov     ecx, [eax]
.text:00405C88                 mov     eax, [eax+4]
.text:00405C8B                 jmp     eax
.text:00405C8B __alloca        endp
.text:00405C8B
.text:00405C8B ; ---------------------------------------------------------------------------
.text:00405C8D                 align 10h
.text:00405C90
.text:00405C90 ; =============== S U B R O U T I N E =======================================
.text:00405C90
.text:00405C90 ; Attributes: thunk
.text:00405C90
.text:00405C90 ; intptr_t __cdecl execvp(const char *FileName, const char *const *Arguments)
.text:00405C90 _execvp         proc near               ; CODE XREF: sub_401450+1C6↑p
.text:00405C90
.text:00405C90 FileName        = dword ptr  4
.text:00405C90 Arguments       = dword ptr  8
.text:00405C90
.text:00405C90                 jmp     ds:__imp__execvp
.text:00405C90 _execvp         endp
.text:00405C90
.text:00405C90 ; ---------------------------------------------------------------------------
.text:00405C96                 align 10h
.text:00405CA0
.text:00405CA0 ; =============== S U B R O U T I N E =======================================
.text:00405CA0
.text:00405CA0 ; Attributes: thunk
.text:00405CA0
.text:00405CA0 ; int __cdecl dup(int FileHandle)
.text:00405CA0 _dup            proc near               ; CODE XREF: sub_401450+247↑p
.text:00405CA0                                         ; sub_4050F0+57↑p
.text:00405CA0
.text:00405CA0 FileHandle      = dword ptr  4
.text:00405CA0
.text:00405CA0                 jmp     ds:__imp__dup
.text:00405CA0 _dup            endp
.text:00405CA0
.text:00405CA0 ; ---------------------------------------------------------------------------
.text:00405CA6                 align 10h
.text:00405CB0
.text:00405CB0 ; =============== S U B R O U T I N E =======================================
.text:00405CB0
.text:00405CB0 ; Attributes: thunk
.text:00405CB0
.text:00405CB0 ; int __cdecl dup2(int FileHandleSrc, int FileHandleDst)
.text:00405CB0 _dup2           proc near               ; CODE XREF: sub_401450+147↑p
.text:00405CB0                                         ; sub_401450+1FD↑p ...
.text:00405CB0
.text:00405CB0 FileHandleSrc   = dword ptr  4
.text:00405CB0 FileHandleDst   = dword ptr  8
.text:00405CB0
.text:00405CB0                 jmp     ds:__imp__dup2
.text:00405CB0 _dup2           endp
.text:00405CB0
.text:00405CB0 ; ---------------------------------------------------------------------------
.text:00405CB6                 align 10h
.text:00405CC0
.text:00405CC0 ; =============== S U B R O U T I N E =======================================
.text:00405CC0
.text:00405CC0 ; Attributes: thunk
.text:00405CC0
.text:00405CC0 ; int open(const char *FileName, int OpenFlag, ...)
.text:00405CC0 _open           proc near               ; CODE XREF: sub_401450+12C↑p
.text:00405CC0                                         ; sub_401450+357↑p
.text:00405CC0
.text:00405CC0 FileName        = dword ptr  4
.text:00405CC0 OpenFlag        = dword ptr  8
.text:00405CC0
.text:00405CC0                 jmp     ds:__imp__open
.text:00405CC0 _open           endp
.text:00405CC0
.text:00405CC0 ; ---------------------------------------------------------------------------
.text:00405CC6                 align 10h
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0 ; Attributes: thunk
.text:00405CD0
.text:00405CD0 ; int __cdecl isatty(int FileHandle)
.text:00405CD0 _isatty         proc near               ; CODE XREF: sub_401450+FF↑p
.text:00405CD0                                         ; sub_401450+19C↑p
.text:00405CD0
.text:00405CD0 FileHandle      = dword ptr  4
.text:00405CD0
.text:00405CD0                 jmp     ds:__imp__isatty
.text:00405CD0 _isatty         endp
.text:00405CD0
.text:00405CD0 ; ---------------------------------------------------------------------------
.text:00405CD6                 align 10h
.text:00405CE0                 jmp     ds:__set_app_type
.text:00405CE0 ; ---------------------------------------------------------------------------
.text:00405CE6                 align 10h
.text:00405CF0
.text:00405CF0 ; =============== S U B R O U T I N E =======================================
.text:00405CF0
.text:00405CF0 ; Attributes: thunk
.text:00405CF0
.text:00405CF0 ; void __cdecl cexit()
.text:00405CF0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405CF0                 jmp     ds:__imp__cexit
.text:00405CF0 _cexit          endp
.text:00405CF0
.text:00405CF0 ; ---------------------------------------------------------------------------
.text:00405CF6                 align 10h
.text:00405D00
.text:00405D00 ; =============== S U B R O U T I N E =======================================
.text:00405D00
.text:00405D00 ; Attributes: thunk
.text:00405D00
.text:00405D00 ; char ***__cdecl _p__environ()
.text:00405D00 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405D00                 jmp     ds:__imp___p__environ
.text:00405D00 __p__environ    endp
.text:00405D00
.text:00405D00 ; ---------------------------------------------------------------------------
.text:00405D06                 align 10h
.text:00405D10
.text:00405D10 ; =============== S U B R O U T I N E =======================================
.text:00405D10
.text:00405D10 ; Attributes: thunk
.text:00405D10
.text:00405D10 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405D10 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405D10                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405D10
.text:00405D10 Signal          = dword ptr  4
.text:00405D10 Function        = dword ptr  8
.text:00405D10
.text:00405D10                 jmp     ds:__imp_signal
.text:00405D10 signal          endp
.text:00405D10
.text:00405D10 ; ---------------------------------------------------------------------------
.text:00405D16                 align 10h
.text:00405D20
.text:00405D20 ; =============== S U B R O U T I N E =======================================
.text:00405D20
.text:00405D20 ; Attributes: thunk
.text:00405D20
.text:00405D20 ; int *__cdecl _p__fmode()
.text:00405D20 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405D20                 jmp     ds:__imp___p__fmode
.text:00405D20 __p__fmode      endp
.text:00405D20
.text:00405D20 ; ---------------------------------------------------------------------------
.text:00405D26                 align 10h
.text:00405D30
.text:00405D30 ; =============== S U B R O U T I N E =======================================
.text:00405D30
.text:00405D30 ; Attributes: thunk
.text:00405D30
.text:00405D30 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405D30 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405D30                                         ; sub_401080+90↑p ...
.text:00405D30
.text:00405D30 FileHandle      = dword ptr  4
.text:00405D30 Mode            = dword ptr  8
.text:00405D30
.text:00405D30                 jmp     ds:__imp__setmode
.text:00405D30 _setmode        endp
.text:00405D30
.text:00405D30 ; ---------------------------------------------------------------------------
.text:00405D36                 align 10h
.text:00405D40
.text:00405D40 ; =============== S U B R O U T I N E =======================================
.text:00405D40
.text:00405D40 ; Attributes: thunk
.text:00405D40
.text:00405D40 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00405D40                 jmp     ds:__imp___getmainargs
.text:00405D40 __getmainargs   endp
.text:00405D40
.text:00405D40 ; ---------------------------------------------------------------------------
.text:00405D46                 align 10h
.text:00405D50
.text:00405D50 ; =============== S U B R O U T I N E =======================================
.text:00405D50
.text:00405D50 ; Attributes: thunk
.text:00405D50
.text:00405D50 ; void __cdecl free(void *Block)
.text:00405D50 free            proc near               ; CODE XREF: sub_401450+190↑p
.text:00405D50                                         ; sub_404230+112↑p
.text:00405D50
.text:00405D50 Block           = dword ptr  4
.text:00405D50
.text:00405D50                 jmp     ds:__imp_free
.text:00405D50 free            endp
.text:00405D50
.text:00405D50 ; ---------------------------------------------------------------------------
.text:00405D56                 align 10h
.text:00405D60
.text:00405D60 ; =============== S U B R O U T I N E =======================================
.text:00405D60
.text:00405D60 ; Attributes: thunk
.text:00405D60
.text:00405D60 ; char *__cdecl getenv(const char *VarName)
.text:00405D60 getenv          proc near               ; CODE XREF: sub_401450+321↑p
.text:00405D60                                         ; sub_401D50+B57↑p
.text:00405D60
.text:00405D60 VarName         = dword ptr  4
.text:00405D60
.text:00405D60                 jmp     ds:__imp_getenv
.text:00405D60 getenv          endp
.text:00405D60
.text:00405D60 ; ---------------------------------------------------------------------------
.text:00405D66                 align 10h
.text:00405D70
.text:00405D70 ; =============== S U B R O U T I N E =======================================
.text:00405D70
.text:00405D70 ; Attributes: thunk
.text:00405D70
.text:00405D70 ; int *__cdecl errno()
.text:00405D70 _errno          proc near               ; CODE XREF: sub_401450+1CB↑p
.text:00405D70                                         ; sub_401450+1DC↑p ...
.text:00405D70                 jmp     ds:__imp__errno
.text:00405D70 _errno          endp
.text:00405D70
.text:00405D70 ; ---------------------------------------------------------------------------
.text:00405D76                 align 10h
.text:00405D80
.text:00405D80 ; =============== S U B R O U T I N E =======================================
.text:00405D80
.text:00405D80 ; Attributes: thunk
.text:00405D80
.text:00405D80 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00405D80 setlocale       proc near               ; CODE XREF: sub_401450+3C↑p
.text:00405D80
.text:00405D80 Category        = dword ptr  4
.text:00405D80 Locale          = dword ptr  8
.text:00405D80
.text:00405D80                 jmp     ds:__imp_setlocale
.text:00405D80 setlocale       endp
.text:00405D80
.text:00405D80 ; ---------------------------------------------------------------------------
.text:00405D86                 align 10h
.text:00405D90
.text:00405D90 ; =============== S U B R O U T I N E =======================================
.text:00405D90
.text:00405D90 ; Attributes: noreturn thunk
.text:00405D90
.text:00405D90 ; void __cdecl __noreturn exit(int Code)
.text:00405D90 exit            proc near               ; CODE XREF: sub_401450:loc_401689↑p
.text:00405D90                                         ; sub_401A10+3E↑p ...
.text:00405D90
.text:00405D90 Code            = dword ptr  4
.text:00405D90
.text:00405D90                 jmp     ds:__imp_exit
.text:00405D90 exit            endp
.text:00405D90
.text:00405D90 ; ---------------------------------------------------------------------------
.text:00405D96                 align 10h
.text:00405DA0
.text:00405DA0 ; =============== S U B R O U T I N E =======================================
.text:00405DA0
.text:00405DA0 ; Attributes: thunk
.text:00405DA0
.text:00405DA0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405DA0 fputs           proc near               ; CODE XREF: sub_401A10+83↑p
.text:00405DA0                                         ; sub_401A10+A5↑p ...
.text:00405DA0
.text:00405DA0 Buffer          = dword ptr  4
.text:00405DA0 Stream          = dword ptr  8
.text:00405DA0
.text:00405DA0                 jmp     ds:__imp_fputs
.text:00405DA0 fputs           endp
.text:00405DA0
.text:00405DA0 ; ---------------------------------------------------------------------------
.text:00405DA6                 align 10h
.text:00405DB0
.text:00405DB0 ; =============== S U B R O U T I N E =======================================
.text:00405DB0
.text:00405DB0 ; Attributes: thunk
.text:00405DB0
.text:00405DB0 ; int printf(const char *const Format, ...)
.text:00405DB0 printf          proc near               ; CODE XREF: sub_401A10+61↑p
.text:00405DB0                                         ; sub_401A10+E4↑p
.text:00405DB0
.text:00405DB0 Format          = dword ptr  4
.text:00405DB0
.text:00405DB0                 jmp     ds:__imp_printf
.text:00405DB0 printf          endp
.text:00405DB0
.text:00405DB0 ; ---------------------------------------------------------------------------
.text:00405DB6                 align 10h
.text:00405DC0
.text:00405DC0 ; =============== S U B R O U T I N E =======================================
.text:00405DC0
.text:00405DC0 ; Attributes: thunk
.text:00405DC0
.text:00405DC0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405DC0 fprintf         proc near               ; CODE XREF: sub_401450+434↑p
.text:00405DC0                                         ; sub_401450+465↑p ...
.text:00405DC0
.text:00405DC0 Stream          = dword ptr  4
.text:00405DC0 Format          = dword ptr  8
.text:00405DC0
.text:00405DC0                 jmp     ds:__imp_fprintf
.text:00405DC0 fprintf         endp
.text:00405DC0
.text:00405DC0 ; ---------------------------------------------------------------------------
.text:00405DC6                 align 10h
.text:00405DD0
.text:00405DD0 ; =============== S U B R O U T I N E =======================================
.text:00405DD0
.text:00405DD0 ; Attributes: thunk
.text:00405DD0
.text:00405DD0 ; size_t __cdecl strlen(const char *Str)
.text:00405DD0 strlen          proc near               ; CODE XREF: sub_401D50+2A9↑p
.text:00405DD0                                         ; sub_401D50+346↑p ...
.text:00405DD0
.text:00405DD0 Str             = dword ptr  4
.text:00405DD0
.text:00405DD0                 jmp     ds:__imp_strlen
.text:00405DD0 strlen          endp
.text:00405DD0
.text:00405DD0 ; ---------------------------------------------------------------------------
.text:00405DD6                 align 10h
.text:00405DE0
.text:00405DE0 ; =============== S U B R O U T I N E =======================================
.text:00405DE0
.text:00405DE0 ; Attributes: thunk
.text:00405DE0
.text:00405DE0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405DE0 strncmp         proc near               ; CODE XREF: sub_401D50+23F↑p
.text:00405DE0                                         ; sub_401D50+699↑p
.text:00405DE0
.text:00405DE0 Str1            = dword ptr  4
.text:00405DE0 Str2            = dword ptr  8
.text:00405DE0 MaxCount        = dword ptr  0Ch
.text:00405DE0
.text:00405DE0                 jmp     ds:__imp_strncmp
.text:00405DE0 strncmp         endp
.text:00405DE0
.text:00405DE0 ; ---------------------------------------------------------------------------
.text:00405DE6                 align 10h
.text:00405DF0
.text:00405DF0 ; =============== S U B R O U T I N E =======================================
.text:00405DF0
.text:00405DF0 ; Attributes: thunk
.text:00405DF0
.text:00405DF0 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405DF0 strchr          proc near               ; CODE XREF: sub_401D50+469↑p
.text:00405DF0                                         ; sub_401D50+53A↑p ...
.text:00405DF0
.text:00405DF0 Str             = dword ptr  4
.text:00405DF0 Val             = dword ptr  8
.text:00405DF0
.text:00405DF0                 jmp     ds:__imp_strchr
.text:00405DF0 strchr          endp
.text:00405DF0
.text:00405DF0 ; ---------------------------------------------------------------------------
.text:00405DF6                 align 10h
.text:00405E00
.text:00405E00 ; =============== S U B R O U T I N E =======================================
.text:00405E00
.text:00405E00 ; Attributes: thunk
.text:00405E00
.text:00405E00 ; int __cdecl fclose(FILE *Stream)
.text:00405E00 fclose          proc near               ; CODE XREF: sub_402F80+27↑p
.text:00405E00
.text:00405E00 Stream          = dword ptr  4
.text:00405E00
.text:00405E00                 jmp     ds:__imp_fclose
.text:00405E00 fclose          endp
.text:00405E00
.text:00405E00 ; ---------------------------------------------------------------------------
.text:00405E06                 align 10h
.text:00405E10
.text:00405E10 ; =============== S U B R O U T I N E =======================================
.text:00405E10
.text:00405E10 ; Attributes: noreturn thunk
.text:00405E10
.text:00405E10 ; void __cdecl __noreturn abort()
.text:00405E10 abort           proc near               ; CODE XREF: sub_404230:loc_4043EA↑p
.text:00405E10                                         ; sub_404A70:loc_404B0C↑p ...
.text:00405E10                 jmp     ds:__imp_abort
.text:00405E10 abort           endp
.text:00405E10
.text:00405E10 ; ---------------------------------------------------------------------------
.text:00405E16                 align 10h
.text:00405E20
.text:00405E20 ; =============== S U B R O U T I N E =======================================
.text:00405E20
.text:00405E20 ; Attributes: thunk
.text:00405E20
.text:00405E20 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405E20 iswctype        proc near               ; CODE XREF: sub_4030F0+78B↑p
.text:00405E20
.text:00405E20 C               = word ptr  4
.text:00405E20 Type            = word ptr  8
.text:00405E20
.text:00405E20                 jmp     ds:__imp_iswctype
.text:00405E20 iswctype        endp
.text:00405E20
.text:00405E20 ; ---------------------------------------------------------------------------
.text:00405E26                 align 10h
.text:00405E30
.text:00405E30 ; =============== S U B R O U T I N E =======================================
.text:00405E30
.text:00405E30 ; Attributes: thunk
.text:00405E30
.text:00405E30 ; int __cdecl isctype(int C, int Type)
.text:00405E30 _isctype        proc near               ; CODE XREF: sub_4030F0+610↑p
.text:00405E30
.text:00405E30 C               = dword ptr  4
.text:00405E30 Type            = dword ptr  8
.text:00405E30
.text:00405E30                 jmp     ds:__imp__isctype
.text:00405E30 _isctype        endp
.text:00405E30
.text:00405E30 ; ---------------------------------------------------------------------------
.text:00405E36                 align 10h
.text:00405E40
.text:00405E40 ; =============== S U B R O U T I N E =======================================
.text:00405E40
.text:00405E40 ; Attributes: thunk
.text:00405E40
.text:00405E40 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00405E40 memcpy          proc near               ; CODE XREF: .text:004045E8↑p
.text:00405E40                                         ; .text:00404631↑p
.text:00405E40
.text:00405E40 Src             = dword ptr  8
.text:00405E40 Size            = dword ptr  0Ch
.text:00405E40
.text:00405E40                 jmp     ds:__imp_memcpy
.text:00405E40 memcpy          endp
.text:00405E40
.text:00405E40 ; ---------------------------------------------------------------------------
.text:00405E46                 align 10h
.text:00405E50
.text:00405E50 ; =============== S U B R O U T I N E =======================================
.text:00405E50
.text:00405E50 ; Attributes: thunk
.text:00405E50
.text:00405E50 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405E50 memset          proc near               ; CODE XREF: .text:00404566↑p
.text:00405E50
.text:00405E50 Val             = dword ptr  8
.text:00405E50 Size            = dword ptr  0Ch
.text:00405E50
.text:00405E50                 jmp     ds:__imp_memset
.text:00405E50 memset          endp
.text:00405E50
.text:00405E50 ; ---------------------------------------------------------------------------
.text:00405E56                 align 10h
.text:00405E60
.text:00405E60 ; =============== S U B R O U T I N E =======================================
.text:00405E60
.text:00405E60 ; Attributes: thunk
.text:00405E60
.text:00405E60 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405E60 calloc          proc near               ; CODE XREF: .text:004045A3↑p
.text:00405E60
.text:00405E60 Count           = dword ptr  4
.text:00405E60 Size            = dword ptr  8
.text:00405E60
.text:00405E60                 jmp     ds:__imp_calloc
.text:00405E60 calloc          endp
.text:00405E60
.text:00405E60 ; ---------------------------------------------------------------------------
.text:00405E66                 align 10h
.text:00405E70
.text:00405E70 ; =============== S U B R O U T I N E =======================================
.text:00405E70
.text:00405E70 ; Attributes: thunk
.text:00405E70
.text:00405E70 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405E70 realloc         proc near               ; CODE XREF: .text:004044A0↑p
.text:00405E70                                         ; sub_4044D0+16↑p ...
.text:00405E70
.text:00405E70 Block           = dword ptr  4
.text:00405E70 Size            = dword ptr  8
.text:00405E70
.text:00405E70                 jmp     ds:__imp_realloc
.text:00405E70 realloc         endp
.text:00405E70
.text:00405E70 ; ---------------------------------------------------------------------------
.text:00405E76                 align 10h
.text:00405E80
.text:00405E80 ; =============== S U B R O U T I N E =======================================
.text:00405E80
.text:00405E80 ; Attributes: thunk
.text:00405E80
.text:00405E80 ; void *__cdecl malloc(size_t Size)
.text:00405E80 malloc          proc near               ; CODE XREF: sub_404400+24↑p
.text:00405E80                                         ; sub_404440+E↑p ...
.text:00405E80
.text:00405E80 Size            = dword ptr  4
.text:00405E80
.text:00405E80                 jmp     ds:__imp_malloc
.text:00405E80 malloc          endp
.text:00405E80
.text:00405E80 ; ---------------------------------------------------------------------------
.text:00405E86                 align 10h
.text:00405E90
.text:00405E90 ; =============== S U B R O U T I N E =======================================
.text:00405E90
.text:00405E90 ; Attributes: thunk
.text:00405E90
.text:00405E90 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405E90 vfprintf        proc near               ; CODE XREF: sub_404A70+C1↑p
.text:00405E90                                         ; sub_404D30+49↑p ...
.text:00405E90
.text:00405E90 Stream          = dword ptr  4
.text:00405E90 Format          = dword ptr  8
.text:00405E90 ArgList         = dword ptr  0Ch
.text:00405E90
.text:00405E90                 jmp     ds:__imp_vfprintf
.text:00405E90 vfprintf        endp
.text:00405E90
.text:00405E90 ; ---------------------------------------------------------------------------
.text:00405E96                 align 10h
.text:00405EA0
.text:00405EA0 ; =============== S U B R O U T I N E =======================================
.text:00405EA0
.text:00405EA0 ; Attributes: thunk
.text:00405EA0
.text:00405EA0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405EA0 _flsbuf         proc near               ; CODE XREF: sub_404A70+128↑p
.text:00405EA0                                         ; sub_404A70+13A↑p ...
.text:00405EA0
.text:00405EA0 File            = dword ptr  8
.text:00405EA0
.text:00405EA0                 jmp     ds:__imp__flsbuf
.text:00405EA0 _flsbuf         endp
.text:00405EA0
.text:00405EA0 ; ---------------------------------------------------------------------------
.text:00405EA6                 align 10h
.text:00405EB0
.text:00405EB0 ; =============== S U B R O U T I N E =======================================
.text:00405EB0
.text:00405EB0 ; Attributes: thunk
.text:00405EB0
.text:00405EB0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405EB0 strcmp          proc near               ; CODE XREF: sub_404E34+180↑p
.text:00405EB0
.text:00405EB0 Str1            = dword ptr  4
.text:00405EB0 Str2            = dword ptr  8
.text:00405EB0
.text:00405EB0                 jmp     ds:__imp_strcmp
.text:00405EB0 strcmp          endp
.text:00405EB0
.text:00405EB0 ; ---------------------------------------------------------------------------
.text:00405EB6                 align 10h
.text:00405EC0
.text:00405EC0 ; =============== S U B R O U T I N E =======================================
.text:00405EC0
.text:00405EC0 ; Attributes: thunk
.text:00405EC0
.text:00405EC0 ; int __cdecl fflush(FILE *Stream)
.text:00405EC0 fflush          proc near               ; CODE XREF: sub_404D30+19↑p
.text:00405EC0                                         ; sub_404D30+81↑p ...
.text:00405EC0
.text:00405EC0 Stream          = dword ptr  4
.text:00405EC0
.text:00405EC0                 jmp     ds:__imp_fflush
.text:00405EC0 fflush          endp
.text:00405EC0
.text:00405EC0 ; ---------------------------------------------------------------------------
.text:00405EC6                 align 10h
.text:00405ED0
.text:00405ED0 ; =============== S U B R O U T I N E =======================================
.text:00405ED0
.text:00405ED0 ; Attributes: thunk
.text:00405ED0
.text:00405ED0 ; char *__cdecl strerror(int ErrorMessage)
.text:00405ED0 strerror        proc near               ; CODE XREF: sub_404D30+A5↑p
.text:00405ED0                                         ; sub_404E34+10F↑p
.text:00405ED0
.text:00405ED0 ErrorMessage    = dword ptr  4
.text:00405ED0
.text:00405ED0                 jmp     ds:__imp_strerror
.text:00405ED0 strerror        endp
.text:00405ED0
.text:00405ED0 ; ---------------------------------------------------------------------------
.text:00405ED6                 align 10h
.text:00405EE0
.text:00405EE0 ; =============== S U B R O U T I N E =======================================
.text:00405EE0
.text:00405EE0 ; Attributes: thunk
.text:00405EE0
.text:00405EE0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00405EE0 _filelengthi64  proc near               ; CODE XREF: sub_404FD0+113↑p
.text:00405EE0
.text:00405EE0 FileHandle      = dword ptr  4
.text:00405EE0
.text:00405EE0                 jmp     ds:__imp__filelengthi64
.text:00405EE0 _filelengthi64  endp
.text:00405EE0
.text:00405EE0 ; ---------------------------------------------------------------------------
.text:00405EE6                 align 10h
.text:00405EF0
.text:00405EF0 ; =============== S U B R O U T I N E =======================================
.text:00405EF0
.text:00405EF0 ; Attributes: thunk
.text:00405EF0
.text:00405EF0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00405EF0 _get_osfhandle  proc near               ; CODE XREF: sub_404FD0+12↑p
.text:00405EF0
.text:00405EF0 FileHandle      = dword ptr  4
.text:00405EF0
.text:00405EF0                 jmp     ds:__imp__get_osfhandle
.text:00405EF0 _get_osfhandle  endp
.text:00405EF0
.text:00405EF0 ; ---------------------------------------------------------------------------
.text:00405EF6                 align 10h
.text:00405F00
.text:00405F00 ; =============== S U B R O U T I N E =======================================
.text:00405F00
.text:00405F00 ; Attributes: thunk
.text:00405F00
.text:00405F00 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:00405F00 _lseeki64       proc near               ; CODE XREF: sub_404FD0+36↑p
.text:00405F00
.text:00405F00 FileHandle      = dword ptr  4
.text:00405F00 Offset          = qword ptr  8
.text:00405F00 Origin          = dword ptr  10h
.text:00405F00
.text:00405F00                 jmp     ds:__imp__lseeki64
.text:00405F00 _lseeki64       endp
.text:00405F00
.text:00405F00 ; ---------------------------------------------------------------------------
.text:00405F06                 align 10h
.text:00405F10
.text:00405F10 ; =============== S U B R O U T I N E =======================================
.text:00405F10
.text:00405F10 ; Attributes: thunk
.text:00405F10
.text:00405F10 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405F10 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405F10
.text:00405F10 lpTopLevelExceptionFilter= dword ptr  4
.text:00405F10
.text:00405F10                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405F10 SetUnhandledExceptionFilter endp
.text:00405F10
.text:00405F10 ; ---------------------------------------------------------------------------
.text:00405F16                 align 10h
.text:00405F20
.text:00405F20 ; =============== S U B R O U T I N E =======================================
.text:00405F20
.text:00405F20 ; Attributes: noreturn thunk
.text:00405F20
.text:00405F20 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405F20 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405F20
.text:00405F20 uExitCode       = dword ptr  4
.text:00405F20
.text:00405F20                 jmp     ds:__imp_ExitProcess
.text:00405F20 ExitProcess     endp
.text:00405F20
.text:00405F20 ; ---------------------------------------------------------------------------
.text:00405F26                 align 10h
.text:00405F30
.text:00405F30 ; =============== S U B R O U T I N E =======================================
.text:00405F30
.text:00405F30 ; Attributes: thunk
.text:00405F30
.text:00405F30 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00405F30 UnlockFile      proc near               ; CODE XREF: sub_404FD0+B4↑p
.text:00405F30
.text:00405F30 hFile           = dword ptr  4
.text:00405F30 dwFileOffsetLow = dword ptr  8
.text:00405F30 dwFileOffsetHigh= dword ptr  0Ch
.text:00405F30 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00405F30 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00405F30
.text:00405F30                 jmp     ds:__imp_UnlockFile
.text:00405F30 UnlockFile      endp
.text:00405F30
.text:00405F30 ; ---------------------------------------------------------------------------
.text:00405F36                 align 10h
.text:00405F40
.text:00405F40 ; =============== S U B R O U T I N E =======================================
.text:00405F40
.text:00405F40 ; Attributes: thunk
.text:00405F40
.text:00405F40 ; BOOL __stdcall LockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.text:00405F40 LockFile        proc near               ; CODE XREF: sub_404FD0+F7↑p
.text:00405F40
.text:00405F40 hFile           = dword ptr  4
.text:00405F40 dwFileOffsetLow = dword ptr  8
.text:00405F40 dwFileOffsetHigh= dword ptr  0Ch
.text:00405F40 nNumberOfBytesToLockLow= dword ptr  10h
.text:00405F40 nNumberOfBytesToLockHigh= dword ptr  14h
.text:00405F40
.text:00405F40                 jmp     ds:__imp_LockFile
.text:00405F40 LockFile        endp
.text:00405F40
.text:00405F40 ; ---------------------------------------------------------------------------
.text:00405F46                 align 10h
.text:00405F50
.text:00405F50 ; =============== S U B R O U T I N E =======================================
.text:00405F50
.text:00405F50 ; Attributes: thunk
.text:00405F50
.text:00405F50 ; DWORD __stdcall GetLastError()
.text:00405F50 GetLastError    proc near               ; CODE XREF: sub_405660+3↑p
.text:00405F50                 jmp     ds:__imp_GetLastError
.text:00405F50 GetLastError    endp
.text:00405F50
.text:00405F50 ; ---------------------------------------------------------------------------
.text:00405F56                 align 10h
.text:00405F60 dword_405F60    dd 0FFFFFFFFh           ; DATA XREF: .text:00405B99↑r
.text:00405F60                                         ; .text:loc_405BC0↑r ...
.text:00405F64 dword_405F64    dd 0                    ; DATA XREF: .text:loc_405BCC↑r
.text:00405F64                                         ; sub_405BF0:loc_405C3D↑r
.text:00405F68                 dd 0FFFFFFFFh
.text:00405F6C dword_405F6C    dd 25h dup(0)           ; DATA XREF: .data:off_406084↓o
.text:00405F6C _text           ends
.text:00405F6C
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00005400
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 ; int Code
.data:00406010 Code            dd 1                    ; DATA XREF: sub_401450+6F↑w
.data:00406010                                         ; sub_402F80+6D↑r ...
.data:00406014                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_401450+E7↑r
.data:00406020                                         ; sub_401450:loc_401601↑r ...
.data:00406024 dword_406024    dd 1                    ; DATA XREF: sub_4028E0+11↑r
.data:00406024                                         ; .text:00402981↑r ...
.data:00406028 dword_406028    dd 3Fh                  ; DATA XREF: sub_4028E0+7D↑w
.data:00406028                                         ; .text:004029ED↑w
.data:0040602C                 align 10h
.data:00406030 dword_406030    dd 1                    ; DATA XREF: sub_404230+22↑r
.data:00406030                                         ; sub_404230+65↑r ...
.data:00406034 dword_406034    dd 100h                 ; DATA XREF: sub_404230+3F↑o
.data:00406034                                         ; sub_404230+1A2↑r ...
.data:00406038 off_406038      dd offset unk_407040    ; DATA XREF: sub_404230+1AA↑r
.data:0040603C ; void *off_40603C
.data:0040603C off_40603C      dd offset dword_406034  ; DATA XREF: sub_404230+39↑r
.data:0040603C                                         ; sub_404230+60↑w ...
.data:00406040 ; char *Buffer
.data:00406040 Buffer          dd offset aCopyrightC2005
.data:00406040                                         ; DATA XREF: sub_404A70+DC↑r
.data:00406040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406044                 align 10h
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_405BF0+9↑r
.data:00406080                                         ; sub_405BF0+1D↑w
.data:00406084 off_406084      dd offset dword_405F6C  ; DATA XREF: sub_405B60+6↑r
.data:00406084                                         ; sub_405B60+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000230 (    560.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_4028E0+9↑o
.bss:00407000                                         ; sub_4028E0+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_4028E0+21↑w
.bss:00407004                                         ; .text:00402999↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_4028E0+77↑r
.bss:00407008                                         ; .text:004029E7↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_4028E0+6B↑r
.bss:0040700C                                         ; .text:004029DB↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:00402F54↑w
.bss:00407030                                         ; sub_402F80+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_404230+100↑o
.bss:00407040                                         ; .data:off_406038↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_403BC1↑o
.bss:00407140                                         ; .text:loc_403BE0↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_403C60↑o
.bss:00407144                                         ; .text:004040E8↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:004040E2↑r
.bss:00407148                                         ; sub_404190+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:004040D6↑r
.bss:0040714C                                         ; sub_404190+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:004040F2↑r
.bss:00407150                                         ; sub_404190+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00404102↑r
.bss:00407154                                         ; sub_404190+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:0040411F↑r
.bss:00407158                                         ; sub_404190+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00404115↑r
.bss:0040715C                                         ; sub_404190+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:004040F8↑r
.bss:00407160                                         ; sub_404190+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_404E34:loc_404E6D↑w
.bss:00407170                                         ; sub_404E34:loc_404FA0↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_404E34+2D↑r
.bss:00407180                                         ; sub_404E34+3F↑w
.bss:00407184                 align 10h
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: sub_401450+36↑w
.bss:00407190                                         ; sub_401450+420↑r ...
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: sub_4028E0+71↑w
.bss:004071B0                                         ; .text:004029E1↑w
.bss:004071B4                 align 10h
.bss:004071C0 dword_4071C0    dd ?                    ; CODE XREF: sub_404E34+63↑p
.bss:004071C0                                         ; DATA XREF: sub_404D30+1E↑r ...
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_404D30+4E↑w
.bss:004071D0                                         ; sub_404E34+AB↑w
.bss:004071D4                 align 40h
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_404E34+13↑r
.bss:00407204                 align 1000h
.bss:00407204 _bss            ends
.bss:00407204
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 00000680 (   1664.)
.idata:00408000 ; Section size in file          : 00000800 (   2048.)
.idata:00408000 ; Offset to raw data for section: 00005600
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408180 ;
.idata:00408180 ; Imports from libintl3.dll
.idata:00408180 ;
.idata:00408180                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408180                                         ; CODE XREF: sub_401450+50↑p
.idata:00408180                                         ; DATA XREF: sub_401450+50↑r ...
.idata:00408184                 extrn libintl_gettext:dword
.idata:00408184                                         ; CODE XREF: sub_401450+167↑p
.idata:00408184                                         ; sub_401450+218↑p ...
.idata:00408188                 extrn libintl_textdomain:dword
.idata:00408188                                         ; CODE XREF: sub_401450+5D↑p
.idata:00408188                                         ; DATA XREF: sub_401450+5D↑r ...
.idata:0040818C
.idata:00408194 ;
.idata:00408194 ; Imports from KERNEL32.dll
.idata:00408194 ;
.idata:00408194 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408194                 extrn __imp_ExitProcess:dword
.idata:00408194                                         ; DATA XREF: ExitProcess↑r
.idata:00408198 ; DWORD (__stdcall *GetLastError)()
.idata:00408198                 extrn __imp_GetLastError:dword
.idata:00408198                                         ; DATA XREF: GetLastError↑r
.idata:0040819C ; BOOL (__stdcall *LockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToLockLow, DWORD nNumberOfBytesToLockHigh)
.idata:0040819C                 extrn __imp_LockFile:dword
.idata:0040819C                                         ; DATA XREF: LockFile↑r
.idata:004081A0 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004081A0                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004081A0                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004081A4 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004081A4                 extrn __imp_UnlockFile:dword
.idata:004081A4                                         ; DATA XREF: UnlockFile↑r
.idata:004081A8
.idata:004081B0 ;
.idata:004081B0 ; Imports from msvcrt.dll
.idata:004081B0 ;
.idata:004081B0 ; int (__cdecl *_dup)(int FileHandle)
.idata:004081B0                 extrn __imp__dup:dword  ; DATA XREF: _dup↑r
.idata:004081B4 ; int (__cdecl *_dup2)(int FileHandleSrc, int FileHandleDst)
.idata:004081B4                 extrn __imp__dup2:dword ; DATA XREF: _dup2↑r
.idata:004081B8 ; intptr_t (__cdecl *_execvp)(const char *FileName, const char *const *Arguments)
.idata:004081B8                 extrn __imp__execvp:dword
.idata:004081B8                                         ; DATA XREF: _execvp↑r
.idata:004081BC ; int (__cdecl *_isatty)(int FileHandle)
.idata:004081BC                 extrn __imp__isatty:dword
.idata:004081BC                                         ; DATA XREF: _isatty↑r
.idata:004081C0 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:004081C0                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:004081C4
.idata:004081CC ;
.idata:004081CC ; Imports from MSVCP60.DLL
.idata:004081CC ;
.idata:004081CC ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004081CC                 extrn __imp_mbrtowc:dword
.idata:004081CC                                         ; DATA XREF: mbrtowc↑r
.idata:004081D0
.idata:004081D8 ;
.idata:004081D8 ; Imports from msvcrt.dll
.idata:004081D8 ;
.idata:004081D8                 extrn __imp___getmainargs:dword
.idata:004081D8                                         ; DATA XREF: __getmainargs↑r
.idata:004081DC ; int _mb_cur_max
.idata:004081DC                 extrn __mb_cur_max:dword
.idata:004081DC                                         ; DATA XREF: sub_4030F0+7↑r
.idata:004081DC                                         ; sub_4030F0+5F3↑r
.idata:004081E0 ; char ***(__cdecl *__p__environ)()
.idata:004081E0                 extrn __imp___p__environ:dword
.idata:004081E0                                         ; DATA XREF: __p__environ↑r
.idata:004081E4 ; int *(__cdecl *__p__fmode)()
.idata:004081E4                 extrn __imp___p__fmode:dword
.idata:004081E4                                         ; DATA XREF: __p__fmode↑r
.idata:004081E8                 extrn __pioinfo:dword   ; DATA XREF: sub_4050F0:loc_405158↑r
.idata:004081E8                                         ; sub_4050F0:loc_405183↑r ...
.idata:004081EC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081EC                 extrn __set_app_type:dword
.idata:004081EC                                         ; CODE XREF: start+D↑p
.idata:004081EC                                         ; .text:0040102D↑p
.idata:004081EC                                         ; DATA XREF: ...
.idata:004081F0 ; void (__cdecl *_cexit)()
.idata:004081F0                 extrn __imp__cexit:dword
.idata:004081F0                                         ; DATA XREF: _cexit↑r
.idata:004081F4 ; int *(__cdecl *_errno)()
.idata:004081F4                 extrn __imp__errno:dword
.idata:004081F4                                         ; DATA XREF: _errno↑r
.idata:004081F8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004081F8                 extrn __imp__filelengthi64:dword
.idata:004081F8                                         ; DATA XREF: _filelengthi64↑r
.idata:004081FC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081FC                 extrn __imp__flsbuf:dword
.idata:004081FC                                         ; DATA XREF: _flsbuf↑r
.idata:00408200 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00408200                 extrn __imp__get_osfhandle:dword
.idata:00408200                                         ; DATA XREF: _get_osfhandle↑r
.idata:00408204 ; FILE iob[]
.idata:00408204                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:00408204                                         ; sub_401080+75↑r ...
.idata:00408208 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00408208                 extrn __imp__isctype:dword
.idata:00408208                                         ; DATA XREF: _isctype↑r
.idata:0040820C ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:0040820C                 extrn __imp__lseeki64:dword
.idata:0040820C                                         ; DATA XREF: _lseeki64↑r
.idata:00408210 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00408210                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00408210                                         ; DATA XREF: .text:0040106C↑r
.idata:00408214 ; const unsigned __int16 *pctype
.idata:00408214                 extrn _pctype:dword     ; DATA XREF: sub_4030F0:loc_4037E4↑r
.idata:00408218 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00408218                 extrn __imp__setmode:dword
.idata:00408218                                         ; DATA XREF: _setmode↑r
.idata:0040821C ; void (__cdecl __noreturn *abort)()
.idata:0040821C                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00408220 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00408220                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00408220                                         ; DATA XREF: sub_401040+C↑r
.idata:00408224 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00408224                 extrn __imp_calloc:dword
.idata:00408224                                         ; DATA XREF: calloc↑r
.idata:00408228 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00408228                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040822C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040822C                 extrn __imp_fclose:dword
.idata:0040822C                                         ; DATA XREF: fclose↑r
.idata:00408230 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00408230                 extrn __imp_fflush:dword
.idata:00408230                                         ; DATA XREF: fflush↑r
.idata:00408234 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00408234                 extrn __imp_fprintf:dword
.idata:00408234                                         ; DATA XREF: fprintf↑r
.idata:00408238 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00408238                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040823C ; void (__cdecl *free)(void *Block)
.idata:0040823C                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00408240 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00408240                 extrn __imp_getenv:dword
.idata:00408240                                         ; DATA XREF: getenv↑r
.idata:00408244 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00408244                 extrn __imp_iswctype:dword
.idata:00408244                                         ; DATA XREF: iswctype↑r
.idata:00408248 ; void *(__cdecl *malloc)(size_t Size)
.idata:00408248                 extrn __imp_malloc:dword
.idata:00408248                                         ; DATA XREF: malloc↑r
.idata:0040824C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040824C                 extrn __imp_memcpy:dword
.idata:0040824C                                         ; DATA XREF: memcpy↑r
.idata:00408250 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00408250                 extrn __imp_memset:dword
.idata:00408250                                         ; DATA XREF: memset↑r
.idata:00408254 ; int (*printf)(const char *const Format, ...)
.idata:00408254                 extrn __imp_printf:dword
.idata:00408254                                         ; DATA XREF: printf↑r
.idata:00408258 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408258                 extrn __imp_realloc:dword
.idata:00408258                                         ; DATA XREF: realloc↑r
.idata:0040825C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040825C                 extrn __imp_setlocale:dword
.idata:0040825C                                         ; DATA XREF: setlocale↑r
.idata:00408260 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00408260                 extrn __imp_signal:dword
.idata:00408260                                         ; DATA XREF: signal↑r
.idata:00408264 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408264                 extrn __imp_strchr:dword
.idata:00408264                                         ; DATA XREF: strchr↑r
.idata:00408268 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408268                 extrn __imp_strcmp:dword
.idata:00408268                                         ; DATA XREF: strcmp↑r
.idata:0040826C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040826C                 extrn __imp_strerror:dword
.idata:0040826C                                         ; DATA XREF: strerror↑r
.idata:00408270 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00408270                 extrn __imp_strlen:dword
.idata:00408270                                         ; DATA XREF: strlen↑r
.idata:00408274 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408274                 extrn __imp_strncmp:dword
.idata:00408274                                         ; DATA XREF: strncmp↑r
.idata:00408278 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408278                 extrn __imp_vfprintf:dword
.idata:00408278                                         ; DATA XREF: vfprintf↑r
.idata:0040827C
.idata:0040827C
.idata:0040827C
.idata:0040827C                 end start
